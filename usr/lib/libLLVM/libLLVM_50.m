uint64_t llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(llvm::SourceMgr::SrcBuffer *this, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v4 = *(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8);
  if (v4 > 0xFF)
  {
    if (a2) {
      v5 = a2 - 1;
    }
    else {
      v5 = 0;
    }
    v6 = (char *)this + 8;
    if (v4 >> 16)
    {
      if (HIDWORD(v4))
      {
        v7 = (void *)sub_1CD0AA974((uint64_t)v6);
        result = *(void *)(*(void *)this + 8);
        if (a2 < 2) {
          return result;
        }
        v10 = v7;
        v9 = *v7;
        if (v5 <= (v10[1] - v9) >> 3)
        {
          v11 = *(void *)(v9 + 8 * (v5 - 1));
LABEL_22:
          result += v11 + 1;
          return result;
        }
      }
      else
      {
        v19 = (void *)sub_1CD0AA810((uint64_t)v6);
        result = *(void *)(*(void *)this + 8);
        if (a2 < 2) {
          return result;
        }
        v21 = v19;
        v20 = *v19;
        if (v5 <= (v21[1] - v20) >> 2)
        {
          v11 = *(unsigned int *)(v20 + 4 * (v5 - 1));
          goto LABEL_22;
        }
      }
    }
    else
    {
      v16 = (void *)sub_1CD0AA6B4((uint64_t)v6);
      result = *(void *)(*(void *)this + 8);
      if (a2 < 2) {
        return result;
      }
      v18 = v16;
      v17 = *v16;
      if (v5 <= (v18[1] - v17) >> 1)
      {
        v11 = *(unsigned __int16 *)(v17 + 2 * (v5 - 1));
        goto LABEL_22;
      }
    }
    return 0;
  }
  v12 = (void *)sub_1CD0AA550((uint64_t)this + 8);
  v13 = a2 - 1;
  if (!a2) {
    v13 = 0;
  }
  result = *(void *)(*(void *)this + 8);
  if (a2 >= 2)
  {
    v15 = v12;
    v14 = *v12;
    if (v15[1] - v14 >= (unint64_t)v13)
    {
      v11 = *(unsigned __int8 *)(v14 + v13 - 1);
      goto LABEL_22;
    }
    return 0;
  }
  return result;
}

__n128 llvm::SourceMgr::SrcBuffer::SrcBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a2->n128_u64[0] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  a2->n128_u64[0] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::SourceMgr::getFormattedLocationNoOffset(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v8 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a1;
    while (*(void *)(*(void *)v10 + 8) > (unint64_t)a2
         || *(void *)(*(void *)v10 + 16) < (unint64_t)a2)
    {
      ++v9;
      v10 += 24;
      if (v8 == v9) {
        goto LABEL_6;
      }
    }
    int v11 = v9 + 1;
  }
  else
  {
LABEL_6:
    int v11 = 0;
  }
  uint64_t v12 = *(void *)(*a1 + 24 * (v11 - 1));
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  v15 = (char *)v13;
  std::string::size_type v16 = v14;
  v36[0] = v13;
  v36[1] = v14;
  if (a3)
  {
    if (v13)
    {
      if (v14 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v14 >= 0x17)
        {
          uint64_t v23 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v23 = v14 | 7;
          }
          uint64_t v24 = v23 + 1;
          p_dst = (std::string *)operator new(v23 + 1);
          __dst.__r_.__value_.__l.__size_ = v16;
          __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
          p_dst = &__dst;
          if (!v14) {
            goto LABEL_30;
          }
        }
        memmove(p_dst, v15, v16);
LABEL_30:
        p_dst->__r_.__value_.__s.__data_[v16] = 0;
        goto LABEL_36;
      }
LABEL_49:
      abort();
    }
LABEL_14:
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_36;
  }
  uint64_t last_of = llvm::StringRef::find_last_of(v36, "/\\"", 2, 0xFFFFFFFFFFFFFFFFLL);
  if (!v15) {
    goto LABEL_14;
  }
  if (last_of == v16) {
    std::string::size_type v19 = 0;
  }
  else {
    std::string::size_type v19 = last_of + 1;
  }
  if (v16 >= v19) {
    std::string::size_type v20 = v19;
  }
  else {
    std::string::size_type v20 = v16;
  }
  std::string::size_type v21 = v16 - v20;
  if (v16 - v20 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_49;
  }
  if (v21 >= 0x17)
  {
    uint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v25 = v21 | 7;
    }
    uint64_t v26 = v25 + 1;
    v22 = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v16 - v20;
    v22 = &__dst;
    if (v16 <= v19) {
      goto LABEL_35;
    }
  }
  memmove(v22, &v15[v20], v21);
LABEL_35:
  v22->__r_.__value_.__s.__data_[v21] = 0;
LABEL_36:
  v27 = std::string::append(&__dst, ":");
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  unsigned int LineAndColumn = llvm::SourceMgr::getLineAndColumn(a1, a2, v11);
  std::to_string(&__p, LineAndColumn);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  v32 = std::string::append(&v35, (const std::string::value_type *)p_p, size);
  *a4 = *v32;
  v32->__r_.__value_.__r.__words[0] = 0;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::SourceMgr::FindLocForLineAndColumn(llvm::SourceMgr *this, int a2, unsigned int a3, unsigned int a4)
{
  v5 = (llvm::SourceMgr::SrcBuffer *)(*(void *)this + 24 * (a2 - 1));
  uint64_t result = llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(v5, a3);
  if (result && a4 >= 2)
  {
    uint64_t v7 = a4 - 1;
    uint64_t v8 = result + v7;
    if ((unint64_t)(result + v7) <= *(void *)(*(void *)v5 + 16))
    {
      v10[0] = result;
      v10[1] = v7;
      uint64_t first_of = llvm::StringRef::find_first_of(v10, "\n\r", 2, 0);
      uint64_t result = 0;
      if (first_of == -1) {
        return v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::SourceMgr::GetMessage(llvm::Twine *this@<X3>, uint64_t *a2@<X0>, char *a3@<X1>, int a4@<W2>, unint64_t *a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v56[4] = *MEMORY[0x1E4F143B8];
  v54 = v56;
  uint64_t v55 = 0x400000000;
  if (a3)
  {
    uint64_t v20 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
    v47 = this;
    if (v20)
    {
      uint64_t v21 = 0;
      uint64_t v22 = *a2;
      while (*(void *)(*(void *)v22 + 8) > (unint64_t)a3
           || *(void *)(*(void *)v22 + 16) < (unint64_t)a3)
      {
        ++v21;
        v22 += 24;
        if (v20 == v21) {
          goto LABEL_8;
        }
      }
      int v23 = v21 + 1;
    }
    else
    {
LABEL_8:
      int v23 = 0;
    }
    uint64_t v24 = *(void **)(*a2 + 24 * (v23 - 1));
    uint64_t v25 = (*(uint64_t (**)(void *))(*v24 + 16))(v24);
    std::string::size_type v46 = v26;
    uint64_t v12 = (const std::string::value_type *)v24[1];
    v27 = a3;
    int v48 = a4;
    while (v27 != v12)
    {
      int v29 = *--v27;
      int v28 = v29;
      if (v29 == 13 || v28 == 10)
      {
        uint64_t v12 = v27 + 1;
        break;
      }
    }
    v31 = (unsigned __int8 *)v24[2];
    v32 = a3;
    if (v31 != (unsigned __int8 *)a3)
    {
      v32 = a3;
      while (1)
      {
        int v33 = *v32;
        if (v33 == 10 || v33 == 13) {
          break;
        }
        if (++v32 == (char *)v31)
        {
          v32 = (char *)v24[2];
          break;
        }
      }
    }
    std::string::size_type v13 = v32 - v12;
    if (a6)
    {
      v39 = &a5[2 * a6];
      do
      {
        unint64_t v41 = *a5;
        unint64_t v40 = a5[1];
        if (*a5) {
          BOOL v42 = v41 > (unint64_t)v32;
        }
        else {
          BOOL v42 = 1;
        }
        if (!v42 && v40 >= (unint64_t)v12)
        {
          if (v41 >= (unint64_t)v12) {
            int v44 = *a5;
          }
          else {
            int v44 = (int)v12;
          }
          if (v40 <= (unint64_t)v32) {
            int v45 = a5[1];
          }
          else {
            int v45 = (int)v32;
          }
          if (v55 >= (unint64_t)HIDWORD(v55)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v54[v55] = (v44 - v12) | ((unint64_t)(v45 - v12) << 32);
          LODWORD(v55) = v55 + 1;
        }
        a5 += 2;
      }
      while (a5 != v39);
    }
    int v35 = v23;
    v17 = (std::string::value_type *)v25;
    unint64_t LineAndColumn = llvm::SourceMgr::getLineAndColumn(a2, a3, v35);
    int v14 = LineAndColumn;
    int v15 = HIDWORD(LineAndColumn) - 1;
    a4 = v48;
    std::string::size_type v16 = v46;
    this = v47;
  }
  else
  {
    uint64_t v12 = 0;
    std::string::size_type v13 = 0;
    int v14 = 0;
    int v15 = -1;
    std::string::size_type v16 = 9;
    v17 = "<unknown>";
  }
  llvm::Twine::str(this, __p);
  v37 = (void **)__p[0];
  if (v53 >= 0) {
    v37 = __p;
  }
  std::string::size_type v38 = v53 & 0x7F;
  if (v53 < 0) {
    std::string::size_type v38 = (std::string::size_type)__p[1];
  }
  llvm::SMDiagnostic::SMDiagnostic(a9, (uint64_t)a2, (uint64_t)a3, v17, v16, v14, v15, a4, (const std::string::value_type *)v37, v38, v12, v13, v54, v55, a7, a8);
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (v54 != v56) {
    free(v54);
  }
}

void llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, llvm::raw_ostream *a3, int a4, int a5)
{
  char v6 = a4;
  uint64_t v7 = a3;
  if (a4) {
    int v10 = 0;
  }
  else {
    int v10 = 2;
  }
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  if (a2 && *a2)
  {
    std::string::size_type v11 = __b.__r_.__value_.__r.__words[0];
    size_t v12 = strlen(a2);
    std::string::size_type v13 = *(void **)(__b.__r_.__value_.__r.__words[0] + 32);
    if (v12 <= *(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v13)
    {
      if (v12)
      {
        memcpy(v13, a2, v12);
        *(void *)(v11 + 32) += v12;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, a2, v12);
    }
    std::string::size_type v14 = __b.__r_.__value_.__r.__words[0];
    int v15 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
    if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v15 > 1uLL)
    {
      _WORD *v15 = 8250;
      *(void *)(v14 + 32) += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
    }
  }
  char v16 = *((unsigned char *)this + 39);
  if (v16 < 0)
  {
    if (!*((void *)this + 3)) {
      goto LABEL_44;
    }
  }
  else if (!*((unsigned char *)this + 39))
  {
    goto LABEL_44;
  }
  v17 = (const char **)((char *)this + 16);
  if (v16 >= 0) {
    size_t v18 = *((unsigned __int8 *)this + 39);
  }
  else {
    size_t v18 = *((void *)this + 3);
  }
  if (v18 != 1) {
    goto LABEL_24;
  }
  uint64_t v19 = *((unsigned __int8 *)this + 39);
  uint64_t v20 = (char *)this + 16;
  if ((*((unsigned char *)this + 39) & 0x80) != 0)
  {
    uint64_t v20 = *v17;
    uint64_t v19 = *((void *)this + 3);
  }
  int v21 = memcmp(v20, "-", v19 != 0);
  if (v19 != 1 || v21)
  {
LABEL_24:
    uint64_t v22 = (llvm::raw_ostream *)__b.__r_.__value_.__r.__words[0];
    if (v16 >= 0) {
      uint64_t v24 = (char *)this + 16;
    }
    else {
      uint64_t v24 = *v17;
    }
    size_t v25 = v18;
    goto LABEL_28;
  }
  uint64_t v22 = (llvm::raw_ostream *)__b.__r_.__value_.__r.__words[0];
  int v23 = *(_DWORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v23 <= 6uLL)
  {
    uint64_t v24 = "<stdin>";
    size_t v25 = 7;
LABEL_28:
    llvm::raw_ostream::write(v22, v24, v25);
    goto LABEL_29;
  }
  *(_DWORD *)((char *)v23 + 3) = 1047423332;
  *int v23 = 1685353276;
  *((void *)v22 + 4) += 7;
LABEL_29:
  if (*((_DWORD *)this + 10) != -1)
  {
    std::string::size_type v26 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
    if ((unint64_t)v26 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
    }
    else
    {
      *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v26 + 1;
      *std::string::size_type v26 = 58;
    }
    unint64_t v27 = *((int *)this + 10);
    if ((v27 & 0x80000000) != 0)
    {
      unint64_t v27 = -(uint64_t)v27;
      int v28 = 1;
    }
    else
    {
      int v28 = 0;
    }
    sub_1CD098D14((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v27, 0, 0, v28);
    if (*((_DWORD *)this + 11) != -1)
    {
      int v29 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
      if ((unint64_t)v29 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
      }
      else
      {
        *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v29 + 1;
        *int v29 = 58;
      }
      uint64_t v30 = *((int *)this + 11);
      unint64_t v31 = v30 + 1;
      if ((int)v30 < -1)
      {
        unint64_t v31 = -(uint64_t)v31;
        int v32 = 1;
      }
      else
      {
        int v32 = 0;
      }
      sub_1CD098D14((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v31, 0, 0, v32);
    }
  }
  std::string::size_type v33 = __b.__r_.__value_.__r.__words[0];
  v34 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v34 > 1uLL)
  {
    _WORD *v34 = 8250;
    *(void *)(v33 + 32) += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
  }
LABEL_44:
  llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
  if (a5)
  {
    switch(*((_DWORD *)this + 12))
    {
      case 0:
        llvm::WithColor::error(v7, "", 0, v6 ^ 1);
        break;
      case 1:
        llvm::WithColor::warning(v7, "", 0, v6 ^ 1);
        break;
      case 2:
        llvm::WithColor::remark(v7, "", 0, v6 ^ 1);
        break;
      case 3:
        llvm::WithColor::note(v7, "", 0, v6 ^ 1);
        break;
      default:
        break;
    }
  }
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  char v35 = *((unsigned char *)this + 79);
  if (v35 >= 0) {
    v36 = (char *)this + 56;
  }
  else {
    v36 = (const char *)*((void *)this + 7);
  }
  if (v35 >= 0) {
    size_t v37 = v35 & 0x7F;
  }
  else {
    size_t v37 = *((void *)this + 8);
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v36, v37);
  std::string::size_type v38 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v38 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 10);
  }
  else
  {
    *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v38 + 1;
    *std::string::size_type v38 = 10;
  }
  llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
  if (*((_DWORD *)this + 10) == -1 || *((_DWORD *)this + 11) == -1) {
    return;
  }
  char v39 = *((unsigned char *)this + 103);
  int v40 = v39;
  if (v39 >= 0) {
    unint64_t v41 = (char *)this + 80;
  }
  else {
    unint64_t v41 = (char *)*((void *)this + 10);
  }
  v122 = (void *)((char *)this + 80);
  unint64_t v42 = v39 & 0x7F;
  if (v40 >= 0) {
    unint64_t v43 = v42;
  }
  else {
    unint64_t v43 = *((void *)this + 11);
  }
  if (v43)
  {
    for (uint64_t i = 0; i != v43; ++i)
    {
      if (v41[i] < 0)
      {
        sub_1CD0AA310(v7, (uint64_t)v41, v43);
        return;
      }
    }
    std::string::size_type v45 = v43 + 1;
    if (v43 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    unint64_t v121 = v43;
    if (v45 < 0x17)
    {
      *((unsigned char *)&__b.__r_.__value_.__s + 23) = v43 + 1;
      p_b = &__b;
      if (v43 != -1) {
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    uint64_t v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17) {
      uint64_t v47 = v45 | 7;
    }
    uint64_t v48 = v47 + 1;
    p_b = (std::string *)operator new(v47 + 1);
    __b.__r_.__value_.__l.__size_ = v45;
    __b.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
  }
  else
  {
    unint64_t v121 = 0;
    std::string::size_type v45 = 1;
    *((unsigned char *)&__b.__r_.__value_.__s + 23) = 1;
    p_b = &__b;
  }
LABEL_81:
  memset(p_b, 32, v45);
LABEL_82:
  p_b->__r_.__value_.__s.__data_[v45] = 0;
  v49 = (unsigned int *)*((void *)this + 13);
  for (j = (unsigned int *)*((void *)this + 14); v49 != j; v49 += 2)
  {
    v51 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v51 = &__b;
    }
    unint64_t size = *((unsigned char *)&__b.__r_.__value_.__s + 23) & 0x7F;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t size = __b.__r_.__value_.__l.__size_;
    }
    if (size >= v49[1]) {
      unint64_t size = v49[1];
    }
    int64_t v53 = size - *v49;
    if (v53 >= 1) {
      memset((char *)v51 + *v49, 126, v53);
    }
  }
  memset(&v126, 0, sizeof(v126));
  uint64_t v54 = *((unsigned int *)this + 34);
  uint64_t v55 = *((int *)this + 11);
  if (*((char *)this + 103) < 0) {
    uint64_t v56 = *((void *)this + 11);
  }
  else {
    uint64_t v56 = *((unsigned __int8 *)this + 103);
  }
  if (v54)
  {
    int v118 = v10;
    v119 = this;
    v120 = v7;
    unint64_t v57 = *((void *)this + 1) - v55;
    unint64_t v124 = 0;
    unint64_t v125 = v57 + v56;
    uint64_t v58 = 40 * v54;
    uint64_t v59 = *((void *)this + 16) + 24;
    unint64_t v123 = v57;
    do
    {
      v60 = *(llvm::raw_ostream **)(v59 - 8);
      char v61 = *(unsigned char *)(v59 + 15);
      char v62 = v61;
      if (v61 >= 0) {
        v60 = (llvm::raw_ostream *)(v59 - 8);
      }
      size_t v63 = *(void *)v59;
      size_t v64 = v61 & 0x7F;
      if (v61 >= 0) {
        size_t v65 = v61 & 0x7F;
      }
      else {
        size_t v65 = *(void *)v59;
      }
      v128 = v60;
      size_t v129 = v65;
      if (llvm::StringRef::find_first_of(&v128, "\n\r\t", 3, 0) == -1)
      {
        unint64_t v66 = *(void *)(v59 - 24);
        unint64_t v67 = *(void *)(v59 - 16);
        if (v125 >= v66 && v57 <= v67)
        {
          if (v57 <= v66) {
            unint64_t v69 = (v66 - v57);
          }
          else {
            unint64_t v69 = 0;
          }
          if (v124 > v69) {
            uint64_t v70 = (v124 + 1);
          }
          else {
            uint64_t v70 = v69;
          }
          std::string::size_type v71 = (v70 + v65);
          std::string::size_type v72 = *((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x7F;
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v72 = v126.__r_.__value_.__l.__size_;
          }
          unint64_t v124 = (v70 + v65);
          if (v72 < v71)
          {
            std::string::resize(&v126, v71, 32);
            char v62 = *(unsigned char *)(v59 + 15);
            size_t v63 = *(void *)v59;
            size_t v64 = v62 & 0x7F;
          }
          if (v62 >= 0) {
            size_t v73 = v64;
          }
          else {
            size_t v73 = v63;
          }
          if (v73)
          {
            v74 = &v126;
            if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v74 = (std::string *)v126.__r_.__value_.__r.__words[0];
            }
            if (v62 >= 0) {
              v75 = (const void *)(v59 - 8);
            }
            else {
              v75 = *(const void **)(v59 - 8);
            }
            memmove((char *)v74 + v70, v75, v73);
          }
          if (v125 <= v67) {
            int v76 = v125;
          }
          else {
            int v76 = v67;
          }
          unint64_t v57 = v123;
          uint64_t v77 = (v76 - v123);
          v78 = &__b;
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v78 = (std::string *)__b.__r_.__value_.__r.__words[0];
          }
          if ((uint64_t)(v77 - v69) >= 1) {
            memset((char *)v78 + v69, 126, v77 - v69);
          }
        }
      }
      v59 += 40;
      v58 -= 40;
    }
    while (v58);
    this = v119;
    uint64_t v7 = v120;
    LODWORD(v55) = *((_DWORD *)v119 + 11);
    int v10 = v118;
  }
  if (v121 >= v55)
  {
    v81 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v81 = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    v80 = (char *)v81 + (int)v55;
  }
  else
  {
    v79 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v79 = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    v80 = (char *)v79 + v121;
  }
  unsigned char *v80 = 94;
  v82 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v82 = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v83 = *((unsigned char *)&__b.__r_.__value_.__s + 23) & 0x7F;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v83 = __b.__r_.__value_.__l.__size_;
  }
  v84 = (char *)&v82[-1].__r_.__value_.__r.__words[2] + 7;
  while (v83)
  {
    int v85 = v84[v83--];
    if (v85 != 32)
    {
      std::string::size_type v86 = v83 + 1;
      goto LABEL_152;
    }
  }
  std::string::size_type v86 = 0;
LABEL_152:
  std::string::erase(&__b, v86, 0xFFFFFFFFFFFFFFFFLL);
  char v87 = *((unsigned char *)this + 103);
  BOOL v88 = v87 < 0;
  if (v87 >= 0) {
    uint64_t v89 = (uint64_t)v122;
  }
  else {
    uint64_t v89 = *((void *)this + 10);
  }
  unint64_t v90 = v87 & 0x7F;
  if (v88) {
    unint64_t v91 = *((void *)this + 11);
  }
  else {
    unint64_t v91 = v90;
  }
  sub_1CD0AA310(v7, v89, v91);
  v128 = v7;
  LODWORD(v129) = v10;
  llvm::WithColor::changeColor(&v128, 2, 1, 0);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v92 = *((unsigned char *)&__b.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    unsigned int v92 = __b.__r_.__value_.__r.__words[1];
  }
  uint64_t v93 = v92;
  if (v92)
  {
    unint64_t v94 = 0;
    int v95 = 0;
    do
    {
      if (*((char *)this + 103) < 0) {
        unint64_t v96 = *((void *)this + 11);
      }
      else {
        unint64_t v96 = *((unsigned __int8 *)this + 103);
      }
      if (v96 <= v94) {
        goto LABEL_178;
      }
      v97 = v122;
      if ((*((unsigned char *)this + 103) & 0x80) != 0) {
        v97 = (void *)*v122;
      }
      if (*((unsigned char *)v97 + v94) == 9)
      {
        do
        {
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v98 = &__b;
          }
          else {
            v98 = (std::string *)__b.__r_.__value_.__r.__words[0];
          }
          char v99 = v98->__r_.__value_.__s.__data_[v94];
          v100 = (char *)*((void *)v128 + 4);
          if ((unint64_t)v100 >= *((void *)v128 + 3))
          {
            llvm::raw_ostream::write(v128, v99);
          }
          else
          {
            *((void *)v128 + 4) = v100 + 1;
            char *v100 = v99;
          }
          ++v95;
        }
        while ((v95 & 7) != 0);
      }
      else
      {
LABEL_178:
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v101 = &__b;
        }
        else {
          v101 = (std::string *)__b.__r_.__value_.__r.__words[0];
        }
        char v102 = v101->__r_.__value_.__s.__data_[v94];
        v103 = (char *)*((void *)v128 + 4);
        if ((unint64_t)v103 >= *((void *)v128 + 3))
        {
          llvm::raw_ostream::write(v128, v102);
        }
        else
        {
          *((void *)v128 + 4) = v103 + 1;
          char *v103 = v102;
        }
        ++v95;
      }
      ++v94;
    }
    while (v94 != v93);
  }
  v104 = (unsigned char *)*((void *)v128 + 4);
  if ((unint64_t)v104 >= *((void *)v128 + 3))
  {
    llvm::raw_ostream::write(v128, 10);
  }
  else
  {
    *((void *)v128 + 4) = v104 + 1;
    unsigned char *v104 = 10;
  }
  llvm::WithColor::~WithColor((llvm::WithColor *)&v128);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v105 = *((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v105 = v126.__r_.__value_.__l.__size_;
  }
  if (v105)
  {
    uint64_t v106 = 0;
    for (std::string::size_type k = 0; k < v105; ++k)
    {
      if (*((char *)this + 103) < 0) {
        std::string::size_type v108 = *((void *)this + 11);
      }
      else {
        std::string::size_type v108 = *((unsigned __int8 *)this + 103);
      }
      if (k >= v108) {
        goto LABEL_215;
      }
      v109 = v122;
      if ((*((unsigned char *)this + 103) & 0x80) != 0) {
        v109 = (void *)*v122;
      }
      if (*((unsigned char *)v109 + k) == 9)
      {
        do
        {
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v110 = &v126;
          }
          else {
            v110 = (std::string *)v126.__r_.__value_.__r.__words[0];
          }
          char v111 = v110->__r_.__value_.__s.__data_[k];
          v112 = (char *)*((void *)v7 + 4);
          if ((unint64_t)v112 >= *((void *)v7 + 3))
          {
            llvm::raw_ostream::write(v7, v111);
          }
          else
          {
            *((void *)v7 + 4) = v112 + 1;
            char *v112 = v111;
          }
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v113 = &v126;
          }
          else {
            v113 = (std::string *)v126.__r_.__value_.__r.__words[0];
          }
          if (v113->__r_.__value_.__s.__data_[k] != 32) {
            ++k;
          }
          ++v106;
        }
        while ((v106 & 7) != 0 && k != v105);
      }
      else
      {
LABEL_215:
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v114 = &v126;
        }
        else {
          v114 = (std::string *)v126.__r_.__value_.__r.__words[0];
        }
        char v115 = v114->__r_.__value_.__s.__data_[k];
        v116 = (char *)*((void *)v7 + 4);
        if ((unint64_t)v116 >= *((void *)v7 + 3))
        {
          llvm::raw_ostream::write(v7, v115);
        }
        else
        {
          *((void *)v7 + 4) = v116 + 1;
          char *v116 = v115;
        }
        ++v106;
      }
    }
    v117 = (unsigned char *)*((void *)v7 + 4);
    if ((unint64_t)v117 >= *((void *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((void *)v7 + 4) = v117 + 1;
      unsigned char *v117 = 10;
    }
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
}

void llvm::SourceMgr::PrintMessage(uint64_t *a1, llvm::raw_ostream *a2, char *a3, int a4, llvm::Twine *this, unint64_t *a6, uint64_t a7, int a8, long long *a9, uint64_t a10, unsigned __int8 a11)
{
  v22[22] = *(void **)MEMORY[0x1E4F143B8];
  llvm::SourceMgr::GetMessage(this, a1, a3, a4, a6, a7, a9, a10, (uint64_t)v13);
  llvm::SourceMgr::PrintMessage((llvm::SourceMgr *)a1, a2, (const llvm::SMDiagnostic *)v13, a11);
  sub_1CC1925A4(v22);
  if (__p)
  {
    int v21 = __p;
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
}

void *llvm::SMFixIt::SMFixIt(void *a1, uint64_t a2, uint64_t a3, llvm::Twine *this)
{
  *a1 = a2;
  a1[1] = a3;
  llvm::Twine::str(this, a1 + 2);
  return a1;
}

{
  *a1 = a2;
  a1[1] = a3;
  llvm::Twine::str(this, a1 + 2);
  return a1;
}

llvm::raw_ostream *sub_1CD0AA310(llvm::raw_ostream *this, uint64_t a2, unint64_t a3)
{
  v4 = this;
  if (a3)
  {
    unsigned int v6 = 0;
    int v7 = 0;
    while (1)
    {
      unint64_t v8 = v6;
      if (a3 <= v6) {
        break;
      }
      uint64_t v9 = (char *)memchr((void *)(a2 + v6), 9, a3 - v6);
      int v10 = &v9[-a2];
      if (!v9 || v10 + 1 == 0) {
        break;
      }
      if (a3 >= v8) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = a3;
      }
      if (v12 <= (unint64_t)v10) {
        std::string::size_type v13 = &v9[-a2];
      }
      else {
        std::string::size_type v13 = (char *)v12;
      }
      if (a3 < (unint64_t)v13) {
        std::string::size_type v13 = (char *)a3;
      }
      std::string::size_type v14 = (const void *)(a2 + v12);
      char v15 = &v13[-v12];
      this = (llvm::raw_ostream *)*((void *)v4 + 4);
      if ((unint64_t)&v13[-v12] <= *((void *)v4 + 3) - (void)this)
      {
        if (v13 != (char *)v12)
        {
          this = (llvm::raw_ostream *)memcpy(this, v14, (size_t)&v13[-v12]);
          *((void *)v4 + 4) += v15;
        }
      }
      else
      {
        this = llvm::raw_ostream::write(v4, (const char *)v14, (size_t)&v13[-v12]);
      }
      int v7 = v7 - v8 + v10;
      do
      {
        char v16 = (unsigned char *)*((void *)v4 + 4);
        if ((unint64_t)v16 >= *((void *)v4 + 3))
        {
          this = llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((void *)v4 + 4) = v16 + 1;
          *char v16 = 32;
        }
        ++v7;
      }
      while ((v7 & 7) != 0);
      unsigned int v6 = v10 + 1;
      if (v10 + 1 == a3) {
        goto LABEL_34;
      }
    }
    if (a3 >= v8) {
      unint64_t v17 = v8;
    }
    else {
      unint64_t v17 = a3;
    }
    size_t v18 = (const void *)(a2 + v17);
    size_t v19 = a3 - v17;
    this = (llvm::raw_ostream *)*((void *)v4 + 4);
    if (a3 - v17 <= *((void *)v4 + 3) - (void)this)
    {
      if (a3 > v8)
      {
        this = (llvm::raw_ostream *)memcpy(this, v18, v19);
        *((void *)v4 + 4) += v19;
      }
    }
    else
    {
      this = llvm::raw_ostream::write(v4, (const char *)v18, v19);
    }
  }
LABEL_34:
  uint64_t v20 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v20 >= *((void *)v4 + 3))
  {
    return llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((void *)v4 + 4) = v20 + 1;
    *uint64_t v20 = 10;
  }
  return this;
}

void sub_1CD0AA4CC(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(v4 - 24));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CD0AA550(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_1CD0AA6B4(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_1CD0AA810(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_1CD0AA974(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

void *sub_1CD0AAAD8(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      abort();
    }
    int v7 = result;
    uint64_t result = operator new(8 * a4);
    unint64_t v8 = result;
    *int v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    if (a2 != a3)
    {
      size_t v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFF8;
      uint64_t result = memcpy(result, a2, v9);
      unint64_t v8 = (void *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_1CD0AAB7C(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    uint64_t v19 = v2;
    uint64_t v20 = v3;
    unsigned int v6 = (void *)a1 + 5;
    if ((_OWORD *)((char *)a1 + 40) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a1;
      do
      {
        size_t v9 = v6;
        if (sub_1CD845FD0(v6, v8))
        {
          long long v16 = *v9;
          long long v17 = *(_OWORD *)((char *)v8 + 56);
          uint64_t v18 = *((void *)v8 + 9);
          *((void *)v8 + 7) = 0;
          *((void *)v8 + 8) = 0;
          *((void *)v8 + 9) = 0;
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = v10;
            unint64_t v12 = (char *)a1 + v10;
            *(_OWORD *)(v12 + 40) = *(_OWORD *)v12;
            std::string::size_type v13 = (void **)(v12 + 56);
            if (v12[79] < 0) {
              operator delete(*v13);
            }
            *(_OWORD *)std::string::size_type v13 = *((_OWORD *)v12 + 1);
            *((void *)v12 + 9) = *((void *)v12 + 4);
            v12[39] = 0;
            v12[16] = 0;
            if (!v11)
            {
              *a1 = v16;
              goto LABEL_13;
            }
            uint64_t v10 = v11 - 40;
          }
          while (sub_1CD845FD0(&v16, (_OWORD *)((char *)a1 + v11 - 40)));
          int v14 = *((char *)a1 + v10 + 79);
          *(_OWORD *)((char *)a1 + v11) = v16;
          if (v14 < 0) {
            operator delete(*(void **)((char *)a1 + v10 + 56));
          }
LABEL_13:
          char v15 = (char *)a1 + v11;
          *((_OWORD *)v15 + 1) = v17;
          *((void *)v15 + 4) = v18;
        }
        unsigned int v6 = (void *)v9 + 5;
        v7 += 40;
        unint64_t v8 = v9;
      }
      while ((_OWORD *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_1CD0AACC4(uint64_t a1, _OWORD *a2)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v17 = v2;
    uint64_t v18 = v3;
    v5 = (_OWORD *)a1;
    unsigned int v6 = (void *)(a1 + 40);
    if ((_OWORD *)(a1 + 40) != a2)
    {
      uint64_t v7 = a1 - 40;
      do
      {
        unint64_t v8 = v6;
        if (sub_1CD845FD0(v6, v5))
        {
          long long v14 = *v8;
          long long v15 = *(_OWORD *)((char *)v5 + 56);
          uint64_t v16 = *((void *)v5 + 9);
          *((void *)v5 + 7) = 0;
          *((void *)v5 + 8) = 0;
          *((void *)v5 + 9) = 0;
          uint64_t v9 = v7;
          do
          {
            *(_OWORD *)(v9 + 80) = *(_OWORD *)(v9 + 40);
            uint64_t v10 = (void **)(v9 + 96);
            if (*(char *)(v9 + 119) < 0) {
              operator delete(*v10);
            }
            *(_OWORD *)uint64_t v10 = *(_OWORD *)(v9 + 56);
            *(void *)(v9 + 112) = *(void *)(v9 + 72);
            *(unsigned char *)(v9 + 79) = 0;
            *(unsigned char *)(v9 + 56) = 0;
            BOOL v11 = sub_1CD845FD0(&v14, (void *)v9);
            v9 -= 40;
          }
          while (v11);
          *(_OWORD *)(v9 + 80) = v14;
          int v12 = *(char *)(v9 + 119);
          uint64_t v13 = v9 + 96;
          if (v12 < 0) {
            operator delete(*(void **)v13);
          }
          *(_OWORD *)uint64_t v13 = v15;
          *(void *)(v13 + 16) = v16;
        }
        unsigned int v6 = (void *)v8 + 5;
        v7 += 40;
        v5 = v8;
      }
      while ((_OWORD *)((char *)v8 + 40) != a2);
    }
  }
}

BOOL sub_1CD0AADE4(long long *a1, long long *a2, long long *a3)
{
  BOOL v6 = sub_1CD845FD0(a2, a1);
  BOOL result = sub_1CD845FD0(a3, a2);
  if (v6)
  {
    unint64_t v8 = a1 + 1;
    uint64_t v9 = (void *)a1 + 3;
    if (result)
    {
      long long v25 = *a1;
      uint64_t v10 = *((void *)a1 + 2);
      *(void *)&long long v30 = *v9;
      *(void *)((char *)&v30 + 7) = *(void *)((char *)a1 + 31);
      char v11 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *unint64_t v8 = 0;
      *a1 = *a3;
      uint64_t v12 = *((void *)a3 + 4);
      *(_OWORD *)unint64_t v8 = a3[1];
      *((void *)a1 + 4) = v12;
      *a3 = v25;
      *((void *)a3 + 2) = v10;
      *((void *)a3 + 3) = v30;
      *(void *)((char *)a3 + 31) = *(void *)((char *)&v30 + 7);
      *((unsigned char *)a3 + 39) = v11;
    }
    else
    {
      long long v26 = *a1;
      uint64_t v13 = *((void *)a1 + 2);
      *(void *)&long long v31 = *v9;
      *(void *)((char *)&v31 + 7) = *(void *)((char *)a1 + 31);
      char v14 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *unint64_t v8 = 0;
      *a1 = *a2;
      uint64_t v15 = *((void *)a2 + 4);
      *(_OWORD *)unint64_t v8 = a2[1];
      *((void *)a1 + 4) = v15;
      *a2 = v26;
      *((void *)a2 + 2) = v13;
      *((void *)a2 + 3) = v31;
      *(void *)((char *)a2 + 31) = *(void *)((char *)&v31 + 7);
      *((unsigned char *)a2 + 39) = v14;
      BOOL result = sub_1CD845FD0(a3, a2);
      if (result)
      {
        long long v27 = *a2;
        uint64_t v16 = *((void *)a2 + 2);
        *(void *)&long long v32 = *((void *)a2 + 3);
        *(void *)((char *)&v32 + 7) = *(void *)((char *)a2 + 31);
        char v17 = *((unsigned char *)a2 + 39);
        *((void *)a2 + 3) = 0;
        *((void *)a2 + 4) = 0;
        *((void *)a2 + 2) = 0;
        *a2 = *a3;
        uint64_t v18 = *((void *)a3 + 4);
        a2[1] = a3[1];
        *((void *)a2 + 4) = v18;
        *a3 = v27;
        *((void *)a3 + 2) = v16;
        *((void *)a3 + 3) = v32;
        *(void *)((char *)a3 + 31) = *(void *)((char *)&v32 + 7);
        *((unsigned char *)a3 + 39) = v17;
      }
    }
  }
  else if (result)
  {
    long long v28 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    *(void *)&long long v33 = *((void *)a2 + 3);
    *(void *)((char *)&v33 + 7) = *(void *)((char *)a2 + 31);
    char v20 = *((unsigned char *)a2 + 39);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 3) = 0;
    *a2 = *a3;
    uint64_t v21 = *((void *)a3 + 4);
    a2[1] = a3[1];
    *((void *)a2 + 4) = v21;
    *a3 = v28;
    *((void *)a3 + 2) = v19;
    *((void *)a3 + 3) = v33;
    *(void *)((char *)a3 + 31) = *(void *)((char *)&v33 + 7);
    *((unsigned char *)a3 + 39) = v20;
    BOOL result = sub_1CD845FD0(a2, a1);
    if (result)
    {
      long long v29 = *a1;
      uint64_t v22 = *((void *)a1 + 2);
      *(void *)&long long v34 = *((void *)a1 + 3);
      *(void *)((char *)&v34 + 7) = *(void *)((char *)a1 + 31);
      char v23 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 2) = 0;
      *a1 = *a2;
      uint64_t v24 = *((void *)a2 + 4);
      a1[1] = a2[1];
      *((void *)a1 + 4) = v24;
      *a2 = v29;
      *((void *)a2 + 2) = v22;
      *((void *)a2 + 3) = v34;
      *(void *)((char *)a2 + 31) = *(void *)((char *)&v34 + 7);
      *((unsigned char *)a2 + 39) = v23;
    }
  }
  return result;
}

void *sub_1CD0AB090(long long *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  v23[2] = *MEMORY[0x1E4F143B8];
  long long v4 = a1[1];
  long long v19 = *a1;
  long long v20 = v4;
  uint64_t v21 = (void *)*((void *)a1 + 4);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  if (sub_1CD845FD0(&v19, (void *)(a2 - 40)))
  {
    v5 = a1;
    do
      v5 += 5;
    while (!sub_1CD845FD0(&v19, v5));
  }
  else
  {
    char v14 = (void *)a1 + 5;
    do
    {
      v5 = v14;
      if ((unint64_t)v14 >= v2) {
        break;
      }
      BOOL v15 = sub_1CD845FD0(&v19, v14);
      char v14 = v5 + 5;
    }
    while (!v15);
  }
  if ((unint64_t)v5 < v2)
  {
    do
      v2 -= 40;
    while (sub_1CD845FD0(&v19, (void *)v2));
  }
  while ((unint64_t)v5 < v2)
  {
    long long v22 = *(_OWORD *)v5;
    uint64_t v6 = v5[2];
    v23[0] = v5[3];
    *(void *)((char *)v23 + 7) = *(void *)((char *)v5 + 31);
    char v7 = *((unsigned char *)v5 + 39);
    v5[3] = 0;
    v5[4] = 0;
    v5[2] = 0;
    *(_OWORD *)v5 = *(_OWORD *)v2;
    long long v8 = *(_OWORD *)(v2 + 16);
    v5[4] = *(void *)(v2 + 32);
    *((_OWORD *)v5 + 1) = v8;
    *(_OWORD *)unint64_t v2 = v22;
    uint64_t v9 = v23[0];
    *(void *)(v2 + 16) = v6;
    *(void *)(v2 + 24) = v9;
    *(void *)(v2 + 31) = *(void *)((char *)v23 + 7);
    *(unsigned char *)(v2 + 39) = v7;
    do
      v5 += 5;
    while (!sub_1CD845FD0(&v19, v5));
    do
      v2 -= 40;
    while (sub_1CD845FD0(&v19, (void *)v2));
  }
  uint64_t v10 = (long long *)(v5 - 5);
  if (v5 - 5 == (void *)a1)
  {
    int v16 = *((char *)v5 - 1);
    *a1 = v19;
    uint64_t v12 = (void **)(v5 - 3);
    if (v16 < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    char v11 = a1 + 1;
    *a1 = *v10;
    if (*((char *)a1 + 39) < 0) {
      operator delete(*(void **)v11);
    }
    uint64_t v12 = (void **)(v5 - 3);
    long long v13 = *(_OWORD *)(v5 - 3);
    *((void *)v11 + 2) = *(v5 - 1);
    *char v11 = v13;
    *((unsigned char *)v5 - 1) = 0;
    *((unsigned char *)v5 - 24) = 0;
    *uint64_t v10 = v19;
  }
  long long v17 = v20;
  v12[2] = v21;
  *(_OWORD *)uint64_t v12 = v17;
  return v5;
}

unint64_t sub_1CD0AB290(long long *a1, void *a2)
{
  uint64_t v4 = 0;
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = *((void *)a1 + 4);
  v5 = a1 + 1;
  long long v6 = a1[1];
  long long v20 = *a1;
  long long v21 = v6;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  do
    v4 += 40;
  while (sub_1CD845FD0((long long *)((char *)a1 + v4), &v20));
  unint64_t v7 = (unint64_t)a1 + v4;
  if (v4 == 40)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 5;
    }
    while (!sub_1CD845FD0(a2, &v20));
  }
  else
  {
    do
      a2 -= 5;
    while (!sub_1CD845FD0(a2, &v20));
  }
  unint64_t v8 = (unint64_t)a1 + v4;
  if (v7 < (unint64_t)a2)
  {
    uint64_t v9 = a2;
    do
    {
      long long v23 = *(_OWORD *)v8;
      uint64_t v10 = *(void *)(v8 + 16);
      v24[0] = *(void *)(v8 + 24);
      *(void *)((char *)v24 + 7) = *(void *)(v8 + 31);
      char v11 = *(unsigned char *)(v8 + 39);
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      long long v12 = *((_OWORD *)v9 + 1);
      *(void *)(v8 + 32) = v9[4];
      *(_OWORD *)(v8 + 16) = v12;
      *(_OWORD *)uint64_t v9 = v23;
      uint64_t v13 = v24[0];
      v9[2] = v10;
      v9[3] = v13;
      *(void *)((char *)v9 + 31) = *(void *)((char *)v24 + 7);
      *((unsigned char *)v9 + 39) = v11;
      do
        v8 += 40;
      while (sub_1CD845FD0((void *)v8, &v20));
      do
        v9 -= 5;
      while (!sub_1CD845FD0(v9, &v20));
    }
    while (v8 < (unint64_t)v9);
  }
  char v14 = (long long *)(v8 - 40);
  if ((long long *)(v8 - 40) == a1)
  {
    int v17 = *(char *)(v8 - 1);
    *a1 = v20;
    unint64_t v15 = v8 - 24;
    if (v17 < 0) {
      operator delete(*(void **)v15);
    }
  }
  else
  {
    *a1 = *v14;
    if (*((char *)a1 + 39) < 0) {
      operator delete(*(void **)v5);
    }
    unint64_t v15 = v8 - 24;
    long long v16 = *(_OWORD *)(v8 - 24);
    *((void *)v5 + 2) = *(void *)(v8 - 8);
    long long *v5 = v16;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
    *char v14 = v20;
  }
  long long v18 = v21;
  *(void *)(v15 + 16) = v22;
  *(_OWORD *)unint64_t v15 = v18;
  return v8 - 40;
}

BOOL sub_1CD0AB498(uint64_t a1, uint64_t a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v19 = (_OWORD *)(a2 - 40);
      if (!sub_1CD845FD0((void *)(a2 - 40), (void *)a1)) {
        return 1;
      }
      long long v24 = *(_OWORD *)a1;
      uint64_t v20 = *(void *)(a1 + 16);
      v27[0] = *(void *)(a1 + 24);
      *(void *)((char *)v27 + 7) = *(void *)(a1 + 31);
      char v21 = *(unsigned char *)(a1 + 39);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *v19;
      uint64_t v22 = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 24);
      *(void *)(a1 + 32) = v22;
      *long long v19 = v24;
      uint64_t v23 = v27[0];
      *(void *)(a2 - 24) = v20;
      *(void *)(a2 - 16) = v23;
      *(void *)(a2 - 9) = *(void *)((char *)v27 + 7);
      BOOL result = 1;
      *(unsigned char *)(a2 - 1) = v21;
      return result;
    case 3uLL:
      sub_1CD0AADE4((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1CD0AB758(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1CD0AB938(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      long long v6 = (void *)(a1 + 80);
      sub_1CD0AADE4((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v7 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CD845FD0((void *)v7, v6))
    {
      long long v10 = *(_OWORD *)(v7 + 16);
      long long v24 = *(_OWORD *)v7;
      long long v25 = v10;
      uint64_t v26 = *(void *)(v7 + 32);
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      uint64_t v11 = v8;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = a1 + v11;
        *(_OWORD *)(a1 + v11 + 120) = *(_OWORD *)(a1 + v11 + 80);
        uint64_t v14 = a1 + v11 + 136;
        if (*(char *)(a1 + v11 + 159) < 0) {
          operator delete(*(void **)v14);
        }
        *(_OWORD *)uint64_t v14 = *(_OWORD *)(v13 + 96);
        *(void *)(v14 + 16) = *(void *)(v13 + 112);
        *(unsigned char *)(v13 + 119) = 0;
        *(unsigned char *)(v13 + 96) = 0;
        if (v12 == -80)
        {
          *(_OWORD *)a1 = v24;
          goto LABEL_14;
        }
        BOOL v15 = sub_1CD845FD0(&v24, (void *)(a1 + v12 + 40));
        uint64_t v11 = v12 - 40;
      }
      while (v15);
      uint64_t v16 = a1 + v11;
      int v17 = *(char *)(v16 + 159);
      *(_OWORD *)(v16 + 120) = v24;
      if (v17 < 0) {
        operator delete(*(void **)(v16 + 136));
      }
LABEL_14:
      uint64_t v18 = a1 + v12;
      *(_OWORD *)(v18 + 96) = v25;
      *(void *)(v18 + 112) = v26;
      if (++v9 == 8) {
        return v7 + 40 == a2;
      }
    }
    long long v6 = (void *)v7;
    v8 += 40;
    BOOL result = 1;
    v7 += 40;
    if (v7 == a2) {
      return result;
    }
  }
}

BOOL sub_1CD0AB758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CD0AADE4((long long *)a1, (long long *)a2, (long long *)a3);
  BOOL result = sub_1CD845FD0((void *)a4, (void *)a3);
  if (result)
  {
    long long v18 = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
    *(void *)&long long v21 = *(void *)(a3 + 24);
    *(void *)((char *)&v21 + 7) = *(void *)(a3 + 31);
    char v10 = *(unsigned char *)(a3 + 39);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 24) = 0;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(void *)(a3 + 32) = v11;
    *(_OWORD *)a4 = v18;
    *(void *)(a4 + 16) = v9;
    *(void *)(a4 + 24) = v21;
    *(void *)(a4 + 31) = *(void *)((char *)&v21 + 7);
    *(unsigned char *)(a4 + 39) = v10;
    BOOL result = sub_1CD845FD0((void *)a3, (void *)a2);
    if (result)
    {
      long long v19 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 16);
      *(void *)&long long v22 = *(void *)(a2 + 24);
      *(void *)((char *)&v22 + 7) = *(void *)(a2 + 31);
      char v13 = *(unsigned char *)(a2 + 39);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 24) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
      *(void *)(a2 + 32) = v14;
      *(_OWORD *)a3 = v19;
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 31) = *(void *)((char *)&v22 + 7);
      *(unsigned char *)(a3 + 39) = v13;
      BOOL result = sub_1CD845FD0((void *)a2, (void *)a1);
      if (result)
      {
        long long v20 = *(_OWORD *)a1;
        uint64_t v15 = *(void *)(a1 + 16);
        *(void *)&long long v23 = *(void *)(a1 + 24);
        *(void *)((char *)&v23 + 7) = *(void *)(a1 + 31);
        char v16 = *(unsigned char *)(a1 + 39);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 16) = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v17 = *(void *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = v17;
        *(_OWORD *)a2 = v20;
        *(void *)(a2 + 16) = v15;
        *(void *)(a2 + 24) = v23;
        *(void *)(a2 + 31) = *(void *)((char *)&v23 + 7);
        *(unsigned char *)(a2 + 39) = v16;
      }
    }
  }
  return result;
}

BOOL sub_1CD0AB938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CD0AB758(a1, a2, a3, a4);
  BOOL result = sub_1CD845FD0((void *)a5, (void *)a4);
  if (result)
  {
    long long v23 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
    *(void *)&long long v27 = *(void *)(a4 + 24);
    *(void *)((char *)&v27 + 7) = *(void *)(a4 + 31);
    char v12 = *(unsigned char *)(a4 + 39);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 24) = 0;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    uint64_t v13 = *(void *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(void *)(a4 + 32) = v13;
    *(_OWORD *)a5 = v23;
    *(void *)(a5 + 16) = v11;
    *(void *)(a5 + 24) = v27;
    *(void *)(a5 + 31) = *(void *)((char *)&v27 + 7);
    *(unsigned char *)(a5 + 39) = v12;
    BOOL result = sub_1CD845FD0((void *)a4, (void *)a3);
    if (result)
    {
      long long v24 = *(_OWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 16);
      *(void *)&long long v28 = *(void *)(a3 + 24);
      *(void *)((char *)&v28 + 7) = *(void *)(a3 + 31);
      char v15 = *(unsigned char *)(a3 + 39);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 24) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(void *)(a3 + 32) = v16;
      *(_OWORD *)a4 = v24;
      *(void *)(a4 + 16) = v14;
      *(void *)(a4 + 24) = v28;
      *(void *)(a4 + 31) = *(void *)((char *)&v28 + 7);
      *(unsigned char *)(a4 + 39) = v15;
      BOOL result = sub_1CD845FD0((void *)a3, (void *)a2);
      if (result)
      {
        long long v25 = *(_OWORD *)a2;
        uint64_t v17 = *(void *)(a2 + 16);
        *(void *)&long long v29 = *(void *)(a2 + 24);
        *(void *)((char *)&v29 + 7) = *(void *)(a2 + 31);
        char v18 = *(unsigned char *)(a2 + 39);
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 24) = 0;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        uint64_t v19 = *(void *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(void *)(a2 + 32) = v19;
        *(_OWORD *)a3 = v25;
        *(void *)(a3 + 16) = v17;
        *(void *)(a3 + 24) = v29;
        *(void *)(a3 + 31) = *(void *)((char *)&v29 + 7);
        *(unsigned char *)(a3 + 39) = v18;
        BOOL result = sub_1CD845FD0((void *)a2, (void *)a1);
        if (result)
        {
          long long v26 = *(_OWORD *)a1;
          uint64_t v20 = *(void *)(a1 + 16);
          *(void *)&long long v30 = *(void *)(a1 + 24);
          *(void *)((char *)&v30 + 7) = *(void *)(a1 + 31);
          char v21 = *(unsigned char *)(a1 + 39);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 16) = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v22 = *(void *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(void *)(a1 + 32) = v22;
          *(_OWORD *)a2 = v26;
          *(void *)(a2 + 16) = v20;
          *(void *)(a2 + 24) = v30;
          *(void *)(a2 + 31) = *(void *)((char *)&v30 + 7);
          *(unsigned char *)(a2 + 39) = v21;
        }
      }
    }
  }
  return result;
}

void sub_1CD0ABB98(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if ((__n128 *)a1 != a2)
  {
    uint64_t v4 = a2;
    uint64_t v6 = (uint64_t)a2 - a1;
    uint64_t v7 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      char v10 = (__n128 *)(a1 + 40 * v8);
      do
      {
        sub_1CD0ABF98(a1, v7, v10);
        char v10 = (__n128 *)((char *)v10 - 40);
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      uint64_t v11 = v4;
      do
      {
        if (sub_1CD845FD0(v11, (void *)a1))
        {
          __n128 v39 = *v11;
          uint64_t v12 = v11[1].n128_i64[0];
          v43.n128_u64[0] = v11[1].n128_u64[1];
          *(unint64_t *)((char *)v43.n128_u64 + 7) = *(unint64_t *)((char *)&v11[1].n128_u64[1] + 7);
          __int8 v13 = v11[2].n128_i8[7];
          v11[1].n128_u64[1] = 0;
          v11[2].n128_u64[0] = 0;
          v11[1].n128_u64[0] = 0;
          *uint64_t v11 = *(__n128 *)a1;
          unint64_t v14 = *(void *)(a1 + 32);
          v11[1] = *(__n128 *)(a1 + 16);
          v11[2].n128_u64[0] = v14;
          *(__n128 *)a1 = v39;
          *(void *)(a1 + 16) = v12;
          *(void *)(a1 + 24) = v43.n128_u64[0];
          *(void *)(a1 + 31) = *(unint64_t *)((char *)v43.n128_u64 + 7);
          *(unsigned char *)(a1 + 39) = v13;
          sub_1CD0ABF98(a1, v7, (__n128 *)a1);
        }
        uint64_t v11 = (__n128 *)((char *)v11 + 40);
      }
      while (v11 != a3);
    }
    if (v6 >= 41)
    {
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = v4;
        __n128 v43 = *(__n128 *)a1;
        unint64_t v37 = *(void *)(a1 + 16);
        v42[0] = *(void *)(a1 + 24);
        *(void *)((char *)v42 + 7) = *(void *)(a1 + 31);
        unsigned __int8 v38 = *(unsigned char *)(a1 + 39);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        uint64_t v17 = v7 - 2;
        if (v7 < 2) {
          uint64_t v17 = v7 - 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = a1;
        *(void *)(a1 + 16) = 0;
        do
        {
          uint64_t v20 = v19 + 40 * v15 + 40;
          if (2 * v15 + 2 < v7)
          {
            if (sub_1CD845FD0((void *)(v19 + 40 * v15 + 40), (void *)(v19 + 40 * v15 + 80)))
            {
              uint64_t v20 = v19 + 40 * v15 + 80;
              uint64_t v15 = 2 * v15 + 2;
            }
            else
            {
              uint64_t v15 = (2 * v15) | 1;
            }
            int v23 = *(char *)(v19 + 39);
            *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
            uint64_t v21 = v19 + 16;
            if (v23 < 0) {
              operator delete(*(void **)v21);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
            uint64_t v21 = v19 + 16;
            uint64_t v15 = (2 * v15) | 1;
          }
          uint64_t v19 = v20;
          long long v22 = *(_OWORD *)(v20 + 16);
          *(void *)(v21 + 16) = *(void *)(v20 + 32);
          *(_OWORD *)uint64_t v21 = v22;
          *(unsigned char *)(v20 + 39) = 0;
          *(unsigned char *)(v20 + 16) = 0;
        }
        while (v15 <= v18);
        uint64_t v4 = (__n128 *)((char *)v16 - 40);
        if ((__int8 *)v19 == &v16[-3].n128_i8[8])
        {
          *(__n128 *)uint64_t v19 = v43;
          *(void *)(v19 + 16) = v37;
          *(void *)(v19 + 24) = v42[0];
          *(void *)(v19 + 31) = *(void *)((char *)v42 + 7);
          *(unsigned char *)(v19 + 39) = v38;
        }
        else
        {
          long long v24 = (long long *)(v19 + 16);
          *(__n128 *)uint64_t v19 = *v4;
          unint64_t v25 = v16[-1].n128_u64[1];
          *(__n128 *)(v19 + 16) = *(__n128 *)((char *)v16 - 24);
          *(void *)(v19 + 32) = v25;
          __n128 *v4 = v43;
          unint64_t v26 = v42[0];
          v16[-2].n128_u64[1] = v37;
          v16[-1].n128_u64[0] = v26;
          *(unint64_t *)((char *)v16[-1].n128_u64 + 7) = *(void *)((char *)v42 + 7);
          v16[-1].n128_u8[15] = v38;
          uint64_t v27 = v19 - a1 + 40;
          if (v27 >= 41)
          {
            unint64_t v28 = (v27 / 0x28uLL - 2) >> 1;
            long long v29 = (void *)(a1 + 40 * v28);
            if (sub_1CD845FD0(v29, (void *)v19))
            {
              __n128 v39 = *(__n128 *)v19;
              long long v30 = *v24;
              uint64_t v41 = *(void *)(v19 + 32);
              long long v40 = v30;
              *(void *)(v19 + 24) = 0;
              *(void *)(v19 + 32) = 0;
              *(void *)long long v24 = 0;
              do
              {
                long long v31 = v29;
                *(_OWORD *)uint64_t v19 = *(_OWORD *)v29;
                long long v32 = (void **)(v19 + 16);
                if (*(char *)(v19 + 39) < 0) {
                  operator delete(*v32);
                }
                long long v33 = (void **)(v31 + 2);
                long long v34 = *((_OWORD *)v31 + 1);
                *(void *)(v19 + 32) = v31[4];
                *(_OWORD *)long long v32 = v34;
                *((unsigned char *)v31 + 39) = 0;
                *((unsigned char *)v31 + 16) = 0;
                if (!v28)
                {
                  *(__n128 *)long long v31 = v39;
                  goto LABEL_38;
                }
                unint64_t v28 = (v28 - 1) >> 1;
                long long v29 = (void *)(a1 + 40 * v28);
                uint64_t v19 = (uint64_t)v31;
              }
              while (sub_1CD845FD0(v29, &v39));
              int v35 = *((char *)v31 + 39);
              *(__n128 *)long long v31 = v39;
              if (v35 < 0) {
                operator delete(*v33);
              }
LABEL_38:
              *(_OWORD *)long long v33 = v40;
              v31[4] = v41;
            }
          }
        }
      }
      while (v7-- > 2);
    }
  }
}

__n128 sub_1CD0ABF98(uint64_t a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    uint64_t v6 = a3;
    int64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a3 - a1) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a3 - a1) >> 3)) | 1;
      uint64_t v11 = (void *)(a1 + 40 * v10);
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a3 - a1) >> 3) + 2;
      if (v12 < a2 && sub_1CD845FD0((void *)(a1 + 40 * v10), v11 + 5))
      {
        v11 += 5;
        int64_t v10 = v12;
      }
      if (!sub_1CD845FD0(v11, v6))
      {
        __n128 v14 = v6[1];
        __n128 v22 = *v6;
        __n128 v23 = v14;
        uint64_t v24 = v6[2].n128_i64[0];
        v6[1].n128_u64[0] = 0;
        v6[1].n128_u64[1] = 0;
        v6[2].n128_u64[0] = 0;
        do
        {
          uint64_t v15 = v11;
          *uint64_t v6 = *(__n128 *)v11;
          uint64_t v16 = (void **)&v6[1];
          if (v6[2].n128_i8[7] < 0) {
            operator delete(*v16);
          }
          uint64_t v17 = (void **)(v15 + 2);
          long long v18 = *((_OWORD *)v15 + 1);
          v6[2].n128_u64[0] = v15[4];
          *(_OWORD *)uint64_t v16 = v18;
          *((unsigned char *)v15 + 39) = 0;
          *((unsigned char *)v15 + 16) = 0;
          if (v8 < v10)
          {
            *(__n128 *)uint64_t v15 = v22;
            goto LABEL_19;
          }
          uint64_t v19 = (2 * v10) | 1;
          uint64_t v11 = (void *)(a1 + 40 * v19);
          uint64_t v20 = 2 * v10 + 2;
          if (v20 < a2 && sub_1CD845FD0((void *)(a1 + 40 * v19), v11 + 5))
          {
            v11 += 5;
            uint64_t v19 = v20;
          }
          uint64_t v6 = (__n128 *)v15;
          int64_t v10 = v19;
        }
        while (!sub_1CD845FD0(v11, &v22));
        int v21 = *((char *)v15 + 39);
        *(__n128 *)uint64_t v15 = v22;
        if (v21 < 0) {
          operator delete(*v17);
        }
LABEL_19:
        __n128 result = v23;
        v15[4] = v24;
        *(__n128 *)uint64_t v17 = result;
      }
    }
  }
  return result;
}

BOOL llvm::SpecialCaseList::createInternal(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  v30[0] = 0;
  v30[1] = 0;
  v30[2] = 0x1000000000;
  if (*a2 != a2[1])
  {
    uint64_t v10 = a2[1];
    uint64_t v13 = *a2;
    while (1)
    {
      __int16 v29 = 260;
      v28[0] = v13;
      llvm::vfs::FileSystem::getBufferForFile(a3, (uint64_t)v28, -1, 1, 0, 0, (uint64_t)&v31);
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v6 = *(void *)&v31.__val_;
      std::error_code v27 = v31;
      if (!v31.__val_) {
        goto LABEL_19;
      }
      v21[0] = (uint64_t)"can't open file '";
      __int16 v22 = 259;
      __int16 v20 = 260;
      v19[0] = v13;
      sub_1CB8F1E58(v21, v19, (uint64_t)v23);
      v17[0] = (uint64_t)"': ";
      __int16 v18 = 259;
      sub_1CB8F1E58(v23, v17, (uint64_t)v24);
      std::error_code::message(&v14, &v27);
      __int16 v16 = 260;
      v15[0] = (uint64_t)&v14;
      sub_1CB8F1E58(v24, v15, (uint64_t)v28);
      llvm::Twine::str((llvm::Twine *)v28, &v25);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(_OWORD *)a4 = v25;
      *(void *)(a4 + 16) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      int v7 = 1;
LABEL_12:
      if ((v32 & 1) == 0)
      {
        uint64_t v8 = *(void *)&v31.__val_;
        *(void *)&v31.__val_ = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      BOOL v4 = v7 == 0;
      if (!v7)
      {
        v13 += 24;
        if (v13 != v10) {
          continue;
        }
      }
      goto LABEL_3;
    }
    std::system_category();
    uint64_t v6 = *(void *)&v31.__val_;
LABEL_19:
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    if (llvm::SpecialCaseList::parse(a1, v6, (uint64_t)v30, (uint64_t)&v25))
    {
      int v7 = 0;
    }
    else
    {
      v21[0] = (uint64_t)"error parsing file '";
      __int16 v22 = 259;
      __int16 v20 = 260;
      v19[0] = v13;
      sub_1CB8F1E58(v21, v19, (uint64_t)v23);
      v17[0] = (uint64_t)"': ";
      __int16 v18 = 259;
      sub_1CB8F1E58(v23, v17, (uint64_t)v24);
      __int16 v16 = 260;
      v15[0] = (uint64_t)&v25;
      sub_1CB8F1E58(v24, v15, (uint64_t)v28);
      llvm::Twine::str((llvm::Twine *)v28, &v14);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v14;
      int v7 = 1;
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    goto LABEL_12;
  }
  BOOL v4 = 1;
LABEL_3:
  sub_1CD61201C((uint64_t)v30);
  return v4;
}

void ***sub_1CD0AC440(void ***a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BOOL v4 = v2;
    sub_1CD0AC7B0(&v4);
    MEMORY[0x1D25D9CE0](v2, 0x20C40960023A9);
  }
  return a1;
}

void llvm::SpecialCaseList::create()
{
}

{
  operator new();
}

uint64_t llvm::SpecialCaseList::createInternal(void *a1, uint64_t a2, uint64_t a3)
{
  v5[0] = 0;
  v5[1] = 0;
  v5[2] = 0x1000000000;
  uint64_t v3 = llvm::SpecialCaseList::parse(a1, a2, (uint64_t)v5, a3);
  sub_1CD61201C((uint64_t)v5);
  return v3;
}

void sub_1CD0AC59C()
{
}

llvm::Regex *sub_1CD0AC624(llvm::Regex *result, void *a2)
{
  uint64_t v3 = result;
  BOOL v4 = (void *)*((void *)result + 1);
  while (v4 != a2)
  {
    unint64_t v5 = (llvm::Regex *)*(v4 - 2);
    v4 -= 2;
    __n128 result = v5;
    void *v4 = 0;
    if (v5)
    {
      llvm::Regex::~Regex(result);
      __n128 result = (llvm::Regex *)MEMORY[0x1D25D9CE0]();
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

char *sub_1CD0AC694(void **a1, uint64_t *a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    abort();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 3 > v3) {
    unint64_t v3 = v5 >> 3;
  }
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6 >> 60) {
    sub_1CB833614();
  }
  uint64_t v8 = (char *)operator new(16 * v6);
  unint64_t v9 = &v8[16 * v2];
  uint64_t v10 = &v8[16 * v6];
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)unint64_t v9 = v11;
  *((_DWORD *)v9 + 2) = *((_DWORD *)a2 + 2);
  int64_t v12 = v9 + 16;
  uint64_t v13 = *a1;
  std::string v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      uint64_t v15 = *(v14 - 2);
      v14 -= 2;
      *std::string v14 = 0;
      *((void *)v9 - 2) = v15;
      v9 -= 16;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v14 + 2);
    }
    while (v14 != v13);
    std::string v14 = *a1;
    __int16 v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      __int16 v18 = (llvm::Regex *)*(v16 - 2);
      v16 -= 2;
      uint64_t v17 = v18;
      *__int16 v16 = 0;
      if (v18)
      {
        llvm::Regex::~Regex(v17);
        MEMORY[0x1D25D9CE0]();
      }
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_1CD0AC7B0(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    BOOL v4 = (uint64_t *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        BOOL v4 = sub_1CD84707C(v4 - 5);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CD0AC834(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v19 = a1 + 2;
  if (v5 > 0x666666666666666) {
    sub_1CB833614();
  }
  uint64_t v7 = 5 * v5;
  uint64_t v8 = (char *)operator new(40 * v5);
  unint64_t v9 = &v8[40 * v2];
  std::string __p = v8;
  __int16 v16 = (uint64_t *)v9;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)unint64_t v9 = v10;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0x2800000000;
  uint64_t v17 = (uint64_t *)(v9 + 40);
  __int16 v18 = &v8[8 * v7];
  sub_1CD8471E0(a1, &__p);
  uint64_t v11 = a1[1];
  uint64_t v13 = v16;
  for (uint64_t i = v17; i != v13; uint64_t i = sub_1CD84707C(i - 5))
    ;
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

unint64_t llvm::getStableStringHash(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = 0xB0EEF52375EF8302;
  unint64_t v3 = 0xA0E4E32062FF891CLL;
  uint64_t v4 = 0x1533771C85ACA6D4;
  uint64_t v5 = 0xA257D1C9BBAB1C0;
  unint64_t v6 = &a1[a2 - (a2 & 7)];
  uint64_t v7 = a2 << 56;
  if (v6 == a1)
  {
    unint64_t v6 = a1;
  }
  else
  {
    do
    {
      v3 ^= *(void *)a1;
      char v8 = 1;
      do
      {
        char v9 = v8;
        unint64_t v10 = v2 + v5;
        unint64_t v11 = v10 ^ __ROR8__(v2, 51);
        unint64_t v12 = v4 + v3;
        uint64_t v13 = __ROR8__(v3, 48);
        uint64_t v5 = (v12 ^ v13) + __ROR8__(v10, 32);
        unint64_t v3 = v5 ^ __ROR8__(v12 ^ v13, 43);
        unint64_t v14 = v12 + v11;
        unint64_t v2 = v14 ^ __ROR8__(v11, 47);
        uint64_t v4 = __ROR8__(v14, 32);
        char v8 = 0;
      }
      while ((v9 & 1) != 0);
      v5 ^= *(void *)a1;
      a1 += 8;
    }
    while (a1 != v6);
  }
  switch(a2 & 7)
  {
    case 1:
      goto LABEL_14;
    case 2:
      goto LABEL_13;
    case 3:
      goto LABEL_12;
    case 4:
      goto LABEL_11;
    case 5:
      goto LABEL_10;
    case 6:
      goto LABEL_9;
    case 7:
      v7 |= (unint64_t)v6[6] << 48;
LABEL_9:
      v7 |= (unint64_t)v6[5] << 40;
LABEL_10:
      v7 |= (unint64_t)v6[4] << 32;
LABEL_11:
      v7 |= (unint64_t)v6[3] << 24;
LABEL_12:
      v7 |= (unint64_t)v6[2] << 16;
LABEL_13:
      v7 |= (unint64_t)v6[1] << 8;
LABEL_14:
      v7 |= *v6;
      break;
    default:
      break;
  }
  unint64_t v15 = v7 ^ v3;
  char v16 = 1;
  do
  {
    char v17 = v16;
    unint64_t v18 = v2 + v5;
    unint64_t v19 = v18 ^ __ROR8__(v2, 51);
    unint64_t v20 = v4 + v15;
    uint64_t v21 = __ROR8__(v15, 48);
    uint64_t v5 = (v20 ^ v21) + __ROR8__(v18, 32);
    unint64_t v15 = v5 ^ __ROR8__(v20 ^ v21, 43);
    unint64_t v22 = v20 + v19;
    unint64_t v2 = v22 ^ __ROR8__(v19, 47);
    uint64_t v4 = __ROR8__(v22, 32);
    char v16 = 0;
  }
  while ((v17 & 1) != 0);
  uint64_t v23 = v5 ^ v7;
  uint64_t v24 = v4 ^ 0xFF;
  int v25 = 4;
  do
  {
    unint64_t v26 = v2 + v23;
    unint64_t v27 = v26 ^ __ROR8__(v2, 51);
    unint64_t v28 = v24 + v15;
    unint64_t v29 = v28 ^ __ROR8__(v15, 48);
    uint64_t v23 = v29 + __ROR8__(v26, 32);
    unint64_t v15 = v23 ^ __ROR8__(v29, 43);
    unint64_t v30 = v28 + v27;
    unint64_t v2 = v30 ^ __ROR8__(v27, 47);
    uint64_t v24 = __ROR8__(v30, 32);
    --v25;
  }
  while (v25);
  return v2 ^ v24 ^ __ROR8__(v29, 43);
}

unint64_t llvm::getPointerAuthStringDiscriminator(unsigned __int8 *a1, uint64_t a2)
{
  return llvm::getStableStringHash(a1, a2) % 0xFFFF + 1;
}

uint64_t llvm::AreStatisticsEnabled(llvm *this)
{
  return byte_1EBD0C080 & 1 | (byte_1EA61F098 != 0);
}

void sub_1CD0ACB5C(const char ***a1, const char ***a2)
{
  unint64_t v4 = a2 - a1;
  if ((char *)a2 - (char *)a1 < 1025)
  {
LABEL_5:
    sub_1CD0ACF84(a1, a2, v4, 0, 0);
  }
  else
  {
    uint64_t v5 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v6 = a2 - a1;
    while (1)
    {
      uint64_t v7 = (const char ***)operator new(8 * v6, v5);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_5;
      }
    }
    char v9 = v7;
    sub_1CD0ACF84(a1, a2, v4, v7, v6);
    operator delete(v9);
  }
}

void llvm::GetStatistics(const char ***a1@<X8>)
{
  if (!atomic_load_explicit(qword_1EBCFB050, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB050, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  uint64_t v21 = (std::recursive_mutex *)qword_1EBCFB050[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB050[0]);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!atomic_load_explicit(&qword_1EBCFB068, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCFB068, (void *(*)(void))sub_1CD0ADB14, (void (*)(void *))sub_1CD0ADB5C);
  }
  uint64_t v4 = *(void *)qword_1EBCFB068;
  uint64_t v3 = *(void *)(qword_1EBCFB068 + 8);
  if (*(void *)qword_1EBCFB068 != v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v22 = *(void *)(qword_1EBCFB068 + 8);
    do
    {
      unint64_t v6 = *(const char **)(*(void *)v4 + 8);
      int v7 = *(_DWORD *)(*(void *)v4 + 24);
      unint64_t v8 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v8)
      {
        unint64_t v10 = *a1;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v5 - *a1);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v10) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL) {
            sub_1CB833614();
          }
          unint64_t v15 = operator new(24 * v14);
        }
        else
        {
          unint64_t v15 = 0;
        }
        char v17 = (const char **)&v15[6 * v11];
        uint64_t *v17 = v6;
        if (v6) {
          size_t v18 = strlen(v6);
        }
        else {
          size_t v18 = 0;
        }
        v17[1] = (const char *)v18;
        v15[6 * v11 + 4] = v7;
        unint64_t v19 = (char *)&v15[6 * v11];
        if (v5 != v10)
        {
          do
          {
            long long v20 = *(_OWORD *)(v5 - 3);
            *((void *)v19 - 1) = *(v5 - 1);
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            v5 -= 3;
          }
          while (v5 != v10);
          uint64_t v5 = *a1;
        }
        char v16 = v17 + 3;
        *a1 = (const char **)v19;
        a1[1] = v16;
        a1[2] = (const char **)&v15[6 * v14];
        if (v5) {
          operator delete(v5);
        }
        uint64_t v3 = v22;
      }
      else
      {
        const std::nothrow_t *v5 = v6;
        if (v6) {
          size_t v9 = strlen(v6);
        }
        else {
          size_t v9 = 0;
        }
        v5[1] = (const char *)v9;
        *((_DWORD *)v5 + 4) = v7;
        char v16 = v5 + 3;
      }
      a1[1] = v16;
      v4 += 8;
      uint64_t v5 = v16;
    }
    while (v4 != v3);
  }

  std::recursive_mutex::unlock(v21);
}

void llvm::ResetStatistics(llvm *this)
{
  if (!atomic_load_explicit(&qword_1EBCFB068, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCFB068, (void *(*)(void))sub_1CD0ADB14, (void (*)(void *))sub_1CD0ADB5C);
  }
  uint64_t v1 = qword_1EBCFB068;
  if (!atomic_load_explicit(qword_1EBCFB050, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB050, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  unint64_t v2 = (std::recursive_mutex *)qword_1EBCFB050[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB050[0]);
  uint64_t v3 = *(uint64_t **)v1;
  uint64_t v4 = *(uint64_t **)(v1 + 8);
  if (*(uint64_t **)v1 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      atomic_store(0, (unsigned __int8 *)(v5 + 28));
      atomic_store(0, (unsigned int *)(v5 + 24));
    }
    while (v3 != v4);
    uint64_t v3 = *(uint64_t **)v1;
  }
  *(void *)(v1 + 8) = v3;

  std::recursive_mutex::unlock(v2);
}

const char ***sub_1CD0ACF84(const char ***result, const char ***a2, unint64_t a3, const char ***a4, uint64_t a5)
{
  if (a3 < 2) {
    return result;
  }
  unint64_t v6 = result;
  if (a3 == 2)
  {
    int v7 = *(a2 - 1);
    unint64_t v8 = *result;
    __n128 result = (const char ***)strcmp(*v7, **result);
    if (!result)
    {
      __n128 result = (const char ***)strcmp(v7[1], v8[1]);
      if (!result) {
        __n128 result = (const char ***)strcmp(v7[2], v8[2]);
      }
    }
    if ((result & 0x80000000) != 0)
    {
      *unint64_t v6 = v7;
      *(a2 - 1) = v8;
    }
    return result;
  }
  if ((uint64_t)a3 <= 128)
  {
    if (result == a2) {
      return result;
    }
    unint64_t v10 = result + 1;
    if (result + 1 == a2) {
      return result;
    }
    uint64_t v11 = 0;
    unint64_t v12 = result;
    while (1)
    {
      unint64_t v13 = *v12;
      unint64_t v12 = v10;
      unint64_t v14 = *v10;
      __n128 result = (const char ***)strcmp(**v10, *v13);
      if (result || (__n128 result = (const char ***)strcmp(v14[1], v13[1]), result))
      {
        if ((result & 0x80000000) != 0) {
          goto LABEL_15;
        }
      }
      else
      {
        __n128 result = (const char ***)strcmp(v14[2], v13[2]);
        if ((result & 0x80000000) != 0)
        {
LABEL_15:
          uint64_t v15 = v11;
          while (1)
          {
            *(const char ***)((char *)v6 + v15 + 8) = v13;
            if (!v15) {
              break;
            }
            unint64_t v13 = *(const char ***)((char *)v6 + v15 - 8);
            __n128 result = (const char ***)strcmp(*v14, *v13);
            if (!result)
            {
              __n128 result = (const char ***)strcmp(v14[1], v13[1]);
              if (!result) {
                __n128 result = (const char ***)strcmp(v14[2], v13[2]);
              }
            }
            v15 -= 8;
            if ((result & 0x80000000) == 0)
            {
              char v16 = (const char ***)((char *)v6 + v15 + 8);
              goto LABEL_23;
            }
          }
          char v16 = v6;
LABEL_23:
          *char v16 = v14;
        }
      }
      unint64_t v10 = v12 + 1;
      v11 += 8;
      if (v12 + 1 == a2) {
        return result;
      }
    }
  }
  size_t v18 = a4;
  unint64_t v19 = a3 >> 1;
  long long v20 = &result[a3 >> 1];
  unint64_t v21 = a3 >> 1;
  if ((uint64_t)a3 <= a5)
  {
    sub_1CD0AD260(result, v20, v21, a4);
    uint64_t v22 = &v18[v19];
    __n128 result = sub_1CD0AD260(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v22);
    uint64_t v23 = &v18[a3];
    uint64_t v24 = v22;
    while (v24 != v23)
    {
      int v25 = v24;
      unint64_t v26 = *v24;
      unint64_t v27 = *v18;
      __n128 result = (const char ***)strcmp(**v24, **v18);
      if (!result)
      {
        __n128 result = (const char ***)strcmp(v26[1], v27[1]);
        if (!result) {
          __n128 result = (const char ***)strcmp(v26[2], v27[2]);
        }
      }
      if ((int)result < 0) {
        unint64_t v28 = v26;
      }
      else {
        unint64_t v28 = v27;
      }
      v18 += (int)result >= 0;
      uint64_t v24 = &v25[result >> 31];
      *v6++ = v28;
      if (v18 == v22)
      {
        if (v24 != v23)
        {
          uint64_t v29 = 0;
          if ((int)result < 0) {
            char v30 = 1;
          }
          else {
            char v30 = 2;
          }
          std::error_code v31 = &v25[v30 & 1];
          do
          {
            v6[v29] = v31[v29];
            ++v29;
          }
          while (&v31[v29] != v23);
        }
        return result;
      }
    }
    if (v18 != v22)
    {
      uint64_t v32 = 0;
      do
      {
        v6[v32] = v18[v32];
        ++v32;
      }
      while (&v18[v32] != v22);
    }
  }
  else
  {
    sub_1CD0ACF84(result, v20, v21, a4, a5);
    sub_1CD0ACF84(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v18, a5);
    return (const char ***)sub_1CD0AD504((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
  }
  return result;
}

const char ***sub_1CD0AD260(const char ***result, const char ***a2, unint64_t a3, const char ***a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    unint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_12:
      uint64_t *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      unint64_t v8 = a2 - 1;
      size_t v9 = *(a2 - 1);
      unint64_t v10 = *result;
      __n128 result = (const char ***)strcmp(*v9, **result);
      if (!result)
      {
        __n128 result = (const char ***)strcmp(v9[1], v10[1]);
        if (!result) {
          __n128 result = (const char ***)strcmp(v9[2], v10[2]);
        }
      }
      if ((int)result >= 0) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v9;
      }
      *v4++ = v11;
      if ((int)result >= 0) {
        unint64_t v6 = v8;
      }
      goto LABEL_12;
    }
    if ((uint64_t)a3 > 8)
    {
      uint64_t v23 = &result[a3 >> 1];
      sub_1CD0ACF84(result, v23, a3 >> 1, a4, a3 >> 1);
      __n128 result = (const char ***)sub_1CD0ACF84(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      uint64_t v24 = &v6[a3 >> 1];
      while (v24 != a2)
      {
        int v25 = v24;
        unint64_t v26 = *v24;
        unint64_t v27 = *v6;
        __n128 result = (const char ***)strcmp(**v24, **v6);
        if (!result)
        {
          __n128 result = (const char ***)strcmp(v26[1], v27[1]);
          if (!result) {
            __n128 result = (const char ***)strcmp(v26[2], v27[2]);
          }
        }
        if ((int)result < 0) {
          unint64_t v28 = v26;
        }
        else {
          unint64_t v28 = v27;
        }
        uint64_t v24 = &v25[result >> 31];
        v6 += (int)result >= 0;
        *v4++ = v28;
        if (v6 == v23)
        {
          if (v24 != a2)
          {
            uint64_t v29 = 0;
            char v30 = (char *)v25 + ((result >> 28) & 8);
            do
            {
              v4[v29] = *(const char ***)&v30[v29 * 8];
              ++v29;
            }
            while (&v30[v29 * 8] != (char *)a2);
          }
          return result;
        }
      }
      if (v6 != v23)
      {
        uint64_t v31 = 0;
        do
        {
          v4[v31] = v6[v31];
          ++v31;
        }
        while (&v6[v31] != v23);
      }
    }
    else if (result != a2)
    {
      unint64_t v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        unint64_t v14 = a4;
        uint64_t v15 = a4;
        do
        {
          char v17 = *v15++;
          char v16 = v17;
          size_t v18 = *v12;
          __n128 result = (const char ***)strcmp(**v12, *v17);
          if (result || (__n128 result = (const char ***)strcmp(v18[1], v16[1]), result))
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_23;
            }
          }
          else
          {
            __n128 result = (const char ***)strcmp(v18[2], v16[2]);
            if ((result & 0x80000000) != 0)
            {
LABEL_23:
              v14[1] = v16;
              unint64_t v19 = v4;
              if (v14 != v4)
              {
                uint64_t v20 = v13;
                while (1)
                {
                  unint64_t v21 = *v12;
                  uint64_t v22 = *(const char ***)((char *)v4 + v20 - 8);
                  __n128 result = (const char ***)strcmp(**v12, *v22);
                  if (!result)
                  {
                    __n128 result = (const char ***)strcmp(v21[1], v22[1]);
                    if (!result) {
                      __n128 result = (const char ***)strcmp(v21[2], v22[2]);
                    }
                  }
                  if ((result & 0x80000000) == 0) {
                    break;
                  }
                  *(const char ***)((char *)v4 + v20) = v22;
                  v20 -= 8;
                  if (!v20)
                  {
                    unint64_t v19 = v4;
                    goto LABEL_32;
                  }
                }
                unint64_t v19 = (const char ***)((char *)v4 + v20);
              }
LABEL_32:
              *unint64_t v19 = *v12;
              goto LABEL_33;
            }
          }
          _DWORD *v15 = v18;
LABEL_33:
          ++v12;
          v13 += 8;
          unint64_t v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CD0AD504(uint64_t result, const char ***a2, const char ***a3, uint64_t a4, uint64_t a5, const char ***a6, uint64_t a7)
{
  uint64_t v89 = a5;
  if (a5)
  {
    uint64_t v11 = (const char ***)result;
    while (a4 > a7 && v89 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = *a2;
      unint64_t v14 = **a2;
      uint64_t v15 = -a4;
      while (1)
      {
        char v16 = v11[v12];
        __n128 result = strcmp(v14, *v16);
        if (!result)
        {
          __n128 result = strcmp(v13[1], v16[1]);
          if (!result) {
            __n128 result = strcmp(v13[2], v16[2]);
          }
        }
        if ((result & 0x80000000) != 0) {
          break;
        }
        ++v12;
        if (__CFADD__(v15++, 1)) {
          return result;
        }
      }
      uint64_t v18 = -v15;
      uint64_t v19 = v89;
      char v87 = a3;
      uint64_t v88 = a7;
      v82 = &v11[v12];
      if (-v15 >= v89)
      {
        if (v15 == -1)
        {
          v11[v12] = v13;
          *a2 = v16;
          return result;
        }
        v84 = v11;
        std::string::size_type v86 = a6;
        if (v15 > 0) {
          uint64_t v18 = 1 - v15;
        }
        uint64_t v81 = v18 >> 1;
        uint64_t v31 = a3;
        unint64_t v27 = &(&v11[v18 >> 1])[v12];
        uint64_t v23 = v31;
        if (v31 != a2)
        {
          unint64_t v32 = v31 - a2;
          uint64_t v33 = *v27;
          long long v34 = **v27;
          uint64_t v23 = a2;
          do
          {
            int v35 = &v23[v32 >> 1];
            v36 = *v35;
            int v37 = strcmp(**v35, v34);
            if (!v37)
            {
              int v37 = strcmp(v36[1], v33[1]);
              if (!v37) {
                int v37 = strcmp(v36[2], v33[2]);
              }
            }
            if (v37 >= 0) {
              v32 >>= 1;
            }
            else {
              v32 += ~(v32 >> 1);
            }
            if (v37 < 0) {
              uint64_t v23 = v35 + 1;
            }
          }
          while (v32);
        }
        uint64_t v19 = v89;
        uint64_t v22 = a2;
        uint64_t v21 = v23 - a2;
        uint64_t v11 = v84;
        a6 = v86;
        uint64_t v38 = v81;
      }
      else
      {
        if (v89 >= 0) {
          uint64_t v20 = v89;
        }
        else {
          uint64_t v20 = v89 + 1;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = a2;
        uint64_t v23 = &a2[v20 >> 1];
        if (&v11[v12] == a2)
        {
          unint64_t v27 = a2;
        }
        else
        {
          uint64_t v80 = v20 >> 1;
          std::string::size_type v83 = v11;
          int v85 = a6;
          unint64_t v24 = ((char *)a2 - (char *)v11 - v12 * 8) >> 3;
          int v25 = *v23;
          unint64_t v26 = **v23;
          unint64_t v27 = &v11[v12];
          do
          {
            unint64_t v28 = &v27[v24 >> 1];
            uint64_t v29 = *v28;
            int v30 = strcmp(v26, **v28);
            if (!v30)
            {
              int v30 = strcmp(v25[1], v29[1]);
              if (!v30) {
                int v30 = strcmp(v25[2], v29[2]);
              }
            }
            if (v30 < 0)
            {
              v24 >>= 1;
            }
            else
            {
              unint64_t v27 = v28 + 1;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          uint64_t v11 = v83;
          a6 = v85;
          uint64_t v19 = v89;
          uint64_t v22 = a2;
          uint64_t v21 = v80;
        }
        uint64_t v38 = ((char *)v27 - (char *)v11 - v12 * 8) >> 3;
      }
      __n128 v39 = v23;
      if (v27 != v22)
      {
        __n128 v39 = v27;
        if (v22 != v23)
        {
          if (v27 + 1 == v22)
          {
            uint64_t v45 = v21;
            std::string::size_type v46 = *v27;
            int64_t v47 = (char *)v23 - (char *)v22;
            uint64_t v48 = v38;
            memmove(v27, v22, (char *)v23 - (char *)v22);
            uint64_t v38 = v48;
            __n128 v39 = (const char ***)((char *)v27 + v47);
            unint64_t *v39 = v46;
            uint64_t v21 = v45;
            uint64_t v19 = v89;
          }
          else if (v22 + 1 == v23)
          {
            uint64_t v49 = v21;
            v50 = *(v23 - 1);
            __n128 v39 = v27 + 1;
            if (v23 - 1 != v27)
            {
              uint64_t v51 = v38;
              memmove(v27 + 1, v27, (char *)(v23 - 1) - (char *)v27);
              uint64_t v38 = v51;
            }
            char *v27 = v50;
            uint64_t v19 = v89;
            uint64_t v21 = v49;
          }
          else
          {
            uint64_t v40 = v22 - v27;
            if (v40 == v23 - v22)
            {
              BOOL v41 = v22 == v23 || v27 == v22;
              if (!v41)
              {
                unint64_t v42 = v27 + 1;
                __n128 v43 = v22 + 1;
                do
                {
                  uint64_t v44 = *(v42 - 1);
                  *(v42 - 1) = *(v43 - 1);
                  *(v43 - 1) = v44;
                  if (v42 == v22) {
                    break;
                  }
                  ++v42;
                  BOOL v41 = v43++ == v23;
                }
                while (!v41);
              }
              __n128 v39 = v22;
            }
            else
            {
              uint64_t v52 = v23 - v22;
              uint64_t v53 = v22 - v27;
              do
              {
                uint64_t v54 = v53;
                uint64_t v53 = v52;
                uint64_t v52 = v54 % v52;
              }
              while (v52);
              if (v53)
              {
                uint64_t v55 = &v27[v53];
                do
                {
                  unint64_t v57 = *--v55;
                  uint64_t v56 = v57;
                  uint64_t v58 = &v55[v40];
                  uint64_t v59 = v55;
                  do
                  {
                    v60 = v58;
                    *uint64_t v59 = *v58;
                    char v61 = &v58[v40];
                    BOOL v62 = __OFSUB__(v40, v23 - v58);
                    uint64_t v64 = v40 - (v23 - v58);
                    char v63 = (v64 < 0) ^ v62;
                    uint64_t v58 = &v27[v64];
                    if (v63) {
                      uint64_t v58 = v61;
                    }
                    uint64_t v59 = v60;
                  }
                  while (v58 != v55);
                  llvm::raw_ostream *v60 = v56;
                }
                while (v55 != v27);
              }
              __n128 v39 = &v27[v23 - v22];
            }
          }
        }
      }
      a4 = -(v38 + v15);
      uint64_t v65 = v19 - v21;
      if (v38 + v21 >= v19 - (v38 + v21) - v15)
      {
        uint64_t v66 = v38;
        __n128 result = sub_1CD0AD504(v39, v23, v87, -(v38 + v15), v19 - v21, a6, v88);
        uint64_t v23 = v27;
        uint64_t v65 = v21;
        a4 = v66;
        a3 = v39;
        uint64_t v11 = v82;
      }
      else
      {
        __n128 result = sub_1CD0AD504(&v11[v12], v27, v39, v38, v21, a6, v88);
        uint64_t v11 = v39;
        a3 = v87;
      }
      uint64_t v89 = v65;
      a2 = v23;
      a7 = v88;
      if (!v65) {
        return result;
      }
    }
    if (a4 <= v89)
    {
      if (v11 != a2)
      {
        uint64_t v74 = 0;
        do
        {
          a6[v74] = v11[v74];
          ++v74;
        }
        while (&v11[v74] != a2);
        if (v74 * 8)
        {
          v75 = a6;
          while (a2 != a3)
          {
            int v76 = *a2;
            uint64_t v77 = *v75;
            __n128 result = strcmp(**a2, **v75);
            if (!result)
            {
              __n128 result = strcmp(v76[1], v77[1]);
              if (!result) {
                __n128 result = strcmp(v76[2], v77[2]);
              }
            }
            if ((int)result < 0) {
              v78 = v76;
            }
            else {
              v78 = v77;
            }
            a2 += result >> 31;
            v75 += (int)result >= 0;
            *v11++ = v78;
            if (&a6[v74] == v75) {
              return result;
            }
          }
          return (uint64_t)memmove(v11, v75, (char *)a6 - (char *)v75 + v74 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v67 = 0;
      do
      {
        a6[v67] = a2[v67];
        ++v67;
      }
      while (&a2[v67] != a3);
      if (v67 * 8)
      {
        v68 = &a6[v67];
        for (uint64_t i = a3 - 1; ; --i)
        {
          uint64_t v70 = a2;
          if (a2 == v11) {
            break;
          }
          std::string::size_type v71 = *(a2 - 1);
          std::string::size_type v72 = *(v68 - 1);
          __n128 result = strcmp(*v72, *v71);
          if (!result)
          {
            __n128 result = strcmp(v72[1], v71[1]);
            if (!result) {
              __n128 result = strcmp(v72[2], v71[2]);
            }
          }
          if ((int)result >= 0) {
            size_t v73 = v72;
          }
          else {
            size_t v73 = v71;
          }
          if ((int)result < 0) {
            uint64_t v70 = a2 - 1;
          }
          a2 = v70;
          if ((int)result >= 0) {
            --v68;
          }
          *uint64_t i = v73;
          if (v68 == a6) {
            return result;
          }
        }
        if (v68 != a6)
        {
          uint64_t v79 = 0;
          do
          {
            i[v79] = v68[v79 - 1];
            --v79;
          }
          while (&v68[v79] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1CD0ADB14()
{
}

llvm *sub_1CD0ADB5C(llvm *this)
{
  if (this)
  {
    uint64_t v1 = this;
    if (byte_1EA61F098 | byte_1EBD0C081) {
      llvm::PrintStatistics(this);
    }
    unint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *((void *)v1 + 1) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return this;
}

unint64_t llvm::SplitString(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v25, a4, a5, 0);
  unint64_t result = llvm::StringRef::find_first_of(&v25, a4, a5, first_not_of);
  if (a2 >= first_not_of) {
    unint64_t v12 = first_not_of;
  }
  else {
    unint64_t v12 = a2;
  }
  if (v12 <= result) {
    unint64_t v13 = result;
  }
  else {
    unint64_t v13 = v12;
  }
  if (a2 < v13) {
    unint64_t v13 = a2;
  }
  unint64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    uint64_t v15 = a1 + v12;
    if (a2 >= result) {
      unint64_t v16 = result;
    }
    else {
      unint64_t v16 = a2;
    }
    uint64_t v17 = a1 + v16;
    unint64_t v18 = a2 - v16;
    unsigned int v19 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v19 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v20 = (void *)(*(void *)a3 + 16 * v19);
      *uint64_t v20 = v15;
      v20[1] = v14;
      unsigned int v19 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v19;
      uint64_t v25 = v17;
      unint64_t v26 = v18;
      unint64_t v21 = llvm::StringRef::find_first_not_of(&v25, a4, a5, 0);
      unint64_t result = llvm::StringRef::find_first_of(&v25, a4, a5, v21);
      if (v18 >= v21) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v18;
      }
      if (v22 <= result) {
        unint64_t v23 = result;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v18 < v23) {
        unint64_t v23 = v18;
      }
      uint64_t v15 = v17 + v22;
      if (v18 >= result) {
        unint64_t v24 = result;
      }
      else {
        unint64_t v24 = v18;
      }
      v17 += v24;
      v18 -= v24;
      unint64_t v14 = v23 - v22;
    }
    while (v23 != v22);
  }
  return result;
}

llvm::raw_ostream *llvm::printEscapedString(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (char *)result;
    do
    {
      unint64_t v6 = *v5;
      if (v6 == 92)
      {
        unint64_t v14 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v14 < *((void *)a3 + 3))
        {
          *((void *)a3 + 4) = v14 + 1;
          *unint64_t v14 = 92;
        }
        else
        {
          unint64_t result = llvm::raw_ostream::write(a3, 92);
        }
        uint64_t v15 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v15 < *((void *)a3 + 3))
        {
          *((void *)a3 + 4) = v15 + 1;
          unsigned char *v15 = 92;
          goto LABEL_9;
        }
        size_t v9 = a3;
        char v10 = 92;
      }
      else
      {
        unint64_t v8 = *((void *)a3 + 3);
        int v7 = (unsigned char *)*((void *)a3 + 4);
        if (v6 == 34 || (v6 - 32) > 0x5Eu)
        {
          if ((unint64_t)v7 < v8)
          {
            *((void *)a3 + 4) = v7 + 1;
            *int v7 = 92;
          }
          else
          {
            unint64_t result = llvm::raw_ostream::write(a3, 92);
          }
          char v11 = a0123456789abcd_6[v6 >> 4];
          unint64_t v12 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v12 < *((void *)a3 + 3))
          {
            *((void *)a3 + 4) = v12 + 1;
            *unint64_t v12 = v11;
          }
          else
          {
            unint64_t result = llvm::raw_ostream::write(a3, v11);
          }
          char v10 = a0123456789abcd_6[v6 & 0xF];
          unint64_t v13 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v13 < *((void *)a3 + 3))
          {
            *((void *)a3 + 4) = v13 + 1;
            *unint64_t v13 = v10;
            goto LABEL_9;
          }
          size_t v9 = a3;
        }
        else
        {
          if ((unint64_t)v7 < v8)
          {
            *((void *)a3 + 4) = v7 + 1;
            *int v7 = v6;
            goto LABEL_9;
          }
          size_t v9 = a3;
          char v10 = *v5;
        }
      }
      unint64_t result = llvm::raw_ostream::write(v9, v10);
LABEL_9:
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

llvm::raw_ostream *llvm::printHTMLEscaped(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      unsigned int v6 = *(unsigned __int8 *)v5;
      if (v6 <= 0x26)
      {
        if (v6 == 34)
        {
          uint64_t v12 = *((void *)a3 + 4);
          if ((unint64_t)(*((void *)a3 + 3) - v12) > 5)
          {
            *(_WORD *)(v12 + 4) = 15220;
            int v16 = 1869967654;
            goto LABEL_33;
          }
          unint64_t v8 = a3;
          size_t v9 = "&quot;";
          goto LABEL_20;
        }
        if (v6 != 38)
        {
LABEL_24:
          unint64_t v14 = (unsigned char *)*((void *)a3 + 4);
          if ((unint64_t)v14 >= *((void *)a3 + 3))
          {
            unint64_t result = llvm::raw_ostream::write(a3, v6);
          }
          else
          {
            *((void *)a3 + 4) = v14 + 1;
            *unint64_t v14 = v6;
          }
          goto LABEL_22;
        }
        uint64_t v10 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v10) > 4)
        {
          *(unsigned char *)(v10 + 4) = 59;
          *(_DWORD *)uint64_t v10 = 1886216486;
          uint64_t v15 = *((void *)a3 + 4) + 5;
LABEL_34:
          *((void *)a3 + 4) = v15;
          goto LABEL_22;
        }
        unint64_t v8 = a3;
        size_t v9 = "&amp;";
        size_t v11 = 5;
      }
      else
      {
        switch(v6)
        {
          case '\'':
            uint64_t v12 = *((void *)a3 + 4);
            if ((unint64_t)(*((void *)a3 + 3) - v12) > 5)
            {
              *(_WORD *)(v12 + 4) = 15219;
              int v16 = 1869635878;
LABEL_33:
              *(_DWORD *)uint64_t v12 = v16;
              uint64_t v15 = *((void *)a3 + 4) + 6;
              goto LABEL_34;
            }
            unint64_t v8 = a3;
            size_t v9 = "&apos;";
LABEL_20:
            size_t v11 = 6;
            goto LABEL_21;
          case '<':
            unint64_t v13 = (_DWORD *)*((void *)a3 + 4);
            if (*((void *)a3 + 3) - (void)v13 > 3uLL)
            {
              *unint64_t v13 = 997485606;
              goto LABEL_31;
            }
            unint64_t v8 = a3;
            size_t v9 = "&lt;";
            break;
          case '>':
            int v7 = (_DWORD *)*((void *)a3 + 4);
            if (*((void *)a3 + 3) - (void)v7 > 3uLL)
            {
              *int v7 = 997484326;
LABEL_31:
              uint64_t v15 = *((void *)a3 + 4) + 4;
              goto LABEL_34;
            }
            unint64_t v8 = a3;
            size_t v9 = "&gt;";
            break;
          default:
            goto LABEL_24;
        }
        size_t v11 = 4;
      }
LABEL_21:
      unint64_t result = llvm::raw_ostream::write(v8, v9, v11);
LABEL_22:
      uint64_t v5 = (llvm::raw_ostream *)((char *)v5 + 1);
      --v4;
    }
    while (v4);
  }
  return result;
}

void llvm::convertToSnakeFromCamelCase(char *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    std::string::size_type v4 = a2;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::string::reserve((std::string *)a3, a2);
    uint64_t v6 = MEMORY[0x1E4F14390];
    while (1)
    {
      uint64_t v7 = *a1;
      if (*a1 < 0)
      {
        if (__maskrune((char)v7, 0x8000uLL))
        {
LABEL_5:
          char v8 = *(unsigned char *)(a3 + 23);
          int v9 = v8;
          uint64_t v10 = v8 & 0x7F;
          if (v9 < 0) {
            uint64_t v10 = *(void *)(a3 + 8);
          }
          if (v10)
          {
            uint64_t v11 = v9 >= 0 ? a3 : *(void *)a3;
            if (*(unsigned char *)(v11 + v10 - 1) != 95) {
              std::string::push_back((std::string *)a3, 95);
            }
          }
          if ((v7 - 65) >= 0x1Au) {
            std::string::value_type v12 = v7;
          }
          else {
            std::string::value_type v12 = v7 + 32;
          }
          std::string::value_type v13 = v12;
          goto LABEL_19;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x8000) != 0)
      {
        goto LABEL_5;
      }
      std::string::value_type v13 = v7;
LABEL_19:
      std::string::push_back((std::string *)a3, v13);
      ++a1;
      if (!--v4) {
        return;
      }
    }
  }
  *(unsigned char *)(a3 + 23) = 0;
  *(unsigned char *)a3 = 0;
}

void llvm::convertToCamelFromSnakeCase(std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!a2)
  {
    *(unsigned char *)(a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::string::reserve((std::string *)a4, a2);
  uint64_t v8 = *a1;
  std::string::value_type v9 = *a1;
  if (a3)
  {
    if ((char)v8 < 0)
    {
      int v14 = __maskrune((char)v8, 0x1000uLL);
      std::string::value_type v9 = *a1;
      if (!v14) {
        goto LABEL_7;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x1000) == 0)
    {
      goto LABEL_7;
    }
    if ((v9 - 97) < 0x1Au) {
      v9 -= 32;
    }
  }
LABEL_7:
  std::string::push_back((std::string *)a4, v9);
  if (a2 >= 2)
  {
    unint64_t v10 = 1;
    uint64_t v11 = MEMORY[0x1E4F14390];
    do
    {
      int v12 = a1[v10];
      if (v10 != a2 - 1 && v12 == 95)
      {
        uint64_t v13 = a1[v10 + 1];
        if (a1[v10 + 1] < 0)
        {
          if (__maskrune((char)v13, 0x1000uLL))
          {
LABEL_13:
            int v12 = a1[v10 + 1];
            if ((v12 - 97) < 0x1A) {
              LOBYTE(v12) = v12 - 32;
            }
            ++v10;
            goto LABEL_18;
          }
        }
        else if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x1000) != 0)
        {
          goto LABEL_13;
        }
        LOBYTE(v12) = a1[v10];
      }
LABEL_18:
      std::string::push_back((std::string *)a4, v12);
      ++v10;
    }
    while (v10 < a2);
  }
}

uint64_t llvm::StringMapImpl::StringMapImpl(uint64_t this, int a2, int a3)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a3;
  if (a2)
  {
    unint64_t v5 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
    unint64_t v7 = v6 | (v6 >> 8) | ((v6 | (v6 >> 8)) >> 16);
    int v8 = v7 + 1;
    uint64_t v10 = this;
    std::string::value_type v9 = sub_1CC248524(v7 + 2, 0xCuLL);
    int v4 = v8;
    uint64_t v3 = v9;
    this = v10;
    v3[v8] = 2;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 0;
  }
  *(void *)this = v3;
  *(_DWORD *)(this + 8) = v4;
  return this;
}

{
  void *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;

  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a3;
  if (a2)
  {
    std::string::value_type v9 = this;
    unint64_t v5 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
    unint64_t v7 = v6 | (v6 >> 8) | ((v6 | (v6 >> 8)) >> 16);
    int v8 = malloc_type_calloc(v7 + 2, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v8) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v3 = v8;
    int v4 = v7 + 1;
    v8[(v7 + 1)] = 2;
    this = v9;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 0;
  }
  *(void *)this = v3;
  *(_DWORD *)(this + 8) = v4;
  return this;
}

uint64_t llvm::StringMapImpl::LookupBucketFor(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  unsigned int v6 = *((_DWORD *)a1 + 2);
  if (!v6)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    unint64_t v21 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v21) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v21[16] = 2;
    *a1 = (uint64_t)v21;
    unsigned int v6 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v7 = 0;
  if (a3)
  {
    size_t v8 = a3;
    std::string::value_type v9 = a2;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *a1;
  unsigned int v12 = v6 - 1;
  uint64_t v13 = *a1 + 8 * v6 + 8;
  int v14 = -1;
  int v15 = 1;
  int v16 = v7;
  while (1)
  {
    uint64_t v17 = v16 & v12;
    unint64_t v18 = *(void **)(v11 + 8 * v17);
    if (!v18) {
      break;
    }
    if (v18 == (void *)-8)
    {
      if (v14 == -1) {
        int v14 = v17;
      }
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7 {
           && a3 == *v18
    }
           && (!a3 || !memcmp(a2, (char *)v18 + *((unsigned int *)a1 + 5), a3)))
    {
      return v17;
    }
    int v16 = v15 + v17;
    ++v15;
  }
  uint64_t v19 = v14;
  if (v14 == -1)
  {
    uint64_t v19 = v17;
    uint64_t v17 = v17;
  }
  else
  {
    uint64_t v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  return v17;
}

uint64_t llvm::StringMapImpl::FindKey(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  int v7 = 0;
  if (__n)
  {
    size_t v8 = __n;
    std::string::value_type v9 = __s1;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  unsigned int v11 = v3 - 1;
  uint64_t v12 = *a1;
  uint64_t v13 = *a1 + 8 * v3 + 8;
  int v14 = 1;
  int v15 = v7;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    uint64_t v17 = *(void **)(v12 + 8 * v16);
    if (v17 != (void *)-8)
    {
      if (!v17) {
        return 0xFFFFFFFFLL;
      }
      if (*(_DWORD *)(v13 + 4 * v16) == v7
        && __n == *v17
        && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
      {
        break;
      }
    }
    int v15 = v14 + v16;
    ++v14;
  }
  return v16;
}

int32x2_t llvm::StringMapImpl::RemoveKey(uint64_t *a1, size_t *a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *((unsigned int *)a1 + 5);
    unint64_t v5 = (char *)a2 + v4;
    size_t v6 = *a2;
    if (*a2)
    {
      int v7 = 0;
      size_t v8 = *a2;
      std::string::value_type v9 = (unsigned __int8 *)a2 + v4;
      do
      {
        int v10 = *v9++;
        int v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    else
    {
      int v7 = 0;
    }
    unsigned int v11 = v2 - 1;
    uint64_t v12 = *a1;
    uint64_t v13 = *a1 + 8 * v2 + 8;
    int v14 = 1;
    int v15 = v7;
    while (1)
    {
      uint64_t v16 = v15 & v11;
      uint64_t v17 = *(void **)(v12 + 8 * v16);
      if (v17 != (void *)-8)
      {
        if (!v17) {
          return result;
        }
        if (*(_DWORD *)(v13 + 4 * v16) == v7 && v6 == *v17 && (!v6 || !memcmp(v5, (char *)v17 + v4, v6))) {
          break;
        }
      }
      int v15 = v14 + v16;
      ++v14;
    }
    *(void *)(v12 + 8 * (int)v16) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)a1 + 12) = (uint64_t)result;
  }
  return result;
}

int32x2_t llvm::StringMapImpl::RemoveKey(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    int v7 = 0;
    if (__n)
    {
      size_t v8 = __n;
      std::string::value_type v9 = __s1;
      do
      {
        int v10 = *v9++;
        int v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    unsigned int v11 = v3 - 1;
    uint64_t v12 = *a1;
    uint64_t v13 = *a1 + 8 * v3 + 8;
    int v14 = 1;
    int v15 = v7;
    while (1)
    {
      uint64_t v16 = v15 & v11;
      uint64_t v17 = *(void **)(v12 + 8 * v16);
      if (v17 != (void *)-8)
      {
        if (!v17) {
          return result;
        }
        if (*(_DWORD *)(v13 + 4 * v16) == v7
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
        {
          break;
        }
      }
      int v15 = v14 + v16;
      ++v14;
    }
    *(void *)(v12 + 8 * (int)v16) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)a1 + 12) = (uint64_t)result;
  }
  return result;
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this, uint64_t a2)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  int v4 = *((_DWORD *)this + 3);
  if (3 * v5 < 4 * v4)
  {
    v5 *= 2;
  }
  else if (v5 - (v4 + *((_DWORD *)this + 4)) > v5 >> 3)
  {
    return a2;
  }
  int v7 = malloc_type_calloc(v5 + 1, 0xCuLL, 0x6D9A4F0CuLL);
  if (!v7 && (v5 != -1 || (int v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  size_t v8 = &v7[v5];
  *size_t v8 = 2;
  std::string::value_type v9 = v8 + 1;
  int v10 = *(_DWORD **)this;
  uint64_t v11 = *((unsigned int *)this + 2);
  if (v11)
  {
    uint64_t v12 = 0;
    unsigned int v13 = v5 - 1;
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *(void *)(*(void *)this + 8 * v12);
      if (v15) {
        BOOL v16 = v15 == -8;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        int v17 = v10[2 * v11 + 2 + v12];
        uint64_t v18 = v17 & v13;
        if (v7[v18])
        {
          int v19 = 1;
          do
          {
            int v20 = v18 + v19++;
            uint64_t v18 = v20 & v13;
          }
          while (v7[v18]);
        }
        v7[v18] = v15;
        *((_DWORD *)v9 + v18) = v17;
        if (v12 == v14) {
          a2 = v18;
        }
        else {
          a2 = a2;
        }
      }
      ++v12;
    }
    while (v12 != v11);
    int v10 = *(_DWORD **)this;
  }
  free(v10);
  *(void *)this = v7;
  *((_DWORD *)this + 2) = v5;
  *((_DWORD *)this + 4) = 0;
  return a2;
}

unsigned char *llvm::StringSaver::save(uint64_t **a1, const void *a2, size_t a3)
{
  unsigned int v5 = (unsigned char *)sub_1CB906F34(*a1, a3 + 1, 0);
  size_t v6 = v5;
  if (a3) {
    memcpy(v5, a2, a3);
  }
  v6[a3] = 0;
  return v6;
}

unsigned char *llvm::UniqueStringSaver::save(uint64_t a1, void *a2, size_t a3)
{
  *(void *)&long long v23 = a2;
  *((void *)&v23 + 1) = a3;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    unsigned int v9 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
    uint64_t v10 = 0;
    int v11 = v6 - 1;
    for (int i = 1; ; int i = v22 + 1)
    {
      int v22 = i;
      unsigned int v13 = v9 & v11;
      uint64_t v14 = v5 + 16 * (v9 & v11);
      uint64_t v15 = *(unsigned char **)v14;
      if (*(void *)v14 == -1)
      {
        if (a2 == (void *)-1) {
          return v15;
        }
      }
      else if (v15 == (unsigned char *)-2)
      {
        if (a2 == (void *)-2) {
          return v15;
        }
      }
      else if (a3 == *(void *)(v14 + 8) && (!a3 || !memcmp(a2, *(const void **)v14, a3)))
      {
        return v15;
      }
      if (v15 == (unsigned char *)-1) {
        break;
      }
      if (v10) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v15 == (unsigned char *)-2;
      }
      if (v21) {
        uint64_t v10 = v5 + 16 * v13;
      }
      unsigned int v9 = v22 + v13;
    }
    if (v10) {
      uint64_t v17 = v10;
    }
    else {
      uint64_t v17 = v5 + 16 * v13;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = sub_1CC18A5D0(v4, (uint64_t)&v23, (uint64_t)&v23, v17);
  *(_OWORD *)uint64_t v18 = v23;
  long long v19 = v23;
  int v20 = (unsigned char *)sub_1CB906F34(*(uint64_t **)a1, *((void *)&v23 + 1) + 1, 0);
  uint64_t v15 = v20;
  if (*((void *)&v19 + 1)) {
    memcpy(v20, (const void *)v19, *((size_t *)&v19 + 1));
  }
  v15[*((void *)&v19 + 1)] = 0;
  *(void *)uint64_t v18 = v15;
  *(void *)(v18 + 8) = *((void *)&v19 + 1);
  return v15;
}

unint64_t llvm::StringRef::find_insensitive(llvm::StringRef *this, int a2, unint64_t a3)
{
  if ((a2 - 65) >= 0x1A) {
    unsigned __int8 v4 = a2;
  }
  else {
    unsigned __int8 v4 = a2 + 32;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 >= a3) {
    unint64_t result = a3;
  }
  else {
    unint64_t result = *((void *)this + 1);
  }
  if (v5 == result) {
    return -1;
  }
  uint64_t v7 = *(void *)this;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(v7 + result);
    if ((v8 - 65) < 0x1A) {
      LOBYTE(v8) = v8 + 32;
    }
    if (v8 == v4) {
      break;
    }
    if (v5 == ++result) {
      return -1;
    }
  }
  return result;
}

uint64_t sub_1CD0AEC24(int a1)
{
  if ((a1 - 65) >= 0x1A) {
    return (char)a1;
  }
  else {
    return (char)(a1 + 32);
  }
}

uint64_t llvm::StringRef::compare_numeric(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[1];
  if (a3 >= v5) {
    unint64_t v6 = a1[1];
  }
  else {
    unint64_t v6 = a3;
  }
  if (v6)
  {
    uint64_t v7 = a2;
    unint64_t v8 = 0;
    unint64_t v9 = v6 + 1;
    uint64_t v10 = *a1;
    uint64_t v11 = -(uint64_t)v6;
    uint64_t v12 = a2 + 1;
    uint64_t v13 = *a1 + 1;
    do
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v8);
      unsigned int v15 = *(unsigned __int8 *)(v7 + v8);
      if (v14 - 48 > 9 || v15 - 48 > 9)
      {
        unint64_t v17 = v8;
        if (v14 != v15)
        {
          if (v14 < v15) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = v13;
        uint64_t v20 = v12;
        do
        {
          if (!(v11 + v8 + v18))
          {
            unint64_t v17 = v6;
            unint64_t v27 = v9;
            goto LABEL_33;
          }
          unint64_t v21 = v8 + v18 + 1;
          int v22 = v21 < v5 && *(unsigned __int8 *)(v19 + v8) - 48 < 0xA;
          if (v21 >= a3)
          {
            int v25 = 5;
            unsigned int v24 = 1;
          }
          else
          {
            unsigned int v23 = (*(unsigned char *)(v20 + v8) - 48);
            v22 ^= v23 < 0xA;
            if (v23 < 0xA) {
              unsigned int v24 = -1;
            }
            else {
              unsigned int v24 = 1;
            }
            int v25 = 0;
          }
          if (v22) {
            uint64_t v3 = v24;
          }
          else {
            uint64_t v3 = v3;
          }
          if (v22) {
            int v26 = 1;
          }
          else {
            int v26 = v25;
          }
          ++v18;
          ++v20;
          ++v19;
        }
        while (!v26);
        if (v26 != 5) {
          return v3;
        }
        unint64_t v27 = v8 + v18;
        unint64_t v17 = v27 - 1;
LABEL_33:
        if (v27 != v8)
        {
          uint64_t v28 = v10;
          uint64_t v29 = v7;
          unint64_t v33 = v6;
          int v30 = memcmp((const void *)(v10 + v8), (const void *)(v7 + v8), v27 - v8);
          unint64_t v6 = v33;
          uint64_t v7 = v29;
          uint64_t v10 = v28;
          if (v30) {
            return (v30 >> 31) | 1u;
          }
        }
      }
      unint64_t v8 = v17 + 1;
    }
    while (v17 + 1 != v6);
  }
  if (v5 < a3) {
    unsigned int v31 = -1;
  }
  else {
    unsigned int v31 = 1;
  }
  if (v5 == a3) {
    return 0;
  }
  else {
    return v31;
  }
}

uint64_t sub_1CD0AEE00(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, int a5, unsigned int a6)
{
  *(void *)&v28[252] = *MEMORY[0x1E4F143B8];
  if (a4 + 1 >= 0x41) {
    operator new[]();
  }
  if (!a4)
  {
    char v11 = 1;
    if (a2) {
      goto LABEL_7;
    }
    return *(unsigned int *)&v28[4 * a4 - 4];
  }
  unsigned int v8 = 2;
  uint64_t v9 = 1;
  do
  {
    *(_DWORD *)&v28[4 * v9 - 4] = v8 - 1;
    uint64_t v9 = v8;
  }
  while (a4 >= v8++);
  char v11 = 0;
  if (!a2) {
    return *(unsigned int *)&v28[4 * a4 - 4];
  }
LABEL_7:
  uint64_t v12 = 1;
  while (1)
  {
    int v27 = v12;
    if (v11)
    {
      unsigned int v13 = v12;
    }
    else
    {
      unsigned int v14 = a3;
      unsigned int v15 = (unsigned int *)v28;
      unint64_t v16 = a4;
      unsigned int v17 = v12;
      unsigned int v18 = v12 - 1;
      unsigned int v13 = v12;
      do
      {
        unsigned int v19 = *v15;
        int v20 = *v14++;
        BOOL v21 = *(unsigned __int8 *)(a1 + v12 - 1) == v20;
        if (a5)
        {
          if (!v21) {
            ++v18;
          }
          if (v19 >= v17) {
            int v22 = v15 - 1;
          }
          else {
            int v22 = v15;
          }
          unsigned int v23 = *v22;
          if (v23 + 1 < v18) {
            unsigned int v18 = v23 + 1;
          }
        }
        else if (!v21)
        {
          unsigned int v24 = v15 - 1;
          if (v19 < v17) {
            unsigned int v24 = v15;
          }
          unsigned int v18 = *v24 + 1;
        }
        *v15++ = v18;
        if (v18 < v13) {
          unsigned int v13 = v18;
        }
        unsigned int v17 = v18;
        unsigned int v18 = v19;
        --v16;
      }
      while (v16);
    }
    if (a6 && v13 > a6) {
      break;
    }
    if (++v12 > a2) {
      return *(unsigned int *)&v28[4 * a4 - 4];
    }
  }
  return a6 + 1;
}

uint64_t llvm::StringRef::find(uint64_t *a1, char *a2, size_t a3, unint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  size_t v6 = v5 - a4;
  if (v5 < a4) {
    return -1;
  }
  unint64_t v7 = a4;
  if (!a3) {
    return v7;
  }
  if (v6 < a3) {
    return -1;
  }
  uint64_t v10 = *a1;
  char v11 = (unsigned __int8 *)(*a1 + a4);
  size_t v12 = a3 - 1;
  if (a3 == 1)
  {
    unsigned int v13 = memchr((void *)(*a1 + a4), *a2, v6);
    if (v13) {
      return (uint64_t)v13 - v10;
    }
    else {
      return -1;
    }
  }
  unint64_t v14 = (unint64_t)&v11[v6 - a3 + 1];
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      uint64_t result = -1;
      if (v10 + v7 >= v14) {
        return result;
      }
    }
    return v7;
  }
  uint64_t v15 = 0;
  int8x16_t v20 = vdupq_n_s8(a3);
  int8x16_t v21 = v20;
  v19[12] = v20;
  v19[13] = v20;
  v19[10] = v20;
  v19[11] = v20;
  v19[8] = v20;
  v19[9] = v20;
  v19[6] = v20;
  v19[7] = v20;
  uint64_t v19[4] = v20;
  v19[5] = v20;
  v19[2] = v20;
  v19[3] = v20;
  size_t v16 = a3 - 1;
  v19[0] = v20;
  v19[1] = v20;
  do
    *((unsigned char *)v19 + a2[v15++]) = v16--;
  while (v12 != v15);
  int v17 = a2[v12];
  while (1)
  {
    uint64_t v18 = v11[v12];
    if (v18 == v17 && !memcmp(v11, a2, v12)) {
      break;
    }
    v11 += *((unsigned __int8 *)v19 + v18);
    if ((unint64_t)v11 >= v14) {
      return -1;
    }
  }
  return (uint64_t)&v11[-v10];
}

unint64_t llvm::StringRef::rfind_insensitive(llvm::StringRef *this, int a2, unint64_t a3)
{
  if (*((void *)this + 1) >= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = *((void *)this + 1);
  }
  unsigned __int8 v4 = a2 + 32;
  if ((a2 - 65) >= 0x1A) {
    unsigned __int8 v4 = a2;
  }
  while (v3)
  {
    unint64_t v5 = v3 - 1;
    int v6 = *(unsigned __int8 *)(*(void *)this + v3 - 1);
    if ((v6 - 65) < 0x1A) {
      LOBYTE(v6) = v6 + 32;
    }
    BOOL v7 = v6 == v4;
    unint64_t v3 = v5;
    if (v7) {
      return v5;
    }
  }
  return -1;
}

uint64_t llvm::StringRef::rfind(uint64_t *a1, const void *a2, size_t a3)
{
  size_t v3 = a1[1];
  size_t v4 = v3 - a3;
  if (v3 < a3) {
    return -1;
  }
  size_t v5 = v4 + 1;
  if (v4 == -1) {
    return -1;
  }
  uint64_t v8 = *a1;
  while (1)
  {
    --v5;
    size_t v9 = v3 >= v4 ? v4 : v3;
    if (a3 <= v3 - v9)
    {
      if (!a3) {
        return v5;
      }
      if (!memcmp((const void *)(v8 + v9), a2, a3)) {
        break;
      }
    }
    if (--v4 == -1) {
      return -1;
    }
  }
  return v4;
}

uint64_t llvm::StringRef::rfind_insensitive(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = v3 - a3;
  if (v3 < a3 || v4 == -1) {
    return -1;
  }
  uint64_t v8 = *a1;
  do
  {
    if (v3 >= v4) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v3;
    }
    uint64_t v10 = (unsigned __int8 *)(v8 + v9);
    char v11 = (unsigned __int8 *)(v3 - v9);
    if ((unint64_t)v11 >= a3) {
      size_t v12 = (unsigned __int8 *)a3;
    }
    else {
      size_t v12 = v11;
    }
    v13[0] = v10;
    v13[1] = v12;
    if (a3 <= (unint64_t)v11 && !llvm::StringRef::compare_insensitive(v13, a2, a3)) {
      break;
    }
    --v4;
  }
  while (v4 != -1);
  return v4;
}

uint64_t llvm::StringRef::find_first_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t llvm::StringRef::find_first_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t llvm::StringRef::find_last_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if (v8) {
      return v6;
    }
  }
  return -1;
}

uint64_t llvm::StringRef::find_last_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }
  return -1;
}

_OWORD *llvm::StringRef::split(_OWORD *result, uint64_t a2, char *a3, size_t a4, int a5, int a6)
{
  long long v19 = *result;
  if (a5)
  {
    int v8 = a5;
    unint64_t v11 = *((void *)&v19 + 1);
    do
    {
      uint64_t result = (_OWORD *)llvm::StringRef::find((uint64_t *)&v19, a3, a4, 0);
      if (result == (_OWORD *)-1) {
        break;
      }
      uint64_t v12 = v19;
      if (result || a6)
      {
        if (v11 >= (unint64_t)result) {
          unsigned int v13 = result;
        }
        else {
          unsigned int v13 = (_OWORD *)v11;
        }
        unint64_t v14 = *(unsigned int *)(a2 + 8);
        if (v14 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v15 = (void *)(*(void *)a2 + 16 * v14);
        void *v15 = v19;
        v15[1] = v13;
        ++*(_DWORD *)(a2 + 8);
      }
      unint64_t v16 = (unint64_t)result + a4;
      if (v11 < (unint64_t)result + a4) {
        unint64_t v16 = v11;
      }
      v11 -= v16;
      *(void *)&long long v19 = v12 + v16;
      *((void *)&v19 + 1) = v11;
      --v8;
    }
    while (v8);
  }
  else
  {
    unint64_t v11 = *((void *)&v19 + 1);
  }
  if ((a6 & 1) != 0 || v11)
  {
    unsigned int v17 = *(_DWORD *)(a2 + 8);
    if (v17 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v18 = (void *)(*(void *)a2 + 16 * v17);
    *uint64_t v18 = v19;
    v18[1] = v11;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

char *llvm::StringRef::split(char *result, uint64_t a2, int __c, int a4, int a5)
{
  unint64_t v7 = *(char **)result;
  size_t v8 = *((void *)result + 1);
  if (a4 && v8)
  {
    int v10 = a4 - 1;
    while (1)
    {
      uint64_t result = (char *)memchr(v7, __c, v8);
      if (!result) {
        break;
      }
      size_t v11 = result - v7;
      if (result - v7 == -1) {
        break;
      }
      if (result != v7 || a5)
      {
        if (v8 >= v11) {
          size_t v12 = result - v7;
        }
        else {
          size_t v12 = v8;
        }
        unint64_t v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v14 = (void *)(*(void *)a2 + 16 * v13);
        *unint64_t v14 = v7;
        v14[1] = v12;
        ++*(_DWORD *)(a2 + 8);
      }
      if (v8 >= v11 + 1) {
        size_t v15 = v11 + 1;
      }
      else {
        size_t v15 = v8;
      }
      v7 += v15;
      v8 -= v15;
      if (v10)
      {
        --v10;
        if (v8) {
          continue;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    if ((a5 & 1) == 0 && !v8) {
      return result;
    }
  }
  unsigned int v16 = *(_DWORD *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v17 = (void *)(*(void *)a2 + 16 * v16);
  void *v17 = v7;
  v17[1] = v8;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::consumeUnsignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  if (!a2) {
    LODWORD(a2) = sub_1CD0AF898((uint64_t)this);
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6) {
    return 1;
  }
  unint64_t v7 = 0;
  size_t v8 = *(unsigned __int8 **)this;
  *a3 = 0;
  uint64_t v9 = v6;
  do
  {
    int v10 = *v8;
    if ((v10 - 48) >= 0xA)
    {
      if ((v10 - 97) >= 0x1A)
      {
        if ((v10 - 65) > 0x19) {
          break;
        }
        int v11 = -55;
      }
      else
      {
        int v11 = -87;
      }
    }
    else
    {
      int v11 = -48;
    }
    unsigned int v12 = v11 + v10;
    if (v12 >= a2) {
      break;
    }
    unint64_t v13 = v7 * a2 + v12;
    *a3 = v13;
    if (v13 / a2 < v7) {
      return 1;
    }
    ++v8;
    unint64_t v7 = v13;
    --v9;
  }
  while (v9);
  if (v6 == v9) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)this = v8;
  *((void *)this + 1) = v9;
  return result;
}

uint64_t sub_1CD0AF898(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 < 2) {
    return 10;
  }
  unint64_t v3 = *(_WORD **)a1;
  if (**(_WORD **)a1 == 30768 || *v3 == 22576)
  {
    unsigned int v4 = v3 + 1;
    uint64_t v2 = 16;
LABEL_14:
    uint64_t v6 = -2;
    goto LABEL_15;
  }
  if (*v3 == 25136 || *v3 == 16944)
  {
    unsigned int v4 = v3 + 1;
    uint64_t v2 = 2;
    goto LABEL_14;
  }
  if (*v3 == 28464)
  {
    unsigned int v4 = v3 + 1;
    uint64_t v2 = 8;
    goto LABEL_14;
  }
  if (*(unsigned char *)v3 == 48)
  {
    int v5 = *((unsigned __int8 *)v3 + 1);
    unsigned int v4 = (_WORD *)((char *)v3 + 1);
    if ((v5 - 48) <= 9)
    {
      uint64_t v2 = 8;
      uint64_t v6 = -1;
LABEL_15:
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v1 + v6;
      return v2;
    }
  }
  return 10;
}

uint64_t llvm::consumeSignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = *((void *)this + 1);
  if (v6 && **(unsigned char **)this == 45)
  {
    *(void *)&long long v17 = *(void *)this + 1;
    *((void *)&v17 + 1) = v6 - 1;
    unint64_t v18 = 0;
    LODWORD(result) = llvm::consumeUnsignedInteger((llvm *)&v17, a2, &v18, a4);
    unint64_t v16 = v18;
    if (v18 > 0x8000000000000000) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v17;
      *a3 = -(uint64_t)v16;
    }
    return result;
  }
  if (!a2)
  {
    LODWORD(a2) = sub_1CD0AF898((uint64_t)this);
    uint64_t v6 = *((void *)this + 1);
  }
  if (!v6) {
    return 1;
  }
  unint64_t v7 = 0;
  size_t v8 = *(unsigned __int8 **)this;
  uint64_t v9 = (unsigned __int8 *)(*(void *)this + v6);
  uint64_t v10 = v6;
  while (1)
  {
    int v11 = *v8;
    if ((v11 - 48) < 0xA)
    {
      int v12 = -48;
      goto LABEL_8;
    }
    if ((v11 - 97) < 0x1A)
    {
      int v12 = -87;
      goto LABEL_8;
    }
    if ((v11 - 65) > 0x19) {
      break;
    }
    int v12 = -55;
LABEL_8:
    unsigned int v13 = v12 + v11;
    if (v13 >= a2) {
      break;
    }
    unint64_t v14 = v7 * a2 + v13;
    if (v14 / a2 < v7) {
      return 1;
    }
    ++v8;
    unint64_t v7 = v14;
    if (!--v10) {
      goto LABEL_11;
    }
  }
  unint64_t v14 = v7;
  uint64_t v9 = v8;
LABEL_11:
  if (v6 == v10) {
    return 1;
  }
  *(void *)this = v9;
  *((void *)this + 1) = v10;
  if ((v14 & 0x8000000000000000) != 0) {
    return 1;
  }
  uint64_t result = 0;
  *a3 = v14;
  return result;
}

uint64_t llvm::getAsUnsignedInteger(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unint64_t *a4)
{
  size_t v15 = a1;
  uint64_t v16 = a2;
  if (!a3)
  {
    a3 = sub_1CD0AF898((uint64_t)&v15);
    a2 = v16;
  }
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v15;
    *a4 = 0;
    uint64_t v7 = a2;
    while (1)
    {
      int v8 = *v6;
      if ((v8 - 48) >= 0xA)
      {
        if ((v8 - 97) >= 0x1A)
        {
          if ((v8 - 65) > 0x19)
          {
LABEL_10:
            BOOL v12 = a2 == v7;
            BOOL v13 = v7 != 0;
            return v13 | v12;
          }
          int v9 = -55;
        }
        else
        {
          int v9 = -87;
        }
      }
      else
      {
        int v9 = -48;
      }
      unsigned int v10 = v9 + v8;
      if (v10 >= a3) {
        goto LABEL_10;
      }
      unint64_t v11 = v5 * a3 + v10;
      *a4 = v11;
      if (v11 / a3 < v5) {
        break;
      }
      ++v6;
      unint64_t v5 = v11;
      if (!--v7) {
        goto LABEL_10;
      }
    }
    BOOL v13 = 1;
  }
  else
  {
    BOOL v13 = 0;
  }
  BOOL v12 = 1;
  return v13 | v12;
}

uint64_t llvm::getAsSignedInteger(uint64_t a1, uint64_t a2, llvm::StringRef *a3, unint64_t *a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  LODWORD(result) = llvm::consumeSignedInteger((llvm *)&v5, a3, a4, a4);
  if (v6) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t llvm::StringRef::getAsInteger(llvm::StringRef *this, unsigned int a2, llvm::APInt *a3)
{
  unsigned int v4 = a2;
  long long v41 = *(_OWORD *)this;
  if (!a2) {
    unsigned int v4 = sub_1CD0AF898((uint64_t)&v41);
  }
  uint64_t v5 = *((void *)&v41 + 1);
  if (!*((void *)&v41 + 1)) {
    return 1;
  }
  uint64_t v6 = (unsigned char *)v41;
  do
  {
    if (*v6 != 48)
    {
      unsigned int v8 = 0;
      do
      {
        unsigned int v9 = v8;
        unsigned int v10 = 1 << v8++;
      }
      while (v10 < v4);
      unsigned int v11 = v9 * v5;
      unsigned int v12 = *((_DWORD *)a3 + 2);
      if (v9 * v5 >= v12)
      {
        if (v11 > v12)
        {
          if (v11 > 0x40) {
            operator new[]();
          }
          unint64_t v13 = *(void *)a3 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v11);
          if (v12 >= 0x41 && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(void *)a3 = v13;
          *((_DWORD *)a3 + 2) = v11;
          unsigned int v12 = v9 * v5;
        }
      }
      else
      {
        unsigned int v11 = *((_DWORD *)a3 + 2);
      }
      int v40 = 1;
      uint64_t v39 = 0;
      if (v10 == v4)
      {
        unsigned int v11 = 1;
      }
      else
      {
        if (v11 > 0x40) {
          operator new[]();
        }
        if (v11) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
        }
        else {
          LODWORD(v14) = 0;
        }
        uint64_t v39 = v14 & v4;
        int v40 = v11;
      }
      if (v12 > 0x40)
      {
        **(void **)a3 = 0;
        bzero((void *)(*(void *)a3 + 8), ((((unint64_t)v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(void *)a3 = 0;
      }
      while (1)
      {
        int v15 = *v6;
        if ((v15 - 48) >= 0xA)
        {
          if ((v15 - 97) >= 0x1A)
          {
            if ((v15 - 65) > 0x19) {
              return 1;
            }
            int v16 = -55;
          }
          else
          {
            int v16 = -87;
          }
        }
        else
        {
          int v16 = -48;
        }
        uint64_t v17 = (v16 + v15);
        if (v17 >= v4) {
          return 1;
        }
        if (v10 == v4)
        {
          unsigned int v18 = *((_DWORD *)a3 + 2);
          if (v18 > 0x40)
          {
            llvm::APInt::shlSlowCase(a3, v9);
            unsigned int v18 = *((_DWORD *)a3 + 2);
            if (v18 > 0x40)
            {
              **(void **)a3 |= v17;
              goto LABEL_62;
            }
            unint64_t v22 = *(void *)a3;
            unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
          }
          else
          {
            if (v9 == v18) {
              uint64_t v19 = 0;
            }
            else {
              uint64_t v19 = *(void *)a3 << v9;
            }
            unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
            if (v18) {
              unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
            }
            else {
              unint64_t v21 = 0;
            }
            unint64_t v22 = v21 & v19;
          }
          unint64_t v23 = v22 | v17;
          if (v18) {
            unint64_t v24 = v20;
          }
          else {
            unint64_t v24 = 0;
          }
          unint64_t v25 = v24 & v23;
        }
        else
        {
          llvm::APInt::operator*((uint64_t)a3, &v39, (uint64_t)&v42);
          if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
            MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
          }
          *(void *)a3 = v42;
          unsigned int v26 = v43;
          *((_DWORD *)a3 + 2) = v43;
          unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
          if (!v11) {
            unint64_t v27 = 0;
          }
          uint64_t v28 = (uint64_t *)(v27 & v17);
          if (v26 >= 0x41)
          {
            uint64_t v30 = 0;
            unsigned int v31 = *(unint64_t **)a3;
            unint64_t v32 = ((unint64_t)v26 + 63) >> 6;
            unint64_t v33 = v28;
            unint64_t v34 = v32;
            do
            {
              uint64_t v35 = *v33++;
              unint64_t v36 = v35 + *v31;
              BOOL v37 = v36 + 1 <= *v31;
              if (v30)
              {
                ++v36;
                uint64_t v30 = v37;
              }
              else
              {
                uint64_t v30 = v36 < *v31;
              }
              *v31++ = v36;
              --v34;
            }
            while (v34);
            *(void *)(*(void *)a3 + 8 * (v32 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
            goto LABEL_62;
          }
          if (v26) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
          }
          else {
            unint64_t v29 = 0;
          }
          unint64_t v25 = v29 & ((unint64_t)v28 + *(void *)a3);
        }
        *(void *)a3 = v25;
LABEL_62:
        ++v6;
        if (!--v5) {
          return 0;
        }
      }
    }
    ++v6;
    --v5;
  }
  while (v5);
  if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
    MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
  }
  uint64_t v7 = 0;
  *(void *)a3 = 0;
  *((_DWORD *)a3 + 2) = 64;
  return v7;
}

uint64_t llvm::StringRef::getAsDouble(llvm::StringRef *this, double *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  LODWORD(v11) = 64;
  unsigned int v10 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v15, &v10);
  unsigned int v11 = v15;
  uint64_t v12 = v16;
  int v13 = v17;
  char v14 = v18 & 0xF;
  llvm::APFloat::convertFromString((uint64_t)&v10, *(unsigned __int8 **)this, *((void *)this + 1), 1, (llvm *)&v15);
  if ((v16 & 1) == 0)
  {
    if (v15)
    {
      uint64_t result = 1;
      if ((v15 & 0x10) == 0 || !a3) {
        goto LABEL_8;
      }
    }
LABEL_7:
    double v7 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v10);
    uint64_t result = 0;
    *a2 = v7;
    goto LABEL_8;
  }
  if (!v15) {
    goto LABEL_7;
  }
  unsigned int v9 = v15;
  sub_1CD4515D0(&v9);
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t result = 1;
LABEL_8:
  if (v11 == (void *)&unk_1CFB2E344)
  {
    uint64_t v8 = result;
    sub_1CB845718(&v12);
    return v8;
  }
  if ((*((_DWORD *)v11 + 2) - 64) <= 0xFFFFFF7F && v12)
  {
    uint64_t v8 = result;
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
    return v8;
  }
  return result;
}

unint64_t llvm::hash_value(void *a1, uint64_t a2)
{
  return sub_1CD0B03C8(a1, (uint64_t)a1 + a2);
}

unint64_t llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(void *a1, uint64_t a2)
{
  return sub_1CD0B03C8(a1, (uint64_t)a1 + a2);
}

void *sub_1CD0B031C(void *result, char *a2, uint64_t (*a3)(void), char *a4, uint64_t a5, unint64_t a6)
{
  if (a6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned int v10 = result;
  if (a6 > 0x16)
  {
    uint64_t v11 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17) {
      uint64_t v11 = a6 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t result = operator new(v11 + 1);
    v10[1] = a6;
    void v10[2] = v12 | 0x8000000000000000;
    *unsigned int v10 = result;
    unsigned int v10 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a6;
  }
  while (a2 != a4)
  {
    unsigned int v13 = *a2++;
    uint64_t result = (void *)a3(v13);
    *(unsigned char *)unsigned int v10 = (_BYTE)result;
    unsigned int v10 = (void *)((char *)v10 + 1);
  }
  *(unsigned char *)unsigned int v10 = 0;
  return result;
}

unint64_t sub_1CD0B03C8(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v70 = a1;
    int v66 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v3 = &unk_1EBCBE000;
    int v67 = v66;
    uint64_t v2 = a2;
    a1 = v70;
    if (v67)
    {
      unint64_t v68 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v68 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v68;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v3 = (void *)&unk_1EBCBE000;
      uint64_t v2 = a2;
      a1 = v70;
    }
  }
  unint64_t v4 = v3[176];
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v16 = a1[4];
    uint64_t v15 = a1[5];
    unint64_t v17 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v18 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v19 = *a1 - 0x6D8ED9027DD26057 * v4;
    unint64_t v20 = a1;
    unint64_t v23 = a1 + 2;
    uint64_t v21 = a1[2];
    uint64_t v22 = v23[1];
    uint64_t v24 = v19 + v11 + v21;
    unint64_t v25 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v26 = __ROR8__(v18, 33);
    unint64_t v27 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v25;
    uint64_t v28 = __ROR8__(v24, 44) + v19 + __ROR8__(v27 + v9 + v19 + v22, 21);
    unint64_t v29 = 0xB492B66FBE98F273 * v26;
    uint64_t v30 = v24 + v22;
    uint64_t v31 = v25 + v16 - 0x4B6D499041670D8DLL * v26;
    uint64_t v32 = __ROR8__(v15 + v12 + v31, 44) + v31 + __ROR8__(v17 + v21 + v13 + v31, 21);
    uint64_t v33 = v15 + v12 + v31 + v13;
    unint64_t v34 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v35 = v27;
    }
    else
    {
      uint64_t v52 = v20 + 15;
      do
      {
        uint64_t v53 = *(v52 - 6);
        uint64_t v54 = __ROR8__(v17 + v29 + v30 + v53, 37);
        uint64_t v56 = *(v52 - 2);
        uint64_t v55 = *(v52 - 1);
        unint64_t v17 = v56 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v28 + v17 + v55, 42);
        uint64_t v57 = v33 + v27;
        uint64_t v58 = *(v52 - 7) - 0x4B6D499041670D8DLL * v28;
        uint64_t v59 = *(v52 - 4);
        uint64_t v60 = *(v52 - 5);
        uint64_t v61 = v58 + v53 + v60;
        unint64_t v35 = (0xB492B66FBE98F273 * v54) ^ v32;
        unint64_t v29 = 0xB492B66FBE98F273 * __ROR8__(v57, 33);
        uint64_t v28 = __ROR8__(v61, 44) + v58 + __ROR8__(v35 + v33 + v58 + v59, 21);
        uint64_t v30 = v61 + v59;
        unint64_t v62 = v29 + v32 + *(v52 - 3);
        uint64_t v63 = *v52;
        v52 += 8;
        uint64_t v64 = __ROR8__(v17 + v60 + v62 + v63, 21);
        unint64_t v65 = v56 + v55 + v62;
        uint64_t v32 = __ROR8__(v65, 44) + v62 + v64;
        uint64_t v33 = v65 + v63;
        unint64_t v27 = v35;
        v34 -= 64;
      }
      while (v34);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v36 = *(void *)(v2 - 56);
      uint64_t v37 = *(void *)(v2 - 16);
      uint64_t v38 = *(void *)(v2 - 8);
      uint64_t v39 = v35 + v33;
      unint64_t v40 = (0xB492B66FBE98F273 * __ROR8__(v17 + v30 + v29 + v36, 37)) ^ v32;
      uint64_t v41 = *(void *)(v2 - 24);
      unint64_t v17 = v41 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v28 + v37, 42);
      uint64_t v42 = v40 + v33;
      uint64_t v43 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v28;
      uint64_t v44 = *(void *)(v2 - 48);
      uint64_t v45 = *(void *)(v2 - 40);
      uint64_t v46 = v43 + v36 + v44;
      unint64_t v29 = 0xB492B66FBE98F273 * __ROR8__(v39, 33);
      uint64_t v28 = __ROR8__(v46, 44) + v43 + __ROR8__(v42 + v43 + v45, 21);
      uint64_t v30 = v46 + v45;
      unint64_t v47 = v29 + v32 + *(void *)(v2 - 32);
      unint64_t v48 = v41 + v37 + v47;
      uint64_t v32 = __ROR8__(v48, 44) + v47 + __ROR8__(v17 + v44 + v47 + v38, 21);
      uint64_t v33 = v48 + v38;
      unint64_t v35 = v40;
    }
    unint64_t v49 = 0x9DDFEA08EB382D69
        * (v32 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v32)));
    uint64_t v50 = v29 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v49 ^ (v49 >> 47));
    unint64_t v51 = 0x9DDFEA08EB382D69
        * ((v35
          - 0x4B6D499041670D8DLL * (v17 ^ (v17 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v33 ^ ((0x9DDFEA08EB382D69 * (v30 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ v33)))) ^ ((0x9DDFEA08EB382D69 * (v33 ^ ((0x9DDFEA08EB382D69 * (v30 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ v33)))) >> 47))) ^ v50);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v50 ^ (v51 >> 47) ^ v51)) ^ ((0x9DDFEA08EB382D69 * (v50 ^ (v51 >> 47) ^ v51)) >> 47));
  }
  else
  {
    return sub_1CBAE06B8(a1, v5, v4);
  }
}

unint64_t llvm::SuffixTree::insertLeaf(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v13 = a4;
  *(void *)(a1 + 96) += 64;
  uint64_t v7 = *(void *)(a1 + 16);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 64 > *(void *)(a1 + 24) - v7)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 40) >> 7;
    if (v10 >= 0x1E) {
      LOBYTE(v10) = 30;
    }
    uint64_t v11 = 4096 << v10;
    unint64_t v8 = (unint64_t)operator new(4096 << v10, (std::align_val_t)8uLL);
    unsigned int v12 = *(_DWORD *)(a1 + 40);
    if (v12 >= *(_DWORD *)(a1 + 44)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 32) + 8 * v12) = v8;
    ++*(_DWORD *)(a1 + 40);
    *(void *)(a1 + 24) = v8 + v11;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 16) = v8 + 64;
  *(void *)unint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a1 + 216;
  *(_DWORD *)(v8 + 40) = -1;
  *(void *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 56) = 0;
  *((void *)sub_1CD848C24(a2, &v13) + 1) = v8;
  return v8;
}

void sub_1CD0B08C8(uint64_t a1, uint64_t a2)
{
}

llvm *llvm::CheckBitcodeOutputToConsole(llvm *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = (llvm *)(*(uint64_t (**)(llvm *, llvm::raw_ostream *))(*(void *)this + 48))(this, a2);
  unint64_t v3 = v2;
  if (v2)
  {
    unint64_t v4 = (llvm::raw_ostream *)llvm::errs(v2);
    unint64_t v5 = (void *)*((void *)v4 + 4);
    if (*((void *)v4 + 3) - (void)v5 > 0xCEuLL)
    {
      *((void *)v4 + 4) += 207;
    }
    else
    {
    }
  }
  return v3;
}

void llvm::TarWriter::create(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  __int16 v5 = 261;
  v4[0] = a1;
  v4[1] = a2;
  if (llvm::sys::fs::openFile((unsigned __int8 *)v4, &v6, 0, 2, 0, 438))
  {
    __int16 v5 = 1283;
    v4[0] = "cannot open ";
    v4[2] = a1;
    v4[3] = a2;
    operator new();
  }
  operator new();
}

uint64_t llvm::TarWriter::TarWriter(uint64_t a1, int a2, const void *a3, size_t a4)
{
  llvm::raw_fd_ostream::raw_fd_ostream(a1, a2, 1, 0, 0);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a4 >= 0x17)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *(void *)(a1 + 104) = a4;
    *(void *)(a1 + 112) = v9 | 0x8000000000000000;
    *(void *)(a1 + 96) = v7;
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 96);
    *(unsigned char *)(a1 + 119) = a4;
    if (!a4) {
      goto LABEL_9;
    }
  }
  memmove(v7, a3, a4);
LABEL_9:
  *((unsigned char *)v7 + a4) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0x800000000;
  return a1;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  llvm::raw_fd_ostream::raw_fd_ostream(a1, a2, 1, 0, 0);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a4 >= 0x17)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *(void *)(a1 + 104) = a4;
    *(void *)(a1 + 112) = v9 | 0x8000000000000000;
    *(void *)(a1 + 96) = v7;
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 96);
    *(unsigned char *)(a1 + 119) = a4;
    if (!a4) {
      goto LABEL_9;
    }
  }
  memmove(v7, a3, a4);
LABEL_9:
  *((unsigned char *)v7 + a4) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0x800000000;
  return a1;
}

void llvm::TarWriter::append(void *a1, const std::string::value_type *a2, std::string::size_type a3, const void *a4, size_t a5)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  char v10 = *((unsigned char *)a1 + 119);
  int v11 = v10;
  size_t v12 = v10 & 0x7F;
  if (v11 >= 0) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = a1[13];
  }
  uint64_t v14 = __src;
  sub_1CB907098((uint64_t)__src, v13 + 1);
  if (__src[23] < 0) {
    uint64_t v14 = *(unsigned char **)__src;
  }
  if (v13)
  {
    if (*((char *)a1 + 119) >= 0) {
      uint64_t v15 = a1 + 12;
    }
    else {
      uint64_t v15 = (const void *)a1[12];
    }
    memmove(v14, v15, v13);
  }
  *(_WORD *)&v14[v13] = 47;
  std::string::__init(&v72, a2, a3);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v72;
  }
  else {
    uint64_t v16 = (std::string *)v72.__r_.__value_.__r.__words[0];
  }
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v72.__r_.__value_.__l.__size_;
  }
  unint64_t v18 = std::string::append((std::string *)__src, (const std::string::value_type *)v16, size);
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v61 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  uint64_t v62 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  if (v62 >= 0) {
    unint64_t v20 = (unsigned __int8 *)v61;
  }
  else {
    unint64_t v20 = (unsigned __int8 *)v61[0];
  }
  if (v62 >= 0) {
    size_t v21 = HIBYTE(v62) & 0x7F;
  }
  else {
    size_t v21 = (size_t)v61[1];
  }
  sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 15), v20, v21);
  if (v22)
  {
    if (v62 >= 0) {
      unint64_t v23 = v61;
    }
    else {
      unint64_t v23 = (void **)v61[0];
    }
    if (v62 >= 0) {
      unint64_t v24 = HIBYTE(v62) & 0x7F;
    }
    else {
      unint64_t v24 = (unint64_t)v61[1];
    }
    if (v24 >= 0x64)
    {
      uint64_t v30 = 138;
      if (v24 < 0x8A) {
        uint64_t v30 = v24;
      }
      uint64_t v31 = v30 + 1;
      do
      {
        unint64_t v32 = v31 - 1;
        if (v31 == 1) {
          goto LABEL_43;
        }
        int v33 = *((unsigned __int8 *)v23 + v31-- - 2);
      }
      while (v33 != 47);
      if (v24 - v32 > 0x63)
      {
LABEL_43:
        int v34 = v24 + 7;
        *(_WORD *)&__src[32] = 265;
        *(_DWORD *)__src = v24 + 7;
        llvm::Twine::str((llvm::Twine *)__src, &v72);
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v35 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        }
        else {
          int v35 = v72.__r_.__value_.__r.__words[1];
        }
        int v36 = v34 + v35;
        if ((*((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x80) != 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        *(_WORD *)&__src[32] = 265;
        *(_DWORD *)__src = v36;
        llvm::Twine::str((llvm::Twine *)__src, &v72);
        int v37 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        int v38 = v72.__r_.__value_.__r.__words[1];
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if ((v37 & 0x80u) == 0) {
          int v39 = v37;
        }
        else {
          int v39 = v38;
        }
        v66[0] = (v34 + v39);
        v66[2] = " ";
        __int16 v67 = 777;
        v68[0] = v66;
        v68[2] = "path";
        v68[3] = 4;
        __int16 v69 = 1282;
        v70[0] = v68;
        v70[1] = 4;
        v70[2] = "=";
        __int16 v71 = 770;
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
        v72.__r_.__value_.__l.__size_ = 4;
        v72.__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
        unint64_t v73 = v24;
        __int16 v74 = 1282;
        *(void *)__src = &v72;
        *(void *)&__src[8] = 4;
        *(void *)&__src[16] = "\n";
        *(_WORD *)&__src[32] = 770;
        llvm::Twine::str((llvm::Twine *)__src, &__p);
        memset(__src, 0, sizeof(__src));
        qmemcpy(&__src[257], "ustar", 5);
        size_t v40 = v65 & 0x7F;
        if (v65 < 0) {
          size_t v40 = v64;
        }
        *(_WORD *)&__src[263] = 12336;
        snprintf(&__src[124], 0xCuLL, "%011zo", v40);
        int32x4_t v41 = 0uLL;
        uint64_t v42 = 0;
        qmemcpy(&__src[148], "        x", 9);
        int32x4_t v43 = 0uLL;
        int32x4_t v44 = 0uLL;
        int32x4_t v45 = 0uLL;
        do
        {
          uint8x16_t v46 = *(uint8x16_t *)&__src[v42];
          uint16x8_t v47 = vmovl_u8(*(uint8x8_t *)v46.i8);
          uint16x8_t v48 = vmovl_high_u8(v46);
          int32x4_t v45 = (int32x4_t)vaddw_high_u16((uint32x4_t)v45, v48);
          int32x4_t v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v48.i8);
          int32x4_t v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v47);
          int32x4_t v41 = (int32x4_t)vaddw_u16((uint32x4_t)v41, *(uint16x4_t *)v47.i8);
          v42 += 16;
        }
        while (v42 != 512);
        snprintf(&__src[148], 8uLL, "%06o", vaddvq_s32(vaddq_s32(vaddq_s32(v41, v44), vaddq_s32(v43, v45))));
        unint64_t v49 = (void *)a1[4];
        if (a1[3] - (void)v49 > 0x1FFuLL)
        {
          memcpy(v49, __src, 0x200uLL);
          a1[4] += 512;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a1, __src, 0x200uLL);
        }
        if (v65 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        if (v65 >= 0) {
          size_t v51 = v65 & 0x7F;
        }
        else {
          size_t v51 = v64;
        }
        uint64_t v52 = llvm::raw_ostream::write((llvm::raw_ostream *)a1, p_p, v51);
        uint64_t v53 = (*(uint64_t (**)(llvm::raw_ostream *))(*a1 + 80))(v52);
        llvm::raw_fd_ostream::seek((llvm::raw_fd_ostream *)a1, (v53 + a1[4] - a1[2] + 511) & 0xFFFFFFFFFFFFFE00);
        if (v65 < 0) {
          operator delete(__p);
        }
        uint64_t v28 = "";
        unint64_t v27 = (llvm::raw_ostream *)a1;
        size_t v25 = 0;
        uint64_t v26 = "";
        size_t v29 = 0;
        goto LABEL_69;
      }
      if (v24 >= v32 - 1) {
        size_t v25 = v32 - 1;
      }
      else {
        size_t v25 = v24;
      }
      if (v24 < v32) {
        unint64_t v32 = v24;
      }
      uint64_t v26 = (char *)v23 + v32;
      v24 -= v32;
    }
    else
    {
      size_t v25 = 0;
      uint64_t v26 = (char *)v23;
      unint64_t v23 = (void **)"";
    }
    unint64_t v27 = (llvm::raw_ostream *)a1;
    uint64_t v28 = (const char *)v23;
    size_t v29 = v24;
LABEL_69:
    sub_1CD0B1434(v27, v28, v25, v26, v29, a5);
    uint64_t v54 = (void *)a1[4];
    if (a5 <= a1[3] - (void)v54)
    {
      if (a5)
      {
        memcpy(v54, a4, a5);
        a1[4] += a5;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)a4, a5);
    }
    uint64_t v55 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    llvm::raw_fd_ostream::seek((llvm::raw_fd_ostream *)a1, (v55 + a1[4] - a1[2] + 511) & 0xFFFFFFFFFFFFFE00);
    uint64_t v56 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    uint64_t v57 = a1[2];
    uint64_t v58 = v56 + a1[4];
    uint64_t v59 = operator new(0x408uLL);
    bzero(v59, 0x401uLL);
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)v59, 0x400uLL);
    operator delete(v59);
    llvm::raw_fd_ostream::seek((llvm::raw_fd_ostream *)a1, v58 - v57);
    uint64_t v60 = (const char *)a1[2];
    if ((const char *)a1[4] != v60)
    {
      a1[4] = v60;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v60);
    }
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[0]);
  }
}

llvm::raw_ostream *sub_1CD0B1434(llvm::raw_ostream *a1, const void *a2, size_t a3, void *__src, size_t __n, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(__dst, 0, sizeof(__dst));
  *(_DWORD *)((char *)&__dst[16] + 1) = 1635021685;
  BYTE5(__dst[16]) = 114;
  *(_WORD *)((char *)&__dst[16] + 7) = 12336;
  memcpy(__dst, __src, __n);
  *(void *)((char *)&__dst[6] + 4) = 0x34363630303030;
  snprintf((char *)&__dst[7] + 12, 0xCuLL, "%011zo", a6);
  memcpy((char *)&__dst[21] + 9, a2, a3);
  int32x4_t v10 = 0uLL;
  uint64_t v11 = 0;
  *(void *)((char *)&__dst[9] + 4) = 0x2020202020202020;
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  do
  {
    uint8x16_t v15 = (uint8x16_t)__dst[v11];
    uint16x8_t v16 = vmovl_u8(*(uint8x8_t *)v15.i8);
    uint16x8_t v17 = vmovl_high_u8(v15);
    int32x4_t v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v17);
    int32x4_t v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v17.i8);
    int32x4_t v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v16);
    int32x4_t v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v16.i8);
    ++v11;
  }
  while (v11 != 32);
  snprintf((char *)&__dst[9] + 4, 8uLL, "%06o", vaddvq_s32(vaddq_s32(vaddq_s32(v10, v13), vaddq_s32(v12, v14))));
  unint64_t v18 = (void *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v18 <= 0x1FFuLL) {
    return llvm::raw_ostream::write(a1, (const char *)__dst, 0x200uLL);
  }
  uint64_t result = (llvm::raw_ostream *)memcpy(v18, __dst, 0x200uLL);
  *((void *)a1 + 4) += 512;
  return result;
}

uint64_t llvm::AMDGPU::getIsaVersion(_DWORD *a1, size_t a2)
{
  unint64_t v4 = &dword_1E68560C0;
  do
  {
    __int16 v5 = v4 - 8;
    if (a2 == *((void *)v4 - 3) && (!a2 || !memcmp(a1, *((const void **)v4 - 4), a2)))
    {
      uint64_t v6 = 0;
      uint64_t v8 = 6;
      switch(*v4)
      {
        case 0:
          goto LABEL_6;
        case 32:
          return v6 | v8;
        case 33:
          uint64_t v6 = 0;
          goto LABEL_17;
        case 34:
          uint64_t v6 = 0;
LABEL_17:
          uint64_t v8 = 6;
          return v6 | v8;
        case 40:
          uint64_t v6 = 0;
          goto LABEL_24;
        case 41:
          uint64_t v6 = 0;
          goto LABEL_24;
        case 42:
          uint64_t v6 = 0;
          goto LABEL_24;
        case 43:
          uint64_t v6 = 0;
          goto LABEL_24;
        case 44:
          uint64_t v6 = 0;
          goto LABEL_24;
        case 45:
          uint64_t v6 = 0;
LABEL_24:
          uint64_t v8 = 7;
          return v6 | v8;
        case 50:
          uint64_t v6 = 0;
          goto LABEL_30;
        case 51:
          uint64_t v6 = 0;
          goto LABEL_30;
        case 52:
          uint64_t v6 = 0;
          goto LABEL_30;
        case 53:
          uint64_t v6 = 0;
          goto LABEL_30;
        case 54:
          uint64_t v6 = 0x100000000;
LABEL_30:
          uint64_t v8 = 8;
          return v6 | v8;
        case 60:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 61:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 62:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 63:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 64:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 65:
          uint64_t v6 = 0;
          uint64_t v8 = 9;
          return v6 | v8;
        case 66:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 67:
          uint64_t v6 = 0;
          goto LABEL_40;
        case 68:
          uint64_t v6 = 0x400000000;
LABEL_40:
          uint64_t v8 = 9;
          return v6 | v8;
        case 71:
          uint64_t v6 = 0x100000000;
          goto LABEL_55;
        case 72:
          uint64_t v6 = 0x100000000;
          goto LABEL_55;
        case 73:
          uint64_t v6 = 0x100000000;
          goto LABEL_55;
        case 74:
          uint64_t v6 = 0x100000000;
          goto LABEL_55;
        case 75:
          uint64_t v6 = 0x300000000;
          goto LABEL_55;
        case 76:
          uint64_t v6 = 0x300000000;
          goto LABEL_55;
        case 77:
          uint64_t v6 = 0x300000000;
          goto LABEL_55;
        case 78:
          uint64_t v6 = 0x300000000;
          goto LABEL_55;
        case 79:
          uint64_t v6 = 0x300000000;
          goto LABEL_55;
        case 80:
          uint64_t v6 = 0x300000000;
          goto LABEL_55;
        case 81:
          uint64_t v6 = 0x300000000;
LABEL_55:
          uint64_t v8 = 10;
          break;
        default:
          goto LABEL_11;
      }
      return v6 | v8;
    }
    v4 += 10;
  }
  while (v5 + 10 != (int *)&xmmword_1E68568C0);
LABEL_6:
  if (a2 == 7)
  {
    uint64_t v6 = 0;
    BOOL v7 = (*a1 ^ 0x656E6567 | *(_DWORD *)((char *)a1 + 3) ^ 0x63697265) == 0;
    uint64_t v8 = 6;
  }
  else
  {
    if (a2 != 11)
    {
LABEL_11:
      uint64_t v8 = 0;
      uint64_t v6 = 0;
      return v6 | v8;
    }
    uint64_t v6 = 0;
    BOOL v7 = (*(void *)a1 ^ 0x2D636972656E6567 | *(void *)((char *)a1 + 3) ^ 0x6173682D63697265) == 0;
    uint64_t v8 = 7;
  }
  if (!v7) {
    uint64_t v8 = 0;
  }
  return v6 | v8;
}

uint64_t llvm::RISCV::parseCPUKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 7:
      if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625) {
        goto LABEL_83;
      }
      uint64_t v2 = 0x100000000;
      break;
    case 10:
      if (*(void *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 12338)
      {
        uint64_t v2 = 0x100000007;
      }
      else if (*(void *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 12594)
      {
        uint64_t v2 = 0x100000008;
      }
      else if (*(void *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 13362)
      {
        uint64_t v2 = 0x100000009;
      }
      else if (*(void *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 12595)
      {
        uint64_t v2 = 0x10000000ALL;
      }
      else if (*(void *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 13363)
      {
        uint64_t v2 = 0x10000000BLL;
      }
      else if (*(void *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 13879)
      {
        uint64_t v2 = 0x10000000CLL;
      }
      else if (*(void *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 12594)
      {
        uint64_t v2 = 0x10000000DLL;
      }
      else if (*(void *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 12597)
      {
        uint64_t v2 = 0x10000000ELL;
      }
      else if (*(void *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 13365)
      {
        uint64_t v2 = 0x10000000FLL;
      }
      else if (*(void *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 13879)
      {
        uint64_t v2 = 0x100000010;
      }
      else if (*(void *)a1 == 0x752D657669666973 && *(_WORD *)(a1 + 8) == 13365)
      {
        uint64_t v2 = 0x100000011;
      }
      else
      {
        uint64_t v2 = 0x100000012;
        if (*(void *)a1 ^ 0x752D657669666973 | *(unsigned __int16 *)(a1 + 8) ^ 0x3437) {
          uint64_t v2 = 0;
        }
      }
      break;
    case 11:
      if (*(void *)a1 == 0x722D74656B636F72 && *(void *)(a1 + 3) == 0x323376722D74656BLL)
      {
        uint64_t v2 = 0x100000003;
      }
      else
      {
        if (*(void *)a1 != 0x722D74656B636F72 || *(void *)(a1 + 3) != 0x343676722D74656BLL) {
          goto LABEL_83;
        }
        uint64_t v2 = 0x100000004;
      }
      break;
    case 12:
      if (*(void *)a1 == 0x2D636972656E6567 && *(_DWORD *)(a1 + 8) == 842233458)
      {
        uint64_t v2 = 0x100000001;
      }
      else
      {
        if (*(void *)a1 != 0x2D636972656E6567 || *(_DWORD *)(a1 + 8) != 875984498) {
          goto LABEL_83;
        }
        uint64_t v2 = 0x100000002;
      }
      break;
    case 13:
      if (*(void *)a1 == 0x372D657669666973 && *(void *)(a1 + 5) == 0x323376722D372D65)
      {
        uint64_t v2 = 0x100000005;
      }
      else if (*(void *)a1 == 0x372D657669666973 && *(void *)(a1 + 5) == 0x343676722D372D65)
      {
        uint64_t v2 = 0x100000006;
      }
      else
      {
LABEL_83:
        uint64_t v2 = 0;
      }
      break;
    default:
      break;
  }
  if ((v2 & 0x300000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::RISCV::parseTuneCPUKind(const char *a1, uint64_t a2, int a3)
{
  unint64_t v3 = llvm::RISCV::resolveTuneCPUAlias(a1, a2, a3);
  uint64_t v4 = 0;
  switch(v5)
  {
    case 7:
      if (*(_DWORD *)v3 != 1635151465 || *(_DWORD *)(v3 + 3) != 1684630625) {
        goto LABEL_83;
      }
      uint64_t v4 = 0x100000000;
      break;
    case 10:
      if (*(void *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 12338)
      {
        uint64_t v4 = 0x100000007;
      }
      else if (*(void *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 12594)
      {
        uint64_t v4 = 0x100000008;
      }
      else if (*(void *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 13362)
      {
        uint64_t v4 = 0x100000009;
      }
      else if (*(void *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 12595)
      {
        uint64_t v4 = 0x10000000ALL;
      }
      else if (*(void *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 13363)
      {
        uint64_t v4 = 0x10000000BLL;
      }
      else if (*(void *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 13879)
      {
        uint64_t v4 = 0x10000000CLL;
      }
      else if (*(void *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 12594)
      {
        uint64_t v4 = 0x10000000DLL;
      }
      else if (*(void *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 12597)
      {
        uint64_t v4 = 0x10000000ELL;
      }
      else if (*(void *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 13365)
      {
        uint64_t v4 = 0x10000000FLL;
      }
      else if (*(void *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 13879)
      {
        uint64_t v4 = 0x100000010;
      }
      else if (*(void *)v3 == 0x752D657669666973 && *((_WORD *)v3 + 4) == 13365)
      {
        uint64_t v4 = 0x100000011;
      }
      else
      {
        uint64_t v4 = 0x100000012;
        if (*(void *)v3 ^ 0x752D657669666973 | *((unsigned __int16 *)v3 + 4) ^ 0x3437) {
          uint64_t v4 = 0;
        }
      }
      break;
    case 11:
      if (*(void *)v3 == 0x722D74656B636F72 && *(void *)(v3 + 3) == 0x323376722D74656BLL)
      {
        uint64_t v4 = 0x100000003;
      }
      else
      {
        if (*(void *)v3 != 0x722D74656B636F72 || *(void *)(v3 + 3) != 0x343676722D74656BLL) {
          goto LABEL_83;
        }
        uint64_t v4 = 0x100000004;
      }
      break;
    case 12:
      if (*(void *)v3 == 0x2D636972656E6567 && *((_DWORD *)v3 + 2) == 842233458)
      {
        uint64_t v4 = 0x100000001;
      }
      else
      {
        if (*(void *)v3 != 0x2D636972656E6567 || *((_DWORD *)v3 + 2) != 875984498) {
          goto LABEL_83;
        }
        uint64_t v4 = 0x100000002;
      }
      break;
    case 13:
      if (*(void *)v3 == 0x372D657669666973 && *(void *)(v3 + 5) == 0x323376722D372D65)
      {
        uint64_t v4 = 0x100000005;
      }
      else if (*(void *)v3 == 0x372D657669666973 && *(void *)(v3 + 5) == 0x343676722D372D65)
      {
        uint64_t v4 = 0x100000006;
      }
      else
      {
LABEL_83:
        uint64_t v4 = 0;
      }
      break;
    default:
      break;
  }
  if ((v4 & 0x300000000) != 0) {
    return v4;
  }
  else {
    return 0;
  }
}

BOOL llvm::RISCV::getCPUFeaturesExceptStdExt(unsigned int a1, const char ***a2)
{
  int v2 = *((_DWORD *)&off_1E6856CD0 + 10 * a1 + 5);
  if (v2)
  {
    uint64_t v5 = a2[1];
    unint64_t v4 = (unint64_t)a2[2];
    if ((v2 & 4) != 0)
    {
      if ((unint64_t)v5 < v4)
      {
        uint64_t v6 = "+64bit";
        goto LABEL_7;
      }
      int32x4_t v14 = *a2;
      uint64_t v15 = ((char *)v5 - (char *)*a2) >> 4;
      unint64_t v16 = v15 + 1;
      if (!((unint64_t)(v15 + 1) >> 60))
      {
        uint64_t v17 = v4 - (void)v14;
        if (v17 >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 60) {
            goto LABEL_39;
          }
          std::string::size_type v19 = (char *)operator new(16 * v18);
        }
        else
        {
          std::string::size_type v19 = 0;
        }
        unint64_t v20 = &v19[16 * v15];
        uint64_t v21 = &v19[16 * v18];
        *(void *)unint64_t v20 = "+64bit";
        *((void *)v20 + 1) = 6;
        BOOL v7 = (const char **)(v20 + 16);
        if (v5 == v14) {
          goto LABEL_34;
        }
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
          v20 -= 16;
          v5 -= 2;
        }
        while (v5 != v14);
LABEL_33:
        uint64_t v5 = *a2;
LABEL_34:
        *a2 = (const char **)v20;
        a2[1] = v7;
        a2[2] = (const char **)v21;
        if (v5) {
          operator delete(v5);
        }
        goto LABEL_36;
      }
    }
    else
    {
      if ((unint64_t)v5 < v4)
      {
        uint64_t v6 = "-64bit";
LABEL_7:
        int *v5 = v6;
        v5[1] = (const char *)6;
        BOOL v7 = v5 + 2;
LABEL_36:
        a2[1] = v7;
        return v2 != 0;
      }
      uint64_t v8 = *a2;
      uint64_t v9 = ((char *)v5 - (char *)*a2) >> 4;
      unint64_t v10 = v9 + 1;
      if (!((unint64_t)(v9 + 1) >> 60))
      {
        uint64_t v11 = v4 - (void)v8;
        if (v11 >> 3 > v10) {
          unint64_t v10 = v11 >> 3;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (!v12)
        {
          int32x4_t v13 = 0;
          goto LABEL_27;
        }
        if (!(v12 >> 60))
        {
          int32x4_t v13 = (char *)operator new(16 * v12);
LABEL_27:
          unint64_t v20 = &v13[16 * v9];
          uint64_t v21 = &v13[16 * v12];
          *(void *)unint64_t v20 = "-64bit";
          *((void *)v20 + 1) = 6;
          BOOL v7 = (const char **)(v20 + 16);
          if (v5 == v8) {
            goto LABEL_34;
          }
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
            v20 -= 16;
            v5 -= 2;
          }
          while (v5 != v8);
          goto LABEL_33;
        }
LABEL_39:
        sub_1CB833614();
      }
    }
    abort();
  }
  return v2 != 0;
}

void llvm::ThreadPool::wait(uint64_t a1, uint64_t a2)
{
  if (llvm::ThreadPool::isWorkerThread((llvm::ThreadPool *)a1))
  {
    llvm::ThreadPool::processTasks(a1, a2);
  }
  else
  {
    v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 248);
    v4.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 248));
    if (llvm::ThreadPool::workCompletedUnlocked(a1, a2)) {
      goto LABEL_8;
    }
    do
      std::condition_variable::wait((std::condition_variable *)(a1 + 360), &v4);
    while (!llvm::ThreadPool::workCompletedUnlocked(a1, a2));
    if (v4.__owns_) {
LABEL_8:
    }
      std::mutex::unlock(v4.__m_);
  }
}

BOOL llvm::ThreadPool::isWorkerThread(llvm::ThreadPool *this)
{
  int v2 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 24));
  pthread_t v3 = pthread_self();
  uint64_t v4 = *((void *)this + 1);
  if (*(void *)this == v4)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)this + 8;
    do
    {
      uint64_t v6 = *(_opaque_pthread_t **)(v5 - 8);
      BOOL v7 = v3 == v6;
      BOOL v8 = v3 == v6 || v5 == v4;
      v5 += 8;
    }
    while (!v8);
  }
  std::__shared_mutex_base::unlock_shared(v2);
  return v7;
}

void sub_1CD0B2458(char **a1)
{
  int v2 = *a1;
  if (v2)
  {
    for (int i = a1[1]; i != v2; i -= 8)
    {
      if (*((void *)i - 1)) {
        std::terminate();
      }
    }
    a1[1] = v2;
    operator delete(v2);
  }
}

void **sub_1CD0B24AC(void **a1)
{
  sub_1CD84A928(a1);
  int v2 = (void **)a1[1];
  pthread_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1CD0B2524()
{
}

uint64_t sub_1CD0B25D0(uint64_t *a1)
{
  return 0;
}

void *sub_1CD0B2618(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t llvm::getTimeTraceProfilerInstance(llvm *this)
{
  return *(void *)off_1EC7DFC00();
}

void llvm::timeTraceProfilerFinishThread(llvm *this)
{
  std::mutex::lock(&stru_1EA618998);
  if (!atomic_load_explicit(qword_1EA61DFE0, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EA61DFE0, (void *(*)(void))sub_1CD84C690, (void (*)(void *))sub_1CD84C6C4);
  }
  unint64_t v1 = (char **)qword_1EA61DFE0[0];
  int v2 = (void *)off_1EC7DFC00();
  pthread_t v3 = v2;
  uint64_t v5 = v1[1];
  unint64_t v4 = (unint64_t)v1[2];
  if ((unint64_t)v5 >= v4)
  {
    BOOL v7 = *v1;
    uint64_t v8 = (v5 - *v1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      unint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    int32x4_t v13 = &v12[8 * v8];
    *(void *)int32x4_t v13 = *v3;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = *v1;
    }
    *unint64_t v1 = v13;
    v1[1] = v6;
    v1[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *v2;
    uint64_t v6 = v5 + 8;
  }
  v1[1] = v6;
  *pthread_t v3 = 0;

  std::mutex::unlock(&stru_1EA618998);
}

void llvm::timeTraceProfilerWrite(const void *a1@<X0>, std::string::size_type a2@<X1>, unsigned char *a3@<X2>, std::string::size_type a4@<X3>, void *a5@<X8>)
{
  if (!a1)
  {
    char v8 = 0;
    memset(&__dst, 0, sizeof(__dst));
LABEL_14:
    if (a4 == 1)
    {
      if (*a3 == 45)
      {
        *((unsigned char *)&v26[0].__r_.__value_.__s + 23) = 3;
        LODWORD(v26[0].__r_.__value_.__l.__data_) = 7632239;
        if ((v8 & 0x80) == 0) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if (!a3) {
        goto LABEL_24;
      }
      *((unsigned char *)&v26[0].__r_.__value_.__s + 23) = 1;
      uint64_t v15 = v26;
      goto LABEL_43;
    }
    if (!a3)
    {
LABEL_24:
      memset(v26, 0, 24);
      if ((v8 & 0x80) == 0)
      {
LABEL_26:
        std::string __dst = v26[0];
        std::string::append(&__dst, ".time-trace");
        goto LABEL_27;
      }
LABEL_25:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_26;
    }
    if (a4 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a4 >= 0x17)
      {
        uint64_t v21 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a4 | 7) != 0x17) {
          uint64_t v21 = a4 | 7;
        }
        uint64_t v22 = v21 + 1;
        uint64_t v15 = (std::string *)operator new(v21 + 1);
        v26[0].__r_.__value_.__l.__size_ = a4;
        v26[0].__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
        v26[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      }
      else
      {
        *((unsigned char *)&v26[0].__r_.__value_.__s + 23) = a4;
        uint64_t v15 = v26;
        if (!a4)
        {
LABEL_44:
          v15->__r_.__value_.__s.__data_[a4] = 0;
          if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
      }
LABEL_43:
      memmove(v15, a3, a4);
      goto LABEL_44;
    }
LABEL_46:
    abort();
  }
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_46;
  }
  if (a2 >= 0x17)
  {
    uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v12 = a2 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = a2;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a2;
  p_dst = &__dst;
  if (a2) {
LABEL_10:
  }
    memmove(p_dst, a1, a2);
  p_dst->__r_.__value_.__s.__data_[a2] = 0;
  char v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_14;
  }
LABEL_27:
  LODWORD(v27) = 0;
  uint64_t v28 = std::system_category();
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &__dst;
  }
  else {
    unint64_t v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    uint64_t v17 = __dst.__r_.__value_.__l.__size_;
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v26, v16, v17, (uint64_t)&v27, 3);
  if (v27)
  {
    uint64_t v19 = v27;
    uint64_t v20 = (uint64_t)v28;
    std::operator+<char>();
    __int16 v25 = 260;
    p_p = &__p;
    sub_1CD4FF4BC(v19, v20, (llvm::Twine *)&p_p);
  }
  unint64_t v18 = (std::string::size_type *)off_1EC7DFC00();
  sub_1CD84AD14(*v18, (uint64_t)v26);
  *a5 = 0;
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v26);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1CD0B2B3C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

llvm::raw_ostream *sub_1CD0B2B80(uint64_t a1, llvm::json::OStream *this, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a3 / 1000 + *(void *)(a1 + 9288) / -1000;
  uint64_t v9 = *(void *)(a3 + 8) / 1000 + *(void *)a3 / -1000;
  llvm::json::OStream::objectBegin(this);
  uint64_t v10 = *(int *)(a1 + 9320);
  unsigned __int16 v17 = 3;
  uint64_t v18 = v10;
  llvm::json::OStream::attributeBegin((uint64_t)this, "pid", 3uLL);
  llvm::json::OStream::value((uint64_t)this, &v17);
  --*((_DWORD *)this + 2);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  unsigned __int16 v17 = 3;
  uint64_t v18 = a4;
  llvm::json::OStream::attributeBegin((uint64_t)this, "tid", 3uLL);
  llvm::json::OStream::value((uint64_t)this, &v17);
  --*((_DWORD *)this + 2);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  sub_1CD452690((llvm::json::Value *)&v17, "X", 1uLL);
  llvm::json::OStream::attributeBegin((uint64_t)this, "ph", 2uLL);
  llvm::json::OStream::value((uint64_t)this, &v17);
  --*((_DWORD *)this + 2);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  unsigned __int16 v17 = 3;
  uint64_t v18 = v8;
  llvm::json::OStream::attributeBegin((uint64_t)this, "ts", 2uLL);
  llvm::json::OStream::value((uint64_t)this, &v17);
  --*((_DWORD *)this + 2);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  unsigned __int16 v17 = 3;
  uint64_t v18 = v9;
  llvm::json::OStream::attributeBegin((uint64_t)this, "dur", 3uLL);
  llvm::json::OStream::value((uint64_t)this, &v17);
  --*((_DWORD *)this + 2);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 16);
    uint64_t v14 = *(void *)(a3 + 32);
  }
  sub_1CD452764((uint64_t)&v17, (unint64_t)__p);
  llvm::json::OStream::attributeBegin((uint64_t)this, "name", 4uLL);
  llvm::json::OStream::value((uint64_t)this, &v17);
  --*((_DWORD *)this + 2);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(unsigned __int8 *)(a3 + 63);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 48);
  }
  if (v11)
  {
    llvm::json::OStream::attributeBegin((uint64_t)this, "args", 4uLL);
    llvm::json::OStream::objectBegin(this);
    if (*(char *)(a3 + 63) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v15, *(const void **)(a3 + 40), *(void *)(a3 + 48));
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)(a3 + 40);
      uint64_t v16 = *(void *)(a3 + 56);
    }
    sub_1CD452764((uint64_t)&v17, (unint64_t)v15);
    llvm::json::OStream::attributeBegin((uint64_t)this, "detail", 6uLL);
    llvm::json::OStream::value((uint64_t)this, &v17);
    --*((_DWORD *)this + 2);
    llvm::json::Value::destroy((llvm::json::Value *)&v17);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    llvm::json::OStream::objectEnd(this);
    --*((_DWORD *)this + 2);
  }
  return llvm::json::OStream::objectEnd(this);
}

char *sub_1CD0B2EE0(int64x2_t *a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[40 * v3];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v10 + 24) = *a3;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v13 = vdupq_n_s64(v11);
    uint64_t v14 = &v9[40 * v3];
  }
  else
  {
    uint64_t v14 = &v9[40 * v3];
    do
    {
      long long v15 = *(_OWORD *)(v11 - 40);
      *((void *)v14 - 3) = *(void *)(v11 - 24);
      *(_OWORD *)(v14 - 40) = v15;
      *(void *)(v11 - 32) = 0;
      *(void *)(v11 - 24) = 0;
      *(void *)(v11 - 40) = 0;
      *((_OWORD *)v14 - 1) = *(_OWORD *)(v11 - 16);
      v14 -= 40;
      v11 -= 40;
    }
    while (v11 != v12);
    int64x2_t v13 = *a1;
  }
  uint64_t v16 = v10 + 40;
  a1->i64[0] = (uint64_t)v14;
  a1->i64[1] = (uint64_t)(v10 + 40);
  int64x2_t v20 = v13;
  uint64_t v17 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v9[40 * v8];
  uint64_t v21 = v17;
  uint64_t v19 = v13.i64[0];
  sub_1CD561578((uint64_t)&v19);
  return v16;
}

void sub_1CD0B306C(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    if ((void *)(a1 + 40) != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (void *)a1;
      do
      {
        BOOL v7 = v4;
        uint64_t v8 = v6[9];
        if (v6[4] < v8)
        {
          uint64_t v16 = *v4;
          *(void *)uint64_t v17 = v6[6];
          *(void *)&v17[7] = *(void *)((char *)v6 + 55);
          char v9 = *((unsigned char *)v6 + 63);
          void *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          uint64_t v10 = v6[8];
          uint64_t v11 = v5;
          while (1)
          {
            uint64_t v12 = a1 + v11;
            int64x2_t v13 = (void **)(a1 + v11 + 40);
            if (*(char *)(a1 + v11 + 63) < 0) {
              operator delete(*v13);
            }
            *(_OWORD *)int64x2_t v13 = *(_OWORD *)v12;
            *(void *)(a1 + v11 + 56) = *(void *)(v12 + 16);
            *(unsigned char *)(v12 + 23) = 0;
            *(unsigned char *)uint64_t v12 = 0;
            *(_OWORD *)(v12 + 64) = *(_OWORD *)(v12 + 24);
            if (!v11) {
              break;
            }
            uint64_t v14 = *(void *)(a1 + v11 - 8);
            v11 -= 40;
            if (v14 >= v8)
            {
              uint64_t v15 = a1 + v11 + 40;
              goto LABEL_12;
            }
          }
          uint64_t v15 = a1;
LABEL_12:
          if (*(char *)(v15 + 23) < 0) {
            operator delete(*(void **)v15);
          }
          *(void *)uint64_t v15 = v16;
          *(void *)(v15 + 8) = *(void *)v17;
          *(void *)(v15 + 15) = *(void *)&v17[7];
          *(unsigned char *)(v15 + 23) = v9;
          *(void *)(v15 + 24) = v10;
          *(void *)(v15 + 32) = v8;
        }
        unint64_t v4 = v7 + 5;
        v5 += 40;
        uint64_t v6 = v7;
      }
      while (v7 + 5 != a2);
    }
  }
}

void *sub_1CD0B31D8(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result + 5;
    while (v3 != a2)
    {
      unint64_t v4 = v3;
      uint64_t v5 = result[9];
      if (result[4] < v5)
      {
        uint64_t v6 = *v3;
        *(void *)uint64_t v12 = result[6];
        *(void *)&v12[7] = *(void *)((char *)result + 55);
        char v7 = *((unsigned char *)result + 63);
        *unint64_t v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
        uint64_t v8 = result[8];
        char v9 = v3;
        do
        {
          if (*((char *)v9 + 23) < 0) {
            operator delete((void *)*v9);
          }
          *(_OWORD *)char v9 = *(_OWORD *)(v9 - 5);
          v9[2] = *(v9 - 3);
          *((unsigned char *)v9 - 40) = 0;
          uint64_t v10 = v9 - 5;
          *((unsigned char *)v9 - 17) = 0;
          *(_OWORD *)(v9 + 3) = *((_OWORD *)v9 - 1);
          uint64_t v11 = *(v9 - 6);
          v9 -= 5;
        }
        while (v11 < v5);
        if (*((char *)v10 + 23) < 0) {
          operator delete((void *)*v10);
        }
        *uint64_t v10 = v6;
        v10[1] = *(void *)v12;
        *(void *)((char *)v10 + 15) = *(void *)&v12[7];
        *((unsigned char *)v10 + 23) = v7;
        v10[3] = v8;
        v10[4] = v5;
      }
      unint64_t v3 = v4 + 5;
      uint64_t result = v4;
    }
  }
  return result;
}

long long *sub_1CD0B3310(long long *result, long long *a2, long long *a3)
{
  unint64_t v3 = (uint64_t *)(a2 + 2);
  uint64_t v4 = *((void *)a2 + 4);
  uint64_t v5 = (uint64_t *)(result + 2);
  uint64_t v6 = *((void *)a3 + 4);
  if (*((void *)result + 4) < v4)
  {
    if (v4 >= v6)
    {
      uint64_t v19 = *((void *)result + 2);
      long long v20 = *result;
      uint64_t v21 = *((void *)a2 + 2);
      *uint64_t result = *a2;
      *((void *)result + 2) = v21;
      *a2 = v20;
      *((void *)a2 + 2) = v19;
      char v7 = (uint64_t *)a2 + 3;
      uint64_t v22 = *((void *)result + 3);
      uint64_t v23 = *((void *)result + 4);
      *(long long *)((char *)result + 24) = *(long long *)((char *)a2 + 24);
      *((void *)a2 + 3) = v22;
      *((void *)a2 + 4) = v23;
      if (v23 >= *((void *)a3 + 4)) {
        return result;
      }
      uint64_t v24 = *((void *)a2 + 2);
      long long v25 = *a2;
      uint64_t v26 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v26;
      *a3 = v25;
      *((void *)a3 + 2) = v24;
      uint64_t v11 = (uint64_t *)a3 + 3;
      uint64_t v5 = (uint64_t *)(a2 + 2);
    }
    else
    {
      char v7 = (uint64_t *)result + 3;
      uint64_t v8 = *((void *)result + 2);
      long long v9 = *result;
      uint64_t v10 = *((void *)a3 + 2);
      *uint64_t result = *a3;
      *((void *)result + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      uint64_t v11 = (uint64_t *)a3 + 3;
    }
    unint64_t v3 = (uint64_t *)(a3 + 2);
    goto LABEL_10;
  }
  if (v4 < v6)
  {
    uint64_t v12 = *((void *)a2 + 2);
    long long v13 = *a2;
    uint64_t v14 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v14;
    *a3 = v13;
    *((void *)a3 + 2) = v12;
    uint64_t v11 = (uint64_t *)a2 + 3;
    long long v15 = *(long long *)((char *)a2 + 24);
    *(long long *)((char *)a2 + 24) = *(long long *)((char *)a3 + 24);
    *(long long *)((char *)a3 + 24) = v15;
    if (*v5 < *((void *)a2 + 4))
    {
      uint64_t v16 = *((void *)result + 2);
      long long v17 = *result;
      uint64_t v18 = *((void *)a2 + 2);
      *uint64_t result = *a2;
      *((void *)result + 2) = v18;
      *a2 = v17;
      *((void *)a2 + 2) = v16;
      char v7 = (uint64_t *)result + 3;
LABEL_10:
      uint64_t v27 = *v7;
      *char v7 = *v11;
      *uint64_t v11 = v27;
      uint64_t v28 = *v5;
      uint64_t *v5 = *v3;
      *unint64_t v3 = v28;
    }
  }
  return result;
}

long long *sub_1CD0B3470(uint64_t a1, long long *a2)
{
  unint64_t v3 = *(void **)a1;
  *(void *)uint64_t v23 = *(void *)(a1 + 8);
  *(void *)&v23[7] = *(void *)(a1 + 15);
  char v4 = *(unsigned char *)(a1 + 23);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  if (*((void *)a2 - 1) >= v5)
  {
    long long v9 = (long long *)(a1 + 40);
    do
    {
      char v7 = v9;
      if (v9 >= a2) {
        break;
      }
      uint64_t v10 = *((void *)v9 + 4);
      long long v9 = (long long *)((char *)v9 + 40);
    }
    while (v10 >= v5);
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      char v7 = (long long *)(v6 + 40);
      uint64_t v8 = *(void *)(v6 + 72);
      v6 += 40;
    }
    while (v8 >= v5);
  }
  if (v7 >= a2)
  {
    uint64_t v11 = a2;
  }
  else
  {
    do
    {
      uint64_t v11 = (long long *)((char *)a2 - 40);
      uint64_t v12 = *((void *)a2 - 1);
      a2 = (long long *)((char *)a2 - 40);
    }
    while (v12 < v5);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  while (v7 < v11)
  {
    uint64_t v22 = *((void *)v7 + 2);
    long long v21 = *v7;
    long long v14 = *v11;
    *((void *)v7 + 2) = *((void *)v11 + 2);
    *char v7 = v14;
    *((void *)v11 + 2) = v22;
    *uint64_t v11 = v21;
    long long v15 = *(long long *)((char *)v7 + 24);
    *(long long *)((char *)v7 + 24) = *(long long *)((char *)v11 + 24);
    *(long long *)((char *)v11 + 24) = v15;
    do
    {
      uint64_t v16 = *((void *)v7 + 9);
      char v7 = (long long *)((char *)v7 + 40);
    }
    while (v16 >= v5);
    do
    {
      uint64_t v17 = *((void *)v11 - 1);
      uint64_t v11 = (long long *)((char *)v11 - 40);
    }
    while (v17 < v5);
  }
  uint64_t v18 = (void **)v7 - 5;
  if ((long long *)((char *)v7 - 40) != (long long *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v19 = *(_OWORD *)v18;
    *(void *)(a1 + 16) = *((void *)v7 - 3);
    *(_OWORD *)a1 = v19;
    *((unsigned char *)v7 - 17) = 0;
    *((unsigned char *)v7 - 40) = 0;
    *(_OWORD *)(a1 + 24) = *(v7 - 1);
  }
  if (*((char *)v7 - 17) < 0) {
    operator delete(*v18);
  }
  *((void *)v7 - 5) = v3;
  *(void *)((char *)v7 - 25) = *(void *)&v23[7];
  *((void *)v7 - 4) = *(void *)v23;
  *((unsigned char *)v7 - 17) = v4;
  *((void *)v7 - 2) = v13;
  *((void *)v7 - 1) = v5;
  return v7;
}

uint64_t sub_1CD0B3644(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = 0;
  char v4 = *(void **)a1;
  *(void *)uint64_t v24 = *(void *)(a1 + 8);
  *(void *)&v24[7] = *(void *)(a1 + 15);
  char v5 = *(unsigned char *)(a1 + 23);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  do
  {
    uint64_t v8 = *(void *)(a1 + v3 + 72);
    v3 += 40;
  }
  while (v7 < v8);
  long long v9 = (long long *)(a1 + v3);
  if (v3 == 40)
  {
    while ((unint64_t)v9 < a2)
    {
      unint64_t v10 = a2 - 40;
      uint64_t v12 = *(void *)(a2 - 8);
      a2 -= 40;
      if (v7 < v12) {
        goto LABEL_9;
      }
    }
    unint64_t v10 = a2;
  }
  else
  {
    do
    {
      unint64_t v10 = a2 - 40;
      uint64_t v11 = *(void *)(a2 - 8);
      a2 -= 40;
    }
    while (v7 >= v11);
  }
LABEL_9:
  uint64_t v13 = v9;
  if ((unint64_t)v9 < v10)
  {
    unint64_t v14 = v10;
    do
    {
      long long v15 = *v13;
      uint64_t v16 = *((void *)v13 + 2);
      uint64_t v17 = *(void *)(v14 + 16);
      *uint64_t v13 = *(_OWORD *)v14;
      *((void *)v13 + 2) = v17;
      *(void *)(v14 + 16) = v16;
      *(_OWORD *)unint64_t v14 = v15;
      long long v18 = *(long long *)((char *)v13 + 24);
      *(long long *)((char *)v13 + 24) = *(_OWORD *)(v14 + 24);
      *(_OWORD *)(v14 + 24) = v18;
      do
      {
        uint64_t v19 = *((void *)v13 + 9);
        uint64_t v13 = (long long *)((char *)v13 + 40);
      }
      while (v7 < v19);
      do
      {
        uint64_t v20 = *(void *)(v14 - 8);
        v14 -= 40;
      }
      while (v7 >= v20);
    }
    while ((unint64_t)v13 < v14);
  }
  long long v21 = (void **)v13 - 5;
  if ((long long *)((char *)v13 - 40) != (long long *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v22 = *(_OWORD *)v21;
    *(void *)(a1 + 16) = *((void *)v13 - 3);
    *(_OWORD *)a1 = v22;
    *((unsigned char *)v13 - 17) = 0;
    *((unsigned char *)v13 - 40) = 0;
    *(_OWORD *)(a1 + 24) = *(v13 - 1);
  }
  if (*((char *)v13 - 17) < 0) {
    operator delete(*v21);
  }
  *((void *)v13 - 5) = v4;
  *(void *)((char *)v13 - 25) = *(void *)&v24[7];
  *((void *)v13 - 4) = *(void *)v24;
  *((unsigned char *)v13 - 17) = v5;
  *((void *)v13 - 2) = v6;
  *((void *)v13 - 1) = v7;
  return (uint64_t)v13 - 40;
}

BOOL sub_1CD0B3818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a1 + 32) < *(void *)(a2 - 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(void *)(a2 - 24) = v6;
        long long v9 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v9;
      }
      return result;
    case 3uLL:
      sub_1CD0B3310((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1CD0B3AAC(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1CD0B3BAC(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v10 = a1 + 80;
      sub_1CD0B3310((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v11 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(v10 + 32);
    uint64_t v15 = *(void *)(v11 + 32);
    if (v14 < v15)
    {
      uint64_t v23 = *(void *)v11;
      *(void *)uint64_t v24 = *(void *)(v11 + 8);
      *(void *)&v24[7] = *(void *)(v11 + 15);
      char v22 = *(unsigned char *)(v11 + 23);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      uint64_t v16 = *(void *)(v11 + 24);
      uint64_t v17 = v12;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        uint64_t v19 = (void **)(a1 + v17 + 120);
        if (*(char *)(a1 + v17 + 143) < 0) {
          operator delete(*v19);
        }
        *(_OWORD *)uint64_t v19 = *(_OWORD *)(v18 + 80);
        *(void *)(a1 + v17 + 136) = *(void *)(v18 + 96);
        *(unsigned char *)(v18 + 103) = 0;
        *(unsigned char *)(v18 + 80) = 0;
        *(_OWORD *)(v18 + 144) = *(_OWORD *)(v18 + 104);
        if (v17 == -80) {
          break;
        }
        uint64_t v20 = *(void *)(a1 + v17 + 72);
        v17 -= 40;
        if (v20 >= v15)
        {
          uint64_t v21 = a1 + v17 + 120;
          goto LABEL_14;
        }
      }
      uint64_t v21 = a1;
LABEL_14:
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      *(void *)uint64_t v21 = v23;
      *(void *)(v21 + 8) = *(void *)v24;
      *(void *)(v21 + 15) = *(void *)&v24[7];
      *(unsigned char *)(v21 + 23) = v22;
      *(void *)(v21 + 24) = v16;
      *(void *)(v21 + 32) = v15;
      if (++v13 == 8) {
        return v11 + 40 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 40;
    v11 += 40;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CD0B3AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CD0B3310((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a3 + 32) < *(void *)(a4 + 32))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    __n128 result = *(__n128 *)(a4 + 24);
    long long v12 = *(_OWORD *)(a3 + 24);
    *(__n128 *)(a3 + 24) = result;
    *(_OWORD *)(a4 + 24) = v12;
    if (*(void *)(a2 + 32) < *(void *)(a3 + 32))
    {
      uint64_t v13 = *(void *)(a2 + 16);
      long long v14 = *(_OWORD *)a2;
      uint64_t v15 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v15;
      *(_OWORD *)a3 = v14;
      *(void *)(a3 + 16) = v13;
      __n128 result = *(__n128 *)(a3 + 24);
      long long v16 = *(_OWORD *)(a2 + 24);
      *(__n128 *)(a2 + 24) = result;
      *(_OWORD *)(a3 + 24) = v16;
      if (*(void *)(a1 + 32) < *(void *)(a2 + 32))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        long long v18 = *(_OWORD *)a1;
        uint64_t v19 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v19;
        *(_OWORD *)a2 = v18;
        *(void *)(a2 + 16) = v17;
        __n128 result = *(__n128 *)(a2 + 24);
        long long v20 = *(_OWORD *)(a1 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(_OWORD *)(a2 + 24) = v20;
      }
    }
  }
  return result;
}

__n128 sub_1CD0B3BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_1CD0B3AAC(a1, a2, a3, a4).n128_u64[0];
  if (*(void *)(a4 + 32) < *(void *)(a5 + 32))
  {
    uint64_t v11 = *(void *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    __n128 result = *(__n128 *)(a5 + 24);
    long long v14 = *(_OWORD *)(a4 + 24);
    *(__n128 *)(a4 + 24) = result;
    *(_OWORD *)(a5 + 24) = v14;
    if (*(void *)(a3 + 32) < *(void *)(a4 + 32))
    {
      uint64_t v15 = *(void *)(a3 + 16);
      long long v16 = *(_OWORD *)a3;
      uint64_t v17 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v17;
      *(_OWORD *)a4 = v16;
      *(void *)(a4 + 16) = v15;
      __n128 result = *(__n128 *)(a4 + 24);
      long long v18 = *(_OWORD *)(a3 + 24);
      *(__n128 *)(a3 + 24) = result;
      *(_OWORD *)(a4 + 24) = v18;
      if (*(void *)(a2 + 32) < *(void *)(a3 + 32))
      {
        uint64_t v19 = *(void *)(a2 + 16);
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v21;
        *(_OWORD *)a3 = v20;
        *(void *)(a3 + 16) = v19;
        __n128 result = *(__n128 *)(a3 + 24);
        long long v22 = *(_OWORD *)(a2 + 24);
        *(__n128 *)(a2 + 24) = result;
        *(_OWORD *)(a3 + 24) = v22;
        if (*(void *)(a1 + 32) < *(void *)(a2 + 32))
        {
          uint64_t v23 = *(void *)(a1 + 16);
          long long v24 = *(_OWORD *)a1;
          uint64_t v25 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v25;
          *(_OWORD *)a2 = v24;
          *(void *)(a2 + 16) = v23;
          __n128 result = *(__n128 *)(a2 + 24);
          long long v26 = *(_OWORD *)(a1 + 24);
          *(__n128 *)(a1 + 24) = result;
          *(_OWORD *)(a2 + 24) = v26;
        }
      }
    }
  }
  return result;
}

void sub_1CD0B3CF8(uint64_t a1, void **a2, void **a3)
{
  if ((void **)a1 != a2)
  {
    uint64_t v4 = a2;
    uint64_t v6 = (uint64_t)a2 - a1;
    uint64_t v7 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      long long v10 = (uint64_t *)(a1 + 40 * v8);
      do
      {
        sub_1CD0B40B8(a1, v7, v10);
        v10 -= 5;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      uint64_t v11 = v4;
      do
      {
        if (*(void *)(a1 + 32) < (uint64_t)v11[4])
        {
          long long v12 = v11[2];
          long long v13 = *(_OWORD *)v11;
          long long v14 = *(void **)(a1 + 16);
          *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
          v11[2] = v14;
          *(_OWORD *)a1 = v13;
          *(void *)(a1 + 16) = v12;
          long long v15 = *(_OWORD *)(v11 + 3);
          *(_OWORD *)(v11 + 3) = *(_OWORD *)(a1 + 24);
          *(_OWORD *)(a1 + 24) = v15;
          sub_1CD0B40B8(a1, v7, (uint64_t *)a1);
        }
        v11 += 5;
      }
      while (v11 != a3);
    }
    if (v6 >= 41)
    {
      do
      {
        if (v7 < 2) {
          break;
        }
        long long v16 = v4;
        uint64_t v17 = 0;
        uint64_t v38 = *(void *)a1;
        *(void *)uint64_t v42 = *(void *)(a1 + 8);
        *(void *)&v42[7] = *(void *)(a1 + 15);
        char v40 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v18 = a1;
        uint64_t v19 = *(void **)(a1 + 24);
        long long v20 = *(void **)(a1 + 32);
        do
        {
          uint64_t v21 = v17 + 1;
          uint64_t v22 = v18 + 40 * (v17 + 1);
          uint64_t v23 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v24 = v23 + 2;
          if (v23 + 2 < v7)
          {
            uint64_t v25 = *(void *)(v22 + 72);
            uint64_t v26 = *(void *)(v18 + 40 * v21 + 32);
            v22 += 40 * (v25 < v26);
            if (v25 < v26) {
              uint64_t v17 = v24;
            }
          }
          if (*(char *)(v18 + 23) < 0) {
            operator delete(*(void **)v18);
          }
          long long v27 = *(_OWORD *)v22;
          *(void *)(v18 + 16) = *(void *)(v22 + 16);
          *(_OWORD *)uint64_t v18 = v27;
          *(unsigned char *)(v22 + 23) = 0;
          *(unsigned char *)uint64_t v22 = 0;
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(v22 + 24);
          uint64_t v18 = v22;
        }
        while (v17 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        uint64_t v4 = v16 - 5;
        int v28 = *(char *)(v22 + 23);
        if ((void **)v22 == v16 - 5)
        {
          if (v28 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v22 = v38;
          *(void *)(v22 + 8) = *(void *)v42;
          *(void *)(v22 + 15) = *(void *)&v42[7];
          *(unsigned char *)(v22 + 23) = v40;
          *(void *)(v22 + 24) = v19;
          *(void *)(v22 + 32) = v20;
        }
        else
        {
          if (v28 < 0) {
            operator delete(*(void **)v22);
          }
          long long v29 = *(_OWORD *)v4;
          *(void *)(v22 + 16) = *(v16 - 3);
          *(_OWORD *)uint64_t v22 = v29;
          *((unsigned char *)v16 - 17) = 0;
          *((unsigned char *)v16 - 40) = 0;
          *(_OWORD *)(v22 + 24) = *((_OWORD *)v16 - 1);
          if (*((char *)v16 - 17) < 0) {
            operator delete(*v4);
          }
          *(v16 - 5) = (void *)v38;
          *(v16 - 4) = *(void **)v42;
          *(void **)((char *)v16 - 25) = *(void **)&v42[7];
          *((unsigned char *)v16 - 17) = v40;
          *(v16 - 2) = v19;
          *(v16 - 1) = v20;
          uint64_t v30 = v22 + 40 - a1;
          if (v30 >= 41)
          {
            unint64_t v31 = (v30 / 0x28uLL - 2) >> 1;
            uint64_t v32 = *(void *)(v22 + 32);
            if (v32 < *(void *)(a1 + 40 * v31 + 32))
            {
              int32x4_t v41 = *(void **)v22;
              *(void *)int32x4_t v43 = *(void *)(v22 + 8);
              *(void *)&v43[7] = *(void *)(v22 + 15);
              char v39 = *(unsigned char *)(v22 + 23);
              *(void *)(v22 + 8) = 0;
              *(void *)(v22 + 16) = 0;
              *(void *)uint64_t v22 = 0;
              uint64_t v33 = *(void *)(v22 + 24);
              do
              {
                unint64_t v34 = v31;
                if (*(char *)(v22 + 23) < 0) {
                  operator delete(*(void **)v22);
                }
                uint64_t v35 = a1 + 40 * v34;
                long long v36 = *(_OWORD *)v35;
                *(void *)(v22 + 16) = *(void *)(v35 + 16);
                *(_OWORD *)uint64_t v22 = v36;
                *(unsigned char *)(v35 + 23) = 0;
                *(unsigned char *)uint64_t v35 = 0;
                *(_OWORD *)(v22 + 24) = *(_OWORD *)(v35 + 24);
                if (!v34) {
                  break;
                }
                unint64_t v31 = (v34 - 1) >> 1;
                uint64_t v22 = a1 + 40 * v34;
              }
              while (v32 < *(void *)(a1 + 40 * v31 + 32));
              if (*(char *)(v35 + 23) < 0) {
                operator delete(*(void **)v35);
              }
              *(void *)uint64_t v35 = v41;
              *(void *)(v35 + 8) = *(void *)v43;
              *(void *)(v35 + 15) = *(void *)&v43[7];
              *(unsigned char *)(v35 + 23) = v39;
              *(void *)(v35 + 24) = v33;
              *(void *)(a1 + 40 * v34 + 32) = v32;
            }
          }
        }
      }
      while (v7-- > 2);
    }
  }
}

void sub_1CD0B40B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = (long long *)a3;
    int64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a3 - a1) >> 3)))
    {
      int64_t v8 = (0x999999999999999ALL * (((uint64_t)a3 - a1) >> 3)) | 1;
      unint64_t v9 = (long long *)(a1 + 40 * v8);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a3 - a1) >> 3) + 2) < a2)
      {
        uint64_t v10 = *((void *)v9 + 9);
        uint64_t v11 = *(void *)(a1 + 40 * v8 + 32);
        unint64_t v9 = (long long *)((char *)v9 + 40 * (v10 < v11));
        if (v10 < v11) {
          int64_t v8 = 0x999999999999999ALL * (((uint64_t)a3 - a1) >> 3) + 2;
        }
      }
      uint64_t v12 = a3[4];
      if (v12 >= *((void *)v9 + 4))
      {
        uint64_t v20 = *a3;
        *(void *)uint64_t v21 = a3[1];
        *(void *)&v21[7] = *(uint64_t *)((char *)a3 + 15);
        char v13 = *((unsigned char *)a3 + 23);
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        uint64_t v14 = a3[3];
        do
        {
          long long v15 = v9;
          if (*((char *)v4 + 23) < 0) {
            operator delete(*(void **)v4);
          }
          long long v16 = *v15;
          *((void *)v4 + 2) = *((void *)v15 + 2);
          long long *v4 = v16;
          *((unsigned char *)v15 + 23) = 0;
          *(unsigned char *)long long v15 = 0;
          *(long long *)((char *)v4 + 24) = *(long long *)((char *)v15 + 24);
          if (v6 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          unint64_t v9 = (long long *)(a1 + 40 * v17);
          if (2 * v8 + 2 < a2)
          {
            uint64_t v18 = *((void *)v9 + 9);
            uint64_t v19 = *(void *)(a1 + 40 * v17 + 32);
            unint64_t v9 = (long long *)((char *)v9 + 40 * (v18 < v19));
            if (v18 < v19) {
              uint64_t v17 = 2 * v8 + 2;
            }
          }
          uint64_t v4 = v15;
          int64_t v8 = v17;
        }
        while (v12 >= *((void *)v9 + 4));
        if (*((char *)v15 + 23) < 0) {
          operator delete(*(void **)v15);
        }
        *(void *)long long v15 = v20;
        *((void *)v15 + 1) = *(void *)v21;
        *(void *)((char *)v15 + 15) = *(void *)&v21[7];
        *((unsigned char *)v15 + 23) = v13;
        *((void *)v15 + 3) = v14;
        *((void *)v15 + 4) = v12;
      }
    }
  }
}

void sub_1CD0B4284(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + (v2 << 6);
    uint64_t v5 = a2 + 40;
    uint64_t v6 = *a1 + 24;
    do
    {
      *(_OWORD *)(v5 - 40) = *(_OWORD *)(v6 - 24);
      uint64_t v7 = (_OWORD *)(v5 - 24);
      if (*(char *)(v6 + 15) < 0)
      {
        sub_1CB8BDF7C((uint64_t)v7, *(const void **)(v6 - 8), *(void *)v6);
      }
      else
      {
        long long v8 = *(_OWORD *)(v6 - 8);
        *(void *)(v5 - 8) = *(void *)(v6 + 8);
        *uint64_t v7 = v8;
      }
      if (*(char *)(v6 + 39) < 0)
      {
        sub_1CB8BDF7C(v5, *(const void **)(v6 + 16), *(void *)(v6 + 24));
      }
      else
      {
        long long v9 = *(_OWORD *)(v6 + 16);
        *(void *)(v5 + 16) = *(void *)(v6 + 32);
        *(_OWORD *)uint64_t v5 = v9;
      }
      uint64_t v10 = v6 - 24;
      v5 += 64;
      v6 += 64;
    }
    while (v10 + 64 != v4);
    uint64_t v11 = *((unsigned int *)a1 + 2);
    if (v11)
    {
      uint64_t v12 = *a1;
      uint64_t v13 = v11 << 6;
      do
      {
        uint64_t v14 = v12 + v13;
        if (*(char *)(v12 + v13 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        if (*(char *)(v14 - 25) < 0) {
          operator delete(*(void **)(v12 + v13 - 48));
        }
        v13 -= 64;
      }
      while (v13);
    }
  }
}

uint64_t sub_1CD0B437C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1CB8BDF7C(v4, *(const void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = (_OWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v6, *(const void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *uint64_t v6 = v7;
  }
  return a1;
}

const void ***sub_1CD0B4400@<X0>(const void ***result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  size_t v3 = (size_t)(*result)[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v4 = **result;
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    long long v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    void *v2 = v7;
    uint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v3;
    if (!v3) {
      goto LABEL_9;
    }
  }
  __n128 result = (const void ***)memmove(v2, v4, v3);
LABEL_9:
  *((unsigned char *)v2 + v3) = 0;
  return result;
}

uint64_t sub_1CD0B449C()
{
  return __cxa_atexit(MEMORY[0x1E4FBA268], &stru_1EA618998, &dword_1CB82C000);
}

double llvm::TimeRecord::getCurrentTime@<D0>(llvm::TimeRecord *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v15 = 0;
  if (this)
  {
    if (!atomic_load_explicit(qword_1EBCFB238, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB238, (void *(*)(void))sub_1CD0B5270, (void (*)(void *))sub_1CD84E178);
    }
    if (*(unsigned char *)(qword_1EBCFB238[0] + 128)) {
      size_t MallocUsage = llvm::sys::Process::GetMallocUsage(this);
    }
    else {
      size_t MallocUsage = 0;
    }
    *(void *)(a2 + 24) = MallocUsage;
    pid_t v4 = getpid();
    int v5 = proc_pid_rusage(v4, 4, buffer);
    uint64_t v6 = v17;
    if (v5) {
      uint64_t v6 = 0;
    }
    *(void *)(a2 + 32) = v6;
    llvm::sys::Process::GetTimeUsage(&v15, &v14, &v13);
  }
  else
  {
    llvm::sys::Process::GetTimeUsage(&v15, &v14, &v13);
    pid_t v7 = getpid();
    long long v8 = (llvm::sys::Process *)proc_pid_rusage(v7, 4, buffer);
    uint64_t v9 = v17;
    if (v8) {
      uint64_t v9 = 0;
    }
    *(void *)(a2 + 32) = v9;
    if (!atomic_load_explicit(qword_1EBCFB238, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB238, (void *(*)(void))sub_1CD0B5270, (void (*)(void *))sub_1CD84E178);
    }
    if (*(unsigned char *)(qword_1EBCFB238[0] + 128)) {
      size_t v10 = llvm::sys::Process::GetMallocUsage(v8);
    }
    else {
      size_t v10 = 0;
    }
    *(void *)(a2 + 24) = v10;
  }
  v11.i64[0] = v15;
  v11.i64[1] = v14;
  *(float64x2_t *)a2 = vdivq_f64(vcvtq_f64_s64(v11), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
  double result = (double)v13 / 1000000000.0;
  *(double *)(a2 + 16) = result;
  return result;
}

double llvm::Timer::clear(llvm::Timer *this)
{
  *((_WORD *)this + 64) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return result;
}

double sub_1CD0B4698(llvm::raw_ostream *a1, double a2, double a3)
{
  if (a3 >= 0.0000001)
  {
    v5[0] = &unk_1F2645750;
    v5[1] = "  %7.4f (%5.1f%%)";
    *(double *)&v5[2] = a2;
    *(double *)&v5[3] = a2 * 100.0 / a3;
    llvm::raw_ostream::operator<<(a1, (uint64_t)v5);
  }
  else
  {
    uint64_t v3 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v3) > 0x11)
    {
      *(_WORD *)(v3 + 16) = 8224;
      double result = *(double *)"        -----     ";
      *(_OWORD *)uint64_t v3 = *(_OWORD *)"        -----     ";
      *((void *)a1 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(a1, "        -----     ", 0x12uLL);
    }
  }
  return result;
}

llvm::Timer **llvm::NamedRegionTimer::NamedRegionTimer(llvm::Timer **result, unsigned __int8 *a2, size_t a3, std::string::value_type *a4, std::string::size_type a5, unsigned __int8 *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    uint64_t v19 = result;
    if (!atomic_load_explicit(qword_1EBCFB280, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB280, (void *(*)(void))sub_1CD0B6F0C, (void (*)(void *))sub_1CD0B6F48);
    }
    uint64_t v11 = qword_1EBCFB280[0];
    if (!atomic_load_explicit(qword_1EBCFB298, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB298, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
    }
    uint64_t v12 = (std::recursive_mutex *)qword_1EBCFB298[0];
    std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB298[0]);
    uint64_t v13 = sub_1CD84DF60(v11, a6, a7);
    uint64_t v14 = *v13;
    if (!(*v13)[1]) {
      operator new();
    }
    uint64_t v15 = sub_1CD84E05C((uint64_t)(v14 + 2), a2, a3);
    long long v16 = (llvm::Timer *)(*v15 + 8);
    if (!*(void *)(*v15 + 144)) {
      llvm::Timer::init(*v15 + 8, (std::string::value_type *)a2, a3, a4, a5, (llvm::TimerGroup *)v14[1]);
    }
    std::recursive_mutex::unlock(v12);
    *uint64_t v19 = v16;
    llvm::Timer::startTimer(v16);
    return v19;
  }
  else
  {
    *double result = 0;
  }
  return result;
}

{
  return llvm::NamedRegionTimer::NamedRegionTimer(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t llvm::TimerGroup::TimerGroup(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6)
{
  long long v8 = (long long **)(llvm::TimerGroup::TimerGroup(a1, a2, a3, a4, a5) + 56);
  sub_1CD0B4ADC((uint64_t)v8, *(unsigned int *)(a6 + 12));
  uint64_t v9 = *(unsigned int *)(a6 + 8);
  if (v9)
  {
    for (int i = *(size_t ***)a6; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    int i = *(size_t ***)a6;
  }
  uint64_t v12 = *(void *)a6 + 8 * v9;
  if (i != (size_t **)v12)
  {
    uint64_t v13 = *i;
    while (1)
    {
      size_t v14 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7) {
LABEL_42:
      }
        abort();
      if (v14 >= 0x17) {
        break;
      }
      HIBYTE(v31) = *v13;
      p_dst = &__dst;
      if (v14) {
        goto LABEL_19;
      }
LABEL_20:
      *((unsigned char *)p_dst + v14) = 0;
      size_t v18 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_42;
      }
      if (v18 >= 0x17)
      {
        uint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v20 = v18 | 7;
        }
        uint64_t v21 = v20 + 1;
        p_p = operator new(v20 + 1);
        *((void *)&__p + 1) = v18;
        unint64_t v29 = v21 | 0x8000000000000000;
        *(void *)&long long __p = p_p;
      }
      else
      {
        HIBYTE(v29) = *v13;
        p_p = &__p;
        if (!v18) {
          goto LABEL_28;
        }
      }
      memmove(p_p, v13 + 6, v18);
LABEL_28:
      uint64_t v22 = (long long *)(v13 + 1);
      *((unsigned char *)p_p + v18) = 0;
      unint64_t v23 = *(void *)(a1 + 64);
      if (v23 < *(void *)(a1 + 72)) {
        uint64_t v24 = sub_1CD84EA84(v23, v22, &__dst, &__p) + 88;
      }
      else {
        uint64_t v24 = sub_1CD0B55BC(v8, v22, &__dst, &__p);
      }
      *(void *)(a1 + 64) = v24;
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__dst);
      }
      do
      {
        uint64_t v25 = i[1];
        ++i;
        uint64_t v13 = v25;
        if (v25) {
          BOOL v26 = v13 + 1 == 0;
        }
        else {
          BOOL v26 = 1;
        }
      }
      while (v26);
      if (i == (size_t **)v12) {
        return a1;
      }
    }
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (long long *)operator new(v16 + 1);
    *((void *)&__dst + 1) = v14;
    unint64_t v31 = v17 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_19:
    memmove(p_dst, v13 + 6, v14);
    goto LABEL_20;
  }
  return a1;
}

{
  long long **v8;
  uint64_t v9;
  size_t **i;
  uint64_t v12;
  size_t *v13;
  size_t v14;
  long long *p_dst;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  long long *v22;
  unint64_t v23;
  uint64_t v24;
  size_t *v25;
  BOOL v26;
  long long __p;
  unint64_t v29;
  long long __dst;
  unint64_t v31;

  long long v8 = (long long **)(llvm::TimerGroup::TimerGroup(a1, a2, a3, a4, a5) + 56);
  sub_1CD0B4ADC((uint64_t)v8, *(unsigned int *)(a6 + 12));
  uint64_t v9 = *(unsigned int *)(a6 + 8);
  if (v9)
  {
    for (int i = *(size_t ***)a6; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    int i = *(size_t ***)a6;
  }
  uint64_t v12 = *(void *)a6 + 8 * v9;
  if (i != (size_t **)v12)
  {
    uint64_t v13 = *i;
    while (1)
    {
      size_t v14 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7) {
LABEL_42:
      }
        abort();
      if (v14 >= 0x17) {
        break;
      }
      HIBYTE(v31) = *v13;
      p_dst = &__dst;
      if (v14) {
        goto LABEL_19;
      }
LABEL_20:
      *((unsigned char *)p_dst + v14) = 0;
      size_t v18 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_42;
      }
      if (v18 >= 0x17)
      {
        uint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v20 = v18 | 7;
        }
        uint64_t v21 = v20 + 1;
        p_p = operator new(v20 + 1);
        *((void *)&__p + 1) = v18;
        unint64_t v29 = v21 | 0x8000000000000000;
        *(void *)&long long __p = p_p;
      }
      else
      {
        HIBYTE(v29) = *v13;
        p_p = &__p;
        if (!v18) {
          goto LABEL_28;
        }
      }
      memmove(p_p, v13 + 6, v18);
LABEL_28:
      uint64_t v22 = (long long *)(v13 + 1);
      *((unsigned char *)p_p + v18) = 0;
      unint64_t v23 = *(void *)(a1 + 64);
      if (v23 < *(void *)(a1 + 72)) {
        uint64_t v24 = sub_1CD84EA84(v23, v22, &__dst, &__p) + 88;
      }
      else {
        uint64_t v24 = sub_1CD0B55BC(v8, v22, &__dst, &__p);
      }
      *(void *)(a1 + 64) = v24;
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__dst);
      }
      do
      {
        uint64_t v25 = i[1];
        ++i;
        uint64_t v13 = v25;
        if (v25) {
          BOOL v26 = v13 + 1 == 0;
        }
        else {
          BOOL v26 = 1;
        }
      }
      while (v26);
      if (i == (size_t **)v12) {
        return a1;
      }
    }
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (long long *)operator new(v16 + 1);
    *((void *)&__dst + 1) = v14;
    unint64_t v31 = v17 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_19:
    memmove(p_dst, v13 + 6, v14);
    goto LABEL_20;
  }
  return a1;
}

void sub_1CD0B4ADC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(long long **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    pid_t v4 = *(long long **)(a1 + 8);
    uint64_t v5 = 88 * a2;
    uint64_t v6 = (char *)operator new(88 * a2);
    pid_t v7 = &v6[v5];
    long long v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = (uint64_t)&v6[(char *)v4 - (char *)v2];
      do
      {
        pid_t v4 = (long long *)((char *)v4 - 88);
        uint64_t v9 = sub_1CD84E9F4(v9 - 88, v4);
      }
      while (v4 != v2);
      uint64_t v2 = *(long long **)a1;
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while ((long long *)v10 != v2)
      {
        v10 -= 88;
        sub_1CD84E9B0(v10);
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t llvm::TimerGroup::getTimer(uint64_t a1, const void *a2, size_t a3)
{
  if (!atomic_load_explicit(qword_1EBCFB298, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB298, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  uint64_t v6 = (std::recursive_mutex *)qword_1EBCFB298[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB298[0]);
  for (uint64_t i = *(void *)(a1 + 48); i; uint64_t i = *(void *)(i + 152))
  {
    char v8 = *(unsigned char *)(i + 103);
    if (v8 >= 0) {
      uint64_t v9 = (const void *)(i + 80);
    }
    else {
      uint64_t v9 = *(const void **)(i + 80);
    }
    uint64_t v10 = *(void *)(i + 88);
    if (v8 >= 0) {
      uint64_t v10 = v8 & 0x7F;
    }
    if (v10 == a3 && (!a3 || !memcmp(v9, a2, a3))) {
      break;
    }
  }
  std::recursive_mutex::unlock(v6);
  return i;
}

uint64_t llvm::getNamedTimer(unsigned __int8 *a1, size_t a2, unsigned __int8 *a3, size_t a4)
{
  if (!atomic_load_explicit(qword_1EBCFB298, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB298, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  atomic_ullong v7 = qword_1EBCFB298[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB298[0]);
  if (!atomic_load_explicit(qword_1EBCFB280, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB280, (void *(*)(void))sub_1CD0B6F0C, (void (*)(void *))sub_1CD0B6F48);
  }
  atomic_ullong v8 = qword_1EBCFB280[0];
  if (!atomic_load_explicit(qword_1EBCFB298, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB298, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  atomic_ullong v9 = qword_1EBCFB298[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB298[0]);
  uint64_t v10 = *(unsigned int *)(v8 + 8);
  uint64_t v42 = (std::recursive_mutex *)v7;
  int32x4_t v43 = (std::recursive_mutex *)v9;
  if (v10)
  {
    int v11 = 0;
    if (a2)
    {
      size_t v12 = a2;
      uint64_t v13 = a1;
      do
      {
        int v14 = *v13++;
        int v11 = 33 * v11 + v14;
        --v12;
      }
      while (v12);
    }
    uint64_t v15 = *(void *)v8;
    uint64_t v16 = *(void *)v8 + 8 * v10 + 8;
    int v17 = 1;
    int v18 = v11;
    while (1)
    {
      uint64_t v19 = v18 & (v10 - 1);
      uint64_t v20 = *(void **)(v15 + 8 * v19);
      if (v20 != (void *)-8)
      {
        if (!v20) {
          goto LABEL_21;
        }
        if (*(_DWORD *)(v16 + 4 * v19) == v11
          && a2 == *v20
          && (!a2 || !memcmp(a1, (char *)v20 + *(unsigned int *)(v8 + 20), a2)))
        {
          break;
        }
      }
      int v18 = v17 + v19;
      ++v17;
    }
    if (v19 != -1) {
      uint64_t v10 = (int)v19;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v15 = *(void *)v8;
  }
LABEL_21:
  uint64_t v21 = (uint64_t *)(v15 + 8 * v10);
  std::recursive_mutex::unlock(v43);
  if (!atomic_load_explicit(qword_1EBCFB280, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB280, (void *(*)(void))sub_1CD0B6F0C, (void (*)(void *))sub_1CD0B6F48);
  }
  if (v21 != (uint64_t *)(*(void *)qword_1EBCFB280[0] + 8 * *(unsigned int *)(qword_1EBCFB280[0] + 8)))
  {
    uint64_t v22 = *v21;
    uint64_t v23 = *(unsigned int *)(*v21 + 24);
    if (v23)
    {
      int v24 = 0;
      if (a4)
      {
        size_t v25 = a4;
        BOOL v26 = a3;
        do
        {
          int v27 = *v26++;
          int v24 = 33 * v24 + v27;
          --v25;
        }
        while (v25);
      }
      uint64_t v28 = *(void *)(v22 + 16);
      int v29 = 1;
      int v30 = v24;
      while (1)
      {
        uint64_t v31 = v30 & (v23 - 1);
        uint64_t v32 = *(void **)(v28 + 8 * v31);
        if (v32 != (void *)-8)
        {
          if (!v32) {
            goto LABEL_51;
          }
          if (*(_DWORD *)(v28 + 8 * v23 + 8 + 4 * v31) == v24
            && a4 == *v32
            && (!a4 || !memcmp(a3, (char *)v32 + *(unsigned int *)(v22 + 36), a4)))
          {
            break;
          }
        }
        int v30 = v29 + v31;
        ++v29;
      }
      if (v31 != -1 && (int)v31 != v23)
      {
        uint64_t v40 = *(void *)(v28 + 8 * (int)v31) + 8;
        goto LABEL_52;
      }
    }
LABEL_51:
    uint64_t v40 = 0;
LABEL_52:
    unint64_t v34 = v42;
    goto LABEL_53;
  }
  uint64_t v33 = qword_1EBCFB230;
  if (!qword_1EBCFB230) {
    goto LABEL_51;
  }
  unint64_t v34 = v42;
  while (1)
  {
    char v35 = *(unsigned char *)(v33 + 23);
    BOOL v36 = v35 < 0;
    if (v35 >= 0) {
      int v37 = (const void *)v33;
    }
    else {
      int v37 = *(const void **)v33;
    }
    uint64_t v38 = v35 & 0x7F;
    if (v36) {
      uint64_t v38 = *(void *)(v33 + 8);
    }
    if (v38 == a2 && (!a2 || !memcmp(v37, a1, a2)))
    {
      uint64_t Timer = llvm::TimerGroup::getTimer(v33, a3, a4);
      if (Timer) {
        break;
      }
    }
    uint64_t v33 = *(void *)(v33 + 88);
    if (!v33)
    {
      uint64_t v40 = 0;
      goto LABEL_53;
    }
  }
  uint64_t v40 = Timer;
LABEL_53:
  std::recursive_mutex::unlock(v34);
  return v40;
}

void sub_1CD0B521C()
{
}

void sub_1CD0B5270()
{
}

void sub_1CD0B52C8()
{
}

uint64_t sub_1CD0B5390(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  memset(&__p, 0, sizeof(__p));
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_18;
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_10:
  }
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_13:
  std::string __p = __dst;
  std::string::operator=(*(std::string **)(a1 + 128), &__p);
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v13 = *(void *)(a1 + 208);
  if (!v13)
  {
    sub_1CB920400();
LABEL_18:
    abort();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 48))(v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1CD0B54D0()
{
}

void sub_1CD0B5538(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD84E9B0(v4 - 88);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CD0B55BC(long long **a1, long long *a2, long long *a3, long long *a4)
{
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    abort();
  }
  if (0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v10 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v10 = v5;
  }
  if (v10)
  {
    if (v10 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    size_t v11 = (char *)operator new(88 * v10);
  }
  else
  {
    size_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[88 * v4];
  uint64_t v13 = (long long *)&v11[88 * v10];
  uint64_t v14 = sub_1CD84EA84(v12, a2, a3, a4);
  uint64_t v15 = v14 + 88;
  int v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v15;
    a1[2] = v13;
  }
  else
  {
    do
    {
      uint64_t v16 = (long long *)((char *)v16 - 88);
      uint64_t v14 = sub_1CD84E9F4(v14 - 88, v16);
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
    uint64_t v18 = (uint64_t)a1[1];
    *a1 = (long long *)v14;
    a1[1] = (long long *)v15;
    a1[2] = v13;
    while ((long long *)v18 != v16)
    {
      v18 -= 88;
      sub_1CD84E9B0(v18);
    }
  }
  if (v16) {
    operator delete(v16);
  }
  return v15;
}

void sub_1CD0B572C(uint64_t a1, double *a2)
{
  if ((double *)a1 != a2)
  {
    uint64_t v21 = v2;
    uint64_t v22 = v3;
    uint64_t v6 = (long long *)(a1 + 88);
    if ((double *)(a1 + 88) != a2)
    {
      uint64_t v7 = 0;
      atomic_ullong v8 = (double *)a1;
      do
      {
        double v9 = v8[11];
        double v10 = *v8;
        atomic_ullong v8 = (double *)v6;
        if (v9 < v10)
        {
          sub_1CD84E9F4((uint64_t)v17, v6);
          uint64_t v11 = v7;
          while (1)
          {
            uint64_t v12 = a1 + v11;
            long long v13 = *(_OWORD *)(a1 + v11 + 16);
            *(_OWORD *)(v12 + 88) = *(_OWORD *)(a1 + v11);
            *(_OWORD *)(v12 + 104) = v13;
            *(void *)(v12 + 120) = *(void *)(a1 + v11 + 32);
            uint64_t v14 = (std::string *)(a1 + v11 + 40);
            std::string::operator=((std::string *)(a1 + v11 + 128), v14);
            std::string::operator=((std::string *)(v12 + 152), (const std::string *)(v12 + 64));
            if (!v11) {
              break;
            }
            v11 -= 88;
            if (*(double *)v17 >= *(double *)(v12 - 88))
            {
              uint64_t v15 = a1 + v11 + 88;
              goto LABEL_12;
            }
          }
          uint64_t v15 = a1;
LABEL_12:
          long long v16 = v17[1];
          *(_OWORD *)uint64_t v15 = v17[0];
          *(_OWORD *)(v15 + 16) = v16;
          *(void *)(v15 + 32) = v18;
          std::string::operator=(v14, &v19);
          std::string::operator=((std::string *)(v12 + 64), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v6 = (long long *)(v8 + 11);
        v7 += 88;
      }
      while (v8 + 11 != a2);
    }
  }
}

void sub_1CD0B588C(uint64_t a1, double *a2)
{
  if ((double *)a1 != a2)
  {
    uint64_t v18 = v2;
    uint64_t v19 = v3;
    unint64_t v5 = (double *)a1;
    uint64_t v6 = (long long *)(a1 + 88);
    if ((double *)(a1 + 88) != a2)
    {
      uint64_t v7 = a1 - 88;
      do
      {
        double v8 = v5[11];
        double v9 = *v5;
        unint64_t v5 = (double *)v6;
        if (v8 < v9)
        {
          sub_1CD84E9F4((uint64_t)v14, v6);
          uint64_t v10 = v7;
          do
          {
            long long v11 = *(_OWORD *)(v10 + 104);
            *(_OWORD *)(v10 + 176) = *(_OWORD *)(v10 + 88);
            *(_OWORD *)(v10 + 192) = v11;
            *(void *)(v10 + 208) = *(void *)(v10 + 120);
            std::string::operator=((std::string *)(v10 + 216), (const std::string *)(v10 + 128));
            std::string::operator=((std::string *)(v10 + 240), (const std::string *)(v10 + 152));
            double v12 = *(double *)v10;
            v10 -= 88;
          }
          while (*(double *)v14 < v12);
          long long v13 = v14[1];
          *(_OWORD *)(v10 + 176) = v14[0];
          *(_OWORD *)(v10 + 192) = v13;
          *(void *)(v10 + 208) = v15;
          std::string::operator=((std::string *)(v10 + 216), &v16);
          std::string::operator=((std::string *)(v10 + 240), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v6 = (long long *)(v5 + 11);
        v7 += 88;
      }
      while (v5 + 11 != a2);
    }
  }
}

double sub_1CD0B59B4(uint64_t a1, long long *a2, long long *a3)
{
  double result = *(double *)a2;
  double v7 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    double v8 = (std::string *)(a1 + 40);
    double v9 = (std::string *)(a1 + 64);
    if (v7 >= result)
    {
      sub_1CD84E9F4((uint64_t)&v27, (long long *)a1);
      long long v21 = *a2;
      long long v22 = a2[1];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(_OWORD *)a1 = v21;
      *(_OWORD *)(a1 + 16) = v22;
      std::string::operator=(v8, (const std::string *)((char *)a2 + 40));
      std::string::operator=(v9, (const std::string *)(a2 + 4));
      long long v23 = v28;
      *a2 = v27;
      a2[1] = v23;
      *((void *)a2 + 4) = v29;
      std::string::operator=((std::string *)((char *)a2 + 40), &v30);
      std::string::operator=((std::string *)(a2 + 4), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      double result = *(double *)a3;
      if (*(double *)a3 >= *(double *)a2) {
        return result;
      }
      sub_1CD84E9F4((uint64_t)&v27, a2);
      long long v24 = *a3;
      long long v25 = a3[1];
      *((void *)a2 + 4) = *((void *)a3 + 4);
      *a2 = v24;
      a2[1] = v25;
      std::string::operator=((std::string *)((char *)a2 + 40), (const std::string *)((char *)a3 + 40));
      double v12 = (std::string *)(a3 + 4);
      std::string::operator=((std::string *)(a2 + 4), (const std::string *)(a3 + 4));
      long long v26 = v28;
      *a3 = v27;
      a3[1] = v26;
      *((void *)a3 + 4) = v29;
      std::string::operator=((std::string *)((char *)a3 + 40), &v30);
    }
    else
    {
      sub_1CD84E9F4((uint64_t)&v27, (long long *)a1);
      long long v10 = *a3;
      long long v11 = a3[1];
      *(void *)(a1 + 32) = *((void *)a3 + 4);
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v11;
      std::string::operator=((std::string *)(a1 + 40), (const std::string *)((char *)a3 + 40));
      double v12 = (std::string *)(a3 + 4);
      std::string::operator=(v9, (const std::string *)(a3 + 4));
      long long v13 = v28;
      *a3 = v27;
      a3[1] = v13;
      *((void *)a3 + 4) = v29;
      std::string::operator=((std::string *)((char *)a3 + 40), &v30);
    }
    uint64_t v14 = v12;
LABEL_7:
    std::string::operator=(v14, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    return result;
  }
  if (v7 < result)
  {
    sub_1CD84E9F4((uint64_t)&v27, a2);
    long long v15 = *a3;
    long long v16 = a3[1];
    *((void *)a2 + 4) = *((void *)a3 + 4);
    *a2 = v15;
    a2[1] = v16;
    std::string::operator=((std::string *)((char *)a2 + 40), (const std::string *)((char *)a3 + 40));
    std::string::operator=((std::string *)(a2 + 4), (const std::string *)(a3 + 4));
    long long v17 = v28;
    *a3 = v27;
    a3[1] = v17;
    *((void *)a3 + 4) = v29;
    std::string::operator=((std::string *)((char *)a3 + 40), &v30);
    std::string::operator=((std::string *)(a3 + 4), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    double result = *(double *)a2;
    if (*(double *)a2 < *(double *)a1)
    {
      sub_1CD84E9F4((uint64_t)&v27, (long long *)a1);
      long long v18 = *a2;
      long long v19 = a2[1];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(_OWORD *)a1 = v18;
      *(_OWORD *)(a1 + 16) = v19;
      std::string::operator=((std::string *)(a1 + 40), (const std::string *)((char *)a2 + 40));
      std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 4));
      long long v20 = v28;
      *a2 = v27;
      a2[1] = v20;
      *((void *)a2 + 4) = v29;
      std::string::operator=((std::string *)((char *)a2 + 40), &v30);
      uint64_t v14 = (std::string *)(a2 + 4);
      goto LABEL_7;
    }
  }
  return result;
}

unint64_t sub_1CD0B5CB8(unint64_t a1, long long *a2)
{
  sub_1CD84E9F4((uint64_t)v20, (long long *)a1);
  if (*(double *)v20 >= *((double *)a2 - 11))
  {
    unint64_t v6 = a1 + 88;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      v6 += 88;
    }
    while (*(double *)v20 >= *(double *)v4);
  }
  else
  {
    unint64_t v4 = a1;
    do
    {
      double v5 = *(double *)(v4 + 88);
      v4 += 88;
    }
    while (*(double *)v20 >= v5);
  }
  if (v4 < (unint64_t)a2)
  {
    do
    {
      double v7 = *((double *)a2 - 11);
      a2 = (long long *)((char *)a2 - 88);
    }
    while (*(double *)v20 < v7);
  }
  while (v4 < (unint64_t)a2)
  {
    sub_1CD84E9F4((uint64_t)v24, (long long *)v4);
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(v4 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v4 = v8;
    *(_OWORD *)(v4 + 16) = v9;
    std::string::operator=((std::string *)(v4 + 40), (const std::string *)((char *)a2 + 40));
    std::string::operator=((std::string *)(v4 + 64), (const std::string *)(a2 + 4));
    uint64_t v10 = v25;
    long long v11 = v24[1];
    *a2 = v24[0];
    a2[1] = v11;
    *((void *)a2 + 4) = v10;
    std::string::operator=((std::string *)((char *)a2 + 40), &v26);
    std::string::operator=((std::string *)(a2 + 4), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    do
    {
      double v12 = *(double *)(v4 + 88);
      v4 += 88;
    }
    while (*(double *)v20 >= v12);
    do
    {
      double v13 = *((double *)a2 - 11);
      a2 = (long long *)((char *)a2 - 88);
    }
    while (*(double *)v20 < v13);
  }
  uint64_t v14 = (long long *)(v4 - 88);
  if (v4 - 88 != a1)
  {
    long long v15 = *v14;
    long long v16 = *(_OWORD *)(v4 - 72);
    *(void *)(a1 + 32) = *(void *)(v4 - 56);
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(v4 - 48));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(v4 - 24));
  }
  long long v17 = v20[0];
  long long v18 = v20[1];
  *(void *)(v4 - 56) = v21;
  *uint64_t v14 = v17;
  *(_OWORD *)(v4 - 72) = v18;
  std::string::operator=((std::string *)(v4 - 48), &v22);
  std::string::operator=((std::string *)(v4 - 24), &v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v4;
}

unint64_t sub_1CD0B5EA4(uint64_t a1, double *a2)
{
  sub_1CD84E9F4((uint64_t)v23, (long long *)a1);
  uint64_t v4 = 0;
  do
  {
    double v5 = *(double *)(a1 + v4 + 88);
    v4 += 88;
  }
  while (v5 < *(double *)v23);
  unint64_t v6 = a1 + v4;
  if (v4 == 88)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      double v8 = *(a2 - 11);
      a2 -= 11;
    }
    while (v8 >= *(double *)v23);
  }
  else
  {
    do
    {
      double v7 = *(a2 - 11);
      a2 -= 11;
    }
    while (v7 >= *(double *)v23);
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v9 = a1 + v4;
  }
  else
  {
    unint64_t v9 = a1 + v4;
    uint64_t v10 = a2;
    do
    {
      sub_1CD84E9F4((uint64_t)v27, (long long *)v9);
      long long v11 = *(_OWORD *)v10;
      long long v12 = *((_OWORD *)v10 + 1);
      *(double *)(v9 + 32) = v10[4];
      *(_OWORD *)unint64_t v9 = v11;
      *(_OWORD *)(v9 + 16) = v12;
      std::string::operator=((std::string *)(v9 + 40), (const std::string *)(v10 + 5));
      std::string::operator=((std::string *)(v9 + 64), (const std::string *)(v10 + 8));
      uint64_t v13 = v28;
      long long v14 = v27[1];
      *(_OWORD *)uint64_t v10 = v27[0];
      *((_OWORD *)v10 + 1) = v14;
      *((void *)v10 + 4) = v13;
      std::string::operator=((std::string *)(v10 + 5), &v29);
      std::string::operator=((std::string *)(v10 + 8), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      do
      {
        double v15 = *(double *)(v9 + 88);
        v9 += 88;
      }
      while (v15 < *(double *)v23);
      do
      {
        double v16 = *(v10 - 11);
        v10 -= 11;
      }
      while (v16 >= *(double *)v23);
    }
    while (v9 < (unint64_t)v10);
  }
  long long v17 = (long long *)(v9 - 88);
  if (v9 - 88 != a1)
  {
    long long v18 = *v17;
    long long v19 = *(_OWORD *)(v9 - 72);
    *(void *)(a1 + 32) = *(void *)(v9 - 56);
    *(_OWORD *)a1 = v18;
    *(_OWORD *)(a1 + 16) = v19;
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(v9 - 48));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(v9 - 24));
  }
  long long v20 = v23[0];
  long long v21 = v23[1];
  *(void *)(v9 - 56) = v24;
  long long *v17 = v20;
  *(_OWORD *)(v9 - 72) = v21;
  std::string::operator=((std::string *)(v9 - 48), &v25);
  std::string::operator=((std::string *)(v9 - 24), &v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v9 - 88;
}

BOOL sub_1CD0B60A4(uint64_t a1, long long *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = (long long *)((char *)a2 - 88);
      if (*((double *)a2 - 11) < *(double *)a1)
      {
        sub_1CD84E9F4((uint64_t)&v21, (long long *)a1);
        long long v7 = *v6;
        long long v8 = *(long long *)((char *)a2 - 72);
        *(void *)(a1 + 32) = *((void *)a2 - 7);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2 - 2);
        std::string::operator=((std::string *)(a1 + 64), (const std::string *)a2 - 1);
        long long v9 = v22;
        *unint64_t v6 = v21;
        *(long long *)((char *)a2 - 72) = v9;
        *((void *)a2 - 7) = v23;
        std::string::operator=((std::string *)a2 - 2, &v24);
        std::string::operator=((std::string *)a2 - 1, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        return 1;
      }
      return result;
    case 3:
      sub_1CD0B59B4(a1, (long long *)(a1 + 88), (long long *)((char *)a2 - 88));
      return 1;
    case 4:
      sub_1CD0B643C(a1, a1 + 88, a1 + 176, (long long *)((char *)a2 - 88));
      return 1;
    case 5:
      sub_1CD0B666C(a1, a1 + 88, a1 + 176, a1 + 264, (long long *)((char *)a2 - 88));
      return 1;
    default:
      uint64_t v10 = (double *)(a1 + 176);
      sub_1CD0B59B4(a1, (long long *)(a1 + 88), (long long *)(a1 + 176));
      long long v11 = (long long *)(a1 + 264);
      if ((long long *)(a1 + 264) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    if (*(double *)v11 < *v10)
    {
      sub_1CD84E9F4((uint64_t)&v21, v11);
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        double v16 = (_OWORD *)(a1 + v14 + 264);
        long long v17 = *(_OWORD *)(a1 + v14 + 192);
        *double v16 = *(_OWORD *)(a1 + v14 + 176);
        v16[1] = v17;
        *(void *)(a1 + v14 + 296) = *(void *)(a1 + v14 + 208);
        long long v18 = (std::string *)(a1 + v14 + 216);
        std::string::operator=((std::string *)(a1 + v14 + 304), v18);
        std::string::operator=((std::string *)(v15 + 328), (const std::string *)(v15 + 240));
        if (v14 == -176) {
          break;
        }
        v14 -= 88;
        if (*(double *)&v21 >= *(double *)(v15 + 88))
        {
          uint64_t v19 = a1 + v14 + 264;
          goto LABEL_17;
        }
      }
      uint64_t v19 = a1;
LABEL_17:
      long long v20 = v22;
      *(_OWORD *)uint64_t v19 = v21;
      *(_OWORD *)(v19 + 16) = v20;
      *(void *)(v19 + 32) = v23;
      std::string::operator=(v18, &v24);
      std::string::operator=((std::string *)(v15 + 240), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (++v13 == 8) {
        return (long long *)((char *)v11 + 88) == a2;
      }
    }
    uint64_t v10 = (double *)v11;
    v12 += 88;
    long long v11 = (long long *)((char *)v11 + 88);
  }
  while (v11 != a2);
  return 1;
}

void sub_1CD0B637C(uint64_t a1, long long *a2)
{
  sub_1CD84E9F4((uint64_t)v7, (long long *)a1);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)((char *)a2 + 40));
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 4));
  long long v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  *((void *)a2 + 4) = v8;
  std::string::operator=((std::string *)((char *)a2 + 40), &v9);
  std::string::operator=((std::string *)(a2 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1CD0B643C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  sub_1CD0B59B4(a1, (long long *)a2, (long long *)a3);
  if (*(double *)a4 < *(double *)a3)
  {
    sub_1CD84E9F4((uint64_t)&v17, (long long *)a3);
    long long v8 = *a4;
    long long v9 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
    std::string::operator=((std::string *)(a3 + 40), (const std::string *)((char *)a4 + 40));
    std::string::operator=((std::string *)(a3 + 64), (const std::string *)(a4 + 4));
    long long v10 = v18;
    *a4 = v17;
    a4[1] = v10;
    *((void *)a4 + 4) = v19;
    std::string::operator=((std::string *)((char *)a4 + 40), &v20);
    std::string::operator=((std::string *)(a4 + 4), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (*(double *)a3 < *(double *)a2)
    {
      sub_1CD84E9F4((uint64_t)&v17, (long long *)a2);
      long long v11 = *(_OWORD *)a3;
      long long v12 = *(_OWORD *)(a3 + 16);
      *(void *)(a2 + 32) = *(void *)(a3 + 32);
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v12;
      std::string::operator=((std::string *)(a2 + 40), (const std::string *)(a3 + 40));
      std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a3 + 64));
      long long v13 = v18;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v13;
      *(void *)(a3 + 32) = v19;
      std::string::operator=((std::string *)(a3 + 40), &v20);
      std::string::operator=((std::string *)(a3 + 64), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (*(double *)a2 < *(double *)a1)
      {
        sub_1CD84E9F4((uint64_t)&v17, (long long *)a1);
        long long v14 = *(_OWORD *)a2;
        long long v15 = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)a1 = v14;
        *(_OWORD *)(a1 + 16) = v15;
        std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
        std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
        long long v16 = v18;
        *(_OWORD *)a2 = v17;
        *(_OWORD *)(a2 + 16) = v16;
        *(void *)(a2 + 32) = v19;
        std::string::operator=((std::string *)(a2 + 40), &v20);
        std::string::operator=((std::string *)(a2 + 64), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_1CD0B666C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  sub_1CD0B643C(a1, a2, a3, (long long *)a4);
  if (*(double *)a5 < *(double *)a4)
  {
    sub_1CD84E9F4((uint64_t)&v22, (long long *)a4);
    long long v10 = *a5;
    long long v11 = a5[1];
    *(void *)(a4 + 32) = *((void *)a5 + 4);
    *(_OWORD *)a4 = v10;
    *(_OWORD *)(a4 + 16) = v11;
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)((char *)a5 + 40));
    std::string::operator=((std::string *)(a4 + 64), (const std::string *)(a5 + 4));
    long long v12 = v23;
    *a5 = v22;
    a5[1] = v12;
    *((void *)a5 + 4) = v24;
    std::string::operator=((std::string *)((char *)a5 + 40), &v25);
    std::string::operator=((std::string *)(a5 + 4), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (*(double *)a4 < *(double *)a3)
    {
      sub_1CD84E9F4((uint64_t)&v22, (long long *)a3);
      long long v13 = *(_OWORD *)a4;
      long long v14 = *(_OWORD *)(a4 + 16);
      *(void *)(a3 + 32) = *(void *)(a4 + 32);
      *(_OWORD *)a3 = v13;
      *(_OWORD *)(a3 + 16) = v14;
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(a4 + 40));
      std::string::operator=((std::string *)(a3 + 64), (const std::string *)(a4 + 64));
      long long v15 = v23;
      *(_OWORD *)a4 = v22;
      *(_OWORD *)(a4 + 16) = v15;
      *(void *)(a4 + 32) = v24;
      std::string::operator=((std::string *)(a4 + 40), &v25);
      std::string::operator=((std::string *)(a4 + 64), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (*(double *)a3 < *(double *)a2)
      {
        sub_1CD84E9F4((uint64_t)&v22, (long long *)a2);
        long long v16 = *(_OWORD *)a3;
        long long v17 = *(_OWORD *)(a3 + 16);
        *(void *)(a2 + 32) = *(void *)(a3 + 32);
        *(_OWORD *)a2 = v16;
        *(_OWORD *)(a2 + 16) = v17;
        std::string::operator=((std::string *)(a2 + 40), (const std::string *)(a3 + 40));
        std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a3 + 64));
        long long v18 = v23;
        *(_OWORD *)a3 = v22;
        *(_OWORD *)(a3 + 16) = v18;
        *(void *)(a3 + 32) = v24;
        std::string::operator=((std::string *)(a3 + 40), &v25);
        std::string::operator=((std::string *)(a3 + 64), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (*(double *)a2 < *(double *)a1)
        {
          sub_1CD84E9F4((uint64_t)&v22, (long long *)a1);
          long long v19 = *(_OWORD *)a2;
          long long v20 = *(_OWORD *)(a2 + 16);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
          std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
          long long v21 = v23;
          *(_OWORD *)a2 = v22;
          *(_OWORD *)(a2 + 16) = v21;
          *(void *)(a2 + 32) = v24;
          std::string::operator=((std::string *)(a2 + 40), &v25);
          std::string::operator=((std::string *)(a2 + 64), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
}

void sub_1CD0B693C(uint64_t a1, long long *a2, long long *a3)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v55 = v3;
    uint64_t v56 = v4;
    long long v6 = (const std::string *)a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 88;
    if ((uint64_t)a2 - a1 >= 89)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (long long *)(a1 + 88 * v10);
      do
      {
        sub_1CD0B6D4C(a1, v9, v12);
        long long v12 = (long long *)((char *)v12 - 88);
        --v11;
      }
      while (v11);
    }
    if (v6 != (const std::string *)a3)
    {
      long long v13 = (long long *)v6;
      do
      {
        if (*(double *)v13 < *(double *)a1)
        {
          sub_1CD84E9F4((uint64_t)&v50, v13);
          long long v14 = *(_OWORD *)a1;
          long long v15 = *(_OWORD *)(a1 + 16);
          *((void *)v13 + 4) = *(void *)(a1 + 32);
          *long long v13 = v14;
          v13[1] = v15;
          std::string::operator=((std::string *)((char *)v13 + 40), (const std::string *)(a1 + 40));
          std::string::operator=((std::string *)(v13 + 4), (const std::string *)(a1 + 64));
          long long v16 = v51;
          *(_OWORD *)a1 = v50;
          *(_OWORD *)(a1 + 16) = v16;
          *(void *)(a1 + 32) = v52;
          std::string::operator=((std::string *)(a1 + 40), &v53);
          std::string::operator=((std::string *)(a1 + 64), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          sub_1CD0B6D4C(a1, v9, (long long *)a1);
        }
        long long v13 = (long long *)((char *)v13 + 88);
      }
      while (v13 != a3);
    }
    if (v8 >= 89)
    {
      long long v17 = (const std::string *)&v47;
      do
      {
        if (v9 < 2) {
          break;
        }
        sub_1CD84E9F4((uint64_t)&v44, (long long *)a1);
        uint64_t v18 = 0;
        uint64_t v19 = a1;
        do
        {
          uint64_t v20 = v19;
          v19 += 88 * v18 + 88;
          uint64_t v21 = 2 * v18;
          uint64_t v18 = (2 * v18) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v9 && *(double *)v19 < *(double *)(v19 + 88))
          {
            v19 += 88;
            uint64_t v18 = v22;
          }
          long long v23 = *(_OWORD *)v19;
          long long v24 = *(_OWORD *)(v19 + 16);
          *(void *)(v20 + 32) = *(void *)(v19 + 32);
          *(_OWORD *)uint64_t v20 = v23;
          *(_OWORD *)(v20 + 16) = v24;
          std::string::operator=((std::string *)(v20 + 40), (const std::string *)(v19 + 40));
          std::string::operator=((std::string *)(v20 + 64), (const std::string *)(v19 + 64));
        }
        while (v18 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        std::string v25 = (std::string *)&v6[-4].__r_.__value_.__r.__words[1];
        if ((std::string::size_type *)v19 == &v6[-4].__r_.__value_.__r.__words[1])
        {
          long long v40 = v44;
          long long v41 = v45;
          *(void *)(v19 + 32) = v46;
          *(_OWORD *)uint64_t v19 = v40;
          *(_OWORD *)(v19 + 16) = v41;
          std::string::operator=((std::string *)(v19 + 40), v17);
          std::string::operator=((std::string *)(v19 + 64), &v49);
        }
        else
        {
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          long long v27 = *(_OWORD *)&v6[-3].__r_.__value_.__l.__data_;
          *(void *)(v19 + 32) = *((void *)&v6[-3].__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v19 = v26;
          *(_OWORD *)(v19 + 16) = v27;
          uint64_t v28 = (std::string *)&v6[-2];
          std::string::operator=((std::string *)(v19 + 40), v6 - 2);
          std::string v29 = (std::string *)&v6[-1];
          std::string::operator=((std::string *)(v19 + 64), v29);
          long long v30 = v45;
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v44;
          *(_OWORD *)&v25->__r_.__value_.__r.__words[2] = v30;
          v25[1].__r_.__value_.__l.__size_ = v46;
          std::string::operator=(v28, v17);
          std::string::operator=(v29, &v49);
          uint64_t v31 = v19 - a1 + 88;
          if (v31 >= 89)
          {
            unint64_t v32 = (v31 / 0x58uLL - 2) >> 1;
            unint64_t v33 = a1 + 88 * v32;
            if (*(double *)v33 < *(double *)v19)
            {
              int32x4_t v43 = v17;
              sub_1CD84E9F4((uint64_t)&v50, (long long *)v19);
              do
              {
                unint64_t v34 = v33;
                long long v35 = *(_OWORD *)v33;
                long long v36 = *(_OWORD *)(v33 + 16);
                *(void *)(v19 + 32) = *(void *)(v33 + 32);
                *(_OWORD *)uint64_t v19 = v35;
                *(_OWORD *)(v19 + 16) = v36;
                int v37 = (std::string *)(v33 + 40);
                std::string::operator=((std::string *)(v19 + 40), (const std::string *)(v33 + 40));
                uint64_t v38 = (std::string *)(v33 + 64);
                std::string::operator=((std::string *)(v19 + 64), (const std::string *)(v33 + 64));
                if (!v32) {
                  break;
                }
                unint64_t v32 = (v32 - 1) >> 1;
                unint64_t v33 = a1 + 88 * v32;
                uint64_t v19 = v34;
              }
              while (*(double *)v33 < *(double *)&v50);
              long long v39 = v51;
              *(_OWORD *)unint64_t v34 = v50;
              *(_OWORD *)(v34 + 16) = v39;
              *(void *)(v34 + 32) = v52;
              std::string::operator=(v37, &v53);
              std::string::operator=(v38, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              long long v17 = v43;
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (v48 < 0) {
          operator delete(v47);
        }
        long long v6 = v25;
      }
      while (v9-- > 2);
    }
  }
}

void sub_1CD0B6D4C(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v5 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    long long v6 = a3;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= 0x2E8BA2E8BA2E8BA3 * (((uint64_t)a3 - a1) >> 3))
    {
      uint64_t v10 = (0x5D1745D1745D1746 * (((uint64_t)a3 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 88 * v10;
      if (0x5D1745D1745D1746 * (((uint64_t)a3 - a1) >> 3) + 2 < a2 && *(double *)v11 < *(double *)(v11 + 88))
      {
        v11 += 88;
        uint64_t v10 = 0x5D1745D1745D1746 * (((uint64_t)a3 - a1) >> 3) + 2;
      }
      if (*(double *)v11 >= *(double *)a3)
      {
        sub_1CD84E9F4((uint64_t)v21, a3);
        do
        {
          uint64_t v12 = v11;
          long long v13 = *(_OWORD *)v11;
          long long v14 = *(_OWORD *)(v11 + 16);
          *((void *)v6 + 4) = *(void *)(v11 + 32);
          *long long v6 = v13;
          v6[1] = v14;
          long long v15 = (std::string *)(v11 + 40);
          std::string::operator=((std::string *)((char *)v6 + 40), (const std::string *)(v11 + 40));
          long long v16 = (std::string *)(v11 + 64);
          std::string::operator=((std::string *)(v6 + 4), (const std::string *)(v11 + 64));
          if (v8 < v10) {
            break;
          }
          uint64_t v17 = 2 * v10;
          uint64_t v10 = (2 * v10) | 1;
          uint64_t v11 = a1 + 88 * v10;
          uint64_t v18 = v17 + 2;
          if (v18 < a2 && *(double *)v11 < *(double *)(v11 + 88))
          {
            v11 += 88;
            uint64_t v10 = v18;
          }
          long long v6 = (long long *)v12;
        }
        while (*(double *)v11 >= *(double *)v21);
        long long v19 = v21[0];
        long long v20 = v21[1];
        *(void *)(v12 + 32) = v22;
        *(_OWORD *)uint64_t v12 = v19;
        *(_OWORD *)(v12 + 16) = v20;
        std::string::operator=(v15, &v23);
        std::string::operator=(v16, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_1CD0B6F0C()
{
}

uint64_t sub_1CD0B6F48(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(unsigned int *)(result + 8);
    if (v3)
    {
      for (uint64_t i = *(uint64_t **)result; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(uint64_t **)result;
    }
    uint64_t v5 = *(void *)result + 8 * v3;
    if (i != (uint64_t *)v5)
    {
      uint64_t v7 = *i;
      do
      {
        uint64_t v8 = *(llvm::TimerGroup **)(v7 + 8);
        if (v8)
        {
          llvm::TimerGroup::~TimerGroup(v8);
          MEMORY[0x1D25D9CE0]();
        }
        do
        {
          uint64_t v9 = i[1];
          ++i;
          uint64_t v7 = v9;
          if (v9) {
            BOOL v10 = v7 == -8;
          }
          else {
            BOOL v10 = 1;
          }
        }
        while (v10);
      }
      while (i != (uint64_t *)v5);
    }
    sub_1CD84EEDC(v2);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

std::string *llvm::ToolOutputFile::ToolOutputFile(std::string *a1, std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v4 = llvm::ToolOutputFile::CleanupInstaller::CleanupInstaller(a1, a2, a3);
  v4[1].__r_.__value_.__s.__data_[8] = 0;
  uint64_t v5 = &v4[1].__r_.__value_.__s.__data_[8];
  v4[5].__r_.__value_.__s.__data_[8] = 0;
  sub_1CD84F1F0((llvm::raw_fd_ostream *)&v4[1].__r_.__value_.__r.__words[1]);
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  return a1;
}

{
  std::string *v4;
  std::string::value_type *v5;

  uint64_t v4 = llvm::ToolOutputFile::CleanupInstaller::CleanupInstaller(a1, a2, a3);
  v4[1].__r_.__value_.__s.__data_[8] = 0;
  uint64_t v5 = &v4[1].__r_.__value_.__s.__data_[8];
  v4[5].__r_.__value_.__s.__data_[8] = 0;
  sub_1CD84F1F0((llvm::raw_fd_ostream *)&v4[1].__r_.__value_.__r.__words[1]);
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  return a1;
}

void llvm::TrigramIndex::insert(uint64_t a1, char *a2)
{
  if (*(unsigned char *)a1) {
    return;
  }
  long long v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = &v39;
  char v3 = a2[23];
  BOOL v4 = v3 < 0;
  if (v3 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  uint64_t v6 = v3 & 0x7F;
  if (v4) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  else {
    uint64_t v7 = v6;
  }
  if (!v7)
  {
LABEL_45:
    *(unsigned char *)a1 = 1;
    goto LABEL_62;
  }
  unsigned int v8 = 0;
  int v9 = 0;
  char v10 = 0;
  int v11 = 0;
  uint64_t v12 = &v5[v7];
  uint64_t v13 = a1 + 32;
  uint64_t v36 = a1 + 32;
  do
  {
    int v14 = *v5;
    if (v10)
    {
      if ((v14 - 49) <= 8) {
        goto LABEL_45;
      }
    }
    else
    {
      if (v14 == 92)
      {
        char v10 = 1;
        goto LABEL_21;
      }
      if (memchr("()^$|+?[]\\{}", *v5, 0xDuLL)) {
        goto LABEL_45;
      }
      if ((v14 & 0xFFFFFFFB) == 0x2A)
      {
        unsigned int v8 = 0;
        char v10 = 0;
        int v9 = 0;
        int v37 = 0;
        goto LABEL_21;
      }
    }
    int v15 = v14 + (v8 << 8);
    unsigned int v8 = v15 & 0xFFFFFF;
    int v37 = v15 & 0xFFFFFF;
    if (++v9 >= 3 && *((_DWORD *)sub_1CD0B7544(v13, v15 & 0xFFFFFF, &v37) + 8) <= 3u)
    {
      ++v11;
      for (uint64_t i = v39; i; uint64_t i = (uint64_t *)*i)
      {
        unsigned int v17 = *((_DWORD *)i + 7);
        if (v8 >= v17)
        {
          if (v17 >= v8) {
            goto LABEL_20;
          }
          ++i;
        }
      }
      uint64_t v18 = sub_1CD0B7544(v13, v8, &v37);
      unint64_t v19 = *((unsigned int *)v18 + 8);
      if (v19 >= *((unsigned int *)v18 + 9)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v18[3] + 8 * v19) = (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2;
      ++*((_DWORD *)v18 + 8);
      long long v20 = v39;
      uint64_t v21 = &v39;
      uint64_t v22 = &v39;
      if (v39)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v21 = (uint64_t **)v20;
            unsigned int v23 = *((_DWORD *)v20 + 7);
            if (v8 >= v23) {
              break;
            }
            long long v20 = *v21;
            uint64_t v22 = v21;
            if (!*v21) {
              goto LABEL_37;
            }
          }
          if (v23 >= v8) {
            break;
          }
          long long v20 = v21[1];
          if (!v20)
          {
            uint64_t v22 = v21 + 1;
            goto LABEL_37;
          }
        }
        char v10 = 0;
      }
      else
      {
LABEL_37:
        long long v24 = operator new(0x20uLL);
        v24[7] = v8;
        *(void *)long long v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = v21;
        long long *v22 = (uint64_t *)v24;
        if (*v38)
        {
          uint64_t v38 = (uint64_t **)*v38;
          long long v24 = *v22;
        }
        sub_1CB8358B8(v39, (uint64_t *)v24);
        char v10 = 0;
        ++v40;
      }
      uint64_t v13 = v36;
    }
    else
    {
LABEL_20:
      char v10 = 0;
    }
LABEL_21:
    ++v5;
  }
  while (v5 != v12);
  if (!v11) {
    goto LABEL_45;
  }
  uint64_t v26 = *(char **)(a1 + 16);
  unint64_t v25 = *(void *)(a1 + 24);
  if ((unint64_t)v26 >= v25)
  {
    uint64_t v28 = *(char **)(a1 + 8);
    uint64_t v29 = (v26 - v28) >> 2;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 62) {
      abort();
    }
    uint64_t v31 = v25 - (void)v28;
    if (v31 >> 1 > v30) {
      unint64_t v30 = v31 >> 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 >> 62) {
        sub_1CB833614();
      }
      unint64_t v33 = (char *)operator new(4 * v32);
    }
    else
    {
      unint64_t v33 = 0;
    }
    unint64_t v34 = &v33[4 * v29];
    *(_DWORD *)unint64_t v34 = v11;
    long long v27 = v34 + 4;
    while (v26 != v28)
    {
      int v35 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *((_DWORD *)v34 - 1) = v35;
      v34 -= 4;
    }
    *(void *)(a1 + 8) = v34;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + 24) = &v33[4 * v32];
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v26 = v11;
    long long v27 = v26 + 4;
  }
  *(void *)(a1 + 16) = v27;
LABEL_62:
  sub_1CB833A08((uint64_t)&v38, v39);
}

BOOL llvm::TrigramIndex::isDefinitelyOut(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v9 = v7 - v8;
    if (v7 == v8)
    {
      char v10 = 0;
      if (!a3) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v9 < 0) {
        abort();
      }
      char v10 = operator new(v7 - v8);
      bzero(v10, v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (!a3)
      {
LABEL_18:
        BOOL v3 = 1;
        if (!v10) {
          return v3;
        }
LABEL_19:
        operator delete(v10);
        return v3;
      }
    }
    int v11 = 0;
    BOOL v3 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = (void *)(a1 + 32);
    while (1)
    {
      int v14 = *(char *)(a2 + v12) + (v11 << 8);
      int v11 = v14 & 0xFFFFFF;
      if (v12 >= 2)
      {
        int v15 = sub_1CD84F244(v13, v14 & 0xFFFFFF);
        if (v15)
        {
          uint64_t v16 = *((unsigned int *)v15 + 8);
          if (v16) {
            break;
          }
        }
      }
LABEL_10:
      BOOL v3 = ++v12 >= a3;
      if (v12 == a3) {
        goto LABEL_18;
      }
    }
    unsigned int v17 = (uint64_t *)v15[3];
    uint64_t v18 = 8 * v16;
    while (1)
    {
      uint64_t v19 = *v17;
      unsigned int v20 = *((_DWORD *)v10 + *v17) + 1;
      *((_DWORD *)v10 + *v17) = v20;
      if (v20 >= *(_DWORD *)(v8 + 4 * v19)) {
        goto LABEL_19;
      }
      ++v17;
      v18 -= 8;
      if (!v18) {
        goto LABEL_10;
      }
    }
  }
  return 0;
}

void *sub_1CD0B7544(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      char v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          char v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  char v10 = operator new(0x48uLL);
  *char v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = v10 + 5;
  v10[4] = 0x400000000;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1CC9B3D48(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *char v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *char v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

char *llvm::Triple::getOSTypeName(llvm::Triple *this)
{
  return off_1E6857478[(int)this];
}

uint64_t llvm::Triple::getArchTypeForLLVMName(unsigned __int16 *a1, unint64_t a2)
{
  unsigned int v4 = sub_1CD0B853C((uint64_t)a1, a2);
  if (a2 == 7)
  {
    int v5 = 0;
    if (*(_DWORD *)a1 ^ 0x63726161 | *(_DWORD *)((char *)a1 + 3) ^ 0x34366863) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 0x100000003;
    }
LABEL_5:
    int v7 = 0;
    BOOL v8 = 0;
    uint64_t v9 = v6 & 0x100000000;
LABEL_6:
    if (a2 >= 3 && !v9 && *a1 == 28770 && *((unsigned char *)a1 + 2) == 102) {
      uint64_t v6 = v4 | 0x100000000;
    }
    BOOL v11 = a2 == 4;
    if (a2 == 4 && (v6 & 0x300000000) == 0)
    {
      if (*(_DWORD *)a1 == 1798846061)
      {
        uint64_t v6 = 0x10000000FLL;
        goto LABEL_52;
      }
      BOOL v11 = 1;
    }
LABEL_18:
    uint64_t v12 = v6 & 0x300000000;
    BOOL v13 = (v6 & 0x300000000) == 0;
    if (!v11 || v12)
    {
      BOOL v18 = a2 == 6;
      if (a2 == 6 && !v12)
      {
        if (*(_DWORD *)a1 == 1936746861 && a1[2] == 27749)
        {
          uint64_t v6 = 0x100000011;
          goto LABEL_343;
        }
        BOOL v18 = 1;
      }
      int v20 = 0;
      if (!v12 && v18)
      {
        if (*(_DWORD *)a1 == 1936746861 && a1[2] == 13366)
        {
          uint64_t v6 = 0x100000012;
          goto LABEL_343;
        }
        int v20 = 1;
        BOOL v13 = 1;
      }
LABEL_53:
      if (v13 && v5 && *(void *)a1 == 0x6C6534367370696DLL)
      {
        uint64_t v6 = 0x100000013;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 879784813 && a1[2] == 12339)
        {
          uint64_t v6 = 0x100000014;
          goto LABEL_343;
        }
      }
      int v23 = v13 & v7;
      if (v23 == 1)
      {
        if (*(_DWORD *)a1 == 912486512 && *((unsigned char *)a1 + 4) == 52)
        {
          uint64_t v6 = 0x100000017;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 862154864 && *((unsigned char *)a1 + 4) == 50) {
          goto LABEL_96;
        }
      }
      int v26 = v13 && v8;
      if (v13 && v8 && *a1 == 28784 && *((unsigned char *)a1 + 2) == 99)
      {
LABEL_96:
        uint64_t v6 = 0x100000015;
        goto LABEL_343;
      }
      BOOL v28 = a2 == 7 && v13;
      if (v28 && (*(_DWORD *)a1 == 862154864 ? (BOOL v29 = *(_DWORD *)((char *)a1 + 3) == 1701589555) : (BOOL v29 = 0), v29)
        || v23 && (*(_DWORD *)a1 == 1818456176 ? (BOOL v30 = *((unsigned char *)a1 + 4) == 101) : (BOOL v30 = 0), v30))
      {
        uint64_t v6 = 0x100000016;
        goto LABEL_343;
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 912486512 && *(_DWORD *)((char *)a1 + 3) == 1701590070)
        {
          uint64_t v6 = 0x100000018;
          goto LABEL_343;
        }
      }
      else if (v13 && v11 && *(_DWORD *)a1 == 808466034)
      {
        uint64_t v6 = 0x100000019;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 1734634849 && a1[2] == 28259)
        {
          uint64_t v6 = 0x10000001ELL;
          goto LABEL_343;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 1668508018 && *(_DWORD *)((char *)a1 + 3) == 842233443)
        {
          uint64_t v6 = 0x10000001FLL;
          goto LABEL_393;
        }
        if (*(_DWORD *)a1 == 1668508018 && *(_DWORD *)((char *)a1 + 3) == 875984483)
        {
          uint64_t v6 = 0x100000020;
          goto LABEL_393;
        }
        if (*(_DWORD *)a1 == 1635280232 && *(_DWORD *)((char *)a1 + 3) == 1852794721)
        {
          uint64_t v6 = 0x10000000CLL;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1918988403 && *((unsigned char *)a1 + 4) == 99)
        {
          uint64_t v6 = 0x100000021;
          goto LABEL_343;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 1918988403 && *(_DWORD *)((char *)a1 + 3) == 1818583922)
        {
          uint64_t v6 = 0x100000023;
          goto LABEL_393;
        }
        if (*(_DWORD *)a1 == 1918988403 && *(_DWORD *)((char *)a1 + 3) == 964060018)
        {
          uint64_t v6 = 0x100000022;
          goto LABEL_393;
        }
      }
      if (v23 && (*(_DWORD *)a1 == 809055091 ? (BOOL v43 = *((unsigned char *)a1 + 4) == 120) : (BOOL v43 = 0), v43)
        || v28 && (*(_DWORD *)a1 == 1953724787 ? (BOOL v44 = *(_DWORD *)((char *)a1 + 3) == 2053989748) : (BOOL v44 = 0), v44))
      {
        uint64_t v6 = 0x100000024;
        goto LABEL_343;
      }
      if (v26)
      {
        if (*a1 == 25460 && *((unsigned char *)a1 + 2) == 101)
        {
          uint64_t v6 = 0x100000025;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1818583924 && *((unsigned char *)a1 + 4) == 101)
        {
          uint64_t v6 = 0x100000026;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 1836410996 && *((unsigned char *)a1 + 4) == 98)
        {
          uint64_t v6 = 0x100000027;
          goto LABEL_343;
        }
      }
      if (v28 && *(_DWORD *)a1 == 1836410996 && *(_DWORD *)((char *)a1 + 3) == 1650811501)
      {
        uint64_t v6 = 0x100000028;
        goto LABEL_343;
      }
      if (v26 && (*a1 == 14456 ? (BOOL v49 = *((unsigned char *)a1 + 2) == 54) : (BOOL v49 = 0), v49)
        || (int v50 = v13 && v11) != 0 && *(_DWORD *)a1 == 909652841)
      {
        uint64_t v6 = 0x100000029;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 758528120 && a1[2] == 13366)
        {
          uint64_t v6 = 0x10000002ALL;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1919902584 && *((unsigned char *)a1 + 4) == 101)
        {
          uint64_t v6 = 0x10000002BLL;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 1953527406 && *((unsigned char *)a1 + 4) == 120)
        {
          uint64_t v6 = 0x10000002CLL;
          goto LABEL_343;
        }
      }
      if (v28 && *(_DWORD *)a1 == 1953527406 && *(_DWORD *)((char *)a1 + 3) == 875985012)
      {
        uint64_t v6 = 0x10000002DLL;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 1818847081 && a1[2] == 12851)
        {
          uint64_t v6 = 0x10000002ELL;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 1818847081 && a1[2] == 13366)
        {
          uint64_t v6 = 0x10000002FLL;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 863136097 && *((unsigned char *)a1 + 4) == 50)
        {
          uint64_t v6 = 0x100000030;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 913467745 && *((unsigned char *)a1 + 4) == 52)
        {
          uint64_t v6 = 0x100000031;
          goto LABEL_343;
        }
      }
      if (v50)
      {
        if (*(_DWORD *)a1 == 842229100)
        {
          uint64_t v6 = 0x100000032;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 875980140)
        {
          uint64_t v6 = 0x100000033;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1768189281 && *((unsigned char *)a1 + 4) == 108)
        {
          uint64_t v6 = 0x100000034;
          goto LABEL_343;
        }
      }
      if (v28 && *(_DWORD *)a1 == 1768189281 && *(_DWORD *)((char *)a1 + 3) == 875981929)
      {
        uint64_t v6 = 0x100000035;
        goto LABEL_343;
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1767994216 && *((unsigned char *)a1 + 4) == 108)
        {
          uint64_t v6 = 0x100000036;
          goto LABEL_343;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 1767994216 && *(_DWORD *)((char *)a1 + 3) == 875981929)
        {
          uint64_t v6 = 0x100000037;
          goto LABEL_343;
        }
      }
      else if (v50 && *(_DWORD *)a1 == 1919512691)
      {
        uint64_t v6 = 0x100000038;
        goto LABEL_343;
      }
      if (v20 && (*(_DWORD *)a1 == 1919512691 ? (BOOL v63 = a1[2] == 13366) : (BOOL v63 = 0), v63))
      {
        uint64_t v6 = 0x100000039;
      }
      else
      {
        if (v28)
        {
          if (*(_DWORD *)a1 == 1919512691 && *(_DWORD *)((char *)a1 + 3) == 842233458)
          {
            uint64_t v6 = 0x10000003ALL;
            goto LABEL_393;
          }
          if (*(_DWORD *)a1 == 1919512691 && *(_DWORD *)((char *)a1 + 3) == 875984498)
          {
            uint64_t v6 = 0x10000003BLL;
            goto LABEL_393;
          }
          if (*(_DWORD *)a1 == 1768710507 && *(_DWORD *)((char *)a1 + 3) == 1633840489)
          {
            uint64_t v6 = 0x10000003CLL;
            goto LABEL_343;
          }
        }
        if (v23)
        {
          if (*(_DWORD *)a1 == 1634623852 && *((unsigned char *)a1 + 4) == 105)
          {
            uint64_t v6 = 0x10000003ELL;
            goto LABEL_343;
          }
          if (*(_DWORD *)a1 == 1986095219 && *((unsigned char *)a1 + 4) == 101)
          {
            uint64_t v6 = 0x10000003DLL;
            goto LABEL_343;
          }
        }
        if (!v20)
        {
LABEL_322:
          BOOL v8 = a2 == 14;
          if (a2 != 14) {
            BOOL v13 = 0;
          }
          if (v13)
          {
            if (*(void *)a1 == 0x63737265646E6572 && *(void *)(a1 + 3) == 0x3233747069726373)
            {
              uint64_t v6 = 0x100000041;
              goto LABEL_374;
            }
            BOOL v8 = 1;
          }
          goto LABEL_344;
        }
        if (*(_DWORD *)a1 != 1836278135 || a1[2] != 12851)
        {
          if (*(_DWORD *)a1 == 1836278135 && a1[2] == 13366)
          {
            uint64_t v6 = 0x100000040;
            goto LABEL_374;
          }
          goto LABEL_322;
        }
        uint64_t v6 = 0x10000003FLL;
      }
LABEL_343:
      BOOL v8 = a2 == 14;
LABEL_344:
      uint64_t v72 = v6 & 0xFF00000000;
      if (v8
        && !v72
        && (*(void *)a1 == 0x63737265646E6572 ? (BOOL v73 = *(void *)(a1 + 3) == 0x3436747069726373) : (BOOL v73 = 0), v73))
      {
        uint64_t v6 = 0x100000042;
      }
      else
      {
        char v74 = !v11;
        if (v72) {
          char v74 = 1;
        }
        if (v74)
        {
          if (a2 == 2 && !v72)
          {
            if (*a1 == 25974) {
              uint64_t v6 = 0x100000043;
            }
            goto LABEL_388;
          }
          BOOL v75 = a2 == 11;
          if (a2 == 11 && !v72)
          {
            if (*(void *)a1 == 0x637261676E6F6F6CLL && *(void *)((char *)a1 + 3) == 0x323368637261676ELL)
            {
              uint64_t v6 = 0x10000000DLL;
              goto LABEL_393;
            }
            BOOL v75 = 1;
          }
LABEL_375:
          BOOL v77 = (v6 & 0xFF00000000) == 0;
          if (v75 && (v6 & 0xFF00000000) == 0)
          {
            if (*(void *)a1 == 0x637261676E6F6F6CLL && *(void *)((char *)a1 + 3) == 0x343668637261676ELL)
            {
              uint64_t v6 = 0x10000000ELL;
              goto LABEL_393;
            }
            BOOL v77 = 1;
          }
          goto LABEL_389;
        }
        if (*(_DWORD *)a1 != 813197153)
        {
          switch(*(_DWORD *)a1)
          {
            case 0x31786761:
              uint64_t v6 = 0x10000001BLL;
              break;
            case 0x32786761:
              uint64_t v6 = 0x10000001CLL;
              break;
            case 0x33786761:
              uint64_t v6 = 0x10000001DLL;
              break;
            case 0x796B7363:
              uint64_t v6 = 0x10000000ALL;
              break;
          }
          BOOL v11 = 1;
LABEL_388:
          BOOL v77 = (v6 & 0xFF00000000) == 0;
LABEL_389:
          if (v77 && v11 && *(_DWORD *)a1 == 1818851428) {
            uint64_t v6 = 0x10000000BLL;
          }
          goto LABEL_393;
        }
        uint64_t v6 = 0x10000001ALL;
      }
LABEL_374:
      BOOL v75 = a2 == 11;
      goto LABEL_375;
    }
    if (*(_DWORD *)a1 == 1936746861) {
      uint64_t v6 = 0x100000010;
    }
LABEL_52:
    int v20 = 0;
    BOOL v13 = (v6 & 0x300000000) == 0;
    BOOL v11 = 1;
    goto LABEL_53;
  }
  int v5 = 0;
  uint64_t v6 = 0;
  switch(a2)
  {
    case 3uLL:
      uint64_t v6 = 0x100000006;
      int v14 = *a1 ^ 0x7261 | *((unsigned __int8 *)a1 + 2) ^ 0x63;
      if (v14) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 0x100000006;
      }
      if (!v14)
      {
        BOOL v11 = 0;
        int v7 = 0;
        int v5 = 0;
        BOOL v8 = 1;
        goto LABEL_18;
      }
      if (*a1 == 29281 && *((unsigned char *)a1 + 2) == 109)
      {
        BOOL v11 = 0;
        BOOL v8 = 0;
        uint64_t v6 = 0x100000001;
      }
      else
      {
        int v7 = 0;
        if (*a1 != 30305 || *((unsigned char *)a1 + 2) != 114)
        {
          uint64_t v9 = 0;
          BOOL v8 = 1;
          uint64_t v6 = v15;
          int v5 = 0;
          goto LABEL_6;
        }
        uint64_t v6 = 0x100000007;
        BOOL v11 = 0;
        BOOL v8 = 0;
      }
      goto LABEL_344;
    case 5uLL:
      if (*(_DWORD *)a1 == 913142369 && *((unsigned char *)a1 + 4) == 52)
      {
        BOOL v11 = 0;
        BOOL v8 = 0;
        int v5 = 0;
        int v7 = 1;
        uint64_t v6 = 0x100000003;
        goto LABEL_18;
      }
      BOOL v8 = 0;
      if (*(_DWORD *)a1 != 1701671521 || *((unsigned char *)a1 + 4) != 98)
      {
        uint64_t v9 = 0;
        uint64_t v6 = 0;
        int v7 = 1;
        int v5 = 0;
        goto LABEL_6;
      }
      uint64_t v6 = 0x100000002;
      BOOL v11 = 0;
      goto LABEL_344;
    case 8uLL:
      if (*(void *)a1 != 0x32335F34366D7261)
      {
        uint64_t v6 = 0;
        int v5 = 1;
        goto LABEL_5;
      }
      BOOL v11 = 0;
      BOOL v8 = 0;
      uint64_t v6 = 0x100000005;
      goto LABEL_344;
    case 0xAuLL:
      if (*(void *)a1 == 0x5F34366863726161 && a1[4] == 25954)
      {
        int v5 = 0;
        uint64_t v6 = 0x100000004;
        goto LABEL_5;
      }
      if (*(void *)a1 != 0x5F34366863726161 || a1[4] != 12851)
      {
        uint64_t v6 = 0;
        int v5 = 0;
        goto LABEL_5;
      }
      uint64_t v6 = 0x100000005;
      break;
    default:
      goto LABEL_5;
  }
LABEL_393:
  if ((v6 & 0xFF00000000) != 0) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD0B853C(uint64_t a1, uint64_t a2)
{
  if (a2 == 6)
  {
    if (*(_DWORD *)a1 != 1600548962 || *(_WORD *)(a1 + 4) != 25954)
    {
      int v4 = *(unsigned __int16 *)(a1 + 4);
      BOOL v5 = *(_DWORD *)a1 == 1600548962;
      int v6 = 25964;
      goto LABEL_17;
    }
    return 9;
  }
  if (a2 != 5)
  {
    if (a2 != 3) {
      return 0;
    }
    BOOL v2 = *(_WORD *)a1 == 28770 && *(unsigned char *)(a1 + 2) == 102;
    goto LABEL_20;
  }
  if (*(_DWORD *)a1 == 1701212258 && *(unsigned char *)(a1 + 4) == 98) {
    return 9;
  }
  int v4 = *(unsigned __int8 *)(a1 + 4);
  BOOL v5 = *(_DWORD *)a1 == 1701212258;
  int v6 = 108;
LABEL_17:
  BOOL v2 = v5 && v4 == v6;
LABEL_20:
  int v8 = v2;
  return (8 * v8);
}

llvm::Triple *llvm::Triple::Triple(llvm::Triple *this, const llvm::Twine *a2)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  llvm::Twine::str(a2, this);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  int v37 = v39;
  uint64_t v38 = 0x400000000;
  char v3 = *((unsigned char *)this + 23);
  BOOL v4 = v3 < 0;
  BOOL v5 = *(llvm::Triple **)this;
  if (v3 >= 0) {
    BOOL v5 = this;
  }
  unint64_t v6 = v3 & 0x7F;
  if (v4) {
    unint64_t v6 = *((void *)this + 1);
  }
  uint64_t v34 = (uint64_t)v5;
  unint64_t v35 = v6;
  llvm::StringRef::split((char *)&v34, (uint64_t)&v37, 45, 3, 1);
  if (!v38) {
    goto LABEL_9;
  }
  *((_DWORD *)this + 6) = sub_1CD0B88D8(*(void *)v37, *((void *)v37 + 1), v7, v8, v9, v10, v11, v12);
  *((_DWORD *)this + 7) = sub_1CD0BAAB8(*(void *)v37, *((void *)v37 + 1));
  unsigned int v14 = v38;
  if (v38 < 2)
  {
    uint64_t v18 = *(void *)v37;
    unint64_t v19 = *((void *)v37 + 1);
    uint64_t v34 = *(void *)v37;
    unint64_t v35 = v19;
    uint64_t v36 = 0;
    if (v19 >= 7)
    {
      if (*(_DWORD *)v18 == 1936746861 && *(_DWORD *)(v18 + 3) == 842231411)
      {
        int v30 = 2;
        goto LABEL_47;
      }
      if (*(_DWORD *)v18 != 1936746861 || *(_WORD *)(v18 + 4) != 13366)
      {
        if (v19 < 9)
        {
LABEL_17:
          uint64_t v20 = sub_1CD0BC0FC((uint64_t)&v34, "mips", 4, "mipsel", 6, "mipsr6", 6, v13, "mipsr6el", 8, 1);
          if (*(unsigned char *)(v20 + 20)) {
            int v21 = *(_DWORD *)(v20 + 16);
          }
          else {
            int v21 = 0;
          }
          *((_DWORD *)this + 10) = v21;
          goto LABEL_9;
        }
        if (*(void *)v18 != 0x366173697370696DLL || *(unsigned char *)(v18 + 8) != 52)
        {
          uint64_t v27 = *(void *)v18;
          int v28 = *(unsigned __int8 *)(v18 + 8);
          if (v27 != 0x336173697370696DLL || v28 != 50) {
            goto LABEL_17;
          }
          int v30 = 1;
          goto LABEL_47;
        }
      }
    }
    else
    {
      if (v19 != 6) {
        goto LABEL_17;
      }
      int v31 = *(_DWORD *)v18;
      int v32 = *(unsigned __int16 *)(v18 + 4);
      if (v31 != 1936746861 || v32 != 13366) {
        goto LABEL_17;
      }
    }
    int v30 = 3;
LABEL_47:
    LODWORD(v36) = v30;
    BYTE4(v36) = 1;
    goto LABEL_17;
  }
  uint64_t v15 = v37;
  *((_DWORD *)this + 8) = sub_1CD0BACE4(*((unsigned __int16 **)v37 + 2), *((void *)v37 + 3));
  if (v14 == 2 || (*((_DWORD *)this + 9) = sub_1CD0BAF40(v15[4], v15[5]), v14 < 4))
  {
LABEL_9:
    int v16 = *((_DWORD *)this + 11);
    goto LABEL_10;
  }
  uint64_t v22 = v15[6];
  unint64_t v23 = v15[7];
  *((_DWORD *)this + 10) = sub_1CD0BB784(v22, v23);
  int v16 = sub_1CD0BBF4C(v22, v23);
  *((_DWORD *)this + 11) = v16;
LABEL_10:
  if (!v16) {
    *((_DWORD *)this + 11) = sub_1CD0BC18C(this);
  }
  if (v37 != v39) {
    free(v37);
  }
  return this;
}

uint64_t sub_1CD0B88D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  v254[0] = a1;
  v254[1] = a2;
  uint64_t v255 = 0;
  switch(a2)
  {
    case 3uLL:
      if (*(_WORD *)a1 == 28784 && *(unsigned char *)(a1 + 2) == 99) {
        goto LABEL_602;
      }
      if (*(_WORD *)a1 == 28784 && *(unsigned char *)(a1 + 2) == 117) {
        goto LABEL_609;
      }
      if (*(_WORD *)a1 == 29281 && *(unsigned char *)(a1 + 2) == 99)
      {
        int v59 = 6;
        goto LABEL_636;
      }
      if (*(_WORD *)a1 == 29281 && *(unsigned char *)(a1 + 2) == 109) {
        goto LABEL_613;
      }
      if (*(_WORD *)a1 == 30305 && *(unsigned char *)(a1 + 2) == 114)
      {
        int v59 = 7;
        goto LABEL_636;
      }
      if (*(_WORD *)a1 == 25460 && *(unsigned char *)(a1 + 2) == 101)
      {
        int v59 = 37;
        goto LABEL_636;
      }
      goto LABEL_637;
    case 4uLL:
      switch(*(_DWORD *)a1)
      {
        case 0x36383369:
        case 0x36383469:
        case 0x36383569:
        case 0x36383669:
        case 0x36383769:
        case 0x36383869:
        case 0x36383969:
          int v59 = 41;
          goto LABEL_636;
        case 0x6B38366D:
          int v59 = 15;
          goto LABEL_636;
        case 0x7370696D:
          goto LABEL_603;
        case 0x30303672:
          int v59 = 25;
          goto LABEL_636;
      }
      goto LABEL_637;
    case 5uLL:
      if (*(_DWORD *)a1 == 912551265 && *(unsigned char *)(a1 + 4) == 52) {
        goto LABEL_606;
      }
      if (*(_DWORD *)a1 == 862154864 && *(unsigned char *)(a1 + 4) == 50) {
        goto LABEL_602;
      }
      if (*(_DWORD *)a1 == 1818456176 && *(unsigned char *)(a1 + 4) == 101) {
        goto LABEL_608;
      }
      if (*(_DWORD *)a1 == 912486512 && *(unsigned char *)(a1 + 4) == 52) {
        goto LABEL_609;
      }
      if (*(_DWORD *)a1 == 913142369 && *(unsigned char *)(a1 + 4) == 52) {
        goto LABEL_611;
      }
      if (*(_DWORD *)a1 == 1701671521 && *(unsigned char *)(a1 + 4) == 98) {
        goto LABEL_616;
      }
      if (*(_DWORD *)a1 == 1836410996 && *(unsigned char *)(a1 + 4) == 98)
      {
        int v59 = 39;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 809055091 && *(unsigned char *)(a1 + 4) == 120) {
        goto LABEL_618;
      }
      if (*(_DWORD *)a1 == 1918988403 && *(unsigned char *)(a1 + 4) == 99)
      {
        int v59 = 33;
      }
      else if (*(_DWORD *)a1 == 1818583924 && *(unsigned char *)(a1 + 4) == 101)
      {
        int v59 = 38;
      }
      else if (*(_DWORD *)a1 == 1919902584 && *(unsigned char *)(a1 + 4) == 101)
      {
        int v59 = 43;
      }
      else
      {
        if (*(_DWORD *)a1 != 1953527406 || *(unsigned char *)(a1 + 4) != 120)
        {
          int v50 = *(unsigned __int8 *)(a1 + 4);
          BOOL v51 = *(_DWORD *)a1 == 863136097;
          int v52 = 50;
          goto LABEL_251;
        }
        int v59 = 44;
      }
      goto LABEL_636;
    case 6uLL:
      if (*(_DWORD *)a1 == 1597388920 && *(_WORD *)(a1 + 4) == 13366) {
        goto LABEL_606;
      }
      if (*(_DWORD *)a1 == 1633907576 && *(_WORD *)(a1 + 4) == 25964)
      {
LABEL_613:
        int v59 = 1;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 913142369 && *(_WORD *)(a1 + 4) == 25908)
      {
LABEL_611:
        int v59 = 3;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 879784813 && *(_WORD *)(a1 + 4) == 12339)
      {
        int v59 = 20;
        goto LABEL_636;
      }
      BOOL v77 = *(_DWORD *)a1 == 1936746861 && *(_WORD *)(a1 + 4) == 25189;
      if (v77 || (*(_DWORD *)a1 == 1936746861 ? (BOOL v78 = *(unsigned __int16 *)(a1 + 4) == 13938) : (BOOL v78 = 0), v78))
      {
LABEL_603:
        int v59 = 16;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1936746861 && *(_WORD *)(a1 + 4) == 27749)
      {
LABEL_607:
        int v59 = 17;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1936746861 && *(_WORD *)(a1 + 4) == 13366)
      {
LABEL_601:
        int v59 = 18;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1734634849 && *(_WORD *)(a1 + 4) == 28259)
      {
LABEL_599:
        int v59 = 30;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1818847081 && *(_WORD *)(a1 + 4) == 12851)
      {
        int v59 = 46;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1818847081 && *(_WORD *)(a1 + 4) == 13366)
      {
LABEL_449:
        int v59 = 47;
LABEL_636:
        LODWORD(v255) = v59;
        BYTE4(v255) = 1;
        goto LABEL_637;
      }
      if (*(_DWORD *)a1 == 1597143143 && *(_WORD *)(a1 + 4) == 12385)
      {
LABEL_617:
        int v59 = 26;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1600599143 && *(_WORD *)(a1 + 4) == 12385)
      {
LABEL_605:
        int v59 = 27;
        goto LABEL_636;
      }
      int v86 = *(unsigned __int16 *)(a1 + 4);
      BOOL v87 = *(_DWORD *)a1 == 1734634849;
      int v88 = 30064;
LABEL_371:
      if (v87 && v86 == v88) {
        goto LABEL_599;
      }
LABEL_637:
      uint64_t v158 = sub_1CD0BEB24((uint64_t)v254, "air32_v21", 9, "air32_v22", 9, "air32_v23", 9, a8, "air32_v24", 9, "air32_v25", 9, "air32_v26", 9, "air32_v27", 9, 48);
      if (!*(unsigned char *)(v158 + 20))
      {
        v160 = *(int **)v158;
        switch(*(void *)(v158 + 8))
        {
          case 5:
            int v173 = *v160;
            int v174 = *((unsigned __int8 *)v160 + 4);
            BOOL v175 = v173 == 913467745;
            int v176 = 52;
            goto LABEL_668;
          case 9:
            if (*(void *)v160 == 0x31765F3436726961 && *((unsigned char *)v160 + 8) == 54) {
              goto LABEL_818;
            }
            if (*(void *)v160 == 0x31765F3436726961 && *((unsigned char *)v160 + 8) == 56) {
              goto LABEL_818;
            }
            uint64_t v179 = *(void *)v160;
            int v174 = *((unsigned __int8 *)v160 + 8);
            BOOL v175 = v179 == 0x32765F3436726961;
            int v176 = 48;
LABEL_668:
            if (!v175 || v174 != v176) {
              goto LABEL_672;
            }
LABEL_818:
            int v172 = 49;
            break;
          case 0xALL:
            uint64_t v180 = *(void *)v160;
            int v174 = *((unsigned __int16 *)v160 + 4);
            BOOL v175 = v180 == 0x31765F3436726961;
            int v176 = 12593;
            goto LABEL_668;
          case 0xCLL:
            uint64_t v161 = *(void *)v160;
            int v162 = v160[2];
            if (v161 != 0x6D615F3233726961 || v162 != 1970300772) {
              goto LABEL_672;
            }
            goto LABEL_656;
          case 0xELL:
            if (*(void *)v160 == 0x70615F3233726961 && *(void *)((char *)v160 + 6) == 0x757067656C707061) {
              goto LABEL_656;
            }
            uint64_t v165 = *(void *)v160;
            uint64_t v166 = *(void *)((char *)v160 + 6);
            BOOL v167 = v165 == 0x6E695F3233726961;
            uint64_t v168 = 0x676C65746E69;
LABEL_651:
            uint64_t v170 = v168 & 0xFFFFFFFFFFFFLL | 0x7570000000000000;
            if (!v167 || v166 != v170) {
              goto LABEL_672;
            }
LABEL_656:
            int v172 = 48;
            break;
          case 0xFLL:
            uint64_t v169 = *(void *)v160;
            uint64_t v166 = *(void *)((char *)v160 + 7);
            BOOL v167 = v169 == 0x766E5F3233726961;
            uint64_t v168 = 0x676169646976;
            goto LABEL_651;
          default:
            goto LABEL_672;
        }
        *(_DWORD *)(v158 + 16) = v172;
        *(unsigned char *)(v158 + 20) = 1;
      }
LABEL_672:
      uint64_t v182 = sub_1CD0BEB24(v158, "air64_v21", 9, "air64_v22", 9, "air64_v23", 9, v159, "air64_v24", 9, "air64_v25", 9, "air64_v26", 9, "air64_v27", 9, 49);
      if (*(unsigned char *)(v182 + 20))
      {
        uint64_t v185 = *(unsigned int *)(v182 + 16);
        if (v185) {
          return v185;
        }
      }
      else
      {
        v183 = *(int **)v182;
        unint64_t v184 = *(void *)(v182 + 8);
        switch(v184)
        {
          case 4uLL:
            switch(*v183)
            {
              case 842229100:
                uint64_t v185 = 50;
                break;
              case 875980140:
                uint64_t v185 = 51;
                break;
              case 1919512691:
                uint64_t v185 = 56;
                break;
              case 813197153:
                uint64_t v185 = 26;
                break;
              case 829974369:
                uint64_t v185 = 27;
                break;
              case 846751585:
                uint64_t v185 = 28;
                break;
              case 863528801:
                uint64_t v185 = 29;
                break;
              case 2037085027:
                uint64_t v185 = 10;
                break;
              case 1818851428:
                uint64_t v185 = 11;
                break;
              default:
                goto LABEL_790;
            }
            goto LABEL_859;
          case 5uLL:
            if (*v183 == 1768189281 && *((unsigned char *)v183 + 4) == 108)
            {
              uint64_t v185 = 52;
              goto LABEL_859;
            }
            if (*v183 == 1767994216 && *((unsigned char *)v183 + 4) == 108)
            {
              uint64_t v185 = 54;
              goto LABEL_859;
            }
            if (*v183 == 1634623852 && *((unsigned char *)v183 + 4) == 105)
            {
              uint64_t v185 = 62;
              goto LABEL_859;
            }
            int v199 = *v183;
            int v200 = *((unsigned __int8 *)v183 + 4);
            if (v199 == 1986095219 && v200 == 101)
            {
              uint64_t v185 = 61;
              goto LABEL_859;
            }
            break;
          case 6uLL:
            if (*v183 == 1919512691 && *((_WORD *)v183 + 2) == 13366)
            {
              uint64_t v185 = 57;
              goto LABEL_859;
            }
            if (*v183 == 1836278135 && *((_WORD *)v183 + 2) == 12851)
            {
              uint64_t v185 = 63;
              goto LABEL_859;
            }
            int v204 = *v183;
            int v205 = *((unsigned __int16 *)v183 + 2);
            if (v204 == 1836278135 && v205 == 13366)
            {
              uint64_t v185 = 64;
              goto LABEL_859;
            }
            break;
          case 7uLL:
            if (*v183 == 1768189281 && *(int *)((char *)v183 + 3) == 875981929)
            {
              uint64_t v185 = 53;
              goto LABEL_859;
            }
            if (*v183 == 1767994216 && *(int *)((char *)v183 + 3) == 875981929)
            {
              uint64_t v185 = 55;
              goto LABEL_859;
            }
            if (*v183 == 1919512691 && *(int *)((char *)v183 + 3) == 842233458)
            {
              uint64_t v185 = 58;
              goto LABEL_859;
            }
            if (*v183 == 1919512691 && *(int *)((char *)v183 + 3) == 875984498)
            {
              uint64_t v185 = 59;
              goto LABEL_859;
            }
            int v211 = *v183;
            int v212 = *(int *)((char *)v183 + 3);
            if (v211 != 1768710507 || v212 != 1633840489) {
              break;
            }
            goto LABEL_780;
          case 0xCuLL:
            if (*(void *)v183 != 0x6D615F3436726961 || v183[2] != 1970300772) {
              goto LABEL_702;
            }
            goto LABEL_820;
          case 0xEuLL:
            if (*(void *)v183 == 0x70615F3436726961 && *(void *)((char *)v183 + 6) == 0x757067656C707061) {
              goto LABEL_820;
            }
            if (*(void *)v183 == 0x6E695F3436726961 && *(void *)((char *)v183 + 6) == 0x7570676C65746E69) {
              goto LABEL_820;
            }
            if (*v183 != 1768710507 || *(int *)((char *)v183 + 3) != 1633840489) {
              goto LABEL_782;
            }
            goto LABEL_780;
          case 0xFuLL:
            if (*(void *)v183 != 0x766E5F3436726961 || *(void *)((char *)v183 + 7) != 0x7570676169646976) {
              goto LABEL_702;
            }
LABEL_820:
            uint64_t v185 = 49;
            goto LABEL_859;
          default:
            if (v184 >= 7)
            {
LABEL_702:
              if (*v183 == 1768710507 && *(int *)((char *)v183 + 3) == 1633840489)
              {
LABEL_780:
                uint64_t v185 = 60;
                goto LABEL_859;
              }
              if (v184 == 11)
              {
                if (*(void *)v183 == 0x637261676E6F6F6CLL && *(void *)((char *)v183 + 3) == 0x323368637261676ELL)
                {
                  uint64_t v185 = 13;
                  goto LABEL_859;
                }
                uint64_t v193 = *(void *)v183;
                uint64_t v194 = *(void *)((char *)v183 + 3);
                if (v193 == 0x637261676E6F6F6CLL && v194 == 0x343668637261676ELL)
                {
                  uint64_t v185 = 14;
                  goto LABEL_859;
                }
              }
              else
              {
                if (v184 != 14) {
                  break;
                }
LABEL_782:
                if (*(void *)v183 == 0x63737265646E6572 && *(void *)((char *)v183 + 6) == 0x3233747069726373)
                {
                  uint64_t v185 = 65;
                  goto LABEL_859;
                }
                uint64_t v215 = *(void *)v183;
                uint64_t v216 = *(void *)((char *)v183 + 6);
                if (v215 == 0x63737265646E6572 && v216 == 0x3436747069726373)
                {
                  uint64_t v185 = 66;
                  goto LABEL_859;
                }
              }
            }
            else if (v184 == 2 && *(_WORD *)v183 == 25974)
            {
              uint64_t v185 = 67;
LABEL_859:
              *(_DWORD *)(v182 + 16) = v185;
              *(unsigned char *)(v182 + 20) = 1;
              return v185;
            }
            break;
        }
      }
LABEL_790:
      if (a2 < 3) {
        return 0;
      }
      if (*(_WORD *)a1 != 29281 || *(unsigned char *)(a1 + 2) != 109)
      {
        if (a2 < 5
          || (*(_DWORD *)a1 == 1836410996 ? (BOOL v219 = *(unsigned char *)(a1 + 4) == 98) : (BOOL v219 = 0),
              !v219
           && (a2 < 7 || (*(_DWORD *)a1 == 1668440417 ? (BOOL v220 = *(_DWORD *)(a1 + 3) == 875980899) : (BOOL v220 = 0), !v220))))
        {
          if (*(_WORD *)a1 == 28770 && *(unsigned char *)(a1 + 2) == 102) {
            return sub_1CD0B853C(a1, a2);
          }
          return 0;
        }
      }
      int v223 = llvm::ARM::parseArchISA((unsigned __int16 *)a1, a2);
      int v224 = llvm::ARM::parseArchEndian(a1, a2);
      int v225 = v224;
      if (v224 == 2)
      {
        int v226 = v223 - 1;
        if ((v223 - 1) <= 2)
        {
          v227 = &unk_1CFB2F64C;
          goto LABEL_823;
        }
LABEL_824:
        unsigned int v228 = 0;
        goto LABEL_825;
      }
      if (v224 != 1) {
        goto LABEL_824;
      }
      int v226 = v223 - 1;
      if ((v223 - 1) >= 3) {
        goto LABEL_824;
      }
      v227 = &unk_1CFB2F640;
LABEL_823:
      unsigned int v228 = v227[v226];
LABEL_825:
      CanonicalArchName = llvm::ARM::getCanonicalArchName((char *)a1, a2);
      if (!v230) {
        return 0;
      }
      v231 = CanonicalArchName;
      unint64_t v232 = v230;
      if (v223 == 2 && v230 != 1 && (*(_WORD *)CanonicalArchName == 12918 || *(_WORD *)CanonicalArchName == 13174)) {
        return 0;
      }
      int v233 = llvm::ARM::parseArchProfile(CanonicalArchName, v230);
      int v234 = llvm::ARM::parseArchVersion(v231, v232);
      if (v225 == 2) {
        LODWORD(v185) = 40;
      }
      else {
        LODWORD(v185) = 39;
      }
      if (v234 == 6 && v233 == 3) {
        return v185;
      }
      else {
        return v228;
      }
    case 7uLL:
      if (*(_DWORD *)a1 == 1597388920 && *(_DWORD *)(a1 + 3) == 1748252255)
      {
LABEL_606:
        int v59 = 42;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1702326128 && *(_DWORD *)(a1 + 3) == 1668313701)
      {
LABEL_602:
        int v59 = 21;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 862154864 && *(_DWORD *)(a1 + 3) == 1701589555)
      {
LABEL_608:
        int v59 = 22;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 912486512 && *(_DWORD *)(a1 + 3) == 1701590070)
      {
LABEL_614:
        int v59 = 24;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899) {
        goto LABEL_611;
      }
      if (*(_DWORD *)a1 == 1836410996 && *(_DWORD *)(a1 + 3) == 1650811501)
      {
        int v59 = 40;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1936746861 && *(_DWORD *)(a1 + 3) == 842231411) {
        goto LABEL_601;
      }
      if (*(_DWORD *)a1 == 1668508018 && *(_DWORD *)(a1 + 3) == 842233443)
      {
        int v59 = 31;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1668508018 && *(_DWORD *)(a1 + 3) == 875984483)
      {
        int v59 = 32;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1635280232 && *(_DWORD *)(a1 + 3) == 1852794721)
      {
        int v59 = 12;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1953724787 && *(_DWORD *)(a1 + 3) == 2053989748)
      {
LABEL_618:
        int v59 = 36;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1918988403 && *(_DWORD *)(a1 + 3) == 1818583922)
      {
        int v59 = 35;
        goto LABEL_636;
      }
      BOOL v22 = *(_DWORD *)a1 == 1918988403 && *(_DWORD *)(a1 + 3) == 964060018;
      if (v22 || (*(_DWORD *)a1 == 1918988403 ? (BOOL v23 = *(_DWORD *)(a1 + 3) == 875979634) : (BOOL v23 = 0), v23))
      {
        int v59 = 34;
        goto LABEL_636;
      }
      if (*(_DWORD *)a1 == 1953527406 && *(_DWORD *)(a1 + 3) == 875985012) {
        goto LABEL_440;
      }
      if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811687792) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811687789) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811687783) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811687792) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811687792) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811687783) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811687795) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811687779) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811687780) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811687792) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811687783) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811687795) {
        goto LABEL_598;
      }
      if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811687780) {
        goto LABEL_598;
      }
      BOOL v38 = *(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811687783;
      if (v38
        || (*(_DWORD *)a1 == 1731539303 ? (BOOL v39 = *(_DWORD *)(a1 + 3) == 811753319) : (BOOL v39 = 0),
            v39
         || (*(_DWORD *)a1 == 1932865895 ? (BOOL v40 = *(_DWORD *)(a1 + 3) == 811687795) : (BOOL v40 = 0),
             v40
          || (*(_DWORD *)a1 == 1932865895 ? (BOOL v41 = *(_DWORD *)(a1 + 3) == 811753331) : (BOOL v41 = 0),
              v41
           || (*(_DWORD *)a1 == 1882599783 ? (BOOL v42 = *(_DWORD *)(a1 + 3) == 811687792) : (BOOL v42 = 0),
               v42
            || (*(_DWORD *)a1 == 1882599783 ? (BOOL v43 = *(_DWORD *)(a1 + 3) == 811753328) : (BOOL v43 = 0),
                v43
             || (*(_DWORD *)a1 == 1731604839 ? (BOOL v44 = *(_DWORD *)(a1 + 3) == 811687783) : (BOOL v44 = 0),
                 v44 || (*(_DWORD *)a1 == 1932931431 ? (BOOL v45 = *(_DWORD *)(a1 + 3) == 811687795) : (BOOL v45 = 0), v45))))))))
      {
LABEL_610:
        int v59 = 29;
        goto LABEL_636;
      }
      goto LABEL_637;
    case 8uLL:
      switch(*(void *)a1)
      {
        case 0x6265656C61637378:
LABEL_616:
          int v59 = 2;
          goto LABEL_636;
        case 0x32335F34366D7261:
          goto LABEL_615;
        case 0x6C6536727370696DLL:
          goto LABEL_607;
        case 0x626534367370696DLL:
        case 0x367234367370696DLL:
          goto LABEL_601;
        case 0x6C6534367370696DLL:
          goto LABEL_604;
        case 0x757067656C707061:
LABEL_598:
          int v59 = 28;
          goto LABEL_636;
      }
      if (*(void *)a1 != 0x7570676C65746E69) {
        goto LABEL_637;
      }
      goto LABEL_449;
    case 9uLL:
      if (*(void *)a1 == 0x6C63707265776F70 && *(unsigned char *)(a1 + 8) == 101) {
        goto LABEL_608;
      }
      if (*(void *)a1 == 0x3663707265776F70 && *(unsigned char *)(a1 + 8) == 52)
      {
LABEL_609:
        int v59 = 23;
        goto LABEL_636;
      }
      if (*(void *)a1 == 0x7232336E7370696DLL && *(unsigned char *)(a1 + 8) == 54) {
        goto LABEL_601;
      }
      if (*(void *)a1 == 0x6532336E7370696DLL && *(unsigned char *)(a1 + 8) == 108) {
        goto LABEL_604;
      }
      if (*(void *)a1 == 0x706761696469766ELL && *(unsigned char *)(a1 + 8) == 117)
      {
LABEL_440:
        int v59 = 45;
        goto LABEL_636;
      }
      if (*(void *)a1 == 0x31765F3233726961 && *(unsigned char *)(a1 + 8) == 54) {
        goto LABEL_612;
      }
      BOOL v101 = *(void *)a1 == 0x31765F3233726961 && *(unsigned char *)(a1 + 8) == 56;
      int v59 = 48;
      if (!v101 && (*(void *)a1 != 0x32765F3233726961 || *(unsigned char *)(a1 + 8) != 48)) {
        goto LABEL_637;
      }
      goto LABEL_636;
    case 0xAuLL:
      if (*(void *)a1 == 0x7363707265776F70 && *(_WORD *)(a1 + 8) == 25968) {
        goto LABEL_602;
      }
      if (*(void *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 25954)
      {
        int v59 = 4;
        goto LABEL_636;
      }
      if (*(void *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 12851)
      {
LABEL_615:
        int v59 = 5;
        goto LABEL_636;
      }
      if (*(void *)a1 == 0x367234367370696DLL && *(_WORD *)(a1 + 8) == 27749)
      {
LABEL_604:
        int v59 = 19;
        goto LABEL_636;
      }
      int v50 = *(unsigned __int16 *)(a1 + 8);
      BOOL v51 = *(void *)a1 == 0x31765F3233726961;
      int v52 = 12593;
LABEL_251:
      if (v51 && v50 == v52)
      {
LABEL_612:
        int v59 = 48;
        goto LABEL_636;
      }
      goto LABEL_637;
    case 0xBuLL:
      if (*(void *)a1 == 0x3663707265776F70 && *(void *)(a1 + 3) == 0x656C343663707265) {
        goto LABEL_614;
      }
      if (*(void *)a1 == 0x336173697370696DLL && *(void *)(a1 + 3) == 0x3672323361736973) {
        goto LABEL_603;
      }
      if (*(void *)a1 == 0x366173697370696DLL && *(void *)(a1 + 3) == 0x3672343661736973) {
        goto LABEL_601;
      }
      if (*(void *)a1 != 0x7232336E7370696DLL || *(void *)(a1 + 3) != 0x6C65367232336E73) {
        goto LABEL_637;
      }
      goto LABEL_604;
    case 0xCuLL:
      if (*(void *)a1 == 0x656C6C617370696DLL && *(_DWORD *)(a1 + 8) == 2019914343) {
        goto LABEL_603;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 846751583) {
        goto LABEL_617;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882482527) {
        goto LABEL_605;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1731487583) {
        goto LABEL_605;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882548063) {
        goto LABEL_605;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882810207) {
        goto LABEL_605;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1731815263) {
        goto LABEL_605;
      }
      if ((*(void *)a1 != 0x706761696469766ELL || *(_DWORD *)(a1 + 8) != 1801936757)
        && (*(void *)a1 != 0x706761696469766ELL || *(_DWORD *)(a1 + 8) != 1835491189)
        && (*(void *)a1 != 0x706761696469766ELL || *(_DWORD *)(a1 + 8) != 1885822837)
        && (*(void *)a1 != 0x706761696469766ELL || *(_DWORD *)(a1 + 8) != 1986486133))
      {
        goto LABEL_637;
      }
      goto LABEL_440;
    case 0xDuLL:
      if (*(void *)a1 == 0x336173697370696DLL && *(void *)(a1 + 5) == 0x6C65367232336173) {
        goto LABEL_607;
      }
      if (*(void *)a1 == 0x366173697370696DLL && *(void *)(a1 + 5) == 0x6C65367234366173) {
        goto LABEL_604;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703031675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703131675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673131675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x6D3131675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703231675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703331675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673331675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733331675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x633331675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x643331675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703431675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673431675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733431675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x643431675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703531675F757067) {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673531675F757067) {
        goto LABEL_610;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733531675F757067) {
        goto LABEL_610;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703631675F757067) {
        goto LABEL_610;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673631675F757067) {
        goto LABEL_610;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733631675F757067) {
        goto LABEL_610;
      }
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703731675F757067) {
        goto LABEL_610;
      }
      if ((*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3030367866675F75)
        && (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3130377866675F75)
        && (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3430377866675F75)
        && (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3330387866675F75)
        && (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3230387866675F75)
        && (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3030397866675F75)
        && (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3430397866675F75))
      {
        uint64_t v124 = *(void *)(a1 + 5);
        BOOL v125 = *(void *)a1 == 0x675F757067646D61;
        uint64_t v126 = 0x3630397866675F75;
LABEL_471:
        if (!v125 || v124 != v126) {
          goto LABEL_637;
        }
      }
      goto LABEL_599;
    case 0xEuLL:
      if (*(void *)a1 == 0x656C6C617370696DLL && *(void *)(a1 + 6) == 0x6C6578657267656CLL) {
        goto LABEL_607;
      }
      if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x303130317866675FLL) {
        goto LABEL_599;
      }
      if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x313130317866675FLL) {
        goto LABEL_599;
      }
      if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x323130317866675FLL) {
        goto LABEL_599;
      }
      if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x303330317866675FLL) {
        goto LABEL_599;
      }
      uint64_t v124 = *(void *)(a1 + 6);
      BOOL v125 = *(void *)a1 == 0x675F757067646D61;
      uint64_t v126 = 0x323330317866675FLL;
      goto LABEL_471;
    case 0x11uLL:
      int v86 = *(unsigned __int8 *)(a1 + 16);
      BOOL v87 = *(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 8) == 0x776E5F3030367866;
      int v88 = 104;
      goto LABEL_371;
    case 0x12uLL:
      if (*(void *)a1 != 0x7570676C65746E69
        || *(void *)(a1 + 8) != 0x3274675F6C6B735FLL
        || *(_WORD *)(a1 + 16) != 13938)
      {
        BOOL v242 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3274675F6C6B735FLL;
        if (!v242 || *(_WORD *)(a1 + 16) != 14194)
        {
          BOOL v244 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3274675F6C626B5FLL;
          if (!v244 || *(_WORD *)(a1 + 16) != 12402)
          {
            BOOL v246 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3274675F6C626B5FLL;
            if (!v246 || *(_WORD *)(a1 + 16) != 12914)
            {
              BOOL v248 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3274675F6C626B5FLL;
              if (!v248 || *(_WORD *)(a1 + 16) != 13426)
              {
                BOOL v250 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3374675F6C626B5FLL;
                if (!v250 || *(_WORD *)(a1 + 16) != 12658)
                {
                  BOOL v252 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3374675F6C626B5FLL;
                  if (!v252 || *(_WORD *)(a1 + 16) != 13938) {
                    goto LABEL_637;
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_449;
    case 0x13uLL:
      if (*(void *)a1 == 0x757067656C707061
        && *(void *)(a1 + 8) == 0x66385F673131675FLL
        && *(void *)(a1 + 11) == 0x70747366385F6731)
      {
        goto LABEL_598;
      }
      if (*(void *)a1 == 0x675F757067646D61
        && *(void *)(a1 + 8) == 0x6E5F303130317866
        && *(void *)(a1 + 11) == 0x6367736E5F303130)
      {
        goto LABEL_599;
      }
      if (*(void *)a1 != 0x7570676C65746E69
        || *(void *)(a1 + 8) != 0x3374675F6C6B735FLL
        || *(void *)(a1 + 11) != 0x3031723374675F6CLL)
      {
        goto LABEL_637;
      }
      goto LABEL_449;
    case 0x14uLL:
      if (*(void *)a1 != 0x7570676C65746E69
        || *(void *)(a1 + 8) != 0x3678315F6C63695FLL
        || *(_DWORD *)(a1 + 16) != 930232440)
      {
        BOOL v238 = *(void *)a1 == 0x7570676C65746E69 && *(void *)(a1 + 8) == 0x3878315F6C63695FLL;
        if (!v238 || *(_DWORD *)(a1 + 16) != 930232440) {
          goto LABEL_637;
        }
      }
      goto LABEL_449;
    default:
      goto LABEL_637;
  }
}

uint64_t sub_1CD0BAAB8(uint64_t a1, unint64_t a2)
{
  if (a2 < 4) {
    goto LABEL_11;
  }
  if (*(_DWORD *)a1 == 1936746861 && (*(_DWORD *)(a1 + a2 - 4) == 1818572402 || *(_WORD *)(a1 + a2 - 2) == 13938)) {
    return 35;
  }
  if (a2 == 6)
  {
    if (*(_DWORD *)a1 == 913142369 && *(_WORD *)(a1 + 4) == 25908) {
      return 31;
    }
    CanonicalArchName = llvm::ARM::getCanonicalArchName((char *)a1, 6uLL);
    if (v6) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
  if (a2 != 10)
  {
LABEL_11:
    CanonicalArchName = llvm::ARM::getCanonicalArchName((char *)a1, a2);
    if (v6) {
      goto LABEL_12;
    }
    if (a2 >= 8)
    {
LABEL_19:
      unint64_t v17 = 0x100000020;
      uint64_t v18 = a1 + a2;
      if (*(void *)(a1 + a2 - 8) != 0x3361626D696C616BLL)
      {
        if (*(void *)(v18 - 8) == 0x3461626D696C616BLL)
        {
          unint64_t v17 = 0x100000021;
        }
        else
        {
          unint64_t v17 = 0x100000022;
          if (*(void *)(v18 - 8) != 0x3561626D696C616BLL) {
            unint64_t v17 = 0;
          }
        }
      }
      goto LABEL_33;
    }
LABEL_32:
    unint64_t v17 = 0;
LABEL_33:
    if (v17 <= 0x100000000) {
      return 0x100000000;
    }
    else {
      return v17;
    }
  }
  if (*(void *)a1 == 0x7363707265776F70 && *(_WORD *)(a1 + 8) == 25968) {
    return 36;
  }
  CanonicalArchName = llvm::ARM::getCanonicalArchName((char *)a1, 0xAuLL);
  if (!v6) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v7 = llvm::ARM::getCanonicalArchName(CanonicalArchName, v6);
  ArchSynonym = (const void *)llvm::ARM::getArchSynonym((unint64_t)v7, v8);
  size_t v11 = v10;
  uint64_t v12 = -(uint64_t)v10;
  for (uint64_t i = &dword_1E6850C98; ; i += 18)
  {
    size_t v14 = *((void *)i - 7);
    uint64_t v15 = i - 16;
    if (v14 >= v11 && (!v11 || !memcmp((const void *)(*((void *)i - 8) + v14 + v12), ArchSynonym, v11))) {
      break;
    }
    if (v15 + 18 == (int *)off_1E6851828) {
      return 0;
    }
  }
  int v20 = *i - 6;
  if (v20 > 0x23) {
    return 0;
  }
  return dword_1CFB2F658[v20];
}

uint64_t sub_1CD0BACE4(unsigned __int16 *a1, uint64_t a2)
{
  switch(a2)
  {
    case 2:
      if (*a1 != 25456)
      {
        uint64_t v2 = 0x10000000ELL;
        BOOL v3 = *a1 == 25967;
        goto LABEL_48;
      }
      uint64_t v2 = 0x100000002;
      break;
    case 3:
      uint64_t v2 = 0x100000003;
      if (*a1 != 26995 || *((unsigned char *)a1 + 2) != 101)
      {
        if (*a1 == 29542 && *((unsigned char *)a1 + 2) == 108)
        {
          uint64_t v2 = 0x100000004;
        }
        else if (*a1 == 25193 && *((unsigned char *)a1 + 2) == 109)
        {
          uint64_t v2 = 0x100000005;
        }
        else if (*a1 == 28009 && *((unsigned char *)a1 + 2) == 103)
        {
          uint64_t v2 = 0x100000006;
        }
        else if (*a1 == 29805 && *((unsigned char *)a1 + 2) == 105)
        {
          uint64_t v2 = 0x100000007;
        }
        else if (*a1 == 29539 && *((unsigned char *)a1 + 2) == 114)
        {
          uint64_t v2 = 0x100000009;
        }
        else
        {
          if (*a1 != 28001 || *((unsigned char *)a1 + 2) != 100) {
            goto LABEL_42;
          }
          uint64_t v2 = 0x10000000BLL;
        }
      }
      break;
    case 4:
      uint64_t v2 = 0x100000003;
      if (*(_DWORD *)a1 != 1768252275)
      {
        if (*(_DWORD *)a1 == 1634952557)
        {
          uint64_t v2 = 0x10000000CLL;
        }
        else
        {
          if (*(_DWORD *)a1 != 1702065523) {
            goto LABEL_42;
          }
          uint64_t v2 = 0x10000000DLL;
        }
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1819308129 || *((unsigned char *)a1 + 4) != 101) {
        goto LABEL_42;
      }
      uint64_t v2 = 0x100000001;
      break;
    case 6:
      if (*(_DWORD *)a1 == 1684633198 && a1[2] == 24937)
      {
        uint64_t v2 = 0x100000008;
      }
      else
      {
        uint64_t v2 = 0x10000000ALL;
        BOOL v3 = (*(_DWORD *)a1 ^ 0x6972796D | a1[2] ^ 0x6461) == 0;
LABEL_48:
        if (!v3) {
          uint64_t v2 = 0;
        }
      }
      break;
    default:
LABEL_42:
      uint64_t v2 = 0;
      break;
  }
  if ((v2 & 0x300000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD0BAF40(uint64_t a1, unint64_t a2)
{
  if (a2 < 6)
  {
    uint64_t v2 = 0;
    BOOL v3 = 1;
LABEL_10:
    BOOL v6 = a2 < 9;
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)a1 ^ 0x6E616E61 | *(unsigned __int16 *)(a1 + 4) ^ 0x7361;
  BOOL v8 = v4 == 0;
  BOOL v5 = v4 != 0;
  uint64_t v2 = 0x100000001;
  if (!v8) {
    uint64_t v2 = 0;
  }
  BOOL v3 = a2 < 8;
  if (a2 >= 8 && v5 && *(void *)a1 == 0x69626164756F6C63) {
    uint64_t v2 = 0x100000002;
  }
  if ((v2 & 0xFF00000000) != 0) {
    goto LABEL_10;
  }
  if (*(_DWORD *)a1 == 2003984740 && *(_WORD *)(a1 + 4) == 28265)
  {
    uint64_t v2 = 0x100000003;
    goto LABEL_10;
  }
  if (a2 >= 9)
  {
    if (*(void *)a1 == 0x6C666E6F67617264 && *(unsigned char *)(a1 + 8) == 121)
    {
      uint64_t v2 = 0x100000004;
      goto LABEL_271;
    }
    BOOL v6 = 0;
    BOOL v3 = 0;
  }
  else
  {
    BOOL v6 = 1;
  }
LABEL_11:
  uint64_t v7 = v2 & 0x100000000;
  if (a2 >= 7 && !v7)
  {
    BOOL v8 = *(_DWORD *)a1 == 1701147238 && *(_DWORD *)(a1 + 3) == 1685283429;
    if (v8)
    {
      uint64_t v2 = 0x100000005;
      goto LABEL_271;
    }
    if (*(_DWORD *)a1 == 1751348582 && *(_DWORD *)(a1 + 3) == 1634300776)
    {
      uint64_t v2 = 0x100000006;
      goto LABEL_50;
    }
  }
  BOOL v10 = a2 < 3;
  if (a2 < 3 || v7) {
    goto LABEL_28;
  }
  if (*(_WORD *)a1 == 28521 && *(unsigned char *)(a1 + 2) == 115)
  {
    uint64_t v2 = 0x100000007;
LABEL_50:
    BOOL v10 = 0;
    BOOL v13 = a2 < 5;
    goto LABEL_51;
  }
  BOOL v10 = 0;
LABEL_28:
  if (v7) {
    char v12 = 1;
  }
  else {
    char v12 = v3;
  }
  if ((v12 & 1) == 0 && *(void *)a1 == 0x647362656572666BLL)
  {
    BOOL v13 = a2 < 5;
    uint64_t v2 = 0x100000008;
    goto LABEL_143;
  }
  BOOL v13 = a2 < 5;
  if (a2 >= 5 && !v7)
  {
    BOOL v13 = 0;
    if (*(_DWORD *)a1 == 1970170220 && *(unsigned char *)(a1 + 4) == 120)
    {
      uint64_t v2 = 0x100000009;
LABEL_143:
      BOOL v30 = a2 < 4;
      goto LABEL_144;
    }
  }
LABEL_51:
  uint64_t v16 = v2 & 0x100000000;
  char v17 = (v2 & 0xFF00000000) != 0 || v10;
  if ((v17 & 1) == 0 && *(_WORD *)a1 == 30316 && *(unsigned char *)(a1 + 2) == 50)
  {
    uint64_t v2 = 0x10000000ALL;
    goto LABEL_143;
  }
  if (v16) {
    char v19 = 1;
  }
  else {
    char v19 = v13;
  }
  if ((v19 & 1) == 0 && *(_DWORD *)a1 == 1868783981 && *(unsigned char *)(a1 + 4) == 115)
  {
    uint64_t v2 = 0x10000000BLL;
    goto LABEL_143;
  }
  if (a2 >= 6 && !v16 && *(_DWORD *)a1 == 1651795310 && *(_WORD *)(a1 + 4) == 25715)
  {
    BOOL v30 = 0;
    uint64_t v2 = 0x10000000CLL;
    goto LABEL_144;
  }
  BOOL v22 = a2 >= 7 && v16 == 0;
  char v23 = !v22;
  if (v22)
  {
    if (*(_DWORD *)a1 == 1852141679 && *(_DWORD *)(a1 + 3) == 1685283438)
    {
      BOOL v30 = 0;
      uint64_t v2 = 0x10000000DLL;
      goto LABEL_144;
    }
    if (*(_DWORD *)a1 == 1634496371 && *(_DWORD *)(a1 + 3) == 1936290401)
    {
      uint64_t v2 = 0x10000000ELL;
      goto LABEL_143;
    }
  }
  if ((v19 & 1) == 0 && *(_DWORD *)a1 == 862873975 && *(unsigned char *)(a1 + 4) == 50)
  {
    uint64_t v2 = 0x10000000FLL;
    goto LABEL_143;
  }
  if ((v23 & 1) != 0
    || (*(_DWORD *)a1 == 1684957559 ? (v27 = *(_DWORD *)(a1 + 3) == 1937207140) : (v27 = 0), uint64_t v28 = 0x10000000FLL, !v27))
  {
    if ((v17 & 1) != 0 || (*(_WORD *)a1 == 28538 ? (BOOL v29 = *(unsigned char *)(a1 + 2) == 115) : (BOOL v29 = 0), !v29))
    {
      if (v19) {
        goto LABEL_105;
      }
      if (*(_DWORD *)a1 == 1802068328 && *(unsigned char *)(a1 + 4) == 117)
      {
        uint64_t v2 = 0x100000011;
      }
      else
      {
        if (*(_DWORD *)a1 != 1768843629 || *(unsigned char *)(a1 + 4) != 120)
        {
          if (*(_DWORD *)a1 == 1835365490 && *(unsigned char *)(a1 + 4) == 115)
          {
            uint64_t v2 = 0x100000013;
            goto LABEL_271;
          }
LABEL_105:
          BOOL v30 = a2 < 4;
          if (a2 >= 4 && !v16)
          {
            if (*(_DWORD *)a1 == 1818452334)
            {
              uint64_t v2 = 0x100000014;
              goto LABEL_271;
            }
            BOOL v30 = 0;
          }
          goto LABEL_144;
        }
        uint64_t v2 = 0x100000012;
      }
      BOOL v13 = 0;
      goto LABEL_143;
    }
    uint64_t v28 = 0x100000010;
  }
  BOOL v30 = a2 < 4;
  uint64_t v2 = v28;
LABEL_144:
  uint64_t v35 = v2 & 0x100000000;
  char v36 = (v2 & 0xFF00000000) != 0 || v10;
  if ((v36 & 1) == 0 && *(_WORD *)a1 == 26977 && *(unsigned char *)(a1 + 2) == 120)
  {
    uint64_t v2 = 0x100000015;
    goto LABEL_271;
  }
  if (v35) {
    char v38 = 1;
  }
  else {
    char v38 = v30;
  }
  if ((v38 & 1) == 0)
  {
    if (*(_DWORD *)a1 == 1633973603)
    {
      uint64_t v2 = 0x100000016;
      goto LABEL_271;
    }
    if (*(_DWORD *)a1 == 1818457710)
    {
      uint64_t v2 = 0x100000017;
      goto LABEL_271;
    }
  }
  BOOL v39 = a2 >= 6 && v35 == 0;
  char v40 = !v39;
  if (v39 && *(_DWORD *)a1 == 1751412065 && *(_WORD *)(a1 + 4) == 24947)
  {
    uint64_t v2 = 0x100000018;
    goto LABEL_271;
  }
  if ((v36 & 1) == 0)
  {
    if (*(_WORD *)a1 == 29552 && *(unsigned char *)(a1 + 2) == 52)
    {
      uint64_t v2 = 0x100000019;
      goto LABEL_271;
    }
    if (*(_WORD *)a1 == 29552 && *(unsigned char *)(a1 + 2) == 53)
    {
      uint64_t v2 = 0x10000001ALL;
      goto LABEL_271;
    }
  }
  if (v35) {
    BOOL v3 = 1;
  }
  if (!v3 && *(void *)a1 == 0x75636D6169666C65)
  {
    uint64_t v2 = 0x10000001BLL;
    goto LABEL_271;
  }
  if ((v38 & 1) == 0 && *(_DWORD *)a1 == 1936684660)
  {
    uint64_t v2 = 0x10000001CLL;
    goto LABEL_271;
  }
  BOOL v44 = a2 >= 7 && v35 == 0;
  char v45 = !v44;
  if (v44 && *(_DWORD *)a1 == 1668571511 && *(_DWORD *)(a1 + 3) == 1936681059)
  {
    uint64_t v2 = 0x10000001DLL;
    goto LABEL_271;
  }
  if (!v3 && *(void *)a1 == 0x736F656764697262)
  {
    uint64_t v2 = 0x10000001ELL;
    goto LABEL_271;
  }
  if (v35) {
    BOOL v6 = 1;
  }
  if (!v6 && *(void *)a1 == 0x696B726576697264 && *(unsigned char *)(a1 + 8) == 116)
  {
    uint64_t v2 = 0x10000001FLL;
    goto LABEL_271;
  }
  if (v35) {
    char v48 = 1;
  }
  else {
    char v48 = v13;
  }
  if ((v48 & 1) == 0 && *(_DWORD *)a1 == 1869636979 && *(unsigned char *)(a1 + 4) == 115)
  {
    uint64_t v2 = 0x100000020;
    goto LABEL_271;
  }
  if ((v38 & 1) == 0 && *(_DWORD *)a1 == 1936683640 || !v3 && *(void *)a1 == 0x736F6E6F69736976)
  {
    uint64_t v2 = 0x100000021;
    goto LABEL_271;
  }
  if ((v40 & 1) == 0 && *(_DWORD *)a1 == 1634952557 && *(_WORD *)(a1 + 4) == 25651)
  {
    uint64_t v2 = 0x100000022;
    goto LABEL_271;
  }
  if ((v45 & 1) == 0 && *(_DWORD *)a1 == 1953394531 && *(_DWORD *)(a1 + 3) == 1768647028)
  {
    uint64_t v2 = 0x100000023;
    goto LABEL_271;
  }
  if (v40) {
    goto LABEL_239;
  }
  if (*(_DWORD *)a1 == 1885629793 && *(_WORD *)(a1 + 4) == 27745)
  {
    uint64_t v2 = 0x100000024;
    goto LABEL_271;
  }
  if (*(_DWORD *)a1 == 1836213608 && *(_WORD *)(a1 + 4) == 29801)
  {
    uint64_t v2 = 0x100000025;
  }
  else
  {
    if (v38) {
      goto LABEL_245;
    }
LABEL_239:
    if (*(_DWORD *)a1 == 1685222760)
    {
      uint64_t v2 = 0x100000026;
      goto LABEL_271;
    }
    if (*(_DWORD *)a1 == 1769169271)
    {
      uint64_t v2 = 0x100000027;
    }
    else
    {
LABEL_245:
      if (a2 >= 0xA
        && !v35
        && (*(void *)a1 == 0x7470697263736D65 ? (BOOL v54 = *(unsigned __int16 *)(a1 + 8) == 28261) : (BOOL v54 = 0), v54))
      {
        uint64_t v2 = 0x100000028;
      }
      else if (a2 >= 0xB {
             && !v35
      }
             && !(*(void *)a1 ^ 0x6F6D726564616873 | *(void *)(a1 + 3) ^ 0x6C65646F6D726564))
      {
        uint64_t v2 = 0x100000029;
      }
    }
  }
LABEL_271:
  if ((v2 & 0xFF00000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD0BB784(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 ^ 0x69626165 | *(unsigned __int16 *)(a1 + 4) ^ 0x6668) {
      unint64_t v2 = 0;
    }
    else {
      unint64_t v2 = 0x10000000ALL;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  if (a2 >= 4 && !HIDWORD(v2) && *(_DWORD *)a1 == 1768055141) {
    unint64_t v2 = 0x100000009;
  }
  uint64_t v3 = v2 & 0xFF00000000;
  BOOL v4 = (v2 & 0xFF00000000) != 0 || a2 < 9;
  if (!v4 && *(void *)a1 == 0x336E696261756E67 && *(unsigned char *)(a1 + 8) == 50)
  {
    unint64_t v2 = 0x100000002;
LABEL_78:
    BOOL v8 = 0;
    BOOL v6 = 0;
LABEL_86:
    BOOL v18 = a2 < 0xA;
    goto LABEL_87;
  }
  BOOL v6 = a2 < 8;
  if (a2 >= 8 && !v3 && *(void *)a1 == 0x3436696261756E67)
  {
    unint64_t v2 = 0x100000003;
    goto LABEL_78;
  }
  if (!v4 && *(void *)a1 == 0x6869626165756E67 && *(unsigned char *)(a1 + 8) == 102)
  {
    unint64_t v2 = 0x100000005;
LABEL_81:
    BOOL v8 = 0;
    goto LABEL_86;
  }
  BOOL v8 = a2 < 7;
  if (a2 < 7 || v3) {
    goto LABEL_33;
  }
  if (*(_DWORD *)a1 == 1702194791 && *(_DWORD *)(a1 + 3) == 1768055141)
  {
    unint64_t v2 = 0x100000004;
    goto LABEL_81;
  }
  BOOL v8 = 0;
LABEL_33:
  BOOL v10 = a2 >= 6 && v3 == 0;
  char v11 = !v10;
  if (v10 && *(_DWORD *)a1 == 2020961895 && *(_WORD *)(a1 + 4) == 12851)
  {
    unint64_t v2 = 0x100000006;
    goto LABEL_86;
  }
  if (!v4 && *(void *)a1 == 0x33706C695F756E67 && *(unsigned char *)(a1 + 8) == 50)
  {
    unint64_t v2 = 0x100000007;
    goto LABEL_86;
  }
  if ((v11 & 1) == 0 && *(_DWORD *)a1 == 1701080931 && *(_WORD *)(a1 + 4) == 13873)
  {
    unint64_t v2 = 0x100000008;
    goto LABEL_86;
  }
  if (a2 >= 3 && !v3 && *(_WORD *)a1 == 28263 && *(unsigned char *)(a1 + 2) == 117)
  {
    unint64_t v2 = 0x100000001;
    goto LABEL_86;
  }
  if (v3) {
    char v16 = 1;
  }
  else {
    char v16 = v8;
  }
  if ((v16 & 1) == 0 && *(_DWORD *)a1 == 1919184481 && *(_DWORD *)(a1 + 3) == 1684631410)
  {
    BOOL v18 = a2 < 0xA;
    unint64_t v2 = 0x10000000BLL;
    goto LABEL_203;
  }
  BOOL v18 = a2 < 0xA;
  if (a2 >= 0xA && !v3)
  {
    BOOL v18 = 0;
    if (*(void *)a1 == 0x696261656C73756DLL && *(_WORD *)(a1 + 8) == 26216)
    {
      unint64_t v2 = 0x10000000ELL;
      goto LABEL_203;
    }
    BOOL v6 = 0;
  }
LABEL_87:
  uint64_t v20 = v2 & 0x100000000;
  char v21 = (v2 & 0xFF00000000) != 0 || v6;
  if ((v21 & 1) == 0 && *(void *)a1 == 0x696261656C73756DLL)
  {
    unint64_t v2 = 0x10000000DLL;
LABEL_203:
    BOOL v39 = a2 < 0xD;
    goto LABEL_204;
  }
  if (v20) {
    BOOL v8 = 1;
  }
  if (!v8 && *(_DWORD *)a1 == 1819506029 && *(_DWORD *)(a1 + 3) == 842233964)
  {
    unint64_t v2 = 0x10000000FLL;
    goto LABEL_203;
  }
  BOOL v23 = a2 >= 4 && v20 == 0;
  char v24 = !v23;
  if (!v23) {
    goto LABEL_109;
  }
  if (*(_DWORD *)a1 == 1819506029)
  {
    unint64_t v2 = 0x10000000CLL;
    goto LABEL_203;
  }
  if (*(_DWORD *)a1 == 1668707181)
  {
    unint64_t v2 = 0x100000010;
    goto LABEL_203;
  }
LABEL_109:
  if (!v8 && *(_DWORD *)a1 == 1851880553 && *(_DWORD *)(a1 + 3) == 1836411246)
  {
    unint64_t v2 = 0x100000011;
    goto LABEL_203;
  }
  BOOL v26 = a2 >= 6 && v20 == 0;
  char v27 = !v26;
  if (v26 && *(_DWORD *)a1 == 1852275043 && *(_WORD *)(a1 + 4) == 29557)
  {
    unint64_t v2 = 0x100000012;
    goto LABEL_203;
  }
  if (!v8 && *(_DWORD *)a1 == 1701998435 && *(_DWORD *)(a1 + 3) == 1919705957)
  {
    unint64_t v2 = 0x100000013;
    goto LABEL_203;
  }
  if (a2 >= 9 && !v20 && *(void *)a1 == 0x6F74616C756D6973 && *(unsigned char *)(a1 + 8) == 114)
  {
    unint64_t v2 = 0x100000014;
    goto LABEL_203;
  }
  if ((v27 & 1) == 0 && *(_DWORD *)a1 == 1633902957 && *(_WORD *)(a1 + 4) == 26978)
  {
    uint64_t v33 = 0x100000015;
LABEL_196:
    BOOL v39 = a2 < 0xD;
    unint64_t v2 = v33;
    goto LABEL_204;
  }
  if (a2 >= 0xB && !v20)
  {
    BOOL v32 = *(void *)a1 == 0x726F6674696B6975 && *(void *)(a1 + 3) == 0x63616D726F667469;
    uint64_t v33 = 0x100000015;
    if (v32) {
      goto LABEL_196;
    }
  }
  if (a2 >= 5 && !v20 && *(_DWORD *)a1 == 1702390128 && *(unsigned char *)(a1 + 4) == 108)
  {
    uint64_t v33 = 0x100000016;
    goto LABEL_196;
  }
  if ((v27 & 1) == 0 && *(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821)
  {
    unint64_t v2 = 0x100000017;
    goto LABEL_203;
  }
  if ((v21 & 1) == 0 && *(void *)a1 == 0x797274656D6F6567)
  {
    unint64_t v2 = 0x100000018;
    goto LABEL_203;
  }
  if ((v24 & 1) == 0 && *(_DWORD *)a1 == 1819047272)
  {
    unint64_t v2 = 0x100000019;
    goto LABEL_203;
  }
  if ((v27 & 1) == 0 && *(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265)
  {
    unint64_t v2 = 0x10000001ALL;
    goto LABEL_203;
  }
  if (v8) {
    goto LABEL_177;
  }
  if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1702131056)
  {
    unint64_t v2 = 0x10000001BLL;
    goto LABEL_203;
  }
  if (*(_DWORD *)a1 == 1919052140 && *(_DWORD *)(a1 + 3) == 2037539186)
  {
    unint64_t v2 = 0x10000001CLL;
    goto LABEL_203;
  }
LABEL_177:
  BOOL v39 = a2 < 0xD;
  if (a2 >= 0xD && !v20)
  {
    if (*(void *)a1 == 0x72656E6567796172 && *(void *)(a1 + 5) == 0x6E6F69746172656ELL)
    {
      unint64_t v2 = 0x10000001DLL;
      goto LABEL_251;
    }
    BOOL v39 = 0;
  }
LABEL_204:
  uint64_t v41 = v2 & 0x100000000;
  if (a2 >= 0xC
    && !v41
    && (*(void *)a1 == 0x6365737265746E69 ? (BOOL v42 = *(_DWORD *)(a1 + 8) == 1852795252) : (BOOL v42 = 0), v42))
  {
    unint64_t v2 = 0x10000001ELL;
  }
  else if (a2 >= 6 {
         && !v41
  }
         && (*(_DWORD *)a1 == 1752788577 ? (BOOL v43 = *(unsigned __int16 *)(a1 + 4) == 29801) : (BOOL v43 = 0), v43))
  {
    unint64_t v2 = 0x10000001FLL;
  }
  else
  {
    if (v41) {
      BOOL v18 = 1;
    }
    if (!v18
      && (*(void *)a1 == 0x68747365736F6C63 ? (BOOL v44 = *(unsigned __int16 *)(a1 + 8) == 29801) : (BOOL v44 = 0), v44))
    {
      unint64_t v2 = 0x100000020;
    }
    else
    {
      BOOL v45 = a2 >= 4 && v41 == 0;
      char v46 = !v45;
      if (v45 && *(_DWORD *)a1 == 1936943469)
      {
        unint64_t v2 = 0x100000021;
      }
      else
      {
        if (v41) {
          BOOL v6 = 1;
        }
        if (!v6 && *(void *)a1 == 0x656C62616C6C6163)
        {
          unint64_t v2 = 0x100000022;
        }
        else if ((v46 & 1) == 0 && *(_DWORD *)a1 == 1752393069)
        {
          unint64_t v2 = 0x100000023;
        }
        else
        {
          if (v41) {
            char v47 = 1;
          }
          else {
            char v47 = v39;
          }
          if ((v47 & 1) == 0 && !(*(void *)a1 ^ 0x636966696C706D61 | *(void *)(a1 + 5) ^ 0x6E6F697461636966)) {
            unint64_t v2 = 0x100000024;
          }
        }
      }
    }
  }
LABEL_251:
  if ((v2 & 0xFF00000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD0BBF4C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5)
  {
    if (*(_DWORD *)(a1 + a2 - 5) ^ 0x666F6378 | *(unsigned __int8 *)(a1 + a2 - 1) ^ 0x66) {
      unint64_t v2 = 0;
    }
    else {
      unint64_t v2 = 0x100000009;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  if (a2 >= 4 && !HIDWORD(v2) && *(_DWORD *)(a1 + a2 - 4) == 1717989219) {
    unint64_t v2 = 0x100000001;
  }
  uint64_t v3 = v2 & 0x100000000;
  if (a2 >= 3 && !v3 && (*(_WORD *)(a1 + a2 - 3) == 27749 ? (BOOL v4 = *(unsigned char *)(a1 + a2 - 1) == 102) : (BOOL v4 = 0), v4))
  {
    unint64_t v2 = 0x100000003;
  }
  else
  {
    BOOL v5 = a2 >= 4 && v3 == 0;
    char v6 = !v5;
    if (v5 && *(_DWORD *)(a1 + a2 - 4) == 1717989223)
    {
      unint64_t v2 = 0x100000004;
    }
    else
    {
      BOOL v7 = a2 >= 5 && v3 == 0;
      char v8 = !v7;
      if (v7 && (*(_DWORD *)(a1 + a2 - 5) == 1751343469 ? (BOOL v9 = *(unsigned char *)(a1 + a2 - 1) == 111) : (BOOL v9 = 0), v9))
      {
        unint64_t v2 = 0x100000005;
      }
      else if ((v6 & 1) == 0 && *(_DWORD *)(a1 + a2 - 4) == 1836278135)
      {
        unint64_t v2 = 0x100000007;
      }
      else if ((v8 & 1) == 0 {
             && (*(_DWORD *)(a1 + a2 - 5) == 1919512691 ? (BOOL v10 = *(unsigned char *)(a1 + a2 - 1) == 118) : (BOOL v10 = 0), v10))
      }
      {
        unint64_t v2 = 0x100000006;
      }
      else if (a2 >= 8 && !v3 && *(void *)(a1 + a2 - 8) == 0x62696C6C6174656DLL)
      {
        unint64_t v2 = 0x100000008;
      }
    }
  }
  if ((v2 & 0x300000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD0BC0FC(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, int a11)
{
  uint64_t v15 = sub_1CD0BEC94(a1, a2, a3, a11);
  uint64_t v16 = sub_1CD0BEC94(v15, a4, a5, a11);
  uint64_t v17 = sub_1CD0BEC94(v16, a6, a7, a11);

  return sub_1CD0BEC94(v17, a9, a10, a11);
}

uint64_t sub_1CD0BC18C(llvm::Triple *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  uint64_t result = 8;
  switch(v2)
  {
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 24:
    case 25:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 40:
    case 43:
    case 44:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 60:
    case 61:
    case 62:
    case 65:
    case 66:
    case 67:
      return 3;
    case 11:
      return 2;
    case 21:
    case 23:
      if (*((_DWORD *)this + 9) == 21) {
        return 9;
      }
      else {
        return 3;
      }
    case 26:
    case 27:
    case 28:
    case 29:
      return 5;
    case 30:
      unsigned int v6 = *((_DWORD *)this + 9);
      BOOL v7 = v6 > 0x21;
      uint64_t v8 = (1 << v6) & 0x3F0000888;
      if (v7 || v8 == 0) {
        return 3;
      }
      ArchName = llvm::Triple::getArchName(this);
      uint64_t v28 = ArchName;
      uint64_t v29 = v11;
      __int16 v30 = 0;
      if (v11 != 13)
      {
        if (v11 != 17) {
          goto LABEL_62;
        }
        BOOL v21 = *(void *)ArchName == 0x675F757067646D61 && *((void *)ArchName + 1) == 0x776E5F3030367866;
        if (!v21 || *((unsigned char *)ArchName + 16) != 104) {
          goto LABEL_62;
        }
LABEL_25:
        __int16 v30 = 257;
        goto LABEL_62;
      }
      if (*(void *)ArchName == 0x675F757067646D61 && *(void *)((char *)ArchName + 5) == 0x3030367866675F75) {
        goto LABEL_25;
      }
      if (*(void *)ArchName == 0x675F757067646D61 && *(void *)((char *)ArchName + 5) == 0x3130377866675F75) {
        goto LABEL_25;
      }
      if (*(void *)ArchName == 0x675F757067646D61 && *(void *)((char *)ArchName + 5) == 0x3430377866675F75) {
        goto LABEL_25;
      }
LABEL_62:
      uint64_t v25 = sub_1CD5A6908((uint64_t)&v28, "amdgpu", 6, "amdgpu_gfx803", 13, "amdgpu_gfx802", 13, 1);
      uint64_t v26 = sub_1CD5A6908(v25, "amdgpu_gfx900", 13, "amdgpu_gfx904", 13, "amdgpu_gfx906", 13, 1);
      uint64_t v20 = sub_1CD8512FC(v26, "amdgpu_gfx1010_nsgc", 19, "amdgpu_gfx1010", 14, "amdgpu_gfx1011", 14, v27, "amdgpu_gfx1012", 14, "amdgpu_gfx1030", 14, "amdgpu_gfx1032", 14, 1);
LABEL_63:
      if (*(unsigned char *)(v20 + 17) && *(unsigned char *)(v20 + 16)) {
        return 5;
      }
      else {
        return 3;
      }
    case 36:
      if (*((_DWORD *)this + 9) == 16) {
        return 4;
      }
      else {
        return 3;
      }
    case 45:
      unsigned int v13 = *((_DWORD *)this + 9);
      BOOL v7 = v13 > 0x21;
      uint64_t v14 = (1 << v13) & 0x3F0000888;
      if (v7 || v14 == 0) {
        return 3;
      }
      uint64_t v16 = llvm::Triple::getArchName(this);
      uint64_t v28 = v16;
      uint64_t v29 = v18;
      __int16 v30 = 0;
      if (v18 == 9 && *(void *)v16 == 0x706761696469766ELL && *((unsigned char *)v16 + 8) == 117) {
        __int16 v30 = 257;
      }
      uint64_t v20 = sub_1CC53101C((uint64_t)&v28, "nvidiagpu_gk", 12, "nvidiagpu_gm", 12, "nvidiagpu_gp", 12, v17, "nvidiagpu_gv", 12, 1);
      goto LABEL_63;
    case 48:
    case 49:
      return result;
    case 58:
    case 59:
      return 6;
    case 63:
    case 64:
      return 7;
    default:
      unsigned int v4 = *((_DWORD *)this + 9);
      if (v4 <= 0x21 && ((1 << v4) & 0x3F0000888) != 0) {
        return 5;
      }
      if (v4 == 15) {
        return 1;
      }
      else {
        return 3;
      }
  }
}

void llvm::Triple::normalize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  v111[8] = *MEMORY[0x1E4F143B8];
  v108[0] = a1;
  v108[1] = a2;
  v109 = v111;
  uint64_t v110 = 0x400000000;
  llvm::StringRef::split((char *)v108, (uint64_t)&v109, 45, -1, 1);
  uint64_t v10 = v110;
  if (!v110)
  {
    int v23 = 0;
    int v14 = 0;
    int v11 = 0;
    int v17 = 0;
    BOOL v22 = 0;
    BOOL v21 = 0;
    goto LABEL_21;
  }
  int v11 = sub_1CD0B88D8(*(void *)v109, *((void *)v109 + 1), v4, v5, v6, v7, v8, v9);
  unsigned int v12 = v110;
  if (v110 < 2)
  {
    int v23 = 0;
    int v14 = 0;
LABEL_118:
    int v17 = 0;
    BOOL v22 = 0;
    BOOL v21 = 0;
    goto LABEL_20;
  }
  unsigned int v13 = v109;
  int v14 = sub_1CD0BACE4(*((unsigned __int16 **)v109 + 2), *((void *)v109 + 3));
  if (v12 == 2)
  {
    int v23 = 0;
    goto LABEL_118;
  }
  uint64_t v15 = v13[4];
  unint64_t v16 = v13[5];
  int v17 = sub_1CD0BAF40(v15, v16);
  if (v16 >= 6)
  {
    BOOL v19 = *(_DWORD *)v15 == 2003269987 && *(_WORD *)(v15 + 4) == 28265;
    goto LABEL_11;
  }
  BOOL v19 = 0;
  BOOL v22 = 0;
  BOOL v21 = 0;
  if (v16 == 5)
  {
LABEL_11:
    BOOL v21 = *(_DWORD *)v15 == 1735289197 && *(unsigned char *)(v15 + 4) == 119;
    BOOL v22 = v19;
  }
  if (v12 < 4)
  {
    int v23 = 0;
LABEL_20:
    uint64_t v10 = 0;
    goto LABEL_21;
  }
  BOOL v96 = v21;
  BOOL v98 = v22;
  int v67 = v17;
  int v23 = sub_1CD0BB784(v13[6], v13[7]);
  if (v12 == 4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = sub_1CD0BBF4C(v13[8], v13[9]);
  }
  int v17 = v67;
  BOOL v21 = v96;
  BOOL v22 = v98;
LABEL_21:
  unint64_t v24 = 0;
  v107[0] = v11 != 0;
  v107[1] = v14 != 0;
  v107[2] = v17 != 0;
  v107[3] = v23 != 0;
  while (2)
  {
    int v25 = v110;
    if (v107[v24]) {
      BOOL v26 = 1;
    }
    else {
      BOOL v26 = v110 == 0;
    }
    if (v26) {
      goto LABEL_27;
    }
    uint64_t v27 = 0;
    LODWORD(v28) = 0;
    while (v28 <= 3 && v107[v27])
    {
LABEL_31:
      uint64_t v27 = (v28 + 1);
      LODWORD(v28) = v27;
      if (v27 == v25) {
        goto LABEL_27;
      }
    }
    int v91 = v25;
    BOOL v95 = v21;
    BOOL v97 = v22;
    uint64_t v92 = v27;
    uint64_t v93 = v10;
    int v99 = v23;
    int v94 = v17;
    BOOL v42 = (char *)v109 + 16 * v27;
    BOOL v44 = *(unsigned __int16 **)v42;
    unint64_t v43 = *((void *)v42 + 1);
    switch((int)v24)
    {
      case 1:
        int v14 = sub_1CD0BACE4(*(unsigned __int16 **)v42, *((void *)v42 + 1));
        if (v14) {
          goto LABEL_79;
        }
        int v17 = v94;
        int v23 = v99;
        uint64_t v10 = v93;
        goto LABEL_76;
      case 2:
        int v94 = sub_1CD0BAF40(*(void *)v42, *((void *)v42 + 1));
        if (v43 >= 6)
        {
          BOOL v45 = *(_DWORD *)v44 == 2003269987 && v44[2] == 28265;
        }
        else
        {
          BOOL v45 = 0;
          BOOL v95 = 0;
          BOOL v97 = 0;
          if (v43 != 5) {
            goto LABEL_150;
          }
        }
        BOOL v82 = *(_DWORD *)v44 == 1735289197 && *((unsigned char *)v44 + 4) == 119;
        BOOL v95 = v82;
        BOOL v97 = v45;
LABEL_150:
        if (v94 || v97 || v95) {
          goto LABEL_79;
        }
        int v17 = 0;
        BOOL v22 = 0;
        BOOL v21 = 0;
        int v23 = v99;
        uint64_t v10 = v93;
        goto LABEL_77;
      case 3:
        int v99 = sub_1CD0BB784(*(void *)v42, *((void *)v42 + 1));
        if (v99) {
          goto LABEL_79;
        }
        uint64_t v46 = sub_1CD0BBF4C((uint64_t)v44, v43);
        uint64_t v10 = 0;
        if (!v46)
        {
          int v23 = 0;
          int v17 = v94;
LABEL_76:
          BOOL v21 = v95;
          BOOL v22 = v97;
LABEL_77:
          int v25 = v91;
          goto LABEL_31;
        }
        int v99 = 0;
        uint64_t v93 = v46;
LABEL_79:
        if (v24 >= v28)
        {
          if (v24 > v28)
          {
            do
            {
              unsigned int v56 = v110;
              if (v110 > v28)
              {
                uint64_t v57 = 0;
                uint64_t v58 = "";
                unsigned int v59 = v28;
                while (1)
                {
                  uint64_t v60 = v58;
                  uint64_t v61 = v57;
                  uint64_t v62 = (char *)v109 + 16 * v59;
                  uint64_t v58 = *(const char **)v62;
                  uint64_t v57 = (const char *)*((void *)v62 + 1);
                  *(void *)uint64_t v62 = v60;
                  *((void *)v62 + 1) = v61;
                  if (!v57) {
                    break;
                  }
                  if (v59 <= 3) {
                    int v63 = 3;
                  }
                  else {
                    int v63 = v59;
                  }
                  while (v63 != v59)
                  {
                    if (!v107[++v59]) {
                      goto LABEL_102;
                    }
                  }
                  unsigned int v59 = v63 + 1;
LABEL_102:
                  if (v56 <= v59)
                  {
                    if (v56 >= HIDWORD(v110)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    size_t v64 = (const char **)((char *)v109 + 16 * v110);
                    *size_t v64 = v58;
                    v64[1] = v57;
                    LODWORD(v110) = v110 + 1;
                    break;
                  }
                }
              }
              if ((v28 + 1) > 4) {
                uint64_t v65 = (v28 + 1);
              }
              else {
                uint64_t v65 = 4;
              }
              while (v65 - 1 != v28)
              {
                unint64_t v28 = (v28 + 1);
                if (!v107[v28])
                {
                  LODWORD(v65) = v28;
                  goto LABEL_112;
                }
              }
              unint64_t v28 = v65;
LABEL_112:
              BOOL v66 = v28 >= v24;
              LODWORD(v28) = v65;
            }
            while (!v66);
          }
        }
        else
        {
          char v47 = (uint64_t *)((char *)v109 + 16 * v92);
          uint64_t v49 = *v47;
          uint64_t v48 = v47[1];
          uint64_t *v47 = (uint64_t)"";
          v47[1] = 0;
          if (v48)
          {
            unsigned int v50 = v24;
            do
            {
              unint64_t v51 = v50;
              if (v50 <= 3)
              {
                unint64_t v52 = v50 + (unint64_t)(3 - v50) + 1;
                while (v107[v51])
                {
                  if (++v51 == 4)
                  {
                    unsigned int v50 = 4;
                    goto LABEL_89;
                  }
                }
                unsigned int v50 = v51;
              }
              unint64_t v52 = v51;
LABEL_89:
              std::string v53 = (uint64_t *)((char *)v109 + 16 * v52);
              uint64_t v54 = *v53;
              uint64_t v55 = v53[1];
              *std::string v53 = v49;
              v53[1] = v48;
              ++v50;
              uint64_t v48 = v55;
              uint64_t v49 = v54;
            }
            while (v55);
          }
        }
        v107[v24] = 1;
        int v17 = v94;
        BOOL v21 = v95;
        BOOL v22 = v97;
        int v23 = v99;
        uint64_t v10 = v93;
LABEL_27:
        if (++v24 != 4) {
          continue;
        }
        if (v110)
        {
          uint64_t v29 = 16 * v110;
          __int16 v30 = (char *)v109 + 8;
          do
          {
            if (!*v30)
            {
              *(v30 - 1) = "unknown";
              *__int16 v30 = 7;
            }
            v30 += 2;
            v29 -= 16;
          }
          while (v29);
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v106 = 0;
        if (v23 == 11)
        {
          unint64_t v68 = v109;
          unint64_t v69 = *((void *)v109 + 7);
          if (v69 >= 0xB)
          {
            uint64_t v70 = (void *)*((void *)v109 + 6);
            if (*v70 == 0x6564696F72646E61 && *(void *)((char *)v70 + 3) == 0x6962616564696F72)
            {
              BOOL v72 = v21;
              BOOL v73 = v22;
              int v74 = v10;
              int v75 = v17;
              if (v69 > 0xB)
              {
                __int16 v102 = 1283;
                v101[0] = "android";
                v101[2] = (char *)v70 + 11;
                v101[3] = v69 - 11;
                llvm::Twine::str((llvm::Twine *)v101, &v103);
                if (SHIBYTE(v106) < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v106 = v104;
                *(_OWORD *)std::string __p = v103;
                int v88 = __p;
                if (v104 < 0) {
                  int v88 = (void **)v103;
                }
                uint64_t v89 = HIBYTE(v104) & 0x7F;
                if (v104 < 0) {
                  uint64_t v89 = *((void *)&v103 + 1);
                }
                unint64_t v90 = v109;
                *((void *)v109 + 6) = v88;
                v90[7] = v89;
              }
              else
              {
                *((void *)v109 + 6) = "android";
                v68[7] = 7;
              }
              int v17 = v75;
              LODWORD(v10) = v74;
              BOOL v22 = v73;
              BOOL v21 = v72;
            }
          }
        }
        else if (v14 == 13 && v23 == 4)
        {
          std::string::size_type v83 = v109;
          *((void *)v109 + 6) = "gnueabihf";
          v83[7] = 9;
        }
        if (v17 == 15)
        {
          int v76 = 15;
          int v100 = v23;
          unsigned int v77 = v10;
          BOOL v78 = v22;
          BOOL v79 = v21;
          sub_1CC5E6800((uint64_t)&v109, 4uLL);
          BOOL v21 = v79;
          BOOL v22 = v78;
          LODWORD(v10) = v77;
          int v17 = 15;
          uint64_t v34 = v109;
          *((void *)v109 + 4) = "windows";
          v34[5] = 7;
          if (v23) {
            goto LABEL_45;
          }
          if (v77 > 1)
          {
            uint64_t v87 = (int)v77 - 2;
            uint64_t v10 = qword_1CFB2F6E8[v87];
            v34[6] = off_1E68576F0[(int)v87];
            goto LABEL_136;
          }
          v34[6] = "msvc";
          v34[7] = 4;
        }
        else
        {
          if (v21)
          {
            BOOL v79 = v21;
            BOOL v78 = v22;
            unsigned int v77 = v10;
            int v100 = v23;
            int v76 = v17;
            sub_1CC5E6800((uint64_t)&v109, 4uLL);
            uint64_t v34 = v109;
            *((void *)v109 + 4) = "windows";
            v34[5] = 7;
            v34[6] = "gnu";
            uint64_t v10 = 3;
          }
          else
          {
            if (!v22) {
              goto LABEL_45;
            }
            BOOL v79 = v21;
            BOOL v78 = v22;
            unsigned int v77 = v10;
            int v100 = v23;
            int v76 = v17;
            sub_1CC5E6800((uint64_t)&v109, 4uLL);
            uint64_t v34 = v109;
            *((void *)v109 + 4) = "windows";
            v34[5] = 7;
            v34[6] = "cygnus";
            uint64_t v10 = 6;
          }
LABEL_136:
          v34[7] = v10;
          int v17 = v76;
          int v23 = v100;
          LODWORD(v10) = v77;
          BOOL v22 = v78;
          BOOL v21 = v79;
LABEL_45:
          int v31 = v21 || v22;
          BOOL v33 = v17 == 15 && v23 != 0;
          if (((v31 | v33) & 1) != 0 && v10 > 1)
          {
            int v84 = v10;
            sub_1CC5E6800((uint64_t)&v109, 5uLL);
            uint64_t v85 = v84 - 2;
            uint64_t v86 = qword_1CFB2F6E8[v85];
            uint64_t v34 = v109;
            *((void *)v109 + 8) = off_1E68576F0[(int)v85];
            v34[9] = v86;
          }
          else
          {
            uint64_t v34 = v109;
          }
        }
        uint64_t v35 = v110;
        a3->__r_.__value_.__l.__size_ = 0;
        a3->__r_.__value_.__r.__words[2] = 0;
        a3->__r_.__value_.__r.__words[0] = 0;
        if (v35)
        {
          uint64_t v36 = 0;
          std::string::size_type v37 = v35 - 1;
          char v38 = (char *)&v34[2 * v35];
          do
          {
            v37 += v34[v36 + 1];
            v36 += 2;
          }
          while (2 * v35 != v36);
          std::string::reserve(a3, v37);
          std::string::append(a3, (const std::string::value_type *)*v34, v34[1]);
          if (v35 != 1)
          {
            BOOL v39 = (char *)(v34 + 2);
            do
            {
              std::string::append(a3, "-", 1uLL);
              char v40 = *(const std::string::value_type **)v39;
              std::string::size_type v41 = *((void *)v39 + 1);
              v39 += 16;
              std::string::append(a3, v40, v41);
            }
            while (v39 != v38);
          }
        }
        if (SHIBYTE(v106) < 0) {
          operator delete(__p[0]);
        }
        if (v109 != v111) {
          free(v109);
        }
        return;
      default:
        if (sub_1CD0B88D8(*(void *)v42, *((void *)v42 + 1), v4, v5, v6, v7, v8, v9)) {
          goto LABEL_79;
        }
        int v25 = v110;
        int v17 = v94;
        BOOL v21 = v95;
        BOOL v22 = v97;
        int v23 = v99;
        uint64_t v10 = v93;
        goto LABEL_31;
    }
  }
}

llvm::Triple *llvm::Triple::getArchName(llvm::Triple *this)
{
  char v1 = *((unsigned char *)this + 23);
  BOOL v2 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = *(llvm::Triple **)this;
  }
  uint64_t v4 = v1 & 0x7F;
  if (v2) {
    uint64_t v5 = *((void *)this + 1);
  }
  else {
    uint64_t v5 = v4;
  }
  v7[0] = (uint64_t)v3;
  v7[1] = v5;
  char v8 = 45;
  llvm::StringRef::find(v7, &v8, 1uLL, 0);
  return v3;
}

uint64_t llvm::Triple::getVendorName(llvm::Triple *this)
{
  char v1 = *((unsigned char *)this + 23);
  BOOL v2 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = *(llvm::Triple **)this;
  }
  unint64_t v4 = v1 & 0x7F;
  if (v2) {
    unint64_t v5 = *((void *)this + 1);
  }
  else {
    unint64_t v5 = v4;
  }
  v12[0] = (uint64_t)v3;
  v12[1] = v5;
  LOBYTE(v13[0]) = 45;
  uint64_t v6 = llvm::StringRef::find(v12, (char *)v13, 1uLL, 0);
  unint64_t v7 = v6 + 1;
  if (v5 < v6 + 1) {
    unint64_t v7 = v5;
  }
  if (v6 == -1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t)v3 + v7;
  }
  uint64_t v9 = v5 - v7;
  if (v6 == -1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  v13[0] = v8;
  v13[1] = v10;
  LOBYTE(v12[0]) = 45;
  llvm::StringRef::find(v13, (char *)v12, 1uLL, 0);
  return v8;
}

uint64_t llvm::Triple::getOSName(llvm::Triple *this)
{
  char v1 = *((unsigned char *)this + 23);
  BOOL v2 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = *(llvm::Triple **)this;
  }
  unint64_t v4 = v1 & 0x7F;
  if (v2) {
    unint64_t v5 = *((void *)this + 1);
  }
  else {
    unint64_t v5 = v4;
  }
  v17[0] = (uint64_t)v3;
  v17[1] = v5;
  LOBYTE(v18) = 45;
  uint64_t v6 = llvm::StringRef::find(v17, (char *)&v18, 1uLL, 0);
  unint64_t v7 = v6 + 1;
  if (v5 < v6 + 1) {
    unint64_t v7 = v5;
  }
  if (v6 == -1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t)v3 + v7;
  }
  unint64_t v9 = v5 - v7;
  if (v6 == -1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v18 = v8;
  unint64_t v19 = v10;
  LOBYTE(v17[0]) = 45;
  uint64_t v11 = llvm::StringRef::find(&v18, (char *)v17, 1uLL, 0);
  unint64_t v12 = v11 + 1;
  if (v10 < v11 + 1) {
    unint64_t v12 = v10;
  }
  if (v11 == -1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v8 + v12;
  }
  unint64_t v14 = v10 - v12;
  if (v11 == -1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v14;
  }
  uint64_t v18 = v13;
  unint64_t v19 = v15;
  LOBYTE(v17[0]) = 45;
  llvm::StringRef::find(&v18, (char *)v17, 1uLL, 0);
  return v13;
}

unint64_t llvm::Triple::getEnvironmentName(llvm::Triple *this)
{
  char v1 = *((unsigned char *)this + 23);
  BOOL v2 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = *(llvm::Triple **)this;
  }
  unint64_t v4 = v1 & 0x7F;
  if (v2) {
    unint64_t v5 = *((void *)this + 1);
  }
  else {
    unint64_t v5 = v4;
  }
  v19[0] = (uint64_t)v3;
  v19[1] = v5;
  LOBYTE(v20) = 45;
  uint64_t v6 = llvm::StringRef::find(v19, (char *)&v20, 1uLL, 0);
  unint64_t v7 = v6 + 1;
  if (v5 < v6 + 1) {
    unint64_t v7 = v5;
  }
  if (v6 == -1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t)v3 + v7;
  }
  unint64_t v9 = v5 - v7;
  if (v6 == -1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v20 = v8;
  unint64_t v21 = v10;
  LOBYTE(v19[0]) = 45;
  uint64_t v11 = llvm::StringRef::find(&v20, (char *)v19, 1uLL, 0);
  unint64_t v12 = v11 + 1;
  if (v10 < v11 + 1) {
    unint64_t v12 = v10;
  }
  if (v11 == -1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v8 + v12;
  }
  unint64_t v14 = v10 - v12;
  if (v11 == -1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v14;
  }
  uint64_t v20 = v13;
  unint64_t v21 = v15;
  LOBYTE(v19[0]) = 45;
  uint64_t v16 = llvm::StringRef::find(&v20, (char *)v19, 1uLL, 0);
  unint64_t result = 0;
  if (v16 != -1)
  {
    if (v15 >= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    else {
      unint64_t v18 = v15;
    }
    return v13 + v18;
  }
  return result;
}

unint64_t llvm::Triple::getOSAndEnvironmentName(llvm::Triple *this)
{
  char v1 = *((unsigned char *)this + 23);
  BOOL v2 = v1 < 0;
  if (v1 >= 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = *(llvm::Triple **)this;
  }
  unint64_t v4 = v1 & 0x7F;
  if (v2) {
    unint64_t v5 = *((void *)this + 1);
  }
  else {
    unint64_t v5 = v4;
  }
  v15[0] = (uint64_t)v3;
  v15[1] = v5;
  LOBYTE(v16[0]) = 45;
  uint64_t v6 = llvm::StringRef::find(v15, (char *)v16, 1uLL, 0);
  unint64_t v7 = v6 + 1;
  if (v5 < v6 + 1) {
    unint64_t v7 = v5;
  }
  if (v6 == -1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t)v3 + v7;
  }
  unint64_t v9 = v5 - v7;
  if (v6 == -1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9;
  }
  v16[0] = v8;
  v16[1] = v10;
  LOBYTE(v15[0]) = 45;
  uint64_t v11 = llvm::StringRef::find(v16, (char *)v15, 1uLL, 0);
  if (v10 >= v11 + 1) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = v10;
  }
  unint64_t v13 = v8 + v12;
  if (v11 == -1) {
    return 0;
  }
  return v13;
}

unint64_t llvm::Triple::getOSVersion(llvm::Triple *this)
{
  OSName = (char *)llvm::Triple::getOSName(this);
  unint64_t v4 = v3;
  unsigned int v5 = *((_DWORD *)this + 9);
  OSTypeName = llvm::Triple::getOSTypeName((llvm::Triple *)v5);
  if (v4 < v7 || (size_t v8 = v7) != 0 && memcmp(OSName, OSTypeName, v7))
  {
    if (v5 == 11 && v4 >= 5 && *(_DWORD *)OSName == 1868783981 && OSName[4] == 115)
    {
      OSName += 5;
      v4 -= 5;
    }
  }
  else
  {
    if (v4 >= v8) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = v4;
    }
    OSName += v9;
    v4 -= v9;
  }
  uint64_t AIRVersion = 0;
  uint64_t v33 = 0;
  llvm::VersionTuple::tryParse((unint64_t *)&AIRVersion, (unsigned __int8 *)OSName, v4);
  if (v33 < 0) {
    uint64_t v10 = v33 & 0x7FFFFFFF | 0x80000000;
  }
  else {
    uint64_t v10 = v33;
  }
  if (v33 < 0) {
    unint64_t v11 = AIRVersion | 0x8000000000000000;
  }
  else {
    unint64_t v11 = AIRVersion;
  }
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 0x30 && !(v11 & 0x7FFFFFFFFFFFFFFFLL | v10 & 0x7FFFFFFF7FFFFFFFLL))
  {
    ArchName = llvm::Triple::getArchName(this);
    if (v15 >= 7)
    {
      BOOL v16 = *(_DWORD *)ArchName == 863136097 && *(_DWORD *)((char *)ArchName + 3) == 1985950259;
      if (v16
        || (*(_DWORD *)ArchName == 913467745 ? (BOOL v17 = *(_DWORD *)((char *)ArchName + 3) == 1985950774) : (BOOL v17 = 0), v17))
      {
        uint64_t AIRVersion = llvm::Triple::getAIRVersion(this);
        uint64_t v33 = v18;
        int v19 = *((_DWORD *)this + 9);
        if (v19 > 27)
        {
          if (v19 != 28)
          {
            if (v19 != 29)
            {
              if (AIRVersion >= 0) {
                unint64_t v11 = 1;
              }
              else {
                unint64_t v11 = (HIDWORD(AIRVersion) & 0x7FFFFFFFu) - 5;
              }
              goto LABEL_15;
            }
            if (!(AIRVersion & 0x7FFFFFFFFFFFFFFFLL ^ 0xB00000001 | v33 & 0x7FFFFFFF7FFFFFFFLL))
            {
              unint64_t v11 = 3;
              goto LABEL_15;
            }
            unint64_t v26 = (HIDWORD(AIRVersion) & 0x7FFFFFFF) + 4;
            BOOL v27 = AIRVersion >= 0;
            unint64_t v28 = 4;
LABEL_61:
            if (v27) {
              unint64_t v11 = v28;
            }
            else {
              unint64_t v11 = v26;
            }
            goto LABEL_15;
          }
          uint64_t v23 = AIRVersion;
          if (AIRVersion != 1) {
            goto LABEL_59;
          }
          uint64_t v24 = v33 & 0x7FFFFFFF7FFFFFFFLL;
          unint64_t v25 = AIRVersion & 0x7FFFFFFF00000000;
          goto LABEL_56;
        }
        if (v19 == 7)
        {
          uint64_t v23 = AIRVersion;
          if (AIRVersion != 1)
          {
LABEL_59:
            unint64_t v26 = (HIDWORD(v23) & 0x7FFFFFFF) + 11;
            goto LABEL_60;
          }
          uint64_t v24 = v33 & 0x7FFFFFFF7FFFFFFFLL;
          unint64_t v25 = AIRVersion & 0x7FFFFFFF00000000;
          if (!(AIRVersion & 0x7FFFFFFF00000000 ^ 0x600000000 | v33 & 0x7FFFFFFF7FFFFFFFLL))
          {
            unint64_t v11 = 8;
            goto LABEL_15;
          }
LABEL_56:
          if (!(v25 ^ 0x800000000 | v24))
          {
            unint64_t v11 = 9;
            goto LABEL_15;
          }
          if (!(v25 ^ 0xB00000000 | v24))
          {
            unint64_t v11 = 10;
            goto LABEL_15;
          }
          goto LABEL_59;
        }
        if (AIRVersion == 1)
        {
          if (!(AIRVersion & 0x7FFFFFFF00000000 ^ 0x800000000 | v33 & 0x7FFFFFFF7FFFFFFFLL))
          {
            uint64_t v29 = 0xB0000000ALL;
            goto LABEL_77;
          }
          if (!(AIRVersion & 0x7FFFFFFF00000000 ^ 0xB00000000 | v33 & 0x7FFFFFFF7FFFFFFFLL))
          {
            uint64_t v29 = 0xC0000000ALL;
LABEL_77:
            unint64_t v11 = v29 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
            goto LABEL_15;
          }
        }
        v31[0] = 0x8000000300000002;
        v31[1] = 0;
        int v30 = sub_1CC156834(&AIRVersion, v31);
        uint64_t v23 = AIRVersion;
        if (v30)
        {
          unint64_t v26 = ((AIRVersion & 0x7FFFFFFF00000000) + 0xD00000000) | 0x800000000000000ALL;
          BOOL v27 = AIRVersion >= 0;
          unint64_t v28 = 0x8000000D0000000ALL;
          goto LABEL_61;
        }
        unint64_t v26 = (HIDWORD(AIRVersion) & 0x7FFFFFFF) + 8;
LABEL_60:
        BOOL v27 = v23 >= 0;
        unint64_t v28 = 11;
        goto LABEL_61;
      }
    }
  }
LABEL_15:
  unint64_t v12 = v11 & 0x7FFFFFFF00000000 | 0x8000000000000001;
  if (v11) {
    unint64_t v12 = v11;
  }
  if (*((_DWORD *)this + 9) == 32) {
    return v12;
  }
  else {
    return v11;
  }
}

uint64_t llvm::Triple::getAIRVersion(llvm::Triple *this)
{
  ArchName = llvm::Triple::getArchName(this);
  if (v3 >= 5) {
    uint64_t v4 = 5;
  }
  else {
    uint64_t v4 = v3;
  }
  unsigned int v5 = (char *)ArchName + v4;
  unint64_t v6 = v3 - v4;
  if (v6 == 5)
  {
    if (bswap32(*(_DWORD *)v5) == 1601581361 && v5[4] == 49) {
      return 0x8000000B00000001;
    }
    goto LABEL_19;
  }
  if (v6 != 4) {
    goto LABEL_19;
  }
  uint64_t result = 0x8000000600000002;
  switch(*(_DWORD *)v5)
  {
    case 0x3631765F:
      return 0x8000000600000001;
    case 0x3831765F:
      return 0x8000000800000001;
    case 0x3032765F:
      uint64_t v8 = 2;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3132765F:
      uint64_t v8 = 0x100000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3232765F:
      uint64_t v8 = 0x200000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3332765F:
      uint64_t v8 = 0x300000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3432765F:
      uint64_t v8 = 0x400000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3532765F:
      uint64_t v8 = 0x500000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
  }
  if (*(_DWORD *)v5 != 909276767)
  {
    if (*(_DWORD *)v5 == 926053983)
    {
      uint64_t v8 = 0x700000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    }
LABEL_19:
    int v9 = *((_DWORD *)this + 9);
    if (v9 > 27)
    {
      if (v9 != 28)
      {
        if (v9 == 29)
        {
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v12;
          uint64_t v45 = 4;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_70;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v13;
          uint64_t v45 = 5;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_74;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v14;
          uint64_t v45 = 6;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_77;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v15;
          uint64_t v45 = 7;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_81;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v16;
          uint64_t v45 = 8;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_83;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v17;
          uint64_t v45 = 9;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_85;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v18;
          uint64_t v45 = 10;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_87;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v19;
          uint64_t v45 = 11;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_58;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v20;
          uint64_t v21 = 12;
        }
        else
        {
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v32;
          uint64_t v45 = 2;
          uint64_t v46 = 0;
          if (sub_1CC156834(&OSVersion, &v45)) {
            goto LABEL_58;
          }
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v35;
          uint64_t v21 = 3;
        }
LABEL_64:
        uint64_t v45 = v21;
        uint64_t v46 = 0;
        int isMacOSXVersionLT = sub_1CC156834(&OSVersion, &v45);
LABEL_65:
        if (isMacOSXVersionLT) {
          unint64_t v10 = 0x8000000700000002;
        }
        else {
          unint64_t v10 = 0;
        }
        goto LABEL_89;
      }
      uint64_t OSVersion = llvm::Triple::getOSVersion(this);
      uint64_t v48 = v23;
      uint64_t v45 = 10;
      uint64_t v46 = 0;
      if ((sub_1CC156834(&OSVersion, &v45) & 1) == 0)
      {
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v24;
        uint64_t v45 = 11;
        uint64_t v46 = 0;
        if ((sub_1CC156834(&OSVersion, &v45) & 1) == 0)
        {
          uint64_t OSVersion = llvm::Triple::getOSVersion(this);
          uint64_t v48 = v25;
          uint64_t v45 = 12;
          uint64_t v46 = 0;
          if ((sub_1CC156834(&OSVersion, &v45) & 1) == 0)
          {
            uint64_t OSVersion = llvm::Triple::getOSVersion(this);
            uint64_t v48 = v26;
            uint64_t v45 = 13;
            uint64_t v46 = 0;
            if (sub_1CC156834(&OSVersion, &v45)) {
              goto LABEL_77;
            }
            uint64_t OSVersion = llvm::Triple::getOSVersion(this);
            uint64_t v48 = v27;
            uint64_t v45 = 14;
            uint64_t v46 = 0;
            if (sub_1CC156834(&OSVersion, &v45)) {
              goto LABEL_81;
            }
            uint64_t OSVersion = llvm::Triple::getOSVersion(this);
            uint64_t v48 = v28;
            uint64_t v45 = 15;
            uint64_t v46 = 0;
            if (sub_1CC156834(&OSVersion, &v45)) {
              goto LABEL_83;
            }
            uint64_t OSVersion = llvm::Triple::getOSVersion(this);
            uint64_t v48 = v29;
            uint64_t v45 = 16;
            uint64_t v46 = 0;
            if (sub_1CC156834(&OSVersion, &v45)) {
              goto LABEL_85;
            }
            uint64_t OSVersion = llvm::Triple::getOSVersion(this);
            uint64_t v48 = v30;
            uint64_t v45 = 17;
            uint64_t v46 = 0;
            if (sub_1CC156834(&OSVersion, &v45)) {
              goto LABEL_87;
            }
            uint64_t OSVersion = llvm::Triple::getOSVersion(this);
            uint64_t v48 = v31;
            uint64_t v45 = 18;
            uint64_t v46 = 0;
            if ((sub_1CC156834(&OSVersion, &v45) & 1) == 0)
            {
LABEL_94:
              uint64_t OSVersion = llvm::Triple::getOSVersion(this);
              uint64_t v48 = v44;
              uint64_t v21 = 19;
              goto LABEL_64;
            }
LABEL_58:
            uint64_t v33 = 0x600000002;
LABEL_88:
            unint64_t v10 = v33 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
            goto LABEL_89;
          }
LABEL_74:
          uint64_t v33 = 2;
          goto LABEL_88;
        }
LABEL_70:
        unint64_t v10 = 0x8000000B00000001;
        goto LABEL_89;
      }
    }
    else
    {
      if (v9 == 7)
      {
        unint64_t v10 = 0x8000000600000002;
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v11;
        uint64_t v45 = 9;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
          unint64_t v10 = 0x8000000600000001;
          goto LABEL_89;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v34;
        uint64_t v45 = 10;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45)) {
          goto LABEL_62;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v36;
        uint64_t v45 = 11;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45)) {
          goto LABEL_70;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v37;
        uint64_t v45 = 12;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45)) {
          goto LABEL_74;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v38;
        uint64_t v45 = 13;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
LABEL_77:
          uint64_t v33 = 0x100000002;
          goto LABEL_88;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v39;
        uint64_t v45 = 14;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
LABEL_81:
          uint64_t v33 = 0x200000002;
          goto LABEL_88;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v40;
        uint64_t v45 = 15;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
LABEL_83:
          uint64_t v33 = 0x300000002;
          goto LABEL_88;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v41;
        uint64_t v45 = 16;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
LABEL_85:
          uint64_t v33 = 0x400000002;
          goto LABEL_88;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v42;
        uint64_t v45 = 17;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
LABEL_87:
          uint64_t v33 = 0x500000002;
          goto LABEL_88;
        }
        uint64_t OSVersion = llvm::Triple::getOSVersion(this);
        uint64_t v48 = v43;
        uint64_t v45 = 18;
        uint64_t v46 = 0;
        if (sub_1CC156834(&OSVersion, &v45))
        {
LABEL_89:
          if ((v10 & 0xF00000003) != 0) {
            return v10;
          }
          else {
            return 0x8000000700000002;
          }
        }
        goto LABEL_94;
      }
      if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 12, 0) & 1) == 0)
      {
        if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 13, 0) & 1) == 0)
        {
          if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 14, 0) & 1) == 0)
          {
            if (llvm::Triple::isMacOSXVersionLT(this, 0xAu, 15, 0)) {
              goto LABEL_77;
            }
            if (llvm::Triple::isMacOSXVersionLT(this, 0xBu, 0, 0)) {
              goto LABEL_81;
            }
            if (llvm::Triple::isMacOSXVersionLT(this, 0xCu, 0, 0)) {
              goto LABEL_83;
            }
            if (llvm::Triple::isMacOSXVersionLT(this, 0xDu, 0, 0)) {
              goto LABEL_85;
            }
            if (llvm::Triple::isMacOSXVersionLT(this, 0xEu, 0, 0)) {
              goto LABEL_87;
            }
            if ((llvm::Triple::isMacOSXVersionLT(this, 0xFu, 0, 0) & 1) == 0)
            {
              int isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT(this, 0x10u, 0, 0);
              goto LABEL_65;
            }
            goto LABEL_58;
          }
          goto LABEL_74;
        }
        goto LABEL_70;
      }
    }
LABEL_62:
    unint64_t v10 = 0x8000000800000001;
    goto LABEL_89;
  }
  return result;
}

double llvm::Triple::setTriple(llvm::Triple *this, const llvm::Twine *a2)
{
  llvm::Triple::Triple((llvm::Triple *)&v4, a2);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(_OWORD *)this = v4;
  *((void *)this + 2) = v5;
  double result = *(double *)&v6;
  *(_OWORD *)((char *)this + 24) = v6;
  *((void *)this + 5) = v7;
  return result;
}

BOOL llvm::Triple::isArch64Bit(llvm::Triple *this)
{
  return sub_1CD0BDF24(*((_DWORD *)this + 6)) == 64;
}

uint64_t sub_1CD0BDF24(int a1)
{
  return dword_1CFB2F778[a1];
}

void llvm::Triple::getEffectiveMacCatalystVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((char *)this + 23);
  if (*((_DWORD *)this + 10) != 21)
  {
    if (v4 < 0)
    {
      sub_1CB8BDF7C(a2, *(const void **)this, *((void *)this + 1));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)this;
      *(void *)(a2 + 16) = *((void *)this + 2);
    }
    *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
    *(void *)(a2 + 40) = *((void *)this + 5);
    return;
  }
  if (v4 < 0)
  {
    sub_1CB8BDF7C(a2, *(const void **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)(a2 + 16) = *((void *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(void *)(a2 + 40) = *((void *)this + 5);
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 0x30)
  {
    unint64_t OSVersion = llvm::Triple::getOSVersion(this);
    if (!(OSVersion & 0x7FFFFFFFFFFFFFFFLL | v6 & 0x7FFFFFFF00000000 | v6 & 0x7FFFFFFF))
    {
      ArchName = llvm::Triple::getArchName(this);
      if (v8 >= 5) {
        uint64_t v10 = 5;
      }
      else {
        uint64_t v10 = v8;
      }
      uint64_t v11 = (char *)ArchName + v10;
      uint64_t v12 = v8 - v10;
      uint64_t v24 = v11;
      uint64_t v25 = v12;
      LOWORD(v26) = 0;
      if (v12 == 4)
      {
        if (*(_DWORD *)v11 != 909211231 && *(_DWORD *)v11 != 942765663 && *(_DWORD *)v11 != 808613471) {
          goto LABEL_27;
        }
      }
      else if (v12 != 5 {
             || ((int v13 = *(_DWORD *)v11, v14 = *((unsigned __int8 *)v11 + 4), v13 == 825325151)
      }
               ? (BOOL v15 = v14 == 49)
               : (BOOL v15 = 0),
                 !v15))
      {
LABEL_27:
        uint64_t v16 = sub_1CC53101C((uint64_t)&v24, "_v21", 4, "_v22", 4, "_v23", 4, v9, "_v24", 4, 1);
        uint64_t v17 = sub_1CC5310AC(v16, "_v25", 4, 1);
        uint64_t v18 = sub_1CC5310AC(v17, "_v26", 4, 1);
        uint64_t v19 = sub_1CC5310AC(v18, "_v27", 4, 1);
        if (*(unsigned char *)(v19 + 17) && *(unsigned char *)(v19 + 16))
        {
          llvm::Triple::setOSAndEnvironmentName((llvm::Triple *)a2, (uint64_t)"macosx", 6);
          return;
        }
        goto LABEL_30;
      }
      LOWORD(v26) = 257;
      goto LABEL_27;
    }
  }
LABEL_30:
  unsigned int v20 = llvm::Triple::getOSVersion(this);
  unint64_t v21 = (v20 - 3) | 0x8000000000000000;
  if (v20 < 0xE) {
    unint64_t v21 = 0x8000000F0000000ALL;
  }
  uint64_t v24 = (const char *)v21;
  uint64_t v25 = 0x80000000;
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v24, v30);
  uint64_t v24 = "macosx";
  uint64_t v25 = 6;
  uint64_t v26 = v30;
  __int16 v27 = 1029;
  llvm::Twine::str((llvm::Twine *)&v24, __p);
  if (v29 >= 0) {
    BOOL v22 = __p;
  }
  else {
    BOOL v22 = (void **)__p[0];
  }
  if (v29 >= 0) {
    uint64_t v23 = v29 & 0x7F;
  }
  else {
    uint64_t v23 = (uint64_t)__p[1];
  }
  llvm::Triple::setOSAndEnvironmentName((llvm::Triple *)a2, (uint64_t)v22, v23);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
}

unint64_t llvm::Triple::getMacCatalystVersionForOS(int a1, _DWORD *a2)
{
  if (a1 == 11)
  {
    if (*a2 < 0xEu)
    {
      uint64_t v2 = 0xF0000000ALL;
      return v2 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    }
    uint64_t v4 = (*a2 - 3);
  }
  else
  {
    if (a1 != 7) {
      return 0;
    }
    if (*a2 < 0xBu)
    {
      uint64_t v2 = 13;
      return v2 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    }
    uint64_t v4 = (*a2 + 3);
  }
  return v4 | 0x8000000000000000;
}

uint64_t llvm::Triple::isMacOSXVersionLT(llvm::Triple *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*((_DWORD *)this + 9) != 11)
  {
    if (a2 == 10)
    {
      a2 = a3 + 4;
      a3 = a4;
      LODWORD(a4) = 0;
    }
    else
    {
      a2 += 9;
    }
  }
  return sub_1CD0BE738(this, a2, a3, a4);
}

uint64_t sub_1CD0BE738(llvm::Triple *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a3)
  {
    unint64_t v5 = a2 | (unint64_t)(a3 << 32);
    if (a4)
    {
      uint64_t OSVersion = llvm::Triple::getOSVersion(a1);
      uint64_t v15 = v11;
      unint64_t v12 = v5 | 0x8000000000000000;
      uint64_t v13 = a4 | 0x80000000;
      return sub_1CC156834(&OSVersion, &v12);
    }
    uint64_t OSVersion = llvm::Triple::getOSVersion(a1);
    uint64_t v15 = v6;
    unint64_t v7 = v5 | 0x8000000000000000;
  }
  else
  {
    uint64_t OSVersion = llvm::Triple::getOSVersion(a1);
    uint64_t v15 = v8;
    unint64_t v7 = a2;
  }
  unint64_t v12 = v7;
  uint64_t v13 = 0;
  return sub_1CC156834(&OSVersion, &v12);
}

const char *llvm::Triple::getAIRVersionedArchName(llvm::Triple *this)
{
  uint64_t AIRVersion = llvm::Triple::getAIRVersion(this);
  if (*((_DWORD *)this + 6) == 48)
  {
    if (AIRVersion == 2)
    {
      uint64_t v11 = AIRVersion & 0x7FFFFFFF00000000;
      uint64_t v12 = v3 & 0x7FFFFFFF00000000;
      if (AIRVersion & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF)
      {
        uint64_t v13 = v3 & 0x7FFFFFFF;
        if (v12 || v11 ^ 0x100000000 | v13)
        {
          if (v12 || v11 ^ 0x200000000 | v13)
          {
            if (v12 || v11 ^ 0x300000000 | v13)
            {
              if (v12 || v11 ^ 0x400000000 | v13)
              {
                if (v12 || v11 ^ 0x500000000 | v13)
                {
                  double result = "air32_v27";
                  if (!v12 && !(v11 ^ 0x600000000 | v13)) {
                    return "air32_v26";
                  }
                }
                else
                {
                  return "air32_v25";
                }
              }
              else
              {
                return "air32_v24";
              }
            }
            else
            {
              return "air32_v23";
            }
          }
          else
          {
            return "air32_v22";
          }
        }
        else
        {
          return "air32_v21";
        }
      }
      else
      {
        return "air32_v20";
      }
    }
    else if (AIRVersion == 1)
    {
      uint64_t v4 = AIRVersion & 0x7FFFFFFF00000000;
      uint64_t v5 = v3 & 0x7FFFFFFF;
      uint64_t v6 = v3 & 0x7FFFFFFF00000000;
      if ((v3 & 0x7FFFFFFF00000000) != 0 || v4 ^ 0x600000000 | v5)
      {
        if (v6 || v4 ^ 0x800000000 | v5)
        {
          double result = "air32_v27";
          if (!v6 && !(v4 ^ 0xB00000000 | v5)) {
            return "air32_v111";
          }
        }
        else
        {
          return "air32_v18";
        }
      }
      else
      {
        return "air32_v16";
      }
    }
    else
    {
      return "air32_v27";
    }
  }
  else if (AIRVersion == 2)
  {
    uint64_t v14 = AIRVersion & 0x7FFFFFFF00000000;
    uint64_t v15 = v3 & 0x7FFFFFFF00000000;
    if (AIRVersion & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF)
    {
      uint64_t v16 = v3 & 0x7FFFFFFF;
      if (v15 || v14 ^ 0x100000000 | v16)
      {
        if (v15 || v14 ^ 0x200000000 | v16)
        {
          if (v15 || v14 ^ 0x300000000 | v16)
          {
            if (v15 || v14 ^ 0x400000000 | v16)
            {
              if (v15 || v14 ^ 0x500000000 | v16)
              {
                double result = "air64_v27";
                if (!v15 && !(v14 ^ 0x600000000 | v16)) {
                  return "air64_v26";
                }
              }
              else
              {
                return "air64_v25";
              }
            }
            else
            {
              return "air64_v24";
            }
          }
          else
          {
            return "air64_v23";
          }
        }
        else
        {
          return "air64_v22";
        }
      }
      else
      {
        return "air64_v21";
      }
    }
    else
    {
      return "air64_v20";
    }
  }
  else if (AIRVersion == 1)
  {
    uint64_t v8 = AIRVersion & 0x7FFFFFFF00000000;
    uint64_t v9 = v3 & 0x7FFFFFFF;
    uint64_t v10 = v3 & 0x7FFFFFFF00000000;
    if ((v3 & 0x7FFFFFFF00000000) != 0 || v8 ^ 0x600000000 | v9)
    {
      if (v10 || v8 ^ 0x800000000 | v9)
      {
        double result = "air64_v27";
        if (!v10 && !(v8 ^ 0xB00000000 | v9)) {
          return "air64_v111";
        }
      }
      else
      {
        return "air64_v18";
      }
    }
    else
    {
      return "air64_v16";
    }
  }
  else
  {
    return "air64_v27";
  }
  return result;
}

uint64_t sub_1CD0BEB24(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, void *a6, uint64_t a7, int a8, void *__s2a, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17)
{
  if (!*(unsigned char *)(a1 + 20))
  {
    if ((v22 = *(const void **)a1, size_t v23 = *(void *)(a1 + 8), v23 == a3)
      && (!v23 || !memcmp(*(const void **)a1, a2, *(void *)(a1 + 8)))
      || v23 == a5 && (!v23 || !memcmp(v22, __s2, v23))
      || v23 == a7 && (!v23 || !memcmp(v22, a6, v23))
      || v23 == a10 && (!v23 || !memcmp(v22, __s2a, v23))
      || v23 == a12 && (!v23 || !memcmp(v22, a11, v23))
      || v23 == a14 && (!v23 || !memcmp(v22, a13, v23))
      || v23 == a16 && (!v23 || !memcmp(v22, a15, v23)))
    {
      *(_DWORD *)(a1 + 16) = a17;
      *(unsigned char *)(a1 + 20) = 1;
    }
  }
  return a1;
}

uint64_t sub_1CD0BEC94(uint64_t result, const void *a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(result + 20))
  {
    size_t v5 = *(void *)(result + 8);
    if (v5 == a3)
    {
      if (!v5
        || (v9 = result, v8 = a4, v6 = memcmp(*(const void **)result, a2, v5), a4 = v8, v7 = v6, double result = v9, !v7))
      {
        *(_DWORD *)(result + 16) = a4;
        *(unsigned char *)(result + 20) = 1;
      }
    }
  }
  return result;
}

void llvm::Twine::str(llvm::Twine *this@<X0>, void *a2@<X8>)
{
  v18[32] = *MEMORY[0x1E4F143B8];
  int v3 = *((unsigned __int8 *)this + 32);
  if (v3 == 4)
  {
    if (*((unsigned char *)this + 33) == 1)
    {
      uint64_t v4 = *(long long **)this;
      if (*(char *)(*(void *)this + 23) < 0)
      {
        uint64_t v13 = *(const void **)v4;
        unint64_t v14 = *((void *)v4 + 1);
        sub_1CB8BDF7C((uint64_t)a2, v13, v14);
      }
      else
      {
        long long v5 = *v4;
        a2[2] = *((void *)v4 + 2);
        *(_OWORD *)a2 = v5;
      }
      return;
    }
LABEL_7:
    uint64_t v16 = v18;
    long long v17 = xmmword_1CD96DBF0;
    int v6 = sub_1CC229614((void **)this, (uint64_t)&v16);
    if (!v6)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
LABEL_17:
      if (v16 != v18) {
        free(v16);
      }
      return;
    }
    size_t v8 = v7;
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v9 = v6;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v12 = operator new(v10 + 1);
      a2[1] = v8;
      a2[2] = v11 | 0x8000000000000000;
      *a2 = v12;
      a2 = v12;
    }
    else
    {
      *((unsigned char *)a2 + 23) = v7;
      if (!v7) {
        goto LABEL_16;
      }
    }
    memmove(a2, v9, v8);
LABEL_16:
    *((unsigned char *)a2 + v8) = 0;
    goto LABEL_17;
  }
  if (v3 != 6 || *((unsigned char *)this + 33) != 1) {
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)this;

  sub_1CD465B2C(v15, a2);
}

llvm::raw_ostream *llvm::Twine::toVector(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v13 = a2;
  int v12 = 0;
  long long v5 = &unk_1F2646FA8;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v3 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v5, *(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 32));
  double result = llvm::Twine::printOneChild(v3, (llvm::raw_ostream *)&v5, *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 33));
  long long v5 = &unk_1F2646B98;
  if (v12 == 1)
  {
    double result = v7;
    if (v7) {
      return (llvm::raw_ostream *)MEMORY[0x1D25D9CB0](v7, 0x1000C8077774924);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::Twine::print(llvm::Twine *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = llvm::Twine::printOneChild(this, a2, *(void *)this, *((void *)this + 1), *((unsigned char *)this + 32));
  uint64_t v5 = *((void *)this + 2);
  size_t v6 = *((void *)this + 3);
  char v7 = *((unsigned char *)this + 33);

  return llvm::Twine::printOneChild(v4, a2, v5, v6, v7);
}

void *llvm::Twine::toNullTerminatedStringRef(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = a2;
  unsigned int v4 = a1[32];
  if (a1[33] != 1 || v4 < 2) {
    goto LABEL_11;
  }
  if (v4 == 4)
  {
    uint64_t v2 = *(void **)a1;
    if ((*(char *)(*(void *)a1 + 23) & 0x80000000) == 0) {
      return v2;
    }
    return (void *)*v2;
  }
  if (v4 != 3)
  {
LABEL_11:
    int v10 = 0;
    char v14 = 0;
    uint64_t v15 = 0;
    long long v17 = a2;
    int v16 = 0;
    uint64_t v9 = &unk_1F2646FA8;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v7 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v9, *(void *)a1, *((void *)a1 + 1), v4);
    llvm::Twine::printOneChild(v7, (llvm::raw_ostream *)&v9, *((void *)a1 + 2), *((void *)a1 + 3), a1[33]);
    uint64_t v9 = &unk_1F2646B98;
    if (v16 == 1 && v11) {
      MEMORY[0x1D25D9CB0](v11, 0x1000C8077774924);
    }
    uint64_t v8 = v2[1];
    if ((unint64_t)(v8 + 1) > v2[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*v2 + v8) = 0;
    return (void *)*v2;
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1) {
    strlen(*(const char **)a1);
  }
  return v2;
}

llvm::raw_ostream *llvm::Twine::printOneChild(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, size_t a4, char a5)
{
  while (2)
  {
    switch(a5)
    {
      case 2:
        double result = (llvm::raw_ostream *)llvm::Twine::printOneChild(result, a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned __int8 *)(a3 + 32));
        a5 = *(unsigned char *)(a3 + 33);
        uint64_t v7 = a3 + 16;
        a3 = *(void *)(a3 + 16);
        a4 = *(void *)(v7 + 8);
        continue;
      case 3:
        if (!a3) {
          return result;
        }
        size_t v11 = strlen((const char *)a3);
        double result = (llvm::raw_ostream *)*((void *)a2 + 4);
        if (v11 > *((void *)a2 + 3) - (void)result)
        {
          uint64_t v8 = a2;
          uint64_t v9 = (const char *)a3;
          size_t v10 = v11;
          goto LABEL_8;
        }
        if (!v11) {
          return result;
        }
        double result = (llvm::raw_ostream *)memcpy(result, (const void *)a3, v11);
        size_t v19 = *((void *)a2 + 4) + v11;
        goto LABEL_34;
      case 4:
        char v16 = *(unsigned char *)(a3 + 23);
        BOOL v17 = v16 < 0;
        if (v16 >= 0) {
          uint64_t v9 = (const char *)a3;
        }
        else {
          uint64_t v9 = *(const char **)a3;
        }
        size_t v18 = v16 & 0x7F;
        if (v17) {
          size_t v10 = *(void *)(a3 + 8);
        }
        else {
          size_t v10 = v18;
        }
        uint64_t v8 = a2;
        goto LABEL_8;
      case 5:
        double result = (llvm::raw_ostream *)*((void *)a2 + 4);
        if (a4 <= *((void *)a2 + 3) - (void)result)
        {
          if (a4)
          {
            BOOL v22 = (const void *)a3;
            size_t v23 = a4;
            double result = (llvm::raw_ostream *)memcpy(result, v22, a4);
            size_t v19 = *((void *)a2 + 4) + v23;
LABEL_34:
            *((void *)a2 + 4) = v19;
          }
        }
        else
        {
          uint64_t v8 = a2;
          uint64_t v9 = (const char *)a3;
          size_t v10 = a4;
LABEL_8:
          return llvm::raw_ostream::write(v8, v9, v10);
        }
        return result;
      case 6:
        return llvm::raw_ostream::operator<<(a2, a3);
      case 7:
        uint64_t v12 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v12 < *((void *)a2 + 3))
        {
          *((void *)a2 + 4) = v12 + 1;
          *uint64_t v12 = a3;
        }
        else
        {
          return llvm::raw_ostream::write(a2, a3);
        }
        return result;
      case 8:
        unint64_t v13 = a3;
        goto LABEL_16;
      case 9:
        unint64_t v13 = (int)a3;
        if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001) {
          goto LABEL_31;
        }
        goto LABEL_16;
      case 10:
      case 12:
        unint64_t v13 = *(void *)a3;
        goto LABEL_16;
      case 11:
        unint64_t v13 = *(void *)a3;
        if ((*(void *)a3 & 0x8000000000000000) != 0)
        {
LABEL_31:
          unint64_t v13 = -(uint64_t)v13;
          char v14 = a2;
          int v15 = 1;
        }
        else
        {
LABEL_16:
          char v14 = a2;
          int v15 = 0;
        }
        return sub_1CD098D14(v14, v13, 0, 0, v15);
      case 13:
        unint64_t v20 = *(void *)a3;
        return llvm::raw_ostream::operator<<(a2, v20);
      case 14:
        unint64_t v21 = *(void *)a3;
        return llvm::raw_ostream::write_hex(a2, v21);
      default:
        return result;
    }
  }
}

uint64_t llvm::TypeSize::operator unsigned long long(_DWORD *a1, const char *a2)
{
  if (a1[2] == 1)
  {
    int v3 = a1;
    a1 = v3;
  }
  return *(void *)a1;
}

void sub_1CD0BF49C()
{
}

BOOL llvm::sys::unicode::isPrintable(llvm::sys::unicode *this)
{
  if (this >> 16 > 0x10) {
    return 0;
  }
  char v1 = (char *)&unk_1CFB2F8C0;
  unint64_t v2 = 548;
  do
  {
    unint64_t v3 = v2 >> 1;
    unsigned int v4 = &v1[8 * (v2 >> 1)];
    unsigned int v5 = *((_DWORD *)v4 + 1);
    size_t v6 = v4 + 8;
    v2 += ~(v2 >> 1);
    if (v5 < this) {
      char v1 = v6;
    }
    else {
      unint64_t v2 = v3;
    }
  }
  while (v2);
  return v1 == (char *)&unk_1CFB309E0 || *(_DWORD *)v1 > this;
}

uint64_t llvm::sys::unicode::columnWidthUTF8(uint64_t result, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = result;
  unint64_t v3 = 0;
  LODWORD(result) = 0;
  while (1)
  {
    unint64_t v4 = v2 + v3;
    int v5 = byte_1CFB2E8BF[*(unsigned __int8 *)(v2 + v3)];
    if (byte_1CFB2E8BF[*(unsigned __int8 *)(v2 + v3)]) {
      break;
    }
    if (*(unsigned __int8 *)(v2 + v3) - 32 > 0x5E) {
      return 0xFFFFFFFFLL;
    }
    double result = (result + 1);
    ++v3;
LABEL_6:
    if (v3 >= a2) {
      return result;
    }
  }
  uint64_t v29 = v2;
  unint64_t v30 = a2;
  int v28 = result;
  if (v5 == -1) {
    return 4294967294;
  }
  uint64_t v6 = (v5 + 1);
  unint64_t v27 = v3 + v6;
  if (v3 + v6 > a2) {
    return 4294967294;
  }
  char v31 = &v33;
  unint64_t v32 = v4;
  if (llvm::ConvertUTF8toUTF32(&v32, (unsigned __int8 *)(v4 + v6), &v31, (unint64_t)&vars0, 0)) {
    return 4294967294;
  }
  if (HIWORD(v33) <= 0x10u)
  {
    uint64_t v7 = (char *)&unk_1CFB2F8C0;
    unint64_t v8 = 548;
    do
    {
      unint64_t v9 = v8 >> 1;
      size_t v10 = &v7[8 * (v8 >> 1)];
      unsigned int v11 = *((_DWORD *)v10 + 1);
      uint64_t v12 = v10 + 8;
      v8 += ~(v8 >> 1);
      if (v33 > v11) {
        uint64_t v7 = v12;
      }
      else {
        unint64_t v8 = v9;
      }
    }
    while (v8);
    if (v7 == (char *)&unk_1CFB309E0 || v33 < *(_DWORD *)v7)
    {
      unint64_t v13 = (char *)&unk_1CFB309E0;
      unint64_t v14 = 218;
      do
      {
        unint64_t v15 = v14 >> 1;
        char v16 = &v13[8 * (v14 >> 1)];
        unsigned int v17 = *((_DWORD *)v16 + 1);
        size_t v18 = v16 + 8;
        v14 += ~(v14 >> 1);
        if (v33 > v17) {
          unint64_t v13 = v18;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      while (v14);
      if (v13 == (char *)&unk_1CFB310B0 || v33 < *(_DWORD *)v13)
      {
        size_t v19 = (char *)&unk_1CFB310B0;
        unint64_t v20 = 15;
        do
        {
          unint64_t v21 = v20 >> 1;
          BOOL v22 = &v19[8 * (v20 >> 1)];
          unsigned int v23 = *((_DWORD *)v22 + 1);
          uint64_t v24 = v22 + 8;
          v20 += ~(v20 >> 1);
          if (v33 > v23) {
            size_t v19 = v24;
          }
          else {
            unint64_t v20 = v21;
          }
        }
        while (v20);
        int v25 = 1;
        if (v19 != (char *)&unk_1CFB31128)
        {
          if (v33 < *(_DWORD *)v19) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          double result = (v26 + v28);
          goto LABEL_41;
        }
      }
      else
      {
        int v25 = 0;
      }
      double result = (v25 + v28);
LABEL_41:
      uint64_t v2 = v29;
      a2 = v30;
      unint64_t v3 = v27;
      goto LABEL_6;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::VersionTuple::tryParse(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  int v3 = *a2;
  if ((v3 - 58) < 0xFFFFFFF6) {
    return 1;
  }
  LODWORD(v5) = v3 - 48;
  if (a3 == 1) {
    goto LABEL_16;
  }
  int v6 = a2[1];
  if ((v6 - 58) >= 0xFFFFFFF6)
  {
    while (1)
    {
      LODWORD(v5) = v6 + 10 * v5 - 48;
      if (a3 == 2) {
        break;
      }
      int v6 = a2[2];
      ++a2;
      --a3;
      if ((v6 - 58) < 0xFFFFFFF6) {
        goto LABEL_8;
      }
    }
LABEL_16:
    unint64_t v11 = 0;
    unint64_t v5 = v5;
    goto LABEL_17;
  }
LABEL_8:
  uint64_t v4 = 1;
  if (a3 != 2 && v6 == 46)
  {
    int v7 = a2[2];
    if ((v7 - 58) < 0xFFFFFFF6) {
      return 1;
    }
    uint64_t v8 = (v7 - 48);
    if (a3 == 3)
    {
LABEL_15:
      unint64_t v11 = 0;
      unint64_t v5 = v5 | (unint64_t)(v8 << 32) | 0x8000000000000000;
      goto LABEL_17;
    }
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = a2[v9 + 3];
      if ((v10 - 58) < 0xFFFFFFF6) {
        break;
      }
      uint64_t v8 = (v10 + 10 * v8 - 48);
      if (a3 - 3 == ++v9) {
        goto LABEL_15;
      }
    }
    uint64_t v4 = 1;
    if (a3 - 4 != v9 && v10 == 46)
    {
      int v13 = a2[v9 + 4];
      if ((v13 - 58) < 0xFFFFFFF6) {
        return 1;
      }
      unsigned int v14 = v13 - 48;
      if (a3 - 5 == v9)
      {
LABEL_25:
        unint64_t v5 = v5 | (unint64_t)(v8 << 32) | 0x8000000000000000;
        unint64_t v11 = v14 | 0x80000000;
        goto LABEL_17;
      }
      while (1)
      {
        int v15 = a2[v9 + 5];
        if ((v15 - 58) < 0xFFFFFFF6) {
          break;
        }
        unsigned int v14 = v15 + 10 * v14 - 48;
        if (a3 - 5 == ++v9) {
          goto LABEL_25;
        }
      }
      uint64_t v4 = 1;
      if (a3 - 6 != v9 && v15 == 46)
      {
        int v16 = a2[v9 + 6];
        if ((v16 - 58) >= 0xFFFFFFF6)
        {
          uint64_t v17 = (v16 - 48);
          if (a3 - 7 != v9)
          {
            uint64_t v18 = a3 - v9 - 7;
            size_t v19 = &a2[v9 + 7];
            do
            {
              int v20 = *v19;
              if ((v20 - 58) < 0xFFFFFFF6) {
                return 1;
              }
              ++v19;
              uint64_t v17 = (v20 + 10 * v17 - 48);
            }
            while (--v18);
          }
          unint64_t v11 = v14 | (unint64_t)(v17 << 32) | 0x8000000080000000;
          unint64_t v5 = v5 | (unint64_t)(v8 << 32) | 0x8000000000000000;
LABEL_17:
          uint64_t v4 = 0;
          *a1 = v5;
          a1[1] = v11;
          return v4;
        }
        return 1;
      }
    }
  }
  return v4;
}

uint64_t llvm::vfs::Status::Status(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 24) = *(int *)(a2 + 48);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  *(void *)(a1 + 40) = v5 + 1000 * std::chrono::system_clock::from_time_t(*(void *)(a2 + 8)).__d_.__rep_;
  *(void *)(a1 + 48) = *(void *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 32);
  *(void *)(a1 + 64) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 24) = *(int *)(a2 + 48);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  *(void *)(a1 + 40) = v5 + 1000 * std::chrono::system_clock::from_time_t(*(void *)(a2 + 8)).__d_.__rep_;
  *(void *)(a1 + 48) = *(void *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 32);
  *(void *)(a1 + 64) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t llvm::vfs::Status::Status(uint64_t a1, llvm::Twine *this, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, int a10)
{
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  *(void *)(a1 + 56) = a8;
  *(_DWORD *)(a1 + 64) = a9;
  *(_DWORD *)(a1 + 68) = a10;
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

{
  llvm::Twine::str(this, (void *)a1);
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  *(void *)(a1 + 56) = a8;
  *(_DWORD *)(a1 + 64) = a9;
  *(_DWORD *)(a1 + 68) = a10;
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

void llvm::vfs::Status::copyWithNewName(llvm::vfs::Status *this@<X0>, const llvm::sys::fs::file_status *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *((int *)this + 12);
  uint64_t v8 = *((void *)this + 7);
  uint64_t v9 = *((unsigned int *)this + 5);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10 = v9 + 1000 * std::chrono::system_clock::from_time_t(*((void *)this + 1)).__d_.__rep_;
  uint64_t v11 = *((void *)this + 4);
  uint64_t v12 = *((void *)this + 3);
  uint64_t v13 = *((void *)this + 5);
  llvm::Twine::str(a2, (void *)a3);
  *(void *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = v13;
  *(_WORD *)(a3 + 72) = 0;
}

BOOL llvm::vfs::Status::isDirectory(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) == 3;
}

BOOL llvm::vfs::Status::isOther(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) > 4u;
}

BOOL llvm::vfs::Status::exists(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) > 1u;
}

BOOL llvm::vfs::Status::isSymlink(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) == 4;
}

BOOL llvm::vfs::Status::isStatusKnown(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) != 0;
}

void *llvm::vfs::FileSystem::getBufferForFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double result = (*(void *(**)(void *__return_ptr))(*(void *)a1 + 24))(v18);
  if (v19)
  {
    uint64_t v14 = v18[0];
    uint64_t v15 = v18[1];
  }
  else
  {
    if (!a6)
    {
LABEL_3:
      double result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18[0] + 32))(v18[0], a2, a3, a4, a5);
      goto LABEL_4;
    }
    double result = (*(void *(**)(long long *__return_ptr))(*(void *)v18[0] + 40))(&v16);
    if ((v17 & 1) == 0)
    {
      *a6 = v16;
      goto LABEL_3;
    }
    uint64_t v15 = *((void *)&v16 + 1);
    uint64_t v14 = v16;
  }
  *(unsigned char *)(a7 + 16) |= 1u;
  *(void *)a7 = v14;
  *(void *)(a7 + 8) = v15;
LABEL_4:
  if ((v19 & 1) == 0)
  {
    double result = (void *)v18[0];
    v18[0] = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

BOOL llvm::vfs::FileSystem::exists(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  char v1 = v8;
  unsigned int v2 = v7;
  if ((v8 & 1) == 0 && v6 < 0) {
    operator delete(__p);
  }
  return (v1 & 1) == 0 && v2 > 1;
}

uint64_t llvm::vfs::OverlayFileSystem::OverlayFileSystem(uint64_t a1, char *a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2645770;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x100000000;
  sub_1CD852EAC(a1 + 16, a2);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2645770;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x100000000;
  sub_1CD852EAC(a1 + 16, a2);
  return a1;
}

BOOL llvm::vfs::OverlayFileSystem::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16) - 8;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 24);
  do
  {
    uint64_t v5 = v4;
    if (!v4) {
      break;
    }
    int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + v4) + 72))(*(void *)(v3 + v4), a2);
    uint64_t v4 = v5 - 8;
  }
  while (!v6);
  return v5 != 0;
}

void llvm::vfs::OverlayFileSystem::dir_begin(llvm::vfs::OverlayFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, std::__shared_weak_count **a4@<X8>)
{
  llvm::Twine::str(a2, v21);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x100uLL);
  v5->__shared_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645D78;
  int v6 = (atomic_uint **)*((void *)this + 2);
  uint64_t v7 = *((unsigned int *)this + 6);
  *(_OWORD *)std::string __p = *(_OWORD *)v21;
  uint64_t v24 = v22;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  v5[1].__shared_weak_owners_ = 0;
  v5[2].__vftable = 0;
  v5[1].__shared_owners_ = 0;
  LODWORD(v5[2].__shared_owners_) = 9;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645DB0;
  v5[2].__shared_weak_owners_ = (uint64_t)&v5[3].__shared_owners_;
  v5[3].__vftable = (std::__shared_weak_count_vtbl *)0x800000000;
  *(_OWORD *)&v5[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[9].__shared_owners_ = 0u;
  LODWORD(v5[10].__vftable) = 0;
  HIDWORD(v5[10].__vftable) = 8;
  if (!v7)
  {
LABEL_19:
    uint64_t v12 = v5 + 1;
    uint64_t v13 = a3;
    *(void *)&a3->__val_ = sub_1CD0CA5D4((uint64_t)&v5[1], 1);
    a3->__cat_ = v14;
    goto LABEL_20;
  }
  uint64_t v8 = 8 * v7;
  while (1)
  {
    uint64_t v9 = *v6;
    if (*v6) {
      atomic_fetch_add_explicit(v9 + 2, 1u, memory_order_relaxed);
    }
    v29.__val_ = 0;
    v29.__cat_ = std::system_category();
    __int16 v26 = 260;
    int v25 = __p;
    (*(void (**)(uint64_t *__return_ptr, atomic_uint *, void ***, std::error_code *))(*(void *)v9 + 32))(&v27, v9, &v25, &v29);
    if (v29.__val_) {
      break;
    }
    sub_1CD854AD0((uint64_t)&v5[2].__shared_weak_owners_, &v27);
LABEL_11:
    uint64_t v11 = v28;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
    }
    ++v6;
    v8 -= 8;
    if (!v8) {
      goto LABEL_19;
    }
  }
  if (v29.__cat_ == std::generic_category() && v29.__val_ == 2) {
    goto LABEL_11;
  }
  uint64_t v13 = a3;
  *a3 = v29;
  uint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v12 = v5 + 1;
  if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
  }
LABEL_20:
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  char v15 = HIBYTE(v5[2].__vftable);
  int v16 = v15;
  uint64_t shared_weak_owners = v15 & 0x7F;
  if (v16 < 0) {
    uint64_t shared_weak_owners = v5[1].__shared_weak_owners_;
  }
  if (!shared_weak_owners)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v12 = 0;
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (v13->__val_)
  {
    *a4 = 0;
    a4[1] = 0;
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    *a4 = v12;
    a4[1] = v5;
  }
}

void llvm::vfs::InMemoryFileSystem::~InMemoryFileSystem(void **this)
{
  *this = &unk_1F2645818;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  unsigned int v2 = this[2];
  this[2] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t vars8;

  llvm::vfs::InMemoryFileSystem::~InMemoryFileSystem(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::vfs::InMemoryFileSystem::toString(llvm::vfs::InMemoryFileSystem *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 2) + 24))(*((void *)this + 2), 0);
}

void sub_1CD0C03C4()
{
}

BOOL llvm::vfs::InMemoryFileSystem::addLazyFile(uint64_t a1, uint64_t a2, time_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = 0;
  v11[0] = a4;
  v11[1] = a5;
  BOOL v9 = llvm::vfs::InMemoryFileSystem::addFile(a1, a2, a3, &v12, a6, a7, a8, a9, (void (*)(size_t *__return_ptr, uint64_t, long long *))sub_1CD0CACCC, (uint64_t)v11);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return v9;
}

BOOL llvm::vfs::InMemoryFileSystem::addFileNoOwn(uint64_t a1, uint64_t a2, time_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v15 = a4[1];
  v19[0] = *a4;
  v19[1] = v15;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v19, &v20);
  BOOL v16 = llvm::vfs::InMemoryFileSystem::addFile(a1, a2, a3, &v20, a5, a6, a7, a8, (void (*)(size_t *__return_ptr, uint64_t, long long *))sub_1CD0CB07C, (uint64_t)&v18);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  return v16;
}

BOOL llvm::vfs::InMemoryFileSystem::addHardLink(llvm::vfs::InMemoryFileSystem *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_1CD0C0704((uint64_t)v12, this, *((void *)this + 2), (uint64_t)a2, 0, 0);
  sub_1CD0C0704((uint64_t)v10, this, *((void *)this + 2), (uint64_t)a3, 0, 0);
  BOOL v6 = 0;
  if ((v11 & 1) == 0)
  {
    if ((v12[16] & 1) != 0 && *(_DWORD *)(v10[0] + 8) <= 1u)
    {
      uint64_t v8 = v10;
      uint64_t v9 = 0;
      BOOL v6 = llvm::vfs::InMemoryFileSystem::addFile((uint64_t)this, (uint64_t)a2, 0, &v9, 0, 0, 0, 0, (void (*)(size_t *__return_ptr, uint64_t, long long *))sub_1CD0CB284, (uint64_t)&v8);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_1CD0C0704(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6)
{
  v67[16] = *MEMORY[0x1E4F143B8];
  uint64_t v65 = (unsigned __int8 *)v67;
  long long v66 = xmmword_1CFAC3020;
  llvm::Twine::toVector(a4, (uint64_t)&v65);
  (*(void (**)(unsigned char *, unsigned __int8 **))(*(void *)a2 + 88))(a2, &v65);
  if (a2[48]) {
    llvm::sys::path::remove_dots(&v65, 1, 0);
  }
  if ((void)v66)
  {
    char v47 = a5;
    uint64_t v51 = a1;
    llvm::sys::path::begin((unint64_t)v65, v66, 0, (uint64_t)v56);
    uint64_t v52 = a3;
    unsigned int v10 = *(_DWORD *)(a3 + 128);
    if (v10)
    {
      uint64_t v48 = v66;
      uint64_t v49 = v65;
      uint64_t v11 = a3;
      size_t v12 = __n;
      while (1)
      {
        uint64_t v13 = __s1;
        int v14 = 0;
        if (v12)
        {
          size_t v15 = v12;
          BOOL v16 = (unsigned __int8 *)__s1;
          do
          {
            int v17 = *v16++;
            int v14 = 33 * v14 + v17;
            --v15;
          }
          while (v15);
        }
        unsigned int v18 = v10 - 1;
        uint64_t v19 = *(void *)(v11 + 120);
        uint64_t v50 = v10;
        uint64_t v20 = v19 + 8 * v10 + 8;
        int v21 = 1;
        int v22 = v14;
        while (1)
        {
          uint64_t v23 = v22 & v18;
          uint64_t v24 = *(void **)(v19 + 8 * v23);
          if (v24 != (void *)-8)
          {
            if (!v24) {
              goto LABEL_61;
            }
            if (*(_DWORD *)(v20 + 4 * v23) == v14
              && v12 == *v24
              && (!v12 || !memcmp(v13, (char *)v24 + *(unsigned int *)(v11 + 140), v12)))
            {
              break;
            }
          }
          int v22 = v21 + v23;
          ++v21;
        }
        if (v23 == -1 || (int)v23 == v50) {
          goto LABEL_61;
        }
        uint64_t v25 = *(void *)(*(void *)(v19 + 8 * (int)v23) + 8);
        llvm::sys::path::const_iterator::operator++(v56);
        if (!v25) {
          goto LABEL_62;
        }
        unsigned int v26 = *(_DWORD *)(v25 + 8);
        if (v26 == 4) {
          break;
        }
        if (v26 <= 1)
        {
          if ((unsigned __int8 *)v56[0] != v49) {
            goto LABEL_62;
          }
          uint64_t v43 = v51;
          char v44 = *(unsigned char *)(v51 + 16);
          if (v59 == v48)
          {
            *(unsigned char *)(v51 + 16) = v44 & 0xFE;
            *(void *)uint64_t v51 = v25;
            goto LABEL_66;
          }
          goto LABEL_63;
        }
        BOOL v39 = (unsigned __int8 *)v56[0] == v49 && v59 == v48;
        if (v26 == 3)
        {
          if (!v39) {
            goto LABEL_62;
          }
          uint64_t v46 = *(void *)(v25 + 40);
          *(unsigned char *)(v51 + 16) &= ~1u;
          *(void *)uint64_t v51 = v46;
          goto LABEL_66;
        }
        if (v39) {
          goto LABEL_69;
        }
        uint64_t v11 = v25;
LABEL_58:
        size_t v12 = __n;
        unsigned int v10 = *(_DWORD *)(v11 + 128);
        if (!v10) {
          goto LABEL_61;
        }
      }
      if ((unsigned __int8 *)v56[0] == v49 && v59 == v48 && (v47 & 1) == 0)
      {
LABEL_69:
        *(unsigned char *)(v51 + 16) &= ~1u;
        *(void *)uint64_t v51 = v25;
        goto LABEL_66;
      }
      if (a6 >= 0x11) {
        goto LABEL_62;
      }
      std::error_code v29 = *(const void **)(v25 + 40);
      uint64_t v28 = v25 + 40;
      uint64_t v27 = v29;
      char v30 = *(unsigned char *)(v28 + 23);
      int v31 = v30;
      if (v30 >= 0) {
        unint64_t v32 = (const void *)v28;
      }
      else {
        unint64_t v32 = v27;
      }
      size_t v33 = v30 & 0x7F;
      if (v31 >= 0) {
        size_t v34 = v33;
      }
      else {
        size_t v34 = *(void *)(v28 + 8);
      }
      uint64_t v62 = v64;
      long long v63 = xmmword_1CFAC3020;
      if (v34 >= 0x81) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v35 = 0;
      if (v34)
      {
        memcpy(v64, v32, v34);
        uint64_t v35 = v63;
      }
      *(void *)&long long v63 = v35 + v34;
      uint64_t v36 = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a2 + 88))(a2, &v62);
      if (v36)
      {
        *(unsigned char *)(v51 + 16) |= 1u;
        *(void *)uint64_t v51 = v36;
        *(void *)(v51 + 8) = v37;
      }
      else
      {
        __int16 v55 = 261;
        v54[0] = v62;
        v54[1] = v63;
        sub_1CD0C0704(v60, a2, v52, v54, 1, a6 + 1);
        if (v61)
        {
          *(unsigned char *)(v51 + 16) |= 1u;
          uint64_t v40 = v60[1];
          *(void *)uint64_t v51 = v60[0];
          *(void *)(v51 + 8) = v40;
        }
        else if ((unsigned __int8 *)v56[0] == v49 && v59 == v48)
        {
          *(unsigned char *)(v51 + 16) &= ~1u;
          *(void *)uint64_t v51 = v60[0];
        }
        else
        {
          if (*(_DWORD *)(v60[0] + 8) == 2)
          {
            int v41 = 2;
            uint64_t v11 = v60[0];
            goto LABEL_55;
          }
          *(unsigned char *)(v51 + 16) |= 1u;
          uint64_t v42 = std::generic_category();
          *(void *)uint64_t v51 = 2;
          *(void *)(v51 + 8) = v42;
        }
      }
      int v41 = 1;
LABEL_55:
      if (v62 != v64) {
        free(v62);
      }
      if (v41 != 2) {
        goto LABEL_66;
      }
      goto LABEL_58;
    }
LABEL_61:
    llvm::sys::path::const_iterator::operator++(v56);
LABEL_62:
    uint64_t v43 = v51;
    char v44 = *(unsigned char *)(v51 + 16);
LABEL_63:
    *(unsigned char *)(v43 + 16) = v44 | 1;
    uint64_t v45 = std::generic_category();
    *(void *)uint64_t v43 = 2;
    *(void *)(v43 + 8) = v45;
  }
  else
  {
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(void *)a1 = a3;
  }
LABEL_66:
  if (v65 != (unsigned __int8 *)v67) {
    free(v65);
  }
}

BOOL llvm::vfs::InMemoryFileSystem::addSymbolicLink(uint64_t a1, uint64_t a2, uint64_t a3, time_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  sub_1CD0C0704((uint64_t)v26, (unsigned char *)a1, *(void *)(a1 + 16), a2, 0, 0);
  BOOL v14 = 0;
  if (v26[16])
  {
    uint64_t v23 = v25;
    long long v24 = xmmword_1CFAC3020;
    uint64_t v20 = v22;
    long long v21 = xmmword_1CFAC3020;
    llvm::Twine::toVector(a2, (uint64_t)&v23);
    llvm::Twine::toVector(a3, (uint64_t)&v20);
    __int16 v19 = 261;
    v18[0] = v23;
    v18[1] = v24;
    v16[1] = &v20;
    uint64_t v17 = 0;
    v16[0] = &v23;
    BOOL v14 = llvm::vfs::InMemoryFileSystem::addFile(a1, (uint64_t)v18, a4, &v17, a5, a6, 0x100000004, a7, (void (*)(size_t *__return_ptr, uint64_t, long long *))sub_1CD0CB6FC, (uint64_t)v16);
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    if (v20 != v22) {
      free(v20);
    }
    if (v23 != v25) {
      free(v23);
    }
  }
  return v14;
}

void llvm::vfs::InMemoryFileSystem::openFileForRead(llvm::vfs::InMemoryFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CD0C0704((uint64_t)v8, this, *((void *)this + 2), (uint64_t)a2, 1, 0);
  if (v9)
  {
    uint64_t v6 = v8[0];
    uint64_t v7 = v8[1];
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v7;
  }
  else
  {
    if (v8[0]) {
      BOOL v4 = *(_DWORD *)(v8[0] + 8) > 1u;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4) {
      operator new();
    }
    uint64_t v5 = std::generic_category();
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = 22;
    *(void *)(a3 + 8) = v5;
  }
}

void llvm::vfs::InMemoryFileSystem::dir_begin(llvm::vfs::InMemoryFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, void *a4@<X8>)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  sub_1CD0C0704((uint64_t)v27, this, *((void *)this + 2), (uint64_t)a2, 1, 0);
  if (v28)
  {
    uint64_t v10 = (const std::error_category *)v27[1];
    *(void *)&a3->__val_ = v27[0];
    a3->__cat_ = v10;
    goto LABEL_8;
  }
  uint64_t v7 = v27[0];
  if (v27[0]) {
    BOOL v8 = *(_DWORD *)(v27[0] + 8) == 2;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    char v9 = std::generic_category();
    *(void *)&a3->__val_ = 20;
    a3->__cat_ = v9;
LABEL_8:
    uint64_t v11 = operator new(0x68uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *uint64_t v11 = &unk_1F2645EA8;
    *((_OWORD *)v11 + 2) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *((_DWORD *)v11 + 14) = 9;
    v11[3] = &unk_1F2645EE0;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    v11[12] = 0;
    *a4 = v11 + 3;
    a4[1] = v11;
    sub_1CC22C6DC(a4);
    return;
  }
  llvm::Twine::str(a2, &__p);
  size_t v12 = operator new(0x68uLL);
  uint64_t v13 = v12;
  v12[1] = 0;
  uint64_t v12[2] = 0;
  *size_t v12 = &unk_1F2645EA8;
  BOOL v14 = (char *)(v12 + 3);
  size_t v15 = __p;
  v29[0] = v26;
  *(void *)((char *)v29 + 7) = *(void *)((char *)&v26 + 7);
  char v16 = HIBYTE(v26);
  long long v26 = 0uLL;
  std::string __p = 0;
  v12[5] = 0;
  v12[6] = 0;
  *((_DWORD *)v12 + 14) = 9;
  v12[3] = &unk_1F2645EE0;
  v12[4] = 0;
  uint64_t v17 = *(void *)(v7 + 120);
  uint64_t v18 = *(unsigned int *)(v7 + 128);
  if (v18)
  {
    for (uint64_t i = *(void **)(v7 + 120); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = *(void **)(v7 + 120);
  }
  v12[8] = i;
  v12[9] = v17 + 8 * v18;
  uint64_t v21 = v29[0];
  v12[10] = v15;
  v12[11] = v21;
  *(void *)((char *)v12 + 95) = *(void *)((char *)v29 + 7);
  *((unsigned char *)v12 + 103) = v16;
  sub_1CD0CBEBC((uint64_t)(v12 + 3));
  *a4 = v14;
  a4[1] = v13;
  char v22 = *((unsigned char *)v13 + 55);
  int v23 = v22;
  uint64_t v24 = v22 & 0x7F;
  if (v23 < 0) {
    uint64_t v24 = v13[5];
  }
  if (!v24) {
    sub_1CC22C6DC(a4);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
}

void llvm::vfs::RedirectingFileSystem::dir_begin(llvm::vfs::RedirectingFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, std::__shared_weak_count **a4@<X8>)
{
  v91[2] = *MEMORY[0x1E4F143B8];
  *(void *)__src = v90;
  *(_OWORD *)&__src[8] = xmmword_1CD96DBF0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)__src);
  uint64_t Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)__src);
  *(void *)&a3->__val_ = Canonical;
  a3->__cat_ = v9;
  if (Canonical)
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_3;
  }
  llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, *(unint64_t *)__src, *(unint64_t *)&__src[8], (unsigned int *)&v84);
  char v10 = v88;
  if ((v88 & 1) == 0)
  {
    __int16 v78 = 261;
    __dst[0] = *(_OWORD *)__src;
    llvm::vfs::RedirectingFileSystem::status((uint64_t)this, (llvm::Twine *)__dst, a2, &v84, (uint64_t)&__p);
    char v11 = v83;
    if (v83)
    {
      if (*((_DWORD *)this + 25) != 2)
      {
        uint64_t v22 = __p;
        int v23 = (const std::error_category *)*((void *)&__p + 1);
        if (!v84 || *(_DWORD *)(v84 + 8) == 1)
        {
          if (std::generic_category() == v23 && v22 == 2)
          {
            (*(void (**)(void, const llvm::Twine *, std::error_code *))(**((void **)this + 8) + 32))(*((void *)this + 8), a2, a3);
LABEL_39:
            if ((v83 & 1) == 0 && v80 < 0) {
              operator delete((void *)__p);
            }
            goto LABEL_42;
          }
          char v11 = v83;
        }
      }
      if (v11)
      {
        uint64_t v24 = (const std::error_category *)*((void *)&__p + 1);
        uint64_t v25 = __p;
      }
      else
      {
        uint64_t v24 = std::system_category();
        uint64_t v25 = 0;
      }
    }
    else
    {
      if (v82 == 3)
      {
        long long v75 = 0uLL;
        v74.__val_ = 0;
        v74.__cat_ = std::system_category();
        sub_1CD0C2138((uint64_t)&v72, &v84);
        uint64_t v12 = v84;
        if (!v73)
        {
          long long v71 = *(_OWORD *)(v84 + 40);
          std::string v53 = (std::__shared_weak_count *)operator new(0x68uLL);
          v53->__shared_owners_ = 0;
          v53->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645F68;
          uint64_t v54 = v53 + 1;
          __int16 v78 = 261;
          __dst[0] = *(_OWORD *)__src;
          v53[1].__shared_weak_owners_ = 0;
          v53[2].__vftable = 0;
          v53[1].__shared_owners_ = 0;
          LODWORD(v53[2].__shared_owners_) = 9;
          v53->__shared_weak_owners_ = 0;
          v53[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645FA0;
          llvm::Twine::str((llvm::Twine *)__dst, &v53[2].__shared_weak_owners_);
          *(_OWORD *)&v53[3].__shared_weak_owners_ = v71;
          *(void *)&v74.__val_ = sub_1CD858574((uint64_t)&v53[1], 1);
          v74.__cat_ = v55;
          char v56 = HIBYTE(v53[2].__vftable);
          int v57 = v56;
          uint64_t shared_weak_owners = v56 & 0x7F;
          if (v57 < 0) {
            uint64_t shared_weak_owners = v53[1].__shared_weak_owners_;
          }
          if (!shared_weak_owners)
          {
            if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
            uint64_t v54 = 0;
            std::string v53 = 0;
          }
          uint64_t v59 = (std::__shared_weak_count *)*((void *)&v75 + 1);
          *(void *)&long long v75 = v54;
          *((void *)&v75 + 1) = v53;
          if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
LABEL_83:
          if (v74.__val_)
          {
            if (v74.__cat_ != std::generic_category() || v74.__val_ != 2)
            {
              *a3 = v74;
              *a4 = 0;
              a4[1] = 0;
LABEL_99:
              uint64_t v52 = (std::__shared_weak_count *)*((void *)&v75 + 1);
              if (*((void *)&v75 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
              goto LABEL_39;
            }
            uint64_t v49 = (std::__shared_weak_count *)*((void *)&v75 + 1);
            long long v75 = 0uLL;
            if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (*((_DWORD *)this + 25) == 2)
          {
            *a3 = v74;
            *(_OWORD *)a4 = v75;
            goto LABEL_39;
          }
          v72.__val_ = 0;
          v72.__cat_ = std::system_category();
          uint64_t v50 = *((void *)this + 8);
          __int16 v78 = 261;
          __dst[0] = *(_OWORD *)__src;
          (*(void (**)(long long *__return_ptr))(*(void *)v50 + 32))(&v76);
          if (v72.__val_)
          {
            if (v72.__cat_ != std::generic_category() || v72.__val_ != 2)
            {
              *a3 = v72;
              *a4 = 0;
              a4[1] = 0;
LABEL_95:
              uint64_t v51 = (std::__shared_weak_count *)*((void *)&v76 + 1);
              if (*((void *)&v76 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
              goto LABEL_99;
            }
            uint64_t v60 = (std::__shared_weak_count *)*((void *)&v76 + 1);
            long long v76 = 0uLL;
            if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          *(void *)&__dst[0] = &__dst[1];
          *((void *)&__dst[0] + 1) = 0x200000000;
          if (*((_DWORD *)this + 25)) {
            char v61 = &v75;
          }
          else {
            char v61 = &v76;
          }
          if (*((_DWORD *)this + 25)) {
            uint64_t v62 = &v76;
          }
          else {
            uint64_t v62 = &v75;
          }
          sub_1CD854AD0((uint64_t)__dst, v61);
          sub_1CD854AD0((uint64_t)__dst, v62);
          long long v63 = (std::__shared_weak_count *)operator new(0x100uLL);
          v63->__shared_owners_ = 0;
          v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645D78;
          size_t v64 = v63 + 1;
          uint64_t v65 = *(char **)&__dst[0];
          uint64_t v66 = DWORD2(__dst[0]);
          v63[1].__shared_weak_owners_ = 0;
          v63[2].__vftable = 0;
          v63[1].__shared_owners_ = 0;
          LODWORD(v63[2].__shared_owners_) = 9;
          v63->__shared_weak_owners_ = 0;
          v63[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645DB0;
          v63[2].__shared_weak_owners_ = (uint64_t)&v63[3].__shared_owners_;
          v63[3].__vftable = (std::__shared_weak_count_vtbl *)0x800000000;
          sub_1CD858850((uint64_t)&v63[2].__shared_weak_owners_, v65, &v65[16 * v66]);
          *(_OWORD *)&v63[8].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v63[9].__shared_owners_ = 0u;
          v63[10].__vftable = (std::__shared_weak_count_vtbl *)0x800000000;
          *(void *)&a3->__val_ = sub_1CD0CA5D4((uint64_t)&v63[1], 1);
          a3->__cat_ = v67;
          char v68 = HIBYTE(v63[2].__vftable);
          int v69 = v68;
          uint64_t v70 = v68 & 0x7F;
          if (v69 < 0) {
            uint64_t v70 = v63[1].__shared_weak_owners_;
          }
          if (!v70)
          {
            if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
            long long v63 = 0;
            size_t v64 = 0;
          }
          if (a3->__val_)
          {
            *a4 = 0;
            a4[1] = 0;
            if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          else
          {
            *a4 = v64;
            a4[1] = v63;
          }
          sub_1CD8580F8((char **)__dst);
          goto LABEL_95;
        }
        uint64_t v13 = *((void *)this + 8);
        __int16 v78 = 261;
        __dst[0] = v72;
        (*(void (**)(long long *__return_ptr))(*(void *)v13 + 32))(&v76);
        long long v75 = v76;
        int v14 = *(_DWORD *)(v12 + 64);
        if (v14) {
          BOOL v15 = v14 == 1;
        }
        else {
          BOOL v15 = *((unsigned char *)this + 98) != 0;
        }
        if (v15) {
          goto LABEL_83;
        }
        size_t v16 = *(void *)&__src[8];
        if (*(void *)&__src[8] >= 0x7FFFFFFFFFFFFFF8uLL) {
          abort();
        }
        uint64_t v17 = *(const void **)__src;
        if (*(void *)&__src[8] >= 0x17uLL)
        {
          uint64_t v28 = (*(void *)&__src[8] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((*(void *)&__src[8] | 7) != 0x17) {
            uint64_t v28 = *(void *)&__src[8] | 7;
          }
          uint64_t v29 = v28 + 1;
          uint64_t v18 = operator new(v28 + 1);
          *((void *)&__dst[0] + 1) = v16;
          *(void *)&__dst[1] = v29 | 0x8000000000000000;
          *(void *)&__dst[0] = v18;
        }
        else
        {
          BYTE7(__dst[1]) = __src[8];
          uint64_t v18 = __dst;
          if (!*(void *)&__src[8]) {
            goto LABEL_50;
          }
        }
        memmove(v18, v17, v16);
LABEL_50:
        *((unsigned char *)v18 + v16) = 0;
        char v30 = (char *)operator new(0x70uLL);
        int v31 = (std::__shared_weak_count *)v30;
        *((void *)v30 + 1) = 0;
        unint64_t v32 = (atomic_ullong *)(v30 + 8);
        *((void *)v30 + 2) = 0;
        *(void *)char v30 = &unk_1F2645F08;
        uint64_t v33 = (uint64_t)(v30 + 24);
        v91[0] = *((void *)&__dst[0] + 1);
        size_t v34 = *(char **)&__dst[0];
        *(void *)((char *)v91 + 7) = *(void *)((char *)__dst + 15);
        char v35 = BYTE7(__dst[1]);
        int v36 = SBYTE7(__dst[1]);
        memset(__dst, 0, 24);
        long long v37 = v75;
        if (*((void *)&v75 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)v30 + 8) = v34;
        *((void *)v30 + 4) = 0;
        *((void *)v30 + 5) = 0;
        *((void *)v30 + 6) = 0;
        *((_DWORD *)v30 + 14) = 9;
        *((void *)v30 + 3) = &unk_1F2645F40;
        *((void *)v30 + 9) = v91[0];
        *(void *)(v30 + 79) = *(void *)((char *)v91 + 7);
        v30[87] = v36;
        v91[0] = 0;
        *(void *)((char *)v91 + 7) = 0;
        if (v36 >= 0) {
          uint64_t v38 = v30 + 64;
        }
        else {
          uint64_t v38 = v34;
        }
        uint64_t v39 = *((void *)v30 + 9);
        uint64_t v40 = v35 & 0x7F;
        if (v36 >= 0) {
          uint64_t v39 = v40;
        }
        *(void *)&long long v76 = v38;
        *((void *)&v76 + 1) = v39;
        uint64_t first_of = llvm::StringRef::find_first_of(&v76, "/\\"", 2, 0);
        if (first_of == -1)
        {
          int v42 = 0;
        }
        else if (v38[first_of] == 47)
        {
          int v42 = 1;
        }
        else
        {
          int v42 = 3;
        }
        v31[4].__vftable = (std::__shared_weak_count_vtbl *)v37;
        LODWORD(v31[3].__shared_weak_owners_) = v42;
        v31[4].__shared_owners_ = *((void *)&v37 + 1);
        if (*((void *)&v37 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v76 = 0uLL;
        BOOL v43 = sub_1CD065CEC((uint64_t *)&v31[4], (uint64_t *)&v76);
        char v44 = (std::__shared_weak_count *)*((void *)&v76 + 1);
        if (*((void *)&v76 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        if (!v43) {
          sub_1CD0CC1DC(v33);
        }
        if (*((void *)&v37 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v37 + 1) + 16))(*((void *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
        char v45 = HIBYTE(v31[2].__vftable);
        int v46 = v45;
        uint64_t v47 = v45 & 0x7F;
        if (v46 < 0) {
          uint64_t v47 = v31[1].__shared_weak_owners_;
        }
        if (!v47)
        {
          if (!atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          uint64_t v33 = 0;
          int v31 = 0;
        }
        uint64_t v48 = (std::__shared_weak_count *)*((void *)&v75 + 1);
        *(void *)&long long v75 = v33;
        *((void *)&v75 + 1) = v31;
        if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        goto LABEL_83;
      }
      uint64_t v24 = std::generic_category();
      uint64_t v25 = 20;
    }
    *(void *)&a3->__val_ = v25;
    a3->__cat_ = v24;
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_39;
  }
  if (*((_DWORD *)this + 25) != 2)
  {
    uint64_t v19 = v84;
    uint64_t v20 = (const std::error_category *)v85;
    if (std::generic_category() == v20 && v19 == 2)
    {
      uint64_t v21 = *((void *)this + 8);
      __int16 v81 = 261;
      long long __p = *(_OWORD *)__src;
      (*(void (**)(uint64_t, long long *, std::error_code *))(*(void *)v21 + 32))(v21, &__p, a3);
      goto LABEL_42;
    }
    char v10 = v88;
  }
  if (v10)
  {
    uint64_t v27 = v84;
    long long v26 = (const std::error_category *)v85;
  }
  else
  {
    long long v26 = std::system_category();
    uint64_t v27 = 0;
  }
  *(void *)&a3->__val_ = v27;
  a3->__cat_ = v26;
  *a4 = 0;
  a4[1] = 0;
LABEL_42:
  if ((v88 & 1) == 0 && v87 && v86 < 0) {
    operator delete(v85);
  }
LABEL_3:
  if (*(unsigned char **)__src != v90) {
    free(*(void **)__src);
  }
}

void llvm::vfs::RedirectingFileSystem::status(uint64_t a1@<X0>, llvm::Twine *a2@<X1>, llvm::Twine *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  sub_1CD0C2138((uint64_t)&__src, a4);
  if (!v57)
  {
    uint64_t v10 = *a4;
    if (*(char *)(*a4 + 87) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, *(const void **)(v10 + 64), *(void *)(v10 + 72));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v10 + 64);
      unint64_t v66 = *(void *)(v10 + 80);
    }
    long long v11 = *(_OWORD *)(v10 + 104);
    long long v67 = *(_OWORD *)(v10 + 88);
    long long v68 = v11;
    long long v69 = *(_OWORD *)(v10 + 120);
    __int16 v70 = *(_WORD *)(v10 + 136);
    long long v39 = v67;
    uint64_t v12 = v11;
    unint64_t v13 = v69;
    uint64_t v14 = *((void *)&v11 + 1);
    unint64_t v15 = *((void *)&v69 + 1);
    llvm::Twine::str(a2, v72);
    long long v73 = v39;
    *((void *)&v74 + 1) = v14;
    unsigned long long v75 = __PAIR128__(v15, v13);
    __int16 v76 = 0;
    *(unsigned char *)(a5 + 80) &= ~1u;
    *(_OWORD *)a5 = *(_OWORD *)v72;
    *(void **)(a5 + 16) = v72[2];
    memset(v72, 0, sizeof(v72));
    *(void *)&long long v74 = v12;
    long long v16 = v73;
    long long v17 = v74;
    unsigned long long v18 = v75;
    *(_WORD *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 56) = v18;
    *(_OWORD *)(a5 + 40) = v17;
    *(_OWORD *)(a5 + 24) = v16;
    if (SHIBYTE(v66) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v19 = __src;
  if (__src)
  {
    uint64_t v22 = (void *)__len;
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__len >= 0x17)
    {
      size_t v24 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v24 = __len | 7;
      }
      size_t v25 = v24 + 1;
      int v23 = operator new(v24 + 1);
      __p[1] = v22;
      unint64_t v66 = v25 | 0x8000000000000000;
      __p[0] = v23;
    }
    else
    {
      HIBYTE(v66) = __len;
      int v23 = __p;
      if (!__len) {
        goto LABEL_18;
      }
    }
    memmove(v23, v19, (size_t)v22);
LABEL_18:
    *((unsigned char *)v22 + (void)v23) = 0;
    char v21 = HIBYTE(v66);
    uint64_t v19 = __p[0];
    uint64_t v20 = __p[1];
    goto LABEL_19;
  }
  uint64_t v20 = 0;
  char v21 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v66 = 0;
LABEL_19:
  if (v21 >= 0) {
    long long v26 = __p;
  }
  else {
    long long v26 = (void **)v19;
  }
  if (v21 >= 0) {
    size_t v27 = v21 & 0x7F;
  }
  else {
    size_t v27 = (size_t)v20;
  }
  v72[0] = &v73;
  *(_OWORD *)&v72[1] = xmmword_1CD96DBF0;
  if (v27 >= 0x101) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v28 = 0;
  if (v27)
  {
    memcpy(&v73, v26, v27);
    uint64_t v28 = (char *)v72[1];
  }
  v72[1] = &v28[v27];
  if (v21 < 0) {
    operator delete(v19);
  }
  uint64_t Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical(a1, (uint64_t)v72);
  if (Canonical)
  {
    *(unsigned char *)(a5 + 80) |= 1u;
    *(void *)a5 = Canonical;
    *(void *)(a5 + 8) = v30;
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 64);
    WORD4(v60) = 261;
    v58[0] = v72[0];
    v58[1] = v72[1];
    (*(void (**)(void **__return_ptr))(*(void *)v31 + 16))(__p);
    if (v71)
    {
      sub_1CD502374((std::error_category *)a5, (long long *)__p);
    }
    else
    {
      __int16 v48 = 261;
      v47[0] = __src;
      v47[1] = __len;
      long long v40 = v67;
      uint64_t v32 = v68;
      uint64_t v33 = v69;
      uint64_t v34 = *((void *)&v68 + 1);
      uint64_t v35 = *((void *)&v69 + 1);
      llvm::Twine::str((llvm::Twine *)v47, v49);
      long long v51 = v40;
      *((void *)&v52 + 1) = v34;
      *(void *)&long long v53 = v33;
      *((void *)&v53 + 1) = v35;
      __int16 v54 = 0;
      v64 &= ~1u;
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v49;
      uint64_t v59 = v50;
      v49[0] = 0;
      v49[1] = 0;
      *(void *)&long long v52 = v32;
      uint64_t v50 = 0;
      __int16 v63 = 0;
      long long v61 = v52;
      long long v62 = v53;
      long long v60 = v40;
      sub_1CD8588EC((std::error_category *)__p, (long long *)v58);
      if ((v64 & 1) == 0 && SHIBYTE(v59) < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(v49[0]);
      }
      int v36 = *(_DWORD *)(*a4 + 64);
      if (v36) {
        char v37 = v36 == 1;
      }
      else {
        char v37 = *(unsigned char *)(a1 + 98) != 0;
      }
      if (SHIBYTE(v66) < 0)
      {
        sub_1CB8BDF7C((uint64_t)v41, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)int v41 = *(_OWORD *)__p;
        unint64_t v42 = v66;
      }
      long long v43 = v67;
      long long v44 = v68;
      long long v45 = v69;
      __int16 v46 = v70;
      sub_1CD0C3568((uint64_t)v58, a3, v37, (uint64_t)v41);
      *(_OWORD *)a5 = *(_OWORD *)v58;
      long long v38 = v61;
      *(_OWORD *)(a5 + 24) = v60;
      *(unsigned char *)(a5 + 80) &= ~1u;
      *(void *)(a5 + 16) = v59;
      v58[0] = 0;
      v58[1] = 0;
      uint64_t v59 = 0;
      *(_OWORD *)(a5 + 40) = v38;
      *(_OWORD *)(a5 + 56) = v62;
      *(_WORD *)(a5 + 72) = v63;
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
    }
    if ((v71 & 1) == 0 && SHIBYTE(v66) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v72[0] != &v73) {
    free(v72[0]);
  }
}

uint64_t sub_1CD0C2138(uint64_t result, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = *(_DWORD *)(*a2 + 8);
  if (v3 == 2)
  {
    uint64_t v12 = *(void *)(v2 + 40);
    uint64_t v10 = v2 + 40;
    uint64_t v11 = v12;
    char v13 = *(unsigned char *)(v10 + 23);
    int v14 = v13;
    if (v13 >= 0) {
      uint64_t v11 = v10;
    }
    uint64_t v15 = *(void *)(v10 + 8);
    uint64_t v16 = v13 & 0x7F;
    if (v14 >= 0) {
      uint64_t v15 = v16;
    }
    *(void *)double result = v11;
    *(void *)(result + 8) = v15;
  }
  else
  {
    if (v3 != 1)
    {
      char v17 = 0;
      *(unsigned char *)double result = 0;
      goto LABEL_15;
    }
    uint64_t v6 = (void *)a2[1];
    BOOL v4 = a2 + 1;
    uint64_t v5 = v6;
    char v7 = *((unsigned char *)v4 + 23);
    int v8 = v7;
    if (v7 >= 0) {
      uint64_t v5 = v4;
    }
    uint64_t v9 = v7 & 0x7F;
    if (v8 < 0) {
      uint64_t v9 = v4[1];
    }
    *(void *)double result = v5;
    *(void *)(result + 8) = v9;
  }
  char v17 = 1;
LABEL_15:
  *(unsigned char *)(result + 16) = v17;
  return result;
}

char *llvm::vfs::RedirectingFileSystem::getExternalContentsPrefixDir(llvm::vfs::RedirectingFileSystem *this)
{
  uint64_t v3 = *((void *)this + 9);
  char v1 = (char *)this + 72;
  uint64_t v2 = v3;
  if (v1[23] >= 0) {
    return v1;
  }
  return (char *)v2;
}

uint64_t llvm::vfs::RedirectingFileSystem::setFallthrough(uint64_t this, int a2)
{
  if (a2) {
    int v2 = 0;
  }
  else {
    int v2 = 2;
  }
  *(_DWORD *)(this + 100) = v2;
  return this;
}

uint64_t llvm::vfs::RedirectingFileSystem::setRedirection(uint64_t result, int a2)
{
  *(_DWORD *)(result + 100) = a2;
  return result;
}

void llvm::vfs::RedirectingFileSystem::getRoots(llvm::vfs::RedirectingFileSystem *this@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      char v6 = *(unsigned char *)(*(void *)v2 + 39);
      if (v6 >= 0) {
        uint64_t v7 = *(void *)v2 + 16;
      }
      else {
        uint64_t v7 = *(void *)(*(void *)v2 + 16);
      }
      if (v6 >= 0) {
        uint64_t v8 = v6 & 0x7F;
      }
      else {
        uint64_t v8 = *(void *)(*(void *)v2 + 24);
      }
      unint64_t v9 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v9)
      {
        uint64_t v11 = *a2;
        uint64_t v12 = ((char *)v5 - (char *)*a2) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          abort();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 >> 60) {
            sub_1CB833614();
          }
          uint64_t v16 = (char *)operator new(16 * v15);
        }
        else
        {
          uint64_t v16 = 0;
        }
        char v17 = (uint64_t *)&v16[16 * v12];
        uint64_t *v17 = v7;
        v17[1] = v8;
        unsigned long long v18 = v17;
        if (v5 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v5 - 1);
            v18 -= 2;
            v5 -= 2;
          }
          while (v5 != v11);
          uint64_t v5 = *a2;
        }
        uint64_t v10 = v17 + 2;
        *a2 = v18;
        a2[1] = v17 + 2;
        a2[2] = (uint64_t *)&v16[16 * v15];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        uint64_t *v5 = v7;
        v5[1] = v8;
        uint64_t v10 = v5 + 2;
      }
      a2[1] = v10;
      v2 += 8;
      uint64_t v5 = v10;
    }
    while (v2 != v3);
  }
}

uint64_t sub_1CD0C234C(llvm ****a1, uint64_t a2, uint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 32) != 4)
  {
    v86[0] = "expected mapping node";
    LOWORD(v89) = 259;
    llvm::yaml::Stream::printError(*a1, a2, (llvm::Twine *)v86, 0);
    return 0;
  }
  v86[0] = "version";
  v86[1] = 7;
  __int16 v87 = 1;
  char v88 = "case-sensitive";
  uint64_t v89 = 14;
  __int16 v90 = 0;
  int v91 = "use-external-names";
  uint64_t v92 = 18;
  __int16 v93 = 0;
  int v94 = "overlay-relative";
  uint64_t v95 = 16;
  __int16 v96 = 0;
  BOOL v97 = "fallthrough";
  uint64_t v98 = 11;
  __int16 v99 = 0;
  int v100 = "redirecting-with";
  uint64_t v101 = 16;
  __int16 v102 = 0;
  long long v103 = "roots";
  uint64_t v104 = 5;
  __int16 v105 = 1;
  int v78 = 16;
  char v6 = (char *)operator new(0x180uLL, (std::align_val_t)8uLL);
  uint64_t v7 = 0;
  v77[0] = v6;
  v77[1] = 0;
  do
  {
    *(_OWORD *)&v6[v7] = xmmword_1CFAC4A20;
    v7 += 24;
  }
  while (v7 != 384);
  for (uint64_t i = 0; i != 21; i += 3)
    sub_1CD857464((uint64_t)v80, (uint64_t)v77, (const void **)&v86[i], &v86[i + 2]);
  int64x2_t v75 = 0uLL;
  __int16 v76 = 0;
  *(unsigned char *)(a2 + 76) = 0;
  llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)a2);
  unint64_t v9 = *(llvm::yaml::KeyValueNode **)(a2 + 80);
  if (v9)
  {
    uint64_t v10 = &v76;
    uint64_t v11 = (unsigned char *)(a3 + 98);
    uint64_t v12 = (unsigned char *)(a3 + 97);
    long long v68 = (unsigned char *)(a3 + 96);
    while (1)
    {
      char v83 = v85;
      long long v84 = xmmword_1CFAC67E0;
      long long v73 = 0;
      long long v74 = 0;
      uint64_t Key = llvm::yaml::KeyValueNode::getKey(v9);
      if (sub_1CD0C7FB0(a1, Key, &v73, (uint64_t *)&v83))
      {
        unint64_t v66 = v10;
        long long v67 = v12;
        uint64_t v15 = llvm::yaml::KeyValueNode::getKey(v9);
        uint64_t v16 = v73;
        char v17 = v74;
        if (sub_1CD856F1C(a1, v15, v73, v74, (uint64_t)v77))
        {
          switch((unint64_t)v17)
          {
            case 5uLL:
              if (*(_DWORD *)v16 != 1953460082 || v16[4] != 115) {
                goto LABEL_98;
              }
              uint64_t Value = llvm::yaml::KeyValueNode::getValue(v9);
              if (!Value || (uint64_t v20 = (uint64_t *)Value, *(_DWORD *)(Value + 32) != 5))
              {
                uint64_t v53 = llvm::yaml::KeyValueNode::getValue(v9);
                __int16 v55 = "expected array";
                goto LABEL_111;
              }
              uint64_t v65 = (char *)a3;
              *(unsigned char *)(Value + 76) = 0;
              llvm::yaml::SequenceNode::increment((llvm::yaml::SequenceNode *)Value);
              uint64_t v21 = v20[10];
              uint64_t v10 = v66;
              uint64_t v12 = v67;
              if (!v21) {
                goto LABEL_101;
              }
              char v64 = (llvm::yaml::SequenceNode *)v20;
              do
              {
                uint64_t v22 = v11;
                sub_1CD0C8028(&v69, a1, v21, v65, 1);
                int v23 = v69;
                if (!v69)
                {
                  int v14 = 0;
                  uint64_t v11 = v22;
                  goto LABEL_102;
                }
                size_t v24 = (void *)v75.i64[1];
                size_t v25 = v76;
                if (v75.i64[1] >= (unint64_t)v76)
                {
                  size_t v27 = (void *)v75.i64[0];
                  uint64_t v28 = (v75.i64[1] - v75.i64[0]) >> 3;
                  unint64_t v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 61) {
                    abort();
                  }
                  if ((uint64_t)&v76[-v75.i64[0]] >> 2 > v29) {
                    unint64_t v29 = (uint64_t)&v76[-v75.i64[0]] >> 2;
                  }
                  if ((unint64_t)&v76[-v75.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v29;
                  }
                  int v82 = v66;
                  if (v30)
                  {
                    if (v30 >> 61) {
                      sub_1CB833614();
                    }
                    uint64_t v31 = (char *)operator new(8 * v30);
                  }
                  else
                  {
                    uint64_t v31 = 0;
                  }
                  uint64_t v32 = &v31[8 * v28];
                  long long v69 = 0;
                  *(void *)uint64_t v32 = v23;
                  uint64_t v33 = v32 + 8;
                  uint64_t v34 = &v31[8 * v30];
                  *(void *)&v80[16] = v32 + 8;
                  __int16 v81 = v34;
                  if (v24 == v27)
                  {
                    char v37 = 0;
                    int64x2_t v36 = vdupq_n_s64((unint64_t)v24);
                    uint64_t v10 = v66;
                    uint64_t v11 = v22;
                  }
                  else
                  {
                    uint64_t v10 = v66;
                    uint64_t v11 = v22;
                    do
                    {
                      uint64_t v35 = *--v24;
                      *size_t v24 = 0;
                      *((void *)v32 - 1) = v35;
                      v32 -= 8;
                    }
                    while (v24 != v27);
                    int64x2_t v36 = v75;
                    uint64_t v33 = *(void **)&v80[16];
                    uint64_t v34 = v81;
                    size_t v25 = v76;
                    char v37 = v69;
                  }
                  v75.i64[0] = (uint64_t)v32;
                  v75.i64[1] = (uint64_t)v33;
                  *(int64x2_t *)&v80[8] = v36;
                  __int16 v76 = v34;
                  __int16 v81 = v25;
                  *(void *)char v80 = v36.i64[0];
                  sub_1CD0C9AE0((uint64_t)v80);
                  v75.i64[1] = (uint64_t)v33;
                  uint64_t v12 = v67;
                  long long v26 = v64;
                  if (v37) {
                    (*(void (**)(void *))(*(void *)v37 + 8))(v37);
                  }
                }
                else
                {
                  *(void *)v75.i64[1] = v69;
                  v75.i64[1] = (uint64_t)(v24 + 1);
                  uint64_t v11 = v22;
                  uint64_t v12 = v67;
                  long long v26 = v64;
                }
                llvm::yaml::SequenceNode::increment(v26);
                uint64_t v21 = *((void *)v26 + 10);
              }
              while (v21);
              goto LABEL_101;
            case 7uLL:
              if (*(_DWORD *)v16 != 1936876918 || *(_DWORD *)(v16 + 3) != 1852795251) {
                goto LABEL_98;
              }
              long long v72 = 0uLL;
              long long v69 = &v71;
              long long v70 = xmmword_1CDB159A0;
              uint64_t v39 = llvm::yaml::KeyValueNode::getValue(v9);
              uint64_t v12 = v67;
              if (!sub_1CD0C7FB0(a1, v39, (const char **)&v72, (uint64_t *)&v69))
              {
                char v41 = 0;
                uint64_t v10 = v66;
                goto LABEL_61;
              }
              unint64_t v79 = 0;
              *(_OWORD *)char v80 = v72;
              if ((llvm::consumeSignedInteger((llvm *)v80, (llvm::StringRef *)0xA, &v79, v40) & 1) != 0
                || *(void *)&v80[8])
              {
                uint64_t v10 = v66;
LABEL_105:
                uint64_t v56 = llvm::yaml::KeyValueNode::getValue(v9);
                char v57 = "expected integer";
                goto LABEL_108;
              }
              uint64_t v10 = v66;
              if (v79 != (int)v79) {
                goto LABEL_105;
              }
              if ((v79 & 0x80000000) != 0)
              {
                uint64_t v56 = llvm::yaml::KeyValueNode::getValue(v9);
                char v57 = "invalid version number";
              }
              else
              {
                if (!v79)
                {
                  char v41 = 1;
                  goto LABEL_61;
                }
                uint64_t v56 = llvm::yaml::KeyValueNode::getValue(v9);
                char v57 = "version mismatch, expected 0";
              }
LABEL_108:
              *(void *)char v80 = v57;
              LOWORD(v82) = 259;
              llvm::yaml::Stream::printError(*a1, v56, (llvm::Twine *)v80, 0);
              char v41 = 0;
LABEL_61:
              uint64_t v65 = (char *)a3;
              if (v69 != &v71) {
                free(v69);
              }
              if (v41) {
LABEL_101:
              }
                int v14 = 1;
              else {
LABEL_64:
              }
                int v14 = 0;
LABEL_102:
              a3 = (uint64_t)v65;
              break;
            case 0xBuLL:
              if (*(void *)v16 != 0x6F7268746C6C6166 || *(void *)(v16 + 3) != 0x6867756F7268746CLL) {
                goto LABEL_98;
              }
              *(void *)char v80 = "redirecting-with";
              *(void *)&v80[8] = 16;
              if (*((unsigned char *)sub_1CD857864((uint64_t)v77, (const void **)v80) + 17))
              {
                uint64_t v53 = llvm::yaml::KeyValueNode::getValue(v9);
LABEL_110:
                __int16 v55 = "'fallthrough' and 'redirecting-with' are mutually exclusive";
LABEL_111:
                *(void *)char v80 = v55;
                LOWORD(v82) = 259;
                llvm::yaml::Stream::printError(*a1, v53, (llvm::Twine *)v80, 0);
                goto LABEL_112;
              }
              v80[0] = 0;
              uint64_t v43 = llvm::yaml::KeyValueNode::getValue(v9);
              uint64_t v10 = v66;
              uint64_t v12 = v67;
              if (!sub_1CD857024(a1, v43, v80)) {
                goto LABEL_9;
              }
              uint64_t v65 = (char *)a3;
              *(_DWORD *)(a3 + 100) = 2 * (v80[0] == 0);
              goto LABEL_101;
            case 0xEuLL:
              if (*(void *)v16 != 0x6E65732D65736163 || *(void *)(v16 + 6) != 0x6576697469736E65) {
                goto LABEL_98;
              }
              uint64_t v65 = (char *)a3;
              uint64_t v45 = llvm::yaml::KeyValueNode::getValue(v9);
              __int16 v46 = a1;
              uint64_t v47 = v68;
              goto LABEL_96;
            case 0x10uLL:
              if (*(void *)v16 != 0x2D79616C7265766FLL || *((void *)v16 + 1) != 0x65766974616C6572) {
                goto LABEL_98;
              }
              uint64_t v65 = (char *)a3;
              uint64_t v49 = llvm::yaml::KeyValueNode::getValue(v9);
              uint64_t v12 = v67;
              uint64_t v10 = v66;
              if (sub_1CD857024(a1, v49, v67)) {
                goto LABEL_101;
              }
              goto LABEL_64;
            case 0x12uLL:
              if (*(void *)v16 != 0x657478652D657375
                || *((void *)v16 + 1) != 0x6D616E2D6C616E72
                || *((_WORD *)v16 + 8) != 29541)
              {
                goto LABEL_98;
              }
              uint64_t v65 = (char *)a3;
              uint64_t v45 = llvm::yaml::KeyValueNode::getValue(v9);
              __int16 v46 = a1;
              uint64_t v47 = v11;
LABEL_96:
              uint64_t v10 = v66;
              uint64_t v12 = v67;
              if (sub_1CD857024(v46, v45, v47)) {
                goto LABEL_101;
              }
              goto LABEL_64;
            default:
LABEL_98:
              *(void *)char v80 = "fallthrough";
              *(void *)&v80[8] = 11;
              int v52 = *((unsigned __int8 *)sub_1CD857864((uint64_t)v77, (const void **)v80) + 17);
              uint64_t v53 = llvm::yaml::KeyValueNode::getValue(v9);
              if (v52) {
                goto LABEL_110;
              }
              unint64_t v54 = sub_1CD8571EC(a1, v53);
              uint64_t v10 = v66;
              uint64_t v12 = v67;
              if (HIDWORD(v54))
              {
                uint64_t v65 = (char *)a3;
                *(_DWORD *)(a3 + 100) = v54;
                goto LABEL_101;
              }
              uint64_t v58 = llvm::yaml::KeyValueNode::getValue(v9);
              *(void *)char v80 = "expected valid redirect kind";
              LOWORD(v82) = 259;
              llvm::yaml::Stream::printError(*a1, v58, (llvm::Twine *)v80, 0);
              goto LABEL_9;
          }
        }
        else
        {
LABEL_112:
          int v14 = 0;
          uint64_t v10 = v66;
          uint64_t v12 = v67;
        }
      }
      else
      {
LABEL_9:
        int v14 = 0;
      }
      if (v83 != v85) {
        free(v83);
      }
      if (!v14) {
        break;
      }
      llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)a2);
      unint64_t v9 = *(llvm::yaml::KeyValueNode **)(a2 + 80);
      if (!v9) {
        goto LABEL_114;
      }
    }
  }
  else
  {
LABEL_114:
    if (!*((unsigned char *)**a1 + 74) && sub_1CD857328(a1, a2, (uint64_t)v77))
    {
      long long v62 = (uint64_t *)v75.i64[1];
      long long v61 = (uint64_t *)v75.i64[0];
      uint64_t v59 = 1;
      while (v61 != v62)
      {
        uint64_t v63 = *v61++;
        sub_1CD0C94A4(a3, v63, 0);
      }
      goto LABEL_116;
    }
  }
  uint64_t v59 = 0;
LABEL_116:
  *(void *)char v80 = &v75;
  sub_1CD0C9B5C((void ***)v80);
  MEMORY[0x1D25D9CD0](v77[0], 8);
  return v59;
}

void llvm::vfs::RedirectingFileSystem::create()
{
}

uint64_t sub_1CD0C3460(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t first_of = llvm::StringRef::find_first_of(v13, "/\\"", 2, 0);
  if (first_of == -1)
  {
    unsigned int v7 = 0;
  }
  else if (a2[first_of] == 47)
  {
    unsigned int v7 = 1;
  }
  else
  {
    unsigned int v7 = 3;
  }
  unint64_t v9 = llvm::sys::path::remove_leading_dotslash(a2, a3, v7);
  size_t v10 = v8;
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1CD96DBF0;
  if (v8 >= 0x101) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v11 = 0;
  if (v8)
  {
    memcpy(*(void **)a1, v9, v8);
    uint64_t v11 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v11 + v10;

  return llvm::sys::path::remove_dots((unsigned __int8 **)a1, 1, v7);
}

void sub_1CD0C3568(uint64_t a1, llvm::Twine *this, char a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 73))
  {
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)(a1 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a4 + 56);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a4 + 72);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1CB8BDF7C(a1, *(const void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a4;
      *(void *)(a1 + 16) = *(void *)(a4 + 16);
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a4 + 56);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a4 + 72);
    if (a3)
    {
      *(unsigned char *)(a1 + 73) = 1;
    }
    else
    {
      long long v13 = *(_OWORD *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 64);
      llvm::Twine::str(this, &v14);
      long long v16 = v13;
      *(void *)&long long v17 = v8;
      *((void *)&v17 + 1) = v10;
      *(void *)&long long v18 = v9;
      *((void *)&v18 + 1) = v11;
      __int16 v19 = 0;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = v14;
      *(void *)(a1 + 16) = v15;
      long long v12 = v17;
      *(_OWORD *)(a1 + 24) = v16;
      *(_OWORD *)(a1 + 40) = v12;
      *(_OWORD *)(a1 + 56) = v18;
      *(_WORD *)(a1 + 72) = v19;
    }
    *(unsigned char *)(a1 + 72) = 1;
  }
}

uint64_t llvm::vfs::RedirectingFileSystem::exists(llvm::vfs::RedirectingFileSystem *this, const llvm::Twine *a2)
{
  v40[32] = *MEMORY[0x1E4F143B8];
  long long v38 = v40;
  long long v39 = xmmword_1CD96DBF0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v38);
  if (llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)&v38))
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 25) == 1)
  {
    uint64_t v4 = *((void *)this + 8);
    __int16 v32 = 261;
    unint64_t v29 = v38;
    *(void *)&long long v30 = v39;
    if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v4 + 72))(v4, &v29))
    {
      uint64_t v3 = 1;
      goto LABEL_6;
    }
  }
  llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, (unint64_t)v38, v39, (unsigned int *)&v33);
  char v6 = v37;
  if (v37)
  {
    if (*((_DWORD *)this + 25))
    {
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v7 = v33;
      uint64_t v8 = (const std::error_category *)__p;
      uint64_t v3 = 0;
      if (std::generic_category() == v8 && v7 == 2)
      {
        uint64_t v9 = *((void *)this + 8);
        __int16 v32 = 261;
        unint64_t v29 = v38;
        *(void *)&long long v30 = v39;
        uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v9 + 72))(v9, &v29);
      }
    }
    goto LABEL_18;
  }
  sub_1CD0C2138((uint64_t)&__src, &v33);
  if (v28)
  {
    uint64_t v10 = __src;
    if (!__src)
    {
      size_t v11 = 0;
      char v12 = 0;
      std::string __dst = 0;
      size_t v23 = 0;
      unint64_t v24 = 0;
      goto LABEL_33;
    }
    size_t v13 = __len;
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__len >= 0x17)
    {
      size_t v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v15 = __len | 7;
      }
      size_t v16 = v15 + 1;
      p_dst = (void **)operator new(v15 + 1);
      size_t v23 = v13;
      unint64_t v24 = v16 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v24) = __len;
      p_dst = &__dst;
      if (!__len) {
        goto LABEL_32;
      }
    }
    memmove(p_dst, v10, v13);
LABEL_32:
    *((unsigned char *)p_dst + v13) = 0;
    char v12 = HIBYTE(v24);
    uint64_t v10 = __dst;
    size_t v11 = v23;
LABEL_33:
    if (v12 >= 0) {
      long long v17 = &__dst;
    }
    else {
      long long v17 = (void **)v10;
    }
    if (v12 >= 0) {
      size_t v18 = v12 & 0x7F;
    }
    else {
      size_t v18 = v11;
    }
    unint64_t v29 = &v31;
    long long v30 = xmmword_1CD96DBF0;
    if (v18 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v19 = 0;
    if (v18)
    {
      memcpy(&v31, v17, v18);
      uint64_t v19 = v30;
    }
    *(void *)&long long v30 = v19 + v18;
    if (v12 < 0) {
      operator delete(v10);
    }
    if (llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)&v29)) {
      goto LABEL_45;
    }
    uint64_t v20 = *((void *)this + 8);
    __int16 v25 = 261;
    std::string __dst = v29;
    size_t v23 = v30;
    if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v20 + 72))(v20, &__dst))
    {
      uint64_t v3 = 1;
    }
    else
    {
      if (*((_DWORD *)this + 25))
      {
LABEL_45:
        uint64_t v3 = 0;
        goto LABEL_50;
      }
      uint64_t v21 = *((void *)this + 8);
      __int16 v25 = 261;
      std::string __dst = v38;
      size_t v23 = v39;
      uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v21 + 72))(v21, &__dst);
    }
LABEL_50:
    if (v29 != &v31) {
      free(v29);
    }
    goto LABEL_12;
  }
  uint64_t v3 = 1;
LABEL_12:
  char v6 = v37;
LABEL_18:
  if ((v6 & 1) == 0 && v36 && v35 < 0) {
    operator delete(__p);
  }
LABEL_6:
  if (v38 != v40) {
    free(v38);
  }
  return v3;
}

void llvm::vfs::RedirectingFileSystem::openFileForRead(llvm::vfs::RedirectingFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  v77[32] = *MEMORY[0x1E4F143B8];
  *(void *)__int16 v76 = v77;
  *(_OWORD *)&v76[8] = xmmword_1CD96DBF0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)v76);
  uint64_t Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)v76);
  if (Canonical)
  {
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = Canonical;
    *(void *)(a3 + 8) = v7;
    goto LABEL_3;
  }
  if (*((_DWORD *)this + 25) != 1) {
    goto LABEL_11;
  }
  uint64_t v8 = *((void *)this + 8);
  __int16 v66 = 261;
  *(void *)char v64 = *(void *)v76;
  *(void *)&v64[8] = *(void *)&v76[8];
  (*(void (**)(void *__return_ptr))(*(void *)v8 + 24))(v74);
  llvm::vfs::File::getWithPath(v74, a2, a3);
  if ((v75 & 1) == 0)
  {
    uint64_t v9 = v74[0];
    v74[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  if (*(unsigned char *)(a3 + 16))
  {
LABEL_11:
    llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, *(unint64_t *)v76, *(unint64_t *)&v76[8], (unsigned int *)&v69);
    char v10 = v73;
    if (v73)
    {
      if (!*((_DWORD *)this + 25))
      {
        uint64_t v13 = v69;
        long long v14 = (const std::error_category *)__p;
        if (std::generic_category() == v14 && v13 == 2)
        {
          uint64_t v21 = *((void *)this + 8);
          __int16 v66 = 261;
          *(void *)char v64 = *(void *)v76;
          *(void *)&v64[8] = *(void *)&v76[8];
          (*(void (**)(void *__return_ptr))(*(void *)v21 + 24))(v67);
          llvm::vfs::File::getWithPath(v67, a2, a3);
          if ((v68 & 1) == 0)
          {
            uint64_t v22 = v67[0];
            v67[0] = 0;
            if (v22) {
              (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
            }
          }
          goto LABEL_23;
        }
        char v10 = v73;
      }
      if (v10)
      {
        uint64_t v12 = v69;
        size_t v11 = __p;
      }
      else
      {
        size_t v11 = (void *)std::system_category();
        uint64_t v12 = 0;
      }
      *(unsigned char *)(a3 + 16) |= 1u;
      goto LABEL_22;
    }
    sub_1CD0C2138((uint64_t)v64, &v69);
    if (!v64[16])
    {
      size_t v11 = (void *)std::generic_category();
      *(unsigned char *)(a3 + 16) |= 1u;
      uint64_t v12 = 22;
LABEL_22:
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = v11;
LABEL_23:
      if ((v73 & 1) == 0 && v72 && v71 < 0) {
        operator delete(__p);
      }
      goto LABEL_3;
    }
    sub_1CD0C2138((uint64_t)v64, &v69);
    size_t v15 = *(const void **)v64;
    size_t v16 = *(void *)&v64[8];
    if (!*(void *)v64)
    {
      size_t v17 = 0;
      size_t v18 = 0;
      char v19 = 0;
      long long __dst = 0uLL;
      unint64_t v52 = 0;
LABEL_41:
      if (v19 >= 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = v18;
      }
      if (v19 >= 0) {
        size_t v26 = v19 & 0x7F;
      }
      else {
        size_t v26 = v17;
      }
      *(void *)char v64 = &v65;
      *(_OWORD *)&v64[8] = xmmword_1CD96DBF0;
      if (v26 >= 0x101) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v27 = 0;
      if (v26)
      {
        memcpy(&v65, p_dst, v26);
        uint64_t v27 = *(void *)&v64[8];
      }
      *(void *)&v64[8] = v27 + v26;
      if (v19 < 0) {
        operator delete(v18);
      }
      uint64_t v28 = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)v64);
      if (v28)
      {
        *(unsigned char *)(a3 + 16) |= 1u;
        *(void *)a3 = v28;
        *(void *)(a3 + 8) = v29;
      }
      else
      {
        uint64_t v30 = v69;
        uint64_t v31 = *((void *)this + 8);
        WORD4(v53) = 261;
        long long __dst = *(_OWORD *)v64;
        (*(void (**)(void *__return_ptr))(*(void *)v31 + 24))(v60);
        __int16 v50 = 261;
        v49[0] = v15;
        v49[1] = v16;
        llvm::vfs::File::getWithPath(v60, (llvm::Twine *)v49, (uint64_t)v62);
        if ((v61 & 1) == 0)
        {
          uint64_t v32 = v60[0];
          v60[0] = 0;
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
        if (v63)
        {
          uint64_t v37 = v62[0];
          long long v38 = (const std::error_category *)v62[1];
          if (!*((_DWORD *)this + 25)
            && (!v69 || *(_DWORD *)(v69 + 8) == 1)
            && std::generic_category() == v38
            && v37 == 2)
          {
            uint64_t v40 = *((void *)this + 8);
            WORD4(v53) = 261;
            long long __dst = *(_OWORD *)v76;
            (*(void (**)(void *__return_ptr))(*(void *)v40 + 24))(v58);
            llvm::vfs::File::getWithPath(v58, a2, a3);
            if ((v59 & 1) == 0)
            {
              uint64_t v41 = v58[0];
              v58[0] = 0;
              if (v41) {
                (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
              }
            }
          }
          else
          {
            *(unsigned char *)(a3 + 16) |= 1u;
            *(void *)a3 = v37;
            *(void *)(a3 + 8) = v38;
          }
        }
        else
        {
          uint64_t v33 = v62[0];
          (*(void (**)(long long *__return_ptr, void))(*(void *)v62[0] + 16))(&__dst, v62[0]);
          char v34 = v57;
          if ((v57 & 1) == 0)
          {
            int v35 = *(_DWORD *)(v30 + 64);
            if (v35) {
              char v36 = v35 == 1;
            }
            else {
              char v36 = *((unsigned char *)this + 98) != 0;
            }
            if (SHIBYTE(v52) < 0)
            {
              sub_1CB8BDF7C((uint64_t)v42, (const void *)__dst, *((unint64_t *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)unint64_t v42 = __dst;
              unint64_t v43 = v52;
            }
            long long v44 = v53;
            long long v45 = v54;
            long long v46 = v55;
            __int16 v47 = v56;
            sub_1CD0C3568((uint64_t)v48, a2, v36, (uint64_t)v42);
            if (SHIBYTE(v43) < 0) {
              operator delete(v42[0]);
            }
            operator new();
          }
          long long v39 = __dst;
          *(unsigned char *)(a3 + 16) |= 1u;
          *(_OWORD *)a3 = v39;
          if ((v34 & 1) == 0 && SHIBYTE(v52) < 0) {
            operator delete((void *)__dst);
          }
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
        }
      }
      if (*(uint64_t **)v64 != &v65) {
        free(*(void **)v64);
      }
      goto LABEL_23;
    }
    if (*(void *)&v64[8] >= 0x7FFFFFFFFFFFFFF8uLL) {
      abort();
    }
    if (*(void *)&v64[8] >= 0x17uLL)
    {
      uint64_t v23 = (*(void *)&v64[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(void *)&v64[8] | 7) != 0x17) {
        uint64_t v23 = *(void *)&v64[8] | 7;
      }
      uint64_t v24 = v23 + 1;
      uint64_t v20 = (long long *)operator new(v23 + 1);
      *((void *)&__dst + 1) = v16;
      unint64_t v52 = v24 | 0x8000000000000000;
      *(void *)&long long __dst = v20;
    }
    else
    {
      HIBYTE(v52) = v64[8];
      uint64_t v20 = &__dst;
      if (!*(void *)&v64[8]) {
        goto LABEL_40;
      }
    }
    memmove(v20, v15, v16);
LABEL_40:
    *((unsigned char *)v20 + v16) = 0;
    char v19 = HIBYTE(v52);
    size_t v17 = *((void *)&__dst + 1);
    size_t v18 = (long long *)__dst;
    goto LABEL_41;
  }
LABEL_3:
  if (*(void **)v76 != v77) {
    free(*(void **)v76);
  }
}

unint64_t llvm::vfs::RedirectingFileSystem::getRealPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v30[32] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = v30;
  long long v29 = xmmword_1CD96DBF0;
  llvm::Twine::toVector(a2, (uint64_t)&v28);
  uint64_t Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical(a1, (uint64_t)&v28);
  if (Canonical
    || *(_DWORD *)(a1 + 100) == 1
    && (uint64_t v6 = *(void *)(a1 + 64),
        __int16 v26 = 261,
        uint64_t v23 = v28,
        long long __p = (void *)v29,
        uint64_t Canonical = (*(uint64_t (**)(uint64_t, _DWORD **, uint64_t))(*(void *)v6 + 56))(v6, &v23, a3),
        !Canonical))
  {
    unint64_t v7 = Canonical & 0xFFFFFFFF00000000;
    goto LABEL_5;
  }
  llvm::vfs::RedirectingFileSystem::lookupPath(a1, (unint64_t)v28, v29, (unsigned int *)&v23);
  if ((v27 & 1) == 0)
  {
    sub_1CD0C2138((uint64_t)v18, &v23);
    if (v19)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      __int16 v22 = 261;
      uint64_t v20 = (void *)v18[0];
      uint64_t v21 = v18[1];
      uint64_t Canonical = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 56))(v9, &v20, a3);
      size_t v11 = v10;
      if (Canonical && !*(_DWORD *)(a1 + 100) && (!v23 || v23[2] == 1))
      {
        uint64_t v12 = std::generic_category();
        if (Canonical == 2 && v12 == v11)
        {
          uint64_t v14 = *(void *)(a1 + 64);
          __int16 v22 = 261;
          uint64_t v20 = v28;
          uint64_t v21 = v29;
          uint64_t Canonical = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v14 + 56))(v14, &v20, a3);
        }
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 100))
    {
      std::generic_category();
      unint64_t v7 = 0;
      LODWORD(Canonical) = 22;
      goto LABEL_23;
    }
LABEL_31:
    uint64_t v16 = *(void *)(a1 + 64);
    __int16 v22 = 261;
    uint64_t v20 = v28;
    uint64_t v21 = v29;
    uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 56))(v16, &v20, a3);
    LODWORD(Canonical) = v17;
    unint64_t v7 = v17 & 0xFFFFFFFF00000000;
    goto LABEL_23;
  }
  if (*(_DWORD *)(a1 + 100))
  {
    uint64_t Canonical = (uint64_t)v23;
  }
  else
  {
    uint64_t Canonical = (uint64_t)v23;
    size_t v15 = (const std::error_category *)__p;
    if (std::generic_category() == v15 && Canonical == 2) {
      goto LABEL_31;
    }
  }
LABEL_22:
  unint64_t v7 = Canonical & 0xFFFFFFFF00000000;
LABEL_23:
  if ((v27 & 1) == 0 && (_BYTE)v26 && v25 < 0) {
    operator delete(__p);
  }
LABEL_5:
  if (v28 != v30) {
    free(v28);
  }
  return v7 | Canonical;
}

void sub_1CD0C44E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v59[16] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 8);
  if (!v6)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 40);
    unint64_t v7 = *(uint64_t **)(a1 + 48);
    if (v8 != v7)
    {
      unsigned int v9 = *((_DWORD *)a2 + 2);
      do
      {
        char v10 = *(unsigned char *)(*v8 + 39);
        if (v10 >= 0) {
          uint64_t v11 = *v8 + 16;
        }
        else {
          uint64_t v11 = *(void *)(*v8 + 16);
        }
        if (v10 >= 0) {
          uint64_t v12 = v10 & 0x7F;
        }
        else {
          uint64_t v12 = *(void *)(*v8 + 24);
        }
        if (v9 >= *((_DWORD *)a2 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v13 = (uint64_t *)(*a2 + 16 * v9);
        *uint64_t v13 = v11;
        v13[1] = v12;
        ++*((_DWORD *)a2 + 2);
        uint64_t v14 = *v8++;
        sub_1CD0C44E4(v14, a2, a3);
        unsigned int v9 = *((_DWORD *)a2 + 2) - 1;
        *((_DWORD *)a2 + 2) = v9;
      }
      while (v8 != v7);
    }
    return;
  }
  if (v6 != 1)
  {
    if (v6 != 2) {
      uint64_t v5 = 0;
    }
    __s = (char *)v59;
    long long v58 = xmmword_1CFAC3020;
    uint64_t v18 = *((unsigned int *)a2 + 2);
    if (v18)
    {
      uint64_t v21 = *a2;
      uint64_t v22 = *a2 + 16 * v18;
      do
      {
        LOWORD(v48) = 261;
        long long v44 = *(void **)v21;
        size_t v45 = *(void *)(v21 + 8);
        __int16 v56 = 257;
        __int16 v54 = 257;
        __int16 v52 = 257;
        llvm::sys::path::append(&__s, 0, (const char **)&v44, v55, (uint64_t)v53, (uint64_t)v51);
        v21 += 16;
      }
      while (v21 != v22);
      goto LABEL_25;
    }
LABEL_22:
    uint64_t v19 = 0;
    unint64_t v20 = 128;
    goto LABEL_26;
  }
  __s = (char *)v59;
  long long v58 = xmmword_1CFAC3020;
  uint64_t v15 = *((unsigned int *)a2 + 2);
  if (!v15) {
    goto LABEL_22;
  }
  uint64_t v16 = *a2;
  uint64_t v17 = *a2 + 16 * v15;
  do
  {
    LOWORD(v48) = 261;
    long long v44 = *(void **)v16;
    size_t v45 = *(void *)(v16 + 8);
    __int16 v56 = 257;
    __int16 v54 = 257;
    __int16 v52 = 257;
    llvm::sys::path::append(&__s, 0, (const char **)&v44, v55, (uint64_t)v53, (uint64_t)v51);
    v16 += 16;
  }
  while (v16 != v17);
LABEL_25:
  unint64_t v20 = *((void *)&v58 + 1);
  uint64_t v19 = v58;
LABEL_26:
  if (v19 + 1 > v20) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  __s[v19] = 0;
  uint64_t v23 = __s;
  __int16 v26 = *(const void **)(v5 + 40);
  uint64_t v25 = v5 + 40;
  uint64_t v24 = v26;
  char v27 = *(unsigned char *)(v25 + 23);
  int v28 = v27;
  if (v27 >= 0) {
    long long v29 = (const void *)v25;
  }
  else {
    long long v29 = v24;
  }
  size_t v30 = v27 & 0x7F;
  if (v28 >= 0) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = *(void *)(v25 + 8);
  }
  size_t v32 = strlen(__s);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
LABEL_57:
  }
    abort();
  size_t v33 = v32;
  if (v32 >= 0x17)
  {
    uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v35 = v32 | 7;
    }
    uint64_t v36 = v35 + 1;
    char v34 = operator new(v35 + 1);
    size_t v45 = v33;
    unint64_t v46 = v36 | 0x8000000000000000;
    long long v44 = v34;
    goto LABEL_40;
  }
  HIBYTE(v46) = v32;
  char v34 = &v44;
  if (v32) {
LABEL_40:
  }
    memmove(v34, v23, v33);
  *((unsigned char *)v34 + v33) = 0;
  if (v31 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_57;
  }
  if (v31 >= 0x17)
  {
    uint64_t v38 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v38 = v31 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_p = operator new(v38 + 1);
    size_t v48 = v31;
    unint64_t v49 = v39 | 0x8000000000000000;
    long long __p = p_p;
  }
  else
  {
    p_p = &__p;
    HIBYTE(v49) = v31;
    if (!v31) {
      goto LABEL_49;
    }
  }
  memmove(p_p, v29, v31);
LABEL_49:
  *((unsigned char *)p_p + v31) = 0;
  char v50 = 0;
  unint64_t v40 = sub_1CD857B94(a3, (unint64_t)&v44);
  uint64_t v41 = *(void *)a3 + 56 * *(unsigned int *)(a3 + 8);
  long long v42 = *(_OWORD *)v40;
  *(void *)(v41 + 16) = *(void *)(v40 + 16);
  *(_OWORD *)uint64_t v41 = v42;
  *(void *)(v40 + 8) = 0;
  *(void *)(v40 + 16) = 0;
  *(void *)unint64_t v40 = 0;
  long long v43 = *(_OWORD *)(v40 + 24);
  *(void *)(v41 + 40) = *(void *)(v40 + 40);
  *(_OWORD *)(v41 + 24) = v43;
  *(void *)(v40 + 32) = 0;
  *(void *)(v40 + 40) = 0;
  *(void *)(v40 + 24) = 0;
  *(unsigned char *)(v41 + 48) = *(unsigned char *)(v40 + 48);
  ++*(_DWORD *)(a3 + 8);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(v44);
  }
  if (__s != (char *)v59) {
    free(__s);
  }
}

char *llvm::vfs::YAMLVFSWriter::addEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  char v7 = a6;
  return sub_1CD856114(a1, (uint64_t)v9, (uint64_t)v8, &v7);
}

char *llvm::vfs::YAMLVFSWriter::addDirectoryMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  char v6 = 1;
  return sub_1CD856114(a1, (uint64_t)v8, (uint64_t)v7, &v6);
}

void llvm::vfs::YAMLVFSWriter::write(llvm::vfs::YAMLVFSWriter *this, llvm::raw_ostream *a2)
{
  v120[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  unint64_t v6 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3));
  if (v5 == v4) {
    char v7 = 0;
  }
  else {
    char v7 = (char *)v6;
  }
  sub_1CD0CCC70(v4, v5, v7, 1);
  v117 = a2;
  int v118 = v120;
  uint64_t v119 = 0x1000000000;
  uint64_t v9 = *(void *)this;
  uint64_t v8 = *((void *)this + 1);
  unsigned int v10 = *((unsigned __int16 *)this + 14);
  unsigned int v11 = *((unsigned __int16 *)this + 12);
  unsigned int v12 = *((unsigned __int16 *)this + 13);
  char v13 = *((unsigned char *)this + 55);
  int v14 = v13;
  int v15 = v13 & 0x7F;
  if (v14 >= 0) {
    LODWORD(v16) = v15;
  }
  else {
    uint64_t v16 = *((void *)this + 5);
  }
  uint64_t v17 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v17) > 0x11)
  {
    *(_WORD *)(v17 + 16) = 2604;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)"{\n  'version': 0,\n";
    *((void *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "{\n  'version': 0,\n", 0x12uLL);
  }
  if (v11 >= 0x100)
  {
    uint64_t v18 = v117;
    uint64_t v19 = (void *)*((void *)v117 + 4);
    if (*((void *)v117 + 3) - (void)v19 > 0x14uLL)
    {
      qmemcpy(v19, "  'case-sensitive': '", 21);
      unint64_t v20 = (void *)(*((void *)v117 + 4) + 21);
      *((void *)v117 + 4) = v20;
    }
    else
    {
      llvm::raw_ostream::write(v117, "  'case-sensitive': '", 0x15uLL);
      unint64_t v20 = (void *)*((void *)v117 + 4);
    }
    if ((_BYTE)v11) {
      uint64_t v21 = "true";
    }
    else {
      uint64_t v21 = "false";
    }
    if ((_BYTE)v11) {
      size_t v22 = 4;
    }
    else {
      size_t v22 = 5;
    }
    if (v22 <= *((void *)v18 + 3) - (void)v20)
    {
      memcpy(v20, v21, v22);
      size_t v23 = *((void *)v18 + 4) + v22;
      *((void *)v18 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v18, v21, v22);
      size_t v23 = *((void *)v18 + 4);
    }
    if (*((void *)v18 + 3) - v23 > 2)
    {
      *(unsigned char *)(v23 + 2) = 10;
      *(_WORD *)size_t v23 = 11303;
      *((void *)v18 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v18, "',\n", 3uLL);
    }
  }
  if (v10 >= 0x100)
  {
    uint64_t v24 = v117;
    uint64_t v25 = (void *)*((void *)v117 + 4);
    if (*((void *)v117 + 3) - (void)v25 > 0x18uLL)
    {
      qmemcpy(v25, "  'use-external-names': '", 25);
      __int16 v26 = (void *)(*((void *)v117 + 4) + 25);
      *((void *)v117 + 4) = v26;
    }
    else
    {
      llvm::raw_ostream::write(v117, "  'use-external-names': '", 0x19uLL);
      __int16 v26 = (void *)*((void *)v117 + 4);
    }
    if ((_BYTE)v10) {
      char v27 = "true";
    }
    else {
      char v27 = "false";
    }
    if ((_BYTE)v10) {
      size_t v28 = 4;
    }
    else {
      size_t v28 = 5;
    }
    if (v28 <= *((void *)v24 + 3) - (void)v26)
    {
      memcpy(v26, v27, v28);
      size_t v29 = *((void *)v24 + 4) + v28;
      *((void *)v24 + 4) = v29;
    }
    else
    {
      llvm::raw_ostream::write(v24, v27, v28);
      size_t v29 = *((void *)v24 + 4);
    }
    if (*((void *)v24 + 3) - v29 > 2)
    {
      *(unsigned char *)(v29 + 2) = 10;
      *(_WORD *)size_t v29 = 11303;
      *((void *)v24 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v24, "',\n", 3uLL);
    }
  }
  if (v12 >= 0x100)
  {
    BOOL v108 = v12 != 0;
    size_t v30 = v117;
    size_t v31 = (void *)*((void *)v117 + 4);
    if (*((void *)v117 + 3) - (void)v31 > 0x16uLL)
    {
      qmemcpy(v31, "  'overlay-relative': '", 23);
      size_t v32 = (void *)(*((void *)v117 + 4) + 23);
      *((void *)v117 + 4) = v32;
    }
    else
    {
      llvm::raw_ostream::write(v117, "  'overlay-relative': '", 0x17uLL);
      size_t v32 = (void *)*((void *)v117 + 4);
    }
    if ((_BYTE)v12) {
      size_t v33 = "true";
    }
    else {
      size_t v33 = "false";
    }
    if ((_BYTE)v12) {
      size_t v34 = 4;
    }
    else {
      size_t v34 = 5;
    }
    if (v34 <= *((void *)v30 + 3) - (void)v32)
    {
      memcpy(v32, v33, v34);
      size_t v35 = *((void *)v30 + 4) + v34;
      *((void *)v30 + 4) = v35;
    }
    else
    {
      llvm::raw_ostream::write(v30, v33, v34);
      size_t v35 = *((void *)v30 + 4);
    }
    if (*((void *)v30 + 3) - v35 > 2)
    {
      *(unsigned char *)(v35 + 2) = 10;
      *(_WORD *)size_t v35 = 11303;
      *((void *)v30 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v30, "',\n", 3uLL);
    }
  }
  else
  {
    BOOL v108 = 0;
  }
  uint64_t v36 = (void *)*((void *)v117 + 4);
  if (*((void *)v117 + 3) - (void)v36 > 0xCuLL)
  {
    qmemcpy(v36, "  'roots': [\n", 13);
    *((void *)v117 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v117, "  'roots': [\n", 0xDuLL);
  }
  if (v8 != v9)
  {
    char v37 = *(unsigned char *)(v9 + 23);
    BOOL v38 = v37 < 0;
    if (v37 >= 0) {
      uint64_t v39 = (unsigned __int8 *)v9;
    }
    else {
      uint64_t v39 = *(unsigned __int8 **)v9;
    }
    unint64_t v40 = v37 & 0x7F;
    if (v38) {
      unint64_t v41 = *(void *)(v9 + 8);
    }
    else {
      unint64_t v41 = v40;
    }
    if (!*(unsigned char *)(v9 + 48))
    {
      unint64_t v42 = sub_1CD0E3AC0(v39, v41, 0);
      unint64_t v43 = v41 >= v42 ? v42 : v41;
      unint64_t v41 = v42 == -1 ? 0 : v43;
      if (v42 == -1) {
        uint64_t v39 = 0;
      }
    }
    uint64_t v44 = v8 - v9;
    sub_1CD0C9DB4((uint64_t)&v117, v39, v41);
    BOOL v45 = *(unsigned char *)(v9 + 48) != 0;
    if (!*(unsigned char *)(v9 + 48))
    {
      char v46 = *(unsigned char *)(v9 + 47);
      int v47 = v46;
      unint64_t v48 = v46 & 0x7F;
      BOOL v49 = v47 < 0;
      if (v47 < 0) {
        unint64_t v48 = *(void *)(v9 + 32);
      }
      unint64_t v50 = v16;
      uint64_t v51 = v9 + 24;
      if (v49) {
        uint64_t v51 = *(void *)(v9 + 24);
      }
      if (v48 < v16) {
        unint64_t v50 = v48;
      }
      if (!v108) {
        unint64_t v50 = 0;
      }
      char v52 = *(unsigned char *)(v9 + 23);
      BOOL v53 = v52 < 0;
      uint64_t v54 = *(void *)v9;
      uint64_t v55 = v52 & 0x7F;
      if (v53) {
        uint64_t v55 = *(void *)(v9 + 8);
      }
      __s1 = 0;
      size_t __n = 0;
      uint64_t v56 = v48 - v50;
      if (v53) {
        uint64_t v57 = v54;
      }
      else {
        uint64_t v57 = v9;
      }
      uint64_t v111 = v57;
      uint64_t v112 = v55;
      long long v58 = (unsigned __int8 *)(v51 + v50);
      uint64_t v115 = v55;
      int v116 = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)&v111);
      sub_1CD0CA044((uint64_t)&v117, (unsigned __int8 *)__s1, __n, v58, v56);
    }
    if (v44 == 56)
    {
LABEL_83:
      while (v119)
      {
        char v59 = v117;
        long long v60 = (unsigned char *)*((void *)v117 + 4);
        if (*((unsigned char **)v117 + 3) == v60)
        {
          llvm::raw_ostream::write(v117, "\n", 1uLL);
        }
        else
        {
          unsigned char *v60 = 10;
          ++*((void *)v59 + 4);
        }
        sub_1CD0CA34C((uint64_t)&v117);
      }
      char v61 = v117;
      long long v62 = (unsigned char *)*((void *)v117 + 4);
      if (*((unsigned char **)v117 + 3) == v62)
      {
        llvm::raw_ostream::write(v117, "\n", 1uLL);
      }
      else
      {
        *long long v62 = 10;
        ++*((void *)v61 + 4);
      }
      goto LABEL_91;
    }
    uint64_t v66 = v9 + 8 * (v44 >> 3);
    long long v67 = (unsigned __int8 *)(v9 + 56);
    unint64_t v107 = v16;
    while (1)
    {
      uint64_t v68 = (uint64_t)v67;
      char v69 = *(unsigned char *)(v9 + 79);
      BOOL v70 = v69 < 0;
      if (v69 >= 0) {
        char v71 = v67;
      }
      else {
        char v71 = *(unsigned __int8 **)(v9 + 56);
      }
      unint64_t v72 = v69 & 0x7F;
      if (v70) {
        unint64_t v73 = *(void *)(v9 + 64);
      }
      else {
        unint64_t v73 = v72;
      }
      if (!*(unsigned char *)(v9 + 104))
      {
        unint64_t v74 = sub_1CD0E3AC0(v71, v73, 0);
        unint64_t v75 = v73 >= v74 ? v74 : v73;
        unint64_t v73 = v74 == -1 ? 0 : v75;
        if (v74 == -1) {
          char v71 = 0;
        }
      }
      uint64_t v76 = v119;
      uint64_t v77 = (char *)v118 + 16 * v119;
      if (v73 == *((void *)v77 - 1) && (!v73 || !memcmp(v71, *((const void **)v77 - 2), v73)))
      {
        if (!v45)
        {
          __int16 v105 = v117;
          uint64_t v106 = (_WORD *)*((void *)v117 + 4);
          if (*((void *)v117 + 3) - (void)v106 > 1uLL)
          {
            BOOL v45 = 0;
            *uint64_t v106 = 2604;
            *((void *)v105 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v117, ",\n", 2uLL);
            BOOL v45 = 0;
          }
          goto LABEL_148;
        }
      }
      else
      {
        char v78 = 0;
        if (v76)
        {
          while (1)
          {
            unint64_t v79 = (char *)v118 + 16 * v76;
            unint64_t v81 = *((void *)v79 - 2);
            unint64_t v80 = *((void *)v79 - 1);
            llvm::sys::path::begin(v81, v80, 0, (uint64_t)&v111);
            llvm::sys::path::begin((unint64_t)v71, v73, 0, (uint64_t)v109);
            uint64_t v82 = v115;
            BOOL v83 = v111 == v81;
            if (v111 == v81 && v115 == v80) {
              break;
            }
            if ((unsigned __int8 *)v109[0] == v71 && v110 == v73)
            {
LABEL_135:
              if (v83 && v82 == v80) {
                break;
              }
            }
            else
            {
              while (__n == v109[3] && (!__n || !memcmp(__s1, (const void *)v109[2], __n)))
              {
                llvm::sys::path::const_iterator::operator++(&v111);
                llvm::sys::path::const_iterator::operator++(v109);
                uint64_t v82 = v115;
                BOOL v83 = v111 == v81;
                if (v111 == v81 && v115 == v80) {
                  goto LABEL_142;
                }
                if ((unsigned __int8 *)v109[0] == v71 && v110 == v73) {
                  goto LABEL_135;
                }
              }
            }
            __int16 v87 = v117;
            char v88 = (unsigned char *)*((void *)v117 + 4);
            if (*((unsigned char **)v117 + 3) == v88)
            {
              llvm::raw_ostream::write(v117, "\n", 1uLL);
            }
            else
            {
              *char v88 = 10;
              ++*((void *)v87 + 4);
            }
            sub_1CD0CA34C((uint64_t)&v117);
            uint64_t v76 = v119;
            char v78 = 1;
            if (!v119) {
              goto LABEL_144;
            }
          }
        }
LABEL_142:
        if ((v78 & 1) != 0 || !v45)
        {
LABEL_144:
          uint64_t v89 = v117;
          __int16 v90 = (_WORD *)*((void *)v117 + 4);
          if (*((void *)v117 + 3) - (void)v90 > 1uLL)
          {
            *__int16 v90 = 2604;
            *((void *)v89 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v117, ",\n", 2uLL);
          }
        }
        sub_1CD0C9DB4((uint64_t)&v117, v71, v73);
      }
      BOOL v45 = 1;
LABEL_148:
      if (!*(unsigned char *)(v9 + 104))
      {
        uint64_t v93 = *(void *)(v9 + 80);
        uint64_t v92 = v9 + 80;
        uint64_t v91 = v93;
        char v94 = *(unsigned char *)(v92 + 23);
        int v95 = v94;
        if (v94 >= 0) {
          uint64_t v91 = v92;
        }
        unint64_t v96 = v94 & 0x7F;
        if (v95 < 0) {
          unint64_t v96 = *(void *)(v92 + 8);
        }
        unint64_t v97 = v107;
        if (v96 < v107) {
          unint64_t v97 = v96;
        }
        if (!v108) {
          unint64_t v97 = 0;
        }
        uint64_t v98 = (unsigned __int8 *)(v91 + v97);
        uint64_t v99 = v96 - v97;
        char v100 = *(unsigned char *)(v92 - 1);
        uint64_t v101 = *(void *)(v92 - 24);
        uint64_t v102 = *(void *)(v92 - 16);
        int v103 = v100;
        if (v100 >= 0) {
          uint64_t v101 = v68;
        }
        __s1 = 0;
        size_t __n = 0;
        uint64_t v104 = v100 & 0x7F;
        if (v103 < 0) {
          uint64_t v104 = v102;
        }
        uint64_t v111 = v101;
        uint64_t v112 = v104;
        uint64_t v115 = v104;
        int v116 = 0;
        llvm::sys::path::reverse_iterator::operator++((uint64_t)&v111);
        sub_1CD0CA044((uint64_t)&v117, (unsigned __int8 *)__s1, __n, v98, v99);
        BOOL v45 = 0;
      }
      long long v67 = (unsigned __int8 *)(v68 + 56);
      uint64_t v9 = v68;
      if (v68 + 56 == v66) {
        goto LABEL_83;
      }
    }
  }
LABEL_91:
  char v63 = v117;
  char v64 = (_DWORD *)*((void *)v117 + 4);
  if (*((void *)v117 + 3) - (void)v64 > 3uLL)
  {
    *char v64 = 173875232;
    uint64_t v65 = (_WORD *)(*((void *)v63 + 4) + 4);
    *((void *)v63 + 4) = v65;
  }
  else
  {
    char v63 = llvm::raw_ostream::write(v117, "  ]\n", 4uLL);
    uint64_t v65 = (_WORD *)*((void *)v63 + 4);
  }
  if (*((void *)v63 + 3) - (void)v65 > 1uLL)
  {
    *uint64_t v65 = 2685;
    *((void *)v63 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v63, "}\n", 2uLL);
  }
  if (v118 != v120) {
    free(v118);
  }
}

void *llvm::vfs::recursive_directory_iterator::recursive_directory_iterator(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  uint64_t v5 = a1 + 1;
  *a1 = a2;
  a1[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(&v19, a2, a3, a4);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  BOOL v6 = sub_1CD065CEC(&v19, &v17);
  BOOL v7 = v6;
  uint64_t v8 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v7) {
      goto LABEL_15;
    }
  }
  else if (v6)
  {
    goto LABEL_15;
  }
  uint64_t v9 = (char *)operator new(0x38uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)uint64_t v9 = &unk_1F2646018;
  *(_OWORD *)(v9 + 40) = 0u;
  unsigned int v10 = (std::__shared_weak_count *)a1[2];
  a1[2] = v9;
  *(_OWORD *)(v9 + 24) = 0u;
  a1[1] = v9 + 24;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *v5;
  unsigned int v12 = *(void **)(*v5 + 8);
  if ((unint64_t)v12 >= *(void *)(*v5 + 16))
  {
    int v14 = sub_1CD0CED30(*v5, v19, (uint64_t)v20);
  }
  else
  {
    *unsigned int v12 = v19;
    uint64_t v13 = (uint64_t)v20;
    v12[1] = v20;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    int v14 = v12 + 2;
  }
  *(void *)(v11 + 8) = v14;
LABEL_15:
  int v15 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return a1;
}

llvm::vfs::recursive_directory_iterator *llvm::vfs::recursive_directory_iterator::increment(llvm::vfs::recursive_directory_iterator *this, std::error_code *a2)
{
  uint64_t v2 = a2;
  uint64_t v32 = 0;
  size_t v33 = 0;
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  if (*((unsigned char *)v4 + 24))
  {
    *((unsigned char *)v4 + 24) = 0;
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)(v4[1] - 16);
  if (*(_DWORD *)(v5 + 32) == 3)
  {
    uint64_t v6 = *(void *)this;
    uint64_t v9 = *(void *)(v5 + 8);
    uint64_t v8 = v5 + 8;
    uint64_t v7 = v9;
    char v10 = *(unsigned char *)(v8 + 23);
    int v11 = v10;
    if (v10 >= 0) {
      uint64_t v7 = v8;
    }
    uint64_t v12 = *(void *)(v8 + 8);
    uint64_t v13 = v10 & 0x7F;
    if (v11 >= 0) {
      uint64_t v12 = v13;
    }
    __int16 v29 = 261;
    uint64_t v27 = v7;
    uint64_t v28 = v12;
    (*(void (**)(std::error_code **__return_ptr))(*(void *)v6 + 32))(&v30);
    if (sub_1CD065CEC((uint64_t *)&v30, &v32))
    {
      int v14 = v31;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_19;
    }
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = *(std::error_code ***)(v15 + 8);
    a2 = v30;
    if ((unint64_t)v16 >= *(void *)(v15 + 16))
    {
      uint64_t v18 = sub_1CD0CED30(*((void *)this + 1), (uint64_t)v30, (uint64_t)v31);
    }
    else
    {
      *uint64_t v16 = v30;
      uint64_t v17 = (uint64_t)v31;
      v16[1] = (std::error_code *)v31;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = v16 + 2;
    }
    *(void *)(v15 + 8) = v18;
    uint64_t v19 = v31;
    if (!v31) {
      goto LABEL_27;
    }
LABEL_25:
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, std::error_code *))v19->__on_zero_shared)(v19, a2);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_27;
  }
LABEL_20:
  while (1)
  {
    uint64_t v21 = *v4;
    uint64_t v20 = v4[1];
    if (v21 == v20) {
      break;
    }
    size_t v22 = sub_1CD06540C((void *)(v20 - 16), v2);
    BOOL v23 = sub_1CD065CEC(v22, &v32);
    uint64_t v24 = (void *)*((void *)this + 1);
    if (!v23)
    {
      if (*v24 != v24[1]) {
        goto LABEL_27;
      }
      break;
    }
    sub_1CC1CAA74((uint64_t)v24, v24[1] - 16);
LABEL_19:
    uint64_t v4 = (uint64_t *)*((void *)this + 1);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v19) {
    goto LABEL_25;
  }
LABEL_27:
  uint64_t v25 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, std::error_code *))v25->__on_zero_shared)(v25, a2);
    std::__shared_weak_count::__release_weak(v25);
  }
  return this;
}

void llvm::vfs::StatCacheFileSystem::status(llvm::vfs::StatCacheFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  v35[23] = *MEMORY[0x1E4F143B8];
  __s1 = v35;
  long long v34 = xmmword_1CFB31290;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&__s1);
  if (!*((unsigned char *)this + 56))
  {
    uint64_t v6 = v34;
    if ((void)v34)
    {
      uint64_t v7 = (unsigned __int8 *)__s1;
      do
      {
        int v8 = *v7;
        if ((v8 - 65) < 0x1A) {
          LOBYTE(v8) = v8 + 32;
        }
        *v7++ = v8;
        --v6;
      }
      while (v6);
    }
  }
  llvm::sys::path::remove_dots((unsigned __int8 **)&__s1, 0, 0);
  unint64_t v9 = v34;
  unint64_t v10 = *((void *)this + 5);
  if ((unint64_t)v34 < v10
    || (int v11 = (char *)__s1, v10) && memcmp(__s1, *((const void **)this + 4), *((void *)this + 5)))
  {
LABEL_10:
    (*(void (**)(void, const llvm::Twine *))(**((void **)this + 2) + 16))(*((void *)this + 2), a2);
    goto LABEL_11;
  }
  if (v9 >= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = v9;
  }
  uint64_t v13 = &v11[v12];
  size_t v14 = v9 - v12;
  uint64_t v15 = *((void *)this + 6);
  unsigned int v16 = sub_1CD0B03C8(&v11[v12], (uint64_t)&v11[v9]);
  sub_1CD858AA0((uint64_t)v31, v15, v13, v14, v16);
  if (v32)
  {
    if (*(_DWORD *)(v32 + 48)) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = *(void *)(v32 + 56) == 0;
    }
    if (!v17)
    {
      long long v18 = *(_OWORD *)(v32 + 16);
      v24[0] = *(_OWORD *)v32;
      v24[1] = v18;
      long long v19 = *(_OWORD *)(v32 + 48);
      _OWORD v24[2] = *(_OWORD *)(v32 + 32);
      void v24[3] = v19;
      llvm::vfs::Status::copyWithNewName((llvm::vfs::Status *)v24, a2, (uint64_t)&v25);
      *(unsigned char *)(a3 + 80) &= ~1u;
      *(_OWORD *)a3 = v25;
      *(void *)(a3 + 16) = v26;
      *(void *)&long long v25 = 0;
      *(_OWORD *)(a3 + 24) = v27;
      *(_OWORD *)(a3 + 40) = v28;
      *(_OWORD *)(a3 + 56) = v29;
      *(_WORD *)(a3 + 72) = v30;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::sys::path::begin((unint64_t)v13, v14, 0, (uint64_t)&v25);
    size_t v20 = *((void *)&v27 + 1);
    BOOL v21 = (void)v25 == (void)v13;
    if ((char *)v25 == v13 && *((void *)&v27 + 1) == v14)
    {
      BOOL v21 = 1;
      size_t v20 = v14;
    }
    else
    {
      while ((void)v27 != 2 || *v26 != 11822)
      {
        llvm::sys::path::const_iterator::operator++((uint64_t *)&v25);
        size_t v20 = *((void *)&v27 + 1);
        BOOL v21 = (void)v25 == (void)v13;
        if ((char *)v25 == v13 && *((void *)&v27 + 1) == v14)
        {
          size_t v20 = v14;
          BOOL v21 = 1;
          break;
        }
      }
    }
    if (!v21 || v20 != v14) {
      goto LABEL_10;
    }
  }
  *(unsigned char *)(a3 + 80) |= 1u;
  BOOL v23 = std::generic_category();
  *(void *)a3 = 2;
  *(void *)(a3 + 8) = v23;
LABEL_11:
  if (__s1 != v35) {
    free(__s1);
  }
}

void llvm::vfs::StatCacheFileSystem::StatCacheWriter::StatCacheWriter(uint64_t a1, const void *a2, size_t a3, uint64_t a4, int a5, uint64_t a6)
{
  char v7 = a5;
  v14[0] = a2;
  v14[1] = a3;
  if (!a5)
  {
    llvm::StringRef::lower((llvm::StringRef *)v14, (void *)a1);
    goto LABEL_14;
  }
  if (!a2)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    goto LABEL_14;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v12 = a3 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v11 = operator new(v12 + 1);
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = v13 | 0x8000000000000000;
    *(void *)a1 = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 23) = a3;
    int v11 = (void *)a1;
    if (!a3) {
      goto LABEL_13;
    }
  }
  memmove(v11, a2, a3);
LABEL_13:
  *((unsigned char *)v11 + a3) = 0;
LABEL_14:
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = a6;
  operator new();
}

void llvm::vfs::StatCacheFileSystem::StatCacheWriter::addEntry(const void **a1, char *a2, size_t a3, long long *a4)
{
  unint64_t v41 = a2;
  size_t v42 = a3;
  long long __p = 0;
  size_t v39 = 0;
  uint64_t v40 = 0;
  if (*((unsigned char *)a1 + 24))
  {
    size_t v6 = a3;
    p_p = a2;
  }
  else
  {
    llvm::StringRef::lower((llvm::StringRef *)&v41, &__p);
    if (v40 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (v40 >= 0) {
      size_t v6 = HIBYTE(v40) & 0x7F;
    }
    else {
      size_t v6 = v39;
    }
    unint64_t v41 = p_p;
    size_t v42 = v6;
  }
  char v8 = *((unsigned char *)a1 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    unint64_t v10 = a1;
  }
  else {
    unint64_t v10 = *a1;
  }
  size_t v11 = v8 & 0x7F;
  if (v9) {
    size_t v12 = (size_t)a1[1];
  }
  else {
    size_t v12 = v11;
  }
  if (v6 >= v12 && (!v12 || !memcmp(p_p, v10, v12)))
  {
    if (v6 >= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v6;
    }
    p_p += v13;
    v6 -= v13;
    unint64_t v41 = p_p;
    size_t v42 = v6;
  }
  if (!p_p)
  {
    long long v36 = 0uLL;
    unint64_t v37 = 0;
    goto LABEL_34;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v6 >= 0x17)
  {
    uint64_t v15 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v15 = v6 | 7;
    }
    uint64_t v16 = v15 + 1;
    size_t v14 = (long long *)operator new(v15 + 1);
    *((void *)&v36 + 1) = v6;
    unint64_t v37 = v16 | 0x8000000000000000;
    *(void *)&long long v36 = v14;
  }
  else
  {
    HIBYTE(v37) = v6;
    size_t v14 = &v36;
    if (!v6) {
      goto LABEL_33;
    }
  }
  memmove(v14, p_p, v6);
LABEL_33:
  *((unsigned char *)v14 + v6) = 0;
LABEL_34:
  BOOL v17 = operator new(0x28uLL);
  uint64_t v17[4] = v37;
  *((_OWORD *)v17 + 1) = v36;
  long long v18 = a1[6];
  void *v17 = v18;
  v17[1] = a1 + 6;
  v18[1] = v17;
  a1[6] = v17;
  a1[8] = (char *)a1[8] + 1;
  long long v19 = (unsigned int *)a1[5];
  unsigned int v21 = *v19;
  unsigned int v20 = v19[1];
  char v22 = *((unsigned char *)v17 + 39);
  if (v22 >= 0) {
    BOOL v23 = v17 + 2;
  }
  else {
    BOOL v23 = (void *)v17[2];
  }
  if (v22 >= 0) {
    uint64_t v24 = v22 & 0x7F;
  }
  else {
    uint64_t v24 = v17[3];
  }
  v19[1] = v20 + 1;
  if (3 * v21 <= 4 * (v20 + 1))
  {
    sub_1CD0CEE98(v19, 2 * v21);
    unsigned int v21 = *v19;
  }
  uint64_t v25 = *((void *)v19 + 13);
  *((void *)v19 + 11) += 96;
  uint64_t v26 = *((void *)v19 + 1);
  if (((v26 + 7) & 0xFFFFFFFFFFFFFFF8) - v26 + 96 > *((void *)v19 + 2) - v26)
  {
    unsigned int v33 = v19[8] >> 7;
    if (v33 >= 0x1E) {
      LOBYTE(v33) = 30;
    }
    uint64_t v34 = 4096 << v33;
    unint64_t v27 = (unint64_t)operator new(4096 << v33, (std::align_val_t)8uLL);
    unsigned int v35 = v19[8];
    if (v35 >= v19[9]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)v19 + 3) + 8 * v35) = v27;
    ++v19[8];
    *((void *)v19 + 2) = v27 + v34;
  }
  else
  {
    unint64_t v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)v19 + 1) = v27 + 96;
  *(void *)unint64_t v27 = v23;
  *(void *)(v27 + 8) = v24;
  long long v28 = *a4;
  long long v29 = a4[1];
  long long v30 = a4[3];
  *(_OWORD *)(v27 + 48) = a4[2];
  *(_OWORD *)(v27 + 64) = v30;
  *(_OWORD *)(v27 + 16) = v28;
  *(_OWORD *)(v27 + 32) = v29;
  *(void *)(v27 + 80) = 0;
  int v31 = sub_1CD0B03C8(v23, (uint64_t)v23 + v24);
  *(_DWORD *)(v27 + 88) = v31;
  uint64_t v32 = v25 + 16 * (v31 & (v21 - 1));
  *(void *)(v27 + 80) = *(void *)(v32 + 8);
  ++*(_DWORD *)(v32 + 4);
  *(void *)(v32 + 8) = v27;
  if (SHIBYTE(v40) < 0) {
    operator delete(__p);
  }
}

void llvm::vfs::StatCacheFileSystem::StatCacheWriter::~StatCacheWriter(llvm::vfs::StatCacheFileSystem::StatCacheWriter *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    goto LABEL_14;
  }
  free(*(void **)(v2 + 104));
  uint64_t v3 = *(unsigned int *)(v2 + 80);
  if (v3)
  {
    uint64_t v15 = *(uint64_t **)(v2 + 72);
    uint64_t v16 = 16 * v3;
    do
    {
      uint64_t v17 = *v15;
      v15 += 2;
      MEMORY[0x1D25D9CD0](v17, 8);
      v16 -= 16;
    }
    while (v16);
  }
  uint64_t v4 = *(unsigned int *)(v2 + 32);
  *(_DWORD *)(v2 + 80) = 0;
  if (v4)
  {
    uint64_t v5 = *(void **)(v2 + 24);
    *(void *)(v2 + 88) = 0;
    uint64_t v6 = *v5 + 4096;
    *(void *)(v2 + 8) = *v5;
    *(void *)(v2 + 16) = v6;
    if (v4 != 1)
    {
      size_t v12 = v5 + 1;
      uint64_t v13 = 8 * v4 - 8;
      do
      {
        uint64_t v14 = *v12++;
        MEMORY[0x1D25D9CD0](v14, 8);
        v13 -= 8;
      }
      while (v13);
      uint64_t v5 = *(void **)(v2 + 24);
    }
    *(_DWORD *)(v2 + 32) = 1;
    MEMORY[0x1D25D9CD0](*v5, 8);
    uint64_t v7 = *(unsigned int *)(v2 + 80);
    char v8 = *(uint64_t **)(v2 + 72);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v9 = 16 * v7;
    do
    {
      uint64_t v10 = *v8;
      v8 += 2;
      MEMORY[0x1D25D9CD0](v10, 8);
      v9 -= 16;
    }
    while (v9);
  }
  char v8 = *(uint64_t **)(v2 + 72);
LABEL_9:
  if (v8 != (uint64_t *)(v2 + 88)) {
    free(v8);
  }
  size_t v11 = *(void **)(v2 + 24);
  if (v11 != (void *)(v2 + 40)) {
    free(v11);
  }
  MEMORY[0x1D25D9CE0](v2, 0x10B0C40A77D50BBLL);
LABEL_14:
  sub_1CC9A755C((char *)this + 48);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t llvm::vfs::StatCacheFileSystem::StatCacheWriter::writeStatCache(llvm::vfs::StatCacheFileSystem::StatCacheWriter *this, llvm::raw_fd_ostream *a2)
{
  *(_DWORD *)long long v36 = 1;
  if (*((unsigned char *)this + 24)) {
    uint64_t v4 = "Stat";
  }
  else {
    uint64_t v4 = "STAT";
  }
  uint64_t v5 = llvm::raw_ostream::write(a2, v4, 4uLL);
  uint64_t v6 = llvm::raw_ostream::write(v5, byte_1CFB312C0, 4uLL);
  uint64_t v7 = llvm::raw_ostream::write(v6, (const char *)this + 32, 8uLL);
  llvm::raw_ostream::write(v7, v36, 4uLL);
  if (*((char *)this + 23) < 0)
  {
    uint64_t v9 = *(const char **)this;
    uint64_t v8 = *((void *)this + 1);
  }
  else
  {
    uint64_t v8 = *((unsigned __int8 *)this + 23);
    uint64_t v9 = (const char *)this;
  }
  llvm::raw_ostream::write(a2, v9, v8 + 1);
  uint64_t v10 = (unsigned int *)*((void *)this + 5);
  unsigned int v11 = v10[1];
  if (v11 >= 3)
  {
    unint64_t v13 = (4 * v11 / 6uLL) | (4 * v11 / 3uLL);
    unint64_t v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
    unsigned int v12 = (((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8)) + 1;
  }
  else
  {
    unsigned int v12 = 1;
  }
  if (v12 == *v10 || (sub_1CD0CEE98(v10, v12), *v10))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *((void *)v10 + 13) + 16 * v15;
      uint64_t v17 = (uint64_t *)(v16 + 8);
      if (*(void *)(v16 + 8))
      {
        *(_DWORD *)uint64_t v16 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(void *)a2 + 80))(a2)
                       + *((_DWORD *)a2 + 8)
                       - *((_DWORD *)a2 + 4);
        *(_WORD *)unint64_t v37 = *(_DWORD *)(v16 + 4);
        llvm::raw_ostream::write(a2, v37, 2uLL);
        for (uint64_t i = *v17; i; uint64_t i = *(void *)(i + 80))
        {
          *(_DWORD *)unint64_t v37 = *(_DWORD *)(i + 88);
          long long v19 = llvm::raw_ostream::write(a2, v37, 4uLL);
          size_t v20 = *(void *)(i + 8);
          *(_WORD *)unint64_t v37 = *(void *)(i + 8);
          unsigned int v21 = llvm::raw_ostream::write(v19, v37, 2uLL);
          strcpy(v37, "@");
          char v22 = llvm::raw_ostream::write(v21, v37, 2uLL);
          BOOL v23 = llvm::raw_ostream::write(v22, *(const char **)i, v20);
          llvm::raw_ostream::write(v23, (const char *)(i + 16), 0x40uLL);
        }
      }
      ++v15;
    }
    while (v15 < *v10);
  }
  uint64_t v24 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(void *)a2 + 80))(a2);
  uint64_t v25 = *((void *)a2 + 4) - *((void *)a2 + 2) + v24;
  uint64_t v26 = (*((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 4) + v24);
  uint64_t v27 = (v26 + 3) & 0x1FFFFFFFCLL;
  int v28 = v27 - v25;
  if (v27 != v25)
  {
    uint64_t v29 = v26 - v27;
    do
    {
      v37[0] = 0;
      llvm::raw_ostream::write(a2, v37, 1uLL);
    }
    while (!__CFADD__(v29++, 1));
  }
  *(_DWORD *)unint64_t v37 = *v10;
  int v31 = llvm::raw_ostream::write(a2, v37, 4uLL);
  *(_DWORD *)unint64_t v37 = v10[1];
  llvm::raw_ostream::write(v31, v37, 4uLL);
  if (*v10)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    do
    {
      *(_DWORD *)unint64_t v37 = *(_DWORD *)(*((void *)v10 + 13) + v32);
      llvm::raw_ostream::write(a2, v37, 4uLL);
      ++v33;
      v32 += 16;
    }
    while (v33 < *v10);
  }
  *(_DWORD *)unint64_t v37 = v28 + v25;
  int v34 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(void *)a2 + 80))(a2)
      + *((_DWORD *)a2 + 8)
      - *((_DWORD *)a2 + 4);
  llvm::raw_fd_ostream::seek(a2, 4);
  llvm::raw_ostream::write(a2, v37, 4uLL);
  return v34;
}

uint64_t llvm::vfs::StatCacheFileSystem::updateValidityToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, &v3, 8, 8);
}

uint64_t sub_1CD0C639C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 304))
  {
    sub_1CC1B8518(a1, a2);
    sub_1CC1B8518(a1 + 152, a2 + 152);
  }
  else
  {
    *(void *)a1 = a1 + 24;
    long long v4 = xmmword_1CFAC3020;
    *(_OWORD *)(a1 + 8) = xmmword_1CFAC3020;
    if (*(void *)(a2 + 8))
    {
      sub_1CC1B8518(a1, a2);
      long long v4 = xmmword_1CFAC3020;
    }
    *(void *)(a1 + 152) = a1 + 176;
    *(_OWORD *)(a1 + 160) = v4;
    if (*(void *)(a2 + 160)) {
      sub_1CC1B8518(a1 + 152, a2 + 152);
    }
    *(unsigned char *)(a1 + 304) = 1;
  }
  return a1;
}

uint64_t sub_1CD0C6448(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645AF8;
  if (*(unsigned char *)(a1 + 320))
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2 != (void *)(a1 + 192)) {
      free(v2);
    }
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3 != (void *)(a1 + 40)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }
  return a1;
}

void sub_1CD0C64BC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645AF8;
  if (*(unsigned char *)(a1 + 320))
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2 != (void *)(a1 + 192)) {
      free(v2);
    }
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3 != (void *)(a1 + 40)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD0C6550(uint64_t a1@<X0>, const llvm::sys::fs::file_status *a2@<X1>, uint64_t a3@<X8>)
{
  v19[32] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = v19;
  long long v18 = xmmword_1CD96DBF0;
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0xFFFFLL;
  __int16 v15 = 0;
  sub_1CD0C730C((uint64_t)&v7, a1, (uint64_t)a2, (uint64_t)&v17);
  uint64_t v5 = llvm::sys::fs::status((llvm::sys::fs *)&v7, (const llvm::Twine *)v13, (llvm::sys::fs::file_status *)1);
  if (v5)
  {
    *(unsigned char *)(a3 + 80) |= 1u;
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v6;
  }
  else
  {
    llvm::vfs::Status::copyWithNewName((llvm::vfs::Status *)v13, a2, (uint64_t)&v7);
    *(unsigned char *)(a3 + 80) &= ~1u;
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 24) = v9;
    *(_OWORD *)(a3 + 40) = v10;
    *(_OWORD *)(a3 + 56) = v11;
    *(_WORD *)(a3 + 72) = v12;
  }
  if (v17 != v19) {
    free(v17);
  }
}

void sub_1CD0C6678(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v16[32] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  long long v15 = xmmword_1CD96DBF0;
  long long v11 = v13;
  long long v12 = xmmword_1CD96DBF0;
  sub_1CD0C730C((uint64_t)&v8, a1, a2, (uint64_t)&v11);
  llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)&v8, 0, &v14, (uint64_t)&v9);
  if ((v10 & 1) == 0) {
    operator new();
  }
  long long v4 = v9;
  long long v9 = 0;
  long long v7 = v4;
  uint64_t v5 = llvm::errorToErrorCode(&v7);
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 8))(v7);
  }
  if (v9) {
    (*(void (**)(char *))(*(void *)v9 + 8))(v9);
  }
  if (v11 != v13) {
    free(v11);
  }
  if (v14 != v16) {
    free(v14);
  }
}

void sub_1CD0C692C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = v27;
  long long v26 = xmmword_1CFAC3020;
  sub_1CD0C730C((uint64_t)v23, a1, a2, (uint64_t)&v25);
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F2645BC8;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((_DWORD *)v6 + 14) = 9;
  *((void *)v6 + 3) = &unk_1F2645C00;
  long long v7 = v6 + 64;
  uint64_t v8 = (uint64_t *)sub_1CD501E54((uint64_t)(v6 + 64), v23, a3, 1);
  uint64_t v29 = 1;
  long long v28 = 0uLL;
  char v9 = sub_1CC22AEBC(v8, (uint64_t *)&v28);
  char v10 = v9;
  long long v11 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v10) {
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)v7;
  if (*(char *)(*(void *)v7 + 31) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(v12 + 8), *(void *)(v12 + 16));
    uint64_t v12 = *(void *)v7;
  }
  else
  {
    long long v13 = *(_OWORD *)(v12 + 8);
    __p[2] = *(void **)(v12 + 24);
    *(_OWORD *)long long __p = v13;
  }
  int v14 = *(_DWORD *)(v12 + 32);
  if (v14 == 9)
  {
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v12 + 8), (uint64_t)&v28);
    if (v31) {
      int v14 = 9;
    }
    else {
      int v14 = v30;
    }
  }
  long long v15 = __p[0];
  *(void **)&long long v28 = __p[1];
  *(void **)((char *)&v28 + 7) = *(void **)((char *)&__p[1] + 7);
  char v16 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  if (v6[55] < 0)
  {
    operator delete(*((void **)v6 + 4));
    int v18 = SHIBYTE(__p[2]);
    uint64_t v19 = v28;
    *((void *)v6 + 4) = v15;
    *((void *)v6 + 5) = v19;
    *(void *)(v6 + 47) = *(void *)((char *)&v28 + 7);
    v6[55] = v16;
    *((_DWORD *)v6 + 14) = v14;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v17 = v28;
    *((void *)v6 + 4) = v15;
    *((void *)v6 + 5) = v17;
    *(void *)(v6 + 47) = *(void *)((char *)&v28 + 7);
    v6[55] = v16;
    *((_DWORD *)v6 + 14) = v14;
  }
LABEL_17:
  *a4 = v6 + 24;
  a4[1] = v6;
  char v20 = v6[55];
  int v21 = v20;
  uint64_t v22 = v20 & 0x7F;
  if (v21 < 0) {
    uint64_t v22 = *((void *)v6 + 5);
  }
  if (!v22) {
    sub_1CC22C6DC(a4);
  }
  if (v25 != v27) {
    free(v25);
  }
}

unint64_t sub_1CD0C6BC0(uint64_t a1, llvm::sys::fs *this)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 320))
  {
    unint64_t is_directory = llvm::sys::fs::set_current_path(this, this);
    unsigned int v5 = is_directory;
    return is_directory & 0xFFFFFFFF00000000 | v5;
  }
  uint64_t v22 = v24;
  long long v23 = xmmword_1CFAC3020;
  uint64_t v19 = v21;
  long long v20 = xmmword_1CFAC3020;
  char v16 = v18;
  long long v17 = xmmword_1CFAC3020;
  sub_1CD0C730C((uint64_t)&v9, a1, (uint64_t)this, (uint64_t)&v16);
  llvm::Twine::toVector((uint64_t)&v9, (uint64_t)&v22);
  char v8 = 0;
  __int16 v12 = 261;
  char v9 = v22;
  *(void *)&long long v10 = v23;
  unint64_t is_directory = llvm::sys::fs::is_directory((llvm::sys::fs *)&v9, (const llvm::Twine *)&v8, v3);
  if (!is_directory)
  {
    if (!v8)
    {
      unint64_t is_directory = 20;
      std::generic_category();
      unsigned int v5 = 20;
      goto LABEL_6;
    }
    __int16 v12 = 261;
    char v9 = v22;
    *(void *)&long long v10 = v23;
    unint64_t is_directory = llvm::sys::fs::real_path((unsigned __int8 *)&v9, &v19, 0);
    if (!is_directory)
    {
      char v9 = &v11;
      long long v7 = xmmword_1CFAC3020;
      long long v10 = xmmword_1CFAC3020;
      if ((void)v23)
      {
        sub_1CC223970((uint64_t)&v9, (uint64_t)&v22);
        long long v7 = xmmword_1CFAC3020;
      }
      long long v13 = v15;
      long long v14 = v7;
      if ((void)v20) {
        sub_1CC223970((uint64_t)&v13, (uint64_t)&v19);
      }
      sub_1CD0C639C(a1 + 16, (uint64_t)&v9);
      if (v13 != v15) {
        free(v13);
      }
      if (v9 != &v11) {
        free(v9);
      }
      std::system_category();
      unsigned int v5 = 0;
      goto LABEL_6;
    }
  }
  unsigned int v5 = is_directory;
LABEL_6:
  if (v16 != v18) {
    free(v16);
  }
  if (v19 != v21) {
    free(v19);
  }
  if (v22 != v24) {
    free(v22);
  }
  return is_directory & 0xFFFFFFFF00000000 | v5;
}

void sub_1CD0C6DF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 320))
  {
    size_t v3 = *(void *)(a1 + 24);
    if (v3 <= 0x7FFFFFFFFFFFFFF7)
    {
      long long v4 = *(const void **)(a1 + 16);
      if (v3 >= 0x17)
      {
        uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v3 | 7) != 0x17) {
          uint64_t v8 = v3 | 7;
        }
        uint64_t v9 = v8 + 1;
        unsigned int v5 = operator new(v8 + 1);
        *(void *)&__dst[8] = v3;
        *(void *)&__dst[16] = v9 | 0x8000000000000000;
        *(void *)long long __dst = v5;
      }
      else
      {
        __dst[23] = *(void *)(a1 + 24);
        unsigned int v5 = __dst;
        if (!v3) {
          goto LABEL_12;
        }
      }
      memmove(v5, v4, v3);
LABEL_12:
      v5[v3] = 0;
      *(unsigned char *)(a2 + 24) &= ~1u;
      *(_OWORD *)a2 = *(_OWORD *)__dst;
      *(void *)(a2 + 16) = *(void *)&__dst[16];
      return;
    }
LABEL_25:
    abort();
  }
  *(void *)long long __dst = v18;
  *(_OWORD *)&__dst[8] = xmmword_1CFAC3020;
  uint64_t v6 = llvm::sys::fs::current_path((uint64_t)__dst);
  if (v6)
  {
    *(unsigned char *)(a2 + 24) |= 1u;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    goto LABEL_22;
  }
  size_t v10 = *(void *)&__dst[8];
  if (*(void *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL) {
    goto LABEL_25;
  }
  uint64_t v11 = *(const void **)__dst;
  if (*(void *)&__dst[8] >= 0x17uLL)
  {
    uint64_t v13 = (*(void *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*(void *)&__dst[8] | 7) != 0x17) {
      uint64_t v13 = *(void *)&__dst[8] | 7;
    }
    uint64_t v14 = v13 + 1;
    __int16 v12 = (long long *)operator new(v13 + 1);
    *((void *)&v15 + 1) = v10;
    unint64_t v16 = v14 | 0x8000000000000000;
    *(void *)&long long v15 = v12;
  }
  else
  {
    HIBYTE(v16) = __dst[8];
    __int16 v12 = &v15;
    if (!*(void *)&__dst[8]) {
      goto LABEL_21;
    }
  }
  memmove(v12, v11, v10);
LABEL_21:
  *((unsigned char *)v12 + v10) = 0;
  *(unsigned char *)(a2 + 24) &= ~1u;
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = v16;
LABEL_22:
  if (*(void **)__dst != v18) {
    free(*(void **)__dst);
  }
}

unint64_t sub_1CD0C6FD8(uint64_t a1, uint64_t a2, void *a3)
{
  v9[32] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v9;
  long long v8 = xmmword_1CD96DBF0;
  sub_1CD0C730C((uint64_t)v6, a1, a2, (uint64_t)&v7);
  unint64_t v4 = llvm::sys::fs::real_path(v6, a3, 0);
  if (v7 != v9) {
    free(v7);
  }
  return v4;
}

uint64_t sub_1CD0C7090(uint64_t a1, uint64_t a2, const llvm::Twine *a3)
{
  v10[32] = *MEMORY[0x1E4F143B8];
  long long v8 = v10;
  long long v9 = xmmword_1CD96DBF0;
  sub_1CD0C730C((uint64_t)v7, a1, a2, (uint64_t)&v8);
  uint64_t is_local = llvm::sys::fs::is_local((llvm::sys::fs *)v7, a3, v4);
  if (v8 != v10) {
    free(v8);
  }
  return is_local;
}

llvm::raw_ostream *sub_1CD0C7144(llvm::raw_ostream *result, llvm::raw_ostream *this, uint64_t a3, int a4)
{
  uint64_t v5 = (uint64_t)result;
  if (a4)
  {
    int v6 = a4;
    do
    {
      uint64_t v7 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v7 > 1uLL)
      {
        *uint64_t v7 = 8224;
        *((void *)this + 4) += 2;
      }
      else
      {
        double result = llvm::raw_ostream::write(this, "  ", 2uLL);
      }
      --v6;
    }
    while (v6);
  }
  long long v8 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v8 > 0x14uLL)
  {
    qmemcpy(v8, "RealFileSystem using ", 21);
    uint64_t v9 = *((void *)this + 4) + 21;
    *((void *)this + 4) = v9;
  }
  else
  {
    double result = llvm::raw_ostream::write(this, "RealFileSystem using ", 0x15uLL);
    uint64_t v9 = *((void *)this + 4);
  }
  unint64_t v10 = *((void *)this + 3) - v9;
  if (*(unsigned char *)(v5 + 320))
  {
    if (v10 <= 2)
    {
      uint64_t v11 = "own";
      __int16 v12 = this;
      size_t v13 = 3;
LABEL_15:
      double result = llvm::raw_ostream::write(v12, v11, v13);
      goto LABEL_16;
    }
    *(unsigned char *)(v9 + 2) = 110;
    *(_WORD *)uint64_t v9 = 30575;
    uint64_t v15 = *((void *)this + 4) + 3;
  }
  else
  {
    if (v10 <= 6)
    {
      uint64_t v11 = "process";
      __int16 v12 = this;
      size_t v13 = 7;
      goto LABEL_15;
    }
    *(_DWORD *)(v9 + 3) = 1936942435;
    *(_DWORD *)uint64_t v9 = 1668248176;
    uint64_t v15 = *((void *)this + 4) + 7;
  }
  *((void *)this + 4) = v15;
LABEL_16:
  uint64_t v14 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v14) > 4)
  {
    *(unsigned char *)(v14 + 4) = 10;
    *(_DWORD *)uint64_t v14 = 1146569504;
    *((void *)this + 4) += 5;
  }
  else
  {
    return llvm::raw_ostream::write(this, " CWD\n", 5uLL);
  }
  return result;
}

__n128 sub_1CD0C730C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 320))
  {
    llvm::Twine::toVector(a3, a4);
    __int16 v12 = 261;
    uint64_t v7 = *(void *)(a2 + 176);
    v11[0] = *(void *)(a2 + 168);
    v11[1] = v7;
    llvm::sys::fs::make_absolute((uint64_t)v11, (char **)a4);
    *(_WORD *)(a1 + 32) = 261;
    uint64_t v9 = *(void *)(a4 + 8);
    *(void *)a1 = *(void *)a4;
    *(void *)(a1 + 8) = v9;
  }
  else
  {
    __n128 result = *(__n128 *)a3;
    long long v10 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = *(void *)(a3 + 32);
  }
  return result;
}

uint64_t sub_1CD0C7394(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645B78;
  uint64_t v2 = (llvm::sys::Process *)*(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = -1;
  llvm::sys::Process::SafelyCloseFileDescriptor(v2);
  *(_DWORD *)(a1 + 8) = -1;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD0C7408(uint64_t a1)
{
  sub_1CD0C7394(a1);

  JUMPOUT(0x1D25D9CE0);
}

__n128 sub_1CD0C7440@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 16;
  if (!*(_DWORD *)(a1 + 80))
  {
    memset(v15, 0, sizeof(v15));
    uint64_t v16 = 0xFFFFLL;
    __int16 v17 = 0;
    uint64_t v18 = 0;
    int v5 = fstat(*(_DWORD *)(a1 + 8), &v19);
    uint64_t v6 = sub_1CD0E6A50(v5, &v19.st_dev, (uint64_t)v15);
    if (v6)
    {
      *(unsigned char *)(a2 + 80) |= 1u;
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      return result;
    }
    char v9 = *(unsigned char *)(a1 + 39);
    BOOL v10 = v9 < 0;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v9 >= 0) {
      uint64_t v11 = v4;
    }
    uint64_t v12 = v9 & 0x7F;
    if (v10) {
      uint64_t v12 = *(void *)(a1 + 24);
    }
    __int16 v14 = 261;
    v13[0] = v11;
    v13[1] = v12;
    llvm::vfs::Status::copyWithNewName((llvm::vfs::Status *)v15, (const llvm::sys::fs::file_status *)v13, (uint64_t)&v19);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)v4);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&v19.st_dev;
    *(void *)(v4 + 16) = *(void *)&v19.st_uid;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&v19.st_rdev;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)&v19.st_atimespec.tv_nsec;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)&v19.st_mtimespec.tv_nsec;
    *(_WORD *)(a1 + 88) = v19.st_ctimespec.tv_nsec;
  }
  *(unsigned char *)(a2 + 80) &= ~1u;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1CB8BDF7C(a2, *(const void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = *(void *)(v4 + 16);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 56) = result;
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 88);
  return result;
}

double sub_1CD0C75A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = (const void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    unint64_t v4 = *(void *)(a1 + 104);
    if (v4)
    {
      sub_1CB8BDF7C((uint64_t)&v14, *v3, v4);
      goto LABEL_23;
    }
LABEL_6:
    char v5 = *(unsigned char *)(a1 + 39);
    if (v5 >= 0) {
      uint64_t v6 = (const void *)(a1 + 16);
    }
    else {
      uint64_t v6 = *(const void **)(a1 + 16);
    }
    if (!v6)
    {
      long long v14 = 0uLL;
      unint64_t v15 = 0;
      goto LABEL_23;
    }
    int v7 = v5;
    size_t v8 = v5 & 0x7F;
    if (v7 >= 0) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = *(void *)(a1 + 24);
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v9 >= 0x17)
    {
      uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v11 = v9 | 7;
      }
      uint64_t v12 = v11 + 1;
      BOOL v10 = (long long *)operator new(v11 + 1);
      *((void *)&v14 + 1) = v9;
      unint64_t v15 = v12 | 0x8000000000000000;
      *(void *)&long long v14 = v10;
    }
    else
    {
      HIBYTE(v15) = v9;
      BOOL v10 = &v14;
      if (!v9) {
        goto LABEL_22;
      }
    }
    memmove(v10, v6, v9);
LABEL_22:
    *((unsigned char *)v10 + v9) = 0;
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 119)) {
    goto LABEL_6;
  }
  long long v14 = *(_OWORD *)v3;
  unint64_t v15 = *(void *)(a1 + 112);
LABEL_23:
  *(unsigned char *)(a2 + 24) &= ~1u;
  double result = *(double *)&v14;
  *(_OWORD *)a2 = v14;
  *(void *)(a2 + 16) = v15;
  return result;
}

void sub_1CD0C76E0(llvm::WritableMemoryBuffer *this@<X2>, uint64_t a2@<X0>, const void ***a3@<X1>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
}

uint64_t sub_1CD0C76F8(uint64_t a1)
{
  uint64_t v2 = (llvm::sys::Process *)*(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t result = llvm::sys::Process::SafelyCloseFileDescriptor(v2);
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

void sub_1CD0C772C(uint64_t a1, llvm::Twine *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  llvm::Twine::str(this, __p);
  unint64_t v4 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)unint64_t v4 = *(_OWORD *)__p;
  *(void *)(a1 + 112) = v20;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
  char v5 = v26;
  if ((v26 & 1) == 0)
  {
    long long v12 = v21;
    uint64_t v6 = v22;
    uint64_t v7 = v24;
    uint64_t v8 = v23;
    uint64_t v9 = v25;
    llvm::Twine::str(this, &v13);
    long long v15 = v12;
    *(void *)&long long v16 = v6;
    *((void *)&v16 + 1) = v8;
    *(void *)&long long v17 = v7;
    *((void *)&v17 + 1) = v9;
    __int16 v18 = 0;
    BOOL v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)BOOL v10 = v13;
    *(void *)(a1 + 32) = v14;
    long long v11 = v16;
    *(_OWORD *)(a1 + 40) = v15;
    *(_OWORD *)(a1 + 56) = v11;
    *(_OWORD *)(a1 + 72) = v17;
    *(_WORD *)(a1 + 88) = v18;
    char v5 = v26;
  }
  if ((v5 & 1) == 0 && SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CD0C78A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CD0C78C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0C7914(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1CD0C793C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645C00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD0C79F0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645C00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD0C7AC4(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::system_category();
  uint64_t v2 = (uint64_t *)(a1 + 40);
  unint64_t v3 = llvm::sys::fs::detail::directory_iterator_increment(*(DIR ***)(a1 + 40));
  __int16 v18 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = 1;
  int v4 = sub_1CC22AEBC((uint64_t *)(a1 + 40), &v17);
  if (v4)
  {
    char v5 = 0;
    char v6 = 0;
    *(void *)((char *)v20 + 7) = 0;
    v20[0] = 0;
    int v7 = 9;
  }
  else
  {
    uint64_t v8 = *v2;
    if (*(char *)(*v2 + 31) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, *(const void **)(v8 + 8), *(void *)(v8 + 16));
      uint64_t v8 = *v2;
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 + 8);
      __p[2] = *(void **)(v8 + 24);
      *(_OWORD *)long long __p = v9;
    }
    int v7 = *(_DWORD *)(v8 + 32);
    if (v7 == 9)
    {
      llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v8 + 8), (uint64_t)v20);
      if (v22) {
        int v7 = 9;
      }
      else {
        int v7 = v21;
      }
    }
    char v5 = __p[0];
    v20[0] = __p[1];
    *(void **)((char *)v20 + 7) = *(void **)((char *)&__p[1] + 7);
    char v6 = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    BOOL v11 = SHIBYTE(__p[2]) < 0;
    uint64_t v12 = v20[0];
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 23) = *(void *)((char *)v20 + 7);
    *(unsigned char *)(a1 + 31) = v6;
    *(_DWORD *)(a1 + 32) = v7;
    if (v11) {
      char v13 = v4;
    }
    else {
      char v13 = 1;
    }
    if ((v13 & 1) == 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v10 = v20[0];
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 23) = *(void *)((char *)v20 + 7);
    *(unsigned char *)(a1 + 31) = v6;
    *(_DWORD *)(a1 + 32) = v7;
  }
  uint64_t v14 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return v3;
}

uint64_t sub_1CD0C7CAC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645C88;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD0C7CFC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645C88;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD0C7D6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  __int16 v6 = 260;
  v5[0] = a1 + 16;
  (*(void (**)(long long *__return_ptr, uint64_t, void *))(*(void *)v3 + 16))(&v7, v3, v5);
  *(unsigned char *)(a2 + 80) &= ~1u;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 40) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 72) = v12;
  return result;
}

void *sub_1CD0C7E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 32))(v12);
  if (v13)
  {
    double result = (void *)v12[0];
    uint64_t v8 = v12[1];
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)(a2 + 8) = v8;
  }
  else
  {
    uint64_t v4 = *(void *)(v12[0] + 8);
    uint64_t v3 = *(void *)(v12[0] + 16);
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v12[0] + 16))(v12[0]);
    __int16 v10 = 261;
    v9[0] = v5;
    v9[1] = v6;
    long long v11 = v9;
    double result = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v11);
    *double result = &unk_1F2644E70;
    result[1] = v4;
    result[2] = v3;
    *(unsigned char *)(a2 + 16) &= ~1u;
  }
  *(void *)a2 = result;
  return result;
}

uint64_t sub_1CD0C7F38()
{
  return 0;
}

double sub_1CD0C7F58(uint64_t a1, llvm::Twine *this)
{
  llvm::Twine::str(this, &v5);
  uint64_t v3 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v3 = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

BOOL sub_1CD0C7FB0(llvm ****a1, uint64_t a2, const char **a3, uint64_t *a4)
{
  if (*(_DWORD *)(a2 + 32) == 1) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    *a3 = llvm::yaml::ScalarNode::getValue(v4, a4);
    a3[1] = v6;
  }
  else
  {
    uint64_t v8 = "expected string";
    __int16 v9 = 259;
    llvm::yaml::Stream::printError(*a1, a2, (llvm::Twine *)&v8, 0);
  }
  return v4 != 0;
}

uint64_t sub_1CD0C8028(void *a1, llvm ****a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (!a3 || *(_DWORD *)(a3 + 32) != 4)
  {
    unint64_t v121 = "expected mapping node for file or directory entry";
    v123[4] = 259;
    uint64_t result = llvm::yaml::Stream::printError(*a2, a3, (llvm::Twine *)&v121, 0);
    *a1 = 0;
    return result;
  }
  v124[0] = "name";
  v124[1] = 4;
  __int16 v125 = 1;
  uint64_t v126 = "type";
  uint64_t v127 = 4;
  __int16 v128 = 1;
  size_t v129 = "contents";
  uint64_t v130 = 8;
  __int16 v131 = 0;
  v132 = "external-contents";
  uint64_t v133 = 17;
  __int16 v134 = 0;
  v135 = "use-external-name";
  uint64_t v136 = 17;
  __int16 v137 = 0;
  int v98 = 8;
  __int16 v10 = (char *)operator new(0xC0uLL, (std::align_val_t)8uLL);
  uint64_t v11 = 0;
  v97[0] = v10;
  v97[1] = 0;
  do
  {
    *(_OWORD *)&v10[v11] = xmmword_1CFAC4A20;
    v11 += 24;
  }
  while (v11 != 192);
  for (uint64_t i = 0; i != 15; i += 3)
    sub_1CD857464((uint64_t)&v121, (uint64_t)v97, (const void **)&v124[i], &v124[i + 2]);
  int64x2_t v95 = 0uLL;
  unint64_t v96 = 0;
  char v13 = v123;
  unint64_t v121 = v123;
  long long __len = xmmword_1CD96DBF0;
  uint64_t v14 = v120;
  int v118 = v120;
  long long v119 = xmmword_1CD96DBF0;
  *(unsigned char *)(a3 + 76) = 0;
  llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)a3);
  long long v15 = *(llvm::yaml::KeyValueNode **)(a3 + 80);
  if (!v15)
  {
    long long v67 = *a2;
    if (*((unsigned char *)**a2 + 74)) {
      goto LABEL_142;
    }
LABEL_149:
    long long __p = "missing key 'contents' or 'external-contents'";
    LOWORD(v112) = 259;
LABEL_150:
    uint64_t v70 = a3;
    goto LABEL_151;
  }
  int v86 = 0;
  int v16 = 0;
  int v88 = 0;
  __int16 v87 = a4;
  uint64_t v84 = 0;
  uint64_t v85 = a4 + 72;
  do
  {
    long long v90 = 0uLL;
    long long __p = &__p_8[16];
    *(_OWORD *)__p_8 = xmmword_1CD96DBF0;
    uint64_t Key = llvm::yaml::KeyValueNode::getKey(v15);
    if (!sub_1CD0C7FB0(a2, Key, (const char **)&v90, (uint64_t *)&__p)) {
      goto LABEL_10;
    }
    int v83 = v16;
    uint64_t v19 = llvm::yaml::KeyValueNode::getKey(v15);
    long long v20 = v90;
    if ((sub_1CD856F1C(a2, v19, (const void *)v90, *((const void **)&v90 + 1), (uint64_t)v97) & 1) == 0)
    {
      *a1 = 0;
      int v18 = 1;
      goto LABEL_12;
    }
    size_t v109 = 0;
    __src = 0;
    if (*((void *)&v20 + 1) == 17)
    {
      if (*(void *)v20 == 0x6C616E7265747865
        && *(void *)(v20 + 8) == 0x746E65746E6F632DLL
        && *(unsigned char *)(v20 + 16) == 115)
      {
        if (v88) {
          goto LABEL_105;
        }
        uint64_t Value = llvm::yaml::KeyValueNode::getValue(v15);
        if (sub_1CD0C7FB0(a2, Value, (const char **)&__src, (uint64_t *)&__p))
        {
          size_t __n = (char *)&v106;
          __n_8[1] = 256;
          if (*((unsigned char *)v87 + 97))
          {
            char v26 = *((unsigned char *)v87 + 95);
            BOOL v27 = v26 < 0;
            if (v26 >= 0) {
              long long v28 = v85;
            }
            else {
              long long v28 = (const void *)*((void *)v87 + 9);
            }
            size_t v29 = v26 & 0x7F;
            if (v27) {
              size_t v30 = *((void *)v87 + 10);
            }
            else {
              size_t v30 = v29;
            }
            __n_8[0] = 0;
            if (v30 >= 0x101) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            size_t v31 = 0;
            if (v30)
            {
              memcpy(&v106, v28, v30);
              size_t v31 = __n_8[0];
            }
            __n_8[0] = v31 + v30;
            LOWORD(v101) = 261;
            v99[0] = __src;
            v99[1] = (void *)v109;
            LOWORD(v92) = 257;
            __int16 v103 = 257;
            __int16 v94 = 257;
            llvm::sys::path::append(&__n, 0, (const char **)v99, (void **)&v91, (uint64_t)v102, (uint64_t)&v93);
            unint64_t v32 = __n_8[0];
          }
          else
          {
            size_t v57 = 0;
            size_t v58 = v109;
            __n_8[0] = 0;
            if (v109 >= 0x101) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            if (v109)
            {
              memcpy(__n, __src, v109);
              size_t v57 = __n_8[0];
            }
            unint64_t v32 = v57 + v58;
            __n_8[0] = v57 + v58;
          }
          sub_1CD0C3460((uint64_t)v99, (unsigned __int8 *)__n, v32);
          sub_1CC1B8518((uint64_t)&__n, (uint64_t)v99);
          if (v99[0] != &v100) {
            free(v99[0]);
          }
          char v59 = __n;
          size_t v60 = __n_8[0];
          *(void *)&long long __len = 0;
          if (*((void *)&__len + 1) < __n_8[0]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v61 = 0;
          if (__n_8[0])
          {
            memcpy(v121, __n, __n_8[0]);
            uint64_t v61 = __len;
            char v59 = __n;
          }
          *(void *)&long long __len = v61 + v60;
          if (v59 != (char *)&v106) {
            free(v59);
          }
          int v18 = 0;
        }
        else
        {
          *a1 = 0;
          int v18 = 1;
        }
        int v51 = 2;
        goto LABEL_104;
      }
    }
    else
    {
      if (*((void *)&v20 + 1) != 8)
      {
        if (*((void *)&v20 + 1) == 4)
        {
          if (*(_DWORD *)v20 == 1701667182)
          {
            uint64_t v52 = llvm::yaml::KeyValueNode::getValue(v15);
            if (!sub_1CD0C7FB0(a2, v52, (const char **)&__src, (uint64_t *)&__p)) {
              goto LABEL_10;
            }
            uint64_t v84 = llvm::yaml::KeyValueNode::getValue(v15);
            sub_1CD0C3460((uint64_t)&__n, (unsigned __int8 *)__src, v109);
            BOOL v53 = __n;
            size_t v54 = __n_8[0];
            *(void *)&long long v119 = 0;
            if (*((void *)&v119 + 1) < __n_8[0]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            uint64_t v55 = 0;
            if (__n_8[0])
            {
              memcpy(v118, __n, __n_8[0]);
              uint64_t v55 = v119;
              BOOL v53 = __n;
            }
            *(void *)&long long v119 = v55 + v54;
            if (v53 != (char *)&v106) {
              free(v53);
            }
LABEL_120:
            int v18 = 0;
            goto LABEL_12;
          }
          if (*(_DWORD *)v20 == 1701869940)
          {
            uint64_t v21 = llvm::yaml::KeyValueNode::getValue(v15);
            if (!sub_1CD0C7FB0(a2, v21, (const char **)&__src, (uint64_t *)&__p)) {
              goto LABEL_10;
            }
            if (v109 == 15)
            {
              if (*(void *)__src != 0x726F746365726964 || *(void *)((char *)__src + 7) != 0x70616D65722D7972)
              {
LABEL_122:
                uint64_t v62 = llvm::yaml::KeyValueNode::getValue(v15);
                char v63 = "unknown value for 'type'";
                goto LABEL_106;
              }
              int v18 = 0;
              int v22 = 1;
LABEL_113:
              int v86 = v22;
              goto LABEL_12;
            }
            if (v109 != 9)
            {
              if (v109 != 4 || *(_DWORD *)__src != 1701603686) {
                goto LABEL_122;
              }
              int v18 = 0;
              int v22 = 2;
              goto LABEL_113;
            }
            if (*(void *)__src != 0x726F746365726964 || *((unsigned char *)__src + 8) != 121) {
              goto LABEL_122;
            }
            int v86 = 0;
            goto LABEL_120;
          }
        }
        goto LABEL_87;
      }
      if (*(void *)v20 == 0x73746E65746E6F63)
      {
        if (v88)
        {
LABEL_105:
          uint64_t v62 = llvm::yaml::KeyValueNode::getKey(v15);
          char v63 = "entry already has 'contents' or 'external-contents'";
LABEL_106:
          size_t __n = (char *)v63;
          LOWORD(v107) = 259;
          llvm::yaml::Stream::printError(*a2, v62, (llvm::Twine *)&__n, 0);
LABEL_10:
          *a1 = 0;
        }
        else
        {
          uint64_t v33 = llvm::yaml::KeyValueNode::getValue(v15);
          if (v33)
          {
            int v34 = (llvm::yaml::SequenceNode *)v33;
            if (*(_DWORD *)(v33 + 32) == 5)
            {
              *(unsigned char *)(v33 + 76) = 0;
              llvm::yaml::SequenceNode::increment((llvm::yaml::SequenceNode *)v33);
              if (*((void *)v34 + 10))
              {
                uint64_t v89 = v34;
                unint64_t v81 = a1;
                uint64_t v82 = v13;
                while (1)
                {
                  unsigned int v35 = v14;
                  sub_1CD0C8028(v99, a2);
                  long long v36 = v99[0];
                  if (!v99[0]) {
                    break;
                  }
                  unint64_t v37 = a1;
                  BOOL v38 = (void *)v95.i64[1];
                  size_t v39 = v96;
                  if (v95.i64[1] >= (unint64_t)v96)
                  {
                    uint64_t v40 = (void *)v95.i64[0];
                    uint64_t v41 = (v95.i64[1] - v95.i64[0]) >> 3;
                    unint64_t v42 = v41 + 1;
                    if ((unint64_t)(v41 + 1) >> 61) {
                      abort();
                    }
                    if ((uint64_t)&v96[-v95.i64[0]] >> 2 > v42) {
                      unint64_t v42 = (uint64_t)&v96[-v95.i64[0]] >> 2;
                    }
                    if ((unint64_t)&v96[-v95.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v43 = v42;
                    }
                    *(void *)&long long v107 = &v96;
                    if (v43)
                    {
                      if (v43 >> 61) {
                        sub_1CB833614();
                      }
                      uint64_t v44 = (char *)operator new(8 * v43);
                    }
                    else
                    {
                      uint64_t v44 = 0;
                    }
                    BOOL v45 = &v44[8 * v41];
                    v99[0] = 0;
                    *(void *)BOOL v45 = v36;
                    char v46 = v45 + 8;
                    int v47 = &v44[8 * v43];
                    uint64_t v106 = v47;
                    __n_8[1] = (size_t)(v45 + 8);
                    if (v38 == v40)
                    {
                      unint64_t v50 = 0;
                      int64x2_t v49 = vdupq_n_s64((unint64_t)v38);
                      uint64_t v14 = v35;
                    }
                    else
                    {
                      uint64_t v14 = v35;
                      do
                      {
                        uint64_t v48 = *--v38;
                        *BOOL v38 = 0;
                        *((void *)v45 - 1) = v48;
                        v45 -= 8;
                      }
                      while (v38 != v40);
                      int64x2_t v49 = v95;
                      int v47 = v106;
                      char v46 = (void *)__n_8[1];
                      size_t v39 = v96;
                      unint64_t v50 = v99[0];
                    }
                    v95.i64[0] = (uint64_t)v45;
                    v95.i64[1] = (uint64_t)v46;
                    *(int64x2_t *)__n_8 = v49;
                    unint64_t v96 = v47;
                    uint64_t v106 = v39;
                    size_t __n = (char *)v49.i64[0];
                    sub_1CD0C9AE0((uint64_t)&__n);
                    v95.i64[1] = (uint64_t)v46;
                    a1 = v81;
                    char v13 = v82;
                    int v16 = v83;
                    if (v50) {
                      (*(void (**)(void *))(*(void *)v50 + 8))(v50);
                    }
                  }
                  else
                  {
                    *(void *)v95.i64[1] = v99[0];
                    v95.i64[1] = (uint64_t)(v38 + 1);
                    uint64_t v14 = v35;
                    a1 = v37;
                    int v16 = v83;
                  }
                  llvm::yaml::SequenceNode::increment(v89);
                  if (!*((void *)v89 + 10)) {
                    goto LABEL_78;
                  }
                }
                *a1 = 0;
                int v88 = 1;
                int v18 = 1;
                uint64_t v14 = v35;
                goto LABEL_12;
              }
LABEL_78:
              int v18 = 0;
              int v51 = 1;
LABEL_104:
              int v88 = v51;
              goto LABEL_12;
            }
          }
          uint64_t v66 = llvm::yaml::KeyValueNode::getValue(v15);
          size_t __n = "expected array";
          LOWORD(v107) = 259;
          llvm::yaml::Stream::printError(*a2, v66, (llvm::Twine *)&__n, 0);
          *a1 = 0;
          int v88 = 1;
        }
        int v18 = 1;
        goto LABEL_12;
      }
    }
LABEL_87:
    LOBYTE(__n) = 0;
    uint64_t v56 = llvm::yaml::KeyValueNode::getValue(v15);
    if (!sub_1CD857024(a2, v56, &__n)) {
      goto LABEL_10;
    }
    int v18 = 0;
    if ((_BYTE)__n) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
LABEL_12:
    if (__p != &__p_8[16]) {
      free(__p);
    }
    if (v18) {
      goto LABEL_143;
    }
    llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)a3);
    long long v15 = *(llvm::yaml::KeyValueNode **)(a3 + 80);
  }
  while (v15);
  long long v67 = *a2;
  if (*((unsigned char *)**a2 + 74)) {
    goto LABEL_142;
  }
  if (!v88) {
    goto LABEL_149;
  }
  if ((sub_1CD857328(a2, a3, (uint64_t)v97) & 1) == 0) {
    goto LABEL_142;
  }
  if (!v86 && v16)
  {
    unint64_t v80 = "'use-external-name' is not supported for 'directory' entries";
LABEL_174:
    long long __p = (char *)v80;
    LOWORD(v112) = 259;
    long long v67 = *a2;
    goto LABEL_150;
  }
  if (v86 == 1 && v88 == 1)
  {
    unint64_t v80 = "'contents' is not supported for 'directory-remap' entries";
    goto LABEL_174;
  }
  if (!a5)
  {
    unsigned int v68 = 0;
    goto LABEL_153;
  }
  LOWORD(v112) = 261;
  long long __p = (char *)v118;
  *(void *)__p_8 = v119;
  unsigned int v68 = 1;
  if ((llvm::sys::path::is_absolute((const char **)&__p, (const llvm::Twine *)1) & 1) != 0
    || (LOWORD(v112) = 261,
        long long __p = (char *)v118,
        *(void *)__p_8 = v119,
        unsigned int v68 = 3,
        (llvm::sys::path::is_absolute((const char **)&__p, (const llvm::Twine *)3) & 1) != 0))
  {
LABEL_153:
    char v71 = (const char *)v118;
    unint64_t v72 = v119;
    llvm::sys::path::root_path((unint64_t)v118, v119, v68);
    while (v72 > v73)
    {
      int v74 = v71[v72 - 1];
      BOOL v76 = v68 > 1 && v74 == 92;
      if (v74 != 47 && !v76) {
        break;
      }
      if (v72 >= v72 - 1) {
        --v72;
      }
    }
    *(_OWORD *)&__p_8[8] = 0uLL;
    long long __p = (char *)v71;
    *(void *)__p_8 = v72;
    unint64_t v112 = v72;
    LODWORD(v113) = v68;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__p);
    *a1 = 0;
    if (v86)
    {
      if (v86 != 1) {
        operator new();
      }
      operator new();
    }
    LOWORD(v101) = 257;
    unint64_t v78 = atomic_fetch_add(&dword_1EA61F09C, 1u) + 1;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v79 = 1000 * std::chrono::system_clock::now().__d_.__rep_;
    llvm::Twine::str((llvm::Twine *)v99, &__p);
    *(void *)&__p_8[16] = -1;
    unint64_t v112 = v78;
    uint64_t v115 = 0;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v113 = v79;
    uint64_t v114 = 0;
    uint64_t v116 = 0x1FF00000003;
    __int16 v117 = 0;
    operator new();
  }
  if (!llvm::sys::fs::make_absolute((uint64_t)&v118))
  {
    LOWORD(v112) = 261;
    long long __p = (char *)v118;
    *(void *)__p_8 = v119;
    if (llvm::sys::path::is_absolute((const char **)&__p, (const llvm::Twine *)1)) {
      unsigned int v68 = 1;
    }
    else {
      unsigned int v68 = 3;
    }
    goto LABEL_153;
  }
  long long __p = "entry with relative path at the root level is not discoverable";
  LOWORD(v112) = 259;
  long long v67 = *a2;
  uint64_t v70 = v84;
LABEL_151:
  llvm::yaml::Stream::printError(v67, v70, (llvm::Twine *)&__p, 0);
LABEL_142:
  *a1 = 0;
LABEL_143:
  if (v118 != v14) {
    free(v118);
  }
  if (v121 != v13) {
    free(v121);
  }
  unint64_t v121 = &v95;
  sub_1CD0C9B5C((void ***)&v121);
  return MEMORY[0x1D25D9CD0](v97[0], 8);
}

uint64_t sub_1CD0C94A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  char v5 = *(unsigned char *)(a2 + 39);
  int v6 = v5;
  if (v5 >= 0) {
    long long v7 = (void *)(a2 + 16);
  }
  else {
    long long v7 = *(void **)(a2 + 16);
  }
  size_t v8 = v5 & 0x7F;
  if (v6 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(a2 + 24);
  }
  int v10 = *(_DWORD *)(a2 + 8);
  switch(v10)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      uint64_t v11 = result;
      if (v9)
      {
        uint64_t result = sub_1CD8551F0(result, v7, v9, a3);
        uint64_t v3 = result;
      }
      __int16 v12 = *(uint64_t **)(a2 + 40);
      char v13 = *(uint64_t **)(a2 + 48);
      while (v12 != v13)
      {
        uint64_t v14 = *v12++;
        uint64_t result = sub_1CD0C94A4(v11, v14, v3);
      }
      break;
  }
  return result;
}

char *sub_1CD0C99D4(char **a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    size_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    size_t v8 = 0;
  }
  size_t v9 = &v8[8 * v2];
  int v10 = &v8[8 * v7];
  *(void *)size_t v9 = *a2;
  uint64_t v11 = v9 + 8;
  *a2 = 0;
  v19.i64[1] = (uint64_t)(v9 + 8);
  long long v20 = v10;
  char v13 = *a1;
  __int16 v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      uint64_t v14 = *((void *)v12 - 1);
      v12 -= 8;
      *(void *)__int16 v12 = 0;
      *((void *)v9 - 1) = v14;
      v9 -= 8;
    }
    while (v12 != v13);
    int64x2_t v15 = *(int64x2_t *)a1;
    uint64_t v11 = (char *)v19.i64[1];
    int v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v19 = v15;
  int v16 = a1[2];
  a1[2] = v10;
  long long v20 = v16;
  uint64_t v18 = v15.i64[0];
  sub_1CD0C9AE0((uint64_t)&v18);
  return v11;
}

uint64_t sub_1CD0C9AE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD0C9B5C(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CD0C9C04()
{
}

llvm::raw_ostream *sub_1CD0C9DB4(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  if (v5)
  {
    uint64_t v8 = *(void *)(*v4 + 16 * v5 - 8);
    if (a3 >= v8 + 1) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = a3;
    }
    uint64_t v6 = &a2[v9];
    uint64_t v7 = a3 - v9;
  }
  if (v5 >= *(_DWORD *)(a1 + 20)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v10 = *(void *)(a1 + 8) + 16 * v5;
  *(void *)uint64_t v10 = a2;
  *(void *)(v10 + 8) = a3;
  LODWORD(v10) = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v10;
  int v11 = 4 * v10;
  __int16 v12 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, 4 * (int)v10);
  char v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    *char v13 = 2683;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "{\n", 2uLL);
  }
  unsigned int v14 = v11 | 2;
  int64x2_t v15 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  int v16 = (void *)*((void *)v15 + 4);
  if (*((void *)v15 + 3) - (void)v16 > 0x14uLL)
  {
    qmemcpy(v16, "'type': 'directory',\n", 21);
    *((void *)v15 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v15, "'type': 'directory',\n", 0x15uLL);
  }
  uint64_t v17 = *(llvm::raw_ostream **)a1;
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  uint64_t v18 = *((void *)v17 + 4);
  if ((unint64_t)(*((void *)v17 + 3) - v18) > 8)
  {
    *(unsigned char *)(v18 + 8) = 34;
    *(void *)uint64_t v18 = *(void *)"'name': \"";
    *((void *)v17 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v17, "'name': \"", 9uLL);
  }
  llvm::yaml::escape(v6, v7, 1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(v17, (const char *)p_p, size);
  uint64_t v21 = *((void *)v17 + 4);
  if ((unint64_t)(*((void *)v17 + 3) - v21) > 2)
  {
    *(unsigned char *)(v21 + 2) = 10;
    *(_WORD *)uint64_t v21 = 11298;
    *((void *)v17 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\",\n", 3uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t result = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  uint64_t v23 = (void *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v23 <= 0xDuLL) {
    return llvm::raw_ostream::write(result, "'contents': [\n", 0xEuLL);
  }
  qmemcpy(v23, "'contents': [\n", 14);
  *((void *)result + 4) += 14;
  return result;
}

llvm::raw_ostream *sub_1CD0CA044(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  int v10 = 4 * *(_DWORD *)(a1 + 16);
  unsigned int v11 = v10 + 4;
  __int16 v12 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v10 + 4);
  char v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    *char v13 = 2683;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "{\n", 2uLL);
  }
  unsigned int v14 = v10 + 6;
  int64x2_t v15 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  int v16 = (_OWORD *)*((void *)v15 + 4);
  if (*((void *)v15 + 3) - (void)v16 > 0xFuLL)
  {
    *int v16 = *(_OWORD *)"'type': 'file',\n";
    *((void *)v15 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v15, "'type': 'file',\n", 0x10uLL);
  }
  uint64_t v17 = *(llvm::raw_ostream **)a1;
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  uint64_t v18 = *((void *)v17 + 4);
  if ((unint64_t)(*((void *)v17 + 3) - v18) > 8)
  {
    *(unsigned char *)(v18 + 8) = 34;
    *(void *)uint64_t v18 = *(void *)"'name': \"";
    *((void *)v17 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v17, "'name': \"", 9uLL);
  }
  llvm::yaml::escape(a2, a3, 1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(v17, (const char *)p_p, size);
  uint64_t v21 = *((void *)v17 + 4);
  if ((unint64_t)(*((void *)v17 + 3) - v21) > 2)
  {
    *(unsigned char *)(v21 + 2) = 10;
    *(_WORD *)uint64_t v21 = 11298;
    *((void *)v17 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\",\n", 3uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v22 = *(llvm::raw_ostream **)a1;
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  uint64_t v23 = (void *)*((void *)v22 + 4);
  if (*((void *)v22 + 3) - (void)v23 > 0x15uLL)
  {
    qmemcpy(v23, "'external-contents': \"", 22);
    *((void *)v22 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v22, "'external-contents': \"", 0x16uLL);
  }
  llvm::yaml::escape(a4, a5, 1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &__p;
  }
  else {
    uint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v25 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t v25 = __p.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(v22, (const char *)v24, v25);
  char v26 = (_WORD *)*((void *)v22 + 4);
  if (*((void *)v22 + 3) - (void)v26 > 1uLL)
  {
    *char v26 = 2594;
    *((void *)v22 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v22, "\"\n", 2uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t result = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v11);
  long long v28 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v28) {
    return llvm::raw_ostream::write(result, "}", 1uLL);
  }
  *long long v28 = 125;
  ++*((void *)result + 4);
  return result;
}

llvm::raw_ostream *sub_1CD0CA34C(uint64_t a1)
{
  unsigned int v2 = 4 * *(_DWORD *)(a1 + 16);
  uint64_t v3 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v2 | 2);
  uint64_t v4 = (_WORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v4 > 1uLL)
  {
    _WORD *v4 = 2653;
    *((void *)v3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v3, "]\n", 2uLL);
  }
  uint64_t result = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v2);
  uint64_t v6 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v6)
  {
    uint64_t result = llvm::raw_ostream::write(result, "}", 1uLL);
  }
  else
  {
    *uint64_t v6 = 125;
    ++*((void *)result + 4);
  }
  --*(_DWORD *)(a1 + 16);
  return result;
}

void sub_1CD0CA408(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(8 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 8 * v9;
    __int16 v12 = v7;
    char v13 = *(void **)a1;
    do
    {
      *v12++ = *v13;
      *v13++ = 0;
      v11 -= 8;
    }
    while (v11);
    unsigned int v14 = (char *)(v8 - 1);
    do
    {
      int64x2_t v15 = *(atomic_uint **)&v14[v10];
      if (v15 && atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
      }
      v10 -= 8;
    }
    while (v10);
    uint64_t v8 = *(void **)a1;
  }
  if (v8 != (void *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CD0CA538(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CD0CA558(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645D78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CA5AC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1CD0CA5D4(uint64_t a1, int a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 184);
  uint64_t v33 = (void *)(a1 + 40);
  uint64_t v5 = (std::string *)(a1 + 8);
  uint64_t v6 = (llvm::StringMapImpl *)(a1 + 200);
  while (1)
  {
    LODWORD(v34) = 0;
    unsigned int v35 = std::system_category();
    if ((a2 & 1) == 0) {
      sub_1CD06540C(v4, &v34);
    }
    if (v34) {
      goto LABEL_29;
    }
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    BOOL v7 = sub_1CD065CEC(v4, &v36);
    BOOL v8 = v7;
    uint64_t v9 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8) {
        goto LABEL_29;
      }
LABEL_8:
      while (1)
      {
        uint64_t v10 = *(unsigned int *)(a1 + 48);
        if (!v10) {
          break;
        }
        uint64_t v11 = *v33 + 16 * v10;
        uint64_t v13 = *(void *)(v11 - 16);
        uint64_t v12 = *(void *)(v11 - 8);
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v14 = *(std::__shared_weak_count **)(a1 + 192);
        *(void *)(a1 + 184) = v13;
        *(void *)(a1 + 192) = v12;
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        sub_1CD858068((uint64_t)v33);
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        BOOL v15 = sub_1CD065CEC(v4, &v36);
        BOOL v16 = v15;
        uint64_t v17 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          if (!v16) {
            break;
          }
        }
        else if (!v15)
        {
          break;
        }
      }
      if (a2)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        BOOL v18 = sub_1CD065CEC(v4, &v36);
        BOOL v19 = v18;
        long long v20 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          if (v19) {
            goto LABEL_23;
          }
        }
        else if (v18)
        {
LABEL_23:
          uint64_t v21 = std::generic_category();
          uint64_t v22 = 2;
LABEL_28:
          uint64_t v34 = v22;
          unsigned int v35 = v21;
          goto LABEL_29;
        }
      }
      uint64_t v21 = std::system_category();
      uint64_t v22 = 0;
      goto LABEL_28;
    }
    if (v7) {
      goto LABEL_8;
    }
LABEL_29:
    uint64_t v23 = v34;
    if (v34) {
      break;
    }
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    BOOL v24 = sub_1CD065CEC(v4, &v36);
    size_t v25 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    if (v24) {
      break;
    }
    uint64_t v26 = *(void *)(a1 + 184);
    std::string::operator=(v5, (const std::string *)(v26 + 8));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v26 + 32);
    char v27 = *(unsigned char *)(a1 + 31);
    BOOL v28 = v27 < 0;
    uint64_t v29 = *(void *)(a1 + 8);
    if (v27 >= 0) {
      uint64_t v29 = (uint64_t)v5;
    }
    size_t v30 = (std::__shared_weak_count *)(v27 & 0x7F);
    if (v28) {
      size_t v30 = *(std::__shared_weak_count **)(a1 + 16);
    }
    BOOL v38 = 0;
    size_t v39 = 0;
    uint64_t v36 = v29;
    unint64_t v37 = v30;
    uint64_t v40 = v30;
    int v41 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&v36);
    sub_1CC0D7F54(v6, v38, v39);
    if (v31) {
      return v23;
    }
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(v5->__r_.__value_.__l.__data_);
  }
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  *(_DWORD *)(a1 + 32) = 9;
  return v23;
}

uint64_t sub_1CD0CA91C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645DB0;
  sub_1CC0D7CD8(a1 + 200);
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 192);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_1CD8580F8((char **)(a1 + 40));
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD0CA9DC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645DB0;
  sub_1CC0D7CD8(a1 + 200);
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 192);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_1CD8580F8((char **)(a1 + 40));
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CAABC(uint64_t a1)
{
  return sub_1CD0CA5D4(a1, 0);
}

void sub_1CD0CAAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  void v8[2] = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  long long v7 = *(_OWORD *)(a2 + 64);
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  long long v11 = v7;
  if (v6) {
    uint64_t v3 = *(void *)(v6 + 16) - *(void *)(v6 + 8);
  }
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v8, v3, (uint64_t)__p);
  if (v13 == 3) {
    operator new();
  }
  operator new();
}

void sub_1CD0CACCC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  long long v8 = *(_OWORD *)(a2 + 64);
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v5, *(void *)(a1 + 8), (uint64_t)&__p);
  operator new();
}

void sub_1CD0CAEBC(uint64_t a1)
{
  sub_1CD85842C(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD0CAEF4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = result;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)result + 136))
  {
    uint64_t v4 = (void *)result[5];
    uint64_t v5 = result[16];
    char v6 = *((unsigned char *)result + 63);
    int v7 = v6;
    if (v6 >= 0) {
      uint64_t v4 = result + 5;
    }
    uint64_t v8 = result[6];
    uint64_t v9 = v6 & 0x7F;
    if (v7 >= 0) {
      uint64_t v8 = v9;
    }
    BOOL v18 = v4;
    uint64_t v19 = v8;
    uint64_t v10 = *(void *)(v5 + 24);
    if (!v10)
    {
      sub_1CB920400();
      sub_1CD0CB07C(v16, v17);
    }
    uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)v10 + 48))(v20);
    *((unsigned char *)v2 + 136) = 1;
    char v11 = v21;
    if (v21)
    {
      uint64_t v13 = v20[1];
      v2[18] = v20[0];
      v2[19] = v13;
    }
    else
    {
      uint64_t v12 = v20[0];
      v20[0] = 0;
      uint64_t result = (void *)v2[15];
      v2[15] = v12;
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        char v11 = v21;
      }
      if ((v11 & 1) == 0)
      {
        uint64_t result = (void *)v20[0];
        v20[0] = 0;
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
    }
  }
  if (*((_DWORD *)v2 + 36))
  {
    uint64_t v14 = v2[18];
    uint64_t v15 = v2[19];
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)(a2 + 8) = v15;
  }
  else
  {
    uint64_t v14 = v2[15];
    *(unsigned char *)(a2 + 16) &= ~1u;
  }
  *(void *)a2 = v14;
  return result;
}

void sub_1CD0CB07C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  void v8[2] = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  long long v7 = *(_OWORD *)(a2 + 64);
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  long long v11 = v7;
  if (v6) {
    uint64_t v3 = *(void *)(v6 + 16) - *(void *)(v6 + 8);
  }
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v8, v3, (uint64_t)__p);
  if (v13 == 3) {
    operator new();
  }
  operator new();
}

void sub_1CD0CB284(uint64_t a1, void *a2)
{
  uint64_t v3 = (const void *)a2[2];
  size_t v2 = a2[3];
  a2[7] = 0;
  if (!v3)
  {
    long long __dst = 0;
    size_t v8 = 0;
    unint64_t v9 = 0;
    goto LABEL_12;
  }
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = operator new(v5 + 1);
    size_t v8 = v2;
    unint64_t v9 = v6 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v2;
    p_dst = &__dst;
    if (!v2) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, v3, v2);
LABEL_11:
  *((unsigned char *)p_dst + v2) = 0;
LABEL_12:
  operator new();
}

uint64_t sub_1CD0CB4B0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645C58;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD0CB500(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645C58;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CB570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
}

void sub_1CD0CB598(size_t __len@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v5 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      uint64_t v7 = (__len & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v7 = __len | 7;
    }
    p_b = (std::string *)operator new(v7 + 1);
    __b.__r_.__value_.__l.__size_ = v5;
    __b.__r_.__value_.__r.__words[2] = v7 - 0x7FFFFFFFFFFFFFFFLL;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((unsigned char *)&__b.__r_.__value_.__s + 23) = __len;
  p_b = &__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, v5);
  p_b->__r_.__value_.__s.__data_[v5] = 0;
  size_t v8 = std::string::append(&__b, "HardLink to -> ");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 40) + 24))(__p);
  if (v14 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v11 = v14 & 0x7F;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v16, (const std::string::value_type *)v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
}

void sub_1CD0CB6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v4;
  void v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v8 = v6;
  uint64_t v9 = v5;
  long long v10 = *(_OWORD *)(a2 + 64);
  if (v5) {
    uint64_t v3 = *(void *)(v5 + 16) - *(void *)(v5 + 8);
  }
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v7, v3, (uint64_t)&__p);
  operator new();
}

uint64_t sub_1CD0CB9F8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645E78;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = &unk_1F2645C58;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD0CBA84(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645E78;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = &unk_1F2645C58;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

__n128 sub_1CD0CBB30@<Q0>(llvm::Twine *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  __n128 v9 = *(__n128 *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 128);
  llvm::Twine::str(this, (void *)a3);
  __n128 result = v9;
  *(__n128 *)(a3 + 24) = v9;
  *(void *)(a3 + 40) = v4;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = v5;
  *(void *)(a3 + 64) = v7;
  *(_WORD *)(a3 + 72) = 0;
  return result;
}

void sub_1CD0CBBA4(size_t __len@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v5 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      uint64_t v7 = (__len & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v7 = __len | 7;
    }
    p_b = (std::string *)operator new(v7 + 1);
    __b.__r_.__value_.__l.__size_ = v5;
    __b.__r_.__value_.__r.__words[2] = v7 - 0x7FFFFFFFFFFFFFFFLL;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((unsigned char *)&__b.__r_.__value_.__s + 23) = __len;
  p_b = &__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, v5);
  p_b->__r_.__value_.__s.__data_[v5] = 0;
  uint64_t v8 = std::string::append(&__b, "SymbolicLink to -> ");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = *(const std::string::value_type **)(a2 + 40);
  uint64_t v11 = a2 + 40;
  long long v10 = v12;
  char v13 = *(unsigned char *)(v11 + 23);
  int v14 = v13;
  if (v13 >= 0) {
    uint64_t v15 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v15 = v10;
  }
  std::string::size_type v16 = v13 & 0x7F;
  if (v14 >= 0) {
    std::string::size_type v17 = v16;
  }
  else {
    std::string::size_type v17 = *(void *)(v11 + 8);
  }
  BOOL v18 = std::string::append(&v20, v15, v17);
  *a3 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
}

void sub_1CD0CBCC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CD0CBCE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CBD3C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1CD0CBD64(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645EE0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD0CBDE0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645EE0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CBE7C(uint64_t a1)
{
  char v1 = *(void **)(a1 + 40);
  do
  {
    *(void *)(a1 + 40) = ++v1;
    if (*v1) {
      BOOL v2 = *v1 == -8;
    }
    else {
      BOOL v2 = 1;
    }
  }
  while (v2);
  sub_1CD0CBEBC(a1);
  std::system_category();
  return 0;
}

void sub_1CD0CBEBC(uint64_t a1)
{
  v38[32] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a1 + 48))
  {
    char v3 = *(unsigned char *)(a1 + 79);
    if (v3 >= 0) {
      uint64_t v4 = (const void *)(a1 + 56);
    }
    else {
      uint64_t v4 = *(const void **)(a1 + 56);
    }
    if (v3 >= 0) {
      size_t v5 = v3 & 0x7F;
    }
    else {
      size_t v5 = *(void *)(a1 + 64);
    }
    __src = v38;
    long long __len = xmmword_1CD96DBF0;
    if (v5 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v6 = 0;
    if (v5)
    {
      memcpy(v38, v4, v5);
      uint64_t v6 = __len;
      uint64_t v2 = *(void *)(a1 + 40);
    }
    *(void *)&long long __len = v6 + v5;
    uint64_t v7 = *(void *)(*(void *)v2 + 8);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v8 = v7 + 16;
    uint64_t v9 = v10;
    char v11 = *(unsigned char *)(v8 + 23);
    int v12 = v11;
    if (v11 >= 0) {
      uint64_t v9 = v8;
    }
    uint64_t v13 = *(void *)(v8 + 8);
    uint64_t v14 = v11 & 0x7F;
    if (v12 >= 0) {
      uint64_t v13 = v14;
    }
    __int16 v35 = 261;
    *(void *)&long long v34 = v9;
    *((void *)&v34 + 1) = v13;
    __int16 v33 = 257;
    __int16 v31 = 257;
    __int16 v29 = 257;
    llvm::sys::path::append(&__src, 0, (const char **)&v34, &v32, (uint64_t)v30, (uint64_t)v28);
    uint64_t v15 = *(int *)(*(void *)(**(void **)(a1 + 40) + 8) + 8);
    if (v15 > 4) {
      int v16 = 9;
    }
    else {
      int v16 = dword_1CFB312C8[v15];
    }
    size_t v18 = __len;
    if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v19 = __src;
    if ((unint64_t)__len >= 0x17)
    {
      uint64_t v21 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17) {
        uint64_t v21 = __len | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(void *)&long long v27 = v18;
      *((void *)&v27 + 1) = v22 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v27) = __len;
      p_dst = &__dst;
      if (!(void)__len) {
        goto LABEL_29;
      }
    }
    memmove(p_dst, v19, v18);
LABEL_29:
    *((unsigned char *)p_dst + v18) = 0;
    uint64_t v23 = __dst;
    *(void *)&long long v34 = v27;
    *(void *)((char *)&v34 + 7) = *(void *)((char *)&v27 + 7);
    char v24 = HIBYTE(v27);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    uint64_t v25 = v34;
    *(void *)(a1 + 8) = v23;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + 23) = *(void *)((char *)&v34 + 7);
    *(unsigned char *)(a1 + 31) = v24;
    *(_DWORD *)(a1 + 32) = v16;
    if (__src != v38) {
      free(__src);
    }
    return;
  }
  std::string::size_type v17 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v17);
  }
  std::__shared_weak_count *v17 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
}

void sub_1CD0CC140(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CD0CC160(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2645F08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CC1B4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1CD0CC1DC(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 72);
  size_t v5 = *(void **)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  char v6 = *(unsigned char *)(v3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (void *)v3;
  }
  else {
    uint64_t v7 = v4;
  }
  unint64_t v8 = *(void *)(v3 + 8);
  if (v6 >= 0) {
    unint64_t v9 = v6 & 0x7F;
  }
  else {
    unint64_t v9 = v8;
  }
  __src = v7;
  *(void *)&long long __len = v9;
  uint64_t first_of = llvm::StringRef::find_first_of(&__src, "/\\"", 2, 0);
  if (first_of == -1)
  {
    int v11 = 0;
  }
  else if (*((unsigned char *)v7 + first_of) == 47)
  {
    int v11 = 1;
  }
  else
  {
    int v11 = 3;
  }
  v40[0] = 0;
  __src = v7;
  long long __len = v9;
  v40[1] = v9;
  int v41 = v11;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)&__src);
  uint64_t v12 = *((void *)&__len + 1);
  uint64_t v13 = v40[0];
  char v14 = *(unsigned char *)(a1 + 63);
  if (v14 >= 0) {
    uint64_t v15 = (const void *)(a1 + 40);
  }
  else {
    uint64_t v15 = *(const void **)(a1 + 40);
  }
  if (v14 >= 0) {
    size_t v16 = v14 & 0x7F;
  }
  else {
    size_t v16 = *(void *)(a1 + 48);
  }
  __src = v40;
  long long __len = xmmword_1CFAC3020;
  if (v16 >= 0x81) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v17 = 0;
  if (v16)
  {
    memcpy(v40, v15, v16);
    uint64_t v17 = __len;
  }
  *(void *)&long long __len = v17 + v16;
  size_t v18 = (llvm::Twine *)*(unsigned int *)(a1 + 64);
  __int16 v37 = 261;
  *(void *)&long long v36 = v12;
  *((void *)&v36 + 1) = v13;
  __int16 v35 = 257;
  __int16 v33 = 257;
  __int16 v31 = 257;
  llvm::sys::path::append(&__src, v18, (const char **)&v36, &v34, (uint64_t)v32, (uint64_t)v30);
  size_t v19 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string v20 = __src;
  if ((unint64_t)__len >= 0x17)
  {
    uint64_t v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17) {
      uint64_t v22 = __len | 7;
    }
    uint64_t v23 = v22 + 1;
    p_dst = operator new(v22 + 1);
    *(void *)&long long v29 = v19;
    *((void *)&v29 + 1) = v23 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_28;
  }
  HIBYTE(v29) = __len;
  p_dst = &__dst;
  if ((void)__len) {
LABEL_28:
  }
    memmove(p_dst, v20, v19);
  *((unsigned char *)p_dst + v19) = 0;
  int v24 = *(_DWORD *)(*(void *)(a1 + 72) + 32);
  uint64_t v25 = __dst;
  *(void *)&long long v36 = v29;
  *(void *)((char *)&v36 + 7) = *(void *)((char *)&v29 + 7);
  char v26 = HIBYTE(v29);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  uint64_t v27 = v36;
  *(void *)(a1 + 8) = v25;
  *(void *)(a1 + 16) = v27;
  *(void *)(a1 + 23) = *(void *)((char *)&v36 + 7);
  *(unsigned char *)(a1 + 31) = v26;
  *(_DWORD *)(a1 + 32) = v24;
  if (__src != v40) {
    free(__src);
  }
}

uint64_t sub_1CD0CC454(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645F40;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD0CC518(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645F40;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = &unk_1F26457F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0CC5FC(uint64_t a1)
{
  LODWORD(v9[0]) = 0;
  v9[1] = std::system_category();
  sub_1CD06540C((void *)(a1 + 72), v9);
  if (LODWORD(v9[0])) {
    goto LABEL_5;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  BOOL v2 = sub_1CD065CEC((uint64_t *)(a1 + 72), &v7);
  BOOL v3 = v2;
  uint64_t v4 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v3) {
      goto LABEL_5;
    }
LABEL_10:
    sub_1CD0CC1DC(a1);
    return v9[0];
  }
  if (!v2) {
    goto LABEL_10;
  }
LABEL_5:
  size_t v5 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v5);
  }
  void *v5 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  return v9[0];
}

uint64_t sub_1CD0CC6E8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645FC8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD0CC768(uint64_t a1)
{
  *(void *)a1 = &unk_1F2645FC8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

__n128 sub_1CD0CC808@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 80) &= ~1u;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1CB8BDF7C(a2, *(const void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(void *)(a2 + 16) = *(void *)(a1 + 32);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 56) = result;
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 88);
  return result;
}

uint64_t sub_1CD0CC884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_1CD0CC8AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_1CD0CC8D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

double sub_1CD0CC8FC(uint64_t a1, llvm::Twine *this)
{
  uint64_t v2 = a1 + 40;
  long long v10 = *(_OWORD *)(a1 + 40);
  uint64_t v3 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 80);
  llvm::Twine::str(this, &v11);
  long long v13 = v10;
  *(void *)&long long v14 = v4;
  *((void *)&v14 + 1) = v6;
  *(void *)&long long v15 = v5;
  *((void *)&v15 + 1) = v7;
  __int16 v16 = 0;
  if (*(char *)(v2 - 1) < 0) {
    operator delete(*(void **)v3);
  }
  *(_OWORD *)uint64_t v3 = v11;
  *(void *)(v3 + 16) = v12;
  long long v8 = v14;
  *(_OWORD *)uint64_t v2 = v13;
  *(_OWORD *)(v2 + 16) = v8;
  double result = *(double *)&v15;
  *(_OWORD *)(v2 + 32) = v15;
  *(_WORD *)(v2 + 48) = v16;
  return result;
}

char *sub_1CD0CC9C0(void **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    goto LABEL_36;
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  unint64_t v10 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249
      ? 0x492492492492492
      : v5;
  if (v10)
  {
    if (v10 > 0x492492492492492) {
      sub_1CB833614();
    }
    long long v11 = operator new(56 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  size_t v12 = *(void *)(a2 + 8);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
LABEL_36:
  }
    abort();
  long long v13 = &v11[56 * v4];
  char v14 = *a4;
  long long v15 = *(const void **)a2;
  if (v12 >= 0x17)
  {
    uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v17 = v12 | 7;
    }
    uint64_t v37 = v4;
    uint64_t v18 = a3;
    char v19 = v14;
    uint64_t v20 = v17 + 1;
    __int16 v16 = (char *)operator new(v17 + 1);
    unint64_t v21 = v20 | 0x8000000000000000;
    char v14 = v19;
    a3 = v18;
    uint64_t v4 = v37;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 2) = v21;
    *(void *)long long v13 = v16;
    goto LABEL_18;
  }
  v13[23] = v12;
  __int16 v16 = &v11[56 * v4];
  if (v12) {
LABEL_18:
  }
    memmove(v16, v15, v12);
  v16[v12] = 0;
  size_t v22 = *(void *)(a3 + 8);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_36;
  }
  uint64_t v23 = &v11[56 * v4];
  int v24 = v23 + 24;
  uint64_t v25 = *(const void **)a3;
  if (v22 >= 0x17)
  {
    uint64_t v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v26 = v22 | 7;
    }
    uint64_t v27 = v26 + 1;
    BOOL v28 = operator new(v26 + 1);
    v24[1] = v22;
    _OWORD v24[2] = v27 | 0x8000000000000000;
    *int v24 = v28;
    int v24 = v28;
    goto LABEL_26;
  }
  v23[47] = v22;
  if (v22) {
LABEL_26:
  }
    memmove(v24, v25, v22);
  long long v29 = &v11[56 * v10];
  *((unsigned char *)v24 + v22) = 0;
  v11[56 * v4 + 48] = v14;
  size_t v30 = v13 + 56;
  __int16 v31 = (char *)*a1;
  unint64_t v32 = (char *)a1[1];
  if (v32 == *a1)
  {
    *a1 = v13;
    a1[1] = v30;
    a1[2] = v29;
  }
  else
  {
    do
    {
      long long v33 = *(_OWORD *)(v32 - 56);
      *((void *)v13 - 5) = *((void *)v32 - 5);
      *(_OWORD *)(v13 - 56) = v33;
      *((void *)v32 - 6) = 0;
      *((void *)v32 - 5) = 0;
      *((void *)v32 - 7) = 0;
      long long v34 = *((_OWORD *)v32 - 2);
      *((void *)v13 - 2) = *((void *)v32 - 2);
      *((_OWORD *)v13 - 2) = v34;
      *((void *)v32 - 3) = 0;
      *((void *)v32 - 2) = 0;
      *((void *)v32 - 4) = 0;
      *(v13 - 8) = *(v32 - 8);
      v13 -= 56;
      v32 -= 56;
    }
    while (v32 != v31);
    unint64_t v32 = (char *)*a1;
    uint64_t v35 = (uint64_t)a1[1];
    *a1 = v13;
    a1[1] = v30;
    a1[2] = v29;
    while ((char *)v35 != v32)
      uint64_t v35 = sub_1CD3C4FA4(v35 - 56);
  }
  if (v32) {
    operator delete(v32);
  }
  return v30;
}

void sub_1CD0CCC70(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  while (2)
  {
    unint64_t v9 = (long long *)a2;
    __s1 = (long long *)(a2 - 56);
    unint64_t v10 = a1;
LABEL_2:
    int v298 = a4;
    while (1)
    {
      a1 = v10;
      uint64_t v11 = (uint64_t)v9 - v10;
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v9 - v10) >> 3);
      if (v5 || !v4)
      {
        switch(v12)
        {
          case 0:
          case 1:
            return;
          case 2:
            char v225 = *(unsigned char *)(a1 + 23);
            BOOL v226 = v225 < 0;
            if (v225 >= 0) {
              v227 = (const void *)a1;
            }
            else {
              v227 = *(const void **)a1;
            }
            size_t v228 = v225 & 0x7F;
            if (v226) {
              size_t v229 = *(void *)(a1 + 8);
            }
            else {
              size_t v229 = v228;
            }
            if (*(char *)(a2 - 33) < 0)
            {
              v231 = *(const void **)(a2 - 56);
              size_t v230 = *(void *)(a2 - 48);
            }
            else
            {
              size_t v230 = *(unsigned __int8 *)(a2 - 33);
              v231 = (const void *)(a2 - 56);
            }
            if (v229 >= v230) {
              size_t v232 = v230;
            }
            else {
              size_t v232 = v229;
            }
            int v233 = memcmp(v231, v227, v232);
            BOOL v234 = v230 < v229;
            if (v233) {
              BOOL v234 = v233 < 0;
            }
            if (v234)
            {
              long long v296 = *(_OWORD *)a1;
              v312 = *(const void **)(a1 + 16);
              *(_OWORD *)v311 = v296;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              long long v297 = *(_OWORD *)(a1 + 24);
              v314 = *(const void **)(a1 + 40);
              *(_OWORD *)std::string __p = v297;
              *(void *)(a1 + 32) = 0;
              *(void *)(a1 + 40) = 0;
              *(void *)(a1 + 24) = 0;
              char v315 = *(unsigned char *)(a1 + 48);
              sub_1CD85894C(a1, __s1);
              sub_1CD85894C((uint64_t)__s1, (long long *)v311);
              if (SHIBYTE(v314) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v312) < 0) {
                operator delete(v311[0]);
              }
            }
            break;
          case 3:
            sub_1CD0CE368(a1, (unsigned __int8 *)(a1 + 56), (uint64_t)__s1);
            break;
          case 4:
            sub_1CD0CEA8C(a1, a1 + 56, a1 + 112, (uint64_t)__s1);
            break;
          case 5:
            sub_1CD0CDFF0(a1, a1 + 56, a1 + 112, a1 + 168, (uint64_t)__s1);
            break;
          default:
            JUMPOUT(0);
        }
        return;
      }
      if (v11 <= 1343)
      {
        if (a4)
        {
          if ((long long *)a1 != v9)
          {
            uint64_t v235 = a1 + 56;
            if (a1 + 56 != a2)
            {
              uint64_t v236 = 0;
              v237 = (const void **)a1;
              do
              {
                BOOL v238 = (const void **)v235;
                char v239 = *((unsigned char *)v237 + 23);
                BOOL v240 = v239 < 0;
                if (v239 >= 0) {
                  v241 = v237;
                }
                else {
                  v241 = *v237;
                }
                size_t v242 = v239 & 0x7F;
                if (v240) {
                  size_t v243 = (size_t)v237[1];
                }
                else {
                  size_t v243 = v242;
                }
                if (*((char *)v237 + 79) < 0)
                {
                  size_t v244 = (size_t)v237[8];
                  v245 = *v238;
                }
                else
                {
                  size_t v244 = *((unsigned __int8 *)v237 + 79);
                  v245 = v238;
                }
                if (v243 >= v244) {
                  size_t v246 = v244;
                }
                else {
                  size_t v246 = v243;
                }
                int v247 = memcmp(v245, v241, v246);
                BOOL v248 = v244 < v243;
                if (v247) {
                  BOOL v248 = v247 < 0;
                }
                uint64_t v249 = a2;
                if (v248)
                {
                  long long v250 = *(_OWORD *)v238;
                  v312 = v238[2];
                  *(_OWORD *)v311 = v250;
                  v238[1] = 0;
                  v238[2] = 0;
                  *BOOL v238 = 0;
                  *(_OWORD *)std::string __p = *((_OWORD *)v237 + 5);
                  v314 = v237[12];
                  v237[11] = 0;
                  v237[12] = 0;
                  v237[10] = 0;
                  char v315 = *((unsigned char *)v237 + 104);
                  if (SHIBYTE(v312) >= 0) {
                    v251 = (void *)(HIBYTE(v312) & 0x7F);
                  }
                  else {
                    v251 = v311[1];
                  }
                  if (SHIBYTE(v312) >= 0) {
                    BOOL v252 = v311;
                  }
                  else {
                    BOOL v252 = (void **)v311[0];
                  }
                  uint64_t v253 = v236;
                  while (1)
                  {
                    uint64_t v254 = a1 + v253;
                    sub_1CD85894C(a1 + v253 + 56, (long long *)(a1 + v253));
                    if (!v253) {
                      break;
                    }
                    v257 = *(const void **)(v254 - 56);
                    uint64_t v256 = v254 - 56;
                    uint64_t v255 = v257;
                    char v258 = *(unsigned char *)(v256 + 23);
                    int v259 = v258;
                    if (v258 >= 0) {
                      v260 = (const void *)v256;
                    }
                    else {
                      v260 = v255;
                    }
                    size_t v261 = v258 & 0x7F;
                    if (v259 >= 0) {
                      size_t v262 = v261;
                    }
                    else {
                      size_t v262 = *(void *)(v256 + 8);
                    }
                    if (v262 >= (unint64_t)v251) {
                      size_t v263 = (size_t)v251;
                    }
                    else {
                      size_t v263 = v262;
                    }
                    int v264 = memcmp(v252, v260, v263);
                    BOOL v265 = (unint64_t)v251 < v262;
                    if (v264) {
                      BOOL v265 = v264 < 0;
                    }
                    v253 -= 56;
                    if (!v265)
                    {
                      uint64_t v266 = a1 + v253 + 56;
                      goto LABEL_437;
                    }
                  }
                  uint64_t v266 = a1;
LABEL_437:
                  uint64_t v249 = a2;
                  sub_1CD85894C(v266, (long long *)v311);
                  if (SHIBYTE(v314) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v312) < 0) {
                    operator delete(v311[0]);
                  }
                }
                uint64_t v235 = (uint64_t)(v238 + 7);
                v236 += 56;
                v237 = v238;
              }
              while (v238 + 7 != (const void **)v249);
            }
          }
        }
        else if ((long long *)a1 != v9)
        {
          uint64_t v267 = a1 + 56;
          if (a1 + 56 != a2)
          {
            do
            {
              v268 = (const void **)v267;
              char v269 = *(unsigned char *)(a1 + 23);
              BOOL v270 = v269 < 0;
              if (v269 >= 0) {
                v271 = (const void *)a1;
              }
              else {
                v271 = *(const void **)a1;
              }
              size_t v272 = v269 & 0x7F;
              if (v270) {
                size_t v273 = *(void *)(a1 + 8);
              }
              else {
                size_t v273 = v272;
              }
              if (*(char *)(a1 + 79) < 0)
              {
                size_t v274 = *(void *)(a1 + 64);
                v275 = *v268;
              }
              else
              {
                size_t v274 = *(unsigned __int8 *)(a1 + 79);
                v275 = v268;
              }
              if (v273 >= v274) {
                size_t v276 = v274;
              }
              else {
                size_t v276 = v273;
              }
              int v277 = memcmp(v275, v271, v276);
              BOOL v278 = v274 < v273;
              if (v277) {
                BOOL v278 = v277 < 0;
              }
              if (v278)
              {
                long long v279 = *(_OWORD *)v268;
                v312 = v268[2];
                *(_OWORD *)v311 = v279;
                v268[1] = 0;
                v268[2] = 0;
                *v268 = 0;
                *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 80);
                v314 = *(const void **)(a1 + 96);
                *(void *)(a1 + 88) = 0;
                *(void *)(a1 + 96) = 0;
                *(void *)(a1 + 80) = 0;
                char v315 = *(unsigned char *)(a1 + 104);
                if (SHIBYTE(v312) >= 0) {
                  v280 = (void *)(HIBYTE(v312) & 0x7F);
                }
                else {
                  v280 = v311[1];
                }
                if (SHIBYTE(v312) >= 0) {
                  v281 = v311;
                }
                else {
                  v281 = (void **)v311[0];
                }
                uint64_t v282 = (uint64_t)v268;
                do
                {
                  uint64_t v283 = v282 - 56;
                  uint64_t v284 = sub_1CD85894C(v282, (long long *)(v282 - 56));
                  v287 = *(const void **)(v284 - 112);
                  uint64_t v285 = v284 - 112;
                  v286 = v287;
                  char v288 = *(unsigned char *)(v285 + 23);
                  int v289 = v288;
                  if (v288 >= 0) {
                    v290 = (const void *)v285;
                  }
                  else {
                    v290 = v286;
                  }
                  size_t v291 = v288 & 0x7F;
                  if (v289 >= 0) {
                    size_t v292 = v291;
                  }
                  else {
                    size_t v292 = *(void *)(v285 + 8);
                  }
                  if (v292 >= (unint64_t)v280) {
                    size_t v293 = (size_t)v280;
                  }
                  else {
                    size_t v293 = v292;
                  }
                  int v294 = memcmp(v281, v290, v293);
                  BOOL v295 = (unint64_t)v280 < v292;
                  if (v294) {
                    BOOL v295 = v294 < 0;
                  }
                  uint64_t v282 = v283;
                }
                while (v295);
                sub_1CD85894C(v283, (long long *)v311);
                if (SHIBYTE(v314) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v312) < 0) {
                  operator delete(v311[0]);
                }
              }
              uint64_t v267 = (uint64_t)(v268 + 7);
              a1 = (uint64_t)v268;
            }
            while (v268 + 7 != (const void **)a2);
          }
        }
        return;
      }
      if (!a3)
      {
        if ((long long *)a1 != v9)
        {
          int64_t v132 = (unint64_t)(v12 - 2) >> 1;
          int64_t v133 = v132;
          __s1a = (void *)v132;
          do
          {
            int64_t v134 = v133;
            if (v132 >= v133)
            {
              uint64_t v135 = (2 * v133) | 1;
              uint64_t v136 = a1 + 56 * v135;
              if (2 * v133 + 2 < v12)
              {
                char v137 = *(unsigned char *)(v136 + 79);
                int v138 = v137;
                if (v137 >= 0) {
                  v139 = (const void *)(v136 + 56);
                }
                else {
                  v139 = *(const void **)(v136 + 56);
                }
                size_t v140 = v137 & 0x7F;
                if (v138 >= 0) {
                  size_t v141 = v140;
                }
                else {
                  size_t v141 = *(void *)(v136 + 64);
                }
                if (*(char *)(v136 + 23) < 0)
                {
                  v143 = *(const void **)v136;
                  size_t v142 = *(void *)(v136 + 8);
                }
                else
                {
                  size_t v142 = *(unsigned __int8 *)(v136 + 23);
                  v143 = (const void *)(a1 + 56 * v135);
                }
                if (v141 >= v142) {
                  size_t v144 = v142;
                }
                else {
                  size_t v144 = v141;
                }
                int v145 = memcmp(v143, v139, v144);
                BOOL v146 = v142 < v141;
                if (v145) {
                  BOOL v146 = v145 < 0;
                }
                if (v146)
                {
                  v136 += 56;
                  uint64_t v135 = 2 * v134 + 2;
                }
                int64_t v132 = (int64_t)__s1a;
              }
              uint64_t v147 = a1 + 56 * v134;
              char v148 = *(unsigned char *)(v147 + 23);
              BOOL v149 = v148 < 0;
              if (v148 >= 0) {
                v150 = (const void *)(a1 + 56 * v134);
              }
              else {
                v150 = *(const void **)v147;
              }
              size_t v151 = v148 & 0x7F;
              if (v149) {
                size_t v152 = *(void *)(v147 + 8);
              }
              else {
                size_t v152 = v151;
              }
              if (*(char *)(v136 + 23) < 0)
              {
                v154 = *(const void **)v136;
                size_t v153 = *(void *)(v136 + 8);
              }
              else
              {
                size_t v153 = *(unsigned __int8 *)(v136 + 23);
                v154 = (const void *)v136;
              }
              if (v152 >= v153) {
                size_t v155 = v153;
              }
              else {
                size_t v155 = v152;
              }
              int v156 = memcmp(v154, v150, v155);
              BOOL v157 = v153 < v152;
              if (v156) {
                BOOL v157 = v156 < 0;
              }
              if (!v157)
              {
                long long v158 = *(_OWORD *)v147;
                v312 = *(const void **)(v147 + 16);
                *(_OWORD *)v311 = v158;
                *(void *)(v147 + 8) = 0;
                *(void *)(v147 + 16) = 0;
                *(void *)uint64_t v147 = 0;
                uint64_t v159 = a1 + 56 * v134;
                long long v160 = *(_OWORD *)(v159 + 24);
                v314 = *(const void **)(v159 + 40);
                *(_OWORD *)std::string __p = v160;
                *(void *)(v159 + 32) = 0;
                *(void *)(v159 + 40) = 0;
                *(void *)(v159 + 24) = 0;
                char v315 = *(unsigned char *)(v159 + 48);
                uint64_t v161 = (void **)v311[0];
                if (SHIBYTE(v312) >= 0) {
                  uint64_t v161 = v311;
                }
                uint64_t v299 = v12;
                __s2b = v161;
                if (SHIBYTE(v312) >= 0) {
                  int v162 = (void *)(HIBYTE(v312) & 0x7F);
                }
                else {
                  int v162 = v311[1];
                }
                do
                {
                  uint64_t v163 = v136;
                  sub_1CD85894C(v147, (long long *)v136);
                  if (v132 < v135) {
                    break;
                  }
                  uint64_t v164 = (2 * v135) | 1;
                  uint64_t v136 = a1 + 56 * v164;
                  uint64_t v135 = 2 * v135 + 2;
                  if (v135 < v12)
                  {
                    char v165 = *(unsigned char *)(v136 + 79);
                    int v166 = v165;
                    if (v165 >= 0) {
                      BOOL v167 = (const void *)(v136 + 56);
                    }
                    else {
                      BOOL v167 = *(const void **)(v136 + 56);
                    }
                    size_t v168 = v165 & 0x7F;
                    if (v166 >= 0) {
                      size_t v169 = v168;
                    }
                    else {
                      size_t v169 = *(void *)(v136 + 64);
                    }
                    if (*(char *)(v136 + 23) < 0)
                    {
                      v171 = *(const void **)v136;
                      size_t v170 = *(void *)(v136 + 8);
                    }
                    else
                    {
                      size_t v170 = *(unsigned __int8 *)(v136 + 23);
                      v171 = (const void *)(a1 + 56 * v164);
                    }
                    if (v169 >= v170) {
                      size_t v172 = v170;
                    }
                    else {
                      size_t v172 = v169;
                    }
                    int v173 = memcmp(v171, v167, v172);
                    BOOL v174 = v170 < v169;
                    if (v173) {
                      BOOL v174 = v173 < 0;
                    }
                    if (v174) {
                      v136 += 56;
                    }
                    else {
                      uint64_t v135 = v164;
                    }
                    uint64_t v12 = v299;
                    int64_t v132 = (int64_t)__s1a;
                  }
                  else
                  {
                    uint64_t v135 = v164;
                  }
                  if (*(char *)(v136 + 23) < 0)
                  {
                    int v176 = *(const void **)v136;
                    size_t v175 = *(void *)(v136 + 8);
                  }
                  else
                  {
                    size_t v175 = *(unsigned __int8 *)(v136 + 23);
                    int v176 = (const void *)v136;
                  }
                  if ((unint64_t)v162 >= v175) {
                    size_t v177 = v175;
                  }
                  else {
                    size_t v177 = (size_t)v162;
                  }
                  int v178 = memcmp(v176, __s2b, v177);
                  BOOL v179 = v175 < (unint64_t)v162;
                  if (v178) {
                    BOOL v179 = v178 < 0;
                  }
                  uint64_t v147 = v163;
                }
                while (!v179);
                sub_1CD85894C(v163, (long long *)v311);
                if (SHIBYTE(v314) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v312) < 0) {
                  operator delete(v311[0]);
                }
              }
            }
            int64_t v133 = v134 - 1;
          }
          while (v134);
          __s2a = (long long *)(a1 + 24);
          do
          {
            uint64_t v180 = 0;
            long long v181 = *(_OWORD *)a1;
            uint64_t v307 = *(void *)(a1 + 16);
            *(_OWORD *)v306 = v181;
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
            *(void *)a1 = 0;
            long long v182 = *__s2a;
            uint64_t v309 = *(void *)(a1 + 40);
            long long v308 = v182;
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            *(void *)__s2a = 0;
            int64_t v183 = (unint64_t)(v12 - 2) >> 1;
            char v310 = *(unsigned char *)(a1 + 48);
            uint64_t v184 = a1;
            do
            {
              uint64_t v185 = v184 + 56 * v180 + 56;
              uint64_t v186 = (2 * v180) | 1;
              uint64_t v187 = 2 * v180 + 2;
              if (v187 < v12)
              {
                uint64_t v188 = v12;
                char v189 = *(unsigned char *)(v184 + 56 * v180 + 135);
                int v190 = v189;
                if (v189 >= 0) {
                  v191 = (const void *)(v184 + 56 * v180 + 112);
                }
                else {
                  v191 = *(const void **)(v184 + 56 * v180 + 112);
                }
                size_t v192 = v189 & 0x7F;
                if (v190 >= 0) {
                  size_t v193 = v192;
                }
                else {
                  size_t v193 = *(void *)(v184 + 56 * v180 + 120);
                }
                int v194 = *(char *)(v184 + 56 * v180 + 79);
                if (v194 < 0)
                {
                  v196 = *(const void **)v185;
                  size_t v195 = *(void *)(v185 + 8);
                }
                else
                {
                  size_t v195 = v194;
                  v196 = (const void *)v185;
                }
                if (v193 >= v195) {
                  size_t v197 = v195;
                }
                else {
                  size_t v197 = v193;
                }
                int v198 = memcmp(v196, v191, v197);
                BOOL v199 = v195 < v193;
                if (v198) {
                  BOOL v199 = v198 < 0;
                }
                if (v199)
                {
                  v185 += 56;
                  uint64_t v186 = v187;
                }
                uint64_t v12 = v188;
              }
              sub_1CD85894C(v184, (long long *)v185);
              uint64_t v184 = v185;
              uint64_t v180 = v186;
            }
            while (v186 <= v183);
            int v200 = (long long *)(a2 - 56);
            BOOL v5 = v185 == a2 - 56;
            a2 -= 56;
            if (v5)
            {
              sub_1CD85894C(v185, (long long *)v306);
            }
            else
            {
              sub_1CD85894C(v185, v200);
              sub_1CD85894C((uint64_t)v200, (long long *)v306);
              uint64_t v201 = v185 - a1 + 56;
              if (v201 >= 57)
              {
                unint64_t v202 = (v201 / 0x38uLL - 2) >> 1;
                uint64_t v203 = a1 + 56 * v202;
                char v204 = *(unsigned char *)(v185 + 23);
                BOOL v205 = v204 < 0;
                if (v204 >= 0) {
                  v206 = (const void *)v185;
                }
                else {
                  v206 = *(const void **)v185;
                }
                size_t v207 = v204 & 0x7F;
                if (v205) {
                  size_t v208 = *(void *)(v185 + 8);
                }
                else {
                  size_t v208 = v207;
                }
                if (*(char *)(v203 + 23) < 0)
                {
                  v210 = *(const void **)v203;
                  size_t v209 = *(void *)(v203 + 8);
                }
                else
                {
                  size_t v209 = *(unsigned __int8 *)(v203 + 23);
                  v210 = (const void *)(a1 + 56 * v202);
                }
                if (v208 >= v209) {
                  size_t v211 = v209;
                }
                else {
                  size_t v211 = v208;
                }
                int v212 = memcmp(v210, v206, v211);
                BOOL v213 = v209 < v208;
                if (v212) {
                  BOOL v213 = v212 < 0;
                }
                if (v213)
                {
                  long long v215 = *(_OWORD *)v185;
                  v312 = *(const void **)(v185 + 16);
                  *(_OWORD *)v311 = v215;
                  *(void *)(v185 + 8) = 0;
                  *(void *)(v185 + 16) = 0;
                  *(void *)uint64_t v185 = 0;
                  long long v216 = *(_OWORD *)(v185 + 24);
                  v314 = *(const void **)(v185 + 40);
                  *(_OWORD *)std::string __p = v216;
                  *(void *)(v185 + 32) = 0;
                  *(void *)(v185 + 40) = 0;
                  *(void *)(v185 + 24) = 0;
                  char v315 = *(unsigned char *)(v185 + 48);
                  if (SHIBYTE(v312) >= 0) {
                    v217 = v311;
                  }
                  else {
                    v217 = (void **)v311[0];
                  }
                  if (SHIBYTE(v312) >= 0) {
                    v218 = (void *)(HIBYTE(v312) & 0x7F);
                  }
                  else {
                    v218 = v311[1];
                  }
                  do
                  {
                    uint64_t v219 = v203;
                    sub_1CD85894C(v185, (long long *)v203);
                    if (!v202) {
                      break;
                    }
                    unint64_t v202 = (v202 - 1) >> 1;
                    uint64_t v203 = a1 + 56 * v202;
                    if (*(char *)(v203 + 23) < 0)
                    {
                      v221 = *(const void **)v203;
                      size_t v220 = *(void *)(v203 + 8);
                    }
                    else
                    {
                      size_t v220 = *(unsigned __int8 *)(v203 + 23);
                      v221 = (const void *)(a1 + 56 * v202);
                    }
                    if ((unint64_t)v218 >= v220) {
                      size_t v222 = v220;
                    }
                    else {
                      size_t v222 = (size_t)v218;
                    }
                    int v223 = memcmp(v221, v217, v222);
                    BOOL v224 = v220 < (unint64_t)v218;
                    if (v223) {
                      BOOL v224 = v223 < 0;
                    }
                    uint64_t v185 = v219;
                  }
                  while (v224);
                  sub_1CD85894C(v219, (long long *)v311);
                  if (SHIBYTE(v314) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v312) < 0) {
                    operator delete(v311[0]);
                  }
                }
              }
            }
            if (SHIBYTE(v309) < 0) {
              operator delete((void *)v308);
            }
            if (SHIBYTE(v307) < 0) {
              operator delete(v306[0]);
            }
          }
          while (v12-- > 2);
        }
        return;
      }
      unint64_t v13 = (unint64_t)v12 >> 1;
      char v14 = (unsigned __int8 *)(a1 + 56 * ((unint64_t)v12 >> 1));
      if ((unint64_t)v11 < 0x1C01)
      {
        sub_1CD0CE368((uint64_t)v14, (unsigned __int8 *)a1, (uint64_t)__s1);
      }
      else
      {
        sub_1CD0CE368(a1, v14, (uint64_t)__s1);
        uint64_t v15 = 56 * v13;
        sub_1CD0CE368(a1 + 56, (unsigned __int8 *)(v15 + a1 - 56), a2 - 112);
        sub_1CD0CE368(a1 + 112, (unsigned __int8 *)(a1 + 56 + v15), a2 - 168);
        sub_1CD0CE368(v15 + a1 - 56, v14, a1 + 56 + v15);
        long long v16 = *(_OWORD *)a1;
        v312 = *(const void **)(a1 + 16);
        *(_OWORD *)v311 = v16;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v17 = *(_OWORD *)(a1 + 24);
        v314 = *(const void **)(a1 + 40);
        *(_OWORD *)std::string __p = v17;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        char v315 = *(unsigned char *)(a1 + 48);
        sub_1CD85894C(a1, (long long *)v14);
        sub_1CD85894C((uint64_t)v14, (long long *)v311);
        if (SHIBYTE(v314) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v312) < 0) {
          operator delete(v311[0]);
        }
        unint64_t v9 = (long long *)a2;
      }
      uint64_t v18 = a3 - 1;
      if ((a4 & 1) == 0)
      {
        char v19 = *(unsigned char *)(a1 + 23);
        BOOL v20 = v19 < 0;
        if (v19 >= 0) {
          unint64_t v21 = (const void *)a1;
        }
        else {
          unint64_t v21 = *(const void **)a1;
        }
        size_t v22 = v19 & 0x7F;
        if (v20) {
          size_t v23 = *(void *)(a1 + 8);
        }
        else {
          size_t v23 = v22;
        }
        if (*(char *)(a1 - 33) < 0)
        {
          int v24 = *(const void **)(a1 - 56);
          size_t v25 = *(void *)(a1 - 48);
        }
        else
        {
          int v24 = (const void *)(a1 - 56);
          size_t v25 = *(unsigned __int8 *)(a1 - 33);
        }
        if (v23 >= v25) {
          size_t v26 = v25;
        }
        else {
          size_t v26 = v23;
        }
        int v27 = memcmp(v24, v21, v26);
        BOOL v28 = v25 < v23;
        if (v27) {
          BOOL v28 = v27 < 0;
        }
        if (!v28)
        {
          char v71 = v18;
          long long v72 = *(_OWORD *)a1;
          uint64_t v307 = *(void *)(a1 + 16);
          *(_OWORD *)v306 = v72;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          uint64_t v73 = *(void *)(a1 + 40);
          long long v308 = *(_OWORD *)(a1 + 24);
          uint64_t v309 = v73;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 24) = 0;
          char v310 = *(unsigned char *)(a1 + 48);
          char v74 = *((unsigned char *)v9 - 33);
          BOOL v75 = v74 < 0;
          if (v74 >= 0) {
            BOOL v76 = (const void *)(a2 - 56);
          }
          else {
            BOOL v76 = (const void *)*((void *)v9 - 7);
          }
          size_t v77 = v74 & 0x7F;
          if (v75) {
            size_t v78 = *((void *)v9 - 6);
          }
          else {
            size_t v78 = v77;
          }
          if (v307 >= 0) {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v79 = (void *)(HIBYTE(v307) & 0x7F);
          }
          else {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v79 = v306[1];
          }
          if (v307 >= 0) {
            unint64_t v80 = v306;
          }
          else {
            unint64_t v80 = (void **)v306[0];
          }
          if (v78 >= (unint64_t)v79) {
            size_t v81 = (size_t)v79;
          }
          else {
            size_t v81 = v78;
          }
          int v82 = memcmp(v80, v76, v81);
          BOOL v83 = (unint64_t)v79 < v78;
          if (v82) {
            BOOL v83 = v82 < 0;
          }
          if (v83)
          {
            uint64_t v84 = (const void **)(a1 + 56);
            do
            {
              char v85 = *((unsigned char *)v84 + 23);
              BOOL v86 = v85 < 0;
              if (v85 >= 0) {
                __int16 v87 = v84;
              }
              else {
                __int16 v87 = *v84;
              }
              size_t v88 = v85 & 0x7F;
              if (v86) {
                size_t v89 = (size_t)v84[1];
              }
              else {
                size_t v89 = v88;
              }
              if (v89 >= (unint64_t)v79) {
                size_t v90 = (size_t)v79;
              }
              else {
                size_t v90 = v89;
              }
              int v91 = memcmp(v80, v87, v90);
              BOOL v92 = (unint64_t)v79 < v89;
              if (v91) {
                BOOL v92 = v91 < 0;
              }
              v84 += 7;
            }
            while (!v92);
            unint64_t v10 = (unint64_t)(v84 - 7);
          }
          else
          {
            unint64_t v93 = a1 + 56;
            do
            {
              unint64_t v10 = v93;
              if (v93 >= (unint64_t)v9) {
                break;
              }
              char v94 = *(unsigned char *)(v93 + 23);
              BOOL v95 = v94 < 0;
              if (v94 >= 0) {
                unint64_t v96 = (const void *)v10;
              }
              else {
                unint64_t v96 = *(const void **)v10;
              }
              size_t v97 = v94 & 0x7F;
              if (v95) {
                size_t v98 = *(void *)(v10 + 8);
              }
              else {
                size_t v98 = v97;
              }
              if (v98 >= (unint64_t)v79) {
                size_t v99 = (size_t)v79;
              }
              else {
                size_t v99 = v98;
              }
              int v100 = memcmp(v80, v96, v99);
              BOOL v101 = v100 < 0;
              if (!v100) {
                BOOL v101 = (unint64_t)v79 < v98;
              }
              unint64_t v93 = v10 + 56;
            }
            while (!v101);
          }
          if (v10 < (unint64_t)v9)
          {
            uint64_t v102 = (const void **)(a2 - 56);
            do
            {
              char v103 = *((unsigned char *)v102 + 23);
              BOOL v104 = v103 < 0;
              if (v103 >= 0) {
                __int16 v105 = v102;
              }
              else {
                __int16 v105 = *v102;
              }
              size_t v106 = v103 & 0x7F;
              if (v104) {
                size_t v107 = (size_t)v102[1];
              }
              else {
                size_t v107 = v106;
              }
              if (v107 >= (unint64_t)v79) {
                size_t v108 = (size_t)v79;
              }
              else {
                size_t v108 = v107;
              }
              int v109 = memcmp(v80, v105, v108);
              BOOL v110 = (unint64_t)v79 < v107;
              if (v109) {
                BOOL v110 = v109 < 0;
              }
              v102 -= 7;
            }
            while (v110);
            goto LABEL_176;
          }
          while (v10 < (unint64_t)v9)
          {
            long long v111 = *(_OWORD *)v10;
            v312 = *(const void **)(v10 + 16);
            *(_OWORD *)v311 = v111;
            *(void *)(v10 + 8) = 0;
            *(void *)(v10 + 16) = 0;
            *(void *)unint64_t v10 = 0;
            long long v112 = *(_OWORD *)(v10 + 24);
            v314 = *(const void **)(v10 + 40);
            *(_OWORD *)std::string __p = v112;
            *(void *)(v10 + 32) = 0;
            *(void *)(v10 + 40) = 0;
            *(void *)(v10 + 24) = 0;
            char v315 = *(unsigned char *)(v10 + 48);
            sub_1CD85894C(v10, v9);
            sub_1CD85894C((uint64_t)v9, (long long *)v311);
            if (SHIBYTE(v314) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v312) < 0) {
              operator delete(v311[0]);
            }
            if (v307 >= 0) {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v113 = (void *)(HIBYTE(v307) & 0x7F);
            }
            else {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v113 = v306[1];
            }
            if (v307 >= 0) {
              uint64_t v114 = v306;
            }
            else {
              uint64_t v114 = (void **)v306[0];
            }
            uint64_t v115 = (const void **)(v10 + 56);
            do
            {
              char v116 = *((unsigned char *)v115 + 23);
              BOOL v117 = v116 < 0;
              if (v116 >= 0) {
                int v118 = v115;
              }
              else {
                int v118 = *v115;
              }
              size_t v119 = v116 & 0x7F;
              if (v117) {
                size_t v120 = (size_t)v115[1];
              }
              else {
                size_t v120 = v119;
              }
              if (v120 >= (unint64_t)v113) {
                size_t v121 = (size_t)v113;
              }
              else {
                size_t v121 = v120;
              }
              int v122 = memcmp(v114, v118, v121);
              BOOL v123 = (unint64_t)v113 < v120;
              if (v122) {
                BOOL v123 = v122 < 0;
              }
              v115 += 7;
            }
            while (!v123);
            unint64_t v10 = (unint64_t)(v115 - 7);
            uint64_t v102 = (const void **)v9 - 7;
            do
            {
              char v124 = *((unsigned char *)v102 + 23);
              BOOL v125 = v124 < 0;
              if (v124 >= 0) {
                uint64_t v126 = v102;
              }
              else {
                uint64_t v126 = *v102;
              }
              size_t v127 = v124 & 0x7F;
              if (v125) {
                size_t v128 = (size_t)v102[1];
              }
              else {
                size_t v128 = v127;
              }
              if (v128 >= (unint64_t)v113) {
                size_t v129 = (size_t)v113;
              }
              else {
                size_t v129 = v128;
              }
              int v130 = memcmp(v114, v126, v129);
              BOOL v131 = (unint64_t)v113 < v128;
              if (v130) {
                BOOL v131 = v130 < 0;
              }
              v102 -= 7;
            }
            while (v131);
LABEL_176:
            unint64_t v9 = (long long *)(v102 + 7);
          }
          unint64_t v9 = (long long *)a2;
          if (v10 - 56 != a1) {
            sub_1CD85894C(a1, (long long *)(v10 - 56));
          }
          sub_1CD85894C(v10 - 56, (long long *)v306);
          if (SHIBYTE(v309) < 0) {
            operator delete((void *)v308);
          }
          a3 = v71;
          if (SHIBYTE(v307) < 0) {
            operator delete(v306[0]);
          }
          goto LABEL_115;
        }
      }
      __s2 = v18;
      uint64_t v29 = 0;
      long long v30 = *(_OWORD *)a1;
      uint64_t v307 = *(void *)(a1 + 16);
      *(_OWORD *)v306 = v30;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      uint64_t v31 = *(void *)(a1 + 40);
      long long v308 = *(_OWORD *)(a1 + 24);
      uint64_t v309 = v31;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 24) = 0;
      char v310 = *(unsigned char *)(a1 + 48);
      if (v307 >= 0) {
        unint64_t v32 = (void *)(HIBYTE(v307) & 0x7F);
      }
      else {
        unint64_t v32 = v306[1];
      }
      if (v307 >= 0) {
        long long v33 = v306;
      }
      else {
        long long v33 = (void **)v306[0];
      }
      do
      {
        long long v34 = (void *)(a1 + v29 + 56);
        if (*(char *)(a1 + v29 + 79) < 0)
        {
          size_t v35 = *(void *)(a1 + v29 + 64);
          long long v34 = (void *)*v34;
        }
        else
        {
          size_t v35 = *(unsigned __int8 *)(a1 + v29 + 79);
        }
        if ((unint64_t)v32 >= v35) {
          size_t v36 = v35;
        }
        else {
          size_t v36 = (size_t)v32;
        }
        int v37 = memcmp(v34, v33, v36);
        BOOL v38 = v35 < (unint64_t)v32;
        if (v37) {
          BOOL v38 = v37 < 0;
        }
        v29 += 56;
      }
      while (v38);
      unint64_t v39 = a1 + v29;
      uint64_t v40 = (char *)(a2 - 56);
      if (v29 == 56)
      {
        int v41 = (char *)(a2 - 56);
        while (1)
        {
          uint64_t v42 = (long long *)(v41 + 56);
          if (v39 >= (unint64_t)(v41 + 56)) {
            break;
          }
          if (v41[23] < 0)
          {
            uint64_t v44 = *(char **)v41;
            size_t v43 = *((void *)v41 + 1);
          }
          else
          {
            size_t v43 = v41[23];
            uint64_t v44 = v41;
          }
          if ((unint64_t)v32 >= v43) {
            size_t v45 = v43;
          }
          else {
            size_t v45 = (size_t)v32;
          }
          int v46 = memcmp(v44, v33, v45);
          BOOL v47 = v43 < (unint64_t)v32;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          v41 -= 56;
          if (v47)
          {
            uint64_t v42 = (long long *)(v41 + 56);
            break;
          }
        }
      }
      else
      {
        do
        {
          if (v40[23] < 0)
          {
            int64x2_t v49 = *(char **)v40;
            size_t v48 = *((void *)v40 + 1);
          }
          else
          {
            size_t v48 = v40[23];
            int64x2_t v49 = v40;
          }
          if ((unint64_t)v32 >= v48) {
            size_t v50 = v48;
          }
          else {
            size_t v50 = (size_t)v32;
          }
          int v51 = memcmp(v49, v33, v50);
          BOOL v52 = v48 < (unint64_t)v32;
          if (v51) {
            BOOL v52 = v51 < 0;
          }
          v40 -= 56;
        }
        while (!v52);
        uint64_t v42 = (long long *)(v40 + 56);
      }
      unint64_t v10 = v39;
      if (v39 < (unint64_t)v42)
      {
        BOOL v53 = v42;
        do
        {
          long long v54 = *(_OWORD *)v10;
          v312 = *(const void **)(v10 + 16);
          *(_OWORD *)v311 = v54;
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)unint64_t v10 = 0;
          long long v55 = *(_OWORD *)(v10 + 24);
          v314 = *(const void **)(v10 + 40);
          *(_OWORD *)std::string __p = v55;
          *(void *)(v10 + 32) = 0;
          *(void *)(v10 + 40) = 0;
          *(void *)(v10 + 24) = 0;
          char v315 = *(unsigned char *)(v10 + 48);
          sub_1CD85894C(v10, v53);
          sub_1CD85894C((uint64_t)v53, (long long *)v311);
          if (SHIBYTE(v314) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v312) < 0) {
            operator delete(v311[0]);
          }
          if (v307 >= 0) {
            uint64_t v56 = v306;
          }
          else {
            uint64_t v56 = (void **)v306[0];
          }
          if (v307 >= 0) {
            size_t v57 = (void *)(HIBYTE(v307) & 0x7F);
          }
          else {
            size_t v57 = v306[1];
          }
          size_t v58 = (char *)(v10 + 56);
          do
          {
            if (v58[23] < 0)
            {
              size_t v60 = *(char **)v58;
              size_t v59 = *((void *)v58 + 1);
            }
            else
            {
              size_t v59 = v58[23];
              size_t v60 = v58;
            }
            if ((unint64_t)v57 >= v59) {
              size_t v61 = v59;
            }
            else {
              size_t v61 = (size_t)v57;
            }
            int v62 = memcmp(v60, v56, v61);
            BOOL v63 = v59 < (unint64_t)v57;
            if (v62) {
              BOOL v63 = v62 < 0;
            }
            v58 += 56;
          }
          while (v63);
          unint64_t v10 = (unint64_t)(v58 - 56);
          char v64 = (char *)v53 - 56;
          do
          {
            if (v64[23] < 0)
            {
              uint64_t v66 = *(const void **)v64;
              size_t v65 = *((void *)v64 + 1);
            }
            else
            {
              size_t v65 = v64[23];
              uint64_t v66 = v64;
            }
            if ((unint64_t)v57 >= v65) {
              size_t v67 = v65;
            }
            else {
              size_t v67 = (size_t)v57;
            }
            int v68 = memcmp(v66, v56, v67);
            BOOL v69 = v65 < (unint64_t)v57;
            if (v68) {
              BOOL v69 = v68 < 0;
            }
            v64 -= 56;
          }
          while (!v69);
          BOOL v53 = (long long *)(v64 + 56);
        }
        while (v10 < (unint64_t)v53);
      }
      if (v10 - 56 != a1) {
        sub_1CD85894C(a1, (long long *)(v10 - 56));
      }
      sub_1CD85894C(v10 - 56, (long long *)v306);
      if (SHIBYTE(v309) < 0) {
        operator delete((void *)v308);
      }
      if (SHIBYTE(v307) < 0) {
        operator delete(v306[0]);
      }
      BOOL v4 = v39 >= (unint64_t)v42;
      unint64_t v9 = (long long *)a2;
      a3 = __s2;
      a4 = v298;
      if (!v4)
      {
LABEL_114:
        sub_1CD0CCC70(a1, v10 - 56, __s2, v298 & 1);
LABEL_115:
        a4 = 0;
        goto LABEL_2;
      }
      BOOL v70 = sub_1CD0CE710(a1, v10 - 56);
      if (sub_1CD0CE710(v10, a2)) {
        break;
      }
      if (!v70) {
        goto LABEL_114;
      }
    }
    a2 = v10 - 56;
    if (!v70) {
      continue;
    }
    break;
  }
}

void sub_1CD0CDFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CD0CEA8C(a1, a2, a3, a4);
  char v10 = *(unsigned char *)(a4 + 23);
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    uint64_t v12 = (const void *)a4;
  }
  else {
    uint64_t v12 = *(const void **)a4;
  }
  size_t v13 = v10 & 0x7F;
  if (v11) {
    size_t v14 = *(void *)(a4 + 8);
  }
  else {
    size_t v14 = v13;
  }
  if (*(char *)(a5 + 23) < 0)
  {
    long long v16 = *(const void **)a5;
    size_t v15 = *(void *)(a5 + 8);
  }
  else
  {
    size_t v15 = *(unsigned __int8 *)(a5 + 23);
    long long v16 = (const void *)a5;
  }
  if (v14 >= v15) {
    size_t v17 = v15;
  }
  else {
    size_t v17 = v14;
  }
  int v18 = memcmp(v16, v12, v17);
  BOOL v19 = v15 < v14;
  if (v18) {
    BOOL v19 = v18 < 0;
  }
  if (v19)
  {
    *(_OWORD *)long long v54 = *(_OWORD *)a4;
    uint64_t v55 = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    long long v20 = *(_OWORD *)(a4 + 24);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(_OWORD *)std::string __p = v20;
    uint64_t v57 = *(void *)(a4 + 40);
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    char v58 = *(unsigned char *)(a4 + 48);
    sub_1CD85894C(a4, (long long *)a5);
    sub_1CD85894C(a5, (long long *)v54);
    if (SHIBYTE(v57) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v55) < 0) {
      operator delete(v54[0]);
    }
    char v21 = *(unsigned char *)(a3 + 23);
    BOOL v22 = v21 < 0;
    if (v21 >= 0) {
      size_t v23 = (const void *)a3;
    }
    else {
      size_t v23 = *(const void **)a3;
    }
    size_t v24 = v21 & 0x7F;
    if (v22) {
      size_t v25 = *(void *)(a3 + 8);
    }
    else {
      size_t v25 = v24;
    }
    if (*(char *)(a4 + 23) < 0)
    {
      int v27 = *(const void **)a4;
      size_t v26 = *(void *)(a4 + 8);
    }
    else
    {
      size_t v26 = *(unsigned __int8 *)(a4 + 23);
      int v27 = (const void *)a4;
    }
    if (v25 >= v26) {
      size_t v28 = v26;
    }
    else {
      size_t v28 = v25;
    }
    int v29 = memcmp(v27, v23, v28);
    BOOL v30 = v26 < v25;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30)
    {
      *(_OWORD *)long long v54 = *(_OWORD *)a3;
      uint64_t v55 = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v31 = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_OWORD *)std::string __p = v31;
      uint64_t v57 = *(void *)(a3 + 40);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      char v58 = *(unsigned char *)(a3 + 48);
      sub_1CD85894C(a3, (long long *)a4);
      sub_1CD85894C(a4, (long long *)v54);
      if (SHIBYTE(v57) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v55) < 0) {
        operator delete(v54[0]);
      }
      char v32 = *(unsigned char *)(a2 + 23);
      BOOL v33 = v32 < 0;
      if (v32 >= 0) {
        long long v34 = (const void *)a2;
      }
      else {
        long long v34 = *(const void **)a2;
      }
      size_t v35 = v32 & 0x7F;
      if (v33) {
        size_t v36 = *(void *)(a2 + 8);
      }
      else {
        size_t v36 = v35;
      }
      if (*(char *)(a3 + 23) < 0)
      {
        BOOL v38 = *(const void **)a3;
        size_t v37 = *(void *)(a3 + 8);
      }
      else
      {
        size_t v37 = *(unsigned __int8 *)(a3 + 23);
        BOOL v38 = (const void *)a3;
      }
      if (v36 >= v37) {
        size_t v39 = v37;
      }
      else {
        size_t v39 = v36;
      }
      int v40 = memcmp(v38, v34, v39);
      BOOL v41 = v37 < v36;
      if (v40) {
        BOOL v41 = v40 < 0;
      }
      if (v41)
      {
        *(_OWORD *)long long v54 = *(_OWORD *)a2;
        uint64_t v55 = *(void *)(a2 + 16);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        long long v42 = *(_OWORD *)(a2 + 24);
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(_OWORD *)std::string __p = v42;
        uint64_t v57 = *(void *)(a2 + 40);
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        char v58 = *(unsigned char *)(a2 + 48);
        sub_1CD85894C(a2, (long long *)a3);
        sub_1CD85894C(a3, (long long *)v54);
        if (SHIBYTE(v57) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v55) < 0) {
          operator delete(v54[0]);
        }
        char v43 = *(unsigned char *)(a1 + 23);
        BOOL v44 = v43 < 0;
        if (v43 >= 0) {
          size_t v45 = (const void *)a1;
        }
        else {
          size_t v45 = *(const void **)a1;
        }
        size_t v46 = v43 & 0x7F;
        if (v44) {
          size_t v47 = *(void *)(a1 + 8);
        }
        else {
          size_t v47 = v46;
        }
        if (*(char *)(a2 + 23) < 0)
        {
          int64x2_t v49 = *(const void **)a2;
          size_t v48 = *(void *)(a2 + 8);
        }
        else
        {
          size_t v48 = *(unsigned __int8 *)(a2 + 23);
          int64x2_t v49 = (const void *)a2;
        }
        if (v47 >= v48) {
          size_t v50 = v48;
        }
        else {
          size_t v50 = v47;
        }
        int v51 = memcmp(v49, v45, v50);
        BOOL v52 = v48 < v47;
        if (v51) {
          BOOL v52 = v51 < 0;
        }
        if (v52)
        {
          *(_OWORD *)long long v54 = *(_OWORD *)a1;
          uint64_t v55 = *(void *)(a1 + 16);
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          long long v53 = *(_OWORD *)(a1 + 24);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          *(_OWORD *)std::string __p = v53;
          uint64_t v57 = *(void *)(a1 + 40);
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          char v58 = *(unsigned char *)(a1 + 48);
          sub_1CD85894C(a1, (long long *)a2);
          sub_1CD85894C(a2, (long long *)v54);
          if (SHIBYTE(v57) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v55) < 0) {
            operator delete(v54[0]);
          }
        }
      }
    }
  }
}

void sub_1CD0CE368(uint64_t a1, unsigned __int8 *__s1, uint64_t a3)
{
  char v6 = *(unsigned char *)(a1 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    long long v8 = (const void *)a1;
  }
  else {
    long long v8 = *(const void **)a1;
  }
  size_t v9 = v6 & 0x7F;
  if (v7) {
    size_t v10 = *(void *)(a1 + 8);
  }
  else {
    size_t v10 = v9;
  }
  if ((char)__s1[23] < 0)
  {
    uint64_t v12 = *(unsigned __int8 **)__s1;
    size_t v11 = *((void *)__s1 + 1);
  }
  else
  {
    size_t v11 = __s1[23];
    uint64_t v12 = __s1;
  }
  if (v10 >= v11) {
    size_t v13 = v11;
  }
  else {
    size_t v13 = v10;
  }
  int v14 = memcmp(v12, v8, v13);
  BOOL v15 = v11 < v10;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  size_t v16 = *(unsigned __int8 *)(a3 + 23);
  size_t v17 = (const void *)a3;
  if (v15)
  {
    if ((v16 & 0x80) != 0)
    {
      size_t v17 = *(const void **)a3;
      size_t v16 = *(void *)(a3 + 8);
    }
    if (v11 >= v16) {
      size_t v21 = v16;
    }
    else {
      size_t v21 = v11;
    }
    int v22 = memcmp(v17, v12, v21);
    BOOL v23 = v22 < 0;
    if (!v22) {
      BOOL v23 = v16 < v11;
    }
    size_t v24 = (_OWORD *)(a1 + 24);
    if (v23)
    {
      *(_OWORD *)size_t v50 = *(_OWORD *)a1;
      uint64_t v51 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      *(_OWORD *)std::string __p = *v24;
      uint64_t v53 = *(void *)(a1 + 40);
      *(void *)size_t v24 = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      unsigned __int8 v54 = *(unsigned char *)(a1 + 48);
      uint64_t v25 = a1;
    }
    else
    {
      *(_OWORD *)size_t v50 = *(_OWORD *)a1;
      uint64_t v51 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      *(_OWORD *)std::string __p = *v24;
      uint64_t v53 = *(void *)(a1 + 40);
      *(void *)size_t v24 = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      unsigned __int8 v54 = *(unsigned char *)(a1 + 48);
      sub_1CD85894C(a1, (long long *)__s1);
      sub_1CD85894C((uint64_t)__s1, (long long *)v50);
      if (SHIBYTE(v53) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(v50[0]);
      }
      signed __int8 v39 = __s1[23];
      BOOL v40 = v39 < 0;
      if (v39 >= 0) {
        BOOL v41 = __s1;
      }
      else {
        BOOL v41 = *(unsigned __int8 **)__s1;
      }
      size_t v42 = v39 & 0x7F;
      if (v40) {
        size_t v43 = *((void *)__s1 + 1);
      }
      else {
        size_t v43 = v42;
      }
      if (*(char *)(a3 + 23) < 0)
      {
        size_t v45 = *(const void **)a3;
        size_t v44 = *(void *)(a3 + 8);
      }
      else
      {
        size_t v44 = *(unsigned __int8 *)(a3 + 23);
        size_t v45 = (const void *)a3;
      }
      if (v43 >= v44) {
        size_t v46 = v44;
      }
      else {
        size_t v46 = v43;
      }
      int v47 = memcmp(v45, v41, v46);
      BOOL v48 = v44 < v43;
      if (v47) {
        BOOL v48 = v47 < 0;
      }
      if (!v48) {
        return;
      }
      *(_OWORD *)size_t v50 = *(_OWORD *)__s1;
      uint64_t v51 = *((void *)__s1 + 2);
      *(void *)__s1 = 0;
      *((void *)__s1 + 1) = 0;
      long long v49 = *(_OWORD *)(__s1 + 24);
      *((void *)__s1 + 2) = 0;
      *((void *)__s1 + 3) = 0;
      *(_OWORD *)std::string __p = v49;
      uint64_t v53 = *((void *)__s1 + 5);
      *((void *)__s1 + 4) = 0;
      *((void *)__s1 + 5) = 0;
      unsigned __int8 v54 = __s1[48];
      uint64_t v25 = (uint64_t)__s1;
    }
    sub_1CD85894C(v25, (long long *)a3);
    uint64_t v26 = a3;
LABEL_35:
    sub_1CD85894C(v26, (long long *)v50);
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
    return;
  }
  if ((v16 & 0x80) != 0)
  {
    size_t v17 = *(const void **)a3;
    size_t v16 = *(void *)(a3 + 8);
  }
  if (v11 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v11;
  }
  int v19 = memcmp(v17, v12, v18);
  BOOL v20 = v16 < v11;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v20)
  {
    *(_OWORD *)size_t v50 = *(_OWORD *)__s1;
    uint64_t v51 = *((void *)__s1 + 2);
    *(void *)__s1 = 0;
    *((void *)__s1 + 1) = 0;
    long long v27 = *(_OWORD *)(__s1 + 24);
    *((void *)__s1 + 2) = 0;
    *((void *)__s1 + 3) = 0;
    *(_OWORD *)std::string __p = v27;
    uint64_t v53 = *((void *)__s1 + 5);
    *((void *)__s1 + 4) = 0;
    *((void *)__s1 + 5) = 0;
    unsigned __int8 v54 = __s1[48];
    sub_1CD85894C((uint64_t)__s1, (long long *)a3);
    sub_1CD85894C(a3, (long long *)v50);
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
    char v28 = *(unsigned char *)(a1 + 23);
    BOOL v29 = v28 < 0;
    if (v28 >= 0) {
      BOOL v30 = (const void *)a1;
    }
    else {
      BOOL v30 = *(const void **)a1;
    }
    size_t v31 = v28 & 0x7F;
    if (v29) {
      size_t v32 = *(void *)(a1 + 8);
    }
    else {
      size_t v32 = v31;
    }
    if ((char)__s1[23] < 0)
    {
      long long v34 = *(unsigned __int8 **)__s1;
      size_t v33 = *((void *)__s1 + 1);
    }
    else
    {
      size_t v33 = __s1[23];
      long long v34 = __s1;
    }
    if (v32 >= v33) {
      size_t v35 = v33;
    }
    else {
      size_t v35 = v32;
    }
    int v36 = memcmp(v34, v30, v35);
    BOOL v37 = v33 < v32;
    if (v36) {
      BOOL v37 = v36 < 0;
    }
    if (v37)
    {
      *(_OWORD *)size_t v50 = *(_OWORD *)a1;
      uint64_t v51 = *(void *)(a1 + 16);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      long long v38 = *(_OWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)std::string __p = v38;
      uint64_t v53 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      unsigned __int8 v54 = *(unsigned char *)(a1 + 48);
      sub_1CD85894C(a1, (long long *)__s1);
      uint64_t v26 = (uint64_t)__s1;
      goto LABEL_35;
    }
  }
}

BOOL sub_1CD0CE710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = *(unsigned char *)(a1 + 23);
      BOOL v7 = v6 < 0;
      if (v6 >= 0) {
        long long v8 = (const void *)a1;
      }
      else {
        long long v8 = *(const void **)a1;
      }
      size_t v9 = v6 & 0x7F;
      if (v7) {
        size_t v10 = *(void *)(a1 + 8);
      }
      else {
        size_t v10 = v9;
      }
      if (*(char *)(a2 - 33) < 0)
      {
        uint64_t v12 = *(const void **)(a2 - 56);
        size_t v11 = *(void *)(a2 - 48);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(a2 - 33);
        uint64_t v12 = (const void *)(a2 - 56);
      }
      if (v10 >= v11) {
        size_t v13 = v11;
      }
      else {
        size_t v13 = v10;
      }
      int v14 = memcmp(v12, v8, v13);
      BOOL v15 = v11 < v10;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15)
      {
        *(_OWORD *)BOOL v48 = *(_OWORD *)a1;
        uint64_t v49 = *(void *)(a1 + 16);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v16 = *(_OWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(_OWORD *)std::string __p = v16;
        uint64_t v51 = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        char v52 = *(unsigned char *)(a1 + 48);
        sub_1CD85894C(a1, (long long *)(a2 - 56));
        sub_1CD85894C(a2 - 56, (long long *)v48);
        if (SHIBYTE(v51) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v49) < 0) {
          operator delete(v48[0]);
        }
      }
      return 1;
    case 3:
      sub_1CD0CE368(a1, (unsigned __int8 *)(a1 + 56), a2 - 56);
      return 1;
    case 4:
      sub_1CD0CEA8C(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      sub_1CD0CDFF0(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      size_t v17 = (const void **)(a1 + 112);
      sub_1CD0CE368(a1, (unsigned __int8 *)(a1 + 56), a1 + 112);
      uint64_t v18 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      break;
  }
  do
  {
    char v21 = *((unsigned char *)v17 + 23);
    BOOL v22 = v21 < 0;
    if (v21 >= 0) {
      BOOL v23 = v17;
    }
    else {
      BOOL v23 = *v17;
    }
    size_t v24 = v21 & 0x7F;
    if (v22) {
      size_t v25 = (size_t)v17[1];
    }
    else {
      size_t v25 = v24;
    }
    if (*(char *)(v18 + 23) < 0)
    {
      long long v27 = *(const void **)v18;
      size_t v26 = *(void *)(v18 + 8);
    }
    else
    {
      size_t v26 = *(unsigned __int8 *)(v18 + 23);
      long long v27 = (const void *)v18;
    }
    if (v25 >= v26) {
      size_t v28 = v26;
    }
    else {
      size_t v28 = v25;
    }
    int v29 = memcmp(v27, v23, v28);
    BOOL v30 = v26 < v25;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30)
    {
      uint64_t v49 = *(void *)(v18 + 16);
      *(_OWORD *)BOOL v48 = *(_OWORD *)v18;
      *(void *)uint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      long long v31 = *(_OWORD *)(v18 + 24);
      *(void *)(v18 + 16) = 0;
      *(void *)(v18 + 24) = 0;
      *(_OWORD *)std::string __p = v31;
      uint64_t v51 = *(void *)(v18 + 40);
      *(void *)(v18 + 32) = 0;
      *(void *)(v18 + 40) = 0;
      char v52 = *(unsigned char *)(v18 + 48);
      size_t v32 = v49 >= 0 ? (void *)(HIBYTE(v49) & 0x7F) : v48[1];
      size_t v33 = v49 >= 0 ? v48 : (void **)v48[0];
      uint64_t v34 = v19;
      while (1)
      {
        uint64_t v35 = a1 + v34;
        sub_1CD85894C(a1 + v34 + 168, (long long *)(a1 + v34 + 112));
        if (v34 == -112) {
          break;
        }
        long long v38 = *(const void **)(v35 + 56);
        uint64_t v37 = v35 + 56;
        int v36 = v38;
        char v39 = *(unsigned char *)(v37 + 23);
        int v40 = v39;
        if (v39 >= 0) {
          BOOL v41 = (const void *)v37;
        }
        else {
          BOOL v41 = v36;
        }
        size_t v42 = v39 & 0x7F;
        if (v40 >= 0) {
          size_t v43 = v42;
        }
        else {
          size_t v43 = *(void *)(v37 + 8);
        }
        if (v43 >= (unint64_t)v32) {
          size_t v44 = (size_t)v32;
        }
        else {
          size_t v44 = v43;
        }
        int v45 = memcmp(v33, v41, v44);
        BOOL v46 = (unint64_t)v32 < v43;
        if (v45) {
          BOOL v46 = v45 < 0;
        }
        v34 -= 56;
        if (!v46)
        {
          uint64_t v47 = a1 + v34 + 168;
          goto LABEL_61;
        }
      }
      uint64_t v47 = a1;
LABEL_61:
      sub_1CD85894C(v47, (long long *)v48);
      if (SHIBYTE(v51) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v49) < 0) {
        operator delete(v48[0]);
      }
      if (++v20 == 8) {
        return v18 + 56 == a2;
      }
    }
    size_t v17 = (const void **)v18;
    v19 += 56;
    v18 += 56;
  }
  while (v18 != a2);
  return 1;
}

void sub_1CD0CEA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CD0CE368(a1, (unsigned __int8 *)a2, a3);
  char v8 = *(unsigned char *)(a3 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    size_t v10 = (const void *)a3;
  }
  else {
    size_t v10 = *(const void **)a3;
  }
  size_t v11 = v8 & 0x7F;
  if (v9) {
    size_t v12 = *(void *)(a3 + 8);
  }
  else {
    size_t v12 = v11;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    int v14 = *(const void **)a4;
    size_t v13 = *(void *)(a4 + 8);
  }
  else
  {
    size_t v13 = *(unsigned __int8 *)(a4 + 23);
    int v14 = (const void *)a4;
  }
  if (v12 >= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v12;
  }
  int v16 = memcmp(v14, v10, v15);
  BOOL v17 = v13 < v12;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (v17)
  {
    *(_OWORD *)BOOL v41 = *(_OWORD *)a3;
    uint64_t v42 = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    long long v18 = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(_OWORD *)std::string __p = v18;
    uint64_t v44 = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v45 = *(unsigned char *)(a3 + 48);
    sub_1CD85894C(a3, (long long *)a4);
    sub_1CD85894C(a4, (long long *)v41);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    char v19 = *(unsigned char *)(a2 + 23);
    BOOL v20 = v19 < 0;
    if (v19 >= 0) {
      char v21 = (const void *)a2;
    }
    else {
      char v21 = *(const void **)a2;
    }
    size_t v22 = v19 & 0x7F;
    if (v20) {
      size_t v23 = *(void *)(a2 + 8);
    }
    else {
      size_t v23 = v22;
    }
    if (*(char *)(a3 + 23) < 0)
    {
      size_t v25 = *(const void **)a3;
      size_t v24 = *(void *)(a3 + 8);
    }
    else
    {
      size_t v24 = *(unsigned __int8 *)(a3 + 23);
      size_t v25 = (const void *)a3;
    }
    if (v23 >= v24) {
      size_t v26 = v24;
    }
    else {
      size_t v26 = v23;
    }
    int v27 = memcmp(v25, v21, v26);
    BOOL v28 = v24 < v23;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      *(_OWORD *)BOOL v41 = *(_OWORD *)a2;
      uint64_t v42 = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      long long v29 = *(_OWORD *)(a2 + 24);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(_OWORD *)std::string __p = v29;
      uint64_t v44 = *(void *)(a2 + 40);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      char v45 = *(unsigned char *)(a2 + 48);
      sub_1CD85894C(a2, (long long *)a3);
      sub_1CD85894C(a3, (long long *)v41);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      char v30 = *(unsigned char *)(a1 + 23);
      BOOL v31 = v30 < 0;
      if (v30 >= 0) {
        size_t v32 = (const void *)a1;
      }
      else {
        size_t v32 = *(const void **)a1;
      }
      size_t v33 = v30 & 0x7F;
      if (v31) {
        size_t v34 = *(void *)(a1 + 8);
      }
      else {
        size_t v34 = v33;
      }
      if (*(char *)(a2 + 23) < 0)
      {
        int v36 = *(const void **)a2;
        size_t v35 = *(void *)(a2 + 8);
      }
      else
      {
        size_t v35 = *(unsigned __int8 *)(a2 + 23);
        int v36 = (const void *)a2;
      }
      if (v34 >= v35) {
        size_t v37 = v35;
      }
      else {
        size_t v37 = v34;
      }
      int v38 = memcmp(v36, v32, v37);
      BOOL v39 = v35 < v34;
      if (v38) {
        BOOL v39 = v38 < 0;
      }
      if (v39)
      {
        *(_OWORD *)BOOL v41 = *(_OWORD *)a1;
        uint64_t v42 = *(void *)(a1 + 16);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v40 = *(_OWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(_OWORD *)std::string __p = v40;
        uint64_t v44 = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        char v45 = *(unsigned char *)(a1 + 48);
        sub_1CD85894C(a1, (long long *)a2);
        sub_1CD85894C(a2, (long long *)v41);
        if (SHIBYTE(v44) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
      }
    }
  }
}

void *sub_1CD0CED30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v10 = *(void *)(a1 + 16) - (void)v3;
  if (v10 >> 3 > v6) {
    unint64_t v6 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  if (v11)
  {
    if (v11 >> 60) {
      sub_1CB833614();
    }
    size_t v12 = (char *)operator new(16 * v11);
  }
  else
  {
    size_t v12 = 0;
  }
  size_t v13 = &v12[16 * v5];
  *(void *)size_t v13 = a2;
  *((void *)v13 + 1) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
  }
  int v14 = &v12[16 * v11];
  size_t v15 = v13 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (!v3) {
      return v15;
    }
    goto LABEL_21;
  }
  do
  {
    long long v16 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v13 - 1) = v16;
    v13 -= 16;
    void *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v3 = *(void **)a1;
  BOOL v17 = *(void **)(a1 + 8);
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  for (*(void *)(a1 + 16) = v14; v17 != v3; v17 -= 2)
  {
    long long v18 = (std::__shared_weak_count *)*(v17 - 1);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v3) {
LABEL_21:
  }
    operator delete(v3);
  return v15;
}

void sub_1CD0CEE98(unsigned int *a1, size_t count)
{
  uint64_t v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (!v4 && (count || (uint64_t v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)*((void *)a1 + 13);
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = v6[2 * i + 1];
      if (v8)
      {
        do
        {
          uint64_t v9 = *(void *)(v8 + 80);
          uint64_t v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 88))];
          *(void *)(v8 + 80) = *((void *)v10 + 1);
          ++*((_DWORD *)v10 + 1);
          *((void *)v10 + 1) = v8;
          uint64_t v8 = v9;
        }
        while (v9);
      }
    }
  }
  free(v6);
  *a1 = count;
  *((void *)a1 + 13) = v4;
}

llvm *sub_1CD0CEF80(llvm *result)
{
  unint64_t v1 = *((void *)result + 3);
  if (v1 >= 8)
  {
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *((void *)result + 3);
      uint64_t v3 = result;
      if ((v1 & 2) == 0) {
        BOOL result = *(llvm **)result;
      }
      (*(void (**)(llvm *))((v1 & 0xFFFFFFFFFFFFFFF8) + 16))(result);
      LOBYTE(v1) = v2;
      BOOL result = v3;
    }
    if ((v1 & 2) == 0) {
      llvm::deallocate_buffer(*(llvm **)result, *((void **)result + 1));
    }
  }
  return result;
}

void sub_1CD0CEFF0()
{
}

unint64_t llvm::vfs::OnDiskOutputBackend::makeAbsolute@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  __int16 v8 = 261;
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  unint64_t result = llvm::sys::fs::make_absolute((uint64_t)a1);
  if (result) {
    operator new();
  }
  *a2 = 0;
  return result;
}

void *sub_1CD0CF158(void *result, uint64_t a2, int a3)
{
  if (a3) {
    operator new();
  }
  *unint64_t result = 0;
  return result;
}

uint64_t sub_1CD0CF1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  __int16 v12 = 261;
  v11[0] = a2;
  v11[1] = a3;
  llvm::vfs::OutputBackend::createFile(v6, (uint64_t)v11, a4, (uint64_t)v18);
  sub_1CD8599B4(&v13, v18, (llvm::vfs::OutputFile *)&v14);
  if (v19)
  {
    uint64_t v7 = *(void *)&v18[0];
    *(void *)&v18[0] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    sub_1CD858D18((uint64_t)v18);
  }
  uint64_t v8 = v13;
  if (v13)
  {
    char v9 = *(unsigned char *)(a5 + 8) | 1;
  }
  else
  {
    uint64_t v8 = *((void *)&v15 + 1);
    *((void *)&v15 + 1) = 0;
    char v9 = *(unsigned char *)(a5 + 8) & 0xFE;
  }
  *(unsigned char *)(a5 + 8) = v9;
  *(void *)a5 = v8;
  return sub_1CD858D18((uint64_t)&v14);
}

void *sub_1CD0CF2F4(void *a1, uint64_t a2, uint64_t a3, char a4, void *(*a5)(void **__return_ptr, uint64_t), uint64_t a6)
{
  v18[0] = a2;
  v18[1] = a3;
  char v17 = a4;
  v16[0] = a5;
  v16[1] = a6;
  unint64_t result = a5(&v15, a6);
  v14[0] = &v17;
  v14[1] = v18;
  void v14[2] = v16;
  uint64_t v8 = v15;
  if (!v15)
  {
    *a1 = 0;
    return result;
  }
  long long v15 = 0;
  if ((*(unsigned int (**)(void *, void *))(*v8 + 48))(v8, &llvm::ErrorList::ID))
  {
    *a1 = 0;
    char v9 = (uint64_t *)v8[1];
    uint64_t v10 = (uint64_t *)v8[2];
    if (v9 != v10)
    {
      unint64_t v11 = 0;
      do
      {
        size_t v22 = v11;
        uint64_t v12 = *v9;
        *char v9 = 0;
        uint64_t v20 = v12;
        sub_1CD0CF778(&v21, &v20, (uint64_t)v14);
        sub_1CD451630(&v22, &v21, &v23);
        unint64_t v11 = v23;
        *a1 = v23;
        size_t v23 = 0;
        if (v21) {
          (*(void (**)(char *))(*(void *)v21 + 8))(v21);
        }
        uint64_t v13 = v20;
        uint64_t v20 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        if (v22) {
          (*(void (**)(char *))(*(void *)v22 + 8))(v22);
        }
        ++v9;
      }
      while (v9 != v10);
    }
  }
  else
  {
    char v19 = v8;
    sub_1CD0CF778(a1, &v19, (uint64_t)v14);
    uint64_t v8 = v19;
    if (!v19) {
      goto LABEL_16;
    }
  }
  (*(void (**)(void *))(*v8 + 8))(v8);
LABEL_16:
  unint64_t result = v15;
  if (v15) {
    return (void *)(*(uint64_t (**)(void *))(*v15 + 8))(v15);
  }
  return result;
}

void sub_1CD0CF500(uint64_t a1@<X0>, void *a2@<X8>)
{
  v21[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  int v15 = 0;
  __src = v21;
  *(_OWORD *)long long __len = xmmword_1CFAC3020;
  uint64_t v5 = *(uint64_t **)a1;
  __int16 v18 = 261;
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)&long long __dst = v7;
  *((void *)&__dst + 1) = v6;
  if (sub_1CD0E5038((uint64_t)&__dst, &v15, &__src, 0, 1, 0, 438)) {
    operator new();
  }
  if ((*(unsigned char *)(v4 + 8) & 4) != 0) {
    llvm::sys::RemoveFileOnSignal((std::string::value_type *)__src, __len[0]);
  }
  uint64_t v8 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v17 = 0;
    goto LABEL_16;
  }
  size_t v9 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len[0] >= 0x17)
  {
    size_t v11 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17) {
      size_t v11 = __len[0] | 7;
    }
    size_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v9;
    unint64_t v17 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v17) = __len[0];
    p_dst = &__dst;
    if (!__len[0]) {
      goto LABEL_15;
    }
  }
  memmove(p_dst, v8, v9);
LABEL_15:
  *((unsigned char *)p_dst + v9) = 0;
LABEL_16:
  uint64_t v13 = (void **)(v4 + 40);
  if (*(unsigned char *)(v4 + 64))
  {
    if (*(char *)(v4 + 63) < 0) {
      operator delete(*v13);
    }
    *(_OWORD *)uint64_t v13 = __dst;
    *(void *)(v4 + 56) = v17;
  }
  else
  {
    *(_OWORD *)uint64_t v13 = __dst;
    *(void *)(v4 + 56) = v17;
    *(unsigned char *)(v4 + 64) = 1;
  }
  uint64_t v14 = *(void *)(a1 + 16);
  *(_DWORD *)uint64_t v14 = v15;
  *(unsigned char *)(v14 + 4) = 1;
  *a2 = 0;
  if (__src != v21) {
    free(__src);
  }
}

uint64_t sub_1CD0CF778(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ECError::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (!result) {
    goto LABEL_5;
  }
  uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  unint64_t v10 = v9;
  uint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v18 = 2;
  char v19 = std::generic_category();
  uint64_t result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t *))(*(void *)v10 + 32))(v10, v8, &v18);
  if ((result & 1) == 0)
  {
    uint64_t result = ((uint64_t (*)(const std::error_category *, unsigned __int8 **, void))v19->equivalent_0)(v19, &v20, v18);
    if (!result) {
      goto LABEL_5;
    }
  }
  if ((**(unsigned char **)a3 & 0x10) != 0)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    size_t v12 = *(unsigned __int8 **)v11;
    unint64_t v13 = *(void *)(v11 + 8);
    unint64_t v14 = sub_1CD0E3AC0(*(unsigned __int8 **)v11, v13, 0);
    if (v13 >= v14) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v14 == -1) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = v15;
    }
    __int16 v22 = 261;
    if (v14 == -1) {
      unint64_t v17 = 0;
    }
    else {
      unint64_t v17 = v12;
    }
    uint64_t v20 = v17;
    unint64_t v21 = v16;
    if (llvm::sys::fs::create_directories((void **)&v20, 1, 504)) {
      operator new();
    }
    (**(void (***)(void))(a3 + 16))(*(void *)(*(void *)(a3 + 16) + 8));
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
LABEL_5:
    *a1 = v7;
  }
  return result;
}

uint64_t sub_1CD0CF99C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  int v16 = 0;
  int v5 = *(unsigned __int8 *)(v4 + 8);
  if ((~v5 & 3) != 0) {
    int v6 = v5 & 1;
  }
  else {
    int v6 = 3;
  }
  __int16 v15 = 260;
  *(void *)unint64_t v14 = v4 + 16;
  uint64_t result = llvm::sys::fs::openFile(v14, &v16, 0, 2, v6, 438);
  if (result)
  {
    __int16 v15 = 260;
    *(void *)unint64_t v14 = v4 + 16;
    operator new();
  }
  uint64_t v8 = a1[1];
  *(_DWORD *)uint64_t v8 = v16;
  *(unsigned char *)(v8 + 4) = 1;
  if ((*(unsigned char *)(v4 + 8) & 4) != 0)
  {
    char v9 = *(unsigned char *)(v4 + 39);
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      uint64_t v11 = (std::string::value_type *)(v4 + 16);
    }
    else {
      uint64_t v11 = *(std::string::value_type **)(v4 + 16);
    }
    std::string::size_type v12 = v9 & 0x7F;
    if (v10) {
      std::string::size_type v13 = *(void *)(v4 + 24);
    }
    else {
      std::string::size_type v13 = v12;
    }
    llvm::sys::RemoveFileOnSignal(v11, v13);
  }
  *a2 = 0;
  return result;
}

uint64_t sub_1CD0CFACC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  if (result) {
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

void sub_1CD0CFAE4()
{
}

void sub_1CD0CFB8C()
{
}

void sub_1CD0CFBA0(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 16) + 8))(v1);
  operator new();
}

void *sub_1CD0CFDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  v14[0] = a2;
  v14[1] = a3;
  unsigned __int16 v13 = a4;
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    if (!(*(unsigned int (**)(uint64_t, void *, unsigned __int16 *))(*(void *)v7 + 48))(v7, v14, &v13)) {
      operator new();
    }
    return (void *)sub_1CD0CF1EC(a1, a2, a3, a4, a5);
  }
  else
  {
    sub_1CB920400();
    return sub_1CD0CFF24(v12);
  }
}

void *sub_1CD0CFF24(void *a1)
{
  *a1 = &unk_1F2646130;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1F2646088;
  uint64_t v4 = (_DWORD *)a1[2];
  if (v4)
  {
    int v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
    }
  }
  return a1;
}

void sub_1CD0D0020(void *a1)
{
  *a1 = &unk_1F2646130;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1F2646088;
  uint64_t v4 = (_DWORD *)a1[2];
  if (v4)
  {
    int v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD0D013C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 8))(&v3);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 8))(&v2);
  operator new();
}

uint64_t sub_1CD0D022C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CD0CF1EC(a1, a2, a3, a4, (uint64_t)&v18);
  uint64_t v11 = v18;
  if ((v19 & 1) != 0 && v18)
  {
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v11;
    return result;
  }
  sub_1CD0CF1EC(a1 + 24, a2, a3, a4, (uint64_t)&v18);
  std::string::size_type v12 = v18;
  if ((v19 & 1) != 0 && v18)
  {
    int v16 = v18;
    (*(void (**)(char **__return_ptr, char *))(*(void *)v11 + 48))(&v15, v11);
    sub_1CD5E5368(&v16, &v15, &v17);
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v17;
    unint64_t v17 = 0;
    if (v15) {
      (*(void (**)(char *))(*(void *)v15 + 8))(v15);
    }
    if (v16) {
      (*(void (**)(char *))(*(void *)v16 + 8))(v16);
    }
    return (*(uint64_t (**)(char *))(*(void *)v11 + 8))(v11);
  }
  if ((*(unsigned int (**)(char *, void *))(*(void *)v11 + 24))(v11, &llvm::vfs::NullOutputFileImpl::ID))
  {
    (*(void (**)(void **__return_ptr, char *))(*(void *)v11 + 48))(&v14, v11);
    sub_1CD4515D0(&v14);
    if (v14) {
      (*(void (**)(void *))(*v14 + 8))(v14);
    }
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = v12;
    return (*(uint64_t (**)(char *))(*(void *)v11 + 8))(v11);
  }
  if (!(*(unsigned int (**)(char *, void *))(*(void *)v12 + 24))(v12, &llvm::vfs::NullOutputFileImpl::ID))operator new(); {
  (*(void (**)(void **__return_ptr, char *))(*(void *)v12 + 48))(&v13, v12);
  }
  sub_1CD4515D0(&v13);
  if (v13) {
    (*(void (**)(void *))(*v13 + 8))(v13);
  }
  *(unsigned char *)(a5 + 8) &= ~1u;
  *(void *)a5 = v11;
  return (*(uint64_t (**)(char *))(*(void *)v12 + 8))(v12);
}

void *sub_1CD0D07C0(void *a1)
{
  a1[3] = &unk_1F2646088;
  uint64_t v2 = (_DWORD *)a1[5];
  if (v2)
  {
    int v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 32))(v2);
    }
  }
  *a1 = &unk_1F2646088;
  uint64_t v4 = (_DWORD *)a1[2];
  if (v4)
  {
    int v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
    }
  }
  return a1;
}

void sub_1CD0D0898(void *a1)
{
  a1[3] = &unk_1F2646088;
  uint64_t v2 = (_DWORD *)a1[5];
  if (v2)
  {
    int v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 32))(v2);
    }
  }
  *a1 = &unk_1F2646088;
  uint64_t v4 = (_DWORD *)a1[2];
  if (v4)
  {
    int v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD0D0990(uint64_t a1)
{
}

uint64_t sub_1CD0D0998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  return sub_1CD0D022C(a1 - 24, a2, a3, a4, a5);
}

_DWORD *sub_1CD0D09A4(void *a1)
{
  *a1 = &unk_1F2646088;
  uint64_t v2 = (_DWORD *)a1[2];
  if (v2)
  {
    int v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 32))(v2);
    }
  }
  *(a1 - 3) = &unk_1F2646088;
  uint64_t result = (_DWORD *)*(a1 - 1);
  if (result)
  {
    int v5 = result[2] - 1;
    result[2] = v5;
    if (!v5) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 32))(result);
    }
  }
  return result;
}

void sub_1CD0D0A78(void *a1)
{
  *a1 = &unk_1F2646088;
  uint64_t v2 = (_DWORD *)a1[2];
  if (v2)
  {
    int v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 32))(v2);
    }
  }
  *(a1 - 3) = &unk_1F2646088;
  uint64_t v4 = (_DWORD *)*(a1 - 1);
  if (v4)
  {
    int v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0D0B70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(a1 + 8) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1CD0D0C40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(a1 + 8) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8077774924);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CD0D0D30@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = *(const char **)(a1 + 24);
  if (*(const char **)(a1 + 40) != v4)
  {
    *(void *)(a1 + 40) = v4;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 8), v4);
  }
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 80) + 40))(&v7);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 88) + 40))(&v6);
  sub_1CD5E5368(&v7, &v6, a2);
  if (v6) {
    (*(void (**)(char *))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v7;
  if (v7) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)v7 + 8))(v7);
  }
  return result;
}

char *sub_1CD0D0E38@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = *(const char **)(a1 + 24);
  if (*(const char **)(a1 + 40) != v4)
  {
    *(void *)(a1 + 40) = v4;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 8), v4);
  }
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 80) + 48))(&v7);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 88) + 48))(&v6);
  sub_1CD5E5368(&v7, &v6, a2);
  if (v6) {
    (*(void (**)(char *))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v7;
  if (v7) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t sub_1CD0D0F40(uint64_t a1)
{
  return a1 + 8;
}

llvm::raw_ostream *sub_1CD0D0F48(uint64_t a1, const char *a2, size_t a3)
{
  int v6 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  llvm::raw_ostream::write(v6, a2, a3);
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88));

  return llvm::raw_ostream::write(v7, a2, a3);
}

uint64_t sub_1CD0D0FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(const char **)(a1 + 24);
  if (*(const char **)(a1 + 40) != v8)
  {
    *(void *)(a1 + 40) = v8;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 8), v8);
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 104))(v9, a2, a3, a4);
  BOOL v10 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88))
                            + 104);

  return v10();
}

uint64_t sub_1CD0D10F8(uint64_t a1)
{
  unint64_t v1 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  return (*(uint64_t (**)(void *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1CD0D1174(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1CD0D117C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88))
                           + 16);

  return v5();
}

uint64_t sub_1CD0D124C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88))
                             + 48);
    return v4();
  }
  return result;
}

uint64_t sub_1CD0D1320(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88))
                             + 56);
    return v4();
  }
  return result;
}

uint64_t sub_1CD0D13F4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88))
                           + 64);

  return v5();
}

uint64_t sub_1CD0D14C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t result = *(void *)(a1 + 16);
    if (result) {
      return MEMORY[0x1D25D9CB0](result, 0x1000C8077774924);
    }
  }
  return result;
}

void sub_1CD0D1590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8077774924);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0D167C(uint64_t a1, uint64_t a2)
{
  return sub_1CD0D117C(a1 - 8, a2);
}

uint64_t sub_1CD0D1684(uint64_t a1)
{
  return sub_1CD0D124C(a1 - 8);
}

uint64_t sub_1CD0D168C(uint64_t a1)
{
  return sub_1CD0D1320(a1 - 8);
}

uint64_t sub_1CD0D1694(uint64_t a1, uint64_t a2)
{
  return sub_1CD0D13F4(a1 - 8, a2);
}

llvm::raw_ostream *sub_1CD0D169C(uint64_t a1, const char *a2, size_t a3)
{
  return sub_1CD0D0F48(a1 - 8, a2, a3);
}

uint64_t sub_1CD0D16A4(uint64_t a1)
{
  unint64_t v1 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72));
  return (*(uint64_t (**)(void *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1CD0D1720(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_1CD0D1728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CD0D0FEC(a1 - 8, a2, a3, a4);
}

uint64_t sub_1CD0D1730(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280))
  {
    sub_1CD859908((llvm::raw_ostream *)(a1 + 176));
    *(unsigned char *)(a1 + 280) = 0;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(unsigned char *)(a1 + 168) = 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD0D17B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280))
  {
    sub_1CD859908((llvm::raw_ostream *)(a1 + 176));
    *(unsigned char *)(a1 + 280) = 0;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(unsigned char *)(a1 + 168) = 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD0D1850(uint64_t a1@<X0>, const llvm::Twine *a2@<X2>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 280))
  {
    sub_1CD859908((llvm::raw_ostream *)(a1 + 176));
    *(unsigned char *)(a1 + 280) = 0;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(unsigned char *)(a1 + 168) = 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    __int16 v43 = 260;
    v42.__r_.__value_.__r.__words[0] = a1 + 40;
    __int16 v41 = 260;
    v40[0] = a1 + 16;
    uint64_t v11 = (llvm *)llvm::sys::fs::rename((llvm::sys::fs *)&v42, (const llvm::Twine *)v40, a2);
    *(void *)&v39.__val_ = v11;
    v39.__cat_ = v12;
    if (v11)
    {
      unsigned __int16 v13 = (llvm::raw_ostream *)llvm::errs(v11);
      unint64_t v14 = (void *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 0xEuLL)
      {
        qmemcpy(v14, "Rename failed: ", 15);
        *((void *)v13 + 4) += 15;
      }
      else
      {
        unsigned __int16 v13 = llvm::raw_ostream::write(v13, "Rename failed: ", 0xFuLL);
      }
      char v15 = *(unsigned char *)(a1 + 63);
      BOOL v16 = v15 < 0;
      if (v15 >= 0) {
        unint64_t v17 = (const char *)(a1 + 40);
      }
      else {
        unint64_t v17 = *(const char **)(a1 + 40);
      }
      size_t v18 = v15 & 0x7F;
      if (v16) {
        size_t v19 = *(void *)(a1 + 48);
      }
      else {
        size_t v19 = v18;
      }
      llvm::raw_ostream::write(v13, v17, v19);
      __int16 v43 = 260;
      v42.__r_.__value_.__r.__words[0] = a1 + 40;
      uint64_t v20 = (llvm *)llvm::sys::fs::access((unsigned __int8 *)&v42, 0);
      if (!v20)
      {
        uint64_t v20 = (llvm *)llvm::errs(v20);
        uint64_t v21 = *((void *)v20 + 4);
        if ((unint64_t)(*((void *)v20 + 3) - v21) > 8)
        {
          *(unsigned char *)(v21 + 8) = 41;
          *(void *)uint64_t v21 = *(void *)" (exists)";
          *((void *)v20 + 4) += 9;
        }
        else
        {
          uint64_t v20 = llvm::raw_ostream::write(v20, " (exists)", 9uLL);
        }
      }
      __int16 v22 = (llvm::raw_ostream *)llvm::errs(v20);
      size_t v23 = (_DWORD *)*((void *)v22 + 4);
      if (*((void *)v22 + 3) - (void)v23 > 3uLL)
      {
        *size_t v23 = 540945696;
        *((void *)v22 + 4) += 4;
      }
      else
      {
        __int16 v22 = llvm::raw_ostream::write(v22, " -> ", 4uLL);
      }
      char v24 = *(unsigned char *)(a1 + 39);
      BOOL v25 = v24 < 0;
      if (v24 >= 0) {
        size_t v26 = (const char *)(a1 + 16);
      }
      else {
        size_t v26 = *(const char **)(a1 + 16);
      }
      size_t v27 = v24 & 0x7F;
      if (v25) {
        size_t v28 = *(void *)(a1 + 24);
      }
      else {
        size_t v28 = v27;
      }
      llvm::raw_ostream::write(v22, v26, v28);
      __int16 v43 = 260;
      v42.__r_.__value_.__r.__words[0] = a1 + 16;
      long long v29 = (llvm *)llvm::sys::fs::access((unsigned __int8 *)&v42, 0);
      if (!v29)
      {
        long long v29 = (llvm *)llvm::errs(v29);
        uint64_t v30 = *((void *)v29 + 4);
        if ((unint64_t)(*((void *)v29 + 3) - v30) > 8)
        {
          *(unsigned char *)(v30 + 8) = 41;
          *(void *)uint64_t v30 = *(void *)" (exists)";
          *((void *)v29 + 4) += 9;
        }
        else
        {
          long long v29 = llvm::raw_ostream::write(v29, " (exists)", 9uLL);
        }
      }
      BOOL v31 = (llvm::raw_ostream *)llvm::errs(v29);
      size_t v32 = v31;
      size_t v33 = (_WORD *)*((void *)v31 + 4);
      if (*((void *)v31 + 3) - (void)v33 > 1uLL)
      {
        *size_t v33 = 8250;
        *((void *)v31 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v31, ": ", 2uLL);
      }
      std::error_code::message(&v42, &v39);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v34 = &v42;
      }
      else {
        size_t v34 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&v42.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = v42.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(v32, (const char *)v34, size);
      size_t v37 = (unsigned char *)*((void *)v32 + 4);
      if (*((unsigned char **)v32 + 3) == v37)
      {
        llvm::raw_ostream::write(v32, "\n", 1uLL);
      }
      else
      {
        *size_t v37 = 10;
        ++*((void *)v32 + 4);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      __int16 v43 = 260;
      v42.__r_.__value_.__r.__words[0] = a1 + 40;
      __int16 v41 = 260;
      v40[0] = a1 + 16;
      *(void *)&v39.__val_ = llvm::sys::fs::copy_file((llvm::sys::fs *)&v42, (const llvm::Twine *)v40, v36);
      v39.__cat_ = v38;
      __int16 v43 = 260;
      v42.__r_.__value_.__r.__words[0] = a1 + 40;
      llvm::sys::fs::remove((llvm::sys::fs *)&v42, (const llvm::Twine *)1);
      if (v39.__val_) {
        operator new();
      }
    }
    *a3 = 0;
  }
  else
  {
    *a3 = 0;
  }
  if ((*(unsigned char *)(a1 + 8) & 4) != 0)
  {
    uint64_t v5 = a1 + 16;
    uint64_t v6 = 40;
    if (*(unsigned char *)(a1 + 64)) {
      uint64_t v5 = a1 + 40;
    }
    else {
      uint64_t v6 = 16;
    }
    char v7 = *(unsigned char *)(v5 + 23);
    uint64_t v8 = *(const std::string::value_type **)(a1 + v6);
    if (v7 >= 0) {
      uint64_t v9 = (const std::string::value_type *)v5;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v7 >= 0) {
      std::string::size_type v10 = v7 & 0x7F;
    }
    else {
      std::string::size_type v10 = *(void *)(v5 + 8);
    }
    llvm::sys::DontRemoveFileOnSignal(v9, v10);
  }
}

void sub_1CD0D1C70(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 280))
  {
    sub_1CD859908((llvm::raw_ostream *)(a1 + 176));
    *(unsigned char *)(a1 + 280) = 0;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(unsigned char *)(a1 + 168) = 0;
  }
  uint64_t v4 = (const void **)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 39);
  if (v5 >= 0) {
    std::string::size_type v6 = v5 & 0x7F;
  }
  else {
    std::string::size_type v6 = *(void *)(a1 + 24);
  }
  if (v6 != 1) {
    goto LABEL_32;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 39);
  uint64_t v8 = (const void *)(a1 + 16);
  if ((*(unsigned char *)(a1 + 39) & 0x80) != 0)
  {
    uint64_t v8 = *v4;
    uint64_t v7 = *(void *)(a1 + 24);
  }
  int v9 = memcmp(v8, "-", v7 != 0);
  if (v7 == 1 && !v9)
  {
    *a2 = 0;
  }
  else
  {
LABEL_32:
    if (*(unsigned char *)(a1 + 64))
    {
      char v12 = *(unsigned char *)(a1 + 63);
      std::string::size_type v13 = *(void *)(a1 + 48);
      if (v12 >= 0) {
        unint64_t v14 = (const std::string::value_type *)(a1 + 40);
      }
      else {
        unint64_t v14 = *(const std::string::value_type **)(a1 + 40);
      }
      if (v12 >= 0) {
        std::string::size_type v15 = v12 & 0x7F;
      }
      else {
        std::string::size_type v15 = v13;
      }
      __int16 v19 = 261;
      unint64_t v17 = v14;
      std::string::size_type v18 = v15;
      int v16 = llvm::sys::fs::remove((llvm::sys::fs *)&v17, (const llvm::Twine *)1);
      llvm::sys::DontRemoveFileOnSignal(v14, v15);
      if (v16) {
        operator new();
      }
      *a2 = 0;
    }
    else
    {
      if (v5 >= 0) {
        std::string::size_type v10 = (const std::string::value_type *)(a1 + 16);
      }
      else {
        std::string::size_type v10 = (const std::string::value_type *)*v4;
      }
      __int16 v19 = 261;
      unint64_t v17 = v10;
      std::string::size_type v18 = v6;
      int v11 = llvm::sys::fs::remove((llvm::sys::fs *)&v17, (const llvm::Twine *)1);
      llvm::sys::DontRemoveFileOnSignal(v10, v6);
      if (v11) {
        operator new();
      }
      *a2 = 0;
    }
  }
}

uint64_t sub_1CD0D1ECC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280)) {
    return a1 + 176;
  }
  else {
    return a1 + 72;
  }
}

char *llvm::vfs::OutputConfig::setOpenFlags(char *result, unsigned char *a2)
{
  char v2 = *result;
  if (*a2)
  {
    char v4 = v2 | 1;
    *uint64_t result = v4;
    char v3 = *a2 & 2 | v4 & 0xFD;
  }
  else
  {
    char v3 = v2 & 0xFC;
  }
  *uint64_t result = v3;
  return result;
}

llvm::raw_ostream *sub_1CD0D1F18(uint64_t a1, char *a2, size_t a3, char a4)
{
  if (**(unsigned char **)a1)
  {
    **(unsigned char **)a1 = 0;
    if (a4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = *(llvm::raw_ostream **)(a1 + 8);
    int v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ",", 1uLL);
      if (a4) {
        goto LABEL_8;
      }
    }
    else
    {
      *int v9 = 44;
      ++*((void *)v8 + 4);
      if (a4) {
        goto LABEL_8;
      }
    }
  }
  std::string::size_type v10 = *(llvm::raw_ostream **)(a1 + 8);
  int v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *int v11 = 28494;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, "No", 2uLL);
  }
LABEL_8:
  char v12 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t result = (llvm::raw_ostream *)*((void *)v12 + 4);
  if (a3 <= *((void *)v12 + 3) - (void)result)
  {
    if (a3)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, a2, a3);
      *((void *)v12 + 4) += a3;
    }
  }
  else
  {
    return llvm::raw_ostream::write(v12, a2, a3);
  }
  return result;
}

void sub_1CD0D2040(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD0D2078()
{
  return "llvm.vfs.output";
}

void sub_1CD0D2084(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 2:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "invalid config");
      break;
    case 3:
      char v2 = "output already closed";
      goto LABEL_5;
    case 4:
      char v2 = "output has open proxy";
LABEL_5:
      *(unsigned char *)(a2 + 23) = 21;
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(void *)(a2 + 13) = *(void *)(v2 + 13);
      *(unsigned char *)(a2 + 21) = 0;
      break;
    default:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "output not closed");
      break;
  }
}

void llvm::vfs::OutputFile::createProxy(llvm::vfs::OutputFile *this)
{
  if (*((void *)this + 8)) {
    operator new();
  }
  (*(void (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  operator new();
}

void sub_1CD0D22CC()
{
}

uint64_t sub_1CD0D2368(uint64_t a1)
{
  if (!atomic_load_explicit(qword_1EBCFB2F0, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB2F0, (void *(*)(void))sub_1CD0D29B4, (void (*)(void *))sub_1CD85B314);
  }
  if (*(_DWORD *)(qword_1EBCFB2F0[0] + 128))
  {
    if (!atomic_load_explicit(qword_1EBCFB2F0, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB2F0, (void *(*)(void))sub_1CD0D29B4, (void (*)(void *))sub_1CD85B314);
    }
    return *(_DWORD *)(qword_1EBCFB2F0[0] + 128) == 1;
  }
  else
  {
    char v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);
    return v3(a1);
  }
}

uint64_t llvm::WithColor::colorsEnabled(llvm::WithColor *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (v1) {
    return v1 == 1;
  }
  else {
    return llvm::WithColor::AutoDetectFunction(*(void *)this);
  }
}

llvm::raw_ostream *llvm::WithColor::remark(llvm::WithColor *this)
{
  int v1 = (llvm::raw_ostream *)llvm::errs(this);

  return llvm::WithColor::remark(v1, &unk_1CFC2BB89, 0, 0);
}

llvm::WithColor *llvm::WithColor::resetColor(llvm::WithColor *this)
{
  int v2 = *((_DWORD *)this + 2);
  if (v2 != 2 && (v2 == 1 || (llvm::WithColor::AutoDetectFunction(*(void *)this) & 1) != 0)) {
    (*(void (**)(void))(**(void **)this + 32))();
  }
  return this;
}

void llvm::WithColor::~WithColor(llvm::WithColor *this)
{
  int v2 = *((_DWORD *)this + 2);
  if (v2 != 2 && (v2 == 1 || (llvm::WithColor::AutoDetectFunction(*(void *)this) & 1) != 0)) {
    (*(void (**)(void))(**(void **)this + 32))();
  }
}

{
  int v2;

  int v2 = *((_DWORD *)this + 2);
  if (v2 != 2 && (v2 == 1 || (llvm::WithColor::AutoDetectFunction(*(void *)this) & 1) != 0)) {
    (*(void (**)(void))(**(void **)this + 32))();
  }
}

char **llvm::WithColor::defaultErrorHandler(char **result)
{
  int v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if ((*(unsigned int (**)(char *, void *))(*(void *)v1 + 48))(v1, &llvm::ErrorList::ID))
    {
      int v2 = (uint64_t *)*((void *)v1 + 1);
      char v3 = (uint64_t *)*((void *)v1 + 2);
      if (v2 == v3)
      {
        char v4 = 0;
      }
      else
      {
        char v4 = 0;
        do
        {
          int v11 = v4;
          uint64_t v5 = *v2;
          uint64_t *v2 = 0;
          uint64_t v9 = v5;
          sub_1CD0D2A34(&v10, &v9);
          sub_1CD451630(&v11, &v10, &v12);
          char v4 = v12;
          char v12 = 0;
          if (v10) {
            (*(void (**)(char *))(*(void *)v10 + 8))(v10);
          }
          uint64_t v6 = v9;
          uint64_t v9 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
          if (v11) {
            (*(void (**)(char *))(*(void *)v11 + 8))(v11);
          }
          ++v2;
        }
        while (v2 != v3);
      }
      uint64_t v8 = v4;
      return (char **)(*(uint64_t (**)(char *))(*(void *)v1 + 8))(v1);
    }
    else
    {
      char v12 = v1;
      sub_1CD0D2A34(&v8, &v12);
      uint64_t result = (char **)v12;
      if (v12)
      {
        uint64_t v7 = *(uint64_t (**)(void))(*(void *)v12 + 8);
        return (char **)v7();
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return result;
}

char **llvm::WithColor::defaultWarningHandler(char **result)
{
  int v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if ((*(unsigned int (**)(char *, void *))(*(void *)v1 + 48))(v1, &llvm::ErrorList::ID))
    {
      int v2 = (uint64_t *)*((void *)v1 + 1);
      char v3 = (uint64_t *)*((void *)v1 + 2);
      if (v2 == v3)
      {
        char v4 = 0;
      }
      else
      {
        char v4 = 0;
        do
        {
          int v11 = v4;
          uint64_t v5 = *v2;
          uint64_t *v2 = 0;
          uint64_t v9 = v5;
          sub_1CD0D2B84(&v10, &v9);
          sub_1CD451630(&v11, &v10, &v12);
          char v4 = v12;
          char v12 = 0;
          if (v10) {
            (*(void (**)(char *))(*(void *)v10 + 8))(v10);
          }
          uint64_t v6 = v9;
          uint64_t v9 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
          if (v11) {
            (*(void (**)(char *))(*(void *)v11 + 8))(v11);
          }
          ++v2;
        }
        while (v2 != v3);
      }
      uint64_t v8 = v4;
      return (char **)(*(uint64_t (**)(char *))(*(void *)v1 + 8))(v1);
    }
    else
    {
      char v12 = v1;
      sub_1CD0D2B84(&v8, &v12);
      uint64_t result = (char **)v12;
      if (v12)
      {
        uint64_t v7 = *(uint64_t (**)(void))(*(void *)v12 + 8);
        return (char **)v7();
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return result;
}

uint64_t (*llvm::WithColor::defaultAutoDetectFunction(llvm::WithColor *this))(uint64_t a1)
{
  return sub_1CD0D2368;
}

uint64_t (*llvm::WithColor::setAutoDetectFunction(uint64_t (*result)()))()
{
  llvm::WithColor::AutoDetectFunction[0] = result;
  return result;
}

void sub_1CD0D29B4()
{
}

llvm *sub_1CD0D2A34(void *a1, void *a2)
{
  uint64_t result = (llvm *)(*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v5 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v6 = (llvm::raw_ostream *)llvm::errs(result);
    uint64_t v7 = llvm::WithColor::error(v6, &unk_1CFC2BB89, 0, 0);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 24))(__p, v5);
    if (v12 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if (v12 >= 0) {
      size_t v9 = v12 & 0x7F;
    }
    else {
      size_t v9 = (size_t)__p[1];
    }
    llvm::raw_ostream::write(v7, (const char *)v8, v9);
    std::string::size_type v10 = (unsigned char *)*((void *)v7 + 4);
    if ((unint64_t)v10 >= *((void *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((void *)v7 + 4) = v10 + 1;
      *std::string::size_type v10 = 10;
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    *a1 = 0;
    return (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  else
  {
    *a1 = v5;
  }
  return result;
}

llvm *sub_1CD0D2B84(void *a1, void *a2)
{
  uint64_t result = (llvm *)(*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v5 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v6 = (llvm::raw_ostream *)llvm::errs(result);
    uint64_t v7 = llvm::WithColor::warning(v6, &unk_1CFC2BB89, 0, 0);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 24))(__p, v5);
    if (v12 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if (v12 >= 0) {
      size_t v9 = v12 & 0x7F;
    }
    else {
      size_t v9 = (size_t)__p[1];
    }
    llvm::raw_ostream::write(v7, (const char *)v8, v9);
    std::string::size_type v10 = (unsigned char *)*((void *)v7 + 4);
    if ((unint64_t)v10 >= *((void *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((void *)v7 + 4) = v10 + 1;
      *std::string::size_type v10 = 10;
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    *a1 = 0;
    return (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  else
  {
    *a1 = v5;
  }
  return result;
}

uint64_t llvm::X86::updateImpliedFeatures(uint64_t __s2, char *__n, int a3, llvm::StringMapImpl *a4)
{
  uint64_t v7 = (const void *)__s2;
  uint64_t v8 = &off_1E6858540;
  while (1)
  {
    if (v8[1] == __n)
    {
      if (!__n) {
        break;
      }
      __s2 = memcmp(*v8, v7, (size_t)__n);
      if (!__s2) {
        break;
      }
    }
    v8 += 4;
    if (v8 == off_1E68591A0) {
      return __s2;
    }
  }
  int8x16_t v23 = 0uLL;
  if (!a3)
  {
    v23.i32[((unint64_t)((char *)v8 - (char *)&off_1E6858540) >> 10) & 0x7FFFFFF] |= 1 << ((v8
                                                                                                 - &off_1E6858540) >> 5);
    while (1)
    {
      uint64_t v10 = 0;
      int8x16_t v25 = v23;
      do
      {
        uint64_t v11 = 0;
        int8x16_t v24 = vandq_s8(v23, *(int8x16_t *)&(&off_1E6858540)[4 * v10 + 2]);
        while (!v24.i32[v11])
        {
          if (++v11 == 4) {
            goto LABEL_19;
          }
        }
        v23.i32[v10 >> 5] |= 1 << v10;
LABEL_19:
        ++v10;
      }
      while (v10 != 99);
      uint64_t v12 = 0;
      while (1)
      {
        __int32 v13 = v25.i32[v12];
        __int32 v14 = v23.i32[v12++];
        if (v13 != v14) {
          break;
        }
        if (v12 == 4) {
          goto LABEL_32;
        }
      }
    }
  }
  for (uint64_t i = 16; i != 32; i += 4)
  {
    if (*(_DWORD *)((char *)v8 + i))
    {
      int8x16_t v15 = vorrq_s8(*((int8x16_t *)v8 + 1), v23);
      int8x16_t v23 = v15;
      while (1)
      {
        int8x16_t v25 = v23;
        int v16 = (int8x16_t *)&xmmword_1E6859190;
        for (uint64_t j = 98; j != -1; --j)
        {
          if (((unsigned __int32)v23.i32[j >> 5] >> j))
          {
            int8x16_t v15 = vorrq_s8(*v16, v15);
            int8x16_t v23 = v15;
          }
          v16 -= 2;
        }
        uint64_t v18 = 0;
        while (1)
        {
          __int32 v19 = v25.i32[v18];
          __int32 v20 = v23.i32[v18++];
          if (v19 != v20) {
            break;
          }
          if (v18 == 4) {
            goto LABEL_32;
          }
        }
      }
    }
  }
LABEL_32:
  uint64_t v21 = 0;
  __int16 v22 = (size_t *)&qword_1E6858548;
  do
  {
    if (((unsigned __int32)v23.i32[v21 >> 5] >> v21))
    {
      if (*v22)
      {
        __s2 = (uint64_t)sub_1CC0D7D50(a4, (unsigned __int8 *)*(v22 - 1), *v22);
        *(unsigned char *)(*(void *)__s2 + 8) = a3;
      }
    }
    ++v21;
    v22 += 4;
  }
  while (v21 != 99);
  return __s2;
}

uint64_t llvm::X86::getCpuSupportsMask(unsigned __int16 **a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = 0;
    char v4 = &a1[2 * a2];
    while (2)
    {
      char v5 = 0;
      uint64_t v6 = *a1;
      switch((unint64_t)a1[1])
      {
        case 3uLL:
          if (*v6 == 28013 && *((unsigned char *)v6 + 2) == 120)
          {
            char v5 = 1;
          }
          else if (*v6 == 29555 && *((unsigned char *)v6 + 2) == 101)
          {
            char v5 = 3;
          }
          else if (*v6 == 30305 && *((unsigned char *)v6 + 2) == 120)
          {
            char v5 = 9;
          }
          else if (*v6 == 28536 && *((unsigned char *)v6 + 2) == 112)
          {
            char v5 = 13;
          }
          else if (*v6 == 28006 && *((unsigned char *)v6 + 2) == 97)
          {
            char v5 = 14;
          }
          else
          {
            if (*v6 != 28002 || *((unsigned char *)v6 + 2) != 105)
            {
              int v13 = *v6 ^ 0x6561 | *((unsigned __int8 *)v6 + 2) ^ 0x73;
              char v14 = 18;
              goto LABEL_61;
            }
            char v5 = 16;
          }
          goto LABEL_120;
        case 4uLL:
          switch(*(_DWORD *)v6)
          {
            case 0x766F6D63:
              char v5 = 0;
              break;
            case 0x32657373:
              char v5 = 4;
              break;
            case 0x33657373:
              char v5 = 5;
              break;
            case 0x32787661:
              char v5 = 10;
              break;
            case 0x34616D66:
              char v5 = 12;
              break;
            case 0x32696D62:
              char v5 = 17;
              break;
            case 0x696E6667:
              char v5 = 32;
              break;
            default:
              goto LABEL_115;
          }
          goto LABEL_120;
        case 5uLL:
          if (*(_DWORD *)v6 != 1702065011 || *((unsigned char *)v6 + 4) != 51)
          {
            int v13 = *(_DWORD *)v6 ^ 0x34657373 | *((unsigned __int8 *)v6 + 4) ^ 0x61;
            char v14 = 11;
            goto LABEL_61;
          }
          char v5 = 6;
          goto LABEL_120;
        case 6uLL:
          BOOL v16 = *(_DWORD *)v6 == 1668312944 && v6[2] == 29806;
          char v5 = 2;
          if (!v16)
          {
            if (*(_DWORD *)v6 == 879063923 && v6[2] == 12590)
            {
              char v5 = 7;
            }
            else if (*(_DWORD *)v6 == 879063923 && v6[2] == 12846)
            {
              char v5 = 8;
            }
            else
            {
              if (*(_DWORD *)v6 != 1835819888 || v6[2] != 27765) {
                goto LABEL_115;
              }
              char v5 = 19;
            }
          }
          goto LABEL_120;
        case 7uLL:
          int v13 = *(_DWORD *)v6 ^ 0x35787661 | *(_DWORD *)((char *)v6 + 3) ^ 0x66323135;
          char v14 = 15;
LABEL_61:
          BOOL v20 = v13 == 0;
          goto LABEL_117;
        case 8uLL:
          switch(*(void *)v6)
          {
            case 0x6C76323135787661:
              char v5 = 20;
              break;
            case 0x7762323135787661:
              char v5 = 21;
              break;
            case 0x7164323135787661:
              char v5 = 22;
              break;
            case 0x6463323135787661:
              char v5 = 23;
              break;
            case 0x7265323135787661:
              char v5 = 24;
              break;
            case 0x6670323135787661:
              char v5 = 25;
              break;
            default:
              goto LABEL_115;
          }
          goto LABEL_120;
        case 0xAuLL:
          if (*(void *)v6 == 0x6276323135787661 && v6[4] == 26989)
          {
            char v5 = 26;
            goto LABEL_120;
          }
          if (*(void *)v6 == 0x6669323135787661 && v6[4] == 24941)
          {
            char v5 = 27;
            goto LABEL_120;
          }
          if (*(void *)v6 == 0x716C756D6C637076 && v6[4] == 29028)
          {
            char v5 = 33;
            goto LABEL_120;
          }
          if (*(void *)v6 == 0x6E76323135787661 && v6[4] == 26990)
          {
            char v5 = 34;
            goto LABEL_120;
          }
          if (*(void *)v6 == 0x6662323135787661 && v6[4] == 13873)
          {
            char v5 = 36;
            goto LABEL_120;
          }
          goto LABEL_115;
        case 0xBuLL:
          if (*(void *)v6 != 0x6276323135787661 || *(void *)((char *)v6 + 3) != 0x32696D6276323135) {
            goto LABEL_115;
          }
          char v5 = 31;
          goto LABEL_120;
        case 0xCuLL:
          if (*(void *)v6 == 0x7634323135787661 && *((_DWORD *)v6 + 2) == 2003398254)
          {
            char v5 = 28;
          }
          else if (*(void *)v6 == 0x6634323135787661 && *((_DWORD *)v6 + 2) == 1936744813)
          {
            char v5 = 29;
          }
          else if (*(void *)v6 == 0x6962323135787661 && *((_DWORD *)v6 + 2) == 1735156084)
          {
            char v5 = 35;
          }
          else
          {
LABEL_115:
            char v5 = 0;
          }
LABEL_120:
          result |= 1 << v5;
          a1 += 2;
          if (a1 == v4) {
            return result;
          }
          continue;
        case 0xFuLL:
          if (*(void *)v6 != 0x7076323135787661 || *(void *)((char *)v6 + 7) != 0x7164746E63706F70) {
            goto LABEL_115;
          }
          char v5 = 30;
          goto LABEL_120;
        case 0x12uLL:
          char v14 = 37;
          BOOL v20 = (*(void *)v6 ^ 0x7076323135787661 | *((void *)v6 + 1) ^ 0x65737265746E6932 | v6[8] ^ 0x7463) == 0;
LABEL_117:
          if (v20) {
            char v5 = v14;
          }
          else {
            char v5 = 0;
          }
          goto LABEL_120;
        default:
          goto LABEL_120;
      }
    }
  }
  return 0;
}

char **sub_1CD0D35CC(const void *a1, size_t a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = off_1E68577B8; ; ++i)
  {
    uint64_t v6 = off_1E68577B8[v4];
    size_t v7 = v6 ? strlen(off_1E68577B8[v4]) : 0;
    if (v7 == a2) {
      break;
    }
LABEL_8:
    if (++v4 == 3) {
      return (char **)&off_1E68577D0;
    }
  }
  if (a2)
  {
    if (!memcmp(v6, a1, a2)) {
      return i;
    }
    goto LABEL_8;
  }
  return &off_1E68577B8[v4];
}

BOOL llvm::yaml::dumpTokens(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  v42[43] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  llvm::yaml::Scanner::Scanner((uint64_t)v42, a1, a2, (uint64_t)v40, 1, 0);
  while (2)
  {
    llvm::yaml::Scanner::getNext(v42, (uint64_t)&v35);
    switch(v35)
    {
      case 1:
        uint64_t v4 = (void *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v4 <= 0xDuLL)
        {
          char v5 = a3;
          uint64_t v6 = "Stream-Start: ";
          goto LABEL_44;
        }
        int8x16_t v25 = "Stream-Start: ";
        goto LABEL_76;
      case 2:
        uint64_t v7 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v7) <= 0xB)
        {
          char v5 = a3;
          uint64_t v6 = "Stream-End: ";
          goto LABEL_25;
        }
        *(_DWORD *)(v7 + 8) = 540697710;
        size_t v26 = "Stream-End: ";
        goto LABEL_82;
      case 3:
        uint64_t v8 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v8) <= 0x12)
        {
          char v5 = a3;
          uint64_t v6 = "Version-Directive: ";
          goto LABEL_31;
        }
        *(_DWORD *)(v8 + 15) = 540697974;
        size_t v27 = "Version-Directive: ";
        goto LABEL_86;
      case 4:
        size_t v9 = (void *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v9 <= 0xEuLL)
        {
          char v5 = a3;
          uint64_t v6 = "Tag-Directive: ";
          size_t v10 = 15;
          goto LABEL_54;
        }
        qmemcpy(v9, "Tag-Directive: ", 15);
        uint64_t v28 = *((void *)a3 + 4) + 15;
        goto LABEL_100;
      case 5:
        uint64_t v11 = (_OWORD *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v11 <= 0xFuLL)
        {
          char v5 = a3;
          uint64_t v6 = "Document-Start: ";
          size_t v10 = 16;
          goto LABEL_54;
        }
        *uint64_t v11 = *(_OWORD *)"Document-Start: ";
        uint64_t v28 = *((void *)a3 + 4) + 16;
        goto LABEL_100;
      case 6:
        uint64_t v4 = (void *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v4 <= 0xDuLL)
        {
          char v5 = a3;
          uint64_t v6 = "Document-End: ";
          goto LABEL_44;
        }
        int8x16_t v25 = "Document-End: ";
LABEL_76:
        void *v4 = *(void *)v25;
        uint64_t v29 = *(void *)(v25 + 6);
        goto LABEL_93;
      case 7:
        uint64_t v12 = (void *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v12 <= 0xCuLL)
        {
          char v5 = a3;
          uint64_t v6 = "Block-Entry: ";
          size_t v10 = 13;
          goto LABEL_54;
        }
        qmemcpy(v12, "Block-Entry: ", 13);
        uint64_t v28 = *((void *)a3 + 4) + 13;
        goto LABEL_100;
      case 8:
        uint64_t v13 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v13) <= 0xA)
        {
          char v5 = a3;
          uint64_t v6 = "Block-End: ";
          size_t v10 = 11;
          goto LABEL_54;
        }
        *(_DWORD *)(v13 + 7) = 540697710;
        *(void *)uint64_t v13 = *(void *)"Block-End: ";
        uint64_t v28 = *((void *)a3 + 4) + 11;
        goto LABEL_100;
      case 9:
        char v14 = (void *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v14 <= 0x15uLL)
        {
          char v5 = a3;
          uint64_t v6 = "Block-Sequence-Start: ";
          size_t v10 = 22;
          goto LABEL_54;
        }
        qmemcpy(v14, "Block-Sequence-Start: ", 22);
        uint64_t v28 = *((void *)a3 + 4) + 22;
        goto LABEL_100;
      case 10:
        uint64_t v15 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v15) <= 0x14)
        {
          char v5 = a3;
          uint64_t v6 = "Block-Mapping-Start: ";
          goto LABEL_28;
        }
        uint64_t v30 = "Block-Mapping-Start: ";
        goto LABEL_84;
      case 11:
        uint64_t v7 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v7) <= 0xB)
        {
          char v5 = a3;
          uint64_t v6 = "Flow-Entry: ";
LABEL_25:
          size_t v10 = 12;
          goto LABEL_54;
        }
        *(_DWORD *)(v7 + 8) = 540703090;
        size_t v26 = "Flow-Entry: ";
LABEL_82:
        *(void *)uint64_t v7 = *(void *)v26;
        uint64_t v28 = *((void *)a3 + 4) + 12;
        goto LABEL_100;
      case 12:
        uint64_t v15 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v15) <= 0x14)
        {
          char v5 = a3;
          uint64_t v6 = "Flow-Sequence-Start: ";
LABEL_28:
          size_t v10 = 21;
          goto LABEL_54;
        }
        uint64_t v30 = "Flow-Sequence-Start: ";
LABEL_84:
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v30;
        *(void *)(v15 + 13) = *(void *)(v30 + 13);
        uint64_t v28 = *((void *)a3 + 4) + 21;
        goto LABEL_100;
      case 13:
        uint64_t v8 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v8) <= 0x12)
        {
          char v5 = a3;
          uint64_t v6 = "Flow-Sequence-End: ";
LABEL_31:
          size_t v10 = 19;
          goto LABEL_54;
        }
        *(_DWORD *)(v8 + 15) = 540697710;
        size_t v27 = "Flow-Sequence-End: ";
LABEL_86:
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v27;
        uint64_t v28 = *((void *)a3 + 4) + 19;
        goto LABEL_100;
      case 14:
        uint64_t v16 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v16) <= 0x13)
        {
          char v5 = a3;
          uint64_t v6 = "Flow-Mapping-Start: ";
          size_t v10 = 20;
          goto LABEL_54;
        }
        *(_DWORD *)(v16 + 16) = 540701810;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)"Flow-Mapping-Start: ";
        uint64_t v28 = *((void *)a3 + 4) + 20;
        goto LABEL_100;
      case 15:
        uint64_t v17 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v17) <= 0x11)
        {
          char v5 = a3;
          uint64_t v6 = "Flow-Mapping-End: ";
          size_t v10 = 18;
          goto LABEL_54;
        }
        *(_WORD *)(v17 + 16) = 8250;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)"Flow-Mapping-End: ";
        uint64_t v28 = *((void *)a3 + 4) + 18;
        goto LABEL_100;
      case 16:
        uint64_t v18 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v18) <= 4)
        {
          char v5 = a3;
          uint64_t v6 = "Key: ";
          goto LABEL_53;
        }
        *(unsigned char *)(v18 + 4) = 32;
        int v31 = 981034315;
        goto LABEL_99;
      case 17:
        __int32 v19 = (int *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v19 <= 6uLL)
        {
          char v5 = a3;
          uint64_t v6 = "Value: ";
          goto LABEL_47;
        }
        *(int *)((char *)v19 + 3) = 540697973;
        int v32 = 1970037078;
        goto LABEL_95;
      case 18:
        BOOL v20 = (uint64_t *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v20 <= 7uLL)
        {
          char v5 = a3;
          uint64_t v6 = "Scalar: ";
          goto LABEL_50;
        }
        uint64_t v33 = 0x72616C616353;
        goto LABEL_97;
      case 19:
        uint64_t v4 = (void *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v4 <= 0xDuLL)
        {
          char v5 = a3;
          uint64_t v6 = "Block Scalar: ";
LABEL_44:
          size_t v10 = 14;
          goto LABEL_54;
        }
        void *v4 = *(void *)"Block Scalar: ";
        uint64_t v29 = *(void *)"Scalar: ";
LABEL_93:
        *(void *)((char *)v4 + 6) = v29;
        uint64_t v28 = *((void *)a3 + 4) + 14;
        goto LABEL_100;
      case 20:
        __int32 v19 = (int *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v19 <= 6uLL)
        {
          char v5 = a3;
          uint64_t v6 = "Alias: ";
LABEL_47:
          size_t v10 = 7;
          goto LABEL_54;
        }
        *(int *)((char *)v19 + 3) = 540701537;
        int v32 = 1634298945;
LABEL_95:
        *__int32 v19 = v32;
        uint64_t v28 = *((void *)a3 + 4) + 7;
        goto LABEL_100;
      case 21:
        BOOL v20 = (uint64_t *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v20 <= 7uLL)
        {
          char v5 = a3;
          uint64_t v6 = "Anchor: ";
LABEL_50:
          size_t v10 = 8;
          goto LABEL_54;
        }
        uint64_t v33 = 0x726F68636E41;
LABEL_97:
        *BOOL v20 = v33 & 0xFFFFFFFFFFFFLL | 0x203A000000000000;
        uint64_t v28 = *((void *)a3 + 4) + 8;
        goto LABEL_100;
      case 22:
        uint64_t v18 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v18) > 4)
        {
          *(unsigned char *)(v18 + 4) = 32;
          int v31 = 979853652;
LABEL_99:
          *(_DWORD *)uint64_t v18 = v31;
          uint64_t v28 = *((void *)a3 + 4) + 5;
LABEL_100:
          *((void *)a3 + 4) = v28;
        }
        else
        {
          char v5 = a3;
          uint64_t v6 = "Tag: ";
LABEL_53:
          size_t v10 = 5;
LABEL_54:
          llvm::raw_ostream::write(v5, v6, v10);
        }
LABEL_55:
        size_t v21 = v37;
        __int16 v22 = (unsigned char *)*((void *)a3 + 4);
        if (v37 <= *((void *)a3 + 3) - (void)v22)
        {
          if (v37)
          {
            memcpy(v22, v36, v37);
            __int16 v22 = (unsigned char *)(*((void *)a3 + 4) + v21);
            *((void *)a3 + 4) = v22;
          }
          int8x16_t v23 = a3;
        }
        else
        {
          int8x16_t v23 = llvm::raw_ostream::write(a3, (const char *)v36, v37);
          __int16 v22 = (unsigned char *)*((void *)v23 + 4);
        }
        if (*((unsigned char **)v23 + 3) == v22)
        {
          llvm::raw_ostream::write(v23, "\n", 1uLL);
        }
        else
        {
          unsigned char *v22 = 10;
          ++*((void *)v23 + 4);
        }
        if (v35 == 2) {
          int v24 = 3;
        }
        else {
          int v24 = v35 == 0;
        }
        if (v39 < 0) {
          operator delete(__p);
        }
        if (!v24) {
          continue;
        }
        sub_1CD85FA40((uint64_t *)v42);
        llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v40);
        return v24 == 3;
      default:
        goto LABEL_55;
    }
  }
}

BOOL llvm::yaml::scanTokens(uint64_t a1, uint64_t a2)
{
  v9[43] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  llvm::yaml::Scanner::Scanner((uint64_t)v9, a1, a2, (uint64_t)v7, 1, 0);
  do
  {
    llvm::yaml::Scanner::getNext(v9, (uint64_t)v4);
    if (v4[0] == 2) {
      int v2 = 3;
    }
    else {
      int v2 = v4[0] == 0;
    }
    if (v6 < 0) {
      operator delete(__p);
    }
  }
  while (!v2);
  sub_1CD85FA40((uint64_t *)v9);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v7);
  return v2 == 3;
}

void llvm::yaml::escape(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (!a2) {
    return;
  }
  char v6 = a1;
  uint64_t v7 = &a1[a2];
  uint64_t v8 = "\\0";
  while (1)
  {
    unint64_t v9 = *v6;
    if (*v6 <= 0x1Au)
    {
      switch(*v6)
      {
        case 0u:
          size_t v10 = a4;
          uint64_t v11 = v8;
          goto LABEL_19;
        case 7u:
          size_t v10 = a4;
          uint64_t v11 = "\\a";
          goto LABEL_19;
        case 8u:
          size_t v10 = a4;
          uint64_t v11 = "\\b";
          goto LABEL_19;
        case 9u:
          size_t v10 = a4;
          uint64_t v11 = "\\t";
          goto LABEL_19;
        case 0xAu:
          size_t v10 = a4;
          uint64_t v11 = "\\n";
          goto LABEL_19;
        case 0xBu:
          size_t v10 = a4;
          uint64_t v11 = "\\v";
          goto LABEL_19;
        case 0xCu:
          size_t v10 = a4;
          uint64_t v11 = "\\f";
          goto LABEL_19;
        case 0xDu:
          size_t v10 = a4;
          uint64_t v11 = "\\r";
          goto LABEL_19;
        default:
          goto LABEL_22;
      }
    }
    if (v9 == 27)
    {
      size_t v10 = a4;
      uint64_t v11 = "\\e";
      goto LABEL_19;
    }
    if (v9 == 34)
    {
      size_t v10 = a4;
      uint64_t v11 = "\\\"";
      goto LABEL_19;
    }
    if (v9 != 92) {
      break;
    }
    size_t v10 = a4;
    uint64_t v11 = "\\\\"";
LABEL_19:
    std::string::append(v10, v11);
LABEL_20:
    if (++v6 == v7) {
      return;
    }
  }
LABEL_22:
  if (v9 <= 0x1F)
  {
    uint64_t v12 = (char *)v64 + 1;
    if (*v6)
    {
      do
      {
        *--uint64_t v12 = a0123456789abcd_6[v9 & 0xF];
        BOOL v55 = v9 > 0xF;
        v9 >>= 4;
      }
      while (v55);
    }
    else
    {
      LOBYTE(v64[0]) = 48;
      uint64_t v12 = (char *)v64;
    }
    sub_1CC028D80(&v58, v12, (char *)v64 + 1, (char *)v64 + 1 - v12);
    uint64_t v13 = HIBYTE(v59) & 0x7F;
    if (v59 < 0) {
      uint64_t v13 = v59;
    }
    std::string::size_type v14 = 2 - v13;
    if ((unint64_t)(2 - v13) >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v8;
      uint64_t v18 = a3;
      uint64_t v19 = v16 + 1;
      p_b = (std::string *)operator new(v16 + 1);
      unint64_t v20 = v19 | 0x8000000000000000;
      a3 = v18;
      uint64_t v8 = v17;
      __b.__r_.__value_.__l.__size_ = v14;
      __b.__r_.__value_.__r.__words[2] = v20;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((unsigned char *)&__b.__r_.__value_.__s + 23) = 2 - v13;
      p_b = &__b;
      if (v13 == 2) {
        goto LABEL_39;
      }
    }
    memset(p_b, 48, v14);
LABEL_39:
    p_b->__r_.__value_.__s.__data_[v14] = 0;
    size_t v21 = std::string::insert(&__b, 0, "\\x");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v59 >= 0) {
      int8x16_t v23 = (const std::string::value_type *)&v58;
    }
    else {
      int8x16_t v23 = (const std::string::value_type *)v58;
    }
    if (v59 >= 0) {
      std::string::size_type v24 = HIBYTE(v59) & 0x7F;
    }
    else {
      std::string::size_type v24 = v59;
    }
    int8x16_t v25 = std::string::append(&v62, v23, v24);
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v64[0] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (v64[0] >= 0) {
      size_t v27 = __p;
    }
    else {
      size_t v27 = (void **)__p[0];
    }
    if (v64[0] >= 0) {
      std::string::size_type v28 = HIBYTE(v64[0]) & 0x7F;
    }
    else {
      std::string::size_type v28 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v27, v28);
    if (SHIBYTE(v64[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__b.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(v58);
    }
    goto LABEL_20;
  }
  if ((v9 & 0x80) == 0)
  {
    std::string::push_back(a4, v9);
    goto LABEL_20;
  }
  unint64_t v29 = sub_1CD0D4664(v6, v7 - v6);
  std::string::size_type v30 = HIDWORD(v29);
  if (HIDWORD(v29))
  {
    if ((int)v29 > 8231)
    {
      if (v29 == 8232)
      {
        int v31 = a4;
        int v32 = "\\L";
      }
      else
      {
        if (v29 != 8233) {
          goto LABEL_71;
        }
        int v31 = a4;
        int v32 = "\\P";
      }
    }
    else
    {
      if (v29 != 133)
      {
        if (v29 == 160)
        {
          int v31 = a4;
          int v32 = "\\_";
          goto LABEL_69;
        }
LABEL_71:
        if (WORD1(v29) <= 0x10u && (a3 & 1) == 0)
        {
          uint64_t v33 = (char *)&unk_1CFB2F8C0;
          unint64_t v34 = 548;
          do
          {
            unint64_t v35 = v34 >> 1;
            int v36 = &v33[8 * (v34 >> 1)];
            unsigned int v37 = *((_DWORD *)v36 + 1);
            int v38 = v36 + 8;
            v34 += ~(v34 >> 1);
            if (v37 < v29) {
              uint64_t v33 = v38;
            }
            else {
              unint64_t v34 = v35;
            }
          }
          while (v34);
          if (v33 == (char *)&unk_1CFB309E0 || *(_DWORD *)v33 > v29)
          {
            std::string::append(a4, (const std::string::value_type *)v6, v30);
            goto LABEL_70;
          }
        }
        unint64_t v39 = v29;
        if (v29)
        {
          long long v40 = (char *)v64 + 1;
          do
          {
            *--long long v40 = a0123456789abcd_6[v39 & 0xF];
            BOOL v55 = v39 > 0xF;
            v39 >>= 4;
          }
          while (v55);
        }
        else
        {
          LOBYTE(v64[0]) = 48;
          long long v40 = (char *)v64;
        }
        sub_1CC028D80(&v58, v40, (char *)v64 + 1, (char *)v64 + 1 - v40);
        unint64_t v41 = HIBYTE(v59) & 0x7F;
        if (v59 < 0) {
          unint64_t v41 = v59;
        }
        if (v41 <= 2)
        {
          unint64_t v42 = 2 - v41;
          *((unsigned char *)&__b.__r_.__value_.__s + 23) = 2 - v41;
          if (v41 != 2) {
            memset(&__b, 48, 2 - v41);
          }
          __b.__r_.__value_.__s.__data_[v42] = 0;
          __int16 v43 = "\\x";
          goto LABEL_100;
        }
        if (v41 <= 4)
        {
          unint64_t v44 = 4 - v41;
          *((unsigned char *)&__b.__r_.__value_.__s + 23) = 4 - v41;
          if (v41 != 4) {
            memset(&__b, 48, 4 - v41);
          }
          __b.__r_.__value_.__s.__data_[v44] = 0;
          __int16 v43 = "\\u";
          goto LABEL_100;
        }
        if (v41 <= 8)
        {
          unint64_t v45 = 8 - v41;
          *((unsigned char *)&__b.__r_.__value_.__s + 23) = 8 - v41;
          if (v41 != 8) {
            memset(&__b, 48, 8 - v41);
          }
          __b.__r_.__value_.__s.__data_[v45] = 0;
          __int16 v43 = "\\U";
LABEL_100:
          BOOL v46 = std::string::insert(&__b, 0, v43);
          std::string::size_type v47 = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          if (v59 >= 0) {
            BOOL v48 = (const std::string::value_type *)&v58;
          }
          else {
            BOOL v48 = (const std::string::value_type *)v58;
          }
          if (v59 >= 0) {
            std::string::size_type v49 = HIBYTE(v59) & 0x7F;
          }
          else {
            std::string::size_type v49 = v59;
          }
          size_t v50 = std::string::append(&v62, v48, v49);
          std::string::size_type v51 = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v64[0] = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          if (v64[0] >= 0) {
            char v52 = __p;
          }
          else {
            char v52 = (void **)__p[0];
          }
          if (v64[0] >= 0) {
            std::string::size_type v53 = HIBYTE(v64[0]) & 0x7F;
          }
          else {
            std::string::size_type v53 = (std::string::size_type)__p[1];
          }
          std::string::append(a4, (const std::string::value_type *)v52, v53);
          if (SHIBYTE(v64[0]) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__b.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v59) < 0) {
          operator delete(v58);
        }
        goto LABEL_70;
      }
      int v31 = a4;
      int v32 = "\\N";
    }
LABEL_69:
    std::string::append(v31, v32);
LABEL_70:
    v6 += (v30 - 1);
    goto LABEL_20;
  }
  char v58 = &v60;
  long long v59 = xmmword_1CDB159A0;
  sub_1CD0D47C4(65533, &v58);
  char v54 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  BOOL v55 = v54 < 0;
  uint64_t v56 = (std::string *)a4->__r_.__value_.__r.__words[0];
  if (v54 >= 0) {
    uint64_t v56 = a4;
  }
  std::string::size_type size = v54 & 0x7F;
  if (v55) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  sub_1CD85FB48(a4, (uint64_t)v56 + size, (char *)v58, (char *)v58 + v59, v59);
  if (v58 != &v60) {
    free(v58);
  }
}

uint64_t sub_1CD0D4664(unsigned __int8 *a1, unint64_t a2)
{
  if ((uint64_t)a2 < 1) {
    goto LABEL_21;
  }
  int v2 = (char)*a1;
  if ((v2 & 0x80000000) == 0)
  {
    unsigned int v3 = *a1;
    uint64_t v4 = 0x100000000;
    return v4 | v3;
  }
  if (a2 < 2) {
    goto LABEL_21;
  }
  if ((v2 & 0xE0) == 0xC0)
  {
    char v5 = a1[1];
    if ((v5 & 0xC0) == 0x80)
    {
      unsigned int v3 = v5 & 0x3F | ((v2 & 0x1F) << 6);
      if (v3 >= 0x80)
      {
        uint64_t v4 = 0x200000000;
        return v4 | v3;
      }
    }
  }
  if (a2 < 3)
  {
LABEL_21:
    unsigned int v3 = 0;
    uint64_t v4 = 0;
    return v4 | v3;
  }
  if ((v2 & 0xF0) == 0xE0)
  {
    char v6 = a1[1];
    if ((v6 & 0xC0) == 0x80)
    {
      char v7 = a1[2];
      if ((v7 & 0xC0) == 0x80)
      {
        int v8 = ((v2 & 0xF) << 12) | ((v6 & 0x3F) << 6);
        unsigned int v3 = v8 | v7 & 0x3F;
        if (v3 >= 0x800 && (v8 - 57344) <= 0xFFFFF7FF)
        {
          uint64_t v4 = 0x300000000;
          return v4 | v3;
        }
      }
    }
  }
  unsigned int v3 = 0;
  if (a2 < 4)
  {
    uint64_t v4 = 0;
    return v4 | v3;
  }
  uint64_t v4 = 0;
  if ((v2 & 0xF8) == 0xF0)
  {
    char v9 = a1[1];
    if ((v9 & 0xC0) == 0x80)
    {
      char v10 = a1[2];
      if ((v10 & 0xC0) == 0x80)
      {
        char v11 = a1[3];
        if ((v11 & 0xC0) == 0x80)
        {
          int v12 = ((v2 & 7) << 18) | ((v9 & 0x3F) << 12);
          if ((v12 - 1114112) >= 0xFFF00000)
          {
            unsigned int v3 = v11 & 0x3F | ((v10 & 0x3F) << 6) | v12;
            uint64_t v4 = 0x400000000;
            return v4 | v3;
          }
        }
      }
    }
    goto LABEL_21;
  }
  return v4 | v3;
}

uint64_t sub_1CD0D47C4(uint64_t result, void *a2)
{
  if (result <= 0x7F)
  {
    uint64_t v2 = a2[1];
    if ((unint64_t)(v2 + 1) <= a2[2])
    {
      char v3 = result;
LABEL_7:
      *(unsigned char *)(*a2 + v2) = v3;
      ++a2[1];
      return result;
    }
LABEL_17:
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (result <= 0x7FF)
  {
    unsigned int v4 = (result >> 6) | 0xFFFFFFC0;
    char v3 = result & 0x3F | 0x80;
    uint64_t v5 = a2[1];
    if ((unint64_t)(v5 + 1) <= a2[2]) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  if (!WORD1(result))
  {
    unsigned int v8 = (result >> 12) | 0xFFFFFFE0;
    uint64_t v9 = a2[1];
    if ((unint64_t)(v9 + 1) <= a2[2]) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  if (WORD1(result) <= 0x10u)
  {
    uint64_t v12 = a2[1];
    if ((unint64_t)(v12 + 1) > a2[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    unsigned int v8 = (result >> 12) & 0x3F | 0xFFFFFF80;
    *(unsigned char *)(*a2 + v12) = (result >> 18) | 0xF0;
    uint64_t v13 = a2[1];
    unint64_t v14 = a2[2];
    uint64_t v9 = v13 + 1;
    a2[1] = v13 + 1;
    if (v13 + 2 <= v14)
    {
LABEL_11:
      char v3 = result & 0x3F | 0x80;
      unsigned int v4 = (result >> 6) & 0x3F | 0xFFFFFF80;
      *(unsigned char *)(*a2 + v9) = v8;
      uint64_t v10 = a2[1];
      unint64_t v11 = a2[2];
      uint64_t v5 = v10 + 1;
      a2[1] = v10 + 1;
      if (v10 + 2 <= v11)
      {
LABEL_6:
        *(unsigned char *)(*a2 + v5) = v4;
        uint64_t v6 = a2[1];
        unint64_t v7 = a2[2];
        uint64_t v2 = v6 + 1;
        a2[1] = v6 + 1;
        if (v6 + 2 <= v7) {
          goto LABEL_7;
        }
        goto LABEL_17;
      }
LABEL_12:
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
LABEL_16:
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  return result;
}

const char *llvm::yaml::Scanner::skip_nb_char(llvm::yaml::Scanner *this, char *a2)
{
  unint64_t v3 = *((void *)this + 6) - (void)a2;
  if (!v3) {
    return a2;
  }
  int v4 = *a2;
  if (v4 == 9 || (v4 - 127) >= 0xFFFFFFA1) {
    return a2 + 1;
  }
  if ((v4 & 0x80) == 0) {
    return a2;
  }
  unint64_t v5 = sub_1CD0D4664((unsigned __int8 *)a2, v3);
  int v6 = v5;
  if (!HIDWORD(v5) || v5 == 65279) {
    return a2;
  }
  unsigned int v8 = v5 - 0x10000;
  uint64_t result = &a2[HIDWORD(v5)];
  if (v8 >= 0x100000 && (v6 - 57344) >> 1 >= 0xFFF && v6 != 133 && (v6 - 160) >> 5 >= 0x6BB) {
    return a2;
  }
  return result;
}

const char *llvm::yaml::Scanner::skip_b_break(llvm::yaml::Scanner *this, const char *a2)
{
  uint64_t v2 = (const char *)*((void *)this + 6);
  if (v2 != a2)
  {
    int v3 = *(unsigned __int8 *)a2;
    if (v3 == 10)
    {
      ++a2;
    }
    else if (v3 == 13)
    {
      if (a2 + 1 == v2)
      {
        return (const char *)*((void *)this + 6);
      }
      else if (a2[1] == 10)
      {
        a2 += 2;
      }
      else
      {
        ++a2;
      }
    }
  }
  return a2;
}

const char *llvm::yaml::Scanner::skip_s_space(const char **this, const char *a2)
{
  if (this[6] != a2 && *a2 == 32) {
    ++a2;
  }
  return a2;
}

const char *llvm::yaml::Scanner::skip_s_white(const char **this, const char *a2)
{
  if (this[6] != a2)
  {
    int v2 = *(unsigned __int8 *)a2;
    if (v2 == 32 || v2 == 9) {
      ++a2;
    }
  }
  return a2;
}

const char *llvm::yaml::Scanner::skip_ns_char(llvm::yaml::Scanner **this, llvm::yaml::Scanner *a2)
{
  if (this[6] == a2) {
    return (const char *)a2;
  }
  int v2 = *(unsigned __int8 *)a2;
  if (v2 == 9 || v2 == 32) {
    return (const char *)a2;
  }
  else {
    return llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, (char *)a2);
  }
}

uint64_t llvm::yaml::Scanner::skip_while (uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  char v4 = a3;
  int v6 = (void *)(a1 + (a3 >> 1));
  uint64_t v7 = a2;
  do
  {
    uint64_t v8 = a4;
    if (v4) {
      uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(*v6 + v7))(v6, a4);
    }
    else {
      uint64_t v9 = a2(v6, a4);
    }
    a4 = v9;
  }
  while (v9 != v8);
  return v8;
}

uint64_t llvm::yaml::Scanner::advanceWhile(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3)
{
  char v3 = a3;
  uint64_t result = *(void *)(a1 + 40);
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  uint64_t v8 = a2;
  do
  {
    uint64_t v9 = result;
    if (v3) {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v7 + v8))(v7, result);
    }
    else {
      uint64_t result = a2(v7, result);
    }
  }
  while (result != v9);
  *(_DWORD *)(a1 + 60) += v9 - *(_DWORD *)(a1 + 40);
  *(void *)(a1 + 40) = v9;
  return result;
}

uint64_t llvm::yaml::Scanner::skip(uint64_t this, unsigned int a2)
{
  *(void *)(this + 40) += a2;
  *(_DWORD *)(this + 60) += a2;
  return this;
}

uint64_t llvm::yaml::Scanner::isBlankOrBreak(const char **this, const char *a2)
{
  if (this[6] == a2) {
    return 0;
  }
  unsigned int v2 = *(unsigned __int8 *)a2;
  BOOL v3 = v2 > 0x20;
  unint64_t v4 = (0x100002600uLL >> v2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t llvm::yaml::Scanner::isLineEmpty(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  while (a2 != *(unsigned __int8 **)(a1 + 48))
  {
    unsigned int v3 = *a2;
    BOOL v4 = v3 > 0x20;
    uint64_t v5 = (1 << v3) & 0x100002600;
    if (v4 || v5 == 0) {
      break;
    }
    ++a2;
    if (!--a3) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::yaml::Scanner::consumeLineBreakIfPresent(llvm::yaml::Scanner *this)
{
  unsigned int v2 = (unsigned __int8 *)*((void *)this + 5);
  int v1 = (unsigned __int8 *)*((void *)this + 6);
  if (v1 == v2) {
    return 0;
  }
  int v3 = *v2;
  if (v3 != 10)
  {
    if (v3 == 13)
    {
      BOOL v4 = v2 + 1;
      if (v2 + 1 != v1)
      {
        int v5 = v2[1];
        int v6 = v2 + 2;
        if (v5 == 10) {
          int v1 = v6;
        }
        else {
          int v1 = v4;
        }
      }
      goto LABEL_10;
    }
    return 0;
  }
  int v1 = v2 + 1;
LABEL_10:
  int v8 = *((_DWORD *)this + 16) + 1;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = v8;
  *((void *)this + 5) = v1;
  return 1;
}

uint64_t llvm::yaml::Scanner::removeSimpleKeyCandidatesOnFlowLevel(uint64_t this, int a2)
{
  unsigned int v2 = *(_DWORD *)(this + 232);
  if (v2)
  {
    if (*(_DWORD *)(*(void *)(this + 224) + 24 * v2 - 8) == a2) {
      *(_DWORD *)(this + 232) = v2 - 1;
    }
  }
  return this;
}

uint64_t llvm::yaml::Scanner::scanDirective(llvm::yaml::Scanner *this)
{
  llvm::yaml::Scanner::unrollIndent(this, -1);
  *((_DWORD *)this + 58) = 0;
  *((unsigned char *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 5);
  llvm::yaml::Scanner::consume(this, 0x25u);
  int v3 = (char *)*((void *)this + 5);
  BOOL v4 = (char *)*((void *)this + 6);
  int v5 = v3;
  while (v4 != v5)
  {
    int v6 = v5;
    int v7 = *v5;
    if (v7 != 9 && v7 != 32)
    {
      int v5 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v5);
      if (v5 != v6) {
        continue;
      }
    }
    *((void *)this + 5) = v6;
    int v8 = (char *)(v6 - v3);
    while (1)
    {
      int v9 = *v6;
      if (v9 != 32 && v9 != 9) {
        goto LABEL_16;
      }
      if (++v6 == v4) {
        goto LABEL_15;
      }
    }
  }
  int v8 = (char *)(v4 - v3);
LABEL_15:
  int v6 = v4;
LABEL_16:
  *((void *)this + 5) = v6;
  int v25 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  if (v8 == (char *)3)
  {
    if (*(_WORD *)v3 == 16724 && v3[2] == 71)
    {
      do
      {
        if (v4 == v6)
        {
LABEL_41:
          uint64_t v15 = v4;
          goto LABEL_42;
        }
        uint64_t v15 = v6;
        int v16 = *v6;
        if (v16 == 9) {
          break;
        }
        if (v16 == 32) {
          break;
        }
        int v6 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v6);
      }
      while (v6 != v15);
      *((void *)this + 5) = v15;
      while (1)
      {
        int v17 = *v15;
        if (v17 != 32 && v17 != 9) {
          break;
        }
        if (++v15 == v4) {
          goto LABEL_41;
        }
      }
LABEL_42:
      *((void *)this + 5) = v15;
      while (v4 != v15)
      {
        uint64_t v19 = v15;
        int v20 = *v15;
        if (v20 != 9 && v20 != 32)
        {
          uint64_t v15 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v15);
          if (v15 != v19) {
            continue;
          }
        }
        goto LABEL_51;
      }
      uint64_t v19 = v4;
LABEL_51:
      *((void *)this + 5) = v19;
      int v25 = 4;
      size_t v21 = &v19[-v2];
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v8 != (char *)4) {
      return result;
    }
    if (*(_DWORD *)v3 == 1280131417)
    {
      while (v4 != v6)
      {
        uint64_t v12 = v6;
        int v13 = *v6;
        if (v13 != 9 && v13 != 32)
        {
          int v6 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v6);
          if (v6 != v12) {
            continue;
          }
        }
        goto LABEL_49;
      }
      uint64_t v12 = v4;
LABEL_49:
      *((void *)this + 5) = v12;
      int v25 = 3;
      size_t v21 = &v12[-v2];
LABEL_52:
      *(void *)&long long v26 = v2;
      *((void *)&v26 + 1) = v21;
      std::string::size_type v22 = (void *)sub_1CD85FCD8((uint64_t *)this + 10, (long long *)&v25);
      uint64_t v24 = *((void *)this + 22);
      int8x16_t v23 = (void *)((char *)this + 176);
      void *v22 = v24;
      v22[1] = v23;
      *(void *)(v24 + 8) = v22;
      *int8x16_t v23 = v22;
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::yaml::Scanner::scanValue(llvm::yaml::Scanner *this)
{
  unsigned int v2 = *((_DWORD *)this + 58);
  if (!v2)
  {
    int v12 = *((_DWORD *)this + 17);
    if (!v12)
    {
      llvm::yaml::Scanner::rollIndent((uint64_t)this, *((_DWORD *)this + 15), 10, (uint64_t *)this + 22);
      int v12 = *((_DWORD *)this + 17);
    }
    *((unsigned char *)this + 73) = v12 == 0;
    goto LABEL_15;
  }
  uint64_t v3 = *((void *)this + 28) + 24 * v2;
  uint64_t v4 = *(void *)(v3 - 24);
  int v5 = *(_DWORD *)(v3 - 16);
  *((_DWORD *)this + 58) = v2 - 1;
  int v18 = 16;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  long long v19 = *(_OWORD *)(v4 + 24);
  int v6 = (uint64_t **)((char *)this + 184);
  int v7 = (uint64_t *)((char *)this + 176);
  do
  {
    int v8 = *v6;
    int v6 = (uint64_t **)(*v6 + 1);
  }
  while (v8 != v7 && v8 != (uint64_t *)v4);
  if (v8 != v7)
  {
    int v13 = (uint64_t *)sub_1CD85FCD8((uint64_t *)this + 10, (long long *)&v18);
    uint64_t v14 = *v8;
    *int v13 = *v8;
    v13[1] = (uint64_t)v8;
    *(void *)(v14 + 8) = v13;
    *int v8 = (uint64_t)v13;
    llvm::yaml::Scanner::rollIndent((uint64_t)this, v5, 10, v13);
    *((unsigned char *)this + 73) = 0;
LABEL_15:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v18 = 17;
    uint64_t v10 = 1;
    *(void *)&long long v19 = *((void *)this + 5);
    *((void *)&v19 + 1) = 1;
    *((void *)this + 5) = v19 + 1;
    ++*((_DWORD *)this + 15);
    uint64_t v15 = (void *)sub_1CD85FCD8((uint64_t *)this + 10, (long long *)&v18);
    uint64_t v17 = *((void *)this + 22);
    int v16 = (void *)((char *)this + 176);
    void *v15 = v17;
    v15[1] = v16;
    *(void *)(v17 + 8) = v15;
    *int v16 = v15;
    return v10;
  }
  uint64_t v10 = 0;
  *((unsigned char *)this + 74) = 1;
  return v10;
}

BOOL sub_1CD0D5158(unint64_t a1, uint64_t a2)
{
  unsigned int v2 = (unsigned char *)(a2 - 1);
  if (a2 - 1 >= a1)
  {
    do
    {
      if (*v2 != 92) {
        break;
      }
      --v2;
    }
    while ((unint64_t)v2 >= a1);
  }
  return ((a2 - 1 - (void)v2) & 0x8000000000000001) == 1;
}

uint64_t llvm::yaml::Scanner::scanPlainScalar(llvm::yaml::Scanner *this)
{
  unsigned int v2 = (char *)*((void *)this + 5);
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v2 == v3) {
    goto LABEL_56;
  }
  int v4 = 0;
  unsigned int v5 = *((_DWORD *)this + 15);
  unsigned int v6 = *((_DWORD *)this + 14) + 1;
  int v26 = v5;
  long long v27 = (char *)*((void *)this + 5);
  while (2)
  {
    unsigned int v7 = *v2;
    if (v7 == 35)
    {
      int v8 = v2;
      break;
    }
    int v8 = v2;
    if (v2 == v3) {
      goto LABEL_54;
    }
    while (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
    {
      int v9 = *((_DWORD *)this + 17);
      if (v7 == 58 && v9)
      {
        if (v8 + 1 == v3
          || ((unsigned int v10 = v8[1], v11 = v10 > 0x2C, v12 = (1 << v10) & 0x100100002600, !v11)
            ? (BOOL v13 = v12 == 0)
            : (BOOL v13 = 1),
              v13))
        {
          *(void *)&long long v28 = "Found unexpected ':' while scanning a plain scalar";
          LOWORD(v31) = 259;
          uint64_t v22 = this;
          unsigned int v2 = v8;
          goto LABEL_58;
        }
      }
      else if (v7 != 58)
      {
        goto LABEL_23;
      }
      if (v3 != v8 + 1)
      {
        unsigned int v14 = v8[1];
        BOOL v11 = v14 > 0x20;
        uint64_t v15 = (1 << v14) & 0x100002600;
        if (!v11 && v15 != 0) {
          goto LABEL_55;
        }
      }
LABEL_23:
      if (v9
        && (v7 - 44 <= 0x31 && ((1 << (v7 - 44)) & 0x2800000084001) != 0 || v7 == 123 || v7 == 125))
      {
        goto LABEL_55;
      }
      uint64_t v17 = llvm::yaml::Scanner::skip_nb_char(this, v8);
      if (v17 == v8)
      {
        if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0) {
          goto LABEL_55;
        }
        break;
      }
      *((void *)this + 5) = v17;
      *((_DWORD *)this + 15) = ++v5;
      if (v17 == v3) {
        goto LABEL_54;
      }
      unsigned int v7 = *(unsigned __int8 *)v17;
      int v8 = (char *)v17;
    }
    unsigned int v2 = v8;
    do
    {
      unsigned int v18 = *v2;
      if (v18 > 0xC)
      {
        if (v18 == 13)
        {
          long long v19 = v3;
          if (v2 + 1 != v3)
          {
            if (v2[1] == 10) {
              long long v19 = v2 + 2;
            }
            else {
              long long v19 = v2 + 1;
            }
          }
LABEL_48:
          unsigned int v5 = 0;
          int v20 = *((_DWORD *)this + 16) + 1;
          *((_DWORD *)this + 15) = 0;
          *((_DWORD *)this + 16) = v20;
          int v4 = 1;
          goto LABEL_49;
        }
        if (v18 != 32) {
          goto LABEL_51;
        }
      }
      else if (v18 != 9)
      {
        if (v18 != 10) {
          goto LABEL_51;
        }
        long long v19 = v2 + 1;
        goto LABEL_48;
      }
      if (v4 && v5 < v6 && v18 == 9)
      {
        uint64_t v21 = "Found invalid tab character in indentation";
        goto LABEL_57;
      }
      long long v19 = v2 + 1;
      *((_DWORD *)this + 15) = ++v5;
LABEL_49:
      unsigned int v2 = v19;
    }
    while (v3 != v19);
    unsigned int v2 = v3;
LABEL_51:
    if (*((_DWORD *)this + 17) || v5 >= v6)
    {
      *((void *)this + 5) = v2;
      if (v2 != v3) {
        continue;
      }
LABEL_54:
      int v8 = v3;
    }
    break;
  }
LABEL_55:
  unsigned int v2 = v27;
  if (v27 == v8)
  {
LABEL_56:
    uint64_t v21 = "Got empty plain scalar";
LABEL_57:
    *(void *)&long long v28 = v21;
    LOWORD(v31) = 259;
    uint64_t v22 = this;
LABEL_58:
    sub_1CD85C714((uint64_t)v22, (llvm::Twine *)&v28, v2);
    return 0;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    LODWORD(v28) = 18;
    *((void *)&v28 + 1) = v27;
    int64_t v29 = v8 - v27;
    uint64_t v24 = (void *)sub_1CD85FCD8((uint64_t *)this + 10, &v28);
    uint64_t v25 = *((void *)this + 22);
    *uint64_t v24 = v25;
    v24[1] = (char *)this + 176;
    *(void *)(v25 + 8) = v24;
    *((void *)this + 22) = v24;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v24, v26, 0);
    *((unsigned char *)this + 73) = 0;
    return 1;
  }
}

uint64_t llvm::yaml::Scanner::scanBlockStyleIndicator(llvm::yaml::Scanner *this)
{
  int v1 = (unsigned __int8 *)*((void *)this + 5);
  if (v1 != *((unsigned __int8 **)this + 6) && ((int v2 = *v1, v2 == 124) || v2 == 62))
  {
    *((void *)this + 5) = v1 + 1;
    ++*((_DWORD *)this + 15);
  }
  else
  {
    LOBYTE(v2) = 32;
  }
  return (char)v2;
}

uint64_t llvm::yaml::Scanner::scanBlockScalarHeader(llvm::yaml::Scanner *this, char *a2, unsigned int *a3, BOOL *a4)
{
  unsigned int v6 = (unsigned __int8 *)*((void *)this + 5);
  if (v6 != *((unsigned __int8 **)this + 6) && ((int v7 = *v6, v7 == 45) || v7 == 43))
  {
    *((void *)this + 5) = v6 + 1;
    ++*((_DWORD *)this + 15);
  }
  else
  {
    LOBYTE(v7) = 32;
  }
  *a2 = v7;
  int v8 = (unsigned __int8 *)*((void *)this + 5);
  int v9 = (unsigned __int8 *)*((void *)this + 6);
  if (v8 == v9 || (int v10 = *v8, (v10 - 49) > 8))
  {
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = v10 - 48;
    *((void *)this + 5) = ++v8;
    ++*((_DWORD *)this + 15);
  }
  *a3 = v11;
  if (*a2 == 32)
  {
    if (v8 != v9 && ((int v12 = *v8, v12 == 45) || v12 == 43))
    {
      *((void *)this + 5) = v8 + 1;
      ++*((_DWORD *)this + 15);
    }
    else
    {
      LOBYTE(v12) = 32;
    }
    *a2 = v12;
    int v8 = (unsigned __int8 *)*((void *)this + 5);
    int v9 = (unsigned __int8 *)*((void *)this + 6);
  }
  if (v9 == v8)
  {
LABEL_24:
    int v8 = v9;
  }
  else
  {
    while (1)
    {
      int v13 = *v8;
      if (v13 != 32 && v13 != 9) {
        break;
      }
      if (++v8 == v9) {
        goto LABEL_24;
      }
    }
  }
  *((void *)this + 5) = v8;
  llvm::yaml::Scanner::skipComment((char *)this);
  uint64_t v15 = *((void *)this + 5);
  if (v15 == *((void *)this + 6))
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    LODWORD(v20) = 19;
    *((void *)&v20 + 1) = v6;
    uint64_t v21 = v15 - (void)v6;
    uint64_t v17 = (void *)sub_1CD85FCD8((uint64_t *)this + 10, &v20);
    uint64_t v19 = *((void *)this + 22);
    unsigned int v18 = (void *)((char *)this + 176);
    void *v17 = v19;
    v17[1] = v18;
    *(void *)(v19 + 8) = v17;
    *unsigned int v18 = v17;
    uint64_t result = 1;
    *a4 = 1;
  }
  else if (llvm::yaml::Scanner::consumeLineBreakIfPresent(this))
  {
    return 1;
  }
  else
  {
    *(void *)&long long v20 = "Expected a line break after block scalar header";
    LOWORD(v23) = 259;
    sub_1CD85C714((uint64_t)this, (llvm::Twine *)&v20, *((char **)this + 5));
    return 0;
  }
  return result;
}

uint64_t llvm::yaml::Scanner::scanBlockChompingIndicator(llvm::yaml::Scanner *this)
{
  int v1 = (unsigned __int8 *)*((void *)this + 5);
  if (v1 != *((unsigned __int8 **)this + 6) && ((int v2 = *v1, v2 == 45) || v2 == 43))
  {
    *((void *)this + 5) = v1 + 1;
    ++*((_DWORD *)this + 15);
  }
  else
  {
    LOBYTE(v2) = 32;
  }
  return (char)v2;
}

uint64_t llvm::yaml::Scanner::scanBlockIndentationIndicator(llvm::yaml::Scanner *this)
{
  int v1 = (unsigned __int8 *)*((void *)this + 5);
  if (v1 == *((unsigned __int8 **)this + 6)) {
    return 0;
  }
  int v2 = *v1;
  if ((v2 - 49) > 8) {
    return 0;
  }
  uint64_t v3 = (v2 - 48);
  *((void *)this + 5) = v1 + 1;
  ++*((_DWORD *)this + 15);
  return v3;
}

uint64_t llvm::yaml::Scanner::findBlockScalarIndent(llvm::yaml::Scanner *this, unsigned int *a2, unsigned int a3, unsigned int *a4, BOOL *a5)
{
  int v10 = 0;
  unsigned int v11 = 0;
  while (1)
  {
    int v12 = (unsigned __int8 *)*((void *)this + 5);
    int v13 = (unsigned __int8 *)*((void *)this + 6);
    unsigned int v14 = v12;
    do
    {
      if (v14 == v13)
      {
        uint64_t v17 = (char *)*((void *)this + 6);
        goto LABEL_9;
      }
      int v15 = *v14++;
      BOOL v16 = v15 == 32;
    }
    while (v15 == 32);
    if (v16) {
      ++v14;
    }
    uint64_t v17 = (char *)(v14 - 1);
LABEL_9:
    unsigned int v18 = *((_DWORD *)this + 15) + v17 - v12;
    *((_DWORD *)this + 15) = v18;
    *((void *)this + 5) = v17;
    if (llvm::yaml::Scanner::skip_nb_char(this, v17) != v17) {
      break;
    }
    if (v13 == (unsigned __int8 *)v17) {
      goto LABEL_20;
    }
    int v19 = *v17;
    if ((v19 == 13 || v19 == 10) && v18 > v11)
    {
      int v10 = v17;
      unsigned int v11 = v18;
    }
    if ((llvm::yaml::Scanner::consumeLineBreakIfPresent(this) & 1) == 0) {
      goto LABEL_20;
    }
    ++*a4;
  }
  if (v18 <= a3)
  {
LABEL_20:
    uint64_t result = 1;
    *a5 = 1;
    return result;
  }
  *a2 = v18;
  if (v11 <= v18) {
    return 1;
  }
  uint64_t v21 = "Leading all-spaces line must be smaller than the block indent";
  __int16 v22 = 259;
  sub_1CD85C714((uint64_t)this, (llvm::Twine *)&v21, v10);
  return 0;
}

uint64_t llvm::yaml::Scanner::scanTag(llvm::yaml::Scanner *this)
{
  int v2 = *((_DWORD *)this + 15);
  uint64_t v3 = *((void *)this + 5);
  int v4 = (char *)*((void *)this + 6);
  unsigned int v5 = (char *)(v3 + 1);
  *((void *)this + 5) = v3 + 1;
  *((_DWORD *)this + 15) = v2 + 1;
  if ((char *)(v3 + 1) != v4)
  {
    uint64_t v6 = *v5;
    if (v6 > 0x3C) {
      goto LABEL_10;
    }
    if (((1 << v6) & 0x100002600) == 0)
    {
      if (v6 == 60)
      {
        *((void *)this + 5) = v3 + 2;
        *((_DWORD *)this + 15) = v2 + 2;
        llvm::yaml::Scanner::scan_ns_uri_char((uint64_t)this);
        uint64_t result = llvm::yaml::Scanner::consume(this, 0x3Eu);
        if (!result) {
          return result;
        }
        unsigned int v5 = (char *)*((void *)this + 5);
      }
      else
      {
LABEL_10:
        while (v4 != v5)
        {
          int v8 = v5;
          int v9 = *v5;
          if (v9 != 9 && v9 != 32)
          {
            unsigned int v5 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v5);
            if (v5 != v8) {
              continue;
            }
          }
          goto LABEL_12;
        }
        int v8 = v4;
LABEL_12:
        *((void *)this + 5) = v8;
        unsigned int v5 = v8;
      }
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  LODWORD(v12) = 22;
  *((void *)&v12 + 1) = v3;
  int v13 = &v5[-v3];
  int v10 = (void *)sub_1CD85FCD8((uint64_t *)this + 10, &v12);
  uint64_t v11 = *((void *)this + 22);
  *int v10 = v11;
  v10[1] = (char *)this + 176;
  *(void *)(v11 + 8) = v10;
  *((void *)this + 22) = v10;
  llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v10, v2, 0);
  *((unsigned char *)this + 73) = 0;
  return 1;
}

void llvm::yaml::Stream::Stream()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void llvm::yaml::Stream::skip(uint64_t ***this)
{
}

uint64_t llvm::yaml::Node::Node(uint64_t a1, int a2, llvm::yaml::Scanner ****a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &unk_1F2646610;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 64) = a7;
  uint64_t v8 = *(void *)(llvm::yaml::Scanner::peekNext(***a3) + 8);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v8;
  return a1;
}

{
  uint64_t v8;

  *(void *)a1 = &unk_1F2646610;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 64) = a7;
  uint64_t v8 = *(void *)(llvm::yaml::Scanner::peekNext(***a3) + 8);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v8;
  return a1;
}

uint64_t llvm::yaml::Node::peekNext(llvm::yaml::Scanner *****this)
{
  return llvm::yaml::Scanner::peekNext(***this[1]);
}

uint64_t llvm::yaml::Node::setError(uint64_t a1, llvm::Twine *a2, uint64_t a3)
{
  return sub_1CD85C714(****(void ****)(a1 + 8), a2, *(char **)(a3 + 8));
}

uint64_t llvm::yaml::Document::peekNext(llvm::yaml::Scanner ***this)
{
  return llvm::yaml::Scanner::peekNext(**this);
}

void llvm::yaml::Node::getNext(uint64_t ******this@<X0>, uint64_t a2@<X8>)
{
}

void llvm::yaml::Document::getNext(uint64_t ****this@<X0>, uint64_t a2@<X8>)
{
}

uint64_t llvm::yaml::Node::parseBlockNode(llvm::yaml::Document ***this)
{
  return llvm::yaml::Document::parseBlockNode(*this[1]);
}

uint64_t llvm::yaml::Node::getAllocator(llvm::yaml::Node *this)
{
  return **((void **)this + 1) + 8;
}

uint64_t llvm::yaml::Document::setError(uint64_t **a1, llvm::Twine *a2, uint64_t a3)
{
  return sub_1CD85C714(**a1, a2, *(char **)(a3 + 8));
}

uint64_t llvm::yaml::Node::failed(llvm::yaml::Node *this)
{
  return *(unsigned __int8 *)(****((void ****)this + 1) + 74);
}

uint64_t llvm::yaml::Document::failed(llvm::yaml::Document *this)
{
  return *(unsigned __int8 *)(**(void **)this + 74);
}

const char *llvm::yaml::ScalarNode::unescapeDoubleQuoted(uint64_t a1, char *__src, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t first_of = a4;
  unint64_t v7 = a3;
  a5[1] = 0;
  if (a5[2] < a3) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a4 == -1)
  {
LABEL_175:
    sub_1CCBEA54C(a5, *a5 + a5[1], __src, &__src[v7]);
    return (const char *)*a5;
  }
  while (2)
  {
    sub_1CCBEA54C(a5, *a5 + a5[1], __src, &__src[first_of]);
    if (v7 >= first_of) {
      unint64_t v10 = first_of;
    }
    else {
      unint64_t v10 = v7;
    }
    uint64_t v11 = &__src[v10];
    unint64_t v12 = v7 - v10;
    size_t v67 = &__src[v10];
    unint64_t v68 = v7 - v10;
    int v13 = __src[v10];
    BOOL v14 = v13 == 13 || v13 == 10;
    if (v14)
    {
      uint64_t v15 = a5[1];
      if (v15 + 1 > (unint64_t)a5[2]) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(unsigned char *)(*a5 + v15) = 10;
      ++a5[1];
      if (v12 >= 2)
      {
        int v16 = v11[1];
        if (v16 == 13 || v16 == 10)
        {
          --v12;
          size_t v67 = v11 + 1;
          unint64_t v68 = v12;
          ++v11;
        }
      }
      if (v12) {
        __src = v11 + 1;
      }
      else {
        __src = v11;
      }
      unint64_t v7 = v12 - (v12 != 0);
      goto LABEL_117;
    }
    if (v12 == 1)
    {
      size_t v65 = "Unrecognized escape code";
      __int16 v66 = 259;
      uint64_t v63 = ****(void ****)(a1 + 8);
      char v64 = &__src[v10];
      goto LABEL_177;
    }
    BOOL v18 = v7 > first_of;
    if (v7 <= first_of) {
      int v19 = &__src[v10];
    }
    else {
      int v19 = v11 + 1;
    }
    unint64_t v20 = v12 - v18;
    size_t v67 = v19;
    unint64_t v68 = v12 - v18;
    int v21 = *v19;
    if (v21 > 91)
    {
      switch(*v19)
      {
        case '\\':
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 92;
          goto LABEL_111;
        case '_':
          uint64_t v25 = 160;
          goto LABEL_96;
        case 'a':
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 7;
          goto LABEL_111;
        case 'b':
          uint64_t v28 = a5[1];
          if (v28 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(unsigned char *)(*a5 + v28) = 8;
          goto LABEL_112;
        case 'e':
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 27;
          goto LABEL_111;
        case 'f':
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 12;
          goto LABEL_111;
        case 'n':
          uint64_t v36 = a5[1];
          if (v36 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(unsigned char *)(*a5 + v36) = 10;
          goto LABEL_112;
        case 'r':
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 13;
          goto LABEL_111;
        case 't':
          goto LABEL_47;
        case 'u':
          if (v20 < 5) {
            goto LABEL_113;
          }
          uint64_t v37 = 0;
          unint64_t v38 = 0;
          unint64_t v39 = &__src[v10 + 1 + v18];
          while (2)
          {
            int v40 = v39[v37];
            if ((v40 - 48) < 0xA)
            {
              int v41 = -48;
              goto LABEL_86;
            }
            if ((v40 - 97) < 0x1A)
            {
              int v41 = -87;
              goto LABEL_86;
            }
            if ((v40 - 65) <= 0x19)
            {
              int v41 = -55;
LABEL_86:
              unsigned int v42 = v41 + v40;
              if (v42 > 0xF) {
                break;
              }
              unint64_t v43 = 16 * v38 + v42;
              if (v38 > v43 >> 4)
              {
                BOOL v57 = HIDWORD(v43) != 0;
                BOOL v56 = 1;
LABEL_165:
                LODWORD(v43) = 0;
                goto LABEL_127;
              }
              ++v37;
              unint64_t v38 = v43;
              if (v37 == 4)
              {
                BOOL v56 = 0;
                BOOL v57 = HIDWORD(v43) != 0;
                if (v43 >= 0x100000000) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_127;
              }
              continue;
            }
            break;
          }
          BOOL v57 = HIDWORD(v38) != 0;
          if (v38 >= 0x100000000) {
            LODWORD(v43) = 0;
          }
          else {
            LODWORD(v43) = v38;
          }
          BOOL v14 = v37 == 4;
          BOOL v56 = v37 != 4;
          if (!v14) {
            goto LABEL_165;
          }
LABEL_127:
          if (v56 || v57) {
            uint64_t v58 = 65533;
          }
          else {
            uint64_t v58 = v43;
          }
          sub_1CD0D47C4(v58, a5);
          BOOL v54 = v20 >= 4;
          uint64_t v55 = 4;
LABEL_137:
          if (!v54) {
            uint64_t v55 = v20;
          }
          v19 += v55;
          v20 -= v55;
          size_t v67 = v19;
          unint64_t v68 = v20;
          break;
        case 'v':
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 11;
          goto LABEL_111;
        case 'x':
          if (v20 < 3) {
            goto LABEL_113;
          }
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          uint64_t v31 = &__src[v10 + 1 + v18];
          while (2)
          {
            int v32 = v31[v29];
            if ((v32 - 48) < 0xA)
            {
              int v33 = -48;
              goto LABEL_61;
            }
            if ((v32 - 97) < 0x1A)
            {
              int v33 = -87;
              goto LABEL_61;
            }
            if ((v32 - 65) <= 0x19)
            {
              int v33 = -55;
LABEL_61:
              unsigned int v34 = v33 + v32;
              if (v34 > 0xF) {
                break;
              }
              unint64_t v35 = 16 * v30 + v34;
              if (v30 > v35 >> 4)
              {
                BOOL v52 = HIDWORD(v35) != 0;
                BOOL v51 = 1;
LABEL_159:
                LODWORD(v35) = 0;
                goto LABEL_121;
              }
              ++v29;
              unint64_t v30 = v35;
              if (v29 == 2)
              {
                BOOL v51 = 0;
                BOOL v52 = HIDWORD(v35) != 0;
                if (v35 >= 0x100000000) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_121;
              }
              continue;
            }
            break;
          }
          BOOL v52 = HIDWORD(v30) != 0;
          if (v30 >= 0x100000000) {
            LODWORD(v35) = 0;
          }
          else {
            LODWORD(v35) = v30;
          }
          BOOL v14 = v29 == 2;
          BOOL v51 = v29 != 2;
          if (!v14) {
            goto LABEL_159;
          }
LABEL_121:
          if (v51 || v52) {
            uint64_t v53 = 65533;
          }
          else {
            uint64_t v53 = v35;
          }
          sub_1CD0D47C4(v53, a5);
          BOOL v54 = v20 >= 2;
          uint64_t v55 = 2;
          goto LABEL_137;
        default:
          goto LABEL_178;
      }
      goto LABEL_113;
    }
    if (v21 <= 46)
    {
      if (v21 <= 12)
      {
        if (v21 != 9)
        {
          if (v21 != 10) {
            goto LABEL_178;
          }
LABEL_43:
          if (v20 >= 2)
          {
            int v26 = v19[1];
            if (v26 == 13 || v26 == 10)
            {
              --v20;
              ++v19;
            }
          }
          goto LABEL_113;
        }
LABEL_47:
        uint64_t v22 = a5[1];
        if (v22 + 1 > (unint64_t)a5[2]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        uint64_t v23 = *a5;
        char v24 = 9;
      }
      else
      {
        switch(v21)
        {
          case 13:
            goto LABEL_43;
          case 32:
            uint64_t v22 = a5[1];
            if (v22 + 1 > (unint64_t)a5[2]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            uint64_t v23 = *a5;
            char v24 = 32;
            break;
          case 34:
            uint64_t v22 = a5[1];
            if (v22 + 1 > (unint64_t)a5[2]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            uint64_t v23 = *a5;
            char v24 = 34;
            break;
          default:
            goto LABEL_178;
        }
      }
      goto LABEL_111;
    }
    switch(*v19)
    {
      case 'L':
        uint64_t v25 = 8232;
        goto LABEL_96;
      case 'M':
      case 'O':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
        goto LABEL_178;
      case 'N':
        uint64_t v25 = 133;
        goto LABEL_96;
      case 'P':
        uint64_t v25 = 8233;
LABEL_96:
        sub_1CD0D47C4(v25, a5);
        goto LABEL_113;
      case 'U':
        if (v20 < 9) {
          goto LABEL_113;
        }
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        BOOL v46 = &__src[v10 + 1 + v18];
        while (2)
        {
          int v47 = v46[v44];
          if ((v47 - 48) < 0xA)
          {
            int v48 = -48;
            goto LABEL_101;
          }
          if ((v47 - 97) < 0x1A)
          {
            int v48 = -87;
            goto LABEL_101;
          }
          if ((v47 - 65) <= 0x19)
          {
            int v48 = -55;
LABEL_101:
            unsigned int v49 = v48 + v47;
            if (v49 > 0xF) {
              break;
            }
            unint64_t v50 = 16 * v45 + v49;
            if (v45 > v50 >> 4)
            {
              BOOL v60 = HIDWORD(v50) != 0;
              BOOL v59 = 1;
LABEL_171:
              LODWORD(v50) = 0;
              goto LABEL_133;
            }
            ++v44;
            unint64_t v45 = v50;
            if (v44 == 8)
            {
              BOOL v59 = 0;
              BOOL v60 = HIDWORD(v50) != 0;
              if (v50 >= 0x100000000) {
                LODWORD(v50) = 0;
              }
              goto LABEL_133;
            }
            continue;
          }
          break;
        }
        BOOL v60 = HIDWORD(v45) != 0;
        if (v45 >= 0x100000000) {
          LODWORD(v50) = 0;
        }
        else {
          LODWORD(v50) = v45;
        }
        BOOL v14 = v44 == 8;
        BOOL v59 = v44 != 8;
        if (!v14) {
          goto LABEL_171;
        }
LABEL_133:
        if (v59 || v60) {
          uint64_t v61 = 65533;
        }
        else {
          uint64_t v61 = v50;
        }
        sub_1CD0D47C4(v61, a5);
        BOOL v54 = v20 >= 8;
        uint64_t v55 = 8;
        goto LABEL_137;
      default:
        if (v21 == 47)
        {
          uint64_t v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v23 = *a5;
          char v24 = 47;
LABEL_111:
          *(unsigned char *)(v23 + v22) = v24;
LABEL_112:
          ++a5[1];
LABEL_113:
          if (v20) {
            __src = v19 + 1;
          }
          else {
            __src = v19;
          }
          unint64_t v7 = v20 - (v20 != 0);
LABEL_117:
          size_t v67 = __src;
          unint64_t v68 = v7;
          unint64_t first_of = llvm::StringRef::find_first_of(&v67, "\\\r\n", 3, 0);
          if (first_of == -1) {
            goto LABEL_175;
          }
          continue;
        }
        if (v21 == 48)
        {
          uint64_t v27 = a5[1];
          if (v27 + 1 > (unint64_t)a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(unsigned char *)(*a5 + v27) = 0;
          goto LABEL_112;
        }
LABEL_178:
        size_t v65 = "Unrecognized escape code";
        __int16 v66 = 259;
        uint64_t v63 = ****(void ****)(a1 + 8);
        char v64 = v19;
LABEL_177:
        sub_1CD85C714(v63, (llvm::Twine *)&v65, v64);
        return "";
    }
  }
}

uint64_t sub_1CD0D66C0(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  int v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      unint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    unint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  unint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    int v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void *llvm::yaml::IO::IO(void *this, void *a2)
{
  *this = &unk_1F2646710;
  this[1] = a2;
  return this;
}

uint64_t llvm::yaml::IO::setContext(uint64_t this, void *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

void llvm::yaml::Input::Input(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2646828;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  operator new();
}

void llvm::yaml::Input::keys(llvm::yaml::Input *this@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *((void *)this + 37);
  uint64_t v4 = *(void *)(v3 + 8);
  int v5 = *(_DWORD *)(v4 + 32);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3) {
    BOOL v6 = v5 == 4;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    unint64_t v7 = *(uint64_t ***)(v3 + 16);
    uint64_t v8 = *(unsigned int *)(v3 + 24);
    if (v8)
    {
      for (uint64_t i = v7; !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      uint64_t i = v7;
    }
    std::string::size_type v11 = &v7[v8];
    if (i != v11)
    {
      unint64_t v12 = 0;
      size_t v13 = *i;
      do
      {
        uint64_t v16 = *v13;
        std::string::size_type v14 = v13 + 4;
        uint64_t v15 = v16;
        unint64_t v17 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v17)
        {
          BOOL v18 = *a2;
          uint64_t v19 = (v12 - *a2) >> 4;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
            abort();
          }
          uint64_t v21 = v17 - (void)v18;
          if (v21 >> 3 > v20) {
            unint64_t v20 = v21 >> 3;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 60) {
              sub_1CB833614();
            }
            uint64_t v23 = (char *)operator new(16 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          char v24 = &v23[16 * v19];
          *(void *)char v24 = v14;
          *((void *)v24 + 1) = v15;
          if (v12 == v18)
          {
            int v26 = v12;
            uint64_t v25 = &v23[16 * v19];
          }
          else
          {
            uint64_t v25 = &v23[16 * v19];
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v12 - 1);
              v25 -= 16;
              v12 -= 16;
            }
            while (v12 != v18);
            int v26 = *a2;
          }
          unint64_t v12 = v24 + 16;
          *a2 = v25;
          a2[1] = v24 + 16;
          a2[2] = &v23[16 * v22];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(void *)unint64_t v12 = v14;
          *((void *)v12 + 1) = v15;
          v12 += 16;
        }
        a2[1] = v12;
        do
        {
          uint64_t v27 = i[1];
          ++i;
          size_t v13 = v27;
          if (v27) {
            BOOL v28 = v13 + 1 == 0;
          }
          else {
            BOOL v28 = 1;
          }
        }
        while (v28);
      }
      while (i != v11);
    }
  }
  else
  {
    uint64_t v31 = "not a mapping";
    __int16 v32 = 259;
    llvm::yaml::Stream::printError(*((llvm ****)this + 11), v4, (llvm::Twine *)&v31, 0);
    unint64_t v30 = std::generic_category();
    *((void *)this + 13) = 22;
    *((void *)this + 14) = v30;
  }
}

const std::error_category *llvm::yaml::Input::setError(llvm ****this, llvm::yaml::Input::HNode *a2, const llvm::Twine *a3)
{
  llvm::yaml::Stream::printError(this[11], *((void *)a2 + 1), a3, 0);
  uint64_t result = std::generic_category();
  this[13] = (llvm ***)22;
  this[14] = (llvm ***)result;
  return result;
}

uint64_t llvm::yaml::Input::preflightKey(llvm::yaml::Input *this, char *__s, int a3, BOOL a4, BOOL *a5, void **a6)
{
  uint64_t result = 0;
  *a5 = 0;
  if (*((_DWORD *)this + 26)) {
    return result;
  }
  uint64_t v9 = *((void *)this + 37);
  if (!v9)
  {
    if (a3)
    {
LABEL_11:
      uint64_t v15 = std::generic_category();
      uint64_t result = 0;
      *((void *)this + 13) = 22;
      *((void *)this + 14) = v15;
      return result;
    }
    return 0;
  }
  uint64_t v12 = *(void *)(v9 + 8);
  int v13 = *(_DWORD *)(v12 + 32);
  if (v13 != 4)
  {
    if (v13) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = a3 == 0;
    }
    if (!v14)
    {
      __dst[0] = "not a mapping";
      __int16 v35 = 259;
LABEL_18:
      llvm::yaml::Stream::printError(*((llvm ****)this + 11), v12, (llvm::Twine *)__dst, 0);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  size_t v17 = strlen(__s);
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  BOOL v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = (void **)operator new(v20 + 1);
    __dst[1] = v18;
    unsigned int v34 = (const char *)(v21 | 0x8000000000000000);
    __dst[0] = v19;
  }
  else
  {
    HIBYTE(v34) = v17;
    uint64_t v19 = __dst;
    if (!v17) {
      goto LABEL_23;
    }
  }
  memcpy(v19, __s, (size_t)v18);
LABEL_23:
  *((unsigned char *)v18 + (void)v19) = 0;
  unint64_t v22 = sub_1CBFCD38C(v9 + 48, (unint64_t)__dst, 1);
  uint64_t v23 = *(void *)(v9 + 48) + 24 * *(unsigned int *)(v9 + 56);
  long long v24 = *(_OWORD *)v22;
  *(void *)(v23 + 16) = *(void *)(v22 + 16);
  *(_OWORD *)uint64_t v23 = v24;
  *(void *)(v22 + 8) = 0;
  *(void *)(v22 + 16) = 0;
  *(void *)unint64_t v22 = 0;
  ++*(_DWORD *)(v9 + 56);
  if (SHIBYTE(v34) < 0) {
    operator delete(__dst[0]);
  }
  if (__s) {
    size_t v25 = strlen(__s);
  }
  else {
    size_t v25 = 0;
  }
  size_t v26 = (*sub_1CD862720(v9 + 16, (unsigned __int8 *)__s, v25))[1];
  if (!v26)
  {
    if (a3)
    {
      uint64_t v27 = *((void *)this + 37);
      int v28 = *__s;
      uint64_t v29 = "missing required key '";
      if (*__s)
      {
        v31[0] = "missing required key '";
        void v31[2] = __s;
        __int16 v32 = 771;
        char v30 = 2;
      }
      else
      {
        v31[0] = "missing required key '";
        __int16 v32 = 259;
        char v30 = 3;
      }
      if (v28) {
        uint64_t v29 = (const char *)v31;
      }
      __dst[0] = (void *)v29;
      unsigned int v34 = "'";
      LOBYTE(v35) = v30;
      HIBYTE(v35) = 3;
      uint64_t v12 = *(void *)(v27 + 8);
      goto LABEL_18;
    }
LABEL_9:
    uint64_t result = 0;
    *a5 = 1;
    return result;
  }
  *a6 = (void *)*((void *)this + 37);
  *((void *)this + 37) = v26;
  return 1;
}

const std::error_category *llvm::yaml::Input::setError(uint64_t a1, char **a2, llvm::Twine *a3)
{
  llvm::yaml::Stream::printError(*(llvm ****)(a1 + 88), a2, a3, 0);
  uint64_t result = std::generic_category();
  *(void *)(a1 + 104) = 22;
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::yaml::Input::reportWarning(uint64_t a1, char **a2, llvm::Twine *a3)
{
  return llvm::yaml::Stream::printError(*(llvm ****)(a1 + 88), a2, a3, 1);
}

uint64_t llvm::yaml::Input::beginSequence(llvm::yaml::Input *this)
{
  int v1 = (void *)*((void *)this + 37);
  uint64_t v2 = v1[1];
  unsigned int v3 = *(_DWORD *)(v2 + 32);
  if (v1) {
    BOOL v4 = v3 == 5;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return (v1[3] - v1[2]) >> 3;
  }
  if (!v3) {
    return 0;
  }
  if (v1) {
    BOOL v7 = v3 > 2;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (sub_1CD4F6900((unsigned char *)v1[2], v1[3])) {
      return 0;
    }
    uint64_t v2 = *(void *)(*((void *)this + 37) + 8);
  }
  uint64_t v9 = "not a sequence";
  __int16 v10 = 259;
  llvm::yaml::Stream::printError(*((llvm ****)this + 11), v2, (llvm::Twine *)&v9, 0);
  uint64_t v8 = std::generic_category();
  uint64_t result = 0;
  *((void *)this + 13) = 22;
  *((void *)this + 14) = v8;
  return result;
}

uint64_t llvm::yaml::Input::preflightElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  if (*((_DWORD *)this + 26)) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5) {
    return 0;
  }
  *a3 = v3;
  *((void *)this + 37) = *(void *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::preflightFlowElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  if (*((_DWORD *)this + 26)) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5) {
    return 0;
  }
  *a3 = v3;
  *((void *)this + 37) = *(void *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::matchEnumScalar(llvm::yaml::Input *this, const char *__s)
{
  if (*((unsigned char *)this + 304)) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 37);
  if (!v3 || (*(_DWORD *)(v3[1] + 32) - 3) < 0xFFFFFFFE) {
    return 0;
  }
  size_t v6 = v3[3];
  if (__s)
  {
    BOOL v7 = (const void *)v3[2];
    if (v6 == strlen(__s) && (!v6 || !memcmp(v7, __s, v6))) {
      goto LABEL_11;
    }
  }
  else if (!v6)
  {
LABEL_11:
    uint64_t result = 1;
    *((unsigned char *)this + 304) = 1;
    return result;
  }
  return 0;
}

uint64_t llvm::yaml::Input::beginBitSetScalar(llvm::yaml::Input *this, BOOL *a2)
{
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 58) = 0;
  BOOL v4 = (void *)*((void *)this + 37);
  uint64_t v5 = v4[1];
  if (v4) {
    BOOL v6 = *(_DWORD *)(v5 + 32) == 5;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    BOOL v7 = (void *)((char *)this + 224);
    uint64_t v8 = (v4[3] - v4[2]) >> 3;
    *((_DWORD *)this + 72) = v8;
    if ((v8 + 63) < 0x40)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v9 = (v8 + 63) >> 6;
      if (v9 > *((_DWORD *)this + 59)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(*((void **)this + 28), 8 * v9);
      uint64_t v10 = v9;
      *((_DWORD *)this + 58) = v9;
    }
    if ((v8 & 0x3F) != 0) {
      *(void *)(*v7 + 8 * v10 - 8) &= ~(-1 << (v8 & 0x3F));
    }
  }
  else
  {
    int v13 = "expected sequence of bit values";
    __int16 v14 = 259;
    llvm::yaml::Stream::printError(*((llvm ****)this + 11), v5, (llvm::Twine *)&v13, 0);
    uint64_t v12 = std::generic_category();
    *((void *)this + 13) = 22;
    *((void *)this + 14) = v12;
  }
  *a2 = 1;
  return 1;
}

uint64_t llvm::yaml::Input::bitSetMatch(llvm::yaml::Input *this, const char *__s)
{
  if (*((_DWORD *)this + 26)) {
    return 0;
  }
  uint64_t v5 = (void *)*((void *)this + 37);
  uint64_t v6 = v5[1];
  if (v5) {
    BOOL v7 = *(_DWORD *)(v6 + 32) == 5;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    v18[0] = "expected sequence of bit values";
    __int16 v19 = 259;
    llvm::yaml::Stream::printError(*((llvm ****)this + 11), v6, (llvm::Twine *)v18, 0);
    size_t v17 = std::generic_category();
    uint64_t result = 0;
    *((void *)this + 13) = 22;
    *((void *)this + 14) = v17;
    return result;
  }
  uint64_t v8 = (uint64_t *)v5[2];
  uint64_t v9 = (uint64_t *)v5[3];
  if (v8 == v9) {
    return 0;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v11 = *v8;
    if (*v8) {
      BOOL v12 = (*(_DWORD *)(*(void *)(*v8 + 8) + 32) - 3) >= 0xFFFFFFFE;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      uint64_t v15 = *((void *)this + 37);
      v18[0] = "unexpected scalar in sequence of bit values";
      __int16 v19 = 259;
      llvm::yaml::Stream::printError(*((llvm ****)this + 11), *(void *)(v15 + 8), (llvm::Twine *)v18, 0);
      uint64_t v16 = std::generic_category();
      *((void *)this + 13) = 22;
      *((void *)this + 14) = v16;
      goto LABEL_21;
    }
    size_t v13 = *(void *)(v11 + 24);
    if (__s) {
      break;
    }
    if (!v13) {
      goto LABEL_23;
    }
LABEL_21:
    if (++v8 == v9) {
      return 0;
    }
  }
  __int16 v14 = *(const void **)(v11 + 16);
  if (v13 != strlen(__s) || v13 && memcmp(v14, __s, v13)) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t result = 1;
  *(void *)(*((void *)this + 28) + 8 * (i >> 6)) |= 1 << i;
  return result;
}

const std::error_category *llvm::yaml::Input::scalarString(const std::error_category *result, _OWORD *a2)
{
  unsigned int v3 = result[37].__vftable;
  uint64_t v4 = (uint64_t)v3->~error_category_0;
  if (v3) {
    BOOL v5 = (*(_DWORD *)(v4 + 32) - 3) >= 0xFFFFFFFE;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    *a2 = *(_OWORD *)&v3->name;
  }
  else
  {
    uint64_t v6 = result;
    BOOL v7 = "unexpected scalar";
    __int16 v8 = 259;
    llvm::yaml::Stream::printError((llvm ***)result[11].__vftable, v4, (llvm::Twine *)&v7, 0);
    uint64_t result = std::generic_category();
    v6[13].__vftable = (std::error_category_vtbl *)22;
    v6[14].__vftable = (std::error_category_vtbl *)result;
  }
  return result;
}

const std::error_category *llvm::yaml::Input::setError(llvm ****this, llvm::yaml::Node *a2, const llvm::Twine *a3)
{
  llvm::yaml::Stream::printError(this[11], (uint64_t)a2, a3, 0);
  uint64_t result = std::generic_category();
  this[13] = (llvm ***)22;
  this[14] = (llvm ***)result;
  return result;
}

uint64_t llvm::yaml::Input::getNodeKind(llvm::yaml::Input *this)
{
  int v1 = *(_DWORD *)(*(void *)(*((void *)this + 37) + 8) + 32);
  unsigned int v2 = v1 - 1;
  if (v1 == 4) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t llvm::yaml::Input::reportWarning(llvm ****this, llvm::yaml::Input::HNode *a2, const llvm::Twine *a3)
{
  return llvm::yaml::Stream::printError(this[11], *((void *)a2 + 1), a3, 1);
}

uint64_t llvm::yaml::Input::reportWarning(llvm ****this, llvm::yaml::Node *a2, const llvm::Twine *a3)
{
  return llvm::yaml::Stream::printError(this[11], (uint64_t)a2, a3, 1);
}

double llvm::yaml::Output::Output(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F2646940;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x800000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

void llvm::yaml::Output::~Output(llvm::yaml::Output *this)
{
  *(void *)this = &unk_1F2646940;
  unsigned int v2 = (char *)*((void *)this + 4);
  if (v2 != (char *)this + 48) {
    free(v2);
  }
}

{
  char *v2;

  *(void *)this = &unk_1F2646940;
  unsigned int v2 = (char *)*((void *)this + 4);
  if (v2 != (char *)this + 48) {
    free(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F2646940;
  unsigned int v2 = (char *)*((void *)this + 4);
  if (v2 != (char *)this + 48) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

BOOL llvm::yaml::Output::inSeqAnyElement(unsigned int a1)
{
  return a1 < 2;
}

BOOL llvm::yaml::Output::inFlowSeqAnyElement(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

llvm::raw_ostream *llvm::yaml::Output::outputUpToEndOfLine(uint64_t a1, const void *a2, size_t a3)
{
  double result = llvm::yaml::Output::output(a1, a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if (!v5 || (*(_DWORD *)(*(void *)(a1 + 32) + 4 * v5 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *(void *)(a1 + 96) = "\n";
    *(void *)(a1 + 104) = 1;
  }
  return result;
}

uint64_t llvm::yaml::Output::blockScalarString(llvm::yaml::Output *this, llvm::StringRef *a2)
{
  if (*((_DWORD *)this + 10)) {
    llvm::yaml::Output::newLineCheck(this, 0);
  }
  llvm::yaml::Output::output((uint64_t)this, " |", 2uLL);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)this + 2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "\n", 1uLL);
  }
  else
  {
    unsigned char *v5 = 10;
    ++*((void *)v4 + 4);
  }
  *((_DWORD *)this + 20) = 0;
  if (*((_DWORD *)this + 10) <= 1u) {
    int v6 = 1;
  }
  else {
    int v6 = *((_DWORD *)this + 10);
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  __int16 v15 = 261;
  v14[0] = "";
  v14[1] = 0;
  BOOL v18 = v14;
  uint64_t v9 = (const llvm::MemoryBuffer *)sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v18);
  *(void *)uint64_t v9 = &unk_1F2644E70;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v7 + v8;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v14, v9, 0, 0);
  if ((_BYTE)v15)
  {
    int v10 = 0;
    do
    {
      do
      {
        llvm::yaml::Output::output((uint64_t)this, "  ", 2uLL);
        ++v10;
      }
      while (v10 != v6);
      llvm::yaml::Output::output((uint64_t)this, v16, v17);
      uint64_t v11 = (llvm::raw_ostream *)*((void *)this + 2);
      BOOL v12 = (unsigned char *)*((void *)v11 + 4);
      if (*((unsigned char **)v11 + 3) == v12)
      {
        llvm::raw_ostream::write(v11, "\n", 1uLL);
      }
      else
      {
        *BOOL v12 = 10;
        ++*((void *)v11 + 4);
      }
      *((_DWORD *)this + 20) = 0;
      llvm::line_iterator::advance((uint64_t)v14);
      int v10 = 0;
    }
    while ((_BYTE)v15);
  }
  return (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)v9 + 8))(v9);
}

llvm::raw_ostream *llvm::yaml::Output::outputNewLine(llvm::yaml::Output *this)
{
  double result = (llvm::raw_ostream *)*((void *)this + 2);
  unsigned int v3 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v3)
  {
    double result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *unsigned int v3 = 10;
    ++*((void *)result + 4);
  }
  *((_DWORD *)this + 20) = 0;
  return result;
}

BOOL llvm::yaml::Output::inFlowMapAnyKey(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

BOOL llvm::yaml::Output::inMapAnyKey(int a1)
{
  return (a1 & 0xFFFFFFFE) == 4;
}

const char *llvm::yaml::ScalarTraits<BOOL,void>::input(char *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  unsigned __int16 v5 = llvm::yaml::parseBool(a1, a2);
  if (v5 < 0x100u) {
    return "invalid BOOLean";
  }
  char v7 = v5;
  double result = 0;
  *a4 = v7;
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<signed char,void>::output(char *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unint64_t v3 = *a1;
  if ((v3 & 0x8000000000000000) != 0) {
    return sub_1CD098D14(a3, -(uint64_t)v3, 0, 0, 1);
  }
  else {
    return sub_1CD098D14(a3, v3, 0, 0, 0);
  }
}

const char *llvm::yaml::ScalarTraits<signed char,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v7 = 0;
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  char v5 = llvm::consumeSignedInteger((llvm *)&v8, 0, &v7, a4);
  double result = "invalid number";
  if ((v5 & 1) == 0 && !v9)
  {
    if (v7 == (char)v7)
    {
      double result = 0;
      *(unsigned char *)a4 = v7;
    }
    else
    {
      return "out of range number";
    }
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<short,void>::output(__int16 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unint64_t v3 = *a1;
  if ((v3 & 0x8000000000000000) != 0) {
    return sub_1CD098D14(a3, -(uint64_t)v3, 0, 0, 1);
  }
  else {
    return sub_1CD098D14(a3, v3, 0, 0, 0);
  }
}

const char *llvm::yaml::ScalarTraits<short,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v7 = 0;
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  char v5 = llvm::consumeSignedInteger((llvm *)&v8, 0, &v7, a4);
  double result = "invalid number";
  if ((v5 & 1) == 0 && !v9)
  {
    if (v7 == (__int16)v7)
    {
      double result = 0;
      *(_WORD *)a4 = v7;
    }
    else
    {
      return "out of range number";
    }
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<double,void>::output(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *a1;
  v5[0] = &unk_1F25F6490;
  v5[1] = "%g";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<double,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  __int16 v10 = 261;
  v9[0] = a1;
  v9[1] = a2;
  BOOL v12 = v14;
  long long v13 = xmmword_1CDC7F9D0;
  char v5 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v9, &v12);
  uint64_t v11 = 0;
  double v6 = strtod(v5, &v11);
  int v7 = *v11;
  if (!*v11) {
    *a4 = v6;
  }
  if (v12 != v14) {
    free(v12);
  }
  if (v7) {
    return "invalid floating point number";
  }
  else {
    return 0;
  }
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<float,void>::output(unsigned int *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *a1;
  v5[0] = &unk_1F2618090;
  v5[1] = "%g";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<float,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  __int16 v10 = 261;
  v9[0] = a1;
  v9[1] = a2;
  BOOL v12 = v14;
  long long v13 = xmmword_1CDC7F9D0;
  char v5 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v9, &v12);
  uint64_t v11 = 0;
  float v6 = strtof(v5, &v11);
  int v7 = *v11;
  if (!*v11) {
    *a4 = v6;
  }
  if (v12 != v14) {
    free(v12);
  }
  if (v7) {
    return "invalid floating point number";
  }
  else {
    return 0;
  }
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex8,void>::output(unsigned __int8 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *a1;
  v5[0] = &unk_1F260ED30;
  v5[1] = "0x%hhX";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex8,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  __int16 v14 = a1;
  uint64_t v15 = a2;
  unsigned int v5 = sub_1CD0AF898((uint64_t)&v14);
  uint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = 0;
    for (unsigned int i = v14; ; ++i)
    {
      int v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19) {
            return "invalid hex8 number";
          }
          int v10 = -55;
        }
        else
        {
          int v10 = -87;
        }
      }
      else
      {
        int v10 = -48;
      }
      unsigned int v11 = v10 + v9;
      if (v11 >= v5) {
        break;
      }
      unint64_t v12 = v7 * v5 + v11;
      if (v12 / v5 < v7) {
        break;
      }
      unint64_t v7 = v12;
      if (!--v6)
      {
        if (v12 > 0xFF) {
          return "out of range hex8 number";
        }
        double result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex8 number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex16,void>::output(unsigned __int16 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *a1;
  v5[0] = &unk_1F2618A88;
  v5[1] = "0x%hX";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex16,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  __int16 v14 = a1;
  uint64_t v15 = a2;
  unsigned int v5 = sub_1CD0AF898((uint64_t)&v14);
  uint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = 0;
    for (unsigned int i = v14; ; ++i)
    {
      int v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19) {
            return "invalid hex16 number";
          }
          int v10 = -55;
        }
        else
        {
          int v10 = -87;
        }
      }
      else
      {
        int v10 = -48;
      }
      unsigned int v11 = v10 + v9;
      if (v11 >= v5) {
        break;
      }
      unint64_t v12 = v7 * v5 + v11;
      if (v12 / v5 < v7) {
        break;
      }
      unint64_t v7 = v12;
      if (!--v6)
      {
        if (v12 >> 16) {
          return "out of range hex16 number";
        }
        double result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex16 number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex32,void>::output(unsigned int *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *a1;
  v5[0] = &unk_1F25FED10;
  v5[1] = "0x%X";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex32,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int16 v14 = a1;
  uint64_t v15 = a2;
  unsigned int v5 = sub_1CD0AF898((uint64_t)&v14);
  uint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = 0;
    for (unsigned int i = v14; ; ++i)
    {
      int v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19) {
            return "invalid hex32 number";
          }
          int v10 = -55;
        }
        else
        {
          int v10 = -87;
        }
      }
      else
      {
        int v10 = -48;
      }
      unsigned int v11 = v10 + v9;
      if (v11 >= v5) {
        break;
      }
      unint64_t v12 = v7 * v5 + v11;
      if (v12 / v5 < v7) {
        break;
      }
      unint64_t v7 = v12;
      if (!--v6)
      {
        if (HIDWORD(v12)) {
          return "out of range hex32 number";
        }
        double result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex32 number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex64,void>::output(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *a1;
  v5[0] = &unk_1F25FF808;
  v5[1] = "0x%llX";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex64,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __int16 v14 = a1;
  uint64_t v15 = a2;
  unsigned int v5 = sub_1CD0AF898((uint64_t)&v14);
  uint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = 0;
    for (unsigned int i = v14; ; ++i)
    {
      int v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19) {
            return "invalid hex64 number";
          }
          int v10 = -55;
        }
        else
        {
          int v10 = -87;
        }
      }
      else
      {
        int v10 = -48;
      }
      unsigned int v11 = v10 + v9;
      if (v11 >= v5) {
        break;
      }
      unint64_t v12 = v7 * v5 + v11;
      if (v12 / v5 < v7) {
        break;
      }
      unint64_t v7 = v12;
      if (!--v6)
      {
        double result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex64 number";
}

void sub_1CD0D7FEC()
{
}

void sub_1CD0D8000(void ***a1)
{
  int v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1CD0D80A8(char **a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  int v9 = &v8[8 * v2];
  int v10 = &v8[8 * v7];
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)int v9 = v11;
  unint64_t v12 = v9 + 8;
  long long v13 = *a1;
  __int16 v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      v14 -= 8;
      *(void *)__int16 v14 = 0;
      *((void *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    __int16 v14 = *a1;
    uint64_t v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      uint64_t v17 = v18;
      *(void *)uint64_t v16 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
      }
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void llvm::raw_os_ostream::~raw_os_ostream(llvm::raw_os_ostream *this)
{
  *(void *)this = &unk_1F2646B20;
  uint64_t v2 = (const char *)*((void *)this + 4);
  unint64_t v3 = (const char *)*((void *)this + 2);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    *((void *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3);
  }
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924, v4);
    }
  }
}

{
  const char *v2;
  const char *v3;
  int64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F2646B20;
  uint64_t v2 = (const char *)*((void *)this + 4);
  unint64_t v3 = (const char *)*((void *)this + 2);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    *((void *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3);
  }
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924, v4);
    }
  }
}

{
  const char *v2;
  const char *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1F2646B20;
  uint64_t v2 = (const char *)*((void *)this + 4);
  unint64_t v3 = (const char *)*((void *)this + 2);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    *((void *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3);
  }
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924, v4);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::raw_os_ostream::write_impl(llvm::raw_os_ostream *this, const char *a2)
{
  return std::ostream::write();
}

uint64_t llvm::raw_os_ostream::current_pos(llvm::raw_os_ostream *this)
{
  v3[17] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 8) + *(void *)(**((void **)this + 8) - 24);
  if ((*(unsigned char *)(v1 + 32) & 5) != 0) {
    return -1;
  }
  (*(void (**)(void *__return_ptr))(**(void **)(v1 + 40) + 32))(v3);
  return v3[16];
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v1 = *((void *)this + 2);
    if (v1) {
      MEMORY[0x1D25D9CB0](v1, 0x1000C8077774924);
    }
  }
}

void *llvm::raw_ostream::SetBuffered(llvm::raw_ostream *this)
{
  if ((*(uint64_t (**)(llvm::raw_ostream *))(*(void *)this + 88))(this))
  {
    sub_1CD452824(this);
  }

  return sub_1CD862824(this);
}

uint64_t llvm::raw_ostream::SetBufferAndMode(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(result + 56) == 1)
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v4)
    {
      uint64_t v8 = result;
      uint64_t v7 = a2;
      int v6 = a4;
      uint64_t v5 = a3;
      MEMORY[0x1D25D9CB0](v4, 0x1000C8077774924);
      a3 = v5;
      a2 = v7;
      double result = v8;
      a4 = v6;
    }
  }
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a2 + a3;
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 56) = a4;
  return result;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, unint64_t a2)
{
  return a1;
}

{
  int v3;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    unint64_t v3 = 1;
  }
  else
  {
    unint64_t v3 = 0;
  }
  sub_1CD098D14(a1, a2, 0, 0, v3);
  return a1;
}

{
  sub_1CD098D14(a1, a2, 0, 0, 0);
  return a1;
}

{
  int v3;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    unint64_t v3 = 1;
  }
  else
  {
    unint64_t v3 = 0;
  }
  sub_1CD098D14(a1, a2, 0, 0, v3);
  return a1;
}

{
  llvm::write_hex(a1, a2, 3, 0, 0);
  return a1;
}

uint64_t *llvm::raw_ostream::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (a2 == 9) {
    (*(void (**)(uint64_t *))(v3 + 32))(a1);
  }
  else {
    (*(void (**)(uint64_t *, uint64_t, void, void))(v3 + 24))(a1, a2, 0, 0);
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::write_uuid(llvm::raw_ostream *this, const unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    uint64_t v4 = a2[i];
    v6[0] = &unk_1F260ED30;
    v6[1] = "%02X";
    v6[2] = v4;
    this = llvm::raw_ostream::operator<<(this, (uint64_t)v6);
    if ((i & 0x7FFFFFFB) == 3 || i == 9 || i == 5)
    {
      uint64_t v5 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v5)
      {
        this = llvm::raw_ostream::write(this, "-", 1uLL);
      }
      else
      {
        unsigned char *v5 = 45;
        ++*((void *)this + 4);
      }
    }
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)a1 + 3) - *((void *)a1 + 4);
  if (v4 <= 3)
  {
    unint64_t v7 = 127;
  }
  else
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
    if (v5 < v4) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 + 1;
    }
    if (v5 >= 0) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = (2 * v4);
    }
    if (v4 >= v7)
    {
      *((void *)a1 + 4) += v7;
      return a1;
    }
  }
  unint64_t v12 = (char *)v14;
  long long v13 = xmmword_1CFAC3020;
  do
  {
    unint64_t v9 = v7;
    sub_1CC22C7F8(&v12, v7);
    int v10 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 8))(a2, v12, v9);
    if (v10 < v9) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v10 >= 0) {
      unint64_t v7 = v11;
    }
    else {
      unint64_t v7 = (2 * v9);
    }
  }
  while (v9 < v7);
  llvm::raw_ostream::write(a1, v12, v7);
  if (v12 != (char *)v14) {
    free(v12);
  }
  return a1;
}

{
  int v3;
  BOOL v4;
  int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  size_t v11;
  unint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char **v21;
  char *v22;
  unint64_t v23[2];
  void v24[3];

  _OWORD v24[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 22);
    if (*(unsigned char *)(a2 + 22)) {
      unint64_t v4 = *(unsigned char *)(a2 + 21) == 0;
    }
    else {
      unint64_t v4 = 0;
    }
    if (v4) {
      int v5 = 3;
    }
    else {
      int v5 = 1;
    }
    if (*(unsigned char *)(a2 + 21)) {
      unsigned int v6 = v3 == 0;
    }
    else {
      unsigned int v6 = 0;
    }
    if (v6) {
      int v5 = 0;
    }
    if (*(unsigned char *)(a2 + 21)) {
      unint64_t v7 = v3 == 0;
    }
    else {
      unint64_t v7 = 1;
    }
    if (v7) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 2;
    }
    llvm::write_hex(a1, *(void *)a2, v8, *(unsigned int *)(a2 + 16), 1);
  }
  else
  {
    uint64_t v21 = &v22;
    unint64_t v22 = (char *)v24;
    *(_OWORD *)uint64_t v23 = xmmword_1CDB15990;
    __int16 v14 = 0;
    uint64_t v18 = 0;
    __int16 v19 = 0;
    uint64_t v20 = 1;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    long long v13 = &unk_1F2646FA8;
    sub_1CD862824(&v13);
    llvm::write_integer((llvm::raw_ostream *)&v13, *(void *)(a2 + 8), 0, 0);
    unsigned int v11 = v23[0];
    unint64_t v12 = *(unsigned int *)(a2 + 16);
    if (v23[0] < v12)
    {
      llvm::raw_ostream::indent(a1, v12 - LODWORD(v23[0]));
      unsigned int v11 = v23[0];
    }
    llvm::raw_ostream::write(a1, v22, v11);
    long long v13 = &unk_1F2646B98;
    if (v20 == 1 && v15) {
      MEMORY[0x1D25D9CB0](v15, 0x1000C8077774924);
    }
    if (v22 != (char *)v24) {
      free(v22);
    }
  }
  return a1;
}

{
  sub_1CD862C68(a2, a1);
  return a1;
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  uint64_t v1 = (const char *)*((void *)this + 2);
  *((void *)this + 4) = v1;
  return llvm::raw_ostream::flush_tied_then_write(this, v1);
}

uint64_t llvm::raw_ostream::flush_tied_then_write(llvm::raw_ostream *this, const char *a2)
{
  uint64_t v2 = (llvm::raw_ostream *)*((void *)this + 6);
  if (v2)
  {
    int v5 = (const char *)*((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 4) - (void)v5;
    if (v6)
    {
      *((void *)v2 + 4) = v5;
      unint64_t v7 = this;
      llvm::raw_ostream::flush_tied_then_write(v2, v5, v6);
      this = v7;
    }
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)this + 72);

  return v3();
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, char a2)
{
  unint64_t v5 = *((void *)this + 3);
  for (uint64_t i = (char *)*((void *)this + 4); ; uint64_t i = (char *)*((void *)this + 4))
  {
    if ((unint64_t)i < v5) {
      goto LABEL_7;
    }
    unint64_t v6 = (const char *)*((void *)this + 2);
    if (v6)
    {
      *((void *)this + 4) = v6;
      llvm::raw_ostream::flush_tied_then_write(this, v6);
      uint64_t i = (char *)*((void *)this + 4);
LABEL_7:
      *((void *)this + 4) = i + 1;
      *uint64_t i = a2;
      return this;
    }
    if (!*((_DWORD *)this + 14)) {
      break;
    }
    llvm::raw_ostream::SetBuffered(this);
    unint64_t v5 = *((void *)this + 3);
  }
  char v8 = a2;
  llvm::raw_ostream::flush_tied_then_write(this, &v8);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2, size_t a3)
{
  size_t v3 = a3;
  uint64_t v7 = *((void *)this + 3);
  unint64_t v6 = (char *)*((void *)this + 4);
  size_t v8 = v7 - (void)v6;
  if (v7 - (uint64_t)v6 < a3)
  {
    while (1)
    {
      while (1)
      {
        long long v13 = (char *)*((void *)this + 2);
        if (!v13) {
          break;
        }
        if (v6 == v13)
        {
          v8 *= v3 / v8;
          v3 -= v8;
          llvm::raw_ostream::flush_tied_then_write(this, a2);
          unint64_t v6 = (char *)*((void *)this + 4);
          size_t v12 = *((void *)this + 3) - (void)v6;
          if (v3 <= v12)
          {
            int v10 = &a2[v8];
            switch(v3)
            {
              case 0uLL:
                goto LABEL_10;
              case 1uLL:
                goto LABEL_33;
              case 2uLL:
                goto LABEL_32;
              case 3uLL:
                goto LABEL_31;
              case 4uLL:
                void v6[3] = v10[3];
                unint64_t v6 = (char *)*((void *)this + 4);
LABEL_31:
                v6[2] = v10[2];
                unint64_t v6 = (char *)*((void *)this + 4);
LABEL_32:
                v6[1] = v10[1];
                unint64_t v6 = (char *)*((void *)this + 4);
LABEL_33:
                char v9 = *v10;
                goto LABEL_7;
              default:
LABEL_9:
                memcpy(v6, v10, v3);
                goto LABEL_10;
            }
          }
        }
        else
        {
          switch(v8)
          {
            case 0uLL:
              break;
            case 1uLL:
              goto LABEL_23;
            case 2uLL:
              goto LABEL_22;
            case 3uLL:
              goto LABEL_21;
            case 4uLL:
              void v6[3] = a2[3];
              unint64_t v6 = (char *)*((void *)this + 4);
LABEL_21:
              v6[2] = a2[2];
              unint64_t v6 = (char *)*((void *)this + 4);
LABEL_22:
              v6[1] = a2[1];
              unint64_t v6 = (char *)*((void *)this + 4);
LABEL_23:
              *unint64_t v6 = *a2;
              break;
            default:
              memcpy(v6, a2, v8);
              break;
          }
          __int16 v14 = (const char *)*((void *)this + 2);
          *((void *)this + 4) = v14;
          llvm::raw_ostream::flush_tied_then_write(this, v14);
          v3 -= v8;
          unint64_t v6 = (char *)*((void *)this + 4);
          size_t v12 = *((void *)this + 3) - (void)v6;
        }
        a2 += v8;
        size_t v8 = v12;
        if (v12 >= v3) {
          goto LABEL_2;
        }
      }
      if (!*((_DWORD *)this + 14)) {
        break;
      }
      llvm::raw_ostream::SetBuffered(this);
      unint64_t v6 = (char *)*((void *)this + 4);
      size_t v8 = *((void *)this + 3) - (void)v6;
      if (v8 >= v3) {
        goto LABEL_2;
      }
    }
    llvm::raw_ostream::flush_tied_then_write(this, a2);
  }
  else
  {
LABEL_2:
    switch(v3)
    {
      case 0uLL:
        goto LABEL_10;
      case 1uLL:
        goto LABEL_6;
      case 2uLL:
        goto LABEL_5;
      case 3uLL:
        goto LABEL_4;
      case 4uLL:
        void v6[3] = a2[3];
        unint64_t v6 = (char *)*((void *)this + 4);
LABEL_4:
        v6[2] = a2[2];
        unint64_t v6 = (char *)*((void *)this + 4);
LABEL_5:
        v6[1] = a2[1];
        unint64_t v6 = (char *)*((void *)this + 4);
LABEL_6:
        char v9 = *a2;
        break;
      default:
        int v10 = a2;
        goto LABEL_9;
    }
LABEL_7:
    *unint64_t v6 = v9;
LABEL_10:
    *((void *)this + 4) += v3;
  }
  return this;
}

void **llvm::raw_ostream::copy_to_buffer(void **this, const char *a2, size_t __n)
{
  unint64_t v4 = this;
  switch(__n)
  {
    case 0uLL:
      break;
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      goto LABEL_3;
    case 4uLL:
      *((unsigned char *)this[4] + 3) = a2[3];
LABEL_3:
      *((unsigned char *)this[4] + 2) = a2[2];
LABEL_4:
      *((unsigned char *)this[4] + 1) = a2[1];
LABEL_5:
      *(unsigned char *)this[4] = *a2;
      break;
    default:
      this = (void **)memcpy(this[4], a2, __n);
      break;
  }
  void v4[4] = (char *)v4[4] + __n;
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::indent(llvm::raw_ostream *this, unsigned int a2)
{
  if (a2 < 0x50) {
    return llvm::raw_ostream::write(this, "                                                                                ", a2);
  }
  do
  {
    unsigned int v2 = a2;
    if (a2 >= 0x4F) {
      size_t v3 = 79;
    }
    else {
      size_t v3 = a2;
    }
    this = llvm::raw_ostream::write(this, "                                                                                ", v3);
    a2 = v2 - v3;
  }
  while (v2 != v3);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::write_zeros(llvm::raw_ostream *this, unsigned int a2)
{
  if (a2 < 0x50) {
    return llvm::raw_ostream::write(this, "", a2);
  }
  do
  {
    unsigned int v2 = a2;
    if (a2 >= 0x4F) {
      size_t v3 = 79;
    }
    else {
      size_t v3 = a2;
    }
    this = llvm::raw_ostream::write(this, "", v3);
    a2 = v2 - v3;
  }
  while (v2 != v3);
  return this;
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  int v5 = sub_1CD0D9358(a2, a3, a4, 0, 2, 0);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v5, 1, 0, 0);
}

{
  int v5;
  uint64_t vars8;

  int v5 = sub_1CD0D9358(a2, a3, a4, 0, 2, 0);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v5, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, int a5, char a6, int a7)
{
  int v8 = sub_1CD0D9358(a2, a3, a4, a5, a6, a7);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v8, 1, 0, 0);
}

{
  int v8;
  uint64_t vars8;

  int v8 = sub_1CD0D9358(a2, a3, a4, a5, a6, a7);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v8, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v6 = sub_1CD0D9358(a2, a3, a4, a5, 2, 0);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;
  uint64_t vars8;

  int v6 = sub_1CD0D9358(a2, a3, a4, a5, 2, 0);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;
  uint64_t vars8;

  int v6 = sub_1CD0D9358(a2, a3, a4, 0, 2, a5);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;
  uint64_t vars8;

  int v6 = sub_1CD0D9358(a2, a3, a4, 0, 2, a5);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v6 = sub_1CD0D9358(a2, a3, a4, 0, a5, 0);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;
  uint64_t vars8;

  int v6 = sub_1CD0D9358(a2, a3, a4, 0, a5, 0);

  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

uint64_t sub_1CD0D9358(unsigned char *a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6)
{
  if (a2 == 1 && *a1 == 45)
  {
    uint64_t v7 = std::system_category();
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = v7;
    std::system_category();
    return 1;
  }
  else
  {
    unsigned int v15 = 0;
    __int16 v14 = 261;
    v13[0] = a1;
    v13[1] = a2;
    if (a5) {
      int v10 = 3;
    }
    else {
      int v10 = 2;
    }
    uint64_t v11 = llvm::sys::fs::openFile((unsigned __int8 *)v13, (int *)&v15, a4, v10, a6, 438);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v12;
    if (v11) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v15;
    }
  }
}

uint64_t llvm::raw_fd_ostream::write_impl(llvm::raw_fd_ostream *this, const char *__buf, unint64_t a3)
{
  unint64_t v3 = a3;
  *((void *)this + 11) += a3;
  while (1)
  {
    size_t v6 = v3 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v3;
    uint64_t result = write(*((_DWORD *)this + 15), __buf, v6);
    if (result < 0) {
      break;
    }
    __buf += result;
    v3 -= result;
LABEL_7:
    if (!v3) {
      return result;
    }
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 4) {
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 35) {
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 35) {
    goto LABEL_7;
  }
  uint64_t v8 = *__error();
  uint64_t result = (uint64_t)std::generic_category();
  *((void *)this + 9) = v8;
  *((void *)this + 10) = result;
  return result;
}

off_t llvm::raw_fd_ostream::seek(llvm::raw_fd_ostream *this, off_t a2)
{
  unint64_t v4 = (const char *)*((void *)this + 2);
  if (*((const char **)this + 4) != v4)
  {
    *((void *)this + 4) = v4;
    llvm::raw_ostream::flush_tied_then_write(this, v4);
  }
  off_t result = lseek(*((_DWORD *)this + 15), a2, 0);
  *((void *)this + 11) = result;
  if (result == -1)
  {
    uint64_t v6 = *__error();
    uint64_t v7 = std::generic_category();
    *((void *)this + 9) = v6;
    *((void *)this + 10) = v7;
    return *((void *)this + 11);
  }
  return result;
}

off_t llvm::raw_fd_ostream::pwrite_impl(llvm::raw_fd_ostream *this, const char *a2, size_t a3, off_t a4)
{
  off_t v8 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(void *)this + 80))(this)
     + *((void *)this + 4)
     - *((void *)this + 2);
  llvm::raw_fd_ostream::seek(this, a4);
  char v9 = llvm::raw_ostream::write(this, a2, a3);

  return llvm::raw_fd_ostream::seek(v9, v8);
}

llvm *llvm::raw_fd_ostream::tryLockFor@<X0>(llvm::raw_fd_ostream *this@<X0>, const Duration *a2@<X1>, uint64_t a3@<X8>)
{
  off_t result = (llvm *)llvm::sys::fs::tryLockFile(*((_DWORD *)this + 15), *(void *)a2);
  if (result)
  {
    off_t result = (llvm *)llvm::errorCodeToError(result, v6, (void *)a3);
    char v7 = *(unsigned char *)(a3 + 8) | 1;
  }
  else
  {
    char v7 = *(unsigned char *)(a3 + 8) & 0xFE;
    *(_DWORD *)a3 = *((_DWORD *)this + 15);
  }
  *(unsigned char *)(a3 + 8) = v7;
  return result;
}

void *llvm::errs(llvm *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCFB338, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCFB338))
  {
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&unk_1EBCFB3E8, 2, 0, 1, 0);
    __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &unk_1EBCFB3E8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCFB338);
  }
  return &unk_1EBCFB3E8;
}

uint64_t *llvm::nulls(llvm *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCFB340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCFB340))
  {
    dword_1EBCFB350 = 0;
    qword_1EBCFB378 = 0;
    dword_1EBCFB380 = 0;
    qword_1EBCFB360 = 0;
    unk_1EBCFB368 = 0;
    qword_1EBCFB358 = 0;
    byte_1EBCFB370 = 0;
    qword_1EBCFB348 = (uint64_t)&unk_1F2646D90;
    __cxa_atexit((void (*)(void *))llvm::raw_null_ostream::~raw_null_ostream, &qword_1EBCFB348, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCFB340);
  }
  return &qword_1EBCFB348;
}

void llvm::raw_null_ostream::~raw_null_ostream(llvm::raw_null_ostream *this)
{
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v1 = *((void *)this + 2);
    if (v1) {
      MEMORY[0x1D25D9CB0](v1, 0x1000C8077774924);
    }
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v1 = *((void *)this + 2);
    if (v1) {
      MEMORY[0x1D25D9CB0](v1, 0x1000C8077774924);
    }
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v1 = *((void *)this + 2);
    if (v1) {
      MEMORY[0x1D25D9CB0](v1, 0x1000C8077774924);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::raw_fd_stream::raw_fd_stream(uint64_t a1, unsigned char *a2, uint64_t a3, void *a4)
{
  int v6 = sub_1CD0D9358(a2, a3, (uint64_t)a4, 0, 3, 0);
  llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 1);
  *(void *)a1 = &unk_1F2646C90;
  if (!*(_DWORD *)a4 && !*(unsigned char *)(a1 + 66))
  {
    char v7 = std::generic_category();
    *a4 = 22;
    a4[1] = v7;
  }
  return a1;
}

std::string *llvm::raw_string_ostream::write_impl(std::string **this, const char *a2, std::string::size_type a3)
{
  return std::string::append(this[8], a2, a3);
}

uint64_t llvm::raw_svector_ostream::current_pos(llvm::raw_svector_ostream *this)
{
  return *(void *)(*((void *)this + 8) + 8);
}

void *llvm::raw_svector_ostream::write_impl(void *this, const char *a2, size_t __n)
{
  unint64_t v4 = (void *)this[8];
  uint64_t v5 = v4[1];
  if (v4[2] >= v5 + __n && __n) {
    goto LABEL_3;
  }
  if (v4[2] < v5 + __n) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (__n)
  {
LABEL_3:
    this = memcpy((void *)(*v4 + v5), a2, __n);
    uint64_t v5 = v4[1];
  }
  v4[1] = v5 + __n;
  return this;
}

uint64_t *llvm::writeToOutput@<X0>(llvm *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a2 != 9)
  {
    if (a2 == 1 && *(unsigned char *)a1 == 45)
    {
      llvm::outs(a1);
      uint64_t v8 = *(void *)(a3 + 24);
      if (v8)
      {
        char v9 = *(uint64_t (**)(void))(*(void *)v8 + 48);
        return (uint64_t *)v9();
      }
LABEL_35:
      sub_1CB920400();
      return (uint64_t *)sub_1CD0D9D80(v16);
    }
    goto LABEL_12;
  }
  if (*(void *)a1 != 0x6C756E2F7665642FLL || *((unsigned char *)a1 + 8) != 108)
  {
LABEL_12:
    LOWORD(v26) = 773;
    unint64_t v22 = a1;
    uint64_t v23 = a2;
    long long v24 = ".temp-stream-%%%%%%";
    llvm::sys::fs::TempFile::create((uint64_t)&v22, 511, 0, (uint64_t)v30);
    if (v32)
    {
      LOWORD(v26) = 261;
      unint64_t v22 = a1;
      uint64_t v23 = a2;
      uint64_t v12 = v30[0];
      v30[0] = 0;
      v17[0] = v12;
      sub_1CC226C78((uint64_t)&v22, 0, 0, v17);
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v22, v31, 0, 0, 0);
    uint64_t v14 = *(void *)(a3 + 24);
    if (!v14) {
      goto LABEL_35;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 48))(v17);
    if (v17[0])
    {
      llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)v30, &v21);
      if (v21)
      {
        __int16 v19 = v21;
        uint64_t v20 = (char *)v17[0];
        v17[0] = 0;
        uint64_t v21 = 0;
        sub_1CD5E5368(&v20, &v19, a4);
        if (v19) {
          (*(void (**)(char *))(*(void *)v19 + 8))(v19);
        }
        if (v20) {
          (*(void (**)(char *))(*(void *)v20 + 8))(v20);
        }
        if (v21) {
          (*(void (**)(char *))(*(void *)v21 + 8))(v21);
        }
        if (v17[0]) {
          (*(void (**)(uint64_t))(*(void *)v17[0] + 8))(v17[0]);
        }
      }
      else
      {
        *a4 = (char *)v17[0];
      }
    }
    else
    {
      unsigned int v15 = (const llvm::Twine *)(v26 - v24);
      if (v26 != v24)
      {
        size_t v26 = v24;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v22, v24);
      }
      __int16 v18 = 261;
      v17[0] = (uint64_t)a1;
      v17[1] = a2;
      llvm::sys::fs::TempFile::keep((llvm::sys::fs::TempFile *)v30, (const llvm::Twine *)v17, v15, a4);
    }
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v22);
    return sub_1CCC1A4A0(v30);
  }
  LODWORD(v23) = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v25 = 0;
  size_t v26 = 0;
  char v27 = 0;
  long long v24 = 0;
  unint64_t v22 = (llvm *)&unk_1F2646D90;
  uint64_t v13 = *(void *)(a3 + 24);
  if (!v13) {
    goto LABEL_35;
  }
  off_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, llvm **))(*(void *)v13 + 48))(v13, &v22);
  unint64_t v22 = (llvm *)&unk_1F2646B98;
  if (v29 == 1)
  {
    off_t result = (uint64_t *)v24;
    if (v24) {
      return (uint64_t *)MEMORY[0x1D25D9CB0](v24, 0x1000C8077774924);
    }
  }
  return result;
}

uint64_t sub_1CD0D9D80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (*(char *)(v1 + 23) < 0) {
    return *(void *)(v1 + 8);
  }
  else {
    return *(unsigned __int8 *)(v1 + 23);
  }
}

void sub_1CD0D9DA0(uint64_t a1)
{
  sub_1CD0D9E1C(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0D9DD8(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

void sub_1CD0D9DE4(llvm::raw_fd_ostream *a1)
{
  llvm::raw_fd_ostream::~raw_fd_ostream(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0D9E1C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2646E90;
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = *(llvm::raw_ostream **)(a1 + 72);
  unint64_t v4 = *(const void **)v2;
  size_t v5 = *(void *)(v2 + 8);
  int v6 = (void *)*((void *)v3 + 4);
  if (v5 <= *((void *)v3 + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((void *)v3 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, (const char *)v4, v5);
  }
  char v7 = *(void **)(a1 + 80);
  if (v7 != (void *)(a1 + 104)) {
    free(v7);
  }
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9) {
      MEMORY[0x1D25D9CB0](v9, 0x1000C8077774924);
    }
  }
  return a1;
}

uint64_t sub_1CD0D9F30(uint64_t a1)
{
  *(void *)a1 = &unk_1F2647120;
  sub_1CD0DA2AC((void *)a1);
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1CD0D9FBC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2647120;
  sub_1CD0DA2AC((void *)a1);
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8077774924);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD0DA068(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 16))();
}

uint64_t sub_1CD0DA090(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 48))();
}

uint64_t sub_1CD0DA0B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 56))();
}

uint64_t sub_1CD0DA0E0(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 40) = a2;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))();
}

llvm::raw_ostream *sub_1CD0DA10C(uint64_t a1, const char *a2, size_t a3)
{
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
}

uint64_t sub_1CD0DA114(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  return (*(uint64_t (**)(void *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1CD0DA16C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1CD0DA174(uint64_t a1)
{
  *(void *)a1 = &unk_1F2646590;
  sub_1CD85A580((void *)a1);
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1CD0DA200(uint64_t a1)
{
  *(void *)a1 = &unk_1F2646590;
  sub_1CD85A580((void *)a1);
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8077774924);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD0DA2AC(void *this)
{
  uint64_t v1 = this;
  uint64_t v3 = this + 2;
  uint64_t v2 = (const char *)this[2];
  unint64_t v4 = (const char *)this[4];
  int64_t v5 = v4 - v2;
  if (v4 != v2)
  {
    this[4] = v2;
    this = (void *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v2);
  }
  if (*((_DWORD *)v1 + 14) == 1)
  {
    this = (void *)*v3;
    if (*v3) {
      this = (void *)MEMORY[0x1D25D9CB0](this, 0x1000C8077774924, v5);
    }
  }
  *((_DWORD *)v1 + 14) = 0;
  v1[8] = 0;
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = 0;
  return this;
}

uint64_t sub_1CD0DA328(uint64_t a1)
{
  *(void *)a1 = &unk_1F2647120;
  sub_1CD0DA2AC((void *)a1);
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1CD0DA3B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2647120;
  sub_1CD0DA2AC((void *)a1);
  *(void *)a1 = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8077774924);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm_regcomp(uint64_t a1, char *__s, int a3)
{
  if ((~a3 & 0x11) == 0) {
    return 16;
  }
  uint64_t v76 = v3;
  uint64_t v77 = v4;
  int v6 = __s;
  if ((a3 & 0x20) != 0)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    size_t v9 = v8 - (void)__s;
    if (v8 < (unint64_t)__s) {
      return 16;
    }
  }
  else
  {
    size_t v9 = strlen(__s);
  }
  int v10 = malloc_type_malloc(0x18FuLL, 0xE334DFFDuLL);
  if (!v10) {
    return 12;
  }
  uint64_t v11 = v10;
  uint64_t v64 = 0;
  uint64_t v60 = 0;
  uint64_t v63 = 0;
  unint64_t v12 = 3 * (v9 >> 1);
  uint64_t v62 = v12 + 1;
  uint64_t v13 = malloc_type_calloc(v12 + 1, 8uLL, 0x100004000313F17uLL);
  ptr = v13;
  if (!v13)
  {
    free(v11);
    return 12;
  }
  size_t v65 = v11;
  uint64_t v14 = &v6[v9];
  v59.n128_u64[0] = (unint64_t)v6;
  v59.n128_u64[1] = (unint64_t)&v6[v9];
  LODWORD(v60) = 0;
  LODWORD(v64) = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  void v11[4] = 256;
  *(void *)(v11 + 5) = 0;
  unsigned int v15 = v11 + 5;
  *(void *)(v11 + 7) = 0;
  v11[9] = 0;
  *(_OWORD *)(v11 + 34) = 0u;
  *(_OWORD *)(v11 + 66) = 0u;
  v11[10] = a3 & 0xFFFFFF7F;
  v11[26] = 0;
  *((void *)v11 + 14) = 0;
  *(_OWORD *)(v11 + 18) = xmmword_1CF96C230;
  *((void *)v11 + 11) = v11 + 66;
  *((void *)v11 + 12) = 0;
  *(_OWORD *)(v11 + 38) = 0u;
  *(_OWORD *)(v11 + 42) = 0u;
  *(_OWORD *)(v11 + 46) = 0u;
  *(_OWORD *)(v11 + 50) = 0u;
  *(_OWORD *)(v11 + 54) = 0u;
  *(_OWORD *)(v11 + 58) = 0u;
  *(_OWORD *)(v11 + 62) = 0u;
  *(_OWORD *)(v11 + 70) = 0u;
  *(_OWORD *)(v11 + 74) = 0u;
  *(_OWORD *)(v11 + 78) = 0u;
  *(_OWORD *)(v11 + 82) = 0u;
  *(_OWORD *)(v11 + 86) = 0u;
  *(_OWORD *)(v11 + 90) = 0u;
  *(_OWORD *)(v11 + 94) = 0u;
  v11[30] = 0;
  if (v12 < 0x7FFFFFFFFFFFFFFFLL)
  {
    int v16 = 1;
    goto LABEL_8;
  }
  BOOL v57 = v14;
  uint64_t v58 = v13;
  uint64_t v52 = v12 + 2;
  if ((uint64_t)(v12 + 2) < 0) {
    uint64_t v52 = v12 + 3;
  }
  unint64_t v53 = (v52 & 0xFFFFFFFFFFFFFFFELL) + (v52 >> 1);
  if ((uint64_t)(v12 + 1) >= (uint64_t)v53)
  {
    int v16 = 1;
  }
  else
  {
    if (v53 >> 61 || (uint64_t v13 = malloc_type_realloc(v13, 24 * (v52 >> 1), 0x100004000313F17uLL)) == 0)
    {
      int v16 = 0;
      LODWORD(v60) = 12;
      int v6 = &byte_1EA61E000;
      v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
      v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
      uint64_t v14 = &byte_1EA61E000;
      uint64_t v13 = v58;
      goto LABEL_8;
    }
    ptr = v13;
    uint64_t v62 = 0;
    int v16 = 1;
  }
  uint64_t v14 = v57;
LABEL_8:
  uint64_t v63 = 1;
  *uint64_t v13 = 0x8000000;
  *((void *)v11 + 7) = v63 - 1;
  if (a3)
  {
    sub_1CD0DAC10((uint64_t)&v59, 128);
  }
  else if ((a3 & 0x10) != 0)
  {
    if (v14 - v6 <= 0)
    {
      if (v16) {
        LODWORD(v60) = 14;
      }
      int v6 = &byte_1EA61E000;
      v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
      v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
      uint64_t v14 = &byte_1EA61E000;
    }
    if (v14 - v6 >= 1)
    {
      do
      {
        v59.n128_u64[0] = (unint64_t)(v6 + 1);
        sub_1CD0DC878(&v59, *v6);
        int v6 = (char *)v59.n128_u64[0];
      }
      while ((uint64_t)(v59.n128_u64[1] - v59.n128_u64[0]) > 0);
    }
  }
  else
  {
    sub_1CD0DB574((uint64_t)&v59, 128, 128);
  }
  unint64_t v17 = v63;
  if (!v60)
  {
    if (v63 < v62) {
      goto LABEL_12;
    }
    uint64_t v54 = v62 + 2;
    if (v62 >= -1) {
      uint64_t v54 = v62 + 1;
    }
    unint64_t v55 = (v54 & 0xFFFFFFFFFFFFFFFELL) + (v54 >> 1);
    if (v62 >= (uint64_t)v55)
    {
LABEL_12:
      int v18 = 0;
    }
    else
    {
      if (v55 >> 61)
      {
        int v18 = 12;
        LODWORD(v60) = 12;
        v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
        v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
LABEL_14:
        uint64_t v63 = v17 + 1;
        *((void *)ptr + v17) = 0x8000000;
        unint64_t v17 = v63;
        *((void *)v11 + 8) = v63 - 1;
        if (!v18)
        {
          uint64_t v19 = *((void *)v11 + 11);
          for (uint64_t i = -128; i != 128; ++i)
          {
            if (!*(unsigned char *)(v19 + i) && *v15 >= 1)
            {
              unsigned int v21 = (*v15 + 7) >> 3;
              uint64_t v22 = *((void *)v11 + 4);
              while (!*(unsigned char *)(v22 + i))
              {
                v22 += (int)v11[4];
                if (!--v21) {
                  goto LABEL_21;
                }
              }
              int v23 = v11[21];
              v11[21] = v23 + 1;
              *(unsigned char *)(v19 + i) = v23;
              if (i <= 126)
              {
                uint64_t v24 = i;
                do
                {
                  ++v24;
                  if (!*(unsigned char *)(v19 + v24))
                  {
                    if (*v15 < 1)
                    {
LABEL_32:
                      *(unsigned char *)(v19 + v24) = v23;
                    }
                    else
                    {
                      uint64_t v25 = *((void *)v11 + 4);
                      unsigned int v26 = (*v15 + 7) >> 3;
                      while (*(unsigned __int8 *)(v25 + i) == *(unsigned __int8 *)(v25 + v24))
                      {
                        v25 += (int)v11[4];
                        if (!--v26) {
                          goto LABEL_32;
                        }
                      }
                    }
                  }
                }
                while (v24 != 127);
              }
            }
LABEL_21:
            ;
          }
          unint64_t v17 = v63;
        }
        goto LABEL_33;
      }
      BOOL v56 = malloc_type_realloc(ptr, 24 * (v54 >> 1), 0x100004000313F17uLL);
      if (v56)
      {
        ptr = v56;
        uint64_t v62 = v55;
        int v18 = v60;
      }
      else
      {
        int v18 = v60;
        if (!v60)
        {
          int v18 = 12;
          LODWORD(v60) = 12;
        }
        v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
        v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
      }
    }
    unint64_t v17 = v63;
    goto LABEL_14;
  }
  *((void *)v11 + 8) = v63 - 1;
LABEL_33:
  *((void *)v11 + 6) = v17;
  if (v17 >> 61)
  {
    *((void *)v11 + 1) = ptr;
    LODWORD(v28) = v60;
    if (!v60)
    {
      LODWORD(v28) = 12;
      LODWORD(v60) = 12;
    }
    int v50 = 0;
    uint64_t v44 = 0;
    v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
    v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
  }
  else
  {
    char v27 = (char *)malloc_type_realloc(ptr, 8 * v17, 0x100004000313F17uLL);
    *((void *)v11 + 1) = v27;
    LODWORD(v28) = v60;
    if (v27)
    {
      if (v60) {
        goto LABEL_77;
      }
      int v29 = 0;
      char v30 = 0;
      uint64_t v31 = 0;
      char v32 = (uint64_t *)(v27 + 8);
      uint64_t v33 = (uint64_t *)(v27 + 8);
      while (1)
      {
        uint64_t v35 = *v33++;
        LODWORD(v34) = v35;
        unint64_t v36 = ((unint64_t)(v35 & 0xF8000000) - 0x10000000) >> 27;
        if (v36 > 0xD) {
          goto LABEL_44;
        }
        if (((1 << v36) & 0x1880) == 0)
        {
          if (v36)
          {
            if (((1 << v36) & 0x2200) != 0)
            {
              do
              {
                v32 += v34 & 0x7FFFFFF;
                uint64_t v34 = *v32;
                uint64_t v37 = *v32 & 0xF8000000;
                if (v37 == 1610612736)
                {
                  uint64_t v33 = v32;
                  goto LABEL_44;
                }
              }
              while (v37 == -2013265920);
              uint64_t v33 = v32;
              if (v37 == -1879048192) {
                goto LABEL_44;
              }
              v11[18] |= 4u;
LABEL_60:
              LODWORD(v28) = v60;
              if (!v60)
              {
                uint64_t v28 = 0;
                uint64_t v44 = 0;
                unint64_t v45 = (uint64_t *)(*((void *)v11 + 1) + 8);
                do
                {
                  uint64_t v46 = *v45++;
                  uint64_t v47 = v46 & 0xF8000000;
                  if (v28 <= v44) {
                    uint64_t v48 = v44;
                  }
                  else {
                    uint64_t v48 = v28;
                  }
                  uint64_t v49 = v28 - 1;
                  if (v47 == 1207959552) {
                    ++v28;
                  }
                  if (v47 == 1342177280)
                  {
                    uint64_t v28 = v49;
                    uint64_t v44 = v48;
                  }
                }
                while (v47 != 0x8000000);
                if (v28)
                {
                  LODWORD(v28) = 0;
                  v11[18] |= 4u;
                }
                int v50 = 1;
                goto LABEL_73;
              }
LABEL_77:
              int v50 = 0;
              uint64_t v44 = 0;
              goto LABEL_73;
            }
LABEL_44:
            if (v31 > (int)v11[26])
            {
              v11[26] = v31;
              int v29 = v30;
            }
            uint64_t v31 = 0;
            goto LABEL_47;
          }
          if (!v31) {
            char v30 = v32;
          }
          ++v31;
        }
LABEL_47:
        char v32 = v33;
        if ((v34 & 0xF8000000) == 0x8000000)
        {
          uint64_t v38 = (int)v11[26];
          if (v38)
          {
            unint64_t v39 = malloc_type_malloc(v38 + 1, 0x61097D62uLL);
            *((void *)v11 + 12) = v39;
            if (v39)
            {
              uint64_t v40 = v11[26];
              if ((int)v40 >= 1)
              {
                do
                {
                  do
                  {
                    uint64_t v42 = *v29++;
                    char v41 = v42;
                  }
                  while ((v42 & 0xF8000000) != 0x10000000);
                  *v39++ = v41;
                }
                while (v40-- > 1);
              }
              unsigned char *v39 = 0;
            }
            else
            {
              v11[26] = 0;
            }
          }
          goto LABEL_60;
        }
      }
    }
    if (!v60)
    {
      LODWORD(v28) = 12;
      LODWORD(v60) = 12;
    }
    int v50 = 0;
    uint64_t v44 = 0;
    v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
    v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
    *((void *)v11 + 1) = ptr;
  }
LABEL_73:
  *((void *)v11 + 16) = v44;
  *uint64_t v11 = 53829;
  *(void *)(a1 + 8) = *((void *)v11 + 14);
  *(void *)(a1 + 24) = v11;
  *(_DWORD *)a1 = 62053;
  if ((v11[18] & 4) != 0)
  {
    if (v50)
    {
      LODWORD(v28) = 15;
      LODWORD(v60) = 15;
    }
    v59.n128_u64[0] = (unint64_t)&byte_1EA61E000;
    v59.n128_u64[1] = (unint64_t)&byte_1EA61E000;
  }
  if (!v28) {
    return 0;
  }
  llvm_regfree(a1);
  return v60;
}

void **sub_1CD0DAB98(void **result, uint64_t a2, uint64_t a3)
{
  if (!*((_DWORD *)result + 4))
  {
    int64_t v5 = result;
    uint64_t v7 = (uint64_t)result[4];
    uint64_t v6 = (uint64_t)result[5];
    if (v6 >= v7)
    {
      uint64_t v8 = v7 + 2;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      off_t result = sub_1CD0DD0EC(result, (v8 & 0xFFFFFFFFFFFFFFFELL) + (v8 >> 1));
      uint64_t v6 = (uint64_t)v5[5];
    }
    size_t v9 = v5[3];
    v5[5] = (void *)(v6 + 1);
    v9[v6] = a3 | a2;
  }
  return result;
}

void sub_1CD0DAC10(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  while (2)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(char **)a1;
    size_t v9 = *(char **)(a1 + 8);
    if ((uint64_t)&v9[-*(void *)a1] < 1) {
      goto LABEL_143;
    }
    while (1)
    {
      int v10 = *v8;
      uint64_t v11 = *(void *)(a1 + 40);
      if (v10 == 124 || v10 == a2) {
        break;
      }
      uint64_t v13 = v8 + 1;
      *(void *)a1 = v8 + 1;
      int v14 = *v8;
      if (v14 <= 62)
      {
        switch(*v8)
        {
          case '$':
            if (!*(_DWORD *)(a1 + 16))
            {
              uint64_t v15 = *(void *)(a1 + 32);
              uint64_t v16 = v11;
              if (v11 >= v15)
              {
                uint64_t v17 = v15 + 2;
                if (v15 >= -1) {
                  uint64_t v17 = v15 + 1;
                }
                sub_1CD0DD0EC((void **)a1, (v17 & 0xFFFFFFFFFFFFFFFELL) + (v17 >> 1));
                uint64_t v16 = *(void *)(a1 + 40);
              }
              uint64_t v18 = *(void *)(a1 + 24);
              *(void *)(a1 + 40) = v16 + 1;
              *(void *)(v18 + 8 * v16) = 0x20000000;
            }
            uint64_t v19 = *(void *)(a1 + 56);
            *(_DWORD *)(v19 + 72) |= 2u;
            ++*(_DWORD *)(v19 + 80);
            goto LABEL_72;
          case '(':
            if (v9 - v13 <= 0)
            {
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 8;
              }
              *(void *)a1 = &byte_1EA61E000;
              *(void *)(a1 + 8) = &byte_1EA61E000;
            }
            uint64_t v26 = *(void *)(a1 + 56);
            uint64_t v27 = *(void *)(v26 + 112);
            uint64_t v28 = v27 + 1;
            *(void *)(v26 + 112) = v27 + 1;
            if (v27 + 1 <= 9) {
              *(void *)(a1 + 8 * v28 + 64) = v11;
            }
            sub_1CD0DAB98((void **)a1, 1744830464, v27 + 1);
            if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) < 1 || **(unsigned char **)a1 != 41) {
              sub_1CD0DAC10(a1, 41);
            }
            if (v28 <= 9) {
              *(void *)(a1 + 8 * v28 + 144) = *(void *)(a1 + 40);
            }
            sub_1CD0DAB98((void **)a1, 1879048192, v28);
            int v29 = *(char **)a1;
            if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) < 1) {
              goto LABEL_47;
            }
            *(void *)a1 = v29 + 1;
            if (*v29 != 41) {
              goto LABEL_47;
            }
            goto LABEL_72;
          case ')':
LABEL_47:
            if (*(_DWORD *)(a1 + 16)) {
              goto LABEL_50;
            }
            int v25 = 8;
            break;
          case '*':
          case '+':
            goto LABEL_32;
          case '.':
            if ((*(unsigned char *)(*(void *)(a1 + 56) + 40) & 8) != 0)
            {
              *(void *)a1 = &v74;
              *(void *)(a1 + 8) = (char *)&v74 + 3;
              int v74 = 6097502;
              sub_1CD0DBCC0(a1);
              *(void *)a1 = v13;
              *(void *)(a1 + 8) = v9;
            }
            else if (!*(_DWORD *)(a1 + 16))
            {
              uint64_t v30 = *(void *)(a1 + 32);
              uint64_t v31 = v11;
              if (v11 >= v30)
              {
                uint64_t v32 = v30 + 2;
                if (v30 >= -1) {
                  uint64_t v32 = v30 + 1;
                }
                sub_1CD0DD0EC((void **)a1, (v32 & 0xFFFFFFFFFFFFFFFELL) + (v32 >> 1));
                uint64_t v31 = *(void *)(a1 + 40);
              }
              uint64_t v33 = *(void *)(a1 + 24);
              *(void *)(a1 + 40) = v31 + 1;
              *(void *)(v33 + 8 * v31) = 671088640;
            }
            goto LABEL_72;
          default:
            goto LABEL_71;
        }
LABEL_49:
        *(_DWORD *)(a1 + 16) = v25;
        goto LABEL_50;
      }
      if (v14 > 93)
      {
        if (v14 != 94)
        {
          if (v14 == 123)
          {
            if (v9 - v13 >= 1 && *v13 - 48 <= 9)
            {
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 13;
              }
              *(void *)a1 = &byte_1EA61E000;
              *(void *)(a1 + 8) = &byte_1EA61E000;
            }
          }
          else if (v14 == 124)
          {
            if (!*(_DWORD *)(a1 + 16))
            {
              int v25 = 14;
              goto LABEL_49;
            }
            goto LABEL_50;
          }
LABEL_71:
          sub_1CD0DC878((__n128 *)a1, v14);
          goto LABEL_72;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          uint64_t v34 = *(void *)(a1 + 32);
          uint64_t v35 = v11;
          if (v11 >= v34)
          {
            uint64_t v36 = v34 + 2;
            if (v34 >= -1) {
              uint64_t v36 = v34 + 1;
            }
            sub_1CD0DD0EC((void **)a1, (v36 & 0xFFFFFFFFFFFFFFFELL) + (v36 >> 1));
            uint64_t v35 = *(void *)(a1 + 40);
          }
          uint64_t v37 = *(void *)(a1 + 24);
          *(void *)(a1 + 40) = v35 + 1;
          *(void *)(v37 + 8 * v35) = 402653184;
        }
        char v24 = 0;
        uint64_t v38 = *(int32x2_t **)(a1 + 56);
        int32x2_t v39 = v38[9];
        int32x2_t v40 = vadd_s32(v39, (int32x2_t)0x100000001);
        v39.i32[0] |= 1u;
        v39.i32[1] = v40.i32[1];
        v38[9] = v39;
      }
      else
      {
        if (v14 == 63)
        {
LABEL_32:
          if (!*(_DWORD *)(a1 + 16))
          {
            int v25 = 13;
            goto LABEL_49;
          }
          goto LABEL_50;
        }
        if (v14 == 91)
        {
          sub_1CD0DBCC0(a1);
          goto LABEL_72;
        }
        if (v14 != 92) {
          goto LABEL_71;
        }
        if (v9 - v13 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 5;
          }
          *(void *)(a1 + 8) = &byte_1EA61E000;
          uint64_t v13 = &byte_1EA61E000;
        }
        *(void *)a1 = v13 + 1;
        int v14 = *v13;
        if ((v14 - 49) > 8) {
          goto LABEL_71;
        }
        uint64_t v20 = (v14 - 48);
        uint64_t v21 = a1 + 8 * v20;
        uint64_t v23 = *(void *)(v21 + 144);
        uint64_t v22 = (uint64_t *)(v21 + 144);
        if (!v23)
        {
          if (!*(_DWORD *)(a1 + 16))
          {
            int v25 = 6;
            goto LABEL_49;
          }
LABEL_50:
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
LABEL_72:
          char v24 = 1;
          goto LABEL_73;
        }
        sub_1CD0DAB98((void **)a1, 939524096, v20);
        sub_1CD0DC80C(a1, *(void *)(a1 + 8 * v20 + 64) + 1, *v22);
        sub_1CD0DAB98((void **)a1, 0x40000000, v20);
        char v24 = 1;
        *(_DWORD *)(*(void *)(a1 + 56) + 120) = 1;
      }
LABEL_73:
      uint64_t v8 = *(char **)a1;
      size_t v9 = *(char **)(a1 + 8);
      uint64_t v41 = (uint64_t)&v9[-*(void *)a1];
      if (v41 >= 1)
      {
        if ((int v42 = *v8, (v42 - 42) < 2)
          || v42 == 63
          || (v42 == 123 ? (BOOL v43 = (unint64_t)v41 >= 2) : (BOOL v43 = 0),
              v43 && v8[1] - 48 <= 9))
        {
          *(void *)a1 = v8 + 1;
          if ((v24 & 1) == 0)
          {
            if (!*(_DWORD *)(a1 + 16)) {
              *(_DWORD *)(a1 + 16) = 13;
            }
            *(void *)a1 = &byte_1EA61E000;
            *(void *)(a1 + 8) = &byte_1EA61E000;
          }
          if ((char)v42 > 62)
          {
            if ((char)v42 == 63)
            {
              sub_1CD0DBC1C((void *)a1, 2013265920, *(void *)(a1 + 40) - v11 + 1, v11);
              sub_1CD0DAB98((void **)a1, 0x80000000, *(void *)(a1 + 40) - v11);
              if (!*(_DWORD *)(a1 + 16))
              {
                uint64_t v51 = *(void *)(a1 + 24);
                *(void *)(v51 + 8 * v11) = *(void *)(v51 + 8 * v11) & 0xF8000000 | (*(void *)(a1 + 40) - v11);
                uint64_t v53 = *(void *)(a1 + 32);
                uint64_t v52 = *(void *)(a1 + 40);
                if (v52 >= v53)
                {
                  uint64_t v54 = v53 + 2;
                  if (v53 >= -1) {
                    uint64_t v54 = v53 + 1;
                  }
                  sub_1CD0DD0EC((void **)a1, (v54 & 0xFFFFFFFFFFFFFFFELL) + (v54 >> 1));
                  uint64_t v51 = *(void *)(a1 + 24);
                  uint64_t v55 = *(void *)(a1 + 40);
                  int v56 = *(_DWORD *)(a1 + 16);
                  *(void *)(a1 + 40) = v55 + 1;
                  *(void *)(v51 + 8 * v55) = 2281701376;
                  if (v56) {
                    goto LABEL_128;
                  }
                }
                else
                {
                  *(void *)(a1 + 40) = v52 + 1;
                  *(void *)(v51 + 8 * v52) = 2281701376;
                }
                *(void *)(v51 + 8 * *(void *)(a1 + 40) - 8) = *(void *)(v51 + 8 * *(void *)(a1 + 40) - 8) & 0xF8000000 | 1;
                uint64_t v58 = *(void *)(a1 + 32);
                uint64_t v57 = *(void *)(a1 + 40);
                if (v57 >= v58)
                {
                  uint64_t v59 = v58 + 2;
                  if (v58 >= -1) {
                    uint64_t v59 = v58 + 1;
                  }
                  sub_1CD0DD0EC((void **)a1, (v59 & 0xFFFFFFFFFFFFFFFELL) + (v59 >> 1));
                  uint64_t v51 = *(void *)(a1 + 24);
                  uint64_t v57 = *(void *)(a1 + 40);
                }
                *(void *)(a1 + 40) = v57 + 1;
                *(void *)(v51 + 8 * v57) = 2415919106;
              }
            }
            else if ((char)v42 == 123)
            {
              uint64_t v47 = sub_1CD0DC968((uint64_t *)a1);
              int v48 = v47;
              uint64_t v49 = *(char **)a1;
              uint64_t v50 = v47;
              if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >= 1)
              {
                uint64_t v50 = v47;
                if (*v49 == 44)
                {
                  *(void *)a1 = v49 + 1;
                  if (v49[1] - 48 > 9)
                  {
                    uint64_t v50 = 256;
                  }
                  else
                  {
                    uint64_t v50 = sub_1CD0DC968((uint64_t *)a1);
                    if (v48 > (int)v50)
                    {
                      if (!*(_DWORD *)(a1 + 16)) {
                        *(_DWORD *)(a1 + 16) = 10;
                      }
                      *(void *)a1 = &byte_1EA61E000;
                      *(void *)(a1 + 8) = &byte_1EA61E000;
                    }
                  }
                }
              }
              sub_1CD0DC9FC((void **)a1, v11, v48, v50);
              uint64_t v61 = *(char **)a1;
              uint64_t v60 = *(void *)(a1 + 8);
              if (v60 - *(void *)a1 >= 1)
              {
                if (*v61 == 125)
                {
                  *(void *)a1 = v61 + 1;
                  goto LABEL_128;
                }
                uint64_t v62 = ~(unint64_t)v61 + v60;
                uint64_t v63 = (unsigned __int8 *)(v61 + 1);
                while (1)
                {
                  *(void *)a1 = v63;
                  if (v62 <= 0) {
                    break;
                  }
                  int v64 = *v63++;
                  --v62;
                  if (v64 == 125)
                  {
                    if (*(_DWORD *)(a1 + 16)) {
                      goto LABEL_127;
                    }
                    int v65 = 10;
                    goto LABEL_126;
                  }
                }
              }
              if (!*(_DWORD *)(a1 + 16))
              {
                int v65 = 9;
LABEL_126:
                *(_DWORD *)(a1 + 16) = v65;
              }
LABEL_127:
              *(void *)a1 = &byte_1EA61E000;
              *(void *)(a1 + 8) = &byte_1EA61E000;
            }
          }
          else if ((char)v42 == 42)
          {
            sub_1CD0DBC1C((void *)a1, 1207959552, *(void *)(a1 + 40) - v11 + 1, v11);
            sub_1CD0DAB98((void **)a1, 1342177280, *(void *)(a1 + 40) - v11);
            sub_1CD0DBC1C((void *)a1, 1476395008, *(void *)(a1 + 40) - v11 + 1, v11);
            uint64_t v44 = *(void *)(a1 + 40) - v11;
            unint64_t v45 = (void **)a1;
            uint64_t v46 = 1610612736;
LABEL_100:
            sub_1CD0DAB98(v45, v46, v44);
          }
          else if ((char)v42 == 43)
          {
            sub_1CD0DBC1C((void *)a1, 1207959552, *(void *)(a1 + 40) - v11 + 1, v11);
            uint64_t v44 = *(void *)(a1 + 40) - v11;
            unint64_t v45 = (void **)a1;
            uint64_t v46 = 1342177280;
            goto LABEL_100;
          }
LABEL_128:
          uint64_t v8 = *(char **)a1;
          size_t v9 = *(char **)(a1 + 8);
          uint64_t v66 = (uint64_t)&v9[-*(void *)a1];
          if (v66 >= 1)
          {
            if ((int v67 = *v8, (v67 - 42) < 2)
              || v67 == 63
              || (v67 == 123 ? (BOOL v68 = (unint64_t)v66 >= 2) : (BOOL v68 = 0),
                  v68 && v8[1] - 48 <= 9))
            {
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 13;
              }
              *(void *)a1 = &byte_1EA61E000;
              *(void *)(a1 + 8) = &byte_1EA61E000;
              uint64_t v8 = &byte_1EA61E000;
              size_t v9 = &byte_1EA61E000;
            }
          }
        }
      }
      if (v9 - v8 <= 0)
      {
        uint64_t v11 = *(void *)(a1 + 40);
        break;
      }
    }
    if (v11 == v7)
    {
LABEL_143:
      if (!*(_DWORD *)(a1 + 16)) {
        *(_DWORD *)(a1 + 16) = 14;
      }
      *(void *)a1 = &byte_1EA61E000;
      *(void *)(a1 + 8) = &byte_1EA61E000;
      uint64_t v11 = v7;
      uint64_t v8 = &byte_1EA61E000;
      size_t v9 = &byte_1EA61E000;
    }
    if (v9 - v8 >= 1 && *v8 == 124)
    {
      *(void *)a1 = v8 + 1;
      if (v6)
      {
        uint64_t v7 = v4;
        uint64_t v69 = v5;
      }
      else
      {
        sub_1CD0DBC1C((void *)a1, 2013265920, v11 - v7 + 1, v7);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v69 = v7;
      }
      sub_1CD0DAB98((void **)a1, 0x80000000, v11 - v7);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v4 = v5 - 1;
      char v6 = 1;
      if (!*(_DWORD *)(a1 + 16))
      {
        uint64_t v70 = *(void *)(a1 + 24);
        *(void *)(v70 + 8 * v69) = *(void *)(v70 + 8 * v69) & 0xF8000000 | (v5 - v69);
        uint64_t v71 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(a1 + 40);
        uint64_t v72 = v5;
        if (v5 >= v71)
        {
          uint64_t v73 = v71 + 2;
          if (v71 >= -1) {
            uint64_t v73 = v71 + 1;
          }
          sub_1CD0DD0EC((void **)a1, (v73 & 0xFFFFFFFFFFFFFFFELL) + (v73 >> 1));
          uint64_t v70 = *(void *)(a1 + 24);
          uint64_t v72 = *(void *)(a1 + 40);
        }
        *(void *)(a1 + 40) = v72 + 1;
        *(void *)(v70 + 8 * v72) = 2281701376;
      }
      continue;
    }
    break;
  }
  if (v6)
  {
    if (!*(_DWORD *)(a1 + 16))
    {
      *(void *)(*(void *)(a1 + 24) + 8 * v5) = *(void *)(*(void *)(a1 + 24) + 8 * v5) & 0xF8000000 | (v11 - v5);
      uint64_t v11 = *(void *)(a1 + 40);
    }
    sub_1CD0DAB98((void **)a1, 2415919104, v11 - v4);
  }
}

void sub_1CD0DB574(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v6 = (uint64_t)&v5[-*(void *)a1];
  if (v6 < 1) {
    goto LABEL_119;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (*v4 == 94)
  {
    *(void *)a1 = ++v4;
    if (!*(_DWORD *)(a1 + 16))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      if (v9 >= v10)
      {
        uint64_t v12 = v10 + 2;
        if (v10 >= -1) {
          uint64_t v12 = v10 + 1;
        }
        sub_1CD0DD0EC((void **)a1, (v12 & 0xFFFFFFFFFFFFFFFELL) + (v12 >> 1));
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v4 = *(char **)a1;
        uint64_t v5 = *(char **)(a1 + 8);
      }
      else
      {
        uint64_t v11 = v9;
      }
      uint64_t v13 = *(void *)(a1 + 24);
      *(void *)(a1 + 40) = v11 + 1;
      *(void *)(v13 + 8 * v11) = 402653184;
    }
    int v14 = *(int32x2_t **)(a1 + 56);
    int32x2_t v15 = v14[9];
    int32x2_t v16 = vadd_s32(v15, (int32x2_t)0x100000001);
    v15.i32[0] |= 1u;
    v15.i32[1] = v16.i32[1];
    v14[9] = v15;
    uint64_t v6 = v5 - v4;
    if (v5 - v4 <= 0)
    {
      uint64_t v49 = *(void *)(a1 + 40);
      goto LABEL_118;
    }
  }
  int v17 = 0;
  char v18 = 0;
  while (v6 == 1 || *v4 != a2 || v4[1] != a3)
  {
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = v4 + 1;
    *(void *)a1 = v4 + 1;
    int v21 = *v4;
    if (v21 == 92)
    {
      if (v5 - v20 <= 0)
      {
        if (!*(_DWORD *)(a1 + 16)) {
          *(_DWORD *)(a1 + 16) = 5;
        }
        *(void *)(a1 + 8) = &byte_1EA61E000;
        uint64_t v5 = &byte_1EA61E000;
        uint64_t v20 = &byte_1EA61E000;
      }
      *(void *)a1 = v20 + 1;
      int v21 = *v20++ | 0x100;
    }
    if (v21 > 304)
    {
      if ((v21 - 305) < 9)
      {
        uint64_t v22 = (v21 & 0xFFFFFEFF) - 48;
        uint64_t v23 = a1 + 8 * v22;
        uint64_t v25 = *(void *)(v23 + 144);
        char v24 = (uint64_t *)(v23 + 144);
        if (v25)
        {
          sub_1CD0DAB98((void **)a1, 939524096, (v21 & 0xFFFFFEFF) - 48);
          sub_1CD0DC80C(a1, *(void *)(a1 + 8 * v22 + 64) + 1, *v24);
          sub_1CD0DAB98((void **)a1, 0x40000000, (v21 & 0xFFFFFEFF) - 48);
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 6;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
        }
        *(_DWORD *)(*(void *)(a1 + 56) + 120) = 1;
        goto LABEL_72;
      }
      if (v21 == 379)
      {
        if (!*(_DWORD *)(a1 + 16))
        {
          int v36 = 13;
LABEL_64:
          *(_DWORD *)(a1 + 16) = v36;
        }
      }
      else
      {
        if (v21 != 381) {
          goto LABEL_70;
        }
LABEL_60:
        if (!*(_DWORD *)(a1 + 16))
        {
          int v36 = 8;
          goto LABEL_64;
        }
      }
      *(void *)a1 = &byte_1EA61E000;
      *(void *)(a1 + 8) = &byte_1EA61E000;
      goto LABEL_72;
    }
    if (v21 <= 90)
    {
      if (v21 == 42)
      {
        if (v18)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 13;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
        }
      }
      else if (v21 == 46)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 56) + 40) & 8) != 0)
        {
          *(void *)a1 = &v54;
          *(void *)(a1 + 8) = (char *)&v54 + 3;
          int v54 = 6097502;
          sub_1CD0DBCC0(a1);
          *(void *)a1 = v20;
          *(void *)(a1 + 8) = v5;
        }
        else if (!*(_DWORD *)(a1 + 16))
        {
          uint64_t v26 = *(void *)(a1 + 32);
          uint64_t v27 = v19;
          if (v19 >= v26)
          {
            uint64_t v28 = v26 + 2;
            if (v26 >= -1) {
              uint64_t v28 = v26 + 1;
            }
            sub_1CD0DD0EC((void **)a1, (v28 & 0xFFFFFFFFFFFFFFFELL) + (v28 >> 1));
            uint64_t v27 = *(void *)(a1 + 40);
          }
          uint64_t v29 = *(void *)(a1 + 24);
          *(void *)(a1 + 40) = v27 + 1;
          *(void *)(v29 + 8 * v27) = 671088640;
        }
        goto LABEL_72;
      }
LABEL_70:
      sub_1CD0DC878((__n128 *)a1, (char)v21);
      goto LABEL_72;
    }
    switch(v21)
    {
      case 91:
        sub_1CD0DBCC0(a1);
        break;
      case 296:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = *(void *)(v30 + 112);
        uint64_t v32 = v31 + 1;
        *(void *)(v30 + 112) = v31 + 1;
        if (v31 + 1 <= 9) {
          *(void *)(a1 + 8 * v32 + 64) = v19;
        }
        sub_1CD0DAB98((void **)a1, 1744830464, v31 + 1);
        uint64_t v33 = *(char **)a1;
        uint64_t v34 = *(void *)(a1 + 8) - *(void *)a1;
        if (v34 >= 1 && (v34 == 1 || *v33 != 92 || v33[1] != 41)) {
          sub_1CD0DB574(a1, 92, 41);
        }
        if (v32 <= 9) {
          *(void *)(a1 + 8 * v32 + 144) = *(void *)(a1 + 40);
        }
        sub_1CD0DAB98((void **)a1, 1879048192, v32);
        uint64_t v35 = *(char **)a1;
        if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) < 2 || *v35 != 92 || v35[1] != 41) {
          goto LABEL_60;
        }
        *(void *)a1 = v35 + 2;
        break;
      case 297:
        goto LABEL_60;
      default:
        goto LABEL_70;
    }
LABEL_72:
    uint64_t v4 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    uint64_t v6 = (uint64_t)&v5[-*(void *)a1];
    if (v6 >= 1)
    {
      int v37 = *v4;
      if (v37 == 42)
      {
        *(void *)a1 = v4 + 1;
        sub_1CD0DBC1C((void *)a1, 1207959552, *(void *)(a1 + 40) - v19 + 1, v19);
        sub_1CD0DAB98((void **)a1, 1342177280, *(void *)(a1 + 40) - v19);
        sub_1CD0DBC1C((void *)a1, 1476395008, *(void *)(a1 + 40) - v19 + 1, v19);
        sub_1CD0DAB98((void **)a1, 1610612736, *(void *)(a1 + 40) - v19);
        uint64_t v4 = *(char **)a1;
        uint64_t v5 = *(char **)(a1 + 8);
LABEL_103:
        int v17 = 0;
        uint64_t v6 = v5 - v4;
        goto LABEL_104;
      }
      if ((unint64_t)v6 >= 2 && v37 == 92 && v4[1] == 123)
      {
        *(void *)a1 = v4 + 2;
        uint64_t v38 = sub_1CD0DC968((uint64_t *)a1);
        int v39 = v38;
        uint64_t v41 = *(char **)a1;
        uint64_t v40 = *(void *)(a1 + 8);
        uint64_t v42 = v38;
        if (v40 - *(void *)a1 >= 1)
        {
          uint64_t v42 = v38;
          if (*v41 == 44)
          {
            BOOL v43 = (unsigned __int8 *)(v41 + 1);
            *(void *)a1 = v43;
            if (v40 - (uint64_t)v43 < 1 || *v43 - 48 > 9)
            {
              uint64_t v42 = 256;
            }
            else
            {
              uint64_t v42 = sub_1CD0DC968((uint64_t *)a1);
              if (v39 > (int)v42)
              {
                if (!*(_DWORD *)(a1 + 16)) {
                  *(_DWORD *)(a1 + 16) = 10;
                }
                *(void *)a1 = &byte_1EA61E000;
                *(void *)(a1 + 8) = &byte_1EA61E000;
              }
            }
          }
        }
        sub_1CD0DC9FC((void **)a1, v19, v39, v42);
        uint64_t v44 = *(char **)a1;
        uint64_t v5 = *(char **)(a1 + 8);
        uint64_t v45 = (uint64_t)&v5[-*(void *)a1];
        if (v45 <= 1)
        {
          if (v45 == 1) {
            goto LABEL_94;
          }
LABEL_99:
          if (!*(_DWORD *)(a1 + 16))
          {
            int v47 = 9;
            goto LABEL_101;
          }
        }
        else
        {
          if (*v44 == 92 && v44[1] == 125)
          {
            uint64_t v4 = v44 + 2;
            *(void *)a1 = v44 + 2;
            goto LABEL_103;
          }
LABEL_94:
          uint64_t v46 = v44 + 1;
          while (1)
          {
            if (--v45)
            {
              if (*(v46 - 1) == 92 && *v46 == 125) {
                break;
              }
            }
            *(void *)a1 = v46++;
            if (v45 <= 0) {
              goto LABEL_99;
            }
          }
          if (!*(_DWORD *)(a1 + 16))
          {
            int v47 = 10;
LABEL_101:
            *(_DWORD *)(a1 + 16) = v47;
          }
        }
        *(void *)a1 = &byte_1EA61E000;
        *(void *)(a1 + 8) = &byte_1EA61E000;
        uint64_t v4 = &byte_1EA61E000;
        uint64_t v5 = &byte_1EA61E000;
        goto LABEL_103;
      }
    }
    if (v21 != 36) {
      goto LABEL_103;
    }
    int v17 = 1;
LABEL_104:
    char v18 = 1;
    if (v6 <= 0) {
      break;
    }
  }
  uint64_t v48 = *(void *)(a1 + 40);
  if (v17)
  {
    uint64_t v49 = v48 - 1;
    *(void *)(a1 + 40) = v48 - 1;
    if (!*(_DWORD *)(a1 + 16))
    {
      uint64_t v50 = *(void *)(a1 + 32);
      if (v48 > v50)
      {
        uint64_t v51 = v50 + 2;
        if (v50 >= -1) {
          uint64_t v51 = v50 + 1;
        }
        sub_1CD0DD0EC((void **)a1, (v51 & 0xFFFFFFFFFFFFFFFELL) + (v51 >> 1));
        uint64_t v49 = *(void *)(a1 + 40);
      }
      uint64_t v52 = *(void *)(a1 + 24);
      *(void *)(a1 + 40) = v49 + 1;
      *(void *)(v52 + 8 * v49) = 0x20000000;
      uint64_t v49 = *(void *)(a1 + 40);
    }
    uint64_t v53 = *(void *)(a1 + 56);
    *(_DWORD *)(v53 + 72) |= 2u;
    ++*(_DWORD *)(v53 + 80);
  }
  else
  {
    uint64_t v49 = *(void *)(a1 + 40);
  }
LABEL_118:
  if (v49 == v9)
  {
LABEL_119:
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 14;
    }
    *(void *)a1 = &byte_1EA61E000;
    *(void *)(a1 + 8) = &byte_1EA61E000;
  }
}

void *sub_1CD0DBC1C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*((_DWORD *)result + 4))
  {
    uint64_t v5 = result;
    uint64_t v6 = result[5];
    sub_1CD0DAB98((void **)result, a2, a3);
    uint64_t v7 = 0;
    uint64_t v8 = v5[3];
    uint64_t v9 = *(void *)(v8 + 8 * v6);
    do
    {
      uint64_t v10 = &v5[v7];
      uint64_t v11 = v5[v7 + 9];
      if (v11 >= a4) {
        v10[9] = v11 + 1;
      }
      uint64_t v12 = v10[19];
      if (v12 >= a4) {
        v10[19] = v12 + 1;
      }
      ++v7;
    }
    while (v7 != 9);
    off_t result = memmove((void *)(v8 + 8 * a4 + 8), (const void *)(v8 + 8 * a4), 8 * (v5[5] + ~a4));
    *(void *)(v5[3] + 8 * a4) = v9;
  }
  return result;
}

void sub_1CD0DBCC0(uint64_t a1)
{
  uint64_t v2 = *(const char **)a1;
  if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >= 6)
  {
    if (!strncmp(*(const char **)a1, "[:<:]]", 6uLL))
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 40);
        if (v28 >= v29)
        {
          uint64_t v30 = v29 + 2;
          if (v29 >= -1) {
            uint64_t v30 = v29 + 1;
          }
          sub_1CD0DD0EC((void **)a1, (v30 & 0xFFFFFFFFFFFFFFFELL) + (v30 >> 1));
          uint64_t v28 = *(void *)(a1 + 40);
          uint64_t v2 = *(const char **)a1;
        }
        uint64_t v31 = *(void *)(a1 + 24);
        *(void *)(a1 + 40) = v28 + 1;
        uint64_t v32 = 2550136832;
        goto LABEL_36;
      }
    }
    else
    {
      if (strncmp(v2, "[:>:]]", 6uLL)) {
        goto LABEL_4;
      }
      if (!*(_DWORD *)(a1 + 16))
      {
        uint64_t v33 = *(void *)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 40);
        if (v28 >= v33)
        {
          uint64_t v34 = v33 + 2;
          if (v33 >= -1) {
            uint64_t v34 = v33 + 1;
          }
          sub_1CD0DD0EC((void **)a1, (v34 & 0xFFFFFFFFFFFFFFFELL) + (v34 >> 1));
          uint64_t v28 = *(void *)(a1 + 40);
          uint64_t v2 = *(const char **)a1;
        }
        uint64_t v31 = *(void *)(a1 + 24);
        *(void *)(a1 + 40) = v28 + 1;
        uint64_t v32 = 2684354560;
LABEL_36:
        *(void *)(v31 + 8 * v28) = v32;
      }
    }
    *(void *)a1 = v2 + 6;
    return;
  }
LABEL_4:
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(unsigned int *)(v3 + 20);
  size_t v5 = *(int *)(v3 + 16);
  *(_DWORD *)(v3 + 20) = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 48);
  if ((int)v4 >= v6)
  {
    unint64_t v21 = (v6 + 8);
    *(_DWORD *)(a1 + 48) = v21;
    if (v6 < -8) {
      goto LABEL_21;
    }
    uint64_t v22 = malloc_type_realloc(*(void **)(v3 + 24), 32 * (v6 + 8), 0x1010040FE74B554uLL);
    uint64_t v3 = *(void *)(a1 + 56);
    if (!v22) {
      goto LABEL_21;
    }
    size_t v23 = (int)(v21 >> 3) * (uint64_t)(int)v5;
    *(void *)(v3 + 24) = v22;
    char v24 = (char *)malloc_type_realloc(*(void **)(v3 + 32), v23, 0x7F640B19uLL);
    uint64_t v3 = *(void *)(a1 + 56);
    if (!v24) {
      goto LABEL_21;
    }
    *(void *)(v3 + 32) = v24;
    if ((int)v4 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = *(void **)(v3 + 24);
      do
      {
        *uint64_t v26 = &v24[(v25 >> 3) * (uint64_t)(int)v5];
        v26 += 4;
        ++v25;
      }
      while (v4 != v25);
    }
    bzero(&v24[v23 - v5], v5);
    uint64_t v3 = *(void *)(a1 + 56);
  }
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7 || (uint64_t v8 = *(void *)(v3 + 32)) == 0)
  {
LABEL_21:
    free(*(void **)(v3 + 24));
    uint64_t v27 = *(void *)(a1 + 56);
    *(void *)(v27 + 24) = 0;
    free(*(void **)(v27 + 32));
    *(void *)(*(void *)(a1 + 56) + 32) = 0;
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 12;
    }
    *(void *)a1 = &byte_1EA61E000;
    *(void *)(a1 + 8) = &byte_1EA61E000;
    return;
  }
  uint64_t v9 = v7 + 32 * (int)v4;
  uint64_t v10 = v8 + (int)v5 * (uint64_t)((int)v4 / 8);
  *(void *)uint64_t v9 = v10;
  BOOL v11 = 1;
  int v12 = 1 << (v4 & 7);
  *(unsigned char *)(v9 + 8) = v12;
  uint64_t v13 = (unsigned char *)(v9 + 8);
  *(unsigned char *)(v9 + 9) = 0;
  int v14 = (unsigned char *)(v9 + 9);
  *(void *)(v9 + 16) = 0;
  int32x2_t v15 = (uint64_t *)(v9 + 16);
  *(void *)(v9 + 24) = 0;
  int32x2_t v16 = (void **)(v9 + 24);
  char v18 = *(char **)a1;
  int v17 = *(char **)(a1 + 8);
  if ((uint64_t)&v17[-*(void *)a1] < 1) {
    goto LABEL_41;
  }
  int v19 = *v18;
  BOOL v11 = v19 != 94;
  if (v19 == 94)
  {
    *(void *)a1 = ++v18;
    if (v17 - v18 < 1)
    {
      BOOL v11 = 0;
      goto LABEL_41;
    }
    int v19 = *v18;
  }
  if (v19 == 93)
  {
    uint64_t v20 = 93;
  }
  else
  {
    if (v19 != 45) {
      goto LABEL_41;
    }
    uint64_t v20 = 45;
  }
  *(void *)a1 = v18 + 1;
  *(unsigned char *)(v10 + v20) |= v12;
  *v14 += v19;
  char v18 = *(char **)a1;
  int v17 = *(char **)(a1 + 8);
LABEL_41:
  unint64_t v35 = v17 - v18;
  if (v17 - v18 >= 1)
  {
    do
    {
      int v36 = *v18;
      if (v36 == 93) {
        break;
      }
      if (v35 >= 2 && v36 == 45)
      {
        if (v18[1] == 93)
        {
          *(void *)a1 = v18 + 1;
          *(unsigned char *)(*(void *)v9 + 45) |= *v13;
          *v14 += 45;
          char v18 = *(char **)a1;
          int v17 = *(char **)(a1 + 8);
          break;
        }
LABEL_79:
        if (!*(_DWORD *)(a1 + 16)) {
          *(_DWORD *)(a1 + 16) = 11;
        }
        goto LABEL_81;
      }
      if (v36 == 45) {
        goto LABEL_79;
      }
      if (v36 != 91 || v35 <= 1)
      {
LABEL_52:
        int v38 = sub_1CD0DCEEC(a1);
        int v39 = v38;
        uint64_t v40 = *(const char **)a1;
        uint64_t v41 = *(void *)(a1 + 8);
        if (v41 - *(void *)a1 < 2
          || *v40 != 45
          || (uint64_t v42 = v40 + 1, v40[1] == 93)
          || ((*(void *)a1 = v42, v41 - (uint64_t)v42 < 1) || *v42 != 45
            ? (int v38 = sub_1CD0DCEEC(a1))
            : (*(void *)a1 = v40 + 2, int v38 = 45),
              v39 <= v38))
        {
          do
          {
            *(unsigned char *)(*(void *)v9 + v39) |= *v13;
            *v14 += v39++;
          }
          while (v38 + 1 != v39);
          char v18 = *(char **)a1;
          int v17 = *(char **)(a1 + 8);
          goto LABEL_84;
        }
        goto LABEL_79;
      }
      int v43 = v18[1];
      if (v43 == 61)
      {
        uint64_t v50 = v18 + 2;
        *(void *)a1 = v50;
        if (v17 - v50 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
          uint64_t v50 = &byte_1EA61E000;
        }
        int v51 = *v50;
        if (v51 == 93 || v51 == 45)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 3;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
        }
        unsigned __int8 v52 = sub_1CD0DCFD8(a1, 61);
        *(unsigned char *)(*(void *)v9 + v52) |= *v13;
        *v14 += v52;
        uint64_t v53 = *(char **)a1;
        int v17 = *(char **)(a1 + 8);
        if ((uint64_t)&v17[-*(void *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
          uint64_t v53 = &byte_1EA61E000;
          int v17 = &byte_1EA61E000;
        }
        if (v17 - v53 > 1 && *v53 == 61 && v53[1] == 93) {
          goto LABEL_120;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          int v54 = 3;
LABEL_123:
          *(_DWORD *)(a1 + 16) = v54;
        }
      }
      else
      {
        if (v43 != 58) {
          goto LABEL_52;
        }
        uint64_t v44 = (uint64_t)(v18 + 2);
        *(void *)a1 = v18 + 2;
        if (v17 - (v18 + 2) <= 0)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
          int v17 = &byte_1EA61E000;
          uint64_t v44 = (uint64_t)&byte_1EA61E000;
        }
        int v45 = *(unsigned __int8 *)v44;
        if (v45 == 93 || v45 == 45)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 4;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
          int v17 = &byte_1EA61E000;
          uint64_t v44 = (uint64_t)&byte_1EA61E000;
        }
        BOOL v100 = v11;
        size_t v99 = v16;
        if ((uint64_t)&v17[-v44] >= 1)
        {
          uint64_t v46 = -v44;
          int v47 = (const char *)(v44 + 1);
          while (1)
          {
            uint64_t v48 = *((unsigned __int8 *)v47 - 1);
            if (*(v47 - 1) < 0)
            {
              if (!__maskrune(v48, 0x100uLL))
              {
LABEL_105:
                uint64_t v49 = *(void *)a1;
                goto LABEL_106;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v48 + 60) & 0x100) == 0)
            {
              goto LABEL_105;
            }
            *(void *)a1 = v47;
            --v46;
            ++v47;
            if (*(void *)(a1 + 8) + v46 <= 0)
            {
              uint64_t v49 = -v46;
              goto LABEL_106;
            }
          }
        }
        uint64_t v49 = v44;
LABEL_106:
        size_t v55 = v49 - v44;
        int v56 = (const char **)&off_1E68591B0;
        uint64_t v57 = "alnum";
        while (strncmp(v57, (const char *)v44, v55) || v57[v55])
        {
          uint64_t v57 = v56[1];
          v56 += 3;
          if (!v57)
          {
            BOOL v11 = v100;
            if (!*(_DWORD *)(a1 + 16)) {
              *(_DWORD *)(a1 + 16) = 4;
            }
            *(void *)a1 = &byte_1EA61E000;
            *(void *)(a1 + 8) = &byte_1EA61E000;
            int32x2_t v16 = v99;
            goto LABEL_113;
          }
        }
        uint64_t v58 = (unsigned __int8 *)*(v56 - 1);
        unsigned __int8 v59 = *v58;
        if (*v58)
        {
          uint64_t v60 = v58 + 1;
          do
          {
            *(unsigned char *)(*(void *)v9 + v59) |= *v13;
            *v14 += v59;
            int v61 = *v60++;
            unsigned __int8 v59 = v61;
          }
          while (v61);
        }
        uint64_t v62 = *v56;
        int v63 = *(unsigned __int8 *)*v56;
        BOOL v11 = v100;
        int32x2_t v16 = v99;
        if (v63)
        {
          do
          {
            uint64_t v64 = *v15;
            size_t v65 = *v15 + strlen(v62) + 1;
            uint64_t *v15 = v65;
            uint64_t v66 = (char *)malloc_type_realloc(*v99, v65, 0xDA2F212AuLL);
            if (v66)
            {
              *size_t v99 = v66;
              if (*v15 - v64 != -1)
              {
                int v67 = &v66[v64 - 1];
                uint64_t v68 = v64 - *v15;
                uint64_t v69 = v62;
                while (v68)
                {
                  int v70 = *(unsigned __int8 *)v69++;
                  *v67++ = v70;
                  ++v68;
                  if (!v70) {
                    goto LABEL_140;
                  }
                }
                *int v67 = 0;
              }
            }
            else
            {
              if (*v99) {
                free(*v99);
              }
              *size_t v99 = 0;
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 12;
              }
              *(void *)a1 = &byte_1EA61E000;
              *(void *)(a1 + 8) = &byte_1EA61E000;
            }
LABEL_140:
            uint64_t v71 = &v62[strlen(v62)];
            int v72 = *((unsigned __int8 *)v71 + 1);
            uint64_t v62 = v71 + 1;
          }
          while (v72);
        }
LABEL_113:
        uint64_t v53 = *(char **)a1;
        int v17 = *(char **)(a1 + 8);
        if ((uint64_t)&v17[-*(void *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &byte_1EA61E000;
          *(void *)(a1 + 8) = &byte_1EA61E000;
          uint64_t v53 = &byte_1EA61E000;
          int v17 = &byte_1EA61E000;
        }
        if (v17 - v53 > 1 && *v53 == 58 && v53[1] == 93)
        {
LABEL_120:
          char v18 = v53 + 2;
          *(void *)a1 = v18;
          goto LABEL_84;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          int v54 = 4;
          goto LABEL_123;
        }
      }
LABEL_81:
      *(void *)a1 = &byte_1EA61E000;
      *(void *)(a1 + 8) = &byte_1EA61E000;
      char v18 = &byte_1EA61E000;
      int v17 = &byte_1EA61E000;
LABEL_84:
      unint64_t v35 = v17 - v18;
    }
    while (v17 - v18 > 0);
  }
  if (v17 - v18 < 1 || (*(void *)a1 = v18 + 1, *v18 != 93))
  {
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 7;
    }
    *(void *)a1 = &byte_1EA61E000;
    *(void *)(a1 + 8) = &byte_1EA61E000;
    goto LABEL_180;
  }
  if (*(_DWORD *)(a1 + 16))
  {
LABEL_180:
    sub_1CD0DCDF8(a1, v9);
    return;
  }
  uint64_t v73 = *(void *)(a1 + 56);
  if ((*(unsigned char *)(v73 + 40) & 2) != 0)
  {
    unint64_t v74 = *(unsigned int *)(v73 + 16);
    if ((int)v74 >= 1)
    {
      uint64_t v75 = MEMORY[0x1E4F14390];
      while (1)
      {
        unint64_t v76 = v74 - 1;
        if ((*v13 & *(unsigned char *)(*(void *)v9 + (v74 - 1))) != 0)
        {
          if (v74 > 0x80)
          {
            if (__maskrune(v74 - 1, 0x100uLL))
            {
LABEL_153:
              int v77 = sub_1CD0DCE64(v76);
              if (v76 != v77)
              {
                *(unsigned char *)(*(void *)v9 + v77) |= *v13;
                *v14 += v77;
              }
            }
          }
          else if ((*(_DWORD *)(v75 + 4 * v76 + 60) & 0x100) != 0)
          {
            goto LABEL_153;
          }
        }
        unint64_t v74 = v76;
        if (v76 + 1 <= 1)
        {
          uint64_t v73 = *(void *)(a1 + 56);
          break;
        }
      }
    }
  }
  if (!v11)
  {
    int v78 = *(_DWORD *)(v73 + 16);
    if (v78 >= 1)
    {
      unsigned int v79 = v78 + 1;
      do
      {
        char v80 = v79 - 2;
        uint64_t v81 = *(void *)v9;
        uint64_t v82 = (v79 - 2);
        int v83 = *(unsigned __int8 *)(*(void *)v9 + v82);
        int v84 = *v13;
        if ((v84 & v83) != 0)
        {
          *(unsigned char *)(v81 + v82) = v83 & ~(_BYTE)v84;
          char v85 = *v14 - v80;
        }
        else
        {
          *(unsigned char *)(v81 + v82) = v84 | v83;
          char v85 = *v14 + v80;
        }
        *int v14 = v85;
        --v79;
      }
      while (v79 > 1);
      uint64_t v73 = *(void *)(a1 + 56);
    }
    if ((*(unsigned char *)(v73 + 40) & 8) != 0)
    {
      *(unsigned char *)(*(void *)v9 + 10) &= ~*v13;
      *v14 -= 10;
      uint64_t v73 = *(void *)(a1 + 56);
    }
  }
  unint64_t v86 = *(int *)(v73 + 16);
  if (v86)
  {
    int v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = *(void *)v9;
    do
    {
      if ((*(unsigned char *)(v89 + v88) & *v13) != 0) {
        ++v87;
      }
      ++v88;
    }
    while (v86 != v88);
    if (v87 == 1)
    {
      int v90 = 0;
      uint64_t v91 = 0;
      while ((*(unsigned char *)(v89 + v91) & *v13) == 0)
      {
        ++v91;
        v90 += 0x1000000;
        if (v86 == v91)
        {
          int v92 = 0;
          goto LABEL_198;
        }
      }
      int v92 = v90 >> 24;
LABEL_198:
      sub_1CD0DC878((__n128 *)a1, v92);
      goto LABEL_180;
    }
  }
  uint64_t v93 = *(void *)(v73 + 24);
  uint64_t v94 = *(int *)(v73 + 20);
  if ((int)v94 < 1)
  {
LABEL_196:
    unint64_t v97 = v9;
  }
  else
  {
    unint64_t v95 = v93 + 32 * v94;
    if (v86 <= 1) {
      uint64_t v96 = 1;
    }
    else {
      uint64_t v96 = *(int *)(v73 + 16);
    }
    unint64_t v97 = *(void *)(v73 + 24);
    while (1)
    {
      if (v97 != v9 && *(unsigned __int8 *)(v97 + 9) == *v14)
      {
        uint64_t v98 = 0;
        if (v86)
        {
          while (((*(unsigned char *)(*(void *)v97 + v98) & *(unsigned char *)(v97 + 8)) == 0) != ((*(unsigned char *)(*(void *)v9 + v98) & *v13) != 0))
          {
            if (v96 == ++v98)
            {
              uint64_t v98 = v96;
              break;
            }
          }
        }
        if (v98 == v86) {
          break;
        }
      }
      v97 += 32;
      if (v97 >= v95) {
        goto LABEL_196;
      }
    }
    sub_1CD0DCDF8(a1, v9);
    uint64_t v93 = *(void *)(*(void *)(a1 + 56) + 24);
  }

  sub_1CD0DAB98((void **)a1, 805306368, (int)((uint64_t)(v97 - v93) >> 5));
}

uint64_t sub_1CD0DC80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    sub_1CD0DD0EC((void **)a1, *(void *)(a1 + 32) + v4);
    memmove((void *)(*(void *)(a1 + 24) + 8 * *(void *)(a1 + 40)), (const void *)(*(void *)(a1 + 24) + 8 * a2), 8 * v4);
    *(void *)(a1 + 40) += v4;
  }
  return v3;
}

__n128 sub_1CD0DC878(__n128 *a1, int a2)
{
  unint64_t v4 = a1[3].n128_u64[1];
  uint64_t v5 = *(void *)(v4 + 88);
  uint64_t v6 = a2;
  if ((*(unsigned char *)(v4 + 40) & 2) == 0) {
    goto LABEL_7;
  }
  if (a2 > 0x7Fu)
  {
    if (!__maskrune(a2, 0x100uLL)) {
      goto LABEL_7;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a2 + 60) & 0x100) == 0)
  {
    goto LABEL_7;
  }
  if (sub_1CD0DCE64(a2) != a2)
  {
    char v11 = a2;
    __int16 v12 = 93;
    __n128 v10 = *a1;
    a1->n128_u64[0] = (unint64_t)&v11;
    a1->n128_u64[1] = (unint64_t)&v12 + 1;
    sub_1CD0DBCC0(a1);
    __n128 result = v10;
    *a1 = v10;
    return result;
  }
LABEL_7:
  sub_1CD0DAB98((void **)a1, 0x10000000, v6);
  if (!*(unsigned char *)(v5 + a2))
  {
    unint64_t v8 = a1[3].n128_u64[1];
    int v9 = *(_DWORD *)(v8 + 84);
    *(_DWORD *)(v8 + 84) = v9 + 1;
    *(unsigned char *)(v5 + a2) = v9;
  }
  return result;
}

uint64_t sub_1CD0DC968(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1] - *a1;
  if (v2 < 1)
  {
    uint64_t v4 = 0;
LABEL_12:
    if (!*((_DWORD *)a1 + 4)) {
      *((_DWORD *)a1 + 4) = 10;
    }
    *a1 = (uint64_t)&byte_1EA61E000;
    a1[1] = (uint64_t)&byte_1EA61E000;
    return v4;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (char *)(v1 + v3);
    if (*(unsigned __int8 *)(v1 + v3) - 48 > 9 || (int)v4 > 255) {
      break;
    }
    *a1 = (uint64_t)(v5 + 1);
    uint64_t v4 = (*v5 + 10 * v4 - 48);
    ++v3;
    if (v2-- <= 1)
    {
      LODWORD(v3) = 1;
      break;
    }
  }
  if (!v3 || (int)v4 >= 256) {
    goto LABEL_12;
  }
  return v4;
}

void **sub_1CD0DC9FC(void **result, uint64_t a2, int a3, uint64_t a4)
{
  if (*((_DWORD *)result + 4)) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  while (2)
  {
    if (a4 == 256) {
      int v8 = 3;
    }
    else {
      int v8 = 2;
    }
    if ((int)a4 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = a4;
    }
    while (1)
    {
      uint64_t v10 = *(void *)(v7 + 40);
      if (a3 == 256) {
        int v11 = 3;
      }
      else {
        int v11 = 2;
      }
      if (a3 < 2) {
        int v11 = a3;
      }
      int v12 = v9 + 8 * v11;
      if (v12 != 19) {
        break;
      }
      __n128 result = (void **)sub_1CD0DC80C(v7, a2, *(void *)(v7 + 40));
      a2 = (uint64_t)result;
      --a3;
      if (*(_DWORD *)(v7 + 16)) {
        return result;
      }
    }
    switch(v12)
    {
      case 0:
        *(void *)(v7 + 40) = a2;
        return result;
      case 1:
      case 2:
      case 3:
        sub_1CD0DBC1C((void *)v7, 2013265920, v10 - a2 + 1, a2);
        sub_1CD0DC9FC(v7, a2 + 1, 1, a4);
        __n128 result = sub_1CD0DAB98((void **)v7, 0x80000000, *(void *)(v7 + 40) - a2);
        if (*(_DWORD *)(v7 + 16)) {
          return result;
        }
        uint64_t v22 = *(void *)(v7 + 24);
        *(void *)(v22 + 8 * a2) = *(void *)(v22 + 8 * a2) & 0xF8000000 | (*(void *)(v7 + 40) - a2);
        uint64_t v24 = *(void *)(v7 + 32);
        uint64_t v23 = *(void *)(v7 + 40);
        if (v23 < v24)
        {
          *(void *)(v7 + 40) = v23 + 1;
          *(void *)(v22 + 8 * v23) = 2281701376;
LABEL_45:
          *(void *)(v22 + 8 * *(void *)(v7 + 40) - 8) = *(void *)(v22 + 8 * *(void *)(v7 + 40) - 8) & 0xF8000000 | 1;
          uint64_t v30 = *(void *)(v7 + 32);
          uint64_t v29 = *(void *)(v7 + 40);
          if (v29 >= v30)
          {
            uint64_t v31 = v30 + 2;
            if (v30 >= -1) {
              uint64_t v31 = v30 + 1;
            }
            __n128 result = sub_1CD0DD0EC((void **)v7, (v31 & 0xFFFFFFFFFFFFFFFELL) + (v31 >> 1));
            uint64_t v22 = *(void *)(v7 + 24);
            uint64_t v29 = *(void *)(v7 + 40);
          }
          *(void *)(v7 + 40) = v29 + 1;
          *(void *)(v22 + 8 * v29) = 2415919106;
          return result;
        }
        uint64_t v26 = v24 + 2;
        if (v24 >= -1) {
          uint64_t v26 = v24 + 1;
        }
        __n128 result = sub_1CD0DD0EC((void **)v7, (v26 & 0xFFFFFFFFFFFFFFFELL) + (v26 >> 1));
        uint64_t v22 = *(void *)(v7 + 24);
        uint64_t v27 = *(void *)(v7 + 40);
        int v28 = *(_DWORD *)(v7 + 16);
        *(void *)(v7 + 40) = v27 + 1;
        *(void *)(v22 + 8 * v27) = 2281701376;
        if (!v28) {
          goto LABEL_45;
        }
        return result;
      case 9:
        return result;
      case 10:
        sub_1CD0DBC1C((void *)v7, 2013265920, v10 - a2 + 1, a2);
        sub_1CD0DAB98((void **)v7, 0x80000000, *(void *)(v7 + 40) - a2);
        if (*(_DWORD *)(v7 + 16)) {
          goto LABEL_31;
        }
        uint64_t v13 = *(void *)(v7 + 24);
        *(void *)(v13 + 8 * a2) = *(void *)(v13 + 8 * a2) & 0xF8000000 | (*(void *)(v7 + 40) - a2);
        uint64_t v15 = *(void *)(v7 + 32);
        uint64_t v14 = *(void *)(v7 + 40);
        if (v14 >= v15)
        {
          uint64_t v16 = v15 + 2;
          if (v15 >= -1) {
            uint64_t v16 = v15 + 1;
          }
          sub_1CD0DD0EC((void **)v7, (v16 & 0xFFFFFFFFFFFFFFFELL) + (v16 >> 1));
          uint64_t v13 = *(void *)(v7 + 24);
          uint64_t v17 = *(void *)(v7 + 40);
          int v18 = *(_DWORD *)(v7 + 16);
          *(void *)(v7 + 40) = v17 + 1;
          *(void *)(v13 + 8 * v17) = 2281701376;
          if (v18) {
            goto LABEL_31;
          }
        }
        else
        {
          *(void *)(v7 + 40) = v14 + 1;
          *(void *)(v13 + 8 * v14) = 2281701376;
        }
        *(void *)(v13 + 8 * *(void *)(v7 + 40) - 8) = *(void *)(v13 + 8 * *(void *)(v7 + 40) - 8) & 0xF8000000 | 1;
        uint64_t v20 = *(void *)(v7 + 32);
        uint64_t v19 = *(void *)(v7 + 40);
        if (v19 >= v20)
        {
          uint64_t v21 = v20 + 2;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          sub_1CD0DD0EC((void **)v7, (v21 & 0xFFFFFFFFFFFFFFFELL) + (v21 >> 1));
          uint64_t v13 = *(void *)(v7 + 24);
          uint64_t v19 = *(void *)(v7 + 40);
        }
        *(void *)(v7 + 40) = v19 + 1;
        *(void *)(v13 + 8 * v19) = 2415919106;
LABEL_31:
        __n128 result = (void **)sub_1CD0DC80C(v7, a2 + 1, v10 + 1);
        a2 = (uint64_t)result;
        a3 = 1;
        goto LABEL_32;
      case 11:
        sub_1CD0DBC1C((void *)v7, 1207959552, v10 - a2 + 1, a2);
        uint64_t v25 = *(void *)(v7 + 40) - a2;
        return sub_1CD0DAB98((void **)v7, 1342177280, v25);
      case 18:
        __n128 result = (void **)sub_1CD0DC80C(v7, a2, *(void *)(v7 + 40));
        a2 = (uint64_t)result;
        --a3;
LABEL_32:
        a4 = (a4 - 1);
        if (*(_DWORD *)(v7 + 16)) {
          return result;
        }
        continue;
      default:
        *(_DWORD *)(v7 + 16) = 15;
        *(void *)uint64_t v7 = &byte_1EA61E000;
        *(void *)(v7 + 8) = &byte_1EA61E000;
        return result;
    }
  }
}

uint64_t sub_1CD0DCDF8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = *(int *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24) + 32 * *(int *)(v2 + 20);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      *(unsigned char *)(*(void *)a2 + i) &= ~*(unsigned char *)(a2 + 8);
      *(unsigned char *)(a2 + 9) -= i;
    }
  }
  if (v4 - 32 == a2) {
    --*(_DWORD *)(*(void *)(result + 56) + 20);
  }
  return result;
}

uint64_t sub_1CD0DCE64(unsigned __int8 a1)
{
  unsigned __int8 v1 = a1;
  __darwin_ct_rune_t v2 = a1;
  if (a1 <= 0x7Fu)
  {
    int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a1 + 60);
    if ((v3 & 0x8000) == 0)
    {
      if ((v3 & 0x1000) == 0) {
        return (char)v1;
      }
      goto LABEL_8;
    }
LABEL_6:
    unsigned __int8 v4 = __tolower(v2);
LABEL_9:
    unsigned __int8 v1 = v4;
    return (char)v1;
  }
  if (__maskrune(a1, 0x8000uLL)) {
    goto LABEL_6;
  }
  if (__maskrune(v2, 0x1000uLL))
  {
LABEL_8:
    unsigned __int8 v4 = __toupper(v2);
    goto LABEL_9;
  }
  return (char)v1;
}

uint64_t sub_1CD0DCEEC(uint64_t a1)
{
  __darwin_ct_rune_t v2 = *(char **)a1;
  int v3 = *(char **)(a1 + 8);
  if ((uint64_t)&v3[-*(void *)a1] < 1)
  {
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 7;
    }
    __darwin_ct_rune_t v2 = &byte_1EA61E000;
    *(void *)a1 = &byte_1EA61E000;
    *(void *)(a1 + 8) = &byte_1EA61E000;
    int v3 = &byte_1EA61E000;
  }
  if (v3 - v2 > 1 && *v2 == 91 && v2[1] == 46)
  {
    *(void *)a1 = v2 + 2;
    char v4 = sub_1CD0DCFD8(a1, 46);
    uint64_t v5 = *(char **)a1;
    if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) > 1 && *v5 == 46 && v5[1] == 93)
    {
      *(void *)a1 = v5 + 2;
    }
    else
    {
      if (!*(_DWORD *)(a1 + 16)) {
        *(_DWORD *)(a1 + 16) = 3;
      }
      *(void *)a1 = &byte_1EA61E000;
      *(void *)(a1 + 8) = &byte_1EA61E000;
    }
  }
  else
  {
    *(void *)a1 = v2 + 1;
    return *v2;
  }
  return v4;
}

uint64_t sub_1CD0DCFD8(uint64_t a1, int a2)
{
  int v3 = *(const char **)a1;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if (v4 < 1)
  {
LABEL_7:
    if (!*(_DWORD *)(a1 + 16))
    {
      int v7 = 7;
LABEL_9:
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
  else
  {
    uint64_t v5 = 0;
    size_t v6 = 0;
    while (v4 - 1 == v6 || v3[v6] != a2 || v3[v6 + 1] != 93)
    {
      *(void *)a1 = &v3[++v6];
      --v5;
      if (v4 + v5 <= 0) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = "NUL";
    int v11 = &off_1E68592E8;
    do
    {
      if (!strncmp(v10, v3, v6) && strlen(v10) == v6) {
        return (char)*((unsigned char *)v11 - 8);
      }
      int v12 = *v11;
      v11 += 2;
      uint64_t v10 = v12;
    }
    while (v12);
    if (v6 == 1) {
      return *v3;
    }
    if (!*(_DWORD *)(a1 + 16))
    {
      int v7 = 3;
      goto LABEL_9;
    }
  }
  char v8 = 0;
  *(void *)a1 = &byte_1EA61E000;
  *(void *)(a1 + 8) = &byte_1EA61E000;
  return v8;
}

void **sub_1CD0DD0EC(void **result, uint64_t a2)
{
  if ((uint64_t)result[4] < a2)
  {
    int v3 = result;
    if ((unint64_t)a2 >> 61
      || (__n128 result = (void **)malloc_type_realloc(result[3], 8 * a2, 0x100004000313F17uLL)) == 0)
    {
      if (!*((_DWORD *)v3 + 4)) {
        *((_DWORD *)v3 + 4) = 12;
      }
      *int v3 = &byte_1EA61E000;
      v3[1] = &byte_1EA61E000;
    }
    else
    {
      v3[3] = result;
      v3[4] = (void *)a2;
    }
  }
  return result;
}

uint64_t llvm_regexec(uint64_t a1, char *__s, unint64_t a3, void *a4, char a5)
{
  if (*(_DWORD *)a1 != 62053) {
    return 2;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(_DWORD *)v5 != 53829 || (*(unsigned char *)(v5 + 72) & 4) != 0) {
    return 2;
  }
  int v8 = a5 & 7;
  uint64_t v9 = *(void *)(v5 + 48);
  if (v9 > 64)
  {
    long long v120 = 0uLL;
    long long v121 = 0uLL;
    *(_OWORD *)size_t v119 = 0uLL;
    int v18 = *(void **)(v5 + 56);
    uint64_t v17 = *(void *)(v5 + 64);
    if ((*(unsigned char *)(v5 + 40) & 4) != 0) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = a3;
    }
    if ((a5 & 4) != 0)
    {
      size_t v20 = a4[1];
      uint64_t v21 = &__s[*a4];
    }
    else
    {
      size_t v20 = strlen(__s);
      uint64_t v21 = __s;
    }
    uint64_t v62 = &__s[v20];
    if (&__s[v20] < v21) {
      return 16;
    }
    int v63 = *(unsigned __int8 **)(v5 + 96);
    unint64_t v112 = v19;
    BOOL v117 = &__s[v20];
    int v109 = a4;
    if (v63)
    {
      uint64_t v64 = v21;
      if (v21 < v62)
      {
        __dsta = *(void **)(v5 + 56);
        int v105 = v8;
        uint64_t v65 = v5;
        int v66 = *v63;
        int v67 = (char *)(__s - v21 + v20);
        size_t v107 = &__s[v20];
        uint64_t v68 = (char *)(&__s[v20] - v21);
        uint64_t v64 = v21;
        do
        {
          if (*v64 == v66)
          {
            int64_t v69 = *(int *)(v65 + 104);
            if ((uint64_t)v68 >= v69 && !memcmp(v64, v63, v69)) {
              goto LABEL_146;
            }
          }
          ++v64;
          --v68;
          --v67;
        }
        while (v67);
        uint64_t v64 = v107;
LABEL_146:
        uint64_t v5 = v65;
        int v18 = __dsta;
        uint64_t v62 = v117;
        int v8 = v105;
      }
      if (v64 == v62) {
        return 1;
      }
    }
    uint64_t v118 = v5;
    LODWORD(v119[0]) = v8;
    *(void *)&long long v120 = __s;
    *((void *)&v120 + 1) = v21;
    v122[0] = 0;
    *(void *)&long long v121 = v62;
    int v70 = (char *)malloc_type_malloc(4 * v9, 0x2667397EuLL);
    v123[0] = v70;
    if (!v70) {
      return 12;
    }
    uint64_t v71 = (uint64_t)v18 + 1;
    v123[1] = v70;
    size_t v72 = *(void *)(v5 + 48);
    *(void *)&long long v124 = &v70[v72];
    *((void *)&v124 + 1) = &v70[2 * v72];
    v122[1] = (void *)4;
    BOOL v125 = &v70[3 * v72];
    bzero(v125, v72);
    uint64_t v111 = v5;
LABEL_150:
    if (*((char **)&v120 + 1) == v21) {
      int v73 = 128;
    }
    else {
      int v73 = *(v21 - 1);
    }
    long long v74 = v124;
    uint64_t v75 = v123[1];
    bzero(v123[1], *(void *)(v118 + 48));
    v75[v71] = 1;
    sub_1CD0DFE6C(v118, v71, v17, (uint64_t)v75, 132, (uint64_t)v75);
    memmove((void *)v74, v75, *(void *)(v118 + 48));
    unint64_t v76 = 0;
    while (1)
    {
      if (v21 == (char *)v121) {
        int v77 = 128;
      }
      else {
        int v77 = *v21;
      }
      uint64_t v78 = v118;
      if (!memcmp(v75, (const void *)v74, *(void *)(v118 + 48))) {
        unint64_t v76 = v21;
      }
      if (v73 == 128)
      {
        if ((uint64_t)v119[0]) {
          goto LABEL_162;
        }
      }
      else if (v73 != 10 || (*(unsigned char *)(v78 + 40) & 8) == 0)
      {
LABEL_162:
        int v79 = 0;
        int v80 = 0;
        int v81 = 130;
        goto LABEL_165;
      }
      int v80 = *(_DWORD *)(v78 + 76);
      int v79 = 129;
      int v81 = 131;
LABEL_165:
      if (v77 == 128)
      {
        if (((uint64_t)v119[0] & 2) != 0) {
          goto LABEL_168;
        }
      }
      else if (v77 != 10 || (*(unsigned char *)(v78 + 40) & 8) == 0)
      {
LABEL_168:
        int v81 = v79;
        goto LABEL_171;
      }
      v80 += *(_DWORD *)(v78 + 80);
LABEL_171:
      if (v80 >= 1)
      {
        unsigned int v82 = v80 + 1;
        do
        {
          sub_1CD0DFE6C(v118, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
          --v82;
        }
        while (v82 > 1);
      }
      if (v81 == 129)
      {
        if (v77 == 128)
        {
          int v81 = 129;
        }
        else
        {
LABEL_184:
          if (v77 > 0x7Fu) {
            int v84 = __maskrune(v77, 0x500uLL);
          }
          else {
            int v84 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v77 + 60) & 0x500;
          }
          if (v77 == 95 || v84 != 0) {
            int v81 = 133;
          }
        }
        if (v73 == 128) {
          goto LABEL_199;
        }
        unsigned int v83 = v73;
        goto LABEL_194;
      }
      if (v73 == 128) {
        goto LABEL_199;
      }
      unsigned int v83 = v73;
      if (v73 > 0x7Fu)
      {
        if (__maskrune(v73, 0x500uLL)) {
          goto LABEL_194;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v73 + 60) & 0x500) != 0)
      {
        goto LABEL_194;
      }
      if (v73 != 95 && v77 != 128) {
        goto LABEL_184;
      }
LABEL_194:
      if (v83 > 0x7F)
      {
        if (__maskrune(v83, 0x500uLL)) {
          goto LABEL_202;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v83 + 60) & 0x500) != 0)
      {
        goto LABEL_202;
      }
      if (v73 != 95)
      {
LABEL_199:
        unint64_t v86 = v117;
LABEL_200:
        if ((v81 - 133) > 1) {
          goto LABEL_205;
        }
        goto LABEL_204;
      }
LABEL_202:
      if (v81 == 130)
      {
        int v81 = 134;
        unint64_t v86 = v117;
      }
      else
      {
        unint64_t v86 = v117;
        if (v77 == 128) {
          goto LABEL_200;
        }
        int v87 = v77 > 0x7Fu
            ? __maskrune(v77, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v77 + 60) & 0x500;
        if (v87 || v77 == 95) {
          goto LABEL_200;
        }
        int v81 = 134;
      }
LABEL_204:
      sub_1CD0DFE6C(v118, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
LABEL_205:
      if (v21 == v86 || v75[v17])
      {
        *((void *)&v121 + 1) = v76;
        if (!v75[v17])
        {
          free(v119[1]);
          free(v122[0]);
          uint64_t v15 = 1;
          goto LABEL_256;
        }
        if (!v112 && !*(_DWORD *)(v111 + 120)) {
          goto LABEL_251;
        }
        uint64_t v88 = sub_1CD0DEFA8(&v118, v76, v86, v71, v17);
        if (!v88)
        {
          do
          {
            ++*((void *)&v121 + 1);
            uint64_t v89 = sub_1CD0DEFA8(&v118, *((char **)&v121 + 1), v86, v71, v17);
          }
          while (!v89);
          uint64_t v88 = v89;
        }
        if (v112 == 1 && !*(_DWORD *)(v111 + 120))
        {
LABEL_245:
          uint64_t v98 = &v88[-v120];
          void *v109 = *((void *)&v121 + 1) - v120;
          v109[1] = v98;
          if (v112 >= 2)
          {
            uint64_t v99 = v118;
            BOOL v100 = (char *)v119[1] + 16;
            BOOL v101 = v109 + 2;
            for (unint64_t i = 1; i != v112; ++i)
            {
              if (i <= *(void *)(v99 + 112))
              {
                *(_OWORD *)BOOL v101 = *v100;
              }
              else
              {
                void *v101 = -1;
                v101[1] = -1;
              }
              ++v100;
              v101 += 2;
            }
          }
          goto LABEL_251;
        }
        int v90 = (char *)v119[1];
        if (!v119[1])
        {
          int v90 = (char *)malloc_type_malloc(16 * *(void *)(v118 + 112) + 16, 0x1000040451B5BE8uLL);
          v119[1] = v90;
          if (!v90) {
            goto LABEL_263;
          }
        }
        uint64_t v91 = *(void *)(v118 + 112);
        if (v91)
        {
          int v92 = v90 + 16;
          if ((unint64_t)(v91 + 1) > 2) {
            uint64_t v93 = v91 + 1;
          }
          else {
            uint64_t v93 = 2;
          }
          memset(v92, 255, 16 * v93 - 16);
        }
        if (!*(_DWORD *)(v111 + 120) && (BYTE1(v119[0]) & 4) == 0)
        {
          uint64_t v94 = (uint64_t)sub_1CD0DF344(&v118, *((char **)&v121 + 1), v88, v71, v17);
          goto LABEL_240;
        }
        uint64_t v95 = *(void *)(v111 + 128);
        uint64_t v96 = v122[0];
        if (v95 >= 1 && !v122[0])
        {
          uint64_t v96 = malloc_type_malloc(8 * v95 + 8, 0x10040436913F5uLL);
          v122[0] = v96;
          uint64_t v95 = *(void *)(v111 + 128);
        }
        if (v95 >= 1 && !v96)
        {
          free(v119[1]);
LABEL_263:
          uint64_t v15 = 12;
          goto LABEL_256;
        }
        unint64_t v97 = (unsigned __int8 *)*((void *)&v121 + 1);
        do
        {
          uint64_t v94 = sub_1CD0DF88C(&v118, v97, (unsigned __int8 *)v88, v71, v17, 0, 0);
LABEL_240:
          if (v94) {
            goto LABEL_244;
          }
          unint64_t v97 = (unsigned __int8 *)*((void *)&v121 + 1);
          if ((unint64_t)v88 <= *((void *)&v121 + 1)) {
            break;
          }
          uint64_t v88 = sub_1CD0DEFA8(&v118, *((char **)&v121 + 1), v88 - 1, v71, v17);
          unint64_t v97 = (unsigned __int8 *)*((void *)&v121 + 1);
        }
        while (v88);
        uint64_t v21 = (char *)(v97 + 1);
        if (v97 == (unsigned __int8 *)v86)
        {
LABEL_244:
          if (v112) {
            goto LABEL_245;
          }
LABEL_251:
          if (v119[1]) {
            free(v119[1]);
          }
          if (v122[0]) {
            free(v122[0]);
          }
          uint64_t v15 = 0;
LABEL_256:
          free(v123[0]);
          return v15;
        }
        goto LABEL_150;
      }
      memmove(*((void **)&v74 + 1), v75, *(void *)(v118 + 48));
      memmove(v75, (const void *)v74, *(void *)(v118 + 48));
      sub_1CD0DFE6C(v118, v71, v17, *((uint64_t *)&v74 + 1), v77, (uint64_t)v75);
      ++v21;
      int v73 = v77;
    }
  }
  long long v121 = 0uLL;
  *(_OWORD *)int v122 = 0uLL;
  *(_OWORD *)size_t v119 = 0uLL;
  long long v120 = 0uLL;
  uint64_t v11 = *(void *)(v5 + 56);
  uint64_t v10 = *(void *)(v5 + 64);
  if ((*(unsigned char *)(v5 + 40) & 4) != 0) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = a3;
  }
  if ((a5 & 4) != 0)
  {
    size_t v13 = a4[1];
    uint64_t v14 = &__s[*a4];
  }
  else
  {
    size_t v13 = strlen(__s);
    uint64_t v14 = __s;
  }
  uint64_t v22 = &__s[v13];
  if (&__s[v13] < v14) {
    return 16;
  }
  unint64_t v106 = v12;
  size_t v108 = a4;
  uint64_t v23 = *(unsigned __int8 **)(v5 + 96);
  long long __dst = &__s[v13];
  if (v23)
  {
    uint64_t v24 = v14;
    if (v14 < v22)
    {
      int v103 = v8;
      uint64_t v25 = v5;
      int v26 = *v23;
      uint64_t v27 = (char *)(__s - v14 + v13);
      uint64_t v115 = &__s[v13];
      int v28 = (char *)(&__s[v13] - v14);
      uint64_t v24 = v14;
      while (1)
      {
        if (*v24 == v26)
        {
          int64_t v29 = *(int *)(v25 + 104);
          if ((uint64_t)v28 >= v29 && !memcmp(v24, v23, v29)) {
            break;
          }
        }
        ++v24;
        --v28;
        if (!--v27)
        {
          uint64_t v24 = v115;
          break;
        }
      }
      uint64_t v5 = v25;
      uint64_t v22 = __dst;
      int v8 = v103;
    }
    if (v24 == v22) {
      return 1;
    }
  }
  uint64_t v30 = v11 + 1;
  uint64_t v118 = v5;
  LODWORD(v119[0]) = v8;
  *(void *)&long long v120 = __s;
  *((void *)&v120 + 1) = v14;
  *(void *)&long long v121 = v22;
  uint64_t v104 = 1 << (v11 + 1);
  uint64_t v110 = v5;
  *(_OWORD *)BOOL v123 = 0u;
  long long v124 = 0u;
LABEL_30:
  if (*((char **)&v120 + 1) == v14) {
    int v31 = 128;
  }
  else {
    int v31 = *(v14 - 1);
  }
  uint64_t v32 = v118;
  unint64_t v33 = sub_1CD0DED88(v118, v30, v10, v104, 132, v104);
  uint64_t v34 = 0;
  unint64_t v35 = v33;
  unint64_t v116 = v33;
  while (1)
  {
    int v36 = v14 == (char *)v121 ? 128 : *v14;
    int v37 = v35 == v33 ? v14 : v34;
    if (v31 == 128)
    {
      if ((uint64_t)v119[0]) {
        goto LABEL_43;
      }
    }
    else if (v31 != 10 || (*(unsigned char *)(v32 + 40) & 8) == 0)
    {
LABEL_43:
      int v38 = 0;
      int v39 = 0;
      int v40 = 130;
      goto LABEL_46;
    }
    int v39 = *(_DWORD *)(v32 + 76);
    int v38 = 129;
    int v40 = 131;
LABEL_46:
    if (v36 == 128)
    {
      if (((uint64_t)v119[0] & 2) != 0) {
        goto LABEL_49;
      }
    }
    else if (v36 != 10 || (*(unsigned char *)(v32 + 40) & 8) == 0)
    {
LABEL_49:
      int v40 = v38;
      goto LABEL_52;
    }
    v39 += *(_DWORD *)(v32 + 80);
LABEL_52:
    if (v39 >= 1)
    {
      unsigned int v41 = v39 + 1;
      do
      {
        unint64_t v35 = sub_1CD0DED88(v32, v30, v10, v35, v40, v35);
        --v41;
      }
      while (v41 > 1);
    }
    if (v40 == 129)
    {
      if (v36 == 128)
      {
        int v40 = 129;
      }
      else
      {
LABEL_65:
        if (v36 > 0x7Fu) {
          int v43 = __maskrune(v36, 0x500uLL);
        }
        else {
          int v43 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x500;
        }
        if (v36 == 95 || v43 != 0) {
          int v40 = 133;
        }
      }
      if (v31 == 128) {
        goto LABEL_83;
      }
      unsigned int v42 = v31;
      goto LABEL_75;
    }
    if (v31 == 128) {
      goto LABEL_83;
    }
    unsigned int v42 = v31;
    if (v31 > 0x7Fu)
    {
      if (__maskrune(v31, 0x500uLL)) {
        goto LABEL_75;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v31 + 60) & 0x500) != 0)
    {
      goto LABEL_75;
    }
    if (v31 != 95 && v36 != 128) {
      goto LABEL_65;
    }
LABEL_75:
    if (v42 > 0x7F)
    {
      if (!__maskrune(v42, 0x500uLL))
      {
LABEL_79:
        if (v31 != 95) {
          goto LABEL_83;
        }
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v42 + 60) & 0x500) == 0)
    {
      goto LABEL_79;
    }
    if (v40 == 130
      || v36 != 128
      && (v36 > 0x7Fu
        ? (int v46 = __maskrune(v36, 0x500uLL))
        : (int v46 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x500),
          !v46 && v36 != 95))
    {
      int v40 = 134;
LABEL_84:
      unint64_t v35 = sub_1CD0DED88(v118, v30, v10, v35, v40, v35);
      goto LABEL_85;
    }
LABEL_83:
    if ((v40 - 133) <= 1) {
      goto LABEL_84;
    }
LABEL_85:
    uint64_t v34 = v37;
    unint64_t v33 = v116;
    uint64_t v45 = v35 & (1 << v10);
    if (v14 == __dst || v45) {
      break;
    }
    uint64_t v32 = v118;
    unint64_t v35 = sub_1CD0DED88(v118, v30, v10, v35, v36, v116);
    ++v14;
    int v31 = v36;
  }
  *((void *)&v121 + 1) = v34;
  if (!v45)
  {
    free(v119[1]);
    free(v122[0]);
    return 1;
  }
  if (!v106 && !*(_DWORD *)(v110 + 120)) {
    goto LABEL_130;
  }
  int v47 = sub_1CD0DDF08(&v118, v34, __dst, v30, v10);
  if (!v47)
  {
    do
    {
      ++*((void *)&v121 + 1);
      uint64_t v48 = sub_1CD0DDF08(&v118, *((char **)&v121 + 1), __dst, v30, v10);
    }
    while (!v48);
    int v47 = v48;
  }
  if (v106 == 1 && !*(_DWORD *)(v110 + 120)) {
    goto LABEL_124;
  }
  uint64_t v49 = (char *)v119[1];
  if (!v119[1])
  {
    uint64_t v49 = (char *)malloc_type_malloc(16 * *(void *)(v118 + 112) + 16, 0x1000040451B5BE8uLL);
    v119[1] = v49;
    if (!v49) {
      return 12;
    }
  }
  uint64_t v50 = *(void *)(v118 + 112);
  if (v50)
  {
    int v51 = v49 + 16;
    if ((unint64_t)(v50 + 1) > 2) {
      uint64_t v52 = v50 + 1;
    }
    else {
      uint64_t v52 = 2;
    }
    memset(v51, 255, 16 * v52 - 16);
  }
  if (!*(_DWORD *)(v110 + 120) && (BYTE1(v119[0]) & 4) == 0)
  {
    uint64_t v53 = (uint64_t)sub_1CD0DE260(&v118, *((char **)&v121 + 1), v47, v30, v10);
    goto LABEL_119;
  }
  uint64_t v54 = *(void *)(v110 + 128);
  size_t v55 = v122[0];
  if (v54 >= 1 && !v122[0])
  {
    size_t v55 = malloc_type_malloc(8 * v54 + 8, 0x10040436913F5uLL);
    v122[0] = v55;
    uint64_t v54 = *(void *)(v110 + 128);
  }
  if (v54 >= 1 && !v55)
  {
    free(v119[1]);
    return 12;
  }
  int v56 = (unsigned __int8 *)*((void *)&v121 + 1);
  while (1)
  {
    uint64_t v53 = sub_1CD0DE7A8(&v118, v56, (unsigned __int8 *)v47, v30, v10, 0, 0);
LABEL_119:
    if (v53) {
      break;
    }
    int v56 = (unsigned __int8 *)*((void *)&v121 + 1);
    if ((unint64_t)v47 > *((void *)&v121 + 1))
    {
      int v47 = sub_1CD0DDF08(&v118, *((char **)&v121 + 1), v47 - 1, v30, v10);
      int v56 = (unsigned __int8 *)*((void *)&v121 + 1);
      if (v47) {
        continue;
      }
    }
    uint64_t v14 = (char *)(v56 + 1);
    if (v56 != (unsigned __int8 *)__dst) {
      goto LABEL_30;
    }
    break;
  }
  if (v106)
  {
LABEL_124:
    uint64_t v57 = &v47[-v120];
    *size_t v108 = *((void *)&v121 + 1) - v120;
    v108[1] = v57;
    if (v106 >= 2)
    {
      uint64_t v58 = v118;
      unsigned __int8 v59 = (char *)v119[1] + 16;
      uint64_t v60 = v108 + 2;
      for (unint64_t j = 1; j != v106; ++j)
      {
        if (j <= *(void *)(v58 + 112))
        {
          *(_OWORD *)uint64_t v60 = *v59;
        }
        else
        {
          void *v60 = -1;
          v60[1] = -1;
        }
        ++v59;
        v60 += 2;
      }
    }
  }
LABEL_130:
  if (v119[1]) {
    free(v119[1]);
  }
  if (v122[0]) {
    free(v122[0]);
  }
  return 0;
}

char *sub_1CD0DDF08(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  int v7 = a2;
  unint64_t v23 = a1[12];
  if ((char *)a1[4] == a2) {
    int v8 = 128;
  }
  else {
    int v8 = *(a2 - 1);
  }
  uint64_t v9 = *a1;
  unint64_t v10 = sub_1CD0DED88(*a1, a4, a5, 1 << a4, 132, 1 << a4);
  uint64_t v11 = 0;
  unint64_t v12 = a1;
  while (1)
  {
    int v13 = v7 == (char *)v12[5] ? 128 : *v7;
    if (v8 == 128)
    {
      if (v12[1]) {
        goto LABEL_11;
      }
    }
    else if (v8 != 10 || (*(unsigned char *)(v9 + 40) & 8) == 0)
    {
LABEL_11:
      int v14 = 0;
      int v15 = 0;
      int v16 = 130;
      goto LABEL_14;
    }
    int v15 = *(_DWORD *)(v9 + 76);
    int v14 = 129;
    int v16 = 131;
LABEL_14:
    if (v13 == 128)
    {
      if ((v12[1] & 2) != 0) {
        goto LABEL_17;
      }
    }
    else if (v13 != 10 || (*(unsigned char *)(v9 + 40) & 8) == 0)
    {
LABEL_17:
      int v16 = v14;
      goto LABEL_20;
    }
    v15 += *(_DWORD *)(v9 + 80);
LABEL_20:
    if (v15 >= 1)
    {
      unsigned int v17 = v15 + 1;
      do
      {
        unint64_t v10 = sub_1CD0DED88(v9, a4, a5, v10, v16, v10);
        --v17;
      }
      while (v17 > 1);
    }
    if (v16 == 129)
    {
      unint64_t v12 = a1;
      if (v13 == 128)
      {
        int v16 = 129;
      }
      else
      {
LABEL_33:
        if (v13 > 0x7Fu) {
          int v19 = __maskrune(v13, 0x500uLL);
        }
        else {
          int v19 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v13 + 60) & 0x500;
        }
        if (v13 == 95 || v19 != 0) {
          int v16 = 133;
        }
      }
      if (v8 == 128) {
        goto LABEL_51;
      }
      unsigned int v18 = v8;
      goto LABEL_43;
    }
    unint64_t v12 = a1;
    if (v8 == 128) {
      goto LABEL_51;
    }
    unsigned int v18 = v8;
    if (v8 > 0x7Fu)
    {
      if (__maskrune(v8, 0x500uLL)) {
        goto LABEL_43;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x500) != 0)
    {
      goto LABEL_43;
    }
    if (v8 != 95 && v13 != 128) {
      goto LABEL_33;
    }
LABEL_43:
    if (v18 > 0x7F)
    {
      if (__maskrune(v18, 0x500uLL)) {
        goto LABEL_48;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v18 + 60) & 0x500) != 0)
    {
      goto LABEL_48;
    }
    if (v8 != 95) {
      goto LABEL_51;
    }
LABEL_48:
    if (v16 == 130)
    {
      int v16 = 134;
      unint64_t v21 = v23;
    }
    else
    {
      if (v13 == 128)
      {
LABEL_51:
        unint64_t v21 = v23;
LABEL_52:
        if ((v16 - 133) > 1) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      unint64_t v21 = v23;
      if (v13 > 0x7Fu)
      {
        if (__maskrune(v13, 0x500uLL)) {
          goto LABEL_52;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v13 + 60) & 0x500) != 0)
      {
        goto LABEL_52;
      }
      if (v13 == 95) {
        goto LABEL_52;
      }
      int v16 = 134;
    }
LABEL_53:
    unint64_t v10 = sub_1CD0DED88(*v12, a4, a5, v10, v16, v10);
LABEL_54:
    if ((v10 & (1 << a5)) != 0) {
      uint64_t v11 = v7;
    }
    if (v7 == a3 || v10 == v21) {
      return v11;
    }
    uint64_t v9 = *v12;
    unint64_t v10 = sub_1CD0DED88(*v12, a4, a5, v10, v13, v21);
    ++v7;
    int v8 = v13;
  }
}

char *sub_1CD0DE260(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4 >= a5) {
    return a2;
  }
  uint64_t v7 = a4;
  uint64_t v51 = a5 - 1;
  do
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)(*a1 + 8);
    uint64_t v12 = *(void *)(v11 + 8 * v7);
    int v13 = v12 & 0xF8000000;
    if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
    {
      uint64_t v15 = (v12 & 0x7FFFFFF) + v7;
    }
    else
    {
      BOOL v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
      uint64_t v15 = v7;
      if (!v16)
      {
        uint64_t v17 = *(void *)(v11 + 8 * v7);
        uint64_t v15 = v7;
        do
        {
          v15 += v17 & 0x7FFFFFF;
          uint64_t v17 = *(void *)(v11 + 8 * v15);
        }
        while ((v17 & 0xF8000000) != 0x90000000);
      }
    }
    uint64_t v7 = v15 + 1;
    switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
    {
      case 1uLL:
      case 4uLL:
      case 5uLL:
        ++a2;
        continue;
      case 8uLL:
        unsigned int v18 = sub_1CD0DDF08(a1, a2, a3, v10, v15 + 1);
        if (sub_1CD0DDF08(a1, v18, a3, v15 + 1, a5) == a3)
        {
LABEL_30:
          uint64_t v26 = v10 + 1;
          uint64_t v27 = a2;
          do
          {
            int v28 = v27;
            uint64_t v27 = a2;
            int64_t v29 = sub_1CD0DDF08(a1, a2, v18, v26, v15);
            a2 = v29;
          }
          while (v29 && v29 != v27);
          if (v29) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v28;
          }
          if (v29) {
            int v31 = v29;
          }
          else {
            int v31 = v27;
          }
          sub_1CD0DE260(a1, v30, v31, v26, v15);
          a2 = v18;
          continue;
        }
        while (1)
        {
          int v19 = v18 - 1;
          if (v7 >= a5) {
            goto LABEL_28;
          }
          size_t v20 = (int *)(*(void *)(*a1 + 8) + 8 * v15 + 8);
          uint64_t v21 = v51 - v15;
          while (1)
          {
            int v23 = *v20;
            v20 += 2;
            char v22 = v23;
            unsigned int v24 = v23 & 0xF8000000;
            if ((v23 & 0xF8000000) != 0x70000000) {
              break;
            }
            if (!--v21) {
              goto LABEL_28;
            }
          }
          if (v24 != 0x10000000) {
            goto LABEL_28;
          }
          uint64_t v25 = a2;
          if (v19 != a2) {
            break;
          }
LABEL_29:
          unsigned int v18 = sub_1CD0DDF08(a1, a2, v25, v10, v15 + 1);
          if (sub_1CD0DDF08(a1, v18, a3, v15 + 1, a5) == a3) {
            goto LABEL_30;
          }
        }
        while (v22 != *v19)
        {
          if (--v19 == a2)
          {
            uint64_t v25 = a2;
            goto LABEL_29;
          }
        }
LABEL_28:
        uint64_t v25 = v19;
        goto LABEL_29;
      case 0xAuLL:
        uint64_t v32 = sub_1CD0DDF08(a1, a2, a3, v10, v15 + 1);
        if (sub_1CD0DDF08(a1, v32, a3, v15 + 1, a5) == a3) {
          goto LABEL_53;
        }
        break;
      case 0xCuLL:
        *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
        continue;
      case 0xDuLL:
        *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
        continue;
      case 0xEuLL:
        unsigned int v41 = a3;
        do
        {
          unsigned int v42 = sub_1CD0DDF08(a1, a2, v41, v10, v7);
          int v43 = sub_1CD0DDF08(a1, v42, a3, v7, a5);
          unsigned int v41 = v42 - 1;
        }
        while (v43 != a3);
        uint64_t v44 = v10 + (*(void *)(*(void *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
        uint64_t v45 = v10 + 1;
        while (sub_1CD0DDF08(a1, a2, v42, v45, v44) != v42)
        {
          uint64_t v46 = *(void *)(*a1 + 8);
          uint64_t v47 = *(void *)(v46 + 8 * (v44 + 1)) & 0x7FFFFFFLL;
          uint64_t v48 = v47 + v44 + 1;
          uint64_t v49 = v47 + v44;
          uint64_t v45 = v44 + 2;
          if ((*(void *)(v46 + 8 * v48) & 0xF8000000) == 0x88000000) {
            uint64_t v44 = v49;
          }
          else {
            uint64_t v44 = v48;
          }
        }
        sub_1CD0DE260(a1, a2, v42, v45, v44);
        a2 = v42;
        continue;
      default:
        continue;
    }
    do
    {
      unint64_t v33 = v32 - 1;
      if (v7 < a5)
      {
        uint64_t v34 = (int *)(*(void *)(*a1 + 8) + 8 * v15 + 8);
        uint64_t v35 = v51 - v15;
        while (1)
        {
          int v37 = *v34;
          v34 += 2;
          char v36 = v37;
          unsigned int v38 = v37 & 0xF8000000;
          if ((v37 & 0xF8000000) != 0x70000000) {
            break;
          }
          if (!--v35) {
            goto LABEL_51;
          }
        }
        if (v38 == 0x10000000)
        {
          int v39 = a2;
          if (v33 == a2) {
            goto LABEL_52;
          }
          while (v36 != *v33)
          {
            if (--v33 == a2)
            {
              int v39 = a2;
              goto LABEL_52;
            }
          }
        }
      }
LABEL_51:
      int v39 = v33;
LABEL_52:
      uint64_t v32 = sub_1CD0DDF08(a1, a2, v39, v10, v15 + 1);
    }
    while (sub_1CD0DDF08(a1, v32, a3, v15 + 1, a5) != a3);
LABEL_53:
    uint64_t v40 = v10 + 1;
    if (sub_1CD0DDF08(a1, a2, v32, v40, v15)) {
      sub_1CD0DE260(a1, a2, v32, v40, v15);
    }
    a2 = v32;
  }
  while (v7 < a5);
  return a2;
}

uint64_t sub_1CD0DE7A8(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3) {
      return (uint64_t)a2;
    }
    else {
      return 0;
    }
  }
  uint64_t v12 = a4;
LABEL_3:
  uint64_t v14 = v12;
  while (2)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = *(void *)(*a1 + 8);
    uint64_t v17 = *(void *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          int v26 = (char)*a2++;
          if (v26 == (char)v17) {
            goto LABEL_70;
          }
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0) {
          goto LABEL_70;
        }
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        int v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0) {
          goto LABEL_70;
        }
        if (a2 >= v28) {
          return 0;
        }
        int v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(unsigned char *)(v15 + 40) & 8) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3) {
          return 0;
        }
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3) {
          return 0;
        }
        uint64_t v29 = *(void *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        unsigned int v30 = *a2++;
        if ((*(unsigned char *)(v29 + 8) & *(unsigned char *)(*(void *)v29 + v30)) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 0xAuLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        uint64_t v31 = *(void *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          uint64_t v31 = *(void *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        uint64_t v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(unsigned char *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32) {
          return 0;
        }
        uint64_t v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0) {
          int v34 = __maskrune(*(a2 - 1), 0x500uLL);
        }
        else {
          int v34 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v33 + 60) & 0x500;
        }
        uint64_t result = 0;
        if (v33 == 95 || v34) {
          return result;
        }
LABEL_58:
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        uint64_t v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0) {
          goto LABEL_63;
        }
        if (a2 >= v35) {
          return 0;
        }
        uint64_t v36 = *a2;
        if (v36 == 10)
        {
          if ((*(unsigned char *)(v15 + 40) & 8) != 0) {
            goto LABEL_63;
          }
LABEL_54:
          int v37 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0) {
          goto LABEL_54;
        }
        int v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        uint64_t result = 0;
        if (v36 == 95 || v37) {
          return result;
        }
LABEL_63:
        if ((unint64_t)a2 <= a1[4]) {
          return 0;
        }
        int v38 = (char)*(a2 - 1);
LABEL_65:
        int v39 = v38;
        int v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40) {
          return 0;
        }
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        uint64_t v12 = v14 + 1;
        unint64_t v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          uint64_t result = sub_1CD0DE7A8(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result) {
            return result;
          }
          uint64_t v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5) {
            goto LABEL_78;
          }
          continue;
        }
        uint64_t result = 0;
        switch(v18)
        {
          case 0uLL:
            uint64_t v20 = v17 & 0x7FFFFFF;
            uint64_t v21 = a1[2];
            uint64_t v22 = *(void *)(v21 + 16 * v20 + 8);
            if (v22 == -1) {
              return 0;
            }
            uint64_t v23 = *(void *)(v21 + 16 * v20);
            size_t v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100) {
                return 0;
              }
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24)) {
              return 0;
            }
            do
              uint64_t v25 = *(void *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(void *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            uint64_t v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(void *)(v41 + 8 * a6) = a2;
              uint64_t result = sub_1CD0DE7A8(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result) {
                return result;
              }
            }
            --a6;
LABEL_77:
            if (v12 >= a5) {
              goto LABEL_78;
            }
            goto LABEL_3;
          case 6uLL:
            uint64_t v42 = 16 * (v17 & 0x7FFFFFF);
            uint64_t v43 = a1[2];
            uint64_t v44 = *(void *)(v43 + v42);
            *(void *)(v43 + v42) = &a2[-a1[3]];
            uint64_t result = sub_1CD0DE7A8(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + v42) = v44;
            }
            return result;
          case 7uLL:
            uint64_t v45 = v17 & 0x7FFFFFF;
            uint64_t v46 = a1[2] + 16 * v45;
            uint64_t v47 = *(void *)(v46 + 8);
            *(void *)(v46 + 8) = &a2[-a1[3]];
            uint64_t result = sub_1CD0DE7A8(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + 16 * v45 + 8) = v47;
            }
            return result;
          case 8uLL:
            uint64_t v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            uint64_t result = sub_1CD0DE7A8(a1, a2, a3, v14 + 1, v48, a6, a7);
            if (result) {
              return result;
            }
            break;
          default:
            return result;
        }
        while (1)
        {
          uint64_t v49 = *(void *)(*a1 + 8);
          if ((*(void *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000) {
            break;
          }
          uint64_t v50 = v48 + 2;
          uint64_t v51 = *(void *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          uint64_t v52 = v51 + v48 + 1;
          uint64_t v53 = v51 + v48;
          if ((*(void *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000) {
            uint64_t v48 = v53;
          }
          else {
            uint64_t v48 = v52;
          }
          uint64_t result = sub_1CD0DE7A8(a1, a2, a3, v50, v48, a6, a7);
          if (result) {
            return result;
          }
        }
        return 0;
    }
  }
}

unint64_t sub_1CD0DED88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  if (a2 != a3)
  {
    unint64_t v7 = 1 << a2;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      uint64_t v9 = *(void *)(v8 + 8 * a2);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          BOOL v11 = a5 == (char)v9;
          goto LABEL_29;
        case 2uLL:
          BOOL v11 = (a5 & 0xFFFFFFFD) == 129;
          goto LABEL_29;
        case 3uLL:
          BOOL v11 = (a5 & 0xFFFFFFFE) == 130;
          goto LABEL_29;
        case 4uLL:
          if (a5 <= 127) {
            a6 |= 2 * (v7 & a4);
          }
          break;
        case 5uLL:
          if (a5 > 127) {
            break;
          }
          uint64_t v12 = *(void *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
          if ((*(unsigned char *)(v12 + 8) & *(unsigned char *)(*(void *)v12 + a5)) == 0) {
            break;
          }
          unint64_t v10 = v7 & a4;
LABEL_6:
          a6 |= 2 * v10;
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          unint64_t v10 = a6 & v7;
          goto LABEL_6;
        case 9uLL:
          uint64_t v13 = a6 | (2 * (a6 & v7));
          a6 = ((v13 & v7) >> v9) | v13;
          if (((v7 >> v9) & v13) == 0 && (a6 & (v7 >> v9)) != 0)
          {
            a2 += ~(unint64_t)(v9 & 0x7FFFFFF);
            unint64_t v7 = 1 << a2;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          a6 |= (((a6 | (2 * (a6 & v7))) & v7) << v9) | (2 * (a6 & v7));
          break;
        case 0xFuLL:
          if ((a6 & v7) == 0) {
            break;
          }
          uint64_t v15 = *(void *)(v8 + 8 * a2 + 8);
          if ((v15 & 0xF8000000) == 0x90000000)
          {
            LOBYTE(v16) = 1;
          }
          else
          {
            uint64_t v16 = 1;
            do
            {
              v16 += v15 & 0x7FFFFFF;
              uint64_t v15 = *(void *)(v8 + 8 * (v16 + a2));
            }
            while ((v15 & 0xF8000000) != 0x90000000);
          }
          unint64_t v17 = (a6 & v7) << v16;
          goto LABEL_37;
        case 0x10uLL:
          a6 |= 2 * (a6 & v7);
          if ((*(void *)(v8 + 8 * ((v9 & 0x7FFFFFF) + a2)) & 0xF8000000) == 0x90000000) {
            break;
          }
          unint64_t v17 = (a6 & v7) << v9;
LABEL_37:
          a6 |= v17;
          break;
        case 0x12uLL:
          BOOL v11 = a5 == 133;
          goto LABEL_29;
        case 0x13uLL:
          BOOL v11 = a5 == 134;
LABEL_29:
          if (v11) {
            a6 |= 2 * (v7 & a4);
          }
          break;
        default:
          break;
      }
      ++a2;
      v7 *= 2;
    }
    while (a2 != a3);
  }
  return a6;
}

char *sub_1CD0DEFA8(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = a2;
  uint64_t v9 = (void *)a1[10];
  __s2 = (void *)a1[13];
  long long __dst = (void *)a1[12];
  if ((char *)a1[4] == a2) {
    int v10 = 128;
  }
  else {
    int v10 = *(a2 - 1);
  }
  bzero(v9, *(void *)(*a1 + 48));
  *((unsigned char *)v9 + a4) = 1;
  sub_1CD0DFE6C(*a1, a4, a5, (uint64_t)v9, 132, (uint64_t)v9);
  BOOL v11 = 0;
  while (1)
  {
    int v12 = v7 == (char *)a1[5] ? 128 : *v7;
    if (v10 == 128)
    {
      if ((a1[1] & 1) == 0)
      {
        uint64_t v13 = *a1;
LABEL_14:
        int v14 = *(_DWORD *)(v13 + 76);
        int v15 = 129;
        int v16 = 131;
        goto LABEL_16;
      }
    }
    else if (v10 == 10)
    {
      uint64_t v13 = *a1;
      if ((*(unsigned char *)(*a1 + 40) & 8) != 0) {
        goto LABEL_14;
      }
    }
    int v15 = 0;
    int v14 = 0;
    int v16 = 130;
LABEL_16:
    if (v12 == 128)
    {
      if ((a1[1] & 2) == 0)
      {
        uint64_t v17 = *a1;
LABEL_22:
        v14 += *(_DWORD *)(v17 + 80);
        goto LABEL_24;
      }
    }
    else if (v12 == 10)
    {
      uint64_t v17 = *a1;
      if ((*(unsigned char *)(*a1 + 40) & 8) != 0) {
        goto LABEL_22;
      }
    }
    int v16 = v15;
LABEL_24:
    if (v14 >= 1)
    {
      unsigned int v18 = v14 + 1;
      do
      {
        sub_1CD0DFE6C(*a1, a4, a5, (uint64_t)v9, v16, (uint64_t)v9);
        --v18;
      }
      while (v18 > 1);
    }
    if (v16 == 129)
    {
      if (v12 == 128)
      {
        int v16 = 129;
      }
      else
      {
LABEL_37:
        if (v12 > 0x7Fu) {
          int v20 = __maskrune(v12, 0x500uLL);
        }
        else {
          int v20 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v12 + 60) & 0x500;
        }
        if (v12 == 95 || v20 != 0) {
          int v16 = 133;
        }
      }
      if (v10 == 128) {
        goto LABEL_55;
      }
      unsigned int v19 = v10;
      goto LABEL_47;
    }
    if (v10 == 128) {
      goto LABEL_55;
    }
    unsigned int v19 = v10;
    if (v10 > 0x7Fu)
    {
      if (__maskrune(v10, 0x500uLL)) {
        goto LABEL_47;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v10 + 60) & 0x500) != 0)
    {
      goto LABEL_47;
    }
    if (v10 != 95 && v12 != 128) {
      goto LABEL_37;
    }
LABEL_47:
    if (v19 > 0x7F)
    {
      if (__maskrune(v19, 0x500uLL)) {
        goto LABEL_52;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v19 + 60) & 0x500) != 0)
    {
      goto LABEL_52;
    }
    if (v10 != 95) {
      goto LABEL_55;
    }
LABEL_52:
    if (v16 == 130)
    {
      int v16 = 134;
      uint64_t v22 = __s2;
    }
    else
    {
      if (v12 == 128)
      {
LABEL_55:
        uint64_t v22 = __s2;
LABEL_56:
        if ((v16 - 133) > 1) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      uint64_t v22 = __s2;
      if (v12 > 0x7Fu)
      {
        if (__maskrune(v12, 0x500uLL)) {
          goto LABEL_56;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v12 + 60) & 0x500) != 0)
      {
        goto LABEL_56;
      }
      if (v12 == 95) {
        goto LABEL_56;
      }
      int v16 = 134;
    }
LABEL_57:
    sub_1CD0DFE6C(*a1, a4, a5, (uint64_t)v9, v16, (uint64_t)v9);
LABEL_58:
    if (*((unsigned char *)v9 + a5)) {
      BOOL v11 = v7;
    }
    size_t v23 = *(void *)(*a1 + 48);
    int v24 = memcmp(v9, v22, v23);
    if (v7 == a3 || !v24) {
      return v11;
    }
    memmove(__dst, v9, v23);
    memmove(v9, v22, *(void *)(*a1 + 48));
    sub_1CD0DFE6C(*a1, a4, a5, (uint64_t)__dst, v12, (uint64_t)v9);
    ++v7;
    int v10 = v12;
  }
}

char *sub_1CD0DF344(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4 >= a5) {
    return a2;
  }
  uint64_t v7 = a4;
  uint64_t v51 = a5 - 1;
  do
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)(*a1 + 8);
    uint64_t v12 = *(void *)(v11 + 8 * v7);
    int v13 = v12 & 0xF8000000;
    if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
    {
      uint64_t v15 = (v12 & 0x7FFFFFF) + v7;
    }
    else
    {
      BOOL v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
      uint64_t v15 = v7;
      if (!v16)
      {
        uint64_t v17 = *(void *)(v11 + 8 * v7);
        uint64_t v15 = v7;
        do
        {
          v15 += v17 & 0x7FFFFFF;
          uint64_t v17 = *(void *)(v11 + 8 * v15);
        }
        while ((v17 & 0xF8000000) != 0x90000000);
      }
    }
    uint64_t v7 = v15 + 1;
    switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
    {
      case 1uLL:
      case 4uLL:
      case 5uLL:
        ++a2;
        continue;
      case 8uLL:
        unsigned int v18 = sub_1CD0DEFA8(a1, a2, a3, v10, v15 + 1);
        if (sub_1CD0DEFA8(a1, v18, a3, v15 + 1, a5) == a3)
        {
LABEL_30:
          uint64_t v26 = v10 + 1;
          int v27 = a2;
          do
          {
            int v28 = v27;
            int v27 = a2;
            uint64_t v29 = sub_1CD0DEFA8(a1, a2, v18, v26, v15);
            a2 = v29;
          }
          while (v29 && v29 != v27);
          if (v29) {
            unsigned int v30 = v27;
          }
          else {
            unsigned int v30 = v28;
          }
          if (v29) {
            uint64_t v31 = v29;
          }
          else {
            uint64_t v31 = v27;
          }
          sub_1CD0DF344(a1, v30, v31, v26, v15);
          a2 = v18;
          continue;
        }
        while (1)
        {
          unsigned int v19 = v18 - 1;
          if (v7 >= a5) {
            goto LABEL_28;
          }
          int v20 = (int *)(*(void *)(*a1 + 8) + 8 * v15 + 8);
          uint64_t v21 = v51 - v15;
          while (1)
          {
            int v23 = *v20;
            v20 += 2;
            char v22 = v23;
            unsigned int v24 = v23 & 0xF8000000;
            if ((v23 & 0xF8000000) != 0x70000000) {
              break;
            }
            if (!--v21) {
              goto LABEL_28;
            }
          }
          if (v24 != 0x10000000) {
            goto LABEL_28;
          }
          uint64_t v25 = a2;
          if (v19 != a2) {
            break;
          }
LABEL_29:
          unsigned int v18 = sub_1CD0DEFA8(a1, a2, v25, v10, v15 + 1);
          if (sub_1CD0DEFA8(a1, v18, a3, v15 + 1, a5) == a3) {
            goto LABEL_30;
          }
        }
        while (v22 != *v19)
        {
          if (--v19 == a2)
          {
            uint64_t v25 = a2;
            goto LABEL_29;
          }
        }
LABEL_28:
        uint64_t v25 = v19;
        goto LABEL_29;
      case 0xAuLL:
        uint64_t v32 = sub_1CD0DEFA8(a1, a2, a3, v10, v15 + 1);
        if (sub_1CD0DEFA8(a1, v32, a3, v15 + 1, a5) == a3) {
          goto LABEL_53;
        }
        break;
      case 0xCuLL:
        *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
        continue;
      case 0xDuLL:
        *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
        continue;
      case 0xEuLL:
        uint64_t v41 = a3;
        do
        {
          uint64_t v42 = sub_1CD0DEFA8(a1, a2, v41, v10, v7);
          uint64_t v43 = sub_1CD0DEFA8(a1, v42, a3, v7, a5);
          uint64_t v41 = v42 - 1;
        }
        while (v43 != a3);
        uint64_t v44 = v10 + (*(void *)(*(void *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
        uint64_t v45 = v10 + 1;
        while (sub_1CD0DEFA8(a1, a2, v42, v45, v44) != v42)
        {
          uint64_t v46 = *(void *)(*a1 + 8);
          uint64_t v47 = *(void *)(v46 + 8 * (v44 + 1)) & 0x7FFFFFFLL;
          uint64_t v48 = v47 + v44 + 1;
          uint64_t v49 = v47 + v44;
          uint64_t v45 = v44 + 2;
          if ((*(void *)(v46 + 8 * v48) & 0xF8000000) == 0x88000000) {
            uint64_t v44 = v49;
          }
          else {
            uint64_t v44 = v48;
          }
        }
        sub_1CD0DF344(a1, a2, v42, v45, v44);
        a2 = v42;
        continue;
      default:
        continue;
    }
    do
    {
      uint64_t v33 = v32 - 1;
      if (v7 < a5)
      {
        int v34 = (int *)(*(void *)(*a1 + 8) + 8 * v15 + 8);
        uint64_t v35 = v51 - v15;
        while (1)
        {
          int v37 = *v34;
          v34 += 2;
          char v36 = v37;
          unsigned int v38 = v37 & 0xF8000000;
          if ((v37 & 0xF8000000) != 0x70000000) {
            break;
          }
          if (!--v35) {
            goto LABEL_51;
          }
        }
        if (v38 == 0x10000000)
        {
          int v39 = a2;
          if (v33 == a2) {
            goto LABEL_52;
          }
          while (v36 != *v33)
          {
            if (--v33 == a2)
            {
              int v39 = a2;
              goto LABEL_52;
            }
          }
        }
      }
LABEL_51:
      int v39 = v33;
LABEL_52:
      uint64_t v32 = sub_1CD0DEFA8(a1, a2, v39, v10, v15 + 1);
    }
    while (sub_1CD0DEFA8(a1, v32, a3, v15 + 1, a5) != a3);
LABEL_53:
    uint64_t v40 = v10 + 1;
    if (sub_1CD0DEFA8(a1, a2, v32, v40, v15)) {
      sub_1CD0DF344(a1, a2, v32, v40, v15);
    }
    a2 = v32;
  }
  while (v7 < a5);
  return a2;
}

uint64_t sub_1CD0DF88C(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3) {
      return (uint64_t)a2;
    }
    else {
      return 0;
    }
  }
  uint64_t v12 = a4;
LABEL_3:
  uint64_t v14 = v12;
  while (2)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = *(void *)(*a1 + 8);
    uint64_t v17 = *(void *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          int v26 = (char)*a2++;
          if (v26 == (char)v17) {
            goto LABEL_70;
          }
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0) {
          goto LABEL_70;
        }
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        int v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0) {
          goto LABEL_70;
        }
        if (a2 >= v28) {
          return 0;
        }
        int v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(unsigned char *)(v15 + 40) & 8) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3) {
          return 0;
        }
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3) {
          return 0;
        }
        uint64_t v29 = *(void *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        unsigned int v30 = *a2++;
        if ((*(unsigned char *)(v29 + 8) & *(unsigned char *)(*(void *)v29 + v30)) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 0xAuLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        uint64_t v31 = *(void *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          uint64_t v31 = *(void *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        uint64_t v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(unsigned char *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32) {
          return 0;
        }
        uint64_t v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0) {
          int v34 = __maskrune(*(a2 - 1), 0x500uLL);
        }
        else {
          int v34 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v33 + 60) & 0x500;
        }
        uint64_t result = 0;
        if (v33 == 95 || v34) {
          return result;
        }
LABEL_58:
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        uint64_t v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0) {
          goto LABEL_63;
        }
        if (a2 >= v35) {
          return 0;
        }
        uint64_t v36 = *a2;
        if (v36 == 10)
        {
          if ((*(unsigned char *)(v15 + 40) & 8) != 0) {
            goto LABEL_63;
          }
LABEL_54:
          int v37 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0) {
          goto LABEL_54;
        }
        int v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        uint64_t result = 0;
        if (v36 == 95 || v37) {
          return result;
        }
LABEL_63:
        if ((unint64_t)a2 <= a1[4]) {
          return 0;
        }
        int v38 = (char)*(a2 - 1);
LABEL_65:
        int v39 = v38;
        int v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40) {
          return 0;
        }
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        uint64_t v12 = v14 + 1;
        unint64_t v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          uint64_t result = sub_1CD0DF88C(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result) {
            return result;
          }
          uint64_t v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5) {
            goto LABEL_78;
          }
          continue;
        }
        uint64_t result = 0;
        switch(v18)
        {
          case 0uLL:
            uint64_t v20 = v17 & 0x7FFFFFF;
            uint64_t v21 = a1[2];
            uint64_t v22 = *(void *)(v21 + 16 * v20 + 8);
            if (v22 == -1) {
              return 0;
            }
            uint64_t v23 = *(void *)(v21 + 16 * v20);
            size_t v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100) {
                return 0;
              }
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24)) {
              return 0;
            }
            do
              uint64_t v25 = *(void *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(void *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            uint64_t v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(void *)(v41 + 8 * a6) = a2;
              uint64_t result = sub_1CD0DF88C(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result) {
                return result;
              }
            }
            --a6;
LABEL_77:
            if (v12 >= a5) {
              goto LABEL_78;
            }
            goto LABEL_3;
          case 6uLL:
            uint64_t v42 = 16 * (v17 & 0x7FFFFFF);
            uint64_t v43 = a1[2];
            uint64_t v44 = *(void *)(v43 + v42);
            *(void *)(v43 + v42) = &a2[-a1[3]];
            uint64_t result = sub_1CD0DF88C(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + v42) = v44;
            }
            return result;
          case 7uLL:
            uint64_t v45 = v17 & 0x7FFFFFF;
            uint64_t v46 = a1[2] + 16 * v45;
            uint64_t v47 = *(void *)(v46 + 8);
            *(void *)(v46 + 8) = &a2[-a1[3]];
            uint64_t result = sub_1CD0DF88C(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + 16 * v45 + 8) = v47;
            }
            return result;
          case 8uLL:
            uint64_t v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            uint64_t result = sub_1CD0DF88C(a1, a2, a3, v14 + 1, v48, a6, a7);
            if (result) {
              return result;
            }
            break;
          default:
            return result;
        }
        while (1)
        {
          uint64_t v49 = *(void *)(*a1 + 8);
          if ((*(void *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000) {
            break;
          }
          uint64_t v50 = v48 + 2;
          uint64_t v51 = *(void *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          uint64_t v52 = v51 + v48 + 1;
          uint64_t v53 = v51 + v48;
          if ((*(void *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000) {
            uint64_t v48 = v53;
          }
          else {
            uint64_t v48 = v52;
          }
          uint64_t result = sub_1CD0DF88C(a1, a2, a3, v50, v48, a6, a7);
          if (result) {
            return result;
          }
        }
        return 0;
    }
  }
}

uint64_t sub_1CD0DFE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          if (a5 == (char)v9) {
            goto LABEL_32;
          }
          break;
        case 2uLL:
          if ((a5 & 0xFFFFFFFD) == 0x81) {
            goto LABEL_32;
          }
          break;
        case 3uLL:
          if ((a5 & 0xFFFFFFFE) == 0x82) {
            goto LABEL_32;
          }
          break;
        case 4uLL:
          if (a5 <= 127) {
            goto LABEL_32;
          }
          break;
        case 5uLL:
          if (a5 <= 127)
          {
            uint64_t v13 = *(void *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
            if ((*(unsigned char *)(v13 + 8) & *(unsigned char *)(*(void *)v13 + a5)) != 0) {
              goto LABEL_32;
            }
          }
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          *(unsigned char *)(a6 + a2 + 1) |= *(unsigned char *)(a6 + a2);
          break;
        case 9uLL:
          char v14 = *(unsigned char *)(a6 + a2);
          *(unsigned char *)(a6 + a2 + 1) |= v14;
          uint64_t v15 = v9 & 0x7FFFFFF;
          int v16 = *(unsigned __int8 *)(a6 + a2 - v15);
          char v17 = v16 | v14;
          *(unsigned char *)(a6 + a2 - v15) = v17;
          if (v16) {
            BOOL v18 = 1;
          }
          else {
            BOOL v18 = v17 == 0;
          }
          if (!v18)
          {
            v7 += ~v15;
            a2 = v7;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          char v10 = *(unsigned char *)(a6 + a2);
          *(unsigned char *)(a6 + a2 + 1) |= v10;
          uint64_t v11 = (v9 & 0x7FFFFFF) + a2;
          char v12 = *(unsigned char *)(a6 + v11) | v10;
          goto LABEL_7;
        case 0xFuLL:
          if (*(unsigned char *)(a6 + a2))
          {
            uint64_t v19 = *(void *)(v8 + 8 * v7 + 8);
            if ((v19 & 0xF8000000) == 0x90000000)
            {
              uint64_t v20 = 1;
            }
            else
            {
              uint64_t v20 = 1;
              do
              {
                v20 += v19 & 0x7FFFFFF;
                uint64_t v19 = *(void *)(v8 + 8 * (v20 + v7));
              }
              while ((v19 & 0xF8000000) != 0x90000000);
            }
            *(unsigned char *)(a6 + v20 + a2) |= *(unsigned char *)(a6 + a2);
          }
          break;
        case 0x10uLL:
          char v21 = *(unsigned char *)(a6 + a2);
          *(unsigned char *)(a6 + a2 + 1) |= v21;
          uint64_t v22 = v9 & 0x7FFFFFF;
          if ((*(void *)(*(void *)(a1 + 8) + 8 * (v22 + v7)) & 0xF8000000) != 0x90000000)
          {
            uint64_t v11 = v22 + a2;
            char v12 = *(unsigned char *)(a6 + v11) | v21;
LABEL_7:
            *(unsigned char *)(a6 + v11) = v12;
          }
          break;
        case 0x12uLL:
          if (a5 != 133) {
            break;
          }
          goto LABEL_32;
        case 0x13uLL:
          if (a5 == 134) {
LABEL_32:
          }
            *(unsigned char *)(a2 + a6 + 1) |= *(unsigned char *)(a4 + a2);
          break;
        default:
          break;
      }
      ++v7;
      ++a2;
    }
    while (v7 != a3);
  }
  return a6;
}

void llvm::sys::MemoryFence(llvm::sys *this)
{
}

uint64_t llvm::sys::CompareAndSwap(atomic_uint *this, volatile unsigned int *a2, uint64_t a3)
{
  return a3;
}

uint64_t llvm::SearchForAddressOfSpecialSymbol(llvm *this, const char *a2)
{
  return 0;
}

void llvm::sys::DynamicLibrary::AddSymbol(unsigned __int8 *a1, size_t a2, uint64_t a3)
{
  if (!atomic_load_explicit(&qword_1EBCFB448, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCFB448, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  uint64_t v5 = qword_1EBCFB448;
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB448);
  if (!atomic_load_explicit(qword_1EBCFB460, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB460, (void *(*)(void))sub_1CD0E0A10, (void (*)(void *))sub_1CD0E0A48);
  }
  size_t v6 = (llvm::StringMapImpl *)qword_1EBCFB460[0];
  unsigned int v7 = *(_DWORD *)(qword_1EBCFB460[0] + 8);
  if (!v7)
  {
    *(_DWORD *)(qword_1EBCFB460[0] + 12) = 0;
    *((_DWORD *)v6 + 4) = 0;
    int v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v28[16] = 2;
    *(void *)size_t v6 = v28;
    unsigned int v7 = 16;
    *((_DWORD *)v6 + 2) = 16;
  }
  uint64_t v29 = (std::recursive_mutex *)v5;
  uint64_t v30 = a3;
  int v8 = 0;
  if (a2)
  {
    size_t v9 = a2;
    char v10 = a1;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)v6;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)v6 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && a2 == *v19
    }
           && (!a2 || !memcmp(a1, (char *)v19 + *((unsigned int *)v6 + 5), a2)))
    {
      goto LABEL_24;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  uint64_t v19 = *(void **)(v12 + 8 * v18);
LABEL_24:
  if (v19 == (void *)-8)
  {
    --*((_DWORD *)v6 + 4);
    uint64_t v22 = v29;
    uint64_t v21 = v30;
  }
  else
  {
    uint64_t v22 = v29;
    uint64_t v21 = v30;
    if (v19) {
      goto LABEL_37;
    }
  }
  uint64_t v23 = operator new(a2 + 17, (std::align_val_t)8uLL);
  size_t v24 = v23;
  uint64_t v25 = (char *)(v23 + 2);
  if (a2) {
    memcpy(v23 + 2, a1, a2);
  }
  v25[a2] = 0;
  *size_t v24 = a2;
  v24[1] = 0;
  *(void *)(v12 + 8 * v18) = v24;
  ++*((_DWORD *)v6 + 3);
  for (unint64_t i = (void **)(*(void *)v6 + 8 * llvm::StringMapImpl::RehashTable(v6, v18)); ; ++i)
  {
    uint64_t v19 = *i;
    if (*i && v19 + 1 != 0) {
      break;
    }
  }
LABEL_37:
  v19[1] = v21;

  std::recursive_mutex::unlock(v22);
}

uint64_t sub_1CD0E03AC(uint64_t a1, void *__handle, char a3, int a4)
{
  if (a3)
  {
    uint64_t v19 = *(void **)(a1 + 24);
    if (v19)
    {
      if (a4)
      {
        dlclose(v19);
        uint64_t v19 = *(void **)(a1 + 24);
      }
      if (v19 == __handle) {
        return 0;
      }
    }
    *(void *)(a1 + 24) = __handle;
  }
  else
  {
    size_t v6 = *(void ***)a1;
    unsigned int v7 = *(void ***)(a1 + 8);
    int v8 = *(void ***)a1;
    if (*(void ***)a1 != v7)
    {
      int v8 = *(void ***)a1;
      while (*v8 != __handle)
      {
        if (++v8 == v7)
        {
          int v8 = *(void ***)(a1 + 8);
          break;
        }
      }
    }
    if (v8 != v7)
    {
      if (a4) {
        dlclose(__handle);
      }
      return 0;
    }
    unint64_t v10 = *(void *)(a1 + 16);
    if ((unint64_t)v7 >= v10)
    {
      uint64_t v12 = v7 - v6;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      uint64_t v14 = v10 - (void)v6;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          sub_1CB833614();
        }
        int v16 = (char *)operator new(8 * v15);
      }
      else
      {
        int v16 = 0;
      }
      int v17 = &v16[8 * v12];
      *(void *)int v17 = __handle;
      int v11 = v17 + 8;
      if (v6 != v7)
      {
        do
        {
          uint64_t v18 = (uint64_t)*--v7;
          *((void *)v17 - 1) = v18;
          v17 -= 8;
        }
        while (v7 != v6);
        size_t v6 = *(void ***)a1;
      }
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = &v16[8 * v15];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *unsigned int v7 = __handle;
      int v11 = v7 + 1;
    }
    *(void *)(a1 + 8) = v11;
  }
  return 1;
}

void *llvm::sys::DynamicLibrary::addPermanentLibrary(void *a1, uint64_t a2)
{
  if (!atomic_load_explicit(&qword_1EBCFB448, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCFB448, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  uint64_t v4 = (std::recursive_mutex *)qword_1EBCFB448;
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB448);
  if (!atomic_load_explicit(qword_1EBCFB478, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB478, (void *(*)(void))sub_1CD864804, (void (*)(void *))sub_1CD864838);
  }
  if ((sub_1CD0E03AC(qword_1EBCFB478[0], a1, 0, 0) & 1) == 0) {
    MEMORY[0x1D25D9630](a2, "Library already loaded");
  }
  std::recursive_mutex::unlock(v4);
  return a1;
}

void *llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(llvm::sys::DynamicLibrary *this, const char *a2)
{
  if (!atomic_load_explicit(&qword_1EBCFB448, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCFB448, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  int v3 = (std::recursive_mutex *)qword_1EBCFB448;
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB448);
  if (!atomic_load((unint64_t *)qword_1EBCFB460)) {
    goto LABEL_29;
  }
  if (!atomic_load_explicit(qword_1EBCFB460, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB460, (void *(*)(void))sub_1CD0E0A10, (void (*)(void *))sub_1CD0E0A48);
  }
  uint64_t v5 = (void **)&unk_1EBCFB000;
  uint64_t v6 = qword_1EBCFB460[0];
  uint64_t v30 = v3;
  if (!this)
  {
    int v11 = 0;
    unsigned int v8 = *(_DWORD *)(qword_1EBCFB460[0] + 8);
    if (v8)
    {
      size_t v9 = 0;
LABEL_14:
      char v12 = 1;
      goto LABEL_15;
    }
    unsigned int v29 = 0;
LABEL_24:
    uint64_t v14 = *(void *)v6;
    uint64_t v20 = v29;
    goto LABEL_25;
  }
  size_t v7 = strlen((const char *)this);
  unsigned int v8 = *(_DWORD *)(qword_1EBCFB460[0] + 8);
  if (!v8)
  {
    unsigned int v29 = 0;
    goto LABEL_24;
  }
  size_t v9 = v7;
  if (!v7)
  {
    int v11 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = 0;
  int v11 = 0;
  do
    int v11 = 33 * v11 + *((unsigned __int8 *)this + v10++);
  while (v7 != v10);
  char v12 = 0;
LABEL_15:
  unsigned int v13 = v8 - 1;
  uint64_t v14 = *(void *)qword_1EBCFB460[0];
  uint64_t v28 = v8;
  unsigned int v29 = v8;
  uint64_t v15 = *(void *)qword_1EBCFB460[0] + 8 * v8 + 8;
  int v16 = 1;
  int v17 = v11;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v14 + 8 * v18);
    if (v19 != (void *)-8)
    {
      if (!v19)
      {
        int v3 = v30;
        uint64_t v5 = (void **)&unk_1EBCFB000;
        goto LABEL_24;
      }
      if (*(_DWORD *)(v15 + 4 * v18) == v11
        && v9 == *v19
        && ((v12 & 1) != 0 || !memcmp(this, (char *)v19 + *(unsigned int *)(v6 + 20), v9)))
      {
        break;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = (int)v18;
  if (v18 == -1) {
    uint64_t v20 = v28;
  }
  int v3 = v30;
  uint64_t v5 = (void **)&unk_1EBCFB000;
LABEL_25:
  uint64_t v21 = v14 + 8 * v20;
  if (!atomic_load_explicit(qword_1EBCFB460, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB460, (void *(*)(void))sub_1CD0E0A10, (void (*)(void *))sub_1CD0E0A48);
  }
  if (v21 == *v5[140] + 8 * *((unsigned int *)v5[140] + 2))
  {
LABEL_29:
    if (atomic_load((unint64_t *)qword_1EBCFB478))
    {
      if (!atomic_load_explicit(qword_1EBCFB478, memory_order_acquire)) {
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB478, (void *(*)(void))sub_1CD864804, (void (*)(void *))sub_1CD864838);
      }
      atomic_ullong v24 = qword_1EBCFB478[0];
      char v25 = llvm::sys::DynamicLibrary::SearchOrder;
      if ((llvm::sys::DynamicLibrary::SearchOrder & 1) == 0)
      {
        int v26 = *(void **)(qword_1EBCFB478[0] + 24);
        if (v26) {
          goto LABEL_34;
        }
      }
      uint64_t v22 = sub_1CD0E099C((void ***)qword_1EBCFB478[0], (char *)this, llvm::sys::DynamicLibrary::SearchOrder);
      if (v22) {
        goto LABEL_40;
      }
      int v26 = *(void **)(v24 + 24);
      if (v26)
      {
LABEL_34:
        uint64_t v22 = dlsym(v26, (const char *)this);
        if (v22) {
          goto LABEL_40;
        }
        if ((v25 & 2) != 0)
        {
          uint64_t v22 = sub_1CD0E099C((void ***)v24, (char *)this, v25);
          goto LABEL_40;
        }
      }
    }
    uint64_t v22 = 0;
    goto LABEL_40;
  }
  uint64_t v22 = *(void **)(*(void *)v21 + 8);
LABEL_40:
  std::recursive_mutex::unlock(v3);
  return v22;
}

BOOL LLVMLoadLibraryPermanently(const char *a1)
{
  return llvm::sys::DynamicLibrary::getPermanentLibrary(a1, 0) == &llvm::sys::DynamicLibrary::Invalid;
}

void LLVMAddSymbol(char *__s, uint64_t a2)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  llvm::sys::DynamicLibrary::AddSymbol((unsigned __int8 *)__s, v4, a2);
}

void *sub_1CD0E099C(void ***a1, char *__symbol, char a3)
{
  if ((a3 & 4) != 0)
  {
    unsigned int v8 = *a1;
    size_t v9 = a1[1];
    while (v8 != v9)
    {
      uint64_t result = dlsym(*v8, __symbol);
      if (result) {
        return result;
      }
      ++v8;
    }
  }
  else
  {
    uint64_t v5 = *a1;
    for (unint64_t i = a1[1]; i != v5; --i)
    {
      uint64_t v6 = *(i - 1);
      uint64_t result = dlsym(v6, __symbol);
      if (result) {
        return result;
      }
    }
  }
  return 0;
}

void sub_1CD0E0A10()
{
}

uint64_t sub_1CD0E0A48(uint64_t result)
{
  if (result)
  {
    unsigned __int8 v1 = (void **)result;
    if (*(_DWORD *)(result + 12))
    {
      uint64_t v2 = *(unsigned int *)(result + 8);
      if (v2)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 8 * v2;
        do
        {
          uint64_t v5 = *(void *)((char *)*v1 + v3);
          if (v5 != -8 && v5 != 0) {
            MEMORY[0x1D25D9CD0]();
          }
          v3 += 8;
        }
        while (v4 != v3);
      }
    }
    free(*v1);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t llvm::sys::StrError@<X0>(void *a1@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = *__error();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (result)
  {
    __strerrbuf[0] = 0;
    strerror_r(result, __strerrbuf, 0x7CFuLL);
    return MEMORY[0x1D25D9630](a1, __strerrbuf);
  }
  return result;
}

void sub_1CD0E0B68(std::string *__s@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v5 = __s;
    uint64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size >= 7)
  {
    size_t v7 = (char *)v5 + size;
    unsigned int v8 = v5;
    do
    {
      size_t v9 = (char *)memchr(v8, 45, size - 6);
      if (!v9) {
        break;
      }
      if (*(_DWORD *)v9 == 1918985261 && *(_DWORD *)(v9 + 3) == 1852405618)
      {
        if (v9 == v7 || v9 - (char *)v5 == -1) {
          break;
        }
        std::string::resize(__s, v9 - (char *)v5 + 7, 0);
        sub_1CD0E26F8(&__p);
        if (__p.sysname[23] >= 0) {
          p_p = &__p;
        }
        else {
          p_p = *(utsname **)__p.sysname;
        }
        if (__p.sysname[23] >= 0) {
          std::string::size_type v12 = __p.sysname[23] & 0x7F;
        }
        else {
          std::string::size_type v12 = *(void *)&__p.sysname[8];
        }
        std::string::append(__s, p_p->sysname, v12);
        if (__p.sysname[23] < 0)
        {
          unsigned int v13 = *(void **)__p.sysname;
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      unsigned int v8 = (std::string *)(v9 + 1);
      uint64_t size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 7);
  }
  if ((v4 & 0x80) != 0)
  {
    uint64_t v14 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t v4 = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v14 = __s;
  }
  if (v4 >= 6)
  {
    uint64_t v15 = (char *)v14 + v4;
    int v16 = v14;
    do
    {
      int v17 = (char *)memchr(v16, 45, v4 - 5);
      if (!v17) {
        break;
      }
      if (*(_DWORD *)v17 == 1667329325 && *((_WORD *)v17 + 2) == 29551)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
        {
          std::string::resize(__s, v17 - (char *)v14, 0);
          std::string::append(__s, "-darwin");
          sub_1CD0E26F8(&__p);
          uint64_t v19 = __p.sysname[23] >= 0 ? &__p : *(utsname **)__p.sysname;
          std::string::size_type v20 = __p.sysname[23] >= 0 ? __p.sysname[23] & 0x7F : *(void *)&__p.sysname[8];
          std::string::append(__s, v19->sysname, v20);
          if (__p.sysname[23] < 0) {
            operator delete(*(void **)__p.sysname);
          }
        }
        break;
      }
      int v16 = (std::string *)(v17 + 1);
      uint64_t v4 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 6);
  }
  v25[0] = "x86_64-apple-darwin10.0";
  __int16 v27 = 259;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v25);
  int v21 = *(_DWORD *)&__p.sysname[36];
  if (__p.sysname[23] < 0) {
    operator delete(*(void **)__p.sysname);
  }
  if (v21 != 21) {
    goto LABEL_53;
  }
  *(_WORD *)&__p.sysname[32] = 260;
  *(void *)__p.sysname = __s;
  llvm::Triple::Triple((llvm::Triple *)v25, (const llvm::Twine *)&__p);
  if (v28 != 21 || llvm::Triple::getOSVersion((llvm::Triple *)v25) || uname(&__p) == -1)
  {
    if (SHIBYTE(v26) < 0)
    {
      unsigned int v13 = v25[0];
LABEL_52:
      operator delete(v13);
    }
LABEL_53:
    *(_OWORD *)a2 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&__s->__r_.__value_.__l + 2);
    __s->__r_.__value_.__l.__size_ = 0;
    __s->__r_.__value_.__r.__words[2] = 0;
    __s->__r_.__value_.__r.__words[0] = 0;
    return;
  }
  *((unsigned char *)&v24.__r_.__value_.__s + 23) = 3;
  LOWORD(v24.__r_.__value_.__l.__data_) = *(_WORD *)"aix";
  *(_WORD *)&v24.__r_.__value_.__s.__data_[2] = aAix[2];
  std::string::append(&v24, __p.version);
  std::string::push_back(&v24, 46);
  std::string::append(&v24, __p.release);
  std::string::append(&v24, ".0.0");
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v24;
  }
  else {
    uint64_t v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = *((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    uint64_t v23 = v24.__r_.__value_.__l.__size_;
  }
  llvm::Triple::setOSName((llvm::Triple *)v25, (uint64_t)v22, v23);
  if (SHIBYTE(v26) < 0)
  {
    sub_1CB8BDF7C(a2, v25[0], (unint64_t)v25[1]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(void *)(a2 + 16) = v26;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
}

const char *llvm::sys::detail::getHostCPUNameForPowerPC(unsigned __int8 *a1, uint64_t a2)
{
  if (a2 < 1) {
    return "generic";
  }
  unint64_t v2 = (unint64_t)&a1[a2];
  uint64_t v3 = &a1[a2];
  uint64_t v4 = "generic";
  while (1)
  {
    uint64_t v5 = *a1 == 10 ? a1 + 1 : a1;
    if ((unint64_t)v5 < v2) {
      break;
    }
    uint64_t v6 = v5;
LABEL_19:
    if ((unint64_t)v6 < v2)
    {
      uint64_t v9 = v3 - v6;
      while (*v6 != 10)
      {
        ++v6;
        if (!--v9)
        {
          uint64_t v6 = v3;
          break;
        }
      }
    }
    a1 = v6;
    if ((unint64_t)v6 >= v2) {
      return v4;
    }
  }
  uint64_t v6 = v5;
  if (*v5 != 99) {
    goto LABEL_19;
  }
  uint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >= v2) {
    goto LABEL_19;
  }
  if (*v6 != 112) {
    goto LABEL_19;
  }
  uint64_t v6 = v5 + 2;
  if ((unint64_t)(v5 + 2) >= v2) {
    goto LABEL_19;
  }
  if (*v6 != 117) {
    goto LABEL_19;
  }
  uint64_t v6 = v5 + 3;
  if ((unint64_t)(v5 + 3) >= v2) {
    goto LABEL_19;
  }
  uint64_t v7 = (uint64_t)&a1[(*a1 == 10) + 4];
  while (1)
  {
    int v8 = *v6;
    if (v8 != 9 && v8 != 32) {
      break;
    }
    ++v6;
    ++v7;
    if ((unint64_t)v6 >= v2)
    {
LABEL_17:
      uint64_t v6 = v3;
      goto LABEL_19;
    }
  }
  if (v8 != 58) {
    goto LABEL_19;
  }
  if ((unint64_t)++v6 >= v2) {
    goto LABEL_19;
  }
  while (1)
  {
    int v10 = *v6;
    if (v10 != 9 && v10 != 32) {
      break;
    }
    ++v6;
    ++v7;
    if ((unint64_t)v6 >= v2) {
      goto LABEL_17;
    }
  }
  std::string::size_type v12 = v6;
  if ((unint64_t)v6 < v2)
  {
    for (unint64_t i = (char *)(v6 + 1); ; ++i)
    {
      if (v10 <= 0x2Cu && ((1 << v10) & 0x100100000600) != 0)
      {
        std::string::size_type v12 = (unsigned __int8 *)(i - 1);
        goto LABEL_41;
      }
      if ((unint64_t)i >= v2) {
        break;
      }
      char v14 = *i;
      LOBYTE(v10) = v14;
    }
    std::string::size_type v12 = v3;
  }
LABEL_41:
  uint64_t v4 = "generic";
  switch((unint64_t)&v12[-v7])
  {
    case 2uLL:
      if (*(_WORD *)v6 == 13383)
      {
        uint64_t v4 = "g4";
      }
      else
      {
        if (*(_WORD *)v6 == 13639) {
          goto LABEL_107;
        }
        if (bswap32(*(unsigned __int16 *)v6) >> 16 == 16690) {
          uint64_t v4 = "a2";
        }
      }
      break;
    case 3uLL:
      unsigned int v15 = bswap32(*(unsigned __int16 *)v6) >> 16;
      if (v15 == 13872)
      {
        int v16 = v6[2] - 52;
      }
      else if (v15 >> 4 < 0x363)
      {
        int v16 = -1;
      }
      else
      {
        int v16 = 1;
      }
      if (!v16) {
        uint64_t v4 = "604";
      }
      break;
    case 4uLL:
      if (*(_DWORD *)v6 == 1697919030)
      {
        uint64_t v4 = "604e";
      }
      else if (*(_DWORD *)v6 == 808465463 || *(_DWORD *)v6 == 808530999 || *(_DWORD *)v6 == 926168119)
      {
        uint64_t v4 = "7400";
      }
      else
      {
        unsigned int v17 = bswap32(*(_DWORD *)v6);
        BOOL v18 = v17 >= 0x37343535;
        int v19 = v17 > 0x37343535;
        int v20 = !v18;
        if (v19 == v20) {
          uint64_t v4 = "7450";
        }
      }
      break;
    case 6uLL:
      if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 13394) {
        goto LABEL_92;
      }
      if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 13650)
      {
LABEL_107:
        uint64_t v4 = "g5";
      }
      else if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 13906)
      {
        uint64_t v4 = "pwr6";
      }
      else if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 14162)
      {
        uint64_t v4 = "pwr7";
      }
      else
      {
        if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 14418) {
          goto LABEL_105;
        }
        unsigned int v26 = 1347376965;
        unsigned int v27 = bswap32(*(_DWORD *)v6);
        if (v27 == 1347376965 && (v27 = bswap32(*((unsigned __int16 *)v6 + 2)) >> 16, unsigned int v26 = 21049, v27 == 21049))
        {
          int v28 = 0;
        }
        else if (v27 < v26)
        {
          int v28 = -1;
        }
        else
        {
          int v28 = 1;
        }
        if (!v28) {
          uint64_t v4 = "pwr9";
        }
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v6 == 1163349840 && *(_DWORD *)(v6 + 3) == 1161318981) {
        goto LABEL_105;
      }
      unsigned int v30 = 1347376965;
      unsigned int v31 = bswap32(*(_DWORD *)v6);
      if (v31 == 1347376965 && (unsigned int v30 = 1163014448, v31 = bswap32(*(_DWORD *)(v6 + 3)), v31 == 1163014448))
      {
        int v32 = 0;
      }
      else if (v31 < v30)
      {
        int v32 = -1;
      }
      else
      {
        int v32 = 1;
      }
      if (!v32) {
        uint64_t v4 = "pwr10";
      }
      break;
    case 8uLL:
      if (*(void *)v6 == 0x5846303739435050
        || ((unint64_t v33 = bswap64(*(void *)v6), v18 = v33 >= 0x5050433937304D50, v34 = v33 > 0x5050433937304D50, v18)
          ? (int v35 = 0)
          : (int v35 = 1),
            v34 == v35))
      {
LABEL_92:
        uint64_t v4 = "970";
      }
      break;
    case 9uLL:
      unint64_t v36 = bswap64(*(void *)v6);
      if (v36 == 0x504F574552384E56)
      {
        int v37 = v6[8] - 76;
      }
      else if (v36 < 0x504F574552384E56)
      {
        int v37 = -1;
      }
      else
      {
        int v37 = 1;
      }
      if (!v37) {
LABEL_105:
      }
        uint64_t v4 = "pwr8";
      break;
    default:
      break;
  }
  strlen(v4);
  return v4;
}

const char *llvm::sys::detail::getHostCPUNameForARM(uint64_t a1, uint64_t a2)
{
  v123[64] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v118 = a1;
  *((void *)&v118 + 1) = a2;
  long long v121 = v123;
  uint64_t v122 = 0x2000000000;
  llvm::StringRef::split(&v118, (uint64_t)&v121, "\n", 1uLL, -1, 1);
  uint64_t v2 = v122;
  uint64_t v3 = v121;
  if (!v122) {
    goto LABEL_35;
  }
  uint64_t v111 = v122;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v113 = 0;
  unint64_t v114 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v115 = 0;
  unint64_t v116 = 0;
  unint64_t v112 = (char *)v121;
  uint64_t v6 = v121;
  do
  {
    unint64_t v7 = v6[1];
    unint64_t v8 = v7 - 15;
    if (v7 >= 0xF)
    {
      uint64_t v9 = (void *)*v6;
      if (*(void *)*v6 == 0x6C706D6920555043 && *(void *)(*v6 + 7) == 0x7265746E656D656CLL)
      {
        size_t v119 = (unsigned __int8 *)v9 + 15;
        unint64_t v120 = v7 - 15;
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v119, "\t :", 3, 0);
        if (first_not_of >= v8) {
          unint64_t v12 = v7 - 15;
        }
        else {
          unint64_t v12 = first_not_of;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v113 = (_DWORD *)((char *)v9 + v12 + 15);
        unint64_t v114 = v8 - v12;
      }
    }
    else
    {
      if (v7 < 8) {
        goto LABEL_25;
      }
      uint64_t v9 = (void *)*v6;
    }
    if (*v9 == 0x6572617764726148)
    {
      size_t v119 = (unsigned __int8 *)(v9 + 1);
      unint64_t v120 = v7 - 8;
      unint64_t v13 = llvm::StringRef::find_first_not_of(&v119, "\t :", 3, 0);
      if (v13 >= v7 - 8) {
        unint64_t v14 = v7 - 8;
      }
      else {
        unint64_t v14 = v13;
      }
      uint64_t v5 = (char *)v9 + v14 + 8;
      unint64_t v4 = v7 - 8 - v14;
    }
    if (*v9 == 0x7472617020555043)
    {
      unint64_t v15 = v7 - 8;
      size_t v119 = (unsigned __int8 *)(v9 + 1);
      unint64_t v120 = v15;
      unint64_t v16 = llvm::StringRef::find_first_not_of(&v119, "\t :", 3, 0);
      if (v16 >= v15) {
        unint64_t v17 = v15;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v115 = (char *)v9 + v17 + 8;
      unint64_t v116 = v15 - v17;
    }
LABEL_25:
    v6 += 2;
    --v2;
  }
  while (v2);
  if (v114 != 4)
  {
    BOOL v18 = "generic";
    goto LABEL_37;
  }
  uint64_t v3 = v112;
  switch(*v113)
  {
    case 0x31347830:
      if (v4 >= 7)
      {
        uint64_t v23 = &v5[v4];
        BOOL v24 = *(_DWORD *)&v5[v4 - 7] == 944591693 && *(_DWORD *)&v5[v4 - 4] == 876165432;
        if (v24
          || ((int v25 = *(_DWORD *)(v23 - 7), v26 = *((_DWORD *)v23 - 1), v25 == 944591693)
            ? (BOOL v27 = v26 == 909719864)
            : (BOOL v27 = 0),
              v27))
        {
          BOOL v18 = "cortex-a53";
          goto LABEL_239;
        }
      }
      BOOL v18 = "generic";
      if (v116 != 5) {
        goto LABEL_238;
      }
      if (*(_DWORD *)v115 == 842627120 && v115[4] == 54)
      {
        BOOL v18 = "arm926ej-s";
      }
      else if (*(_DWORD *)v115 == 811759664 && v115[4] == 50)
      {
        BOOL v18 = "mpcore";
      }
      else if (*(_DWORD *)v115 == 862091312 && v115[4] == 54)
      {
        BOOL v18 = "arm1136j-s";
      }
      else if (*(_DWORD *)v115 == 895645744 && v115[4] == 54)
      {
        BOOL v18 = "arm1156t2-s";
      }
      else if (*(_DWORD *)v115 == 929200176 && v115[4] == 54)
      {
        BOOL v18 = "arm1176jz-s";
      }
      else if (*(_DWORD *)v115 == 811825200 && v115[4] == 56)
      {
        BOOL v18 = "cortex-a8";
      }
      else if (*(_DWORD *)v115 == 811825200 && v115[4] == 57)
      {
        BOOL v18 = "cortex-a9";
      }
      else if (*(_DWORD *)v115 == 811825200 && v115[4] == 102)
      {
        BOOL v18 = "cortex-a15";
      }
      else if (*(_DWORD *)v115 == 845379632 && v115[4] == 48)
      {
        BOOL v18 = "cortex-m0";
      }
      else if (*(_DWORD *)v115 == 845379632 && v115[4] == 51)
      {
        BOOL v18 = "cortex-m3";
      }
      else if (*(_DWORD *)v115 == 845379632 && v115[4] == 52)
      {
        BOOL v18 = "cortex-m4";
      }
      else if (*(_DWORD *)v115 == 845445168 && v115[4] == 50)
      {
        BOOL v18 = "cortex-m55";
      }
      else if (*(_DWORD *)v115 == 811890736 && v115[4] == 50)
      {
        BOOL v18 = "cortex-a34";
      }
      else
      {
        if (*(_DWORD *)v115 != 811890736 || v115[4] != 52)
        {
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 51)
          {
            BOOL v18 = "cortex-a53";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 55)
          {
            BOOL v18 = "cortex-a57";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 56)
          {
            BOOL v18 = "cortex-a72";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 57)
          {
            BOOL v18 = "cortex-a73";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 97)
          {
            BOOL v18 = "cortex-a75";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 != 811890736 || v115[4] != 98)
          {
            if (*(_DWORD *)v115 == 811890736 && v115[4] == 100)
            {
              BOOL v18 = "cortex-a77";
            }
            else if (*(_DWORD *)v115 == 878999600 && v115[4] == 49)
            {
              BOOL v18 = "cortex-a78";
            }
            else if (*(_DWORD *)v115 == 878999600 && v115[4] == 52)
            {
              BOOL v18 = "cortex-x1";
            }
            else if (*(_DWORD *)v115 == 878999600 && v115[4] == 99)
            {
              BOOL v18 = "cortex-x1c";
            }
            else if (*(_DWORD *)v115 == 811890736 && v115[4] == 99)
            {
              BOOL v18 = "neoverse-n1";
            }
            else
            {
              unsigned int v53 = bswap32(*(_DWORD *)v115);
              if (v53 == 813196340)
              {
                int v54 = v115[4] - 57;
              }
              else if (v53 < 0x30786434)
              {
                int v54 = -1;
              }
              else
              {
                int v54 = 1;
              }
              if (v54)
              {
                int v109 = *(_DWORD *)v115 ^ 0x34647830 | v115[4] ^ 0x30;
                uint64_t v110 = "neoverse-v1";
LABEL_328:
                if (!v109) {
                  BOOL v18 = v110;
                }
                goto LABEL_347;
              }
              BOOL v18 = "neoverse-n2";
            }
LABEL_347:
            uint64_t v3 = v112;
            goto LABEL_238;
          }
LABEL_320:
          BOOL v18 = "cortex-a76";
          goto LABEL_347;
        }
        BOOL v18 = "cortex-a35";
      }
LABEL_238:
      strlen(v18);
      goto LABEL_239;
    case 0x32347830:
    case 0x33347830:
      switch(v116)
      {
        case 4uLL:
          if (*(_DWORD *)v115 != 1717663792)
          {
            unsigned int v58 = bswap32(*(_DWORD *)v115);
            BOOL v59 = v58 >= 0x30786131;
            int v60 = v58 > 0x30786131;
            int v61 = !v59;
            if (v60 != v61) {
              goto LABEL_237;
            }
            goto LABEL_242;
          }
          break;
        case 6uLL:
          unsigned int v55 = 813183029;
          unsigned int v56 = bswap32(*(_DWORD *)v115);
          if (v56 == 813183029 && (v56 = bswap32(*((unsigned __int16 *)v115 + 2)) >> 16, unsigned int v55 = 12598, v56 == 12598))
          {
            int v57 = 0;
          }
          else if (v56 < v55)
          {
            int v57 = -1;
          }
          else
          {
            int v57 = 1;
          }
          if (v57) {
            goto LABEL_237;
          }
          break;
        case 5uLL:
          if ((*(_DWORD *)v115 != 825587760 || v115[4] != 54) && (*(_DWORD *)v115 != 1630566448 || v115[4] != 102))
          {
            unsigned int v21 = bswap32(*(_DWORD *)v115);
            if (v21 == 813183073)
            {
              int v22 = v115[4] - 49;
            }
            else if (v21 < 0x30783061)
            {
              int v22 = -1;
            }
            else
            {
              int v22 = 1;
            }
            if (v22) {
              goto LABEL_237;
            }
LABEL_242:
            BOOL v18 = "thunderxt88";
            goto LABEL_238;
          }
          break;
        default:
LABEL_237:
          BOOL v18 = "generic";
          goto LABEL_238;
      }
      BOOL v18 = "thunderx2t99";
      goto LABEL_238;
    case 0x36347830:
      BOOL v18 = "generic";
      if (v116 != 5) {
        goto LABEL_238;
      }
      int v62 = *(_DWORD *)v115 ^ 0x30307830 | v115[4] ^ 0x31;
      int v63 = "a64fx";
LABEL_185:
      if (!v62) {
        BOOL v18 = v63;
      }
      goto LABEL_238;
    case 0x65347830:
      BOOL v18 = "generic";
      if (v116 != 5) {
        goto LABEL_238;
      }
      int v62 = *(_DWORD *)v115 ^ 0x30307830 | v115[4] ^ 0x34;
      int v63 = "carmel";
      goto LABEL_185;
    case 0x38347830:
      BOOL v18 = "generic";
      if (v116 != 5) {
        goto LABEL_238;
      }
      int v62 = *(_DWORD *)v115 ^ 0x30647830 | v115[4] ^ 0x31;
      int v63 = "tsv110";
      goto LABEL_185;
    case 0x31357830:
      BOOL v18 = "generic";
      if (v116 == 5)
      {
        if (*(_DWORD *)v115 == 909146160 && v115[4] == 102)
        {
          BOOL v18 = "krait";
        }
        else
        {
          BOOL v65 = *(_DWORD *)v115 == 808613936 && v115[4] == 49;
          if (v65
            || (*(_DWORD *)v115 == 808613936 ? (BOOL v66 = v115[4] == 53) : (BOOL v66 = 0),
                v66 || (*(_DWORD *)v115 == 825391152 ? (BOOL v67 = v115[4] == 49) : (BOOL v67 = 0), v67)))
          {
            BOOL v18 = "kryo";
          }
          else
          {
            BOOL v68 = *(_DWORD *)v115 == 809007152 && v115[4] == 48;
            if (v68 || (*(_DWORD *)v115 == 809007152 ? (BOOL v69 = v115[4] == 49) : (BOOL v69 = 0), v69))
            {
              BOOL v18 = "cortex-a73";
            }
            else
            {
              if ((*(_DWORD *)v115 != 809007152 || v115[4] != 50) && (*(_DWORD *)v115 != 809007152 || v115[4] != 51))
              {
                if ((*(_DWORD *)v115 != 809007152 || v115[4] != 52) && (*(_DWORD *)v115 != 809007152 || v115[4] != 53))
                {
                  unsigned int v74 = bswap32(*(_DWORD *)v115);
                  if (v74 == 813196080)
                  {
                    int v75 = v115[4] - 48;
                  }
                  else if (v74 < 0x30786330)
                  {
                    int v75 = -1;
                  }
                  else
                  {
                    int v75 = 1;
                  }
                  if (v75)
                  {
                    int v109 = *(_DWORD *)v115 ^ 0x30637830 | v115[4] ^ 0x31;
                    uint64_t v110 = "saphira";
                    goto LABEL_328;
                  }
                  BOOL v18 = "falkor";
                  goto LABEL_347;
                }
                goto LABEL_320;
              }
              BOOL v18 = "cortex-a75";
            }
          }
        }
      }
      goto LABEL_238;
  }
  if (*v113 != 859142192)
  {
LABEL_35:
    BOOL v18 = "generic";
    goto LABEL_239;
  }
  int v77 = 0;
  uint64_t v78 = &v112[16 * v111];
  int v79 = (long long *)v112;
  while (2)
  {
    long long v117 = *v79;
    unint64_t v80 = *((void *)&v117 + 1) - 11;
    if (*((void *)&v117 + 1) < 0xBuLL) {
      goto LABEL_274;
    }
    if (*(void *)v117 != 0x6972617620555043 || *(void *)(v117 + 3) != 0x746E616972617620) {
      goto LABEL_274;
    }
    uint64_t v82 = v117 + 11;
    *(void *)&long long v117 = v117 + 11;
    *((void *)&v117 + 1) -= 11;
    unint64_t v83 = llvm::StringRef::find_first_not_of(&v117, "\t :", 3, 0);
    if (v83 >= v80) {
      unint64_t v84 = v80;
    }
    else {
      unint64_t v84 = v83;
    }
    size_t v119 = (unsigned __int8 *)(v82 + v84);
    unint64_t v120 = v80 - v84;
    unsigned int v85 = sub_1CD0AF898((uint64_t)&v119);
    unint64_t v86 = v120;
    if (!v120)
    {
      LODWORD(v92) = 0;
      BOOL v93 = 1;
      goto LABEL_272;
    }
    unint64_t v87 = 0;
    uint64_t v88 = v119;
    while (2)
    {
      int v89 = *v88;
      if ((v89 - 48) < 0xA)
      {
        int v90 = -48;
LABEL_257:
        unsigned int v91 = v90 + v89;
        if (v91 >= v85)
        {
          unint64_t v92 = v87;
          goto LABEL_269;
        }
        unint64_t v92 = v87 * v85 + v91;
        if (v92 / v85 < v87)
        {
          BOOL v93 = 1;
          goto LABEL_270;
        }
        ++v88;
        unint64_t v87 = v92;
        if (!--v86) {
          goto LABEL_269;
        }
        continue;
      }
      break;
    }
    if ((v89 - 97) < 0x1A)
    {
      int v90 = -87;
      goto LABEL_257;
    }
    if ((v89 - 65) <= 0x19)
    {
      int v90 = -55;
      goto LABEL_257;
    }
    unint64_t v92 = v87;
LABEL_269:
    BOOL v93 = v86 != 0;
LABEL_270:
    if (HIDWORD(v92)) {
      LODWORD(v92) = v77;
    }
LABEL_272:
    if (!v93) {
      int v77 = v92;
    }
LABEL_274:
    if (++v79 != (long long *)v78) {
      continue;
    }
    break;
  }
  int v94 = 0;
  uint64_t v95 = (long long *)v112;
  while (2)
  {
    long long v117 = *v95;
    unint64_t v96 = *((void *)&v117 + 1) - 8;
    if (*((void *)&v117 + 1) < 8uLL || *(void *)v117 != 0x7472617020555043) {
      goto LABEL_302;
    }
    uint64_t v97 = v117 + 8;
    *(void *)&long long v117 = v117 + 8;
    *((void *)&v117 + 1) -= 8;
    unint64_t v98 = llvm::StringRef::find_first_not_of(&v117, "\t :", 3, 0);
    if (v98 >= v96) {
      unint64_t v99 = v96;
    }
    else {
      unint64_t v99 = v98;
    }
    size_t v119 = (unsigned __int8 *)(v97 + v99);
    unint64_t v120 = v96 - v99;
    unsigned int v100 = sub_1CD0AF898((uint64_t)&v119);
    unint64_t v101 = v120;
    if (!v120)
    {
      LODWORD(v107) = 0;
      BOOL v108 = 1;
      goto LABEL_300;
    }
    unint64_t v102 = 0;
    int v103 = v119;
    while (2)
    {
      int v104 = *v103;
      if ((v104 - 48) < 0xA)
      {
        int v105 = -48;
LABEL_285:
        unsigned int v106 = v105 + v104;
        if (v106 >= v100)
        {
          unint64_t v107 = v102;
          goto LABEL_297;
        }
        unint64_t v107 = v102 * v100 + v106;
        if (v107 / v100 < v102)
        {
          BOOL v108 = 1;
          goto LABEL_298;
        }
        ++v103;
        unint64_t v102 = v107;
        if (!--v101) {
          goto LABEL_297;
        }
        continue;
      }
      break;
    }
    if ((v104 - 97) < 0x1A)
    {
      int v105 = -87;
      goto LABEL_285;
    }
    if ((v104 - 65) <= 0x19)
    {
      int v105 = -55;
      goto LABEL_285;
    }
    unint64_t v107 = v102;
LABEL_297:
    BOOL v108 = v101 != 0;
LABEL_298:
    if (HIDWORD(v107)) {
      LODWORD(v107) = v94;
    }
LABEL_300:
    if (!v108) {
      int v94 = v107;
    }
LABEL_302:
    if (++v95 != (long long *)v78) {
      continue;
    }
    break;
  }
  if ((v94 | (v77 << 12)) == 0x1003) {
    BOOL v18 = "exynos-m4";
  }
  else {
    BOOL v18 = "exynos-m3";
  }
LABEL_37:
  uint64_t v3 = v112;
LABEL_239:
  if (v3 != v123) {
    free(v3);
  }
  return v18;
}

const char *llvm::sys::detail::getHostCPUNameForS390x(uint64_t a1, uint64_t a2)
{
  v39[64] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = a2;
  int v37 = v39;
  uint64_t v38 = 0x2000000000;
  llvm::StringRef::split(&v33, (uint64_t)&v37, "\n", 1uLL, -1, 1);
  int v34 = v36;
  uint64_t v35 = 0x2000000000;
  uint64_t v2 = v38;
  if (!v38) {
    goto LABEL_51;
  }
  uint64_t v3 = (size_t *)((char *)v37 + 8);
  while (1)
  {
    unint64_t v4 = *v3;
    if (*v3 >= 8)
    {
      uint64_t v5 = (void *)*(v3 - 1);
      if (*v5 == 0x7365727574616566)
      {
        uint64_t v6 = memchr((void *)*(v3 - 1), 58, *v3);
        int64_t v7 = v6 - (unsigned char *)v5;
        if (v6 && v7 != -1) {
          break;
        }
      }
    }
    v3 += 2;
    if (!--v2) {
      goto LABEL_11;
    }
  }
  uint64_t v25 = v4 >= v7 + 1 ? v7 + 1 : v4;
  v32[0] = (char *)v5 + v25;
  v32[1] = v4 - v25;
  llvm::StringRef::split((char *)v32, (uint64_t)&v34, 32, -1, 1);
  uint64_t v26 = v35;
  if (v35)
  {
    LOBYTE(v2) = 0;
    BOOL v27 = (char *)v34 + 8;
    do
    {
      BOOL v28 = *v27 == 2 && *(_WORD *)*(v27 - 1) == 30838;
      LOBYTE(v2) = v28 | v2;
      v27 += 2;
      --v26;
    }
    while (v26);
  }
  else
  {
    LOBYTE(v2) = 0;
  }
LABEL_11:
  uint64_t v9 = v38;
  if (!v38) {
    goto LABEL_51;
  }
  int v10 = (uint64_t *)v37;
  int v11 = "generic";
  do
  {
    unint64_t v12 = v10[1];
    if (v12 >= 0xA)
    {
      unint64_t v13 = (void *)*v10;
      if (*(void *)*v10 == 0x6F737365636F7270 && *(_WORD *)(*v10 + 8) == 8306) {
        break;
      }
    }
    v10 += 2;
    --v9;
  }
  while (v9);
  uint64_t v15 = llvm::StringRef::find(v10, "machine = ", 0xAuLL, 0);
  if (v15 == -1 || (v12 >= v15 + 10 ? (uint64_t v16 = v15 + 10) : (uint64_t v16 = v12), v12 == v16))
  {
LABEL_51:
    int v11 = "generic";
  }
  else
  {
    unint64_t v17 = 0;
    BOOL v18 = (unsigned __int8 *)v13 + v16;
    unint64_t v19 = v16 - v12;
    int v11 = "generic";
    do
    {
      int v20 = *v18;
      if ((v20 - 48) >= 0xA)
      {
        if ((v20 - 97) >= 0x1A)
        {
          if ((v20 - 65) > 0x19) {
            goto LABEL_52;
          }
          int v21 = -55;
        }
        else
        {
          int v21 = -87;
        }
      }
      else
      {
        int v21 = -48;
      }
      unsigned int v22 = v21 + v20;
      if (v22 > 9) {
        goto LABEL_52;
      }
      unint64_t v23 = 10 * v17 + v22;
      if (v17 > v23 / 0xA) {
        goto LABEL_52;
      }
      ++v18;
      unint64_t v17 = v23;
    }
    while (!__CFADD__(v19++, 1));
    if (HIDWORD(v23)) {
      goto LABEL_51;
    }
    if ((int)v23 <= 2826)
    {
      char v29 = v23 - 16;
      if ((v23 - 2064) <= 0x22)
      {
        if (((1 << v29) & 0x140500005) != 0) {
          goto LABEL_51;
        }
        if (((1 << v29) & 0x600000000) != 0)
        {
          int v11 = "z10";
          goto LABEL_52;
        }
      }
      if ((v23 - 2817) < 2)
      {
        int v11 = "z196";
        goto LABEL_52;
      }
      goto LABEL_74;
    }
    if ((int)v23 > 3905)
    {
      if ((v23 - 3906) < 2)
      {
        unsigned int v31 = "z14";
      }
      else
      {
        if ((v23 - 8561) >= 2)
        {
LABEL_74:
          if (v2) {
            int v11 = "arch14";
          }
          else {
            int v11 = "zEC12";
          }
          goto LABEL_52;
        }
        unsigned int v31 = "z15";
      }
    }
    else
    {
      if ((v23 - 2827) < 2)
      {
        int v11 = "zEC12";
        goto LABEL_52;
      }
      if ((v23 - 2964) >= 2) {
        goto LABEL_74;
      }
      unsigned int v31 = "z13";
    }
    if (v2) {
      int v11 = v31;
    }
    else {
      int v11 = "zEC12";
    }
  }
LABEL_52:
  if (v34 != v36) {
    free(v34);
  }
  if (v37 != v39) {
    free(v37);
  }
  return v11;
}

const char *llvm::sys::detail::getHostCPUNameForBPF(llvm::sys::detail *this)
{
  return "generic";
}

size_t sub_1CD0E26F8(unsigned char *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  size_t result = uname(&v7);
  if (result)
  {
    a1[23] = 0;
    *a1 = 0;
    return result;
  }
  size_t result = strlen(v7.release);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v3 = result;
  if (result >= 0x17)
  {
    uint64_t v4 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v4 = result | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *((void *)a1 + 1) = v3;
    *((void *)a1 + 2) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
    a1 = v6;
  }
  else
  {
    a1[23] = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  size_t result = (size_t)memcpy(a1, v7.release, v3);
LABEL_11:
  a1[v3] = 0;
  return result;
}

unint64_t llvm::sys::path::begin@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  v23[0] = result;
  v23[1] = a2;
  if (!a2)
  {
    uint64_t v10 = 0;
    goto LABEL_50;
  }
  if (a3 >= 2 && a2 != 1)
  {
    int v8 = *(char *)result;
    uint64_t v9 = *(unsigned __int8 *)result;
    if (v8 < 0)
    {
      size_t result = __maskrune(v9, 0x100uLL);
      if (!result) {
        goto LABEL_11;
      }
    }
    else
    {
      size_t result = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v9 + 60) & 0x100;
      if (!result) {
        goto LABEL_11;
      }
    }
    if (v5[1] == 58)
    {
      uint64_t v10 = 2;
      goto LABEL_50;
    }
  }
LABEL_11:
  int v11 = *v5;
  if (a2 >= 3)
  {
    BOOL v12 = a3 > 1 && v11 == 92;
    BOOL v13 = v12;
    BOOL v14 = v11 != 47 && !v13;
    if (!v14 && v11 == v5[1])
    {
      int v15 = v5[2];
      BOOL v16 = a3 > 1 && v15 == 92;
      BOOL v17 = v16;
      if (v15 != 47 && !v17)
      {
        unint64_t v18 = 2;
LABEL_41:
        if (a3 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = 2;
        }
        if (a3 <= 1) {
          unsigned int v22 = "/";
        }
        else {
          unsigned int v22 = "\\/";
        }
        size_t result = llvm::StringRef::find_first_of(v23, (unsigned __int8 *)v22, v21, v18);
        if (a2 >= result) {
          uint64_t v10 = result;
        }
        else {
          uint64_t v10 = a2;
        }
        goto LABEL_50;
      }
    }
  }
  BOOL v20 = a3 > 1 && v11 == 92;
  uint64_t v10 = 1;
  if (v11 != 47 && !v20)
  {
    unint64_t v18 = 0;
    goto LABEL_41;
  }
LABEL_50:
  *(void *)(a4 + 16) = v5;
  *(void *)(a4 + 24) = v10;
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = a3;
  return result;
}

uint64_t llvm::sys::path::end@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 32) = a2;
  return result;
}

uint64_t *llvm::sys::path::const_iterator::operator++(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  unint64_t v3 = a1[3];
  unint64_t v4 = a1[4] + v3;
  a1[4] = v4;
  unint64_t v5 = a1[1];
  if (v4 == v5)
  {
    void *v2 = 0;
    a1[3] = 0;
    return a1;
  }
  BOOL v9 = v3 >= 3
    && ((v6 = (unsigned __int8 *)a1[2], int v7 = *v6, v7 == 47)
     || (v7 == 92 ? (BOOL v8 = *((_DWORD *)a1 + 10) >= 2u) : (BOOL v8 = 0), v8))
    && v6[1] == v7
    && (int v26 = v6[2], v26 != 47)
    && (v26 != 92 || *((_DWORD *)a1 + 10) < 2u);
  uint64_t v10 = *a1;
  int v11 = *(unsigned __int8 *)(*a1 + v4);
  if (v11 != 47)
  {
    unsigned int v12 = *((_DWORD *)a1 + 10);
    if (v11 != 92 || v12 < 2) {
      goto LABEL_32;
    }
  }
  if (!v9)
  {
    unsigned int v12 = *((_DWORD *)a1 + 10);
    if (v12 <= 1 || !v3 || *(unsigned char *)(*v2 + v3 - 1) != 58)
    {
      while (1)
      {
        int v13 = *(unsigned __int8 *)(v10 + v4);
        BOOL v14 = v12 > 1 && v13 == 92;
        BOOL v15 = v14;
        if (v13 != 47 && !v15) {
          break;
        }
        a1[4] = ++v4;
        if (v5 == v4)
        {
          if (v3 != 1 || (unint64_t v4 = v5, *(unsigned char *)*v2 != 47))
          {
            a1[4] = v5 - 1;
            BOOL v17 = ".";
            BOOL v18 = 1;
            goto LABEL_26;
          }
          break;
        }
      }
LABEL_32:
      if (v12 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = 2;
      }
      if (v12 <= 1) {
        uint64_t v21 = "/";
      }
      else {
        uint64_t v21 = "\\/";
      }
      unint64_t first_of = llvm::StringRef::find_first_of(a1, (unsigned __int8 *)v21, v20, v4);
      if (v5 >= v4) {
        unint64_t v23 = v4;
      }
      else {
        unint64_t v23 = v5;
      }
      if (v23 <= first_of) {
        unint64_t v24 = first_of;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v5 < v24) {
        unint64_t v24 = v5;
      }
      a1[2] = v10 + v23;
      a1[3] = v24 - v23;
      return a1;
    }
  }
  if (v5 >= v4) {
    unint64_t v28 = v4;
  }
  else {
    unint64_t v28 = a1[1];
  }
  BOOL v17 = (const char *)(v10 + v28);
  BOOL v18 = v5 > v4;
LABEL_26:
  a1[2] = (uint64_t)v17;
  a1[3] = v18;
  return a1;
}

BOOL llvm::sys::path::is_separator(llvm::sys::path *this, unsigned int a2)
{
  BOOL v3 = this == 92 && a2 > 1;
  return this == 47 || v3;
}

BOOL llvm::sys::path::const_iterator::operator==(void *a1, void *a2)
{
  return *a1 == *a2 && a1[4] == a2[4];
}

uint64_t llvm::sys::path::rbegin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 32) = a2;
  *(_DWORD *)(a4 + 40) = a3;
  return llvm::sys::path::reverse_iterator::operator++(a4);
}

uint64_t llvm::sys::path::reverse_iterator::operator++(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  unint64_t v5 = sub_1CD0E2CC8(*(unsigned __int8 **)a1, v3, v4);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    unint64_t v7 = v5 + 1;
    unint64_t v8 = *(void *)(a1 + 32);
    while (v7 != v8)
    {
      int v9 = v2[v8 - 1];
      BOOL v11 = v4 > 1 && v9 == 92;
      if (v9 != 47 && !v11)
      {
        unint64_t v7 = v8;
        break;
      }
      if (!--v8) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    unint64_t v7 = 0;
  }
  if (v3) {
    BOOL v13 = v6 == v3;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13
    && ((int v14 = v2[v3 - 1], v14 == 47) || v4 >= 2 && v14 == 92)
    && (v5 != -1 ? (BOOL v15 = v7 - 1 > v5) : (BOOL v15 = 1), v15))
  {
    *(void *)(a1 + 32) = v3 - 1;
    *(void *)(a1 + 16) = ".";
    *(void *)(a1 + 24) = 1;
  }
  else
  {
    if (v3 >= v7) {
      unint64_t v16 = v7;
    }
    else {
      unint64_t v16 = v3;
    }
    unint64_t v17 = sub_1CD0E2DD4(v2, v16, v4);
    if (v3 >= v17) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = v3;
    }
    if (v18 <= v7) {
      unint64_t v19 = v7;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v3 < v19) {
      unint64_t v19 = v3;
    }
    *(void *)(a1 + 16) = &v2[v18];
    *(void *)(a1 + 24) = v19 - v18;
    *(void *)(a1 + 32) = v17;
  }
  return a1;
}

uint64_t llvm::sys::path::rend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 40) = 0;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t sub_1CD0E2CC8(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  v18[0] = a1;
  v18[1] = a2;
  if (a3 >= 2 && a2 >= 3 && a1[1] == 58)
  {
    int v3 = a1[2];
    uint64_t v4 = 2;
    if (v3 == 47 || v3 == 92) {
      return v4;
    }
  }
  if (a2 < 4)
  {
    if (!a2) {
      return -1;
    }
    int v5 = *a1;
  }
  else
  {
    int v5 = *a1;
    BOOL v7 = a3 > 1 && v5 == 92;
    BOOL v8 = v5 != 47 && !v7;
    if (!v8 && v5 == a1[1])
    {
      int v9 = a1[2];
      BOOL v10 = a3 > 1 && v9 == 92;
      BOOL v11 = v10;
      if (v9 != 47 && !v11)
      {
        BOOL v12 = a3 > 1;
        if (a3 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = 2;
        }
        if (v12) {
          int v14 = "\\/";
        }
        else {
          int v14 = "/";
        }
        return llvm::StringRef::find_first_of(v18, (unsigned __int8 *)v14, v13, 2uLL);
      }
    }
  }
  uint64_t v4 = 0;
  BOOL v16 = a3 > 1 && v5 == 92;
  if (v5 != 47 && !v16) {
    return -1;
  }
  return v4;
}

unint64_t sub_1CD0E2DD4(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  v17[0] = a1;
  v17[1] = a2;
  if (a2)
  {
    unint64_t v6 = a2 - 1;
    int v7 = a1[a2 - 1];
    if (v7 == 47 || a3 >= 2 && v7 == 92) {
      return v6;
    }
  }
  else
  {
    unint64_t v6 = -1;
  }
  if (a3 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 2;
  }
  if (a3 <= 1) {
    int v9 = "/";
  }
  else {
    int v9 = "\\/";
  }
  uint64_t last_of = llvm::StringRef::find_last_of(v17, (unsigned __int8 *)v9, v8, v6);
  if (a3 >= 2 && last_of == -1)
  {
    if (a2 >= a2 - 2) {
      unint64_t v11 = a2 - 2;
    }
    else {
      unint64_t v11 = a2;
    }
    while (v11)
    {
      uint64_t last_of = v11 - 1;
      int v12 = a1[--v11];
      if (v12 == 58) {
        goto LABEL_20;
      }
    }
    return 0;
  }
LABEL_20:
  if (last_of == -1) {
    return 0;
  }
  if (last_of != 1) {
    return last_of + 1;
  }
  unint64_t v6 = 0;
  int v13 = *a1;
  BOOL v14 = a3 > 1 && v13 == 92;
  BOOL v15 = v14;
  if (v13 != 47 && !v15) {
    return last_of + 1;
  }
  return v6;
}

BOOL llvm::sys::path::reverse_iterator::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && (size_t v2 = *(void *)(a1 + 24), v2 == *(void *)(a2 + 24))
    && (!v2 || !memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v2)))
  {
    return *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::sys::path::root_path(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v5 = a1;
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  long long v18 = v21;
  long long v19 = v22;
  long long v20 = v23;
  if ((void)v21 == v5 && (void)v23 == a2) {
    return 0;
  }
  if (*((void *)&v22 + 1) >= 3uLL)
  {
    int v13 = *(unsigned __int8 *)v22;
    if (v13 == 47 || (BOOL v7 = 0, a3 >= 2) && v13 == 92) {
      BOOL v7 = *(unsigned __int8 *)(v22 + 1) == v13;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  if (a3 >= 2)
  {
    if (*((void *)&v22 + 1)) {
      BOOL v8 = *(unsigned __int8 *)(v22 + *((void *)&v22 + 1) - 1) == 58;
    }
    else {
      BOOL v8 = 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  if (v7 || v8)
  {
    llvm::sys::path::const_iterator::operator++((uint64_t *)&v18);
    if ((void)v18 == v5 && (void)v20 == a2) {
      return v22;
    }
    int v14 = *(unsigned __int8 *)v19;
    BOOL v15 = a3 > 1 && v14 == 92;
    BOOL v16 = v15;
    if (v14 != 47 && !v16) {
      return v22;
    }
  }
  else
  {
    int v9 = *(unsigned __int8 *)v22;
    if (a3 > 1 && v9 == 92 || v9 == 47) {
      return v22;
    }
    else {
      return 0;
    }
  }
  return v5;
}

unsigned __int8 *llvm::sys::path::root_name(unint64_t a1, unint64_t a2, unsigned int a3)
{
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v11);
  if (v11 == a1 && v14 == a2) {
    return 0;
  }
  if (v13 < 3)
  {
    BOOL v8 = 0;
  }
  else
  {
    int v7 = *v12;
    if (v7 == 47 || (BOOL v8 = 0, a3 >= 2) && v7 == 92) {
      BOOL v8 = v12[1] == v7;
    }
  }
  BOOL v9 = a3 >= 2 && v13 && v12[v13 - 1] == 58;
  if (v8 || v9) {
    return v12;
  }
  else {
    return 0;
  }
}

uint64_t llvm::sys::path::root_directory(unint64_t a1, unint64_t a2, unsigned int a3)
{
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v22);
  long long v19 = v22;
  long long v20 = v23;
  long long v21 = v24;
  if ((void)v22 == a1 && (void)v24 == a2) {
    return 0;
  }
  if (*((void *)&v23 + 1) >= 3uLL)
  {
    int v13 = *(unsigned __int8 *)v23;
    if (v13 == 47 || (BOOL v7 = 0, a3 >= 2) && v13 == 92) {
      BOOL v7 = *(unsigned __int8 *)(v23 + 1) == v13;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  if (a3 >= 2)
  {
    if (*((void *)&v23 + 1)) {
      BOOL v8 = *(unsigned __int8 *)(v23 + *((void *)&v23 + 1) - 1) == 58;
    }
    else {
      BOOL v8 = 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  if (!v7 && !v8) {
    goto LABEL_10;
  }
  BOOL v18 = v7;
  llvm::sys::path::const_iterator::operator++((uint64_t *)&v19);
  LOBYTE(v7) = v18;
  if ((void)v19 == a1 && (void)v21 == a2) {
    goto LABEL_10;
  }
  uint64_t result = v20;
  int v14 = *(unsigned __int8 *)v20;
  BOOL v15 = a3 > 1 && v14 == 92;
  BOOL v16 = v15;
  if (v14 != 47 && !v16)
  {
LABEL_10:
    if (!v7)
    {
      int v9 = *(unsigned __int8 *)v23;
      if (a3 > 1 && v9 == 92 || v9 == 47) {
        return v23;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  return result;
}

void llvm::sys::path::append(void *a1, llvm::Twine *a2, const char **a3, void **a4, uint64_t a5, uint64_t a6)
{
  v67[4] = *MEMORY[0x1E4F143B8];
  BOOL v65 = (char *)v67;
  long long v66 = xmmword_1CDC7F9D0;
  int v62 = v64;
  long long v63 = xmmword_1CDC7F9D0;
  uint64_t v11 = v61;
  BOOL v59 = v61;
  long long v60 = xmmword_1CDC7F9D0;
  unsigned int v56 = v58;
  long long v57 = xmmword_1CDC7F9D0;
  unsigned int v53 = v55;
  uint64_t v54 = 0x400000000;
  unsigned int v12 = *((unsigned __int8 *)a3 + 32);
  if (v12 >= 2)
  {
    if (*((unsigned char *)a3 + 33) == 1)
    {
      switch(v12)
      {
        case 3u:
          BOOL v15 = *a3;
          if (*a3) {
            size_t v14 = strlen(*a3);
          }
          else {
            size_t v14 = 0;
          }
          unsigned int v13 = 0;
          goto LABEL_9;
        case 5u:
          unsigned int v13 = 0;
          BOOL v15 = *a3;
          size_t v14 = (size_t)a3[1];
LABEL_9:
          BOOL v16 = (const char **)((char *)v53 + 16 * v13);
          *BOOL v16 = v15;
          v16[1] = (const char *)v14;
          unsigned int v17 = v54 + 1;
          LODWORD(v54) = v54 + 1;
          goto LABEL_10;
        case 4u:
          unsigned int v13 = 0;
          char v38 = (*a3)[23];
          if (v38 >= 0) {
            BOOL v15 = *a3;
          }
          else {
            BOOL v15 = *(const char **)*a3;
          }
          if (v38 >= 0) {
            size_t v14 = v38 & 0x7F;
          }
          else {
            size_t v14 = *((void *)*a3 + 1);
          }
          goto LABEL_9;
      }
    }
    llvm::Twine::toVector((uint64_t)a3, (uint64_t)&v65);
    BOOL v15 = v65;
    size_t v14 = v66;
    unsigned int v13 = v54;
    goto LABEL_9;
  }
  unsigned int v17 = 0;
LABEL_10:
  unsigned int v18 = *((unsigned __int8 *)a4 + 32);
  if (v18 < 2) {
    goto LABEL_11;
  }
  if (*((unsigned char *)a4 + 33) != 1)
  {
LABEL_96:
    llvm::Twine::toVector((uint64_t)a4, (uint64_t)&v62);
    int v40 = v62;
    size_t v39 = v63;
    unsigned int v17 = v54;
    goto LABEL_82;
  }
  if (v18 == 3)
  {
    int v40 = (const char *)*a4;
    if (*a4) {
      size_t v39 = strlen((const char *)*a4);
    }
    else {
      size_t v39 = 0;
    }
    goto LABEL_82;
  }
  if (v18 != 5)
  {
    if (v18 == 4)
    {
      char v45 = *((unsigned char *)*a4 + 23);
      if (v45 >= 0) {
        int v40 = (const char *)*a4;
      }
      else {
        int v40 = (const char *)**a4;
      }
      if (v45 >= 0) {
        size_t v39 = v45 & 0x7F;
      }
      else {
        size_t v39 = (*a4)[1];
      }
      goto LABEL_82;
    }
    goto LABEL_96;
  }
  int v40 = (const char *)*a4;
  size_t v39 = (size_t)a4[1];
LABEL_82:
  if (v17 >= HIDWORD(v54)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v41 = (const char **)((char *)v53 + 16 * v17);
  *uint64_t v41 = v40;
  v41[1] = (const char *)v39;
  unsigned int v17 = v54 + 1;
  LODWORD(v54) = v54 + 1;
LABEL_11:
  if (*(unsigned __int8 *)(a5 + 32) >= 2u)
  {
    uint64_t v43 = sub_1CC229614((void **)a5, (uint64_t)&v59);
    if (v54 >= HIDWORD(v54)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v44 = (const char **)((char *)v53 + 16 * v54);
    *uint64_t v44 = v43;
    v44[1] = v42;
    unsigned int v17 = v54 + 1;
    LODWORD(v54) = v54 + 1;
  }
  if (*(unsigned __int8 *)(a6 + 32) >= 2u)
  {
    uint64_t v47 = sub_1CC229614((void **)a6, (uint64_t)&v56);
    if (v54 >= HIDWORD(v54)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v48 = (const char **)((char *)v53 + 16 * v54);
    *uint64_t v48 = v47;
    v48[1] = v46;
    unsigned int v17 = v54 + 1;
    LODWORD(v54) = v54 + 1;
  }
  long long v19 = (const void **)v53;
  if (v17)
  {
    if (a2 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = 2;
    }
    long long v21 = "/";
    if (a2 > 1) {
      long long v21 = "\\/";
    }
    uint64_t v49 = (unsigned __int8 *)v21;
    uint64_t v50 = v20;
    uint64_t v22 = a1[1];
    uint64_t v23 = 16 * v17;
    do
    {
      if (!v22
        || ((int v24 = *(unsigned __int8 *)(v22 + *a1 - 1), a2 > 1) ? (v25 = v24 == 92) : (v25 = 0),
            !v25 ? (int v26 = 0) : (int v26 = 1),
            v24 != 47 ? (BOOL v27 = v26 == 0) : (BOOL v27 = 0),
            v27))
      {
        long long v33 = (const char *)v19[1];
        if (!v33 || (int v34 = *(unsigned __int8 *)*v19, v34 != 47) && (a2 < 2 || v34 != 92))
        {
          if (v22)
          {
            __int16 v52 = 261;
            v51[0] = (const char *)*v19;
            v51[1] = v33;
            BOOL has_root_name = llvm::sys::path::has_root_name(v51, a2);
            uint64_t v22 = a1[1];
            if (!has_root_name)
            {
              if ((unint64_t)(v22 + 1) > a1[2]) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              if (a2 <= 1) {
                int v36 = 1;
              }
              else {
                int v36 = (int)a2;
              }
              if (v36 == 3) {
                char v37 = 92;
              }
              else {
                char v37 = 47;
              }
              *(unsigned char *)(*a1 + v22) = v37;
              uint64_t v22 = a1[1] + 1;
              a1[1] = v22;
            }
          }
        }
        size_t v32 = (size_t)v19[1];
        if (a1[2] < v32 + v22) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v32)
        {
          memcpy((void *)(*a1 + v22), *v19, v32);
          uint64_t v22 = a1[1];
        }
      }
      else
      {
        unint64_t v28 = v11;
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(v19, v49, v50, 0);
        unsigned int v30 = (unsigned __int8 *)v19[1];
        if ((unint64_t)v30 >= first_not_of) {
          unint64_t v31 = first_not_of;
        }
        else {
          unint64_t v31 = (unint64_t)v19[1];
        }
        size_t v32 = (size_t)&v30[-v31];
        if (a1[2] < (unint64_t)&v30[v22 - v31]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if ((unint64_t)v30 > first_not_of)
        {
          memcpy((void *)(*a1 + v22), (char *)*v19 + v31, v32);
          uint64_t v22 = a1[1];
        }
        uint64_t v11 = v28;
      }
      v22 += v32;
      a1[1] = v22;
      v19 += 2;
      v23 -= 16;
    }
    while (v23);
    long long v19 = (const void **)v53;
  }
  if (v19 != (const void **)v55) {
    free(v19);
  }
  if (v56 != v58) {
    free(v56);
  }
  if (v59 != v11) {
    free(v59);
  }
  if (v62 != v64) {
    free(v62);
  }
  if (v65 != (char *)v67) {
    free(v65);
  }
}

BOOL llvm::sys::path::has_root_name(const char **this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v11[16] = *MEMORY[0x1E4F143B8];
  int v9 = v11;
  long long v10 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    switch(*((unsigned char *)this + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v4 = (void *)*this;
        if (*this) {
          unint64_t v3 = strlen(*this);
        }
        else {
          unint64_t v3 = 0;
        }
        break;
      case 4:
        char v8 = (*this)[23];
        if (v8 >= 0) {
          uint64_t v4 = (void *)*this;
        }
        else {
          uint64_t v4 = *(void **)*this;
        }
        if (v8 >= 0) {
          unint64_t v3 = v8 & 0x7F;
        }
        else {
          unint64_t v3 = *((void *)*this + 1);
        }
        break;
      case 5:
        uint64_t v4 = (void *)*this;
        unint64_t v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    uint64_t v4 = v9;
    unint64_t v3 = v10;
  }
  llvm::sys::path::root_name((unint64_t)v4, v3, v2);
  uint64_t v6 = v5;
  if (v9 != v11) {
    free(v9);
  }
  return v6 != 0;
}

void llvm::sys::path::append(void *a1, const char **a2, void **a3, uint64_t a4, uint64_t a5)
{
}

unsigned __int8 *llvm::sys::path::parent_path(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  if (sub_1CD0E3AC0(a1, a2, a3) == -1) {
    return 0;
  }
  else {
    return a1;
  }
}

unint64_t sub_1CD0E3AC0(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6 = sub_1CD0E2DD4(a1, a2, a3);
  unint64_t v7 = v6;
  if (a2)
  {
    int v8 = a1[v6];
    BOOL v10 = a3 > 1 && v8 == 92;
    int v11 = v8 == 47 || v10;
  }
  else
  {
    int v11 = 0;
  }
  for (unint64_t i = sub_1CD0E2CC8(a1, a2, a3); v7; --v7)
  {
    if (i != -1 && v7 <= i) {
      break;
    }
    int v13 = a1[v7 - 1];
    BOOL v14 = a3 > 1 && v13 == 92;
    BOOL v15 = v14;
    if (v13 != 47 && !v15) {
      break;
    }
  }
  if (v7 == i) {
    int v17 = v11;
  }
  else {
    int v17 = 1;
  }
  if (v17) {
    return v7;
  }
  else {
    return i + 1;
  }
}

passwd *llvm::sys::path::home_directory(uint64_t a1)
{
  pw_dir = getenv("HOME");
  if (!pw_dir)
  {
    uid_t v7 = getuid();
    uint64_t result = getpwuid(v7);
    if (!result) {
      return result;
    }
    pw_dir = result->pw_dir;
    if (!pw_dir) {
      return 0;
    }
  }
  *(void *)(a1 + 8) = 0;
  size_t v3 = strlen(pw_dir);
  size_t v4 = v3;
  if (*(void *)(a1 + 16) < v3) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v5 = 0;
  if (v3)
  {
    memcpy(*(void **)a1, pw_dir, v3);
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v5 + v4;
  return (passwd *)1;
}

uint64_t llvm::sys::path::filename(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v7 = a2;
  int v8 = a3;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v4);
  return v5;
}

uint64_t llvm::sys::path::stem(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v9 = a2;
  int v10 = a3;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v6);
  uint64_t result = v7;
  uint64_t v4 = v8;
  do
  {
    if (!v4) {
      break;
    }
    int v5 = *(unsigned __int8 *)(v7 + v4-- - 1);
  }
  while (v5 != 46);
  return result;
}

char *llvm::sys::path::extension(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v10 = a2;
  int v11 = a3;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v7);
  unint64_t v3 = v9;
  do
  {
    if (!v3) {
      return 0;
    }
    unint64_t v4 = v3 - 1;
    int v5 = *((unsigned __int8 *)v8 + --v3);
  }
  while (v5 != 46);
  if (v9 == 2)
  {
    if (*v8 == 11822) {
      return 0;
    }
  }
  else if (v9 == 1 && *(unsigned char *)v8 == 46)
  {
    return 0;
  }
  if (v9 < v4) {
    unint64_t v4 = v9;
  }
  return (char *)v8 + v4;
}

const char *llvm::sys::path::get_separator(llvm::sys::path *this)
{
  if (this <= 1) {
    int v1 = 1;
  }
  else {
    int v1 = (int)this;
  }
  if (v1 == 3) {
    return "\\"";
  }
  else {
    return "/";
  }
}

BOOL llvm::sys::path::has_root_directory(const char **this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v11[16] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  long long v10 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    switch(*((unsigned char *)this + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v4 = (void *)*this;
        if (*this) {
          unint64_t v3 = strlen(*this);
        }
        else {
          unint64_t v3 = 0;
        }
        break;
      case 4:
        char v8 = (*this)[23];
        if (v8 >= 0) {
          unint64_t v4 = (void *)*this;
        }
        else {
          unint64_t v4 = *(void **)*this;
        }
        if (v8 >= 0) {
          unint64_t v3 = v8 & 0x7F;
        }
        else {
          unint64_t v3 = *((void *)*this + 1);
        }
        break;
      case 5:
        unint64_t v4 = (void *)*this;
        unint64_t v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    unint64_t v4 = v9;
    unint64_t v3 = v10;
  }
  llvm::sys::path::root_directory((unint64_t)v4, v3, v2);
  uint64_t v6 = v5;
  if (v9 != v11) {
    free(v9);
  }
  return v6 != 0;
}

BOOL llvm::sys::path::has_root_path(const char **this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v11[16] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  long long v10 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    switch(*((unsigned char *)this + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v4 = (void *)*this;
        if (*this) {
          unint64_t v3 = strlen(*this);
        }
        else {
          unint64_t v3 = 0;
        }
        break;
      case 4:
        char v8 = (*this)[23];
        if (v8 >= 0) {
          unint64_t v4 = (void *)*this;
        }
        else {
          unint64_t v4 = *(void **)*this;
        }
        if (v8 >= 0) {
          unint64_t v3 = v8 & 0x7F;
        }
        else {
          unint64_t v3 = *((void *)*this + 1);
        }
        break;
      case 5:
        unint64_t v4 = (void *)*this;
        unint64_t v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    unint64_t v4 = v9;
    unint64_t v3 = v10;
  }
  llvm::sys::path::root_path((unint64_t)v4, v3, v2);
  uint64_t v6 = v5;
  if (v9 != v11) {
    free(v9);
  }
  return v6 != 0;
}

BOOL llvm::sys::path::has_relative_path(const char **this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v11[16] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  long long v10 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    switch(*((unsigned char *)this + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v4 = (void *)*this;
        if (*this) {
          unint64_t v3 = strlen(*this);
        }
        else {
          unint64_t v3 = 0;
        }
        break;
      case 4:
        char v8 = (*this)[23];
        if (v8 >= 0) {
          unint64_t v4 = (void *)*this;
        }
        else {
          unint64_t v4 = *(void **)*this;
        }
        if (v8 >= 0) {
          unint64_t v3 = v8 & 0x7F;
        }
        else {
          unint64_t v3 = *((void *)*this + 1);
        }
        break;
      case 5:
        unint64_t v4 = (void *)*this;
        unint64_t v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    unint64_t v4 = v9;
    unint64_t v3 = v10;
  }
  llvm::sys::path::root_path((unint64_t)v4, v3, v2);
  unint64_t v6 = v5;
  if (v9 != v11) {
    free(v9);
  }
  return v3 > v6;
}

BOOL llvm::sys::path::has_filename(const char **this, const llvm::Twine *a2)
{
  int v2 = (int)a2;
  v18[16] = *MEMORY[0x1E4F143B8];
  BOOL v16 = v18;
  long long v17 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    int v4 = *((unsigned __int8 *)this + 32) - 1;
    size_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = v18;
    switch(v4)
    {
      case 0:
        break;
      case 2:
        unint64_t v6 = *this;
        if (*this) {
          size_t v5 = strlen(*this);
        }
        else {
          size_t v5 = 0;
        }
        goto LABEL_6;
      case 3:
        long long v10 = *this;
        char v11 = v10[23];
        if (v11 >= 0) {
          unint64_t v6 = v10;
        }
        else {
          unint64_t v6 = *(const char **)v10;
        }
        if (v11 >= 0) {
          size_t v5 = v11 & 0x7F;
        }
        else {
          size_t v5 = *((void *)v10 + 1);
        }
        goto LABEL_6;
      case 4:
        unint64_t v6 = *this;
        size_t v5 = (size_t)this[1];
LABEL_6:
        uint64_t v7 = v18;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v16);
    uint64_t v7 = v16;
    size_t v5 = v17;
    unint64_t v6 = (const char *)v16;
  }
  void v12[2] = 0;
  uint64_t v13 = 0;
  v12[0] = v6;
  v12[1] = v5;
  size_t v14 = v5;
  int v15 = v2;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v12);
  uint64_t v8 = v13;
  if (v7 != v18) {
    free(v7);
  }
  return v8 != 0;
}

BOOL llvm::sys::path::has_stem(const char **this, const llvm::Twine *a2)
{
  int v2 = (int)a2;
  v12[16] = *MEMORY[0x1E4F143B8];
  long long v10 = v12;
  long long v11 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    size_t v5 = v12;
    switch(*((unsigned char *)this + 32))
    {
      case 1:
        break;
      case 3:
        int v4 = *this;
        if (*this) {
          uint64_t v3 = strlen(*this);
        }
        else {
          uint64_t v3 = 0;
        }
        goto LABEL_6;
      case 4:
        char v9 = (*this)[23];
        if (v9 >= 0) {
          int v4 = *this;
        }
        else {
          int v4 = *(const char **)*this;
        }
        if (v9 >= 0) {
          uint64_t v3 = v9 & 0x7F;
        }
        else {
          uint64_t v3 = *((void *)*this + 1);
        }
        goto LABEL_6;
      case 5:
        int v4 = *this;
        uint64_t v3 = (uint64_t)this[1];
LABEL_6:
        size_t v5 = v12;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v10);
    size_t v5 = v10;
    uint64_t v3 = v11;
    int v4 = (const char *)v10;
  }
  llvm::sys::path::stem((uint64_t)v4, v3, v2);
  uint64_t v7 = v6;
  if (v5 != v12) {
    free(v5);
  }
  return v7 != 0;
}

uint64_t llvm::sys::path::is_absolute(const char **this, const llvm::Twine *a2)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  size_t v14 = v16;
  long long v15 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    size_t v3 = 0;
    int v4 = 0;
    switch(*((unsigned char *)this + 32))
    {
      case 1:
        break;
      case 3:
        int v4 = *this;
        if (*this) {
          size_t v3 = strlen(*this);
        }
        else {
          size_t v3 = 0;
        }
        break;
      case 4:
        char v8 = (*this)[23];
        if (v8 >= 0) {
          int v4 = *this;
        }
        else {
          int v4 = *(const char **)*this;
        }
        if (v8 >= 0) {
          size_t v3 = v8 & 0x7F;
        }
        else {
          size_t v3 = *((void *)*this + 1);
        }
        break;
      case 5:
        int v4 = *this;
        size_t v3 = (size_t)this[1];
        break;
      default:
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v14);
    int v4 = (const char *)v14;
    size_t v3 = v15;
  }
  __int16 v13 = 261;
  long long v11 = v4;
  size_t v12 = v3;
  BOOL has_root_directory = llvm::sys::path::has_root_directory(&v11, a2);
  if (a2 >= 2)
  {
    __int16 v13 = 261;
    long long v11 = v4;
    size_t v12 = v3;
    BOOL v9 = has_root_directory;
    BOOL has_root_name = llvm::sys::path::has_root_name(&v11, a2);
    BOOL has_root_directory = v9;
  }
  else
  {
    BOOL has_root_name = 1;
  }
  if (v14 != v16)
  {
    BOOL v10 = has_root_directory;
    free(v14);
    BOOL has_root_directory = v10;
  }
  return has_root_directory & has_root_name;
}

uint64_t llvm::sys::path::is_absolute_gnu(const char **this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v16[16] = *MEMORY[0x1E4F143B8];
  size_t v14 = v16;
  long long v15 = xmmword_1CFAC3020;
  if (*((unsigned char *)this + 33) == 1)
  {
    int v4 = *((unsigned __int8 *)this + 32) - 1;
    size_t v5 = v16;
    switch(v4)
    {
      case 0:
        goto LABEL_24;
      case 2:
        uint64_t v6 = *this;
        if (!*this)
        {
          size_t v5 = v16;
          goto LABEL_24;
        }
        size_t v7 = strlen(*this);
LABEL_6:
        size_t v5 = v16;
        if (!v7) {
          goto LABEL_24;
        }
        goto LABEL_9;
      case 3:
        BOOL v10 = *this;
        char v11 = v10[23];
        size_t v12 = *((void *)v10 + 1);
        if (v11 >= 0) {
          uint64_t v6 = v10;
        }
        else {
          uint64_t v6 = *(const char **)v10;
        }
        size_t v7 = v11 & 0x7F;
        if (v11 < 0) {
          size_t v7 = v12;
        }
        goto LABEL_6;
      case 4:
        uint64_t v6 = *this;
        size_t v7 = (size_t)this[1];
        goto LABEL_6;
      default:
        break;
    }
  }
  llvm::Twine::toVector((uint64_t)this, (uint64_t)&v14);
  size_t v5 = v14;
  size_t v7 = v15;
  uint64_t v6 = (const char *)v14;
  if ((void)v15)
  {
LABEL_9:
    int v8 = *(unsigned __int8 *)v6;
    if (v8 == 47 || v2 >= 2 && v8 == 92 || v2 >= 2 && v7 >= 2 && *v6 && v6[1] == 58)
    {
      uint64_t v9 = 1;
      goto LABEL_25;
    }
  }
LABEL_24:
  uint64_t v9 = 0;
LABEL_25:
  if (v5 != v16) {
    free(v5);
  }
  return v9;
}

uint64_t llvm::sys::path::remove_dots(unsigned __int8 **a1, int a2, unsigned int a3)
{
  v52[32] = *MEMORY[0x1E4F143B8];
  if (a3 <= 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = a3;
  }
  size_t v7 = *a1;
  unint64_t v8 = (unint64_t)a1[1];
  char v45 = v7;
  unint64_t v46 = v8;
  uint64_t v50 = v52;
  uint64_t v51 = 0x1000000000;
  unint64_t v9 = llvm::sys::path::root_path((unint64_t)v7, v8, v6);
  size_t v11 = v10;
  if (v10)
  {
    if (v8 >= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v8;
    }
    v7 += v12;
    v8 -= v12;
    char v45 = v7;
    unint64_t v46 = v8;
  }
  if (!v8)
  {
    uint64_t v36 = 0;
    goto LABEL_72;
  }
  __src = (void *)v9;
  uint64_t v44 = a1;
  char v13 = 0;
  BOOL v14 = a3 > 1;
  if (a3 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = 2;
  }
  if (v14) {
    BOOL v16 = "\\/";
  }
  else {
    BOOL v16 = "/";
  }
  if (v6 == 3) {
    int v17 = 92;
  }
  else {
    int v17 = 47;
  }
  do
  {
    while (1)
    {
      unsigned int v18 = v7;
      uint64_t first_of = llvm::StringRef::find_first_of(&v45, (unsigned __int8 *)v16, v15, 0);
      unint64_t v20 = first_of == -1 ? v8 : first_of;
      unint64_t v21 = v8 >= v20 ? v20 : v8;
      unint64_t v22 = v8 - v21;
      v7 += v21;
      char v45 = v7;
      unint64_t v46 = v8 - v21;
      if (v8 > v20) {
        break;
      }
      v8 -= v21;
      if (v21) {
        goto LABEL_35;
      }
LABEL_37:
      char v13 = 1;
      if (!v8) {
        goto LABEL_58;
      }
    }
    int v24 = *v7++;
    int v23 = v24;
    unint64_t v8 = v22 - 1;
    char v45 = v7;
    unint64_t v46 = v22 - 1;
    BOOL v26 = v22 == 1 || v23 != v17;
    v13 |= v26;
    if (!v21) {
      goto LABEL_37;
    }
LABEL_35:
    if (v21 == 1)
    {
      if (*v18 == 46) {
        goto LABEL_37;
      }
LABEL_44:
      if (v51 >= (unint64_t)HIDWORD(v51)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v28 = (char *)v50 + 16 * v51;
      *unint64_t v28 = v18;
      v28[1] = v21;
      int v29 = v51 + 1;
      goto LABEL_46;
    }
    BOOL v27 = v21 != 2 || a2 == 0;
    if (v27 || *(_WORD *)v18 != 11822) {
      goto LABEL_44;
    }
    if (!v51
      || (unsigned int v30 = (char *)v50 + 16 * v51, *((void *)v30 - 1) == 2) && **((_WORD **)v30 - 2) == 11822)
    {
      if (v11) {
        goto LABEL_37;
      }
      if (v51 >= HIDWORD(v51)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v31 = (char *)v50 + 16 * v51;
      void *v31 = v18;
      v31[1] = 2;
      int v29 = v51 + 1;
    }
    else
    {
      int v29 = v51 - 1;
    }
    char v13 = 1;
LABEL_46:
    LODWORD(v51) = v29;
  }
  while (v8);
LABEL_58:
  if (v13)
  {
    uint64_t v47 = v49;
    long long v48 = xmmword_1CD96DBF0;
    if (v11 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v32 = 0;
    if (v11)
    {
      memcpy(v47, __src, v11);
      uint64_t v32 = v48;
    }
    size_t v33 = v32 + v11;
    *(void *)&long long v48 = v33;
    if (v51)
    {
      size_t v34 = *((void *)v50 + 1);
      if (*((void *)&v48 + 1) < v34 + v33) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v34)
      {
        memcpy((char *)v47 + v33, *(const void **)v50, v34);
        size_t v33 = v48;
      }
      size_t v35 = v33 + v34;
      *(void *)&long long v48 = v35;
      if (v51 != 1)
      {
        char v38 = (char *)v50 + 16 * v51;
        size_t v39 = (char *)v50 + 16;
        do
        {
          uint64_t v41 = *(const void **)v39;
          size_t v40 = *((void *)v39 + 1);
          if (v35 + 1 > *((void *)&v48 + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *((unsigned char *)v47 + v35) = v17;
          uint64_t v42 = v48 + 1;
          *(void *)&long long v48 = v42;
          if (*((void *)&v48 + 1) < v42 + v40) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v40)
          {
            memcpy((char *)v47 + v42, v41, v40);
            uint64_t v42 = v48;
          }
          size_t v35 = v42 + v40;
          *(void *)&long long v48 = v35;
          v39 += 16;
        }
        while (v39 != v38);
      }
    }
    sub_1CD064E8C(v44, &v47);
    if (v47 != v49) {
      free(v47);
    }
    uint64_t v36 = 1;
  }
  else
  {
    uint64_t v36 = 0;
  }
LABEL_72:
  if (v50 != v52) {
    free(v50);
  }
  return v36;
}

uint64_t llvm::sys::fs::getUniqueID(llvm::sys::fs *a1, void *a2)
{
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t result = llvm::sys::fs::status(a1, (const llvm::Twine *)&v5, (llvm::sys::fs::file_status *)1);
  if (!result)
  {
    uint64_t v4 = v7;
    *a2 = v6;
    a2[1] = v4;
    std::system_category();
    return 0;
  }
  return result;
}

uint64_t llvm::sys::fs::status(llvm::sys::fs *this, const llvm::Twine *a2, llvm::sys::fs::file_status *a3)
{
  int v3 = (int)a3;
  v12[16] = *MEMORY[0x1E4F143B8];
  size_t v10 = v12;
  long long v11 = xmmword_1CFAC3020;
  uint64_t v5 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v10);
  if (v3) {
    int v6 = MEMORY[0x1E4F14A68](v5, v9);
  }
  else {
    int v6 = MEMORY[0x1E4F14950](v5, v9);
  }
  uint64_t v7 = sub_1CD0E6A50(v6, v9, (uint64_t)a2);
  if (v10 != v12) {
    free(v10);
  }
  return v7;
}

uint64_t llvm::sys::fs::file_status::getUniqueID(llvm::sys::fs::file_status *this)
{
  return *((int *)this + 12);
}

void llvm::sys::fs::createUniquePath(uint64_t a1, void *a2, int a3)
{
  v21[16] = *MEMORY[0x1E4F143B8];
  long long v19 = v21;
  long long v20 = xmmword_1CFAC3020;
  llvm::Twine::toVector(a1, (uint64_t)&v19);
  if (a3)
  {
    void v18[4] = 261;
    BOOL v16 = v19;
    *(void *)&long long v17 = v20;
    if ((llvm::sys::path::is_absolute((const char **)&v16, 0) & 1) == 0)
    {
      BOOL v16 = v18;
      long long v17 = xmmword_1CFAC3020;
      llvm::sys::path::system_temp_directory(1, (uint64_t)&v16);
      __int16 v15 = 261;
      v14[0] = (const char *)v19;
      v14[1] = (const char *)v20;
      __int16 v13 = 257;
      __int16 v11 = 257;
      __int16 v9 = 257;
      llvm::sys::path::append(&v16, 0, v14, &v12, (uint64_t)v10, (uint64_t)v8);
      sub_1CD064E8C(&v19, &v16);
      if (v16 != v18) {
        free(v16);
      }
    }
  }
  sub_1CC223970((uint64_t)a2, (uint64_t)&v19);
  uint64_t v5 = a2[1];
  if ((unint64_t)(v5 + 1) > a2[2]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*a2 + v5) = 0;
  uint64_t v6 = v20;
  if (v20)
  {
    uint64_t v7 = 0;
    do
    {
      if (*((unsigned char *)v19 + v7) == 37) {
        *(unsigned char *)(*a2 + v7) = a0123456789abcd_5[arc4random() & 0xF];
      }
      ++v7;
    }
    while (v6 != v7);
  }
  if (v19 != v21) {
    free(v19);
  }
}

size_t llvm::sys::path::system_temp_directory(int a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  if (a1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = getenv(off_1E6859A70[v4]);
      if (v5) {
        break;
      }
      if (++v4 == 4) {
        goto LABEL_5;
      }
    }
    size_t v10 = v5;
    size_t result = strlen(v5);
    size_t v11 = result;
    if (*(void *)(a2 + 16) < result) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v12 = 0;
    if (result)
    {
      size_t result = (size_t)memcpy(*(void **)a2, v10, result);
      uint64_t v12 = *(void *)(a2 + 8);
    }
    uint64_t v9 = v12 + v11;
  }
  else
  {
LABEL_5:
    size_t result = sub_1CD0E7BE0(a1, a2);
    if (result) {
      return result;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)(a2 + 16) < (unint64_t)(v7 + 9)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v8 = *(void *)a2 + v7;
    *(void *)uint64_t v8 = *(void *)"/var/tmp/";
    *(unsigned char *)(v8 + 8) = 47;
    uint64_t v9 = *(void *)(a2 + 8) + 9;
  }
  *(void *)(a2 + 8) = v9;
  return result;
}

unint64_t sub_1CD0E5038(uint64_t a1, int *a2, void *a3, int a4, int a5, int a6, uint64_t a7)
{
  std::system_category();
  int v14 = 129;
  while (1)
  {
    llvm::sys::fs::createUniquePath(a1, a3, a4);
    if (a5 == 1) {
      break;
    }
    if (a5 != 2)
    {
      BOOL v25 = (unsigned char *)*a3;
      char v26 = 1;
      char v32 = 1;
      if (*v25)
      {
        *(void *)unsigned int v30 = v25;
        char v26 = 3;
      }
      char v31 = v26;
      uint64_t directory = llvm::sys::fs::create_directory(v30, 0, 0x1F8u);
      if (!directory) {
        goto LABEL_24;
      }
      unint64_t v22 = v27;
      int v24 = std::generic_category();
      if (directory != 17)
      {
LABEL_23:
        unint64_t v28 = directory & 0xFFFFFFFF00000000;
        return v28 | directory;
      }
      goto LABEL_16;
    }
    __int16 v15 = (unsigned char *)*a3;
    char v16 = 1;
    char v32 = 1;
    if (*v15)
    {
      *(void *)unsigned int v30 = v15;
      char v16 = 3;
    }
    char v31 = v16;
    uint64_t directory = llvm::sys::fs::access(v30, 0);
    if (std::generic_category() == v18 && directory == 2) {
      goto LABEL_24;
    }
    if (directory) {
      goto LABEL_23;
    }
LABEL_17:
    if (--v14 <= 1) {
      goto LABEL_23;
    }
  }
  long long v19 = (unsigned char *)*a3;
  char v20 = 1;
  char v32 = 1;
  if (*v19)
  {
    *(void *)unsigned int v30 = v19;
    char v20 = 3;
  }
  char v31 = v20;
  uint64_t directory = llvm::sys::fs::openFile(v30, a2, 1, 3, a6, a7);
  if (directory)
  {
    unint64_t v22 = v21;
    int v23 = std::generic_category();
    if (directory == 17 && v23 == v22) {
      goto LABEL_17;
    }
    int v24 = std::generic_category();
    if (directory != 13) {
      goto LABEL_23;
    }
LABEL_16:
    if (v24 != v22) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }
LABEL_24:
  std::system_category();
  LODWORD(directory) = 0;
  unint64_t v28 = 0;
  return v28 | directory;
}

unint64_t sub_1CD0E51FC(uint64_t *a1, long long *a2, uint64_t a3, int *a4, void *a5, int a6, int a7)
{
  size_t v11 = "-%%%%%%.";
  v36[16] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    size_t v11 = "-%%%%%%";
  }
  int v12 = *((unsigned __int8 *)a1 + 32);
  if (v12 == 1)
  {
    if (*v11) {
      int v12 = 3;
    }
    else {
      int v12 = 1;
    }
    *(void *)&long long v23 = v11;
    LOBYTE(v25) = v12;
    char v13 = 1;
    goto LABEL_15;
  }
  if (!*((unsigned char *)a1 + 32))
  {
    LOWORD(v25) = 256;
    goto LABEL_18;
  }
  if (*v11)
  {
    uint64_t v14 = a1[1];
    if (*((unsigned char *)a1 + 33) == 1)
    {
      __int16 v15 = (uint64_t *)*a1;
    }
    else
    {
      int v12 = 2;
      __int16 v15 = a1;
    }
    *(void *)&long long v23 = v15;
    *((void *)&v23 + 1) = v14;
    *(void *)&long long v24 = v11;
    LOBYTE(v25) = v12;
    char v13 = 3;
LABEL_15:
    BYTE1(v25) = v13;
    goto LABEL_16;
  }
  long long v22 = *((_OWORD *)a1 + 1);
  long long v23 = *(_OWORD *)a1;
  long long v24 = v22;
  uint64_t v25 = a1[4];
  int v12 = v25;
LABEL_16:
  if (v12 == 1)
  {
    char v26 = a2;
    uint64_t v27 = a3;
    __int16 v16 = 261;
    goto LABEL_20;
  }
  if (!v12)
  {
LABEL_18:
    __int16 v16 = 256;
LABEL_20:
    __int16 v30 = v16;
    goto LABEL_26;
  }
  if (BYTE1(v25) != 1) {
    LOBYTE(v12) = 2;
  }
  long long v17 = &v23;
  if (BYTE1(v25) == 1) {
    long long v17 = (long long *)v23;
  }
  char v26 = v17;
  uint64_t v27 = *((void *)&v23 + 1);
  unint64_t v28 = a2;
  uint64_t v29 = a3;
  LOBYTE(v30) = v12;
  HIBYTE(v30) = 5;
LABEL_26:
  size_t v34 = v36;
  long long v35 = xmmword_1CFAC3020;
  unsigned int v18 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v26, &v34);
  char v19 = 1;
  char v33 = 1;
  if (*(unsigned char *)v18)
  {
    char v31 = v18;
    char v19 = 3;
  }
  char v32 = v19;
  unint64_t v20 = sub_1CD0E5038((uint64_t)&v31, a4, a5, 1, a6, a7, 384);
  if (v34 != v36) {
    free(v34);
  }
  return v20;
}

unint64_t llvm::sys::fs::getPotentiallyUniqueFileName(uint64_t a1, void *a2)
{
  return sub_1CD0E5038(a1, &v3, a2, 0, 2, 0, 0);
}

unint64_t llvm::sys::fs::getPotentiallyUniqueTempFileName(uint64_t *a1, long long *a2, uint64_t a3, void *a4)
{
  return sub_1CD0E51FC(a1, a2, a3, &v5, a4, 2, 0);
}

void llvm::sys::fs::make_absolute(uint64_t a1, char **a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2[1];
  __int16 v37 = 261;
  size_t v34 = v5;
  *(void *)&long long v35 = v4;
  BOOL has_root_directory = llvm::sys::path::has_root_directory((const char **)&v34, 0);
  __int16 v37 = 261;
  size_t v34 = v5;
  *(void *)&long long v35 = v4;
  BOOL has_root_name = llvm::sys::path::has_root_name((const char **)&v34, 0);
  if (!has_root_directory)
  {
    size_t v34 = (char *)&v36;
    long long v35 = xmmword_1CFAC3020;
    BOOL v8 = has_root_name;
    llvm::Twine::toVector(a1, (uint64_t)&v34);
    if (v8)
    {
      long long v22 = llvm::sys::path::root_name((unint64_t)v5, v4, 0);
      size_t v10 = v9;
      size_t v11 = (void *)llvm::sys::path::root_directory((unint64_t)v34, v35, 0);
      char v13 = v12;
      uint64_t v14 = v34;
      unint64_t v15 = v35;
      llvm::sys::path::root_path((unint64_t)v34, v35, 0);
      if (v15 >= v16) {
        unint64_t v17 = v16;
      }
      else {
        unint64_t v17 = v15;
      }
      unsigned int v18 = &v14[v17];
      unint64_t v19 = v15 - v17;
      llvm::sys::path::root_path((unint64_t)v5, v4, 0);
      long long v32 = xmmword_1CFAC3020;
      char v31 = v33;
      if (v4 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v4;
      }
      __int16 v30 = 261;
      v29[0] = v22;
      v29[1] = v10;
      __int16 v28 = 261;
      v27[0] = v11;
      v27[1] = v13;
      __int16 v26 = 261;
      v25[0] = v18;
      v25[1] = v19;
      __int16 v24 = 261;
      v23[0] = &v5[v21];
      v23[1] = v4 - v21;
      llvm::sys::path::append(&v31, 0, (const char **)v29, v27, (uint64_t)v25, (uint64_t)v23);
      sub_1CD064E8C(a2, &v31);
      if (v31 != v33) {
        free(v31);
      }
    }
    else
    {
      v33[4] = 261;
      char v31 = v5;
      *(void *)&long long v32 = v4;
      __int16 v30 = 257;
      __int16 v28 = 257;
      __int16 v26 = 257;
      llvm::sys::path::append(&v34, 0, (const char **)&v31, v29, (uint64_t)v27, (uint64_t)v25);
      sub_1CD064E8C(a2, &v34);
    }
    if (v34 != (char *)&v36) {
      free(v34);
    }
  }
}

unint64_t llvm::sys::fs::make_absolute(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v12[4] = 261;
  uint64_t v2 = *(void *)(a1 + 8);
  size_t v10 = *(void **)a1;
  *(void *)&long long v11 = v2;
  if (llvm::sys::path::is_absolute((const char **)&v10, 0))
  {
    std::system_category();
    unint64_t v3 = 0;
    unsigned int v4 = 0;
  }
  else
  {
    size_t v10 = v12;
    long long v11 = xmmword_1CFAC3020;
    uint64_t v6 = llvm::sys::fs::current_path((uint64_t)&v10);
    uint64_t v7 = v6;
    if (v6)
    {
      unsigned int v4 = v6;
    }
    else
    {
      __int16 v9 = 261;
      v8[0] = v10;
      v8[1] = v11;
      llvm::sys::fs::make_absolute((uint64_t)v8, (char **)a1);
      std::system_category();
      unsigned int v4 = 0;
    }
    unint64_t v3 = v7 & 0xFFFFFFFF00000000;
    if (v10 != v12) {
      free(v10);
    }
  }
  return v4 | v3;
}

uint64_t llvm::sys::fs::current_path(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = getenv("PWD");
  int v25 = 0;
  uint64_t v26 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = v2;
  char v4 = 1;
  char v20 = 1;
  if (*v2)
  {
    unsigned int v18 = v2;
    char v4 = 3;
  }
  char v19 = v4;
  if (!llvm::sys::path::is_absolute((const char **)&v18, 0)) {
    goto LABEL_9;
  }
  char v5 = 1;
  char v17 = 1;
  if (*v3)
  {
    unint64_t v15 = v3;
    char v5 = 3;
  }
  char v16 = v5;
  if (!llvm::sys::fs::status((llvm::sys::fs *)&v15, (const llvm::Twine *)v24, (llvm::sys::fs::file_status *)1)&& (uint64_t v13 = ".", v14 = 259, !llvm::sys::fs::status((llvm::sys::fs *)&v13, (const llvm::Twine *)v21, (llvm::sys::fs::file_status *)1))&& v25 == v22&& v26 == v23)
  {
    size_t v10 = strlen(v3);
    size_t v11 = v10;
    uint64_t v12 = *(void *)(a1 + 8);
    if (*(void *)(a1 + 16) < v12 + v10) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v10)
    {
      memcpy((void *)(*(void *)a1 + v12), v3, v10);
      uint64_t v12 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 8) = v12 + v11;
LABEL_14:
    std::system_category();
    return 0;
  }
  else
  {
LABEL_9:
    uint64_t v6 = a1;
    unint64_t v7 = 1024;
    while (1)
    {
      sub_1CC223914(v6, v7);
      if (getcwd(*(char **)a1, *(void *)(a1 + 8)))
      {
        *(void *)(a1 + 8) = strlen(*(const char **)a1);
        goto LABEL_14;
      }
      if (*__error() != 12) {
        break;
      }
      unint64_t v7 = 2 * *(void *)(a1 + 16);
      uint64_t v6 = a1;
    }
    *(void *)(a1 + 8) = 0;
    uint64_t v8 = *__error();
    std::generic_category();
  }
  return v8;
}

unint64_t llvm::sys::fs::copy_file(llvm::sys::fs *this, const llvm::Twine *a2)
{
  int v3 = 0;
  unint64_t result = llvm::sys::fs::openFileForRead((unsigned __int8 *)this, &v3, 0, 0);
  if (!result) {
    operator new[]();
  }
  return result;
}

unint64_t llvm::sys::fs::openFileForRead(unsigned __int8 *a1, int *a2, int a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = llvm::sys::fs::openFile(a1, a2, 2, 1, a3, 438);
  uint64_t v7 = v6;
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (a4)
    {
      a4[1] = 0;
      if (fcntl(*a2, 50, __s) != -1)
      {
        size_t v10 = strlen(__s);
        uint64_t v11 = a4[1];
        if (a4[2] < v11 + v10) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v10)
        {
          memcpy((void *)(*a4 + v11), __s, v10);
          uint64_t v11 = a4[1];
        }
        a4[1] = v11 + v10;
      }
    }
    std::system_category();
    unint64_t v8 = 0;
  }
  return v8 | v7;
}

void llvm::sys::fs::md5_contents(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v8 = xmmword_1CFAC4320;
  uint64_t v9 = 0;
  char v4 = operator new(0x1000uLL);
  bzero(v4, 0x1000uLL);
  int v5 = read(v2, v4, 0x1000uLL);
  if (v5 >= 1)
  {
    do
    {
      llvm::MD5::update((int *)&v8, (int *)v4, v5);
      int v5 = read(v2, v4, 0x1000uLL);
    }
    while (v5 > 0);
  }
  if (v5 < 0)
  {
    uint64_t v6 = *__error();
    uint64_t v7 = std::generic_category();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
  }
  else
  {
    llvm::MD5::final((int *)&v8, (int *)a2);
    *(unsigned char *)(a2 + 16) &= ~1u;
  }
  operator delete(v4);
}

unint64_t llvm::sys::fs::md5_contents@<X0>(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  LODWORD(v7) = 0;
  unint64_t result = llvm::sys::fs::openFileForRead((unsigned __int8 *)this, (int *)&v7, 0, 0);
  if (result)
  {
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
  }
  else
  {
    int v6 = (int)v7;
    llvm::sys::fs::md5_contents((llvm::sys::fs *)v7, a2);
    return close(v6);
  }
  return result;
}

BOOL llvm::sys::fs::status_known(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) != 0;
}

uint64_t llvm::sys::fs::get_file_type(llvm::sys::fs *this, const llvm::Twine *a2)
{
  memset(v3, 0, 44);
  if (llvm::sys::fs::status(this, (const llvm::Twine *)v3, a2)) {
    return 0;
  }
  else {
    return DWORD2(v3[2]);
  }
}

BOOL llvm::sys::fs::is_directory(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 3;
}

unint64_t llvm::sys::fs::is_directory(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  memset(v8, 0, 44);
  uint64_t v4 = llvm::sys::fs::status(this, (const llvm::Twine *)v8, (llvm::sys::fs::file_status *)1);
  uint64_t v5 = v4;
  if (v4)
  {
    unsigned int v6 = v4;
  }
  else
  {
    *(unsigned char *)a2 = DWORD2(v8[2]) == 3;
    std::system_category();
    unsigned int v6 = 0;
  }
  return v5 & 0xFFFFFFFF00000000 | v6;
}

unint64_t llvm::sys::fs::is_regular_file(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  memset(v8, 0, 44);
  uint64_t v4 = llvm::sys::fs::status(this, (const llvm::Twine *)v8, (llvm::sys::fs::file_status *)1);
  uint64_t v5 = v4;
  if (v4)
  {
    unsigned int v6 = v4;
  }
  else
  {
    *(unsigned char *)a2 = DWORD2(v8[2]) == 2;
    std::system_category();
    unsigned int v6 = 0;
  }
  return v5 & 0xFFFFFFFF00000000 | v6;
}

BOOL llvm::sys::fs::is_symlink_file(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 4;
}

unint64_t llvm::sys::fs::is_symlink_file(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  memset(v8, 0, 44);
  uint64_t v4 = llvm::sys::fs::status(this, (const llvm::Twine *)v8, 0);
  uint64_t v5 = v4;
  if (v4)
  {
    unsigned int v6 = v4;
  }
  else
  {
    *(unsigned char *)a2 = DWORD2(v8[2]) == 4;
    std::system_category();
    unsigned int v6 = 0;
  }
  return v5 & 0xFFFFFFFF00000000 | v6;
}

BOOL llvm::sys::fs::is_other(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) > 3u;
}

unint64_t llvm::sys::fs::is_other(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  memset(v8, 0, 44);
  uint64_t v4 = llvm::sys::fs::status(this, (const llvm::Twine *)v8, (llvm::sys::fs::file_status *)1);
  uint64_t v5 = v4;
  if (v4)
  {
    unsigned int v6 = v4;
  }
  else
  {
    *(unsigned char *)a2 = DWORD2(v8[2]) > 3;
    std::system_category();
    unsigned int v6 = 0;
  }
  return v5 & 0xFFFFFFFF00000000 | v6;
}

void llvm::sys::fs::directory_entry::replace_filename(uint64_t a1, const char **a2, int a3, long long *a4)
{
  v34[16] = *MEMORY[0x1E4F143B8];
  char v8 = *(unsigned char *)(a1 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    uint64_t v10 = (unsigned __int8 *)a1;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a1;
  }
  unint64_t v11 = v8 & 0x7F;
  if (v9) {
    unint64_t v12 = *(void *)(a1 + 8);
  }
  else {
    unint64_t v12 = v11;
  }
  unint64_t v13 = sub_1CD0E3AC0(v10, v12, 0);
  size_t v14 = 0;
  if (v12 >= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v12;
  }
  if (v13 == -1) {
    size_t v16 = 0;
  }
  else {
    size_t v16 = v15;
  }
  if (v13 == -1) {
    char v17 = 0;
  }
  else {
    char v17 = v10;
  }
  __src = v34;
  *(_OWORD *)long long __len = xmmword_1CFAC3020;
  if (v16 >= 0x81) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v16)
  {
    memcpy(__src, v17, v16);
    size_t v14 = __len[0];
  }
  __len[0] = v14 + v16;
  __int16 v31 = 257;
  __int16 v28 = 257;
  __int16 v26 = 257;
  llvm::sys::path::append(&__src, 0, a2, (void **)&__dst, (uint64_t)v27, (uint64_t)v25);
  size_t v18 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  char v19 = __src;
  if (__len[0] >= 0x17)
  {
    size_t v21 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17) {
      size_t v21 = __len[0] | 7;
    }
    size_t v22 = v21 + 1;
    p_dst = (long long *)operator new(v21 + 1);
    *((void *)&__dst + 1) = v18;
    unint64_t v30 = v22 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_26;
  }
  HIBYTE(v30) = __len[0];
  p_dst = &__dst;
  if (__len[0]) {
LABEL_26:
  }
    memmove(p_dst, v19, v18);
  *((unsigned char *)p_dst + v18) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v30;
  *(_DWORD *)(a1 + 24) = a3;
  long long v23 = *a4;
  long long v24 = a4[2];
  *(_OWORD *)(a1 + 48) = a4[1];
  *(_OWORD *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 32) = v23;
  if (__src != v34) {
    free(__src);
  }
}

uint64_t llvm::sys::fs::getPermissions@<X0>(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  int v9 = 0xFFFF;
  uint64_t result = llvm::sys::fs::status(this, (const llvm::Twine *)&v8, (llvm::sys::fs::file_status *)1);
  char v6 = *(unsigned char *)(a2 + 16);
  if (result)
  {
    char v7 = v6 | 1;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
  }
  else
  {
    char v7 = v6 & 0xFE;
    *(_DWORD *)a2 = v9;
  }
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

uint64_t llvm::sys::fs::mapped_file_region::const_data(llvm::sys::fs::mapped_file_region *this)
{
  return *((void *)this + 1);
}

unint64_t llvm::sys::fs::getExecutable@<X0>(llvm::sys::fs *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = dladdr(this, &__s);
  if (!result)
  {
    a2[23] = 0;
    *a2 = 0;
    return result;
  }
  dli_fname = __s.dli_fname;
  unint64_t result = strlen(__s.dli_fname);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    *((void *)a2 + 1) = v6;
    *((void *)a2 + 2) = v8 | 0x8000000000000000;
    *(void *)a2 = v9;
    a2 = v9;
  }
  else
  {
    a2[23] = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  unint64_t result = (unint64_t)memmove(a2, dli_fname, v6);
LABEL_11:
  a2[v6] = 0;
  return result;
}

uint64_t llvm::sys::fs::basic_file_status::getLastModificationTime(llvm::sys::fs::basic_file_status *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  return v1 + 1000 * std::chrono::system_clock::from_time_t(*((void *)this + 1)).__d_.__rep_;
}

uint64_t llvm::sys::fs::file_status::getLinkCount(llvm::sys::fs::file_status *this)
{
  return *((unsigned __int16 *)this + 26);
}

uint64_t llvm::sys::fs::disk_space@<X0>(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  llvm::Twine::str(this, __p);
  if (v11 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  int v5 = statfs((const char *)v4, &v12);
  int v6 = v5;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v7 = v12.f_blocks * v12.f_bsize;
    uint64_t result = v12.f_bfree * v12.f_bsize;
    uint64_t v9 = v12.f_bavail * v12.f_bsize;
    *(unsigned char *)(a2 + 24) &= ~1u;
    *(void *)(a2 + 16) = v9;
    goto LABEL_9;
  }
  if (!v5) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v7 = *__error();
  uint64_t result = (uint64_t)std::generic_category();
  *(unsigned char *)(a2 + 24) |= 1u;
LABEL_9:
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = result;
  return result;
}

uint64_t llvm::sys::fs::create_hard_link(llvm::sys::fs *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  unsigned char v13[16] = *MEMORY[0x1E4F143B8];
  char v11 = v13;
  long long v12 = xmmword_1CFAC3020;
  uint64_t v8 = v10;
  long long v9 = xmmword_1CFAC3020;
  uint64_t v4 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)a2, &v11);
  int v5 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v8);
  if (link(v5, v4) == -1)
  {
    uint64_t v6 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    uint64_t v6 = 0;
  }
  if (v8 != v10) {
    free(v8);
  }
  if (v11 != v13) {
    free(v11);
  }
  return v6;
}

uint64_t llvm::sys::fs::is_local(llvm::sys::fs *this, BOOL *a2, BOOL *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (fstatfs((int)this, &v6))
  {
    uint64_t v4 = *__error();
    std::generic_category();
  }
  else
  {
    *a2 = (v6.f_flags & 0x1000) != 0;
    std::system_category();
    return 0;
  }
  return v4;
}

uint64_t llvm::sys::fs::access(unsigned __int8 *a1, int a2)
{
  v10[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v10;
  long long v9 = xmmword_1CFAC3020;
  int v3 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v8);
  uint64_t v4 = v3;
  if (a2 != 2)
  {
    if (a2) {
      a2 = 2;
    }
    if (access(v3, a2) == -1) {
      goto LABEL_3;
    }
LABEL_9:
    std::system_category();
    uint64_t v5 = 0;
    goto LABEL_4;
  }
  if (access(v3, 5) == -1)
  {
LABEL_3:
    uint64_t v5 = *__error();
    std::generic_category();
    goto LABEL_4;
  }
  if (!stat(v4, &v7) && (v7.st_mode & 0xF000) == 0x8000) {
    goto LABEL_9;
  }
  std::generic_category();
  uint64_t v5 = 13;
LABEL_4:
  if (v8 != v10) {
    free(v8);
  }
  return v5;
}

BOOL llvm::sys::fs::can_execute(llvm::sys::fs *this, const llvm::Twine *a2)
{
  return llvm::sys::fs::access((unsigned __int8 *)this, 2) == 0;
}

BOOL llvm::sys::fs::equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48) && *(void *)(a1 + 56) == *(void *)(a2 + 56);
}

unint64_t llvm::sys::fs::equivalent(llvm::sys::fs *this, const llvm::Twine *a2, const llvm::Twine *a3, BOOL *a4)
{
  int v15 = 0;
  uint64_t v16 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = llvm::sys::fs::status(this, (const llvm::Twine *)v14, (llvm::sys::fs::file_status *)1);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v6 = llvm::sys::fs::status(a2, (const llvm::Twine *)&v11, (llvm::sys::fs::file_status *)1);
    uint64_t v7 = v6;
    if (!v6)
    {
      BOOL v9 = v15 == v12 && v16 == v13;
      *(unsigned char *)a3 = v9;
      std::system_category();
      LODWORD(v6) = 0;
    }
  }
  return v7 & 0xFFFFFFFF00000000 | v6;
}

void sub_1CD0E6780(void **a1)
{
  v37[16] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)a1[1];
  if (v1)
  {
    int v3 = (char *)*a1;
    if (*(unsigned char *)*a1 == 126)
    {
      uint64_t v4 = v3 + 1;
      unint64_t v5 = (unint64_t)(v1 - 1);
      if (v1 == (char *)1)
      {
LABEL_7:
        unint64_t v6 = -1;
      }
      else
      {
        unint64_t v6 = 0;
        while (v4[v6] != 47)
        {
          if (v5 == ++v6) {
            goto LABEL_7;
          }
        }
      }
      if (v5 >= v6) {
        size_t v7 = v6;
      }
      else {
        size_t v7 = (size_t)(v1 - 1);
      }
      if (v5 >= v7 + 1) {
        size_t v8 = v7 + 1;
      }
      else {
        size_t v8 = (size_t)(v1 - 1);
      }
      long long v35 = v37;
      long long v36 = xmmword_1CFAC3020;
      if (v7)
      {
        if (v7 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v7 >= 0x17)
        {
          uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v10 = v7 | 7;
          }
          uint64_t v11 = v10 + 1;
          BOOL v9 = operator new(v10 + 1);
          __dst[1] = v7;
          int64_t v34 = v11 | 0x8000000000000000;
          __dst[0] = v9;
        }
        else
        {
          HIBYTE(v34) = v7;
          BOOL v9 = __dst;
        }
        memmove(v9, v3 + 1, v7);
        *((unsigned char *)v9 + v7) = 0;
        int v12 = SHIBYTE(v34);
        uint64_t v13 = (void *)__dst[0];
        if (v34 >= 0) {
          size_t v14 = (const char *)__dst;
        }
        else {
          size_t v14 = (const char *)__dst[0];
        }
        int v15 = getpwnam(v14);
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = 0;
          size_t v18 = &v4[v8];
          char v19 = &v1[(void)v3];
          *(void *)&long long v36 = 0;
          size_t v20 = v19 - &v4[v8];
          if (*((void *)&v36 + 1) < v20) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v18 != v19)
          {
            memcpy(v35, v18, v20);
            uint64_t v17 = v36;
          }
          size_t v21 = (const char *)(v17 + v20);
          *(void *)&long long v36 = v17 + v20;
          a1[1] = 0;
          pw_dir = v16->pw_dir;
          size_t v23 = strlen(pw_dir);
          size_t v24 = v23;
          if ((unint64_t)a1[2] < v23) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          int v25 = 0;
          if (v23)
          {
            memcpy(*a1, pw_dir, v23);
            int v25 = (char *)a1[1];
            size_t v21 = (const char *)v36;
          }
          a1[1] = &v25[v24];
          __int16 v32 = 261;
          v31[0] = (const char *)v35;
          v31[1] = v21;
          __int16 v30 = 257;
          __int16 v28 = 257;
          v26[16] = 257;
          llvm::sys::path::append(a1, 0, v31, &v29, (uint64_t)v27, (uint64_t)v26);
        }
        if (v12 < 0) {
          operator delete(v13);
        }
      }
      else if (llvm::sys::path::home_directory((uint64_t)&v35))
      {
        *(unsigned char *)*a1 = *(unsigned char *)v35;
        sub_1CD502128((uint64_t *)a1, (uint64_t)*a1 + 1, (char *)v35 + 1, (char *)v35 + v36);
      }
      if (v35 != v37) {
        free(v35);
      }
    }
  }
}

uint64_t sub_1CD0E6A50(int a1, int *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *__error();
    unint64_t v5 = std::generic_category();
    if (v5 == std::generic_category() && v4 == 2)
    {
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 40) = 0xFFFF00000001;
      *(_DWORD *)(a3 + 48) = 0;
      *(_WORD *)(a3 + 52) = 0;
      *(void *)(a3 + 56) = 0;
      return 2;
    }
    else
    {
      *(_OWORD *)(a3 + 28) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 44) = 0xFFFFLL;
      *(_WORD *)(a3 + 52) = 0;
      *(void *)(a3 + 56) = 0;
    }
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 5);
    uint64_t v8 = *((void *)a2 + 7);
    unsigned int v9 = *((unsigned __int16 *)a2 + 2);
    int v10 = v9 & 0xFFF;
    int v11 = sub_1CD0E81EC(v9);
    int v12 = *a2;
    __int16 v13 = *((_WORD *)a2 + 3);
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v15 = *((void *)a2 + 6);
    uint64_t v16 = *((void *)a2 + 12);
    uint64_t v17 = *((void *)a2 + 2);
    *(void *)a3 = *((void *)a2 + 4);
    *(void *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v8;
    *(void *)(a3 + 24) = v17;
    *(void *)(a3 + 32) = v16;
    *(_DWORD *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 44) = v10;
    *(_DWORD *)(a3 + 48) = v12;
    *(_WORD *)(a3 + 52) = v13;
    *(void *)(a3 + 56) = v14;
    std::system_category();
    return 0;
  }
  return v4;
}

uint64_t llvm::sys::fs::status(llvm::sys::fs *this, uint64_t a2, llvm::sys::fs::file_status *a3)
{
  int v4 = fstat((int)this, &v6);
  return sub_1CD0E6A50(v4, &v6.st_dev, a2);
}

uint64_t llvm::sys::fs::getUmask(llvm::sys::fs *this)
{
  uint64_t v1 = umask(0);
  umask(v1);
  return v1;
}

uint64_t llvm::sys::fs::setPermissions(unsigned __int8 *a1, mode_t a2)
{
  v8[16] = *MEMORY[0x1E4F143B8];
  stat v6 = v8;
  long long v7 = xmmword_1CFAC3020;
  int v3 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v6);
  if (chmod(v3, a2))
  {
    uint64_t v4 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    uint64_t v4 = 0;
  }
  if (v6 != v8) {
    free(v6);
  }
  return v4;
}

uint64_t llvm::sys::fs::setPermissions(int a1, mode_t a2)
{
  if (fchmod(a1, a2))
  {
    uint64_t v2 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v2;
}

uint64_t llvm::sys::fs::setLastAccessAndModificationTime(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  __t.tv_sec = a2 / 1000;
  __t.tv_sec = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  __t.tv_nsec = a2 % 1000000000;
  v8.__d_.__rep_ = a3 / 1000;
  time_t v10 = std::chrono::system_clock::to_time_t(&v8);
  uint64_t v11 = a3 % 1000000000;
  if (futimens(a1, &__t))
  {
    uint64_t v6 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v6;
}

uint64_t llvm::sys::fs::mapped_file_region::init(size_t *a1, int a2, off_t a3, int a4)
{
  if (a4 == 1) {
    int v6 = 65;
  }
  else {
    int v6 = 66;
  }
  if (a4) {
    int v7 = 3;
  }
  else {
    int v7 = 1;
  }
  if (a4) {
    int v8 = v6;
  }
  else {
    int v8 = 24642;
  }
  unsigned int v9 = mmap(0, *a1, v7, v8, a2, a3);
  a1[1] = (size_t)v9;
  if (v9 == (void *)-1)
  {
    uint64_t v11 = *__error();
    std::generic_category();
    return v11;
  }
  else
  {
    std::system_category();
    return 0;
  }
}

uint64_t llvm::sys::fs::mapped_file_region::mapped_file_region(uint64_t a1, int a2, int a3, uint64_t a4, off_t a5, uint64_t *a6)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v8 = llvm::sys::fs::mapped_file_region::init((size_t *)a1, a2, a5, a3);
  *a6 = v8;
  a6[1] = v9;
  if (v8)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

{
  uint64_t v8;
  uint64_t v9;

  *(void *)a1 = a4;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v8 = llvm::sys::fs::mapped_file_region::init((size_t *)a1, a2, a5, a3);
  *a6 = v8;
  a6[1] = v9;
  if (v8)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

void *llvm::sys::fs::mapped_file_region::unmapImpl(llvm::sys::fs::mapped_file_region *this)
{
  uint64_t result = (void *)*((void *)this + 1);
  if (result) {
    return (void *)munmap(result, *(void *)this);
  }
  return result;
}

uint64_t llvm::sys::fs::mapped_file_region::sync(void **this)
{
  if (msync(this[1], (size_t)*this, 16))
  {
    uint64_t v1 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v1;
}

unint64_t llvm::sys::fs::detail::directory_iterator_construct(uint64_t a1, void *__src, size_t __n, char a4)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  int v25 = (char *)v27;
  long long v26 = xmmword_1CFAC3020;
  if (__n >= 0x81) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v7 = 0;
  if (__n)
  {
    memcpy(v25, __src, __n);
    uint64_t v7 = v26;
  }
  size_t v8 = v7 + __n;
  *(void *)&long long v26 = v8;
  if (v8 + 1 > *((void *)&v26 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  v25[v8] = 0;
  uint64_t v9 = opendir(v25);
  if (v9)
  {
    *(void *)a1 = v9;
    *(void *)&long long v16 = ".";
    *(_WORD *)&v18[8] = 259;
    __int16 v24 = 257;
    __int16 v22 = 257;
    __int16 v20 = 257;
    llvm::sys::path::append(&v25, 0, (const char **)&v16, v23, (uint64_t)v21, (uint64_t)v19);
    __int16 v24 = 261;
    v23[0] = v25;
    v23[1] = (void *)v26;
    llvm::Twine::str((llvm::Twine *)v23, &v16);
    *(_DWORD *)size_t v18 = 9;
    void v18[4] = a4;
    memset(&v18[8], 0, 44);
    *(_DWORD *)&v18[52] = 0xFFFF;
    time_t v10 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)time_t v10 = v16;
    *(void *)(a1 + 24) = v17;
    long long v11 = *(_OWORD *)&v18[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v18;
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v18[32];
    *(void *)(a1 + 80) = *(void *)&v18[48];
    unint64_t v12 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)a1);
    unsigned int v13 = v12;
    unint64_t v14 = v12 & 0xFFFFFFFF00000000;
  }
  else
  {
    unsigned int v13 = *__error();
    std::generic_category();
    unint64_t v14 = 0;
  }
  if (v25 != (char *)v27) {
    free(v25);
  }
  return v14 | v13;
}

unint64_t llvm::sys::fs::detail::directory_iterator_increment(DIR **a1)
{
  *__error() = 0;
  uint64_t v2 = readdir(*a1);
  if (!v2)
  {
    if (!*__error())
    {
      uint64_t v12 = llvm::sys::fs::detail::directory_iterator_destruct((uint64_t)a1);
      unint64_t v8 = v12 & 0xFFFFFFFF00000000;
      unsigned int v7 = v12;
      return v8 | v7;
    }
    unsigned int v7 = *__error();
    std::generic_category();
    goto LABEL_5;
  }
  int v3 = v2;
  d_name = v2->d_name;
  unint64_t v5 = (const char *)strlen(v2->d_name);
  if (v5 == (const char *)2)
  {
    if (*d_name != 46) {
      goto LABEL_4;
    }
    int v10 = v3->d_name[1];
LABEL_10:
    if (v10 == 46)
    {
      uint64_t v11 = llvm::sys::fs::detail::directory_iterator_increment(a1);
      unsigned int v7 = v11;
      unint64_t v8 = v11 & 0xFFFFFFFF00000000;
      return v8 | v7;
    }
    goto LABEL_4;
  }
  if (v5 == (const char *)1)
  {
    int v10 = *(unsigned __int8 *)d_name;
    goto LABEL_10;
  }
LABEL_4:
  __int16 v16 = 261;
  v15[0] = d_name;
  v15[1] = v5;
  int v6 = sub_1CD0E81EC((v3->d_type & 0xF) << 12);
  long long v14 = 0u;
  memset(v13, 0, sizeof(v13));
  HIDWORD(v14) = 0xFFFF;
  llvm::sys::fs::directory_entry::replace_filename((uint64_t)(a1 + 1), v15, v6, v13);
  std::system_category();
  unsigned int v7 = 0;
LABEL_5:
  unint64_t v8 = 0;
  return v8 | v7;
}

uint64_t llvm::sys::fs::detail::directory_iterator_destruct(uint64_t a1)
{
  uint64_t v2 = *(DIR **)a1;
  if (v2) {
    closedir(v2);
  }
  *(void *)a1 = 0;
  int v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v3);
  }
  *int v3 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  *(unsigned char *)(a1 + 36) = 1;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0xFFFF;
  std::system_category();
  return 0;
}

uint64_t llvm::sys::fs::directory_entry::status@<X0>(llvm::sys::fs::directory_entry *this@<X0>, uint64_t a2@<X8>)
{
  memset(v8, 0, 44);
  *(_DWORD *)&v8[44] = 0xFFFF;
  __int16 v7 = 260;
  int v6 = this;
  uint64_t result = llvm::sys::fs::status((llvm::sys::fs *)&v6, (const llvm::Twine *)v8, (llvm::sys::fs::file_status *)*((unsigned __int8 *)this + 28));
  if (result)
  {
    *(unsigned char *)(a2 + 48) |= 1u;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v4;
  }
  else
  {
    *(unsigned char *)(a2 + 48) &= ~1u;
    long long v5 = *(_OWORD *)&v8[16];
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v8[32];
  }
  return result;
}

uint64_t llvm::sys::fs::openFile(unsigned __int8 *a1, int *a2, int a3, int a4, int a5, uint64_t a6)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  int v9 = 2 * (a4 == 3);
  if (a4 == 2) {
    int v9 = 1;
  }
  if (a4 == 1) {
    int v9 = 0;
  }
  int v10 = a5 & 4;
  if ((a5 & 4) != 0) {
    a3 = 3;
  }
  int v12 = v9 | 0xA00;
  int v13 = v9 | 0x600;
  if (a3 == 3) {
    v9 |= 0x200u;
  }
  if (!a3) {
    int v9 = v13;
  }
  if (a3 == 1) {
    int v14 = v12;
  }
  else {
    int v14 = v9;
  }
  __int16 v20 = v22;
  long long v21 = xmmword_1CFAC3020;
  uint64_t v15 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v20);
  int v16 = v14 | ((a5 << 20) & 0x1000000 | (2 * v10)) ^ 0x1000000;
  while (1)
  {
    *__error() = 0;
    int v17 = open(v15, v16, a6);
    if (v17 != -1) {
      break;
    }
    if (*__error() != 4)
    {
      *a2 = -1;
      goto LABEL_24;
    }
  }
  *a2 = v17;
  if ((v17 & 0x80000000) == 0)
  {
    std::system_category();
    uint64_t v18 = 0;
    goto LABEL_19;
  }
LABEL_24:
  uint64_t v18 = *__error();
  std::generic_category();
LABEL_19:
  if (v20 != v22) {
    free(v20);
  }
  return v18;
}

uint64_t llvm::sys::fs::getRealPathFromHandle(int a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (fcntl(a1, 50, __s) == -1)
  {
    uint64_t v6 = *__error();
    std::generic_category();
  }
  else
  {
    size_t v3 = strlen(__s);
    size_t v4 = v3;
    uint64_t v5 = a2[1];
    if (a2[2] < v5 + v3) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v3)
    {
      memcpy((void *)(*a2 + v5), __s, v3);
      uint64_t v5 = a2[1];
    }
    a2[1] = v5 + v4;
    std::system_category();
    return 0;
  }
  return v6;
}

llvm *llvm::sys::fs::openNativeFileForRead@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = 0;
  uint64_t result = (llvm *)llvm::sys::fs::openFileForRead(a1, &v7, a2, a3);
  if (result)
  {
    uint64_t result = (llvm *)llvm::errorCodeToError(result, v6, (void *)a4);
    *(unsigned char *)(a4 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v7;
  }
  return result;
}

uint64_t llvm::sys::fs::getStdoutHandle(llvm::sys::fs *this)
{
  return 1;
}

uint64_t llvm::sys::fs::getStderrHandle(llvm::sys::fs *this)
{
  return 2;
}

ssize_t llvm::sys::fs::readNativeFileSlice@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, off_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3 >= 0x7FFFFFFF) {
    size_t v9 = 0x7FFFFFFFLL;
  }
  else {
    size_t v9 = a3;
  }
  do
  {
    *__error() = 0;
    ssize_t result = pread(a1, a2, v9, a4);
    if (result != -1)
    {
      *(unsigned char *)(a5 + 8) &= ~1u;
      goto LABEL_6;
    }
  }
  while (*__error() == 4);
  uint64_t v11 = (llvm *)*__error();
  *(void *)&v13.__val_ = std::generic_category();
  llvm::errorCodeToError(v11, v13, &v12);
  *(unsigned char *)(a5 + 8) |= 1u;
  ssize_t result = v12;
LABEL_6:
  *(void *)a5 = result;
  return result;
}

uint64_t llvm::sys::fs::tryLockFile(int a1, uint64_t a2)
{
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  while (1)
  {
    v6[1] = 0;
    void v6[2] = 0x300000000;
    v6[0] = 0;
    if (fcntl(a1, 8, v6) != -1) {
      break;
    }
    unsigned int v4 = *__error();
    if (v4 != 13 && v4 != 35) {
      goto LABEL_7;
    }
    usleep(0x3E8u);
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v3.__d_.__rep_)
    {
      unsigned int v4 = 77;
LABEL_7:
      std::generic_category();
      return v4;
    }
  }
  std::system_category();
  return 0;
}

uint64_t llvm::sys::fs::closeFile(llvm::sys::fs *this, int *a2)
{
  uint64_t v2 = (llvm::sys::Process *)*(unsigned int *)this;
  *(_DWORD *)this = -1;
  return llvm::sys::Process::SafelyCloseFileDescriptor(v2);
}

unint64_t llvm::sys::fs::remove_directories(llvm::sys::fs *this, const llvm::Twine *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  LODWORD(v21) = 0;
  __int16 v22 = std::system_category();
  sub_1CD501E54((uint64_t)&v19, (void **)this, &v21, 0);
  uint64_t v16 = 0;
  int v17 = 0;
  char v18 = 1;
  if (sub_1CC22AEBC((uint64_t *)&v19, &v16))
  {
LABEL_2:
    std::system_category();
    unint64_t v4 = 0;
    LODWORD(v5) = 0;
    goto LABEL_16;
  }
  while (1)
  {
    std::error_code v6 = (void **)(v19 + 1);
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v19 + 1), (uint64_t)&v23);
    if (v25) {
      break;
    }
    if (v24 == 3)
    {
      unint64_t v5 = sub_1CD0E8214(v6, (uint64_t)a2);
      unint64_t v21 = v5;
      __int16 v22 = v7;
      if (v5)
      {
        if ((a2 & 1) == 0) {
          goto LABEL_15;
        }
      }
    }
    __int16 v15 = 260;
    int v14 = v6;
    unint64_t v5 = llvm::sys::fs::remove((llvm::sys::fs *)&v14, (const llvm::Twine *)1);
    unint64_t v21 = v5;
    __int16 v22 = v8;
    if (v5)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_15;
      }
    }
LABEL_11:
    unint64_t v5 = llvm::sys::fs::detail::directory_iterator_increment(v19);
    unint64_t v21 = v5;
    __int16 v22 = v9;
    if (v5 && (a2 & 1) == 0) {
      goto LABEL_15;
    }
    if (sub_1CC22AEBC((uint64_t *)&v19, &v16)) {
      goto LABEL_2;
    }
  }
  if (a2) {
    goto LABEL_11;
  }
  unint64_t v5 = v23;
LABEL_15:
  unint64_t v4 = v5 & 0xFFFFFFFF00000000;
LABEL_16:
  int v10 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (!v5 || a2)
  {
    uint64_t v13 = llvm::sys::fs::remove(this, (const llvm::Twine *)1);
    if (!v13 || (a2 & 1) != 0)
    {
      std::system_category();
      unint64_t v4 = 0;
      LODWORD(v5) = 0;
    }
    else
    {
      unint64_t v4 = v13 & 0xFFFFFFFF00000000;
      LODWORD(v5) = v13;
    }
  }
  return v4 | v5;
}

uint64_t llvm::sys::fs::changeFileOwnership(llvm::sys::fs *this, uid_t a2, gid_t a3)
{
  int v5 = (int)this;
  while (1)
  {
    *__error() = 0;
    int v6 = fchown(v5, a2, a3);
    if (v6 != -1) {
      break;
    }
    if (*__error() != 4) {
      goto LABEL_7;
    }
  }
  if ((v6 & 0x80000000) == 0)
  {
    std::system_category();
    return 0;
  }
LABEL_7:
  uint64_t v7 = *__error();
  std::generic_category();
  return v7;
}

passwd *llvm::sys::path::user_config_directory(void *a1)
{
  if (llvm::sys::path::home_directory((uint64_t)a1))
  {
    unint64_t v8 = "Library";
    __int16 v9 = 259;
    int v6 = "Preferences";
    __int16 v7 = 259;
  }
  else
  {
    ssize_t result = llvm::sys::path::home_directory((uint64_t)a1);
    if (!result) {
      return result;
    }
    unint64_t v8 = ".config";
    __int16 v9 = 259;
    __int16 v7 = 257;
  }
  __int16 v5 = 257;
  v3[16] = 257;
  llvm::sys::path::append(a1, 0, &v8, (void **)&v6, (uint64_t)v4, (uint64_t)v3);
  return (passwd *)1;
}

size_t sub_1CD0E7BE0(int a1, uint64_t a2)
{
  if (a1) {
    int v3 = 65537;
  }
  else {
    int v3 = 65538;
  }
  size_t result = confstr(v3, 0, 0);
  if (result)
  {
    size_t v5 = result;
    size_t v6 = *(void *)(a2 + 8);
    while (1)
    {
      if (v6 == v5)
      {
        size_t v5 = v6;
      }
      else
      {
        if (v6 <= v5)
        {
          if (*(void *)(a2 + 16) < v5) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v5 != v6) {
            bzero((void *)(*(void *)a2 + v6), v5 - v6);
          }
        }
        *(void *)(a2 + 8) = v5;
      }
      size_t v5 = confstr(v3, *(char **)a2, v5);
      size_t result = v5 != 0;
      if (!v5) {
        break;
      }
      size_t v6 = *(void *)(a2 + 8);
      if (v5 == v6)
      {
        size_t v7 = v5 - 1;
        goto LABEL_18;
      }
    }
    size_t v7 = 0;
LABEL_18:
    *(void *)(a2 + 8) = v7;
  }
  return result;
}

uint64_t llvm::sys::fs::TempFile::TempFile(uint64_t a1, const void *a2, size_t a3, int a4)
{
  *(unsigned char *)a1 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v4 = operator new(v9 + 1);
    *(void *)(a1 + 16) = a3;
    *(void *)(a1 + 24) = v10 | 0x8000000000000000;
    *(void *)(a1 + 8) = v4;
  }
  else
  {
    *(unsigned char *)(a1 + 31) = a3;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v4, a2, a3);
LABEL_9:
  *((unsigned char *)v4 + a3) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  return a1;
}

{
  void *v4;
  uint64_t v9;
  uint64_t v10;

  *(unsigned char *)a1 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v4 = operator new(v9 + 1);
    *(void *)(a1 + 16) = a3;
    *(void *)(a1 + 24) = v10 | 0x8000000000000000;
    *(void *)(a1 + 8) = v4;
  }
  else
  {
    *(unsigned char *)(a1 + 31) = a3;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v4, a2, a3);
LABEL_9:
  *((unsigned char *)v4 + a3) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  return a1;
}

uint64_t llvm::sys::fs::TempFile::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 32) = -1;
  return a1;
}

__n128 llvm::sys::fs::TempFile::TempFile(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  __n128 result = *(__n128 *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

{
  __n128 result;

  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  __n128 result = *(__n128 *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void llvm::sys::fs::TempFile::~TempFile(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t llvm::sys::fs::TempFile::keep@<X0>(llvm::sys::fs::TempFile *this@<X0>, void *a2@<X8>)
{
  *(unsigned char *)this = 1;
  char v4 = *((unsigned char *)this + 31);
  long long v5 = (char *)this + 8;
  int v6 = v4;
  if (v4 >= 0) {
    size_t v7 = (char *)this + 8;
  }
  else {
    size_t v7 = (const std::string::value_type *)*((void *)this + 1);
  }
  std::string::size_type v8 = v4 & 0x7F;
  if (v6 >= 0) {
    std::string::size_type v9 = v8;
  }
  else {
    std::string::size_type v9 = *((void *)this + 2);
  }
  llvm::sys::DontRemoveFileOnSignal(v7, v9);
  MEMORY[0x1D25D9630](v5, &unk_1CFC2D2AF);
  uint64_t result = close(*((_DWORD *)this + 8));
  if (result == -1)
  {
    uint64_t v11 = (llvm *)*__error();
    *(void *)&v12.__val_ = std::generic_category();
    return llvm::errorCodeToError(v11, v12, a2);
  }
  else
  {
    *((_DWORD *)this + 8) = -1;
    *a2 = 0;
  }
  return result;
}

void llvm::sys::fs::TempFile::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  int v17 = 0;
  char v18 = v20;
  long long v19 = xmmword_1CFAC3020;
  long long v5 = (llvm *)sub_1CD0E5038(a1, &v17, &v18, 0, 1, a3 | 8u, a2);
  if (!v5)
  {
    std::string::size_type v8 = v18;
    size_t v7 = (void *)v19;
    int v9 = v17;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if ((unint64_t)v19 >= 0x17)
    {
      uint64_t v11 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)v19 | 7) != 0x17) {
        uint64_t v11 = v19 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v10 = operator new(v11 + 1);
      __p[1] = v7;
      unint64_t v14 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v14) = v19;
      uint64_t v10 = __p;
      if (!(void)v19)
      {
LABEL_11:
        *((unsigned char *)v7 + (void)v10) = 0;
        int v15 = v9;
        llvm::sys::RemoveFileOnSignal((std::string::value_type *)v18, v19);
      }
    }
    memmove(v10, v8, (size_t)v7);
    goto LABEL_11;
  }
  llvm::errorCodeToError(v5, v6, &v16);
  *(unsigned char *)(a4 + 40) |= 1u;
  *(void *)a4 = v16;
  if (v18 != v20) {
    free(v18);
  }
}

uint64_t sub_1CD0E81EC(unsigned int a1)
{
  unsigned int v1 = (a1 >> 12) ^ 8;
  if (v1 == 15) {
    return 9;
  }
  else {
    return dword_1CFB3149C[v1];
  }
}

unint64_t sub_1CD0E8214(void **a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::system_category();
  char v25 = 0;
  char v4 = (char *)operator new(0x70uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)char v4 = &unk_1F2609200;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 9;
  v4[60] = 1;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *(_OWORD *)(v4 + 92) = 0u;
  *((_DWORD *)v4 + 27) = 0xFFFF;
  int v24 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 24) = 0u;
  long long v5 = (DIR **)(v4 + 24);
  char v6 = *((unsigned char *)a1 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    std::string::size_type v8 = a1;
  }
  else {
    std::string::size_type v8 = *a1;
  }
  size_t v9 = v6 & 0x7F;
  if (v7) {
    size_t v10 = (size_t)a1[1];
  }
  else {
    size_t v10 = v9;
  }
  unint64_t v23 = v5;
  llvm::sys::fs::detail::directory_iterator_construct((uint64_t)v5, v8, v10, 0);
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  char v22 = 1;
  if (sub_1CC22AEBC((uint64_t *)&v23, &v20))
  {
LABEL_8:
    std::system_category();
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v13 = v23 + 1;
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v23 + 1), (uint64_t)&v26);
    if (v28) {
      break;
    }
    if (v27 == 3)
    {
      uint64_t v14 = sub_1CD0E8214(v13, a2);
      uint64_t v12 = v14;
      if (v14)
      {
        if ((a2 & 1) == 0) {
          goto LABEL_21;
        }
      }
    }
    __int16 v19 = 260;
    char v18 = v13;
    uint64_t v14 = llvm::sys::fs::remove((llvm::sys::fs *)&v18, (const llvm::Twine *)1);
    uint64_t v12 = v14;
    if (v14)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_17:
    uint64_t v14 = llvm::sys::fs::detail::directory_iterator_increment(v23);
    uint64_t v12 = v14;
    if (v14 && (a2 & 1) == 0) {
      goto LABEL_21;
    }
    if (sub_1CC22AEBC((uint64_t *)&v23, &v20)) {
      goto LABEL_8;
    }
  }
  if (a2) {
    goto LABEL_17;
  }
  uint64_t v14 = v26;
  uint64_t v12 = v26;
LABEL_21:
  unint64_t v11 = v14 & 0xFFFFFFFF00000000;
LABEL_22:
  int v15 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return v12 | v11;
}

void llvm::sys::Process::FindInEnvPath(const std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unsigned char *a6@<X8>)
{
}

void llvm::sys::Process::FindInEnvPath(const std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, unsigned char *a8@<X8>)
{
  v54[16] = *MEMORY[0x1E4F143B8];
  *a8 = 0;
  a8[24] = 0;
  llvm::sys::Process::GetEnv(a1, a2, &__p);
  if (v46)
  {
    __s[0] = a7;
    __s[1] = 0;
    __int16 v52 = (const void **)v54;
    uint64_t v53 = 0x800000000;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      unint64_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v15 = strlen(__s);
    llvm::SplitString((uint64_t)p_p, size, (uint64_t)&v52, (unsigned __int8 *)__s, v15);
    int v17 = v52;
    if (v53)
    {
      __int16 v37 = &v52[2 * v53];
      int64_t v34 = a8;
      uint64_t v35 = 24 * a6;
      uint64_t v33 = a6;
      while (1)
      {
        size_t v18 = (size_t)v17[1];
        if (!v18) {
          goto LABEL_39;
        }
        __int16 v19 = *v17;
        if (a6)
        {
          uint64_t v20 = v35;
          unint64_t v21 = a5;
          do
          {
            char v22 = *((unsigned char *)v21 + 23);
            BOOL v23 = v22 < 0;
            int v24 = (uint64_t *)*v21;
            if (v22 >= 0) {
              int v24 = v21;
            }
            uint64_t v25 = v22 & 0x7F;
            if (v23) {
              uint64_t v25 = v21[1];
            }
            v51[4] = 261;
            *(void *)__src = v24;
            *(void *)&__src[8] = v25;
            __int16 v49 = 261;
            *(void *)&long long __dst = v19;
            *((void *)&__dst + 1) = v18;
            LOBYTE(v42[0]) = 0;
            if (!llvm::sys::fs::equivalent((llvm::sys::fs *)__src, (const llvm::Twine *)&__dst, (const llvm::Twine *)v42, v16))
            {
              if (LOBYTE(v42[0])) {
                goto LABEL_39;
              }
            }
            v21 += 3;
            v20 -= 24;
          }
          while (v20);
        }
        *(void *)__src = v51;
        *(_OWORD *)&__src[8] = xmmword_1CFAC3020;
        if (v18 >= 0x81) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        memcpy(v51, v19, v18);
        *(void *)&__src[8] += v18;
        __int16 v49 = 261;
        *(void *)&long long __dst = a3;
        *((void *)&__dst + 1) = a4;
        __int16 v43 = 257;
        __int16 v41 = 257;
        __int16 v39 = 257;
        llvm::sys::path::append(__src, 0, (const char **)&__dst, v42, (uint64_t)v40, (uint64_t)v38);
        __int16 v49 = 261;
        long long __dst = *(_OWORD *)__src;
        unsigned int v26 = llvm::sys::fs::access((unsigned __int8 *)&__dst, 0);
        int v27 = *(_WORD **)__src;
        uint64_t v28 = v26;
        if (!v26) {
          break;
        }
LABEL_36:
        if (v27 != v51) {
          free(v27);
        }
        if (!v28)
        {
LABEL_42:
          int v17 = v52;
          goto LABEL_43;
        }
LABEL_39:
        v17 += 2;
        if (v17 == v37) {
          goto LABEL_42;
        }
      }
      size_t v29 = *(void *)&__src[8];
      if (*(void *)&__src[8] >= 0x7FFFFFFFFFFFFFF8uLL) {
        abort();
      }
      if (*(void *)&__src[8] >= 0x17uLL)
      {
        uint64_t v31 = (*(void *)&__src[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(void *)&__src[8] | 7) != 0x17) {
          uint64_t v31 = *(void *)&__src[8] | 7;
        }
        uint64_t v32 = v31 + 1;
        p_dst = (long long *)operator new(v31 + 1);
        *((void *)&__dst + 1) = v29;
        unint64_t v48 = v32 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v48) = __src[8];
        p_dst = &__dst;
        if (!*(void *)&__src[8]) {
          goto LABEL_30;
        }
      }
      memmove(p_dst, v27, v29);
LABEL_30:
      *((unsigned char *)p_dst + v29) = 0;
      if (v34[24])
      {
        a6 = v33;
        if ((char)v34[23] < 0) {
          operator delete(*(void **)v34);
        }
        *(_OWORD *)int64_t v34 = __dst;
        *((void *)v34 + 2) = v48;
      }
      else
      {
        *(_OWORD *)int64_t v34 = __dst;
        *((void *)v34 + 2) = v48;
        v34[24] = 1;
        a6 = v33;
      }
      int v27 = *(_WORD **)__src;
      goto LABEL_36;
    }
LABEL_43:
    if (v17 != v54) {
      free(v17);
    }
    if (v46)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

uint64_t llvm::sys::Process::AreCoreFilesPrevented(llvm::sys::Process *this)
{
  return 1;
}

void llvm::sys::Process::getPageSize(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBD0C090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBD0C090))
  {
    dword_1EBD0C088 = getpagesize();
    __cxa_guard_release(&qword_1EBD0C090);
  }
  int v3 = dword_1EBD0C088;
  if (dword_1EBD0C088 == -1)
  {
    char v4 = (llvm *)*__error();
    *(void *)&v6.__val_ = std::generic_category();
    llvm::errorCodeToError(v4, v6, &v5);
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v5;
  }
  else
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = v3;
  }
}

uint64_t llvm::sys::Process::GetTimeUsage(void *a1, void *a2, void *a3)
{
  *a1 = 1000 * std::chrono::system_clock::now().__d_.__rep_;
  uint64_t result = getrusage(0, &v7);
  __darwin_time_t v6 = v7.ru_stime.tv_usec + 1000000 * v7.ru_stime.tv_sec;
  *a2 = 1000 * (v7.ru_utime.tv_usec + 1000000 * v7.ru_utime.tv_sec);
  *a3 = 1000 * v6;
  return result;
}

void (__cdecl *llvm::sys::Process::PreventCoreFiles(llvm::sys::Process *this))(int)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v7.rlim_cur = 0;
  v7.rlim_max = 0;
  setrlimit(4, &v7);
  mach_msg_type_number_t masksCnt = 0;
  unsigned int v1 = (task_t *)MEMORY[0x1E4F14960];
  if (task_get_exception_ports(*MEMORY[0x1E4F14960], 0x1BFEu, masks, &masksCnt, old_handlers, old_behaviors, old_flavors))
  {
    BOOL v2 = 1;
  }
  else
  {
    BOOL v2 = masksCnt == 0;
  }
  if (!v2)
  {
    int v3 = 0;
    do
    {
      task_set_exception_ports(*v1, masks[v3], 0, old_behaviors[v3], old_flavors[v3]);
      ++v3;
    }
    while (v3 != masksCnt);
  }
  char v4 = (void (__cdecl *)(int))MEMORY[0x1E4F144E8];
  signal(6, MEMORY[0x1E4F144E8]);
  signal(4, v4);
  signal(8, v4);
  signal(11, v4);
  return signal(10, v4);
}

uint64_t llvm::sys::Process::FixupStandardFileDescriptors(llvm::sys::Process *this)
{
  uint64_t v1 = 0;
  int v2 = 0;
  int v3 = -1;
  while (2)
  {
    int v4 = dword_1CFB314D8[v1];
    *__error() = 0;
    while (1)
    {
      *__error() = 0;
      int v5 = fstat(v4, &v9);
      if (v5 != -1) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_7;
      }
    }
    if (v5 < 0)
    {
LABEL_7:
      if (*__error() != 9) {
        goto LABEL_21;
      }
    }
    if (!*__error()) {
      goto LABEL_17;
    }
    if (v3 < 0)
    {
      while (1)
      {
        *__error() = 0;
        int v6 = open("/dev/null", 2);
        if (v6 != -1) {
          break;
        }
        if (*__error() != 4)
        {
          int v3 = -1;
          goto LABEL_21;
        }
      }
      int v3 = v6;
      if (v6 < 0) {
        goto LABEL_21;
      }
    }
    if (v3 == v4)
    {
      int v2 = 1;
      int v3 = v4;
      goto LABEL_17;
    }
    if (dup2(v3, v4) < 0)
    {
LABEL_21:
      uint64_t v7 = *__error();
      std::generic_category();
      if (v2) {
        return v7;
      }
      goto LABEL_22;
    }
LABEL_17:
    if (++v1 != 3) {
      continue;
    }
    break;
  }
  std::system_category();
  uint64_t v7 = 0;
  if (!v2)
  {
LABEL_22:
    if ((v3 & 0x80000000) == 0) {
      close(v3);
    }
  }
  return v7;
}

uint64_t llvm::sys::Process::SafelyCloseFileDescriptor(llvm::sys::Process *this)
{
  int v1 = (int)this;
  sigset_t v5 = -1;
  sigset_t v6 = -1;
  int v2 = pthread_sigmask(3, &v6, &v5);
  if (!v2)
  {
    if (close(v1) < 0)
    {
      unsigned int v3 = *__error();
      int v2 = pthread_sigmask(3, &v5, 0);
      if (v3) {
        goto LABEL_5;
      }
    }
    else
    {
      int v2 = pthread_sigmask(3, &v5, 0);
    }
  }
  unsigned int v3 = v2;
LABEL_5:
  std::generic_category();
  return v3;
}

BOOL llvm::sys::Process::StandardInIsUserInput(llvm::sys::Process *this)
{
  return isatty(0) != 0;
}

BOOL llvm::sys::Process::StandardOutIsDisplayed(llvm::sys::Process *this)
{
  return isatty(1) != 0;
}

uint64_t llvm::sys::Process::StandardOutColumns(llvm::sys::Process *this)
{
  uint64_t result = isatty(1);
  if (result)
  {
    int v2 = getenv("COLUMNS");
    if (!v2) {
      return 0;
    }
    uint64_t result = atoi(v2);
    if ((int)result <= 0) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::sys::Process::StandardErrColumns(llvm::sys::Process *this)
{
  uint64_t result = isatty(2);
  if (result)
  {
    int v2 = getenv("COLUMNS");
    if (!v2) {
      return 0;
    }
    uint64_t result = atoi(v2);
    if ((int)result <= 0) {
      return 0;
    }
  }
  return result;
}

char *checkTerminalEnvironmentForColors(void)
{
  uint64_t result = getenv("TERM");
  if (!result) {
    return result;
  }
  int v1 = result;
  size_t v2 = strlen(result);
  if (v2 == 6)
  {
    if (*(_DWORD *)v1 ^ 0x77677963 | *((unsigned __int16 *)v1 + 2) ^ 0x6E69) {
      unsigned int v3 = 0;
    }
    else {
      unsigned int v3 = 257;
    }
    goto LABEL_16;
  }
  if (v2 == 5)
  {
    if (*(_DWORD *)v1 ^ 0x756E696C | v1[4] ^ 0x78) {
      unsigned int v3 = 0;
    }
    else {
      unsigned int v3 = 257;
    }
LABEL_23:
    BOOL v4 = v2 < 5;
    if (v2 >= 5 && v3 <= 0xFF)
    {
      BOOL v4 = 0;
      if (v1[4] == 109 && *(_DWORD *)v1 == 1919251576) {
        unsigned int v3 = 257;
      }
    }
    if (!v4 && v3 <= 0xFF)
    {
      BOOL v4 = 0;
      if (v1[4] == 48 && *(_DWORD *)v1 == 808547446) {
        unsigned int v3 = 257;
      }
    }
    goto LABEL_37;
  }
  if (v2 != 4)
  {
    unsigned int v3 = 0;
LABEL_16:
    if (v2 >= 6 && v3 <= 0xFF && *((_WORD *)v1 + 2) == 28261 && *(_DWORD *)v1 == 1701995379) {
      unsigned int v3 = 257;
    }
    goto LABEL_23;
  }
  if (*(_DWORD *)v1 == 1769172577) {
    unsigned int v3 = 257;
  }
  else {
    unsigned int v3 = 0;
  }
  BOOL v4 = 1;
LABEL_37:
  if (v2 >= 4 && v3 <= 0xFF && *(_DWORD *)v1 == 1953921138) {
    unsigned int v3 = 257;
  }
  if (v3 > 0xFF) {
    BOOL v4 = 1;
  }
  if (!v4 && v1[v2 - 1] == 114 && *(_DWORD *)&v1[v2 - 5] == 1869377379) {
    unsigned int v3 = 257;
  }
  if ((_BYTE)v3) {
    BOOL v9 = v3 >> 8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  return (char *)!v9;
}

char *llvm::sys::Process::StandardOutHasColors(llvm::sys::Process *this)
{
  uint64_t result = (char *)isatty(1);
  if (result)
  {
    return checkTerminalEnvironmentForColors();
  }
  return result;
}

_DWORD *llvm::sys::ProcessInfo::ProcessInfo(_DWORD *this)
{
  *this = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[2] = 0;
  return this;
}

BOOL sub_1CD0E8F3C(pid_t *a1, const void *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  v94[0] = 261;
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v92.__r_.__value_.__l.__size_ = a3;
  if (llvm::sys::fs::access((unsigned __int8 *)&v92, 0))
  {
    if (!a10) {
      return 0;
    }
    v88[23] = 12;
    strcpy(v88, "Executable \"");
    if (!a2)
    {
      unint64_t v21 = 0;
      char v22 = 0;
      char v23 = 0;
      memset(v98, 0, sizeof(v98));
LABEL_46:
      BOOL v38 = v23 < 0;
      if (v23 >= 0) {
        __int16 v39 = (const std::string::value_type *)v98;
      }
      else {
        __int16 v39 = v22;
      }
      std::string::size_type v40 = v23 & 0x7F;
      if (v38) {
        std::string::size_type v41 = (std::string::size_type)v21;
      }
      else {
        std::string::size_type v41 = v40;
      }
      uint64_t v42 = std::string::append((std::string *)v88, v39, v41);
      std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      __dst[23] = 16;
      strcpy(__dst, "\" doesn't exist!");
      uint64_t v44 = std::string::append(&v92, __dst, 0x10uLL);
      std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
      *(void *)unint64_t v99 = v44->__r_.__value_.__l.__size_;
      *(void *)&v99[7] = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
      char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a10 + 23) < 0) {
        operator delete(*(void **)a10);
      }
      uint64_t v47 = *(void *)v99;
      *(void *)a10 = v45;
      *(void *)(a10 + 8) = v47;
      *(void *)(a10 + 15) = *(void *)&v99[7];
      *(unsigned char *)(a10 + 23) = v46;
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98[2]) < 0) {
        operator delete((void *)v98[0]);
      }
      if ((v88[23] & 0x80000000) != 0) {
        operator delete(*(void **)v88);
      }
      return 0;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        uint64_t v36 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17) {
          uint64_t v36 = a3 | 7;
        }
        uint64_t v37 = v36 + 1;
        size_t v18 = (const void **)operator new(v36 + 1);
        v98[1] = (const void *)a3;
        v98[2] = (const void *)(v37 | 0x8000000000000000);
        v98[0] = v18;
      }
      else
      {
        HIBYTE(v98[2]) = a3;
        size_t v18 = v98;
        if (!a3) {
          goto LABEL_45;
        }
      }
      memmove(v18, a2, a3);
LABEL_45:
      *((unsigned char *)v18 + a3) = 0;
      char v23 = HIBYTE(v98[2]);
      unint64_t v21 = v98[1];
      char v22 = (const std::string::value_type *)v98[0];
      goto LABEL_46;
    }
LABEL_73:
    abort();
  }
  uint64_t v78 = a1;
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = 0uLL;
  v92.__r_.__value_.__r.__words[2] = (std::string::size_type)v94;
  uint64_t v93 = 0x400000000;
  uint64_t v95 = v97;
  uint64_t v96 = 0;
  v97[0] = 0;
  v97[1] = 1;
  *(void *)unint64_t v99 = &v92;
  sub_1CD0E9FE0((char **)v88, a4, a5, (uint64_t **)v99);
  __int16 v19 = *(char *const **)v88;
  if (*(unsigned char *)(a6 + 16))
  {
    sub_1CD0E9FE0((char **)v88, *(void *)a6, *(void *)(a6 + 8), (uint64_t **)v99);
    uint64_t v20 = *(char ***)v88;
  }
  else
  {
    uint64_t v20 = 0;
  }
  std::string __p = (char **)v19;
  if (a9)
  {
    pid_t v24 = fork();
    if (v24)
    {
      if (v24 != -1)
      {
        *a1 = v24;
        a1[1] = v24;
        BOOL v25 = 1;
        goto LABEL_108;
      }
      v88[23] = 13;
      strcpy(v88, "Couldn't fork");
      sub_1CD0E9E1C(a10, (const void **)v88, 0xFFFFFFFFLL);
LABEL_16:
      BOOL v25 = 0;
      goto LABEL_108;
    }
    if (a8)
    {
      long long v84 = *a7;
      uint64_t v85 = *((void *)a7 + 2);
      BOOL v25 = 0;
      if (sub_1CD0EA2D4((uint64_t)&v84, 0, a10)) {
        goto LABEL_108;
      }
      long long v82 = *(long long *)((char *)a7 + 24);
      uint64_t v83 = *((void *)a7 + 5);
      if (sub_1CD0EA2D4((uint64_t)&v82, 1, a10)) {
        goto LABEL_16;
      }
      if (*((unsigned char *)a7 + 40)
        && *((unsigned char *)a7 + 64)
        && (size_t v48 = *((void *)a7 + 4), v48 == *((void *)a7 + 7))
        && (!v48 || !memcmp(*((const void **)a7 + 3), *((const void **)a7 + 6), v48)))
      {
        if (dup2(1, 2) == -1)
        {
          BOOL v69 = (char *)operator new(0x20uLL);
          *(void *)uint64_t v88 = v69;
          *(_OWORD *)&v88[8] = xmmword_1CDB15B60;
          strcpy(v69, "Can't redirect stderr to stdout");
          sub_1CD0E9E1C(a10, (const void **)v88, 0xFFFFFFFFLL);
          operator delete(v69);
          goto LABEL_16;
        }
      }
      else
      {
        long long v80 = a7[3];
        uint64_t v81 = *((void *)a7 + 8);
        if (sub_1CD0EA2D4((uint64_t)&v80, 2, a10)) {
          goto LABEL_16;
        }
      }
    }
    getrlimit(2, (rlimit *)v88);
    *(void *)uint64_t v88 = (unint64_t)a9 << 20;
    setrlimit(2, (const rlimit *)v88);
    getrlimit(5, (rlimit *)v88);
    *(void *)uint64_t v88 = (unint64_t)a9 << 20;
    setrlimit(5, (const rlimit *)v88);
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_73;
    }
    if (a3 >= 0x17)
    {
      uint64_t v73 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v73 = a3 | 7;
      }
      uint64_t v74 = v73 + 1;
      size_t v72 = operator new(v73 + 1);
      *(void *)&v88[8] = a3;
      *(void *)&v88[16] = v74 | 0x8000000000000000;
      *(void *)uint64_t v88 = v72;
    }
    else
    {
      v88[23] = a3;
      size_t v72 = v88;
      if (!a3)
      {
LABEL_136:
        v72[a3] = 0;
        if (v88[23] >= 0) {
          int v75 = v88;
        }
        else {
          int v75 = *(const char **)v88;
        }
        if (v20) {
          execve(v75, __p, v20);
        }
        else {
          execv(v75, __p);
        }
        if (*__error() == 2) {
          int v76 = 127;
        }
        else {
          int v76 = 126;
        }
        _exit(v76);
      }
    }
    memmove(v72, a2, a3);
    goto LABEL_136;
  }
  posix_spawn_file_actions_t v86 = 0;
  v91[0] = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  memset(v88, 0, sizeof(v88));
  int v77 = v20;
  if (!a8)
  {
    __int16 v49 = 0;
    goto LABEL_76;
  }
  uint64_t v26 = 0;
  memset(v98, 0, sizeof(v98));
  int v27 = v98;
  do
  {
    uint64_t v28 = (uint64_t)a7 + v26;
    if (!*((unsigned char *)a7 + v26 + 16)) {
      goto LABEL_31;
    }
    size_t v29 = *(void *)(v28 + 8);
    if (v29 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_73;
    }
    __int16 v30 = *(const void **)v28;
    if (v29 >= 0x17)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v31 = operator new(v32 + 1);
      *(void *)&__dst[8] = v29;
      *(void *)&__dst[16] = v33 | 0x8000000000000000;
      *(void *)long long __dst = v31;
    }
    else
    {
      __dst[23] = *(void *)(v28 + 8);
      uint64_t v31 = __dst;
      if (!v29) {
        goto LABEL_28;
      }
    }
    memmove(v31, v30, v29);
LABEL_28:
    v31[v29] = 0;
    int64_t v34 = &v88[v26];
    if ((char)v88[v26 + 23] < 0) {
      operator delete(*(void **)v34);
    }
    *(_OWORD *)int64_t v34 = *(_OWORD *)__dst;
    *((void *)v34 + 2) = *(void *)&__dst[16];
    _WORD *v27 = v34;
LABEL_31:
    v26 += 24;
    ++v27;
  }
  while (v26 != 72);
  posix_spawn_file_actions_init(&v86);
  if ((sub_1CD0EA1F0((uint64_t)v98[0], 0, a10, &v86) & 1) != 0
    || (sub_1CD0EA1F0((uint64_t)v98[1], 1, a10, &v86) & 1) != 0)
  {
    goto LABEL_40;
  }
  if (*((unsigned char *)a7 + 40)
    && *((unsigned char *)a7 + 64)
    && (size_t v35 = *((void *)a7 + 4), v35 == *((void *)a7 + 7))
    && (!v35 || !memcmp(*((const void **)a7 + 3), *((const void **)a7 + 6), v35)))
  {
    uint64_t v66 = posix_spawn_file_actions_adddup2(&v86, 1, 2);
    if (v66)
    {
      uint64_t v67 = v66;
      BOOL v68 = (char *)operator new(0x20uLL);
      *(void *)long long __dst = v68;
      *(_OWORD *)&__dst[8] = xmmword_1CDB15B60;
      strcpy(v68, "Can't redirect stderr to stdout");
      sub_1CD0E9E1C(a10, (const void **)__dst, v67);
      operator delete(v68);
      goto LABEL_40;
    }
  }
  else if (sub_1CD0EA1F0((uint64_t)v98[2], 2, a10, &v86))
  {
LABEL_40:
    BOOL v25 = 0;
    goto LABEL_103;
  }
  __int16 v49 = &v86;
  uint64_t v20 = v77;
LABEL_76:
  unsigned int v50 = 0;
  if (v20) {
    uint64_t v51 = v20;
  }
  else {
    uint64_t v51 = (char *const *)*MEMORY[0x1E4F147F0];
  }
  uint64_t v52 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17) {
    uint64_t v52 = a3 | 7;
  }
  size_t v53 = v52 + 1;
  uint64_t v54 = (const void *)((v52 + 1) | 0x8000000000000000);
  while (2)
  {
    *(_DWORD *)long long __dst = 0;
    if (a2)
    {
      if (a3 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_73;
      }
      if (a3 >= 0x17)
      {
        unsigned int v55 = (const void **)operator new(v53);
        v98[1] = (const void *)a3;
        v98[2] = v54;
        v98[0] = v55;
      }
      else
      {
        HIBYTE(v98[2]) = a3;
        unsigned int v55 = v98;
        if (!a3) {
          goto LABEL_90;
        }
      }
      memmove(v55, a2, a3);
LABEL_90:
      *((unsigned char *)v55 + a3) = 0;
      if (SHIBYTE(v98[2]) >= 0) {
        unsigned int v56 = (const char *)v98;
      }
      else {
        unsigned int v56 = (const char *)v98[0];
      }
    }
    else
    {
      memset(v98, 0, sizeof(v98));
      unsigned int v56 = (const char *)v98;
    }
    uint64_t v57 = posix_spawn((pid_t *)__dst, v56, v49, 0, v19, v51);
    if (SHIBYTE(v98[2]) < 0) {
      operator delete((void *)v98[0]);
    }
    if (v57 == 4 && v50++ < 7) {
      continue;
    }
    break;
  }
  if (v49) {
    posix_spawn_file_actions_destroy(v49);
  }
  BOOL v25 = v57 == 0;
  if (v57)
  {
    HIBYTE(v98[2]) = 18;
    strcpy((char *)v98, "posix_spawn failed");
    sub_1CD0E9E1C(a10, v98, v57);
  }
  else
  {
    pid_t v59 = *(_DWORD *)__dst;
    pid_t *v78 = *(_DWORD *)__dst;
    v78[1] = v59;
  }
LABEL_103:
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v91[i]) < 0) {
      operator delete((void *)v91[i - 2]);
    }
  }
  uint64_t v20 = v77;
LABEL_108:
  if (v20) {
    operator delete(v20);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v93)
  {
    int v61 = (uint64_t *)v92.__r_.__value_.__r.__words[2];
    uint64_t v62 = 8 * v93;
    do
    {
      uint64_t v63 = *v61++;
      MEMORY[0x1D25D9CD0](v63, 8);
      v62 -= 8;
    }
    while (v62);
  }
  uint64_t v64 = v95;
  if (v96)
  {
    uint64_t v70 = 16 * v96;
    do
    {
      uint64_t v71 = *v64;
      v64 += 2;
      MEMORY[0x1D25D9CD0](v71, 8);
      v70 -= 16;
    }
    while (v70);
    uint64_t v64 = v95;
  }
  if (v64 != v97) {
    free(v64);
  }
  if ((_WORD *)v92.__r_.__value_.__r.__words[2] != v94) {
    free((void *)v92.__r_.__value_.__r.__words[2]);
  }
  return v25;
}

uint64_t llvm::sys::ExecuteNoWait(const void *a1, std::string::size_type a2, uint64_t a3, uint64_t a4, long long *a5, long long *a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned char *a10)
{
  LODWORD(v14) = 0;
  int v15 = 0;
  if (a10) {
    *a10 = 0;
  }
  long long v12 = *a5;
  uint64_t v13 = *((void *)a5 + 2);
  BOOL v10 = sub_1CD0E8F3C((pid_t *)&v14, a1, a2, a3, a4, (uint64_t)&v12, a6, a7, a8, a9);
  if (a10 && !v10) {
    *a10 = 1;
  }
  return v14;
}

uint64_t llvm::sys::commandLineFitsWithinSystemLimits(uint64_t a1, uint64_t a2, const char **a3, unint64_t a4)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x800000000;
  if (a4 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    do
    {
      std::string::size_type v8 = *a3++;
      uint64_t v13 = v8;
      sub_1CC6B2D18((uint64_t)&v14, &v13);
      v7 -= 8;
    }
    while (v7);
    BOOL v9 = v14;
    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v10 = 0;
    BOOL v9 = v16;
  }
  uint64_t v11 = llvm::sys::commandLineFitsWithinSystemLimits(a1, a2, (uint64_t)v9, v10);
  if (v14 != v16) {
    free(v14);
  }
  return v11;
}

uint64_t llvm::sys::commandLineFitsWithinSystemLimits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCFB4B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCFB4B8))
  {
    qword_1EBCFB4B0 = sysconf(1);
    __cxa_guard_release(&qword_1EBCFB4B8);
  }
  if (qword_1EBCFB4B0 >= 0) {
    uint64_t v7 = qword_1EBCFB4B0;
  }
  else {
    uint64_t v7 = qword_1EBCFB4B0 + 1;
  }
  unint64_t v8 = v7 >> 1;
  if (qword_1EBCFB4B0 >= 0x20000) {
    unint64_t v8 = 0x10000;
  }
  if (qword_1EBCFB4B0 == -1 || !a4) {
    return 1;
  }
  unint64_t v9 = a2 + 1;
  uint64_t v10 = (unint64_t *)(a3 + 8);
  uint64_t v11 = 16 * a4;
  while (1)
  {
    unint64_t v13 = *v10;
    v10 += 2;
    unint64_t v12 = v13;
    if (v13 >> 17) {
      break;
    }
    v9 += v12 + 1;
    if (v9 > v8) {
      break;
    }
    v11 -= 16;
    if (!v11) {
      return 1;
    }
  }
  return 0;
}

double llvm::sys::findProgramByName@<D0>(void *__s@<X0>, size_t __n@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (__n)
  {
    uint64_t v10 = memchr(__s, 47, __n);
    if (v10)
    {
      if (v10 - (unsigned char *)__s != -1)
      {
        std::string::__init(&v35, (const std::string::value_type *)__s, __n);
        a5[1].__r_.__value_.__s.__data_[0] &= ~1u;
        double result = *(double *)&v35.__r_.__value_.__l.__data_;
        *a5 = v35;
        return result;
      }
    }
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35.__r_.__value_.__r.__words[2];
  v35.__r_.__value_.__l.__size_ = 0x1000000000;
  if (a4)
  {
    std::string::size_type v14 = a3 + 16 * a4;
  }
  else
  {
    uint64_t v11 = getenv("PATH");
    if (!v11
      || (uint64_t v12 = (uint64_t)v11,
          size_t v13 = strlen(v11),
          llvm::SplitString(v12, v13, (uint64_t)&v35, ":", 1),
          !LODWORD(v35.__r_.__value_.__r.__words[1])))
    {
      std::string::value_type v23 = a5[1].__r_.__value_.__s.__data_[0];
LABEL_19:
      a5[1].__r_.__value_.__s.__data_[0] = v23 | 1;
      char v22 = std::generic_category();
      a5->__r_.__value_.__r.__words[0] = 2;
      a5->__r_.__value_.__l.__size_ = (std::string::size_type)v22;
      goto LABEL_20;
    }
    a3 = v35.__r_.__value_.__r.__words[0];
    std::string::size_type v14 = v35.__r_.__value_.__r.__words[0] + 16 * LODWORD(v35.__r_.__value_.__r.__words[1]);
  }
  std::string::value_type v23 = a5[1].__r_.__value_.__s.__data_[0];
  while (1)
  {
    size_t v15 = *(void *)(a3 + 8);
    if (v15)
    {
      uint64_t v16 = *(const void **)a3;
      __sa = v34;
      long long __sz = xmmword_1CFAC3020;
      if (v15 >= 0x81) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      memcpy(v34, v16, v15);
      *(void *)&long long __sz = __sz + v15;
      __int16 v31 = 261;
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v30.__r_.__value_.__l.__size_ = __n;
      __int16 v29 = 257;
      __int16 v27 = 257;
      __int16 v25 = 257;
      llvm::sys::path::append(&__sa, 0, (const char **)&v30.__r_.__value_.__l.__data_, &v28, (uint64_t)v26, (uint64_t)v24);
      if ((unint64_t)(__sz + 1) > *((void *)&__sz + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      __sa[__sz] = 0;
      __int16 v31 = 257;
      if (*__sa)
      {
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)__sa;
        char v17 = 3;
      }
      else
      {
        char v17 = 1;
      }
      LOBYTE(v31) = v17;
      unsigned int v18 = llvm::sys::fs::access((unsigned __int8 *)&v30, 2);
      uint64_t v20 = __sa;
      uint64_t v21 = v18;
      if (!v18)
      {
        std::string::__init(&v30, __sa, __sz);
        v23 &= ~1u;
        a5[1].__r_.__value_.__s.__data_[0] = v23;
        double result = *(double *)&v30.__r_.__value_.__l.__data_;
        *a5 = v30;
        uint64_t v20 = __sa;
      }
      if (v20 != v34) {
        free(v20);
      }
      if (!v21) {
        break;
      }
    }
    a3 += 16;
    if (a3 == v14) {
      goto LABEL_19;
    }
  }
LABEL_20:
  if ((std::string::size_type *)v35.__r_.__value_.__l.__data_ != &v35.__r_.__value_.__r.__words[2]) {
    free(v35.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_1CD0E9E1C(uint64_t a1, const void **a2, uint64_t a3)
{
  _OWORD v21[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a3;
    if (a3 == -1) {
      uint64_t v3 = *__error();
    }
    char v6 = *((unsigned char *)a2 + 23);
    int v7 = v6;
    size_t v8 = v6 & 0x7F;
    if (v7 >= 0) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    uint64_t v10 = &v20;
    sub_1CB907098((uint64_t)&v20, v9 + 2);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *a2;
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, ": ");
    llvm::sys::StrError(v3, __p);
    if (v19 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v19 >= 0) {
      std::string::size_type v13 = v19 & 0x7F;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::size_type v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    v21[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    uint64_t v17 = v21[0];
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 15) = *(void *)((char *)v21 + 7);
    *(unsigned char *)(a1 + 23) = v16;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t llvm::sys::ChangeStdinToBinary(llvm::sys *this)
{
  return 0;
}

uint64_t llvm::sys::ChangeStdoutToBinary(llvm::sys *this)
{
  return 0;
}

void sub_1CD0E9FE0(char **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v6 = a2;
    int v7 = 0;
    uint64_t v8 = a2 + 16 * a3;
    do
    {
      uint64_t v10 = *(const void **)v6;
      size_t v9 = *(void *)(v6 + 8);
      uint64_t v11 = (unsigned char *)sub_1CB906F34(*a4, v9 + 1, 0);
      uint64_t v12 = v11;
      if (v9) {
        memcpy(v11, v10, v9);
      }
      v12[v9] = 0;
      unint64_t v13 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v13)
      {
        std::string::size_type v14 = *a1;
        uint64_t v15 = (v7 - *a1) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          goto LABEL_44;
        }
        uint64_t v17 = v13 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 61) {
            goto LABEL_45;
          }
          char v19 = (char *)operator new(8 * v18);
        }
        else
        {
          char v19 = 0;
        }
        std::string v20 = &v19[8 * v15];
        *(void *)std::string v20 = v12;
        uint64_t v21 = v20 + 8;
        if (v7 != v14)
        {
          do
          {
            uint64_t v22 = *((void *)v7 - 1);
            v7 -= 8;
            *((void *)v20 - 1) = v22;
            v20 -= 8;
          }
          while (v7 != v14);
          int v7 = *a1;
        }
        *a1 = v20;
        a1[1] = v21;
        a1[2] = &v19[8 * v18];
        if (v7) {
          operator delete(v7);
        }
        int v7 = v21;
      }
      else
      {
        *(void *)int v7 = v12;
        v7 += 8;
      }
      a1[1] = v7;
      v6 += 16;
    }
    while (v6 != v8);
    unint64_t v23 = (unint64_t)a1[2];
    if ((unint64_t)v7 < v23)
    {
      *(void *)int v7 = 0;
      pid_t v24 = v7 + 8;
      goto LABEL_43;
    }
    __int16 v25 = *a1;
  }
  else
  {
    __int16 v25 = 0;
    int v7 = 0;
    unint64_t v23 = 0;
  }
  uint64_t v26 = (v7 - v25) >> 3;
  unint64_t v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 61) {
LABEL_44:
  }
    abort();
  uint64_t v28 = v23 - (void)v25;
  if (v28 >> 2 > v27) {
    unint64_t v27 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v27;
  }
  if (v29)
  {
    if (v29 >> 61) {
LABEL_45:
    }
      sub_1CB833614();
    std::string v30 = (char *)operator new(8 * v29);
  }
  else
  {
    std::string v30 = 0;
  }
  __int16 v31 = &v30[8 * v26];
  *(void *)__int16 v31 = 0;
  pid_t v24 = v31 + 8;
  if (v7 != v25)
  {
    do
    {
      uint64_t v32 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v7 != v25);
    __int16 v25 = *a1;
  }
  *a1 = v31;
  a1[1] = v24;
  a1[2] = &v30[8 * v29];
  if (v25) {
    operator delete(v25);
  }
LABEL_43:
  a1[1] = v24;
}

uint64_t sub_1CD0EA1F0(uint64_t result, int a2, uint64_t a3, posix_spawn_file_actions_t *a4)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
    {
      if (*(void *)(result + 8)) {
        sigset_t v5 = *(const char **)result;
      }
      else {
        sigset_t v5 = "/dev/null";
      }
    }
    else if (*(unsigned char *)(result + 23))
    {
      sigset_t v5 = (const char *)result;
    }
    else
    {
      sigset_t v5 = "/dev/null";
    }
    if (a2) {
      int v6 = 513;
    }
    else {
      int v6 = 0;
    }
    double result = posix_spawn_file_actions_addopen(a4, a2, v5, v6, 0x1B6u);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = operator new(0x28uLL);
      size_t v9 = v8;
      long long v10 = xmmword_1CFB287C0;
      strcpy((char *)v8, "Cannot posix_spawn_file_actions_addopen");
      sub_1CD0E9E1C(a3, &v9, v7);
      operator delete(v8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CD0EA2D4(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  memset(&v22, 0, sizeof(v22));
  std::string::size_type v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    int v6 = *(const void **)a1;
    if (v5 >= 0x17)
    {
      uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v9 = v5 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(a1 + 8);
      p_dst = &__dst;
    }
    memmove(p_dst, v6, v5);
    p_dst->__r_.__value_.__s.__data_[v5] = 0;
    std::string v22 = __dst;
  }
  else
  {
    MEMORY[0x1D25D9630](&v22, "/dev/null");
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v22;
  }
  else {
    uint64_t v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if (a2) {
    int v12 = open((const char *)v11, 513, 438);
  }
  else {
    int v12 = open((const char *)v11, 0, 438);
  }
  if (v12 == -1)
  {
    std::operator+<char>();
    std::string::size_type v14 = std::string::append(&v19, "' for ");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (a2) {
      unint64_t v16 = "output";
    }
    else {
      unint64_t v16 = "input";
    }
    uint64_t v17 = std::string::append(&v20, v16);
    std::string __dst = *v17;
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    sub_1CD0E9E1C(a3, (const void **)&__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFLL);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v13 = v12;
    if (dup2(v12, a2) != -1)
    {
      close(v13);
      uint64_t v8 = 0;
      goto LABEL_32;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__dst, "Cannot dup2");
    sub_1CD0E9E1C(a3, (const void **)&__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFLL);
    close(v13);
  }
  uint64_t v8 = 1;
LABEL_32:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v8;
}

uint64_t llvm::sys::RunSignalHandlers(llvm::sys *this)
{
  for (uint64_t i = 0; i != 192; i += 24)
  {
    size_t v2 = (char *)&unk_1EA61F270 + i;
    int v3 = 2;
    atomic_compare_exchange_strong((atomic_uint *volatile)((char *)&unk_1EA61F270 + i + 16), (unsigned int *)&v3, 3u);
    if (v3 == 2)
    {
      uint64_t result = (*(uint64_t (**)(void))v2)(*((void *)v2 + 1));
      *(void *)size_t v2 = 0;
      *((void *)v2 + 1) = 0;
      atomic_store(0, (unsigned int *)((char *)&unk_1EA61F270 + i + 16));
    }
  }
  return result;
}

uint64_t sub_1CD0EA598(unsigned __int8 *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  v25[0] = (uint64_t)a1;
  v25[1] = a2;
  if (byte_1EA61E010
    || getenv("LLVM_DISABLE_SYMBOLIZATION")
    || llvm::StringRef::find(v25, "llvm-symbolizer", 0xFuLL, 0) != -1)
  {
    return 0;
  }
  uint64_t v7 = (std::error_category_vtbl *)std::system_category();
  char v34 = -1;
  v32[0].__vftable = 0;
  v32[1].__vftable = v7;
  uint64_t v8 = getenv("LLVM_SYMBOLIZER_PATH");
  if (v8)
  {
    uint64_t v17 = v8;
    size_t v18 = strlen(v8);
    std::string v19 = v17;
    p_p = 0;
    uint64_t v21 = 0;
  }
  else
  {
    if (!a2) {
      goto LABEL_13;
    }
    unint64_t v9 = sub_1CD0E3AC0(a1, a2, 0);
    unint64_t v10 = a2 >= v9 ? v9 : a2;
    if (v9 == -1)
    {
      unint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = a1;
    }
    std::string __p = v11;
    unint64_t v23 = v10;
    if (!v10) {
      goto LABEL_13;
    }
    std::string v19 = "llvm-symbolizer";
    p_p = &__p;
    size_t v18 = 15;
    uint64_t v21 = 1;
  }
  llvm::sys::findProgramByName(v19, v18, (std::string::size_type)p_p, v21, &v26);
  sub_1CD867958(v32, (long long *)&v26);
  if ((v27 & 1) == 0 && SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
LABEL_13:
  if (v34)
  {
    llvm::sys::findProgramByName("llvm-symbolizer", 0xFuLL, 0, 0, &v26);
    sub_1CD867958(v32, (long long *)&v26);
    if ((v27 & 1) == 0 && SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    char v15 = v34;
    if (v34) {
      goto LABEL_28;
    }
  }
  __int16 v28 = 261;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  v26.__r_.__value_.__l.__size_ = a2;
  if (!llvm::sys::fs::access((unsigned __int8 *)&v26, 0))
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_43;
    }
    if (a2 >= 0x17)
    {
      uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17) {
        uint64_t v13 = a2 | 7;
      }
      uint64_t v14 = v13 + 1;
      int v12 = operator new(v13 + 1);
      unint64_t v23 = a2;
      unint64_t v24 = v14 | 0x8000000000000000;
      std::string __p = v12;
    }
    else
    {
      HIBYTE(v24) = a2;
      int v12 = &__p;
      if (!a2) {
        goto LABEL_23;
      }
    }
    memmove(v12, a1, a2);
LABEL_23:
    *((unsigned char *)v12 + a2) = 0;
    goto LABEL_24;
  }
  llvm::sys::fs::getMainExecutable((uint64_t)&__p);
LABEL_24:
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v28;
  uint64_t v27 = 0x400000000;
  unint64_t v29 = v31;
  uint64_t v30 = 0;
  v31[0] = 0;
  v31[1] = 1;
  if (a4 < 0) {
LABEL_43:
  }
    abort();
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  char v15 = v34;
LABEL_28:
  if ((v15 & 1) == 0 && v33 < 0) {
    operator delete(v32[0].__vftable);
  }
  return 0;
}

uint64_t llvm::sys::unregisterHandlers(llvm::sys *this)
{
  uint64_t v1 = atomic_load((unsigned int *)dword_1EA61F330);
  if (v1)
  {
    size_t v2 = (const sigaction *)&unk_1EA61F0C0;
    do
    {
      uint64_t result = sigaction((int)v2[1].__sigaction_u.__sa_handler, v2, 0);
      atomic_fetch_add(dword_1EA61F330, 0xFFFFFFFF);
      size_t v2 = (const sigaction *)((char *)v2 + 24);
      --v1;
    }
    while (v1);
  }
  return result;
}

__int32 *llvm::sys::CleanupOnSignal(llvm::sys *this)
{
  __int32 v1 = (int)this;
  size_t v2 = wmemchr(dword_1CFB31660, (__int32)this, 2uLL);
  int v3 = dword_1CFB31668;
  if (v2) {
    int v3 = v2;
  }
  if ((char *)v3 - (char *)dword_1CFB31660 == 8)
  {
    llvm::sys::RunInterruptHandlers((llvm::sys *)v2);
    uint64_t result = wmemchr(dword_1CFB31668, v1, 4uLL);
    std::string::size_type v5 = dword_1CFB31678;
    if (result) {
      std::string::size_type v5 = result;
    }
    if (v1 != 13 && (char *)v5 - (char *)dword_1CFB31668 == 16)
    {
      for (uint64_t i = 0; i != 192; i += 24)
      {
        uint64_t v7 = (char *)&unk_1EA61F270 + i;
        int v8 = 2;
        atomic_compare_exchange_strong((atomic_uint *volatile)((char *)&unk_1EA61F270 + i + 16), (unsigned int *)&v8, 3u);
        if (v8 == 2)
        {
          uint64_t result = (__int32 *)(*(uint64_t (**)(void))v7)(*((void *)v7 + 1));
          *(void *)uint64_t v7 = 0;
          *((void *)v7 + 1) = 0;
          atomic_store(0, (unsigned int *)((char *)&unk_1EA61F270 + i + 16));
        }
      }
    }
  }
  else
  {
    uint64_t result = __error();
    unint64_t v9 = result;
    __int32 v10 = *result;
    uint64_t v11 = (uint64_t (*)(void))atomic_load(&qword_1EA61F338);
    if (v11) {
      uint64_t result = (__int32 *)v11();
    }
    *unint64_t v9 = v10;
  }
  return result;
}

int *sub_1CD0EA9B0()
{
  uint64_t result = __error();
  __int32 v1 = result;
  int v2 = *result;
  int v3 = (uint64_t (*)(void))atomic_load(&qword_1EA61F338);
  if (v3) {
    uint64_t result = (int *)v3();
  }
  *__int32 v1 = v2;
  return result;
}

void llvm::sys::RunInterruptHandlers(llvm::sys *this)
{
  unint64_t v1 = atomic_exchange(&qword_1EA61F340, 0);
  if (v1)
  {
    unint64_t v2 = v1;
    do
    {
      int v3 = (const char *)atomic_exchange((atomic_ullong *volatile)v2, 0);
      if (v3 && !stat(v3, &v4) && (v4.st_mode & 0xF000) == 0x8000)
      {
        unlink(v3);
        atomic_exchange((atomic_ullong *volatile)v2, (unint64_t)v3);
      }
      unint64_t v2 = atomic_load((unint64_t *)(v2 + 8));
    }
    while (v2);
  }
  atomic_exchange(&qword_1EA61F340, v1);
}

void llvm::sys::SetInterruptFunction(llvm::sys *this, void (*a2)(void))
{
}

void sub_1CD0EAA84()
{
  if (!atomic_load_explicit(qword_1EBCFB518, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCFB518, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  v0 = (std::recursive_mutex *)qword_1EBCFB518[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCFB518[0]);
  if (!atomic_load((unsigned int *)dword_1EA61F330))
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      int v3 = dword_1CFB31668[i];
      unsigned int v4 = atomic_load((unsigned int *)dword_1EA61F330);
      v17.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1CD0EAFA0;
      *(void *)&v17.sa_masuint64_t k = 0x1500000000;
      std::string::size_type v5 = (sigaction *)((char *)&unk_1EA61F0C0 + 24 * v4);
      sigaction(v3, &v17, v5);
      LODWORD(v5[1].__sigaction_u.__sa_handler) = v3;
      atomic_fetch_add(dword_1EA61F330, 1u);
    }
    for (uint64_t j = 0; j != 11; ++j)
    {
      int v7 = dword_1CFB31678[j];
      unsigned int v8 = atomic_load((unsigned int *)dword_1EA61F330);
      v17.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1CD0EAFA0;
      *(void *)&v17.sa_masuint64_t k = 0x1500000000;
      unint64_t v9 = (sigaction *)((char *)&unk_1EA61F0C0 + 24 * v8);
      sigaction(v7, &v17, v9);
      LODWORD(v9[1].__sigaction_u.__sa_handler) = v7;
      atomic_fetch_add(dword_1EA61F330, 1u);
    }
    if (atomic_load((unint64_t *)&qword_1EBCFB4E0))
    {
      unsigned int v11 = atomic_load((unsigned int *)dword_1EA61F330);
      v17.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1CD0EAFA0;
      *(void *)&v17.sa_masuint64_t k = 0x1500000000;
      int v12 = (sigaction *)((char *)&unk_1EA61F0C0 + 24 * v11);
      sigaction(13, &v17, v12);
      LODWORD(v12[1].__sigaction_u.__sa_handler) = 13;
      atomic_fetch_add(dword_1EA61F330, 1u);
    }
    for (uint64_t k = 0; k != 2; ++k)
    {
      int v14 = dword_1CFB31660[k];
      unsigned int v15 = atomic_load((unsigned int *)dword_1EA61F330);
      v17.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1CD0EA9B0;
      *(void *)&v17.sa_masuint64_t k = 0x100000000;
      unint64_t v16 = (sigaction *)((char *)&unk_1EA61F0C0 + 24 * v15);
      sigaction(v14, &v17, v16);
      LODWORD(v16[1].__sigaction_u.__sa_handler) = v14;
      atomic_fetch_add(dword_1EA61F330, 1u);
    }
  }
  std::recursive_mutex::unlock(v0);
}

void llvm::sys::SetInfoSignalFunction(llvm::sys *this, void (*a2)(void))
{
}

void llvm::sys::RemoveFileOnSignal(std::string::value_type *__s, std::string::size_type __sz)
{
  if (!atomic_load_explicit(qword_1EA61E018, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EA61E018, (void *(*)(void))sub_1CD0EB2B8, (void (*)(void *))sub_1CD0EB2CC);
  }
  if (__s) {
    std::string::__init(&v4, __s, __sz);
  }
  else {
    memset(&v4, 0, sizeof(v4));
  }
  operator new();
}

void llvm::sys::DontRemoveFileOnSignal(const std::string::value_type *a1, std::string::size_type a2)
{
  if (a1) {
    std::string::__init(&v7, a1, a2);
  }
  else {
    memset(&v7, 0, sizeof(v7));
  }
  if (!atomic_load_explicit(qword_1EA61E040, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EA61E040, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
  }
  unint64_t v2 = (std::recursive_mutex *)qword_1EA61E040[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EA61E040[0]);
  for (uint64_t i = (unint64_t *)&unk_1EA61F340; ; uint64_t i = v4 + 1)
  {
    std::string v4 = (unint64_t *)atomic_load(i);
    if (!v4) {
      break;
    }
    std::string::size_type v5 = (const char *)atomic_load(v4);
    if (v5 && sub_1CD0EB0E8(v5, &v7))
    {
      int v6 = (void *)atomic_exchange((atomic_ullong *volatile)v4, 0);
      if (v6) {
        free(v6);
      }
    }
  }
  std::recursive_mutex::unlock(v2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void llvm::sys::AddSignalHandler(llvm::sys *this, void (*a2)(void *), void *a3)
{
  uint64_t v3 = 0;
  while (1)
  {
    int v4 = 0;
    std::string::size_type v5 = (void *)((char *)&unk_1EA61F270 + v3);
    atomic_compare_exchange_strong((atomic_uint *volatile)((char *)&unk_1EA61F270 + v3 + 16), (unsigned int *)&v4, 1u);
    if (!v4) {
      break;
    }
    v3 += 24;
    if (v3 == 192) {
      llvm::report_fatal_error((llvm *)"too many signal callbacks already registered", (const llvm::Twine *)1);
    }
  }
  void *v5 = this;
  v5[1] = a2;
  atomic_store(2u, (unsigned int *)((char *)&unk_1EA61F270 + v3 + 16));

  sub_1CD0EAA84();
}

void llvm::sys::PrintStackTraceOnErrorSignal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  qword_1EA61E030 = a1;
  *(void *)algn_1EA61E038 = a2;
  while (1)
  {
    int v3 = 0;
    int v4 = (void *)((char *)&unk_1EA61F270 + v2);
    atomic_compare_exchange_strong((atomic_uint *volatile)((char *)&unk_1EA61F270 + v2 + 16), (unsigned int *)&v3, 1u);
    if (!v3) {
      break;
    }
    v2 += 24;
    if (v2 == 192) {
      llvm::report_fatal_error((llvm *)"too many signal callbacks already registered", (const llvm::Twine *)1);
    }
  }
  void *v4 = llvm::errs;
  v4[1] = 0;
  atomic_store(2u, (unsigned int *)((char *)&unk_1EA61F270 + v2 + 16));

  sub_1CD0EAA84();
}

__int32 *sub_1CD0EAFA0(__int32 a1)
{
  uint64_t v2 = atomic_load((unsigned int *)dword_1EA61F330);
  if (v2)
  {
    int v3 = (const sigaction *)&unk_1EA61F0C0;
    do
    {
      sigaction((int)v3[1].__sigaction_u.__sa_handler, v3, 0);
      atomic_fetch_add(dword_1EA61F330, 0xFFFFFFFF);
      int v3 = (const sigaction *)((char *)v3 + 24);
      --v2;
    }
    while (v2);
  }
  sigset_t v11 = -1;
  int v4 = (llvm::sys *)sigprocmask(2, &v11, 0);
  llvm::sys::RunInterruptHandlers(v4);
  if (a1 == 13)
  {
    std::string::size_type v5 = (uint64_t (*)(void))atomic_exchange(&qword_1EBCFB4E0, 0);
    if (v5) {
      return (__int32 *)v5();
    }
  }
  uint64_t result = wmemchr(dword_1CFB31668, a1, 4uLL);
  std::string v7 = &dword_1CFB31678;
  if (result) {
    std::string v7 = result;
  }
  if ((char *)v7 - (char *)dword_1CFB31668 != 16)
  {
    std::string::size_type v5 = (uint64_t (*)(void))atomic_exchange((atomic_ullong *volatile)&unk_1EBCFB4D8, 0);
    if (!v5) {
      return (__int32 *)raise(a1);
    }
    return (__int32 *)v5();
  }
  if (a1 == 13) {
    return (__int32 *)raise(a1);
  }
  for (uint64_t i = 0; i != 192; i += 24)
  {
    unint64_t v9 = (char *)&unk_1EA61F270 + i;
    int v10 = 2;
    atomic_compare_exchange_strong((atomic_uint *volatile)((char *)&unk_1EA61F270 + i + 16), (unsigned int *)&v10, 3u);
    if (v10 == 2)
    {
      uint64_t result = (__int32 *)(*(uint64_t (**)(void))v9)(*((void *)v9 + 1));
      *(void *)unint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      atomic_store(0, (unsigned int *)((char *)&unk_1EA61F270 + i + 16));
    }
  }
  return result;
}

BOOL sub_1CD0EB0E8(const char *a1, void *a2)
{
  size_t v4 = strlen(a1);
  size_t v5 = *((unsigned __int8 *)a2 + 23);
  size_t v6 = a2[1];
  if ((v5 & 0x80u) == 0) {
    size_t v7 = v5 & 0x7F;
  }
  else {
    size_t v7 = a2[1];
  }
  if (v4 != v7) {
    return 0;
  }
  size_t v8 = v4;
  if ((v5 & 0x80) != 0)
  {
    if (v4 != -1)
    {
      a2 = (void *)*a2;
      size_t v5 = v6;
      goto LABEL_7;
    }
LABEL_16:
    abort();
  }
  if (v4 == -1) {
    goto LABEL_16;
  }
LABEL_7:
  if (v5 >= v4) {
    size_t v9 = v4;
  }
  else {
    size_t v9 = v5;
  }
  BOOL v10 = memcmp(a2, a1, v9) == 0;
  return v5 == v8 && v10;
}

void sub_1CD0EB188()
{
}

void sub_1CD0EB1F0()
{
}

void sub_1CD0EB2B8()
{
}

uint64_t sub_1CD0EB2CC(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = (atomic_ullong *)atomic_exchange(&qword_1EA61F340, 0);
    if (v1)
    {
      uint64_t v2 = sub_1CD0EB33C(v1);
      MEMORY[0x1D25D9CE0](v2, 0x30C40EEE2E2AFLL);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

atomic_ullong *sub_1CD0EB33C(atomic_ullong *a1)
{
  if (atomic_exchange(a1 + 1, 0))
  {
    uint64_t v2 = sub_1CD0EB33C();
    MEMORY[0x1D25D9CE0](v2, 0x30C40EEE2E2AFLL);
  }
  int v3 = (void *)atomic_exchange(a1, 0);
  if (v3) {
    free(v3);
  }
  return a1;
}

llvm::sys::ThreadLocalImpl *llvm::sys::ThreadLocalImpl::ThreadLocalImpl(llvm::sys::ThreadLocalImpl *this)
{
  *(void *)this = &unk_1F2647198;
  *((void *)this + 1) = 0;
  pthread_key_create((pthread_key_t *)this + 1, 0);
  return this;
}

{
  *(void *)this = &unk_1F2647198;
  *((void *)this + 1) = 0;
  pthread_key_create((pthread_key_t *)this + 1, 0);
  return this;
}

uint64_t llvm::sys::ThreadLocalImpl::removeInstance(llvm::sys::ThreadLocalImpl *this)
{
  return pthread_setspecific(*((void *)this + 1), 0);
}

uint64_t llvm::llvm_is_multithreaded(llvm *this)
{
  return 1;
}

uint64_t llvm::ThreadPoolStrategy::compute_thread_count(llvm::ThreadPoolStrategy *this)
{
  if (*((unsigned char *)this + 4))
  {
    LODWORD(result) = std::thread::hardware_concurrency();
    if (result <= 1) {
      LODWORD(result) = 1;
    }
  }
  else
  {
    LODWORD(result) = llvm::sys::getHostNumPhysicalCores(this);
  }
  if ((int)result <= 1) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = result;
  }
  unsigned int v3 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    if (v3 >= result) {
      unsigned int v4 = result;
    }
    else {
      unsigned int v4 = *(_DWORD *)this;
    }
    if (*((unsigned char *)this + 5)) {
      return v4;
    }
    else {
      return v3;
    }
  }
  return result;
}

uint64_t computeHostNumHardwareThreads(void)
{
  LODWORD(result) = std::thread::hardware_concurrency();
  if (result <= 1) {
    return 1;
  }
  else {
    return result;
  }
}

void sub_1CD0EB470(char *__s, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  sub_1CC5BC8A0(&v3, __s);
  sub_1CD0E9E1C((uint64_t)v5, (const void **)&v3.__r_.__value_.__l.__data_, a2);
  std::string::~string(&v3);
  __int16 v4 = 260;
  v3.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  llvm::report_fatal_error((llvm *)&v3, (const llvm::Twine *)1);
}

uint64_t llvm::llvm_thread_detach_impl(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  uint64_t result = pthread_detach(this);
  if (result) {
    sub_1CD0EB470("pthread_detach failed", result);
  }
  return result;
}

uint64_t llvm::get_max_thread_name_length(llvm *this)
{
  return 64;
}

void llvm::set_thread_name(llvm *this, const llvm::Twine *a2)
{
  v8[8] = *MEMORY[0x1E4F143B8];
  size_t v6 = v8;
  long long v7 = xmmword_1CD96DBD0;
  uint64_t v2 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v6);
  unint64_t v4 = v3 - 63;
  if (v3 < v3 - 63) {
    unint64_t v4 = v3;
  }
  size_t v5 = &v2[v4];
  if (v3 > 0x3F) {
    uint64_t v2 = v5;
  }
  pthread_setname_np(v2);
  if (v6 != v8) {
    free(v6);
  }
}

BOOL llvm::set_thread_priority(int a1)
{
  return setpriority(3, 0, (a1 == 0) << 12) == 0;
}

uint64_t llvm::get_cpus(llvm *this)
{
  return 1;
}

unint64_t llvm::get_threadpool_strategy(unsigned __int8 *a1, uint64_t a2, unint64_t a3)
{
  if (!a2)
  {
    uint64_t v10 = a3 >> 8;
    unsigned __int8 v11 = a3;
    return v11 | (unint64_t)(v10 << 8);
  }
  if (a2 == 3 && *(_WORD *)a1 == 27745 && a1[2] == 108)
  {
    unsigned __int8 v11 = 0;
    uint64_t v10 = 0x1000000;
    return v11 | (unint64_t)(v10 << 8);
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2;
  while (1)
  {
    int v6 = *a1;
    if ((v6 - 48) < 0xA)
    {
      int v7 = -48;
      goto LABEL_10;
    }
    if ((v6 - 97) < 0x1A)
    {
      int v7 = -87;
      goto LABEL_10;
    }
    if ((v6 - 65) > 0x19) {
      break;
    }
    int v7 = -55;
LABEL_10:
    unsigned int v8 = v7 + v6;
    if (v8 > 9) {
      break;
    }
    unint64_t v9 = 10 * v4 + v8;
    if (v4 > v9 / 0xA)
    {
      unsigned __int8 v11 = 0;
      uint64_t v10 = 0;
      return v11 | (unint64_t)(v10 << 8);
    }
    ++a1;
    unint64_t v4 = v9;
    if (!--v5) {
      goto LABEL_22;
    }
  }
  unint64_t v9 = v4;
LABEL_22:
  unsigned __int8 v11 = 0;
  BOOL v12 = v5 != 0;
  unsigned int v13 = 0;
  if (v9 < 0x100000000) {
    unsigned int v13 = v9;
  }
  if (v12) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = v13;
  }
  if (HIDWORD(v9))
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    if (!v12)
    {
      uint64_t v10 = (v14 >> 8) | 0x1000000;
      if (v14) {
        unsigned __int8 v11 = v14;
      }
      else {
        unsigned __int8 v11 = a3;
      }
      if (!v14) {
        uint64_t v10 = a3 >> 8;
      }
    }
  }
  return v11 | (unint64_t)(v10 << 8);
}

llvm::sys::Watchdog *llvm::sys::Watchdog::Watchdog(llvm::sys::Watchdog *this, unsigned int a2)
{
  return this;
}

{
  alarm(a2);
  return this;
}

void llvm::sys::Watchdog::~Watchdog(llvm::sys::Watchdog *this)
{
}

{
  alarm(0);
}

void llvm::initializeTarget(llvm *this, llvm::PassRegistry *a2)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)this);

  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)this);
}

void LLVMInitializeTarget(uint64_t a1)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
}

uint64_t LLVMGetModuleDataLayout(uint64_t a1)
{
  return a1 + 272;
}

uint64_t LLVMSetModuleDataLayout(uint64_t a1, uint64_t a2)
{
  return sub_1CB94E404(a1 + 272, a2);
}

void LLVMCreateTargetData()
{
}

llvm::DataLayout *LLVMDisposeTargetData(llvm::DataLayout *result)
{
  if (result)
  {
    llvm::DataLayout::~DataLayout(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void LLVMAddTargetLibraryInfo()
{
}

char *LLVMCopyStringRepOfTargetData(uint64_t a1)
{
  if (*(char *)(a1 + 231) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v6, *(const void **)(a1 + 208), *(void *)(a1 + 216));
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 208);
    uint64_t v7 = *(void *)(a1 + 224);
  }
  int v1 = SHIBYTE(v7);
  uint64_t v2 = (void *)v6;
  if (v7 >= 0) {
    unint64_t v3 = (const char *)&v6;
  }
  else {
    unint64_t v3 = (const char *)v6;
  }
  unint64_t v4 = strdup(v3);
  if (v1 < 0) {
    operator delete(v2);
  }
  return v4;
}

BOOL LLVMByteOrder(unsigned char *a1)
{
  return *a1 == 0;
}

unint64_t LLVMPointerSize(uint64_t a1)
{
  return ((unint64_t)*(unsigned int *)(*(void *)(a1 + 232) + 4) + 7) >> 3;
}

unint64_t LLVMPointerSizeForAS(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 240);
  uint64_t v3 = *(void *)(a1 + 232);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 232);
    unint64_t v4 = *(unsigned int *)(a1 + 240);
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = v3 + 16 * (v4 >> 1);
      unsigned int v7 = *(_DWORD *)(v6 + 8);
      uint64_t v8 = v6 + 16;
      v4 += ~(v4 >> 1);
      if (v7 < a2) {
        uint64_t v3 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v3 == *(void *)(a1 + 232) + 16 * v2 || *(_DWORD *)(v3 + 8) != a2) {
LABEL_10:
  }
    uint64_t v3 = *(void *)(a1 + 232);
  return ((unint64_t)*(unsigned int *)(v3 + 4) + 7) >> 3;
}

uint64_t LLVMIntPtrType(uint64_t a1)
{
  uint64_t v2 = (llvm::IntegerType *)LLVMGetGlobalContext();
  uint64_t v3 = (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a1 + 232) + 4);

  return llvm::IntegerType::get(v2, v3);
}

uint64_t LLVMIntPtrTypeForAS(llvm::DataLayout *a1, unsigned int a2)
{
  unint64_t v4 = (llvm::LLVMContext *)LLVMGetGlobalContext();

  return llvm::DataLayout::getIntPtrType(a1, v4, a2);
}

uint64_t LLVMIntPtrTypeInContext(llvm::IntegerType *a1, uint64_t a2)
{
  return llvm::IntegerType::get(a1, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a2 + 232) + 4));
}

uint64_t LLVMIntPtrTypeForASInContext(llvm::LLVMContext *a1, llvm::DataLayout *this, unsigned int a3)
{
  return llvm::DataLayout::getIntPtrType(this, a1, a3);
}

uint64_t LLVMSizeOfTypeInBits(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CB83544C(a1, a2);
  if (v3 == 1)
  {
    uint64_t v4 = result;
    return v4;
  }
  return result;
}

unint64_t LLVMStoreSizeOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1CB83544C(a1, a2);
  if (v3 == 1)
  {
    uint64_t v5 = v2;
    uint64_t v2 = v5;
  }
  return (unint64_t)(v2 + 7) >> 3;
}

uint64_t LLVMABISizeOfType(llvm::DataLayout *a1, llvm::Type *a2)
{
  unint64_t v4 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)a2) + 7) >> 3;
  BOOL v6 = v5 == 1;
  char Alignment = llvm::DataLayout::getAlignment(a1, a2, 1);
  if (v6)
  {
    char v10 = Alignment;
    char Alignment = v10;
  }
  return ((1 << Alignment) + v4 - 1) & -(1 << Alignment);
}

uint64_t LLVMABIAlignmentOfType(llvm::DataLayout *a1, llvm::Type *a2)
{
  return 1 << llvm::DataLayout::getAlignment(a1, a2, 1);
}

uint64_t LLVMCallFrameAlignmentOfType(llvm::DataLayout *a1, llvm::Type *a2)
{
  return 1 << llvm::DataLayout::getAlignment(a1, a2, 1);
}

uint64_t LLVMPreferredAlignmentOfType(llvm::DataLayout *a1, llvm::Type *a2)
{
  return 1 << llvm::DataLayout::getAlignment(a1, a2, 0);
}

uint64_t LLVMPreferredAlignmentOfGlobal(llvm::DataLayout *a1, const llvm::GlobalVariable *a2)
{
  return 1 << llvm::DataLayout::getPreferredAlign(a1, a2);
}

unint64_t LLVMElementAtOffset(llvm::DataLayout *a1, llvm::StructType *a2, unint64_t a3)
{
  StructLayout = llvm::DataLayout::getStructLayout(a1, a2);
  int v5 = *((_DWORD *)StructLayout + 3);
  unint64_t v6 = v5 & 0x7FFFFFFF;
  if ((v5 & 0x7FFFFFFF) != 0)
  {
    unsigned int v7 = (char *)StructLayout + 16;
    do
    {
      unint64_t v8 = v6 >> 1;
      unint64_t v9 = &v7[8 * (v6 >> 1)];
      unint64_t v11 = *(void *)v9;
      char v10 = v9 + 8;
      v6 += ~(v6 >> 1);
      if (v11 > a3) {
        unint64_t v6 = v8;
      }
      else {
        unsigned int v7 = v10;
      }
    }
    while (v6);
  }
  else
  {
    unsigned int v7 = (char *)StructLayout + 16;
  }
  return (unint64_t)(v7 - ((char *)StructLayout + 16) - 8) >> 3;
}

uint64_t LLVMOffsetOfElement(llvm::DataLayout *a1, llvm::StructType *a2, unsigned int a3)
{
  return *((void *)llvm::DataLayout::getStructLayout(a1, a2) + a3 + 2);
}

void *llvm::TargetIntrinsicInfo::TargetIntrinsicInfo(void *this)
{
  *this = &unk_1F26471B8;
  return this;
}

void llvm::TargetLoweringObjectFile::Initialize(llvm::TargetLoweringObjectFile *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
  uint64_t v3 = (void *)*((void *)this + 117);
  if (v3)
  {
    MEMORY[0x1D25D9CD0](*v3, 8, a3);
    MEMORY[0x1D25D9CE0](v3, 0x1020C405AF6BDC9);
  }
  operator new();
}

void llvm::TargetLoweringObjectFile::emitCGProfileMetadata(llvm::TargetLoweringObjectFile *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  v27[24] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 105);
  __int16 v25 = v27;
  uint64_t v26 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a3, (uint64_t)&v25);
  unint64_t v6 = v25;
  if (v26)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)((char *)v25 + v7 + 8) + 8);
      if (*(void *)v8 == 10)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        int v10 = *(unsigned __int16 *)(v8 + 32);
        if (v9 == 0x69666F7250204743 && v10 == 25964) {
          break;
        }
      }
      v7 += 24;
      if (24 * v26 == v7) {
        goto LABEL_12;
      }
    }
    uint64_t v12 = *(void *)((char *)v25 + v7 + 16);
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(v12 + 8);
      if (v13)
      {
        uint64_t v14 = -8 * v13;
        do
        {
          uint64_t v15 = *(void *)(v12 + v14);
          uint64_t v16 = sub_1CD0EC0F4((uint64_t)this, *(void *)(v15 - 8 * *(unsigned int *)(v15 + 8)));
          uint64_t v17 = sub_1CD0EC0F4((uint64_t)this, *(void *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 8));
          if (v16) {
            BOOL v18 = v17 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (!v18)
          {
            uint64_t v19 = v17;
            uint64_t UniqueInteger = llvm::Constant::getUniqueInteger(*(llvm::Constant **)(*(void *)(v15
                                                                                            - 8
                                                                                            * *(unsigned int *)(v15 + 8)
                                                                                            + 16)
                                                                                + 128));
            if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u) {
              uint64_t v21 = *(uint64_t **)UniqueInteger;
            }
            else {
              uint64_t v21 = (uint64_t *)UniqueInteger;
            }
            uint64_t v22 = *v21;
            unint64_t v23 = llvm::MCSymbolRefExpr::create(v16, 0, v5, 0);
            unint64_t v24 = llvm::MCSymbolRefExpr::create(v19, 0, v5, 0);
            (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t, uint64_t))(*(void *)a2 + 1152))(a2, v23, v24, v22);
          }
          v14 += 8;
        }
        while (v14);
        unint64_t v6 = v25;
      }
    }
  }
LABEL_12:
  if (v6 != v27) {
    free(v6);
  }
}

uint64_t sub_1CD0EC0F4(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 + 128));
  if ((*((_DWORD *)v3 + 8) & 0x300) == 0x100) {
    return 0;
  }
  uint64_t v5 = v3;
  unint64_t v6 = *(llvm::TargetMachine **)(a1 + 984);

  return llvm::TargetMachine::getSymbol(v6, v5);
}

uint64_t llvm::TargetLoweringObjectFile::getKindForGlobal(llvm::TargetLoweringObjectFile *this, const llvm::GlobalObject *a2, const llvm::TargetMachine *a3)
{
  if (*((unsigned char *)this + 16)) {
    BOOL v3 = *((unsigned char *)this + 16) == 22;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 2;
  }
  if ((*((unsigned char *)this + 34) & 0x40) == 0) {
    goto LABEL_18;
  }
  uint64_t v7 = ***(void ***)this;
  size_t v53 = this;
  int v8 = *(_DWORD *)(v7 + 2520);
  if (!v8)
  {
    uint64_t v30 = 0;
LABEL_61:
    uint64_t v12 = (llvm::TargetLoweringObjectFile **)sub_1CC5BF31C(v7 + 2504, (uint64_t)&v53, (uint64_t *)&v53, v30);
    __int16 v31 = v53;
    v12[1] = 0;
    void v12[2] = 0;
    *uint64_t v12 = v31;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v7 + 2504);
  int v10 = v8 - 1;
  unsigned int v11 = v10 & ((this >> 4) ^ (this >> 9));
  uint64_t v12 = (llvm::TargetLoweringObjectFile **)(v9 + 24 * v11);
  uint64_t v13 = *v12;
  if (*v12 != this)
  {
    unint64_t v24 = 0;
    int v25 = 1;
    while (v13 != (llvm::TargetLoweringObjectFile *)-4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v13 == (llvm::TargetLoweringObjectFile *)-8192;
      }
      if (v26) {
        unint64_t v24 = v12;
      }
      unsigned int v27 = v11 + v25++;
      unsigned int v11 = v27 & v10;
      uint64_t v12 = (llvm::TargetLoweringObjectFile **)(v9 + 24 * v11);
      uint64_t v13 = *v12;
      if (*v12 == this) {
        goto LABEL_10;
      }
    }
    if (v24) {
      uint64_t v30 = v24;
    }
    else {
      uint64_t v30 = v12;
    }
    goto LABEL_61;
  }
LABEL_10:
  if (v12[2] == (llvm::TargetLoweringObjectFile *)24)
  {
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *((void *)v14 + 1);
    uint64_t v17 = *((void *)v14 + 2);
    BOOL v18 = v15 == 0x5F3174666977732ELL && v16 == 0x6B6E696C6F747561;
    if (v18 && v17 == 0x73656972746E655FLL) {
      return 0;
    }
  }
LABEL_18:
  if ((*((_DWORD *)this + 8) & 0x1C00) != 0)
  {
    if (!sub_1CD0EC9B4(*((void *)this - 4))
      || (*((unsigned char *)this + 80) & 1) != 0
      || (*((_DWORD *)this + 8) & 0x400000) != 0)
    {
      return 13;
    }
    __int16 v20 = *((_WORD *)a2 + 510);
    unsigned int v21 = 13;
    if ((*((_DWORD *)this + 8) & 0xFu) - 7 >= 2) {
      unsigned int v22 = 12;
    }
    else {
      unsigned int v22 = 14;
    }
    goto LABEL_37;
  }
  if ((*((_DWORD *)this + 8) & 0xF) == 0xA) {
    return 18;
  }
  if (sub_1CD0EC9B4(*((void *)this - 4)))
  {
    if ((*((unsigned char *)this + 80) & 1) == 0)
    {
      if ((*((_DWORD *)this + 8) & 0x400000) == 0)
      {
        __int16 v20 = *((_WORD *)a2 + 510);
        unsigned int v21 = 19;
        if ((*((_DWORD *)this + 8) & 0xF) != 0) {
          int v23 = 15;
        }
        else {
          int v23 = 17;
        }
        if ((*((_DWORD *)this + 8) & 0xFu) - 7 >= 2) {
          unsigned int v22 = v23;
        }
        else {
          unsigned int v22 = 16;
        }
LABEL_37:
        if ((v20 & 0x100) != 0) {
          return v21;
        }
        else {
          return v22;
        }
      }
      return 19;
    }
  }
  else if ((*((unsigned char *)this + 80) & 1) == 0)
  {
    return 19;
  }
  __int16 v28 = (unsigned __int8 *)*((void *)this - 4);
  if (llvm::Constant::getRelocationInfo((llvm::Constant *)v28))
  {
    unsigned int v29 = *((_DWORD *)a2 + 136);
    if (v29 >= 6 || ((0x39u >> v29) & 1) == 0)
    {
      if (llvm::Constant::getRelocationInfo((llvm::Constant *)v28) == 2) {
        return 20;
      }
      else {
        return 4;
      }
    }
    return 4;
  }
  if ((*((_DWORD *)this + 8) & 0xC0) != 0x80) {
    return 4;
  }
  uint64_t v32 = *(llvm::Type **)v28;
  if (!*(void *)v28
    || *((unsigned char *)v32 + 8) != 17
    || (uint64_t v33 = *((void *)v32 + 3)) == 0
    || *(_DWORD *)(v33 + 8) != 13
    || ((v34 = *(_DWORD *)(v33 + 8) >> 8, BOOL v35 = v34 > 0x20, v36 = (1 << v34) & 0x100010100, !v35)
      ? (BOOL v37 = v36 == 0)
      : (BOOL v37 = 1),
        v37))
  {
LABEL_87:
    std::string::size_type v43 = (llvm::DataLayout *)(*((void *)this + 5) + 272);
    uint64_t v44 = *(llvm::Type **)v28;
    unint64_t v45 = (unint64_t)(sub_1CB83544C((uint64_t)v43, *(void *)v28) + 7) >> 3;
    BOOL v47 = v46 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v43, v44, 1);
    uint64_t v50 = ((1 << Alignment) + v45 - 1) & -(1 << Alignment);
    if (v47) {
    *((void *)&v52 + 1) = v50;
    }
    *(void *)&long long v52 = v50 - 4;
    unint64_t v51 = v52 >> 2;
    if (v51 < 8) {
      return dword_1CFB316F0[v51];
    }
    return 4;
  }
  int v38 = v28[16];
  if ((v38 & 0xFE) == 0xE)
  {
    unsigned int v39 = *((_DWORD *)v32 + 8) - 1;
    if (llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v28, v39)) {
      goto LABEL_87;
    }
    if (v39)
    {
      unsigned int v40 = 0;
      while (llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v28, v40))
      {
        if (v39 == ++v40) {
          goto LABEL_81;
        }
      }
      goto LABEL_87;
    }
  }
  else if (v38 != 13 || *((void *)v32 + 4) != 1)
  {
    goto LABEL_87;
  }
LABEL_81:
  int v41 = *(_DWORD *)(v33 + 8) >> 8;
  if (v41 == 16) {
    unsigned int v42 = 6;
  }
  else {
    unsigned int v42 = 7;
  }
  if (v41 == 8) {
    return 5;
  }
  else {
    return v42;
  }
}

uint64_t llvm::TargetLoweringObjectFile::SectionForGlobal(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if ((*(unsigned char *)(a2 + 34) & 0x40) != 0)
  {
    unsigned int v29 = *(uint64_t (**)(void))(*(void *)a1 + 112);
    return v29();
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a2 + 16);
    if (v3 == 3)
    {
      uint64_t v18 = *(void *)(a2 + 72);
      if (v18)
      {
        int v19 = a3;
        __int16 v31 = "bss-section";
        uint64_t v32 = 11;
        __int16 v20 = (uint64_t *)(v18 + 24);
        uint64_t v33 = 0;
        uint64_t v21 = a2;
        uint64_t v22 = a1;
        int v23 = sub_1CC5122C8((uint64_t *)(v18 + 24), (uint64_t)&v31, &v33);
        a1 = v22;
        if (v23 && (v19 - 15) < 3) {
          return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
        }
        __int16 v31 = "data-section";
        uint64_t v32 = 12;
        uint64_t v33 = 0;
        if (sub_1CC5122C8(v20, (uint64_t)&v31, &v33))
        {
          a1 = v22;
          if (v19 == 19) {
            return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
          }
        }
        __int16 v31 = "relro-section";
        uint64_t v32 = 13;
        uint64_t v33 = 0;
        if (sub_1CC5122C8(v20, (uint64_t)&v31, &v33))
        {
          a1 = v22;
          if (v19 == 20) {
            return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
          }
        }
        __int16 v31 = "rodata-section";
        uint64_t v32 = 14;
        uint64_t v33 = 0;
        int v25 = sub_1CC5122C8(v20, (uint64_t)&v31, &v33);
        a2 = v21;
        int v26 = v25;
        a1 = v22;
        if (v26)
        {
          if ((v19 & 0xFC) == 4 || (v19 & 0xFC) == 8) {
            return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
          }
        }
      }
      int v3 = *(unsigned __int8 *)(a2 + 16);
    }
    if (!v3)
    {
      uint64_t v4 = *(void *)(a2 + 112);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 8))
        {
          uint64_t v5 = *(void *)(v4 + 40);
          if (v5)
          {
            int v6 = *(_DWORD *)(v5 + 40);
            if (v6)
            {
              uint64_t v7 = *(void *)(v5 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
              {
                uint64_t v30 = a1;
                int v27 = __cxa_guard_acquire(&qword_1EBCBE588);
                a1 = v30;
                if (v27)
                {
                  unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override) {
                    unint64_t v28 = 0xFF51AFD7ED558CCDLL;
                  }
                  qword_1EBCBE580 = v28;
                  __cxa_guard_release(&qword_1EBCBE588);
                  a1 = v30;
                }
              }
              uint64_t v8 = __ROR8__(qword_1EBCBE580 ^ 0xF54B982192FEA167, 30);
              unint64_t v9 = 0x9DDFEA08EB382D69
                 * ((qword_1EBCBE580 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                               * ((v8 - 0x1A1B69534B932F1) ^ (qword_1EBCBE580
                                                                                              + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x1A1B69534B932F1) ^ (qword_1EBCBE580 + 0x18EB4DAABB32FA18))));
              unsigned int v10 = -348639895 * ((v9 >> 47) ^ v9);
              for (int i = 1; ; ++i)
              {
                unsigned int v12 = v10 & (v6 - 1);
                uint64_t v13 = v7 + 24 * v12;
                uint64_t v14 = *(void **)v13;
                if (*(void *)v13 == -1)
                {
                  if ("implicit-section-name" == (char *)-1) {
                    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
                  }
                }
                else if (v14 == (void *)-2)
                {
                  if ("implicit-section-name" == (char *)-2) {
                    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
                  }
                }
                else if (*(void *)(v13 + 8) == 21)
                {
                  BOOL v16 = *v14 == 0x746963696C706D69 && v14[1] == 0x6E6F69746365732DLL;
                  if (v16 && *(void *)((char *)v14 + 13) == 0x656D616E2D6E6F69) {
                    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
                  }
                }
                if (v14 == (void *)-1) {
                  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
                }
                unsigned int v10 = i + v12;
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  }
}

uint64_t llvm::TargetLoweringObjectFile::SectionForGlobal(llvm::TargetLoweringObjectFile *this, const llvm::GlobalObject *a2, const llvm::TargetMachine *a3)
{
  unsigned __int8 KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(a2, a3, a3);

  return llvm::TargetLoweringObjectFile::SectionForGlobal((uint64_t)this, (uint64_t)a2, KindForGlobal);
}

uint64_t sub_1CD0EC9B4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 16)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3 >= 0x41)
    {
      int v11 = 0;
      int64_t v12 = (unint64_t)(v3 + 63) >> 6;
      do
      {
        if (v12-- < 1) {
          break;
        }
        unint64_t v14 = *(void *)(*(void *)(a1 + 24) + 8 * v12);
        v11 += __clz(v14);
      }
      while (!v14);
      int v15 = v3 | 0xFFFFFFC0;
      if ((v3 & 0x3F) == 0) {
        int v15 = 0;
      }
      if (v11 + v15 != v3) {
        return 0;
      }
    }
    else if (*(void *)(a1 + 24))
    {
      return 0;
    }
    return 1;
  }
  if (a1 && v2 == 17)
  {
    if (sub_1CB844168(a1, 0.0)) {
      return 1;
    }
    int v2 = *(unsigned __int8 *)(a1 + 16);
  }
  else if (v2 - 13) < 8u && ((0xE1u >> (v2 - 13)))
  {
    return 1;
  }
  if ((v2 - 11) < 2u) {
    return 1;
  }
  if ((v2 - 8) > 2) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = *(uint64_t **)(a1 - 8);
    uint64_t v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = (uint64_t *)(a1 - 32 * v6);
  }
  if (!v6) {
    return 1;
  }
  uint64_t v8 = 32 * v6 - 32;
  do
  {
    uint64_t v9 = *v7;
    v7 += 4;
    uint64_t result = sub_1CD0EC9B4(v9);
    if (result) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    v8 -= 32;
  }
  while (!v10);
  return result;
}

uint64_t llvm::TargetMachine::TargetMachine(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, long long *a5, const std::string::value_type *a6, std::string::size_type a7, uint64_t a8, const std::string::value_type *a9, std::string::size_type a10, long long *a11)
{
  return llvm::TargetMachine::TargetMachine(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

{
  _OWORD *v15;
  long long v16;
  long long v17;

  *(void *)a1 = &unk_1F2647310;
  *(void *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 36) = 0;
  *(void *)(a1 + 48) = a1 + 72;
  *(_OWORD *)(a1 + 56) = xmmword_1CD96EEC0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x1000000000;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 264;
  *(void *)(a1 + 256) = 0x800000000;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a1 + 416;
  *(void *)(a1 + 408) = 0x800000000;
  llvm::DataLayout::reset(a1 + 16, a3, a4);
  int v15 = (_OWORD *)(a1 + 448);
  if (*((char *)a5 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v15, *(const void **)a5, *((void *)a5 + 1));
  }
  else
  {
    BOOL v16 = *a5;
    *(void *)(a1 + 464) = *((void *)a5 + 2);
    std::__shared_weak_count *v15 = v16;
  }
  uint64_t v17 = *(long long *)((char *)a5 + 24);
  *(void *)(a1 + 488) = *((void *)a5 + 5);
  *(_OWORD *)(a1 + 472) = v17;
  std::string::__init((std::string *)(a1 + 496), a6, a7);
  std::string::__init((std::string *)(a1 + 520), a9, a10);
  *(void *)(a1 + 544) = 0x100000000;
  *(_DWORD *)(a1 + 552) = 2;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(unsigned char *)(a1 + 592) &= 0xFCu;
  *(unsigned char *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  sub_1CB906AA8(a1 + 704, a11);
  sub_1CB906AA8(a1 + 1008, a11);
  return a1;
}

BOOL llvm::TargetMachine::isPositionIndependent(llvm::TargetMachine *this)
{
  return *((_DWORD *)this + 136) == 1;
}

uint64_t llvm::TargetMachine::getRelocationModel(llvm::TargetMachine *this)
{
  return *((unsigned int *)this + 136);
}

void llvm::TargetMachine::resetTargetOptions(llvm::TargetMachine *this, const llvm::Function *a2)
{
  uint64_t v4 = *((void *)a2 + 14);
  if (!v4 || !*(_DWORD *)(v4 + 8) || (v5 = *(void *)(v4 + 40)) == 0 || (int v6 = *(_DWORD *)(v5 + 40)) == 0)
  {
LABEL_10:
    char v15 = *((unsigned char *)this + 704) & 1;
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v110 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v110 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v110;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v8 = __ROR8__(qword_1EBCBE580 ^ 0x37F3ADE50F0F0E7DLL, 30);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((qword_1EBCBE580 - 0x6F5514752119C389) ^ ((0x9DDFEA08EB382D69
                                                   * ((v8 - 0x502DF391098191ELL) ^ (qword_1EBCBE580
                                                                                  - 0x6F5514752119C389))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x502DF391098191ELL) ^ (qword_1EBCBE580 - 0x6F5514752119C389))));
  unsigned int v10 = -348639895 * ((v9 >> 47) ^ v9);
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v10 & (v6 - 1);
    uint64_t v13 = (uint64_t *)(v7 + 24 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      if ("less-precise-fpmad" == (char *)-1) {
        goto LABEL_76;
      }
      goto LABEL_9;
    }
    if (v14 != -2) {
      break;
    }
    if ("less-precise-fpmad" == (char *)-2) {
      goto LABEL_76;
    }
LABEL_9:
    if (v14 == -1) {
      goto LABEL_10;
    }
    unsigned int v10 = i + v12;
  }
  if (v13[1] != 18) {
    goto LABEL_9;
  }
  BOOL v78 = *(void *)v14 == 0x6572702D7373656CLL && *(void *)(v14 + 8) == 0x6D70662D65736963;
  if (!v78 || *(_WORD *)(v14 + 16) != 25697) {
    goto LABEL_9;
  }
LABEL_76:
  uint64_t FnAttribute = llvm::Function::getFnAttribute((uint64_t)a2, "less-precise-fpmad", 0x12uLL);
  char v15 = FnAttribute
     && *(_DWORD *)(FnAttribute + 16) == 4
     && *(_DWORD *)(FnAttribute + *(unsigned int *)(FnAttribute + 12) + 25) == 1702195828;
LABEL_11:
  *((unsigned char *)this + 1008) = *((unsigned char *)this + 1008) & 0xFE | v15;
  uint64_t v16 = *((void *)a2 + 14);
  if (!v16 || !*(_DWORD *)(v16 + 8) || (v17 = *(void *)(v16 + 40)) == 0 || (int v18 = *(_DWORD *)(v17 + 40)) == 0)
  {
LABEL_20:
    int v27 = *((_WORD *)this + 510) & 0xFFFE | *((_WORD *)this + 358) & 1;
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(v17 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v126 = v18;
    int v111 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v18 = v126;
    if (v111)
    {
      unint64_t v112 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v112 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v112;
      __cxa_guard_release(&qword_1EBCBE588);
      int v18 = v126;
    }
  }
  unint64_t v20 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xFEC0C4B7E4C7DBB4)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xFEC0C4B7E4C7DBB4)) >> 47) ^ 0x98EDA1D185B4B5C1);
  unsigned int v21 = (-348639895 * ((v20 >> 47) ^ v20)) ^ 0x2D70662D;
  int v22 = v18 - 1;
  int v23 = 1;
  while (2)
  {
    unsigned int v24 = v21 & v22;
    uint64_t v25 = v19 + 24 * v24;
    int v26 = *(void **)v25;
    if (*(void *)v25 == -1)
    {
      if ("unsafe-fp-math" == (char *)-1) {
        break;
      }
      goto LABEL_19;
    }
    if (v26 == (void *)-2)
    {
      if ("unsafe-fp-math" == (char *)-2) {
        break;
      }
      goto LABEL_19;
    }
    if (*(void *)(v25 + 8) != 14
      || (*v26 == 0x662D656661736E75 ? (BOOL v81 = *(void *)((char *)v26 + 6) == 0x6874616D2D70662DLL) : (BOOL v81 = 0), !v81))
    {
LABEL_19:
      if (v26 == (void *)-1) {
        goto LABEL_20;
      }
      unsigned int v21 = v23 + v24;
      ++v23;
      continue;
    }
    break;
  }
  uint64_t v82 = llvm::Function::getFnAttribute((uint64_t)a2, "unsafe-fp-math", 0xEuLL);
  BOOL v83 = v82 && *(_DWORD *)(v82 + 16) == 4 && *(_DWORD *)(v82 + *(unsigned int *)(v82 + 12) + 25) == 1702195828;
  int v27 = *((_WORD *)this + 510) & 0xFFFE | v83;
LABEL_21:
  *((_WORD *)this + 510) = v27;
  uint64_t v28 = *((void *)a2 + 14);
  if (!v28 || !*(_DWORD *)(v28 + 8) || (uint64_t v29 = *(void *)(v28 + 40)) == 0 || (v30 = *(_DWORD *)(v29 + 40)) == 0)
  {
LABEL_31:
    unsigned int v39 = v27 & 0xFFFFFFFD | (2 * ((*((unsigned __int16 *)this + 358) >> 1) & 1));
    goto LABEL_32;
  }
  uint64_t v31 = *(void *)(v29 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v127 = v31;
    int v124 = v30;
    int v113 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v30 = v124;
    uint64_t v31 = v127;
    if (v113)
    {
      unint64_t v114 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v114 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v114;
      __cxa_guard_release(&qword_1EBCBE588);
      int v30 = v124;
      uint64_t v31 = v127;
    }
  }
  unint64_t v32 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xE10BB686ABF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xE10BB686ABF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
  unsigned int v33 = (-348639895 * ((v32 >> 47) ^ v32)) ^ 0x2D70662D;
  int v34 = v30 - 1;
  int v35 = 1;
  while (2)
  {
    unsigned int v36 = v33 & v34;
    uint64_t v37 = v31 + 24 * v36;
    int v38 = *(void **)v37;
    if (*(void *)v37 == -1)
    {
      if ("no-infs-fp-math" == (char *)-1) {
        break;
      }
      goto LABEL_29;
    }
    if (v38 == (void *)-2)
    {
      if ("no-infs-fp-math" == (char *)-2) {
        break;
      }
      goto LABEL_29;
    }
    if (*(void *)(v37 + 8) != 15
      || (*v38 == 0x2D73666E692D6F6ELL ? (BOOL v84 = *(void *)((char *)v38 + 7) == 0x6874616D2D70662DLL) : (BOOL v84 = 0), !v84))
    {
LABEL_29:
      if (v38 == (void *)-1)
      {
        int v27 = *((unsigned __int16 *)this + 510);
        goto LABEL_31;
      }
      unsigned int v33 = v35 + v36;
      ++v35;
      continue;
    }
    break;
  }
  uint64_t v85 = llvm::Function::getFnAttribute((uint64_t)a2, "no-infs-fp-math", 0xFuLL);
  if (v85 && *(_DWORD *)(v85 + 16) == 4) {
    int v86 = 2 * (*(_DWORD *)(v85 + *(unsigned int *)(v85 + 12) + 25) == 1702195828);
  }
  else {
    int v86 = 0;
  }
  unsigned int v39 = *((_WORD *)this + 510) & 0xFFFD | v86;
LABEL_32:
  *((_WORD *)this + 510) = v39;
  uint64_t v40 = *((void *)a2 + 14);
  if (!v40 || !*(_DWORD *)(v40 + 8) || (uint64_t v41 = *(void *)(v40 + 40)) == 0 || (v42 = *(_DWORD *)(v41 + 40)) == 0)
  {
LABEL_42:
    unsigned int v51 = v39 & 0xFFFFFFFB | (4 * ((*((unsigned __int16 *)this + 358) >> 2) & 1));
    goto LABEL_43;
  }
  uint64_t v43 = *(void *)(v41 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v128 = v43;
    int v125 = v42;
    int v115 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v42 = v125;
    uint64_t v43 = v128;
    if (v115)
    {
      unint64_t v116 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v116 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v116;
      __cxa_guard_release(&qword_1EBCBE588);
      int v42 = v125;
      uint64_t v43 = v128;
    }
  }
  unint64_t v44 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xE10BBE89ACF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xE10BBE89ACF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
  unsigned int v45 = (-348639895 * ((v44 >> 47) ^ v44)) ^ 0x2D70662D;
  int v46 = v42 - 1;
  int v47 = 1;
  while (2)
  {
    unsigned int v48 = v45 & v46;
    uint64_t v49 = v43 + 24 * v48;
    uint64_t v50 = *(void **)v49;
    if (*(void *)v49 == -1)
    {
      if ("no-nans-fp-math" == (char *)-1) {
        break;
      }
      goto LABEL_40;
    }
    if (v50 == (void *)-2)
    {
      if ("no-nans-fp-math" == (char *)-2) {
        break;
      }
      goto LABEL_40;
    }
    if (*(void *)(v49 + 8) != 15
      || (*v50 == 0x2D736E616E2D6F6ELL ? (BOOL v87 = *(void *)((char *)v50 + 7) == 0x6874616D2D70662DLL) : (BOOL v87 = 0), !v87))
    {
LABEL_40:
      if (v50 == (void *)-1)
      {
        unsigned int v39 = *((unsigned __int16 *)this + 510);
        goto LABEL_42;
      }
      unsigned int v45 = v47 + v48;
      ++v47;
      continue;
    }
    break;
  }
  uint64_t v88 = llvm::Function::getFnAttribute((uint64_t)a2, "no-nans-fp-math", 0xFuLL);
  if (v88 && *(_DWORD *)(v88 + 16) == 4) {
    int v89 = 4 * (*(_DWORD *)(v88 + *(unsigned int *)(v88 + 12) + 25) == 1702195828);
  }
  else {
    int v89 = 0;
  }
  unsigned int v51 = *((_WORD *)this + 510) & 0xFFFB | v89;
LABEL_43:
  *((_WORD *)this + 510) = v51;
  uint64_t v52 = *((void *)a2 + 14);
  if (!v52 || !*(_DWORD *)(v52 + 8) || (uint64_t v53 = *(void *)(v52 + 40)) == 0 || (v54 = *(_DWORD *)(v53 + 40)) == 0)
  {
LABEL_53:
    unsigned int v64 = v51 & 0xFFFFFFEF | (16 * ((*((unsigned __int16 *)this + 358) >> 4) & 1));
    goto LABEL_54;
  }
  uint64_t v55 = *(void *)(v53 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v129 = v54;
    int v117 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v54 = v129;
    if (v117)
    {
      unint64_t v118 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v118 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v118;
      __cxa_guard_release(&qword_1EBCBE588);
      int v54 = v129;
    }
  }
  uint64_t v56 = __ROR8__(qword_1EBCBE580 ^ 0xFC9BC67DB8AC7E3, 30);
  unint64_t v57 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 - 0x102CBA84B1F06A04) ^ ((0x9DDFEA08EB382D69
                                                    * ((v56 + 0x4E390F61D0A552DLL) ^ (qword_1EBCBE580
                                                                                    - 0x102CBA84B1F06A04))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v56 + 0x4E390F61D0A552DLL) ^ (qword_1EBCBE580 - 0x102CBA84B1F06A04))));
  unsigned int v58 = -348639895 * ((v57 >> 47) ^ v57);
  int v59 = v54 - 1;
  int v60 = 1;
  while (2)
  {
    unsigned int v61 = v58 & v59;
    uint64_t v62 = v55 + 24 * v61;
    uint64_t v63 = *(void **)v62;
    if (*(void *)v62 == -1)
    {
      if ("no-signed-zeros-fp-math" == (char *)-1) {
        break;
      }
      goto LABEL_51;
    }
    if (v63 == (void *)-2)
    {
      if ("no-signed-zeros-fp-math" == (char *)-2) {
        break;
      }
      goto LABEL_51;
    }
    if (*(void *)(v62 + 8) != 23
      || (*v63 == 0x656E6769732D6F6ELL ? (BOOL v90 = v63[1] == 0x2D736F72657A2D64) : (BOOL v90 = 0),
          v90 ? (BOOL v91 = *(void *)((char *)v63 + 15) == 0x6874616D2D70662DLL) : (BOOL v91 = 0),
          !v91))
    {
LABEL_51:
      if (v63 == (void *)-1)
      {
        unsigned int v51 = *((unsigned __int16 *)this + 510);
        goto LABEL_53;
      }
      unsigned int v58 = v60 + v61;
      ++v60;
      continue;
    }
    break;
  }
  uint64_t v92 = llvm::Function::getFnAttribute((uint64_t)a2, "no-signed-zeros-fp-math", 0x17uLL);
  if (v92 && *(_DWORD *)(v92 + 16) == 4) {
    __int16 v93 = 16 * (*(_DWORD *)(v92 + *(unsigned int *)(v92 + 12) + 25) == 1702195828);
  }
  else {
    __int16 v93 = 0;
  }
  LOWORD(v64) = *((_WORD *)this + 510) & 0xFFEF | v93;
LABEL_54:
  *((_WORD *)this + 510) = v64;
  uint64_t v65 = *((void *)a2 + 14);
  if (!v65 || !*(_DWORD *)(v65 + 8) || (uint64_t v66 = *(void *)(v65 + 40)) == 0 || (v67 = *(_DWORD *)(v66 + 40)) == 0)
  {
LABEL_64:
    __int16 v76 = *((_WORD *)this + 358) & 0x20;
    int v77 = (_WORD *)((char *)this + 1020);
    goto LABEL_65;
  }
  uint64_t v68 = *(void *)(v66 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v130 = v68;
    int v119 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v68 = v130;
    if (v119)
    {
      unint64_t v120 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v120 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v120;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v68 = v130;
    }
  }
  uint64_t v69 = __ROR8__(qword_1EBCBE580 ^ 0xFC9BC67DB8AC7E3, 30);
  unint64_t v70 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 - 0x49BE07A926BA825ELL) ^ ((0x9DDFEA08EB382D69
                                                    * ((v69 + 0x23F44D17BE4D1E1) ^ (qword_1EBCBE580
                                                                                    - 0x49BE07A926BA825ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v69 + 0x23F44D17BE4D1E1) ^ (qword_1EBCBE580 - 0x49BE07A926BA825ELL))));
  unsigned int v71 = -348639895 * ((v70 >> 47) ^ v70);
  int v72 = 1;
  while (2)
  {
    unsigned int v73 = v71 & (v67 - 1);
    uint64_t v74 = v68 + 24 * v73;
    int v75 = *(void **)v74;
    if (*(void *)v74 == -1)
    {
      if ("approx-func-fp-math" == (char *)-1) {
        goto LABEL_132;
      }
      goto LABEL_62;
    }
    if (v75 == (void *)-2)
    {
      if ("approx-func-fp-math" == (char *)-2) {
        goto LABEL_132;
      }
LABEL_62:
      if (v75 != (void *)-1)
      {
        unsigned int v71 = v72 + v73;
        ++v72;
        continue;
      }
      LOWORD(v64) = *((_WORD *)this + 510);
      goto LABEL_64;
    }
    break;
  }
  if (*(void *)(v74 + 8) != 19) {
    goto LABEL_62;
  }
  BOOL v94 = *v75 == 0x662D786F72707061 && v75[1] == 0x6D2D70662D636E75;
  if (!v94 || *(void *)((char *)v75 + 11) != 0x6874616D2D70662DLL) {
    goto LABEL_62;
  }
LABEL_132:
  uint64_t v96 = *((void *)a2 + 14);
  if (!v96) {
    goto LABEL_141;
  }
  if (!*(_DWORD *)(v96 + 8)) {
    goto LABEL_141;
  }
  uint64_t v97 = *(void *)(v96 + 40);
  if (!v97) {
    goto LABEL_141;
  }
  int v98 = *(_DWORD *)(v97 + 40);
  if (!v98) {
    goto LABEL_141;
  }
  uint64_t v99 = *(void *)(v97 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v121 = v98;
    int v122 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v98 = v121;
    if (v122)
    {
      unint64_t v123 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v123 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v123;
      __cxa_guard_release(&qword_1EBCBE588);
      int v98 = v121;
    }
  }
  uint64_t v100 = __ROR8__(qword_1EBCBE580 ^ 0xFC9BC67DB8AC7E3, 30);
  unint64_t v101 = 0x9DDFEA08EB382D69
       * ((qword_1EBCBE580 - 0x49BE07A926BA825ELL) ^ ((0x9DDFEA08EB382D69
                                                     * ((v100 + 0x23F44D17BE4D1E1) ^ (qword_1EBCBE580
                                                                                      - 0x49BE07A926BA825ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v100 + 0x23F44D17BE4D1E1) ^ (qword_1EBCBE580 - 0x49BE07A926BA825ELL))));
  unsigned int v102 = -348639895 * ((v101 >> 47) ^ v101);
  for (int j = 1; ; ++j)
  {
    unsigned int v104 = v102 & (v98 - 1);
    uint64_t v105 = v99 + 24 * v104;
    unsigned int v106 = *(void **)v105;
    if (*(void *)v105 == -1)
    {
      if ("approx-func-fp-math" == (char *)-1) {
        goto LABEL_168;
      }
      goto LABEL_140;
    }
    if (v106 != (void *)-2) {
      break;
    }
    if ("approx-func-fp-math" == (char *)-2) {
      goto LABEL_168;
    }
LABEL_140:
    if (v106 == (void *)-1) {
      goto LABEL_141;
    }
    unsigned int v102 = j + v104;
  }
  if (*(void *)(v105 + 8) != 19) {
    goto LABEL_140;
  }
  BOOL v107 = *v106 == 0x662D786F72707061 && v106[1] == 0x6D2D70662D636E75;
  if (!v107 || *(void *)((char *)v106 + 11) != 0x6874616D2D70662DLL) {
    goto LABEL_140;
  }
LABEL_168:
  uint64_t v109 = *(void *)(v105 + 16);
  if (!v109 || *(_DWORD *)(v109 + 16) != 4)
  {
LABEL_141:
    __int16 v76 = 0;
    goto LABEL_142;
  }
  __int16 v76 = 32 * (*(_DWORD *)(v109 + *(unsigned int *)(v109 + 12) + 25) == 1702195828);
LABEL_142:
  int v77 = (_WORD *)((char *)this + 1020);
  LOWORD(v64) = *((_WORD *)this + 510);
LABEL_65:
  *int v77 = v64 & 0xFFDF | v76;
}

uint64_t llvm::TargetMachine::getCodeModel(llvm::TargetMachine *this)
{
  return *((unsigned int *)this + 137);
}

BOOL llvm::TargetMachine::useEmulatedTLS(llvm::TargetMachine *this)
{
  unsigned int v1 = *((_DWORD *)this + 260);
  if ((v1 & 0x40000) != 0) {
    return (v1 >> 17) & 1;
  }
  int v2 = *((_DWORD *)this + 122);
  if (v2 == 11) {
    return 1;
  }
  int v3 = *((_DWORD *)this + 121);
  BOOL v4 = v2 == 18;
  if (v3 != 15) {
    BOOL v4 = 0;
  }
  return v3 == 13 || v4;
}

uint64_t llvm::TargetMachine::getTLSModel(llvm::TargetMachine *this, llvm::Module **a2)
{
  int PIELevel = llvm::Module::getPIELevel(a2[5]);
  int v5 = *((_DWORD *)this + 136);
  unsigned int shouldAssumeDSOLocal = llvm::TargetMachine::shouldAssumeDSOLocal(this, v6, (const llvm::GlobalValue *)a2);
  unsigned int v8 = ((*((_DWORD *)a2 + 8) >> 10) & 7) - 1;
  if (shouldAssumeDSOLocal) {
    unsigned int v9 = 3;
  }
  else {
    unsigned int v9 = 2;
  }
  if (PIELevel) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v5 == 1;
  }
  if (v10) {
    unsigned int v9 = shouldAssumeDSOLocal;
  }
  if (v8 <= v9) {
    return v9;
  }
  else {
    return v8;
  }
}

uint64_t llvm::TargetMachine::getOptLevel(llvm::TargetMachine *this)
{
  return *((unsigned int *)this + 138);
}

uint64_t llvm::TargetMachine::getSymbol(llvm::TargetMachine *this, const llvm::GlobalValue *a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(llvm::TargetMachine *))(*(void *)this + 24))(this);
  uint64_t Symbol = (*(uint64_t (**)(uint64_t, const llvm::GlobalValue *, llvm::TargetMachine *))(*(void *)v4 + 232))(v4, a2, this);
  if (!Symbol)
  {
    BOOL v10 = v12;
    long long v11 = xmmword_1CFAC3020;
    llvm::TargetMachine::getNameWithPrefix((uint64_t)this, (uint64_t)&v10, a2, *(llvm::Mangler **)(v4 + 936), 0);
    uint64_t v7 = *(llvm::MCContext **)(v4 + 840);
    __int16 v9 = 261;
    v8[0] = (unsigned __int8 **)v10;
    v8[1] = (unsigned __int8 **)v11;
    uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v7, v8);
    if (v10 != v12) {
      free(v10);
    }
  }
  return Symbol;
}

void sub_1CD0EDA48()
{
}

void *sub_1CD0EDA5C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26473B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD0EDAA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26473B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD0EDAD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t LLVMGetFirstTarget()
{
  return qword_1EBD0A2D0;
}

uint64_t LLVMGetNextTarget(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t LLVMGetTargetFromName(char *__s)
{
  if (__s) {
    size_t v2 = strlen(__s);
  }
  else {
    size_t v2 = 0;
  }
  for (uint64_t i = qword_1EBD0A2D0; i; uint64_t i = *(void *)i)
  {
    uint64_t v4 = *(const void **)(i + 16);
    if (v4) {
      size_t v5 = strlen(*(const char **)(i + 16));
    }
    else {
      size_t v5 = 0;
    }
    if (v5 == v2 && (!v2 || !memcmp(v4, __s, v2))) {
      break;
    }
  }
  return i;
}

uint64_t LLVMGetTargetFromTriple(const char *a1, uint64_t **a2, char **a3)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  size_t v6 = strlen(a1);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    unsigned int v8 = operator new(v9 + 1);
    __p[1] = v7;
    unint64_t v16 = v10 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  unsigned int v8 = __p;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, a1, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  long long v11 = llvm::TargetRegistry::lookupTarget((std::string::size_type)__p, (uint64_t)v17);
  *a2 = v11;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if (*a2) {
      goto LABEL_11;
    }
  }
  else if (v11)
  {
LABEL_11:
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  if (a3)
  {
    if (v18 >= 0) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = (void **)v17[0];
    }
    *a3 = strdup((const char *)v13);
  }
  uint64_t v12 = 1;
LABEL_19:
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  return v12;
}

uint64_t LLVMGetTargetName(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t LLVMGetTargetDescription(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t LLVMTargetHasJIT(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

BOOL LLVMTargetHasTargetMachine(uint64_t a1)
{
  return *(void *)(a1 + 96) != 0;
}

BOOL LLVMTargetHasAsmBackend(uint64_t a1)
{
  return *(void *)(a1 + 104) != 0;
}

uint64_t LLVMCreateTargetMachine(uint64_t a1, const char *a2, const char *a3, const char *a4, unsigned int a5, int a6, unsigned int a7)
{
  LODWORD(v10) = a6 - 1;
  uint64_t v11 = (a6 - 1) < 6;
  if ((a6 - 1) >= 6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v10;
  }
  uint64_t v23 = v10;
  char v12 = 0;
  uint64_t v13 = a7;
  uint64_t v14 = a7;
  switch(a7)
  {
    case 0u:
      break;
    case 1u:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      char v12 = 1;
      break;
    case 2u:
      char v12 = 0;
      uint64_t v14 = 0;
      uint64_t v13 = 0x100000000;
      break;
    case 4u:
      char v12 = 0;
      uint64_t v13 = 0x100000000;
      uint64_t v14 = 2;
      break;
    case 5u:
      char v12 = 0;
      uint64_t v13 = 0x100000000;
      uint64_t v14 = 3;
      break;
    case 6u:
      char v12 = 0;
      uint64_t v13 = 0x100000000;
      uint64_t v14 = 4;
      break;
    default:
      char v12 = 0;
      uint64_t v13 = 0x100000000;
      uint64_t v14 = 1;
      break;
  }
  if (a5 >= 4) {
    int v15 = 2;
  }
  else {
    int v15 = a5;
  }
  sub_1CD4546AC((uint64_t)v25);
  if (a2)
  {
    size_t v16 = strlen(a2);
    if (a3) {
      goto LABEL_16;
    }
  }
  else
  {
    size_t v16 = 0;
    if (a3)
    {
LABEL_16:
      size_t v17 = strlen(a3);
      goto LABEL_19;
    }
  }
  size_t v17 = 0;
LABEL_19:
  uint64_t v18 = v11 << 32;
  if (a4) {
    size_t v19 = strlen(a4);
  }
  else {
    size_t v19 = 0;
  }
  uint64_t v20 = sub_1CD454388(a1, (uint64_t)a2, v16, (uint64_t)a3, v17, (uint64_t)a4, v19, (uint64_t)v25, v18 | v23, v14 | v13, v15, v12);
  if (v39 < 0) {
    operator delete(__p);
  }
  uint64_t v40 = (void **)&v37;
  sub_1CB8338B8(&v40);
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  unsigned int v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  return v20;
}

uint64_t LLVMDisposeTargetMachine(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t LLVMGetTargetMachineTarget(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

char *LLVMGetTargetMachineTriple(uint64_t a1)
{
  if (*(char *)(a1 + 471) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v6, *(const void **)(a1 + 448), *(void *)(a1 + 456));
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 448);
    uint64_t v7 = *(void *)(a1 + 464);
  }
  int v1 = SHIBYTE(v7);
  size_t v2 = (void *)v6;
  if (v7 >= 0) {
    uint64_t v3 = (const char *)&v6;
  }
  else {
    uint64_t v3 = (const char *)v6;
  }
  uint64_t v4 = strdup(v3);
  if (v1 < 0) {
    operator delete(v2);
  }
  return v4;
}

char *LLVMGetTargetMachineCPU(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 519);
  if (v1 >= 0) {
    size_t v2 = (const void *)(a1 + 496);
  }
  else {
    size_t v2 = *(const void **)(a1 + 496);
  }
  if (v1 >= 0) {
    size_t v3 = v1 & 0x7F;
  }
  else {
    size_t v3 = *(void *)(a1 + 504);
  }
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = operator new(v5 + 1);
    __dst[1] = v3;
    int64_t v13 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_14;
  }
  HIBYTE(v13) = v3;
  uint64_t v4 = __dst;
  if (v3) {
LABEL_14:
  }
    memmove(v4, v2, v3);
  *((unsigned char *)v4 + v3) = 0;
  int v7 = SHIBYTE(v13);
  unsigned int v8 = (void *)__dst[0];
  if (v13 >= 0) {
    uint64_t v9 = (const char *)__dst;
  }
  else {
    uint64_t v9 = (const char *)__dst[0];
  }
  uint64_t v10 = strdup(v9);
  if (v7 < 0) {
    operator delete(v8);
  }
  return v10;
}

char *LLVMGetTargetMachineFeatureString(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 543);
  int v2 = v1;
  if (v1 >= 0) {
    size_t v3 = (const void *)(a1 + 520);
  }
  else {
    size_t v3 = *(const void **)(a1 + 520);
  }
  size_t v4 = v1 & 0x7F;
  if (v2 >= 0) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = *(void *)(a1 + 528);
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = v5;
    int64_t v15 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_14;
  }
  HIBYTE(v15) = v5;
  uint64_t v6 = __dst;
  if (v5) {
LABEL_14:
  }
    memmove(v6, v3, v5);
  *((unsigned char *)v6 + v5) = 0;
  int v9 = SHIBYTE(v15);
  uint64_t v10 = (void *)__dst[0];
  if (v15 >= 0) {
    uint64_t v11 = (const char *)__dst;
  }
  else {
    uint64_t v11 = (const char *)__dst[0];
  }
  char v12 = strdup(v11);
  if (v9 < 0) {
    operator delete(v10);
  }
  return v12;
}

uint64_t LLVMSetTargetMachineAsmVerbosity(uint64_t result, int a2)
{
  *(_WORD *)(result + 1128) = *(_WORD *)(result + 1128) & 0xF7FF | ((a2 != 0) << 11);
  return result;
}

void LLVMCreateTargetDataLayout()
{
}

uint64_t LLVMTargetMachineEmitToFile(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char **a5)
{
  v14.__val_ = 0;
  v14.__cat_ = std::system_category();
  if (a3) {
    size_t v7 = strlen(a3);
  }
  else {
    size_t v7 = 0;
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v13, a3, v7, (uint64_t)&v14, 0);
  if (!v14.__val_) {
    sub_1CD0EE3C8();
  }
  std::error_code::message(&v12, &v14);
  int v8 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  int v9 = (void *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v12;
  }
  else {
    uint64_t v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  *a5 = strdup((const char *)v10);
  if (v8 < 0) {
    operator delete(v9);
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v13);
  return 1;
}

void sub_1CD0EE3C8()
{
  v0[56] = *(llvm::legacy::PassManagerImpl **)MEMORY[0x1E4F143B8];
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)v0);
}

void LLVMTargetMachineEmitToMemoryBuffer()
{
}

char *LLVMGetDefaultTargetTriple()
{
  llvm::sys::getDefaultTargetTriple((uint64_t)v5);
  int v0 = v6;
  char v1 = (void *)v5[0];
  if (v6 >= 0) {
    int v2 = (const char *)v5;
  }
  else {
    int v2 = (const char *)v5[0];
  }
  size_t v3 = strdup(v2);
  if (v0 < 0) {
    operator delete(v1);
  }
  return v3;
}

char *LLVMNormalizeTargetTriple(char *__s)
{
  if (__s) {
    size_t v2 = strlen(__s);
  }
  else {
    size_t v2 = 0;
  }
  llvm::Triple::normalize((uint64_t)__s, v2, &v8);
  int v3 = SHIBYTE(v8.__r_.__value_.__r.__words[2]);
  size_t v4 = (void *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v5 = &v8;
  }
  else {
    size_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  char v6 = strdup((const char *)v5);
  if (v3 < 0) {
    operator delete(v4);
  }
  return v6;
}

char *LLVMGetHostCPUName(llvm::sys *a1)
{
  HostCPUName = llvm::sys::getHostCPUName(a1);

  return strdup(HostCPUName);
}

char *LLVMGetHostCPUFeatures()
{
  int64x2_t v7 = 0uLL;
  uint64_t v8 = 0;
  llvm::SubtargetFeatures::Split(&v7, (uint64_t)"", 0);
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = (void **)0x1000000000;
  sub_1CD4FB688((std::string *)v7.i64[0], (std::string *)v7.i64[1], ",", 1uLL, &v5);
  int v0 = SHIBYTE(v5.__r_.__value_.__r.__words[2]);
  char v1 = (void *)v5.__r_.__value_.__r.__words[0];
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v2 = &v5;
  }
  else {
    size_t v2 = (std::string *)v5.__r_.__value_.__r.__words[0];
  }
  int v3 = strdup((const char *)v2);
  if (v0 < 0) {
    operator delete(v1);
  }
  sub_1CC0D7CD8((uint64_t)v6);
  v6[0] = (void **)&v7;
  sub_1CB8338B8(v6);
  return v3;
}

void LLVMAddAnalysisPasses(llvm::TargetMachine *a1)
{
  v1[4] = *MEMORY[0x1E4F143B8];
  llvm::TargetMachine::getTargetIRAnalysis(a1, (uint64_t)v1);
  llvm::createTargetTransformInfoWrapperPass();
}

uint64_t llvm::MachO::getArchitectureFromCpuType(llvm::MachO *this, int a2)
{
  int v2 = a2 & 0xFFFFFF;
  if (this == 7 && v2 == 3)
  {
    LOBYTE(v2) = 0;
  }
  else if (this == 16777223 && v2 == 3)
  {
    LOBYTE(v2) = 1;
  }
  else if (this == 16777223 && v2 == 8)
  {
    LOBYTE(v2) = 2;
  }
  else if (this == 12 && v2 == 5)
  {
    LOBYTE(v2) = 3;
  }
  else if (this == 12 && v2 == 6)
  {
    LOBYTE(v2) = 4;
  }
  else if (this == 12 && v2 == 7)
  {
    LOBYTE(v2) = 5;
  }
  else if (this == 12 && v2 == 9)
  {
    LOBYTE(v2) = 6;
  }
  else if (this == 12 && v2 == 11)
  {
    LOBYTE(v2) = 7;
  }
  else if (this == 12 && v2 == 12)
  {
    LOBYTE(v2) = 8;
  }
  else if (this == 12 && v2 == 14)
  {
    LOBYTE(v2) = 9;
  }
  else if (this == 12 && v2 == 15)
  {
    LOBYTE(v2) = 10;
  }
  else if (this == 12 && v2 == 16)
  {
    LOBYTE(v2) = 11;
  }
  else if (this != 16777228 || v2)
  {
    if (this == 16777228 && v2 == 2)
    {
      LOBYTE(v2) = 13;
    }
    else if (this == 33554444 && v2 == 1)
    {
      LOBYTE(v2) = 14;
    }
    else if (this == 16777228 && v2 == 1)
    {
      LOBYTE(v2) = 15;
    }
    else if (this == 16777235 && v2 == 32)
    {
      LOBYTE(v2) = 16;
    }
    else if (this != 16777235 || v2 != 17)
    {
      if (this == 16777235 && v2 == 49)
      {
        LOBYTE(v2) = 18;
      }
      else if (this == 16777235 && v2 == 65)
      {
        LOBYTE(v2) = 19;
      }
      else if (this == 16777235 && v2 == 81)
      {
        LOBYTE(v2) = 20;
      }
      else if (this == 16777235 && v2 == 97)
      {
        LOBYTE(v2) = 21;
      }
      else if (this == 16777235 && v2 == 34)
      {
        LOBYTE(v2) = 22;
      }
      else if (this == 16777235 && v2 == 114)
      {
        LOBYTE(v2) = 23;
      }
      else if (this == 16777235 && v2 == 82)
      {
        LOBYTE(v2) = 24;
      }
      else if (this == 16777235 && v2 == 146)
      {
        LOBYTE(v2) = 25;
      }
      else if (this == 16777235 && v2 == 1602)
      {
        LOBYTE(v2) = 26;
      }
      else if (this == 16777235 && v2 == 210)
      {
        LOBYTE(v2) = 27;
      }
      else if (this == 16777235 && v2 == 290)
      {
        LOBYTE(v2) = 28;
      }
      else if (this == 16777235 && v2 == 322)
      {
        LOBYTE(v2) = 29;
      }
      else if (this == 16777235 && v2 == 530)
      {
        LOBYTE(v2) = 30;
      }
      else if (this == 16777235 && v2 == 562)
      {
        LOBYTE(v2) = 31;
      }
      else if (this == 16777235 && v2 == 594)
      {
        LOBYTE(v2) = 32;
      }
      else if (this == 16777235 && v2 == 370)
      {
        LOBYTE(v2) = 33;
      }
      else if (this == 16777235 && v2 == 402)
      {
        LOBYTE(v2) = 34;
      }
      else if (this == 16777235 && v2 == 434)
      {
        LOBYTE(v2) = 35;
      }
      else if (this == 16777235 && v2 == 498)
      {
        LOBYTE(v2) = 36;
      }
      else if (this == 16777235 && v2 == 610)
      {
        LOBYTE(v2) = 37;
      }
      else if (this == 16777235 && v2 == 275)
      {
        LOBYTE(v2) = 38;
      }
      else if (this == 16777235 && v2 == 419)
      {
        LOBYTE(v2) = 39;
      }
      else if (this == 16777235 && v2 == 435)
      {
        LOBYTE(v2) = 40;
      }
      else if (this == 16777235 && v2 == 403)
      {
        LOBYTE(v2) = 41;
      }
      else if (this == 16777235 && v2 == 467)
      {
        LOBYTE(v2) = 42;
      }
      else if (this == 16777235 && v2 == 323)
      {
        LOBYTE(v2) = 43;
      }
      else if (this == 16777236 && v2 == 4000)
      {
        LOBYTE(v2) = 44;
      }
      else if (this == 16777236 && v2 == 4001)
      {
        LOBYTE(v2) = 45;
      }
      else if (this == 16777236 && v2 == 4002)
      {
        LOBYTE(v2) = 46;
      }
      else if (this == 16777236 && v2 == 4003)
      {
        LOBYTE(v2) = 47;
      }
      else if (this == 16777236 && v2 == 4004)
      {
        LOBYTE(v2) = 48;
      }
      else if (this == 16777236 && v2 == 4005)
      {
        LOBYTE(v2) = 49;
      }
      else if (this == 16777236 && v2 == 5000)
      {
        LOBYTE(v2) = 50;
      }
      else if (this == 16777236 && v2 == 5001)
      {
        LOBYTE(v2) = 51;
      }
      else if (this == 16777236 && v2 == 5002)
      {
        LOBYTE(v2) = 52;
      }
      else if (this == 16777236 && v2 == 6000)
      {
        LOBYTE(v2) = 53;
      }
      else if (this == 16777236 && v2 == 6001)
      {
        LOBYTE(v2) = 54;
      }
      else if (this == 16777236 && v2 == 6002)
      {
        LOBYTE(v2) = 55;
      }
      else if (this == 16777236 && v2 == 6003)
      {
        LOBYTE(v2) = 56;
      }
      else if (this == 16777236 && v2 == 6004)
      {
        LOBYTE(v2) = 57;
      }
      else if (this == 16777236 && v2 == 6005)
      {
        LOBYTE(v2) = 58;
      }
      else if (this == 16777237 && v2 == 590342)
      {
        LOBYTE(v2) = 59;
      }
      else if (this == 16777237 && v2 == 590343)
      {
        LOBYTE(v2) = 60;
      }
      else if (this == 16777237 && v2 == 590602)
      {
        LOBYTE(v2) = 61;
      }
      else if (this == 16777237 && v2 == 9765376)
      {
        LOBYTE(v2) = 62;
      }
      else if (this == 16777237 && v2 == 9765378)
      {
        LOBYTE(v2) = 63;
      }
      else if (this == 16777237 && v2 == 9765380)
      {
        LOBYTE(v2) = 64;
      }
      else if (this == 16777237 && v2 == 9765633)
      {
        LOBYTE(v2) = 65;
      }
      else if (this == 16777237 && v2 == 9765638)
      {
        LOBYTE(v2) = 66;
      }
      else if (this == 16777237 && v2 == 1115655)
      {
        LOBYTE(v2) = 67;
      }
      else if (this == 16777237 && v2 == 1116167)
      {
        LOBYTE(v2) = 68;
      }
      else if (this == 16777238 && v2 == 1)
      {
        LOBYTE(v2) = 69;
      }
      else if (this == 16777238 && v2 == 2)
      {
        LOBYTE(v2) = 70;
      }
      else if (this == 16777238 && v2 == 3)
      {
        LOBYTE(v2) = 71;
      }
      else if (this == 16777238 && v2 == 4)
      {
        LOBYTE(v2) = 72;
      }
      else if (this == 23 && v2 == 1)
      {
        LOBYTE(v2) = 73;
      }
      else if (this == 23 && v2 == 2)
      {
        LOBYTE(v2) = 74;
      }
      else if (this == 23 && v2 == 3)
      {
        LOBYTE(v2) = 75;
      }
      else if (this == 23 && v2 == 4)
      {
        LOBYTE(v2) = 76;
      }
      else if (this == 23 && v2 == 5)
      {
        LOBYTE(v2) = 77;
      }
      else if (this == 23 && v2 == 6)
      {
        LOBYTE(v2) = 78;
      }
      else if (this == 23 && v2 == 7)
      {
        LOBYTE(v2) = 79;
      }
      else if (this == 23 && v2 == 8)
      {
        LOBYTE(v2) = 80;
      }
      else if (this == 23 && v2 == 9)
      {
        LOBYTE(v2) = 81;
      }
      else if (this == 23 && v2 == 10)
      {
        LOBYTE(v2) = 82;
      }
      else if (this == 23 && v2 == 11)
      {
        LOBYTE(v2) = 83;
      }
      else if (this == 16777239 && v2 == 1)
      {
        LOBYTE(v2) = 84;
      }
      else if (this == 16777239 && v2 == 2)
      {
        LOBYTE(v2) = 85;
      }
      else if (this == 16777239 && v2 == 3)
      {
        LOBYTE(v2) = 86;
      }
      else if (this == 16777239 && v2 == 4)
      {
        LOBYTE(v2) = 87;
      }
      else if (this == 16777239 && v2 == 5)
      {
        LOBYTE(v2) = 88;
      }
      else if (this == 16777239 && v2 == 6)
      {
        LOBYTE(v2) = 89;
      }
      else if (this == 16777239 && v2 == 7)
      {
        LOBYTE(v2) = 90;
      }
      else if (this == 16777239 && v2 == 8)
      {
        LOBYTE(v2) = 91;
      }
      else if (this == 16777239 && v2 == 9)
      {
        LOBYTE(v2) = 92;
      }
      else if (this == 16777239 && v2 == 10)
      {
        LOBYTE(v2) = 93;
      }
      else if (this == 16777239 && v2 == 11)
      {
        LOBYTE(v2) = 94;
      }
      else if (this == 7 && v2 == 4)
      {
        LOBYTE(v2) = 95;
      }
      else if (this == 7 && v2 == 5)
      {
        LOBYTE(v2) = 96;
      }
      else if (this == 16777235 && v2 == 16)
      {
        LOBYTE(v2) = 97;
      }
      else if (this == 16777235 && v2 == 33)
      {
        LOBYTE(v2) = 98;
      }
      else if (this == 16777235 && v2 == 98)
      {
        LOBYTE(v2) = 99;
      }
      else if (this == 16777235 && v2 == 66)
      {
        LOBYTE(v2) = 100;
      }
      else if (this == 16777235 && v2 == 130)
      {
        LOBYTE(v2) = 101;
      }
      else if (this == 16777235 && v2 == 194)
      {
        LOBYTE(v2) = 102;
      }
      else if (this == 16777235 && v2 == 274)
      {
        LOBYTE(v2) = 103;
      }
      else if (this == 16777235 && v2 == 306)
      {
        LOBYTE(v2) = 104;
      }
      else if (this == 16777235 && v2 == 514)
      {
        LOBYTE(v2) = 105;
      }
      else if (this == 16777235 && v2 == 546)
      {
        LOBYTE(v2) = 106;
      }
      else if (this == 16777235 && v2 == 578)
      {
        LOBYTE(v2) = 107;
      }
      else if (this == 16777235 && v2 == 354)
      {
        LOBYTE(v2) = 108;
      }
      else if (this == 16777235 && v2 == 386)
      {
        LOBYTE(v2) = 109;
      }
      else if (this == 16777235 && v2 == 418)
      {
        LOBYTE(v2) = 110;
      }
      else if (this == 16777235 && v2 == 482)
      {
        LOBYTE(v2) = 111;
      }
      else if (this == 16777235 && v2 == 67)
      {
        LOBYTE(v2) = 112;
      }
      else if (this == 16777235 && v2 == 83)
      {
        LOBYTE(v2) = 113;
      }
      else if (this == 16777235 && v2 == 99)
      {
        LOBYTE(v2) = 114;
      }
      else if (this != 16777235 || v2 != 115)
      {
        if (this == 16777235 && v2 == 227)
        {
          LOBYTE(v2) = 116;
        }
        else if (this == 16777235 && v2 == 243)
        {
          LOBYTE(v2) = 117;
        }
        else if (this == 16777235 && v2 == 259)
        {
          LOBYTE(v2) = 118;
        }
        else if (v2 == 291 && this == 16777235)
        {
          LOBYTE(v2) = 119;
        }
        else
        {
          LOBYTE(v2) = 120;
        }
      }
    }
  }
  else
  {
    LOBYTE(v2) = 12;
  }
  return v2;
}

uint64_t llvm::MachO::getImplementationFromCpuType(llvm::MachO *this, int a2)
{
  uint64_t v2 = a2 & 0xFFFFFF | ((void)this << 32);
  if (v2 > 0x1000013000000F2)
  {
    if (v2 > 0x1000013000001A2)
    {
      if (v2 <= 0x100001300000211)
      {
        if (v2 <= 0x1000013000001D2)
        {
          switch(v2)
          {
            case 0x1000013000001A3:
              return 50;
            case 0x1000013000001B2:
              return 41;
            case 0x1000013000001B3:
              return 53;
          }
        }
        else if (v2 > 0x1000013000001F1)
        {
          if (v2 == 0x1000013000001F2) {
            return 43;
          }
          if (v2 == 0x100001300000202) {
            return 30;
          }
        }
        else
        {
          if (v2 == 0x1000013000001D3) {
            return 57;
          }
          if (v2 == 0x1000013000001E2) {
            return 42;
          }
        }
      }
      else if (v2 > 0x100001300000251)
      {
        if (v2 > 0x100001300000641)
        {
          if (v2 == 0x100001300000642) {
            return 23;
          }
          if (v2 == 0x200000C00000001) {
            return 7;
          }
        }
        else
        {
          if (v2 == 0x100001300000252) {
            return 35;
          }
          if (v2 == 0x100001300000262) {
            return 44;
          }
        }
      }
      else if (v2 > 0x100001300000231)
      {
        if (v2 == 0x100001300000232) {
          return 33;
        }
        if (v2 == 0x100001300000242) {
          return 34;
        }
      }
      else
      {
        if (v2 == 0x100001300000212) {
          return 31;
        }
        if (v2 == 0x100001300000222) {
          return 32;
        }
      }
    }
    else if (v2 <= 0x100001300000141)
    {
      if (v2 <= 0x100001300000112)
      {
        switch(v2)
        {
          case 0x1000013000000F3:
            return 52;
          case 0x100001300000103:
            return 54;
          case 0x100001300000112:
            return 26;
        }
      }
      else if (v2 > 0x100001300000122)
      {
        if (v2 == 0x100001300000123) {
          return 56;
        }
        if (v2 == 0x100001300000132) {
          return 28;
        }
      }
      else
      {
        if (v2 == 0x100001300000113) {
          return 47;
        }
        if (v2 == 0x100001300000122) {
          return 27;
        }
      }
    }
    else if (v2 > 0x100001300000181)
    {
      if (v2 > 0x100001300000192)
      {
        if (v2 == 0x100001300000193) {
          return 55;
        }
        if (v2 == 0x1000013000001A2) {
          return 40;
        }
      }
      else
      {
        if (v2 == 0x100001300000182) {
          return 38;
        }
        if (v2 == 0x100001300000192) {
          return 39;
        }
      }
    }
    else if (v2 > 0x100001300000161)
    {
      if (v2 == 0x100001300000162) {
        return 36;
      }
      if (v2 == 0x100001300000172) {
        return 37;
      }
    }
    else
    {
      if (v2 == 0x100001300000142) {
        return 29;
      }
      if (v2 == 0x100001300000143) {
        return 58;
      }
    }
    return 59;
  }
  if (v2 <= 0x100001300000041)
  {
    if (v2 > 0x10000130000000FLL)
    {
      if (v2 <= 0x100001300000020)
      {
        switch(v2)
        {
          case 0x100001300000010:
            return 8;
          case 0x100001300000011:
            return 10;
          case 0x100001300000020:
            return 9;
        }
      }
      else if (v2 > 0x100001300000030)
      {
        if (v2 == 0x100001300000031) {
          return 12;
        }
        if (v2 == 0x100001300000041) {
          return 13;
        }
      }
      else
      {
        if (v2 == 0x100001300000021) {
          return 11;
        }
        if (v2 == 0x100001300000022) {
          return 16;
        }
      }
    }
    else if (v2 <= 0x100000700000002)
    {
      switch(v2)
      {
        case 0x700000003:
          return 0;
        case 0x700000004:
          return 1;
        case 0x700000005:
          return 2;
      }
    }
    else if (v2 > 0x100000BFFFFFFFFLL)
    {
      if (v2 == 0x100000C00000000) {
        return 5;
      }
      if (v2 == 0x100000C00000002) {
        return 6;
      }
    }
    else
    {
      if (v2 == 0x100000700000003) {
        return 3;
      }
      if (v2 == 0x100000700000008) {
        return 4;
      }
    }
    return 59;
  }
  if (v2 > 0x100001300000062)
  {
    if (v2 > 0x100001300000091)
    {
      if (v2 > 0x1000013000000D1)
      {
        if (v2 == 0x1000013000000D2) {
          return 25;
        }
        if (v2 == 0x1000013000000E3) {
          return 51;
        }
      }
      else
      {
        if (v2 == 0x100001300000092) {
          return 22;
        }
        if (v2 == 0x1000013000000C2) {
          return 24;
        }
      }
    }
    else if (v2 > 0x100001300000072)
    {
      if (v2 == 0x100001300000073) {
        return 49;
      }
      if (v2 == 0x100001300000082) {
        return 21;
      }
    }
    else
    {
      if (v2 == 0x100001300000063) {
        return 48;
      }
      if (v2 == 0x100001300000072) {
        return 18;
      }
    }
    return 59;
  }
  if (v2 <= 0x100001300000051)
  {
    switch(v2)
    {
      case 0x100001300000042:
        return 19;
      case 0x100001300000043:
        return 45;
      case 0x100001300000051:
        return 14;
    }
    return 59;
  }
  if (v2 <= 0x100001300000060)
  {
    if (v2 == 0x100001300000052) {
      return 20;
    }
    if (v2 == 0x100001300000053) {
      return 46;
    }
    return 59;
  }
  if (v2 == 0x100001300000061) {
    return 15;
  }
  else {
    return 17;
  }
}

uint64_t llvm::MachO::getArchitectureFromName(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x36383369:
          unsigned __int8 v2 = 0;
          break;
        case 0x36383469:
          unsigned __int8 v2 = 95;
          break;
        case 0x36383569:
          unsigned __int8 v2 = 96;
          break;
        default:
          goto LABEL_530;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 1986884193 && *(unsigned char *)(a1 + 4) == 54)
      {
        unsigned __int8 v2 = 4;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(unsigned char *)(a1 + 4) == 53)
      {
        unsigned __int8 v2 = 5;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(unsigned char *)(a1 + 4) == 55)
      {
        unsigned __int8 v2 = 6;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(unsigned char *)(a1 + 4) != 52) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 12;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1597388920 && *(_WORD *)(a1 + 4) == 13366)
      {
        unsigned __int8 v2 = 1;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29748)
      {
        unsigned __int8 v2 = 3;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29495)
      {
        unsigned __int8 v2 = 7;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27447)
      {
        unsigned __int8 v2 = 8;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27958)
      {
        unsigned __int8 v2 = 9;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27959)
      {
        unsigned __int8 v2 = 10;
      }
      else if (*(_DWORD *)a1 == 913142369 && *(_WORD *)(a1 + 4) == 25908)
      {
        unsigned __int8 v2 = 13;
      }
      else if (*(_DWORD *)a1 == 1597143143 && *(_WORD *)(a1 + 4) == 12385)
      {
        unsigned __int8 v2 = 97;
      }
      else
      {
        if (*(_DWORD *)a1 != 1600599143 || *(_WORD *)(a1 + 4) != 12385) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 98;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1597388920 && *(_DWORD *)(a1 + 3) == 1748252255)
      {
        unsigned __int8 v2 = 2;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_DWORD *)(a1 + 3) == 1835349878)
      {
        unsigned __int8 v2 = 11;
      }
      else if (*(_DWORD *)a1 == 913142369 && *(_DWORD *)(a1 + 3) == 947270710)
      {
        unsigned __int8 v2 = 15;
      }
      else if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        unsigned __int8 v2 = 99;
      }
      else if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811687789)
      {
        unsigned __int8 v2 = 100;
      }
      else if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        unsigned __int8 v2 = 101;
      }
      else if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        unsigned __int8 v2 = 102;
      }
      else if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        unsigned __int8 v2 = 103;
      }
      else if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        unsigned __int8 v2 = 104;
      }
      else if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811687795)
      {
        unsigned __int8 v2 = 105;
      }
      else if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811687779)
      {
        unsigned __int8 v2 = 106;
      }
      else if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811687780)
      {
        unsigned __int8 v2 = 107;
      }
      else if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        unsigned __int8 v2 = 108;
      }
      else if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        unsigned __int8 v2 = 109;
      }
      else if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811687795)
      {
        unsigned __int8 v2 = 110;
      }
      else if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811687780)
      {
        unsigned __int8 v2 = 111;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        unsigned __int8 v2 = 112;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811753319)
      {
        unsigned __int8 v2 = 113;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811687795)
      {
        unsigned __int8 v2 = 114;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811753331)
      {
        unsigned __int8 v2 = 115;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        unsigned __int8 v2 = 116;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811753328)
      {
        unsigned __int8 v2 = 117;
      }
      else if (*(_DWORD *)a1 == 1731604839 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        unsigned __int8 v2 = 118;
      }
      else if (*(_DWORD *)a1 ^ 0x73363167 | *(_DWORD *)(a1 + 3) ^ 0x30615F73)
      {
        unsigned __int8 v2 = 120;
      }
      else
      {
        unsigned __int8 v2 = 119;
      }
      break;
    case 8:
      if (*(void *)a1 != 0x32335F34366D7261) {
        goto LABEL_530;
      }
      unsigned __int8 v2 = 14;
      break;
    case 9:
      if (*(void *)a1 == 0x31765F3233726961 && *(unsigned char *)(a1 + 8) == 54)
      {
        unsigned __int8 v2 = 73;
      }
      else if (*(void *)a1 == 0x31765F3233726961 && *(unsigned char *)(a1 + 8) == 56)
      {
        unsigned __int8 v2 = 74;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 48)
      {
        unsigned __int8 v2 = 76;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 49)
      {
        unsigned __int8 v2 = 77;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 50)
      {
        unsigned __int8 v2 = 78;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 51)
      {
        unsigned __int8 v2 = 79;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 52)
      {
        unsigned __int8 v2 = 80;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 53)
      {
        unsigned __int8 v2 = 81;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 54)
      {
        unsigned __int8 v2 = 82;
      }
      else if (*(void *)a1 == 0x32765F3233726961 && *(unsigned char *)(a1 + 8) == 55)
      {
        unsigned __int8 v2 = 83;
      }
      else if (*(void *)a1 == 0x31765F3436726961 && *(unsigned char *)(a1 + 8) == 54)
      {
        unsigned __int8 v2 = 84;
      }
      else if (*(void *)a1 == 0x31765F3436726961 && *(unsigned char *)(a1 + 8) == 56)
      {
        unsigned __int8 v2 = 85;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 48)
      {
        unsigned __int8 v2 = 87;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 49)
      {
        unsigned __int8 v2 = 88;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 50)
      {
        unsigned __int8 v2 = 89;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 51)
      {
        unsigned __int8 v2 = 90;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 52)
      {
        unsigned __int8 v2 = 91;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 53)
      {
        unsigned __int8 v2 = 92;
      }
      else if (*(void *)a1 == 0x32765F3436726961 && *(unsigned char *)(a1 + 8) == 54)
      {
        unsigned __int8 v2 = 93;
      }
      else
      {
        if (*(void *)a1 != 0x32765F3436726961 || *(unsigned char *)(a1 + 8) != 55) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 94;
      }
      break;
    case 10:
      if (*(void *)a1 == 0x31765F3233726961 && *(_WORD *)(a1 + 8) == 12593)
      {
        unsigned __int8 v2 = 75;
      }
      else
      {
        if (*(void *)a1 != 0x31765F3436726961 || *(_WORD *)(a1 + 8) != 12593) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 86;
      }
      break;
    case 12:
      if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 846751583)
      {
        unsigned __int8 v2 = 16;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882482527)
      {
        unsigned __int8 v2 = 17;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1731487583)
      {
        unsigned __int8 v2 = 18;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882548063)
      {
        unsigned __int8 v2 = 19;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882810207)
      {
        unsigned __int8 v2 = 20;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1731815263)
      {
        unsigned __int8 v2 = 21;
      }
      else if (*(void *)a1 == 0x706761696469766ELL && *(_DWORD *)(a1 + 8) == 1801936757)
      {
        unsigned __int8 v2 = 69;
      }
      else if (*(void *)a1 == 0x706761696469766ELL && *(_DWORD *)(a1 + 8) == 1835491189)
      {
        unsigned __int8 v2 = 70;
      }
      else if (*(void *)a1 == 0x706761696469766ELL && *(_DWORD *)(a1 + 8) == 1885822837)
      {
        unsigned __int8 v2 = 71;
      }
      else
      {
        if (*(void *)a1 != 0x706761696469766ELL || *(_DWORD *)(a1 + 8) != 1986486133) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 72;
      }
      break;
    case 13:
      if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703031675F757067)
      {
        unsigned __int8 v2 = 22;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703131675F757067)
      {
        unsigned __int8 v2 = 23;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x6D3131675F757067)
      {
        unsigned __int8 v2 = 24;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673131675F757067)
      {
        unsigned __int8 v2 = 25;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703231675F757067)
      {
        unsigned __int8 v2 = 27;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703331675F757067)
      {
        unsigned __int8 v2 = 28;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673331675F757067)
      {
        unsigned __int8 v2 = 29;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733331675F757067)
      {
        unsigned __int8 v2 = 30;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x633331675F757067)
      {
        unsigned __int8 v2 = 31;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x643331675F757067)
      {
        unsigned __int8 v2 = 32;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703431675F757067)
      {
        unsigned __int8 v2 = 33;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673431675F757067)
      {
        unsigned __int8 v2 = 34;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733431675F757067)
      {
        unsigned __int8 v2 = 35;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x643431675F757067)
      {
        unsigned __int8 v2 = 36;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703531675F757067)
      {
        unsigned __int8 v2 = 37;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673531675F757067)
      {
        unsigned __int8 v2 = 38;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733531675F757067)
      {
        unsigned __int8 v2 = 39;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703631675F757067)
      {
        unsigned __int8 v2 = 40;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x673631675F757067)
      {
        unsigned __int8 v2 = 41;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x733631675F757067)
      {
        unsigned __int8 v2 = 42;
      }
      else if (*(void *)a1 == 0x757067656C707061 && *(void *)(a1 + 5) == 0x703731675F757067)
      {
        unsigned __int8 v2 = 43;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3030367866675F75)
      {
        unsigned __int8 v2 = 44;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3130377866675F75)
      {
        unsigned __int8 v2 = 46;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3430377866675F75)
      {
        unsigned __int8 v2 = 47;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3330387866675F75)
      {
        unsigned __int8 v2 = 48;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3230387866675F75)
      {
        unsigned __int8 v2 = 49;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3030397866675F75)
      {
        unsigned __int8 v2 = 50;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 5) == 0x3430397866675F75)
      {
        unsigned __int8 v2 = 51;
      }
      else
      {
        if (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 5) != 0x3630397866675F75) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 52;
      }
      break;
    case 14:
      if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x303130317866675FLL)
      {
        unsigned __int8 v2 = 54;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x313130317866675FLL)
      {
        unsigned __int8 v2 = 55;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x323130317866675FLL)
      {
        unsigned __int8 v2 = 56;
      }
      else if (*(void *)a1 == 0x675F757067646D61 && *(void *)(a1 + 6) == 0x303330317866675FLL)
      {
        unsigned __int8 v2 = 57;
      }
      else
      {
        if (*(void *)a1 != 0x675F757067646D61 || *(void *)(a1 + 6) != 0x323330317866675FLL) {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 58;
      }
      break;
    case 17:
      if (*(void *)a1 != 0x675F757067646D61
        || *(void *)(a1 + 8) != 0x776E5F3030367866
        || *(unsigned char *)(a1 + 16) != 104)
      {
        goto LABEL_530;
      }
      unsigned __int8 v2 = 45;
      break;
    case 18:
      if (*(void *)a1 == 0x7570676C65746E69
        && *(void *)(a1 + 8) == 0x3274675F6C6B735FLL
        && *(_WORD *)(a1 + 16) == 13938)
      {
        unsigned __int8 v2 = 59;
      }
      else if (*(void *)a1 == 0x7570676C65746E69 {
             && *(void *)(a1 + 8) == 0x3274675F6C6B735FLL
      }
             && *(_WORD *)(a1 + 16) == 14194)
      {
        unsigned __int8 v2 = 60;
      }
      else if (*(void *)a1 == 0x7570676C65746E69 {
             && *(void *)(a1 + 8) == 0x3274675F6C626B5FLL
      }
             && *(_WORD *)(a1 + 16) == 12402)
      {
        unsigned __int8 v2 = 62;
      }
      else if (*(void *)a1 == 0x7570676C65746E69 {
             && *(void *)(a1 + 8) == 0x3274675F6C626B5FLL
      }
             && *(_WORD *)(a1 + 16) == 12914)
      {
        unsigned __int8 v2 = 63;
      }
      else if (*(void *)a1 == 0x7570676C65746E69 {
             && *(void *)(a1 + 8) == 0x3274675F6C626B5FLL
      }
             && *(_WORD *)(a1 + 16) == 13426)
      {
        unsigned __int8 v2 = 64;
      }
      else if (*(void *)a1 == 0x7570676C65746E69 {
             && *(void *)(a1 + 8) == 0x3374675F6C626B5FLL
      }
             && *(_WORD *)(a1 + 16) == 12658)
      {
        unsigned __int8 v2 = 65;
      }
      else
      {
        if (*(void *)a1 != 0x7570676C65746E69
          || *(void *)(a1 + 8) != 0x3374675F6C626B5FLL
          || *(_WORD *)(a1 + 16) != 13938)
        {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 66;
      }
      break;
    case 19:
      if (*(void *)a1 == 0x757067656C707061
        && *(void *)(a1 + 8) == 0x66385F673131675FLL
        && *(void *)(a1 + 11) == 0x70747366385F6731)
      {
        unsigned __int8 v2 = 26;
      }
      else if (*(void *)a1 == 0x675F757067646D61 {
             && *(void *)(a1 + 8) == 0x6E5F303130317866
      }
             && *(void *)(a1 + 11) == 0x6367736E5F303130)
      {
        unsigned __int8 v2 = 53;
      }
      else
      {
        if (*(void *)a1 != 0x7570676C65746E69
          || *(void *)(a1 + 8) != 0x3374675F6C6B735FLL
          || *(void *)(a1 + 11) != 0x3031723374675F6CLL)
        {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 61;
      }
      break;
    case 20:
      if (*(void *)a1 == 0x7570676C65746E69
        && *(void *)(a1 + 8) == 0x3678315F6C63695FLL
        && *(_DWORD *)(a1 + 16) == 930232440)
      {
        unsigned __int8 v2 = 67;
      }
      else
      {
        if (*(void *)a1 != 0x7570676C65746E69
          || *(void *)(a1 + 8) != 0x3878315F6C63695FLL
          || *(_DWORD *)(a1 + 16) != 930232440)
        {
          goto LABEL_530;
        }
        unsigned __int8 v2 = 68;
      }
      break;
    default:
LABEL_530:
      unsigned __int8 v2 = 120;
      break;
  }
  return v2;
}

const char *llvm::MachO::getArchitectureName(unsigned int a1)
{
  if (a1 > 0x78) {
    return "unknown";
  }
  else {
    return off_1E6859AD0[(char)a1];
  }
}

uint64_t llvm::MachO::getArchitectureFromImplementation(unsigned int a1)
{
  if (a1 > 0x3B) {
    return 120;
  }
  else {
    return byte_1CFB31AD8[a1];
  }
}

uint64_t llvm::MachO::getImplementationFromName(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x36383369:
          uint64_t v2 = 0x100000000;
          break;
        case 0x36383469:
          uint64_t v2 = 0x100000001;
          break;
        case 0x36383569:
          uint64_t v2 = 0x100000002;
          break;
        default:
          goto LABEL_5;
      }
      goto LABEL_221;
    case 5:
      uint64_t v3 = 0x100000005;
      BOOL v4 = (*(_DWORD *)a1 ^ 0x766D7261 | *(unsigned __int8 *)(a1 + 4) ^ 0x38) == 0;
      goto LABEL_218;
    case 6:
      if (*(_DWORD *)a1 == 758528120 && *(_WORD *)(a1 + 4) == 13366)
      {
        uint64_t v2 = 0x100000003;
      }
      else if (*(_DWORD *)a1 == 758282343 && *(_WORD *)(a1 + 4) == 12385)
      {
        uint64_t v2 = 0x100000008;
      }
      else if (*(_DWORD *)a1 == 758282343 && *(_WORD *)(a1 + 4) == 12386)
      {
        uint64_t v2 = 0x100000009;
      }
      else if (*(_DWORD *)a1 == 1601188967 && *(_WORD *)(a1 + 4) == 12642)
      {
        uint64_t v2 = 0x10000000ALL;
      }
      else if (*(_DWORD *)a1 == 761738343 && *(_WORD *)(a1 + 4) == 12385)
      {
        uint64_t v2 = 0x10000000BLL;
      }
      else if (*(_DWORD *)a1 == 761738343 && *(_WORD *)(a1 + 4) == 12641)
      {
        uint64_t v2 = 0x10000000CLL;
      }
      else if (*(_DWORD *)a1 == 762328423 && *(_WORD *)(a1 + 4) == 12387)
      {
        uint64_t v2 = 0x10000000DLL;
      }
      else if (*(_DWORD *)a1 == 1601190247 && *(_WORD *)(a1 + 4) == 12385)
      {
        uint64_t v2 = 0x10000000ELL;
      }
      else if (*(_DWORD *)a1 == 761739623 && *(_WORD *)(a1 + 4) == 12385)
      {
        uint64_t v2 = 0x10000000FLL;
      }
      else
      {
LABEL_5:
        uint64_t v2 = 0;
      }
LABEL_221:
      if ((v2 & 0x300000000) != 0) {
        return v2;
      }
      else {
        return 59;
      }
    case 7:
      if (*(_DWORD *)a1 == 2004050280 && *(_DWORD *)(a1 + 3) == 1819043191)
      {
        uint64_t v2 = 0x100000004;
      }
      else if (*(_DWORD *)a1 == 1882206567 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x100000010;
      }
      else if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        uint64_t v2 = 0x100000011;
      }
      else if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x100000012;
      }
      else if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811674989)
      {
        uint64_t v2 = 0x100000013;
      }
      else if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811740525)
      {
        uint64_t v2 = 0x100000014;
      }
      else if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        uint64_t v2 = 0x100000015;
      }
      else if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        uint64_t v2 = 0x100000016;
      }
      else if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        uint64_t v2 = 0x100000018;
      }
      else if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x100000019;
      }
      else if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        uint64_t v2 = 0x10000001ALL;
      }
      else if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x10000001BLL;
      }
      else if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        uint64_t v2 = 0x10000001CLL;
      }
      else if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        uint64_t v2 = 0x10000001DLL;
      }
      else if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        uint64_t v2 = 0x10000001ELL;
      }
      else if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        uint64_t v2 = 0x10000001FLL;
      }
      else if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811674979)
      {
        uint64_t v2 = 0x100000020;
      }
      else if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811740515)
      {
        uint64_t v2 = 0x100000021;
      }
      else if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811674980)
      {
        uint64_t v2 = 0x100000022;
      }
      else if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811740516)
      {
        uint64_t v2 = 0x100000023;
      }
      else if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        uint64_t v2 = 0x100000024;
      }
      else if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x100000025;
      }
      else if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        uint64_t v2 = 0x100000026;
      }
      else if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        uint64_t v2 = 0x100000027;
      }
      else if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        uint64_t v2 = 0x100000028;
      }
      else if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        uint64_t v2 = 0x100000029;
      }
      else if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811674980)
      {
        uint64_t v2 = 0x10000002ALL;
      }
      else if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811740516)
      {
        uint64_t v2 = 0x10000002BLL;
      }
      else if (*(_DWORD *)a1 == 1882534247 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x10000002CLL;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        uint64_t v2 = 0x10000002DLL;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        uint64_t v2 = 0x10000002ELL;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811806055)
      {
        uint64_t v2 = 0x10000002FLL;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        uint64_t v2 = 0x100000030;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        uint64_t v2 = 0x100000031;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 828517747)
      {
        uint64_t v2 = 0x100000032;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        uint64_t v2 = 0x100000033;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        uint64_t v2 = 0x100000034;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 828517744)
      {
        uint64_t v2 = 0x100000035;
      }
      else if (*(_DWORD *)a1 == 1731604839 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        uint64_t v2 = 0x100000036;
      }
      else if (*(_DWORD *)a1 == 1731604839 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        uint64_t v2 = 0x100000037;
      }
      else if (*(_DWORD *)a1 == 1932931431 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        uint64_t v2 = 0x100000038;
      }
      else if (*(_DWORD *)a1 == 1932931431 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        uint64_t v2 = 0x100000039;
      }
      else
      {
        uint64_t v2 = 0x10000003ALL;
        if (*(_DWORD *)a1 ^ 0x70373167 | *(_DWORD *)(a1 + 3) ^ 0x30612D70) {
          uint64_t v2 = 0;
        }
      }
      goto LABEL_221;
    case 8:
      uint64_t v3 = 0x100000007;
      BOOL v4 = *(void *)a1 == 0x34732D656C707061;
      goto LABEL_218;
    case 9:
      uint64_t v3 = 0x100000006;
      BOOL v4 = (*(void *)a1 ^ 0x31612D656C707061 | *(unsigned __int8 *)(a1 + 8) ^ 0x32) == 0;
LABEL_218:
      if (v4) {
        uint64_t v2 = v3;
      }
      else {
        uint64_t v2 = 0;
      }
      goto LABEL_221;
    default:
      goto LABEL_5;
  }
}

const char *llvm::MachO::getImplementationName(unsigned int a1)
{
  if (a1 > 0x3B) {
    return "unknown";
  }
  else {
    return off_1E6859E98[a1];
  }
}

BOOL llvm::MachO::isValidImplementationForArchitecture(int a1, unsigned int a2)
{
  if (llvm::MachO::getArchitectureFromImplementation(a2) == a1) {
    return 1;
  }
  BOOL result = 0;
  switch(a1)
  {
    case 0:
      unsigned int v5 = a2 - 1;
      return v5 < 2;
    case 1:
      BOOL v6 = a2 == 4;
      goto LABEL_28;
    case 12:
      BOOL v6 = a2 == 6;
      goto LABEL_28;
    case 16:
      BOOL v6 = a2 == 8;
      goto LABEL_28;
    case 18:
      BOOL v6 = a2 == 11;
      goto LABEL_28;
    case 23:
      BOOL v6 = a2 == 17;
      goto LABEL_28;
    case 24:
      BOOL v6 = a2 == 19;
      goto LABEL_28;
    case 25:
      BOOL v6 = a2 == 21;
      goto LABEL_28;
    case 27:
      BOOL v6 = a2 == 24;
      goto LABEL_28;
    case 28:
      BOOL v6 = a2 == 26;
      goto LABEL_28;
    case 29:
      BOOL v6 = a2 == 28;
      goto LABEL_28;
    case 30:
      BOOL v6 = a2 == 30;
      goto LABEL_28;
    case 31:
      BOOL v6 = a2 == 32;
      goto LABEL_28;
    case 32:
      BOOL v6 = a2 == 34;
      goto LABEL_28;
    case 33:
      BOOL v6 = a2 == 36;
      goto LABEL_28;
    case 34:
      BOOL v6 = a2 == 38;
      goto LABEL_28;
    case 35:
      BOOL v6 = a2 == 40;
      goto LABEL_28;
    case 36:
      BOOL v6 = a2 == 42;
      goto LABEL_28;
    case 38:
      unsigned int v5 = a2 - 45;
      return v5 < 2;
    case 39:
      BOOL v6 = (a2 & 0xFFFFFFFE) == 48;
      goto LABEL_28;
    case 40:
      unsigned int v5 = a2 - 51;
      return v5 < 2;
    case 41:
      BOOL v6 = a2 == 54;
      goto LABEL_28;
    case 42:
      BOOL v6 = a2 == 56;
LABEL_28:
      BOOL result = v6;
      break;
    default:
      return result;
  }
  return result;
}

void llvm::MachO::getImplementationsForArch(int a1@<W0>, char **a2@<X8>)
{
  BOOL isValidImplementationForArchitecture = llvm::MachO::isValidImplementationForArchitecture(a1, 0);
  unsigned int v5 = 0;
  BOOL v6 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (isValidImplementationForArchitecture)
  {
    unsigned int v5 = (char *)operator new(4uLL);
    *(_DWORD *)unsigned int v5 = 0;
    BOOL v6 = v5 + 4;
    a2[1] = v5 + 4;
    a2[2] = v5 + 4;
    *a2 = v5;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 1u))
  {
    uint64_t v7 = v6 - v5;
    uint64_t v8 = (v6 - v5) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      goto LABEL_1104;
    }
    if (v7 >> 1 > v9) {
      unint64_t v9 = v7 >> 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 62) {
        goto LABEL_1105;
      }
      uint64_t v11 = (char *)operator new(4 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int64_t v13 = &v11[4 * v8];
    std::error_code v14 = &v11[4 * v10];
    *(_DWORD *)int64_t v13 = 1;
    std::string v12 = v13 + 4;
    if (v6 != v5)
    {
      unint64_t v15 = (v6 - v5 - 4) & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v13 = &v11[v7 - v15 - 4];
      memcpy(v13, &v6[-v15 - 4], v15 + 4);
    }
    *a2 = v13;
    a2[1] = v12;
    a2[2] = v14;
    if (v5) {
      operator delete(v5);
    }
    a2[1] = v12;
  }
  else
  {
    std::string v12 = v6;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 2u))
  {
    unint64_t v16 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v16)
    {
      uint64_t v18 = *a2;
      uint64_t v19 = (v12 - *a2) >> 2;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v21 = v16 - (void)v18;
      if (v21 >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v23 = (char *)operator new(4 * v22);
      }
      else
      {
        uint64_t v23 = 0;
      }
      unsigned int v24 = &v23[4 * v19];
      *(_DWORD *)unsigned int v24 = 2;
      size_t v17 = v24 + 4;
      while (v12 != v18)
      {
        int v25 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v24 - 1) = v25;
        v24 -= 4;
      }
      *a2 = v24;
      a2[1] = v17;
      a2[2] = &v23[4 * v22];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 2;
      size_t v17 = v12 + 4;
    }
    a2[1] = v17;
    std::string v12 = v17;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 3u))
  {
    unint64_t v26 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v26)
    {
      char v28 = *a2;
      uint64_t v29 = (v12 - *a2) >> 2;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v31 = v26 - (void)v28;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        if (v32 >> 62) {
          goto LABEL_1105;
        }
        unsigned int v33 = (char *)operator new(4 * v32);
      }
      else
      {
        unsigned int v33 = 0;
      }
      char v34 = &v33[4 * v29];
      *(_DWORD *)char v34 = 3;
      int v27 = v34 + 4;
      while (v12 != v28)
      {
        int v35 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v34 - 1) = v35;
        v34 -= 4;
      }
      *a2 = v34;
      a2[1] = v27;
      a2[2] = &v33[4 * v32];
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 3;
      int v27 = v12 + 4;
    }
    a2[1] = v27;
    std::string v12 = v27;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 4u))
  {
    unint64_t v36 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v36)
    {
      int v38 = *a2;
      uint64_t v39 = (v12 - *a2) >> 2;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v41 = v36 - (void)v38;
      if (v41 >> 1 > v40) {
        unint64_t v40 = v41 >> 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        if (v42 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v43 = (char *)operator new(4 * v42);
      }
      else
      {
        uint64_t v43 = 0;
      }
      unint64_t v44 = &v43[4 * v39];
      *(_DWORD *)unint64_t v44 = 4;
      uint64_t v37 = v44 + 4;
      while (v12 != v38)
      {
        int v45 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v44 - 1) = v45;
        v44 -= 4;
      }
      *a2 = v44;
      a2[1] = v37;
      a2[2] = &v43[4 * v42];
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 4;
      uint64_t v37 = v12 + 4;
    }
    a2[1] = v37;
    std::string v12 = v37;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 5u))
  {
    unint64_t v46 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v46)
    {
      unsigned int v48 = *a2;
      uint64_t v49 = (v12 - *a2) >> 2;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v51 = v46 - (void)v48;
      if (v51 >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v53 = (char *)operator new(4 * v52);
      }
      else
      {
        uint64_t v53 = 0;
      }
      int v54 = &v53[4 * v49];
      *(_DWORD *)int v54 = 5;
      int v47 = v54 + 4;
      while (v12 != v48)
      {
        int v55 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v54 - 1) = v55;
        v54 -= 4;
      }
      *a2 = v54;
      a2[1] = v47;
      a2[2] = &v53[4 * v52];
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 5;
      int v47 = v12 + 4;
    }
    a2[1] = v47;
    std::string v12 = v47;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 6u))
  {
    unint64_t v56 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v56)
    {
      unsigned int v58 = *a2;
      uint64_t v59 = (v12 - *a2) >> 2;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v61 = v56 - (void)v58;
      if (v61 >> 1 > v60) {
        unint64_t v60 = v61 >> 1;
      }
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v62)
      {
        if (v62 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v63 = (char *)operator new(4 * v62);
      }
      else
      {
        uint64_t v63 = 0;
      }
      unsigned int v64 = &v63[4 * v59];
      *(_DWORD *)unsigned int v64 = 6;
      unint64_t v57 = v64 + 4;
      while (v12 != v58)
      {
        int v65 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v64 - 1) = v65;
        v64 -= 4;
      }
      *a2 = v64;
      a2[1] = v57;
      a2[2] = &v63[4 * v62];
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 6;
      unint64_t v57 = v12 + 4;
    }
    a2[1] = v57;
    std::string v12 = v57;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 7u))
  {
    unint64_t v66 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v66)
    {
      uint64_t v68 = *a2;
      uint64_t v69 = (v12 - *a2) >> 2;
      unint64_t v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v71 = v66 - (void)v68;
      if (v71 >> 1 > v70) {
        unint64_t v70 = v71 >> 1;
      }
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v72 = v70;
      }
      if (v72)
      {
        if (v72 >> 62) {
          goto LABEL_1105;
        }
        unsigned int v73 = (char *)operator new(4 * v72);
      }
      else
      {
        unsigned int v73 = 0;
      }
      uint64_t v74 = &v73[4 * v69];
      *(_DWORD *)uint64_t v74 = 7;
      int v67 = v74 + 4;
      while (v12 != v68)
      {
        int v75 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v74 - 1) = v75;
        v74 -= 4;
      }
      *a2 = v74;
      a2[1] = v67;
      a2[2] = &v73[4 * v72];
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 7;
      int v67 = v12 + 4;
    }
    a2[1] = v67;
    std::string v12 = v67;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 8u))
  {
    unint64_t v76 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v76)
    {
      BOOL v78 = *a2;
      uint64_t v79 = (v12 - *a2) >> 2;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v81 = v76 - (void)v78;
      if (v81 >> 1 > v80) {
        unint64_t v80 = v81 >> 1;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82)
      {
        if (v82 >> 62) {
          goto LABEL_1105;
        }
        BOOL v83 = (char *)operator new(4 * v82);
      }
      else
      {
        BOOL v83 = 0;
      }
      BOOL v84 = &v83[4 * v79];
      *(_DWORD *)BOOL v84 = 8;
      int v77 = v84 + 4;
      while (v12 != v78)
      {
        int v85 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v84 - 1) = v85;
        v84 -= 4;
      }
      *a2 = v84;
      a2[1] = v77;
      a2[2] = &v83[4 * v82];
      if (v78) {
        operator delete(v78);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 8;
      int v77 = v12 + 4;
    }
    a2[1] = v77;
    std::string v12 = v77;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 9u))
  {
    unint64_t v86 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v86)
    {
      uint64_t v88 = *a2;
      uint64_t v89 = (v12 - *a2) >> 2;
      unint64_t v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v91 = v86 - (void)v88;
      if (v91 >> 1 > v90) {
        unint64_t v90 = v91 >> 1;
      }
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v90;
      }
      if (v92)
      {
        if (v92 >> 62) {
          goto LABEL_1105;
        }
        __int16 v93 = (char *)operator new(4 * v92);
      }
      else
      {
        __int16 v93 = 0;
      }
      BOOL v94 = &v93[4 * v89];
      *(_DWORD *)BOOL v94 = 9;
      BOOL v87 = v94 + 4;
      while (v12 != v88)
      {
        int v95 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v94 - 1) = v95;
        v94 -= 4;
      }
      *a2 = v94;
      a2[1] = v87;
      a2[2] = &v93[4 * v92];
      if (v88) {
        operator delete(v88);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 9;
      BOOL v87 = v12 + 4;
    }
    a2[1] = v87;
    std::string v12 = v87;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xAu))
  {
    unint64_t v96 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v96)
    {
      int v98 = *a2;
      uint64_t v99 = (v12 - *a2) >> 2;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v101 = v96 - (void)v98;
      if (v101 >> 1 > v100) {
        unint64_t v100 = v101 >> 1;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        if (v102 >> 62) {
          goto LABEL_1105;
        }
        int v103 = (char *)operator new(4 * v102);
      }
      else
      {
        int v103 = 0;
      }
      unsigned int v104 = &v103[4 * v99];
      *(_DWORD *)unsigned int v104 = 10;
      uint64_t v97 = v104 + 4;
      while (v12 != v98)
      {
        int v105 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v104 - 1) = v105;
        v104 -= 4;
      }
      *a2 = v104;
      a2[1] = v97;
      a2[2] = &v103[4 * v102];
      if (v98) {
        operator delete(v98);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 10;
      uint64_t v97 = v12 + 4;
    }
    a2[1] = v97;
    std::string v12 = v97;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xBu))
  {
    unint64_t v106 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v106)
    {
      BOOL v108 = *a2;
      uint64_t v109 = (v12 - *a2) >> 2;
      unint64_t v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v111 = v106 - (void)v108;
      if (v111 >> 1 > v110) {
        unint64_t v110 = v111 >> 1;
      }
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v112 = v110;
      }
      if (v112)
      {
        if (v112 >> 62) {
          goto LABEL_1105;
        }
        int v113 = (char *)operator new(4 * v112);
      }
      else
      {
        int v113 = 0;
      }
      unint64_t v114 = &v113[4 * v109];
      *(_DWORD *)unint64_t v114 = 11;
      BOOL v107 = v114 + 4;
      while (v12 != v108)
      {
        int v115 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v114 - 1) = v115;
        v114 -= 4;
      }
      *a2 = v114;
      a2[1] = v107;
      a2[2] = &v113[4 * v112];
      if (v108) {
        operator delete(v108);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 11;
      BOOL v107 = v12 + 4;
    }
    a2[1] = v107;
    std::string v12 = v107;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xCu))
  {
    unint64_t v116 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v116)
    {
      unint64_t v118 = *a2;
      uint64_t v119 = (v12 - *a2) >> 2;
      unint64_t v120 = v119 + 1;
      if ((unint64_t)(v119 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v121 = v116 - (void)v118;
      if (v121 >> 1 > v120) {
        unint64_t v120 = v121 >> 1;
      }
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v122 = v120;
      }
      if (v122)
      {
        if (v122 >> 62) {
          goto LABEL_1105;
        }
        unint64_t v123 = (char *)operator new(4 * v122);
      }
      else
      {
        unint64_t v123 = 0;
      }
      int v124 = &v123[4 * v119];
      *(_DWORD *)int v124 = 12;
      int v117 = v124 + 4;
      while (v12 != v118)
      {
        int v125 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v124 - 1) = v125;
        v124 -= 4;
      }
      *a2 = v124;
      a2[1] = v117;
      a2[2] = &v123[4 * v122];
      if (v118) {
        operator delete(v118);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 12;
      int v117 = v12 + 4;
    }
    a2[1] = v117;
    std::string v12 = v117;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xDu))
  {
    unint64_t v126 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v126)
    {
      uint64_t v128 = *a2;
      uint64_t v129 = (v12 - *a2) >> 2;
      unint64_t v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v131 = v126 - (void)v128;
      if (v131 >> 1 > v130) {
        unint64_t v130 = v131 >> 1;
      }
      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v132 = v130;
      }
      if (v132)
      {
        if (v132 >> 62) {
          goto LABEL_1105;
        }
        int64_t v133 = (char *)operator new(4 * v132);
      }
      else
      {
        int64_t v133 = 0;
      }
      int64_t v134 = &v133[4 * v129];
      *(_DWORD *)int64_t v134 = 13;
      uint64_t v127 = v134 + 4;
      while (v12 != v128)
      {
        int v135 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v134 - 1) = v135;
        v134 -= 4;
      }
      *a2 = v134;
      a2[1] = v127;
      a2[2] = &v133[4 * v132];
      if (v128) {
        operator delete(v128);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 13;
      uint64_t v127 = v12 + 4;
    }
    a2[1] = v127;
    std::string v12 = v127;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xEu))
  {
    unint64_t v136 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v136)
    {
      int v138 = *a2;
      uint64_t v139 = (v12 - *a2) >> 2;
      unint64_t v140 = v139 + 1;
      if ((unint64_t)(v139 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v141 = v136 - (void)v138;
      if (v141 >> 1 > v140) {
        unint64_t v140 = v141 >> 1;
      }
      if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v142 = v140;
      }
      if (v142)
      {
        if (v142 >> 62) {
          goto LABEL_1105;
        }
        v143 = (char *)operator new(4 * v142);
      }
      else
      {
        v143 = 0;
      }
      size_t v144 = &v143[4 * v139];
      *(_DWORD *)size_t v144 = 14;
      char v137 = v144 + 4;
      while (v12 != v138)
      {
        int v145 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v144 - 1) = v145;
        v144 -= 4;
      }
      *a2 = v144;
      a2[1] = v137;
      a2[2] = &v143[4 * v142];
      if (v138) {
        operator delete(v138);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 14;
      char v137 = v12 + 4;
    }
    a2[1] = v137;
    std::string v12 = v137;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xFu))
  {
    unint64_t v146 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v146)
    {
      char v148 = *a2;
      uint64_t v149 = (v12 - *a2) >> 2;
      unint64_t v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v151 = v146 - (void)v148;
      if (v151 >> 1 > v150) {
        unint64_t v150 = v151 >> 1;
      }
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v152 = v150;
      }
      if (v152)
      {
        if (v152 >> 62) {
          goto LABEL_1105;
        }
        size_t v153 = (char *)operator new(4 * v152);
      }
      else
      {
        size_t v153 = 0;
      }
      v154 = &v153[4 * v149];
      *(_DWORD *)v154 = 15;
      uint64_t v147 = v154 + 4;
      while (v12 != v148)
      {
        int v155 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v154 - 1) = v155;
        v154 -= 4;
      }
      *a2 = v154;
      a2[1] = v147;
      a2[2] = &v153[4 * v152];
      if (v148) {
        operator delete(v148);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 15;
      uint64_t v147 = v12 + 4;
    }
    a2[1] = v147;
    std::string v12 = v147;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x10u))
  {
    unint64_t v156 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v156)
    {
      long long v158 = *a2;
      uint64_t v159 = (v12 - *a2) >> 2;
      unint64_t v160 = v159 + 1;
      if ((unint64_t)(v159 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v161 = v156 - (void)v158;
      if (v161 >> 1 > v160) {
        unint64_t v160 = v161 >> 1;
      }
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v162 = v160;
      }
      if (v162)
      {
        if (v162 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v163 = (char *)operator new(4 * v162);
      }
      else
      {
        uint64_t v163 = 0;
      }
      uint64_t v164 = &v163[4 * v159];
      *(_DWORD *)uint64_t v164 = 16;
      BOOL v157 = v164 + 4;
      while (v12 != v158)
      {
        int v165 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v164 - 1) = v165;
        v164 -= 4;
      }
      *a2 = v164;
      a2[1] = v157;
      a2[2] = &v163[4 * v162];
      if (v158) {
        operator delete(v158);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 16;
      BOOL v157 = v12 + 4;
    }
    a2[1] = v157;
    std::string v12 = v157;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x11u))
  {
    unint64_t v166 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v166)
    {
      size_t v168 = *a2;
      uint64_t v169 = (v12 - *a2) >> 2;
      unint64_t v170 = v169 + 1;
      if ((unint64_t)(v169 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v171 = v166 - (void)v168;
      if (v171 >> 1 > v170) {
        unint64_t v170 = v171 >> 1;
      }
      if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v172 = v170;
      }
      if (v172)
      {
        if (v172 >> 62) {
          goto LABEL_1105;
        }
        int v173 = (char *)operator new(4 * v172);
      }
      else
      {
        int v173 = 0;
      }
      BOOL v174 = &v173[4 * v169];
      *(_DWORD *)BOOL v174 = 17;
      BOOL v167 = v174 + 4;
      while (v12 != v168)
      {
        int v175 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v174 - 1) = v175;
        v174 -= 4;
      }
      *a2 = v174;
      a2[1] = v167;
      a2[2] = &v173[4 * v172];
      if (v168) {
        operator delete(v168);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 17;
      BOOL v167 = v12 + 4;
    }
    a2[1] = v167;
    std::string v12 = v167;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x12u))
  {
    unint64_t v176 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v176)
    {
      int v178 = *a2;
      uint64_t v179 = (v12 - *a2) >> 2;
      unint64_t v180 = v179 + 1;
      if ((unint64_t)(v179 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v181 = v176 - (void)v178;
      if (v181 >> 1 > v180) {
        unint64_t v180 = v181 >> 1;
      }
      if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v182 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v182 = v180;
      }
      if (v182)
      {
        if (v182 >> 62) {
          goto LABEL_1105;
        }
        int64_t v183 = (char *)operator new(4 * v182);
      }
      else
      {
        int64_t v183 = 0;
      }
      uint64_t v184 = &v183[4 * v179];
      *(_DWORD *)uint64_t v184 = 18;
      size_t v177 = v184 + 4;
      while (v12 != v178)
      {
        int v185 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v184 - 1) = v185;
        v184 -= 4;
      }
      *a2 = v184;
      a2[1] = v177;
      a2[2] = &v183[4 * v182];
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 18;
      size_t v177 = v12 + 4;
    }
    a2[1] = v177;
    std::string v12 = v177;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x13u))
  {
    unint64_t v186 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v186)
    {
      uint64_t v188 = *a2;
      uint64_t v189 = (v12 - *a2) >> 2;
      unint64_t v190 = v189 + 1;
      if ((unint64_t)(v189 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v191 = v186 - (void)v188;
      if (v191 >> 1 > v190) {
        unint64_t v190 = v191 >> 1;
      }
      if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v192 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v192 = v190;
      }
      if (v192)
      {
        if (v192 >> 62) {
          goto LABEL_1105;
        }
        size_t v193 = (char *)operator new(4 * v192);
      }
      else
      {
        size_t v193 = 0;
      }
      int v194 = &v193[4 * v189];
      *(_DWORD *)int v194 = 19;
      uint64_t v187 = v194 + 4;
      while (v12 != v188)
      {
        int v195 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v194 - 1) = v195;
        v194 -= 4;
      }
      *a2 = v194;
      a2[1] = v187;
      a2[2] = &v193[4 * v192];
      if (v188) {
        operator delete(v188);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 19;
      uint64_t v187 = v12 + 4;
    }
    a2[1] = v187;
    std::string v12 = v187;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x14u))
  {
    unint64_t v196 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v196)
    {
      int v198 = *a2;
      uint64_t v199 = (v12 - *a2) >> 2;
      unint64_t v200 = v199 + 1;
      if ((unint64_t)(v199 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v201 = v196 - (void)v198;
      if (v201 >> 1 > v200) {
        unint64_t v200 = v201 >> 1;
      }
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v202 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v202 = v200;
      }
      if (v202)
      {
        if (v202 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v203 = (char *)operator new(4 * v202);
      }
      else
      {
        uint64_t v203 = 0;
      }
      char v204 = &v203[4 * v199];
      *(_DWORD *)char v204 = 20;
      size_t v197 = v204 + 4;
      while (v12 != v198)
      {
        int v205 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v204 - 1) = v205;
        v204 -= 4;
      }
      *a2 = v204;
      a2[1] = v197;
      a2[2] = &v203[4 * v202];
      if (v198) {
        operator delete(v198);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 20;
      size_t v197 = v12 + 4;
    }
    a2[1] = v197;
    std::string v12 = v197;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x15u))
  {
    unint64_t v206 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v206)
    {
      size_t v208 = *a2;
      uint64_t v209 = (v12 - *a2) >> 2;
      unint64_t v210 = v209 + 1;
      if ((unint64_t)(v209 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v211 = v206 - (void)v208;
      if (v211 >> 1 > v210) {
        unint64_t v210 = v211 >> 1;
      }
      if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v212 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v212 = v210;
      }
      if (v212)
      {
        if (v212 >> 62) {
          goto LABEL_1105;
        }
        BOOL v213 = (char *)operator new(4 * v212);
      }
      else
      {
        BOOL v213 = 0;
      }
      v214 = &v213[4 * v209];
      *(_DWORD *)v214 = 21;
      size_t v207 = v214 + 4;
      while (v12 != v208)
      {
        int v215 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v214 - 1) = v215;
        v214 -= 4;
      }
      *a2 = v214;
      a2[1] = v207;
      a2[2] = &v213[4 * v212];
      if (v208) {
        operator delete(v208);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 21;
      size_t v207 = v12 + 4;
    }
    a2[1] = v207;
    std::string v12 = v207;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x16u))
  {
    unint64_t v216 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v216)
    {
      v218 = *a2;
      uint64_t v219 = (v12 - *a2) >> 2;
      unint64_t v220 = v219 + 1;
      if ((unint64_t)(v219 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v221 = v216 - (void)v218;
      if (v221 >> 1 > v220) {
        unint64_t v220 = v221 >> 1;
      }
      if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v222 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v222 = v220;
      }
      if (v222)
      {
        if (v222 >> 62) {
          goto LABEL_1105;
        }
        int v223 = (char *)operator new(4 * v222);
      }
      else
      {
        int v223 = 0;
      }
      BOOL v224 = &v223[4 * v219];
      *(_DWORD *)BOOL v224 = 22;
      v217 = v224 + 4;
      while (v12 != v218)
      {
        int v225 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v224 - 1) = v225;
        v224 -= 4;
      }
      *a2 = v224;
      a2[1] = v217;
      a2[2] = &v223[4 * v222];
      if (v218) {
        operator delete(v218);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 22;
      v217 = v12 + 4;
    }
    a2[1] = v217;
    std::string v12 = v217;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x17u))
  {
    unint64_t v226 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v226)
    {
      size_t v228 = *a2;
      uint64_t v229 = (v12 - *a2) >> 2;
      unint64_t v230 = v229 + 1;
      if ((unint64_t)(v229 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v231 = v226 - (void)v228;
      if (v231 >> 1 > v230) {
        unint64_t v230 = v231 >> 1;
      }
      if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v232 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v232 = v230;
      }
      if (v232)
      {
        if (v232 >> 62) {
          goto LABEL_1105;
        }
        int v233 = (char *)operator new(4 * v232);
      }
      else
      {
        int v233 = 0;
      }
      BOOL v234 = &v233[4 * v229];
      *(_DWORD *)BOOL v234 = 23;
      v227 = v234 + 4;
      while (v12 != v228)
      {
        int v235 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v234 - 1) = v235;
        v234 -= 4;
      }
      *a2 = v234;
      a2[1] = v227;
      a2[2] = &v233[4 * v232];
      if (v228) {
        operator delete(v228);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 23;
      v227 = v12 + 4;
    }
    a2[1] = v227;
    std::string v12 = v227;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x18u))
  {
    unint64_t v236 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v236)
    {
      BOOL v238 = *a2;
      uint64_t v239 = (v12 - *a2) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v241 = v236 - (void)v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        if (v242 >> 62) {
          goto LABEL_1105;
        }
        size_t v243 = (char *)operator new(4 * v242);
      }
      else
      {
        size_t v243 = 0;
      }
      size_t v244 = &v243[4 * v239];
      *(_DWORD *)size_t v244 = 24;
      v237 = v244 + 4;
      while (v12 != v238)
      {
        int v245 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *a2 = v244;
      a2[1] = v237;
      a2[2] = &v243[4 * v242];
      if (v238) {
        operator delete(v238);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 24;
      v237 = v12 + 4;
    }
    a2[1] = v237;
    std::string v12 = v237;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x19u))
  {
    unint64_t v246 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v246)
    {
      BOOL v248 = *a2;
      uint64_t v249 = (v12 - *a2) >> 2;
      unint64_t v250 = v249 + 1;
      if ((unint64_t)(v249 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v251 = v246 - (void)v248;
      if (v251 >> 1 > v250) {
        unint64_t v250 = v251 >> 1;
      }
      if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v252 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v252 = v250;
      }
      if (v252)
      {
        if (v252 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v253 = (char *)operator new(4 * v252);
      }
      else
      {
        uint64_t v253 = 0;
      }
      uint64_t v254 = &v253[4 * v249];
      *(_DWORD *)uint64_t v254 = 25;
      int v247 = v254 + 4;
      while (v12 != v248)
      {
        int v255 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v254 - 1) = v255;
        v254 -= 4;
      }
      *a2 = v254;
      a2[1] = v247;
      a2[2] = &v253[4 * v252];
      if (v248) {
        operator delete(v248);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 25;
      int v247 = v12 + 4;
    }
    a2[1] = v247;
    std::string v12 = v247;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Au))
  {
    unint64_t v256 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v256)
    {
      char v258 = *a2;
      uint64_t v259 = (v12 - *a2) >> 2;
      unint64_t v260 = v259 + 1;
      if ((unint64_t)(v259 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v261 = v256 - (void)v258;
      if (v261 >> 1 > v260) {
        unint64_t v260 = v261 >> 1;
      }
      if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v262 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v262 = v260;
      }
      if (v262)
      {
        if (v262 >> 62) {
          goto LABEL_1105;
        }
        size_t v263 = (char *)operator new(4 * v262);
      }
      else
      {
        size_t v263 = 0;
      }
      int v264 = &v263[4 * v259];
      *(_DWORD *)int v264 = 26;
      v257 = v264 + 4;
      while (v12 != v258)
      {
        int v265 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v264 - 1) = v265;
        v264 -= 4;
      }
      *a2 = v264;
      a2[1] = v257;
      a2[2] = &v263[4 * v262];
      if (v258) {
        operator delete(v258);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 26;
      v257 = v12 + 4;
    }
    a2[1] = v257;
    std::string v12 = v257;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Bu))
  {
    unint64_t v266 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v266)
    {
      v268 = *a2;
      uint64_t v269 = (v12 - *a2) >> 2;
      unint64_t v270 = v269 + 1;
      if ((unint64_t)(v269 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v271 = v266 - (void)v268;
      if (v271 >> 1 > v270) {
        unint64_t v270 = v271 >> 1;
      }
      if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v272 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v272 = v270;
      }
      if (v272)
      {
        if (v272 >> 62) {
          goto LABEL_1105;
        }
        size_t v273 = (char *)operator new(4 * v272);
      }
      else
      {
        size_t v273 = 0;
      }
      size_t v274 = &v273[4 * v269];
      *(_DWORD *)size_t v274 = 27;
      uint64_t v267 = v274 + 4;
      while (v12 != v268)
      {
        int v275 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v274 - 1) = v275;
        v274 -= 4;
      }
      *a2 = v274;
      a2[1] = v267;
      a2[2] = &v273[4 * v272];
      if (v268) {
        operator delete(v268);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 27;
      uint64_t v267 = v12 + 4;
    }
    a2[1] = v267;
    std::string v12 = v267;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Cu))
  {
    unint64_t v276 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v276)
    {
      BOOL v278 = *a2;
      uint64_t v279 = (v12 - *a2) >> 2;
      unint64_t v280 = v279 + 1;
      if ((unint64_t)(v279 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v281 = v276 - (void)v278;
      if (v281 >> 1 > v280) {
        unint64_t v280 = v281 >> 1;
      }
      if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v282 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v282 = v280;
      }
      if (v282)
      {
        if (v282 >> 62) {
          goto LABEL_1105;
        }
        uint64_t v283 = (char *)operator new(4 * v282);
      }
      else
      {
        uint64_t v283 = 0;
      }
      uint64_t v284 = &v283[4 * v279];
      *(_DWORD *)uint64_t v284 = 28;
      int v277 = v284 + 4;
      while (v12 != v278)
      {
        int v285 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v284 - 1) = v285;
        v284 -= 4;
      }
      *a2 = v284;
      a2[1] = v277;
      a2[2] = &v283[4 * v282];
      if (v278) {
        operator delete(v278);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 28;
      int v277 = v12 + 4;
    }
    a2[1] = v277;
    std::string v12 = v277;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Du))
  {
    unint64_t v286 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v286)
    {
      char v288 = *a2;
      uint64_t v289 = (v12 - *a2) >> 2;
      unint64_t v290 = v289 + 1;
      if ((unint64_t)(v289 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v291 = v286 - (void)v288;
      if (v291 >> 1 > v290) {
        unint64_t v290 = v291 >> 1;
      }
      if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v292 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v292 = v290;
      }
      if (v292)
      {
        if (v292 >> 62) {
          goto LABEL_1105;
        }
        size_t v293 = (char *)operator new(4 * v292);
      }
      else
      {
        size_t v293 = 0;
      }
      int v294 = &v293[4 * v289];
      *(_DWORD *)int v294 = 29;
      v287 = v294 + 4;
      while (v12 != v288)
      {
        int v295 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v294 - 1) = v295;
        v294 -= 4;
      }
      *a2 = v294;
      a2[1] = v287;
      a2[2] = &v293[4 * v292];
      if (v288) {
        operator delete(v288);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 29;
      v287 = v12 + 4;
    }
    a2[1] = v287;
    std::string v12 = v287;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Eu))
  {
    unint64_t v296 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v296)
    {
      int v298 = *a2;
      uint64_t v299 = (v12 - *a2) >> 2;
      unint64_t v300 = v299 + 1;
      if ((unint64_t)(v299 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v301 = v296 - (void)v298;
      if (v301 >> 1 > v300) {
        unint64_t v300 = v301 >> 1;
      }
      if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v302 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v302 = v300;
      }
      if (v302)
      {
        if (v302 >> 62) {
          goto LABEL_1105;
        }
        v303 = (char *)operator new(4 * v302);
      }
      else
      {
        v303 = 0;
      }
      v304 = &v303[4 * v299];
      *(_DWORD *)v304 = 30;
      long long v297 = v304 + 4;
      while (v12 != v298)
      {
        int v305 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v304 - 1) = v305;
        v304 -= 4;
      }
      *a2 = v304;
      a2[1] = v297;
      a2[2] = &v303[4 * v302];
      if (v298) {
        operator delete(v298);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 30;
      long long v297 = v12 + 4;
    }
    a2[1] = v297;
    std::string v12 = v297;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Fu))
  {
    unint64_t v306 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v306)
    {
      long long v308 = *a2;
      uint64_t v309 = (v12 - *a2) >> 2;
      unint64_t v310 = v309 + 1;
      if ((unint64_t)(v309 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v311 = v306 - (void)v308;
      if (v311 >> 1 > v310) {
        unint64_t v310 = v311 >> 1;
      }
      if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v312 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v312 = v310;
      }
      if (v312)
      {
        if (v312 >> 62) {
          goto LABEL_1105;
        }
        v313 = (char *)operator new(4 * v312);
      }
      else
      {
        v313 = 0;
      }
      v314 = &v313[4 * v309];
      *(_DWORD *)v314 = 31;
      uint64_t v307 = v314 + 4;
      while (v12 != v308)
      {
        int v315 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v314 - 1) = v315;
        v314 -= 4;
      }
      *a2 = v314;
      a2[1] = v307;
      a2[2] = &v313[4 * v312];
      if (v308) {
        operator delete(v308);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 31;
      uint64_t v307 = v12 + 4;
    }
    a2[1] = v307;
    std::string v12 = v307;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x20u))
  {
    unint64_t v316 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v316)
    {
      v318 = *a2;
      uint64_t v319 = (v12 - *a2) >> 2;
      unint64_t v320 = v319 + 1;
      if ((unint64_t)(v319 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v321 = v316 - (void)v318;
      if (v321 >> 1 > v320) {
        unint64_t v320 = v321 >> 1;
      }
      if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v322 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v322 = v320;
      }
      if (v322)
      {
        if (v322 >> 62) {
          goto LABEL_1105;
        }
        v323 = (char *)operator new(4 * v322);
      }
      else
      {
        v323 = 0;
      }
      v324 = &v323[4 * v319];
      *(_DWORD *)v324 = 32;
      v317 = v324 + 4;
      while (v12 != v318)
      {
        int v325 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v324 - 1) = v325;
        v324 -= 4;
      }
      *a2 = v324;
      a2[1] = v317;
      a2[2] = &v323[4 * v322];
      if (v318) {
        operator delete(v318);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 32;
      v317 = v12 + 4;
    }
    a2[1] = v317;
    std::string v12 = v317;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x21u))
  {
    unint64_t v326 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v326)
    {
      v328 = *a2;
      uint64_t v329 = (v12 - *a2) >> 2;
      unint64_t v330 = v329 + 1;
      if ((unint64_t)(v329 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v331 = v326 - (void)v328;
      if (v331 >> 1 > v330) {
        unint64_t v330 = v331 >> 1;
      }
      if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v332 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v332 = v330;
      }
      if (v332)
      {
        if (v332 >> 62) {
          goto LABEL_1105;
        }
        v333 = (char *)operator new(4 * v332);
      }
      else
      {
        v333 = 0;
      }
      v334 = &v333[4 * v329];
      *(_DWORD *)v334 = 33;
      v327 = v334 + 4;
      while (v12 != v328)
      {
        int v335 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v334 - 1) = v335;
        v334 -= 4;
      }
      *a2 = v334;
      a2[1] = v327;
      a2[2] = &v333[4 * v332];
      if (v328) {
        operator delete(v328);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 33;
      v327 = v12 + 4;
    }
    a2[1] = v327;
    std::string v12 = v327;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x22u))
  {
    unint64_t v336 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v336)
    {
      v338 = *a2;
      uint64_t v339 = (v12 - *a2) >> 2;
      unint64_t v340 = v339 + 1;
      if ((unint64_t)(v339 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v341 = v336 - (void)v338;
      if (v341 >> 1 > v340) {
        unint64_t v340 = v341 >> 1;
      }
      if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v342 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v342 = v340;
      }
      if (v342)
      {
        if (v342 >> 62) {
          goto LABEL_1105;
        }
        v343 = (char *)operator new(4 * v342);
      }
      else
      {
        v343 = 0;
      }
      v344 = &v343[4 * v339];
      *(_DWORD *)v344 = 34;
      v337 = v344 + 4;
      while (v12 != v338)
      {
        int v345 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v344 - 1) = v345;
        v344 -= 4;
      }
      *a2 = v344;
      a2[1] = v337;
      a2[2] = &v343[4 * v342];
      if (v338) {
        operator delete(v338);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 34;
      v337 = v12 + 4;
    }
    a2[1] = v337;
    std::string v12 = v337;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x23u))
  {
    unint64_t v346 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v346)
    {
      v348 = *a2;
      uint64_t v349 = (v12 - *a2) >> 2;
      unint64_t v350 = v349 + 1;
      if ((unint64_t)(v349 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v351 = v346 - (void)v348;
      if (v351 >> 1 > v350) {
        unint64_t v350 = v351 >> 1;
      }
      if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v352 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v352 = v350;
      }
      if (v352)
      {
        if (v352 >> 62) {
          goto LABEL_1105;
        }
        v353 = (char *)operator new(4 * v352);
      }
      else
      {
        v353 = 0;
      }
      v354 = &v353[4 * v349];
      *(_DWORD *)v354 = 35;
      v347 = v354 + 4;
      while (v12 != v348)
      {
        int v355 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v354 - 1) = v355;
        v354 -= 4;
      }
      *a2 = v354;
      a2[1] = v347;
      a2[2] = &v353[4 * v352];
      if (v348) {
        operator delete(v348);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 35;
      v347 = v12 + 4;
    }
    a2[1] = v347;
    std::string v12 = v347;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x24u))
  {
    unint64_t v356 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v356)
    {
      v358 = *a2;
      uint64_t v359 = (v12 - *a2) >> 2;
      unint64_t v360 = v359 + 1;
      if ((unint64_t)(v359 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v361 = v356 - (void)v358;
      if (v361 >> 1 > v360) {
        unint64_t v360 = v361 >> 1;
      }
      if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v362 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v362 = v360;
      }
      if (v362)
      {
        if (v362 >> 62) {
          goto LABEL_1105;
        }
        v363 = (char *)operator new(4 * v362);
      }
      else
      {
        v363 = 0;
      }
      v364 = &v363[4 * v359];
      *(_DWORD *)v364 = 36;
      v357 = v364 + 4;
      while (v12 != v358)
      {
        int v365 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v364 - 1) = v365;
        v364 -= 4;
      }
      *a2 = v364;
      a2[1] = v357;
      a2[2] = &v363[4 * v362];
      if (v358) {
        operator delete(v358);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 36;
      v357 = v12 + 4;
    }
    a2[1] = v357;
    std::string v12 = v357;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x25u))
  {
    unint64_t v366 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v366)
    {
      v368 = *a2;
      uint64_t v369 = (v12 - *a2) >> 2;
      unint64_t v370 = v369 + 1;
      if ((unint64_t)(v369 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v371 = v366 - (void)v368;
      if (v371 >> 1 > v370) {
        unint64_t v370 = v371 >> 1;
      }
      if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v372 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v372 = v370;
      }
      if (v372)
      {
        if (v372 >> 62) {
          goto LABEL_1105;
        }
        v373 = (char *)operator new(4 * v372);
      }
      else
      {
        v373 = 0;
      }
      v374 = &v373[4 * v369];
      *(_DWORD *)v374 = 37;
      v367 = v374 + 4;
      while (v12 != v368)
      {
        int v375 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v374 - 1) = v375;
        v374 -= 4;
      }
      *a2 = v374;
      a2[1] = v367;
      a2[2] = &v373[4 * v372];
      if (v368) {
        operator delete(v368);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 37;
      v367 = v12 + 4;
    }
    a2[1] = v367;
    std::string v12 = v367;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x26u))
  {
    unint64_t v376 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v376)
    {
      v378 = *a2;
      uint64_t v379 = (v12 - *a2) >> 2;
      unint64_t v380 = v379 + 1;
      if ((unint64_t)(v379 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v381 = v376 - (void)v378;
      if (v381 >> 1 > v380) {
        unint64_t v380 = v381 >> 1;
      }
      if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v382 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v382 = v380;
      }
      if (v382)
      {
        if (v382 >> 62) {
          goto LABEL_1105;
        }
        v383 = (char *)operator new(4 * v382);
      }
      else
      {
        v383 = 0;
      }
      v384 = &v383[4 * v379];
      *(_DWORD *)v384 = 38;
      v377 = v384 + 4;
      while (v12 != v378)
      {
        int v385 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v384 - 1) = v385;
        v384 -= 4;
      }
      *a2 = v384;
      a2[1] = v377;
      a2[2] = &v383[4 * v382];
      if (v378) {
        operator delete(v378);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 38;
      v377 = v12 + 4;
    }
    a2[1] = v377;
    std::string v12 = v377;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x27u))
  {
    unint64_t v386 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v386)
    {
      v388 = *a2;
      uint64_t v389 = (v12 - *a2) >> 2;
      unint64_t v390 = v389 + 1;
      if ((unint64_t)(v389 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v391 = v386 - (void)v388;
      if (v391 >> 1 > v390) {
        unint64_t v390 = v391 >> 1;
      }
      if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v392 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v392 = v390;
      }
      if (v392)
      {
        if (v392 >> 62) {
          goto LABEL_1105;
        }
        v393 = (char *)operator new(4 * v392);
      }
      else
      {
        v393 = 0;
      }
      v394 = &v393[4 * v389];
      *(_DWORD *)v394 = 39;
      v387 = v394 + 4;
      while (v12 != v388)
      {
        int v395 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v394 - 1) = v395;
        v394 -= 4;
      }
      *a2 = v394;
      a2[1] = v387;
      a2[2] = &v393[4 * v392];
      if (v388) {
        operator delete(v388);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 39;
      v387 = v12 + 4;
    }
    a2[1] = v387;
    std::string v12 = v387;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x28u))
  {
    unint64_t v396 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v396)
    {
      v398 = *a2;
      uint64_t v399 = (v12 - *a2) >> 2;
      unint64_t v400 = v399 + 1;
      if ((unint64_t)(v399 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v401 = v396 - (void)v398;
      if (v401 >> 1 > v400) {
        unint64_t v400 = v401 >> 1;
      }
      if ((unint64_t)v401 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v402 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v402 = v400;
      }
      if (v402)
      {
        if (v402 >> 62) {
          goto LABEL_1105;
        }
        v403 = (char *)operator new(4 * v402);
      }
      else
      {
        v403 = 0;
      }
      v404 = &v403[4 * v399];
      *(_DWORD *)v404 = 40;
      v397 = v404 + 4;
      while (v12 != v398)
      {
        int v405 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v404 - 1) = v405;
        v404 -= 4;
      }
      *a2 = v404;
      a2[1] = v397;
      a2[2] = &v403[4 * v402];
      if (v398) {
        operator delete(v398);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 40;
      v397 = v12 + 4;
    }
    a2[1] = v397;
    std::string v12 = v397;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x29u))
  {
    unint64_t v406 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v406)
    {
      v408 = *a2;
      uint64_t v409 = (v12 - *a2) >> 2;
      unint64_t v410 = v409 + 1;
      if ((unint64_t)(v409 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v411 = v406 - (void)v408;
      if (v411 >> 1 > v410) {
        unint64_t v410 = v411 >> 1;
      }
      if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v412 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v412 = v410;
      }
      if (v412)
      {
        if (v412 >> 62) {
          goto LABEL_1105;
        }
        v413 = (char *)operator new(4 * v412);
      }
      else
      {
        v413 = 0;
      }
      v414 = &v413[4 * v409];
      *(_DWORD *)v414 = 41;
      v407 = v414 + 4;
      while (v12 != v408)
      {
        int v415 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v414 - 1) = v415;
        v414 -= 4;
      }
      *a2 = v414;
      a2[1] = v407;
      a2[2] = &v413[4 * v412];
      if (v408) {
        operator delete(v408);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 41;
      v407 = v12 + 4;
    }
    a2[1] = v407;
    std::string v12 = v407;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Au))
  {
    unint64_t v416 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v416)
    {
      v418 = *a2;
      uint64_t v419 = (v12 - *a2) >> 2;
      unint64_t v420 = v419 + 1;
      if ((unint64_t)(v419 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v421 = v416 - (void)v418;
      if (v421 >> 1 > v420) {
        unint64_t v420 = v421 >> 1;
      }
      if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v422 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v422 = v420;
      }
      if (v422)
      {
        if (v422 >> 62) {
          goto LABEL_1105;
        }
        v423 = (char *)operator new(4 * v422);
      }
      else
      {
        v423 = 0;
      }
      v424 = &v423[4 * v419];
      *(_DWORD *)v424 = 42;
      v417 = v424 + 4;
      while (v12 != v418)
      {
        int v425 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v424 - 1) = v425;
        v424 -= 4;
      }
      *a2 = v424;
      a2[1] = v417;
      a2[2] = &v423[4 * v422];
      if (v418) {
        operator delete(v418);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 42;
      v417 = v12 + 4;
    }
    a2[1] = v417;
    std::string v12 = v417;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Bu))
  {
    unint64_t v426 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v426)
    {
      v428 = *a2;
      uint64_t v429 = (v12 - *a2) >> 2;
      unint64_t v430 = v429 + 1;
      if ((unint64_t)(v429 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v431 = v426 - (void)v428;
      if (v431 >> 1 > v430) {
        unint64_t v430 = v431 >> 1;
      }
      if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v432 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v432 = v430;
      }
      if (v432)
      {
        if (v432 >> 62) {
          goto LABEL_1105;
        }
        v433 = (char *)operator new(4 * v432);
      }
      else
      {
        v433 = 0;
      }
      v434 = &v433[4 * v429];
      *(_DWORD *)v434 = 43;
      v427 = v434 + 4;
      while (v12 != v428)
      {
        int v435 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v434 - 1) = v435;
        v434 -= 4;
      }
      *a2 = v434;
      a2[1] = v427;
      a2[2] = &v433[4 * v432];
      if (v428) {
        operator delete(v428);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 43;
      v427 = v12 + 4;
    }
    a2[1] = v427;
    std::string v12 = v427;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Cu))
  {
    unint64_t v436 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v436)
    {
      v438 = *a2;
      uint64_t v439 = (v12 - *a2) >> 2;
      unint64_t v440 = v439 + 1;
      if ((unint64_t)(v439 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v441 = v436 - (void)v438;
      if (v441 >> 1 > v440) {
        unint64_t v440 = v441 >> 1;
      }
      if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v442 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v442 = v440;
      }
      if (v442)
      {
        if (v442 >> 62) {
          goto LABEL_1105;
        }
        v443 = (char *)operator new(4 * v442);
      }
      else
      {
        v443 = 0;
      }
      v444 = &v443[4 * v439];
      *(_DWORD *)v444 = 44;
      v437 = v444 + 4;
      while (v12 != v438)
      {
        int v445 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v444 - 1) = v445;
        v444 -= 4;
      }
      *a2 = v444;
      a2[1] = v437;
      a2[2] = &v443[4 * v442];
      if (v438) {
        operator delete(v438);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 44;
      v437 = v12 + 4;
    }
    a2[1] = v437;
    std::string v12 = v437;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Du))
  {
    unint64_t v446 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v446)
    {
      v448 = *a2;
      uint64_t v449 = (v12 - *a2) >> 2;
      unint64_t v450 = v449 + 1;
      if ((unint64_t)(v449 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v451 = v446 - (void)v448;
      if (v451 >> 1 > v450) {
        unint64_t v450 = v451 >> 1;
      }
      if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v452 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v452 = v450;
      }
      if (v452)
      {
        if (v452 >> 62) {
          goto LABEL_1105;
        }
        v453 = (char *)operator new(4 * v452);
      }
      else
      {
        v453 = 0;
      }
      v454 = &v453[4 * v449];
      *(_DWORD *)v454 = 45;
      v447 = v454 + 4;
      while (v12 != v448)
      {
        int v455 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v454 - 1) = v455;
        v454 -= 4;
      }
      *a2 = v454;
      a2[1] = v447;
      a2[2] = &v453[4 * v452];
      if (v448) {
        operator delete(v448);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 45;
      v447 = v12 + 4;
    }
    a2[1] = v447;
    std::string v12 = v447;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Eu))
  {
    unint64_t v456 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v456)
    {
      v458 = *a2;
      uint64_t v459 = (v12 - *a2) >> 2;
      unint64_t v460 = v459 + 1;
      if ((unint64_t)(v459 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v461 = v456 - (void)v458;
      if (v461 >> 1 > v460) {
        unint64_t v460 = v461 >> 1;
      }
      if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v462 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v462 = v460;
      }
      if (v462)
      {
        if (v462 >> 62) {
          goto LABEL_1105;
        }
        v463 = (char *)operator new(4 * v462);
      }
      else
      {
        v463 = 0;
      }
      v464 = &v463[4 * v459];
      *(_DWORD *)v464 = 46;
      v457 = v464 + 4;
      while (v12 != v458)
      {
        int v465 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v464 - 1) = v465;
        v464 -= 4;
      }
      *a2 = v464;
      a2[1] = v457;
      a2[2] = &v463[4 * v462];
      if (v458) {
        operator delete(v458);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 46;
      v457 = v12 + 4;
    }
    a2[1] = v457;
    std::string v12 = v457;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Fu))
  {
    unint64_t v466 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v466)
    {
      v468 = *a2;
      uint64_t v469 = (v12 - *a2) >> 2;
      unint64_t v470 = v469 + 1;
      if ((unint64_t)(v469 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v471 = v466 - (void)v468;
      if (v471 >> 1 > v470) {
        unint64_t v470 = v471 >> 1;
      }
      if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v472 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v472 = v470;
      }
      if (v472)
      {
        if (v472 >> 62) {
          goto LABEL_1105;
        }
        v473 = (char *)operator new(4 * v472);
      }
      else
      {
        v473 = 0;
      }
      v474 = &v473[4 * v469];
      *(_DWORD *)v474 = 47;
      v467 = v474 + 4;
      while (v12 != v468)
      {
        int v475 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v474 - 1) = v475;
        v474 -= 4;
      }
      *a2 = v474;
      a2[1] = v467;
      a2[2] = &v473[4 * v472];
      if (v468) {
        operator delete(v468);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 47;
      v467 = v12 + 4;
    }
    a2[1] = v467;
    std::string v12 = v467;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x30u))
  {
    unint64_t v476 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v476)
    {
      v478 = *a2;
      uint64_t v479 = (v12 - *a2) >> 2;
      unint64_t v480 = v479 + 1;
      if ((unint64_t)(v479 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v481 = v476 - (void)v478;
      if (v481 >> 1 > v480) {
        unint64_t v480 = v481 >> 1;
      }
      if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v482 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v482 = v480;
      }
      if (v482)
      {
        if (v482 >> 62) {
          goto LABEL_1105;
        }
        v483 = (char *)operator new(4 * v482);
      }
      else
      {
        v483 = 0;
      }
      v484 = &v483[4 * v479];
      *(_DWORD *)v484 = 48;
      v477 = v484 + 4;
      while (v12 != v478)
      {
        int v485 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v484 - 1) = v485;
        v484 -= 4;
      }
      *a2 = v484;
      a2[1] = v477;
      a2[2] = &v483[4 * v482];
      if (v478) {
        operator delete(v478);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 48;
      v477 = v12 + 4;
    }
    a2[1] = v477;
    std::string v12 = v477;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x31u))
  {
    unint64_t v486 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v486)
    {
      v488 = *a2;
      uint64_t v489 = (v12 - *a2) >> 2;
      unint64_t v490 = v489 + 1;
      if ((unint64_t)(v489 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v491 = v486 - (void)v488;
      if (v491 >> 1 > v490) {
        unint64_t v490 = v491 >> 1;
      }
      if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v492 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v492 = v490;
      }
      if (v492)
      {
        if (v492 >> 62) {
          goto LABEL_1105;
        }
        v493 = (char *)operator new(4 * v492);
      }
      else
      {
        v493 = 0;
      }
      v494 = &v493[4 * v489];
      *(_DWORD *)v494 = 49;
      v487 = v494 + 4;
      while (v12 != v488)
      {
        int v495 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v494 - 1) = v495;
        v494 -= 4;
      }
      *a2 = v494;
      a2[1] = v487;
      a2[2] = &v493[4 * v492];
      if (v488) {
        operator delete(v488);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 49;
      v487 = v12 + 4;
    }
    a2[1] = v487;
    std::string v12 = v487;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x32u))
  {
    unint64_t v496 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v496)
    {
      v498 = *a2;
      uint64_t v499 = (v12 - *a2) >> 2;
      unint64_t v500 = v499 + 1;
      if ((unint64_t)(v499 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v501 = v496 - (void)v498;
      if (v501 >> 1 > v500) {
        unint64_t v500 = v501 >> 1;
      }
      if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v502 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v502 = v500;
      }
      if (v502)
      {
        if (v502 >> 62) {
          goto LABEL_1105;
        }
        v503 = (char *)operator new(4 * v502);
      }
      else
      {
        v503 = 0;
      }
      v504 = &v503[4 * v499];
      *(_DWORD *)v504 = 50;
      v497 = v504 + 4;
      while (v12 != v498)
      {
        int v505 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v504 - 1) = v505;
        v504 -= 4;
      }
      *a2 = v504;
      a2[1] = v497;
      a2[2] = &v503[4 * v502];
      if (v498) {
        operator delete(v498);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 50;
      v497 = v12 + 4;
    }
    a2[1] = v497;
    std::string v12 = v497;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x33u))
  {
    unint64_t v506 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v506)
    {
      v508 = *a2;
      uint64_t v509 = (v12 - *a2) >> 2;
      unint64_t v510 = v509 + 1;
      if ((unint64_t)(v509 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v511 = v506 - (void)v508;
      if (v511 >> 1 > v510) {
        unint64_t v510 = v511 >> 1;
      }
      if ((unint64_t)v511 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v512 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v512 = v510;
      }
      if (v512)
      {
        if (v512 >> 62) {
          goto LABEL_1105;
        }
        v513 = (char *)operator new(4 * v512);
      }
      else
      {
        v513 = 0;
      }
      v514 = &v513[4 * v509];
      *(_DWORD *)v514 = 51;
      v507 = v514 + 4;
      while (v12 != v508)
      {
        int v515 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v514 - 1) = v515;
        v514 -= 4;
      }
      *a2 = v514;
      a2[1] = v507;
      a2[2] = &v513[4 * v512];
      if (v508) {
        operator delete(v508);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 51;
      v507 = v12 + 4;
    }
    a2[1] = v507;
    std::string v12 = v507;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x34u))
  {
    unint64_t v516 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v516)
    {
      v518 = *a2;
      uint64_t v519 = (v12 - *a2) >> 2;
      unint64_t v520 = v519 + 1;
      if ((unint64_t)(v519 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v521 = v516 - (void)v518;
      if (v521 >> 1 > v520) {
        unint64_t v520 = v521 >> 1;
      }
      if ((unint64_t)v521 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v522 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v522 = v520;
      }
      if (v522)
      {
        if (v522 >> 62) {
          goto LABEL_1105;
        }
        v523 = (char *)operator new(4 * v522);
      }
      else
      {
        v523 = 0;
      }
      v524 = &v523[4 * v519];
      *(_DWORD *)v524 = 52;
      v517 = v524 + 4;
      while (v12 != v518)
      {
        int v525 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v524 - 1) = v525;
        v524 -= 4;
      }
      *a2 = v524;
      a2[1] = v517;
      a2[2] = &v523[4 * v522];
      if (v518) {
        operator delete(v518);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 52;
      v517 = v12 + 4;
    }
    a2[1] = v517;
    std::string v12 = v517;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x35u))
  {
    unint64_t v526 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v526)
    {
      v528 = *a2;
      uint64_t v529 = (v12 - *a2) >> 2;
      unint64_t v530 = v529 + 1;
      if ((unint64_t)(v529 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v531 = v526 - (void)v528;
      if (v531 >> 1 > v530) {
        unint64_t v530 = v531 >> 1;
      }
      if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v532 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v532 = v530;
      }
      if (v532)
      {
        if (v532 >> 62) {
          goto LABEL_1105;
        }
        v533 = (char *)operator new(4 * v532);
      }
      else
      {
        v533 = 0;
      }
      v534 = &v533[4 * v529];
      *(_DWORD *)v534 = 53;
      v527 = v534 + 4;
      while (v12 != v528)
      {
        int v535 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v534 - 1) = v535;
        v534 -= 4;
      }
      *a2 = v534;
      a2[1] = v527;
      a2[2] = &v533[4 * v532];
      if (v528) {
        operator delete(v528);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 53;
      v527 = v12 + 4;
    }
    a2[1] = v527;
    std::string v12 = v527;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x36u))
  {
    unint64_t v536 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v536)
    {
      v538 = *a2;
      uint64_t v539 = (v12 - *a2) >> 2;
      unint64_t v540 = v539 + 1;
      if ((unint64_t)(v539 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v541 = v536 - (void)v538;
      if (v541 >> 1 > v540) {
        unint64_t v540 = v541 >> 1;
      }
      if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v542 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v542 = v540;
      }
      if (v542)
      {
        if (v542 >> 62) {
          goto LABEL_1105;
        }
        v543 = (char *)operator new(4 * v542);
      }
      else
      {
        v543 = 0;
      }
      v544 = &v543[4 * v539];
      *(_DWORD *)v544 = 54;
      v537 = v544 + 4;
      while (v12 != v538)
      {
        int v545 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v544 - 1) = v545;
        v544 -= 4;
      }
      *a2 = v544;
      a2[1] = v537;
      a2[2] = &v543[4 * v542];
      if (v538) {
        operator delete(v538);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 54;
      v537 = v12 + 4;
    }
    a2[1] = v537;
    std::string v12 = v537;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x37u))
  {
    unint64_t v546 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v546)
    {
      v548 = *a2;
      uint64_t v549 = (v12 - *a2) >> 2;
      unint64_t v550 = v549 + 1;
      if ((unint64_t)(v549 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v551 = v546 - (void)v548;
      if (v551 >> 1 > v550) {
        unint64_t v550 = v551 >> 1;
      }
      if ((unint64_t)v551 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v552 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v552 = v550;
      }
      if (v552)
      {
        if (v552 >> 62) {
          goto LABEL_1105;
        }
        v553 = (char *)operator new(4 * v552);
      }
      else
      {
        v553 = 0;
      }
      v554 = &v553[4 * v549];
      *(_DWORD *)v554 = 55;
      v547 = v554 + 4;
      while (v12 != v548)
      {
        int v555 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v554 - 1) = v555;
        v554 -= 4;
      }
      *a2 = v554;
      a2[1] = v547;
      a2[2] = &v553[4 * v552];
      if (v548) {
        operator delete(v548);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 55;
      v547 = v12 + 4;
    }
    a2[1] = v547;
    std::string v12 = v547;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x38u))
  {
    unint64_t v556 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v556)
    {
      v558 = *a2;
      uint64_t v559 = (v12 - *a2) >> 2;
      unint64_t v560 = v559 + 1;
      if ((unint64_t)(v559 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v561 = v556 - (void)v558;
      if (v561 >> 1 > v560) {
        unint64_t v560 = v561 >> 1;
      }
      if ((unint64_t)v561 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v562 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v562 = v560;
      }
      if (v562)
      {
        if (v562 >> 62) {
          goto LABEL_1105;
        }
        v563 = (char *)operator new(4 * v562);
      }
      else
      {
        v563 = 0;
      }
      v564 = &v563[4 * v559];
      *(_DWORD *)v564 = 56;
      v557 = v564 + 4;
      while (v12 != v558)
      {
        int v565 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v564 - 1) = v565;
        v564 -= 4;
      }
      *a2 = v564;
      a2[1] = v557;
      a2[2] = &v563[4 * v562];
      if (v558) {
        operator delete(v558);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 56;
      v557 = v12 + 4;
    }
    a2[1] = v557;
    std::string v12 = v557;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x39u))
  {
    unint64_t v566 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v566)
    {
      v568 = *a2;
      uint64_t v569 = (v12 - *a2) >> 2;
      unint64_t v570 = v569 + 1;
      if ((unint64_t)(v569 + 1) >> 62) {
        goto LABEL_1104;
      }
      uint64_t v571 = v566 - (void)v568;
      if (v571 >> 1 > v570) {
        unint64_t v570 = v571 >> 1;
      }
      if ((unint64_t)v571 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v572 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v572 = v570;
      }
      if (v572)
      {
        if (v572 >> 62) {
          goto LABEL_1105;
        }
        v573 = (char *)operator new(4 * v572);
      }
      else
      {
        v573 = 0;
      }
      v574 = &v573[4 * v569];
      *(_DWORD *)v574 = 57;
      v567 = v574 + 4;
      while (v12 != v568)
      {
        int v575 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v574 - 1) = v575;
        v574 -= 4;
      }
      *a2 = v574;
      a2[1] = v567;
      a2[2] = &v573[4 * v572];
      if (v568) {
        operator delete(v568);
      }
    }
    else
    {
      *(_DWORD *)std::string v12 = 57;
      v567 = v12 + 4;
    }
    a2[1] = v567;
    std::string v12 = v567;
  }
  if (!llvm::MachO::isValidImplementationForArchitecture(a1, 0x3Au)) {
    return;
  }
  unint64_t v576 = (unint64_t)a2[2];
  if ((unint64_t)v12 >= v576)
  {
    v578 = *a2;
    uint64_t v579 = (v12 - *a2) >> 2;
    unint64_t v580 = v579 + 1;
    if (!((unint64_t)(v579 + 1) >> 62))
    {
      uint64_t v581 = v576 - (void)v578;
      if (v581 >> 1 > v580) {
        unint64_t v580 = v581 >> 1;
      }
      if ((unint64_t)v581 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v582 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v582 = v580;
      }
      if (!v582)
      {
        v583 = 0;
LABEL_1097:
        v584 = &v583[4 * v579];
        *(_DWORD *)v584 = 58;
        v577 = v584 + 4;
        while (v12 != v578)
        {
          int v585 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v584 - 1) = v585;
          v584 -= 4;
        }
        *a2 = v584;
        a2[1] = v577;
        a2[2] = &v583[4 * v582];
        if (v578) {
          operator delete(v578);
        }
        goto LABEL_1102;
      }
      if (!(v582 >> 62))
      {
        v583 = (char *)operator new(4 * v582);
        goto LABEL_1097;
      }
LABEL_1105:
      sub_1CB833614();
    }
LABEL_1104:
    abort();
  }
  *(_DWORD *)std::string v12 = 58;
  v577 = v12 + 4;
LABEL_1102:
  a2[1] = v577;
}

uint64_t llvm::MachO::getCPUTypeFromArchitecture(unsigned int a1)
{
  if (a1 > 0x78) {
    return 0;
  }
  else {
    return qword_1CFB320C0[(char)a1] | qword_1CFB31CF8[(char)a1];
  }
}

uint64_t llvm::MachO::getCPUTypeFromImplementation(signed int a1)
{
  if (a1 > 0x3B) {
    return 0;
  }
  else {
    return qword_1CFB32668[a1] | qword_1CFB32488[a1];
  }
}

uint64_t llvm::MachO::mapToArchitecture(llvm::MachO *this, const llvm::Triple *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  ArchName = llvm::Triple::getArchName(this);
  size_t v5 = v3;
  if (v3 >= 9) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v3) {
    memcpy(&v18, ArchName, v3);
  }
  uint64_t v6 = v5;
  if (v5 == 5)
  {
    BOOL v7 = v18 == 863136097 && v19 == 50;
    if (v7 || (v18 == 913467745 ? (BOOL v8 = v19 == 52) : (BOOL v8 = 0), v8))
    {
      uint64_t AIRVersion = llvm::Triple::getAIRVersion(this);
      if (AIRVersion == 2)
      {
        uint64_t v14 = AIRVersion & 0x7FFFFFFF00000000;
        uint64_t v15 = v10 & 0x7FFFFFFF00000000;
        if (!(AIRVersion & 0x7FFFFFFF00000000 | v10 & 0x7FFFFFFF00000000 | v10 & 0x7FFFFFFF)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        uint64_t v16 = v10 & 0x7FFFFFFF;
        if (!v15 && !(v14 ^ 0x100000000 | v16)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v15 && !(v14 ^ 0x200000000 | v16)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v15 && !(v14 ^ 0x300000000 | v16)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v15 && !(v14 ^ 0x400000000 | v16)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v15 && !(v14 ^ 0x500000000 | v16)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v15 && !(v14 ^ 0x600000000 | v16)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
      }
      else if (AIRVersion == 1)
      {
        uint64_t v11 = AIRVersion & 0x7FFFFFFF00000000;
        uint64_t v12 = v10 & 0x7FFFFFFF;
        uint64_t v13 = v10 & 0x7FFFFFFF00000000;
        if ((v10 & 0x7FFFFFFF00000000) == 0 && !(v11 ^ 0x600000000 | v12)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v13 && !(v11 ^ 0x800000000 | v12)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v13 && !(v11 ^ 0xB00000000 | v12)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v6 = 5;
  }
  return llvm::MachO::getArchitectureFromName((uint64_t)&v18, v6);
}

uint64_t llvm::MachO::is64Bit(unsigned int a1)
{
  uint64_t v1 = a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
    case 2:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL llvm::MachO::isAppleGPUArchitecture(int a1)
{
  return (a1 - 16) < 0x1C || (a1 - 97) < 0x17;
}

BOOL llvm::MachO::isAMDGPUArchitecture(int a1)
{
  return (a1 - 44) < 0xF;
}

BOOL llvm::MachO::isIntelGPUArchitecture(int a1)
{
  return (a1 - 59) < 0xA;
}

BOOL llvm::MachO::isAIRArchitecture(int a1)
{
  return (a1 - 73) < 0x16;
}

llvm::raw_ostream *llvm::MachO::operator<<(llvm::raw_ostream *a1, unsigned int a2)
{
  ImplementationName = llvm::MachO::getImplementationName(a2);
  size_t v5 = v3;
  uint64_t v6 = (void *)*((void *)a1 + 4);
  if (v3 <= *((void *)a1 + 3) - (void)v6)
  {
    if (v3)
    {
      memcpy(v6, ImplementationName, v3);
      *((void *)a1 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, ImplementationName, v3);
  }
  return a1;
}

{
  size_t v3;
  const char *ArchitectureName;
  size_t v5;
  void *v6;

  ArchitectureName = llvm::MachO::getArchitectureName(a2);
  size_t v5 = v3;
  uint64_t v6 = (void *)*((void *)a1 + 4);
  if (v3 <= *((void *)a1 + 3) - (void)v6)
  {
    if (v3)
    {
      memcpy(v6, ArchitectureName, v3);
      *((void *)a1 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, ArchitectureName, v3);
  }
  return a1;
}

_DWORD *llvm::MachO::ArchitectureSet::ArchitectureSet(_DWORD *result, unsigned __int8 **a2)
{
  *uint64_t result = 0;
  uint64_t v2 = *a2;
  size_t v3 = a2[1];
  if (*a2 != v3)
  {
    int v4 = 0;
    do
    {
      int v5 = *v2;
      if (v5 != 120)
      {
        v4 |= 1 << v5;
        *uint64_t result = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  *uint64_t result = 0;
  uint64_t v2 = *a2;
  size_t v3 = a2[1];
  if (*a2 != v3)
  {
    int v4 = 0;
    do
    {
      int v5 = *v2;
      if (v5 != 120)
      {
        v4 |= 1 << v5;
        *uint64_t result = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t llvm::MachO::ArchitectureSet::count(llvm::MachO::ArchitectureSet *this)
{
  int32x2_t v1 = (int32x2_t)0x100000000;
  int32x2_t v2 = (int32x2_t)vld1_dup_f32((const float *)this);
  int64x2_t v3 = 0uLL;
  int v4 = 32;
  int8x16_t v5 = (int8x16_t)vdupq_n_s64(1uLL);
  do
  {
    int32x2_t v6 = vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v1), v2);
    v7.i64[0] = v6.u32[0];
    v7.i64[1] = v6.u32[1];
    int64x2_t v3 = vaddq_s64(v3, (int64x2_t)vandq_s8(v7, v5));
    int32x2_t v1 = vadd_s32(v1, (int32x2_t)0x200000002);
    v4 -= 2;
  }
  while (v4);
  return vaddvq_s64(v3);
}

void llvm::MachO::ArchitectureSet::operator std::string(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  if (v3)
  {
    *(void *)(a2 + 16) = 0;
    int64x2_t v5 = 0uLL;
    *(_OWORD *)a2 = 0u;
    int32x2_t v6 = (int32x2_t)0x100000000;
    int32x2_t v7 = vdup_n_s32(v3);
    int v8 = 32;
    int8x16_t v9 = (int8x16_t)vdupq_n_s64(1uLL);
    do
    {
      int32x2_t v10 = vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v6), v7);
      v11.i64[0] = v10.u32[0];
      v11.i64[1] = v10.u32[1];
      int64x2_t v5 = vaddq_s64(v5, (int64x2_t)vandq_s8(v11, v9));
      int32x2_t v6 = vadd_s32(v6, (int32x2_t)0x200000002);
      v8 -= 2;
    }
    while (v8);
    if (v3)
    {
      LODWORD(v13) = 0;
LABEL_13:
      int64x2_t v30 = v5;
      ArchitectureName = llvm::MachO::getArchitectureName(v13);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
LABEL_35:
      }
        abort();
      size_t v17 = ArchitectureName;
      size_t v18 = v16;
      uint64_t v19 = vaddvq_s64(v30);
      int v20 = v13;
      uint64_t v21 = " ";
      while (v18 < 0x17)
      {
        HIBYTE(v33) = v18;
        p_dst = (void **)&__dst;
        if (v18) {
          goto LABEL_21;
        }
LABEL_22:
        *((unsigned char *)p_dst + v18) = 0;
        if (v33 >= 0) {
          int v27 = (const std::string::value_type *)&__dst;
        }
        else {
          int v27 = (const std::string::value_type *)__dst;
        }
        if (v33 >= 0) {
          std::string::size_type v28 = HIBYTE(v33) & 0x7F;
        }
        else {
          std::string::size_type v28 = v32;
        }
        std::string::append((std::string *)a2, v27, v28);
        if (SHIBYTE(v33) < 0) {
          operator delete(__dst);
        }
        if (--v19) {
          std::string::append((std::string *)a2, v21);
        }
        do
        {
          if (++v20 > 0x1F) {
            return;
          }
        }
        while ((((unint64_t)*a1 >> v20) & 1) == 0);
        size_t v17 = llvm::MachO::getArchitectureName(v20);
        size_t v18 = v29;
        if (v29 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_35;
        }
      }
      uint64_t v23 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v23 = v18 | 7;
      }
      unsigned int v24 = v21;
      uint64_t v25 = v23 + 1;
      p_dst = (void **)operator new(v23 + 1);
      unint64_t v26 = v25 | 0x8000000000000000;
      uint64_t v21 = v24;
      std::string::size_type v32 = v18;
      int64_t v33 = v26;
      std::string __dst = p_dst;
LABEL_21:
      memmove(p_dst, v17, v18);
      goto LABEL_22;
    }
    uint64_t v12 = 0;
    do
    {
      if (v12 == 31) {
        return;
      }
      uint64_t v13 = v12 + 1;
      unint64_t v14 = v3 >> v12++;
    }
    while ((v14 & 2) == 0);
    if (v13 != 0xFFFFFFFFLL) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 9;
    strcpy((char *)a2, "[(empty)]");
  }
}

uint64_t llvm::MachO::ArchitectureSet::hasABICompatibleSlice(unsigned int *a1, unsigned int a2)
{
  int CPUTypeFromArchitecture = llvm::MachO::getCPUTypeFromArchitecture(a2);
  unint64_t v4 = *a1;
  if (v4)
  {
    LODWORD(v6) = 0;
LABEL_8:
    if (CPUTypeFromArchitecture == llvm::MachO::getCPUTypeFromArchitecture(v6))
    {
      return 1;
    }
    else
    {
      for (unsigned int i = v6 + 1; ; ++i)
      {
        BOOL v8 = i < 0x20;
        if (i > 0x1F
          || (((unint64_t)*a1 >> i) & 1) != 0
          && CPUTypeFromArchitecture == llvm::MachO::getCPUTypeFromArchitecture(i))
        {
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    while (v5 != 31)
    {
      uint64_t v6 = v5 + 1;
      unint64_t v7 = v4 >> v5++;
      if ((v7 & 2) != 0)
      {
        if (v6 != 0xFFFFFFFFLL) {
          goto LABEL_8;
        }
        return 0;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t llvm::MachO::ArchitectureSet::getABICompatibleSlice(unsigned int *a1, unsigned int a2)
{
  int CPUTypeFromArchitecture = llvm::MachO::getCPUTypeFromArchitecture(a2);
  unint64_t v4 = *a1;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = 0;
    while (v5 != 31)
    {
      uint64_t v6 = v5 + 1;
      unint64_t v7 = v4 >> v5++;
      if ((v7 & 2) != 0)
      {
        if (v6 != 0xFFFFFFFFLL) {
          goto LABEL_8;
        }
        goto LABEL_6;
      }
    }
    goto LABEL_6;
  }
  LODWORD(v6) = 0;
LABEL_8:
  LOBYTE(i) = v6;
  if (CPUTypeFromArchitecture != llvm::MachO::getCPUTypeFromArchitecture(v6))
  {
    for (unsigned int i = v6 + 1; i <= 0x1F; ++i)
    {
      if ((((unint64_t)*a1 >> i) & 1) != 0
        && CPUTypeFromArchitecture == llvm::MachO::getCPUTypeFromArchitecture(i))
      {
        return i;
      }
    }
LABEL_6:
    LOBYTE(i) = 120;
  }
  return i;
}

void llvm::MachO::ArchitectureSet::print(llvm::MachO::ArchitectureSet *this, llvm::raw_ostream *a2)
{
  llvm::MachO::ArchitectureSet::operator std::string((unsigned int *)this, (uint64_t)__p);
  if (v6 >= 0) {
    unint64_t v3 = __p;
  }
  else {
    unint64_t v3 = (void **)__p[0];
  }
  if (v6 >= 0) {
    size_t v4 = v6 & 0x7F;
  }
  else {
    size_t v4 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(a2, (const char *)v3, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

llvm::raw_ostream *llvm::MachO::operator<<(llvm::raw_ostream *a1, int a2)
{
  int v4 = a2;
  llvm::MachO::ArchitectureSet::print((llvm::MachO::ArchitectureSet *)&v4, a1);
  return a1;
}

uint64_t llvm::MachO::mapToArchitectureSet(llvm::Triple *this, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  LODWORD(v3) = 0;
  uint64_t v4 = 48 * a2;
  do
  {
    ArchName = llvm::Triple::getArchName(this);
    int ArchitectureFromName = llvm::MachO::getArchitectureFromName((uint64_t)ArchName, v6);
    int v8 = 1 << ArchitectureFromName;
    if (ArchitectureFromName == 120) {
      int v8 = 0;
    }
    uint64_t v3 = v8 | v3;
    this = (llvm::Triple *)((char *)this + 48);
    v4 -= 48;
  }
  while (v4);
  return v3;
}

uint64_t sub_1CD0F5608(unint64_t *a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = &v3[-*a1];
  unint64_t v5 = (unint64_t)(v4 + 1);
  if ((uint64_t)(v4 + 1) < 0) {
    abort();
  }
  unint64_t v8 = a1[2] - v2;
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v9 = v5;
  }
  if (v9) {
    unint64_t v10 = (unint64_t)operator new(v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int8x16_t v11 = (char *)(v10 + v9);
  v4[v10] = a2;
  uint64_t v12 = (uint64_t)&v4[v10 + 1];
  if (v3 == (char *)v2)
  {
    v10 += (unint64_t)v4;
  }
  else
  {
    uint64_t v13 = &v3[~v2];
    do
    {
      char v14 = *--v3;
      (v13--)[v10] = v14;
    }
    while (v3 != (char *)v2);
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = (unint64_t)v11;
  if (v2) {
    operator delete((void *)v2);
  }
  return v12;
}

unsigned int *llvm::MachO::InterfaceFileRef::addTarget(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1CD0F56E4((unsigned int *)(a1 + 24), a2);
}

unsigned int *sub_1CD0F56E4(unsigned int *result, unsigned __int8 *a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    unsigned int v3 = *a2;
    uint64_t v4 = *(unsigned __int8 **)result;
    unint64_t v5 = result[2];
    do
    {
      unint64_t v6 = v5 >> 1;
      unint64_t v7 = &v4[8 * (v5 >> 1)];
      unsigned int v10 = *v7;
      unint64_t v8 = v7 + 4;
      unsigned int v9 = v10;
      if (v10 < v3 || v3 >= v9 && *v8 < *((_DWORD *)a2 + 1))
      {
        v4 += 8 * (v5 >> 1) + 8;
        unint64_t v6 = v5 + ~v6;
      }
      unint64_t v5 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)result;
  }
  if (v4 == (unsigned __int8 *)(*(void *)result + 8 * v2)
    || (unsigned int v11 = *a2, v12 = *v4, v11 < v12)
    || v12 >= v11 && *((_DWORD *)a2 + 1) < *((_DWORD *)v4 + 1))
  {
    uint64_t v13 = *(void *)a2;
    return sub_1CD869438(result, (uint64_t)v4, &v13);
  }
  return result;
}

std::string *sub_1CD0F57B0(uint64_t *a1, void *__s2, size_t __n)
{
  v23[0] = __s2;
  v23[1] = __n;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 != *a1)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a1) >> 4);
    do
    {
      unint64_t v8 = v5 + 80 * (v7 >> 1);
      char v9 = *(unsigned char *)(v8 + 23);
      int v10 = v9;
      size_t v11 = v9 & 0x7F;
      if (v10 >= 0) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = *(void *)(v8 + 8);
      }
      if (__n >= v12) {
        size_t v13 = v12;
      }
      else {
        size_t v13 = __n;
      }
      if (v13
        && (v10 >= 0 ? (char v14 = (const void *)(v5 + 80 * (v7 >> 1))) : (char v14 = *(const void **)v8),
            (int v15 = memcmp(v14, __s2, v13)) != 0))
      {
        int v16 = (v15 >> 31) | 1;
      }
      else
      {
        if (v12 < __n) {
          int v16 = -1;
        }
        else {
          int v16 = 1;
        }
        if (v12 == __n) {
          int v16 = 0;
        }
      }
      if (v16 == -1) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v16 == -1) {
        uint64_t v5 = v8 + 80;
      }
    }
    while (v7);
  }
  if (v5 == v6) {
    return sub_1CD869538(a1, (std::string *)v5, (uint64_t)v23);
  }
  char v17 = *(unsigned char *)(v5 + 23);
  BOOL v18 = v17 < 0;
  uint64_t v19 = v17 >= 0 ? (const void *)v5 : *(const void **)v5;
  uint64_t v20 = v17 & 0x7F;
  if (v18) {
    uint64_t v20 = *(void *)(v5 + 8);
  }
  if (v20 != __n || __n && memcmp(v19, __s2, __n)) {
    return sub_1CD869538(a1, (std::string *)v5, (uint64_t)v23);
  }
  return (std::string *)v5;
}

uint64_t llvm::MachO::InterfaceFile::addUUID(uint64_t a1, unsigned __int8 *a2)
{
  sub_1CBF43AA8((uint64_t)v16);
  for (uint64_t i = 0; i != 16; ++i)
  {
    if ((i & 0x7FFFFFFD) == 8 || (i & 0x7FFFFFFD) == 4)
    {
      LOBYTE(v13.__locale_) = 45;
      sub_1CBF435C4(&v17, (uint64_t)&v13, 1);
    }
    uint64_t v4 = v17;
    uint64_t v5 = (char *)&v18[-1] + *(void *)(v17 - 24);
    if (*((_DWORD *)v5 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v18[-1] + *(void *)(v17 - 24)));
      uint64_t v6 = std::locale::use_facet(&v13, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
      std::locale::~locale(&v13);
      uint64_t v4 = v17;
    }
    *((_DWORD *)v5 + 36) = 48;
    *(void *)((char *)&v18[2] + *(void *)(v4 - 24)) = 2;
    *(_DWORD *)((char *)v18 + *(void *)(v4 - 24)) |= 0x4000u;
    *(_DWORD *)((char *)v18 + *(void *)(v4 - 24)) = *(_DWORD *)((unsigned char *)v18 + *(void *)(v4 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if (v15 >= 0) {
    locale = (std::string::value_type *)&v13;
  }
  else {
    locale = (std::string::value_type *)v13.__locale_;
  }
  if (v15 >= 0) {
    std::string::size_type v8 = v15 & 0x7F;
  }
  else {
    std::string::size_type v8 = v14;
  }
  llvm::MachO::InterfaceFile::addUUID(a1, a2, locale, v8);
  if (v15 < 0) {
    operator delete(v13.__locale_);
  }
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v17 = v9;
  v18[0] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D25D9C00](&v20);
}

uint64_t llvm::MachO::InterfaceFile::targets@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v8 = a2;
  uint64_t v9 = (void **)&v7;
  uint64_t v6 = (void **)&v4;
  unint64_t v7 = (uint64_t (**)(void **))&unk_1F2647400;
  uint64_t v4 = (void (**)(void **))&unk_1F2647400;
  int v5 = a2;
  sub_1CD0F5D50(a1 + 96, (uint64_t)&v4, a3);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == (void **)&v7) {
    return v7[4]((void **)&v7);
  }
  if (v9) {
    return (*((uint64_t (**)(void))*v9 + 5))();
  }
  return result;
}

uint64_t sub_1CD0F5D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
  sub_1CD0F6D24((uint64_t)v15, a2);
  sub_1CD0F6B50(v17, v6, v7, (uint64_t)v15);
  uint64_t v8 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
  sub_1CD0F6D24((uint64_t)v10, a2);
  sub_1CD0F6B50(v12, v8, v8, (uint64_t)v10);
  sub_1CD0F6858(v17, v12, a3);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  if (v16) {
    return (*(uint64_t (**)(void))(*v16 + 40))();
  }
  return result;
}

BOOL llvm::MachO::InterfaceFile::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  if (v2 != *(_DWORD *)(a2 + 104)) {
    return 0;
  }
  if (!v2)
  {
LABEL_10:
    char v9 = *(unsigned char *)(a1 + 207);
    uint64_t v10 = v9 & 0x7F;
    if (v9 >= 0) {
      uint64_t v11 = v9 & 0x7F;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 192);
    }
    char v12 = *(unsigned char *)(a2 + 207);
    int v13 = v12;
    uint64_t v14 = v12 & 0x7F;
    if (v13 < 0) {
      uint64_t v14 = *(void *)(a2 + 192);
    }
    if (v11 != v14) {
      return 0;
    }
    char v15 = (const void **)(a1 + 184);
    if (v13 >= 0) {
      int v16 = (unsigned __int8 *)(a2 + 184);
    }
    else {
      int v16 = *(unsigned __int8 **)(a2 + 184);
    }
    if ((*(unsigned char *)(a1 + 207) & 0x80) != 0)
    {
      if (memcmp(*v15, v16, *(void *)(a1 + 192))) {
        return 0;
      }
    }
    else if ((v9 & 0x7F) != 0)
    {
      while (*(unsigned __int8 *)v15 == *v16)
      {
        char v15 = (const void **)((char *)v15 + 1);
        ++v16;
        if (!--v10) {
          goto LABEL_25;
        }
      }
      return 0;
    }
LABEL_25:
    if (*(_DWORD *)(a1 + 208) == *(_DWORD *)(a2 + 208)
      && *(_DWORD *)(a1 + 212) == *(_DWORD *)(a2 + 212)
      && *(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216)
      && *(unsigned __int8 *)(a1 + 217) == *(unsigned __int8 *)(a2 + 217)
      && *(unsigned __int8 *)(a1 + 218) == *(unsigned __int8 *)(a2 + 218)
      && *(unsigned __int8 *)(a1 + 219) == *(unsigned __int8 *)(a2 + 219))
    {
      BOOL v18 = *(unsigned __int8 **)(a1 + 224);
      uint64_t v17 = *(unsigned __int8 **)(a1 + 232);
      char v19 = *(unsigned __int8 **)(a2 + 224);
      if (v17 - v18 == *(void *)(a2 + 232) - (void)v19)
      {
        while (v18 != v17)
        {
          if (*v18 != *v19 || *((_DWORD *)v18 + 1) != *((_DWORD *)v19 + 1)) {
            return 0;
          }
          signed __int8 v21 = v18[31];
          uint64_t v22 = v21 & 0x7F;
          if (v21 >= 0) {
            uint64_t v23 = v21 & 0x7F;
          }
          else {
            uint64_t v23 = *((void *)v18 + 2);
          }
          signed __int8 v24 = v19[31];
          int v25 = v24;
          uint64_t v26 = v24 & 0x7F;
          if (v25 < 0) {
            uint64_t v26 = *((void *)v19 + 2);
          }
          if (v23 != v26) {
            return 0;
          }
          if (v25 >= 0) {
            int v27 = v19 + 8;
          }
          else {
            int v27 = (unsigned __int8 *)*((void *)v19 + 1);
          }
          if ((v18[31] & 0x80) != 0)
          {
            if (memcmp(*((const void **)v18 + 1), v27, *((void *)v18 + 2))) {
              return 0;
            }
          }
          else if ((v21 & 0x7F) != 0)
          {
            uint64_t v28 = 0;
            while (v18[v28 + 8] == v27[v28])
            {
              if (v22 == ++v28) {
                goto LABEL_54;
              }
            }
            return 0;
          }
LABEL_54:
          v18 += 32;
          v19 += 32;
        }
        uint64_t v29 = *(void *)(a1 + 248);
        uint64_t v30 = *(void *)(a1 + 256);
        uint64_t v31 = *(void *)(a2 + 248);
        if (v30 - v29 == *(void *)(a2 + 256) - v31)
        {
          while (v29 != v30)
          {
            uint64_t v32 = v29 + 24;
            uint64_t v33 = v31 + 24;
            BOOL result = sub_1CD0F6F78((unsigned __int8 *)v29, (unsigned __int8 **)(v29 + 24), (unsigned __int8 *)v31, (unsigned __int8 **)(v31 + 24));
            if (!result) {
              return result;
            }
            uint64_t v29 = v32 + 56;
            uint64_t v31 = v33 + 56;
          }
          uint64_t v35 = *(void *)(a1 + 272);
          uint64_t v36 = *(void *)(a1 + 280);
          size_t v37 = *(void *)(a2 + 272);
          if (v36 - v35 == *(void *)(a2 + 280) - v37)
          {
            while (v35 != v36)
            {
              uint64_t v38 = v35 + 24;
              size_t v39 = v37 + 24;
              BOOL result = sub_1CD0F6F78((unsigned __int8 *)v35, (unsigned __int8 **)(v35 + 24), (unsigned __int8 *)v37, (unsigned __int8 **)(v37 + 24));
              if (!result) {
                return result;
              }
              uint64_t v35 = v38 + 56;
              size_t v37 = v39 + 56;
            }
            int v40 = *(_DWORD *)(a1 + 352);
            if (v40 == *(_DWORD *)(a2 + 352))
            {
              uint64_t v41 = *(void *)(a1 + 344);
              uint64_t v42 = *(unsigned int *)(a1 + 360);
              uint64_t v43 = v41 + 32 * v42;
              if (v40)
              {
                if (v42)
                {
                  uint64_t v44 = 32 * v42;
                  uint64_t v45 = *(void *)(a1 + 344);
                  while ((*(unsigned char *)v45 == 3 || !*(unsigned char *)v45) && !*(void *)(v45 + 16))
                  {
                    v45 += 32;
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_71;
                    }
                  }
                }
                else
                {
                  uint64_t v45 = *(void *)(a1 + 344);
                }
              }
              else
              {
LABEL_71:
                uint64_t v45 = v41 + 32 * v42;
              }
              uint64_t v46 = v41 + 32 * v42;
              if (v45 == v46)
              {
LABEL_101:
                unsigned int v58 = *(char **)(a1 + 296);
                uint64_t v59 = *(char **)(a1 + 304);
                unint64_t v60 = *(char **)(a2 + 296);
                uint64_t v61 = *(char **)(a2 + 304);
                if (v59 - v58 != v61 - v60) {
                  return 0;
                }
                if (v58 == v59 || v60 == v61) {
                  return v58 == v59 && v60 == v61;
                }
                while (1)
                {
                  uint64_t v62 = *(void *)v58;
                  uint64_t v63 = (std::__shared_weak_count *)*((void *)v58 + 1);
                  if (v63) {
                    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v64 = *(void *)v60;
                  int v65 = (std::__shared_weak_count *)*((void *)v60 + 1);
                  if (v65)
                  {
                    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                    int v66 = llvm::MachO::InterfaceFile::operator==(v62, v64, v37);
                    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  else
                  {
                    int v66 = llvm::MachO::InterfaceFile::operator==(v62, v64, v37);
                  }
                  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                  if (!v66) {
                    break;
                  }
                  v58 += 16;
                  v60 += 16;
                  if (v58 == v59 || v60 == v61) {
                    return v58 == v59 && v60 == v61;
                  }
                }
              }
              else
              {
                uint64_t v47 = *(void *)(a2 + 344);
                LODWORD(v48) = *(_DWORD *)(a2 + 360);
                while (1)
                {
                  uint64_t v68 = 0;
                  if (sub_1CD869E18(v47, v48, (unsigned __int8 *)v45, &v68))
                  {
                    uint64_t v49 = v68;
                    uint64_t v47 = *(void *)(a2 + 344);
                    uint64_t v48 = *(unsigned int *)(a2 + 360);
                  }
                  else
                  {
                    uint64_t v47 = *(void *)(a2 + 344);
                    uint64_t v48 = *(unsigned int *)(a2 + 360);
                    uint64_t v49 = (const void **)(v47 + 32 * v48);
                  }
                  if (v49 == (const void **)(v47 + 32 * v48)) {
                    break;
                  }
                  unint64_t v50 = (unsigned __int8 *)v49[3];
                  uint64_t v51 = *(void *)(v45 + 24);
                  size_t v37 = *((void *)v50 + 1);
                  if (v37 != *(void *)(v51 + 8) || v37 && memcmp(*(const void **)v50, *(const void **)v51, v37)) {
                    break;
                  }
                  if (v50[72] != *(unsigned __int8 *)(v51 + 72)) {
                    break;
                  }
                  uint64_t v52 = *((unsigned int *)v50 + 6);
                  if (v52 != *(_DWORD *)(v51 + 24)) {
                    break;
                  }
                  if (v52)
                  {
                    uint64_t v53 = (unsigned __int8 *)*((void *)v50 + 2);
                    int v54 = &v53[8 * v52];
                    int v55 = *(unsigned __int8 **)(v51 + 16);
                    while (*v53 == *v55 && *((_DWORD *)v53 + 1) == *((_DWORD *)v55 + 1))
                    {
                      v53 += 8;
                      v55 += 8;
                      if (v53 == v54) {
                        goto LABEL_92;
                      }
                    }
                    return 0;
                  }
LABEL_92:
                  if (v50[73] != *(unsigned __int8 *)(v51 + 73)) {
                    return 0;
                  }
                  uint64_t v57 = v45 + 32;
                  uint64_t v45 = v43;
                  if (v57 != v43)
                  {
                    uint64_t v45 = v57;
                    while ((*(unsigned char *)v45 == 3 || !*(unsigned char *)v45) && !*(void *)(v45 + 16))
                    {
                      v45 += 32;
                      if (v45 == v43)
                      {
                        uint64_t v45 = v43;
                        break;
                      }
                    }
                  }
                  if (v45 == v46) {
                    goto LABEL_101;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  int v5 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v6 = &v5[8 * v2];
  uint64_t v7 = *(unsigned __int8 **)(a2 + 96);
  while (*v5 == *v7 && *((_DWORD *)v5 + 1) == *((_DWORD *)v7 + 1))
  {
    v5 += 8;
    v7 += 8;
    if (v5 == v6) {
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1CD0F6528(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != result)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    uint64_t v5 = a3 - 80;
    do
    {
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      long long v6 = *(_OWORD *)(v3 - 80);
      *(void *)(v5 + 16) = *(void *)(v3 - 64);
      *(_OWORD *)uint64_t v5 = v6;
      *(unsigned char *)(v3 - 57) = 0;
      *(unsigned char *)(v3 - 80) = 0;
      BOOL result = sub_1CD41C56C(v5 + 24, v3 - 56);
      v5 -= 80;
      v3 -= 80;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_1CD0F65AC(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      sub_1CD41C56C(a3 + 24, (uint64_t)v5 + 24);
      a3 += 80;
      v5 += 5;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1CD0F662C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    uint64_t v5 = *(void **)(i - 56);
    if (v5 != (void *)(i - 40)) {
      free(v5);
    }
    if (*(char *)(i - 57) < 0) {
      operator delete(*(void **)(i - 80));
    }
  }
}

__n128 sub_1CD0F669C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a2 + v6;
      *(void *)(a3 + v6 - 32) = *(void *)(a2 + v6 - 32);
      uint64_t v8 = a3 + v6 - 24;
      if (*(char *)(a3 + v6 - 1) < 0) {
        operator delete(*(void **)v8);
      }
      v6 -= 32;
      __n128 result = *(__n128 *)(v7 - 24);
      *(void *)(v8 + 16) = *(void *)(v7 - 8);
      *(__n128 *)uint64_t v8 = result;
      *(unsigned char *)(v7 - 1) = 0;
      *(unsigned char *)(v7 - 24) = 0;
    }
    while (a2 + v6 != a1);
  }
  return result;
}

uint64_t sub_1CD0F6730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(void *)a3 = *(void *)v5;
      uint64_t v6 = (void **)(a3 + 8);
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      long long v7 = *(_OWORD *)(v5 + 8);
      *(void *)(a3 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v6 = v7;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      a3 += 32;
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1CD0F67B4()
{
}

_DWORD *sub_1CD0F67C8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F2647400;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD0F6814(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2647400;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CD0F6844(uint64_t a1, unsigned char *a2)
{
  return (*(_DWORD *)(a1 + 8) >> *a2) & 1;
}

uint64_t sub_1CD0F6858@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  uint64_t v6 = (void *)a1[5];
  if (v6)
  {
    if (v6 == a1 + 2)
    {
      char v15 = v14;
      (*(void (**)(void *, void *))(*v6 + 24))(v6, v14);
    }
    else
    {
      char v15 = (void *)a1[5];
      a1[5] = 0;
    }
  }
  else
  {
    char v15 = 0;
  }
  uint64_t v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  uint64_t v8 = (void *)a2[5];
  if (v8)
  {
    if (v8 == a2 + 2)
    {
      char v12 = v11;
      (*(void (**)(void *, void *))(*v8 + 24))(v8, v11);
    }
    else
    {
      char v12 = (void *)a2[5];
      a2[5] = 0;
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1CD0F6A54(a3, v13, v10);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *sub_1CD0F6A54(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (void *)a2[5];
  if (v5)
  {
    if (v5 == a2 + 2)
    {
      a1[5] = a1 + 2;
      (*(void (**)(void, void *))(*(void *)a2[5] + 24))(a2[5], a1 + 2);
    }
    else
    {
      a1[5] = v5;
      a2[5] = 0;
    }
  }
  else
  {
    a1[5] = 0;
  }
  a1[6] = *a3;
  a1[7] = a3[1];
  uint64_t v6 = (void *)a3[5];
  if (v6)
  {
    if (v6 == a3 + 2)
    {
      a1[11] = a1 + 8;
      (*(void (**)(void))(*(void *)a3[5] + 24))(a3[5]);
    }
    else
    {
      a1[11] = v6;
      a3[5] = 0;
    }
  }
  else
  {
    a1[11] = 0;
  }
  return a1;
}

void *sub_1CD0F6B50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CD0F6D24((uint64_t)v8, a4);
  *a1 = a2;
  a1[1] = a3;
  if (v9)
  {
    if (v9 == v8)
    {
      a1[5] = a1 + 2;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      a1[5] = (*(uint64_t (**)(void))(*v9 + 16))();
    }
  }
  else
  {
    a1[5] = 0;
  }
  sub_1CD0F6CB0((uint64_t)a1);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return a1;
}

uint64_t sub_1CD0F6CB0(uint64_t result)
{
  if (*(void *)result != *(void *)(result + 8))
  {
    int32x2_t v1 = (void *)result;
    while (1)
    {
      uint64_t v2 = v1[5];
      if (!v2) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
      if ((result & 1) == 0)
      {
        uint64_t v3 = v1[1];
        uint64_t v4 = *v1 + 8;
        *int32x2_t v1 = v4;
        if (v4 != v3) {
          continue;
        }
      }
      return result;
    }
    sub_1CB920400();
    return sub_1CD0F6D24(v5, v6);
  }
  return result;
}

uint64_t sub_1CD0F6D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CD0F6DBC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  if (v4 != *(unsigned char **)(a1 + 24)) {
    goto LABEL_27;
  }
  uint64_t v5 = *(unsigned char **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 > *(void *)a1)
  {
    uint64_t v7 = (uint64_t)(v6 - *(void *)a1) >> 4;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = -(v8 >> 1);
    if ((unsigned char *)v6 == v4)
    {
      unint64_t v10 = v6 - 16 * (v8 >> 1);
    }
    else
    {
      do
      {
        sub_1CC202928(v6 + 16 * v9, (long long *)v6);
        v6 += 16;
      }
      while ((unsigned char *)v6 != v4);
      uint64_t v4 = *(unsigned char **)(a1 + 8);
      unint64_t v10 = v6 + 16 * v9;
    }
    *(void *)(a1 + 8) = &v4[16 * v9];
    *(void *)(a1 + 16) = v10;
    goto LABEL_27;
  }
  if (v4 == v5) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = (v4 - v5) >> 3;
  }
  if (v11 >> 60) {
    sub_1CB833614();
  }
  char v12 = (char *)operator new(16 * v11);
  int v13 = &v12[16 * (v11 >> 2)];
  uint64_t v14 = &v12[16 * v11];
  uint64_t v15 = (uint64_t)&v4[-v6];
  if (v4 == (unsigned char *)v6)
  {
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    if (!v5) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v16 = v15 >> 4;
  uint64_t v17 = &v13[v15 & 0xFFFFFFFFFFFFFFF0];
  uint64_t v18 = 16 * (v11 >> 2);
  uint64_t v19 = 16 * v16;
  do
  {
    *(_OWORD *)&v12[v18] = *(_OWORD *)v6;
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    v6 += 16;
    v18 += 16;
    v19 -= 16;
  }
  while (v19);
  uint64_t v5 = *(unsigned char **)a1;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 16);
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v17;
  for (*(void *)(a1 + 24) = v14; v21 != v20; v21 -= 16)
  {
    uint64_t v22 = *(std::__shared_weak_count **)(v21 - 8);
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v5) {
LABEL_26:
  }
    operator delete(v5);
LABEL_27:
  uint64_t v23 = *(void **)(a1 + 16);
  uint64_t v24 = a2[1];
  *uint64_t v23 = *a2;
  v23[1] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    uint64_t v23 = *(void **)(a1 + 16);
  }
  *(void *)(a1 + 16) = v23 + 2;
}

BOOL sub_1CD0F6F78(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  signed __int8 v4 = a1[23];
  uint64_t v5 = v4 & 0x7F;
  if (v4 >= 0) {
    uint64_t v6 = v4 & 0x7F;
  }
  else {
    uint64_t v6 = *((void *)a1 + 1);
  }
  signed __int8 v7 = a3[23];
  int v8 = v7;
  uint64_t v9 = v7 & 0x7F;
  if (v8 < 0) {
    uint64_t v9 = *((void *)a3 + 1);
  }
  if (v6 != v9) {
    return 0;
  }
  if (v8 >= 0) {
    char v12 = a3;
  }
  else {
    char v12 = *(unsigned __int8 **)a3;
  }
  if ((a1[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, v12, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if ((v4 & 0x7F) != 0)
  {
    while (*a1 == *v12)
    {
      ++a1;
      ++v12;
      if (!--v5) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v13 = *((unsigned int *)a2 + 2);
  if (v13 != *((_DWORD *)a4 + 2)) {
    return 0;
  }
  if (!v13) {
    return 1;
  }
  uint64_t v14 = *a2;
  uint64_t v15 = (uint64_t)&(*a2)[8 * v13];
  uint64_t v16 = *a4;
  do
  {
    BOOL result = *v14 == *v16 && *((_DWORD *)v14 + 1) == *((_DWORD *)v16 + 1);
    v14 += 8;
    v16 += 8;
  }
  while (result && v14 != (unsigned __int8 *)v15);
  return result;
}

uint64_t llvm::MachO::PackedVersion::parse32(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  v28[6] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v26 = v28;
  uint64_t v27 = 0x300000000;
  llvm::SplitString(a2, a3, (uint64_t)&v26, ".", 1);
  uint64_t v4 = v27;
  uint64_t v5 = (char *)v26;
  if (v27 <= 3)
  {
    uint64_t v6 = *((void *)v26 + 1);
    if (v6)
    {
      unint64_t v7 = 0;
      int v8 = *(unsigned __int8 **)v26;
      while (1)
      {
        int v9 = *v8;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) >= 0x1A)
          {
            if ((v9 - 65) > 0x19) {
              break;
            }
            int v10 = -55;
          }
          else
          {
            int v10 = -87;
          }
        }
        else
        {
          int v10 = -48;
        }
        unsigned int v11 = v10 + v9;
        if (v11 > 9) {
          break;
        }
        unint64_t v12 = 10 * v7 + v11;
        if (v7 > v12 / 0xA) {
          break;
        }
        ++v8;
        unint64_t v7 = v12;
        if (!--v6)
        {
          if (v12 >> 16) {
            break;
          }
          int v15 = v12 << 16;
          *a1 = v12 << 16;
          if (v4 < 2)
          {
            uint64_t v13 = 1;
            goto LABEL_18;
          }
          int v16 = 8;
          uint64_t v17 = 1;
          uint64_t v13 = 1;
LABEL_23:
          uint64_t v18 = &v5[16 * v17];
          uint64_t v19 = (unsigned __int8 *)*((void *)v18 + 1);
          if (v19)
          {
            unint64_t v20 = 0;
            uint64_t v21 = *(unsigned __int8 **)v18;
            while (1)
            {
              int v22 = *v21;
              if ((v22 - 48) >= 0xA)
              {
                if ((v22 - 97) >= 0x1A)
                {
                  if ((v22 - 65) > 0x19) {
                    goto LABEL_17;
                  }
                  int v23 = -55;
                }
                else
                {
                  int v23 = -87;
                }
              }
              else
              {
                int v23 = -48;
              }
              unsigned int v24 = v23 + v22;
              if (v24 > 9) {
                break;
              }
              unint64_t v25 = 10 * v20 + v24;
              if (v20 > v25 / 0xA) {
                break;
              }
              ++v21;
              unint64_t v20 = v25;
              if (!--v19)
              {
                if (v25 > 0xFF) {
                  goto LABEL_17;
                }
                v15 |= v25 << v16;
                *a1 = v15;
                ++v17;
                v16 -= 8;
                if (v17 != v4) {
                  goto LABEL_23;
                }
                goto LABEL_18;
              }
            }
          }
          break;
        }
      }
    }
  }
LABEL_17:
  uint64_t v13 = 0;
LABEL_18:
  if (v5 != (char *)v28) {
    free(v5);
  }
  return v13;
}

uint64_t llvm::MachO::PackedVersion::parse64(int *a1, uint64_t a2, unint64_t a3)
{
  v33[10] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v31 = v33;
  uint64_t v32 = 0x500000000;
  llvm::SplitString(a2, a3, (uint64_t)&v31, ".", 1);
  unsigned int v4 = v32;
  uint64_t v5 = (char *)v31;
  if (v32 <= 5)
  {
    uint64_t v6 = *((void *)v31 + 1);
    if (v6)
    {
      unint64_t v7 = 0;
      int v8 = *(unsigned __int8 **)v31;
      while (1)
      {
        int v9 = *v8;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) >= 0x1A)
          {
            if ((v9 - 65) > 0x19) {
              break;
            }
            int v10 = -55;
          }
          else
          {
            int v10 = -87;
          }
        }
        else
        {
          int v10 = -48;
        }
        unsigned int v11 = v10 + v9;
        if (v11 > 9) {
          break;
        }
        unint64_t v12 = 10 * v7 + v11;
        if (v7 > v12 / 0xA) {
          break;
        }
        ++v8;
        unint64_t v7 = v12;
        if (!--v6)
        {
          if (v12 >> 24) {
            break;
          }
          int v15 = (v12 & 0xFFFFFFFFFFFF0000) != 0;
          int v16 = 0xFFFF;
          if (v12 < 0xFFFF) {
            int v16 = v12;
          }
          int v17 = v16 << 16;
          *a1 = v17;
          if (v4 >= 2)
          {
            uint64_t v19 = 2;
            if (v4 != 2) {
              uint64_t v19 = 3;
            }
            uint64_t v20 = 8;
            uint64_t v21 = 1;
LABEL_30:
            int v22 = &v5[16 * v21];
            int v23 = (unsigned __int8 *)*((void *)v22 + 1);
            if (v23)
            {
              unint64_t v24 = 0;
              unint64_t v25 = *(unsigned __int8 **)v22;
              while (1)
              {
                int v26 = *v25;
                if ((v26 - 48) >= 0xA)
                {
                  if ((v26 - 97) >= 0x1A)
                  {
                    if ((v26 - 65) > 0x19) {
                      break;
                    }
                    int v27 = -55;
                  }
                  else
                  {
                    int v27 = -87;
                  }
                }
                else
                {
                  int v27 = -48;
                }
                unsigned int v28 = v27 + v26;
                if (v28 > 9) {
                  break;
                }
                unint64_t v29 = 10 * v24 + v28;
                if (v24 > v29 / 0xA) {
                  break;
                }
                ++v25;
                unint64_t v24 = v29;
                if (!--v23)
                {
                  if (v29 >= 0x400) {
                    break;
                  }
                  if (v29 >= 0xFF) {
                    uint64_t v30 = 255;
                  }
                  else {
                    uint64_t v30 = v29;
                  }
                  if (v29 > 0xFF) {
                    int v15 = 1;
                  }
                  v17 |= v30 << v20;
                  *a1 = v17;
                  ++v21;
                  v20 -= 8;
                  if (v21 != v19) {
                    goto LABEL_30;
                  }
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = (v15 << 8);
          }
          else
          {
LABEL_24:
            unsigned int v18 = (v15 << 8) | 1;
            if (v4 <= 3) {
              uint64_t v13 = v18;
            }
            else {
              uint64_t v13 = 257;
            }
          }
          goto LABEL_18;
        }
      }
    }
  }
  uint64_t v13 = 0;
LABEL_18:
  if (v5 != (char *)v33) {
    free(v5);
  }
  return v13;
}

uint64_t llvm::MachO::mapToPlatformType(llvm::MachO *this, const llvm::Triple *a2)
{
  int v2 = *((_DWORD *)this + 9);
  switch(v2)
  {
    case 28:
      BOOL v3 = *((_DWORD *)this + 10) == 20;
      unsigned int v4 = 3;
      unsigned int v5 = 8;
      goto LABEL_6;
    case 29:
      BOOL v3 = *((_DWORD *)this + 10) == 20;
      unsigned int v4 = 4;
      unsigned int v5 = 9;
LABEL_6:
      if (v3) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v4;
      }
      break;
    case 30:
      uint64_t result = 5;
      break;
    case 31:
      uint64_t result = 10;
      break;
    case 32:
      uint64_t result = 14;
      break;
    case 33:
      if (*((_DWORD *)this + 10) == 20) {
        uint64_t result = 12;
      }
      else {
        uint64_t result = 11;
      }
      break;
    default:
      if (v2 == 7)
      {
        int v7 = *((_DWORD *)this + 10);
        if (v7 == 21) {
          unsigned int v8 = 6;
        }
        else {
          unsigned int v8 = 2;
        }
        if (v7 == 20) {
          uint64_t result = 7;
        }
        else {
          uint64_t result = v8;
        }
      }
      else
      {
        uint64_t result = v2 == 11;
      }
      break;
  }
  return result;
}

unint64_t llvm::MachO::mapToPlatformSet@<X0>(unint64_t this@<X0>, const llvm::Triple *a2@<X1>, void *a3@<X8>)
{
  *a3 = a3 + 2;
  a3[1] = 0x300000000;
  a3[6] = 0;
  a3[5] = 0;
  a3[4] = a3 + 5;
  if (a2)
  {
    unsigned int v4 = (llvm::MachO *)this;
    uint64_t v5 = 48 * (void)a2;
    do
    {
      int v6 = llvm::MachO::mapToPlatformType(v4, a2);
      this = sub_1CD86A3E8((uint64_t)a3, &v6);
      unsigned int v4 = (llvm::MachO *)((char *)v4 + 48);
      v5 -= 48;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::MachO::getPlatformFromName(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2 = 0;
  switch(a2)
  {
    case 3:
      unint64_t v2 = 0x100000002;
      if (*a1 ^ 0x6F69 | *((unsigned __int8 *)a1 + 2) ^ 0x73) {
        unint64_t v2 = 0;
      }
      break;
    case 4:
      if (*(_DWORD *)a1 == 1936684660) {
        unint64_t v2 = 0x100000003;
      }
      else {
        unint64_t v2 = 0;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1868783981 || *((unsigned char *)a1 + 4) != 115)
      {
        int v4 = *(_DWORD *)a1 ^ 0x6F706573 | *((unsigned __int8 *)a1 + 4) ^ 0x73;
        uint64_t v5 = 0x10000000ELL;
        goto LABEL_14;
      }
      unint64_t v2 = 0x100000001;
      break;
    case 7:
      int v4 = *(_DWORD *)a1 ^ 0x63746177 | *(_DWORD *)((char *)a1 + 3) ^ 0x736F6863;
      uint64_t v5 = 0x100000004;
LABEL_14:
      BOOL v6 = v4 == 0;
      goto LABEL_22;
    case 8:
      uint64_t v5 = 0x100000005;
      BOOL v6 = *(void *)a1 == 0x736F656764697262;
      goto LABEL_22;
    case 9:
      uint64_t v7 = *(void *)a1 ^ 0x696B726576697264 | *((unsigned __int8 *)a1 + 8) ^ 0x74;
      uint64_t v5 = 0x10000000ALL;
      goto LABEL_21;
    case 10:
      uint64_t v7 = *(void *)a1 ^ 0x6163616D2D736F69 | a1[4] ^ 0x6962;
      uint64_t v5 = 0x100000006;
      goto LABEL_21;
    case 13:
      uint64_t v7 = *(void *)a1 ^ 0x756D69732D736F69 | *(void *)((char *)a1 + 5) ^ 0x726F74616C756D69;
      uint64_t v5 = 0x100000007;
      goto LABEL_21;
    case 14:
      uint64_t v7 = *(void *)a1 ^ 0x6D69732D736F7674 | *(void *)(a1 + 3) ^ 0x726F74616C756D69;
      uint64_t v5 = 0x100000008;
      goto LABEL_21;
    case 17:
      uint64_t v7 = *(void *)a1 ^ 0x2D736F6863746177 | *((void *)a1 + 1) ^ 0x6F74616C756D6973 | *((unsigned __int8 *)a1
                                                                                               + 16) ^ 0x72;
      uint64_t v5 = 0x100000009;
LABEL_21:
      BOOL v6 = v7 == 0;
LABEL_22:
      if (v6) {
        unint64_t v2 = v5;
      }
      else {
        unint64_t v2 = 0;
      }
      break;
    default:
      break;
  }
  if (v2 <= 0x100000000) {
    return 0x100000000;
  }
  else {
    return v2;
  }
}

void llvm::MachO::getOSAndEnvironmentName(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 6:
      std::operator+<char>();
      BOOL v3 = "-macabi";
      goto LABEL_4;
    case 7:
    case 8:
    case 9:
    case 12:
      std::operator+<char>();
      BOOL v3 = "-simulator";
LABEL_4:
      int v4 = std::string::append(&v6, v3);
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      break;
    case 13:
      __break(1u);
      JUMPOUT(0x1CD0F7AC4);
    default:
      std::operator+<char>();
      break;
  }
}

uint64_t llvm::MachO::mapToPlatformFromXBSEnv(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2 = 0;
  switch(a2)
  {
    case 3:
      unint64_t v2 = 0x100000002;
      if (*a1 != 28521 || *((unsigned char *)a1 + 2) != 115)
      {
        if (*a1 != 29793 || *((unsigned char *)a1 + 2) != 118)
        {
          BOOL v5 = (*a1 ^ 0x736F | *((unsigned __int8 *)a1 + 2) ^ 0x78) == 0;
          unint64_t v2 = 0x100000001;
          goto LABEL_28;
        }
        unint64_t v2 = 0x100000003;
      }
      goto LABEL_45;
    case 4:
      uint64_t v6 = 0x10000000BLL;
      BOOL v7 = *(_DWORD *)a1 == 1936683640;
      goto LABEL_13;
    case 5:
      uint64_t v6 = 0x100000004;
      BOOL v7 = (*(_DWORD *)a1 ^ 0x63746177 | *((unsigned __int8 *)a1 + 4) ^ 0x68) == 0;
LABEL_13:
      if (v7) {
        unint64_t v2 = v6;
      }
      else {
        unint64_t v2 = 0;
      }
      goto LABEL_45;
    case 7:
      if (*(_DWORD *)a1 == 1601400681 && *(_DWORD *)((char *)a1 + 3) == 1835627359)
      {
        unint64_t v2 = 0x100000007;
        goto LABEL_45;
      }
      if (*(_DWORD *)a1 == 1601598561 && *(_DWORD *)((char *)a1 + 3) == 1835627359)
      {
        unint64_t v2 = 0x100000008;
        goto LABEL_45;
      }
      goto LABEL_39;
    case 8:
      if (*(void *)a1 == 0x736F656764697262)
      {
        unint64_t v2 = 0x100000005;
      }
      else
      {
        unint64_t v2 = 0x10000000CLL;
        BOOL v5 = *(void *)a1 == 0x6D69735F736F7278;
LABEL_28:
        if (!v5) {
          unint64_t v2 = 0;
        }
      }
      goto LABEL_45;
    case 9:
      if (*(void *)a1 == 0x69735F6863746177 && *((unsigned char *)a1 + 8) == 109)
      {
        unint64_t v2 = 0x100000009;
      }
      else if (*(void *)a1 == 0x696B726576697264 && *((unsigned char *)a1 + 8) == 116)
      {
        unint64_t v2 = 0x10000000ALL;
      }
      else
      {
LABEL_39:
        unint64_t v2 = 0;
      }
LABEL_45:
      if (v2 <= 0x100000000) {
        return 0x100000000;
      }
      else {
        return v2;
      }
    default:
      goto LABEL_45;
  }
}

void llvm::MachO::Symbol::dump(llvm::MachO::Symbol *this, llvm::raw_ostream *a2)
{
  memset(&v43, 0, sizeof(v43));
  char v4 = *((unsigned char *)this + 73);
  if ((v4 & 8) != 0)
  {
    std::string::append(&v43, "(undef) ");
    char v4 = *((unsigned char *)this + 73);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_14:
      std::string::append(&v43, "(weak-ref) ");
      if ((*((unsigned char *)this + 73) & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*((unsigned char *)this + 73) & 2) == 0)
  {
    goto LABEL_3;
  }
  std::string::append(&v43, "(weak-def) ");
  char v4 = *((unsigned char *)this + 73);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_4:
  if (v4) {
LABEL_5:
  }
    std::string::append(&v43, "(tlv) ");
LABEL_6:
  switch(*((unsigned char *)this + 72))
  {
    case 0:
      BOOL v5 = *(const void **)this;
      if (!*(void *)this)
      {
        int v17 = 0;
        unsigned int v18 = 0;
        char v19 = 0;
        __p[0] = 0;
        __p[1] = 0;
        int64_t v42 = 0;
        goto LABEL_46;
      }
      size_t v6 = *((void *)this + 1);
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_86;
      }
      if (v6 >= 0x17)
      {
        uint64_t v23 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v23 = v6 | 7;
        }
        uint64_t v24 = v23 + 1;
        BOOL v7 = operator new(v23 + 1);
        __p[1] = (void *)v6;
        int64_t v42 = v24 | 0x8000000000000000;
        __p[0] = v7;
      }
      else
      {
        HIBYTE(v42) = v6;
        BOOL v7 = __p;
        if (!v6) {
          goto LABEL_45;
        }
      }
      memmove(v7, v5, v6);
LABEL_45:
      *((unsigned char *)v7 + v6) = 0;
      char v19 = HIBYTE(v42);
      unsigned int v18 = (void **)__p[0];
      int v17 = __p[1];
LABEL_46:
      BOOL v25 = v19 < 0;
      if (v19 >= 0) {
        int v26 = __p;
      }
      else {
        int v26 = v18;
      }
      std::string::size_type v27 = v19 & 0x7F;
      if (v25) {
        std::string::size_type v28 = (std::string::size_type)v17;
      }
      else {
        std::string::size_type v28 = v27;
      }
      std::string::append(&v43, (const std::string::value_type *)v26, v28);
      if (SHIBYTE(v42) < 0)
      {
        unint64_t v29 = __p[0];
LABEL_76:
        operator delete(v29);
        goto LABEL_77;
      }
      goto LABEL_77;
    case 1:
      unsigned int v8 = *(const void **)this;
      if (!*(void *)this)
      {
        memset(&__dst, 0, sizeof(__dst));
LABEL_59:
        int v22 = "(ObjC Class) ";
        goto LABEL_66;
      }
      std::string::size_type v9 = *((void *)this + 1);
      if (v9 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_86;
      }
      if (v9 >= 0x17)
      {
        uint64_t v30 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v30 = v9 | 7;
        }
        uint64_t v31 = v30 + 1;
        p_dst = (std::string *)operator new(v30 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9) {
          goto LABEL_58;
        }
      }
      memmove(p_dst, v8, v9);
LABEL_58:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      goto LABEL_59;
    case 2:
      unsigned int v11 = *(const void **)this;
      if (!*(void *)this)
      {
        memset(&__dst, 0, sizeof(__dst));
LABEL_40:
        int v22 = "(ObjC Class EH) ";
        goto LABEL_66;
      }
      std::string::size_type v12 = *((void *)this + 1);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_86;
      }
      if (v12 >= 0x17)
      {
        uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v20 = v12 | 7;
        }
        uint64_t v21 = v20 + 1;
        uint64_t v13 = (std::string *)operator new(v20 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
        uint64_t v13 = &__dst;
        if (!v12) {
          goto LABEL_39;
        }
      }
      memmove(v13, v11, v12);
LABEL_39:
      v13->__r_.__value_.__s.__data_[v12] = 0;
      goto LABEL_40;
    case 3:
      uint64_t v14 = *(const void **)this;
      if (!*(void *)this)
      {
        memset(&__dst, 0, sizeof(__dst));
        goto LABEL_65;
      }
      std::string::size_type v15 = *((void *)this + 1);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
LABEL_86:
      }
        abort();
      if (v15 >= 0x17)
      {
        uint64_t v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v32 = v15 | 7;
        }
        uint64_t v33 = v32 + 1;
        int v16 = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v15;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
        int v16 = &__dst;
        if (!v15) {
          goto LABEL_64;
        }
      }
      memmove(v16, v14, v15);
LABEL_64:
      v16->__r_.__value_.__s.__data_[v15] = 0;
LABEL_65:
      int v22 = "(ObjC IVar) ";
LABEL_66:
      char v34 = std::string::insert(&__dst, 0, v22);
      int64_t v35 = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      int64_t v42 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v42 >= 0) {
        uint64_t v36 = __p;
      }
      else {
        uint64_t v36 = (void **)__p[0];
      }
      if (v42 >= 0) {
        std::string::size_type v37 = HIBYTE(v42) & 0x7F;
      }
      else {
        std::string::size_type v37 = (std::string::size_type)__p[1];
      }
      std::string::append(&v43, (const std::string::value_type *)v36, v37);
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v29 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_76;
      }
LABEL_77:
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v43;
      }
      else {
        uint64_t v38 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&v43.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = v43.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(a2, (const char *)v38, size);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      return;
    default:
      goto LABEL_77;
  }
}

uint64_t llvm::MachO::Symbol::targets@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v8 = a2;
  std::string::size_type v9 = (void **)&v7;
  size_t v6 = (void **)&v4;
  BOOL v7 = (uint64_t (**)(void **))&unk_1F2647448;
  char v4 = (void (**)(void **))&unk_1F2647448;
  int v5 = a2;
  sub_1CD0F5D50(a1 + 16, (uint64_t)&v4, a3);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == (void **)&v7) {
    return v7[4]((void **)&v7);
  }
  if (v9) {
    return (*((uint64_t (**)(void))*v9 + 5))();
  }
  return result;
}

void sub_1CD0F82B8()
{
}

_DWORD *sub_1CD0F82CC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F2647448;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD0F8318(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2647448;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CD0F8348(uint64_t a1, unsigned char *a2)
{
  return (*(_DWORD *)(a1 + 8) >> *a2) & 1;
}

uint64_t llvm::MachO::Target::create@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v36[0] = a1;
  v36[1] = a2;
  char v37 = 45;
  unint64_t v6 = llvm::StringRef::find(v36, &v37, 1uLL, 0);
  if (v6 == -1)
  {
    uint64_t result = llvm::MachO::getArchitectureFromName(a1, a2);
LABEL_102:
    unint64_t v12 = 0;
    goto LABEL_103;
  }
  if (a2 >= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = a2;
  }
  if (a2 >= v6 + 1) {
    unint64_t v8 = v6 + 1;
  }
  else {
    unint64_t v8 = a2;
  }
  unint64_t v9 = a1 + v8;
  uint64_t v10 = a2 - v8;
  uint64_t result = llvm::MachO::getArchitectureFromName(a1, v7);
  unint64_t v12 = 0;
  int v13 = 0;
  BOOL v14 = 1;
  int v15 = 0;
  switch(v10)
  {
    case 3:
      if (*(_WORD *)v9 != 28521 || *(unsigned char *)(v9 + 2) != 115)
      {
        int v13 = 0;
        int v15 = 0;
        unint64_t v12 = 0;
        goto LABEL_31;
      }
      uint64_t v10 = 3;
      unint64_t v12 = 0x100000002;
      goto LABEL_83;
    case 4:
      if (*(_DWORD *)v9 == 1936683640)
      {
        unint64_t v12 = 0x10000000BLL;
      }
      else
      {
        if (*(_DWORD *)v9 != 1936684660) {
          goto LABEL_25;
        }
        unint64_t v12 = 0x100000003;
        uint64_t v10 = 4;
      }
      goto LABEL_83;
    case 5:
      int v15 = 0;
      unint64_t v12 = 0x100000001;
      if (*(_DWORD *)v9 ^ 0x6F63616D | *(unsigned __int8 *)(v9 + 4) ^ 0x73) {
        unint64_t v12 = 0;
      }
      int v13 = 1;
      goto LABEL_31;
    case 7:
      if (*(_DWORD *)v9 == 1668571511 && *(_DWORD *)(v9 + 3) == 1936681059)
      {
        unint64_t v12 = 0x100000004;
        uint64_t v10 = 7;
      }
      else
      {
LABEL_25:
        unint64_t v12 = 0;
      }
      goto LABEL_83;
    case 14:
      if (*(void *)v9 == 0x6D69732D736F7278 && *(void *)(v9 + 6) == 0x726F74616C756D69)
      {
        unint64_t v12 = 0x10000000CLL;
        uint64_t v10 = 14;
        goto LABEL_83;
      }
      int v13 = 0;
      unint64_t v12 = 0;
      int v15 = 1;
LABEL_31:
      BOOL v14 = HIDWORD(v12) == 0;
LABEL_32:
      if (v14 && v10 == 8)
      {
        if (*(void *)v9 == 0x736F656764697262)
        {
          unint64_t v12 = 0x100000005;
          goto LABEL_83;
        }
      }
      else if (v10 == 11 && v14)
      {
        BOOL v20 = *(void *)v9 == 0x6C6174616363616DLL && *(void *)(v9 + 3) == 0x7473796C61746163;
        uint64_t v10 = 11;
        if (v20)
        {
          unint64_t v12 = 0x100000006;
          goto LABEL_83;
        }
      }
      else if (v10 == 13 && v14)
      {
        BOOL v22 = *(void *)v9 == 0x756D69732D736F69 && *(void *)(v9 + 5) == 0x726F74616C756D69;
        uint64_t v10 = 13;
        if (v22)
        {
          unint64_t v12 = 0x100000007;
          goto LABEL_83;
        }
      }
      if ((v15 & v14) == 1
        && (*(void *)v9 == 0x6D69732D736F7674 ? (BOOL v23 = *(void *)(v9 + 6) == 0x726F74616C756D69) : (BOOL v23 = 0), v23))
      {
        unint64_t v12 = 0x100000008;
      }
      else if (v10 == 17 && v14)
      {
        if (!(*(void *)v9 ^ 0x2D736F6863746177 | *(void *)(v9 + 8) ^ 0x6F74616C756D6973 | *(unsigned __int8 *)(v9 + 16) ^ 0x72)) {
          unint64_t v12 = 0x100000009;
        }
        uint64_t v10 = 17;
      }
      else if (v10 == 9 && v14)
      {
        if (!(*(void *)v9 ^ 0x696B726576697264 | *(unsigned __int8 *)(v9 + 8) ^ 0x74)) {
          unint64_t v12 = 0x10000000ALL;
        }
        uint64_t v10 = 9;
      }
      else if ((v13 & v14) == 1 && !(*(_DWORD *)v9 ^ 0x6F706573 | *(unsigned __int8 *)(v9 + 4) ^ 0x73))
      {
        unint64_t v12 = 0x10000000ELL;
      }
LABEL_83:
      if ((v12 & 0x300000000) != 0 && v12) {
        goto LABEL_103;
      }
      if (!v10 || *(unsigned char *)v9 != 60 || *(unsigned char *)(v9 + v10 - 1) != 62) {
        goto LABEL_102;
      }
      uint64_t v26 = v10 - 1;
      if (v10 - 1 >= (unint64_t)(v10 - 2)) {
        uint64_t v26 = v10 - 2;
      }
      if (!v26)
      {
        unint64_t v34 = 0;
LABEL_105:
        BOOL v35 = 1;
        goto LABEL_109;
      }
      unint64_t v27 = 0;
      std::string::size_type v28 = (unsigned __int8 *)(v8 + a1 + 1);
      uint64_t v29 = v26;
      break;
    default:
      goto LABEL_32;
  }
  while (1)
  {
    int v31 = *v28++;
    int v30 = v31;
    if ((v31 - 48) < 0xA)
    {
      int v32 = -48;
      goto LABEL_94;
    }
    if ((v30 - 97) < 0x1A)
    {
      int v32 = -87;
      goto LABEL_94;
    }
    if ((v30 - 65) > 0x19) {
      break;
    }
    int v32 = -55;
LABEL_94:
    unsigned int v33 = v32 + v30;
    if (v33 > 9) {
      break;
    }
    unint64_t v34 = 10 * v27 + v33;
    if (v27 > v34 / 0xA)
    {
      LODWORD(v26) = 1;
      goto LABEL_105;
    }
    unint64_t v27 = v34;
    if (!--v29) {
      goto LABEL_108;
    }
  }
  unint64_t v34 = v27;
LABEL_108:
  BOOL v35 = v26 == v29;
  LODWORD(v26) = v29 != 0;
LABEL_109:
  if (v26 | v35) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = v34;
  }
LABEL_103:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = result | (v12 << 32);
  return result;
}

void llvm::MachO::getTargetTripleName(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  ArchitectureName = llvm::MachO::getArchitectureName(*a1);
  __int16 v9 = 773;
  v8[0] = ArchitectureName;
  v8[1] = v5;
  void v8[2] = "-apple-";
  llvm::MachO::getOSAndEnvironmentName(*((_DWORD *)a1 + 1), (uint64_t)__p);
  v10[0] = v8;
  void v10[2] = __p;
  __int16 v11 = 1026;
  llvm::Twine::str((llvm::Twine *)v10, a2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CD0F8978(uint64_t a1, uint64_t a2)
{
  v58[128] = *MEMORY[0x1E4F143B8];
  unint64_t v56 = v58;
  long long v57 = xmmword_1CFB1BC20;
  int v38 = 0;
  char v42 = 0;
  uint64_t v43 = 0;
  uint64_t v45 = &v56;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a2 + 47);
  int v6 = v5;
  if (v5 >= 0) {
    char v7 = (std::string::value_type *)(a2 + 24);
  }
  else {
    char v7 = *(std::string::value_type **)(a2 + 24);
  }
  std::string::size_type v8 = v5 & 0x7F;
  if (v6 >= 0) {
    std::string::size_type v9 = v8;
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 32);
  }
  int v10 = *(_DWORD *)(a1 + 40);
  int v11 = *(_DWORD *)(a1 + 44);
  int v12 = *(_DWORD *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 79);
  std::string::size_type v14 = *(void *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 103);
  std::string::size_type v17 = *(void *)(a1 + 88);
  unsigned int v18 = *(unsigned char **)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  BOOL v20 = *(long long **)(a1 + 128);
  uint64_t v21 = *(unsigned int *)(a1 + 136);
  BOOL v22 = v13 < 0;
  BOOL v25 = *(const std::string::value_type **)(a1 + 56);
  BOOL v23 = (const std::string::value_type *)(a1 + 56);
  uint64_t v24 = v25;
  if (v13 >= 0) {
    uint64_t v24 = v23;
  }
  std::string::size_type v26 = v13 & 0x7F;
  if (v22) {
    std::string::size_type v26 = v14;
  }
  uint64_t v29 = *(const std::string::value_type **)(a1 + 80);
  std::string::size_type v28 = (const std::string::value_type *)(a1 + 80);
  unint64_t v27 = v29;
  BOOL v30 = v15 < 0;
  if (v15 >= 0) {
    int v31 = v28;
  }
  else {
    int v31 = v27;
  }
  std::string::size_type v32 = v15 & 0x7F;
  if (v30) {
    std::string::size_type v32 = v17;
  }
  int v44 = 0;
  char v37 = &unk_1F2646FA8;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v46, v3, v4, v7, v9, v10, v11, v12, v24, v26, v31, v32, v18, (v19 - (uint64_t)v18) >> 3, v20, v21);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v46, 0, (llvm::raw_ostream *)&v37, 1, 1);
  __int16 v34 = 1283;
  v33[0] = "malformed file\n";
  v33[2] = v56;
  v33[3] = v57;
  llvm::Twine::str((llvm::Twine *)v33, &v35);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v35;
  *(void *)(a2 + 16) = v36;
  sub_1CC1925A4(&v55);
  if (__p)
  {
    int v54 = __p;
    operator delete(__p);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  char v37 = &unk_1F2646B98;
  if (v44 == 1 && v39) {
    MEMORY[0x1D25D9CB0](v39, 0x1000C8077774924);
  }
  if (v56 != v58) {
    free(v56);
  }
}

void llvm::MachO::TextAPIWriter::writeToStream(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)long long v35 = 0u;
  char v3 = *(unsigned char *)(a2 + 175);
  if (v3 >= 0) {
    uint64_t v4 = (const void *)(a2 + 152);
  }
  else {
    uint64_t v4 = *(const void **)(a2 + 152);
  }
  if (v3 >= 0) {
    size_t v5 = v3 & 0x7F;
  }
  else {
    size_t v5 = *(void *)(a2 + 160);
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_59:
  }
    abort();
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v5;
    uint64_t v39 = (void *)(v10 | 0x8000000000000000);
    *(void *)&long long __dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v39) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_14:
  }
    memmove(p_dst, v4, v5);
  *((unsigned char *)p_dst + v5) = 0;
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(_OWORD *)&__p[1] = __dst;
  __p[3] = v39;
  int v37 = *(_DWORD *)(a2 + 176);
  *((void *)&__dst + 1) = v35;
  uint64_t v39 = a1;
  *(void *)&long long __dst = &unk_1F2646940;
  int v40 = 80;
  uint64_t v41 = v43;
  uint64_t v42 = 0x800000000;
  memset(&v43[32], 0, 48);
  int v11 = (char *)operator new(8uLL);
  *(void *)int v11 = a2;
  int v12 = v11 + 8;
  unsigned int v33 = v11 + 8;
  __int16 v34 = v11 + 8;
  std::string::size_type v32 = v11;
  char v13 = *(uint64_t **)(a2 + 296);
  std::string::size_type v14 = *(uint64_t **)(a2 + 304);
  if (v13 == v14)
  {
    char v15 = v11;
    llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)&__dst);
LABEL_43:
    unint64_t v28 = 0;
    if ((unint64_t)((v12 - v15) >> 3) <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = (v12 - v15) >> 3;
    }
    do
    {
      if (llvm::yaml::Output::preflightDocument((llvm::yaml::Output *)&__dst, v28))
      {
        BOOL v30 = (uint64_t *)sub_1CD86A9E0((uint64_t)&v32, v28);
        (*(void (**)(long long *))(__dst + 104))(&__dst);
        sub_1CD86AA48((uint64_t *)&__dst, v30);
        (*(void (**)(long long *))(__dst + 112))(&__dst);
      }
      ++v28;
    }
    while (v29 != v28);
    int v12 = v32;
    goto LABEL_50;
  }
  do
  {
    uint64_t v17 = *v13;
    int v16 = (std::__shared_weak_count *)v13[1];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v18 = v33;
    if (v33 >= v34)
    {
      BOOL v20 = v32;
      uint64_t v21 = (v33 - v32) >> 3;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61) {
        goto LABEL_59;
      }
      uint64_t v23 = v34 - v32;
      if ((v34 - v32) >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          sub_1CB833614();
        }
        BOOL v25 = (char *)operator new(8 * v24);
      }
      else
      {
        BOOL v25 = 0;
      }
      std::string::size_type v26 = &v25[8 * v21];
      *(void *)std::string::size_type v26 = v17;
      uint64_t v19 = v26 + 8;
      if (v18 != v20)
      {
        do
        {
          uint64_t v27 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        while (v18 != v20);
        unsigned int v18 = v32;
      }
      std::string::size_type v32 = v26;
      __int16 v34 = &v25[8 * v24];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)unsigned int v33 = v17;
      uint64_t v19 = v18 + 8;
    }
    unsigned int v33 = v19;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v13 += 2;
  }
  while (v13 != v14);
  char v15 = v32;
  int v12 = v33;
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)&__dst);
  if (v33 != v32) {
    goto LABEL_43;
  }
LABEL_50:
  llvm::yaml::Output::output((uint64_t)&__dst, "\n...\n", 5uLL);
  *a3 = 0;
  if (v12) {
    operator delete(v12);
  }
  *(void *)&long long __dst = &unk_1F2646940;
  if (v41 != v43) {
    free(v41);
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v35[0]);
  }
}

uint64_t sub_1CD0F9014(llvm::yaml::IO *a1, uint64_t *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  sub_1CD86AD3C((uint64_t)v63, (uint64_t)a1, a2);
  (*(void (**)(llvm::yaml::IO *, const char *, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, "!tapi-tbd", 9, 1);
  sub_1CD3EDEB8(a1, (uint64_t)"tbd-version", v65, 1);
  sub_1CD86CCF8((uint64_t)a1, (uint64_t)(v65 + 8));
  char v3 = v65;
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1)
    || *((void *)v3 + 1) != *((void *)v3 + 2))
  {
    uint64_t v57 = 0;
    char v56 = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "uuids", 0, 0, &v56, &v57))
    {
      unsigned int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
        uint64_t v5 = ((*((void *)v3 + 2) - *((void *)v3 + 1)) >> 5);
      }
      else {
        uint64_t v5 = v4;
      }
      if (v5)
      {
        unint64_t v9 = 0;
        int v54 = (char **)(v3 + 6);
        uint64_t v49 = v3;
        do
        {
          uint64_t v58 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v9, &v58))
          {
            uint64_t v11 = *((void *)v3 + 1);
            unint64_t v10 = *((void *)v3 + 2);
            uint64_t v12 = v10 - v11;
            unint64_t v13 = (uint64_t)(v10 - v11) >> 5;
            if (v13 <= v9)
            {
              unint64_t v14 = v9 + 1;
              unint64_t v15 = v9 + 1 - v13;
              int v16 = *v54;
              if (v15 <= (uint64_t)&(*v54)[-v10] >> 5)
              {
                bzero(*((void **)v3 + 2), ((32 * v9 - v12) & 0xFFFFFFFFFFFFFFE0) + 32);
                *((void *)v3 + 2) = v10 + 32 * v15;
              }
              else
              {
                uint64_t v51 = *v54;
                unint64_t v17 = (unint64_t)&v16[-v11];
                unint64_t v18 = (uint64_t)&v16[-v11] >> 4;
                if (v18 <= v14) {
                  unint64_t v18 = v9 + 1;
                }
                if (v17 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v19 = v18;
                }
                uint64_t v61 = 0;
                uint64_t v62 = v54;
                if (v19 >> 59) {
LABEL_62:
                }
                  sub_1CB833614();
                BOOL v20 = (char *)operator new(32 * v19);
                uint64_t v21 = &v20[32 * v13];
                std::string __p = v20;
                v60.i64[0] = (uint64_t)v21;
                char v50 = &v20[32 * v19];
                uint64_t v61 = v50;
                bzero(v21, ((32 * v9 - v12) & 0xFFFFFFFFFFFFFFE0) + 32);
                unint64_t v22 = &v20[32 * v14];
                v60.i64[1] = (uint64_t)v22;
                if (v10 == v11)
                {
                  int64x2_t v23 = vdupq_n_s64(v10);
                  char v3 = v49;
                  unint64_t v24 = v50;
                  BOOL v25 = v51;
                }
                else
                {
                  char v3 = v49;
                  do
                  {
                    uint64_t v26 = *(void *)(v10 - 32);
                    v10 -= 32;
                    *((void *)v21 - 4) = v26;
                    v21 -= 32;
                    long long v27 = *(_OWORD *)(v10 + 8);
                    *((void *)v21 + 3) = *(void *)(v10 + 24);
                    *(_OWORD *)(v21 + 8) = v27;
                    *(void *)(v10 + 16) = 0;
                    *(void *)(v10 + 24) = 0;
                    *(void *)(v10 + 8) = 0;
                  }
                  while (v10 != v11);
                  int64x2_t v23 = *(int64x2_t *)(v49 + 2);
                  BOOL v25 = (char *)*((void *)v49 + 3);
                  unint64_t v22 = (char *)v60.i64[1];
                  unint64_t v24 = v61;
                }
                *((void *)v3 + 1) = v21;
                *((void *)v3 + 2) = v22;
                int64x2_t v60 = v23;
                *((void *)v3 + 3) = v24;
                uint64_t v61 = v25;
                std::string __p = (void *)v23.i64[0];
                sub_1CD4FF274((uint64_t)&__p);
              }
            }
            unint64_t v28 = (unsigned __int8 *)(*((void *)v3 + 1) + 32 * v9);
            (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
            sub_1CD86D254((uint64_t)a1, v28);
            sub_1CD67275C(a1, (uint64_t)"value", (uint64_t)(v28 + 8), 1);
            (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v58);
          }
          ++v9;
        }
        while (v9 != v5);
      }
      (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v57);
    }
  }
  LODWORD(__p) = 0;
  sub_1CD0FA150((uint64_t)a1, v65 + 42, &__p);
  sub_1CD55F4E4(a1, (uint64_t)"install-name", (void *)v65 + 11, 1);
  LODWORD(__p) = 0x10000;
  sub_1CD86D304((uint64_t *)a1, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v65 + 26), &__p);
  LODWORD(__p) = 0x10000;
  sub_1CD86D304((uint64_t *)a1, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)(v65 + 27), &__p);
  LOBYTE(__p) = 0;
  sub_1CD86D5B0((uint64_t *)a1, (uint64_t)"swift-abi-version", (unsigned char *)v65 + 112, &__p);
  uint64_t i = v65;
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1)
    || *((void *)i + 22) != *((void *)i + 23))
  {
    uint64_t v57 = 0;
    char v56 = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "parent-umbrella", 0, 0, &v56, &v57))
    {
      unsigned int v7 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
        unsigned int v7 = -1431655765 * ((*((void *)i + 23) - *((void *)i + 22)) >> 4);
      }
      if (v7)
      {
        unint64_t v29 = 0;
        BOOL v30 = (uint64_t *)(i + 44);
        uint64_t v53 = i;
        int v55 = (char **)(i + 48);
        uint64_t v31 = v7;
        char v52 = (uint64_t *)(i + 44);
        do
        {
          uint64_t v58 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v29, &v58))
          {
            uint64_t v32 = *((void *)i + 22);
            unsigned int v33 = (char *)*((void *)i + 23);
            __int16 v34 = &v33[-v32];
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-v32] >> 4);
            if (v35 <= v29)
            {
              uint64_t v36 = 48 * v29;
              unint64_t v37 = v29 + 1;
              unint64_t v38 = v29 + 1 - v35;
              if (0xAAAAAAAAAAAAAAABLL * ((*v55 - v33) >> 4) >= v38)
              {
                bzero(v33, 48 * ((v36 - (uint64_t)v34) / 0x30uLL) + 48);
                uint64_t v47 = &v33[48 * v38];
                BOOL v30 = v52;
                uint64_t i = v53;
                *((void *)v53 + 23) = v47;
              }
              else
              {
                unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&(*v55)[-v32] >> 4);
                uint64_t v40 = 2 * v39;
                if (2 * v39 <= v37) {
                  uint64_t v40 = v29 + 1;
                }
                if (v39 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v41 = 0x555555555555555;
                }
                else {
                  unint64_t v41 = v40;
                }
                uint64_t v62 = v55;
                if (v41 > 0x555555555555555) {
                  goto LABEL_62;
                }
                uint64_t v42 = 3 * v41;
                uint64_t v43 = (char *)operator new(48 * v41);
                std::string __p = v43;
                v60.i64[0] = (uint64_t)&v43[48 * v35];
                uint64_t v61 = &v43[16 * v42];
                bzero((void *)v60.i64[0], 48 * ((v36 - (uint64_t)v34) / 0x30uLL) + 48);
                v60.i64[1] = (uint64_t)&v43[48 * v37];
                BOOL v30 = v52;
                sub_1CD0FBFBC(v52, &__p);
                uint64_t v45 = v60.i64[1];
                uint64_t v44 = v60.i64[0];
                for (uint64_t i = v53; v45 != v44; v45 -= 48)
                {
                  if (*(char *)(v45 - 1) < 0) {
                    operator delete(*(void **)(v45 - 24));
                  }
                  uint64_t v46 = *(void **)(v45 - 48);
                  if (v46)
                  {
                    *(void *)(v45 - 40) = v46;
                    operator delete(v46);
                  }
                }
                if (__p) {
                  operator delete(__p);
                }
              }
            }
            char v48 = (void *)(*v30 + 48 * v29);
            (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
            sub_1CD86D85C((uint64_t)a1, v48);
            sub_1CD67275C(a1, (uint64_t)"umbrella", (uint64_t)(v48 + 3), 1);
            (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v58);
          }
          ++v29;
        }
        while (v29 != v31);
      }
      (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v57);
    }
  }
  LODWORD(__p) = 0;
  sub_1CD0FA404(a1, (uint64_t)"allowable-clients", (uint64_t *)v65 + 15, &__p);
  LODWORD(__p) = 1;
  sub_1CD0FA404(a1, (uint64_t)"reexported-libraries", (uint64_t *)v65 + 18, &__p);
  sub_1CD0FA840(a1, (uint64_t)"exports", (void **)v65 + 25);
  sub_1CD0FA840(a1, (uint64_t)"reexports", (void **)v65 + 28);
  sub_1CD0FA840(a1, (uint64_t)"undefineds", (void **)v65 + 31);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v64 + 16))(v64) & 1) == 0) {
    sub_1CD86DE78();
  }
  return sub_1CD86E1F8((uint64_t)v65);
}

uint64_t sub_1CD0F99F4(int a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  sub_1CD86E2D8(v44, (uint64_t)a2, a3);
  sub_1CD86FBCC(a2, (_DWORD *)(v46 + 96));
  uint64_t v5 = v46;
  if (a1 == 1)
  {
    sub_1CD870694(a2, (int **)(v46 + 144));
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) || *(void *)(v5 + 120) != *(void *)(v5 + 128)) {
      sub_1CD8700CC(a2, (int64x2_t *)(v5 + 120));
    }
    sub_1CD870694(a2, (int **)(v46 + 144));
    LODWORD(v41[0]) = 0;
    sub_1CD0FA150((uint64_t)a2, (_DWORD *)(v46 + 232), v41);
  }
  sub_1CD55F4E4((llvm::yaml::IO *)a2, (uint64_t)"install-name", (void *)(v46 + 200), 1);
  LODWORD(v41[0]) = 0x10000;
  sub_1CD86D304(a2, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v46 + 216), v41);
  LODWORD(v41[0]) = 0x10000;
  sub_1CD86D304(a2, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)(v46 + 220), v41);
  LOBYTE(v41[0]) = 0;
  if (a1 == 4) {
    int v6 = "swift-abi-version";
  }
  else {
    int v6 = "swift-version";
  }
  sub_1CD86D5B0(a2, (uint64_t)v6, (unsigned char *)(v46 + 224), v41);
  LODWORD(v41[0]) = a1 != 1;
  sub_1CD8708F0((uint64_t)a2, (_DWORD *)(v46 + 228), v41);
  if (a1 == 1)
  {
    sub_1CD0FD42C(a2, (char **)(v46 + 256));
  }
  else
  {
    v41[0] = 0;
    v41[1] = 0;
    sub_1CD870A40((llvm::yaml::IO *)a2, v46 + 240, (uint64_t)v41);
    sub_1CD0FD42C(a2, (char **)(v46 + 256));
    uint64_t v7 = v46;
    if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) || *(void *)(v7 + 280) != *(void *)(v7 + 288))
    {
      uint64_t v43 = 0;
      char v42 = 0;
      if ((*(unsigned int (**)(uint64_t *, const char *, void, void, char *, uint64_t *))(*a2 + 120))(a2, "undefineds", 0, 0, &v42, &v43))
      {
        unsigned int v8 = (*(uint64_t (**)(uint64_t *))(*a2 + 24))(a2);
        if ((*(unsigned int (**)(uint64_t *))(*a2 + 16))(a2)) {
          unsigned int v8 = 954437177 * ((*(void *)(v7 + 288) - *(void *)(v7 + 280)) >> 4);
        }
        if (v8)
        {
          unint64_t v10 = 0;
          uint64_t v11 = v8;
          uint64_t v40 = (void *)v7;
          do
          {
            v41[0] = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, void *))(*a2 + 32))(a2, v10, v41))
            {
              uint64_t v12 = *(void *)(v7 + 280);
              uint64_t v13 = *(void *)(v7 + 288);
              uint64_t v14 = v13 - v12;
              unint64_t v15 = 0x8E38E38E38E38E39 * ((v13 - v12) >> 4);
              if (v15 <= v10)
              {
                unint64_t v16 = v10 + 1;
                unint64_t v17 = v10 + 1 - v15;
                uint64_t v18 = *(void *)(v7 + 296);
                if (0x8E38E38E38E38E39 * ((v18 - v13) >> 4) >= v17)
                {
                  bzero(*(void **)(v7 + 288), 144 * ((144 * v10 - v14) / 0x90) + 144);
                  *(void *)(v7 + 288) = v13 + 144 * v17;
                }
                else
                {
                  unint64_t v19 = 0x8E38E38E38E38E39 * ((v18 - v12) >> 4);
                  uint64_t v20 = 2 * v19;
                  if (2 * v19 <= v16) {
                    uint64_t v20 = v10 + 1;
                  }
                  if (v19 >= 0xE38E38E38E38E3) {
                    unint64_t v21 = 0x1C71C71C71C71C7;
                  }
                  else {
                    unint64_t v21 = v20;
                  }
                  if (v21 > 0x1C71C71C71C71C7) {
                    sub_1CB833614();
                  }
                  uint64_t v22 = 9 * v21;
                  int64x2_t v23 = (char *)operator new(144 * v21);
                  unint64_t v24 = &v23[144 * v15];
                  BOOL v25 = &v23[16 * v22];
                  bzero(v24, 144 * ((144 * v10 - v14) / 0x90) + 144);
                  uint64_t v26 = &v23[144 * v16];
                  uint64_t v7 = (uint64_t)v40;
                  long long v27 = (char *)v40[35];
                  unint64_t v28 = (char *)v40[36];
                  if (v28 == v27)
                  {
                    v40[35] = v24;
                    v40[36] = v26;
                    v40[37] = v25;
                  }
                  else
                  {
                    do
                    {
                      v24 -= 144;
                      v28 -= 144;
                      sub_1CD0FDDD4(v24, (uint64_t)v28);
                    }
                    while (v28 != v27);
                    unint64_t v28 = (char *)v40[35];
                    unint64_t v29 = (char *)v40[36];
                    v40[35] = v24;
                    v40[36] = v26;
                    for (v40[37] = v25; v29 != v28; v29 -= 144)
                    {
                      BOOL v30 = (void *)*((void *)v29 - 3);
                      if (v30)
                      {
                        *((void *)v29 - 2) = v30;
                        operator delete(v30);
                      }
                      uint64_t v31 = (void *)*((void *)v29 - 6);
                      if (v31)
                      {
                        *((void *)v29 - 5) = v31;
                        operator delete(v31);
                      }
                      uint64_t v32 = (void *)*((void *)v29 - 9);
                      if (v32)
                      {
                        *((void *)v29 - 8) = v32;
                        operator delete(v32);
                      }
                      unsigned int v33 = (void *)*((void *)v29 - 12);
                      if (v33)
                      {
                        *((void *)v29 - 11) = v33;
                        operator delete(v33);
                      }
                      __int16 v34 = (void *)*((void *)v29 - 15);
                      if (v34)
                      {
                        *((void *)v29 - 14) = v34;
                        operator delete(v34);
                      }
                      unint64_t v35 = (void *)*((void *)v29 - 18);
                      if (v35)
                      {
                        *((void *)v29 - 17) = v35;
                        operator delete(v35);
                      }
                    }
                  }
                  if (v28) {
                    operator delete(v28);
                  }
                }
              }
              uint64_t v36 = *(void *)(v7 + 280);
              uint64_t v37 = v36 + 144 * v10;
              (*(void (**)(uint64_t *))(*a2 + 104))(a2);
              uint64_t v38 = a2[1];
              sub_1CD86FBCC(a2, (_DWORD *)v37);
              sub_1CD0FD17C(a2, (uint64_t)"symbols", (void *)(v37 + 24));
              sub_1CD0FD17C(a2, (uint64_t)"objc-classes", (void *)(v37 + 48));
              if (*(_DWORD *)(v38 + 48) == 4) {
                sub_1CD0FD17C(a2, (uint64_t)"objc-eh-types", (void *)(v36 + 144 * v10 + 72));
              }
              uint64_t v39 = v36 + 144 * v10;
              sub_1CD0FD17C(a2, (uint64_t)"objc-ivars", (void *)(v39 + 96));
              sub_1CD0FD17C(a2, (uint64_t)"weak-ref-symbols", (void *)(v39 + 120));
              (*(void (**)(uint64_t *))(*a2 + 112))(a2);
              (*(void (**)(uint64_t *, void))(*a2 + 40))(a2, v41[0]);
            }
            ++v10;
          }
          while (v10 != v11);
        }
        (*(void (**)(uint64_t *))(*a2 + 48))(a2);
        (*(void (**)(uint64_t *, uint64_t))(*a2 + 128))(a2, v43);
      }
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45) & 1) == 0) {
    sub_1CD870B78();
  }
  return sub_1CD87125C(v46);
}

uint64_t sub_1CD0FA150(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v13 = 0;
  char v12 = 0;
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*a2 == *a3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, "flags", 0, v7, &v12, &v13);
  if (result)
  {
    char v14 = 0;
    if ((*(unsigned int (**)(uint64_t, char *))(*(void *)a1 + 192))(a1, &v14))
    {
      if (v14) {
        *a2 = 0;
      }
      unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "flat_namespace", v9 & *a2))
      {
        *a2 |= 1u;
      }
      char v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "not_app_extension_safe", *(_DWORD *)&v10 & ((*a2 & 2u) >> 1)))
      {
        *a2 |= 2u;
      }
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "installapi", *(_DWORD *)&v11 & ((*a2 & 4u) >> 2)))
      {
        *a2 |= 4u;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 208))(a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v13);
  }
  else if (v12)
  {
    *a2 = *a3;
  }
  return result;
}

uint64_t sub_1CD0FA404(void *a1, uint64_t a2, uint64_t *a3, _DWORD *i)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  if (!result || *a3 != a3[1])
  {
    uint64_t v31 = 0;
    char v30 = 0;
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, void, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, 0, &v30, &v31);
    if (result)
    {
      unsigned int v9 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(void *))(*a1 + 16))(a1)) {
        unsigned int v9 = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 4);
      }
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v9;
        unint64_t v29 = a3 + 2;
        do
        {
          uint64_t v32 = 0;
          if ((*(unsigned int (**)(void *, unint64_t, uint64_t *))(*a1 + 32))(a1, v10, &v32))
          {
            char v12 = (void *)a3[1];
            uint64_t v13 = (uint64_t)v12 - *a3;
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 4);
            if (v14 <= v10)
            {
              unint64_t v28 = i;
              uint64_t v15 = 48 * v10;
              unint64_t v16 = v10 + 1;
              unint64_t v17 = v10 + 1 - v14;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v29 - (void)v12) >> 4) >= v17)
              {
                bzero(v12, 48 * ((v15 - v13) / 0x30uLL) + 48);
                a3[1] = (uint64_t)v12 + 48 * v17;
                uint64_t i = v28;
              }
              else
              {
                unint64_t v18 = 0x5555555555555556 * ((*v29 - *a3) >> 4);
                if (v18 <= v16) {
                  unint64_t v18 = v10 + 1;
                }
                if (0xAAAAAAAAAAAAAAABLL * ((*v29 - *a3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v19 = 0x555555555555555;
                }
                else {
                  unint64_t v19 = v18;
                }
                uint64_t v37 = a3 + 2;
                if (v19 > 0x555555555555555) {
                  sub_1CB833614();
                }
                uint64_t v20 = 3 * v19;
                unint64_t v21 = (char *)operator new(48 * v19);
                std::string __p = v21;
                __int16 v34 = &v21[16 * (v13 >> 4)];
                uint64_t v36 = &v21[16 * v20];
                bzero(v34, 48 * ((v15 - v13) / 0x30uLL) + 48);
                unint64_t v35 = &v21[48 * v16];
                sub_1CD0FCC18(a3, &__p);
                uint64_t v22 = v34;
                int64x2_t v23 = v35;
                for (uint64_t i = v28; v23 != v22; v23 -= 48)
                {
                  unint64_t v24 = (void *)*((void *)v23 - 3);
                  if (v24)
                  {
                    *((void *)v23 - 2) = v24;
                    operator delete(v24);
                  }
                  BOOL v25 = (void *)*((void *)v23 - 6);
                  if (v25)
                  {
                    *((void *)v23 - 5) = v25;
                    operator delete(v25);
                  }
                }
                if (__p) {
                  operator delete(__p);
                }
              }
            }
            uint64_t v26 = (void *)(*a3 + 48 * v10);
            (*(void (**)(void *))(*a1 + 104))(a1);
            sub_1CD86D85C((uint64_t)a1, v26);
            if (*i) {
              long long v27 = "libraries";
            }
            else {
              long long v27 = "clients";
            }
            sub_1CD86DA64(a1, (uint64_t)v27, v26 + 3, 1);
            (*(void (**)(void *))(*a1 + 112))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, v32);
          }
          ++v10;
        }
        while (v10 != v11);
      }
      (*(void (**)(void *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(void *, uint64_t))(*a1 + 128))(a1, v31);
    }
  }
  return result;
}

uint64_t sub_1CD0FA840(void *a1, uint64_t a2, void **a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  if (!result || *a3 != a3[1])
  {
    uint64_t v31 = 0;
    char v30 = 0;
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, void, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, 0, &v30, &v31);
    if (result)
    {
      unsigned int v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(void *))(*a1 + 16))(a1)) {
        unsigned int v7 = -1030792151 * ((unint64_t)((unsigned char *)a3[1] - (unsigned char *)*a3) >> 3);
      }
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v9 = v7;
        uint64_t v10 = 200;
        do
        {
          uint64_t v32 = 0;
          if ((*(unsigned int (**)(void *, unint64_t, uint64_t *))(*a1 + 32))(a1, v8, &v32))
          {
            uint64_t v11 = (char *)*a3;
            char v12 = (char *)a3[1];
            unint64_t v13 = 0x8F5C28F5C28F5C29 * ((v12 - (unsigned char *)*a3) >> 3);
            if (v13 <= v8)
            {
              unint64_t v14 = v8 + 1;
              unint64_t v15 = v8 + 1 - v13;
              unint64_t v16 = a3[2];
              if (0x8F5C28F5C28F5C29 * ((v16 - v12) >> 3) >= v15)
              {
                long long v27 = &v12[200 * v15];
                uint64_t v28 = v10 - 8 * ((v12 - (unsigned char *)*a3) >> 3);
                do
                {
                  *((void *)v12 + 6) = 0;
                  *((_OWORD *)v12 + 2) = 0uLL;
                  *((_OWORD *)v12 + 1) = 0uLL;
                  *(void *)char v12 = v12 + 16;
                  *((void *)v12 + 1) = 0x500000000;
                  *(_OWORD *)(v12 + 56) = 0uLL;
                  *(_OWORD *)(v12 + 72) = 0uLL;
                  *(_OWORD *)(v12 + 88) = 0uLL;
                  *(_OWORD *)(v12 + 104) = 0uLL;
                  *(_OWORD *)(v12 + 120) = 0uLL;
                  *(_OWORD *)(v12 + 136) = 0uLL;
                  *(_OWORD *)(v12 + 152) = 0uLL;
                  *(_OWORD *)(v12 + 168) = 0uLL;
                  *(_OWORD *)(v12 + 184) = 0uLL;
                  v12 += 200;
                  v28 -= 200;
                }
                while (v28);
                a3[1] = v27;
              }
              else
              {
                unint64_t v17 = 0x8F5C28F5C28F5C29 * ((v16 - v11) >> 3);
                uint64_t v18 = 2 * v17;
                if (2 * v17 <= v14) {
                  uint64_t v18 = v8 + 1;
                }
                if (v17 >= 0xA3D70A3D70A3D7) {
                  unint64_t v19 = 0x147AE147AE147AELL;
                }
                else {
                  unint64_t v19 = v18;
                }
                if (v19 > 0x147AE147AE147AELL) {
                  sub_1CB833614();
                }
                uint64_t v20 = (char *)operator new(200 * v19);
                uint64_t v21 = 200 * v13;
                uint64_t v22 = &v20[200 * v13];
                int64x2_t v23 = &v20[200 * v14];
                do
                {
                  unint64_t v24 = &v20[v21];
                  *((void *)v24 + 6) = 0;
                  *((_OWORD *)v24 + 2) = 0uLL;
                  *(_OWORD *)&v20[v21 + 16] = 0uLL;
                  *(void *)unint64_t v24 = &v20[v21 + 16];
                  *((void *)v24 + 1) = 0x500000000;
                  *(_OWORD *)(v24 + 56) = 0uLL;
                  *(_OWORD *)(v24 + 72) = 0uLL;
                  *(_OWORD *)(v24 + 88) = 0uLL;
                  *(_OWORD *)(v24 + 104) = 0uLL;
                  *(_OWORD *)(v24 + 120) = 0uLL;
                  *(_OWORD *)(v24 + 136) = 0uLL;
                  *(_OWORD *)(v24 + 152) = 0uLL;
                  *(_OWORD *)(v24 + 168) = 0uLL;
                  v21 += 200;
                  *(_OWORD *)(v24 + 184) = 0uLL;
                }
                while (v10 != v21);
                BOOL v25 = &v20[200 * v19];
                if (v12 == v11)
                {
                  *a3 = v22;
                  a3[1] = v23;
                  a3[2] = v25;
                }
                else
                {
                  do
                  {
                    v22 -= 200;
                    v12 -= 200;
                    sub_1CD0FCDF4(v22, (uint64_t)v12);
                  }
                  while (v12 != v11);
                  char v12 = (char *)*a3;
                  uint64_t v26 = (uint64_t)a3[1];
                  *a3 = v22;
                  a3[1] = v23;
                  for (a3[2] = v25; (char *)v26 != v12; uint64_t v26 = sub_1CD0FCCC4(v26 - 200))
                    ;
                }
                if (v12) {
                  operator delete(v12);
                }
              }
            }
            unint64_t v29 = (char *)*a3 + 200 * v8;
            (*(void (**)(void *))(*a1 + 104))(a1);
            sub_1CD86CCF8((uint64_t)a1, (uint64_t)v29);
            sub_1CD0FD17C(a1, (uint64_t)"symbols", v29 + 7);
            sub_1CD0FD17C(a1, (uint64_t)"objc-classes", v29 + 10);
            sub_1CD0FD17C(a1, (uint64_t)"objc-eh-types", v29 + 13);
            sub_1CD0FD17C(a1, (uint64_t)"objc-ivars", v29 + 16);
            sub_1CD0FD17C(a1, (uint64_t)"weak-symbols", v29 + 19);
            sub_1CD0FD17C(a1, (uint64_t)"thread-local-symbols", v29 + 22);
            (*(void (**)(void *))(*a1 + 112))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, v32);
          }
          ++v8;
          v10 += 200;
        }
        while (v8 != v9);
      }
      (*(void (**)(void *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(void *, uint64_t))(*a1 + 128))(a1, v31);
    }
  }
  return result;
}

uint64_t sub_1CD0FAD5C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  unint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CD0FADA0(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  v57[0] = 0;
  v57[1] = 0;
  v55[1] = 0;
  char v56 = v57;
  int v54 = (uint64_t *)v55;
  v55[0] = 0;
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(unsigned char **)(v4 + 24);
      unsigned int v6 = &v5[8 * *(unsigned int *)(v4 + 32)];
      v63[0] = &v64;
      v63[1] = (void *)0x500000000;
      sub_1CD47792C((unsigned int *)v63, v5, v6);
      std::string __p = (void *)v4;
      unsigned int v7 = sub_1CD86BD6C(&v54, v4, (uint64_t **)&__p);
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v7 + 5), (uint64_t)v63);
      sub_1CD86BE48((uint64_t)&v56, (unsigned __int8 *)v63[0], v63[1], (uint64_t)v63);
      if (v63[0] != &v64) {
        free(v63[0]);
      }
      v4 += 80;
    }
    while (v4 != a2);
    unint64_t v8 = v56;
    if (v56 != v57)
    {
      do
      {
        long long v64 = 0u;
        long long v65 = 0u;
        *(_OWORD *)uint64_t v63 = 0u;
        sub_1CD0FBD64((uint64_t)v63, (char *)v8[4], (char *)&v8[4][*((unsigned int *)v8 + 10)], *((unsigned int *)v8 + 10));
        uint64_t v9 = v54;
        if (v54 != (uint64_t *)v55)
        {
          do
          {
            uint64_t v10 = *((unsigned int *)v9 + 12);
            if (v10 == *((_DWORD *)v8 + 10))
            {
              if (v10)
              {
                uint64_t v11 = (unsigned __int8 *)v9[5];
                char v12 = &v11[8 * v10];
                unint64_t v13 = (unsigned __int8 *)v8[4];
                while (1)
                {
                  BOOL v14 = *v11 == *v13 && *((_DWORD *)v11 + 1) == *((_DWORD *)v13 + 1);
                  if (!v14) {
                    break;
                  }
                  v11 += 8;
                  v13 += 8;
                  if (v11 == v12) {
                    goto LABEL_17;
                  }
                }
              }
              else
              {
LABEL_17:
                uint64_t v15 = v9[4];
                char v16 = *(unsigned char *)(v15 + 23);
                if (v16 >= 0) {
                  uint64_t v17 = v9[4];
                }
                else {
                  uint64_t v17 = *(void *)v15;
                }
                if (v16 >= 0) {
                  uint64_t v18 = v16 & 0x7F;
                }
                else {
                  uint64_t v18 = *(void *)(v15 + 8);
                }
                unint64_t v19 = (void *)v65;
                if ((unint64_t)v65 >= *((void *)&v65 + 1))
                {
                  uint64_t v21 = (void *)*((void *)&v64 + 1);
                  uint64_t v22 = (uint64_t)(v65 - *((void *)&v64 + 1)) >> 4;
                  unint64_t v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 60) {
                    goto LABEL_75;
                  }
                  uint64_t v24 = *((void *)&v65 + 1) - *((void *)&v64 + 1);
                  if ((uint64_t)(*((void *)&v65 + 1) - *((void *)&v64 + 1)) >> 3 > v23) {
                    unint64_t v23 = v24 >> 3;
                  }
                  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v25 = v23;
                  }
                  if (v25)
                  {
                    if (v25 >> 60) {
                      goto LABEL_76;
                    }
                    uint64_t v26 = (char *)operator new(16 * v25);
                  }
                  else
                  {
                    uint64_t v26 = 0;
                  }
                  long long v27 = (uint64_t *)&v26[16 * v22];
                  uint64_t *v27 = v17;
                  v27[1] = v18;
                  uint64_t v28 = v27;
                  if (v19 != v21)
                  {
                    do
                    {
                      *((_OWORD *)v28 - 1) = *((_OWORD *)v19 - 1);
                      v28 -= 2;
                      v19 -= 2;
                    }
                    while (v19 != v21);
                    unint64_t v19 = (void *)*((void *)&v64 + 1);
                  }
                  uint64_t v20 = v27 + 2;
                  *((void *)&v64 + 1) = v28;
                  *((void *)&v65 + 1) = &v26[16 * v25];
                  if (v19) {
                    operator delete(v19);
                  }
                }
                else
                {
                  *(void *)long long v65 = v17;
                  v19[1] = v18;
                  uint64_t v20 = v19 + 2;
                }
                *(void *)&long long v65 = v20;
              }
            }
            unint64_t v29 = (uint64_t *)v9[1];
            if (v29)
            {
              do
              {
                char v30 = v29;
                unint64_t v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                char v30 = (uint64_t *)v9[2];
                BOOL v14 = *v30 == (void)v9;
                uint64_t v9 = v30;
              }
              while (!v14);
            }
            uint64_t v9 = v30;
          }
          while (v30 != (uint64_t *)v55);
        }
        uint64_t v32 = *((void *)&v64 + 1);
        uint64_t v31 = v65;
        unint64_t v33 = 126 - 2 * __clz((uint64_t)(v65 - *((void *)&v64 + 1)) >> 4);
        if ((void)v65 == *((void *)&v64 + 1)) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v33;
        }
        sub_1CD86C008(*((uint64_t *)&v64 + 1), (long long *)v65, v34, 1);
        unint64_t v35 = a3;
        unint64_t v36 = a3[1];
        unint64_t v37 = a3[2];
        if (v36 >= v37)
        {
          unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *a3) >> 4);
          unint64_t v40 = v39 + 1;
          if (v39 + 1 > 0x555555555555555) {
LABEL_75:
          }
            abort();
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *a3) >> 4);
          if (2 * v41 > v40) {
            unint64_t v40 = 2 * v41;
          }
          if (v41 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v40 = 0x555555555555555;
          }
          uint64_t v62 = a3 + 2;
          if (v40 > 0x555555555555555) {
LABEL_76:
          }
            sub_1CB833614();
          uint64_t v42 = 3 * v40;
          uint64_t v43 = (char *)operator new(48 * v40);
          uint64_t v44 = &v43[48 * v39];
          std::string __p = v43;
          uint64_t v59 = v44;
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v63;
          v63[0] = 0;
          v63[1] = 0;
          uint64_t v45 = v64;
          uint64_t v46 = *((void *)&v65 + 1);
          *(void *)&long long v64 = 0;
          *((void *)v44 + 2) = v45;
          *((void *)v44 + 3) = v32;
          *((void *)v44 + 4) = v31;
          *((void *)v44 + 5) = v46;
          int64x2_t v60 = v44 + 48;
          uint64_t v61 = &v43[16 * v42];
          sub_1CD0FCC18(a3, &__p);
          uint64_t v38 = a3[1];
          uint64_t v47 = v59;
          for (uint64_t i = v60; i != v47; i -= 48)
          {
            uint64_t v49 = (void *)*((void *)i - 3);
            if (v49)
            {
              *((void *)i - 2) = v49;
              operator delete(v49);
            }
            char v50 = (void *)*((void *)i - 6);
            if (v50)
            {
              *((void *)i - 5) = v50;
              operator delete(v50);
            }
          }
          if (__p) {
            operator delete(__p);
          }
          unint64_t v35 = a3;
        }
        else
        {
          *(_OWORD *)unint64_t v36 = *(_OWORD *)v63;
          *(void *)(v36 + 16) = v64;
          *(void *)(v36 + 24) = v32;
          v63[1] = 0;
          *(void *)&long long v64 = 0;
          v63[0] = 0;
          *(void *)(v36 + 32) = v31;
          *(void *)(v36 + 40) = *((void *)&v65 + 1);
          uint64_t v38 = v36 + 48;
        }
        v35[1] = v38;
        uint64_t v51 = v8[1];
        if (v51)
        {
          do
          {
            char v52 = (void **)v51;
            uint64_t v51 = (void *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            char v52 = (void **)v8[2];
            BOOL v14 = *v52 == v8;
            unint64_t v8 = v52;
          }
          while (!v14);
        }
        unint64_t v8 = v52;
      }
      while (v52 != v57);
    }
  }
  sub_1CD46392C(v55[0]);
  sub_1CD86C384(v57[0]);
}

void sub_1CD0FB238(void **a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  v132[0] = 0;
  v132[1] = 0;
  v130[1] = 0;
  uint64_t v131 = v132;
  uint64_t v129 = (uint64_t *)v130;
  v130[0] = 0;
  long long v5 = a2[1];
  *(_OWORD *)int64_t v133 = *a2;
  long long v134 = v5;
  sub_1CD0FCD5C((uint64_t)v135, (uint64_t)(a2 + 2));
  long long v6 = a2[5];
  long long v148 = a2[4];
  long long v149 = v6;
  sub_1CD0FCD5C((uint64_t)v150, (uint64_t)(a2 + 6));
  for (uint64_t i = v133[0]; v133[0] != (void *)v148; uint64_t i = v133[0])
  {
    unint64_t v8 = i[3];
    uint64_t v128 = (uint64_t *)v8;
    int v145 = (unsigned __int8 *)v8;
    uint64_t v9 = *(void *)(a3 + 24);
    if (!v9) {
      sub_1CB920400();
    }
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 **))(*(void *)v9 + 48))(v9, &v145))
    {
      uint64_t v10 = *(unsigned char **)(v8 + 16);
      uint64_t v11 = &v10[8 * *(unsigned int *)(v8 + 24)];
      int v145 = v147;
      uint64_t v146 = 0x500000000;
      sub_1CD47792C((unsigned int *)&v145, v10, v11);
      char v12 = sub_1CD86BD6C(&v129, v8, &v128);
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v12 + 5), (uint64_t)&v145);
      sub_1CD86BE48((uint64_t)&v131, v145, v146, (uint64_t)&v145);
      if (v145 != v147) {
        free(v145);
      }
    }
    sub_1CD86C3E4((uint64_t *)v133);
  }
  if (v151 == v150)
  {
    (*(void (**)(void *))(v150[0] + 32))(v150);
  }
  else if (v151)
  {
    (*(void (**)(void *))(*v151 + 40))(v151);
  }
  if ((void *)v136 == v135)
  {
    (*(void (**)(void *))(v135[0] + 32))(v135);
  }
  else if ((void)v136)
  {
    (*(void (**)(void))(*(void *)v136 + 40))();
  }
  unint64_t v13 = v131;
  if (v131 != v132)
  {
    do
    {
      v133[0] = &v134;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v144 = 0u;
      BOOL v14 = v13[4];
      uint64_t v15 = &v14[*((unsigned int *)v13 + 10)];
      v133[1] = (void *)0x500000000;
      sub_1CD86B5C4((unsigned int *)v133, (uint64_t)&v134, v14, v15);
      char v16 = v129;
      if (v129 != (uint64_t *)v130)
      {
        do
        {
          uint64_t v17 = *((unsigned int *)v16 + 12);
          if (v17 == *((_DWORD *)v13 + 10))
          {
            if (v17)
            {
              uint64_t v18 = (unsigned __int8 *)v16[5];
              unint64_t v19 = &v18[8 * v17];
              uint64_t v20 = (unsigned __int8 *)v13[4];
              while (1)
              {
                BOOL v21 = *v18 == *v20 && *((_DWORD *)v18 + 1) == *((_DWORD *)v20 + 1);
                if (!v21) {
                  break;
                }
                v18 += 8;
                v20 += 8;
                if (v18 == v19) {
                  goto LABEL_27;
                }
              }
            }
            else
            {
LABEL_27:
              uint64_t v22 = v16[4];
              switch(*(unsigned char *)(v22 + 72))
              {
                case 0:
                  if ((*(unsigned char *)(v22 + 73) & 2) != 0)
                  {
                    uint64_t v40 = *(void *)v22;
                    uint64_t v39 = *(void *)(v22 + 8);
                    unint64_t v41 = (void *)*((void *)&v142 + 1);
                    if (*((void *)&v142 + 1) >= (unint64_t)v143)
                    {
                      uint64_t v63 = (void *)v142;
                      uint64_t v64 = (uint64_t)(*((void *)&v142 + 1) - v142) >> 4;
                      unint64_t v65 = v64 + 1;
                      if ((unint64_t)(v64 + 1) >> 60) {
                        goto LABEL_203;
                      }
                      uint64_t v66 = v143 - v142;
                      if ((uint64_t)(v143 - v142) >> 3 > v65) {
                        unint64_t v65 = v66 >> 3;
                      }
                      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v67 = v65;
                      }
                      if (v67)
                      {
                        if (v67 >> 60) {
                          goto LABEL_204;
                        }
                        uint64_t v68 = (char *)operator new(16 * v67);
                      }
                      else
                      {
                        uint64_t v68 = 0;
                      }
                      unint64_t v90 = &v68[16 * v64];
                      *(void *)unint64_t v90 = v40;
                      *((void *)v90 + 1) = v39;
                      uint64_t v91 = v90;
                      if (v41 != v63)
                      {
                        do
                        {
                          *((_OWORD *)v91 - 1) = *((_OWORD *)v41 - 1);
                          v91 -= 16;
                          v41 -= 2;
                        }
                        while (v41 != v63);
                        unint64_t v41 = (void *)v142;
                      }
                      unint64_t v92 = &v68[16 * v67];
                      uint64_t v42 = v90 + 16;
                      *(void *)&long long v142 = v91;
                      *((void *)&v142 + 1) = v90 + 16;
                      *(void *)&long long v143 = v92;
                      if (v41) {
                        operator delete(v41);
                      }
                    }
                    else
                    {
                      **((void **)&v142 + 1) = v40;
                      v41[1] = v39;
                      uint64_t v42 = v41 + 2;
                    }
                    *((void *)&v142 + 1) = v42;
                  }
                  else
                  {
                    uint64_t v23 = *(void *)v22;
                    uint64_t v24 = *(void *)(v22 + 8);
                    if (*(unsigned char *)(v22 + 73))
                    {
                      uint64_t v61 = (void *)v144;
                      if ((unint64_t)v144 >= *((void *)&v144 + 1))
                      {
                        BOOL v84 = (void *)*((void *)&v143 + 1);
                        uint64_t v85 = (uint64_t)(v144 - *((void *)&v143 + 1)) >> 4;
                        unint64_t v86 = v85 + 1;
                        if ((unint64_t)(v85 + 1) >> 60) {
                          goto LABEL_203;
                        }
                        uint64_t v87 = *((void *)&v144 + 1) - *((void *)&v143 + 1);
                        if ((uint64_t)(*((void *)&v144 + 1) - *((void *)&v143 + 1)) >> 3 > v86) {
                          unint64_t v86 = v87 >> 3;
                        }
                        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v88 = v86;
                        }
                        if (v88)
                        {
                          if (v88 >> 60) {
                            goto LABEL_204;
                          }
                          uint64_t v89 = (char *)operator new(16 * v88);
                        }
                        else
                        {
                          uint64_t v89 = 0;
                        }
                        int v95 = &v89[16 * v85];
                        *(void *)int v95 = v23;
                        *((void *)v95 + 1) = v24;
                        unint64_t v96 = v95;
                        if (v61 != v84)
                        {
                          do
                          {
                            *((_OWORD *)v96 - 1) = *((_OWORD *)v61 - 1);
                            v96 -= 16;
                            v61 -= 2;
                          }
                          while (v61 != v84);
                          uint64_t v61 = (void *)*((void *)&v143 + 1);
                        }
                        uint64_t v62 = v95 + 16;
                        *((void *)&v143 + 1) = v96;
                        *(void *)&long long v144 = v95 + 16;
                        *((void *)&v144 + 1) = &v89[16 * v88];
                        if (v61) {
                          operator delete(v61);
                        }
                      }
                      else
                      {
                        *(void *)long long v144 = v23;
                        v61[1] = v24;
                        uint64_t v62 = v61 + 2;
                      }
                      *(void *)&long long v144 = v62;
                    }
                    else
                    {
                      unint64_t v25 = (void *)*((void *)&v136 + 1);
                      if (*((void *)&v136 + 1) >= (unint64_t)v137)
                      {
                        BOOL v78 = (void *)v136;
                        uint64_t v79 = (uint64_t)(*((void *)&v136 + 1) - v136) >> 4;
                        unint64_t v80 = v79 + 1;
                        if ((unint64_t)(v79 + 1) >> 60) {
                          goto LABEL_203;
                        }
                        uint64_t v81 = v137 - v136;
                        if ((uint64_t)(v137 - v136) >> 3 > v80) {
                          unint64_t v80 = v81 >> 3;
                        }
                        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v82 = v80;
                        }
                        if (v82)
                        {
                          if (v82 >> 60) {
                            goto LABEL_204;
                          }
                          BOOL v83 = (char *)operator new(16 * v82);
                        }
                        else
                        {
                          BOOL v83 = 0;
                        }
                        __int16 v93 = &v83[16 * v79];
                        *(void *)__int16 v93 = v23;
                        *((void *)v93 + 1) = v24;
                        BOOL v94 = v93;
                        if (v25 != v78)
                        {
                          do
                          {
                            *((_OWORD *)v94 - 1) = *((_OWORD *)v25 - 1);
                            v94 -= 16;
                            v25 -= 2;
                          }
                          while (v25 != v78);
                          unint64_t v25 = (void *)v136;
                        }
                        uint64_t v26 = v93 + 16;
                        *(void *)&long long v136 = v94;
                        *((void *)&v136 + 1) = v93 + 16;
                        *(void *)&long long v137 = &v83[16 * v82];
                        if (v25) {
                          operator delete(v25);
                        }
                      }
                      else
                      {
                        **((void **)&v136 + 1) = v23;
                        v25[1] = v24;
                        uint64_t v26 = v25 + 2;
                      }
                      *((void *)&v136 + 1) = v26;
                    }
                  }
                  break;
                case 1:
                  uint64_t v32 = *(void *)v22;
                  uint64_t v31 = *(void *)(v22 + 8);
                  unint64_t v33 = (void *)v138;
                  if ((unint64_t)v138 >= *((void *)&v138 + 1))
                  {
                    uint64_t v49 = (void *)*((void *)&v137 + 1);
                    uint64_t v50 = (uint64_t)(v138 - *((void *)&v137 + 1)) >> 4;
                    unint64_t v51 = v50 + 1;
                    if ((unint64_t)(v50 + 1) >> 60) {
                      goto LABEL_203;
                    }
                    uint64_t v52 = *((void *)&v138 + 1) - *((void *)&v137 + 1);
                    if ((uint64_t)(*((void *)&v138 + 1) - *((void *)&v137 + 1)) >> 3 > v51) {
                      unint64_t v51 = v52 >> 3;
                    }
                    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v53 = v51;
                    }
                    if (v53)
                    {
                      if (v53 >> 60) {
                        goto LABEL_204;
                      }
                      int v54 = (char *)operator new(16 * v53);
                    }
                    else
                    {
                      int v54 = 0;
                    }
                    unint64_t v72 = &v54[16 * v50];
                    *(void *)unint64_t v72 = v32;
                    *((void *)v72 + 1) = v31;
                    unsigned int v73 = v72;
                    if (v33 != v49)
                    {
                      do
                      {
                        *((_OWORD *)v73 - 1) = *((_OWORD *)v33 - 1);
                        v73 -= 16;
                        v33 -= 2;
                      }
                      while (v33 != v49);
                      unint64_t v33 = (void *)*((void *)&v137 + 1);
                    }
                    uint64_t v74 = &v54[16 * v53];
                    uint64_t v34 = v72 + 16;
                    *((void *)&v137 + 1) = v73;
                    *(void *)&long long v138 = v72 + 16;
                    *((void *)&v138 + 1) = v74;
                    if (v33) {
                      operator delete(v33);
                    }
                  }
                  else
                  {
                    *(void *)long long v138 = v32;
                    v33[1] = v31;
                    uint64_t v34 = v33 + 2;
                  }
                  *(void *)&long long v138 = v34;
                  break;
                case 2:
                  uint64_t v28 = *(void *)v22;
                  uint64_t v27 = *(void *)(v22 + 8);
                  unint64_t v29 = (void *)*((void *)&v139 + 1);
                  if (*((void *)&v139 + 1) >= (unint64_t)v140)
                  {
                    uint64_t v43 = (void *)v139;
                    uint64_t v44 = (uint64_t)(*((void *)&v139 + 1) - v139) >> 4;
                    unint64_t v45 = v44 + 1;
                    if ((unint64_t)(v44 + 1) >> 60) {
                      goto LABEL_203;
                    }
                    uint64_t v46 = v140 - v139;
                    if ((uint64_t)(v140 - v139) >> 3 > v45) {
                      unint64_t v45 = v46 >> 3;
                    }
                    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v47 = v45;
                    }
                    if (v47)
                    {
                      if (v47 >> 60) {
                        goto LABEL_204;
                      }
                      char v48 = (char *)operator new(16 * v47);
                    }
                    else
                    {
                      char v48 = 0;
                    }
                    uint64_t v69 = &v48[16 * v44];
                    *(void *)uint64_t v69 = v28;
                    *((void *)v69 + 1) = v27;
                    unint64_t v70 = v69;
                    if (v29 != v43)
                    {
                      do
                      {
                        *((_OWORD *)v70 - 1) = *((_OWORD *)v29 - 1);
                        v70 -= 16;
                        v29 -= 2;
                      }
                      while (v29 != v43);
                      unint64_t v29 = (void *)v139;
                    }
                    uint64_t v71 = &v48[16 * v47];
                    char v30 = v69 + 16;
                    *(void *)&long long v139 = v70;
                    *((void *)&v139 + 1) = v69 + 16;
                    *(void *)&long long v140 = v71;
                    if (v29) {
                      operator delete(v29);
                    }
                  }
                  else
                  {
                    **((void **)&v139 + 1) = v28;
                    v29[1] = v27;
                    char v30 = v29 + 2;
                  }
                  *((void *)&v139 + 1) = v30;
                  break;
                case 3:
                  uint64_t v36 = *(void *)v22;
                  uint64_t v35 = *(void *)(v22 + 8);
                  unint64_t v37 = (void *)v141;
                  if ((unint64_t)v141 >= *((void *)&v141 + 1))
                  {
                    int v55 = (void *)*((void *)&v140 + 1);
                    uint64_t v56 = (uint64_t)(v141 - *((void *)&v140 + 1)) >> 4;
                    unint64_t v57 = v56 + 1;
                    if ((unint64_t)(v56 + 1) >> 60) {
                      goto LABEL_203;
                    }
                    uint64_t v58 = *((void *)&v141 + 1) - *((void *)&v140 + 1);
                    if ((uint64_t)(*((void *)&v141 + 1) - *((void *)&v140 + 1)) >> 3 > v57) {
                      unint64_t v57 = v58 >> 3;
                    }
                    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v59 = v57;
                    }
                    if (v59)
                    {
                      if (v59 >> 60) {
                        goto LABEL_204;
                      }
                      int64x2_t v60 = (char *)operator new(16 * v59);
                    }
                    else
                    {
                      int64x2_t v60 = 0;
                    }
                    int v75 = &v60[16 * v56];
                    *(void *)int v75 = v36;
                    *((void *)v75 + 1) = v35;
                    unint64_t v76 = v75;
                    if (v37 != v55)
                    {
                      do
                      {
                        *((_OWORD *)v76 - 1) = *((_OWORD *)v37 - 1);
                        v76 -= 16;
                        v37 -= 2;
                      }
                      while (v37 != v55);
                      unint64_t v37 = (void *)*((void *)&v140 + 1);
                    }
                    int v77 = &v60[16 * v59];
                    uint64_t v38 = v75 + 16;
                    *((void *)&v140 + 1) = v76;
                    *(void *)&long long v141 = v75 + 16;
                    *((void *)&v141 + 1) = v77;
                    if (v37) {
                      operator delete(v37);
                    }
                  }
                  else
                  {
                    *(void *)long long v141 = v36;
                    v37[1] = v35;
                    uint64_t v38 = v37 + 2;
                  }
                  *(void *)&long long v141 = v38;
                  break;
                default:
                  break;
              }
            }
          }
          uint64_t v97 = (uint64_t *)v16[1];
          if (v97)
          {
            do
            {
              int v98 = v97;
              uint64_t v97 = (uint64_t *)*v97;
            }
            while (v97);
          }
          else
          {
            do
            {
              int v98 = (uint64_t *)v16[2];
              BOOL v21 = *v98 == (void)v16;
              char v16 = v98;
            }
            while (!v21);
          }
          char v16 = v98;
        }
        while (v98 != (uint64_t *)v130);
      }
      unint64_t v99 = 126 - 2 * __clz((uint64_t)(*((void *)&v136 + 1) - v136) >> 4);
      if (*((void *)&v136 + 1) == (void)v136) {
        uint64_t v100 = 0;
      }
      else {
        uint64_t v100 = v99;
      }
      sub_1CD86C008(v136, *((long long **)&v136 + 1), v100, 1);
      unint64_t v101 = 126 - 2 * __clz((uint64_t)(v138 - *((void *)&v137 + 1)) >> 4);
      if ((void)v138 == *((void *)&v137 + 1)) {
        uint64_t v102 = 0;
      }
      else {
        uint64_t v102 = v101;
      }
      sub_1CD86C008(*((uint64_t *)&v137 + 1), (long long *)v138, v102, 1);
      unint64_t v103 = 126 - 2 * __clz((uint64_t)(*((void *)&v139 + 1) - v139) >> 4);
      if (*((void *)&v139 + 1) == (void)v139) {
        uint64_t v104 = 0;
      }
      else {
        uint64_t v104 = v103;
      }
      sub_1CD86C008(v139, *((long long **)&v139 + 1), v104, 1);
      unint64_t v105 = 126 - 2 * __clz((uint64_t)(v141 - *((void *)&v140 + 1)) >> 4);
      if ((void)v141 == *((void *)&v140 + 1)) {
        uint64_t v106 = 0;
      }
      else {
        uint64_t v106 = v105;
      }
      sub_1CD86C008(*((uint64_t *)&v140 + 1), (long long *)v141, v106, 1);
      unint64_t v107 = 126 - 2 * __clz((uint64_t)(*((void *)&v142 + 1) - v142) >> 4);
      if (*((void *)&v142 + 1) == (void)v142) {
        uint64_t v108 = 0;
      }
      else {
        uint64_t v108 = v107;
      }
      sub_1CD86C008(v142, *((long long **)&v142 + 1), v108, 1);
      unint64_t v109 = 126 - 2 * __clz((uint64_t)(v144 - *((void *)&v143 + 1)) >> 4);
      if ((void)v144 == *((void *)&v143 + 1)) {
        uint64_t v110 = 0;
      }
      else {
        uint64_t v110 = v109;
      }
      sub_1CD86C008(*((uint64_t *)&v143 + 1), (long long *)v144, v110, 1);
      uint64_t v111 = a1;
      int v113 = (char *)a1[1];
      unint64_t v112 = (char *)a1[2];
      if (v113 >= v112)
      {
        unint64_t v115 = 0x8F5C28F5C28F5C29 * ((v113 - (unsigned char *)*a1) >> 3);
        unint64_t v116 = v115 + 1;
        if (v115 + 1 > 0x147AE147AE147AELL) {
LABEL_203:
        }
          abort();
        unint64_t v117 = 0x8F5C28F5C28F5C29 * ((v112 - (unsigned char *)*a1) >> 3);
        if (2 * v117 > v116) {
          unint64_t v116 = 2 * v117;
        }
        if (v117 >= 0xA3D70A3D70A3D7) {
          unint64_t v118 = 0x147AE147AE147AELL;
        }
        else {
          unint64_t v118 = v116;
        }
        if (v118)
        {
          if (v118 > 0x147AE147AE147AELL) {
LABEL_204:
          }
            sub_1CB833614();
          uint64_t v119 = (char *)operator new(200 * v118);
        }
        else
        {
          uint64_t v119 = 0;
        }
        unint64_t v120 = &v119[200 * v115];
        uint64_t v121 = &v119[200 * v118];
        sub_1CD0FCDF4(v120, (uint64_t)v133);
        unint64_t v114 = v120 + 200;
        unint64_t v123 = (char *)*a1;
        unint64_t v122 = (char *)a1[1];
        if (v122 == *a1)
        {
          *a1 = v120;
          a1[1] = v114;
          a1[2] = v121;
          uint64_t v111 = a1;
        }
        else
        {
          do
          {
            v120 -= 200;
            v122 -= 200;
            sub_1CD0FCDF4(v120, (uint64_t)v122);
          }
          while (v122 != v123);
          unint64_t v122 = (char *)*a1;
          uint64_t v126 = (uint64_t)a1[1];
          *a1 = v120;
          a1[1] = v114;
          uint64_t v111 = a1;
          a1[2] = v121;
          while ((char *)v126 != v122)
            uint64_t v126 = sub_1CD0FCCC4(v126 - 200);
        }
        if (v122) {
          operator delete(v122);
        }
      }
      else
      {
        sub_1CD0FCDF4(a1[1], (uint64_t)v133);
        unint64_t v114 = v113 + 200;
      }
      v111[1] = v114;
      if (*((void *)&v143 + 1))
      {
        *(void *)&long long v144 = *((void *)&v143 + 1);
        operator delete(*((void **)&v143 + 1));
      }
      if ((void)v142)
      {
        *((void *)&v142 + 1) = v142;
        operator delete((void *)v142);
      }
      if (*((void *)&v140 + 1))
      {
        *(void *)&long long v141 = *((void *)&v140 + 1);
        operator delete(*((void **)&v140 + 1));
      }
      if ((void)v139)
      {
        *((void *)&v139 + 1) = v139;
        operator delete((void *)v139);
      }
      if (*((void *)&v137 + 1))
      {
        *(void *)&long long v138 = *((void *)&v137 + 1);
        operator delete(*((void **)&v137 + 1));
      }
      if ((void)v136)
      {
        *((void *)&v136 + 1) = v136;
        operator delete((void *)v136);
      }
      if (v133[0] != &v134) {
        free(v133[0]);
      }
      int v124 = v13[1];
      if (v124)
      {
        do
        {
          int v125 = (void **)v124;
          int v124 = (void *)*v124;
        }
        while (v124);
      }
      else
      {
        do
        {
          int v125 = (void **)v13[2];
          BOOL v21 = *v125 == v13;
          unint64_t v13 = v125;
        }
        while (!v21);
      }
      unint64_t v13 = v125;
    }
    while (v125 != v132);
  }
  sub_1CD46392C(v130[0]);
  sub_1CD86C384(v132[0]);
}

void sub_1CD0FBD64(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a4 < 1) {
    return;
  }
  unint64_t v8 = *(unsigned char **)a1;
  unsigned int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = -*(void *)a1;
  uint64_t v10 = (char *)(*(void *)a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *(void *)(a1 + 16);
  if (a4 > (v11 - (uint64_t)v7) >> 3)
  {
    unint64_t v12 = a4 + (((char *)v7 - v8) >> 3);
    if (v12 >> 61) {
      abort();
    }
    uint64_t v13 = v11 - (void)v8;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    __srca = (uint64_t *)(*(void *)a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      if (v14 >> 61) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v24 = &v15[8 * (v9 >> 3)];
    memcpy(v24, __src, 8 * a4);
    if ((unint64_t)v9 >= 8)
    {
      uint64_t v25 = 8 * (v9 >> 3);
      do
      {
        *(void *)&v15[v25 - 8] = *(void *)&v8[v25 - 8];
        v25 -= 8;
      }
      while (v25);
      unsigned int v7 = *(uint64_t **)(a1 + 8);
      uint64_t v24 = v15;
    }
    uint64_t v26 = &v15[8 * a4 + (v9 & 0xFFFFFFFFFFFFFFF8)];
    uint64_t v27 = &v15[8 * v14];
    if (v7 != __srca) {
      memmove(v26, __srca, (char *)v7 - (char *)__srca);
    }
    uint64_t v28 = *(unsigned char **)a1;
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = &v26[(char *)v7 - (char *)__srca];
    *(void *)(a1 + 16) = v27;
    if (v28)
    {
      operator delete(v28);
    }
    return;
  }
  uint64_t v16 = ((char *)v7 - v10) >> 3;
  if (v16 >= a4)
  {
    uint64_t v17 = &__src[8 * a4];
    unint64_t v19 = *(char **)(a1 + 8);
LABEL_18:
    uint64_t v20 = &v10[8 * a4];
    BOOL v21 = (uint64_t *)&v19[-8 * a4];
    uint64_t v22 = v19;
    if (v21 < v7)
    {
      uint64_t v22 = v19;
      do
      {
        uint64_t v23 = *v21++;
        *(void *)uint64_t v22 = v23;
        v22 += 8;
      }
      while (v21 < v7);
    }
    *(void *)(a1 + 8) = v22;
    if (v19 != v20) {
      memmove(&v19[-8 * ((v19 - v20) >> 3)], v10, v19 - v20);
    }
    if (v17 != __src)
    {
      memmove(v10, __src, v17 - __src);
    }
    return;
  }
  uint64_t v17 = &__src[8 * v16];
  int64_t v18 = a3 - v17;
  if (a3 != v17) {
    memmove(*(void **)(a1 + 8), &__src[8 * v16], a3 - v17);
  }
  unint64_t v19 = (char *)v7 + v18;
  *(void *)(a1 + 8) = (char *)v7 + v18;
  if ((char *)v7 - v10 >= 1) {
    goto LABEL_18;
  }
}

uint64_t *sub_1CD0FBFBC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 48) = 0;
    *(void *)(v4 - 40) = 0;
    v4 -= 48;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    long long v6 = *(_OWORD *)(v2 + 24);
    *(void *)(v4 + 40) = *(void *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v6;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1CD0FC044(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v10 = (unsigned char *)a1[2] - v4;
  if (v10 >> 3 > v6) {
    unint64_t v6 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  if (v11)
  {
    if (v11 >> 60) {
      sub_1CB833614();
    }
    unint64_t v12 = (char *)operator new(16 * v11);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v13 = &v12[16 * v5];
  *(void *)uint64_t v13 = a2;
  *((void *)v13 + 1) = a3;
  unint64_t v14 = v13 + 16;
  if (v3 != v4)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v3 - 1);
      v13 -= 16;
      v3 -= 16;
    }
    while (v3 != v4);
    uint64_t v3 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[16 * v11];
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

uint64_t sub_1CD0FC14C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    uint64_t v5 = (_OWORD *)result;
    uint64_t v6 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = *(const void **)v8;
        size_t v10 = *(void *)(v8 + 8);
        uint64_t v8 = v6;
        uint64_t result = sub_1CC1565A8(v6, v9, v10);
        if (result)
        {
          long long v13 = *(_OWORD *)v8;
          uint64_t v11 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v5 + v11 + 16) = *(_OWORD *)((char *)v5 + v11);
            if (!v11) {
              break;
            }
            uint64_t result = sub_1CC1565A8((uint64_t)&v13, *(const void **)((char *)v5 + v11 - 16), *(void *)((char *)v5 + v11 - 8));
            v11 -= 16;
            if ((result & 1) == 0)
            {
              unint64_t v12 = (_OWORD *)((char *)v5 + v11 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v12 = v5;
LABEL_10:
          *unint64_t v12 = v13;
        }
        uint64_t v6 = v8 + 16;
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
  return result;
}

BOOL sub_1CD0FC214(BOOL result, long long *a2)
{
  if ((long long *)result != a2)
  {
    uint64_t v12 = v2;
    uint64_t v13 = v3;
    uint64_t v5 = (const void **)result;
    while (1)
    {
      uint64_t v6 = (uint64_t)(v5 + 2);
      if (v5 + 2 == (const void **)a2) {
        break;
      }
      uint64_t v7 = *v5;
      size_t v8 = (size_t)v5[1];
      v5 += 2;
      uint64_t result = sub_1CC1565A8(v6, v7, v8);
      if (result)
      {
        long long v11 = *(_OWORD *)v5;
        uint64_t v9 = v5;
        do
        {
          size_t v10 = v9 - 2;
          *(_OWORD *)uint64_t v9 = *((_OWORD *)v9 - 1);
          uint64_t result = sub_1CC1565A8((uint64_t)&v11, *(v9 - 4), (size_t)*(v9 - 3));
          uint64_t v9 = v10;
        }
        while (result);
        *(_OWORD *)size_t v10 = v11;
      }
    }
  }
  return result;
}

__n128 sub_1CD0FC2AC(long long *a1, uint64_t a2, long long *a3)
{
  BOOL v6 = sub_1CC1565A8(a2, *(const void **)a1, *((void *)a1 + 1));
  BOOL v7 = sub_1CC1565A8((uint64_t)a3, *(const void **)a2, *(void *)(a2 + 8));
  if (v6)
  {
    if (v7)
    {
      __n128 result = (__n128)*a1;
      *a1 = *a3;
LABEL_4:
      *a3 = (__int128)result;
      return result;
    }
    long long v9 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v9;
    if (sub_1CC1565A8((uint64_t)a3, *(const void **)a2, *(void *)(a2 + 8)))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *a3;
      goto LABEL_4;
    }
  }
  else if (v7)
  {
    long long v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v10;
    if (sub_1CC1565A8(a2, *(const void **)a1, *((void *)a1 + 1)))
    {
      __n128 result = (__n128)*a1;
      *a1 = *(_OWORD *)a2;
      *(__n128 *)a2 = result;
    }
  }
  return result;
}

_OWORD *sub_1CD0FC384(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2 = a2;
  long long v17 = *a1;
  if (sub_1CC1565A8((uint64_t)&v17, *((const void **)a2 - 2), *((void *)a2 - 1)))
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = (const void *)*((void *)v4 + 2);
      size_t v6 = *((void *)v4++ + 3);
    }
    while (!sub_1CC1565A8((uint64_t)&v17, v5, v6));
  }
  else
  {
    uint64_t v15 = a1 + 1;
    do
    {
      uint64_t v4 = v15;
      if (v15 >= v2) {
        break;
      }
      BOOL v16 = sub_1CC1565A8((uint64_t)&v17, *(const void **)v15, *((void *)v15 + 1));
      uint64_t v15 = v4 + 1;
    }
    while (!v16);
  }
  if (v4 < v2)
  {
    do
    {
      BOOL v7 = (const void *)*((void *)v2 - 2);
      size_t v8 = *((void *)v2-- - 1);
    }
    while (sub_1CC1565A8((uint64_t)&v17, v7, v8));
  }
  while (v4 < v2)
  {
    long long v18 = *v4;
    _OWORD *v4 = *v2;
    _OWORD *v2 = v18;
    do
    {
      long long v9 = (const void *)*((void *)v4 + 2);
      size_t v10 = *((void *)v4++ + 3);
    }
    while (!sub_1CC1565A8((uint64_t)&v17, v9, v10));
    do
    {
      long long v11 = (const void *)*((void *)v2 - 2);
      size_t v12 = *((void *)v2-- - 1);
    }
    while (sub_1CC1565A8((uint64_t)&v17, v11, v12));
  }
  uint64_t v13 = v4 - 1;
  if (v4 - 1 != a1) {
    *a1 = *v13;
  }
  *uint64_t v13 = v17;
  return v4;
}

uint64_t sub_1CD0FC48C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8);
  do
    v4 += 16;
  while (sub_1CC1565A8(v4 + a1, v5, v6));
  unint64_t v7 = a1 + v4;
  uint64_t v8 = a1 + v4 - 16;
  if (v4 == 16)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 16;
    }
    while (!sub_1CC1565A8(a2, v5, v6));
  }
  else
  {
    do
      a2 -= 16;
    while (!sub_1CC1565A8(a2, v5, v6));
  }
  if (v7 < a2)
  {
    long long v9 = (long long *)(a1 + v4);
    size_t v10 = (long long *)a2;
    do
    {
      long long v11 = *v9;
      *long long v9 = *v10;
      *size_t v10 = v11;
      do
        ++v9;
      while (sub_1CC1565A8((uint64_t)v9, v5, v6));
      do
        --v10;
      while (!sub_1CC1565A8((uint64_t)v10, v5, v6));
    }
    while (v9 < v10);
    uint64_t v8 = (uint64_t)(v9 - 1);
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(void *)uint64_t v8 = v5;
  *(void *)(v8 + 8) = v6;
  return v8;
}

BOOL sub_1CD0FC5BC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v13 = a2 - 1;
      if (sub_1CC1565A8((uint64_t)(a2 - 1), *(const void **)a1, *(void *)(a1 + 8)))
      {
        long long v14 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v13;
        *uint64_t v13 = v14;
      }
      return 1;
    case 3:
      sub_1CD0FC2AC((long long *)a1, a1 + 16, a2 - 1);
      return 1;
    case 4:
      sub_1CD0FC774(a1, a1 + 16, a1 + 32, a2 - 1);
      return 1;
    case 5:
      sub_1CD0FC818(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 1);
      return 1;
    default:
      size_t v6 = (_OWORD *)(a1 + 32);
      sub_1CD0FC2AC((long long *)a1, a1 + 16, (long long *)(a1 + 32));
      unint64_t v7 = (_OWORD *)(a1 + 48);
      if ((_OWORD *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CC1565A8((uint64_t)v7, *(const void **)v6, *((void *)v6 + 1)))
    {
      long long v15 = *v7;
      uint64_t v10 = v8;
      while (1)
      {
        uint64_t v11 = a1 + v10;
        *(_OWORD *)(a1 + v10 + 48) = *(_OWORD *)(a1 + v10 + 32);
        if (v10 == -32) {
          break;
        }
        v10 -= 16;
        if (!sub_1CC1565A8((uint64_t)&v15, *(const void **)(v11 + 16), *(void *)(v11 + 24)))
        {
          size_t v12 = (_OWORD *)(a1 + v10 + 48);
          goto LABEL_11;
        }
      }
      size_t v12 = (_OWORD *)a1;
LABEL_11:
      *size_t v12 = v15;
      if (++v9 == 8) {
        return v7 + 1 == a2;
      }
    }
    size_t v6 = v7;
    v8 += 16;
    BOOL result = 1;
    if (++v7 == a2) {
      return result;
    }
  }
}

__n128 sub_1CD0FC774(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  sub_1CD0FC2AC((long long *)a1, a2, (long long *)a3);
  if (sub_1CC1565A8((uint64_t)a4, *(const void **)a3, *(void *)(a3 + 8)))
  {
    long long v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = v9;
    if (sub_1CC1565A8(a3, *(const void **)a2, *(void *)(a2 + 8)))
    {
      __n128 v10 = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = v10;
      if (sub_1CC1565A8(a2, *(const void **)a1, *(void *)(a1 + 8)))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1CD0FC818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  sub_1CD0FC774(a1, a2, a3, (long long *)a4);
  if (sub_1CC1565A8((uint64_t)a5, *(const void **)a4, *(void *)(a4 + 8)))
  {
    long long v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *a5;
    *a5 = v11;
    if (sub_1CC1565A8(a4, *(const void **)a3, *(void *)(a3 + 8)))
    {
      long long v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (sub_1CC1565A8(a3, *(const void **)a2, *(void *)(a2 + 8)))
      {
        __n128 v13 = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = v13;
        if (sub_1CC1565A8(a2, *(const void **)a1, *(void *)(a1 + 8)))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CD0FC8E8(BOOL result, long long *a2, long long *a3)
{
  if ((long long *)result != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (long long *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      __n128 v10 = (const void **)(result + 16 * v8);
      do
      {
        __n128 result = sub_1CD0FCAF0((BOOL)v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      long long v11 = v4;
      do
      {
        __n128 result = sub_1CC1565A8((uint64_t)v11, *(const void **)v5, *((void *)v5 + 1));
        if (result)
        {
          long long v12 = *v11;
          *long long v11 = *v5;
          long long *v5 = v12;
          __n128 result = sub_1CD0FCAF0((BOOL)v5, v7, (const void **)v5);
        }
        ++v11;
      }
      while (v11 != a3);
    }
    if (v6 >= 17)
    {
      do
      {
        uint64_t v13 = 0;
        long long v25 = *v5;
        long long v14 = v5;
        do
        {
          uint64_t v15 = (uint64_t)&v14[v13 + 1];
          uint64_t v16 = (2 * v13) | 1;
          uint64_t v17 = 2 * v13 + 2;
          if (v17 < v7)
          {
            __n128 result = sub_1CC1565A8((uint64_t)&v14[v13 + 1], *(const void **)&v14[v13 + 2], *((void *)&v14[v13 + 2] + 1));
            if (result)
            {
              v15 += 16;
              uint64_t v16 = v17;
            }
          }
          *long long v14 = *(_OWORD *)v15;
          long long v14 = (_OWORD *)v15;
          uint64_t v13 = v16;
        }
        while (v16 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        if ((long long *)v15 == --v4)
        {
          *(_OWORD *)uint64_t v15 = v25;
        }
        else
        {
          *(_OWORD *)uint64_t v15 = *v4;
          long long *v4 = v25;
          uint64_t v18 = v15 - (void)v5 + 16;
          if (v18 >= 17)
          {
            unint64_t v19 = (((unint64_t)v18 >> 4) - 2) >> 1;
            uint64_t v20 = &v5[v19];
            BOOL v21 = *(const void **)v15;
            size_t v22 = *(void *)(v15 + 8);
            __n128 result = sub_1CC1565A8((uint64_t)v20, *(const void **)v15, v22);
            if (result)
            {
              do
              {
                uint64_t v23 = v20;
                *(_OWORD *)uint64_t v15 = *v20;
                if (!v19) {
                  break;
                }
                unint64_t v19 = (v19 - 1) >> 1;
                uint64_t v20 = &v5[v19];
                __n128 result = sub_1CC1565A8((uint64_t)v20, v21, v22);
                uint64_t v15 = (uint64_t)v23;
              }
              while (result);
              *(void *)uint64_t v23 = v21;
              *((void *)v23 + 1) = v22;
            }
          }
        }
      }
      while (v7-- > 2);
    }
  }
  return result;
}

BOOL sub_1CD0FCAF0(BOOL result, uint64_t a2, const void **a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    BOOL v5 = result;
    int64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v8 = ((uint64_t)a3 - result) >> 3;
      uint64_t v9 = v8 + 1;
      uint64_t v10 = result + 16 * (v8 + 1);
      uint64_t v11 = v8 + 2;
      if (v8 + 2 < a2 && sub_1CC1565A8(result + 16 * (v8 + 1), *(const void **)(v10 + 16), *(void *)(v10 + 24)))
      {
        v10 += 16;
        uint64_t v9 = v11;
      }
      long long v12 = *v4;
      size_t v13 = (size_t)v4[1];
      __n128 result = sub_1CC1565A8(v10, *v4, v13);
      if (!result)
      {
        do
        {
          long long v14 = (const void **)v10;
          *(_OWORD *)uint64_t v4 = *(_OWORD *)v10;
          if (v6 < v9) {
            break;
          }
          uint64_t v15 = (2 * v9) | 1;
          uint64_t v10 = v5 + 16 * v15;
          if (2 * v9 + 2 < a2 && sub_1CC1565A8(v5 + 16 * v15, *(const void **)(v10 + 16), *(void *)(v10 + 24)))
          {
            v10 += 16;
            uint64_t v15 = 2 * v9 + 2;
          }
          __n128 result = sub_1CC1565A8(v10, v12, v13);
          uint64_t v4 = v14;
          uint64_t v9 = v15;
        }
        while (!result);
        *long long v14 = v12;
        v14[1] = (const void *)v13;
      }
    }
  }
  return result;
}

uint64_t *sub_1CD0FCC18(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *__n128 result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD0FCCC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(void *)(a1 + 112) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(void *)(a1 + 88) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(void *)(a1 + 64) = v7;
    operator delete(v7);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CD0FCD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

__n128 sub_1CD0FCDF4(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CD41C56C((uint64_t)a1, a2);
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 104);
  a1[15] = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  a1[18] = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 152);
  a1[21] = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  __n128 result = *(__n128 *)(a2 + 176);
  *((__n128 *)a1 + 11) = result;
  a1[24] = *(void *)(a2 + 192);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  return result;
}

uint64_t sub_1CD0FCF04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  sub_1CD0FCD5C((uint64_t)v18, a3);
  sub_1CD86C87C(v20, v6, v7, v8, v9, (uint64_t)v18);
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  sub_1CD0FCD5C((uint64_t)v13, a3);
  sub_1CD86C87C(v15, v11, v10, v11, v10, (uint64_t)v13);
  sub_1CD86C588(a1, (uint64_t)v20, (uint64_t)v15);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void))(*v22 + 40))();
  }
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

uint64_t sub_1CD0FD17C(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  if (!result || *a3 != a3[1])
  {
    return sub_1CD86DA64(a1, a2, a3, 0);
  }
  return result;
}

void sub_1CD0FD210(uint64_t **a1, void *a2, void *a3, char a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v8 = v6[7];
      uint64_t v9 = v6[8];
      while (v8 != v9)
      {
        uint64_t v10 = *(const void **)v8;
        size_t v11 = *(void *)(v8 + 8);
        v8 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 0, v10, v11, (uint64_t)v6, a4);
      }
      uint64_t v12 = v6[10];
      uint64_t v13 = v6[11];
      while (v12 != v13)
      {
        long long v14 = *(const void **)v12;
        size_t v15 = *(void *)(v12 + 8);
        v12 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 1, v14, v15, (uint64_t)v6, 0);
      }
      uint64_t v16 = v6[13];
      uint64_t v17 = v6[14];
      while (v16 != v17)
      {
        uint64_t v18 = *(const void **)v16;
        size_t v19 = *(void *)(v16 + 8);
        v16 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 2, v18, v19, (uint64_t)v6, 0);
      }
      uint64_t v20 = v6[16];
      uint64_t v21 = v6[17];
      while (v20 != v21)
      {
        size_t v22 = *(const void **)v20;
        size_t v23 = *(void *)(v20 + 8);
        v20 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 3, v22, v23, (uint64_t)v6, 0);
      }
      uint64_t v24 = v6[19];
      uint64_t v25 = v6[20];
      while (v24 != v25)
      {
        uint64_t v26 = *(const void **)v24;
        size_t v27 = *(void *)(v24 + 8);
        v24 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 0, v26, v27, (uint64_t)v6, 2);
      }
      uint64_t v28 = v6[22];
      uint64_t v29 = v6[23];
      while (v28 != v29)
      {
        char v30 = *(const void **)v28;
        size_t v31 = *(void *)(v28 + 8);
        v28 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 0, v30, v31, (uint64_t)v6, 1);
      }
      v6 += 25;
    }
    while (v6 != a3);
  }
}

void **sub_1CD0FD354(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_1CD0FCCC4(v3 - 200);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1CD0FD3B0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 6);
        if (v6)
        {
          *((void *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1CD0FD42C(uint64_t *a1, char **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  if (!result || *a2 != a2[1])
  {
    uint64_t v30 = 0;
    char v29 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t *, const char *, void, void, char *, uint64_t *))(*a1 + 120))(a1, "exports", 0, 0, &v29, &v30);
    if (result)
    {
      unsigned int v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1)) {
        unsigned int v5 = 1749801491 * ((unint64_t)(a2[1] - *a2) >> 3);
      }
      if (v5)
      {
        unint64_t v6 = 0;
        uint64_t v7 = v5;
        do
        {
          uint64_t v31 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v6, &v31))
          {
            uint64_t v9 = *a2;
            uint64_t v8 = a2[1];
            uint64_t v10 = v8 - *a2;
            unint64_t v11 = 0x84BDA12F684BDA13 * (v10 >> 3);
            if (v11 <= v6)
            {
              unint64_t v12 = v6 + 1;
              unint64_t v13 = v6 + 1 - v11;
              long long v14 = a2[2];
              if (0x84BDA12F684BDA13 * ((v14 - v8) >> 3) >= v13)
              {
                bzero(a2[1], 216 * ((216 * v6 - v10) / 0xD8) + 216);
                a2[1] = &v8[216 * v13];
              }
              else
              {
                unint64_t v15 = 0x84BDA12F684BDA13 * ((v14 - v9) >> 3);
                uint64_t v16 = 2 * v15;
                if (2 * v15 <= v12) {
                  uint64_t v16 = v6 + 1;
                }
                if (v15 >= 0x97B425ED097B42) {
                  unint64_t v17 = 0x12F684BDA12F684;
                }
                else {
                  unint64_t v17 = v16;
                }
                if (v17 > 0x12F684BDA12F684) {
                  sub_1CB833614();
                }
                uint64_t v27 = 216 * v17;
                uint64_t v18 = (char *)operator new(216 * v17);
                size_t v19 = &v18[8 * (v10 >> 3)];
                uint64_t v28 = &v18[v27];
                bzero(v19, 216 * ((216 * v6 - v10) / 0xD8) + 216);
                uint64_t v20 = &v18[216 * v12];
                if (v8 == v9)
                {
                  *a2 = v19;
                  a2[1] = v20;
                  a2[2] = v28;
                }
                else
                {
                  do
                  {
                    v19 -= 216;
                    v8 -= 216;
                    sub_1CD0FDCB0(v19, (uint64_t)v8);
                  }
                  while (v8 != v9);
                  uint64_t v8 = *a2;
                  uint64_t v26 = (uint64_t)a2[1];
                  *a2 = v19;
                  a2[1] = v20;
                  a2[2] = v28;
                  while ((char *)v26 != v8)
                    uint64_t v26 = sub_1CD0FD94C(v26 - 216);
                }
                if (v8) {
                  operator delete(v8);
                }
              }
            }
            uint64_t v21 = *a2;
            uint64_t v22 = (uint64_t)&(*a2)[216 * v6];
            (*(void (**)(uint64_t *))(*a1 + 104))(a1);
            uint64_t v23 = a1[1];
            sub_1CD86FBCC(a1, (_DWORD *)v22);
            if (*(_DWORD *)(v23 + 48) == 1) {
              uint64_t v24 = "allowed-clients";
            }
            else {
              uint64_t v24 = "allowable-clients";
            }
            sub_1CD0FD17C(a1, (uint64_t)v24, (void *)(v22 + 24));
            sub_1CD0FD17C(a1, (uint64_t)"re-exports", (void *)(v22 + 48));
            sub_1CD0FD17C(a1, (uint64_t)"symbols", (void *)(v22 + 72));
            sub_1CD0FD17C(a1, (uint64_t)"objc-classes", (void *)(v22 + 96));
            if (*(_DWORD *)(v23 + 48) == 4) {
              sub_1CD0FD17C(a1, (uint64_t)"objc-eh-types", &v21[216 * v6 + 120]);
            }
            uint64_t v25 = &v21[216 * v6];
            sub_1CD0FD17C(a1, (uint64_t)"objc-ivars", (void *)v25 + 18);
            sub_1CD0FD17C(a1, (uint64_t)"weak-def-symbols", (void *)v25 + 21);
            sub_1CD0FD17C(a1, (uint64_t)"thread-local-symbols", (void *)v25 + 24);
            (*(void (**)(uint64_t *))(*a1 + 112))(a1);
            (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v31);
          }
          ++v6;
        }
        while (v6 != v7);
      }
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v30);
    }
  }
  return result;
}

uint64_t sub_1CD0FD94C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(void *)(a1 + 152) = v4;
    operator delete(v4);
  }
  unsigned int v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(void *)(a1 + 128) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(void *)(a1 + 104) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(void *)(a1 + 56) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(void *)(a1 + 32) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_1CD0FDA00(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  unsigned int v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1CD0FDA84(void **a1, const void **a2, const void **a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = (char *)*a1;
  if (a4 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)
  {
    sub_1CCC3F398(a1);
    if (a4 >> 59) {
      goto LABEL_39;
    }
    uint64_t v25 = (unsigned char *)a1[2] - (unsigned char *)*a1;
    uint64_t v26 = v25 >> 4;
    if (v25 >> 4 <= a4) {
      uint64_t v26 = a4;
    }
    unint64_t v27 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v26;
    if (v27 >> 59) {
LABEL_39:
    }
      abort();
    uint64_t v28 = (char *)operator new(32 * v27);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[32 * v27];
    if (v6 != a3)
    {
      uint64_t v29 = (uint64_t)(v28 + 8);
      uint64_t v30 = v6 + 1;
      do
      {
        uint64_t v31 = v30 - 1;
        *(void *)(v29 - 8) = *(v30 - 1);
        if (*((char *)v30 + 23) < 0)
        {
          sub_1CB8BDF7C(v29, *v30, (unint64_t)v30[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          *(void *)(v29 + 16) = v30[2];
        }
        v29 += 32;
        v30 += 4;
      }
      while (v31 + 4 != a3);
      uint64_t v28 = (char *)(v29 - 8);
    }
    a1[1] = v28;
  }
  else
  {
    uint64_t v9 = (char *)a1[1];
    unint64_t v10 = (v9 - v8) >> 5;
    if (v10 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v21 = (char *)*a1;
      }
      else
      {
        uint64_t v21 = (char *)*a1;
        do
        {
          uint64_t v22 = (const std::string *)(v6 + 1);
          uint64_t v23 = *v6;
          v6 += 4;
          uint64_t v24 = (std::string *)(v8 + 8);
          *(void *)uint64_t v8 = v23;
          v8 += 32;
          std::string::operator=(v24, v22);
          v21 += 32;
        }
        while (v6 != a3);
        uint64_t v9 = (char *)a1[1];
      }
      while (v9 != v21)
      {
        if (*(v9 - 1) < 0) {
          operator delete(*((void **)v9 - 3));
        }
        v9 -= 32;
      }
      a1[1] = v21;
    }
    else
    {
      unint64_t v11 = &a2[4 * v10];
      if (v9 != v8)
      {
        unint64_t v12 = a2;
        do
        {
          unint64_t v13 = (const std::string *)(v12 + 1);
          long long v14 = *v12;
          v12 += 4;
          unint64_t v15 = (std::string *)(v8 + 8);
          *(void *)uint64_t v8 = v14;
          v8 += 32;
          std::string::operator=(v15, v13);
        }
        while (v12 != v11);
        uint64_t v8 = (char *)a1[1];
      }
      uint64_t v16 = v8;
      if (v11 != a3)
      {
        uint64_t v17 = (uint64_t)(v8 + 8);
        uint64_t v18 = (uint64_t)&v6[4 * v10 + 1];
        uint64_t v16 = v8;
        do
        {
          uint64_t v19 = v18 - 8;
          *(void *)(v17 - 8) = *(void *)(v18 - 8);
          if (*(char *)(v18 + 23) < 0)
          {
            sub_1CB8BDF7C(v17, *(const void **)v18, *(void *)(v18 + 8));
          }
          else
          {
            long long v20 = *(_OWORD *)v18;
            *(void *)(v17 + 16) = *(void *)(v18 + 16);
            *(_OWORD *)uint64_t v17 = v20;
          }
          v17 += 32;
          v18 += 32;
          v16 += 32;
        }
        while ((const void **)(v19 + 32) != a3);
      }
      a1[1] = v16;
    }
  }
}

__n128 sub_1CD0FDCB0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  __n128 result = *(__n128 *)(a2 + 192);
  *((__n128 *)a1 + 12) = result;
  a1[26] = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return result;
}

__n128 sub_1CD0FDDD4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 15) = result;
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

void *sub_1CD0FDE98(void *result, unsigned int a2, uint64_t a3)
{
  char v3 = a2;
  uint64_t v4 = (uint64_t)result;
  *__n128 result = result + 2;
  uint64_t v5 = *(void *)(a3 + 48);
  if (v5) {
    unint64_t v6 = *(void **)(a3 + 32);
  }
  else {
    unint64_t v6 = *(void **)a3;
  }
  uint64_t v7 = *(void *)a3 + 4 * *(unsigned int *)(a3 + 8);
  uint64_t v8 = (void *)(a3 + 40);
  unint64_t v9 = a2;
  result[1] = 0x500000000;
  if ((a2 & 7) != 0) {
    uint64_t v10 = 9;
  }
  else {
    uint64_t v10 = 4;
  }
  if ((a2 & 7) != 0) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = 3;
  }
  if ((a2 & 7) != 0) {
    unsigned int v12 = 7;
  }
  else {
    unsigned int v12 = 2;
  }
  while (v5)
  {
    if (v6 == v8) {
      return result;
    }
LABEL_17:
    unint64_t v13 = (unsigned int *)v6 + 7;
    if (!v5) {
      unint64_t v13 = (unsigned int *)v6;
    }
    unsigned int v14 = *v13;
    if (v14 == 4)
    {
      uint64_t v15 = v10;
      if (v3) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v15 = v11;
      if (v14 != 3)
      {
        if (v14 == 2) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v14;
        }
      }
      if (v3)
      {
LABEL_38:
        LODWORD(v17) = 0;
LABEL_39:
        int v22 = v17;
LABEL_40:
        if ((_BYTE)v22 || v15 != 6)
        {
          uint64_t v23 = *(unsigned int *)(v4 + 8);
          if (v23 >= *(_DWORD *)(v4 + 12))
          {
            uint64_t v26 = v7;
            unsigned int v25 = v10;
            __n128 result = (void *)sub_1CD8711E8(v4, v22, v15);
            uint64_t v10 = v25;
            uint64_t v7 = v26;
          }
          else
          {
            uint64_t v24 = *(void *)v4 + 8 * v23;
            *(unsigned char *)uint64_t v24 = v22;
            *(_DWORD *)(v24 + 4) = v15;
            *(_DWORD *)(v4 + 8) = v23 + 1;
          }
        }
        while (++v22 <= 0x1F)
        {
          if ((v9 >> v22)) {
            goto LABEL_40;
          }
        }
        goto LABEL_29;
      }
    }
    uint64_t v16 = 0;
    while (v16 != 31)
    {
      uint64_t v17 = v16 + 1;
      unint64_t v18 = v9 >> v16++;
      if ((v18 & 2) != 0)
      {
        if (v17 != 0xFFFFFFFFLL) {
          goto LABEL_39;
        }
        break;
      }
    }
LABEL_29:
    if (v5)
    {
      uint64_t v19 = (void *)v6[1];
      long long v20 = v6;
      if (v19)
      {
        do
        {
          unint64_t v6 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v6 = (void *)v20[2];
          BOOL v21 = *v6 == (void)v20;
          long long v20 = v6;
        }
        while (!v21);
      }
    }
    else
    {
      unint64_t v6 = (void *)((char *)v6 + 4);
    }
  }
  if (v6 != (void *)v7) {
    goto LABEL_17;
  }
  return result;
}

const char *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 8)
  {
    if (*(void *)a1 == 0x646572657070697ALL)
    {
      if (!a3 || *(_DWORD *)(a3 + 48) != 4) {
        return "invalid platform";
      }
      int v14 = 1;
      sub_1CD86A3E8(a4, &v14);
      int v13 = 6;
      uint64_t v8 = &v13;
      goto LABEL_35;
    }
    uint64_t v5 = 0x100000005;
    BOOL v6 = *(void *)a1 == 0x736F656764697262;
  }
  else
  {
    unint64_t v7 = 0;
    switch(a2)
    {
      case 3:
        unint64_t v7 = 0x100000002;
        if (*a1 ^ 0x6F69 | *((unsigned __int8 *)a1 + 2) ^ 0x73) {
          unint64_t v7 = 0;
        }
        goto LABEL_25;
      case 4:
        if (*(_DWORD *)a1 == 1936684660) {
          unint64_t v7 = 0x100000003;
        }
        else {
          unint64_t v7 = 0;
        }
        goto LABEL_25;
      case 6:
        if (*(_DWORD *)a1 == 1868783981 && a1[2] == 30835)
        {
          unint64_t v7 = 0x100000001;
          goto LABEL_25;
        }
        int v10 = *(_DWORD *)a1 ^ 0x6D736F69 | a1[2] ^ 0x6361;
        uint64_t v5 = 0x100000006;
LABEL_20:
        BOOL v6 = v10 == 0;
        break;
      case 7:
        int v10 = *(_DWORD *)a1 ^ 0x63746177 | *(_DWORD *)((char *)a1 + 3) ^ 0x736F6863;
        uint64_t v5 = 0x100000004;
        goto LABEL_20;
      case 9:
        uint64_t v5 = 0x10000000ALL;
        BOOL v6 = (*(void *)a1 ^ 0x696B726576697264 | *((unsigned __int8 *)a1 + 8) ^ 0x74) == 0;
        break;
      default:
        goto LABEL_25;
    }
  }
  if (v6) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0;
  }
LABEL_25:
  if (v7 <= 0x100000000) {
    LODWORD(v7) = 0;
  }
  int v12 = v7;
  if (a3 && v7 == 6)
  {
    if (*(_DWORD *)(a3 + 48) != 4) {
      return "invalid platform";
    }
    goto LABEL_34;
  }
  if (v7)
  {
LABEL_34:
    uint64_t v8 = &v12;
LABEL_35:
    sub_1CD86A3E8(a4, v8);
    return 0;
  }
  return "unknown platform";
}

uint64_t llvm::yaml::ScalarBitSetTraits<llvm::MachO::ArchitectureSet,void>::bitset(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "i386", v4 & *a2)) {
    *a2 |= 1u;
  }
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "x86_64", *(_DWORD *)&v5 & ((*a2 & 2u) >> 1)))
  {
    *a2 |= 2u;
  }
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "x86_64h", *(_DWORD *)&v6 & ((*a2 & 4u) >> 2)))
  {
    *a2 |= 4u;
  }
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv4t", *(_DWORD *)&v7 & ((*a2 & 8u) >> 3)))
  {
    *a2 |= 8u;
  }
  char v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv6", *(_DWORD *)&v8 & ((*a2 & 0x10u) >> 4)))
  {
    *a2 |= 0x10u;
  }
  char v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv5", *(_DWORD *)&v9 & ((*a2 & 0x20u) >> 5)))
  {
    *a2 |= 0x20u;
  }
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv7", *(_DWORD *)&v10 & ((*a2 & 0x40u) >> 6)))
  {
    *a2 |= 0x40u;
  }
  char v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv7s", *(_DWORD *)&v11 & ((*a2 & 0x80u) >> 7)))
  {
    *a2 |= 0x80u;
  }
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv7k", *(_DWORD *)&v12 & ((*a2 & 0x100u) >> 8)))
  {
    *a2 |= 0x100u;
  }
  char v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv6m", *(_DWORD *)&v13 & ((*a2 & 0x200u) >> 9)))
  {
    *a2 |= 0x200u;
  }
  char v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv7m", *(_DWORD *)&v14 & ((*a2 & 0x400u) >> 10)))
  {
    *a2 |= 0x400u;
  }
  char v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "armv7em", *(_DWORD *)&v15 & ((*a2 & 0x800u) >> 11)))
  {
    *a2 |= 0x800u;
  }
  char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "arm64", *(_DWORD *)&v16 & ((*a2 & 0x1000u) >> 12)))
  {
    *a2 |= 0x1000u;
  }
  char v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "arm64e", *(_DWORD *)&v17 & ((*a2 & 0x2000u) >> 13)))
  {
    *a2 |= 0x2000u;
  }
  char v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "arm64_32", *(_DWORD *)&v18 & ((*a2 & 0x4000u) >> 14)))
  {
    *a2 |= 0x4000u;
  }
  char v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, void))(*(void *)a1 + 200))(a1, "arm64v8", *(_DWORD *)&v19 & ((*a2 & 0x8000u) >> 15));
  if (result) {
    *a2 |= 0x8000u;
  }
  return result;
}

const char *llvm::yaml::ScalarTraits<SwiftVersion,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a3 + 48) == 8)
  {
    if (a2)
    {
      unint64_t v4 = 0;
      char v5 = "invalid Swift ABI version.";
      while (1)
      {
        int v6 = *a1;
        if ((v6 - 48) >= 0xA)
        {
          if ((v6 - 97) >= 0x1A)
          {
            if ((v6 - 65) > 0x19) {
              return v5;
            }
            int v7 = -55;
          }
          else
          {
            int v7 = -87;
          }
        }
        else
        {
          int v7 = -48;
        }
        unsigned int v8 = v7 + v6;
        if (v8 > 9) {
          return v5;
        }
        unint64_t v9 = 10 * v4 + v8;
        if (v4 > v9 / 0xA) {
          return v5;
        }
        ++a1;
        unint64_t v4 = 10 * v4 + v8;
        if (!--a2)
        {
          if (v9 <= 0xFF) {
            goto LABEL_52;
          }
          return "invalid Swift ABI version.";
        }
      }
    }
    return "invalid Swift ABI version.";
  }
  if (a2 == 3)
  {
    if (*(_WORD *)a1 == 11825 && a1[2] == 48)
    {
      LOBYTE(v9) = 1;
      goto LABEL_52;
    }
    if (*(_WORD *)a1 == 11825 && a1[2] == 49)
    {
      LOBYTE(v9) = 2;
      goto LABEL_52;
    }
    if (*(_WORD *)a1 == 11826 && a1[2] == 48)
    {
      LOBYTE(v9) = 3;
      goto LABEL_52;
    }
    if (bswap32(*(unsigned __int16 *)a1) >> 16 == 13102 && a1[2] == 48)
    {
      LOBYTE(v9) = 4;
      goto LABEL_52;
    }
    *a4 = 0;
  }
  else
  {
    *a4 = 0;
    if (!a2) {
      return "invalid Swift ABI version.";
    }
  }
  unint64_t v13 = 0;
  uint64_t v14 = a2;
  char v5 = "invalid Swift ABI version.";
  while (1)
  {
    int v15 = *a1;
    if ((v15 - 48) < 0xA)
    {
      int v16 = -48;
      goto LABEL_36;
    }
    if ((v15 - 97) < 0x1A)
    {
      int v16 = -87;
      goto LABEL_36;
    }
    if ((v15 - 65) > 0x19) {
      break;
    }
    int v16 = -55;
LABEL_36:
    unsigned int v17 = v16 + v15;
    if (v17 > 9) {
      break;
    }
    unint64_t v9 = 10 * v13 + v17;
    if (v13 > v9 / 0xA) {
      return v5;
    }
    ++a1;
    unint64_t v13 = v9;
    if (!--v14) {
      goto LABEL_50;
    }
  }
  unint64_t v9 = v13;
LABEL_50:
  char v5 = "invalid Swift ABI version.";
  if (v9 <= 0xFF && !v14)
  {
LABEL_52:
    char v5 = 0;
    *a4 = v9;
  }
  return v5;
}

void *sub_1CD0FEC94(llvm::Module *a1, uint64_t a2)
{
  v18[0] = "agx.driver_bindings";
  __int16 v19 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, v18);
  if (NamedMetadata)
  {
    uint64_t v5 = NamedMetadata;
    uint64_t v6 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *(void *)(**(void **)(v5 + 48) + v7);
        uint64_t v10 = *(unsigned int *)(v9 + 8);
        if (*(void *)(v9 - 8 * v10))
        {
          v18[0] = 0;
          v18[0] = *(const char **)(*(void *)(v9 - 8 * v10) + 128);
          *(void *)sub_1CD0FEDE4(a2, (uint64_t *)v18) = v9;
        }
        v7 += 8;
      }
      while (v8 != v7);
    }
  }
  v18[0] = "agx.driver_parameters_dma";
  __int16 v19 = 259;
  uint64_t result = (void *)llvm::Module::getNamedMetadata(a1, v18);
  if (result)
  {
    char v12 = result;
    uint64_t v13 = *(unsigned int *)(result[6] + 8);
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 8 * v13;
      do
      {
        uint64_t v16 = *(void *)(*(void *)v12[6] + v14);
        uint64_t v17 = *(unsigned int *)(v16 + 8);
        if (*(void *)(v16 - 8 * v17))
        {
          v18[0] = 0;
          v18[0] = *(const char **)(*(void *)(v16 - 8 * v17) + 128);
          uint64_t result = (void *)sub_1CD0FEDE4(a2, (uint64_t *)v18);
          *uint64_t result = v16;
        }
        v14 += 8;
      }
      while (v15 != v14);
    }
  }
  return result;
}

uint64_t sub_1CD0FEDE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v31 = *a2;
  int v32 = 0;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    unsigned int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v9 = (void *)(*(void *)a1 + 16 * v8);
    uint64_t v10 = *v9;
    if (v4 == *v9)
    {
LABEL_34:
      unsigned int v27 = *(_DWORD *)(v6 + 16 * v8 + 8);
      uint64_t v26 = *(void *)(a1 + 24);
      return v26 + 16 * v27 + 8;
    }
    char v11 = 0;
    int v12 = 1;
    while (v10 != -4096)
    {
      if (v11) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v10 == -8192;
      }
      if (v29) {
        char v11 = v9;
      }
      int v30 = v8 + v12++;
      uint64_t v8 = v30 & v7;
      uint64_t v9 = (void *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (v4 == *v9) {
        goto LABEL_34;
      }
    }
    if (v11) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = sub_1CBFF69C0(a1, (uint64_t)&v31, &v31, v13);
  *uint64_t v14 = v31;
  *((_DWORD *)v14 + 2) = v32;
  uint64_t v15 = *a2;
  uint64_t v17 = *(uint64_t **)(a1 + 32);
  unint64_t v16 = *(void *)(a1 + 40);
  if ((unint64_t)v17 < v16)
  {
    uint64_t *v17 = v15;
    v17[1] = 0;
    unsigned int v25 = v17 + 2;
  }
  else
  {
    char v18 = *(char **)(a1 + 24);
    uint64_t v19 = ((char *)v17 - v18) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      abort();
    }
    uint64_t v21 = v16 - (void)v18;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 60) {
        sub_1CB833614();
      }
      uint64_t v23 = (char *)operator new(16 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = (uint64_t *)&v23[16 * v19];
    *uint64_t v24 = v15;
    v24[1] = 0;
    unsigned int v25 = v24 + 2;
    if (v17 != (uint64_t *)v18)
    {
      do
      {
        *((_OWORD *)v24 - 1) = *((_OWORD *)v17 - 1);
        v24 -= 2;
        v17 -= 2;
      }
      while (v17 != (uint64_t *)v18);
      uint64_t v17 = *(uint64_t **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v24;
    *(void *)(a1 + 32) = v25;
    *(void *)(a1 + 40) = &v23[16 * v22];
    if (v17) {
      operator delete(v17);
    }
  }
  *(void *)(a1 + 32) = v25;
  uint64_t v26 = *(void *)(a1 + 24);
  unsigned int v27 = (((unint64_t)v25 - v26) >> 4) - 1;
  *((_DWORD *)v14 + 2) = v27;
  return v26 + 16 * v27 + 8;
}

void *sub_1CD0FEFC4(llvm::Module *a1, uint64_t a2, uint64_t a3)
{
  v28[0] = "agx.compute_driver_bindings";
  __int16 v29 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, v28);
  if (NamedMetadata)
  {
    uint64_t v8 = NamedMetadata;
    uint64_t v9 = *(void *)(NamedMetadata + 48);
    int v27 = *(_DWORD *)(v9 + 8);
    if (v27)
    {
      unsigned int v10 = 0;
      while (1)
      {
        uint64_t v11 = *(void *)(*(void *)v9 + 8 * v10);
        uint64_t v12 = *(unsigned int *)(v11 + 8);
        uint64_t v13 = *(void *)(v11 - 8 * v12);
        if (v13)
        {
          if (*(unsigned char *)v13 == 1)
          {
            uint64_t v14 = *(void *)(v13 + 128);
            if (!*(unsigned char *)(v14 + 16))
            {
              if (a3)
              {
                if (v14 != (*(uint64_t (**)(uint64_t))(*(void *)a3 + 560))(a3)) {
                  goto LABEL_19;
                }
                LODWORD(v12) = *(_DWORD *)(v11 + 8);
              }
              int v15 = v12 - 1;
              if (v12 != 1)
              {
                uint64_t v16 = v11 + 8;
                do
                {
                  uint64_t v17 = *(void *)(v16 - 8 * *(unsigned int *)(v11 + 8));
                  uint64_t v18 = *(unsigned int *)(v17 + 8);
                  if (v18)
                  {
                    v28[0] = 0;
                    uint64_t v19 = *(void *)(v17 - 8 * v18);
                    if (v19)
                    {
                      if (*(unsigned char *)v19 == 1)
                      {
                        uint64_t v20 = *(void *)(v19 + 128);
                        if (*(unsigned __int8 *)(v20 + 16) <= 3u)
                        {
                          v28[0] = (const char *)v20;
                          *(void *)sub_1CD0FEDE4(a2, (uint64_t *)v28) = v17;
                        }
                      }
                    }
                  }
                  v16 += 8;
                  --v15;
                }
                while (v15);
              }
              if (a3) {
                break;
              }
            }
          }
        }
LABEL_19:
        if (v27 == ++v10) {
          break;
        }
        uint64_t v9 = *(void *)(v8 + 48);
      }
    }
  }
  v28[0] = "agx.driver_parameters_dma";
  __int16 v29 = 259;
  uint64_t result = (void *)llvm::Module::getNamedMetadata(a1, v28);
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v22 = *(unsigned int *)(result[6] + 8);
    if (v22)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 8 * v22;
      do
      {
        uint64_t v25 = *(void *)(*(void *)v21[6] + v23);
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        if (*(void *)(v25 - 8 * v26))
        {
          v28[0] = 0;
          v28[0] = *(const char **)(*(void *)(v25 - 8 * v26) + 128);
          uint64_t result = (void *)sub_1CD0FEDE4(a2, (uint64_t *)v28);
          *uint64_t result = v25;
        }
        v23 += 8;
      }
      while (v24 != v23);
    }
  }
  return result;
}

uint64_t sub_1CD0FF1D0(int a1)
{
  uint64_t result = 1;
  if (a1 > 2560)
  {
    if ((a1 - 2561) < 0x10) {
      return 3;
    }
    if (a1 == 2704) {
      return result;
    }
    if (a1 == 2703) {
      return 3;
    }
    return 0;
  }
  if ((a1 - 2545) >= 0x10 && (a1 - 1994) >= 2) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD0FF228(int a1)
{
  uint64_t result = 1;
  if ((a1 - 2447) > 0x17 || ((1 << (a1 + 113)) & 0x800073) == 0)
  {
    unsigned int v3 = a1 - 1989;
    if (v3 > 4 || ((1 << v3) & 0x19) == 0) {
      return 0;
    }
  }
  return result;
}

BOOL sub_1CD0FF278(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 - 32);
  if (!v1 || *(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v1 + 33) & 0x20) == 0) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 36);
  if (v2 <= 1992) {
    return v2 == 1992;
  }
  if (v2 != 2470) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  if (v4) {
    BOOL v6 = v5 == 16;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v9 = (void *)(v4 + 24);
    if (*(_DWORD *)(v4 + 32) >= 0x41u) {
      uint64_t v9 = (void *)*v9;
    }
    return *v9 == 255;
  }
  else
  {
    if (v5 != 84) {
      return 0;
    }
    uint64_t v7 = *(void *)(v4 - 32);
    if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(v4 + 72) || (*(unsigned char *)(v7 + 33) & 0x20) == 0) {
      return 0;
    }
    return *(_DWORD *)(v7 + 36) == 1268;
  }
}

uint64_t sub_1CD0FF364(int a1)
{
  if (sub_1CD0FF1D0(a1)) {
    return 2;
  }
  uint64_t result = 2;
  if (a1 > 2469)
  {
    if (a1 != 2470)
    {
      if ((a1 - 2471) < 8) {
        return result;
      }
      unsigned int v3 = a1 - 2703;
      goto LABEL_11;
    }
    return 1;
  }
  if (a1 == 2448) {
    return 1;
  }
  unsigned int v3 = a1 - 1996;
LABEL_11:
  if (v3 >= 2)
  {
    if (a1 == 2452) {
      return 2;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_1CD0FF3E4(int a1, uint64_t a2)
{
  if (a1 <= 2469)
  {
    if (a1 != 2448)
    {
      if ((a1 - 1996) < 2) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
LABEL_8:
    if (!a2) {
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  if (a1 == 2470) {
    goto LABEL_8;
  }
  if ((a1 - 2471) < 8 || (a1 - 2703) <= 1)
  {
LABEL_5:
    if (!a2) {
      return 4;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_11:
  if (a1 != 2452 || a2 >= 2) {
    return 0xFFFFFFFFLL;
  }
  return a2;
}

uint64_t sub_1CD0FF450(uint64_t **a1, int a2)
{
  uint64_t v3 = dword_1CFB328C0[a2];
  llvm::Intrinsic::getType(*a1, dword_1CFB328C0[a2], 0, 0);
  uint64_t v4 = (unsigned __int8 *)off_1E6830B58[v3];
  if (v4) {
    int v5 = (const char *)strlen(off_1E6830B58[v3]);
  }
  else {
    int v5 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*a1, v3, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)a1, v4, v5, Type, 0);
  return v7;
}

uint64_t sub_1CD0FF4EC(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 - 32);
  if (!v2 || *(unsigned char *)(v2 + 16) || *(void *)(v2 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v2 + 33) & 0x20) == 0) {
    return 0;
  }
  switch(a2)
  {
    case 11:
      unsigned int v4 = *(_DWORD *)(v2 + 36) - 2447;
      if (v4 >= 7) {
        return 0;
      }
      unsigned int v5 = 115;
      return (v5 >> v4) & 1;
    case 16:
      unsigned int v4 = *(_DWORD *)(v2 + 36) - 2712;
      if (v4 >= 0x14) {
        return 0;
      }
      unsigned int v5 = 1035519;
      return (v5 >> v4) & 1;
    case 17:
      int v7 = *(_DWORD *)(v2 + 36);
      uint64_t result = 1;
      if ((v7 - 2471) >= 8 && (v7 - 2703) >= 2 && (v7 - 1996) >= 2) {
        return 0;
      }
      return result;
    case 18:
      return sub_1CD0FF1D0(*(_DWORD *)(v2 + 36)) & 1;
    case 19:
      return llvm::GetItrKind((llvm *)*(unsigned int *)(v2 + 36)) != 0;
    case 20:
      int v8 = *(_DWORD *)(v2 + 36);
      return sub_1CB859A14(v8);
    case 21:
      return (*(_DWORD *)(v2 + 36) - 1682) < 0x8C;
    case 22:
      BOOL v6 = *(_DWORD *)(v2 + 36) == 2149;
      goto LABEL_24;
    default:
      BOOL v6 = *(_DWORD *)(v2 + 36) == dword_1CFB328C0[a2];
LABEL_24:
      uint64_t result = v6;
      break;
  }
  return result;
}

uint64_t sub_1CD0FF67C(int a1)
{
  uint64_t result = 0;
  if (a1 > 201)
  {
    if (a1 > 1821)
    {
      if (a1 <= 2424)
      {
        if (((a1 - 2131) > 0x29 || ((1 << (a1 - 83)) & 0x32000000001) == 0)
          && a1 != 1822
          && (a1 - 2374) >= 2)
        {
          return 1;
        }
        return result;
      }
      if (a1 <= 2680)
      {
        if (((a1 - 2578) > 0x33 || ((1 << (a1 - 18)) & 0xBE00000000001) == 0)
          && ((a1 - 2483) > 0x2C || ((1 << (a1 + 77)) & 0x120000000001) == 0)
          && (a1 - 2425) >= 0x13)
        {
          return 1;
        }
        return result;
      }
      if ((a1 - 2681) <= 0x18 && ((1 << (a1 - 121)) & 0x13FFFCF) != 0
        || (a1 - 2749) <= 0x36 && ((1 << (a1 + 67)) & 0x7F001000000001) != 0)
      {
        return result;
      }
      unsigned int v6 = a1 - 2842;
      if (v6 <= 7)
      {
        int v4 = 1 << v6;
        int v5 = 143;
LABEL_12:
        if ((v4 & v5) != 0) {
          return result;
        }
      }
    }
    else
    {
      if ((a1 - 202) <= 0x3D && ((1 << (a1 + 54)) & 0x3B08083000000003) != 0
        || (a1 - 273) <= 0x27 && ((1 << (a1 - 17)) & 0xD318800CA7) != 0)
      {
        return result;
      }
      unsigned int v3 = a1 - 1266;
      if (v3 <= 0xF)
      {
        int v4 = 1 << v3;
        int v5 = 32771;
        goto LABEL_12;
      }
    }
    return 1;
  }
  if (((a1 - 139) > 0x3C || ((1 << (a1 + 117)) & 0x14C000703000071FLL) == 0)
    && (a1 - 75) >= 3
    && (a1 > 0x3C || ((1 << a1) & 0x10780000000E4302) == 0))
  {
    return 1;
  }
  return result;
}

uint64_t sub_1CD0FF880(uint64_t a1, int a2)
{
  while (1)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
    if (v2 != 5) {
      break;
    }
    unsigned int v18 = *(unsigned __int16 *)(a1 + 18);
    if (v18 - 48 < 2) {
      goto LABEL_17;
    }
    if (v18 == 34)
    {
LABEL_8:
      int v4 = *(_DWORD *)(a1 + 20);
      if ((v4 & 0x40000000) != 0)
      {
        uint64_t v6 = *(void *)(a1 - 8);
        uint64_t v5 = v4 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v5 = v4 & 0x7FFFFFF;
        uint64_t v6 = a1 - 32 * v5;
      }
      int v7 = (uint64_t *)(v6 + 32);
      for (uint64_t i = 32 * v5 - 32; i; i -= 32)
      {
        uint64_t v9 = *v7;
        v7 += 4;
        if (*(unsigned char *)(v9 + 16) != 16) {
          return 0;
        }
      }
      if ((v4 & 0x40000000) == 0)
      {
        unsigned int v10 = (uint64_t *)(a1 - 32 * v5);
        goto LABEL_19;
      }
      goto LABEL_40;
    }
    int v17 = 1;
    int v3 = -23;
LABEL_16:
    if (v18 != 47) {
      goto LABEL_21;
    }
LABEL_17:
    int v11 = *(_DWORD *)(a1 + 20);
    if ((v11 & 0x40000000) == 0)
    {
      unsigned int v10 = (uint64_t *)(a1 - 32 * (v11 & 0x7FFFFFF));
      goto LABEL_19;
    }
LABEL_40:
    unsigned int v10 = *(uint64_t **)(a1 - 8);
LABEL_19:
    a1 = *v10;
  }
  if (v2 == 62) {
    goto LABEL_8;
  }
  int v3 = v2 - 28;
  if (v2 >= 0x1C)
  {
    if ((v2 & 0xFE) == 0x4C) {
      goto LABEL_17;
    }
    int v17 = 0;
    unsigned int v18 = v2 - 28;
    goto LABEL_16;
  }
  int v17 = 1;
LABEL_21:
  if (v2 < 0x11 && ((0x1000Fu >> v2) & 1) != 0) {
    return 1;
  }
  uint64_t v12 = v2 == 60 ? a1 : 0;
  if (v12 && a2 != 0)
  {
    uint64_t v14 = **(void **)(v12 - 32);
    int v15 = *(_DWORD *)(v14 + 8);
    if ((v15 & 0xFE) == 0x12) {
      int v15 = *(_DWORD *)(**(void **)(v14 + 16) + 8);
    }
    if ((v15 & 0xFFFFFF00) == 0x4000) {
      return 1;
    }
  }
  if (v17)
  {
    if (v2 == 5)
    {
      int v3 = *(unsigned __int16 *)(a1 + 18);
      goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    if (v3 == 13)
    {
      int v19 = *(_DWORD *)(a1 + 20);
      if ((v19 & 0x40000000) != 0)
      {
        uint64_t v20 = *(void **)(a1 - 8);
        if (!sub_1CD0FF880(*v20)) {
          return 0;
        }
      }
      else
      {
        uint64_t v20 = (void *)(a1 - 32 * (v19 & 0x7FFFFFF));
        if ((sub_1CD0FF880(*v20) & 1) == 0) {
          return 0;
        }
      }
      if (sub_1CD0FF880(v20[4])) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1CD0FFA48(uint64_t a1, llvm::BinaryOperator *a2)
{
  int v192 = (int)a2;
  char v2 = 0;
  v236[1] = *MEMORY[0x1E4F143B8];
  unint64_t v206 = v210;
  uint64_t v3 = a1 + 72;
  size_t v207 = v210;
  size_t v208 = (llvm::BinaryOperator *)8;
  int v209 = 0;
  uint64_t v204 = a1 + 72;
  do
  {
    uint64_t v4 = *(void *)(a1 + 80);
LABEL_3:
    if (v4 == v3)
    {
      char v17 = 1;
      goto LABEL_184;
    }
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5 + 40;
    uint64_t v7 = *(void *)(v5 + 48);
    while (1)
    {
      while (1)
      {
        if (v7 == v6)
        {
          uint64_t v4 = *(void *)(v4 + 8);
          goto LABEL_3;
        }
        uint64_t v8 = v7 - 24;
        BOOL v59 = v7 == 0;
        uint64_t v7 = *(void *)(v7 + 8);
        if (v59) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v8;
        }
        int v10 = *(unsigned __int8 *)(v9 + 16);
        unsigned int v11 = v10 - 47;
        if ((v10 & 0xFE) == 0x32 || v11 <= 1)
        {
          uint64_t v13 = *(unsigned int **)v9;
          unsigned int v14 = *(_DWORD *)(*(void *)v9 + 8);
          if (v14 == 16397) {
            goto LABEL_116;
          }
          int v15 = *(_DWORD *)(v9 + 20);
          uint64_t v16 = (v15 & 0x40000000) != 0 ? *(void *)(v9 - 8) : v9 - 32 * (v15 & 0x7FFFFFF);
          if (*(unsigned char *)(*(void *)(v16 + 32) + 16) != 16) {
            break;
          }
        }
      }
      if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
        break;
      }
      if (*(_DWORD *)(*(void *)v9 + 8) == 13)
      {
        if (v14 >> 8 >= 0x21)
        {
LABEL_116:
          if (v11 <= 1) {
            llvm::expandDivisionUpTo64Bits((llvm *)v9, a2);
          }
          llvm::expandRemainderUpTo64Bits((llvm *)v9, a2);
        }
        if (!v192)
        {
          if (v11 <= 1) {
            llvm::expandDivisionUpTo32Bits((llvm *)v9, a2);
          }
          llvm::expandRemainderUpTo32Bits((llvm *)v9, a2);
        }
        uint64_t v55 = *(void *)(v9 - 64);
        if (*(unsigned __int8 *)(v55 + 16) <= 0x1Bu) {
          uint64_t v56 = 0;
        }
        else {
          uint64_t v56 = *(void *)(v9 - 64);
        }
        uint64_t v203 = *(void *)(v9 - 32);
        if (*(unsigned __int8 *)(v203 + 16) <= 0x1Bu) {
          uint64_t v57 = 0;
        }
        else {
          uint64_t v57 = *(void *)(v9 - 32);
        }
        if (v14 >= 0x2000)
        {
          if (v56)
          {
            int v58 = *(unsigned __int8 *)(v56 + 16);
            BOOL v59 = v58 != 68 || v57 == 0;
            if (v59)
            {
              BOOL v60 = v58 != 67 || v57 == 0;
              if (!v60 && *(unsigned char *)(v57 + 16) == 67) {
                goto LABEL_89;
              }
            }
            else if (*(unsigned char *)(v57 + 16) == 68)
            {
              goto LABEL_89;
            }
          }
          int v201 = 0;
        }
        else
        {
LABEL_89:
          int v201 = 1;
        }
        uint64_t v70 = 0;
        uint64_t v71 = *(uint64_t ***)(*(void *)(*(void *)(v9 + 40) + 56) + 40);
        unint64_t v72 = *(llvm::IntegerType **)v13;
        uint64_t v73 = **(void **)v13;
        uint64_t v221 = (llvm::MDNode **)v223;
        uint64_t v222 = 0x200000000;
        unint64_t v226 = v72;
        v227 = &v235;
        size_t v228 = v236;
        uint64_t v229 = 0;
        int v230 = 0;
        __int16 v231 = 512;
        char v232 = 7;
        uint64_t v224 = 0;
        uint64_t v225 = 0;
        uint64_t v233 = 0;
        uint64_t v234 = 0;
        int v235 = &unk_1F2616E88;
        v236[0] = &unk_1F2617008;
        uint64_t v224 = *(void *)(v9 + 40);
        uint64_t v225 = v9 + 24;
        uint64_t v74 = *(unsigned __int8 **)(v9 + 48);
        v213[0] = v74;
        if (v74)
        {
          llvm::MetadataTracking::track((uint64_t)v213, v74, 2);
          uint64_t v70 = v213[0];
        }
        sub_1CB8461A4((uint64_t)&v221, 0, v70);
        if (v213[0])
        {
          int v165 = *(unsigned __int8 *)v213[0];
          if ((v165 - 4) > 0x1E)
          {
            if ((v165 - 3) >= 0xFFFFFFFE) {
              uint64_t v169 = v213[0];
            }
            else {
              uint64_t v169 = 0;
            }
            if ((v165 - 3) < 0xFFFFFFFE)
            {
              if (v165 == 3) {
                *(void *)(v213[0] + 8) = 0;
              }
              goto LABEL_131;
            }
            unint64_t v167 = v169 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v213[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v213[0] + 12)) {
              goto LABEL_131;
            }
            uint64_t v166 = *(void *)(v213[0] + 16);
            if ((v166 & 4) == 0) {
              goto LABEL_131;
            }
            unint64_t v167 = v166 & 0xFFFFFFFFFFFFFFF8;
            if (!v167) {
              goto LABEL_131;
            }
          }
          int v215 = (const char *)v213;
          sub_1CC5FA668(v167 + 16, &v215);
        }
LABEL_131:
        size_t v193 = v71;
        int v75 = (uint64_t *)(v73 + 1672);
        int v198 = (llvm::Value *)llvm::ConstantInt::get((llvm::ConstantInt *)v13, 0, 0);
        unint64_t v200 = llvm::ConstantFP::get((llvm::ConstantFP **)(v73 + 1672), v76, 1.0);
        if (v10 == 51 || (v195 = 0, uint64_t v77 = v203, v78 = v55, v10 == 48))
        {
          __int16 v217 = 257;
          uint64_t v79 = v75;
          int v195 = sub_1CC2428C0((uint64_t)&v221, v203, v55, (uint64_t)&v215);
          __int16 v217 = 257;
          unint64_t v80 = sub_1CB845F20((uint64_t)&v221, 40, (void *)v203, (uint64_t)v198, (uint64_t)&v215);
          __int16 v214 = 257;
          uint64_t v81 = sub_1CB84494C((uint64_t)&v221, (uint64_t)v198, v203, (uint64_t)v213, 0, 0);
          __int16 v212 = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v221, v80, v81, (llvm::Value *)v203, (const llvm::Twine *)v211, 0);
          __int16 v217 = 257;
          BOOL v83 = sub_1CB845F20((uint64_t)&v221, 40, (void *)v55, (uint64_t)v198, (uint64_t)&v215);
          __int16 v214 = 257;
          BOOL v84 = sub_1CB84494C((uint64_t)&v221, (uint64_t)v198, v55, (uint64_t)v213, 0, 0);
          __int16 v212 = 257;
          uint64_t v85 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v221, v83, v84, (llvm::Value *)v55, (const llvm::Twine *)v211, 0);
          uint64_t v77 = (uint64_t)Select;
          int v75 = v79;
          uint64_t v78 = (uint64_t)v85;
        }
        __int16 v217 = 257;
        uint64_t v194 = v77;
        unint64_t v86 = sub_1CC52CA10((uint64_t)&v221, v77, v75, (uint64_t)&v215);
        __int16 v217 = 257;
        size_t v197 = (llvm::ConstantFP **)v75;
        uint64_t v87 = sub_1CC52CA10((uint64_t)&v221, v78, v75, (uint64_t)&v215);
        __int16 v217 = 257;
        unint64_t v88 = sub_1CC57F858((uint64_t)&v221, (uint64_t)v87, (uint64_t *)v13, (uint64_t)&v215);
        int v215 = "sub";
        __int16 v217 = 259;
        uint64_t v199 = (llvm::Instruction *)v78;
        uint64_t v89 = sub_1CB84494C((uint64_t)&v221, v78, (uint64_t)v88, (uint64_t)&v215, 1, 0);
        unint64_t v90 = llvm::ConstantInt::get((llvm::ConstantInt *)v13, 1uLL, 0);
        unint64_t v196 = (llvm::Value *)v55;
        if ((v201 & 1) == 0 && v10 != 48 && v10 != 51)
        {
          uint64_t v91 = (uint64_t)v90;
          llvm::APFloat::APFloat((uint64_t)v218, &unk_1CFB2E308, "0x1p+32", 7uLL);
          __int16 v93 = llvm::ConstantFP::get(*v197, (llvm::LLVMContext *)v218, v92);
          __int16 v217 = 257;
          FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v221, 1, (uint64_t)v87, (uint64_t)v93, (uint64_t)&v215, 0, 0);
          __int16 v214 = 257;
          int v95 = sub_1CB84494C((uint64_t)&v221, (uint64_t)v89, v91, (uint64_t)v213, 0, 0);
          __int16 v212 = 257;
          uint64_t v89 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v221, FCmpHelper, v95, v89, (const llvm::Twine *)v211, 0);
          if ((_UNKNOWN *)v219 == &unk_1CFB2E344)
          {
            sub_1CB845718(&v220);
          }
          else if ((*(_DWORD *)(v219 + 8) - 64) <= 0xFFFFFF7F && v220)
          {
            MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
          }
        }
        __int16 v217 = 257;
        uint64_t v96 = sub_1CB843AD0((uint64_t)&v221, (uint64_t)v200, (uint64_t)v86, (uint64_t)&v215, 0);
        *(unsigned char *)(v96 + 17) |= 0xFEu;
        __int16 v217 = 257;
        uint64_t v97 = sub_1CB843C88((uint64_t)&v221, v96, (uint64_t)v87, (uint64_t)&v215, 0);
        *(unsigned char *)(v97 + 17) |= 0xFEu;
        __int16 v217 = 257;
        int v98 = (uint64_t **)sub_1CB843FF8((uint64_t)&v221, (uint64_t)v86, (uint64_t)&v215, 0);
        uint64_t v99 = sub_1CD10C39C(v193, (uint64_t *)&v221, 142, v98, v97, v87, 0);
        *(unsigned char *)(v99 + 17) |= 0xFEu;
        __int16 v217 = 257;
        if (v201)
        {
          uint64_t v100 = sub_1CB843C88((uint64_t)&v221, v96, v99, (uint64_t)&v215, 0);
          unint64_t v101 = (uint64_t *)v197;
        }
        else
        {
          uint64_t v102 = (uint64_t)v89;
          unint64_t v101 = (uint64_t *)v197;
          unint64_t v103 = sub_1CB845378((uint64_t)&v221, v102, (uint64_t *)v197, (uint64_t)&v215);
          __int16 v217 = 257;
          uint64_t v104 = (llvm::Instruction *)sub_1CB843C88((uint64_t)&v221, v96, (uint64_t)v103, (uint64_t)&v215, 0);
          *((unsigned char *)v104 + 17) |= 0xFEu;
          uint64_t v100 = sub_1CD10C39C(v193, (uint64_t *)&v221, 142, (uint64_t **)v96, v99, v104, 0);
        }
        *(unsigned char *)(v100 + 17) |= 0xFEu;
        __int16 v217 = 257;
        unint64_t v105 = sub_1CC57F858((uint64_t)&v221, v97, (uint64_t *)v13, (uint64_t)&v215);
        __int16 v217 = 257;
        size_t v202 = (size_t)v105;
        uint64_t v106 = sub_1CC52CA10((uint64_t)&v221, (uint64_t)v105, v101, (uint64_t)&v215);
        uint64_t v108 = llvm::ConstantFP::get((llvm::ConstantFP **)v101, v107, 1024.0);
        __int16 v217 = 257;
        uint64_t v109 = sub_1CB843AD0((uint64_t)&v221, (uint64_t)v200, (uint64_t)v108, (uint64_t)&v215, 0);
        __int16 v214 = 257;
        uint64_t v110 = sub_1CC52C04C((uint64_t)&v221, v100, v109, (uint64_t)v213, 0);
        *(unsigned char *)(v110 + 17) |= 0xFEu;
        __int16 v217 = 257;
        uint64_t v111 = sub_1CB843E40((uint64_t)&v221, v97, (uint64_t)v106, (uint64_t)&v215, 0);
        *(unsigned char *)(v111 + 17) |= 0xFEu;
        __int16 v217 = 257;
        uint64_t v112 = sub_1CC52C04C((uint64_t)&v221, v110, v111, (uint64_t)&v215, 0);
        *(unsigned char *)(v112 + 17) |= 0xFEu;
        __int16 v217 = 257;
        int v113 = sub_1CC57FA24((uint64_t)&v221, v112, (uint64_t *)v13, (uint64_t)&v215);
        if (v10 == 48 || v10 == 51)
        {
          __int16 v217 = 257;
          unint64_t v114 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v221, v113, v202, (uint64_t)&v215, 0, 0);
          __int16 v217 = 257;
          unint64_t v115 = sub_1CC09A1EC((uint64_t)&v221, (uint64_t)v114, v194, (uint64_t)&v215, 0, 0);
          unint64_t v116 = v196;
        }
        else
        {
          uint64_t v129 = llvm::IntegerType::get(*(llvm::IntegerType **)v13, (llvm::LLVMContext *)((v14 >> 7) & 0x1FFFFFE));
          __int16 v214 = 257;
          unint64_t v130 = (llvm::Instruction *)v202;
          unint64_t v116 = v196;
          if (*(void *)v202 != v129)
          {
            if (*(unsigned __int8 *)(v202 + 16) <= 0x14u)
            {
              uint64_t v149 = (*((uint64_t (**)(void **, uint64_t, size_t, uint64_t))*v227 + 28))(v227, 39, v202, v129);
              unint64_t v130 = (llvm::Instruction *)v149;
              if (v149 && *(unsigned __int8 *)(v149 + 16) >= 0x1Cu)
              {
                int v178 = (llvm::Instruction *)v149;
                (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v149, v213, v224, v225);
                if (v222)
                {
                  uint64_t v189 = v221;
                  unint64_t v190 = (char *)&v221[2 * v222];
                  do
                  {
                    llvm::Instruction::setMetadata(v178, *(_DWORD *)v189, v189[1]);
                    v189 += 2;
                  }
                  while (v189 != (llvm::MDNode **)v190);
                  unint64_t v116 = v196;
                }
                unint64_t v130 = v178;
              }
            }
            else
            {
              __int16 v217 = 257;
              unint64_t v130 = llvm::CastInst::Create(39, v202, v129, &v215, 0);
              (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v130, v213, v224, v225);
              if (v222)
              {
                unint64_t v170 = v221;
                uint64_t v171 = (char *)&v221[2 * v222];
                do
                {
                  llvm::Instruction::setMetadata(v130, *(_DWORD *)v170, v170[1]);
                  v170 += 2;
                }
                while (v170 != (llvm::MDNode **)v171);
              }
              unint64_t v116 = v196;
            }
          }
          __int16 v214 = 257;
          if (*(void *)v113 != v129)
          {
            if (*((unsigned __int8 *)v113 + 16) <= 0x14u)
            {
              int v113 = (llvm::Instruction *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v227
                                           + 28))(v227, 40, v113, v129);
              if (v113) {
                BOOL v151 = *((unsigned __int8 *)v113 + 16) >= 0x1Cu;
              }
              else {
                BOOL v151 = 0;
              }
              if (v151)
              {
                unint64_t v176 = v116;
                (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v113, v213, v224, v225);
                if (v222)
                {
                  int64_t v183 = v221;
                  uint64_t v184 = (char *)&v221[2 * v222];
                  do
                  {
                    llvm::Instruction::setMetadata(v113, *(_DWORD *)v183, v183[1]);
                    v183 += 2;
                  }
                  while (v183 != (llvm::MDNode **)v184);
                }
                unint64_t v116 = v176;
              }
            }
            else
            {
              unint64_t v150 = v116;
              __int16 v217 = 257;
              int v113 = llvm::CastInst::Create(40, (uint64_t)v113, v129, &v215, 0);
              (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v113, v213, v224, v225);
              if (v222)
              {
                unint64_t v172 = v221;
                int v173 = (char *)&v221[2 * v222];
                do
                {
                  llvm::Instruction::setMetadata(v113, *(_DWORD *)v172, v172[1]);
                  v172 += 2;
                }
                while (v172 != (llvm::MDNode **)v173);
              }
              unint64_t v116 = v150;
            }
          }
          __int16 v217 = 257;
          unint64_t v114 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v221, v130, (uint64_t)v113, (uint64_t)&v215, 0, 0);
          __int16 v214 = 257;
          uint64_t v152 = v194;
          if (*(void *)v194 != v129)
          {
            if (*(unsigned __int8 *)(v194 + 16) <= 0x14u)
            {
              uint64_t v152 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v227 + 28))(v227, 39, v194, v129);
              if (v152) {
                BOOL v154 = *(unsigned __int8 *)(v152 + 16) >= 0x1Cu;
              }
              else {
                BOOL v154 = 0;
              }
              if (v154)
              {
                size_t v177 = (llvm::Instruction *)v152;
                (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v152, v213, v224, v225);
                if (v222)
                {
                  int v185 = v221;
                  unint64_t v186 = (char *)&v221[2 * v222];
                  do
                  {
                    llvm::Instruction::setMetadata(v177, *(_DWORD *)v185, v185[1]);
                    v185 += 2;
                  }
                  while (v185 != (llvm::MDNode **)v186);
                }
                uint64_t v152 = (uint64_t)v177;
              }
            }
            else
            {
              __int16 v217 = 257;
              size_t v153 = llvm::CastInst::Create(39, v194, v129, &v215, 0);
              (*(void (**)(void *))(*v228 + 16))(v228);
              if (v222)
              {
                BOOL v174 = v221;
                int v175 = (char *)&v221[2 * v222];
                do
                {
                  llvm::Instruction::setMetadata(v153, *(_DWORD *)v174, v174[1]);
                  v174 += 2;
                }
                while (v174 != (llvm::MDNode **)v175);
              }
              uint64_t v152 = (uint64_t)v153;
            }
          }
          __int16 v217 = 257;
          unint64_t v115 = sub_1CC09A1EC((uint64_t)&v221, (uint64_t)v114, v152, (uint64_t)&v215, 0, 0);
          __int16 v214 = 257;
          if (*(void *)v199 != v129)
          {
            if (*((unsigned __int8 *)v199 + 16) <= 0x14u)
            {
              uint64_t v157 = (*((uint64_t (**)(void **, uint64_t))*v227 + 28))(v227, 39);
              uint64_t v199 = (llvm::Instruction *)v157;
              if (v157) {
                BOOL v158 = *(unsigned __int8 *)(v157 + 16) >= 0x1Cu;
              }
              else {
                BOOL v158 = 0;
              }
              if (v158)
              {
                (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v157, v213, v224, v225);
                if (v222)
                {
                  uint64_t v187 = v221;
                  uint64_t v188 = (char *)&v221[2 * v222];
                  do
                  {
                    llvm::Instruction::setMetadata(v199, *(_DWORD *)v187, v187[1]);
                    v187 += 2;
                  }
                  while (v187 != (llvm::MDNode **)v188);
                }
              }
            }
            else
            {
              __int16 v217 = 257;
              uint64_t v199 = llvm::CastInst::Create(39, (uint64_t)v199, v129, &v215, 0);
              (*(void (**)(void *))(*v228 + 16))(v228);
              if (v222)
              {
                int v155 = v221;
                unint64_t v156 = (char *)&v221[2 * v222];
                do
                {
                  llvm::Instruction::setMetadata(v199, *(_DWORD *)v155, v155[1]);
                  v155 += 2;
                }
                while (v155 != (llvm::MDNode **)v156);
              }
            }
          }
          __int16 v214 = 257;
          if (*(unsigned int **)v114 != v13)
          {
            if (v114[16] <= 0x14u)
            {
              unint64_t v114 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unsigned int *))*v227
                                         + 28))(v227, 38, v114, v13);
              if (v114) {
                BOOL v161 = v114[16] >= 0x1Cu;
              }
              else {
                BOOL v161 = 0;
              }
              if (v161)
              {
                (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v114, v213, v224, v225);
                if (v222)
                {
                  uint64_t v181 = v221;
                  unint64_t v182 = (char *)&v221[2 * v222];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v114, *(_DWORD *)v181, v181[1]);
                    v181 += 2;
                  }
                  while (v181 != (llvm::MDNode **)v182);
                }
              }
            }
            else
            {
              __int16 v217 = 257;
              unint64_t v114 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v114, (uint64_t)v13, &v215, 0);
              (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v114, v213, v224, v225);
              if (v222)
              {
                uint64_t v159 = v221;
                unint64_t v160 = (char *)&v221[2 * v222];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v114, *(_DWORD *)v159, v159[1]);
                  v159 += 2;
                }
                while (v159 != (llvm::MDNode **)v160);
              }
            }
          }
        }
        __int16 v217 = 257;
        unint64_t v117 = sub_1CB845F20((uint64_t)&v221, 36, v199, (uint64_t)v115, (uint64_t)&v215);
        unint64_t v118 = (unsigned __int8 *)v117;
        __int16 v214 = 257;
        if (*(unsigned int **)v117 != v13)
        {
          if (*((unsigned __int8 *)v117 + 16) <= 0x14u)
          {
            unint64_t v118 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, unsigned int *))*v227
                                       + 28))(v227, 39, v117, v13);
            if (v118) {
              BOOL v121 = v118[16] >= 0x1Cu;
            }
            else {
              BOOL v121 = 0;
            }
            if (v121)
            {
              (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v118, v213, v224, v225);
              if (v222)
              {
                uint64_t v179 = v221;
                unint64_t v180 = (char *)&v221[2 * v222];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v118, *(_DWORD *)v179, v179[1]);
                  v179 += 2;
                }
                while (v179 != (llvm::MDNode **)v180);
              }
            }
          }
          else
          {
            __int16 v217 = 257;
            unint64_t v118 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v117, (uint64_t)v13, &v215, 0);
            (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v228 + 16))(v228, v118, v213, v224, v225);
            if (v222)
            {
              uint64_t v119 = v221;
              unint64_t v120 = (char *)&v221[2 * v222];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v118, *(_DWORD *)v119, v119[1]);
                v119 += 2;
              }
              while (v119 != (llvm::MDNode **)v120);
            }
          }
        }
        __int16 v217 = 257;
        unint64_t v122 = sub_1CB84494C((uint64_t)&v221, (uint64_t)v114, (uint64_t)v118, (uint64_t)&v215, 0, 0);
        if (v10 == 51 || v10 == 48)
        {
          __int16 v217 = 257;
          unint64_t v123 = sub_1CB845F20((uint64_t)&v221, 40, v195, (uint64_t)v198, (uint64_t)&v215);
          __int16 v214 = 257;
          int v124 = sub_1CB84494C((uint64_t)&v221, (uint64_t)v198, (uint64_t)v122, (uint64_t)v213, 0, 0);
          __int16 v212 = 257;
          unint64_t v122 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v221, v123, v124, v122, (const llvm::Twine *)v211, 0);
        }
        int v125 = *(unsigned __int8 *)(v9 + 16);
        if ((v125 & 0xFE) == 0x32)
        {
          __int16 v217 = 257;
          uint64_t v126 = sub_1CC09A1EC((uint64_t)&v221, (uint64_t)v122, v203, (uint64_t)&v215, 0, 0);
          __int16 v214 = 257;
          unint64_t v122 = sub_1CB84494C((uint64_t)&v221, (uint64_t)v116, (uint64_t)v126, (uint64_t)v213, 0, 0);
          if (v10 != 48 && v10 != 51)
          {
            __int16 v217 = 257;
            uint64_t v127 = sub_1CB845F20((uint64_t)&v221, 36, v116, v203, (uint64_t)&v215);
            __int16 v214 = 257;
            uint64_t v128 = v116;
            goto LABEL_166;
          }
        }
        else if ((v125 - 47) > 1)
        {
          unint64_t v122 = 0;
        }
        else if (v10 != 48 && v10 != 51)
        {
          __int16 v217 = 257;
          uint64_t v127 = sub_1CB845F20((uint64_t)&v221, 36, v116, v203, (uint64_t)&v215);
          __int16 v214 = 257;
          uint64_t v128 = v198;
LABEL_166:
          unint64_t v122 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v221, v127, v128, v122, (const llvm::Twine *)v213, 0);
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, v122, (llvm::Value *)1);
        int v131 = *(_DWORD *)(v9 + 20);
        if ((v131 & 0x40000000) != 0)
        {
          uint64_t v133 = *(void *)(v9 - 8);
          uint64_t v132 = v131 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v132 = v131 & 0x7FFFFFF;
          uint64_t v133 = v9 - 32 * v132;
        }
        if (v132)
        {
          uint64_t v134 = 32 * v132;
          int v135 = (void **)(v133 + 16);
          do
          {
            if (*(v135 - 2))
            {
              *const char *v135 = *(v135 - 1);
              uint64_t v136 = (uint64_t)*(v135 - 1);
              if (v136) {
                *(void *)(v136 + 16) = *v135;
              }
            }
            *(v135 - 2) = 0;
            v135 += 4;
            v134 -= 32;
          }
          while (v134);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    uint64_t v18 = 0;
    int v19 = *(llvm::IntegerType **)v13;
    uint64_t v221 = (llvm::MDNode **)v223;
    uint64_t v222 = 0x200000000;
    unint64_t v226 = v19;
    v227 = &v235;
    size_t v228 = v236;
    uint64_t v229 = 0;
    int v230 = 0;
    __int16 v231 = 512;
    char v232 = 7;
    uint64_t v224 = 0;
    uint64_t v225 = 0;
    uint64_t v233 = 0;
    uint64_t v234 = 0;
    int v235 = &unk_1F2616E88;
    v236[0] = &unk_1F2617008;
    uint64_t v224 = *(void *)(v9 + 40);
    uint64_t v225 = v9 + 24;
    uint64_t v20 = *(unsigned __int8 **)(v9 + 48);
    v213[0] = v20;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)v213, v20, 2);
      uint64_t v18 = v213[0];
    }
    sub_1CB8461A4((uint64_t)&v221, 0, v18);
    if (v213[0])
    {
      int v162 = *(unsigned __int8 *)v213[0];
      if ((v162 - 4) > 0x1E)
      {
        if ((v162 - 3) >= 0xFFFFFFFE) {
          uint64_t v168 = v213[0];
        }
        else {
          uint64_t v168 = 0;
        }
        if ((v162 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v164 = v168 + 8;
LABEL_277:
          int v215 = (const char *)v213;
          sub_1CC5FA668(v164 + 16, &v215);
          goto LABEL_29;
        }
        if (v162 == 3) {
          *(void *)(v213[0] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v213[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v213[0] + 12))
      {
        uint64_t v163 = *(void *)(v213[0] + 16);
        if ((v163 & 4) != 0)
        {
          unint64_t v164 = v163 & 0xFFFFFFFFFFFFFFF8;
          if (v164) {
            goto LABEL_277;
          }
        }
      }
    }
LABEL_29:
    uint64_t v23 = (unsigned __int8 *)llvm::UndefValue::get((llvm::UndefValue *)v13, v21);
    if (v13[8])
    {
      unint64_t v24 = 0;
      do
      {
        int v25 = *(_DWORD *)(v9 + 20);
        if ((v25 & 0x40000000) != 0) {
          uint64_t v26 = *(unsigned __int8 ***)(v9 - 8);
        }
        else {
          uint64_t v26 = (unsigned __int8 **)(v9 - 32 * (v25 & 0x7FFFFFF));
        }
        int v27 = *v26;
        uint64_t v28 = *(llvm::ConstantInt **)(*(void *)v226 + 1960);
        unsigned int v29 = *(_DWORD *)(*(void *)v226 + 1968);
        unsigned int v216 = v29 >> 8;
        if (v29 >> 8 > 0x40) {
          operator new[]();
        }
        if (v29 <= 0xFF) {
          unint64_t v30 = 0;
        }
        else {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v29) + 63);
        }
        int v215 = (const char *)(v30 & v24);
        uint64_t v31 = (unsigned __int8 *)llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v215, v22);
        if (v216 >= 0x41 && v215) {
          MEMORY[0x1D25D9CB0](v215, 0x1000C8000313F17);
        }
        __int16 v217 = 257;
        unint64_t v33 = sub_1CB8445F4((uint64_t)&v221, v27, v31, (uint64_t)&v215);
        int v34 = *(_DWORD *)(v9 + 20);
        if ((v34 & 0x40000000) != 0) {
          uint64_t v35 = *(void *)(v9 - 8);
        }
        else {
          uint64_t v35 = v9 - 32 * (v34 & 0x7FFFFFF);
        }
        uint64_t v36 = *(unsigned __int8 **)(v35 + 32);
        unint64_t v37 = *(llvm::ConstantInt **)(*(void *)v226 + 1960);
        unsigned int v38 = *(_DWORD *)(*(void *)v226 + 1968);
        unsigned int v216 = v38 >> 8;
        if (v38 >> 8 > 0x40) {
          operator new[]();
        }
        if (v38 <= 0xFF) {
          unint64_t v39 = 0;
        }
        else {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
        }
        int v215 = (const char *)(v39 & v24);
        uint64_t v40 = (unsigned __int8 *)llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v215, v32);
        if (v216 >= 0x41 && v215) {
          MEMORY[0x1D25D9CB0](v215, 0x1000C8000313F17);
        }
        __int16 v217 = 257;
        unint64_t v41 = sub_1CB8445F4((uint64_t)&v221, v36, v40, (uint64_t)&v215);
        int v42 = *(unsigned __int8 *)(v9 + 16);
        if (v42 == 47)
        {
          __int16 v217 = 257;
          uint64_t v43 = sub_1CC57DA50((uint64_t)&v221, (uint64_t)v33, (uint64_t)v41, (uint64_t)&v215, 0);
        }
        else if (v42 == 48)
        {
          __int16 v217 = 257;
          uint64_t v43 = sub_1CC57DBF8((uint64_t)&v221, (uint64_t)v33, (uint64_t)v41, (uint64_t)&v215, 0);
        }
        else
        {
          __int16 v217 = 257;
          if (v42 == 51) {
            uint64_t v43 = sub_1CD5AB298((uint64_t *)&v221, v33, (uint64_t)v41, (uint64_t)&v215);
          }
          else {
            uint64_t v43 = sub_1CC57DDE0((uint64_t)&v221, (uint64_t)v33, (uint64_t)v41, (uint64_t)&v215);
          }
        }
        unint64_t v45 = (unsigned __int8 *)v43;
        uint64_t v46 = *(llvm::ConstantInt **)(*(void *)v226 + 1960);
        unsigned int v47 = *(_DWORD *)(*(void *)v226 + 1968);
        unsigned int v216 = v47 >> 8;
        if (v47 >> 8 > 0x40) {
          operator new[]();
        }
        if (v47 <= 0xFF) {
          unint64_t v48 = 0;
        }
        else {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v47) + 63);
        }
        int v215 = (const char *)(v48 & v24);
        uint64_t v49 = (unsigned __int8 *)llvm::ConstantInt::get(v46, (llvm::LLVMContext *)&v215, v44);
        if (v216 >= 0x41 && v215) {
          MEMORY[0x1D25D9CB0](v215, 0x1000C8000313F17);
        }
        __int16 v217 = 257;
        uint64_t v23 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v221, v23, v45, v49, (uint64_t)&v215);
        ++v24;
      }
      while (v24 < v13[8]);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, (llvm::Value *)v23, (llvm::Value *)1);
    uint64_t v50 = v207;
    uint64_t v51 = HIDWORD(v208);
    if (v207 != v206)
    {
      a2 = (llvm::BinaryOperator *)v208;
      uint64_t v3 = v204;
LABEL_103:
      if (3 * (int)a2 <= (4 * (HIDWORD(v208) - v209)))
      {
        if (a2 >= 0x40) {
          LODWORD(a2) = 2 * a2;
        }
        else {
          LODWORD(a2) = 128;
        }
      }
      else if ((int)a2 - HIDWORD(v208) >= a2 >> 3)
      {
        goto LABEL_105;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v206, a2);
      a2 = (llvm::BinaryOperator *)v208;
      uint64_t v50 = v207;
LABEL_105:
      int v61 = a2 - 1;
      unsigned int v62 = (a2 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v63 = &v50[8 * v62];
      uint64_t v64 = *(void *)v63;
      if (*(void *)v63 == -1)
      {
        unint64_t v65 = 0;
LABEL_119:
        if (v65) {
          uint64_t v69 = v65;
        }
        else {
          uint64_t v69 = v63;
        }
        if (*(void *)v69 != v9)
        {
          if (*(void *)v69 == -2) {
            --v209;
          }
          else {
            ++HIDWORD(v208);
          }
          *(void *)uint64_t v69 = v9;
        }
      }
      else
      {
        unint64_t v65 = 0;
        int v66 = 1;
        while (v64 != v9)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            unint64_t v65 = v63;
          }
          unsigned int v68 = v62 + v66++;
          unsigned int v62 = v68 & v61;
          uint64_t v63 = &v50[8 * (v68 & v61)];
          uint64_t v64 = *(void *)v63;
          if (*(void *)v63 == -1) {
            goto LABEL_119;
          }
        }
      }
      goto LABEL_181;
    }
    uint64_t v3 = v204;
    if (HIDWORD(v208))
    {
      uint64_t v52 = 0;
      uint64_t v53 = 8 * HIDWORD(v208);
      int v54 = v207;
      while (*v54 != v9)
      {
        if (*v54 == -2) {
          uint64_t v52 = v54;
        }
        ++v54;
        v53 -= 8;
        if (!v53)
        {
          if (!v52) {
            goto LABEL_78;
          }
          *uint64_t v52 = v9;
          --v209;
          goto LABEL_181;
        }
      }
      goto LABEL_181;
    }
LABEL_78:
    a2 = (llvm::BinaryOperator *)v208;
    if (HIDWORD(v208) >= v208) {
      goto LABEL_103;
    }
    ++HIDWORD(v208);
    *(void *)&v207[8 * v51] = v9;
LABEL_181:
    if (v221 != (llvm::MDNode **)v223) {
      free(v221);
    }
    char v17 = 0;
    char v2 = 1;
LABEL_184:
    long long v137 = (llvm::BinaryOperator **)((char *)&v208 + 4);
    if (v207 != v206) {
      long long v137 = &v208;
    }
    uint64_t v138 = *(unsigned int *)v137;
    long long v139 = v207;
    if (v138)
    {
      uint64_t v140 = 0;
      while (*(void *)&v207[v140] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v140 += 8;
        if (8 * v138 == v140) {
          goto LABEL_203;
        }
      }
      long long v139 = &v207[v140];
    }
    if (v139 != &v207[8 * v138])
    {
      uint64_t v141 = *(void *)v139;
      int v142 = *(_DWORD *)(*(void *)v139 + 20);
      if ((v142 & 0x40000000) != 0)
      {
        uint64_t v144 = *(void *)(v141 - 8);
        uint64_t v143 = v142 & 0x7FFFFFF;
        if (v143) {
          goto LABEL_195;
        }
      }
      else
      {
        uint64_t v143 = v142 & 0x7FFFFFF;
        uint64_t v144 = v141 - 32 * v143;
        if (v143)
        {
LABEL_195:
          uint64_t v145 = 32 * v143;
          uint64_t v146 = (void **)(v144 + 16);
          do
          {
            if (*(v146 - 2))
            {
              **uint64_t v146 = *(v146 - 1);
              uint64_t v147 = (uint64_t)*(v146 - 1);
              if (v147) {
                *(void *)(v147 + 16) = *v146;
              }
            }
            *(v146 - 2) = 0;
            v146 += 4;
            v145 -= 32;
          }
          while (v145);
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
LABEL_203:
    if (v207 == v206) {
      goto LABEL_204;
    }
    if (v208 < 0x21 || 4 * (HIDWORD(v208) - v209) >= v208)
    {
      memset(v207, 255, 8 * v208);
LABEL_204:
      HIDWORD(v208) = 0;
      int v209 = 0;
      continue;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v206);
  }
  while ((v17 & 1) == 0);
  if (v207 != v206) {
    free(v207);
  }
  return v2 & 1;
}

uint64_t sub_1CD1016B0(uint64_t a1, void **a2, const llvm::Instruction *a3)
{
  v202[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v184;
  unint64_t v180 = v184;
  uint64_t v181 = v184;
  uint64_t v182 = 8;
  int v183 = 0;
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v174 = a1 + 72;
  if (v4 != a1 + 72)
  {
    char v5 = 0;
    while (1)
    {
      uint64_t v6 = v4 - 24;
      uint64_t v175 = v4;
      if (!v4) {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 40;
      uint64_t v8 = *(void *)(v6 + 48);
      while (v8 != v7)
      {
        uint64_t v9 = (uint64_t **)(v8 - 24);
        BOOL v40 = v8 == 0;
        uint64_t v8 = *(void *)(v8 + 8);
        if (v40) {
          int v10 = 0;
        }
        else {
          int v10 = v9;
        }
        int v11 = *((unsigned __int8 *)v10 + 16);
        if (v11 == 57)
        {
          int v12 = *((_DWORD *)v10 + 5);
          if ((v12 & 0x40000000) != 0) {
            uint64_t v13 = (llvm **)*(v10 - 1);
          }
          else {
            uint64_t v13 = (llvm **)&v10[-4 * (v12 & 0x7FFFFFF)];
          }
          if (llvm::haveNoCommonBitsSet(*v13, v13[4], a2, 0, (llvm::AssumptionCache *)v10, a3, (const llvm::DominatorTree *)1))
          {
            uint64_t v14 = 0;
            uint64_t v15 = **v10;
            uint64_t v187 = v189;
            uint64_t v188 = 0x200000000;
            uint64_t v192 = v15;
            size_t v193 = &v201;
            uint64_t v194 = v202;
            uint64_t v195 = 0;
            int v196 = 0;
            __int16 v197 = 512;
            char v198 = 7;
            unint64_t v190 = 0;
            uint64_t v191 = 0;
            uint64_t v199 = 0;
            uint64_t v200 = 0;
            int v201 = &unk_1F2616E88;
            v202[0] = &unk_1F2617008;
            unint64_t v190 = v10[5];
            uint64_t v191 = v10 + 3;
            uint64_t v16 = (unsigned __int8 *)v10[6];
            v178[0] = v16;
            if (v16)
            {
              llvm::MetadataTracking::track((uint64_t)v178, v16, 2);
              uint64_t v14 = v178[0];
            }
            sub_1CB8461A4((uint64_t)&v187, 0, v14);
            if (v178[0])
            {
              int v58 = *(unsigned __int8 *)v178[0];
              if ((v58 - 4) > 0x1E)
              {
                if ((v58 - 3) >= 0xFFFFFFFE) {
                  uint64_t v90 = v178[0];
                }
                else {
                  uint64_t v90 = 0;
                }
                if ((v58 - 3) < 0xFFFFFFFE)
                {
                  if (v58 == 3) {
                    *(void *)(v178[0] + 8) = 0;
                  }
                  goto LABEL_18;
                }
                unint64_t v60 = v90 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v178[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v178[0] + 12)) {
                  goto LABEL_18;
                }
                uint64_t v59 = *(void *)(v178[0] + 16);
                if ((v59 & 4) == 0) {
                  goto LABEL_18;
                }
                unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
                if (!v60) {
                  goto LABEL_18;
                }
              }
              v185[0] = (const char *)v178;
              sub_1CC5FA668(v60 + 16, v185);
            }
LABEL_18:
            int v17 = *((_DWORD *)v10 + 5);
            if ((v17 & 0x40000000) != 0) {
              uint64_t v18 = (uint64_t **)*(v10 - 1);
            }
            else {
              uint64_t v18 = &v10[-4 * (v17 & 0x7FFFFFF)];
            }
            int v25 = *v18;
            uint64_t v26 = (uint64_t)v18[4];
            __int16 v186 = 257;
            int v27 = sub_1CB844A3C((uint64_t)&v187, v25, v26, (uint64_t)v185, 0, 0);
            *((unsigned char *)v27 + 17) |= 6u;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v27, (llvm::Value *)1);
            uint64_t v28 = v181;
            uint64_t v29 = HIDWORD(v182);
            if (v181 == v180)
            {
              if (HIDWORD(v182))
              {
                unint64_t v30 = 0;
                uint64_t v31 = 8 * HIDWORD(v182);
                int v32 = (uint64_t ***)v181;
                while (*v32 != v10)
                {
                  if (*v32 == (uint64_t **)-2) {
                    unint64_t v30 = v32;
                  }
                  ++v32;
                  v31 -= 8;
                  if (!v31)
                  {
                    if (v30) {
                      goto LABEL_147;
                    }
                    goto LABEL_39;
                  }
                }
                goto LABEL_144;
              }
LABEL_39:
              unsigned int v33 = v182;
              if (HIDWORD(v182) < v182) {
                goto LABEL_40;
              }
            }
            else
            {
              unsigned int v33 = v182;
            }
            if (3 * v33 <= 4 * (HIDWORD(v182) - v183))
            {
              if (v33 >= 0x40) {
                v33 *= 2;
              }
              else {
                unsigned int v33 = 128;
              }
            }
            else if (v33 - HIDWORD(v182) >= v33 >> 3)
            {
              goto LABEL_44;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v180, v33);
            unsigned int v33 = v182;
            uint64_t v28 = v181;
LABEL_44:
            unsigned int v34 = v33 - 1;
            unsigned int v35 = (v33 - 1) & ((v10 >> 4) ^ (v10 >> 9));
            uint64_t v36 = (uint64_t ***)&v28[v35];
            unint64_t v37 = *v36;
            if (*v36 != (uint64_t **)-1)
            {
              unsigned int v38 = 0;
              int v39 = 1;
              while (v37 != v10)
              {
                if (v38) {
                  BOOL v40 = 0;
                }
                else {
                  BOOL v40 = v37 == (uint64_t **)-2;
                }
                if (v40) {
                  unsigned int v38 = v36;
                }
                unsigned int v41 = v35 + v39++;
                unsigned int v35 = v41 & v34;
                uint64_t v36 = (uint64_t ***)&v28[v41 & v34];
                unint64_t v37 = *v36;
                if (*v36 == (uint64_t **)-1) {
                  goto LABEL_137;
                }
              }
              goto LABEL_144;
            }
LABEL_136:
            unsigned int v38 = 0;
LABEL_137:
            if (v38) {
              unint64_t v80 = v38;
            }
            else {
              unint64_t v80 = v36;
            }
            if (*v80 != v10)
            {
              if (*v80 == (uint64_t **)-2) {
                --v183;
              }
              else {
                ++HIDWORD(v182);
              }
              llvm::Instruction *v80 = v10;
            }
            goto LABEL_144;
          }
          int v11 = *((unsigned __int8 *)v10 + 16);
        }
        if (v11 == 56)
        {
          if (*((_DWORD *)*v10 + 2) == 8205)
          {
            int v23 = *((_DWORD *)v10 + 5);
            unint64_t v24 = (v23 & 0x40000000) != 0 ? *(v10 - 1) : (uint64_t *)&v10[-4 * (v23 & 0x7FFFFFF)];
            uint64_t v47 = v24[4];
            if (v47 && *(unsigned char *)(v47 + 16) == 16)
            {
              uint64_t v49 = (void *)(v47 + 24);
              if (*(_DWORD *)(v47 + 32) >= 0x41u) {
                uint64_t v49 = (void *)*v49;
              }
              if (*v49 == 0xFFFFLL)
              {
                uint64_t v50 = 0;
                uint64_t v51 = **v10;
                uint64_t v187 = v189;
                uint64_t v188 = 0x200000000;
                uint64_t v192 = v51;
                size_t v193 = &v201;
                uint64_t v194 = v202;
                uint64_t v195 = 0;
                int v196 = 0;
                __int16 v197 = 512;
                char v198 = 7;
                unint64_t v190 = 0;
                uint64_t v191 = 0;
                uint64_t v199 = 0;
                uint64_t v200 = 0;
                int v201 = &unk_1F2616E88;
                v202[0] = &unk_1F2617008;
                unint64_t v190 = v10[5];
                uint64_t v191 = v10 + 3;
                uint64_t v52 = (unsigned __int8 *)v10[6];
                v178[0] = v52;
                if (v52)
                {
                  llvm::MetadataTracking::track((uint64_t)v178, v52, 2);
                  uint64_t v50 = v178[0];
                }
                sub_1CB8461A4((uint64_t)&v187, 0, v50);
                if (v178[0])
                {
                  int v91 = *(unsigned __int8 *)v178[0];
                  if ((v91 - 4) > 0x1E)
                  {
                    if ((v91 - 3) >= 0xFFFFFFFE) {
                      uint64_t v113 = v178[0];
                    }
                    else {
                      uint64_t v113 = 0;
                    }
                    if ((v91 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v93 = v113 + 8;
LABEL_224:
                      v185[0] = (const char *)v178;
                      sub_1CC5FA668(v93 + 16, v185);
                      goto LABEL_78;
                    }
                    if (v91 == 3) {
                      *(void *)(v178[0] + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(v178[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v178[0] + 12))
                  {
                    uint64_t v92 = *(void *)(v178[0] + 16);
                    if ((v92 & 4) != 0)
                    {
                      unint64_t v93 = v92 & 0xFFFFFFFFFFFFFFF8;
                      if (v93) {
                        goto LABEL_224;
                      }
                    }
                  }
                }
LABEL_78:
                int v53 = *((_DWORD *)v10 + 5);
                if ((v53 & 0x40000000) != 0) {
                  int v54 = (unsigned __int8 **)*(v10 - 1);
                }
                else {
                  int v54 = (unsigned __int8 **)&v10[-4 * (v53 & 0x7FFFFFF)];
                }
                uint64_t v55 = *(void *)**v10 + 1936;
                uint64_t v56 = *v54;
                __int16 v179 = 257;
                if (*(void *)v56 != v55)
                {
                  if (v56[16] <= 0x14u)
                  {
                    uint64_t v61 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v193 + 28))(v193, 38, v56, v55);
                    uint64_t v56 = (unsigned __int8 *)v61;
                    if (v61)
                    {
                      if (*(unsigned __int8 *)(v61 + 16) >= 0x1Cu)
                      {
                        (*(void (**)(void *, uint64_t, void *, uint64_t *, void **))(*v194 + 16))(v194, v61, v178, v190, v191);
                        if (v188)
                        {
                          uint64_t v145 = (llvm::MDNode **)v187;
                          uint64_t v171 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v145, v145[1]);
                            v145 += 2;
                          }
                          while (v145 != v171);
                        }
                      }
                    }
                  }
                  else
                  {
                    __int16 v186 = 257;
                    uint64_t v56 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v56, v55, v185, 0);
                    (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, void **))(*v194 + 16))(v194, v56, v178, v190, v191);
                    if (v188)
                    {
                      uint64_t v57 = (llvm::MDNode **)v187;
                      uint64_t v166 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v57, v57[1]);
                        v57 += 2;
                      }
                      while (v57 != v166);
                    }
                  }
                }
                uint64_t v62 = (uint64_t)*v10;
                __int16 v179 = 257;
                if (*(void *)v56 != v62)
                {
                  if (v56[16] <= 0x14u)
                  {
                    uint64_t v56 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v193
                                              + 28))(v193, 39, v56, v62);
                    if (v56) {
                      BOOL v64 = v56[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v64 = 0;
                    }
                    if (v64)
                    {
                      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, void **))(*v194 + 16))(v194, v56, v178, v190, v191);
                      if (v188)
                      {
                        uint64_t v144 = (llvm::MDNode **)v187;
                        unint64_t v170 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v144, v144[1]);
                          v144 += 2;
                        }
                        while (v144 != v170);
                      }
                    }
                  }
                  else
                  {
                    __int16 v186 = 257;
                    uint64_t v56 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v56, v62, v185, 0);
                    (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, void **))(*v194 + 16))(v194, v56, v178, v190, v191);
                    if (v188)
                    {
                      uint64_t v63 = (llvm::MDNode **)v187;
                      unint64_t v167 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v63, v63[1]);
                        v63 += 2;
                      }
                      while (v63 != v167);
                    }
                  }
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, (llvm::Value *)v56, (llvm::Value *)1);
                int v65 = *((_DWORD *)v10 + 5);
                if ((v65 & 0x40000000) != 0)
                {
                  BOOL v67 = (uint64_t **)*(v10 - 1);
                  uint64_t v66 = v65 & 0x7FFFFFF;
                  if (!v66) {
                    goto LABEL_112;
                  }
                }
                else
                {
                  uint64_t v66 = v65 & 0x7FFFFFF;
                  BOOL v67 = &v10[-4 * v66];
                  if (!v66) {
                    goto LABEL_112;
                  }
                }
                uint64_t v68 = 32 * v66;
                uint64_t v69 = v67 + 2;
                do
                {
                  if (*(v69 - 2))
                  {
                    **uint64_t v69 = *(v69 - 1);
                    uint64_t v70 = (uint64_t)*(v69 - 1);
                    if (v70) {
                      *(void *)(v70 + 16) = *v69;
                    }
                  }
                  *(v69 - 2) = 0;
                  v69 += 4;
                  v68 -= 32;
                }
                while (v68);
LABEL_112:
                uint64_t v28 = v181;
                uint64_t v29 = HIDWORD(v182);
                if (v181 == v180)
                {
                  if (HIDWORD(v182))
                  {
                    unint64_t v30 = 0;
                    uint64_t v71 = 8 * HIDWORD(v182);
                    unint64_t v72 = (uint64_t ***)v181;
                    while (*v72 != v10)
                    {
                      if (*v72 == (uint64_t **)-2) {
                        unint64_t v30 = v72;
                      }
                      ++v72;
                      v71 -= 8;
                      if (!v71)
                      {
                        if (!v30) {
                          goto LABEL_120;
                        }
LABEL_147:
                        *unint64_t v30 = v10;
LABEL_148:
                        --v183;
                        goto LABEL_144;
                      }
                    }
                    goto LABEL_144;
                  }
LABEL_120:
                  unsigned int v73 = v182;
                  if (HIDWORD(v182) < v182)
                  {
LABEL_40:
                    HIDWORD(v182) = v29 + 1;
                    v28[v29] = v10;
                    goto LABEL_144;
                  }
                }
                else
                {
                  unsigned int v73 = v182;
                }
                if (3 * v73 <= 4 * (HIDWORD(v182) - v183))
                {
                  if (v73 >= 0x40) {
                    v73 *= 2;
                  }
                  else {
                    unsigned int v73 = 128;
                  }
LABEL_244:
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v180, v73);
                  unsigned int v73 = v182;
                  uint64_t v28 = v181;
                  goto LABEL_125;
                }
                if (v73 - HIDWORD(v182) < v73 >> 3) {
                  goto LABEL_244;
                }
LABEL_125:
                unsigned int v74 = v73 - 1;
                unsigned int v75 = (v73 - 1) & ((v10 >> 4) ^ (v10 >> 9));
                uint64_t v36 = (uint64_t ***)&v28[v75];
                unint64_t v76 = *v36;
                if (*v36 == (uint64_t **)-1) {
                  goto LABEL_136;
                }
                unsigned int v38 = 0;
                int v77 = 1;
                while (v76 != v10)
                {
                  if (v38) {
                    BOOL v78 = 0;
                  }
                  else {
                    BOOL v78 = v76 == (uint64_t **)-2;
                  }
                  if (v78) {
                    unsigned int v38 = v36;
                  }
                  unsigned int v79 = v75 + v77++;
                  unsigned int v75 = v79 & v74;
                  uint64_t v36 = (uint64_t ***)&v28[v79 & v74];
                  unint64_t v76 = *v36;
                  if (*v36 == (uint64_t **)-1) {
                    goto LABEL_137;
                  }
                }
LABEL_144:
                if (v187 != v189) {
                  free(v187);
                }
                char v5 = 1;
              }
            }
          }
        }
        else if (v11 == 55 && *((_DWORD *)*v10 + 2) == 8205)
        {
          int v19 = *((_DWORD *)v10 + 5);
          if ((v19 & 0x40000000) != 0)
          {
            uint64_t v20 = (uint64_t **)*(v10 - 1);
            uint64_t v21 = *v20;
            unsigned int v22 = *((unsigned __int8 *)*v20 + 16);
            if (v22 > 0x1B)
            {
LABEL_56:
              int v42 = v20[4];
              if (*((unsigned char *)v42 + 16) != 16) {
                int v42 = 0;
              }
              if (v22 == 53)
              {
                uint64_t v43 = v21[1];
                if (v43)
                {
                  if (!*(void *)(v43 + 8) && v42 != 0)
                  {
                    int v45 = *((_DWORD *)v21 + 5);
                    uint64_t v46 = (v45 & 0x40000000) != 0 ? (uint64_t *)*(v21 - 1) : &v21[-4 * (v45 & 0x7FFFFFF)];
                    uint64_t v81 = v46[4];
                    if (v81 && *(unsigned char *)(v81 + 16) == 16)
                    {
                      BOOL v83 = (void *)(v81 + 24);
                      if (*(_DWORD *)(v81 + 32) >= 0x41u) {
                        BOOL v83 = (void *)*v83;
                      }
                      if (*v83 == 16)
                      {
                        BOOL v84 = v42 + 3;
                        if (*((_DWORD *)v42 + 8) >= 0x41u) {
                          BOOL v84 = (void *)*v84;
                        }
                        if (*v84 == 16)
                        {
                          uint64_t v85 = 0;
                          uint64_t v86 = **v10;
                          uint64_t v187 = v189;
                          uint64_t v188 = 0x200000000;
                          uint64_t v192 = v86;
                          size_t v193 = &v201;
                          uint64_t v194 = v202;
                          uint64_t v195 = 0;
                          int v196 = 0;
                          __int16 v197 = 512;
                          char v198 = 7;
                          unint64_t v190 = 0;
                          uint64_t v191 = 0;
                          uint64_t v199 = 0;
                          uint64_t v200 = 0;
                          int v201 = &unk_1F2616E88;
                          v202[0] = &unk_1F2617008;
                          unint64_t v190 = v10[5];
                          uint64_t v191 = v10 + 3;
                          uint64_t v87 = (unsigned __int8 *)v10[6];
                          v178[0] = v87;
                          if (v87)
                          {
                            llvm::MetadataTracking::track((uint64_t)v178, v87, 2);
                            uint64_t v85 = v178[0];
                          }
                          sub_1CB8461A4((uint64_t)&v187, 0, v85);
                          if (v178[0])
                          {
                            int v138 = *(unsigned __int8 *)v178[0];
                            if ((v138 - 4) > 0x1E)
                            {
                              if ((v138 - 3) >= 0xFFFFFFFE) {
                                uint64_t v143 = v178[0];
                              }
                              else {
                                uint64_t v143 = 0;
                              }
                              if ((v138 - 3) < 0xFFFFFFFE)
                              {
                                if (v138 == 3) {
                                  *(void *)(v178[0] + 8) = 0;
                                }
                                goto LABEL_164;
                              }
                              unint64_t v140 = v143 + 8;
                            }
                            else
                            {
                              if ((*(unsigned char *)(v178[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v178[0] + 12)) {
                                goto LABEL_164;
                              }
                              uint64_t v139 = *(void *)(v178[0] + 16);
                              if ((v139 & 4) == 0) {
                                goto LABEL_164;
                              }
                              unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFF8;
                              if (!v140) {
                                goto LABEL_164;
                              }
                            }
                            v185[0] = (const char *)v178;
                            sub_1CC5FA668(v140 + 16, v185);
                          }
LABEL_164:
                          int v88 = *((_DWORD *)v21 + 5);
                          if ((v88 & 0x40000000) != 0) {
                            uint64_t v89 = (unsigned __int8 **)*(v21 - 1);
                          }
                          else {
                            uint64_t v89 = (unsigned __int8 **)&v21[-4 * (v88 & 0x7FFFFFF)];
                          }
                          uint64_t v94 = *(void *)**v10 + 1936;
                          int v95 = *v89;
                          __int16 v179 = 257;
                          if (*(void *)v95 != v94)
                          {
                            if (v95[16] > 0x14u)
                            {
                              __int16 v186 = 257;
                              uint64_t v96 = llvm::CastInst::Create(38, (uint64_t)v95, v94, v185, 0);
                              (*(void (**)(void *))(*v194 + 16))(v194);
                              if (v188)
                              {
                                uint64_t v141 = (llvm::MDNode **)v187;
                                int v162 = (char *)v187 + 16 * v188;
                                do
                                {
                                  uint64_t v168 = v141;
                                  llvm::Instruction::setMetadata(v96, *(_DWORD *)v141, v141[1]);
                                  uint64_t v141 = v168 + 2;
                                }
                                while (v168 + 2 != (llvm::MDNode **)v162);
                              }
                              goto LABEL_191;
                            }
                            uint64_t v97 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v193 + 28))(v193, 38, v95, v94);
                            int v95 = (unsigned __int8 *)v97;
                            if (v97 && *(unsigned __int8 *)(v97 + 16) >= 0x1Cu)
                            {
                              uint64_t v96 = (llvm::Instruction *)v97;
                              (*(void (**)(void *, uint64_t, void *, uint64_t *, void **))(*v194 + 16))(v194, v97, v178, v190, v191);
                              if (v188)
                              {
                                uint64_t v147 = (llvm::MDNode **)v187;
                                int v165 = (char *)v187 + 16 * v188;
                                do
                                {
                                  int v173 = v147;
                                  llvm::Instruction::setMetadata(v96, *(_DWORD *)v147, v147[1]);
                                  uint64_t v147 = v173 + 2;
                                }
                                while (v173 + 2 != (llvm::MDNode **)v165);
                              }
LABEL_191:
                              int v95 = (unsigned __int8 *)v96;
                            }
                          }
                          uint64_t v98 = (uint64_t)*v10;
                          __int16 v179 = 257;
                          if (*(void *)v95 != v98)
                          {
                            if (v95[16] > 0x14u)
                            {
                              __int16 v186 = 257;
                              uint64_t v99 = llvm::CastInst::Create(40, (uint64_t)v95, v98, v185, 0);
                              (*(void (**)(void *))(*v194 + 16))(v194);
                              if (v188)
                              {
                                int v142 = (llvm::MDNode **)v187;
                                uint64_t v163 = (char *)v187 + 16 * v188;
                                do
                                {
                                  uint64_t v169 = v142;
                                  llvm::Instruction::setMetadata(v99, *(_DWORD *)v142, v142[1]);
                                  int v142 = v169 + 2;
                                }
                                while (v169 + 2 != (llvm::MDNode **)v163);
                              }
                              goto LABEL_197;
                            }
                            int v95 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v193
                                                      + 28))(v193, 40, v95, v98);
                            if (v95) {
                              BOOL v100 = v95[16] >= 0x1Cu;
                            }
                            else {
                              BOOL v100 = 0;
                            }
                            if (v100)
                            {
                              uint64_t v99 = (llvm::Instruction *)v95;
                              (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, void **))(*v194 + 16))(v194, v95, v178, v190, v191);
                              if (v188)
                              {
                                uint64_t v146 = (llvm::MDNode **)v187;
                                unint64_t v164 = (char *)v187 + 16 * v188;
                                do
                                {
                                  unint64_t v172 = v146;
                                  llvm::Instruction::setMetadata(v99, *(_DWORD *)v146, v146[1]);
                                  uint64_t v146 = v172 + 2;
                                }
                                while (v172 + 2 != (llvm::MDNode **)v164);
                              }
LABEL_197:
                              int v95 = (unsigned __int8 *)v99;
                            }
                          }
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, (llvm::Value *)v95, (llvm::Value *)1);
                          int v101 = *((_DWORD *)v10 + 5);
                          if ((v101 & 0x40000000) != 0)
                          {
                            unint64_t v103 = (uint64_t **)*(v10 - 1);
                            uint64_t v102 = v101 & 0x7FFFFFF;
                            if (v102) {
                              goto LABEL_204;
                            }
                          }
                          else
                          {
                            uint64_t v102 = v101 & 0x7FFFFFF;
                            unint64_t v103 = &v10[-4 * v102];
                            if (v102)
                            {
LABEL_204:
                              uint64_t v104 = 32 * v102;
                              unint64_t v105 = v103 + 2;
                              do
                              {
                                if (*(v105 - 2))
                                {
                                  **unint64_t v105 = *(v105 - 1);
                                  uint64_t v106 = (uint64_t)*(v105 - 1);
                                  if (v106) {
                                    *(void *)(v106 + 16) = *v105;
                                  }
                                }
                                *(v105 - 2) = 0;
                                v105 += 4;
                                v104 -= 32;
                              }
                              while (v104);
                            }
                          }
                          unint64_t v107 = v181;
                          uint64_t v108 = HIDWORD(v182);
                          if (v181 == v180)
                          {
                            if (HIDWORD(v182))
                            {
                              uint64_t v109 = 0;
                              uint64_t v110 = 8 * HIDWORD(v182);
                              uint64_t v111 = (uint64_t ***)v181;
                              while (*v111 != v10)
                              {
                                if (*v111 == (uint64_t **)-2) {
                                  uint64_t v109 = v111;
                                }
                                ++v111;
                                v110 -= 8;
                                if (!v110)
                                {
                                  if (!v109) {
                                    goto LABEL_217;
                                  }
                                  void *v109 = v10;
                                  --v183;
                                  goto LABEL_253;
                                }
                              }
                              goto LABEL_253;
                            }
LABEL_217:
                            unsigned int v112 = v182;
                            if (HIDWORD(v182) < v182)
                            {
                              ++HIDWORD(v182);
                              *(void *)&v181[8 * v108] = v10;
LABEL_253:
                              unint64_t v123 = v181;
                              unsigned int v124 = v182;
                              uint64_t v125 = HIDWORD(v182);
                              if (v181 != v180) {
                                goto LABEL_263;
                              }
                              if (!HIDWORD(v182))
                              {
LABEL_261:
                                if (v182 > HIDWORD(v182))
                                {
                                  ++HIDWORD(v182);
                                  *(void *)&v181[8 * v125] = v21;
                                  goto LABEL_144;
                                }
LABEL_263:
                                if (3 * (int)v182 <= (4 * (HIDWORD(v182) - v183)))
                                {
                                  if (v182 >= 0x40) {
                                    unsigned int v124 = 2 * v182;
                                  }
                                  else {
                                    unsigned int v124 = 128;
                                  }
                                }
                                else if ((int)v182 - HIDWORD(v182) >= v182 >> 3)
                                {
                                  goto LABEL_265;
                                }
                                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v180, v124);
                                unsigned int v124 = v182;
                                unint64_t v123 = v181;
LABEL_265:
                                unsigned int v129 = v124 - 1;
                                unsigned int v130 = (v124 - 1) & ((v21 >> 4) ^ (v21 >> 9));
                                int v131 = &v123[8 * v130];
                                uint64_t v132 = *(uint64_t **)v131;
                                if (*(void *)v131 == -1)
                                {
                                  uint64_t v133 = 0;
LABEL_277:
                                  if (v133) {
                                    long long v137 = v133;
                                  }
                                  else {
                                    long long v137 = v131;
                                  }
                                  if (*(uint64_t **)v137 != v21)
                                  {
                                    if (*(void *)v137 == -2) {
                                      --v183;
                                    }
                                    else {
                                      ++HIDWORD(v182);
                                    }
                                    *(void *)long long v137 = v21;
                                  }
                                }
                                else
                                {
                                  uint64_t v133 = 0;
                                  int v134 = 1;
                                  while (v132 != v21)
                                  {
                                    if (v133) {
                                      BOOL v135 = 0;
                                    }
                                    else {
                                      BOOL v135 = v132 == (uint64_t *)-2;
                                    }
                                    if (v135) {
                                      uint64_t v133 = v131;
                                    }
                                    unsigned int v136 = v130 + v134++;
                                    unsigned int v130 = v136 & v129;
                                    int v131 = &v123[8 * (v136 & v129)];
                                    uint64_t v132 = *(uint64_t **)v131;
                                    if (*(void *)v131 == -1) {
                                      goto LABEL_277;
                                    }
                                  }
                                }
                                goto LABEL_144;
                              }
                              uint64_t v126 = 0;
                              uint64_t v127 = 8 * HIDWORD(v182);
                              uint64_t v128 = (uint64_t **)v181;
                              while (*v128 != v21)
                              {
                                if (*v128 == (uint64_t *)-2) {
                                  uint64_t v126 = v128;
                                }
                                ++v128;
                                v127 -= 8;
                                if (!v127)
                                {
                                  if (!v126) {
                                    goto LABEL_261;
                                  }
                                  *uint64_t v126 = v21;
                                  goto LABEL_148;
                                }
                              }
                              goto LABEL_144;
                            }
                          }
                          else
                          {
                            unsigned int v112 = v182;
                          }
                          if (3 * v112 <= 4 * (HIDWORD(v182) - v183))
                          {
                            if (v112 >= 0x40) {
                              v112 *= 2;
                            }
                            else {
                              unsigned int v112 = 128;
                            }
                          }
                          else if (v112 - HIDWORD(v182) >= v112 >> 3)
                          {
                            goto LABEL_228;
                          }
                          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v180, v112);
                          unsigned int v112 = v182;
                          unint64_t v107 = v181;
LABEL_228:
                          unsigned int v114 = v112 - 1;
                          unsigned int v115 = (v112 - 1) & ((v10 >> 4) ^ (v10 >> 9));
                          unint64_t v116 = &v107[8 * v115];
                          unint64_t v117 = *(uint64_t ***)v116;
                          if (*(void *)v116 == -1)
                          {
                            unint64_t v118 = 0;
LABEL_246:
                            if (v118) {
                              unint64_t v122 = v118;
                            }
                            else {
                              unint64_t v122 = v116;
                            }
                            if (*(uint64_t ***)v122 != v10)
                            {
                              if (*(void *)v122 == -2) {
                                --v183;
                              }
                              else {
                                ++HIDWORD(v182);
                              }
                              *(void *)unint64_t v122 = v10;
                            }
                          }
                          else
                          {
                            unint64_t v118 = 0;
                            int v119 = 1;
                            while (v117 != v10)
                            {
                              if (v118) {
                                BOOL v120 = 0;
                              }
                              else {
                                BOOL v120 = v117 == (uint64_t **)-2;
                              }
                              if (v120) {
                                unint64_t v118 = v116;
                              }
                              unsigned int v121 = v115 + v119++;
                              unsigned int v115 = v121 & v114;
                              unint64_t v116 = &v107[8 * (v121 & v114)];
                              unint64_t v117 = *(uint64_t ***)v116;
                              if (*(void *)v116 == -1) {
                                goto LABEL_246;
                              }
                            }
                          }
                          goto LABEL_253;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v20 = &v10[-4 * (v19 & 0x7FFFFFF)];
            uint64_t v21 = *v20;
            unsigned int v22 = *((unsigned __int8 *)*v20 + 16);
            if (v22 >= 0x1C) {
              goto LABEL_56;
            }
          }
        }
      }
      uint64_t v4 = *(void *)(v175 + 8);
      if (v4 == v174)
      {
        uint64_t v3 = v180;
        long long v148 = v181;
        unsigned int v150 = v182;
        LODWORD(v149) = HIDWORD(v182);
        goto LABEL_337;
      }
    }
  }
  LODWORD(v149) = 0;
  char v5 = 0;
  unsigned int v150 = 8;
  long long v148 = v184;
LABEL_337:
  if (v148 == v3) {
    uint64_t v149 = v149;
  }
  else {
    uint64_t v149 = v150;
  }
  BOOL v151 = v148;
  if (v149)
  {
    uint64_t v152 = 0;
    while (*(void *)&v148[v152] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v152 += 8;
      if (8 * v149 == v152) {
        goto LABEL_357;
      }
    }
    BOOL v151 = &v148[v152];
  }
  if (v151 != &v148[8 * v149])
  {
    uint64_t v153 = *(void *)v151;
    int v154 = *(_DWORD *)(*(void *)v151 + 20);
    if ((v154 & 0x40000000) != 0)
    {
      uint64_t v156 = *(void *)(v153 - 8);
      uint64_t v155 = v154 & 0x7FFFFFF;
      if (!v155) {
        goto LABEL_354;
      }
    }
    else
    {
      uint64_t v155 = v154 & 0x7FFFFFF;
      uint64_t v156 = v153 - 32 * v155;
      if (!v155) {
        goto LABEL_354;
      }
    }
    uint64_t v157 = 32 * v155;
    BOOL v158 = (void **)(v156 + 16);
    do
    {
      if (*(v158 - 2))
      {
        **BOOL v158 = *(v158 - 1);
        uint64_t v159 = (uint64_t)*(v158 - 1);
        if (v159) {
          *(void *)(v159 + 16) = *v158;
        }
      }
      *(v158 - 2) = 0;
      v158 += 4;
      v157 -= 32;
    }
    while (v157);
LABEL_354:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_357:
  if (v148 == v3) {
    goto LABEL_358;
  }
  if (v182 < 0x21 || 4 * (HIDWORD(v182) - v183) >= v182)
  {
    memset(v148, 255, 8 * v182);
LABEL_358:
    HIDWORD(v182) = 0;
    int v183 = 0;
    goto LABEL_359;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v180);
LABEL_359:
  if (v181 != v180) {
    free(v181);
  }
  return v5 & 1;
}

const llvm::detail::DoubleAPFloat *sub_1CD102AAC(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((_UNKNOWN *)v2 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v19, (const llvm::detail::DoubleAPFloat *)(a1 + 32));
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 32);
    if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v3 = *(unsigned char *)(a1 + 52);
    int v4 = v3 & 7;
    char v22 = v3 & 0xF;
    int v21 = *(_DWORD *)(a1 + 48);
    BOOL v6 = (v3 & 6) != 0 && v4 != 3;
    if (v4 == 1 || v6)
    {
      uint64_t v8 = *(unsigned int *)(v2 + 8);
      if ((v8 - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (uint64_t *)a1;
      }
      else {
        uint64_t v9 = &v20;
      }
      int v10 = (uint64_t *)(a1 + 40);
      if ((*(_DWORD *)(*(void *)(a1 + 32) + 8) - 64) < 0xFFFFFF80) {
        int v10 = *(uint64_t **)(a1 + 40);
      }
      if (v8 <= 0xFFFFFFBF)
      {
        unint64_t v11 = (unint64_t)(v8 + 64) >> 6;
        do
        {
          uint64_t v12 = *v10++;
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  char v17 = 0;
  int v14 = llvm::APFloat::convert((uint64_t)v18, &unk_1CFB2E2E0, 1, &v17);
  uint64_t result = 0;
  if (!v14 && !v17) {
    uint64_t result = llvm::ConstantFP::get(**(llvm::ConstantFP ***)a1, (llvm::LLVMContext *)v18, v13);
  }
  if ((_UNKNOWN *)v19 == &unk_1CFB2E344)
  {
    uint64_t v16 = result;
    sub_1CB845718(&v20);
    return v16;
  }
  if ((*(_DWORD *)(v19 + 8) - 64) <= 0xFFFFFF7F && v20)
  {
    uint64_t v16 = result;
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    return v16;
  }
  return result;
}

uint64_t sub_1CD102C90(uint64_t a1)
{
  v459[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v424;
  unint64_t v420 = v424;
  uint64_t v421 = v424;
  uint64_t v422 = 8;
  int v423 = 0;
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v399 = a1 + 72;
  if (v2 != a1 + 72)
  {
    char v3 = 0;
    while (1)
    {
      uint64_t v401 = v2;
      if (v2) {
        uint64_t v4 = v2 - 24;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = v4 + 40;
      uint64_t v6 = *(void *)(v4 + 48);
      uint64_t v7 = v6;
      if (v6 == v5)
      {
LABEL_12:
        uint64_t v8 = 0;
      }
      else
      {
        while (1)
        {
          uint64_t v8 = v7 - 24;
          uint64_t v9 = v7 ? v7 - 24 : 0;
          if (*(unsigned char *)(v9 + 16) != 83) {
            break;
          }
          uint64_t v7 = *(void *)(v7 + 8);
          if (v7 == v5) {
            goto LABEL_12;
          }
        }
      }
      if (v8) {
        uint64_t v10 = v8 + 24;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v407 = v10;
      if (v6 == v10) {
        goto LABEL_707;
      }
      do
      {
        uint64_t v11 = v6;
        uint64_t v6 = *(void *)(v6 + 8);
        if (v11) {
          uint64_t v12 = (void **)(v11 - 24);
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *((unsigned __int8 *)v12 + 16);
        if (v13 == 83) {
          int v14 = v12;
        }
        else {
          int v14 = 0;
        }
        if (!v11 || v13 != 83) {
          continue;
        }
        uint64_t v15 = *v12;
        int v16 = *((_DWORD *)*v12 + 2);
        int v17 = *((_DWORD *)*v12 + 2) >> 8;
        if (v16 == 13 && v17 == 1)
        {
          int v25 = *((_DWORD *)v12 + 5);
          if ((v25 & 0x40000000) != 0)
          {
            int v27 = (void **)*(v12 - 1);
            uint64_t v26 = v25 & 0x7FFFFFF;
            if (!v26) {
              goto LABEL_110;
            }
          }
          else
          {
            uint64_t v26 = v25 & 0x7FFFFFF;
            int v27 = &v12[-4 * v26];
            if (!v26) {
              goto LABEL_110;
            }
          }
          uint64_t v60 = 32 * v26;
          do
          {
            if (*((unsigned char *)*v27 + 16) != 16) {
              goto LABEL_609;
            }
            v27 += 4;
            v60 -= 32;
          }
          while (v60);
LABEL_110:
          for (uint64_t i = v12[1]; i; uint64_t i = (void *)i[1])
          {
            int v62 = *(unsigned __int8 *)(i[3] + 16);
            if (v62 != 85 && v62 != 30) {
              goto LABEL_609;
            }
          }
          uint64_t v414 = v6;
          BOOL v64 = 0;
          int v65 = (void *)*v15;
          v444 = v446;
          uint64_t v445 = 0x200000000;
          uint64_t v449 = v65;
          unint64_t v450 = &v458;
          uint64_t v451 = v459;
          uint64_t v452 = 0;
          int v453 = 0;
          __int16 v454 = 512;
          char v455 = 7;
          v447 = 0;
          v448 = 0;
          uint64_t v456 = 0;
          uint64_t v457 = 0;
          v458 = &unk_1F2616E88;
          v459[0] = &unk_1F2617008;
          v447 = v12[5];
          v448 = v12 + 3;
          uint64_t v66 = (char *)v12[6];
          v425[0] = v66;
          if (v66)
          {
            llvm::MetadataTracking::track((uint64_t)v425, (unsigned __int8 *)v66, 2);
            BOOL v64 = v425[0];
          }
          sub_1CB8461A4((uint64_t)&v444, 0, (uint64_t)v64);
          if (v425[0])
          {
            int v353 = *v425[0];
            if ((v353 - 4) > 0x1E)
            {
              if ((v353 - 3) >= 0xFFFFFFFE) {
                unint64_t v372 = v425[0];
              }
              else {
                unint64_t v372 = 0;
              }
              if ((v353 - 3) < 0xFFFFFFFE)
              {
                if (v353 == 3) {
                  *((void *)v425[0] + 1) = 0;
                }
                goto LABEL_120;
              }
              unint64_t v355 = (unint64_t)(v372 + 8);
            }
            else
            {
              if ((v425[0][1] & 0x7F) != 2 && !*((_DWORD *)v425[0] + 3)) {
                goto LABEL_120;
              }
              uint64_t v354 = *((void *)v425[0] + 2);
              if ((v354 & 4) == 0) {
                goto LABEL_120;
              }
              unint64_t v355 = v354 & 0xFFFFFFFFFFFFFFF8;
              if (!v355) {
                goto LABEL_120;
              }
            }
            v427 = v425;
            sub_1CC5FA668(v355 + 16, &v427);
          }
LABEL_120:
          uint64_t v68 = (void *)(*((_DWORD *)v14 + 5) & 0x7FFFFFF);
          uint64_t v69 = (llvm::ConstantFP **)(*(void *)**v12 + 1624);
          uint64_t v70 = llvm::ConstantFP::get(v69, v67, 0.0);
          unint64_t v72 = llvm::ConstantFP::get(v69, v71, 1.0);
          __int16 v430 = 257;
          unsigned int v73 = sub_1CB93113C((uint64_t)&v444, (uint64_t)v69, (int)v68, (uint64_t)&v427);
          if (v68)
          {
            unsigned int v74 = 0;
            v408 = v14;
            uint64_t v411 = v12;
            int v415 = v70;
            unint64_t v402 = v72;
            std::string __p = v68;
            do
            {
              int v75 = *((_DWORD *)v14 + 5);
              if ((v75 & 0x40000000) != 0) {
                unint64_t v76 = (void **)*(v14 - 1);
              }
              else {
                unint64_t v76 = &v14[-4 * (v75 & 0x7FFFFFF)];
              }
              int v77 = v76[4 * (void)v74];
              BOOL v78 = v77 + 3;
              if (*((_DWORD *)v77 + 8) >= 0x41u) {
                BOOL v78 = (void *)*v78;
              }
              if (*v78) {
                unsigned int v79 = v70;
              }
              else {
                unsigned int v79 = v72;
              }
              if ((v75 & 0x40000000) != 0) {
                unint64_t v80 = (void **)*(v14 - 1);
              }
              else {
                unint64_t v80 = &v14[-4 * (v75 & 0x7FFFFFF)];
              }
              uint64_t v81 = (&v80[4 * *((unsigned int *)v14 + 15)])[(void)v74];
              int v82 = *((_DWORD *)v73 + 5);
              uint64_t v83 = v82 & 0x7FFFFFF;
              if ((v82 & 0x7FFFFFF) == *((_DWORD *)v73 + 15))
              {
                unsigned int v96 = v83 + (v83 >> 1);
                if (v96 <= 2) {
                  uint64_t v97 = 2;
                }
                else {
                  uint64_t v97 = v96;
                }
                *((_DWORD *)v73 + 15) = v97;
                if ((v82 & 0x40000000) != 0) {
                  uint64_t v98 = (uint64_t *)*((void *)v73 - 1);
                }
                else {
                  uint64_t v98 = (uint64_t *)((char *)v73 - 32 * v83);
                }
                uint64_t v99 = operator new(40 * v97);
                *((void *)v73 - 1) = v99;
                BOOL v100 = v99;
                do
                {
                  void *v100 = 0;
                  v100[1] = 0;
                  v100[2] = 0;
                  v100[3] = v73;
                  v100 += 4;
                }
                while (v100 != &v99[4 * v97]);
                int v101 = *((_DWORD *)v73 + 5);
                if ((v101 & 0x40000000) != 0) {
                  uint64_t v102 = (uint64_t)v99;
                }
                else {
                  uint64_t v102 = (uint64_t)v73 - 32 * (v101 & 0x7FFFFFF);
                }
                sub_1CC5E4108((uint64_t)&v427, v98, &v98[4 * v83], v102);
                if (v83)
                {
                  memmove((void *)(v102 + 32 * v97), &v98[4 * v83], 8 * v83);
                  uint64_t v103 = 4 * v83;
                  do
                  {
                    uint64_t v104 = &v98[v103];
                    if (v98[v103 - 4])
                    {
                      *(void *)*(v104 - 2) = *(v104 - 3);
                      uint64_t v105 = *(v104 - 3);
                      if (v105) {
                        *(void *)(v105 + 16) = *(v104 - 2);
                      }
                    }
                    v103 -= 4;
                  }
                  while (v103 * 8);
                }
                operator delete(v98);
                int v82 = *((_DWORD *)v73 + 5);
                int v14 = v408;
                uint64_t v12 = v411;
                uint64_t v70 = v415;
                unint64_t v72 = v402;
                uint64_t v68 = __p;
              }
              uint64_t v84 = (v82 + 1) & 0x7FFFFFF;
              *((_DWORD *)v73 + 5) = v82 & 0xF8000000 | (v82 + 1) & 0x7FFFFFF;
              if ((v82 & 0x40000000) != 0) {
                uint64_t v85 = (char *)*((void *)v73 - 1);
              }
              else {
                uint64_t v85 = (char *)v73 - 32 * v84;
              }
              uint64_t v86 = (v84 - 1);
              uint64_t v87 = &v85[32 * v86];
              if (*(void *)v87)
              {
                **((void **)v87 + 2) = *((void *)v87 + 1);
                uint64_t v95 = *((void *)v87 + 1);
                if (v95) {
                  *(void *)(v95 + 16) = *((void *)v87 + 2);
                }
              }
              *(void *)uint64_t v87 = v79;
              if (v79)
              {
                uint64_t v90 = *((void *)v79 + 1);
                uint64_t v89 = (char **)((char *)v79 + 8);
                uint64_t v88 = v90;
                int v91 = &v85[32 * v86];
                *((void *)v91 + 1) = v90;
                if (v90) {
                  *(void *)(v88 + 16) = v91 + 8;
                }
                *((void *)v91 + 2) = v89;
                *uint64_t v89 = v87;
              }
              int v92 = *((_DWORD *)v73 + 5);
              uint64_t v93 = v92 & 0x7FFFFFF;
              if ((v92 & 0x40000000) != 0) {
                uint64_t v94 = (char *)*((void *)v73 - 1);
              }
              else {
                uint64_t v94 = (char *)v73 - 32 * v93;
              }
              *(void *)&v94[32 * *((unsigned int *)v73 + 15) + 8 * (v93 - 1)] = v81;
              unsigned int v74 = (char *)v74 + 1;
            }
            while (v74 != v68);
          }
          for (int j = (void *)v12[5][6]; ; int j = (void *)j[1])
          {
            unint64_t v107 = j - 3;
            if (!j) {
              unint64_t v107 = 0;
            }
            if (*((unsigned char *)v107 + 16) != 83) {
              break;
            }
          }
          uint64_t v108 = 0;
          uint64_t v109 = *(void *)*(j - 3);
          v427 = v429;
          uint64_t v428 = 0x200000000;
          uint64_t v433 = v109;
          v434 = &v442;
          int v435 = &v443;
          uint64_t v436 = 0;
          int v437 = 0;
          __int16 v438 = 512;
          char v439 = 7;
          uint64_t v431 = 0;
          unint64_t v432 = 0;
          uint64_t v440 = 0;
          uint64_t v441 = 0;
          unint64_t v442 = &unk_1F2616E88;
          v443 = &unk_1F2617008;
          uint64_t v431 = j[2];
          unint64_t v432 = j;
          uint64_t v110 = (unsigned __int8 *)j[3];
          v418[0] = v110;
          if (v110)
          {
            llvm::MetadataTracking::track((uint64_t)v418, v110, 2);
            uint64_t v108 = v418[0];
          }
          sub_1CB8461A4((uint64_t)&v427, 0, v108);
          if (v418[0])
          {
            int v356 = *(unsigned __int8 *)v418[0];
            if ((v356 - 4) > 0x1E)
            {
              if ((v356 - 3) >= 0xFFFFFFFE) {
                uint64_t v373 = v418[0];
              }
              else {
                uint64_t v373 = 0;
              }
              if ((v356 - 3) < 0xFFFFFFFE)
              {
                if (v356 == 3) {
                  *(void *)(v418[0] + 8) = 0;
                }
                goto LABEL_175;
              }
              unint64_t v358 = v373 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v418[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v418[0] + 12)) {
                goto LABEL_175;
              }
              uint64_t v357 = *(void *)(v418[0] + 16);
              if ((v357 & 4) == 0) {
                goto LABEL_175;
              }
              unint64_t v358 = v357 & 0xFFFFFFFFFFFFFFF8;
              if (!v358) {
                goto LABEL_175;
              }
            }
            v425[0] = (const char *)v418;
            sub_1CC5FA668(v358 + 16, v425);
          }
LABEL_175:
          __int16 v426 = 257;
          FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v427, 1, (uint64_t)v73, (uint64_t)v70, (uint64_t)v425, 0, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, FCmpHelper, (llvm::Value *)1);
          int v112 = *((_DWORD *)v12 + 5);
          if ((v112 & 0x40000000) != 0)
          {
            unsigned int v114 = (void **)*(v12 - 1);
            uint64_t v113 = v112 & 0x7FFFFFF;
            if (v113) {
              goto LABEL_177;
            }
          }
          else
          {
            uint64_t v113 = v112 & 0x7FFFFFF;
            unsigned int v114 = &v12[-4 * v113];
            if (v113)
            {
LABEL_177:
              uint64_t v115 = 32 * v113;
              unint64_t v116 = v114 + 2;
              do
              {
                if (*(v116 - 2))
                {
                  *char *v116 = *(v116 - 1);
                  uint64_t v117 = (uint64_t)*(v116 - 1);
                  if (v117) {
                    *(void *)(v117 + 16) = *v116;
                  }
                }
                *(v116 - 2) = 0;
                v116 += 4;
                v115 -= 32;
              }
              while (v115);
            }
          }
          unint64_t v118 = v421;
          uint64_t v119 = HIDWORD(v422);
          if (v421 != v420)
          {
            unsigned int v123 = v422;
            goto LABEL_193;
          }
          if (!HIDWORD(v422)) {
            goto LABEL_190;
          }
          BOOL v120 = 0;
          uint64_t v121 = 8 * HIDWORD(v422);
          unint64_t v122 = v421;
          do
          {
            if ((void **)*v122 == v12) {
              goto LABEL_603;
            }
            if (*v122 == -2) {
              BOOL v120 = v122;
            }
            ++v122;
            v121 -= 8;
          }
          while (v121);
          if (!v120)
          {
LABEL_190:
            unsigned int v123 = v422;
            if (HIDWORD(v422) < v422) {
              goto LABEL_554;
            }
LABEL_193:
            if (3 * v123 <= 4 * (HIDWORD(v422) - v423))
            {
              if (v123 >= 0x40) {
                v123 *= 2;
              }
              else {
                unsigned int v123 = 128;
              }
            }
            else if (v123 - HIDWORD(v422) >= v123 >> 3)
            {
LABEL_195:
              unsigned int v124 = v123 - 1;
              unsigned int v125 = (v123 - 1) & ((v12 >> 4) ^ (v12 >> 9));
              uint64_t v126 = &v118[8 * v125];
              uint64_t v127 = (void **)*v126;
              if (*v126 == -1) {
                goto LABEL_595;
              }
              uint64_t v128 = 0;
              int v129 = 1;
              do
              {
                if (v127 == v12) {
                  goto LABEL_603;
                }
                if (v128) {
                  BOOL v130 = 0;
                }
                else {
                  BOOL v130 = v127 == (void **)-2;
                }
                if (v130) {
                  uint64_t v128 = v126;
                }
                unsigned int v131 = v125 + v129++;
                unsigned int v125 = v131 & v124;
                uint64_t v126 = &v118[8 * (v131 & v124)];
                uint64_t v127 = (void **)*v126;
              }
              while (*v126 != -1);
              goto LABEL_596;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v420, v123);
            unsigned int v123 = v422;
            unint64_t v118 = v421;
            goto LABEL_195;
          }
LABEL_611:
          void *v120 = v12;
          --v423;
          goto LABEL_603;
        }
        BOOL v20 = v17 == 32 || v17 == 64;
        if (v16 != 13 || !v20)
        {
          if (v16 != 2) {
            continue;
          }
          uint64_t v414 = v6;
          if (!sub_1CD104FF4((uint64_t)v12, 0)) {
            goto LABEL_608;
          }
          int v22 = *((_DWORD *)v12 + 5);
          if ((v22 & 0x40000000) != 0)
          {
            unint64_t v24 = *(v12 - 1);
            uint64_t v23 = v22 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v23 = v22 & 0x7FFFFFF;
            unint64_t v24 = (uint64_t *)&v12[-4 * v23];
          }
          int v226 = *((_DWORD *)v14 + 5);
          v227 = (void *)**v12;
          uint64_t v228 = *v227 + 1624;
          if (v23)
          {
            uint64_t v229 = 32 * v23;
            do
            {
              uint64_t v230 = *v24;
              unsigned int v231 = *(unsigned __int8 *)(*v24 + 16);
              if (v231 <= 0x1B) {
                uint64_t v232 = 0;
              }
              else {
                uint64_t v232 = *v24;
              }
              if (v230) {
                BOOL v233 = v231 == 17;
              }
              else {
                BOOL v233 = 0;
              }
              if (v233)
              {
                if (!sub_1CD102AAC(v230)) {
                  goto LABEL_608;
                }
              }
              else
              {
                if (!v232) {
                  goto LABEL_608;
                }
                uint64_t v6 = v414;
                uint64_t v10 = v407;
                if (*(unsigned char *)(v232 + 16) != 74) {
                  goto LABEL_609;
                }
                int v234 = *(_DWORD *)(v232 + 20);
                if ((v234 & 0x40000000) != 0) {
                  int v235 = *(void ***)(v232 - 8);
                }
                else {
                  int v235 = (void **)(v232 - 32 * (v234 & 0x7FFFFFF));
                }
                if (**v235 != v228) {
                  goto LABEL_608;
                }
              }
              v24 += 4;
              v229 -= 32;
            }
            while (v229);
            v227 = (void *)**v12;
          }
          unint64_t v236 = 0;
          v444 = v446;
          uint64_t v445 = 0x200000000;
          uint64_t v449 = v227;
          unint64_t v450 = &v458;
          uint64_t v451 = v459;
          uint64_t v452 = 0;
          int v453 = 0;
          __int16 v454 = 512;
          char v455 = 7;
          v447 = 0;
          v448 = 0;
          uint64_t v456 = 0;
          uint64_t v457 = 0;
          v458 = &unk_1F2616E88;
          v459[0] = &unk_1F2617008;
          v447 = v12[5];
          v448 = v12 + 3;
          v237 = (char *)v12[6];
          v425[0] = v237;
          if (v237)
          {
            llvm::MetadataTracking::track((uint64_t)v425, (unsigned __int8 *)v237, 2);
            unint64_t v236 = v425[0];
          }
          sub_1CB8461A4((uint64_t)&v444, 0, (uint64_t)v236);
          if (v425[0])
          {
            int v374 = *v425[0];
            if ((v374 - 4) > 0x1E)
            {
              if ((v374 - 3) >= 0xFFFFFFFE) {
                unint64_t v382 = v425[0];
              }
              else {
                unint64_t v382 = 0;
              }
              if ((v374 - 3) < 0xFFFFFFFE)
              {
                if (v374 == 3) {
                  *((void *)v425[0] + 1) = 0;
                }
                goto LABEL_379;
              }
              unint64_t v376 = (unint64_t)(v382 + 8);
            }
            else
            {
              if ((v425[0][1] & 0x7F) != 2 && !*((_DWORD *)v425[0] + 3)) {
                goto LABEL_379;
              }
              uint64_t v375 = *((void *)v425[0] + 2);
              if ((v375 & 4) == 0) {
                goto LABEL_379;
              }
              unint64_t v376 = v375 & 0xFFFFFFFFFFFFFFF8;
              if (!v376) {
                goto LABEL_379;
              }
            }
            v427 = v425;
            sub_1CC5FA668(v376 + 16, &v427);
          }
LABEL_379:
          BOOL v238 = (void *)(v226 & 0x7FFFFFF);
          __int16 v430 = 257;
          uint64_t v239 = sub_1CB93113C((uint64_t)&v444, v228, v226 & 0x7FFFFFF, (uint64_t)&v427);
          if ((v226 & 0x7FFFFFF) != 0)
          {
            unint64_t v240 = 0;
            __pb = (void *)(v226 & 0x7FFFFFF);
            unint64_t v410 = v14;
            v413 = v12;
            do
            {
              int v241 = *((_DWORD *)v14 + 5);
              if ((v241 & 0x40000000) != 0) {
                unint64_t v242 = (void **)*(v14 - 1);
              }
              else {
                unint64_t v242 = &v14[-4 * (v241 & 0x7FFFFFF)];
              }
              uint64_t v243 = (uint64_t)v242[4 * (void)v240];
              if (v243) {
                BOOL v244 = *(unsigned char *)(v243 + 16) == 17;
              }
              else {
                BOOL v244 = 0;
              }
              if (v244)
              {
                BOOL v248 = sub_1CD102AAC(v243);
                int v249 = *((_DWORD *)v14 + 5);
                if ((v249 & 0x40000000) != 0) {
                  unint64_t v250 = (void **)*(v14 - 1);
                }
                else {
                  unint64_t v250 = &v14[-4 * (v249 & 0x7FFFFFF)];
                }
                size_t v273 = (&v250[4 * *((unsigned int *)v14 + 15)])[(void)v240];
                int v274 = *((_DWORD *)v239 + 5);
                uint64_t v275 = v274 & 0x7FFFFFF;
                if ((v274 & 0x7FFFFFF) == *((_DWORD *)v239 + 15))
                {
                  unsigned int v307 = v275 + (v275 >> 1);
                  if (v307 <= 2) {
                    uint64_t v308 = 2;
                  }
                  else {
                    uint64_t v308 = v307;
                  }
                  *((_DWORD *)v239 + 15) = v308;
                  if ((v274 & 0x40000000) != 0) {
                    uint64_t v309 = (uint64_t *)*((void *)v239 - 1);
                  }
                  else {
                    uint64_t v309 = (uint64_t *)((char *)v239 - 32 * v275);
                  }
                  unint64_t v310 = operator new(40 * v308);
                  *((void *)v239 - 1) = v310;
                  uint64_t v311 = v310;
                  do
                  {
                    *uint64_t v311 = 0;
                    v311[1] = 0;
                    v311[2] = 0;
                    v311[3] = v239;
                    v311 += 4;
                  }
                  while (v311 != &v310[4 * v308]);
                  int v312 = *((_DWORD *)v239 + 5);
                  if ((v312 & 0x40000000) != 0) {
                    uint64_t v313 = (uint64_t)v310;
                  }
                  else {
                    uint64_t v313 = (uint64_t)v239 - 32 * (v312 & 0x7FFFFFF);
                  }
                  sub_1CC5E4108((uint64_t)&v427, v309, &v309[4 * v275], v313);
                  if (v275)
                  {
                    memmove((void *)(v313 + 32 * v308), &v309[4 * v275], 8 * v275);
                    uint64_t v314 = 4 * v275;
                    do
                    {
                      int v315 = &v309[v314];
                      if (v309[v314 - 4])
                      {
                        *(void *)*(v315 - 2) = *(v315 - 3);
                        uint64_t v316 = *(v315 - 3);
                        if (v316) {
                          *(void *)(v316 + 16) = *(v315 - 2);
                        }
                      }
                      v314 -= 4;
                    }
                    while (v314 * 8);
                  }
                  operator delete(v309);
                  int v274 = *((_DWORD *)v239 + 5);
                  int v14 = v410;
                  uint64_t v12 = v413;
                  BOOL v238 = __pb;
                }
                uint64_t v276 = (v274 + 1) & 0x7FFFFFF;
                *((_DWORD *)v239 + 5) = v274 & 0xF8000000 | (v274 + 1) & 0x7FFFFFF;
                if ((v274 & 0x40000000) != 0) {
                  int v277 = (char *)*((void *)v239 - 1);
                }
                else {
                  int v277 = (char *)v239 - 32 * v276;
                }
                uint64_t v278 = (v276 - 1);
                uint64_t v279 = &v277[32 * v278];
                if (*(void *)v279)
                {
                  **((void **)v279 + 2) = *((void *)v279 + 1);
                  uint64_t v288 = *((void *)v279 + 1);
                  if (v288) {
                    *(void *)(v288 + 16) = *((void *)v279 + 2);
                  }
                }
                *(void *)uint64_t v279 = v248;
                if (v248)
                {
                  uint64_t v282 = *((void *)v248 + 1);
                  uint64_t v281 = (char **)((char *)v248 + 8);
                  uint64_t v280 = v282;
                  uint64_t v283 = &v277[32 * v278];
                  *((void *)v283 + 1) = v282;
                  if (v282) {
                    *(void *)(v280 + 16) = v283 + 8;
                  }
                  *((void *)v283 + 2) = v281;
                  *uint64_t v281 = v279;
                }
                int v284 = *((_DWORD *)v239 + 5);
                uint64_t v285 = v284 & 0x7FFFFFF;
                if ((v284 & 0x40000000) != 0) {
                  unint64_t v286 = (char *)*((void *)v239 - 1);
                }
                else {
                  unint64_t v286 = (char *)v239 - 32 * v285;
                }
                *(void *)&v286[32 * *((unsigned int *)v239 + 15) + 8 * (v285 - 1)] = v273;
                goto LABEL_429;
              }
              int v245 = *(_DWORD *)(v243 + 20);
              if ((v245 & 0x40000000) != 0)
              {
                unint64_t v246 = *(uint64_t **)(v243 - 8);
                if ((v241 & 0x40000000) != 0)
                {
LABEL_390:
                  int v247 = (void **)*(v14 - 1);
                  goto LABEL_395;
                }
              }
              else
              {
                unint64_t v246 = (uint64_t *)(v243 - 32 * (v245 & 0x7FFFFFF));
                if ((v241 & 0x40000000) != 0) {
                  goto LABEL_390;
                }
              }
              int v247 = &v14[-4 * (v241 & 0x7FFFFFF)];
LABEL_395:
              uint64_t v251 = *v246;
              unint64_t v252 = (&v247[4 * *((unsigned int *)v14 + 15)])[(void)v240];
              int v253 = *((_DWORD *)v239 + 5);
              uint64_t v254 = v253 & 0x7FFFFFF;
              if ((v253 & 0x7FFFFFF) == *((_DWORD *)v239 + 15))
              {
                unsigned int v297 = v254 + (v254 >> 1);
                if (v297 <= 2) {
                  uint64_t v298 = 2;
                }
                else {
                  uint64_t v298 = v297;
                }
                *((_DWORD *)v239 + 15) = v298;
                if ((v253 & 0x40000000) != 0) {
                  uint64_t v299 = (uint64_t *)*((void *)v239 - 1);
                }
                else {
                  uint64_t v299 = (uint64_t *)((char *)v239 - 32 * v254);
                }
                v417 = v299;
                unint64_t v300 = operator new(40 * v298);
                *((void *)v239 - 1) = v300;
                uint64_t v301 = v300;
                do
                {
                  *uint64_t v301 = 0;
                  v301[1] = 0;
                  v301[2] = 0;
                  v301[3] = v239;
                  v301 += 4;
                }
                while (v301 != &v300[4 * v298]);
                int v302 = *((_DWORD *)v239 + 5);
                if ((v302 & 0x40000000) != 0) {
                  uint64_t v303 = (uint64_t)v300;
                }
                else {
                  uint64_t v303 = (uint64_t)v239 - 32 * (v302 & 0x7FFFFFF);
                }
                sub_1CC5E4108((uint64_t)&v427, v417, &v417[4 * v254], v303);
                if (v254)
                {
                  memmove((void *)(v303 + 32 * v298), &v417[4 * v254], 8 * v254);
                  uint64_t v304 = 4 * v254;
                  do
                  {
                    int v305 = &v417[v304];
                    if (v417[v304 - 4])
                    {
                      *(void *)*(v305 - 2) = *(v305 - 3);
                      uint64_t v306 = *(v305 - 3);
                      if (v306) {
                        *(void *)(v306 + 16) = *(v305 - 2);
                      }
                    }
                    v304 -= 4;
                  }
                  while (v304 * 8);
                }
                operator delete(v417);
                int v253 = *((_DWORD *)v239 + 5);
                int v14 = v410;
                uint64_t v12 = v413;
                BOOL v238 = __pb;
              }
              uint64_t v255 = (v253 + 1) & 0x7FFFFFF;
              *((_DWORD *)v239 + 5) = v253 & 0xF8000000 | (v253 + 1) & 0x7FFFFFF;
              if ((v253 & 0x40000000) != 0) {
                unint64_t v256 = (char *)*((void *)v239 - 1);
              }
              else {
                unint64_t v256 = (char *)v239 - 32 * v255;
              }
              uint64_t v257 = (v255 - 1);
              char v258 = &v256[32 * v257];
              if (*(void *)v258)
              {
                **((void **)v258 + 2) = *((void *)v258 + 1);
                uint64_t v287 = *((void *)v258 + 1);
                if (v287) {
                  *(void *)(v287 + 16) = *((void *)v258 + 2);
                }
              }
              *(void *)char v258 = v251;
              if (v251)
              {
                uint64_t v261 = *(void *)(v251 + 8);
                unint64_t v260 = (char **)(v251 + 8);
                uint64_t v259 = v261;
                unint64_t v262 = &v256[32 * v257];
                *((void *)v262 + 1) = v261;
                if (v261) {
                  *(void *)(v259 + 16) = v262 + 8;
                }
                *((void *)v262 + 2) = v260;
                const void *v260 = v258;
              }
              int v263 = *((_DWORD *)v239 + 5);
              uint64_t v264 = v263 & 0x7FFFFFF;
              if ((v263 & 0x40000000) != 0) {
                int v265 = (char *)*((void *)v239 - 1);
              }
              else {
                int v265 = (char *)v239 - 32 * v264;
              }
              *(void *)&v265[32 * *((unsigned int *)v239 + 15) + 8 * (v264 - 1)] = v252;
              uint64_t v266 = *(void *)(v243 + 8);
              if (v266 && !*(void *)(v266 + 8))
              {
                uint64_t v267 = v421;
                uint64_t v268 = HIDWORD(v422);
                if (v421 != v420)
                {
                  unsigned int v272 = v422;
LABEL_436:
                  if (3 * v272 <= 4 * (HIDWORD(v422) - v423))
                  {
                    if (v272 >= 0x40) {
                      v272 *= 2;
                    }
                    else {
                      unsigned int v272 = 128;
                    }
                  }
                  else if (v272 - HIDWORD(v422) >= v272 >> 3)
                  {
                    goto LABEL_438;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v420, v272);
                  unsigned int v272 = v422;
                  uint64_t v267 = v421;
LABEL_438:
                  unsigned int v289 = v272 - 1;
                  unsigned int v290 = (v272 - 1) & ((v243 >> 4) ^ (v243 >> 9));
                  uint64_t v291 = (uint64_t *)&v267[8 * v290];
                  uint64_t v292 = *v291;
                  if (*v291 == -1)
                  {
                    size_t v293 = 0;
LABEL_484:
                    if (v293) {
                      v317 = v293;
                    }
                    else {
                      v317 = v291;
                    }
                    if (*v317 != v243)
                    {
                      if (*v317 == -2) {
                        --v423;
                      }
                      else {
                        ++HIDWORD(v422);
                      }
                      uint64_t *v317 = v243;
                    }
                  }
                  else
                  {
                    size_t v293 = 0;
                    int v294 = 1;
                    while (v292 != v243)
                    {
                      if (v293) {
                        BOOL v295 = 0;
                      }
                      else {
                        BOOL v295 = v292 == -2;
                      }
                      if (v295) {
                        size_t v293 = v291;
                      }
                      unsigned int v296 = v290 + v294++;
                      unsigned int v290 = v296 & v289;
                      uint64_t v291 = (uint64_t *)&v267[8 * (v296 & v289)];
                      uint64_t v292 = *v291;
                      if (*v291 == -1) {
                        goto LABEL_484;
                      }
                    }
                  }
                  goto LABEL_429;
                }
                if (!HIDWORD(v422)) {
                  goto LABEL_415;
                }
                uint64_t v269 = 0;
                uint64_t v270 = 8 * HIDWORD(v422);
                uint64_t v271 = (uint64_t *)v421;
                do
                {
                  if (*v271 == v243) {
                    goto LABEL_429;
                  }
                  if (*v271 == -2) {
                    uint64_t v269 = v271;
                  }
                  ++v271;
                  v270 -= 8;
                }
                while (v270);
                if (v269)
                {
                  *uint64_t v269 = v243;
                  --v423;
                }
                else
                {
LABEL_415:
                  unsigned int v272 = v422;
                  if (HIDWORD(v422) >= v422) {
                    goto LABEL_436;
                  }
                  ++HIDWORD(v422);
                  *(void *)&v421[8 * v268] = v243;
                }
              }
LABEL_429:
              unint64_t v240 = (char *)v240 + 1;
            }
            while (v240 != v238);
          }
          for (uint64_t k = (void *)v12[5][6]; ; uint64_t k = (void *)k[1])
          {
            uint64_t v319 = k - 3;
            if (!k) {
              uint64_t v319 = 0;
            }
            if (*((unsigned char *)v319 + 16) != 83) {
              break;
            }
          }
          uint64_t v320 = 0;
          uint64_t v321 = *(void *)*(k - 3);
          v427 = v429;
          uint64_t v428 = 0x200000000;
          uint64_t v433 = v321;
          v434 = &v442;
          int v435 = &v443;
          uint64_t v436 = 0;
          int v437 = 0;
          __int16 v438 = 512;
          char v439 = 7;
          uint64_t v431 = 0;
          unint64_t v432 = 0;
          uint64_t v440 = 0;
          uint64_t v441 = 0;
          unint64_t v442 = &unk_1F2616E88;
          v443 = &unk_1F2617008;
          uint64_t v431 = k[2];
          unint64_t v432 = k;
          unint64_t v322 = (unsigned __int8 *)k[3];
          v418[0] = v322;
          if (v322)
          {
            llvm::MetadataTracking::track((uint64_t)v418, v322, 2);
            uint64_t v320 = v418[0];
          }
          sub_1CB8461A4((uint64_t)&v427, 0, v320);
          if (v418[0])
          {
            int v377 = *(unsigned __int8 *)v418[0];
            if ((v377 - 4) > 0x1E)
            {
              if ((v377 - 3) >= 0xFFFFFFFE) {
                uint64_t v383 = v418[0];
              }
              else {
                uint64_t v383 = 0;
              }
              if ((v377 - 3) < 0xFFFFFFFE)
              {
                if (v377 == 3) {
                  *(void *)(v418[0] + 8) = 0;
                }
                goto LABEL_511;
              }
              unint64_t v379 = v383 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v418[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v418[0] + 12)) {
                goto LABEL_511;
              }
              uint64_t v378 = *(void *)(v418[0] + 16);
              if ((v378 & 4) == 0) {
                goto LABEL_511;
              }
              unint64_t v379 = v378 & 0xFFFFFFFFFFFFFFF8;
              if (!v379) {
                goto LABEL_511;
              }
            }
            v425[0] = (const char *)v418;
            sub_1CC5FA668(v379 + 16, v425);
          }
LABEL_511:
          v323 = *v12;
          __int16 v426 = 257;
          v324 = sub_1CB843944((uint64_t)&v427, (uint64_t)v239, v323, (uint64_t)v425);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, v324, (llvm::Value *)1);
          int v325 = *((_DWORD *)v12 + 5);
          if ((v325 & 0x40000000) != 0)
          {
            v327 = (void **)*(v12 - 1);
            uint64_t v326 = v325 & 0x7FFFFFF;
            if (v326) {
              goto LABEL_513;
            }
          }
          else
          {
            uint64_t v326 = v325 & 0x7FFFFFF;
            v327 = &v12[-4 * v326];
            if (v326)
            {
LABEL_513:
              uint64_t v328 = 32 * v326;
              uint64_t v329 = v327 + 2;
              do
              {
                if (*(v329 - 2))
                {
                  **uint64_t v329 = *(v329 - 1);
                  uint64_t v330 = (uint64_t)*(v329 - 1);
                  if (v330) {
                    *(void *)(v330 + 16) = *v329;
                  }
                }
                *(v329 - 2) = 0;
                v329 += 4;
                v328 -= 32;
              }
              while (v328);
            }
          }
          unint64_t v118 = v421;
          uint64_t v119 = HIDWORD(v422);
          if (v421 == v420)
          {
            if (HIDWORD(v422))
            {
              BOOL v120 = 0;
              uint64_t v331 = 8 * HIDWORD(v422);
              unint64_t v332 = v421;
              do
              {
                if ((void **)*v332 == v12) {
                  goto LABEL_603;
                }
                if (*v332 == -2) {
                  BOOL v120 = v332;
                }
                ++v332;
                v331 -= 8;
              }
              while (v331);
              if (v120) {
                goto LABEL_611;
              }
            }
            unsigned int v333 = v422;
            if (HIDWORD(v422) < v422) {
              goto LABEL_554;
            }
          }
          else
          {
            unsigned int v333 = v422;
          }
          if (3 * v333 <= 4 * (HIDWORD(v422) - v423))
          {
            if (v333 >= 0x40) {
              v333 *= 2;
            }
            else {
              unsigned int v333 = 128;
            }
          }
          else if (v333 - HIDWORD(v422) >= v333 >> 3)
          {
LABEL_584:
            unsigned int v359 = v333 - 1;
            unsigned int v360 = (v333 - 1) & ((v12 >> 4) ^ (v12 >> 9));
            uint64_t v126 = &v118[8 * v360];
            uint64_t v361 = (void **)*v126;
            if (*v126 == -1) {
              goto LABEL_595;
            }
            uint64_t v128 = 0;
            int v362 = 1;
            do
            {
              if (v361 == v12) {
                goto LABEL_603;
              }
              if (v128) {
                BOOL v363 = 0;
              }
              else {
                BOOL v363 = v361 == (void **)-2;
              }
              if (v363) {
                uint64_t v128 = v126;
              }
              unsigned int v364 = v360 + v362++;
              unsigned int v360 = v364 & v359;
              uint64_t v126 = &v118[8 * (v364 & v359)];
              uint64_t v361 = (void **)*v126;
            }
            while (*v126 != -1);
LABEL_596:
            if (v128) {
              int v365 = v128;
            }
            else {
              int v365 = v126;
            }
            if ((void **)*v365 != v12)
            {
              if (*v365 == -2) {
                --v423;
              }
              else {
                ++HIDWORD(v422);
              }
              *int v365 = v12;
            }
            goto LABEL_603;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v420, v333);
          unsigned int v333 = v422;
          unint64_t v118 = v421;
          goto LABEL_584;
        }
        int v28 = *((_DWORD *)v14 + 5);
        uint64_t v29 = v28 & 0x7FFFFFF;
        if ((v28 & 0x7FFFFFF) == 0) {
          continue;
        }
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = *((_DWORD *)v12 + 5);
        uint64_t v33 = v32 & 0x7FFFFFF;
        unsigned int v34 = (unsigned __int8 **)&v12[-4 * v33];
        do
        {
          unsigned int v35 = &v12[-4 * (v32 & 0x7FFFFFF)];
          if ((v32 & 0x40000000) != 0) {
            unsigned int v35 = (void **)*(v12 - 1);
          }
          uint64_t v36 = v35[v30];
          unsigned int v37 = *((unsigned __int8 *)v36 + 16);
          if (v36) {
            BOOL v38 = v37 >= 0x1C;
          }
          else {
            BOOL v38 = 0;
          }
          if (v38 && v37 - 67 <= 1)
          {
            int v40 = *((_DWORD *)v36 + 5);
            if ((v40 & 0x40000000) != 0) {
              unsigned int v41 = (uint64_t **)*(v36 - 1);
            }
            else {
              unsigned int v41 = (uint64_t **)&v36[-4 * (v40 & 0x7FFFFFF)];
            }
            uint64_t v31 = **v41;
          }
          v30 += 4;
        }
        while (4 * v29 != v30);
        if (!v31) {
          continue;
        }
        int v42 = (unsigned __int8 **)&v12[-4 * (v32 & 0x7FFFFFF)];
        if ((v32 & 0x40000000) != 0) {
          int v42 = (unsigned __int8 **)*(v12 - 1);
        }
        uint64_t v43 = 32 * v33;
        if (v33)
        {
          for (uint64_t m = 32 * v33; m; m -= 32)
          {
            int v45 = *v42;
            int v46 = (*v42)[16];
            if (*v42) {
              BOOL v47 = v46 == 16;
            }
            else {
              BOOL v47 = 0;
            }
            if (v47)
            {
              uint64_t v51 = v45 + 24;
              if (*((_DWORD *)v45 + 8) >= 0x41u) {
                uint64_t v51 = (void *)*v51;
              }
              if (*v51 >> BYTE1(*(_DWORD *)(v31 + 8))) {
                goto LABEL_528;
              }
            }
            else
            {
              int v48 = 0;
              if (!v45 || v46 != 67) {
                goto LABEL_84;
              }
              int v49 = *((_DWORD *)v45 + 5);
              if ((v49 & 0x40000000) != 0) {
                uint64_t v50 = (unsigned __int8 *)*((void *)v45 - 1);
              }
              else {
                uint64_t v50 = &v45[-32 * (v49 & 0x7FFFFFF)];
              }
              if (**(void **)v50 != v31)
              {
LABEL_528:
                int v48 = 0;
                if ((v32 & 0x40000000) == 0) {
                  goto LABEL_86;
                }
LABEL_85:
                unsigned int v34 = (unsigned __int8 **)*(v12 - 1);
                goto LABEL_86;
              }
            }
            v42 += 4;
          }
        }
        int v48 = 1;
LABEL_84:
        if ((v32 & 0x40000000) != 0) {
          goto LABEL_85;
        }
LABEL_86:
        if (!v33) {
          goto LABEL_207;
        }
        uint64_t v52 = -1 << (BYTE1(*(_DWORD *)(v31 + 8)) - 1);
        while (1)
        {
          int v53 = *v34;
          int v54 = (*v34)[16];
          if (*v34 && v54 == 16) {
            break;
          }
          if (!v53 || v54 != 68) {
            goto LABEL_206;
          }
          int v56 = *((_DWORD *)v53 + 5);
          uint64_t v57 = (v56 & 0x40000000) != 0 ? (unsigned __int8 *)*((void *)v53 - 1) : &v53[-32 * (v56 & 0x7FFFFFF)];
          if (**(void **)v57 != v31) {
            goto LABEL_206;
          }
LABEL_104:
          v34 += 4;
          v43 -= 32;
          if (!v43) {
            goto LABEL_207;
          }
        }
        unsigned int v58 = *((_DWORD *)v53 + 8);
        if (v58 > 0x40) {
          uint64_t v59 = **((void **)v53 + 3);
        }
        else {
          uint64_t v59 = (uint64_t)(*((void *)v53 + 3) << -(char)v58) >> -(char)v58;
        }
        if (v59 <= ~v52 && v59 >= v52) {
          goto LABEL_104;
        }
LABEL_206:
        if (!v48) {
          continue;
        }
LABEL_207:
        uint64_t v414 = v6;
        uint64_t v132 = 0;
        uint64_t v133 = (void *)*v15;
        v444 = v446;
        uint64_t v445 = 0x200000000;
        uint64_t v449 = v133;
        unint64_t v450 = &v458;
        uint64_t v451 = v459;
        uint64_t v452 = 0;
        int v453 = 0;
        __int16 v454 = 512;
        char v455 = 7;
        v447 = 0;
        v448 = 0;
        uint64_t v456 = 0;
        uint64_t v457 = 0;
        v458 = &unk_1F2616E88;
        v459[0] = &unk_1F2617008;
        v447 = v12[5];
        v448 = v12 + 3;
        int v134 = (char *)v12[6];
        v425[0] = v134;
        if (v134)
        {
          llvm::MetadataTracking::track((uint64_t)v425, (unsigned __int8 *)v134, 2);
          uint64_t v132 = v425[0];
        }
        sub_1CB8461A4((uint64_t)&v444, 0, (uint64_t)v132);
        if (v425[0])
        {
          int v366 = *v425[0];
          if ((v366 - 4) > 0x1E)
          {
            if ((v366 - 3) >= 0xFFFFFFFE) {
              unint64_t v380 = v425[0];
            }
            else {
              unint64_t v380 = 0;
            }
            if ((v366 - 3) < 0xFFFFFFFE)
            {
              if (v366 == 3) {
                *((void *)v425[0] + 1) = 0;
              }
              goto LABEL_210;
            }
            unint64_t v368 = (unint64_t)(v380 + 8);
          }
          else
          {
            if ((v425[0][1] & 0x7F) != 2 && !*((_DWORD *)v425[0] + 3)) {
              goto LABEL_210;
            }
            uint64_t v367 = *((void *)v425[0] + 2);
            if ((v367 & 4) == 0) {
              goto LABEL_210;
            }
            unint64_t v368 = v367 & 0xFFFFFFFFFFFFFFF8;
            if (!v368) {
              goto LABEL_210;
            }
          }
          v427 = v425;
          sub_1CC5FA668(v368 + 16, &v427);
        }
LABEL_210:
        char v400 = v48;
        __int16 v430 = 257;
        unint64_t v416 = (llvm::ConstantInt *)v31;
        BOOL v135 = sub_1CB93113C((uint64_t)&v444, v31, v29, (uint64_t)&v427);
        uint64_t v136 = 0;
        uint64_t v403 = v29;
        uint64_t v409 = v14;
        unint64_t v412 = v12;
        while (2)
        {
          int v137 = *((_DWORD *)v14 + 5);
          if ((v137 & 0x40000000) != 0) {
            int v138 = (void **)*(v14 - 1);
          }
          else {
            int v138 = &v14[-4 * (v137 & 0x7FFFFFF)];
          }
          uint64_t v139 = v138[4 * v136];
          if (v139) {
            BOOL v140 = *((unsigned char *)v139 + 16) == 16;
          }
          else {
            BOOL v140 = 0;
          }
          if (v140)
          {
            unsigned int v144 = *((_DWORD *)v139 + 8);
            if (v144 > 0x40) {
              unint64_t v145 = *(void *)v139[3];
            }
            else {
              unint64_t v145 = (uint64_t)(v139[3] << -(char)v144) >> -(char)v144;
            }
            uint64_t v168 = llvm::ConstantInt::get(v416, v145, (const llvm::APInt *)1);
            int v169 = *((_DWORD *)v14 + 5);
            if ((v169 & 0x40000000) != 0) {
              unint64_t v170 = (void **)*(v14 - 1);
            }
            else {
              unint64_t v170 = &v14[-4 * (v169 & 0x7FFFFFF)];
            }
            uint64_t v171 = (&v170[4 * *((unsigned int *)v14 + 15)])[v136];
            int v172 = *((_DWORD *)v135 + 5);
            uint64_t v173 = v172 & 0x7FFFFFF;
            if ((v172 & 0x7FFFFFF) == *((_DWORD *)v135 + 15))
            {
              unsigned int v205 = v173 + (v173 >> 1);
              if (v205 <= 2) {
                uint64_t v206 = 2;
              }
              else {
                uint64_t v206 = v205;
              }
              *((_DWORD *)v135 + 15) = v206;
              if ((v172 & 0x40000000) != 0) {
                size_t v207 = (uint64_t *)*((void *)v135 - 1);
              }
              else {
                size_t v207 = (uint64_t *)((char *)v135 - 32 * v173);
              }
              size_t v208 = operator new(40 * v206);
              *((void *)v135 - 1) = v208;
              int v209 = v208;
              do
              {
                *int v209 = 0;
                v209[1] = 0;
                v209[2] = 0;
                v209[3] = v135;
                v209 += 4;
              }
              while (v209 != &v208[4 * v206]);
              int v210 = *((_DWORD *)v135 + 5);
              if ((v210 & 0x40000000) != 0) {
                uint64_t v211 = (uint64_t)v208;
              }
              else {
                uint64_t v211 = (uint64_t)v135 - 32 * (v210 & 0x7FFFFFF);
              }
              sub_1CC5E4108((uint64_t)&v427, v207, &v207[4 * v173], v211);
              if (v173)
              {
                memmove((void *)(v211 + 32 * v206), &v207[4 * v173], 8 * v173);
                uint64_t v212 = 4 * v173;
                do
                {
                  BOOL v213 = &v207[v212];
                  if (v207[v212 - 4])
                  {
                    *(void *)*(v213 - 2) = *(v213 - 3);
                    uint64_t v214 = *(v213 - 3);
                    if (v214) {
                      *(void *)(v214 + 16) = *(v213 - 2);
                    }
                  }
                  v212 -= 4;
                }
                while (v212 * 8);
              }
              operator delete(v207);
              int v172 = *((_DWORD *)v135 + 5);
              int v14 = v409;
              uint64_t v12 = v412;
              uint64_t v29 = v403;
            }
            uint64_t v174 = (v172 + 1) & 0x7FFFFFF;
            *((_DWORD *)v135 + 5) = v172 & 0xF8000000 | (v172 + 1) & 0x7FFFFFF;
            if ((v172 & 0x40000000) != 0) {
              uint64_t v175 = (char *)*((void *)v135 - 1);
            }
            else {
              uint64_t v175 = (char *)v135 - 32 * v174;
            }
            uint64_t v176 = (v174 - 1);
            size_t v177 = &v175[32 * v176];
            if (*(void *)v177)
            {
              **((void **)v177 + 2) = *((void *)v177 + 1);
              uint64_t v186 = *((void *)v177 + 1);
              if (v186) {
                *(void *)(v186 + 16) = *((void *)v177 + 2);
              }
            }
            *(void *)size_t v177 = v168;
            if (v168)
            {
              uint64_t v180 = v168[1];
              __int16 v179 = (char **)(v168 + 1);
              uint64_t v178 = v180;
              uint64_t v181 = &v175[32 * v176];
              *((void *)v181 + 1) = v180;
              if (v180) {
                *(void *)(v178 + 16) = v181 + 8;
              }
              *((void *)v181 + 2) = v179;
              *__int16 v179 = v177;
            }
            int v182 = *((_DWORD *)v135 + 5);
            uint64_t v183 = v182 & 0x7FFFFFF;
            if ((v182 & 0x40000000) != 0) {
              uint64_t v184 = (char *)*((void *)v135 - 1);
            }
            else {
              uint64_t v184 = (char *)v135 - 32 * v183;
            }
            *(void *)&v184[32 * *((unsigned int *)v135 + 15) + 8 * (v183 - 1)] = v171;
            goto LABEL_262;
          }
          int v141 = *((_DWORD *)v139 + 5);
          if ((v141 & 0x40000000) != 0)
          {
            int v142 = (uint64_t *)*(v139 - 1);
            if ((v137 & 0x40000000) == 0) {
              goto LABEL_224;
            }
LABEL_220:
            uint64_t v143 = (void **)*(v14 - 1);
          }
          else
          {
            int v142 = &v139[-4 * (v141 & 0x7FFFFFF)];
            if ((v137 & 0x40000000) != 0) {
              goto LABEL_220;
            }
LABEL_224:
            uint64_t v143 = &v14[-4 * (v137 & 0x7FFFFFF)];
          }
          uint64_t v146 = *v142;
          uint64_t v147 = (&v143[4 * *((unsigned int *)v14 + 15)])[v136];
          int v148 = *((_DWORD *)v135 + 5);
          uint64_t v149 = v148 & 0x7FFFFFF;
          if ((v148 & 0x7FFFFFF) == *((_DWORD *)v135 + 15))
          {
            unsigned int v195 = v149 + (v149 >> 1);
            if (v195 <= 2) {
              uint64_t v196 = 2;
            }
            else {
              uint64_t v196 = v195;
            }
            *((_DWORD *)v135 + 15) = v196;
            if ((v148 & 0x40000000) != 0) {
              __int16 v197 = (uint64_t *)*((void *)v135 - 1);
            }
            else {
              __int16 v197 = (uint64_t *)((char *)v135 - 32 * v149);
            }
            __pa = v197;
            char v198 = operator new(40 * v196);
            *((void *)v135 - 1) = v198;
            uint64_t v199 = v198;
            do
            {
              *uint64_t v199 = 0;
              v199[1] = 0;
              v199[2] = 0;
              v199[3] = v135;
              v199 += 4;
            }
            while (v199 != &v198[4 * v196]);
            int v200 = *((_DWORD *)v135 + 5);
            if ((v200 & 0x40000000) != 0) {
              uint64_t v201 = (uint64_t)v198;
            }
            else {
              uint64_t v201 = (uint64_t)v135 - 32 * (v200 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v427, __pa, &__pa[4 * v149], v201);
            if (v149)
            {
              memmove((void *)(v201 + 32 * v196), &__pa[4 * v149], 8 * v149);
              uint64_t v202 = 4 * v149;
              do
              {
                uint64_t v203 = &__pa[v202];
                if (__pa[v202 - 4])
                {
                  *(void *)*(v203 - 2) = *(v203 - 3);
                  uint64_t v204 = *(v203 - 3);
                  if (v204) {
                    *(void *)(v204 + 16) = *(v203 - 2);
                  }
                }
                v202 -= 4;
              }
              while (v202 * 8);
            }
            operator delete(__pa);
            int v148 = *((_DWORD *)v135 + 5);
            int v14 = v409;
            uint64_t v12 = v412;
            uint64_t v29 = v403;
          }
          uint64_t v150 = (v148 + 1) & 0x7FFFFFF;
          *((_DWORD *)v135 + 5) = v148 & 0xF8000000 | (v148 + 1) & 0x7FFFFFF;
          if ((v148 & 0x40000000) != 0) {
            BOOL v151 = (char *)*((void *)v135 - 1);
          }
          else {
            BOOL v151 = (char *)v135 - 32 * v150;
          }
          uint64_t v152 = (v150 - 1);
          uint64_t v153 = &v151[32 * v152];
          if (*(void *)v153)
          {
            **((void **)v153 + 2) = *((void *)v153 + 1);
            uint64_t v185 = *((void *)v153 + 1);
            if (v185) {
              *(void *)(v185 + 16) = *((void *)v153 + 2);
            }
          }
          *(void *)uint64_t v153 = v146;
          if (v146)
          {
            uint64_t v156 = *(void *)(v146 + 8);
            uint64_t v155 = (char **)(v146 + 8);
            uint64_t v154 = v156;
            uint64_t v157 = &v151[32 * v152];
            *((void *)v157 + 1) = v156;
            if (v156) {
              *(void *)(v154 + 16) = v157 + 8;
            }
            *((void *)v157 + 2) = v155;
            *uint64_t v155 = v153;
          }
          int v158 = *((_DWORD *)v135 + 5);
          uint64_t v159 = v158 & 0x7FFFFFF;
          if ((v158 & 0x40000000) != 0) {
            unint64_t v160 = (char *)*((void *)v135 - 1);
          }
          else {
            unint64_t v160 = (char *)v135 - 32 * v159;
          }
          *(void *)&v160[32 * *((unsigned int *)v135 + 15) + 8 * (v159 - 1)] = v147;
          uint64_t v161 = v139[1];
          if (v161 && !*(void *)(v161 + 8))
          {
            int v162 = v421;
            uint64_t v163 = HIDWORD(v422);
            if (v421 == v420)
            {
              if (HIDWORD(v422))
              {
                unint64_t v164 = 0;
                uint64_t v165 = 8 * HIDWORD(v422);
                uint64_t v166 = v421;
                while ((void *)*v166 != v139)
                {
                  if (*v166 == -2) {
                    unint64_t v164 = v166;
                  }
                  ++v166;
                  v165 -= 8;
                  if (!v165)
                  {
                    if (!v164) {
                      goto LABEL_245;
                    }
                    *unint64_t v164 = v139;
                    --v423;
                    goto LABEL_262;
                  }
                }
                goto LABEL_262;
              }
LABEL_245:
              unsigned int v167 = v422;
              if (HIDWORD(v422) < v422)
              {
                ++HIDWORD(v422);
                *(void *)&v421[8 * v163] = v139;
                goto LABEL_262;
              }
            }
            else
            {
              unsigned int v167 = v422;
            }
            if (3 * v167 <= 4 * (HIDWORD(v422) - v423))
            {
              if (v167 >= 0x40) {
                v167 *= 2;
              }
              else {
                unsigned int v167 = 128;
              }
            }
            else if (v167 - HIDWORD(v422) >= v167 >> 3)
            {
              goto LABEL_271;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v420, v167);
            unsigned int v167 = v422;
            int v162 = v421;
LABEL_271:
            unsigned int v187 = v167 - 1;
            unsigned int v188 = (v167 - 1) & ((v139 >> 4) ^ (v139 >> 9));
            uint64_t v189 = &v162[8 * v188];
            unint64_t v190 = (void *)*v189;
            if (*v189 == -1)
            {
              uint64_t v191 = 0;
LABEL_317:
              if (v191) {
                int v215 = v191;
              }
              else {
                int v215 = v189;
              }
              if ((void *)*v215 != v139)
              {
                if (*v215 == -2) {
                  --v423;
                }
                else {
                  ++HIDWORD(v422);
                }
                *int v215 = v139;
              }
            }
            else
            {
              uint64_t v191 = 0;
              int v192 = 1;
              while (v190 != v139)
              {
                if (v191) {
                  BOOL v193 = 0;
                }
                else {
                  BOOL v193 = v190 == (void *)-2;
                }
                if (v193) {
                  uint64_t v191 = v189;
                }
                unsigned int v194 = v188 + v192++;
                unsigned int v188 = v194 & v187;
                uint64_t v189 = &v162[8 * (v194 & v187)];
                unint64_t v190 = (void *)*v189;
                if (*v189 == -1) {
                  goto LABEL_317;
                }
              }
            }
          }
LABEL_262:
          if (++v136 != v29) {
            continue;
          }
          break;
        }
        for (n = (void *)v12[5][6]; ; n = (void *)n[1])
        {
          __int16 v217 = n - 3;
          if (!n) {
            __int16 v217 = 0;
          }
          if (*((unsigned char *)v217 + 16) != 83) {
            break;
          }
        }
        uint64_t v218 = 0;
        uint64_t v219 = *(void *)*(n - 3);
        v427 = v429;
        uint64_t v428 = 0x200000000;
        uint64_t v433 = v219;
        v434 = &v442;
        int v435 = &v443;
        uint64_t v436 = 0;
        int v437 = 0;
        __int16 v438 = 512;
        char v439 = 7;
        uint64_t v431 = 0;
        unint64_t v432 = 0;
        uint64_t v440 = 0;
        uint64_t v441 = 0;
        unint64_t v442 = &unk_1F2616E88;
        v443 = &unk_1F2617008;
        uint64_t v431 = n[2];
        unint64_t v432 = n;
        uint64_t v220 = (unsigned __int8 *)n[3];
        v418[0] = v220;
        if (v220)
        {
          llvm::MetadataTracking::track((uint64_t)v418, v220, 2);
          uint64_t v218 = v418[0];
        }
        sub_1CB8461A4((uint64_t)&v427, 0, v218);
        if (v418[0])
        {
          int v369 = *(unsigned __int8 *)v418[0];
          if ((v369 - 4) > 0x1E)
          {
            if ((v369 - 3) >= 0xFFFFFFFE) {
              uint64_t v381 = v418[0];
            }
            else {
              uint64_t v381 = 0;
            }
            if ((v369 - 3) < 0xFFFFFFFE)
            {
              if (v369 == 3) {
                *(void *)(v418[0] + 8) = 0;
              }
              goto LABEL_343;
            }
            unint64_t v371 = v381 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v418[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v418[0] + 12)) {
              goto LABEL_343;
            }
            uint64_t v370 = *(void *)(v418[0] + 16);
            if ((v370 & 4) == 0) {
              goto LABEL_343;
            }
            unint64_t v371 = v370 & 0xFFFFFFFFFFFFFFF8;
            if (!v371) {
              goto LABEL_343;
            }
          }
          v425[0] = (const char *)v418;
          sub_1CC5FA668(v371 + 16, v425);
        }
LABEL_343:
        uint64_t v221 = (uint64_t)*v12;
        if (v400)
        {
          __int16 v419 = 257;
          if (*(void *)v135 != v221)
          {
            if (*((unsigned __int8 *)v135 + 16) <= 0x14u)
            {
              uint64_t v334 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v434 + 28))(v434, 39, v135, v221);
              BOOL v135 = (llvm::Instruction *)v334;
              if (v334)
              {
                if (*(unsigned __int8 *)(v334 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, void *, uint64_t, void *))*v435 + 2))(v435, v334, v418, v431, v432);
                  if (v428)
                  {
                    int v335 = (llvm::MDNode **)v427;
                    unint64_t v336 = (llvm::MDNode **)((char *)v427 + 16 * v428);
                    do
                    {
                      llvm::Instruction::setMetadata(v135, *(_DWORD *)v335, v335[1]);
                      v335 += 2;
                    }
                    while (v335 != v336);
                  }
                }
              }
            }
            else
            {
              __int16 v426 = 257;
              BOOL v135 = llvm::CastInst::Create(39, (uint64_t)v135, v221, v425, 0);
              (*((void (**)(void **, llvm::Instruction *, void *, uint64_t, void *))*v435 + 2))(v435, v135, v418, v431, v432);
              if (v428)
              {
                uint64_t v222 = (llvm::MDNode **)v427;
                int v223 = (llvm::MDNode **)((char *)v427 + 16 * v428);
                do
                {
                  llvm::Instruction::setMetadata(v135, *(_DWORD *)v222, v222[1]);
                  v222 += 2;
                }
                while (v222 != v223);
              }
            }
          }
        }
        else
        {
          __int16 v419 = 257;
          if (*(void *)v135 != v221)
          {
            if (*((unsigned __int8 *)v135 + 16) <= 0x14u)
            {
              uint64_t v337 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v434 + 28))(v434, 40, v135, v221);
              BOOL v135 = (llvm::Instruction *)v337;
              if (v337)
              {
                if (*(unsigned __int8 *)(v337 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, void *, uint64_t, void *))*v435 + 2))(v435, v337, v418, v431, v432);
                  if (v428)
                  {
                    v384 = (llvm::MDNode **)v427;
                    int v385 = (llvm::MDNode **)((char *)v427 + 16 * v428);
                    do
                    {
                      llvm::Instruction::setMetadata(v135, *(_DWORD *)v384, v384[1]);
                      v384 += 2;
                    }
                    while (v384 != v385);
                  }
                }
              }
            }
            else
            {
              __int16 v426 = 257;
              BOOL v135 = llvm::CastInst::Create(40, (uint64_t)v135, v221, v425, 0);
              (*((void (**)(void **, llvm::Instruction *, void *, uint64_t, void *))*v435 + 2))(v435, v135, v418, v431, v432);
              if (v428)
              {
                uint64_t v224 = (llvm::MDNode **)v427;
                uint64_t v225 = (llvm::MDNode **)((char *)v427 + 16 * v428);
                do
                {
                  llvm::Instruction::setMetadata(v135, *(_DWORD *)v224, v224[1]);
                  v224 += 2;
                }
                while (v224 != v225);
              }
            }
          }
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, v135, (llvm::Value *)1);
        int v338 = *((_DWORD *)v12 + 5);
        if ((v338 & 0x40000000) != 0)
        {
          unint64_t v340 = (void **)*(v12 - 1);
          uint64_t v339 = v338 & 0x7FFFFFF;
          if (v339) {
            goto LABEL_540;
          }
        }
        else
        {
          uint64_t v339 = v338 & 0x7FFFFFF;
          unint64_t v340 = &v12[-4 * v339];
          if (v339)
          {
LABEL_540:
            uint64_t v341 = 32 * v339;
            unint64_t v342 = v340 + 2;
            do
            {
              if (*(v342 - 2))
              {
                **unint64_t v342 = *(v342 - 1);
                uint64_t v343 = (uint64_t)*(v342 - 1);
                if (v343) {
                  *(void *)(v343 + 16) = *v342;
                }
              }
              *(v342 - 2) = 0;
              v342 += 4;
              v341 -= 32;
            }
            while (v341);
          }
        }
        unint64_t v118 = v421;
        uint64_t v119 = HIDWORD(v422);
        if (v421 != v420)
        {
          unsigned int v346 = v422;
LABEL_556:
          if (3 * v346 <= 4 * (HIDWORD(v422) - v423))
          {
            if (v346 >= 0x40) {
              v346 *= 2;
            }
            else {
              unsigned int v346 = 128;
            }
          }
          else if (v346 - HIDWORD(v422) >= v346 >> 3)
          {
LABEL_558:
            unsigned int v347 = v346 - 1;
            unsigned int v348 = (v346 - 1) & ((v12 >> 4) ^ (v12 >> 9));
            uint64_t v126 = &v118[8 * v348];
            uint64_t v349 = (void **)*v126;
            if (*v126 != -1)
            {
              uint64_t v128 = 0;
              int v350 = 1;
              while (v349 != v12)
              {
                if (v128) {
                  BOOL v351 = 0;
                }
                else {
                  BOOL v351 = v349 == (void **)-2;
                }
                if (v351) {
                  uint64_t v128 = v126;
                }
                unsigned int v352 = v348 + v350++;
                unsigned int v348 = v352 & v347;
                uint64_t v126 = &v118[8 * (v352 & v347)];
                uint64_t v349 = (void **)*v126;
                if (*v126 == -1) {
                  goto LABEL_596;
                }
              }
              goto LABEL_603;
            }
LABEL_595:
            uint64_t v128 = 0;
            goto LABEL_596;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v420, v346);
          unsigned int v346 = v422;
          unint64_t v118 = v421;
          goto LABEL_558;
        }
        if (!HIDWORD(v422))
        {
LABEL_553:
          unsigned int v346 = v422;
          if (HIDWORD(v422) >= v422) {
            goto LABEL_556;
          }
LABEL_554:
          HIDWORD(v422) = v119 + 1;
          *(void *)&v118[8 * v119] = v12;
          goto LABEL_603;
        }
        BOOL v120 = 0;
        uint64_t v344 = 8 * HIDWORD(v422);
        int v345 = v421;
        while ((void **)*v345 != v12)
        {
          if (*v345 == -2) {
            BOOL v120 = v345;
          }
          ++v345;
          v344 -= 8;
          if (!v344)
          {
            if (v120) {
              goto LABEL_611;
            }
            goto LABEL_553;
          }
        }
LABEL_603:
        if (v427 != v429) {
          free(v427);
        }
        if (v444 != v446) {
          free(v444);
        }
        char v3 = 1;
LABEL_608:
        uint64_t v6 = v414;
        uint64_t v10 = v407;
LABEL_609:
        ;
      }
      while (v6 != v10);
LABEL_707:
      uint64_t v2 = *(void *)(v401 + 8);
      if (v2 == v399)
      {
        uint64_t v1 = v420;
        unint64_t v386 = v421;
        unsigned int v388 = v422;
        LODWORD(v387) = HIDWORD(v422);
        goto LABEL_710;
      }
    }
  }
  LODWORD(v387) = 0;
  char v3 = 0;
  unsigned int v388 = 8;
  unint64_t v386 = v424;
LABEL_710:
  if (v386 == v1) {
    uint64_t v387 = v387;
  }
  else {
    uint64_t v387 = v388;
  }
  uint64_t v389 = v386;
  if (v387)
  {
    uint64_t v390 = 0;
    while (*(void *)&v386[v390] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v390 += 8;
      if (8 * v387 == v390) {
        goto LABEL_730;
      }
    }
    uint64_t v389 = &v386[v390];
  }
  if (v389 != &v386[8 * v387])
  {
    uint64_t v391 = *(void *)v389;
    int v392 = *(_DWORD *)(*(void *)v389 + 20);
    if ((v392 & 0x40000000) != 0)
    {
      uint64_t v394 = *(void *)(v391 - 8);
      uint64_t v393 = v392 & 0x7FFFFFF;
      if (!v393) {
        goto LABEL_727;
      }
    }
    else
    {
      uint64_t v393 = v392 & 0x7FFFFFF;
      uint64_t v394 = v391 - 32 * v393;
      if (!v393) {
        goto LABEL_727;
      }
    }
    uint64_t v395 = 32 * v393;
    unint64_t v396 = (void **)(v394 + 16);
    do
    {
      if (*(v396 - 2))
      {
        **unint64_t v396 = *(v396 - 1);
        uint64_t v397 = (uint64_t)*(v396 - 1);
        if (v397) {
          *(void *)(v397 + 16) = *v396;
        }
      }
      *(v396 - 2) = 0;
      v396 += 4;
      v395 -= 32;
    }
    while (v395);
LABEL_727:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_730:
  if (v386 != v1) {
    free(v386);
  }
  return v3 & 1;
}

BOOL sub_1CD104FF4(uint64_t a1, unsigned int a2)
{
  if (a2 > 5) {
    return 0;
  }
  for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 24);
    if (*(unsigned __int8 *)(v4 + 16) - 73 > 1)
    {
      BOOL result = sub_1CD105658(v4);
      if (!result) {
        return result;
      }
    }
    else if ((sub_1CD104FF4() & 1) == 0)
    {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CD105070(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 - 32);
  if (!v1 || *(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v1 + 33) & 0x20) == 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 36);
  uint64_t result = 1;
  if (v3 <= 2364)
  {
    BOOL v6 = (v3 - 2132) > 0x2C || ((1 << (v3 - 84)) & 0x1E0801DCE081) == 0;
    if (!v6 || (v3 - 2305) < 4) {
      return result;
    }
    unsigned int v5 = v3 - 2107;
  }
  else
  {
    if (v3 > 2664)
    {
      BOOL v7 = (v3 - 2669) > 0x3F || ((1 << (v3 - 109)) & 0x800000000000037FLL) == 0;
      if (v7 && (v3 - 2665) >= 3) {
        return 0;
      }
      return result;
    }
    BOOL v4 = (v3 - 2444) > 0x30 || ((1 << (v3 + 116)) & 0x1870000000001) == 0;
    if (!v4 || (v3 - 2365) <= 0x3A && ((1 << (v3 - 61)) & 0x400380000000001) != 0) {
      return result;
    }
    unsigned int v5 = v3 - 2586;
  }
  if (v5 >= 2) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD105194(uint64_t a1, llvm::DominatorTree *a2)
{
  uint64_t v2 = a1 + 72;
  unint64_t v3 = -1;
  uint64_t v4 = a1 + 72;
  do
  {
    uint64_t v4 = *(void *)(v4 + 8);
    ++v3;
  }
  while (v4 != v2);
  if (v3 >= 2)
  {
    char v48 = 0;
    uint64_t v51 = a1 + 72;
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 80);
      if (v5 == v2) {
        return v48 & 1;
      }
      char v49 = 0;
      do
      {
        uint64_t v6 = v5 - 24;
        if (!v5) {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          while (1)
          {
            uint64_t v8 = *(void *)(v7 + 24);
            unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
            BOOL v10 = v8 && v9 >= 0x1C;
            if (v10 && v9 - 29 <= 0xA) {
              break;
            }
            uint64_t v7 = *(void *)(v7 + 8);
            if (!v7) {
              goto LABEL_20;
            }
          }
          uint64_t v12 = v6 + 40;
          uint64_t v13 = *(void *)(v6 + 48);
          while (2)
          {
            if (v13 == v12) {
              goto LABEL_20;
            }
            uint64_t v14 = 0;
            if (v13) {
              uint64_t v15 = v13 - 24;
            }
            else {
              uint64_t v15 = 0;
            }
            int v16 = *(unsigned __int8 *)(v15 + 16);
            if (v16 == 84)
            {
              uint64_t v17 = *(void *)(v15 - 32);
              if (v17 && !*(unsigned char *)(v17 + 16) && *(void *)(v17 + 24) == *(void *)(v15 + 72))
              {
                if ((*(unsigned char *)(v17 + 33) & 0x20) != 0) {
                  uint64_t v14 = v13 - 24;
                }
                else {
                  uint64_t v14 = 0;
                }
              }
              else
              {
                uint64_t v14 = 0;
              }
            }
            uint64_t v13 = *(void *)(v13 + 8);
            int v18 = sub_1CD105584(v15);
            int v19 = v18;
            BOOL v21 = v16 == 89 || v16 == 92;
            if (v14
              && ((int v22 = *(_DWORD *)(*(void *)(v14 - 32) + 36), (v22 - 2713) <= 0x12)
                ? (BOOL v23 = ((1 << (v22 + 103)) & 0x77855) == 0)
                : (BOOL v23 = 1),
                  !v23 || (v22 - 2098) < 7))
            {
              int v24 = 1;
              if ((v18 & 1) == 0) {
                goto LABEL_45;
              }
            }
            else
            {
              int v24 = 0;
              if (v18) {
                break;
              }
LABEL_45:
              if (v16 == 89 || v16 == 92)
              {
                if (!v14) {
                  break;
                }
LABEL_50:
                if (v24)
                {
                  int v25 = *(_DWORD *)(v15 + 20);
                  if ((v25 & 0x40000000) != 0) {
                    uint64_t v26 = *(unsigned __int8 ***)(v15 - 8);
                  }
                  else {
                    uint64_t v26 = (unsigned __int8 **)(v15 - 32 * (v25 & 0x7FFFFFF));
                  }
                  int v29 = 0;
                  uint64_t v31 = *v26;
                  if (v31[16] <= 0x1Bu) {
                    uint64_t v30 = 0;
                  }
                  else {
                    uint64_t v30 = (const llvm::Instruction *)v31;
                  }
                  uint64_t v27 = 1;
                }
                else
                {
                  uint64_t v27 = 0;
                  int v28 = *(_DWORD *)(*(void *)(v14 - 32) + 36);
                  int v29 = 1;
                  uint64_t v30 = 0;
                  if (v28 != 2131 && v28 != 1830) {
                    continue;
                  }
                }
LABEL_68:
                int v32 = *(_DWORD *)(v15 + 20);
                if ((v32 & 0x40000000) != 0) {
                  uint64_t v33 = *(void *)(v15 - 8);
                }
                else {
                  uint64_t v33 = v15 - 32 * (v32 & 0x7FFFFFF);
                }
                uint64_t v34 = *(void *)(v33 + 32 * v27);
                unsigned int v35 = *(unsigned __int8 *)(v34 + 16);
                if (v34) {
                  BOOL v36 = v35 >= 0x1C;
                }
                else {
                  BOOL v36 = 0;
                }
                if (v36)
                {
                  uint64_t v37 = *(void *)(v34 + 8);
                  if (v37) {
                    LODWORD(v37) = *(void *)(v37 + 8) == 0;
                  }
                  int v38 = v21 | v37;
                  if (v35 == 83) {
                    int v38 = 0;
                  }
                  if ((v24 | v38) == 1)
                  {
                    uint64_t v39 = *(void *)(v34 + 32);
                    if (v30 && llvm::DominatorTree::dominates(a2, (const llvm::Value *)v34, v30)) {
                      uint64_t v39 = *((void *)v30 + 4);
                    }
                    int v40 = (llvm::Instruction *)(v39 - 24);
                    if (v39) {
                      uint64_t v41 = v39 - 24;
                    }
                    else {
                      uint64_t v41 = 0;
                    }
                    if (*(void *)(v41 + 40) != *(void *)(v15 + 40))
                    {
                      while (*(unsigned char *)(v41 + 16) == 83)
                      {
                        uint64_t v39 = *(void *)(v39 + 8);
                        int v40 = (llvm::Instruction *)(v39 - 24);
                        if (v39) {
                          uint64_t v41 = v39 - 24;
                        }
                        else {
                          uint64_t v41 = 0;
                        }
                      }
                      if (!v29 || sub_1CD105658(v34))
                      {
                        if (!v19
                          || (uint64_t v42 = *(void *)(v15 + 8)) == 0
                          || *(void *)(v42 + 8)
                          || (uint64_t v43 = *(void *)(v42 + 24), *(unsigned char *)(v43 + 16) != 74)
                          || !sub_1CD104FF4(v43, 0))
                        {
                          if (*(unsigned char *)(v15 + 16) != 74 || sub_1CD105584(v34) && !sub_1CD104FF4(v15, 0))
                          {
                            if (v16 != 92 && v16 != 89) {
                              goto LABEL_109;
                            }
                            uint64_t v44 = *(llvm::Type **)v15;
                            if ((*(_DWORD *)(*(void *)v15 + 8) & 0xFE) == 0x12) {
                              uint64_t v44 = (llvm::Type *)**((void **)v44 + 2);
                            }
                            unsigned int v45 = llvm::Type::getPrimitiveSizeInBits(v44) - 16;
                            if (v45 <= 0x30 && ((1 << v45) & 0x1000000010001) != 0)
                            {
LABEL_109:
                              llvm::Instruction::moveBefore((llvm::Instruction *)v15, v40);
                              char v48 = 1;
                              char v49 = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                continue;
              }
              if (v14) {
                goto LABEL_50;
              }
              if ((v16 | 8) != 0x4A) {
                continue;
              }
            }
            break;
          }
          uint64_t v27 = 0;
          int v29 = 0;
          uint64_t v30 = 0;
          goto LABEL_68;
        }
LABEL_20:
        uint64_t v5 = *(void *)(v5 + 8);
        uint64_t v2 = v51;
      }
      while (v5 != v51);
      if ((v49 & 1) == 0) {
        return v48 & 1;
      }
    }
  }
  char v48 = 0;
  return v48 & 1;
}

uint64_t sub_1CD105584(uint64_t a1)
{
  while (1)
  {
    int v1 = *(unsigned __int8 *)(a1 + 16);
    if (v1 != 77) {
      break;
    }
    int v2 = *(_DWORD *)(a1 + 20);
    if ((v2 & 0x40000000) != 0) {
      unint64_t v3 = *(uint64_t **)(a1 - 8);
    }
    else {
      unint64_t v3 = (uint64_t *)(a1 - 32 * (v2 & 0x7FFFFFF));
    }
    a1 = *v3;
    if (*(unsigned __int8 *)(*v3 + 16) <= 0x1Bu) {
      return 0;
    }
  }
  if (v1 == 73) {
    return 1;
  }
  if (v1 == 84)
  {
    uint64_t v4 = *(void *)(a1 - 32);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 16)
        && *(void *)(v4 + 24) == *(void *)(a1 + 72)
        && (*(unsigned char *)(v4 + 33) & 0x20) != 0
        && *(_DWORD *)(v4 + 36) == 1982)
      {
        int v5 = *(_DWORD *)(a1 + 20);
        uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v5 & 0x7FFFFFF);
        uint64_t v7 = *(void *)(v6 + 32);
        if (*(unsigned char *)(v7 + 16) == 16)
        {
          uint64_t v8 = (void *)(v7 + 24);
          if (*(_DWORD *)(v7 + 32) >= 0x41u) {
            uint64_t v8 = (void *)*v8;
          }
          if (*v8 == 12) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

BOOL sub_1CD105658(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84)
  {
    uint64_t v2 = *(void *)(a1 - 32);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 16) && *(void *)(v2 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v2 + 33) & 0x20) != 0)
      {
        if ((uint64_t v3 = *(void *)(a1 + 64)) != 0 && (*(unsigned char *)(v3 + 17) & 0x10) != 0
          || ((__int32 v13 = 7, !sub_1CC5CB59C(a1, &v13, 1uLL))
           || (uint64_t v5 = *(void *)(a1 - 32)) != 0
           && !*(unsigned char *)(v5 + 16)
           && *(void *)(v5 + 24) == *(void *)(a1 + 72)
           && *(_DWORD *)(v5 + 36) == 7)
          && llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
        {
          if (*(unsigned __int8 *)(*(void *)a1 + 8) < 7u) {
            return 1;
          }
        }
      }
    }
  }
  int v6 = *(unsigned __int8 *)(a1 + 16);
  int v7 = v6 - 28;
  unsigned int v8 = v6 - 75;
  return v7 == 14 || v7 == 54 || (v7 & 0xFFFFFFFD) == 16 || v7 == 21 || v8 > 0xFFFFFFFD;
}

uint64_t sub_1CD105760(uint64_t a1, char a2, unsigned int a3, int a4, char a5, uint64_t *a6)
{
  v132[8] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 72;
  unint64_t v8 = -1;
  uint64_t v9 = a1 + 72;
  do
  {
    uint64_t v9 = *(void *)(v9 + 8);
    ++v8;
  }
  while (v9 != v7);
  if (v8 < 2) {
    goto LABEL_272;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCFB540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCFB540))
  {
    byte_1EBCFB531 = 1;
    __cxa_guard_release(&qword_1EBCFB540);
  }
  char v10 = byte_1EBCFB531 ? 0 : a5;
  char v119 = v10;
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11 == v7)
  {
LABEL_272:
    char v115 = 0;
    return v115 & 1;
  }
  char v115 = 0;
  int64x2_t v122 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v120 = v7;
  do
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = v11 - 24;
      if (!v11) {
        uint64_t v13 = 0;
      }
      uint64_t v15 = v13 + 40;
      uint64_t v14 = *(void *)(v13 + 40);
      uint64_t v121 = v11;
      if (v14 == v13 + 40) {
        goto LABEL_261;
      }
      if (v14) {
        uint64_t v16 = v14 - 24;
      }
      else {
        uint64_t v16 = 0;
      }
      if (*(unsigned char *)(v16 + 16) != 30)
      {
        switch(*(unsigned char *)(v16 + 16))
        {
          case 0x1E:
            __break(1u);
            JUMPOUT(0x1CD1063C0);
          case 0x1F:
            int v112 = (*(_DWORD *)(v16 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_264;
          case 0x20:
          case 0x26:
            int v112 = (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_264;
          case 0x21:
          case 0x25:
            break;
          case 0x24:
            int v112 = *(_WORD *)(v16 + 18) & 1;
            goto LABEL_264;
          case 0x27:
            int v112 = *(_DWORD *)(v16 + 80) + 1;
LABEL_264:
            if (!v112) {
              goto LABEL_261;
            }
            break;
          default:
            goto LABEL_261;
        }
      }
      uint64_t v17 = *(void *)(v13 + 48);
      if (v17 == v15) {
        goto LABEL_261;
      }
      do
      {
        uint64_t v18 = *(void *)(v17 + 8);
        uint64_t v19 = v17 - 24;
        if (v17) {
          uint64_t v20 = v17 - 24;
        }
        else {
          uint64_t v20 = 0;
        }
        if (*(unsigned char *)(v20 + 16) == 46)
        {
          unsigned int v125 = (void *)1;
          int64x2_t v126 = v122;
          int64x2_t v127 = v122;
          int64x2_t v128 = v122;
          int64x2_t v129 = v122;
          BOOL v130 = v132;
          uint64_t v131 = 0x800000000;
          int v21 = sub_1CD114F9C(v20, a3, (uint64_t)&v125, 0);
          char v22 = v21;
          if (v21)
          {
            uint64_t v33 = v15;
            if (v18 != v15)
            {
              BOOL v23 = &v126;
              if (v125)
              {
                int v24 = 7;
              }
              else
              {
                BOOL v23 = (int64x2_t *)v126.i64[0];
                int v24 = v126.i32[2] - 1;
              }
              uint64_t v33 = v18;
              while (1)
              {
                uint64_t v25 = v33 - 24;
                if (!v33) {
                  uint64_t v25 = 0;
                }
                if (!(v125 & 1 | (v126.i32[2] != 0)))
                {
                  uint64_t v33 = v18;
                  goto LABEL_39;
                }
                unsigned int v26 = ((v25 >> 4) ^ (v25 >> 9)) & v24;
                uint64_t v27 = v23->i64[v26];
                if (v25 != v27) {
                  break;
                }
LABEL_37:
                uint64_t v33 = *(void *)(v33 + 8);
                if (v33 == v15)
                {
                  uint64_t v33 = v15;
                  goto LABEL_39;
                }
              }
              int v28 = 1;
              while (v27 != -4096)
              {
                unsigned int v29 = v26 + v28++;
                unsigned int v26 = v29 & v24;
                uint64_t v27 = v23->i64[v26];
                if (v25 == v27) {
                  goto LABEL_37;
                }
              }
            }
LABEL_39:
            if (v131)
            {
              uint64_t v30 = (llvm::Instruction **)v130;
              uint64_t v31 = 8 * v131;
              do
              {
                int v32 = *v30++;
                v12 |= sub_1CD115180(v32, 0);
                v31 -= 8;
              }
              while (v31);
            }
            v12 |= sub_1CD115180((llvm::Instruction *)v20, 0);
          }
          else
          {
            uint64_t v33 = v18;
          }
          if (v130 != v132) {
            free(v130);
          }
          if (v125)
          {
            if (v22) {
              goto LABEL_53;
            }
          }
          else
          {
            MEMORY[0x1D25D9CD0](v126.i64[0], 8);
            if (v22) {
              goto LABEL_53;
            }
          }
        }
        else
        {
          uint64_t v33 = *(void *)(v17 + 8);
        }
        unsigned int v124 = &v125;
        unsigned int v125 = 0;
        if (sub_1CC04C34C(&v124, v20) && v125) {
          goto LABEL_51;
        }
        int v34 = *(unsigned __int8 *)(v20 + 16);
        if ((v34 - 81) < 2) {
          goto LABEL_51;
        }
        if (v34 == 84)
        {
          uint64_t v36 = *(void *)(v20 - 32);
          if (!v36) {
            goto LABEL_199;
          }
          if (!*(unsigned char *)(v36 + 16)
            && *(void *)(v36 + 24) == *(void *)(v20 + 72)
            && (*(unsigned char *)(v36 + 33) & 0x20) != 0)
          {
            int v71 = *(_DWORD *)(*(void *)(v17 - 56) + 36);
            if (v71 > 1821)
            {
              if (v71 == 2131 || v71 == 1830)
              {
                if (!*(unsigned char *)(*(void *)v19 + 8) && sub_1CD104FF4(v17 - 24, 0))
                {
                  uint64_t v72 = *(void *)(v19 - 32 * (*(_DWORD *)(v17 - 4) & 0x7FFFFFF));
                  if (!v72) {
                    goto LABEL_51;
                  }
                  if (*(unsigned __int8 *)(v72 + 16) < 0x1Cu) {
                    goto LABEL_51;
                  }
                  uint64_t v73 = *(void *)(v72 + 8);
                  if (!v73 || *(void *)(v73 + 8) || !sub_1CD105658(v72)) {
                    goto LABEL_51;
                  }
                }
              }
              else if (v71 == 1822)
              {
                goto LABEL_51;
              }
            }
            else if (v71 == 139 || v71 == 1275 || v71 == 1281)
            {
              goto LABEL_51;
            }
            if (*(_DWORD *)(*(void *)(v17 - 56) + 36) == 280)
            {
              uint64_t v74 = *(void *)(v17 - 16);
              if (!v74)
              {
LABEL_164:
                unsigned int v35 = (llvm::Instruction *)(v17 - 24);
                goto LABEL_52;
              }
              while (1)
              {
                uint64_t v75 = *(void *)(v74 + 24);
                if (*(unsigned char *)(v75 + 16) != 49) {
                  break;
                }
                int v76 = *(_DWORD *)(v75 + 20);
                uint64_t v77 = (v76 & 0x40000000) != 0 ? *(void *)(v75 - 8) : v75 - 32 * (v76 & 0x7FFFFFF);
                if (*(void *)(v77 + 32) != v19 || (*(unsigned char *)(v75 + 17) & 0x20) == 0) {
                  break;
                }
                uint64_t v74 = *(void *)(v74 + 8);
                if (!v74) {
                  goto LABEL_164;
                }
              }
            }
          }
          int v34 = *(unsigned __int8 *)(v20 + 16);
        }
        if ((v34 - 67) <= 1)
        {
          uint64_t v37 = *(void *)(v20 + 8);
          if (v37)
          {
            char v38 = a3;
            if (v34 == 68) {
              char v38 = 1;
            }
            do
            {
              uint64_t v39 = *(void *)(v37 + 24);
              int v40 = *(unsigned __int8 *)(v39 + 16);
              uint64_t v41 = (v40 - 41);
              if (v41 > 0x28) {
                goto LABEL_73;
              }
              if (((1 << (v40 - 41)) & 0xCE200015) != 0) {
                goto LABEL_67;
              }
              if (v41 == 40)
              {
                int v42 = *(_WORD *)(v39 + 18) & 0x3F;
                if ((v42 - 34) >= 4)
                {
                  if ((v42 - 38) > 3)
                  {
                    if ((v38 & 1) == 0) {
                      goto LABEL_84;
                    }
                  }
                  else if (v34 == 67)
                  {
                    goto LABEL_199;
                  }
                }
                else if (v34 != 67)
                {
                  goto LABEL_84;
                }
              }
              else
              {
LABEL_73:
                if (v34 != 67) {
                  goto LABEL_84;
                }
                if (v40 != 58 && (v40 - 53) >= 5) {
                  goto LABEL_199;
                }
              }
LABEL_67:
              uint64_t v37 = *(void *)(v37 + 8);
            }
            while (v37);
          }
LABEL_51:
          unsigned int v35 = (llvm::Instruction *)v20;
LABEL_52:
          v12 |= sub_1CD115180(v35, 0);
          goto LABEL_53;
        }
LABEL_84:
        if (v34 == 74)
        {
          int v44 = *(_DWORD *)(v20 + 20);
          if ((v44 & 0x40000000) != 0) {
            unsigned int v45 = *(uint64_t **)(v20 - 8);
          }
          else {
            unsigned int v45 = (uint64_t *)(v20 - 32 * (v44 & 0x7FFFFFF));
          }
          uint64_t v46 = *v45;
          if (*(unsigned __int8 *)(v46 + 16) <= 0x1Bu) {
            uint64_t v47 = 0;
          }
          else {
            uint64_t v47 = v46;
          }
          if (sub_1CD104FF4(v20, 0) || !v47 || !sub_1CD105658(v47)) {
            goto LABEL_51;
          }
          int v34 = *(unsigned __int8 *)(v20 + 16);
        }
        if (v34 == 73)
        {
          int v48 = *(_DWORD *)(v20 + 20);
          if ((v48 & 0x40000000) != 0) {
            uint64_t v49 = *(void *)(v20 - 8);
          }
          else {
            uint64_t v49 = v20 - 32 * (v48 & 0x7FFFFFF);
          }
          uint64_t v50 = *(void *)(*(void *)v49 + 8);
          if (v50 && !*(void *)(v50 + 8)) {
            goto LABEL_199;
          }
          uint64_t v51 = *(void *)(v20 + 8);
          if (!v51) {
            goto LABEL_199;
          }
          while (*(void *)(*(void *)(v51 + 24) + 40) == *(void *)(v20 + 40))
          {
            uint64_t v51 = *(void *)(v51 + 8);
            if (!v51) {
              goto LABEL_199;
            }
          }
          if (sub_1CD104FF4(v20, 0)) {
            goto LABEL_51;
          }
          int v34 = *(unsigned __int8 *)(v20 + 16);
        }
        if (v34 != 53) {
          goto LABEL_170;
        }
        int v52 = *(_DWORD *)(v20 + 20);
        if ((v52 & 0x40000000) != 0) {
          uint64_t v53 = *(void *)(v20 - 8);
        }
        else {
          uint64_t v53 = v20 - 32 * (v52 & 0x7FFFFFF);
        }
        uint64_t v54 = *(void *)(v53 + 32);
        if (*(unsigned char *)(v54 + 16) == 16)
        {
          uint64_t v55 = (void *)(v54 + 24);
          if (*(_DWORD *)(v54 + 32) >= 0x41u) {
            uint64_t v55 = (void *)*v55;
          }
          unsigned int v56 = *(_DWORD *)v55;
          unsigned int v125 = (void *)1;
          int64x2_t v126 = v122;
          int64x2_t v127 = v122;
          int64x2_t v128 = v122;
          int64x2_t v129 = v122;
          BOOL v130 = v132;
          uint64_t v131 = 0x800000000;
          int v57 = sub_1CD109F20(v20, a2, a3, v56, (uint64_t)&v125);
          char v58 = v57;
          if (v57)
          {
            uint64_t v59 = v15;
            if (v33 != v15)
            {
              uint64_t v60 = &v126;
              if (v125)
              {
                int v61 = 7;
              }
              else
              {
                uint64_t v60 = (int64x2_t *)v126.i64[0];
                int v61 = v126.i32[2] - 1;
              }
              uint64_t v59 = v33;
              while (1)
              {
                uint64_t v62 = v59 - 24;
                if (!v59) {
                  uint64_t v62 = 0;
                }
                if (!(v125 & 1 | (v126.i32[2] != 0)))
                {
                  uint64_t v59 = v33;
                  goto LABEL_129;
                }
                unsigned int v63 = ((v62 >> 4) ^ (v62 >> 9)) & v61;
                uint64_t v64 = v60->i64[v63];
                if (v62 != v64) {
                  break;
                }
LABEL_127:
                uint64_t v59 = *(void *)(v59 + 8);
                if (v59 == v15)
                {
                  uint64_t v59 = v15;
                  goto LABEL_129;
                }
              }
              int v65 = 1;
              while (v64 != -4096)
              {
                unsigned int v66 = v63 + v65++;
                unsigned int v63 = v66 & v61;
                uint64_t v64 = v60->i64[v63];
                if (v62 == v64) {
                  goto LABEL_127;
                }
              }
            }
LABEL_129:
            char v67 = v57;
            if (v131)
            {
              uint64_t v68 = (llvm::Instruction **)v130;
              uint64_t v69 = 8 * v131;
              do
              {
                uint64_t v70 = *v68++;
                v12 |= sub_1CD115180(v70, 0);
                v69 -= 8;
              }
              while (v69);
            }
            v12 |= sub_1CD115180((llvm::Instruction *)v20, 0);
            char v58 = v67;
          }
          else
          {
            uint64_t v59 = v33;
          }
          if (v130 != v132) {
            free(v130);
          }
          if (v125)
          {
            if (v58) {
              goto LABEL_143;
            }
          }
          else
          {
            MEMORY[0x1D25D9CD0](v126.i64[0], 8);
            if (v58)
            {
LABEL_143:
              uint64_t v33 = v59;
              goto LABEL_53;
            }
          }
          int v34 = *(unsigned __int8 *)(v20 + 16);
          uint64_t v33 = v59;
LABEL_170:
          if (v34 == 41)
          {
            int v80 = *(_DWORD *)(v20 + 20);
            if ((v80 & 0x40000000) != 0) {
              uint64_t v81 = *(void *)(v20 - 8);
            }
            else {
              uint64_t v81 = v20 - 32 * (v80 & 0x7FFFFFF);
            }
            if (*(unsigned char *)(*(void *)(v81 + 32) + 16) == 16 && sub_1CD115444(v20, 0)) {
              goto LABEL_51;
            }
          }
          else if (v34 == 54)
          {
            int v78 = *(_DWORD *)(v20 + 20);
            if ((v78 & 0x40000000) != 0) {
              uint64_t v79 = *(void *)(v20 - 8);
            }
            else {
              uint64_t v79 = v20 - 32 * (v78 & 0x7FFFFFF);
            }
            if (*(unsigned char *)(*(void *)(v79 + 32) + 16) == 16)
            {
              uint64_t v82 = *(void *)(v20 + 8);
              if (!v82) {
                goto LABEL_51;
              }
              while (1)
              {
                uint64_t v83 = *(void *)(v82 + 24);
                if (*(unsigned char *)(v83 + 16) != 56) {
                  break;
                }
                int v84 = *(_DWORD *)(v83 + 20);
                uint64_t v85 = (v84 & 0x40000000) != 0 ? *(void *)(v83 - 8) : v83 - 32 * (v84 & 0x7FFFFFF);
                uint64_t v86 = *(void *)(v85 + 32);
                if (!v86 || *(unsigned char *)(v86 + 16) != 16) {
                  break;
                }
                uint64_t v88 = (void *)(v86 + 24);
                if (*(_DWORD *)(v86 + 32) >= 0x41u) {
                  uint64_t v88 = (void *)*v88;
                }
                uint8x8_t v89 = (uint8x8_t)vcnt_s8((int8x8_t)(*v88 + 1));
                v89.i16[0] = vaddlv_u8(v89);
                if (v89.u32[0] != 1) {
                  break;
                }
                uint64_t v82 = *(void *)(v82 + 8);
                if (!v82) {
                  goto LABEL_51;
                }
              }
            }
          }
          else if (v34 == 45 && sub_1CD10A1BC(v20, a3, a4, a6))
          {
            goto LABEL_51;
          }
        }
LABEL_199:
        unsigned __int32 v90 = 0;
        unsigned int v125 = &v126.u64[1];
        v126.i64[0] = 0x800000000;
        unsigned int v91 = *(unsigned __int8 *)(v17 - 8);
        while (1)
        {
          uint64_t v92 = v91 - 54;
          if (v92 > 0x23) {
            goto LABEL_231;
          }
          if (((1 << (v91 - 54)) & 0x800987000) == 0) {
            break;
          }
LABEL_202:
          if (v90 >= v126.i32[1]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v125 + v90) = v19;
          unsigned __int32 v90 = ++v126.i32[0];
          int v93 = *(_DWORD *)(v19 + 20);
          if ((v93 & 0x40000000) != 0) {
            uint64_t v94 = *(uint64_t **)(v19 - 8);
          }
          else {
            uint64_t v94 = (uint64_t *)(v19 - 32 * (v93 & 0x7FFFFFF));
          }
          uint64_t v19 = *v94;
          unsigned int v91 = *(unsigned __int8 *)(*v94 + 16);
          if (*v94) {
            BOOL v95 = v91 >= 0x1C;
          }
          else {
            BOOL v95 = 0;
          }
          if (!v95) {
            goto LABEL_253;
          }
        }
        if (v91 == 54)
        {
          int v96 = *(_DWORD *)(v19 + 20);
          if ((v96 & 0x40000000) != 0) {
            uint64_t v97 = *(void *)(v19 - 8);
          }
          else {
            uint64_t v97 = v19 - 32 * (v96 & 0x7FFFFFF);
          }
          uint64_t v98 = *(void *)(v97 + 32);
          if (v98) {
            BOOL v99 = *(unsigned char *)(v98 + 16) == 16;
          }
          else {
            BOOL v99 = 0;
          }
          if (!v99) {
            goto LABEL_231;
          }
          BOOL v100 = (void *)(v98 + 24);
          if (*(_DWORD *)(v98 + 32) >= 0x41u) {
            BOOL v100 = (void *)*v100;
          }
          if (*v100 != 16) {
            goto LABEL_231;
          }
          goto LABEL_202;
        }
        if (v92 != 6)
        {
LABEL_231:
          if ((v119 & 1) == 0 && sub_1CD105070(v19))
          {
            if (v91 != 84)
            {
              uint64_t v105 = 0;
              char v103 = 1;
              goto LABEL_239;
            }
            uint64_t v106 = *(void *)(v19 + 64);
            if ((!v106 || (*(unsigned char *)(v106 + 12) & 0x40) == 0)
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v19, 6) & 1) == 0)
            {
              uint64_t v105 = 0;
              char v103 = 1;
              unsigned __int32 v90 = v126.i32[0];
              goto LABEL_239;
            }
          }
LABEL_253:
          int v104 = 0;
          goto LABEL_254;
        }
        uint64_t v101 = *(void *)(v19 - 32);
        int v102 = *(_DWORD *)(*(void *)v101 + 8);
        if ((v102 & 0xFE) == 0x12) {
          int v102 = *(_DWORD *)(**(void **)(*(void *)v101 + 16) + 8);
        }
        if ((v102 & 0xFFFFFF00) != 0x4000) {
          goto LABEL_253;
        }
        char v103 = 0;
        int v104 = 0;
        uint64_t v105 = v19;
        if ((sub_1CD0FF880(v101, 0) & 1) == 0) {
          goto LABEL_254;
        }
LABEL_239:
        if (v90 >= v126.i32[1]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v125 + v90) = v19;
        unsigned __int32 v107 = ++v126.i32[0];
        if ((v103 & 1) == 0)
        {
          while (1)
          {
            uint64_t v105 = *(void *)(v105 - 32);
            int v108 = *(unsigned __int8 *)(v105 + 16);
            if (!v105 || v108 != 77) {
              break;
            }
            if (v107 >= v126.i32[1]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v125 + v107) = v105;
            unsigned __int32 v107 = ++v126.i32[0];
          }
          if (v108 == 62)
          {
            if (v107 >= v126.i32[1]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v125 + v107) = v105;
            unsigned __int32 v107 = ++v126.i32[0];
          }
        }
        if (!v107) {
          goto LABEL_253;
        }
        int v104 = 0;
        uint64_t v109 = (llvm::Instruction **)v125;
        uint64_t v110 = 8 * v107;
        do
        {
          uint64_t v111 = *v109++;
          v104 |= sub_1CD115180(v111, 1);
          v110 -= 8;
        }
        while (v110);
LABEL_254:
        if (v125 != &v126.u64[1]) {
          free(v125);
        }
        v12 |= v104;
LABEL_53:
        uint64_t v17 = v33;
      }
      while (v33 != v15);
LABEL_261:
      uint64_t v11 = *(void *)(v121 + 8);
    }
    while (v11 != v120);
    if ((v12 & 1) == 0) {
      break;
    }
    uint64_t v11 = *(void *)(a1 + 80);
    char v115 = 1;
  }
  while (v11 != v120);
  return v115 & 1;
}

uint64_t sub_1CD1063EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    uint64_t v2 = v1 - 24;
  }
  else {
    uint64_t v2 = 0;
  }
  for (uint64_t i = *(void *)(v2 + 48); i != v2 + 40; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = i - 24;
    if (!i) {
      uint64_t v4 = 0;
    }
    if (*(unsigned char *)(v4 + 16) != 83) {
      break;
    }
  }
  for (j = a1 + 72; v1 != j; uint64_t v1 = *(void *)(v1 + 8))
  {
    uint64_t v6 = v1 - 24;
    if (!v1) {
      uint64_t v6 = 0;
    }
    if (v6 != v2)
    {
      uint64_t v7 = v6 + 40;
      uint64_t v8 = *(void *)(v6 + 48);
      if (v8 != v6 + 40)
      {
        do
        {
          uint64_t v9 = *(void *)(v8 + 8);
          uint64_t v10 = v8 - 24;
          if (v8) {
            uint64_t v11 = v8 - 24;
          }
          else {
            uint64_t v11 = 0;
          }
          if (*(unsigned char *)(v11 + 16) == 84)
          {
            uint64_t v12 = *(void *)(v11 - 32);
            if (v12)
            {
              if (!*(unsigned char *)(v12 + 16)
                && *(void *)(v12 + 24) == *(void *)(v11 + 72)
                && (*(unsigned char *)(v12 + 33) & 0x20) != 0
                && llvm::GetItrKind((llvm *)*(unsigned int *)(*(void *)(v8 - 56) + 36))
                && (*(_DWORD *)(*(void *)v10 + 8) & 0xFE) != 0x12)
              {
                int v13 = *(unsigned __int8 *)(v8 - 8);
                if (v13 == 84)
                {
                  uint64_t v14 = 0;
                }
                else if (v13 == 39)
                {
                  uint64_t v14 = (*(_DWORD *)(v8 + 56) + 1);
                }
                else
                {
                  uint64_t v14 = 2;
                }
                int v15 = *(_DWORD *)(v8 - 4);
                uint64_t v16 = v15 & 0x7FFFFFF;
                uint64_t v17 = v10 - 32 * v16;
                if (v15 < 0 && (uint64_t v20 = *(void *)(v17 - 8), (v20 & 0xFFFFFFFF0) != 0)) {
                  uint64_t v18 = (*(_DWORD *)(v17 - 12) - *(_DWORD *)(v17 - v20));
                }
                else {
                  uint64_t v18 = 0;
                }
                if (v17 == v10 - 32 * v14 - 32 * v18 - 32) {
LABEL_33:
                }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                uint64_t v19 = 32 * v16 - 32 * v14 - 32 * v18 - 32;
                while (*(unsigned __int8 *)(*(void *)v17 + 16) <= 0x1Bu)
                {
                  v17 += 32;
                  v19 -= 32;
                  if (!v19) {
                    goto LABEL_33;
                  }
                }
              }
            }
          }
          uint64_t v8 = v9;
        }
        while (v9 != v7);
      }
    }
  }
  return 0;
}

uint64_t sub_1CD106680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v141 = a1 + 72;
  if (v4 == a1 + 72) {
    return 0;
  }
  do
  {
    if (v4) {
      uint64_t v6 = v4 - 24;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v144 = v6;
    uint64_t v9 = *(void *)(v6 + 40);
    uint64_t v8 = v6 + 40;
    uint64_t v7 = v9;
    if (v9 == v8) {
      goto LABEL_240;
    }
    if (v7) {
      uint64_t v10 = v7 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 16) != 30)
    {
      switch(*(unsigned char *)(v10 + 16))
      {
        case 0x1E:
          __break(1u);
          JUMPOUT(0x1CD1073D0);
        case 0x1F:
          int v137 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_243;
        case 0x20:
        case 0x26:
          int v137 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_243;
        case 0x21:
        case 0x25:
          break;
        case 0x24:
          int v137 = *(_WORD *)(v10 + 18) & 1;
          goto LABEL_243;
        case 0x27:
          int v137 = *(_DWORD *)(v10 + 80) + 1;
LABEL_243:
          if (!v137) {
            goto LABEL_240;
          }
          break;
        default:
          goto LABEL_240;
      }
    }
    char v11 = 0;
    uint64_t v12 = 0;
    do
    {
      char v13 = v11;
      uint64_t v14 = &__b[392 * v12 + 16];
      *uint64_t v14 = 1;
      for (uint64_t i = 1; i != 49; i += 3)
        LODWORD(v14[i]) = -1;
      char v11 = 1;
      uint64_t v12 = 1;
    }
    while ((v13 & 1) == 0);
    uint64_t v142 = v4;
    memset_pattern16(__b, &xmmword_1CDC7F8E0, 0x10uLL);
    uint64_t v16 = v144;
    uint64_t v17 = *(void *)(v144 + 48);
    if (v17 != v8)
    {
      do
      {
        uint64_t v18 = v17 - 24;
        if (v17) {
          uint64_t v19 = v17 - 24;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(void *)(v17 + 8);
        if (*(unsigned char *)(v19 + 16) == 84)
        {
          uint64_t v21 = *(void *)(v19 - 32);
          if (v21)
          {
            if (!*(unsigned char *)(v21 + 16)
              && *(void *)(v21 + 24) == *(void *)(v19 + 72)
              && (*(unsigned char *)(v21 + 33) & 0x20) != 0)
            {
              int ItrKind = llvm::GetItrKind((llvm *)*(unsigned int *)(*(void *)(v17 - 56) + 36));
              if (a2)
              {
                if (ItrKind && *(void *)(v17 - 16) && (*(_DWORD *)(*(void *)v18 + 8) & 0xFE) != 0x12)
                {
                  uint64_t v23 = *(void *)(v18 - 32 * (*(_DWORD *)(v17 - 4) & 0x7FFFFFF));
                  unsigned int v24 = *(unsigned __int8 *)(v23 + 16);
                  if (v23 && v24 < 4)
                  {
                    int v25 = 0;
                  }
                  else
                  {
                    if (v24 != 62 && (v24 != 5 || *(_WORD *)(v23 + 18) != 34)) {
                      goto LABEL_23;
                    }
                    int v35 = *(_DWORD *)(v23 + 20);
                    if ((v35 & 0x7FFFFFF) != 3) {
                      goto LABEL_23;
                    }
                    uint64_t v36 = (v35 & 0x40000000) != 0 ? *(void *)(v23 - 8) : v23 - 96;
                    uint64_t v80 = 32;
                    while (v80 != 96)
                    {
                      int v81 = *(unsigned __int8 *)(*(void *)(v36 + v80) + 16);
                      v80 += 32;
                      if (v81 != 16) {
                        goto LABEL_23;
                      }
                    }
                    if ((v35 & 0x40000000) != 0) {
                      uint64_t v82 = *(void *)(v23 - 8);
                    }
                    else {
                      uint64_t v82 = v23 - 96;
                    }
                    uint64_t v83 = *(void *)(v82 + 64);
                    int v84 = (void *)(v83 + 24);
                    if (*(_DWORD *)(v83 + 32) >= 0x41u) {
                      int v84 = (void *)*v84;
                    }
                    uint64_t v85 = (v35 & 0x40000000) != 0 ? *(uint64_t **)(v23 - 8) : (uint64_t *)(v23 - 96);
                    uint64_t v86 = *v85;
                    unsigned int v87 = *(unsigned __int8 *)(*v85 + 16);
                    if (!v86 || v87 > 3) {
                      goto LABEL_23;
                    }
                    int v25 = *(_DWORD *)v84;
                  }
                  int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 400))(a2);
                  uint64_t v28 = v27;
                  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
                  unint64_t v30 = v25
                      + (((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v29 + 24))(v29, v28) * v26) >> 4);
                  uint64_t v16 = v144;
                  if (v30 != -1)
                  {
                    BOOL v31 = *(unsigned __int8 *)(*(void *)v18 + 8) == 2;
                    int v32 = (unint64_t *)&__b[8 * (*(unsigned char *)(*(void *)v18 + 8) == 2)];
                    unint64_t v33 = *v32;
                    if (*v32) {
                      unint64_t v34 = v33 >> 58;
                    }
                    else {
                      unint64_t v34 = *(unsigned int *)(v33 + 64);
                    }
                    if (v34 <= v30)
                    {
                      sub_1CBA7B5AC((unint64_t *)&__b[8 * (*(unsigned char *)(*(void *)v18 + 8) == 2)], (v30 + 1), 0);
                      unint64_t v33 = *v32;
                    }
                    if (v33) {
                      unint64_t *v32 = v33 & 0xFC00000000000000 | (2
                    }
                                                         * (((v33 >> 1) & ~(-1 << (v33 >> 58)) | (1 << v30)) & ~(-1 << (v33 >> 58)))) | 1;
                    else {
                      *(void *)(*(void *)v33 + 8 * (v30 >> 6)) |= 1 << v30;
                    }
                    uint64_t v37 = *(void *)(v17 - 16);
                    uint64_t v38 = *(void *)(*(void *)(v37 + 24) + 40);
                    while (2)
                    {
                      uint64_t v39 = *(void *)(v37 + 24);
                      if (*(unsigned char *)(v39 + 16) == 83) {
                        break;
                      }
                      uint64_t v40 = *(void *)(v39 + 40);
                      if (v40 == v38) {
                        goto LABEL_87;
                      }
                      uint64_t v41 = *(void *)(*(void *)(v40 + 56) + 80);
                      if (v41) {
                        uint64_t v42 = v41 - 24;
                      }
                      else {
                        uint64_t v42 = 0;
                      }
                      if (v42 == v40 || v42 == v38)
                      {
                        uint64_t v38 = v42;
                      }
                      else
                      {
                        uint64_t v44 = *(void *)(a3 + 24);
                        uint64_t v45 = *(unsigned int *)(a3 + 40);
                        if (!v45) {
                          goto LABEL_63;
                        }
                        LODWORD(v46) = (v45 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                        uint64_t v47 = (uint64_t *)(v44 + 16 * v46);
                        uint64_t v48 = *v47;
                        if (*v47 != v40)
                        {
                          int v49 = 1;
                          while (v48 != -4096)
                          {
                            int v50 = v46 + v49++;
                            uint64_t v46 = v50 & (v45 - 1);
                            uint64_t v48 = *(void *)(v44 + 16 * v46);
                            if (v48 == v40)
                            {
                              uint64_t v47 = (uint64_t *)(v44 + 16 * v46);
                              goto LABEL_64;
                            }
                          }
LABEL_63:
                          uint64_t v47 = (uint64_t *)(v44 + 16 * v45);
                        }
LABEL_64:
                        uint64_t v51 = (uint64_t *)(v44 + 16 * v45);
                        if (v47 == v51)
                        {
                          int v52 = 0;
                          if (!v45) {
                            goto LABEL_90;
                          }
LABEL_66:
                          unsigned int v53 = v45 - 1;
                          LODWORD(v45) = (v45 - 1) & ((v38 >> 4) ^ (v38 >> 9));
                          uint64_t v54 = (uint64_t *)(v44 + 16 * v45);
                          uint64_t v55 = *v54;
                          if (*v54 != v38)
                          {
                            int v56 = 1;
                            while (v55 != -4096)
                            {
                              int v57 = v45 + v56++;
                              uint64_t v45 = v57 & v53;
                              uint64_t v55 = *(void *)(v44 + 16 * v45);
                              if (v55 == v38)
                              {
                                uint64_t v54 = (uint64_t *)(v44 + 16 * v45);
                                goto LABEL_71;
                              }
                            }
                            goto LABEL_90;
                          }
LABEL_71:
                          if (v54 == v51) {
                            goto LABEL_90;
                          }
                          char v58 = (uint64_t *)v54[1];
                        }
                        else
                        {
                          int v52 = (uint64_t *)v47[1];
                          if (v45) {
                            goto LABEL_66;
                          }
LABEL_90:
                          char v58 = 0;
                        }
                        if (v52 == v58)
                        {
                          char v58 = v52;
                        }
                        else
                        {
                          do
                          {
                            unsigned int v59 = *((_DWORD *)v52 + 4);
                            unsigned int v60 = *((_DWORD *)v58 + 4);
                            BOOL v61 = v59 >= v60;
                            if (v59 >= v60) {
                              uint64_t v62 = v52;
                            }
                            else {
                              uint64_t v62 = v58;
                            }
                            if (!v61) {
                              char v58 = v52;
                            }
                            int v52 = (uint64_t *)v62[1];
                          }
                          while (v52 != v58);
                        }
                        uint64_t v38 = *v58;
                      }
                      if (v38) {
                        BOOL v63 = v38 == v144;
                      }
                      else {
                        BOOL v63 = 1;
                      }
                      if (v63)
                      {
LABEL_91:
                        if (!v38 || v38 == v144) {
                          break;
                        }
                        int v64 = *((_DWORD *)a4 + 4);
                        if (v64)
                        {
                          uint64_t v65 = *a4;
                          unsigned int v66 = v64 - 1;
                          uint64_t v67 = v66 & ((v38 >> 4) ^ (v38 >> 9));
                          uint64_t v68 = *(void *)(*a4 + 16 * v67);
                          if (v38 == v68)
                          {
LABEL_98:
                            int v71 = *(void **)(v65 + 16 * v67 + 8);
                            if (!v71) {
                              goto LABEL_102;
                            }
                            int v72 = 0;
                            do
                            {
                              int v71 = (void *)*v71;
                              ++v72;
                            }
                            while (v71);
                          }
                          else
                          {
                            int v69 = 1;
                            while (v68 != -4096)
                            {
                              int v70 = v67 + v69++;
                              uint64_t v67 = v70 & v66;
                              uint64_t v68 = *(void *)(v65 + 16 * v67);
                              if (v38 == v68) {
                                goto LABEL_98;
                              }
                            }
LABEL_102:
                            int v72 = 0;
                          }
                          uint64_t v73 = v66 & ((v144 >> 4) ^ (v144 >> 9));
                          uint64_t v74 = *(void *)(v65 + 16 * v73);
                          if (v144 == v74)
                          {
LABEL_107:
                            uint64_t v77 = *(void **)(v65 + 16 * v73 + 8);
                            if (!v77) {
                              goto LABEL_111;
                            }
                            int v78 = 0;
                            do
                            {
                              uint64_t v77 = (void *)*v77;
                              ++v78;
                            }
                            while (v77);
                          }
                          else
                          {
                            int v75 = 1;
                            while (v74 != -4096)
                            {
                              int v76 = v73 + v75++;
                              uint64_t v73 = v76 & v66;
                              uint64_t v74 = *(void *)(v65 + 16 * v73);
                              if (v144 == v74) {
                                goto LABEL_107;
                              }
                            }
LABEL_111:
                            int v78 = 0;
                          }
                          if (v72 != v78) {
                            break;
                          }
                        }
                        LODWORD(v146) = v30;
                        *(void *)&long long v147 = v17 - 24;
                        *((void *)&v147 + 1) = v38;
                        int v148 = 0;
                        if ((sub_1CD115C80((uint64_t)&__b[392 * v31 + 16], v30, &v148) & 1) == 0)
                        {
                          uint64_t v79 = sub_1CD115D30(&__b[392 * v31 + 16], (int *)&v146, v148);
                          _DWORD *v79 = v30;
                          *(_OWORD *)(v79 + 2) = v147;
                        }
                        break;
                      }
LABEL_87:
                      uint64_t v37 = *(void *)(v37 + 8);
                      if (!v37) {
                        goto LABEL_91;
                      }
                      continue;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_23:
        uint64_t v17 = v20;
      }
      while (v20 != v8);
    }
    uint64_t v89 = 0;
    char v90 = 1;
    do
    {
      char v91 = v90;
      if (*(_DWORD *)&__b[392 * v89 + 16] < 2u) {
        goto LABEL_226;
      }
      unint64_t v92 = *(void *)&__b[8 * v89];
      char v143 = v91;
      if (v92) {
        unint64_t v93 = v92 >> 58;
      }
      else {
        unint64_t v93 = *(unsigned int *)(v92 + 64);
      }
      LODWORD(v148) = 0;
      if (!v93) {
        goto LABEL_225;
      }
      unint64_t v94 = 0;
      do
      {
        if (!sub_1CD115C80((uint64_t)&__b[392 * v89 + 16], v94, &v146)) {
          goto LABEL_224;
        }
        if (v94)
        {
          unsigned int v95 = v94 - 1;
          unint64_t v96 = *(void *)&__b[8 * v89];
          if (v96)
          {
            if (((1 << v95) & (v96 >> 1) & ~(-1 << (v96 >> 58))) != 0)
            {
LABEL_148:
              if (v94 < 2) {
                goto LABEL_212;
              }
              unsigned int v97 = v94 - 2;
              if (v96)
              {
                if (((1 << v97) & (v96 >> 1) & ~(-1 << (v96 >> 58))) == 0)
                {
LABEL_212:
                  sub_1CD1073FC(&__b[392 * v89 + 16], v94);
                  goto LABEL_224;
                }
              }
              else if ((*(void *)(*(void *)v96 + 8 * (v97 >> 6)) & (1 << v97)) == 0)
              {
                goto LABEL_212;
              }
            }
          }
          else if ((*(void *)(*(void *)v96 + 8 * (v95 >> 6)) & (1 << v95)) != 0)
          {
            goto LABEL_148;
          }
        }
        uint64_t v98 = *((void *)sub_1CD116064(&__b[392 * v89 + 16], (int *)&v148) + 2);
        unsigned int v99 = v94 + 1;
        unsigned int v145 = v94 + 1;
        unsigned int v100 = 1;
        if (v94 + 1 >= v93)
        {
          int v124 = 1;
          goto LABEL_203;
        }
        while (sub_1CD115C80((uint64_t)&__b[392 * v89 + 16], v99, &v146))
        {
          if (*((void *)sub_1CD116064(&__b[392 * v89 + 16], (int *)&v145) + 2) == v98)
          {
            uint64_t v103 = v98;
            goto LABEL_190;
          }
          if (v100 > 1) {
            break;
          }
          uint64_t v101 = *((void *)sub_1CD116064(&__b[392 * v89 + 16], (int *)&v145) + 2);
          uint64_t v102 = *(void *)(*(void *)(v101 + 56) + 80);
          if (v102) {
            uint64_t v103 = v102 - 24;
          }
          else {
            uint64_t v103 = 0;
          }
          if (v103 != v101 && v103 != v98)
          {
            uint64_t v105 = *(void *)(a3 + 24);
            uint64_t v106 = *(unsigned int *)(a3 + 40);
            if (!v106) {
              goto LABEL_169;
            }
            LODWORD(v107) = (v106 - 1) & ((v101 >> 4) ^ (v101 >> 9));
            int v108 = (uint64_t *)(v105 + 16 * v107);
            uint64_t v109 = *v108;
            if (*v108 != v101)
            {
              int v110 = 1;
              while (v109 != -4096)
              {
                int v111 = v107 + v110++;
                uint64_t v107 = v111 & (v106 - 1);
                uint64_t v109 = *(void *)(v105 + 16 * v107);
                if (v109 == v101)
                {
                  int v108 = (uint64_t *)(v105 + 16 * v107);
                  goto LABEL_170;
                }
              }
LABEL_169:
              int v108 = (uint64_t *)(v105 + 16 * v106);
            }
LABEL_170:
            int v112 = (uint64_t *)(v105 + 16 * v106);
            if (v108 == v112)
            {
              uint64_t v113 = 0;
              if (!v106) {
                goto LABEL_193;
              }
LABEL_172:
              unsigned int v114 = v106 - 1;
              LODWORD(v106) = (v106 - 1) & ((v98 >> 4) ^ (v98 >> 9));
              char v115 = (uint64_t *)(v105 + 16 * v106);
              uint64_t v116 = *v115;
              if (*v115 != v98)
              {
                int v117 = 1;
                while (v116 != -4096)
                {
                  int v118 = v106 + v117++;
                  uint64_t v106 = v118 & v114;
                  uint64_t v116 = *(void *)(v105 + 16 * v106);
                  if (v116 == v98)
                  {
                    char v115 = (uint64_t *)(v105 + 16 * v106);
                    goto LABEL_177;
                  }
                }
                goto LABEL_193;
              }
LABEL_177:
              if (v115 == v112) {
                goto LABEL_193;
              }
              char v119 = (uint64_t *)v115[1];
            }
            else
            {
              uint64_t v113 = (uint64_t *)v108[1];
              if (v106) {
                goto LABEL_172;
              }
LABEL_193:
              char v119 = 0;
            }
            if (v113 == v119)
            {
              char v119 = v113;
            }
            else
            {
              do
              {
                unsigned int v120 = *((_DWORD *)v113 + 4);
                unsigned int v121 = *((_DWORD *)v119 + 4);
                BOOL v122 = v120 >= v121;
                if (v120 >= v121) {
                  unsigned int v123 = v113;
                }
                else {
                  unsigned int v123 = v119;
                }
                if (!v122) {
                  char v119 = v113;
                }
                uint64_t v113 = (uint64_t *)v123[1];
              }
              while (v113 != v119);
            }
            uint64_t v103 = *v119;
          }
          if (v103 == v16) {
            break;
          }
LABEL_190:
          ++v100;
          unsigned int v145 = ++v99;
          uint64_t v98 = v103;
          if (v99 >= v93) {
            goto LABEL_196;
          }
        }
        uint64_t v103 = v98;
LABEL_196:
        unint64_t v125 = *(void *)&__b[8 * v89];
        int v124 = v93 - v94;
        int v126 = 1;
        while (1)
        {
          unsigned int v127 = v94 + v126;
          unint64_t v128 = (v125 >> 1) & ~(-1 << (v125 >> 58));
          if ((v125 & 1) == 0)
          {
            uint64_t v129 = v127 >> 6;
            LOBYTE(v127) = v127 & 0x3F;
            unint64_t v128 = *(void *)(*(void *)v125 + 8 * v129);
          }
          if (((v128 >> v127) & 1) == 0) {
            break;
          }
          ++v126;
          if (!(v94 - v93 + v126))
          {
            uint64_t v98 = v103;
            goto LABEL_203;
          }
        }
        uint64_t v98 = v103;
        int v124 = v126;
LABEL_203:
        if (v124 == v100 + 1)
        {
          sub_1CD1073FC(&__b[392 * v89 + 16], v94 + v124 - 1);
          --v100;
        }
        if (v100 != 1) {
          goto LABEL_214;
        }
        if (!v94 || v124 != 1) {
          goto LABEL_210;
        }
        unsigned int v130 = v94 - 1;
        unint64_t v131 = *(void *)&__b[8 * v89];
        if (v131)
        {
          if (((1 << v130) & (v131 >> 1) & ~(-1 << (v131 >> 58))) == 0) {
            goto LABEL_214;
          }
LABEL_210:
          sub_1CD1073FC(&__b[392 * v89 + 16], v94);
          goto LABEL_223;
        }
        if ((*(void *)(*(void *)v131 + 8 * (v130 >> 6)) & (1 << v130)) != 0) {
          goto LABEL_210;
        }
LABEL_214:
        for (uint64_t j = *(void *)(v98 + 48); j != v98 + 40; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v133 = j ? j - 24 : 0;
          if (*(unsigned char *)(v133 + 16) != 83) {
            break;
          }
        }
        LODWORD(v146) = v94;
        if (v94 < v100 + v94)
        {
          sub_1CD116064(&__b[392 * v89 + 16], (int *)&v146);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
LABEL_223:
        uint64_t v16 = v144;
LABEL_224:
        LODWORD(v148) = ++v94;
      }
      while (v94 != v93);
LABEL_225:
      char v91 = v143;
LABEL_226:
      char v90 = 0;
      uint64_t v89 = 1;
    }
    while ((v91 & 1) != 0);
    uint64_t v134 = 8;
    uint64_t v4 = v142;
    do
    {
      BOOL v135 = *(void ***)&__b[v134];
      if ((v135 & 1) == 0 && v135)
      {
        if (*v135 != v135 + 2) {
          free(*v135);
        }
        MEMORY[0x1D25D9CE0](v135, 0x1080C40EF38A13ELL);
      }
      v134 -= 8;
    }
    while (v134 != -8);
    uint64_t v136 = 784;
    do
    {
      if ((__b[v136 - 376] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&__b[v136 - 368], 8);
      }
      v136 -= 392;
    }
    while (v136);
LABEL_240:
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != v141);
  return 0;
}

uint64_t sub_1CD1073FC(_DWORD *a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CD115C80((uint64_t)a1, a2, &v5);
  if (result)
  {
    _DWORD *v5 = -2;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CD107450(uint64_t *a1)
{
  v312[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v277 = 0;
  uint64_t v278 = 0;
  unsigned int v279 = 0;
  unsigned int v272 = v276;
  size_t v273 = v276;
  uint64_t v274 = 8;
  int v275 = 0;
  uint64_t v1 = a1 + 9;
  uint64_t v2 = (uint64_t *)a1[10];
  if (v2 == a1 + 9) {
    goto LABEL_485;
  }
  do
  {
    if (v2) {
      uint64_t v3 = v2 - 3;
    }
    else {
      uint64_t v3 = 0;
    }
    int v4 = (uint64_t *)v3[5];
    if (v4 == v3 + 5) {
      goto LABEL_80;
    }
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v4 ? (uint64_t)(v4 - 3) : 0;
      unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
      if (v7 <= 0x3B) {
        break;
      }
      unsigned int v8 = v7 - 60;
      if (v8 > 0x1C) {
        goto LABEL_31;
      }
      if (v8 == 24)
      {
        uint64_t v9 = *(void *)(v6 - 32);
        if (v9)
        {
          if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(v6 + 72) && (*(unsigned char *)(v9 + 33) & 0x20) != 0)
          {
            int v10 = *(_DWORD *)(*(v4 - 7) + 36);
            if ((v10 - 1682) <= 0x8B)
            {
              if (!v5)
              {
                unint64_t v300 = (char *)v301 + 8;
                *(void *)&v301[0] = 0x200000000;
                int v305 = v3;
                uint64_t v306 = (uint64_t)&v308;
                uint64_t v307 = 0x200000000;
                sub_1CD8727E8((uint64_t)&v296, (uint64_t)&v277, (uint64_t *)&v305, (uint64_t)&v306);
                uint64_t v5 = v296;
                if ((uint64_t *)v306 != &v308) {
                  free((void *)v306);
                }
                if (v300 != (char *)v301 + 8) {
                  free(v300);
                }
                int v10 = *(_DWORD *)(*(v4 - 7) + 36);
              }
              llvm::SampleInfo::SampleInfo((uint64_t)&v305, v10, 1);
              uint64_t v13 = (uint64_t)&v4[-4 * (*((_DWORD *)v4 - 1) & 0x7FFFFFF) - 3];
              uint64_t v14 = *(uint64_t **)(v13 + 32 * v309);
              uint64_t v15 = *(void *)(v13 + 32 * v310);
              int v305 = v14;
              uint64_t v306 = v15;
              sub_1CD871E80((uint64_t)v5 + 8, (uint64_t)(v4 - 3), (uint64_t *)&v305);
              goto LABEL_31;
            }
          }
        }
        goto LABEL_18;
      }
      if (((1 << v8) & 0x1010003A) != 0 || !v8 && (*(_WORD *)(v6 + 18) & 0x301) != 0) {
        goto LABEL_48;
      }
LABEL_31:
      int v4 = (uint64_t *)*v4;
      if (v4 == v3 + 5) {
        goto LABEL_80;
      }
    }
    if (v7 == 37) {
      goto LABEL_48;
    }
    if (v7 != 33 && v7 != 39) {
      goto LABEL_31;
    }
LABEL_18:
    uint64_t v11 = *(void *)(v6 + 64);
    if (v11 && (*(unsigned char *)(v11 + 17) & 0x30) != 0) {
      goto LABEL_31;
    }
    int v12 = *(_DWORD *)(v6 + 20);
    if ((v12 & 0x80000000) == 0
      || (uint64_t v16 = v6 - 32 * (v12 & 0x7FFFFFF), v19 = *(void *)(v16 - 8), v17 = v16 - 8, (v18 = v19) == 0))
    {
LABEL_21:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v6, 45) & 1) == 0
        && (llvm::CallBase::hasFnAttrOnCalledFunction(v6, 44) & 1) == 0)
      {
        goto LABEL_48;
      }
      goto LABEL_31;
    }
    uint64_t v20 = -v18;
    while (1)
    {
      unsigned int v21 = *(_DWORD *)(*(void *)(v17 + v20) + 8);
      BOOL v22 = v21 > 7;
      int v23 = (1 << v21) & 0x83;
      if (v22 || v23 == 0) {
        break;
      }
      v20 += 16;
      if (!v20) {
        goto LABEL_21;
      }
    }
LABEL_48:
    int v25 = v273;
    uint64_t v26 = HIDWORD(v274);
    if (v273 != v272)
    {
      unsigned int v30 = v274;
      goto LABEL_59;
    }
    if (!HIDWORD(v274))
    {
LABEL_56:
      unsigned int v30 = v274;
      if (HIDWORD(v274) < v274)
      {
        ++HIDWORD(v274);
        *(void *)&v273[8 * v26] = v3;
        goto LABEL_80;
      }
LABEL_59:
      if (3 * v30 <= 4 * (HIDWORD(v274) - v275))
      {
        if (v30 >= 0x40) {
          v30 *= 2;
        }
        else {
          unsigned int v30 = 128;
        }
      }
      else if (v30 - HIDWORD(v274) >= v30 >> 3)
      {
        goto LABEL_61;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v272, v30);
      unsigned int v30 = v274;
      int v25 = v273;
LABEL_61:
      unsigned int v31 = v30 - 1;
      unsigned int v32 = (v30 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      unint64_t v33 = &v25[8 * v32];
      unint64_t v34 = *(uint64_t **)v33;
      if (*(void *)v33 == -1)
      {
        int v35 = 0;
LABEL_73:
        if (v35) {
          uint64_t v39 = (uint64_t **)v35;
        }
        else {
          uint64_t v39 = (uint64_t **)v33;
        }
        if (*v39 != v3)
        {
          if (*v39 == (uint64_t *)-2) {
            --v275;
          }
          else {
            ++HIDWORD(v274);
          }
          void *v39 = v3;
        }
      }
      else
      {
        int v35 = 0;
        int v36 = 1;
        while (v34 != v3)
        {
          if (v35) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v34 == (uint64_t *)-2;
          }
          if (v37) {
            int v35 = v33;
          }
          unsigned int v38 = v32 + v36++;
          unsigned int v32 = v38 & v31;
          unint64_t v33 = &v25[8 * (v38 & v31)];
          unint64_t v34 = *(uint64_t **)v33;
          if (*(void *)v33 == -1) {
            goto LABEL_73;
          }
        }
      }
      goto LABEL_80;
    }
    uint64_t v27 = 0;
    uint64_t v28 = 8 * HIDWORD(v274);
    uint64_t v29 = (uint64_t **)v273;
    while (*v29 != v3)
    {
      if (*v29 == (uint64_t *)-2) {
        uint64_t v27 = v29;
      }
      ++v29;
      v28 -= 8;
      if (!v28)
      {
        if (!v27) {
          goto LABEL_56;
        }
        llvm::Instruction *v27 = v3;
        --v275;
        break;
      }
    }
LABEL_80:
    uint64_t v2 = (uint64_t *)v2[1];
  }
  while (v2 != v1);
  if (!v278)
  {
LABEL_485:
    char v41 = 0;
    goto LABEL_488;
  }
  int v305 = a1;
  uint64_t v270 = 0;
  uint64_t v271 = 0;
  std::string __p = 0;
  sub_1CC86D39C((char **)&__p, (uint64_t)&v305);
  uint64_t v40 = v270;
  uint64_t v268 = (char *)__p;
  if (v270 != __p)
  {
    char v41 = 0;
    int64x2_t v266 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    while (1)
    {
      uint64_t v43 = *((void *)v40 - 1);
      v40 -= 8;
      uint64_t v42 = v43;
      uint64_t v291 = (llvm::BasicBlock *)v43;
      int v305 = 0;
      uint64_t v44 = v277;
      unsigned int v45 = v279;
      int v46 = sub_1CD4A8B14(v277, v279, v43, &v305);
      uint64_t v47 = v305;
      if (v46) {
        BOOL v48 = v305 == (uint64_t *)(v44 + 72 * v45);
      }
      else {
        BOOL v48 = 1;
      }
      if (v48)
      {
        BOOL v49 = 0;
        goto LABEL_483;
      }
      unint64_t v300 = (void *)1;
      v301[0] = v266;
      v301[1] = v266;
      int v302 = v304;
      uint64_t v303 = 0x400000000;
      unint64_t v286 = v290;
      uint64_t v287 = v290;
      uint64_t v288 = 4;
      int v289 = 0;
      unsigned int v296 = &v298;
      uint64_t v298 = v42;
      int v299 = 0;
      unsigned int v50 = 1;
      uint64_t v297 = 0x400000001;
      do
      {
        uint64_t v51 = (char *)v296 + 16 * v50;
        uint64_t v52 = *((void *)v51 - 2);
        unsigned int v53 = (char *)*((void *)v51 - 1);
        LODWORD(v297) = v50 - 1;
        uint64_t v281 = (char *)v52;
        uint64_t v282 = v53;
        uint64_t v54 = (uint64_t)v291;
        if (v291 != (llvm::BasicBlock *)v52)
        {
          int v305 = 0;
          uint64_t v70 = v277;
          unsigned int v71 = v279;
          int v72 = sub_1CD4A8B14(v277, v279, v52, &v305);
          uint64_t v73 = v305;
          if (v72) {
            BOOL v74 = v305 == (uint64_t *)(v70 + 72 * v71);
          }
          else {
            BOOL v74 = 1;
          }
          if (!v74)
          {
            int v305 = &v307;
            uint64_t v306 = 0x400000000;
            v312[0] = 0;
            v312[1] = 0;
            uint64_t v311 = v312;
            uint64_t v95 = *((unsigned int *)v73 + 4);
            if (v95)
            {
              uint64_t v96 = 24 * v95;
              unsigned int v97 = (int64x2_t *)(v73[1] + 8);
              do
              {
                sub_1CD8720C0((uint64_t)&v305, v97);
                unsigned int v97 = (int64x2_t *)((char *)v97 + 24);
                v96 -= 24;
              }
              while (v96);
            }
            unsigned int v98 = *((_DWORD *)v47 + 4);
            if (!v98)
            {
LABEL_179:
              sub_1CD40B1BC(v312[0]);
              if (v305 != &v307) {
                free(v305);
              }
LABEL_167:
              unsigned int v50 = v297;
              continue;
            }
            unsigned int v99 = (uint64_t *)v47[1];
            unsigned int v100 = &v99[3 * v98];
            while (2)
            {
              if (!sub_1CD8721FC((uint64_t)&v305, v99[1], v99[2])) {
                goto LABEL_179;
              }
              if (v300)
              {
                int v101 = 4;
                uint64_t v102 = v301;
                goto LABEL_185;
              }
              int v101 = DWORD2(v301[0]);
              if (!DWORD2(v301[0]))
              {
                int v111 = 0;
                goto LABEL_198;
              }
              uint64_t v102 = *(_OWORD **)&v301[0];
LABEL_185:
              int v103 = v101 - 1;
              unsigned int v104 = ((v281 >> 4) ^ (v281 >> 9)) & v103;
              uint64_t v105 = (void *)v102 + v104;
              uint64_t v106 = (void *)*v105;
              if (v281 != (char *)*v105)
              {
                uint64_t v107 = 0;
                int v108 = 1;
                while (v106 != (void *)-4096)
                {
                  if (v107) {
                    BOOL v109 = 0;
                  }
                  else {
                    BOOL v109 = v106 == (void *)-8192;
                  }
                  if (v109) {
                    uint64_t v107 = v105;
                  }
                  unsigned int v110 = v104 + v108++;
                  unsigned int v104 = v110 & v103;
                  uint64_t v105 = (void *)v102 + v104;
                  uint64_t v106 = (void *)*v105;
                  if (v281 == (char *)*v105) {
                    goto LABEL_200;
                  }
                }
                if (v107) {
                  int v111 = v107;
                }
                else {
                  int v111 = v105;
                }
LABEL_198:
                int v112 = sub_1CC875030((uint64_t)&v300, (uint64_t)&v281, &v281, v111);
                void *v112 = v281;
                if (v303 >= (unint64_t)HIDWORD(v303)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v302 + v303) = v281;
                LODWORD(v303) = v303 + 1;
              }
LABEL_200:
              uint64_t v113 = *v99;
              unsigned int v114 = v287;
              uint64_t v115 = HIDWORD(v288);
              if (v287 != v286)
              {
                unsigned int v119 = v288;
                goto LABEL_211;
              }
              if (!HIDWORD(v288)) {
                goto LABEL_208;
              }
              uint64_t v116 = 0;
              uint64_t v117 = 8 * HIDWORD(v288);
              int v118 = v287;
              do
              {
                if (*v118 == v113) {
                  goto LABEL_232;
                }
                if (*v118 == -2) {
                  uint64_t v116 = v118;
                }
                ++v118;
                v117 -= 8;
              }
              while (v117);
              if (!v116)
              {
LABEL_208:
                unsigned int v119 = v288;
                if (HIDWORD(v288) < v288)
                {
                  ++HIDWORD(v288);
                  *(void *)&v287[8 * v115] = v113;
                  goto LABEL_232;
                }
LABEL_211:
                if (3 * v119 <= 4 * (HIDWORD(v288) - v289))
                {
                  if (v119 >= 0x40) {
                    v119 *= 2;
                  }
                  else {
                    unsigned int v119 = 128;
                  }
                }
                else if (v119 - HIDWORD(v288) >= v119 >> 3)
                {
LABEL_213:
                  unsigned int v120 = v119 - 1;
                  unsigned int v121 = (v119 - 1) & ((v113 >> 4) ^ (v113 >> 9));
                  BOOL v122 = &v114[8 * v121];
                  uint64_t v123 = *(void *)v122;
                  if (*(void *)v122 == -1)
                  {
                    int v124 = 0;
LABEL_225:
                    if (v124) {
                      unint64_t v128 = v124;
                    }
                    else {
                      unint64_t v128 = v122;
                    }
                    if (*(void *)v128 != v113)
                    {
                      if (*(void *)v128 == -2) {
                        --v289;
                      }
                      else {
                        ++HIDWORD(v288);
                      }
                      *(void *)unint64_t v128 = v113;
                    }
                  }
                  else
                  {
                    int v124 = 0;
                    int v125 = 1;
                    while (v123 != v113)
                    {
                      if (v124) {
                        BOOL v126 = 0;
                      }
                      else {
                        BOOL v126 = v123 == -2;
                      }
                      if (v126) {
                        int v124 = v122;
                      }
                      unsigned int v127 = v121 + v125++;
                      unsigned int v121 = v127 & v120;
                      BOOL v122 = &v114[8 * (v127 & v120)];
                      uint64_t v123 = *(void *)v122;
                      if (*(void *)v122 == -1) {
                        goto LABEL_225;
                      }
                    }
                  }
LABEL_232:
                  v99 += 3;
                  if (v99 == v100) {
                    goto LABEL_179;
                  }
                  continue;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v286, v119);
                unsigned int v119 = v288;
                unsigned int v114 = v287;
                goto LABEL_213;
              }
              break;
            }
            void *v116 = v113;
            --v289;
            goto LABEL_232;
          }
          LODWORD(v53) = v282;
        }
        if ((int)v53 > 10) {
          goto LABEL_167;
        }
        uint64_t v55 = (uint64_t)v281;
        int v56 = (char *)*((void *)v281 + 5);
        if (v56 == v281 + 40) {
          goto LABEL_167;
        }
        int v57 = v56 - 24;
        if (!v56) {
          int v57 = 0;
        }
        unsigned int v58 = v57[16] - 40;
        if (v58 < 0xFFFFFFF5) {
          int v57 = 0;
        }
        if (!v56) {
          goto LABEL_167;
        }
        if (v57[16] != 30 || v58 < 0xFFFFFFF5) {
          goto LABEL_167;
        }
        int v60 = *((_DWORD *)v57 + 5);
        if ((v60 & 0x40000000) != 0)
        {
          uint64_t v62 = (char *)*((void *)v57 - 1);
          uint64_t v61 = v60 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v61 = v60 & 0x7FFFFFF;
          uint64_t v62 = &v57[-32 * v61];
        }
        uint64_t v63 = v61 == 3;
        if (v61 != v63)
        {
          int v64 = (llvm::BasicBlock **)&v62[32 * v63];
          uint64_t v65 = 32 * v61 - 32 * v63;
          while (llvm::BasicBlock::getUniquePredecessor(*v64) == v55)
          {
            v64 += 4;
            v65 -= 32;
            if (!v65) {
              goto LABEL_117;
            }
          }
          goto LABEL_167;
        }
LABEL_117:
        if (v55 != v54)
        {
          unsigned int v66 = v272;
          if (v273 == v272)
          {
            int v67 = HIDWORD(v274);
            uint64_t v68 = &v273[8 * HIDWORD(v274)];
            if (HIDWORD(v274))
            {
              uint64_t v69 = 0;
              while (*(void *)&v273[v69] != v55)
              {
                v69 += 8;
                if (8 * HIDWORD(v274) == v69) {
                  goto LABEL_147;
                }
              }
              uint64_t v68 = &v273[v69];
            }
LABEL_147:
            unsigned int v66 = v273;
          }
          else
          {
            int v75 = v274 - 1;
            unsigned int v76 = (v274 - 1) & ((v55 >> 4) ^ (v55 >> 9));
            uint64_t v68 = &v273[8 * v76];
            uint64_t v77 = *(void *)v68;
            int v78 = 0;
            if (*(void *)v68 == -1)
            {
LABEL_140:
              if (v78) {
                uint64_t v68 = v78;
              }
              int v67 = HIDWORD(v274);
              if (*(void *)v68 != v55) {
                uint64_t v68 = &v273[8 * v274];
              }
            }
            else
            {
              int v79 = 1;
              while (v77 != v55)
              {
                if (v78) {
                  BOOL v80 = 0;
                }
                else {
                  BOOL v80 = v77 == -2;
                }
                if (v80) {
                  int v78 = v68;
                }
                unsigned int v81 = v76 + v79++;
                unsigned int v76 = v81 & v75;
                uint64_t v68 = &v273[8 * (v81 & v75)];
                uint64_t v77 = *(void *)v68;
                if (*(void *)v68 == -1) {
                  goto LABEL_140;
                }
              }
              int v67 = HIDWORD(v274);
            }
          }
          int v82 = v273 == v66 ? v67 : v274;
          if (v68 != &v273[8 * v82]) {
            goto LABEL_167;
          }
          int v305 = 0;
          uint64_t v83 = v277;
          unsigned int v84 = v279;
          if (sub_1CD4A8B14(v277, v279, v55, &v305))
          {
            if (v305 != (uint64_t *)(v83 + 72 * v84) && *((_DWORD *)v305 + 4)) {
              goto LABEL_167;
            }
          }
        }
        uint64_t v85 = (char *)*((void *)v281 + 5);
        if (v85 == v281 + 40)
        {
          uint64_t v86 = 0;
        }
        else
        {
          if (v85) {
            uint64_t v86 = v85 - 24;
          }
          else {
            uint64_t v86 = 0;
          }
          if (v86[16] - 29 >= 0xB) {
            uint64_t v86 = 0;
          }
        }
        int v87 = *((_DWORD *)v86 + 5);
        if ((v87 & 0x40000000) != 0)
        {
          uint64_t v89 = (char *)*((void *)v86 - 1);
          uint64_t v88 = v87 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v88 = v87 & 0x7FFFFFF;
          uint64_t v89 = &v86[-32 * v88];
        }
        uint64_t v90 = v88 == 3;
        if (v88 == v90) {
          goto LABEL_167;
        }
        char v91 = &v89[32 * v90];
        unsigned int v50 = v297;
        uint64_t v92 = 32 * v88 - 32 * v90;
        do
        {
          int v93 = v282 + 1;
          if (v50 >= HIDWORD(v297)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v94 = (char *)v296 + 16 * v50;
          *(void *)unint64_t v94 = *(void *)v91;
          *((_DWORD *)v94 + 2) = v93;
          LODWORD(v297) = ++v50;
          v91 += 32;
          v92 -= 32;
        }
        while (v92);
      }
      while (v50);
      BOOL v49 = v303 != 0;
      if (!v303) {
        goto LABEL_475;
      }
      uint64_t v281 = v285;
      uint64_t v282 = v285;
      uint64_t v283 = 4;
      int v284 = 0;
      uint64_t v129 = (void **)v302;
      unsigned int v130 = (void **)((char *)v302 + 8 * v303);
      int v131 = 1;
      do
      {
        uint64_t v132 = (llvm::BasicBlock *)*v129;
        uint64_t v292 = *v129;
        uint64_t v133 = sub_1CD872290((uint64_t)&v277, (uint64_t *)&v291);
        if (*((_DWORD *)v133 + 4)
          && (uint64_t v153 = v133, v154 = sub_1CD872290((uint64_t)&v277, (uint64_t *)&v292), (v155 = *((_DWORD *)v153 + 4)) != 0))
        {
          uint64_t v156 = (uint64_t *)v153[1];
          uint64_t v157 = &v156[3 * v155];
          int v134 = v131 & 1;
          int v263 = (void *)((char *)v132 + 40);
          uint64_t v264 = (uint64_t)(v154 + 1);
          do
          {
            int v158 = (llvm::Instruction *)*v156;
            uint64_t v159 = v286;
            if (v287 == v286)
            {
              int v160 = HIDWORD(v288);
              uint64_t v161 = &v287[8 * HIDWORD(v288)];
              if (HIDWORD(v288))
              {
                uint64_t v162 = 0;
                while (*(llvm::Instruction **)&v287[v162] != v158)
                {
                  v162 += 8;
                  if (8 * HIDWORD(v288) == v162) {
                    goto LABEL_317;
                  }
                }
                uint64_t v161 = &v287[v162];
              }
LABEL_317:
              uint64_t v159 = v287;
            }
            else
            {
              int v163 = v288 - 1;
              unsigned int v164 = (v288 - 1) & ((v158 >> 4) ^ (v158 >> 9));
              uint64_t v161 = &v287[8 * v164];
              uint64_t v165 = *(llvm::Instruction **)v161;
              if (*(void *)v161 == -1)
              {
                uint64_t v166 = 0;
LABEL_359:
                if (v166) {
                  uint64_t v161 = v166;
                }
                int v160 = HIDWORD(v288);
                if (*(llvm::Instruction **)v161 != v158) {
                  uint64_t v161 = &v287[8 * v288];
                }
              }
              else
              {
                uint64_t v166 = 0;
                int v167 = 1;
                while (v165 != v158)
                {
                  if (v166) {
                    BOOL v168 = 0;
                  }
                  else {
                    BOOL v168 = v165 == (llvm::Instruction *)-2;
                  }
                  if (v168) {
                    uint64_t v166 = v161;
                  }
                  unsigned int v169 = v164 + v167++;
                  unsigned int v164 = v169 & v163;
                  uint64_t v161 = &v287[8 * (v169 & v163)];
                  uint64_t v165 = *(llvm::Instruction **)v161;
                  if (*(void *)v161 == -1) {
                    goto LABEL_359;
                  }
                }
                int v160 = HIDWORD(v288);
              }
            }
            if (v287 == v159) {
              int v170 = v160;
            }
            else {
              int v170 = v288;
            }
            if (v161 == &v287[8 * v170]) {
              break;
            }
            if (v131)
            {
              uint64_t v175 = (void *)((char *)v132 + 40);
              if (*((void **)v132 + 6) != v263)
              {
                uint64_t v175 = (void *)*((void *)v132 + 6);
                while (1)
                {
                  uint64_t v176 = v175 - 3;
                  if (!v175) {
                    uint64_t v176 = 0;
                  }
                  if (*((unsigned char *)v176 + 16) != 83) {
                    break;
                  }
                  uint64_t v175 = (void *)v175[1];
                  if (v175 == v263)
                  {
                    uint64_t v175 = (void *)((char *)v132 + 40);
                    goto LABEL_352;
                  }
                }
                unsigned int v187 = *((unsigned __int8 *)v175 - 8) - 38;
                BOOL v22 = v187 > 0x38;
                uint64_t v188 = (1 << v187) & 0x100060000000001;
                if (!v22 && v188 != 0) {
                  uint64_t v175 = (void *)v175[1];
                }
              }
LABEL_352:
              unint64_t v190 = v175 ? (llvm::Instruction *)(v175 - 3) : 0;
              llvm::Instruction::moveBefore(v158, v190);
              uint64_t v191 = *v156;
              llvm::SampleInfo::SampleInfo((uint64_t)&v305, *(_DWORD *)(*(void *)(*v156 - 32) + 36), 1);
              uint64_t v192 = v191 - 32 * (*(_DWORD *)(v191 + 20) & 0x7FFFFFF);
              BOOL v193 = *(uint64_t **)(v192 + 32 * v309);
              uint64_t v194 = *(void *)(v192 + 32 * v310);
              int v305 = v193;
              uint64_t v306 = v194;
              sub_1CD871E80(v264, *v156, (uint64_t *)&v305);
            }
            else
            {
              unint64_t v262 = v157;
              uint64_t v171 = llvm::Instruction::clone(v158);
              uint64_t v172 = (uint64_t)v171;
              uint64_t v173 = (void *)((char *)v132 + 40);
              if (*((void **)v132 + 6) != v263)
              {
                uint64_t v173 = (void *)*((void *)v132 + 6);
                while (1)
                {
                  uint64_t v174 = v173 - 3;
                  if (!v173) {
                    uint64_t v174 = 0;
                  }
                  if (*((unsigned char *)v174 + 16) != 83) {
                    break;
                  }
                  uint64_t v173 = (void *)v173[1];
                  if (v173 == v263)
                  {
                    uint64_t v173 = (void *)((char *)v132 + 40);
                    goto LABEL_342;
                  }
                }
                unsigned int v177 = *((unsigned __int8 *)v173 - 8) - 38;
                BOOL v22 = v177 > 0x38;
                uint64_t v178 = (1 << v177) & 0x100060000000001;
                if (!v22 && v178 != 0) {
                  uint64_t v173 = (void *)v173[1];
                }
              }
LABEL_342:
              if (v173) {
                uint64_t v180 = v173 - 3;
              }
              else {
                uint64_t v180 = 0;
              }
              uint64_t v181 = v180[5];
              v171[5] = v181;
              *(_WORD *)(v181 + 18) &= ~0x8000u;
              if ((*((unsigned char *)v171 + 23) & 0x10) != 0)
              {
                uint64_t v195 = *(void *)(v181 + 56);
                if (v195)
                {
                  uint64_t v196 = *(llvm::ValueSymbolTable **)(v195 + 104);
                  if (v196) {
                    llvm::ValueSymbolTable::reinsertValue(v196, (llvm::Value *)v172);
                  }
                }
              }
              uint64_t v183 = v180[3];
              int v182 = v180 + 3;
              *(void *)(v172 + 32) = v182;
              *(void *)(v172 + 24) = v183;
              *(void *)(v183 + 8) = v172 + 24;
              *int v182 = v172 + 24;
              llvm::SampleInfo::SampleInfo((uint64_t)&v305, *(_DWORD *)(*(void *)(v172 - 32) + 36), 1);
              uint64_t v184 = v172 - 32 * (*(_DWORD *)(v172 + 20) & 0x7FFFFFF);
              uint64_t v185 = *(uint64_t **)(v184 + 32 * v309);
              uint64_t v186 = *(void *)(v184 + 32 * v310);
              int v305 = v185;
              uint64_t v306 = v186;
              sub_1CD871E80(v264, v172, (uint64_t *)&v305);
              uint64_t v157 = v262;
            }
            v156 += 3;
          }
          while (v156 != v157);
        }
        else
        {
          int v134 = v131;
        }
        if (v134) {
          int v131 = 0;
        }
        uint64_t v135 = (uint64_t)v291;
        if (v132 != v291)
        {
          uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v132);
          if (UniquePredecessor != v135)
          {
            int v137 = (llvm::BasicBlock *)UniquePredecessor;
            while (1)
            {
              int v138 = v282;
              uint64_t v139 = HIDWORD(v283);
              if (v282 != v281) {
                break;
              }
              if (HIDWORD(v283))
              {
                BOOL v140 = 0;
                uint64_t v141 = 8 * HIDWORD(v283);
                uint64_t v142 = (llvm::BasicBlock **)v282;
                while (*v142 != v137)
                {
                  if (*v142 == (llvm::BasicBlock *)-2) {
                    BOOL v140 = v142;
                  }
                  ++v142;
                  v141 -= 8;
                  if (!v141)
                  {
                    if (!v140) {
                      goto LABEL_261;
                    }
                    *BOOL v140 = v137;
                    --v284;
                    goto LABEL_285;
                  }
                }
                goto LABEL_285;
              }
LABEL_261:
              unsigned int v143 = v283;
              if (HIDWORD(v283) >= v283) {
                goto LABEL_264;
              }
              ++HIDWORD(v283);
              *(void *)&v282[8 * v139] = v137;
LABEL_285:
              int v137 = (llvm::BasicBlock *)llvm::BasicBlock::getUniquePredecessor(v137);
              if (v137 == (llvm::BasicBlock *)v135) {
                goto LABEL_293;
              }
            }
            unsigned int v143 = v283;
LABEL_264:
            if (3 * v143 <= 4 * (HIDWORD(v283) - v284))
            {
              if (v143 >= 0x40) {
                v143 *= 2;
              }
              else {
                unsigned int v143 = 128;
              }
            }
            else if (v143 - HIDWORD(v283) >= v143 >> 3)
            {
              goto LABEL_266;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v281, v143);
            unsigned int v143 = v283;
            int v138 = v282;
LABEL_266:
            unsigned int v144 = v143 - 1;
            unsigned int v145 = (v143 - 1) & ((v137 >> 4) ^ (v137 >> 9));
            uint64_t v146 = &v138[8 * v145];
            long long v147 = *(llvm::BasicBlock **)v146;
            if (*(void *)v146 == -1)
            {
              int v148 = 0;
LABEL_278:
              if (v148) {
                uint64_t v152 = v148;
              }
              else {
                uint64_t v152 = (llvm::BasicBlock **)v146;
              }
              if (*v152 != v137)
              {
                if (*v152 == (llvm::BasicBlock *)-2) {
                  --v284;
                }
                else {
                  ++HIDWORD(v283);
                }
                *uint64_t v152 = v137;
              }
            }
            else
            {
              int v148 = 0;
              int v149 = 1;
              while (v147 != v137)
              {
                if (v148) {
                  BOOL v150 = 0;
                }
                else {
                  BOOL v150 = v147 == (llvm::BasicBlock *)-2;
                }
                if (v150) {
                  int v148 = (llvm::BasicBlock **)v146;
                }
                unsigned int v151 = v145 + v149++;
                unsigned int v145 = v151 & v144;
                uint64_t v146 = &v138[8 * (v151 & v144)];
                long long v147 = *(llvm::BasicBlock **)v146;
                if (*(void *)v146 == -1) {
                  goto LABEL_278;
                }
              }
            }
            goto LABEL_285;
          }
LABEL_293:
          uint64_t v132 = (llvm::BasicBlock *)v135;
        }
        ++v129;
      }
      while (v129 != v130);
      uint64_t v292 = v295;
      unsigned int v294 = 4;
      unsigned int v197 = 1;
      v295[0] = v132;
      do
      {
        uint64_t v198 = *((void *)v292 + --v197);
        unsigned int v293 = v197;
        uint64_t v199 = *(void *)(v198 + 40);
        if (v199 == v198 + 40)
        {
          uint64_t v201 = 0;
        }
        else
        {
          if (v199) {
            uint64_t v200 = v199 - 24;
          }
          else {
            uint64_t v200 = 0;
          }
          if (*(unsigned __int8 *)(v200 + 16) - 29 >= 0xB) {
            uint64_t v201 = 0;
          }
          else {
            uint64_t v201 = v200;
          }
        }
        int v202 = *(_DWORD *)(v201 + 20);
        if ((v202 & 0x40000000) != 0)
        {
          uint64_t v204 = *(void *)(v201 - 8);
          uint64_t v203 = v202 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v203 = v202 & 0x7FFFFFF;
          uint64_t v204 = v201 - 32 * v203;
        }
        uint64_t v205 = v203 == 3;
        if (v203 != v205)
        {
          uint64_t v206 = (uint64_t *)(v204 + 32 * v203);
          size_t v207 = (uint64_t *)(v204 + 32 * v205);
          do
          {
            uint64_t v280 = 0;
            uint64_t v208 = *v207;
            uint64_t v280 = v208;
            if ((sub_1CD426E14((uint64_t)&v300, v208, &v305) & 1) == 0)
            {
              int v209 = v281;
              if (v282 == v281)
              {
                int v210 = HIDWORD(v283);
                uint64_t v211 = &v282[8 * HIDWORD(v283)];
                if (HIDWORD(v283))
                {
                  uint64_t v212 = 0;
                  while (*(void *)&v282[v212] != v208)
                  {
                    v212 += 8;
                    if (8 * HIDWORD(v283) == v212) {
                      goto LABEL_400;
                    }
                  }
                  uint64_t v211 = &v282[v212];
                }
LABEL_400:
                int v209 = v282;
              }
              else
              {
                int v213 = v283 - 1;
                unsigned int v214 = (v283 - 1) & ((v208 >> 4) ^ (v208 >> 9));
                uint64_t v211 = &v282[8 * v214];
                uint64_t v215 = *(void *)v211;
                if (*(void *)v211 == -1)
                {
                  unsigned int v216 = 0;
LABEL_410:
                  if (v216) {
                    uint64_t v211 = v216;
                  }
                  int v210 = HIDWORD(v283);
                  if (*(void *)v211 != v208) {
                    uint64_t v211 = &v282[8 * v283];
                  }
                }
                else
                {
                  unsigned int v216 = 0;
                  int v217 = 1;
                  while (v215 != v208)
                  {
                    if (v216) {
                      BOOL v218 = 0;
                    }
                    else {
                      BOOL v218 = v215 == -2;
                    }
                    if (v218) {
                      unsigned int v216 = v211;
                    }
                    unsigned int v219 = v214 + v217++;
                    unsigned int v214 = v219 & v213;
                    uint64_t v211 = &v282[8 * (v219 & v213)];
                    uint64_t v215 = *(void *)v211;
                    if (*(void *)v211 == -1) {
                      goto LABEL_410;
                    }
                  }
                  int v210 = HIDWORD(v283);
                }
              }
              if (v282 == v209) {
                int v220 = v210;
              }
              else {
                int v220 = v283;
              }
              if (v211 == &v282[8 * v220])
              {
                uint64_t v221 = sub_1CD872290((uint64_t)&v277, (uint64_t *)&v291);
                if (*((_DWORD *)v221 + 4))
                {
                  uint64_t v222 = v221;
                  int v223 = sub_1CD872290((uint64_t)&v277, &v280);
                  unsigned int v224 = *((_DWORD *)v222 + 4);
                  if (v224)
                  {
                    uint64_t v265 = (uint64_t)(v223 + 1);
                    uint64_t v225 = (llvm::Instruction **)v222[1];
                    int v226 = &v225[3 * v224];
                    uint64_t v227 = v208 + 40;
                    do
                    {
                      uint64_t v228 = *v225;
                      uint64_t v229 = v286;
                      if (v287 == v286)
                      {
                        int v230 = HIDWORD(v288);
                        unsigned int v231 = &v287[8 * HIDWORD(v288)];
                        if (HIDWORD(v288))
                        {
                          uint64_t v232 = 0;
                          while (*(llvm::Instruction **)&v287[v232] != v228)
                          {
                            v232 += 8;
                            if (8 * HIDWORD(v288) == v232) {
                              goto LABEL_437;
                            }
                          }
                          unsigned int v231 = &v287[v232];
                        }
LABEL_437:
                        uint64_t v229 = v287;
                      }
                      else
                      {
                        int v233 = v288 - 1;
                        unsigned int v234 = (v288 - 1) & ((v228 >> 4) ^ (v228 >> 9));
                        unsigned int v231 = &v287[8 * v234];
                        int v235 = *(llvm::Instruction **)v231;
                        if (*(void *)v231 == -1)
                        {
                          unint64_t v236 = 0;
LABEL_461:
                          if (v236) {
                            unsigned int v231 = v236;
                          }
                          int v230 = HIDWORD(v288);
                          if (*(llvm::Instruction **)v231 != v228) {
                            unsigned int v231 = &v287[8 * v288];
                          }
                        }
                        else
                        {
                          unint64_t v236 = 0;
                          int v237 = 1;
                          while (v235 != v228)
                          {
                            if (v236) {
                              BOOL v238 = 0;
                            }
                            else {
                              BOOL v238 = v235 == (llvm::Instruction *)-2;
                            }
                            if (v238) {
                              unint64_t v236 = v231;
                            }
                            unsigned int v239 = v234 + v237++;
                            unsigned int v234 = v239 & v233;
                            unsigned int v231 = &v287[8 * (v239 & v233)];
                            int v235 = *(llvm::Instruction **)v231;
                            if (*(void *)v231 == -1) {
                              goto LABEL_461;
                            }
                          }
                          int v230 = HIDWORD(v288);
                        }
                      }
                      if (v287 == v229) {
                        int v240 = v230;
                      }
                      else {
                        int v240 = v288;
                      }
                      if (v231 == &v287[8 * v240]) {
                        break;
                      }
                      int v241 = llvm::Instruction::clone(v228);
                      uint64_t v242 = (uint64_t)v241;
                      uint64_t v243 = v208 + 40;
                      if (*(void *)(v208 + 48) != v227)
                      {
                        uint64_t v243 = *(void *)(v208 + 48);
                        while (1)
                        {
                          uint64_t v244 = v243 - 24;
                          if (!v243) {
                            uint64_t v244 = 0;
                          }
                          if (*(unsigned char *)(v244 + 16) != 83) {
                            break;
                          }
                          uint64_t v243 = *(void *)(v243 + 8);
                          if (v243 == v227)
                          {
                            uint64_t v243 = v208 + 40;
                            goto LABEL_454;
                          }
                        }
                        unsigned int v245 = *(unsigned __int8 *)(v243 - 8) - 38;
                        BOOL v22 = v245 > 0x38;
                        uint64_t v246 = (1 << v245) & 0x100060000000001;
                        if (!v22 && v246 != 0) {
                          uint64_t v243 = *(void *)(v243 + 8);
                        }
                      }
LABEL_454:
                      if (v243) {
                        uint64_t v248 = v243 - 24;
                      }
                      else {
                        uint64_t v248 = 0;
                      }
                      uint64_t v249 = *(void *)(v248 + 40);
                      v241[5] = v249;
                      *(_WORD *)(v249 + 18) &= ~0x8000u;
                      if ((*((unsigned char *)v241 + 23) & 0x10) != 0)
                      {
                        uint64_t v255 = *(void *)(v249 + 56);
                        if (v255)
                        {
                          unint64_t v256 = *(llvm::ValueSymbolTable **)(v255 + 104);
                          if (v256) {
                            llvm::ValueSymbolTable::reinsertValue(v256, (llvm::Value *)v242);
                          }
                        }
                      }
                      uint64_t v251 = *(void *)(v248 + 24);
                      unint64_t v250 = (void *)(v248 + 24);
                      *(void *)(v242 + 32) = v250;
                      *(void *)(v242 + 24) = v251;
                      *(void *)(v251 + 8) = v242 + 24;
                      *unint64_t v250 = v242 + 24;
                      llvm::SampleInfo::SampleInfo((uint64_t)&v305, *(_DWORD *)(*(void *)(v242 - 32) + 36), 1);
                      uint64_t v252 = v242 - 32 * (*(_DWORD *)(v242 + 20) & 0x7FFFFFF);
                      int v253 = *(uint64_t **)(v252 + 32 * v309);
                      uint64_t v254 = *(void *)(v252 + 32 * v310);
                      int v305 = v253;
                      uint64_t v306 = v254;
                      sub_1CD871E80(v265, v242, (uint64_t *)&v305);
                      v225 += 3;
                    }
                    while (v225 != v226);
                  }
                }
              }
              else
              {
                if (v293 >= (unint64_t)v294) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v292 + v293++) = v208;
              }
            }
            v207 += 4;
          }
          while (v207 != v206);
          unsigned int v197 = v293;
        }
      }
      while (v197);
      if (v292 != v295) {
        free(v292);
      }
      BOOL v49 = 1;
      if (v282 != v281) {
        free(v282);
      }
LABEL_475:
      if (v296 != &v298) {
        free(v296);
      }
      if (v287 != v286) {
        free(v287);
      }
      if (v302 != v304) {
        free(v302);
      }
      if ((v300 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v301[0], 8);
      }
LABEL_483:
      v41 |= v49;
      if (v40 == v268)
      {
        uint64_t v40 = (char *)__p;
        if (__p) {
          goto LABEL_487;
        }
        goto LABEL_488;
      }
    }
  }
  char v41 = 0;
  if (v270)
  {
LABEL_487:
    uint64_t v270 = v40;
    operator delete(v40);
  }
LABEL_488:
  if (v273 != v272) {
    free(v273);
  }
  uint64_t v257 = v277;
  if (v279)
  {
    uint64_t v258 = 72 * v279;
    uint64_t v259 = (void *)(v277 + 24);
    do
    {
      if ((*(v259 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v260 = (void *)*(v259 - 2);
        if (v259 != v260) {
          free(v260);
        }
      }
      v259 += 9;
      v258 -= 72;
    }
    while (v258);
  }
  MEMORY[0x1D25D9CD0](v257, 8);
  return v41 & 1;
}

uint64_t sub_1CD108A9C(uint64_t a1)
{
  v76[32] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (llvm::Value *)v76;
  BOOL v74 = v76;
  uint64_t v75 = 0x2000000000;
  uint64_t v72 = 1;
  uint64_t v2 = (void **)v73;
  v73[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v73[1] = v73[0];
  v73[2] = v73[0];
  v73[3] = v73[0];
  uint64_t v3 = a1 + 72;
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4 == a1 + 72)
  {
    LOBYTE(v5) = 0;
    goto LABEL_36;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &byte_1CFBCE98E;
  unsigned int v7 = "_elem";
  do
  {
    uint64_t v8 = v4 - 24;
    if (!v4) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 + 40;
    for (uint64_t i = *(void *)(v8 + 48); i != v9; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v11 = (unsigned char *)(i - 24);
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11[16] == 89)
      {
        int v12 = *(unsigned char *)(*((void *)v11 - 8) + 16) == 91 ? (_DWORD **)*((void *)v11 - 8) : 0;
        uint64_t v13 = *(unsigned char *)(*((void *)v11 - 4) + 16) == 16 ? *((void *)v11 - 4) : 0;
        BOOL v14 = !v12 || v13 == 0;
        if (!v14 && *((unsigned char *)*v12 + 8) == 18)
        {
          uint64_t v28 = (llvm::Value *)*(v12 - 8);
          int v29 = *(_DWORD *)(*(void *)v28 + 32);
          unint64_t v30 = (*v12)[8];
          uint64_t v69 = v71;
          uint64_t v70 = 0x800000000;
          int v64 = v28;
          if ((int)v30 < 1)
          {
            BOOL v31 = 1;
            unint64_t v33 = v71;
            unsigned int v32 = v71;
            BOOL v22 = v71;
          }
          else
          {
            uint64_t v61 = v1;
            int v17 = *v12[8];
            if (v17 < 0)
            {
              uint64_t v1 = v61;
              continue;
            }
            if (v17 >= v29)
            {
              uint64_t v1 = v61;
              continue;
            }
            LODWORD(v16) = 0;
            uint64_t v18 = 1;
            do
            {
              unint64_t v15 = v18;
              if (v16 >= HIDWORD(v70)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v69 + v16) = v17;
              uint64_t v16 = (v70 + 1);
              LODWORD(v70) = v70 + 1;
              if (v30 == v18) {
                break;
              }
              int v17 = v12[8][v18];
              if (v17 < 0) {
                break;
              }
              ++v18;
            }
            while (v17 < v29);
            BOOL v31 = v15 >= v30;
            unsigned int v32 = v69;
            unint64_t v33 = (char *)v69 + 4 * v16;
            if (v16)
            {
              uint64_t v21 = 0;
              uint64_t v34 = 4 * v16 - 4;
              uint64_t v1 = v61;
              while (v34 != v21)
              {
                int v19 = *(_DWORD *)((char *)v69 + v21);
                int v20 = *(_DWORD *)((char *)v69 + v21 + 4);
                v21 += 4;
                if (v20 < v19)
                {
                  BOOL v22 = (char *)v69 + v21;
                  goto LABEL_56;
                }
              }
              BOOL v22 = v33;
            }
            else
            {
              BOOL v22 = (char *)v69;
              uint64_t v1 = v61;
            }
          }
LABEL_56:
          if (!v31 || v22 != v33) {
            goto LABEL_71;
          }
          int v35 = (unsigned int *)(v13 + 24);
          if (*(_DWORD *)(v13 + 32) >= 0x41u) {
            int v35 = *(unsigned int **)v35;
          }
          unint64_t v36 = (int)v12[8][*v35];
          uint64_t v62 = (llvm::Value *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(void ***)v11 + 1960), v36, 0);
          if ((v11[23] & 0x10) != 0)
          {
            uint64_t v37 = ***(void ***)v11;
            uint64_t v38 = *(void *)(v37 + 152);
            uint64_t v39 = *(unsigned int *)(v37 + 168);
            if (!v39) {
              goto LABEL_82;
            }
            LODWORD(v40) = (v39 - 1) & ((v11 >> 4) ^ (v11 >> 9));
            char v41 = (void *)(v38 + 16 * v40);
            uint64_t v42 = (unsigned char *)*v41;
            if ((unsigned char *)*v41 != v11)
            {
              int v43 = 1;
              while (v42 != (unsigned char *)-4096)
              {
                int v44 = v40 + v43++;
                uint64_t v40 = v44 & (v39 - 1);
                uint64_t v42 = *(unsigned char **)(v38 + 16 * v40);
                if (v42 == v11)
                {
                  char v41 = (void *)(v38 + 16 * v40);
                  goto LABEL_67;
                }
              }
LABEL_82:
              char v41 = (void *)(v38 + 16 * v39);
            }
LABEL_67:
            unsigned int v45 = (void *)v41[1];
            uint64_t v48 = *v45;
            uint64_t v47 = (char *)(v45 + 2);
            uint64_t v46 = v48;
          }
          else
          {
            uint64_t v46 = 0;
            uint64_t v47 = &byte_1CFBCE98E;
          }
          __int16 v66 = 773;
          v65[0] = v47;
          v65[1] = v46;
          v65[2] = "_elem";
          v67[0] = (const char *)v65;
          unint64_t v63 = v63 & 0xFFFFFFFF00000000 | v36;
          void v67[2] = (const char *)v63;
          __int16 v68 = 2306;
          BOOL v49 = operator new(0x80uLL);
          v49[21] = v49[21] & 0x38000000 | 2;
          unsigned int v50 = (llvm::Value *)(v49 + 16);
          *(void *)BOOL v49 = 0;
          *((void *)v49 + 1) = 0;
          *((void *)v49 + 2) = 0;
          *((void *)v49 + 3) = v49 + 16;
          *((void *)v49 + 4) = 0;
          *((void *)v49 + 5) = 0;
          *((void *)v49 + 6) = 0;
          *((void *)v49 + 7) = v49 + 16;
          llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v49 + 16), v64, v62, v67, (llvm::Instruction *)v11);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v50, (llvm::Value *)1);
          if (v75 >= (unint64_t)HIDWORD(v75)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v74 + v75) = v11;
          LODWORD(v75) = v75 + 1;
          v67[0] = 0;
          if (sub_1CD1160CC((uint64_t)&v72, (uint64_t)v12, v67))
          {
LABEL_70:
            uint64_t v5 = 1;
            unsigned int v32 = v69;
            uint64_t v6 = &byte_1CFBCE98E;
            unsigned int v7 = "_elem";
LABEL_71:
            if (v32 != v71)
            {
              uint64_t v51 = v5;
              uint64_t v52 = v6;
              unsigned int v53 = v7;
              free(v32);
              unsigned int v7 = v53;
              uint64_t v6 = v52;
              uint64_t v5 = v51;
            }
            continue;
          }
          unsigned int v54 = v72 >> 1;
          if (v72) {
            unsigned int v55 = 8;
          }
          else {
            unsigned int v55 = DWORD2(v73[0]);
          }
          if (4 * v54 + 4 >= 3 * v55)
          {
            v55 *= 2;
          }
          else if (v55 + ~v54 - HIDWORD(v72) > v55 >> 3)
          {
LABEL_78:
            LODWORD(v72) = v72 + 2;
            if (*(void *)v67[0] != -4096) {
              --HIDWORD(v72);
            }
            *(void *)v67[0] = v12;
            goto LABEL_70;
          }
          sub_1CD116178((uint64_t)&v72, v55);
          v67[0] = 0;
          sub_1CD1160CC((uint64_t)&v72, (uint64_t)v12, v67);
          goto LABEL_78;
        }
      }
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != v3);
  if (v75) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_36:
  char v23 = v72;
  if (v72 > 1)
  {
    if (v72)
    {
      uint64_t v26 = &v74;
    }
    else
    {
      uint64_t v2 = *(void ***)&v73[0];
      int v25 = DWORD2(v73[0]);
      if (!DWORD2(v73[0])) {
        goto LABEL_40;
      }
      uint64_t v26 = (void **)(*(void *)&v73[0] + 8 * DWORD2(v73[0]));
    }
    int v25 = v72 & 1;
    while (*v2 == (void *)-4096 || *v2 == (void *)-8192)
    {
      if (++v2 == v26)
      {
        uint64_t v2 = v26;
        break;
      }
    }
  }
  else
  {
    if (v72)
    {
      uint64_t v24 = 8;
    }
    else
    {
      uint64_t v2 = *(void ***)&v73[0];
      uint64_t v24 = DWORD2(v73[0]);
    }
    v2 += v24;
    int v25 = v72;
LABEL_40:
    uint64_t v26 = v2;
  }
  if (v25)
  {
    if (v2 != &v74)
    {
      do
      {
        if (!*((void *)*v2 + 1)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v56 = v2 + 1;
        uint64_t v2 = v26;
        if (v56 != v26)
        {
          uint64_t v2 = v56;
          while (*v2 == (void *)-4096 || *v2 == (void *)-8192)
          {
            if (++v2 == v26)
            {
              uint64_t v2 = v26;
              break;
            }
          }
        }
      }
      while (v2 != &v74);
      char v23 = v72;
    }
  }
  else
  {
    uint64_t v58 = *(void *)&v73[0] + 8 * DWORD2(v73[0]);
    if (v2 != (void **)v58)
    {
      do
      {
        if (!*((void *)*v2 + 1)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        unsigned int v59 = v2 + 1;
        uint64_t v2 = v26;
        if (v59 != v26)
        {
          while (*v59 == (void *)-4096 || *v59 == (void *)-8192)
          {
            if (++v59 == v26)
            {
              uint64_t v2 = v26;
              goto LABEL_115;
            }
          }
          uint64_t v2 = v59;
        }
LABEL_115:
        ;
      }
      while (v2 != (void **)v58);
      char v23 = v72;
    }
  }
  if ((v23 & 1) == 0)
  {
    char v57 = v5;
    MEMORY[0x1D25D9CD0](*(void *)&v73[0], 8);
    LOBYTE(v5) = v57;
  }
  if (v74 != v1)
  {
    char v60 = v5;
    free(v74);
    LOBYTE(v5) = v60;
  }
  return v5 & 1;
}

void sub_1CD10929C(llvm::Module *a1, uint64_t a2, int a3)
{
  v59[0] = "agx.driver_bindings";
  __int16 v60 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, v59);
  if (NamedMetadata)
  {
    uint64_t v10 = NamedMetadata;
    uint64_t v11 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (!v11) {
      return;
    }
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(**(void **)(v10 + 48) + 8 * v12);
      uint64_t v14 = *(unsigned int *)(v13 + 8);
      if (v14 == 4) {
        int v15 = 1;
      }
      else {
        int v15 = a3;
      }
      if ((v14 - 3) <= 1 && v15 != 0)
      {
        uint64_t v17 = *(void *)(v13 - 8 * v14);
        if (v17)
        {
          uint64_t v18 = *(void *)(v17 + 128);
          uint64_t v19 = *(void *)(a2 + 8);
          uint64_t v20 = *(unsigned int *)(a2 + 20);
          if (v19 != *(void *)a2)
          {
            unsigned int v24 = *(_DWORD *)(a2 + 16);
LABEL_28:
            if (3 * v24 <= 4 * ((int)v20 - *(_DWORD *)(a2 + 24)))
            {
              if (v24 >= 0x40) {
                v24 *= 2;
              }
              else {
                unsigned int v24 = 128;
              }
            }
            else if (v24 - v20 >= v24 >> 3)
            {
              goto LABEL_30;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v24);
            unsigned int v24 = *(_DWORD *)(a2 + 16);
            uint64_t v19 = *(void *)(a2 + 8);
LABEL_30:
            unsigned int v25 = v24 - 1;
            unsigned int v26 = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
            uint64_t v27 = (void *)(v19 + 8 * v26);
            uint64_t v28 = *v27;
            if (*v27 == -1)
            {
              int v29 = 0;
LABEL_42:
              if (v29) {
                unint64_t v33 = v29;
              }
              else {
                unint64_t v33 = v27;
              }
              if (*v33 != v18)
              {
                if (*v33 == -2) {
                  --*(_DWORD *)(a2 + 24);
                }
                else {
                  ++*(_DWORD *)(a2 + 20);
                }
                *unint64_t v33 = v18;
              }
            }
            else
            {
              int v29 = 0;
              int v30 = 1;
              while (v28 != v18)
              {
                if (v29) {
                  BOOL v31 = 0;
                }
                else {
                  BOOL v31 = v28 == -2;
                }
                if (v31) {
                  int v29 = v27;
                }
                unsigned int v32 = v26 + v30++;
                unsigned int v26 = v32 & v25;
                uint64_t v27 = (void *)(v19 + 8 * (v32 & v25));
                uint64_t v28 = *v27;
                if (*v27 == -1) {
                  goto LABEL_42;
                }
              }
            }
            goto LABEL_25;
          }
          if (v20)
          {
            uint64_t v21 = 0;
            uint64_t v22 = 8 * v20;
            char v23 = *(void **)(a2 + 8);
            while (*v23 != v18)
            {
              if (*v23 == -2) {
                uint64_t v21 = v23;
              }
              ++v23;
              v22 -= 8;
              if (!v22)
              {
                if (!v21) {
                  goto LABEL_23;
                }
                *uint64_t v21 = v18;
                --*(_DWORD *)(a2 + 24);
                goto LABEL_25;
              }
            }
            goto LABEL_25;
          }
LABEL_23:
          unsigned int v24 = *(_DWORD *)(a2 + 16);
          if (v20 >= v24) {
            goto LABEL_28;
          }
          *(_DWORD *)(a2 + 20) = v20 + 1;
          *(void *)(v19 + 8 * v20) = v18;
        }
      }
LABEL_25:
      if (++v12 == v11) {
        return;
      }
    }
  }
  v59[0] = "agx.compute_driver_bindings";
  __int16 v60 = 259;
  uint64_t v7 = llvm::Module::getNamedMetadata(a1, v59);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(unsigned int *)(*(void *)(v7 + 48) + 8);
    if (v9)
    {
      uint64_t v34 = 0;
      while (1)
      {
        uint64_t v35 = *(void *)(**(void **)(v8 + 48) + 8 * v34);
        uint64_t v36 = *(unsigned int *)(v35 + 8);
        if (v36) {
          break;
        }
LABEL_97:
        if (++v34 == v9) {
          return;
        }
      }
      uint64_t v37 = 0;
      while (1)
      {
        uint64_t v38 = *(unsigned __int8 **)(v35 - 8 * *(unsigned int *)(v35 + 8) + 8 * v37);
        if (v38 && *v38 - 4 <= 0x1E)
        {
          uint64_t v39 = *((unsigned int *)v38 + 2);
          int v40 = v39 == 4 ? 1 : a3;
          if ((v39 - 3) <= 1 && v40 != 0)
          {
            uint64_t v42 = *(void *)&v38[-8 * v39];
            if (v42)
            {
              uint64_t v43 = *(void *)(v42 + 128);
              uint64_t v44 = *(void *)(a2 + 8);
              uint64_t v45 = *(unsigned int *)(a2 + 20);
              if (v44 != *(void *)a2)
              {
                unsigned int v49 = *(_DWORD *)(a2 + 16);
LABEL_76:
                if (3 * v49 <= 4 * ((int)v45 - *(_DWORD *)(a2 + 24)))
                {
                  if (v49 >= 0x40) {
                    v49 *= 2;
                  }
                  else {
                    unsigned int v49 = 128;
                  }
                }
                else if (v49 - v45 >= v49 >> 3)
                {
                  goto LABEL_78;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v49);
                unsigned int v49 = *(_DWORD *)(a2 + 16);
                uint64_t v44 = *(void *)(a2 + 8);
LABEL_78:
                unsigned int v50 = v49 - 1;
                unsigned int v51 = (v49 - 1) & ((v43 >> 4) ^ (v43 >> 9));
                uint64_t v52 = (void *)(v44 + 8 * v51);
                uint64_t v53 = *v52;
                if (*v52 == -1)
                {
                  unsigned int v54 = 0;
LABEL_90:
                  if (v54) {
                    uint64_t v58 = v54;
                  }
                  else {
                    uint64_t v58 = v52;
                  }
                  if (*v58 != v43)
                  {
                    if (*v58 == -2) {
                      --*(_DWORD *)(a2 + 24);
                    }
                    else {
                      ++*(_DWORD *)(a2 + 20);
                    }
                    *uint64_t v58 = v43;
                  }
                }
                else
                {
                  unsigned int v54 = 0;
                  int v55 = 1;
                  while (v53 != v43)
                  {
                    if (v54) {
                      BOOL v56 = 0;
                    }
                    else {
                      BOOL v56 = v53 == -2;
                    }
                    if (v56) {
                      unsigned int v54 = v52;
                    }
                    unsigned int v57 = v51 + v55++;
                    unsigned int v51 = v57 & v50;
                    uint64_t v52 = (void *)(v44 + 8 * (v57 & v50));
                    uint64_t v53 = *v52;
                    if (*v52 == -1) {
                      goto LABEL_90;
                    }
                  }
                }
                goto LABEL_73;
              }
              if (v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = 8 * v45;
                uint64_t v48 = *(void **)(a2 + 8);
                while (*v48 != v43)
                {
                  if (*v48 == -2) {
                    uint64_t v46 = v48;
                  }
                  ++v48;
                  v47 -= 8;
                  if (!v47)
                  {
                    if (!v46) {
                      goto LABEL_71;
                    }
                    *uint64_t v46 = v43;
                    --*(_DWORD *)(a2 + 24);
                    goto LABEL_73;
                  }
                }
                goto LABEL_73;
              }
LABEL_71:
              unsigned int v49 = *(_DWORD *)(a2 + 16);
              if (v45 >= v49) {
                goto LABEL_76;
              }
              *(_DWORD *)(a2 + 20) = v45 + 1;
              *(void *)(v44 + 8 * v45) = v43;
            }
          }
        }
LABEL_73:
        if (++v37 == v36) {
          goto LABEL_97;
        }
      }
    }
  }
}

llvm *sub_1CD1096DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(llvm **)(a1 - 32);
  unsigned int v5 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(_DWORD *)(**(void **)(*(void *)v4 + 16) + 8);
  }
  unsigned int v6 = v5 >> 8;
  if (v6 != 2) {
    return (llvm *)(v6 == 64);
  }
  uint64_t result = llvm::getUnderlyingObject(v4, (const llvm::Value *)6);
  if (result)
  {
    if (*((unsigned char *)result + 16) != 60) {
      return 0;
    }
    uint64_t result = llvm::getUnderlyingObject(*((llvm **)result - 4), (const llvm::Value *)6);
    if (!result) {
      return result;
    }
    if (*((unsigned char *)result + 16) != 3) {
      return 0;
    }
    uint64_t v9 = *a3;
    uint64_t v8 = a3[1];
    if (v8 == *a3)
    {
      uint64_t v10 = *((unsigned int *)a3 + 5);
      uint64_t v11 = (llvm **)(v8 + 8 * v10);
      if (v10)
      {
        uint64_t v12 = 0;
        while (*(llvm **)(v8 + v12) != result)
        {
          v12 += 8;
          if (8 * v10 == v12) {
            goto LABEL_15;
          }
        }
        uint64_t v11 = (llvm **)(v8 + v12);
      }
LABEL_15:
      uint64_t v9 = a3[1];
      goto LABEL_16;
    }
    uint64_t v14 = *((unsigned int *)a3 + 4);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((result >> 4) ^ (result >> 9));
    uint64_t v11 = (llvm **)(v8 + 8 * v16);
    uint64_t v17 = *v11;
    if (*v11 == (llvm *)-1)
    {
      uint64_t v18 = 0;
LABEL_34:
      if (v18) {
        uint64_t v11 = v18;
      }
      if (*v11 != result)
      {
        LODWORD(v10) = *((_DWORD *)a3 + 5);
        uint64_t v11 = (llvm **)(v8 + 8 * v14);
LABEL_16:
        if (v8 == v9) {
          unsigned int v13 = v10;
        }
        else {
          unsigned int v13 = *((_DWORD *)a3 + 4);
        }
        return (llvm *)(v11 != (llvm **)(v8 + 8 * v13));
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != result)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == (llvm *)-2;
        }
        if (v20) {
          uint64_t v18 = v11;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        uint64_t v11 = (llvm **)(v8 + 8 * (v21 & v15));
        uint64_t v17 = *v11;
        if (*v11 == (llvm *)-1) {
          goto LABEL_34;
        }
      }
    }
    LODWORD(v10) = *((_DWORD *)a3 + 5);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1CD109868(llvm::Module *a1)
{
  uint64_t v4 = "agx.support.soft.fault";
  __int16 v5 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, &v4);
  if (result)
  {
    uint64_t v2 = *(void *)(*(void *)(***(void ***)(result + 48)
                               - 8 * *(unsigned int *)(***(void ***)(result + 48) + 8))
                   + 128);
    uint64_t v3 = (void *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u) {
      uint64_t v3 = (void *)*v3;
    }
    return *v3 != 0;
  }
  return result;
}

uint64_t sub_1CD1098E0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)a1)) {
    return 0xFFFFFFFFLL;
  }
  int v9 = *(unsigned __int8 *)(a1 + 16);
  if (v9 == 60)
  {
    uint64_t v17 = **(void **)(a1 - 32);
    int v18 = *(_DWORD *)(v17 + 8);
    if ((v18 & 0xFE) == 0x12) {
      int v18 = *(_DWORD *)(**(void **)(v17 + 16) + 8);
    }
    int v19 = *(llvm::Module **)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
    if (!sub_1CD1096DC(a1, v7, a3))
    {
      if (a4 && (v18 & 0xFFFFFF00) == 0x100 && (sub_1CD109868(v19) & 1) != 0) {
        return 5;
      }
      return 0xFFFFFFFFLL;
    }
    int v9 = *(unsigned __int8 *)(a1 + 16);
LABEL_25:
    if ((v9 - 89) < 5) {
      return 0;
    }
    if (v9 != 84) {
      return 1;
    }
    uint64_t v10 = *(void *)(a1 - 32);
    if (!v10) {
      return 0xFFFFFFFFLL;
    }
LABEL_33:
    if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v10 + 33) & 0x20) != 0)
    {
      uint64_t v20 = *(void *)(a1 + 64);
      if (!v20 || (*(unsigned char *)(v20 + 20) & 4) == 0 && (*(unsigned char *)(v20 + 17) & 0x10) == 0)
      {
        __int32 v22 = 7;
        if (sub_1CC5CB59C(a1, &v22, 1uLL))
        {
          uint64_t v21 = *(void *)(a1 - 32);
          if (!v21
            || *(unsigned char *)(v21 + 16)
            || *(void *)(v21 + 24) != *(void *)(a1 + 72)
            || *(_DWORD *)(v21 + 36) != 7)
          {
            return 1000;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) == 0)
        {
          return 1000;
        }
      }
      return 1;
    }
    return 0xFFFFFFFFLL;
  }
  if (v9 != 84) {
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(a1 - 32);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(v10 + 16) || *(void *)(v10 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v10 + 33) & 0x20) == 0) {
    goto LABEL_33;
  }
  int v11 = *(_DWORD *)(v10 + 36);
  uint64_t result = 0xFFFFFFFFLL;
  if ((v11 - 2493) > 0xF || ((1 << (v11 + 67)) & 0xFF0F) == 0)
  {
    unsigned int v13 = v11 - 2588;
    BOOL v14 = v13 > 0xF;
    int v15 = (1 << v13) & 0xFF0F;
    if (v14 || v15 == 0) {
      goto LABEL_33;
    }
  }
  return result;
}

BOOL sub_1CD109AEC(uint64_t a1, int a2)
{
  v44[8] = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 89) <= 4 && ((1 << (v2 - 89)) & 0x13) != 0) {
    return 0;
  }
  if ((v2 - 66) <= 0xC)
  {
    int v6 = *(_DWORD *)(a1 + 20);
    if ((v6 & 0x40000000) != 0) {
      uint64_t v7 = *(uint64_t ***)(a1 - 8);
    }
    else {
      uint64_t v7 = (uint64_t **)(a1 - 32 * (v6 & 0x7FFFFFF));
    }
    uint64_t v12 = **v7;
    uint64_t v13 = *(void *)a1;
    if (*(unsigned char *)(*(void *)a1 + 8) != 13) {
      uint64_t v13 = 0;
    }
    if (v12) {
      BOOL v14 = (*(_DWORD *)(v12 + 8) & 0xFFFFF0FF) == 13;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14 && (!v13 || *(_DWORD *)(v13 + 8) >= 0x1000u))
    {
      if (v2 != 73 && v2 != 66) {
        return (v2 - 69) < 4;
      }
      uint64_t v15 = (v6 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v6 & 0x7FFFFFF);
      uint64_t v20 = *(void *)(*(void *)v15 + 8);
      if (!v20 || *(void *)(v20 + 8)) {
        return (v2 - 69) < 4;
      }
    }
    return 1;
  }
  if ((v2 - 81) < 2) {
    return 0;
  }
  if (v2 == 84)
  {
    uint64_t v9 = *(void *)(a1 - 32);
    if (v9)
    {
      if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v9 + 33) & 0x20) != 0)
      {
        int v33 = *(_DWORD *)(v9 + 36);
        if (v33 == 2131)
        {
          uint64_t v35 = *(void *)(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 8);
          if ((!v35 || *(void *)(v35 + 8)) && !*(unsigned char *)(*(void *)a1 + 8)) {
            return 0;
          }
        }
        else if (v33 == 139)
        {
          uint64_t v34 = *(void *)(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 8);
          if (!v34 || *(void *)(v34 + 8)) {
            return 0;
          }
        }
        if (sub_1CD105070(a1)) {
          return 0;
        }
        BOOL result = 0;
        if (v33 == 1281 || v33 == 1822) {
          return result;
        }
      }
    }
  }
  uint64_t v36 = &v37;
  uint64_t v37 = 0;
  if (sub_1CC04C34C(&v36, a1) && v37)
  {
    int v10 = *(_DWORD *)(a1 + 20);
    uint64_t v11 = (v10 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v10 & 0x7FFFFFF);
    uint64_t v16 = *(void *)(*(void *)v11 + 8);
    if (!v16 || *(void *)(v16 + 8)) {
      return 0;
    }
  }
  unsigned int v17 = *(unsigned __int8 *)(a1 + 16);
  if (v17 > 0x3D)
  {
    BOOL result = 0;
    if (v17 == 62 || v17 == 83) {
      return result;
    }
    goto LABEL_61;
  }
  if (v17 != 53)
  {
    if (v17 == 60)
    {
      uint64_t v18 = **(void **)(a1 - 32);
      int v19 = *(_DWORD *)(v18 + 8);
      if ((v19 & 0xFE) == 0x12) {
        int v19 = *(_DWORD *)(**(void **)(v18 + 16) + 8);
      }
      return (v19 & 0xFFFFFF00) != 0x4000;
    }
    goto LABEL_61;
  }
  int v21 = *(_DWORD *)(a1 + 20);
  if ((v21 & 0x40000000) != 0) {
    uint64_t v22 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v22 = a1 - 32 * (v21 & 0x7FFFFFF);
  }
  uint64_t v23 = *(void *)(v22 + 32);
  if (*(unsigned char *)(v23 + 16) != 16) {
    return 1;
  }
  unsigned int v24 = (void *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u) {
    unsigned int v24 = (void *)*v24;
  }
  unsigned int v25 = *(_DWORD *)v24;
  uint64_t v37 = 1;
  int64x2_t v38 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v39 = v38;
  int64x2_t v40 = v38;
  int64x2_t v41 = v38;
  uint64_t v42 = v44;
  uint64_t v43 = 0x800000000;
  char v26 = sub_1CD109F20(a1, 0, 1, v25, (uint64_t)&v37);
  if (v42 != v44) {
    free(v42);
  }
  if ((v37 & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](v38.i64[0], 8);
    if ((v26 & 1) == 0) {
      goto LABEL_60;
    }
    return 0;
  }
  if (v26) {
    return 0;
  }
LABEL_60:
  unsigned int v17 = *(unsigned __int8 *)(a1 + 16);
LABEL_61:
  if (!a2 || v17 != 45)
  {
    if ((v17 | 0x10) == 0x39)
    {
      int v28 = *(_DWORD *)(a1 + 20);
      uint64_t v29 = (v28 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v28 & 0x7FFFFFF);
      if (*(unsigned char *)(*(void *)(v29 + 32) + 16) == 16)
      {
        uint64_t v30 = *(void *)(a1 + 8);
        if (v30)
        {
          if (!*(void *)(v30 + 8))
          {
            while (1)
            {
              uint64_t v32 = *(void *)(v30 + 24);
              uint64_t v30 = *(void *)(v32 + 8);
              if (!v30 || *(void *)(v30 + 8)) {
                break;
              }
              int v31 = *(unsigned __int8 *)(v32 + 16);
              if ((v31 - 66) >= 0xD) {
                return v31 != 62 || (*(unsigned char *)(*(void *)(v30 + 24) + 16) & 0xFE) != 0x3C;
              }
            }
          }
        }
      }
    }
    return 1;
  }
  char v27 = sub_1CD10A1BC(a1, 1, 0, 0);
  BOOL result = 0;
  if ((v27 & 1) == 0) {
    return 1;
  }
  return result;
}

uint64_t sub_1CD109F20(uint64_t a1, char a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    return 1;
  }
  char v11 = a4;
  while (1)
  {
    uint64_t v12 = *(void *)(v5 + 24);
    uint64_t v39 = v12;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 16);
    switch(v13)
    {
      case 'B':
LABEL_24:
        if (!sub_1CD109F20()) {
          return 0;
        }
        sub_1CC04D4E0(a5, &v39);
        goto LABEL_77;
      case '>':
        goto LABEL_77;
      case '8':
        int v14 = *(_DWORD *)(v12 + 20);
        if ((v14 & 0x40000000) != 0) {
          uint64_t v15 = *(void *)(v12 - 8);
        }
        else {
          uint64_t v15 = v12 - 32 * (v14 & 0x7FFFFFF);
        }
        uint64_t v16 = *(void *)(v15 + 32);
        if (v16) {
          BOOL v17 = *(unsigned char *)(v16 + 16) == 16;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17 && *(void *)v12 && *(_DWORD *)(*(void *)v12 + 8) == 16397)
        {
          int v19 = (uint64_t *)(v16 + 24);
          if (*(_DWORD *)(v16 + 32) >= 0x41u) {
            int v19 = (uint64_t *)*v19;
          }
          if (!*((_DWORD *)v19 + 1)) {
            goto LABEL_24;
          }
        }
        break;
      default:
        if ((v13 - 41) > 0x11) {
          return 0;
        }
        int v14 = *(_DWORD *)(v12 + 20);
        break;
    }
    if ((v14 & 0x40000000) != 0) {
      uint64_t v20 = *(uint64_t **)(v12 - 8);
    }
    else {
      uint64_t v20 = (uint64_t *)(v12 - 32 * (v14 & 0x7FFFFFF));
    }
    if (v13 > 0x38) {
      return 0;
    }
    if (((1 << v13) & 0x60200000000000) != 0)
    {
      if ((v14 & 0x40000000) != 0) {
        uint64_t v27 = *(void *)(v12 - 8);
      }
      else {
        uint64_t v27 = v12 - 32 * (v14 & 0x7FFFFFF);
      }
      if (*(unsigned char *)(*(void *)(v27 + 32) + 16) != 16) {
        return 0;
      }
      goto LABEL_77;
    }
    if (((1 << v13) & 0xA0000000000) == 0) {
      break;
    }
    uint64_t v21 = *v20;
    int v22 = *(_DWORD *)(*(void *)v12 + 8);
    int v23 = *(_DWORD *)(*(void *)v12 + 8) >> 8;
    BOOL v24 = v22 == 13 && v23 == 16;
    if (!v24 && (v22 != 13 || (v23 == 32 ? (BOOL v25 = a3 == 0) : (BOOL v25 = 1), v25))
      || ((v14 & 0x40000000) != 0 ? (uint64_t v26 = *(void *)(v12 - 8)) : (uint64_t v26 = v12 - 32 * (v14 & 0x7FFFFFF)),
          (uint64_t v29 = *(void *)(v26 + 32 * (v21 == a1)), v30 = *(unsigned __int8 *)(v29 + 16), v29)
        ? (BOOL v31 = v30 >= 0x1C)
        : (BOOL v31 = 0),
          v31 && v30 == 45))
    {
      BOOL v32 = v13 == 43 && v21 == a1;
      BOOL v33 = v32;
      if (a4 > 4 || v33 || (a2 & 1) != 0) {
        return 0;
      }
    }
LABEL_77:
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      return 1;
    }
  }
  if (v13 == 56)
  {
    uint64_t v28 = (v14 & 0x40000000) != 0 ? *(void *)(v12 - 8) : v12 - 32 * (v14 & 0x7FFFFFF);
    uint64_t v34 = *(void *)(v28 + 32);
    if (v34 && *(unsigned char *)(v34 + 16) == 16)
    {
      uint64_t v36 = (void *)(v34 + 24);
      if (*(_DWORD *)(v34 + 32) >= 0x41u) {
        uint64_t v36 = (void *)*v36;
      }
      uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)((*v36 >> v11) + 1));
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] == 1) {
        goto LABEL_77;
      }
    }
  }
  return 0;
}

uint64_t sub_1CD10A1BC(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  if (!a4) {
    goto LABEL_11;
  }
  int v4 = *((_DWORD *)a4 + 4);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *a4;
  unsigned int v7 = v4 - 1;
  uint64_t v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  uint64_t v9 = *(void *)(*a4 + 16 * v8);
  if (v5 != v9)
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v8 + v10++;
      uint64_t v8 = v11 & v7;
      uint64_t v9 = *(void *)(v6 + 16 * v8);
      if (v5 == v9) {
        goto LABEL_7;
      }
    }
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v12 = *(void **)(v6 + 16 * v8 + 8);
  if (!v12)
  {
LABEL_11:
    unsigned int v13 = 0;
    goto LABEL_12;
  }
  unsigned int v13 = 0;
  do
  {
    uint64_t v12 = (void *)*v12;
    ++v13;
  }
  while (v12);
LABEL_12:
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    if (a4) {
      int v15 = a3;
    }
    else {
      int v15 = 0;
    }
    do
    {
      uint64_t v16 = *(void *)(v14 + 24);
      unsigned int v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16) {
        BOOL v18 = v17 >= 0x1C;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18 || v17 - 59 < 0xFFFFFFEE) {
        return 0;
      }
      int v20 = *(_DWORD *)(v16 + 20);
      uint64_t v21 = (v20 & 0x40000000) != 0 ? *(uint64_t **)(v16 - 8) : (uint64_t *)(v16 - 32 * (v20 & 0x7FFFFFF));
      if ((v17 | 2) != 0x2B) {
        return 0;
      }
      uint64_t v22 = *v21;
      if (v15)
      {
        int v23 = *((_DWORD *)a4 + 4);
        if (v23)
        {
          uint64_t v24 = *(void *)(v16 + 40);
          uint64_t v25 = *a4;
          unsigned int v26 = v23 - 1;
          uint64_t v27 = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
          uint64_t v28 = *(void *)(*a4 + 16 * v27);
          if (v24 == v28)
          {
LABEL_34:
            BOOL v31 = *(void **)(v25 + 16 * v27 + 8);
            if (v31)
            {
              unsigned int v32 = 0;
              do
              {
                BOOL v31 = (void *)*v31;
                ++v32;
              }
              while (v31);
              BOOL v34 = v17 == 43 && v22 != a1;
              if (v32 > v13 || v34) {
                return (uint64_t)v31;
              }
              goto LABEL_48;
            }
          }
          else
          {
            int v29 = 1;
            while (v28 != -4096)
            {
              int v30 = v27 + v29++;
              uint64_t v27 = v30 & v26;
              uint64_t v28 = *(void *)(v25 + 16 * v27);
              if (v24 == v28) {
                goto LABEL_34;
              }
            }
          }
        }
      }
      if (v17 == 43 && v22 != a1) {
        return 0;
      }
LABEL_48:
      int v35 = *(_DWORD *)(*(void *)v16 + 8);
      int v36 = *(_DWORD *)(*(void *)v16 + 8) >> 8;
      if (v35 != 13 || v36 != 16)
      {
        BOOL v31 = 0;
        if (v35 != 13) {
          return (uint64_t)v31;
        }
        if (v36 != 32 || a2 == 0) {
          return (uint64_t)v31;
        }
      }
      uint64_t v39 = *(void *)(v16 + 32 * (v22 == a1) - 64);
      if (v39 && *(unsigned char *)(v39 + 16) == 45) {
        return 0;
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14);
  }
  return 1;
}

unint64_t sub_1CD10A3A4(llvm::Module *a1)
{
  uint64_t v14 = "agx.boundcheck";
  __int16 v15 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, &v14);
  if (NamedMetadata)
  {
    uint64_t v5 = *(uint64_t **)(NamedMetadata + 48);
    uint64_t v6 = *((unsigned int *)v5 + 2);
    if (v6)
    {
      uint64_t v7 = *v5;
      unsigned int v3 = -1;
      uint64_t v2 = 1;
      do
      {
        uint64_t v8 = (void *)(*(void *)v7 - 8 * *(unsigned int *)(*(void *)v7 + 8));
        uint64_t v9 = *(void *)(v8[1] + 128);
        int v10 = (unsigned int *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u) {
          int v10 = *(unsigned int **)v10;
        }
        uint64_t v11 = *(void *)(*v8 + 8);
        if (*(void *)v11 == 13)
        {
          if (*(void *)(v11 + 24) == 0x6F7479726F6D656DLL && *(void *)(v11 + 29) == 0x6B636568636F7479) {
            uint64_t v2 = *v10;
          }
        }
        else
        {
          switch(*(void *)v11)
          {
            case 9:
              if (*(void *)(v11 + 24) == 0x6E6974726F706572 && *(unsigned char *)(v11 + 32) == 103) {
                unsigned int v3 = *v10;
              }
              break;
            default:
              break;
          }
        }
        v7 += 8;
        --v6;
      }
      while (v6);
    }
    else
    {
      uint64_t v2 = 1;
      unsigned int v3 = -1;
    }
  }
  else
  {
    uint64_t v2 = 0;
    unsigned int v3 = -1;
  }
  return v3 | (unint64_t)(v2 << 32);
}

uint64_t sub_1CD10A77C@<X0>(llvm::Module *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v33 = "agx.local.store.spill";
  __int16 v34 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, &v33);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (result)
  {
    int v4 = *(uint64_t **)(result + 48);
    uint64_t v5 = *((unsigned int *)v4 + 2);
    if (v5)
    {
      uint64_t v6 = *v4;
      uint64_t result = 0x6C6C6970732D6461;
      do
      {
        uint64_t v7 = (void *)(*(void *)v6 - 8 * *(unsigned int *)(*(void *)v6 + 8));
        uint64_t v8 = *(void *)(v7[1] + 128);
        uint64_t v9 = (void *)(v8 + 24);
        if (*(_DWORD *)(v8 + 32) >= 0x41u) {
          uint64_t v9 = (void *)*v9;
        }
        uint64_t v10 = *(void *)(*v7 + 8);
        uint64_t v11 = *(void *)v10;
        int v12 = *(_DWORD *)v9;
        if (*(uint64_t *)v10 > 21)
        {
          if (v11 == 22)
          {
            uint64_t v20 = *(void *)(v10 + 24);
            uint64_t v21 = *(void *)(v10 + 32);
            uint64_t v22 = *(void *)(v10 + 38);
            if (v20 == 0x657268742D726570 && v21 == 0x6C6C6970732D6461 && v22 == 0x73657479622D6C6CLL) {
              *(_DWORD *)(a2 + 4) = v12;
            }
          }
          else if (v11 == 23)
          {
            uint64_t v28 = *(void *)(v10 + 24);
            uint64_t v29 = *(void *)(v10 + 32);
            uint64_t v30 = *(void *)(v10 + 39);
            BOOL v31 = v28 == 0x657268742D726570 && v29 == 0x636F6C6C612D6461;
            if (v31 && v30 == 0x73657479622D6163) {
              *(_DWORD *)(a2 + 12) = v12;
            }
          }
        }
        else if (v11 == 17)
        {
          if (*(void *)(v10 + 24) == 0x672D646165726874
            && *(void *)(v10 + 32) == 0x7A69732D70756F72
            && *(unsigned char *)(v10 + 40) == 101)
          {
            *(_DWORD *)a2 = v12;
          }
          uint64_t v15 = *(void *)(v10 + 24);
          uint64_t v16 = *(void *)(v10 + 32);
          int v17 = *(unsigned __int8 *)(v10 + 40);
          if (v15 == 0x6F79616C2D616F73 && v16 == 0x636F6C6C612D7475 && v17 == 97) {
            *(unsigned char *)(a2 + 16) = v12 != 0;
          }
        }
        else if (v11 == 10)
        {
          uint64_t v25 = *(void *)(v10 + 24);
          int v26 = *(unsigned __int16 *)(v10 + 32);
          if (v25 == 0x6F79616C2D616F73 && v26 == 29813) {
            *(unsigned char *)(a2 + 8) = v12 != 0;
          }
        }
        v6 += 8;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_1CD10A990(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t result = *(void *)(a1 - 32);
  unsigned int v6 = *(_DWORD *)(*(void *)result + 8);
  unsigned int v7 = v6;
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(**(void **)(*(void *)result + 16) + 8);
  }
  unsigned int v8 = v7 >> 8;
  if (a4 && v8 == 2) {
    return 1;
  }
  if (v8 - 1 > 1) {
    return v8 == 64;
  }
  if (*(unsigned char *)(result + 16) == 3) {
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)llvm::getUnderlyingObject((llvm *)result, (const llvm::Value *)6);
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 60) {
      return 0;
    }
    uint64_t result = (uint64_t)llvm::getUnderlyingObject(*(llvm **)(result - 32), (const llvm::Value *)6);
    if (result)
    {
      if (*(unsigned char *)(result + 16) == 3)
      {
        unsigned int v6 = *(_DWORD *)(*(void *)result + 8);
LABEL_12:
        if ((v6 & 0xFFFFFF00) != 0x200)
        {
          uint64_t v9 = a3 + 2;
          int v10 = *a3;
          if (*a3)
          {
            int v11 = 16;
            int v12 = a3 + 2;
          }
          else
          {
            int v12 = (int *)*((void *)a3 + 1);
            int v11 = a3[4];
            if (!v11)
            {
              uint64_t v20 = 0;
              goto LABEL_32;
            }
          }
          int v13 = v11 - 1;
          uint64_t v14 = (uint64_t *)&v12[8 * (v13 & ((result >> 4) ^ (result >> 9)))];
          uint64_t v15 = *v14;
          if (*v14 == result) {
            goto LABEL_16;
          }
          int v17 = 1;
          LODWORD(v18) = v13 & ((result >> 4) ^ (result >> 9));
          while (v15 != -4096)
          {
            int v19 = v18 + v17++;
            uint64_t v18 = v19 & v13;
            uint64_t v15 = *(void *)&v12[8 * v18];
            if (v15 == result)
            {
              uint64_t v14 = (uint64_t *)&v12[8 * v18];
              goto LABEL_16;
            }
          }
          if (v10)
          {
            uint64_t v20 = 16;
            int v12 = a3 + 2;
          }
          else
          {
            int v12 = (int *)*((void *)a3 + 1);
            uint64_t v20 = a3[4];
          }
LABEL_32:
          uint64_t v14 = (uint64_t *)&v12[8 * v20];
LABEL_16:
          if ((v10 & 1) == 0) {
            uint64_t v9 = (int *)*((void *)a3 + 1);
          }
          LODWORD(v16) = a3[4];
          if (*a3) {
            uint64_t v16 = 16;
          }
          else {
            uint64_t v16 = v16;
          }
          if (&v9[8 * v16] != (int *)v14) {
            return *((unsigned char *)v14 + 24) != 0;
          }
          return 0;
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

llvm *sub_1CD10AB34(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 60)
  {
    uint64_t result = *(llvm **)(a1 - 32);
    unsigned int v8 = *(_DWORD *)(*(void *)result + 8);
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(_DWORD *)(**(void **)(*(void *)result + 16) + 8);
    }
    unsigned int v9 = v8 >> 8;
    if (v9 != 2) {
      return (llvm *)(v9 == 64);
    }
    if (*((unsigned char *)result + 16) != 3)
    {
      uint64_t result = llvm::getUnderlyingObject(result, (const llvm::Value *)6);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)result + 16) != 60) {
        return 0;
      }
      uint64_t result = llvm::getUnderlyingObject(*((llvm **)result - 4), (const llvm::Value *)6);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)result + 16) != 3) {
        return 0;
      }
    }
    int v10 = a3 + 2;
    int v11 = *a3;
    if (*a3)
    {
      int v12 = 16;
      int v13 = a3 + 2;
    }
    else
    {
      int v13 = (int *)*((void *)a3 + 1);
      int v12 = a3[4];
      if (!v12)
      {
        uint64_t v21 = 0;
        goto LABEL_32;
      }
    }
    int v14 = v12 - 1;
    uint64_t v15 = &v13[8 * (v14 & ((result >> 4) ^ (result >> 9)))];
    uint64_t v16 = *(llvm **)v15;
    if (*(llvm **)v15 == result) {
      goto LABEL_15;
    }
    int v18 = 1;
    LODWORD(v19) = v14 & ((result >> 4) ^ (result >> 9));
    while (v16 != (llvm *)-4096)
    {
      int v20 = v19 + v18++;
      uint64_t v19 = v20 & v14;
      uint64_t v16 = *(llvm **)&v13[8 * v19];
      if (v16 == result)
      {
        uint64_t v15 = &v13[8 * v19];
        goto LABEL_15;
      }
    }
    if (v11)
    {
      uint64_t v21 = 16;
      int v13 = a3 + 2;
    }
    else
    {
      int v13 = (int *)*((void *)a3 + 1);
      uint64_t v21 = a3[4];
    }
LABEL_32:
    uint64_t v15 = &v13[8 * v21];
LABEL_15:
    if ((v11 & 1) == 0) {
      int v10 = (int *)*((void *)a3 + 1);
    }
    LODWORD(v17) = a3[4];
    if (*a3) {
      uint64_t v17 = 16;
    }
    else {
      uint64_t v17 = v17;
    }
    if (&v10[8 * v17] != v15)
    {
      if (*((unsigned char *)v15 + 16)) {
        return (llvm *)(*((void *)v15 + 1) > 3uLL);
      }
      else {
        return (llvm *)a4;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CD10ACE0(llvm::Instruction *a1, int a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 16);
  if (v4 < 0x1C) {
    return result;
  }
  unsigned int v5 = v4 - 66;
  if (v4 - 66 <= 0xC)
  {
    int v6 = *((_DWORD *)a1 + 5);
    if ((v6 & 0x40000000) != 0) {
      unsigned int v7 = (uint64_t **)*((void *)a1 - 1);
    }
    else {
      unsigned int v7 = (uint64_t **)((char *)a1 - 32 * (v6 & 0x7FFFFFF));
    }
    uint64_t v11 = **v7;
    uint64_t v12 = *(void *)a1;
    if (*(unsigned char *)(*(void *)a1 + 8) != 13) {
      uint64_t v12 = 0;
    }
    if (v11) {
      BOOL v13 = (*(_DWORD *)(v11 + 8) & 0xFFFFF0FF) == 13;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13 || v12 && *(_DWORD *)(v12 + 8) < 0x1000u) {
      return 1;
    }
    uint64_t result = 1;
    if (v5 <= 7 && ((1 << v5) & 0x83) != 0)
    {
      if ((v6 & 0x40000000) != 0) {
        int v14 = (char *)*((void *)a1 - 1);
      }
      else {
        int v14 = (char *)a1 - 32 * (v6 & 0x7FFFFFF);
      }
      uint64_t v27 = *(void *)(*(void *)v14 + 8);
      if (v27) {
        return *(void *)(v27 + 8) == 0;
      }
      return 0;
    }
    return result;
  }
  uint64_t v30 = &v31;
  uint64_t v31 = 0;
  if (sub_1CC04C34C(&v30, (uint64_t)a1) && v31)
  {
    int v9 = *((_DWORD *)a1 + 5);
    int v10 = (v9 & 0x40000000) != 0
        ? (llvm::Instruction *)*((void *)a1 - 1)
        : (llvm::Instruction *)((char *)a1 - 32 * (v9 & 0x7FFFFFF));
    uint64_t v15 = *(void *)(*(void *)v10 + 8);
    if (v15)
    {
      if (!*(void *)(v15 + 8)) {
        return 0;
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + 16);
  if (v16 == 60)
  {
    uint64_t v21 = **((void **)a1 - 4);
    if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
      unsigned int v22 = *(_DWORD *)(**(void **)(v21 + 16) + 8) & 0xFFFFFF00;
    }
    else {
      unsigned int v22 = *(_DWORD *)(v21 + 8) & 0xFFFFFF00;
    }
    if (v22 != 0x4000)
    {
      BOOL v25 = v22 == 768;
      unsigned int v26 = 10;
LABEL_55:
      if (v25) {
        return v26;
      }
      else {
        return 100;
      }
    }
    return 0;
  }
  if (v16 == 61)
  {
    uint64_t v23 = **((void **)a1 - 4);
    int v24 = *(_DWORD *)(v23 + 8);
    if ((v24 & 0xFE) == 0x12) {
      int v24 = *(_DWORD *)(**(void **)(v23 + 16) + 8);
    }
    BOOL v25 = (v24 & 0xFFFFFF00) == 0x4000;
    unsigned int v26 = 5;
    goto LABEL_55;
  }
  if (v16 != 84) {
    goto LABEL_34;
  }
  uint64_t v17 = *((void *)a1 - 4);
  if (!v17
    || *(unsigned char *)(v17 + 16)
    || *(void *)(v17 + 24) != *((void *)a1 + 9)
    || (*(unsigned char *)(v17 + 33) & 0x20) == 0)
  {
    goto LABEL_34;
  }
  uint64_t v28 = (llvm *)*(unsigned int *)(v17 + 36);
  BOOL v29 = sub_1CB859A14(*(_DWORD *)(v17 + 36));
  uint64_t result = 100;
  if (!v29 && (v28 - 1682) >= 0x8C)
  {
    if (llvm::GetItrKind(v28)) {
      return 15;
    }
    if (sub_1CD0FF228((int)v28) & 1) != 0 || (sub_1CD0FF1D0((int)v28)) {
      return 10;
    }
    uint64_t result = 10;
    if ((v28 - 2471) >= 8
      && (v28 - 2703) >= 2
      && (v28 - 1996) >= 2)
    {
LABEL_34:
      int HaveSideEffects = llvm::Instruction::mayHaveSideEffects(a1);
      if (a2) {
        unsigned int v19 = 1;
      }
      else {
        unsigned int v19 = 20;
      }
      if (a2) {
        unsigned int v20 = 10;
      }
      else {
        unsigned int v20 = 100;
      }
      if (HaveSideEffects) {
        return v20;
      }
      else {
        return v19;
      }
    }
  }
  return result;
}

void sub_1CD10AFA4(llvm::Module *a1, uint64_t a2)
{
  unsigned int v84 = "agx.speculative_bindings";
  v88[0] = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, (const char **)&v84);
  unsigned int v84 = (char *)v88;
  uint64_t v85 = (char *)v88;
  uint64_t v86 = 4;
  int v87 = 0;
  if (NamedMetadata)
  {
    uint64_t v5 = NamedMetadata;
    uint64_t v6 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v6)
    {
      uint64_t v7 = 0;
      unsigned int v8 = 4;
      while (1)
      {
        uint64_t v9 = *(void *)(**(void **)(v5 + 48) + 8 * v7);
        int v10 = v85;
        uint64_t v11 = HIDWORD(v86);
        if (v85 != v84) {
          break;
        }
        if (HIDWORD(v86))
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * HIDWORD(v86);
          int v14 = v85;
          while (*(void *)v14 != v9)
          {
            if (*(void *)v14 == -2) {
              uint64_t v12 = v14;
            }
            v14 += 8;
            v13 -= 8;
            if (!v13)
            {
              if (!v12) {
                goto LABEL_12;
              }
              *(void *)uint64_t v12 = v9;
              --v87;
              goto LABEL_14;
            }
          }
          goto LABEL_14;
        }
LABEL_12:
        if (HIDWORD(v86) >= v8) {
          break;
        }
        ++HIDWORD(v86);
        *(void *)&v85[8 * v11] = v9;
LABEL_14:
        if (++v7 == v6) {
          goto LABEL_37;
        }
      }
      if (3 * v8 <= 4 * (HIDWORD(v86) - v87))
      {
        if (v8 >= 0x40) {
          v8 *= 2;
        }
        else {
          unsigned int v8 = 128;
        }
      }
      else if (v8 - HIDWORD(v86) >= v8 >> 3)
      {
        goto LABEL_18;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v84, v8);
      unsigned int v8 = v86;
      int v10 = v85;
LABEL_18:
      unsigned int v15 = v8 - 1;
      unsigned int v16 = (v8 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v17 = &v10[8 * v16];
      uint64_t v18 = *(void *)v17;
      if (*(void *)v17 == -1)
      {
        unsigned int v19 = 0;
LABEL_30:
        if (v19) {
          uint64_t v23 = v19;
        }
        else {
          uint64_t v23 = v17;
        }
        if (*(void *)v23 != v9)
        {
          if (*(void *)v23 == -2) {
            --v87;
          }
          else {
            ++HIDWORD(v86);
          }
          *(void *)uint64_t v23 = v9;
        }
      }
      else
      {
        unsigned int v19 = 0;
        int v20 = 1;
        while (v18 != v9)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v18 == -2;
          }
          if (v21) {
            unsigned int v19 = v17;
          }
          unsigned int v22 = v16 + v20++;
          unsigned int v16 = v22 & v15;
          uint64_t v17 = &v10[8 * (v22 & v15)];
          uint64_t v18 = *(void *)v17;
          if (*(void *)v17 == -1) {
            goto LABEL_30;
          }
        }
      }
      goto LABEL_14;
    }
  }
LABEL_37:
  BOOL v80 = "agx.driver_bindings";
  __int16 v83 = 259;
  uint64_t v24 = llvm::Module::getNamedMetadata(a1, &v80);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(unsigned int *)(*(void *)(v24 + 48) + 8);
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      do
      {
        uint64_t v29 = *(void *)(**(void **)(v25 + 48) + 8 * v27);
        uint64_t v30 = *(unsigned __int8 **)(v29 - 8 * *(unsigned int *)(v29 + 8));
        if (v30 && *v30 - 1 <= 1 && sub_1CD10B5EC(*((void *)v30 + 16)))
        {
          uint64_t v31 = *(unsigned int *)(v29 + 8);
          if (v31 < 4)
          {
            uint64_t v34 = 0;
            unint64_t v32 = 0;
          }
          else
          {
            unint64_t v32 = *(void *)(*(void *)(v29 - 8 * v31 + 24) + 128);
            if (v32)
            {
              BOOL v33 = (unint64_t *)(v32 + 24);
              if (*(_DWORD *)(v32 + 32) >= 0x41u) {
                BOOL v33 = (unint64_t *)*v33;
              }
              unint64_t v32 = *v33;
              unint64_t v28 = *v33 >> 8;
              uint64_t v34 = 1;
            }
            else
            {
              uint64_t v34 = 0;
            }
            unint64_t v32 = v32;
          }
          int v35 = v84;
          if (v85 == v84)
          {
            int v36 = HIDWORD(v86);
            uint8x8_t v37 = &v85[8 * HIDWORD(v86)];
            if (HIDWORD(v86))
            {
              uint64_t v38 = 0;
              while (*(void *)&v85[v38] != v29)
              {
                v38 += 8;
                if (8 * HIDWORD(v86) == v38) {
                  goto LABEL_56;
                }
              }
              uint8x8_t v37 = &v85[v38];
            }
LABEL_56:
            int v35 = v85;
          }
          else
          {
            int v42 = v86 - 1;
            unsigned int v43 = (v86 - 1) & ((v29 >> 4) ^ (v29 >> 9));
            uint8x8_t v37 = &v85[8 * v43];
            uint64_t v44 = *(void *)v37;
            if (*(void *)v37 == -1)
            {
              uint64_t v45 = 0;
LABEL_79:
              if (v45) {
                uint8x8_t v37 = v45;
              }
              int v36 = HIDWORD(v86);
              if (*(void *)v37 != v29) {
                uint8x8_t v37 = &v85[8 * v86];
              }
            }
            else
            {
              uint64_t v45 = 0;
              int v46 = 1;
              while (v44 != v29)
              {
                if (v45) {
                  BOOL v47 = 0;
                }
                else {
                  BOOL v47 = v44 == -2;
                }
                if (v47) {
                  uint64_t v45 = v37;
                }
                unsigned int v48 = v43 + v46++;
                unsigned int v43 = v48 & v42;
                uint8x8_t v37 = &v85[8 * (v48 & v42)];
                uint64_t v44 = *(void *)v37;
                if (*(void *)v37 == -1) {
                  goto LABEL_79;
                }
              }
              int v36 = HIDWORD(v86);
            }
          }
          unint64_t v39 = v32 | (v28 << 8);
          if (v85 == v35) {
            int v40 = v36;
          }
          else {
            int v40 = v86;
          }
          BOOL v80 = (const char *)*((void *)v30 + 16);
          *(void *)&long long v81 = v39;
          if (v37 == &v85[8 * v40]) {
            char v41 = v34;
          }
          else {
            char v41 = 1;
          }
          *((void *)&v81 + 1) = v34;
          char v82 = v41;
          sub_1CD1163B0((uint64_t)v79, a2, (uint64_t *)&v80, &v81);
        }
        ++v27;
      }
      while (v27 != v26);
    }
  }
  else
  {
    BOOL v80 = "agx.compute_driver_bindings";
    __int16 v83 = 259;
    uint64_t v49 = llvm::Module::getNamedMetadata(a1, &v80);
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = *(unsigned int *)(*(void *)(v49 + 48) + 8);
      if (v51)
      {
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        do
        {
          uint64_t v54 = *(void *)(**(void **)(v50 + 48) + 8 * v52);
          uint64_t v55 = *(unsigned int *)(v54 + 8);
          if (v55)
          {
            for (uint64_t i = 0; i != v55; ++i)
            {
              unsigned int v57 = *(unsigned __int8 **)(v54 - 8 * *(unsigned int *)(v54 + 8) + 8 * i);
              if (v57)
              {
                if (*v57 - 4 <= 0x1E)
                {
                  uint64_t v58 = *(unsigned __int8 **)&v57[-8 * *((unsigned int *)v57 + 2)];
                  if (v58)
                  {
                    if (*v58 - 1 <= 1 && sub_1CD10B5EC(*((void *)v58 + 16)))
                    {
                      uint64_t v59 = *((unsigned int *)v57 + 2);
                      if (v59 < 4)
                      {
                        LOBYTE(v62) = 0;
                        uint64_t v63 = 0;
                      }
                      else
                      {
                        uint64_t v60 = *(void *)(*(void *)&v57[-8 * v59 + 24] + 128);
                        uint64_t v61 = (unint64_t *)(v60 + 24);
                        if (*(_DWORD *)(v60 + 32) >= 0x41u) {
                          uint64_t v61 = (unint64_t *)*v61;
                        }
                        unint64_t v62 = *v61;
                        unint64_t v53 = v62 >> 8;
                        uint64_t v63 = 1;
                      }
                      int v64 = v84;
                      if (v85 == v84)
                      {
                        int v65 = HIDWORD(v86);
                        __int16 v66 = &v85[8 * HIDWORD(v86)];
                        if (HIDWORD(v86))
                        {
                          uint64_t v67 = 0;
                          while (*(unsigned __int8 **)&v85[v67] != v57)
                          {
                            v67 += 8;
                            if (8 * HIDWORD(v86) == v67) {
                              goto LABEL_105;
                            }
                          }
                          __int16 v66 = &v85[v67];
                        }
LABEL_105:
                        int v64 = v85;
                      }
                      else
                      {
                        int v72 = v86 - 1;
                        unsigned int v73 = (v86 - 1) & ((v57 >> 4) ^ (v57 >> 9));
                        __int16 v66 = &v85[8 * v73];
                        BOOL v74 = *(unsigned __int8 **)v66;
                        if (*(void *)v66 == -1)
                        {
                          uint64_t v75 = 0;
LABEL_131:
                          if (v75) {
                            __int16 v66 = v75;
                          }
                          int v65 = HIDWORD(v86);
                          if (*(unsigned __int8 **)v66 != v57) {
                            __int16 v66 = &v85[8 * v86];
                          }
                        }
                        else
                        {
                          uint64_t v75 = 0;
                          int v76 = 1;
                          while (v74 != v57)
                          {
                            if (v75) {
                              BOOL v77 = 0;
                            }
                            else {
                              BOOL v77 = v74 == (unsigned __int8 *)-2;
                            }
                            if (v77) {
                              uint64_t v75 = v66;
                            }
                            unsigned int v78 = v73 + v76++;
                            unsigned int v73 = v78 & v72;
                            __int16 v66 = &v85[8 * (v78 & v72)];
                            BOOL v74 = *(unsigned __int8 **)v66;
                            if (*(void *)v66 == -1) {
                              goto LABEL_131;
                            }
                          }
                          int v65 = HIDWORD(v86);
                        }
                      }
                      unint64_t v68 = v62 | (v53 << 8);
                      if (v85 == v64) {
                        int v69 = v65;
                      }
                      else {
                        int v69 = v86;
                      }
                      BOOL v70 = v59 <= 3 && v66 == &v85[8 * v69];
                      BOOL v80 = (const char *)*((void *)v58 + 16);
                      *(void *)&long long v81 = v68;
                      char v71 = !v70;
                      *((void *)&v81 + 1) = v63;
                      char v82 = v71;
                      sub_1CD1163B0((uint64_t)v79, a2, (uint64_t *)&v80, &v81);
                    }
                  }
                }
              }
            }
          }
          ++v52;
        }
        while (v52 != v51);
      }
    }
  }
  if (v85 != v84) {
    free(v85);
  }
}

uint64_t sub_1CD10B5EC(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16) != 3 || (*(unsigned char *)(result + 34) & 0x40) == 0) {
    return 0;
  }
  uint64_t v2 = *(uint64_t ***)result;
  uint64_t v3 = ***(void ***)result;
  uint64_t v22 = result;
  int v4 = *(_DWORD *)(v3 + 2520);
  if (!v4)
  {
    int v20 = 0;
LABEL_30:
    unsigned int v8 = sub_1CC5BF31C(v3 + 2504, (uint64_t)&v22, &v22, v20);
    uint64_t v21 = v22;
    v8[1] = 0;
    void v8[2] = 0;
    *unsigned int v8 = v21;
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(v3 + 2504);
  int v6 = v4 - 1;
  unsigned int v7 = v6 & ((result >> 4) ^ (result >> 9));
  unsigned int v8 = (void *)(v5 + 24 * v7);
  uint64_t v9 = *v8;
  if (*v8 != v1)
  {
    unsigned int v16 = 0;
    int v17 = 1;
    while (v9 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v9 == -8192;
      }
      if (v18) {
        unsigned int v16 = v8;
      }
      unsigned int v19 = v7 + v17++;
      unsigned int v7 = v19 & v6;
      unsigned int v8 = (void *)(v5 + 24 * v7);
      uint64_t v9 = *v8;
      if (*v8 == v1) {
        goto LABEL_6;
      }
    }
    if (v16) {
      int v20 = v16;
    }
    else {
      int v20 = v8;
    }
    goto LABEL_30;
  }
LABEL_6:
  if (v8[2] != 15) {
    return 0;
  }
  int v10 = (uint64_t *)v8[1];
  uint64_t v11 = *v10;
  uint64_t v12 = *(uint64_t *)((char *)v10 + 7);
  BOOL v13 = v11 == 0x625F726566667562 && v12 == 0x73676E69646E6962;
  if (!v13 || (v2[1] & 0xFFFFFF00) != 0x4000) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v14 = *(void *)(v1 + 24);
  if (v14)
  {
    int v15 = *(_DWORD *)(v14 + 8);
    if (v15 == 15) {
      return (v15 & 0xFFFFFF00) == 512;
    }
  }
  return result;
}

double sub_1CD10B764@<D0>(llvm::Module *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v26 = "agx.lib_valid_bytes";
  __int16 v27 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, &v26);
  if (NamedMetadata)
  {
    uint64_t v6 = NamedMetadata;
    uint64_t v7 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    unsigned int v8 = (unsigned int *)operator new(0x20uLL);
    *(_OWORD *)unsigned int v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    if (v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v7;
      do
      {
        uint64_t v11 = *(void *)(**(void **)(v6 + 48) + v9);
        AggregateElement = *(void **)(*(void *)(v11 - 8 * *(unsigned int *)(v11 + 8)) + 128);
        if (AggregateElement) {
          BOOL v13 = *((unsigned char *)AggregateElement + 16) == 16;
        }
        else {
          BOOL v13 = 0;
        }
        if (!v13)
        {
          uint64_t v24 = v9;
          uint64_t v20 = v10;
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
          uint64_t v10 = v20;
          uint64_t v9 = v24;
        }
        uint64_t v14 = (uint64_t **)(AggregateElement + 3);
        unsigned int v15 = *((_DWORD *)AggregateElement + 8);
        if (v15 < 0x41
          || (uint64_t v25 = v9,
              uint64_t v22 = v10,
              unsigned int v23 = *((_DWORD *)AggregateElement + 8),
              int v21 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(AggregateElement + 3)),
              unsigned int v15 = v23,
              uint64_t v10 = v22,
              uint64_t v9 = v25,
              v23 - v21 <= 0x40))
        {
          if (v15 >= 0x41) {
            unsigned int v16 = *v14;
          }
          else {
            unsigned int v16 = (uint64_t *)v14;
          }
          uint64_t v17 = *v16;
        }
        else
        {
          uint64_t v17 = -1;
        }
        if (v9 == 32) {
          abort();
        }
        *(void *)((char *)v8 + v9) = v17;
        v9 += 8;
      }
      while (v10 != v9);
    }
    uint64_t v18 = (a2 + 63) >> 6;
    *(void *)a3 = a3 + 16;
    *(_DWORD *)(a3 + 12) = 6;
    if (a2 + 63 >= 0x1C0)
    {
      *(_DWORD *)(a3 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (a2 + 63 >= 0x40) {
      bzero((void *)(a3 + 16), 8 * v18);
    }
    *(_DWORD *)(a3 + 8) = v18;
    *(_DWORD *)(a3 + 64) = a2;
    sub_1CB9F9B60(a3, v8, a2 >> 5);
    operator delete(v8);
  }
  else
  {
    *(void *)a3 = a3 + 16;
    *(void *)&double result = 0x600000000;
    *(void *)(a3 + 8) = 0x600000000;
    *(_DWORD *)(a3 + 64) = 0;
  }
  return result;
}

void sub_1CD10B93C(llvm::Module *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v127 = (uint64_t)"agx.prid";
  __int16 v129 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, (const char **)&v127);
  if (NamedMetadata)
  {
    uint64_t v124 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v124)
    {
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t v6 = *(void *)(**(void **)(NamedMetadata + 48) + 8 * v5);
        unsigned int v8 = (unsigned int *)(v6 + 8);
        uint64_t v7 = *(unsigned int *)(v6 + 8);
        uint64_t v9 = (uint64_t *)(v6 - 8 * v7);
        uint64_t v10 = *v9;
        if (!*v9) {
          goto LABEL_9;
        }
        if (*(unsigned char *)v10) {
          break;
        }
        if (v7 >= 2)
        {
          uint64_t v11 = *(void *)(v10 + 8);
          if (*(void *)v11 == 3)
          {
            int v12 = *(unsigned __int16 *)(v11 + 24);
            int v13 = *(unsigned __int8 *)(v11 + 26);
            if (v12 == 18764 && v13 == 66)
            {
              uint64_t v15 = v7 - 1;
              uint64_t v16 = v6 + 8;
              do
              {
                uint64_t v17 = *(void *)(v16 - 8 * *v8);
                uint64_t v18 = (void *)(v17 - 8 * *(unsigned int *)(v17 + 8));
                uint64_t v19 = *(void *)(*v18 + 128);
                uint64_t v20 = (void *)(v19 + 24);
                if (*(_DWORD *)(v19 + 32) >= 0x41u) {
                  uint64_t v20 = (void *)*v20;
                }
                uint64_t v21 = *(void *)(v18[1] + 128);
                uint64_t v22 = (void *)(v21 + 24);
                if (*(_DWORD *)(v21 + 32) >= 0x41u) {
                  uint64_t v22 = (void *)*v22;
                }
                unsigned int v23 = *(_DWORD *)v20;
                if (*(_DWORD *)v22 == -1) {
                  unsigned int v24 = 1024;
                }
                else {
                  unsigned int v24 = *(_DWORD *)v22 + 1;
                }
                uint64_t v25 = v24 + v23;
                uint64_t v126 = 1;
                if (v25 > 0x39) {
                  operator new();
                }
                uint64_t v126 = (v25 << 58) | 1;
                sub_1CB9F9F38((unint64_t *)&v126, v23, v24);
                uint64_t v26 = v17 - 8 * *(unsigned int *)(v17 + 8);
                uint64_t v27 = *(void *)(*(void *)(v26 + 24) + 128);
                uint64_t v28 = *(void *)(*(void *)(v26 + 40) + 128);
                uint64_t v29 = (void *)(v27 + 24);
                if (*(_DWORD *)(v27 + 32) >= 0x41u) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = (void *)*v29;
                uint64_t v31 = (void *)(v28 + 24);
                if (*(_DWORD *)(v28 + 32) >= 0x41u) {
                  uint64_t v31 = (void *)*v31;
                }
                __int16 v32 = *(_WORD *)v31;
                uint64_t v127 = 1;
                if ((v126 & 1) == 0) {
                  operator new();
                }
                uint64_t v127 = v126;
                LOWORD(v128) = (_WORD)v30;
                HIWORD(v128) = v32;
                uint64_t v33 = *(unsigned int *)(a3 + 8);
                unint64_t v34 = *(void *)a3;
                if (v33 >= *(_DWORD *)(a3 + 12))
                {
                  BOOL v114 = v34 + 16 * v33 > (unint64_t)&v127;
                  if (v34 > (unint64_t)&v127 || !v114) {
                    sub_1CD8728EC();
                  }
                  sub_1CD8728EC();
                }
                uint64_t v35 = v34 + 16 * *(unsigned int *)(a3 + 8);
                *(void *)uint64_t v35 = v127;
                uint64_t v127 = 1;
                *(_DWORD *)(v35 + 8) = v128;
                ++*(_DWORD *)(a3 + 8);
                uint64_t v36 = v127;
                if ((v127 & 1) == 0 && v127)
                {
                  if (*(void *)v127 != v127 + 16) {
                    free(*(void **)v127);
                  }
                  MEMORY[0x1D25D9CE0](v36, 0x1080C40EF38A13ELL);
                }
                uint64_t v37 = v126;
                if ((v126 & 1) == 0 && v126)
                {
                  if (*(void *)v126 != v126 + 16) {
                    free(*(void **)v126);
                  }
                  MEMORY[0x1D25D9CE0](v37, 0x1080C40EF38A13ELL);
                }
                v16 += 8;
                --v15;
              }
              while (v15);
            }
            goto LABEL_9;
          }
          if (*(void *)v11 == 21)
          {
            uint64_t v71 = *(void *)(v11 + 24);
            uint64_t v72 = *(void *)(v11 + 32);
            uint64_t v73 = *(void *)(v11 + 37);
            BOOL v74 = v71 == 0x746E6174736E6F63 && v72 == 0x6E695F706165685FLL;
            if (v74 && v73 == 0x73656369646E695FLL)
            {
              uint64_t v76 = 1;
              while (1)
              {
                uint64_t v77 = *(void *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v76);
                unsigned int v78 = (void *)(v77 - 8 * *(unsigned int *)(v77 + 8));
                uint64_t v79 = *(void *)(*v78 + 128);
                BOOL v80 = (void *)(v79 + 24);
                if (*(_DWORD *)(v79 + 32) >= 0x41u) {
                  BOOL v80 = (void *)*v80;
                }
                uint64_t v81 = *(void *)(v78[2] + 128);
                char v82 = (void *)(v81 + 24);
                if (*(_DWORD *)(v81 + 32) >= 0x41u) {
                  char v82 = (void *)*v82;
                }
                uint64_t v83 = a4;
                uint64_t v84 = *(void *)(v78[4] + 128);
                uint64_t v85 = (void *)(v84 + 24);
                if (*(_DWORD *)(v84 + 32) >= 0x41u) {
                  uint64_t v85 = (void *)*v85;
                }
                int v86 = *(_DWORD *)v80;
                int v87 = (void *)*v82;
                char v88 = *(unsigned char *)v85;
                unsigned int v89 = *(_DWORD *)(a4 + 16);
                if (!v89) {
                  break;
                }
                unsigned int v98 = (v89 - 1) & (37 * v86);
                unsigned int v99 = (_DWORD *)(*(void *)a4 + 8 * v98);
                int v100 = *v99;
                if (*v99 != v86)
                {
                  int v101 = 0;
                  int v102 = 1;
                  while (v100 != -1)
                  {
                    if (v101) {
                      BOOL v107 = 0;
                    }
                    else {
                      BOOL v107 = v100 == -2;
                    }
                    if (v107) {
                      int v101 = v99;
                    }
                    unsigned int v108 = v98 + v102++;
                    unsigned int v98 = v108 & (v89 - 1);
                    unsigned int v99 = (_DWORD *)(*(void *)a4 + 8 * v98);
                    int v100 = *v99;
                    if (*v99 == v86) {
                      goto LABEL_98;
                    }
                  }
                  if (v101) {
                    uint64_t v90 = (uint64_t)v101;
                  }
                  else {
                    uint64_t v90 = (uint64_t)v99;
                  }
                  goto LABEL_88;
                }
LABEL_98:
                if (++v76 == v7) {
                  goto LABEL_9;
                }
              }
              uint64_t v90 = 0;
LABEL_88:
              int v91 = *(_DWORD *)(a4 + 8);
              if (4 * v91 + 4 < 3 * v89)
              {
                if (v89 + ~v91 - *(_DWORD *)(a4 + 12) <= v89 >> 3)
                {
                  sub_1CD116814(a4, v89);
                  int v103 = *(_DWORD *)(a4 + 16);
                  if (v103)
                  {
                    int v104 = v103 - 1;
                    unsigned int v105 = (v103 - 1) & (37 * v86);
                    uint64_t v90 = *(void *)a4 + 8 * v105;
                    int v106 = *(_DWORD *)v90;
                    if (*(_DWORD *)v90 != v86)
                    {
                      uint64_t v117 = 0;
                      int v118 = 1;
                      while (v106 != -1)
                      {
                        if (v117) {
                          BOOL v119 = 0;
                        }
                        else {
                          BOOL v119 = v106 == -2;
                        }
                        if (v119) {
                          uint64_t v117 = v90;
                        }
                        unsigned int v120 = v105 + v118++;
                        unsigned int v105 = v120 & v104;
                        uint64_t v90 = *(void *)a4 + 8 * (v120 & v104);
                        int v106 = *(_DWORD *)v90;
                        uint64_t v83 = a4;
                        if (*(_DWORD *)v90 == v86) {
                          goto LABEL_95;
                        }
                      }
                      if (v117) {
                        uint64_t v90 = v117;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v90 = 0;
                  }
                  uint64_t v83 = a4;
                }
              }
              else
              {
                sub_1CD116814(a4, 2 * v89);
                int v92 = *(_DWORD *)(a4 + 16);
                if (v92)
                {
                  int v93 = v92 - 1;
                  unsigned int v94 = (v92 - 1) & (37 * v86);
                  uint64_t v90 = *(void *)a4 + 8 * v94;
                  int v95 = *(_DWORD *)v90;
                  if (*(_DWORD *)v90 != v86)
                  {
                    uint64_t v96 = 0;
                    int v97 = 1;
                    while (v95 != -1)
                    {
                      if (v96) {
                        BOOL v115 = 0;
                      }
                      else {
                        BOOL v115 = v95 == -2;
                      }
                      if (v115) {
                        uint64_t v96 = v90;
                      }
                      unsigned int v116 = v94 + v97++;
                      unsigned int v94 = v116 & v93;
                      uint64_t v90 = *(void *)a4 + 8 * (v116 & v93);
                      int v95 = *(_DWORD *)v90;
                      if (*(_DWORD *)v90 == v86) {
                        goto LABEL_95;
                      }
                    }
                    if (v96) {
                      uint64_t v90 = v96;
                    }
                  }
                }
                else
                {
                  uint64_t v90 = 0;
                }
              }
LABEL_95:
              ++*(_DWORD *)(v83 + 8);
              if (*(_DWORD *)v90 != -1) {
                --*(_DWORD *)(v83 + 12);
              }
              *(_DWORD *)uint64_t v90 = v86;
              *(unsigned char *)(v90 + 4) = (_BYTE)v87;
              *(unsigned char *)(v90 + 5) = v88;
              goto LABEL_98;
            }
          }
        }
LABEL_9:
        if (++v5 == v124) {
          return;
        }
      }
      uint64_t v127 = *(void *)(v10 + 128);
      uint64_t v59 = (unsigned __int8 *)v9[1];
      int v60 = *v59;
      if (v60 == 1)
      {
        uint64_t v109 = *((void *)v59 + 16);
        int v110 = *(unsigned __int8 *)(v109 + 16);
        BOOL v111 = v110 == 16;
        if (v110 == 16) {
          unsigned int v112 = 3;
        }
        else {
          unsigned int v112 = 2;
        }
        uint64_t v61 = *(void *)(v9[v112] + 128);
        uint64_t v62 = *(void *)(v9[v112 + 2] + 128);
        if (v111)
        {
          uint64_t v113 = (void *)(v109 + 24);
          if (*(_DWORD *)(v109 + 32) >= 0x41u) {
            uint64_t v113 = (void *)*v113;
          }
          uint64_t v63 = (void *)*v113;
          goto LABEL_56;
        }
      }
      else
      {
        if ((v60 - 4) < 0x1F)
        {
          if ((int)v7 >= 2)
          {
            uint64_t v58 = v7 - 1;
            uint64_t v57 = v6 + 8;
            do
            {
              uint64_t v38 = *(void *)(v57 - 8 * *v8);
              unint64_t v39 = (void *)(v38 - 8 * *(unsigned int *)(v38 + 8));
              uint64_t v40 = *(void *)(v39[3] + 128);
              char v41 = (void *)(v40 + 24);
              if (*(_DWORD *)(v40 + 32) >= 0x41u) {
                char v41 = (void *)*v41;
              }
              uint64_t v42 = *(void *)(v39[5] + 128);
              unsigned int v43 = (void *)(v42 + 24);
              if (*(_DWORD *)(v42 + 32) >= 0x41u) {
                unsigned int v43 = (void *)*v43;
              }
              uint64_t v44 = *(void *)(*v39 + 128);
              uint64_t v45 = (uint64_t *)(v44 + 24);
              unsigned int v46 = *(_DWORD *)(v44 + 32);
              BOOL v47 = (uint64_t *)(v44 + 24);
              if (v46 >= 0x41) {
                BOOL v47 = (uint64_t *)*v45;
              }
              uint64_t v48 = *(void *)(v39[1] + 128);
              uint64_t v49 = (void *)(v48 + 24);
              if (*(_DWORD *)(v48 + 32) >= 0x41u) {
                uint64_t v49 = (void *)*v49;
              }
              if (v46 >= 0x41) {
                uint64_t v45 = (uint64_t *)*v45;
              }
              uint64_t v50 = (void *)*v41;
              unsigned int v121 = (void *)*v43;
              uint64_t v51 = *v47;
              uint64_t v52 = (void *)*v49;
              unint64_t v53 = (uint64_t *)*v45;
              sub_1CD115504(a2, &v127);
              unint64_t v55 = *(unsigned int *)(v54 + 40);
              if (v55 >= *(unsigned int *)(v54 + 44)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v56 = *(void *)(v54 + 32) + 6 * v55;
              *(_WORD *)(v56 + 4) = (_WORD)v52 - (_WORD)v53;
              *(_DWORD *)uint64_t v56 = v50 & 0xF | (16 * (v121 & 0xF)) | (v51 << 16);
              ++*(_DWORD *)(v54 + 40);
              v57 += 8;
              --v58;
            }
            while (v58);
          }
          goto LABEL_9;
        }
        uint64_t v61 = *(void *)(v9[2] + 128);
        uint64_t v62 = *(void *)(v9[4] + 128);
      }
      LODWORD(v63) = 0xFFFF;
LABEL_56:
      int v64 = (void *)(v61 + 24);
      if (*(_DWORD *)(v61 + 32) >= 0x41u) {
        int v64 = (void *)*v64;
      }
      int v65 = (void *)(v62 + 24);
      if (*(_DWORD *)(v62 + 32) >= 0x41u) {
        int v65 = (void *)*v65;
      }
      __int16 v66 = (void *)*v64;
      uint64_t v67 = (void *)*v65;
      sub_1CD115504(a2, &v127);
      unint64_t v69 = *(unsigned int *)(v68 + 16);
      if (v69 >= *(unsigned int *)(v68 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v70 = *(void *)(v68 + 8) + 6 * v69;
      *(_WORD *)(v70 + 4) = 0;
      *(_DWORD *)uint64_t v70 = v66 & 0xF | (v63 << 16) | (16 * (v67 & 0xF));
      ++*(_DWORD *)(v68 + 16);
      goto LABEL_9;
    }
  }
}

uint64_t sub_1CD10C290(uint64_t **a1, uint64_t *a2, int a3, void *a4, uint64_t a5)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  v13[0] = *a4;
  uint64_t v8 = 1;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(a1, a3, (uint64_t)v13, 1);
  uint64_t v15 = v17;
  v17[0] = (uint64_t)a4;
  uint64_t v16 = 0x200000001;
  if (a5)
  {
    v17[1] = a5;
    uint64_t v8 = 2;
    LODWORD(v16) = 2;
  }
  if (Declaration) {
    uint64_t v10 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v10 = 0;
  }
  __int16 v14 = 257;
  uint64_t v11 = sub_1CB845BAC(a2, v10, (uint64_t **)Declaration, v17, v8, (uint64_t)v13, 0);
  if (v15 != v17) {
    free(v15);
  }
  return v11;
}

uint64_t sub_1CD10C39C(uint64_t **a1, uint64_t *a2, int a3, uint64_t **a4, uint64_t a5, llvm::Instruction *a6, int a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v13 = *a4;
  uint64_t v28 = (uint64_t **)*a4;
  if (a7) {
    int v13 = (uint64_t *)(*(void *)*v13 + 1672);
  }
  sub_1CC5B8334(a3, (uint64_t)&v28, 1, a1, 0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = (uint64_t **)sub_1CCAD3B00((uint64_t)a1, (unsigned __int8 *)p_p, (const char *)size, 0, v28, (uint64_t)v28, (uint64_t)v28, (uint64_t)v13);
  uint64_t v18 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v25 = v17;
    unsigned int v24 = v16;
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v18 = v24;
    uint64_t v17 = v25;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
  uint64_t v30 = a5;
  __p.__r_.__value_.__l.__size_ = 0x300000002;
  if (!a7 || *(uint64_t **)a6 == v13)
  {
    unsigned int v19 = 2;
  }
  else
  {
    uint64_t v22 = v18;
    unsigned int v23 = v17;
    __int16 v27 = 257;
    a6 = sub_1CB843944((uint64_t)a2, (uint64_t)a6, v13, (uint64_t)v26);
    unsigned int v19 = __p.__r_.__value_.__r.__words[1];
    if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= HIDWORD(__p.__r_.__value_.__r.__words[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v17 = v23;
    uint64_t v18 = v22;
  }
  *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v19) = a6;
  ++LODWORD(__p.__r_.__value_.__r.__words[1]);
  __int16 v27 = 257;
  uint64_t v20 = sub_1CB845BAC(a2, v17, v18, (uint64_t *)__p.__r_.__value_.__l.__data_, LODWORD(__p.__r_.__value_.__r.__words[1]), (uint64_t)v26, 0);
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2]) {
    free(__p.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_1CD10C594(llvm::Module *a1, uint64_t a2)
{
  uint64_t v25 = "agx.interpolations";
  __int16 v26 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, &v25);
  if (NamedMetadata)
  {
    uint64_t v4 = NamedMetadata;
    uint64_t v5 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = *(void *)(**(void **)(v4 + 48) + 8 * i);
        uint64_t v8 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8));
        if (v8)
        {
          uint64_t v9 = *(void *)(v8 + 128);
          uint64_t v10 = *(void *)(a2 + 8);
          uint64_t v11 = *(unsigned int *)(a2 + 20);
          if (v10 != *(void *)a2)
          {
            unsigned int v15 = *(_DWORD *)(a2 + 16);
LABEL_19:
            if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a2 + 24)))
            {
              if (v15 >= 0x40) {
                v15 *= 2;
              }
              else {
                unsigned int v15 = 128;
              }
            }
            else if (v15 - v11 >= v15 >> 3)
            {
              goto LABEL_21;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v15);
            unsigned int v15 = *(_DWORD *)(a2 + 16);
            uint64_t v10 = *(void *)(a2 + 8);
LABEL_21:
            unsigned int v16 = v15 - 1;
            unsigned int v17 = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
            uint64_t v18 = (void *)(v10 + 8 * v17);
            uint64_t v19 = *v18;
            if (*v18 == -1)
            {
              uint64_t v20 = 0;
LABEL_33:
              if (v20) {
                unsigned int v24 = v20;
              }
              else {
                unsigned int v24 = v18;
              }
              if (*v24 != v9)
              {
                if (*v24 == -2) {
                  --*(_DWORD *)(a2 + 24);
                }
                else {
                  ++*(_DWORD *)(a2 + 20);
                }
                *unsigned int v24 = v9;
              }
            }
            else
            {
              uint64_t v20 = 0;
              int v21 = 1;
              while (v19 != v9)
              {
                if (v20) {
                  BOOL v22 = 0;
                }
                else {
                  BOOL v22 = v19 == -2;
                }
                if (v22) {
                  uint64_t v20 = v18;
                }
                unsigned int v23 = v17 + v21++;
                unsigned int v17 = v23 & v16;
                uint64_t v18 = (void *)(v10 + 8 * (v23 & v16));
                uint64_t v19 = *v18;
                if (*v18 == -1) {
                  goto LABEL_33;
                }
              }
            }
            continue;
          }
          if (v11)
          {
            int v12 = 0;
            uint64_t v13 = 8 * v11;
            __int16 v14 = *(void **)(a2 + 8);
            while (*v14 != v9)
            {
              if (*v14 == -2) {
                int v12 = v14;
              }
              ++v14;
              v13 -= 8;
              if (!v13)
              {
                if (!v12) {
                  goto LABEL_14;
                }
                *int v12 = v9;
                --*(_DWORD *)(a2 + 24);
                goto LABEL_16;
              }
            }
            continue;
          }
LABEL_14:
          unsigned int v15 = *(_DWORD *)(a2 + 16);
          if (v11 >= v15) {
            goto LABEL_19;
          }
          *(_DWORD *)(a2 + 20) = v11 + 1;
          *(void *)(v10 + 8 * v11) = v9;
        }
LABEL_16:
        ;
      }
    }
  }
}

uint64_t sub_1CD10C794(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned int v2 = 1;
  if (v1)
  {
    char v3 = 0;
    int v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(v1 + 24);
      if (!v5 || *(unsigned char *)(v5 + 16) != 89) {
        break;
      }
      uint64_t v6 = *(void *)(v5 - 32);
      uint64_t v7 = (void *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u) {
        uint64_t v7 = (void *)*v7;
      }
      int v8 = 1 << *(_DWORD *)v7;
      int v10 = v8 & v4;
      BOOL v9 = (v8 & v4) == 0;
      if ((v8 & v4) != 0) {
        int v8 = 0;
      }
      v4 |= v8;
      if (v9) {
        ++v3;
      }
      if (v10) {
        break;
      }
      uint64_t v1 = *(void *)(v1 + 8);
      if (!v1)
      {
        unsigned int v2 = 1;
        goto LABEL_16;
      }
    }
    unsigned int v2 = 0;
  }
  else
  {
    int v4 = 0;
    char v3 = 0;
  }
LABEL_16:
  if (v4 == ~(-1 << v3)) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD10C828(uint64_t a1, llvm::DataLayout *this)
{
  int v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(uint64_t ***)(a1 - 8);
  }
  else {
    uint64_t v5 = (uint64_t **)(a1 - 32 * (v4 & 0x7FFFFFF));
  }
  unsigned int v6 = 0;
  int v8 = *v5;
  uint64_t v7 = (uint64_t *)(v5 + 4);
  uint64_t v9 = *v8;
  if ((v4 & 0x40000000) != 0) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v10 = v4 & 0x7FFFFFF;
  uint64_t v11 = a1 - 32 * v10;
  while (v7 != (uint64_t *)(v11 + 32 * v10))
  {
    unsigned int v12 = 0;
    uint64_t v13 = *v7;
    uint64_t v14 = 0x100000000;
    if (!*v7 || *(unsigned char *)(v13 + 16) != 16) {
      return v14 | v12;
    }
    int v15 = *(unsigned __int8 *)(v9 + 8);
    if (v15 == 16 && v9)
    {
      unsigned int v16 = *(_DWORD *)(v13 + 32);
      if (v16 > 0x40) {
        LODWORD(v17) = **(_DWORD **)(v13 + 24);
      }
      else {
        uint64_t v17 = (uint64_t)(*(void *)(v13 + 24) << -(char)v16) >> -(char)v16;
      }
      StructLayout = llvm::DataLayout::getStructLayout(this, (llvm::StructType *)v9);
      uint64_t v22 = 8 * v17;
      unint64_t v23 = *(void *)((char *)StructLayout + v22 + 16);
      uint64_t v9 = *(void *)(*(void *)(v9 + 16) + v22);
    }
    else
    {
      if (v15 == 15 && v9)
      {
        unsigned int v18 = *(_DWORD *)(v13 + 32);
        if (v18 > 0x40) {
          uint64_t v19 = **(void **)(v13 + 24);
        }
        else {
          uint64_t v19 = (uint64_t)(*(void *)(v13 + 24) << -(char)v18) >> -(char)v18;
        }
        uint64_t v24 = 24;
        if (*(unsigned char *)(a1 + 16) == 62) {
          uint64_t v24 = 64;
        }
        uint64_t v9 = *(void *)(a1 + v24);
      }
      else
      {
        if ((v15 & 0xFE) != 0x12 || !v9)
        {
          unsigned int v12 = 0;
          uint64_t v14 = 0x10000000000;
          if (v15 != 17 || !v9) {
            return v14 | v12;
          }
        }
        unsigned int v20 = *(_DWORD *)(v13 + 32);
        if (v20 > 0x40) {
          uint64_t v19 = **(void **)(v13 + 24);
        }
        else {
          uint64_t v19 = (uint64_t)(*(void *)(v13 + 24) << -(char)v20) >> -(char)v20;
        }
        uint64_t v9 = *(void *)(v9 + 24);
      }
      uint64_t v25 = sub_1CB83544C((uint64_t)this, v9);
      BOOL v27 = v26 == 1;
      char Alignment = llvm::DataLayout::getAlignment(this, (llvm::Type *)v9, 1);
      if (v27)
      {
        char v31 = Alignment;
        char Alignment = v31;
      }
      unint64_t v23 = (((1 << Alignment) + ((unint64_t)(v25 + 7) >> 3) - 1) & -(1 << Alignment)) * v19;
    }
    v6 += v23;
    int v4 = *(_DWORD *)(a1 + 20);
    v7 += 4;
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v11 = *(void *)(a1 - 8);
    uint64_t v10 = v4 & 0x7FFFFFF;
  }
  uint64_t v14 = 0;
  unsigned int v12 = v6;
  return v14 | v12;
}

uint64_t sub_1CD10CA60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a3;
  if (a4 != -1)
  {
    uint64_t v17 = *(void *)(a3 + 40);
    if (v17 == a3 + 40)
    {
      uint64_t v18 = 0;
    }
    else
    {
      if (v17) {
        uint64_t v18 = v17 - 24;
      }
      else {
        uint64_t v18 = 0;
      }
      if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB) {
        uint64_t v18 = 0;
      }
    }
    if (*(unsigned char *)(v18 + 16) == 30)
    {
      v18 -= 32 * a4;
LABEL_20:
      uint64_t v19 = (uint64_t *)(v18 - 32);
    }
    else
    {
      switch(*(unsigned char *)(v18 + 16))
      {
        case ' ':
        case '&':
          int v27 = *(_DWORD *)(v18 + 20);
          if ((v27 & 0x40000000) != 0) {
            uint64_t v23 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v23 = v18 - 32 * (v27 & 0x7FFFFFF);
          }
          uint64_t v24 = a4 + 1;
          goto LABEL_32;
        case '!':
          uint64_t v28 = -64;
          if (!a4) {
            uint64_t v28 = -96;
          }
          uint64_t v19 = (uint64_t *)(v18 + v28);
          break;
        case '""':
        case '#':
          __break(1u);
          goto LABEL_47;
        case '$':
LABEL_47:
          if ((*(_WORD *)(v18 + 18) & 1) == 0)
          {
            uint64_t v4 = 0;
            goto LABEL_2;
          }
          uint64_t v19 = (uint64_t *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF) + 32);
          break;
        case '%':
          goto LABEL_20;
        case '\'':
          if (a4)
          {
            uint64_t v18 = v18 - 32 * *(unsigned int *)(v18 + 80) + 32 * (a4 - 1);
            goto LABEL_20;
          }
          uint64_t v19 = (uint64_t *)(v18 - 32 * *(unsigned int *)(v18 + 80) - 64);
          break;
        default:
          int v22 = *(_DWORD *)(v18 + 20);
          if ((v22 & 0x40000000) != 0) {
            uint64_t v23 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v23 = v18 - 32 * (v22 & 0x7FFFFFF);
          }
          uint64_t v24 = (2 * a4) | 1;
LABEL_32:
          uint64_t v19 = (uint64_t *)(v23 + 32 * v24);
          break;
      }
    }
    uint64_t v4 = *v19;
  }
LABEL_2:
  uint64_t v29 = 0;
  uint64_t v30 = v4;
  if (sub_1CC87D250(a2, &v30, &v29))
  {
LABEL_3:
    uint64_t v29 = 0;
    uint64_t v30 = v4;
    if (sub_1CC87D250(a2, &v30, &v29))
    {
      uint64_t v7 = v29;
    }
    else
    {
      if (*(_DWORD *)a2) {
        uint64_t v25 = a2 + 8;
      }
      else {
        uint64_t v25 = *(void *)(a2 + 8);
      }
      if (*(_DWORD *)a2) {
        unsigned int v26 = 8;
      }
      else {
        unsigned int v26 = *(_DWORD *)(a2 + 16);
      }
      uint64_t v7 = v25 + 16 * v26;
    }
    return *(void *)(v7 + 8);
  }
  uint64_t v9 = *(void *)(a1 + 3344);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 64);
  if (v11)
  {
    LODWORD(v12) = (v11 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
    uint64_t v14 = *v13;
    if (v4 == *v13) {
      goto LABEL_8;
    }
    int v20 = 1;
    while (v14 != -4096)
    {
      int v21 = v12 + v20++;
      uint64_t v12 = v21 & (v11 - 1);
      uint64_t v14 = *(void *)(v10 + 16 * v12);
      if (v4 == v14)
      {
        uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_8;
      }
    }
  }
  uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_8:
  int v15 = (uint64_t *)v13[1];
  while (1)
  {
    int v15 = (uint64_t *)v15[1];
    if (!v15) {
      return 0;
    }
    uint64_t v16 = *v15;
    uint64_t v29 = 0;
    uint64_t v30 = v16;
    if (sub_1CC87D250(a2, &v30, &v29))
    {
      uint64_t v4 = *v15;
      goto LABEL_3;
    }
  }
}

void sub_1CD10CCE8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
}

uint64_t sub_1CD10D9B4(uint64_t a1)
{
  uint64_t result = 0;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = (v3 - 33);
  if (v4 > 0x37) {
    return result;
  }
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (v5 && (*(unsigned char *)(v5 + 17) & 0x30) != 0) {
      return 0;
    }
    int v6 = *(_DWORD *)(a1 + 20);
    if (v6 < 0 && (uint64_t v10 = a1 - 32 * (v6 & 0x7FFFFFF), v13 = *(void *)(v10 - 8), v11 = v10 - 8, (v12 = v13) != 0))
    {
      uint64_t v14 = -v12;
      while (1)
      {
        unsigned int v15 = *(_DWORD *)(*(void *)(v11 + v14) + 8);
        BOOL v16 = v15 > 7;
        int v17 = (1 << v15) & 0x83;
        if (v16 || v17 == 0) {
          break;
        }
        v14 += 16;
        if (!v14) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
      {
        return 0;
      }
      int v3 = *(unsigned __int8 *)(a1 + 16);
    }
  }
  else
  {
    if (v4 == 27) {
      return (*(_WORD *)(a1 + 18) & 0x301) != 0;
    }
    if (((1 << (v3 - 33)) & 0x808001D0000010) == 0) {
      return result;
    }
  }
  if (v3 == 61) {
    return 0;
  }
  if (v3 != 84) {
    return 1;
  }
  uint64_t v7 = *(void *)(a1 - 32);
  if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v7 + 33) & 0x20) == 0) {
    return 1;
  }
  int v8 = *(_DWORD *)(v7 + 36);
  uint64_t result = sub_1CD0FF67C(v8);
  if (!result) {
    return result;
  }
  uint64_t result = 0;
  if ((v8 - 2630) < 0x20 || v8 == 2144) {
    return result;
  }
  if ((v8 - 2838) < 3) {
    return 0;
  }
  char v9 = sub_1CD0FF228(v8);
  uint64_t result = 0;
  if ((v8 - 1682) >= 0x8C && (v9 & 1) == 0)
  {
    uint64_t result = 0;
    if (v8 <= 2702)
    {
      if ((v8 - 2471) < 8 || (v8 - 1996) < 2 || (v8 - 2098) < 7) {
        return result;
      }
      return 1;
    }
    if ((v8 - 2703) > 0x1C || ((1 << (v8 + 113)) & 0x1DE15403) == 0) {
      return 1;
    }
  }
  return result;
}

BOOL sub_1CD10DBB4(unsigned __int8 *a1, llvm::ScalarEvolution *this, int a3)
{
  if (*(_DWORD *)(*(void *)a1 + 8) != 4109) {
    return 0;
  }
  if (a3)
  {
    if ((a1[17] & 4) != 0) {
      return 1;
    }
  }
  else if ((a1[17] & 2) != 0)
  {
    return 1;
  }
  int v7 = *((_DWORD *)a1 + 5);
  if ((v7 & 0x40000000) != 0) {
    int v8 = (unint64_t *)*((void *)a1 - 1);
  }
  else {
    int v8 = (unint64_t *)&a1[-32 * (v7 & 0x7FFFFFF)];
  }
  unint64_t v9 = *v8;
  uint64_t v10 = *((void *)this + 13);
  unsigned int v11 = *((_DWORD *)this + 30);
  if (!v11) {
    goto LABEL_16;
  }
  unsigned int v12 = ((v9 >> 4) ^ (v9 >> 9)) & (v11 - 1);
  uint64_t v13 = v10 + 48 * v12;
  uint64_t v14 = *(void *)(v13 + 24);
  if (v14 != v9)
  {
    int v15 = 1;
    while (v14 != -4096)
    {
      unsigned int v16 = v12 + v15++;
      unsigned int v12 = v16 & (v11 - 1);
      uint64_t v13 = v10 + 48 * v12;
      uint64_t v14 = *(void *)(v13 + 24);
      if (v14 == v9) {
        goto LABEL_17;
      }
    }
LABEL_16:
    uint64_t v13 = v10 + 48 * v11;
  }
LABEL_17:
  if (v13 == v10 + 48 * v11 || (SCEVIter = *(llvm::detail::IEEEFloat ***)(v13 + 40)) == 0)
  {
    SCEVIter = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter(this, v9);
    int v7 = *((_DWORD *)a1 + 5);
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_20;
    }
  }
  else if ((v7 & 0x40000000) == 0)
  {
LABEL_20:
    uint64_t v18 = &a1[-32 * (v7 & 0x7FFFFFF)];
    goto LABEL_23;
  }
  uint64_t v18 = (unsigned __int8 *)*((void *)a1 - 1);
LABEL_23:
  unint64_t v19 = *((void *)v18 + 4);
  uint64_t v20 = *((void *)this + 13);
  unsigned int v21 = *((_DWORD *)this + 30);
  if (v21)
  {
    unsigned int v22 = ((v19 >> 4) ^ (v19 >> 9)) & (v21 - 1);
    uint64_t v23 = v20 + 48 * v22;
    uint64_t v24 = *(void *)(v23 + 24);
    if (v24 == v19) {
      goto LABEL_30;
    }
    int v25 = 1;
    while (v24 != -4096)
    {
      unsigned int v26 = v22 + v25++;
      unsigned int v22 = v26 & (v21 - 1);
      uint64_t v23 = v20 + 48 * v22;
      uint64_t v24 = *(void *)(v23 + 24);
      if (v24 == v19) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v23 = v20 + 48 * v21;
LABEL_30:
  if (v23 == v20 + 48 * v21 || (int v27 = *(llvm::detail::IEEEFloat ***)(v23 + 40)) == 0) {
    int v27 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter(this, v19);
  }
  unsigned int v67 = 16;
  uint64_t v66 = 0xFFFFLL;
  unsigned int v69 = 16;
  uint64_t v68 = 0xFFFFLL;
  unsigned int v63 = 16;
  uint64_t v62 = 0xFFFFLL;
  unsigned int v65 = 16;
  uint64_t v64 = 0xFFFFLL;
  uint64_t v28 = (uint64_t **)(***(void ***)a1 + 1960);
  if (a3)
  {
    unint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, SCEVIter, v28, 0);
    uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, SignExtendExpr, 1, 0);
    unsigned int v31 = *(_DWORD *)(RangeRef + 8);
    if (v31 > 0x40) {
      operator new[]();
    }
    unsigned int v32 = *(_DWORD *)(RangeRef + 24);
    if (v32 > 0x40) {
      operator new[]();
    }
    uint64_t v33 = *(void *)(RangeRef + 16);
    uint64_t v66 = *(void *)RangeRef;
    unsigned int v67 = v31;
    uint64_t v68 = v33;
    unsigned int v69 = v32;
    unint64_t v34 = llvm::ScalarEvolution::getSignExtendExpr(this, v27, (uint64_t **)(***(void ***)a1 + 1960), 0);
    uint64_t v35 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v34, 1, 0);
    unsigned int v36 = *(_DWORD *)(v35 + 8);
    if (v36 > 0x40) {
      operator new[]();
    }
    unsigned int v37 = *(_DWORD *)(v35 + 24);
    if (v37 > 0x40) {
      operator new[]();
    }
    uint64_t v38 = *(void *)(v35 + 16);
    uint64_t v62 = *(void *)v35;
    unsigned int v63 = v36;
    uint64_t v64 = v38;
    uint64_t v39 = 4294934528;
    uint64_t v40 = 0x7FFFLL;
  }
  else
  {
    unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, SCEVIter, v28, 0);
    uint64_t v42 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, ZeroExtendExpr, 0, 0);
    unsigned int v43 = *(_DWORD *)(v42 + 8);
    if (v43 > 0x40) {
      operator new[]();
    }
    unsigned int v44 = *(_DWORD *)(v42 + 24);
    if (v44 > 0x40) {
      operator new[]();
    }
    uint64_t v45 = *(void *)(v42 + 16);
    uint64_t v66 = *(void *)v42;
    unsigned int v67 = v43;
    uint64_t v68 = v45;
    unsigned int v69 = v44;
    unint64_t v46 = llvm::ScalarEvolution::getZeroExtendExpr(this, v27, (uint64_t **)(***(void ***)a1 + 1960), 0);
    uint64_t v47 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v46, 0, 0);
    unsigned int v48 = *(_DWORD *)(v47 + 8);
    if (v48 > 0x40) {
      operator new[]();
    }
    unsigned int v37 = *(_DWORD *)(v47 + 24);
    if (v37 > 0x40) {
      operator new[]();
    }
    uint64_t v49 = *(void *)(v47 + 16);
    uint64_t v39 = 0;
    uint64_t v62 = *(void *)v47;
    unsigned int v63 = v48;
    uint64_t v64 = v49;
    uint64_t v40 = 0xFFFFLL;
  }
  unsigned int v65 = v37;
  llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&v62, (unsigned int *)&v66, a1[16] - 28, &v58);
  int v57 = 32;
  uint64_t v56 = v40;
  llvm::APInt::operator+=((uint64_t)&v56, 1uLL);
  unsigned int v50 = v57;
  int v57 = 0;
  if (v50 >= 0x41) {
    operator new[]();
  }
  int v53 = 32;
  uint64_t v52 = v39;
  unsigned int v55 = v50;
  uint64_t v54 = v56;
  BOOL v6 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&v58);
  if (v61 >= 0x41 && v60) {
    MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
  }
  if (v59 >= 0x41 && v58) {
    MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
  }
  if (v65 >= 0x41 && v64) {
    MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
  }
  if (v63 >= 0x41 && v62) {
    MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
  }
  if (v69 >= 0x41 && v68) {
    MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
  }
  if (v67 >= 0x41 && v66) {
    MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
  }
  return v6;
}

llvm::Instruction *sub_1CD10E338(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = 0;
  v75[1] = *MEMORY[0x1E4F143B8];
  int v7 = **(void ***)a1;
  uint64_t v60 = v62;
  uint64_t v61 = 0x200000000;
  unsigned int v65 = v7;
  uint64_t v66 = &v74;
  unsigned int v67 = v75;
  uint64_t v68 = 0;
  int v69 = 0;
  __int16 v70 = 512;
  char v71 = 7;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  BOOL v74 = &unk_1F2616E88;
  v75[0] = &unk_1F2617008;
  int v8 = *(unsigned __int8 **)(a1 + 48);
  uint64_t v63 = *(void *)(a1 + 40);
  uint64_t v64 = a1 + 24;
  v56[0] = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)v56, v8, 2);
    uint64_t v6 = v56[0];
  }
  sub_1CB8461A4((uint64_t)&v60, 0, v6);
  if (v56[0])
  {
    int v42 = *(unsigned __int8 *)v56[0];
    if ((v42 - 4) > 0x1E)
    {
      if ((v42 - 3) >= 0xFFFFFFFE) {
        uint64_t v45 = v56[0];
      }
      else {
        uint64_t v45 = 0;
      }
      if ((v42 - 3) < 0xFFFFFFFE)
      {
        if (v42 == 3) {
          *(void *)(v56[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v44 = v45 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v56[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v56[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v43 = *(void *)(v56[0] + 16);
      if ((v43 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
      if (!v44) {
        goto LABEL_4;
      }
    }
    v58[0] = (const char *)v56;
    sub_1CC5FA668(v44 + 16, v58);
  }
LABEL_4:
  int v9 = *(_DWORD *)(a1 + 20);
  if (a3)
  {
    if ((v9 & 0x40000000) != 0) {
      uint64_t v10 = *(unsigned __int8 ***)(a1 - 8);
    }
    else {
      uint64_t v10 = (unsigned __int8 **)(a1 - 32 * (v9 & 0x7FFFFFF));
    }
    unsigned int v12 = *v10;
    uint64_t v13 = *v65 + 1960;
    v56[0] = "extendintsext";
    __int16 v57 = 259;
    if (*(void *)v12 == v13) {
      goto LABEL_24;
    }
    if (v12[16] <= 0x14u)
    {
      uint64_t v17 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v66 + 28))(v66, 40, v12, v13);
      unsigned int v12 = (unsigned __int8 *)v17;
      if (!v17) {
        goto LABEL_24;
      }
      if (*(unsigned __int8 *)(v17 + 16) < 0x1Cu) {
        goto LABEL_24;
      }
      (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v17, v56, v63, v64);
      if (!v61) {
        goto LABEL_24;
      }
      unsigned int v50 = (llvm::MDNode **)v60;
      uint64_t v51 = (llvm::MDNode **)((char *)v60 + 16 * v61);
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v50, v50[1]);
        v50 += 2;
      }
      while (v50 != v51);
    }
    else
    {
      __int16 v59 = 257;
      unsigned int v12 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v12, v13, v58, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v12, v56, v63, v64);
      if (v61)
      {
        uint64_t v14 = (llvm::MDNode **)v60;
        int v15 = (llvm::MDNode **)((char *)v60 + 16 * v61);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v14, v14[1]);
          v14 += 2;
        }
        while (v14 != v15);
      }
    }
  }
  else
  {
    if ((v9 & 0x40000000) != 0) {
      unsigned int v11 = *(unsigned __int8 ***)(a1 - 8);
    }
    else {
      unsigned int v11 = (unsigned __int8 **)(a1 - 32 * (v9 & 0x7FFFFFF));
    }
    unsigned int v12 = *v11;
    uint64_t v16 = *v65 + 1960;
    v54[0] = "extendintzext";
    __int16 v55 = 259;
    if (*(void *)v12 == v16)
    {
LABEL_35:
      int v25 = *(_DWORD *)(a1 + 20);
      if ((v25 & 0x40000000) != 0) {
        uint64_t v26 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v26 = a1 - 32 * (v25 & 0x7FFFFFF);
      }
      uint64_t v20 = *(unsigned __int8 **)(v26 + 32);
      uint64_t v27 = *v65 + 1960;
      v54[0] = "extendintzext";
      __int16 v55 = 259;
      if (*(void *)v20 != v27)
      {
        if (v20[16] <= 0x14u)
        {
          uint64_t v20 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v66 + 28))(v66, 39, v20, v27);
          if (v20) {
            BOOL v33 = v20[16] >= 0x1Cu;
          }
          else {
            BOOL v33 = 0;
          }
          if (v33)
          {
            (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v20, v54, v63, v64);
            if (v61)
            {
              unsigned int v48 = (llvm::MDNode **)v60;
              uint64_t v49 = (llvm::MDNode **)((char *)v60 + 16 * v61);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v20, *(_DWORD *)v48, v48[1]);
                v48 += 2;
              }
              while (v48 != v49);
            }
          }
        }
        else
        {
          __int16 v59 = 257;
          uint64_t v20 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v20, v27, v58, 0);
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v20, v54, v63, v64);
          if (v61)
          {
            uint64_t v28 = (llvm::MDNode **)v60;
            uint64_t v29 = (llvm::MDNode **)((char *)v60 + 16 * v61);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v20, *(_DWORD *)v28, v28[1]);
              v28 += 2;
            }
            while (v28 != v29);
          }
        }
      }
      goto LABEL_57;
    }
    if (v12[16] <= 0x14u)
    {
      uint64_t v24 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v66 + 28))(v66, 39, v12, v16);
      unsigned int v12 = (unsigned __int8 *)v24;
      if (!v24) {
        goto LABEL_35;
      }
      if (*(unsigned __int8 *)(v24 + 16) < 0x1Cu) {
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v24, v54, v63, v64);
      if (!v61) {
        goto LABEL_35;
      }
      uint64_t v52 = (llvm::MDNode **)v60;
      int v53 = (llvm::MDNode **)((char *)v60 + 16 * v61);
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v52, v52[1]);
        v52 += 2;
      }
      while (v52 != v53);
    }
    else
    {
      __int16 v59 = 257;
      unsigned int v12 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v12, v16, v58, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v12, v54, v63, v64);
      if (v61)
      {
        unint64_t v46 = (llvm::MDNode **)v60;
        uint64_t v47 = (llvm::MDNode **)((char *)v60 + 16 * v61);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v46, v46[1]);
          v46 += 2;
        }
        while (v46 != v47);
      }
    }
  }
  if (!a3) {
    goto LABEL_35;
  }
LABEL_24:
  int v18 = *(_DWORD *)(a1 + 20);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v19 = a1 - 32 * (v18 & 0x7FFFFFF);
  }
  uint64_t v20 = *(unsigned __int8 **)(v19 + 32);
  uint64_t v21 = *v65 + 1960;
  v56[0] = "extendintsext";
  __int16 v57 = 259;
  if (*(void *)v20 != v21)
  {
    if (v20[16] <= 0x14u)
    {
      uint64_t v20 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v66 + 28))(v66, 40, v20, v21);
      if (v20) {
        BOOL v30 = v20[16] >= 0x1Cu;
      }
      else {
        BOOL v30 = 0;
      }
      if (v30)
      {
        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v20, v56, v63, v64);
        if (v61)
        {
          unsigned int v31 = (llvm::MDNode **)v60;
          unsigned int v32 = (llvm::MDNode **)((char *)v60 + 16 * v61);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v20, *(_DWORD *)v31, v31[1]);
            v31 += 2;
          }
          while (v31 != v32);
        }
      }
    }
    else
    {
      __int16 v59 = 257;
      uint64_t v20 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v20, v21, v58, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v67 + 16))(v67, v20, v56, v63, v64);
      if (v61)
      {
        unsigned int v22 = (llvm::MDNode **)v60;
        uint64_t v23 = (llvm::MDNode **)((char *)v60 + 16 * v61);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v20, *(_DWORD *)v22, v22[1]);
          v22 += 2;
        }
        while (v22 != v23);
      }
    }
  }
LABEL_57:
  char v34 = *(unsigned char *)(a1 + 17);
  uint64_t v35 = a3 | ((v34 & 4) >> 2);
  uint64_t v36 = a3 ^ 1 | ((v34 & 2) >> 1);
  int v37 = *(unsigned __int8 *)(a1 + 16);
  if (v37 == 53)
  {
    v58[0] = "extendint";
    __int16 v59 = 259;
    uint64_t v38 = (unsigned __int8 *)sub_1CC242524((uint64_t)&v60, (uint64_t)v12, (uint64_t)v20, (uint64_t)v58, v36, v35);
  }
  else
  {
    v58[0] = "extendint";
    __int16 v59 = 259;
    if (v37 == 45) {
      uint64_t v38 = (unsigned __int8 *)sub_1CC09A1EC((uint64_t)&v60, (uint64_t)v12, (uint64_t)v20, (uint64_t)v58, v36, v35);
    }
    else {
      uint64_t v38 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v60, v12, (uint64_t)v20, (uint64_t)v58, v36, v35);
    }
  }
  if (a3)
  {
    v58[0] = "extendintsext";
    __int16 v59 = 259;
    uint64_t v39 = sub_1CB845504((uint64_t)&v60, v38, a2, (uint64_t)v58);
  }
  else
  {
    v58[0] = "extendintzext";
    __int16 v59 = 259;
    uint64_t v39 = sub_1CB844B8C((uint64_t)&v60, v38, a2, (uint64_t)v58);
  }
  uint64_t v40 = v39;
  if (v60 != v62) {
    free(v60);
  }
  return v40;
}

void sub_1CD10EC30(uint64_t a1)
{
  v218[32] = *MEMORY[0x1E4F143B8];
  unsigned int v216 = v218;
  uint64_t v217 = 0x1000000000;
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unsigned int v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4 || *(unsigned __int8 *)(v3 + 16) >= 0x1Cu)
      {
        if (v2 >= HIDWORD(v217)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v5 = (char *)v216 + 16 * v2;
        void *v5 = v1;
        v5[1] = v4;
        unsigned int v2 = v217 + 1;
        LODWORD(v217) = v217 + 1;
      }
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
    if (v2)
    {
      int v213 = v215;
      uint64_t v214 = 0x400000000;
      while (1)
      {
        uint64_t v6 = (char *)v216 + 16 * v2;
        uint64_t v7 = *(void *)(*((void *)v6 - 2) + 24);
        if (v7 && *(unsigned __int8 *)(v7 + 16) >= 0x1Cu) {
          break;
        }
        uint64_t v9 = *((void *)v6 - 1);
        if (v9)
        {
          uint64_t v10 = *(void *)(v7 + 8);
          if (v10)
          {
            if (v9 == v10 && (!v214 || *((void *)v213 + v214 - 1) != v7))
            {
              if (v214 >= (unint64_t)HIDWORD(v214)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v213 + v214) = v7;
              LODWORD(v214) = v214 + 1;
              uint64_t v9 = *((void *)v6 - 1);
            }
            *((void *)v6 - 1) = *(void *)(v9 + 8);
            uint64_t v11 = *(void *)(v9 + 24);
            unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
            if (v12 >= 0x1C)
            {
              uint64_t v13 = *(void *)(v11 + 8);
LABEL_278:
              if (v217 >= (unint64_t)HIDWORD(v217)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v184 = (char *)v216 + 16 * v217;
              *uint64_t v184 = v9;
              v184[1] = v13;
              unsigned int v2 = v217 + 1;
              goto LABEL_280;
            }
            if (v12 >= 4)
            {
              uint64_t v13 = *(void *)(v11 + 8);
              if (v13) {
                goto LABEL_278;
              }
            }
LABEL_271:
            unsigned int v2 = v217;
            if (!v217) {
              goto LABEL_296;
            }
          }
          else
          {
            --v2;
LABEL_280:
            LODWORD(v217) = v2;
            if (!v2)
            {
LABEL_296:
              llvm::Constant::removeDeadConstantUsers(a1);
              if (v213 != v215) {
                free(v213);
              }
              goto LABEL_298;
            }
          }
        }
        else
        {
          LODWORD(v217) = --v2;
          LODWORD(v214) = v214 - 1;
          if (!v2) {
            goto LABEL_296;
          }
        }
      }
      unsigned int v205 = 128;
      uint64_t v14 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
      v204[0] = v14;
      v204[1] = 0;
      uint64_t v209 = 2;
      int v210 = 0;
      uint64_t v211 = -4096;
      uint64_t v212 = 0;
      uint64_t v208 = (const char *)&unk_1F2615EC8;
      uint64_t v200 = v7;
      if (!v205) {
        goto LABEL_40;
      }
      uint64_t v16 = 0;
      unint64_t v17 = (unint64_t)v205 << 6;
      int v18 = v14 + 16;
      do
      {
        uint64_t v19 = v209;
        uint64_t v20 = v211;
        *(v18 - 1) = v209 & 6;
        *int v18 = 0;
        v18[1] = v20;
        if (v20 != -4096 && v20 != -8192 && v20 != 0)
        {
          *int v18 = *(void *)(v19 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = v18 - 1;
          *(v18 - 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
          if (*v18) {
            *(void *)*int v18 = *(void *)*v18 & 7 | (unint64_t)(v14 + 16);
          }
          uint64_t v16 = v212;
          uint64_t v7 = v200;
        }
        *(v18 - 2) = &unk_1F2615EC8;
        void v18[2] = v16;
        v18 += 8;
        v14 += 64;
        v17 -= 64;
      }
      while (v17);
      if (v211 == -8192 || v211 == -4096 || !v211) {
        goto LABEL_40;
      }
      unint64_t v185 = v209 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v209 & 0xFFFFFFFFFFFFFFF8) = v210;
      if (v210)
      {
        unint64_t *v210 = *v210 & 7 | v185;
      }
      else
      {
        uint64_t v186 = v211;
        unsigned int v187 = ***(int32x2_t ****)v211;
        unint64_t v188 = (unint64_t)v187[303];
        uint64_t v7 = v200;
        if (v188 > v185) {
          goto LABEL_40;
        }
        uint64_t v189 = v187[305].u32[0];
        if (v188 + 16 * v189 <= v185) {
          goto LABEL_40;
        }
        unsigned int v190 = v189 - 1;
        LODWORD(v191) = v190 & ((v211 >> 4) ^ (v211 >> 9));
        uint64_t v192 = (uint64_t *)(v188 + 16 * v191);
        uint64_t v193 = *v192;
        if (v211 == *v192)
        {
LABEL_292:
          *uint64_t v192 = -8192;
          v187[304] = vadd_s32(v187[304], (int32x2_t)0x1FFFFFFFFLL);
          uint64_t v186 = v211;
        }
        else
        {
          int v194 = 1;
          while (v193 != -4096)
          {
            int v195 = v191 + v194++;
            uint64_t v191 = v195 & v190;
            uint64_t v193 = *(void *)(v188 + 16 * v191);
            if (v211 == v193)
            {
              uint64_t v192 = (uint64_t *)(v188 + 16 * v191);
              goto LABEL_292;
            }
          }
        }
        *(unsigned char *)(v186 + 17) &= ~1u;
      }
      uint64_t v7 = v200;
LABEL_40:
      LOBYTE(v206[0]) = 0;
      char v207 = 0;
      if (!v214)
      {
LABEL_268:
        LODWORD(v217) = v217 - 1;
        if (v207)
        {
          sub_1CC009394((uint64_t)v206);
          MEMORY[0x1D25D9CD0](v206[0], 8);
          char v207 = 0;
        }
        sub_1CC4D021C(v204);
        MEMORY[0x1D25D9CD0](v204[0], 8);
        goto LABEL_271;
      }
      unsigned int v22 = (llvm::ConstantExpr **)v213;
      unsigned int v197 = v6;
      uint64_t v198 = (char *)v213 + 8 * v214;
      uint64_t v23 = (uint64_t *)(v7 + 24);
      while (1)
      {
        uint64_t v24 = *v22;
        int v25 = *((unsigned __int8 *)*v22 + 16);
        if (*v22) {
          BOOL v26 = v25 == 5;
        }
        else {
          BOOL v26 = 0;
        }
        uint64_t v199 = v22;
        if (v26)
        {
          uint64_t AsInstruction = llvm::ConstantExpr::getAsInstruction(v24, 0);
          uint64_t v29 = (llvm::UndefValue *)AsInstruction;
          if (*(unsigned char *)(v7 + 16) == 83)
          {
            int v75 = *(_DWORD *)(v7 + 20);
            if ((v75 & 0x40000000) != 0) {
              uint64_t v76 = *(void *)(v7 - 8);
            }
            else {
              uint64_t v76 = v7 - 32 * (v75 & 0x7FFFFFF);
            }
            uint64_t v128 = *(void *)(v76
                             + 32 * *(unsigned int *)(v7 + 60)
                             + 8 * ((unint64_t)(*((void *)v197 - 2) - v76) >> 5));
            uint64_t v129 = *(void *)(v128 + 40);
            if (v129 == v128 + 40)
            {
              uint64_t v131 = 0;
            }
            else
            {
              if (v129) {
                uint64_t v130 = v129 - 24;
              }
              else {
                uint64_t v130 = 0;
              }
              if (*(unsigned __int8 *)(v130 + 16) - 29 >= 0xB) {
                uint64_t v131 = 0;
              }
              else {
                uint64_t v131 = v130;
              }
            }
            uint64_t v132 = *(void *)(v131 + 40);
            *(void *)(AsInstruction + 40) = v132;
            *(_WORD *)(v132 + 18) &= ~0x8000u;
            if ((*(unsigned char *)(AsInstruction + 23) & 0x10) != 0)
            {
              uint64_t v177 = *(void *)(v132 + 56);
              if (v177)
              {
                uint64_t v178 = *(llvm::ValueSymbolTable **)(v177 + 104);
                if (v178) {
                  llvm::ValueSymbolTable::reinsertValue(v178, v29);
                }
              }
            }
            uint64_t v134 = *(void *)(v131 + 24);
            uint64_t v133 = (void *)(v131 + 24);
            *((void *)v29 + 3) = v134;
            *((void *)v29 + 4) = v133;
            *(void *)(v134 + 8) = (char *)v29 + 24;
            *uint64_t v133 = (char *)v29 + 24;
          }
          else
          {
            uint64_t v126 = *(void *)(v7 + 40);
            *(void *)(AsInstruction + 40) = v126;
            *(_WORD *)(v126 + 18) &= ~0x8000u;
            if ((*(unsigned char *)(AsInstruction + 23) & 0x10) != 0)
            {
              uint64_t v175 = *(void *)(v126 + 56);
              if (v175)
              {
                uint64_t v176 = *(llvm::ValueSymbolTable **)(v175 + 104);
                if (v176) {
                  llvm::ValueSymbolTable::reinsertValue(v176, v29);
                }
              }
            }
            uint64_t v127 = *v23;
            *((void *)v29 + 3) = *v23;
            *((void *)v29 + 4) = v23;
            *(void *)(v127 + 8) = (char *)v29 + 24;
            *uint64_t v23 = (uint64_t)v29 + 24;
          }
        }
        else
        {
          if (v24) {
            BOOL v27 = v25 == 10;
          }
          else {
            BOOL v27 = 0;
          }
          if (v27)
          {
            uint64_t v29 = llvm::UndefValue::get(*(llvm::UndefValue **)v24, v15);
            uint64_t v77 = *(unsigned int *)(*(void *)v24 + 32);
            if (!v77) {
              goto LABEL_197;
            }
            unint64_t v78 = 0;
            uint64_t v79 = (llvm::ConstantInt *)(***(void ***)v24 + 1960);
            while (2)
            {
              BOOL v80 = v29;
              uint64_t v81 = (llvm::Value *)*((void *)v24 + 4 * v78 + -4 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF));
              if (v205)
              {
                uint64_t v82 = ((v81 >> 4) ^ (v81 >> 9)) & (v205 - 1);
                uint64_t v83 = v204[0] + (v82 << 6);
                uint64_t v84 = *(llvm::Value **)(v83 + 24);
                if (v81 != v84)
                {
                  int v85 = 1;
                  while (v84 != (llvm::Value *)-4096)
                  {
                    int v86 = v82 + v85++;
                    uint64_t v82 = v86 & (v205 - 1);
                    uint64_t v83 = v204[0] + (v82 << 6);
                    uint64_t v84 = *(llvm::Value **)(v83 + 24);
                    if (v81 == v84) {
                      goto LABEL_127;
                    }
                  }
                  goto LABEL_145;
                }
LABEL_127:
                if (v83 == v204[0] + ((unint64_t)v205 << 6)) {
                  goto LABEL_145;
                }
                uint64_t v209 = 2;
                int v210 = 0;
                uint64_t v211 = (uint64_t)v81;
                if (v81 != (llvm::Value *)-8192 && v81 != (llvm::Value *)-4096 && v81) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v209);
                }
                uint64_t v208 = (const char *)&unk_1F2615EC8;
                uint64_t v212 = v204;
                int v87 = sub_1CC4CFF80((uint64_t)v204, &v208);
                if (v211 != -8192 && v211 != -4096 && v211)
                {
                  unint64_t v88 = v209 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v209 & 0xFFFFFFFFFFFFFFF8) = v210;
                  if (v210)
                  {
                    unint64_t *v210 = *v210 & 7 | v88;
                  }
                  else
                  {
                    uint64_t v89 = v211;
                    uint64_t v90 = ***(int32x2_t ****)v211;
                    unint64_t v91 = (unint64_t)v90[303];
                    if (v91 <= v88)
                    {
                      uint64_t v92 = v90[305].u32[0];
                      if (v91 + 16 * v92 > v88)
                      {
                        unsigned int v93 = v92 - 1;
                        LODWORD(v94) = v93 & ((v211 >> 4) ^ (v211 >> 9));
                        int v95 = (uint64_t *)(v91 + 16 * v94);
                        uint64_t v96 = *v95;
                        if (v211 == *v95)
                        {
LABEL_143:
                          *int v95 = -8192;
                          v90[304] = vadd_s32(v90[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v89 = v211;
                        }
                        else
                        {
                          int v97 = 1;
                          while (v96 != -4096)
                          {
                            int v98 = v94 + v97++;
                            uint64_t v94 = v98 & v93;
                            uint64_t v96 = *(void *)(v91 + 16 * v94);
                            if (v211 == v96)
                            {
                              int v95 = (uint64_t *)(v91 + 16 * v94);
                              goto LABEL_143;
                            }
                          }
                        }
                        *(unsigned char *)(v89 + 17) &= ~1u;
                      }
                    }
                  }
                }
                uint64_t __src = 6;
                int v202 = 0;
                int v100 = (llvm::Value *)v87[7];
                uint64_t v203 = v100;
                if (v100 != (llvm::Value *)-8192 && v100 != (llvm::Value *)-4096 && v100 != 0)
                {
                  unint64_t v102 = v87[5] & 0xFFFFFFFFFFFFFFF8;
                  int v202 = *(unint64_t **)v102;
                  *(void *)unint64_t v102 = &__src;
                  uint64_t __src = v102 | 6;
                  if (v202) {
                    *int v202 = *v202 & 7 | (unint64_t)&v202;
                  }
                }
              }
              else
              {
LABEL_145:
                uint64_t __src = 6;
                int v202 = 0;
                uint64_t v203 = v81;
                if (v81 != (llvm::Value *)-8192 && v81 != (llvm::Value *)-4096 && v81 != 0) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
                }
              }
              int v103 = v203;
              if (v203 != (llvm::Value *)-8192 && v203 != (llvm::Value *)-4096 && v203 != 0)
              {
                unint64_t v113 = __src & 0xFFFFFFFFFFFFFFF8;
                *(void *)(__src & 0xFFFFFFFFFFFFFFF8) = v202;
                if (v202)
                {
                  *int v202 = *v202 & 7 | v113;
                }
                else
                {
                  BOOL v114 = v203;
                  BOOL v115 = ***(int32x2_t ****)v203;
                  unint64_t v116 = (unint64_t)v115[303];
                  if (v116 <= v113)
                  {
                    uint64_t v117 = v115[305].u32[0];
                    if (v116 + 16 * v117 > v113)
                    {
                      unsigned int v118 = v117 - 1;
                      LODWORD(v119) = v118 & ((v203 >> 4) ^ (v203 >> 9));
                      unsigned int v120 = (llvm::Value **)(v116 + 16 * v119);
                      unsigned int v121 = *v120;
                      if (v203 == *v120)
                      {
LABEL_178:
                        void *v120 = (llvm::Value *)-8192;
                        v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                        BOOL v114 = v203;
                      }
                      else
                      {
                        int v122 = 1;
                        while (v121 != (llvm::Value *)-4096)
                        {
                          int v123 = v119 + v122++;
                          uint64_t v119 = v123 & v118;
                          unsigned int v121 = *(llvm::Value **)(v116 + 16 * v119);
                          if (v203 == v121)
                          {
                            unsigned int v120 = (llvm::Value **)(v116 + 16 * v119);
                            goto LABEL_178;
                          }
                        }
                      }
                      *((unsigned char *)v114 + 17) &= ~1u;
                    }
                  }
                }
              }
              unsigned int v105 = (llvm::Value *)llvm::ConstantInt::get(v79, v78, 0);
              LOWORD(v212) = 257;
              int v106 = operator new(0xA0uLL);
              BOOL v107 = v106;
              uint64_t v108 = 0;
              uint64_t v29 = (llvm::UndefValue *)(v106 + 24);
              v106[29] = v106[29] & 0x38000000 | 3;
              do
              {
                uint64_t v109 = &v106[v108];
                void *v109 = 0;
                v109[1] = 0;
                v109[2] = 0;
                v109[3] = v29;
                v108 += 8;
              }
              while (v108 != 24);
              llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v106 + 24), v80, v103, v105, &v208, 0);
              uint64_t v7 = v200;
              uint64_t v110 = *(void *)(v200 + 40);
              *((void *)v107 + 17) = v110;
              *(_WORD *)(v110 + 18) &= ~0x8000u;
              if ((*((unsigned char *)v107 + 119) & 0x10) != 0)
              {
                uint64_t v124 = *(void *)(v110 + 56);
                if (v124)
                {
                  int v125 = *(llvm::ValueSymbolTable **)(v124 + 104);
                  if (v125) {
                    llvm::ValueSymbolTable::reinsertValue(v125, v29);
                  }
                }
              }
              uint64_t v111 = *v23;
              *((void *)v107 + 15) = *v23;
              *((void *)v107 + 16) = v23;
              unsigned int v112 = v107 + 30;
              *(void *)(v111 + 8) = v112;
              *uint64_t v23 = (uint64_t)v112;
              if (++v78 == v77) {
                goto LABEL_197;
              }
              continue;
            }
          }
          if (v24) {
            BOOL v28 = v25 == 9;
          }
          else {
            BOOL v28 = 0;
          }
          if (!v28) {
            llvm::report_fatal_error((llvm *)"Unable to replace a constant with instructions", (const llvm::Twine *)1);
          }
          uint64_t v29 = llvm::UndefValue::get(*(llvm::UndefValue **)v24, v15);
          uint64_t v30 = *(unsigned int *)(*(void *)v24 + 12);
          if (v30)
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              uint64_t v32 = (uint64_t)v29;
              BOOL v33 = (llvm::Value *)*((void *)v24 + 4 * i + -4 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF));
              if (v205)
              {
                uint64_t v34 = ((v33 >> 4) ^ (v33 >> 9)) & (v205 - 1);
                uint64_t v35 = v204[0] + (v34 << 6);
                uint64_t v36 = *(llvm::Value **)(v35 + 24);
                if (v33 == v36)
                {
LABEL_62:
                  if (v35 != v204[0] + ((unint64_t)v205 << 6))
                  {
                    uint64_t v209 = 2;
                    int v210 = 0;
                    uint64_t v211 = (uint64_t)v33;
                    if (v33 != (llvm::Value *)-8192 && v33 != (llvm::Value *)-4096 && v33) {
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v209);
                    }
                    uint64_t v208 = (const char *)&unk_1F2615EC8;
                    uint64_t v212 = v204;
                    uint64_t v39 = sub_1CC4CFF80((uint64_t)v204, &v208);
                    if (v211 != -8192 && v211 != -4096 && v211)
                    {
                      unint64_t v40 = v209 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)(v209 & 0xFFFFFFFFFFFFFFF8) = v210;
                      if (v210)
                      {
                        unint64_t *v210 = *v210 & 7 | v40;
                      }
                      else
                      {
                        uint64_t v41 = v211;
                        int v42 = ***(int32x2_t ****)v211;
                        unint64_t v43 = (unint64_t)v42[303];
                        if (v43 <= v40)
                        {
                          uint64_t v44 = v42[305].u32[0];
                          if (v43 + 16 * v44 > v40)
                          {
                            unsigned int v45 = v44 - 1;
                            LODWORD(v46) = v45 & ((v211 >> 4) ^ (v211 >> 9));
                            uint64_t v47 = (uint64_t *)(v43 + 16 * v46);
                            uint64_t v48 = *v47;
                            if (v211 == *v47)
                            {
LABEL_78:
                              uint64_t *v47 = -8192;
                              v42[304] = vadd_s32(v42[304], (int32x2_t)0x1FFFFFFFFLL);
                              uint64_t v41 = v211;
                            }
                            else
                            {
                              int v49 = 1;
                              while (v48 != -4096)
                              {
                                int v50 = v46 + v49++;
                                uint64_t v46 = v50 & v45;
                                uint64_t v48 = *(void *)(v43 + 16 * v46);
                                if (v211 == v48)
                                {
                                  uint64_t v47 = (uint64_t *)(v43 + 16 * v46);
                                  goto LABEL_78;
                                }
                              }
                            }
                            *(unsigned char *)(v41 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    uint64_t __src = 6;
                    int v202 = 0;
                    uint64_t v52 = (llvm::Value *)v39[7];
                    uint64_t v203 = v52;
                    if (v52 != (llvm::Value *)-8192 && v52 != (llvm::Value *)-4096 && v52 != 0)
                    {
                      unint64_t v54 = v39[5] & 0xFFFFFFFFFFFFFFF8;
                      int v202 = *(unint64_t **)v54;
                      *(void *)unint64_t v54 = &__src;
                      uint64_t __src = v54 | 6;
                      if (v202) {
                        *int v202 = *v202 & 7 | (unint64_t)&v202;
                      }
                    }
                    goto LABEL_94;
                  }
                }
                else
                {
                  int v37 = 1;
                  while (v36 != (llvm::Value *)-4096)
                  {
                    int v38 = v34 + v37++;
                    uint64_t v34 = v38 & (v205 - 1);
                    uint64_t v35 = v204[0] + (v34 << 6);
                    uint64_t v36 = *(llvm::Value **)(v35 + 24);
                    if (v33 == v36) {
                      goto LABEL_62;
                    }
                  }
                }
              }
              uint64_t __src = 6;
              int v202 = 0;
              uint64_t v203 = v33;
              if (v33 != (llvm::Value *)-8192 && v33 != (llvm::Value *)-4096 && v33 != 0) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
              }
LABEL_94:
              uint64_t v55 = (uint64_t)v203;
              if (v203 != (llvm::Value *)-8192 && v203 != (llvm::Value *)-4096 && v203 != 0)
              {
                unint64_t v61 = __src & 0xFFFFFFFFFFFFFFF8;
                *(void *)(__src & 0xFFFFFFFFFFFFFFF8) = v202;
                if (v202)
                {
                  *int v202 = *v202 & 7 | v61;
                }
                else
                {
                  uint64_t v62 = v203;
                  uint64_t v63 = ***(int32x2_t ****)v203;
                  unint64_t v64 = (unint64_t)v63[303];
                  if (v64 <= v61)
                  {
                    uint64_t v65 = v63[305].u32[0];
                    if (v64 + 16 * v65 > v61)
                    {
                      unsigned int v66 = v65 - 1;
                      LODWORD(v67) = v66 & ((v203 >> 4) ^ (v203 >> 9));
                      uint64_t v68 = (llvm::Value **)(v64 + 16 * v67);
                      int v69 = *v68;
                      if (v203 == *v68)
                      {
LABEL_111:
                        *uint64_t v68 = (llvm::Value *)-8192;
                        v63[304] = vadd_s32(v63[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v62 = v203;
                      }
                      else
                      {
                        int v70 = 1;
                        while (v69 != (llvm::Value *)-4096)
                        {
                          int v71 = v67 + v70++;
                          uint64_t v67 = v71 & v66;
                          int v69 = *(llvm::Value **)(v64 + 16 * v67);
                          if (v203 == v69)
                          {
                            uint64_t v68 = (llvm::Value **)(v64 + 16 * v67);
                            goto LABEL_111;
                          }
                        }
                      }
                      *((unsigned char *)v62 + 17) &= ~1u;
                    }
                  }
                }
              }
              LODWORD(__src) = i;
              LOWORD(v212) = 257;
              __int16 v57 = (char *)operator new(0xA0uLL);
              *((_DWORD *)v57 + 21) = *((_DWORD *)v57 + 21) & 0x38000000 | 2;
              *((void *)v57 + 1) = 0;
              *((void *)v57 + 2) = 0;
              *(void *)__int16 v57 = 0;
              *((void *)v57 + 5) = 0;
              *((void *)v57 + 6) = 0;
              *((void *)v57 + 4) = 0;
              *((void *)v57 + 8) = *(void *)v29;
              uint64_t v29 = (llvm::UndefValue *)(v57 + 64);
              *((void *)v57 + 3) = v57 + 64;
              *((void *)v57 + 7) = v57 + 64;
              *((void *)v57 + 9) = 0;
              v57[80] = 93;
              v57[81] = 0;
              *((_WORD *)v57 + 41) = 0;
              *(_OWORD *)(v57 + 88) = 0u;
              unint64_t v58 = v57 + 88;
              *((_DWORD *)v57 + 21) = 2;
              *((_DWORD *)v57 + 30) = 0;
              *(_OWORD *)(v57 + 104) = 0u;
              *((void *)v57 + 16) = v57 + 144;
              *((void *)v57 + 17) = 0x400000000;
              llvm::InsertValueInst::init((llvm::Value *)(v57 + 64), v32, v55, &__src, 1, &v208);
              uint64_t v7 = v200;
              uint64_t v59 = *(void *)(v200 + 40);
              *((void *)v57 + 13) = v59;
              *(_WORD *)(v59 + 18) &= ~0x8000u;
              if ((v57[87] & 0x10) != 0)
              {
                uint64_t v72 = *(void *)(v59 + 56);
                if (v72)
                {
                  uint64_t v73 = *(llvm::ValueSymbolTable **)(v72 + 104);
                  if (v73) {
                    llvm::ValueSymbolTable::reinsertValue(v73, v29);
                  }
                }
              }
              uint64_t v60 = *v23;
              *((void *)v57 + 11) = *v23;
              *((void *)v57 + 12) = v23;
              *(void *)(v60 + 8) = v58;
              *uint64_t v23 = (uint64_t)v58;
            }
          }
        }
LABEL_197:
        uint64_t v209 = 2;
        int v210 = 0;
        uint64_t v211 = (uint64_t)v24;
        if (v24 != (llvm::ConstantExpr *)-8192 && v24 != (llvm::ConstantExpr *)-4096 && v24) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v209);
        }
        uint64_t v208 = (const char *)&unk_1F2615EC8;
        uint64_t v212 = v204;
        uint64_t v135 = sub_1CC4CFF80((uint64_t)v204, &v208);
        if (v211 != -8192 && v211 != -4096 && v211)
        {
          unint64_t v136 = v209 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v209 & 0xFFFFFFFFFFFFFFF8) = v210;
          if (v210)
          {
            unint64_t *v210 = *v210 & 7 | v136;
          }
          else
          {
            uint64_t v137 = v211;
            int v138 = ***(int32x2_t ****)v211;
            unint64_t v139 = (unint64_t)v138[303];
            if (v139 <= v136)
            {
              uint64_t v140 = v138[305].u32[0];
              if (v139 + 16 * v140 > v136)
              {
                unsigned int v141 = v140 - 1;
                LODWORD(v142) = v141 & ((v211 >> 4) ^ (v211 >> 9));
                unsigned int v143 = (uint64_t *)(v139 + 16 * v142);
                uint64_t v144 = *v143;
                if (v211 == *v143)
                {
LABEL_212:
                  uint64_t *v143 = -8192;
                  v138[304] = vadd_s32(v138[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v137 = v211;
                }
                else
                {
                  int v145 = 1;
                  while (v144 != -4096)
                  {
                    int v146 = v142 + v145++;
                    uint64_t v142 = v146 & v141;
                    uint64_t v144 = *(void *)(v139 + 16 * v142);
                    if (v211 == v144)
                    {
                      unsigned int v143 = (uint64_t *)(v139 + 16 * v142);
                      goto LABEL_212;
                    }
                  }
                }
                *(unsigned char *)(v137 + 17) &= ~1u;
              }
            }
          }
        }
        long long v147 = (llvm::UndefValue *)v135[7];
        if (v147 != v29)
        {
          if (v147 && v147 != (llvm::UndefValue *)-8192 && v147 != (llvm::UndefValue *)-4096)
          {
            unint64_t v163 = v135[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v163 = v135[6];
            unsigned int v164 = (unint64_t *)v135[6];
            if (v164)
            {
              *unsigned int v164 = *v164 & 7 | v163;
            }
            else
            {
              uint64_t v165 = v135[7];
              uint64_t v166 = ***(int32x2_t ****)v165;
              unint64_t v167 = (unint64_t)v166[303];
              if (v167 <= v163)
              {
                uint64_t v168 = v166[305].u32[0];
                if (v167 + 16 * v168 > v163)
                {
                  unsigned int v169 = v168 - 1;
                  LODWORD(v170) = v169 & ((v165 >> 4) ^ (v165 >> 9));
                  uint64_t v171 = (uint64_t *)(v167 + 16 * v170);
                  uint64_t v172 = *v171;
                  if (v165 == *v171)
                  {
LABEL_252:
                    uint64_t *v171 = -8192;
                    v166[304] = vadd_s32(v166[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v165 = v135[7];
                  }
                  else
                  {
                    int v173 = 1;
                    while (v172 != -4096)
                    {
                      int v174 = v170 + v173++;
                      uint64_t v170 = v174 & v169;
                      uint64_t v172 = *(void *)(v167 + 16 * v170);
                      if (v165 == v172)
                      {
                        uint64_t v171 = (uint64_t *)(v167 + 16 * v170);
                        goto LABEL_252;
                      }
                    }
                  }
                  *(unsigned char *)(v165 + 17) &= ~1u;
                }
              }
            }
          }
          v135[7] = v29;
          if (v29 != (llvm::UndefValue *)-8192 && v29 != (llvm::UndefValue *)-4096 && v29) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v135 + 5));
          }
        }
        int v148 = *((_DWORD *)v29 + 5);
        if ((v148 & 0x40000000) != 0)
        {
          BOOL v150 = (char *)*((void *)v29 - 1);
          uint64_t v149 = v148 & 0x7FFFFFF;
          if (v149)
          {
LABEL_225:
            unsigned int v151 = &v150[32 * v149];
            do
            {
              if (v205)
              {
                uint64_t v152 = *(void *)v150;
                uint64_t v153 = ((*(void *)v150 >> 4) ^ (*(void *)v150 >> 9)) & (v205 - 1);
                uint64_t v154 = v204[0] + (v153 << 6);
                uint64_t v155 = *(void *)(v154 + 24);
                if (*(void *)v150 == v155)
                {
LABEL_231:
                  if (v154 != v204[0] + ((unint64_t)v205 << 6))
                  {
                    uint64_t v158 = *(void *)(v154 + 56);
                    if (v152)
                    {
                      **((void **)v150 + 2) = *((void *)v150 + 1);
                      uint64_t v159 = *((void *)v150 + 1);
                      if (v159) {
                        *(void *)(v159 + 16) = *((void *)v150 + 2);
                      }
                    }
                    *(void *)BOOL v150 = v158;
                    if (v158)
                    {
                      uint64_t v162 = *(void *)(v158 + 8);
                      uint64_t v161 = (char **)(v158 + 8);
                      uint64_t v160 = v162;
                      *((void *)v150 + 1) = v162;
                      if (v162) {
                        *(void *)(v160 + 16) = v150 + 8;
                      }
                      *((void *)v150 + 2) = v161;
                      *uint64_t v161 = v150;
                    }
                  }
                }
                else
                {
                  int v156 = 1;
                  while (v155 != -4096)
                  {
                    int v157 = v153 + v156++;
                    uint64_t v153 = v157 & (v205 - 1);
                    uint64_t v154 = v204[0] + (v153 << 6);
                    uint64_t v155 = *(void *)(v154 + 24);
                    if (v152 == v155) {
                      goto LABEL_231;
                    }
                  }
                }
              }
              v150 += 32;
            }
            while (v150 != v151);
          }
        }
        else
        {
          uint64_t v149 = v148 & 0x7FFFFFF;
          BOOL v150 = (char *)v29 - 32 * v149;
          if (v149) {
            goto LABEL_225;
          }
        }
        unsigned int v22 = v199 + 1;
        if (v199 + 1 == (llvm::ConstantExpr **)v198)
        {
          if (v29)
          {
            uint64_t v179 = *((void *)v197 - 2);
            if (*(void *)v179)
            {
              **(void **)(v179 + 16) = *(void *)(v179 + 8);
              uint64_t v180 = *(void *)(v179 + 8);
              if (v180) {
                *(void *)(v180 + 16) = *(void *)(v179 + 16);
              }
            }
            *(void *)uint64_t v179 = v29;
            uint64_t v183 = *((void *)v29 + 1);
            int v182 = (void *)((char *)v29 + 8);
            uint64_t v181 = v183;
            *(void *)(v179 + 8) = v183;
            if (v183) {
              *(void *)(v181 + 16) = v179 + 8;
            }
            *(void *)(v179 + 16) = v182;
            *int v182 = v179;
          }
          goto LABEL_268;
        }
      }
    }
  }
LABEL_298:
  if (v216 != v218) {
    free(v216);
  }
}

uint64_t sub_1CD10FE8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  do
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t result = 0xFFFFFFFFLL;
    if (!v3) {
      break;
    }
    if (*(unsigned char *)(v3 + 16) != 89) {
      break;
    }
    uint64_t v5 = *(void *)(v3 - 32);
    if (*(unsigned char *)(v5 + 16) != 16) {
      break;
    }
    uint64_t v6 = (void *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u) {
      uint64_t v6 = (void *)*v6;
    }
    unsigned int v7 = *(_DWORD *)v6;
    uint64_t v2 = v2 <= v7 ? v7 : v2;
    uint64_t v1 = *(void *)(v1 + 8);
    uint64_t result = v2;
  }
  while (v1);
  return result;
}

void sub_1CD10FEF8(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 1;
  memset_pattern16(&v11, &unk_1CFAC3070, 0x80uLL);
  unsigned int v7 = v9;
  uint64_t v8 = 0x800000000;
  llvm::FindFunctionBackedges(a1, (uint64_t)&v7);
  uint64_t v2 = (uint64_t *)v7;
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v3 = 16 * v8;
  while (1)
  {
    uint64_t v6 = 0;
    if ((sub_1CD1169CC((uint64_t)&v10, *v2, v2[1], &v6) & 1) == 0) {
      break;
    }
LABEL_12:
    v2 += 2;
    v3 -= 16;
    if (!v3)
    {
      uint64_t v2 = (uint64_t *)v7;
LABEL_14:
      if (v2 != (uint64_t *)v9) {
        free(v2);
      }
      llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder();
    }
  }
  unsigned int v4 = v10 >> 1;
  if (v10) {
    unsigned int v5 = 8;
  }
  else {
    unsigned int v5 = v12;
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - HIDWORD(v10) > v5 >> 3)
  {
    goto LABEL_9;
  }
  sub_1CD116ACC((uint64_t)&v10, v5);
  uint64_t v6 = 0;
  sub_1CD1169CC((uint64_t)&v10, *v2, v2[1], &v6);
LABEL_9:
  LODWORD(v10) = v10 + 2;
  if (*(void *)v6 != -4096 || *((void *)v6 + 1) != -4096) {
    --HIDWORD(v10);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v2;
  goto LABEL_12;
}

uint64_t sub_1CD110204(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1CC5B8334(a2, a3, a4, a1, 0, &v28);
  int v5 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
  std::string __p = (void *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v28;
  }
  else {
    uint64_t v6 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = a1[14];
  std::string::size_type v9 = *((unsigned int *)v8 + 8);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (size < v10) {
    unint64_t v10 = size;
  }
  if (size <= v9) {
    unint64_t v10 = size;
  }
  if ((v9 & 0x80000000) == 0) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = size;
  }
  uint64_t v12 = *((unsigned int *)v8 + 2);
  if (v12)
  {
    int v27 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
    int v13 = 0;
    if (v11)
    {
      size_t v14 = v11;
      int v15 = v6;
      do
      {
        unsigned __int8 v16 = v15->__r_.__value_.__s.__data_[0];
        int v15 = (std::string *)((char *)v15 + 1);
        int v13 = 33 * v13 + v16;
        --v14;
      }
      while (v14);
    }
    uint64_t v17 = *v8;
    uint64_t v18 = *v8 + 8 * v12 + 8;
    int v19 = 1;
    int v20 = v13;
    while (1)
    {
      uint64_t v21 = v20 & (v12 - 1);
      unsigned int v22 = *(void **)(v17 + 8 * v21);
      if (v22 != (void *)-8)
      {
        if (!v22) {
          goto LABEL_35;
        }
        if (*(_DWORD *)(v18 + 4 * v21) == v13
          && v11 == *v22
          && (!v11 || !memcmp(v6, (char *)v22 + *((unsigned int *)v8 + 5), v11)))
        {
          break;
        }
      }
      int v20 = v19 + v21;
      ++v19;
    }
    if (v21 == -1 || (int)v21 == v12)
    {
      if (v21 == -1 || (int)v21 == v12 || (uint64_t v23 = *(void *)(*(void *)(v17 + 8 * (int)v21) + 8)) == 0)
      {
LABEL_35:
        uint64_t v24 = 0;
        int v5 = v27;
        goto LABEL_36;
      }
      int v5 = v27;
    }
    else
    {
      uint64_t v23 = *(void *)(*(void *)(v17 + 8 * (int)v21) + 8);
      int v5 = v27;
      if (!v23) {
        goto LABEL_31;
      }
    }
    if (*(unsigned char *)(v23 + 16)) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v23;
    }
  }
  else
  {
LABEL_31:
    uint64_t v24 = 0;
  }
LABEL_36:
  if (v5 < 0) {
    operator delete(__p);
  }
  return v24;
}

BOOL sub_1CD1103C4(unsigned int a1, unsigned int a2, unsigned int a3)
{
  if (a3 <= 3 && (a1 <= 8 && ((a2 | a1) & 1) == 0 || a1 <= 4 && a2 == 1)) {
    return 1;
  }
  if ((a1 & 3) != 0 || (a2 & 3) != 0 && a2 % a1) {
    return 0;
  }
  return a1 < 4 || a3 != 1 || (a2 & 3) == 0;
}

void sub_1CD11042C(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5, char a6, int a7, int a8)
{
  uint64_t v173 = 0;
  int v13 = *(llvm::Module **)(*(void *)(**(void **)(a1 + 32) + 56) + 40);
  uint64_t v176 = v180;
  uint64_t v177 = v180;
  uint64_t v178 = 8;
  int v179 = 0;
  uint64_t v174 = 0;
  unsigned int v175 = 0;
  sub_1CD10929C(v13, (uint64_t)&v176, 1);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v167 = (llvm::Loop *)a1;
  uint64_t v158 = *(void *)(a1 + 40);
  if (v158 == v14)
  {
    uint64_t v151 = 0;
    goto LABEL_254;
  }
  int v153 = a4;
  int v154 = a5;
  uint64_t v155 = a3;
  int v15 = 0;
  unsigned int v162 = 0;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  unsigned int v164 = 0;
  uint64_t v159 = 0;
  unsigned int v16 = 0;
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  unsigned int v157 = 0;
  uint64_t v171 = (uint64_t)v13 + 272;
  int v169 = ~(-1 << a6);
  char v170 = a6;
  do
  {
    uint64_t v163 = v14;
    uint64_t v17 = *(void *)v14 + 40;
    for (uint64_t i = *(void *)(*(void *)v14 + 48); i != v17; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v19 = i - 24;
      if (i) {
        uint64_t v20 = i - 24;
      }
      else {
        uint64_t v20 = 0;
      }
      int v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 == 84)
      {
        uint64_t v22 = *(void *)(v20 - 32);
        if (v22)
        {
          if (!*(unsigned char *)(v22 + 16)
            && *(void *)(v22 + 24) == *(void *)(v20 + 72)
            && (*(unsigned char *)(v22 + 33) & 0x20) != 0
            && *(unsigned char *)(*(void *)v19 + 8) != 7
            && ((int v23 = *(_DWORD *)(*(void *)(i - 56) + 36), sub_1CB859A14(v23)) || (v23 - 2022) <= 0x3F))
          {
            uint64_t v102 = *(void *)v20;
            int v103 = *(_DWORD *)(v22 + 36);
            if (!sub_1CB859A14(v103)) {
              goto LABEL_169;
            }
            int v104 = *(unsigned __int8 *)(v102 + 8);
            if (v104 == 16 && v102 != 0)
            {
              uint64_t v102 = **(void **)(v102 + 16);
              int v104 = *(_DWORD *)(v102 + 8);
            }
            if ((v104 & 0xFE) == 0x12)
            {
              llvm::SampleInfo::SampleInfo((uint64_t)v181, v103, 1);
              uint64_t v107 = *(void *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 32 * v182);
              uint64_t v108 = (void *)(v107 + 24);
              if (*(_DWORD *)(v107 + 32) >= 0x41u) {
                uint64_t v108 = (void *)*v108;
              }
              unsigned int v109 = *(_DWORD *)v108;
              if (a8)
              {
                if (v109 <= 1) {
                  int v110 = 1;
                }
                else {
                  int v110 = 2;
                }
                if (v109 > 3) {
                  int v110 = 3;
                }
                if (v109 > 7) {
                  int v110 = 4;
                }
                if (v109 == -1) {
                  unsigned int v111 = -1;
                }
                else {
                  unsigned int v111 = v110;
                }
              }
              else
              {
                v106.i32[0] = v109;
                uint8x8_t v131 = (uint8x8_t)vcnt_s8(v106);
                v131.i16[0] = vaddlv_u8(v131);
                unsigned int v111 = v131.i32[0];
              }
              uint64_t v133 = sub_1CB83544C(v171, *(void *)(v102 + 24));
              if (v132 == 1) {
              unint64_t v113 = ((unint64_t)(v133 + 7) >> 3) * v111;
              }
            }
            else
            {
LABEL_169:
              unint64_t v113 = (unint64_t)(sub_1CB83544C(v171, v102) + 7) >> 3;
              if (v112 == 1) {
            }
              }
            LODWORD(v166) = ((v113 + v169) >> v170) + v166;
          }
          else if (!*(unsigned char *)(v22 + 16) {
                 && *(void *)(v22 + 24) == *(void *)(v20 + 72)
          }
                 && (*(unsigned char *)(v22 + 33) & 0x20) != 0
                 && *(unsigned char *)(*(void *)v19 + 8) == 7)
          {
            int v24 = *(_DWORD *)(*(void *)(i - 56) + 36);
            if ((v24 - 1682) < 0x8C || (v24 - 2022) <= 0x3F)
            {
              int v25 = *(_DWORD *)(v20 + 20);
              uint64_t v26 = v25 & 0x7FFFFFF;
              if ((v25 & 0x40000000) != 0) {
                uint64_t v27 = *(void *)(v20 - 8);
              }
              else {
                uint64_t v27 = v20 - 32 * v26;
              }
              uint64_t v115 = sub_1CB83544C(v171, **(void **)(v27 + 32 * (v26 - 1)));
              if (v114 == 1) {
              HIDWORD(v166) += (((unint64_t)(v115 + 7) >> 3) + 1) >> 1;
              }
            }
          }
        }
        goto LABEL_109;
      }
      if (!i || v21 != 60)
      {
        if (!i || v21 != 61) {
          goto LABEL_109;
        }
        unint64_t v44 = *(void *)(v20 - 32);
        uint64_t v46 = sub_1CB83544C(v171, **(void **)(v20 - 64));
        if (v45 == 1) {
        uint64_t v47 = **(void **)(v20 - 32);
        }
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if ((v48 & 0xFE) == 0x12) {
          unsigned int v48 = *(_DWORD *)(**(void **)(v47 + 16) + 8);
        }
        unsigned int v49 = (((unint64_t)(v46 + 7) >> 3) + v169) >> v170;
        if (v48 > 0xFF)
        {
LABEL_75:
          HIDWORD(v166) += v49;
          goto LABEL_109;
        }
        uint64_t v50 = *(void *)(a2 + 104);
        unsigned int v51 = *(_DWORD *)(a2 + 120);
        if (v51)
        {
          unsigned int v52 = (v51 - 1) & ((v44 >> 4) ^ (v44 >> 9));
          uint64_t v53 = v50 + 48 * v52;
          uint64_t v54 = *(void *)(v53 + 24);
          if (v54 != v44)
          {
            int v55 = 1;
            while (v54 != -4096)
            {
              unsigned int v56 = v52 + v55++;
              unsigned int v52 = v56 & (v51 - 1);
              uint64_t v53 = v50 + 48 * v52;
              uint64_t v54 = *(void *)(v53 + 24);
              if (v54 == v44) {
                goto LABEL_69;
              }
            }
            goto LABEL_68;
          }
        }
        else
        {
LABEL_68:
          uint64_t v53 = v50 + 48 * v51;
        }
LABEL_69:
        if (v53 == v50 + 48 * v51 || (SCEVIter = *(const llvm::SCEV **)(v53 + 40)) == 0) {
          SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v44);
        }
        int LoopDisposition = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, SCEVIter, v167);
        if (!LoopDisposition) {
          goto LABEL_75;
        }
        if (LoopDisposition == 1)
        {
          unsigned int v69 = 0;
          BOOL v64 = 1;
        }
        else
        {
          BOOL v64 = 0;
          unsigned int v69 = v49;
        }
        unsigned int v34 = v48 >> 8;
        LODWORD(v165) = v49 + v165;
        LODWORD(v160) = v69 + v160;
        if (!v162)
        {
          uint64_t v100 = 0;
          goto LABEL_136;
        }
        unint64_t v85 = ~((unint64_t)(37 * v49) << 32)
            + 37 * v49
            + ((unint64_t)((SCEVIter >> 4) ^ (SCEVIter >> 9)) << 32);
        unint64_t v86 = (v85 ^ (v85 >> 22)) + ~((v85 ^ (v85 >> 22)) << 13);
        unint64_t v87 = (9 * (v86 ^ (v86 >> 8))) ^ ((9 * (v86 ^ (v86 >> 8))) >> 15);
        unsigned int v88 = v162 - 1;
        unsigned int v89 = (v162 - 1) & (((v87 + ~(v87 << 27)) >> 31) ^ (v87 + ~(v87 << 27)));
        uint64_t v90 = v161 + 16 * v89;
        unint64_t v91 = *(const llvm::SCEV **)v90;
        int v92 = *(_DWORD *)(v90 + 8);
        if (SCEVIter != *(const llvm::SCEV **)v90 || v49 != v92)
        {
          uint64_t v94 = 0;
          int v95 = 1;
          while (v91 != (const llvm::SCEV *)-4096 || v92 != -1)
          {
            if (v94) {
              BOOL v96 = 0;
            }
            else {
              BOOL v96 = v92 == -2;
            }
            if (v96 && v91 == (const llvm::SCEV *)-8192) {
              uint64_t v94 = v90;
            }
            unsigned int v98 = v89 + v95++;
            unsigned int v89 = v98 & v88;
            uint64_t v90 = v161 + 16 * (v98 & v88);
            unint64_t v91 = *(const llvm::SCEV **)v90;
            int v92 = *(_DWORD *)(v90 + 8);
            BOOL v66 = 1;
            if (SCEVIter == *(const llvm::SCEV **)v90 && v49 == v92) {
              goto LABEL_144;
            }
          }
          if (v94) {
            uint64_t v100 = v94;
          }
          else {
            uint64_t v100 = v90;
          }
LABEL_136:
          if (4 * v15 + 4 >= 3 * v162)
          {
            unsigned int v116 = v48 >> 8;
            sub_1CD116D38(&v173, 2 * v162);
            uint64_t v161 = v173;
            if (!v175)
            {
              unsigned int v162 = 0;
              uint64_t v100 = 0;
              goto LABEL_207;
            }
            unint64_t v117 = ~((unint64_t)(37 * v49) << 32)
                 + 37 * v49
                 + ((unint64_t)((SCEVIter >> 4) ^ (SCEVIter >> 9)) << 32);
            unint64_t v118 = (v117 ^ (v117 >> 22)) + ~((v117 ^ (v117 >> 22)) << 13);
            unint64_t v119 = (9 * (v118 ^ (v118 >> 8))) ^ ((9 * (v118 ^ (v118 >> 8))) >> 15);
            unsigned int v162 = v175;
            unsigned int v120 = v175 - 1;
            unsigned int v121 = (v175 - 1) & (((v119 + ~(v119 << 27)) >> 31) ^ (v119 + ~(v119 << 27)));
            uint64_t v100 = v173 + 16 * v121;
            int v122 = *(const llvm::SCEV **)v100;
            int v123 = *(_DWORD *)(v100 + 8);
            BOOL v124 = SCEVIter == *(const llvm::SCEV **)v100 && v49 == v123;
            unsigned int v34 = v48 >> 8;
            if (!v124)
            {
              uint64_t v125 = 0;
              int v126 = 1;
              while (v122 != (const llvm::SCEV *)-4096 || v123 != -1)
              {
                if (v125) {
                  BOOL v127 = 0;
                }
                else {
                  BOOL v127 = v123 == -2;
                }
                if (v127 && v122 == (const llvm::SCEV *)-8192) {
                  uint64_t v125 = v100;
                }
                unsigned int v129 = v121 + v126++;
                unsigned int v121 = v129 & v120;
                uint64_t v100 = v173 + 16 * (v129 & v120);
                int v122 = *(const llvm::SCEV **)v100;
                int v123 = *(_DWORD *)(v100 + 8);
                if (SCEVIter == *(const llvm::SCEV **)v100 && v49 == v123) {
                  goto LABEL_138;
                }
              }
              if (v125) {
                uint64_t v100 = v125;
              }
            }
          }
          else
          {
            if (v162 + ~v15 - HIDWORD(v174) > v162 >> 3) {
              goto LABEL_138;
            }
            unsigned int v116 = v48 >> 8;
            sub_1CD116D38(&v173, v162);
            uint64_t v161 = v173;
            unsigned int v162 = v175;
            if (v175)
            {
              unint64_t v134 = ~((unint64_t)(37 * v49) << 32)
                   + 37 * v49
                   + ((unint64_t)((SCEVIter >> 4) ^ (SCEVIter >> 9)) << 32);
              unint64_t v135 = (v134 ^ (v134 >> 22)) + ~((v134 ^ (v134 >> 22)) << 13);
              unint64_t v136 = (9 * (v135 ^ (v135 >> 8))) ^ ((9 * (v135 ^ (v135 >> 8))) >> 15);
              unsigned int v137 = v175 - 1;
              unsigned int v138 = (v175 - 1) & (((v136 + ~(v136 << 27)) >> 31) ^ (v136 + ~(v136 << 27)));
              uint64_t v100 = v173 + 16 * v138;
              unint64_t v139 = *(const llvm::SCEV **)v100;
              int v140 = *(_DWORD *)(v100 + 8);
              if (*(const llvm::SCEV **)v100 != SCEVIter || v140 != v49)
              {
                uint64_t v142 = 0;
                int v143 = 1;
                while (v139 != (const llvm::SCEV *)-4096 || v140 != -1)
                {
                  if (v142) {
                    BOOL v144 = 0;
                  }
                  else {
                    BOOL v144 = v140 == -2;
                  }
                  if (v144 && v139 == (const llvm::SCEV *)-8192) {
                    uint64_t v142 = v100;
                  }
                  unsigned int v146 = v138 + v143++;
                  unsigned int v138 = v146 & v137;
                  uint64_t v100 = v173 + 16 * (v146 & v137);
                  unint64_t v139 = *(const llvm::SCEV **)v100;
                  int v140 = *(_DWORD *)(v100 + 8);
                  if (*(const llvm::SCEV **)v100 == SCEVIter && v140 == v49) {
                    goto LABEL_207;
                  }
                }
                if (v142) {
                  uint64_t v100 = v142;
                }
              }
            }
            else
            {
              unsigned int v162 = 0;
              uint64_t v100 = 0;
            }
LABEL_207:
            unsigned int v34 = v116;
          }
LABEL_138:
          int v15 = v174 + 1;
          LODWORD(v174) = v174 + 1;
          if (*(void *)v100 != -4096 || *(_DWORD *)(v100 + 8) != -1) {
            --HIDWORD(v174);
          }
          *(void *)uint64_t v100 = SCEVIter;
          *(_DWORD *)(v100 + 8) = v49;
          BOOL v66 = 1;
LABEL_144:
          unsigned int v164 = v162;
          uint64_t v159 = v161;
          goto LABEL_79;
        }
        BOOL v66 = 1;
        unsigned int v164 = v162;
        uint64_t v159 = v161;
        goto LABEL_79;
      }
      sub_1CD1110D4((uint64_t *)v20, v171);
      unint64_t v28 = *(void *)(v20 - 32);
      unsigned int v30 = sub_1CD1096DC(v20, v29, (uint64_t *)&v176);
      int v31 = sub_1CD1110D4((uint64_t *)v20, v171);
      uint64_t v32 = *(llvm **)(v20 - 32);
      unsigned int v33 = *(_DWORD *)(*(void *)v32 + 8);
      if ((v33 & 0xFE) == 0x12) {
        unsigned int v33 = *(_DWORD *)(**(void **)(*(void *)v32 + 16) + 8);
      }
      unsigned int v34 = v33 >> 8;
      BOOL v35 = v33 < 0x100;
      if (v33 < 0x100) {
        char v36 = 1;
      }
      else {
        char v36 = v30;
      }
      if ((v36 & 1) == 0)
      {
        if ((v33 & 0xFFFFFF00) != 0x200)
        {
          BOOL v35 = 0;
          uint64_t v62 = 0;
          BOOL v64 = 0;
          BOOL v66 = 0;
          BOOL v65 = 1;
          goto LABEL_78;
        }
        int v57 = v31;
        uint64_t v58 = v17;
        unsigned int v59 = v33 >> 8;
        UnderlyingObject = llvm::getUnderlyingObject(v32, (const llvm::Value *)6);
        if (!UnderlyingObject || *((unsigned char *)UnderlyingObject + 16) != 3)
        {
          BOOL v35 = 0;
          uint64_t v62 = 0;
          BOOL v64 = 0;
          BOOL v66 = 0;
          BOOL v65 = 1;
          unsigned int v34 = v59;
LABEL_77:
          uint64_t v17 = v58;
          int v31 = v57;
          goto LABEL_78;
        }
        BOOL v35 = 0;
        unsigned int v34 = v59;
        if ((*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF) == 0)
        {
          uint64_t v62 = 0;
          BOOL v65 = 1;
          BOOL v64 = 0;
          BOOL v66 = 0;
          goto LABEL_77;
        }
        uint64_t v17 = v58;
        int v31 = v57;
      }
      uint64_t v37 = *(void *)(a2 + 104);
      unsigned int v38 = *(_DWORD *)(a2 + 120);
      if (!v38) {
        goto LABEL_56;
      }
      unsigned int v39 = (v38 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      uint64_t v40 = v37 + 48 * v39;
      uint64_t v41 = *(void *)(v40 + 24);
      if (v41 != v28)
      {
        int v42 = 1;
        while (v41 != -4096)
        {
          unsigned int v43 = v39 + v42++;
          unsigned int v39 = v43 & (v38 - 1);
          uint64_t v40 = v37 + 48 * v39;
          uint64_t v41 = *(void *)(v40 + 24);
          if (v41 == v28) {
            goto LABEL_57;
          }
        }
LABEL_56:
        uint64_t v40 = v37 + 48 * v38;
      }
LABEL_57:
      unsigned int v61 = v34;
      if (v40 == v37 + 48 * v38 || (uint64_t v62 = *(const llvm::SCEV **)(v40 + 40)) == 0) {
        uint64_t v62 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v28);
      }
      int v63 = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, v62, v167);
      if (v63) {
        BOOL v64 = v63 == 1;
      }
      else {
        BOOL v64 = 0;
      }
      if (v63) {
        BOOL v65 = v63 != 1;
      }
      else {
        BOOL v65 = 1;
      }
      BOOL v66 = v63 != 0;
      unsigned int v34 = v61;
LABEL_78:
      if ((v30 & a7 & 1) == 0)
      {
        unsigned int v71 = (v31 + v169) >> v170;
        if (!v66)
        {
          LODWORD(v166) = v71 + v166;
          goto LABEL_109;
        }
        if (v65) {
          unsigned int v72 = (v31 + v169) >> v170;
        }
        else {
          unsigned int v72 = 0;
        }
        HIDWORD(v165) += v72;
        if (v35)
        {
          if (!v164) {
            goto LABEL_145;
          }
          unint64_t v73 = ~((unint64_t)(37 * v71) << 32)
              + 37 * v71
              + ((unint64_t)((v62 >> 4) ^ (v62 >> 9)) << 32);
          unint64_t v74 = (v73 ^ (v73 >> 22)) + ~((v73 ^ (v73 >> 22)) << 13);
          unint64_t v75 = (9 * (v74 ^ (v74 >> 8))) ^ ((9 * (v74 ^ (v74 >> 8))) >> 15);
          unsigned int v76 = (v164 - 1) & (((v75 + ~(v75 << 27)) >> 31) ^ (v75 + ~(v75 << 27)));
          uint64_t v77 = v159 + 16 * v76;
          unint64_t v78 = *(const llvm::SCEV **)v77;
          int v79 = *(_DWORD *)(v77 + 8);
          if (v62 == v78 && v71 == v79)
          {
LABEL_103:
            LODWORD(v165) = v165 - v71;
          }
          else
          {
            int v81 = 1;
            while (v78 != (const llvm::SCEV *)-4096 || v79 != -1)
            {
              unsigned int v82 = v76 + v81++;
              unsigned int v76 = v82 & (v164 - 1);
              uint64_t v83 = v159 + 16 * v76;
              unint64_t v78 = *(const llvm::SCEV **)v83;
              int v79 = *(_DWORD *)(v83 + 8);
              if (v62 == v78 && v71 == v79) {
                goto LABEL_103;
              }
            }
LABEL_145:
            v157 += v71;
          }
          BOOL v66 = 1;
          goto LABEL_79;
        }
        BOOL v66 = 1;
      }
LABEL_79:
      if (!v64 && v66 && v34 != 3 && v34 != 1)
      {
        if (v34)
        {
          int v70 = HIDWORD(v160);
          if (HIDWORD(v160) <= 1) {
            int v70 = 1;
          }
        }
        else
        {
          int v70 = 2;
        }
        HIDWORD(v160) = v70;
      }
LABEL_109:
      ++v16;
    }
    uint64_t v14 = v163 + 8;
  }
  while (v163 + 8 != v158);
  unsigned int v148 = v166 + HIDWORD(v165);
  if (v166 <= HIDWORD(v166)) {
    unsigned int v149 = HIDWORD(v166);
  }
  else {
    unsigned int v149 = v166;
  }
  unsigned int v150 = v157;
  if (v157 <= v165) {
    unsigned int v150 = v165;
  }
  if (v148 <= HIDWORD(v166) + (int)v160) {
    unsigned int v148 = HIDWORD(v166) + v160;
  }
  if (HIDWORD(v160))
  {
    a3 = v155;
    uint64_t v151 = v161;
    if (HIDWORD(v160) != 2 || v150 && v16 / v150 <= 0x95) {
      *uint64_t v155 = v153;
    }
    if (HIDWORD(v160) == 2) {
      unsigned int v149 = v150;
    }
    unsigned int v152 = v154;
    if (v148) {
LABEL_250:
    }
      a3[7] = v152 / v148;
  }
  else
  {
    a3 = v155;
    unsigned int v152 = v154;
    uint64_t v151 = v161;
    if (v148) {
      goto LABEL_250;
    }
  }
  if (v149)
  {
    a3[8] = (v152 << SBYTE4(v160)) / v149;
    goto LABEL_255;
  }
LABEL_254:
  *((unsigned char *)a3 + 40) = 0;
LABEL_255:
  MEMORY[0x1D25D9CD0](v151, 8);
  if (v177 != v176) {
    free(v177);
  }
}

unint64_t sub_1CD1110D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    BOOL v4 = (*(_DWORD *)(*a1 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
LABEL_5:
    unint64_t v6 = sub_1CB83544C(a2, v3) + 7;
    if (v5 == 1) {
    return v6 >> 3;
    }
  }
  uint64_t v8 = a1[1];
  if (v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(v8 + 24);
      if (!v10) {
        goto LABEL_5;
      }
      if (*(unsigned char *)(v10 + 16) != 89) {
        goto LABEL_5;
      }
      uint64_t v11 = *(void *)(v10 - 32);
      if (*(unsigned char *)(v11 + 16) != 16) {
        goto LABEL_5;
      }
      uint64_t v12 = (void *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u) {
        uint64_t v12 = (void *)*v12;
      }
      unsigned int v13 = *(_DWORD *)v12;
      if (v9 <= v13) {
        unsigned int v9 = v13;
      }
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8)
      {
        if (v9 != -1) {
          goto LABEL_21;
        }
        goto LABEL_5;
      }
    }
  }
  unsigned int v9 = 0;
LABEL_21:
  unint64_t v15 = sub_1CB83544C(a2, *(void *)(v3 + 24)) + 7;
  if (v14 == 1)
  {
    unint64_t v16 = v15;
    unint64_t v15 = v16;
  }
  return (v15 >> 3) + (v15 >> 3) * v9;
}

BOOL sub_1CD1111E0(uint64_t a1, uint64_t a2)
{
  v20[24] = *MEMORY[0x1E4F143B8];
  BOOL v4 = *(llvm::Module **)(a1 + 40);
  uint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v4, (uint64_t)&v18);
  if (v19)
  {
    int v5 = (uint64_t *)((char *)v18 + 16);
    uint64_t v6 = 24 * v19;
    while (1)
    {
      uint64_t v7 = *(void *)(*(v5 - 1) + 8);
      if (*(void *)v7 == 9)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        uint64_t v9 = *(unsigned __int8 *)(v7 + 32);
        if (*(void *)"PIC Level" == v8 && aPicLevel[8] == v9) {
          break;
        }
      }
      v5 += 3;
      v6 -= 24;
      if (!v6) {
        goto LABEL_12;
      }
    }
    uint64_t v11 = *v5;
  }
  else
  {
LABEL_12:
    uint64_t v11 = 0;
  }
  if (v18 == v20)
  {
    if (!v11) {
      goto LABEL_15;
    }
  }
  else
  {
    free(v18);
    if (!v11) {
      goto LABEL_15;
    }
  }
  uint64_t v16 = *(void *)(v11 + 128);
  uint64_t v17 = (void *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u) {
    uint64_t v17 = (void *)*v17;
  }
  if (*(_DWORD *)v17) {
    return 1;
  }
LABEL_15:
  int v12 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v12 && v12 != 255 && v12 != 8) {
    return v12 == 104 || ((*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FD) == 101;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 592))(a2, 101)) {
    return 1;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 592))(a2, 103);
  if (!v14) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 592))(a2, 104);
  }
  return v14 != 0;
}

void sub_1CD1113FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v26 = v28;
  uint64_t v27 = 0x500000000;
  if (v4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = v4;
    do
    {
      uint64_t v9 = *(void *)(v9 + 8);
      --v8;
    }
    while (v9);
    if (v8 <= 0xFFFFFFFFFFFFFFFALL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v10 = v28;
    do
    {
      *v10++ = *(void *)(v4 + 24);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    unsigned int v11 = -(int)v8;
    LODWORD(v27) = -(int)v8;
    do
    {
      uint64_t v12 = *((void *)v26 + v11 - 1);
      uint64_t v13 = v11 - 1;
      LODWORD(v27) = v13;
      unsigned int v14 = *(unsigned __int8 *)(v12 + 16);
      if (v14 < 0x1C)
      {
        if (v14 == 5)
        {
          uint64_t v19 = *(void *)(v12 + 8);
          if (v19)
          {
            uint64_t v20 = 0;
            uint64_t v21 = v19;
            do
            {
              ++v20;
              uint64_t v21 = *(void *)(v21 + 8);
            }
            while (v21);
          }
          else
          {
            uint64_t v20 = 0;
          }
          if (v20 + (unint64_t)v13 > HIDWORD(v27)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v19)
          {
            uint64_t v22 = (char *)v26 + 8 * v13;
            do
            {
              *v22++ = *(void *)(v19 + 24);
              uint64_t v19 = *(void *)(v19 + 8);
            }
            while (v19);
          }
          unsigned int v11 = v13 + v20;
          LODWORD(v27) = v11;
          continue;
        }
      }
      else
      {
        uint64_t v25 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(*(void *)(v12 + 40) + 56));
        sub_1CC813344(a3, &v25);
        if (!*a4)
        {
          int v15 = *(unsigned __int8 *)(v12 + 16);
          if ((v15 - 84) < 2)
          {
LABEL_22:
            *a4 = 1;
          }
          else if (v15 == 77)
          {
            uint64_t v23 = *(void *)(v12 + 8);
            if (v23)
            {
              unsigned int v11 = v27;
              do
              {
                if (v11 >= HIDWORD(v27)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v26 + v11) = *(void *)(v23 + 24);
                unsigned int v11 = v27 + 1;
                LODWORD(v27) = v27 + 1;
                uint64_t v23 = *(void *)(v23 + 8);
              }
              while (v23);
              continue;
            }
          }
          else if (v15 == 62)
          {
            uint64_t v16 = 32 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
            while (v16)
            {
              uint64_t v17 = *(void *)(v12 + v16);
              v16 += 32;
              if (v17) {
                BOOL v18 = *(unsigned char *)(v17 + 16) == 16;
              }
              else {
                BOOL v18 = 0;
              }
              if (!v18) {
                goto LABEL_22;
              }
            }
            *a4 = 0;
            uint64_t v24 = *(void *)(v12 + 8);
            if (v24)
            {
              unsigned int v11 = v27;
              do
              {
                if (v11 >= HIDWORD(v27)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v26 + v11) = *(void *)(v24 + 24);
                unsigned int v11 = v27 + 1;
                LODWORD(v27) = v27 + 1;
                uint64_t v24 = *(void *)(v24 + 8);
              }
              while (v24);
              continue;
            }
          }
        }
      }
      unsigned int v11 = v27;
    }
    while (v11);
  }
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t sub_1CD111720(int a1)
{
  uint64_t result = 0x4000000010;
  if ((a1 - 1) >= 0xC)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCFB548, memory_order_acquire) & 1) == 0)
    {
      int v3 = __cxa_guard_acquire(&qword_1EBCFB548);
      uint64_t result = 0x4000000010;
      if (v3)
      {
        byte_1EBCFB532 = 0;
        __cxa_guard_release(&qword_1EBCFB548);
        uint64_t result = 0x4000000010;
      }
    }
    if (!byte_1EBCFB532) {
      return 0x8000000020;
    }
  }
  return result;
}

unint64_t sub_1CD1117B0(llvm::GlobalValue *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v96 = HIDWORD(a4);
  int v5 = *(_DWORD *)(*(void *)a1 + 8) >> 8;
  if (v5 == 75 || v5 == 5)
  {
    uint64_t v94 = (llvm::Module *)*((void *)a1 + 5);
    uint64_t v7 = (uint64_t *)*((void *)v94 + 14);
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v8 <= 0x1C) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = 29;
    }
    uint64_t v11 = *((unsigned int *)v7 + 2);
    if (!v11) {
      goto LABEL_36;
    }
    uint64_t v12 = 0;
    int v13 = 0;
    do
      int v13 = 33 * v13 + aAgcRiaRayDataD[v12++];
    while (v10 != v12);
    uint64_t v14 = *v7;
    uint64_t v15 = *v7 + 8 * v11 + 8;
    int v16 = 1;
    int v17 = v13;
    while (1)
    {
      uint64_t v18 = v17 & (v11 - 1);
      uint64_t v19 = *(void **)(v14 + 8 * v18);
      if (v19 != (void *)-8)
      {
        if (!v19) {
          goto LABEL_36;
        }
        if (*(_DWORD *)(v15 + 4 * v18) == v13
          && v10 == *v19
          && !memcmp("agc.ria.ray_data_driver_start", (char *)v19 + *((unsigned int *)v7 + 5), v10))
        {
          break;
        }
      }
      int v17 = v16 + v18;
      ++v16;
    }
    if (v18 != -1
      && (int)v18 != v11
      && (uint64_t v29 = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8)) != 0
      && *(unsigned char *)(v29 + 16) == 3
      && (*(_DWORD *)(v29 + 32) & 0xFu) - 7 > 1)
    {
      int v30 = 0;
    }
    else
    {
LABEL_36:
      int v30 = 1;
    }
    Section = llvm::GlobalValue::getSection(a1);
    *((unsigned char *)&v102.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v102, "agx.");
    if (!Section)
    {
      std::string::size_type v36 = 0;
      uint64_t v37 = 0;
      char v38 = 0;
      long long __dst = 0;
      size_t v100 = 0;
      unint64_t v101 = 0;
      goto LABEL_48;
    }
    size_t v33 = v32;
    if (v32 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    unsigned int v34 = Section;
    if (v32 >= 0x17)
    {
      uint64_t v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17) {
        uint64_t v39 = v32 | 7;
      }
      uint64_t v40 = v39 + 1;
      p_dst = (void **)operator new(v39 + 1);
      size_t v100 = v33;
      unint64_t v101 = v40 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v101) = v32;
      p_dst = (void **)&__dst;
      if (!v32) {
        goto LABEL_47;
      }
    }
    memmove(p_dst, v34, v33);
LABEL_47:
    *((unsigned char *)p_dst + v33) = 0;
    char v38 = HIBYTE(v101);
    uint64_t v37 = (const std::string::value_type *)__dst;
    std::string::size_type v36 = v100;
LABEL_48:
    BOOL v41 = v38 < 0;
    if (v38 >= 0) {
      int v42 = (const std::string::value_type *)&__dst;
    }
    else {
      int v42 = v37;
    }
    std::string::size_type v43 = v38 & 0x7F;
    if (v41) {
      std::string::size_type v44 = v36;
    }
    else {
      std::string::size_type v44 = v43;
    }
    unsigned int v45 = std::string::append(&v102, v42, v44);
    std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v97, ".offset");
    std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
    long long v103 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    std::string::size_type v104 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v101) < 0) {
      operator delete(__dst);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    __int16 v98 = 260;
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v94, (const char **)&v97.__r_.__value_.__l.__data_);
    uint64_t v50 = NamedMetadata;
    if (NamedMetadata)
    {
      AggregateElement = *(void **)(*(void *)(***(void ***)(NamedMetadata + 48)
                                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                                    + 128);
      if (AggregateElement) {
        BOOL v52 = *((unsigned char *)AggregateElement + 16) == 16;
      }
      else {
        BOOL v52 = 0;
      }
      if (!v52) {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
      }
      int v55 = (_DWORD *)AggregateElement[3];
      uint64_t v53 = AggregateElement + 3;
      uint64_t v54 = v55;
      if (v53[2] < 0x41u) {
        uint64_t v54 = v53;
      }
      unsigned int v56 = *v54 << 10;
    }
    else
    {
      unsigned int v56 = 0;
    }
    if (SHIBYTE(v104) < 0)
    {
      operator delete((void *)v103);
      if (!v50) {
        goto LABEL_74;
      }
    }
    else if (!v50)
    {
LABEL_74:
      unint64_t v57 = sub_1CD111720(v96);
      if (v30)
      {
        unint64_t v58 = HIDWORD(v57);
        int v59 = HIDWORD(v57) + 5680;
        uint64_t v60 = llvm::GlobalValue::getSection(a1);
        switch(v61)
        {
          case 21:
            if (*(void *)v60 == 0x766972642E616972
              && *((void *)v60 + 1) == 0x6D617261705F7265
              && *(void *)(v60 + 13) == 0x73726574656D6172)
            {
              int v82 = v58 + 5664;
              goto LABEL_160;
            }
            uint64_t v87 = *(void *)(v60 + 13);
            BOOL v88 = *(void *)v60 == 0x5F7961722E616972 && *((void *)v60 + 1) == 0x6465646E65747865;
            unsigned int v89 = 1600415076;
            break;
          case 19:
            uint64_t v87 = *(void *)(v60 + 11);
            BOOL v88 = *(void *)v60 == 0x5F7961722E616972 && *((void *)v60 + 1) == 0x645F726576697264;
            unsigned int v89 = 1601332598;
            break;
          case 17:
            if (*(void *)v60 != 0x656B6F742E616972
              || *((void *)v60 + 1) != 0x7265666675625F6ELL
              || v60[16] != 115)
            {
              if (*(void *)v60 != 0x5F7961722E616972
                || *((void *)v60 + 1) != 0x7461645F65726F63
                || v60[16] != 97)
              {
                uint64_t v66 = *(void *)v60 ^ 0x5F7961722E616972 | *((void *)v60 + 1) ^ 0x7461645F72657375 | *((unsigned __int8 *)v60 + 16) ^ 0x61;
                int v67 = v58 + 7984;
                goto LABEL_120;
              }
              int v82 = 32;
LABEL_160:
              unsigned int v56 = v82 << 10;
              return a2 + v56;
            }
LABEL_153:
            int v82 = 0;
            goto LABEL_160;
          default:
            goto LABEL_152;
        }
        uint64_t v90 = v89 | 0x6174616400000000;
        if (v88 && v87 == v90)
        {
          int v82 = v59;
          goto LABEL_160;
        }
        goto LABEL_152;
      }
      uint64_t v68 = llvm::GlobalValue::getSection(a1);
      if (v69 == 19)
      {
        BOOL v70 = *(void *)v68 == 0x5F7961722E616972 && *((void *)v68 + 1) == 0x645F726576697264;
        if (v70 && *(void *)(v68 + 11) == 0x617461645F726576) {
          goto LABEL_164;
        }
      }
      if ((unsigned int v72 = llvm::GlobalValue::getSection(a1), v73 == 17)
        && (*(void *)v72 == 0x5F7961722E616972 ? (BOOL v74 = *((void *)v72 + 1) == 0x7461645F72657375) : (BOOL v74 = 0),
            v74 ? (BOOL v75 = v72[16] == 97) : (BOOL v75 = 0),
            v75)
        || (unsigned int v76 = llvm::GlobalValue::getSection(a1), v77 == 17)
        && (*(void *)v76 == 0x657478655F796172 ? (BOOL v78 = *((void *)v76 + 1) == 0x7461645F6465646ELL) : (BOOL v78 = 0),
            v78 ? (BOOL v79 = v76[16] == 97) : (BOOL v79 = 0),
            v79))
      {
LABEL_164:
        llvm::report_fatal_error((llvm *)"ria.ray_driver_data/ray_user_data/ray_extended_data cannot be a constant address", (const llvm::Twine *)1);
      }
      BOOL v80 = llvm::GlobalValue::getSection(a1);
      if (v81 == 17)
      {
        if (*(void *)v80 != 0x656B6F742E616972 || *((void *)v80 + 1) != 0x7265666675625F6ELL || v80[16] != 115)
        {
          int v82 = 32;
          if (*(void *)v80 ^ 0x5F7961722E616972 | *((void *)v80 + 1) ^ 0x7461645F65726F63 | *((unsigned __int8 *)v80 + 16) ^ 0x61) {
            int v82 = 0;
          }
          goto LABEL_160;
        }
        goto LABEL_153;
      }
      if (v81 == 21)
      {
        uint64_t v66 = *(void *)v80 ^ 0x766972642E616972 | *((void *)v80 + 1) ^ 0x6D617261705F7265 | *(void *)(v80 + 13) ^ 0x73726574656D6172;
        int v67 = 24;
LABEL_120:
        if (v66) {
          int v82 = 0;
        }
        else {
          int v82 = v67;
        }
        goto LABEL_160;
      }
LABEL_152:
      int v82 = 0;
      goto LABEL_160;
    }
    return a2 + v56;
  }
  __int16 v20 = a4;
  int v22 = (*(uint64_t (**)(uint64_t, llvm::GlobalValue *))(*(void *)a3 + 400))(a3, a1);
  uint64_t v24 = v23;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 336))(a3);
  unsigned int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 24))(v25, v24);
  unint64_t v27 = v26 * v22 + a2;
  if (v24 < 3)
  {
    v27 /= v26;
  }
  else if ((v24 - 15) >= 2)
  {
    if (v24 == 17)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCFB538, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCFB538))
      {
        byte_1EBCFB530 = 0;
        __cxa_guard_release(&qword_1EBCFB538);
      }
      uint64_t v28 = 65600;
      if (!byte_1EBCFB530) {
        uint64_t v28 = 0x10000;
      }
      v27 += v28;
    }
  }
  else if ((v20 & 0x100) != 0)
  {
    v27 /= v26;
  }
  return v27;
}

uint64_t sub_1CD112054(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 112);
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0x14) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 21;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aAgcRiaRayUserD_0[v6++];
  while (v4 != v6);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 8 * v5 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v5 - 1);
    int v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v4 == *v13
        && !memcmp("agc.ria.ray_user_data", (char *)v13 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1) {
    return 0;
  }
  if ((int)v12 == v5) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8);
  if (!result || *(unsigned char *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD112198(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 112);
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0x1A) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 27;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aAgcRiaRayDataU[v6++];
  while (v4 != v6);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 8 * v5 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v5 - 1);
    int v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v4 == *v13
        && !memcmp("agc.ria.ray_data_user_bound", (char *)v13 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1) {
    return 0;
  }
  if ((int)v12 == v5) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8);
  if (!result || *(unsigned char *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD1122DC(uint64_t a1)
{
  unsigned int v2 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 112);
  unsigned int v3 = *((_DWORD *)v2 + 8);
  if (v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v3 <= 0x1A) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = 27;
  }
  uint64_t v20 = *((unsigned int *)v2 + 2);
  if (!v20) {
    goto LABEL_20;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aAgcRiaRayDataU[v6++];
  while (v5 != v6);
  uint64_t v8 = *v2;
  uint64_t v9 = *v2 + 8 * v20 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v20 - 1);
    int v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v5 == *v13
        && !memcmp("agc.ria.ray_data_user_bound", (char *)v13 + *((unsigned int *)v2 + 5), v5))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1
    || (int)v12 == v20
    || (uint64_t v14 = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8)) == 0
    || *(unsigned char *)(v14 + 16) != 3
    || (*(_DWORD *)(v14 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_20:
    uint64_t v14 = 0;
  }
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 400))(a1, v14);
  uint64_t v17 = v16;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v18 + 24))(v18, v17) * v15;
}

uint64_t sub_1CD1124FC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 112);
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0x1C) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 29;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aAgcRiaRayDataD[v6++];
  while (v4 != v6);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 8 * v5 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v5 - 1);
    int v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v4 == *v13
        && !memcmp("agc.ria.ray_data_driver_start", (char *)v13 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1) {
    return 0;
  }
  if ((int)v12 == v5) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8);
  if (!result || *(unsigned char *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1) {
    return 0;
  }
  return result;
}

void sub_1CD112640(uint64_t a1)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 != a1 + 40)
  {
    uint64_t v3 = v2 - 24;
    if (!v2) {
      uint64_t v3 = 0;
    }
    if (*(unsigned char *)(v3 + 16) == 83)
    {
      for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v6 = *(void *)(i + 24);
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
        if (v6) {
          BOOL v8 = v7 >= 0x1C;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8 && v7 - 29 < 0xB) {
          break;
        }
      }
      unsigned int v26 = v28;
      uint64_t v27 = 0x800000000;
      sub_1CBF846A4((uint64_t)&v26, i, 0);
      for (uint64_t j = *(void *)(a1 + 48); j != v1; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v11 = j - 24;
        if (!j) {
          uint64_t v11 = 0;
        }
        if (*(unsigned char *)(v11 + 16) != 83)
        {
          unsigned int v12 = *(unsigned __int8 *)(j - 8) - 38;
          BOOL v13 = v12 > 0x38;
          uint64_t v14 = (1 << v12) & 0x100060000000001;
          if (v13 || v14 == 0) {
            uint64_t v1 = j;
          }
          else {
            uint64_t v1 = *(void *)(j + 8);
          }
          break;
        }
      }
      while (v2 != v1)
      {
        uint64_t v16 = v2 - 24;
        if (!v2) {
          uint64_t v16 = 0;
        }
        int v17 = *(unsigned __int8 *)(v16 + 16);
        uint64_t v18 = v17 == 83 ? (_DWORD *)v16 : 0;
        if (!v2 || v17 != 83) {
          break;
        }
        uint64_t v2 = *(void *)(v2 + 8);
        int v19 = v18[5] & 0x7FFFFFF;
        if (v19)
        {
          for (unsigned int k = 0; k != v19; ++k)
          {
            int v21 = v18[5];
            if ((v21 & 0x40000000) != 0) {
              int v22 = (_DWORD *)*((void *)v18 - 1);
            }
            else {
              int v22 = &v18[-8 * (v21 & 0x7FFFFFF)];
            }
            if (v27)
            {
              uint64_t v23 = *(void *)&v22[8 * v18[15] + 2 * k];
              uint64_t v24 = 8 * v27;
              uint64_t v25 = (char *)v26;
              while (*(void *)v25 != v23)
              {
                v25 += 8;
                v24 -= 8;
                if (!v24)
                {
                  uint64_t v25 = (char *)v26 + 8 * v27;
                  break;
                }
              }
            }
            else
            {
              uint64_t v25 = (char *)v26;
            }
            if (v27 == (v25 - (unsigned char *)v26) >> 3)
            {
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)v18, k--, 1);
              --v19;
            }
          }
        }
      }
      if (v26 != v28) {
        free(v26);
      }
    }
  }
}

uint64_t llvm::AGXIR::getShaderID(llvm::AGXIR *this, const llvm::Module *a2)
{
  uint64_t v18 = "agxcompiler.config";
  __int16 v19 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, &v18);
  if (NamedMetadata && (uint64_t v3 = *(uint64_t **)(NamedMetadata + 48), v4 = *((unsigned int *)v3 + 2), v4))
  {
    uint64_t v5 = *v3;
    while (1)
    {
      uint64_t v6 = (void *)(*(void *)v5 - 8 * *(unsigned int *)(*(void *)v5 + 8));
      if (!*(unsigned char *)*v6)
      {
        unsigned int v7 = *(void **)(*v6 + 8);
        if (*v7 == 16)
        {
          uint64_t v9 = v7[3];
          uint64_t v8 = v7[4];
          if (v9 == 0x2E74736575716552 && v8 == 0x4449726564616853)
          {
            uint64_t v11 = v6[1];
            if (*(unsigned char *)v11 == 1)
            {
              uint64_t v12 = *(void *)(v11 + 128);
              if (*(unsigned char *)(v12 + 16) == 16) {
                break;
              }
            }
          }
        }
      }
      v5 += 8;
      if (!--v4) {
        goto LABEL_20;
      }
    }
    unsigned int v13 = *(_DWORD *)(v12 + 32);
    if (v13 > 0x40) {
      uint64_t v14 = **(void **)(v12 + 24);
    }
    else {
      uint64_t v14 = (uint64_t)(*(void *)(v12 + 24) << -(char)v13) >> -(char)v13;
    }
    uint64_t v15 = v14 & 0xFFFFFF00;
    uint64_t v16 = v14;
    uint64_t v4 = 0x100000000;
  }
  else
  {
    uint64_t v4 = 0;
LABEL_20:
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  return v16 | v4 | v15;
}

uint64_t sub_1CD112980@<X0>(llvm::Module *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long __dst = "agxcompiler.config";
  __int16 v24 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, (const char **)&__dst);
  if (result)
  {
    uint64_t v4 = *(uint64_t **)(result + 48);
    uint64_t v5 = *((unsigned int *)v4 + 2);
    if (v5)
    {
      uint64_t v6 = *v4;
      while (1)
      {
        unsigned int v7 = (void *)(*(void *)v6 - 8 * *(unsigned int *)(*(void *)v6 + 8));
        if (!*(unsigned char *)*v7)
        {
          uint64_t v8 = *(void *)(*v7 + 8);
          if (*(void *)v8 == 18)
          {
            uint64_t v9 = *(void *)(v8 + 24);
            uint64_t v10 = *(void *)(v8 + 32);
            int v11 = *(unsigned __int16 *)(v8 + 40);
            BOOL v12 = v9 == 0x2E74736575716552 && v10 == 0x7954726564616853;
            if (v12 && v11 == 25968)
            {
              uint64_t v14 = v7[1];
              if (!*(unsigned char *)v14) {
                break;
              }
            }
          }
        }
        v6 += 8;
        if (!--v5) {
          goto LABEL_27;
        }
      }
      uint64_t v15 = *(unint64_t **)(v14 + 8);
      unint64_t v18 = *v15;
      int v17 = v15 + 3;
      size_t v16 = v18;
      if (v18 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v16 >= 0x17)
      {
        uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v20 = v16 | 7;
        }
        uint64_t v21 = v20 + 1;
        p_dst = (long long *)operator new(v20 + 1);
        *((void *)&__dst + 1) = v16;
        unint64_t v23 = v21 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v23) = v16;
        p_dst = &__dst;
        if (!v16) {
          goto LABEL_25;
        }
      }
      uint64_t result = (uint64_t)memmove(p_dst, v17, v16);
LABEL_25:
      *((unsigned char *)p_dst + v16) = 0;
      *(_OWORD *)a2 = __dst;
      *(void *)(a2 + 16) = v23;
      *(unsigned char *)(a2 + 24) = 1;
      return result;
    }
  }
LABEL_27:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t llvm::AGXIR::getForwardProgressMode(llvm::AGXIR *this, const llvm::Module *a2)
{
  __int16 v19 = "agxcompiler.config";
  __int16 v20 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, &v19);
  if (!NamedMetadata || (uint64_t v3 = *(uint64_t **)(NamedMetadata + 48), v4 = *((unsigned int *)v3 + 2), !v4))
  {
LABEL_14:
    uint64_t v8 = 0;
    uint64_t v4 = 0;
    return v4 | v8;
  }
  for (uint64_t i = *v3; ; i += 8)
  {
    uint64_t v6 = *(void *)i - 8 * *(unsigned int *)(*(void *)i + 8);
    if (!**(unsigned char **)v6)
    {
      unsigned int v7 = *(void **)(*(void *)v6 + 8);
      if (*v7 == 35)
      {
        uint64_t v17 = *(void *)i - 8 * *(unsigned int *)(*(void *)i + 8);
        uint64_t v18 = v4;
        uint64_t v16 = i;
        int v10 = memcmp(v7 + 3, "Request.Options.ForwardProgressMode", 0x23uLL);
        uint64_t i = v16;
        uint64_t v4 = v18;
        if (!v10)
        {
          uint64_t v11 = *(void *)(v17 + 8);
          if (!*(unsigned char *)v11) {
            break;
          }
        }
      }
    }
    if (!--v4)
    {
      uint64_t v8 = 0;
      return v4 | v8;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (*(void *)v12 != 17)
  {
    if (*(void *)v12 == 4 && *(_DWORD *)(v12 + 24) == 1801545047)
    {
      uint64_t v4 = 0;
      uint64_t v8 = 0x100000000;
      return v4 | v8;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0x53494D4447726F75;
  unint64_t v14 = bswap64(*(void *)(v12 + 24));
  if (v14 == 0x53494D4447726F75
    && (unint64_t v13 = 0x70506172616C6C65, v14 = bswap64(*(void *)(v12 + 32)), v14 == 0x70506172616C6C65))
  {
    int v15 = *(unsigned __int8 *)(v12 + 40) - 108;
  }
  else if (v14 < v13)
  {
    int v15 = -1;
  }
  else
  {
    int v15 = 1;
  }
  uint64_t v4 = v15 == 0;
  uint64_t v8 = v4 << 32;
  return v4 | v8;
}

void *sub_1CD112C68(llvm::Module *a1, unsigned int a2, int a3)
{
  _OWORD v24[2] = *MEMORY[0x1E4F143B8];
  sub_1CD1157F4(a1, a3, (uint64_t)v20);
  uint64_t v6 = *(uint64_t **)a1;
  unsigned int v19 = 32;
  unint64_t v18 = a2;
  if (a3) {
    size_t v7 = 18;
  }
  else {
    size_t v7 = 14;
  }
  if (a3) {
    uint64_t v8 = "min-temp-reg-limit";
  }
  else {
    uint64_t v8 = "temp-reg-limit";
  }
  v24[0] = llvm::MDString::get(v6, (unsigned __int8 *)v8, v7);
  int v10 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)v6, (llvm::LLVMContext *)&v18, v9);
  v24[1] = llvm::ValueAsMetadata::get(v10, v11);
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(a1, "agx.unified.store.limits", 0x18uLL);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v6, v24, 2, 0, 1);
  unint64_t v14 = Impl;
  if (v22)
  {
    uint64_t result = sub_1CC19E068((unsigned __int8 **)(**(void **)(inserted + 48) + 8 * v21), Impl);
  }
  else
  {
    unint64_t v23 = Impl;
    uint64_t v16 = *(void *)(inserted + 48);
    uint64_t v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= *(_DWORD *)(v16 + 12))
    {
      uint64_t result = (void *)sub_1CC608328(v16, &v23);
    }
    else
    {
      uint64_t result = (void *)(*(void *)v16 + 8 * v17);
      *uint64_t result = v14;
      if (v14)
      {
        uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, v14, 2);
        LODWORD(v17) = *(_DWORD *)(v16 + 8);
      }
      *(_DWORD *)(v16 + 8) = v17 + 1;
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = (void *)v18;
    if (v18) {
      return (void *)MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CD112DF4(int a1)
{
  int v1 = a1 - 1282;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 256:
    case 257:
    case 258:
    case 259:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 336:
    case 337:
    case 338:
    case 339:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 362:
    case 363:
    case 372:
    case 373:
    case 374:
    case 375:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 398:
    case 399:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CD11346C(int a1)
{
  char v2 = sub_1CD112DF4(a1);
  BOOL v3 = (a1 - 2449) < 2 || (a1 - 1990) < 2;
  return (v2 & 1) != 0 || v3;
}

uint64_t sub_1CD1134B8(uint64_t a1, int a2)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x1000000000;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    LODWORD(v4) = 0;
    do
    {
      if (v4 >= HIDWORD(v17)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v16 + v4) = v2;
      uint64_t v4 = (v17 + 1);
      LODWORD(v17) = v17 + 1;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
    while (v4)
    {
      uint64_t v5 = (void *)*((void *)v16 + v4 - 1);
      uint64_t v4 = (v4 - 1);
      LODWORD(v17) = v4;
      uint64_t v6 = v5[3];
      int v7 = *(unsigned __int8 *)(v6 + 16);
      if (v6) {
        BOOL v8 = v7 == 5;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        int v10 = *(unsigned __int16 *)(v6 + 18);
        if (v10 == 49 || v10 == 34)
        {
          for (uint64_t i = *(void *)(v6 + 8); i; uint64_t i = *(void *)(i + 8))
          {
            if (v4 >= HIDWORD(v17)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v16 + v4) = i;
            uint64_t v4 = (v17 + 1);
            LODWORD(v17) = v17 + 1;
          }
        }
      }
      else if (v6 && v7 == 77)
      {
        for (uint64_t j = *(void *)(v6 + 8); j; uint64_t j = *(void *)(j + 8))
        {
          if (v4 >= HIDWORD(v17)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v16 + v4) = j;
          uint64_t v4 = (v17 + 1);
          LODWORD(v17) = v17 + 1;
        }
      }
      else if (v7 == 84)
      {
        uint64_t v12 = *(void *)(v6 - 32);
        if (v12)
        {
          if (!*(unsigned char *)(v12 + 16)
            && *(void *)(v12 + 24) == *(void *)(v6 + 72)
            && (*(unsigned char *)(v12 + 33) & 0x20) != 0)
          {
            int v13 = *(_DWORD *)(v12 + 36);
            if (sub_1CB859A14(v13) || (v13 - 1682) <= 0x8B)
            {
              uint64_t v4 = 1;
              if (!a2) {
                break;
              }
              llvm::SampleInfo::SampleInfo((uint64_t)v15, v13, 1);
              if (*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * v15[9]) == *v5) {
                break;
              }
              uint64_t v4 = v17;
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v16 != v18) {
    free(v16);
  }
  return v4;
}

uint64_t sub_1CD11373C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1) + 4);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 440))(a2);
  for (uint64_t i = *(void *)(a3 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == a3 + 8)
    {
      LODWORD(v9) = 0;
      return (v5 - (v6 + v9));
    }
    uint64_t v8 = i - 56;
    if (!i) {
      uint64_t v8 = 0;
    }
    if ((*(_DWORD *)(*(void *)v8 + 8) & 0xFFFFFF00) != 0x200 || (*(unsigned char *)(v8 + 80) & 2) != 0) {
      continue;
    }
    if (!i || *(unsigned char *)(v8 + 16) != 3) {
      break;
    }
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0) {
      goto LABEL_17;
    }
LABEL_14:
    ;
  }
  if (!*(unsigned char *)(v8 + 16) && *(void *)(v8 + 72) == v8 + 72 && (*(unsigned char *)(v8 + 34) & 0x80) == 0) {
    goto LABEL_14;
  }
LABEL_17:
  uint64_t v11 = *(unsigned int *)(a3 + 512);
  uint64_t v12 = *(void *)(a3 + 504);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + 504);
    unint64_t v13 = *(unsigned int *)(a3 + 512);
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = v12 + 16 * (v13 >> 1);
      unsigned int v16 = *(_DWORD *)(v15 + 8);
      uint64_t v17 = v15 + 16;
      v13 += ~(v13 >> 1);
      if (v16 < 2) {
        uint64_t v12 = v17;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  if (v12 == *(void *)(a3 + 504) + 16 * v11 || *(_DWORD *)(v12 + 8) != 2) {
    uint64_t v12 = *(void *)(a3 + 504);
  }
  unint64_t v9 = ((unint64_t)*(unsigned int *)(v12 + 4) + 7) >> 3;
  return (v5 - (v6 + v9));
}

uint64_t sub_1CD1138B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 128))(&v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 136))(&v20, a1, a2);
  uint64_t v7 = v20;
  uint64_t v6 = v21;
  if (v21)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v21 + 16))(&v21, v21);
    uint64_t v8 = v21;
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(&v21, v7);
    uint64_t v9 = v21;
  }
  else
  {
    uint64_t v9 = 0;
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9) & 1) == 0)
  {
    int v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    unint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 400))(a1, *v10);
    int v12 = v11;
    uint64_t v14 = v13;
    unint64_t v15 = HIDWORD(v11);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v14);
    unsigned int v18 = (v15 + v17 - 1) / v17 + v12;
    if (a3 <= v18) {
      a3 = v18;
    }
    else {
      a3 = a3;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a3;
}

uint64_t sub_1CD113BD0(llvm::Module *a1, uint64_t a2)
{
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 0;
  BOOL v41 = 0;
  uint64_t v42 = 0;
  std::string __p = 0;
  sub_1CD0FEC94(a1, (uint64_t)v38);
  sub_1CD0FEFC4(a1, (uint64_t)v38, 0);
  uint64_t v4 = (void *)((char *)a1 + 8);
  for (uint64_t i = (void *)*((void *)a1 + 2); i != v4; uint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v6 = (uint64_t)(i - 7);
    }
    else {
      uint64_t v6 = 0;
    }
    if ((*(unsigned char *)(v6 + 34) & 0x40) == 0) {
      continue;
    }
    uint64_t v7 = ***(void ***)v6;
    uint64_t v43 = v6;
    int v8 = *(_DWORD *)(v7 + 2520);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 2504);
      int v10 = v8 - 1;
      unsigned int v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
      int v12 = (void *)(v9 + 24 * v11);
      uint64_t v13 = *v12;
      if (*v12 == v6) {
        goto LABEL_8;
      }
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -8192;
        }
        if (v16) {
          uint64_t v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        int v12 = (void *)(v9 + 24 * v11);
        uint64_t v13 = *v12;
        if (*v12 == v6) {
          goto LABEL_8;
        }
      }
      if (v14) {
        unsigned int v18 = v14;
      }
      else {
        unsigned int v18 = v12;
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    int v12 = sub_1CC5BF31C(v7 + 2504, (uint64_t)&v43, &v43, v18);
    uint64_t v19 = v43;
    v12[1] = 0;
    void v12[2] = 0;
    *int v12 = v19;
LABEL_8:
    if (v12[2] == 17)
    {
      uint64_t v20 = (uint64_t *)v12[1];
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      int v23 = *((unsigned __int8 *)v20 + 16);
      BOOL v24 = v21 == 0x705F726576697264 && v22 == 0x726574656D617261;
      if (v24 && v23 == 115)
      {
        uint64_t v43 = v6;
        uint64_t v26 = sub_1CD0FEDE4((uint64_t)v38, &v43);
        uint64_t v27 = *(void *)(*(void *)v26 - 8 * *(unsigned int *)(*(void *)v26 + 8) + 8);
        if (v27)
        {
          if (*(unsigned char *)v27 == 1)
          {
            uint64_t v28 = *(void *)(v27 + 128);
            if (*(unsigned char *)(v28 + 16) == 16)
            {
              uint64_t v29 = (void *)(v28 + 24);
              if (*(_DWORD *)(v28 + 32) >= 0x41u) {
                uint64_t v29 = (void *)*v29;
              }
              if (*v29 == 43)
              {
                uint64_t v30 = 0;
                int v31 = 0;
                unsigned int v32 = 0;
                goto LABEL_40;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 24))(v33, 17);
  uint64_t v35 = sub_1CD1138B8(a2, 13, 0);
  int v36 = sub_1CD1138B8(a2, 12, v35) * v34;
  unsigned int v32 = v36 & 0xFFFFFF00;
  int v31 = v36;
  uint64_t v30 = 0x100000000;
LABEL_40:
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v38[0], 8);
  return v30 | v32 | v31;
}

void sub_1CD113E98(llvm::Loop *a1)
{
}

void sub_1CD113EF4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = xmmword_1CFAC4320;
  uint64_t v19 = 0;
  Dl_info __s = v16;
  long long v15 = xmmword_1CDC7F9D0;
  char v3 = *(unsigned char *)(a1 + 23);
  BOOL v4 = v3 < 0;
  if (v3 >= 0) {
    int v5 = (int *)a1;
  }
  else {
    int v5 = *(int **)a1;
  }
  size_t v6 = v3 & 0x7F;
  if (v4) {
    size_t v7 = *(void *)(a1 + 8);
  }
  else {
    size_t v7 = v6;
  }
  llvm::MD5::update((int *)&v18, v5, v7);
  llvm::MD5::final((int *)&v18, v17);
  llvm::MD5::stringifyResult((unsigned __int8 *)v17, &__s);
  if ((unint64_t)(v15 + 1) > *((void *)&v15 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  __s[v15] = 0;
  int v8 = __s;
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = operator new(v11 + 1);
    a2[1] = v10;
    a2[2] = v12 | 0x8000000000000000;
    *a2 = v13;
    a2 = v13;
    goto LABEL_16;
  }
  *((unsigned char *)a2 + 23) = v9;
  if (v9) {
LABEL_16:
  }
    memmove(a2, v8, v10);
  *((unsigned char *)a2 + v10) = 0;
  if (__s != v16) {
    free(__s);
  }
}

void *sub_1CD114070@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v11 = a2;
  int v10 = 0;
  char v3 = &unk_1F2646F30;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t result = llvm::Module::print(a1, (llvm::raw_ostream *)&v3, 0, 0, 0);
  char v3 = &unk_1F2646B98;
  if (v10 == 1)
  {
    uint64_t result = v5;
    if (v5) {
      return (void *)MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924);
    }
  }
  return result;
}

uint64_t sub_1CD114134(llvm::Instruction *this, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)this + 16);
  if (!this || v5 < 0x1C)
  {
    uint64_t result = 1;
    if (this && v5 <= 3)
    {
      int v9 = *(_DWORD *)(*(void *)this + 8) >> 8;
      return v9 != 64 && v9 != 2;
    }
    return result;
  }
  uint64_t result = 1;
  if (v5 <= 63)
  {
    if (v5 == 59) {
      return result;
    }
    if (v5 == 60)
    {
      uint64_t v12 = *((void *)this - 4);
      unsigned int v13 = *(_DWORD *)(*(void *)v12 + 8);
      if ((v13 & 0xFE) == 0x12) {
        unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)v12 + 16) + 8);
      }
      if ((v13 & 0xFFFFFF00) == 0x300)
      {
        if (!a4) {
          return 0;
        }
        uint64_t v14 = (unsigned int *)a4 + 5;
        if (*((_DWORD *)a4 + 5) == *((_DWORD *)a4 + 6)) {
          return 0;
        }
        int v36 = v38;
        uint64_t v37 = 0x400000000;
        llvm::getUnderlyingObjects(v12, (uint64_t)&v36, 0, (llvm::Value *)6);
        if (v37)
        {
          long long v15 = (char *)v36;
          while (1)
          {
            uint64_t v16 = *(void *)v15;
            if (*(unsigned char *)(*(void *)v15 + 16) == 3)
            {
              uint64_t v18 = *a4;
              uint64_t v17 = a4[1];
              if (v17 == *a4)
              {
                uint64_t v19 = *v14;
                uint64_t v20 = (void *)(v17 + 8 * v19);
                if (v19)
                {
                  uint64_t v21 = 0;
                  uint64_t v22 = 8 * v19;
                  while (*(void *)(v17 + v21) != v16)
                  {
                    v21 += 8;
                    if (v22 == v21) {
                      goto LABEL_51;
                    }
                  }
                  uint64_t v20 = (void *)(v17 + v21);
                }
LABEL_51:
                uint64_t v18 = a4[1];
              }
              else
              {
                uint64_t v23 = *((unsigned int *)a4 + 4);
                int v24 = v23 - 1;
                unsigned int v25 = (v23 - 1) & ((v16 >> 4) ^ (v16 >> 9));
                uint64_t v20 = (void *)(v17 + 8 * v25);
                uint64_t v26 = *v20;
                if (*v20 == -1)
                {
                  uint64_t v27 = 0;
LABEL_59:
                  if (v27) {
                    uint64_t v20 = v27;
                  }
                  if (*v20 != v16) {
                    uint64_t v20 = (void *)(v17 + 8 * v23);
                  }
                }
                else
                {
                  uint64_t v27 = 0;
                  int v28 = 1;
                  while (v26 != v16)
                  {
                    if (v27) {
                      BOOL v29 = 0;
                    }
                    else {
                      BOOL v29 = v26 == -2;
                    }
                    if (v29) {
                      uint64_t v27 = v20;
                    }
                    unsigned int v30 = v25 + v28++;
                    unsigned int v25 = v30 & v24;
                    uint64_t v20 = (void *)(v17 + 8 * (v30 & v24));
                    uint64_t v26 = *v20;
                    if (*v20 == -1) {
                      goto LABEL_59;
                    }
                  }
                }
              }
              int v31 = v17 == v18 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
              if (v20 != (void *)(v17 + 8 * *v31)) {
                break;
              }
            }
            v15 += 8;
            if (v15 == (char *)v36 + 8 * v37) {
              goto LABEL_71;
            }
          }
          int v33 = 0;
        }
        else
        {
LABEL_71:
          int v33 = 1;
        }
        if (v36 != v38) {
          free(v36);
        }
        if (!v33) {
          return 1;
        }
      }
      return v13 < 0x100;
    }
    goto LABEL_63;
  }
  if ((v5 - 64) < 2) {
    return result;
  }
  if (v5 != 84
    || (uint64_t v7 = *((void *)this - 4)) == 0
    || *(unsigned char *)(v7 + 16)
    || *(void *)(v7 + 24) != *((void *)this + 9)
    || (*(unsigned char *)(v7 + 33) & 0x20) == 0)
  {
LABEL_63:
    if (llvm::Instruction::mayHaveSideEffects(this)) {
      return 1;
    }
    uint64_t result = 0;
    uint64_t v32 = *((unsigned __int8 *)this + 16) - 33;
    if (v32 > 0x37) {
      return result;
    }
    if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x8000000000041) != 0)
    {
      uint64_t v34 = *((void *)this + 8);
      if (v34 && ((*(unsigned char *)(v34 + 20) & 4) != 0 || (*(unsigned char *)(v34 + 17) & 0x10) != 0)) {
        return 0;
      }
      LODWORD(v36) = 7;
      if ((!sub_1CC5CB59C((uint64_t)this, (__int32 *)&v36, 1uLL)
         || (uint64_t v35 = *((void *)this - 4)) != 0
         && !*(unsigned char *)(v35 + 16)
         && *(void *)(v35 + 24) == *((void *)this + 9)
         && *(_DWORD *)(v35 + 36) == 7)
        && ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) != 0
         || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) != 0))
      {
        return 0;
      }
      return 1;
    }
    if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x808001C8000010) != 0) {
      return 1;
    }
    if (v32 != 28) {
      return result;
    }
    return (*((_WORD *)this + 9) & 0x301) != 0;
  }
  if (sub_1CD0FF4EC((uint64_t)this, 20)) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 36);
  uint64_t result = sub_1CD0FF67C(v8);
  if (result) {
    return (v8 - 2670) >= 6 && v8 != 2587;
  }
  return result;
}

BOOL sub_1CD114510(llvm::Module *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  v60[24] = *MEMORY[0x1E4F143B8];
  unint64_t v58 = v60;
  uint64_t v59 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v58);
  if (v59)
  {
    uint64_t v12 = (uint64_t *)((char *)v58 + 16);
    uint64_t v13 = 24 * v59;
    while (1)
    {
      uint64_t v14 = *(void *)(*(v12 - 1) + 8);
      if (*(void *)v14 == 9)
      {
        uint64_t v31 = *(void *)(v14 + 24);
        uint64_t v32 = *(unsigned __int8 *)(v14 + 32);
        if (*(void *)"PIC Level" == v31 && aPicLevel[8] == v32) {
          break;
        }
      }
      v12 += 3;
      v13 -= 24;
      if (!v13) {
        goto LABEL_5;
      }
    }
    uint64_t v15 = *v12;
  }
  else
  {
LABEL_5:
    uint64_t v15 = 0;
  }
  if (v58 != v60) {
    free(v58);
  }
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t v29 = *(void *)(v15 + 128);
  unsigned int v30 = (void *)(v29 + 24);
  if (*(_DWORD *)(v29 + 32) >= 0x41u) {
    unsigned int v30 = (void *)*v30;
  }
  if (!*(_DWORD *)v30)
  {
LABEL_9:
    v56[0] = &unk_1F2647678;
    unint64_t v57 = v56;
    sub_1CD1149B8((uint64_t)a1, (uint64_t)v56, a3, a5, a6);
    if (v57 == v56)
    {
      (*(void (**)(void *))(v56[0] + 32))(v56);
    }
    else if (v57)
    {
      (*(void (**)(void))(*v57 + 40))();
    }
    int v16 = *a5;
    if (*a5 <= 1)
    {
      if (v16)
      {
        uint64_t v17 = a5 + 2;
        unsigned int v18 = 4;
      }
      else
      {
        uint64_t v17 = (int *)*((void *)a5 + 1);
        unsigned int v18 = a5[4];
      }
      uint64_t v19 = &v17[14 * v18];
      goto LABEL_15;
    }
    if (v16)
    {
      uint64_t v19 = a5 + 2;
      uint64_t v20 = a5 + 58;
    }
    else
    {
      uint64_t v19 = (int *)*((void *)a5 + 1);
      unsigned int v55 = a5[4];
      if (!v55)
      {
        int v16 = 0;
LABEL_15:
        uint64_t v20 = v19;
LABEL_16:
        uint64_t v23 = (int *)*((void *)a5 + 1);
        uint64_t v22 = a5 + 2;
        uint64_t v21 = v23;
        BOOL v24 = v16 == 0;
        if (v16) {
          unsigned int v25 = v22;
        }
        else {
          unsigned int v25 = v21;
        }
        unsigned int v26 = v22[2];
        if (!v24) {
          unsigned int v26 = 4;
        }
        uint64_t v27 = &v25[14 * v26];
        if (v19 == v27) {
          return *(_DWORD *)(a4 + 20) != *(_DWORD *)(a4 + 24);
        }
        while (1)
        {
          uint64_t v34 = v19[10];
          if (v34) {
            break;
          }
LABEL_69:
          uint64_t v54 = v19 + 14;
          uint64_t v19 = v20;
          if (v54 != v20)
          {
            uint64_t v19 = v54;
            while (*(void *)v19 == -4096 || *(void *)v19 == -8192)
            {
              v19 += 14;
              if (v19 == v20)
              {
                uint64_t v19 = v20;
                break;
              }
            }
          }
          if (v19 == v27) {
            return *(_DWORD *)(a4 + 20) != *(_DWORD *)(a4 + 24);
          }
        }
        uint64_t v35 = (void *)*((void *)v19 + 4);
        int v36 = &v35[v34];
        while (1)
        {
          uint64_t v37 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *v35);
          uint64_t v38 = v37;
          uint64_t v39 = *(void *)(a4 + 8);
          uint64_t v40 = *(unsigned int *)(a4 + 20);
          if (v39 != *(void *)a4) {
            break;
          }
          if (v40)
          {
            BOOL v41 = 0;
            uint64_t v42 = 8 * v40;
            uint64_t v43 = *(uint64_t **)(a4 + 8);
            while (*v43 != v37)
            {
              if (*v43 == -2) {
                BOOL v41 = v43;
              }
              ++v43;
              v42 -= 8;
              if (!v42)
              {
                if (!v41) {
                  goto LABEL_43;
                }
                *BOOL v41 = v37;
                --*(_DWORD *)(a4 + 24);
                goto LABEL_45;
              }
            }
            goto LABEL_45;
          }
LABEL_43:
          unsigned int v44 = *(_DWORD *)(a4 + 16);
          if (v40 >= v44) {
            goto LABEL_48;
          }
          *(_DWORD *)(a4 + 20) = v40 + 1;
          *(void *)(v39 + 8 * v40) = v37;
LABEL_45:
          if (++v35 == v36) {
            goto LABEL_69;
          }
        }
        unsigned int v44 = *(_DWORD *)(a4 + 16);
LABEL_48:
        if (3 * v44 <= 4 * ((int)v40 - *(_DWORD *)(a4 + 24)))
        {
          if (v44 >= 0x40) {
            v44 *= 2;
          }
          else {
            unsigned int v44 = 128;
          }
        }
        else if (v44 - v40 >= v44 >> 3)
        {
          goto LABEL_50;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v44);
        unsigned int v44 = *(_DWORD *)(a4 + 16);
        uint64_t v39 = *(void *)(a4 + 8);
LABEL_50:
        unsigned int v45 = v44 - 1;
        unsigned int v46 = (v44 - 1) & ((v38 >> 4) ^ (v38 >> 9));
        uint64_t v47 = (uint64_t *)(v39 + 8 * v46);
        uint64_t v48 = *v47;
        if (*v47 == -1)
        {
          unsigned int v49 = 0;
LABEL_62:
          if (v49) {
            uint64_t v53 = v49;
          }
          else {
            uint64_t v53 = v47;
          }
          if (*v53 != v38)
          {
            if (*v53 == -2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            *uint64_t v53 = v38;
          }
        }
        else
        {
          unsigned int v49 = 0;
          int v50 = 1;
          while (v48 != v38)
          {
            if (v49) {
              BOOL v51 = 0;
            }
            else {
              BOOL v51 = v48 == -2;
            }
            if (v51) {
              unsigned int v49 = v47;
            }
            unsigned int v52 = v46 + v50++;
            unsigned int v46 = v52 & v45;
            uint64_t v47 = (uint64_t *)(v39 + 8 * (v52 & v45));
            uint64_t v48 = *v47;
            if (*v47 == -1) {
              goto LABEL_62;
            }
          }
        }
        goto LABEL_45;
      }
      uint64_t v20 = &v19[14 * v55];
    }
    int v16 = *a5 & 1;
    while (*(void *)v19 == -4096 || *(void *)v19 == -8192)
    {
      v19 += 14;
      if (v19 == v20)
      {
        uint64_t v19 = v20;
        goto LABEL_16;
      }
    }
    goto LABEL_16;
  }
  return 0;
}

void sub_1CD1149B8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  v50[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 8;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 != a1 + 8)
  {
    do
    {
      if (v9) {
        uint64_t v11 = v9 - 56;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        sub_1CB920400();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v11))
      {
        unint64_t v13 = *(unsigned int *)(a3 + 8);
        if (v13 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v13) = v11;
        ++*(_DWORD *)(a3 + 8);
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != v8);
  }
  uint64_t v14 = *(unsigned int *)(a3 + 8);
  if (v14)
  {
    uint64_t v15 = *(uint64_t **)a3;
    uint64_t v16 = *(void *)a3 + 8 * v14;
    do
    {
      uint64_t v17 = *v15;
      uint64_t v43 = v17;
      if (!*(void *)(v17 + 8)) {
        goto LABEL_78;
      }
      if (*(unsigned char *)(v17 + 16))
      {
        if (*(unsigned char *)(v17 + 16) != 3 || (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_22;
        }
      }
      else if (*(void *)(v17 + 72) != v17 + 72 || (*(unsigned char *)(v17 + 34) & 0x80) != 0)
      {
LABEL_22:
        uint64_t v18 = *(void *)(v17 + 24);
        goto LABEL_23;
      }
      uint64_t v18 = *(void *)v17;
LABEL_23:
      unint64_t v20 = (unint64_t)(sub_1CB83544C(a1 + 272, v18) + 7) >> 3;
      if (v19 == 1) {
      *a5 += v20;
      }
      uint64_t v48 = v50;
      uint64_t v49 = 0x400000000;
      uint64_t v21 = sub_1CC85D214(a4, &v43);
      uint64_t v22 = *(void *)(v43 + 8);
      unsigned int v45 = v47;
      uint64_t v46 = 0x800000000;
      if (v22)
      {
        unint64_t v23 = -1;
        uint64_t v24 = v22;
        do
        {
          uint64_t v24 = *(void *)(v24 + 8);
          ++v23;
        }
        while (v24);
        int v25 = v23 + 1;
        if (v23 >= 8) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v26 = v47;
        do
        {
          *v26++ = *(void *)(v22 + 24);
          uint64_t v22 = *(void *)(v22 + 8);
        }
        while (v22);
      }
      else
      {
        int v25 = 0;
      }
      LODWORD(v27) = v25;
      LODWORD(v46) = v25;
      if (v25)
      {
        int v28 = v21 + 1;
        while (1)
        {
          uint64_t v29 = *((void *)v45 + v27 - 1);
          uint64_t v27 = (v27 - 1);
          LODWORD(v46) = v27;
          unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
          if (v29) {
            BOOL v31 = v30 > 0x14;
          }
          else {
            BOOL v31 = 1;
          }
          if (!v31)
          {
            if (v30 >= 4)
            {
              uint64_t v38 = *(void *)(v29 + 8);
              if (v38)
              {
                uint64_t v39 = 0;
                uint64_t v40 = *(void *)(v29 + 8);
                do
                {
                  ++v39;
                  uint64_t v40 = *(void *)(v40 + 8);
                }
                while (v40);
              }
              else
              {
                uint64_t v39 = 0;
              }
              if (v39 + (unint64_t)v27 > HIDWORD(v46)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v38)
              {
                BOOL v41 = (char *)v45 + 8 * v27;
                do
                {
                  *v41++ = *(void *)(v38 + 24);
                  uint64_t v38 = *(void *)(v38 + 8);
                }
                while (v38);
              }
              LODWORD(v27) = v27 + v39;
              LODWORD(v46) = v27;
            }
            goto LABEL_67;
          }
          if (v29 && v30 >= 0x1C) {
            break;
          }
LABEL_67:
          if (!v27) {
            goto LABEL_74;
          }
        }
        uint64_t v33 = *(void *)(*(void *)(v29 + 40) + 56);
        unsigned int v44 = 0;
        if ((sub_1CD115988((uint64_t)(v21 + 1), v33, &v44) & 1) == 0)
        {
          if (*v28) {
            unsigned int v34 = 1;
          }
          else {
            unsigned int v34 = *((_DWORD *)v21 + 6);
          }
          int v35 = *v28 >> 1;
          if (4 * v35 + 4 >= 3 * v34)
          {
            v34 *= 2;
            goto LABEL_50;
          }
          if (v34 + ~v35 - *((_DWORD *)v21 + 3) <= v34 >> 3)
          {
LABEL_50:
            sub_1CD115A34((uint64_t)(v21 + 1), v34);
            unsigned int v44 = 0;
            sub_1CD115988((uint64_t)(v21 + 1), v33, &v44);
          }
          int v36 = v44;
          *v28 += 2;
          if (*v36 != -4096) {
            --*((_DWORD *)v21 + 3);
          }
          uint64_t *v36 = v33;
          unint64_t v37 = *((unsigned int *)v21 + 10);
          if (v37 >= *((unsigned int *)v21 + 11)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v21[4] + 8 * v37) = v33;
          ++*((_DWORD *)v21 + 10);
        }
        LODWORD(v27) = v46;
        goto LABEL_67;
      }
LABEL_74:
      if (v45 != v47) {
        free(v45);
      }
      if (v48 != v50) {
        free(v48);
      }
LABEL_78:
      ++v15;
    }
    while (v15 != (uint64_t *)v16);
  }
}

uint64_t sub_1CD114E40(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  v5[0] = &unk_1F26476C0;
  uint64_t v6 = v5;
  sub_1CD1149B8(a1, (uint64_t)v5, a2, a3, &v4);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1CD114F2C(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  while (v3)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    uint64_t v3 = *(void *)(v3 + 8);
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      BOOL v9 = v8 >= 0x1C;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9 && v8 != 83 && *(void *)(v7 + 40) == a1) {
      llvm::User::replaceUsesOfWith((llvm::User *)v7, a2, a3);
    }
  }
}

uint64_t sub_1CD114F9C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 > 5) {
    return 0;
  }
  v26[7] = v4;
  v26[8] = v5;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    return 1;
  }
  uint64_t v11 = a4 + 1;
  while (1)
  {
    uint64_t v12 = *(void *)(v8 + 24);
    uint64_t v24 = v12;
    int v13 = *(unsigned __int8 *)(v12 + 16);
    if ((v13 - 73) <= 1) {
      break;
    }
    if (v13 != 44 && v13 != 42) {
      return 0;
    }
    int v25 = v26;
    v26[0] = 0;
    BOOL v17 = !sub_1CC04C34C(&v25, v12) || v26[0] == 0;
    if (!v17 || *(unsigned __int8 *)(v24 + 17) < 0xFEu) {
      return 0;
    }
    if ((a2 & 1) != 0 || *(unsigned char *)(*(void *)v24 + 8) == 2)
    {
      int v18 = *(_DWORD *)(v24 + 20);
      uint64_t v19 = (v18 & 0x40000000) != 0 ? *(void **)(v24 - 8) : (void *)(v24 - 32 * (v18 & 0x7FFFFFF));
      uint64_t v20 = v19[4 * (*v19 == a1)];
      unsigned int v21 = *(unsigned __int8 *)(v20 + 16);
      if (v20 && v21 >= 0x1C)
      {
        if (v21 != 84) {
          goto LABEL_35;
        }
        uint64_t v23 = *(void *)(v20 - 32);
        if (v23)
        {
          if (!*(unsigned char *)(v23 + 16) && *(void *)(v23 + 24) == *(void *)(v20 + 72))
          {
            if ((*(unsigned char *)(v23 + 33) & 0x20) != 0) {
              uint64_t v23 = v20;
            }
            else {
              uint64_t v23 = 0;
            }
          }
          else
          {
LABEL_35:
            uint64_t v23 = 0;
          }
        }
        if (v20 != v24
          && *(void *)(v20 + 40) == *(void *)(v24 + 40)
          && (v21 == 46 || v21 == 49 || v23 && *(_DWORD *)(*(void *)(v23 - 32) + 36) == 280))
        {
          return 0;
        }
      }
    }
LABEL_42:
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      return 1;
    }
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if (!v14) {
    goto LABEL_51;
  }
  int v15 = -2;
  do
  {
    int v16 = v15;
    if (!v15) {
      break;
    }
    uint64_t v14 = *(void *)(v14 + 8);
    ++v15;
  }
  while (v14);
  if (v16)
  {
LABEL_51:
    if (sub_1CD114F9C(v12, a2, a3, v11))
    {
      sub_1CC04D4E0(a3, &v24);
      goto LABEL_42;
    }
  }
  return 0;
}