uint64_t sub_1CCA97C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  void *v20;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(void *)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 20);
  if (v6 == *(void *)a3)
  {
    if (v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      v10 = *(void **)(a3 + 8);
      while (*v10 != a1)
      {
        if (*v10 == -2) {
          v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *v8 = a1;
          --*(_DWORD *)(a3 + 24);
          goto LABEL_33;
        }
      }
      return 1;
    }
LABEL_9:
    v11 = *(_DWORD *)(a3 + 16);
    if (v7 < v11)
    {
      *(_DWORD *)(a3 + 20) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a1;
      goto LABEL_33;
    }
  }
  else
  {
    v11 = *(_DWORD *)(a3 + 16);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a3 + 24)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      v11 = 128;
    }
    goto LABEL_52;
  }
  if (v11 - v7 < v11 >> 3)
  {
LABEL_52:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v11);
    v11 = *(_DWORD *)(a3 + 16);
    v6 = *(void *)(a3 + 8);
  }
  v12 = v11 - 1;
  v13 = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v14 = (void *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14 != -1)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != a1)
    {
      if (v16) {
        v18 = 0;
      }
      else {
        v18 = v15 == -2;
      }
      if (v18) {
        v16 = v14;
      }
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (void *)(v6 + 8 * (v19 & v12));
      v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return 1;
  }
  v16 = 0;
LABEL_26:
  if (v16) {
    v20 = v16;
  }
  else {
    v20 = v14;
  }
  if (*v20 == a1) {
    return 1;
  }
  if (*v20 == -2) {
    --*(_DWORD *)(a3 + 24);
  }
  else {
    ++*(_DWORD *)(a3 + 20);
  }
  *v20 = a1;
LABEL_33:
  if (*(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24) == 16) {
    return 0;
  }
  v22 = *(_DWORD *)(a1 + 20);
  if ((v22 & 0x40000000) == 0)
  {
    v23 = v22 & 0x7FFFFFF;
    v24 = (uint64_t *)(a1 - 32 * v23);
    if (!v23) {
      return 1;
    }
LABEL_39:
    v25 = 32 * v23;
    do
    {
      v26 = *v24;
      if (*v24 && *(unsigned char *)(v26 + 16) == 83)
      {
        if ((sub_1CCA97C60() & 1) == 0) {
          return 0;
        }
      }
      else if (v26 != a2)
      {
        return 0;
      }
      v24 += 4;
      v25 -= 32;
    }
    while (v25);
    return 1;
  }
  v24 = *(uint64_t **)(a1 - 8);
  v23 = v22 & 0x7FFFFFF;
  if (v23) {
    goto LABEL_39;
  }
  return 1;
}

uint64_t *sub_1CCA97E6C(_DWORD *a1, uint64_t *a2)
{
  v8 = 0;
  char v4 = sub_1CCA97F50((uint64_t)a1, *a2, &v8);
  result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1CCA97FF4((uint64_t)a1, v7);
    v8 = 0;
    sub_1CCA97F50((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096) {
    --a1[1];
  }
  uint64_t *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CCA97F50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CCA97FF4(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CCA98180(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CCA98180(a1, v14, v7);
}

uint64_t sub_1CCA98180(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CCA97F50((uint64_t)v5, v10, &v12);
      BOOL v11 = v12;
      *uint64_t v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CCA98244(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB901A88((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CCA982A8(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CCA982A8(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CCA9836C((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CB901A88((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CCA9836C(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CB901D80(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)unsigned int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB901D80(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t *sub_1CCA984F8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v2 = 8;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      uint64_t v11 = 0;
      return (uint64_t *)(v3 + 16 * v11);
    }
  }
  int v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v9 = 1;
    while (v7 != -4096)
    {
      int v10 = v5 + v9++;
      uint64_t v5 = v10 & v4;
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2) {
        return (uint64_t *)(v3 + 16 * v5);
      }
    }
    if (*(_DWORD *)a1)
    {
      uint64_t v11 = 8;
      uint64_t v3 = a1 + 8;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v11);
  }
  return v6;
}

uint64_t sub_1CCA98598(uint64_t a1, uint64_t a2)
{
  if (sub_1CCA985D8(a1, a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return sub_1CCA985D8(a2, a1);
  }
}

BOOL sub_1CCA985D8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 4);
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  if (v4 < v5) {
    return 1;
  }
  if (v4 > v5) {
    return 0;
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(a1 + 8));
  if (v6 == 1) {
  unint64_t v9 = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(a2 + 8));
  }
  if (v8 == 1) {
  return PrimitiveSizeInBits < v9;
  }
}

uint64_t sub_1CCA98688(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    goto LABEL_20;
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(_DWORD *)(a3 + 8);
  unsigned int v6 = *(_DWORD *)(a3 + 12);
  unsigned int v7 = (*(void *)a3 >> 9) ^ (v5 >> 3) ^ (*(void *)a3 >> 4) ^ (v6 >> 3);
  int v8 = a2 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v10 = v7 & v8;
    uint64_t v11 = a1 + 24 * (v7 & v8);
    if (*(void *)a3 == *(void *)v11 && v5 == *(_DWORD *)(v11 + 8) && v6 == *(_DWORD *)(v11 + 12))
    {
      uint64_t result = 1;
      goto LABEL_20;
    }
    if (*(void *)v11) {
      goto LABEL_7;
    }
    int v13 = *(_DWORD *)(v11 + 8);
    if (v13 != 1) {
      break;
    }
    BOOL v12 = *(_DWORD *)(v11 + 12) == 0;
LABEL_8:
    if (v12 && v4 == 0) {
      uint64_t v4 = a1 + 24 * v10;
    }
    unsigned int v7 = v10 + i;
  }
  if (v13 || *(_DWORD *)(v11 + 12))
  {
LABEL_7:
    BOOL v12 = 0;
    goto LABEL_8;
  }
  uint64_t result = 0;
  if (v4) {
    uint64_t v11 = v4;
  }
LABEL_20:
  *a4 = v11;
  return result;
}

uint64_t sub_1CCA98758()
{
  int v2 = 512;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Maximum number phis to handle in intptr/ptrint folding";
  *((void *)&v1 + 1) = 54;
  sub_1CD68C84C(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCE5DC0, &dword_1CB82C000);
}

llvm::Value *sub_1CCA987C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5 = 0;
  if (a3)
  {
    unsigned int v7 = *(unsigned __int8 *)(a3 + 16);
    if (v7 >= 0x1C && v7 - 59 >= 0xFFFFFFEE)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      if (!v9 || *(void *)(v9 + 8) || *(unsigned __int8 *)(a4 + 16) < 0x15u) {
        return 0;
      }
      unsigned int v5 = 0;
      if (v7 > 0x3A) {
        return v5;
      }
      if (((1 << v7) & 0x700660000000000) != 0)
      {
        if (*(void *)(a3 - 64) != a4)
        {
          unsigned int v5 = 0;
          if (*(void *)(a3 - 32) != a4) {
            return v5;
          }
          uint64_t v14 = 0;
LABEL_18:
          if (sub_1CB845E74(a2))
          {
            if (*(unsigned __int8 *)(a2 + 17) >> 1 == 127) {
              unsigned int v15 = -1;
            }
            else {
              unsigned int v15 = *(unsigned __int8 *)(a2 + 17) >> 1;
            }
          }
          else
          {
            unsigned int v15 = 0;
          }
          uint64_t v16 = a3 + 32 * v14;
          BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(*(unsigned __int8 *)(a3 + 16) - 28), *(llvm::ConstantFP **)a3, (llvm::Type *)1, (v15 >> 3) & 1);
          v18 = *(unsigned __int8 **)(v16 - 64);
          v54 = 0;
          v52[0] = (const char *)&v54;
          v52[1] = 0;
          int v19 = sub_1CBF528D8((uint64_t)v52, v18);
          if (v18[16] > 0x14u) {
            goto LABEL_72;
          }
          if (!v19) {
            return 0;
          }
          if (BinOpIdentity && *((unsigned char *)BinOpIdentity + 16) == 16) {
            AggregateElement = BinOpIdentity;
          }
          else {
            AggregateElement = llvm::Constant::getAggregateElement(BinOpIdentity, 0);
          }
          v21 = (llvm::APInt *)(AggregateElement + 3);
          v22 = (unsigned int *)v54;
          uint64_t v23 = *((unsigned int *)AggregateElement + 8);
          if (v23 > 0x40)
          {
            int v24 = 0;
            int64_t v25 = (unint64_t)(v23 + 63) >> 6;
            uint64_t v26 = v25;
            do
            {
              BOOL v27 = v26-- < 1;
              if (v27) {
                break;
              }
              unint64_t v28 = *(void *)(*(void *)v21 + 8 * v26);
              v24 += __clz(v28);
            }
            while (!v28);
            int v29 = v23 | 0xFFFFFFC0;
            if ((v23 & 0x3F) == 0) {
              int v29 = 0;
            }
            if (v24 + v29 == v23) {
              goto LABEL_53;
            }
          }
          else if (!*(void *)v21)
          {
            if (!v23) {
              goto LABEL_72;
            }
LABEL_60:
            uint64_t v38 = v22[2];
            if (v38 > 0x40)
            {
              int v40 = 0;
              int64_t v41 = (unint64_t)(v38 + 63) >> 6;
              do
              {
                BOOL v27 = v41-- < 1;
                if (v27) {
                  break;
                }
                unint64_t v42 = *(void *)(*(void *)v22 + 8 * v41);
                v40 += __clz(v42);
              }
              while (!v42);
              int v43 = v38 | 0xFFFFFFC0;
              if ((v38 & 0x3F) == 0) {
                int v43 = 0;
              }
              if (v40 + v43 != v38 - 1
                && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v22) != v38)
              {
                return 0;
              }
            }
            else if (v38)
            {
              uint64_t v39 = *(void *)v22;
              if (*(void *)v22 != 1)
              {
                unsigned int v5 = 0;
                if (v39 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v38) {
                  return v5;
                }
              }
            }
            goto LABEL_72;
          }
          uint64_t v30 = *((unsigned int *)v54 + 2);
          if (v30 > 0x40)
          {
            int v31 = 0;
            int64_t v32 = (unint64_t)(v30 + 63) >> 6;
            do
            {
              BOOL v27 = v32-- < 1;
              if (v27) {
                break;
              }
              unint64_t v33 = *(void *)(*(void *)v54 + 8 * v32);
              v31 += __clz(v33);
            }
            while (!v33);
            int v34 = v30 | 0xFFFFFFC0;
            if ((v30 & 0x3F) == 0) {
              int v34 = 0;
            }
            if (v31 + v34 != v30) {
              return 0;
            }
          }
          else if (*(void *)v54)
          {
            return 0;
          }
          if (v23 < 0x41)
          {
            if (v23 && *(void *)v21 != 1 && *(void *)v21 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v23) {
              goto LABEL_60;
            }
            goto LABEL_72;
          }
          int64_t v25 = (unint64_t)(v23 + 63) >> 6;
LABEL_53:
          int v35 = 0;
          do
          {
            BOOL v27 = v25-- < 1;
            if (v27) {
              break;
            }
            unint64_t v36 = *(void *)(*(void *)v21 + 8 * v25);
            v35 += __clz(v36);
          }
          while (!v36);
          int v37 = v23 | 0xFFFFFFC0;
          if ((v23 & 0x3F) == 0) {
            int v37 = 0;
          }
          if (v35 + v37 != v23 - 1 && llvm::APInt::countTrailingOnesSlowCase(v21) != v23) {
            goto LABEL_60;
          }
LABEL_72:
          BOOL v44 = sub_1CB845E74(a2);
          if ((v15 & 2) != 0 || !v44 || llvm::isKnownNeverNaN(a4, *(uint64_t **)(a1 + 64), 0))
          {
            v45 = *(llvm::IRBuilderBase **)(a1 + 24);
            v46 = *(llvm::Value **)(a2 - 96);
            if (a5) {
              v47 = BinOpIdentity;
            }
            else {
              v47 = (llvm::Value *)v18;
            }
            if (a5) {
              v48 = (llvm::Value *)v18;
            }
            else {
              v48 = BinOpIdentity;
            }
            __int16 v53 = 257;
            Select = llvm::IRBuilderBase::CreateSelect(v45, v46, v47, v48, (const llvm::Twine *)v52, 0);
            if (sub_1CB845E74(a2)) {
              *((unsigned char *)Select + 17) |= 2 * (_BYTE)v15;
            }
            llvm::Value::takeName((int32x2_t ****)Select, (llvm::Value *)a3);
            char v50 = *(unsigned char *)(a3 + 16) - 28;
            __int16 v53 = 257;
            unsigned int v5 = llvm::BinaryOperator::Create(v50, (void *)a4, (uint64_t)Select, v52, 0);
            llvm::Instruction::copyIRFlags((uint64_t)v5, a3, 1);
            return v5;
          }
          return 0;
        }
      }
      else
      {
        if (((1 << v7) & 0xE2180000000000) == 0) {
          return v5;
        }
        if (*(void *)(a3 - 64) != a4) {
          return 0;
        }
      }
      uint64_t v14 = 1;
      goto LABEL_18;
    }
  }
  return v5;
}

llvm::UndefValue **sub_1CCA98BD8(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = a3;
  uint64_t v859 = *MEMORY[0x1E4F143B8];
  __int16 v8 = *((_WORD *)a3 + 9);
  if ((v8 & 0x3E) != 0x20 || ((*a3)[1] & 0xFE) == 0x12) {
    goto LABEL_54;
  }
  int v9 = v8 & 0x3F;
  if (v9 == 33) {
    unsigned int v10 = (unsigned __int8 *)*((void *)a2 - 8);
  }
  else {
    unsigned int v10 = (unsigned __int8 *)*((void *)a2 - 4);
  }
  if (v9 == 33) {
    uint64_t v11 = *((void *)a2 - 4);
  }
  else {
    uint64_t v11 = *((void *)a2 - 8);
  }
  if (v9 == 33) {
    unsigned int v12 = 2;
  }
  else {
    unsigned int v12 = 1;
  }
  int v13 = (unsigned __int8 *)*(a3 - 8);
  uint64_t v14 = (unsigned __int8 *)*(a3 - 4);
  if ((unsigned __int8 *)v11 != v13
    && sub_1CC16A22C((uint64_t ***)*(a3 - 4), *(void *)(a1 + 112), (uint64_t)a2, *(void *)(a1 + 72), 0, 0))
  {
    unsigned int v15 = sub_1CC035650((llvm *)v11, v13, v14, (llvm::DSOLocalEquivalent ***)(a1 + 88), 1, 3, a7);
    if (v15)
    {
      uint64_t v16 = (uint64_t)v15;
      uint64_t v17 = a1;
LABEL_26:
      uint64_t v22 = sub_1CC9D28DC(v17, (uint64_t)a2, v12, v16);
      goto LABEL_48;
    }
    unsigned int v18 = v14[16];
    BOOL v19 = v18 > 0x14 || v18 == 5;
    if (!v19)
    {
      unsigned int v20 = v13[16];
      if (v20 > 0x14 || v20 == 5)
      {
        if (v11)
        {
          if (*(unsigned __int8 *)(v11 + 16) >= 0x1Cu)
          {
            uint64_t v62 = *(void *)(v11 + 8);
            if (v62)
            {
              if (!*(void *)(v62 + 8) && llvm::isSafeToSpeculativelyExecute(v11, 0, 0, 0))
              {
                int v63 = *(_DWORD *)(v11 + 20);
                if ((v63 & 0x40000000) != 0)
                {
                  v65 = *(uint64_t **)(v11 - 8);
                  uint64_t v64 = v63 & 0x7FFFFFF;
                }
                else
                {
                  uint64_t v64 = v63 & 0x7FFFFFF;
                  v65 = (uint64_t *)(v11 - 32 * v64);
                }
                if (v64)
                {
                  uint64_t v326 = 32 * v64;
                  while ((unsigned __int8 *)*v65 != v13)
                  {
                    v65 += 4;
                    v326 -= 32;
                    if (!v326) {
                      goto LABEL_22;
                    }
                  }
                  sub_1CC9DFE20((void *)a1, v65, (uint64_t)v14);
                  return (llvm::UndefValue **)a2;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_22:
  if ((unsigned __int8 *)v11 != v14)
  {
    if (sub_1CC16A22C((uint64_t ***)v13, *(void *)(a1 + 112), (uint64_t)a2, *(void *)(a1 + 72), 0, 0))
    {
      v21 = sub_1CC035650((llvm *)v11, v14, v13, (llvm::DSOLocalEquivalent ***)(a1 + 88), 1, 3, a7);
      if (v21)
      {
        uint64_t v16 = (uint64_t)v21;
        uint64_t v17 = a1;
        goto LABEL_26;
      }
    }
  }
  uint64_t v23 = v10[16];
  if (v23 < 0x1C || v10 == 0) {
    goto LABEL_54;
  }
  HIDWORD(v26) = v23 - 41;
  LODWORD(v26) = v23 - 41;
  unsigned int v25 = v26 >> 1;
  BOOL v336 = v25 > 6;
  int v27 = (1 << v25) & 0x47;
  if (v336 || v27 == 0)
  {
    int v31 = 0;
    int v30 = 0;
  }
  else
  {
    unsigned int v29 = v10[17];
    int v30 = (v29 >> 1) & 1;
    int v31 = (v29 >> 2) & 1;
    v10[17] = v29 & 0xF9;
  }
  int v32 = 0;
  if (v23 > 0x3E)
  {
    int v33 = 0;
    goto LABEL_40;
  }
  if (((1 << v23) & 0xC1800000000000) != 0)
  {
    int v33 = 0;
    int v34 = v10 + 17;
    unsigned int v35 = v10[17];
    int v32 = (v35 >> 1) & 1;
  }
  else
  {
    int v33 = 0;
    if (v23 != 62) {
      goto LABEL_40;
    }
    int v32 = 0;
    int v34 = v10 + 17;
    unsigned int v35 = v10[17];
    int v33 = (v35 >> 1) & 1;
  }
  *int v34 = v35 & 0xFD;
LABEL_40:
  if (sub_1CC035650((llvm *)v10, v13, v14, (llvm::DSOLocalEquivalent ***)(a1 + 88), 0, 3, a7) != (const llvm::detail::DoubleAPFloat *)v11
    && sub_1CC035650((llvm *)v10, v14, v13, (llvm::DSOLocalEquivalent ***)(a1 + 88), 0, 3, v36) != (const llvm::detail::DoubleAPFloat *)v11)
  {
    if (v30)
    {
      v10[17] |= 2u;
      if (!v31) {
        goto LABEL_44;
      }
    }
    else if (!v31)
    {
LABEL_44:
      if (v32) {
        goto LABEL_45;
      }
      goto LABEL_52;
    }
    v10[17] |= 4u;
    if (v32)
    {
LABEL_45:
      v10[17] |= 2u;
      if (!v33) {
        goto LABEL_54;
      }
LABEL_53:
      v10[17] |= 2u;
      goto LABEL_54;
    }
LABEL_52:
    if (!v33) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t v22 = (uint64_t)sub_1CC9D3C84(a1, a2, (llvm::Value *)v10);
LABEL_48:
  int v37 = (llvm::UndefValue **)v22;
  if (v22) {
    return v37;
  }
LABEL_54:
  v855 = 0;
  __s2 = 0;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v38 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v38 = *(_DWORD *)(*(void *)a2 + 8);
  }
  if (v38 != 13) {
    goto LABEL_112;
  }
  int matched = llvm::matchSelectPattern((uint64_t)a2, (uint64_t)&v855, &__s2, 0, 0);
  int v41 = matched;
  if ((matched - 7) > 1)
  {
    int v51 = 306;
    switch(matched)
    {
      case 1:
        int v51 = 275;
        break;
      case 2:
        break;
      case 3:
        int v51 = 274;
        break;
      case 4:
        int v51 = 305;
        break;
      default:
        goto LABEL_112;
    }
    __int16 v53 = *(llvm::IRBuilderBase **)(a1 + 24);
    WORD4(v852) = 257;
    BinaryIntrinsic = (llvm::Value *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v53, v51, v855, (llvm::Value *)__s2, 0, (const llvm::Twine *)&p_s2);
    uint64_t v55 = a1;
    goto LABEL_110;
  }
  unint64_t v42 = v7[1];
  if (!v42 || v42[1])
  {
    uint64_t v43 = *((void *)__s2 + 1);
    if (!v43 || *(void *)(v43 + 8)) {
      goto LABEL_112;
    }
  }
  if (matched == 7)
  {
    BOOL v44 = __s2;
    unint64_t p_NullValue = (unint64_t)v855;
    unsigned int v45 = *((unsigned __int8 *)__s2 + 16);
    if (v45 < 0x1C)
    {
      if (v45 != 5) {
        goto LABEL_100;
      }
      unsigned int v50 = *((unsigned __int16 *)__s2 + 9);
      HIDWORD(v57) = v50 - 13;
      LODWORD(v57) = v50 - 13;
      unsigned int v56 = v57 >> 1;
      BOOL v336 = v56 > 6;
      int v58 = (1 << v56) & 0x47;
      if (v336 || v58 == 0) {
        goto LABEL_100;
      }
    }
    else
    {
      HIDWORD(v47) = v45 - 41;
      LODWORD(v47) = v45 - 41;
      unsigned int v46 = v47 >> 1;
      BOOL v336 = v46 > 6;
      int v48 = (1 << v46) & 0x47;
      if (v336 || v48 == 0) {
        goto LABEL_100;
      }
      unsigned int v50 = v45 - 28;
    }
    if (v50 == 15 && (*((unsigned char *)__s2 + 17) & 4) != 0)
    {
      int v60 = *((_DWORD *)__s2 + 5);
      v61 = (v60 & 0x40000000) != 0
          ? (llvm::Constant **)*((void *)__s2 - 1)
          : (llvm::Constant **)((char *)__s2 - 32 * (v60 & 0x7FFFFFF));
      if (sub_1CBF535C4((uint64_t)&p_s2, *v61))
      {
        int v66 = v44[5];
        if ((v66 & 0x40000000) != 0) {
          v67 = (char *)*((void *)v44 - 1);
        }
        else {
          v67 = (char *)&v44[-8 * (v66 & 0x7FFFFFF)];
        }
        BOOL v68 = p_NullValue == *((void *)v67 + 4);
        goto LABEL_101;
      }
    }
LABEL_100:
    BOOL v68 = 0;
LABEL_101:
    BOOL v52 = v68;
    goto LABEL_102;
  }
  BOOL v52 = 0;
LABEL_102:
  uint64_t v69 = ***(void ***)a2;
  v70 = *(llvm::ConstantInt **)(v69 + 1888);
  unint64_t v71 = *(unsigned int *)(v69 + 1896);
  LODWORD(p_NullValue) = v71 >> 8;
  if (v71 >> 8 > 0x40) {
    operator new[]();
  }
  if (v71 <= 0xFF) {
    unint64_t v72 = 0;
  }
  else {
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v71) + 63);
  }
  unint64_t p_s2 = v72 & v52;
  v73 = (llvm::Value *)llvm::ConstantInt::get(v70, (llvm::LLVMContext *)&p_s2, v40);
  if (p_NullValue >= 0x41 && p_s2) {
    MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
  }
  v74 = *(llvm::IRBuilderBase **)(a1 + 24);
  WORD4(v852) = 257;
  v75 = (llvm::BinaryOperator *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v74, 1, v855, v73, 0, (const llvm::Twine *)&p_s2);
  BinaryIntrinsic = v75;
  if (v41 == 8)
  {
    WORD4(v852) = 257;
    Neg = (llvm::UndefValue **)llvm::BinaryOperator::CreateNeg(v75, (llvm::Value *)&p_s2, 0, v76);
    goto LABEL_111;
  }
  uint64_t v55 = a1;
LABEL_110:
  Neg = sub_1CC9D3C84(v55, a2, BinaryIntrinsic);
LABEL_111:
  int v37 = Neg;
  if (Neg) {
    return v37;
  }
LABEL_112:
  __src = 0;
  LODWORD(v840) = 0;
  unint64_t p_s2 = (unint64_t)&v840;
  unint64_t p_NullValue = (unint64_t)&NullValue;
  uint64_t p_src = (uint64_t)&__src;
  *(void *)&long long v852 = 0;
  v825 = (llvm::LLVMContext **)(v7 - 8);
  if (!*(v7 - 8)) {
    goto LABEL_132;
  }
  NullValue = (llvm::LLVMContext *)*(v7 - 8);
  if (!sub_1CBF528D8((uint64_t)&p_src, (unsigned __int8 *)*(v7 - 4))) {
    goto LABEL_132;
  }
  *(_DWORD *)unint64_t p_s2 = *((_WORD *)v7 + 9) & 0x3F;
  v848 = 0;
  *(void *)v845 = 0;
  unint64_t p_s2 = (unint64_t)v7;
  unint64_t p_NullValue = (unint64_t)v845;
  uint64_t p_src = 0;
  *(void *)&long long v852 = &v848;
  v78 = a2;
  if (*((unsigned char *)a2 + 16) != 85) {
    goto LABEL_127;
  }
  int v79 = *((_DWORD *)a2 + 5);
  v80 = (v79 & 0x40000000) != 0
      ? (llvm::ValueAsMetadata *)*((void *)a2 - 1)
      : (llvm::ValueAsMetadata *)((char *)a2 - 32 * (v79 & 0x7FFFFFF));
  if (*(uint64_t ****)v80 == v7
    && (int v81 = sub_1CBF528D8((uint64_t)&p_NullValue, *((unsigned __int8 **)v80 + 4)), v78 = a2, v81)
    && ((int v82 = *((_DWORD *)a2 + 5), (v82 & 0x40000000) != 0)
      ? (v83 = (void ***)*((void *)a2 - 1))
      : (v83 = (void ***)((char *)a2 - 32 * (v82 & 0x7FFFFFF))),
        (v84 = v83[8], v78 = a2, v84) && (unsigned int v85 = *((unsigned __int8 *)v84 + 16), v85 >= 0x1C) && v85 - 59 >= 0xFFFFFFEE))
  {
    *(void *)long long v852 = v84;
    uint64_t v86 = *((_WORD *)v7 + 9) & 0x3F;
  }
  else
  {
LABEL_127:
    unint64_t p_s2 = (unint64_t)v7;
    unint64_t p_NullValue = (unint64_t)&v848;
    uint64_t p_src = (uint64_t)v845;
    *(void *)&long long v852 = 0;
    if (*((unsigned char *)v78 + 16) != 85) {
      goto LABEL_132;
    }
    int v87 = *((_DWORD *)a2 + 5);
    v88 = (v87 & 0x40000000) != 0
        ? (llvm::ValueAsMetadata *)*((void *)a2 - 1)
        : (llvm::ValueAsMetadata *)((char *)a2 - 32 * (v87 & 0x7FFFFFF));
    if (*(uint64_t ****)v88 != v7) {
      goto LABEL_132;
    }
    v108 = (unsigned __int8 *)*((void *)v88 + 4);
    if (!v108) {
      goto LABEL_132;
    }
    unsigned int v109 = v108[16];
    if (v109 < 0x1C || v109 - 59 < 0xFFFFFFEE) {
      goto LABEL_132;
    }
    v848 = (llvm::Instruction *)v108;
    int v110 = *((_DWORD *)a2 + 5);
    v111 = (v110 & 0x40000000) != 0
         ? (llvm::ValueAsMetadata *)*((void *)a2 - 1)
         : (llvm::ValueAsMetadata *)((char *)a2 - 32 * (v110 & 0x7FFFFFF));
    if ((sub_1CBF528D8((uint64_t)&p_src, *((unsigned __int8 **)v111 + 8)) & 1) == 0) {
      goto LABEL_132;
    }
    uint64_t v86 = *((unsigned int *)&dword_1CFB27AAC + (*((_WORD *)v7 + 9) & 0x3F));
  }
  v844 = 0;
  unint64_t p_s2 = (unint64_t)NullValue;
  unint64_t p_NullValue = (unint64_t)&v844;
  uint64_t p_src = 0;
  if (!v848
    || NullValue != *((llvm::LLVMContext **)v848 - 8)
    || (sub_1CBF528D8((uint64_t)&p_NullValue, *((unsigned __int8 **)v848 - 4)) & 1) == 0)
  {
    goto LABEL_132;
  }
  llvm::ConstantRange::makeExactICmpRegion(v86, (uint64_t)__src, (uint64_t)&v855);
  int v175 = *((unsigned __int8 *)v848 + 16) - 28;
  unsigned int v176 = *((_DWORD *)v844 + 2);
  if (v176 > 0x40) {
    operator new[]();
  }
  v177 = *(llvm::ConstantInt ***)v844;
  LODWORD(v837) = *((_DWORD *)v844 + 2);
  __s2 = v177;
  LODWORD(p_NullValue) = v176;
  unint64_t p_s2 = (unint64_t)v177;
  llvm::APInt::operator+=((uint64_t)&p_s2, 1uLL);
  unsigned int v839 = p_NullValue;
  unint64_t v838 = p_s2;
  llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&__s2, (unsigned int *)&v855, v175, &p_s2);
  if (v839 >= 0x41 && v838) {
    MEMORY[0x1D25D9CB0](v838, 0x1000C8000313F17);
  }
  if (v837 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  if (v857 >= 0x41 && *((void *)&v856 + 1)) {
    MEMORY[0x1D25D9CB0](*((void *)&v856 + 1), 0x1000C8000313F17);
  }
  if (v856 >= 0x41 && v855) {
    MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(*(void *)v845 + 8) > 0x40u) {
    operator new[]();
  }
  v311 = **(llvm::Constant ***)v845;
  LODWORD(v856) = *(_DWORD *)(*(void *)v845 + 8);
  v855 = v311;
  llvm::APInt::operator+=((uint64_t)&v855, 1uLL);
  unsigned int v312 = v856;
  v313 = v855;
  if (p_NullValue > 0x40)
  {
    if (!memcmp((const void *)p_s2, v311, (((unint64_t)p_NullValue + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_522;
    }
LABEL_1647:
    int v315 = 0;
    goto LABEL_527;
  }
  if ((llvm::Constant *)p_s2 != v311) {
    goto LABEL_1647;
  }
LABEL_522:
  if (v852 > 0x40) {
    BOOL v314 = memcmp((const void *)p_src, v313, (((unint64_t)v852 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v314 = p_src == (void)v313;
  }
  int v315 = v314;
LABEL_527:
  if (v312 >= 0x41 && v313) {
    MEMORY[0x1D25D9CB0](v313, 0x1000C8000313F17);
  }
  if (v315)
  {
    llvm::Instruction::dropPoisonGeneratingFlags(v848);
    v316 = v848;
  }
  else
  {
    v316 = 0;
  }
  if (v852 >= 0x41 && p_src) {
    MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
  }
  if (p_NullValue >= 0x41 && p_s2) {
    MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
  }
  if (v316)
  {
    uint64_t v143 = a1;
    v144 = a2;
    v145 = v316;
    return sub_1CC9D3C84(v143, v144, v145);
  }
LABEL_132:
  v89 = (uint64_t *)((char *)a2 - 64);
  uint64_t v90 = *(void *)(a1 + 24);
  __s2 = (void *)*((void *)a2 - 8);
  v92 = (uint64_t *)((char *)a2 - 32);
  uint64_t v91 = *((void *)a2 - 4);
  v93 = v7[1];
  if (!v93) {
    goto LABEL_166;
  }
  if (v93[1]) {
    goto LABEL_166;
  }
  __int16 v94 = *((_WORD *)v7 + 9);
  uint64_t v95 = (uint64_t)*(v7 - 8);
  __src = 0;
  v96 = (unsigned __int8 *)*(v7 - 4);
  unint64_t p_NullValue = (unint64_t)&__src;
  if (!sub_1CC9F89B4((int)&p_s2, (llvm::Constant *)v96) || !v96 || v96[16] > 0x14u) {
    goto LABEL_166;
  }
  uint64_t v97 = v94 & 0x3F;
  *(void *)unint64_t p_NullValue = v96;
  if (*(unsigned char *)(v91 + 16) != 85)
  {
    LODWORD(v97) = *((_DWORD *)&dword_1CFB27AAC + v97);
    v98 = __s2;
    __s2 = (void *)v91;
    uint64_t v91 = (uint64_t)v98;
  }
  if ((v97 - 35) < 2)
  {
    v112 = (llvm::Constant *)__src;
    v113 = *(llvm::Type **)__src;
    if ((*(_DWORD *)(*(void *)__src + 8) & 0xFE) == 0x12) {
      v113 = (llvm::Type *)**((void **)v113 + 2);
    }
    LODWORD(v856) = llvm::Type::getPrimitiveSizeInBits(v113);
    if (v856 > 0x40) {
      operator new[]();
    }
    v855 = 0;
    unint64_t p_s2 = 33;
    unint64_t p_NullValue = (unint64_t)&v855;
    char v114 = sub_1CC9F981C((uint64_t)&p_s2, v112);
    if (v856 >= 0x41 && v855) {
      MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
    }
    if ((v114 & 1) == 0) {
      goto LABEL_166;
    }
  }
  else
  {
    if (v97 != 34 && v97 != 37) {
      goto LABEL_166;
    }
    v99 = (llvm::Constant *)__src;
    v100 = *(llvm::Type **)__src;
    if ((*(_DWORD *)(*(void *)__src + 8) & 0xFE) == 0x12) {
      v100 = (llvm::Type *)**((void **)v100 + 2);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v100);
    LODWORD(v856) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40) {
      operator new[]();
    }
    if (PrimitiveSizeInBits) {
      v102 = (llvm::Constant *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    }
    else {
      v102 = 0;
    }
    v855 = v102;
    unint64_t p_s2 = 33;
    unint64_t p_NullValue = (unint64_t)&v855;
    int v103 = sub_1CC9F981C((uint64_t)&p_s2, v99);
    if (v856 >= 0x41 && v855) {
      MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
    }
    if (!v103) {
      goto LABEL_166;
    }
    v104 = (llvm::ConstantExpr *)__src;
    v105 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)__src, 1uLL, 0);
    __src = llvm::ConstantExpr::getAdd(v104, v105, 0, 0);
  }
  uint64_t v115 = *(void *)(v91 + 8);
  if (!v115 || *(void *)(v115 + 8)) {
    goto LABEL_166;
  }
  v200 = (int8x8_t *)__s2;
  if (*(void *)v95 != *(void *)__s2)
  {
    uint64_t v201 = *((void *)__s2 + 1);
    if (v201)
    {
      if (!*(void *)(v201 + 8))
      {
        unint64_t p_s2 = (unint64_t)&__s2;
        unint64_t p_NullValue = (unint64_t)&__s2;
        if ((sub_1CBC5BF18((void **)&p_s2, (uint64_t)__s2) & 1) == 0) {
          *(void *)unint64_t p_NullValue = v200;
        }
        v200 = (int8x8_t *)__s2;
      }
    }
  }
  NullValue = 0;
  if ((int8x8_t *)v95 == v200)
  {
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v95, v106, v107);
  }
  else
  {
    unint64_t p_s2 = (unint64_t)v200;
    uint64_t p_src = (uint64_t)&NullValue;
    int v202 = *(unsigned __int8 *)(v95 + 16);
    if (v202 == 5)
    {
      if (*(_WORD *)(v95 + 18) != 13) {
        goto LABEL_166;
      }
      v317 = (int8x8_t **)(v95 - 32 * (*(_DWORD *)(v95 + 20) & 0x7FFFFFF));
      if (v200 != *v317) {
        goto LABEL_166;
      }
      v318 = (llvm::Constant *)v317[4];
      if (v318 && *((unsigned char *)v318 + 16) == 16)
      {
        char v319 = 1;
      }
      else
      {
        uint64_t v429 = *(void *)v318;
        if (*(void *)v318) {
          BOOL v430 = (*(_DWORD *)(*(void *)v318 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v430 = 0;
        }
        if (!v430) {
          goto LABEL_166;
        }
        v431 = (llvm::Constant *)v317[4];
        SplatValue = llvm::Constant::getSplatValue(v318, 0);
        if (!SplatValue || SplatValue[16] != 16)
        {
          if (*(unsigned char *)(v429 + 8) == 18)
          {
            int v831 = *(_DWORD *)(v429 + 32);
            if (v831)
            {
              v318 = v431;
              v614 = 0;
              char v319 = 0;
              while (1)
              {
                AggregateElement = llvm::Constant::getAggregateElement(v318, v614);
                if (!AggregateElement) {
                  break;
                }
                v318 = v431;
                int v616 = *((unsigned __int8 *)AggregateElement + 16);
                if ((v616 - 11) >= 2)
                {
                  if (v616 != 16) {
                    goto LABEL_166;
                  }
                  char v319 = 1;
                }
                v614 = (llvm::Type *)(v614 + 1);
                if (v831 == v614) {
                  goto LABEL_540;
                }
              }
            }
          }
          goto LABEL_166;
        }
        char v319 = 1;
        v318 = v431;
      }
LABEL_540:
      if (!v318 || (v319 & 1) == 0) {
        goto LABEL_166;
      }
      *(void *)uint64_t p_src = v318;
    }
    else
    {
      if (v202 != 41) {
        goto LABEL_166;
      }
      if (v200 != *(int8x8_t **)(v95 - 64)) {
        goto LABEL_166;
      }
      v203 = *(unsigned __int8 **)(v95 - 32);
      if (!sub_1CC9F89B4((int)&p_NullValue, (llvm::Constant *)v203) || !v203 || v203[16] > 0x14u) {
        goto LABEL_166;
      }
      *(void *)uint64_t p_src = v203;
    }
  }
  v848 = 0;
  int v841 = 0;
  v844 = 0;
  *(void *)v845 = 0;
  v840 = 0;
  v855 = (llvm::Constant *)&v848;
  *(void *)&long long v856 = &v844;
  *((void *)&v856 + 1) = &v840;
  if (!sub_1CC189B48((void **)&v855, v91)) {
    goto LABEL_166;
  }
  unint64_t p_s2 = (unint64_t)&v841;
  unint64_t p_NullValue = (unint64_t)__s2;
  *(void *)&long long v852 = v845;
  if ((sub_1CD68CC08((uint64_t)&p_s2, (uint64_t)v848) & 1) == 0) {
    goto LABEL_166;
  }
  uint64_t v230 = *((void *)v848 + 1);
  if (!v230 || *(void *)(v230 + 8))
  {
    if ((void *)v95 == __s2) {
      goto LABEL_166;
    }
    uint64_t v231 = *(void *)(v95 + 8);
    if (!v231 || *(void *)(v231 + 8)) {
      goto LABEL_166;
    }
  }
  if (v841 != 40)
  {
    if (v841 != 39)
    {
      if (v841 != 38) {
        goto LABEL_166;
      }
      v232 = *(llvm::Constant **)v845;
      v233 = **(llvm::Type ***)v845;
      if ((*(_DWORD *)(**(void **)v845 + 8) & 0xFE) == 0x12) {
        v233 = (llvm::Type *)**((void **)v233 + 2);
      }
      unsigned int v234 = llvm::Type::getPrimitiveSizeInBits(v233);
      LODWORD(v856) = v234;
      if (v234 > 0x40) {
        operator new[]();
      }
      if (v234) {
        unint64_t v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v234;
      }
      else {
        unint64_t v235 = 0;
      }
      v855 = (llvm::Constant *)(v235 & ~(1 << (v234 - 1)));
      unint64_t p_s2 = 33;
      unint64_t p_NullValue = (unint64_t)&v855;
      int v236 = sub_1CC9F981C((uint64_t)&p_s2, v232);
      if (v856 >= 0x41 && v855) {
        MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
      }
      if (!v236) {
        goto LABEL_166;
      }
      v237 = *(llvm::ConstantExpr **)v845;
      v238 = (llvm::Constant *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)v845, 1uLL, 0);
      *(void *)v845 = llvm::ConstantExpr::getAdd(v237, v238, 0, 0);
    }
    v239 = v844;
    v844 = v840;
    v840 = v239;
  }
  v240 = NullValue;
  v241 = *(llvm::ConstantFP **)NullValue;
  if ((*(_DWORD *)(*(void *)NullValue + 8) & 0xFE) == 0x12) {
    unsigned int v242 = *(unsigned __int8 *)(**((void **)v241 + 2) + 8);
  }
  else {
    unsigned int v242 = *(_DWORD *)(*(void *)NullValue + 8);
  }
  if (v242 <= 6) {
    Zero = llvm::ConstantFP::getZero(v241, (llvm::Type *)1, v229);
  }
  else {
    Zero = llvm::Constant::getNullValue(v241, v228, v229);
  }
  v245 = Zero;
  uint64_t v246 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v240, v244);
  if (!v246)
  {
    v814 = *(void ***)v245;
    if (*(void *)v245)
    {
      v855 = v245;
      *(void *)&long long v856 = v240;
      uint64_t v815 = **v814 + 1512;
      LODWORD(p_s2) = 15;
      unint64_t p_NullValue = (unint64_t)&v855;
      uint64_t p_src = 2;
      long long v852 = 0u;
      long long v853 = 0u;
      uint64_t v854 = 0;
      uint64_t v246 = sub_1CC56C20C(v815, (uint64_t)v814, (unsigned __int8 *)&p_s2);
    }
    else
    {
      uint64_t v246 = 0;
    }
  }
  Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)__src, NullValue, 0, 0);
  if (v97 == 35) {
    v249 = (llvm::Constant *)v246;
  }
  else {
    v249 = Sub;
  }
  if (v97 == 35) {
    v250 = Sub;
  }
  else {
    v250 = (llvm::Constant *)v246;
  }
  ICmp = (llvm::Constant *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x27, *(llvm::Type **)v845, v250, 0, v248);
  if (sub_1CBF5270C((uint64_t)&p_s2, ICmp))
  {
    v253 = (llvm::Constant *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x29, *(llvm::Type **)v845, v249, 0, v252);
    if (sub_1CBF5270C((uint64_t)&p_s2, v253))
    {
      v254 = __s2;
      if (*(void *)__s2 != *(void *)a2)
      {
        unsigned int v255 = *((unsigned __int8 *)v844 + 16);
        if (v255 == 5) {
          goto LABEL_166;
        }
        if (!v844) {
          goto LABEL_166;
        }
        if (v255 > 0x14) {
          goto LABEL_166;
        }
        v256 = v840;
        unsigned int v257 = *((unsigned __int8 *)v840 + 16);
        if (v257 == 5 || !v840 || v257 > 0x14) {
          goto LABEL_166;
        }
        v844 = sub_1CC56C0C0((llvm *)0x28, v844, *(llvm::Constant **)__s2, 0);
        v840 = sub_1CC56C0C0((llvm *)0x28, v256, *(llvm::Constant **)__s2, 0);
        v254 = __s2;
      }
      WORD4(v852) = 257;
      v258 = sub_1CB845F20(v90, 40, v254, (uint64_t)v250, (uint64_t)&p_s2);
      WORD4(v852) = 257;
      v259 = sub_1CB845F20(v90, 39, __s2, (uint64_t)v249, (uint64_t)&p_s2);
      WORD4(v852) = 257;
      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v90, v258, v844, (llvm::Value *)__s2, (const llvm::Twine *)&p_s2, 0);
      WORD4(v852) = 257;
      v261 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v90, v259, v840, Select, (const llvm::Twine *)&p_s2, 0);
      v142 = v261;
      uint64_t v262 = *(void *)a2;
      __int16 v858 = 257;
      if (*(void *)v261 == v262) {
        goto LABEL_213;
      }
      if (*((unsigned __int8 *)v261 + 16) <= 0x14u)
      {
        uint64_t v801 = (*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(v90 + 72) + 224))(*(void *)(v90 + 72), 38, v261, v262);
        v142 = (llvm::Instruction *)v801;
        if (!v801) {
          goto LABEL_213;
        }
        if (*(unsigned __int8 *)(v801 + 16) < 0x1Cu) {
          goto LABEL_213;
        }
        (*(void (**)(void, uint64_t, llvm::Constant **, void, void))(**(void **)(v90 + 80) + 16))(*(void *)(v90 + 80), v801, &v855, *(void *)(v90 + 48), *(void *)(v90 + 56));
        uint64_t v802 = *(unsigned int *)(v90 + 8);
        if (!v802) {
          goto LABEL_213;
        }
        uint64_t v803 = *(void *)v90;
        uint64_t v804 = *(void *)v90 + 16 * v802;
        do
        {
          llvm::Instruction::setMetadata(v142, *(_DWORD *)v803, *(llvm::MDNode **)(v803 + 8));
          v803 += 16;
        }
        while (v803 != v804);
      }
      else
      {
        WORD4(v852) = 257;
        v142 = llvm::CastInst::Create(38, (uint64_t)v261, v262, (const char **)&p_s2, 0);
        (*(void (**)(void, llvm::Instruction *, llvm::Constant **, void, void))(**(void **)(v90 + 80)
                                                                                               + 16))(*(void *)(v90 + 80), v142, &v855, *(void *)(v90 + 48), *(void *)(v90 + 56));
        uint64_t v263 = *(unsigned int *)(v90 + 8);
        if (v263)
        {
          uint64_t v812 = *(void *)v90;
          uint64_t v813 = *(void *)v90 + 16 * v263;
          do
          {
            llvm::Instruction::setMetadata(v142, *(_DWORD *)v812, *(llvm::MDNode **)(v812 + 8));
            v812 += 16;
          }
          while (v812 != v813);
        }
      }
      if (v142)
      {
LABEL_213:
        uint64_t v143 = a1;
        v144 = a2;
        v145 = v142;
        return sub_1CC9D3C84(v143, v144, v145);
      }
    }
  }
LABEL_166:
  *(_DWORD *)v845 = 0;
  v848 = 0;
  unint64_t p_s2 = (unint64_t)v845;
  unint64_t p_NullValue = (unint64_t)&NullValue;
  *(void *)&long long v852 = &v848;
  v116 = v7[1];
  if (!v116) {
    goto LABEL_168;
  }
  if (v116[1]) {
    goto LABEL_168;
  }
  if (!*v825) {
    goto LABEL_168;
  }
  NullValue = *v825;
  v128 = (unsigned __int8 *)*(v7 - 4);
  if (!sub_1CC9F89B4((int)&p_src, (llvm::Constant *)v128)) {
    goto LABEL_168;
  }
  if (!v128) {
    goto LABEL_168;
  }
  if (v128[16] >= 0x15u) {
    goto LABEL_168;
  }
  *(void *)long long v852 = v128;
  *(_DWORD *)unint64_t p_s2 = *((_WORD *)v7 + 9) & 0x3F;
  if ((*(_DWORD *)v845 & 0xFFFFFFFE) == 0x20
    || *(_DWORD *)v845 <= 0x29u && ((1 << SLOBYTE(v845[0])) & 0x2AA00000068) != 0)
  {
    goto LABEL_168;
  }
  if (*(void *)v848 != *(void *)a2) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v845 == 36)
  {
    int v129 = *((unsigned __int8 *)NullValue + 16);
    if (v129 == 5)
    {
      if (*((_WORD *)NullValue + 9) == 13) {
        goto LABEL_168;
      }
    }
    else if (v129 == 41 && *(unsigned __int8 *)(*((void *)NullValue - 4) + 16) < 0x15u)
    {
      goto LABEL_168;
    }
  }
  if (*((unsigned char *)a2 + 16) == 85)
  {
    int v409 = *((_DWORD *)a2 + 5);
    if ((v409 & 0x40000000) != 0) {
      v410 = (void ***)*((void *)a2 - 1);
    }
    else {
      v410 = (void ***)((char *)a2 - 32 * (v409 & 0x7FFFFFF));
    }
    v411 = (llvm::Value *)v410[4];
    if (v411)
    {
      v412 = (llvm::Value *)v410[8];
      goto LABEL_790;
    }
  }
  else
  {
    v411 = 0;
  }
  v412 = 0;
LABEL_790:
  if (sub_1CC9F89B4((int)&p_s2, v411) & 1) != 0 || (sub_1CC9F89B4((int)&v855, v412))
  {
    v413 = v848;
    if ((llvm::Constant::isElementWiseEqual(v848, v411) & 1) == 0
      && (llvm::Constant::isElementWiseEqual(v413, v412) & 1) == 0)
    {
      sub_1CCA50180(v848, *(unsigned int *)v845, (uint64_t)&__s2);
      if ((_BYTE)v838)
      {
        v414 = v837;
        if ((llvm::Constant::isElementWiseEqual(v837, v411) & 1) != 0
          || (llvm::Constant::isElementWiseEqual(v414, v412) & 1) != 0)
        {
          uint64_t v415 = *(void *)(a1 + 24);
          v855 = (llvm::Constant *)v415;
          long long v856 = *(_OWORD *)(v415 + 48);
          uint64_t v416 = *(unsigned int *)(v415 + 8);
          if (v416)
          {
            v809 = (unsigned __int8 **)(*(void *)v415 + 8);
            uint64_t v810 = 16 * v416;
            while (*((_DWORD *)v809 - 2))
            {
              v809 += 2;
              v810 -= 16;
              if (!v810) {
                goto LABEL_798;
              }
            }
            v857 = *v809;
            if (v857)
            {
              llvm::MetadataTracking::track((uint64_t)&v857, v857, 2);
              uint64_t v415 = *(void *)(a1 + 24);
            }
          }
          else
          {
LABEL_798:
            v857 = 0;
          }
          *(void *)(v415 + 48) = *((void *)a2 + 5);
          *(void *)(v415 + 56) = (char *)a2 + 24;
          v417 = (void **)*((void *)a2 + 6);
          __src = v417;
          if (v417)
          {
            llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v417, 2);
            v418 = __src;
          }
          else
          {
            v418 = 0;
          }
          sub_1CB8461A4(v415, 0, (uint64_t)v418);
          if (!__src)
          {
LABEL_802:
            int v419 = *((_DWORD *)&dword_1CFB27B54 + *(int *)v845);
            *(_DWORD *)v845 = v419;
            uint64_t v420 = *(void *)(a1 + 24);
            if ((*((unsigned char *)v7 + 23) & 0x10) == 0)
            {
              v636 = 0;
              v635 = &byte_1CFBCE98E;
              goto LABEL_1206;
            }
            uint64_t v421 = ***v7;
            uint64_t v422 = *(void *)(v421 + 152);
            uint64_t v423 = *(unsigned int *)(v421 + 168);
            if (v423)
            {
              LODWORD(v424) = (v423 - 1) & ((v7 >> 4) ^ (v7 >> 9));
              v425 = (uint64_t ****)(v422 + 16 * v424);
              v426 = *v425;
              if (*v425 == v7)
              {
LABEL_1205:
                v634 = v425[1];
                v637 = (int8x8_t **)*v634;
                v635 = (char *)(v634 + 2);
                v636 = v637;
LABEL_1206:
                WORD4(v852) = 773;
                unint64_t p_s2 = (unint64_t)v635;
                unint64_t p_NullValue = (unint64_t)v636;
                uint64_t p_src = (uint64_t)".inv";
                v638 = sub_1CB845F20(v420, v419, NullValue, (uint64_t)v837, (uint64_t)&p_s2);
                sub_1CC9D28DC(a1, (uint64_t)a2, 0, (uint64_t)v638);
                v639 = (void **)*((void *)a2 - 8);
                v640 = (void **)*((void *)a2 - 4);
                if (v639 != v640)
                {
                  v641 = (void **)*((void *)a2 - 3);
                  *((void *)a2 - 8) = v640;
                  *((void *)a2 - 4) = v639;
                  long long v642 = *(_OWORD *)((char *)a2 - 56);
                  v643 = (uint64_t **)*((void *)a2 - 2);
                  *((void *)a2 - 7) = v641;
                  *((void *)a2 - 6) = v643;
                  *(_OWORD *)((char *)a2 - 24) = v642;
                  *v643 = v89;
                  uint64_t v644 = *((void *)a2 - 7);
                  if (v644) {
                    *(void *)(v644 + 16) = (char *)a2 - 56;
                  }
                  **((void **)a2 - 2) = v92;
                  uint64_t v645 = *((void *)a2 - 3);
                  if (v645) {
                    *(void *)(v645 + 16) = (char *)a2 - 24;
                  }
                }
                llvm::Instruction::swapProfMetadata(a2);
                v646 = v855;
                if ((void)v856)
                {
                  sub_1CBF5385C((uint64_t)v855, v856, *((uint64_t *)&v856 + 1));
                  v646 = v855;
                }
                else
                {
                  *((void *)v855 + 6) = 0;
                  *((void *)v646 + 7) = 0;
                }
                __src = v857;
                if (v857)
                {
                  llvm::MetadataTracking::track((uint64_t)&__src, v857, 2);
                  v647 = __src;
                }
                else
                {
                  v647 = 0;
                }
                sub_1CB8461A4((uint64_t)v646, 0, (uint64_t)v647);
                v306 = __src;
                if (!__src) {
                  goto LABEL_499;
                }
                int v441 = *(unsigned __int8 *)__src;
                if ((v441 - 4) <= 0x1E)
                {
                  if ((*((unsigned char *)__src + 1) & 0x7F) == 2 || *((_DWORD *)__src + 3))
                  {
                    uint64_t v648 = *((void *)__src + 2);
                    if ((v648 & 4) != 0)
                    {
                      unint64_t v443 = v648 & 0xFFFFFFFFFFFFFFF8;
                      if (v443) {
                        goto LABEL_1653;
                      }
                    }
                  }
LABEL_499:
                  if (v857)
                  {
                    int v436 = *v857;
                    if ((v436 - 4) > 0x1E)
                    {
                      if ((v436 - 3) >= 0xFFFFFFFE) {
                        v618 = v857;
                      }
                      else {
                        v618 = 0;
                      }
                      if ((v436 - 3) < 0xFFFFFFFE)
                      {
                        if (v436 == 3) {
                          *((void *)v857 + 1) = 0;
                        }
                        return (llvm::UndefValue **)a2;
                      }
                      unint64_t v438 = (unint64_t)(v618 + 8);
                    }
                    else
                    {
                      if ((v857[1] & 0x7F) != 2 && !*((_DWORD *)v857 + 3)) {
                        return (llvm::UndefValue **)a2;
                      }
                      uint64_t v437 = *((void *)v857 + 2);
                      if ((v437 & 4) == 0) {
                        return (llvm::UndefValue **)a2;
                      }
                      unint64_t v438 = v437 & 0xFFFFFFFFFFFFFFF8;
                      if (!v438) {
                        return (llvm::UndefValue **)a2;
                      }
                    }
                    unint64_t p_s2 = (unint64_t)&v857;
                    sub_1CC5FA668(v438 + 16, &p_s2);
                  }
                  return (llvm::UndefValue **)a2;
                }
                if ((v441 - 3) >= 0xFFFFFFFE) {
                  v811 = __src;
                }
                else {
                  v811 = 0;
                }
                if ((v441 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v443 = (unint64_t)v811 + 8;
LABEL_1653:
                  v620 = &__src;
                  goto LABEL_1176;
                }
LABEL_1654:
                if (v441 == 3) {
                  v306[1] = 0;
                }
                goto LABEL_499;
              }
              int v427 = 1;
              while (v426 != (uint64_t ***)-4096)
              {
                int v428 = v424 + v427++;
                uint64_t v424 = v428 & (v423 - 1);
                v426 = *(uint64_t ****)(v422 + 16 * v424);
                if (v426 == v7)
                {
                  v425 = (uint64_t ****)(v422 + 16 * v424);
                  goto LABEL_1205;
                }
              }
            }
            v425 = (uint64_t ****)(v422 + 16 * v423);
            goto LABEL_1205;
          }
          int v778 = *(unsigned __int8 *)__src;
          if ((v778 - 4) > 0x1E)
          {
            if ((v778 - 3) >= 0xFFFFFFFE) {
              v796 = __src;
            }
            else {
              v796 = 0;
            }
            if ((v778 - 3) < 0xFFFFFFFE)
            {
              if (v778 == 3) {
                *((void *)__src + 1) = 0;
              }
              goto LABEL_802;
            }
            unint64_t v780 = (unint64_t)v796 + 8;
          }
          else
          {
            if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3)) {
              goto LABEL_802;
            }
            uint64_t v779 = *((void *)__src + 2);
            if ((v779 & 4) == 0) {
              goto LABEL_802;
            }
            unint64_t v780 = v779 & 0xFFFFFFFFFFFFFFF8;
            if (!v780) {
              goto LABEL_802;
            }
          }
          unint64_t p_s2 = (unint64_t)&__src;
          sub_1CC5FA668(v780 + 16, &p_s2);
          goto LABEL_802;
        }
      }
    }
  }
LABEL_168:
  p_unint64_t p_NullValue = (uint64_t *)(v7 - 4);
  v117 = (unsigned __int8 *)*(v7 - 4);
  __int16 v119 = *((_WORD *)v7 + 9);
  v120 = (llvm::LLVMContext ***)*(v7 - 8);
  uint64_t v121 = *v89;
  uint64_t v122 = *v92;
  __s2 = 0;
  v123 = v7[1];
  if (!v123) {
    goto LABEL_189;
  }
  if (v123[1]) {
    goto LABEL_189;
  }
  unint64_t p_s2 = (unint64_t)&__s2;
  unint64_t p_NullValue = 0;
  if ((sub_1CBF528D8((uint64_t)&p_s2, v117) & 1) == 0) {
    goto LABEL_189;
  }
  v124 = *(llvm::Constant **)a2;
  int v125 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
  if (v125 == 18)
  {
    uint64_t v126 = **((void **)v124 + 2);
    int v127 = *(unsigned __int8 *)(v126 + 8);
  }
  else
  {
    int v127 = *(_DWORD *)(*(void *)a2 + 8);
    uint64_t v126 = *(void *)a2;
  }
  if (v127 != 13 || (v125 == 18) != (((*v7)[1] & 0xFE) == 18)) {
    goto LABEL_189;
  }
  int v171 = v119 & 0x3F;
  if ((v119 & 0x3B) == 0x22)
  {
    size_t v823 = *(void *)v117;
    LODWORD(v856) = *((_DWORD *)__s2 + 2);
    uint64_t v827 = v126;
    uint64_t v829 = v119 & 0x3F;
    if (v856 > 0x40) {
      operator new[]();
    }
    v855 = *(llvm::Constant **)__s2;
    llvm::APInt::operator+=((uint64_t)&v855, 1uLL);
  }
  else
  {
    if (v171 != 40 && v171 != 36) {
      goto LABEL_189;
    }
    size_t v823 = *(void *)v117;
    LODWORD(v856) = *((_DWORD *)__s2 + 2);
    uint64_t v827 = v126;
    uint64_t v829 = v119 & 0x3F;
    if (v856 > 0x40) {
      operator new[]();
    }
    v855 = *(llvm::Constant **)__s2;
    llvm::APInt::operator-=((uint64_t)&v855, 1uLL);
  }
  LODWORD(p_NullValue) = v856;
  unint64_t p_s2 = (unint64_t)v855;
  LODWORD(v856) = 0;
  v204 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v823, (llvm::LLVMContext *)&p_s2, v198);
  Splat = v204;
  if ((*(_DWORD *)(v823 + 8) & 0xFE) == 0x12) {
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v823 + 32) | ((unint64_t)(*(_DWORD *)(v823 + 8) == 19) << 32)), (uint64_t)v204);
  }
  if (p_NullValue >= 0x41 && p_s2) {
    MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
  }
  if (v856 >= 0x41 && v855) {
    MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
  }
  if (v120 == (llvm::LLVMContext ***)v121 && Splat == (llvm::Value *)v122)
  {
    v206 = v120;
    uint64_t v207 = v122;
    goto LABEL_348;
  }
  if (v120 != (llvm::LLVMContext ***)v122 || Splat != (llvm::Value *)v121)
  {
    v225 = *(llvm::Type **)v117;
    if ((*(_DWORD *)(*(void *)v117 + 8) & 0xFE) == 0x12) {
      v225 = (llvm::Type *)**((void **)v225 + 2);
    }
    if (llvm::Type::getPrimitiveSizeInBits(v225) >= *(_DWORD *)(v827 + 8) >> 8) {
      goto LABEL_189;
    }
    v226 = sub_1CC56C0C0((llvm *)0x28, Splat, v124, 0);
    unint64_t p_s2 = (unint64_t)v120;
    if (sub_1CC184DAC(&p_s2, v121))
    {
      v206 = (llvm::LLVMContext ***)v121;
      uint64_t v207 = v122;
      if (v226 == (llvm::detail::IEEEFloat *)v122) {
        goto LABEL_348;
      }
    }
    unint64_t p_s2 = (unint64_t)v120;
    if (sub_1CC184DAC(&p_s2, v122))
    {
      v206 = (llvm::LLVMContext ***)v122;
      uint64_t v207 = v121;
      if (v226 == (llvm::detail::IEEEFloat *)v121) {
        goto LABEL_348;
      }
    }
    if ((*((_WORD *)v7 + 9) & 0x3Eu) - 34 <= 3)
    {
      v227 = sub_1CC56C0C0((llvm *)0x27, Splat, v124, 0);
      unint64_t p_s2 = (unint64_t)v120;
      if (!sub_1CC9F993C(&p_s2, v121)
        || (v206 = (llvm::LLVMContext ***)v121, uint64_t v207 = v122, v227 != (llvm::detail::IEEEFloat *)v122))
      {
        unint64_t p_s2 = (unint64_t)v120;
        int v826 = 0;
        if (!sub_1CC9F993C(&p_s2, v122)) {
          goto LABEL_190;
        }
        v206 = (llvm::LLVMContext ***)v122;
        uint64_t v207 = v121;
        if (v227 != (llvm::detail::IEEEFloat *)v121) {
          goto LABEL_190;
        }
      }
      goto LABEL_348;
    }
LABEL_189:
    int v826 = 0;
    goto LABEL_190;
  }
  v206 = v120;
  uint64_t v207 = v121;
LABEL_348:
  *((_WORD *)v7 + 9) = *((_WORD *)v7 + 9) & 0xFFC0 | asc_1CFB27C00[v829 - 34];
  if (*(v7 - 8))
  {
    **(v7 - 6) = (uint64_t *)*(v7 - 7);
    uint64_t v208 = (uint64_t)*(v7 - 7);
    if (v208) {
      *(void *)(v208 + 16) = *(v7 - 6);
    }
  }
  *v825 = (llvm::LLVMContext *)v206;
  if (v206)
  {
    v211 = v206[1];
    v209 = v206 + 1;
    v210 = v211;
    *(v7 - 7) = (uint64_t **)v211;
    if (v211) {
      v210[2] = (llvm::LLVMContext *)(v7 - 7);
    }
    *(v7 - 6) = (uint64_t **)v209;
    *v209 = v825;
  }
  if (*p_p_NullValue)
  {
    **(v7 - 2) = (uint64_t *)*(v7 - 3);
    uint64_t v212 = (uint64_t)*(v7 - 3);
    if (v212) {
      *(void *)(v212 + 16) = *(v7 - 2);
    }
  }
  uint64_t *p_p_NullValue = v207;
  if (v207)
  {
    v215 = *(void ***)(v207 + 8);
    v213 = (uint64_t **)(v207 + 8);
    v214 = v215;
    *(v7 - 3) = v215;
    if (v215) {
      v214[2] = v7 - 3;
    }
    *(v7 - 2) = v213;
    *v213 = p_p_NullValue;
  }
  if (*v89)
  {
    **((void **)a2 - 6) = *((void *)a2 - 7);
    uint64_t v216 = *((void *)a2 - 7);
    if (v216) {
      *(void *)(v216 + 16) = *((void *)a2 - 6);
    }
  }
  uint64_t *v89 = v122;
  if (v122)
  {
    v219 = *(void ***)(v122 + 8);
    v218 = (uint64_t **)(v122 + 8);
    v217 = v219;
    *((void *)a2 - 7) = v219;
    if (v219) {
      v217[2] = (void *)((char *)a2 - 56);
    }
    *((void *)a2 - 6) = v218;
    *v218 = v89;
  }
  if (*v92)
  {
    **((void **)a2 - 2) = *((void *)a2 - 3);
    uint64_t v220 = *((void *)a2 - 3);
    if (v220) {
      *(void *)(v220 + 16) = *((void *)a2 - 2);
    }
  }
  uint64_t *v92 = v121;
  v221 = a2;
  if (v121)
  {
    v224 = *(void ***)(v121 + 8);
    v223 = (uint64_t **)(v121 + 8);
    v222 = v224;
    *((void *)a2 - 3) = v224;
    if (v224) {
      v222[2] = (void *)((char *)a2 - 24);
    }
    v221 = a2;
    *((void *)a2 - 2) = v223;
    *v223 = v92;
  }
  llvm::Instruction::swapProfMetadata(v221);
  llvm::Instruction::moveBefore((llvm::Instruction *)v7, v221);
  int v826 = 1;
LABEL_190:
  uint64_t v130 = *(void *)(a1 + 24);
  v848 = 0;
  *(void *)v845 = 0;
  v131 = (unsigned __int8 *)*v89;
  unint64_t p_s2 = (unint64_t)&v848;
  unint64_t p_NullValue = 0;
  if (!sub_1CBF528D8((uint64_t)&p_s2, v131)) {
    goto LABEL_214;
  }
  v132 = (unsigned __int8 *)*v92;
  v855 = (llvm::Constant *)v845;
  *(void *)&long long v856 = 0;
  if ((sub_1CBF528D8((uint64_t)&v855, v132) & 1) == 0) {
    goto LABEL_214;
  }
  uint64_t v133 = *(void *)a2;
  if (((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18) != (((*v7)[1] & 0xFE) == 18)) {
    goto LABEL_214;
  }
  v844 = 0;
  LODWORD(v837) = 1;
  __s2 = 0;
  __int16 v134 = *((_WORD *)v7 + 9);
  LODWORD(v840) = v134 & 0x3F;
  int v135 = v134 & 0x3E;
  if (v135 == 32)
  {
    uint64_t v136 = *p_p_NullValue;
    if (!*p_p_NullValue) {
      goto LABEL_208;
    }
    unsigned int v137 = *(unsigned __int8 *)(v136 + 16);
    if (v137 > 0x14) {
      goto LABEL_208;
    }
    if (v137 == 16)
    {
      uint64_t v138 = *(unsigned int *)(v136 + 32);
      if (v138 < 0x41)
      {
        if (*(void *)(v136 + 24)) {
          goto LABEL_199;
        }
LABEL_200:
        v844 = *v825;
        v855 = 0;
        unint64_t p_NullValue = (unint64_t)&v855;
        if (sub_1CCAA91E4((uint64_t)&p_s2, (uint64_t)v844))
        {
          v140 = (void **)v855;
          if (v837 > 0x40 || (unsigned int v141 = *((_DWORD *)v855 + 2), v141 > 0x40))
          {
            if (&__s2 != (void **)v855)
            {
              llvm::APInt::reallocate((uint64_t)&__s2, *((_DWORD *)v855 + 2));
              if (v837 <= 0x40) {
                __s2 = *v140;
              }
              else {
                memcpy(__s2, *v140, (((unint64_t)v837 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            __s2 = *(void **)v855;
            LODWORD(v837) = v141;
          }
          goto LABEL_301;
        }
LABEL_208:
        v142 = 0;
        goto LABEL_209;
      }
      int v781 = 0;
      int64_t v782 = (unint64_t)(v138 + 63) >> 6;
      do
      {
        BOOL v336 = v782-- < 1;
        if (v336) {
          break;
        }
        unint64_t v783 = *(void *)(*(void *)(v136 + 24) + 8 * v782);
        v781 += __clz(v783);
      }
      while (!v783);
      int v784 = v138 | 0xFFFFFFC0;
      if ((v138 & 0x3F) == 0) {
        int v784 = 0;
      }
      if (v781 + v784 == v138) {
        goto LABEL_200;
      }
    }
    else if (v137 == 17)
    {
      if (sub_1CB844168(*p_p_NullValue, 0.0)) {
        goto LABEL_200;
      }
    }
    else if (v137 - 18 < 3 || v137 == 13)
    {
      goto LABEL_200;
    }
LABEL_199:
    if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v136) & 1) == 0) {
      goto LABEL_208;
    }
    goto LABEL_200;
  }
  if (!llvm::decomposeBitTestICmp((uint64_t)*v825, (unsigned __int8 *)*p_p_NullValue, (int *)&v840, (uint64_t *)&v844, (int8x8_t ***)&__s2, 1))goto LABEL_208; {
  if (v837 > 0x40)
  }
  {
    uint64_t v172 = 0;
    int v173 = 0;
    do
    {
      uint8x8_t v174 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)__s2 + v172));
      v174.i16[0] = vaddlv_u8(v174);
      v173 += v174.i32[0];
      v172 += 8;
    }
    while (((((unint64_t)v837 + 63) >> 3) & 0x3FFFFFF8) != v172);
    if (v173 != 1)
    {
      v142 = 0;
LABEL_211:
      MEMORY[0x1D25D9CB0]();
      goto LABEL_212;
    }
  }
  else
  {
    if (!__s2) {
      goto LABEL_214;
    }
    if (((unint64_t)__s2 & ((unint64_t)__s2 - 1)) != 0) {
      goto LABEL_208;
    }
  }
LABEL_301:
  unsigned int v194 = *((_DWORD *)v848 + 2);
  unsigned int v847 = v194;
  if (v194 > 0x40) {
    operator new[]();
  }
  __src = *(void **)v848;
  unsigned int v195 = *(_DWORD *)(*(void *)v845 + 8);
  unsigned int v843 = v195;
  if (v195 > 0x40) {
    operator new[]();
  }
  uint64_t v196 = **(void **)v845;
  NullValue = **(llvm::LLVMContext ***)v845;
  if (__src)
  {
    v197 = __src;
    if (v196)
    {
      if (v194 != v837 || (void *)(v196 ^ (unint64_t)__src) != __s2) {
        goto LABEL_547;
      }
      if (v135 == 32)
      {
LABEL_503:
        if (v847 > 0x40)
        {
          unint64_t v793 = (((unint64_t)v847 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v793)
            {
              int v307 = 0;
              goto LABEL_507;
            }
            unint64_t v794 = *(void *)((char *)__src + v793 - 8);
            unint64_t v795 = *(void *)((char *)NullValue + v793 - 8);
            v793 -= 8;
          }
          while (v794 == v795);
          if (v794 > v795) {
            int v307 = 1;
          }
          else {
            int v307 = -1;
          }
        }
        else if (__src < NullValue)
        {
          int v307 = -1;
        }
        else
        {
          int v307 = __src > NullValue;
        }
LABEL_507:
        if (v840 == 32)
        {
          v308 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v133, (llvm::LLVMContext *)&__src, v139);
          if ((*(_DWORD *)(v133 + 8) & 0xFE) == 0x12) {
            v308 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v133 + 32) | ((unint64_t)(*(_DWORD *)(v133 + 8) == 19) << 32)), (uint64_t)v308);
          }
          v309 = v844;
          if (v307 >= 1)
          {
            WORD4(v852) = 257;
            p_unint64_t p_s2 = (llvm::Constant **)&p_s2;
LABEL_585:
            v329 = sub_1CC2428C0(v130, (uint64_t)v309, (uint64_t)v308, (uint64_t)p_p_s2);
            goto LABEL_586;
          }
          __int16 v858 = 257;
          v325 = &v855;
        }
        else
        {
          v308 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v133, (llvm::LLVMContext *)&NullValue, v139);
          if ((*(_DWORD *)(v133 + 8) & 0xFE) == 0x12) {
            v308 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v133 + 32) | ((unint64_t)(*(_DWORD *)(v133 + 8) == 19) << 32)), (uint64_t)v308);
          }
          v309 = v844;
          if (v307 < 1)
          {
            __int16 v858 = 257;
            p_unint64_t p_s2 = &v855;
            goto LABEL_585;
          }
          WORD4(v852) = 257;
          v325 = (llvm::Constant **)&p_s2;
        }
        v329 = sub_1CB844AF4(v130, v309, (uint64_t)v308, (uint64_t)v325);
LABEL_586:
        v142 = v329;
LABEL_548:
        if (v843 >= 0x41 && NullValue != 0) {
          MEMORY[0x1D25D9CB0](NullValue, 0x1000C8000313F17);
        }
        goto LABEL_553;
      }
      v320 = v7[1];
      if (v320 && !v320[1])
      {
        v327 = v844;
        v328 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v133, (llvm::LLVMContext *)&__s2, v139);
        if ((*(_DWORD *)(v133 + 8) & 0xFE) == 0x12) {
          v328 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v133 + 32) | ((unint64_t)(*(_DWORD *)(v133 + 8) == 19) << 32)), (uint64_t)v328);
        }
        WORD4(v852) = 257;
        v844 = sub_1CBF52474(v130, v327, (uint64_t)v328, (uint64_t)&p_s2);
        goto LABEL_503;
      }
LABEL_547:
      v142 = 0;
      goto LABEL_548;
    }
    uint8x8_t v199 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
    v199.i16[0] = vaddlv_u8(v199);
    if (v199.u32[0] == 1)
    {
LABEL_448:
      if (v197) {
        v264 = (unint64_t *)&__src;
      }
      else {
        v264 = (unint64_t *)&NullValue;
      }
      if (!v197) {
        unsigned int v194 = v195;
      }
      int v265 = v194 + __clz(*v264) - 64;
      if (v837 > 0x40)
      {
        int v267 = 0;
        int64_t v268 = ((unint64_t)v837 + 63) >> 6;
        do
        {
          BOOL v336 = v268-- < 1;
          if (v336) {
            break;
          }
          unint64_t v269 = *((void *)__s2 + v268);
          v267 += __clz(v269);
        }
        while (!v269);
        unsigned int v270 = v837 | 0xFFFFFFC0;
        if ((v837 & 0x3F) == 0) {
          unsigned int v270 = 0;
        }
        int v266 = v267 + v270;
      }
      else
      {
        int v266 = v837 + __clz((unint64_t)__s2) - 64;
      }
      unsigned int v271 = v194 + ~v265;
      unsigned int v272 = v837 + ~v266;
      if (v135 != 32)
      {
        v830 = v264;
        v273 = v844;
        v274 = *(llvm::ConstantInt ***)v844;
        v275 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v844, (llvm::LLVMContext *)&__s2, v139);
        if ((v274[1] & 0xFE) == 0x12) {
          v275 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v274 + 8) | ((unint64_t)(*((_DWORD *)v274 + 2) == 19) << 32)), (uint64_t)v275);
        }
        WORD4(v852) = 257;
        v844 = sub_1CBF52474(v130, v273, (uint64_t)v275, (uint64_t)&p_s2);
        v264 = v830;
      }
      if (v271 <= v272)
      {
        v280 = v844;
        WORD4(v852) = 257;
        if (v271 >= v272)
        {
          uint64_t v283 = v130;
          v282 = v844;
        }
        else
        {
          v281 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v844, v272 - v271, 0);
          v282 = sub_1CC2429AC(v130, (uint64_t)v280, (uint64_t)v281, (uint64_t)&p_s2, 0);
          v844 = v282;
          WORD4(v852) = 257;
          uint64_t v283 = v130;
        }
        v278 = sub_1CB844B8C(v283, (unsigned __int8 *)v282, v133, (uint64_t)&p_s2);
      }
      else
      {
        WORD4(v852) = 257;
        v276 = sub_1CB844B8C(v130, (unsigned __int8 *)v844, v133, (uint64_t)&p_s2);
        v844 = v276;
        WORD4(v852) = 257;
        v277 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v276, v271 - v272, 0);
        v278 = sub_1CC242524(v130, (uint64_t)v276, (uint64_t)v277, (uint64_t)&p_s2, 0, 0);
      }
      v142 = v278;
      v844 = v278;
      if (v847 > 0x40)
      {
        int v285 = 0;
        int64_t v286 = ((unint64_t)v847 + 63) >> 6;
        do
        {
          BOOL v336 = v286-- < 1;
          if (v336) {
            break;
          }
          unint64_t v287 = *((void *)__src + v286);
          v285 += __clz(v287);
        }
        while (!v287);
        unsigned int v288 = v847 | 0xFFFFFFC0;
        if ((v847 & 0x3F) == 0) {
          unsigned int v288 = 0;
        }
        BOOL v284 = v285 + v288 == v847;
      }
      else
      {
        BOOL v284 = __src == 0;
      }
      int v289 = v284;
      if (v289 != (v840 != 33))
      {
        WORD4(v852) = 257;
        v290 = *(llvm::ConstantInt ***)v278;
        v291 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v278, (llvm::LLVMContext *)v264, v279);
        if ((v290[1] & 0xFE) == 0x12) {
          v291 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v290 + 8) | ((unint64_t)(*((_DWORD *)v290 + 2) == 19) << 32)), (uint64_t)v291);
        }
        v142 = sub_1CC2428C0(v130, (uint64_t)v142, (uint64_t)v291, (uint64_t)&p_s2);
        v844 = v142;
      }
      goto LABEL_548;
    }
  }
  else
  {
    v197 = 0;
  }
  if (v196)
  {
    if ((v196 & (v196 - 1)) != 0) {
      goto LABEL_547;
    }
    goto LABEL_448;
  }
  v142 = 0;
LABEL_553:
  if (v847 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
LABEL_209:
  if (v837 >= 0x41 && __s2) {
    goto LABEL_211;
  }
LABEL_212:
  if (v142) {
    goto LABEL_213;
  }
LABEL_214:
  v146 = (unsigned __int8 *)*v89;
  uint64_t v828 = *v92;
  __int16 v147 = *((_WORD *)v7 + 9);
  int v148 = v147 & 0x3F;
  v149 = (unsigned __int8 *)*(v7 - 8);
  uint64_t v150 = (uint64_t)*(v7 - 4);
  if ((unsigned __int8 *)v150 != v149 && *(unsigned __int8 *)(v150 + 16) <= 0x14u)
  {
    if (v149 == v146 && v148 == 32)
    {
      if (v146)
      {
        **((void **)a2 - 6) = *((void *)a2 - 7);
        uint64_t v151 = *((void *)a2 - 7);
        if (v151) {
          *(void *)(v151 + 16) = *((void *)a2 - 6);
        }
      }
      *((void *)a2 - 8) = v150;
      v152 = (uint64_t **)(v150 + 8);
      uint64_t v153 = *(void *)(v150 + 8);
      *((void *)a2 - 7) = v153;
      if (v153) {
        *(void *)(v153 + 16) = (char *)a2 - 56;
      }
      *((void *)a2 - 6) = v152;
      *v152 = v89;
LABEL_232:
      int v157 = 0;
      int v826 = 1;
      goto LABEL_241;
    }
    if (v149 == (unsigned __int8 *)v828 && v148 == 33)
    {
      if (v828)
      {
        **((void **)a2 - 2) = *((void *)a2 - 3);
        uint64_t v154 = *((void *)a2 - 3);
        if (v154) {
          *(void *)(v154 + 16) = *((void *)a2 - 2);
        }
      }
      *((void *)a2 - 4) = v150;
      v155 = (uint64_t **)(v150 + 8);
      uint64_t v156 = *(void *)(v150 + 8);
      *((void *)a2 - 3) = v156;
      if (v156) {
        *(void *)(v156 + 16) = (char *)a2 - 24;
      }
      *((void *)a2 - 2) = v155;
      *v155 = v92;
      goto LABEL_232;
    }
  }
  if (v148 == 38)
  {
    if (!sub_1CBF687D0((uint64_t)&p_s2, (llvm::Constant *)*(v7 - 4))
      || v146[16] < 0x15u
      || *(unsigned __int8 *)(v828 + 16) < 0x15u
      || (v158 = v7[1]) == 0
      || v158[1])
    {
      int v157 = 1;
      goto LABEL_241;
    }
    uint64_t v178 = *(void *)(a1 + 24);
    v855 = (llvm::Constant *)v178;
    long long v856 = *(_OWORD *)(v178 + 48);
    uint64_t v179 = *(unsigned int *)(v178 + 8);
    if (v179)
    {
      v439 = (unsigned __int8 **)(*(void *)v178 + 8);
      uint64_t v440 = 16 * v179;
      while (*((_DWORD *)v439 - 2))
      {
        v439 += 2;
        v440 -= 16;
        if (!v440) {
          goto LABEL_289;
        }
      }
      v857 = *v439;
      if (v857)
      {
        llvm::MetadataTracking::track((uint64_t)&v857, v857, 2);
        uint64_t v178 = *(void *)(a1 + 24);
      }
    }
    else
    {
LABEL_289:
      v857 = 0;
    }
    *(void *)(v178 + 48) = *((void *)a2 + 5);
    *(void *)(v178 + 56) = (char *)a2 + 24;
    v180 = (void **)*((void *)a2 + 6);
    __s2 = v180;
    if (v180)
    {
      llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v180, 2);
      v181 = __s2;
    }
    else
    {
      v181 = 0;
    }
    sub_1CB8461A4(v178, 0, (uint64_t)v181);
    if (!__s2)
    {
LABEL_293:
      uint64_t v184 = *(void *)(a1 + 24);
      v185 = llvm::Constant::getNullValue(*(llvm::Constant **)v149, v182, v183);
      if ((*((unsigned char *)v7 + 23) & 0x10) == 0)
      {
        v294 = 0;
        v293 = &byte_1CFBCE98E;
LABEL_488:
        WORD4(v852) = 261;
        unint64_t p_s2 = (unint64_t)v293;
        unint64_t p_NullValue = (unint64_t)v294;
        v296 = sub_1CB845F20(v184, 40, v149, (uint64_t)v185, (uint64_t)&p_s2);
        sub_1CC9D28DC(a1, (uint64_t)a2, 0, (uint64_t)v296);
        v297 = (void **)*((void *)a2 - 8);
        v298 = (void **)*((void *)a2 - 4);
        if (v297 != v298)
        {
          v299 = (void **)*((void *)a2 - 3);
          *((void *)a2 - 8) = v298;
          *((void *)a2 - 4) = v297;
          long long v300 = *(_OWORD *)((char *)a2 - 56);
          v301 = (uint64_t **)*((void *)a2 - 2);
          *((void *)a2 - 7) = v299;
          *((void *)a2 - 6) = v301;
          *(_OWORD *)((char *)a2 - 24) = v300;
          *v301 = v89;
          uint64_t v302 = *((void *)a2 - 7);
          if (v302) {
            *(void *)(v302 + 16) = (char *)a2 - 56;
          }
          **((void **)a2 - 2) = v92;
          uint64_t v303 = *((void *)a2 - 3);
          if (v303) {
            *(void *)(v303 + 16) = (char *)a2 - 24;
          }
        }
        llvm::Instruction::swapProfMetadata(a2);
        v304 = v855;
        if ((void)v856)
        {
          sub_1CBF5385C((uint64_t)v855, v856, *((uint64_t *)&v856 + 1));
          v304 = v855;
        }
        else
        {
          *((void *)v855 + 6) = 0;
          *((void *)v304 + 7) = 0;
        }
        __s2 = v857;
        if (v857)
        {
          llvm::MetadataTracking::track((uint64_t)&__s2, v857, 2);
          v305 = __s2;
        }
        else
        {
          v305 = 0;
        }
        sub_1CB8461A4((uint64_t)v304, 0, (uint64_t)v305);
        v306 = __s2;
        if (!__s2) {
          goto LABEL_499;
        }
        int v441 = *(unsigned __int8 *)__s2;
        if ((v441 - 4) > 0x1E)
        {
          if ((v441 - 3) >= 0xFFFFFFFE) {
            v619 = __s2;
          }
          else {
            v619 = 0;
          }
          if ((v441 - 3) < 0xFFFFFFFE) {
            goto LABEL_1654;
          }
          unint64_t v443 = (unint64_t)v619 + 8;
        }
        else
        {
          if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
            goto LABEL_499;
          }
          uint64_t v442 = *((void *)__s2 + 2);
          if ((v442 & 4) == 0) {
            goto LABEL_499;
          }
          unint64_t v443 = v442 & 0xFFFFFFFFFFFFFFF8;
          if (!v443) {
            goto LABEL_499;
          }
        }
        v620 = &__s2;
LABEL_1176:
        unint64_t p_s2 = (unint64_t)v620;
        sub_1CC5FA668(v443 + 16, &p_s2);
        goto LABEL_499;
      }
      uint64_t v186 = ***v7;
      uint64_t v187 = *(void *)(v186 + 152);
      uint64_t v188 = *(unsigned int *)(v186 + 168);
      if (v188)
      {
        LODWORD(v189) = (v188 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        v190 = (uint64_t ****)(v187 + 16 * v189);
        v191 = *v190;
        if (*v190 == v7)
        {
LABEL_487:
          v292 = v190[1];
          v295 = (int8x8_t **)*v292;
          v293 = (char *)(v292 + 2);
          v294 = v295;
          goto LABEL_488;
        }
        int v192 = 1;
        while (v191 != (uint64_t ***)-4096)
        {
          int v193 = v189 + v192++;
          uint64_t v189 = v193 & (v188 - 1);
          v191 = *(uint64_t ****)(v187 + 16 * v189);
          if (v191 == v7)
          {
            v190 = (uint64_t ****)(v187 + 16 * v189);
            goto LABEL_487;
          }
        }
      }
      v190 = (uint64_t ****)(v187 + 16 * v188);
      goto LABEL_487;
    }
    int v322 = *(unsigned __int8 *)__s2;
    if ((v322 - 4) > 0x1E)
    {
      if ((v322 - 3) >= 0xFFFFFFFE) {
        v330 = __s2;
      }
      else {
        v330 = 0;
      }
      if ((v322 - 3) < 0xFFFFFFFE)
      {
        if (v322 == 3) {
          *((void *)__s2 + 1) = 0;
        }
        goto LABEL_293;
      }
      unint64_t v324 = (unint64_t)v330 + 8;
    }
    else
    {
      if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
        goto LABEL_293;
      }
      uint64_t v323 = *((void *)__s2 + 2);
      if ((v323 & 4) == 0) {
        goto LABEL_293;
      }
      unint64_t v324 = v323 & 0xFFFFFFFFFFFFFFF8;
      if (!v324) {
        goto LABEL_293;
      }
    }
    unint64_t p_s2 = (unint64_t)&__s2;
    sub_1CC5FA668(v324 + 16, &p_s2);
    goto LABEL_293;
  }
  int v157 = 0;
LABEL_241:
  uint64_t v159 = *(void *)v146;
  if ((*(_DWORD *)(*(void *)v146 + 8) & 0xFE) == 0x12) {
    uint64_t v159 = **(void **)(v159 + 16);
  }
  unsigned int v161 = sub_1CB83544C(*(void *)(a1 + 80), v159);
  if (v160 == 1) {
  LODWORD(v856) = v161;
  }
  if (v161 > 0x40) {
    operator new[]();
  }
  v855 = (llvm::Constant *)(1 << (v161 - 1));
  __src = 0;
  NullValue = 0;
  v848 = 0;
  if ((v147 & 0x3E) != 0x20) {
    goto LABEL_602;
  }
  unint64_t p_s2 = (unint64_t)&__src;
  unint64_t p_NullValue = (unint64_t)&NullValue;
  int v162 = v149[16];
  if (v162 != 5)
  {
    if (v162 != 56 || !*((void *)v149 - 8)) {
      goto LABEL_602;
    }
    __src = (void *)*((void *)v149 - 8);
    v163 = (llvm::Constant *)*((void *)v149 - 4);
    unsigned int v164 = *((unsigned __int8 *)v163 + 16);
    if (v163 && v164 == 16)
    {
      v165 = (int8x8_t *)((char *)v163 + 24);
      uint64_t v166 = *((unsigned int *)v163 + 8);
      if (v166 <= 0x40)
      {
        uint8x8_t v167 = (uint8x8_t)vcnt_s8(*v165);
        v167.i16[0] = vaddlv_u8(v167);
        if (v167.u32[0] == 1)
        {
LABEL_254:
          *(void *)unint64_t p_NullValue = v165;
          goto LABEL_255;
        }
        if ((*(_DWORD *)(*(void *)v163 + 8) & 0xFE) != 0x12) {
          goto LABEL_602;
        }
LABEL_1560:
        v767 = (int8x8_t *)llvm::Constant::getSplatValue(v163, 0);
        if (!v767 || v767[2].i8[0] != 16) {
          goto LABEL_602;
        }
        v165 = v767 + 3;
        uint64_t v768 = v767[4].u32[0];
        if (v768 > 0x40)
        {
          int v816 = 0;
          unint64_t v817 = (unint64_t)(v768 + 63) >> 6;
          v818 = (int8x8_t *)*v165;
          do
          {
            int8x8_t v819 = *v818++;
            uint8x8_t v820 = (uint8x8_t)vcnt_s8(v819);
            v820.i16[0] = vaddlv_u8(v820);
            v816 += v820.i32[0];
            --v817;
          }
          while (v817);
          if (v816 != 1) {
            goto LABEL_602;
          }
        }
        else
        {
          uint8x8_t v769 = (uint8x8_t)vcnt_s8(*v165);
          v769.i16[0] = vaddlv_u8(v769);
          if (v769.u32[0] != 1) {
            goto LABEL_602;
          }
        }
        goto LABEL_254;
      }
      int v331 = 0;
      unint64_t v332 = (unint64_t)(v166 + 63) >> 6;
      v333 = (int8x8_t *)*v165;
      do
      {
        int8x8_t v334 = *v333++;
        uint8x8_t v335 = (uint8x8_t)vcnt_s8(v334);
        v335.i16[0] = vaddlv_u8(v335);
        v331 += v335.i32[0];
        --v332;
      }
      while (v332);
      if (v331 == 1) {
        goto LABEL_254;
      }
    }
    BOOL v336 = (*(_DWORD *)(*(void *)v163 + 8) & 0xFE) != 0x12 || v164 > 0x14;
    if (v336) {
      goto LABEL_602;
    }
    goto LABEL_1560;
  }
  if (*((_WORD *)v149 + 9) != 28) {
    goto LABEL_602;
  }
  v170 = (llvm::Constant **)&v149[-32 * (*((_DWORD *)v149 + 5) & 0x7FFFFFF)];
  if (!*v170) {
    goto LABEL_602;
  }
  __src = *v170;
  if (!sub_1CD68A8DC((int8x8_t ***)&p_NullValue, v170[4])) {
    goto LABEL_602;
  }
LABEL_255:
  if (!v150) {
    goto LABEL_602;
  }
  unsigned int v168 = *(unsigned __int8 *)(v150 + 16);
  if (v168 > 0x14) {
    goto LABEL_602;
  }
  if (v168 == 16)
  {
    uint64_t v169 = *(unsigned int *)(v150 + 32);
    if (v169 < 0x41)
    {
      if (!*(void *)(v150 + 24)) {
        goto LABEL_261;
      }
LABEL_260:
      if (sub_1CC03F414((uint64_t)&__s2, (llvm::Constant *)v150)) {
        goto LABEL_261;
      }
LABEL_602:
      if (v148 == 40)
      {
        if (v150)
        {
          unsigned int v337 = *(unsigned __int8 *)(v150 + 16);
          if (v337 <= 0x14)
          {
            if (v337 == 16)
            {
              uint64_t v338 = *(unsigned int *)(v150 + 32);
              if (v338 >= 0x41)
              {
                int v621 = 0;
                int64_t v622 = (unint64_t)(v338 + 63) >> 6;
                do
                {
                  BOOL v336 = v622-- < 1;
                  if (v336) {
                    break;
                  }
                  unint64_t v623 = *(void *)(*(void *)(v150 + 24) + 8 * v622);
                  v621 += __clz(v623);
                }
                while (!v623);
                int v624 = v338 | 0xFFFFFFC0;
                if ((v338 & 0x3F) == 0) {
                  int v624 = 0;
                }
                if (v621 + v624 == v338) {
                  goto LABEL_609;
                }
              }
              else if (!*(void *)(v150 + 24))
              {
LABEL_609:
                __src = v149;
                NullValue = (llvm::LLVMContext *)&v855;
LABEL_610:
                if ((unsigned __int8 *)v828 != v149)
                {
LABEL_611:
                  if (v146 != __src) {
                    goto LABEL_621;
                  }
                  unint64_t p_s2 = (unint64_t)v146;
                  unint64_t p_NullValue = (unint64_t)&v848;
                  uint64_t p_src = 0;
                  int v339 = *(unsigned __int8 *)(v828 + 16);
                  if (v339 != 5)
                  {
                    if (v339 != 58 || v146 != *(unsigned __int8 **)(v828 - 64)) {
                      goto LABEL_621;
                    }
                    v340 = *(unsigned __int8 **)(v828 - 32);
                    goto LABEL_669;
                  }
                  if (*(_WORD *)(v828 + 18) != 30) {
                    goto LABEL_621;
                  }
                  v371 = (unsigned __int8 *)(v828 - 32 * (*(_DWORD *)(v828 + 20) & 0x7FFFFFF));
                  if (v146 != *(unsigned __int8 **)v371) {
                    goto LABEL_621;
                  }
LABEL_703:
                  if (!sub_1CBF5295C((uint64_t)&p_NullValue, *((llvm::Constant **)v371 + 4))) {
                    goto LABEL_621;
                  }
LABEL_704:
                  v375 = NullValue;
                  uint64_t v376 = *((unsigned int *)NullValue + 2);
                  if (v376 > 0x40)
                  {
                    if (memcmp(*(const void **)NullValue, *(const void **)v848, ((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8))
                    {
                      goto LABEL_621;
                    }
                  }
                  else if (*(void *)NullValue != *(void *)v848)
                  {
                    goto LABEL_621;
                  }
                  uint64_t v383 = *(void *)(a1 + 24);
                  v384 = __src;
                  WORD4(v852) = 257;
                  v385 = *(llvm::ConstantInt **)__src;
                  v386 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)__src, v375, v365);
                  if ((*((_DWORD *)v385 + 2) & 0xFE) == 0x12) {
                    v386 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v385 + 8) | ((unint64_t)(*((_DWORD *)v385 + 2) == 19) << 32)), (uint64_t)v386);
                  }
                  v387 = sub_1CB844AF4(v383, v384, (uint64_t)v386, (uint64_t)&p_s2);
                  goto LABEL_753;
                }
                unint64_t p_s2 = v828;
                unint64_t p_NullValue = (unint64_t)&v848;
                uint64_t p_src = 0;
                int v366 = v146[16];
                if (v366 == 5)
                {
                  if (*((_WORD *)v146 + 9) != 30) {
                    goto LABEL_611;
                  }
                  v372 = &v146[-32 * (*((_DWORD *)v146 + 5) & 0x7FFFFFF)];
                  if (v828 != *(void *)v372
                    || !sub_1CBF5295C((uint64_t)&p_NullValue, *((llvm::Constant **)v372 + 4)))
                  {
                    goto LABEL_611;
                  }
                }
                else if (v366 != 58 {
                       || v828 != *((void *)v146 - 8)
                }
                       || (sub_1CBF528D8((uint64_t)&p_NullValue, *((unsigned __int8 **)v146 - 4)) & 1) == 0)
                {
                  goto LABEL_611;
                }
                v373 = NullValue;
                uint64_t v374 = *((unsigned int *)NullValue + 2);
                if (v374 > 0x40)
                {
                  if (memcmp(*(const void **)NullValue, *(const void **)v848, ((unint64_t)(v374 + 63) >> 3) & 0x3FFFFFF8))
                  {
                    goto LABEL_611;
                  }
                }
                else if (*(void *)NullValue != *(void *)v848)
                {
                  goto LABEL_611;
                }
                uint64_t v388 = *(void *)(a1 + 24);
                v389 = (llvm::ConstantInt ***)__src;
                unsigned int v392 = *((_DWORD *)v373 + 2);
                if (v392 > 0x40) {
                  operator new[]();
                }
                unint64_t v393 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v392;
                if (!v392) {
                  unint64_t v393 = 0;
                }
                v834 = (void *)(v393 & ~*(void *)v373);
                LODWORD(v837) = *((_DWORD *)v373 + 2);
                __s2 = v834;
                goto LABEL_748;
              }
            }
            else if (v337 == 17)
            {
              if (sub_1CB844168(v150, 0.0)) {
                goto LABEL_609;
              }
            }
            else if (v337 - 18 < 3 || v337 == 13)
            {
              goto LABEL_609;
            }
            if (sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v150)) {
              goto LABEL_609;
            }
          }
        }
      }
      if (!v157 || !sub_1CBF687D0((uint64_t)&p_s2, (llvm::Constant *)v150)) {
        goto LABEL_621;
      }
      __src = v149;
      NullValue = (llvm::LLVMContext *)&v855;
      goto LABEL_619;
    }
    int v785 = 0;
    int64_t v786 = (unint64_t)(v169 + 63) >> 6;
    do
    {
      BOOL v336 = v786-- < 1;
      if (v336) {
        break;
      }
      unint64_t v787 = *(void *)(*(void *)(v150 + 24) + 8 * v786);
      v785 += __clz(v787);
    }
    while (!v787);
    int v788 = v169 | 0xFFFFFFC0;
    if ((v169 & 0x3F) == 0) {
      int v788 = 0;
    }
    if (v785 + v788 != v169) {
      goto LABEL_260;
    }
  }
  else if (v168 == 17)
  {
    if ((sub_1CB844168(v150, 0.0) & 1) == 0) {
      goto LABEL_260;
    }
  }
  else if (v168 - 18 >= 3 && v168 != 13)
  {
    goto LABEL_260;
  }
LABEL_261:
  v149 = (unsigned __int8 *)__src;
  if (v148 != 32) {
    goto LABEL_610;
  }
LABEL_619:
  if (v146 != v149)
  {
LABEL_620:
    if ((void *)v828 != __src) {
      goto LABEL_621;
    }
    unint64_t p_s2 = v828;
    unint64_t p_NullValue = (unint64_t)&v848;
    uint64_t p_src = 0;
    int v364 = v146[16];
    if (v364 != 5)
    {
      if (v364 != 58 || v828 != *((void *)v146 - 8)) {
        goto LABEL_621;
      }
      v340 = (unsigned __int8 *)*((void *)v146 - 4);
LABEL_669:
      if ((sub_1CBF528D8((uint64_t)&p_NullValue, v340) & 1) == 0) {
        goto LABEL_621;
      }
      goto LABEL_704;
    }
    if (*((_WORD *)v146 + 9) != 30) {
      goto LABEL_621;
    }
    v371 = &v146[-32 * (*((_DWORD *)v146 + 5) & 0x7FFFFFF)];
    if (v828 != *(void *)v371) {
      goto LABEL_621;
    }
    goto LABEL_703;
  }
  unint64_t p_s2 = (unint64_t)v146;
  unint64_t p_NullValue = (unint64_t)&v848;
  uint64_t p_src = 0;
  int v362 = *(unsigned __int8 *)(v828 + 16);
  if (v362 == 5)
  {
    if (*(_WORD *)(v828 + 18) != 30) {
      goto LABEL_620;
    }
    uint64_t v368 = v828 - 32 * (*(_DWORD *)(v828 + 20) & 0x7FFFFFF);
    if (v146 != *(unsigned __int8 **)v368
      || !sub_1CBF5295C((uint64_t)&p_NullValue, *(llvm::Constant **)(v368 + 32)))
    {
      goto LABEL_620;
    }
  }
  else if (v362 != 58 {
         || v146 != *(unsigned __int8 **)(v828 - 64)
  }
         || (sub_1CBF528D8((uint64_t)&p_NullValue, *(unsigned __int8 **)(v828 - 32)) & 1) == 0)
  {
    goto LABEL_620;
  }
  v369 = NullValue;
  uint64_t v370 = *((unsigned int *)NullValue + 2);
  if (v370 > 0x40)
  {
    if (memcmp(*(const void **)NullValue, *(const void **)v848, ((unint64_t)(v370 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_620;
    }
  }
  else if (*(void *)NullValue != *(void *)v848)
  {
    goto LABEL_620;
  }
  uint64_t v388 = *(void *)(a1 + 24);
  v389 = (llvm::ConstantInt ***)__src;
  unsigned int v390 = *((_DWORD *)v369 + 2);
  if (v390 > 0x40) {
    operator new[]();
  }
  unint64_t v391 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v390;
  if (!v390) {
    unint64_t v391 = 0;
  }
  v835 = (void *)(v391 & ~*(void *)v369);
  LODWORD(v837) = *((_DWORD *)v369 + 2);
  __s2 = v835;
LABEL_748:
  WORD4(v852) = 257;
  v394 = *v389;
  v395 = llvm::ConstantInt::get(**v389, (llvm::LLVMContext *)&__s2, v363);
  if ((v394[1] & 0xFE) == 0x12) {
    v395 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v394 + 8) | ((unint64_t)(*((_DWORD *)v394 + 2) == 19) << 32)), (uint64_t)v395);
  }
  v387 = sub_1CBF52474(v388, v389, (uint64_t)v395, (uint64_t)&p_s2);
  if (v837 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
LABEL_753:
  if (v387)
  {
    int v37 = sub_1CC9D3C84(a1, a2, v387);
    int v341 = 0;
    goto LABEL_622;
  }
LABEL_621:
  int v37 = 0;
  int v341 = 1;
LABEL_622:
  if (v856 >= 0x41 && v855) {
    MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
  }
  if (!v341) {
    return v37;
  }
  v342 = v7[1];
  if (!v342) {
    goto LABEL_628;
  }
  if (v342[1]) {
    goto LABEL_628;
  }
  uint64_t v354 = *((void *)*v825 + 1);
  if (!v354) {
    goto LABEL_628;
  }
  if (*(void *)(v354 + 8)) {
    goto LABEL_628;
  }
  if ((*((_WORD *)v7 + 9) & 0x3F) != 0x20) {
    goto LABEL_628;
  }
  uint64_t v355 = *p_p_NullValue;
  if (!*p_p_NullValue) {
    goto LABEL_628;
  }
  unsigned int v356 = *(unsigned __int8 *)(v355 + 16);
  if (v356 > 0x14) {
    goto LABEL_628;
  }
  v357 = *(llvm::ConstantInt **)a2;
  uint64_t v358 = *(void *)(a1 + 24);
  if (v356 == 16)
  {
    uint64_t v359 = *(unsigned int *)(v355 + 32);
    if (v359 >= 0x41)
    {
      int v805 = 0;
      int64_t v806 = (unint64_t)(v359 + 63) >> 6;
      do
      {
        BOOL v336 = v806-- < 1;
        if (v336) {
          break;
        }
        unint64_t v807 = *(void *)(*(void *)(v355 + 24) + 8 * v806);
        v805 += __clz(v807);
      }
      while (!v807);
      int v808 = v359 | 0xFFFFFFC0;
      if ((v359 & 0x3F) == 0) {
        int v808 = 0;
      }
      if (v805 + v808 == v359) {
        goto LABEL_652;
      }
    }
    else if (!*(void *)(v355 + 24))
    {
      goto LABEL_652;
    }
  }
  else if (v356 == 17)
  {
    if (sub_1CB844168(*p_p_NullValue, 0.0)) {
      goto LABEL_652;
    }
  }
  else if (v356 - 18 < 3 || v356 == 13)
  {
    goto LABEL_652;
  }
  if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v355) & 1) == 0) {
    goto LABEL_628;
  }
LABEL_652:
  if ((sub_1CBF5250C((uint64_t)&v855, (llvm::Constant *)v828) & 1) == 0) {
    goto LABEL_628;
  }
  unint64_t p_s2 = (unint64_t)&v855;
  uint64_t v360 = *((void *)v146 + 1);
  if (!v360 || *(void *)(v360 + 8)) {
    goto LABEL_628;
  }
  int v361 = v146[16];
  if (v361 == 5)
  {
    if (*((_WORD *)v146 + 9) != 28) {
      goto LABEL_628;
    }
    v400 = (llvm::Constant **)&v146[-32 * (*((_DWORD *)v146 + 5) & 0x7FFFFFF)];
    if (!*v400) {
      goto LABEL_628;
    }
    v855 = *v400;
    if ((sub_1CBF5270C((uint64_t)&p_NullValue, v400[4]) & 1) == 0) {
      goto LABEL_628;
    }
  }
  else
  {
    if (v361 != 56) {
      goto LABEL_628;
    }
    if (!*((void *)v146 - 8)) {
      goto LABEL_628;
    }
    v855 = (llvm::Constant *)*((void *)v146 - 8);
    if (!sub_1CBF5250C((uint64_t)&p_NullValue, *((llvm::Constant **)v146 - 4))) {
      goto LABEL_628;
    }
  }
  v401 = v855;
  uint64_t v402 = *((void *)v855 + 1);
  if (!v402 || *(void *)(v402 + 8)) {
    goto LABEL_772;
  }
  int v625 = *((unsigned __int8 *)v855 + 16);
  if (v625 == 5)
  {
    if (*((_WORD *)v855 + 9) != 26) {
      goto LABEL_772;
    }
    v766 = (llvm::Constant **)((char *)v855 - 32 * (*((_DWORD *)v855 + 5) & 0x7FFFFFF));
    v626 = *v766;
    if (!*v766) {
      goto LABEL_772;
    }
    uint64_t v403 = (uint64_t)v766[4];
    if (!v403) {
      goto LABEL_772;
    }
LABEL_1559:
    int v404 = 1;
    v401 = v626;
    goto LABEL_773;
  }
  if (v625 == 54)
  {
    v626 = (llvm::Constant *)*((void *)v855 - 8);
    if (v626)
    {
      uint64_t v403 = *((void *)v855 - 4);
      if (v403) {
        goto LABEL_1559;
      }
    }
  }
LABEL_772:
  uint64_t v403 = 0;
  int v404 = 0;
LABEL_773:
  v405 = *v825;
  int v406 = *((unsigned __int8 *)*v825 + 16);
  if (v406 == 5)
  {
    if (*((_WORD *)v405 + 9) != 28
      || ((v617 = (llvm::Constant **)((char *)v405 - 32 * (*((_DWORD *)v405 + 5) & 0x7FFFFFF)),
           v408 = v617[4],
           v401 != *v617)
       || !v408)
      && (!*v617 || (BOOL v19 = v401 == v408, v408 = *v617, !v19)))
    {
LABEL_628:
      __s2 = v146;
      v343 = *(llvm::Type **)v146;
      if ((*(_DWORD *)(*(void *)v146 + 8) & 0xFE) == 0x12) {
        v343 = (llvm::Type *)**((void **)v343 + 2);
      }
      int v344 = llvm::Type::getPrimitiveSizeInBits(v343);
      if ((*((_WORD *)v7 + 9) & 0x3E) != 0x20) {
        goto LABEL_851;
      }
      uint64_t v345 = *p_p_NullValue;
      if (!*p_p_NullValue) {
        goto LABEL_851;
      }
      unsigned int v346 = *(unsigned __int8 *)(v345 + 16);
      if (v346 > 0x14) {
        goto LABEL_851;
      }
      int v347 = v344;
      if (v346 == 16)
      {
        uint64_t v348 = *(unsigned int *)(v345 + 32);
        if (v348 >= 0x41)
        {
          int v649 = 0;
          int64_t v650 = (unint64_t)(v348 + 63) >> 6;
          do
          {
            BOOL v336 = v650-- < 1;
            if (v336) {
              break;
            }
            unint64_t v651 = *(void *)(*(void *)(v345 + 24) + 8 * v650);
            v649 += __clz(v651);
          }
          while (!v651);
          int v652 = v348 | 0xFFFFFFC0;
          if ((v348 & 0x3F) == 0) {
            int v652 = 0;
          }
          if (v649 + v652 == v348) {
            goto LABEL_637;
          }
        }
        else if (!*(void *)(v345 + 24))
        {
          goto LABEL_637;
        }
      }
      else if (v346 == 17)
      {
        if (sub_1CB844168(*p_p_NullValue, 0.0)) {
          goto LABEL_637;
        }
      }
      else if (v346 - 18 < 3 || v346 == 13)
      {
        goto LABEL_637;
      }
      if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v345) & 1) == 0) {
        goto LABEL_851;
      }
LABEL_637:
      uint64_t v349 = (uint64_t)v146;
      uint64_t v350 = v828;
      if ((*((_WORD *)v7 + 9) & 0x3F) == 0x21)
      {
        uint64_t v349 = v828;
        __s2 = (void *)v828;
        uint64_t v350 = (uint64_t)v146;
      }
      unsigned __int8 v351 = v347 - 1;
      LODWORD(p_src) = 64;
      unint64_t p_s2 = (unint64_t)&__s2;
      unint64_t p_NullValue = (v347 - 1);
      int v352 = *(unsigned __int8 *)(v350 + 16);
      if (v352 == 58)
      {
        int v353 = v349 == *(void *)(v350 - 64)
            && sub_1CBF53154((llvm::APInt *)&p_NullValue, *(unsigned __int8 **)(v350 - 32));
      }
      else
      {
        if (v352 == 5)
        {
          unsigned __int8 v351 = 0;
          if (*(_WORD *)(v350 + 18) == 30)
          {
            uint64_t v367 = v350 - 32 * (*(_DWORD *)(v350 + 20) & 0x7FFFFFF);
            if (v349 == *(void *)v367 && sub_1CBF531E4((llvm::APInt *)&p_NullValue, *(llvm::Constant **)(v367 + 32))) {
              unsigned __int8 v351 = 1;
            }
          }
        }
        int v353 = (v352 == 5) & v351;
      }
      if (p_src >= 0x41 && p_NullValue) {
        MEMORY[0x1D25D9CB0](p_NullValue, 0x1000C8000313F17);
      }
      if (!v353) {
        goto LABEL_851;
      }
      v377 = (unint64_t *)__s2;
      if (!__s2) {
        goto LABEL_851;
      }
      if (*((unsigned char *)__s2 + 16) != 84) {
        goto LABEL_851;
      }
      uint64_t v378 = *((void *)__s2 - 4);
      if (!v378
        || *(unsigned char *)(v378 + 16)
        || *(void *)(v378 + 24) != *((void *)__s2 + 9)
        || *(_DWORD *)(v378 + 36) != 52)
      {
        goto LABEL_851;
      }
      uint64_t v380 = *((void *)__s2 - 4 * (*((_DWORD *)__s2 + 5) & 0x7FFFFFF));
      unint64_t p_s2 = (unint64_t)*v825;
      v379 = (llvm::Constant *)p_s2;
      uint64_t p_src = p_s2;
      int v381 = *(unsigned __int8 *)(v380 + 16);
      if (v381 != 5)
      {
        if (v381 != 56) {
          goto LABEL_851;
        }
        if (p_s2 != *(void *)(v380 - 64)) {
          goto LABEL_726;
        }
        uint64_t v433 = *(void *)(v380 - 32);
        int v434 = *(unsigned __int8 *)(v433 + 16);
        if (v434 == 5)
        {
          if (*(_WORD *)(v433 + 18) != 15
            || !sub_1CC03F414((uint64_t)&p_NullValue, *(llvm::Constant **)(v433 - 32 * (*(_DWORD *)(v433 + 20) & 0x7FFFFFF))))
          {
            goto LABEL_726;
          }
          v435 = *(const void **)(v433 - 32 * (*(_DWORD *)(v433 + 20) & 0x7FFFFFF) + 32);
        }
        else
        {
          if (v434 != 43 || !sub_1CBF535C4((uint64_t)&p_NullValue, *(llvm::Constant **)(v433 - 64))) {
            goto LABEL_726;
          }
          v435 = *(const void **)(v433 - 32);
        }
        if ((const void *)p_src == v435) {
          goto LABEL_1194;
        }
LABEL_726:
        if (p_s2 != *(void *)(v380 - 32)) {
          goto LABEL_851;
        }
        uint64_t v382 = *(void *)(v380 - 64);
        goto LABEL_763;
      }
      if (*(_WORD *)(v380 + 18) != 28) {
        goto LABEL_851;
      }
      v396 = (void *)(v380 - 32 * (*(_DWORD *)(v380 + 20) & 0x7FFFFFF));
      if (p_s2 == *v396)
      {
        uint64_t v444 = v396[4];
        int v445 = *(unsigned __int8 *)(v444 + 16);
        if (v445 == 5)
        {
          if (*(_WORD *)(v444 + 18) != 15
            || !sub_1CC03F414((uint64_t)&p_NullValue, *(llvm::Constant **)(v444 - 32 * (*(_DWORD *)(v444 + 20) & 0x7FFFFFF))))
          {
            goto LABEL_761;
          }
          v446 = *(const void **)(v444 - 32 * (*(_DWORD *)(v444 + 20) & 0x7FFFFFF) + 32);
        }
        else
        {
          if (v445 != 43 || !sub_1CBF535C4((uint64_t)&p_NullValue, *(llvm::Constant **)(v444 - 64))) {
            goto LABEL_761;
          }
          v446 = *(const void **)(v444 - 32);
        }
        if ((const void *)p_src == v446)
        {
LABEL_1194:
          v627 = *(uint64_t ***)(*(void *)(v377[5] + 56) + 40);
          unint64_t p_s2 = *v377;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration(v627, 54, (uint64_t)&p_s2, 1);
          v629 = (uint64_t **)Declaration;
          if (Declaration) {
            v630 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            v630 = 0;
          }
          v855 = v379;
          *(void *)&long long v856 = v377[-4 * (*((_DWORD *)v377 + 5) & 0x7FFFFFF) + 4];
          WORD4(v852) = 257;
          v631 = (char *)operator new(0xB0uLL);
          uint64_t v632 = 0;
          int v37 = (llvm::UndefValue **)(v631 + 96);
          *((_DWORD *)v631 + 29) = *((_DWORD *)v631 + 29) & 0x38000000 | 3;
          do
          {
            v633 = &v631[v632];
            *(void *)v633 = 0;
            *((void *)v633 + 1) = 0;
            *((void *)v633 + 2) = 0;
            *((void *)v633 + 3) = v37;
            v632 += 32;
          }
          while (v632 != 96);
          *((void *)v631 + 12) = *v630[2];
          *((void *)v631 + 13) = 0;
          v631[112] = 84;
          v631[113] = 0;
          *((_WORD *)v631 + 57) = 0;
          *((_DWORD *)v631 + 29) = *((_DWORD *)v631 + 29) & 0xC0000000 | 3;
          *(_OWORD *)(v631 + 120) = 0u;
          *(_OWORD *)(v631 + 136) = 0u;
          *((_DWORD *)v631 + 38) = 0;
          *((void *)v631 + 20) = 0;
          llvm::CallInst::init((uint64_t ***)v631 + 12, v630, v629, (uint64_t *)&v855, 2, 0, 0, (const char **)&p_s2);
          return v37;
        }
      }
LABEL_761:
      v397 = (uint64_t *)(v380 - 32 * (*(_DWORD *)(v380 + 20) & 0x7FFFFFF));
      if (p_s2 != v397[4]) {
        goto LABEL_851;
      }
      uint64_t v382 = *v397;
LABEL_763:
      int v398 = *(unsigned __int8 *)(v382 + 16);
      if (v398 == 5)
      {
        if (*(_WORD *)(v382 + 18) == 15
          && sub_1CC03F414((uint64_t)&p_NullValue, *(llvm::Constant **)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF))))
        {
          v399 = *(const void **)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF) + 32);
LABEL_850:
          if ((const void *)p_src != v399) {
            goto LABEL_851;
          }
          goto LABEL_1194;
        }
      }
      else if (v398 == 43 && sub_1CBF535C4((uint64_t)&p_NullValue, *(llvm::Constant **)(v382 - 64)))
      {
        v399 = *(const void **)(v382 - 32);
        goto LABEL_850;
      }
LABEL_851:
      uint64_t v447 = *(void *)(a1 + 24);
      v448 = v7[1];
      if (!v448 || v448[1]) {
        goto LABEL_894;
      }
      __s2 = 0;
      v449 = (unsigned __int8 *)*p_p_NullValue;
      unint64_t p_s2 = (unint64_t)&__s2;
      unint64_t p_NullValue = 1;
      if (!sub_1CBF528D8((uint64_t)&p_s2, v449)) {
        goto LABEL_893;
      }
      v450 = (int8x8_t **)*(v7 - 8);
      if ((*((_WORD *)v7 + 9) & 0x3F) == 0x24)
      {
        v451 = (llvm::Constant *)__s2;
        uint64_t v452 = *((unsigned int *)__s2 + 2);
        if (v452 >= 0x41)
        {
          int v453 = 0;
          int64_t v454 = (unint64_t)(v452 + 63) >> 6;
          do
          {
            BOOL v336 = v454-- < 1;
            if (v336) {
              break;
            }
            unint64_t v455 = *(void *)(*(void *)__s2 + 8 * v454);
            v453 += __clz(v455);
          }
          while (!v455);
          int v456 = v452 | 0xFFFFFFC0;
          if ((v452 & 0x3F) == 0) {
            int v456 = 0;
          }
          if ((v452 - v453 - v456) > 0x40) {
            goto LABEL_873;
          }
          v451 = *(llvm::Constant **)__s2;
        }
        if (*(void *)v451 != 2) {
          goto LABEL_873;
        }
        unint64_t p_NullValue = (unint64_t)*(v7 - 8);
        int v457 = v146[16];
        if (v457 == 5)
        {
          if (*((_WORD *)v146 + 9) != 15
            || !sub_1CC03F414((uint64_t)&p_s2, *(llvm::Constant **)&v146[-32 * (*((_DWORD *)v146 + 5) & 0x7FFFFFF)]))
          {
            goto LABEL_873;
          }
          v458 = *(int8x8_t ***)&v146[-32 * (*((_DWORD *)v146 + 5) & 0x7FFFFFF) + 32];
        }
        else
        {
          if (v457 != 43 || !sub_1CBF535C4((uint64_t)&p_s2, *((llvm::Constant **)v146 - 8))) {
            goto LABEL_873;
          }
          v458 = (int8x8_t **)*((void *)v146 - 4);
        }
        if ((int8x8_t **)p_NullValue == v458 && sub_1CBF687D0((uint64_t)&v855, (llvm::Constant *)v828)) {
          goto LABEL_892;
        }
      }
LABEL_873:
      if ((*((_WORD *)v7 + 9) & 0x3F) == 0x22)
      {
        v459 = (llvm::Constant *)__s2;
        uint64_t v460 = *((unsigned int *)__s2 + 2);
        if (v460 >= 0x41)
        {
          int v461 = 0;
          int64_t v462 = (unint64_t)(v460 + 63) >> 6;
          do
          {
            BOOL v336 = v462-- < 1;
            if (v336) {
              break;
            }
            unint64_t v463 = *(void *)(*(void *)__s2 + 8 * v462);
            v461 += __clz(v463);
          }
          while (!v463);
          int v464 = v460 | 0xFFFFFFC0;
          if ((v460 & 0x3F) == 0) {
            int v464 = 0;
          }
          if ((v460 - v461 - v464) > 0x40) {
            goto LABEL_893;
          }
          v459 = *(llvm::Constant **)__s2;
        }
        if (*(void *)v459 == 1)
        {
          unint64_t p_NullValue = (unint64_t)v450;
          int v465 = *(unsigned __int8 *)(v828 + 16);
          if (v465 == 5)
          {
            if (*(_WORD *)(v828 + 18) == 15
              && sub_1CC03F414((uint64_t)&p_s2, *(llvm::Constant **)(v828 - 32 * (*(_DWORD *)(v828 + 20) & 0x7FFFFFF))))
            {
              v466 = *(int8x8_t ***)(v828 - 32 * (*(_DWORD *)(v828 + 20) & 0x7FFFFFF) + 32);
              goto LABEL_890;
            }
          }
          else if (v465 == 43 && sub_1CBF535C4((uint64_t)&p_s2, *(llvm::Constant **)(v828 - 64)))
          {
            v466 = *(int8x8_t ***)(v828 - 32);
LABEL_890:
            if ((int8x8_t **)p_NullValue == v466 && sub_1CBF687D0((uint64_t)&v855, (llvm::Constant *)v146))
            {
LABEL_892:
              v467 = (char *)operator new(0x60uLL);
              int v37 = (llvm::UndefValue **)(v467 + 32);
              *((_DWORD *)v467 + 13) = *((_DWORD *)v467 + 13) & 0x38000000 | 1;
              *(void *)v467 = 0;
              *((void *)v467 + 1) = 0;
              *((void *)v467 + 2) = 0;
              *((void *)v467 + 3) = v467 + 32;
              WORD4(v852) = 257;
              v470 = llvm::Constant::getNullValue((llvm::Constant *)*v450, v468, v469);
              v471 = sub_1CB845F20(v447, 33, v450, (uint64_t)v470, (uint64_t)&p_s2);
              v472 = *(llvm::Type **)v146;
              __int16 v858 = 257;
              llvm::SExtInst::SExtInst((llvm::SExtInst *)v37, v471, v472, (const char **)&v855, 0);
              return v37;
            }
          }
        }
      }
LABEL_893:
      uint64_t v447 = *(void *)(a1 + 24);
LABEL_894:
      int v473 = *(_DWORD *)(*(void *)v146 + 8);
      if ((v473 & 0xFE) == 0x12) {
        int v474 = *(unsigned __int8 *)(**(void **)(*(void *)v146 + 16) + 8);
      }
      else {
        int v474 = *(_DWORD *)(*(void *)v146 + 8);
      }
      if (v474 != 13 || ((v473 & 0xFE) == 18) != (((*v7)[1] & 0xFE) == 18)) {
        goto LABEL_899;
      }
      v484 = *(v7 - 8);
      uint64_t v485 = (uint64_t)*(v7 - 4);
      __s2 = 0;
      __int16 v486 = *((_WORD *)v7 + 9);
      int v487 = v486 & 0x3E;
      if (v487 == 32)
      {
        if (!v485) {
          goto LABEL_899;
        }
        unsigned int v488 = *(unsigned __int8 *)(v485 + 16);
        if (v488 > 0x14) {
          goto LABEL_899;
        }
        if (v488 == 16)
        {
          uint64_t v489 = *(unsigned int *)(v485 + 32);
          if (v489 < 0x41)
          {
            if (*(void *)(v485 + 24)) {
              goto LABEL_919;
            }
LABEL_920:
            v855 = 0;
            unint64_t p_NullValue = (unint64_t)&v855;
            if (!sub_1CCAA91E4((uint64_t)&p_s2, (uint64_t)v484)) {
              goto LABEL_899;
            }
            __s2 = v484;
            uint64_t v490 = *((unsigned int *)v855 + 2);
            if (v490 > 0x40)
            {
              int v511 = 0;
              int64_t v512 = (unint64_t)(v490 + 63) >> 6;
              do
              {
                BOOL v336 = v512-- < 1;
                if (v336) {
                  break;
                }
                unint64_t v513 = *(void *)(*(void *)v855 + 8 * v512);
                v511 += __clz(v513);
              }
              while (!v513);
              int v514 = v490 | 0xFFFFFFC0;
              if ((v490 & 0x3F) == 0) {
                int v514 = 0;
              }
              int v491 = v511 + v514;
            }
            else
            {
              int v491 = v490 + __clz(*(void *)v855) - 64;
            }
            unsigned int v508 = v490 + ~v491;
            int v507 = *((_WORD *)v7 + 9) & 0x3F;
            BOOL v499 = v507 == 32;
            goto LABEL_976;
          }
          int v789 = 0;
          int64_t v790 = (unint64_t)(v489 + 63) >> 6;
          do
          {
            BOOL v336 = v790-- < 1;
            if (v336) {
              break;
            }
            unint64_t v791 = *(void *)(*(void *)(v485 + 24) + 8 * v790);
            v789 += __clz(v791);
          }
          while (!v791);
          int v792 = v489 | 0xFFFFFFC0;
          if ((v489 & 0x3F) == 0) {
            int v792 = 0;
          }
          if (v789 + v792 == v489) {
            goto LABEL_920;
          }
        }
        else if (v488 == 17)
        {
          if (sub_1CB844168(v485, 0.0)) {
            goto LABEL_920;
          }
        }
        else if (v488 - 18 < 3 || v488 == 13)
        {
          goto LABEL_920;
        }
LABEL_919:
        if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v485) & 1) == 0) {
          goto LABEL_899;
        }
        goto LABEL_920;
      }
      int v498 = v486 & 0x3F;
      if (v498 != 40 && v498 != 38) {
        goto LABEL_899;
      }
      BOOL v499 = v498 == 38;
      if (v498 == 38)
      {
        if ((sub_1CBF687D0((uint64_t)&v855, (llvm::Constant *)v485) & 1) == 0) {
          goto LABEL_899;
        }
        goto LABEL_956;
      }
      if (!v485) {
        goto LABEL_899;
      }
      unsigned int v503 = *(unsigned __int8 *)(v485 + 16);
      if (v503 > 0x14) {
        goto LABEL_899;
      }
      if (v503 == 16)
      {
        uint64_t v504 = *(unsigned int *)(v485 + 32);
        if (v504 < 0x41)
        {
          if (*(void *)(v485 + 24)) {
            goto LABEL_955;
          }
LABEL_956:
          unint64_t p_s2 = (unint64_t)&__s2;
          uint64_t v505 = v484[1];
          if (!v505 || *(void *)(v505 + 8) || !sub_1CBC5BF18((void **)&p_s2, (uint64_t)v484)) {
            goto LABEL_899;
          }
          v506 = (llvm::Type *)*v484;
          if ((*(_DWORD *)(*v484 + 8) & 0xFE) == 0x12) {
            v506 = (llvm::Type *)**((void **)v506 + 2);
          }
          unsigned int v508 = llvm::Type::getPrimitiveSizeInBits(v506) - 1;
LABEL_976:
          __src = 0;
          unint64_t p_s2 = (unint64_t)v146;
          unint64_t p_NullValue = (unint64_t)&__src;
          int v516 = sub_1CCAA938C((uint64_t)&p_s2, v828, v507);
          v517 = (uint64_t *)v146;
          if ((v516 & 1) != 0
            || (v517 = (uint64_t *)v828,
                unint64_t p_s2 = v828,
                unint64_t p_NullValue = (unint64_t)&__src,
                sub_1CCAA938C((uint64_t)&p_s2, (uint64_t)v146, v515)))
          {
            uint64_t v518 = *((unsigned int *)__src + 2);
            if (v518 > 0x40)
            {
              int v520 = 0;
              int64_t v521 = (unint64_t)(v518 + 63) >> 6;
              do
              {
                BOOL v336 = v521-- < 1;
                if (v336) {
                  break;
                }
                unint64_t v522 = *(void *)(*(void *)__src + 8 * v521);
                v520 += __clz(v522);
              }
              while (!v522);
              int v523 = v518 | 0xFFFFFFC0;
              if ((v518 & 0x3F) == 0) {
                int v523 = 0;
              }
              int v519 = v520 + v523;
            }
            else
            {
              int v519 = v518 + __clz(*(void *)__src) - 64;
            }
            int v524 = ~v519;
            v525 = (llvm::Type *)*v517;
            v822 = v517;
            unsigned int v824 = v508;
            if ((*(_DWORD *)(*v517 + 8) & 0xFE) == 0x12) {
              v525 = (llvm::Type *)**((void **)v525 + 2);
            }
            int v526 = v499 ^ v516;
            unsigned int v527 = v518 + v524;
            int v528 = llvm::Type::getPrimitiveSizeInBits(v525);
            int v529 = *(_DWORD *)(*(void *)__s2 + 8) & 0xFE;
            v530 = *(llvm::Type **)__s2;
            if (v529 == 18) {
              v530 = **(llvm::Type ***)(*(void *)__s2 + 16);
            }
            v821 = *(llvm::Type **)__s2;
            int v531 = llvm::Type::getPrimitiveSizeInBits(v530);
            if (v516) {
              uint64_t v532 = v828;
            }
            else {
              uint64_t v532 = (uint64_t)v146;
            }
            if (v824 == v527) {
              unsigned int v533 = v526;
            }
            else {
              unsigned int v533 = v526 + 1;
            }
            if (v528 != v531) {
              ++v533;
            }
            v534 = v7[1];
            int v535 = v526;
            if (v534) {
              LODWORD(v534) = v534[1] == 0;
            }
            uint64_t v536 = (uint64_t)v822;
            uint64_t v537 = *(void *)(v532 + 8);
            if (v537) {
              LODWORD(v537) = *(void *)(v537 + 8) == 0;
            }
            if (v533 <= (int)v537 + (int)v534)
            {
              if (v487 != 32)
              {
                if (v529 == 18) {
                  v538 = (llvm::Type *)**((void **)v821 + 2);
                }
                else {
                  v538 = v821;
                }
                LODWORD(v856) = llvm::Type::getPrimitiveSizeInBits(v538);
                if (v856 >= 0x41) {
                  operator new[]();
                }
                v855 = (llvm::Constant *)(1 << v824);
                v540 = __s2;
                v541 = *(llvm::Constant **)__s2;
                v542 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)__s2, (llvm::LLVMContext *)&v855, v539);
                if ((*((_DWORD *)v541 + 2) & 0xFE) == 0x12) {
                  v542 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v541 + 8) | ((unint64_t)(*((_DWORD *)v541 + 2) == 19) << 32)), (uint64_t)v542);
                }
                WORD4(v852) = 257;
                __s2 = sub_1CBF52474(v447, v540, (uint64_t)v542, (uint64_t)&p_s2);
                if (v856 >= 0x41 && v855) {
                  MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
                }
                int v535 = v526;
              }
              int v543 = v535;
              if (v527 <= v824)
              {
                v550 = __s2;
                if (v824 <= v527)
                {
                  uint64_t v553 = *v822;
                  WORD4(v852) = 257;
                  uint64_t v554 = v447;
                  v552 = __s2;
                }
                else
                {
                  WORD4(v852) = 257;
                  v551 = llvm::ConstantInt::get(*(llvm::ConstantInt **)__s2, v824 - v527, 0);
                  v552 = sub_1CC2429AC(v447, (uint64_t)v550, (uint64_t)v551, (uint64_t)&p_s2, 0);
                  __s2 = v552;
                  uint64_t v553 = *v822;
                  WORD4(v852) = 257;
                  uint64_t v554 = v447;
                }
                v548 = sub_1CB844B8C(v554, (unsigned __int8 *)v552, v553, (uint64_t)&p_s2);
              }
              else
              {
                uint64_t v544 = *v822;
                WORD4(v852) = 257;
                v545 = sub_1CB844B8C(v447, (unsigned __int8 *)__s2, v544, (uint64_t)&p_s2);
                __s2 = v545;
                WORD4(v852) = 257;
                v546 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v545, v527 - v824, 0);
                uint64_t v547 = (uint64_t)v545;
                uint64_t v536 = (uint64_t)v822;
                v548 = sub_1CC242524(v447, v547, (uint64_t)v546, (uint64_t)&p_s2, 0, 0);
              }
              v555 = v548;
              __s2 = v548;
              if (v543)
              {
                WORD4(v852) = 257;
                v556 = *(llvm::ConstantInt ***)v548;
                v557 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v548, (llvm::LLVMContext *)__src, v549);
                if ((v556[1] & 0xFE) == 0x12) {
                  v557 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v556 + 8) | ((unint64_t)(*((_DWORD *)v556 + 2) == 19) << 32)), (uint64_t)v557);
                }
                v555 = sub_1CC2428C0(v447, (uint64_t)v555, (uint64_t)v557, (uint64_t)&p_s2);
                __s2 = v555;
              }
              WORD4(v852) = 257;
              v558 = sub_1CB844AF4(v447, v555, v536, (uint64_t)&p_s2);
              if (v558) {
                goto LABEL_1046;
              }
            }
          }
LABEL_899:
          uint64_t v475 = *(void *)(a1 + 24);
          uint64_t v476 = (uint64_t)*(v7 - 8);
          v477 = (llvm::Constant *)*(v7 - 4);
          uint64_t v478 = *(void *)v477;
          if ((*(_DWORD *)(*(void *)v477 + 8) & 0xFE) == 0x12)
          {
            uint64_t v478 = **(void **)(v478 + 16);
            int v479 = *(unsigned __int8 *)(v478 + 8);
          }
          else
          {
            int v479 = *(_DWORD *)(*(void *)v477 + 8);
          }
          if (v479 != 13) {
            goto LABEL_1047;
          }
          int v480 = *((_WORD *)v7 + 9) & 0x3F;
          unsigned int v481 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v478);
          if (v480 == 40)
          {
            LODWORD(v856) = v481;
            if (v481 > 0x40) {
              operator new[]();
            }
            v855 = 0;
            __s2 = (void *)39;
            v837 = (llvm::Constant *)&v855;
            char v492 = sub_1CCA16878((uint64_t)&__s2, v477);
            if (v856 >= 0x41 && v855) {
              MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
            }
            if ((v492 & 1) == 0)
            {
LABEL_1047:
              __int16 v571 = *((_WORD *)v7 + 9);
              if ((v571 & 0x3E) != 0x20) {
                goto LABEL_1083;
              }
              uint64_t v572 = (uint64_t)*(v7 - 4);
              if (!v572) {
                goto LABEL_1083;
              }
              unsigned int v573 = *(unsigned __int8 *)(v572 + 16);
              if (v573 > 0x14) {
                goto LABEL_1083;
              }
              uint64_t v574 = (uint64_t)*(v7 - 8);
              if (v573 == 16)
              {
                uint64_t v575 = *(unsigned int *)(v572 + 32);
                if (v575 < 0x41)
                {
                  if (*(void *)(v572 + 24)) {
                    goto LABEL_1053;
                  }
LABEL_1054:
                  if ((v571 & 0x3F) == 0x21) {
                    v576 = (unsigned __int8 *)v828;
                  }
                  else {
                    v576 = v146;
                  }
                  if ((v571 & 0x3F) == 0x21) {
                    v577 = v146;
                  }
                  else {
                    v577 = (void *)v828;
                  }
                  __s2 = 0;
                  unint64_t p_s2 = (unint64_t)&__s2;
                  if ((sub_1CBC5BE40((void **)&p_s2, (uint64_t)v577) & 1) == 0)
                  {
                    v855 = (llvm::Constant *)&__s2;
                    if ((sub_1CBC5BF18((void **)&v855, (uint64_t)v577) & 1) == 0) {
                      __s2 = v577;
                    }
                  }
                  LODWORD(p_s2) = 54;
                  unint64_t p_NullValue = 0;
                  uint64_t p_src = v574;
                  if (sub_1CC04B8F0((uint64_t)&p_s2, (uint64_t)__s2)
                    || (LODWORD(v855) = 52,
                        *(void *)&long long v856 = 0,
                        *((void *)&v856 + 1) = v574,
                        sub_1CC04B8F0((uint64_t)&v855, (uint64_t)__s2)))
                  {
                    v578 = (uint64_t ***)__s2;
                    v579 = *(llvm::Constant **)__s2;
                    if ((*(_DWORD *)(*(void *)__s2 + 8) & 0xFE) == 0x12) {
                      v579 = (llvm::Constant *)**((void **)v579 + 2);
                    }
                    unsigned int v580 = llvm::Type::getPrimitiveSizeInBits(v579);
                    LODWORD(p_NullValue) = 64;
                    unint64_t p_s2 = v580;
                    BOOL v582 = sub_1CBF53154((llvm::APInt *)&p_s2, v576);
                    if (p_NullValue >= 0x41 && p_s2) {
                      MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                    }
                    if (v582)
                    {
                      v583 = **v578;
                      uint64_t v584 = *v583;
                      v585 = *(void **)(*v583 + 1568);
                      if (!v585)
                      {
                        v612 = *(llvm::ConstantInt **)(v584 + 1888);
                        unsigned int v613 = *(_DWORD *)(v584 + 1896);
                        LODWORD(p_NullValue) = v613 >> 8;
                        if (v613 >> 8 > 0x40) {
                          operator new[]();
                        }
                        unint64_t p_s2 = 0;
                        v585 = llvm::ConstantInt::get(v612, (llvm::LLVMContext *)&p_s2, v581);
                        if (p_NullValue >= 0x41 && p_s2) {
                          MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                        }
                        *(void *)(v584 + 1568) = v585;
                      }
                      v586 = &v578[-4 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF)];
                      v587 = (uint64_t *)(v586 + 4);
                      if (v586[4])
                      {
                        *v586[6] = (uint64_t *)v586[5];
                        v588 = v586[5];
                        if (v588) {
                          v588[2] = (uint64_t *)v586[6];
                        }
                      }
                      uint64_t *v587 = (uint64_t)v585;
                      if (v585)
                      {
                        v591 = (uint64_t **)v585[1];
                        v590 = (uint64_t **)(v585 + 1);
                        v589 = v591;
                        v586[5] = v591;
                        if (v591) {
                          v589[2] = (uint64_t *)(v586 + 5);
                        }
                        v586[6] = v590;
                        *v590 = v587;
                      }
                      if (v577)
                      {
                        uint64_t v143 = a1;
                        v144 = a2;
                        v145 = (llvm::Value *)v577;
                        return sub_1CC9D3C84(v143, v144, v145);
                      }
                    }
                    else
                    {
                      v592 = v578[1];
                      if (v592)
                      {
                        if (!v592[1])
                        {
                          uint64_t v601 = v577[1];
                          if (v601)
                          {
                            if (!*(void *)(v601 + 8)
                              && (sub_1CBF5250C((uint64_t)&p_s2, (llvm::Constant *)v578[-4 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF) + 4]) & 1) == 0)
                            {
                              v603 = **v578;
                              uint64_t v604 = *v603;
                              v605 = *(void **)(*v603 + 1560);
                              if (!v605)
                              {
                                v716 = *(llvm::ConstantInt **)(v604 + 1888);
                                unsigned int v717 = *(_DWORD *)(v604 + 1896);
                                LODWORD(p_NullValue) = v717 >> 8;
                                if (v717 >> 8 > 0x40) {
                                  operator new[]();
                                }
                                if (v717 <= 0xFF) {
                                  LOBYTE(v718) = 0;
                                }
                                else {
                                  unint64_t v718 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v717) + 63);
                                }
                                unint64_t p_s2 = v718 & 1;
                                v605 = llvm::ConstantInt::get(v716, (llvm::LLVMContext *)&p_s2, v602);
                                if (p_NullValue >= 0x41 && p_s2) {
                                  MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                                }
                                *(void *)(v604 + 1560) = v605;
                              }
                              v606 = &v578[-4 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF)];
                              v607 = (uint64_t *)(v606 + 4);
                              if (v606[4])
                              {
                                *v606[6] = (uint64_t *)v606[5];
                                v608 = v606[5];
                                if (v608) {
                                  v608[2] = (uint64_t *)v606[6];
                                }
                              }
                              uint64_t *v607 = (uint64_t)v605;
                              if (v605)
                              {
                                v611 = (uint64_t **)v605[1];
                                v610 = (uint64_t **)(v605 + 1);
                                v609 = v611;
                                v606[5] = v611;
                                if (v611) {
                                  v609[2] = (uint64_t *)(v606 + 5);
                                }
                                v606[6] = v610;
                                *v610 = v607;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_1083:
                  uint64_t v593 = *((_WORD *)v7 + 9) & 0x3F;
                  if ((v593 - 34) > 3) {
                    goto LABEL_1342;
                  }
                  v594 = *(llvm::IRBuilderBase **)(a1 + 24);
                  char v595 = *((_WORD *)v7 + 9) & 0x3F;
                  unsigned int v596 = v146[16];
                  if (v596 > 0x14)
                  {
                    uint64_t v597 = v828;
                    uint64_t v598 = (uint64_t)v146;
                    goto LABEL_1248;
                  }
                  if (v596 == 16)
                  {
                    uint64_t v599 = *((unsigned int *)v146 + 8);
                    if (v599 < 0x41)
                    {
                      if (*((void *)v146 + 3)) {
                        goto LABEL_1089;
                      }
LABEL_1090:
                      char v595 = 33;
                      uint64_t v597 = (uint64_t)v146;
                      uint64_t v598 = v828;
                      switch(v593)
                      {
                        case 1:
                          char v595 = 14;
                          goto LABEL_1247;
                        case 2:
                          char v595 = 13;
                          goto LABEL_1247;
                        case 3:
                          char v595 = 12;
                          goto LABEL_1247;
                        case 4:
                          char v595 = 11;
                          goto LABEL_1247;
                        case 5:
                          char v595 = 10;
                          goto LABEL_1247;
                        case 6:
                          char v595 = 9;
                          goto LABEL_1247;
                        case 7:
                          char v595 = 8;
                          goto LABEL_1247;
                        case 8:
                          char v595 = 7;
                          goto LABEL_1247;
                        case 9:
                          char v595 = 6;
                          goto LABEL_1247;
                        case 10:
                          char v595 = 5;
                          goto LABEL_1247;
                        case 11:
                          char v595 = 4;
                          goto LABEL_1247;
                        case 12:
                          char v595 = 3;
                          goto LABEL_1247;
                        case 13:
                          char v595 = 2;
                          goto LABEL_1247;
                        case 14:
                          char v595 = 1;
                          goto LABEL_1247;
                        case 15:
                          goto LABEL_1674;
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
LABEL_1673:
                          __break(1u);
LABEL_1674:
                          char v595 = 0;
                          goto LABEL_1247;
                        case 32:
                          break;
                        case 33:
                          char v595 = 32;
                          goto LABEL_1247;
                        case 34:
                          char v595 = 37;
                          goto LABEL_1247;
                        case 35:
                          char v595 = 36;
                          goto LABEL_1247;
                        case 36:
                          char v595 = 35;
                          goto LABEL_1247;
                        case 37:
                          char v595 = 34;
                          goto LABEL_1247;
                        case 38:
                          char v595 = 41;
                          goto LABEL_1247;
                        case 39:
                          char v595 = 40;
                          goto LABEL_1247;
                        case 40:
                          char v595 = 39;
                          goto LABEL_1247;
                        case 41:
                          char v595 = 38;
                          goto LABEL_1247;
                        default:
                          char v595 = 15;
LABEL_1247:
                          uint64_t v597 = (uint64_t)v146;
                          uint64_t v598 = v828;
                          break;
                      }
LABEL_1248:
                      if (!v597) {
                        goto LABEL_1342;
                      }
                      unsigned int v661 = *(unsigned __int8 *)(v597 + 16);
                      if (v661 > 0x14) {
                        goto LABEL_1342;
                      }
                      if (v661 == 16)
                      {
                        uint64_t v662 = *(unsigned int *)(v597 + 32);
                        if (v662 >= 0x41)
                        {
                          int v712 = 0;
                          int64_t v713 = (unint64_t)(v662 + 63) >> 6;
                          do
                          {
                            BOOL v336 = v713-- < 1;
                            if (v336) {
                              break;
                            }
                            unint64_t v714 = *(void *)(*(void *)(v597 + 24) + 8 * v713);
                            v712 += __clz(v714);
                          }
                          while (!v714);
                          int v715 = v662 | 0xFFFFFFC0;
                          if ((v662 & 0x3F) == 0) {
                            int v715 = 0;
                          }
                          if (v712 + v715 == v662) {
                            goto LABEL_1254;
                          }
                        }
                        else if (!*(void *)(v597 + 24))
                        {
                          goto LABEL_1254;
                        }
                      }
                      else if (v661 == 17)
                      {
                        if (sub_1CB844168(v597, 0.0)) {
                          goto LABEL_1254;
                        }
                      }
                      else if (v661 - 18 < 3 || v661 == 13)
                      {
                        goto LABEL_1254;
                      }
                      if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v597) & 1) == 0) {
                        goto LABEL_1342;
                      }
LABEL_1254:
                      if ((v595 & 0x3E) == 0x24) {
                        v663 = *v825;
                      }
                      else {
                        v663 = (llvm::LLVMContext *)*p_p_NullValue;
                      }
                      if ((v595 & 0x3E) == 0x24) {
                        v664 = (llvm::Value *)*p_p_NullValue;
                      }
                      else {
                        v664 = *v825;
                      }
                      NullValue = 0;
                      int v665 = *(unsigned __int8 *)(v598 + 16);
                      if (v665 == 5)
                      {
                        if (*(_WORD *)(v598 + 18) != 15) {
                          goto LABEL_1268;
                        }
                        v667 = (llvm::LLVMContext **)(v598 - 32 * (*(_DWORD *)(v598 + 20) & 0x7FFFFFF));
                        if (v663 != *v667) {
                          goto LABEL_1268;
                        }
                        v666 = v667[4];
                      }
                      else
                      {
                        if (v665 != 43 || v663 != *(llvm::LLVMContext **)(v598 - 64)) {
                          goto LABEL_1268;
                        }
                        v666 = *(llvm::Value **)(v598 - 32);
                      }
                      if (v664 == v666) {
                        goto LABEL_1300;
                      }
LABEL_1268:
                      v855 = (llvm::Constant *)&NullValue;
                      *(void *)&long long v856 = 0;
                      if (sub_1CBF528D8((uint64_t)&v855, (unsigned __int8 *)v664))
                      {
                        unsigned int v668 = *((_DWORD *)NullValue + 2);
                        LODWORD(v837) = v668;
                        if (v668 > 0x40) {
                          operator new[]();
                        }
                        if (v668) {
                          unint64_t v669 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v668;
                        }
                        else {
                          unint64_t v669 = 0;
                        }
                        __s2 = (void *)(v669 & ~*(void *)NullValue);
                        llvm::APInt::operator++((uint64_t)&__s2);
                        unsigned int v670 = v837;
                        LODWORD(v837) = 0;
                        unint64_t p_s2 = (unint64_t)v663;
                        v671 = &p_s2;
                        p_unint64_t p_NullValue = (uint64_t *)&p_NullValue;
                        LODWORD(p_src) = v670;
                        if (v670 > 0x40) {
                          operator new[]();
                        }
                        unint64_t p_NullValue = (unint64_t)__s2;
                        int v672 = *(unsigned __int8 *)(v598 + 16);
                        if (v672 == 41)
                        {
                          BOOL v673 = p_s2 == *(void *)(v598 - 64)
                              && sub_1CBF53154((llvm::APInt *)&p_NullValue, *(unsigned __int8 **)(v598 - 32));
                        }
                        else
                        {
                          if (v672 == 5) {
                            LOBYTE(v671) = *(_WORD *)(v598 + 18) == 13
                          }
                                        && (uint64_t v674 = v598 - 32 * (*(_DWORD *)(v598 + 20) & 0x7FFFFFF),
                                            p_s2 == *(void *)v674)
                                        && sub_1CBF531E4((llvm::APInt *)&p_NullValue, *(llvm::Constant **)(v674 + 32));
                          BOOL v673 = (v672 == 5) & v671;
                        }
                        if (p_src >= 0x41 && p_NullValue) {
                          MEMORY[0x1D25D9CB0](p_NullValue, 0x1000C8000313F17);
                        }
                        if (v837 >= 0x41 && __s2) {
                          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                        }
                        if (v673)
                        {
LABEL_1300:
                          uint64_t v675 = *(void *)(v598 + 8);
                          if (v675 && !*(void *)(v675 + 8) || (v676 = v7[1]) != 0 && !v676[1])
                          {
                            WORD4(v852) = 257;
                            v677 = (llvm::BinaryOperator *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v594, 311, v664, v663, 0, (const llvm::Twine *)&p_s2);
                            WORD4(v852) = 257;
                            uint64_t v678 = (uint64_t)sub_1CD5A6358((uint64_t)v594, v677, (uint64_t)&p_s2, 0, 0);
                            goto LABEL_1341;
                          }
LABEL_1342:
                          v689 = v7[1];
                          if (!v689 || v689[1]) {
                            goto LABEL_1551;
                          }
                          v594 = *(llvm::IRBuilderBase **)(a1 + 24);
                          v690 = (unsigned __int8 *)*(v7 - 8);
                          v691 = (unsigned __int8 *)*(v7 - 4);
                          unsigned int v7 = (uint64_t ***)(*((_WORD *)v7 + 9) & 0x3F);
                          __src = 0;
                          NullValue = 0;
                          v848 = 0;
                          if (v7 == 36)
                          {
                            v692 = &__src;
                            unint64_t p_s2 = (unint64_t)&__src;
                            unint64_t p_NullValue = (unint64_t)&NullValue;
                            uint64_t p_src = 0;
                            int v693 = v146[16];
                            if (v693 == 41)
                            {
                              if (!*((void *)v146 - 8)) {
                                goto LABEL_1377;
                              }
                              __src = (void *)*((void *)v146 - 8);
                              if ((sub_1CBF528D8((uint64_t)&p_NullValue, *((unsigned __int8 **)v146 - 4)) & 1) == 0) {
                                goto LABEL_1377;
                              }
                              int v694 = 1;
                            }
                            else
                            {
                              if (v693 == 5) {
                                LOBYTE(v692) = *((_WORD *)v146 + 9) == 13
                              }
                                            && (v695 = &v146[-32 * (*((_DWORD *)v146 + 5) & 0x7FFFFFF)], *(void *)v695)
                                            && (__src = *(void **)v695,
                                                (sub_1CBF5295C((uint64_t)&p_NullValue, *((llvm::Constant **)v695 + 4)) & 1) != 0);
                              int v694 = (v693 == 5) & v692;
                            }
                            if (v694)
                            {
                              if (__src == v690)
                              {
                                if (sub_1CBF687D0((uint64_t)v845, (llvm::Constant *)v828))
                                {
                                  v855 = (llvm::Constant *)&v848;
                                  *(void *)&long long v856 = 0;
                                  if (sub_1CBF528D8((uint64_t)&v855, v691))
                                  {
                                    unsigned int v697 = *((_DWORD *)NullValue + 2);
                                    LODWORD(v837) = v697;
                                    if (v697 > 0x40) {
                                      operator new[]();
                                    }
                                    uint64_t v698 = ~*(void *)NullValue;
                                    unint64_t v699 = v697 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v697 : 0;
                                    v700 = (const void *)(v699 & v698);
                                    __s2 = (void *)(v699 & v698);
                                    LODWORD(v837) = 0;
                                    uint64_t v701 = *((unsigned int *)v848 + 2);
                                    if (v701 > 0x40
                                       ? memcmp(*(const void **)v848, v700, ((unint64_t)(v701 + 63) >> 3) & 0x3FFFFFF8) == 0: *(void *)v848 == (void)v700)
                                    {
                                      v704 = (llvm::Value *)__src;
                                      v705 = *(llvm::ConstantInt **)__src;
                                      v706 = (llvm::Value *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)__src, NullValue, v696);
                                      if ((*((_DWORD *)v705 + 2) & 0xFE) == 0x12) {
                                        v706 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v705 + 8) | ((unint64_t)(*((_DWORD *)v705 + 2) == 19) << 32)), (uint64_t)v706);
                                      }
                                      WORD4(v852) = 257;
                                      v707 = v594;
                                      v708 = v704;
LABEL_1546:
                                      v145 = (llvm::Value *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v707, 300, v708, v706, 0, (const llvm::Twine *)&p_s2);
                                      if (v145) {
                                        goto LABEL_1547;
                                      }
                                      goto LABEL_1551;
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_1377:
                          uint64_t v709 = v828;
                          if (sub_1CBF687D0((uint64_t)&p_s2, (llvm::Constant *)v828))
                          {
                            int v710 = 33;
                            uint64_t v709 = (uint64_t)v146;
                            switch((unint64_t)v7)
                            {
                              case 1uLL:
                                int v710 = 14;
                                goto LABEL_1429;
                              case 2uLL:
                                int v710 = 13;
                                goto LABEL_1429;
                              case 3uLL:
                                int v710 = 12;
                                goto LABEL_1429;
                              case 4uLL:
                                int v710 = 11;
                                goto LABEL_1429;
                              case 5uLL:
                                int v710 = 10;
                                goto LABEL_1429;
                              case 6uLL:
                                int v710 = 9;
                                goto LABEL_1429;
                              case 7uLL:
                                int v710 = 8;
                                goto LABEL_1429;
                              case 8uLL:
                                int v710 = 7;
                                goto LABEL_1429;
                              case 9uLL:
                                int v710 = 6;
                                goto LABEL_1429;
                              case 0xAuLL:
                                int v710 = 5;
                                goto LABEL_1429;
                              case 0xBuLL:
                                int v710 = 4;
                                goto LABEL_1429;
                              case 0xCuLL:
                                int v710 = 3;
                                goto LABEL_1429;
                              case 0xDuLL:
                                int v710 = 2;
                                goto LABEL_1429;
                              case 0xEuLL:
                                int v710 = 1;
                                goto LABEL_1429;
                              case 0xFuLL:
                                int v710 = 0;
                                goto LABEL_1429;
                              case 0x10uLL:
                              case 0x11uLL:
                              case 0x12uLL:
                              case 0x13uLL:
                              case 0x14uLL:
                              case 0x15uLL:
                              case 0x16uLL:
                              case 0x17uLL:
                              case 0x18uLL:
                              case 0x19uLL:
                              case 0x1AuLL:
                              case 0x1BuLL:
                              case 0x1CuLL:
                              case 0x1DuLL:
                              case 0x1EuLL:
                              case 0x1FuLL:
                                goto LABEL_1673;
                              case 0x20uLL:
                                goto LABEL_1430;
                              case 0x21uLL:
                                int v710 = 32;
                                goto LABEL_1429;
                              case 0x22uLL:
                                int v710 = 37;
                                goto LABEL_1429;
                              case 0x23uLL:
                                int v710 = 36;
                                goto LABEL_1429;
                              case 0x24uLL:
                                int v710 = 35;
                                goto LABEL_1429;
                              case 0x25uLL:
                                int v710 = 34;
                                goto LABEL_1429;
                              case 0x26uLL:
                                int v710 = 41;
                                goto LABEL_1429;
                              case 0x27uLL:
                                int v710 = 40;
                                goto LABEL_1429;
                              case 0x28uLL:
                                int v710 = 39;
                                goto LABEL_1429;
                              case 0x29uLL:
                                int v710 = 38;
                                goto LABEL_1429;
                              default:
                                int v710 = 15;
LABEL_1429:
                                uint64_t v709 = (uint64_t)v146;
LABEL_1430:
                                int v711 = sub_1CBF687D0((uint64_t)&p_s2, (llvm::Constant *)v828);
                                break;
                            }
                          }
                          else
                          {
                            int v710 = (int)v7;
                            int v711 = sub_1CBF687D0((uint64_t)&p_s2, (llvm::Constant *)v146);
                          }
                          if (!v711) {
                            goto LABEL_1551;
                          }
                          if ((v710 & 0x3E) == 0x22)
                          {
                            if (v710 == 35) {
                              int v710 = 37;
                            }
                            else {
                              int v710 = 36;
                            }
                            uint64_t v719 = (uint64_t)v691;
                            v691 = v690;
                          }
                          else
                          {
                            uint64_t v719 = (uint64_t)v690;
                            if ((v710 - 38) < 0xFFFFFFFE) {
                              goto LABEL_1551;
                            }
                          }
                          unint64_t p_s2 = (unint64_t)&__src;
                          if (sub_1CBF686A0((void **)&p_s2, 30, v719))
                          {
                            v708 = (llvm::Value *)__src;
                            int v720 = *(unsigned __int8 *)(v709 + 16);
                            if (v720 == 5)
                            {
                              if (*(_WORD *)(v709 + 18) == 13)
                              {
                                uint64_t v724 = v709 - 32 * (*(_DWORD *)(v709 + 20) & 0x7FFFFFF);
                                v721 = *(unsigned __int8 **)v724;
                                v722 = *(unsigned __int8 **)(v724 + 32);
                                if (__src == v721 && v722) {
                                  goto LABEL_1481;
                                }
                                int v723 = 5;
                                if (v721)
                                {
LABEL_1448:
                                  BOOL v19 = __src == v722;
                                  v722 = v721;
                                  if (!v19) {
                                    goto LABEL_1452;
                                  }
LABEL_1481:
                                  if (v722 == v691)
                                  {
                                    WORD4(v852) = 257;
                                    v707 = v594;
                                    v706 = (llvm::Value *)v691;
                                    goto LABEL_1546;
                                  }
LABEL_1453:
                                  __src = (void *)v719;
                                  unint64_t p_s2 = v719;
                                  uint64_t p_src = (uint64_t)v691;
                                  if (v720 != 5)
                                  {
                                    if (v720 != 41) {
                                      goto LABEL_1526;
                                    }
                                    v726 = (const void **)(v709 - 64);
                                    uint64_t v725 = *(void *)(v709 - 64);
                                    int v727 = *(unsigned __int8 *)(v725 + 16);
                                    if (v727 == 5)
                                    {
                                      if (*(_WORD *)(v725 + 18) == 30)
                                      {
                                        uint64_t v732 = *(_DWORD *)(v725 + 20) & 0x7FFFFFF;
                                        uint64_t v733 = v725 - 32 * v732;
                                        if (v719 == *(void *)v733)
                                        {
                                          if (sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)(v733 + 32))) {
                                            goto LABEL_1487;
                                          }
                                          unint64_t v735 = p_s2;
                                          uint64_t v734 = -(uint64_t)(*(_DWORD *)(v725 + 20) & 0x7FFFFFF);
                                        }
                                        else
                                        {
                                          uint64_t v734 = -v732;
                                          unint64_t v735 = v719;
                                        }
                                        uint64_t v740 = v725 + 32 * v734;
                                        if (v735 != *(void *)(v740 + 32)
                                          || !sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)v740))
                                        {
                                          goto LABEL_1488;
                                        }
LABEL_1487:
                                        if (p_src == *(void *)(v709 - 32)) {
                                          goto LABEL_1540;
                                        }
                                      }
                                    }
                                    else if (v727 == 58)
                                    {
                                      unint64_t v728 = v719;
                                      if (v719 == *(void *)(v725 - 64))
                                      {
                                        if (sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v725 - 32))) {
                                          goto LABEL_1487;
                                        }
                                        unint64_t v728 = p_s2;
                                      }
                                      if (v728 != *(void *)(v725 - 32)
                                        || (sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v725 - 64)) & 1) == 0)
                                      {
                                        goto LABEL_1488;
                                      }
                                      goto LABEL_1487;
                                    }
LABEL_1488:
                                    uint64_t v741 = *(void *)(v709 - 32);
                                    int v742 = *(unsigned __int8 *)(v741 + 16);
                                    if (v742 != 5)
                                    {
                                      if (v742 != 58) {
                                        goto LABEL_1526;
                                      }
                                      unint64_t v743 = p_s2;
                                      if (p_s2 != *(void *)(v741 - 64))
                                      {
LABEL_1493:
                                        if (v743 != *(void *)(v741 - 32)
                                          || (sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v741 - 64)) & 1) == 0)
                                        {
                                          goto LABEL_1526;
                                        }
                                        goto LABEL_1525;
                                      }
                                      if ((sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v741 - 32)) & 1) == 0)
                                      {
                                        unint64_t v743 = p_s2;
                                        goto LABEL_1493;
                                      }
                                      goto LABEL_1525;
                                    }
                                    if (*(_WORD *)(v741 + 18) != 30) {
                                      goto LABEL_1526;
                                    }
                                    uint64_t v744 = *(_DWORD *)(v741 + 20) & 0x7FFFFFF;
                                    uint64_t v745 = v741 - 32 * v744;
                                    unint64_t v746 = p_s2;
                                    if (p_s2 == *(void *)v745)
                                    {
                                      if (sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)(v745 + 32))) {
                                        goto LABEL_1525;
                                      }
                                      unint64_t v746 = p_s2;
                                      uint64_t v747 = -(uint64_t)(*(_DWORD *)(v741 + 20) & 0x7FFFFFF);
                                    }
                                    else
                                    {
                                      uint64_t v747 = -v744;
                                    }
                                    uint64_t v748 = v741 + 32 * v747;
                                    if (v746 == *(void *)(v748 + 32)
                                      && (sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)v748) & 1) != 0)
                                    {
LABEL_1525:
                                      if ((const void *)p_src != *v726) {
                                        goto LABEL_1526;
                                      }
LABEL_1540:
                                      v708 = *(llvm::Value **)(v709 - 64);
                                      v706 = *(llvm::Value **)(v709 - 32);
                                      WORD4(v852) = 257;
                                      v707 = v594;
                                      goto LABEL_1546;
                                    }
LABEL_1526:
                                    if (v710 != 36) {
                                      goto LABEL_1551;
                                    }
                                    int v758 = *(unsigned __int8 *)(v719 + 16);
                                    if (v758 == 5)
                                    {
                                      if (*(_WORD *)(v719 + 18) != 13) {
                                        goto LABEL_1551;
                                      }
                                      v760 = (llvm::Value **)(v719 - 32 * (*(_DWORD *)(v719 + 20) & 0x7FFFFFF));
                                      v759 = *v760;
                                      v706 = v760[4];
                                    }
                                    else
                                    {
                                      if (v758 != 41) {
                                        goto LABEL_1551;
                                      }
                                      v759 = *(llvm::Value **)(v719 - 64);
                                      v706 = *(llvm::Value **)(v719 - 32);
                                    }
                                    if (v691 != (unsigned __int8 *)v759 || !v706)
                                    {
                                      if (!v759) {
                                        goto LABEL_1551;
                                      }
                                      BOOL v19 = v691 == (unsigned __int8 *)v706;
                                      v706 = v759;
                                      if (!v19) {
                                        goto LABEL_1551;
                                      }
                                    }
                                    int v761 = *(unsigned __int8 *)(v709 + 16);
                                    if (v761 == 5)
                                    {
                                      if (*(_WORD *)(v709 + 18) != 13) {
                                        goto LABEL_1551;
                                      }
                                      v764 = (unsigned __int8 **)(v709 - 32 * (*(_DWORD *)(v709 + 20) & 0x7FFFFFF));
                                      v762 = *v764;
                                      v763 = (llvm::Value *)v764[4];
                                    }
                                    else
                                    {
                                      if (v761 != 41) {
                                        goto LABEL_1551;
                                      }
                                      v762 = *(unsigned __int8 **)(v709 - 64);
                                      v763 = *(llvm::Value **)(v709 - 32);
                                    }
                                    if (v691 == v762 && v706 == v763
                                      || v691 == (unsigned __int8 *)v763 && v706 == (llvm::Value *)v762)
                                    {
                                      WORD4(v852) = 257;
                                      v707 = v594;
                                      v708 = (llvm::Value *)v691;
                                      goto LABEL_1546;
                                    }
LABEL_1551:
                                    if (v826) {
                                      return (llvm::UndefValue **)a2;
                                    }
                                    else {
                                      return 0;
                                    }
                                  }
                                  if (*(_WORD *)(v709 + 18) != 13) {
                                    goto LABEL_1526;
                                  }
                                  uint64_t v729 = *(void *)(v709 - 32 * (*(_DWORD *)(v709 + 20) & 0x7FFFFFF));
                                  int v730 = *(unsigned __int8 *)(v729 + 16);
                                  if (v730 != 5)
                                  {
                                    if (v730 != 58) {
                                      goto LABEL_1509;
                                    }
                                    unint64_t v731 = v719;
                                    if (v719 != *(void *)(v729 - 64))
                                    {
LABEL_1469:
                                      if (v731 != *(void *)(v729 - 32)
                                        || (sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v729 - 64)) & 1) == 0)
                                      {
                                        goto LABEL_1509;
                                      }
                                      goto LABEL_1508;
                                    }
                                    if ((sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v729 - 32)) & 1) == 0)
                                    {
                                      unint64_t v731 = p_s2;
                                      goto LABEL_1469;
                                    }
LABEL_1508:
                                    if (p_src == *(void *)(v709 - 32 * (*(_DWORD *)(v709 + 20) & 0x7FFFFFF) + 32)) {
                                      goto LABEL_1540;
                                    }
LABEL_1509:
                                    uint64_t v750 = *(void *)(v709 - 32 * (*(_DWORD *)(v709 + 20) & 0x7FFFFFF) + 32);
                                    int v751 = *(unsigned __int8 *)(v750 + 16);
                                    if (v751 == 5)
                                    {
                                      if (*(_WORD *)(v750 + 18) != 30) {
                                        goto LABEL_1526;
                                      }
                                      uint64_t v753 = *(_DWORD *)(v750 + 20) & 0x7FFFFFF;
                                      uint64_t v754 = v750 - 32 * v753;
                                      unint64_t v755 = p_s2;
                                      if (p_s2 == *(void *)v754)
                                      {
                                        if (sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)(v754 + 32))) {
                                          goto LABEL_1524;
                                        }
                                        unint64_t v755 = p_s2;
                                        uint64_t v756 = -(uint64_t)(*(_DWORD *)(v750 + 20) & 0x7FFFFFF);
                                      }
                                      else
                                      {
                                        uint64_t v756 = -v753;
                                      }
                                      uint64_t v757 = v750 + 32 * v756;
                                      if (v755 != *(void *)(v757 + 32)
                                        || !sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)v757))
                                      {
                                        goto LABEL_1526;
                                      }
                                    }
                                    else
                                    {
                                      if (v751 != 58) {
                                        goto LABEL_1526;
                                      }
                                      unint64_t v752 = p_s2;
                                      if (p_s2 == *(void *)(v750 - 64))
                                      {
                                        if (sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v750 - 32))) {
                                          goto LABEL_1524;
                                        }
                                        unint64_t v752 = p_s2;
                                      }
                                      if (v752 != *(void *)(v750 - 32)
                                        || (sub_1CBF687D0((uint64_t)&p_NullValue, *(llvm::Constant **)(v750 - 64)) & 1) == 0)
                                      {
                                        goto LABEL_1526;
                                      }
                                    }
LABEL_1524:
                                    v726 = (const void **)(v709 - 32 * (*(_DWORD *)(v709 + 20) & 0x7FFFFFF));
                                    goto LABEL_1525;
                                  }
                                  if (*(_WORD *)(v729 + 18) != 30) {
                                    goto LABEL_1509;
                                  }
                                  uint64_t v736 = *(_DWORD *)(v729 + 20) & 0x7FFFFFF;
                                  uint64_t v737 = v729 - 32 * v736;
                                  if (v719 == *(void *)v737)
                                  {
                                    if (sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)(v737 + 32))) {
                                      goto LABEL_1508;
                                    }
                                    unint64_t v739 = p_s2;
                                    uint64_t v738 = -(uint64_t)(*(_DWORD *)(v729 + 20) & 0x7FFFFFF);
                                  }
                                  else
                                  {
                                    uint64_t v738 = -v736;
                                    unint64_t v739 = v719;
                                  }
                                  uint64_t v749 = v729 + 32 * v738;
                                  if (v739 != *(void *)(v749 + 32)
                                    || !sub_1CBF68974((uint64_t)&p_NullValue, *(llvm::Constant **)v749))
                                  {
                                    goto LABEL_1509;
                                  }
                                  goto LABEL_1508;
                                }
                              }
                              else
                              {
                                int v723 = 5;
                              }
                            }
                            else
                            {
                              if (v720 == 41)
                              {
                                v721 = *(unsigned __int8 **)(v709 - 64);
                                v722 = *(unsigned __int8 **)(v709 - 32);
                                if (__src == v721 && v722) {
                                  goto LABEL_1481;
                                }
                                int v723 = 41;
                                if (!v721) {
                                  goto LABEL_1452;
                                }
                                goto LABEL_1448;
                              }
                              int v723 = *(unsigned __int8 *)(v709 + 16);
                            }
                          }
                          else
                          {
                            int v723 = *(unsigned __int8 *)(v709 + 16);
                          }
LABEL_1452:
                          int v720 = v723;
                          goto LABEL_1453;
                        }
                      }
                      int v679 = *(unsigned __int8 *)(v598 + 16);
                      if (v679 == 5)
                      {
                        if (*(_WORD *)(v598 + 18) == 15)
                        {
                          v681 = (llvm::Value **)(v598 - 32 * (*(_DWORD *)(v598 + 20) & 0x7FFFFFF));
                          if (v664 == *v681)
                          {
                            v680 = v681[4];
LABEL_1312:
                            if (v663 == v680) {
                              goto LABEL_1340;
                            }
                          }
                        }
                      }
                      else if (v679 == 43 && v664 == *(llvm::Value **)(v598 - 64))
                      {
                        v680 = *(llvm::LLVMContext **)(v598 - 32);
                        goto LABEL_1312;
                      }
                      v855 = (llvm::Constant *)&NullValue;
                      *(void *)&long long v856 = 0;
                      if (!sub_1CBF528D8((uint64_t)&v855, (unsigned __int8 *)v663)) {
                        goto LABEL_1342;
                      }
                      unsigned int v682 = *((_DWORD *)NullValue + 2);
                      unsigned int v847 = v682;
                      if (v682 > 0x40) {
                        operator new[]();
                      }
                      if (v682) {
                        unint64_t v683 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v682;
                      }
                      else {
                        unint64_t v683 = 0;
                      }
                      __src = (void *)(v683 & ~*(void *)NullValue);
                      llvm::APInt::operator++((uint64_t)&__src);
                      unsigned int v684 = v847;
                      unsigned int v847 = 0;
                      unint64_t p_s2 = (unint64_t)v664;
                      v685 = &p_s2;
                      p_unint64_t p_NullValue = (uint64_t *)&p_NullValue;
                      LODWORD(p_src) = v684;
                      if (v684 > 0x40) {
                        operator new[]();
                      }
                      unint64_t p_NullValue = (unint64_t)__src;
                      int v686 = *(unsigned __int8 *)(v598 + 16);
                      if (v686 == 41)
                      {
                        char v687 = p_s2 != *(void *)(v598 - 64)
                            || !sub_1CBF53154((llvm::APInt *)&p_NullValue, *(unsigned __int8 **)(v598 - 32));
                      }
                      else
                      {
                        if (v686 == 5) {
                          LOBYTE(v685) = *(_WORD *)(v598 + 18) == 13
                        }
                                      && (uint64_t v688 = v598 - 32 * (*(_DWORD *)(v598 + 20) & 0x7FFFFFF),
                                          p_s2 == *(void *)v688)
                                      && sub_1CBF531E4((llvm::APInt *)&p_NullValue, *(llvm::Constant **)(v688 + 32));
                        char v687 = (v686 != 5) | v685 ^ 1;
                      }
                      if (p_src >= 0x41 && p_NullValue) {
                        MEMORY[0x1D25D9CB0](p_NullValue, 0x1000C8000313F17);
                      }
                      if (v847 >= 0x41 && __src) {
                        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                      }
                      if (v687) {
                        goto LABEL_1342;
                      }
LABEL_1340:
                      WORD4(v852) = 257;
                      uint64_t v678 = llvm::IRBuilderBase::CreateBinaryIntrinsic(v594, 311, v664, v663, 0, (const llvm::Twine *)&p_s2);
LABEL_1341:
                      v145 = (llvm::Value *)v678;
                      if (!v678) {
                        goto LABEL_1342;
                      }
LABEL_1547:
                      uint64_t v143 = a1;
                      v144 = a2;
                      return sub_1CC9D3C84(v143, v144, v145);
                    }
                    int v657 = 0;
                    int64_t v658 = (unint64_t)(v599 + 63) >> 6;
                    do
                    {
                      BOOL v336 = v658-- < 1;
                      if (v336) {
                        break;
                      }
                      unint64_t v659 = *(void *)(*((void *)v146 + 3) + 8 * v658);
                      v657 += __clz(v659);
                    }
                    while (!v659);
                    int v660 = v599 | 0xFFFFFFC0;
                    if ((v599 & 0x3F) == 0) {
                      int v660 = 0;
                    }
                    if (v657 + v660 == v599) {
                      goto LABEL_1090;
                    }
                  }
                  else if (v596 == 17)
                  {
                    if (sub_1CB844168((uint64_t)v146, 0.0)) {
                      goto LABEL_1090;
                    }
                  }
                  else if (v596 - 18 < 3 || v596 == 13)
                  {
                    goto LABEL_1090;
                  }
LABEL_1089:
                  uint64_t v597 = v828;
                  uint64_t v598 = (uint64_t)v146;
                  if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v146) & 1) == 0) {
                    goto LABEL_1248;
                  }
                  goto LABEL_1090;
                }
                int v653 = 0;
                int64_t v654 = (unint64_t)(v575 + 63) >> 6;
                do
                {
                  BOOL v336 = v654-- < 1;
                  if (v336) {
                    break;
                  }
                  unint64_t v655 = *(void *)(*(void *)(v572 + 24) + 8 * v654);
                  v653 += __clz(v655);
                }
                while (!v655);
                int v656 = v575 | 0xFFFFFFC0;
                if ((v575 & 0x3F) == 0) {
                  int v656 = 0;
                }
                if (v653 + v656 == v575) {
                  goto LABEL_1054;
                }
              }
              else if (v573 == 17)
              {
                if (sub_1CB844168((uint64_t)*(v7 - 4), 0.0)) {
                  goto LABEL_1054;
                }
              }
              else if (v573 - 18 < 3 || v573 == 13)
              {
                goto LABEL_1054;
              }
LABEL_1053:
              if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v572) & 1) == 0) {
                goto LABEL_1083;
              }
              goto LABEL_1054;
            }
          }
          else
          {
            if (v480 != 38) {
              goto LABEL_1047;
            }
            LODWORD(v856) = v481;
            if (v481 > 0x40) {
              operator new[]();
            }
            if (v481) {
              v482 = (llvm::Constant *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v481);
            }
            else {
              v482 = 0;
            }
            v855 = v482;
            unint64_t p_s2 = 39;
            unint64_t p_NullValue = (unint64_t)&v855;
            int v483 = sub_1CCA16878((uint64_t)&p_s2, v477);
            if (v856 > 0x40 && v855) {
              MEMORY[0x1D25D9CB0](v855, 0x1000C8000313F17);
            }
            if (!v483) {
              goto LABEL_1047;
            }
          }
          uint64_t v493 = v828;
          if (v480 == 40) {
            uint64_t v494 = (uint64_t)v146;
          }
          else {
            uint64_t v494 = v828;
          }
          if (v480 != 40) {
            uint64_t v493 = (uint64_t)v146;
          }
          int v495 = *(unsigned __int8 *)(v493 + 16);
          if (v495 == 5)
          {
            if (*(_WORD *)(v493 + 18) != 26) {
              goto LABEL_1047;
            }
            v500 = (uint64_t *)(v493 - 32 * (*(_DWORD *)(v493 + 20) & 0x7FFFFFF));
            uint64_t v496 = *v500;
            if (!*v500) {
              goto LABEL_1047;
            }
            uint64_t v497 = v500[4];
            if (!v497) {
              goto LABEL_1047;
            }
          }
          else
          {
            if (v495 != 54) {
              goto LABEL_1047;
            }
            uint64_t v496 = *(void *)(v493 - 64);
            if (!v496) {
              goto LABEL_1047;
            }
            uint64_t v497 = *(void *)(v493 - 32);
            if (!v497) {
              goto LABEL_1047;
            }
          }
          int v501 = *(unsigned __int8 *)(v494 + 16);
          if (v501 == 5)
          {
            if (*(_WORD *)(v494 + 18) != 27) {
              goto LABEL_1047;
            }
            v509 = (void *)(v494 - 32 * (*(_DWORD *)(v494 + 20) & 0x7FFFFFF));
            if (v496 != *v509) {
              goto LABEL_1047;
            }
            uint64_t v502 = v509[4];
          }
          else
          {
            if (v501 != 55 || v496 != *(void *)(v494 - 64)) {
              goto LABEL_1047;
            }
            uint64_t v502 = *(void *)(v494 - 32);
          }
          if (v497 != v502 || v496 != v476) {
            goto LABEL_1047;
          }
          if ((*(unsigned char *)(v494 + 17) & 2) != 0) {
            int v510 = (*(unsigned __int8 *)(v493 + 17) >> 1) & 1;
          }
          else {
            LOBYTE(v510) = 0;
          }
          if ((*((unsigned char *)v7 + 23) & 0x10) == 0)
          {
            v569 = 0;
            v568 = &byte_1CFBCE98E;
LABEL_1045:
            WORD4(v852) = 261;
            unint64_t p_s2 = (unint64_t)v568;
            unint64_t p_NullValue = (unint64_t)v569;
            v558 = sub_1CC5357E8(v475, v496, v497, (uint64_t)&p_s2, v510);
            if (!v558) {
              goto LABEL_1047;
            }
LABEL_1046:
            v145 = v558;
            goto LABEL_1547;
          }
          uint64_t v559 = ***v7;
          uint64_t v560 = *(void *)(v559 + 152);
          uint64_t v561 = *(unsigned int *)(v559 + 168);
          if (v561)
          {
            LODWORD(v562) = (v561 - 1) & ((v7 >> 4) ^ (v7 >> 9));
            v563 = (uint64_t ****)(v560 + 16 * v562);
            v564 = *v563;
            if (*v563 == v7)
            {
LABEL_1044:
              v567 = v563[1];
              v570 = (int8x8_t **)*v567;
              v568 = (char *)(v567 + 2);
              v569 = v570;
              goto LABEL_1045;
            }
            int v565 = 1;
            while (v564 != (uint64_t ***)-4096)
            {
              int v566 = v562 + v565++;
              uint64_t v562 = v566 & (v561 - 1);
              v564 = *(uint64_t ****)(v560 + 16 * v562);
              if (v564 == v7)
              {
                v563 = (uint64_t ****)(v560 + 16 * v562);
                goto LABEL_1044;
              }
            }
          }
          v563 = (uint64_t ****)(v560 + 16 * v561);
          goto LABEL_1044;
        }
        int v797 = 0;
        int64_t v798 = (unint64_t)(v504 + 63) >> 6;
        do
        {
          BOOL v336 = v798-- < 1;
          if (v336) {
            break;
          }
          unint64_t v799 = *(void *)(*(void *)(v485 + 24) + 8 * v798);
          v797 += __clz(v799);
        }
        while (!v799);
        int v800 = v504 | 0xFFFFFFC0;
        if ((v504 & 0x3F) == 0) {
          int v800 = 0;
        }
        if (v797 + v800 == v504) {
          goto LABEL_956;
        }
      }
      else if (v503 == 17)
      {
        if (sub_1CB844168(v485, 0.0)) {
          goto LABEL_956;
        }
      }
      else if (v503 - 18 < 3 || v503 == 13)
      {
        goto LABEL_956;
      }
LABEL_955:
      if ((sub_1CC03F414((uint64_t)&p_s2, (llvm::Constant *)v485) & 1) == 0) {
        goto LABEL_899;
      }
      goto LABEL_956;
    }
  }
  else
  {
    if (v406 != 56) {
      goto LABEL_628;
    }
    v407 = (llvm::Constant *)*((void *)v405 - 8);
    v408 = (llvm::Constant *)*((void *)v405 - 4);
    if (v401 != v407 || !v408)
    {
      if (!v407) {
        goto LABEL_628;
      }
      BOOL v19 = v401 == v408;
      v408 = (llvm::Constant *)*((void *)v405 - 8);
      if (!v19) {
        goto LABEL_628;
      }
    }
  }
  v770 = llvm::ConstantInt::get(v357, 1uLL, 0);
  if (v404)
  {
    WORD4(v852) = 257;
    v770 = sub_1CC242524(v358, (uint64_t)v770, v403, (uint64_t)&p_s2, 0, 0);
  }
  WORD4(v852) = 257;
  v771 = sub_1CB844AF4(v358, v408, (uint64_t)v770, (uint64_t)&p_s2);
  WORD4(v852) = 257;
  v772 = (llvm::Constant **)sub_1CBF52474(v358, v401, (uint64_t)v771, (uint64_t)&p_s2);
  WORD4(v852) = 257;
  v775 = llvm::Constant::getNullValue(*v772, v773, v774);
  v776 = sub_1CB845F20(v358, 33, v772, (uint64_t)v775, (uint64_t)&p_s2);
  v777 = (char *)operator new(0x60uLL);
  *((_DWORD *)v777 + 13) = *((_DWORD *)v777 + 13) & 0x38000000 | 1;
  int v37 = (llvm::UndefValue **)(v777 + 32);
  *(void *)v777 = 0;
  *((void *)v777 + 1) = 0;
  *((void *)v777 + 2) = 0;
  *((void *)v777 + 3) = v777 + 32;
  WORD4(v852) = 257;
  llvm::ZExtInst::ZExtInst((llvm::ZExtInst *)(v777 + 32), v776, v357, (const char **)&p_s2, 0);
  return v37;
}

llvm::Value *sub_1CCA9F57C(uint64_t a1, uint64_t *a2, const llvm::APFloat *a3, uint64_t a4)
{
  int v4 = a4;
  uint64_t v6 = *((void *)a3 - 12);
  unsigned int v7 = (llvm::Constant **)*((void *)a3 - 8);
  __int16 v8 = (uint64_t *)*((void *)a3 - 4);
  if ((uint64_t *)v6 == a2)
  {
    char v12 = a4;
    goto LABEL_8;
  }
  uint64_t result = 0;
  if (v6 && *(unsigned char *)(v6 + 16) == 81)
  {
    unsigned __int16 isImpliedCondition = llvm::isImpliedCondition(a2, *(_WORD *)(v6 + 18) & 0x3F, *(void *)(v6 - 64), *(void *)(v6 - 32), *(const llvm::DataLayout **)(a1 + 80), a4, 0);
    if (isImpliedCondition < 0x100u) {
      return 0;
    }
    char v12 = isImpliedCondition;
LABEL_8:
    NullValue = llvm::Constant::getNullValue(*v7, (llvm::Type *)a2, a3);
    AllOnesValue = (uint64_t *)llvm::Constant::getAllOnesValue(*v7, v14, v15);
    if (v12)
    {
      if (!v4)
      {
        __int16 v20 = 257;
        uint64_t v17 = (uint64_t)a2;
        uint64_t v18 = (uint64_t)v7;
        return sub_1CC199EFC(v17, AllOnesValue, v18, &v19, 0, 0);
      }
      __int16 v20 = 257;
      uint64_t v17 = (uint64_t)a2;
      AllOnesValue = (uint64_t *)v7;
    }
    else
    {
      if (!v4)
      {
        __int16 v20 = 257;
        uint64_t v17 = (uint64_t)a2;
        uint64_t v18 = (uint64_t)v8;
        return sub_1CC199EFC(v17, AllOnesValue, v18, &v19, 0, 0);
      }
      __int16 v20 = 257;
      uint64_t v17 = (uint64_t)a2;
      AllOnesValue = v8;
    }
    uint64_t v18 = (uint64_t)NullValue;
    return sub_1CC199EFC(v17, AllOnesValue, v18, &v19, 0, 0);
  }
  return result;
}

llvm::Value *sub_1CCA9F6B0(std::string::size_type a1, llvm::Type **a2)
{
  uint64_t v1379 = *MEMORY[0x1E4F143B8];
  v1333 = (unsigned __int8 **)(a2 - 12);
  int v4 = *(a2 - 8);
  v1331 = (uint64_t ***)(a2 - 8);
  v1330 = (uint64_t ***)(a2 - 4);
  v1335 = *(a2 - 4);
  v1337 = *(a2 - 12);
  unsigned int v5 = *a2;
  unsigned int v6 = (*((unsigned char *)v4 + 16) - 11);
  if (v6 >= 2)
  {
    if (v6 >= 0xFD)
    {
      *(void *)v1351 = &v1351[32];
      *(void *)&v1351[8] = &v1351[32];
      *(void *)&v1351[16] = 8;
      *(_DWORD *)&v1351[24] = 0;
      int8x8_t data = (int8x8_t)((char *)&v1366 + 8);
      *(void *)&long long v1366 = 0x800000000;
      v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v1351;
      v1376.__r_.__value_.__l.__size_ = (std::string::size_type)&data;
      BOOL v244 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v1376, (uint64_t)v4))
      {
        do
        {
          BOOL v244 = v1366 == 0;
          if (!v1366) {
            break;
          }
          uint64_t v1306 = *(void *)(*(void *)&data + 8 * v1366 - 8);
          LODWORD(v1366) = v1366 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v1376, v1306) & 1) != 0);
      }
      if ((long long *)data != (long long *)((char *)&v1366 + 8)) {
        free(*(void **)&data);
      }
      if (*(void *)&v1351[8] == *(void *)v1351)
      {
        if (v244) {
          goto LABEL_441;
        }
      }
      else
      {
        free(*(void **)&v1351[8]);
        if (v244) {
          goto LABEL_441;
        }
      }
    }
    unsigned int v7 = (*((unsigned char *)v1335 + 16) - 11);
    if (v7 >= 2)
    {
      if (v7 < 0xFD) {
        goto LABEL_5;
      }
      *(void *)v1351 = &v1351[32];
      *(void *)&v1351[8] = &v1351[32];
      *(void *)&v1351[16] = 8;
      *(_DWORD *)&v1351[24] = 0;
      int8x8_t data = (int8x8_t)((char *)&v1366 + 8);
      *(void *)&long long v1366 = 0x800000000;
      v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v1351;
      v1376.__r_.__value_.__l.__size_ = (std::string::size_type)&data;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v1376, (uint64_t)v1335))
      {
        do
        {
          BOOL v247 = v1366 != 0;
          if (!v1366) {
            break;
          }
          uint64_t v1307 = *(void *)(*(void *)&data + 8 * v1366 - 8);
          LODWORD(v1366) = v1366 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v1376, v1307) & 1) != 0);
      }
      else
      {
        BOOL v247 = 1;
      }
      if ((long long *)data != (long long *)((char *)&v1366 + 8)) {
        free(*(void **)&data);
      }
      if (*(void *)&v1351[8] != *(void *)v1351) {
        free(*(void **)&v1351[8]);
      }
      v245 = a2[1];
      if (!v245 || v247) {
        goto LABEL_5;
      }
      goto LABEL_442;
    }
  }
LABEL_441:
  v245 = a2[1];
  if (!v245) {
    goto LABEL_5;
  }
  do
  {
LABEL_442:
    uint64_t v246 = (void *)*((void *)v245 + 3);
    if (v246 && *((unsigned char *)v246 + 16) == 81 && (*((_WORD *)v246 + 9) & 0x3E) == 0x20) {
      return 0;
    }
    v245 = (llvm::Type *)*((void *)v245 + 1);
  }
  while (v245);
LABEL_5:
  long long v8 = *(_OWORD *)(a1 + 120);
  long long v9 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v1351 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v1351[16] = v9;
  *(void *)&v1351[40] = *((void *)&v8 + 1);
  *(void *)&v1351[32] = a2;
  uint64_t UnaryIntrinsic = (uint64_t)sub_1CC035B70((uint64_t)v1337, (unsigned __int8 *)v4, (unsigned __int8 *)v1335, (uint64_t)v1351, 3);
  if (UnaryIntrinsic)
  {
LABEL_6:
    unsigned int v15 = (llvm::Instruction *)UnaryIntrinsic;
    goto LABEL_7;
  }
  v21 = *v1333;
  uint64_t v22 = *(void *)*v1333;
  if (v22) {
    BOOL v23 = *(unsigned char *)(v22 + 8) == 18;
  }
  else {
    BOOL v23 = 0;
  }
  if (v23 && v21[16] <= 0x14u)
  {
    unsigned int v24 = *(_DWORD *)(v22 + 32);
    *(void *)v1351 = &v1351[16];
    *(void *)&v1351[8] = 0x1000000000;
    if (v24 >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v24)
    {
      unsigned int v25 = 0;
      while (1)
      {
        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)v21, v25);
        if (!AggregateElement) {
          break;
        }
        uint64_t v27 = (uint64_t)AggregateElement;
        if (llvm::Constant::isOneValue(AggregateElement))
        {
          unint64_t v28 = *(unsigned int *)&v1351[8];
          unint64_t v29 = *(unsigned int *)&v1351[12];
          unsigned int v30 = v25;
        }
        else
        {
          int v31 = *(unsigned __int8 *)(v27 + 16);
          if (v31 == 16)
          {
            uint64_t v32 = *(unsigned int *)(v27 + 32);
            if (v32 >= 0x41)
            {
              int v34 = 0;
              int64_t v35 = (unint64_t)(v32 + 63) >> 6;
              do
              {
                BOOL v378 = v35-- < 1;
                if (v378) {
                  break;
                }
                unint64_t v36 = *(void *)(*(void *)(v27 + 24) + 8 * v35);
                v34 += __clz(v36);
              }
              while (!v36);
              int v37 = v32 | 0xFFFFFFC0;
              if ((v32 & 0x3F) == 0) {
                int v37 = 0;
              }
              if (v34 + v37 != v32) {
                break;
              }
            }
            else if (*(void *)(v27 + 24))
            {
              break;
            }
          }
          else if (v31 == 17)
          {
            if ((sub_1CB844168(v27, 0.0) & 1) == 0) {
              break;
            }
          }
          else if ((v31 - 18) >= 3 && v31 != 13)
          {
            break;
          }
          unsigned int v30 = v25 + v24;
          unint64_t v28 = *(unsigned int *)&v1351[8];
          unint64_t v29 = *(unsigned int *)&v1351[12];
        }
        if (v28 >= v29) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)v1351 + 4 * v28) = v30;
        ++*(_DWORD *)&v1351[8];
        unsigned int v25 = (llvm::Type *)(v25 + 1);
        if (v25 == v24) {
          goto LABEL_48;
        }
      }
      BitOrPointerCast = 0;
    }
    else
    {
LABEL_48:
      int v38 = (char *)operator new(0xA8uLL);
      *((_DWORD *)v38 + 21) = *((_DWORD *)v38 + 21) & 0x38000000 | 2;
      BitOrPointerCast = (uint64_t **)(v38 + 64);
      *(void *)int v38 = 0;
      *((void *)v38 + 1) = 0;
      *((void *)v38 + 2) = 0;
      *((void *)v38 + 3) = v38 + 64;
      *((void *)v38 + 4) = 0;
      *((void *)v38 + 5) = 0;
      *((void *)v38 + 6) = 0;
      *((void *)v38 + 7) = v38 + 64;
      uint64_t v39 = *v1331;
      int v40 = *v1330;
      LOWORD(v1368) = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v38 + 8, v39, v40, *(void **)v1351, (llvm::Type *)*(unsigned int *)&v1351[8], (const char **)&data, 0);
    }
    if (*(unsigned char **)v1351 != &v1351[16]) {
      free(*(void **)v1351);
    }
    if (BitOrPointerCast) {
      return (llvm::Value *)BitOrPointerCast;
    }
  }
  int v41 = *a2;
  if (*a2)
  {
    int v42 = *((_DWORD *)v41 + 2);
    if ((v42 & 0xFE) == 0x12)
    {
      uint64_t v43 = *v1333;
      uint64_t v44 = *((void *)*v1333 + 1);
      if (v44)
      {
        if (!*(void *)(v44 + 8) && v43[16] == 89)
        {
          int v45 = *((_DWORD *)v43 + 5);
          unsigned int v46 = (v45 & 0x40000000) != 0 ? (unsigned __int8 *)*((void *)v43 - 1) : &v43[-32 * (v45 & 0x7FFFFFF)];
          if (*(unsigned char *)(*((void *)v46 + 4) + 16) == 16)
          {
            uint64_t v47 = *(void *)(a1 + 24);
            uint64_t v48 = *((unsigned int *)v41 + 8);
            *(_WORD *)&v1351[32] = 257;
            VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v47, (llvm::Type *)(v48 | ((unint64_t)(v42 == 19) << 32)), v43, (uint64_t)v1351);
            BitOrPointerCast = (uint64_t **)sub_1CC9D28DC(a1, (uint64_t)a2, 0, (uint64_t)VectorSplat);
            if (BitOrPointerCast) {
              return (llvm::Value *)BitOrPointerCast;
            }
          }
        }
      }
    }
  }
  unsigned int v1336 = 0;
  int v50 = *((_DWORD *)v5 + 2);
  int v51 = v50;
  if ((v50 & 0xFE) == 0x12) {
    int v51 = *(_DWORD *)(**((void **)v5 + 2) + 8);
  }
  BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
  if (v51 == 269 && *((unsigned __int8 *)v1337 + 16) >= 0x15u && *(void *)v4 == *(void *)v1337)
  {
    if (sub_1CBF5250C((uint64_t)v1351, v4))
    {
      int v95 = sub_1CC16A138((uint64_t)v1335, (uint64_t)v1337, 0);
      v96 = v1337;
      if (v95)
      {
        *(_WORD *)&v1351[32] = 257;
        uint64_t v97 = (int8x8_t *)v1351;
        char v98 = 29;
        v99 = v1335;
        return llvm::BinaryOperator::Create(v98, v96, (uint64_t)v99, (const char **)v97, 0);
      }
      if (v1337)
      {
        if (*((unsigned char *)v1337 + 16) == 82 && *((unsigned char *)v1335 + 16) == 82)
        {
          if (v1335)
          {
            uint64_t UnaryIntrinsic = (uint64_t)sub_1CCA00074(a1, (uint64_t)v1337, (uint64_t)v1335, 0, 1);
            if (UnaryIntrinsic) {
              goto LABEL_6;
            }
          }
        }
      }
    }
    if (!v1335 || (unsigned int v182 = *((unsigned __int8 *)v1335 + 16), v182 > 0x14))
    {
LABEL_350:
      uint64_t v195 = **(void **)v5;
      Splat = *(unsigned __int8 **)(v195 + 1560);
      if (!Splat)
      {
        int v624 = *(llvm::ConstantInt **)(v195 + 1888);
        unsigned int v625 = *(_DWORD *)(v195 + 1896);
        *(_DWORD *)&v1351[8] = v625 >> 8;
        if (v625 >> 8 > 0x40) {
          operator new[]();
        }
        if (v625 <= 0xFF) {
          char v626 = 0;
        }
        else {
          char v626 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v625) + 63);
        }
        *(void *)v1351 = v626 & 1;
        Splat = (unsigned __int8 *)llvm::ConstantInt::get(v624, (llvm::LLVMContext *)v1351, v93);
        if (*(_DWORD *)&v1351[8] >= 0x41u && *(void *)v1351) {
          MEMORY[0x1D25D9CB0](*(void *)v1351, 0x1000C8000313F17);
        }
        *(void *)(v195 + 1560) = Splat;
      }
      if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
        Splat = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v5 + 8) | ((unint64_t)(*((_DWORD *)v5 + 2) == 19) << 32)), (uint64_t)Splat);
      }
      uint64_t v197 = **(void **)v5;
      v198 = *(unsigned __int8 **)(v197 + 1568);
      if (!v198)
      {
        int v616 = *(llvm::ConstantInt **)(v197 + 1888);
        unsigned int v617 = *(_DWORD *)(v197 + 1896);
        *(_DWORD *)&v1351[8] = v617 >> 8;
        if (v617 >> 8 > 0x40) {
          operator new[]();
        }
        *(void *)v1351 = 0;
        v198 = (unsigned __int8 *)llvm::ConstantInt::get(v616, (llvm::LLVMContext *)v1351, v93);
        if (*(_DWORD *)&v1351[8] >= 0x41u && *(void *)v1351) {
          MEMORY[0x1D25D9CB0](*(void *)v1351, 0x1000C8000313F17);
        }
        *(void *)(v197 + 1568) = v198;
      }
      if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
        v198 = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v5 + 8) | ((unint64_t)(*((_DWORD *)v5 + 2) == 19) << 32)), (uint64_t)v198);
      }
      if (v198 == (unsigned __int8 *)v4)
      {
        uint64_t v201 = *(void *)(a1 + 24);
        int v202 = v1337;
        if ((*((unsigned char *)v1337 + 23) & 0x10) != 0)
        {
          uint64_t v203 = ***(void ***)v1337;
          uint64_t v204 = *(void *)(v203 + 152);
          uint64_t v205 = *(unsigned int *)(v203 + 168);
          if (v205)
          {
            LODWORD(v206) = (v205 - 1) & ((v1337 >> 4) ^ (v1337 >> 9));
            uint64_t v207 = v204 + 16 * v206;
            uint64_t v208 = *(llvm **)v207;
            if (*(llvm **)v207 != v1337)
            {
              int v209 = 1;
              do
              {
                if (v208 == (llvm *)-4096) {
                  goto LABEL_479;
                }
                int v210 = v206 + v209++;
                uint64_t v206 = v210 & (v205 - 1);
                uint64_t v208 = *(llvm **)(v204 + 16 * v206);
              }
              while (v208 != v1337);
LABEL_381:
              uint64_t v207 = v204 + 16 * v206;
            }
            goto LABEL_480;
          }
          goto LABEL_479;
        }
      }
      else
      {
        if (Splat != (unsigned __int8 *)v1335)
        {
          uint8x8_t v199 = v1337;
          if (v1337 == v4)
          {
            uint64_t v233 = a1;
            uint64_t v234 = (uint64_t)a2;
            unsigned int v235 = 1;
            uint64_t v236 = (uint64_t)Splat;
          }
          else
          {
            if (v1337 != v1335)
            {
              *(void *)v1351 = v1337;
              int v200 = *((unsigned __int8 *)v4 + 16);
              if (v200 == 5)
              {
                if (*((_WORD *)v4 + 9) != 30) {
                  goto LABEL_1645;
                }
                uint64_t v279 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
                v280 = (llvm **)((char *)v4 - 32 * v279);
                if (v1337 == *v280)
                {
                  if (sub_1CBF68974((uint64_t)&v1351[8], v280[4])) {
                    goto LABEL_1644;
                  }
                  uint8x8_t v199 = *(llvm **)v1351;
                  uint64_t v281 = -(uint64_t)(*((_DWORD *)v4 + 5) & 0x7FFFFFF);
                }
                else
                {
                  uint64_t v281 = -v279;
                }
                v862 = (llvm::Constant **)((char *)v4 + 32 * v281);
                if (v199 != v862[4] || !sub_1CBF68974((uint64_t)&v1351[8], *v862))
                {
LABEL_1645:
                  v863 = v1337;
                  *(void *)v1351 = v1337;
                  int v864 = *((unsigned __int8 *)v1335 + 16);
                  if (v864 != 5)
                  {
                    if (v864 != 58) {
                      goto LABEL_1708;
                    }
                    v865 = v1335;
                    if (v1337 != *((llvm **)v1335 - 8))
                    {
LABEL_1650:
                      if (v863 != *((llvm **)v865 - 4)
                        || (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v1335 - 8)) & 1) == 0)
                      {
                        goto LABEL_1708;
                      }
                      goto LABEL_1707;
                    }
                    if ((sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v1335 - 4)) & 1) == 0)
                    {
                      v863 = *(llvm **)v1351;
                      v865 = v1335;
                      goto LABEL_1650;
                    }
LABEL_1707:
                    *(_WORD *)&v1351[32] = 257;
                    unint64_t v269 = v1335;
                    unsigned int v270 = (uint64_t *)Splat;
                    goto LABEL_482;
                  }
                  if (*((_WORD *)v1335 + 9) != 30) {
                    goto LABEL_1708;
                  }
                  uint64_t v866 = *((_DWORD *)v1335 + 5) & 0x7FFFFFF;
                  v867 = (llvm **)((char *)v1335 - 32 * v866);
                  if (v1337 == *v867)
                  {
                    if (sub_1CBF68974((uint64_t)&v1351[8], v867[4])) {
                      goto LABEL_1707;
                    }
                    v863 = *(llvm **)v1351;
                    uint64_t v868 = -(uint64_t)(*((_DWORD *)v1335 + 5) & 0x7FFFFFF);
                  }
                  else
                  {
                    uint64_t v868 = -v866;
                  }
                  v886 = (llvm::Constant **)((char *)v1335 + 32 * v868);
                  if (v863 != v886[4] || !sub_1CBF68974((uint64_t)&v1351[8], *v886))
                  {
LABEL_1708:
                    v1376.__r_.__value_.__r.__words[0] = 0;
                    v1372 = 0;
                    *(void *)v1351 = &v1376;
                    *(void *)&v1351[16] = &v1372;
                    int v887 = *((_DWORD *)*a2 + 2);
                    if ((v887 & 0xFE) == 0x12) {
                      int v887 = *(_DWORD *)(**((void **)*a2 + 2) + 8);
                    }
                    if (v887 == 269)
                    {
                      int v888 = *((unsigned __int8 *)a2 + 16);
                      if (v888 == 85)
                      {
                        uint64_t v891 = (uint64_t)*v1330;
                        if (!*v1330) {
                          goto LABEL_1882;
                        }
                        unsigned int v892 = *(unsigned __int8 *)(v891 + 16);
                        if (v892 > 0x14) {
                          goto LABEL_1882;
                        }
                        v893 = *v1333;
                        uint64_t v894 = (uint64_t)*v1331;
                        if (v892 == 16)
                        {
                          uint64_t v895 = *(unsigned int *)(v891 + 32);
                          if (v895 >= 0x41)
                          {
                            int v1274 = 0;
                            int64_t v1275 = (unint64_t)(v895 + 63) >> 6;
                            do
                            {
                              BOOL v378 = v1275-- < 1;
                              if (v378) {
                                break;
                              }
                              unint64_t v1276 = *(void *)(*(void *)(v891 + 24) + 8 * v1275);
                              v1274 += __clz(v1276);
                            }
                            while (!v1276);
                            int v1277 = v895 | 0xFFFFFFC0;
                            if ((v895 & 0x3F) == 0) {
                              int v1277 = 0;
                            }
                            if (v1274 + v1277 != v895) {
                              goto LABEL_1882;
                            }
                          }
                          else if (*(void *)(v891 + 24))
                          {
                            goto LABEL_1882;
                          }
                        }
                        else if (v892 == 17)
                        {
                          if ((sub_1CB844168(v891, 0.0) & 1) == 0) {
                            goto LABEL_1882;
                          }
                        }
                        else if (v892 - 18 >= 3 && v892 != 13)
                        {
                          goto LABEL_1882;
                        }
                        if (!sub_1CBF686A0((void **)v1351, 30, (uint64_t)v893)
                          || !sub_1CBF686A0((void **)&v1351[16], 30, v894))
                        {
                          goto LABEL_1882;
                        }
                      }
                      else
                      {
                        if (v888 != 56) {
                          goto LABEL_1882;
                        }
                        int v889 = *((_DWORD *)a2 + 5);
                        v890 = (v889 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : (uint64_t *)&a2[-4 * (v889 & 0x7FFFFFF)];
                        uint64_t v896 = v890[4];
                        if (!sub_1CBF686A0((void **)v1351, 30, *v890)
                          || (sub_1CBF686A0((void **)&v1351[16], 30, v896) & 1) == 0)
                        {
                          goto LABEL_1882;
                        }
                      }
                      uint64_t v897 = *((void *)v1337 + 1);
                      if (v897 && !*(void *)(v897 + 8) || (uint64_t v898 = *((void *)v4 + 1)) != 0 && !*(void *)(v898 + 8))
                      {
                        v899 = (llvm::Value *)v1376.__r_.__value_.__r.__words[0];
                        if (*(unsigned char *)(v1376.__r_.__value_.__r.__words[0] + 16) != 5)
                        {
                          v900 = v1372;
                          if (*((unsigned char *)v1372 + 16) != 5)
                          {
                            v901 = *(llvm::IRBuilderBase **)(a1 + 24);
                            *(_WORD *)&v1351[32] = 257;
                            v902 = (llvm::Value *)Splat;
LABEL_1904:
                            Select = (llvm::Constant **)llvm::IRBuilderBase::CreateSelect(v901, v899, v902, v900, (const llvm::Twine *)v1351, 0);
                            LOWORD(v1368) = 257;
                            return llvm::BinaryOperator::CreateNot(Select, (llvm::Value *)&data, 0, v1016);
                          }
                        }
                      }
                    }
LABEL_1882:
                    *(void *)v1351 = &v1376;
                    *(void *)&v1351[16] = &v1372;
                    int v1004 = *((_DWORD *)*a2 + 2);
                    if ((v1004 & 0xFE) == 0x12) {
                      int v1004 = *(_DWORD *)(**((void **)*a2 + 2) + 8);
                    }
                    if (v1004 != 269) {
                      goto LABEL_1905;
                    }
                    int v1005 = *((unsigned __int8 *)a2 + 16);
                    if (v1005 == 85)
                    {
                      v1008 = (unsigned __int8 *)*v1331;
                      if (!*v1331) {
                        goto LABEL_1905;
                      }
                      if (v1008[16] > 0x14u) {
                        goto LABEL_1905;
                      }
                      v1009 = *v1333;
                      uint64_t v1010 = (uint64_t)*v1330;
                      if (!llvm::Constant::isOneValue((llvm::Constant *)v1008)) {
                        goto LABEL_1905;
                      }
                      uint64_t v1011 = (uint64_t)v1009;
                    }
                    else
                    {
                      if (v1005 != 57) {
                        goto LABEL_1905;
                      }
                      int v1006 = *((_DWORD *)a2 + 5);
                      if ((v1006 & 0x40000000) != 0) {
                        v1007 = (uint64_t *)*(a2 - 1);
                      }
                      else {
                        v1007 = (uint64_t *)&a2[-4 * (v1006 & 0x7FFFFFF)];
                      }
                      uint64_t v1011 = *v1007;
                      uint64_t v1010 = v1007[4];
                    }
                    if (sub_1CBF686A0((void **)v1351, 30, v1011)
                      && (sub_1CBF686A0((void **)&v1351[16], 30, v1010) & 1) != 0)
                    {
                      v1012 = v1337;
                      uint64_t v1013 = *((void *)v1337 + 1);
                      if ((v1013 && !*(void *)(v1013 + 8)
                         || (uint64_t v1014 = *((void *)v1335 + 1)) != 0 && !*(void *)(v1014 + 8))
                        && *(unsigned char *)(v1376.__r_.__value_.__r.__words[0] + 16) != 5)
                      {
                        v902 = v1372;
                        BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                        if (*((unsigned char *)v1372 + 16) != 5)
                        {
                          v901 = *(llvm::IRBuilderBase **)(a1 + 24);
                          *(_WORD *)&v1351[32] = 257;
                          v899 = (llvm::Value *)v1376.__r_.__value_.__r.__words[0];
                          v900 = (llvm::Value *)v198;
                          goto LABEL_1904;
                        }
LABEL_1907:
                        *(void *)v1351 = &v1376;
                        *(void *)&v1351[16] = &v1372;
                        if (sub_1CCAAA6CC((void **)v1351, (uint64_t)v1012)
                          && sub_1CBF5250C((uint64_t)&data, v4)
                          && v1372 == v1335)
                        {
                          goto LABEL_1918;
                        }
                        *(void *)v1351 = &v1376;
                        *(void *)&v1351[8] = &v1372;
                        if (sub_1CCAAA780((void **)v1351, (uint64_t)v1337))
                        {
                          if (v1372 == v4)
                          {
                            if (v1335)
                            {
                              unsigned int v1017 = *((unsigned __int8 *)v1335 + 16);
                              if (v1017 <= 0x14)
                              {
                                if (v1017 == 16)
                                {
                                  v1018 = v1335;
                                  uint64_t v1019 = *((unsigned int *)v1335 + 8);
                                  if (v1019 >= 0x41)
                                  {
                                    int v1237 = 0;
                                    int64_t v1238 = (unint64_t)(v1019 + 63) >> 6;
                                    do
                                    {
                                      BOOL v378 = v1238-- < 1;
                                      if (v378) {
                                        break;
                                      }
                                      unint64_t v1239 = *(void *)(*((void *)v1335 + 3) + 8 * v1238);
                                      v1237 += __clz(v1239);
                                    }
                                    while (!v1239);
                                    int v1240 = v1019 | 0xFFFFFFC0;
                                    if ((v1019 & 0x3F) == 0) {
                                      int v1240 = 0;
                                    }
                                    v1018 = v1335;
                                    BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                    if (v1237 + v1240 == v1019) {
                                      goto LABEL_1918;
                                    }
                                  }
                                  else if (!*((void *)v1335 + 3))
                                  {
LABEL_1918:
                                    uint64_t v236 = v1376.__r_.__value_.__r.__words[0];
                                    uint64_t v233 = a1;
                                    uint64_t v234 = (uint64_t)a2;
                                    unsigned int v235 = 0;
                                    return (llvm::Value *)sub_1CC9D28DC(v233, v234, v235, v236);
                                  }
                                }
                                else if (v1017 == 17)
                                {
                                  v1018 = v1335;
                                  if (sub_1CB844168((uint64_t)v1335, 0.0)) {
                                    goto LABEL_1918;
                                  }
                                }
                                else
                                {
                                  v1018 = v1335;
                                  if (v1017 - 18 < 3 || v1017 == 13) {
                                    goto LABEL_1918;
                                  }
                                }
                                if (sub_1CC03F414((uint64_t)&data, v1018)) {
                                  goto LABEL_1918;
                                }
                              }
                            }
                          }
                        }
                        v1350.__r_.__value_.__r.__words[0] = 0;
                        *(void *)v1351 = v4;
                        *(void *)&v1351[16] = &v1350;
                        if (sub_1CCA17C0C((uint64_t *)v1351, 29, (uint64_t)v1337))
                        {
                          v1022 = v1337;
                          uint64_t v1023 = *((void *)v1337 + 1);
                          if (v1023 && !*(void *)(v1023 + 8))
                          {
                            v1024 = *(uint64_t **)(a1 + 24);
                            *(_WORD *)&v1351[32] = 257;
                            v1025 = sub_1CD68A854(v1024, v1335, (uint64_t)v1351);
                            uint64_t v1026 = *(void *)(a1 + 24);
                            *(_WORD *)&v1351[32] = 257;
                            v99 = sub_1CB844AF4(v1026, v1350.__r_.__value_.__l.__data_, (uint64_t)v1025, (uint64_t)v1351);
                            LOWORD(v1368) = 257;
                            uint64_t v97 = &data;
                            char v98 = 28;
                            v96 = v4;
                            return llvm::BinaryOperator::Create(v98, v96, (uint64_t)v99, (const char **)v97, 0);
                          }
                        }
                        else
                        {
                          v1022 = v1337;
                        }
                        *(void *)v1351 = &v1350;
                        *(void *)&v1351[16] = v1335;
                        int v1027 = *((unsigned __int8 *)v1022 + 16);
                        if (v1027 == 5)
                        {
                          if (*((_WORD *)v1022 + 9) != 28) {
                            goto LABEL_1940;
                          }
                          int v1032 = sub_1CBF686A0((void **)v1351, 30, *((void *)v1022 - 4 * (*((_DWORD *)v1022 + 5) & 0x7FFFFFF)));
                          uint64_t v1033 = ((void *)v1022 - 4 * (*((_DWORD *)v1022 + 5) & 0x7FFFFFF))[4];
                          if (v1032) {
                            BOOL v1034 = *(void *)&v1351[16] == v1033;
                          }
                          else {
                            BOOL v1034 = 0;
                          }
                          if (v1034) {
                            goto LABEL_1938;
                          }
                          if (!sub_1CBF686A0((void **)v1351, 30, v1033)) {
                            goto LABEL_1940;
                          }
                          v1028 = (void *)((char *)v1022 - 32 * (*((_DWORD *)v1022 + 5) & 0x7FFFFFF));
                        }
                        else
                        {
                          if (v1027 != 56) {
                            goto LABEL_1940;
                          }
                          uint64_t v1029 = *((void *)v1022 - 8);
                          v1028 = (void *)((char *)v1022 - 64);
                          int v1030 = sub_1CBF686A0((void **)v1351, 30, v1029);
                          uint64_t v1031 = v1028[4];
                          if (v1030 && *(void *)&v1351[16] == v1031)
                          {
LABEL_1938:
                            uint64_t v1035 = *((void *)v1337 + 1);
                            if (v1035 && !*(void *)(v1035 + 8))
                            {
                              v1077 = *(uint64_t **)(a1 + 24);
                              *(_WORD *)&v1351[32] = 257;
                              v1078 = sub_1CD68A854(v1077, v4, (uint64_t)v1351);
                              uint64_t v1079 = *(void *)(a1 + 24);
                              *(_WORD *)&v1351[32] = 257;
                              v99 = sub_1CB844AF4(v1079, v1350.__r_.__value_.__l.__data_, (uint64_t)v1078, (uint64_t)v1351);
                              LOWORD(v1368) = 257;
                              uint64_t v97 = &data;
                              char v98 = 28;
                              v96 = v1335;
                              return llvm::BinaryOperator::Create(v98, v96, (uint64_t)v99, (const char **)v97, 0);
                            }
LABEL_1940:
                            if ((*((_DWORD *)v5 + 2) & 0xFE) != 0x12)
                            {
                              v1042 = sub_1CC035650(v4, (unsigned __int8 *)v1337, Splat, v52, 1, 3, v1021);
                              if (v1042)
                              {
                                uint64_t v236 = (uint64_t)v1042;
                                goto LABEL_1957;
                              }
                              v1044 = sub_1CC035650(v1335, (unsigned __int8 *)v1337, v198, v52, 1, 3, v1043);
                              if (v1044)
                              {
                                uint64_t v236 = (uint64_t)v1044;
LABEL_959:
                                uint64_t v233 = a1;
                                uint64_t v234 = (uint64_t)a2;
                                unsigned int v235 = 2;
                                return (llvm::Value *)sub_1CC9D28DC(v233, v234, v235, v236);
                              }
                            }
                            if (v1335)
                            {
                              unsigned int v1036 = *((unsigned __int8 *)v1335 + 16);
                              if (v1036 <= 0x14)
                              {
                                if (v1036 == 16)
                                {
                                  uint64_t v1037 = *((unsigned int *)v1335 + 8);
                                  if (v1037 >= 0x41)
                                  {
                                    int v1241 = 0;
                                    int64_t v1242 = (unint64_t)(v1037 + 63) >> 6;
                                    do
                                    {
                                      BOOL v378 = v1242-- < 1;
                                      if (v378) {
                                        break;
                                      }
                                      unint64_t v1243 = *(void *)(*((void *)v1335 + 3) + 8 * v1242);
                                      v1241 += __clz(v1243);
                                    }
                                    while (!v1243);
                                    int v1244 = v1037 | 0xFFFFFFC0;
                                    if ((v1037 & 0x3F) == 0) {
                                      int v1244 = 0;
                                    }
                                    BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                    if (v1241 + v1244 == v1037) {
                                      goto LABEL_1948;
                                    }
                                  }
                                  else if (!*((void *)v1335 + 3))
                                  {
                                    goto LABEL_1948;
                                  }
                                }
                                else if (v1036 == 17)
                                {
                                  BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                  if (sub_1CB844168((uint64_t)v1335, 0.0)) {
                                    goto LABEL_1948;
                                  }
                                }
                                else
                                {
                                  if (v1036 - 18 < 3) {
                                    goto LABEL_1948;
                                  }
                                  BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                  if (v1036 == 13) {
                                    goto LABEL_1948;
                                  }
                                }
                                if (sub_1CC03F414((uint64_t)v1351, v1335)) {
                                  goto LABEL_1948;
                                }
                              }
                            }
                            if ((sub_1CBF5250C((uint64_t)v1351, v4) & 1) == 0) {
                              goto LABEL_1979;
                            }
LABEL_1948:
                            int8x8_t data = 0;
                            v1038 = v1335;
                            if (!v1335 || (unsigned int v1039 = *((unsigned __int8 *)v1335 + 16), v1039 >= 0x15))
                            {
                              uint64_t v1041 = 0;
                              goto LABEL_1963;
                            }
                            if (v1039 == 16)
                            {
                              uint64_t v1040 = *((unsigned int *)v1335 + 8);
                              if (v1040 < 0x41)
                              {
                                if (*((void *)v1335 + 3)) {
                                  goto LABEL_1953;
                                }
LABEL_1954:
                                uint64_t v1041 = 1;
                                v1038 = v4;
LABEL_1963:
                                if (llvm::isCheckForZeroAndMulWithOverflow(v1337, v1038, (llvm::Value *)v1041, &data, v1020))
                                {
                                  v1045 = operator new(0x60uLL);
                                  v1046 = (llvm::Value *)(v1045 + 8);
                                  v1045[13] = v1045[13] & 0x38000000 | 1;
                                  *(void *)v1045 = 0;
                                  *((void *)v1045 + 1) = 0;
                                  *((void *)v1045 + 2) = 0;
                                  *((void *)v1045 + 3) = v1045 + 8;
                                  v1047 = **(llvm::Value ***)&data;
                                  if ((*(unsigned char *)(**(void **)&data + 23) & 0x10) != 0)
                                  {
                                    uint64_t v1048 = ***(void ***)v1047;
                                    uint64_t v1049 = *(void *)(v1048 + 152);
                                    uint64_t v1050 = *(unsigned int *)(v1048 + 168);
                                    if (v1050)
                                    {
                                      LODWORD(v1051) = (v1050 - 1) & ((v1047 >> 4) ^ (v1047 >> 9));
                                      v1052 = (llvm::Value **)(v1049 + 16 * v1051);
                                      v1053 = *v1052;
                                      if (*v1052 != v1047)
                                      {
                                        int v1054 = 1;
                                        do
                                        {
                                          if (v1053 == (llvm::Value *)-4096) {
                                            goto LABEL_1995;
                                          }
                                          int v1055 = v1051 + v1054++;
                                          uint64_t v1051 = v1055 & (v1050 - 1);
                                          v1053 = *(llvm::Value **)(v1049 + 16 * v1051);
                                        }
                                        while (v1053 != v1047);
                                        v1052 = (llvm::Value **)(v1049 + 16 * v1051);
                                      }
                                    }
                                    else
                                    {
LABEL_1995:
                                      v1052 = (llvm::Value **)(v1049 + 16 * v1050);
                                    }
                                    v1058 = v1052[1];
                                    uint64_t v1061 = *(void *)v1058;
                                    v1059 = (char *)v1058 + 16;
                                    uint64_t v1060 = v1061;
                                  }
                                  else
                                  {
                                    uint64_t v1060 = 0;
                                    v1059 = &byte_1CFBCE98E;
                                  }
                                  *(_WORD *)&v1351[32] = 773;
                                  *(void *)v1351 = v1059;
                                  *(void *)&v1351[8] = v1060;
                                  *(void *)&v1351[16] = ".fr";
                                  llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v1045 + 8), v1047, (const char **)v1351, 0);
                                  sub_1CCA331D4(a1, v1046, *(void *)(*(void *)&data + 24));
                                  sub_1CC9DFE20((void *)a1, *(uint64_t **)&data, (uint64_t)v1046);
                                  unsigned int v15 = v1038;
                                  goto LABEL_7;
                                }
                                if (*((unsigned char *)v1038 + 16) == 85)
                                {
                                  BitOrPointerCast = (uint64_t **)sub_1CCA9F57C(a1, (uint64_t *)v1337, v1038, v1041);
                                  if (BitOrPointerCast) {
                                    return (llvm::Value *)BitOrPointerCast;
                                  }
                                }
                                if (v1337)
                                {
                                  if (*((unsigned char *)v1337 + 16) == 81 && *((unsigned char *)v1038 + 16) == 81)
                                  {
                                    unsigned int v15 = sub_1CC9FBFF0(a1, (uint64_t)v1337, (uint64_t)v1038, (llvm::AssumptionCache *)a2, v1041, 1);
                                    if (v15) {
                                      goto LABEL_7;
                                    }
                                    unsigned int v15 = sub_1CC9FC370(a1, (uint64_t)v1337, (uint64_t)v1038, v1041);
                                    if (v15) {
                                      goto LABEL_7;
                                    }
                                  }
                                }
                                BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
LABEL_1979:
                                *(void *)v1351 = &v1376;
                                *(void *)&v1351[16] = &v1372;
                                if (!sub_1CCAAA6CC((void **)v1351, (uint64_t)v1337)) {
                                  goto LABEL_2112;
                                }
                                if (!v1335) {
                                  goto LABEL_2112;
                                }
                                unsigned int v1056 = *((unsigned __int8 *)v1335 + 16);
                                if (v1056 > 0x14) {
                                  goto LABEL_2112;
                                }
                                if (v1056 == 16)
                                {
                                  uint64_t v1057 = *((unsigned int *)v1335 + 8);
                                  if (v1057 < 0x41)
                                  {
                                    if (*((void *)v1335 + 3)) {
                                      goto LABEL_1985;
                                    }
LABEL_2106:
                                    BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
LABEL_2107:
                                    if (v4 != v1372)
                                    {
                                      if (v1372)
                                      {
                                        if (*((unsigned char *)v1372 + 16) == 81)
                                        {
                                          unsigned __int16 isImpliedCondition = llvm::isImpliedCondition((uint64_t *)v4, *((_WORD *)v1372 + 9) & 0x3F, *((void *)v1372 - 8), *((void *)v1372 - 4), *(const llvm::DataLayout **)(a1 + 80), 1, 0);
                                          if (!(_BYTE)isImpliedCondition && isImpliedCondition >= 0x100u) {
                                            goto LABEL_1918;
                                          }
                                        }
                                      }
                                    }
LABEL_2112:
                                    *(void *)v1351 = &v1376;
                                    *(void *)&v1351[16] = &v1372;
                                    if (!sub_1CCAAA6CC((void **)v1351, (uint64_t)v4)) {
                                      goto LABEL_2134;
                                    }
                                    if (!v1335) {
                                      goto LABEL_2134;
                                    }
                                    unsigned int v1115 = *((unsigned __int8 *)v1335 + 16);
                                    if (v1115 > 0x14) {
                                      goto LABEL_2134;
                                    }
                                    if (v1115 == 16)
                                    {
                                      uint64_t v1116 = *((unsigned int *)v1335 + 8);
                                      if (v1116 < 0x41)
                                      {
                                        if (*((void *)v1335 + 3)) {
                                          goto LABEL_2118;
                                        }
LABEL_2127:
                                        BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
LABEL_2128:
                                        if (v1337 != v1372)
                                        {
                                          if (v1372)
                                          {
                                            if (*((unsigned char *)v1372 + 16) == 81)
                                            {
                                              unsigned __int16 v1117 = llvm::isImpliedCondition((uint64_t *)v1337, *((_WORD *)v1372 + 9) & 0x3F, *((void *)v1372 - 8), *((void *)v1372 - 4), *(const llvm::DataLayout **)(a1 + 80), 1, 0);
                                              if (!(_BYTE)v1117 && v1117 >= 0x100u)
                                              {
                                                uint64_t v236 = v1376.__r_.__value_.__r.__words[0];
                                                goto LABEL_1957;
                                              }
                                            }
                                          }
                                        }
LABEL_2134:
                                        if (sub_1CBF5250C((uint64_t)&data, v4))
                                        {
                                          *(void *)v1351 = &v1376;
                                          *(void *)&v1351[8] = &v1372;
                                          if (sub_1CCAAA780((void **)v1351, (uint64_t)v1335))
                                          {
                                            if (v1337 != v1372)
                                            {
                                              if (v1372)
                                              {
                                                if (*((unsigned char *)v1372 + 16) == 81)
                                                {
                                                  unsigned __int16 v1118 = llvm::isImpliedCondition((uint64_t *)v1337, *((_WORD *)v1372 + 9) & 0x3F, *((void *)v1372 - 8), *((void *)v1372 - 4), *(const llvm::DataLayout **)(a1 + 80), 0, 0);
                                                  if ((_BYTE)v1118)
                                                  {
                                                    if (v1118 >= 0x100u)
                                                    {
                                                      uint64_t v236 = v1376.__r_.__value_.__r.__words[0];
                                                      goto LABEL_959;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        *(void *)v1351 = &v1376;
                                        *(void *)&v1351[8] = &v1372;
                                        if (sub_1CCAAA780((void **)v1351, (uint64_t)v1337))
                                        {
                                          if (sub_1CBF5250C((uint64_t)&data, v4))
                                          {
                                            if (v1335 != v1372)
                                            {
                                              if (v1372)
                                              {
                                                if (*((unsigned char *)v1372 + 16) == 81)
                                                {
                                                  unsigned __int16 v1119 = llvm::isImpliedCondition((uint64_t *)v1335, *((_WORD *)v1372 + 9) & 0x3F, *((void *)v1372 - 8), *((void *)v1372 - 4), *(const llvm::DataLayout **)(a1 + 80), 0, 0);
                                                  if ((_BYTE)v1119)
                                                  {
                                                    if (v1119 >= 0x100u) {
                                                      goto LABEL_1918;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        v1345 = 0;
                                        v1344[0] = 0;
                                        *(void *)v1351 = &v1345;
                                        *(void *)&v1351[8] = &v1376;
                                        if (!sub_1CCAAA780((void **)v1351, (uint64_t)v1337)) {
                                          goto LABEL_2235;
                                        }
                                        if (!sub_1CBF5250C((uint64_t)&v1348, v4)) {
                                          goto LABEL_2235;
                                        }
                                        int8x8_t data = (int8x8_t)v1344;
                                        *(void *)&long long v1366 = &v1372;
                                        if (!sub_1CCAAA780(&data, (uint64_t)v1335)) {
                                          goto LABEL_2235;
                                        }
                                        v1120 = v1344[0];
                                        v1121 = v1345;
                                        *(void *)v1351 = v1345;
                                        int v1122 = *((unsigned __int8 *)v1344[0] + 16);
                                        if (v1122 == 5)
                                        {
                                          if (*((_WORD *)v1344[0] + 9) != 30) {
                                            goto LABEL_2175;
                                          }
                                          uint64_t v1123 = *((_DWORD *)v1344[0] + 5) & 0x7FFFFFF;
                                          v1124 = (llvm::Value **)((char *)v1344[0] - 32 * v1123);
                                          if (v1345 == *v1124)
                                          {
                                            if (sub_1CBF68974((uint64_t)&v1351[8], v1124[4])) {
                                              goto LABEL_2174;
                                            }
                                            v1121 = *(llvm::Value **)v1351;
                                            uint64_t v1125 = -(uint64_t)(*((_DWORD *)v1120 + 5) & 0x7FFFFFF);
                                          }
                                          else
                                          {
                                            uint64_t v1125 = -v1123;
                                          }
                                          v1129 = (llvm::Constant **)((char *)v1120 + 32 * v1125);
                                          if (v1121 != v1129[4]
                                            || !sub_1CBF68974((uint64_t)&v1351[8], *v1129))
                                          {
LABEL_2175:
                                            v1130 = v1345;
                                            v1131 = v1344[0];
                                            *(llvm::APInt **)v1351 = v1344[0];
                                            int v1132 = *((unsigned __int8 *)v1345 + 16);
                                            if (v1132 == 5)
                                            {
                                              if (*((_WORD *)v1345 + 9) == 30)
                                              {
                                                uint64_t v1133 = *((_DWORD *)v1345 + 5) & 0x7FFFFFF;
                                                v1134 = (llvm::APInt **)((char *)v1345 - 32 * v1133);
                                                if (v1344[0] == *v1134)
                                                {
                                                  if (sub_1CBF68974((uint64_t)&v1351[8], v1134[4])) {
                                                    goto LABEL_2237;
                                                  }
                                                  v1131 = *(llvm::APInt **)v1351;
                                                  uint64_t v1135 = -(uint64_t)(*((_DWORD *)v1130 + 5) & 0x7FFFFFF);
                                                }
                                                else
                                                {
                                                  uint64_t v1135 = -v1133;
                                                }
                                                v1158 = (llvm::Constant **)((char *)v1130 + 32 * v1135);
                                                if (v1131 == v1158[4])
                                                {
                                                  BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                                  if (sub_1CBF68974((uint64_t)&v1351[8], *v1158))
                                                  {
LABEL_2237:
                                                    unint64_t v269 = v1344[0];
                                                    unsigned int v270 = (uint64_t *)v1372;
                                                    unsigned int v271 = (void *)v1376.__r_.__value_.__r.__words[0];
                                                    goto LABEL_2238;
                                                  }
LABEL_2235:
                                                  int v50 = *((_DWORD *)v5 + 2);
                                                  goto LABEL_67;
                                                }
                                              }
                                            }
                                            else if (v1132 == 58)
                                            {
                                              if (v1344[0] == *((llvm::APInt **)v1345 - 8))
                                              {
                                                if (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v1345 - 4))) {
                                                  goto LABEL_2237;
                                                }
                                                v1131 = *(llvm::APInt **)v1351;
                                              }
                                              if (v1131 == *((llvm::APInt **)v1130 - 4))
                                              {
                                                BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                                if (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v1130 - 8))) {
                                                  goto LABEL_2237;
                                                }
                                                goto LABEL_2235;
                                              }
                                            }
                                            BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                            goto LABEL_2235;
                                          }
                                        }
                                        else
                                        {
                                          if (v1122 != 58) {
                                            goto LABEL_2175;
                                          }
                                          if (v1345 == *((llvm::Value **)v1344[0] - 8))
                                          {
                                            if (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v1344[0] - 4))) {
                                              goto LABEL_2174;
                                            }
                                            v1121 = *(llvm::Value **)v1351;
                                          }
                                          if (v1121 != *((llvm::Value **)v1120 - 4)
                                            || (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v1120 - 8)) & 1) == 0)
                                          {
                                            goto LABEL_2175;
                                          }
                                        }
LABEL_2174:
                                        unint64_t v269 = v1345;
                                        unsigned int v270 = (uint64_t *)v1376.__r_.__value_.__r.__words[0];
                                        unsigned int v271 = v1372;
LABEL_2238:
                                        *(_WORD *)&v1351[32] = 257;
                                        return sub_1CC199EFC((uint64_t)v269, v270, (uint64_t)v271, (const char **)v1351, 0, 0);
                                      }
                                      int v1286 = 0;
                                      int64_t v1287 = (unint64_t)(v1116 + 63) >> 6;
                                      do
                                      {
                                        BOOL v378 = v1287-- < 1;
                                        if (v378) {
                                          break;
                                        }
                                        unint64_t v1288 = *(void *)(*((void *)v1335 + 3) + 8 * v1287);
                                        v1286 += __clz(v1288);
                                      }
                                      while (!v1288);
                                      int v1289 = v1116 | 0xFFFFFFC0;
                                      if ((v1116 & 0x3F) == 0) {
                                        int v1289 = 0;
                                      }
                                      if (v1286 + v1289 == v1116) {
                                        goto LABEL_2127;
                                      }
                                    }
                                    else if (v1115 == 17)
                                    {
                                      if (sub_1CB844168((uint64_t)v1335, 0.0)) {
                                        goto LABEL_2127;
                                      }
                                    }
                                    else if (v1115 - 18 < 3 || v1115 == 13)
                                    {
                                      goto LABEL_2127;
                                    }
LABEL_2118:
                                    BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                    if ((sub_1CC03F414((uint64_t)&data, v1335) & 1) == 0) {
                                      goto LABEL_2134;
                                    }
                                    goto LABEL_2128;
                                  }
                                  int v1278 = 0;
                                  int64_t v1279 = (unint64_t)(v1057 + 63) >> 6;
                                  do
                                  {
                                    BOOL v378 = v1279-- < 1;
                                    if (v378) {
                                      break;
                                    }
                                    unint64_t v1280 = *(void *)(*((void *)v1335 + 3) + 8 * v1279);
                                    v1278 += __clz(v1280);
                                  }
                                  while (!v1280);
                                  int v1281 = v1057 | 0xFFFFFFC0;
                                  if ((v1057 & 0x3F) == 0) {
                                    int v1281 = 0;
                                  }
                                  if (v1278 + v1281 == v1057) {
                                    goto LABEL_2106;
                                  }
                                }
                                else if (v1056 == 17)
                                {
                                  if (sub_1CB844168((uint64_t)v1335, 0.0)) {
                                    goto LABEL_2106;
                                  }
                                }
                                else if (v1056 - 18 < 3 || v1056 == 13)
                                {
                                  goto LABEL_2106;
                                }
LABEL_1985:
                                BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                                if ((sub_1CC03F414((uint64_t)&data, v1335) & 1) == 0) {
                                  goto LABEL_2112;
                                }
                                goto LABEL_2107;
                              }
                              int v1248 = 0;
                              int64_t v1249 = (unint64_t)(v1040 + 63) >> 6;
                              do
                              {
                                BOOL v378 = v1249-- < 1;
                                if (v378) {
                                  break;
                                }
                                unint64_t v1250 = *(void *)(*((void *)v1335 + 3) + 8 * v1249);
                                v1248 += __clz(v1250);
                              }
                              while (!v1250);
                              int v1251 = v1040 | 0xFFFFFFC0;
                              if ((v1040 & 0x3F) == 0) {
                                int v1251 = 0;
                              }
                              if (v1248 + v1251 == v1040) {
                                goto LABEL_1954;
                              }
                            }
                            else if (v1039 == 17)
                            {
                              if (sub_1CB844168((uint64_t)v1335, 0.0)) {
                                goto LABEL_1954;
                              }
                            }
                            else if (v1039 - 18 < 3 || v1039 == 13)
                            {
                              goto LABEL_1954;
                            }
LABEL_1953:
                            if (!sub_1CC03F414((uint64_t)v1351, v1335))
                            {
                              uint64_t v1041 = 0;
                              v1038 = v1335;
                              goto LABEL_1963;
                            }
                            goto LABEL_1954;
                          }
                          if ((sub_1CBF686A0((void **)v1351, 30, v1031) & 1) == 0) {
                            goto LABEL_1940;
                          }
                        }
                        if (*(void *)&v1351[16] != *v1028) {
                          goto LABEL_1940;
                        }
                        goto LABEL_1938;
                      }
LABEL_1906:
                      BOOL v52 = (llvm::DSOLocalEquivalent ***)(a1 + 88);
                      goto LABEL_1907;
                    }
LABEL_1905:
                    v1012 = v1337;
                    goto LABEL_1906;
                  }
                  goto LABEL_1707;
                }
              }
              else
              {
                if (v200 != 58) {
                  goto LABEL_1645;
                }
                if (v1337 == *((llvm **)v4 - 8))
                {
                  if (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v4 - 4))) {
                    goto LABEL_1644;
                  }
                  uint8x8_t v199 = *(llvm **)v1351;
                }
                if (v199 != *((llvm **)v4 - 4)
                  || (sub_1CBF687D0((uint64_t)&v1351[8], *((llvm::Constant **)v4 - 8)) & 1) == 0)
                {
                  goto LABEL_1645;
                }
              }
LABEL_1644:
              *(_WORD *)&v1351[32] = 257;
              unint64_t v269 = v4;
              unsigned int v270 = (uint64_t *)v1335;
              unsigned int v271 = v198;
              return sub_1CC199EFC((uint64_t)v269, v270, (uint64_t)v271, (const char **)v1351, 0, 0);
            }
            uint64_t v233 = a1;
            uint64_t v234 = (uint64_t)a2;
            unsigned int v235 = 2;
            uint64_t v236 = (uint64_t)v198;
          }
          return (llvm::Value *)sub_1CC9D28DC(v233, v234, v235, v236);
        }
        uint64_t v201 = *(void *)(a1 + 24);
        int v202 = v1337;
        if ((*((unsigned char *)v1337 + 23) & 0x10) != 0)
        {
          uint64_t v211 = ***(void ***)v1337;
          uint64_t v204 = *(void *)(v211 + 152);
          uint64_t v205 = *(unsigned int *)(v211 + 168);
          if (v205)
          {
            LODWORD(v206) = (v205 - 1) & ((v1337 >> 4) ^ (v1337 >> 9));
            uint64_t v207 = v204 + 16 * v206;
            uint64_t v212 = *(llvm **)v207;
            if (*(llvm **)v207 == v1337)
            {
LABEL_480:
              int v265 = *(void **)(v207 + 8);
              uint64_t v268 = *v265;
              int v266 = (char *)(v265 + 2);
              uint64_t v267 = v268;
LABEL_481:
              *(_WORD *)&v1351[32] = 1283;
              *(void *)v1351 = "not.";
              *(void *)&v1351[16] = v266;
              *(void *)&v1351[24] = v267;
              unint64_t v269 = sub_1CC2427E8(v201, (uint64_t)v202, (uint64_t)v1351, v94);
              *(_WORD *)&v1351[32] = 257;
              unsigned int v270 = (uint64_t *)v1335;
LABEL_482:
              unsigned int v271 = v4;
              return sub_1CC199EFC((uint64_t)v269, v270, (uint64_t)v271, (const char **)v1351, 0, 0);
            }
            int v213 = 1;
            while (v212 != (llvm *)-4096)
            {
              int v214 = v206 + v213++;
              uint64_t v206 = v214 & (v205 - 1);
              uint64_t v212 = *(llvm **)(v204 + 16 * v206);
              if (v212 == v1337) {
                goto LABEL_381;
              }
            }
          }
LABEL_479:
          uint64_t v207 = v204 + 16 * v205;
          goto LABEL_480;
        }
      }
      uint64_t v267 = 0;
      int v266 = &byte_1CFBCE98E;
      goto LABEL_481;
    }
    if (v182 == 16)
    {
      v183 = v1335;
      uint64_t v184 = *((unsigned int *)v1335 + 8);
      if (v184 < 0x41)
      {
        if (*((void *)v1335 + 3)) {
          goto LABEL_322;
        }
LABEL_323:
        int v185 = sub_1CC16A138((uint64_t)v4, (uint64_t)v1337, 0);
        v96 = v1337;
        if (v185)
        {
          *(_WORD *)&v1351[32] = 257;
          uint64_t v97 = (int8x8_t *)v1351;
          char v98 = 28;
          v99 = v4;
          return llvm::BinaryOperator::Create(v98, v96, (uint64_t)v99, (const char **)v97, 0);
        }
        if (v1337)
        {
          if (*((unsigned char *)v1337 + 16) == 82 && *((unsigned char *)v4 + 16) == 82)
          {
            uint64_t UnaryIntrinsic = (uint64_t)sub_1CCA00074(a1, (uint64_t)v1337, (uint64_t)v4, 1, 1);
            if (UnaryIntrinsic) {
              goto LABEL_6;
            }
          }
        }
        goto LABEL_350;
      }
      int v1154 = 0;
      int64_t v1155 = (unint64_t)(v184 + 63) >> 6;
      do
      {
        BOOL v378 = v1155-- < 1;
        if (v378) {
          break;
        }
        unint64_t v1156 = *(void *)(*((void *)v1335 + 3) + 8 * v1155);
        v1154 += __clz(v1156);
      }
      while (!v1156);
      int v1157 = v184 | 0xFFFFFFC0;
      if ((v184 & 0x3F) == 0) {
        int v1157 = 0;
      }
      v183 = v1335;
      if (v1154 + v1157 == v184) {
        goto LABEL_323;
      }
    }
    else if (v182 == 17)
    {
      v183 = v1335;
      if (sub_1CB844168((uint64_t)v1335, 0.0)) {
        goto LABEL_323;
      }
    }
    else
    {
      v183 = v1335;
      if (v182 - 18 < 3 || v182 == 13) {
        goto LABEL_323;
      }
    }
LABEL_322:
    if ((sub_1CC03F414((uint64_t)v1351, v183) & 1) == 0) {
      goto LABEL_350;
    }
    goto LABEL_323;
  }
LABEL_67:
  int v53 = v50 & 0xFE;
  if (v53 == 18) {
    int v50 = *(_DWORD *)(**((void **)v5 + 2) + 8);
  }
  if (v50 != 13 || v50 == 269 || (v53 == 18) != ((*(_DWORD *)(*(void *)v1337 + 8) & 0xFE) == 18)) {
    goto LABEL_72;
  }
  if (sub_1CBF5250C((uint64_t)&data, v4))
  {
    if (v1335)
    {
      unsigned int v77 = *((unsigned __int8 *)v1335 + 16);
      if (v77 <= 0x14)
      {
        if (v77 == 16)
        {
          v78 = v1335;
          uint64_t v79 = *((unsigned int *)v1335 + 8);
          if (v79 >= 0x41)
          {
            int v1186 = 0;
            int64_t v1187 = (unint64_t)(v79 + 63) >> 6;
            do
            {
              BOOL v378 = v1187-- < 1;
              if (v378) {
                break;
              }
              unint64_t v1188 = *(void *)(*((void *)v1335 + 3) + 8 * v1187);
              v1186 += __clz(v1188);
            }
            while (!v1188);
            int v1189 = v79 | 0xFFFFFFC0;
            if ((v79 & 0x3F) == 0) {
              int v1189 = 0;
            }
            v78 = v1335;
            if (v1186 + v1189 == v79) {
              goto LABEL_110;
            }
          }
          else if (!*((void *)v1335 + 3))
          {
LABEL_110:
            v80 = (char *)operator new(0x60uLL);
            BitOrPointerCast = (uint64_t **)(v80 + 32);
            *((_DWORD *)v80 + 13) = *((_DWORD *)v80 + 13) & 0x38000000 | 1;
            *(void *)v80 = 0;
            *((void *)v80 + 1) = 0;
            *((void *)v80 + 2) = 0;
            *((void *)v80 + 3) = v80 + 32;
            int v81 = v1337;
            *(_WORD *)&v1351[32] = 257;
            int v82 = (llvm::ZExtInst *)(v80 + 32);
            goto LABEL_538;
          }
        }
        else if (v77 == 17)
        {
          v78 = v1335;
          if (sub_1CB844168((uint64_t)v1335, 0.0)) {
            goto LABEL_110;
          }
        }
        else
        {
          v78 = v1335;
          if (v77 - 18 < 3 || v77 == 13) {
            goto LABEL_110;
          }
        }
        if (sub_1CC03F414((uint64_t)v1351, v78)) {
          goto LABEL_110;
        }
      }
    }
  }
  if (sub_1CBF687D0((uint64_t)&data, v4))
  {
    if (v1335)
    {
      unsigned int v87 = *((unsigned __int8 *)v1335 + 16);
      if (v87 <= 0x14)
      {
        if (v87 == 16)
        {
          v88 = v1335;
          uint64_t v89 = *((unsigned int *)v1335 + 8);
          if (v89 >= 0x41)
          {
            int v1194 = 0;
            int64_t v1195 = (unint64_t)(v89 + 63) >> 6;
            do
            {
              BOOL v378 = v1195-- < 1;
              if (v378) {
                break;
              }
              unint64_t v1196 = *(void *)(*((void *)v1335 + 3) + 8 * v1195);
              v1194 += __clz(v1196);
            }
            while (!v1196);
            int v1197 = v89 | 0xFFFFFFC0;
            if ((v89 & 0x3F) == 0) {
              int v1197 = 0;
            }
            v88 = v1335;
            if (v1194 + v1197 == v89) {
              goto LABEL_133;
            }
          }
          else if (!*((void *)v1335 + 3))
          {
LABEL_133:
            uint64_t v90 = (char *)operator new(0x60uLL);
            BitOrPointerCast = (uint64_t **)(v90 + 32);
            *((_DWORD *)v90 + 13) = *((_DWORD *)v90 + 13) & 0x38000000 | 1;
            *(void *)uint64_t v90 = 0;
            *((void *)v90 + 1) = 0;
            *((void *)v90 + 2) = 0;
            *((void *)v90 + 3) = v90 + 32;
            uint64_t v91 = v1337;
            *(_WORD *)&v1351[32] = 257;
            v92 = (llvm::SExtInst *)(v90 + 32);
            goto LABEL_546;
          }
        }
        else if (v87 == 17)
        {
          v88 = v1335;
          if (sub_1CB844168((uint64_t)v1335, 0.0)) {
            goto LABEL_133;
          }
        }
        else
        {
          v88 = v1335;
          if (v87 - 18 < 3 || v87 == 13) {
            goto LABEL_133;
          }
        }
        if (sub_1CC03F414((uint64_t)v1351, v88)) {
          goto LABEL_133;
        }
      }
    }
  }
  if (v4)
  {
    unsigned int v100 = *((unsigned __int8 *)v4 + 16);
    if (v100 <= 0x14)
    {
      if (v100 == 16)
      {
        uint64_t v101 = *((unsigned int *)v4 + 8);
        if (v101 < 0x41)
        {
          if (*((void *)v4 + 3)) {
            goto LABEL_142;
          }
LABEL_143:
          if (sub_1CBF5250C((uint64_t)v1351, v1335))
          {
            uint64_t v102 = *(void *)(a1 + 24);
            if ((*((unsigned char *)v1337 + 23) & 0x10) != 0)
            {
              uint64_t v103 = ***(void ***)v1337;
              uint64_t v104 = *(void *)(v103 + 152);
              uint64_t v105 = *(unsigned int *)(v103 + 168);
              if (v105)
              {
                LODWORD(v106) = (v105 - 1) & ((v1337 >> 4) ^ (v1337 >> 9));
                uint64_t v107 = v104 + 16 * v106;
                v108 = *(llvm **)v107;
                if (*(llvm **)v107 != v1337)
                {
                  int v109 = 1;
                  do
                  {
                    if (v108 == (llvm *)-4096) {
                      goto LABEL_535;
                    }
                    int v110 = v106 + v109++;
                    uint64_t v106 = v110 & (v105 - 1);
                    v108 = *(llvm **)(v104 + 16 * v106);
                  }
                  while (v108 != v1337);
                  uint64_t v107 = v104 + 16 * v106;
                }
              }
              else
              {
LABEL_535:
                uint64_t v107 = v104 + 16 * v105;
              }
              int64_t v286 = *(void **)(v107 + 8);
              uint64_t v289 = *v286;
              unint64_t v287 = (char *)(v286 + 2);
              uint64_t v288 = v289;
            }
            else
            {
              uint64_t v288 = 0;
              unint64_t v287 = &byte_1CFBCE98E;
            }
            *(_WORD *)&v1351[32] = 1283;
            *(void *)v1351 = "not.";
            *(void *)&v1351[16] = v287;
            *(void *)&v1351[24] = v288;
            v290 = sub_1CC2427E8(v102, (uint64_t)v1337, (uint64_t)v1351, v11);
            v291 = (char *)operator new(0x60uLL);
            *((_DWORD *)v291 + 13) = *((_DWORD *)v291 + 13) & 0x38000000 | 1;
            BitOrPointerCast = (uint64_t **)(v291 + 32);
            *(void *)v291 = 0;
            *((void *)v291 + 1) = 0;
            *((void *)v291 + 2) = 0;
            *((void *)v291 + 3) = v291 + 32;
            *(_WORD *)&v1351[32] = 257;
            int v82 = (llvm::ZExtInst *)(v291 + 32);
            int v81 = v290;
LABEL_538:
            llvm::ZExtInst::ZExtInst(v82, v81, v5, (const char **)v1351, 0);
            return (llvm::Value *)BitOrPointerCast;
          }
          goto LABEL_151;
        }
        int v1145 = 0;
        int64_t v1146 = (unint64_t)(v101 + 63) >> 6;
        do
        {
          BOOL v378 = v1146-- < 1;
          if (v378) {
            break;
          }
          unint64_t v1147 = *(void *)(*((void *)v4 + 3) + 8 * v1146);
          v1145 += __clz(v1147);
        }
        while (!v1147);
        int v1148 = v101 | 0xFFFFFFC0;
        if ((v101 & 0x3F) == 0) {
          int v1148 = 0;
        }
        if (v1145 + v1148 == v101) {
          goto LABEL_143;
        }
      }
      else if (v100 == 17)
      {
        if (sub_1CB844168((uint64_t)v4, 0.0)) {
          goto LABEL_143;
        }
      }
      else if (v100 - 18 < 3 || v100 == 13)
      {
        goto LABEL_143;
      }
LABEL_142:
      if ((sub_1CC03F414((uint64_t)v1351, v4) & 1) == 0) {
        goto LABEL_151;
      }
      goto LABEL_143;
    }
  }
LABEL_151:
  if (!v4) {
    goto LABEL_72;
  }
  unsigned int v111 = *((unsigned __int8 *)v4 + 16);
  if (v111 > 0x14) {
    goto LABEL_72;
  }
  if (v111 != 16)
  {
    if (v111 == 17)
    {
      if (sub_1CB844168((uint64_t)v4, 0.0)) {
        goto LABEL_157;
      }
    }
    else if (v111 - 18 < 3 || v111 == 13)
    {
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  uint64_t v112 = *((unsigned int *)v4 + 8);
  if (v112 >= 0x41)
  {
    int v1159 = 0;
    int64_t v1160 = (unint64_t)(v112 + 63) >> 6;
    do
    {
      BOOL v378 = v1160-- < 1;
      if (v378) {
        break;
      }
      unint64_t v1161 = *(void *)(*((void *)v4 + 3) + 8 * v1160);
      v1159 += __clz(v1161);
    }
    while (!v1161);
    int v1162 = v112 | 0xFFFFFFC0;
    if ((v112 & 0x3F) == 0) {
      int v1162 = 0;
    }
    if (v1159 + v1162 == v112) {
      goto LABEL_157;
    }
LABEL_156:
    if ((sub_1CC03F414((uint64_t)v1351, v4) & 1) == 0) {
      goto LABEL_72;
    }
    goto LABEL_157;
  }
  if (*((void *)v4 + 3)) {
    goto LABEL_156;
  }
LABEL_157:
  if (sub_1CBF687D0((uint64_t)v1351, v1335))
  {
    uint64_t v113 = *(void *)(a1 + 24);
    if ((*((unsigned char *)v1337 + 23) & 0x10) != 0)
    {
      uint64_t v114 = ***(void ***)v1337;
      uint64_t v115 = *(void *)(v114 + 152);
      uint64_t v116 = *(unsigned int *)(v114 + 168);
      if (v116)
      {
        LODWORD(v117) = (v116 - 1) & ((v1337 >> 4) ^ (v1337 >> 9));
        uint64_t v118 = v115 + 16 * v117;
        __int16 v119 = *(llvm **)v118;
        if (*(llvm **)v118 != v1337)
        {
          int v120 = 1;
          do
          {
            if (v119 == (llvm *)-4096) {
              goto LABEL_543;
            }
            int v121 = v117 + v120++;
            uint64_t v117 = v121 & (v116 - 1);
            __int16 v119 = *(llvm **)(v115 + 16 * v117);
          }
          while (v119 != v1337);
          uint64_t v118 = v115 + 16 * v117;
        }
      }
      else
      {
LABEL_543:
        uint64_t v118 = v115 + 16 * v116;
      }
      v292 = *(void **)(v118 + 8);
      uint64_t v295 = *v292;
      v293 = (char *)(v292 + 2);
      uint64_t v294 = v295;
    }
    else
    {
      uint64_t v294 = 0;
      v293 = &byte_1CFBCE98E;
    }
    *(_WORD *)&v1351[32] = 1283;
    *(void *)v1351 = "not.";
    *(void *)&v1351[16] = v293;
    *(void *)&v1351[24] = v294;
    v296 = sub_1CC2427E8(v113, (uint64_t)v1337, (uint64_t)v1351, v11);
    v297 = (char *)operator new(0x60uLL);
    *((_DWORD *)v297 + 13) = *((_DWORD *)v297 + 13) & 0x38000000 | 1;
    BitOrPointerCast = (uint64_t **)(v297 + 32);
    *(void *)v297 = 0;
    *((void *)v297 + 1) = 0;
    *((void *)v297 + 2) = 0;
    *((void *)v297 + 3) = v297 + 32;
    *(_WORD *)&v1351[32] = 257;
    v92 = (llvm::SExtInst *)(v297 + 32);
    uint64_t v91 = v296;
LABEL_546:
    llvm::SExtInst::SExtInst(v92, v91, v5, (const char **)v1351, 0);
    return (llvm::Value *)BitOrPointerCast;
  }
LABEL_72:
  v1327 = v52;
  v1328 = v5;
  v54 = v1337;
  if (!v1337 || *((unsigned char *)v1337 + 16) != 82) {
    goto LABEL_206;
  }
  uint64_t v55 = *((void *)v1337 - 8);
  uint64_t v56 = *((void *)v1337 - 4);
  BOOL v57 = (llvm::Value *)v55 == v4 && v56 == (void)v1335;
  if (v57 || ((llvm *)v55 == v1335 ? (BOOL v58 = v56 == (void)v4) : (BOOL v58 = 0), v58))
  {
    uint64_t v59 = *((void *)v1337 + 1);
    if (v59)
    {
      if (!*(void *)(v59 + 8))
      {
        int v60 = *((_WORD *)v1337 + 9) & 0x3F;
        if ((v60 - 8) <= 6)
        {
          uint64_t v61 = (15 - v60);
          uint64_t v62 = *(void *)(a1 + 24);
          int v63 = *(_DWORD *)(v62 + 96);
          uint64_t v64 = *(void *)(v62 + 88);
          char v65 = *(unsigned char *)(v62 + 100);
          char v1334 = *(unsigned char *)(v62 + 101);
          char v1332 = *(unsigned char *)(v62 + 102);
          int v66 = *((unsigned __int8 *)v1337 + 17) >> 1;
          if (v66 == 127) {
            int v66 = -1;
          }
          *(_DWORD *)(v62 + 96) = v66;
          if ((*((unsigned char *)v54 + 23) & 0x10) == 0)
          {
            uint64_t v251 = 0;
            v250 = &byte_1CFBCE98E;
            goto LABEL_460;
          }
          uint64_t v67 = ***(void ***)v54;
          uint64_t v68 = *(void *)(v67 + 152);
          uint64_t v69 = *(unsigned int *)(v67 + 168);
          if (v69)
          {
            LODWORD(v70) = (v69 - 1) & ((v54 >> 4) ^ (v54 >> 9));
            unint64_t v71 = (llvm **)(v68 + 16 * v70);
            unint64_t v72 = *v71;
            if (*v71 == v54)
            {
LABEL_459:
              v249 = v71[1];
              uint64_t v252 = *(void *)v249;
              v250 = (char *)v249 + 16;
              uint64_t v251 = v252;
LABEL_460:
              *(_WORD *)&v1351[32] = 773;
              *(void *)v1351 = v250;
              *(void *)&v1351[8] = v251;
              *(void *)&v1351[16] = ".inv";
              FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper(v62, v61, v55, v56, (uint64_t)v1351, 0, 0);
              v254 = *(llvm::IRBuilderBase **)(a1 + 24);
              *(_WORD *)&v1351[32] = 257;
              unsigned int v255 = llvm::IRBuilderBase::CreateSelect(v254, FCmpHelper, v1335, v4, (const llvm::Twine *)v1351, 0);
              BitOrPointerCast = (uint64_t **)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v255);
              *(_DWORD *)(v62 + 96) = v63;
              *(void *)(v62 + 88) = v64;
              *(unsigned char *)(v62 + 100) = v65;
              *(unsigned char *)(v62 + 101) = v1334;
              *(unsigned char *)(v62 + 102) = v1332;
              return (llvm::Value *)BitOrPointerCast;
            }
            int v73 = 1;
            while (v72 != (llvm *)-4096)
            {
              int v74 = v70 + v73++;
              uint64_t v70 = v74 & (v69 - 1);
              unint64_t v72 = *(llvm **)(v68 + 16 * v70);
              if (v72 == v54)
              {
                unint64_t v71 = (llvm **)(v68 + 16 * v70);
                goto LABEL_459;
              }
            }
          }
          unint64_t v71 = (llvm **)(v68 + 16 * v69);
          goto LABEL_459;
        }
      }
    }
  }
  uint64_t v75 = *(void *)(*((void *)a2[5] + 7) + 40);
  if (*(char *)(v75 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v1350, *(const void **)(v75 + 216), *(void *)(v75 + 224));
  }
  else {
    std::string v1350 = *(std::string *)(v75 + 216);
  }
  if (!std::string::compare(&v1350, 0, 4uLL, "agx1"))
  {
    int v76 = 27;
  }
  else if (!std::string::compare(&v1350, 0, 4uLL, "agx2"))
  {
    int v76 = 28;
  }
  else if (!std::string::compare(&v1350, 0, 4uLL, "agx3"))
  {
    int v76 = 29;
  }
  else
  {
    int v76 = 0;
  }
  if (SHIBYTE(v1350.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1350.__r_.__value_.__l.__data_);
  }
  if (v76 == 27)
  {
    int v83 = 1830;
  }
  else
  {
    if ((v76 & 0x1E) != 0x1C) {
      goto LABEL_179;
    }
    int v83 = 2131;
  }
  uint64_t v84 = (uint64_t)*v1331;
  if (*v1331 && *(unsigned char *)(v84 + 16) == 73) {
    uint64_t v84 = *(void *)(v84 - 32);
  }
  uint64_t v85 = (uint64_t)*v1330;
  if (*v1330 && *(unsigned char *)(v85 + 16) == 17)
  {
    v1344[0] = 0;
    v1348 = 0;
    if ((sub_1CB844168(v85, 0.0) & 1) != 0
      || (*(_UNKNOWN **)(v85 + 32) == &unk_1CFB2E344 ? (uint64_t v86 = *(void *)(v85 + 40)) : (uint64_t v86 = v85 + 24),
          (*(unsigned char *)(v86 + 28) & 8) != 0))
    {
      v1348 = (llvm::Value *)v85;
      if ((*((_WORD *)v1337 + 9) & 0x3F) != 2) {
        goto LABEL_179;
      }
      if (v85 != *((void *)v1337 - 4)) {
        goto LABEL_179;
      }
      v1347 = 0;
      int v1343 = 0;
      v1342 = 0;
      int8x8_t data = 0;
      uint64_t v125 = *((void *)v1337 - 8);
      *(void *)v1351 = &v1343;
      *(void *)&v1351[8] = &v1347;
      *(void *)&v1351[16] = v1344;
      *(void *)&v1351[24] = &v1342;
      *(void *)&v1351[32] = &data;
      if (!sub_1CCAA9564((uint64_t)v1351, v125) || v1344[0] != (llvm::APInt *)data) {
        goto LABEL_179;
      }
      int v124 = 4;
      int v123 = 1;
    }
    else
    {
      v1344[0] = (llvm::APInt *)v85;
      if ((*((_WORD *)v1337 + 9) & 0x3F) != 4) {
        goto LABEL_179;
      }
      if (v85 != *((void *)v1337 - 4)) {
        goto LABEL_179;
      }
      v1347 = 0;
      int v1343 = 0;
      v1342 = 0;
      int8x8_t data = 0;
      uint64_t v122 = *((void *)v1337 - 8);
      *(void *)v1351 = &v1343;
      *(void *)&v1351[8] = &v1347;
      *(void *)&v1351[16] = &v1348;
      *(void *)&v1351[24] = &v1342;
      *(void *)&v1351[32] = &data;
      if (!sub_1CCAA9564((uint64_t)v1351, v122) || v1348 != (llvm::Value *)data) {
        goto LABEL_179;
      }
      int v123 = 0;
      int v124 = 2;
    }
    if (v1343 == v124 && v1347 == v1342)
    {
      *(void *)v1341 = 0;
      int v1340 = 0;
      v1339 = 0;
      if (v123)
      {
        *(void *)v1351 = &v1340;
        *(void *)&v1351[8] = v1341;
        *(llvm::APInt **)&v1351[16] = v1344[0];
        *(void *)&v1351[24] = &v1339;
        *(llvm::APInt **)&v1351[32] = v1344[0];
        if (!sub_1CCAA9650((uint64_t)v1351, v84)) {
          goto LABEL_179;
        }
      }
      else
      {
        *(void *)v1351 = &v1340;
        *(void *)&v1351[8] = v1341;
        *(void *)&v1351[16] = v1348;
        *(void *)&v1351[24] = &v1339;
        *(void *)&v1351[32] = v1348;
        if (!sub_1CCAA9650((uint64_t)v1351, v84)) {
          goto LABEL_179;
        }
      }
      v874 = *(llvm::Value **)v1341;
      if (*(void *)v1341 && *(unsigned char *)(*(void *)v1341 + 16) == 73)
      {
        v874 = *(llvm::Value **)(*(void *)v1341 - 32);
        *(void *)v1341 = v874;
      }
      v875 = v1339;
      if (v1339 && *((unsigned char *)v1339 + 16) == 73)
      {
        v875 = (llvm::Value *)*((void *)v1339 - 4);
        v1339 = v875;
      }
      v876 = v1342;
      if (v1342 && *((unsigned char *)v1342 + 16) == 73)
      {
        v876 = (llvm::Value *)*((void *)v1342 - 4);
        v1342 = v876;
      }
      if (v1340 == v124 && v874 == v875 && v875 == v876)
      {
        if (sub_1CB844168((uint64_t)v1348, -1.0) && sub_1CB844168((uint64_t)v1344[0], 1.0))
        {
          if (*((unsigned char *)*a2 + 8)) {
            goto LABEL_179;
          }
          if (!v1342) {
            goto LABEL_179;
          }
          unsigned int v877 = *((unsigned __int8 *)v1342 + 16);
          if (v877 < 0x1C || v877 - 59 < 0xFFFFFFEE || (*((unsigned char *)v1342 + 17) & 0x10) == 0) {
            goto LABEL_179;
          }
          uint64_t v878 = 0;
          uint64_t v879 = *(void *)*a2;
          *(void *)v1351 = &v1351[16];
          *(void *)&v1351[8] = 0x200000000;
          uint64_t v1354 = v879;
          v1355 = &v1363;
          v1356 = v1364;
          uint64_t v1357 = 0;
          int v1358 = 0;
          __int16 v1359 = 512;
          char v1360 = 7;
          uint64_t v1361 = 0;
          uint64_t v1362 = 0;
          v1363 = &unk_1F2616E88;
          v1364[0] = &unk_1F2617008;
          v880 = (unsigned __int8 *)a2[6];
          uint64_t v1352 = (uint64_t)a2[5];
          v1353 = a2 + 3;
          v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v880;
          if (v880)
          {
            llvm::MetadataTracking::track((uint64_t)&v1376, v880, 2);
            uint64_t v878 = v1376.__r_.__value_.__r.__words[0];
          }
          sub_1CB8461A4((uint64_t)v1351, 0, v878);
          if (!v1376.__r_.__value_.__r.__words[0]) {
            goto LABEL_1699;
          }
          int v1234 = *v1376.__r_.__value_.__l.__data_;
          if ((v1234 - 4) > 0x1E)
          {
            if ((v1234 - 3) >= 0xFFFFFFFE) {
              std::string::size_type v1273 = v1376.__r_.__value_.__r.__words[0];
            }
            else {
              std::string::size_type v1273 = 0;
            }
            if ((v1234 - 3) < 0xFFFFFFFE)
            {
              if (v1234 == 3) {
                *(void *)(v1376.__r_.__value_.__r.__words[0] + 8) = 0;
              }
              goto LABEL_1699;
            }
            unint64_t v1236 = v1273 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1376.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
              && !*(_DWORD *)(v1376.__r_.__value_.__r.__words[0] + 12))
            {
              goto LABEL_1699;
            }
            uint64_t v1235 = *(void *)(v1376.__r_.__value_.__r.__words[0] + 16);
            if ((v1235 & 4) == 0) {
              goto LABEL_1699;
            }
            unint64_t v1236 = v1235 & 0xFFFFFFFFFFFFFFF8;
            if (!v1236) {
              goto LABEL_1699;
            }
          }
          int8x8_t data = (int8x8_t)&v1376;
          sub_1CC5FA668(v1236 + 16, &data);
LABEL_1699:
          v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v1342;
          v881 = *(llvm::Type **)v1342;
          v882 = (uint64_t *)*a2;
          if (*(llvm::Type **)v1342 != *a2)
          {
            LOWORD(v1368) = 257;
            v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CB845034((uint64_t)v1351, (uint64_t)v1342, v882, (uint64_t)&data);
            v881 = *a2;
          }
          v1372 = v881;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)v75, v83, (uint64_t)&v1372, 1);
          uint64_t v884 = Declaration;
          if (Declaration) {
            v885 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            v885 = 0;
          }
          LOWORD(v1368) = 257;
          uint64_t v1218 = sub_1CB845BAC((uint64_t *)v1351, v885, (uint64_t **)Declaration, (uint64_t *)&v1376, 1, (uint64_t)&data, 0);
          LOWORD(v1368) = 257;
          v1345 = sub_1CB843FF8((uint64_t)v1351, (uint64_t)v1376.__r_.__value_.__l.__data_, (uint64_t)&data, 0);
          if (v884) {
            v1219 = *(uint64_t ***)(v884 + 24);
          }
          else {
            v1219 = 0;
          }
          LOWORD(v1368) = 257;
          v1345 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v1351, v1219, (uint64_t **)v884, (uint64_t *)&v1345, 1, (uint64_t)&data, 0);
          LOWORD(v1368) = 257;
          v1345 = sub_1CB843FF8((uint64_t)v1351, (uint64_t)v1345, (uint64_t)&data, 0);
          LOWORD(v1368) = 257;
          int v285 = (llvm::Value *)sub_1CC52C04C((uint64_t)v1351, v1218, (uint64_t)v1345, (uint64_t)&data, 0);
          if (*(unsigned char **)v1351 != &v1351[16]) {
            free(*(void **)v1351);
          }
          goto LABEL_2454;
        }
        if (!sub_1CB844168((uint64_t)v1348, 0.0)) {
          goto LABEL_179;
        }
        LODWORD(v1366) = 32;
        int8x8_t data = 0;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1351, (const llvm::APInt **)&data);
        *(_OWORD *)&v1376.__r_.__value_.__r.__words[1] = *(_OWORD *)v1351;
        int v1377 = *(_DWORD *)&v1351[16];
        unsigned __int8 v1378 = v1378 & 0xF0 | v1351[20] & 0xF;
        LODWORD(v1366) = 32;
        int8x8_t data = (int8x8_t)1065353216;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1351, (const llvm::APInt **)&data);
        long long v1373 = *(_OWORD *)v1351;
        int v1374 = *(_DWORD *)&v1351[16];
        unsigned __int8 v1375 = v1375 & 0xF0 | v1351[20] & 0xF;
        char v1338 = 0;
        llvm::APFloat::convert((uint64_t)&v1376, *((void **)v1344[0] + 4), 1, &v1338);
        llvm::APFloat::convert((uint64_t)&v1372, *((void **)v1344[0] + 4), 1, &v1338);
        v993 = v1344[0];
        v994 = (llvm::APInt *)((char *)v1344[0] + 32);
        if (*((_UNKNOWN **)v1344[0] + 4) != &unk_1CFB2E344)
        {
          unsigned int v995 = *((unsigned __int8 *)v1344[0] + 52);
          int v285 = 0;
          switch(4 * (v995 & 7) + (v1378 & 7))
          {
            case 1u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 9u:
            case 0xDu:
            case 0xFu:
              goto LABEL_2450;
            case 2u:
            case 3u:
            case 0xBu:
              int v996 = ~(v995 >> 2) & 2;
              goto LABEL_2068;
            case 8u:
            case 0xCu:
            case 0xEu:
              int v996 = (v1378 >> 2) & 2;
              goto LABEL_2068;
            case 0xAu:
              int v1088 = (v995 >> 3) & 1;
              if (v1088 != ((v1378 >> 3) & 1)) {
                goto LABEL_2555;
              }
              int v996 = llvm::detail::IEEEFloat::compareAbsoluteValue(v994, (const llvm::detail::IEEEFloat *)&v1376.__r_.__value_.__r.__words[1]);
              if ((*((unsigned char *)v993 + 52) & 8) == 0) {
                goto LABEL_2068;
              }
              if (!v996) {
                goto LABEL_2069;
              }
              goto LABEL_2189;
            default:
              int v1088 = (v995 >> 3) & 1;
              if (v1088 == ((v1378 >> 3) & 1)) {
                goto LABEL_2189;
              }
LABEL_2555:
              int v996 = (2 * v1088) ^ 2;
              goto LABEL_2068;
          }
        }
        int v996 = llvm::detail::DoubleAPFloat::compare(v994, (const llvm::detail::DoubleAPFloat *)&v1376.__r_.__value_.__r.__words[1]);
LABEL_2068:
        if (v996 != 2) {
          goto LABEL_2189;
        }
LABEL_2069:
        v1089 = v1344[0];
        v1090 = (llvm::APInt *)((char *)v1344[0] + 32);
        if (*((_UNKNOWN **)v1344[0] + 4) != &unk_1CFB2E344)
        {
          unsigned int v1091 = *((unsigned __int8 *)v1344[0] + 52);
          switch(4 * (v1091 & 7) + (v1375 & 7))
          {
            case 1u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 9u:
            case 0xDu:
            case 0xFu:
              goto LABEL_2436;
            case 2u:
            case 3u:
            case 0xBu:
              int v1092 = ~(v1091 >> 2) & 2;
              goto LABEL_2188;
            case 8u:
            case 0xCu:
            case 0xEu:
              int v1092 = (v1375 >> 2) & 2;
              goto LABEL_2188;
            case 0xAu:
              int v1136 = (v1091 >> 3) & 1;
              if (v1136 != ((v1375 >> 3) & 1)) {
                goto LABEL_2557;
              }
              int v1092 = llvm::detail::IEEEFloat::compareAbsoluteValue(v1090, (const llvm::detail::IEEEFloat *)&v1373);
              if ((*((unsigned char *)v1089 + 52) & 8) == 0) {
                goto LABEL_2188;
              }
              if (v1092) {
                goto LABEL_2436;
              }
              goto LABEL_2189;
            default:
              int v1136 = (v1091 >> 3) & 1;
              if (v1136 == ((v1375 >> 3) & 1)) {
                goto LABEL_2436;
              }
LABEL_2557:
              int v1092 = (2 * v1136) ^ 2;
              goto LABEL_2188;
          }
        }
        int v1092 = llvm::detail::DoubleAPFloat::compare(v1090, (const llvm::detail::DoubleAPFloat *)&v1373);
LABEL_2188:
        if (v1092 == 2)
        {
LABEL_2189:
          int v285 = 0;
LABEL_2450:
          if ((_UNKNOWN *)v1373 == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1373 + 1);
          }
          else if ((*(_DWORD *)(v1373 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v1373 + 1))
          {
            MEMORY[0x1D25D9CB0](*((void *)&v1373 + 1), 0x1000C8000313F17);
          }
          if ((_UNKNOWN *)v1376.__r_.__value_.__l.__size_ == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1376.__r_.__value_.__r.__words[2]);
          }
          else if ((*(_DWORD *)(v1376.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F {
                 && v1376.__r_.__value_.__r.__words[2])
          }
          {
            MEMORY[0x1D25D9CB0](v1376.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
          }
LABEL_2454:
          if (v285) {
            goto LABEL_1559;
          }
          goto LABEL_179;
        }
LABEL_2436:
        v1252 = 0;
        uint64_t v1253 = *(void *)*a2;
        *(void *)v1351 = &v1351[16];
        *(void *)&v1351[8] = 0x200000000;
        uint64_t v1354 = v1253;
        v1355 = &v1363;
        v1356 = v1364;
        uint64_t v1357 = 0;
        int v1358 = 0;
        __int16 v1359 = 512;
        char v1360 = 7;
        uint64_t v1361 = 0;
        uint64_t v1362 = 0;
        v1363 = &unk_1F2616E88;
        v1364[0] = &unk_1F2617008;
        v1254 = a2[6];
        uint64_t v1352 = (uint64_t)a2[5];
        v1353 = a2 + 3;
        v1345 = v1254;
        if (v1254)
        {
          llvm::MetadataTracking::track((uint64_t)&v1345, (unsigned __int8 *)v1254, 2);
          v1252 = v1345;
        }
        sub_1CB8461A4((uint64_t)v1351, 0, (uint64_t)v1252);
        if (v1345)
        {
          int v1262 = *(unsigned __int8 *)v1345;
          if ((v1262 - 4) > 0x1E)
          {
            if ((v1262 - 3) >= 0xFFFFFFFE) {
              v1265 = v1345;
            }
            else {
              v1265 = 0;
            }
            if ((v1262 - 3) < 0xFFFFFFFE)
            {
              if (v1262 == 3) {
                *((void *)v1345 + 1) = 0;
              }
              goto LABEL_2439;
            }
            unint64_t v1264 = (unint64_t)v1265 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1345 + 1) & 0x7F) != 2 && !*((_DWORD *)v1345 + 3)) {
              goto LABEL_2439;
            }
            uint64_t v1263 = *((void *)v1345 + 2);
            if ((v1263 & 4) == 0) {
              goto LABEL_2439;
            }
            unint64_t v1264 = v1263 & 0xFFFFFFFFFFFFFFF8;
            if (!v1264) {
              goto LABEL_2439;
            }
          }
          int8x8_t data = (int8x8_t)&v1345;
          sub_1CC5FA668(v1264 + 16, &data);
        }
LABEL_2439:
        v1345 = v1342;
        v1255 = *(llvm::Type **)v1342;
        v1256 = (uint64_t *)*a2;
        if (*(llvm::Type **)v1342 != *a2)
        {
          LOWORD(v1368) = 257;
          v1345 = sub_1CB845034((uint64_t)v1351, (uint64_t)v1342, v1256, (uint64_t)&data);
          v1255 = *a2;
        }
        v1349 = v1255;
        uint64_t v1257 = llvm::Intrinsic::getDeclaration((uint64_t **)v75, v83, (uint64_t)&v1349, 1);
        if (v1257) {
          v1258 = *(uint64_t ***)(v1257 + 24);
        }
        else {
          v1258 = 0;
        }
        LOWORD(v1368) = 257;
        int v285 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v1351, v1258, (uint64_t **)v1257, (uint64_t *)&v1345, 1, (uint64_t)&data, 0);
        if ((sub_1CB844168((uint64_t)v1344[0], 1.0) & 1) == 0)
        {
          v1259 = v1344[0];
          v1260 = (uint64_t *)*a2;
          if (*(llvm::Type **)v1342 != *a2)
          {
            LOWORD(v1368) = 257;
            v1259 = sub_1CB845034((uint64_t)v1351, (uint64_t)v1344[0], v1260, (uint64_t)&data);
          }
          LOWORD(v1368) = 257;
          v1261 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v1351, 4, (uint64_t)v285, (uint64_t)v1259, (uint64_t)&data, 0, 0);
          LOWORD(v1368) = 257;
          int v285 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v1351, v1261, v285, v1259, (const llvm::Twine *)&data, 0);
        }
        if (*(unsigned char **)v1351 != &v1351[16]) {
          free(*(void **)v1351);
        }
        goto LABEL_2450;
      }
    }
  }
LABEL_179:
  uint64_t v126 = *(void *)(*((void *)a2[5] + 7) + 40);
  if (*(char *)(v126 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v1376, *(const void **)(v126 + 216), *(void *)(v126 + 224));
  }
  else {
    std::string v1376 = *(std::string *)(v126 + 216);
  }
  if (!std::string::compare(&v1376, 0, 4uLL, "agx1"))
  {
    int v127 = v4;
    int v128 = 27;
  }
  else
  {
    int v127 = v4;
    if (!std::string::compare(&v1376, 0, 4uLL, "agx2"))
    {
      int v128 = 28;
    }
    else if (!std::string::compare(&v1376, 0, 4uLL, "agx3"))
    {
      int v128 = 29;
    }
    else
    {
      int v128 = 0;
    }
  }
  if (SHIBYTE(v1376.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1376.__r_.__value_.__l.__data_);
  }
  if (v128 == 27)
  {
    int v129 = 1830;
  }
  else
  {
    if ((v128 & 0x1E) != 0x1C)
    {
LABEL_203:
      int v4 = v127;
      goto LABEL_204;
    }
    int v129 = 2131;
  }
  uint64_t v130 = 0;
  uint64_t v131 = *((void *)v54 - 4);
  if (*(unsigned char *)(v131 + 16) == 17) {
    uint64_t v132 = *((void *)v54 - 4);
  }
  else {
    uint64_t v132 = 0;
  }
  uint64_t v133 = *((void *)v54 - 8);
  if (*(unsigned char *)(v133 + 16) == 84)
  {
    uint64_t v134 = *(void *)(v133 - 32);
    if (v134 && !*(unsigned char *)(v134 + 16) && *(void *)(v134 + 24) == *(void *)(v133 + 72))
    {
      if ((*(unsigned char *)(v134 + 33) & 0x20) != 0) {
        uint64_t v130 = (llvm::Instruction *)*((void *)v54 - 8);
      }
      else {
        uint64_t v130 = 0;
      }
    }
    else
    {
      uint64_t v130 = 0;
    }
  }
  if ((uint64_t **)v133 != *v1331 || (uint64_t **)v131 != *v1330 || !v132) {
    goto LABEL_203;
  }
  if ((*((_WORD *)v54 + 9) & 0x3F) != 4
    || !sub_1CB844168(v132, 1.0)
    || !sub_1CC164EB8(*((void *)v54 - 8), 0, 0, 0))
  {
    if ((*((_WORD *)v54 + 9) & 0x3F) == 2)
    {
      if (sub_1CB844168(v132, 0.0))
      {
        if (v130)
        {
          int v180 = *(_DWORD *)(*((void *)v130 - 4) + 36);
          if (v180 == 1830 || v180 == 1851 || v180 == 2131)
          {
            uint64_t v16 = a1;
            uint64_t v17 = (llvm::ValueAsMetadata *)a2;
            unsigned int v15 = v130;
            return (llvm::Value *)sub_1CC9D3C84(v16, v17, v15);
          }
        }
      }
    }
    goto LABEL_203;
  }
  uint64_t v166 = 0;
  uint64_t v167 = *(void *)*a2;
  *(void *)v1351 = &v1351[16];
  *(void *)&v1351[8] = 0x200000000;
  uint64_t v1354 = v167;
  v1355 = &v1363;
  v1356 = v1364;
  uint64_t v1357 = 0;
  int v1358 = 0;
  __int16 v1359 = 512;
  char v1360 = 7;
  uint64_t v1361 = 0;
  uint64_t v1362 = 0;
  v1363 = &unk_1F2616E88;
  v1364[0] = &unk_1F2617008;
  unsigned int v168 = a2[6];
  uint64_t v1352 = (uint64_t)a2[5];
  v1353 = a2 + 3;
  v1372 = v168;
  if (v168)
  {
    llvm::MetadataTracking::track((uint64_t)&v1372, (unsigned __int8 *)v168, 2);
    uint64_t v166 = v1372;
  }
  sub_1CB8461A4((uint64_t)v1351, 0, (uint64_t)v166);
  if (v1372)
  {
    int v903 = *(unsigned __int8 *)v1372;
    if ((v903 - 4) > 0x1E)
    {
      if ((v903 - 3) >= 0xFFFFFFFE) {
        v967 = v1372;
      }
      else {
        v967 = 0;
      }
      if ((v903 - 3) < 0xFFFFFFFE)
      {
        if (v903 == 3) {
          *((void *)v1372 + 1) = 0;
        }
        goto LABEL_285;
      }
      unint64_t v905 = (unint64_t)v967 + 8;
    }
    else
    {
      if ((*((unsigned char *)v1372 + 1) & 0x7F) != 2 && !*((_DWORD *)v1372 + 3)) {
        goto LABEL_285;
      }
      uint64_t v904 = *((void *)v1372 + 2);
      if ((v904 & 4) == 0) {
        goto LABEL_285;
      }
      unint64_t v905 = v904 & 0xFFFFFFFFFFFFFFF8;
      if (!v905) {
        goto LABEL_285;
      }
    }
    int8x8_t data = (int8x8_t)&v1372;
    sub_1CC5FA668(v905 + 16, &data);
  }
LABEL_285:
  v1372 = (llvm::Value *)*((void *)v54 - 8);
  v1350.__r_.__value_.__r.__words[0] = (std::string::size_type)*a2;
  uint64_t v169 = llvm::Intrinsic::getDeclaration((uint64_t **)v126, v129, (uint64_t)&v1350, 1);
  if (v169) {
    v170 = *(uint64_t ***)(v169 + 24);
  }
  else {
    v170 = 0;
  }
  int v4 = v127;
  LOWORD(v1368) = 257;
  int v285 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v1351, v170, (uint64_t **)v169, (uint64_t *)&v1372, 1, (uint64_t)&data, 0);
  if (*(unsigned char **)v1351 != &v1351[16]) {
    free(*(void **)v1351);
  }
  if (v285) {
    goto LABEL_1559;
  }
LABEL_204:
  int v135 = (llvm::Value *)*((void *)v54 - 8);
  __int16 v136 = *((_WORD *)v54 + 9);
  if (sub_1CC0241FC((uint64_t)v1351, *((llvm::Constant **)v54 - 4)) && (*((unsigned char *)v54 + 17) & 4) != 0)
  {
    int v171 = v136 & 0x3F;
    if (v135 == v1335 && v171 == 5)
    {
      *(void *)&v1351[8] = v1335;
      int v172 = *((unsigned __int8 *)v4 + 16);
      if (v172 == 5)
      {
        if (*((_WORD *)v4 + 9) != 16
          || !sub_1CC185C44((uint64_t)v1351, *((llvm::Constant **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))))
        {
          goto LABEL_206;
        }
        uint64_t v173 = ((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))[4];
      }
      else
      {
        if (v172 != 44 || !sub_1CC04C850((uint64_t)v1351, *((llvm::Constant **)v4 - 8))) {
          goto LABEL_206;
        }
        uint64_t v173 = *((void *)v4 - 4);
      }
      uint64_t v192 = *(void *)&v1351[8];
    }
    else
    {
      if (v135 != v4 || v171 != 2) {
        goto LABEL_206;
      }
      *(void *)&long long v1366 = v4;
      int v181 = *((unsigned __int8 *)v1335 + 16);
      if (v181 == 5)
      {
        if (*((_WORD *)v1335 + 9) != 16
          || !sub_1CC185C44((uint64_t)&data, *((llvm::Constant **)v1335 - 4 * (*((_DWORD *)v1335 + 5) & 0x7FFFFFF))))
        {
          goto LABEL_206;
        }
        uint64_t v173 = ((void *)v1335 - 4 * (*((_DWORD *)v1335 + 5) & 0x7FFFFFF))[4];
      }
      else
      {
        if (v181 != 44 || !sub_1CC04C850((uint64_t)&data, *((llvm::Constant **)v1335 - 8))) {
          goto LABEL_206;
        }
        uint64_t v173 = *((void *)v1335 - 4);
      }
      uint64_t v192 = v1366;
    }
    if (v192 == v173)
    {
      v237 = *(llvm::IRBuilderBase **)(a1 + 24);
      *(_WORD *)&v1351[32] = 257;
      v238 = v135;
      v239 = v54;
LABEL_411:
      uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic(v237, 139, v238, v239, (const llvm::Twine *)v1351);
      goto LABEL_6;
    }
  }
LABEL_206:
  unsigned int v137 = v1337;
  *(void *)v1351 = &v1336;
  *(void *)&v1351[8] = v1335;
  if (v1337
    && *((unsigned char *)v1337 + 16) == 82
    && v1335 == *((llvm **)v1337 - 8)
    && sub_1CC0241FC((uint64_t)&v1351[16], *((llvm::Constant **)v1337 - 4)))
  {
    **(_DWORD **)v1351 = *((_WORD *)v137 + 9) & 0x3F;
    *(void *)&long long v1366 = v1335;
    int v240 = *((unsigned __int8 *)v4 + 16);
    if (v240 == 5)
    {
      if (*((_WORD *)v4 + 9) != 16
        || !sub_1CC185C44((uint64_t)&data, *((llvm::Constant **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))))
      {
        goto LABEL_209;
      }
      uint64_t v241 = ((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))[4];
    }
    else
    {
      if (v240 != 44 || !sub_1CC04C850((uint64_t)&data, *((llvm::Constant **)v4 - 8))) {
        goto LABEL_209;
      }
      uint64_t v241 = *((void *)v4 - 4);
    }
    if ((void)v1366 == v241 && (v1336 & 0xFFFFFFF7) == 5)
    {
LABEL_1664:
      v237 = *(llvm::IRBuilderBase **)(a1 + 24);
      *(_WORD *)&v1351[32] = 257;
      v238 = v1335;
LABEL_1671:
      v239 = (llvm::Instruction *)a2;
      goto LABEL_411;
    }
  }
LABEL_209:
  uint64_t v138 = v1337;
  *(void *)v1351 = &v1336;
  *(void *)&v1351[8] = v4;
  if (!v1337
    || *((unsigned char *)v1337 + 16) != 82
    || v4 != *((llvm::Value **)v1337 - 8)
    || !sub_1CC0241FC((uint64_t)&v1351[16], *((llvm::Constant **)v1337 - 4)))
  {
    goto LABEL_212;
  }
  **(_DWORD **)v1351 = *((_WORD *)v138 + 9) & 0x3F;
  *(void *)&long long v1366 = v4;
  int v242 = *((unsigned __int8 *)v1335 + 16);
  if (v242 == 5)
  {
    if (*((_WORD *)v1335 + 9) != 16
      || !sub_1CC185C44((uint64_t)&data, *((llvm::Constant **)v1335 - 4 * (*((_DWORD *)v1335 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_212;
    }
    uint64_t v243 = ((void *)v1335 - 4 * (*((_DWORD *)v1335 + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v242 != 44 || !sub_1CC04C850((uint64_t)&data, *((llvm::Constant **)v1335 - 8))) {
      goto LABEL_212;
    }
    uint64_t v243 = *((void *)v1335 - 4);
  }
  if ((void)v1366 == v243 && (v1336 & 0xFFFFFFF7) == 2) {
    goto LABEL_1670;
  }
LABEL_212:
  v139 = v1337;
  *(void *)v1351 = &v1336;
  *(void *)&v1351[8] = v1335;
  if (v1337)
  {
    if (*((unsigned char *)v1337 + 16) == 82
      && v1335 == *((llvm **)v1337 - 8)
      && sub_1CC0241FC((uint64_t)&v1351[16], *((llvm::Constant **)v1337 - 4)))
    {
      **(_DWORD **)v1351 = *((_WORD *)v139 + 9) & 0x3F;
      int8x8_t data = (int8x8_t)v1335;
      if (sub_1CC04CADC(&data, (uint64_t)v4)
        && (*((unsigned char *)a2 + 17) & 0x10) != 0
        && (v1336 <= 0xC && ((1 << v1336) & 0x1030) != 0 || v1336 == 13))
      {
        goto LABEL_1664;
      }
    }
  }
  v140 = v1337;
  *(void *)v1351 = &v1336;
  *(void *)&v1351[8] = v4;
  if (v1337)
  {
    if (*((unsigned char *)v1337 + 16) == 82
      && v4 == *((llvm::Value **)v1337 - 8)
      && sub_1CC0241FC((uint64_t)&v1351[16], *((llvm::Constant **)v1337 - 4)))
    {
      **(_DWORD **)v1351 = *((_WORD *)v140 + 9) & 0x3F;
      int8x8_t data = (int8x8_t)v4;
      if (sub_1CC04CADC(&data, (uint64_t)v1335)
        && (*((unsigned char *)a2 + 17) & 0x10) != 0
        && (v1336 <= 0xA && ((1 << v1336) & 0x40C) != 0 || v1336 == 11))
      {
LABEL_1670:
        v237 = *(llvm::IRBuilderBase **)(a1 + 24);
        *(_WORD *)&v1351[32] = 257;
        v238 = v4;
        goto LABEL_1671;
      }
    }
  }
  if (v1337)
  {
    if (*((unsigned char *)v1337 + 16) == 81)
    {
      BitOrPointerCast = (uint64_t **)sub_1CCA98BD8(a1, (llvm::ValueAsMetadata *)a2, (uint64_t ***)v1337, (uint64_t)v11, v12, v13, v14);
      if (BitOrPointerCast) {
        return (llvm::Value *)BitOrPointerCast;
      }
    }
  }
  unsigned int v141 = *v1333;
  uint64_t v142 = (uint64_t)*v1331;
  uint64_t v143 = *v1330;
  if (*((unsigned __int8 *)*v1331 + 16) <= 0x1Bu) {
    v144 = 0;
  }
  else {
    v144 = *v1331;
  }
  if (*((unsigned __int8 *)v143 + 16) <= 0x1Bu) {
    v145 = 0;
  }
  else {
    v145 = *v1330;
  }
  if (!v144) {
    goto LABEL_231;
  }
  if (!v145) {
    goto LABEL_231;
  }
  v146 = v144[1];
  if (!v146) {
    goto LABEL_231;
  }
  if (v146[1]) {
    goto LABEL_231;
  }
  uint8x8_t v174 = v145[1];
  if (!v174 || v174[1]) {
    goto LABEL_231;
  }
  uint64_t v175 = *(void *)(a1 + 24);
  int v176 = *((unsigned __int8 *)v144 + 16);
  if (v176 == 43)
  {
    int v177 = *((unsigned __int8 *)v145 + 16);
    uint64_t v178 = *v1330;
    uint64_t v179 = *v1331;
    if (v177 == 41) {
      goto LABEL_509;
    }
  }
  else if (v176 == 44)
  {
    int v177 = *((unsigned __int8 *)v145 + 16);
    uint64_t v178 = *v1330;
    uint64_t v179 = *v1331;
    if (v177 == 42) {
      goto LABEL_509;
    }
  }
  else
  {
    int v177 = *((unsigned __int8 *)v145 + 16);
  }
  if (v177 == 44)
  {
    uint64_t v178 = *v1331;
    uint64_t v179 = *v1330;
    if (v176 != 42) {
      goto LABEL_231;
    }
  }
  else
  {
    if (v177 != 43) {
      goto LABEL_231;
    }
    uint64_t v178 = *v1331;
    uint64_t v179 = *v1330;
    if (v176 != 41) {
      goto LABEL_231;
    }
  }
LABEL_509:
  int v272 = *((_DWORD *)v179 + 5);
  if ((v272 & 0x40000000) != 0) {
    v273 = (uint64_t **)*(v179 - 1);
  }
  else {
    v273 = &v179[-4 * (v272 & 0x7FFFFFF)];
  }
  v274 = *v273;
  int v275 = *((_DWORD *)v178 + 5);
  if ((v275 & 0x40000000) != 0) {
    v276 = (uint64_t **)*(v178 - 1);
  }
  else {
    v276 = &v178[-4 * (v275 & 0x7FFFFFF)];
  }
  if (v274 == *v276)
  {
    v278 = (llvm::Value **)(v276 + 4);
    goto LABEL_527;
  }
  if ((v272 & 0x40000000) != 0) {
    v277 = (llvm::Value **)*(v179 - 1);
  }
  else {
    v277 = (llvm::Value **)&v179[-4 * (v272 & 0x7FFFFFF)];
  }
  v282 = *v277;
  if ((v275 & 0x40000000) != 0) {
    v278 = (llvm::Value **)*(v178 - 1);
  }
  else {
    v278 = (llvm::Value **)&v178[-4 * (v275 & 0x7FFFFFF)];
  }
  if (v282 != v278[4])
  {
LABEL_231:
    if (!v141
      || v141[16] != 92
      || *((_DWORD *)v141 + 18) != 1
      || **((_DWORD **)v141 + 8) != 1
      || (uint64_t v147 = *((void *)v141 - 4), v148 = sub_1CC062BC4(v147), !v147)
      || !v148
      || !v143
      || *((unsigned char *)v143 + 16) != 92
      || *((_DWORD *)v143 + 18) != 1
      || *(_DWORD *)v143[8]
      || (uint64_t *)v147 != *(v143 - 4))
    {
LABEL_242:
      v149 = *(llvm::IRBuilderBase **)(a1 + 24);
      uint64_t v150 = *(a2 - 12);
      uint64_t v151 = (uint64_t)*(a2 - 8);
      uint64_t v152 = (uint64_t)*(a2 - 4);
      uint64_t v153 = *a2;
      v1345 = 0;
      v1344[0] = 0;
      *(void *)v1351 = &v1350;
      *(void *)&v1351[8] = &v1345;
      *(void *)&v1351[16] = 0;
      int v154 = *(unsigned __int8 *)(v151 + 16);
      if (v154 == 5)
      {
        if (*(_WORD *)(v151 + 18) != 28) {
          goto LABEL_252;
        }
        uint64_t v155 = v151 - 32 * (*(_DWORD *)(v151 + 20) & 0x7FFFFFF);
        if (!*(void *)v155) {
          goto LABEL_252;
        }
        v1350.__r_.__value_.__r.__words[0] = *(void *)v155;
        if ((sub_1CBF5295C((uint64_t)&v1351[8], *(llvm::Constant **)(v155 + 32)) & 1) == 0) {
          goto LABEL_252;
        }
      }
      else
      {
        if (v154 != 56) {
          goto LABEL_252;
        }
        if (!*(void *)(v151 - 64)) {
          goto LABEL_252;
        }
        v1350.__r_.__value_.__r.__words[0] = *(void *)(v151 - 64);
        if (!sub_1CBF528D8((uint64_t)&v1351[8], *(unsigned __int8 **)(v151 - 32))) {
          goto LABEL_252;
        }
      }
      int8x8_t data = (int8x8_t)v1350.__r_.__value_.__l.__data_;
      *(void *)&long long v1366 = v1344;
      *((void *)&v1366 + 1) = 0;
      uint64_t v156 = *(void *)(v152 + 8);
      if (v156 && !*(void *)(v156 + 8))
      {
        int v186 = *(unsigned __int8 *)(v152 + 16);
        if (v186 == 5)
        {
          if (*(_WORD *)(v152 + 18) != 29) {
            goto LABEL_252;
          }
          uint64_t v256 = v152 - 32 * (*(_DWORD *)(v152 + 20) & 0x7FFFFFF);
          if (v1350.__r_.__value_.__r.__words[0] != *(void *)v256
            || !sub_1CBF5295C((uint64_t)&v1366, *(llvm::Constant **)(v256 + 32)))
          {
            goto LABEL_252;
          }
        }
        else if (v186 != 57 {
               || v1350.__r_.__value_.__r.__words[0] != *(void *)(v152 - 64)
        }
               || (sub_1CBF528D8((uint64_t)&v1366, *(unsigned __int8 **)(v152 - 32)) & 1) == 0)
        {
          goto LABEL_252;
        }
        unsigned int v257 = *((_DWORD *)v1344[0] + 2);
        LODWORD(v1376.__r_.__value_.__r.__words[1]) = v257;
        if (v257 > 0x40) {
          operator new[]();
        }
        if (v257) {
          unint64_t v258 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v257;
        }
        else {
          unint64_t v258 = 0;
        }
        v259 = (const void *)(v258 & ~*(void *)v1344[0]);
        v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v259;
        LODWORD(v1376.__r_.__value_.__r.__words[1]) = 0;
        uint64_t v602 = *((unsigned int *)v1345 + 2);
        if (v602 > 0x40) {
          BOOL v603 = memcmp(*(const void **)v1345, v259, ((unint64_t)(v602 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v603 = *(void *)v1345 == (void)v259;
        }
        if (v603)
        {
          NullValue = llvm::Constant::getNullValue(v153, v187, v188);
          v607 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v153, v1344[0], v606);
          if ((*((_DWORD *)v153 + 2) & 0xFE) == 0x12) {
            v607 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v153 + 8) | ((unint64_t)(*((_DWORD *)v153 + 2) == 19) << 32)), (uint64_t)v607);
          }
          *(void *)v1351 = "masksel";
          *(_WORD *)&v1351[32] = 259;
          v608 = llvm::IRBuilderBase::CreateSelect(v149, v150, NullValue, v607, (const llvm::Twine *)v1351, (uint64_t ***)a2);
          *(_WORD *)&v1351[32] = 257;
          v609 = (void *)v151;
          goto LABEL_1170;
        }
      }
LABEL_252:
      *(void *)v1351 = &v1350;
      *(void *)&v1351[8] = &v1345;
      *(void *)&v1351[16] = 0;
      int v157 = *(unsigned __int8 *)(v152 + 16);
      if (v157 == 5)
      {
        if (*(_WORD *)(v152 + 18) != 28) {
          goto LABEL_262;
        }
        uint64_t v158 = v152 - 32 * (*(_DWORD *)(v152 + 20) & 0x7FFFFFF);
        if (!*(void *)v158) {
          goto LABEL_262;
        }
        v1350.__r_.__value_.__r.__words[0] = *(void *)v158;
        if ((sub_1CBF5295C((uint64_t)&v1351[8], *(llvm::Constant **)(v158 + 32)) & 1) == 0) {
          goto LABEL_262;
        }
      }
      else
      {
        if (v157 != 56) {
          goto LABEL_262;
        }
        if (!*(void *)(v152 - 64)) {
          goto LABEL_262;
        }
        v1350.__r_.__value_.__r.__words[0] = *(void *)(v152 - 64);
        if (!sub_1CBF528D8((uint64_t)&v1351[8], *(unsigned __int8 **)(v152 - 32))) {
          goto LABEL_262;
        }
      }
      int8x8_t data = (int8x8_t)v1350.__r_.__value_.__l.__data_;
      *(void *)&long long v1366 = v1344;
      *((void *)&v1366 + 1) = 0;
      uint64_t v159 = *(void *)(v151 + 8);
      if (!v159 || *(void *)(v159 + 8)) {
        goto LABEL_262;
      }
      int v189 = *(unsigned __int8 *)(v151 + 16);
      if (v189 == 5)
      {
        if (*(_WORD *)(v151 + 18) != 29) {
          goto LABEL_262;
        }
        uint64_t v260 = v151 - 32 * (*(_DWORD *)(v151 + 20) & 0x7FFFFFF);
        if (v1350.__r_.__value_.__r.__words[0] != *(void *)v260
          || !sub_1CBF5295C((uint64_t)&v1366, *(llvm::Constant **)(v260 + 32)))
        {
          goto LABEL_262;
        }
      }
      else if (v189 != 57 {
             || v1350.__r_.__value_.__r.__words[0] != *(void *)(v151 - 64)
      }
             || (sub_1CBF528D8((uint64_t)&v1366, *(unsigned __int8 **)(v151 - 32)) & 1) == 0)
      {
        goto LABEL_262;
      }
      unsigned int v261 = *((_DWORD *)v1344[0] + 2);
      LODWORD(v1373) = v261;
      if (v261 > 0x40) {
        operator new[]();
      }
      uint64_t v262 = ~*(void *)v1344[0];
      unint64_t v263 = v261 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v261 : 0;
      v264 = (const void *)(v263 & v262);
      v1372 = (llvm::Value *)(v263 & v262);
      LODWORD(v1373) = 0;
      uint64_t v610 = *((unsigned int *)v1345 + 2);
      if (!(v610 > 0x40
           ? memcmp(*(const void **)v1345, v264, ((unint64_t)(v610 + 63) >> 3) & 0x3FFFFFF8) == 0
           : *(void *)v1345 == (void)v264))
      {
LABEL_262:
        v160 = *v1333;
        unsigned int v161 = *v1331;
        BitOrPointerCast = *v1330;
        v1372 = 0;
        LODWORD(v1350.__r_.__value_.__l.__data_) = 0;
        *(void *)v1351 = &v1350;
        *(void *)&v1351[8] = &v1372;
        if (!sub_1CC0CC4AC((uint64_t)v1351, (uint64_t)v160)
          || ((uint64_t)v1350.__r_.__value_.__l.__data_ & 0xFFFFFFFE) != 0x20
          || (LODWORD(v1350.__r_.__value_.__l.__data_) != 33
            ? (uint64_t v163 = (uint64_t)BitOrPointerCast)
            : (uint64_t v163 = (uint64_t)v161),
              LODWORD(v1350.__r_.__value_.__l.__data_) != 33
            ? (unsigned int v164 = (unsigned __int8 *)v161)
            : (unsigned int v164 = (unsigned __int8 *)BitOrPointerCast),
              !v164
           || v164[16] > 0x14u
           || *(unsigned char *)(v163 + 16) != 45
           || ((v165 = *(llvm::Value **)(v163 - 64), BitOrPointerCast = *(uint64_t ***)(v163 - 32), v1372 != v165)
            || !BitOrPointerCast)
           && (!v165
            || (BOOL v23 = v1372 == (llvm::Value *)BitOrPointerCast, BitOrPointerCast = *(uint64_t ***)(v163 - 64), !v23))))
        {
LABEL_572:
          if (*((unsigned __int8 *)v4 + 16) <= 0x1Bu) {
            uint64_t v322 = 0;
          }
          else {
            uint64_t v322 = (uint64_t)v4;
          }
          if (*((unsigned __int8 *)v1335 + 16) <= 0x1Bu) {
            uint64_t v323 = 0;
          }
          else {
            uint64_t v323 = (uint64_t)v1335;
          }
          if (!v322 || !v323 || *(unsigned __int8 *)(v322 + 16) != *(unsigned __int8 *)(v323 + 16)) {
            goto LABEL_696;
          }
          uint64_t v324 = *(void *)(*((void *)a2[5] + 7) + 40);
          if (*(char *)(v324 + 239) < 0) {
            sub_1CB8BDF7C((uint64_t)&v1376, *(const void **)(v324 + 216), *(void *)(v324 + 224));
          }
          else {
            std::string v1376 = *(std::string *)(v324 + 216);
          }
          if (!std::string::compare(&v1376, 0, 4uLL, "agx1"))
          {
            int v325 = 27;
          }
          else if (!std::string::compare(&v1376, 0, 4uLL, "agx2"))
          {
            int v325 = 28;
          }
          else if (!std::string::compare(&v1376, 0, 4uLL, "agx3"))
          {
            int v325 = 29;
          }
          else
          {
            int v325 = 0;
          }
          if (SHIBYTE(v1376.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1376.__r_.__value_.__l.__data_);
          }
          if ((v325 - 27) <= 2)
          {
            uint64_t v326 = *(llvm::Type **)(v322 + 40);
            if (v326 != a2[5] || *(llvm::Type **)(v323 + 40) != v326) {
              goto LABEL_696;
            }
          }
          int v327 = *((unsigned __int8 *)a2 + 16);
          if (v327 == 84)
          {
            v328 = *v1330;
            if (*v1330)
            {
              if (!*((unsigned char *)v328 + 16)
                && v328[3] == (uint64_t *)a2[9]
                && (*((unsigned char *)v328 + 33) & 0x20) != 0
                && *((_DWORD *)v328 + 9) == 275)
              {
                goto LABEL_696;
              }
            }
          }
          BitOrPointerCast = (uint64_t **)*v1333;
          if (*v1333) {
            BOOL v329 = (*v1333)[16] == 81;
          }
          else {
            BOOL v329 = 0;
          }
          char v330 = !v329;
          if (v329)
          {
            if ((int v331 = *v1331,
                  unint64_t v332 = *v1330,
                  v333 = (uint64_t **)*(BitOrPointerCast - 8),
                  int8x8_t v334 = (uint64_t **)*(BitOrPointerCast - 4),
                  *v1331 == v333)
              && v332 == v334
              || v331 == v334 && v332 == v333)
            {
              int v335 = *((_WORD *)BitOrPointerCast + 9) & 0x3E;
              if (v331 == v333)
              {
                if (v335 == 40) {
                  goto LABEL_696;
                }
              }
              else if (v335 == 38)
              {
                goto LABEL_696;
              }
            }
          }
          if (v327 == 84)
          {
            BOOL v336 = *v1330;
            if (*v1330)
            {
              if (!*((unsigned char *)v336 + 16)
                && v336[3] == (uint64_t *)a2[9]
                && (*((unsigned char *)v336 + 33) & 0x20) != 0
                && *((_DWORD *)v336 + 9) == 274)
              {
                goto LABEL_696;
              }
            }
          }
          if ((v330 & 1) == 0)
          {
            if ((unsigned int v337 = *v1331,
                  uint64_t v338 = *v1330,
                  int v339 = (uint64_t **)*(BitOrPointerCast - 8),
                  v340 = (uint64_t **)*(BitOrPointerCast - 4),
                  *v1331 == v339)
              && v338 == v340
              || v337 == v340 && v338 == v339)
            {
              int v341 = *((_WORD *)BitOrPointerCast + 9) & 0x3E;
              if (v337 == v339)
              {
                if (v341 == 38) {
                  goto LABEL_696;
                }
              }
              else if (v341 == 40)
              {
                goto LABEL_696;
              }
            }
          }
          if (v327 == 84)
          {
            v342 = *v1330;
            if (*v1330)
            {
              if (!*((unsigned char *)v342 + 16)
                && v342[3] == (uint64_t *)a2[9]
                && (*((unsigned char *)v342 + 33) & 0x20) != 0
                && *((_DWORD *)v342 + 9) == 306)
              {
                goto LABEL_696;
              }
            }
          }
          if ((v330 & 1) == 0)
          {
            if ((v343 = *v1331,
                  int v344 = *v1330,
                  uint64_t v345 = (uint64_t **)*(BitOrPointerCast - 8),
                  unsigned int v346 = (uint64_t **)*(BitOrPointerCast - 4),
                  *v1331 == v345)
              && v344 == v346
              || v343 == v346 && v344 == v345)
            {
              int v347 = *((_WORD *)BitOrPointerCast + 9) & 0x3E;
              if (v343 == v345)
              {
                if (v347 == 36) {
                  goto LABEL_696;
                }
              }
              else if (v347 == 34)
              {
                goto LABEL_696;
              }
            }
          }
          if (v327 == 84)
          {
            uint64_t v348 = *v1330;
            if (*v1330)
            {
              if (!*((unsigned char *)v348 + 16)
                && v348[3] == (uint64_t *)a2[9]
                && (*((unsigned char *)v348 + 33) & 0x20) != 0
                && *((_DWORD *)v348 + 9) == 305)
              {
LABEL_696:
                uint64_t v368 = *v1331;
                unsigned int v369 = *((unsigned __int8 *)*v1331 + 16);
                uint64_t v370 = *v1330;
                unsigned int v371 = *((unsigned __int8 *)*v1330 + 16);
                if (*v1331 && v369 < 0x15)
                {
                  if (!v370) {
                    goto LABEL_740;
                  }
                  BitOrPointerCast = *v1331;
                  unsigned int v369 = *((unsigned __int8 *)*v1330 + 16);
                  uint64_t v368 = *v1330;
                  if (v371 < 0x1C) {
                    goto LABEL_740;
                  }
                }
                else if (!v370 || !v368 || v369 < 0x1C || (BitOrPointerCast = *v1330, v371 > 0x14))
                {
LABEL_740:
                  v1350.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1337;
                  v1350.__r_.__value_.__l.__size_ = a1;
                  v1350.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
                  if (*((unsigned char *)v4 + 16) == 62)
                  {
                    BitOrPointerCast = (uint64_t **)sub_1CCAA8F94((llvm::Value ***)&v1350, (uint64_t)v4, v1335, 0);
                    if (BitOrPointerCast) {
                      return (llvm::Value *)BitOrPointerCast;
                    }
                  }
                  if (*((unsigned char *)v1335 + 16) == 62)
                  {
                    BitOrPointerCast = (uint64_t **)sub_1CCAA8F94((llvm::Value ***)&v1350, (uint64_t)v1335, v4, 1);
                    if (BitOrPointerCast) {
                      return (llvm::Value *)BitOrPointerCast;
                    }
                  }
                  if ((*((_DWORD *)v1328 + 2) & 0xFE) == 0x12) {
                    unsigned int v398 = *(unsigned __int8 *)(**((void **)v1328 + 2) + 8);
                  }
                  else {
                    unsigned int v398 = *((_DWORD *)v1328 + 2);
                  }
                  if (v398 == 13 || v398 <= 6)
                  {
                    uint64_t v18 = sub_1CCA987C4(a1, (uint64_t)a2, (uint64_t)v4, (uint64_t)v1335, 0);
                    if (v18) {
                      return v18;
                    }
                    BitOrPointerCast = (uint64_t **)sub_1CCA987C4(a1, (uint64_t)a2, (uint64_t)v1335, (uint64_t)v4, 1);
                    if (BitOrPointerCast) {
                      return (llvm::Value *)BitOrPointerCast;
                    }
                    v1376.__r_.__value_.__r.__words[0] = 0;
                    v1372 = 0;
                    LODWORD(v1345) = 0;
                    int matched = llvm::matchSelectPattern((uint64_t)a2, (uint64_t)&v1376, &v1372, (llvm::Type *)&v1345, 0);
                    if (matched)
                    {
                      char v401 = v399;
                      uint64_t v402 = (uint64_t)v1328;
                      *(void *)v1351 = 0;
                      int8x8_t data = 0;
                      int v403 = llvm::matchSelectPattern((uint64_t)v1376.__r_.__value_.__l.__data_, (uint64_t)v1351, &data, 0, 0);
                      if (v403 && *a2 == *(llvm::Type **)v1376.__r_.__value_.__l.__data_)
                      {
                        BOOL v434 = v1372 == (llvm::Value *)data || v1372 == *(llvm::Value **)v1351;
                        BOOL v435 = v434;
                        if ((v403 - 9) <= 0xFFFFFFFD && v403 == matched && v435)
                        {
                          BitOrPointerCast = (uint64_t **)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v1376.__r_.__value_.__l.__data_);
                          if (BitOrPointerCast) {
                            return (llvm::Value *)BitOrPointerCast;
                          }
                        }
                      }
                      int v404 = llvm::matchSelectPattern((uint64_t)v1372, (uint64_t)v1351, &data, 0, 0);
                      if (v404 && *a2 == *(llvm::Type **)v1372)
                      {
                        BOOL v436 = v1376.__r_.__value_.__r.__words[0] == *(void *)&data
                            || v1376.__r_.__value_.__r.__words[0] == *(void *)v1351;
                        BOOL v437 = v436;
                        if ((v404 - 9) <= 0xFFFFFFFD && v404 == matched && v437)
                        {
                          BitOrPointerCast = (uint64_t **)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v1372);
                          if (BitOrPointerCast) {
                            return (llvm::Value *)BitOrPointerCast;
                          }
                        }
                      }
                      if ((matched - 7) >= 2)
                      {
                        uint64_t v419 = v1376.__r_.__value_.__r.__words[0];
                        uint64_t v420 = *(void *)v1376.__r_.__value_.__l.__data_;
                        if (*(llvm::IRBuilderBase **)v1376.__r_.__value_.__l.__data_ != v1328
                          || ((*((_DWORD *)v1328 + 2) & 0xFE) != 0x12
                            ? (unsigned int v521 = *((_DWORD *)v1328 + 2))
                            : (unsigned int v521 = *(unsigned __int8 *)(**((void **)v1328 + 2) + 8)),
                              v521 <= 6
                           && ((v568 = (void *)*((void *)v1337 - 8),
                                v569 = (void *)*((void *)v1337 - 4),
                                v568 != (void *)v1376.__r_.__value_.__l.__data_)
                            && v568 != (void *)v1372
                            || v569 != (void *)v1376.__r_.__value_.__l.__data_ && v569 != (void *)v1372)))
                        {
                          if (matched == 2)
                          {
                            __int16 v421 = 36;
LABEL_793:
                            uint64_t v422 = *(void *)(a1 + 24);
                            *(_WORD *)&v1351[32] = 257;
                            uint64_t v423 = sub_1CB845F20(v422, v421, v1376.__r_.__value_.__l.__data_, (uint64_t)v1372, (uint64_t)v1351);
                          }
                          else
                          {
                            __int16 v421 = 40;
                            switch(matched)
                            {
                              case 1:
                                goto LABEL_793;
                              case 3:
                                __int16 v421 = 38;
                                goto LABEL_793;
                              case 4:
                                __int16 v421 = 34;
                                goto LABEL_793;
                              case 5:
                                BOOL v1245 = (v401 & 1) == 0;
                                unsigned int v1246 = 4;
                                unsigned int v1247 = 12;
                                break;
                              default:
                                BOOL v1245 = (v401 & 1) == 0;
                                unsigned int v1246 = 2;
                                unsigned int v1247 = 10;
                                break;
                            }
                            if (v1245) {
                              uint64_t v1266 = v1247;
                            }
                            else {
                              uint64_t v1266 = v1246;
                            }
                            uint64_t v1267 = *(void *)(a1 + 24);
                            int v1268 = *(_DWORD *)(v1267 + 96);
                            uint64_t v1269 = *(void *)(v1267 + 88);
                            __int16 v1270 = *(_WORD *)(v1267 + 100);
                            char v1271 = *(unsigned char *)(v1267 + 102);
                            int v1272 = (*v1333)[17] >> 1;
                            if (v1272 == 127) {
                              int v1272 = -1;
                            }
                            *(_DWORD *)(v1267 + 96) = v1272;
                            *(_WORD *)&v1351[32] = 257;
                            uint64_t v423 = llvm::IRBuilderBase::CreateFCmpHelper(v1267, v1266, v419, (uint64_t)v1372, (uint64_t)v1351, 0, 0);
                            *(_DWORD *)(v1267 + 96) = v1268;
                            *(void *)(v1267 + 88) = v1269;
                            *(_WORD *)(v1267 + 100) = v1270;
                            *(unsigned char *)(v1267 + 102) = v1271;
                            uint64_t v402 = (uint64_t)v1328;
                          }
                          uint64_t v424 = *(llvm::IRBuilderBase **)(a1 + 24);
                          if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
                          {
                            uint64_t v425 = **(void **)*a2;
                            uint64_t v426 = *(void *)(v425 + 152);
                            uint64_t v427 = *(unsigned int *)(v425 + 168);
                            if (v427)
                            {
                              LODWORD(v428) = (v427 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                              uint64_t v429 = (llvm::Type ***)(v426 + 16 * v428);
                              BOOL v430 = *v429;
                              if (*v429 != a2)
                              {
                                int v431 = 1;
                                do
                                {
                                  if (v430 == (llvm::Type **)-4096) {
                                    goto LABEL_1073;
                                  }
                                  int v432 = v428 + v431++;
                                  uint64_t v428 = v432 & (v427 - 1);
                                  BOOL v430 = *(llvm::Type ***)(v426 + 16 * v428);
                                }
                                while (v430 != a2);
                                uint64_t v429 = (llvm::Type ***)(v426 + 16 * v428);
                              }
                            }
                            else
                            {
LABEL_1073:
                              uint64_t v429 = (llvm::Type ***)(v426 + 16 * v427);
                            }
                            v570 = v429[1];
                            unsigned int v573 = *v570;
                            __int16 v571 = (char *)(v570 + 2);
                            uint64_t v572 = v573;
                          }
                          else
                          {
                            uint64_t v572 = 0;
                            __int16 v571 = &byte_1CFBCE98E;
                          }
                          *(_WORD *)&v1351[32] = 261;
                          *(void *)v1351 = v571;
                          *(void *)&v1351[8] = v572;
                          uint64_t v574 = llvm::IRBuilderBase::CreateSelect(v424, v423, (llvm::Value *)v1376.__r_.__value_.__l.__data_, v1372, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                          int v4 = v574;
                          if (v420 != v402)
                          {
                            uint64_t v575 = *(uint64_t **)(a1 + 24);
                            LOWORD(v1368) = 257;
                            if (*(void *)v574 != v402)
                            {
                              if (*((unsigned __int8 *)v574 + 16) <= 0x14u)
                              {
                                int v4 = (llvm::Value *)(*(uint64_t (**)(uint64_t, void, llvm::Value *, uint64_t))(*(void *)v575[9] + 224))(v575[9], v1345, v574, v402);
                                if (v4) {
                                  BOOL v579 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
                                }
                                else {
                                  BOOL v579 = 0;
                                }
                                if (v579)
                                {
                                  (*(void (**)(uint64_t, llvm::Value *, int8x8_t *, uint64_t, uint64_t))(*(void *)v575[10] + 16))(v575[10], v4, &data, v575[6], v575[7]);
                                  uint64_t v580 = *((unsigned int *)v575 + 2);
                                  if (v580)
                                  {
                                    uint64_t v581 = *v575;
                                    uint64_t v582 = v581 + 16 * v580;
                                    do
                                    {
                                      llvm::Instruction::setMetadata(v4, *(_DWORD *)v581, *(llvm::MDNode **)(v581 + 8));
                                      v581 += 16;
                                    }
                                    while (v581 != v582);
                                  }
                                }
                              }
                              else
                              {
                                *(_WORD *)&v1351[32] = 257;
                                int v4 = llvm::CastInst::Create((int)v1345, (uint64_t)v574, v402, (const char **)v1351, 0);
                                (*(void (**)(uint64_t, llvm::Value *, int8x8_t *, uint64_t, uint64_t))(*(void *)v575[10] + 16))(v575[10], v4, &data, v575[6], v575[7]);
                                uint64_t v576 = *((unsigned int *)v575 + 2);
                                if (v576)
                                {
                                  uint64_t v577 = *v575;
                                  uint64_t v578 = v577 + 16 * v576;
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v4, *(_DWORD *)v577, *(llvm::MDNode **)(v577 + 8));
                                    v577 += 16;
                                  }
                                  while (v577 != v578);
                                }
                              }
                            }
                          }
LABEL_1609:
                          uint64_t v16 = a1;
                          uint64_t v17 = (llvm::ValueAsMetadata *)a2;
                          unsigned int v15 = v4;
                          return (llvm::Value *)sub_1CC9D3C84(v16, v17, v15);
                        }
                      }
                    }
                  }
                  if (!sub_1CB845E74((uint64_t)a2))
                  {
                    int v406 = *v1333;
                    goto LABEL_781;
                  }
                  int v406 = (unsigned __int8 *)*(a2 - 12);
                  if ((~*((unsigned __int8 *)a2 + 17) & 0x14) != 0 || !v406 || v406[16] != 82) {
                    goto LABEL_781;
                  }
                  v407 = *v1331;
                  v408 = *v1330;
                  int v409 = (llvm::Value *)*((void *)v406 - 8);
                  v410 = (llvm::Value *)*((void *)v406 - 4);
                  BOOL v411 = *v1331 == (uint64_t **)v409 && v408 == (uint64_t **)v410;
                  char v412 = v411;
                  if (!v411 && (v407 != (uint64_t **)v410 || v408 != (uint64_t **)v409)) {
                    goto LABEL_773;
                  }
                  int v413 = *((_WORD *)v406 + 9) & 0x3F;
                  if (v407 == (uint64_t **)v409)
                  {
                    __int16 v540 = *((_WORD *)v406 + 9) & 0x3F;
                  }
                  else
                  {
                    if ((v413 - 32) < 0xA) {
                      goto LABEL_772;
                    }
                    LOBYTE(v540) = 3;
                    if (((1 << v413) & 0xCFFF) != 0) {
                      goto LABEL_772;
                    }
                    if (v413 != 12) {
                      LOBYTE(v540) = 2;
                    }
                  }
                  if (v409 && (v540 & 0x3E) == 2 && v410)
                  {
                    v541 = *(llvm::IRBuilderBase **)(a1 + 24);
                    *(_WORD *)&v1351[32] = 257;
                    int v542 = 193;
LABEL_1069:
                    uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic(v541, v542, v409, v410, (llvm::Instruction *)a2, (const llvm::Twine *)v1351);
                    goto LABEL_6;
                  }
LABEL_772:
                  if (v412)
                  {
LABEL_775:
                    int v414 = *((_WORD *)v406 + 9) & 0x3F;
                    if (v407 == (uint64_t **)v409)
                    {
                      char v415 = *((_WORD *)v406 + 9) & 0x3F;
                    }
                    else
                    {
                      if ((v414 - 32) < 0xA) {
                        goto LABEL_781;
                      }
                      char v415 = 5;
                      if (((1 << v414) & 0xF3FF) != 0) {
                        goto LABEL_781;
                      }
                      if (v414 != 10) {
                        char v415 = 4;
                      }
                    }
                    if (v409 && (v415 & 0x3E) == 4 && v410)
                    {
                      v541 = *(llvm::IRBuilderBase **)(a1 + 24);
                      *(_WORD *)&v1351[32] = 257;
                      int v542 = 202;
                      goto LABEL_1069;
                    }
LABEL_781:
                    unsigned int v416 = *((unsigned __int8 *)v4 + 16);
                    if (!v406 || v406[16] != 83) {
                      goto LABEL_832;
                    }
                    if (v416 < 0x1C) {
                      goto LABEL_784;
                    }
                    if (v416 == 83)
                    {
                      v418 = (llvm::Type *)*((void *)v406 + 5);
                      if (*((llvm::Type **)v4 + 5) == v418)
                      {
LABEL_784:
                        unsigned int v417 = *((unsigned __int8 *)v1335 + 16);
                        if (v417 < 0x1C)
                        {
LABEL_785:
                          BitOrPointerCast = (uint64_t **)sub_1CC9D50C0(a1, (llvm::Instruction *)a2, (uint64_t)v406);
                          if (BitOrPointerCast) {
                            return (llvm::Value *)BitOrPointerCast;
                          }
                          unsigned int v416 = *((unsigned __int8 *)v4 + 16);
                          goto LABEL_832;
                        }
                        if (v417 == 83)
                        {
                          uint64_t v433 = (llvm::Type *)*((void *)v406 + 5);
                          if (*((llvm::Type **)v1335 + 5) == v433) {
                            goto LABEL_785;
                          }
                        }
                        else
                        {
                          uint64_t v433 = (llvm::Type *)*((void *)v406 + 5);
                        }
                        if (a2[5] == v433 && *((llvm::Type **)v1335 + 5) != v433) {
                          goto LABEL_785;
                        }
LABEL_832:
                        if (v416 != 85
                          || (unint64_t v438 = (llvm::Value *)*((void *)v4 - 12),
                              v439 = *(llvm::Constant **)v438,
                              uint64_t v440 = v1337,
                              *(void *)v438 != *(void *)v1337))
                        {
LABEL_834:
                          unsigned int v441 = *((unsigned __int8 *)v1335 + 16);
                          if (v441 != 85
                            || (uint64_t v442 = (llvm::Value *)*((void *)v1335 - 12),
                                unint64_t v443 = *(llvm::Constant **)v442,
                                uint64_t v444 = v1337,
                                *(void *)v442 != *(void *)v1337))
                          {
LABEL_836:
                            uint64_t v445 = *((void *)v4 + 1);
                            if (v445
                              && !*(void *)(v445 + 8)
                              && v416 >= 0x1C
                              && v416 - 59 >= 0xFFFFFFEE
                              && (v416 > 0x33 || ((1 << v416) & 0xD800000000000) == 0))
                            {
                              uint64_t v451 = *((void *)v4 - 8);
                              if (v451 && *(unsigned char *)(v451 + 16) == 85 && *(llvm **)(v451 - 96) == v1337)
                              {
                                sub_1CC9D28DC(a1, (uint64_t)v4, 0, *(void *)(v451 - 64));
                                uint64_t v453 = *(void *)(a1 + 32);
                                int v906 = *(_DWORD *)(v453 + 8);
                                *(void *)v1351 = v4;
                                *(_DWORD *)&v1351[8] = v906;
                                int v907 = *(_DWORD *)(v453 + 2080);
                                if (v907)
                                {
                                  uint64_t v908 = *(void *)(v453 + 2064);
                                  int v909 = v907 - 1;
                                  unsigned int v910 = v909 & ((v4 >> 4) ^ (v4 >> 9));
                                  v459 = (llvm::Value **)(v908 + 16 * v910);
                                  v911 = *v459;
                                  if (*v459 != v4)
                                  {
                                    int v461 = 0;
                                    int v912 = 1;
                                    while (v911 != (llvm::Value *)-4096)
                                    {
                                      if (v461) {
                                        BOOL v913 = 0;
                                      }
                                      else {
                                        BOOL v913 = v911 == (llvm::Value *)-8192;
                                      }
                                      if (v913) {
                                        int v461 = v459;
                                      }
                                      unsigned int v914 = v910 + v912++;
                                      unsigned int v910 = v914 & v909;
                                      v459 = (llvm::Value **)(v908 + 16 * v910);
                                      v911 = *v459;
                                      if (*v459 == v4) {
                                        return (llvm::Value *)a2;
                                      }
                                    }
                                    goto LABEL_1775;
                                  }
                                  return (llvm::Value *)a2;
                                }
LABEL_2561:
                                v926 = 0;
LABEL_1778:
                                v927 = sub_1CBF569E0((_DWORD *)(v453 + 2064), (uint64_t)v1351, (uint64_t *)v1351, v926);
                                void *v927 = *(void *)v1351;
                                *((_DWORD *)v927 + 2) = *(_DWORD *)&v1351[8];
                                unsigned int v928 = *(_DWORD *)(v453 + 8);
                                if (v928 >= *(_DWORD *)(v453 + 12)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *(void *)(*(void *)v453 + 8 * v928) = v4;
LABEL_1785:
                                ++*(_DWORD *)(v453 + 8);
                                return (llvm::Value *)a2;
                              }
                              uint64_t v452 = *((void *)v4 - 4);
                              if (v452 && *(unsigned char *)(v452 + 16) == 85 && *(llvm **)(v452 - 96) == v1337)
                              {
                                sub_1CC9D28DC(a1, (uint64_t)v4, 1u, *(void *)(v452 - 64));
                                uint64_t v453 = *(void *)(a1 + 32);
                                int v454 = *(_DWORD *)(v453 + 8);
                                *(void *)v1351 = v4;
                                *(_DWORD *)&v1351[8] = v454;
                                int v455 = *(_DWORD *)(v453 + 2080);
                                if (v455)
                                {
                                  uint64_t v456 = *(void *)(v453 + 2064);
                                  int v457 = v455 - 1;
                                  unsigned int v458 = v457 & ((v4 >> 4) ^ (v4 >> 9));
                                  v459 = (llvm::Value **)(v456 + 16 * v458);
                                  uint64_t v460 = *v459;
                                  if (*v459 != v4)
                                  {
                                    int v461 = 0;
                                    int v462 = 1;
                                    while (v460 != (llvm::Value *)-4096)
                                    {
                                      if (v461) {
                                        BOOL v463 = 0;
                                      }
                                      else {
                                        BOOL v463 = v460 == (llvm::Value *)-8192;
                                      }
                                      if (v463) {
                                        int v461 = v459;
                                      }
                                      unsigned int v464 = v458 + v462++;
                                      unsigned int v458 = v464 & v457;
                                      v459 = (llvm::Value **)(v456 + 16 * v458);
                                      uint64_t v460 = *v459;
                                      if (*v459 == v4) {
                                        return (llvm::Value *)a2;
                                      }
                                    }
LABEL_1775:
                                    if (v461) {
                                      v926 = v461;
                                    }
                                    else {
                                      v926 = v459;
                                    }
                                    goto LABEL_1778;
                                  }
                                  return (llvm::Value *)a2;
                                }
                                goto LABEL_2561;
                              }
                            }
                            uint64_t v446 = *((void *)v1335 + 1);
                            if (v446
                              && !*(void *)(v446 + 8)
                              && v441 >= 0x1C
                              && v441 - 59 >= 0xFFFFFFEE
                              && (v441 > 0x33 || ((1 << v441) & 0xD800000000000) == 0))
                            {
                              uint64_t v465 = *((void *)v1335 - 8);
                              if (v465 && *(unsigned char *)(v465 + 16) == 85 && *(llvm **)(v465 - 96) == v1337)
                              {
                                sub_1CC9D28DC(a1, (uint64_t)v1335, 0, *(void *)(v465 - 32));
                                uint64_t v453 = *(void *)(a1 + 32);
                                int v915 = *(_DWORD *)(v453 + 8);
                                *(void *)v1351 = v1335;
                                *(_DWORD *)&v1351[8] = v915;
                                int v916 = *(_DWORD *)(v453 + 2080);
                                if (v916)
                                {
                                  uint64_t v917 = *(void *)(v453 + 2064);
                                  int v918 = v916 - 1;
                                  unsigned int v919 = v918 & ((v1335 >> 4) ^ (v1335 >> 9));
                                  v472 = (llvm **)(v917 + 16 * v919);
                                  v920 = *v472;
                                  if (*v472 == v1335) {
                                    return (llvm::Value *)a2;
                                  }
                                  int v474 = 0;
                                  int v921 = 1;
                                  while (v920 != (llvm *)-4096)
                                  {
                                    if (v474) {
                                      BOOL v922 = 0;
                                    }
                                    else {
                                      BOOL v922 = v920 == (llvm *)-8192;
                                    }
                                    if (v922) {
                                      int v474 = v472;
                                    }
                                    unsigned int v923 = v919 + v921++;
                                    unsigned int v919 = v923 & v918;
                                    v472 = (llvm **)(v917 + 16 * v919);
                                    v920 = *v472;
                                    if (*v472 == v1335) {
                                      return (llvm::Value *)a2;
                                    }
                                  }
LABEL_1780:
                                  if (v474) {
                                    v929 = v474;
                                  }
                                  else {
                                    v929 = v472;
                                  }
                                  goto LABEL_1783;
                                }
LABEL_2562:
                                v929 = 0;
LABEL_1783:
                                v930 = sub_1CBF569E0((_DWORD *)(v453 + 2064), (uint64_t)v1351, (uint64_t *)v1351, v929);
                                void *v930 = *(void *)v1351;
                                *((_DWORD *)v930 + 2) = *(_DWORD *)&v1351[8];
                                unsigned int v931 = *(_DWORD *)(v453 + 8);
                                if (v931 >= *(_DWORD *)(v453 + 12)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *(void *)(*(void *)v453 + 8 * v931) = v1335;
                                goto LABEL_1785;
                              }
                              uint64_t v466 = *((void *)v1335 - 4);
                              if (v466 && *(unsigned char *)(v466 + 16) == 85 && *(llvm **)(v466 - 96) == v1337)
                              {
                                sub_1CC9D28DC(a1, (uint64_t)v1335, 1u, *(void *)(v466 - 32));
                                uint64_t v453 = *(void *)(a1 + 32);
                                int v467 = *(_DWORD *)(v453 + 8);
                                *(void *)v1351 = v1335;
                                *(_DWORD *)&v1351[8] = v467;
                                int v468 = *(_DWORD *)(v453 + 2080);
                                if (v468)
                                {
                                  uint64_t v469 = *(void *)(v453 + 2064);
                                  int v470 = v468 - 1;
                                  unsigned int v471 = v470 & ((v1335 >> 4) ^ (v1335 >> 9));
                                  v472 = (llvm **)(v469 + 16 * v471);
                                  int v473 = *v472;
                                  if (*v472 == v1335) {
                                    return (llvm::Value *)a2;
                                  }
                                  int v474 = 0;
                                  int v475 = 1;
                                  while (v473 != (llvm *)-4096)
                                  {
                                    if (v474) {
                                      BOOL v476 = 0;
                                    }
                                    else {
                                      BOOL v476 = v473 == (llvm *)-8192;
                                    }
                                    if (v476) {
                                      int v474 = v472;
                                    }
                                    unsigned int v477 = v471 + v475++;
                                    unsigned int v471 = v477 & v470;
                                    v472 = (llvm **)(v469 + 16 * v471);
                                    int v473 = *v472;
                                    if (*v472 == v1335) {
                                      return (llvm::Value *)a2;
                                    }
                                  }
                                  goto LABEL_1780;
                                }
                                goto LABEL_2562;
                              }
                            }
                            v1342 = 0;
                            *(void *)v1351 = &v1342;
                            if (sub_1CBF686A0((void **)v1351, 30, (uint64_t)v1337)
                              && !sub_1CCA16428((uint64_t)&data, (unsigned __int8 *)a2)
                              && !sub_1CCA16538((uint64_t)&v1376, (unsigned __int8 *)a2))
                            {
                              sub_1CC9D28DC(a1, (uint64_t)a2, 0, (uint64_t)v1342);
                              v509 = *(a2 - 8);
                              int v510 = *(a2 - 4);
                              if (v509 != v510)
                              {
                                int v511 = *(a2 - 3);
                                *(a2 - 8) = v510;
                                *(a2 - 4) = v509;
                                long long v512 = *(_OWORD *)(a2 - 7);
                                unint64_t v513 = (uint64_t ****)*(a2 - 2);
                                *(a2 - 7) = v511;
                                *(a2 - 6) = (llvm::Type *)v513;
                                *(_OWORD *)(a2 - 3) = v512;
                                *unint64_t v513 = v1331;
                                uint64_t v514 = (uint64_t)*(a2 - 7);
                                if (v514) {
                                  *(void *)(v514 + 16) = a2 - 7;
                                }
                                *(void *)*(a2 - 2) = v1330;
                                uint64_t v515 = (uint64_t)*(a2 - 3);
                                if (v515) {
                                  *(void *)(v515 + 16) = a2 - 3;
                                }
                              }
                              llvm::Instruction::swapProfMetadata((llvm::Instruction *)a2);
                              return (llvm::Value *)a2;
                            }
                            v1320 = (llvm::Value *)((char *)v4 + 8);
                            __na = (llvm ***)((char *)v1335 + 8);
                            uint64_t v447 = *a2;
                            if (!*a2 || *((unsigned char *)v447 + 8) != 18)
                            {
LABEL_930:
                              if ((*(_DWORD *)(*(void *)v1337 + 8) & 0xFE) == 0x12) {
                                goto LABEL_1002;
                              }
                              uint64_t v503 = *(void *)(a1 + 56);
                              if (!*(unsigned char *)(v503 + 184)) {
                                llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 56));
                              }
                              if (!*(_DWORD *)(v503 + 24)) {
                                goto LABEL_1002;
                              }
                              int8x8_t data = 0;
                              LODWORD(v1366) = 1;
                              LODWORD(v1367) = 1;
                              *((void *)&v1366 + 1) = 0;
                              uint64_t v504 = *(void *)(a1 + 56);
                              uint64_t v505 = *(void *)(a1 + 72);
                              v506 = (llvm *)a2;
                              if (!a2[5])
                              {
                                if (!v1337
                                  || *((unsigned __int8 *)v1337 + 16) < 0x1Cu
                                  || (v506 = v1337, !*((void *)v1337 + 5)))
                                {
                                  v506 = 0;
                                }
                              }
                              *(void *)v1351 = *(void *)(a1 + 80);
                              *(void *)&v1351[8] = v504;
                              *(void *)&v1351[16] = v506;
                              *(void *)&v1351[24] = v505;
                              *(void *)&v1351[32] = 0;
                              v1351[40] = 1;
                              sub_1CC15FBF8((uint64_t)v1337, &data, 0, (const llvm::DataLayout **)v1351);
                              unsigned int v507 = v1367;
                              if (v1367 > 0x40)
                              {
                                int v516 = 0;
                                int64_t v517 = ((unint64_t)v1367 + 63) >> 6;
                                do
                                {
                                  BOOL v378 = v517-- < 1;
                                  if (v378) {
                                    break;
                                  }
                                  unint64_t v518 = *(void *)(*((void *)&v1366 + 1) + 8 * v517);
                                  v516 += __clz(v518);
                                }
                                while (!v518);
                                int v519 = v1367 | 0xFFFFFFC0;
                                if ((v1367 & 0x3F) == 0) {
                                  int v519 = 0;
                                }
                                unsigned int v508 = v4;
                                if (v516 + v519 == v1367 - 1) {
                                  goto LABEL_998;
                                }
                              }
                              else
                              {
                                unsigned int v508 = v4;
                                if (*((void *)&v1366 + 1) == 1) {
                                  goto LABEL_998;
                                }
                              }
                              if (v1366 > 0x40)
                              {
                                int v543 = 0;
                                int64_t v544 = ((unint64_t)v1366 + 63) >> 6;
                                do
                                {
                                  BOOL v378 = v544-- < 1;
                                  if (v378) {
                                    break;
                                  }
                                  unint64_t v545 = *(void *)(*(void *)&data + 8 * v544);
                                  v543 += __clz(v545);
                                }
                                while (!v545);
                                int v546 = v1366 | 0xFFFFFFC0;
                                if ((v1366 & 0x3F) == 0) {
                                  int v546 = 0;
                                }
                                unsigned int v508 = v1335;
                                if (v543 + v546 == v1366 - 1) {
                                  goto LABEL_998;
                                }
                              }
                              else
                              {
                                unsigned int v508 = v1335;
                                if (*(void *)&data == 1)
                                {
LABEL_998:
                                  BitOrPointerCast = (uint64_t **)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v508);
                                  int v520 = 0;
                                  unsigned int v507 = v1367;
                                  goto LABEL_999;
                                }
                              }
                              int v520 = 1;
LABEL_999:
                              if (v507 >= 0x41 && *((void *)&v1366 + 1)) {
                                MEMORY[0x1D25D9CB0](*((void *)&v1366 + 1), 0x1000C8000313F17, v508);
                              }
                              if (v1366 >= 0x41 && *(void *)&data) {
                                MEMORY[0x1D25D9CB0](*(void *)&data, 0x1000C8000313F17, v508);
                              }
                              if (!v520) {
                                return (llvm::Value *)BitOrPointerCast;
                              }
LABEL_1002:
                              uint64_t v547 = (llvm::Value *)*v1333;
                              if (*v1333)
                              {
                                unsigned int v548 = *((unsigned __int8 *)v547 + 16);
                                if (v548 >= 0x1C && v548 - 83 >= 0xFFFFFFFE)
                                {
                                  uint64_t v550 = *((void *)v547 - 8);
                                  if (v550)
                                  {
                                    uint64_t v551 = *((void *)v547 - 4);
                                    if (v551)
                                    {
                                      uint64_t v552 = (uint64_t)*v1331;
                                      if (*v1331 != (uint64_t **)v550 && v552 != v551)
                                      {
                                        uint64_t v553 = (uint64_t)*v1330;
                                        if (*v1330 != (uint64_t **)v550 && v553 != v551)
                                        {
                                          uint64_t v554 = *(llvm::IRBuilderBase **)(a1 + 24);
                                          int8x8_t data = 0;
                                          v1376.__r_.__value_.__r.__words[0] = 0;
                                          *(void *)v1351 = &data;
                                          if (sub_1CCA4756C((void **)v1351, v550))
                                          {
                                            v1372 = (llvm::Value *)&v1376;
                                            if (sub_1CCA4756C((void **)&v1372, v551))
                                            {
                                              v1372 = 0;
                                              v1345 = 0;
                                              *(void *)v1351 = &v1372;
                                              if (sub_1CCA4756C((void **)v1351, v552))
                                              {
                                                v1344[0] = (llvm::APInt *)&v1345;
                                                if (sub_1CCA4756C((void **)v1344, v553))
                                                {
                                                  if (v1372 == (llvm::Value *)data
                                                    && v1345 == (llvm::Value *)v1376.__r_.__value_.__l.__data_)
                                                  {
                                                    *(_WORD *)&v1351[32] = 257;
                                                    v1102 = v554;
                                                    v1103 = v547;
                                                    v1104 = (llvm::Value *)v550;
                                                    v1105 = (llvm::Value *)v551;
                                                  }
                                                  else
                                                  {
                                                    if (v1372 != (llvm::Value *)v1376.__r_.__value_.__l.__data_
                                                      || v1345 != (llvm::Value *)data)
                                                    {
                                                      goto LABEL_1022;
                                                    }
                                                    *(_WORD *)&v1351[32] = 257;
                                                    v1102 = v554;
                                                    v1103 = v547;
                                                    v1104 = (llvm::Value *)v551;
                                                    v1105 = (llvm::Value *)v550;
                                                  }
                                                  v1107 = llvm::IRBuilderBase::CreateSelect(v1102, v1103, v1104, v1105, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                                                  v1108 = *a2;
                                                  *(_WORD *)&v1351[32] = 257;
                                                  BitOrPointerCast = (uint64_t **)llvm::CastInst::CreateBitOrPointerCast(v1107, v1108, (const char **)v1351, 0, v1109);
                                                  if (BitOrPointerCast) {
                                                    return (llvm::Value *)BitOrPointerCast;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
LABEL_1022:
                              v555 = a2[1];
                              if (!v555
                                || *((void *)v555 + 1)
                                || (uint64_t v560 = (void *)*((void *)v555 + 3)) == 0
                                || *((unsigned char *)v560 + 16) != 85
                                || (v556 = (void *)*(v560 - 12), v556 != (void *)*v1333)
                                || (uint64_t **)*(v560 - 4) != *v1331 && (uint64_t **)*(v560 - 8) != *v1330)
                              {
                                v556 = *v1333;
                                if (*v1333)
                                {
                                  if (*((unsigned char *)v556 + 16) == 92 && *(_DWORD *)v556[8] == 1)
                                  {
                                    uint64_t v557 = *(v556 - 4);
                                    if (*(unsigned char *)(v557 + 16) == 64)
                                    {
                                      v558 = *v1331;
                                      if (!*v1331 || *((unsigned char *)v558 + 16) != 92 || *(_DWORD *)v558[8]) {
                                        goto LABEL_1031;
                                      }
                                      uint64_t v618 = (uint64_t)*(v558 - 4);
                                      if (*(unsigned char *)(v618 + 16) != 64) {
                                        uint64_t v618 = 0;
                                      }
                                      if (v618
                                        && v618 == v557
                                        && (unsigned int v15 = *(llvm::Instruction **)(v557 - 64), v15 == (llvm::Instruction *)*v1330))
                                      {
                                        if (v15) {
                                          goto LABEL_7;
                                        }
                                      }
                                      else
                                      {
LABEL_1031:
                                        unsigned int v15 = (llvm::Instruction *)*v1330;
                                        if (*v1330 && *((unsigned char *)v15 + 16) == 92 && !**((_DWORD **)v15 + 8))
                                        {
                                          uint64_t v559 = *((void *)v15 - 4);
                                          if (*(unsigned char *)(v559 + 16) != 64) {
                                            uint64_t v559 = 0;
                                          }
                                          if (v559 && v559 == v557 && *(uint64_t ***)(v557 - 64) == v558) {
                                            goto LABEL_7;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              if (!v556) {
                                goto LABEL_1211;
                              }
                              unsigned int v561 = *((unsigned __int8 *)v556 + 16);
                              if (v561 < 0x1C) {
                                goto LABEL_1211;
                              }
                              if (v561 - 83 < 0xFFFFFFFE) {
                                goto LABEL_1211;
                              }
                              uint64_t v562 = *(v556 - 8);
                              if (!v562) {
                                goto LABEL_1211;
                              }
                              v563 = (unsigned __int8 *)*(v556 - 4);
                              if (!v563 || v563[16] > 0x14u) {
                                goto LABEL_1211;
                              }
                              v564 = *(uint64_t **)(a1 + 64);
                              char v565 = *((_WORD *)v556 + 9);
                              unsigned int v566 = v565 & 0x3F;
                              if ((v565 & 0x3E) == 0x20)
                              {
                                if (v566 == 32) {
                                  unsigned int v567 = 1;
                                }
                                else {
                                  unsigned int v567 = 2;
                                }
                              }
                              else if (v566 == 1)
                              {
                                unsigned int v567 = 1;
                              }
                              else
                              {
                                if (v566 != 14) {
                                  goto LABEL_1211;
                                }
                                unsigned int v567 = 2;
                              }
                              uint64_t v595 = (uint64_t)v1333[4 * v567];
                              if (!v595) {
                                goto LABEL_1211;
                              }
                              unsigned int v596 = *(unsigned __int8 *)(v595 + 16);
                              if (v596 < 0x1C || v596 - 59 < 0xFFFFFFEE) {
                                goto LABEL_1211;
                              }
                              BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(v596 - 28), *(llvm::ConstantFP **)v595, (llvm::Type *)1, 0);
                              if (BinOpIdentity != (llvm::Constant *)v563
                                && (v566 > 0xF
                                 || !BinOpIdentity
                                 || !sub_1CC04C9B0((uint64_t)v1351, BinOpIdentity)
                                 || !sub_1CC04C9B0((uint64_t)&data, (llvm::Constant *)v563)))
                              {
                                goto LABEL_1211;
                              }
                              char isCommutative = llvm::Instruction::isCommutative((llvm::Instruction *)v595);
                              uint64_t v600 = *(void *)(v595 - 64);
                              if (isCommutative)
                              {
                                uint64_t v601 = *(void *)(v595 - 32);
                                if (!v600 || v562 != v601)
                                {
                                  if (!v601) {
                                    goto LABEL_1211;
                                  }
                                  BOOL v23 = v562 == v600;
                                  uint64_t v600 = *(void *)(v595 - 32);
                                  if (!v23) {
                                    goto LABEL_1211;
                                  }
                                }
LABEL_1207:
                                if (!sub_1CB845E74(v595)
                                  || (*(unsigned char *)(v595 + 17) & 0x10) != 0
                                  || llvm::CannotBeNegativeZero(v600, v564, 0))
                                {
                                  BitOrPointerCast = (uint64_t **)sub_1CC9D28DC(a1, (uint64_t)a2, v567, v600);
                                  if (BitOrPointerCast) {
                                    return (llvm::Value *)BitOrPointerCast;
                                  }
                                }
                                goto LABEL_1211;
                              }
                              if (v600 && v562 == *(void *)(v595 - 32)) {
                                goto LABEL_1207;
                              }
LABEL_1211:
                              uint64_t v627 = *(void *)(a1 + 24);
                              v628 = *a2;
                              if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12) {
                                v628 = (llvm::Type *)**((void **)v628 + 2);
                              }
                              unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v628);
                              uint8x8_t v630 = (uint8x8_t)vcnt_s8((int8x8_t)PrimitiveSizeInBits);
                              v630.i16[0] = vaddlv_u8(v630);
                              if (v630.i32[0] != 1) {
                                goto LABEL_1216;
                              }
                              v631 = *v1330;
                              uint64_t v632 = (*v1330)[1];
                              if (!v632 || v632[1]) {
                                goto LABEL_1216;
                              }
                              unsigned int v819 = PrimitiveSizeInBits;
                              int v820 = *((unsigned __int8 *)v631 + 16);
                              if (v820 == 5)
                              {
                                if (*((_WORD *)v631 + 9) != 29) {
                                  goto LABEL_1216;
                                }
                                unsigned int v824 = (uint64_t *)&v631[-4 * (*((_DWORD *)v631 + 5) & 0x7FFFFFF)];
                                uint64_t v821 = *v824;
                                if (!*v824) {
                                  goto LABEL_1216;
                                }
                                unsigned int v825 = *(unsigned __int8 *)(v821 + 16);
                                if (v825 < 0x1C || v825 - 59 < 0xFFFFFFEE) {
                                  goto LABEL_1216;
                                }
                                uint64_t v823 = v824[4];
                                if (!v823) {
                                  goto LABEL_1216;
                                }
                              }
                              else
                              {
                                if (v820 != 57) {
                                  goto LABEL_1216;
                                }
                                uint64_t v821 = (uint64_t)*(v631 - 8);
                                if (!v821) {
                                  goto LABEL_1216;
                                }
                                unsigned int v822 = *(unsigned __int8 *)(v821 + 16);
                                if (v822 < 0x1C) {
                                  goto LABEL_1216;
                                }
                                if (v822 - 59 < 0xFFFFFFEE) {
                                  goto LABEL_1216;
                                }
                                uint64_t v823 = (uint64_t)*(v631 - 4);
                                if (!v823) {
                                  goto LABEL_1216;
                                }
                              }
                              unsigned int v827 = *(unsigned __int8 *)(v823 + 16);
                              if (v827 < 0x1C) {
                                goto LABEL_1216;
                              }
                              if (v827 - 59 < 0xFFFFFFEE) {
                                goto LABEL_1216;
                              }
                              v1376.__r_.__value_.__r.__words[0] = 0;
                              v1372 = 0;
                              v1345 = 0;
                              v1344[0] = 0;
                              *(void *)v1351 = &v1376;
                              *(void *)&v1351[8] = &v1345;
                              *(void *)&v1351[16] = &v1345;
                              uint64_t v828 = *(void *)(v821 + 8);
                              if (!v828) {
                                goto LABEL_1216;
                              }
                              if (*(void *)(v828 + 8)) {
                                goto LABEL_1216;
                              }
                              if (!sub_1CCAAA230((void **)v1351, v821)) {
                                goto LABEL_1216;
                              }
                              int8x8_t data = (int8x8_t)&v1372;
                              *(void *)&long long v1366 = v1344;
                              *((void *)&v1366 + 1) = v1344;
                              uint64_t v829 = *(void *)(v823 + 8);
                              if (!v829
                                || *(void *)(v829 + 8)
                                || !sub_1CCAAA230(&data, v823)
                                || *(unsigned __int8 *)(v821 + 16) == *(unsigned __int8 *)(v823 + 16))
                              {
                                goto LABEL_1216;
                              }
                              v830 = v1344[0];
                              int v831 = v1345;
                              if (*(unsigned char *)(v821 + 16) == 54)
                              {
                                v832 = (llvm::Value *)v1376.__r_.__value_.__r.__words[0];
                                v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v1372;
                                v1372 = v832;
                                v1345 = v1344[0];
                                v1344[0] = v831;
                                v833 = v830;
                              }
                              else
                              {
                                v833 = v1345;
                                int v831 = v1344[0];
                              }
                              uint64_t v1198 = v819;
                              *(_DWORD *)&v1351[8] = 64;
                              *(void *)v1351 = v819;
                              *(void *)&v1351[16] = v833;
                              uint64_t v1199 = *((void *)v831 + 1);
                              if (!v1199) {
                                goto LABEL_2307;
                              }
                              uint64_t v1200 = *(void *)(v1199 + 8);
                              if (v1200) {
                                goto LABEL_2307;
                              }
                              int v1220 = *((unsigned __int8 *)v831 + 16);
                              if (v1220 != 43)
                              {
                                if (v1220 == 5) {
                                  LOBYTE(v1200) = *((_WORD *)v831 + 9) == 15
                                }
                                               && sub_1CBF531E4((llvm::APInt *)v1351, *((llvm::Constant **)v831 - 4 * (*((_DWORD *)v831 + 5) & 0x7FFFFFF)))&& *(void *)&v1351[16] == ((void *)v831- 4 * (*((_DWORD *)v831 + 5) & 0x7FFFFFF))[4];
                                char v1201 = (v1220 == 5) & v1200;
                                goto LABEL_2308;
                              }
                              if (sub_1CBF53154((llvm::APInt *)v1351, *((unsigned __int8 **)v831 - 8))
                                && *(void *)&v1351[16] == *((void *)v831 - 4))
                              {
                                char v1201 = 1;
                              }
                              else
                              {
LABEL_2307:
                                char v1201 = 0;
                              }
LABEL_2308:
                              if (*(_DWORD *)&v1351[8] >= 0x41u && *(void *)v1351) {
                                MEMORY[0x1D25D9CB0](*(void *)v1351, 0x1000C8000313F17);
                              }
                              v1202 = v1345;
                              if (v1201)
                              {
                                v1203 = v1345;
LABEL_2321:
                                v1207 = *v1331;
                                if ((v1202 != v1203 || v1207 == (uint64_t **)v1376.__r_.__value_.__l.__data_)
                                  && (v1202 == v1203 || v1207 == (uint64_t **)v1372))
                                {
                                  v1208 = *v1333;
                                  LODWORD(v1348) = 0;
                                  *(void *)v1351 = &v1348;
                                  *(void *)&v1351[8] = v1202;
                                  uint64_t v1209 = *((void *)v1208 + 1);
                                  if (v1209)
                                  {
                                    if (!*(void *)(v1209 + 8)
                                      && sub_1CD456978((uint64_t)v1351, (uint64_t)v1208)
                                      && v1348 == 32)
                                    {
                                      if ((llvm::Value *)v1376.__r_.__value_.__l.__data_ != v1372)
                                      {
                                        if (v1202 == v1203)
                                        {
                                          if ((sub_1CC16A22C((uint64_t ***)v1372, 0, 0, 0, 0, 1) & 1) == 0)
                                          {
                                            *(_WORD *)&v1351[32] = 257;
                                            v1372 = sub_1CD68A854((uint64_t *)v627, v1372, (uint64_t)v1351);
                                          }
                                        }
                                        else if ((sub_1CC16A22C((uint64_t ***)v1376.__r_.__value_.__l.__data_, 0, 0, 0, 0, 1) & 1) == 0)
                                        {
                                          *(_WORD *)&v1351[32] = 257;
                                          v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CD68A854((uint64_t *)v627, (llvm::Value *)v1376.__r_.__value_.__l.__data_, (uint64_t)v1351);
                                        }
                                      }
                                      if (v1202 == v1203) {
                                        int v1294 = 148;
                                      }
                                      else {
                                        int v1294 = 149;
                                      }
                                      v1295 = *(uint64_t ***)(*((void *)a2[5] + 7) + 40);
                                      *(void *)v1351 = *a2;
                                      uint64_t v1296 = llvm::Intrinsic::getDeclaration(v1295, v1294, (uint64_t)v1351, 1);
                                      uint64_t v1297 = (uint64_t)*a2;
                                      LOWORD(v1368) = 257;
                                      if (*(void *)v1202 != v1297)
                                      {
                                        if (*((unsigned __int8 *)v1202 + 16) <= 0x14u)
                                        {
                                          uint64_t v1301 = (*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(v627 + 72) + 224))(*(void *)(v627 + 72), 39, v1202, v1297);
                                          v1202 = (llvm::Value *)v1301;
                                          if (v1301)
                                          {
                                            if (*(unsigned __int8 *)(v1301 + 16) >= 0x1Cu)
                                            {
                                              (*(void (**)(void, uint64_t, int8x8_t *, void, void))(**(void **)(v627 + 80) + 16))(*(void *)(v627 + 80), v1301, &data, *(void *)(v627 + 48), *(void *)(v627 + 56));
                                              uint64_t v1309 = *(unsigned int *)(v627 + 8);
                                              if (v1309)
                                              {
                                                uint64_t v1310 = *(void *)v627;
                                                uint64_t v1311 = *(void *)v627 + 16 * v1309;
                                                do
                                                {
                                                  llvm::Instruction::setMetadata(v1202, *(_DWORD *)v1310, *(llvm::MDNode **)(v1310 + 8));
                                                  v1310 += 16;
                                                }
                                                while (v1310 != v1311);
                                              }
                                            }
                                          }
                                        }
                                        else
                                        {
                                          *(_WORD *)&v1351[32] = 257;
                                          v1202 = llvm::CastInst::Create(39, (uint64_t)v1202, v1297, (const char **)v1351, 0);
                                          (*(void (**)(void, llvm::Value *, int8x8_t *, void, void))(**(void **)(v627 + 80) + 16))(*(void *)(v627 + 80), v1202, &data, *(void *)(v627 + 48), *(void *)(v627 + 56));
                                          uint64_t v1298 = *(unsigned int *)(v627 + 8);
                                          if (v1298)
                                          {
                                            uint64_t v1299 = *(void *)v627;
                                            uint64_t v1300 = *(void *)v627 + 16 * v1298;
                                            do
                                            {
                                              llvm::Instruction::setMetadata(v1202, *(_DWORD *)v1299, *(llvm::MDNode **)(v1299 + 8));
                                              v1299 += 16;
                                            }
                                            while (v1299 != v1300);
                                          }
                                        }
                                      }
                                      if (v1296) {
                                        v1302 = *(uint64_t ***)(v1296 + 24);
                                      }
                                      else {
                                        v1302 = 0;
                                      }
                                      int8x8_t data = (int8x8_t)v1376.__r_.__value_.__l.__data_;
                                      *(void *)&long long v1366 = v1372;
                                      *((void *)&v1366 + 1) = v1202;
                                      *(_WORD *)&v1351[32] = 257;
                                      v1303 = (char *)operator new(0xD0uLL);
                                      uint64_t v1304 = 0;
                                      BitOrPointerCast = (uint64_t **)(v1303 + 128);
                                      *((_DWORD *)v1303 + 37) = *((_DWORD *)v1303 + 37) & 0x38000000 | 4;
                                      do
                                      {
                                        v1305 = &v1303[v1304];
                                        *(void *)v1305 = 0;
                                        *((void *)v1305 + 1) = 0;
                                        *((void *)v1305 + 2) = 0;
                                        *((void *)v1305 + 3) = BitOrPointerCast;
                                        v1304 += 32;
                                      }
                                      while (v1304 != 128);
                                      *((void *)v1303 + 16) = *v1302[2];
                                      *((void *)v1303 + 17) = 0;
                                      v1303[144] = 84;
                                      v1303[145] = 0;
                                      *((_WORD *)v1303 + 73) = 0;
                                      *((_DWORD *)v1303 + 37) = *((_DWORD *)v1303 + 37) & 0xC0000000 | 4;
                                      *(_OWORD *)(v1303 + 152) = 0u;
                                      *(_OWORD *)(v1303 + 168) = 0u;
                                      *((_DWORD *)v1303 + 46) = 0;
                                      *((void *)v1303 + 24) = 0;
                                      p_int8x8_t data = (std::string *)&data;
                                      v1068 = (uint64_t ***)(v1303 + 128);
                                      v1069 = v1302;
                                      v1070 = (uint64_t **)v1296;
                                      uint64_t v1071 = 3;
                                      goto LABEL_2016;
                                    }
                                  }
                                }
LABEL_1216:
                                uint64_t v633 = *(void *)(a1 + 24);
                                v634 = *(a2 - 12);
                                v635 = (unsigned __int8 *)*(a2 - 8);
                                v636 = (unsigned __int8 *)*(a2 - 4);
                                v637 = *a2;
                                v1347 = 0;
                                v1348 = 0;
                                v1345 = (llvm::Value *)&v1348;
                                v1346 = 0;
                                if (!sub_1CC04AFFC((uint64_t)&v1345, v635)
                                  || (v1344[0] = (llvm::APInt *)&v1347,
                                      v1344[1] = 0,
                                      !sub_1CC04AFFC((uint64_t)v1344, v636)))
                                {
LABEL_1284:
                                  uint64_t v669 = *(void *)(a1 + 72);
                                  uint64_t v1317 = *(void *)(a1 + 24);
                                  *(void *)v1351 = 1;
                                  *(int64x2_t *)&v1351[8] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                                  *(_OWORD *)&v1351[24] = *(_OWORD *)&v1351[8];
                                  *(void *)&v1351[40] = &v1353;
                                  uint64_t v1352 = 0x400000000;
                                  int8x8_t v670 = (int8x8_t)a2[5];
                                  int8x8_t data = v670;
                                  unsigned int v671 = (((unsigned __int32)v670.i32[0] >> 4) ^ ((unsigned __int32)v670.i32[0] >> 9)) & 3;
                                  int v672 = &v1351[8 * v671 + 8];
                                  uint64_t v673 = *v672;
                                  if (*(void *)&v670 == *v672)
                                  {
                                    unsigned int v674 = 0;
                                  }
                                  else
                                  {
                                    uint64_t v675 = 0;
                                    int v676 = 1;
                                    while (v673 != -4096)
                                    {
                                      unsigned int v674 = 0;
                                      if (v675) {
                                        BOOL v677 = 0;
                                      }
                                      else {
                                        BOOL v677 = v673 == -8192;
                                      }
                                      if (v677) {
                                        uint64_t v675 = v672;
                                      }
                                      char v678 = v671 + v676++;
                                      unsigned int v671 = v678 & 3;
                                      int v672 = &v1351[8 * v671 + 8];
                                      uint64_t v673 = *v672;
                                      if (*(void *)&v670 == *v672) {
                                        goto LABEL_1300;
                                      }
                                    }
                                    if (v675) {
                                      int v679 = v675;
                                    }
                                    else {
                                      int v679 = v672;
                                    }
                                    v680 = (int8x8_t *)sub_1CC875030((uint64_t)v1351, (uint64_t)&data, &data, v679);
                                    int8x8_t *v680 = data;
                                    if (v1352 >= HIDWORD(v1352)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *(int8x8_t *)(*(void *)&v1351[40] + 8 * v1352) = data;
                                    unsigned int v674 = v1352 + 1;
                                    LODWORD(v1352) = v1352 + 1;
                                  }
LABEL_1300:
                                  int v681 = *((_DWORD *)a2 + 5);
                                  if ((v681 & 0x40000000) != 0)
                                  {
                                    unint64_t v683 = (int8x8_t **)*(a2 - 1);
                                    uint64_t v682 = v681 & 0x7FFFFFF;
                                  }
                                  else
                                  {
                                    uint64_t v682 = v681 & 0x7FFFFFF;
                                    unint64_t v683 = (int8x8_t **)&a2[-4 * v682];
                                  }
                                  if (v682)
                                  {
                                    unsigned int v684 = &v683[4 * v682];
                                    do
                                    {
                                      if (*v683) {
                                        BOOL v685 = (*v683)[2].u8[0] >= 0x1Cu;
                                      }
                                      else {
                                        BOOL v685 = 0;
                                      }
                                      if (v685)
                                      {
                                        int8x8_t v686 = (*v683)[5];
                                        int8x8_t data = v686;
                                        if (v1351[0])
                                        {
                                          int v687 = 4;
                                          uint64_t v688 = &v1351[8];
                                        }
                                        else
                                        {
                                          int v687 = *(_DWORD *)&v1351[16];
                                          if (!*(_DWORD *)&v1351[16])
                                          {
                                            unsigned int v697 = 0;
LABEL_1325:
                                            uint64_t v698 = (int8x8_t *)sub_1CC875030((uint64_t)v1351, (uint64_t)&data, &data, v697);
                                            *uint64_t v698 = data;
                                            if (v1352 >= (unint64_t)HIDWORD(v1352)) {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                            }
                                            *(int8x8_t *)(*(void *)&v1351[40] + 8 * v1352) = data;
                                            unsigned int v674 = v1352 + 1;
                                            LODWORD(v1352) = v1352 + 1;
                                            goto LABEL_1327;
                                          }
                                          uint64_t v688 = *(unsigned char **)&v1351[8];
                                        }
                                        int v689 = v687 - 1;
                                        unsigned int v690 = v689 & (((unsigned __int32)v686.i32[0] >> 4) ^ ((unsigned __int32)v686.i32[0] >> 9));
                                        v691 = &v688[8 * v690];
                                        uint64_t v692 = *v691;
                                        if (*(void *)&v686 != *v691)
                                        {
                                          int v693 = 0;
                                          int v694 = 1;
                                          while (v692 != -4096)
                                          {
                                            if (v693) {
                                              BOOL v695 = 0;
                                            }
                                            else {
                                              BOOL v695 = v692 == -8192;
                                            }
                                            if (v695) {
                                              int v693 = v691;
                                            }
                                            unsigned int v696 = v690 + v694++;
                                            unsigned int v690 = v696 & v689;
                                            v691 = &v688[8 * v690];
                                            uint64_t v692 = *v691;
                                            if (*(void *)&v686 == *v691) {
                                              goto LABEL_1327;
                                            }
                                          }
                                          if (v693) {
                                            unsigned int v697 = v693;
                                          }
                                          else {
                                            unsigned int v697 = v691;
                                          }
                                          goto LABEL_1325;
                                        }
                                      }
LABEL_1327:
                                      v683 += 4;
                                    }
                                    while (v683 != v684);
                                  }
                                  unint64_t v699 = *(llvm::APInt ****)&v1351[40];
                                  if (!v674)
                                  {
                                    int v285 = 0;
                                    goto LABEL_1555;
                                  }
                                  uint64_t v700 = *(void *)&v1351[40] + 8 * v674;
                                  uint64_t v1325 = v700;
                                  while (1)
                                  {
                                    uint64_t v701 = (llvm::Value *)*v699;
                                    uint64_t v702 = *(void *)(v669 + 24);
                                    uint64_t v703 = *(unsigned int *)(v669 + 40);
                                    if (v703)
                                    {
                                      LODWORD(v704) = ((v701 >> 4) ^ (v701 >> 9)) & (v703 - 1);
                                      v705 = (llvm::Value **)(v702 + 16 * v704);
                                      v706 = *v705;
                                      if (v701 == *v705) {
                                        goto LABEL_1342;
                                      }
                                      int v707 = 1;
                                      while (v706 != (llvm::Value *)-4096)
                                      {
                                        int v708 = v704 + v707++;
                                        uint64_t v704 = v708 & (v703 - 1);
                                        v706 = *(llvm::Value **)(v702 + 16 * v704);
                                        if (v701 == v706)
                                        {
                                          v705 = (llvm::Value **)(v702 + 16 * v704);
                                          goto LABEL_1342;
                                        }
                                      }
                                    }
                                    v705 = (llvm::Value **)(v702 + 16 * v703);
LABEL_1342:
                                    uint64_t v709 = (const llvm::BasicBlock **)*((void *)v705[1] + 1);
                                    if (!v709) {
                                      goto LABEL_1469;
                                    }
                                    int v710 = *v709;
                                    int v711 = *v1333;
                                    v1347 = 0;
                                    v1348 = 0;
                                    int v712 = (void *)*((void *)v710 + 5);
                                    if (v712 == (void *)((char *)v710 + 40))
                                    {
                                      unsigned int v717 = 0;
                                    }
                                    else
                                    {
                                      int64_t v713 = v712 - 3;
                                      if (!v712) {
                                        int64_t v713 = 0;
                                      }
                                      int v714 = *((unsigned __int8 *)v713 + 16);
                                      if ((v714 - 40) >= 0xFFFFFFF5) {
                                        int v715 = v713;
                                      }
                                      else {
                                        int v715 = 0;
                                      }
                                      if (v712)
                                      {
                                        if (*((unsigned char *)v715 + 16) == 30
                                          && (v714 - 40) >= 0xFFFFFFF5
                                          && (*((_DWORD *)v715 + 5) & 0x7FFFFFF) == 3
                                          && v711 == (unsigned __int8 *)*(v715 - 12))
                                        {
                                          uint64_t v729 = (llvm::Value *)*(v715 - 4);
                                          if (v729)
                                          {
                                            v1348 = (llvm::Value *)*(v715 - 4);
                                            int v730 = (llvm::Value *)*(v715 - 8);
                                            if (v730)
                                            {
                                              v1347 = v730;
                                              unint64_t v731 = (uint64_t *)v1331;
                                              goto LABEL_1384;
                                            }
                                          }
                                        }
                                      }
                                      if ((v714 - 29) >= 0xB) {
                                        unsigned int v717 = 0;
                                      }
                                      else {
                                        unsigned int v717 = v713;
                                      }
                                    }
                                    int8x8_t data = (int8x8_t)v711;
                                    *((void *)&v1366 + 1) = &v1348;
                                    uint64_t v1367 = (uint64_t)&v1347;
                                    if (!v717
                                      || *((unsigned char *)v717 + 16) != 30
                                      || (*((_DWORD *)v717 + 5) & 0x7FFFFFF) != 3)
                                    {
                                      goto LABEL_1469;
                                    }
                                    uint64_t v718 = *(v717 - 12);
                                    int v719 = *(unsigned __int8 *)(v718 + 16);
                                    if (v719 == 5)
                                    {
                                      if (*(_WORD *)(v718 + 18) != 30) {
                                        goto LABEL_1469;
                                      }
                                      uint64_t v722 = *(_DWORD *)(v718 + 20) & 0x7FFFFFF;
                                      uint64_t v723 = v718 - 32 * v722;
                                      if (v711 != *(unsigned __int8 **)v723) {
                                        goto LABEL_1376;
                                      }
                                      char v724 = sub_1CBF68974((uint64_t)&v1366, *(llvm::Constant **)(v723 + 32));
                                      uint64_t v700 = v1325;
                                      if ((v724 & 1) == 0)
                                      {
                                        int v711 = (unsigned __int8 *)data;
                                        uint64_t v722 = *(_DWORD *)(v718 + 20) & 0x7FFFFFF;
LABEL_1376:
                                        uint64_t v725 = v718 - 32 * v722;
                                        if (v711 != *(unsigned __int8 **)(v725 + 32)) {
                                          goto LABEL_1469;
                                        }
                                        int v726 = sub_1CBF68974((uint64_t)&v1366, *(llvm::Constant **)v725);
                                        uint64_t v700 = v1325;
                                        if (!v726) {
                                          goto LABEL_1469;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      if (v719 != 58) {
                                        goto LABEL_1469;
                                      }
                                      if (v711 != *(unsigned __int8 **)(v718 - 64)) {
                                        goto LABEL_1369;
                                      }
                                      char v720 = sub_1CBF687D0((uint64_t)&v1366, *(llvm::Constant **)(v718 - 32));
                                      uint64_t v700 = v1325;
                                      if ((v720 & 1) == 0)
                                      {
                                        int v711 = (unsigned __int8 *)data;
LABEL_1369:
                                        if (v711 != *(unsigned __int8 **)(v718 - 32)) {
                                          goto LABEL_1469;
                                        }
                                        char v721 = sub_1CBF687D0((uint64_t)&v1366, *(llvm::Constant **)(v718 - 64));
                                        uint64_t v700 = v1325;
                                        if ((v721 & 1) == 0) {
                                          goto LABEL_1469;
                                        }
                                      }
                                    }
                                    uint64_t v727 = *(v717 - 4);
                                    if (!v727) {
                                      goto LABEL_1469;
                                    }
                                    **((void **)&v1366 + 1) = v727;
                                    uint64_t v728 = *(v717 - 8);
                                    if (!v728) {
                                      goto LABEL_1469;
                                    }
                                    *(void *)uint64_t v1367 = v728;
                                    int v730 = v1347;
                                    uint64_t v729 = v1348;
                                    unint64_t v731 = (uint64_t *)v1330;
LABEL_1384:
                                    if (v729 == v730) {
                                      goto LABEL_1469;
                                    }
                                    uint64_t v732 = *v731;
                                    v1372 = v710;
                                    *(void *)&long long v1373 = v729;
                                    v1345 = v710;
                                    v1346 = v730;
                                    memset(&v1376, 0, 20);
                                    uint64_t v733 = *((void *)v701 + 1);
                                    if (!v733) {
                                      goto LABEL_1395;
                                    }
                                    while (1)
                                    {
                                      uint64_t v734 = *(void *)(v733 + 24);
                                      unsigned int v735 = *(unsigned __int8 *)(v734 + 16);
                                      BOOL v736 = v734 && v735 >= 0x1C;
                                      if (v736 && v735 - 29 <= 0xA) {
                                        break;
                                      }
                                      uint64_t v733 = *(void *)(v733 + 8);
                                      if (!v733) {
                                        goto LABEL_1395;
                                      }
                                    }
                                    uint64_t v1315 = v732;
LABEL_1471:
                                    int v784 = *(const llvm::BasicBlock **)(v734 + 40);
                                    int8x8_t data = (int8x8_t)v784;
                                    if (v710 != v784 || v729 != v701) {
                                      llvm::DominatorTree::dominates((llvm::DominatorTree *)v669, (const llvm::BasicBlockEdge *)&v1372, v784);
                                    }
                                    uint64_t v786 = v732;
                                    if (v732)
                                    {
                                      uint64_t v786 = v732;
                                      if (*(unsigned char *)(v732 + 16) == 83)
                                      {
                                        uint64_t v786 = v732;
                                        if (*(llvm::Value **)(v732 + 40) == v701) {
                                          uint64_t v786 = sub_1CBF73380(v1315, (uint64_t)v710);
                                        }
                                      }
                                    }
                                    int v787 = v1376.__r_.__value_.__r.__words[2];
                                    if (LODWORD(v1376.__r_.__value_.__r.__words[2]))
                                    {
                                      std::string::size_type v788 = v1376.__r_.__value_.__r.__words[0];
                                      int8x8_t v789 = data;
                                      unsigned int v790 = (((unsigned __int32)v789.i32[0] >> 4) ^ ((unsigned __int32)v789.i32[0] >> 9)) & (LODWORD(v1376.__r_.__value_.__r.__words[2]) - 1);
                                      unint64_t v791 = (uint64_t *)(v1376.__r_.__value_.__r.__words[0] + 16 * v790);
                                      int8x8_t v792 = (int8x8_t)*v791;
                                      if (*(void *)&data == *v791)
                                      {
                                        v791[1] = v786;
                                        goto LABEL_1497;
                                      }
                                      unint64_t v793 = 0;
                                      int v794 = 1;
                                      while (*(void *)&v792 != -4096)
                                      {
                                        if (v793) {
                                          BOOL v795 = 0;
                                        }
                                        else {
                                          BOOL v795 = *(void *)&v792 == -8192;
                                        }
                                        if (v795) {
                                          unint64_t v793 = v791;
                                        }
                                        unsigned int v796 = v790 + v794++;
                                        unsigned int v790 = v796 & (LODWORD(v1376.__r_.__value_.__r.__words[2]) - 1);
                                        unint64_t v791 = (uint64_t *)(v1376.__r_.__value_.__r.__words[0] + 16 * v790);
                                        int8x8_t v792 = (int8x8_t)*v791;
                                        if (*(void *)&data == *v791) {
                                          goto LABEL_1495;
                                        }
                                      }
                                      if (v793) {
                                        int v797 = v793;
                                      }
                                      else {
                                        int v797 = v791;
                                      }
                                    }
                                    else
                                    {
                                      int v797 = 0;
                                    }
                                    unint64_t v791 = sub_1CC0A3E2C((uint64_t)&v1376, (uint64_t)&data, (uint64_t *)&data, v797);
                                    *unint64_t v791 = (uint64_t)data;
                                    v791[1] = 0;
                                    std::string::size_type v788 = v1376.__r_.__value_.__r.__words[0];
                                    int v787 = v1376.__r_.__value_.__r.__words[2];
LABEL_1495:
                                    v791[1] = v786;
                                    if (!v787)
                                    {
                                      int64_t v806 = 0;
                                      goto LABEL_1510;
                                    }
                                    int8x8_t v789 = data;
LABEL_1497:
                                    int v798 = v787 - 1;
                                    unsigned int v799 = (((unsigned __int32)v789.i32[0] >> 4) ^ ((unsigned __int32)v789.i32[0] >> 9)) & v798;
                                    int v800 = (uint64_t *)(v788 + 16 * v799);
                                    int8x8_t v801 = (int8x8_t)*v800;
                                    if (*(void *)&v789 == *v800) {
                                      goto LABEL_1511;
                                    }
                                    uint64_t v802 = 0;
                                    int v803 = 1;
                                    while (*(void *)&v801 != -4096)
                                    {
                                      if (v802) {
                                        BOOL v804 = 0;
                                      }
                                      else {
                                        BOOL v804 = *(void *)&v801 == -8192;
                                      }
                                      if (v804) {
                                        uint64_t v802 = v800;
                                      }
                                      unsigned int v805 = v799 + v803++;
                                      unsigned int v799 = v805 & v798;
                                      int v800 = (uint64_t *)(v788 + 16 * v799);
                                      int8x8_t v801 = (int8x8_t)*v800;
                                      if (*(void *)&v789 == *v800) {
                                        goto LABEL_1511;
                                      }
                                    }
                                    if (v802) {
                                      int64_t v806 = v802;
                                    }
                                    else {
                                      int64_t v806 = v800;
                                    }
LABEL_1510:
                                    int v800 = sub_1CC0A3E2C((uint64_t)&v1376, (uint64_t)&data, (uint64_t *)&data, v806);
                                    *int v800 = (uint64_t)data;
                                    v800[1] = 0;
LABEL_1511:
                                    unint64_t v807 = (unsigned __int8 *)v800[1];
                                    if (v807) {
                                      BOOL v808 = v807[16] >= 0x1Cu;
                                    }
                                    else {
                                      BOOL v808 = 0;
                                    }
                                    if (!v808
                                      || ((uint64_t v809 = *(void *)(*(void *)&data + 40), v809 == *(void *)&data + 40)
                                        ? (v811 = 0)
                                        : (v809 ? (uint64_t v810 = (unsigned __int8 *)(v809 - 24)) : (uint64_t v810 = 0),
                                           v810[16] - 29 >= 0xB
                                         ? (v811 = 0)
                                         : (v811 = (const llvm::Instruction *)v810)),
                                          llvm::DominatorTree::dominates((llvm::DominatorTree *)v669, (const llvm::Value *)v807, v811)))
                                    {
                                      uint64_t v732 = v1315;
                                      while (1)
                                      {
                                        uint64_t v733 = *(void *)(v733 + 8);
                                        if (!v733) {
                                          break;
                                        }
                                        uint64_t v734 = *(void *)(v733 + 24);
                                        unsigned int v812 = *(unsigned __int8 *)(v734 + 16);
                                        if (v734) {
                                          BOOL v813 = v812 >= 0x1C;
                                        }
                                        else {
                                          BOOL v813 = 0;
                                        }
                                        if (v813 && v812 - 29 <= 0xA)
                                        {
                                          int v710 = v1372;
                                          uint64_t v729 = (llvm::Value *)v1373;
                                          goto LABEL_1471;
                                        }
                                      }
LABEL_1395:
                                      uint64_t v738 = 0;
                                      uint64_t v739 = *((void *)v701 + 6);
                                      if (v739) {
                                        uint64_t v740 = v739 - 24;
                                      }
                                      else {
                                        uint64_t v740 = 0;
                                      }
                                      uint64_t v741 = v1317;
                                      *(void *)(v1317 + 48) = *(void *)(v740 + 40);
                                      *(void *)(v1317 + 56) = v740 + 24;
                                      int v742 = *(llvm::APInt **)(v740 + 48);
                                      v1344[0] = v742;
                                      if (v742)
                                      {
                                        llvm::MetadataTracking::track((uint64_t)v1344, (unsigned __int8 *)v742, 2);
                                        uint64_t v738 = v1344[0];
                                      }
                                      sub_1CB8461A4(v1317, 0, (uint64_t)v738);
                                      if (v1344[0])
                                      {
                                        int v815 = *(unsigned __int8 *)v1344[0];
                                        if ((v815 - 4) > 0x1E)
                                        {
                                          if ((v815 - 3) >= 0xFFFFFFFE) {
                                            v818 = v1344[0];
                                          }
                                          else {
                                            v818 = 0;
                                          }
                                          if ((v815 - 3) < 0xFFFFFFFE)
                                          {
                                            uint64_t v741 = v1317;
                                            if (v815 == 3) {
                                              *((void *)v1344[0] + 1) = 0;
                                            }
                                            goto LABEL_1401;
                                          }
                                          unint64_t v817 = (unint64_t)v818 + 8;
                                        }
                                        else
                                        {
                                          if ((*((unsigned char *)v1344[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1344[0] + 3)) {
                                            goto LABEL_1401;
                                          }
                                          uint64_t v816 = *((void *)v1344[0] + 2);
                                          if ((v816 & 4) == 0) {
                                            goto LABEL_1401;
                                          }
                                          unint64_t v817 = v816 & 0xFFFFFFFFFFFFFFF8;
                                          if (!v817) {
                                            goto LABEL_1401;
                                          }
                                        }
                                        int8x8_t data = (int8x8_t)v1344;
                                        sub_1CC5FA668(v817 + 16, &data);
                                        uint64_t v741 = v1317;
                                      }
LABEL_1401:
                                      uint64_t v743 = (uint64_t)*a2;
                                      LOWORD(v1368) = 257;
                                      int v285 = sub_1CB93113C(v741, v743, v1376.__r_.__value_.__r.__words[1], (uint64_t)&data);
                                      while (1)
                                      {
                                        uint64_t v701 = (llvm::Value *)*((void *)v701 + 1);
                                        if (!v701) {
                                          break;
                                        }
                                        uint64_t v744 = (int8x8_t *)*((void *)v701 + 3);
                                        unsigned int v745 = v744[2].u8[0];
                                        if (v744) {
                                          BOOL v746 = v745 >= 0x1C;
                                        }
                                        else {
                                          BOOL v746 = 0;
                                        }
                                        if (v746 && v745 - 29 < 0xB)
                                        {
LABEL_1410:
                                          int8x8_t v748 = v744[5];
                                          int8x8_t data = v748;
                                          if (LODWORD(v1376.__r_.__value_.__r.__words[2]))
                                          {
                                            unsigned int v749 = (((unsigned __int32)v748.i32[0] >> 4) ^ ((unsigned __int32)v748.i32[0] >> 9)) & (LODWORD(v1376.__r_.__value_.__r.__words[2]) - 1);
                                            uint64_t v750 = (uint64_t *)(v1376.__r_.__value_.__r.__words[0] + 16 * v749);
                                            int8x8_t v751 = (int8x8_t)*v750;
                                            if (*(void *)&v748 != *v750)
                                            {
                                              unint64_t v752 = 0;
                                              int v753 = 1;
                                              while (*(void *)&v751 != -4096)
                                              {
                                                if (v752) {
                                                  BOOL v754 = 0;
                                                }
                                                else {
                                                  BOOL v754 = *(void *)&v751 == -8192;
                                                }
                                                if (v754) {
                                                  unint64_t v752 = v750;
                                                }
                                                unsigned int v755 = v749 + v753++;
                                                unsigned int v749 = v755 & (LODWORD(v1376.__r_.__value_.__r.__words[2]) - 1);
                                                uint64_t v750 = (uint64_t *)(v1376.__r_.__value_.__r.__words[0] + 16 * v749);
                                                int8x8_t v751 = (int8x8_t)*v750;
                                                if (*(void *)&v748 == *v750) {
                                                  goto LABEL_1425;
                                                }
                                              }
                                              if (v752) {
                                                uint64_t v756 = v752;
                                              }
                                              else {
                                                uint64_t v756 = v750;
                                              }
LABEL_1424:
                                              uint64_t v750 = sub_1CC0A3E2C((uint64_t)&v1376, (uint64_t)&data, (uint64_t *)&data, v756);
                                              *uint64_t v750 = (uint64_t)data;
                                              v750[1] = 0;
                                              int8x8_t v748 = data;
                                            }
LABEL_1425:
                                            uint64_t v757 = v750[1];
                                            int v758 = *((_DWORD *)v285 + 5);
                                            uint64_t v759 = v758 & 0x7FFFFFF;
                                            if ((v758 & 0x7FFFFFF) == *((_DWORD *)v285 + 15))
                                            {
                                              LODWORD(v775) = v759 + (v759 >> 1);
                                              if (v775 <= 2) {
                                                uint64_t v775 = 2;
                                              }
                                              else {
                                                uint64_t v775 = v775;
                                              }
                                              int8x8_t v1313 = v748;
                                              uint64_t v1314 = v775;
                                              *((_DWORD *)v285 + 15) = v775;
                                              if ((v758 & 0x40000000) != 0) {
                                                v776 = (uint64_t *)*((void *)v285 - 1);
                                              }
                                              else {
                                                v776 = (uint64_t *)((char *)v285 - 32 * v759);
                                              }
                                              __p = v776;
                                              v777 = operator new(40 * v775);
                                              *((void *)v285 - 1) = v777;
                                              int v778 = v777;
                                              do
                                              {
                                                *int v778 = 0;
                                                v778[1] = 0;
                                                v778[2] = 0;
                                                v778[3] = v285;
                                                v778 += 4;
                                              }
                                              while (v778 != &v777[4 * v1314]);
                                              int v779 = *((_DWORD *)v285 + 5);
                                              if ((v779 & 0x40000000) != 0) {
                                                uint64_t v780 = (uint64_t)v777;
                                              }
                                              else {
                                                uint64_t v780 = (uint64_t)v285 - 32 * (v779 & 0x7FFFFFF);
                                              }
                                              uint64_t v1312 = v780;
                                              sub_1CC5E4108((uint64_t)v1344, __p, &__p[4 * v759], v780);
                                              if (v759)
                                              {
                                                memmove((void *)(v1312 + 32 * v1314), &__p[4 * v759], 8 * v759);
                                                uint64_t v781 = 4 * v759;
                                                do
                                                {
                                                  int64_t v782 = &__p[v781];
                                                  if (__p[v781 - 4])
                                                  {
                                                    *(void *)*(v782 - 2) = *(v782 - 3);
                                                    uint64_t v783 = *(v782 - 3);
                                                    if (v783) {
                                                      *(void *)(v783 + 16) = *(v782 - 2);
                                                    }
                                                  }
                                                  v781 -= 4;
                                                }
                                                while (v781 * 8);
                                              }
                                              operator delete(__p);
                                              int v758 = *((_DWORD *)v285 + 5);
                                              int8x8_t v748 = v1313;
                                            }
                                            uint64_t v760 = (v758 + 1) & 0x7FFFFFF;
                                            *((_DWORD *)v285 + 5) = v758 & 0xF8000000 | (v758 + 1) & 0x7FFFFFF;
                                            if ((v758 & 0x40000000) != 0) {
                                              int v761 = (_DWORD *)*((void *)v285 - 1);
                                            }
                                            else {
                                              int v761 = (_DWORD *)((char *)v285 - 32 * v760);
                                            }
                                            uint64_t v762 = (v760 - 1);
                                            v763 = &v761[8 * v762];
                                            if (*(void *)v763)
                                            {
                                              **((void **)v763 + 2) = *((void *)v763 + 1);
                                              uint64_t v774 = *((void *)v763 + 1);
                                              if (v774) {
                                                *(void *)(v774 + 16) = *((void *)v763 + 2);
                                              }
                                            }
                                            *(void *)v763 = v757;
                                            if (v757)
                                            {
                                              uint64_t v766 = *(void *)(v757 + 8);
                                              v765 = (void *)(v757 + 8);
                                              uint64_t v764 = v766;
                                              v767 = &v761[8 * v762];
                                              *((void *)v767 + 1) = v766;
                                              if (v766) {
                                                *(void *)(v764 + 16) = v767 + 2;
                                              }
                                              *((void *)v767 + 2) = v765;
                                              void *v765 = v763;
                                            }
                                            int v768 = *((_DWORD *)v285 + 5);
                                            uint64_t v769 = v768 & 0x7FFFFFF;
                                            if ((v768 & 0x40000000) != 0) {
                                              v770 = (_DWORD *)*((void *)v285 - 1);
                                            }
                                            else {
                                              v770 = (_DWORD *)((char *)v285 - 32 * v769);
                                            }
                                            *(int8x8_t *)&v770[8 * *((unsigned int *)v285 + 15)
                                                             + 2 * (v769 - 1)] = v748;
                                            while (1)
                                            {
                                              uint64_t v701 = (llvm::Value *)*((void *)v701 + 1);
                                              if (!v701) {
                                                goto LABEL_1468;
                                              }
                                              uint64_t v744 = (int8x8_t *)*((void *)v701 + 3);
                                              unsigned int v771 = v744[2].u8[0];
                                              if (v744) {
                                                BOOL v772 = v771 >= 0x1C;
                                              }
                                              else {
                                                BOOL v772 = 0;
                                              }
                                              if (v772 && v771 - 29 < 0xB) {
                                                goto LABEL_1410;
                                              }
                                            }
                                          }
                                          uint64_t v756 = 0;
                                          goto LABEL_1424;
                                        }
                                      }
LABEL_1468:
                                      llvm::Value::takeName((int32x2_t ****)v285, (llvm::Value *)a2);
                                      MEMORY[0x1D25D9CD0](v1376.__r_.__value_.__r.__words[0], 8);
                                      uint64_t v700 = v1325;
                                      if (v285) {
                                        goto LABEL_1553;
                                      }
                                      goto LABEL_1469;
                                    }
                                    MEMORY[0x1D25D9CD0](v1376.__r_.__value_.__r.__words[0], 8);
                                    uint64_t v700 = v1325;
LABEL_1469:
                                    if (++v699 == (llvm::APInt ***)v700)
                                    {
                                      int v285 = 0;
LABEL_1553:
                                      unint64_t v699 = *(llvm::APInt ****)&v1351[40];
LABEL_1555:
                                      if (v699 != &v1353) {
                                        free(v699);
                                      }
                                      if (v1351[0])
                                      {
                                        if (v285) {
                                          goto LABEL_1559;
                                        }
LABEL_1587:
                                        v834 = *v1333;
                                        if (!*v1333) {
                                          goto LABEL_1596;
                                        }
                                        if (v834[16] != 95) {
                                          goto LABEL_1596;
                                        }
                                        uint64_t v835 = *((void *)v834 + 1);
                                        if (!v835) {
                                          goto LABEL_1596;
                                        }
                                        if (*(void *)(v835 + 8)) {
                                          goto LABEL_1596;
                                        }
                                        uint64_t v836 = *((void *)v834 - 4);
                                        if (!v836 || *(unsigned char *)(v836 + 16) != 81) {
                                          goto LABEL_1596;
                                        }
                                        v837 = *v1330;
                                        unint64_t v838 = *(uint64_t ***)(v836 - 64);
                                        unsigned int v839 = *(uint64_t ***)(v836 - 32);
                                        if (*v1331 != v838 || v837 != v839)
                                        {
                                          if (*v1331 == v839 && v837 == v838)
                                          {
                                            int v1106 = *(_WORD *)(v836 + 18) & 0x3F;
                                            if (((1 << v1106) & 0x3FC00003C3CLL) == 0) {
                                              goto LABEL_2091;
                                            }
                                          }
                                          goto LABEL_1596;
                                        }
                                        int v1106 = *(_WORD *)(v836 + 18) & 0x3F;
LABEL_2091:
                                        if ((v1106 & 0x3E) != 0x20
                                          || (v1106 != 32
                                            ? (unsigned int v15 = (llvm::Instruction *)*v1331)
                                            : (unsigned int v15 = (llvm::Instruction *)*v1330),
                                              !v15))
                                        {
LABEL_1596:
                                          unsigned int v840 = *((unsigned __int8 *)v1335 + 16);
                                          if (v840 > 0x14) {
                                            goto LABEL_1610;
                                          }
                                          if (v840 == 16)
                                          {
                                            int v841 = v1335;
                                            uint64_t v842 = *((unsigned int *)v1335 + 8);
                                            if (v842 < 0x41)
                                            {
                                              if (*((void *)v1335 + 3)) {
                                                goto LABEL_1600;
                                              }
LABEL_1601:
                                              LODWORD(v1376.__r_.__value_.__l.__data_) = 185;
                                              *(std::string::size_type *)((char *)v1376.__r_.__value_.__r.__words + 4) = 0;
                                              *(void *)v1351 = 185;
                                              *(_DWORD *)&v1351[8] = 0;
                                              *(void *)&v1351[12] = 1;
                                              *(void *)&v1351[24] = 2;
                                              *(void *)&v1351[32] = v1337;
                                              *(void *)&v1351[40] = 3;
                                              if (sub_1CCAAA8D8((uint64_t)v1351, (uint64_t)v4)) {
                                                goto LABEL_1603;
                                              }
                                              LODWORD(v1376.__r_.__value_.__l.__data_) = 184;
                                              *(std::string::size_type *)((char *)v1376.__r_.__value_.__r.__words + 4) = 0;
                                              int8x8_t data = (int8x8_t)184;
                                              LODWORD(v1366) = 0;
                                              *(void *)((char *)&v1366 + 4) = 1;
                                              uint64_t v1367 = 2;
                                              v1368 = (llvm::Value **)v1337;
                                              uint64_t v1369 = 3;
                                              if (sub_1CCAAA8D8((uint64_t)&data, (uint64_t)v4))
                                              {
LABEL_1603:
                                                unsigned int v843 = (char *)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF);
                                                v844 = (llvm **)(v843 + 96);
                                                if (*(unsigned __int8 *)(*((void *)v843 + 12) + 16)
                                                   - 11 <= 1)
                                                {
                                                  v845 = v843 + 104;
                                                  **((void **)v843 + 14) = *((void *)v843 + 13);
                                                  uint64_t v846 = *((void *)v843 + 13);
                                                  if (v846) {
                                                    *(void *)(v846 + 16) = *((void *)v843 + 14);
                                                  }
                                                  llvm::Value *v844 = v1335;
                                                  uint64_t v847 = *((void *)v1335 + 1);
                                                  void *v845 = v847;
                                                  if (v847) {
                                                    *(void *)(v847 + 16) = v845;
                                                  }
                                                  *((void *)v843 + 14) = __na;
                                                  *__na = v844;
                                                }
                                                goto LABEL_1609;
                                              }
LABEL_1610:
                                              v1372 = 0;
                                              unsigned int v848 = *((unsigned __int8 *)v4 + 16);
                                              if (v848 > 0x14) {
                                                return 0;
                                              }
                                              if (v848 == 16)
                                              {
                                                uint64_t v849 = *((unsigned int *)v4 + 8);
                                                if (v849 < 0x41)
                                                {
                                                  if (*((void *)v4 + 3)) {
                                                    goto LABEL_1614;
                                                  }
LABEL_1615:
                                                  LODWORD(v1376.__r_.__value_.__l.__data_) = 185;
                                                  *(std::string::size_type *)((char *)v1376.__r_.__value_.__r.__words + 4) = 0;
                                                  *(void *)v1351 = 185;
                                                  *(_DWORD *)&v1351[8] = 0;
                                                  *(void *)&v1351[12] = 1;
                                                  *(void *)&v1351[24] = 2;
                                                  *(void *)&v1351[32] = &v1372;
                                                  *(void *)&v1351[40] = 3;
                                                  if (sub_1CCAAA970((uint64_t)v1351, (uint64_t)v1335)) {
                                                    goto LABEL_2626;
                                                  }
                                                  LODWORD(v1376.__r_.__value_.__l.__data_) = 184;
                                                  *(std::string::size_type *)((char *)v1376.__r_.__value_.__r.__words + 4) = 0;
                                                  int8x8_t data = (int8x8_t)184;
                                                  LODWORD(v1366) = 0;
                                                  *(void *)((char *)&v1366 + 4) = 1;
                                                  uint64_t v1367 = 2;
                                                  v1368 = &v1372;
                                                  uint64_t v1369 = 3;
                                                  if (sub_1CCAAA970((uint64_t)&data, (uint64_t)v1335))
                                                  {
LABEL_2626:
                                                    if (*(void *)v1337 == *(void *)v1372)
                                                    {
                                                      long long v852 = *((_OWORD *)v1327 + 2);
                                                      *(_OWORD *)&v1351[16] = *((_OWORD *)v1327 + 1);
                                                      *(_OWORD *)&v1351[32] = v852;
                                                      *(_OWORD *)v1351 = *(_OWORD *)v1327;
                                                      *(void *)&v1351[32] = a2;
                                                      long long v853 = sub_1CC02C2C8(v1337, v1372, (uint64_t)v1351, 3, v850, v851);
                                                      if (v853)
                                                      {
                                                        uint64_t v854 = v853;
                                                        unsigned int v855 = *((unsigned __int8 *)v853 + 16);
                                                        if (v855 < 0x15)
                                                        {
                                                          if (v855 == 16)
                                                          {
                                                            uint64_t v856 = *((unsigned int *)v853 + 8);
                                                            if (v856 < 0x41)
                                                            {
                                                              if (*((void *)v853 + 3)) {
                                                                goto LABEL_1628;
                                                              }
LABEL_1629:
                                                              v857 = (char *)v1335
                                                                   - 32 * (*((_DWORD *)v1335 + 5) & 0x7FFFFFF);
                                                              __int16 v858 = (llvm::Value **)(v857 + 96);
                                                              if (*(unsigned __int8 *)(*((void *)v857 + 12) + 16)
                                                                 - 11 <= 1)
                                                              {
                                                                uint64_t v859 = v857 + 104;
                                                                **((void **)v857 + 14) = *((void *)v857 + 13);
                                                                uint64_t v860 = *((void *)v857 + 13);
                                                                if (v860) {
                                                                  *(void *)(v860 + 16) = *((void *)v857 + 14);
                                                                }
                                                                *__int16 v858 = v4;
                                                                uint64_t v861 = *((void *)v4 + 1);
                                                                *uint64_t v859 = v861;
                                                                if (v861) {
                                                                  *(void *)(v861 + 16) = v859;
                                                                }
                                                                *((void *)v857 + 14) = v1320;
                                                                *(void *)v1320 = v858;
                                                              }
                                                              uint64_t v16 = a1;
                                                              uint64_t v17 = (llvm::ValueAsMetadata *)a2;
                                                              unsigned int v15 = v1335;
                                                              return (llvm::Value *)sub_1CC9D3C84(v16, v17, v15);
                                                            }
                                                            int v1282 = 0;
                                                            int64_t v1283 = (unint64_t)(v856 + 63) >> 6;
                                                            do
                                                            {
                                                              BOOL v378 = v1283-- < 1;
                                                              if (v378) {
                                                                break;
                                                              }
                                                              unint64_t v1284 = *(void *)(*((void *)v853 + 3)
                                                                                + 8 * v1283);
                                                              v1282 += __clz(v1284);
                                                            }
                                                            while (!v1284);
                                                            int v1285 = v856 | 0xFFFFFFC0;
                                                            if ((v856 & 0x3F) == 0) {
                                                              int v1285 = 0;
                                                            }
                                                            if (v1282 + v1285 == v856) {
                                                              goto LABEL_1629;
                                                            }
                                                          }
                                                          else if (v855 == 17)
                                                          {
                                                            if (sub_1CB844168((uint64_t)v853, 0.0)) {
                                                              goto LABEL_1629;
                                                            }
                                                          }
                                                          else if (v855 - 18 < 3 || v855 == 13)
                                                          {
                                                            goto LABEL_1629;
                                                          }
LABEL_1628:
                                                          if (sub_1CC03F414((uint64_t)v1351, v854)) {
                                                            goto LABEL_1629;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  return 0;
                                                }
                                                int v1229 = 0;
                                                int64_t v1230 = (unint64_t)(v849 + 63) >> 6;
                                                do
                                                {
                                                  BOOL v378 = v1230-- < 1;
                                                  if (v378) {
                                                    break;
                                                  }
                                                  unint64_t v1231 = *(void *)(*((void *)v4 + 3) + 8 * v1230);
                                                  v1229 += __clz(v1231);
                                                }
                                                while (!v1231);
                                                int v1232 = v849 | 0xFFFFFFC0;
                                                if ((v849 & 0x3F) == 0) {
                                                  int v1232 = 0;
                                                }
                                                if (v1229 + v1232 == v849) {
                                                  goto LABEL_1615;
                                                }
                                              }
                                              else if (v848 == 17)
                                              {
                                                if (sub_1CB844168((uint64_t)v4, 0.0)) {
                                                  goto LABEL_1615;
                                                }
                                              }
                                              else if (v848 - 18 < 3 || v848 == 13)
                                              {
                                                goto LABEL_1615;
                                              }
LABEL_1614:
                                              if (sub_1CC03F414((uint64_t)v1351, v4)) {
                                                goto LABEL_1615;
                                              }
                                              return 0;
                                            }
                                            int v1225 = 0;
                                            int64_t v1226 = (unint64_t)(v842 + 63) >> 6;
                                            do
                                            {
                                              BOOL v378 = v1226-- < 1;
                                              if (v378) {
                                                break;
                                              }
                                              unint64_t v1227 = *(void *)(*((void *)v1335 + 3) + 8 * v1226);
                                              v1225 += __clz(v1227);
                                            }
                                            while (!v1227);
                                            int v1228 = v842 | 0xFFFFFFC0;
                                            if ((v842 & 0x3F) == 0) {
                                              int v1228 = 0;
                                            }
                                            int v841 = v1335;
                                            if (v1225 + v1228 == v842) {
                                              goto LABEL_1601;
                                            }
                                          }
                                          else if (v840 == 17)
                                          {
                                            int v841 = v1335;
                                            if (sub_1CB844168((uint64_t)v1335, 0.0)) {
                                              goto LABEL_1601;
                                            }
                                          }
                                          else
                                          {
                                            int v841 = v1335;
                                            if (v840 - 18 < 3 || v840 == 13) {
                                              goto LABEL_1601;
                                            }
                                          }
LABEL_1600:
                                          if (sub_1CC03F414((uint64_t)v1351, v841)) {
                                            goto LABEL_1601;
                                          }
                                          goto LABEL_1610;
                                        }
LABEL_7:
                                        uint64_t v16 = a1;
                                        uint64_t v17 = (llvm::ValueAsMetadata *)a2;
                                        return (llvm::Value *)sub_1CC9D3C84(v16, v17, v15);
                                      }
                                      MEMORY[0x1D25D9CD0](*(void *)&v1351[8], 8);
                                      if (!v285) {
                                        goto LABEL_1587;
                                      }
LABEL_1559:
                                      uint64_t v16 = a1;
                                      uint64_t v17 = (llvm::ValueAsMetadata *)a2;
                                      unsigned int v15 = v285;
                                      return (llvm::Value *)sub_1CC9D3C84(v16, v17, v15);
                                    }
                                  }
                                }
                                uint64_t v1324 = v633;
                                uint64_t v638 = *((void *)v1348 + 1);
                                v1329 = v634;
                                if ((_UNKNOWN *)v638 == &unk_1CFB2E344)
                                {
                                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1366, (llvm::Value *)((char *)v1348 + 8));
                                }
                                else
                                {
                                  *(void *)&long long v1366 = *((void *)v1348 + 1);
                                  if ((*(_DWORD *)(v638 + 8) + 64) >= 0x80) {
                                    operator new[]();
                                  }
                                  BYTE4(v1367) = BYTE4(v1367) & 0xF7 | *((unsigned char *)v1348 + 28) & 8;
                                  char v639 = *((unsigned char *)v1348 + 28);
                                  int v640 = v639 & 7;
                                  BYTE4(v1367) = BYTE4(v1367) & 0xF8 | v639 & 7;
                                  LODWORD(v1367) = *((_DWORD *)v1348 + 6);
                                  BOOL v642 = (v639 & 6) != 0 && v640 != 3;
                                  if (v640 == 1 || v642)
                                  {
                                    uint64_t v643 = *(unsigned int *)(v1366 + 8);
                                    if ((v643 - 64) <= 0xFFFFFF7F) {
                                      uint64_t v644 = (void *)*((void *)&v1366 + 1);
                                    }
                                    else {
                                      uint64_t v644 = (void *)&v1366 + 1;
                                    }
                                    uint64_t v645 = (uint64_t *)*((void *)v1348 + 2);
                                    if ((*(_DWORD *)(*((void *)v1348 + 1) + 8) - 64) >= 0xFFFFFF80) {
                                      uint64_t v645 = (uint64_t *)((char *)v1348 + 16);
                                    }
                                    if (v643 <= 0xFFFFFFBF)
                                    {
                                      unint64_t v646 = (unint64_t)(v643 + 64) >> 6;
                                      do
                                      {
                                        uint64_t v647 = *v645++;
                                        *v644++ = v647;
                                        --v646;
                                      }
                                      while (v646);
                                    }
                                  }
                                }
                                uint64_t v648 = (void *)v1366;
                                if ((_UNKNOWN *)v1366 == &unk_1CFB2E344)
                                {
                                  if ((*(unsigned char *)(*((void *)&v1366 + 1) + 28) & 8) == 0
                                    || (sub_1CBFC6FB8(*((uint64_t *)&v1366 + 1)),
                                        sub_1CBFC6FB8(*((void *)&v1366 + 1) + 32),
                                        uint64_t v648 = (void *)v1366,
                                        (_UNKNOWN *)v1366 == &unk_1CFB2E344))
                                  {
                                    uint64_t v649 = *((void *)&v1366 + 1);
                                    *((void *)&v1366 + 1) = 0;
                                    uint64_t v648 = &unk_1CFB2E344;
LABEL_1239:
                                    *(void *)&v1351[8] = v648;
                                    *(void *)&v1351[16] = v649;
                                    *(void *)&long long v1366 = &unk_1CFB2E394;
                                    uint64_t v650 = *((void *)v1347 + 1);
                                    if ((_UNKNOWN *)v650 == &unk_1CFB2E344)
                                    {
                                      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1373, (llvm::Value *)((char *)v1347 + 8));
                                    }
                                    else
                                    {
                                      *(void *)&long long v1373 = *((void *)v1347 + 1);
                                      if ((*(_DWORD *)(v650 + 8) + 64) >= 0x80) {
                                        operator new[]();
                                      }
                                      unsigned __int8 v1375 = v1375 & 0xF7 | *((unsigned char *)v1347 + 28) & 8;
                                      char v651 = *((unsigned char *)v1347 + 28);
                                      int v652 = v651 & 7;
                                      unsigned __int8 v1375 = v1375 & 0xF8 | v651 & 7;
                                      int v1374 = *((_DWORD *)v1347 + 6);
                                      BOOL v654 = (v651 & 6) != 0 && v652 != 3;
                                      if (v652 == 1 || v654)
                                      {
                                        uint64_t v655 = *(unsigned int *)(v1373 + 8);
                                        if ((v655 - 64) <= 0xFFFFFF7F) {
                                          int v656 = (void *)*((void *)&v1373 + 1);
                                        }
                                        else {
                                          int v656 = (void *)&v1373 + 1;
                                        }
                                        int v657 = (uint64_t *)*((void *)v1347 + 2);
                                        if ((*(_DWORD *)(*((void *)v1347 + 1) + 8) - 64) >= 0xFFFFFF80) {
                                          int v657 = (uint64_t *)((char *)v1347 + 16);
                                        }
                                        if (v655 <= 0xFFFFFFBF)
                                        {
                                          unint64_t v658 = (unint64_t)(v655 + 64) >> 6;
                                          do
                                          {
                                            uint64_t v659 = *v657++;
                                            *v656++ = v659;
                                            --v658;
                                          }
                                          while (v658);
                                        }
                                      }
                                    }
                                    int v660 = &v1351[16];
                                    size = (_DWORD *)v1373;
                                    if ((_UNKNOWN *)v1373 != &unk_1CFB2E344)
                                    {
                                      if ((v1375 & 8) != 0) {
                                        v1375 ^= 8u;
                                      }
                                      goto LABEL_1259;
                                    }
                                    if ((*(unsigned char *)(*((void *)&v1373 + 1) + 28) & 8) != 0)
                                    {
                                      sub_1CBFC6FB8(*((uint64_t *)&v1373 + 1));
                                      sub_1CBFC6FB8(*((void *)&v1373 + 1) + 32);
                                      size = (_DWORD *)v1373;
                                      int v660 = &v1351[16];
                                      if ((_UNKNOWN *)v1373 != &unk_1CFB2E344)
                                      {
LABEL_1259:
                                        char v662 = 0;
                                        std::string::size_type v663 = *((void *)&v1373 + 1);
                                        int v1377 = v1374;
                                        unsigned __int8 v1378 = v1378 & 0xF0 | v1375 & 0xF;
LABEL_1260:
                                        v1376.__r_.__value_.__l.__size_ = (std::string::size_type)size;
                                        v1376.__r_.__value_.__r.__words[2] = v663;
                                        *(void *)&long long v1373 = &unk_1CFB2E394;
                                        if (*(_DWORD **)&v1351[8] == size)
                                        {
                                          if (v662)
                                          {
                                            int IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v1351[8], (const llvm::detail::DoubleAPFloat *)&v1376.__r_.__value_.__r.__words[1]);
                                            size = (_DWORD *)v1376.__r_.__value_.__l.__size_;
                                            goto LABEL_1272;
                                          }
                                          int v664 = v1351[28] & 7;
                                          if (v664 == (v1378 & 7) && ((v1378 ^ v1351[28]) & 8) == 0)
                                          {
                                            int IsEqual = 1;
                                            if (v664 == 3 || (v1351[28] & 7) == 0) {
                                              goto LABEL_1272;
                                            }
                                            if ((v1351[28] & 6) == 0 || *(_DWORD *)&v1351[24] == v1377)
                                            {
                                              int v666 = size[2];
                                              v667 = &v1376.__r_.__value_.__s.__data_[16];
                                              if ((v666 - 64) <= 0xFFFFFF7F)
                                              {
                                                int v660 = *(unsigned char **)&v1351[16];
                                                v667 = (std::string::value_type *)v663;
                                              }
                                              int IsEqual = memcmp(v660, v667, ((v666 + 64) >> 3) & 0x1FFFFFF8) == 0;
LABEL_1272:
                                              if (size == (_DWORD *)&unk_1CFB2E344)
                                              {
                                                sub_1CB845718((uint64_t *)&v1376.__r_.__value_.__r.__words[2]);
                                              }
                                              else if ((size[2] - 64) <= 0xFFFFFF7F {
                                                     && v1376.__r_.__value_.__r.__words[2])
                                              }
                                              {
                                                MEMORY[0x1D25D9CB0](v1376.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
                                              }
                                              if ((_UNKNOWN *)v1373 == &unk_1CFB2E344)
                                              {
                                                sub_1CB845718((uint64_t *)&v1373 + 1);
                                              }
                                              else if ((*(_DWORD *)(v1373 + 8) - 64) <= 0xFFFFFF7F {
                                                     && *((void *)&v1373 + 1))
                                              }
                                              {
                                                MEMORY[0x1D25D9CB0](*((void *)&v1373 + 1), 0x1000C8000313F17);
                                              }
                                              if (*(_UNKNOWN **)&v1351[8] == &unk_1CFB2E344)
                                              {
                                                sub_1CB845718((uint64_t *)&v1351[16]);
                                              }
                                              else if ((*(_DWORD *)(*(void *)&v1351[8] + 8) - 64) <= 0xFFFFFF7F {
                                                     && *(void *)&v1351[16])
                                              }
                                              {
                                                MEMORY[0x1D25D9CB0](*(void *)&v1351[16], 0x1000C8000313F17);
                                              }
                                              if ((_UNKNOWN *)v1366 == &unk_1CFB2E344)
                                              {
                                                sub_1CB845718((uint64_t *)&v1366 + 1);
                                              }
                                              else if ((*(_DWORD *)(v1366 + 8) - 64) <= 0xFFFFFF7F {
                                                     && *((void *)&v1366 + 1))
                                              }
                                              {
                                                MEMORY[0x1D25D9CB0](*((void *)&v1366 + 1), 0x1000C8000313F17);
                                              }
                                              if (IsEqual)
                                              {
                                                v1345 = 0;
                                                v1344[0] = 0;
                                                LOBYTE(v1339) = 0;
                                                v1341[0] = 0;
                                                *(void *)v1351 = v1341;
                                                *(void *)&v1351[8] = &v1345;
                                                *(void *)&v1351[16] = v1344;
                                                *(void *)&v1351[24] = 0;
                                                uint64_t v668 = *((void *)v1329 + 1);
                                                if (v668)
                                                {
                                                  if (!*(void *)(v668 + 8) && *((unsigned char *)v1329 + 16) == 81)
                                                  {
                                                    if (sub_1CCA4756C((void **)&v1351[8], *((void *)v1329 - 8)))
                                                    {
                                                      if (sub_1CBF528D8((uint64_t)&v1351[16], *((unsigned __int8 **)v1329 - 4)))
                                                      {
                                                        **(_DWORD **)v1351 = *((_WORD *)v1329 + 9) & 0x3F;
                                                        if (sub_1CC9EAA5C(v1341[0], v1344[0], &v1339)
                                                          && *(llvm::Type **)v1345 == v637)
                                                        {
                                                          v955 = v1348;
                                                          v956 = (void *)*((void *)v1348 + 1);
                                                          v957 = v1348;
                                                          if (v956 == &unk_1CFB2E344) {
                                                            v957 = (llvm::Value *)*((void *)v1348 + 2);
                                                          }
                                                          if (v1339 != ((*((unsigned __int8 *)v957 + 28) >> 3) & 1))
                                                          {
                                                            *(_WORD *)&v1351[32] = 257;
                                                            v1345 = sub_1CB843FF8(v1324, (uint64_t)v1345, (uint64_t)v1351, 0);
                                                            v955 = v1348;
                                                            v956 = (void *)*((void *)v1348 + 1);
                                                          }
                                                          if (v956 == &unk_1CFB2E344) {
                                                            v955 = (llvm::Value *)*((void *)v955 + 2);
                                                          }
                                                          if ((*((unsigned char *)v955 + 28) & 8) != 0) {
                                                            std::string::size_type v958 = (std::string::size_type)v636;
                                                          }
                                                          else {
                                                            std::string::size_type v958 = (std::string::size_type)v635;
                                                          }
                                                          v959 = *(uint64_t ***)(*((void *)a2[5] + 7) + 40);
                                                          *(void *)v1351 = *a2;
                                                          uint64_t v960 = llvm::Intrinsic::getDeclaration(v959, 19, (uint64_t)v1351, 1);
                                                          v961 = (uint64_t **)v960;
                                                          if (v960) {
                                                            v962 = *(uint64_t ***)(v960 + 24);
                                                          }
                                                          else {
                                                            v962 = 0;
                                                          }
                                                          v1376.__r_.__value_.__r.__words[0] = v958;
                                                          v1376.__r_.__value_.__l.__size_ = (std::string::size_type)v1345;
                                                          *(_WORD *)&v1351[32] = 257;
                                                          v1064 = (char *)operator new(0xB0uLL);
                                                          uint64_t v1140 = 0;
                                                          BitOrPointerCast = (uint64_t **)(v1064 + 96);
                                                          *((_DWORD *)v1064 + 29) = *((_DWORD *)v1064 + 29) & 0x38000000 | 3;
                                                          do
                                                          {
                                                            v1141 = &v1064[v1140];
                                                            *(void *)v1141 = 0;
                                                            *((void *)v1141 + 1) = 0;
                                                            *((void *)v1141 + 2) = 0;
                                                            *((void *)v1141 + 3) = BitOrPointerCast;
                                                            v1140 += 32;
                                                          }
                                                          while (v1140 != 96);
                                                          goto LABEL_2015;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              goto LABEL_1284;
                                            }
                                          }
                                        }
                                        int IsEqual = 0;
                                        goto LABEL_1272;
                                      }
                                    }
                                    else
                                    {
                                      int v660 = &v1351[16];
                                    }
                                    std::string::size_type v663 = *((void *)&v1373 + 1);
                                    *((void *)&v1373 + 1) = 0;
                                    size = &unk_1CFB2E344;
                                    char v662 = 1;
                                    goto LABEL_1260;
                                  }
                                }
                                else if ((v1367 & 0x800000000) != 0)
                                {
                                  BYTE4(v1367) ^= 8u;
                                }
                                uint64_t v649 = *((void *)&v1366 + 1);
                                *(_DWORD *)&v1351[24] = v1367;
                                v1351[28] = v1351[28] & 0xF0 | BYTE4(v1367) & 0xF;
                                goto LABEL_1239;
                              }
                              *(_DWORD *)&v1351[8] = 64;
                              *(void *)v1351 = v1198;
                              *(llvm::APInt **)&v1351[16] = v1344[0];
                              uint64_t v1204 = *((void *)v1345 + 1);
                              if (!v1204) {
                                goto LABEL_2315;
                              }
                              uint64_t v1205 = *(void *)(v1204 + 8);
                              if (v1205) {
                                goto LABEL_2315;
                              }
                              int v1233 = *((unsigned __int8 *)v1345 + 16);
                              if (v1233 != 43)
                              {
                                if (v1233 == 5) {
                                  LOBYTE(v1205) = *((_WORD *)v1345 + 9) == 15
                                }
                                               && sub_1CBF531E4((llvm::APInt *)v1351, *((llvm::Constant **)v1345 - 4* (*((_DWORD *)v1345 + 5) & 0x7FFFFFF)))&& *(void *)&v1351[16] == ((void *)v1202- 4 * (*((_DWORD *)v1202 + 5) & 0x7FFFFFF))[4];
                                int v1206 = (v1233 == 5) & v1205;
                                goto LABEL_2316;
                              }
                              if (sub_1CBF53154((llvm::APInt *)v1351, *((unsigned __int8 **)v1345 - 8))
                                && *(void *)&v1351[16] == *((void *)v1202 - 4))
                              {
                                int v1206 = 1;
                              }
                              else
                              {
LABEL_2315:
                                int v1206 = 0;
                              }
LABEL_2316:
                              if (*(_DWORD *)&v1351[8] >= 0x41u && *(void *)v1351) {
                                MEMORY[0x1D25D9CB0](*(void *)v1351, 0x1000C8000313F17);
                              }
                              if (!v1206) {
                                goto LABEL_1216;
                              }
                              v1203 = v1345;
                              v1202 = v1344[0];
                              goto LABEL_2321;
                            }
                            unsigned int v448 = *((_DWORD *)v447 + 8);
                            LODWORD(v1366) = v448;
                            if (v448 > 0x40) {
                              operator new[]();
                            }
                            int8x8_t data = 0;
                            if (v448) {
                              unint64_t v449 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v448;
                            }
                            else {
                              unint64_t v449 = 0;
                            }
                            LODWORD(v1376.__r_.__value_.__r.__words[1]) = v448;
                            v1376.__r_.__value_.__r.__words[0] = v449;
                            v450 = sub_1CCABD934(a1, (uint64_t)a2, (llvm::APInt *)&v1376, (void **)&data, 0, 0);
                            if (LODWORD(v1376.__r_.__value_.__r.__words[1]) >= 0x41
                              && v1376.__r_.__value_.__r.__words[0])
                            {
                              MEMORY[0x1D25D9CB0](v1376.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                            }
                            if (v450)
                            {
                              BitOrPointerCast = (uint64_t **)a2;
                              if (v450 != (llvm::UndefValue *)a2) {
                                BitOrPointerCast = (uint64_t **)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v450);
                              }
LABEL_926:
                              if (v1366 >= 0x41 && *(void *)&data) {
                                MEMORY[0x1D25D9CB0](*(void *)&data, 0x1000C8000313F17);
                              }
                              if (BitOrPointerCast) {
                                return (llvm::Value *)BitOrPointerCast;
                              }
                              goto LABEL_930;
                            }
                            uint64_t v490 = *v1333;
                            uint64_t v491 = (uint64_t)*v1331;
                            uint64_t v492 = (uint64_t)*v1330;
                            v1345 = 0;
                            v1344[0] = 0;
                            v1372 = 0;
                            *(void *)&long long v1373 = 0;
                            *(void *)v1351 = &v1345;
                            *(void *)&v1351[8] = v1344;
                            *(void *)&v1351[16] = &v1372;
                            if (sub_1CCAAA664((uint64_t)v1351, v491))
                            {
                              uint64_t v493 = (__int32 *)((char *)v1372 + 4 * v1373);
                              uint64_t v494 = wmemchr((__int32 *)v1372, -1, v1373);
                              int v495 = v494 ? v494 : v493;
                              if (v495 == (__int32 *)((char *)v1372 + 4 * (void)v1373))
                              {
                                uint64_t v496 = *(unsigned int *)(**(void **)(v491 - 64) + 32);
                                if (v496 == *(_DWORD *)(v491 + 72))
                                {
                                  if (llvm::ShuffleVectorInst::isSelectMask(*(int **)(v491 + 64), v496))
                                  {
                                    uint64_t v497 = v1345;
                                    if (v1345 == (llvm::Value *)v492)
                                    {
                                      v943 = *(llvm::IRBuilderBase **)(a1 + 24);
                                      v944 = v1344[0];
                                      *(void *)v1351 = "sel";
                                      *(_WORD *)&v1351[32] = 259;
                                      v945 = (llvm::Value *)v490;
                                      v946 = (llvm::Value *)v492;
                                      goto LABEL_1800;
                                    }
                                    if (v1344[0] == (llvm::APInt *)v492)
                                    {
                                      v963 = *(llvm::IRBuilderBase **)(a1 + 24);
                                      *(void *)v1351 = "sel";
                                      *(_WORD *)&v1351[32] = 259;
                                      v964 = (llvm::Value *)v490;
                                      uint64_t v502 = (llvm::Value *)v492;
LABEL_1825:
                                      v965 = llvm::IRBuilderBase::CreateSelect(v963, v964, v497, v502, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                                      v966 = (char *)operator new(0xA8uLL);
                                      *((_DWORD *)v966 + 21) = *((_DWORD *)v966 + 21) & 0x38000000 | 2;
                                      BitOrPointerCast = (uint64_t **)(v966 + 64);
                                      *(void *)v966 = 0;
                                      *((void *)v966 + 1) = 0;
                                      *((void *)v966 + 2) = 0;
                                      *((void *)v966 + 3) = v966 + 64;
                                      *((void *)v966 + 4) = 0;
                                      *((void *)v966 + 5) = 0;
                                      *((void *)v966 + 6) = 0;
                                      *((void *)v966 + 7) = v966 + 64;
                                      v953 = (uint64_t **)v1344[0];
                                      v950 = v1372;
                                      v951 = (llvm::Type *)v1373;
                                      *(_WORD *)&v1351[32] = 257;
                                      v952 = (uint64_t ***)(v966 + 64);
                                      v949 = (uint64_t **)v965;
                                      goto LABEL_1826;
                                    }
                                  }
                                }
                              }
                            }
                            *(void *)v1351 = &v1345;
                            *(void *)&v1351[8] = v1344;
                            *(void *)&v1351[16] = &v1372;
                            if (!sub_1CCAAA664((uint64_t)v1351, v492)) {
                              goto LABEL_925;
                            }
                            int v498 = (__int32 *)((char *)v1372 + 4 * v1373);
                            BOOL v499 = wmemchr((__int32 *)v1372, -1, v1373);
                            v500 = v499 ? v499 : v498;
                            if (v500 != (__int32 *)((char *)v1372 + 4 * (void)v1373)) {
                              goto LABEL_925;
                            }
                            uint64_t v501 = *(unsigned int *)(**(void **)(v492 - 64) + 32);
                            if (v501 != *(_DWORD *)(v492 + 72)
                              || !llvm::ShuffleVectorInst::isSelectMask(*(int **)(v492 + 64), v501))
                            {
                              goto LABEL_925;
                            }
                            uint64_t v502 = v1345;
                            if (v1345 != (llvm::Value *)v491)
                            {
                              if (v1344[0] != (llvm::APInt *)v491)
                              {
LABEL_925:
                                BitOrPointerCast = 0;
                                goto LABEL_926;
                              }
                              v963 = *(llvm::IRBuilderBase **)(a1 + 24);
                              *(void *)v1351 = "sel";
                              *(_WORD *)&v1351[32] = 259;
                              v964 = (llvm::Value *)v490;
                              uint64_t v497 = (llvm::Value *)v491;
                              goto LABEL_1825;
                            }
                            v943 = *(llvm::IRBuilderBase **)(a1 + 24);
                            v946 = v1344[0];
                            *(void *)v1351 = "sel";
                            *(_WORD *)&v1351[32] = 259;
                            v945 = (llvm::Value *)v490;
                            v944 = (llvm::Value *)v491;
LABEL_1800:
                            v947 = llvm::IRBuilderBase::CreateSelect(v943, v945, v944, v946, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                            v948 = (char *)operator new(0xA8uLL);
                            *((_DWORD *)v948 + 21) = *((_DWORD *)v948 + 21) & 0x38000000 | 2;
                            BitOrPointerCast = (uint64_t **)(v948 + 64);
                            *(void *)v948 = 0;
                            *((void *)v948 + 1) = 0;
                            *((void *)v948 + 2) = 0;
                            *((void *)v948 + 3) = v948 + 64;
                            *((void *)v948 + 4) = 0;
                            *((void *)v948 + 5) = 0;
                            *((void *)v948 + 6) = 0;
                            *((void *)v948 + 7) = v948 + 64;
                            v949 = (uint64_t **)v1345;
                            v950 = v1372;
                            v951 = (llvm::Type *)v1373;
                            *(_WORD *)&v1351[32] = 257;
                            v952 = (uint64_t ***)(v948 + 64);
                            v953 = (uint64_t **)v947;
LABEL_1826:
                            llvm::ShuffleVectorInst::ShuffleVectorInst(v952, v949, v953, v950, v951, (const char **)v1351, 0);
                            goto LABEL_926;
                          }
                          if (v442 != v1337)
                          {
                            if (*((llvm::Value **)v1335 - 8) != v4) {
                              goto LABEL_836;
                            }
                            uint64_t v486 = *((void *)v1335 + 1);
                            if (!v486 || *(void *)(v486 + 8)) {
                              goto LABEL_836;
                            }
                            int v487 = *(llvm::IRBuilderBase **)(a1 + 24);
                            *(_WORD *)&v1351[32] = 257;
                            AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(v443, v405, (const llvm::APInt *)v406);
                            uint64_t v489 = llvm::IRBuilderBase::CreateSelect(v487, v444, AllOnesValue, v442, (const llvm::Twine *)v1351, 0);
                            sub_1CC9D28DC(a1, (uint64_t)a2, 0, (uint64_t)v489);
                            uint64_t v482 = *((void *)v1335 - 4);
                            uint64_t v483 = a1;
                            uint64_t v484 = (uint64_t)a2;
                            unsigned int v485 = 2;
LABEL_906:
                            sub_1CC9D28DC(v483, v484, v485, v482);
                            return (llvm::Value *)a2;
                          }
                          uint64_t v236 = *((void *)v1335 - 4);
                          if (*v1330 == (uint64_t **)v236) {
                            return 0;
                          }
                          goto LABEL_959;
                        }
                        if (v438 != v1337)
                        {
                          if (*((llvm **)v4 - 4) == v1335)
                          {
                            uint64_t v478 = *((void *)v4 + 1);
                            if (v478)
                            {
                              if (!*(void *)(v478 + 8))
                              {
                                int v479 = *(llvm::IRBuilderBase **)(a1 + 24);
                                *(_WORD *)&v1351[32] = 257;
                                int v480 = llvm::Constant::getNullValue(v439, v405, (const llvm::APFloat *)v406);
                                unsigned int v481 = llvm::IRBuilderBase::CreateSelect(v479, v440, v438, v480, (const llvm::Twine *)v1351, 0);
                                sub_1CC9D28DC(a1, (uint64_t)a2, 0, (uint64_t)v481);
                                uint64_t v482 = *((void *)v4 - 8);
                                uint64_t v483 = a1;
                                uint64_t v484 = (uint64_t)a2;
                                unsigned int v485 = 1;
                                goto LABEL_906;
                              }
                            }
                          }
                          goto LABEL_834;
                        }
                        uint64_t v236 = *((void *)v4 - 8);
                        if (*v1331 == (uint64_t **)v236) {
                          return 0;
                        }
LABEL_1957:
                        uint64_t v233 = a1;
                        uint64_t v234 = (uint64_t)a2;
                        unsigned int v235 = 1;
                        return (llvm::Value *)sub_1CC9D28DC(v233, v234, v235, v236);
                      }
                    }
                    else
                    {
                      v418 = (llvm::Type *)*((void *)v406 + 5);
                    }
                    if (a2[5] != v418 || *((llvm::Type **)v4 + 5) == v418) {
                      goto LABEL_832;
                    }
                    goto LABEL_784;
                  }
LABEL_773:
                  if (v407 != (uint64_t **)v410 || v408 != (uint64_t **)v409) {
                    goto LABEL_781;
                  }
                  goto LABEL_775;
                }
                if (v369 - 69 < 0xFFFFFFFE) {
                  goto LABEL_740;
                }
                int v372 = *((_DWORD *)v368 + 5);
                if ((v372 & 0x40000000) != 0) {
                  v373 = (uint64_t **)*(v368 - 1);
                }
                else {
                  v373 = &v368[-4 * (v372 & 0x7FFFFFF)];
                }
                uint64_t v374 = *v373;
                v375 = (uint64_t **)**v373;
                uint64_t v376 = (llvm::Value *)*v1333;
                unsigned int v377 = (*v1333)[16];
                BOOL v378 = v377 - 81 < 2 && v377 > 0x1B;
                if (v378) {
                  v379 = *v1333;
                }
                else {
                  v379 = 0;
                }
                int v380 = *((_DWORD *)v375 + 2);
                if ((v380 & 0xFE) == 0x12) {
                  int v380 = *(_DWORD *)(*v375[2] + 8);
                }
                if (v380 != 269 && (!v379 || **((uint64_t ****)v379 - 8) != v375)) {
                  goto LABEL_740;
                }
                size_t __n = (size_t)v374;
                std::string::size_type v1323 = a1;
                int v381 = v4;
                uint64_t v382 = (llvm::ConstantExpr *)(v369 - 28);
                uint64_t v383 = (llvm::Constant ***)*a2;
                v384 = sub_1CC56C0C0((llvm *)0x26, (llvm::detail::IEEEFloat *)BitOrPointerCast, (llvm::Constant *)v375, 0);
                unsigned int v1318 = v382;
                v1319 = v383;
                if (llvm::ConstantExpr::getCast(v382, v384, v383, 0) == (llvm::ConstantExpr *)BitOrPointerCast
                  && (unint64_t v391 = v368[1]) != 0
                  && !v391[1])
                {
                  a1 = v1323;
                  if (v368 == (uint64_t **)*(a2 - 4)) {
                    unsigned int v392 = v384;
                  }
                  else {
                    unsigned int v392 = (llvm::Value *)__n;
                  }
                  if (v368 == (uint64_t **)*(a2 - 4)) {
                    unint64_t v393 = (llvm::Value *)__n;
                  }
                  else {
                    unint64_t v393 = v384;
                  }
                  v394 = *(llvm::IRBuilderBase **)(v1323 + 24);
                  *(void *)v1351 = "narrow";
                  *(_WORD *)&v1351[32] = 259;
                  v395 = llvm::IRBuilderBase::CreateSelect(v394, v376, v392, v393, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                  *(_WORD *)&v1351[32] = 257;
                  BitOrPointerCast = (uint64_t **)llvm::CastInst::Create((int)v382, (uint64_t)v395, (uint64_t)v1319, (const char **)v1351, 0);
                  int v4 = v381;
                }
                else
                {
                  size_t v387 = __n;
                  a1 = v1323;
                  int v4 = v381;
                  if (v376 != (llvm::Value *)__n) {
                    goto LABEL_740;
                  }
                  if (v368 == *v1331)
                  {
                    uint64_t v396 = **v375;
                    v397 = *(llvm::ConstantExpr **)(v396 + 1560);
                    if (!v397)
                    {
                      v968 = *(llvm::ConstantInt **)(v396 + 1888);
                      unsigned int v969 = *(_DWORD *)(v396 + 1896);
                      *(_DWORD *)&v1351[8] = v969 >> 8;
                      if (v969 >> 8 > 0x40) {
                        operator new[]();
                      }
                      if (v969 <= 0xFF) {
                        LOBYTE(v970) = 0;
                      }
                      else {
                        unint64_t v970 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v969) + 63);
                      }
                      *(void *)v1351 = v970 & 1;
                      v397 = (llvm::ConstantExpr *)llvm::ConstantInt::get(v968, (llvm::LLVMContext *)v1351, v386);
                      if (*(_DWORD *)&v1351[8] >= 0x41u && *(void *)v1351) {
                        MEMORY[0x1D25D9CB0](*(void *)v1351, 0x1000C8000313F17);
                      }
                      *(void *)(v396 + 1560) = v397;
                      size_t v387 = __n;
                      a1 = v1323;
                    }
                    if ((v375[1] & 0xFE) == 0x12) {
                      v397 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v375 + 8) | ((unint64_t)(*((_DWORD *)v375 + 2) == 19) << 32)), (uint64_t)v397);
                    }
                    Cast = (uint64_t *)llvm::ConstantExpr::getCast((llvm::ConstantExpr *)v1318, v397, v1319, 0);
                    *(_WORD *)&v1351[32] = 257;
                    uint64_t v389 = v387;
                    uint64_t v388 = (llvm::Value *)BitOrPointerCast;
                  }
                  else
                  {
                    uint64_t v388 = llvm::Constant::getNullValue((llvm::Constant *)v1319, v385, v386);
                    *(_WORD *)&v1351[32] = 257;
                    uint64_t v389 = __n;
                    Cast = (uint64_t *)BitOrPointerCast;
                  }
                  BitOrPointerCast = (uint64_t **)sub_1CC199EFC(v389, Cast, (uint64_t)v388, (const char **)v1351, 0, (uint64_t)a2);
                }
                if (BitOrPointerCast) {
                  return (llvm::Value *)BitOrPointerCast;
                }
                goto LABEL_740;
              }
            }
          }
          if ((v330 & 1) == 0)
          {
            if ((uint64_t v349 = *v1331,
                  uint64_t v350 = *v1330,
                  unsigned __int8 v351 = (uint64_t **)*(BitOrPointerCast - 8),
                  int v352 = (uint64_t **)*(BitOrPointerCast - 4),
                  *v1331 == v351)
              && v350 == v352
              || v349 == v352 && v350 == v351)
            {
              int v353 = *((_WORD *)BitOrPointerCast + 9) & 0x3E;
              if (v349 == v351)
              {
                if (v353 == 34) {
                  goto LABEL_696;
                }
              }
              else if (v353 == 36)
              {
                goto LABEL_696;
              }
            }
          }
          uint64_t v354 = *BitOrPointerCast;
          int v355 = *(_DWORD *)(v322 + 20);
          if ((v355 & 0x7FFFFFF) == 1)
          {
            int v356 = *(unsigned __int8 *)(v322 + 16);
            if ((v356 - 66) <= 0xC)
            {
              int v357 = *(_DWORD *)(v323 + 20);
              if ((v357 & 0x40000000) != 0) {
                uint64_t v358 = *(uint64_t ***)(v323 - 8);
              }
              else {
                uint64_t v358 = (uint64_t **)(v323 - 32 * (v357 & 0x7FFFFFF));
              }
              uint64_t v366 = **v358;
              if ((v355 & 0x40000000) != 0) {
                uint64_t v367 = *(void ***)(v322 - 8);
              }
              else {
                uint64_t v367 = (void **)(v322 - 32);
              }
              if (**v367 != v366) {
                goto LABEL_696;
              }
              if ((v354[1] & 0xFE) != 0x12 || !v354) {
                goto LABEL_968;
              }
              if ((*(_DWORD *)(v366 + 8) & 0xFE) != 0x12
                || (*((_DWORD *)v354 + 2) == 19) != (*(_DWORD *)(v366 + 8) == 19)
                || *((_DWORD *)v354 + 8) != *(_DWORD *)(v366 + 32))
              {
                goto LABEL_696;
              }
              if (v356 != 77)
              {
LABEL_968:
                uint64_t v522 = *(void *)(v322 + 8);
                if (!v522) {
                  goto LABEL_696;
                }
                if (*(void *)(v522 + 8)) {
                  goto LABEL_696;
                }
                uint64_t v523 = *(void *)(v323 + 8);
                if (!v523 || *(void *)(v523 + 8)) {
                  goto LABEL_696;
                }
              }
              int v524 = *(llvm::IRBuilderBase **)(a1 + 24);
              if ((v355 & 0x40000000) != 0) {
                v525 = *(llvm::Value ***)(v322 - 8);
              }
              else {
                v525 = (llvm::Value **)(v322 - 32);
              }
              v932 = *v525;
              if ((v357 & 0x40000000) != 0) {
                v933 = *(llvm::Value ***)(v323 - 8);
              }
              else {
                v933 = (llvm::Value **)(v323 - 32 * (v357 & 0x7FFFFFF));
              }
              v934 = *v933;
              if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
              {
                uint64_t v935 = **(void **)*a2;
                uint64_t v936 = *(void *)(v935 + 152);
                uint64_t v937 = *(unsigned int *)(v935 + 168);
                if (v937)
                {
                  LODWORD(v938) = (v937 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                  v939 = (llvm::Type ***)(v936 + 16 * v938);
                  v940 = *v939;
                  if (*v939 != a2)
                  {
                    int v941 = 1;
                    do
                    {
                      if (v940 == (llvm::Type **)-4096) {
                        goto LABEL_1876;
                      }
                      int v942 = v938 + v941++;
                      uint64_t v938 = v942 & (v937 - 1);
                      v940 = *(llvm::Type ***)(v936 + 16 * v938);
                    }
                    while (v940 != a2);
                    v939 = (llvm::Type ***)(v936 + 16 * v938);
                  }
                }
                else
                {
LABEL_1876:
                  v939 = (llvm::Type ***)(v936 + 16 * v937);
                }
                v997 = v939[1];
                v1000 = *v997;
                v998 = (char *)(v997 + 2);
                v999 = v1000;
              }
              else
              {
                v999 = 0;
                v998 = &byte_1CFBCE98E;
              }
              *(_WORD *)&v1351[32] = 773;
              *(void *)v1351 = v998;
              *(void *)&v1351[8] = v999;
              *(void *)&v1351[16] = ".v";
              v1001 = llvm::IRBuilderBase::CreateSelect(v524, (llvm::Value *)BitOrPointerCast, v932, v934, (const llvm::Twine *)v1351, (uint64_t ***)a2);
              int v1002 = *(unsigned __int8 *)(v322 + 16) - 28;
              uint64_t v1003 = *(void *)v322;
              *(_WORD *)&v1351[32] = 257;
              BitOrPointerCast = (uint64_t **)llvm::CastInst::Create(v1002, (uint64_t)v1001, v1003, (const char **)v1351, 0);
              goto LABEL_689;
            }
          }
          v1372 = 0;
          v1350.__r_.__value_.__r.__words[0] = 0;
          *(void *)v1351 = &v1372;
          if (sub_1CC04C34C((void **)v1351, v322))
          {
            int8x8_t data = (int8x8_t)&v1350;
            if (sub_1CC04C34C(&data, v323)
              && ((uint64_t v359 = *(void *)(v322 + 8)) != 0 && !*(void *)(v359 + 8)
               || (uint64_t v360 = *(void *)(v323 + 8)) != 0 && !*(void *)(v360 + 8)))
            {
              int v526 = *(unsigned __int8 *)(v322 + 17) >> 1;
              if (v526 == 127) {
                LOBYTE(v526) = -1;
              }
              int v527 = *(unsigned __int8 *)(v323 + 17) >> 1;
              if (v527 == 127) {
                LOBYTE(v527) = -1;
              }
              char v528 = v527 & v526;
              int v529 = *((unsigned __int8 *)a2 + 17) >> 1;
              if (v529 == 127) {
                LOBYTE(v529) = -1;
              }
              char v530 = v528 | v529;
              int v531 = *(llvm::IRBuilderBase **)(a1 + 24);
              if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
              {
                uint64_t v532 = **(void **)*a2;
                uint64_t v533 = *(void *)(v532 + 152);
                uint64_t v534 = *(unsigned int *)(v532 + 168);
                if (v534)
                {
                  LODWORD(v535) = (v534 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                  uint64_t v536 = (llvm::Type ***)(v533 + 16 * v535);
                  uint64_t v537 = *v536;
                  if (*v536 != a2)
                  {
                    int v538 = 1;
                    do
                    {
                      if (v537 == (llvm::Type **)-4096) {
                        goto LABEL_1191;
                      }
                      int v539 = v535 + v538++;
                      uint64_t v535 = v539 & (v534 - 1);
                      uint64_t v537 = *(llvm::Type ***)(v533 + 16 * v535);
                    }
                    while (v537 != a2);
                    uint64_t v536 = (llvm::Type ***)(v533 + 16 * v535);
                  }
                }
                else
                {
LABEL_1191:
                  uint64_t v536 = (llvm::Type ***)(v533 + 16 * v534);
                }
                v619 = v536[1];
                int64_t v622 = *v619;
                v620 = (char *)(v619 + 2);
                int v621 = v622;
              }
              else
              {
                int v621 = 0;
                v620 = &byte_1CFBCE98E;
              }
              *(_WORD *)&v1351[32] = 773;
              *(void *)v1351 = v620;
              *(void *)&v1351[8] = v621;
              *(void *)&v1351[16] = ".v";
              unint64_t v623 = llvm::IRBuilderBase::CreateSelect(v531, (llvm::Value *)BitOrPointerCast, v1372, (llvm::Value *)v1350.__r_.__value_.__l.__data_, (const llvm::Twine *)v1351, (uint64_t ***)a2);
              if (v623 && *((unsigned __int8 *)v623 + 16) > 0x1Bu) {
                *((unsigned char *)v623 + 17) |= 2 * v530;
              }
              *(_WORD *)&v1351[32] = 257;
              BitOrPointerCast = (uint64_t **)llvm::UnaryOperator::Create(12, (uint64_t *)v623, (const char **)v1351, 0);
              *((unsigned char *)BitOrPointerCast + 17) |= 2 * v530;
              goto LABEL_689;
            }
          }
          if (*(unsigned char *)(v322 + 16) == 84
            && (uint64_t v361 = *(void *)(v322 - 32)) != 0
            && !*(unsigned char *)(v361 + 16)
            && *(void *)(v361 + 24) == *(void *)(v322 + 72))
          {
            if ((*(unsigned char *)(v361 + 33) & 0x20) != 0) {
              uint64_t v362 = v322;
            }
            else {
              uint64_t v362 = 0;
            }
          }
          else
          {
            uint64_t v362 = 0;
          }
          if (*(unsigned char *)(v323 + 16) == 84)
          {
            uint64_t v363 = *(void *)(v323 - 32);
            if (v363)
            {
              if (!*(unsigned char *)(v363 + 16) && *(void *)(v363 + 24) == *(void *)(v323 + 72))
              {
                uint64_t v589 = (*(unsigned char *)(v363 + 33) & 0x20) != 0 ? v323 : 0;
                if (v362
                  && v589
                  && *(_DWORD *)(*(void *)(v362 - 32) + 36) == *(_DWORD *)(*(void *)(v589 - 32) + 36)
                  && ((uint64_t v590 = *(void *)(v362 + 8)) != 0 && !*(void *)(v590 + 8)
                   || (uint64_t v591 = *(void *)(v589 + 8)) != 0 && !*(void *)(v591 + 8)))
                {
                  v1345 = 0;
                  v1344[0] = 0;
                  v1347 = 0;
                  v1348 = 0;
                  *(void *)v1351 = &v1345;
                  *(void *)&v1351[8] = v1344;
                  *(void *)&v1351[16] = &v1345;
                  *(void *)&v1351[24] = v1344;
                  *(void *)&v1351[32] = &v1345;
                  *(void *)&v1351[40] = v1344;
                  uint64_t v1352 = (uint64_t)&v1345;
                  v1353 = v1344;
                  if (sub_1CCAAA2CC((void **)v1351, v362))
                  {
                    int8x8_t data = (int8x8_t)&v1348;
                    *(void *)&long long v1366 = &v1347;
                    *((void *)&v1366 + 1) = &v1348;
                    uint64_t v1367 = (uint64_t)&v1347;
                    v1368 = &v1348;
                    uint64_t v1369 = (uint64_t)&v1347;
                    v1370 = &v1348;
                    v1371 = &v1347;
                    if (sub_1CCAAA2CC(&data, v589))
                    {
                      if (v1345 == v1348)
                      {
                        v1093 = *(llvm::IRBuilderBase **)(a1 + 24);
                        *(void *)v1351 = "minmaxop";
                        *(_WORD *)&v1351[32] = 259;
                        v1094 = llvm::IRBuilderBase::CreateSelect(v1093, (llvm::Value *)BitOrPointerCast, v1344[0], v1347, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                        uint64_t v1095 = *(void *)(v362 - 32);
                        if (v1095 && !*(unsigned char *)(v1095 + 16))
                        {
                          uint64_t v1149 = *(void *)(v1095 + 24);
                          uint64_t v1150 = *(void *)(v362 + 72);
                          if (v1149 == v1150) {
                            v1096 = *(uint64_t ***)(v362 - 32);
                          }
                          else {
                            v1096 = 0;
                          }
                          if (v1149 == v1150) {
                            v1097 = *(uint64_t ***)(v1095 + 24);
                          }
                          else {
                            v1097 = 0;
                          }
                        }
                        else
                        {
                          v1096 = 0;
                          v1097 = 0;
                        }
                        int8x8_t data = (int8x8_t)v1094;
                        *(void *)&long long v1366 = v1345;
                        *(_WORD *)&v1351[32] = 257;
                        v1151 = (char *)operator new(0xB0uLL);
                        uint64_t v1152 = 0;
                        BitOrPointerCast = (uint64_t **)(v1151 + 96);
                        *((_DWORD *)v1151 + 29) = *((_DWORD *)v1151 + 29) & 0x38000000 | 3;
                        do
                        {
                          v1153 = &v1151[v1152];
                          *(void *)v1153 = 0;
                          *((void *)v1153 + 1) = 0;
                          *((void *)v1153 + 2) = 0;
                          *((void *)v1153 + 3) = BitOrPointerCast;
                          v1152 += 32;
                        }
                        while (v1152 != 96);
                      }
                      else if (v1345 == v1347)
                      {
                        v1110 = *(llvm::IRBuilderBase **)(a1 + 24);
                        *(void *)v1351 = "minmaxop";
                        *(_WORD *)&v1351[32] = 259;
                        v1111 = llvm::IRBuilderBase::CreateSelect(v1110, (llvm::Value *)BitOrPointerCast, v1344[0], v1348, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                        uint64_t v1112 = *(void *)(v362 - 32);
                        if (v1112 && !*(unsigned char *)(v1112 + 16))
                        {
                          uint64_t v1190 = *(void *)(v1112 + 24);
                          uint64_t v1191 = *(void *)(v362 + 72);
                          if (v1190 == v1191) {
                            v1096 = *(uint64_t ***)(v362 - 32);
                          }
                          else {
                            v1096 = 0;
                          }
                          if (v1190 == v1191) {
                            v1097 = *(uint64_t ***)(v1112 + 24);
                          }
                          else {
                            v1097 = 0;
                          }
                        }
                        else
                        {
                          v1096 = 0;
                          v1097 = 0;
                        }
                        int8x8_t data = (int8x8_t)v1111;
                        *(void *)&long long v1366 = v1345;
                        *(_WORD *)&v1351[32] = 257;
                        v1151 = (char *)operator new(0xB0uLL);
                        uint64_t v1192 = 0;
                        BitOrPointerCast = (uint64_t **)(v1151 + 96);
                        *((_DWORD *)v1151 + 29) = *((_DWORD *)v1151 + 29) & 0x38000000 | 3;
                        do
                        {
                          v1193 = &v1151[v1192];
                          *(void *)v1193 = 0;
                          *((void *)v1193 + 1) = 0;
                          *((void *)v1193 + 2) = 0;
                          *((void *)v1193 + 3) = BitOrPointerCast;
                          v1192 += 32;
                        }
                        while (v1192 != 96);
                      }
                      else if (v1344[0] == v1348)
                      {
                        v1137 = *(llvm::IRBuilderBase **)(a1 + 24);
                        *(void *)v1351 = "minmaxop";
                        *(_WORD *)&v1351[32] = 259;
                        v1138 = llvm::IRBuilderBase::CreateSelect(v1137, (llvm::Value *)BitOrPointerCast, v1345, v1347, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                        uint64_t v1139 = *(void *)(v362 - 32);
                        if (v1139 && !*(unsigned char *)(v1139 + 16))
                        {
                          uint64_t v1210 = *(void *)(v1139 + 24);
                          uint64_t v1211 = *(void *)(v362 + 72);
                          if (v1210 == v1211) {
                            v1096 = *(uint64_t ***)(v362 - 32);
                          }
                          else {
                            v1096 = 0;
                          }
                          if (v1210 == v1211) {
                            v1097 = *(uint64_t ***)(v1139 + 24);
                          }
                          else {
                            v1097 = 0;
                          }
                        }
                        else
                        {
                          v1096 = 0;
                          v1097 = 0;
                        }
                        int8x8_t data = (int8x8_t)v1138;
                        *(llvm::APInt **)&long long v1366 = v1344[0];
                        *(_WORD *)&v1351[32] = 257;
                        v1151 = (char *)operator new(0xB0uLL);
                        uint64_t v1212 = 0;
                        BitOrPointerCast = (uint64_t **)(v1151 + 96);
                        *((_DWORD *)v1151 + 29) = *((_DWORD *)v1151 + 29) & 0x38000000 | 3;
                        do
                        {
                          v1213 = &v1151[v1212];
                          *(void *)v1213 = 0;
                          *((void *)v1213 + 1) = 0;
                          *((void *)v1213 + 2) = 0;
                          *((void *)v1213 + 3) = BitOrPointerCast;
                          v1212 += 32;
                        }
                        while (v1212 != 96);
                      }
                      else
                      {
                        if (v1344[0] != v1347) {
                          goto LABEL_681;
                        }
                        v1142 = *(llvm::IRBuilderBase **)(a1 + 24);
                        *(void *)v1351 = "minmaxop";
                        *(_WORD *)&v1351[32] = 259;
                        v1143 = llvm::IRBuilderBase::CreateSelect(v1142, (llvm::Value *)BitOrPointerCast, v1345, v1348, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                        uint64_t v1144 = *(void *)(v362 - 32);
                        if (v1144 && !*(unsigned char *)(v1144 + 16))
                        {
                          uint64_t v1221 = *(void *)(v1144 + 24);
                          uint64_t v1222 = *(void *)(v362 + 72);
                          if (v1221 == v1222) {
                            v1096 = *(uint64_t ***)(v362 - 32);
                          }
                          else {
                            v1096 = 0;
                          }
                          if (v1221 == v1222) {
                            v1097 = *(uint64_t ***)(v1144 + 24);
                          }
                          else {
                            v1097 = 0;
                          }
                        }
                        else
                        {
                          v1096 = 0;
                          v1097 = 0;
                        }
                        int8x8_t data = (int8x8_t)v1143;
                        *(llvm::APInt **)&long long v1366 = v1344[0];
                        *(_WORD *)&v1351[32] = 257;
                        v1151 = (char *)operator new(0xB0uLL);
                        uint64_t v1223 = 0;
                        BitOrPointerCast = (uint64_t **)(v1151 + 96);
                        *((_DWORD *)v1151 + 29) = *((_DWORD *)v1151 + 29) & 0x38000000 | 3;
                        do
                        {
                          v1224 = &v1151[v1223];
                          *(void *)v1224 = 0;
                          *((void *)v1224 + 1) = 0;
                          *((void *)v1224 + 2) = 0;
                          *((void *)v1224 + 3) = BitOrPointerCast;
                          v1223 += 32;
                        }
                        while (v1223 != 96);
                      }
                      *((void *)v1151 + 12) = *v1097[2];
                      *((void *)v1151 + 13) = 0;
                      v1151[112] = 84;
                      v1151[113] = 0;
                      *((_WORD *)v1151 + 57) = 0;
                      *((_DWORD *)v1151 + 29) = *((_DWORD *)v1151 + 29) & 0xC0000000 | 3;
                      *(_OWORD *)(v1151 + 120) = 0u;
                      *(_OWORD *)(v1151 + 136) = 0u;
                      *((_DWORD *)v1151 + 38) = 0;
                      *((void *)v1151 + 20) = 0;
                      llvm::CallInst::init((uint64_t ***)BitOrPointerCast, v1097, v1096, (uint64_t *)&data, 2, 0, 0, (const char **)v1351);
LABEL_689:
                      if (BitOrPointerCast) {
                        return (llvm::Value *)BitOrPointerCast;
                      }
                      goto LABEL_696;
                    }
                  }
                }
              }
            }
          }
LABEL_681:
          if ((*(_DWORD *)(v322 + 20) & 0x7FFFFFF) != 2
            || (*(_DWORD *)(v323 + 20) & 0x7FFFFFF) != 2
            || !llvm::Instruction::isSameOperationAs((llvm::Instruction *)v322, (const llvm::Instruction *)v323, 0)|| (int v364 = *(unsigned __int8 *)(v322 + 16), v364 != 62) && (v364 - 41) > 0x11|| (v365 = *(void *)(v322 + 8)) == 0|| *(void *)(v365 + 8)|| (v871 = *(void *)(v323 + 8)) == 0|| *(void *)(v871 + 8))
          {
            BitOrPointerCast = 0;
            goto LABEL_689;
          }
          int v872 = *(_DWORD *)(v322 + 20);
          if ((v872 & 0x40000000) != 0) {
            v873 = *(uint64_t **)(v322 - 8);
          }
          else {
            v873 = (uint64_t *)(v322 - 32 * (v872 & 0x7FFFFFF));
          }
          uint64_t v1072 = *v873;
          int v1073 = *(_DWORD *)(v323 + 20);
          if ((v1073 & 0x40000000) != 0) {
            v1074 = *(void **)(v323 - 8);
          }
          else {
            v1074 = (void *)(v323 - 32 * (v1073 & 0x7FFFFFF));
          }
          if (v1072 == *v1074)
          {
            if ((v872 & 0x40000000) != 0) {
              v1080 = *(uint64_t ***)(v322 - 8);
            }
            else {
              v1080 = (uint64_t **)(v322 - 32 * (v872 & 0x7FFFFFF));
            }
            v1085 = *v1080;
            v1086 = (llvm::Value *)v1080[4];
            if ((v1073 & 0x40000000) != 0)
            {
LABEL_2248:
              uint64_t v1087 = *(void *)(v323 - 8);
              goto LABEL_2249;
            }
          }
          else
          {
            if ((v872 & 0x40000000) != 0) {
              uint64_t v1075 = *(void *)(v322 - 8);
            }
            else {
              uint64_t v1075 = v322 - 32 * (v872 & 0x7FFFFFF);
            }
            uint64_t v1081 = *(void *)(v1075 + 32);
            if ((v1073 & 0x40000000) != 0) {
              uint64_t v1082 = *(void *)(v323 - 8);
            }
            else {
              uint64_t v1082 = v323 - 32 * (v1073 & 0x7FFFFFF);
            }
            if (v1081 == *(void *)(v1082 + 32))
            {
              if ((v872 & 0x40000000) != 0) {
                uint64_t v1084 = *(void *)(v322 - 8);
              }
              else {
                uint64_t v1084 = v322 - 32 * (v872 & 0x7FFFFFF);
              }
              v1085 = *(uint64_t **)(v1084 + 32);
              v1086 = *(llvm::Value **)v1084;
              int v1326 = 0;
              if ((v1073 & 0x40000000) != 0) {
                v1098 = *(llvm::Value ***)(v323 - 8);
              }
              else {
                v1098 = (llvm::Value **)(v323 - 32 * (v1073 & 0x7FFFFFF));
              }
LABEL_2251:
              v1163 = *v1098;
              if ((v354[1] & 0xFE) != 0x12
                || (*(_DWORD *)(*(void *)v1086 + 8) & 0xFE) == 0x12
                && (*(_DWORD *)(*(void *)v1163 + 8) & 0xFE) == 0x12)
              {
                v1164 = *(llvm::IRBuilderBase **)(a1 + 24);
                if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
                {
                  uint64_t v1165 = **(void **)*a2;
                  uint64_t v1166 = *(void *)(v1165 + 152);
                  uint64_t v1167 = *(unsigned int *)(v1165 + 168);
                  if (v1167)
                  {
                    LODWORD(v1168) = (v1167 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                    v1169 = (llvm::Type ***)(v1166 + 16 * v1168);
                    v1170 = *v1169;
                    if (*v1169 != a2)
                    {
                      int v1171 = 1;
                      do
                      {
                        if (v1170 == (llvm::Type **)-4096) {
                          goto LABEL_2262;
                        }
                        int v1172 = v1168 + v1171++;
                        uint64_t v1168 = v1172 & (v1167 - 1);
                        v1170 = *(llvm::Type ***)(v1166 + 16 * v1168);
                      }
                      while (v1170 != a2);
                      v1169 = (llvm::Type ***)(v1166 + 16 * v1168);
                    }
                  }
                  else
                  {
LABEL_2262:
                    v1169 = (llvm::Type ***)(v1166 + 16 * v1167);
                  }
                  v1173 = v1169[1];
                  v1176 = *v1173;
                  v1174 = (char *)(v1173 + 2);
                  v1175 = v1176;
                }
                else
                {
                  v1175 = 0;
                  v1174 = &byte_1CFBCE98E;
                }
                *(_WORD *)&v1351[32] = 773;
                *(void *)v1351 = v1174;
                *(void *)&v1351[8] = v1175;
                *(void *)&v1351[16] = ".v";
                v1177 = llvm::IRBuilderBase::CreateSelect(v1164, (llvm::Value *)BitOrPointerCast, v1086, v1163, (const llvm::Twine *)v1351, (uint64_t ***)a2);
                if (v1326) {
                  v1178 = v1085;
                }
                else {
                  v1178 = (uint64_t *)v1177;
                }
                if (v1326) {
                  uint64_t v1179 = (uint64_t)v1177;
                }
                else {
                  uint64_t v1179 = (uint64_t)v1085;
                }
                int v1180 = *(unsigned __int8 *)(v322 + 16);
                if ((v1180 - 59) >= 0xFFFFFFEE)
                {
                  *(_WORD *)&v1351[32] = 257;
                  BitOrPointerCast = (uint64_t **)llvm::BinaryOperator::Create(v1180 - 28, v1178, v1179, (const char **)v1351, 0);
                  llvm::Instruction::copyIRFlags((uint64_t)BitOrPointerCast, v322, 1);
                  llvm::Instruction::andIRFlags((uint64_t)BitOrPointerCast, v323);
                }
                else
                {
                  if (v1180 == 62) {
                    uint64_t v1181 = v322;
                  }
                  else {
                    uint64_t v1181 = 0;
                  }
                  if (v1181)
                  {
                    uint64_t v1182 = *(void *)(v1181 + 72);
                    if ((*(unsigned char *)(v1181 + 17) & 2) != 0 && (*(unsigned char *)(v323 + 17) & 2) != 0)
                    {
                      int8x8_t data = (int8x8_t)v1179;
                      *(_WORD *)&v1351[32] = 257;
                      BitOrPointerCast = (uint64_t **)sub_1CC9D913C(v1182, v1178, (uint64_t *)&data, 1, (const char **)v1351, 0);
                    }
                    else
                    {
                      int8x8_t data = (int8x8_t)v1179;
                      *(_WORD *)&v1351[32] = 257;
                      v1183 = (char *)operator new(0x90uLL);
                      *((_DWORD *)v1183 + 21) = *((_DWORD *)v1183 + 21) & 0x38000000 | 2;
                      BitOrPointerCast = (uint64_t **)(v1183 + 64);
                      *(void *)v1183 = 0;
                      *((void *)v1183 + 1) = 0;
                      *((void *)v1183 + 2) = 0;
                      *((void *)v1183 + 3) = v1183 + 64;
                      *((void *)v1183 + 4) = 0;
                      *((void *)v1183 + 5) = 0;
                      *((void *)v1183 + 6) = 0;
                      *((void *)v1183 + 7) = v1183 + 64;
                      sub_1CB845A7C(v1182, v1178, (uint64_t)&data, 1);
                      *((void *)v1183 + 8) = v1184;
                      *((void *)v1183 + 9) = 0;
                      unsigned int v1185 = *((_DWORD *)v1183 + 21) & 0xC0000000 | 2;
                      *((_DWORD *)v1183 + 20) = 62;
                      *((_DWORD *)v1183 + 21) = v1185;
                      *(_OWORD *)(v1183 + 88) = 0u;
                      *(_OWORD *)(v1183 + 104) = 0u;
                      *((_DWORD *)v1183 + 30) = 0;
                      *((void *)v1183 + 16) = v1182;
                      *((void *)v1183 + 17) = llvm::GetElementPtrInst::getIndexedType(v1182, (uint64_t)&data, 1);
                      llvm::GetElementPtrInst::init((uint64_t ***)v1183 + 8, (uint64_t **)v1178, (uint64_t *)&data, 1, (const char **)v1351);
                    }
                  }
                }
                goto LABEL_689;
              }
              goto LABEL_2261;
            }
            if (!llvm::Instruction::isCommutative((llvm::Instruction *)v322)) {
              goto LABEL_2261;
            }
            if ((v872 & 0x40000000) != 0) {
              v1083 = *(uint64_t **)(v322 - 8);
            }
            else {
              v1083 = (uint64_t *)(v322 - 32 * (v872 & 0x7FFFFFF));
            }
            uint64_t v1099 = *v1083;
            if ((v1073 & 0x40000000) != 0) {
              uint64_t v1100 = *(void *)(v323 - 8);
            }
            else {
              uint64_t v1100 = v323 - 32 * (v1073 & 0x7FFFFFF);
            }
            if (v1099 == *(void *)(v1100 + 32))
            {
              if ((v872 & 0x40000000) != 0) {
                v1113 = *(uint64_t ***)(v322 - 8);
              }
              else {
                v1113 = (uint64_t **)(v322 - 32 * (v872 & 0x7FFFFFF));
              }
              v1085 = *v1113;
              v1086 = (llvm::Value *)v1113[4];
              if ((v1073 & 0x40000000) != 0) {
                v1098 = *(llvm::Value ***)(v323 - 8);
              }
              else {
                v1098 = (llvm::Value **)(v323 - 32 * (v1073 & 0x7FFFFFF));
              }
              goto LABEL_2250;
            }
            uint64_t v1101 = (v872 & 0x40000000) != 0 ? *(void *)(v322 - 8) : v322 - 32 * (v872 & 0x7FFFFFF);
            uint64_t v1126 = *(void *)(v1101 + 32);
            v1127 = (v1073 & 0x40000000) != 0 ? *(void **)(v323 - 8) : (void *)(v323 - 32 * (v1073 & 0x7FFFFFF));
            if (v1126 != *v1127)
            {
LABEL_2261:
              BitOrPointerCast = 0;
              goto LABEL_689;
            }
            if ((v872 & 0x40000000) != 0) {
              uint64_t v1128 = *(void *)(v322 - 8);
            }
            else {
              uint64_t v1128 = v322 - 32 * (v872 & 0x7FFFFFF);
            }
            v1085 = *(uint64_t **)(v1128 + 32);
            v1086 = *(llvm::Value **)v1128;
            if ((v1073 & 0x40000000) != 0) {
              goto LABEL_2248;
            }
          }
          uint64_t v1087 = v323 - 32 * (v1073 & 0x7FFFFFF);
LABEL_2249:
          v1098 = (llvm::Value **)(v1087 + 32);
LABEL_2250:
          int v1326 = 1;
          goto LABEL_2251;
        }
        int v193 = *((_DWORD *)v160 + 5);
        if ((v193 & 0x40000000) != 0) {
          unsigned int v194 = (unsigned __int8 *)*((void *)v160 - 1);
        }
        else {
          unsigned int v194 = &v160[-32 * (v193 & 0x7FFFFFF)];
        }
        v215 = llvm::Constant::mergeUndefsWith((llvm::Constant *)v164, *((llvm::Constant **)v194 + 4), v162);
        uint64_t v216 = v215;
        if (v215)
        {
          int v217 = *((unsigned __int8 *)v215 + 16);
          if (v217 == 16)
          {
            uint64_t v218 = *((unsigned int *)v215 + 8);
            if (v218 >= 0x41)
            {
              int v1214 = 0;
              int64_t v1215 = (unint64_t)(v218 + 63) >> 6;
              do
              {
                BOOL v378 = v1215-- < 1;
                if (v378) {
                  break;
                }
                unint64_t v1216 = *(void *)(*((void *)v215 + 3) + 8 * v1215);
                v1214 += __clz(v1216);
              }
              while (!v1216);
              int v1217 = v218 | 0xFFFFFFC0;
              if ((v218 & 0x3F) == 0) {
                int v1217 = 0;
              }
              if (v1214 + v1217 == v218) {
                goto LABEL_388;
              }
            }
            else if (!*((void *)v215 + 3))
            {
              goto LABEL_388;
            }
          }
          else if (v217 == 17)
          {
            if (sub_1CB844168((uint64_t)v215, 0.0)) {
              goto LABEL_388;
            }
          }
          else if ((v217 - 18) < 3 || v217 == 13)
          {
            goto LABEL_388;
          }
          if (sub_1CC03F414((uint64_t)v1351, v216)) {
            goto LABEL_388;
          }
        }
        unsigned int v230 = (*((unsigned char *)v216 + 16) - 11);
        if (v230 >= 2)
        {
          if (v230 < 0xFD) {
            goto LABEL_572;
          }
          *(void *)v1351 = &v1351[32];
          *(void *)&v1351[8] = &v1351[32];
          *(void *)&v1351[16] = 8;
          *(_DWORD *)&v1351[24] = 0;
          int8x8_t data = (int8x8_t)((char *)&v1366 + 8);
          *(void *)&long long v1366 = 0x800000000;
          v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v1351;
          v1376.__r_.__value_.__l.__size_ = (std::string::size_type)&data;
          int v231 = sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v1376, (uint64_t)v216);
          BOOL v232 = 0;
          if (v231)
          {
            do
            {
              BOOL v232 = v1366 == 0;
              if (!v1366) {
                break;
              }
              uint64_t v1308 = *(void *)(*(void *)&data + 8 * v1366 - 8);
              LODWORD(v1366) = v1366 - 1;
            }
            while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v1376, v1308) & 1) != 0);
          }
          if ((long long *)data != (long long *)((char *)&v1366 + 8)) {
            free(*(void **)&data);
          }
          if (*(void *)&v1351[8] != *(void *)v1351) {
            free(*(void **)&v1351[8]);
          }
          if (!v232) {
            goto LABEL_572;
          }
        }
LABEL_388:
        v219 = operator new(0x60uLL);
        uint64_t v220 = v219;
        v221 = (llvm::Value *)(v219 + 8);
        v219[13] = v219[13] & 0x38000000 | 1;
        *(void *)v219 = 0;
        *((void *)v219 + 1) = 0;
        *((void *)v219 + 2) = 0;
        *((void *)v219 + 3) = v219 + 8;
        if ((*((unsigned char *)BitOrPointerCast + 23) & 0x10) != 0)
        {
          uint64_t v222 = *(void *)**BitOrPointerCast;
          uint64_t v223 = *(void *)(v222 + 152);
          uint64_t v224 = *(unsigned int *)(v222 + 168);
          if (v224)
          {
            LODWORD(v225) = (v224 - 1) & ((BitOrPointerCast >> 4) ^ (BitOrPointerCast >> 9));
            v226 = (uint64_t ***)(v223 + 16 * v225);
            v227 = *v226;
            if (*v226 != BitOrPointerCast)
            {
              int v228 = 1;
              do
              {
                if (v227 == (uint64_t **)-4096) {
                  goto LABEL_547;
                }
                int v229 = v225 + v228++;
                uint64_t v225 = v229 & (v224 - 1);
                v227 = *(uint64_t ***)(v223 + 16 * v225);
              }
              while (v227 != BitOrPointerCast);
              v226 = (uint64_t ***)(v223 + 16 * v225);
            }
          }
          else
          {
LABEL_547:
            v226 = (uint64_t ***)(v223 + 16 * v224);
          }
          v298 = v226[1];
          v301 = *v298;
          v299 = (char *)(v298 + 2);
          long long v300 = v301;
        }
        else
        {
          long long v300 = 0;
          v299 = &byte_1CFBCE98E;
        }
        *(_WORD *)&v1351[32] = 773;
        *(void *)v1351 = v299;
        *(void *)&v1351[8] = v300;
        *(void *)&v1351[16] = ".fr";
        llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v219 + 8), (llvm::Value *)BitOrPointerCast, (const char **)v1351, 0);
        uint64_t v302 = *(void *)(v163 + 40);
        uint64_t v303 = (uint64_t *)(v163 + 24);
        *((void *)v220 + 9) = v302;
        *(_WORD *)(v302 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v220 + 55) & 0x10) != 0)
        {
          uint64_t v869 = *(void *)(v302 + 56);
          if (v869)
          {
            v870 = *(llvm::ValueSymbolTable **)(v869 + 104);
            if (v870) {
              llvm::ValueSymbolTable::reinsertValue(v870, v221);
            }
          }
        }
        uint64_t v304 = *v303;
        *((void *)v220 + 7) = *v303;
        *((void *)v220 + 8) = v303;
        v305 = v220 + 14;
        *(void *)(v304 + 8) = v305;
        *uint64_t v303 = (uint64_t)v305;
        uint64_t v306 = *(void *)(a1 + 32);
        int8x8_t data = (int8x8_t)v221;
        if (*(unsigned char *)(v306 + 2088))
        {
          uint64_t v308 = v306 + 2096;
          int v307 = 16;
        }
        else
        {
          int v307 = *(_DWORD *)(v306 + 2104);
          if (!v307)
          {
            v317 = 0;
            goto LABEL_566;
          }
          uint64_t v308 = *(void *)(v306 + 2096);
        }
        int v309 = v307 - 1;
        unsigned int v310 = v309 & ((v221 >> 4) ^ (v221 >> 9));
        v311 = (llvm::Value **)(v308 + 8 * v310);
        unsigned int v312 = *v311;
        if (v221 == *v311) {
          goto LABEL_568;
        }
        v313 = 0;
        int v314 = 1;
        while (v312 != (llvm::Value *)-4096)
        {
          if (v313) {
            BOOL v315 = 0;
          }
          else {
            BOOL v315 = v312 == (llvm::Value *)-8192;
          }
          if (v315) {
            v313 = v311;
          }
          unsigned int v316 = v310 + v314++;
          unsigned int v310 = v316 & v309;
          v311 = (llvm::Value **)(v308 + 8 * v310);
          unsigned int v312 = *v311;
          if (v221 == *v311) {
            goto LABEL_568;
          }
        }
        if (v313) {
          v317 = v313;
        }
        else {
          v317 = v311;
        }
LABEL_566:
        v318 = (int8x8_t *)sub_1CBFD5BBC(v306 + 2088, (uint64_t)&data, &data, v317);
        int8x8_t *v318 = data;
        unsigned int v319 = *(_DWORD *)(v306 + 2232);
        if (v319 >= *(_DWORD *)(v306 + 2236)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(int8x8_t *)(*(void *)(v306 + 2224) + 8 * v319) = data;
        ++*(_DWORD *)(v306 + 2232);
LABEL_568:
        int v320 = *(_DWORD *)(v163 + 20);
        if ((v320 & 0x40000000) != 0) {
          v321 = *(uint64_t ****)(v163 - 8);
        }
        else {
          v321 = (uint64_t ***)(v163 - 32 * (v320 & 0x7FFFFFF));
        }
        sub_1CC9D28DC(a1, v163, *v321 != BitOrPointerCast, (uint64_t)v221);
        BitOrPointerCast = (uint64_t **)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v163);
        if (BitOrPointerCast) {
          return (llvm::Value *)BitOrPointerCast;
        }
        goto LABEL_572;
      }
      unsigned int v613 = llvm::Constant::getNullValue(v153, v190, v191);
      v615 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v153, v1344[0], v614);
      if ((*((_DWORD *)v153 + 2) & 0xFE) == 0x12) {
        v615 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v153 + 8) | ((unint64_t)(*((_DWORD *)v153 + 2) == 19) << 32)), (uint64_t)v615);
      }
      *(void *)v1351 = "masksel";
      *(_WORD *)&v1351[32] = 259;
      v608 = llvm::IRBuilderBase::CreateSelect(v149, v150, v615, v613, (const llvm::Twine *)v1351, (uint64_t ***)a2);
      *(_WORD *)&v1351[32] = 257;
      v609 = (void *)v152;
LABEL_1170:
      BitOrPointerCast = (uint64_t **)llvm::BinaryOperator::Create(29, v609, (uint64_t)v608, (const char **)v1351, 0);
      if (BitOrPointerCast) {
        return (llvm::Value *)BitOrPointerCast;
      }
      goto LABEL_262;
    }
    uint64_t v592 = v147 - 32 * (*(_DWORD *)(v147 + 20) & 0x7FFFFFF);
    v1372 = *(llvm::Value **)v592;
    v1350.__r_.__value_.__r.__words[0] = *(void *)(v592 + 32);
    int8x8_t data = (int8x8_t)&v1372;
    *(void *)&long long v1366 = &v1350;
    int v593 = *(_DWORD *)(*(void *)(v147 - 32) + 36);
    if (v593 == 301)
    {
      if (sub_1CBF687D0((uint64_t)v1351, (llvm::Constant *)v142))
      {
        int v594 = 300;
        goto LABEL_2010;
      }
      int v593 = *(_DWORD *)(*(void *)(v147 - 32) + 36);
    }
    if (v593 == 312)
    {
      if (!v142) {
        goto LABEL_242;
      }
      unsigned int v924 = *(unsigned __int8 *)(v142 + 16);
      if (v924 > 0x14) {
        goto LABEL_242;
      }
      if (v924 == 16)
      {
        uint64_t v925 = *(unsigned int *)(v142 + 32);
        if (v925 >= 0x41)
        {
          int v1290 = 0;
          int64_t v1291 = (unint64_t)(v925 + 63) >> 6;
          do
          {
            BOOL v378 = v1291-- < 1;
            if (v378) {
              break;
            }
            unint64_t v1292 = *(void *)(*(void *)(v142 + 24) + 8 * v1291);
            v1290 += __clz(v1292);
          }
          while (!v1292);
          int v1293 = v925 | 0xFFFFFFC0;
          if ((v925 & 0x3F) == 0) {
            int v1293 = 0;
          }
          if (v1290 + v1293 == v925) {
            goto LABEL_1774;
          }
        }
        else if (!*(void *)(v142 + 24))
        {
LABEL_1774:
          int v594 = 311;
          goto LABEL_2010;
        }
      }
      else if (v924 == 17)
      {
        if (sub_1CB844168(v142, 0.0)) {
          goto LABEL_1774;
        }
      }
      else if (v924 - 18 < 3 || v924 == 13)
      {
        goto LABEL_1774;
      }
      if (sub_1CC03F414((uint64_t)v1351, (llvm::Constant *)v142)) {
        goto LABEL_1774;
      }
      int v593 = *(_DWORD *)(*(void *)(v147 - 32) + 36);
    }
    if (v593 == 263)
    {
      if (sub_1CCAA971C((uint64_t **)&data, (uint64_t *)v142, 1))
      {
        int v594 = 262;
        goto LABEL_2010;
      }
      int v593 = *(_DWORD *)(*(void *)(v147 - 32) + 36);
    }
    if (v593 != 284 || !sub_1CCAA971C((uint64_t **)&data, (uint64_t *)v142, 0)) {
      goto LABEL_242;
    }
    int v594 = 283;
LABEL_2010:
    v1062 = *(uint64_t ***)(*((void *)a2[5] + 7) + 40);
    *(void *)v1351 = *a2;
    uint64_t v1063 = llvm::Intrinsic::getDeclaration(v1062, v594, (uint64_t)v1351, 1);
    v961 = (uint64_t **)v1063;
    if (v1063) {
      v962 = *(uint64_t ***)(v1063 + 24);
    }
    else {
      v962 = 0;
    }
    v1376.__r_.__value_.__r.__words[0] = (std::string::size_type)v1372;
    v1376.__r_.__value_.__l.__size_ = v1350.__r_.__value_.__r.__words[0];
    *(_WORD *)&v1351[32] = 257;
    v1064 = (char *)operator new(0xB0uLL);
    uint64_t v1065 = 0;
    BitOrPointerCast = (uint64_t **)(v1064 + 96);
    *((_DWORD *)v1064 + 29) = *((_DWORD *)v1064 + 29) & 0x38000000 | 3;
    do
    {
      v1066 = &v1064[v1065];
      *(void *)v1066 = 0;
      *((void *)v1066 + 1) = 0;
      *((void *)v1066 + 2) = 0;
      *((void *)v1066 + 3) = BitOrPointerCast;
      v1065 += 32;
    }
    while (v1065 != 96);
LABEL_2015:
    *((void *)v1064 + 12) = *v962[2];
    *((void *)v1064 + 13) = 0;
    v1064[112] = 84;
    v1064[113] = 0;
    *((_WORD *)v1064 + 57) = 0;
    *((_DWORD *)v1064 + 29) = *((_DWORD *)v1064 + 29) & 0xC0000000 | 3;
    *(_OWORD *)(v1064 + 120) = 0u;
    *(_OWORD *)(v1064 + 136) = 0u;
    *((_DWORD *)v1064 + 38) = 0;
    *((void *)v1064 + 20) = 0;
    p_int8x8_t data = &v1376;
    v1068 = (uint64_t ***)BitOrPointerCast;
    v1069 = v962;
    v1070 = v961;
    uint64_t v1071 = 2;
LABEL_2016:
    llvm::CallInst::init(v1068, v1069, v1070, (uint64_t *)p_data, v1071, 0, 0, (const char **)v1351);
    return (llvm::Value *)BitOrPointerCast;
  }
LABEL_527:
  uint64_t v283 = *v278;
  if (!*v278) {
    goto LABEL_231;
  }
  if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12) {
    unsigned int v284 = *(unsigned __int8 *)(**((void **)*a2 + 2) + 8);
  }
  else {
    unsigned int v284 = *((_DWORD *)*a2 + 2);
  }
  v583 = v178;
  if (v284 > 6)
  {
    v586 = *(llvm::IRBuilderBase **)(a1 + 24);
    if ((v272 & 0x40000000) != 0) {
      v954 = (uint64_t **)*(v179 - 1);
    }
    else {
      v954 = &v179[-4 * (v272 & 0x7FFFFFF)];
    }
    v971 = (llvm::BinaryOperator *)v954[4];
    *(_WORD *)&v1351[32] = 257;
    v587 = sub_1CD5A6358(v175, v971, (uint64_t)v1351, 0, 0);
    goto LABEL_1842;
  }
  if ((v272 & 0x40000000) != 0) {
    uint64_t v584 = (uint64_t **)*(v179 - 1);
  }
  else {
    uint64_t v584 = &v179[-4 * (v272 & 0x7FFFFFF)];
  }
  uint64_t v585 = (uint64_t)v584[4];
  *(_WORD *)&v1351[32] = 257;
  v586 = (llvm::IRBuilderBase *)v175;
  v587 = sub_1CB843FF8(v175, v585, (uint64_t)v1351, 0);
  if (!v587)
  {
LABEL_1842:
    v588 = v583;
    goto LABEL_1843;
  }
  v588 = v583;
  if (*((unsigned __int8 *)v587 + 16) >= 0x1Cu) {
    *((unsigned char *)v587 + 17) |= *((unsigned char *)v583 + 17) & *((unsigned char *)v179 + 17) & 0xFE;
  }
LABEL_1843:
  if (v588 == v144) {
    v972 = v587;
  }
  else {
    v972 = v283;
  }
  if (v588 == v144) {
    v973 = v283;
  }
  else {
    v973 = v587;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v974 = **(void **)*a2;
    uint64_t v975 = *(void *)(v974 + 152);
    uint64_t v976 = *(unsigned int *)(v974 + 168);
    if (v976)
    {
      LODWORD(v977) = (v976 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v978 = (llvm::Type ***)(v975 + 16 * v977);
      v979 = *v978;
      if (*v978 == a2)
      {
LABEL_1857:
        v982 = v978[1];
        v985 = *v982;
        v983 = (char *)(v982 + 2);
        v984 = v985;
        goto LABEL_1858;
      }
      int v980 = 1;
      while (v979 != (llvm::Type **)-4096)
      {
        int v981 = v977 + v980++;
        uint64_t v977 = v981 & (v976 - 1);
        v979 = *(llvm::Type ***)(v975 + 16 * v977);
        if (v979 == a2)
        {
          v978 = (llvm::Type ***)(v975 + 16 * v977);
          goto LABEL_1857;
        }
      }
    }
    v978 = (llvm::Type ***)(v975 + 16 * v976);
    goto LABEL_1857;
  }
  v984 = 0;
  v983 = &byte_1CFBCE98E;
LABEL_1858:
  *(_WORD *)&v1351[32] = 773;
  *(void *)v1351 = v983;
  *(void *)&v1351[8] = v984;
  *(void *)&v1351[16] = ".p";
  v986 = llvm::IRBuilderBase::CreateSelect(v586, (llvm::Value *)v141, v973, v972, (const llvm::Twine *)v1351, (uint64_t ***)a2);
  if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12) {
    unsigned int v987 = *(unsigned __int8 *)(**((void **)*a2 + 2) + 8);
  }
  else {
    unsigned int v987 = *((_DWORD *)*a2 + 2);
  }
  int v988 = *((_DWORD *)v179 + 5);
  if (v987 <= 6)
  {
    if ((v988 & 0x40000000) != 0) {
      v989 = (uint64_t **)*(v179 - 1);
    }
    else {
      v989 = &v179[-4 * (v988 & 0x7FFFFFF)];
    }
    v991 = *v989;
    *(_WORD *)&v1351[32] = 257;
    BitOrPointerCast = (uint64_t **)llvm::BinaryOperator::Create(14, v991, (uint64_t)v986, (const char **)v1351, 0);
    *((unsigned char *)BitOrPointerCast + 17) |= *((unsigned char *)v583 + 17) & *((unsigned char *)v179 + 17) & 0xFE;
    return (llvm::Value *)BitOrPointerCast;
  }
  if ((v988 & 0x40000000) != 0) {
    v990 = (uint64_t **)*(v179 - 1);
  }
  else {
    v990 = &v179[-4 * (v988 & 0x7FFFFFF)];
  }
  v992 = *v990;
  *(_WORD *)&v1351[32] = 257;
  BitOrPointerCast = (uint64_t **)llvm::BinaryOperator::Create(13, v992, (uint64_t)v986, (const char **)v1351, 0);
  if (!BitOrPointerCast)
  {
    unsigned int v141 = *v1333;
    uint64_t v142 = (uint64_t)*v1331;
    uint64_t v143 = *v1330;
    goto LABEL_231;
  }
  return (llvm::Value *)BitOrPointerCast;
}

char *sub_1CCAA8F94(llvm::Value ***a1, uint64_t a2, const llvm::APFloat *a3, int a4)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  unsigned int v5 = (const llvm::APFloat **)(a2 - 32 * v4);
  if (v4 == 2 && *v5 == a3)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      if (!*(void *)(v7 + 8))
      {
        uint64_t v13 = v5[4];
        uint64_t v14 = a1[1];
        int v15 = *(_DWORD *)(*(void *)**a1 + 8) & 0xFE;
        uint64_t v16 = *(llvm::Constant **)v13;
        if (v15 != 18 || (*((_DWORD *)v16 + 2) & 0xFE) == 0x12)
        {
          uint64_t v17 = *(void *)(a2 + 72);
          NullValue = llvm::Constant::getNullValue(v16, (llvm::Type *)a2, a3);
          if (a4) {
            BOOL v19 = v13;
          }
          else {
            BOOL v19 = NullValue;
          }
          if (a4) {
            __int16 v20 = NullValue;
          }
          else {
            __int16 v20 = v13;
          }
          v21 = v14[3];
          uint64_t v22 = **a1;
          BOOL v23 = (uint64_t ***)a1[2];
          if ((*((unsigned char *)v23 + 23) & 0x10) == 0)
          {
            int v34 = 0;
            int v33 = &byte_1CFBCE98E;
            goto LABEL_27;
          }
          uint64_t v24 = ***v23;
          uint64_t v25 = *(void *)(v24 + 152);
          uint64_t v26 = *(unsigned int *)(v24 + 168);
          if (v26)
          {
            LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
            unint64_t v28 = (uint64_t ****)(v25 + 16 * v27);
            unint64_t v29 = *v28;
            if (*v28 == v23)
            {
LABEL_26:
              uint64_t v32 = v28[1];
              int64_t v35 = (const char *)*v32;
              int v33 = (const char *)(v32 + 2);
              int v34 = v35;
LABEL_27:
              __int16 v40 = 773;
              v39[0] = v33;
              v39[1] = v34;
              v39[2] = ".idx";
              v41[0] = (uint64_t)llvm::IRBuilderBase::CreateSelect(v21, v22, v20, v19, (const llvm::Twine *)v39, v23);
              __int16 v40 = 257;
              unint64_t v36 = (char *)operator new(0x90uLL);
              *((_DWORD *)v36 + 21) = *((_DWORD *)v36 + 21) & 0x38000000 | 2;
              long long v8 = v36 + 64;
              *(void *)unint64_t v36 = 0;
              *((void *)v36 + 1) = 0;
              *((void *)v36 + 2) = 0;
              *((void *)v36 + 3) = v36 + 64;
              *((void *)v36 + 4) = 0;
              *((void *)v36 + 5) = 0;
              *((void *)v36 + 6) = 0;
              *((void *)v36 + 7) = v36 + 64;
              sub_1CB845A7C(v17, (uint64_t *)a3, (uint64_t)v41, 1);
              *((void *)v36 + 8) = v37;
              *((void *)v36 + 9) = 0;
              unsigned int v38 = *((_DWORD *)v36 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v36 + 20) = 62;
              *((_DWORD *)v36 + 21) = v38;
              *(_OWORD *)(v36 + 88) = 0u;
              *(_OWORD *)(v36 + 104) = 0u;
              *((_DWORD *)v36 + 30) = 0;
              *((void *)v36 + 16) = v17;
              *((void *)v36 + 17) = llvm::GetElementPtrInst::getIndexedType(v17, (uint64_t)v41, 1);
              llvm::GetElementPtrInst::init((uint64_t ***)v36 + 8, (uint64_t **)a3, v41, 1, v39);
              return v8;
            }
            int v30 = 1;
            while (v29 != (uint64_t ***)-4096)
            {
              int v31 = v27 + v30++;
              uint64_t v27 = v31 & (v26 - 1);
              unint64_t v29 = *(uint64_t ****)(v25 + 16 * v27);
              if (v29 == v23)
              {
                unint64_t v28 = (uint64_t ****)(v25 + 16 * v27);
                goto LABEL_26;
              }
            }
          }
          unint64_t v28 = (uint64_t ****)(v25 + 16 * v26);
          goto LABEL_26;
        }
      }
    }
  }
  return 0;
}

int8x8_t *sub_1CCAA91E4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 5)
  {
    if (*(_WORD *)(a2 + 18) == 28)
    {
      unsigned int v10 = (int8x8_t ***)(a1 + 8);
      uint64_t v11 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      return sub_1CD68A8DC(v10, v11);
    }
    return 0;
  }
  if (v2 != 56) {
    return 0;
  }
  uint64_t v3 = *(llvm::Constant **)(a2 - 32);
  unsigned int v4 = *((unsigned __int8 *)v3 + 16);
  if (v3) {
    BOOL v5 = v4 == 16;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    goto LABEL_20;
  }
  unsigned int v6 = (int8x8_t *)((char *)v3 + 24);
  uint64_t v7 = *((unsigned int *)v3 + 8);
  if (v7 <= 0x40)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] == 1) {
      goto LABEL_10;
    }
    if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
      goto LABEL_24;
    }
    return 0;
  }
  int v12 = 0;
  unint64_t v13 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v14 = (int8x8_t *)*v6;
  do
  {
    int8x8_t v15 = *v14++;
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    v12 += v16.i32[0];
    --v13;
  }
  while (v13);
  if (v12 == 1) {
    goto LABEL_10;
  }
LABEL_20:
  if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) != 0x12 || v4 > 0x14) {
    return 0;
  }
LABEL_24:
  uint64_t v25 = a1;
  uint64_t result = (int8x8_t *)llvm::Constant::getSplatValue(v3, 0);
  if (result)
  {
    if (result[2].i8[0] != 16) {
      return 0;
    }
    unsigned int v6 = result + 3;
    uint64_t v17 = result[4].u32[0];
    if (v17 > 0x40)
    {
      int v20 = 0;
      unint64_t v21 = (unint64_t)(v17 + 63) >> 6;
      uint64_t v22 = (int8x8_t *)*v6;
      do
      {
        int8x8_t v23 = *v22++;
        uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
        v24.i16[0] = vaddlv_u8(v24);
        v20 += v24.i32[0];
        --v21;
      }
      while (v21);
      BOOL v19 = v20 == 1;
    }
    else
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8(*v6);
      v18.i16[0] = vaddlv_u8(v18);
      BOOL v19 = v18.u32[0] == 1;
    }
    a1 = v25;
    if (!v19) {
      return 0;
    }
LABEL_10:
    **(void **)(a1 + 8) = v6;
    return (int8x8_t *)1;
  }
  return result;
}

uint64_t sub_1CCAA938C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 57)
  {
    if (v3 == 5)
    {
      a3 = 0;
      if (*(_WORD *)(a2 + 18) == 29)
      {
        uint64_t v5 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        if (*(void *)a1 == *(void *)v5
          && (sub_1CD68A8DC((int8x8_t ***)(a1 + 8), *(llvm::Constant **)(v5 + 32)) & 1) != 0)
        {
          a3 = 1;
        }
      }
    }
    return (v3 == 5) & a3;
  }
  if (*(void *)a1 != *(void *)(a2 - 64)) {
    return 0;
  }
  unsigned int v6 = *(llvm::Constant **)(a2 - 32);
  unsigned int v7 = *((unsigned __int8 *)v6 + 16);
  if (v6) {
    BOOL v8 = v7 == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_25;
  }
  long long v9 = (int8x8_t *)((char *)v6 + 24);
  uint64_t v10 = *((unsigned int *)v6 + 8);
  if (v10 > 0x40)
  {
    int v12 = 0;
    unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = (int8x8_t *)*v9;
    do
    {
      int8x8_t v15 = *v14++;
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v12 += v16.i32[0];
      --v13;
    }
    while (v13);
    if (v12 != 1)
    {
LABEL_25:
      if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) != 0x12 || v7 > 0x14) {
        return 0;
      }
      goto LABEL_27;
    }
LABEL_17:
    **(void **)(a1 + 8) = v9;
    return 1;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(*v9);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] == 1) {
    goto LABEL_17;
  }
  if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) != 0x12) {
    return 0;
  }
LABEL_27:
  uint64_t v25 = a1;
  uint64_t result = (uint64_t)llvm::Constant::getSplatValue(v6, 0);
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 16) {
      return 0;
    }
    long long v9 = (int8x8_t *)(result + 24);
    uint64_t v17 = *(unsigned int *)(result + 32);
    if (v17 > 0x40)
    {
      int v20 = 0;
      unint64_t v21 = (unint64_t)(v17 + 63) >> 6;
      uint64_t v22 = (int8x8_t *)*v9;
      do
      {
        int8x8_t v23 = *v22++;
        uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
        v24.i16[0] = vaddlv_u8(v24);
        v20 += v24.i32[0];
        --v21;
      }
      while (v21);
      BOOL v19 = v20 == 1;
    }
    else
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8(*v9);
      v18.i16[0] = vaddlv_u8(v18);
      BOOL v19 = v18.u32[0] == 1;
    }
    a1 = v25;
    if (!v19) {
      return 0;
    }
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1CCAA9564(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0) {
    int v3 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  }
  uint64_t v4 = 0;
  uint64_t v5 = *v3;
  if (v5)
  {
    if (*(unsigned char *)(v5 + 16) == 82)
    {
      uint64_t v4 = *(void *)(v5 - 64);
      if (v4)
      {
        **(void **)(a1 + 8) = v4;
        uint64_t v6 = *(void *)(v5 - 32);
        if (v6) {
          BOOL v7 = *(unsigned char *)(v6 + 16) == 17;
        }
        else {
          BOOL v7 = 0;
        }
        if (!v7) {
          return 0;
        }
        **(void **)(a1 + 16) = v6;
        **(_DWORD **)a1 = *(_WORD *)(v5 + 18) & 0x3F;
        int v9 = *(_DWORD *)(a2 + 20);
        if ((v9 & 0x40000000) != 0) {
          uint64_t v10 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
        }
        uint64_t v4 = *(void *)(v10 + 32);
        if (v4)
        {
          **(void **)(a1 + 24) = v4;
          int v11 = *(_DWORD *)(a2 + 20);
          if ((v11 & 0x40000000) != 0) {
            uint64_t v12 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v12 = a2 - 32 * (v11 & 0x7FFFFFF);
          }
          uint64_t v4 = 0;
          uint64_t v13 = *(void *)(v12 + 64);
          if (v13 && *(unsigned char *)(v13 + 16) == 17)
          {
            **(void **)(a1 + 32) = v13;
            return 1;
          }
        }
      }
    }
  }
  return v4;
}

BOOL sub_1CCAA9650(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0) {
    int v3 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  }
  uint64_t v4 = 0;
  uint64_t v5 = *v3;
  if (v5)
  {
    if (*(unsigned char *)(v5 + 16) == 82)
    {
      uint64_t v4 = *(void *)(v5 - 64);
      if (v4)
      {
        **(void **)(a1 + 8) = v4;
        if (*(void *)(a1 + 16) != *(void *)(v5 - 32)) {
          return 0;
        }
        **(_DWORD **)a1 = *(_WORD *)(v5 + 18) & 0x3F;
        int v7 = *(_DWORD *)(a2 + 20);
        if ((v7 & 0x40000000) != 0) {
          uint64_t v8 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v8 = a2 - 32 * (v7 & 0x7FFFFFF);
        }
        uint64_t v4 = *(void *)(v8 + 32);
        if (v4)
        {
          **(void **)(a1 + 24) = v4;
          int v9 = *(_DWORD *)(a2 + 20);
          if ((v9 & 0x40000000) != 0) {
            uint64_t v10 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
          }
          return *(void *)(a1 + 32) == *(void *)(v10 + 64);
        }
      }
    }
  }
  return v4;
}

BOOL sub_1CCAA971C(uint64_t **a1, uint64_t *a2, int a3)
{
  uint64_t v86 = *a2;
  v78[0] = (llvm::Type **)&v85;
  v78[1] = (llvm::Type **)&v82;
  v78[2] = (llvm::Type **)&v81;
  v78[3] = 0;
  uint64_t v79 = &v84;
  v80 = &v83;
  if (*((unsigned char *)a2 + 16) != 85) {
    return 0;
  }
  int v6 = *((_DWORD *)a2 + 5);
  int v7 = (v6 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v6 & 0x7FFFFFF)];
  int v85 = 0;
  int v83 = 0;
  uint64_t v84 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  if (!sub_1CCAAA1BC((uint64_t)v78, *v7)) {
    return 0;
  }
  int v8 = *((_DWORD *)a2 + 5);
  int v9 = (v8 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v8 & 0x7FFFFFF)];
  uint64_t v10 = (unsigned __int8 *)v9[4];
  if (!v10) {
    return 0;
  }
  *uint64_t v79 = v10;
  int v11 = *((_DWORD *)a2 + 5);
  uint64_t v12 = (v11 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v11 & 0x7FFFFFF)];
  uint64_t v13 = (unsigned __int8 *)v12[8];
  if (!v13) {
    return 0;
  }
  char *v80 = v13;
  v78[0] = (llvm::Type **)&v86;
  uint64_t v14 = v82;
  uint64_t v15 = **a1;
  if (v82 != v15 && v82 != *a1[1]) {
    return 0;
  }
  int v17 = v85;
  if (!a3)
  {
    if (v82 != v15 || v85 != 40)
    {
LABEL_63:
      if (v14 != v15 || v17 != 38)
      {
LABEL_89:
        uint64_t v44 = *a1[1];
        if (v14 == v44 && v17 == 40)
        {
          uint64_t v45 = *(unsigned int *)(v81 + 8);
          if (v45 >= 0x41)
          {
            int v46 = 0;
            int64_t v47 = (unint64_t)(v45 + 63) >> 6;
            do
            {
              BOOL v21 = v47-- < 1;
              if (v21) {
                break;
              }
              unint64_t v48 = *(void *)(*(void *)v81 + 8 * v47);
              v46 += __clz(v48);
            }
            while (!v48);
            int v49 = v45 | 0xFFFFFFC0;
            if ((v45 & 0x3F) == 0) {
              int v49 = 0;
            }
            int v50 = v46 + v49;
            if (v50 != v45 && v50 != v45 - 1) {
              return 0;
            }
          }
          else if (*(void *)v81 > 1uLL)
          {
            return 0;
          }
          if (sub_1CCAA9E5C(v78, v83, v84)) {
            return 1;
          }
          uint64_t v14 = v82;
          uint64_t v44 = *a1[1];
          int v17 = v85;
        }
        if (v14 != v44 || v17 != 38) {
          return 0;
        }
        unsigned int v71 = *(_DWORD *)(v81 + 8);
        if (v71 > 0x40) {
          operator new[]();
        }
        unint64_t v70 = *(void *)v81;
        llvm::APInt::operator+=((uint64_t)&v70, 1uLL);
        uint64_t v62 = v71;
        unint64_t v63 = v70;
        unsigned int v71 = 0;
        if (v62 >= 0x41)
        {
          int v64 = 0;
          int64_t v65 = (unint64_t)(v62 + 63) >> 6;
          do
          {
            BOOL v21 = v65-- < 1;
            if (v21) {
              break;
            }
            unint64_t v66 = *(void *)(v70 + 8 * v65);
            v64 += __clz(v66);
          }
          while (!v66);
          BOOL v57 = 0;
          int v67 = v62 | 0xFFFFFFC0;
          if ((v62 & 0x3F) == 0) {
            int v67 = 0;
          }
          int v68 = v64 + v67;
          if (v68 != v62 && v68 != v62 - 1)
          {
LABEL_145:
            if (v63) {
              MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
            }
LABEL_147:
            if (v71 < 0x41 || (unint64_t v61 = v70) == 0) {
              return v57;
            }
LABEL_149:
            MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
            return v57;
          }
        }
        else if (v70 > 1)
        {
          return 0;
        }
        BOOL v57 = sub_1CCAA9E5C(v78, v84, v83);
        if (v62 < 0x41) {
          goto LABEL_147;
        }
        goto LABEL_145;
      }
      unsigned int v73 = *(_DWORD *)(v81 + 8);
      if (v73 > 0x40) {
        operator new[]();
      }
      unint64_t v72 = *(void *)v81;
      llvm::APInt::operator+=((uint64_t)&v72, 2uLL);
      uint64_t v35 = v73;
      unint64_t v36 = v72;
      unsigned int v73 = 0;
      if (v35 >= 0x41)
      {
        int v37 = 0;
        int64_t v38 = (unint64_t)(v35 + 63) >> 6;
        do
        {
          BOOL v21 = v38-- < 1;
          if (v21) {
            break;
          }
          unint64_t v39 = *(void *)(v72 + 8 * v38);
          v37 += __clz(v39);
        }
        while (!v39);
        BOOL v40 = 0;
        int v41 = v35 | 0xFFFFFFC0;
        if ((v35 & 0x3F) == 0) {
          int v41 = 0;
        }
        int v42 = v37 + v41;
        if (v42 != v35 && v42 != v35 - 1)
        {
LABEL_82:
          if (v36) {
            MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
          }
LABEL_84:
          if (v73 >= 0x41 && v72) {
            MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
          }
          if (v40) {
            return 1;
          }
          goto LABEL_88;
        }
      }
      else if (v72 > 1)
      {
LABEL_88:
        uint64_t v14 = v82;
        int v17 = v85;
        goto LABEL_89;
      }
      BOOL v40 = sub_1CCAA9E5C(v78, v83, v84);
      if (v35 < 0x41) {
        goto LABEL_84;
      }
      goto LABEL_82;
    }
    unsigned int v75 = *(_DWORD *)(v81 + 8);
    if (v75 > 0x40) {
      operator new[]();
    }
    unint64_t v74 = *(void *)v81;
    llvm::APInt::operator+=((uint64_t)&v74, 1uLL);
    uint64_t v26 = v75;
    unint64_t v27 = v74;
    unsigned int v75 = 0;
    if (v26 >= 0x41)
    {
      int v28 = 0;
      int64_t v29 = (unint64_t)(v26 + 63) >> 6;
      do
      {
        BOOL v21 = v29-- < 1;
        if (v21) {
          break;
        }
        unint64_t v30 = *(void *)(v74 + 8 * v29);
        v28 += __clz(v30);
      }
      while (!v30);
      BOOL v31 = 0;
      int v32 = v26 | 0xFFFFFFC0;
      if ((v26 & 0x3F) == 0) {
        int v32 = 0;
      }
      int v33 = v28 + v32;
      if (v33 != v26 && v33 != v26 - 1)
      {
LABEL_56:
        if (v27) {
          MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
LABEL_58:
        if (v75 >= 0x41 && v74) {
          MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
        }
        if (v31) {
          return 1;
        }
        goto LABEL_62;
      }
    }
    else if (v74 > 1)
    {
LABEL_62:
      uint64_t v14 = v82;
      uint64_t v15 = **a1;
      int v17 = v85;
      goto LABEL_63;
    }
    BOOL v31 = sub_1CCAA9E5C(v78, v84, v83);
    if (v26 < 0x41) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  if (v85 != 40) {
    goto LABEL_38;
  }
  uint64_t v18 = *(unsigned int *)(v81 + 8);
  if (v18 >= 0x41)
  {
    int v19 = 0;
    int64_t v20 = (unint64_t)(v18 + 63) >> 6;
    do
    {
      BOOL v21 = v20-- < 1;
      if (v21) {
        break;
      }
      unint64_t v22 = *(void *)(*(void *)v81 + 8 * v20);
      v19 += __clz(v22);
    }
    while (!v22);
    int v23 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      int v23 = 0;
    }
    int v24 = v19 + v23;
    if (v24 != v18 && v24 != v18 - 1) {
      return 0;
    }
  }
  else if (*(void *)v81 > 1uLL)
  {
    return 0;
  }
  if (!sub_1CCAA9E5C(v78, v84, v83))
  {
    int v17 = v85;
LABEL_38:
    if (v17 != 38) {
      return 0;
    }
    unsigned int v77 = *(_DWORD *)(v81 + 8);
    if (v77 > 0x40) {
      operator new[]();
    }
    unint64_t v76 = *(void *)v81;
    llvm::APInt::operator+=((uint64_t)&v76, 1uLL);
    uint64_t v52 = v77;
    unint64_t v53 = v76;
    unsigned int v77 = 0;
    if (v52 >= 0x41)
    {
      int v54 = 0;
      int64_t v55 = (unint64_t)(v52 + 63) >> 6;
      do
      {
        BOOL v21 = v55-- < 1;
        if (v21) {
          break;
        }
        unint64_t v56 = *(void *)(v76 + 8 * v55);
        v54 += __clz(v56);
      }
      while (!v56);
      BOOL v57 = 0;
      int v58 = v52 | 0xFFFFFFC0;
      if ((v52 & 0x3F) == 0) {
        int v58 = 0;
      }
      int v59 = v54 + v58;
      if (v59 != v52 && v59 != v52 - 1)
      {
LABEL_125:
        if (v53) {
          MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
        }
LABEL_127:
        if (v77 < 0x41) {
          return v57;
        }
        unint64_t v61 = v76;
        if (!v76) {
          return v57;
        }
        goto LABEL_149;
      }
    }
    else if (v76 > 1)
    {
      return 0;
    }
    BOOL v57 = sub_1CCAA9E5C(v78, v83, v84);
    if (v52 < 0x41) {
      goto LABEL_127;
    }
    goto LABEL_125;
  }
  return 1;
}

BOOL sub_1CCAA9E5C(llvm::Type ***a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = *a1;
  int v6 = **a1;
  if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12) {
    int v6 = (llvm::Type *)**((void **)v6 + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  unsigned int v8 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  __src = (void *)(1 << (PrimitiveSizeInBits - 1));
  int v9 = *v5;
  if ((*((_DWORD *)*v5 + 2) & 0xFE) == 0x12) {
    int v9 = (llvm::Type *)**((void **)v9 + 2);
  }
  unsigned int v10 = llvm::Type::getPrimitiveSizeInBits(v9);
  unsigned int v11 = v10;
  if (v10 > 0x40) {
    operator new[]();
  }
  if (v10) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
  }
  else {
    unint64_t v12 = 0;
  }
  BOOL v21 = (void *)(v12 & ~(1 << (v10 - 1)));
  if (v8 > 0x40) {
    operator new[]();
  }
  unsigned int v20 = v8;
  int v19 = __src;
  if (sub_1CBF53154((llvm::APInt *)&v19, a2))
  {
    if (v11 > 0x40) {
      operator new[]();
    }
    unsigned int v18 = v11;
    int v17 = v21;
    BOOL v15 = sub_1CBF53154((llvm::APInt *)&v17, a3);
    BOOL v14 = v15;
    if (v18 >= 0x41 && v17) {
      MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  if (v11 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t sub_1CCAAA1BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 81)
  {
    uint64_t v5 = *(void *)(a2 - 64);
    if (v5)
    {
      **(void **)(a1 + 8) = v5;
      uint64_t result = sub_1CBF528D8(a1 + 16, *(unsigned __int8 **)(a2 - 32));
      if (result)
      {
        **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CCAAA230(void **a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 16) - 53 <= 1)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    uint64_t v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
    uint64_t v5 = *v4;
    if (v5)
    {
      int v6 = a1 + 1;
      **a1 = v5;
      int v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0) {
        uint64_t v8 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v8 = a2 - 32 * (v7 & 0x7FFFFFF);
      }
      uint64_t v9 = *(void *)(v8 + 32);
      if (sub_1CBC5BE40(v6, v9)) {
        return 1;
      }
      if (v9)
      {
        *a1[2] = v9;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1CCAAA2CC(void **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 32);
  if (*(_DWORD *)(v2 + 36) == 274)
  {
    int v3 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v4 = *v3;
    if (!*v3) {
      goto LABEL_25;
    }
    uint64_t v5 = v3[4];
  }
  else
  {
    if (*(unsigned char *)(a2 + 16) != 85) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(a2 - 96);
    if (!v9 || *(unsigned char *)(v9 + 16) != 81) {
      goto LABEL_25;
    }
    uint64_t v10 = *(void *)(a2 - 64);
    uint64_t v4 = *(void *)(v9 - 64);
    uint64_t v5 = *(void *)(v9 - 32);
    if ((v10 != v4 || v2 != v5) && (v2 != v4 || v10 != v5)) {
      goto LABEL_25;
    }
    unsigned int v13 = *(_WORD *)(v9 + 18) & 0x3F;
    if (v10 != v4)
    {
      if (v13 - 32 < 8 || v13 < 0x10) {
        goto LABEL_25;
      }
      if (v13 == 40) {
        LOBYTE(v13) = 39;
      }
      else {
        LOBYTE(v13) = 38;
      }
    }
    if (!v4 || (v13 & 0x3E) != 0x26) {
      goto LABEL_25;
    }
  }
  **a1 = v4;
  if (v5)
  {
    int v6 = a1 + 1;
LABEL_6:
    **int v6 = v5;
    return 1;
  }
LABEL_25:
  uint64_t v15 = *(void *)(a2 - 32);
  if (*(_DWORD *)(v15 + 36) == 275)
  {
    uint8x8_t v16 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v17 = *v16;
    if (!*v16) {
      goto LABEL_44;
    }
    uint64_t v5 = v16[4];
  }
  else
  {
    if (*(unsigned char *)(a2 + 16) != 85) {
      goto LABEL_44;
    }
    uint64_t v18 = *(void *)(a2 - 96);
    if (!v18 || *(unsigned char *)(v18 + 16) != 81) {
      goto LABEL_44;
    }
    uint64_t v19 = *(void *)(a2 - 64);
    uint64_t v17 = *(void *)(v18 - 64);
    uint64_t v5 = *(void *)(v18 - 32);
    if ((v19 != v17 || v15 != v5) && (v15 != v17 || v19 != v5)) {
      goto LABEL_44;
    }
    uint64_t v22 = *(_WORD *)(v18 + 18) & 0x3F;
    if (v19 == v17)
    {
      char v37 = v22;
    }
    else
    {
      if ((v22 - 32) < 6) {
        goto LABEL_44;
      }
      char v37 = 41;
      if (((1 << v22) & 0x3000000FFFFLL) != 0) {
        goto LABEL_44;
      }
      if (v22 != 38) {
        char v37 = 40;
      }
    }
    if (!v17 || (v37 & 0x3E) != 0x28) {
      goto LABEL_44;
    }
  }
  *a1[2] = v17;
  if (v5)
  {
    int v6 = a1 + 3;
    goto LABEL_6;
  }
LABEL_44:
  uint64_t v23 = *(void *)(a2 - 32);
  if (*(_DWORD *)(v23 + 36) == 305)
  {
    int v24 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v25 = *v24;
    if (!*v24) {
      goto LABEL_56;
    }
    uint64_t v5 = v24[4];
LABEL_47:
    *a1[4] = v25;
    if (v5)
    {
      int v6 = a1 + 5;
      goto LABEL_6;
    }
    goto LABEL_56;
  }
  if (*(unsigned char *)(a2 + 16) == 85)
  {
    uint64_t v26 = *(void *)(a2 - 96);
    if (v26)
    {
      if (*(unsigned char *)(v26 + 16) == 81)
      {
        if ((v27 = *(void *)(a2 - 64), v25 = *(void *)(v26 - 64), uint64_t v5 = *(void *)(v26 - 32), v27 == v25)
          && v23 == v5
          || v23 == v25 && v27 == v5)
        {
          uint64_t v28 = *(_WORD *)(v26 + 18) & 0x3F;
          if (v27 == v25)
          {
            char v29 = v28;
          }
          else
          {
            char v29 = 35;
            if (((1 << v28) & 0x3CF0000FFFFLL) != 0) {
              goto LABEL_56;
            }
            if (v28 != 36) {
              char v29 = 34;
            }
          }
          if (v25 && (v29 & 0x3E) == 0x22) {
            goto LABEL_47;
          }
        }
      }
    }
  }
LABEL_56:
  uint64_t v30 = *(void *)(a2 - 32);
  if (*(_DWORD *)(v30 + 36) == 306)
  {
    BOOL v31 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    uint64_t v7 = *v31;
    if (!*v31) {
      return v7;
    }
    uint64_t v5 = v31[4];
    *a1[6] = v7;
    if (v5) {
      goto LABEL_59;
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v32 = *(void *)(a2 - 96);
  if (v32 && *(unsigned char *)(v32 + 16) == 81)
  {
    if ((v33 = *(void *)(a2 - 64), v34 = *(void *)(v32 - 64), uint64_t v5 = *(void *)(v32 - 32), v33 == v34) && v30 == v5
      || (uint64_t v7 = 0, v30 == v34) && v33 == v5)
    {
      uint64_t v35 = *(_WORD *)(v32 + 18) & 0x3F;
      if (v33 == v34)
      {
        char v36 = v35;
      }
      else
      {
        char v36 = 37;
        uint64_t v7 = 0;
        if (((1 << v35) & 0x3F30000FFFFLL) != 0) {
          return v7;
        }
        if (v35 != 34) {
          char v36 = 36;
        }
      }
      uint64_t v7 = 0;
      if (v34)
      {
        if ((v36 & 0x3E) == 0x24)
        {
          *a1[6] = v34;
          if (v5)
          {
LABEL_59:
            int v6 = a1 + 7;
            goto LABEL_6;
          }
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1CCAAA664(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3 || *(void *)(v3 + 8)) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 91)
  {
    uint64_t v2 = *(void *)(a2 - 64);
    if (v2)
    {
      **(void **)a1 = v2;
      uint64_t v2 = *(void *)(a2 - 32);
      if (v2)
      {
        **(void **)(a1 + 8) = v2;
        uint64_t v6 = *(unsigned int *)(a2 + 72);
        uint64_t v7 = *(void **)(a1 + 16);
        *uint64_t v7 = *(void *)(a2 + 64);
        v7[1] = v6;
        LOBYTE(v2) = 1;
      }
    }
  }
  return (v5 == 91) & v2;
}

uint64_t sub_1CCAAA6CC(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (uint64_t)(a1 + 1);
  **a1 = v6;
  int v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0) {
    uint64_t v9 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v9 = a2 - 32 * (v8 & 0x7FFFFFF);
  }
  uint64_t result = sub_1CBF5250C(v7, *(llvm::Constant **)(v9 + 32));
  if (result)
  {
    int v11 = *(_DWORD *)(a2 + 20);
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v12 = a2 - 32 * (v11 & 0x7FFFFFF);
    }
    uint64_t v13 = *(void *)(v12 + 64);
    if (v13)
    {
      *a1[2] = v13;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCAAA780(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  uint64_t v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  **a1 = v4;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 32);
  if (!v7) {
    return 0;
  }
  *a1[1] = v7;
  int v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0) {
    uint64_t v9 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v9 = a2 - 32 * (v8 & 0x7FFFFFF);
  }
  uint64_t result = 0;
  uint64_t v11 = *(void *)(v9 + 64);
  if (v11)
  {
    unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 <= 0x14)
    {
      if (v12 == 16)
      {
        uint64_t v13 = *(unsigned int *)(v11 + 32);
        if (v13 >= 0x41)
        {
          int v15 = 0;
          int64_t v16 = (unint64_t)(v13 + 63) >> 6;
          do
          {
            if (v16-- < 1) {
              break;
            }
            unint64_t v18 = *(void *)(*(void *)(v11 + 24) + 8 * v16);
            v15 += __clz(v18);
          }
          while (!v18);
          int v19 = v13 | 0xFFFFFFC0;
          if ((v13 & 0x3F) == 0) {
            int v19 = 0;
          }
          if (v15 + v19 != v13) {
            return sub_1CC03F414((uint64_t)&v20, (llvm::Constant *)v11);
          }
        }
        else if (*(void *)(v11 + 24))
        {
          return sub_1CC03F414((uint64_t)&v20, (llvm::Constant *)v11);
        }
      }
      else if (v12 == 17)
      {
        if ((sub_1CB844168(v11, 0.0) & 1) == 0) {
          return sub_1CC03F414((uint64_t)&v20, (llvm::Constant *)v11);
        }
      }
      else if (v12 - 18 >= 3 && v12 != 13)
      {
        return sub_1CC03F414((uint64_t)&v20, (llvm::Constant *)v11);
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_1CCAAA8D8(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(a2 + 72)
          && *(_DWORD *)(v3 + 36) == *(_DWORD *)a1)
        {
          uint64_t v4 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
          if (*(void *)(a1 + 32) == *(void *)(v4 + 32 * *(unsigned int *)(a1 + 24))
            && (sub_1CD68CCA4(*(unsigned __int8 **)(v4 + 32 * *(unsigned int *)(a1 + 40))) & 1) != 0)
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1CCAAA970(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(a2 + 72)
          && *(_DWORD *)(v3 + 36) == *(_DWORD *)a1)
        {
          uint64_t v4 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24));
          if (v4)
          {
            **(void **)(a1 + 32) = v4;
            if ((sub_1CD68CCA4(*(unsigned __int8 **)(a2
                                                    - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                                    + 32 * *(unsigned int *)(a1 + 40))) & 1) != 0)
              return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL canTryToConstantAddTwoShiftAmounts(llvm::Value *a1, llvm::Value *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2 != *(void *)a4) {
    return 0;
  }
  uint64_t v6 = *(void *)a1;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  int v8 = *a3;
  if ((*((_DWORD *)*a3 + 2) & 0xFE) == 0x12) {
    int v8 = (llvm::Type *)**((void **)v8 + 2);
  }
  int v9 = PrimitiveSizeInBits + llvm::Type::getPrimitiveSizeInBits(v8);
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
    uint64_t v4 = **(void **)(v4 + 16);
  }
  unsigned int v10 = v9 - 2;
  unsigned int v11 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  if (v11 > 0x40) {
    operator new[]();
  }
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v12 = 0;
  }
  return v12 >= v10;
}

llvm::Value *sub_1CCAAABC0(uint64_t a1, unsigned char *a2, long long *a3, int a4)
{
  int64_t v47 = 0;
  uint64_t v48 = 0;
  *(void *)&long long v40 = &v48;
  *((void *)&v40 + 1) = &v47;
  *(void *)&long long v41 = &v47;
  int v8 = 0;
  if (sub_1CCAB2CA8((void **)&v40, (uint64_t)a2))
  {
    uint64_t v45 = 0;
    int v46 = 0;
    uint64_t v9 = v48;
    *(void *)&long long v40 = &v46;
    *((void *)&v40 + 1) = &v45;
    *(void *)&long long v41 = &v46;
    int v10 = sub_1CCAB2D60((void **)&v40, v48, (char)&v46);
    if (v9)
    {
      uint64_t v11 = 16;
      if (v10) {
        uint64_t v11 = 8;
      }
      **(void **)((char *)&v40 + v11) = v9;
    }
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    *(void *)&long long v40 = &v44;
    *((void *)&v40 + 1) = &v43;
    *(void *)&long long v41 = &v43;
    int v8 = 0;
    if (sub_1CCAB2DD8((void **)&v40, (uint64_t)v46))
    {
      if (canTryToConstantAddTwoShiftAmounts((llvm::Value *)a2, v47, (llvm::Type **)v46, v43))
      {
        BOOL v12 = a2 && (a2[16] & 0xFE) == 0x36 && v46 && (*((unsigned char *)v46 + 16) & 0xFE) == 54;
        if (!a4 || v12)
        {
          int v13 = a2[16];
          if ((v13 == *((unsigned __int8 *)v46 + 16) || a4)
            && (!v45
             || (a4 & 1) != 0
             || (uint64_t v14 = *(void *)(*((void *)a2 - 8) + 8)) != 0 && !*(void *)(v14 + 8)
             || (uint64_t v15 = *(void *)(*((void *)a2 - 4) + 8)) != 0 && !*(void *)(v15 + 8)))
          {
            long long v16 = a3[2];
            long long v41 = a3[1];
            long long v42 = v16;
            long long v40 = *a3;
            *(void *)&long long v42 = a2;
            uint64_t v17 = sub_1CC02A5B0(v47, v43, 0, 0, (uint64_t)&v40, (llvm::DSOLocalEquivalent **)3);
            if (v17)
            {
              unint64_t v18 = v17;
              if (*((unsigned __int8 *)v17 + 16) < 0x15u)
              {
                int v19 = *(llvm::Type **)v17;
                if ((*(_DWORD *)(*(void *)v18 + 8) & 0xFE) == 0x12) {
                  int v19 = (llvm::Type *)**((void **)v19 + 2);
                }
                unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
                BOOL v21 = *v44;
                if ((*((_DWORD *)*v44 + 2) & 0xFE) == 0x12) {
                  BOOL v21 = (llvm::Type *)**((void **)v21 + 2);
                }
                int v22 = llvm::Type::getPrimitiveSizeInBits(v21);
                int v23 = v22;
                unsigned int v39 = PrimitiveSizeInBits;
                if (PrimitiveSizeInBits > 0x40) {
                  operator new[]();
                }
                if (PrimitiveSizeInBits) {
                  unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                }
                else {
                  LODWORD(v24) = 0;
                }
                uint64_t v38 = v24 & v22;
                *(void *)&long long v40 = 36;
                *((void *)&v40 + 1) = &v38;
                int v26 = sub_1CC9F981C((uint64_t)&v40, v18);
                if (v39 >= 0x41 && v38) {
                  MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
                }
                if (v26)
                {
                  if (!v12 || !v45 && !a4)
                  {
LABEL_39:
                    ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast((llvm::Type **)v18, (llvm::Type ***)*v44, v25);
                    LOWORD(v42) = 257;
                    uint64_t v28 = llvm::BinaryOperator::Create(v13 - 28, v44, (uint64_t)ZExtOrBitCast, (const char **)&v40, 0);
                    int v8 = v28;
                    if (v45)
                    {
                      char v29 = *(uint64_t **)(a1 + 24);
                      LOWORD(v42) = 257;
                      sub_1CB844E0C(v29, v8, (uint64_t)&v40);
                      uint64_t v30 = *(void *)a2;
                      LOWORD(v42) = 257;
                      return llvm::CastInst::Create(38, (uint64_t)v8, v30, (const char **)&v40, 0);
                    }
                    else
                    {
                      if (v13 == 53)
                      {
                        if ((a2[17] & 2) != 0) {
                          char v31 = *((unsigned char *)v46 + 17) & 2;
                        }
                        else {
                          char v31 = 0;
                        }
                        char v36 = *((unsigned char *)v28 + 17) & 0xFD | v31;
                        *((unsigned char *)v28 + 17) = v36;
                        if ((a2[17] & 4) != 0) {
                          char v37 = *((unsigned char *)v46 + 17) & 4;
                        }
                        else {
                          char v37 = 0;
                        }
                        char v35 = v36 & 0xFB;
                      }
                      else
                      {
                        if ((a2[17] & 2) != 0) {
                          char v35 = *((unsigned char *)v46 + 17) & 2;
                        }
                        else {
                          char v35 = 0;
                        }
                        char v37 = *((unsigned char *)v28 + 17) & 0xFD;
                      }
                      *((unsigned char *)v28 + 17) = v37 | v35;
                    }
                    return v8;
                  }
                  unsigned int v39 = PrimitiveSizeInBits;
                  if (PrimitiveSizeInBits) {
                    unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  }
                  else {
                    LODWORD(v32) = 0;
                  }
                  uint64_t v38 = v32 & (v23 - 1);
                  *(void *)&long long v40 = 32;
                  *((void *)&v40 + 1) = &v38;
                  int v33 = sub_1CC9F981C((uint64_t)&v40, v18);
                  if (v39 >= 0x41 && v38) {
                    MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
                  }
                  if (v33)
                  {
                    if (a4) {
                      return (llvm::Value *)v44;
                    }
                    goto LABEL_39;
                  }
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return v8;
}

llvm::Value *sub_1CCAAB0DC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  BOOL result = (llvm::Value *)sub_1CC9D6B70(a1, (uint64_t)a2);
  if (result) {
    return result;
  }
  uint64_t v5 = *((void *)a2 - 8);
  uint64_t v6 = (uint64_t ***)*((void *)a2 - 4);
  unsigned int v141 = 0;
  uint64_t v147 = (llvm::Constant **)&v141;
  uint64_t v7 = v6[1];
  if (v7 && !v7[1] && sub_1CBC5BEAC(&v147, (uint64_t)v6))
  {
    int v8 = v141;
    uint64_t v9 = *(void *)a2;
    if ((*((unsigned char *)v6 + 23) & 0x10) == 0)
    {
      int v33 = 0;
      unint64_t v32 = &byte_1CFBCE98E;
      goto LABEL_36;
    }
    uint64_t v10 = ***v6;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v6)
      {
LABEL_35:
        char v31 = v14[1];
        uint64_t v34 = (llvm::Constant *)*v31;
        unint64_t v32 = (char *)(v31 + 2);
        int v33 = v34;
LABEL_36:
        char v35 = *(uint64_t **)(a1 + 24);
        __int16 v155 = 261;
        uint64_t v153 = (uint64_t)v32;
        int v154 = v33;
        if (*(void *)v141 != v9)
        {
          if (v141[16] <= 0x14u)
          {
            int v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v35[9] + 224))(v35[9], 39, v141, v9);
            if (v8) {
              BOOL v39 = v8[16] >= 0x1Cu;
            }
            else {
              BOOL v39 = 0;
            }
            if (v39)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v35[10] + 16))(v35[10], v8, &v153, v35[6], v35[7]);
              uint64_t v128 = *((unsigned int *)v35 + 2);
              if (v128)
              {
                uint64_t v129 = *v35;
                uint64_t v130 = v129 + 16 * v128;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v129, *(llvm::MDNode **)(v129 + 8));
                  v129 += 16;
                }
                while (v129 != v130);
              }
            }
          }
          else
          {
            WORD4(v150) = 257;
            int v8 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v141, v9, (const char **)&v147, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v35[10] + 16))(v35[10], v8, &v153, v35[6], v35[7]);
            uint64_t v36 = *((unsigned int *)v35 + 2);
            if (v36)
            {
              uint64_t v37 = *v35;
              uint64_t v38 = v37 + 16 * v36;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
                v37 += 16;
              }
              while (v37 != v38);
            }
          }
        }
        char v40 = a2[16] - 28;
        WORD4(v150) = 257;
        long long v41 = (const char **)&v147;
        long long v42 = (void *)v5;
        uint64_t v43 = (llvm::Instruction *)v8;
        return llvm::BinaryOperator::Create(v40, v42, (uint64_t)v43, v41, 0);
      }
      int v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v6)
        {
          uint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_35;
        }
      }
    }
    uint64_t v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_35;
  }
  if (sub_1CCAB350C(a1, (llvm::UndefValue *)a2)) {
    return (llvm::Value *)a2;
  }
  if (*(unsigned __int8 *)(v5 + 16) <= 0x14u && *((unsigned char *)v6 + 16) == 85)
  {
    BOOL result = (llvm::Value *)sub_1CC9D447C(a1, a2, v6, 0, v18);
    if (result) {
      return result;
    }
  }
  if (*((unsigned __int8 *)v6 + 16) <= 0x14u)
  {
    v146 = 0;
    uint64_t v147 = &v146;
    int v148 = 0;
    if (sub_1CBF5295C((uint64_t)&v147, (llvm::Constant *)v6))
    {
      int v22 = a2[16];
      int v23 = v22 - 28;
      if (v22 == 55) {
        goto LABEL_23;
      }
      unint64_t v24 = v146;
      if (*((_DWORD *)v146 + 2) >= 0x41u) {
        unint64_t v24 = *(llvm::ConstantExpr **)v146;
      }
      if (sub_1CCAABCC0(v5, *(unsigned int *)v24, v23 == 25, (const llvm::DataLayout **)a1, (llvm::AssumptionCache *)a2))
      {
        int v59 = v146;
        if (*((_DWORD *)v146 + 2) >= 0x41u) {
          int v59 = *(llvm::ConstantExpr **)v146;
        }
        int v60 = sub_1CCAAC21C(v5, *(unsigned int *)v59, v23 == 25, a1);
        BOOL result = (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v60);
      }
      else
      {
LABEL_23:
        BOOL result = (llvm::Value *)sub_1CC9D74E0(a1, a2, v19, v20, v21);
        if (result) {
          return result;
        }
        uint64_t v25 = *(void *)(v5 + 8);
        if (!v25 || *(void *)(v25 + 8)) {
          goto LABEL_78;
        }
        unsigned int v26 = *(unsigned __int8 *)(v5 + 16);
        if (v26 < 0x1C || v26 - 59 < 0xFFFFFFEE)
        {
LABEL_31:
          if (v26 != 85) {
            goto LABEL_78;
          }
          int v29 = *(_DWORD *)(v5 + 20);
          if ((v29 & 0x40000000) != 0) {
            uint64_t v30 = *(uint64_t **)(v5 - 8);
          }
          else {
            uint64_t v30 = (uint64_t *)(v5 - 32 * (v29 & 0x7FFFFFF));
          }
          uint64_t v44 = *v30;
          if (*v30
            && (uint64_t v45 = v30[4], (v46 = *(void *)(v45 + 8)) != 0)
            && !*(void *)(v46 + 8)
            && (unsigned int v47 = *(unsigned __int8 *)(v45 + 16), v47 >= 0x1C)
            && v47 - 59 >= 0xFFFFFFEE
            && ((v29 & 0x40000000) != 0 ? (uint64_t v48 = *(void *)(v5 - 8)) : (uint64_t v48 = v5 - 32 * (v29 & 0x7FFFFFF)),
                (uint64_t v57 = *(void *)(v48 + 64)) != 0))
          {
            uint64_t v135 = v57;
            uint64_t v137 = v45;
            v145 = 0;
            if (*(unsigned __int8 *)(v57 + 16) >= 0x15u && *(void *)(v45 - 64) == v57)
            {
              uint64_t v118 = *(unsigned __int8 **)(v45 - 32);
              uint64_t v147 = &v145;
              int v148 = 0;
              if (sub_1CBF528D8((uint64_t)&v147, v118))
              {
                if (sub_1CCAACA0C(a2[16], v137))
                {
                  unsigned __int8 v120 = a2[16] - 28;
                  int v121 = *(llvm::Constant **)(v137 - 32);
                  uint64_t v122 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), v121, (llvm::Constant *)v6, v119);
                  if (!v122)
                  {
                    uint64_t v131 = *(void ***)v121;
                    if (*(void *)v121)
                    {
                      uint64_t v153 = (uint64_t)v121;
                      int v154 = (llvm::Constant *)v6;
                      uint64_t v132 = **v131 + 1512;
                      LODWORD(v147) = v120;
                      int v148 = (llvm::Constant **)&v153;
                      uint64_t v149 = 2;
                      long long v150 = 0u;
                      long long v151 = 0u;
                      uint64_t v152 = 0;
                      uint64_t v122 = sub_1CC56C20C(v132, (uint64_t)v131, (unsigned __int8 *)&v147);
                    }
                    else
                    {
                      uint64_t v122 = 0;
                    }
                  }
                  uint64_t v123 = *(void *)(a1 + 24);
                  uint64_t v124 = a2[16] - 28;
                  WORD4(v150) = 257;
                  uint64_t v125 = sub_1CB844E98(v123, v124, v135, (uint64_t)v6, (uint64_t)&v147, 0);
                  uint64_t v126 = *(void *)(a1 + 24);
                  uint64_t v127 = *(unsigned __int8 *)(v137 + 16) - 28;
                  WORD4(v150) = 257;
                  uint64_t v114 = (uint64_t *)sub_1CB844E98(v126, v127, (uint64_t)v125, v122, (uint64_t)&v147, 0);
                  WORD4(v150) = 257;
                  uint64_t v113 = v44;
                  uint64_t v112 = v125;
LABEL_133:
                  BOOL result = sub_1CC199EFC(v113, v114, (uint64_t)v112, (const char **)&v147, 0, 0);
                  goto LABEL_57;
                }
              }
            }
            if (*(unsigned char *)(v5 + 16) != 85) {
              goto LABEL_78;
            }
            int v29 = *(_DWORD *)(v5 + 20);
            if ((v29 & 0x40000000) == 0) {
              goto LABEL_63;
            }
          }
          else if ((v29 & 0x40000000) == 0)
          {
LABEL_63:
            int v58 = (uint64_t *)(v5 - 32 * (v29 & 0x7FFFFFF));
            goto LABEL_72;
          }
          int v58 = *(uint64_t **)(v5 - 8);
LABEL_72:
          uint64_t v61 = *v58;
          if (!*v58) {
            goto LABEL_78;
          }
          uint64_t v62 = v58[4];
          if (!v62) {
            goto LABEL_78;
          }
          uint64_t v63 = v58[8];
          uint64_t v64 = *(void *)(v63 + 8);
          if (!v64) {
            goto LABEL_78;
          }
          if (*(void *)(v64 + 8)) {
            goto LABEL_78;
          }
          unsigned int v65 = *(unsigned __int8 *)(v63 + 16);
          if (v65 < 0x1C) {
            goto LABEL_78;
          }
          if (v65 - 59 < 0xFFFFFFEE) {
            goto LABEL_78;
          }
          uint64_t v136 = v62;
          uint64_t v138 = v63;
          v145 = 0;
          if (*(unsigned __int8 *)(v62 + 16) < 0x15u) {
            goto LABEL_78;
          }
          if (*(void *)(v63 - 64) != v62) {
            goto LABEL_78;
          }
          uint64_t v102 = *(unsigned __int8 **)(v63 - 32);
          uint64_t v147 = &v145;
          int v148 = 0;
          if (!sub_1CBF528D8((uint64_t)&v147, v102) || (sub_1CCAACA0C(a2[16], v138) & 1) == 0) {
            goto LABEL_78;
          }
          unsigned __int8 v104 = a2[16] - 28;
          uint64_t v105 = *(llvm::Constant **)(v138 - 32);
          uint64_t v106 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), v105, (llvm::Constant *)v6, v103);
          if (!v106)
          {
            uint64_t v133 = *(void ***)v105;
            if (*(void *)v105)
            {
              uint64_t v153 = (uint64_t)v105;
              int v154 = (llvm::Constant *)v6;
              uint64_t v134 = **v133 + 1512;
              LODWORD(v147) = v104;
              int v148 = (llvm::Constant **)&v153;
              uint64_t v149 = 2;
              long long v150 = 0u;
              long long v151 = 0u;
              uint64_t v152 = 0;
              uint64_t v106 = sub_1CC56C20C(v134, (uint64_t)v133, (unsigned __int8 *)&v147);
            }
            else
            {
              uint64_t v106 = 0;
            }
          }
          uint64_t v107 = *(void *)(a1 + 24);
          uint64_t v108 = a2[16] - 28;
          WORD4(v150) = 257;
          int v109 = sub_1CB844E98(v107, v108, v136, (uint64_t)v6, (uint64_t)&v147, 0);
          uint64_t v110 = *(void *)(a1 + 24);
          uint64_t v111 = *(unsigned __int8 *)(v138 + 16) - 28;
          WORD4(v150) = 257;
          uint64_t v112 = sub_1CB844E98(v110, v111, (uint64_t)v109, v106, (uint64_t)&v147, 0);
          WORD4(v150) = 257;
          uint64_t v113 = v61;
          uint64_t v114 = (uint64_t *)v109;
          goto LABEL_133;
        }
        v145 = 0;
        uint64_t v27 = *(unsigned __int8 **)(v5 - 32);
        uint64_t v147 = &v145;
        int v148 = 0;
        if (!sub_1CBF528D8((uint64_t)&v147, v27) || (sub_1CCAACA0C(a2[16], v5) & 1) == 0)
        {
          unsigned int v26 = *(unsigned __int8 *)(v5 + 16);
          goto LABEL_31;
        }
        unsigned __int8 v49 = a2[16] - 28;
        int v50 = *(llvm::Constant **)(v5 - 32);
        uint64_t v51 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), v50, (llvm::Constant *)v6, v28);
        if (!v51)
        {
          uint64_t v116 = *(void ***)v50;
          if (*(void *)v50)
          {
            uint64_t v153 = (uint64_t)v50;
            int v154 = (llvm::Constant *)v6;
            uint64_t v117 = **v116 + 1512;
            LODWORD(v147) = v49;
            int v148 = (llvm::Constant **)&v153;
            uint64_t v149 = 2;
            long long v150 = 0u;
            long long v151 = 0u;
            uint64_t v152 = 0;
            uint64_t v51 = sub_1CC56C20C(v117, (uint64_t)v116, (unsigned __int8 *)&v147);
          }
          else
          {
            uint64_t v51 = 0;
          }
        }
        uint64_t v52 = *(void *)(a1 + 24);
        uint64_t v53 = a2[16] - 28;
        uint64_t v54 = *(void *)(v5 - 64);
        WORD4(v150) = 257;
        int64_t v55 = (int32x2_t ****)sub_1CB844E98(v52, v53, v54, (uint64_t)v6, (uint64_t)&v147, 0);
        llvm::Value::takeName(v55, (llvm::Value *)v5);
        char v56 = *(unsigned char *)(v5 + 16) - 28;
        WORD4(v150) = 257;
        BOOL result = llvm::BinaryOperator::Create(v56, v55, v51, (const char **)&v147, 0);
      }
LABEL_57:
      if (result) {
        return result;
      }
    }
  }
LABEL_78:
  BOOL result = sub_1CCAAABC0(a1, a2, (long long *)(a1 + 88), 0);
  if (result) {
    return result;
  }
  v139 = 0;
  v140 = 0;
  if (*(unsigned __int8 *)(v5 + 16) <= 0x14u)
  {
    uint64_t v147 = &v140;
    int v148 = &v139;
    if (sub_1CC9F5930(&v147, (uint64_t)v6))
    {
      unsigned __int8 v67 = a2[16] - 28;
      int v68 = v139;
      long long v42 = llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), (llvm::Constant *)v5, v139, v66);
      if (!v42)
      {
        long long v42 = *(void **)v5;
        if (*(void *)v5)
        {
          uint64_t v153 = v5;
          int v154 = v68;
          uint64_t v115 = *(void *)*v42 + 1512;
          LODWORD(v147) = v67;
          int v148 = (llvm::Constant **)&v153;
          uint64_t v149 = 2;
          long long v150 = 0u;
          long long v151 = 0u;
          uint64_t v152 = 0;
          long long v42 = (void *)sub_1CC56C20C(v115, (uint64_t)v42, (unsigned __int8 *)&v147);
        }
      }
      char v40 = a2[16] - 28;
      uint64_t v43 = v140;
      WORD4(v150) = 257;
      long long v41 = (const char **)&v147;
      return llvm::BinaryOperator::Create(v40, v42, (uint64_t)v43, v41, 0);
    }
  }
  uint64_t v69 = v6[1];
  if (v69 && !v69[1])
  {
    int v73 = *((unsigned __int8 *)v6 + 16);
    if (v73 == 5)
    {
      if (*((_WORD *)v6 + 9) != 23) {
        goto LABEL_86;
      }
      int v85 = (llvm::Instruction **)&v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
      if (!*v85) {
        goto LABEL_86;
      }
      v140 = *v85;
      unint64_t v74 = (unsigned __int8 *)v85[4];
      if (!v74) {
        goto LABEL_86;
      }
    }
    else
    {
      if (v73 != 51) {
        goto LABEL_86;
      }
      if (!*(v6 - 8)) {
        goto LABEL_86;
      }
      v140 = (llvm::Instruction *)*(v6 - 8);
      unint64_t v74 = (unsigned __int8 *)*(v6 - 4);
      if (!v74 || v74[16] > 0x14u) {
        goto LABEL_86;
      }
    }
    if (!sub_1CC04A470((uint64_t)&v147, (llvm::Constant *)v74)) {
      goto LABEL_86;
    }
    uint64_t v86 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1uLL, 0);
    Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v74, v86, 0, 0);
    uint64_t v88 = *(void *)(a1 + 24);
    if ((*((unsigned char *)v6 + 23) & 0x10) == 0)
    {
      v99 = 0;
      char v98 = (uint64_t *)&byte_1CFBCE98E;
      goto LABEL_117;
    }
    uint64_t v89 = ***v6;
    uint64_t v90 = *(void *)(v89 + 152);
    uint64_t v91 = *(unsigned int *)(v89 + 168);
    if (v91)
    {
      LODWORD(v92) = (v91 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v93 = (uint64_t ****)(v90 + 16 * v92);
      __int16 v94 = *v93;
      if (*v93 == v6)
      {
LABEL_116:
        uint64_t v97 = v93[1];
        unsigned int v100 = (llvm::Constant **)*v97;
        char v98 = (uint64_t *)(v97 + 2);
        v99 = v100;
LABEL_117:
        WORD4(v150) = 261;
        uint64_t v147 = (llvm::Constant **)v98;
        int v148 = v99;
        uint64_t v101 = sub_1CBF52474(v88, v140, (uint64_t)Sub, (uint64_t)&v147);
        return (llvm::Value *)sub_1CC9D28DC(a1, (uint64_t)a2, 1u, (uint64_t)v101);
      }
      int v95 = 1;
      while (v94 != (uint64_t ***)-4096)
      {
        int v96 = v92 + v95++;
        uint64_t v92 = v96 & (v91 - 1);
        __int16 v94 = *(uint64_t ****)(v90 + 16 * v92);
        if (v94 == v6)
        {
          v93 = (uint64_t ****)(v90 + 16 * v92);
          goto LABEL_116;
        }
      }
    }
    v93 = (uint64_t ****)(v90 + 16 * v91);
    goto LABEL_116;
  }
LABEL_86:
  BOOL result = 0;
  uint64_t v70 = *((void *)a2 - 8);
  if (v70)
  {
    unsigned int v71 = *(unsigned __int8 *)(v70 + 16);
    if (v71 >= 0x1C && v71 - 59 > 0xFFFFFFFC)
    {
      uint64_t v72 = *(void *)(v70 + 8);
      if (!v72 || *(void *)(v72 + 8)) {
        return 0;
      }
      BOOL result = 0;
      uint64_t v75 = *(void *)(a1 + 24);
      v146 = 0;
      uint64_t v76 = *((void *)a2 - 4);
      if (v76 && *(unsigned __int8 *)(v76 + 16) <= 0x14u)
      {
        v145 = (llvm::Constant *)*((void *)a2 - 4);
        unsigned int v144 = a2[16] - 28;
        uint64_t v77 = *(void *)a2;
        uint64_t v142 = 0;
        uint64_t v143 = v77;
        uint64_t v147 = (llvm::Constant **)&v143;
        int v148 = (llvm::Constant **)&v144;
        uint64_t v149 = (uint64_t)&v142;
        *(void *)&long long v150 = &v146;
        *((void *)&v150 + 1) = &v145;
        char v78 = sub_1CCAB28B4((uint64_t **)&v147, *(void *)(v70 - 64));
        uint64_t v79 = (uint64_t *)(v70 - 32);
        if ((v78 & 1) != 0 || (v80 = sub_1CCAB28B4((uint64_t **)&v147, *v79), uint64_t v79 = (uint64_t *)(v70 - 64), v80))
        {
          uint64_t v81 = *v79;
          Add = llvm::ConstantExpr::getAdd(v146, v145, 0, 0);
          __int16 v155 = 257;
          int v83 = sub_1CB844E98(v75, v144, v142, (uint64_t)Add, (uint64_t)&v153, 0);
          uint64_t v84 = *((void *)a2 - 4);
          __int16 v155 = 257;
          uint64_t v43 = sub_1CB844E98(v75, v144, v81, v84, (uint64_t)&v153, 0);
          char v40 = *(unsigned char *)(v70 + 16) - 28;
          __int16 v155 = 257;
          long long v41 = (const char **)&v153;
          long long v42 = v83;
          return llvm::BinaryOperator::Create(v40, v42, (uint64_t)v43, v41, 0);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CCAABCC0(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::DataLayout **a4, llvm::AssumptionCache *a5)
{
  unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 < 0x15) {
    return 1;
  }
  uint64_t v11 = a1;
  while (1)
  {
    if (v5 < 0x1C) {
      return 0;
    }
    uint64_t v12 = *(void *)(v11 + 8);
    if (!v12 || *(void *)(v12 + 8)) {
      return 0;
    }
    if (v5 - 56 < 3)
    {
      int v13 = *(_DWORD *)(v11 + 20);
      if ((v13 & 0x40000000) != 0) {
        uint64_t v14 = *(void **)(v11 - 8);
      }
      else {
        uint64_t v14 = (void *)(v11 - 32 * (v13 & 0x7FFFFFF));
      }
      uint64_t result = sub_1CCAABCC0(*v14, a2, a3, a4, v11);
      if (!result) {
        return result;
      }
      int v15 = *(_DWORD *)(v11 + 20);
      if ((v15 & 0x40000000) != 0) {
        uint64_t v16 = *(void *)(v11 - 8);
      }
      else {
        uint64_t v16 = v11 - 32 * (v15 & 0x7FFFFFF);
      }
      uint64_t v17 = *(void *)(v16 + 32);
      goto LABEL_18;
    }
    if (v5 != 85) {
      break;
    }
    uint64_t v17 = *(void *)(v11 - 32);
    if ((sub_1CCAABCC0(*(void *)(v11 - 64), a2, a3, a4, v11) & 1) == 0) {
      return 0;
    }
LABEL_18:
    unsigned int v5 = *(unsigned __int8 *)(v17 + 16);
    a5 = (llvm::AssumptionCache *)v11;
    uint64_t v11 = v17;
    if (v5 < 0x15) {
      return 1;
    }
  }
  if (v5 - 53 < 2)
  {
    uint64_t v62 = 0;
    int v21 = *(_DWORD *)(v11 + 20);
    if ((v21 & 0x40000000) != 0) {
      uint64_t v22 = *(void *)(v11 - 8);
    }
    else {
      uint64_t v22 = v11 - 32 * (v21 & 0x7FFFFFF);
    }
    int v23 = *(unsigned __int8 **)(v22 + 32);
    int v60 = &v62;
    uint64_t v61 = 0;
    uint64_t result = sub_1CBF528D8((uint64_t)&v60, v23);
    if (!result) {
      return result;
    }
    int v24 = *(unsigned __int8 *)(v11 + 16);
    if ((v24 == 53) == a3) {
      return 1;
    }
    uint64_t v25 = (void **)v62;
    uint64_t v26 = *(unsigned int *)(v62 + 8);
    uint64_t v27 = (void *)v62;
    if (v26 >= 0x41)
    {
      int v28 = 0;
      int64_t v29 = (unint64_t)(v26 + 63) >> 6;
      uint64_t v30 = v29;
      do
      {
        BOOL v31 = v30-- < 1;
        if (v31) {
          break;
        }
        unint64_t v32 = *(void *)(*(void *)v62 + 8 * v30);
        v28 += __clz(v32);
      }
      while (!v32);
      int v33 = v26 | 0xFFFFFFC0;
      if ((v26 & 0x3F) == 0) {
        int v33 = 0;
      }
      if ((v26 - v28 - v33) >= 0x41)
      {
        long long v41 = *(llvm::Type **)v11;
        if ((*(_DWORD *)(*(void *)v11 + 8) & 0xFE) == 0x12) {
          long long v41 = (llvm::Type *)**((void **)v41 + 2);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v41);
        goto LABEL_57;
      }
      uint64_t v27 = *(void **)v62;
    }
    if (*v27 == a2) {
      return 1;
    }
    uint64_t v34 = *(llvm::Type **)v11;
    if ((*(_DWORD *)(*(void *)v11 + 8) & 0xFE) == 0x12) {
      uint64_t v34 = (llvm::Type *)**((void **)v34 + 2);
    }
    unsigned int v35 = llvm::Type::getPrimitiveSizeInBits(v34);
    unsigned int PrimitiveSizeInBits = v35;
    if (v26 < 0x41)
    {
      uint64_t v37 = *v25;
      if ((unint64_t)*v25 <= a2 || (unint64_t)v37 >= v35) {
        return 0;
      }
LABEL_69:
      unsigned int v48 = PrimitiveSizeInBits - v37;
      unsigned int v49 = v37 - a2;
      if (v24 == 53) {
        unsigned int v50 = v48;
      }
      else {
        unsigned int v50 = v49;
      }
      unsigned int v59 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits >= 0x41) {
        operator new[]();
      }
      unint64_t v51 = 0;
      unint64_t v58 = 0;
      if (a2)
      {
        if (a2 <= 0x40)
        {
          unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
          unint64_t v58 = v51;
          LODWORD(v61) = PrimitiveSizeInBits;
          goto LABEL_79;
        }
        llvm::APInt::setBitsSlowCase(&v58, 0, a2);
      }
      LODWORD(v61) = PrimitiveSizeInBits;
LABEL_79:
      unint64_t v52 = v51 << v50;
      if (PrimitiveSizeInBits == v50) {
        unint64_t v52 = 0;
      }
      if (PrimitiveSizeInBits) {
        unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
      }
      else {
        unint64_t v53 = 0;
      }
      int v60 = (uint64_t *)(v53 & v52);
      int v54 = *(_DWORD *)(v11 + 20);
      if ((v54 & 0x40000000) != 0) {
        int64_t v55 = *(llvm ***)(v11 - 8);
      }
      else {
        int64_t v55 = (llvm **)(v11 - 32 * (v54 & 0x7FFFFFF));
      }
      BOOL IsZero = llvm::MaskedValueIsZero(*v55, (const llvm::Value *)&v60, a4[10], 0, a4[7], a5, a4[9], (const llvm::DominatorTree *)1, v57);
      if (v61 >= 0x41 && v60) {
        MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      }
      return IsZero;
    }
    int64_t v29 = (unint64_t)(v26 + 63) >> 6;
LABEL_57:
    int v42 = 0;
    uint64_t v43 = v29;
    do
    {
      BOOL v31 = v43-- < 1;
      if (v31) {
        break;
      }
      unint64_t v44 = (*v25)[v43];
      v42 += __clz(v44);
    }
    while (!v44);
    int v45 = v26 | 0xFFFFFFC0;
    if ((v26 & 0x3F) == 0) {
      int v45 = 0;
    }
    if ((v26 - v42 - v45) <= 0x40 && **v25 <= (unint64_t)a2) {
      return 0;
    }
    int v46 = 0;
    do
    {
      BOOL v31 = v29-- < 1;
      if (v31) {
        break;
      }
      unint64_t v47 = (*v25)[v29];
      v46 += __clz(v47);
    }
    while (!v47);
    if ((v26 - (v45 + v46)) > 0x40) {
      return 0;
    }
    uint64_t v37 = (void *)**v25;
    if ((unint64_t)v37 >= PrimitiveSizeInBits) {
      return 0;
    }
    goto LABEL_69;
  }
  if (v5 != 83) {
    return 0;
  }
  int v18 = *(_DWORD *)(v11 + 20);
  if ((v18 & 0x40000000) != 0)
  {
    uint64_t v20 = *(uint64_t **)(v11 - 8);
    uint64_t v19 = v18 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v19 = v18 & 0x7FFFFFF;
    uint64_t v20 = (uint64_t *)(v11 - 32 * v19);
  }
  if (!v19) {
    return 1;
  }
  uint64_t v38 = 32 * v19 - 32;
  do
  {
    uint64_t v39 = *v20;
    v20 += 4;
    uint64_t result = sub_1CCAABCC0(v39, a2, a3, a4, v11);
    if (result) {
      BOOL v40 = v38 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    v38 -= 32;
  }
  while (!v40);
  return result;
}

llvm::Value *sub_1CCAAC21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  int v8 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v8 <= 0x14)
  {
    uint64_t v9 = *(void *)(a4 + 24);
    __int16 v106 = 257;
    if (a3)
    {
      uint64_t v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a1, a2, 0);
      return sub_1CC242524(v9, v7, (uint64_t)v10, (uint64_t)&v104, 0, 0);
    }
    else
    {
      int v24 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a1, a2, 0);
      return sub_1CC2429AC(v9, v7, (uint64_t)v24, (uint64_t)&v104, 0);
    }
  }
  uint64_t v12 = *(void *)(a4 + 32);
  int v13 = *(_DWORD *)(v12 + 8);
  unsigned __int8 v104 = (void *)a1;
  LODWORD(v105) = v13;
  int v14 = *(_DWORD *)(v12 + 2080);
  if (v14)
  {
    uint64_t v15 = *(void *)(v12 + 2064);
    int v16 = v14 - 1;
    unsigned int v17 = v16 & ((a1 >> 4) ^ (a1 >> 9));
    int v18 = (void *)(v15 + 16 * v17);
    uint64_t v19 = *v18;
    if (*v18 == a1) {
      goto LABEL_23;
    }
    uint64_t v20 = 0;
    int v21 = 1;
    while (v19 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == -8192;
      }
      if (v22) {
        uint64_t v20 = v18;
      }
      unsigned int v23 = v17 + v21++;
      unsigned int v17 = v23 & v16;
      int v18 = (void *)(v15 + 16 * v17);
      uint64_t v19 = *v18;
      if (*v18 == a1) {
        goto LABEL_23;
      }
    }
    if (v20) {
      uint64_t v25 = v20;
    }
    else {
      uint64_t v25 = v18;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v26 = sub_1CBF569E0((_DWORD *)(v12 + 2064), (uint64_t)&v104, (uint64_t *)&v104, v25);
  *uint64_t v26 = v104;
  *((_DWORD *)v26 + 2) = v105;
  unsigned int v27 = *(_DWORD *)(v12 + 8);
  if (v27 >= *(_DWORD *)(v12 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v12 + 8 * v27) = v7;
  ++*(_DWORD *)(v12 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 16);
LABEL_23:
  if (v8 <= 82)
  {
    if ((v8 - 56) < 3)
    {
      int v28 = *(_DWORD *)(v7 + 20);
      if ((v28 & 0x40000000) != 0) {
        int64_t v29 = *(void **)(v7 - 8);
      }
      else {
        int64_t v29 = (void *)(v7 - 32 * (v28 & 0x7FFFFFF));
      }
      uint64_t v55 = sub_1CCAAC21C(*v29, a2, a3, a4);
      int v56 = *(_DWORD *)(v7 + 20);
      if ((v56 & 0x40000000) != 0) {
        uint64_t v57 = *(void *)(v7 - 8);
      }
      else {
        uint64_t v57 = v7 - 32 * (v56 & 0x7FFFFFF);
      }
      if (*(void *)v57)
      {
        **(void **)(v57 + 16) = *(void *)(v57 + 8);
        uint64_t v58 = *(void *)(v57 + 8);
        if (v58) {
          *(void *)(v58 + 16) = *(void *)(v57 + 16);
        }
      }
      *(void *)uint64_t v57 = v55;
      if (v55)
      {
        uint64_t v61 = *(void *)(v55 + 8);
        unsigned int v59 = (uint64_t *)(v55 + 8);
        uint64_t v60 = v61;
        *(void *)(v57 + 8) = v61;
        if (v61) {
          *(void *)(v60 + 16) = v57 + 8;
        }
        *(void *)(v57 + 16) = v59;
        *unsigned int v59 = v57;
      }
      int v62 = *(_DWORD *)(v7 + 20);
      if ((v62 & 0x40000000) != 0) {
        uint64_t v63 = *(void *)(v7 - 8);
      }
      else {
        uint64_t v63 = v7 - 32 * (v62 & 0x7FFFFFF);
      }
      uint64_t v64 = sub_1CCAAC21C(*(void *)(v63 + 32), a2, a3, a4);
      int v65 = *(_DWORD *)(v7 + 20);
      if ((v65 & 0x40000000) != 0) {
        uint64_t v66 = *(void *)(v7 - 8);
      }
      else {
        uint64_t v66 = v7 - 32 * (v65 & 0x7FFFFFF);
      }
      unsigned __int8 v67 = (uint64_t *)(v66 + 32);
      if (*(void *)(v66 + 32))
      {
        **(void **)(v66 + 48) = *(void *)(v66 + 40);
        uint64_t v68 = *(void *)(v66 + 40);
        if (v68) {
          *(void *)(v68 + 16) = *(void *)(v66 + 48);
        }
      }
      uint64_t *v67 = v64;
      if (v64)
      {
        uint64_t v71 = *(void *)(v64 + 8);
        uint64_t v69 = (uint64_t **)(v64 + 8);
        uint64_t v70 = v71;
        *(void *)(v66 + 40) = v71;
        if (v71) {
          *(void *)(v70 + 16) = v66 + 40;
        }
        *(void *)(v66 + 48) = v69;
LABEL_104:
        *uint64_t v69 = v67;
        return (llvm::Value *)v7;
      }
      return (llvm::Value *)v7;
    }
    unint64_t v44 = *(llvm::Type **)v7;
    int v45 = *(llvm::Type **)v7;
    if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFE) == 0x12) {
      int v45 = (llvm::Type *)**((void **)v44 + 2);
    }
    uint64_t v46 = *(void *)(a4 + 24);
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v45);
    int v109 = 0;
    unsigned int v49 = (void *)(v7 - 32);
    unsigned int v48 = *(unsigned __int8 **)(v7 - 32);
    unsigned __int8 v104 = &v109;
    uint64_t v105 = 0;
    sub_1CBF528D8((uint64_t)&v104, v48);
    unint64_t v51 = v109;
    if (v109[2] >= 0x41) {
      unint64_t v51 = *(int **)v109;
    }
    int v52 = *v51;
    if (((v8 == 53) ^ a3))
    {
      unint64_t v53 = (v52 - a2);
      if (v52 == a2)
      {
        unsigned int v108 = PrimitiveSizeInBits;
        if (v8 == 53)
        {
          if (PrimitiveSizeInBits > 0x40) {
            operator new[]();
          }
          unint64_t v107 = 0;
          if (PrimitiveSizeInBits == a2) {
            goto LABEL_123;
          }
          unsigned int v50 = (const llvm::APInt *)(PrimitiveSizeInBits - a2);
          if (v50 <= 0x40)
          {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - PrimitiveSizeInBits);
LABEL_122:
            unint64_t v107 = v54;
LABEL_123:
            v99 = *(void **)(v7 - 64);
            Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v44, (llvm::LLVMContext *)&v107, v50);
            if ((*((_DWORD *)v44 + 2) & 0xFE) == 0x12) {
              Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v44 + 8) | ((unint64_t)(*((_DWORD *)v44 + 2) == 19) << 32)), (uint64_t)Splat);
            }
            __int16 v106 = 257;
            uint64_t v101 = (unsigned __int8 *)sub_1CBF52474(v46, v99, (uint64_t)Splat, (uint64_t)&v104);
            uint64_t v102 = (int32x2_t ****)v101;
            if (v101 && v101[16] >= 0x1Cu)
            {
              llvm::Instruction::moveBefore((llvm::Instruction *)v101, (llvm::Instruction *)v7);
              llvm::Value::takeName(v102, (llvm::Value *)v7);
            }
            if (v108 >= 0x41 && v107) {
              MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
            }
            return (llvm::Value *)v102;
          }
          unsigned int v103 = 0;
        }
        else
        {
          if (PrimitiveSizeInBits > 0x40) {
            operator new[]();
          }
          unint64_t v107 = 0;
          if (PrimitiveSizeInBits == a2) {
            goto LABEL_123;
          }
          if (a2 <= 0x3F)
          {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - PrimitiveSizeInBits) << a2;
            goto LABEL_122;
          }
          unsigned int v103 = a2;
          LODWORD(v50) = PrimitiveSizeInBits;
        }
        llvm::APInt::setBitsSlowCase(&v107, v103, v50);
        goto LABEL_123;
      }
      unint64_t v74 = v44;
    }
    else
    {
      unint64_t v53 = (v52 + a2);
      unint64_t v74 = v44;
      if (v53 >= PrimitiveSizeInBits) {
        return llvm::Constant::getNullValue(v44, (llvm::Type *)v53, v50);
      }
    }
    uint64_t v92 = llvm::ConstantInt::get(v74, v53, 0);
    if (*v49)
    {
      **(void **)(v7 - 16) = *(void *)(v7 - 24);
      uint64_t v93 = *(void *)(v7 - 24);
      if (v93) {
        *(void *)(v93 + 16) = *(void *)(v7 - 16);
      }
    }
    *unsigned int v49 = v92;
    if (v92)
    {
      uint64_t v96 = v92[1];
      __int16 v94 = v92 + 1;
      uint64_t v95 = v96;
      *(void *)(v7 - 24) = v96;
      if (v96) {
        *(void *)(v95 + 16) = v7 - 24;
      }
      *(void *)(v7 - 16) = v94;
      *__int16 v94 = v49;
    }
    char v97 = *(unsigned char *)(v7 + 17);
    if (v8 == 53) {
      char v98 = v97 & 0xF9;
    }
    else {
      char v98 = v97 & 0xFD;
    }
    *(unsigned char *)(v7 + 17) = v98;
    return (llvm::Value *)v7;
  }
  if (v8 == 83)
  {
    uint64_t v30 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
    if (v30)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 32 * v30;
      do
      {
        int v33 = *(_DWORD *)(v7 + 20);
        if ((v33 & 0x40000000) != 0) {
          uint64_t v34 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v34 = v7 - 32 * (v33 & 0x7FFFFFF);
        }
        uint64_t v35 = sub_1CCAAC21C(*(void *)(v34 + v31), a2, a3, a4);
        int v36 = *(_DWORD *)(v7 + 20);
        if ((v36 & 0x40000000) != 0) {
          uint64_t v37 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v37 = v7 - 32 * (v36 & 0x7FFFFFF);
        }
        uint64_t v38 = v37 + v31;
        if (*(void *)(v37 + v31))
        {
          **(void **)(v38 + 16) = *(void *)(v38 + 8);
          uint64_t v43 = *(void *)(v38 + 8);
          if (v43) {
            *(void *)(v43 + 16) = *(void *)(v38 + 16);
          }
        }
        *(void *)uint64_t v38 = v35;
        if (v35)
        {
          uint64_t v41 = *(void *)(v35 + 8);
          uint64_t v39 = (void *)(v35 + 8);
          uint64_t v40 = v41;
          uint64_t v42 = v37 + v31;
          *(void *)(v42 + 8) = v41;
          if (v41) {
            *(void *)(v40 + 16) = v42 + 8;
          }
          *(void *)(v42 + 16) = v39;
          *uint64_t v39 = v38;
        }
        v31 += 32;
      }
      while (v32 != v31);
    }
  }
  else
  {
    int v72 = *(_DWORD *)(v7 + 20);
    if ((v72 & 0x40000000) != 0) {
      uint64_t v73 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v73 = v7 - 32 * (v72 & 0x7FFFFFF);
    }
    uint64_t v75 = sub_1CCAAC21C(*(void *)(v73 + 32), a2, a3, a4);
    int v76 = *(_DWORD *)(v7 + 20);
    if ((v76 & 0x40000000) != 0) {
      uint64_t v77 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v77 = v7 - 32 * (v76 & 0x7FFFFFF);
    }
    char v78 = (uint64_t *)(v77 + 32);
    if (*(void *)(v77 + 32))
    {
      **(void **)(v77 + 48) = *(void *)(v77 + 40);
      uint64_t v79 = *(void *)(v77 + 40);
      if (v79) {
        *(void *)(v79 + 16) = *(void *)(v77 + 48);
      }
    }
    uint64_t *v78 = v75;
    if (v75)
    {
      uint64_t v82 = *(void *)(v75 + 8);
      int v80 = (uint64_t **)(v75 + 8);
      uint64_t v81 = v82;
      *(void *)(v77 + 40) = v82;
      if (v82) {
        *(void *)(v81 + 16) = v77 + 40;
      }
      *(void *)(v77 + 48) = v80;
      char *v80 = v78;
    }
    int v83 = *(_DWORD *)(v7 + 20);
    if ((v83 & 0x40000000) != 0) {
      uint64_t v84 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v84 = v7 - 32 * (v83 & 0x7FFFFFF);
    }
    uint64_t v85 = sub_1CCAAC21C(*(void *)(v84 + 64), a2, a3, a4);
    int v86 = *(_DWORD *)(v7 + 20);
    if ((v86 & 0x40000000) != 0) {
      uint64_t v87 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v87 = v7 - 32 * (v86 & 0x7FFFFFF);
    }
    unsigned __int8 v67 = (uint64_t *)(v87 + 64);
    if (*(void *)(v87 + 64))
    {
      **(void **)(v87 + 80) = *(void *)(v87 + 72);
      uint64_t v88 = *(void *)(v87 + 72);
      if (v88) {
        *(void *)(v88 + 16) = *(void *)(v87 + 80);
      }
    }
    uint64_t *v67 = v85;
    if (v85)
    {
      uint64_t v90 = *(void *)(v85 + 8);
      uint64_t v69 = (uint64_t **)(v85 + 8);
      uint64_t v89 = v90;
      *(void *)(v87 + 72) = v90;
      if (v90) {
        *(void *)(v89 + 16) = v87 + 72;
      }
      *(void *)(v87 + 80) = v69;
      goto LABEL_104;
    }
  }
  return (llvm::Value *)v7;
}

uint64_t sub_1CCAACA0C(unsigned __int8 a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if ((v2 - 56) < 2) {
    return 1;
  }
  if (v2 != 58) {
    return v2 == 41 && a1 == 53;
  }
  if (a1 - 53 > 1) {
    return 1;
  }
  if (sub_1CBF687D0((uint64_t)&v5, *(llvm::Constant **)(a2 - 32))) {
    return 0;
  }
  else {
    return sub_1CBF687D0((uint64_t)&v5, *(llvm::Constant **)(a2 - 64)) ^ 1;
  }
}

llvm::Value *sub_1CCAACAAC(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)unsigned int v371 = *(_OWORD *)(a1 + 88);
  long long v372 = v5;
  uint64_t v374 = *((void *)&v4 + 1);
  uint64_t v373 = a2;
  uint64_t v6 = sub_1CC02BC1C(*(unsigned __int8 **)(a2 - 64), *(llvm::Constant **)(a2 - 32), (*(unsigned __int8 *)(a2 + 17) >> 2) & 1, (*(unsigned __int8 *)(a2 + 17) >> 1) & 1, (uint64_t)v371, (llvm::DSOLocalEquivalent **)3);
  if (v6) {
    return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v6);
  }
  int v8 = (llvm::Instruction *)sub_1CC9D812C(a1, (unsigned __int8 *)a2);
  if (!v8)
  {
    int v8 = sub_1CCAAB0DC(a1, (unsigned __int8 *)a2);
    if (!v8)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v388 = 0;
      v389[0] = 0;
      unint64_t v378 = (unint64_t)v389;
      v379 = &v388;
      int v380 = (uint64_t *)&v388;
      if (*(unsigned __int8 *)(a2 + 16) - 53 <= 2)
      {
        int v11 = *(_DWORD *)(a2 + 20);
        uint64_t v12 = (v11 & 0x40000000) != 0 ? *(llvm::Type ****)(a2 - 8) : (llvm::Type ***)(a2 - 32 * (v11 & 0x7FFFFFF));
        int v13 = *v12;
        if (v13)
        {
          v389[0] = v13;
          int v14 = *(_DWORD *)(a2 + 20);
          uint64_t v15 = (v14 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v14 & 0x7FFFFFF);
          uint64_t v16 = *(void *)(v15 + 32);
          if ((sub_1CBC5BE40(&v379, v16) & 1) == 0)
          {
            if (v16) {
              *int v380 = v16;
            }
          }
        }
      }
      size_t v387 = 0;
      unsigned int v17 = v389[0];
      unint64_t v378 = (unint64_t)v389;
      v379 = (llvm::Value **)&v387;
      int v18 = sub_1CBC5BF18((void **)&v378, (uint64_t)v389[0]);
      if (v17)
      {
        if (v18)
        {
          unsigned __int8 *v379 = (llvm::Value *)v17;
          uint64_t v19 = v387[1];
          if (!v19 || *(void *)(v19 + 8)) {
            goto LABEL_157;
          }
        }
      }
      uint64_t v20 = *(llvm::Constant **)a2;
      uint64_t v21 = (uint64_t)*v389[0];
      int v22 = *((_DWORD *)*v389[0] + 2) & 0xFE;
      if (*v389[0] && v22 == 18)
      {
        sub_1CC5BC4B0((uint64_t)*v389[0]);
      }
      else
      {
        unsigned int v23 = *(llvm::IntegerType **)v21;
        int v24 = *v389[0];
        if (v22 == 18) {
          int v24 = **(llvm::Type ***)(v21 + 16);
        }
        int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v24);
        uint64_t v26 = llvm::IntegerType::get(v23, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
      }
      uint64_t v27 = v26;
      v385 = 0;
      v386 = 0;
      int v28 = v389[0];
      v379 = &v386;
      uint64_t v382 = &v386;
      v384 = (uint64_t *)&v385;
      int v29 = *((unsigned __int8 *)v389[0] + 16);
      if (v29 == 5)
      {
        if (*((_WORD *)v389[0] + 9) != 28) {
          goto LABEL_58;
        }
        uint64_t v34 = v389[0][-4 * (*((_DWORD *)v389[0] + 5) & 0x7FFFFFF)];
        if (sub_1CCA173D0((uint64_t)&v378, 13, (uint64_t)v34) || sub_1CCAB2B0C((uint64_t)&v381, (uint64_t)v34, v35))
        {
          uint64_t v32 = v28[-4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF) + 4];
          if (v32) {
            goto LABEL_47;
          }
          uint64_t v36 = 0;
        }
        else
        {
          uint64_t v36 = (uint64_t)v28[-4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF) + 4];
        }
        if (!sub_1CCA173D0((uint64_t)&v378, 13, v36) && !sub_1CCAB2B0C((uint64_t)&v381, v36, v38)
          || (uint64_t v32 = v28[-4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF)]) == 0)
        {
LABEL_58:
          uint64_t v57 = v389[0];
          v379 = &v386;
          int v381 = &v386;
          uint64_t v382 = &v386;
          uint64_t v383 = (uint64_t *)&v385;
          int v58 = *((unsigned __int8 *)v389[0] + 16);
          if (v58 != 5)
          {
            if (v58 != 56) {
              goto LABEL_128;
            }
            uint64_t v59 = (uint64_t)*(v389[0] - 8);
            int v60 = *(unsigned __int8 *)(v59 + 16);
            if (v60 == 5)
            {
              if (*(_WORD *)(v59 + 18) != 26
                || !sub_1CBF68974((uint64_t)&v378, *(llvm::Constant **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF)))|| (uint64_t v61 = *(llvm::Value **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32)) == 0)
              {
LABEL_75:
                if (!sub_1CCA78DC8((uint64_t)&v380, 26, v59))
                {
                  uint64_t v66 = (uint64_t)*(v57 - 4);
                  goto LABEL_79;
                }
LABEL_76:
                int v65 = *(v57 - 4);
                if (v65) {
                  goto LABEL_108;
                }
                uint64_t v66 = 0;
LABEL_79:
                int v67 = *(unsigned __int8 *)(v66 + 16);
                if (v67 == 5)
                {
                  if (*(_WORD *)(v66 + 18) != 26
                    || !sub_1CBF68974((uint64_t)&v378, *(llvm::Constant **)(v66 - 32 * (*(_DWORD *)(v66 + 20) & 0x7FFFFFF)))|| (uint64_t v68 = *(llvm::Value **)(v66 - 32 * (*(_DWORD *)(v66 + 20) & 0x7FFFFFF) + 32)) == 0)
                  {
LABEL_88:
                    if (!sub_1CCA78DC8((uint64_t)&v380, 26, v66)) {
                      goto LABEL_128;
                    }
LABEL_89:
                    int v65 = *(v57 - 8);
                    if (!v65)
                    {
LABEL_128:
                      unsigned int v95 = *((unsigned __int8 *)v389[0] + 16);
                      if (v389[0] && v95 >= 0x1C)
                      {
                        if ((v95 & 0xFE) != 0x36) {
                          goto LABEL_157;
                        }
                        int v96 = *((_DWORD *)v389[0] + 5);
                        if ((v96 & 0x40000000) != 0) {
                          char v97 = (llvm::Type **)*(v389[0] - 1);
                        }
                        else {
                          char v97 = &v389[0][-4 * (v96 & 0x7FFFFFF)];
                        }
                        uint64_t v101 = *v97;
                        int v102 = *((unsigned __int8 *)v101 + 16);
                        if (v102 == 5)
                        {
                          if (*((_WORD *)v101 + 9) != 25) {
                            goto LABEL_157;
                          }
                          unsigned int v103 = (llvm::Instruction **)((char *)v101 - 32 * (*((_DWORD *)v101 + 5) & 0x7FFFFFF));
                          if (!*v103) {
                            goto LABEL_157;
                          }
                          v385 = *v103;
                          int v72 = v103[4];
                          if (!v72) {
                            goto LABEL_157;
                          }
                        }
                        else
                        {
                          if (v102 != 53) {
                            goto LABEL_157;
                          }
                          if (!*((void *)v101 - 8)) {
                            goto LABEL_157;
                          }
                          v385 = (llvm::Instruction *)*((void *)v101 - 8);
                          int v72 = (llvm *)*((void *)v101 - 4);
                          if (!v72) {
                            goto LABEL_157;
                          }
                        }
                        v386 = v72;
                        if ((v96 & 0x40000000) != 0) {
                          char v98 = (llvm::Type **)*(v389[0] - 1);
                        }
                        else {
                          char v98 = &v389[0][-4 * (v96 & 0x7FFFFFF)];
                        }
                      }
                      else
                      {
                        if (v95 != 5 || (*((_WORD *)v389[0] + 9) & 0xFFFE) != 0x1A) {
                          goto LABEL_157;
                        }
                        char v98 = &v389[0][-4 * (*((_DWORD *)v389[0] + 5) & 0x7FFFFFF)];
                        v99 = *v98;
                        int v100 = *((unsigned __int8 *)*v98 + 16);
                        if (v100 == 5)
                        {
                          if (*((_WORD *)v99 + 9) != 25) {
                            goto LABEL_157;
                          }
                          unsigned __int8 v104 = (llvm::Instruction **)((char *)v99 - 32 * (*((_DWORD *)v99 + 5) & 0x7FFFFFF));
                          if (!*v104) {
                            goto LABEL_157;
                          }
                          v385 = *v104;
                          int v72 = v104[4];
                          if (!v72) {
                            goto LABEL_157;
                          }
                        }
                        else
                        {
                          if (v100 != 53) {
                            goto LABEL_157;
                          }
                          if (!*((void *)v99 - 8)) {
                            goto LABEL_157;
                          }
                          v385 = (llvm::Instruction *)*((void *)v99 - 8);
                          int v72 = (llvm *)*((void *)v99 - 4);
                          if (!v72) {
                            goto LABEL_157;
                          }
                        }
                        v386 = v72;
                      }
                      if (v72 != v98[4]) {
                        goto LABEL_157;
                      }
                      goto LABEL_109;
                    }
LABEL_108:
                    *uint64_t v383 = (uint64_t)v65;
                    int v72 = v386;
LABEL_109:
                    unint64_t v378 = (unint64_t)&v386;
                    v379 = &v386;
                    char v73 = sub_1CBC5BE40((void **)&v378, (uint64_t)v72);
                    if (v72 && (v73 & 1) == 0) {
                      unsigned __int8 *v379 = v72;
                    }
                    if (!canTryToConstantAddTwoShiftAmounts((llvm::Value *)a2, v388, v389[0], v386)) {
                      goto LABEL_157;
                    }
                    unint64_t v74 = sub_1CC02ABD8((uint64_t)v388, (uint64_t)v386, 0, 0, (uint64_t)v371, (llvm::DSOLocalEquivalent **)3);
                    if (!v74) {
                      goto LABEL_157;
                    }
                    uint64_t v75 = v74;
                    if (*((unsigned __int8 *)v74 + 16) > 0x14u) {
                      goto LABEL_157;
                    }
                    if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
                      int v76 = **(llvm::Type ***)(v21 + 16);
                    }
                    else {
                      int v76 = (llvm::Type *)v21;
                    }
                    unsigned int v77 = llvm::Type::getPrimitiveSizeInBits(v76);
                    char v78 = *(llvm::ConstantInt **)v75;
                    if ((*(_DWORD *)(*(void *)v75 + 8) & 0xFE) == 0x12) {
                      char v78 = (llvm::ConstantInt *)**((void **)v78 + 2);
                    }
                    uint64_t v79 = (llvm::Constant *)llvm::ConstantInt::get(v78, -v77, 0);
                    uint64_t v81 = (llvm::ConstantInt **)llvm::Constant::replaceUndefsWith(v75, v79, v80);
                    uint64_t v82 = (llvm::ConstantExpr *)llvm::ConstantInt::get(*v81, v77, 0);
                    Sub = llvm::ConstantExpr::getSub(v82, (llvm::Constant *)v81, 0, 0);
                    uint64_t v84 = sub_1CC56C0C0((llvm *)0x27, Sub, (llvm::Constant *)v27, 0);
                    AllOnesValue = (llvm::ConstantExpr *)llvm::Constant::getAllOnesValue((llvm::Constant *)v27, v85, v86);
                    LShr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getLShr(AllOnesValue, v84, 0, v88);
LABEL_120:
                    uint64_t v89 = sub_1CC56C0C0((llvm *)0x26, LShr, v20, 0);
                    char v90 = sub_1CBF68974((uint64_t)&v378, v89);
                    if ((v90 & 1) != 0
                      || (uint8x8_t v174 = v389[0][1]) != 0
                      && !*((void *)v174 + 1)
                      && (int v175 = *((unsigned __int8 *)v389[0] + 16), v175 != 55)
                      && (v175 != 5 || *((_WORD *)v389[0] + 9) != 27))
                    {
                      uint64_t v91 = v385;
                      if ((llvm::Constant *)v21 != v20)
                      {
                        __int16 v377 = 257;
                        if (*(llvm::Constant **)v385 != v20)
                        {
                          if (*((unsigned __int8 *)v385 + 16) <= 0x14u)
                          {
                            uint64_t v176 = (*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::Constant *))(**(void **)(v10 + 72) + 224))(*(void *)(v10 + 72), 38, v385, v20);
                            uint64_t v91 = (llvm::Instruction *)v176;
                            if (v176)
                            {
                              if (*(unsigned __int8 *)(v176 + 16) >= 0x1Cu)
                              {
                                (*(void (**)(void, uint64_t, uint64_t *, void, void))(**(void **)(v10 + 80) + 16))(*(void *)(v10 + 80), v176, &v375, *(void *)(v10 + 48), *(void *)(v10 + 56));
                                uint64_t v365 = *(unsigned int *)(v10 + 8);
                                if (v365)
                                {
                                  uint64_t v366 = *(void *)v10;
                                  uint64_t v367 = *(void *)v10 + 16 * v365;
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v91, *(_DWORD *)v366, *(llvm::MDNode **)(v366 + 8));
                                    v366 += 16;
                                  }
                                  while (v366 != v367);
                                }
                              }
                            }
                          }
                          else
                          {
                            LOWORD(v382) = 257;
                            uint64_t v91 = llvm::CastInst::Create(38, (uint64_t)v385, (uint64_t)v20, (const char **)&v378, 0);
                            (*(void (**)(void, llvm::Instruction *, uint64_t *, void, void))(**(void **)(v10 + 80) + 16))(*(void *)(v10 + 80), v91, &v375, *(void *)(v10 + 48), *(void *)(v10 + 56));
                            uint64_t v92 = *(unsigned int *)(v10 + 8);
                            if (v92)
                            {
                              uint64_t v93 = *(void *)v10;
                              uint64_t v94 = *(void *)v10 + 16 * v92;
                              do
                              {
                                llvm::Instruction::setMetadata(v91, *(_DWORD *)v93, *(llvm::MDNode **)(v93 + 8));
                                v93 += 16;
                              }
                              while (v93 != v94);
                            }
                          }
                        }
                        v385 = v91;
                      }
                      char v177 = *(unsigned char *)(a2 + 16) - 28;
                      uint64_t v178 = *(void *)(a2 - 32);
                      LOWORD(v382) = 257;
                      int v8 = llvm::BinaryOperator::Create(v177, v91, v178, (const char **)&v378, 0);
                      if ((v90 & 1) == 0)
                      {
                        LOWORD(v382) = 257;
                        sub_1CB844E0C((uint64_t *)v10, v8, (uint64_t)&v378);
                        LOWORD(v382) = 257;
                        int v8 = llvm::BinaryOperator::Create(28, v8, (uint64_t)v89, (const char **)&v378, 0);
                      }
                      if (v8) {
                        return v8;
                      }
                    }
LABEL_157:
                    uint64_t v105 = *(llvm::Constant **)(a2 - 64);
                    uint64_t v106 = *(void *)(a2 - 32);
                    uint64_t v107 = *(void *)a2;
                    unsigned int v108 = *(llvm::Type **)a2;
                    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
                      unsigned int v108 = **(llvm::Type ***)(v107 + 16);
                    }
                    unsigned int v109 = llvm::Type::getPrimitiveSizeInBits(v108);
                    v389[0] = 0;
                    unint64_t v378 = (unint64_t)v389;
                    v379 = 0;
                    if ((sub_1CBF528D8((uint64_t)&v378, (unsigned __int8 *)v106) & 1) == 0)
                    {
LABEL_327:
                      uint64_t v388 = 0;
                      unint64_t v378 = (unint64_t)&v388;
                      v379 = (llvm::Value **)v106;
                      int v209 = (void **)*((void *)v105 + 1);
                      if (v209 && !v209[1] && sub_1CC0422EC((uint64_t)&v378, (uint64_t)v105))
                      {
                        uint64_t v212 = llvm::Constant::getAllOnesValue((llvm::Constant *)v107, v210, v211);
                        uint64_t v213 = *(void *)(a1 + 24);
                        LOWORD(v382) = 257;
                        int v214 = sub_1CC242524(v213, (uint64_t)v212, v106, (uint64_t)&v378, 0, 0);
                        v198 = (const char *)v388;
                        LOWORD(v382) = 257;
                        char v199 = 28;
                        return llvm::BinaryOperator::Create(v199, v214, (uint64_t)v198, (const char **)&v378, 0);
                      }
                      if (!v106 || *(unsigned __int8 *)(v106 + 16) > 0x14u)
                      {
LABEL_341:
                        if ((sub_1CBF5250C((uint64_t)&v375, v105) & 1) == 0) {
                          return 0;
                        }
                        LODWORD(v379) = 64;
                        unint64_t v378 = v109 - 1;
                        uint64_t v224 = &v388;
                        int v380 = (uint64_t *)&v388;
                        int v225 = *(unsigned __int8 *)(v106 + 16);
                        if (v225 == 43)
                        {
                          if (sub_1CBF53154((llvm::APInt *)&v378, *(unsigned __int8 **)(v106 - 64))
                            && (uint64_t v226 = *(void *)(v106 - 32)) != 0)
                          {
                            *int v380 = v226;
                            int v227 = 1;
                          }
                          else
                          {
                            int v227 = 0;
                          }
                        }
                        else
                        {
                          if (v225 == 5)
                          {
                            if (*(_WORD *)(v106 + 18) == 15
                              && sub_1CBF531E4((llvm::APInt *)&v378, *(llvm::Constant **)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF))))
                            {
                              uint64_t v224 = *(llvm::Value ***)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF) + 32);
                              if (v224)
                              {
                                *int v380 = (uint64_t)v224;
                                LOBYTE(v224) = 1;
                              }
                            }
                            else
                            {
                              LOBYTE(v224) = 0;
                            }
                          }
                          int v227 = (v225 == 5) & v224;
                        }
                        if (v379 >= 0x41 && v378) {
                          MEMORY[0x1D25D9CB0](v378, 0x1000C8000313F17);
                        }
                        if (!v227) {
                          return 0;
                        }
                        unsigned int v376 = v109;
                        if (v109 > 0x40) {
                          operator new[]();
                        }
                        uint64_t v375 = 1 << (v109 - 1);
                        Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v107, (llvm::LLVMContext *)&v375, v223);
                        if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
                          Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v107 + 32) | ((unint64_t)(*(_DWORD *)(v107 + 8) == 19) << 32)), (uint64_t)Splat);
                        }
                        uint64_t v125 = v388;
                        LOWORD(v382) = 257;
                        char v126 = 26;
                        goto LABEL_392;
                      }
                      uint64_t v375 = 0;
                      v215 = (void **)*((void *)v105 + 1);
                      if (!v215 || v215[1])
                      {
LABEL_336:
                        unint64_t v378 = (unint64_t)&v375;
                        if (sub_1CBC5BE40((void **)&v378, (uint64_t)v105))
                        {
                          int v216 = *(_DWORD *)(*(void *)v375 + 8);
                          if ((v216 & 0xFE) == 0x12) {
                            int v216 = *(_DWORD *)(**(void **)(*(void *)v375 + 16) + 8);
                          }
                          if (v216 == 269)
                          {
                            int v217 = (llvm::ConstantExpr *)llvm::ConstantInt::get((llvm::ConstantInt *)v107, 1uLL, 0);
                            Shl = (uint64_t *)llvm::ConstantExpr::getShl(v217, (llvm::Constant *)v106, 0, 0);
                            v219 = (const char *)v375;
                            NullValue = llvm::Constant::getNullValue((llvm::Constant *)v107, v220, v221);
                            LOWORD(v382) = 257;
                            return sub_1CC199EFC((uint64_t)v219, Shl, (uint64_t)NullValue, (const char **)&v378, 0, 0);
                          }
                        }
                        goto LABEL_341;
                      }
                      int v228 = *((unsigned __int8 *)v105 + 16);
                      switch(v228)
                      {
                        case 5:
                          int v265 = *((unsigned __int16 *)v105 + 9);
                          if (v265 != 17)
                          {
                            if (v265 != 25) {
                              goto LABEL_336;
                            }
                            int v266 = (unsigned __int8 **)((char *)v105 - 32 * (*((_DWORD *)v105 + 5) & 0x7FFFFFF));
                            int v229 = *v266;
                            if (!*v266) {
                              goto LABEL_336;
                            }
                            unsigned int v230 = (const char *)v266[4];
                            if (!v230) {
                              goto LABEL_336;
                            }
                            goto LABEL_424;
                          }
                          uint64_t v267 = (llvm::Value **)((char *)v105 - 32 * (*((_DWORD *)v105 + 5) & 0x7FFFFFF));
                          uint64_t v197 = *v267;
                          if (!*v267) {
                            goto LABEL_336;
                          }
                          uint64_t v375 = (uint64_t)*v267;
                          v264 = (unsigned __int8 *)v267[4];
                          if (!v264) {
                            goto LABEL_336;
                          }
                          break;
                        case 45:
                          uint64_t v197 = (llvm::Value *)*((void *)v105 - 8);
                          if (!v197) {
                            goto LABEL_336;
                          }
                          uint64_t v375 = *((void *)v105 - 8);
                          v264 = (unsigned __int8 *)*((void *)v105 - 4);
                          if (!v264 || v264[16] > 0x14u) {
                            goto LABEL_336;
                          }
                          break;
                        case 53:
                          int v229 = (unsigned __int8 *)*((void *)v105 - 8);
                          if (!v229) {
                            goto LABEL_336;
                          }
                          if (v229[16] > 0x14u) {
                            goto LABEL_336;
                          }
                          unsigned int v230 = (const char *)*((void *)v105 - 4);
                          if (!v230) {
                            goto LABEL_336;
                          }
LABEL_424:
                          uint64_t v375 = (uint64_t)v230;
                          int v214 = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v229, (llvm::Constant *)v106, 0, 0);
                          v198 = (const char *)v375;
                          LOWORD(v382) = 257;
                          char v199 = 25;
                          return llvm::BinaryOperator::Create(v199, v214, (uint64_t)v198, (const char **)&v378, 0);
                        default:
                          goto LABEL_336;
                      }
                      v198 = (const char *)llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v264, (llvm::Constant *)v106, 0, 0);
                      LOWORD(v382) = 257;
                      char v199 = 17;
LABEL_428:
                      int v214 = v197;
                      return llvm::BinaryOperator::Create(v199, v214, (uint64_t)v198, (const char **)&v378, 0);
                    }
                    uint64_t v110 = v389[0];
                    if (*((_DWORD *)v389[0] + 2) >= 0x41u) {
                      uint64_t v110 = (llvm::Type **)*v389[0];
                    }
                    uint64_t v111 = *v110;
                    uint64_t v388 = 0;
                    unint64_t v378 = (unint64_t)&v388;
                    uint64_t v112 = (void **)*((void *)v105 + 1);
                    if (v112 && !v112[1] && sub_1CBC5BE40((void **)&v378, (uint64_t)v105))
                    {
                      uint64_t v113 = v388;
                      uint64_t v114 = *(llvm::Type **)v388;
                      if ((*(_DWORD *)(*(void *)v388 + 8) & 0xFE) == 0x12) {
                        uint64_t v114 = (llvm::Type *)**((void **)v114 + 2);
                      }
                      unsigned int v115 = llvm::Type::getPrimitiveSizeInBits(v114);
                      if (v115 > v111)
                      {
                        LODWORD(v379) = v115;
                        if (v115 > 0x40) {
                          operator new[]();
                        }
                        unint64_t v378 = 0;
                        if (v111)
                        {
                          unsigned int v116 = v115 - v111;
                          if (v115 - v111 > 0x3F) {
                            llvm::APInt::setBitsSlowCase(&v378, v116, v115);
                          }
                          else {
                            v378 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v111 << v116;
                          }
                        }
                        BOOL IsZero = llvm::MaskedValueIsZero(v113, (const llvm::Value *)&v378, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v371[0]);
                        if (v379 >= 0x41 && v378) {
                          MEMORY[0x1D25D9CB0](v378, 0x1000C8000313F17);
                        }
                        if (IsZero)
                        {
                          uint64_t v118 = operator new(0x60uLL);
                          int v8 = (llvm::Instruction *)(v118 + 8);
                          v118[13] = v118[13] & 0x38000000 | 1;
                          *(void *)uint64_t v118 = 0;
                          *((void *)v118 + 1) = 0;
                          *((void *)v118 + 2) = 0;
                          *((void *)v118 + 3) = v118 + 8;
                          uint64_t v119 = *(void *)(a1 + 24);
                          unsigned __int8 v120 = v388;
                          LOWORD(v382) = 257;
                          int v121 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v388, v111, 0);
                          uint64_t v122 = sub_1CC242524(v119, (uint64_t)v120, (uint64_t)v121, (uint64_t)&v378, 0, 0);
                          __int16 v377 = 257;
                          llvm::ZExtInst::ZExtInst(v8, v122, (llvm::Type *)v107, (const char **)&v375, 0);
                          return v8;
                        }
                      }
                    }
                    unint64_t v378 = (unint64_t)&v388;
                    v379 = (llvm::Value **)v106;
                    if (sub_1CC0422EC((uint64_t)&v378, (uint64_t)v105))
                    {
                      unsigned int v376 = v109;
                      if (v109 > 0x40) {
                        operator new[]();
                      }
                      uint64_t v375 = 0;
                      if (v109 != v111)
                      {
                        if (v111 > 0x3F) {
                          llvm::APInt::setBitsSlowCase(&v375, v111, v109);
                        }
                        else {
                          uint64_t v375 = 0xFFFFFFFFFFFFFFFFLL >> (v111 - v109) << (char)v111;
                        }
                      }
                      uint64_t v124 = v388;
LABEL_183:
                      uint64_t v125 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v107, (llvm::LLVMContext *)&v375, v123);
                      if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
                        uint64_t v125 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v107 + 32) | ((unint64_t)(*(_DWORD *)(v107 + 8) == 19) << 32)), (uint64_t)v125);
                      }
                      LOWORD(v382) = 257;
                      char v126 = 28;
                      Splat = v124;
LABEL_392:
                      int v8 = llvm::BinaryOperator::Create(v126, Splat, (uint64_t)v125, (const char **)&v378, 0);
                      if (v376 >= 0x41 && v375) {
                        MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                      }
                      return v8;
                    }
                    size_t v387 = 0;
                    unint64_t v378 = (unint64_t)&v388;
                    v379 = (llvm::Value **)&v387;
                    int v380 = 0;
                    unsigned int v128 = *((unsigned __int8 *)v105 + 16);
                    if (v128 < 0x1C)
                    {
                      if (v128 != 5) {
                        goto LABEL_211;
                      }
                      unsigned int v129 = *((unsigned __int16 *)v105 + 9);
                      if (v129 > 0x1B || ((1 << v129) & 0xC180000) == 0) {
                        goto LABEL_211;
                      }
                    }
                    else if (v128 > 0x37 || ((1 << v128) & 0xC1800000000000) == 0)
                    {
                      goto LABEL_211;
                    }
                    if ((*((unsigned char *)v105 + 17) & 2) == 0
                      || !sub_1CCA79B6C((void **)&v378, (uint64_t)v105))
                    {
                      goto LABEL_211;
                    }
                    uint64_t v130 = v387;
                    uint64_t v131 = *((unsigned int *)v387 + 2);
                    uint64_t v132 = v387;
                    if (v131 >= 0x41)
                    {
                      int v133 = 0;
                      int64_t v134 = (unint64_t)(v131 + 63) >> 6;
                      do
                      {
                        BOOL v171 = v134-- < 1;
                        if (v171) {
                          break;
                        }
                        unint64_t v135 = *(void *)(*v387 + 8 * v134);
                        v133 += __clz(v135);
                      }
                      while (!v135);
                      int v136 = v131 | 0xFFFFFFC0;
                      if ((v131 & 0x3F) == 0) {
                        int v136 = 0;
                      }
                      if ((v131 - v133 - v136) > 0x40) {
                        goto LABEL_211;
                      }
                      uint64_t v132 = (void *)*v387;
                    }
                    if (*v132 < (unint64_t)v109)
                    {
                      if (*((_DWORD *)v387 + 2) >= 0x41u) {
                        uint64_t v130 = (uint64_t *)*v387;
                      }
                      uint64_t v137 = *v130;
                      if (v137 >= v111)
                      {
                        if (v137 <= v111) {
                          goto LABEL_211;
                        }
                        uint64_t v142 = llvm::ConstantInt::get((llvm::ConstantInt *)v107, (v137 - v111), 0);
                        char v143 = *((unsigned char *)v105 + 16) - 28;
                        LOWORD(v382) = 257;
                        v139 = llvm::BinaryOperator::Create(v143, v388, (uint64_t)v142, (const char **)&v378, 0);
                        int v8 = v139;
                        char v141 = *((unsigned char *)v139 + 17) | 2;
                      }
                      else
                      {
                        uint64_t v138 = llvm::ConstantInt::get((llvm::ConstantInt *)v107, (v111 - v137), 0);
                        LOWORD(v382) = 257;
                        v139 = llvm::BinaryOperator::Create(25, v388, (uint64_t)v138, (const char **)&v378, 0);
                        int v8 = v139;
                        int v140 = *((unsigned char *)v139 + 17) & 0xFD | (2 * ((*(unsigned __int8 *)(a2 + 17) >> 1) & 1));
                        *((unsigned char *)v139 + 17) = v140;
                        char v141 = v140 & 0xFB | *(unsigned char *)(a2 + 17) & 4;
                      }
                      *((unsigned char *)v139 + 17) = v141;
                      return v8;
                    }
LABEL_211:
                    unint64_t v378 = (unint64_t)&v388;
                    v379 = (llvm::Value **)&v387;
                    int v380 = 0;
                    unsigned int v144 = (void **)*((void *)v105 + 1);
                    if (!v144 || v144[1] || !sub_1CCA79B6C((void **)&v378, (uint64_t)v105)) {
                      goto LABEL_241;
                    }
                    v145 = v387;
                    uint64_t v146 = *((unsigned int *)v387 + 2);
                    uint64_t v147 = v387;
                    if (v146 >= 0x41)
                    {
                      int v148 = 0;
                      int64_t v149 = (unint64_t)(v146 + 63) >> 6;
                      do
                      {
                        BOOL v171 = v149-- < 1;
                        if (v171) {
                          break;
                        }
                        unint64_t v150 = *(void *)(*v387 + 8 * v149);
                        v148 += __clz(v150);
                      }
                      while (!v150);
                      int v151 = v146 | 0xFFFFFFC0;
                      if ((v146 & 0x3F) == 0) {
                        int v151 = 0;
                      }
                      if ((v146 - v148 - v151) > 0x40) {
                        goto LABEL_241;
                      }
                      uint64_t v147 = (void *)*v387;
                    }
                    if (*v147 < (unint64_t)v109)
                    {
                      if (*((_DWORD *)v387 + 2) >= 0x41u) {
                        v145 = (uint64_t *)*v387;
                      }
                      uint64_t v152 = *v145;
                      if (v152 < v111)
                      {
                        uint64_t v153 = llvm::ConstantInt::get((llvm::ConstantInt *)v107, (v111 - v152), 0);
                        LOWORD(v382) = 257;
                        int v154 = llvm::BinaryOperator::Create(25, v388, (uint64_t)v153, (const char **)&v378, 0);
                        int v155 = *((unsigned char *)v154 + 17) & 0xFD | (2 * ((*(unsigned __int8 *)(a2 + 17) >> 1) & 1));
                        *((unsigned char *)v154 + 17) = v155;
                        *((unsigned char *)v154 + 17) = v155 & 0xFB | *(unsigned char *)(a2 + 17) & 4;
                        uint64_t v156 = *(uint64_t **)(a1 + 24);
                        LOWORD(v382) = 257;
                        sub_1CB844E0C(v156, v154, (uint64_t)&v378);
                        unsigned int v376 = v109;
                        if (v109 > 0x40) {
                          operator new[]();
                        }
                        uint64_t v375 = 0;
                        if (v109 != v111)
                        {
                          if (v111 > 0x3F) {
                            llvm::APInt::setBitsSlowCase(&v375, v111, v109);
                          }
                          else {
                            uint64_t v375 = 0xFFFFFFFFFFFFFFFFLL >> (v111 - v109) << (char)v111;
                          }
                        }
                        uint64_t v125 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v107, (llvm::LLVMContext *)&v375, v157);
                        if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
                          uint64_t v125 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v107 + 32) | ((unint64_t)(*(_DWORD *)(v107 + 8) == 19) << 32)), (uint64_t)v125);
                        }
                        LOWORD(v382) = 257;
                        char v126 = 28;
                        Splat = v154;
                        goto LABEL_392;
                      }
                      if (v152 > v111)
                      {
                        uint64_t v158 = llvm::ConstantInt::get((llvm::ConstantInt *)v107, (v152 - v111), 0);
                        char v159 = *((unsigned char *)v105 + 16) - 28;
                        LOWORD(v382) = 257;
                        v160 = llvm::BinaryOperator::Create(v159, v388, (uint64_t)v158, (const char **)&v378, 0);
                        *((unsigned char *)v160 + 17) = *((unsigned char *)v160 + 17) & 0xFD | *((unsigned char *)v105 + 17) & 2;
                        unsigned int v161 = *(uint64_t **)(a1 + 24);
                        LOWORD(v382) = 257;
                        sub_1CB844E0C(v161, v160, (uint64_t)&v378);
                        unsigned int v376 = v109;
                        if (v109 <= 0x40)
                        {
LABEL_235:
                          uint64_t v375 = 0;
                          if (v109 != v111)
                          {
                            if (v111 > 0x3F) {
                              llvm::APInt::setBitsSlowCase(&v375, v111, v109);
                            }
                            else {
                              uint64_t v375 = 0xFFFFFFFFFFFFFFFFLL >> (v111 - v109) << (char)v111;
                            }
                          }
                          uint64_t v125 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v107, (llvm::LLVMContext *)&v375, v162);
                          if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
                            uint64_t v125 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v107 + 32) | ((unint64_t)(*(_DWORD *)(v107 + 8) == 19) << 32)), (uint64_t)v125);
                          }
                          LOWORD(v382) = 257;
                          char v126 = 28;
                          Splat = v160;
                          goto LABEL_392;
                        }
LABEL_575:
                        operator new[]();
                      }
                    }
LABEL_241:
                    uint64_t v163 = (void **)*((void *)v105 + 1);
                    if (v163)
                    {
                      if (!v163[1])
                      {
                        unsigned int v164 = *((unsigned __int8 *)v105 + 16);
                        if (v164 > 0x1B || v164 == 5)
                        {
                          int v165 = v164 <= 0x1B ? *((unsigned __int16 *)v105 + 9) : v164 - 28;
                          if (v165 == 38)
                          {
                            int v166 = *((_DWORD *)v105 + 5);
                            uint64_t v167 = (v166 & 0x40000000) != 0
                                 ? (llvm::Constant *)*((void *)v105 - 1)
                                 : (llvm::Constant *)((char *)v105 - 32 * (v166 & 0x7FFFFFF));
                            uint64_t v168 = *(void *)v167;
                            uint64_t v169 = *(void *)(*(void *)v167 + 8);
                            if (v169)
                            {
                              if (!*(void *)(v169 + 8))
                              {
                                unsigned int v170 = *(unsigned __int8 *)(v168 + 16);
                                BOOL v171 = v170 >= 0x1C && v170 - 59 > 0xFFFFFFED;
                                if (v171)
                                {
                                  unint64_t v378 = (unint64_t)&v388;
                                  v379 = (llvm::Value **)&v387;
                                  int v380 = 0;
                                  if ((*(unsigned char *)(v168 + 16) & 0xFE) == 0x36)
                                  {
                                    int v172 = *(_DWORD *)(v168 + 20);
                                    uint64_t v173 = (v172 & 0x40000000) != 0
                                         ? *(llvm::Value ***)(v168 - 8)
                                         : (llvm::Value **)(v168 - 32 * (v172 & 0x7FFFFFF));
                                    uint64_t v179 = *v173;
                                    if (v179)
                                    {
                                      uint64_t v388 = v179;
                                      int v180 = *(_DWORD *)(v168 + 20);
                                      uint64_t v181 = (v180 & 0x40000000) != 0
                                           ? *(void *)(v168 - 8)
                                           : v168 - 32 * (v180 & 0x7FFFFFF);
                                      if (sub_1CBF528D8((uint64_t)&v379, *(unsigned __int8 **)(v181 + 32)))
                                      {
                                        unsigned int v182 = (unsigned int *)v387;
                                        if (*((_DWORD *)v387 + 2) >= 0x41u) {
                                          unsigned int v182 = (unsigned int *)*v387;
                                        }
                                        unsigned int v183 = *v182;
                                        unsigned int v184 = *v182 - v111;
                                        if (v183 <= v111) {
                                          unsigned int v184 = v111 - v183;
                                        }
                                        int v185 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v388, v184, 0);
                                        if (v183 <= v111) {
                                          uint64_t v186 = 25;
                                        }
                                        else {
                                          uint64_t v186 = *(unsigned __int8 *)(v168 + 16) - 28;
                                        }
                                        uint64_t v314 = *(void *)(a1 + 24);
                                        unint64_t v378 = (unint64_t)"sh.diff";
                                        LOWORD(v382) = 259;
                                        BOOL v315 = sub_1CB844E98(v314, v186, (uint64_t)v388, (uint64_t)v185, (uint64_t)&v378, 0);
                                        v160 = v315;
                                        unsigned int v316 = *(uint64_t **)(a1 + 24);
                                        uint64_t v375 = (uint64_t)"tr.sh.diff";
                                        __int16 v377 = 259;
                                        if (*(void *)v315 != v107)
                                        {
                                          if (*((unsigned __int8 *)v315 + 16) <= 0x14u)
                                          {
                                            uint64_t v320 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v316[9] + 224))(v316[9], 38, v315, v107);
                                            v160 = (llvm::Value *)v320;
                                            if (v320)
                                            {
                                              if (*(unsigned __int8 *)(v320 + 16) >= 0x1Cu)
                                              {
                                                (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v316[10] + 16))(v316[10], v320, &v375, v316[6], v316[7]);
                                                uint64_t v368 = *((unsigned int *)v316 + 2);
                                                if (v368)
                                                {
                                                  uint64_t v369 = *v316;
                                                  uint64_t v370 = v369 + 16 * v368;
                                                  do
                                                  {
                                                    llvm::Instruction::setMetadata(v160, *(_DWORD *)v369, *(llvm::MDNode **)(v369 + 8));
                                                    v369 += 16;
                                                  }
                                                  while (v369 != v370);
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            LOWORD(v382) = 257;
                                            v160 = llvm::CastInst::Create(38, (uint64_t)v315, v107, (const char **)&v378, 0);
                                            (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(void *)v316[10] + 16))(v316[10], v160, &v375, v316[6], v316[7]);
                                            uint64_t v317 = *((unsigned int *)v316 + 2);
                                            if (v317)
                                            {
                                              uint64_t v318 = *v316;
                                              uint64_t v319 = v318 + 16 * v317;
                                              do
                                              {
                                                llvm::Instruction::setMetadata(v160, *(_DWORD *)v318, *(llvm::MDNode **)(v318 + 8));
                                                v318 += 16;
                                              }
                                              while (v318 != v319);
                                            }
                                          }
                                        }
                                        unsigned int v376 = v109;
                                        if (v109 <= 0x40) {
                                          goto LABEL_235;
                                        }
                                        goto LABEL_575;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    unint64_t v378 = (unint64_t)&v388;
                    v379 = (llvm::Value **)&v387;
                    int v380 = 0;
                    int v187 = *((unsigned __int8 *)v105 + 16);
                    if (v187 == 5)
                    {
                      if (*((_WORD *)v105 + 9) != 25) {
                        goto LABEL_308;
                      }
                      uint64_t v188 = (llvm::Value **)((char *)v105 - 32 * (*((_DWORD *)v105 + 5) & 0x7FFFFFF));
                      if (!*v188) {
                        goto LABEL_308;
                      }
                      uint64_t v388 = *v188;
                      if (!sub_1CBF5295C((uint64_t)&v379, v188[4])) {
                        goto LABEL_308;
                      }
                    }
                    else
                    {
                      if (v187 != 53) {
                        goto LABEL_308;
                      }
                      if (!*((void *)v105 - 8)) {
                        goto LABEL_308;
                      }
                      uint64_t v388 = (llvm::Value *)*((void *)v105 - 8);
                      if ((sub_1CBF528D8((uint64_t)&v379, *((unsigned __int8 **)v105 - 4)) & 1) == 0) {
                        goto LABEL_308;
                      }
                    }
                    int v189 = v387;
                    uint64_t v190 = *((unsigned int *)v387 + 2);
                    v191 = v387;
                    if (v190 >= 0x41)
                    {
                      int v192 = 0;
                      int64_t v193 = (unint64_t)(v190 + 63) >> 6;
                      do
                      {
                        BOOL v171 = v193-- < 1;
                        if (v171) {
                          break;
                        }
                        unint64_t v194 = *(void *)(*v387 + 8 * v193);
                        v192 += __clz(v194);
                      }
                      while (!v194);
                      int v195 = v190 | 0xFFFFFFC0;
                      if ((v190 & 0x3F) == 0) {
                        int v195 = 0;
                      }
                      if ((v190 - v192 - v195) > 0x40) {
                        goto LABEL_308;
                      }
                      v191 = (void *)*v387;
                    }
                    if (*v191 < (unint64_t)v109)
                    {
                      if (*((_DWORD *)v387 + 2) >= 0x41u) {
                        int v189 = (void *)*v387;
                      }
                      uint64_t v196 = (char *)v111 + *v189;
                      if (v109 > v196)
                      {
                        uint64_t v197 = v388;
                        v198 = (const char *)llvm::ConstantInt::get((llvm::ConstantInt *)v107, v196, 0);
                        LOWORD(v382) = 257;
                        char v199 = 25;
                        goto LABEL_428;
                      }
                    }
LABEL_308:
                    int v200 = (void **)*((void *)v105 + 1);
                    if (!v200) {
                      goto LABEL_310;
                    }
                    if (v200[1]) {
                      goto LABEL_310;
                    }
                    unsigned int v231 = *((unsigned __int8 *)v105 + 16);
                    if (v231 < 0x1C
                      || v231 - 59 < 0xFFFFFFEE
                      || v231 > 0x3A
                      || ((1 << v231) & 0x7000A0000000000) == 0)
                    {
                      goto LABEL_310;
                    }
                    uint64_t v232 = *((void *)v105 - 8);
                    uint64_t v233 = *((void *)v105 - 4);
                    v385 = 0;
                    v386 = 0;
                    if (!llvm::Instruction::isCommutative(v105)) {
                      goto LABEL_366;
                    }
                    uint64_t v234 = *(void *)(v233 + 8);
                    if (!v234 || *(void *)(v234 + 8)) {
                      goto LABEL_366;
                    }
                    if (sub_1CCAB2E84(v106, v233))
                    {
LABEL_445:
                      uint64_t v235 = v232;
                      uint64_t v232 = v233;
                      goto LABEL_367;
                    }
                    v379 = (llvm::Value **)v106;
                    int v380 = (uint64_t *)&v385;
                    int v381 = 0;
                    int v279 = *(unsigned __int8 *)(v233 + 16);
                    if (v279 != 5)
                    {
                      if (v279 == 56)
                      {
                        uint64_t v280 = *(void *)(v233 - 64);
                        uint64_t v281 = *(void *)(v280 + 8);
                        if (v281)
                        {
                          if (!*(void *)(v281 + 8)
                            && sub_1CCAB2E84(v106, v280)
                            && sub_1CBF528D8((uint64_t)&v380, *(unsigned __int8 **)(v233 - 32)))
                          {
                            goto LABEL_445;
                          }
                        }
                      }
LABEL_366:
                      uint64_t v235 = v233;
LABEL_367:
                      unint64_t v378 = (unint64_t)&v386;
                      v379 = (llvm::Value **)v106;
                      uint64_t v236 = *(void *)(v232 + 8);
                      if (v236 && !*(void *)(v236 + 8) && sub_1CC0422EC((uint64_t)&v378, v232))
                      {
                        uint64_t v237 = *(void *)(a1 + 24);
                        if ((*((unsigned char *)v105 + 23) & 0x10) == 0)
                        {
                          unsigned int v284 = 0;
                          uint64_t v283 = &byte_1CFBCE98E;
LABEL_463:
                          LOWORD(v382) = 261;
                          unint64_t v378 = (unint64_t)v283;
                          v379 = v284;
                          int64_t v286 = sub_1CC242524(v237, v235, v106, (uint64_t)&v378, 0, 0);
                          uint64_t v287 = *(void *)(a1 + 24);
                          uint64_t v288 = *((unsigned __int8 *)v105 + 16) - 28;
                          if ((*(unsigned char *)(v232 + 23) & 0x10) == 0)
                          {
                            v299 = 0;
                            v298 = &byte_1CFBCE98E;
LABEL_472:
                            LOWORD(v382) = 261;
                            unint64_t v378 = (unint64_t)v298;
                            v379 = v299;
                            uint64_t v124 = sub_1CB844E98(v287, v288, (uint64_t)v386, (uint64_t)v286, (uint64_t)&v378, 0);
                            v301 = v389[0];
                            uint64_t v302 = *((unsigned int *)v389[0] + 2);
                            if (v302 >= 0x41)
                            {
                              int v303 = 0;
                              int64_t v304 = (unint64_t)(v302 + 63) >> 6;
                              do
                              {
                                BOOL v171 = v304-- < 1;
                                if (v171) {
                                  break;
                                }
                                unint64_t v305 = *((void *)*v389[0] + v304);
                                v303 += __clz(v305);
                              }
                              while (!v305);
                              int v306 = v302 | 0xFFFFFFC0;
                              if ((v302 & 0x3F) == 0) {
                                int v306 = 0;
                              }
                              unsigned int v307 = v109;
                              if ((v302 - v303 - v306) > 0x40) {
                                goto LABEL_482;
                              }
                              v301 = (llvm::Type **)*v389[0];
                            }
                            unint64_t v308 = (unint64_t)*v301;
                            unsigned int v307 = v109;
                            if (v308 <= v109) {
                              unsigned int v307 = v308;
                            }
LABEL_482:
                            unsigned int v376 = v109;
                            if (v109 > 0x40) {
                              operator new[]();
                            }
                            uint64_t v375 = 0;
                            if (v307 != v109)
                            {
                              if (v307 > 0x3F) {
                                llvm::APInt::setBitsSlowCase(&v375, v307, v109);
                              }
                              else {
                                uint64_t v375 = 0xFFFFFFFFFFFFFFFFLL >> (v307 - v109) << v307;
                              }
                            }
                            goto LABEL_183;
                          }
                          uint64_t v289 = ***(void ***)v232;
                          uint64_t v290 = *(void *)(v289 + 152);
                          uint64_t v291 = *(unsigned int *)(v289 + 168);
                          if (v291)
                          {
                            LODWORD(v292) = (v291 - 1) & ((v232 >> 4) ^ (v232 >> 9));
                            v293 = (uint64_t *)(v290 + 16 * v292);
                            uint64_t v294 = *v293;
                            if (*v293 == v232)
                            {
LABEL_471:
                              v297 = (void *)v293[1];
                              long long v300 = (llvm::Value **)*v297;
                              v298 = (char *)(v297 + 2);
                              v299 = v300;
                              goto LABEL_472;
                            }
                            int v295 = 1;
                            while (v294 != -4096)
                            {
                              int v296 = v292 + v295++;
                              uint64_t v292 = v296 & (v291 - 1);
                              uint64_t v294 = *(void *)(v290 + 16 * v292);
                              if (v294 == v232)
                              {
                                v293 = (uint64_t *)(v290 + 16 * v292);
                                goto LABEL_471;
                              }
                            }
                          }
                          v293 = (uint64_t *)(v290 + 16 * v291);
                          goto LABEL_471;
                        }
                        uint64_t v238 = ***(void ***)v105;
                        uint64_t v239 = *(void *)(v238 + 152);
                        uint64_t v240 = *(unsigned int *)(v238 + 168);
                        if (v240)
                        {
                          LODWORD(v241) = (v240 - 1) & ((v105 >> 4) ^ (v105 >> 9));
                          int v242 = (llvm::Constant **)(v239 + 16 * v241);
                          uint64_t v243 = *v242;
                          if (*v242 == v105)
                          {
LABEL_462:
                            v282 = v242[1];
                            int v285 = *(llvm::Value ***)v282;
                            uint64_t v283 = (char *)v282 + 16;
                            unsigned int v284 = v285;
                            goto LABEL_463;
                          }
                          int v244 = 1;
                          while (v243 != (llvm::Constant *)-4096)
                          {
                            int v245 = v241 + v244++;
                            uint64_t v241 = v245 & (v240 - 1);
                            uint64_t v243 = *(llvm::Constant **)(v239 + 16 * v241);
                            if (v243 == v105)
                            {
                              int v242 = (llvm::Constant **)(v239 + 16 * v241);
                              goto LABEL_462;
                            }
                          }
                        }
                        int v242 = (llvm::Constant **)(v239 + 16 * v240);
                        goto LABEL_462;
                      }
                      unint64_t v378 = (unint64_t)&v386;
                      v379 = (llvm::Value **)v106;
                      int v380 = (uint64_t *)&v385;
                      int v381 = 0;
                      uint64_t v249 = *(void *)(v232 + 8);
                      if (!v249 || *(void *)(v249 + 8)) {
                        goto LABEL_310;
                      }
                      int v250 = *(unsigned __int8 *)(v232 + 16);
                      if (v250 != 5)
                      {
                        if (v250 == 56)
                        {
                          uint64_t v251 = *(void *)(v232 - 64);
                          uint64_t v252 = *(void *)(v251 + 8);
                          if (v252)
                          {
                            if (!*(void *)(v252 + 8)
                              && sub_1CC0422EC((uint64_t)&v378, v251)
                              && sub_1CBF528D8((uint64_t)&v380, *(unsigned __int8 **)(v232 - 32)))
                            {
                              goto LABEL_404;
                            }
                          }
                        }
                        goto LABEL_310;
                      }
                      if (*(_WORD *)(v232 + 18) != 28) {
                        goto LABEL_310;
                      }
                      uint64_t v275 = *(void *)(v232 - 32 * (*(_DWORD *)(v232 + 20) & 0x7FFFFFF));
                      uint64_t v276 = *(void *)(v275 + 8);
                      if (!v276 || *(void *)(v276 + 8)) {
                        goto LABEL_310;
                      }
                      unsigned int v277 = *(unsigned __int8 *)(v275 + 16);
                      if (v277 >= 0x1C)
                      {
                        if ((v277 & 0xFE) != 0x36) {
                          goto LABEL_310;
                        }
                        int v321 = *(_DWORD *)(v275 + 20);
                        uint64_t v322 = (v321 & 0x40000000) != 0
                             ? *(llvm ***)(v275 - 8)
                             : (llvm **)(v275 - 32 * (v321 & 0x7FFFFFF));
                        BOOL v329 = *v322;
                        if (!v329) {
                          goto LABEL_310;
                        }
                        v386 = v329;
                        int v278 = *(_DWORD *)(v275 + 20);
                        if ((v278 & 0x40000000) != 0)
                        {
                          uint64_t v330 = *(void *)(v275 - 8);
                          goto LABEL_563;
                        }
                      }
                      else
                      {
                        if (v277 != 5
                          || (*(_WORD *)(v275 + 18) & 0xFFFE) != 0x1A
                          || !*(void *)(v275 - 32 * (*(_DWORD *)(v275 + 20) & 0x7FFFFFF)))
                        {
                          goto LABEL_310;
                        }
                        v386 = *(llvm **)(v275 - 32 * (*(_DWORD *)(v275 + 20) & 0x7FFFFFF));
                        int v278 = *(_DWORD *)(v275 + 20);
                      }
                      uint64_t v330 = v275 - 32 * (v278 & 0x7FFFFFF);
LABEL_563:
                      if (v379 == *(llvm::Value ***)(v330 + 32)
                        && (sub_1CBF5295C((uint64_t)&v380, *(llvm::Constant **)(v232 - 32 * (*(_DWORD *)(v232 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
                      {
LABEL_404:
                        uint64_t v253 = *(void *)(a1 + 24);
                        if ((*((unsigned char *)v105 + 23) & 0x10) == 0)
                        {
                          v333 = 0;
                          unint64_t v332 = &byte_1CFBCE98E;
LABEL_536:
                          LOWORD(v382) = 261;
                          unint64_t v378 = (unint64_t)v332;
                          v379 = v333;
                          BOOL v336 = sub_1CC242524(v253, v235, v106, (uint64_t)&v378, 0, 0);
                          uint64_t v337 = *(void *)(a1 + 24);
                          uint64_t v338 = v386;
                          unint64_t v339 = *((unsigned int *)v385 + 2);
                          unsigned int v376 = v339;
                          if (v339 > 0x40) {
                            operator new[]();
                          }
                          uint64_t v340 = *(void *)v385;
                          uint64_t v375 = *(void *)v385;
                          uint64_t v341 = *((unsigned int *)v389[0] + 2);
                          if (v341 >= 0x41)
                          {
                            int v360 = 0;
                            int64_t v361 = (unint64_t)(v341 + 63) >> 6;
                            uint64_t v362 = (unint64_t *)*v389[0];
                            do
                            {
                              BOOL v171 = v361-- < 1;
                              if (v171) {
                                break;
                              }
                              unint64_t v363 = v362[v361];
                              v360 += __clz(v363);
                            }
                            while (!v363);
                            int v364 = v341 | 0xFFFFFFC0;
                            if ((v341 & 0x3F) == 0) {
                              int v364 = 0;
                            }
                            int v343 = v339;
                            if ((v341 - v360 - v364) > 0x40)
                            {
LABEL_543:
                              uint64_t v344 = v340 << v343;
                              if (v339 == v343) {
                                uint64_t v344 = 0;
                              }
                              if (v339) {
                                unint64_t v345 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v339;
                              }
                              else {
                                unint64_t v345 = 0;
                              }
                              uint64_t v375 = v345 & v344;
                              unsigned int v346 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v107, (llvm::LLVMContext *)&v375, v335);
                              if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
                                unsigned int v346 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v107 + 32) | ((unint64_t)(*(_DWORD *)(v107 + 8) == 19) << 32)), (uint64_t)v346);
                              }
                              if ((*((unsigned char *)v386 + 23) & 0x10) == 0)
                              {
                                int v357 = 0;
                                int v356 = &byte_1CFBCE98E;
LABEL_558:
                                LOWORD(v382) = 773;
                                unint64_t v378 = (unint64_t)v356;
                                v379 = v357;
                                int v380 = (uint64_t *)".mask";
                                uint64_t v359 = sub_1CBF52474(v337, v338, (uint64_t)v346, (uint64_t)&v378);
                                if (v376 >= 0x41 && v375) {
                                  MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                                }
                                char v199 = *((unsigned char *)v105 + 16) - 28;
                                LOWORD(v382) = 257;
                                int v214 = v359;
                                v198 = (const char *)v336;
                                return llvm::BinaryOperator::Create(v199, v214, (uint64_t)v198, (const char **)&v378, 0);
                              }
                              uint64_t v347 = ***(void ***)v386;
                              uint64_t v348 = *(void *)(v347 + 152);
                              uint64_t v349 = *(unsigned int *)(v347 + 168);
                              if (v349)
                              {
                                LODWORD(v350) = (v349 - 1) & ((v386 >> 4) ^ (v386 >> 9));
                                uint64_t v351 = v348 + 16 * v350;
                                int v352 = *(llvm **)v351;
                                if (*(llvm **)v351 == v386)
                                {
LABEL_557:
                                  int v355 = *(void **)(v351 + 8);
                                  uint64_t v358 = (llvm::Value **)*v355;
                                  int v356 = (char *)(v355 + 2);
                                  int v357 = v358;
                                  goto LABEL_558;
                                }
                                int v353 = 1;
                                while (v352 != (llvm *)-4096)
                                {
                                  int v354 = v350 + v353++;
                                  uint64_t v350 = v354 & (v349 - 1);
                                  int v352 = *(llvm **)(v348 + 16 * v350);
                                  if (v352 == v386)
                                  {
                                    uint64_t v351 = v348 + 16 * v350;
                                    goto LABEL_557;
                                  }
                                }
                              }
                              uint64_t v351 = v348 + 16 * v349;
                              goto LABEL_557;
                            }
                            unint64_t v342 = *v362;
                          }
                          else
                          {
                            unint64_t v342 = (unint64_t)*v389[0];
                          }
                          int v343 = v339;
                          if (v342 <= v339) {
                            int v343 = v342;
                          }
                          goto LABEL_543;
                        }
                        uint64_t v254 = ***(void ***)v105;
                        uint64_t v255 = *(void *)(v254 + 152);
                        uint64_t v256 = *(unsigned int *)(v254 + 168);
                        if (v256)
                        {
                          LODWORD(v257) = (v256 - 1) & ((v105 >> 4) ^ (v105 >> 9));
                          unint64_t v258 = (llvm::Constant **)(v255 + 16 * v257);
                          v259 = *v258;
                          if (*v258 == v105)
                          {
LABEL_535:
                            int v331 = v258[1];
                            int8x8_t v334 = *(llvm::Value ***)v331;
                            unint64_t v332 = (char *)v331 + 16;
                            v333 = v334;
                            goto LABEL_536;
                          }
                          int v260 = 1;
                          while (v259 != (llvm::Constant *)-4096)
                          {
                            int v261 = v257 + v260++;
                            uint64_t v257 = v261 & (v256 - 1);
                            v259 = *(llvm::Constant **)(v255 + 16 * v257);
                            if (v259 == v105)
                            {
                              unint64_t v258 = (llvm::Constant **)(v255 + 16 * v257);
                              goto LABEL_535;
                            }
                          }
                        }
                        unint64_t v258 = (llvm::Constant **)(v255 + 16 * v256);
                        goto LABEL_535;
                      }
LABEL_310:
                      unint64_t v378 = (unint64_t)&v387;
                      v379 = 0;
                      int v380 = (uint64_t *)&v388;
                      uint64_t v201 = (void **)*((void *)v105 + 1);
                      if (!v201 || v201[1])
                      {
LABEL_312:
                        char v202 = *(unsigned char *)(a2 + 17);
                        if ((v202 & 2) == 0)
                        {
                          LODWORD(v379) = v109;
                          if (v109 > 0x40) {
                            operator new[]();
                          }
                          unint64_t v378 = 0;
                          if (v111)
                          {
                            unsigned int v203 = v109 - v111;
                            if (v109 - v111 > 0x3F) {
                              llvm::APInt::setBitsSlowCase(&v378, v203, v109);
                            }
                            else {
                              v378 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v111 << v203;
                            }
                          }
                          BOOL v204 = llvm::MaskedValueIsZero(v105, (const llvm::Value *)&v378, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v371[0]);
                          if (v379 >= 0x41 && v378) {
                            MEMORY[0x1D25D9CB0](v378, 0x1000C8000313F17);
                          }
                          char v202 = *(unsigned char *)(a2 + 17);
                          if (v204)
                          {
                            char v205 = v202 | 2;
LABEL_326:
                            *(unsigned char *)(a2 + 17) = v205;
                            return (llvm::Value *)a2;
                          }
                        }
                        if ((v202 & 4) == 0)
                        {
                          uint64_t v206 = *(llvm::Value ***)(a1 + 56);
                          uint64_t v207 = *(llvm ***)(a1 + 72);
                          uint64_t v208 = (uint64_t *)a2;
                          if (!*(void *)(a2 + 40))
                          {
                            if (*((unsigned __int8 *)v105 + 16) < 0x1Cu
                              || (uint64_t v208 = (uint64_t *)v105, !*((void *)v105 + 5)))
                            {
                              uint64_t v208 = 0;
                            }
                          }
                          unint64_t v378 = *(void *)(a1 + 80);
                          v379 = v206;
                          int v380 = v208;
                          int v381 = v207;
                          uint64_t v382 = 0;
                          LOBYTE(v383) = 1;
                          if (sub_1CC162D6C(v105, 0, (uint64_t)&v378) > v111)
                          {
                            char v205 = *(unsigned char *)(a2 + 17) | 4;
                            goto LABEL_326;
                          }
                        }
                        goto LABEL_327;
                      }
                      int v246 = *((unsigned __int8 *)v105 + 16);
                      if (v246 == 5)
                      {
                        if (*((_WORD *)v105 + 9) != 15) {
                          goto LABEL_312;
                        }
                        if (!sub_1CBF5295C((uint64_t)&v378, *((llvm::Constant **)v105 - 4 * (*((_DWORD *)v105 + 5) & 0x7FFFFFF))))goto LABEL_312; {
                        BOOL v248 = (void **)((void *)v105 - 4 * (*((_DWORD *)v105 + 5) & 0x7FFFFFF))[4];
                        }
                        if (!v248) {
                          goto LABEL_312;
                        }
                      }
                      else
                      {
                        if (v246 != 43) {
                          goto LABEL_312;
                        }
                        if (!sub_1CBF528D8((uint64_t)&v378, *((unsigned __int8 **)v105 - 8))) {
                          goto LABEL_312;
                        }
                        BOOL v248 = (void **)*((void *)v105 - 4);
                        if (!v248) {
                          goto LABEL_312;
                        }
                      }
                      *int v380 = (uint64_t)v248;
                      unint64_t v262 = *((unsigned int *)v387 + 2);
                      LODWORD(v379) = v262;
                      if (v262 > 0x40) {
                        operator new[]();
                      }
                      uint64_t v263 = *v387;
                      unint64_t v378 = *v387;
                      uint64_t v268 = *((unsigned int *)v389[0] + 2);
                      if (v268 >= 0x41)
                      {
                        int v324 = 0;
                        int64_t v325 = (unint64_t)(v268 + 63) >> 6;
                        uint64_t v326 = (unint64_t *)*v389[0];
                        do
                        {
                          BOOL v171 = v325-- < 1;
                          if (v171) {
                            break;
                          }
                          unint64_t v327 = v326[v325];
                          v324 += __clz(v327);
                        }
                        while (!v327);
                        int v328 = v268 | 0xFFFFFFC0;
                        if ((v268 & 0x3F) == 0) {
                          int v328 = 0;
                        }
                        int v270 = v262;
                        if ((v268 - v324 - v328) > 0x40) {
                          goto LABEL_434;
                        }
                        unint64_t v269 = *v326;
                      }
                      else
                      {
                        unint64_t v269 = (unint64_t)*v389[0];
                      }
                      int v270 = v262;
                      if (v269 <= v262) {
                        int v270 = v269;
                      }
LABEL_434:
                      uint64_t v271 = v263 << v270;
                      if (v262 == v270) {
                        uint64_t v271 = 0;
                      }
                      unint64_t v272 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v262;
                      if (!v262) {
                        unint64_t v272 = 0;
                      }
                      unint64_t v378 = v272 & v271;
                      v273 = (llvm::Instruction *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v107, (llvm::LLVMContext *)&v378, v247);
                      if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
                        v273 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v107 + 32) | ((unint64_t)(*(_DWORD *)(v107 + 8) == 19) << 32)), (uint64_t)v273);
                      }
                      if (v379 >= 0x41 && v378) {
                        MEMORY[0x1D25D9CB0](v378, 0x1000C8000313F17);
                      }
                      uint64_t v274 = *(void *)(a1 + 24);
                      LOWORD(v382) = 257;
                      v198 = (const char *)sub_1CC242524(v274, (uint64_t)v388, v106, (uint64_t)&v378, 0, 0);
                      LOWORD(v382) = 257;
                      char v199 = 15;
                      int v214 = v273;
                      return llvm::BinaryOperator::Create(v199, v214, (uint64_t)v198, (const char **)&v378, 0);
                    }
                    if (*(_WORD *)(v233 + 18) != 28) {
                      goto LABEL_366;
                    }
                    int v309 = (llvm::Constant **)(v233 - 32 * (*(_DWORD *)(v233 + 20) & 0x7FFFFFF));
                    unsigned int v310 = *v309;
                    uint64_t v311 = *((void *)*v309 + 1);
                    if (!v311 || *(void *)(v311 + 8)) {
                      goto LABEL_366;
                    }
                    unsigned int v312 = *((unsigned __int8 *)v310 + 16);
                    if (v312 >= 0x1C)
                    {
                      if ((v312 & 0xFE) != 0x36) {
                        goto LABEL_366;
                      }
                      int v313 = *((_DWORD *)v310 + 5);
                      if ((v313 & 0x40000000) != 0)
                      {
                        uint64_t v323 = (char *)*((void *)v310 - 1);
                        goto LABEL_568;
                      }
                    }
                    else
                    {
                      if (v312 != 5 || (*((_WORD *)v310 + 9) & 0xFFFE) != 0x1A) {
                        goto LABEL_366;
                      }
                      int v313 = *((_DWORD *)v310 + 5);
                    }
                    uint64_t v323 = (char *)v310 - 32 * (v313 & 0x7FFFFFF);
LABEL_568:
                    if (*((void *)v323 + 4) == v106 && (sub_1CBF5295C((uint64_t)&v380, v309[4]) & 1) != 0) {
                      goto LABEL_445;
                    }
                    goto LABEL_366;
                  }
                }
                else
                {
                  if (v67 != 54) {
                    goto LABEL_88;
                  }
                  if (!sub_1CBF687D0((uint64_t)&v378, *(llvm::Constant **)(v66 - 64))) {
                    goto LABEL_88;
                  }
                  uint64_t v68 = *(llvm::Value **)(v66 - 32);
                  if (!v68) {
                    goto LABEL_88;
                  }
                }
                unsigned __int8 *v379 = v68;
                goto LABEL_89;
              }
            }
            else
            {
              if (v60 != 54) {
                goto LABEL_75;
              }
              if (!sub_1CBF687D0((uint64_t)&v378, *(llvm::Constant **)(v59 - 64))) {
                goto LABEL_75;
              }
              uint64_t v61 = *(llvm::Value **)(v59 - 32);
              if (!v61) {
                goto LABEL_75;
              }
            }
            unsigned __int8 *v379 = v61;
            goto LABEL_76;
          }
          if (*((_WORD *)v389[0] + 9) != 28) {
            goto LABEL_128;
          }
          int v62 = v389[0][-4 * (*((_DWORD *)v389[0] + 5) & 0x7FFFFFF)];
          int v63 = *((unsigned __int8 *)v62 + 16);
          if (v63 == 5)
          {
            if (*((_WORD *)v62 + 9) != 26
              || !sub_1CBF68974((uint64_t)&v378, *((llvm::Constant **)v62 - 4 * (*((_DWORD *)v62 + 5) & 0x7FFFFFF)))|| (uint64_t v64 = (llvm::Value *)((void *)v62 - 4 * (*((_DWORD *)v62 + 5) & 0x7FFFFFF))[4]) == 0)
            {
LABEL_95:
              if (sub_1CCA78DC8((uint64_t)&v380, 26, (uint64_t)v62)) {
                goto LABEL_96;
              }
              uint64_t v69 = (uint64_t)v57[-4 * (*((_DWORD *)v57 + 5) & 0x7FFFFFF) + 4];
              int v70 = *(unsigned __int8 *)(v69 + 16);
              if (v70 == 5)
              {
                if (*(_WORD *)(v69 + 18) != 26
                  || !sub_1CBF68974((uint64_t)&v378, *(llvm::Constant **)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF)))|| (uint64_t v71 = *(llvm::Value **)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF) + 32)) == 0)
                {
LABEL_106:
                  if (!sub_1CCA78DC8((uint64_t)&v380, 26, v69)) {
                    goto LABEL_128;
                  }
LABEL_107:
                  int v65 = v57[-4 * (*((_DWORD *)v57 + 5) & 0x7FFFFFF)];
                  if (!v65) {
                    goto LABEL_128;
                  }
                  goto LABEL_108;
                }
              }
              else
              {
                if (v70 != 54) {
                  goto LABEL_106;
                }
                if (!sub_1CBF687D0((uint64_t)&v378, *(llvm::Constant **)(v69 - 64))) {
                  goto LABEL_106;
                }
                uint64_t v71 = *(llvm::Value **)(v69 - 32);
                if (!v71) {
                  goto LABEL_106;
                }
              }
              unsigned __int8 *v379 = v71;
              goto LABEL_107;
            }
          }
          else
          {
            if (v63 != 54) {
              goto LABEL_95;
            }
            if (!sub_1CBF687D0((uint64_t)&v378, *((llvm::Constant **)v62 - 8))) {
              goto LABEL_95;
            }
            uint64_t v64 = (llvm::Value *)*((void *)v62 - 4);
            if (!v64) {
              goto LABEL_95;
            }
          }
          unsigned __int8 *v379 = v64;
LABEL_96:
          int v65 = v57[-4 * (*((_DWORD *)v57 + 5) & 0x7FFFFFF) + 4];
          goto LABEL_108;
        }
      }
      else
      {
        if (v29 != 56) {
          goto LABEL_58;
        }
        uint64_t v30 = (uint64_t)*(v389[0] - 8);
        if (sub_1CCA173D0((uint64_t)&v378, 13, v30) || sub_1CCAB2B0C((uint64_t)&v381, v30, v31))
        {
          uint64_t v32 = *(v28 - 4);
          if (v32) {
            goto LABEL_47;
          }
          uint64_t v33 = 0;
        }
        else
        {
          uint64_t v33 = (uint64_t)*(v28 - 4);
        }
        if (!sub_1CCA173D0((uint64_t)&v378, 13, v33) && !sub_1CCAB2B0C((uint64_t)&v381, v33, v37)) {
          goto LABEL_58;
        }
        uint64_t v32 = *(v28 - 8);
        if (!v32) {
          goto LABEL_58;
        }
      }
LABEL_47:
      uint64_t *v384 = (uint64_t)v32;
      uint64_t v39 = v386;
      unint64_t v378 = (unint64_t)&v386;
      v379 = &v386;
      char v40 = sub_1CBC5BE40((void **)&v378, (uint64_t)v386);
      if (v39 && (v40 & 1) == 0) {
        unsigned __int8 *v379 = v39;
      }
      if (!canTryToConstantAddTwoShiftAmounts((llvm::Value *)a2, v388, v389[0], v386)) {
        goto LABEL_157;
      }
      uint64_t v41 = (unsigned __int8 *)sub_1CC02A5B0(v386, v388, 0, 0, (uint64_t)v371, (llvm::DSOLocalEquivalent **)3);
      if (!v41) {
        goto LABEL_157;
      }
      uint64_t v42 = (llvm::Constant *)v41;
      if (v41[16] > 0x14u) {
        goto LABEL_157;
      }
      uint64_t v43 = *(llvm::ConstantInt **)v41;
      if ((*(_DWORD *)(*(void *)v41 + 8) & 0xFE) == 0x12) {
        uint64_t v43 = (llvm::ConstantInt *)**((void **)v43 + 2);
      }
      unint64_t v44 = (llvm::Type *)v27;
      if ((*(_DWORD *)(v27 + 8) & 0xFE) == 0x12) {
        unint64_t v44 = **(llvm::Type ***)(v27 + 16);
      }
      unsigned int v45 = llvm::Type::getPrimitiveSizeInBits(v44);
      uint64_t v46 = (llvm::Constant *)llvm::ConstantInt::get(v43, v45, 0);
      unsigned int v48 = llvm::Constant::replaceUndefsWith(v42, v46, v47);
      unsigned int v49 = sub_1CC56C0C0((llvm *)0x27, v48, (llvm::Constant *)v27, 0);
      int v52 = (llvm::ConstantExpr *)llvm::Constant::getAllOnesValue((llvm::Constant *)v27, v50, v51);
      unint64_t v53 = (llvm::Constant **)llvm::ConstantExpr::getShl(v52, v49, 0, 0);
      LShr = llvm::ConstantExpr::getNot(v53, v54, v55);
      goto LABEL_120;
    }
  }
  return v8;
}

llvm::Value *sub_1CCAAF48C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *((void *)a2 - 8);
  long long v5 = (llvm::Constant *)*((void *)a2 - 4);
  int v6 = (a2[17] >> 1) & 1;
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)__s2 = *(_OWORD *)(a1 + 88);
  long long v282 = v8;
  uint64_t v284 = *((void *)&v7 + 1);
  uint64_t v283 = a2;
  uint64_t v9 = sub_1CC02BE04(v4, v5, v6, (uint64_t)__s2, (llvm::DSOLocalEquivalent **)3);
  if (v9) {
    return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v9);
  }
  unint64_t v11 = sub_1CC9D812C(a1, a2);
  if (v11) {
    return (llvm::Value *)v11;
  }
  unint64_t v11 = (unint64_t)sub_1CCAAB0DC(a1, a2);
  if (v11) {
    return (llvm::Value *)v11;
  }
  uint64_t v12 = *((void *)a2 - 8);
  int v13 = (unsigned __int8 *)*((void *)a2 - 4);
  uint64_t v14 = *(void *)a2;
  uint64_t v280 = 0;
  __s2[0] = &v280;
  __s2[1] = 0;
  if (!sub_1CBF528D8((uint64_t)__s2, v13)) {
    goto LABEL_306;
  }
  unsigned int v17 = (uint64_t *)v280;
  if (*(_DWORD *)(v280 + 8) >= 0x41u) {
    unsigned int v17 = *(uint64_t **)v280;
  }
  uint64_t v18 = *v17;
  uint64_t v19 = (llvm::Type *)v14;
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
    uint64_t v19 = **(llvm::Type ***)(v14 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
  unsigned int v23 = PrimitiveSizeInBits;
  if (*(unsigned char *)(v12 + 16) == 84)
  {
    uint64_t v24 = *(void *)(v12 - 32);
    if (v24)
    {
      if (!*(unsigned char *)(v24 + 16) && *(void *)(v24 + 24) == *(void *)(v12 + 72))
      {
        uint64_t v46 = (*(unsigned char *)(v24 + 33) & 0x20) != 0 ? v12 : 0;
        if (v46 && PrimitiveSizeInBits)
        {
          v22.i32[0] = PrimitiveSizeInBits;
          uint8x8_t v25 = (uint8x8_t)vcnt_s8(v22);
          v25.i16[0] = vaddlv_u8(v25);
          unsigned int v26 = __clz(PrimitiveSizeInBits) ^ 0x1F;
          if (v25.i32[0] <= 1u && v26 == v18)
          {
            int v40 = *(_DWORD *)(*(void *)(v46 - 32) + 36);
            if ((v40 - 52) <= 2)
            {
              if (v40 == 53) {
                unint64_t v41 = -1;
              }
              else {
                unint64_t v41 = 0;
              }
              Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt *)v14, v41, v21);
              uint64_t v43 = *(void *)(a1 + 24);
              unint64_t v44 = *(void **)(v46 - 32 * (*(_DWORD *)(v46 + 20) & 0x7FFFFFF));
              LOWORD(v283) = 257;
              unsigned int v45 = sub_1CB845F20(v43, 32, v44, (uint64_t)Signed, (uint64_t)__s2);
              goto LABEL_91;
            }
          }
        }
      }
    }
  }
  uint64_t v278 = 0;
  int v279 = 0;
  __s2[0] = &v279;
  __s2[1] = &v278;
  *(void *)&long long v282 = 0;
  int v28 = *(unsigned __int8 *)(v12 + 16);
  unsigned int v268 = v18;
  if (v28 == 5)
  {
    if (*(_WORD *)(v12 + 18) != 25) {
      goto LABEL_65;
    }
    uint64_t v30 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
    if (!*(void *)v30) {
      goto LABEL_65;
    }
    int v279 = *(void **)v30;
    if (!sub_1CBF5295C((uint64_t)&__s2[1], *(llvm::Constant **)(v30 + 32))) {
      goto LABEL_65;
    }
  }
  else
  {
    if (v28 != 53) {
      goto LABEL_65;
    }
    if (!*(void *)(v12 - 64)) {
      goto LABEL_65;
    }
    int v279 = *(void **)(v12 - 64);
    if ((sub_1CBF528D8((uint64_t)&__s2[1], *(unsigned __int8 **)(v12 - 32)) & 1) == 0) {
      goto LABEL_65;
    }
  }
  uint64_t v31 = *(unsigned int *)(v278 + 8);
  uint64_t v32 = (void *)v278;
  if (v31 < 0x41) {
    goto LABEL_37;
  }
  int v33 = 0;
  int64_t v34 = (unint64_t)(v31 + 63) >> 6;
  do
  {
    BOOL v35 = v34-- < 1;
    if (v35) {
      break;
    }
    unint64_t v36 = *(void *)(*(void *)v278 + 8 * v34);
    v33 += __clz(v36);
  }
  while (!v36);
  int v37 = v31 | 0xFFFFFFC0;
  if ((v31 & 0x3F) == 0) {
    int v37 = 0;
  }
  if ((v31 - v33 - v37) <= 0x40)
  {
    uint64_t v32 = *(void **)v278;
LABEL_37:
    if (*v32 >= (unint64_t)v23) {
      goto LABEL_65;
    }
    uint64_t v38 = *(unsigned int *)(v278 + 8);
    if (v38 >= 0x41)
    {
      int v47 = 0;
      int64_t v48 = (unint64_t)(v38 + 63) >> 6;
      unsigned int v49 = *(unint64_t **)v278;
      do
      {
        BOOL v35 = v48-- < 1;
        if (v35) {
          break;
        }
        unint64_t v50 = v49[v48];
        v47 += __clz(v50);
      }
      while (!v50);
      int v51 = v38 | 0xFFFFFFC0;
      if ((v38 & 0x3F) == 0) {
        int v51 = 0;
      }
      unint64_t v39 = *v49;
      if ((v38 - v47 - v51) >= 0x41) {
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v39 = *(void *)v278;
    }
    if (v39 < v18)
    {
      int v52 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, (v18 - v39), 0);
      if ((*(unsigned char *)(v12 + 17) & 2) == 0)
      {
        uint64_t v53 = *(void *)(v12 + 8);
        if (!v53 || *(void *)(v53 + 8)) {
          goto LABEL_65;
        }
        uint64_t v54 = *(void *)(a1 + 24);
        LOWORD(v283) = 257;
        uint64_t v55 = sub_1CC2429AC(v54, (uint64_t)v279, (uint64_t)v52, (uint64_t)__s2, (a2[17] & 2) != 0);
LABEL_342:
        int v225 = v55;
        LODWORD(v275) = v23;
        if (v23 > 0x40) {
          operator new[]();
        }
        __src = 0;
        if (v23 != v18)
        {
          int v56 = (const llvm::APInt *)(v23 - v18);
          if (v56 > 0x40) {
            llvm::APInt::setBitsSlowCase(&__src, 0, v56);
          }
          else {
            __src = (void *)(0xFFFFFFFFFFFFFFFFLL >> (v18 - v23));
          }
        }
        Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)&__src, v56);
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
          Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)Splat);
        }
        LOWORD(v283) = 257;
        int v148 = v225;
        goto LABEL_377;
      }
      LOWORD(v283) = 257;
      unsigned int v144 = llvm::BinaryOperator::Create(26, v279, (uint64_t)v52, (const char **)__s2, 0);
      unint64_t v11 = (unint64_t)v144;
      char v145 = *((unsigned char *)v144 + 17) & 0xFD | a2[17] & 2;
      goto LABEL_189;
    }
    if (v39 <= v18)
    {
      LODWORD(v275) = v23;
      if (v23 > 0x40) {
        operator new[]();
      }
      __src = 0;
      if (v23 != v18)
      {
        int v29 = (const llvm::APInt *)(v23 - v18);
        if (v29 > 0x40) {
          llvm::APInt::setBitsSlowCase(&__src, 0, v29);
        }
        else {
          __src = (void *)(0xFFFFFFFFFFFFFFFFLL >> (v18 - v23));
        }
      }
      uint64_t v146 = v279;
      Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)&__src, v29);
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)Splat);
      }
      LOWORD(v283) = 257;
      int v148 = v146;
LABEL_377:
      unint64_t v11 = (unint64_t)llvm::BinaryOperator::Create(28, v148, (uint64_t)Splat, (const char **)__s2, 0);
      if (v275 < 0x41) {
        return (llvm::Value *)v11;
      }
      uint64_t v212 = __src;
      if (!__src) {
        return (llvm::Value *)v11;
      }
      goto LABEL_379;
    }
LABEL_62:
    uint64_t v57 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, (v39 - v18), 0);
    if ((*(unsigned char *)(v12 + 17) & 2) == 0)
    {
      uint64_t v58 = *(void *)(v12 + 8);
      if (!v58 || *(void *)(v58 + 8)) {
        goto LABEL_65;
      }
      uint64_t v224 = *(void *)(a1 + 24);
      LOWORD(v283) = 257;
      uint64_t v55 = sub_1CC242524(v224, (uint64_t)v279, (uint64_t)v57, (uint64_t)__s2, 0, 0);
      goto LABEL_342;
    }
    LOWORD(v283) = 257;
    unsigned int v144 = llvm::BinaryOperator::Create(25, v279, (uint64_t)v57, (const char **)__s2, 0);
    unint64_t v11 = (unint64_t)v144;
    char v145 = *((unsigned char *)v144 + 17) | 2;
LABEL_189:
    *((unsigned char *)v144 + 17) = v145;
    return (llvm::Value *)v11;
  }
LABEL_65:
  uint64_t v277 = 0;
  uint64_t v59 = *(void *)(v12 + 8);
  if (!v59 || *(void *)(v59 + 8)) {
    goto LABEL_93;
  }
  int v60 = *(unsigned __int8 *)(v12 + 16);
  if (v60 == 5)
  {
    if (*(_WORD *)(v12 + 18) != 13) {
      goto LABEL_82;
    }
    int v67 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
    uint64_t v68 = *v67;
    uint64_t v69 = *(void *)(*v67 + 8);
    if (!v69 || *(void *)(v69 + 8))
    {
LABEL_80:
      uint64_t v70 = v67[4];
      uint64_t v71 = *(void *)(v70 + 8);
      if (!v71 || *(void *)(v71 + 8)) {
        goto LABEL_82;
      }
      int v151 = *(unsigned __int8 *)(v70 + 16);
      if (v151 == 5)
      {
        if (*(_WORD *)(v70 + 18) != 25) {
          goto LABEL_82;
        }
        int v227 = (void *)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF));
        if (!*v227) {
          goto LABEL_82;
        }
        int v279 = (void *)*v227;
        uint64_t v152 = (unsigned __int8 *)v227[4];
      }
      else
      {
        if (v151 != 53 || !*(void *)(v70 - 64)) {
          goto LABEL_82;
        }
        int v279 = *(void **)(v70 - 64);
        uint64_t v152 = *(unsigned __int8 **)(v70 - 32);
      }
      if (v13 != v152) {
        goto LABEL_82;
      }
      uint64_t v154 = *v67;
      if (!*v67) {
        goto LABEL_82;
      }
LABEL_360:
      uint64_t v277 = v154;
      uint64_t v228 = *(void *)(a1 + 24);
      LOWORD(v283) = 257;
      int v229 = sub_1CC2429AC(v228, v154, (uint64_t)v13, (uint64_t)__s2, 0);
      uint64_t v230 = *(void *)(a1 + 24);
      LOWORD(v283) = 257;
      uint64_t v232 = sub_1CB844A3C(v230, v229, (uint64_t)v279, (uint64_t)__s2, 0, 0);
      uint64_t v233 = (unint64_t *)v280;
      uint64_t v234 = *(unsigned int *)(v280 + 8);
      if (v234 >= 0x41)
      {
        int v235 = 0;
        int64_t v236 = (unint64_t)(v234 + 63) >> 6;
        do
        {
          BOOL v35 = v236-- < 1;
          if (v35) {
            break;
          }
          unint64_t v237 = *(void *)(*(void *)v280 + 8 * v236);
          v235 += __clz(v237);
        }
        while (!v237);
        int v238 = v234 | 0xFFFFFFC0;
        if ((v234 & 0x3F) == 0) {
          int v238 = 0;
        }
        int v239 = v23;
        if ((v234 - v235 - v238) > 0x40) {
          goto LABEL_370;
        }
        uint64_t v233 = *(unint64_t **)v280;
      }
      unint64_t v240 = *v233;
      int v239 = v23;
      if (v240 <= v23) {
        int v239 = v240;
      }
LABEL_370:
      LODWORD(v275) = v23;
      if (v23 > 0x40) {
        operator new[]();
      }
      __src = 0;
      if (v23 != v239)
      {
        unsigned int v231 = (const llvm::APInt *)(v23 - v239);
        if (v231 > 0x40) {
          llvm::APInt::setBitsSlowCase(&__src, 0, v231);
        }
        else {
          __src = (void *)(0xFFFFFFFFFFFFFFFFLL >> (v239 - v23));
        }
      }
      Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)&__src, v231);
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)Splat);
      }
      LOWORD(v283) = 257;
      int v148 = v232;
      goto LABEL_377;
    }
    int v149 = *(unsigned __int8 *)(v68 + 16);
    if (v149 == 5)
    {
      if (*(_WORD *)(v68 + 18) != 25) {
        goto LABEL_80;
      }
      uint64_t v226 = (void *)(v68 - 32 * (*(_DWORD *)(v68 + 20) & 0x7FFFFFF));
      if (!*v226) {
        goto LABEL_80;
      }
      int v279 = (void *)*v226;
      unint64_t v150 = (unsigned __int8 *)v226[4];
    }
    else
    {
      if (v149 != 53 || !*(void *)(v68 - 64)) {
        goto LABEL_80;
      }
      int v279 = *(void **)(v68 - 64);
      unint64_t v150 = *(unsigned __int8 **)(v68 - 32);
    }
    if (v13 == v150)
    {
      uint64_t v154 = v67[4];
      if (v154) {
        goto LABEL_360;
      }
    }
    goto LABEL_80;
  }
  if (v60 != 41) {
    goto LABEL_82;
  }
  uint64_t v61 = *(void *)(v12 - 64);
  uint64_t v62 = *(void *)(v61 + 8);
  if (v62 && !*(void *)(v62 + 8))
  {
    int v140 = *(unsigned __int8 *)(v61 + 16);
    if (v140 == 5)
    {
      if (*(_WORD *)(v61 + 18) != 25) {
        goto LABEL_71;
      }
      uint64_t v153 = (void *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF));
      if (!*v153) {
        goto LABEL_71;
      }
      int v279 = (void *)*v153;
      char v141 = (unsigned __int8 *)v153[4];
    }
    else
    {
      if (v140 != 53 || !*(void *)(v61 - 64)) {
        goto LABEL_71;
      }
      int v279 = *(void **)(v61 - 64);
      char v141 = *(unsigned __int8 **)(v61 - 32);
    }
    if (v13 == v141)
    {
      uint64_t v154 = *(void *)(v12 - 32);
      if (v154) {
        goto LABEL_360;
      }
    }
  }
LABEL_71:
  uint64_t v63 = *(void *)(v12 - 32);
  uint64_t v64 = *(void *)(v63 + 8);
  if (!v64 || *(void *)(v64 + 8)) {
    goto LABEL_82;
  }
  int v65 = *(unsigned __int8 *)(v63 + 16);
  if (v65 == 5)
  {
    if (*(_WORD *)(v63 + 18) != 25) {
      goto LABEL_82;
    }
    int v155 = (void *)(v63 - 32 * (*(_DWORD *)(v63 + 20) & 0x7FFFFFF));
    if (!*v155) {
      goto LABEL_82;
    }
    int v279 = (void *)*v155;
    uint64_t v66 = (unsigned __int8 *)v155[4];
  }
  else
  {
    if (v65 != 53 || !*(void *)(v63 - 64)) {
      goto LABEL_82;
    }
    int v279 = *(void **)(v63 - 64);
    uint64_t v66 = *(unsigned __int8 **)(v63 - 32);
  }
  if (v13 == v66)
  {
    uint64_t v154 = *(void *)(v12 - 64);
    if (v154) {
      goto LABEL_360;
    }
  }
LABEL_82:
  __s2[0] = &v279;
  if (sub_1CBC5BE40((void **)__s2, v12))
  {
    if (*(unsigned char *)(v14 + 8) != 13) {
      goto LABEL_90;
    }
    int v72 = (llvm::Type *)*v279;
    if (*(unsigned char *)(*v279 + 8) == 13)
    {
      unsigned int v74 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
      if (v73 == 1) {
      unsigned int v76 = llvm::Type::getPrimitiveSizeInBits(v72);
      }
      if (v75 == 1) {
      char v77 = sub_1CC9D18E0(a1, v74, v76);
      }
      LODWORD(v18) = v268;
      if (v77)
      {
LABEL_90:
        uint64_t v78 = *(void *)(a1 + 24);
        uint64_t v79 = v279;
        LOWORD(v283) = 257;
        int v80 = llvm::ConstantInt::get((llvm::ConstantInt *)*v279, v18, 0);
        unsigned int v45 = sub_1CC2429AC(v78, (uint64_t)v79, (uint64_t)v80, (uint64_t)__s2, 0);
LABEL_91:
        uint64_t v81 = v45;
        uint64_t v82 = operator new(0x60uLL);
        v82[13] = v82[13] & 0x38000000 | 1;
        unint64_t v11 = (unint64_t)(v82 + 8);
        *(void *)uint64_t v82 = 0;
        *((void *)v82 + 1) = 0;
        *((void *)v82 + 2) = 0;
        *((void *)v82 + 3) = v82 + 8;
        LOWORD(v283) = 257;
LABEL_92:
        uint64_t p_src = __s2;
        uint64_t v84 = (llvm::ZExtInst *)v11;
        uint64_t v85 = v81;
LABEL_126:
        llvm::ZExtInst::ZExtInst(v84, v85, (llvm::Type *)v14, (const char **)p_src, 0);
        return (llvm::Value *)v11;
      }
    }
  }
LABEL_93:
  __s2[0] = &v279;
  if (sub_1CBC5BEAC((void **)__s2, v12))
  {
    int v86 = (llvm::Type *)*v279;
    int v87 = *(_DWORD *)(*v279 + 8);
    uint64_t v88 = (llvm::Type *)*v279;
    if ((v87 & 0xFE) == 0x12) {
      uint64_t v88 = (llvm::Type *)**((void **)v86 + 2);
    }
    int v90 = llvm::Type::getPrimitiveSizeInBits(v88);
    unsigned int v91 = v90 - 1;
    if (v90 == 1)
    {
      LODWORD(__s2[1]) = v23;
      if (v23 > 0x40) {
        operator new[]();
      }
      __s2[0] = 0;
      if (v23 != v268)
      {
        uint64_t v89 = (const llvm::APInt *)(v23 - v268);
        if (v89 > 0x40) {
          llvm::APInt::setBitsSlowCase(__s2, 0, v89);
        }
        else {
          __s2[0] = (void *)(0xFFFFFFFFFFFFFFFFLL >> (v268 - v23));
        }
      }
      uint64_t v94 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)__s2, v89);
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        uint64_t v94 = (uint64_t *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)v94);
      }
      if (LODWORD(__s2[1]) >= 0x41 && __s2[0]) {
        MEMORY[0x1D25D9CB0](__s2[0], 0x1000C8000313F17);
      }
      unsigned int v95 = v279;
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)v14, v92, v93);
      LOWORD(v283) = 257;
      return sub_1CC199EFC((uint64_t)v95, v94, (uint64_t)NullValue, (const char **)__s2, 0, 0);
    }
    if (*(unsigned char *)(v14 + 8) != 13) {
      goto LABEL_115;
    }
    if (v87 == 13)
    {
      unsigned int v98 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
      if (v97 == 1) {
      unsigned int v100 = llvm::Type::getPrimitiveSizeInBits(v86);
      }
      if (v99 == 1) {
      if (sub_1CC9D18E0(a1, v98, v100))
      }
      {
LABEL_115:
        uint64_t v101 = *(void *)(v12 + 8);
        if (v101)
        {
          if (!*(void *)(v101 + 8))
          {
            if (v23 - 1 == v268)
            {
              uint64_t v130 = *(void *)(a1 + 24);
              uint64_t v131 = v279;
              LOWORD(v283) = 257;
              uint64_t v132 = llvm::ConstantInt::get((llvm::ConstantInt *)*v279, (v90 - 1), 0);
              unsigned int v45 = sub_1CC2429AC(v130, (uint64_t)v131, (uint64_t)v132, (uint64_t)__s2, 0);
              goto LABEL_91;
            }
            if (v23 - v90 == v268)
            {
              if (v91 >= v268) {
                unint64_t v136 = v268;
              }
              else {
                unint64_t v136 = v91;
              }
              uint64_t v137 = *(void *)(a1 + 24);
              uint64_t v138 = v279;
              LOWORD(v283) = 257;
              v139 = llvm::ConstantInt::get((llvm::ConstantInt *)*v279, v136, 0);
              unsigned int v45 = sub_1CC5357E8(v137, (uint64_t)v138, (uint64_t)v139, (uint64_t)__s2, 0);
              goto LABEL_91;
            }
          }
        }
      }
    }
  }
  if (v23 - 1 != v268) {
    goto LABEL_133;
  }
  __s2[1] = &v279;
  *(void *)&long long v282 = &v279;
  uint64_t v102 = *(void *)(v12 + 8);
  if (v102 && !*(void *)(v102 + 8) && sub_1CCAB2EEC((uint64_t)__s2, v12))
  {
    unsigned int v103 = operator new(0x60uLL);
    unint64_t v11 = (unint64_t)(v103 + 8);
    v103[13] = v103[13] & 0x38000000 | 1;
    *(void *)unsigned int v103 = 0;
    *((void *)v103 + 1) = 0;
    *((void *)v103 + 2) = 0;
    *((void *)v103 + 3) = v103 + 8;
    uint64_t v104 = *(void *)(a1 + 24);
    uint64_t v105 = v279;
    LOWORD(v283) = 257;
    unsigned int v108 = llvm::Constant::getNullValue((llvm::Constant *)*v279, v106, v107);
    uint64_t v85 = sub_1CB845F20(v104, 33, v105, (uint64_t)v108, (uint64_t)__s2);
    __int16 v276 = 257;
LABEL_125:
    uint64_t p_src = &__src;
    uint64_t v84 = (llvm::ZExtInst *)v11;
    goto LABEL_126;
  }
  __s2[0] = &v279;
  __s2[1] = &v277;
  uint64_t v109 = *(void *)(v12 + 8);
  if (v109 && !*(void *)(v109 + 8) && sub_1CCA17234((void **)__s2, v12))
  {
    uint64_t v110 = operator new(0x60uLL);
    v110[13] = v110[13] & 0x38000000 | 1;
    unint64_t v11 = (unint64_t)(v110 + 8);
    *(void *)uint64_t v110 = 0;
    *((void *)v110 + 1) = 0;
    *((void *)v110 + 2) = 0;
    *((void *)v110 + 3) = v110 + 8;
    uint64_t v111 = *(void *)(a1 + 24);
    LOWORD(v283) = 257;
    uint64_t v85 = sub_1CB845F20(v111, 40, v279, v277, (uint64_t)__s2);
    __int16 v276 = 257;
    goto LABEL_125;
  }
  LODWORD(v282) = 64;
  __s2[0] = &v279;
  __s2[1] = (void *)2;
  uint64_t v112 = *(void *)(v12 + 8);
  if (!v112) {
    goto LABEL_133;
  }
  if (*(void *)(v112 + 8)) {
    goto LABEL_129;
  }
  unsigned int v128 = __s2;
  int v129 = *(unsigned __int8 *)(v12 + 16);
  if (v129 != 51)
  {
    if (v129 == 5) {
      LOBYTE(v128) = *(_WORD *)(v12 + 18) == 23
    }
                  && (uint64_t v133 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF), *(void *)v133)
                  && (int v279 = *(void **)v133, sub_1CBF531E4((llvm::APInt *)&__s2[1], *(llvm::Constant **)(v133 + 32)));
    int v113 = (v129 == 5) & v128;
    goto LABEL_130;
  }
  if (*(void *)(v12 - 64)
    && (int v279 = *(void **)(v12 - 64), sub_1CBF53154((llvm::APInt *)&__s2[1], *(unsigned __int8 **)(v12 - 32))))
  {
    int v113 = 1;
  }
  else
  {
LABEL_129:
    int v113 = 0;
  }
LABEL_130:
  if (v282 >= 0x41 && __s2[1])
  {
    MEMORY[0x1D25D9CB0](__s2[1], 0x1000C8000313F17);
    if ((v113 & 1) == 0) {
      goto LABEL_133;
    }
LABEL_152:
    uint64_t v125 = *(void *)(a1 + 24);
    char v126 = v279;
    LOWORD(v283) = 257;
    uint64_t v127 = llvm::ConstantInt::get((llvm::ConstantInt *)*v279, v268, 0);
    int v121 = sub_1CC2429AC(v125, (uint64_t)v126, (uint64_t)v127, (uint64_t)__s2, 0);
    uint64_t v119 = v279;
    LOWORD(v283) = 257;
    char v120 = 28;
    return llvm::BinaryOperator::Create(v120, v121, (uint64_t)v119, (const char **)__s2, 0);
  }
  if (v113) {
    goto LABEL_152;
  }
LABEL_133:
  __s2[0] = &v279;
  __s2[1] = &v278;
  *(void *)&long long v282 = 0;
  int v114 = *(unsigned __int8 *)(v12 + 16);
  if (v114 == 5)
  {
    if (*(_WORD *)(v12 + 18) != 26) {
      goto LABEL_145;
    }
    uint64_t v115 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
    if (!*(void *)v115) {
      goto LABEL_145;
    }
    int v279 = *(void **)v115;
    if ((sub_1CBF5295C((uint64_t)&__s2[1], *(llvm::Constant **)(v115 + 32)) & 1) == 0) {
      goto LABEL_145;
    }
  }
  else
  {
    if (v114 != 54) {
      goto LABEL_145;
    }
    if (!*(void *)(v12 - 64)) {
      goto LABEL_145;
    }
    int v279 = *(void **)(v12 - 64);
    if (!sub_1CBF528D8((uint64_t)&__s2[1], *(unsigned __int8 **)(v12 - 32))) {
      goto LABEL_145;
    }
  }
  unsigned int v116 = (_DWORD *)v278;
  if (*(_DWORD *)(v278 + 8) >= 0x41u) {
    unsigned int v116 = *(_DWORD **)v278;
  }
  unint64_t v117 = *v116 + v268;
  if (v117 < v23)
  {
    uint64_t v118 = (llvm::Instruction *)v279;
    uint64_t v119 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, v117, 0);
    LOWORD(v283) = 257;
    char v120 = 26;
    int v121 = v118;
    return llvm::BinaryOperator::Create(v120, v121, (uint64_t)v119, (const char **)__s2, 0);
  }
LABEL_145:
  uint64_t v122 = *(void *)(v12 + 8);
  if (v122)
  {
    if (!*(void *)(v122 + 8))
    {
      unsigned int v123 = *(unsigned __int8 *)(v12 + 16);
      if (v123 > 0x1B || v123 == 5)
      {
        int v124 = v123 <= 0x1B ? *(unsigned __int16 *)(v12 + 18) : v123 - 28;
        if (v124 == 38)
        {
          int v134 = *(_DWORD *)(v12 + 20);
          unint64_t v135 = (v134 & 0x40000000) != 0 ? *(uint64_t **)(v12 - 8) : (uint64_t *)(v12 - 32 * (v134 & 0x7FFFFFF));
          uint64_t v142 = *v135;
          if (*v135)
          {
            if (*(unsigned __int8 *)(v142 + 16) > 0x1Bu)
            {
              __s2[0] = &v279;
              __s2[1] = &v278;
              *(void *)&long long v282 = 0;
              int v143 = *(unsigned __int8 *)(v142 + 16);
              if (v143 == 5)
              {
                if (*(_WORD *)(v142 + 18) != 26) {
                  goto LABEL_236;
                }
                uint64_t v156 = v142 - 32 * (*(_DWORD *)(v142 + 20) & 0x7FFFFFF);
                if (!*(void *)v156) {
                  goto LABEL_236;
                }
                int v279 = *(void **)v156;
                if ((sub_1CBF5295C((uint64_t)&__s2[1], *(llvm::Constant **)(v156 + 32)) & 1) == 0) {
                  goto LABEL_236;
                }
              }
              else
              {
                if (v143 != 54) {
                  goto LABEL_236;
                }
                if (!*(void *)(v142 - 64)) {
                  goto LABEL_236;
                }
                int v279 = *(void **)(v142 - 64);
                if (!sub_1CBF528D8((uint64_t)&__s2[1], *(unsigned __int8 **)(v142 - 32))) {
                  goto LABEL_236;
                }
              }
              int v157 = (llvm::ConstantInt **)v279;
              uint64_t v158 = (llvm::Type *)*v279;
              if ((*(_DWORD *)(*v279 + 8) & 0xFE) == 0x12) {
                uint64_t v158 = (llvm::Type *)**((void **)v158 + 2);
              }
              unsigned int v159 = llvm::Type::getPrimitiveSizeInBits(v158);
              v160 = (void *)v278;
              uint64_t v161 = *(unsigned int *)(v278 + 8);
              int v162 = (_DWORD *)v278;
              if (v161 >= 0x41) {
                int v162 = *(_DWORD **)v278;
              }
              unint64_t v163 = *v162 + v268;
              if (v163 < v159)
              {
                uint64_t v164 = *(void *)(v142 + 8);
                if (v164 && !*(void *)(v164 + 8)) {
                  goto LABEL_380;
                }
                if (v161 >= 0x41)
                {
                  int v165 = 0;
                  int64_t v166 = (unint64_t)(v161 + 63) >> 6;
                  do
                  {
                    BOOL v35 = v166-- < 1;
                    if (v35) {
                      break;
                    }
                    unint64_t v167 = *(void *)(*(void *)v278 + 8 * v166);
                    v165 += __clz(v167);
                  }
                  while (!v167);
                  int v168 = v161 | 0xFFFFFFC0;
                  if ((v161 & 0x3F) == 0) {
                    int v168 = 0;
                  }
                  if ((v161 - v165 - v168) > 0x40) {
                    goto LABEL_380;
                  }
                  v160 = *(void **)v278;
                }
                if (*v160 < (unint64_t)(v159 - v23)) {
                  goto LABEL_236;
                }
LABEL_380:
                uint64_t v241 = *(void *)(a1 + 24);
                __s2[0] = "sum.shift";
                LOWORD(v283) = 259;
                int v242 = llvm::ConstantInt::get(*v157, v163, 0);
                uint64_t v243 = sub_1CC2429AC(v241, (uint64_t)v157, (uint64_t)v242, (uint64_t)__s2, 0);
                int v245 = (unsigned __int8 *)v243;
                if ((a2[23] & 0x10) == 0)
                {
                  uint64_t v256 = 0;
                  uint64_t v255 = &byte_1CFBCE98E;
                  goto LABEL_393;
                }
                uint64_t v246 = ***(void ***)a2;
                uint64_t v247 = *(void *)(v246 + 152);
                uint64_t v248 = *(unsigned int *)(v246 + 168);
                if (v248)
                {
                  LODWORD(v249) = (v248 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                  int v250 = (unsigned __int8 **)(v247 + 16 * v249);
                  uint64_t v251 = *v250;
                  if (*v250 == a2)
                  {
LABEL_392:
                    uint64_t v254 = v250[1];
                    uint64_t v257 = *(void *)v254;
                    uint64_t v255 = (char *)(v254 + 16);
                    uint64_t v256 = v257;
LABEL_393:
                    unint64_t v258 = *(uint64_t **)(a1 + 24);
                    __int16 v276 = 261;
                    __src = v255;
                    uint64_t v275 = v256;
                    if (*(void *)v243 != v14)
                    {
                      if (*((unsigned __int8 *)v243 + 16) <= 0x14u)
                      {
                        int v245 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v258[9] + 224))(v258[9], 38, v243, v14);
                        if (v245) {
                          BOOL v262 = v245[16] >= 0x1Cu;
                        }
                        else {
                          BOOL v262 = 0;
                        }
                        if (v262)
                        {
                          (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v258[10] + 16))(v258[10], v245, &__src, v258[6], v258[7]);
                          uint64_t v264 = *((unsigned int *)v258 + 2);
                          if (v264)
                          {
                            uint64_t v265 = *v258;
                            uint64_t v266 = *v258 + 16 * v264;
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v245, *(_DWORD *)v265, *(llvm::MDNode **)(v265 + 8));
                              v265 += 16;
                            }
                            while (v265 != v266);
                          }
                        }
                      }
                      else
                      {
                        LOWORD(v283) = 257;
                        int v245 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v243, v14, (const char **)__s2, 0);
                        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v258[10] + 16))(v258[10], v245, &__src, v258[6], v258[7]);
                        uint64_t v259 = *((unsigned int *)v258 + 2);
                        if (v259)
                        {
                          uint64_t v260 = *v258;
                          uint64_t v261 = *v258 + 16 * v259;
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v245, *(_DWORD *)v260, *(llvm::MDNode **)(v260 + 8));
                            v260 += 16;
                          }
                          while (v260 != v261);
                        }
                      }
                    }
                    if (v23 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v263 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
                    if (!v23) {
                      unint64_t v263 = 0;
                    }
                    LODWORD(v275) = v23;
                    if (v23 == v268) {
                      __src = 0;
                    }
                    else {
                      __src = (void *)(v263 >> v268);
                    }
                    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)&__src, v244);
                    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
                      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)Splat);
                    }
                    LOWORD(v283) = 257;
                    int v148 = v245;
                    goto LABEL_377;
                  }
                  int v252 = 1;
                  while (v251 != (unsigned __int8 *)-4096)
                  {
                    int v253 = v249 + v252++;
                    uint64_t v249 = v253 & (v248 - 1);
                    uint64_t v251 = *(unsigned __int8 **)(v247 + 16 * v249);
                    if (v251 == a2)
                    {
                      int v250 = (unsigned __int8 **)(v247 + 16 * v249);
                      goto LABEL_392;
                    }
                  }
                }
                int v250 = (unsigned __int8 **)(v247 + 16 * v248);
                goto LABEL_392;
              }
            }
          }
        }
      }
    }
  }
LABEL_236:
  uint64_t v273 = 0;
  __s2[0] = &v279;
  __s2[1] = &v273;
  *(void *)&long long v282 = 0;
  if (!sub_1CCA8A7A0((void **)__s2, v12))
  {
LABEL_293:
    LODWORD(__s2[0]) = 9;
    __s2[1] = 0;
    *(void *)&long long v282 = &v279;
    uint64_t v199 = *(void *)(v12 + 8);
    if (v199)
    {
      if (!*(void *)(v199 + 8) && *(unsigned char *)(v12 + 16) == 84)
      {
        uint64_t v213 = *(void *)(v12 - 32);
        if (v213)
        {
          if (!*(unsigned char *)(v213 + 16) && *(void *)(v213 + 24) == *(void *)(v12 + 72) && *(_DWORD *)(v213 + 36) == 9)
          {
            uint64_t v15 = *(llvm::Type **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
            uint64_t v214 = *((void *)v15 + 1);
            if (v214)
            {
              if (!*(void *)(v214 + 8) && (sub_1CBC5BE40((void **)&v282, (uint64_t)v15) & 1) != 0)
              {
                v215 = (llvm::Value *)v279;
                int v216 = (llvm::Type *)*v279;
                if ((*(_DWORD *)(*v279 + 8) & 0xFE) == 0x12) {
                  int v216 = (llvm::Type *)**((void **)v216 + 2);
                }
                int v217 = llvm::Type::getPrimitiveSizeInBits(v216);
                if ((v217 & 0xF) == 0)
                {
                  unint64_t v218 = v268 - (v23 - v217);
                  if (v268 >= v23 - v217)
                  {
                    v219 = *(llvm::IRBuilderBase **)(a1 + 24);
                    LOWORD(v283) = 257;
                    uint64_t UnaryIntrinsic = (llvm::ConstantInt **)llvm::IRBuilderBase::CreateUnaryIntrinsic(v219, 9, v215, 0, (const llvm::Twine *)__s2);
                    uint64_t v221 = *(void *)(a1 + 24);
                    LOWORD(v283) = 257;
                    uint64_t v222 = llvm::ConstantInt::get(*UnaryIntrinsic, v218, 0);
                    uint64_t v81 = sub_1CC2429AC(v221, (uint64_t)UnaryIntrinsic, (uint64_t)v222, (uint64_t)__s2, 0);
                    uint64_t v223 = operator new(0x60uLL);
                    v223[13] = v223[13] & 0x38000000 | 1;
                    unint64_t v11 = (unint64_t)(v223 + 8);
                    *(void *)uint64_t v223 = 0;
                    *((void *)v223 + 1) = 0;
                    *((void *)v223 + 2) = 0;
                    *((void *)v223 + 3) = v223 + 8;
                    LOWORD(v283) = 257;
                    goto LABEL_92;
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((a2[17] & 2) == 0)
    {
      LODWORD(__s2[1]) = v23;
      if (v23 > 0x40) {
        operator new[]();
      }
      __s2[0] = 0;
      if (v268)
      {
        if (v268 > 0x40) {
          llvm::APInt::setBitsSlowCase(__s2, 0, v268);
        }
        else {
          __s2[0] = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v268);
        }
      }
      BOOL IsZero = llvm::MaskedValueIsZero((llvm *)v12, (const llvm::Value *)__s2, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v267);
      if (LODWORD(__s2[1]) >= 0x41 && __s2[0]) {
        MEMORY[0x1D25D9CB0](__s2[0], 0x1000C8000313F17);
      }
      if (IsZero)
      {
        a2[17] |= 2u;
        return (llvm::Value *)a2;
      }
    }
LABEL_306:
    uint64_t v201 = *(void *)(v12 + 8);
    if (!v201 || *(void *)(v201 + 8)) {
      return 0;
    }
    int v203 = *(unsigned __int8 *)(v12 + 16);
    if (v203 == 5)
    {
      if (*(_WORD *)(v12 + 18) != 25) {
        return 0;
      }
      uint64_t v206 = (void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
      BOOL v204 = (void *)*v206;
      if (!*v206) {
        return 0;
      }
      char v205 = (unsigned __int8 *)v206[4];
    }
    else
    {
      if (v203 != 53) {
        return 0;
      }
      BOOL v204 = *(void **)(v12 - 64);
      if (!v204) {
        return 0;
      }
      char v205 = *(unsigned __int8 **)(v12 - 32);
    }
    if (v13 == v205)
    {
      AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v14, v15, v16);
      uint64_t v208 = *(void *)(a1 + 24);
      LOWORD(v283) = 257;
      int v121 = sub_1CC2429AC(v208, (uint64_t)AllOnesValue, (uint64_t)v13, (uint64_t)__s2, 0);
      LOWORD(v283) = 257;
      char v120 = 28;
      uint64_t v119 = v204;
      return llvm::BinaryOperator::Create(v120, v121, (uint64_t)v119, (const char **)__s2, 0);
    }
    return 0;
  }
  if (v23 < 3 || 2 * v268 != v23) {
    goto LABEL_266;
  }
  unsigned int v272 = *(_DWORD *)(v273 + 8);
  if (v272 > 0x40) {
    operator new[]();
  }
  uint64_t v271 = *(int8x8_t **)v273;
  llvm::APInt::operator-=((uint64_t)&v271, 1uLL);
  uint64_t v169 = v272;
  unsigned int v272 = 0;
  if (v169 > 0x40)
  {
    int v171 = 0;
    unint64_t v172 = (unint64_t)(v169 + 63) >> 6;
    uint64_t v173 = v271;
    do
    {
      int8x8_t v174 = *v173++;
      uint8x8_t v175 = (uint8x8_t)vcnt_s8(v174);
      v175.i16[0] = vaddlv_u8(v175);
      v171 += v175.i32[0];
      --v172;
    }
    while (v172);
    if (v171 != 1)
    {
      BOOL v178 = 0;
LABEL_258:
      if (v271)
      {
        MEMORY[0x1D25D9CB0](v271, 0x1000C8000313F17);
        if (v272 < 0x41 || !v271)
        {
          if (!v178) {
            goto LABEL_266;
          }
          goto LABEL_263;
        }
        MEMORY[0x1D25D9CB0](v271, 0x1000C8000313F17);
      }
LABEL_262:
      if (!v178) {
        goto LABEL_266;
      }
LABEL_263:
      unsigned int v183 = v279;
      unsigned int v270 = *(_DWORD *)(v273 + 8);
      if (v270 > 0x40) {
        operator new[]();
      }
      unint64_t v269 = *(int8x8_t **)v273;
      llvm::APInt::operator-=((uint64_t)&v269, 2uLL);
      LODWORD(v275) = v270;
      __src = v269;
      unsigned int v270 = 0;
      int v210 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)&__src, v209);
      uint64_t v211 = v210;
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        uint64_t v211 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)v210);
      }
      LOWORD(v283) = 257;
      unint64_t v11 = (unint64_t)llvm::BinaryOperator::Create(28, v183, (uint64_t)v211, (const char **)__s2, 0);
      if (v275 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v270 < 0x41) {
        return (llvm::Value *)v11;
      }
      uint64_t v212 = v269;
      if (!v269) {
        return (llvm::Value *)v11;
      }
LABEL_379:
      MEMORY[0x1D25D9CB0](v212, 0x1000C8000313F17);
      return (llvm::Value *)v11;
    }
LABEL_248:
    uint64_t v176 = *(unsigned int *)(v273 + 8);
    if (v176 > 0x40)
    {
      int v179 = 0;
      int64_t v180 = (unint64_t)(v176 + 63) >> 6;
      do
      {
        BOOL v35 = v180-- < 1;
        if (v35) {
          break;
        }
        unint64_t v181 = *(void *)(*(void *)v273 + 8 * v180);
        v179 += __clz(v181);
      }
      while (!v181);
      int v182 = v176 | 0xFFFFFFC0;
      if ((v176 & 0x3F) == 0) {
        int v182 = 0;
      }
      int v177 = v179 + v182;
    }
    else
    {
      int v177 = v176 + __clz(*(void *)v273) - 64;
    }
    BOOL v178 = v176 + ~v177 == v268;
    if (v169 < 0x41) {
      goto LABEL_262;
    }
    goto LABEL_258;
  }
  uint8x8_t v170 = (uint8x8_t)vcnt_s8((int8x8_t)v271);
  v170.i16[0] = vaddlv_u8(v170);
  if (v170.u32[0] == 1) {
    goto LABEL_248;
  }
LABEL_266:
  uint64_t v184 = *(void *)(v12 + 8);
  if (!v184 || *(void *)(v184 + 8)) {
    goto LABEL_293;
  }
  unsigned int v185 = *(_DWORD *)(v273 + 8);
  LODWORD(v275) = v185;
  if (v185 > 0x40) {
    operator new[]();
  }
  unint64_t v186 = *(void *)v273;
  unsigned int v187 = v268;
  if (v185 == v268)
  {
    __src = 0;
    unsigned int v185 = v268;
    uint64_t v190 = v273;
    LODWORD(__s2[1]) = v268;
    if (v268 > 0x40) {
      operator new[]();
    }
    unint64_t v189 = (unint64_t)__src;
    unsigned int v187 = v268;
    char v188 = v268;
  }
  else
  {
    char v188 = v268;
    unint64_t v189 = v186 >> v268;
    __src = (void *)(v186 >> v268);
    uint64_t v190 = v273;
    LODWORD(__s2[1]) = v185;
  }
  unint64_t v191 = v189 << v188;
  if (v185 == v187) {
    unint64_t v191 = 0;
  }
  unint64_t v192 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v185;
  if (!v185) {
    unint64_t v192 = 0;
  }
  __s2[0] = (void *)(v192 & v191);
  uint64_t v193 = *(unsigned int *)(v190 + 8);
  unint64_t v194 = __s2[0];
  if (v193 > 0x40) {
    BOOL v195 = memcmp(*(const void **)v190, __s2[0], ((unint64_t)(v193 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v195 = *(void **)v190 == __s2[0];
  }
  int v196 = v195;
  if (LODWORD(__s2[1]) >= 0x41 && v194) {
    MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
  }
  if (v196)
  {
    uint64_t v197 = v279;
    v198 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v14, (llvm::LLVMContext *)&__src, v16);
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
      v198 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_DWORD *)(v14 + 8) == 19) << 32)), (uint64_t)v198);
    }
    LOWORD(v283) = 257;
    unint64_t v11 = (unint64_t)llvm::BinaryOperator::Create(17, v197, (uint64_t)v198, (const char **)__s2, 0);
    *(unsigned char *)(v11 + 17) |= 2u;
    *(unsigned char *)(v11 + 17) = *(unsigned char *)(v11 + 17) & 0xFB | *(unsigned char *)(v12 + 17) & 4;
  }
  else
  {
    unint64_t v11 = 0;
  }
  if (v275 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if ((v196 & 1) == 0) {
    goto LABEL_293;
  }
  return (llvm::Value *)v11;
}

llvm::Value *sub_1CCAB1414(uint64_t a1, llvm::APInt *a2)
{
  uint64_t v4 = *((void *)a2 - 8);
  long long v5 = (llvm::Constant *)*((void *)a2 - 4);
  int v6 = (*((unsigned __int8 *)a2 + 17) >> 1) & 1;
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v171 = *(_OWORD *)(a1 + 88);
  long long v172 = v8;
  int8x8_t v174 = (llvm::APInt **)*((void *)&v7 + 1);
  uint64_t v173 = a2;
  uint64_t v9 = sub_1CC02C0A0(v4, v5, v6, (uint64_t)&v171, (llvm::DSOLocalEquivalent **)3);
  if (v9) {
    return (llvm::Value *)sub_1CC9D3C84(a1, a2, v9);
  }
  unint64_t v10 = sub_1CC9D812C(a1, (unsigned __int8 *)a2);
  if (v10) {
    return (llvm::Value *)v10;
  }
  unint64_t v10 = (unint64_t)sub_1CCAAB0DC(a1, (unsigned __int8 *)a2);
  if (v10) {
    return (llvm::Value *)v10;
  }
  uint64_t v11 = *((void *)a2 - 8);
  uint64_t v12 = (unsigned __int8 *)*((void *)a2 - 4);
  int v13 = *(llvm::Type **)a2;
  uint64_t v14 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v14 = (llvm::Type *)**((void **)v13 + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v14);
  int v168 = 0;
  long long v171 = (unint64_t)&v168;
  if (!sub_1CBF528D8((uint64_t)&v171, v12)) {
    goto LABEL_26;
  }
  uint64_t v16 = v168;
  unsigned int v17 = *((_DWORD *)v168 + 2);
  uint64_t v18 = v168;
  if (v17 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase(v168) > 0x40)
    {
LABEL_26:
      LODWORD(v166) = 64;
      uint64_t v164 = 0;
      uint64_t v165 = PrimitiveSizeInBits - 1;
      if (!sub_1CCA4852C((llvm::APInt *)&v165, (llvm::Constant *)v12)
        || (LODWORD(v172) = 64,
            *(void *)&long long v171 = &v164,
            *((void *)&v171 + 1) = PrimitiveSizeInBits - 1,
            (uint64_t v90 = *(void *)(v11 + 8)) == 0))
      {
        int v24 = 0;
        goto LABEL_28;
      }
      if (*(void *)(v90 + 8)) {
        goto LABEL_147;
      }
      unsigned int v91 = &v171;
      int v92 = *(unsigned __int8 *)(v11 + 16);
      if (v92 != 53)
      {
        if (v92 == 5) {
          LOBYTE(v91) = *(_WORD *)(v11 + 18) == 25
        }
                     && (uint64_t v94 = (llvm::Instruction **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)), *v94)
                     && (uint64_t v164 = *v94, sub_1CCA15C64((llvm::APInt *)((char *)&v171 + 8), v94[4]));
        int v24 = (v92 == 5) & v91;
        goto LABEL_148;
      }
      if (*(void *)(v11 - 64)
        && (uint64_t v164 = *(llvm::Instruction **)(v11 - 64),
            sub_1CCA4852C((llvm::APInt *)((char *)&v171 + 8), *(llvm::Constant **)(v11 - 32))))
      {
        int v24 = 1;
      }
      else
      {
LABEL_147:
        int v24 = 0;
      }
LABEL_148:
      if (v172 >= 0x41 && *((void *)&v171 + 1)) {
        MEMORY[0x1D25D9CB0](*((void *)&v171 + 1), 0x1000C8000313F17);
      }
LABEL_28:
      if (v166 >= 0x41 && v165) {
        MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
      }
      if (v24)
      {
        v99 = (llvm::Constant *)llvm::ConstantInt::get(v13, 1uLL, 0);
        uint64_t v101 = llvm::Constant::mergeUndefsWith(v99, (llvm::Constant *)v12, v100);
        int v103 = *(_DWORD *)(v11 + 20);
        if ((v103 & 0x40000000) != 0) {
          uint64_t v104 = *(void *)(v11 - 8);
        }
        else {
          uint64_t v104 = v11 - 32 * (v103 & 0x7FFFFFF);
        }
        uint64_t v105 = llvm::Constant::mergeUndefsWith(v101, *(llvm::Constant **)(v104 + 32), v102);
        uint64_t v106 = *(void *)(a1 + 24);
        LOWORD(v173) = 257;
        uint64_t v164 = sub_1CBF52474(v106, v164, (uint64_t)v105, (uint64_t)&v171);
        LOWORD(v173) = 257;
        return llvm::BinaryOperator::CreateNeg(v164, (llvm::Value *)&v171, 0, v107);
      }
      int v182 = 0;
      unsigned int v183 = 0;
      int64_t v180 = 0;
      unint64_t v181 = 0;
      *(void *)&long long v171 = &v182;
      *((void *)&v171 + 1) = &v181;
      *(void *)&long long v172 = &v183;
      *((void *)&v172 + 1) = &v183;
      uint64_t v173 = (llvm::APInt *)&v181;
      int8x8_t v174 = &v183;
      uint8x8_t v175 = &v183;
      v176[0] = &v180;
      v176[1] = &v183;
      v176[2] = &v183;
      int v177 = &v180;
      BOOL v178 = &v183;
      int v179 = &v183;
      int v25 = *((unsigned __int8 *)a2 + 16);
      if (v25 == 55)
      {
        uint64_t v26 = *((void *)a2 - 8);
        int v27 = *(unsigned __int8 *)(v26 + 16);
        if (v27 == 5)
        {
          if (*(_WORD *)(v26 + 18) != 25) {
            goto LABEL_124;
          }
          uint64_t v78 = (void *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF));
          if (!*v78 || *(unsigned __int8 *)(*v78 + 16) < 0x1Cu) {
            goto LABEL_124;
          }
          int v182 = (llvm::Value *)*v78;
          uint64_t v29 = v78[4];
          if (sub_1CD68CD08((void **)&v171 + 1, v29, v78)) {
            goto LABEL_43;
          }
        }
        else
        {
          if (v27 != 53) {
            goto LABEL_124;
          }
          uint64_t v28 = *(void *)(v26 - 64);
          if (!v28 || *(unsigned __int8 *)(v28 + 16) < 0x1Cu) {
            goto LABEL_124;
          }
          int v182 = *(llvm::Value **)(v26 - 64);
          uint64_t v29 = *(void *)(v26 - 32);
          if (sub_1CCAB319C((void **)&v171 + 1, v29, v26)) {
            goto LABEL_43;
          }
        }
        int v31 = *(unsigned __int8 *)(v29 + 16);
        if (v31 == 5)
        {
          if (*(_WORD *)(v29 + 18) != 15) {
            goto LABEL_124;
          }
          uint64_t v93 = *(void *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
          if (!v93) {
            goto LABEL_124;
          }
          *(void *)uint64_t v173 = v93;
          uint64_t v33 = *(void *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32);
          if (sub_1CBC5BE40(&v174, v33)) {
            goto LABEL_43;
          }
        }
        else
        {
          if (v31 != 43) {
            goto LABEL_124;
          }
          uint64_t v32 = *(void *)(v29 - 64);
          if (!v32 || *(unsigned __int8 *)(v32 + 16) > 0x14u) {
            goto LABEL_124;
          }
          *(void *)uint64_t v173 = v32;
          uint64_t v33 = *(void *)(v29 - 32);
          if (sub_1CBC5BE40(&v174, v33)) {
            goto LABEL_43;
          }
        }
        if (!v33) {
          goto LABEL_124;
        }
        BOOL v30 = (int)v175;
        *uint8x8_t v175 = (llvm::APInt *)v33;
LABEL_43:
        uint64_t v34 = *((void *)a2 - 4);
        if (sub_1CD68CD88(v176, v34, v30)) {
          goto LABEL_44;
        }
        goto LABEL_88;
      }
      if (v25 != 5 || *((_WORD *)a2 + 9) != 27) {
        goto LABEL_124;
      }
      uint64_t v55 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      int v56 = *(unsigned __int8 *)(v55 + 16);
      if (v56 == 5)
      {
        if (*(_WORD *)(v55 + 18) != 25) {
          goto LABEL_124;
        }
        uint64_t v79 = (void *)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF));
        if (!*v79 || *(unsigned __int8 *)(*v79 + 16) < 0x1Cu) {
          goto LABEL_124;
        }
        int v182 = (llvm::Value *)*v79;
        uint64_t v58 = v79[4];
        if (sub_1CD68CD08((void **)&v171 + 1, v58, v79)) {
          goto LABEL_87;
        }
        int v95 = *(unsigned __int8 *)(v58 + 16);
        if (v95 != 5)
        {
          if (v95 != 43) {
            goto LABEL_124;
          }
          uint64_t v60 = *(void *)(v58 - 64);
          if (!v60 || *(unsigned __int8 *)(v60 + 16) > 0x14u) {
            goto LABEL_124;
          }
          goto LABEL_84;
        }
      }
      else
      {
        if (v56 != 53) {
          goto LABEL_124;
        }
        uint64_t v57 = *(void *)(v55 - 64);
        if (!v57 || *(unsigned __int8 *)(v57 + 16) < 0x1Cu) {
          goto LABEL_124;
        }
        int v182 = *(llvm::Value **)(v55 - 64);
        uint64_t v58 = *(void *)(v55 - 32);
        if (sub_1CCAB319C((void **)&v171 + 1, v58, v55)) {
          goto LABEL_87;
        }
        int v59 = *(unsigned __int8 *)(v58 + 16);
        if (v59 != 5)
        {
          if (v59 != 43) {
            goto LABEL_124;
          }
          uint64_t v60 = *(void *)(v58 - 64);
          if (!v60 || *(unsigned __int8 *)(v60 + 16) > 0x14u) {
            goto LABEL_124;
          }
LABEL_84:
          *(void *)uint64_t v173 = v60;
          uint64_t v61 = *(void *)(v58 - 32);
          if (sub_1CBC5BE40(&v174, v61)) {
            goto LABEL_87;
          }
LABEL_85:
          if (!v61) {
            goto LABEL_124;
          }
          *uint8x8_t v175 = (llvm::APInt *)v61;
LABEL_87:
          uint64_t v34 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
          if (sub_1CD68CD88(v176, v34, (int)a2 - 32 * *((_DWORD *)a2 + 5))) {
            goto LABEL_44;
          }
LABEL_88:
          int v62 = *(unsigned __int8 *)(v34 + 16);
          if (v62 == 5)
          {
            if (*(_WORD *)(v34 + 18) != 15) {
              goto LABEL_124;
            }
            unsigned int v98 = *(llvm::Constant **)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF));
            if (!v98) {
              goto LABEL_124;
            }
            *int v177 = v98;
            uint64_t v64 = *(void *)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF) + 32);
            if (sub_1CD68CE08(&v178, v64)) {
              goto LABEL_44;
            }
          }
          else
          {
            if (v62 != 43) {
              goto LABEL_124;
            }
            uint64_t v63 = *(unsigned __int8 **)(v34 - 64);
            if (!v63 || v63[16] > 0x14u) {
              goto LABEL_124;
            }
            *int v177 = (llvm::Constant *)v63;
            uint64_t v64 = *(void *)(v34 - 32);
            if (sub_1CD68CE08(&v178, v64)) {
              goto LABEL_44;
            }
          }
          if (*v179 != (llvm::APInt *)v64) {
            goto LABEL_124;
          }
LABEL_44:
          BOOL v35 = v181;
          unint64_t v36 = *(llvm::Type **)v181;
          if ((*(_DWORD *)(*(void *)v181 + 8) & 0xFE) == 0x12) {
            unint64_t v36 = (llvm::Type *)**((void **)v36 + 2);
          }
          unsigned int v37 = llvm::Type::getPrimitiveSizeInBits(v36);
          uint64_t v38 = *(llvm::Type **)a2;
          if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
            uint64_t v38 = (llvm::Type *)**((void **)v38 + 2);
          }
          uint64_t v39 = llvm::Type::getPrimitiveSizeInBits(v38);
          unsigned int v185 = v37;
          if (v37 > 0x40) {
            operator new[]();
          }
          if (v37) {
            unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
          }
          else {
            unint64_t v40 = 0;
          }
          uint64_t v184 = (llvm::Instruction *)(v40 & v39);
          uint64_t v165 = 32;
          int64_t v166 = &v184;
          int v41 = sub_1CC9F981C((uint64_t)&v165, v35);
          if (v185 >= 0x41 && v184) {
            MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
          }
          if (!v41) {
            goto LABEL_124;
          }
          uint64_t v42 = v180;
          uint64_t v43 = *(llvm::Type **)v180;
          if ((*(_DWORD *)(*(void *)v180 + 8) & 0xFE) == 0x12) {
            uint64_t v43 = (llvm::Type *)**((void **)v43 + 2);
          }
          unsigned int v44 = llvm::Type::getPrimitiveSizeInBits(v43);
          unsigned int v45 = *(llvm::Type **)a2;
          if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
            unsigned int v45 = (llvm::Type *)**((void **)v45 + 2);
          }
          uint64_t v46 = llvm::Type::getPrimitiveSizeInBits(v45);
          unsigned int v185 = v44;
          if (v44 > 0x40) {
            operator new[]();
          }
          if (v44) {
            unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
          }
          else {
            unint64_t v47 = 0;
          }
          uint64_t v184 = (llvm::Instruction *)(v47 & v46);
          uint64_t v165 = 32;
          int64_t v166 = &v184;
          int v48 = sub_1CC9F981C((uint64_t)&v165, v42);
          if (v185 >= 0x41 && v184) {
            MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
          }
          if (!v48) {
            goto LABEL_124;
          }
          unsigned int v49 = v182;
          uint64_t v170 = 0;
          *(void *)&long long v171 = &v170;
          *((void *)&v171 + 1) = &v170;
          char v50 = sub_1CCAB2D60((void **)&v171, (uint64_t)v182, (char)&v170);
          if (v49 && (v50 & 1) == 0) {
            **((void **)&v171 + 1) = v49;
          }
          uint64_t v51 = v170;
          if (!v170 || (*(unsigned char *)(v170 + 16) & 0xFE) != 0x36) {
            goto LABEL_124;
          }
          int v52 = v182;
          int v53 = *(_DWORD *)(v170 + 20);
          uint64_t v54 = (v53 & 0x40000000) != 0 ? *(void *)(v170 - 8) : v170 - 32 * (v53 & 0x7FFFFFF);
          unsigned int v108 = *(void **)v54;
          if (!*(void *)v54) {
            goto LABEL_124;
          }
          uint64_t v109 = *(void *)(v54 + 32);
          if (!v109) {
            goto LABEL_124;
          }
          uint64_t v169 = 0;
          *(void *)&long long v171 = &v169;
          *((void *)&v171 + 1) = v183;
          *(void *)&long long v172 = v183;
          *((void *)&v172 + 1) = &v169;
          uint64_t v173 = v183;
          int8x8_t v174 = (llvm::APInt **)v183;
          if (sub_1CD68CE78((uint64_t)&v171, v109, (BOOL)v183))
          {
LABEL_192:
            uint64_t v158 = v170;
            v160 = v169;
            uint64_t v110 = *(llvm::Type **)v169;
            if ((*(_DWORD *)(*(void *)v169 + 8) & 0xFE) == 0x12) {
              uint64_t v110 = (llvm::Type *)**((void **)v110 + 2);
            }
            unsigned int v161 = llvm::Type::getPrimitiveSizeInBits(v110);
            uint64_t v111 = *(llvm::Type **)v158;
            if ((*(_DWORD *)(*(void *)v158 + 8) & 0xFE) == 0x12) {
              uint64_t v111 = (llvm::Type *)**((void **)v111 + 2);
            }
            uint64_t v159 = llvm::Type::getPrimitiveSizeInBits(v111);
            unsigned int v185 = v161;
            if (v161 > 0x40) {
              operator new[]();
            }
            if (v161) {
              unint64_t v112 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
            }
            else {
              unint64_t v112 = 0;
            }
            uint64_t v184 = (llvm::Instruction *)(v112 & v159);
            uint64_t v165 = 32;
            int64_t v166 = &v184;
            char v162 = sub_1CC9F981C((uint64_t)&v165, v160);
            if (v185 >= 0x41 && v184) {
              MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
            }
            if (v162)
            {
              int v113 = *((unsigned __int8 *)a2 + 16);
              if (*(unsigned __int8 *)(v170 + 16) == v113)
              {
                TruncOrBitCast = (llvm::Instruction *)sub_1CC9D3C84(a1, a2, v182);
                goto LABEL_205;
              }
              if (v52 == (llvm::Value *)v51
                || (uint64_t v129 = *(void *)(*((void *)a2 - 8) + 8)) != 0 && !*(void *)(v129 + 8)
                || (uint64_t v130 = *(void *)(*((void *)a2 - 4) + 8)) != 0 && !*(void *)(v130 + 8))
              {
                LOWORD(v173) = 257;
                int v67 = llvm::BinaryOperator::Create(v113 - 28, v108, v109, (const char **)&v171, 0);
                llvm::Instruction::copyIRFlags((uint64_t)v67, v170, 1);
                if (v52 == (llvm::Value *)v51)
                {
LABEL_206:
                  if (v67) {
                    return v67;
                  }
                  goto LABEL_124;
                }
                uint64_t v131 = *(uint64_t **)(a1 + 24);
                LOWORD(v173) = 257;
                (*(void (**)(uint64_t, llvm::Instruction *, long long *, uint64_t, uint64_t))(*(void *)v131[10] + 16))(v131[10], v67, &v171, v131[6], v131[7]);
                uint64_t v133 = *((unsigned int *)v131 + 2);
                if (v133)
                {
                  uint64_t v135 = *v131;
                  uint64_t v136 = v135 + 16 * v133;
                  do
                  {
                    llvm::Instruction::setMetadata(v67, *(_DWORD *)v135, *(llvm::MDNode **)(v135 + 8));
                    v135 += 16;
                  }
                  while (v135 != v136);
                }
                int v134 = *(llvm::Type ****)a2;
                LOWORD(v173) = 257;
                TruncOrBitCast = llvm::CastInst::CreateTruncOrBitCast(v67, v134, (const char **)&v171, 0, v132);
LABEL_205:
                int v67 = TruncOrBitCast;
                goto LABEL_206;
              }
            }
LABEL_124:
            DWORD2(v171) = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40) {
              operator new[]();
            }
            *(void *)&long long v171 = 1 << (PrimitiveSizeInBits - 1);
            BOOL IsZero = llvm::MaskedValueIsZero((llvm *)v11, (const llvm::Value *)&v171, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v157);
            if (DWORD2(v171) >= 0x41 && (void)v171) {
              MEMORY[0x1D25D9CB0](v171, 0x1000C8000313F17);
            }
            if (!IsZero)
            {
              *(void *)&long long v171 = &v164;
              uint64_t v81 = *(void *)(v11 + 8);
              if (!v81 || *(void *)(v81 + 8) || !sub_1CBF686A0((void **)&v171, 30, v11)) {
                return 0;
              }
              uint64_t v144 = *(void *)(a1 + 24);
              char v145 = v164;
              Name = llvm::Value::getName((llvm::Value *)v11);
              LOWORD(v173) = 773;
              *(void *)&long long v171 = Name;
              *((void *)&v171 + 1) = v147;
              *(void *)&long long v172 = ".not";
              int v148 = (llvm::Constant **)sub_1CC5357E8(v144, (uint64_t)v145, (uint64_t)v12, (uint64_t)&v171, 0);
              LOWORD(v173) = 257;
              return llvm::BinaryOperator::CreateNot(v148, (llvm::Value *)&v171, 0, v149);
            }
            LOWORD(v173) = 257;
            char v76 = 26;
            char v77 = (void *)v11;
            uint64_t v75 = v12;
            return llvm::BinaryOperator::Create(v76, v77, (uint64_t)v75, (const char **)&v171, 0);
          }
          int v126 = *(unsigned __int8 *)(v109 + 16);
          if (v126 == 5)
          {
            if (*(_WORD *)(v109 + 18) != 15) {
              goto LABEL_124;
            }
            uint64_t v128 = *(void *)(v109 - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF));
            if (!v128) {
              goto LABEL_124;
            }
            **((void **)&v172 + 1) = v128;
            unint64_t v163 = *(llvm::APInt ***)(v109 - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF) + 32);
            if (sub_1CD68A554(&v173, (uint64_t)v163)) {
              goto LABEL_192;
            }
          }
          else
          {
            if (v126 != 43) {
              goto LABEL_124;
            }
            uint64_t v127 = *(void *)(v109 - 64);
            if (!v127 || *(unsigned __int8 *)(v127 + 16) > 0x14u) {
              goto LABEL_124;
            }
            **((void **)&v172 + 1) = v127;
            unint64_t v163 = *(llvm::APInt ***)(v109 - 32);
            if (sub_1CC9F993C(&v173, (uint64_t)v163)) {
              goto LABEL_192;
            }
          }
          if (v174 != v163) {
            goto LABEL_124;
          }
          goto LABEL_192;
        }
      }
      if (*(_WORD *)(v58 + 18) != 15) {
        goto LABEL_124;
      }
      uint64_t v97 = *(void *)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF));
      if (!v97) {
        goto LABEL_124;
      }
      *(void *)uint64_t v173 = v97;
      uint64_t v61 = *(void *)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF) + 32);
      if (sub_1CBC5BE40(&v174, v61)) {
        goto LABEL_87;
      }
      goto LABEL_85;
    }
    uint64_t v18 = *(llvm::APInt **)v16;
  }
  if (*(void *)v18 >= (unint64_t)PrimitiveSizeInBits) {
    goto LABEL_26;
  }
  if (*((_DWORD *)v16 + 2) >= 0x41u) {
    uint64_t v16 = *(llvm::APInt **)v16;
  }
  uint64_t v19 = *(llvm::APInt **)v16;
  uint64_t v184 = 0;
  *(void *)&long long v171 = &v184;
  *((void *)&v171 + 1) = v12;
  int v20 = *(unsigned __int8 *)(v11 + 16);
  if (v20 == 5)
  {
    if (*(_WORD *)(v11 + 18) != 25
      || !sub_1CBC5BE40((void **)&v171, *(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_16;
    }
    uint64_t v21 = *(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
  }
  else
  {
    if (v20 != 53 || !sub_1CBC5BE40((void **)&v171, *(void *)(v11 - 64))) {
      goto LABEL_16;
    }
    uint64_t v21 = *(void *)(v11 - 32);
  }
  if (*((void *)&v171 + 1) == v21)
  {
    uint64_t v115 = *(llvm::Type **)v184;
    if ((*(_DWORD *)(*(void *)v184 + 8) & 0xFE) == 0x12) {
      uint64_t v115 = (llvm::Type *)**((void **)v115 + 2);
    }
    if (PrimitiveSizeInBits - llvm::Type::getPrimitiveSizeInBits(v115) == v19)
    {
      unsigned int v116 = operator new(0x60uLL);
      int v67 = (llvm::Instruction *)(v116 + 8);
      v116[13] = v116[13] & 0x38000000 | 1;
      *(void *)unsigned int v116 = 0;
      *((void *)v116 + 1) = 0;
      *((void *)v116 + 2) = 0;
      *((void *)v116 + 3) = v116 + 8;
      int v87 = v184;
      LOWORD(v173) = 257;
      uint64_t v88 = (const char **)&v171;
      goto LABEL_140;
    }
  }
LABEL_16:
  unsigned int v183 = 0;
  *(void *)&long long v171 = &v184;
  *((void *)&v171 + 1) = &v183;
  *(void *)&long long v172 = 0;
  if (!sub_1CCA8A868((void **)&v171, v11)) {
    goto LABEL_17;
  }
  uint64_t v137 = v183;
  unsigned int v138 = *((_DWORD *)v183 + 2);
  v139 = v183;
  if (v138 >= 0x41)
  {
    if (v138 - llvm::APInt::countLeadingZerosSlowCase(v183) > 0x40) {
      goto LABEL_17;
    }
    v139 = *(llvm::APInt **)v137;
  }
  if (*(void *)v139 < (unint64_t)PrimitiveSizeInBits)
  {
    if (*((_DWORD *)v137 + 2) >= 0x41u) {
      uint64_t v137 = *(llvm::APInt **)v137;
    }
    int v140 = *(llvm::APInt **)v137;
    if (v19 > *(void *)v137)
    {
      char v141 = llvm::ConstantInt::get(v13, (v19 - v140), 0);
      LOWORD(v173) = 257;
      uint64_t v142 = llvm::BinaryOperator::Create(27, v184, (uint64_t)v141, (const char **)&v171, 0);
      int v67 = v142;
      char v143 = *((unsigned char *)v142 + 17) & 0xFD | *((unsigned char *)a2 + 17) & 2;
LABEL_259:
      *((unsigned char *)v142 + 17) = v143;
      return v67;
    }
    if (v19 < *(void *)v137)
    {
      unint64_t v150 = llvm::ConstantInt::get(v13, (v140 - v19), 0);
      LOWORD(v173) = 257;
      uint64_t v142 = llvm::BinaryOperator::Create(25, v184, (uint64_t)v150, (const char **)&v171, 0);
      int v67 = v142;
      char v143 = *((unsigned char *)v142 + 17) | 4;
      goto LABEL_259;
    }
  }
LABEL_17:
  *(void *)&long long v171 = &v184;
  *((void *)&v171 + 1) = &v183;
  *(void *)&long long v172 = 0;
  int v22 = *(unsigned __int8 *)(v11 + 16);
  if (v22 == 5)
  {
    if (*(_WORD *)(v11 + 18) != 27) {
      goto LABEL_21;
    }
    uint64_t v68 = v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF);
    if (!*(void *)v68) {
      goto LABEL_21;
    }
    uint64_t v184 = *(llvm::Instruction **)v68;
    if (!sub_1CBF5295C((uint64_t)&v171 + 8, *(llvm::Constant **)(v68 + 32))) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v22 != 55) {
      goto LABEL_21;
    }
    if (!*(void *)(v11 - 64)) {
      goto LABEL_21;
    }
    uint64_t v184 = *(llvm::Instruction **)(v11 - 64);
    if ((sub_1CBF528D8((uint64_t)&v171 + 8, *(unsigned __int8 **)(v11 - 32)) & 1) == 0) {
      goto LABEL_21;
    }
  }
  uint64_t v69 = v183;
  unsigned int v70 = *((_DWORD *)v183 + 2);
  uint64_t v71 = v183;
  if (v70 >= 0x41)
  {
    if (v70 - llvm::APInt::countLeadingZerosSlowCase(v183) > 0x40) {
      goto LABEL_21;
    }
    uint64_t v71 = *(llvm::APInt **)v69;
  }
  if (*(void *)v71 < (unint64_t)PrimitiveSizeInBits)
  {
    if (*((_DWORD *)v69 + 2) >= 0x41u) {
      uint64_t v69 = *(llvm::APInt **)v69;
    }
    unsigned int v72 = *(_DWORD *)v69 + v19;
    if (PrimitiveSizeInBits - 1 >= v72) {
      unint64_t v73 = v72;
    }
    else {
      unint64_t v73 = PrimitiveSizeInBits - 1;
    }
    unsigned int v74 = v184;
    uint64_t v75 = llvm::ConstantInt::get(v13, v73, 0);
    LOWORD(v173) = 257;
    char v76 = 27;
    char v77 = v74;
    return llvm::BinaryOperator::Create(v76, v77, (uint64_t)v75, (const char **)&v171, 0);
  }
LABEL_21:
  *(void *)&long long v171 = &v184;
  uint64_t v23 = *(void *)(v11 + 8);
  if (v23
    && !*(void *)(v23 + 8)
    && sub_1CBC5BEAC((void **)&v171, v11)
    && ((*((_DWORD *)v13 + 2) & 0xFE) == 0x12 || (sub_1CC9D19EC(a1, v13, *(llvm::Type **)v184) & 1) != 0))
  {
    unint64_t v117 = v184;
    uint64_t v118 = *(llvm::ConstantInt **)v184;
    uint64_t v119 = *(llvm::Type **)v184;
    if ((*(_DWORD *)(*(void *)v184 + 8) & 0xFE) == 0x12) {
      uint64_t v119 = (llvm::Type *)**((void **)v118 + 2);
    }
    unsigned int v120 = llvm::Type::getPrimitiveSizeInBits(v119) - 1;
    if (v120 >= v19) {
      unint64_t v121 = v19;
    }
    else {
      unint64_t v121 = v120;
    }
    uint64_t v122 = *(void *)(a1 + 24);
    unsigned int v123 = llvm::ConstantInt::get(v118, v121, 0);
    LOWORD(v173) = 257;
    int v124 = sub_1CC5357E8(v122, (uint64_t)v117, (uint64_t)v123, (uint64_t)&v171, 0);
    uint64_t v125 = operator new(0x60uLL);
    v125[13] = v125[13] & 0x38000000 | 1;
    int v67 = (llvm::Instruction *)(v125 + 8);
    *(void *)uint64_t v125 = 0;
    *((void *)v125 + 1) = 0;
    *((void *)v125 + 2) = 0;
    *((void *)v125 + 3) = v125 + 8;
    LOWORD(v173) = 257;
    uint64_t v88 = (const char **)&v171;
    uint64_t v89 = (llvm::SExtInst *)(v125 + 8);
    int v87 = v124;
    goto LABEL_223;
  }
  if (PrimitiveSizeInBits - 1 == v19)
  {
    *((void *)&v171 + 1) = &v184;
    *(void *)&long long v172 = &v184;
    uint64_t v83 = *(void *)(v11 + 8);
    if (v83 && !*(void *)(v83 + 8) && sub_1CCAB2EEC((uint64_t)&v171, v11))
    {
      int v151 = operator new(0x60uLL);
      int v67 = (llvm::Instruction *)(v151 + 8);
      v151[13] = v151[13] & 0x38000000 | 1;
      *(void *)int v151 = 0;
      *((void *)v151 + 1) = 0;
      *((void *)v151 + 2) = 0;
      *((void *)v151 + 3) = v151 + 8;
      uint64_t v152 = *(void *)(a1 + 24);
      uint64_t v153 = v184;
      LOWORD(v173) = 257;
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v184, v154, v155);
      int v87 = sub_1CB845F20(v152, 33, v153, (uint64_t)NullValue, (uint64_t)&v171);
      __int16 v167 = 257;
    }
    else
    {
      int v182 = 0;
      *(void *)&long long v171 = &v184;
      *((void *)&v171 + 1) = &v182;
      uint64_t v84 = *(void *)(v11 + 8);
      if (!v84 || *(void *)(v84 + 8) || !sub_1CCA17234((void **)&v171, v11)) {
        goto LABEL_25;
      }
      uint64_t v85 = operator new(0x60uLL);
      v85[13] = v85[13] & 0x38000000 | 1;
      int v67 = (llvm::Instruction *)(v85 + 8);
      *(void *)uint64_t v85 = 0;
      *((void *)v85 + 1) = 0;
      *((void *)v85 + 2) = 0;
      *((void *)v85 + 3) = v85 + 8;
      uint64_t v86 = *(void *)(a1 + 24);
      LOWORD(v173) = 257;
      int v87 = sub_1CB845F20(v86, 40, v184, (uint64_t)v182, (uint64_t)&v171);
      __int16 v167 = 257;
    }
    uint64_t v88 = (const char **)&v165;
LABEL_140:
    uint64_t v89 = v67;
LABEL_223:
    llvm::SExtInst::SExtInst(v89, v87, v13, v88, 0);
    return v67;
  }
LABEL_25:
  if ((*((unsigned char *)a2 + 17) & 2) != 0) {
    goto LABEL_26;
  }
  DWORD2(v171) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v171);
  }
  *(void *)&long long v171 = 0;
  if (v19)
  {
    if (v19 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&v171, 0, v19);
    }
    else
    {
      unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      if (DWORD2(v171) > 0x40) {
        *(void *)v171 |= v65;
      }
      else {
        *(void *)&long long v171 = v171 | v65;
      }
    }
  }
  BOOL v66 = llvm::MaskedValueIsZero((llvm *)v11, (const llvm::Value *)&v171, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v157);
  if (DWORD2(v171) >= 0x41 && (void)v171) {
    MEMORY[0x1D25D9CB0](v171, 0x1000C8000313F17);
  }
  if (!v66) {
    goto LABEL_26;
  }
  *((unsigned char *)a2 + 17) |= 2u;
  return a2;
}

uint64_t sub_1CCAB28B4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = **a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
    uint64_t v4 = **(void **)(v4 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  unsigned int v6 = PrimitiveSizeInBits;
  unsigned int v25 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
  if (!PrimitiveSizeInBits) {
    LODWORD(v7) = 0;
  }
  uint64_t v24 = v7 & PrimitiveSizeInBits;
  int v8 = *(_DWORD *)a1[1];
  unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
  if (v8 + 28 != v9 && (v9 != 5 || v8 != *(unsigned __int16 *)(a2 + 18))) {
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (!v10 || *(void *)(v10 + 8)) {
    goto LABEL_25;
  }
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  if (v9 >= 0x1C)
  {
    if (v9 - 53 > 2) {
      goto LABEL_25;
    }
    int v15 = *(_DWORD *)(a2 + 20);
    uint64_t v16 = (v15 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF));
    uint64_t v17 = *v16;
    if (!v17) {
      goto LABEL_25;
    }
    *uint64_t v12 = v17;
    int v18 = *(_DWORD *)(a2 + 20);
    if ((v18 & 0x40000000) != 0) {
      uint64_t v19 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v19 = a2 - 32 * (v18 & 0x7FFFFFF);
    }
    uint64_t v20 = 0;
    uint64_t v14 = *(void *)(v19 + 32);
    if (!v14 || *(unsigned __int8 *)(v14 + 16) > 0x14u) {
      goto LABEL_26;
    }
LABEL_33:
    *uint64_t v11 = v14;
    Add = llvm::ConstantExpr::getAdd((llvm::ConstantExpr *)*a1[3], (llvm::Constant *)*a1[4], 0, 0);
    v23[0] = 36;
    v23[1] = &v24;
    uint64_t v20 = sub_1CC9F981C((uint64_t)v23, Add);
    unsigned int v6 = v25;
    goto LABEL_26;
  }
  if (v9 == 5 && *(unsigned __int16 *)(a2 + 18) - 25 <= 2)
  {
    uint64_t v13 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v13)
    {
      *uint64_t v12 = v13;
      uint64_t v14 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (v14) {
        goto LABEL_33;
      }
    }
  }
LABEL_25:
  uint64_t v20 = 0;
LABEL_26:
  if (v6 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  return v20;
}

BOOL sub_1CCAB2B0C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 58)
  {
    uint64_t v6 = *(void *)(a2 - 64);
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 25) {
        return 0;
      }
      if (!sub_1CBF68974(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))) {
        return 0;
      }
      uint64_t v8 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      if (!v8) {
        return 0;
      }
    }
    else
    {
      if (v7 != 53) {
        return 0;
      }
      if (!sub_1CBF687D0(a1, *(llvm::Constant **)(v6 - 64))) {
        return 0;
      }
      uint64_t v8 = *(void *)(v6 - 32);
      if (!v8) {
        return 0;
      }
    }
    **(void **)(a1 + 8) = v8;
    return (sub_1CBF687D0(a1 + 16, *(llvm::Constant **)(a2 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 25) {
        goto LABEL_25;
      }
      if (!sub_1CBF68974(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))) {
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v11) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v10 != 53) {
        goto LABEL_25;
      }
      if (!sub_1CBF687D0(a1, *(llvm::Constant **)(v9 - 64))) {
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(v9 - 32);
      if (!v11) {
        goto LABEL_25;
      }
    }
    **(void **)(a1 + 8) = v11;
    if ((sub_1CBF68974(a1 + 16, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

uint64_t sub_1CCAB2CA8(void **a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) - 53 > 2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  uint64_t v6 = *v4;
  if (!v6 || *(unsigned __int8 *)(v6 + 16) < 0x1Cu) {
    return 0;
  }
  uint64_t v8 = a1 + 1;
  **a1 = v6;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  }
  uint64_t v11 = *(void *)(v10 + 32);
  if ((sub_1CBC5BE40(v8, v11) & 1) == 0)
  {
    if (!v11) {
      return 0;
    }
    *a1[2] = v11;
  }
  return 1;
}

uint64_t sub_1CCAB2D60@<X0>(void **a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  if (a2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
    if (v3 > 0x1B) {
      unsigned int v4 = v3 - 28;
    }
    else {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 38
      && ((int v5 = *(_DWORD *)(a2 + 20), (v5 & 0x40000000) != 0)
        ? (uint64_t v6 = *(uint64_t **)(a2 - 8))
        : (uint64_t v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF))),
          (uint64_t v7 = *v6) != 0 ? (v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu) : (v8 = 0),
          v8))
    {
      **a1 = v7;
      a3 = 1;
    }
    else
    {
      a3 = 0;
    }
  }
  return (a2 != 0) & a3;
}

uint64_t sub_1CCAB2DD8(void **a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) - 53 <= 2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    unsigned int v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
    uint64_t v6 = *v4;
    if (v6)
    {
      uint64_t v7 = a1 + 1;
      **a1 = v6;
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        uint64_t v9 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v9 = a2 - 32 * (v8 & 0x7FFFFFF);
      }
      uint64_t v10 = *(void *)(v9 + 32);
      if (sub_1CBC5BE40(v7, v10)) {
        return 1;
      }
      if (v10)
      {
        *a1[2] = v10;
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_1CCAB2E84(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v2 >= 0x1C)
  {
    if ((v2 & 0xFE) == 0x36)
    {
      int v3 = *(_DWORD *)(a2 + 20);
      if ((v3 & 0x40000000) != 0)
      {
        uint64_t v4 = *(void *)(a2 - 8);
        return *(void *)(v4 + 32) == a1;
      }
LABEL_9:
      uint64_t v4 = a2 - 32 * (v3 & 0x7FFFFFF);
      return *(void *)(v4 + 32) == a1;
    }
  }
  else if (v2 == 5 && (*(_WORD *)(a2 + 18) & 0xFFFE) == 0x1A)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    goto LABEL_9;
  }
  return 0;
}

uint64_t sub_1CCAB2EEC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29) {
      return 0;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15) {
        goto LABEL_31;
      }
      if (!sub_1CC03F414(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))) {
        goto LABEL_31;
      }
      uint64_t v11 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v11) {
        goto LABEL_31;
      }
    }
    else
    {
      if (v10 != 43) {
        goto LABEL_31;
      }
      if (!sub_1CBF535C4(a1, *(llvm::Constant **)(v9 - 64))) {
        goto LABEL_31;
      }
      uint64_t v11 = *(void *)(v9 - 32);
      if (!v11) {
        goto LABEL_31;
      }
    }
    **(void **)(a1 + 8) = v11;
    if (**(void **)(a1 + 16) == *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) {
      return 1;
    }
LABEL_31:
    uint64_t v16 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    int v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(v16 + 18) != 15) {
        return 0;
      }
      uint64_t result = sub_1CC03F414(a1, *(llvm::Constant **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
      if (!v18) {
        return 0;
      }
    }
    else
    {
      if (v17 != 43) {
        return 0;
      }
      uint64_t result = sub_1CBF535C4(a1, *(llvm::Constant **)(v16 - 64));
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)(v16 - 32);
      if (!v18) {
        return 0;
      }
    }
    **(void **)(a1 + 8) = v18;
    int v5 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return **(void **)(a1 + 16) == *v5;
  }
  if (v4 == 57)
  {
    int v5 = (void *)(a2 - 64);
    uint64_t v6 = *(void *)(a2 - 64);
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 15) {
        goto LABEL_18;
      }
      if (!sub_1CC03F414(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))) {
        goto LABEL_18;
      }
      uint64_t v8 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v7 != 43) {
        goto LABEL_18;
      }
      if (!sub_1CBF535C4(a1, *(llvm::Constant **)(v6 - 64))) {
        goto LABEL_18;
      }
      uint64_t v8 = *(void *)(v6 - 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    **(void **)(a1 + 8) = v8;
    if (**(void **)(a1 + 16) != *(void *)(a2 - 32))
    {
LABEL_18:
      uint64_t v12 = *(void *)(a2 - 32);
      int v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 5)
      {
        if (*(_WORD *)(v12 + 18) != 15) {
          return 0;
        }
        uint64_t result = sub_1CC03F414(a1, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)));
        if (!result) {
          return result;
        }
        uint64_t v15 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
        if (!v15) {
          return 0;
        }
      }
      else
      {
        if (v13 != 43) {
          return 0;
        }
        uint64_t result = sub_1CBF535C4(a1, *(llvm::Constant **)(v12 - 64));
        if (!result) {
          return result;
        }
        uint64_t v15 = *(void *)(v12 - 32);
        if (!v15) {
          return 0;
        }
      }
      **(void **)(a1 + 8) = v15;
      return **(void **)(a1 + 16) == *v5;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1CCAB319C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W8>)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 39)
    {
      int v11 = v7;
      int v9 = *(_DWORD *)(a2 + 20);
      if ((v9 & 0x40000000) != 0) {
        int v10 = *(uint64_t **)(a2 - 8);
      }
      else {
        int v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
      }
      a3 = sub_1CCAB3228(a1, *v10, (uint64_t)v10);
      int v7 = v11;
    }
    else
    {
      a3 = 0;
    }
  }
  return (v7 ^ 1) & a3;
}

uint64_t sub_1CCAB3228@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 43)
  {
    uint64_t v5 = *(void *)(a2 - 64);
    if (v5) {
      BOOL v6 = *(unsigned __int8 *)(v5 + 16) > 0x14u;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      **a1 = v5;
      uint64_t v9 = *(void *)(a2 - 32);
      char v10 = sub_1CBC5BE40(a1 + 1, v9);
      if (v10) {
        return 1;
      }
      if (v9)
      {
        *a1[2] = v9;
        return 1;
      }
    }
    return 0;
  }
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 15) {
      goto LABEL_19;
    }
    a3 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (a3)
    {
      **a1 = a3;
      uint64_t v8 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (sub_1CBC5BE40(a1 + 1, v8))
      {
LABEL_14:
        LOBYTE(a3) = 1;
        return (v4 == 5) & a3;
      }
      if (v8)
      {
        *a1[2] = v8;
        goto LABEL_14;
      }
LABEL_19:
      LOBYTE(a3) = 0;
    }
  }
  return (v4 == 5) & a3;
}

BOOL sub_1CCAB331C@<W0>(void **a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 43)
  {
    uint64_t v5 = *(void *)(a2 - 64);
    if (v5) {
      BOOL v6 = *(unsigned __int8 *)(v5 + 16) > 0x14u;
    }
    else {
      BOOL v6 = 1;
    }
    BOOL result = 0;
    if (!v6)
    {
      **a1 = v5;
      uint64_t v9 = *(void *)(a2 - 32);
      char v10 = sub_1CD68CE08(a1 + 1, v9);
      if ((v10 & 1) != 0 || *a1[2] == v9) {
        return 1;
      }
    }
  }
  else
  {
    if (v4 == 5)
    {
      a3 = 0;
      if (*(_WORD *)(a2 + 18) == 15)
      {
        uint64_t v8 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v8)
        {
          **a1 = v8;
          uint64_t v11 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if ((sub_1CD68CE08(a1 + 1, v11) & 1) != 0 || *a1[2] == v11) {
            a3 = 1;
          }
        }
      }
    }
    return v4 == 5 && a3;
  }
  return result;
}

BOOL sub_1CCAB3418@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 43)
  {
    uint64_t v5 = *(void *)(a2 - 64);
    if (v5) {
      BOOL v6 = *(unsigned __int8 *)(v5 + 16) > 0x14u;
    }
    else {
      BOOL v6 = 1;
    }
    BOOL result = 0;
    if (!v6)
    {
      **(void **)a1 = v5;
      uint64_t v7 = *(void *)(a2 - 32);
      if ((sub_1CC9F993C((void *)(a1 + 8), v7) & 1) != 0 || *(void *)(a1 + 16) == v7) {
        return 1;
      }
    }
  }
  else
  {
    if (v4 == 5)
    {
      a3 = 0;
      if (*(_WORD *)(a2 + 18) == 15)
      {
        uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v9)
        {
          **(void **)a1 = v9;
          uint64_t v10 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if ((sub_1CD68A554((void *)(a1 + 8), v10) & 1) != 0 || *(void *)(a1 + 16) == v10) {
            a3 = 1;
          }
        }
      }
    }
    return v4 == 5 && a3;
  }
  return result;
}

BOOL sub_1CCAB350C(uint64_t a1, llvm::UndefValue *a2)
{
  int v4 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v4 = (llvm::Type *)**((void **)v4 + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  unsigned int v6 = PrimitiveSizeInBits;
  unsigned int v30 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  unsigned int v32 = PrimitiveSizeInBits;
  int8x8_t v29 = 0;
  uint64_t v31 = 0;
  if (PrimitiveSizeInBits) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
  }
  else {
    unint64_t v7 = 0;
  }
  unsigned int v28 = PrimitiveSizeInBits;
  unint64_t v27 = v7;
  uint64_t v8 = sub_1CCAB38C4((unint64_t ***)a1, (uint64_t)a2, (int8x8_t *)&v27, &v29, 0, a2);
  if (v28 >= 0x41 && v27) {
    MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
  }
  if (v8 != a2)
  {
    if (v8)
    {
      uint64_t v9 = *((void *)a2 + 1);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v11 = *(_DWORD *)(v10 + 8);
        while (1)
        {
          uint64_t v12 = *(void *)(v9 + 24);
          uint64_t v33 = v12;
          int v34 = v11;
          int v13 = *(_DWORD *)(v10 + 2080);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(void *)(v10 + 2064);
          int v15 = v13 - 1;
          unsigned int v16 = v15 & ((v12 >> 4) ^ (v12 >> 9));
          int v17 = (void *)(v14 + 16 * v16);
          uint64_t v18 = *v17;
          if (*v17 != v12)
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != -4096)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -8192;
              }
              if (v21) {
                uint64_t v19 = v17;
              }
              unsigned int v22 = v16 + v20++;
              unsigned int v16 = v22 & v15;
              int v17 = (void *)(v14 + 16 * v16);
              uint64_t v18 = *v17;
              if (*v17 == v12) {
                goto LABEL_29;
              }
            }
            if (v19) {
              uint64_t v23 = v19;
            }
            else {
              uint64_t v23 = v17;
            }
            goto LABEL_27;
          }
LABEL_29:
          uint64_t v9 = *(void *)(v9 + 8);
          if (!v9)
          {
            llvm::Value::doRAUW(a2, v8, (llvm::Value *)1);
            *(unsigned char *)(a1 + 168) = 1;
            goto LABEL_33;
          }
        }
        uint64_t v23 = 0;
LABEL_27:
        uint64_t v24 = sub_1CBF569E0((_DWORD *)(v10 + 2064), (uint64_t)&v33, &v33, v23);
        *uint64_t v24 = v33;
        *((_DWORD *)v24 + 2) = v34;
        unint64_t v25 = *(unsigned int *)(v10 + 8);
        if (v25 >= *(unsigned int *)(v10 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v10 + 8 * v25) = v12;
        int v11 = *(_DWORD *)(v10 + 8) + 1;
        *(_DWORD *)(v10 + 8) = v11;
        goto LABEL_29;
      }
    }
  }
LABEL_33:
  if (v6 >= 0x41 && v7) {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v32 >= 0x41 && v31) {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
  }
  if (v30 >= 0x41 && *(void *)&v29) {
    MEMORY[0x1D25D9CB0](*(void *)&v29, 0x1000C8000313F17);
  }
  return v8 != 0;
}

llvm::UndefValue *sub_1CCAB38C4(unint64_t ***a1, uint64_t a2, int8x8_t *this, int8x8_t *a4, unsigned int a5, llvm::Instruction *a6)
{
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  v1231[1] = *(unsigned __int8 **)MEMORY[0x1E4F143B8];
  unsigned int v11 = this[1].u32[0];
  unsigned int v1221 = v11;
  unsigned int v1222 = a5;
  if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    uint64_t v12 = (unsigned int *)a1[7];
    int v13 = (unint64_t ***)a1[9];
    uint64_t v14 = (const llvm::DataLayout *)a1[10];
    if (a6 && *((void *)a6 + 5)) {
      goto LABEL_4;
    }
    goto LABEL_46;
  }
  int v15 = this;
  uint64_t v16 = *(void *)a2;
  uint64_t v17 = a4[1].u32[0];
  if (v17 > 0x40) {
    bzero(*(void **)a4, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
  }
  else {
    *a4 = 0;
  }
  uint64_t v18 = (void **)&a4[2];
  uint64_t v19 = a4[3].u32[0];
  if (v19 > 0x40) {
    bzero(*v18, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  }
  else {
    llvm::APInt *v18 = 0;
  }
  int8x8_t IntegerValue = (int8x8_t)v15[1].u32[0];
  if (IntegerValue.i32[0] > 0x40u)
  {
    int v22 = 0;
    int64_t v23 = (unint64_t)(*(void *)&IntegerValue + 63) >> 6;
    do
    {
      BOOL v24 = v23-- < 1;
      if (v24) {
        break;
      }
      unint64_t v25 = *(void *)(*(void *)v15 + 8 * v23);
      v22 += __clz(v25);
    }
    while (!v25);
    unsigned __int32 v26 = IntegerValue.i32[0] | 0xFFFFFFC0;
    if ((IntegerValue.i8[0] & 0x3F) == 0) {
      unsigned __int32 v26 = 0;
    }
    if (v22 + v26 != IntegerValue.i32[0])
    {
LABEL_13:
      if (v7 == 6 || *(unsigned char *)(v16 + 8) == 19) {
        return 0;
      }
      unsigned int v27 = *(unsigned __int8 *)(a2 + 16);
      if (v27 <= 0x1B) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = a2;
      }
      int v1220 = (llvm::Instruction *)v28;
      if (!v28)
      {
        uint64_t v12 = (unsigned int *)a1[7];
        int v13 = (unint64_t ***)a1[9];
        uint64_t v14 = (const llvm::DataLayout *)a1[10];
        if (v6 && *((void *)v6 + 5)) {
          goto LABEL_4;
        }
        if (v27 >= 0x1C)
        {
          unsigned int v6 = (llvm::Instruction *)a2;
          if (*(void *)(a2 + 40)) {
            goto LABEL_4;
          }
        }
LABEL_46:
        unsigned int v6 = 0;
LABEL_4:
        uint64_t v1205 = v14;
        int v1206 = v12;
        v1207 = (llvm::Instruction **)v6;
        v1208 = v13;
        uint64_t v1209 = 0;
        LOBYTE(v1210) = 1;
        sub_1CC15FBF8(a2, a4, v7, &v1205);
        return 0;
      }
      v1170 = (llvm::Type *)&a4[2];
      if (v7)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (!v29 || *(void *)(v29 + 8))
        {
          uint64_t v1165 = *(llvm::Constant ****)v28;
          LODWORD(v1224) = IntegerValue.i32[0];
          if (IntegerValue.i32[0] > 0x40u) {
            operator new[]();
          }
          int8x8_t p_src = 0;
          LODWORD(v1226) = IntegerValue.i32[0];
          int8x8_t v1225 = 0;
          LODWORD(v1188[0]) = IntegerValue.i32[0];
          __src = 0;
          LODWORD(v1189) = IntegerValue.i32[0];
          v1188[1] = 0;
          switch(*(unsigned char *)(v28 + 16))
          {
            case '7':
              uint64_t v368 = (unsigned int *)a1[7];
              uint64_t v369 = (unint64_t ***)a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (*(void *)(v28 + 40)) {
                  unsigned int v6 = (llvm::Instruction *)a2;
                }
                else {
                  unsigned int v6 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v368;
              v1207 = (llvm::Instruction **)v6;
              v1208 = v369;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              uint64_t v370 = v28;
              sub_1CC15FBF8(v28, a4, v7, &v1205);
              if (a4[1].i32[0] > 0x40u) {
                operator new[]();
              }
              uint64_t v371 = v15[1].u32[0];
              if (v371 > 0x40)
              {
                unint64_t v1108 = (unint64_t)(v371 + 63) >> 6;
                v1109 = (uint64_t *)*v15;
                unint64_t v1110 = v1108 - 1;
                v1111 = (uint64_t *)(*(void *)&a4[2] | *(void *)a4);
                do
                {
                  uint64_t v1113 = *v1109++;
                  uint64_t v1112 = v1113;
                  uint64_t v1114 = *v1111++;
                  uint64_t v1115 = v1112 & ~v1114;
                  BOOL v372 = v1115 == 0;
                  BOOL v518 = v1110-- != 0;
                  char v1116 = v518;
                }
                while (!v1115 && (v1116 & 1) != 0);
              }
              else
              {
                BOOL v372 = (*(void *)v15 & ~(*(void *)&a4[2] | *(void *)a4)) == 0;
              }
              if (v372) {
                goto LABEL_1217;
              }
              unint64_t v1212 = 0;
              uint64_t v1229 = 0;
              int64_t v1185 = 0;
              unint64_t v373 = v15[1].u32[0];
              uint64_t v1205 = (const llvm::DataLayout *)&v1185;
              int v1206 = (unsigned int *)&v1229;
              v1207 = 0;
              v1208 = (unint64_t ***)&v1212;
              uint64_t v1209 = 0;
              int v374 = *(unsigned __int8 *)(v370 + 16);
              if (v374 == 5)
              {
                if (*(_WORD *)(v370 + 18) != 27) {
                  goto LABEL_35;
                }
                uint64_t v519 = *(void *)(v370 - 32 * (*(_DWORD *)(v370 + 20) & 0x7FFFFFF));
                int v520 = *(unsigned __int8 *)(v519 + 16);
                if (v520 == 5)
                {
                  if (*(_WORD *)(v519 + 18) != 25) {
                    goto LABEL_35;
                  }
                  uint64_t v759 = v519 - 32 * (*(_DWORD *)(v519 + 20) & 0x7FFFFFF);
                  if (!*(void *)v759) {
                    goto LABEL_35;
                  }
                  int64_t v1185 = *(void *)v759;
                  if (!sub_1CBF5295C((uint64_t)&v1206, *(llvm::Constant **)(v759 + 32))) {
                    goto LABEL_35;
                  }
                }
                else
                {
                  if (v520 != 53) {
                    goto LABEL_35;
                  }
                  if (!*(void *)(v519 - 64)) {
                    goto LABEL_35;
                  }
                  int64_t v1185 = *(void *)(v519 - 64);
                  if ((sub_1CBF528D8((uint64_t)&v1206, *(unsigned __int8 **)(v519 - 32)) & 1) == 0) {
                    goto LABEL_35;
                  }
                }
                if (!sub_1CBF5295C((uint64_t)&v1208, *(llvm::Constant **)(v370 - 32 * (*(_DWORD *)(v370 + 20) & 0x7FFFFFF) + 32)))goto LABEL_35; {
              }
                }
              else
              {
                if (v374 != 55) {
                  goto LABEL_35;
                }
                uint64_t v375 = *(void *)(v370 - 64);
                int v376 = *(unsigned __int8 *)(v375 + 16);
                if (v376 == 5)
                {
                  if (*(_WORD *)(v375 + 18) != 25) {
                    goto LABEL_35;
                  }
                  uint64_t v713 = v375 - 32 * (*(_DWORD *)(v375 + 20) & 0x7FFFFFF);
                  if (!*(void *)v713) {
                    goto LABEL_35;
                  }
                  int64_t v1185 = *(void *)v713;
                  if (!sub_1CBF5295C((uint64_t)&v1206, *(llvm::Constant **)(v713 + 32))) {
                    goto LABEL_35;
                  }
                }
                else
                {
                  if (v376 != 53) {
                    goto LABEL_35;
                  }
                  if (!*(void *)(v375 - 64)) {
                    goto LABEL_35;
                  }
                  int64_t v1185 = *(void *)(v375 - 64);
                  if ((sub_1CBF528D8((uint64_t)&v1206, *(unsigned __int8 **)(v375 - 32)) & 1) == 0) {
                    goto LABEL_35;
                  }
                }
                if ((sub_1CBF528D8((uint64_t)&v1208, *(unsigned __int8 **)(v370 - 32)) & 1) == 0) {
                  goto LABEL_35;
                }
              }
              uint64_t v760 = (unint64_t *)v1229;
              if (v1229 != v1212) {
                goto LABEL_35;
              }
              uint64_t v761 = *(unsigned int *)(v1229 + 8);
              if (v761 < 0x41) {
                goto LABEL_1150;
              }
              int v1149 = 0;
              int64_t v1150 = (unint64_t)(v761 + 63) >> 6;
              do
              {
                BOOL v24 = v1150-- < 1;
                if (v24) {
                  break;
                }
                unint64_t v1151 = *(void *)(*(void *)v1229 + 8 * v1150);
                v1149 += __clz(v1151);
              }
              while (!v1151);
              int v1152 = v761 | 0xFFFFFFC0;
              if ((v761 & 0x3F) == 0) {
                int v1152 = 0;
              }
              if ((v761 - v1149 - v1152) < 0x41)
              {
                uint64_t v760 = *(unint64_t **)v1229;
LABEL_1150:
                unint64_t v762 = *v760;
                if (*v760 < v373)
                {
                  unsigned int v1217 = v373;
                  if (v373 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v763 = 0;
                  unint64_t v1216 = 0;
                  if (v373 != v762)
                  {
                    if ((v373 - v762) > 0x40)
                    {
                      llvm::APInt::setBitsSlowCase(&v1216, 0, v373 - v762);
                    }
                    else
                    {
                      unint64_t v763 = 0xFFFFFFFFFFFFFFFFLL >> (v762 - v373);
                      unint64_t v1216 = v763;
                    }
                  }
                  uint64_t v764 = v15[1].u32[0];
                  if (v764 > 0x40)
                  {
                    uint64_t v1153 = 0;
                    unint64_t v1154 = v764 + 63;
                    int8x8_t v1155 = *v15;
                    uint64_t v1156 = ((v1154 >> 3) & 0x3FFFFFF8) - 8;
                    do
                    {
                      uint64_t v1157 = *(void *)(*(void *)&v1155 + v1153) & ~*(void *)(v763 + v1153);
                      BOOL v765 = v1157 == 0;
                      if (v1157) {
                        BOOL v1158 = 1;
                      }
                      else {
                        BOOL v1158 = v1156 == v1153;
                      }
                      v1153 += 8;
                    }
                    while (!v1158);
                  }
                  else
                  {
                    BOOL v765 = (*(void *)v15 & ~v763) == 0;
                  }
                  if (v765)
                  {
                    int8x8_t IntegerValue = (int8x8_t)v1185;
                    goto LABEL_36;
                  }
                }
              }
              goto LABEL_35;
            case '8':
              int v61 = *(_DWORD *)(v28 + 20);
              if ((v61 & 0x40000000) != 0) {
                uint64_t v62 = *(void *)(v28 - 8);
              }
              else {
                uint64_t v62 = v28 - 32 * (v61 & 0x7FFFFFF);
              }
              uint64_t v63 = v28;
              uint64_t v64 = *(void *)(v62 + 32);
              unint64_t v65 = (unsigned int *)a1[7];
              BOOL v66 = (unint64_t ***)a1[9];
              if (!v6 || (int v67 = (llvm::Instruction **)v6, !*((void *)v6 + 5)))
              {
                if (!v64
                  || *(unsigned __int8 *)(v64 + 16) < 0x1Cu
                  || (int v67 = (llvm::Instruction **)v64, !*(void *)(v64 + 40)))
                {
                  int v67 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v65;
              v1207 = v67;
              v1208 = v66;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              sub_1CC15FBF8(v64, (int8x8_t *)&__src, v7 + 1, &v1205);
              int v68 = *(_DWORD *)(v63 + 20);
              if ((v68 & 0x40000000) != 0) {
                uint64_t v69 = *(uint64_t **)(v63 - 8);
              }
              else {
                uint64_t v69 = (uint64_t *)(v63 - 32 * (v68 & 0x7FFFFFF));
              }
              uint64_t v70 = *v69;
              uint64_t v71 = (unsigned int *)a1[7];
              unsigned int v72 = (unint64_t ***)a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (!v70
                  || *(unsigned __int8 *)(v70 + 16) < 0x1Cu
                  || (unsigned int v6 = (llvm::Instruction *)v70, !*(void *)(v70 + 40)))
                {
                  unsigned int v6 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v71;
              v1207 = (llvm::Instruction **)v6;
              v1208 = v72;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              sub_1CC15FBF8(v70, &p_src, v7 + 1, &v1205);
              unsigned int v74 = v1224;
              if (v1224 > 0x40) {
                operator new[]();
              }
              __int32 v75 = (int)v1226;
              if (v1226 > 0x40) {
                operator new[]();
              }
              unint64_t v76 = (unint64_t)__src | *(void *)&p_src;
              uint64_t v77 = (uint64_t)v1188[1] & *(void *)&v1225;
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = (int8x8_t)v76;
              a4[1].i32[0] = v74;
              if (a4[3].i32[0] >= 0x41u && *(void *)v1170)
              {
                MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
                unsigned int v74 = a4[1].u32[0];
              }
              a4[2] = (int8x8_t)v77;
              a4[3].i32[0] = v75;
              if (v74 > 0x40) {
                operator new[]();
              }
              uint64_t v78 = *(void *)a4 | v77;
              uint64_t v79 = v15[1].u32[0];
              if (v79 > 0x40)
              {
                unint64_t v1040 = (unint64_t)(v79 + 63) >> 6;
                uint64_t v1041 = (uint64_t *)*v15;
                unint64_t v1042 = v1040 - 1;
                uint64_t v1043 = (uint64_t *)v78;
                do
                {
                  uint64_t v1045 = *v1041++;
                  uint64_t v1044 = v1045;
                  uint64_t v1046 = *v1043++;
                  uint64_t v1047 = v1044 & ~v1046;
                  BOOL v80 = v1047 == 0;
                  BOOL v518 = v1042-- != 0;
                  char v1048 = v518;
                }
                while (!v1047 && (v1048 & 1) != 0);
              }
              else
              {
                BOOL v80 = (*(void *)v15 & ~v78) == 0;
              }
              if (v80) {
                goto LABEL_1217;
              }
              if (v1224 > 0x40) {
                operator new[]();
              }
              uint64_t v81 = v15[1].u32[0];
              if (v81 > 0x40)
              {
                unint64_t v1049 = (unint64_t)(v81 + 63) >> 6;
                uint64_t v1050 = (uint64_t *)*v15;
                unint64_t v1051 = v1049 - 1;
                v1052 = (uint64_t *)((uint64_t)v1188[1] | *(void *)&p_src);
                do
                {
                  uint64_t v1054 = *v1050++;
                  uint64_t v1053 = v1054;
                  uint64_t v1055 = *v1052++;
                  uint64_t v1056 = v1053 & ~v1055;
                  BOOL v82 = v1056 == 0;
                  BOOL v518 = v1051-- != 0;
                  char v1057 = v518;
                }
                while (!v1056 && (v1057 & 1) != 0);
              }
              else
              {
                BOOL v82 = (*(void *)v15 & ~((uint64_t)v1188[1] | *(void *)&p_src)) == 0;
              }
              if (v82) {
                goto LABEL_1974;
              }
              unsigned int v83 = v1188[0];
              if (LODWORD(v1188[0]) > 0x40) {
                operator new[]();
              }
              unint64_t v84 = *(void *)&v1225 | (unint64_t)__src;
              uint64_t v85 = v15[1].u32[0];
              if (v85 <= 0x40) {
                goto LABEL_310;
              }
              unint64_t v86 = (unint64_t)(v85 + 63) >> 6;
              int v87 = (uint64_t *)*v15;
              unint64_t v88 = v86 - 1;
              uint64_t v89 = (uint64_t *)(*(void *)&v1225 | (unint64_t)__src);
              do
              {
                uint64_t v91 = *v87++;
                uint64_t v90 = v91;
                uint64_t v92 = *v89++;
                uint64_t v93 = v90 & ~v92;
                BOOL v94 = v93 == 0;
                BOOL v518 = v88-- != 0;
                char v95 = v518;
              }
              while (!v93 && (v95 & 1) != 0);
              goto LABEL_311;
            case '9':
              int v211 = *(_DWORD *)(v28 + 20);
              if ((v211 & 0x40000000) != 0) {
                uint64_t v212 = *(void *)(v28 - 8);
              }
              else {
                uint64_t v212 = v28 - 32 * (v211 & 0x7FFFFFF);
              }
              uint64_t v63 = v28;
              uint64_t v213 = *(void *)(v212 + 32);
              uint64_t v214 = (unsigned int *)a1[7];
              v215 = (unint64_t ***)a1[9];
              if (!v6 || (int v216 = (llvm::Instruction **)v6, !*((void *)v6 + 5)))
              {
                if (!v213
                  || *(unsigned __int8 *)(v213 + 16) < 0x1Cu
                  || (int v216 = (llvm::Instruction **)v213, !*(void *)(v213 + 40)))
                {
                  int v216 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v214;
              v1207 = v216;
              v1208 = v215;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              sub_1CC15FBF8(v213, (int8x8_t *)&__src, v7 + 1, &v1205);
              int v217 = *(_DWORD *)(v63 + 20);
              if ((v217 & 0x40000000) != 0) {
                unint64_t v218 = *(uint64_t **)(v63 - 8);
              }
              else {
                unint64_t v218 = (uint64_t *)(v63 - 32 * (v217 & 0x7FFFFFF));
              }
              uint64_t v219 = *v218;
              uint64_t v220 = (unsigned int *)a1[7];
              uint64_t v221 = (unint64_t ***)a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (!v219
                  || *(unsigned __int8 *)(v219 + 16) < 0x1Cu
                  || (unsigned int v6 = (llvm::Instruction *)v219, !*(void *)(v219 + 40)))
                {
                  unsigned int v6 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v220;
              v1207 = (llvm::Instruction **)v6;
              v1208 = v221;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              sub_1CC15FBF8(v219, &p_src, v7 + 1, &v1205);
              unsigned int v222 = v1224;
              if (v1224 > 0x40) {
                operator new[]();
              }
              __int32 v223 = (int)v1226;
              if (v1226 > 0x40) {
                operator new[]();
              }
              unint64_t v224 = (unint64_t)__src & *(void *)&p_src;
              uint64_t v225 = (uint64_t)v1188[1] | *(void *)&v1225;
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = (int8x8_t)v224;
              a4[1].i32[0] = v222;
              if (a4[3].i32[0] >= 0x41u && *(void *)v1170)
              {
                MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
                unsigned int v222 = a4[1].u32[0];
              }
              a4[2] = (int8x8_t)v225;
              a4[3].i32[0] = v223;
              if (v222 > 0x40) {
                operator new[]();
              }
              uint64_t v226 = *(void *)a4 | v225;
              uint64_t v227 = v15[1].u32[0];
              if (v227 > 0x40)
              {
                unint64_t v1058 = (unint64_t)(v227 + 63) >> 6;
                v1059 = (uint64_t *)*v15;
                unint64_t v1060 = v1058 - 1;
                uint64_t v1061 = (uint64_t *)v226;
                do
                {
                  uint64_t v1063 = *v1059++;
                  uint64_t v1062 = v1063;
                  uint64_t v1064 = *v1061++;
                  uint64_t v1065 = v1062 & ~v1064;
                  BOOL v228 = v1065 == 0;
                  BOOL v518 = v1060-- != 0;
                  char v1066 = v518;
                }
                while (!v1065 && (v1066 & 1) != 0);
              }
              else
              {
                BOOL v228 = (*(void *)v15 & ~v226) == 0;
              }
              if (v228) {
                goto LABEL_1217;
              }
              if (v1226 > 0x40) {
                operator new[]();
              }
              uint64_t v229 = v15[1].u32[0];
              if (v229 > 0x40)
              {
                unint64_t v1067 = (unint64_t)(v229 + 63) >> 6;
                v1068 = (uint64_t *)*v15;
                unint64_t v1069 = v1067 - 1;
                v1070 = (uint64_t *)((unint64_t)__src | *(void *)&v1225);
                do
                {
                  uint64_t v1072 = *v1068++;
                  uint64_t v1071 = v1072;
                  uint64_t v1073 = *v1070++;
                  uint64_t v1074 = v1071 & ~v1073;
                  BOOL v230 = v1074 == 0;
                  BOOL v518 = v1069-- != 0;
                  char v1075 = v518;
                }
                while (!v1074 && (v1075 & 1) != 0);
              }
              else
              {
                BOOL v230 = (*(void *)v15 & ~((unint64_t)__src | *(void *)&v1225)) == 0;
              }
              if (v230) {
                goto LABEL_1974;
              }
              unsigned int v83 = v1189;
              if (v1189 > 0x40) {
                operator new[]();
              }
              unint64_t v84 = *(void *)&p_src | (uint64_t)v1188[1];
              uint64_t v231 = v15[1].u32[0];
              if (v231 > 0x40)
              {
                unint64_t v1076 = (unint64_t)(v231 + 63) >> 6;
                v1077 = (uint64_t *)*v15;
                unint64_t v1078 = v1076 - 1;
                uint64_t v1079 = (uint64_t *)(*(void *)&p_src | (uint64_t)v1188[1]);
                do
                {
                  uint64_t v1081 = *v1077++;
                  uint64_t v1080 = v1081;
                  uint64_t v1082 = *v1079++;
                  uint64_t v1083 = v1080 & ~v1082;
                  BOOL v94 = v1083 == 0;
                  BOOL v518 = v1078-- != 0;
                  char v1084 = v518;
                }
                while (!v1083 && (v1084 & 1) != 0);
              }
              else
              {
LABEL_310:
                BOOL v94 = (*(void *)v15 & ~v84) == 0;
              }
LABEL_311:
              if (v83 >= 0x41 && v84) {
                MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
              }
              if (v94) {
                goto LABEL_313;
              }
              goto LABEL_35;
            case ':':
              int v272 = *(_DWORD *)(v28 + 20);
              if ((v272 & 0x40000000) != 0) {
                uint64_t v273 = *(void *)(v28 - 8);
              }
              else {
                uint64_t v273 = v28 - 32 * (v272 & 0x7FFFFFF);
              }
              uint64_t v63 = v28;
              uint64_t v274 = *(void *)(v273 + 32);
              uint64_t v275 = (unsigned int *)a1[7];
              __int16 v276 = (unint64_t ***)a1[9];
              if (!v6 || (uint64_t v277 = (llvm::Instruction **)v6, !*((void *)v6 + 5)))
              {
                if (!v274
                  || *(unsigned __int8 *)(v274 + 16) < 0x1Cu
                  || (uint64_t v277 = (llvm::Instruction **)v274, !*(void *)(v274 + 40)))
                {
                  uint64_t v277 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v275;
              v1207 = v277;
              v1208 = v276;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              sub_1CC15FBF8(v274, (int8x8_t *)&__src, v7 + 1, &v1205);
              int v278 = *(_DWORD *)(v63 + 20);
              if ((v278 & 0x40000000) != 0) {
                int v279 = *(uint64_t **)(v63 - 8);
              }
              else {
                int v279 = (uint64_t *)(v63 - 32 * (v278 & 0x7FFFFFF));
              }
              uint64_t v280 = *v279;
              uint64_t v281 = (unsigned int *)a1[7];
              long long v282 = (unint64_t ***)a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (!v280
                  || *(unsigned __int8 *)(v280 + 16) < 0x1Cu
                  || (unsigned int v6 = (llvm::Instruction *)v280, !*(void *)(v280 + 40)))
                {
                  unsigned int v6 = 0;
                }
              }
              uint64_t v1205 = (const llvm::DataLayout *)a1[10];
              int v1206 = v281;
              v1207 = (llvm::Instruction **)v6;
              v1208 = v282;
              uint64_t v1209 = 0;
              LOBYTE(v1210) = 1;
              sub_1CC15FBF8(v280, &p_src, v7 + 1, &v1205);
              LODWORD(v1206) = v1224;
              if (v1224 > 0x40) {
                operator new[]();
              }
              uint64_t v1205 = (const llvm::DataLayout *)p_src;
              LODWORD(v1208) = v1226;
              if (v1226 > 0x40) {
                operator new[]();
              }
              v1207 = (llvm::Instruction **)v1225;
              llvm::KnownBits::operator^=((uint64_t)&v1205, &__src);
              __int32 v283 = (int)v1206;
              uint64_t v284 = v1205;
              __int32 v285 = (int)v1208;
              int64_t v286 = v1207;
              LODWORD(v1206) = 0;
              LODWORD(v1208) = 0;
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = (int8x8_t)v284;
              a4[1].i32[0] = v283;
              if (a4[3].i32[0] >= 0x41u && *(void *)v1170) {
                MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
              }
              a4[2] = (int8x8_t)v286;
              a4[3].i32[0] = v285;
              if (v1208 >= 0x41 && v1207) {
                MEMORY[0x1D25D9CB0](v1207, 0x1000C8000313F17);
              }
              if (v1206 >= 0x41 && v1205) {
                MEMORY[0x1D25D9CB0](v1205, 0x1000C8000313F17);
              }
              if (a4[1].i32[0] > 0x40u) {
                operator new[]();
              }
              uint64_t v287 = v15[1].u32[0];
              if (v287 > 0x40)
              {
                unint64_t v1085 = (unint64_t)(v287 + 63) >> 6;
                v1086 = (uint64_t *)*v15;
                unint64_t v1087 = v1085 - 1;
                int v1088 = (uint64_t *)(*(void *)&a4[2] | *(void *)a4);
                do
                {
                  uint64_t v1090 = *v1086++;
                  uint64_t v1089 = v1090;
                  uint64_t v1091 = *v1088++;
                  uint64_t v1092 = v1089 & ~v1091;
                  BOOL v288 = v1092 == 0;
                  BOOL v518 = v1087-- != 0;
                  char v1093 = v518;
                }
                while (!v1092 && (v1093 & 1) != 0);
              }
              else
              {
                BOOL v288 = (*(void *)v15 & ~(*(void *)&a4[2] | *(void *)a4)) == 0;
              }
              if (v288)
              {
LABEL_1217:
                int8x8_t IntegerValue = (int8x8_t)llvm::Constant::getIntegerValue(v1165, v1170, v73);
                goto LABEL_36;
              }
              uint64_t v289 = v15[1].u32[0];
              if (v289 > 0x40)
              {
                unint64_t v1094 = (unint64_t)(v289 + 63) >> 6;
                uint64_t v1095 = (uint64_t *)*v15;
                v1096 = (uint64_t *)__src;
                v1097 = (uint64_t *)*v15;
                unint64_t v1098 = v1094;
                while (1)
                {
                  uint64_t v1100 = *v1097++;
                  uint64_t v1099 = v1100;
                  uint64_t v1101 = *v1096++;
                  if ((v1099 & ~v1101) != 0) {
                    break;
                  }
                  if (!--v1098) {
                    goto LABEL_1974;
                  }
                }
                v1104 = (uint64_t *)p_src;
                while (1)
                {
                  uint64_t v1106 = *v1095++;
                  uint64_t v1105 = v1106;
                  uint64_t v1107 = *v1104++;
                  if ((v1105 & ~v1107) != 0) {
                    break;
                  }
                  if (!--v1094) {
                    goto LABEL_313;
                  }
                }
              }
              else
              {
                if ((*(void *)v15 & ~(unint64_t)__src) == 0)
                {
LABEL_1974:
                  int v1102 = *(_DWORD *)(v63 + 20);
                  if ((v1102 & 0x40000000) != 0) {
                    v1103 = *(int8x8_t **)(v63 - 8);
                  }
                  else {
                    v1103 = (int8x8_t *)(v63 - 32 * (v1102 & 0x7FFFFFF));
                  }
                  int8x8_t IntegerValue = *v1103;
LABEL_36:
                  if (v1189 >= 0x41 && v1188[1]) {
                    MEMORY[0x1D25D9CB0](v1188[1], 0x1000C8000313F17);
                  }
                  if (LODWORD(v1188[0]) >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  if (v1226 >= 0x41 && *(void *)&v1225) {
                    MEMORY[0x1D25D9CB0](*(void *)&v1225, 0x1000C8000313F17);
                  }
                  if (v1224 < 0x41) {
                    return (llvm::UndefValue *)IntegerValue;
                  }
                  int8x8_t v30 = p_src;
                  if (!*(void *)&p_src) {
                    return (llvm::UndefValue *)IntegerValue;
                  }
                  goto LABEL_1606;
                }
                if ((*(void *)v15 & ~*(void *)&p_src) == 0)
                {
LABEL_313:
                  int v232 = *(_DWORD *)(v63 + 20);
                  if ((v232 & 0x40000000) != 0) {
                    uint64_t v233 = *(int8x8_t **)(v63 - 8);
                  }
                  else {
                    uint64_t v233 = (int8x8_t *)(v63 - 32 * (v232 & 0x7FFFFFF));
                  }
                  int8x8_t IntegerValue = v233[4];
                  goto LABEL_36;
                }
              }
LABEL_35:
              int8x8_t IntegerValue = 0;
              goto LABEL_36;
            default:
              JUMPOUT(0);
          }
        }
      }
      unsigned int v1217 = v11;
      if (v11 > 0x40) {
        operator new[]();
      }
      unsigned int v1219 = v11;
      unint64_t v1216 = 0;
      unint64_t v1218 = 0;
      unsigned int v1213 = v11;
      unint64_t v1212 = 0;
      unsigned int v1215 = v11;
      unint64_t v1214 = 0;
      uint64_t v31 = (llvm::Instruction *)a2;
      if (v7) {
        goto LABEL_56;
      }
      uint64_t v32 = *(void *)(a2 + 8);
      if (v32)
      {
        uint64_t v31 = (llvm::Instruction *)a2;
        if (!*(void *)(v32 + 8)) {
          goto LABEL_56;
        }
      }
      uint64_t v33 = v15[1].u32[0];
      if (v33 > 0x40)
      {
        memset(*(void **)v15, 255, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v33) = v15[1].i32[0];
        if (v33)
        {
LABEL_53:
          unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
          if (v33 >= 0x41)
          {
            BOOL v35 = (int8x8_t *)(*(void *)v15
                             + 8 * ((((unint64_t)v33 + 63) >> 6) - 1));
            goto LABEL_55;
          }
LABEL_54:
          BOOL v35 = v15;
LABEL_55:
          *(void *)v35 &= v34;
          uint64_t v31 = v1220;
LABEL_56:
          uint64_t v1205 = (const llvm::DataLayout *)v15;
          int v1206 = &v1221;
          v1207 = &v1220;
          v1208 = a1;
          uint64_t v1209 = (int8x8_t *)&v1216;
          uint64_t v1210 = &v1222;
          uint64_t v1211 = (unint64_t ***)&v1212;
          switch(*((unsigned char *)v31 + 16))
          {
            case ')':
              if (v15[1].i32[0] >= 0x41u) {
                operator new[]();
              }
              if (v15->i8[0]) {
                goto LABEL_1457;
              }
              int64_t v1185 = 0;
              v1200[0] = 0;
              int8x8_t p_src = (int8x8_t)&v1185;
              v1224 = v1200;
              uint64_t v36 = *((void *)v31 - 8);
              uint64_t v37 = *(void *)(v36 + 8);
              if (v37
                && !*(void *)(v37 + 8)
                && sub_1CBC5BE40(&p_src, v36)
                && (uint64_t v38 = *((void *)v31 - 4), (v39 = *(void *)(v38 + 8)) != 0)
                && !*(void *)(v39 + 8)
                && (sub_1CBC5BEAC(&v1224, v38) & 1) != 0
                || (uint64_t v40 = *((void *)v31 - 4), (v41 = *(void *)(v40 + 8)) != 0)
                && !*(void *)(v41 + 8)
                && sub_1CBC5BE40(&p_src, v40)
                && (uint64_t v42 = *((void *)v31 - 8), (v43 = *(void *)(v42 + 8)) != 0)
                && !*(void *)(v43 + 8)
                && (sub_1CBC5BEAC(&v1224, v42) & 1) != 0)
              {
                uint64_t v44 = *(void *)v1185;
                int v45 = *(_DWORD *)(*(void *)v1185 + 8);
                if ((v45 & 0xFE) == 0x12) {
                  int v45 = *(_DWORD *)(**(void **)(v44 + 16) + 8);
                }
                if (v45 == 269 && v44 == *(void *)v1200[0])
                {
                  uint64_t v46 = (uint64_t)a1[3];
                  uint64_t v1229 = v46;
                  long long v1230 = *(_OWORD *)(v46 + 48);
                  unint64_t v47 = (unint64_t ***)v1231;
                  uint64_t v48 = *(unsigned int *)(v46 + 8);
                  if (v48)
                  {
                    uint64_t v1035 = (unsigned __int8 **)(*(void *)v46 + 8);
                    uint64_t v1036 = 16 * v48;
                    while (*((_DWORD *)v1035 - 2))
                    {
                      v1035 += 2;
                      v1036 -= 16;
                      if (!v1036) {
                        goto LABEL_76;
                      }
                    }
                    v1231[0] = *v1035;
                    if (v1231[0])
                    {
                      llvm::MetadataTracking::track((uint64_t)v1231, v1231[0], 2);
                      uint64_t v46 = (uint64_t)a1[3];
                    }
                  }
                  else
                  {
LABEL_76:
                    v1231[0] = 0;
                  }
                  unsigned int v49 = v1220;
                  char v50 = (char *)v1220 + 24;
                  *(void *)(v46 + 48) = *((void *)v1220 + 5);
                  *(void *)(v46 + 56) = v50;
                  uint64_t v51 = (void *)*((void *)v49 + 6);
                  __src = v51;
                  if (v51)
                  {
                    llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v51, 2);
                    int v52 = __src;
                  }
                  else
                  {
                    int v52 = 0;
                  }
                  sub_1CB8461A4(v46, 0, (uint64_t)v52);
                  if (!__src) {
                    goto LABEL_80;
                  }
                  int v977 = *(unsigned __int8 *)__src;
                  if ((v977 - 4) > 0x1E)
                  {
                    if ((v977 - 3) >= 0xFFFFFFFE) {
                      uint64_t v1029 = __src;
                    }
                    else {
                      uint64_t v1029 = 0;
                    }
                    if ((v977 - 3) < 0xFFFFFFFE)
                    {
                      if (v977 == 3) {
                        *((void *)__src + 1) = 0;
                      }
                      goto LABEL_80;
                    }
                    unint64_t v979 = (unint64_t)v1029 + 8;
                  }
                  else if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3) {
                         || (uint64_t v978 = *((void *)__src + 2), (v978 & 4) == 0)
                  }
                         || (unint64_t v979 = v978 & 0xFFFFFFFFFFFFFFF8) == 0)
                  {
LABEL_80:
                    uint64_t v54 = (uint64_t)a1[3];
                    LOWORD(v1227) = 257;
                    uint64_t v55 = sub_1CC2427E8(v54, v1185, (uint64_t)&p_src, v53);
                    __int16 v1190 = 257;
                    int v56 = sub_1CBF52474(v54, v55, (uint64_t)v1200[0], (uint64_t)&__src);
                    int8x8_t IntegerValue = (int8x8_t)v56;
                    uint64_t v57 = a1[3];
                    __int16 v1190 = 257;
                    if (*(void *)v56 != v16)
                    {
                      if (*((unsigned __int8 *)v56 + 16) <= 0x14u)
                      {
                        int8x8_t IntegerValue = (int8x8_t)(*(uint64_t (**)(unint64_t *, uint64_t, llvm::Instruction *, uint64_t))(*v57[9] + 224))(v57[9], 40, v56, v16);
                        if (IntegerValue) {
                          BOOL v866 = *(unsigned __int8 *)(*(void *)&IntegerValue + 16) >= 0x1Cu;
                        }
                        else {
                          BOOL v866 = 0;
                        }
                        if (v866)
                        {
                          (*(void (**)(unint64_t *, int8x8_t, void **, unint64_t *, unint64_t *))(*v57[10] + 16))(v57[10], IntegerValue, &__src, v57[6], v57[7]);
                          uint64_t v867 = *((unsigned int *)v57 + 2);
                          if (v867)
                          {
                            uint64_t v868 = *v57;
                            uint64_t v869 = &v868[2 * v867];
                            do
                            {
                              llvm::Instruction::setMetadata(*(llvm::Instruction **)&IntegerValue, *(_DWORD *)v868, (llvm::MDNode *)v868[1]);
                              v868 += 2;
                            }
                            while (v868 != v869);
                          }
                        }
                      }
                      else
                      {
                        LOWORD(v1227) = 257;
                        int8x8_t IntegerValue = (int8x8_t)llvm::CastInst::Create(40, (uint64_t)v56, v16, (const char **)&p_src, 0);
                        (*(void (**)(unint64_t *, int8x8_t, void **, unint64_t *, unint64_t *))(*v57[10] + 16))(v57[10], IntegerValue, &__src, v57[6], v57[7]);
                        uint64_t v58 = *((unsigned int *)v57 + 2);
                        if (v58)
                        {
                          int v59 = *v57;
                          uint64_t v60 = &v59[2 * v58];
                          do
                          {
                            llvm::Instruction::setMetadata(*(llvm::Instruction **)&IntegerValue, *(_DWORD *)v59, (llvm::MDNode *)v59[1]);
                            v59 += 2;
                          }
                          while (v59 != v60);
                        }
                      }
                    }
                    goto LABEL_1225;
                  }
                  int8x8_t p_src = (int8x8_t)&__src;
                  sub_1CC5FA668(v979 + 16, &p_src);
                  goto LABEL_80;
                }
              }
              v883 = v1220;
              int8x8_t IntegerValue = (int8x8_t)&v1224;
              int8x8_t p_src = (int8x8_t)&v1185;
              v1224 = v1200;
              int v884 = *((unsigned __int8 *)v1220 + 16);
              if (v884 == 5)
              {
                if (*((_WORD *)v1220 + 9) != 13) {
                  goto LABEL_1457;
                }
                uint64_t v889 = *((void *)v1220 - 4 * (*((_DWORD *)v1220 + 5) & 0x7FFFFFF));
                uint64_t v890 = *(void *)(v889 + 8);
                if (!v890) {
                  goto LABEL_1457;
                }
                if (*(void *)(v890 + 8)) {
                  goto LABEL_1457;
                }
                if (!sub_1CBC5BEAC(&p_src, v889)) {
                  goto LABEL_1457;
                }
                uint64_t v891 = ((void *)v883 - 4 * (*((_DWORD *)v883 + 5) & 0x7FFFFFF))[4];
                uint64_t v892 = *(void *)(v891 + 8);
                if (!v892 || *(void *)(v892 + 8) || !sub_1CBC5BEAC(&v1224, v891)) {
                  goto LABEL_1457;
                }
              }
              else if (v884 != 41 {
                     || (uint64_t v885 = *((void *)v1220 - 8), (v886 = *(void *)(v885 + 8)) == 0)
              }
                     || *(void *)(v886 + 8)
                     || !sub_1CBC5BEAC(&p_src, v885)
                     || (uint64_t v887 = *((void *)v883 - 4), (v888 = *(void *)(v887 + 8)) == 0)
                     || *(void *)(v888 + 8)
                     || (sub_1CBC5BEAC(&v1224, v887) & 1) == 0)
              {
LABEL_1457:
                LODWORD(v1188[0]) = 1;
                __src = 0;
                if (sub_1CCABD6F0((uint64_t)&v1205, (unint64_t *)&__src))
                {
LABEL_1458:
                  char v104 = 0;
                  int8x8_t IntegerValue = (int8x8_t)v1220;
                  goto LABEL_1490;
                }
                if (LODWORD(v1188[0]) > 0x40)
                {
                  unint64_t v900 = ((unint64_t)LODWORD(v1188[0]) + 63) >> 6;
                  v901 = (uint64_t *)__src;
                  unint64_t v895 = v1212;
                  v902 = (uint64_t *)__src;
                  int v903 = (uint64_t *)v1212;
                  unint64_t v904 = v900;
                  while (1)
                  {
                    uint64_t v906 = *v902++;
                    uint64_t v905 = v906;
                    uint64_t v907 = *v903++;
                    if ((v905 & ~v907) != 0) {
                      break;
                    }
                    if (!--v904) {
                      goto LABEL_1469;
                    }
                  }
                  uint64_t v896 = v1220;
                  int v897 = *((unsigned __int8 *)v1220 + 16);
                  if (v897 == 41) {
                    goto LABEL_1478;
                  }
                  int v910 = 0;
                  int64_t v911 = ((unint64_t)LODWORD(v1188[0]) + 63) >> 6;
                  do
                  {
                    BOOL v24 = v911-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v912 = *((void *)__src + v911);
                    v910 += __clz(v912);
                  }
                  while (!v912);
                  unsigned int v913 = LODWORD(v1188[0]) | 0xFFFFFFC0;
                  if (((uint64_t)v1188[0] & 0x3F) == 0) {
                    unsigned int v913 = 0;
                  }
                  if (v910 + v913 == LODWORD(v1188[0]) - 1)
                  {
LABEL_1478:
                    unsigned int v914 = (uint64_t *)v1216;
                    while (1)
                    {
                      uint64_t v916 = *v901++;
                      uint64_t v915 = v916;
                      uint64_t v917 = *v914++;
                      if ((v915 & ~v917) != 0) {
                        break;
                      }
                      if (!--v900) {
                        goto LABEL_1464;
                      }
                    }
                  }
                }
                else
                {
                  unint64_t v895 = v1212;
                  if (((unint64_t)__src & ~v1212) == 0)
                  {
LABEL_1469:
                    int v908 = *((_DWORD *)v1220 + 5);
                    if ((v908 & 0x40000000) != 0) {
                      int v909 = (int8x8_t *)*((void *)v1220 - 1);
                    }
                    else {
                      int v909 = (int8x8_t *)((char *)v1220 - 32 * (v908 & 0x7FFFFFF));
                    }
                    char v104 = 0;
                    int8x8_t IntegerValue = *v909;
                    goto LABEL_1490;
                  }
                  uint64_t v896 = v1220;
                  int v897 = *((unsigned __int8 *)v1220 + 16);
                  if ((__src == (void *)1 || v897 == 41) && ((unint64_t)__src & ~v1216) == 0)
                  {
LABEL_1464:
                    int v898 = *((_DWORD *)v896 + 5);
                    if ((v898 & 0x40000000) != 0) {
                      v899 = (int8x8_t *)*((void *)v896 - 1);
                    }
                    else {
                      v899 = (int8x8_t *)((char *)v896 - 32 * (v898 & 0x7FFFFFF));
                    }
                    char v104 = 0;
                    int8x8_t IntegerValue = v899[4];
                    goto LABEL_1490;
                  }
                }
                unsigned int v918 = *((unsigned __int8 *)v896 + 17);
                unsigned int v1182 = v1213;
                if (v1213 > 0x40) {
                  operator new[]();
                }
                unint64_t v1181 = v895;
                unsigned int v1184 = v1215;
                if (v1215 > 0x40) {
                  operator new[]();
                }
                unint64_t v1183 = v1214;
                llvm::KnownBits::computeForAddSub(v897 == 41, (v918 >> 2) & 1, (uint64_t)&v1216, (uint64_t)&v1181, (uint64_t)&p_src);
                if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                  ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
                }
                *a4 = p_src;
                a4[1].i32[0] = (int)v1224;
                LODWORD(v1224) = 0;
                if (a4[3].i32[0] >= 0x41u && *(void *)v1170)
                {
                  MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
                  unsigned int v1025 = v1224;
                  a4[2] = v1225;
                  a4[3].i32[0] = (int)v1226;
                  LODWORD(v1226) = 0;
                  if (v1025 >= 0x41 && *(void *)&p_src) {
                    MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
                  }
                }
                else
                {
                  a4[2] = v1225;
                  a4[3].i32[0] = (int)v1226;
                  LODWORD(v1226) = 0;
                }
                if (v1184 >= 0x41 && v1183) {
                  MEMORY[0x1D25D9CB0](v1183, 0x1000C8000313F17);
                }
                if (v1182 >= 0x41 && v1181) {
                  MEMORY[0x1D25D9CB0](v1181, 0x1000C8000313F17);
                }
                char v104 = 1;
LABEL_1490:
                if (LODWORD(v1188[0]) >= 0x41 && __src) {
LABEL_1492:
                }
                  MEMORY[0x1D25D9CB0]();
LABEL_1585:
                if ((v104 & 1) == 0) {
                  goto LABEL_1601;
                }
                goto LABEL_1586;
              }
              uint64_t v893 = *(void *)v1185;
              int v894 = *(_DWORD *)(*(void *)v1185 + 8);
              if ((v894 & 0xFE) == 0x12) {
                int v894 = *(_DWORD *)(**(void **)(v893 + 16) + 8);
              }
              if (v894 != 269 || v893 != *(void *)v1200[0]) {
                goto LABEL_1457;
              }
              uint64_t v919 = (uint64_t)a1[3];
              uint64_t v1229 = v919;
              long long v1230 = *(_OWORD *)(v919 + 48);
              unint64_t v47 = (unint64_t ***)v1231;
              uint64_t v920 = *(unsigned int *)(v919 + 8);
              if (v920)
              {
                v1038 = (unsigned __int8 **)(*(void *)v919 + 8);
                uint64_t v1039 = 16 * v920;
                while (*((_DWORD *)v1038 - 2))
                {
                  v1038 += 2;
                  v1039 -= 16;
                  if (!v1039) {
                    goto LABEL_1498;
                  }
                }
                v1231[0] = *v1038;
                if (v1231[0])
                {
                  llvm::MetadataTracking::track((uint64_t)v1231, v1231[0], 2);
                  uint64_t v919 = (uint64_t)a1[3];
                }
              }
              else
              {
LABEL_1498:
                v1231[0] = 0;
              }
              int v921 = v1220;
              BOOL v922 = (char *)v1220 + 24;
              *(void *)(v919 + 48) = *((void *)v1220 + 5);
              *(void *)(v919 + 56) = v922;
              unsigned int v923 = (void *)*((void *)v921 + 6);
              __src = v923;
              if (v923)
              {
                llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v923, 2);
                unsigned int v924 = __src;
              }
              else
              {
                unsigned int v924 = 0;
              }
              sub_1CB8461A4(v919, 0, (uint64_t)v924);
              if (!__src) {
                goto LABEL_1502;
              }
              int v1026 = *(unsigned __int8 *)__src;
              if ((v1026 - 4) > 0x1E)
              {
                if ((v1026 - 3) >= 0xFFFFFFFE) {
                  uint64_t v1037 = __src;
                }
                else {
                  uint64_t v1037 = 0;
                }
                if ((v1026 - 3) < 0xFFFFFFFE)
                {
                  if (v1026 == 3) {
                    *((void *)__src + 1) = 0;
                  }
                  goto LABEL_1502;
                }
                unint64_t v1028 = (unint64_t)v1037 + 8;
              }
              else if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3) {
                     || (uint64_t v1027 = *((void *)__src + 2), (v1027 & 4) == 0)
              }
                     || (unint64_t v1028 = v1027 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
LABEL_1502:
                uint64_t v925 = (uint64_t)a1[3];
                LOWORD(v1227) = 257;
                v926 = sub_1CB844AF4(v925, (void *)v1185, (uint64_t)v1200[0], (uint64_t)&p_src);
                int8x8_t IntegerValue = (int8x8_t)v926;
                v927 = a1[3];
                __int16 v1190 = 257;
                if (*(void *)v926 != v16)
                {
                  if (*((unsigned __int8 *)v926 + 16) <= 0x14u)
                  {
                    int8x8_t IntegerValue = (int8x8_t)(*(uint64_t (**)(unint64_t *, uint64_t, llvm::Instruction *, uint64_t))(*v927[9] + 224))(v927[9], 40, v926, v16);
                    if (IntegerValue) {
                      BOOL v943 = *(unsigned __int8 *)(*(void *)&IntegerValue + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v943 = 0;
                    }
                    if (v943)
                    {
                      (*(void (**)(unint64_t *, int8x8_t, void **, unint64_t *, unint64_t *))(*v927[10] + 16))(v927[10], IntegerValue, &__src, v927[6], v927[7]);
                      uint64_t v944 = *((unsigned int *)v927 + 2);
                      if (v944)
                      {
                        v945 = *v927;
                        v946 = &v945[2 * v944];
                        do
                        {
                          llvm::Instruction::setMetadata(*(llvm::Instruction **)&IntegerValue, *(_DWORD *)v945, (llvm::MDNode *)v945[1]);
                          v945 += 2;
                        }
                        while (v945 != v946);
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v1227) = 257;
                    int8x8_t IntegerValue = (int8x8_t)llvm::CastInst::Create(40, (uint64_t)v926, v16, (const char **)&p_src, 0);
                    (*(void (**)(unint64_t *, int8x8_t, void **, unint64_t *, unint64_t *))(*v927[10] + 16))(v927[10], IntegerValue, &__src, v927[6], v927[7]);
                    uint64_t v928 = *((unsigned int *)v927 + 2);
                    if (v928)
                    {
                      v929 = *v927;
                      v930 = &v929[2 * v928];
                      do
                      {
                        llvm::Instruction::setMetadata(*(llvm::Instruction **)&IntegerValue, *(_DWORD *)v929, (llvm::MDNode *)v929[1]);
                        v929 += 2;
                      }
                      while (v929 != v930);
                    }
                  }
                }
LABEL_1225:
                BOOL v813 = (unint64_t **)v1229;
                if ((void)v1230)
                {
                  sub_1CBF5385C(v1229, v1230, *((uint64_t *)&v1230 + 1));
                  BOOL v813 = (unint64_t **)v1229;
                }
                else
                {
                  *(void *)(v1229 + 48) = 0;
                  v813[7] = 0;
                }
                __src = v1231[0];
                if (v1231[0])
                {
                  llvm::MetadataTracking::track((uint64_t)&__src, v1231[0], 2);
                  v814 = __src;
                }
                else
                {
                  v814 = 0;
                }
                sub_1CB8461A4((uint64_t)v813, 0, (uint64_t)v814);
                if (!__src) {
                  goto LABEL_1231;
                }
                int v1015 = *(unsigned __int8 *)__src;
                if ((v1015 - 4) > 0x1E)
                {
                  if ((v1015 - 3) >= 0xFFFFFFFE) {
                    BOOL v1034 = __src;
                  }
                  else {
                    BOOL v1034 = 0;
                  }
                  if ((v1015 - 3) < 0xFFFFFFFE)
                  {
                    if (v1015 == 3) {
                      *((void *)__src + 1) = 0;
                    }
LABEL_1231:
                    int v715 = v1231[0];
                    if (!v1231[0]) {
                      goto LABEL_1601;
                    }
                    goto LABEL_1232;
                  }
                  unint64_t v1017 = (unint64_t)v1034 + 8;
                }
                else
                {
                  if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3)) {
                    goto LABEL_1231;
                  }
                  uint64_t v1016 = *((void *)__src + 2);
                  if ((v1016 & 4) == 0) {
                    goto LABEL_1231;
                  }
                  unint64_t v1017 = v1016 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1017) {
                    goto LABEL_1231;
                  }
                }
                int8x8_t p_src = (int8x8_t)&__src;
                sub_1CC5FA668(v1017 + 16, &p_src);
                goto LABEL_1231;
              }
              int8x8_t p_src = (int8x8_t)&__src;
              sub_1CC5FA668(v1028 + 16, &p_src);
              goto LABEL_1502;
            case '+':
              goto LABEL_1457;
            case '-':
              LODWORD(v1188[0]) = 1;
              __src = 0;
              if (sub_1CCABD6F0((uint64_t)&v1205, (unint64_t *)&__src)) {
                goto LABEL_1458;
              }
              uint64_t v120 = v15[1].u32[0];
              if (v120 > 0x40)
              {
                int v241 = 0;
                unint64_t v242 = (unint64_t)(v120 + 63) >> 6;
                uint64_t v243 = (int8x8_t *)*v15;
                do
                {
                  int8x8_t v244 = *v243++;
                  uint8x8_t v245 = (uint8x8_t)vcnt_s8(v244);
                  v245.i16[0] = vaddlv_u8(v245);
                  v241 += v245.i32[0];
                  --v242;
                }
                while (v242);
                if (v241 != 1) {
                  goto LABEL_643;
                }
                int8x8_t IntegerValue = (int8x8_t)llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v15);
              }
              else
              {
                uint8x8_t v121 = (uint8x8_t)vcnt_s8(*v15);
                v121.i16[0] = vaddlv_u8(v121);
                if (v121.u32[0] != 1) {
                  goto LABEL_643;
                }
                unsigned int v122 = __clz(__rbit64((unint64_t)*v15));
                if (v120 >= v122) {
                  int8x8_t IntegerValue = (int8x8_t)v122;
                }
                else {
                  int8x8_t IntegerValue = (int8x8_t)v120;
                }
              }
              uint64_t v1229 = 0;
              int v246 = *((_DWORD *)v1220 + 5);
              if ((v246 & 0x40000000) != 0) {
                uint64_t v247 = (char *)*((void *)v1220 - 1);
              }
              else {
                uint64_t v247 = (char *)v1220 - 32 * (v246 & 0x7FFFFFF);
              }
              uint64_t v314 = (unsigned __int8 *)*((void *)v247 + 4);
              int8x8_t p_src = (int8x8_t)&v1229;
              v1224 = 0;
              if (sub_1CBF528D8((uint64_t)&p_src, v314))
              {
                unsigned int v315 = *(_DWORD *)(v1229 + 8);
                if (v315 > 0x40)
                {
                  unsigned int v317 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1229);
                }
                else
                {
                  unsigned int v316 = __clz(__rbit64(*(void *)v1229));
                  unsigned int v317 = v315 >= v316 ? v316 : *(_DWORD *)(v1229 + 8);
                }
                if (v317 == IntegerValue.i32[0])
                {
                  BOOL v434 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1220, IntegerValue.u32[0], 0);
                  int v435 = *((_DWORD *)v1220 + 5);
                  if ((v435 & 0x40000000) != 0) {
                    BOOL v436 = (void **)*((void *)v1220 - 1);
                  }
                  else {
                    BOOL v436 = (void **)((char *)v1220 - 32 * (v435 & 0x7FFFFFF));
                  }
                  uint64_t v534 = *v436;
                  LOWORD(v1227) = 257;
                  char v535 = 25;
LABEL_852:
                  uint64_t v557 = llvm::BinaryOperator::Create(v535, v534, (uint64_t)v434, (const char **)&p_src, 0);
                  int8x8_t IntegerValue = (int8x8_t)sub_1CC9D2AB4((uint64_t)a1, v557, (uint64_t)v1220);
                  char v104 = 0;
                  goto LABEL_1490;
                }
              }
LABEL_643:
              int v437 = *((_DWORD *)v1220 + 5);
              if ((v437 & 0x40000000) != 0) {
                unint64_t v438 = (void *)*((void *)v1220 - 1);
              }
              else {
                unint64_t v438 = (void *)((char *)v1220 - 32 * (v437 & 0x7FFFFFF));
              }
              if (*v438 == v438[4])
              {
                uint64_t v441 = v15[1].u32[0];
                uint64_t v442 = v15;
                if (v441 >= 0x41)
                {
                  int v443 = 0;
                  int64_t v444 = (unint64_t)(v441 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v444-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v445 = *(void *)(*(void *)v15 + 8 * v444);
                    v443 += __clz(v445);
                  }
                  while (!v445);
                  int v446 = v441 | 0xFFFFFFC0;
                  if ((v441 & 0x3F) == 0) {
                    int v446 = 0;
                  }
                  if ((v441 - v443 - v446) > 0x40) {
                    goto LABEL_647;
                  }
                  uint64_t v442 = (int8x8_t *)*v15;
                }
                if (*(void *)v442 <= 3uLL)
                {
                  BOOL v434 = llvm::ConstantInt::get((llvm::ConstantInt *)v16, 1uLL, 0);
                  int v447 = *((_DWORD *)v1220 + 5);
                  if ((v447 & 0x40000000) != 0) {
                    unsigned int v448 = (void **)*((void *)v1220 - 1);
                  }
                  else {
                    unsigned int v448 = (void **)((char *)v1220 - 32 * (v447 & 0x7FFFFFF));
                  }
                  uint64_t v534 = *v448;
                  LOWORD(v1227) = 257;
                  char v535 = 28;
                  goto LABEL_852;
                }
              }
LABEL_647:
              v439 = (llvm::APInt **)a1[7];
              uint64_t v440 = a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (!v1220 || *((unsigned __int8 *)v1220 + 16) < 0x1Cu || (unsigned int v6 = v1220, !*((void *)v1220 + 5))) {
                  unsigned int v6 = 0;
                }
              }
              int8x8_t p_src = (int8x8_t)a1[10];
              v1224 = v439;
              int8x8_t v1225 = (int8x8_t)v6;
              int64_t v1226 = v440;
              uint64_t v1227 = 0;
              char v104 = 1;
              char v1228 = 1;
              sub_1CC15FBF8((uint64_t)v1220, a4, v1222, (const llvm::DataLayout **)&p_src);
              goto LABEL_1490;
            case '/':
              __src = 0;
              int v115 = *((_DWORD *)v31 + 5);
              if ((v115 & 0x40000000) != 0) {
                unsigned int v116 = (char *)*((void *)v31 - 1);
              }
              else {
                unsigned int v116 = (char *)v31 - 32 * (v115 & 0x7FFFFFF);
              }
              BOOL v157 = (unsigned __int8 *)*((void *)v116 + 4);
              int8x8_t p_src = (int8x8_t)&__src;
              v1224 = 0;
              int v158 = sub_1CBF528D8((uint64_t)&p_src, v157);
              uint64_t v119 = v1220;
              if (!v158) {
                goto LABEL_541;
              }
              if ((*((unsigned char *)v1220 + 17) & 2) != 0) {
                goto LABEL_1586;
              }
              unsigned int v159 = *((_DWORD *)__src + 2);
              if (v159 > 0x40)
              {
                int8x8_t IntegerValue = (int8x8_t)llvm::APInt::countTrailingZerosSlowCase((unint64_t **)__src);
              }
              else
              {
                unsigned int v160 = __clz(__rbit64(*(void *)__src));
                if (v159 >= v160) {
                  int8x8_t IntegerValue = (int8x8_t)v160;
                }
                else {
                  int8x8_t IntegerValue = (int8x8_t)v159;
                }
              }
              unsigned int v310 = v1221;
              LODWORD(v1224) = v1221;
              if (v1221 >= 0x41) {
                operator new[]();
              }
              unint64_t v311 = 0;
              int8x8_t p_src = 0;
              if (IntegerValue.i32[0] != v1221)
              {
                if (IntegerValue.i32[0] > 0x3Fu)
                {
                  llvm::APInt::setBitsSlowCase(&p_src, IntegerValue.u32[0], v1221);
                }
                else
                {
                  unint64_t v311 = 0xFFFFFFFFFFFFFFFFLL >> (IntegerValue.i8[0] - v1221) << IntegerValue.i8[0];
                  int8x8_t p_src = (int8x8_t)v311;
                }
              }
              BOOL v312 = sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&p_src);
              BOOL v153 = v312;
              if (v312)
              {
                int8x8_t IntegerValue = (int8x8_t)v1220;
              }
              else
              {
                if (v1217 > 0x40)
                {
                  int v313 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v1216);
                }
                else if (v1217)
                {
                  int v313 = __clz(~(v1216 << -(char)v1217));
                }
                else
                {
                  int v313 = 0;
                }
                unsigned int v432 = v313 + IntegerValue.i32[0];
                if (v313 + IntegerValue.i32[0] >= v1221) {
                  unsigned int v432 = v1221;
                }
                if (v432)
                {
                  this = (int8x8_t *)a4[1].u32[0];
                  unsigned int v433 = this - v432;
                  if (this > 0x40 || v433 > 0x3F) {
                    llvm::APInt::setBitsSlowCase(a4, v433, this);
                  }
                  else {
                    *(void *)a4 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v432 << v433;
                  }
                }
              }
              if (v310 >= 0x41 && v311) {
                goto LABEL_398;
              }
              goto LABEL_399;
            case '2':
              LODWORD(v1224) = v11;
              LODWORD(v1226) = v11;
              int8x8_t p_src = 0;
              int8x8_t v1225 = 0;
              LODWORD(v1188[0]) = v11;
              if (v11) {
                int v103 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v11);
              }
              else {
                int v103 = 0;
              }
              __src = v103;
              if (sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&__src)
                || sub_1CCABCFBC(a1, (uint64_t)v1220, 1u, (uint64_t *)&__src))
              {
                char v104 = 0;
                int8x8_t IntegerValue = (int8x8_t)v1220;
                goto LABEL_1578;
              }
              if (v1224 > 0x40)
              {
                int v240 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&p_src);
              }
              else if (v1224)
              {
                int v240 = __clz(~(*(void *)&p_src << -(char)v1224));
              }
              else
              {
                int v240 = 0;
              }
              uint64_t v308 = v1221;
              unsigned int v1175 = v1221;
              if (v1221 > 0x40) {
                operator new[]();
              }
              int8x8_t IntegerValue = 0;
              int8x8_t v1174 = 0;
              if (!v240) {
                goto LABEL_1570;
              }
              unsigned int v309 = v1221 - v240;
              if (v309 > 0x3F)
              {
                llvm::APInt::setBitsSlowCase(&v1174, v309, v1221);
LABEL_1570:
                if (v308 > 0x40)
                {
                  v961 = (uint64_t *)*v15;
                  unint64_t v962 = (unint64_t)(v308 + 63) >> 6;
                  v963 = 0;
                  do
                  {
                    uint64_t v964 = *v961++;
                    *v963++ &= v964;
                    --v962;
                  }
                  while (v962);
LABEL_1574:
                  unsigned int v1175 = 0;
                  if (a4[1].i32[0] > 0x40u && *(void *)a4) {
                    ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
                  }
                  *a4 = IntegerValue;
                  a4[1].i32[0] = v308;
                  char v104 = 1;
LABEL_1578:
                  if (LODWORD(v1188[0]) >= 0x41 && v103 != 0) {
                    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
                  }
                  if (v1226 >= 0x41 && *(void *)&v1225) {
                    MEMORY[0x1D25D9CB0](*(void *)&v1225, 0x1000C8000313F17);
                  }
                  if (v1224 >= 0x41 && *(void *)&p_src) {
                    goto LABEL_1492;
                  }
                  goto LABEL_1585;
                }
              }
              else
              {
                int8x8_t IntegerValue = (int8x8_t)(0xFFFFFFFFFFFFFFFFLL >> -(char)v240 << v309);
              }
              *(void *)&IntegerValue &= *(void *)v15;
              int8x8_t v1174 = IntegerValue;
              goto LABEL_1574;
            case '3':
              uint64_t v1229 = 0;
              int v105 = *((_DWORD *)v31 + 5);
              if ((v105 & 0x40000000) != 0) {
                uint64_t v106 = (char *)*((void *)v31 - 1);
              }
              else {
                uint64_t v106 = (char *)v31 - 32 * (v105 & 0x7FFFFFF);
              }
              uint64_t v154 = (unsigned __int8 *)*((void *)v106 + 4);
              int8x8_t p_src = (int8x8_t)&v1229;
              v1224 = 0;
              if (!sub_1CBF528D8((uint64_t)&p_src, v154)) {
                goto LABEL_768;
              }
              int v155 = (const llvm::APInt *)v1229;
              unsigned int v156 = *(_DWORD *)(v1229 + 8);
              if (!v156) {
                goto LABEL_1586;
              }
              if (v156 <= 0x40)
              {
                if (*(void *)v1229 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v156) {
                  goto LABEL_1586;
                }
LABEL_402:
                sub_1CBF71A98(v155, (llvm::APInt *)&p_src);
                unsigned int v270 = v1224;
                if (v1224 > 0x40)
                {
                  uint64_t v411 = 0;
                  int v412 = 0;
                  do
                  {
                    uint8x8_t v413 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)&p_src + v411));
                    v413.i16[0] = vaddlv_u8(v413);
                    v412 += v413.i32[0];
                    v411 += 8;
                  }
                  while (((((unint64_t)v1224 + 63) >> 3) & 0x3FFFFFF8) != v411);
                  if (v412 == 1)
                  {
                    uint64_t v414 = v15[1].u32[0];
                    if (v414 > 0x40)
                    {
                      unint64_t v982 = ((unint64_t)(v414 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v982) {
                          goto LABEL_1642;
                        }
                        unint64_t v983 = *(void *)(*(void *)v15 - 8 + v982);
                        unint64_t v984 = *(void *)(*(void *)&p_src - 8 + v982);
                        v982 -= 8;
                      }
                      while (v983 == v984);
                      if (v983 <= v984) {
                        goto LABEL_607;
                      }
                    }
                    else if (*(void *)v15 < *(void *)&p_src)
                    {
                      goto LABEL_607;
                    }
LABEL_1642:
                    unsigned int v1180 = v1224;
                    operator new[]();
                  }
                  MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
                }
                else if (*(void *)&p_src && (*(void *)&p_src & (*(void *)&p_src - 1)) == 0)
                {
                  uint64_t v271 = v15[1].u32[0];
                  if (v271 > 0x40)
                  {
                    unint64_t v1022 = ((unint64_t)(v271 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v1022) {
                        goto LABEL_407;
                      }
                      unint64_t v1023 = *(void *)(*(void *)v15 - 8 + v1022);
                      unint64_t v1024 = *(void *)(*(void *)&p_src - 8 + v1022);
                      v1022 -= 8;
                    }
                    while (v1023 == v1024);
                    if (v1023 > v1024)
                    {
LABEL_407:
                      unsigned int v1180 = v1224;
                      int8x8_t v1179 = p_src;
                      llvm::APInt::operator-=((uint64_t)&v1179, 1uLL);
                      uint64_t v985 = v1180;
                      int8x8_t v986 = v1179;
                      unsigned int v1180 = 0;
                      if (v1221 > 0x40) {
                        operator new[]();
                      }
                      LODWORD(v1188[0]) = v1221;
                      __src = (void *)((1 << (v1221 - 1)) | *(void *)&v1179);
                      if (sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&__src))
                      {
                        int v681 = 1;
                        int8x8_t IntegerValue = (int8x8_t)v1220;
                        goto LABEL_1692;
                      }
                      unsigned int v987 = v1217;
                      if (v1217 > 0x40) {
                        operator new[]();
                      }
                      int8x8_t v988 = (int8x8_t)(v1216 & *(void *)&v986);
                      if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
                      }
                      *a4 = v988;
                      a4[1].i32[0] = v987;
                      unsigned int v989 = v1219;
                      if (v1219 > 0x40) {
                        operator new[]();
                      }
                      int8x8_t v990 = (int8x8_t)(v1218 & *(void *)&v986);
                      if (a4[3].i32[0] >= 0x41u && *(void *)v1170) {
                        MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
                      }
                      int8x8_t IntegerValue = (int8x8_t)&v1218;
                      a4[2] = v990;
                      a4[3].i32[0] = v989;
                      unsigned int v991 = v1217 - 1;
                      v992 = (int8x8_t *)&v1216;
                      if (v1217 >= 0x41) {
                        v992 = (int8x8_t *)(v1216 + 8 * (v991 >> 6));
                      }
                      if ((*(unint64_t *)v992 >> v991))
                      {
                        unsigned int v1178 = v985;
                        int8x8_t v993 = v986;
                        int v994 = v985;
                        if (v985 >= 0x41) {
                          goto LABEL_1662;
                        }
                      }
                      else
                      {
                        if (v985 > 0x40)
                        {
                          uint64_t v1009 = 0;
                          do
                          {
                            if ((*(void *)(*(void *)&v986 + v1009) & ~*(void *)(v1216 + v1009)) != 0) {
                              goto LABEL_1679;
                            }
                            v1009 += 8;
                          }
                          while ((((unint64_t)(v985 + 63) >> 3) & 0x3FFFFFF8) != v1009);
                          unsigned int v1178 = v985;
LABEL_1662:
                          operator new[]();
                        }
                        if ((*(void *)&v986 & ~v1216) != 0)
                        {
LABEL_1679:
                          unsigned int v1004 = v1219 - 1;
                          if (v1219 >= 0x41) {
                            int v1005 = (unint64_t *)(v1218 + 8 * (v1004 >> 6));
                          }
                          else {
                            int v1005 = &v1218;
                          }
                          if ((*v1005 >> v1004))
                          {
                            if (v985 > 0x40)
                            {
                              uint64_t v1008 = 0;
                              do
                              {
                                if ((*(void *)(v1218 + v1008) & *(void *)(*(void *)&v986 + v1008)) != 0)
                                {
                                  int v1176 = v985;
                                  operator new[]();
                                }
                                v1008 += 8;
                              }
                              while ((((unint64_t)(v985 + 63) >> 3) & 0x3FFFFFF8) != v1008);
                            }
                            else if ((*(void *)&v986 & v1218) != 0)
                            {
                              unint64_t v1006 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v985;
                              if (!v985) {
                                unint64_t v1006 = 0;
                              }
                              unint64_t v1007 = v1006 & ~*(void *)&v986;
                              int v1176 = 0;
                              uint64_t v1010 = a4[3].u32[0];
                              if (v1010 > 0x40)
                              {
                                uint64_t v1011 = *(void **)v1170;
                                unint64_t v1012 = (unint64_t)(v1010 + 63) >> 6;
                                uint64_t v1013 = (uint64_t *)v1007;
                                do
                                {
                                  uint64_t v1014 = *v1013++;
                                  *v1011++ |= v1014;
                                  --v1012;
                                }
                                while (v1012);
                              }
                              else
                              {
                                *(void *)v1170 |= v1007;
                              }
                              int v681 = 2;
                              goto LABEL_1692;
                            }
                          }
                          int v681 = 2;
LABEL_1692:
                          if (LODWORD(v1188[0]) >= 0x41 && __src) {
                            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                          }
                          if (v985 >= 0x41 && *(void *)&v986) {
                            MEMORY[0x1D25D9CB0](*(void *)&v986, 0x1000C8000313F17);
                          }
                          unsigned int v270 = v1224;
LABEL_1699:
                          if (v270 > 0x40 && *(void *)&p_src) {
                            MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
                          }
                          if (v681 != 2) {
                            goto LABEL_1601;
                          }
                          goto LABEL_1586;
                        }
                        unsigned int v1178 = v985;
                        int8x8_t v993 = v986;
                        int v994 = v985;
                      }
                      uint64_t v995 = ~*(void *)&v993;
                      if (v994) {
                        unint64_t v996 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v994;
                      }
                      else {
                        unint64_t v996 = 0;
                      }
                      unint64_t v997 = v996 & v995;
                      unint64_t v1177 = v996 & v995;
                      unsigned int v998 = v1178;
                      unsigned int v1178 = 0;
                      uint64_t v999 = a4[1].u32[0];
                      if (v999 > 0x40)
                      {
                        v1000 = (void *)*a4;
                        unint64_t v1001 = (unint64_t)(v999 + 63) >> 6;
                        int v1002 = (uint64_t *)v997;
                        do
                        {
                          uint64_t v1003 = *v1002++;
                          *v1000++ |= v1003;
                          --v1001;
                        }
                        while (v1001);
                      }
                      else
                      {
                        *(void *)a4 |= v997;
                      }
                      if (v998 >= 0x41 && v997) {
                        MEMORY[0x1D25D9CB0](v997, 0x1000C8000313F17);
                      }
                      if (v1178 >= 0x41 && v1177) {
                        MEMORY[0x1D25D9CB0](v1177, 0x1000C8000313F17);
                      }
                      goto LABEL_1679;
                    }
                  }
                  else if (*(void *)v15 >= *(void *)&p_src)
                  {
                    goto LABEL_407;
                  }
LABEL_607:
                  int v415 = *((_DWORD *)v1220 + 5);
                  if ((v415 & 0x40000000) != 0) {
                    unsigned int v416 = (int8x8_t *)*((void *)v1220 - 1);
                  }
                  else {
                    unsigned int v416 = (int8x8_t *)((char *)v1220 - 32 * (v415 & 0x7FFFFFF));
                  }
                  int8x8_t IntegerValue = *v416;
                  int v681 = 1;
                  goto LABEL_1699;
                }
LABEL_768:
                unsigned int v506 = v15[1].u32[0];
                unsigned int v507 = v506 - 1;
                unsigned int v508 = v15;
                if (v506 >= 0x41) {
                  unsigned int v508 = (int8x8_t *)(*(void *)v15 + 8 * (v507 >> 6));
                }
                if ((*(unint64_t *)v508 >> v507))
                {
                  int v509 = *((_DWORD *)v1220 + 5);
                  if ((v509 & 0x40000000) != 0) {
                    int v510 = (uint64_t *)*((void *)v1220 - 1);
                  }
                  else {
                    int v510 = (uint64_t *)((char *)v1220 - 32 * (v509 & 0x7FFFFFF));
                  }
                  uint64_t v511 = *v510;
                  long long v512 = (llvm::APInt **)a1[7];
                  unint64_t v513 = a1[9];
                  if (!v6 || !*((void *)v6 + 5))
                  {
                    BOOL v870 = v511 && *(unsigned __int8 *)(v511 + 16) >= 0x1Cu;
                    if (!v870 || (unsigned int v6 = (llvm::Instruction *)v511, !*(void *)(v511 + 40))) {
                      unsigned int v6 = 0;
                    }
                  }
                  int8x8_t p_src = (int8x8_t)a1[10];
                  v1224 = v512;
                  int8x8_t v1225 = (int8x8_t)v6;
                  int64_t v1226 = v513;
                  uint64_t v1227 = 0;
                  char v1228 = 1;
                  sub_1CC15FBF8(v511, (int8x8_t *)&v1216, v1222 + 1, (const llvm::DataLayout **)&p_src);
                  if (v1217 >= 0x41) {
                    uint64_t v514 = (int8x8_t *)(v1216 + 8 * ((v1217 - 1) >> 6));
                  }
                  else {
                    uint64_t v514 = (int8x8_t *)&v1216;
                  }
                  if ((*(unint64_t *)v514 >> (v1217 - 1)))
                  {
                    unsigned int v515 = a4[1].u32[0];
                    uint64_t v516 = 1 << (v515 - 1);
                    if (v515 >= 0x41) {
                      int64_t v517 = (int8x8_t *)(*(void *)a4 + 8 * ((v515 - 1) >> 6));
                    }
                    else {
                      int64_t v517 = a4;
                    }
                    *(void *)v517 |= v516;
                  }
                }
                goto LABEL_1586;
              }
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1229) != v156) {
                goto LABEL_402;
              }
              goto LABEL_1586;
            case '5':
              int64_t v1185 = 0;
              int v123 = *((_DWORD *)v31 + 5);
              if ((v123 & 0x40000000) != 0) {
                int v124 = (char *)*((void *)v31 - 1);
              }
              else {
                int v124 = (char *)v31 - 32 * (v123 & 0x7FFFFFF);
              }
              unsigned int v161 = (unsigned __int8 *)*((void *)v124 + 4);
              int8x8_t p_src = (int8x8_t)&v1185;
              v1224 = 0;
              if (sub_1CBF528D8((uint64_t)&p_src, v161))
              {
                v1200[0] = 0;
                int v162 = *((_DWORD *)v1220 + 5);
                if ((v162 & 0x40000000) != 0) {
                  unint64_t v163 = (uint64_t *)*((void *)v1220 - 1);
                }
                else {
                  unint64_t v163 = (uint64_t *)((char *)v1220 - 32 * (v162 & 0x7FFFFFF));
                }
                uint64_t v248 = *v163;
                v1224 = v1200;
                int8x8_t v1225 = 0;
                unsigned int v249 = *(unsigned __int8 *)(v248 + 16);
                if (v248 && v249 >= 0x1C)
                {
                  if ((v249 & 0xFE) != 0x36) {
                    goto LABEL_923;
                  }
                  int v250 = *(_DWORD *)(v248 + 20);
                  uint64_t v251 = (v250 & 0x40000000) != 0 ? *(void *)(v248 - 8) : v248 - 32 * (v250 & 0x7FFFFFF);
                  if (!sub_1CBF528D8((uint64_t)&v1224, *(unsigned __int8 **)(v251 + 32))) {
                    goto LABEL_923;
                  }
                }
                else if (v249 != 5 {
                       || (*(_WORD *)(v248 + 18) & 0xFFFE) != 0x1A
                }
                       || (sub_1CBF5295C((uint64_t)&v1224, *(llvm::Constant **)(v248 - 32 * (*(_DWORD *)(v248 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
                {
                  goto LABEL_923;
                }
                int v455 = *((_DWORD *)v1220 + 5);
                unint64_t v1161 = v1220;
                if ((v455 & 0x40000000) != 0) {
                  uint64_t v456 = (size_t *)*((void *)v1220 - 1);
                }
                else {
                  uint64_t v456 = (size_t *)((char *)v1220 - 32 * (v455 & 0x7FFFFFF));
                }
                size_t v1163 = *v456;
                if (!*v456 || *(unsigned __int8 *)(v1163 + 16) < 0x1Cu) {
                  goto LABEL_923;
                }
                int v473 = v1200[0];
                int v474 = (uint64_t **)v1185;
                uint64_t v475 = *(unsigned int *)(v1185 + 8);
                if (v475 > 0x40)
                {
                  int v1117 = 0;
                  int64_t v1118 = (unint64_t)(v475 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v1118-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v1119 = *(void *)(*(void *)v1185 + 8 * v1118);
                    v1117 += __clz(v1119);
                  }
                  while (!v1119);
                  int v1120 = v475 | 0xFFFFFFC0;
                  if ((v475 & 0x3F) == 0) {
                    int v1120 = 0;
                  }
                  if (v1117 + v1120 == v475) {
                    goto LABEL_923;
                  }
                }
                else if (!*(void *)v1185)
                {
                  goto LABEL_923;
                }
                uint64_t v476 = *((unsigned int *)v1200[0] + 2);
                if (v476 > 0x40)
                {
                  int v1121 = 0;
                  int64_t v1122 = (unint64_t)(v476 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v1122-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v1123 = *(void *)(*(void *)v1200[0] + 8 * v1122);
                    v1121 += __clz(v1123);
                  }
                  while (!v1123);
                  int v1124 = v476 | 0xFFFFFFC0;
                  if ((v476 & 0x3F) == 0) {
                    int v1124 = 0;
                  }
                  if (v1121 + v1124 == v476) {
                    goto LABEL_923;
                  }
                }
                else if (!*(void *)v1200[0])
                {
                  goto LABEL_923;
                }
                int v477 = *(_DWORD *)(v1163 + 20);
                if ((v477 & 0x40000000) != 0) {
                  uint64_t v478 = *(int8x8_t **)(v1163 - 8);
                }
                else {
                  uint64_t v478 = (int8x8_t *)(v1163 - 32 * (v477 & 0x7FFFFFF));
                }
                int8x8_t IntegerValue = *v478;
                uint64_t v479 = **(void **)v478;
                if ((*(_DWORD *)(v479 + 8) & 0xFE) == 0x12) {
                  uint64_t v479 = **(void **)(v479 + 16);
                }
                unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v479);
                if (v475 >= 0x41)
                {
                  int v1125 = 0;
                  int64_t v1126 = (unint64_t)(v475 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v1126-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v1127 = (*v474)[v1126];
                    v1125 += __clz(v1127);
                  }
                  while (!v1127);
                  int v1128 = v475 | 0xFFFFFFC0;
                  if ((v475 & 0x3F) == 0) {
                    int v1128 = 0;
                  }
                  if ((v475 - v1125 - v1128) > 0x40) {
                    goto LABEL_923;
                  }
                }
                int v480 = *v474;
                if (v475 < 0x41) {
                  int v480 = (uint64_t *)v474;
                }
                uint64_t v481 = *v480;
                if (*v480 >= (unint64_t)PrimitiveSizeInBits) {
                  goto LABEL_923;
                }
                if (v476 >= 0x41)
                {
                  int v1129 = 0;
                  int64_t v1130 = (unint64_t)(v476 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v1130-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v1131 = *(void *)(*(void *)v473 + 8 * v1130);
                    v1129 += __clz(v1131);
                  }
                  while (!v1131);
                  int v1132 = v476 | 0xFFFFFFC0;
                  if ((v476 & 0x3F) == 0) {
                    int v1132 = 0;
                  }
                  if ((v476 - v1129 - v1132) > 0x40) {
                    goto LABEL_923;
                  }
                }
                uint64_t v482 = *(size_t **)v473;
                if (v476 < 0x41) {
                  uint64_t v482 = (size_t *)v473;
                }
                size_t __n = *v482;
                if (*v482 >= PrimitiveSizeInBits) {
                  goto LABEL_923;
                }
                uint64_t v483 = a4[3].u32[0];
                if (v483 > 0x40) {
                  bzero(*(void **)v1170, ((unint64_t)(v483 + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  *(void *)v1170 = 0;
                }
                unsigned int v484 = v481 - 1;
                if (v481 != 1)
                {
                  if (v484 > 0x40)
                  {
                    llvm::APInt::setBitsSlowCase(a4, 0, v484);
                  }
                  else
                  {
                    unint64_t v485 = 0xFFFFFFFFFFFFFFFFLL >> (65 - v481);
                    if (a4[1].i32[0] > 0x40u) {
                      **(void **)a4 |= v485;
                    }
                    else {
                      *(void *)a4 |= v485;
                    }
                  }
                }
                uint64_t v486 = a4[1].u32[0];
                if (v486 > 0x40)
                {
                  uint64_t v1133 = (void *)*a4;
                  v1134 = (uint64_t *)*v15;
                  unint64_t v1135 = (unint64_t)(v486 + 63) >> 6;
                  do
                  {
                    uint64_t v1136 = *v1134++;
                    *v1133++ &= v1136;
                    --v1135;
                  }
                  while (v1135);
                }
                else
                {
                  *(void *)a4 &= *(void *)v15;
                }
                if (PrimitiveSizeInBits > 0x40) {
                  operator new[]();
                }
                if (PrimitiveSizeInBits) {
                  unint64_t v487 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                }
                else {
                  unint64_t v487 = 0;
                }
                LODWORD(v1188[0]) = PrimitiveSizeInBits;
                __src = (void *)v487;
                if (*(unsigned char *)(v1163 + 16) == 54)
                {
                  unint64_t v488 = v487 >> __n;
                  if (PrimitiveSizeInBits == __n) {
                    unint64_t v488 = 0;
                  }
                  unint64_t v489 = v488 << v481;
                  if (PrimitiveSizeInBits == v481) {
                    unint64_t v489 = 0;
                  }
                  unint64_t v490 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  if (!PrimitiveSizeInBits) {
                    unint64_t v490 = 0;
                  }
                  size_t v1160 = v490 & v489;
                  int v491 = (int)v1188[0];
                  int v492 = __n - v481;
                  if (__n > v481)
                  {
                    LODWORD(v1224) = v1188[0];
                    if (LODWORD(v1188[0]) == v492) {
                      int8x8_t p_src = 0;
                    }
                    else {
                      int8x8_t p_src = (int8x8_t)((unint64_t)__src >> v492);
                    }
                    int __len = 1;
LABEL_753:
                    __src = (void *)p_src;
                    LODWORD(v1188[0]) = v1224;
LABEL_916:
                    if ((*(void *)v15 & v1160) != ((unint64_t)__src & *(void *)v15)) {
                      goto LABEL_920;
                    }
                    if (__n == v481)
                    {
LABEL_921:
                      if (LODWORD(v1188[0]) >= 0x41 && __src) {
                        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                      }
                      if (IntegerValue) {
                        goto LABEL_1601;
                      }
LABEL_923:
                      int v621 = (unint64_t *)v1185;
                      unint64_t v622 = v1221 - 1;
                      uint64_t v623 = *(unsigned int *)(v1185 + 8);
                      if (v623 >= 0x41)
                      {
                        int v624 = 0;
                        int64_t v625 = (unint64_t)(v623 + 63) >> 6;
                        do
                        {
                          BOOL v24 = v625-- < 1;
                          if (v24) {
                            break;
                          }
                          unint64_t v626 = *(void *)(*(void *)v1185 + 8 * v625);
                          v624 += __clz(v626);
                        }
                        while (!v626);
                        int v627 = v623 | 0xFFFFFFC0;
                        if ((v623 & 0x3F) == 0) {
                          int v627 = 0;
                        }
                        if ((v623 - v624 - v627) > 0x40)
                        {
LABEL_933:
                          unsigned int v629 = v15[1].u32[0];
                          LODWORD(v1224) = v629;
                          if (v629 > 0x40) {
                            operator new[]();
                          }
                          if (v629 == v622)
                          {
                            int8x8_t v630 = 0;
                            int8x8_t p_src = 0;
                          }
                          else
                          {
                            int8x8_t v630 = (int8x8_t)(*(unint64_t *)v15 >> v622);
                            int8x8_t p_src = v630;
                          }
                          v631 = v1220;
                          if ((*((unsigned char *)v1220 + 17) & 4) != 0)
                          {
                            if (v622 == -1) {
                              goto LABEL_945;
                            }
                            unsigned int v632 = v629 + ~v622;
                            if (v632 <= 0x3F)
                            {
                              LOBYTE(v633) = ~(_BYTE)v622;
                              goto LABEL_944;
                            }
                          }
                          else
                          {
                            if ((*((unsigned char *)v1220 + 17) & 2) == 0 || !v622)
                            {
LABEL_945:
                              if (sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&p_src))
                              {
                                char v104 = 0;
                                int8x8_t IntegerValue = (int8x8_t)v1220;
                                goto LABEL_1585;
                              }
                              unsigned int v635 = a4[1].u32[0];
                              char v636 = v635 - 1;
                              v637 = (int8x8_t *)(*(void *)a4 + 8 * ((v635 - 1) >> 6));
                              if (v635 < 0x41) {
                                v637 = a4;
                              }
                              int8x8_t v638 = *v637;
                              unsigned int v639 = a4[3].u32[0];
                              char v640 = v639 - 1;
                              v641 = (int8x8_t *)(*(void *)&a4[2] + 8 * ((v639 - 1) >> 6));
                              if (v639 < 0x41) {
                                v641 = a4 + 2;
                              }
                              int8x8_t v642 = *v641;
                              if (v635 > 0x40)
                              {
                                int8x8_t v1168 = *v641;
                                int8x8_t v818 = v638;
                                llvm::APInt::shlSlowCase((llvm::APInt *)a4, v622);
                                int8x8_t v638 = v818;
                                int8x8_t v642 = v1168;
                                unsigned int v639 = a4[3].u32[0];
                              }
                              else
                              {
                                uint64_t v643 = *(void *)a4 << v622;
                                if (v635 == v622) {
                                  uint64_t v643 = 0;
                                }
                                if (v635) {
                                  unint64_t v644 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v635;
                                }
                                else {
                                  unint64_t v644 = 0;
                                }
                                *a4 = (int8x8_t)(v644 & v643);
                              }
                              if (v639 > 0x40)
                              {
                                int8x8_t v1169 = v642;
                                int8x8_t v819 = v638;
                                llvm::APInt::shlSlowCase(v1170, v622);
                                int8x8_t v638 = v819;
                                int8x8_t v642 = v1169;
                                if (!v622) {
                                  goto LABEL_968;
                                }
                              }
                              else
                              {
                                uint64_t v645 = *(void *)v1170 << v622;
                                if (v639 == v622) {
                                  uint64_t v645 = 0;
                                }
                                if (v639) {
                                  unint64_t v646 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v639;
                                }
                                else {
                                  unint64_t v646 = 0;
                                }
                                *(void *)v1170 = v646 & v645;
                                if (!v622)
                                {
LABEL_968:
                                  if ((*((unsigned char *)v631 + 17) & 4) == 0)
                                  {
LABEL_969:
                                    int8x8_t IntegerValue = 0;
                                    char v104 = 1;
                                    goto LABEL_1585;
                                  }
                                  if (((1 << v636) & *(void *)&v638) != 0)
                                  {
                                    unsigned int v648 = a4[1].u32[0];
                                    unsigned int v649 = v648 - 1;
                                    if (v648 < 0x41)
                                    {
                                      uint64_t v650 = a4;
LABEL_1046:
                                      *(void *)v650 |= 1 << v649;
LABEL_1047:
                                      uint64_t v698 = a4[1].u32[0];
                                      if (v698 > 0x40)
                                      {
                                        unint64_t v699 = (unint64_t)(v698 + 63) >> 6;
                                        uint64_t v700 = (uint64_t *)*a4;
                                        uint64_t v701 = (uint64_t *)a4[2];
                                        while (1)
                                        {
                                          uint64_t v703 = *v700++;
                                          uint64_t v702 = v703;
                                          uint64_t v704 = *v701++;
                                          if ((v704 & v702) != 0) {
                                            break;
                                          }
                                          if (!--v699) {
                                            goto LABEL_969;
                                          }
                                        }
                                      }
                                      else if ((*(void *)&a4[2] & *(void *)a4) == 0)
                                      {
                                        goto LABEL_969;
                                      }
                                      int8x8_t IntegerValue = (int8x8_t)llvm::UndefValue::get(*(llvm::UndefValue **)v1220, v634);
                                      char v104 = 0;
                                      goto LABEL_1585;
                                    }
                                    int8x8_t v652 = *a4;
                                  }
                                  else
                                  {
                                    if (((1 << v640) & *(void *)&v642) == 0) {
                                      goto LABEL_1047;
                                    }
                                    unsigned int v651 = a4[3].u32[0];
                                    unsigned int v649 = v651 - 1;
                                    if (v651 < 0x41)
                                    {
                                      uint64_t v650 = a4 + 2;
                                      goto LABEL_1046;
                                    }
                                    int8x8_t v652 = *(int8x8_t *)v1170;
                                  }
                                  uint64_t v650 = (int8x8_t *)(*(void *)&v652 + 8 * (v649 >> 6));
                                  goto LABEL_1046;
                                }
                              }
                              if (v622)
                              {
                                int8x8_t v1167 = v638;
                                if (v622 > 0x40)
                                {
                                  llvm::APInt::setBitsSlowCase(a4, 0, v622);
                                }
                                else
                                {
                                  unint64_t v647 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v622;
                                  if (a4[1].i32[0] > 0x40u) {
                                    **(void **)a4 |= v647;
                                  }
                                  else {
                                    *(void *)a4 |= v647;
                                  }
                                }
                                int8x8_t v638 = v1167;
                              }
                              goto LABEL_968;
                            }
                            unsigned int v632 = v629 - v622;
                            if (v629 - v622 <= 0x3F)
                            {
                              int v633 = -(int)v622;
LABEL_944:
                              int8x8_t p_src = (int8x8_t)(*(void *)&v630 | (0xFFFFFFFFFFFFFFFFLL >> v633 << v632));
                              goto LABEL_945;
                            }
                          }
                          llvm::APInt::setBitsSlowCase(&p_src, v632, v629);
                          goto LABEL_945;
                        }
                        int v621 = *(unint64_t **)v1185;
                      }
                      unint64_t v628 = *v621;
                      if (v628 <= v622) {
                        unint64_t v622 = v628;
                      }
                      goto LABEL_933;
                    }
                    uint64_t v620 = *(void *)(v1163 + 8);
                    if (!v620 || *(void *)(v620 + 8))
                    {
LABEL_920:
                      int8x8_t IntegerValue = 0;
                      goto LABEL_921;
                    }
                    v1137 = **(llvm::ConstantInt ***)&IntegerValue;
                    if (__n >= v481)
                    {
                      v1143 = llvm::ConstantInt::get(v1137, (__n - v481), 0);
                      LOWORD(v1227) = 257;
                      if (__len) {
                        char v1144 = 26;
                      }
                      else {
                        char v1144 = 27;
                      }
                      int v1145 = llvm::BinaryOperator::Create(v1144, *(void **)&IntegerValue, (uint64_t)v1143, (const char **)&p_src, 0);
                      uint64_t v1139 = v1145;
                      if ((*(unsigned char *)(v1163 + 17) & 2) == 0) {
                        goto LABEL_2042;
                      }
                      char v1142 = *((unsigned char *)v1145 + 17) | 2;
                    }
                    else
                    {
                      v1138 = llvm::ConstantInt::get(v1137, (v481 - __n), 0);
                      LOWORD(v1227) = 257;
                      uint64_t v1139 = llvm::BinaryOperator::Create(25, *(void **)&IntegerValue, (uint64_t)v1138, (const char **)&p_src, 0);
                      if (llvm::Instruction::hasNoSignedWrap(v1161)) {
                        char v1140 = 4;
                      }
                      else {
                        char v1140 = 0;
                      }
                      *((unsigned char *)v1139 + 17) = *((unsigned char *)v1139 + 17) & 0xFB | v1140;
                      if (llvm::Instruction::hasNoUnsignedWrap(v1161)) {
                        char v1141 = 2;
                      }
                      else {
                        char v1141 = 0;
                      }
                      char v1142 = *((unsigned char *)v1139 + 17) & 0xFD | v1141;
                    }
                    *((unsigned char *)v1139 + 17) = v1142;
LABEL_2042:
                    int8x8_t IntegerValue = (int8x8_t)sub_1CC9D2AB4((uint64_t)a1, v1139, (uint64_t)v1161);
                    goto LABEL_921;
                  }
                  int __len = 1;
                }
                else
                {
                  LODWORD(v1230) = PrimitiveSizeInBits;
                  char v871 = __n;
                  if (PrimitiveSizeInBits == __n) {
                    char v871 = 63;
                  }
                  uint64_t v872 = (uint64_t)(v487 << -(char)PrimitiveSizeInBits) >> -(char)PrimitiveSizeInBits >> v871;
                  unint64_t v873 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  if (PrimitiveSizeInBits) {
                    unint64_t v874 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  }
                  else {
                    unint64_t v874 = 0;
                  }
                  uint64_t v1229 = v874 & v872;
                  LODWORD(v1224) = PrimitiveSizeInBits;
                  unint64_t v875 = (v874 & v872) << v481;
                  if (PrimitiveSizeInBits == v481) {
                    unint64_t v875 = 0;
                  }
                  if (!PrimitiveSizeInBits) {
                    unint64_t v873 = 0;
                  }
                  size_t v1160 = v873 & v875;
                  int8x8_t p_src = (int8x8_t)(v873 & v875);
                  int v491 = (int)v1188[0];
                  if (__n > v481)
                  {
                    LODWORD(v1224) = v1188[0];
                    if (LODWORD(v1188[0]) == __n - v481) {
                      char v876 = 63;
                    }
                    else {
                      char v876 = __n - v481;
                    }
                    uint64_t v877 = (uint64_t)((void)__src << -LOBYTE(v1188[0])) >> -LOBYTE(v1188[0]) >> v876;
                    if (LODWORD(v1188[0])) {
                      unint64_t v878 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v1188[0]);
                    }
                    else {
                      unint64_t v878 = 0;
                    }
                    int __len = 0;
                    int8x8_t p_src = (int8x8_t)(v878 & v877);
                    goto LABEL_753;
                  }
                  int __len = 0;
                }
                uint64_t v618 = (void)__src << (v481 - __n);
                if (v491 == v481 - __n) {
                  uint64_t v618 = 0;
                }
                unint64_t v619 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v491;
                if (!v491) {
                  unint64_t v619 = 0;
                }
                __src = (void *)(v619 & v618);
                goto LABEL_916;
              }
              uint64_t v164 = v15[1].u32[0];
              if (v164 > 0x40)
              {
                int v252 = 0;
                int64_t v253 = (unint64_t)(v164 + 63) >> 6;
                do
                {
                  BOOL v24 = v253-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v254 = *(void *)(*(void *)v15 + 8 * v253);
                  v252 += __clz(v254);
                }
                while (!v254);
                if ((v164 & 0x3F) != 0) {
                  int v255 = v164 | 0xFFFFFFC0;
                }
                else {
                  int v255 = 0;
                }
                int8x8_t IntegerValue = (int8x8_t)(v252 + v255);
              }
              else
              {
                int8x8_t IntegerValue = (int8x8_t)(v164 + __clz((unint64_t)*v15) - 64);
              }
              if (IntegerValue.i32[0])
              {
                unsigned int v256 = v1221;
                LODWORD(v1224) = v1221;
                if (v1221 >= 0x41) {
                  operator new[]();
                }
                unint64_t v257 = 0;
                int8x8_t p_src = 0;
                if (v1221 != IntegerValue.i32[0])
                {
                  if (v1221 - IntegerValue.i32[0] > 0x40)
                  {
                    llvm::APInt::setBitsSlowCase(&p_src, 0, v1221 - IntegerValue.i32[0]);
                  }
                  else
                  {
                    unint64_t v257 = 0xFFFFFFFFFFFFFFFFLL >> (IntegerValue.i8[0] - v1221);
                    int8x8_t p_src = (int8x8_t)v257;
                  }
                }
                BOOL v258 = sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&p_src);
                BOOL v259 = v258;
                if (v258)
                {
                  llvm::Instruction::dropPoisonGeneratingFlags(v1220);
                  int8x8_t IntegerValue = (int8x8_t)v1220;
                }
                if (v256 >= 0x41 && v257) {
                  MEMORY[0x1D25D9CB0](v257, 0x1000C8000313F17);
                }
                if (v259) {
                  goto LABEL_1601;
                }
              }
              goto LABEL_540;
            case '6':
              __src = 0;
              int v125 = *((_DWORD *)v31 + 5);
              if ((v125 & 0x40000000) != 0) {
                int v126 = (char *)*((void *)v31 - 1);
              }
              else {
                int v126 = (char *)v31 - 32 * (v125 & 0x7FFFFFF);
              }
              uint64_t v165 = (unsigned __int8 *)*((void *)v126 + 4);
              int8x8_t p_src = (int8x8_t)&__src;
              v1224 = 0;
              if (!sub_1CBF528D8((uint64_t)&p_src, v165)) {
                goto LABEL_540;
              }
              int64_t v166 = (unint64_t *)__src;
              unsigned int v167 = v1221;
              unint64_t v168 = v1221 - 1;
              uint64_t v169 = *((unsigned int *)__src + 2);
              if (v169 < 0x41) {
                goto LABEL_235;
              }
              int v170 = 0;
              int64_t v171 = (unint64_t)(v169 + 63) >> 6;
              do
              {
                BOOL v24 = v171-- < 1;
                if (v24) {
                  break;
                }
                unint64_t v172 = *(void *)(*(void *)__src + 8 * v171);
                v170 += __clz(v172);
              }
              while (!v172);
              int v173 = v169 | 0xFFFFFFC0;
              if ((v169 & 0x3F) == 0) {
                int v173 = 0;
              }
              if ((v169 - v170 - v173) <= 0x40)
              {
                int64_t v166 = *(unint64_t **)__src;
LABEL_235:
                unint64_t v174 = *v166;
                if (v174 <= v168) {
                  unint64_t v168 = v174;
                }
              }
              uint64_t v175 = v15[1].u32[0];
              if (v175 > 0x40)
              {
                int v260 = 0;
                int64_t v261 = (unint64_t)(v175 + 63) >> 6;
                do
                {
                  BOOL v24 = v261-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v262 = *(void *)(*(void *)v15 + 8 * v261);
                  v260 += __clz(v262);
                }
                while (!v262);
                int v263 = v175 | 0xFFFFFFC0;
                if ((v175 & 0x3F) == 0) {
                  int v263 = 0;
                }
                if (v168 > (v260 + v263))
                {
                  LODWORD(v1224) = v15[1].i32[0];
                  goto LABEL_661;
                }
                __int32 v319 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v15);
              }
              else
              {
                int8x8_t IntegerValue = *v15;
                if (v168 > v175 + __clz((unint64_t)*v15) - 64)
                {
                  LODWORD(v1224) = v15[1].i32[0];
                  goto LABEL_662;
                }
                unsigned int v318 = __clz(__rbit64(*(void *)&IntegerValue));
                if (v175 >= v318) {
                  __int32 v319 = v318;
                }
                else {
                  __int32 v319 = v15[1].i32[0];
                }
              }
              int v320 = *((_DWORD *)v1220 + 5);
              if ((v320 & 0x40000000) != 0) {
                int v321 = (uint64_t *)*((void *)v1220 - 1);
              }
              else {
                int v321 = (uint64_t *)((char *)v1220 - 32 * (v320 & 0x7FFFFFF));
              }
              unsigned int v322 = v167 - v319;
              uint64_t v323 = *v321;
              int v324 = (llvm::APInt **)a1[7];
              int64_t v325 = a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                BOOL v518 = v323 && *(unsigned __int8 *)(v323 + 16) >= 0x1Cu;
                if (!v518 || (unsigned int v6 = (llvm::Instruction *)v323, !*(void *)(v323 + 40))) {
                  unsigned int v6 = 0;
                }
              }
              int8x8_t p_src = (int8x8_t)a1[10];
              v1224 = v324;
              int8x8_t v1225 = (int8x8_t)v6;
              int64_t v1226 = v325;
              uint64_t v1227 = 0;
              char v1228 = 1;
              if (sub_1CC162D6C((llvm::Constant *)v323, v1222 + 1, (uint64_t)&p_src) < v322)
              {
                LODWORD(v175) = v15[1].i32[0];
                LODWORD(v1224) = v175;
                if (v175 < 0x41)
                {
                  int8x8_t IntegerValue = *v15;
LABEL_662:
                  uint64_t v449 = *(void *)&IntegerValue << v168;
                  if (v175 == v168) {
                    uint64_t v449 = 0;
                  }
                  if (v175) {
                    unint64_t v450 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v175;
                  }
                  else {
                    unint64_t v450 = 0;
                  }
                  int8x8_t p_src = (int8x8_t)(v450 & v449);
                  uint64_t v451 = v1220;
                  if ((*((unsigned char *)v1220 + 17) & 2) != 0 && v168)
                  {
                    if (v168 > 0x40)
                    {
                      llvm::APInt::setBitsSlowCase(&p_src, 0, v168);
                      uint64_t v451 = v1220;
                    }
                    else
                    {
                      unint64_t v452 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v168;
                      if (v1224 > 0x40) {
                        **(void **)&p_src |= v452;
                      }
                      else {
                        *(void *)&p_src |= v452;
                      }
                    }
                  }
                  BOOL v453 = sub_1CCABCFBC(a1, (uint64_t)v451, 0, (uint64_t *)&p_src);
                  BOOL v153 = v453;
                  if (v453)
                  {
                    int8x8_t IntegerValue = (int8x8_t)v1220;
                  }
                  else
                  {
                    unsigned int v454 = a4[1].u32[0];
                    if (v454 > 0x40)
                    {
                      llvm::APInt::lshrSlowCase((void **)a4, v168);
                    }
                    else if (v454 == v168)
                    {
                      *a4 = 0;
                    }
                    else
                    {
                      *a4 = (int8x8_t)(*(unint64_t *)a4 >> v168);
                    }
                    unsigned int v471 = a4[3].u32[0];
                    if (v471 > 0x40)
                    {
                      llvm::APInt::lshrSlowCase((void **)v1170, v168);
                    }
                    else if (v471 == v168)
                    {
                      *(void *)v1170 = 0;
                    }
                    else
                    {
                      *(void *)v1170 >>= v168;
                    }
                    if (v168 && v168)
                    {
                      this = (int8x8_t *)a4[1].u32[0];
                      unsigned int v472 = this - v168;
                      if (this > 0x40 || v472 > 0x3F) {
                        llvm::APInt::setBitsSlowCase(a4, v472, this);
                      }
                      else {
                        *(void *)a4 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v168 << v472;
                      }
                    }
                  }
                  if (v1224 < 0x41 || !*(void *)&p_src) {
                    goto LABEL_399;
                  }
                  goto LABEL_398;
                }
LABEL_661:
                operator new[]();
              }
              goto LABEL_888;
            case '7':
              int v135 = *((_DWORD *)v31 + 5);
              if ((v135 & 0x40000000) != 0) {
                uint64_t v136 = (uint64_t *)*((void *)v31 - 1);
              }
              else {
                uint64_t v136 = (uint64_t *)((char *)v31 - 32 * (v135 & 0x7FFFFFF));
              }
              uint64_t v194 = *v136;
              BOOL v195 = (llvm::APInt **)a1[7];
              int v196 = a1[9];
              if (!v6 || (uint64_t v197 = v6, !*((void *)v6 + 5)))
              {
                if (!v194
                  || *(unsigned __int8 *)(v194 + 16) < 0x1Cu
                  || (uint64_t v197 = (llvm::Instruction *)v194, !*(void *)(v194 + 40)))
                {
                  uint64_t v197 = 0;
                }
              }
              int8x8_t p_src = (int8x8_t)a1[10];
              v1224 = v195;
              int8x8_t v1225 = (int8x8_t)v197;
              int64_t v1226 = v196;
              uint64_t v1227 = 0;
              char v1228 = 1;
              unsigned int v198 = sub_1CC162D6C((llvm::Constant *)v194, v7 + 1, (uint64_t)&p_src);
              unsigned int v199 = v198;
              unsigned int v200 = v1221;
              uint64_t v201 = v15[1].u32[0];
              if (v201 > 0x40)
              {
                if (v198 >= v200 - llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v15)) {
                  goto LABEL_888;
                }
                int v205 = 0;
                int64_t v206 = (unint64_t)(v201 + 63) >> 6;
                do
                {
                  BOOL v24 = v206-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v207 = *(void *)(*(void *)v15 + 8 * v206);
                  v205 += __clz(v207);
                }
                while (!v207);
                int v208 = v201 | 0xFFFFFFC0;
                if ((v201 & 0x3F) == 0) {
                  int v208 = 0;
                }
                if (v205 + v208 != v201 - 1) {
                  goto LABEL_277;
                }
                goto LABEL_286;
              }
              unsigned int v202 = __clz(__rbit64((unint64_t)*v15));
              if (v201 < v202) {
                unsigned int v202 = v15[1].u32[0];
              }
              if (v198 < v1221 - v202)
              {
                if (*v15 != 1)
                {
LABEL_277:
                  int64_t v1185 = 0;
                  int v203 = *((_DWORD *)v1220 + 5);
                  if ((v203 & 0x40000000) != 0) {
                    BOOL v204 = (char *)*((void *)v1220 - 1);
                  }
                  else {
                    BOOL v204 = (char *)v1220 - 32 * (v203 & 0x7FFFFFF);
                  }
                  unint64_t v345 = (unsigned __int8 *)*((void *)v204 + 4);
                  int8x8_t p_src = (int8x8_t)&v1185;
                  v1224 = 0;
                  if (sub_1CBF528D8((uint64_t)&p_src, v345))
                  {
                    unsigned int v346 = (int8x8_t *)v1185;
                    int8x8_t IntegerValue = (int8x8_t)(v1221 - 1);
                    uint64_t v347 = *(unsigned int *)(v1185 + 8);
                    if (v347 >= 0x41)
                    {
                      int v348 = 0;
                      int64_t v349 = (unint64_t)(v347 + 63) >> 6;
                      do
                      {
                        BOOL v24 = v349-- < 1;
                        if (v24) {
                          break;
                        }
                        unint64_t v350 = *(void *)(*(void *)v1185 + 8 * v349);
                        v348 += __clz(v350);
                      }
                      while (!v350);
                      int v351 = v347 | 0xFFFFFFC0;
                      if ((v347 & 0x3F) == 0) {
                        int v351 = 0;
                      }
                      if ((v347 - v348 - v351) > 0x40)
                      {
LABEL_534:
                        unsigned int v353 = v15[1].u32[0];
                        LODWORD(v1188[0]) = v353;
                        if (v353 > 0x40) {
                          operator new[]();
                        }
                        uint64_t v354 = *(void *)v15 << IntegerValue.i8[0];
                        if (v353 == IntegerValue.i32[0]) {
                          uint64_t v354 = 0;
                        }
                        if (v353) {
                          unint64_t v355 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v353;
                        }
                        else {
                          unint64_t v355 = 0;
                        }
                        __src = (void *)(v355 & v354);
                        if (v353 + __clz((unint64_t)*v15) - 64 <= IntegerValue.i32[0])
                        {
                          uint64_t v549 = 1 << (LOBYTE(v1188[0]) - 1);
                          if (LODWORD(v1188[0]) > 0x40) {
                            *((void *)__src + ((LODWORD(v1188[0]) - 1) >> 6)) |= v549;
                          }
                          else {
                            __src = (void *)((unint64_t)__src | v549);
                          }
                        }
                        uint64_t v550 = v1220;
                        if ((*((unsigned char *)v1220 + 17) & 2) != 0 && IntegerValue.i32[0])
                        {
                          if (IntegerValue.i32[0] > 0x40u)
                          {
                            llvm::APInt::setBitsSlowCase(&__src, 0, IntegerValue.u32[0]);
                            uint64_t v550 = v1220;
                          }
                          else
                          {
                            unint64_t v551 = 0xFFFFFFFFFFFFFFFFLL >> -IntegerValue.i8[0];
                            if (LODWORD(v1188[0]) > 0x40) {
                              *(void *)__src |= v551;
                            }
                            else {
                              __src = (void *)((unint64_t)__src | v551);
                            }
                          }
                        }
                        if (sub_1CCABCFBC(a1, (uint64_t)v550, 0, (uint64_t *)&__src))
                        {
                          int v552 = 1;
                          int8x8_t IntegerValue = (int8x8_t)v1220;
                          goto LABEL_1032;
                        }
                        if (v1221 >= v199 + IntegerValue.i32[0] - 1) {
                          unsigned int v553 = v199 + IntegerValue.i32[0] - 1;
                        }
                        else {
                          unsigned int v553 = v1221;
                        }
                        LODWORD(v1230) = v1221;
                        if (v1221 >= 0x41) {
                          operator new[]();
                        }
                        uint64_t v554 = 0;
                        uint64_t v1229 = 0;
                        if (v553)
                        {
                          unsigned int v555 = v1221 - v553;
                          if (v1221 - v553 > 0x3F)
                          {
                            llvm::APInt::setBitsSlowCase(&v1229, v555, v1221);
                          }
                          else
                          {
                            uint64_t v554 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v553 << v555;
                            uint64_t v1229 = v554;
                          }
                        }
                        unsigned int v556 = a4[1].u32[0];
                        if (v556 > 0x40)
                        {
                          llvm::APInt::lshrSlowCase((void **)a4, IntegerValue.u32[0]);
                        }
                        else if (v556 == IntegerValue.i32[0])
                        {
                          *a4 = 0;
                        }
                        else
                        {
                          *a4 = (int8x8_t)(*(unint64_t *)a4 >> IntegerValue.i8[0]);
                        }
                        unsigned int v683 = a4[3].u32[0];
                        if (v683 > 0x40)
                        {
                          llvm::APInt::lshrSlowCase((void **)v1170, IntegerValue.u32[0]);
                        }
                        else if (v683 == IntegerValue.i32[0])
                        {
                          *(void *)v1170 = 0;
                        }
                        else
                        {
                          *(void *)v1170 >>= IntegerValue.i8[0];
                        }
                        unsigned int v684 = v1221 + ~IntegerValue.i32[0];
                        uint64_t v685 = v684 >> 6;
                        if (a4[1].i32[0] >= 0x41u) {
                          int8x8_t v686 = (int8x8_t *)(*(void *)a4 + 8 * v685);
                        }
                        else {
                          int8x8_t v686 = a4;
                        }
                        uint64_t v687 = 1 << v684;
                        if ((v687 & *(void *)v686) != 0) {
                          goto LABEL_1028;
                        }
                        uint64_t v694 = v15[1].u32[0];
                        if (v694 > 0x40)
                        {
                          unint64_t v705 = (unint64_t)(v694 + 63) >> 6;
                          v706 = (uint64_t *)*v15;
                          int v707 = (uint64_t *)v554;
                          while (1)
                          {
                            uint64_t v709 = *v706++;
                            uint64_t v708 = v709;
                            uint64_t v710 = *v707++;
                            if ((v710 & v708) != 0) {
                              break;
                            }
                            if (!--v705) {
                              goto LABEL_1028;
                            }
                          }
                        }
                        else if ((v554 & *(void *)v15) == 0)
                        {
LABEL_1028:
                          int v688 = *((_DWORD *)v1220 + 5);
                          if ((v688 & 0x40000000) != 0) {
                            int v689 = (char *)*((void *)v1220 - 1);
                          }
                          else {
                            int v689 = (char *)v1220 - 32 * (v688 & 0x7FFFFFF);
                          }
                          unsigned int v690 = *(void **)v689;
                          uint64_t v691 = *((void *)v689 + 4);
                          LOWORD(v1227) = 257;
                          uint64_t v692 = llvm::BinaryOperator::Create(26, v690, v691, (const char **)&p_src, 0);
                          int v693 = v1220;
                          *((unsigned char *)v692 + 17) = *((unsigned char *)v692 + 17) & 0xFD | *((unsigned char *)v1220 + 17) & 2;
                          int8x8_t IntegerValue = (int8x8_t)sub_1CC9D2AB4((uint64_t)a1, v692, (uint64_t)v693);
                          int v552 = 1;
                          goto LABEL_1032;
                        }
                        uint64_t v695 = a4[3].u32[0];
                        unint64_t v696 = (unint64_t)a4[2];
                        unsigned int v697 = (int8x8_t *)(v696 + 8 * v685);
                        if (v695 < 0x41) {
                          unsigned int v697 = a4 + 2;
                        }
                        if ((*(void *)v697 & v687) != 0)
                        {
                          if (v695 > 0x40)
                          {
                            unint64_t v766 = (unint64_t)(v695 + 63) >> 6;
                            v767 = (uint64_t *)v554;
                            int v552 = 0;
                            do
                            {
                              uint64_t v768 = *v767++;
                              *(void *)v696 |= v768;
                              v696 += 8;
                              --v766;
                            }
                            while (v766);
                          }
                          else
                          {
                            int v552 = 0;
                            *(void *)v1170 = v554 | v696;
                          }
                        }
                        else
                        {
                          int v552 = 0;
                        }
LABEL_1032:
                        if (LODWORD(v1188[0]) >= 0x41 && __src) {
                          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                        }
                        if (v552) {
                          goto LABEL_1601;
                        }
                        goto LABEL_1586;
                      }
                      unsigned int v346 = *(int8x8_t **)v1185;
                    }
                    int8x8_t v352 = *v346;
                    if (*(void *)&v352 <= *(void *)&IntegerValue) {
                      int8x8_t IntegerValue = v352;
                    }
                    goto LABEL_534;
                  }
LABEL_540:
                  uint64_t v119 = v1220;
LABEL_541:
                  unsigned int v145 = v1222;
                  int v356 = (llvm::APInt **)a1[7];
                  int v357 = a1[9];
                  if (!v6 || !*((void *)v6 + 5))
                  {
                    if (!v119 || *((unsigned __int8 *)v119 + 16) < 0x1Cu || (unsigned int v6 = v119, !*((void *)v119 + 5))) {
                      unsigned int v6 = 0;
                    }
                  }
                  int8x8_t p_src = (int8x8_t)a1[10];
                  v1224 = v356;
                  int8x8_t v1225 = (int8x8_t)v6;
                  int64_t v1226 = v357;
                  uint64_t v1227 = 0;
                  char v1228 = 1;
                  uint64_t v144 = a4;
LABEL_544:
                  sub_1CC15FBF8((uint64_t)v119, v144, v145, (const llvm::DataLayout **)&p_src);
LABEL_1586:
                  if (a4[1].i32[0] > 0x40u) {
                    operator new[]();
                  }
                  uint64_t v966 = v15[1].u32[0];
                  if (v966 > 0x40)
                  {
                    unint64_t v968 = (unint64_t)(v966 + 63) >> 6;
                    unsigned int v969 = (uint64_t *)*v15;
                    unint64_t v970 = v968 - 1;
                    v971 = (uint64_t *)(*(void *)&a4[2] | *(void *)a4);
                    do
                    {
                      uint64_t v973 = *v969++;
                      uint64_t v972 = v973;
                      uint64_t v974 = *v971++;
                      uint64_t v975 = v972 & ~v974;
                      BOOL v967 = v975 == 0;
                      BOOL v518 = v970-- != 0;
                      char v976 = v518;
                    }
                    while (!v975 && (v976 & 1) != 0);
                  }
                  else
                  {
                    BOOL v967 = (*(void *)v15 & ~(*(void *)&a4[2] | *(void *)a4)) == 0;
                  }
                  if (!v967)
                  {
LABEL_1600:
                    int8x8_t IntegerValue = 0;
                    goto LABEL_1601;
                  }
                  uint64_t v584 = (llvm::Constant ***)v16;
                  uint64_t v585 = (llvm::Type *)&a4[2];
                  goto LABEL_1598;
                }
LABEL_286:
                int v209 = *((_DWORD *)v1220 + 5);
                if ((v209 & 0x40000000) != 0) {
                  int v210 = (char *)*((void *)v1220 - 1);
                }
                else {
                  int v210 = (char *)v1220 - 32 * (v209 & 0x7FFFFFF);
                }
                uint64_t v358 = *(void **)v210;
                uint64_t v359 = *((void *)v210 + 4);
                if ((v209 & 0x10000000) != 0)
                {
                  uint64_t v360 = ***(void ***)v1220;
                  uint64_t v361 = *(void *)(v360 + 152);
                  uint64_t v362 = *(unsigned int *)(v360 + 168);
                  if (v362)
                  {
                    LODWORD(v363) = (v362 - 1) & ((v1220 >> 4) ^ (v1220 >> 9));
                    uint64_t v364 = v361 + 16 * v363;
                    uint64_t v365 = *(llvm::Instruction **)v364;
                    if (*(llvm::Instruction **)v364 != v1220)
                    {
                      int v366 = 1;
                      do
                      {
                        if (v365 == (llvm::Instruction *)-4096) {
                          goto LABEL_754;
                        }
                        int v367 = v363 + v366++;
                        uint64_t v363 = v367 & (v362 - 1);
                        uint64_t v365 = *(llvm::Instruction **)(v361 + 16 * v363);
                      }
                      while (v365 != v1220);
                      uint64_t v364 = v361 + 16 * v363;
                    }
                  }
                  else
                  {
LABEL_754:
                    uint64_t v364 = v361 + 16 * v362;
                  }
                  uint64_t v493 = *(void **)(v364 + 8);
                  uint64_t v496 = (llvm::APInt **)*v493;
                  uint64_t v494 = (char *)(v493 + 2);
                  int v495 = v496;
                }
                else
                {
                  int v495 = 0;
                  uint64_t v494 = &byte_1CFBCE98E;
                }
                LOWORD(v1227) = 261;
                int8x8_t p_src = (int8x8_t)v494;
                v1224 = v495;
                char v497 = 26;
                goto LABEL_757;
              }
              goto LABEL_888;
            case '8':
              BOOL v131 = sub_1CCABCFBC(a1, (uint64_t)v31, 1u, (uint64_t *)v15);
              int8x8_t IntegerValue = (int8x8_t)v1220;
              if (v131) {
                goto LABEL_1601;
              }
              unsigned int v132 = v1213;
              unsigned int v1204 = v1213;
              if (v1213 > 0x40) {
                operator new[]();
              }
              unint64_t v133 = ~v1212;
              uint64_t v101 = (llvm::Type *)&a4[2];
              if (v1213) {
                unint64_t v134 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1213;
              }
              else {
                unint64_t v134 = 0;
              }
              unint64_t v1203 = v134 & v133;
              unsigned int v1204 = 0;
              int8x8_t v268 = (int8x8_t)(*(void *)v15 & v134 & v133);
              LODWORD(v1224) = v1213;
              int8x8_t p_src = v268;
              BOOL v327 = sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&p_src);
              BOOL v328 = v327;
              if (v132 >= 0x41 && *(void *)&v268) {
                MEMORY[0x1D25D9CB0](*(void *)&v268, 0x1000C8000313F17);
              }
              if (v328) {
                goto LABEL_503;
              }
              unsigned int v329 = v1217;
              if (v1217 > 0x40) {
                operator new[]();
              }
              unsigned int v330 = v1219;
              if (v1219 > 0x40) {
                operator new[]();
              }
              unint64_t v331 = v1212 | v1216;
              int8x8_t v332 = (int8x8_t)(v1214 & v1218);
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = (int8x8_t)v331;
              a4[1].i32[0] = v329;
              if (a4[3].i32[0] >= 0x41u && *(void *)v101)
              {
                MEMORY[0x1D25D9CB0](*(void *)v101, 0x1000C8000313F17);
                unsigned int v329 = a4[1].u32[0];
              }
              a4[2] = v332;
              a4[3].i32[0] = v330;
              if (v329 > 0x40) {
                operator new[]();
              }
              unint64_t v333 = *(void *)&v332 | *(void *)a4;
              uint64_t v334 = v15[1].u32[0];
              if (v334 > 0x40)
              {
                unint64_t v336 = (unint64_t)(v334 + 63) >> 6;
                uint64_t v337 = (uint64_t *)*v15;
                unint64_t v338 = v336 - 1;
                unint64_t v339 = (uint64_t *)v333;
                do
                {
                  uint64_t v341 = *v337++;
                  uint64_t v340 = v341;
                  uint64_t v342 = *v339++;
                  uint64_t v343 = v340 & ~v342;
                  BOOL v335 = v343 == 0;
                  BOOL v518 = v338-- != 0;
                  char v344 = v518;
                }
                while (!v343 && (v344 & 1) != 0);
              }
              else
              {
                BOOL v335 = (*(void *)v15 & ~v333) == 0;
              }
              if (v335) {
                goto LABEL_879;
              }
              if (v1217 > 0x40) {
                operator new[]();
              }
              uint64_t v457 = v15[1].u32[0];
              if (v457 > 0x40)
              {
                unint64_t v459 = (unint64_t)(v457 + 63) >> 6;
                uint64_t v460 = (uint64_t *)*v15;
                unint64_t v461 = v459 - 1;
                int v462 = (uint64_t *)(v1214 | v1216);
                do
                {
                  uint64_t v464 = *v460++;
                  uint64_t v463 = v464;
                  uint64_t v465 = *v462++;
                  uint64_t v466 = v463 & ~v465;
                  BOOL v458 = v466 == 0;
                  BOOL v518 = v461-- != 0;
                  char v467 = v518;
                }
                while (!v466 && (v467 & 1) != 0);
              }
              else
              {
                BOOL v458 = (*(void *)v15 & ~(v1214 | v1216)) == 0;
              }
              if (v458) {
                goto LABEL_888;
              }
              if (v1213 > 0x40) {
                operator new[]();
              }
              uint64_t v536 = v15[1].u32[0];
              if (v536 > 0x40)
              {
                unint64_t v538 = (unint64_t)(v536 + 63) >> 6;
                int v539 = (uint64_t *)*v15;
                unint64_t v540 = v538 - 1;
                v541 = (uint64_t *)(v1218 | v1212);
                do
                {
                  uint64_t v543 = *v539++;
                  uint64_t v542 = v543;
                  uint64_t v544 = *v541++;
                  uint64_t v545 = v542 & ~v544;
                  BOOL v537 = v545 == 0;
                  BOOL v518 = v540-- != 0;
                  char v546 = v518;
                }
                while (!v545 && (v546 & 1) != 0);
              }
              else
              {
                BOOL v537 = (*(void *)v15 & ~(v1218 | v1212)) == 0;
              }
              if (v537)
              {
                int v547 = *((_DWORD *)v1220 + 5);
                if ((v547 & 0x40000000) != 0) {
                  uint64_t v533 = (char *)*((void *)v1220 - 1);
                }
                else {
                  uint64_t v533 = (char *)v1220 - 32 * (v547 & 0x7FFFFFF);
                }
                goto LABEL_1077;
              }
              unsigned int v1202 = v1217;
              unint64_t v548 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1217;
              if (!v1217) {
                unint64_t v548 = 0;
              }
              int8x8_t v682 = (int8x8_t)(*(void *)v15 & v548 & ~v1216);
              LODWORD(v1224) = v1217;
              int8x8_t p_src = v682;
              if (!sub_1CCABD174((uint64_t)v1220, 1u, &p_src)) {
                goto LABEL_1586;
              }
              goto LABEL_503;
            case '9':
              BOOL v98 = sub_1CCABCFBC(a1, (uint64_t)v31, 1u, (uint64_t *)v15);
              int8x8_t IntegerValue = (int8x8_t)v1220;
              if (v98) {
                goto LABEL_1601;
              }
              unsigned int v99 = v1215;
              unsigned int v1201 = v1215;
              if (v1215 > 0x40) {
                operator new[]();
              }
              unint64_t v100 = ~v1214;
              uint64_t v101 = (llvm::Type *)&a4[2];
              if (v1215) {
                unint64_t v102 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1215;
              }
              else {
                unint64_t v102 = 0;
              }
              v1200[1] = (llvm::APInt *)(v102 & v100);
              unsigned int v1201 = 0;
              int8x8_t v239 = (int8x8_t)(*(void *)v15 & v102 & v100);
              LODWORD(v1224) = v1215;
              int8x8_t p_src = v239;
              BOOL v290 = sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&p_src);
              BOOL v291 = v290;
              if (v99 >= 0x41 && *(void *)&v239) {
                MEMORY[0x1D25D9CB0](*(void *)&v239, 0x1000C8000313F17);
              }
              if (v291) {
                goto LABEL_503;
              }
              unsigned int v292 = v1217;
              if (v1217 > 0x40) {
                operator new[]();
              }
              unsigned int v293 = v1219;
              if (v1219 > 0x40) {
                operator new[]();
              }
              unint64_t v294 = v1212 & v1216;
              int8x8_t v295 = (int8x8_t)(v1214 | v1218);
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = (int8x8_t)v294;
              a4[1].i32[0] = v292;
              if (a4[3].i32[0] >= 0x41u && *(void *)v101)
              {
                MEMORY[0x1D25D9CB0](*(void *)v101, 0x1000C8000313F17);
                unsigned int v292 = a4[1].u32[0];
              }
              a4[2] = v295;
              a4[3].i32[0] = v293;
              if (v292 > 0x40) {
                operator new[]();
              }
              unint64_t v296 = *(void *)&v295 | *(void *)a4;
              uint64_t v297 = v15[1].u32[0];
              if (v297 > 0x40)
              {
                unint64_t v299 = (unint64_t)(v297 + 63) >> 6;
                long long v300 = (uint64_t *)*v15;
                unint64_t v301 = v299 - 1;
                uint64_t v302 = (uint64_t *)v296;
                do
                {
                  uint64_t v304 = *v300++;
                  uint64_t v303 = v304;
                  uint64_t v305 = *v302++;
                  uint64_t v306 = v303 & ~v305;
                  BOOL v298 = v306 == 0;
                  BOOL v518 = v301-- != 0;
                  char v307 = v518;
                }
                while (!v306 && (v307 & 1) != 0);
              }
              else
              {
                BOOL v298 = (*(void *)v15 & ~v296) == 0;
              }
              if (v298) {
                goto LABEL_879;
              }
              if (v1219 > 0x40) {
                operator new[]();
              }
              uint64_t v421 = v15[1].u32[0];
              if (v421 > 0x40)
              {
                unint64_t v423 = (unint64_t)(v421 + 63) >> 6;
                uint64_t v424 = (uint64_t *)*v15;
                unint64_t v425 = v423 - 1;
                uint64_t v426 = (uint64_t *)(v1212 | v1218);
                do
                {
                  uint64_t v428 = *v424++;
                  uint64_t v427 = v428;
                  uint64_t v429 = *v426++;
                  uint64_t v430 = v427 & ~v429;
                  BOOL v422 = v430 == 0;
                  BOOL v518 = v425-- != 0;
                  char v431 = v518;
                }
                while (!v430 && (v431 & 1) != 0);
              }
              else
              {
                BOOL v422 = (*(void *)v15 & ~(v1212 | v1218)) == 0;
              }
              if (v422) {
                goto LABEL_888;
              }
              if (v1215 > 0x40) {
                operator new[]();
              }
              uint64_t v521 = v15[1].u32[0];
              if (v521 > 0x40)
              {
                unint64_t v523 = (unint64_t)(v521 + 63) >> 6;
                int v524 = (uint64_t *)*v15;
                unint64_t v525 = v523 - 1;
                int v526 = (uint64_t *)(v1216 | v1214);
                do
                {
                  uint64_t v528 = *v524++;
                  uint64_t v527 = v528;
                  uint64_t v529 = *v526++;
                  uint64_t v530 = v527 & ~v529;
                  BOOL v522 = v530 == 0;
                  BOOL v518 = v525-- != 0;
                  char v531 = v518;
                }
                while (!v530 && (v531 & 1) != 0);
              }
              else
              {
                BOOL v522 = (*(void *)v15 & ~(v1216 | v1214)) == 0;
              }
              if (v522)
              {
                int v532 = *((_DWORD *)v1220 + 5);
                if ((v532 & 0x40000000) != 0) {
                  uint64_t v533 = (char *)*((void *)v1220 - 1);
                }
                else {
                  uint64_t v533 = (char *)v1220 - 32 * (v532 & 0x7FFFFFF);
                }
                goto LABEL_1077;
              }
              if (sub_1CCABD174((uint64_t)v1220, 1u, v15)) {
                goto LABEL_503;
              }
              goto LABEL_1586;
            case ':':
              if (sub_1CCABCFBC(a1, (uint64_t)v31, 1u, (uint64_t *)v15)
                || sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)v15))
              {
                goto LABEL_503;
              }
              int64_t v1185 = 0;
              v1200[0] = 0;
              uint64_t v107 = v15[1].u32[0];
              unsigned int v108 = v15;
              uint64_t v101 = (llvm::Type *)&a4[2];
              if (v107 < 0x41) {
                goto LABEL_140;
              }
              int v109 = 0;
              int64_t v110 = (unint64_t)(v107 + 63) >> 6;
              do
              {
                BOOL v24 = v110-- < 1;
                if (v24) {
                  break;
                }
                unint64_t v111 = *(void *)(*(void *)v15 + 8 * v110);
                v109 += __clz(v111);
              }
              while (!v111);
              int v112 = v107 | 0xFFFFFFC0;
              if ((v107 & 0x3F) == 0) {
                int v112 = 0;
              }
              if ((v107 - v109 - v112) <= 0x40)
              {
                unsigned int v108 = (int8x8_t *)*v15;
LABEL_140:
                if (*v108 == 1)
                {
                  int v113 = *((_DWORD *)v1220 + 5);
                  int v114 = (v113 & 0x40000000) != 0
                       ? (uint64_t *)*((void *)v1220 - 1)
                       : (uint64_t *)((char *)v1220 - 32 * (v113 & 0x7FFFFFF));
                  uint64_t v468 = *v114;
                  p_src.i32[0] = 53;
                  v1224 = 0;
                  int8x8_t v1225 = (int8x8_t)&v1185;
                  uint64_t v101 = (llvm::Type *)&a4[2];
                  if (sub_1CC045310((uint64_t)&p_src, v468))
                  {
                    int v469 = *((_DWORD *)v1220 + 5);
                    int v470 = (v469 & 0x40000000) != 0
                         ? (llvm::Instruction *)*((void *)v1220 - 1)
                         : (llvm::Instruction *)((char *)v1220 - 32 * (v469 & 0x7FFFFFF));
                    uint64_t v558 = *((void *)v470 + 4);
                    LODWORD(__src) = 53;
                    v1188[0] = 0;
                    v1188[1] = v1200;
                    uint64_t v101 = (llvm::Type *)&a4[2];
                    if (sub_1CC045310((uint64_t)&__src, v558))
                    {
                      uint64_t v559 = a1[3];
                      __src = v559;
                      *(_OWORD *)unint64_t v1188 = *((_OWORD *)v559 + 3);
                      unint64_t v47 = &v1189;
                      uint64_t v560 = *((unsigned int *)v559 + 2);
                      if (v560)
                      {
                        uint64_t v937 = (unsigned __int8 **)(*v559 + 1);
                        uint64_t v938 = 16 * v560;
                        while (*((_DWORD *)v937 - 2))
                        {
                          v937 += 2;
                          v938 -= 16;
                          if (!v938) {
                            goto LABEL_856;
                          }
                        }
                        v939 = *v937;
                        int v1189 = (unint64_t **)v939;
                        if (v939)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v1189, v939, 2);
                          uint64_t v559 = a1[3];
                        }
                      }
                      else
                      {
LABEL_856:
                        int v1189 = 0;
                      }
                      unsigned int v561 = v1220;
                      uint64_t v562 = (char *)v1220 + 24;
                      v559[6] = (unint64_t *)*((void *)v1220 + 5);
                      v559[7] = (unint64_t *)v562;
                      v563 = (unint64_t **)*((void *)v561 + 6);
                      uint64_t v1229 = (uint64_t)v563;
                      if (v563)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v1229, (unsigned __int8 *)v563, 2);
                        v564 = (unint64_t **)v1229;
                      }
                      else
                      {
                        v564 = 0;
                      }
                      sub_1CB8461A4((uint64_t)v559, 0, (uint64_t)v564);
                      if (!v1229)
                      {
LABEL_860:
                        uint64_t v565 = (uint64_t)a1[3];
                        LOWORD(v1227) = 257;
                        unsigned int v566 = sub_1CC2428C0(v565, v1185, (uint64_t)v1200[0], (uint64_t)&p_src);
                        unsigned int v567 = (llvm::IRBuilderBase *)a1[3];
                        LOWORD(v1227) = 257;
                        int8x8_t IntegerValue = (int8x8_t)llvm::IRBuilderBase::CreateUnaryIntrinsic(v567, 53, v566, 0, (const llvm::Twine *)&p_src);
                        v568 = __src;
                        if (v1188[0])
                        {
                          sub_1CBF5385C((uint64_t)__src, (uint64_t)v1188[0], (uint64_t)v1188[1]);
                          v568 = __src;
                        }
                        else
                        {
                          *((void *)__src + 6) = 0;
                          v568[7] = 0;
                        }
                        uint64_t v1229 = (uint64_t)v1189;
                        if (v1189)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v1229, (unsigned __int8 *)v1189, 2);
                          int v714 = (unint64_t **)v1229;
                        }
                        else
                        {
                          int v714 = 0;
                        }
                        sub_1CB8461A4((uint64_t)v568, 0, (uint64_t)v714);
                        if (!v1229) {
                          goto LABEL_1072;
                        }
                        int v940 = *(unsigned __int8 *)v1229;
                        if ((v940 - 4) > 0x1E)
                        {
                          if ((v940 - 3) >= 0xFFFFFFFE) {
                            uint64_t v1018 = v1229;
                          }
                          else {
                            uint64_t v1018 = 0;
                          }
                          if ((v940 - 3) < 0xFFFFFFFE)
                          {
                            if (v940 == 3) {
                              *(void *)(v1229 + 8) = 0;
                            }
LABEL_1072:
                            int v715 = (unsigned __int8 *)v1189;
                            if (!v1189) {
                              goto LABEL_1601;
                            }
LABEL_1232:
                            int v815 = *v715;
                            if ((v815 - 4) > 0x1E)
                            {
                              if ((v815 - 3) >= 0xFFFFFFFE) {
                                int v981 = v715;
                              }
                              else {
                                int v981 = 0;
                              }
                              if ((v815 - 3) < 0xFFFFFFFE)
                              {
                                if (v815 == 3) {
                                  *((void *)v715 + 1) = 0;
                                }
                                goto LABEL_1601;
                              }
                              unint64_t v817 = (unint64_t)(v981 + 8);
                            }
                            else
                            {
                              if ((v715[1] & 0x7F) != 2 && !*((_DWORD *)v715 + 3)) {
                                goto LABEL_1601;
                              }
                              uint64_t v816 = *((void *)v715 + 2);
                              if ((v816 & 4) == 0) {
                                goto LABEL_1601;
                              }
                              unint64_t v817 = v816 & 0xFFFFFFFFFFFFFFF8;
                              if (!v817) {
                                goto LABEL_1601;
                              }
                            }
                            int8x8_t p_src = (int8x8_t)v47;
                            sub_1CC5FA668(v817 + 16, &p_src);
                            goto LABEL_1601;
                          }
                          unint64_t v942 = v1018 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(v1229 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1229 + 12)) {
                            goto LABEL_1072;
                          }
                          unint64_t v941 = *(void *)(v1229 + 16);
                          if ((v941 & 4) == 0) {
                            goto LABEL_1072;
                          }
                          unint64_t v942 = v941 & 0xFFFFFFFFFFFFFFF8;
                          if (!v942) {
                            goto LABEL_1072;
                          }
                        }
                        int8x8_t p_src = (int8x8_t)&v1229;
                        sub_1CC5FA668(v942 + 16, &p_src);
                        goto LABEL_1072;
                      }
                      int v846 = *(unsigned __int8 *)v1229;
                      if ((v846 - 4) > 0x1E)
                      {
                        if ((v846 - 3) >= 0xFFFFFFFE) {
                          uint64_t v879 = v1229;
                        }
                        else {
                          uint64_t v879 = 0;
                        }
                        if ((v846 - 3) < 0xFFFFFFFE)
                        {
                          if (v846 == 3) {
                            *(void *)(v1229 + 8) = 0;
                          }
                          goto LABEL_860;
                        }
                        unint64_t v848 = v879 + 8;
                      }
                      else
                      {
                        if ((*(unsigned char *)(v1229 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1229 + 12)) {
                          goto LABEL_860;
                        }
                        unint64_t v847 = *(void *)(v1229 + 16);
                        if ((v847 & 4) == 0) {
                          goto LABEL_860;
                        }
                        unint64_t v848 = v847 & 0xFFFFFFFFFFFFFFF8;
                        if (!v848) {
                          goto LABEL_860;
                        }
                      }
                      int8x8_t p_src = (int8x8_t)&v1229;
                      sub_1CC5FA668(v848 + 16, &p_src);
                      goto LABEL_860;
                    }
                  }
                }
              }
              unsigned int v1197 = v1217;
              if (v1217 > 0x40) {
                operator new[]();
              }
              int8x8_t v1196 = (int8x8_t)v1216;
              unsigned int v1199 = v1219;
              if (v1219 > 0x40) {
                operator new[]();
              }
              uint64_t v1198 = (void *)v1218;
              llvm::KnownBits::operator^=((uint64_t)&v1196, &v1212);
              unsigned int v569 = v1197;
              int8x8_t v570 = v1196;
              unsigned int v571 = v1199;
              int8x8_t v572 = (int8x8_t)v1198;
              unsigned int v1197 = 0;
              unsigned int v1199 = 0;
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = v570;
              a4[1].i32[0] = v569;
              if (a4[3].i32[0] >= 0x41u && *(void *)v101) {
                MEMORY[0x1D25D9CB0](*(void *)v101, 0x1000C8000313F17);
              }
              a4[2] = v572;
              a4[3].i32[0] = v571;
              if (v1199 >= 0x41 && v1198) {
                MEMORY[0x1D25D9CB0](v1198, 0x1000C8000313F17);
              }
              if (v1197 >= 0x41 && *(void *)&v1196) {
                MEMORY[0x1D25D9CB0](*(void *)&v1196, 0x1000C8000313F17);
              }
              if (a4[1].i32[0] > 0x40u) {
                operator new[]();
              }
              uint64_t v573 = v15[1].u32[0];
              if (v573 > 0x40)
              {
                unint64_t v575 = (unint64_t)(v573 + 63) >> 6;
                uint64_t v576 = (uint64_t *)*v15;
                unint64_t v577 = v575 - 1;
                uint64_t v578 = (uint64_t *)(*(void *)&a4[2] | *(void *)a4);
                do
                {
                  uint64_t v580 = *v576++;
                  uint64_t v579 = v580;
                  uint64_t v581 = *v578++;
                  uint64_t v582 = v579 & ~v581;
                  BOOL v574 = v582 == 0;
                  BOOL v518 = v577-- != 0;
                  char v583 = v518;
                }
                while (!v582 && (v583 & 1) != 0);
              }
              else
              {
                BOOL v574 = (*(void *)v15 & ~(*(void *)&a4[2] | *(void *)a4)) == 0;
              }
              if (v574)
              {
LABEL_879:
                uint64_t v584 = (llvm::Constant ***)v16;
                uint64_t v585 = v101;
LABEL_1598:
                uint64_t v501 = llvm::Constant::getIntegerValue(v584, v585, (const llvm::APInt *)this);
LABEL_1599:
                int8x8_t IntegerValue = (int8x8_t)v501;
LABEL_1601:
                if (v1215 >= 0x41 && v1214) {
                  MEMORY[0x1D25D9CB0](v1214, 0x1000C8000313F17);
                }
                if (v1213 >= 0x41 && v1212) {
                  MEMORY[0x1D25D9CB0](v1212, 0x1000C8000313F17);
                }
                if (v1219 >= 0x41 && v1218) {
                  MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
                }
                if (v1217 < 0x41) {
                  return (llvm::UndefValue *)IntegerValue;
                }
                int8x8_t v30 = (int8x8_t)v1216;
                if (!v1216) {
                  return (llvm::UndefValue *)IntegerValue;
                }
LABEL_1606:
                MEMORY[0x1D25D9CB0](*(void *)&v30, 0x1000C8000313F17);
                return (llvm::UndefValue *)IntegerValue;
              }
              uint64_t v586 = v15[1].u32[0];
              if (v586 > 0x40)
              {
                unint64_t v590 = (unint64_t)(v586 + 63) >> 6;
                uint64_t v591 = (uint64_t *)*v15;
                unint64_t v587 = v1212;
                uint64_t v592 = (uint64_t *)*v15;
                int v593 = (uint64_t *)v1212;
                unint64_t v594 = v590;
                while (1)
                {
                  uint64_t v596 = *v592++;
                  uint64_t v595 = v596;
                  uint64_t v597 = *v593++;
                  if ((v595 & ~v597) != 0) {
                    break;
                  }
                  if (!--v594) {
                    goto LABEL_888;
                  }
                }
                int8x8_t v588 = (int8x8_t)v1216;
                uint64_t v600 = (uint64_t *)v1216;
                while (1)
                {
                  uint64_t v602 = *v591++;
                  uint64_t v601 = v602;
                  uint64_t v603 = *v600++;
                  if ((v601 & ~v603) != 0) {
                    goto LABEL_883;
                  }
                  if (!--v590) {
                    goto LABEL_895;
                  }
                }
              }
              unint64_t v587 = v1212;
              if ((*(void *)v15 & ~v1212) != 0)
              {
                int8x8_t v588 = (int8x8_t)v1216;
                if ((*(void *)v15 & ~v1216) == 0)
                {
LABEL_895:
                  int v604 = *((_DWORD *)v1220 + 5);
                  if ((v604 & 0x40000000) != 0) {
                    uint64_t v533 = (char *)*((void *)v1220 - 1);
                  }
                  else {
                    uint64_t v533 = (char *)v1220 - 32 * (v604 & 0x7FFFFFF);
                  }
LABEL_1077:
                  int8x8_t IntegerValue = *(int8x8_t *)(v533 + 32);
                  goto LABEL_1601;
                }
LABEL_883:
                if (v1213 > 0x40) {
                  operator new[]();
                }
                unint64_t v589 = *(void *)&v588 | v587;
                if (v586 > 0x40)
                {
                  unint64_t v606 = ((unint64_t)v586 + 63) >> 6;
                  v607 = (uint64_t *)*v15;
                  unint64_t v608 = v606 - 1;
                  v609 = (uint64_t *)v589;
                  do
                  {
                    uint64_t v611 = *v607++;
                    uint64_t v610 = v611;
                    uint64_t v612 = *v609++;
                    uint64_t v613 = v610 & ~v612;
                    BOOL v605 = v613 == 0;
                    BOOL v518 = v608-- != 0;
                    char v614 = v518;
                  }
                  while (!v613 && (v614 & 1) != 0);
                }
                else
                {
                  BOOL v605 = (*(void *)v15 & ~v589) == 0;
                }
                if (v605)
                {
                  int v615 = *((_DWORD *)v1220 + 5);
                  if ((v615 & 0x40000000) != 0) {
                    int v616 = (char *)*((void *)v1220 - 1);
                  }
                  else {
                    int v616 = (char *)v1220 - 32 * (v615 & 0x7FFFFFF);
                  }
                  uint64_t v358 = *(void **)v616;
                  uint64_t v359 = *((void *)v616 + 4);
                  if ((v615 & 0x10000000) != 0)
                  {
                    uint64_t v665 = ***(void ***)v1220;
                    uint64_t v666 = *(void *)(v665 + 152);
                    uint64_t v667 = *(unsigned int *)(v665 + 168);
                    if (v667)
                    {
                      LODWORD(v668) = (v667 - 1) & ((v1220 >> 4) ^ (v1220 >> 9));
                      uint64_t v669 = v666 + 16 * v668;
                      int8x8_t v670 = *(llvm::Instruction **)v669;
                      if (*(llvm::Instruction **)v669 != v1220)
                      {
                        int v671 = 1;
                        do
                        {
                          if (v670 == (llvm::Instruction *)-4096) {
                            goto LABEL_1079;
                          }
                          int v672 = v668 + v671++;
                          uint64_t v668 = v672 & (v667 - 1);
                          int8x8_t v670 = *(llvm::Instruction **)(v666 + 16 * v668);
                        }
                        while (v670 != v1220);
                        uint64_t v669 = v666 + 16 * v668;
                      }
                    }
                    else
                    {
LABEL_1079:
                      uint64_t v669 = v666 + 16 * v667;
                    }
                    unsigned int v717 = *(void **)(v669 + 8);
                    char v720 = (llvm::APInt **)*v717;
                    uint64_t v718 = (char *)(v717 + 2);
                    int v719 = v720;
                  }
                  else
                  {
                    int v719 = 0;
                    uint64_t v718 = &byte_1CFBCE98E;
                  }
                  LOWORD(v1227) = 261;
                  int8x8_t p_src = (int8x8_t)v718;
                  v1224 = v719;
                  char v497 = 29;
LABEL_757:
                  int v498 = llvm::BinaryOperator::Create(v497, v358, v359, (const char **)&p_src, 0);
                  BOOL v499 = v1220;
                  uint64_t v500 = (uint64_t)a1;
                  goto LABEL_758;
                }
                unsigned int v617 = (uint64_t *)v1214;
                uint64_t v673 = v15[1].u32[0];
                if (v673 > 0x40)
                {
                  unint64_t v674 = (unint64_t)(v673 + 63) >> 6;
                  uint64_t v675 = (uint64_t *)*v15;
                  int v676 = (uint64_t *)(v1214 | v1212);
                  while (1)
                  {
                    uint64_t v678 = *v675++;
                    uint64_t v677 = v678;
                    uint64_t v679 = *v676++;
                    if ((v677 & ~v679) != 0) {
                      break;
                    }
                    if (!--v674) {
                      goto LABEL_1009;
                    }
                  }
                }
                else if ((*(void *)v15 & ~(v1214 | v1212)) == 0)
                {
LABEL_1009:
                  if (v1215 > 0x40)
                  {
                    uint64_t v769 = (uint64_t *)v1218;
                    unint64_t v770 = (((unint64_t)v1215 + 63) >> 6) - 1;
                    do
                    {
                      uint64_t v772 = *v617++;
                      uint64_t v771 = v772;
                      uint64_t v773 = *v769++;
                      uint64_t v774 = v771 & ~v773;
                      BOOL v680 = v774 == 0;
                      BOOL v518 = v770-- != 0;
                      char v775 = v518;
                    }
                    while (!v774 && (v775 & 1) != 0);
                  }
                  else
                  {
                    BOOL v680 = (v1214 & ~v1218) == 0;
                  }
                  if (v680)
                  {
                    unsigned int v1195 = v1215;
                    if (v1215 > 0x40) {
                      operator new[]();
                    }
                    if (v1215) {
                      unint64_t v776 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1215;
                    }
                    else {
                      unint64_t v776 = 0;
                    }
                    int8x8_t v820 = (int8x8_t)(*(void *)v15 & v776 & ~v1214);
                    LODWORD(v1224) = v1215;
                    int8x8_t p_src = v820;
                    uint64_t v849 = llvm::Constant::getIntegerValue((llvm::Constant ***)v16, (llvm::Type *)&p_src, (const llvm::APInt *)this);
                    if (v1224 >= 0x41 && *(void *)&p_src) {
                      MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
                    }
                    int v850 = *((_DWORD *)v1220 + 5);
                    if ((v850 & 0x40000000) != 0) {
                      v851 = (void **)*((void *)v1220 - 1);
                    }
                    else {
                      v851 = (void **)((char *)v1220 - 32 * (v850 & 0x7FFFFFF));
                    }
                    uint64_t v358 = *v851;
                    LOWORD(v1227) = 257;
                    char v497 = 28;
                    uint64_t v359 = (uint64_t)v849;
                    goto LABEL_757;
                  }
                }
                __src = 0;
                int v777 = *((_DWORD *)v1220 + 5);
                if ((v777 & 0x40000000) != 0) {
                  int v778 = (char *)*((void *)v1220 - 1);
                }
                else {
                  int v778 = (char *)v1220 - 32 * (v777 & 0x7FFFFFF);
                }
                int v779 = (unsigned __int8 *)*((void *)v778 + 4);
                int8x8_t p_src = (int8x8_t)&__src;
                v1224 = 0;
                if (sub_1CBF528D8((uint64_t)&p_src, v779))
                {
                  uint64_t v781 = __src;
                  unsigned int v782 = *((_DWORD *)__src + 2);
                  if (v782)
                  {
                    if (v782 <= 0x40)
                    {
                      if (*(void *)__src == 0xFFFFFFFFFFFFFFFFLL >> -(char)v782) {
                        goto LABEL_1283;
                      }
LABEL_1183:
                      unsigned int v783 = v15[1].u32[0];
                      unsigned int v1194 = v783;
                      if (v783 > 0x40) {
                        operator new[]();
                      }
                      uint64_t v784 = ~*(void *)v15;
                      if (v783) {
                        unint64_t v785 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v783;
                      }
                      else {
                        unint64_t v785 = 0;
                      }
                      unint64_t v1193 = v785 & v784;
                      unsigned int v1194 = 0;
                      int8x8_t v807 = (int8x8_t)(*v781 | v785 & v784);
                      LODWORD(v1224) = v783;
                      int8x8_t p_src = v807;
                      if (v783)
                      {
                        uint64_t v829 = v1220;
                        if (*(void *)&v807 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v783)
                        {
                          if (!sub_1CCABD174((uint64_t)v1220, 1u, v15)) {
                            goto LABEL_1283;
                          }
LABEL_503:
                          int8x8_t IntegerValue = (int8x8_t)v1220;
                          goto LABEL_1601;
                        }
                      }
                      else
                      {
                        uint64_t v829 = v1220;
                      }
                      AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v16, v780, (const llvm::APInt *)this);
                      int v831 = *((_DWORD *)v829 + 5);
                      if ((v831 & 0x40000000) != 0) {
                        v832 = (char *)*((void *)v829 - 1);
                      }
                      else {
                        v832 = (char *)v829 - 32 * (v831 & 0x7FFFFFF);
                      }
                      v833 = v832 + 32;
                      if (*((void *)v832 + 4))
                      {
                        **((void **)v832 + 6) = *((void *)v832 + 5);
                        uint64_t v834 = *((void *)v832 + 5);
                        if (v834) {
                          *(void *)(v834 + 16) = *((void *)v832 + 6);
                        }
                      }
                      void *v833 = AllOnesValue;
                      if (AllOnesValue)
                      {
                        uint64_t v837 = AllOnesValue[1];
                        uint64_t v835 = AllOnesValue + 1;
                        uint64_t v836 = v837;
                        *((void *)v832 + 5) = v837;
                        if (v837) {
                          *(void *)(v836 + 16) = v832 + 40;
                        }
                        *((void *)v832 + 6) = v835;
                        void *v835 = v833;
                      }
                      goto LABEL_503;
                    }
                    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__src) != v782) {
                      goto LABEL_1183;
                    }
                  }
                }
LABEL_1283:
                int v838 = *((_DWORD *)v1220 + 5);
                if ((v838 & 0x40000000) != 0) {
                  unsigned int v839 = (uint64_t *)*((void *)v1220 - 1);
                }
                else {
                  unsigned int v839 = (uint64_t *)((char *)v1220 - 32 * (v838 & 0x7FFFFFF));
                }
                uint64_t v840 = *v839;
                if (v840)
                {
                  if (*(unsigned char *)(v840 + 16) == 56)
                  {
                    uint64_t v841 = *(void *)(v840 + 8);
                    if (v841)
                    {
                      if (!*(void *)(v841 + 8))
                      {
                        uint64_t v842 = (v838 & 0x40000000) != 0
                             ? (llvm::Instruction *)*((void *)v1220 - 1)
                             : (llvm::Instruction *)((char *)v1220 - 32 * (v838 & 0x7FFFFFF));
                        uint64_t v843 = *((void *)v842 + 4);
                        if (v843 && *(unsigned char *)(v843 + 16) == 16)
                        {
                          int v844 = *(_DWORD *)(v840 + 20);
                          uint64_t v845 = (v844 & 0x40000000) != 0 ? *(void *)(v840 - 8) : v840 - 32 * (v844 & 0x7FFFFFF);
                          uint64_t v852 = *(void *)(v845 + 32);
                          if (v852 && *(unsigned char *)(v852 + 16) == 16)
                          {
                            if (v1219 >= 0x41) {
                              operator new[]();
                            }
                            if ((v1214 & v1218 & *(void *)v15) != 0)
                            {
                              unsigned int v931 = v1219;
                              unint64_t v932 = ~(v1214 & v1218 & *(void *)v15);
                              unint64_t v933 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1219;
                              if (!v1219) {
                                unint64_t v933 = 0;
                              }
                              unint64_t v934 = v933 & v932;
                              unint64_t v1191 = v933 & v932;
                              int v1192 = 0;
                              uint64_t v935 = *(void *)v1220;
                              int8x8_t v936 = (int8x8_t)(*(void *)(v852 + 24) & v933 & v932);
                              LODWORD(v1224) = v1219;
                              int8x8_t p_src = v936;
                              v949 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v935, (llvm::LLVMContext *)&p_src, (const llvm::APInt *)this);
                              Splat = v949;
                              if ((*(_DWORD *)(v935 + 8) & 0xFE) == 0x12) {
                                Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v935 + 32) | ((unint64_t)(*(_DWORD *)(v935 + 8) == 19) << 32)), (uint64_t)v949);
                              }
                              if (v1224 >= 0x41 && *(void *)&p_src) {
                                MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
                              }
                              int v951 = *((_DWORD *)v1220 + 5);
                              if ((v951 & 0x40000000) != 0) {
                                v952 = (void **)*((void *)v1220 - 1);
                              }
                              else {
                                v952 = (void **)((char *)v1220 - 32 * (v951 & 0x7FFFFFF));
                              }
                              v953 = *v952;
                              LOWORD(v1227) = 257;
                              v954 = llvm::BinaryOperator::Create(28, v953, (uint64_t)Splat, (const char **)&p_src, 0);
                              sub_1CC9D2AB4((uint64_t)a1, v954, (uint64_t)v1220);
                              uint64_t v955 = *(void *)v1220;
                              int8x8_t v956 = (int8x8_t)(*(void *)(v843 + 24) & v934);
                              LODWORD(v1224) = v931;
                              int8x8_t p_src = v956;
                              std::string::size_type v958 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v955, (llvm::LLVMContext *)&p_src, v957);
                              v959 = v958;
                              if ((*(_DWORD *)(v955 + 8) & 0xFE) == 0x12) {
                                v959 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v955 + 32) | ((unint64_t)(*(_DWORD *)(v955 + 8) == 19) << 32)), (uint64_t)v958);
                              }
                              if (v1224 >= 0x41 && *(void *)&p_src) {
                                MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
                              }
                              LOWORD(v1227) = 257;
                              uint64_t v960 = llvm::BinaryOperator::Create(30, v954, (uint64_t)v959, (const char **)&p_src, 0);
                              int8x8_t IntegerValue = (int8x8_t)sub_1CC9D2AB4((uint64_t)a1, v960, (uint64_t)v1220);
                              goto LABEL_1601;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_1586;
              }
LABEL_888:
              int v598 = *((_DWORD *)v1220 + 5);
              if ((v598 & 0x40000000) != 0) {
                uint64_t v599 = (int8x8_t *)*((void *)v1220 - 1);
              }
              else {
                uint64_t v599 = (int8x8_t *)((char *)v1220 - 32 * (v598 & 0x7FFFFFF));
              }
              goto LABEL_891;
            case 'B':
              int64_t v1185 = 0;
              v1200[0] = 0;
              int v96 = *((_DWORD *)v31 + 5);
              if ((v96 & 0x40000000) != 0) {
                uint64_t v97 = (uint64_t *)*((void *)v31 - 1);
              }
              else {
                uint64_t v97 = (uint64_t *)((char *)v31 - 32 * (v96 & 0x7FFFFFF));
              }
              uint64_t v146 = *v97;
              int8x8_t p_src = (int8x8_t)&v1185;
              v1224 = v1200;
              int8x8_t v1225 = 0;
              uint64_t v147 = *(void *)(v146 + 8);
              if (!v147 || *(void *)(v147 + 8)) {
                goto LABEL_191;
              }
              int v269 = *(unsigned __int8 *)(v146 + 16);
              if (v269 == 5)
              {
                if (*(_WORD *)(v146 + 18) != 26) {
                  goto LABEL_191;
                }
                uint64_t v398 = v146 - 32 * (*(_DWORD *)(v146 + 20) & 0x7FFFFFF);
                if (!*(void *)v398) {
                  goto LABEL_191;
                }
                int64_t v1185 = *(void *)v398;
                if ((sub_1CBF5295C((uint64_t)&v1224, *(llvm::Constant **)(v398 + 32)) & 1) == 0) {
                  goto LABEL_191;
                }
              }
              else
              {
                if (v269 != 54) {
                  goto LABEL_191;
                }
                if (!*(void *)(v146 - 64)) {
                  goto LABEL_191;
                }
                int64_t v1185 = *(void *)(v146 - 64);
                if (!sub_1CBF528D8((uint64_t)&v1224, *(unsigned __int8 **)(v146 - 32))) {
                  goto LABEL_191;
                }
              }
              char v399 = v1200[0];
              v400 = v1220;
              char v401 = *(llvm::Type **)v1220;
              if ((*(_DWORD *)(*(void *)v1220 + 8) & 0xFE) == 0x12) {
                char v401 = (llvm::Type *)**((void **)v401 + 2);
              }
              unsigned int v402 = llvm::Type::getPrimitiveSizeInBits(v401);
              uint64_t v403 = *((unsigned int *)v399 + 2);
              int v404 = v399;
              if (v403 >= 0x41)
              {
                int v405 = 0;
                int64_t v406 = (unint64_t)(v403 + 63) >> 6;
                do
                {
                  BOOL v24 = v406-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v407 = *(void *)(*(void *)v399 + 8 * v406);
                  v405 += __clz(v407);
                }
                while (!v407);
                int v408 = v403 | 0xFFFFFFC0;
                if ((v403 & 0x3F) == 0) {
                  int v408 = 0;
                }
                if ((v403 - v405 - v408) > 0x40) {
                  goto LABEL_191;
                }
                int v404 = *(llvm::APInt **)v399;
              }
              if (*(void *)v404 < (unint64_t)v402)
              {
                uint64_t v409 = v15[1].u32[0];
                if (v409 > 0x40)
                {
                  int v721 = 0;
                  int64_t v722 = (unint64_t)(v409 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v722-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v723 = *(void *)(*(void *)v15 + 8 * v722);
                    v721 += __clz(v723);
                  }
                  while (!v723);
                  if ((v409 & 0x3F) != 0) {
                    int v724 = v409 | 0xFFFFFFC0;
                  }
                  else {
                    int v724 = 0;
                  }
                  unsigned int v410 = v721 + v724;
                }
                else
                {
                  unsigned int v410 = v409 + __clz((unint64_t)*v15) - 64;
                }
                if (v403 >= 0x41)
                {
                  int v725 = 0;
                  int64_t v726 = (unint64_t)(v403 + 63) >> 6;
                  do
                  {
                    BOOL v24 = v726-- < 1;
                    if (v24) {
                      break;
                    }
                    unint64_t v727 = *(void *)(*(void *)v399 + 8 * v726);
                    v725 += __clz(v727);
                  }
                  while (!v727);
                  int v728 = v403 | 0xFFFFFFC0;
                  if ((v403 & 0x3F) == 0) {
                    int v728 = 0;
                  }
                  if ((v403 - v725 - v728) > 0x40) {
                    goto LABEL_191;
                  }
                  char v399 = *(llvm::APInt **)v399;
                }
                if (*(void *)v399 <= (unint64_t)v410)
                {
                  uint64_t v729 = (uint64_t)a1[3];
                  uint64_t v1229 = v729;
                  long long v1230 = *(_OWORD *)(v729 + 48);
                  unint64_t v47 = (unint64_t ***)v1231;
                  uint64_t v730 = *(unsigned int *)(v729 + 8);
                  if (v730)
                  {
                    v1020 = (unsigned __int8 **)(*(void *)v729 + 8);
                    uint64_t v1021 = 16 * v730;
                    while (*((_DWORD *)v1020 - 2))
                    {
                      v1020 += 2;
                      v1021 -= 16;
                      if (!v1021) {
                        goto LABEL_1099;
                      }
                    }
                    v1231[0] = *v1020;
                    if (v1231[0])
                    {
                      llvm::MetadataTracking::track((uint64_t)v1231, v1231[0], 2);
                      uint64_t v729 = (uint64_t)a1[3];
                      v400 = v1220;
                    }
                  }
                  else
                  {
LABEL_1099:
                    v1231[0] = 0;
                  }
                  *(void *)(v729 + 48) = *((void *)v400 + 5);
                  *(void *)(v729 + 56) = (char *)v400 + 24;
                  unint64_t v731 = (void *)*((void *)v400 + 6);
                  __src = v731;
                  if (v731)
                  {
                    llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v731, 2);
                    uint64_t v732 = __src;
                  }
                  else
                  {
                    uint64_t v732 = 0;
                  }
                  sub_1CB8461A4(v729, 0, (uint64_t)v732);
                  if (__src)
                  {
                    int v880 = *(unsigned __int8 *)__src;
                    if ((v880 - 4) > 0x1E)
                    {
                      if ((v880 - 3) >= 0xFFFFFFFE) {
                        int v980 = __src;
                      }
                      else {
                        int v980 = 0;
                      }
                      if ((v880 - 3) < 0xFFFFFFFE)
                      {
                        if (v880 == 3) {
                          *((void *)__src + 1) = 0;
                        }
                        goto LABEL_1103;
                      }
                      unint64_t v882 = (unint64_t)v980 + 8;
                    }
                    else
                    {
                      if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3)) {
                        goto LABEL_1103;
                      }
                      uint64_t v881 = *((void *)__src + 2);
                      if ((v881 & 4) == 0) {
                        goto LABEL_1103;
                      }
                      unint64_t v882 = v881 & 0xFFFFFFFFFFFFFFF8;
                      if (!v882) {
                        goto LABEL_1103;
                      }
                    }
                    int8x8_t p_src = (int8x8_t)&__src;
                    sub_1CC5FA668(v882 + 16, &p_src);
                  }
LABEL_1103:
                  uint64_t v733 = a1[3];
                  uint64_t v734 = (unsigned __int8 *)v1185;
                  uint64_t v735 = *(void *)v1220;
                  __int16 v1190 = 257;
                  if (*(void *)v1185 != v735)
                  {
                    if (*(unsigned __int8 *)(v1185 + 16) <= 0x14u)
                    {
                      uint64_t v734 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t *, uint64_t, int64_t, uint64_t))(*v733[9] + 224))(v733[9], 38, v1185, v735);
                      if (v734) {
                        BOOL v808 = v734[16] >= 0x1Cu;
                      }
                      else {
                        BOOL v808 = 0;
                      }
                      if (v808)
                      {
                        (*(void (**)(unint64_t *, unsigned __int8 *, void **, unint64_t *, unint64_t *))(*v733[10] + 16))(v733[10], v734, &__src, v733[6], v733[7]);
                        uint64_t v1146 = *((unsigned int *)v733 + 2);
                        if (v1146)
                        {
                          unint64_t v1147 = *v733;
                          int v1148 = &v1147[2 * v1146];
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v734, *(_DWORD *)v1147, (llvm::MDNode *)v1147[1]);
                            v1147 += 2;
                          }
                          while (v1147 != v1148);
                        }
                      }
                    }
                    else
                    {
                      LOWORD(v1227) = 257;
                      uint64_t v734 = (unsigned __int8 *)llvm::CastInst::Create(38, v1185, v735, (const char **)&p_src, 0);
                      (*(void (**)(unint64_t *, unsigned __int8 *, void **, unint64_t *, unint64_t *))(*v733[10] + 16))(v733[10], v734, &__src, v733[6], v733[7]);
                      uint64_t v736 = *((unsigned int *)v733 + 2);
                      if (v736)
                      {
                        uint64_t v737 = *v733;
                        uint64_t v738 = &v737[2 * v736];
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v734, *(_DWORD *)v737, (llvm::MDNode *)v737[1]);
                          v737 += 2;
                        }
                        while (v737 != v738);
                      }
                    }
                  }
                  uint64_t v809 = (uint64_t)a1[3];
                  uint64_t v810 = (unint64_t *)v1200[0];
                  if (*((_DWORD *)v1200[0] + 2) >= 0x41u) {
                    uint64_t v810 = *(unint64_t **)v1200[0];
                  }
                  unint64_t v811 = *v810;
                  LOWORD(v1227) = 257;
                  unsigned int v812 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v734, v811, 0);
                  int8x8_t IntegerValue = (int8x8_t)sub_1CC2429AC(v809, (uint64_t)v734, (uint64_t)v812, (uint64_t)&p_src, 0);
                  goto LABEL_1225;
                }
              }
LABEL_191:
              uint64_t v31 = v1220;
LABEL_192:
              int v148 = *((_DWORD *)v31 + 5);
              if ((v148 & 0x40000000) != 0) {
                int v149 = (uint64_t **)*((void *)v31 - 1);
              }
              else {
                int v149 = (uint64_t **)((char *)v31 - 32 * (v148 & 0x7FFFFFF));
              }
              uint64_t v150 = **v149;
              if ((*(_DWORD *)(v150 + 8) & 0xFE) == 0x12) {
                uint64_t v150 = **(void **)(v150 + 16);
              }
              unsigned int v151 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v150);
              llvm::APInt::zextOrTrunc((uint64_t *)v15, v151, (uint64_t)&v1185);
              LODWORD(v1224) = v151;
              int8x8_t IntegerValue = (int8x8_t)&v1225;
              if (v151 > 0x40) {
                operator new[]();
              }
              LODWORD(v1226) = v151;
              int8x8_t p_src = 0;
              int8x8_t v1225 = 0;
              BOOL v152 = sub_1CCABCFBC(a1, (uint64_t)v1220, 0, &v1185);
              BOOL v153 = v152;
              if (v152)
              {
                int8x8_t IntegerValue = (int8x8_t)v1220;
              }
              else
              {
                if (v1224 < v1221)
                {
                  sub_1CB9F87DC((uint64_t *)&p_src, v1221, (uint64_t)&__src);
                }
                else if (v1224 > v1221)
                {
                  if (v1221 > 0x40) {
                    operator new[]();
                  }
                  if (v1224 >= 0x41) {
                    p_int8x8_t p_src = (int8x8_t *)p_src;
                  }
                  else {
                    p_int8x8_t p_src = &p_src;
                  }
                  unint64_t v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1221;
                  unint64_t v236 = v235;
                  if (!v1221) {
                    unint64_t v236 = 0;
                  }
                  int8x8_t v237 = *p_p_src;
                  if (v1226 >= 0x41) {
                    int8x8_t IntegerValue = v1225;
                  }
                  if (!v1221) {
                    unint64_t v235 = 0;
                  }
                  int v238 = (void *)(v235 & **(void **)&IntegerValue);
                  LODWORD(v1188[0]) = v1221;
                  __src = (void *)(v236 & *(void *)&v237);
                  LODWORD(v1189) = v1221;
                  v1188[1] = v238;
                }
                else
                {
                  LODWORD(v1188[0]) = v1224;
                  if (v1224 > 0x40) {
                    operator new[]();
                  }
                  __src = (void *)p_src;
                  LODWORD(v1189) = v1226;
                  if (v1226 > 0x40) {
                    operator new[]();
                  }
                  v1188[1] = (void *)v1225;
                }
                if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                  ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
                }
                *a4 = (int8x8_t)__src;
                a4[1].i32[0] = (__int32)v1188[0];
                LODWORD(v1188[0]) = 0;
                if (a4[3].i32[0] >= 0x41u && *(void *)v1170)
                {
                  MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
                  unsigned int v1019 = v1188[0];
                  a4[2] = (int8x8_t)v1188[1];
                  a4[3].i32[0] = (int)v1189;
                  LODWORD(v1189) = 0;
                  if (v1019 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                }
                else
                {
                  a4[2] = (int8x8_t)v1188[1];
                  a4[3].i32[0] = (int)v1189;
                }
              }
              if (v1226 >= 0x41 && *(void *)&v1225) {
                MEMORY[0x1D25D9CB0](*(void *)&v1225, 0x1000C8000313F17);
              }
              if (v1224 >= 0x41 && *(void *)&p_src) {
                MEMORY[0x1D25D9CB0](*(void *)&p_src, 0x1000C8000313F17);
              }
              if (v1186 < 0x41 || !v1185)
              {
LABEL_399:
                if (v153) {
                  goto LABEL_1601;
                }
                goto LABEL_1586;
              }
LABEL_398:
              MEMORY[0x1D25D9CB0]();
              goto LABEL_399;
            case 'C':
              goto LABEL_192;
            case 'D':
              int v127 = *((_DWORD *)v31 + 5);
              if ((v127 & 0x40000000) != 0) {
                uint64_t v128 = (uint64_t **)*((void *)v31 - 1);
              }
              else {
                uint64_t v128 = (uint64_t **)((char *)v31 - 32 * (v127 & 0x7FFFFFF));
              }
              uint64_t v176 = **v128;
              if ((*(_DWORD *)(v176 + 8) & 0xFE) == 0x12) {
                uint64_t v176 = **(void **)(v176 + 16);
              }
              unsigned int v177 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v176);
              unsigned int v178 = v177;
              unsigned int v179 = v15[1].u32[0];
              if (v177 > 0x40)
              {
                if (v179 != v177) {
                  operator new[]();
                }
                sub_1CD0463BC((uint64_t)&v1185, (uint64_t)v15);
              }
              else
              {
                int64_t v180 = v15;
                if (v179 >= 0x41) {
                  int64_t v180 = (int8x8_t *)*v15;
                }
                int8x8_t v181 = *v180;
                unsigned int v1186 = v177;
                if (v177) {
                  unint64_t v182 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v177;
                }
                else {
                  unint64_t v182 = 0;
                }
                int64_t v1185 = v182 & *(void *)&v181;
              }
              uint64_t v183 = v15[1].u32[0];
              if (v183 > 0x40)
              {
                int v185 = 0;
                int64_t v186 = (unint64_t)(v183 + 63) >> 6;
                do
                {
                  BOOL v24 = v186-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v187 = *(void *)(*(void *)v15 + 8 * v186);
                  v185 += __clz(v187);
                }
                while (!v187);
                int v188 = v183 | 0xFFFFFFC0;
                if ((v183 & 0x3F) == 0) {
                  int v188 = 0;
                }
                int v184 = v185 + v188;
              }
              else
              {
                int v184 = v183 + __clz((unint64_t)*v15) - 64;
              }
              if ((int)v183 - v184 > v178)
              {
                uint64_t v189 = 1 << (v178 - 1);
                if (v1186 > 0x40) {
                  *(void *)(v1185 + 8 * ((v178 - 1) >> 6)) |= v189;
                }
                else {
                  v1185 |= v189;
                }
              }
              LODWORD(v1188[0]) = v178;
              if (v178 > 0x40) {
                operator new[]();
              }
              LODWORD(v1189) = v178;
              __src = 0;
              v1188[1] = 0;
              if (sub_1CCABCFBC(a1, (uint64_t)v1220, 0, &v1185))
              {
                char v104 = 0;
                int8x8_t IntegerValue = (int8x8_t)v1220;
                goto LABEL_612;
              }
              if (LODWORD(v1188[0]) >= 0x41) {
                uint64_t v265 = (void **)((char *)__src + 8 * ((LODWORD(v1188[0]) - 1) >> 6));
              }
              else {
                uint64_t v265 = &__src;
              }
              if (((unint64_t)*v265 >> (LOBYTE(v1188[0]) - 1))) {
                goto LABEL_576;
              }
              uint64_t v266 = v15[1].u32[0];
              if (v266 > 0x40)
              {
                int v377 = 0;
                int64_t v378 = (unint64_t)(v266 + 63) >> 6;
                do
                {
                  BOOL v24 = v378-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v379 = *(void *)(*(void *)v15 + 8 * v378);
                  v377 += __clz(v379);
                }
                while (!v379);
                int v380 = v266 | 0xFFFFFFC0;
                if ((v266 & 0x3F) == 0) {
                  int v380 = 0;
                }
                int v267 = v377 + v380;
              }
              else
              {
                int v267 = v266 + __clz((unint64_t)*v15) - 64;
              }
              if ((int)v266 - v267 <= v178)
              {
LABEL_576:
                v385 = operator new(0x60uLL);
                v386 = (llvm::Value *)(v385 + 8);
                v385[13] = v385[13] & 0x38000000 | 1;
                *(void *)v385 = 0;
                *((void *)v385 + 1) = 0;
                *((void *)v385 + 2) = 0;
                *((void *)v385 + 3) = v385 + 8;
                int v387 = *((_DWORD *)v1220 + 5);
                if ((v387 & 0x40000000) != 0) {
                  uint64_t v388 = (llvm::Value **)*((void *)v1220 - 1);
                }
                else {
                  uint64_t v388 = (llvm::Value **)((char *)v1220 - 32 * (v387 & 0x7FFFFFF));
                }
                uint64_t v389 = *v388;
                if ((v387 & 0x10000000) != 0)
                {
                  uint64_t v390 = ***(void ***)v1220;
                  uint64_t v391 = *(void *)(v390 + 152);
                  uint64_t v392 = *(unsigned int *)(v390 + 168);
                  if (v392)
                  {
                    LODWORD(v393) = (v392 - 1) & ((v1220 >> 4) ^ (v1220 >> 9));
                    uint64_t v394 = v391 + 16 * v393;
                    v395 = *(llvm::Instruction **)v394;
                    if (*(llvm::Instruction **)v394 != v1220)
                    {
                      int v396 = 1;
                      do
                      {
                        if (v395 == (llvm::Instruction *)-4096) {
                          goto LABEL_609;
                        }
                        int v397 = v393 + v396++;
                        uint64_t v393 = v397 & (v392 - 1);
                        v395 = *(llvm::Instruction **)(v391 + 16 * v393);
                      }
                      while (v395 != v1220);
                      uint64_t v394 = v391 + 16 * v393;
                    }
                  }
                  else
                  {
LABEL_609:
                    uint64_t v394 = v391 + 16 * v392;
                  }
                  unsigned int v417 = *(void **)(v394 + 8);
                  uint64_t v420 = (llvm::APInt **)*v417;
                  v418 = (char *)(v417 + 2);
                  uint64_t v419 = v420;
                }
                else
                {
                  uint64_t v419 = 0;
                  v418 = &byte_1CFBCE98E;
                }
                LOWORD(v1227) = 261;
                int8x8_t p_src = (int8x8_t)v418;
                v1224 = v419;
                llvm::ZExtInst::ZExtInst((llvm::ZExtInst *)(v385 + 8), v389, (llvm::Type *)v16, (const char **)&p_src, 0);
                int8x8_t IntegerValue = (int8x8_t)sub_1CC9D2AB4((uint64_t)a1, v386, (uint64_t)v1220);
                char v104 = 0;
                goto LABEL_612;
              }
              unsigned int v381 = v1221;
              llvm::APInt::sext((uint64_t)&__src, v1221, (uint64_t)&p_src);
              llvm::APInt::sext((uint64_t)&v1188[1], v381, (uint64_t)&v1229);
              int8x8_t IntegerValue = (int8x8_t)v1224;
              int8x8_t v382 = p_src;
              __int32 v383 = v1230;
              uint64_t v384 = v1229;
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = v382;
              a4[1].i32[0] = IntegerValue.i32[0];
              if (a4[3].i32[0] >= 0x41u && *(void *)v1170) {
                MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
              }
              a4[2] = (int8x8_t)v384;
              a4[3].i32[0] = v383;
              char v104 = 1;
LABEL_612:
              if (v1189 >= 0x41 && v1188[1]) {
                MEMORY[0x1D25D9CB0](v1188[1], 0x1000C8000313F17);
              }
              if (LODWORD(v1188[0]) >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (v1186 < 0x41 || !v1185) {
                goto LABEL_1585;
              }
              goto LABEL_1492;
            case 'M':
              int v129 = *((_DWORD *)v31 + 5);
              if ((v129 & 0x40000000) != 0) {
                uint64_t v130 = (uint64_t **)*((void *)v31 - 1);
              }
              else {
                uint64_t v130 = (uint64_t **)((char *)v31 - 32 * (v129 & 0x7FFFFFF));
              }
              uint64_t v190 = **v130;
              if ((*(_DWORD *)(v190 + 8) & 0xFE) == 0x12) {
                int v191 = *(unsigned __int8 *)(**(void **)(v190 + 16) + 8);
              }
              else {
                int v191 = *(_DWORD *)(v190 + 8);
              }
              if (v191 != 13) {
                goto LABEL_1600;
              }
              int8x8_t v192 = *(int8x8_t *)v31;
              if (*(void *)v31 && (*(_DWORD *)(*(void *)&v192 + 8) & 0xFE) == 0x12)
              {
                if ((v129 & 0x40000000) != 0) {
                  uint64_t v193 = (uint64_t **)*((void *)v31 - 1);
                }
                else {
                  uint64_t v193 = (uint64_t **)((char *)v31 - 32 * (v129 & 0x7FFFFFF));
                }
                int8x8_t IntegerValue = 0;
                uint64_t v326 = **v193;
                if (!v326 || (*(_DWORD *)(v326 + 8) & 0xFE) != 0x12) {
                  goto LABEL_1601;
                }
                if (*(_DWORD *)(*(void *)&v192 + 32) != *(_DWORD *)(v326 + 32)) {
                  goto LABEL_1600;
                }
              }
              else
              {
                if ((v129 & 0x40000000) != 0) {
                  uint64_t v264 = (char *)*((void *)v31 - 1);
                }
                else {
                  uint64_t v264 = (char *)v31 - 32 * (v129 & 0x7FFFFFF);
                }
                if ((*(_DWORD *)(**(void **)v264 + 8) & 0xFE) == 0x12) {
                  goto LABEL_1600;
                }
              }
              if (sub_1CCABCFBC(a1, (uint64_t)v31, 0, (uint64_t *)v15)) {
                goto LABEL_503;
              }
              goto LABEL_1586;
            case 'T':
              char v1173 = 0;
              uint64_t v141 = *((void *)v31 - 4);
              if (!v141) {
                goto LABEL_184;
              }
              if (*(unsigned char *)(v141 + 16)
                || *(void *)(v141 + 24) != *((void *)v31 + 9)
                || (*(unsigned char *)(v141 + 33) & 0x20) == 0)
              {
                goto LABEL_182;
              }
              int v502 = *(_DWORD *)(v141 + 36);
              if (v502 > 147)
              {
                if ((v502 - 148) >= 2)
                {
                  if (v502 == 305)
                  {
                    __src = 0;
                    unsigned int v753 = v15[1].u32[0];
                    if (v753 > 0x40)
                    {
                      unsigned __int32 v505 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v15);
                    }
                    else
                    {
                      unsigned int v754 = __clz(__rbit64((unint64_t)*v15));
                      if (v753 >= v754) {
                        unsigned __int32 v505 = v754;
                      }
                      else {
                        unsigned __int32 v505 = v15[1].u32[0];
                      }
                    }
                    int v794 = (unsigned __int8 *)((void *)v31 - 4 * (*((_DWORD *)v31 + 5) & 0x7FFFFFF))[4];
                    int8x8_t p_src = (int8x8_t)&__src;
                    v1224 = 0;
                    if (!sub_1CBF528D8((uint64_t)&p_src, v794)) {
                      goto LABEL_182;
                    }
                    uint64_t v795 = *((unsigned int *)__src + 2);
                    if (v795 > 0x40)
                    {
                      int v824 = 0;
                      int64_t v825 = (unint64_t)(v795 + 63) >> 6;
                      do
                      {
                        BOOL v24 = v825-- < 1;
                        if (v24) {
                          break;
                        }
                        unint64_t v826 = *(void *)(*(void *)__src + 8 * v825);
                        v824 += __clz(v826);
                      }
                      while (!v826);
                      int v827 = v795 | 0xFFFFFFC0;
                      if ((v795 & 0x3F) == 0) {
                        int v827 = 0;
                      }
                      int v796 = v824 + v827;
                    }
                    else
                    {
                      int v796 = v795 + __clz(*(void *)__src) - 64;
                    }
                    unsigned __int32 v823 = v795 - v796;
LABEL_1265:
                    if (v505 >= v823)
                    {
LABEL_1266:
                      uint64_t v599 = (int8x8_t *)((char *)v31 - 32 * (*((_DWORD *)v31 + 5) & 0x7FFFFFF));
LABEL_891:
                      int8x8_t IntegerValue = *v599;
                      goto LABEL_1601;
                    }
                    goto LABEL_182;
                  }
                  if (v502 == 306)
                  {
                    __src = 0;
                    unsigned int v503 = v15[1].u32[0];
                    if (v503 > 0x40)
                    {
                      unsigned __int32 v505 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v15);
                    }
                    else
                    {
                      unsigned int v504 = __clz(__rbit64((unint64_t)*v15));
                      if (v503 >= v504) {
                        unsigned __int32 v505 = v504;
                      }
                      else {
                        unsigned __int32 v505 = v15[1].u32[0];
                      }
                    }
                    unint64_t v791 = (unsigned __int8 *)((void *)v31 - 4 * (*((_DWORD *)v31 + 5) & 0x7FFFFFF))[4];
                    int8x8_t p_src = (int8x8_t)&__src;
                    v1224 = 0;
                    if (!sub_1CBF528D8((uint64_t)&p_src, v791)) {
                      goto LABEL_182;
                    }
                    unsigned int v792 = *((_DWORD *)__src + 2);
                    if (v792 > 0x40)
                    {
                      int v793 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)__src);
                    }
                    else if (v792)
                    {
                      int v793 = __clz(~(*(void *)__src << -(char)v792));
                    }
                    else
                    {
                      int v793 = 0;
                    }
                    unsigned __int32 v823 = v792 - v793;
                    goto LABEL_1265;
                  }
LABEL_1120:
                  unsigned int v1172 = v15[1].u32[0];
                  if (v1172 > 0x40) {
                    operator new[]();
                  }
                  int8x8_t v1171 = *v15;
                  unint64_t v786 = sub_1CC9D1550((uint64_t)a1, (uint64_t)v31, (uint64_t)&v1171);
                  int8x8_t IntegerValue = (int8x8_t)v786;
                  char v788 = v787;
                  if (v1172 >= 0x41 && *(void *)&v1171) {
                    MEMORY[0x1D25D9CB0](*(void *)&v1171, 0x1000C8000313F17);
                  }
                  if (v788) {
                    goto LABEL_1601;
                  }
                  goto LABEL_182;
                }
                v1200[0] = 0;
                int v711 = *((_DWORD *)v31 + 5);
                if ((v711 & 0x40000000) != 0) {
                  int v712 = (char *)*((void *)v31 - 1);
                }
                else {
                  int v712 = (char *)v31 - 32 * (v711 & 0x7FFFFFF);
                }
                unsigned int v745 = (unsigned __int8 *)*((void *)v712 + 8);
                int8x8_t p_src = (int8x8_t)v1200;
                v1224 = 0;
                if ((sub_1CBF528D8((uint64_t)&p_src, v745) & 1) == 0) {
                  goto LABEL_182;
                }
                int v746 = llvm::APInt::urem((uint64_t **)v1200[0], v1221);
                if (*(_DWORD *)(*((void *)v31 - 4) + 36) == 149) {
                  int v747 = v1221 - v746;
                }
                else {
                  int v747 = v746;
                }
                unsigned int v748 = v15[1].u32[0];
                LODWORD(v1224) = v748;
                if (v748 > 0x40) {
                  operator new[]();
                }
                if (v748 == v747) {
                  int8x8_t p_src = 0;
                }
                else {
                  int8x8_t p_src = (int8x8_t)(*(unint64_t *)v15 >> v747);
                }
                int v749 = v1221 - v747;
                unsigned int v750 = v15[1].u32[0];
                LODWORD(v1188[0]) = v750;
                if (v750 > 0x40) {
                  operator new[]();
                }
                uint64_t v751 = *(void *)v15 << v749;
                if (v750 == v749) {
                  uint64_t v751 = 0;
                }
                if (v750) {
                  unint64_t v752 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v750;
                }
                else {
                  unint64_t v752 = 0;
                }
                __src = (void *)(v752 & v751);
                BOOL v789 = sub_1CCABCFBC(a1, (uint64_t)v1220, 0, (uint64_t *)&p_src);
                if (v789 || sub_1CCABCFBC(a1, (uint64_t)v1220, 1u, (uint64_t *)&__src))
                {
                  char v790 = 0;
                  int8x8_t IntegerValue = (int8x8_t)v1220;
                  goto LABEL_1367;
                }
                LODWORD(v1230) = v1217;
                if (v1217 > 0x40) {
                  operator new[]();
                }
                unint64_t v821 = v1216 << v747;
                if (v1217 == v747) {
                  unint64_t v821 = 0;
                }
                if (v1217) {
                  unint64_t v822 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1217;
                }
                else {
                  unint64_t v822 = 0;
                }
                uint64_t v1229 = v822 & v821;
                unsigned int v854 = v1221 - v747;
                unsigned int v855 = v1213;
                unsigned int v1186 = v1213;
                if (v1213 > 0x40) {
                  operator new[]();
                }
                if (v1213 == v854)
                {
                  if (v854 > 0x40)
                  {
                    uint64_t v857 = v1229;
                    if (v1213)
                    {
                      size_t v1164 = 0;
                      uint64_t v1031 = 0;
                      unint64_t v1030 = ((unint64_t)v1213 + 63) >> 6;
                      do
                      {
                        *(void *)(8 * v1031) |= *(void *)(v857 + 8 * v1031);
                        ++v1031;
                      }
                      while (v1030 != v1031);
                    }
                    else
                    {
                      size_t v1164 = 0;
                    }
LABEL_1338:
                    if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                      ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
                    }
                    *a4 = (int8x8_t)v1164;
                    a4[1].i32[0] = v855;
                    if (v1230 >= 0x41 && v857 != 0) {
                      MEMORY[0x1D25D9CB0](v857, 0x1000C8000313F17);
                    }
                    LODWORD(v1230) = v1219;
                    if (v1219 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v859 = v1218 << v747;
                    if (v1219 == v747) {
                      unint64_t v859 = 0;
                    }
                    if (v1219) {
                      unint64_t v860 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1219;
                    }
                    else {
                      unint64_t v860 = 0;
                    }
                    uint64_t v1229 = v860 & v859;
                    unsigned int v861 = v1221 - v747;
                    unsigned int v862 = v1215;
                    unsigned int v1186 = v1215;
                    if (v1215 > 0x40) {
                      operator new[]();
                    }
                    if (v1215 == v861)
                    {
                      if (v861 > 0x40)
                      {
                        int8x8_t IntegerValue = (int8x8_t)v1229;
                        unint64_t v864 = 0;
                        if (v1215)
                        {
                          uint64_t v1033 = 0;
                          unint64_t v1032 = ((unint64_t)v1215 + 63) >> 6;
                          do
                          {
                            *(void *)(8 * v1033) |= *(void *)(*(void *)&IntegerValue + 8 * v1033);
                            ++v1033;
                          }
                          while (v1032 != v1033);
                        }
                        goto LABEL_1358;
                      }
                      unint64_t v863 = 0;
                      unsigned int v862 = v861;
                    }
                    else
                    {
                      unint64_t v863 = v1214 >> v861;
                      int64_t v1185 = v1214 >> v861;
                    }
                    int8x8_t IntegerValue = (int8x8_t)v1229;
                    unint64_t v864 = v863 | v1229;
LABEL_1358:
                    if (a4[3].i32[0] >= 0x41u && *(void *)v1170) {
                      MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
                    }
                    a4[2] = (int8x8_t)v864;
                    a4[3].i32[0] = v862;
                    if (v1230 >= 0x41 && *(void *)&IntegerValue != 0) {
                      MEMORY[0x1D25D9CB0](*(void *)&IntegerValue, 0x1000C8000313F17);
                    }
                    char v790 = 1;
                    char v1173 = 1;
LABEL_1367:
                    if (LODWORD(v1188[0]) >= 0x41 && __src) {
                      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                    }
                    if ((v790 & 1) == 0) {
                      goto LABEL_1601;
                    }
                    goto LABEL_182;
                  }
                  unint64_t v856 = 0;
                  unsigned int v855 = v1221 - v747;
                }
                else
                {
                  unint64_t v856 = v1212 >> v854;
                  int64_t v1185 = v1212 >> v854;
                }
                uint64_t v857 = v1229;
                size_t v1164 = v856 | v1229;
                goto LABEL_1338;
              }
              switch(v502)
              {
                case 1:
                  uint64_t v739 = v15[1].u32[0];
                  uint64_t v740 = v15;
                  if (v739 >= 0x41)
                  {
                    int v741 = 0;
                    int64_t v742 = (unint64_t)(v739 + 63) >> 6;
                    do
                    {
                      BOOL v24 = v742-- < 1;
                      if (v24) {
                        break;
                      }
                      unint64_t v743 = *(void *)(*(void *)v15 + 8 * v742);
                      v741 += __clz(v743);
                    }
                    while (!v743);
                    int v744 = v739 | 0xFFFFFFC0;
                    if ((v739 & 0x3F) == 0) {
                      int v744 = 0;
                    }
                    if ((v739 - v741 - v744) > 0x40) {
                      break;
                    }
                    uint64_t v740 = (int8x8_t *)*v15;
                  }
                  if (*v740 == 1) {
                    goto LABEL_1266;
                  }
                  break;
                case 9:
                  uint64_t v755 = v15[1].u32[0];
                  if (v755 > 0x40)
                  {
                    int v797 = 0;
                    int64_t v798 = (unint64_t)(v755 + 63) >> 6;
                    do
                    {
                      BOOL v24 = v798-- < 1;
                      if (v24) {
                        break;
                      }
                      unint64_t v799 = *(void *)(*(void *)v15 + 8 * v798);
                      v797 += __clz(v799);
                    }
                    while (!v799);
                    if ((v755 & 0x3F) != 0) {
                      int v800 = v755 | 0xFFFFFFC0;
                    }
                    else {
                      int v800 = 0;
                    }
                    int v756 = v797 + v800;
                    __int32 v758 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v15);
                  }
                  else
                  {
                    int v756 = v755 + __clz((unint64_t)*v15) - 64;
                    unsigned int v757 = __clz(__rbit64((unint64_t)*v15));
                    if (v755 >= v757) {
                      __int32 v758 = v757;
                    }
                    else {
                      __int32 v758 = v15[1].i32[0];
                    }
                  }
                  unsigned int v801 = v756 & 0xFFFFFFF8;
                  unsigned int v802 = v758 & 0xFFFFFFF8;
                  if (v11 - (v758 & 0xFFFFFFF8) - (v756 & 0xFFFFFFF8) != 8) {
                    break;
                  }
                  int v803 = (void *)*((void *)v31 - 4 * (*((_DWORD *)v31 + 5) & 0x7FFFFFF));
                  BOOL v804 = *(llvm::ConstantInt **)v31;
                  if (v801 <= v802)
                  {
                    unsigned int v805 = llvm::ConstantInt::get(v804, (v802 - v801) & 0xFFFFFFF8, 0);
                    LOWORD(v1227) = 257;
                    char v806 = 25;
                  }
                  else
                  {
                    unsigned int v805 = llvm::ConstantInt::get(v804, (v801 - v802) & 0xFFFFFFF8, 0);
                    LOWORD(v1227) = 257;
                    char v806 = 26;
                  }
                  uint64_t v828 = (int32x2_t ****)llvm::BinaryOperator::Create(v806, v803, (uint64_t)v805, (const char **)&p_src, 0);
                  llvm::Value::takeName(v828, v1220);
                  BOOL v499 = v1220;
                  uint64_t v500 = (uint64_t)a1;
                  int v498 = (llvm::Value *)v828;
LABEL_758:
                  uint64_t v501 = sub_1CC9D2AB4(v500, v498, (uint64_t)v499);
                  goto LABEL_1599;
                case 53:
                  __src = 0;
                  uint64_t v653 = v15[1].u32[0];
                  BOOL v654 = v15;
                  if (v653 >= 0x41)
                  {
                    int v655 = 0;
                    int64_t v656 = (unint64_t)(v653 + 63) >> 6;
                    do
                    {
                      BOOL v24 = v656-- < 1;
                      if (v24) {
                        break;
                      }
                      unint64_t v657 = *(void *)(*(void *)v15 + 8 * v656);
                      v655 += __clz(v657);
                    }
                    while (!v657);
                    int v658 = v653 | 0xFFFFFFC0;
                    if ((v653 & 0x3F) == 0) {
                      int v658 = 0;
                    }
                    if ((v653 - v655 - v658) > 0x40) {
                      break;
                    }
                    BOOL v654 = (int8x8_t *)*v15;
                  }
                  if (*v654 == 1)
                  {
                    uint64_t v659 = (llvm::Type *)v16;
                    if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12) {
                      uint64_t v659 = **(llvm::Type ***)(v16 + 16);
                    }
                    if ((llvm::Type::getPrimitiveSizeInBits(v659) & 1) == 0)
                    {
                      uint64_t v660 = *((void *)v31 - 4 * (*((_DWORD *)v31 + 5) & 0x7FFFFFF));
                      int8x8_t p_src = (int8x8_t)&__src;
                      if (sub_1CBF686A0(&p_src, 30, v660))
                      {
                        unsigned int v661 = *(uint64_t ***)(*(void *)(*((void *)v31 + 5) + 56) + 40);
                        int8x8_t p_src = *(int8x8_t *)v31;
                        uint64_t Declaration = llvm::Intrinsic::getDeclaration(v661, 53, (uint64_t)&p_src, 1);
                        std::string::size_type v663 = (uint64_t **)Declaration;
                        if (Declaration) {
                          int v664 = *(uint64_t ***)(Declaration + 24);
                        }
                        else {
                          int v664 = 0;
                        }
                        uint64_t v1229 = (uint64_t)__src;
                        LOWORD(v1227) = 257;
                        v947 = (char *)operator new(0x90uLL);
                        *((_DWORD *)v947 + 21) = *((_DWORD *)v947 + 21) & 0x38000000 | 2;
                        v948 = (llvm::Value *)(v947 + 64);
                        *(void *)v947 = 0;
                        *((void *)v947 + 1) = 0;
                        *((void *)v947 + 2) = 0;
                        *((void *)v947 + 3) = v947 + 64;
                        *((void *)v947 + 4) = 0;
                        *((void *)v947 + 5) = 0;
                        *((void *)v947 + 6) = 0;
                        *((void *)v947 + 7) = v947 + 64;
                        *((void *)v947 + 8) = *v664[2];
                        *((void *)v947 + 9) = 0;
                        v947[80] = 84;
                        v947[81] = 0;
                        *((_WORD *)v947 + 41) = 0;
                        *((_DWORD *)v947 + 21) = 2;
                        *((_DWORD *)v947 + 30) = 0;
                        *(_OWORD *)(v947 + 104) = 0u;
                        *(_OWORD *)(v947 + 88) = 0u;
                        *((void *)v947 + 16) = 0;
                        llvm::CallInst::init((uint64_t ***)v947 + 8, v664, v663, &v1229, 1, 0, 0, (const char **)&p_src);
                        BOOL v499 = v1220;
                        uint64_t v500 = (uint64_t)a1;
                        int v498 = v948;
                        goto LABEL_758;
                      }
                    }
                  }
                  break;
                default:
                  goto LABEL_1120;
              }
LABEL_182:
              if (v1173) {
                goto LABEL_1586;
              }
              unsigned int v7 = v1222;
LABEL_184:
              uint64_t v142 = (llvm::APInt **)a1[7];
              char v143 = a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu || (unsigned int v6 = (llvm::Instruction *)a2, !*(void *)(a2 + 40))) {
                  unsigned int v6 = 0;
                }
              }
              int8x8_t p_src = (int8x8_t)a1[10];
              v1224 = v142;
              int8x8_t v1225 = (int8x8_t)v6;
              int64_t v1226 = v143;
              uint64_t v1227 = 0;
              char v1228 = 1;
              uint64_t v119 = (llvm::Instruction *)a2;
LABEL_187:
              uint64_t v144 = a4;
              unsigned int v145 = v7;
              goto LABEL_544;
            case 'U':
              if (sub_1CCABCFBC(a1, (uint64_t)v31, 2u, (uint64_t *)v15)
                || sub_1CCABCFBC(a1, (uint64_t)v1220, 1u, (uint64_t *)v15)
                || (sub_1CCABD3A0((uint64_t)v1220, 1u, (unint64_t *)v15) & 1) != 0
                || (sub_1CCABD3A0((uint64_t)v1220, 2u, (unint64_t *)v15) & 1) != 0)
              {
                goto LABEL_503;
              }
              unsigned int v137 = v1217;
              if (v1217 > 0x40) {
                operator new[]();
              }
              unint64_t v138 = v1212 & v1216;
              unsigned int v139 = v1219;
              if (v1219 > 0x40) {
                operator new[]();
              }
              int8x8_t v140 = (int8x8_t)(v1214 & v1218);
              if (a4[1].i32[0] >= 0x41u && *(void *)a4) {
                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a4, 0x1000C8000313F17);
              }
              *a4 = (int8x8_t)v138;
              a4[1].i32[0] = v137;
              if (a4[3].i32[0] >= 0x41u && *(void *)v1170) {
                MEMORY[0x1D25D9CB0](*(void *)v1170, 0x1000C8000313F17);
              }
              a4[2] = v140;
              a4[3].i32[0] = v139;
              goto LABEL_1586;
            default:
              unint64_t v117 = (llvm::APInt **)a1[7];
              uint64_t v118 = a1[9];
              if (!v6 || !*((void *)v6 + 5))
              {
                if (*((unsigned __int8 *)v31 + 16) < 0x1Cu || (unsigned int v6 = v31, !*((void *)v31 + 5))) {
                  unsigned int v6 = 0;
                }
              }
              int8x8_t p_src = (int8x8_t)a1[10];
              v1224 = v117;
              int8x8_t v1225 = (int8x8_t)v6;
              int64_t v1226 = v118;
              uint64_t v1227 = 0;
              char v1228 = 1;
              uint64_t v119 = v31;
              goto LABEL_187;
          }
        }
      }
      else
      {
        *int v15 = (int8x8_t)-1;
        if (v33) {
          goto LABEL_53;
        }
      }
      unint64_t v34 = 0;
      goto LABEL_54;
    }
  }
  else if (*v15)
  {
    goto LABEL_13;
  }

  return llvm::UndefValue::get((llvm::UndefValue *)v16, (llvm::Type *)a2);
}

BOOL sub_1CCABCFBC(void *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v6 = a2 - 32 * (v5 & 0x7FFFFFF);
  }
  unsigned int v7 = (uint64_t *)(v6 + 32 * a3);
  uint64_t v8 = *v7;
  unsigned int v14 = *((_DWORD *)a4 + 2);
  if (v14 > 0x40) {
    operator new[]();
  }
  uint64_t v13 = *a4;
  uint64_t v9 = sub_1CCAB38C4((int)a1, v8, (llvm::APInt *)&v13);
  if (v14 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t ***)*v7;
    if (*v7) {
      BOOL v11 = *(unsigned __int8 *)(*v7 + 16) >= 0x1Cu;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      int v15 = v17;
      uint64_t v16 = 0x100000000;
      llvm::findDbgUsers((uint64_t)&v15, v10);
      llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v10, (uint64_t *)v15, v16);
      if (v15 != v17) {
        free(v15);
      }
    }
    sub_1CC9DFE20(a1, v7, v9);
  }
  return v9 != 0;
}

uint64_t sub_1CCABD174(uint64_t a1, unsigned int a2, void **a3)
{
  int v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v7 = a1 - 32 * (v6 & 0x7FFFFFF);
  }
  uint64_t v8 = *(unsigned __int8 **)(v7 + 32 * a2);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int8x8_t v30 = &v32;
  uint64_t result = sub_1CBF528D8((uint64_t)&v30, v8);
  if (result)
  {
    uint64_t v11 = *(unsigned int *)(v32 + 8);
    if (v11 > 0x40)
    {
      unsigned int v14 = *(uint64_t **)v32;
      int v15 = *a3;
      unint64_t v16 = (unint64_t)(v11 + 63) >> 6;
      do
      {
        uint64_t v18 = *v14++;
        uint64_t v17 = v18;
        uint64_t v19 = *v15++;
        if ((v17 & ~v19) != 0) {
          operator new[]();
        }
        uint64_t result = 0;
        --v16;
      }
      while (v16);
    }
    else if ((*(void *)v32 & ~(unint64_t)*a3) != 0)
    {
      uint64_t v12 = *(void *)v8;
      uint64_t v13 = (uint64_t *)((unint64_t)*a3 & *(void *)v32);
      LODWORD(v31) = *(_DWORD *)(v32 + 8);
      int8x8_t v30 = v13;
      int v20 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, (llvm::LLVMContext *)&v30, v10);
      Splat = v20;
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v12 + 32) | ((unint64_t)(*(_DWORD *)(v12 + 8) == 19) << 32)), (uint64_t)v20);
      }
      int v22 = *(_DWORD *)(a1 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v23 = a1 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v24 = v23 + 32 * a2;
      if (*(void *)v24)
      {
        **(void **)(v24 + 16) = *(void *)(v24 + 8);
        uint64_t v25 = *(void *)(v24 + 8);
        if (v25) {
          *(void *)(v25 + 16) = *(void *)(v24 + 16);
        }
      }
      *(void *)uint64_t v24 = Splat;
      if (Splat)
      {
        uint64_t v28 = *((void *)Splat + 1);
        unsigned __int32 v26 = (void *)((char *)Splat + 8);
        uint64_t v27 = v28;
        uint64_t v29 = v23 + 32 * a2;
        *(void *)(v29 + 8) = v28;
        if (v28) {
          *(void *)(v27 + 16) = v29 + 8;
        }
        *(void *)(v29 + 16) = v26;
        *unsigned __int32 v26 = v24;
      }
      if (v31 >= 0x41)
      {
        if (v30) {
          MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CCABD3A0(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v7 = a1 - 32 * (v6 & 0x7FFFFFF);
  }
  uint64_t v33 = 0;
  uint64_t v8 = *(unsigned __int8 **)(v7 + 32 * a2);
  unsigned __int32 v26 = &v33;
  uint64_t v27 = 0;
  uint64_t result = sub_1CBF528D8((uint64_t)&v26, v8);
  if (!result) {
    return result;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v30 = 0;
  int v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(uint64_t **)(a1 - 8);
  }
  else {
    uint64_t v11 = (uint64_t *)(a1 - 32 * (v10 & 0x7FFFFFF));
  }
  uint64_t v12 = *v11;
  unsigned __int32 v26 = (uint64_t *)&v30;
  uint64_t v27 = &v32;
  uint64_t v28 = &v31;
  uint64_t v29 = 0;
  if (!sub_1CCAAA1BC((uint64_t)&v26, v12)
    || *(unsigned __int8 *)(v32 + 16) < 0x15u
    || *((_DWORD *)v31 + 2) != *(_DWORD *)(v33 + 8))
  {
    return sub_1CCABD174(a1, a2, (void **)a3);
  }
  uint64_t v14 = *((unsigned int *)v31 + 2);
  if (v14 <= 0x40)
  {
    if (*(void *)v31 == *(void *)v33) {
      return 0;
    }
    if (*(_DWORD *)(v33 + 8) > 0x40u) {
      operator new[]();
    }
    if ((*a3 & *(void *)v31) == (*a3 & *(void *)v33))
    {
      uint64_t v15 = a2;
      unint64_t v16 = *(llvm::ConstantInt ***)a1;
      Splat = llvm::ConstantInt::get(**(llvm::ConstantInt ***)a1, v31, v13);
      if ((v16[1] & 0xFE) == 0x12) {
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v16 + 8) | ((unint64_t)(*((_DWORD *)v16 + 2) == 19) << 32)), (uint64_t)Splat);
      }
      int v18 = *(_DWORD *)(a1 + 20);
      if ((v18 & 0x40000000) != 0) {
        uint64_t v19 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v19 = a1 - 32 * (v18 & 0x7FFFFFF);
      }
      uint64_t v20 = v19 + 32 * v15;
      if (*(void *)v20)
      {
        **(void **)(v20 + 16) = *(void *)(v20 + 8);
        uint64_t v21 = *(void *)(v20 + 8);
        if (v21) {
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
        }
      }
      *(void *)uint64_t v20 = Splat;
      if (Splat)
      {
        uint64_t v24 = Splat[1];
        int v22 = Splat + 1;
        uint64_t v23 = v24;
        uint64_t v25 = v19 + 32 * v15;
        *(void *)(v25 + 8) = v24;
        if (v24) {
          *(void *)(v23 + 16) = v25 + 8;
        }
        *(void *)(v25 + 16) = v22;
        uint64_t *v22 = v20;
      }
      return 1;
    }
    return sub_1CCABD174(a1, a2, (void **)a3);
  }
  uint64_t result = memcmp(*(const void **)v31, *(const void **)v33, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
  if (result) {
    operator new[]();
  }
  return result;
}

BOOL sub_1CCABD6F0(uint64_t a1, unint64_t *a2)
{
  int v4 = *(unint64_t **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 8);
  if (v5 > 0x40)
  {
    int v7 = 0;
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      if (v8-- < 1) {
        break;
      }
      unint64_t v10 = *(void *)(*v4 + 8 * v8);
      v7 += __clz(v10);
    }
    while (!v10);
    if ((v5 & 0x3F) != 0) {
      int v11 = v5 | 0xFFFFFFC0;
    }
    else {
      int v11 = 0;
    }
    int v6 = v7 + v11;
  }
  else
  {
    int v6 = v5 + __clz(*v4) - 64;
  }
  uint64_t v12 = *(void **)(a1 + 24);
  unsigned int v13 = **(_DWORD **)(a1 + 8);
  unsigned int v17 = v13;
  if (v13 >= 0x41) {
    operator new[]();
  }
  unint64_t v14 = 0;
  uint64_t v16 = 0;
  if (v13 != v6)
  {
    if (v13 - v6 > 0x40) {
      llvm::APInt::setBitsSlowCase(&v16, 0, v13 - v6);
    }
    else {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> (v6 - v13);
    }
  }
  if (*((_DWORD *)a2 + 2) >= 0x41u && *a2) {
    MEMORY[0x1D25D9CB0](*a2, 0x1000C8000313F17);
  }
  *a2 = v14;
  *((_DWORD *)a2 + 2) = v13;
  if ((sub_1CCABD174(**(void **)(a1 + 16), 0, (void **)a2) & 1) != 0
    || sub_1CCABCFBC(v12, **(void **)(a1 + 16), 0, (uint64_t *)a2)
    || (sub_1CCABD174(**(void **)(a1 + 16), 1u, (void **)a2) & 1) != 0
    || (BOOL result = sub_1CCABCFBC(v12, **(void **)(a1 + 16), 1u, (uint64_t *)a2)))
  {
    if (v6)
    {
      *(unsigned char *)(**(void **)(a1 + 16) + 17) &= ~4u;
      *(unsigned char *)(**(void **)(a1 + 16) + 17) &= ~2u;
    }
    return 1;
  }
  return result;
}

llvm::UndefValue *sub_1CCABD934(uint64_t a1, uint64_t a2, llvm::APInt *this, void **a4, int a5, char a6)
{
  v319[8] = *MEMORY[0x1E4F143B8];
  int v307 = a5;
  if (*(unsigned char *)(*(void *)a2 + 8) == 19) {
    return 0;
  }
  int64_t v8 = (llvm::APInt *)a4;
  unint64_t v10 = (llvm::Constant *)a2;
  uint64_t v12 = *(unsigned int *)(*(void *)a2 + 32);
  if (v12 > 0x40) {
    operator new[]();
  }
  if (v12) {
    unsigned int v13 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v12);
  }
  else {
    unsigned int v13 = 0;
  }
  unsigned int v14 = (*(unsigned char *)(a2 + 16) - 11);
  if (v14 < 2) {
    goto LABEL_195;
  }
  if (v14 < 0xFD) {
    goto LABEL_8;
  }
  __dst = v316;
  uint64_t v313 = (uint64_t)v316;
  uint64_t v314 = 8;
  int v315 = 0;
  unsigned int v317 = (int8x8_t *)v319;
  uint64_t v318 = 0x800000000;
  *(void *)&long long v304 = &__dst;
  *((void *)&v304 + 1) = &v317;
  BOOL v93 = 0;
  if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v304, a2))
  {
    while (1)
    {
      BOOL v93 = v318 == 0;
      if (!v318) {
        break;
      }
      uint64_t v253 = (uint64_t)v317[v318 - 1];
      LODWORD(v318) = v318 - 1;
      if ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v304, v253) & 1) == 0) {
        goto LABEL_191;
      }
    }
    int64_t v8 = (llvm::APInt *)a4;
  }
LABEL_191:
  if (v317 != (int8x8_t *)v319) {
    free(v317);
  }
  if ((void *)v313 == __dst)
  {
    if (v93)
    {
LABEL_195:
      if (*((_DWORD *)v8 + 2) <= 0x40u)
      {
        int v6 = 0;
        *(void *)int64_t v8 = v13;
        *((_DWORD *)v8 + 2) = v12;
        return v6;
      }
      llvm::APInt::reallocate((uint64_t)v8, v12);
      uint64_t v94 = *((unsigned int *)v8 + 2);
      if (v94 <= 0x40)
      {
        int v6 = 0;
        *(void *)int64_t v8 = v13;
        return v6;
      }
      memcpy(*(void **)v8, v13, ((unint64_t)(v94 + 63) >> 3) & 0x3FFFFFF8);
      return 0;
    }
  }
  else
  {
    free((void *)v313);
    if (v93) {
      goto LABEL_195;
    }
  }
LABEL_8:
  uint64_t v15 = *((unsigned int *)this + 2);
  if (v15 <= 0x40)
  {
    if (*(void *)this) {
      goto LABEL_10;
    }
LABEL_18:
    if (*((_DWORD *)v8 + 2) > 0x40u)
    {
      llvm::APInt::reallocate((uint64_t)v8, v12);
      uint64_t v22 = *((unsigned int *)v8 + 2);
      if (v22 <= 0x40) {
        *(void *)int64_t v8 = v13;
      }
      else {
        memcpy(*(void **)v8, v13, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(void *)int64_t v8 = v13;
      *((_DWORD *)v8 + 2) = v12;
    }
    return (llvm::UndefValue *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v10, (llvm::Type *)a2);
  }
  int v17 = 0;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  do
  {
    BOOL v19 = v18-- < 1;
    if (v19) {
      break;
    }
    unint64_t v20 = *(void *)(*(void *)this + 8 * v18);
    v17 += __clz(v20);
  }
  while (!v20);
  int v21 = v15 | 0xFFFFFFC0;
  if ((v15 & 0x3F) == 0) {
    int v21 = 0;
  }
  if (v17 + v21 == v15) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v16 = *((unsigned int *)v8 + 2);
  if (v16 > 0x40)
  {
    **(void **)int64_t v8 = 0;
    bzero((void *)(*(void *)v8 + 8), (((unint64_t)(v16 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    *(void *)int64_t v8 = 0;
  }
  if (*((unsigned __int8 *)v10 + 16) <= 0x14u)
  {
    unsigned int v26 = *((_DWORD *)this + 2);
    if (!v26) {
      return 0;
    }
    if (v26 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase(this) == v26) {
        return 0;
      }
    }
    else
    {
      int v6 = 0;
      if (*(void *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v26) {
        return v6;
      }
    }
    uint64_t v27 = llvm::PoisonValue::get(*(llvm::PoisonValue **)(*(void *)v10 + 24), (llvm::Type *)a2);
    __dst = &v314;
    uint64_t v313 = 0x1000000000;
    if (!v12)
    {
      uint64_t v29 = 0;
      uint64_t v37 = (llvm::FixedVectorType ***)&v314;
LABEL_64:
      uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl(v37, (llvm::Type *)v29);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v37, v29);
        uint64_t Impl = sub_1CC56A4DC(**v39 + 1288, (uint64_t)v39, v37, v29);
      }
      if ((llvm::Constant *)Impl == v10) {
        int v6 = 0;
      }
      else {
        int v6 = (llvm::UndefValue *)Impl;
      }
LABEL_80:
      if (__dst != &v314) {
        free(__dst);
      }
      return v6;
    }
    uint64_t v28 = v27;
    LODWORD(v29) = 0;
    int v30 = 0;
    while (1)
    {
      uint64_t v31 = this;
      if (*((_DWORD *)this + 2) >= 0x41u) {
        uint64_t v31 = (llvm::APInt *)(*(void *)this + 8 * (v30 >> 6));
      }
      if ((*(void *)v31 & (1 << (char)v30)) == 0) {
        break;
      }
      AggregateElement = llvm::Constant::getAggregateElement(v10, v30);
      if (!AggregateElement)
      {
        int v6 = 0;
        goto LABEL_80;
      }
      if (v313 >= (unint64_t)HIDWORD(v313)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__dst + v313) = AggregateElement;
      uint64_t v29 = (llvm::Type *)(v313 + 1);
      LODWORD(v313) = v313 + 1;
      if (*((unsigned __int8 *)AggregateElement + 16) - 11 <= 1)
      {
        uint64_t v33 = a4;
LABEL_50:
        if (*((_DWORD *)v33 + 2) >= 0x41u) {
          unint64_t v34 = (char *)*v33 + 8 * (v30 >> 6);
        }
        else {
          unint64_t v34 = v33;
        }
        *v34 |= 1 << (char)v30;
      }
      int v30 = (llvm::Type *)(v30 + 1);
      if (v12 == v30)
      {
        uint64_t v37 = (llvm::FixedVectorType ***)__dst;
        goto LABEL_64;
      }
    }
    if (v29 >= HIDWORD(v313)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v33 = a4;
    *((void *)__dst + v29) = v28;
    uint64_t v29 = (llvm::Type *)(v313 + 1);
    LODWORD(v313) = v313 + 1;
    goto LABEL_50;
  }
  if (v307 == 10) {
    return 0;
  }
  if ((a6 & 1) == 0)
  {
    BOOL v35 = (void **)*((void *)v10 + 1);
    if (!v35 || v35[1])
    {
      if (v307) {
        return 0;
      }
      if (*((_DWORD *)this + 2) > 0x40u)
      {
        llvm::APInt::reallocate((uint64_t)this, v12);
        uint64_t v46 = *((unsigned int *)this + 2);
        if (v46 <= 0x40) {
          *(void *)this = v13;
        }
        else {
          memcpy(*(void **)this, v13, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else
      {
        *(void *)this = v13;
        *((_DWORD *)this + 2) = v12;
      }
    }
  }
  int v23 = *((unsigned __int8 *)v10 + 16);
  if (v23 < 0x1C) {
    return 0;
  }
  char v306 = 0;
  *(void *)&long long v304 = a1;
  *((void *)&v304 + 1) = &v307;
  uint64_t v305 = &v306;
  unsigned int v303 = v12;
  __src = 0;
  unsigned int v301 = v12;
  uint64_t v300 = 0;
  if (v23 <= 83)
  {
    if ((v23 - 73) >= 2)
    {
      if (v23 != 62)
      {
        if (v23 != 77) {
          goto LABEL_578;
        }
        int v24 = *((_DWORD *)v10 + 5);
        uint64_t v25 = (v24 & 0x40000000) != 0
            ? (llvm::Constant *)*((void *)v10 - 1)
            : (llvm::Constant *)((char *)v10 - 32 * (v24 & 0x7FFFFFF));
        uint64_t v73 = **(void **)v25;
        if (!v73 || (*(_DWORD *)(v73 + 8) & 0xFE) != 0x12) {
          goto LABEL_578;
        }
        unsigned int v74 = *(_DWORD *)(v73 + 32);
        LODWORD(v313) = v74;
        if (v74 > 0x40) {
          operator new[]();
        }
        unint64_t v75 = 0;
        __dst = 0;
        __src = 0;
        unsigned int v303 = v74;
        if (v12 == v74)
        {
          unsigned int v76 = *((_DWORD *)this + 2);
          if (v76 <= 0x40)
          {
            uint64_t v77 = *(void **)this;
            __dst = v77;
            LODWORD(v313) = v76;
            unsigned int v281 = v76;
            unsigned int v78 = 1;
            unint64_t v75 = (unint64_t)v77;
            goto LABEL_361;
          }
          llvm::APInt::reallocate((uint64_t)&__dst, v76);
          if (v313 <= 0x40)
          {
            uint64_t v77 = *(void **)this;
            __dst = v77;
            unsigned int v281 = v313;
            unsigned int v78 = 1;
            unint64_t v75 = (unint64_t)v77;
LABEL_361:
            unint64_t v280 = v75;
            sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v280, (llvm::APInt *)&__src);
            if (v281 >= 0x41 && v77) {
              MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
            }
            if (v12 == v74)
            {
              a2 = v303;
              if (*((_DWORD *)a4 + 2) > 0x40u || v303 > 0x40)
              {
                if (&__src != a4)
                {
                  llvm::APInt::reallocate((uint64_t)a4, v303);
                  uint64_t v183 = *((unsigned int *)a4 + 2);
                  if (v183 <= 0x40) {
                    *a4 = __src;
                  }
                  else {
                    memcpy(*a4, __src, ((unint64_t)(v183 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
              }
              else
              {
                *a4 = __src;
                *((_DWORD *)a4 + 2) = a2;
              }
            }
            else if (v12 % v74)
            {
              uint64_t v173 = 0;
              do
              {
                int v174 = v78 * v173;
                LODWORD(v309) = v303;
                if (v303 > 0x40) {
                  operator new[]();
                }
                if (v303 == v174) {
                  unint64_t p_dst = 0;
                }
                else {
                  unint64_t p_dst = (unint64_t)__src >> v174;
                }
                llvm::APInt::zextOrTrunc((uint64_t *)&p_dst, v78, (uint64_t)&v317);
                if (v309 >= 0x41 && p_dst) {
                  MEMORY[0x1D25D9CB0](p_dst, 0x1000C8000313F17);
                }
                unsigned int v175 = v318;
                if (v318 > 0x40)
                {
                  __int32 v177 = 0;
                  unint64_t v178 = ((unint64_t)v318 + 63) >> 6;
                  unsigned int v179 = v317;
                  do
                  {
                    int8x8_t v180 = *v179++;
                    uint8x8_t v181 = (uint8x8_t)vcnt_s8(v180);
                    v181.i16[0] = vaddlv_u8(v181);
                    v177 += v181.i32[0];
                    --v178;
                  }
                  while (v178);
                }
                else
                {
                  uint8x8_t v176 = (uint8x8_t)vcnt_s8((int8x8_t)v317);
                  v176.i16[0] = vaddlv_u8(v176);
                  __int32 v177 = v176.i32[0];
                }
                if (v177 == v78)
                {
                  if (*((_DWORD *)a4 + 2) >= 0x41u) {
                    unint64_t v182 = (void **)((char *)*a4 + 8 * (v173 >> 6));
                  }
                  else {
                    unint64_t v182 = a4;
                  }
                  llvm::Value *v182 = (void *)((unint64_t)*v182 | (1 << v173));
                }
                if (v175 >= 0x41 && v317) {
                  MEMORY[0x1D25D9CB0](v317, 0x1000C8000313F17);
                }
                ++v173;
              }
              while (v173 != v12);
            }
            else if (v12)
            {
              unsigned int v184 = 0;
              unsigned int v185 = v303;
              unsigned int v186 = *((_DWORD *)a4 + 2);
              do
              {
                int8x8_t p_src = (void **)((char *)__src + 8 * ((v184 / v78) >> 6));
                if (v185 < 0x41) {
                  int8x8_t p_src = &__src;
                }
                if (((unint64_t)*p_src >> (v184 / v78)))
                {
                  int v188 = (void **)((char *)*a4 + 8 * (v184 >> 6));
                  if (v186 < 0x41) {
                    int v188 = a4;
                  }
                  *int v188 = (void *)((unint64_t)*v188 | (1 << v184));
                }
                ++v184;
              }
              while (v12 != v184);
            }
            goto LABEL_578;
          }
          unint64_t v75 = (unint64_t)__dst;
          memcpy(__dst, *(const void **)this, (((unint64_t)v313 + 63) >> 3) & 0x3FFFFFF8);
          unsigned int v78 = 1;
        }
        else
        {
          unsigned int v78 = v12 / v74;
          if (v12 % v74)
          {
            unsigned int v78 = v74 / v12;
            if (v74 % v12) {
              goto LABEL_578;
            }
            unsigned int v169 = 0;
            unsigned int v170 = *((_DWORD *)this + 2);
            do
            {
              int64_t v171 = this;
              unsigned int v172 = v169 / v78;
              if (v170 >= 0x41) {
                int64_t v171 = (llvm::APInt *)(*(void *)this + 8 * (v172 >> 6));
              }
              if ((*(void *)v171 >> v172))
              {
                v75 |= 1 << v169;
                __dst = (void *)v75;
              }
              ++v169;
            }
            while (v74 != v169);
          }
          else if (v12)
          {
            unsigned int v143 = 0;
            unsigned int v144 = *((_DWORD *)this + 2);
            do
            {
              unsigned int v145 = this;
              if (v144 >= 0x41) {
                unsigned int v145 = (llvm::APInt *)(*(void *)this + 8 * (v143 >> 6));
              }
              if ((*(void *)v145 >> v143))
              {
                v75 |= 1 << (v143 / v78);
                __dst = (void *)v75;
              }
              ++v143;
            }
            while (v12 != v143);
          }
          else
          {
            unsigned int v78 = 0;
          }
        }
        unsigned int v281 = v313;
        if (v313 > 0x40) {
          operator new[]();
        }
        uint64_t v77 = (void *)v75;
        goto LABEL_361;
      }
      unint64_t v63 = *((void *)v10 + 8);
      int v64 = *((_DWORD *)v10 + 5);
      if ((v64 & 0x40000000) != 0)
      {
        BOOL v66 = (void ***)*((void *)v10 - 1);
        uint64_t v65 = v64 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v65 = v64 & 0x7FFFFFF;
        BOOL v66 = (void ***)((char *)v10 - 32 * v65);
      }
      __dst = v66 + 4;
      uint64_t v313 = v63 | 4;
      if (v65 != 1)
      {
        uint64_t v79 = &v66[4 * v65];
        do
        {
          if ((v313 & 4) == 0) {
            goto LABEL_578;
          }
          sub_1CB8460E4((uint64_t)&__dst);
        }
        while (__dst != v79);
        int v64 = *((_DWORD *)v10 + 5);
      }
      unint64_t v80 = v64 & 0x7FFFFFF;
      if ((v64 & 0x7FFFFFF) != 0)
      {
        unint64_t v81 = 0;
        while (!v81)
        {
          if ((v64 & 0x40000000) != 0) {
            unsigned int v83 = (uint64_t *)*((void *)v10 - 1);
          }
          else {
            unsigned int v83 = (uint64_t *)((char *)v10 - 32 * v80);
          }
          a2 = *v83;
          unsigned int v84 = (*(unsigned char *)(*v83 + 16) - 11);
          if (v84 < 2)
          {
LABEL_290:
            if (*((_DWORD *)a4 + 2) > 0x40u)
            {
              llvm::APInt::reallocate((uint64_t)a4, v12);
              uint64_t v142 = *((unsigned int *)a4 + 2);
              if (v142 <= 0x40)
              {
                int v6 = 0;
                *a4 = v13;
              }
              else
              {
                memcpy(*a4, v13, ((unint64_t)(v142 + 63) >> 3) & 0x3FFFFFF8);
                int v6 = 0;
              }
            }
            else
            {
              int v6 = 0;
              *a4 = v13;
              *((_DWORD *)a4 + 2) = v12;
            }
            goto LABEL_591;
          }
          if (v84 < 0xFD) {
            goto LABEL_161;
          }
          __dst = v316;
          uint64_t v313 = (uint64_t)v316;
          uint64_t v314 = 8;
          int v315 = 0;
          unsigned int v317 = (int8x8_t *)v319;
          uint64_t v318 = 0x800000000;
          unint64_t p_dst = (unint64_t)&__dst;
          unsigned int v309 = &v317;
          BOOL v86 = 0;
          if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_dst, a2))
          {
            do
            {
              BOOL v86 = v318 == 0;
              if (!v318) {
                break;
              }
              uint64_t v92 = (uint64_t)v317[v318 - 1];
              LODWORD(v318) = v318 - 1;
            }
            while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_dst, v92) & 1) != 0);
          }
          if (v317 != (int8x8_t *)v319) {
            free(v317);
          }
          if ((void *)v313 == __dst)
          {
            if (v86) {
              goto LABEL_290;
            }
          }
          else
          {
            free((void *)v313);
            if (v86) {
              goto LABEL_290;
            }
          }
          int v64 = *((_DWORD *)v10 + 5);
          if ((v64 & 0x40000000) != 0)
          {
LABEL_169:
            uint64_t v85 = (void ***)*((void *)v10 - 1);
            goto LABEL_170;
          }
LABEL_162:
          uint64_t v85 = (void ***)((char *)v10 - 32 * (v64 & 0x7FFFFFF));
LABEL_170:
          if (((*v85[4 * v81])[1] & 0xFE) == 0x12)
          {
            LODWORD(v313) = v12;
            __dst = 0;
            unsigned int v299 = *((_DWORD *)this + 2);
            if (v299 > 0x40) {
              operator new[]();
            }
            uint64_t v298 = *(void *)this;
            sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, v81, (uint64_t)&v298, (llvm::APInt *)&__dst);
            if (!v81)
            {
              uint64_t v87 = *((unsigned int *)a4 + 2);
              if (v87 > 0x40)
              {
                unint64_t v88 = *a4;
                uint64_t v89 = (uint64_t *)__dst;
                unint64_t v90 = (unint64_t)(v87 + 63) >> 6;
                do
                {
                  uint64_t v91 = *v89++;
                  *v88++ |= v91;
                  --v90;
                }
                while (v90);
              }
              else
              {
                *a4 = (void *)((unint64_t)*a4 | (unint64_t)__dst);
              }
            }
            if (v313 >= 0x41 && __dst) {
              MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
            }
            int v64 = *((_DWORD *)v10 + 5);
          }
          ++v81;
          unint64_t v80 = v64 & 0x7FFFFFF;
          if (v81 >= v80) {
            goto LABEL_578;
          }
        }
        if ((v64 & 0x40000000) != 0) {
          BOOL v82 = (void ***)*((void *)v10 - 1);
        }
        else {
          BOOL v82 = (void ***)((char *)v10 - 32 * v80);
        }
        if (*((unsigned char *)v82[4 * v81] + 16) == 12) {
          goto LABEL_290;
        }
LABEL_161:
        if ((v64 & 0x40000000) != 0) {
          goto LABEL_169;
        }
        goto LABEL_162;
      }
LABEL_578:
      unsigned int v254 = *((unsigned __int8 *)v10 + 16);
      if (v254 - 59 >= 0xFFFFFFEE)
      {
        BOOL v255 = v254 > 0x33 || ((1 << v254) & 0xD800000000000) == 0;
        if (v255 && v254 - 53 >= 3)
        {
          unsigned int v271 = *((_DWORD *)this + 2);
          if (v271 > 0x40) {
            operator new[]();
          }
          uint64_t v270 = *(void *)this;
          sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v270, (llvm::APInt *)a4);
          unsigned int v269 = *((_DWORD *)this + 2);
          if (v269 > 0x40) {
            operator new[]();
          }
          uint64_t v268 = *(void *)this;
          sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 1u, (uint64_t)&v268, (llvm::APInt *)&__src);
          uint64_t v257 = *((unsigned int *)a4 + 2);
          if (v257 > 0x40)
          {
            BOOL v258 = *a4;
            BOOL v259 = (uint64_t *)__src;
            unint64_t v260 = (unint64_t)(v257 + 63) >> 6;
            do
            {
              uint64_t v261 = *v259++;
              *v258++ &= v261;
              --v260;
            }
            while (v260);
          }
          else
          {
            *a4 = (void *)((unint64_t)*a4 & (unint64_t)__src);
          }
        }
      }
      unsigned int v256 = *((_DWORD *)a4 + 2);
      if (v256)
      {
        if (v256 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a4) != v256)
          {
LABEL_586:
            if (v306) {
              int v6 = v10;
            }
            else {
              int v6 = 0;
            }
            goto LABEL_591;
          }
        }
        else if (*a4 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v256))
        {
          goto LABEL_586;
        }
      }
      int v6 = llvm::UndefValue::get(*(llvm::UndefValue **)v10, (llvm::Type *)a2);
      goto LABEL_591;
    }
    unsigned int v279 = *((_DWORD *)this + 2);
    if (v279 > 0x40) {
      operator new[]();
    }
    uint64_t v278 = *(void *)this;
    uint64_t v43 = &v278;
    uint64_t v44 = (uint64_t)v10;
    int v45 = a4;
LABEL_134:
    sub_1CCAC0B50((uint64_t *)&v304, v44, 0, (uint64_t)v43, (llvm::APInt *)v45);
    goto LABEL_578;
  }
  switch(v23)
  {
    case 'T':
      uint64_t v40 = *((void *)v10 - 4);
      if (!v40
        || *(unsigned char *)(v40 + 16)
        || *(void *)(v40 + 24) != *((void *)v10 + 9)
        || (*(unsigned char *)(v40 + 33) & 0x20) == 0)
      {
        goto LABEL_578;
      }
      if ((*(_DWORD *)(v40 + 36) & 0xFFFFFFFE) == 0xB8)
      {
        if (v12) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
        }
        else {
          unint64_t v41 = 0;
        }
        unsigned int v264 = *((_DWORD *)this + 2);
        if (v264 > 0x40) {
          operator new[]();
        }
        uint64_t v42 = *(void *)this;
        if (*(unsigned char *)(((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[8] + 16) == 10) {
          uint64_t v220 = (llvm::Constant *)((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[8];
        }
        else {
          uint64_t v220 = 0;
        }
        if (!v12 || !v220)
        {
          unsigned int v222 = *((_DWORD *)this + 2);
LABEL_505:
          unint64_t v128 = v41;
          if (*(_DWORD *)(*((void *)v10 - 4) + 36) == 184)
          {
            int v277 = v12;
            unint64_t v276 = v41;
            sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v276, (llvm::APInt *)&__src);
            unsigned int v222 = v264;
          }
          unsigned int v275 = v222;
          uint64_t v274 = v42;
          sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 3u, (uint64_t)&v274, (llvm::APInt *)&v300);
          unsigned int v236 = v303;
          if (v303 > 0x40) {
            operator new[]();
          }
          unint64_t v237 = v300 & (unint64_t)__src;
          if (*((_DWORD *)a4 + 2) >= 0x41u && *a4) {
            MEMORY[0x1D25D9CB0](*a4, 0x1000C8000313F17);
          }
          *a4 = (void *)v237;
          *((_DWORD *)a4 + 2) = v236;
          BOOL v131 = v12 >= 0x41;
          goto LABEL_276;
        }
        uint64_t v221 = 0;
        unsigned int v222 = *((_DWORD *)this + 2);
        while (1)
        {
          __int32 v223 = (llvm::Constant *)llvm::Constant::getAggregateElement(v220, v221);
          unint64_t v224 = v223;
          unsigned int v225 = *((unsigned __int8 *)v223 + 16);
          if (v223 && v225 == 16)
          {
            uint64_t v226 = *((unsigned int *)v223 + 8);
            if (v226 >= 0x41)
            {
              int v229 = 0;
              int64_t v230 = (unint64_t)(v226 + 63) >> 6;
              do
              {
                BOOL v19 = v230-- < 1;
                if (v19) {
                  break;
                }
                unint64_t v231 = *(void *)(*((void *)v223 + 3) + 8 * v230);
                v229 += __clz(v231);
              }
              while (!v231);
              int v232 = v226 | 0xFFFFFFC0;
              if ((v226 & 0x3F) == 0) {
                int v232 = 0;
              }
              unsigned int v222 = v264;
              if (v229 + v232 != v226)
              {
LABEL_484:
                if (llvm::Constant::isAllOnesValue(v224)) {
                  v42 &= ~(1 << (char)v221);
                }
                goto LABEL_495;
              }
            }
            else if (*((void *)v223 + 3))
            {
              goto LABEL_484;
            }
          }
          else if (v223 && v225 == 17)
          {
            if ((sub_1CB844168((uint64_t)v223, 0.0) & 1) == 0) {
              goto LABEL_484;
            }
          }
          else
          {
            BOOL v19 = v225 > 0x14;
            int v227 = (1 << v225) & 0x1C2000;
            if (v19 || v227 == 0) {
              goto LABEL_484;
            }
          }
          v41 &= ~(1 << (char)v221);
LABEL_495:
          uint64_t v221 = (llvm::Type *)(v221 + 1);
          if (v221 == v12) {
            goto LABEL_505;
          }
        }
      }
      unsigned int v273 = *((_DWORD *)this + 2);
      if (v273 > 0x40) {
        operator new[]();
      }
      uint64_t v272 = *(void *)this;
      uint64_t v233 = (char *)operator new(0x20uLL);
      *(void *)uint64_t v233 = &unk_1F262B698;
      *(_OWORD *)(v233 + 8) = v304;
      *((void *)v233 + 3) = v305;
      unint64_t v311 = v233;
      unint64_t v234 = sub_1CC9D1670(a1, (uint64_t)v10, (uint64_t)&v272, (uint64_t)a4, (uint64_t)&__src, (uint64_t)&v300, (uint64_t)v310);
      int v6 = (llvm::UndefValue *)v234;
      char v235 = a2;
      if (v311 == v310)
      {
        (*(void (**)(void *))(v310[0] + 32))(v310);
      }
      else if (v311)
      {
        (*(void (**)(void))(*v311 + 40))();
      }
      if (v273 >= 0x41 && v272) {
        MEMORY[0x1D25D9CB0](v272, 0x1000C8000313F17);
      }
      if (!v235) {
        goto LABEL_578;
      }
      goto LABEL_591;
    case 'U':
      if ((*(_DWORD *)(**((void **)v10 - 12) + 8) & 0xFE) == 0x12)
      {
        unsigned int v287 = *((_DWORD *)this + 2);
        if (v287 > 0x40) {
          operator new[]();
        }
        uint64_t v286 = *(void *)this;
        sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v286, (llvm::APInt *)a4);
      }
      unsigned int v113 = *((_DWORD *)this + 2);
      if (v113 > 0x40) {
        operator new[]();
      }
      uint64_t v114 = *(void *)this;
      unsigned int v115 = *((_DWORD *)this + 2);
      unint64_t v116 = *(void *)this;
      if (*(unsigned char *)(*((void *)v10 - 12) + 16) == 10) {
        unint64_t v117 = (llvm::Constant *)*((void *)v10 - 12);
      }
      else {
        unint64_t v117 = 0;
      }
      if (!v12 || !v117) {
        goto LABEL_266;
      }
      uint64_t v118 = 0;
      while (2)
      {
        uint64_t v119 = llvm::Constant::getAggregateElement(v117, v118);
        switch(*((unsigned char *)v119 + 16))
        {
          case 5:
            goto LABEL_257;
          case 0xD:
          case 0x12:
          case 0x13:
          case 0x14:
            uint64_t v121 = ~(1 << (char)v118);
            goto LABEL_256;
          case 0x10:
            uint64_t v120 = *((unsigned int *)v119 + 8);
            if (v120 >= 0x41)
            {
              int v123 = 0;
              int64_t v124 = (unint64_t)(v120 + 63) >> 6;
              do
              {
                BOOL v19 = v124-- < 1;
                if (v19) {
                  break;
                }
                unint64_t v125 = *(void *)(v119[3] + 8 * v124);
                v123 += __clz(v125);
              }
              while (!v125);
              int v126 = v120 | 0xFFFFFFC0;
              if ((v120 & 0x3F) == 0) {
                int v126 = 0;
              }
              int v127 = v123 + v126;
              uint64_t v121 = ~(1 << (char)v118);
              if (v127 == v120)
              {
LABEL_256:
                v116 &= v121;
                goto LABEL_257;
              }
            }
            else
            {
              uint64_t v121 = ~(1 << (char)v118);
              if (!v119[3]) {
                goto LABEL_256;
              }
            }
LABEL_249:
            if (v115 > 0x40) {
              *(void *)(v114 + 8 * (v118 >> 6)) &= v121;
            }
            else {
              v114 &= v121;
            }
LABEL_257:
            uint64_t v118 = (llvm::Type *)(v118 + 1);
            if (v118 != v12) {
              continue;
            }
LABEL_266:
            unsigned int v285 = v113;
            unint64_t v284 = v116;
            sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 1u, (uint64_t)&v284, (llvm::APInt *)&__src);
            unsigned int v283 = v115;
            unsigned int v265 = v113;
            if (v115 > 0x40) {
              operator new[]();
            }
            uint64_t v282 = v114;
            sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 2u, (uint64_t)&v282, (llvm::APInt *)&v300);
            unint64_t v128 = v116;
            unsigned int v129 = v303;
            if (v303 > 0x40) {
              operator new[]();
            }
            unint64_t v130 = v300 & (unint64_t)__src;
            if (*((_DWORD *)a4 + 2) >= 0x41u && *a4) {
              MEMORY[0x1D25D9CB0](*a4, 0x1000C8000313F17);
            }
            *a4 = (void *)v130;
            *((_DWORD *)a4 + 2) = v129;
            BOOL v131 = v265 >= 0x41;
LABEL_276:
            if (v131 && v128) {
              MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
            }
            break;
          case 0x11:
            char v122 = sub_1CB844168((uint64_t)v119, 0.0);
            uint64_t v121 = ~(1 << (char)v118);
            if (v122) {
              goto LABEL_256;
            }
            goto LABEL_249;
          default:
            uint64_t v121 = ~(1 << (char)v118);
            goto LABEL_249;
        }
        goto LABEL_578;
      }
    case 'Z':
      int v61 = *((_DWORD *)v10 + 5);
      if ((v61 & 0x40000000) != 0) {
        uint64_t v62 = (void ***)*((void *)v10 - 1);
      }
      else {
        uint64_t v62 = (void ***)((char *)v10 - 32 * (v61 & 0x7FFFFFF));
      }
      int v67 = v62[8];
      if (!v67 || *((unsigned char *)v67 + 16) != 16)
      {
        unsigned int v297 = *((_DWORD *)this + 2);
        if (v297 > 0x40) {
          operator new[]();
        }
        uint64_t v296 = *(void *)this;
        uint64_t v43 = &v296;
        int v45 = &__src;
        uint64_t v44 = (uint64_t)v10;
        goto LABEL_134;
      }
      int v68 = v67 + 3;
      if (*((_DWORD *)v67 + 8) >= 0x41u) {
        int v68 = (void *)*v68;
      }
      uint64_t v69 = (void *)*v68;
      unsigned int v70 = *((_DWORD *)this + 2);
      if (v70 > 0x40) {
        operator new[]();
      }
      unint64_t v71 = *(void *)this;
      if (v12 <= v69)
      {
        int v72 = 0;
      }
      else
      {
        int v72 = 1;
        v71 &= ~(1 << (char)v69);
      }
      unsigned int v317 = 0;
      if (!v71)
      {
        int v140 = *((_DWORD *)v10 + 5);
        if ((v140 & 0x40000000) != 0) {
          uint64_t v141 = (void ***)*((void *)v10 - 1);
        }
        else {
          uint64_t v141 = (void ***)((char *)v10 - 32 * (v140 & 0x7FFFFFF));
        }
        int64_t v166 = v141[4];
        LODWORD(v314) = 64;
        __dst = &v317;
        uint64_t v313 = v69;
        BOOL v192 = *((unsigned char *)v166 + 16) == 89
            && ((int v167 = *((_DWORD *)v166 + 5), (v167 & 0x40000000) != 0)
              ? (unint64_t v168 = (int8x8_t *)*(v166 - 1))
              : (unint64_t v168 = (int8x8_t *)&v166[-4 * (v167 & 0x7FFFFFF)]),
                (int8x8_t v189 = *v168, *(void *)&v189)
             && ((v317 = (int8x8_t *)v189, int v190 = *((_DWORD *)v166 + 5), (v190 & 0x40000000) != 0)
               ? (int v191 = (void **)*(v166 - 1))
               : (int v191 = &v166[-4 * (v190 & 0x7FFFFFF)]),
                 sub_1CBF53154((llvm::APInt *)&v313, (unsigned __int8 *)v191[4])))
            && *v317 == *(void *)v10;
        if (v314 >= 0x41 && v313) {
          MEMORY[0x1D25D9CB0](v313, 0x1000C8000313F17);
        }
        if (v192)
        {
          char v60 = 0;
          int v6 = (llvm::UndefValue *)v317;
          goto LABEL_471;
        }
      }
      unsigned int v295 = v70;
      unsigned int v193 = v69;
      unint64_t v294 = v71;
      int v6 = (llvm::UndefValue *)v71;
      sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v294, (llvm::APInt *)a4);
      if (v295 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      if (v72)
      {
        uint64_t v194 = this;
        if (*((_DWORD *)this + 2) >= 0x41u) {
          uint64_t v194 = (llvm::APInt *)(*(void *)this + 8 * (v193 >> 6));
        }
        if ((*(void *)v194 & (1 << v193)) != 0)
        {
          uint64_t v195 = ~(1 << v193);
          if (*((_DWORD *)a4 + 2) > 0x40u) {
            *((void *)*a4 + (v193 >> 6)) &= v195;
          }
          else {
            *a4 = (void *)((unint64_t)*a4 & v195);
          }
          char v60 = 1;
          goto LABEL_471;
        }
      }
      uint64_t v196 = *(void *)(a1 + 32);
      int v197 = *(_DWORD *)(v196 + 8);
      __dst = v10;
      LODWORD(v313) = v197;
      int v198 = *(_DWORD *)(v196 + 2080);
      if (v198)
      {
        uint64_t v199 = *(void *)(v196 + 2064);
        int v200 = v198 - 1;
        unsigned int v201 = v200 & ((v10 >> 4) ^ (v10 >> 9));
        unsigned int v202 = (llvm::Constant **)(v199 + 16 * v201);
        int v203 = *v202;
        if (*v202 == v10)
        {
LABEL_451:
          int v211 = *((_DWORD *)v10 + 5);
          if ((v211 & 0x40000000) != 0) {
            uint64_t v212 = (llvm::UndefValue **)*((void *)v10 - 1);
          }
          else {
            uint64_t v212 = (llvm::UndefValue **)((char *)v10 - 32 * (v211 & 0x7FFFFFF));
          }
          char v60 = 0;
          int v6 = *v212;
          goto LABEL_471;
        }
        BOOL v204 = 0;
        int v205 = 1;
        while (v203 != (llvm::Constant *)-4096)
        {
          if (v204) {
            BOOL v206 = 0;
          }
          else {
            BOOL v206 = v203 == (llvm::Constant *)-8192;
          }
          if (v206) {
            BOOL v204 = v202;
          }
          unsigned int v207 = v201 + v205++;
          unsigned int v201 = v207 & v200;
          unsigned int v202 = (llvm::Constant **)(v199 + 16 * v201);
          int v203 = *v202;
          if (*v202 == v10) {
            goto LABEL_451;
          }
        }
        if (v204) {
          int v208 = v204;
        }
        else {
          int v208 = v202;
        }
      }
      else
      {
        int v208 = 0;
      }
      int v209 = sub_1CBF569E0((_DWORD *)(v196 + 2064), (uint64_t)&__dst, (uint64_t *)&__dst, v208);
      *int v209 = __dst;
      *((_DWORD *)v209 + 2) = v313;
      unsigned int v210 = *(_DWORD *)(v196 + 8);
      if (v210 >= *(_DWORD *)(v196 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v196 + 8 * v210) = v10;
      ++*(_DWORD *)(v196 + 8);
      goto LABEL_451;
    case '[':
      unsigned int v47 = *(_DWORD *)(**((void **)v10 - 8) + 32);
      uint64_t v48 = *((unsigned int *)v10 + 18);
      if (!v48) {
        goto LABEL_92;
      }
      unsigned int v49 = (_DWORD *)*((void *)v10 + 8);
      uint64_t v50 = 4 * v48;
      do
      {
        if (*v49) {
          goto LABEL_95;
        }
        ++v49;
        v50 -= 4;
      }
      while (v50);
LABEL_92:
      unsigned int v51 = *((_DWORD *)this + 2);
      if (!v51) {
        goto LABEL_283;
      }
      if (v51 <= 0x40)
      {
        if (*(void *)this != 0xFFFFFFFFFFFFFFFFLL >> -(char)v51) {
          goto LABEL_95;
        }
LABEL_283:
        int v132 = *((_DWORD *)v10 + 5);
        if ((v132 & 0x40000000) != 0) {
          unint64_t v133 = (void ***)*((void *)v10 - 1);
        }
        else {
          unint64_t v133 = (void ***)((char *)v10 - 32 * (v132 & 0x7FFFFFF));
        }
        unint64_t v134 = (llvm::Type *)v133[4];
        unsigned int v135 = (*((unsigned char *)v134 + 16) - 11);
        if (v135 >= 2)
        {
          if (v135 < 0xFD)
          {
            if ((v132 & 0x40000000) == 0)
            {
LABEL_289:
              uint64_t v136 = (void ***)((char *)v10 - 32 * (v132 & 0x7FFFFFF));
LABEL_535:
              int8x8_t v239 = llvm::PoisonValue::get((llvm::PoisonValue *)*v136[4], v134);
              int v240 = *((_DWORD *)v10 + 5);
              if ((v240 & 0x40000000) != 0) {
                int v241 = (void ***)*((void *)v10 - 1);
              }
              else {
                int v241 = (void ***)((char *)v10 - 32 * (v240 & 0x7FFFFFF));
              }
              unint64_t v242 = v241 + 4;
              if (v241[4])
              {
                *v241[6] = v241[5];
                uint64_t v243 = v241[5];
                if (v243) {
                  v243[2] = v241[6];
                }
              }
              *unint64_t v242 = v239;
              if (v239)
              {
                int v246 = (void **)v239[1];
                int8x8_t v244 = v239 + 1;
                uint8x8_t v245 = v246;
                v241[5] = v246;
                if (v246) {
                  v245[2] = v241 + 5;
                }
                v241[6] = (void **)v244;
                void *v244 = v242;
              }
              char v306 = 1;
              goto LABEL_545;
            }
LABEL_534:
            uint64_t v136 = (void ***)*((void *)v10 - 1);
            goto LABEL_535;
          }
          __dst = v316;
          uint64_t v313 = (uint64_t)v316;
          uint64_t v314 = 8;
          int v315 = 0;
          unsigned int v317 = (int8x8_t *)v319;
          uint64_t v318 = 0x800000000;
          unint64_t p_dst = (unint64_t)&__dst;
          unsigned int v309 = &v317;
          BOOL v238 = 0;
          if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_dst, (uint64_t)v134))
          {
            do
            {
              BOOL v238 = v318 == 0;
              if (!v318) {
                break;
              }
              uint64_t v262 = (uint64_t)v317[v318 - 1];
              LODWORD(v318) = v318 - 1;
            }
            while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_dst, v262) & 1) != 0);
          }
          if (v317 != (int8x8_t *)v319) {
            free(v317);
          }
          if ((void *)v313 == __dst)
          {
            if (!v238) {
              goto LABEL_533;
            }
          }
          else
          {
            free((void *)v313);
            if (!v238)
            {
LABEL_533:
              int v132 = *((_DWORD *)v10 + 5);
              if ((v132 & 0x40000000) == 0) {
                goto LABEL_289;
              }
              goto LABEL_534;
            }
          }
        }
LABEL_545:
        uint64_t v247 = v13;
        if (v47 > 0x40) {
          operator new[]();
        }
        if (v47) {
          unint64_t v248 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
        }
        else {
          LOBYTE(v248) = 0;
        }
        unint64_t v249 = v248 & 1;
        LODWORD(v313) = v47;
        __dst = 0;
        unsigned int v293 = v47;
        unint64_t v292 = v249;
        sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v292, (llvm::APInt *)&__dst);
        if (v293 >= 0x41 && v249) {
          MEMORY[0x1D25D9CB0](v249, 0x1000C8000313F17);
        }
        int v250 = __dst;
        if (v313 < 0x41) {
          int v250 = &__dst;
        }
        uint64_t v251 = *((unsigned int *)a4 + 2);
        if (*v250)
        {
          if (v251 > 0x40)
          {
            llvm::APInt::reallocate((uint64_t)a4, v12);
            uint64_t v252 = *((unsigned int *)a4 + 2);
            if (v252 <= 0x40) {
              *a4 = v247;
            }
            else {
              memcpy(*a4, v247, ((unint64_t)(v252 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *a4 = v247;
            *((_DWORD *)a4 + 2) = v12;
          }
        }
        else if (v251 <= 0x40)
        {
          *a4 = 0;
        }
        else
        {
          bzero(*a4, ((unint64_t)(v251 + 63) >> 3) & 0x3FFFFFF8);
        }
        if (v313 >= 0x41 && __dst) {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        }
        goto LABEL_578;
      }
      if (llvm::APInt::countTrailingOnesSlowCase(this) == v51) {
        goto LABEL_283;
      }
LABEL_95:
      if (v47 >= 0x41) {
        operator new[]();
      }
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      if (v12)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          uint64_t v55 = this;
          if (*((_DWORD *)this + 2) >= 0x41u) {
            uint64_t v55 = (llvm::APInt *)(*(void *)this + 8 * (i >> 6));
          }
          if ((*(void *)v55 >> i))
          {
            unsigned int v56 = *(_DWORD *)(*((void *)v10 + 8) + 4 * i);
            if (v56 != -1)
            {
              if (v56 >= v47) {
                v53 |= 1 << (v56 - v47);
              }
              else {
                v52 |= 1 << v56;
              }
            }
          }
        }
      }
      LODWORD(v318) = v47;
      unsigned int v317 = 0;
      unsigned int v291 = v47;
      uint64_t v290 = v52;
      sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 0, (uint64_t)&v290, (llvm::APInt *)&v317);
      LODWORD(v309) = v47;
      unint64_t p_dst = 0;
      unsigned int v289 = v47;
      uint64_t v288 = v53;
      sub_1CCAC0B50((uint64_t *)&v304, (uint64_t)v10, 1u, (uint64_t)&v288, (llvm::APInt *)&p_dst);
      if (v12 == v47)
      {
        if (!v12)
        {
LABEL_114:
          char v60 = 0;
          int v6 = (llvm::UndefValue *)*((void *)v10 - 8);
          goto LABEL_465;
        }
        uint64_t v58 = 0;
        while (1)
        {
          int v59 = this;
          if (*((_DWORD *)this + 2) >= 0x41u) {
            int v59 = (llvm::APInt *)(*(void *)this + 8 * (v58 >> 6));
          }
          if (((*(void *)v59 >> v58) & 1) != 0 && v58 != *(_DWORD *)(*((void *)v10 + 8) + 4 * v58)) {
            break;
          }
          if (v12 == ++v58) {
            goto LABEL_114;
          }
        }
      }
      if (v12)
      {
        uint64_t v95 = 0;
        char v96 = 0;
        unsigned int v97 = v309;
        unsigned int v98 = *((_DWORD *)a4 + 2);
        unsigned int v99 = -1;
        a2 = (uint64_t)&v317;
        p_unint64_t p_dst = (const llvm::APInt *)&p_dst;
        unsigned int v100 = v318;
        char v101 = 1;
        char v102 = 1;
        unsigned int v103 = -1;
        unsigned int v104 = -1;
        unsigned int v105 = -1;
        while (1)
        {
          unint64_t v106 = *(unsigned int *)(*((void *)v10 + 8) + 4 * v95);
          if (v106 == -1)
          {
            uint64_t v110 = 1 << v95;
            if (v98 > 0x40) {
              *((void *)*a4 + (v95 >> 6)) |= v110;
            }
            else {
              *a4 = (void *)((unint64_t)*a4 | v110);
            }
          }
          else
          {
            uint64_t v107 = this;
            if (*((_DWORD *)this + 2) >= 0x41u) {
              uint64_t v107 = (llvm::APInt *)(*(void *)this + 8 * (v95 >> 6));
            }
            uint64_t v108 = 1 << v95;
            if ((*(void *)v107 & (1 << v95)) == 0) {
              goto LABEL_221;
            }
            if (v106 >= v47)
            {
              unsigned int v111 = v106 - v47;
              int v112 = (unint64_t *)(p_dst + 8 * (v111 >> 6));
              if (v97 < 0x41) {
                int v112 = &p_dst;
              }
              if (((*v112 >> v111) & 1) == 0)
              {
                if (v103 == -1) {
                  unsigned int v103 = v95;
                }
                else {
                  unsigned int v103 = v47;
                }
                if (v99 == -1) {
                  unsigned int v99 = v111;
                }
                else {
                  unsigned int v99 = v47;
                }
                v101 &= v95 == v111;
                goto LABEL_233;
              }
LABEL_221:
              if (v98 > 0x40) {
                *((void *)*a4 + (v95 >> 6)) |= v108;
              }
              else {
                *a4 = (void *)((unint64_t)*a4 | v108);
              }
              char v96 = 1;
              goto LABEL_233;
            }
            int v109 = (int8x8_t **)((char *)v317 + ((v106 >> 3) & 0x1FFFFFF8));
            if (v100 < 0x41) {
              int v109 = &v317;
            }
            if (((unint64_t)*v109 >> v106)) {
              goto LABEL_221;
            }
            if (v105 == -1) {
              unsigned int v105 = v95;
            }
            else {
              unsigned int v105 = v47;
            }
            if (v104 == -1) {
              unsigned int v104 = *(_DWORD *)(*((void *)v10 + 8) + 4 * v95);
            }
            else {
              unsigned int v104 = v47;
            }
            v102 &= v95 == v106;
          }
LABEL_233:
          if (v12 == ++v95) {
            goto LABEL_293;
          }
        }
      }
      char v96 = 0;
      char v102 = 1;
      unsigned int v105 = -1;
      unsigned int v104 = -1;
      unsigned int v103 = -1;
      unsigned int v99 = -1;
      char v101 = 1;
LABEL_293:
      if (v47 == *(_DWORD *)(*(void *)v10 + 32))
      {
        if (((v105 < v47) & v101) == 1)
        {
          unsigned int v137 = 0;
          uint64_t v138 = *((void *)v10 - 8);
          int v139 = -1;
          if (v138)
          {
            a2 = 0;
            if (*(unsigned char *)(v138 + 16) == 10)
            {
              unsigned int v137 = (llvm::Value *)*((void *)v10 - 4);
              a2 = *(void *)(v138 - 32 * (*(_DWORD *)(v138 + 20) & 0x7FFFFFF) + 32 * v104);
              int v139 = v105;
            }
          }
          else
          {
            a2 = 0;
          }
        }
        else
        {
          unsigned int v137 = 0;
          a2 = 0;
          int v139 = -1;
        }
        if (((v103 < v47) & v102) == 1)
        {
          uint64_t v146 = *((void *)v10 - 4);
          if (v146)
          {
            if (*(unsigned char *)(v146 + 16) == 10)
            {
              unsigned int v137 = (llvm::Value *)*((void *)v10 - 8);
              a2 = *(void *)(v146 - 32 * (*(_DWORD *)(v146 + 20) & 0x7FFFFFF) + 32 * v99);
              int v139 = v103;
            }
          }
        }
        if (v137 && a2)
        {
          uint64_t v147 = ***(void ***)v10;
          int v148 = *(llvm::ConstantInt **)(v147 + 1960);
          unint64_t v149 = *(unsigned int *)(v147 + 1968);
          LODWORD(v313) = v149 >> 8;
          int v263 = (llvm::Value *)a2;
          uint64_t v266 = v137;
          if (v149 >> 8 > 0x40) {
            operator new[]();
          }
          if (v149 <= 0xFF) {
            LODWORD(v150) = 0;
          }
          else {
            unint64_t v150 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v149) + 63);
          }
          __dst = (void *)(v150 & v139);
          unsigned int v151 = (llvm::Value *)llvm::ConstantInt::get(v148, (llvm::LLVMContext *)&__dst, p_p_dst);
          if (v313 >= 0x41 && __dst) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          if ((*((unsigned char *)v10 + 23) & 0x10) == 0)
          {
            uint64_t v215 = 0;
            uint64_t v214 = &byte_1CFBCE98E;
LABEL_462:
            v316[0] = 261;
            __dst = v214;
            uint64_t v313 = v215;
            int v217 = operator new(0xA0uLL);
            uint64_t v218 = 0;
            int v6 = (llvm::UndefValue *)(v217 + 24);
            v217[29] = v217[29] & 0x38000000 | 3;
            do
            {
              uint64_t v219 = &v217[v218];
              void *v219 = 0;
              v219[1] = 0;
              v219[2] = 0;
              v219[3] = v6;
              v218 += 8;
            }
            while (v218 != 24);
            llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v217 + 24), v266, v263, v151, (const char **)&__dst, 0);
            sub_1CC9D2AB4(a1, v6, (uint64_t)v10);
            char v60 = 0;
            goto LABEL_465;
          }
          uint64_t v152 = ***(void ***)v10;
          uint64_t v153 = *(void *)(v152 + 152);
          uint64_t v154 = *(unsigned int *)(v152 + 168);
          if (v154)
          {
            LODWORD(v155) = (v154 - 1) & ((v10 >> 4) ^ (v10 >> 9));
            unsigned int v156 = (llvm::Constant **)(v153 + 16 * v155);
            BOOL v157 = *v156;
            if (*v156 == v10)
            {
LABEL_461:
              uint64_t v213 = v156[1];
              uint64_t v216 = *(void *)v213;
              uint64_t v214 = (char *)v213 + 16;
              uint64_t v215 = v216;
              goto LABEL_462;
            }
            int v158 = 1;
            while (v157 != (llvm::Constant *)-4096)
            {
              int v159 = v155 + v158++;
              uint64_t v155 = v159 & (v154 - 1);
              BOOL v157 = *(llvm::Constant **)(v153 + 16 * v155);
              if (v157 == v10)
              {
                unsigned int v156 = (llvm::Constant **)(v153 + 16 * v155);
                goto LABEL_461;
              }
            }
          }
          unsigned int v156 = (llvm::Constant **)(v153 + 16 * v154);
          goto LABEL_461;
        }
      }
      if (v96)
      {
        __dst = &v314;
        uint64_t v313 = 0x1000000000;
        unsigned int v160 = 0;
        if (v12)
        {
          for (uint64_t j = 0; j != v12; ++j)
          {
            if (*((_DWORD *)a4 + 2) >= 0x41u) {
              int v162 = (void **)((char *)*a4 + 8 * (j >> 6));
            }
            else {
              int v162 = a4;
            }
            if (((unint64_t)*v162 >> j))
            {
              unsigned int v163 = HIDWORD(v313);
              int v164 = -1;
            }
            else
            {
              int v164 = *(_DWORD *)(*((void *)v10 + 8) + 4 * j);
              unsigned int v163 = HIDWORD(v313);
            }
            if (v160 >= v163) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)__dst + v160) = v164;
            unsigned int v160 = v313 + 1;
            LODWORD(v313) = v313 + 1;
          }
          uint64_t v165 = (uint64_t *)__dst;
        }
        else
        {
          uint64_t v165 = &v314;
        }
        llvm::ShuffleVectorInst::setShuffleMask((uint64_t)v10, v165, v160);
        char v306 = 1;
        if (__dst != &v314) {
          free(__dst);
        }
      }
      char v60 = 1;
LABEL_465:
      if (v309 >= 0x41 && p_dst) {
        MEMORY[0x1D25D9CB0](p_dst, 0x1000C8000313F17);
      }
      if (v318 >= 0x41 && v317) {
        MEMORY[0x1D25D9CB0](v317, 0x1000C8000313F17);
      }
LABEL_471:
      if (v60) {
        goto LABEL_578;
      }
LABEL_591:
      if (v301 >= 0x41 && v300) {
        MEMORY[0x1D25D9CB0](v300, 0x1000C8000313F17);
      }
      if (v303 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      return v6;
    default:
      goto LABEL_578;
  }
}

void *sub_1CCAC0B50(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, llvm::APInt *a5)
{
  uint64_t v8 = *a1;
  if (*(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v9 = *(void *)(a2 - 32);
    if (v9)
    {
      if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v9 + 33) & 0x20) != 0)
      {
        int v10 = *(_DWORD *)(a2 + 20);
        goto LABEL_7;
      }
    }
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_7:
    uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(a2 - 8);
LABEL_9:
  uint64_t v12 = *(void *)(v11 + 32 * a3);
  unsigned int v40 = *(_DWORD *)(a4 + 8);
  if (v40 > 0x40) {
    operator new[]();
  }
  uint64_t v39 = *(void **)a4;
  BOOL result = (void *)sub_1CCABD934(v8, v12, (llvm::APInt *)&v39, a5);
  unsigned int v14 = result;
  if (v40 >= 0x41)
  {
    BOOL result = v39;
    if (v39) {
      BOOL result = (void *)MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
    }
  }
  if (v14)
  {
    int v15 = *(_DWORD *)(a2 + 20);
    if ((v15 & 0x40000000) != 0) {
      uint64_t v16 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v16 = a2 - 32 * (v15 & 0x7FFFFFF);
    }
    uint64_t v17 = *(void *)(v16 + 32 * a3);
    if (!v17 || *(unsigned __int8 *)(v17 + 16) < 0x1Cu) {
      goto LABEL_20;
    }
    uint64_t v26 = *(void *)(v8 + 32);
    uint64_t v41 = v17;
    if (*(unsigned char *)(v26 + 2088))
    {
      uint64_t v28 = v26 + 2096;
      int v27 = 16;
    }
    else
    {
      int v27 = *(_DWORD *)(v26 + 2104);
      if (!v27)
      {
        uint64_t v37 = 0;
        goto LABEL_45;
      }
      uint64_t v28 = *(void *)(v26 + 2096);
    }
    int v29 = v27 - 1;
    unsigned int v30 = v29 & ((v17 >> 4) ^ (v17 >> 9));
    uint64_t v31 = (void *)(v28 + 8 * v30);
    uint64_t v32 = *v31;
    if (v17 == *v31)
    {
LABEL_20:
      if ((v15 & 0x40000000) != 0) {
        uint64_t v18 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v18 = a2 - 32 * (v15 & 0x7FFFFFF);
      }
      uint64_t v19 = v18 + 32 * a3;
      uint64_t v20 = v19;
      if (*(void *)v19)
      {
        **(void **)(v19 + 16) = *(void *)(v19 + 8);
        uint64_t v21 = *(void *)(v19 + 8);
        if (v21) {
          *(void *)(v21 + 16) = *(void *)(v19 + 16);
        }
      }
      *(void *)uint64_t v19 = v14;
      uint64_t v24 = v14[1];
      int v23 = v14 + 1;
      uint64_t v22 = v24;
      *(void *)(v19 + 8) = v24;
      uint64_t v25 = v19 + 8;
      if (v24) {
        *(void *)(v22 + 16) = v25;
      }
      *(void *)(v18 + 32 * a3 + 16) = v23;
      *int v23 = v20;
      *(unsigned char *)a1[2] = 1;
      return result;
    }
    uint64_t v33 = 0;
    int v34 = 1;
    while (v32 != -4096)
    {
      if (v33) {
        BOOL v35 = 0;
      }
      else {
        BOOL v35 = v32 == -8192;
      }
      if (v35) {
        uint64_t v33 = v31;
      }
      unsigned int v36 = v30 + v34++;
      unsigned int v30 = v36 & v29;
      uint64_t v31 = (void *)(v28 + 8 * v30);
      uint64_t v32 = *v31;
      if (v17 == *v31) {
        goto LABEL_20;
      }
    }
    if (v33) {
      uint64_t v37 = v33;
    }
    else {
      uint64_t v37 = v31;
    }
LABEL_45:
    BOOL result = sub_1CBFD5BBC(v26 + 2088, (uint64_t)&v41, &v41, v37);
    void *result = v41;
    unsigned int v38 = *(_DWORD *)(v26 + 2232);
    if (v38 >= *(_DWORD *)(v26 + 2236)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v26 + 2224) + 8 * v38) = v41;
    ++*(_DWORD *)(v26 + 2232);
    int v15 = *(_DWORD *)(a2 + 20);
    goto LABEL_20;
  }
  return result;
}

void sub_1CCAC0E50()
{
}

__n128 sub_1CCAC0E64(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F262B698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCAC0EB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262B698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1CCAC0EF0(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, llvm::APInt *a5)
{
  uint64_t v5 = *a2;
  unsigned int v6 = *a3;
  unsigned int v12 = *((_DWORD *)a4 + 2);
  unsigned int v7 = v12;
  uint64_t v8 = *a4;
  uint64_t v11 = *a4;
  *((_DWORD *)a4 + 2) = 0;
  __n128 result = sub_1CCAC0B50((uint64_t *)(a1 + 8), v5, v6, (uint64_t)&v11, a5);
  if (v7 >= 0x41 && v8 != 0)
  {
    JUMPOUT(0x1D25D9CB0);
  }
  return result;
}

BOOL sub_1CCAC0F7C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 16) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v5 <= 0x14)
  {
    if (!v4) {
      return llvm::Constant::getSplatValue((llvm::Constant *)a1, 0) != 0;
    }
    return 1;
  }
  BOOL result = v4 != 0;
  if (!a1 || (v5 == 84 ? (BOOL v7 = v4 == 0) : (BOOL v7 = 1), v7))
  {
    if (v5 == 90)
    {
      int v16 = *(_DWORD *)(a1 + 20);
      uint64_t v17 = (v16 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v16 & 0x7FFFFFF);
      if (*(unsigned char *)(*(void *)(v17 + 64) + 16) == 16) {
        return result;
      }
    }
    goto LABEL_31;
  }
  uint64_t v8 = *(void *)(a1 - 32);
  if (!v8 || *(unsigned char *)(v8 + 16) || *(void *)(v8 + 24) != *(void *)(a1 + 72) || *(_DWORD *)(v8 + 36) != 130)
  {
LABEL_31:
    uint64_t v18 = *(void *)(a1 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 8);
      BOOL v20 = v5 == 40 || v5 == 60;
      if (v20 && v19 == 0) {
        return 1;
      }
    }
    uint64_t v26 = 0;
    int v27 = 0;
    v25[0] = &v27;
    v25[1] = &v26;
    if (sub_1CCA38CF4(v25, a1))
    {
      if (sub_1CCAC0F7C(v27, a2) & 1) != 0 || (sub_1CCAC0F7C(v26, a2)) {
        return 1;
      }
    }
    uint64_t v22 = *(void *)(a1 + 8);
    if (v22)
    {
      if (!*(void *)(v22 + 8))
      {
        if (a1)
        {
          unsigned int v23 = *(unsigned __int8 *)(a1 + 16);
          if (v23 >= 0x1C && v23 - 83 >= 0xFFFFFFFE)
          {
            uint64_t v24 = *(void *)(a1 - 64);
            if (v24)
            {
              int v27 = *(llvm::Constant **)(a1 - 64);
              if (*(void *)(a1 - 32))
              {
                uint64_t v26 = *(void *)(a1 - 32);
                if (sub_1CCAC0F7C(v24, a2) & 1) != 0 || (sub_1CCAC0F7C(v26, a2)) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t v9 = (void *)(v4 + 24);
  uint64_t v10 = *(unsigned int *)(v4 + 32);
  if (v10 < 0x41) {
    return *v9 < (unint64_t)*(unsigned int *)(*(void *)a1 + 32);
  }
  int v11 = 0;
  int64_t v12 = (unint64_t)(v10 + 63) >> 6;
  do
  {
    if (v12-- < 1) {
      break;
    }
    unint64_t v14 = *(void *)(*v9 + 8 * v12);
    v11 += __clz(v14);
  }
  while (!v14);
  BOOL result = 0;
  int v15 = v10 | 0xFFFFFFC0;
  if ((v10 & 0x3F) == 0) {
    int v15 = 0;
  }
  if ((v10 - v11 - v15) <= 0x40)
  {
    uint64_t v9 = (void *)*v9;
    return *v9 < (unint64_t)*(unsigned int *)(*(void *)a1 + 32);
  }
  return result;
}

void *getPreferredVectorIndex(llvm::ConstantInt *a1, uint64_t a2, const llvm::APInt *a3)
{
  unsigned int v3 = *(llvm::ConstantInt ***)a1;
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFFFFFF00) == 0x4000) {
    return 0;
  }
  unsigned int v5 = (unint64_t *)((char *)a1 + 24);
  unsigned int v6 = *((_DWORD *)a1 + 8);
  if (v6 > 0x40)
  {
    int v11 = *(llvm::ConstantInt ***)a1;
    unsigned int v13 = (unint64_t *)((char *)a1 + 24);
    unsigned int v10 = *((_DWORD *)a1 + 8);
    int v7 = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantInt *)((char *)a1 + 24));
    unsigned int v6 = v10;
    unsigned int v3 = v11;
    unsigned int v5 = v13;
  }
  else
  {
    int v7 = v6 + __clz(*v5) - 64;
  }
  if (v6 - v7 > 0x40) {
    return 0;
  }
  uint64_t v8 = *v3;
  if (v6 <= 0x3F) {
    goto LABEL_8;
  }
  if (v6 != 64)
  {
    unsigned int v5 = (unint64_t *)*v5;
LABEL_8:
    unint64_t v9 = *v5;
    unsigned int v15 = 64;
    goto LABEL_9;
  }
  unsigned int v15 = 64;
  unint64_t v9 = *v5;
LABEL_9:
  unint64_t v14 = v9;
  BOOL result = llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v14, a3);
  if (v15 >= 0x41)
  {
    if (v14)
    {
      int64_t v12 = result;
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
      return v12;
    }
  }
  return result;
}

llvm::UndefValue **sub_1CCAC1290(uint64_t a1, llvm::UndefValue **a2)
{
  unsigned int v2 = a2;
  uint64_t v355 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)*(a2 - 8);
  uint64_t v5 = (uint64_t)*(a2 - 4);
  long long v6 = *(_OWORD *)(a1 + 120);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)uint64_t v347 = *(_OWORD *)(a1 + 88);
  long long v348 = v7;
  uint64_t v350 = *((void *)&v6 + 1);
  int64_t v349 = a2;
  ElementInst = llvm::SimplifyExtractElementInst((unsigned __int8 *)v4, v5, (llvm::Constant *)v347);
  if (ElementInst) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(v5 + 16) == 16) {
    uint64_t v17 = (unsigned __int8 *)v5;
  }
  else {
    uint64_t v17 = 0;
  }
  if (!v17) {
    goto LABEL_190;
  }
  if ((*(_DWORD *)(*(void *)v17 + 8) & 0xFFFFFF00) == 0x4000) {
    goto LABEL_12;
  }
  uint64_t v24 = *((unsigned int *)v17 + 8);
  if (v24 > 0x40)
  {
    int v311 = 0;
    int64_t v312 = (unint64_t)(v24 + 63) >> 6;
    do
    {
      BOOL v36 = v312-- < 1;
      if (v36) {
        break;
      }
      unint64_t v313 = *(void *)(*((void *)v17 + 3) + 8 * v312);
      v311 += __clz(v313);
    }
    while (!v313);
    int v314 = v24 | 0xFFFFFFC0;
    if ((v24 & 0x3F) == 0) {
      int v314 = 0;
    }
    int v25 = v311 + v314;
  }
  else
  {
    int v25 = v24 + __clz(*((void *)v17 + 3)) - 64;
  }
  if ((v24 - v25) > 0x40) {
    goto LABEL_12;
  }
  uint64_t v26 = **(llvm::ConstantInt ***)v17;
  if (v24 > 0x3F)
  {
    if (v24 == 64)
    {
      LODWORD(v347[1]) = 64;
      int v27 = (void *)*((void *)v17 + 3);
      goto LABEL_29;
    }
    int v27 = (void *)**((void **)v17 + 3);
  }
  else
  {
    int v27 = (void *)*((void *)v17 + 3);
  }
  LODWORD(v347[1]) = 64;
LABEL_29:
  v347[0] = v27;
  uint64_t v28 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)v347, v10);
  if (LODWORD(v347[1]) >= 0x41 && v347[0]) {
    MEMORY[0x1D25D9CB0](v347[0], 0x1000C8000313F17);
  }
  if (v28)
  {
    uint64_t v29 = a1;
    uint64_t v30 = (uint64_t)v2;
    unsigned int v31 = 1;
    uint64_t v32 = (uint64_t)v28;
    return (llvm::UndefValue **)sub_1CC9D28DC(v29, v30, v31, v32);
  }
LABEL_12:
  uint64_t v18 = *(v2 - 8);
  unint64_t v19 = *(unsigned int *)(*(void *)v18 + 32);
  if (*(unsigned char *)(v4 + 16) == 84)
  {
    uint64_t v20 = *(void *)(v4 - 32);
    if (v20)
    {
      if (!*(unsigned char *)(v20 + 16)
        && *(void *)(v20 + 24) == *(void *)(v4 + 72)
        && (*(unsigned char *)(v20 + 33) & 0x20) != 0
        && *(_DWORD *)(v20 + 36) == 130)
      {
        uint64_t v21 = (unint64_t *)(v17 + 24);
        uint64_t v22 = *((unsigned int *)v17 + 8);
        if (v22 >= 0x41)
        {
          int v33 = 0;
          int64_t v34 = (unint64_t)(v22 + 63) >> 6;
          uint64_t v35 = v34;
          do
          {
            BOOL v36 = v35-- < 1;
            if (v36) {
              break;
            }
            unint64_t v37 = *(void *)(*v21 + 8 * v35);
            v33 += __clz(v37);
          }
          while (!v37);
          int v38 = v22 | 0xFFFFFFC0;
          if ((v22 & 0x3F) == 0) {
            int v38 = 0;
          }
          if ((v22 - v33 - v38) < 0x41 && *(void *)*v21 < v19)
          {
            int v39 = 0;
            do
            {
              BOOL v36 = v34-- < 1;
              if (v36) {
                break;
              }
              unint64_t v40 = *(void *)(*v21 + 8 * v34);
              v39 += __clz(v40);
            }
            while (!v40);
            int v23 = v39 + v38;
            goto LABEL_45;
          }
        }
        else if (*v21 < v19)
        {
          int v23 = v22 + __clz(*v21) - 64;
LABEL_45:
          uint64_t v41 = *v2;
          unsigned int v42 = *((_DWORD *)*v2 + 2);
          if ((int)v22 - v23 <= v42 >> 8)
          {
            llvm::APInt::zextOrTrunc((uint64_t *)v21, v42 >> 8, (uint64_t)v347);
            Splat = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)v347, v240);
            if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
              Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)Splat);
            }
            if (LODWORD(v347[1]) >= 0x41 && v347[0]) {
              MEMORY[0x1D25D9CB0](v347[0], 0x1000C8000313F17);
            }
          }
          else
          {
            Splat = llvm::UndefValue::get(*v2, v18);
          }
          uint64_t v12 = a1;
          unsigned int v13 = (llvm::ValueAsMetadata *)v2;
          int v11 = Splat;
          return sub_1CC9D3C84(v12, v13, v11);
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)v18 + 8) != 19)
  {
    uint64_t v44 = (unint64_t *)(v17 + 24);
    uint64_t v45 = *((unsigned int *)v17 + 8);
    if (v45 >= 0x41)
    {
      int v46 = 0;
      int64_t v47 = (unint64_t)(v45 + 63) >> 6;
      do
      {
        BOOL v36 = v47-- < 1;
        if (v36) {
          break;
        }
        unint64_t v48 = *(void *)(*v44 + 8 * v47);
        v46 += __clz(v48);
      }
      while (!v48);
      int v49 = v45 | 0xFFFFFFC0;
      if ((v45 & 0x3F) == 0) {
        int v49 = 0;
      }
      if ((v45 - v46 - v49) > 0x40) {
        return 0;
      }
      uint64_t v44 = (unint64_t *)*v44;
    }
    if (*v44 >= v19) {
      return 0;
    }
  }
  unsigned int v346 = 0;
  v347[0] = &v346;
  if (!sub_1CCA4756C((void **)v347, (uint64_t)v18)) {
    goto LABEL_58;
  }
  uint64_t v186 = (uint64_t)*(v2 - 4);
  if (!v186 || *(unsigned char *)(v186 + 16) != 16) {
    goto LABEL_58;
  }
  unint64_t v187 = (llvm::Value *)(v186 + 24);
  uint64_t v188 = *(unsigned int *)(v186 + 32);
  if (v188 >= 0x41)
  {
    int v315 = 0;
    int64_t v316 = (unint64_t)(v188 + 63) >> 6;
    do
    {
      BOOL v36 = v316-- < 1;
      if (v36) {
        break;
      }
      unint64_t v317 = *(void *)(*(void *)v187 + 8 * v316);
      v315 += __clz(v317);
    }
    while (!v317);
    int v318 = v188 | 0xFFFFFFC0;
    if ((v188 & 0x3F) == 0) {
      int v318 = 0;
    }
    if ((v188 - v315 - v318) > 0x40) {
      goto LABEL_58;
    }
    unint64_t v187 = *(llvm::Value **)v187;
  }
  uint64_t v189 = *(void *)v346;
  if ((*(_DWORD *)(*(void *)v346 + 8) & 0xFE) == 0x12)
  {
    int v190 = *(llvm::Value **)v187;
    uint64_t v191 = *(void *)*(v2 - 8);
    unsigned int v192 = *(_DWORD *)(v191 + 32);
    uint64_t v341 = *v2;
    int v338 = **(unsigned __int8 **)(a1 + 80);
    unsigned int v193 = *(_DWORD *)(v189 + 32);
    int v194 = (*(_DWORD *)(*(void *)v346 + 8) != 19) ^ (*(unsigned char *)(v191 + 8) == 19);
    if (v193 == v192 && v194 != 0)
    {
      ScalarElement = llvm::findScalarElement(v346, v190);
      if (ScalarElement)
      {
        unsigned int v309 = ScalarElement;
        unsigned int v310 = operator new(0x60uLL);
        v310[13] = v310[13] & 0x38000000 | 1;
        uint64_t v15 = (uint64_t)(v310 + 8);
        *(void *)unsigned int v310 = 0;
        *((void *)v310 + 1) = 0;
        *((void *)v310 + 2) = 0;
        *((void *)v310 + 3) = v310 + 8;
        LOWORD(v349) = 257;
        uint64_t v298 = (llvm::BitCastInst *)(v310 + 8);
        unsigned int v299 = v309;
        goto LABEL_442;
      }
    }
    if (v193 < v192)
    {
      int v197 = v346;
      if (*((unsigned char *)v346 + 16) == 90)
      {
        int v198 = *((_DWORD *)v346 + 5);
        uint64_t v199 = (v198 & 0x40000000) != 0
             ? (llvm *)*((void *)v346 - 1)
             : (llvm *)((char *)v346 - 32 * (v198 & 0x7FFFFFF));
        unint64_t v336 = (llvm::Value *)*((void *)v199 + 4);
        if (v336)
        {
          uint64_t v255 = *((void *)v199 + 8);
          if (v255 && *(unsigned char *)(v255 + 16) == 16)
          {
            uint64_t v257 = (void *)(v255 + 24);
            uint64_t v258 = *(unsigned int *)(v255 + 32);
            if (v258 >= 0x41)
            {
              int v319 = 0;
              int64_t v320 = (unint64_t)(v258 + 63) >> 6;
              do
              {
                BOOL v36 = v320-- < 1;
                if (v36) {
                  break;
                }
                unint64_t v321 = *(void *)(*v257 + 8 * v320);
                v319 += __clz(v321);
              }
              while (!v321);
              int v322 = v258 | 0xFFFFFFC0;
              if ((v258 & 0x3F) == 0) {
                int v322 = 0;
              }
              if ((v258 - v319 - v322) > 0x40) {
                goto LABEL_58;
              }
              uint64_t v257 = (void *)*v257;
            }
            BOOL v259 = (void *)*v257;
            unint64_t v260 = v192 / v193;
            if ((void *)((unint64_t)v190 / v260) == v259)
            {
              int v261 = (unint64_t)v190 % v260;
              int v262 = v260 + ~v261;
              if (!v338) {
                int v262 = v261;
              }
              int __pb = v262;
              if ((*(_DWORD *)(v189 + 8) & 0xFE) == 0x12)
              {
                int v263 = *(uint64_t **)(v189 + 16);
                uint64_t v189 = *v263;
                unsigned int v264 = *(unsigned __int8 *)(*v263 + 8);
              }
              else
              {
                unsigned int v264 = *(_DWORD *)(v189 + 8);
              }
              BOOL v265 = v264 < 7;
              unsigned int v266 = *((unsigned __int8 *)v341 + 8);
              BOOL v339 = v266 < 7;
              if (v264 > 6 || v266 >= 7)
              {
                unsigned int PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v189);
                unint64_t v269 = llvm::Type::getPrimitiveSizeInBits(v341);
                if (v9 == 1)
                {
                  int v197 = v346;
                }
                uint64_t v270 = *((void *)v197 + 1);
                if (v270 && !*(void *)(v270 + 8))
                {
                  uint64_t v280 = *((void *)*(v2 - 8) + 1);
                  if (v280) {
                    BOOL v281 = *(void *)(v280 + 8) != 0;
                  }
                  else {
                    BOOL v281 = 1;
                  }
                  if (v281 && (v265 || v339)) {
                    goto LABEL_58;
                  }
                  if (v265)
                  {
                    uint64_t IntNTy = llvm::Type::getIntNTy(**(llvm::Type ***)v336, PrimitiveSizeInBits, v268);
                    unint64_t v292 = *(uint64_t **)(a1 + 24);
                    __int16 v354 = 257;
                    if (*(void *)v336 != IntNTy)
                    {
                      if (*((unsigned __int8 *)v336 + 16) <= 0x14u)
                      {
                        unint64_t v336 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v292[9] + 224))(v292[9], 49, v336, IntNTy);
                        if (v336)
                        {
                          if (*((unsigned __int8 *)v336 + 16) >= 0x1Cu)
                          {
                            (*(void (**)(uint64_t, llvm::Value *, llvm::ValueAsMetadata ***, uint64_t, uint64_t))(*(void *)v292[10] + 16))(v292[10], v336, &v351, v292[6], v292[7]);
                            uint64_t v300 = *((unsigned int *)v292 + 2);
                            if (v300)
                            {
                              uint64_t v301 = *v292;
                              uint64_t v302 = v301 + 16 * v300;
                              do
                              {
                                llvm::Instruction::setMetadata(v336, *(_DWORD *)v301, *(llvm::MDNode **)(v301 + 8));
                                v301 += 16;
                              }
                              while (v301 != v302);
                            }
                          }
                        }
                      }
                      else
                      {
                        LOWORD(v349) = 257;
                        unint64_t v336 = llvm::CastInst::Create(49, (uint64_t)v336, IntNTy, (const char **)v347, 0);
                        (*(void (**)(uint64_t))(*(void *)v292[10] + 16))(v292[10]);
                        uint64_t v293 = *((unsigned int *)v292 + 2);
                        if (v293)
                        {
                          uint64_t v294 = *v292;
                          uint64_t v295 = v294 + 16 * v293;
                          do
                          {
                            llvm::Instruction::setMetadata(v336, *(_DWORD *)v294, *(llvm::MDNode **)(v294 + 8));
                            v294 += 16;
                          }
                          while (v294 != v295);
                        }
                      }
                    }
                  }
                }
                else if (v265 || v339)
                {
                  goto LABEL_58;
                }
                unint64_t v9 = (__pb * v269);
                if (!v9)
                {
LABEL_407:
                  if (!v339)
                  {
                    uint64_t v282 = operator new(0x60uLL);
                    v282[13] = v282[13] & 0x38000000 | 1;
                    uint64_t v15 = (uint64_t)(v282 + 8);
                    *(void *)uint64_t v282 = 0;
                    *((void *)v282 + 1) = 0;
                    *((void *)v282 + 2) = 0;
                    *((void *)v282 + 3) = v282 + 8;
                    LOWORD(v349) = 257;
                    llvm::TruncInst::TruncInst((llvm::TruncInst *)(v282 + 8), v336, v341, (const char **)v347, 0);
                    return (llvm::UndefValue **)v15;
                  }
                  uint64_t v274 = llvm::Type::getIntNTy(**(llvm::Type ***)v336, (llvm::LLVMContext *)v269, v268);
                  unsigned int v275 = operator new(0x60uLL);
                  v275[13] = v275[13] & 0x38000000 | 1;
                  *(void *)unsigned int v275 = 0;
                  *((void *)v275 + 1) = 0;
                  *((void *)v275 + 2) = 0;
                  *((void *)v275 + 3) = v275 + 8;
                  uint64_t v15 = (uint64_t)(v275 + 8);
                  unint64_t v276 = *(uint64_t **)(a1 + 24);
                  __int16 v354 = 257;
                  if (*(void *)v336 != v274)
                  {
                    if (*((unsigned __int8 *)v336 + 16) <= 0x14u)
                    {
                      uint64_t v296 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v276[9]
                                                                                                 + 224))(v276[9], 38, v336, v274);
                      unint64_t v336 = (llvm::Value *)v296;
                      if (v296) {
                        BOOL v297 = *(unsigned __int8 *)(v296 + 16) >= 0x1Cu;
                      }
                      else {
                        BOOL v297 = 0;
                      }
                      if (v297)
                      {
                        (*(void (**)(uint64_t, uint64_t, llvm::ValueAsMetadata ***, uint64_t, uint64_t))(*(void *)v276[10] + 16))(v276[10], v296, &v351, v276[6], v276[7]);
                        uint64_t v323 = *((unsigned int *)v276 + 2);
                        if (v323)
                        {
                          uint64_t v324 = *v276;
                          uint64_t v325 = *v276 + 16 * v323;
                          do
                          {
                            llvm::Instruction::setMetadata(v336, *(_DWORD *)v324, *(llvm::MDNode **)(v324 + 8));
                            v324 += 16;
                          }
                          while (v324 != v325);
                        }
                      }
                    }
                    else
                    {
                      LOWORD(v349) = 257;
                      unint64_t v336 = llvm::CastInst::Create(38, (uint64_t)v336, v274, (const char **)v347, 0);
                      (*(void (**)(uint64_t))(*(void *)v276[10] + 16))(v276[10]);
                      uint64_t v277 = *((unsigned int *)v276 + 2);
                      if (v277)
                      {
                        uint64_t v278 = *v276;
                        uint64_t v279 = *v276 + 16 * v277;
                        do
                        {
                          llvm::Instruction::setMetadata(v336, *(_DWORD *)v278, *(llvm::MDNode **)(v278 + 8));
                          v278 += 16;
                        }
                        while (v278 != v279);
                      }
                    }
                  }
                  LOWORD(v349) = 257;
                  uint64_t v298 = (llvm::BitCastInst *)v15;
                  unsigned int v299 = v336;
LABEL_442:
                  llvm::BitCastInst::BitCastInst(v298, v299, v341, (const char **)v347, 0);
                  return (llvm::UndefValue **)v15;
                }
                uint64_t v271 = *((void *)*(v2 - 8) + 1);
                if (v271 && !*(void *)(v271 + 8))
                {
                  uint64_t v272 = *(void *)(a1 + 24);
                  LOWORD(v349) = 257;
                  unsigned int v273 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v336, v9, 0);
                  unint64_t v336 = sub_1CC2429AC(v272, (uint64_t)v336, (uint64_t)v273, (uint64_t)v347, 0);
                  goto LABEL_407;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_58:
  if (*(unsigned char *)(v4 + 16) != 83) {
    goto LABEL_190;
  }
  int v351 = (llvm::ValueAsMetadata **)v353;
  uint64_t v352 = 0x200000000;
  uint64_t v50 = *(void *)(v4 + 8);
  if (!v50) {
    goto LABEL_186;
  }
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  do
  {
    uint64_t v15 = *(void *)(v50 + 24);
    if (v15 && *(unsigned char *)(v15 + 16) == 89)
    {
      if (*(v2 - 4) != *(llvm::UndefValue **)(v15 - 32)) {
        goto LABEL_186;
      }
      if (v51 >= HIDWORD(v352)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v351[v51] = (llvm::ValueAsMetadata *)v15;
      unsigned int v51 = v352 + 1;
      LODWORD(v352) = v352 + 1;
      uint64_t v15 = v52;
    }
    else if (v52)
    {
      goto LABEL_186;
    }
    uint64_t v50 = *(void *)(v50 + 8);
    uint64_t v52 = v15;
  }
  while (v50);
  if (!v15) {
    goto LABEL_187;
  }
  uint64_t v53 = *(void *)(v15 + 8);
  if (!v53
    || *(void *)(v53 + 8)
    || *(void *)(v53 + 24) != v4
    || *(unsigned __int8 *)(v15 + 16) - 41 > 0x11
    || !sub_1CCAC0F7C(v15, (uint64_t)*(v2 - 4)))
  {
LABEL_186:
    uint64_t v15 = 0;
    goto LABEL_187;
  }
  uint64_t v54 = *v2;
  int v55 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
  LOWORD(v349) = 257;
  unsigned int v56 = operator new(0x48uLL);
  v56[1] = v54;
  *unsigned int v56 = 0;
  v56[2] = 0;
  v56[3] = 0x4000000000000053;
  *((_OWORD *)v56 + 2) = 0u;
  *((_OWORD *)v56 + 3) = 0u;
  *((_DWORD *)v56 + 16) = 0;
  *((_DWORD *)v56 + 17) = v55;
  uint64_t v57 = (llvm::Value *)(v56 + 1);
  llvm::Value::setNameImpl((llvm::Value *)(v56 + 1), (const char **)v347);
  if (!*((unsigned char *)v56 + 24))
  {
    if ((*((unsigned char *)v56 + 31) & 0x10) == 0) {
      goto LABEL_457;
    }
    uint64_t v283 = ***(void ***)v57;
    uint64_t v284 = *(void *)(v283 + 152);
    uint64_t v285 = *(unsigned int *)(v283 + 168);
    if (v285)
    {
      LODWORD(v286) = (v285 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      unsigned int v287 = (llvm::Value **)(v284 + 16 * v286);
      uint64_t v288 = *v287;
      if (*v287 == v57)
      {
LABEL_450:
        unsigned int v303 = v287[1];
        unint64_t v306 = *(void *)v303;
        long long v304 = (char *)v303 + 16;
        unint64_t v305 = v306;
        if (v306 >= 5 && *(_DWORD *)v304 == *(_DWORD *)"llvm." && v304[4] == aLlvm_1[4])
        {
          *((_DWORD *)v56 + 10) |= 0x2000u;
          int v308 = llvm::Function::lookupIntrinsicID(v304, v305);
LABEL_458:
          *((_DWORD *)v56 + 11) = v308;
          goto LABEL_77;
        }
LABEL_457:
        int v308 = 0;
        *((_DWORD *)v56 + 10) &= ~0x2000u;
        goto LABEL_458;
      }
      int v289 = 1;
      while (v288 != (llvm::Value *)-4096)
      {
        int v290 = v286 + v289++;
        uint64_t v286 = v290 & (v285 - 1);
        uint64_t v288 = *(llvm::Value **)(v284 + 16 * v286);
        if (v288 == v57)
        {
          unsigned int v287 = (llvm::Value **)(v284 + 16 * v286);
          goto LABEL_450;
        }
      }
    }
    unsigned int v287 = (llvm::Value **)(v284 + 16 * v285);
    goto LABEL_450;
  }
LABEL_77:
  uint64_t v58 = *((unsigned int *)v56 + 17);
  int v59 = operator new(40 * v58);
  *unsigned int v56 = v59;
  if (v58)
  {
    char v60 = &v59[4 * v58];
    do
    {
      *int v59 = 0;
      v59[1] = 0;
      v59[2] = 0;
      v59[3] = v57;
      v59 += 4;
    }
    while (v59 != v60);
  }
  uint64_t v337 = sub_1CC9D2AB4(a1, v57, v4);
  int v61 = *(_DWORD *)(v4 + 20);
  unint64_t v62 = v61 & 0x7FFFFFF;
  if ((v61 & 0x7FFFFFF) != 0)
  {
    unint64_t v63 = 0;
    while (1)
    {
      if ((v61 & 0x40000000) != 0) {
        uint64_t v64 = *(void *)(v4 - 8);
      }
      else {
        uint64_t v64 = v4 - 32 * v62;
      }
      uint64_t v65 = *(unsigned __int8 **)(v64 + 32 * (void)v63);
      uint64_t v340 = *(llvm::Type **)(v64 + 32 * *(unsigned int *)(v4 + 60) + 8 * (void)v63);
      BOOL v66 = *(v2 - 4);
      if (v65 == (unsigned __int8 *)v15)
      {
        unsigned int v76 = *(llvm::Value **)(v15 - 64 + 32 * (*(void *)(v15 - 64) == v4));
        BOOL v328 = *(v2 - 4);
        if ((*((unsigned char *)v76 + 23) & 0x10) != 0)
        {
          uint64_t v77 = ***(void ***)v76;
          uint64_t v78 = *(void *)(v77 + 152);
          uint64_t v79 = *(unsigned int *)(v77 + 168);
          if (!v79) {
            goto LABEL_127;
          }
          LODWORD(v80) = (v79 - 1) & ((v76 >> 4) ^ (v76 >> 9));
          unint64_t v81 = (llvm::Value **)(v78 + 16 * v80);
          BOOL v82 = *v81;
          if (*v81 != v76)
          {
            int v83 = 1;
            while (v82 != (llvm::Value *)-4096)
            {
              int v84 = v80 + v83++;
              uint64_t v80 = v84 & (v79 - 1);
              BOOL v82 = *(llvm::Value **)(v78 + 16 * v80);
              if (v82 == v76)
              {
                unint64_t v81 = (llvm::Value **)(v78 + 16 * v80);
                goto LABEL_128;
              }
            }
LABEL_127:
            unint64_t v81 = (llvm::Value **)(v78 + 16 * v79);
          }
LABEL_128:
          unsigned int v103 = v81[1];
          unint64_t v106 = *(void **)v103;
          unsigned int v105 = (char *)v103 + 16;
          unsigned int v104 = v106;
        }
        else
        {
          unsigned int v104 = 0;
          unsigned int v105 = &byte_1CFBCE98E;
        }
        LOWORD(v349) = 773;
        v347[0] = v105;
        v347[1] = v104;
        *(void *)&long long v348 = ".Elt";
        uint64_t v107 = operator new(0x80uLL);
        v107[21] = v107[21] & 0x38000000 | 2;
        uint64_t v108 = (llvm::Value *)(v107 + 16);
        *(void *)uint64_t v107 = 0;
        *((void *)v107 + 1) = 0;
        *((void *)v107 + 2) = 0;
        *((void *)v107 + 3) = v107 + 16;
        *((void *)v107 + 4) = 0;
        *((void *)v107 + 5) = 0;
        *((void *)v107 + 6) = 0;
        *((void *)v107 + 7) = v107 + 16;
        llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v107 + 16), v76, v328, (const char **)v347, 0);
        int v109 = sub_1CC9D2AB4(a1, v108, v15);
        char v110 = *(unsigned char *)(v15 + 16) - 28;
        LOWORD(v349) = 257;
        unsigned int v111 = llvm::BinaryOperator::Create(v110, v337, (uint64_t)v109, (const char **)v347, 0);
        llvm::Instruction::copyIRFlags((uint64_t)v111, v15, 1);
        int v112 = sub_1CC9D2AB4(a1, v111, v15);
        unint64_t v90 = v337;
        unsigned int v113 = v112;
        int v114 = *((_DWORD *)v337 + 5);
        uint64_t v115 = v114 & 0x7FFFFFF;
        if ((v114 & 0x7FFFFFF) == *((_DWORD *)v337 + 15))
        {
          LODWORD(v136) = v115 + (v115 >> 1);
          if (v136 <= 2) {
            uint64_t v136 = 2;
          }
          else {
            uint64_t v136 = v136;
          }
          uint64_t v330 = v136;
          *((_DWORD *)v337 + 15) = v136;
          if ((v114 & 0x40000000) != 0) {
            unsigned int v137 = (uint64_t *)*((void *)v337 - 1);
          }
          else {
            unsigned int v137 = (uint64_t *)((char *)v337 - 32 * v115);
          }
          __pa = v137;
          uint64_t v138 = operator new(40 * v136);
          *((void *)v337 - 1) = v138;
          int v139 = v138;
          do
          {
            void *v139 = 0;
            v139[1] = 0;
            v139[2] = 0;
            v139[3] = v337;
            v139 += 4;
          }
          while (v139 != &v138[4 * v330]);
          int v140 = *((_DWORD *)v337 + 5);
          if ((v140 & 0x40000000) != 0) {
            uint64_t v141 = (uint64_t)v138;
          }
          else {
            uint64_t v141 = (uint64_t)v337 - 32 * (v140 & 0x7FFFFFF);
          }
          size_t v327 = v141;
          sub_1CC5E4108((uint64_t)v347, __pa, &__pa[4 * v115], v141);
          if (v115)
          {
            memmove((void *)(v327 + 32 * v330), &__pa[4 * v115], 8 * v115);
            uint64_t v142 = 4 * v115;
            do
            {
              unsigned int v143 = &__pa[v142];
              if (__pa[v142 - 4])
              {
                *(void *)*(v143 - 2) = *(v143 - 3);
                uint64_t v144 = *(v143 - 3);
                if (v144) {
                  *(void *)(v144 + 16) = *(v143 - 2);
                }
              }
              v142 -= 4;
            }
            while (v142 * 8);
          }
          operator delete(__pa);
          unint64_t v90 = v337;
          int v114 = *((_DWORD *)v337 + 5);
        }
        uint64_t v116 = (v114 + 1) & 0x7FFFFFF;
        *((_DWORD *)v90 + 5) = v114 & 0xF8000000 | (v114 + 1) & 0x7FFFFFF;
        if ((v114 & 0x40000000) != 0) {
          unint64_t v117 = (char *)*((void *)v90 - 1);
        }
        else {
          unint64_t v117 = (char *)v90 - 32 * v116;
        }
        uint64_t v118 = (v116 - 1);
        uint64_t v119 = &v117[32 * v118];
        if (*(void *)v119)
        {
          **((void **)v119 + 2) = *((void *)v119 + 1);
          uint64_t v135 = *((void *)v119 + 1);
          if (v135) {
            *(void *)(v135 + 16) = *((void *)v119 + 2);
          }
        }
        *(void *)uint64_t v119 = v113;
        if (v113)
        {
          uint64_t v122 = *((void *)v113 + 1);
          uint64_t v121 = (char **)((char *)v113 + 8);
          uint64_t v120 = v122;
          int v123 = &v117[32 * v118];
          *((void *)v123 + 1) = v122;
          if (v122) {
            *(void *)(v120 + 16) = v123 + 8;
          }
          *((void *)v123 + 2) = v121;
          *uint64_t v121 = v119;
        }
        int v124 = *((_DWORD *)v90 + 5);
        uint64_t v101 = v124 & 0x7FFFFFF;
        if ((v124 & 0x40000000) != 0) {
          char v102 = (char *)*((void *)v90 - 1);
        }
        else {
          char v102 = (char *)v90 - 32 * v101;
        }
        goto LABEL_139;
      }
      uint64_t v334 = v63;
      LOWORD(v349) = 257;
      int v67 = v66;
      int v68 = (char *)operator new(0x80uLL);
      *((_DWORD *)v68 + 21) = *((_DWORD *)v68 + 21) & 0x38000000 | 2;
      *(void *)int v68 = 0;
      *((void *)v68 + 1) = 0;
      *((void *)v68 + 2) = 0;
      *((void *)v68 + 3) = v68 + 64;
      *((void *)v68 + 4) = 0;
      *((void *)v68 + 5) = 0;
      *((void *)v68 + 6) = 0;
      *((void *)v68 + 7) = v68 + 64;
      llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v68 + 64), (llvm::Value *)v65, v67, (const char **)v347, 0);
      unsigned int v69 = v65[16];
      BOOL v70 = v69 == 83 || v65 == 0;
      if (!v70 && v69 >= 0x1C) {
        break;
      }
      int v72 = (char *)v340 + 40;
      uint64_t v73 = (char *)*((void *)v340 + 6);
      if (v73 != (char *)v340 + 40)
      {
        unsigned int v74 = (llvm::Value *)(v68 + 64);
        while (1)
        {
          unint64_t v75 = v73 - 24;
          if (!v73) {
            unint64_t v75 = 0;
          }
          if (v75[16] != 83) {
            break;
          }
          uint64_t v73 = (char *)*((void *)v73 + 1);
          if (v73 == v72) {
            goto LABEL_116;
          }
        }
        unsigned int v86 = *(v73 - 8) - 38;
        BOOL v36 = v86 > 0x38;
        uint64_t v87 = (1 << v86) & 0x100060000000001;
        if (v36 || v87 == 0)
        {
          int v72 = v73;
          goto LABEL_116;
        }
        uint64_t v85 = (char **)(v73 + 8);
        goto LABEL_108;
      }
LABEL_109:
      unsigned int v74 = (llvm::Value *)(v68 + 64);
LABEL_116:
      if (v72) {
        uint64_t v89 = (uint64_t)(v72 - 24);
      }
      else {
        uint64_t v89 = 0;
      }
      sub_1CC9D2AB4(a1, v74, v89);
      unint64_t v90 = v337;
      int v91 = *((_DWORD *)v337 + 5);
      uint64_t v92 = v91 & 0x7FFFFFF;
      if ((v91 & 0x7FFFFFF) == *((_DWORD *)v337 + 15))
      {
        LODWORD(v126) = v92 + (v92 >> 1);
        if (v126 <= 2) {
          uint64_t v126 = 2;
        }
        else {
          uint64_t v126 = v126;
        }
        uint64_t v329 = v126;
        *((_DWORD *)v337 + 15) = v126;
        if ((v91 & 0x40000000) != 0) {
          int v127 = (uint64_t *)*((void *)v337 - 1);
        }
        else {
          int v127 = (uint64_t *)((char *)v337 - 32 * v92);
        }
        __p = v127;
        unint64_t v128 = operator new(40 * v126);
        *((void *)v337 - 1) = v128;
        unsigned int v129 = v128;
        do
        {
          *unsigned int v129 = 0;
          v129[1] = 0;
          v129[2] = 0;
          v129[3] = v337;
          v129 += 4;
        }
        while (v129 != &v128[4 * v329]);
        int v130 = *((_DWORD *)v337 + 5);
        if ((v130 & 0x40000000) != 0) {
          uint64_t v131 = (uint64_t)v128;
        }
        else {
          uint64_t v131 = (uint64_t)v337 - 32 * (v130 & 0x7FFFFFF);
        }
        size_t v326 = v131;
        sub_1CC5E4108((uint64_t)v347, __p, &__p[4 * v92], v131);
        if (v92)
        {
          memmove((void *)(v326 + 32 * v329), &__p[4 * v92], 8 * v92);
          uint64_t v132 = 4 * v92;
          do
          {
            unint64_t v133 = &__p[v132];
            if (__p[v132 - 4])
            {
              *(void *)*(v133 - 2) = *(v133 - 3);
              uint64_t v134 = *(v133 - 3);
              if (v134) {
                *(void *)(v134 + 16) = *(v133 - 2);
              }
            }
            v132 -= 4;
          }
          while (v132 * 8);
        }
        operator delete(__p);
        unint64_t v90 = v337;
        int v91 = *((_DWORD *)v337 + 5);
      }
      uint64_t v93 = (v91 + 1) & 0x7FFFFFF;
      *((_DWORD *)v90 + 5) = v91 & 0xF8000000 | (v91 + 1) & 0x7FFFFFF;
      if ((v91 & 0x40000000) != 0) {
        uint64_t v94 = (char *)*((void *)v90 - 1);
      }
      else {
        uint64_t v94 = (char *)v90 - 32 * v93;
      }
      uint64_t v95 = (v93 - 1);
      char v96 = &v94[32 * v95];
      if (*(void *)v96)
      {
        **((void **)v96 + 2) = *((void *)v96 + 1);
        uint64_t v125 = *((void *)v96 + 1);
        if (v125) {
          *(void *)(v125 + 16) = *((void *)v96 + 2);
        }
      }
      *(void *)char v96 = v74;
      uint64_t v99 = *((void *)v68 + 9);
      unsigned int v98 = (char **)(v68 + 72);
      uint64_t v97 = v99;
      *((void *)v96 + 1) = v99;
      if (v99) {
        *(void *)(v97 + 16) = v96 + 8;
      }
      *(void *)&v94[32 * v95 + 16] = v98;
      llvm::Constant *v98 = v96;
      int v100 = *((_DWORD *)v90 + 5);
      uint64_t v101 = v100 & 0x7FFFFFF;
      unint64_t v63 = v334;
      if ((v100 & 0x40000000) != 0) {
        char v102 = (char *)*((void *)v90 - 1);
      }
      else {
        char v102 = (char *)v90 - 32 * v101;
      }
LABEL_139:
      *(void *)&v102[32 * *((unsigned int *)v90 + 15) + 8 * (v101 - 1)] = v340;
      unint64_t v63 = (llvm::Value *)((char *)v63 + 1);
      int v61 = *(_DWORD *)(v4 + 20);
      unint64_t v62 = v61 & 0x7FFFFFF;
      if ((unint64_t)v63 >= v62) {
        goto LABEL_364;
      }
    }
    uint64_t v85 = (char **)(v65 + 32);
LABEL_108:
    int v72 = *v85;
    goto LABEL_109;
  }
LABEL_364:
  uint64_t v15 = (uint64_t)v2;
  if (v352)
  {
    int v241 = v351;
    uint64_t v242 = 8 * v352;
    do
    {
      uint64_t v243 = *v241++;
      sub_1CC9D3C84(a1, v243, v337);
      v242 -= 8;
    }
    while (v242);
    uint64_t v15 = (uint64_t)v2;
  }
LABEL_187:
  if (v351 != (llvm::ValueAsMetadata **)v353) {
    free(v351);
  }
  if (v15) {
    return (llvm::UndefValue **)v15;
  }
LABEL_190:
  unsigned int v145 = *(unsigned __int8 *)(v4 + 16);
  if (v4 && v145 == 40)
  {
    if (sub_1CCAC0F7C(v4, v5))
    {
      uint64_t v146 = *(unsigned __int8 **)(v4 - 32);
      uint64_t v147 = *(void *)(a1 + 24);
      LOWORD(v349) = 257;
      int v148 = (uint64_t *)sub_1CB8445F4(v147, v146, (unsigned __int8 *)v5, (uint64_t)v347);
      char v149 = *(unsigned char *)(v4 + 16) - 28;
      LOWORD(v349) = 257;
      unint64_t v150 = llvm::UnaryOperator::Create(v149, v148, (const char **)v347, 0);
LABEL_199:
      uint64_t v15 = (uint64_t)v150;
      llvm::Instruction::copyIRFlags((uint64_t)v150, v4, 1);
      return (llvm::UndefValue **)v15;
    }
    unsigned int v145 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v145 >= 0x1C && v145 - 59 >= 0xFFFFFFEE)
  {
    if (sub_1CCAC0F7C(v4, v5))
    {
      unsigned int v151 = *(unsigned __int8 **)(v4 - 64);
      uint64_t v152 = *(unsigned __int8 **)(v4 - 32);
      uint64_t v153 = *(void *)(a1 + 24);
      LOWORD(v349) = 257;
      uint64_t v154 = sub_1CB8445F4(v153, v151, (unsigned __int8 *)v5, (uint64_t)v347);
      uint64_t v155 = *(void *)(a1 + 24);
      LOWORD(v349) = 257;
      unsigned int v156 = sub_1CB8445F4(v155, v152, (unsigned __int8 *)v5, (uint64_t)v347);
      char v157 = *(unsigned char *)(v4 + 16) - 28;
      LOWORD(v349) = 257;
      unint64_t v150 = llvm::BinaryOperator::Create(v157, v154, (uint64_t)v156, (const char **)v347, 0);
      goto LABEL_199;
    }
    unsigned int v145 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v145 >= 0x1C && v145 - 83 >= 0xFFFFFFFE)
  {
    int v158 = *(unsigned __int8 **)(v4 - 64);
    if (!v158) {
      goto LABEL_209;
    }
    int v159 = *(unsigned __int8 **)(v4 - 32);
    if (!v159) {
      goto LABEL_209;
    }
    __int16 v160 = *(_WORD *)(v4 + 18);
    if (sub_1CCAC0F7C(v4, v5))
    {
      uint64_t v161 = *(void *)(a1 + 24);
      LOWORD(v349) = 257;
      int v162 = sub_1CB8445F4(v161, v158, (unsigned __int8 *)v5, (uint64_t)v347);
      uint64_t v163 = *(void *)(a1 + 24);
      LOWORD(v349) = 257;
      int v164 = sub_1CB8445F4(v163, v159, (unsigned __int8 *)v5, (uint64_t)v347);
      int v165 = *(unsigned __int8 *)(v4 + 16) - 28;
      LOWORD(v349) = 257;
      return (llvm::UndefValue **)llvm::CmpInst::Create(v165, v160 & 0x3F, v162, (uint64_t)v164, (const char **)v347, 0);
    }
    unsigned int v145 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v145 < 0x1C) {
    goto LABEL_263;
  }
LABEL_209:
  if (v145 == 62)
  {
    if (!v17) {
      return 0;
    }
    unsigned int v175 = v17 + 24;
    if (*((_DWORD *)v17 + 8) >= 0x41u) {
      unsigned int v175 = (void *)*v175;
    }
    if (*v175 >= (unint64_t)*(unsigned int *)(*(void *)v4 + 32)
      || (uint64_t v176 = *(void *)(v4 + 8)) == 0
      || *(void *)(v176 + 8)
      || ((int v177 = *(_DWORD *)(v4 + 20), (v177 & 0x40000000) != 0)
        ? (uint64_t *)(v179 = *(uint64_t **)(v4 - 8), uint64_t v178 = v177 & 0x7FFFFFF)
        : (uint64_t v178 = v177 & 0x7FFFFFF, v179 = (uint64_t *)(v4 - 32 * v178)),
          !v178))
    {
LABEL_264:
      uint64_t v207 = *(void *)*(v2 - 8);
      unsigned int v208 = *(_DWORD *)(v207 + 32);
      if (*(unsigned char *)(v207 + 8) == 19 || v208 == 1) {
        return 0;
      }
      uint64_t v210 = *(void *)(v4 + 8);
      if (v210 && !*(void *)(v210 + 8))
      {
        LODWORD(v347[1]) = *(_DWORD *)(v207 + 32);
        if (v208 > 0x40) {
          operator new[]();
        }
        v347[0] = 0;
        unint64_t v231 = v17 + 24;
        if (*((_DWORD *)v17 + 8) >= 0x41u) {
          unint64_t v231 = (void *)*v231;
        }
        uint64_t v232 = 1 << *v231;
        unsigned int v345 = v208;
        uint64_t v344 = v232;
        unint64_t v234 = sub_1CCABD934(a1, v4, (llvm::APInt *)&v344, v347, 0, 0);
        if (v345 >= 0x41 && v344) {
          MEMORY[0x1D25D9CB0](v344, 0x1000C8000313F17);
        }
        if (v234) {
          unsigned int v2 = (llvm::UndefValue **)sub_1CC9D28DC(a1, (uint64_t)v2, 0, (uint64_t)v234);
        }
        if (LODWORD(v347[1]) >= 0x41 && v347[0]) {
          MEMORY[0x1D25D9CB0](v347[0], 0x1000C8000313F17);
        }
        if (!v234) {
          return 0;
        }
        return v2;
      }
      unsigned int v335 = *(_DWORD *)(v207 + 32);
      unsigned int v211 = *(_DWORD *)(*(void *)v4 + 32);
      LODWORD(v347[1]) = v211;
      if (v211 >= 0x41) {
        operator new[]();
      }
      v347[0] = 0;
      if (v210)
      {
        while (1)
        {
          uint64_t v212 = *(void *)(v210 + 24);
          unsigned int v213 = *(unsigned __int8 *)(v212 + 16);
          if (v212) {
            BOOL v214 = v213 >= 0x1C;
          }
          else {
            BOOL v214 = 0;
          }
          if (!v214)
          {
            if (v211) {
              uint64_t v233 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v211);
            }
            else {
              uint64_t v233 = 0;
            }
            v347[0] = v233;
            LODWORD(v347[1]) = v211;
            break;
          }
          unint64_t v215 = *(unsigned int *)(*(void *)v4 + 32);
          if (v215 > 0x40) {
            operator new[]();
          }
          if (v215) {
            unint64_t v216 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v215;
          }
          else {
            unint64_t v216 = 0;
          }
          if (v213 == 91)
          {
            uint64_t v220 = *(unsigned int *)(*(void *)v212 + 32);
            unint64_t v216 = 0;
            if (v220)
            {
              uint64_t v221 = *(unsigned int **)(v212 + 64);
              do
              {
                unsigned int v223 = *v221++;
                unsigned int v222 = v223;
                if (v223 < 2 * (int)v215)
                {
                  if (v222 < v215 && *(void *)(v212 - 64) == v4)
                  {
                    v216 |= 1 << v222;
                  }
                  else if (v222 >= v215 && *(void *)(v212 - 32) == v4)
                  {
                    v216 |= 1 << (v222 - v215);
                  }
                }
                --v220;
              }
              while (v220);
            }
          }
          else
          {
            if (v213 != 89) {
              goto LABEL_312;
            }
            uint64_t v217 = *(void *)(v212 - 32);
            if (!v217 || *(unsigned char *)(v217 + 16) != 16) {
              goto LABEL_312;
            }
            uint64_t v218 = *(unsigned int *)(v217 + 32);
            if (v218 < 0x41)
            {
              unint64_t v219 = *(void *)(v217 + 24);
              goto LABEL_310;
            }
            int v226 = 0;
            int64_t v227 = (unint64_t)(v218 + 63) >> 6;
            do
            {
              BOOL v36 = v227-- < 1;
              if (v36) {
                break;
              }
              unint64_t v228 = *(void *)(*(void *)(v217 + 24) + 8 * v227);
              v226 += __clz(v228);
            }
            while (!v228);
            int v229 = v218 | 0xFFFFFFC0;
            if ((v218 & 0x3F) == 0) {
              int v229 = 0;
            }
            if ((v218 - v226 - v229) < 0x41)
            {
              unint64_t v219 = **(void **)(v217 + 24);
LABEL_310:
              if (v219 < v215) {
                unint64_t v216 = 1 << v219;
              }
            }
          }
LABEL_312:
          v347[0] = (void *)((unint64_t)v347[0] | v216);
          if (!v211) {
            goto LABEL_354;
          }
          int64_t v230 = v347[0];
          if (v347[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v211))
          {
            unint64_t v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v211;
            goto LABEL_337;
          }
          uint64_t v210 = *(void *)(v210 + 8);
          if (!v210) {
            goto LABEL_326;
          }
        }
      }
      if (v211)
      {
LABEL_326:
        int64_t v230 = v347[0];
        unint64_t v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v211;
LABEL_337:
        if (v230 != (void *)v235)
        {
          LODWORD(v352) = v335;
          if (v335 > 0x40) {
            operator new[]();
          }
          int v351 = 0;
          unsigned int v343 = v211;
          uint64_t v342 = v347[0];
          unsigned int v236 = sub_1CCABD934(a1, v4, (llvm::APInt *)&v342, (void **)&v351, 0, 1);
          if (v343 >= 0x41 && v342) {
            MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
          }
          if (v236) {
            BOOL v237 = v236 == (llvm::UndefValue *)v4;
          }
          else {
            BOOL v237 = 1;
          }
          int v238 = v237;
          if (!v237) {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v236, (llvm::Value *)1);
          }
          if (v352 >= 0x41 && v351) {
            MEMORY[0x1D25D9CB0](v351, 0x1000C8000313F17);
          }
          if (!v238)
          {
            char v239 = 0;
LABEL_355:
            if (v239) {
              return 0;
            }
            return v2;
          }
        }
      }
LABEL_354:
      char v239 = 1;
      goto LABEL_355;
    }
    int v200 = 0;
    uint64_t v201 = 32 * v178;
    do
    {
      uint64_t v202 = *v179;
      v179 += 4;
      if ((*(_DWORD *)(*(void *)v202 + 8) & 0xFE) == 0x12) {
        ++v200;
      }
      v201 -= 32;
    }
    while (v201);
    if (v200 != 1) {
      goto LABEL_263;
    }
    int v203 = *(unsigned __int8 **)(v4 - 32 * v178);
    if ((*(_DWORD *)(*(void *)v203 + 8) & 0xFE) == 0x12)
    {
      uint64_t v204 = *(void *)(a1 + 24);
      LOWORD(v349) = 257;
      int v203 = (unsigned __int8 *)sub_1CB8445F4(v204, v203, v17, (uint64_t)v347);
      LODWORD(v178) = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
    }
    v347[0] = &v348;
    v347[1] = (void *)0x600000000;
    if (v178 == 1)
    {
      unsigned int v205 = 0;
      BOOL v206 = (uint64_t *)&v348;
    }
    else
    {
      unsigned int v205 = 0;
      unsigned int v244 = 1;
      do
      {
        uint8x8_t v245 = *(unsigned __int8 **)(v4 - 32 * v178 + 32 * v244);
        if ((*(_DWORD *)(*(void *)v245 + 8) & 0xFE) == 0x12)
        {
          uint64_t v246 = *(void *)(a1 + 24);
          __int16 v354 = 257;
          uint64_t v247 = sub_1CB8445F4(v246, v245, v17, (uint64_t)&v351);
          if (LODWORD(v347[1]) >= (unint64_t)HIDWORD(v347[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v347[0] + LODWORD(v347[1])) = v247;
        }
        else
        {
          if (v205 >= HIDWORD(v347[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v347[0] + v205) = v245;
        }
        unsigned int v205 = ++LODWORD(v347[1]);
        ++v244;
        LODWORD(v178) = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
      }
      while (v244 != v178);
      BOOL v206 = (uint64_t *)v347[0];
    }
    uint64_t v248 = *(void *)(v4 + 64);
    uint64_t v249 = v205;
    uint64_t v250 = v205 + 1;
    BOOL v251 = v205 == -1;
    __int16 v354 = 257;
    uint64_t v252 = operator new(32 * v250 + 80);
    uint64_t v15 = (uint64_t)&v252[4 * v250];
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0x38000000 | v250 & 0x7FFFFFF;
    if (!v251)
    {
      do
      {
        *uint64_t v252 = 0;
        v252[1] = 0;
        v252[2] = 0;
        v252[3] = v15;
        v252 += 4;
      }
      while (v252 != (void *)v15);
    }
    sub_1CB845A7C(v248, (uint64_t *)v203, (uint64_t)v206, v249);
    *(void *)uint64_t v15 = v253;
    *(void *)(v15 + 8) = 0;
    int v254 = *(_DWORD *)(v15 + 20) & 0xC0000000 | v250 & 0x7FFFFFF;
    *(_DWORD *)(v15 + 16) = 62;
    *(_DWORD *)(v15 + 20) = v254;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_DWORD *)(v15 + 56) = 0;
    *(void *)(v15 + 64) = v248;
    *(void *)(v15 + 72) = llvm::GetElementPtrInst::getIndexedType(v248, (uint64_t)v206, v249);
    llvm::GetElementPtrInst::init((uint64_t ***)v15, (uint64_t **)v203, v206, v249, (const char **)&v351);
    *(unsigned char *)(v15 + 17) = *(unsigned char *)(v15 + 17) & 0xFD | *(unsigned char *)(v4 + 17) & 2;
    if (v347[0] != &v348) {
      free(v347[0]);
    }
  }
  else
  {
    if (v145 != 91)
    {
      if (v145 == 90)
      {
        uint64_t v166 = *(void *)(v4 - 32);
        if (v166 == v5)
        {
          int v11 = *(llvm::Value **)(v4 - 64);
          goto LABEL_3;
        }
        if (v17 && *(unsigned __int8 *)(v166 + 16) <= 0x14u)
        {
          uint64_t v32 = *(void *)(v4 - 96);
          uint64_t v29 = a1;
          uint64_t v30 = (uint64_t)v2;
          unsigned int v31 = 0;
          return (llvm::UndefValue **)sub_1CC9D28DC(v29, v30, v31, v32);
        }
      }
      else if (v145 - 79 >= 0xFFFFFFF3)
      {
        uint64_t v180 = *(void *)(v4 + 8);
        if (v180)
        {
          if (v145 != 77 && !*(void *)(v180 + 8))
          {
            uint64_t v181 = *(void *)(a1 + 24);
            unint64_t v182 = *(unsigned __int8 **)(v4 - 32);
            LOWORD(v349) = 257;
            uint64_t v183 = sub_1CB8445F4(v181, v182, (unsigned __int8 *)v5, (uint64_t)v347);
            int v184 = *(unsigned __int8 *)(v4 + 16) - 28;
            unsigned int v185 = *v2;
            LOWORD(v349) = 257;
            return (llvm::UndefValue **)llvm::CastInst::Create(v184, (uint64_t)v183, (uint64_t)v185, (const char **)v347, 0);
          }
        }
      }
LABEL_263:
      if (v17) {
        goto LABEL_264;
      }
      return 0;
    }
    if (*(unsigned char *)(*(void *)v4 + 8) != 18 || *(unsigned char *)(v5 + 16) != 16) {
      goto LABEL_263;
    }
    int v167 = (unsigned int *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u) {
      int v167 = *(unsigned int **)v167;
    }
    int v168 = *(_DWORD *)(*(void *)(v4 + 64) + 4 * *v167);
    if (v168 < 0)
    {
      ElementInst = llvm::UndefValue::get(*v2, (llvm::Type *)v9);
LABEL_2:
      int v11 = ElementInst;
LABEL_3:
      uint64_t v12 = a1;
      unsigned int v13 = (llvm::ValueAsMetadata *)v2;
      return sub_1CC9D3C84(v12, v13, v11);
    }
    unsigned int v169 = *(llvm::Value **)(v4 - 64);
    int v170 = *(_DWORD *)(*(void *)v169 + 32);
    BOOL v171 = __OFSUB__(v168, v170);
    int v172 = v168 - v170;
    if (v172 < 0 == v171)
    {
      unsigned int v169 = *(llvm::Value **)(v4 - 32);
      int v168 = v172;
    }
    uint64_t v173 = (llvm::Value *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)*v2 + 1960), v168, 0);
    LOWORD(v349) = 257;
    int v174 = operator new(0x80uLL);
    v174[21] = v174[21] & 0x38000000 | 2;
    uint64_t v15 = (uint64_t)(v174 + 16);
    *(void *)int v174 = 0;
    *((void *)v174 + 1) = 0;
    *((void *)v174 + 2) = 0;
    *((void *)v174 + 3) = v174 + 16;
    *((void *)v174 + 4) = 0;
    *((void *)v174 + 5) = 0;
    *((void *)v174 + 6) = 0;
    *((void *)v174 + 7) = v174 + 16;
    llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v174 + 16), v169, v173, (const char **)v347, 0);
  }
  return (llvm::UndefValue **)v15;
}

llvm::UndefValue **sub_1CCAC352C(uint64_t a1, llvm::ValueAsMetadata *this)
{
  v148[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 8) == 16) {
    unsigned int v5 = *(_DWORD *)(v4 + 12);
  }
  else {
    unsigned int v5 = *(_DWORD *)(v4 + 32);
  }
  if (v5 > 2) {
    return 0;
  }
  unsigned int v145 = (unsigned __int8 *)v148;
  int v147 = 2;
  if (v5) {
    bzero(v148, 16 * v5);
  }
  unsigned int v146 = v5;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCE5E88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCE5E88))
  {
    dword_1EBCE5E80 = 2 * v5;
    __cxa_guard_release(&qword_1EBCE5E88);
  }
  int v7 = dword_1EBCE5E80;
  uint64_t v8 = v146;
  if (dword_1EBCE5E80 >= 1)
  {
    if (v146)
    {
      int v9 = 0;
      unsigned int v10 = this;
      while (1)
      {
        int v11 = v145 + 8;
        uint64_t v12 = 16 * v8;
        while (1)
        {
          int v13 = *v11;
          v11 += 16;
          if (!v13) {
            break;
          }
          v12 -= 16;
          if (!v12) {
            goto LABEL_27;
          }
        }
        uint64_t v14 = *((void *)v10 - 4);
        BOOL v15 = v14 && *(unsigned __int8 *)(v14 + 16) >= 0x1Cu;
        if (!v15 || *((_DWORD *)v10 + 18) != 1) {
          break;
        }
        int v16 = (char *)&v145[16 * **((unsigned int **)v10 + 8)];
        if (!v16[8])
        {
          *(void *)int v16 = v14;
          v16[8] = 1;
        }
        if (++v9 < v7)
        {
          unsigned int v10 = (llvm::ValueAsMetadata *)*((void *)v10 - 8);
          if (v10)
          {
            if (*((unsigned char *)v10 + 16) == 93) {
              continue;
            }
          }
        }
        goto LABEL_27;
      }
    }
LABEL_73:
    long long v6 = 0;
    goto LABEL_74;
  }
LABEL_27:
  if (!v8) {
    goto LABEL_73;
  }
  uint64_t v17 = v145;
  uint64_t v18 = v145 + 8;
  uint64_t v19 = 16 * v8;
  uint64_t v20 = v19;
  do
  {
    int v21 = *v18;
    v18 += 16;
    if (!v21) {
      goto LABEL_73;
    }
    v20 -= 16;
  }
  while (v20);
  char v22 = 0;
  int v23 = 0;
  int v24 = -1;
  uint64_t v25 = v19;
  uint64_t v26 = v145;
  do
  {
    uint64_t v27 = *(void *)v26;
    if (!*(void *)v26 || *(unsigned char *)(v27 + 16) != 92)
    {
      uint64_t v30 = 0;
      do
      {
        int v31 = v30 != *(void *)(*(void *)v17 + 40);
        if (!v30) {
          int v31 = 7;
        }
        if (v31 != 7 && v31 != 0) {
          goto LABEL_73;
        }
        if (!v30) {
          uint64_t v30 = *(void *)(*(void *)v17 + 40);
        }
        v17 += 16;
        v19 -= 16;
      }
      while (v19);
      if (!v30) {
        goto LABEL_73;
      }
      uint64_t v33 = *(void *)(v30 + 8);
      if (!v33) {
        goto LABEL_73;
      }
      uint64_t v34 = *(void *)(v30 + 8);
      while (1)
      {
        uint64_t v35 = *(void *)(v34 + 24);
        unsigned int v36 = *(unsigned __int8 *)(v35 + 16);
        BOOL v37 = v35 && v36 >= 0x1C;
        if (v37 && v36 - 29 <= 0xA) {
          break;
        }
        long long v6 = 0;
        uint64_t v34 = *(void *)(v34 + 8);
        if (!v34) {
          goto LABEL_74;
        }
      }
      uint64_t v142 = (uint64_t *)v144;
      uint64_t v143 = 0x400000000;
      while (1)
      {
        uint64_t v40 = *(void *)(v33 + 24);
        unsigned int v41 = *(unsigned __int8 *)(v40 + 16);
        BOOL v42 = v40 && v41 >= 0x1C;
        if (v42 && v41 - 29 <= 0xA) {
          break;
        }
        uint64_t v33 = *(void *)(v33 + 8);
        if (!v33)
        {
          LODWORD(v62) = 0;
          goto LABEL_87;
        }
      }
      uint64_t v61 = 0;
      LODWORD(v62) = 0;
LABEL_123:
      if (v62 >= HIDWORD(v143)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v142[v61] = *(void *)(v40 + 40);
      uint64_t v62 = (v62 + 1);
      LODWORD(v143) = v62;
      while (1)
      {
        uint64_t v33 = *(void *)(v33 + 8);
        if (!v33) {
          break;
        }
        uint64_t v40 = *(void *)(v33 + 24);
        unsigned int v63 = *(unsigned __int8 *)(v40 + 16);
        if (v40) {
          BOOL v64 = v63 >= 0x1C;
        }
        else {
          BOOL v64 = 0;
        }
        if (v64 && v63 - 29 <= 0xA)
        {
          long long v6 = 0;
          uint64_t v61 = v62;
          if (v62 < 0x40) {
            goto LABEL_123;
          }
          goto LABEL_193;
        }
      }
LABEL_87:
      v141[0] = 1;
      for (uint64_t i = 1; i != 9; i += 2)
        v141[i] = -4096;
      if (v62)
      {
        uint64_t v45 = v142;
        int v127 = (char *)&v142[v62];
        while (1)
        {
          __p = v45;
          uint64_t v46 = *v45;
          unint64_t v133 = (unsigned __int8 **)v46;
          uint64_t v134 = 0;
          unsigned int v137 = 0;
          if (!sub_1CC056A94((uint64_t)v141, v46, &v137)) {
            break;
          }
LABEL_114:
          uint64_t v45 = __p + 1;
          if (__p + 1 == (uint64_t *)v127) {
            goto LABEL_115;
          }
        }
        int64_t v47 = sub_1CCACAF04(v141, (uint64_t *)&v133, v137);
        uint64_t v132 = v46;
        void *v47 = v46;
        v47[1] = 0;
        unint64_t v128 = v47;
        if (v146)
        {
          char v48 = 0;
          int v49 = 0;
          uint64_t v50 = (uint64_t *)v145;
          uint64_t v51 = 16 * v146;
          int v52 = -1;
          while (1)
          {
            uint64_t v53 = *v50;
            int v54 = *(unsigned __int8 *)(*v50 + 16);
            if (*v50 && v54 == 83)
            {
              if (*(void *)(v53 + 40) != v30) {
                break;
              }
              uint64_t v53 = sub_1CBF73380(v53, v132);
              int v54 = *(unsigned __int8 *)(v53 + 16);
            }
            if (v54 != 92) {
              break;
            }
            int v55 = *(void **)(v53 - 32);
            if (*v55 != v4) {
              break;
            }
            if (*(_DWORD *)(v53 + 72) != 1) {
              break;
            }
            if (++v52 != **(_DWORD **)(v53 + 64)) {
              break;
            }
            if (v49) {
              int v56 = 1;
            }
            else {
              int v56 = 2;
            }
            if (!v48) {
              int v56 = 0;
            }
            if (v56 == 1)
            {
              if (v49 != v55) {
                break;
              }
            }
            else if (!v56)
            {
              int v49 = *(void **)(v53 - 32);
              char v48 = 1;
            }
            v50 += 2;
            v51 -= 16;
            if (!v51)
            {
              if (v49)
              {
                v128[1] = v49;
                goto LABEL_114;
              }
              break;
            }
          }
          long long v6 = 0;
        }
        else
        {
          long long v6 = 0;
        }
LABEL_191:
        if ((v141[0] & 1) == 0) {
          MEMORY[0x1D25D9CD0](v141[1], 8);
        }
LABEL_193:
        if (v142 != (uint64_t *)v144) {
          free(v142);
        }
        goto LABEL_74;
      }
LABEL_115:
      uint64_t v57 = *(void *)(a1 + 24);
      unsigned int v137 = (void *)v57;
      long long v138 = *(_OWORD *)(v57 + 48);
      uint64_t v58 = *(unsigned int *)(v57 + 8);
      if (v58)
      {
        uint64_t v115 = (unsigned __int8 **)(*(void *)v57 + 8);
        uint64_t v116 = 16 * v58;
        while (*((_DWORD *)v115 - 2))
        {
          v115 += 2;
          v116 -= 16;
          if (!v116) {
            goto LABEL_116;
          }
        }
        unint64_t v117 = *v115;
        int v139 = v117;
        if (v117)
        {
          llvm::MetadataTracking::track((uint64_t)&v139, v117, 2);
          uint64_t v57 = *(void *)(a1 + 24);
        }
      }
      else
      {
LABEL_116:
        int v139 = 0;
      }
      for (uint64_t j = *(void **)(v30 + 48); ; uint64_t j = (void *)j[1])
      {
        char v60 = j - 3;
        if (!j) {
          char v60 = 0;
        }
        if (*((unsigned char *)v60 + 16) != 83) {
          break;
        }
      }
      *(void *)(v57 + 48) = j[2];
      *(void *)(v57 + 56) = j;
      BOOL v66 = (unsigned __int8 *)j[3];
      int v140 = v66;
      if (v66)
      {
        llvm::MetadataTracking::track((uint64_t)&v140, v66, 2);
        uint64_t v67 = (uint64_t)v140;
      }
      else
      {
        uint64_t v67 = 0;
      }
      sub_1CB8461A4(v57, 0, v67);
      if (!v140)
      {
LABEL_139:
        uint64_t v68 = *(void *)(a1 + 24);
        if ((*((unsigned char *)this + 23) & 0x10) == 0)
        {
          uint64_t v79 = 0;
          uint64_t v78 = &byte_1CFBCE98E;
LABEL_148:
          __int16 v136 = 773;
          unint64_t v133 = (unsigned __int8 **)v78;
          uint64_t v134 = v79;
          uint64_t v135 = ".merged";
          unint64_t v81 = sub_1CB93113C(v68, v4, v143, (uint64_t)&v133);
          if (v143)
          {
            BOOL v82 = v142;
            int v83 = (char *)&v142[v143];
            do
            {
              uint64_t v84 = *v82;
              unint64_t v133 = (unsigned __int8 **)*v82;
              uint64_t v85 = sub_1CD68D160(v141, (uint64_t *)&v133)[1];
              int v86 = *((_DWORD *)v81 + 5);
              uint64_t v87 = v86 & 0x7FFFFFF;
              if ((v86 & 0x7FFFFFF) == *((_DWORD *)v81 + 15))
              {
                LODWORD(v100) = v87 + (v87 >> 1);
                if (v100 <= 2) {
                  uint64_t v100 = 2;
                }
                else {
                  uint64_t v100 = v100;
                }
                uint64_t v129 = v100;
                *((_DWORD *)v81 + 15) = v100;
                if ((v86 & 0x40000000) != 0) {
                  uint64_t v101 = (uint64_t *)*((void *)v81 - 1);
                }
                else {
                  uint64_t v101 = (uint64_t *)((char *)v81 - 32 * v87);
                }
                __pa = v101;
                char v102 = operator new(40 * v100);
                *((void *)v81 - 1) = v102;
                unsigned int v103 = v102;
                do
                {
                  *unsigned int v103 = 0;
                  v103[1] = 0;
                  v103[2] = 0;
                  v103[3] = v81;
                  v103 += 4;
                }
                while (v103 != &v102[4 * v129]);
                int v104 = *((_DWORD *)v81 + 5);
                if ((v104 & 0x40000000) != 0) {
                  uint64_t v105 = (uint64_t)v102;
                }
                else {
                  uint64_t v105 = (uint64_t)v81 - 32 * (v104 & 0x7FFFFFF);
                }
                uint64_t v126 = v105;
                sub_1CC5E4108((uint64_t)&v140, __pa, &__pa[4 * v87], v105);
                if (v87)
                {
                  memmove((void *)(v126 + 32 * v129), &__pa[4 * v87], 8 * v87);
                  uint64_t v106 = 4 * v87;
                  do
                  {
                    uint64_t v107 = &__pa[v106];
                    if (__pa[v106 - 4])
                    {
                      *(void *)*(v107 - 2) = *(v107 - 3);
                      uint64_t v108 = *(v107 - 3);
                      if (v108) {
                        *(void *)(v108 + 16) = *(v107 - 2);
                      }
                    }
                    v106 -= 4;
                  }
                  while (v106 * 8);
                }
                operator delete(__pa);
                int v86 = *((_DWORD *)v81 + 5);
              }
              uint64_t v88 = (v86 + 1) & 0x7FFFFFF;
              *((_DWORD *)v81 + 5) = v86 & 0xF8000000 | (v86 + 1) & 0x7FFFFFF;
              if ((v86 & 0x40000000) != 0) {
                uint64_t v89 = (char *)*((void *)v81 - 1);
              }
              else {
                uint64_t v89 = (char *)v81 - 32 * v88;
              }
              uint64_t v90 = (v88 - 1);
              int v91 = &v89[32 * v90];
              if (*(void *)v91)
              {
                **((void **)v91 + 2) = *((void *)v91 + 1);
                uint64_t v99 = *((void *)v91 + 1);
                if (v99) {
                  *(void *)(v99 + 16) = *((void *)v91 + 2);
                }
              }
              *(void *)int v91 = v85;
              if (v85)
              {
                uint64_t v94 = *(void *)(v85 + 8);
                uint64_t v93 = (char **)(v85 + 8);
                uint64_t v92 = v94;
                uint64_t v95 = &v89[32 * v90];
                *((void *)v95 + 1) = v94;
                if (v94) {
                  *(void *)(v92 + 16) = v95 + 8;
                }
                *((void *)v95 + 2) = v93;
                const llvm::APFloat *v93 = v91;
              }
              int v96 = *((_DWORD *)v81 + 5);
              uint64_t v97 = v96 & 0x7FFFFFF;
              if ((v96 & 0x40000000) != 0) {
                unsigned int v98 = (char *)*((void *)v81 - 1);
              }
              else {
                unsigned int v98 = (char *)v81 - 32 * v97;
              }
              *(void *)&v98[32 * *((unsigned int *)v81 + 15) + 8 * (v97 - 1)] = v84;
              ++v82;
            }
            while (v82 != (uint64_t *)v83);
          }
          long long v6 = sub_1CC9D3C84(a1, this, v81);
          int v109 = v137;
          if ((void)v138)
          {
            sub_1CBF5385C((uint64_t)v137, v138, *((uint64_t *)&v138 + 1));
            int v109 = v137;
          }
          else
          {
            v137[6] = 0;
            v109[7] = 0;
          }
          int v140 = v139;
          if (v139)
          {
            llvm::MetadataTracking::track((uint64_t)&v140, v139, 2);
            uint64_t v110 = (uint64_t)v140;
          }
          else
          {
            uint64_t v110 = 0;
          }
          sub_1CB8461A4((uint64_t)v109, 0, v110);
          if (!v140)
          {
LABEL_190:
            if (!v139) {
              goto LABEL_191;
            }
            int v121 = *v139;
            if ((v121 - 4) > 0x1E)
            {
              if ((v121 - 3) >= 0xFFFFFFFE) {
                uint64_t v125 = v139;
              }
              else {
                uint64_t v125 = 0;
              }
              if ((v121 - 3) < 0xFFFFFFFE)
              {
                if (v121 == 3) {
                  *((void *)v139 + 1) = 0;
                }
                goto LABEL_191;
              }
              unint64_t v123 = (unint64_t)(v125 + 8);
            }
            else
            {
              if ((v139[1] & 0x7F) != 2 && !*((_DWORD *)v139 + 3)) {
                goto LABEL_191;
              }
              uint64_t v122 = *((void *)v139 + 2);
              if ((v122 & 4) == 0) {
                goto LABEL_191;
              }
              unint64_t v123 = v122 & 0xFFFFFFFFFFFFFFF8;
              if (!v123) {
                goto LABEL_191;
              }
            }
            unint64_t v133 = &v139;
            sub_1CC5FA668(v123 + 16, &v133);
            goto LABEL_191;
          }
          int v118 = *v140;
          if ((v118 - 4) > 0x1E)
          {
            if ((v118 - 3) >= 0xFFFFFFFE) {
              int v124 = v140;
            }
            else {
              int v124 = 0;
            }
            if ((v118 - 3) < 0xFFFFFFFE)
            {
              if (v118 == 3) {
                *((void *)v140 + 1) = 0;
              }
              goto LABEL_190;
            }
            unint64_t v120 = (unint64_t)(v124 + 8);
          }
          else
          {
            if ((v140[1] & 0x7F) != 2 && !*((_DWORD *)v140 + 3)) {
              goto LABEL_190;
            }
            uint64_t v119 = *((void *)v140 + 2);
            if ((v119 & 4) == 0) {
              goto LABEL_190;
            }
            unint64_t v120 = v119 & 0xFFFFFFFFFFFFFFF8;
            if (!v120) {
              goto LABEL_190;
            }
          }
          unint64_t v133 = &v140;
          sub_1CC5FA668(v120 + 16, &v133);
          goto LABEL_190;
        }
        uint64_t v69 = ***(void ***)this;
        uint64_t v70 = *(void *)(v69 + 152);
        uint64_t v71 = *(unsigned int *)(v69 + 168);
        if (v71)
        {
          LODWORD(v72) = (v71 - 1) & ((this >> 4) ^ (this >> 9));
          uint64_t v73 = v70 + 16 * v72;
          unsigned int v74 = *(llvm::ValueAsMetadata **)v73;
          if (*(llvm::ValueAsMetadata **)v73 == this)
          {
LABEL_147:
            uint64_t v77 = *(void **)(v73 + 8);
            uint64_t v80 = *v77;
            uint64_t v78 = (char *)(v77 + 2);
            uint64_t v79 = v80;
            goto LABEL_148;
          }
          int v75 = 1;
          while (v74 != (llvm::ValueAsMetadata *)-4096)
          {
            int v76 = v72 + v75++;
            uint64_t v72 = v76 & (v71 - 1);
            unsigned int v74 = *(llvm::ValueAsMetadata **)(v70 + 16 * v72);
            if (v74 == this)
            {
              uint64_t v73 = v70 + 16 * v72;
              goto LABEL_147;
            }
          }
        }
        uint64_t v73 = v70 + 16 * v71;
        goto LABEL_147;
      }
      int v111 = *v140;
      if ((v111 - 4) > 0x1E)
      {
        if ((v111 - 3) >= 0xFFFFFFFE) {
          int v114 = v140;
        }
        else {
          int v114 = 0;
        }
        if ((v111 - 3) < 0xFFFFFFFE)
        {
          if (v111 == 3) {
            *((void *)v140 + 1) = 0;
          }
          goto LABEL_139;
        }
        unint64_t v113 = (unint64_t)(v114 + 8);
      }
      else
      {
        if ((v140[1] & 0x7F) != 2 && !*((_DWORD *)v140 + 3)) {
          goto LABEL_139;
        }
        uint64_t v112 = *((void *)v140 + 2);
        if ((v112 & 4) == 0) {
          goto LABEL_139;
        }
        unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
        if (!v113) {
          goto LABEL_139;
        }
      }
      unint64_t v133 = &v140;
      sub_1CC5FA668(v113 + 16, &v133);
      goto LABEL_139;
    }
    uint64_t v28 = *(llvm::Value **)(v27 - 32);
    if (*(void *)v28 != v4) {
      goto LABEL_73;
    }
    if (*(_DWORD *)(v27 + 72) != 1) {
      goto LABEL_73;
    }
    if (++v24 != **(_DWORD **)(v27 + 64)) {
      goto LABEL_73;
    }
    if (v23) {
      int v29 = 1;
    }
    else {
      int v29 = 2;
    }
    if (!v22) {
      int v29 = 0;
    }
    if (v29 == 1)
    {
      if (v23 != v28) {
        goto LABEL_73;
      }
    }
    else if (!v29)
    {
      int v23 = v28;
      char v22 = 1;
    }
    v26 += 16;
    v25 -= 16;
  }
  while (v25);
  if (!v23) {
    goto LABEL_73;
  }
  long long v6 = sub_1CC9D3C84(a1, this, v23);
LABEL_74:
  if (v145 != (unsigned __int8 *)v148) {
    free(v145);
  }
  return v6;
}

llvm::UndefValue **sub_1CCAC401C(uint64_t a1, llvm::ValueAsMetadata *this)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unsigned int v5 = 0;
    long long v6 = (const void *)*((void *)this + 8);
    uint64_t v7 = *((unsigned int *)this + 18);
    uint64_t v8 = this;
    do
    {
      if (*(void *)(v4 + 8) || v5 > 9) {
        break;
      }
      uint64_t v10 = *(void *)(v4 + 24);
      if (!v10 || *(unsigned char *)(v10 + 16) != 93) {
        break;
      }
      int v11 = *(_DWORD *)(v10 + 20);
      uint64_t v12 = (v11 & 0x40000000) != 0
          ? *(llvm::ValueAsMetadata ***)(v10 - 8)
          : (llvm::ValueAsMetadata **)(v10 - 32 * (v11 & 0x7FFFFFF));
      if (*v12 != v8) {
        break;
      }
      if (*(_DWORD *)(v10 + 72) == v7 && !memcmp(*(const void **)(v10 + 64), v6, 4 * v7))
      {
        uint64_t v14 = (llvm::Value *)*((void *)this - 8);
        return sub_1CC9D3C84(a1, this, v14);
      }
      ++v5;
      uint64_t v4 = *(void *)(v10 + 8);
      uint64_t v8 = (llvm::ValueAsMetadata *)v10;
    }
    while (v4);
  }

  return sub_1CCAC352C(a1, this);
}

llvm::UndefValue **sub_1CCAC4138(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v275 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a2 - 12);
  uint64_t v9 = *((void *)a2 - 8);
  uint64_t v10 = *((void *)a2 - 4);
  long long v11 = *(_OWORD *)(a1 + 120);
  long long v12 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)uint64_t v270 = *(_OWORD *)(a1 + 88);
  long long v271 = v12;
  v272[1] = *((void *)&v11 + 1);
  v272[0] = a2;
  inserted = llvm::SimplifyInsertElementInst((unsigned __int8 *)v8, (unsigned __int8 *)v9, v10, (uint64_t)v270, a5);
  if (inserted) {
    return sub_1CC9D3C84(a1, a2, inserted);
  }
  if (v10 && *(unsigned char *)(v10 + 16) == 16 && (*(_DWORD *)(*(void *)v10 + 8) & 0xFFFFFF00) != 0x4000)
  {
    uint64_t v24 = *(unsigned int *)(v10 + 32);
    if (v24 > 0x40)
    {
      int v231 = 0;
      int64_t v232 = (unint64_t)(v24 + 63) >> 6;
      do
      {
        BOOL v110 = v232-- < 1;
        if (v110) {
          break;
        }
        unint64_t v233 = *(void *)(*(void *)(v10 + 24) + 8 * v232);
        v231 += __clz(v233);
      }
      while (!v233);
      int v234 = v24 | 0xFFFFFFC0;
      if ((v24 & 0x3F) == 0) {
        int v234 = 0;
      }
      int v25 = v231 + v234;
    }
    else
    {
      int v25 = v24 + __clz(*(void *)(v10 + 24)) - 64;
    }
    if ((v24 - v25) <= 0x40)
    {
      uint64_t v26 = **(llvm::ConstantInt ***)v10;
      if (v24 > 0x3F)
      {
        if (v24 == 64)
        {
          LODWORD(v270[1]) = 64;
          uint64_t v27 = *(llvm::Type **)(v10 + 24);
          goto LABEL_174;
        }
        uint64_t v27 = **(llvm::Type ***)(v10 + 24);
      }
      else
      {
        uint64_t v27 = *(llvm::Type **)(v10 + 24);
      }
      LODWORD(v270[1]) = 64;
LABEL_174:
      v270[0] = v27;
      uint64_t v5 = (uint64_t)llvm::ConstantInt::get(v26, (llvm::LLVMContext *)v270, v14);
      if (LODWORD(v270[1]) >= 0x41 && v270[0]) {
        MEMORY[0x1D25D9CB0](v270[0], 0x1000C8000313F17);
      }
      if (v5) {
        return (llvm::UndefValue **)sub_1CC9D28DC(a1, (uint64_t)a2, 2u, v5);
      }
    }
  }
  int v262 = 0;
  unsigned int v16 = (*(unsigned char *)(v8 + 16) - 11);
  if (v16 > 1)
  {
    if (v16 <= 0xFC) {
      goto LABEL_9;
    }
    v270[0] = (llvm::Type *)v272;
    v270[1] = (llvm::Type *)v272;
    *(void *)&long long v271 = 8;
    DWORD2(v271) = 0;
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__r.__words[2];
    v273.__r_.__value_.__l.__size_ = 0x800000000;
    unsigned int v264 = (llvm::SmallPtrSetImplBase *)v270;
    BOOL v265 = &v273;
    uint64_t v5 = 0;
    if (sub_1CC04C108(&v264, v8))
    {
      do
      {
        uint64_t v5 = LODWORD(v273.__r_.__value_.__r.__words[1]) == 0;
        if (!LODWORD(v273.__r_.__value_.__r.__words[1])) {
          break;
        }
        uint64_t v255 = *(void *)(v273.__r_.__value_.__r.__words[0] + 8 * LODWORD(v273.__r_.__value_.__r.__words[1]) - 8);
        --LODWORD(v273.__r_.__value_.__r.__words[1]);
      }
      while ((sub_1CC04C108(&v264, v255) & 1) != 0);
    }
    if ((std::string::size_type *)v273.__r_.__value_.__l.__data_ != &v273.__r_.__value_.__r.__words[2]) {
      free(v273.__r_.__value_.__l.__data_);
    }
    if (v270[1] == v270[0])
    {
      if (!v5) {
        goto LABEL_9;
      }
    }
    else
    {
      free(v270[1]);
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  v270[0] = (llvm::Type *)&v262;
  uint64_t v136 = *(void *)(v9 + 8);
  if (v136)
  {
    if (!*(void *)(v136 + 8))
    {
      if (sub_1CCA4756C((void **)v270, v9))
      {
        unsigned int v137 = *((unsigned __int8 *)*v262 + 8);
        if (v137 == 13 || v137 < 7)
        {
          long long v138 = *v262;
          int v139 = (llvm::Type *)*(unsigned int *)(*(void *)a2 + 32);
          if (*(unsigned char *)(*(void *)a2 + 8) == 19) {
            llvm::ScalableVectorType::get(v138, v139);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v138, v139);
          }
          uint64_t v19 = (unsigned __int8 *)llvm::UndefValue::get(v140, v141);
          uint64_t v116 = *(void *)(a1 + 24);
          uint64_t v20 = (unsigned __int8 *)v262;
          goto LABEL_208;
        }
      }
    }
  }
LABEL_9:
  int v261 = 0;
  v270[0] = (llvm::Type *)&v261;
  if (sub_1CCA4756C((void **)v270, v8))
  {
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
    if (sub_1CCA4756C(&v273, v9))
    {
      if ((uint64_t v17 = *(void *)(v8 + 8)) != 0 && !*(void *)(v17 + 8)
        || (uint64_t v18 = *(void *)(v9 + 8)) != 0 && !*(void *)(v18 + 8))
      {
        uint64_t v19 = v261;
        if ((*(_DWORD *)(*(void *)v261 + 8) & 0xFE) == 0x12)
        {
          uint64_t v20 = (unsigned __int8 *)v262;
          if (((*v262)[1] & 0xFE) != 0x12 && *(uint64_t ***)(*(void *)v261 + 24) == *v262)
          {
            uint64_t v116 = *(void *)(a1 + 24);
LABEL_208:
            LOWORD(v272[0]) = 257;
            unint64_t v117 = sub_1CB84478C(v116, v19, v20, (unsigned __int8 *)v10, (uint64_t)v270);
            int v118 = operator new(0x60uLL);
            uint64_t v5 = (uint64_t)(v118 + 8);
            v118[13] = v118[13] & 0x38000000 | 1;
            *(void *)int v118 = 0;
            *((void *)v118 + 1) = 0;
            *((void *)v118 + 2) = 0;
            *((void *)v118 + 3) = v118 + 8;
            uint64_t v119 = *(llvm::Type **)a2;
            LOWORD(v272[0]) = 257;
            llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v118 + 8), v117, v119, (const char **)v270, 0);
            return (llvm::UndefValue **)v5;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 18 && v10 && *(unsigned char *)(v10 + 16) == 16)
  {
    uint64_t v21 = *(unsigned int *)(v10 + 32);
    if (v21 < 0x41) {
      goto LABEL_22;
    }
    int v223 = 0;
    int64_t v224 = (unint64_t)(v21 + 63) >> 6;
    do
    {
      BOOL v110 = v224-- < 1;
      if (v110) {
        break;
      }
      unint64_t v225 = *(void *)(*(void *)(v10 + 24) + 8 * v224);
      v223 += __clz(v225);
    }
    while (!v225);
    int v226 = v21 | 0xFFFFFFC0;
    if ((v21 & 0x3F) == 0) {
      int v226 = 0;
    }
    if ((v21 - v223 - v226) <= 0x40)
    {
LABEL_22:
      if (*(unsigned char *)(v9 + 16) == 89)
      {
        int v22 = *(_DWORD *)(v9 + 20);
        uint64_t v23 = (v22 & 0x40000000) != 0 ? *(void *)(v9 - 8) : v9 - 32 * (v22 & 0x7FFFFFF);
        uint64_t v28 = *(uint64_t **)v23;
        if (*(void *)v23)
        {
          uint64_t v29 = *(void *)(v23 + 32);
          if (v29 && *(unsigned char *)(v29 + 16) == 16)
          {
            int v31 = (void *)(v29 + 24);
            uint64_t v32 = *(unsigned int *)(v29 + 32);
            if (v32 >= 0x41)
            {
              int v227 = 0;
              int64_t v228 = (unint64_t)(v32 + 63) >> 6;
              do
              {
                BOOL v110 = v228-- < 1;
                if (v110) {
                  break;
                }
                unint64_t v229 = *(void *)(*v31 + 8 * v228);
                v227 += __clz(v229);
              }
              while (!v229);
              int v230 = v32 | 0xFFFFFFC0;
              if ((v32 & 0x3F) == 0) {
                int v230 = 0;
              }
              if ((v32 - v227 - v230) > 0x40) {
                goto LABEL_56;
              }
              int v31 = (void *)*v31;
            }
            uint64_t v33 = *v28;
            if (*(unsigned char *)(v33 + 8) == 18 && *v31 < (unint64_t)*(unsigned int *)(v33 + 32))
            {
              uint64_t v34 = *((void *)a2 + 1);
              if (!v34 || *(void *)(v34 + 8) || (uint64_t v120 = *(void *)(v34 + 24)) == 0 || *(unsigned char *)(v120 + 16) != 90)
              {
                v270[0] = (llvm::Type *)&v271;
                v270[1] = (llvm::Type *)0x1000000000;
                uint64_t v35 = (llvm::UndefValue **)sub_1CCAC5E6C((unsigned __int8 *)a2, v270, 0, a1);
                BOOL v37 = v35 == (llvm::UndefValue **)a2 || v36 == (uint64_t **)a2;
                int v38 = v37;
                if (!v37)
                {
                  int v39 = (uint64_t **)v35;
                  uint64_t v40 = v36;
                  if (!v36) {
                    uint64_t v40 = (uint64_t **)llvm::UndefValue::get(*v35, 0);
                  }
                  unsigned int v41 = (char *)operator new(0xA8uLL);
                  *((_DWORD *)v41 + 21) = *((_DWORD *)v41 + 21) & 0x38000000 | 2;
                  uint64_t v5 = (uint64_t)(v41 + 64);
                  *(void *)unsigned int v41 = 0;
                  *((void *)v41 + 1) = 0;
                  *((void *)v41 + 2) = 0;
                  *((void *)v41 + 3) = v41 + 64;
                  *((void *)v41 + 4) = 0;
                  *((void *)v41 + 5) = 0;
                  *((void *)v41 + 6) = 0;
                  *((void *)v41 + 7) = v41 + 64;
                  __int16 v274 = 257;
                  llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v41 + 8, v39, v40, v270[0], (llvm::Type *)LODWORD(v270[1]), (const char **)&v273.__r_.__value_.__l.__data_, 0);
                }
                if ((long long *)v270[0] != &v271) {
                  free(v270[0]);
                }
                if (!v38) {
                  return (llvm::UndefValue **)v5;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_56:
  if (*(void *)v8) {
    BOOL v42 = *(unsigned char *)(*(void *)v8 + 8) == 18;
  }
  else {
    BOOL v42 = 0;
  }
  if (v42)
  {
    unsigned int v43 = *(_DWORD *)(*(void *)v8 + 32);
    LODWORD(v270[1]) = v43;
    if (v43 > 0x40) {
      operator new[]();
    }
    v270[0] = 0;
    if (v43) {
      unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
    }
    else {
      unint64_t v44 = 0;
    }
    unsigned int v260 = v43;
    unint64_t v259 = v44;
    uint64_t v45 = sub_1CCABD934(a1, (uint64_t)a2, (llvm::APInt *)&v259, (void **)v270, 0, 0);
    if (v260 >= 0x41 && v259) {
      MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
    }
    if (v45)
    {
      uint64_t v5 = (uint64_t)a2;
      if (v45 != a2) {
        uint64_t v5 = (uint64_t)sub_1CC9D3C84(a1, a2, v45);
      }
    }
    if (LODWORD(v270[1]) >= 0x41 && v270[0]) {
      MEMORY[0x1D25D9CB0](v270[0], 0x1000C8000313F17);
    }
    if (v45) {
      return (llvm::UndefValue **)v5;
    }
  }
  uint64_t v46 = *((void *)a2 - 12);
  if (v46)
  {
    unsigned int v47 = *(unsigned __int8 *)(v46 + 16);
    if (v47 >= 0x1C)
    {
      uint64_t v48 = *(void *)(v46 + 8);
      if (v48)
      {
        if (!*(void *)(v48 + 8))
        {
          if (v47 == 91)
          {
            uint64_t v89 = *(unsigned __int8 **)(v46 - 32);
            if (!v89) {
              goto LABEL_78;
            }
            if (v89[16] > 0x14u) {
              goto LABEL_78;
            }
            uint64_t v90 = *((void *)a2 - 8);
            if (!v90) {
              goto LABEL_78;
            }
            if (*(unsigned __int8 *)(v90 + 16) > 0x14u) {
              goto LABEL_78;
            }
            uint64_t v91 = *((void *)a2 - 4);
            if (!v91 || *(unsigned char *)(v91 + 16) != 16) {
              goto LABEL_78;
            }
            uint64_t v92 = (llvm::Type *)(v91 + 24);
            uint64_t v93 = *(unsigned int *)(v91 + 32);
            if (v93 >= 0x41)
            {
              int v239 = 0;
              int64_t v240 = (unint64_t)(v93 + 63) >> 6;
              do
              {
                BOOL v110 = v240-- < 1;
                if (v110) {
                  break;
                }
                unint64_t v241 = *(void *)(*(void *)v92 + 8 * v240);
                v239 += __clz(v241);
              }
              while (!v241);
              int v242 = v93 | 0xFFFFFFC0;
              if ((v93 & 0x3F) == 0) {
                int v242 = 0;
              }
              if ((v93 - v239 - v242) > 0x40) {
                goto LABEL_78;
              }
              uint64_t v92 = *(llvm::Type **)v92;
            }
            uint64_t v94 = **(void **)(v46 - 64);
            if (*(unsigned char *)(v94 + 8) == 19) {
              goto LABEL_78;
            }
            uint64_t v95 = (llvm::Type *)*(unsigned int *)(v46 + 72);
            if (*(_DWORD *)(v94 + 32) != v95) {
              goto LABEL_78;
            }
            int v96 = *(llvm::Type **)v92;
            uint64_t v97 = *(void *)(v46 + 64);
            if (v95)
            {
              for (uint64_t i = 0; i != v95; uint64_t i = (llvm::Type *)((char *)i + 1))
              {
                uint64_t v99 = (llvm::Type *)*(unsigned int *)(v97 + 4 * i);
                if (v99 != -1 && i != v99 && v95 + i != v99) {
                  goto LABEL_78;
                }
              }
              unint64_t v102 = *(unsigned int *)(v46 + 72);
            }
            else
            {
              unint64_t v102 = 0;
            }
            v270[0] = (llvm::Type *)&v271;
            v270[1] = (llvm::Type *)0x1000000000;
            sub_1CBFC6B20((uint64_t)v270, v102, 0);
            v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__r.__words[2];
            HIDWORD(v273.__r_.__value_.__r.__words[1]) = 16;
            if (v95 >= 0x11)
            {
              LODWORD(v273.__r_.__value_.__r.__words[1]) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v95)
            {
              bzero(&v273.__r_.__value_.__r.__words[2], 4 * v102);
              char v157 = 0;
              LODWORD(v273.__r_.__value_.__r.__words[1]) = v95;
              while (1)
              {
                if (v96 == v157)
                {
                  *((void *)v270[0] + (void)v96) = v90;
                  int v158 = (std::string *)v273.__r_.__value_.__r.__words[0];
                  *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 4 * (void)v96) = v95 + v96;
                }
                else
                {
                  AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v89, v157);
                  *((void *)v270[0] + (void)v157) = AggregateElement;
                  int v158 = (std::string *)v273.__r_.__value_.__r.__words[0];
                  *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 4 * (void)v157) = *(_DWORD *)(v97
                                                                                                  + 4 * (void)v157);
                }
                if (!*((void *)v270[0] + (void)v157)) {
                  break;
                }
                char v157 = (llvm::Type *)((char *)v157 + 1);
                if (v95 == v157) {
                  goto LABEL_278;
                }
              }
              uint64_t v5 = 0;
            }
            else
            {
              LODWORD(v273.__r_.__value_.__r.__words[1]) = 0;
LABEL_278:
              __int16 v160 = operator new(0xA8uLL);
              v160[21] = v160[21] & 0x38000000 | 2;
              uint64_t v5 = (uint64_t)(v160 + 16);
              *(void *)__int16 v160 = 0;
              *((void *)v160 + 1) = 0;
              *((void *)v160 + 2) = 0;
              *((void *)v160 + 3) = v160 + 16;
              *((void *)v160 + 4) = 0;
              *((void *)v160 + 5) = 0;
              *((void *)v160 + 6) = 0;
              *((void *)v160 + 7) = v160 + 16;
              uint64_t v161 = *(uint64_t ***)(v46 - 64);
              int v162 = (llvm::FixedVectorType ***)v270[0];
              uint64_t v163 = LODWORD(v270[1]);
              uint64_t Impl = (uint64_t **)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v270[0], (llvm::Type *)LODWORD(v270[1]));
              if (!Impl)
              {
                llvm::FixedVectorType::get(**v162, (llvm::Type *)v163);
                uint64_t Impl = (uint64_t **)sub_1CC56A4DC(**v165 + 1288, (uint64_t)v165, v162, v163);
              }
              __int16 v267 = 257;
              llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v5, v161, Impl, v273.__r_.__value_.__l.__data_, (llvm::Type *)LODWORD(v273.__r_.__value_.__r.__words[1]), (const char **)&v264, 0);
              int v158 = (std::string *)v273.__r_.__value_.__r.__words[0];
            }
            if (v158 != (std::string *)&v273.__r_.__value_.__r.__words[2]) {
              free(v158);
            }
            unsigned int v156 = v270[0];
            if ((long long *)v270[0] == &v271) {
              goto LABEL_285;
            }
            goto LABEL_284;
          }
          uint64_t v103 = *(void *)(*(void *)(*(void *)(v46 + 40) + 56) + 40);
          if (*(char *)(v103 + 239) < 0) {
            sub_1CB8BDF7C((uint64_t)&v263, *(const void **)(v103 + 216), *(void *)(v103 + 224));
          }
          else {
            std::string v263 = *(std::string *)(v103 + 216);
          }
          if (!std::string::compare(&v263, 0, 4uLL, "agx1"))
          {
            int v104 = 27;
          }
          else if (!std::string::compare(&v263, 0, 4uLL, "agx2"))
          {
            int v104 = 28;
          }
          else if (!std::string::compare(&v263, 0, 4uLL, "agx3"))
          {
            int v104 = 29;
          }
          else
          {
            int v104 = 0;
          }
          if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v263.__r_.__value_.__l.__data_);
          }
          if (v104 == 27 || *(unsigned char *)(v46 + 16) != 90 || *(unsigned char *)(*(void *)a2 + 8) == 19) {
            goto LABEL_78;
          }
          uint64_t v5 = 0;
          uint64_t v105 = *((void *)a2 - 4);
          if (!v105 || *(unsigned char *)(v105 + 16) != 16) {
            goto LABEL_285;
          }
          unint64_t v106 = *(unsigned int *)(*(void *)a2 + 32);
          uint64_t v107 = (void *)(v105 + 24);
          uint64_t v108 = *(unsigned int *)(v105 + 32);
          if (v108 >= 0x41)
          {
            int v243 = 0;
            int64_t v244 = (unint64_t)(v108 + 63) >> 6;
            do
            {
              BOOL v110 = v244-- < 1;
              if (v110) {
                break;
              }
              unint64_t v245 = *(void *)(*v107 + 8 * v244);
              v243 += __clz(v245);
            }
            while (!v245);
            int v246 = v108 | 0xFFFFFFC0;
            if ((v108 & 0x3F) == 0) {
              int v246 = 0;
            }
            if ((v108 - v243 - v246) > 0x40) {
              goto LABEL_206;
            }
            uint64_t v107 = (void *)*v107;
          }
          v269[0] = *v107;
          uint64_t v109 = *((void *)a2 - 8);
          if (v109) {
            BOOL v110 = *(unsigned __int8 *)(v109 + 16) > 0x14u;
          }
          else {
            BOOL v110 = 1;
          }
          if (!v110)
          {
            uint64_t v5 = 0;
            v268[0] = *((void *)a2 - 8);
            uint64_t v111 = *(void *)(v46 - 32);
            if (!v111 || *(unsigned char *)(v111 + 16) != 16) {
              goto LABEL_285;
            }
            uint64_t v112 = (void *)(v111 + 24);
            uint64_t v113 = *(unsigned int *)(v111 + 32);
            if (v113 >= 0x41)
            {
              int v247 = 0;
              int64_t v248 = (unint64_t)(v113 + 63) >> 6;
              do
              {
                BOOL v110 = v248-- < 1;
                if (v110) {
                  break;
                }
                unint64_t v249 = *(void *)(*v112 + 8 * v248);
                v247 += __clz(v249);
              }
              while (!v249);
              int v250 = v113 | 0xFFFFFFC0;
              if ((v113 & 0x3F) == 0) {
                int v250 = 0;
              }
              if ((v113 - v247 - v250) > 0x40) {
                goto LABEL_206;
              }
              uint64_t v112 = (void *)*v112;
            }
            v269[1] = *v112;
            uint64_t v114 = *(void *)(v46 - 64);
            if (v114) {
              BOOL v115 = *(unsigned __int8 *)(v114 + 16) > 0x14u;
            }
            else {
              BOOL v115 = 1;
            }
            if (!v115)
            {
              v268[1] = *(void *)(v46 - 64);
              v270[0] = (llvm::Type *)&v271;
              v270[1] = (llvm::Type *)0x1000000000;
              sub_1CBFC6B20((uint64_t)v270, v106, 0);
              v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__r.__words[2];
              HIDWORD(v273.__r_.__value_.__r.__words[1]) = 16;
              if (v106 >= 0x11)
              {
                LODWORD(v273.__r_.__value_.__r.__words[1]) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v106) {
                bzero(&v273.__r_.__value_.__r.__words[2], 4 * v106);
              }
              char v143 = 0;
              uint64_t v144 = 0;
              LODWORD(v273.__r_.__value_.__r.__words[1]) = v106;
              unsigned int v145 = v268;
              do
              {
                char v146 = v143;
                uint64_t v147 = v269[v144];
                if (!*((void *)v270[0] + v147))
                {
                  *((void *)v270[0] + v147) = *v145;
                  *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 4 * v147) = v106 + v147;
                }
                ++v145;
                char v143 = 1;
                uint64_t v144 = 1;
              }
              while ((v146 & 1) == 0);
              if (v106)
              {
                for (uint64_t j = 0; j != v106; ++j)
                {
                  if (!*((void *)v270[0] + j))
                  {
                    char v149 = llvm::UndefValue::get(*(llvm::UndefValue **)(*(void *)a2 + 24), v142);
                    *((void *)v270[0] + j) = v149;
                    *(_DWORD *)(v273.__r_.__value_.__r.__words[0] + 4 * j) = j;
                  }
                }
              }
              unint64_t v150 = operator new(0xA8uLL);
              v150[21] = v150[21] & 0x38000000 | 2;
              uint64_t v5 = (uint64_t)(v150 + 16);
              *(void *)unint64_t v150 = 0;
              *((void *)v150 + 1) = 0;
              *((void *)v150 + 2) = 0;
              *((void *)v150 + 3) = v150 + 16;
              *((void *)v150 + 4) = 0;
              *((void *)v150 + 5) = 0;
              *((void *)v150 + 6) = 0;
              *((void *)v150 + 7) = v150 + 16;
              unsigned int v151 = *(uint64_t ***)(v46 - 96);
              uint64_t v152 = (llvm::FixedVectorType ***)v270[0];
              uint64_t v153 = LODWORD(v270[1]);
              uint64_t v154 = (uint64_t **)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v270[0], (llvm::Type *)LODWORD(v270[1]));
              if (!v154)
              {
                llvm::FixedVectorType::get(**v152, (llvm::Type *)v153);
                uint64_t v154 = (uint64_t **)sub_1CC56A4DC(**v155 + 1288, (uint64_t)v155, v152, v153);
              }
              __int16 v267 = 257;
              llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v5, v151, v154, v273.__r_.__value_.__l.__data_, (llvm::Type *)LODWORD(v273.__r_.__value_.__r.__words[1]), (const char **)&v264, 0);
              if ((std::string::size_type *)v273.__r_.__value_.__l.__data_ != &v273.__r_.__value_.__r.__words[2]) {
                free(v273.__r_.__value_.__l.__data_);
              }
              unsigned int v156 = v270[0];
              if ((long long *)v270[0] != &v271) {
LABEL_284:
              }
                free(v156);
LABEL_285:
              if (v5) {
                return (llvm::UndefValue **)v5;
              }
              goto LABEL_78;
            }
          }
LABEL_206:
          uint64_t v5 = 0;
          goto LABEL_285;
        }
      }
    }
  }
LABEL_78:
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v50 = *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  if (*(char *)(v50 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v273, *(const void **)(v50 + 216), *(void *)(v50 + 224));
  }
  else {
    std::string v273 = *(std::string *)(v50 + 216);
  }
  if (!std::string::compare(&v273, 0, 4uLL, "agx1"))
  {
    int v51 = 27;
  }
  else if (!std::string::compare(&v273, 0, 4uLL, "agx2"))
  {
    int v51 = 28;
  }
  else if (!std::string::compare(&v273, 0, 4uLL, "agx3"))
  {
    int v51 = 29;
  }
  else
  {
    int v51 = 0;
  }
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  if (v51 != 27)
  {
    uint64_t v78 = *((void *)a2 - 12);
    if (v78)
    {
      if (*(unsigned char *)(v78 + 16) == 90)
      {
        uint64_t v79 = *(void *)(v78 + 8);
        if (v79)
        {
          if (!*(void *)(v79 + 8))
          {
            uint64_t v80 = *(unsigned __int8 **)(v78 - 96);
            if (v80)
            {
              unint64_t v81 = *(unsigned __int8 **)(v78 - 64);
              if (v81)
              {
                if (v81[16] >= 0x15u)
                {
                  BOOL v82 = *(unsigned __int8 **)(v78 - 32);
                  if (v82)
                  {
                    if (v82[16] == 16)
                    {
                      int v83 = (unsigned __int8 *)*((void *)a2 - 8);
                      if (v83)
                      {
                        if (v83[16] <= 0x14u)
                        {
                          uint64_t v84 = (unsigned __int8 *)*((void *)a2 - 4);
                          if (v82 != v84 && v84 && v84[16] == 16)
                          {
                            LOWORD(v272[0]) = 257;
                            uint64_t v85 = sub_1CB84478C(v49, v80, v83, v84, (uint64_t)v270);
                            LOWORD(v272[0]) = 257;
                            int v86 = operator new(0xA0uLL);
                            uint64_t v87 = 0;
                            uint64_t v5 = (uint64_t)(v86 + 24);
                            v86[29] = v86[29] & 0x38000000 | 3;
                            do
                            {
                              uint64_t v88 = &v86[v87];
                              void *v88 = 0;
                              v88[1] = 0;
                              v88[2] = 0;
                              v88[3] = v5;
                              v87 += 8;
                            }
                            while (v87 != 24);
                            llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v86 + 24), v85, (llvm::Value *)v81, (llvm::Value *)v82, (const char **)v270, 0);
                            return (llvm::UndefValue **)v5;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v52 = *((void *)a2 + 1);
  if (v52 && !*(void *)(v52 + 8) && *(unsigned char *)(*(void *)(v52 + 24) + 16) == 90) {
    goto LABEL_309;
  }
  uint64_t v53 = *(unsigned int **)a2;
  if (*(unsigned char *)(*(void *)a2 + 8) == 19) {
    goto LABEL_309;
  }
  uint64_t v54 = v53[8];
  if (v54 == 1) {
    goto LABEL_309;
  }
  int v55 = (llvm::Value *)*((void *)a2 - 8);
  if (v54 > 0x39) {
    operator new();
  }
  unint64_t v56 = (v54 << 58) | 1;
  uint64_t v57 = (unsigned __int8 *)a2;
  do
  {
    while (1)
    {
      uint64_t v58 = *((void *)v57 - 4);
      if (v58) {
        BOOL v59 = *(unsigned char *)(v58 + 16) == 16;
      }
      else {
        BOOL v59 = 0;
      }
      if (!v59) {
        goto LABEL_306;
      }
      char v60 = v57;
      if (*((llvm::Value **)v57 - 8) != v55) {
        goto LABEL_306;
      }
      uint64_t v57 = (unsigned __int8 *)*((void *)v57 - 12);
      int v61 = v57[16];
      if (v61 == 90) {
        uint64_t v62 = *((void *)v60 - 12);
      }
      else {
        uint64_t v62 = 0;
      }
      if (v60 != (unsigned __int8 *)a2)
      {
        uint64_t v63 = *((void *)v60 + 1);
        if (!v63 || *(void *)(v63 + 8))
        {
          if (v62) {
            goto LABEL_306;
          }
          uint64_t v64 = *(unsigned int *)(v58 + 32);
          if (v64 > 0x40)
          {
            int v65 = 0;
            int64_t v66 = (unint64_t)(v64 + 63) >> 6;
            do
            {
              BOOL v110 = v66-- < 1;
              if (v110) {
                break;
              }
              unint64_t v67 = *(void *)(*(void *)(v58 + 24) + 8 * v66);
              v65 += __clz(v67);
            }
            while (!v67);
            int v68 = v64 | 0xFFFFFFC0;
            if ((v64 & 0x3F) == 0) {
              int v68 = 0;
            }
            if (v65 + v68 != v64) {
              goto LABEL_306;
            }
          }
          else if (*(void *)(v58 + 24))
          {
            goto LABEL_306;
          }
        }
      }
      uint64_t v69 = (void *)(v58 + 24);
      if (*(_DWORD *)(v58 + 32) >= 0x41u) {
        uint64_t v69 = (void *)*v69;
      }
      uint64_t v70 = (void *)*v69;
      if ((v56 & 1) == 0) {
        break;
      }
      unint64_t v56 = v56 & 0xFC00000000000000 | (2
                                        * (((1 << (char)v70) | (v56 >> 1) & ~(-1 << (v56 >> 58))) & ~(-1 << (v56 >> 58)))) | 1;
      if (!v62) {
        goto LABEL_125;
      }
    }
    *(void *)(*(void *)v56 + 8 * (v70 >> 6)) |= 1 << (char)v70;
  }
  while (v62);
LABEL_125:
  if (v60 == (unsigned __int8 *)a2) {
    goto LABEL_306;
  }
  unsigned int v71 = (v61 - 11);
  unint64_t v72 = v56 >> 58;
  if (v71 < 2) {
    goto LABEL_130;
  }
  if (v71 >= 0xFD)
  {
    v270[0] = (llvm::Type *)v272;
    v270[1] = (llvm::Type *)v272;
    *(void *)&long long v271 = 8;
    DWORD2(v271) = 0;
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__r.__words[2];
    v273.__r_.__value_.__l.__size_ = 0x800000000;
    unsigned int v264 = (llvm::SmallPtrSetImplBase *)v270;
    BOOL v265 = &v273;
    BOOL v166 = 0;
    if (sub_1CC04C108(&v264, (uint64_t)v57))
    {
      do
      {
        BOOL v166 = LODWORD(v273.__r_.__value_.__r.__words[1]) == 0;
        if (!LODWORD(v273.__r_.__value_.__r.__words[1])) {
          break;
        }
        uint64_t v258 = *(void *)(v273.__r_.__value_.__r.__words[0] + 8 * LODWORD(v273.__r_.__value_.__r.__words[1]) - 8);
        --LODWORD(v273.__r_.__value_.__r.__words[1]);
      }
      while ((sub_1CC04C108(&v264, v258) & 1) != 0);
    }
    if ((std::string::size_type *)v273.__r_.__value_.__l.__data_ != &v273.__r_.__value_.__r.__words[2]) {
      free(v273.__r_.__value_.__l.__data_);
    }
    if (v270[1] == v270[0])
    {
      if (v166) {
        goto LABEL_130;
      }
    }
    else
    {
      free(v270[1]);
      if (v166) {
        goto LABEL_130;
      }
    }
  }
  if (v56)
  {
    if ((~(-1 << v72) & ~(v56 >> 1)) == 0) {
      goto LABEL_130;
    }
    goto LABEL_306;
  }
  unint64_t v167 = *(unsigned int *)(v56 + 64);
  unint64_t v168 = v167 >> 6;
  if (v167 >= 0x40)
  {
    unsigned int v169 = *(uint64_t **)v56;
    if (v168 <= 1) {
      uint64_t v170 = 1;
    }
    else {
      uint64_t v170 = v168;
    }
    do
    {
      uint64_t v171 = *v169++;
      if (v171 != -1) {
        goto LABEL_306;
      }
    }
    while (--v170);
  }
  int v172 = *(_DWORD *)(v56 + 64) & 0x3F;
  if (v172 && *(void *)(*(void *)v56 + 8 * v168) != ~(-1 << v172))
  {
LABEL_306:
    uint64_t v5 = 0;
    goto LABEL_307;
  }
LABEL_130:
  uint64_t v73 = (llvm::ConstantInt *)(***(void ***)a2 + 1960);
  unsigned int v74 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)v53, (llvm::Type *)v57);
  int v75 = (llvm::Value *)llvm::ConstantInt::get(v73, 0, 0);
  uint64_t v76 = *((void *)v60 - 4);
  uint64_t v77 = *(unsigned int *)(v76 + 32);
  if (v77 > 0x40)
  {
    int v121 = 0;
    int64_t v122 = (unint64_t)(v77 + 63) >> 6;
    do
    {
      BOOL v110 = v122-- < 1;
      if (v110) {
        break;
      }
      unint64_t v123 = *(void *)(*(void *)(v76 + 24) + 8 * v122);
      v121 += __clz(v123);
    }
    while (!v123);
    int v124 = v77 | 0xFFFFFFC0;
    if ((v77 & 0x3F) == 0) {
      int v124 = 0;
    }
    if (v121 + v124 == v77) {
      goto LABEL_221;
    }
    goto LABEL_218;
  }
  if (*(void *)(v76 + 24))
  {
LABEL_218:
    LOWORD(v272[0]) = 257;
    uint64_t v125 = operator new(0xA0uLL);
    uint64_t v126 = 0;
    char v60 = (unsigned __int8 *)(v125 + 24);
    v125[29] = v125[29] & 0x38000000 | 3;
    do
    {
      int v127 = &v125[v126];
      *int v127 = 0;
      v127[1] = 0;
      v127[2] = 0;
      v127[3] = v60;
      v126 += 8;
    }
    while (v126 != 24);
    llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v125 + 24), v74, v55, v75, (const char **)v270, a2);
  }
LABEL_221:
  v270[0] = (llvm::Type *)&v271;
  HIDWORD(v270[1]) = 16;
  if (v54 >= 0x11)
  {
    LODWORD(v270[1]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v54)
  {
    bzero(&v271, 4 * v54);
    uint64_t v128 = 0;
    LODWORD(v270[1]) = v54;
    do
    {
      char v129 = v128;
      unint64_t v130 = (v56 >> 1) & ~(-1 << v72);
      if ((v56 & 1) == 0)
      {
        char v129 = v128 & 0x3F;
        unint64_t v130 = *(void *)(*(void *)v56 + 8 * (v128 >> 6));
      }
      if (((v130 >> v129) & 1) == 0) {
        *((_DWORD *)&v272[-2] + v128) = -1;
      }
      ++v128;
    }
    while (v54 != v128);
  }
  else
  {
    LODWORD(v270[1]) = 0;
  }
  uint64_t v131 = operator new(0xA8uLL);
  v131[21] = v131[21] & 0x38000000 | 2;
  uint64_t v5 = (uint64_t)(v131 + 16);
  *(void *)uint64_t v131 = 0;
  *((void *)v131 + 1) = 0;
  *((void *)v131 + 2) = 0;
  *((void *)v131 + 3) = v131 + 16;
  *((void *)v131 + 4) = 0;
  *((void *)v131 + 5) = 0;
  *((void *)v131 + 6) = 0;
  *((void *)v131 + 7) = v131 + 16;
  uint64_t v132 = v270[0];
  unint64_t v133 = (llvm::Type *)LODWORD(v270[1]);
  __int16 v274 = 257;
  uint64_t v135 = (uint64_t **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v60, v134);
  llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v5, (uint64_t **)v60, v135, v132, v133, (const char **)&v273.__r_.__value_.__l.__data_, 0);
  if ((long long *)v270[0] != &v271) {
    free(v270[0]);
  }
LABEL_307:
  if ((v56 & 1) == 0)
  {
    if (*(void *)v56 != v56 + 16) {
      free(*(void **)v56);
    }
    MEMORY[0x1D25D9CE0](v56, 0x1080C40EF38A13ELL);
  }
  if (v5) {
    return (llvm::UndefValue **)v5;
  }
LABEL_309:
  uint64_t v173 = *((void *)a2 - 12);
  if (!v173) {
    goto LABEL_322;
  }
  if (*(unsigned char *)(v173 + 16) != 91) {
    goto LABEL_322;
  }
  int v174 = *(_DWORD **)(v173 - 64);
  uint64_t v175 = *(unsigned int *)(*(void *)v174 + 32);
  if (v175 != *(_DWORD *)(v173 + 72)) {
    goto LABEL_322;
  }
  if (!llvm::ShuffleVectorInst::isZeroEltSplatMask(*(int **)(v173 + 64), v175)) {
    goto LABEL_322;
  }
  if (*(unsigned char *)(*(void *)v173 + 8) == 19) {
    goto LABEL_322;
  }
  uint64_t v176 = *((void *)a2 - 4);
  if (!v176 || *(unsigned char *)(v176 + 16) != 16) {
    goto LABEL_322;
  }
  int v177 = (void *)(v176 + 24);
  uint64_t v178 = *(unsigned int *)(v176 + 32);
  if (v178 >= 0x41)
  {
    int v235 = 0;
    int64_t v236 = (unint64_t)(v178 + 63) >> 6;
    do
    {
      BOOL v110 = v236-- < 1;
      if (v110) {
        break;
      }
      unint64_t v237 = *(void *)(*v177 + 8 * v236);
      v235 += __clz(v237);
    }
    while (!v237);
    int v238 = v178 | 0xFFFFFFC0;
    if ((v178 & 0x3F) == 0) {
      int v238 = 0;
    }
    if ((v178 - v235 - v238) > 0x40) {
      goto LABEL_322;
    }
    int v177 = (void *)*v177;
  }
  unsigned int v179 = (void *)*v177;
  BOOL v265 = (std::string *)*((void *)a2 - 8);
  if (*((unsigned char *)v174 + 16) == 90)
  {
    int v180 = v174[5];
    if ((v180 & 0x40000000) != 0) {
      uint64_t v181 = (uint64_t *)*((void *)v174 - 1);
    }
    else {
      uint64_t v181 = (uint64_t *)&v174[-8 * (v180 & 0x7FFFFFF)];
    }
    uint64_t v182 = *v181;
    unsigned int v183 = (*(unsigned char *)(*v181 + 16) - 11);
    if (v183 >= 2)
    {
      if (v183 < 0xFD) {
        goto LABEL_322;
      }
      v270[0] = (llvm::Type *)v272;
      v270[1] = (llvm::Type *)v272;
      *(void *)&long long v271 = 8;
      DWORD2(v271) = 0;
      v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__r.__words[2];
      v273.__r_.__value_.__l.__size_ = 0x800000000;
      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v270;
      v263.__r_.__value_.__l.__size_ = (std::string::size_type)&v273;
      BOOL v207 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v263, v182))
      {
        do
        {
          BOOL v207 = LODWORD(v273.__r_.__value_.__r.__words[1]) == 0;
          if (!LODWORD(v273.__r_.__value_.__r.__words[1])) {
            break;
          }
          uint64_t v257 = *(void *)(v273.__r_.__value_.__r.__words[0] + 8 * LODWORD(v273.__r_.__value_.__r.__words[1]) - 8);
          --LODWORD(v273.__r_.__value_.__r.__words[1]);
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v263, v257) & 1) != 0);
      }
      if ((std::string::size_type *)v273.__r_.__value_.__l.__data_ != &v273.__r_.__value_.__r.__words[2]) {
        free(v273.__r_.__value_.__l.__data_);
      }
      if (v270[1] == v270[0])
      {
        if (!v207) {
          goto LABEL_322;
        }
      }
      else
      {
        free(v270[1]);
        if (!v207) {
          goto LABEL_322;
        }
      }
      int v180 = v174[5];
    }
    if ((v180 & 0x40000000) != 0) {
      unsigned int v208 = (_DWORD *)*((void *)v174 - 1);
    }
    else {
      unsigned int v208 = &v174[-8 * (v180 & 0x7FFFFFF)];
    }
    if (v265 == *((std::string **)v208 + 4)
      && sub_1CBF535C4((uint64_t)&v266, *((llvm::Constant **)v208 + 8)))
    {
      uint64_t v209 = *(unsigned int *)(*(void *)v173 + 32);
      v270[0] = (llvm::Type *)&v271;
      HIDWORD(v270[1]) = 16;
      if (v209 >= 0x11)
      {
        LODWORD(v270[1]) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v209)
      {
        bzero(&v271, 4 * v209);
        uint64_t v210 = 0;
        LODWORD(v270[1]) = v209;
        do
        {
          if (v179 == v210) {
            int v211 = 0;
          }
          else {
            int v211 = *(_DWORD *)(*(void *)(v173 + 64) + 4 * (void)v210);
          }
          *((_DWORD *)&v272[-2] + (void)v210) = v211;
          uint64_t v210 = (void *)((char *)v210 + 1);
        }
        while ((void *)v209 != v210);
      }
      else
      {
        LODWORD(v270[1]) = 0;
      }
      uint64_t v212 = operator new(0xA8uLL);
      v212[21] = v212[21] & 0x38000000 | 2;
      uint64_t v5 = (uint64_t)(v212 + 16);
      *(void *)uint64_t v212 = 0;
      *((void *)v212 + 1) = 0;
      *((void *)v212 + 2) = 0;
      *((void *)v212 + 3) = v212 + 16;
      *((void *)v212 + 4) = 0;
      *((void *)v212 + 5) = 0;
      *((void *)v212 + 6) = 0;
      *((void *)v212 + 7) = v212 + 16;
      unsigned int v213 = v270[0];
      BOOL v214 = (llvm::Type *)LODWORD(v270[1]);
      __int16 v274 = 257;
      unint64_t v216 = (uint64_t **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v174, v215);
      llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v5, (uint64_t **)v174, v216, v213, v214, (const char **)&v273.__r_.__value_.__l.__data_, 0);
      if ((long long *)v270[0] != &v271) {
        free(v270[0]);
      }
      return (llvm::UndefValue **)v5;
    }
  }
LABEL_322:
  uint64_t v184 = *((void *)a2 - 12);
  if (!v184 || *(unsigned char *)(v184 + 16) != 91) {
    goto LABEL_326;
  }
  uint64_t v185 = *(void *)(v184 - 32);
  unsigned int v186 = (*(unsigned char *)(v185 + 16) - 11);
  if (v186 >= 2)
  {
    if (v186 < 0xFD) {
      goto LABEL_326;
    }
    v270[0] = (llvm::Type *)v272;
    v270[1] = (llvm::Type *)v272;
    *(void *)&long long v271 = 8;
    DWORD2(v271) = 0;
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__r.__words[2];
    v273.__r_.__value_.__l.__size_ = 0x800000000;
    unsigned int v264 = (llvm::SmallPtrSetImplBase *)v270;
    BOOL v265 = &v273;
    BOOL v197 = 0;
    if (sub_1CC04C108(&v264, v185))
    {
      do
      {
        BOOL v197 = LODWORD(v273.__r_.__value_.__r.__words[1]) == 0;
        if (!LODWORD(v273.__r_.__value_.__r.__words[1])) {
          break;
        }
        uint64_t v256 = *(void *)(v273.__r_.__value_.__r.__words[0] + 8 * LODWORD(v273.__r_.__value_.__r.__words[1]) - 8);
        --LODWORD(v273.__r_.__value_.__r.__words[1]);
      }
      while ((sub_1CC04C108(&v264, v256) & 1) != 0);
    }
    if ((std::string::size_type *)v273.__r_.__value_.__l.__data_ != &v273.__r_.__value_.__r.__words[2]) {
      free(v273.__r_.__value_.__l.__data_);
    }
    if (v270[1] == v270[0])
    {
      if (!v197) {
        goto LABEL_326;
      }
    }
    else
    {
      free(v270[1]);
      if (!v197) {
        goto LABEL_326;
      }
    }
  }
  if ((llvm::ShuffleVectorInst::isIdentityWithExtract((llvm::ShuffleVectorInst *)v184) & 1) == 0
    && !llvm::ShuffleVectorInst::isIdentityWithPadding((llvm::ShuffleVectorInst *)v184))
  {
    goto LABEL_326;
  }
  if (*(unsigned char *)(*(void *)v184 + 8) == 19) {
    goto LABEL_326;
  }
  uint64_t v198 = *((void *)a2 - 4);
  if (!v198 || *(unsigned char *)(v198 + 16) != 16) {
    goto LABEL_326;
  }
  uint64_t v199 = (llvm::Type *)(v198 + 24);
  uint64_t v200 = *(unsigned int *)(v198 + 32);
  if (v200 >= 0x41)
  {
    int v251 = 0;
    int64_t v252 = (unint64_t)(v200 + 63) >> 6;
    do
    {
      BOOL v110 = v252-- < 1;
      if (v110) {
        break;
      }
      unint64_t v253 = *(void *)(*(void *)v199 + 8 * v252);
      v251 += __clz(v253);
    }
    while (!v253);
    int v254 = v200 | 0xFFFFFFC0;
    if ((v200 & 0x3F) == 0) {
      int v254 = 0;
    }
    if ((v200 - v251 - v254) > 0x40) {
      goto LABEL_326;
    }
    uint64_t v199 = *(llvm::Type **)v199;
  }
  uint64_t v201 = *(llvm::Type **)v199;
  uint64_t v202 = *((void *)a2 - 8);
  int v203 = *(llvm::Type **)(v184 - 64);
  LODWORD(v271) = 64;
  v270[0] = v203;
  v270[1] = v201;
  if (*(unsigned char *)(v202 + 16) != 89) {
    goto LABEL_326;
  }
  int v204 = *(_DWORD *)(v202 + 20);
  uint64_t v205 = (v204 & 0x40000000) != 0 ? *(void *)(v202 - 8) : v202 - 32 * (v204 & 0x7FFFFFF);
  if (v203 != *(llvm::Type **)v205) {
    goto LABEL_326;
  }
  BOOL v206 = sub_1CBF53154((llvm::APInt *)&v270[1], *(unsigned __int8 **)(v205 + 32));
  if (v271 >= 0x41 && v270[1])
  {
    MEMORY[0x1D25D9CB0](v270[1], 0x1000C8000313F17);
    if (!v206) {
      goto LABEL_326;
    }
  }
  else if (!v206)
  {
    goto LABEL_326;
  }
  uint64_t v217 = (llvm::Type *)*(unsigned int *)(*(void *)v184 + 32);
  v270[0] = (llvm::Type *)&v271;
  HIDWORD(v270[1]) = 16;
  if (v217 >= 0x11)
  {
    LODWORD(v270[1]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v217)
  {
    bzero(&v271, 4 * (void)v217);
    uint64_t v218 = (llvm::Type *)&v271;
    unint64_t v219 = 0;
    LODWORD(v270[1]) = v217;
    uint64_t v220 = *(void *)(v184 + 64);
    while (1)
    {
      if (v201 == v219)
      {
        if (*(_DWORD *)(v220 + 4 * (void)v201) == v201)
        {
          uint64_t v5 = 0;
          goto LABEL_399;
        }
        *((_DWORD *)&v272[-2] + (void)v201) = v201;
      }
      else
      {
        *((_DWORD *)&v272[-2] + (void)v219) = *(_DWORD *)(v220 + 4 * (void)v219);
      }
      unint64_t v219 = (llvm::Type *)((char *)v219 + 1);
      if (v217 == v219) {
        goto LABEL_397;
      }
    }
  }
  LODWORD(v270[1]) = 0;
LABEL_397:
  uint64_t v221 = (char *)operator new(0xA8uLL);
  *((_DWORD *)v221 + 21) = *((_DWORD *)v221 + 21) & 0x38000000 | 2;
  uint64_t v5 = (uint64_t)(v221 + 64);
  *(void *)uint64_t v221 = 0;
  *((void *)v221 + 1) = 0;
  *((void *)v221 + 2) = 0;
  *((void *)v221 + 3) = v221 + 64;
  *((void *)v221 + 4) = 0;
  *((void *)v221 + 5) = 0;
  *((void *)v221 + 6) = 0;
  *((void *)v221 + 7) = v221 + 64;
  unsigned int v222 = *(uint64_t ***)(v184 - 32);
  __int16 v274 = 257;
  llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v221 + 8, (uint64_t **)v203, v222, v270[0], (llvm::Type *)LODWORD(v270[1]), (const char **)&v273.__r_.__value_.__l.__data_, 0);
  uint64_t v218 = v270[0];
LABEL_399:
  if (v218 != (llvm::Type *)&v271) {
    free(v218);
  }
  if (!v5)
  {
LABEL_326:
    uint64_t v187 = *((void *)a2 - 12);
    uint64_t v188 = *(void *)(v187 + 8);
    if (!v188 || *(void *)(v188 + 8)) {
      return 0;
    }
    uint64_t v190 = *(void *)(a1 + 24);
    uint64_t v191 = *((void *)a2 - 8);
    v273.__r_.__value_.__r.__words[0] = 0;
    unsigned int v264 = 0;
    v270[0] = (llvm::Type *)&v273;
    if (sub_1CCA38AD0((void **)v270, v187)
      && (v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264, (sub_1CCA38AD0(&v263, v191) & 1) != 0))
    {
      int v192 = 46;
    }
    else
    {
      v270[0] = (llvm::Type *)&v273;
      if (sub_1CBC5BEAC((void **)v270, v187)
        && (v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264, (sub_1CBC5BEAC(&v263, v191) & 1) != 0))
      {
        int v192 = 40;
      }
      else
      {
        v270[0] = (llvm::Type *)&v273;
        if (!sub_1CBC5BE40((void **)v270, v187)) {
          return 0;
        }
        v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264;
        if ((sub_1CBC5BE40(&v263, v191) & 1) == 0) {
          return 0;
        }
        int v192 = 39;
      }
    }
    uint64_t v193 = *(void *)v273.__r_.__value_.__l.__data_;
    if ((*(_DWORD *)(*(void *)v273.__r_.__value_.__l.__data_ + 8) & 0xFE) == 0x12) {
      uint64_t v193 = **(void **)(v193 + 16);
    }
    if (v193 == *(void *)v264)
    {
      int v194 = (unsigned __int8 *)*((void *)a2 - 4);
      LOWORD(v272[0]) = 257;
      uint64_t v195 = sub_1CB84478C(v190, (unsigned __int8 *)v273.__r_.__value_.__l.__data_, (unsigned __int8 *)v264, v194, (uint64_t)v270);
      uint64_t v196 = *(void *)a2;
      LOWORD(v272[0]) = 257;
      return (llvm::UndefValue **)llvm::CastInst::Create(v192, (uint64_t)v195, v196, (const char **)v270, 0);
    }
    return 0;
  }
  return (llvm::UndefValue **)v5;
}

llvm::UndefValue *sub_1CCAC5E6C(unsigned __int8 *a1, _DWORD *a2, llvm::UndefValue **a3, uint64_t a4)
{
  long long v6 = a1;
  v81[8] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(*(void *)a1 + 32);
  int v8 = a1[16];
  unsigned int v9 = (v8 - 11);
  if (v9 < 2) {
    goto LABEL_86;
  }
  if (v9 >= 0xFD)
  {
    uint64_t v77 = v81;
    uint64_t v78 = (uint64_t)v81;
    uint64_t v79 = 8;
    int v80 = 0;
    v72[1] = (llvm::SmallPtrSetImplBase *)&v73;
    uint64_t v73 = v75;
    uint64_t v74 = 0x800000000;
    v72[0] = (llvm::SmallPtrSetImplBase *)&v77;
    BOOL v51 = 0;
    if (sub_1CC04C108(v72, (uint64_t)a1))
    {
      do
      {
        BOOL v51 = v74 == 0;
        if (!v74) {
          break;
        }
        uint64_t v69 = *((void *)v73 + v74 - 1);
        LODWORD(v74) = v74 - 1;
      }
      while ((sub_1CC04C108(v72, v69) & 1) != 0);
    }
    if (v73 != v75) {
      free(v73);
    }
    if ((void *)v78 == v77)
    {
      if (v51)
      {
LABEL_86:
        if (a2[3] < v7)
        {
          a2[2] = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v52 = *(char **)a2;
        unsigned int v55 = a2[2];
        uint64_t v54 = a2 + 2;
        unint64_t v53 = v55;
        if (v55 >= v7) {
          unint64_t v56 = v7;
        }
        else {
          unint64_t v56 = v53;
        }
        if (v56)
        {
          memset(v52, 255, 4 * v56);
          unint64_t v53 = *v54;
        }
        if (v7 > v53) {
          memset(&v52[4 * v53], 255, 4 * (v7 - v53));
        }
        _DWORD *v54 = v7;
        if (a3) {
          return llvm::UndefValue::get(*a3, (llvm::Type *)a2);
        }
        return (llvm::UndefValue *)v6;
      }
    }
    else
    {
      free((void *)v78);
      if (v51) {
        goto LABEL_86;
      }
    }
    int v8 = v6[16];
  }
  if (v8 != 90)
  {
    if (v8 == 13)
    {
      if (a2[3] < v7)
      {
        a2[2] = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v11 = *(char **)a2;
      unsigned int v14 = a2[2];
      int v13 = a2 + 2;
      unint64_t v12 = v14;
      if (v14 >= v7) {
        unint64_t v15 = v7;
      }
      else {
        unint64_t v15 = v12;
      }
      if (v15)
      {
        bzero(v11, 4 * v15);
        unint64_t v12 = *v13;
      }
      if (v7 > v12) {
        bzero(&v11[4 * v12], 4 * (v7 - v12));
      }
      *int v13 = v7;
      return (llvm::UndefValue *)v6;
    }
    goto LABEL_28;
  }
  uint64_t v16 = *((void *)v6 - 8);
  if (!v16) {
    goto LABEL_28;
  }
  if (*(unsigned char *)(v16 + 16) != 89) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v16 - 32);
  if (*(unsigned char *)(v17 + 16) != 16) {
    goto LABEL_28;
  }
  uint64_t v18 = *((void *)v6 - 4);
  if (*(unsigned char *)(v18 + 16) != 16) {
    goto LABEL_28;
  }
  uint64_t v19 = (void *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    uint64_t v19 = (void *)*v19;
  }
  uint64_t v20 = (void *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u) {
    uint64_t v20 = (void *)*v20;
  }
  uint64_t v21 = (llvm::UndefValue **)*((void *)v6 - 12);
  int v22 = *(_DWORD *)v19;
  unsigned int v23 = *(_DWORD *)v20;
  uint64_t v24 = *(llvm::UndefValue ***)(v16 - 64);
  if (a3 && v24 != a3)
  {
    int v25 = *v24;
    if (v21 == a3)
    {
      if (!v7) {
        return *(llvm::UndefValue **)(v16 - 64);
      }
      int v35 = *((_DWORD *)v25 + 8);
      unsigned int v36 = a2[2];
      do
      {
        if (v23) {
          int v37 = v35;
        }
        else {
          int v37 = v22;
        }
        if (v36 >= a2[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v36) = v37;
        unsigned int v36 = a2[2] + 1;
        a2[2] = v36;
        ++v35;
        --v23;
        LODWORD(v7) = v7 - 1;
      }
      while (v7);
      return *(llvm::UndefValue **)(v16 - 64);
    }
    if (v25 == *a3 && sub_1CCACA9E8(v6, *(unsigned char **)(v16 - 64), a3, (char **)a2)) {
      return *(llvm::UndefValue **)(v16 - 64);
    }
LABEL_28:
    if (v7)
    {
      int v26 = 0;
      unsigned int v27 = a2[2];
      do
      {
        if (v27 >= a2[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v27) = v26;
        unsigned int v27 = a2[2] + 1;
        a2[2] = v27;
        ++v26;
      }
      while (v7 != v26);
    }
    return (llvm::UndefValue *)v6;
  }
  uint64_t v28 = sub_1CCAC5E6C(v21, a2, *(void *)(v16 - 64), a4);
  if (*(llvm::UndefValue **)v28 == *v24)
  {
    *(_DWORD *)(*(void *)a2 + 4 * (v23 % v7)) = *(_DWORD *)(*(void *)v28 + 32) + v22;
    return (llvm::UndefValue *)v28;
  }
  else
  {
    uint64_t v29 = **(void **)(v16 - 64);
    unsigned int v30 = *(_DWORD *)(*(void *)v6 + 32);
    unsigned int v31 = *(_DWORD *)(v29 + 32);
    BOOL v32 = *(void *)(*(void *)v6 + 24) == *(void *)(v29 + 24) && v30 > v31;
    if (v32)
    {
      uint64_t v77 = &v79;
      uint64_t v78 = 0x1000000000;
      unsigned int v33 = 0;
      if (v31)
      {
        for (int i = 0; i != v31; ++i)
        {
          if (v33 >= HIDWORD(v78)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v77 + v33) = i;
          unsigned int v33 = v78 + 1;
          LODWORD(v78) = v78 + 1;
        }
      }
      unsigned int v38 = v30 - v31;
      do
      {
        if (v33 >= HIDWORD(v78)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v77 + v33) = -1;
        unsigned int v33 = v78 + 1;
        LODWORD(v78) = v78 + 1;
        --v38;
      }
      while (v38);
      uint64_t v39 = *(void *)(v16 - 64);
      if (*(unsigned __int8 *)(v39 + 16) <= 0x1Bu) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = *(void *)(v16 - 64);
      }
      if (!v40 || (uint64_t v41 = *(void *)(v16 - 64), *(unsigned char *)(v40 + 16) == 83)) {
        uint64_t v41 = v16;
      }
      if (*(void *)(v41 + 40) == *((void *)v6 + 5))
      {
        uint64_t v42 = *((void *)v6 + 1);
        if (!v42 || *(void *)(v42 + 8) || *(unsigned char *)(*(void *)(v42 + 24) + 16) != 90)
        {
          unsigned int v43 = operator new(0xA8uLL);
          v43[21] = v43[21] & 0x38000000 | 2;
          *(void *)unsigned int v43 = 0;
          *((void *)v43 + 1) = 0;
          *((void *)v43 + 2) = 0;
          *((void *)v43 + 3) = v43 + 16;
          *((void *)v43 + 4) = 0;
          *((void *)v43 + 5) = 0;
          *((void *)v43 + 6) = 0;
          *((void *)v43 + 7) = v43 + 16;
          uint64_t v70 = v77;
          unint64_t v44 = (llvm::Type *)v78;
          __int16 v76 = 257;
          uint64_t v46 = (uint64_t **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v39, v45);
          unsigned int v71 = (llvm::Value *)(v43 + 16);
          llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v43 + 8, (uint64_t **)v39, v46, v70, v44, (const char **)&v73, 0);
          if (v40 && *(unsigned char *)(v40 + 16) != 83)
          {
            sub_1CC5C6C08((void *)(*(void *)(v40 + 40) + 40), v40 + 24, v71);
          }
          else
          {
            uint64_t v47 = *(void *)(v16 + 40);
            uint64_t v48 = v47 + 40;
            for (uint64_t j = *(void *)(v47 + 48); j != v48; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v50 = j - 24;
              if (!j) {
                uint64_t v50 = 0;
              }
              if (*(unsigned char *)(v50 + 16) != 83)
              {
                unsigned int v57 = *(unsigned __int8 *)(j - 8) - 38;
                BOOL v32 = v57 > 0x38;
                uint64_t v58 = (1 << v57) & 0x100060000000001;
                if (v32 || v58 == 0) {
                  uint64_t v48 = j;
                }
                else {
                  uint64_t v48 = *(void *)(j + 8);
                }
                break;
              }
            }
            if (v48) {
              uint64_t v60 = v48 - 24;
            }
            else {
              uint64_t v60 = 0;
            }
            sub_1CC9D2AB4(a4, v71, v60);
          }
          for (uint64_t k = *(void *)(v39 + 8); k; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v62 = *(void *)(k + 24);
            if (v62 && *(unsigned char *)(v62 + 16) == 89 && *(void *)(v62 + 40) == *((void *)v43 + 13))
            {
              uint64_t v63 = *(llvm::Value **)(v62 - 32);
              __int16 v76 = 257;
              uint64_t v64 = operator new(0x80uLL);
              v64[21] = v64[21] & 0x38000000 | 2;
              int v65 = (llvm::Value *)(v64 + 16);
              *(void *)uint64_t v64 = 0;
              *((void *)v64 + 1) = 0;
              *((void *)v64 + 2) = 0;
              *((void *)v64 + 3) = v64 + 16;
              *((void *)v64 + 4) = 0;
              *((void *)v64 + 5) = 0;
              *((void *)v64 + 6) = 0;
              *((void *)v64 + 7) = v64 + 16;
              llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v64 + 16), v71, v63, (const char **)&v73, 0);
              sub_1CC5C6C08((void *)(*(void *)(v62 + 40) + 40), v62 + 24, v65);
              sub_1CC9D3C84(a4, (llvm::ValueAsMetadata *)v62, v65);
            }
          }
        }
      }
      if (v77 != &v79) {
        free(v77);
      }
    }
    if (v7)
    {
      uint64_t v66 = 0;
      uint64_t v67 = *(void *)a2;
      do
      {
        *(_DWORD *)(v67 + 4 * v66) = v66;
        ++v66;
      }
      while (v7 != v66);
    }
  }
  return (llvm::UndefValue *)v6;
}

uint64_t sub_1CCAC65FC(uint64_t result, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(llvm **)(a2 - 64);
  uint64_t v5 = *(unsigned __int8 **)(a2 - 32);
  long long v6 = *(llvm::Constant **)a2;
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 43)
  {
    BOOL result = sub_1CBF535C4((uint64_t)v14, *(llvm::Constant **)(a2 - 64));
    if (result)
    {
      BOOL result = (uint64_t)llvm::Constant::getAllOnesValue(v6, v10, v11);
      *(_DWORD *)uint64_t v3 = 17;
      *(void *)(v3 + 8) = v5;
      *(void *)(v3 + 16) = result;
      return result;
    }
  }
  else if (v7 == 57)
  {
    v14[1] = 0;
    unint64_t v15 = 0;
    v14[0] = &v15;
    BOOL result = sub_1CBF528D8((uint64_t)v14, v5);
    if (result)
    {
      BOOL result = llvm::MaskedValueIsZero(v4, v15, a3, 0, 0, 0, 0, (const llvm::DominatorTree *)1, v13);
      if (result)
      {
        *(_DWORD *)uint64_t v3 = 13;
        *(void *)(v3 + 8) = v4;
        *(void *)(v3 + 16) = v5;
        return result;
      }
    }
  }
  else if (v7 == 53 && v5[16] <= 0x14u && v5 != 0)
  {
    unsigned int v9 = (llvm::ConstantExpr *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1uLL, 0);
    BOOL result = (uint64_t)llvm::ConstantExpr::getShl(v9, (llvm::Constant *)v5, 0, 0);
    *(_DWORD *)uint64_t v3 = 17;
    *(void *)(v3 + 8) = v4;
    *(void *)(v3 + 16) = result;
    return result;
  }
  *(_DWORD *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  return result;
}

llvm::UndefValue **sub_1CCAC6724(uint64_t a1, llvm::UndefValue *a2)
{
  uint64_t v558 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 - 8);
  uint64_t v6 = *((void *)a2 - 4);
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 104);
  v540[0] = *(_OWORD *)(a1 + 88);
  v540[1] = v8;
  uint64_t v542 = *((void *)&v7 + 1);
  v541 = a2;
  unsigned int v9 = llvm::SimplifyShuffleVectorInst((llvm *)v5, (llvm::Type *)v6, *((char **)a2 + 8), (llvm::Type *)*((unsigned int *)a2 + 18), *(llvm::UndefValue **)a2, (uint64_t)v540);
  if (v9) {
    return sub_1CC9D3C84(a1, a2, v9);
  }
  if (*(unsigned char *)(*(void *)v5 + 8) == 19) {
    return 0;
  }
  uint64_t v10 = v5;
  uint64_t v530 = *(unsigned int *)(*(void *)a2 + 32);
  int v527 = *(_DWORD *)(*(void *)v5 + 32);
  unint64_t v538 = 0;
  int v539 = 0;
  p_s1 = (char *)&v539;
  if (!sub_1CCA4756C((void **)&p_s1, v5)) {
    goto LABEL_23;
  }
  uint64_t v549 = &v538;
  if (!sub_1CCA4756C((void **)&v549, v6)) {
    goto LABEL_23;
  }
  uint64_t v11 = (uint64_t)v539;
  unint64_t v12 = *v539;
  if ((*((_DWORD *)*v539 + 2) & 0xFE) != 0x12) {
    goto LABEL_23;
  }
  uint64_t v13 = (uint64_t)v538;
  if (v12 != *v538) {
    goto LABEL_23;
  }
  unsigned int PrimitiveSizeInBits = (uint64_t ***)llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v12 + 2));
  unsigned int v14 = *(llvm::UndefValue **)a2;
  unint64_t v15 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    unint64_t v15 = (llvm::Type *)**((void **)v14 + 2);
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v15))
  {
    uint64_t v16 = *(void *)(v5 + 8);
    if (v16 && !*(void *)(v16 + 8) || (uint64_t v17 = *(void *)(v6 + 8)) != 0 && !*(void *)(v17 + 8))
    {
      uint64_t v18 = *(void *)(a1 + 24);
      uint64_t v19 = (void **)*((void *)a2 + 8);
      uint64_t v20 = (llvm::Type *)*((unsigned int *)a2 + 18);
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        uint64_t v82 = 0;
        unint64_t v81 = &byte_1CFBCE98E;
        goto LABEL_107;
      }
      uint64_t v21 = **(void **)v14;
      uint64_t v22 = *(void *)(v21 + 152);
      uint64_t v23 = *(unsigned int *)(v21 + 168);
      if (v23)
      {
        LODWORD(v24) = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v25 = (llvm::UndefValue **)(v22 + 16 * v24);
        int v26 = *v25;
        if (*v25 == a2)
        {
LABEL_106:
          int v80 = v25[1];
          uint64_t v83 = *(void *)v80;
          unint64_t v81 = (char *)v80 + 16;
          uint64_t v82 = v83;
LABEL_107:
          v557[0] = 773;
          p_s1 = v81;
          uint64_t v554 = v82;
          uint64_t v555 = (uint64_t)".uncasted";
          uint64_t v84 = sub_1CB935A74(v18, v11, v13, v19, v20, (uint64_t)&p_s1);
          uint64_t v85 = (char *)operator new(0x60uLL);
          unsigned int PrimitiveSizeInBits = (uint64_t ***)(v85 + 32);
          *((_DWORD *)v85 + 13) = *((_DWORD *)v85 + 13) & 0x38000000 | 1;
          *(void *)uint64_t v85 = 0;
          *((void *)v85 + 1) = 0;
          *((void *)v85 + 2) = 0;
          *((void *)v85 + 3) = v85 + 32;
          int v86 = *(llvm::Type **)a2;
          v557[0] = 257;
          llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v85 + 32), v84, v86, (const char **)&p_s1, 0);
          return (llvm::UndefValue **)PrimitiveSizeInBits;
        }
        int v27 = 1;
        while (v26 != (llvm::UndefValue *)-4096)
        {
          int v28 = v24 + v27++;
          uint64_t v24 = v28 & (v23 - 1);
          int v26 = *(llvm::UndefValue **)(v22 + 16 * v24);
          if (v26 == a2)
          {
            int v25 = (llvm::UndefValue **)(v22 + 16 * v24);
            goto LABEL_106;
          }
        }
      }
      int v25 = (llvm::UndefValue **)(v22 + 16 * v23);
      goto LABEL_106;
    }
  }
  else
  {
LABEL_23:
    unsigned int v14 = *(llvm::UndefValue **)a2;
  }
  unint64_t v528 = *((unsigned int *)a2 + 18);
  __s2 = (int *)*((void *)a2 + 8);
  int v524 = **(llvm::ValueAsMetadata ***)v14;
  *(void *)__c = &v539;
  if (sub_1CCA4756C((void **)__c, v5))
  {
    unsigned int v29 = (*(unsigned char *)(v6 + 16) - 11);
    if (v29 >= 2)
    {
      if (v29 < 0xFD) {
        goto LABEL_27;
      }
      p_s1 = (char *)v557;
      uint64_t v554 = (uint64_t)v557;
      uint64_t v555 = 8;
      LODWORD(v556) = 0;
      uint64_t v549 = v551;
      uint64_t v550 = 0x800000000;
      __s1 = &p_s1;
      char v546 = (llvm::Type *)&v549;
      BOOL v88 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v6))
      {
        do
        {
          BOOL v88 = v550 == 0;
          if (!v550) {
            break;
          }
          uint64_t v465 = *((void *)v549 + v550 - 1);
          LODWORD(v550) = v550 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v465) & 1) != 0);
      }
      if (v549 != v551) {
        free(v549);
      }
      if ((char *)v554 == p_s1)
      {
        if (!v88) {
          goto LABEL_27;
        }
      }
      else
      {
        free((void *)v554);
        if (!v88) {
          goto LABEL_27;
        }
      }
    }
    if ((*((_DWORD *)*v539 + 2) & 0xFE) == 0x12 && v530 == v527)
    {
      uint64_t v89 = *v539;
      unsigned int v90 = *((_DWORD *)*v539 + 8);
      p_s1 = (char *)&v555;
      uint64_t v554 = 0x1000000000;
      if (v90 < v530)
      {
        if ((llvm::widenShuffleMaskElts(v530 / v90, __s2, v528, (unsigned int *)&p_s1) & 1) == 0)
        {
          LODWORD(v554) = 0;
          goto LABEL_415;
        }
      }
      else
      {
        llvm::narrowShuffleMaskElts(v90 / v530, __s2, v528, (uint64_t)&p_s1);
      }
      if (v554)
      {
        uint64_t v92 = (llvm *)v539;
        uint64_t v93 = llvm::UndefValue::get(v89, v91);
        uint64_t v94 = llvm::SimplifyShuffleVectorInst(v92, v93, p_s1, (llvm::Type *)v554, v89, (uint64_t)v540);
        if (v94)
        {
          uint64_t v95 = *(llvm::UndefValue **)a2;
          __int16 v552 = 257;
          unsigned int PrimitiveSizeInBits = (uint64_t ***)llvm::CastInst::Create(49, (uint64_t)v94, (uint64_t)v95, (const char **)&v549, 0);
          char v96 = 0;
          goto LABEL_416;
        }
      }
LABEL_415:
      char v96 = 1;
LABEL_416:
      if (p_s1 != (char *)&v555) {
        free(p_s1);
      }
      if ((v96 & 1) == 0) {
        return (llvm::UndefValue **)PrimitiveSizeInBits;
      }
    }
  }
LABEL_27:
  if (v5 == v6)
  {
    uint64_t v39 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
    unsigned int PrimitiveSizeInBits = (uint64_t ***)(v39 + 64);
    *(void *)uint64_t v39 = 0;
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = 0;
    *((void *)v39 + 3) = v39 + 64;
    *((void *)v39 + 4) = 0;
    *((void *)v39 + 5) = 0;
    *((void *)v39 + 6) = 0;
    *((void *)v39 + 7) = v39 + 64;
    llvm::createUnaryMask(__s2, v528, v527, (uint64_t)&p_s1);
    uint64_t v40 = p_s1;
    uint64_t v41 = (llvm::Type *)v554;
    __int16 v552 = 257;
    unsigned int v43 = (uint64_t **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v10, v42);
    llvm::ShuffleVectorInst::ShuffleVectorInst(PrimitiveSizeInBits, (uint64_t **)v10, v43, v40, v41, (const char **)&v549, 0);
    unint64_t v44 = p_s1;
    if (p_s1 == (char *)&v555) {
      return (llvm::UndefValue **)PrimitiveSizeInBits;
    }
    goto LABEL_36;
  }
  unsigned int v30 = (*(unsigned char *)(v5 + 16) - 11);
  if (v30 < 2) {
    goto LABEL_113;
  }
  if (v30 >= 0xFD)
  {
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    BOOL v87 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v5))
    {
      do
      {
        BOOL v87 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v463 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v463) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 == p_s1)
    {
      if (v87) {
        goto LABEL_113;
      }
    }
    else
    {
      free((void *)v554);
      if (v87) {
        goto LABEL_113;
      }
    }
  }
  uint64_t v31 = *((void *)a2 - 8);
  uint64_t v32 = *(void *)(v31 + 8);
  if (!v32 || *(void *)(v32 + 8) || *(unsigned char *)(v31 + 16) != 90) {
    goto LABEL_40;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = *((void *)a2 - 4);
  int v35 = (int *)*((void *)a2 + 8);
  uint64_t v36 = *((unsigned int *)a2 + 18);
  int v37 = *(_DWORD *)(v31 + 20);
  if ((v37 & 0x40000000) != 0) {
    unsigned int v38 = *(llvm::Type ***)(v31 - 8);
  }
  else {
    unsigned int v38 = (llvm::Type **)(v31 - 32 * (v37 & 0x7FFFFFF));
  }
  uint64_t v45 = *v38;
  unsigned int v46 = (*((unsigned char *)*v38 + 16) - 11);
  if (v46 >= 2)
  {
    if (v46 < 0xFD) {
      goto LABEL_40;
    }
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    BOOL v513 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, (uint64_t)v45))
    {
      do
      {
        BOOL v513 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v470 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v470) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 != p_s1) {
      free((void *)v554);
    }
    if (!v513) {
      goto LABEL_40;
    }
    int v37 = *(_DWORD *)(v31 + 20);
  }
  if ((v37 & 0x40000000) != 0) {
    uint64_t v248 = *(void *)(v31 - 8);
  }
  else {
    uint64_t v248 = v31 - 32 * (v37 & 0x7FFFFFF);
  }
  unint64_t v249 = *(unsigned __int8 **)(v248 + 32);
  if (v249)
  {
    uint64_t v250 = *(void *)(v248 + 64);
    if (v250 && *(unsigned char *)(v250 + 16) == 16)
    {
      int64_t v252 = (llvm::Value **)(v250 + 24);
      uint64_t v253 = *(unsigned int *)(v250 + 32);
      if (v253 >= 0x41)
      {
        int v459 = 0;
        int64_t v460 = (unint64_t)(v253 + 63) >> 6;
        do
        {
          BOOL v415 = v460-- < 1;
          if (v415) {
            break;
          }
          unint64_t v461 = *((void *)*v252 + v460);
          v459 += __clz(v461);
        }
        while (!v461);
        int v462 = v253 | 0xFFFFFFC0;
        if ((v253 & 0x3F) == 0) {
          int v462 = 0;
        }
        if ((v253 - v459 - v462) > 0x40) {
          goto LABEL_40;
        }
        int64_t v252 = (llvm::Value **)*v252;
      }
      int v254 = *v252;
      unsigned int v255 = (*(unsigned char *)(v34 + 16) - 11);
      if (v255 >= 2)
      {
        if (v255 < 0xFD) {
          goto LABEL_40;
        }
        uint64_t v514 = v254;
        p_s1 = (char *)v557;
        uint64_t v554 = (uint64_t)v557;
        uint64_t v555 = 8;
        LODWORD(v556) = 0;
        uint64_t v549 = v551;
        uint64_t v550 = 0x800000000;
        __s1 = &p_s1;
        char v546 = (llvm::Type *)&v549;
        int v256 = sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v34);
        BOOL v257 = 0;
        if (v256)
        {
          do
          {
            BOOL v257 = v550 == 0;
            if (!v550) {
              break;
            }
            uint64_t v475 = *((void *)v549 + v550 - 1);
            LODWORD(v550) = v550 - 1;
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v475) & 1) != 0);
        }
        if (v549 != v551) {
          free(v549);
        }
        if ((char *)v554 != p_s1) {
          free((void *)v554);
        }
        int v254 = v514;
        if (!v257) {
          goto LABEL_40;
        }
      }
      if (!v36) {
        goto LABEL_40;
      }
      uint64_t v258 = 4 * v36;
      unint64_t v259 = v35;
      while ((*v259 + 1) < 2)
      {
        ++v259;
        v258 -= 4;
        if (!v258) {
          goto LABEL_40;
        }
      }
      if (!v254) {
        goto LABEL_40;
      }
      uint64_t v284 = (unsigned __int8 *)llvm::UndefValue::get(*(llvm::UndefValue **)a2, v45);
      uint64_t v285 = **(void **)(v33 + 64);
      uint64_t v286 = *(llvm::ConstantInt **)(v285 + 1960);
      unsigned int v287 = *(_DWORD *)(v285 + 1968);
      LODWORD(v554) = v287 >> 8;
      if (v287 >> 8 >= 0x41) {
        operator new[]();
      }
      p_s1 = 0;
      uint64_t v288 = (unsigned __int8 *)llvm::ConstantInt::get(v286, (llvm::LLVMContext *)&p_s1, v283);
      if (v554 >= 0x41 && p_s1) {
        MEMORY[0x1D25D9CB0](p_s1, 0x1000C8000313F17);
      }
      v557[0] = 257;
      int v289 = (llvm::PoisonValue **)sub_1CB84478C(v33, v284, v249, v288, (uint64_t)&p_s1);
      uint64_t v290 = *(unsigned int *)(*(void *)a2 + 32);
      p_s1 = (char *)&v555;
      HIDWORD(v554) = 16;
      if (v290 >= 0x11)
      {
        LODWORD(v554) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v290)
      {
        bzero(&v555, 4 * v290);
        unsigned int v291 = &v555;
        LODWORD(v554) = v290;
        do
        {
          int v292 = *v35++;
          if (v292 == -1) {
            *(_DWORD *)unsigned int v291 = -1;
          }
          unsigned int v291 = (uint64_t *)((char *)v291 + 4);
          --v290;
        }
        while (v290);
      }
      else
      {
        LODWORD(v554) = 0;
      }
      uint64_t v442 = (char *)operator new(0xA8uLL);
      *((_DWORD *)v442 + 21) = *((_DWORD *)v442 + 21) & 0x38000000 | 2;
      unsigned int PrimitiveSizeInBits = (uint64_t ***)(v442 + 64);
      *(void *)uint64_t v442 = 0;
      *((void *)v442 + 1) = 0;
      *((void *)v442 + 2) = 0;
      *((void *)v442 + 3) = v442 + 64;
      *((void *)v442 + 4) = 0;
      *((void *)v442 + 5) = 0;
      *((void *)v442 + 6) = 0;
      *((void *)v442 + 7) = v442 + 64;
      int v443 = p_s1;
      int64_t v444 = (llvm::Type *)v554;
      __int16 v552 = 257;
      int v446 = (uint64_t **)llvm::PoisonValue::get(*v289, v445);
      llvm::ShuffleVectorInst::ShuffleVectorInst(PrimitiveSizeInBits, (uint64_t **)v289, v446, v443, v444, (const char **)&v549, 0);
      unint64_t v44 = p_s1;
      if (p_s1 == (char *)&v555) {
        return (llvm::UndefValue **)PrimitiveSizeInBits;
      }
LABEL_36:
      free(v44);
      return (llvm::UndefValue **)PrimitiveSizeInBits;
    }
  }
LABEL_40:
  uint64_t v47 = *(unsigned int *)(**((void **)a2 - 8) + 32);
  if (v47 != *((_DWORD *)a2 + 18)) {
    goto LABEL_178;
  }
  uint64_t v48 = (int *)*((void *)a2 + 8);
  if (!llvm::ShuffleVectorInst::isSelectMask(v48, v47)) {
    goto LABEL_178;
  }
  uint64_t v49 = *((void *)a2 - 4);
  unsigned int v50 = (*(unsigned char *)(v49 + 16) - 11);
  if (v50 >= 2)
  {
    int v51 = *(_DWORD *)(*(void *)a2 + 32);
    if (v50 >= 0xFD)
    {
      p_s1 = (char *)v557;
      uint64_t v554 = (uint64_t)v557;
      uint64_t v555 = 8;
      LODWORD(v556) = 0;
      uint64_t v549 = v551;
      uint64_t v550 = 0x800000000;
      __s1 = &p_s1;
      char v546 = (llvm::Type *)&v549;
      BOOL v229 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v49))
      {
        do
        {
          BOOL v229 = v550 == 0;
          if (!v550) {
            break;
          }
          uint64_t v467 = *((void *)v549 + v550 - 1);
          LODWORD(v550) = v550 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v467) & 1) != 0);
      }
      if (v549 != v551) {
        free(v549);
      }
      if ((char *)v554 == p_s1)
      {
        if (v229) {
          goto LABEL_45;
        }
      }
      else
      {
        free((void *)v554);
        if (v229) {
          goto LABEL_45;
        }
      }
      uint64_t v48 = (int *)*((void *)a2 + 8);
    }
    if (*v48 >= v51)
    {
LABEL_113:
      llvm::ShuffleVectorInst::commute(a2);
      return (llvm::UndefValue **)a2;
    }
  }
LABEL_45:
  uint64_t v52 = *((void *)a2 - 8);
  uint64_t v53 = *((void *)a2 - 4);
  if (v52
    && ((v54 = *(unsigned __int8 *)(v52 + 16), v54 >= 0x1C) ? (BOOL v55 = v54 - 59 >= 0xFFFFFFEE) : (BOOL v55 = 0),
        v55 && v53 == *(void *)(v52 - 64) && (uint64_t v69 = *(unsigned __int8 **)(v52 - 32)) != 0 && v69[16] < 0x15u))
  {
    int v511 = 1;
    uint64_t v70 = *((void *)a2 - 8);
  }
  else
  {
    if (!v53) {
      goto LABEL_59;
    }
    unsigned int v54 = *(unsigned __int8 *)(v53 + 16);
    if (v54 < 0x1C || v54 - 59 < 0xFFFFFFEE) {
      goto LABEL_59;
    }
    if (v52 != *(void *)(v53 - 64)) {
      goto LABEL_59;
    }
    uint64_t v69 = *(unsigned __int8 **)(v53 - 32);
    if (!v69 || v69[16] > 0x14u) {
      goto LABEL_59;
    }
    int v511 = 0;
    uint64_t v70 = *((void *)a2 - 4);
  }
  unsigned int v502 = v54 - 28;
  BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(v54 - 28), *(llvm::ConstantFP **)a2, (llvm::Type *)1, 0);
  if (BinOpIdentity)
  {
    unint64_t v72 = BinOpIdentity;
    __sa = (__int32 *)*((void *)a2 + 8);
    if (v511) {
      BinOpIdentity = (llvm *)v69;
    }
    else {
      unint64_t v72 = (llvm *)v69;
    }
    size_t v73 = *((unsigned int *)a2 + 18);
    ShuffleVector = (llvm::Constant *)llvm::ConstantExpr::getShuffleVector(BinOpIdentity, v72, __sa, (llvm::Type *)v73, 0);
    uint64_t v74 = wmemchr(__sa, -1, v73);
    int v75 = &__sa[v73];
    if (v74) {
      int v75 = v74;
    }
    if (v73 == v75 - __sa)
    {
      char v76 = 0;
      uint64_t v77 = ShuffleVector;
    }
    else
    {
      uint64_t v77 = ShuffleVector;
      if (v54 <= 0x33 && ((1 << v54) & 0xD800000000000) != 0 || v54 - 53 <= 2)
      {
        char v76 = 1;
        uint64_t v77 = sub_1CD689470((llvm::ConstantExpr *)v502, ShuffleVector, (llvm::Type *)1);
      }
      else
      {
        char v76 = 0;
      }
    }
    if (v511) {
      uint64_t v97 = (void *)v53;
    }
    else {
      uint64_t v97 = (void *)v52;
    }
    v557[0] = 257;
    unsigned int PrimitiveSizeInBits = (uint64_t ***)llvm::BinaryOperator::Create(v502, v97, (uint64_t)v77, (const char **)&p_s1, 0);
    llvm::Instruction::copyIRFlags((uint64_t)PrimitiveSizeInBits, v70, 1);
    unsigned int v98 = wmemchr(__sa, -1, v73);
    uint64_t v99 = &__sa[v73];
    if (v98) {
      uint64_t v99 = v98;
    }
    if ((v76 & 1) == 0 && v99 - __sa != v73) {
      llvm::Instruction::dropPoisonGeneratingFlags((llvm::Instruction *)PrimitiveSizeInBits);
    }
    if (PrimitiveSizeInBits) {
      return (llvm::UndefValue **)PrimitiveSizeInBits;
    }
  }
LABEL_59:
  uint64_t v57 = *((void *)a2 - 8);
  if (!v57) {
    goto LABEL_178;
  }
  unsigned int v58 = *(unsigned __int8 *)(v57 + 16);
  LODWORD(v59) = v58 - 28;
  if (v58 < 0x1C || v58 - 59 < 0xFFFFFFEE) {
    goto LABEL_178;
  }
  uint64_t v61 = *((void *)a2 - 4);
  if (!v61) {
    goto LABEL_178;
  }
  unsigned int v62 = *(unsigned __int8 *)(v61 + 16);
  unsigned int v63 = v62 - 28;
  if (v62 < 0x1C || v62 - 59 < 0xFFFFFFEE) {
    goto LABEL_178;
  }
  uint64_t v544 = 0;
  __s1 = 0;
  *(void *)__c = 0;
  uint64_t v536 = 0;
  uint64_t v64 = *(void *)(v57 - 64);
  if (v64
    && *(unsigned __int8 *)(v64 + 16) <= 0x14u
    && (uint64_t v536 = *(__int32 **)(v57 - 64), *(void *)(v57 - 32))
    && (__s1 = *(void **)(v57 - 32), (uint64_t v65 = *(void *)(v61 - 64)) != 0)
    && *(unsigned __int8 *)(v65 + 16) <= 0x14u
    && (uint64_t v544 = *(llvm **)(v61 - 64), *(void *)(v61 - 32)))
  {
    int v66 = 0;
    int __s = 0;
    *(void *)__c = *(void *)(v61 - 32);
  }
  else
  {
    p_s1 = (char *)&__s1;
    uint64_t v554 = (uint64_t)&v536;
    unsigned int v556 = &__s1;
    if (!sub_1CCACAFC8((uint64_t)&p_s1, v57)) {
      goto LABEL_178;
    }
    uint64_t v549 = __c;
    uint64_t v550 = (uint64_t)&v544;
    v551[1] = __c;
    if (!sub_1CCACAFC8((uint64_t)&v549, v61)) {
      goto LABEL_178;
    }
    int v67 = *(unsigned __int8 *)(v57 + 16);
    LODWORD(v59) = v67 - 28;
    int v68 = *(unsigned __int8 *)(v61 + 16);
    unsigned int v63 = v68 - 28;
    if (v67 == v68)
    {
      int __s = 0;
    }
    else
    {
      BOOL v78 = v67 == 53 || v63 == 25;
      int v79 = v78;
      int __s = v79;
      sub_1CCAC65FC((uint64_t)&p_s1, v57, *(const llvm::APInt **)(a1 + 80));
      if (p_s1)
      {
        uint64_t v536 = (__int32 *)v555;
        LODWORD(v59) = p_s1;
      }
      else
      {
        sub_1CCAC65FC((uint64_t)&v549, v61, *(const llvm::APInt **)(a1 + 80));
        if (v549)
        {
          uint64_t v544 = (llvm *)v551[0];
          unsigned int v63 = v549;
        }
      }
    }
    int v66 = 1;
  }
  if (v59 != v63 || !v536 || !v544) {
    goto LABEL_178;
  }
  unsigned int v512 = v66;
  uint64_t v100 = (int *)*((void *)a2 + 8);
  size_t v101 = *((unsigned int *)a2 + 18);
  unsigned int v503 = (llvm::Constant *)llvm::ConstantExpr::getShuffleVector((llvm *)v536, v544, v100, (llvm::Type *)v101, 0);
  unint64_t v102 = wmemchr(v100, -1, v101);
  uint64_t v494 = &v100[v101];
  size_t __n = v101;
  if (v102) {
    uint64_t v103 = v102;
  }
  else {
    uint64_t v103 = &v100[v101];
  }
  if (v101 == v103 - v100)
  {
    int v104 = 0;
    uint64_t v59 = v59;
  }
  else
  {
    uint64_t v59 = v59;
    if (v59 <= 0x17 && ((1 << v59) & 0xD80000) != 0 || (v59 - 25) <= 2)
    {
      unsigned int v105 = v512;
      unsigned int v503 = sub_1CD689470((llvm::ConstantExpr *)v59, v503, (llvm::Type *)v512);
      int v104 = 1;
      goto LABEL_153;
    }
    int v104 = 0;
  }
  unsigned int v105 = v512;
LABEL_153:
  unint64_t v106 = __s1;
  if (__s1 == *(void **)__c)
  {
    char v507 = v104;
  }
  else
  {
    uint64_t v107 = *(void *)(v57 + 8);
    if (v107 && !*(void *)(v107 + 8))
    {
      if ((v105 | v104 ^ 1) != 1) {
        goto LABEL_178;
      }
    }
    else
    {
      uint64_t v108 = *(void *)(v61 + 8);
      if (!v108 || (v105 | v104 ^ 1) != 1 || *(void *)(v108 + 8)) {
        goto LABEL_178;
      }
    }
    char v507 = v104;
    uint64_t v109 = *(void *)(a1 + 24);
    v557[0] = 257;
    unsigned int v105 = v512;
    unint64_t v106 = sub_1CB935A74(v109, (uint64_t)__s1, *(uint64_t *)__c, v100, (llvm::Type *)__n, (uint64_t)&p_s1);
  }
  uint64_t v110 = *(void *)(a1 + 24);
  v557[0] = 257;
  if (v105)
  {
    uint64_t v111 = (uint64_t)v106;
    unint64_t v106 = v503;
  }
  else
  {
    uint64_t v111 = (uint64_t)v503;
  }
  uint64_t v112 = sub_1CB844E98(v110, v59, v111, (uint64_t)v106, (uint64_t)&p_s1, 0);
  uint64_t v113 = v112;
  if (v112 && *((unsigned __int8 *)v112 + 16) >= 0x1Cu)
  {
    llvm::Instruction::copyIRFlags((uint64_t)v112, v57, 1);
    llvm::Instruction::andIRFlags((uint64_t)v113, v61);
    if (__s) {
      *((unsigned char *)v113 + 17) &= ~4u;
    }
    uint64_t v114 = wmemchr(v100, -1, __n);
    BOOL v115 = v494;
    if (v114) {
      BOOL v115 = v114;
    }
    BOOL v78 = __n == v115 - v100;
    char v116 = v507;
    if (v78) {
      char v116 = 1;
    }
    if ((v116 & 1) == 0) {
      llvm::Instruction::dropPoisonGeneratingFlags(v113);
    }
  }
  unsigned int PrimitiveSizeInBits = (uint64_t ***)sub_1CC9D3C84(a1, a2, v113);
  if (PrimitiveSizeInBits) {
    return (llvm::UndefValue **)PrimitiveSizeInBits;
  }
LABEL_178:
  int v117 = **(unsigned __int8 **)(a1 + 80);
  int v118 = *(llvm::UndefValue **)a2;
  *(void *)__c = 0;
  uint64_t v119 = *((void *)a2 - 8);
  uint64_t v536 = __c;
  if (!sub_1CCA4756C((void **)&v536, v119)) {
    goto LABEL_181;
  }
  uint64_t v120 = *((void *)a2 - 4);
  unsigned int v121 = (*(unsigned char *)(v120 + 16) - 11);
  if (v121 >= 2)
  {
    if (v121 < 0xFD) {
      goto LABEL_181;
    }
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    BOOL v212 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v120))
    {
      do
      {
        BOOL v212 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v466 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v466) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 == p_s1)
    {
      if (!v212) {
        goto LABEL_181;
      }
    }
    else
    {
      free((void *)v554);
      if (!v212) {
        goto LABEL_181;
      }
    }
  }
  int v213 = *((_DWORD *)v118 + 2) & 0xFE;
  if (v213 == 18) {
    int v214 = *(unsigned __int8 *)(**((void **)v118 + 2) + 8);
  }
  else {
    int v214 = *((_DWORD *)v118 + 2);
  }
  if (v214 == 13)
  {
    uint64_t v215 = **(void **)__c;
    if ((*(_DWORD *)(**(void **)__c + 8) & 0xFE) == 0x12)
    {
      unint64_t v216 = **(llvm::Type ***)(v215 + 16);
      if (*((unsigned char *)v216 + 8) == 13 && *(_DWORD *)(v215 + 32) == *((_DWORD *)v118 + 8))
      {
        unsigned int v217 = llvm::Type::getPrimitiveSizeInBits(v216);
        uint64_t v218 = v118;
        if (v213 == 18) {
          uint64_t v218 = (llvm::Type *)**((void **)v118 + 2);
        }
        unsigned int v219 = llvm::Type::getPrimitiveSizeInBits(v218);
        int v220 = v217 / v219;
        if (!(v217 % v219))
        {
          uint64_t v221 = *((unsigned int *)a2 + 18);
          if (!v221)
          {
LABEL_339:
            int64_t v228 = (char *)operator new(0x60uLL);
            unsigned int PrimitiveSizeInBits = (uint64_t ***)(v228 + 32);
            *((_DWORD *)v228 + 13) = *((_DWORD *)v228 + 13) & 0x38000000 | 1;
            *(void *)int64_t v228 = 0;
            *((void *)v228 + 1) = 0;
            *((void *)v228 + 2) = 0;
            *((void *)v228 + 3) = v228 + 32;
            v557[0] = 257;
            llvm::TruncInst::TruncInst((llvm::TruncInst *)(v228 + 32), *(llvm::Value **)__c, v118, (const char **)&p_s1, 0);
            return (llvm::UndefValue **)PrimitiveSizeInBits;
          }
          uint64_t v222 = 0;
          int v223 = (int *)*((void *)a2 + 8);
          while (1)
          {
            int v225 = *v223++;
            int v224 = v225;
            uint64_t v226 = v222 + 1;
            if (v225 != -1)
            {
              int v227 = v220 * v222;
              if (v117) {
                int v227 = v220 * v226 - 1;
              }
              if (v224 != v227) {
                break;
              }
            }
            uint64_t v222 = v226;
            if (!--v221) {
              goto LABEL_339;
            }
          }
        }
      }
    }
  }
LABEL_181:
  uint64_t v122 = *(void *)(a1 + 24);
  uint64_t v123 = *((void *)a2 - 4);
  unsigned int v124 = (*(unsigned char *)(v123 + 16) - 11);
  if (v124 >= 2)
  {
    if (v124 < 0xFD) {
      goto LABEL_183;
    }
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    BOOL v206 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v123))
    {
      do
      {
        BOOL v206 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v464 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v464) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 == p_s1)
    {
      if (!v206) {
        goto LABEL_183;
      }
    }
    else
    {
      free((void *)v554);
      if (!v206) {
        goto LABEL_183;
      }
    }
  }
  if (llvm::ShuffleVectorInst::isIdentityWithExtract(a2))
  {
    *(void *)__c = 0;
    uint64_t v536 = 0;
    uint64_t v544 = 0;
    uint64_t v207 = *((void *)a2 - 8);
    p_s1 = (char *)__c;
    uint64_t v554 = (uint64_t)&v536;
    uint64_t v555 = (uint64_t)&v544;
    uint64_t v208 = *(void *)(v207 + 8);
    if (v208)
    {
      if (!*(void *)(v208 + 8))
      {
        if (sub_1CC189B48((void **)&p_s1, v207))
        {
          uint64_t v209 = *(void *)(*(void *)__c + 8);
          if (v209)
          {
            if (!*(void *)(v209 + 8) && *(unsigned char *)(*(void *)__c + 16) == 91)
            {
              int __sb = *(_DWORD *)(*(void *)a2 + 32);
              int v210 = *(_DWORD *)(*(void *)__c + 20);
              int v211 = (v210 & 0x40000000) != 0
                   ? *(uint64_t **)(*(void *)__c - 8)
                   : (uint64_t *)(*(void *)__c - 32 * (v210 & 0x7FFFFFF));
              uint64_t v262 = *v211;
              if (*v211)
              {
                uint64_t v263 = v211[4];
                unsigned int v264 = (*(unsigned char *)(v263 + 16) - 11);
                if (v264 < 2) {
                  goto LABEL_430;
                }
                if (v264 >= 0xFD)
                {
                  p_s1 = (char *)v557;
                  uint64_t v554 = (uint64_t)v557;
                  uint64_t v555 = 8;
                  LODWORD(v556) = 0;
                  uint64_t v549 = v551;
                  uint64_t v550 = 0x800000000;
                  __s1 = &p_s1;
                  char v546 = (llvm::Type *)&v549;
                  BOOL v515 = 0;
                  if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v263))
                  {
                    do
                    {
                      BOOL v515 = v550 == 0;
                      if (!v550) {
                        break;
                      }
                      uint64_t v476 = *((void *)v549 + v550 - 1);
                      LODWORD(v550) = v550 - 1;
                    }
                    while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v476) & 1) != 0);
                  }
                  if (v549 != v551) {
                    free(v549);
                  }
                  if ((char *)v554 != p_s1) {
                    free((void *)v554);
                  }
                  if (v515)
                  {
LABEL_430:
                    if (*(_DWORD *)(*(void *)v262 + 32) == __sb
                      && (llvm::ShuffleVectorInst::isIdentityWithPadding(*(llvm::ShuffleVectorInst **)__c) & 1) != 0)
                    {
                      uint64_t v266 = v536;
                      __int16 v267 = (void **)*((void *)a2 + 8);
                      unsigned int v268 = (llvm::Type *)*((unsigned int *)a2 + 18);
                      v557[0] = 257;
                      unint64_t v269 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v536, v265);
                      __sc = (__int32 *)sub_1CB935A74(v122, (uint64_t)v266, (uint64_t)v269, v267, v268, (uint64_t)&p_s1);
                      uint64_t v270 = v544;
                      long long v271 = (void **)*((void *)a2 + 8);
                      uint64_t v272 = (llvm::Type *)*((unsigned int *)a2 + 18);
                      v557[0] = 257;
                      __int16 v274 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v544, v273);
                      uint64_t v275 = sub_1CB935A74(v122, (uint64_t)v270, (uint64_t)v274, v271, v272, (uint64_t)&p_s1);
                      v557[0] = 257;
                      unsigned int PrimitiveSizeInBits = (uint64_t ***)sub_1CC199EFC(v262, (uint64_t *)__sc, (uint64_t)v275, (const char **)&p_s1, 0, 0);
                      if (PrimitiveSizeInBits) {
                        return (llvm::UndefValue **)PrimitiveSizeInBits;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_183:
  unsigned int v537 = v530;
  if (v530 > 0x40) {
    operator new[]();
  }
  uint64_t v536 = 0;
  if (v530) {
    unint64_t v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v530;
  }
  else {
    unint64_t v125 = 0;
  }
  unsigned int v535 = v530;
  unint64_t v534 = v125;
  uint64_t v126 = sub_1CCABD934(a1, (uint64_t)a2, (llvm::APInt *)&v534, (void **)&v536, 0, 0);
  if (v535 >= 0x41 && v534) {
    MEMORY[0x1D25D9CB0](v534, 0x1000C8000313F17);
  }
  if (v126)
  {
    if (v126 == a2) {
      unsigned int PrimitiveSizeInBits = (uint64_t ***)a2;
    }
    else {
      unsigned int PrimitiveSizeInBits = (uint64_t ***)sub_1CC9D3C84(a1, a2, v126);
    }
    goto LABEL_552;
  }
  uint64_t v127 = *((void *)a2 - 8);
  uint64_t v128 = *((void *)a2 - 4);
  if (!llvm::ShuffleVectorInst::isIdentityWithExtract(a2)) {
    goto LABEL_195;
  }
  unsigned int v129 = (*(unsigned char *)(v128 + 16) - 11);
  if (v129 >= 2)
  {
    if (v129 < 0xFD) {
      goto LABEL_195;
    }
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    int v230 = sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v128);
    BOOL v231 = 0;
    if (v230)
    {
      do
      {
        BOOL v231 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v468 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v468) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 == p_s1)
    {
      if (!v231) {
        goto LABEL_195;
      }
    }
    else
    {
      free((void *)v554);
      if (!v231) {
        goto LABEL_195;
      }
    }
  }
  unsigned int v232 = *(unsigned __int8 *)(v127 + 16);
  unsigned int v233 = v232 - 28;
  BOOL v235 = v232 < 0x1C && v232 != 5;
  if (v127 && !v235)
  {
    if (v232 <= 0x1B) {
      unsigned int v233 = *(unsigned __int16 *)(v127 + 18);
    }
    if (v233 == 49)
    {
      uint64_t v277 = v5;
      int v278 = *(_DWORD *)(v127 + 20);
      uint64_t v279 = (v278 & 0x40000000) != 0 ? *(uint64_t **)(v127 - 8) : (uint64_t *)(v127 - 32 * (v278 & 0x7FFFFFF));
      uint64_t v280 = *v279;
      if (*(unsigned char *)(v280 + 16) == 90)
      {
        int v281 = *(_DWORD *)(v280 + 20);
        uint64_t v282 = (v281 & 0x40000000) != 0 ? *(void *)(v280 - 8) : v280 - 32 * (v281 & 0x7FFFFFF);
        uint64_t v516 = *(llvm::Type ***)(v282 + 32);
        if (v516)
        {
          uint64_t v293 = *(void *)(v282 + 64);
          unsigned int v294 = *(unsigned __int8 *)(v293 + 16);
          if (v293) {
            BOOL v295 = v294 >= 0x15;
          }
          else {
            BOOL v295 = 1;
          }
          if (v295)
          {
            uint64_t v5 = v277;
            goto LABEL_366;
          }
          if (v294 == 16)
          {
            uint64_t v296 = *(unsigned int *)(v293 + 32);
            if (v296 < 0x41)
            {
              if (*(void *)(v293 + 24)) {
                goto LABEL_467;
              }
LABEL_757:
              uint64_t v5 = v277;
LABEL_758:
              unint64_t v448 = llvm::Type::getPrimitiveSizeInBits(*v516);
              int v450 = v449;
              if (v448 == llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2) && v450 == v451)
              {
                BOOL v453 = (char *)operator new(0x60uLL);
                unsigned int PrimitiveSizeInBits = (uint64_t ***)(v453 + 32);
                *((_DWORD *)v453 + 13) = *((_DWORD *)v453 + 13) & 0x38000000 | 1;
                *(void *)BOOL v453 = 0;
                *((void *)v453 + 1) = 0;
                *((void *)v453 + 2) = 0;
                *((void *)v453 + 3) = v453 + 32;
                unsigned int v454 = *(llvm::Type **)a2;
                v557[0] = 257;
                llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v453 + 32), (llvm::Value *)v516, v454, (const char **)&p_s1, 0);
                goto LABEL_552;
              }
              goto LABEL_366;
            }
            int v455 = 0;
            int64_t v456 = (unint64_t)(v296 + 63) >> 6;
            do
            {
              BOOL v415 = v456-- < 1;
              if (v415) {
                break;
              }
              unint64_t v457 = *(void *)(*(void *)(v293 + 24) + 8 * v456);
              v455 += __clz(v457);
            }
            while (!v457);
            int v458 = v296 | 0xFFFFFFC0;
            if ((v296 & 0x3F) == 0) {
              int v458 = 0;
            }
            if (v455 + v458 == v296) {
              goto LABEL_757;
            }
          }
          else if (v294 == 17)
          {
            if (sub_1CB844168(v293, 0.0)) {
              goto LABEL_757;
            }
          }
          else if (v294 - 18 < 3 || v294 == 13)
          {
            goto LABEL_757;
          }
LABEL_467:
          int v297 = sub_1CC03F414((uint64_t)&p_s1, (llvm::Constant *)v293);
          uint64_t v5 = v277;
          if (!v297) {
            goto LABEL_366;
          }
          goto LABEL_758;
        }
      }
    }
  }
LABEL_366:
  if (v127)
  {
    if (*(unsigned char *)(v127 + 16) == 91)
    {
      int64_t v236 = *(uint64_t ***)(v127 - 64);
      if (v236)
      {
        unint64_t v237 = *(uint64_t ***)(v127 - 32);
        if (v237)
        {
          uint64_t v238 = *(void *)(v127 + 8);
          if (v238)
          {
            if (!*(void *)(v238 + 8))
            {
              int v239 = *(int **)(v127 + 64);
              uint64_t v240 = *(unsigned int *)(*(void *)a2 + 32);
              p_s1 = (char *)&v555;
              HIDWORD(v554) = 16;
              if (v240 >= 0x11)
              {
                LODWORD(v554) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v240)
              {
                bzero(&v555, 4 * v240);
                unint64_t v241 = &v555;
                LODWORD(v554) = v240;
                int v242 = (int *)*((void *)a2 + 8);
                do
                {
                  int v244 = *v242++;
                  int v243 = v244;
                  int v246 = *v239++;
                  int v245 = v246;
                  if (v243 == -1) {
                    int v247 = -1;
                  }
                  else {
                    int v247 = v245;
                  }
                  *(_DWORD *)unint64_t v241 = v247;
                  unint64_t v241 = (uint64_t *)((char *)v241 + 4);
                  --v240;
                }
                while (v240);
              }
              else
              {
                LODWORD(v554) = 0;
              }
              unint64_t v276 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v276 + 21) = *((_DWORD *)v276 + 21) & 0x38000000 | 2;
              unsigned int PrimitiveSizeInBits = (uint64_t ***)(v276 + 64);
              *(void *)unint64_t v276 = 0;
              *((void *)v276 + 1) = 0;
              *((void *)v276 + 2) = 0;
              *((void *)v276 + 3) = v276 + 64;
              *((void *)v276 + 4) = 0;
              *((void *)v276 + 5) = 0;
              *((void *)v276 + 6) = 0;
              *((void *)v276 + 7) = v276 + 64;
              __int16 v552 = 257;
              llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v276 + 8, v236, v237, p_s1, (llvm::Type *)v554, (const char **)&v549, 0);
              int v261 = p_s1;
              if (p_s1 == (char *)&v555) {
                goto LABEL_552;
              }
              goto LABEL_412;
            }
          }
        }
      }
    }
  }
LABEL_195:
  uint64_t v130 = *((void *)a2 - 8);
  uint64_t v508 = *((void *)a2 - 4);
  p_s1 = (char *)&v555;
  uint64_t v131 = (void **)*((void *)a2 + 8);
  uint64_t v132 = *((unsigned int *)a2 + 18);
  uint64_t v554 = 0x1000000000;
  if (v132 >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v133 = 0;
  if (v132)
  {
    memcpy(&v555, v131, 4 * v132);
    int v133 = v554;
  }
  uint64_t v134 = (v133 + v132);
  LODWORD(v554) = v134;
  uint64_t v135 = *(int *)(*(void *)v130 + 32);
  __s1 = 0;
  *(void *)__c = 0;
  uint64_t v549 = &__s1;
  v551[0] = __c;
  if (sub_1CCACADAC((void **)&v549, v130))
  {
    uint64_t v136 = v5;
    uint64_t v137 = v6;
    uint64_t v138 = v10;
    uint64_t v139 = v130;
    int v140 = (__int32 *)&p_s1[4 * v554];
    uint64_t v141 = wmemchr((__int32 *)p_s1, __c[0], v554);
    uint64_t v142 = v141 ? v141 : v140;
    uint64_t v130 = v139;
    uint64_t v10 = v138;
    uint64_t v6 = v137;
    uint64_t v5 = v136;
    if (v142 == (__int32 *)&p_s1[4 * v554])
    {
      unsigned int v156 = __s1;
      uint64_t v157 = a1;
      uint64_t v158 = (uint64_t)a2;
      unsigned int v159 = 0;
LABEL_252:
      unsigned int PrimitiveSizeInBits = (uint64_t ***)sub_1CC9D28DC(v157, v158, v159, (uint64_t)v156);
      goto LABEL_272;
    }
  }
  uint64_t v549 = &__s1;
  v551[0] = __c;
  int v143 = v135;
  if (sub_1CCACADAC((void **)&v549, v508))
  {
    *(void *)__c += v135;
    uint64_t v144 = v130;
    unsigned int v145 = (__int32 *)&p_s1[4 * v554];
    char v146 = wmemchr((__int32 *)p_s1, __c[0], v554);
    uint64_t v147 = v146 ? v146 : v145;
    uint64_t v130 = v144;
    if (v147 == (__int32 *)&p_s1[4 * v554])
    {
      unsigned int v156 = __s1;
      uint64_t v157 = a1;
      uint64_t v158 = (uint64_t)a2;
      unsigned int v159 = 1;
      goto LABEL_252;
    }
  }
  if (v134 != v143) {
    goto LABEL_250;
  }
  uint64_t v543 = 0;
  uint64_t v544 = 0;
  uint64_t v550 = (uint64_t)&v544;
  v551[0] = &v543;
  if (sub_1CCACAE8C((uint64_t)&v549, v130))
  {
    if (v134)
    {
      uint64_t v149 = 0;
      unint64_t v150 = (int *)p_s1;
      int v151 = -1;
      while (1)
      {
        int v152 = *(_DWORD *)&p_s1[4 * v149];
        if (v152 != -1 && v134 + v149 != v152)
        {
          if (v151 != -1) {
            goto LABEL_227;
          }
          unsigned int v154 = *((_DWORD *)v543 + 8);
          uint64_t v155 = v154 > 0x40
               ? *v543[3]
               : (llvm::ConstantInt *)((uint64_t)((void)v543[3] << -(char)v154) >> -(char)v154);
          if (v155 != (llvm::ConstantInt *)v152) {
            goto LABEL_227;
          }
          int v151 = v149;
        }
        if (v134 == ++v149) {
          goto LABEL_254;
        }
      }
    }
    int v151 = -1;
LABEL_254:
    uint64_t v170 = **v543;
    unsigned int v171 = *((_DWORD *)*v543 + 2);
    LODWORD(v550) = v171 >> 8;
    if (v171 >> 8 > 0x40) {
      operator new[]();
    }
    if (v171 <= 0xFF) {
      unint64_t v172 = 0;
    }
    else {
      unint64_t v172 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v171) + 63);
    }
    uint64_t v549 = (void *)(v172 & v151);
    uint64_t v173 = (llvm::ConstantInt ***)llvm::ConstantInt::get(v170, (llvm::LLVMContext *)&v549, v148);
    if (v550 >= 0x41 && v549) {
      MEMORY[0x1D25D9CB0](v549, 0x1000C8000313F17);
    }
    uint64_t v543 = v173;
    int v174 = v544;
    __int16 v552 = 257;
    uint64_t v175 = (char *)operator new(0xA0uLL);
    uint64_t v176 = 0;
    unsigned int PrimitiveSizeInBits = (uint64_t ***)(v175 + 96);
    *((_DWORD *)v175 + 29) = *((_DWORD *)v175 + 29) & 0x38000000 | 3;
    do
    {
      int v177 = &v175[v176];
      *(void *)int v177 = 0;
      *((void *)v177 + 1) = 0;
      *((void *)v177 + 2) = 0;
      *((void *)v177 + 3) = PrimitiveSizeInBits;
      v176 += 32;
    }
    while (v176 != 96);
    uint64_t v178 = (llvm::InsertElementInst *)(v175 + 96);
    unsigned int v179 = (llvm::Value *)v508;
    int v180 = v174;
    uint64_t v181 = (llvm::Value *)v173;
    goto LABEL_271;
  }
  unint64_t v150 = (int *)p_s1;
LABEL_227:
  if (v554)
  {
    uint64_t v160 = 4 * v554;
    do
    {
      int v161 = *v150;
      if (*v150 != -1)
      {
        if (v161 >= (int)v134) {
          int v162 = -(int)v134;
        }
        else {
          int v162 = v134;
        }
        *unint64_t v150 = v162 + v161;
      }
      ++v150;
      v160 -= 4;
    }
    while (v160);
  }
  uint64_t v550 = (uint64_t)&v544;
  v551[0] = &v543;
  if (!sub_1CCACAE8C((uint64_t)&v549, v508))
  {
LABEL_250:
    unsigned int PrimitiveSizeInBits = 0;
    goto LABEL_272;
  }
  if (v134)
  {
    uint64_t v164 = 0;
    int v165 = -1;
    while (1)
    {
      int v166 = *(_DWORD *)&p_s1[4 * v164];
      if (v166 != -1 && v134 + v164 != v166)
      {
        if (v165 != -1) {
          goto LABEL_250;
        }
        unsigned int v168 = *((_DWORD *)v543 + 8);
        unsigned int v169 = v168 > 0x40 ? *v543[3] : (llvm::ConstantInt *)((uint64_t)((void)v543[3] << -(char)v168) >> -(char)v168);
        if (v169 != (llvm::ConstantInt *)v166) {
          goto LABEL_250;
        }
        int v165 = v164;
      }
      if (v134 == ++v164) {
        goto LABEL_263;
      }
    }
  }
  int v165 = -1;
LABEL_263:
  uint64_t v182 = **v543;
  unsigned int v183 = *((_DWORD *)*v543 + 2);
  LODWORD(v550) = v183 >> 8;
  if (v183 >> 8 > 0x40) {
    operator new[]();
  }
  if (v183 <= 0xFF) {
    unint64_t v184 = 0;
  }
  else {
    unint64_t v184 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v183) + 63);
  }
  uint64_t v549 = (void *)(v184 & v165);
  uint64_t v185 = (llvm::ConstantInt ***)llvm::ConstantInt::get(v182, (llvm::LLVMContext *)&v549, v163);
  if (v550 >= 0x41 && v549) {
    MEMORY[0x1D25D9CB0](v549, 0x1000C8000313F17);
  }
  uint64_t v543 = v185;
  unsigned int v186 = v544;
  __int16 v552 = 257;
  uint64_t v187 = (char *)operator new(0xA0uLL);
  uint64_t v188 = 0;
  unsigned int PrimitiveSizeInBits = (uint64_t ***)(v187 + 96);
  *((_DWORD *)v187 + 29) = *((_DWORD *)v187 + 29) & 0x38000000 | 3;
  do
  {
    uint64_t v189 = &v187[v188];
    *(void *)uint64_t v189 = 0;
    *((void *)v189 + 1) = 0;
    *((void *)v189 + 2) = 0;
    *((void *)v189 + 3) = PrimitiveSizeInBits;
    v188 += 32;
  }
  while (v188 != 96);
  uint64_t v178 = (llvm::InsertElementInst *)(v187 + 96);
  unsigned int v179 = (llvm::Value *)v130;
  int v180 = v186;
  uint64_t v181 = (llvm::Value *)v185;
LABEL_271:
  llvm::InsertElementInst::InsertElementInst(v178, v179, v180, v181, (const char **)&v549, 0);
LABEL_272:
  if (p_s1 != (char *)&v555) {
    free(p_s1);
  }
  if (PrimitiveSizeInBits) {
    goto LABEL_552;
  }
  uint64_t v190 = *((void *)a2 - 8);
  if (*(unsigned char *)(*((void *)a2 - 4) + 16) == 91) {
    uint64_t v191 = (llvm::ShuffleVectorInst *)*((void *)a2 - 4);
  }
  else {
    uint64_t v191 = 0;
  }
  if (v190)
  {
    if (*(unsigned char *)(v190 + 16) == 91)
    {
      if (llvm::ShuffleVectorInst::isIdentityWithPadding(*((llvm::ShuffleVectorInst **)a2 - 8)))
      {
        if (v191)
        {
          if (llvm::ShuffleVectorInst::isIdentityWithPadding(v191))
          {
            int v192 = *(uint64_t ***)(v190 - 64);
            uint64_t v193 = *((void *)v191 - 8);
            if (*v192 == *(uint64_t **)v193)
            {
              uint8x8_t v194 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(void *)a2 + 32));
              v194.i16[0] = vaddlv_u8(v194);
              if (v194.i32[0] == 1)
              {
                uint8x8_t v195 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(void *)v190 + 32));
                v195.i16[0] = vaddlv_u8(v195);
                if (v195.i32[0] == 1)
                {
                  uint8x8_t v196 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)*v192 + 8));
                  v196.i16[0] = vaddlv_u8(v196);
                  if (v196.i32[0] == 1)
                  {
                    unsigned int v197 = (*((unsigned char *)v192 + 16) - 11);
                    if (v197 >= 2)
                    {
                      if (v197 < 0xFD) {
                        goto LABEL_847;
                      }
                      p_s1 = (char *)v557;
                      uint64_t v554 = (uint64_t)v557;
                      uint64_t v555 = 8;
                      LODWORD(v556) = 0;
                      uint64_t v549 = v551;
                      uint64_t v550 = 0x800000000;
                      __s1 = &p_s1;
                      char v546 = (llvm::Type *)&v549;
                      BOOL v517 = 0;
                      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, (uint64_t)v192))
                      {
                        do
                        {
                          BOOL v517 = v550 == 0;
                          if (!v550) {
                            break;
                          }
                          uint64_t v477 = *((void *)v549 + v550 - 1);
                          LODWORD(v550) = v550 - 1;
                        }
                        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v477) & 1) != 0);
                      }
                      if (v549 != v551) {
                        free(v549);
                      }
                      if ((char *)v554 != p_s1) {
                        free((void *)v554);
                      }
                      if (!v517)
                      {
LABEL_847:
                        unsigned int v198 = (*(unsigned char *)(v193 + 16) - 11);
                        if (v198 >= 2)
                        {
                          if (v198 < 0xFD) {
                            goto LABEL_291;
                          }
                          p_s1 = (char *)v557;
                          uint64_t v554 = (uint64_t)v557;
                          uint64_t v555 = 8;
                          LODWORD(v556) = 0;
                          uint64_t v549 = v551;
                          uint64_t v550 = 0x800000000;
                          __s1 = &p_s1;
                          char v546 = (llvm::Type *)&v549;
                          BOOL v518 = 0;
                          if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v193))
                          {
                            do
                            {
                              BOOL v518 = v550 == 0;
                              if (!v550) {
                                break;
                              }
                              uint64_t v478 = *((void *)v549 + v550 - 1);
                              LODWORD(v550) = v550 - 1;
                            }
                            while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v478) & 1) != 0);
                          }
                          if (v549 != v551) {
                            free(v549);
                          }
                          if ((char *)v554 != p_s1) {
                            free((void *)v554);
                          }
                          if (!v518)
                          {
LABEL_291:
                            int v199 = *((_DWORD *)*v192 + 8);
                            int v200 = *(_DWORD *)(*(void *)v190 + 32);
                            uint64_t v201 = (unsigned int *)*((void *)a2 + 8);
                            uint64_t v202 = *((unsigned int *)a2 + 18);
                            p_s1 = (char *)&v555;
                            HIDWORD(v554) = 16;
                            if (v202 >= 0x11)
                            {
                              LODWORD(v554) = 0;
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            if (v202)
                            {
                              memset(&v555, 255, 4 * v202);
                              int v203 = &v555;
                              LODWORD(v554) = v202;
                              while (1)
                              {
                                unsigned int v205 = *v201++;
                                uint64_t v204 = v205;
                                if (v205 != -1)
                                {
                                  if ((int)v204 < v200)
                                  {
                                    if (*(_DWORD *)(*(void *)(v190 + 64) + 4 * v204) == -1) {
                                      goto LABEL_301;
                                    }
                                    goto LABEL_300;
                                  }
                                  if (*(_DWORD *)(*((void *)v191 + 8) + 4 * (v204 - v200)) != -1)
                                  {
                                    LODWORD(v204) = v199 - v200 + v204;
LABEL_300:
                                    *(_DWORD *)int v203 = v204;
                                  }
                                }
LABEL_301:
                                int v203 = (uint64_t *)((char *)v203 + 4);
                                if (!--v202) {
                                  goto LABEL_411;
                                }
                              }
                            }
                            LODWORD(v554) = 0;
LABEL_411:
                            unsigned int v260 = (char *)operator new(0xA8uLL);
                            *((_DWORD *)v260 + 21) = *((_DWORD *)v260 + 21) & 0x38000000 | 2;
                            unsigned int PrimitiveSizeInBits = (uint64_t ***)(v260 + 64);
                            *(void *)unsigned int v260 = 0;
                            *((void *)v260 + 1) = 0;
                            *((void *)v260 + 2) = 0;
                            *((void *)v260 + 3) = v260 + 64;
                            *((void *)v260 + 4) = 0;
                            *((void *)v260 + 5) = 0;
                            *((void *)v260 + 6) = 0;
                            *((void *)v260 + 7) = v260 + 64;
                            __int16 v552 = 257;
                            llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v260 + 8, v192, (uint64_t **)v193, p_s1, (llvm::Type *)v554, (const char **)&v549, 0);
                            int v261 = p_s1;
                            if (p_s1 == (char *)&v555) {
                              goto LABEL_552;
                            }
LABEL_412:
                            free(v261);
                            goto LABEL_552;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  unsigned int v298 = (*(unsigned char *)(v6 + 16) - 11);
  size_t v299 = v528;
  if (v298 < 2) {
    goto LABEL_846;
  }
  if (v298 >= 0xFD)
  {
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    BOOL v433 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v6))
    {
      do
      {
        BOOL v433 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v469 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v469) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 != p_s1) {
      free((void *)v554);
    }
    size_t v299 = v528;
    if (v433)
    {
LABEL_846:
      if (sub_1CCAC9E58(v10, __s2, v299, 5))
      {
        BOOL v434 = sub_1CCACA0B4((unsigned __int8 *)v10, (llvm::Type *)__s2, (llvm::Type *)v299);
        unsigned int PrimitiveSizeInBits = (uint64_t ***)sub_1CC9D3C84(a1, a2, v434);
        goto LABEL_552;
      }
    }
  }
  uint64_t v300 = __s2;
  int v301 = *__s2;
  unsigned int v302 = __s2[v299 - 1];
  BOOL v303 = v302 < *__s2 || v302 >= *(_DWORD *)(**((void **)a2 - 8) + 32);
  if (v303 || v302 - *__s2 != v299 - 1)
  {
LABEL_508:
    int v312 = 0;
    goto LABEL_509;
  }
  if (v299)
  {
    long long v304 = __s2;
    do
    {
      int v305 = *v304++;
      if (v301 != v305) {
        goto LABEL_508;
      }
      ++v301;
    }
    while (--v299);
  }
  unint64_t v306 = *(llvm::PoisonValue **)v10;
  unsigned int v504 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v10);
  unsigned int v495 = sub_1CB83544C(*(void *)(a1 + 80), *((void *)v306 + 3));
  if (v307 == 1) {
  uint64_t v481 = (llvm::Type *)*((unsigned int *)v306 + 8);
  }
  p_s1 = (char *)&v555;
  uint64_t v554 = 0x800000000;
  *(void *)__c = 0;
  int v532 = 0;
  int v533 = 0;
  int v308 = (void **)*((void *)a2 + 1);
  if (v308)
  {
    unsigned int v309 = 0;
    uint64_t v483 = (llvm::ValueAsMetadata *)((char *)v524 + 1960);
    unsigned int v310 = __s2;
    do
    {
      int v311 = v308[3];
      if (v311 && *((unsigned char *)v311 + 16) == 77 && v311[1])
      {
        if (v309 >= HIDWORD(v554)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)&p_s1[8 * v309] = v311;
        unsigned int v309 = v554 + 1;
        LODWORD(v554) = v554 + 1;
      }
      int v308 = (void **)v308[1];
    }
    while (v308);
    if (v309)
    {
      char v335 = 0;
      unint64_t v336 = (unsigned __int8 ***)p_s1;
      uint64_t v519 = (llvm::Value *)&p_s1[8 * v309];
      unsigned int v509 = (a2 >> 4) ^ (a2 >> 9);
      unint64_t v490 = (llvm::Instruction *)v10;
      while (1)
      {
        unsigned int v337 = *v310;
        unint64_t v525 = (llvm::ValueAsMetadata *)*v336;
        int v338 = **v336;
        unsigned int v340 = sub_1CB83544C(*(void *)(a1 + 80), (uint64_t)v338);
        if (v339 == 1) {
        unsigned int v310 = __s2;
        }
        if (!v340) {
          goto LABEL_621;
        }
        uint64_t v341 = (llvm::Type *)(v504 / v340);
        if (v341 * v340 != v504) {
          goto LABEL_621;
        }
        unsigned int v342 = v338[8];
        if (v342 > 0x14 || ((1 << v342) & 0x10A07F) == 0) {
          goto LABEL_621;
        }
        v344.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v338, v341);
        size_t __na = (size_t)v343;
        if (!(v337 * v495 % v340))
        {
          int v357 = v343;
          goto LABEL_586;
        }
        unsigned int v345 = (llvm::Type *)v551;
        uint64_t v549 = v551;
        HIDWORD(v550) = 16;
        unsigned int v346 = v481;
        if (v481 >= 0x11)
        {
          LODWORD(v550) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v481) {
          memset(v551, 255, 4 * (void)v481);
        }
        LODWORD(v550) = v481;
        uint64_t v347 = v551;
        unint64_t v348 = v528;
        if (v528)
        {
          do
          {
            *v347++ = v337++;
            --v348;
          }
          while (v348);
          unsigned int v346 = (llvm::Type *)v550;
        }
        uint64_t v485 = *(void *)(a1 + 24);
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          uint64_t v359 = 0;
          uint64_t v360 = &byte_1CFBCE98E;
          goto LABEL_583;
        }
        uint64_t v349 = ***(void ***)a2;
        uint64_t v350 = *(void *)(v349 + 152);
        uint64_t v351 = *(unsigned int *)(v349 + 168);
        if (!v351) {
          goto LABEL_581;
        }
        LODWORD(v352) = (v351 - 1) & v509;
        unsigned int v353 = (llvm::UndefValue **)(v350 + 16 * v352);
        __int16 v354 = *v353;
        if (*v353 != a2) {
          break;
        }
LABEL_582:
        uint64_t v358 = v353[1];
        uint64_t v361 = *(llvm::Type **)v358;
        uint64_t v360 = (char *)v358 + 16;
        uint64_t v359 = v361;
LABEL_583:
        __int16 v548 = 773;
        __s1 = v360;
        char v546 = v359;
        v547[0] = ".extract";
        uint64_t v362 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v490, v345);
        unint64_t v490 = sub_1CB935A74(v485, (uint64_t)v490, (uint64_t)v362, v551, v346, (uint64_t)&__s1);
        if (v549 != v551) {
          free(v549);
        }
        unsigned int v337 = 0;
        int v357 = (llvm *)__na;
LABEL_586:
        if (v533)
        {
          unsigned int v363 = (v533 - 1) & ((v357 >> 4) ^ (v357 >> 9));
          uint64_t v364 = *(llvm **)(*(void *)__c + 16 * v363);
          if (v357 == v364)
          {
LABEL_588:
            if (v363 != v533)
            {
              uint64_t v544 = v357;
              unint64_t v373 = (unsigned __int8 *)sub_1CCACB0BC((uint64_t)__c, (uint64_t *)&v544)[1];
              goto LABEL_611;
            }
          }
          else
          {
            int v397 = 1;
            while (v364 != (llvm *)-4096)
            {
              unsigned int v398 = v363 + v397++;
              unsigned int v363 = v398 & (v533 - 1);
              uint64_t v364 = *(llvm **)(*(void *)__c + 16 * v363);
              if (v357 == v364) {
                goto LABEL_588;
              }
            }
          }
        }
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          uint64_t v375 = 0;
          int v376 = &byte_1CFBCE98E;
          goto LABEL_599;
        }
        uint64_t v365 = ***(void ***)a2;
        uint64_t v366 = *(void *)(v365 + 152);
        uint64_t v367 = *(unsigned int *)(v365 + 168);
        if (!v367) {
          goto LABEL_597;
        }
        LODWORD(v368) = (v367 - 1) & v509;
        uint64_t v369 = (llvm::UndefValue **)(v366 + 16 * v368);
        uint64_t v370 = *v369;
        if (*v369 != a2)
        {
          int v371 = 1;
          while (v370 != (llvm::UndefValue *)-4096)
          {
            int v372 = v368 + v371++;
            uint64_t v368 = v372 & (v367 - 1);
            uint64_t v370 = *(llvm::UndefValue **)(v366 + 16 * v368);
            if (v370 == a2)
            {
              uint64_t v369 = (llvm::UndefValue **)(v366 + 16 * v368);
              goto LABEL_598;
            }
          }
LABEL_597:
          uint64_t v369 = (llvm::UndefValue **)(v366 + 16 * v367);
        }
LABEL_598:
        int v374 = v369[1];
        int v377 = *(llvm::Type **)v374;
        int v376 = (char *)v374 + 16;
        uint64_t v375 = v377;
LABEL_599:
        int64_t v378 = *(uint64_t **)(a1 + 24);
        __int16 v548 = 773;
        __s1 = v376;
        char v546 = v375;
        v547[0] = ".bc";
        unint64_t v373 = (unsigned __int8 *)v490;
        if (*(llvm **)v490 != v357)
        {
          if (*((unsigned __int8 *)v490 + 16) <= 0x14u)
          {
            unint64_t v373 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v378[9] + 224))(v378[9], 49, v344);
            if (v373) {
              BOOL v381 = v373[16] >= 0x1Cu;
            }
            else {
              BOOL v381 = 0;
            }
            if (v381)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v378[10] + 16))(v378[10], v373, &__s1, v378[6], v378[7]);
              uint64_t v399 = *((unsigned int *)v378 + 2);
              if (v399)
              {
                uint64_t v400 = *v378;
                uint64_t v487 = v400 + 16 * v399;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v373, *(_DWORD *)v400, *(llvm::MDNode **)(v400 + 8));
                  v400 += 16;
                }
                while (v400 != v487);
              }
            }
          }
          else
          {
            __int16 v552 = 257;
            unint64_t v373 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v490, (uint64_t)v357, (const char **)&v549, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v378[10] + 16))(v378[10], v373, &__s1, v378[6], v378[7]);
            uint64_t v379 = *((unsigned int *)v378 + 2);
            if (v379)
            {
              uint64_t v380 = *v378;
              uint64_t v486 = v380 + 16 * v379;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v373, *(_DWORD *)v380, *(llvm::MDNode **)(v380 + 8));
                v380 += 16;
              }
              while (v380 != v486);
            }
          }
          int v357 = (llvm *)__na;
        }
        uint64_t v549 = v357;
        sub_1CCACB0BC((uint64_t)__c, (uint64_t *)&v549)[1] = (uint64_t)v373;
LABEL_611:
        uint64_t v382 = *(void *)(a1 + 24);
        __int32 v383 = (unsigned __int8 *)llvm::ConstantInt::get(v483, v337 / (v340 / v495), 0);
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          uint64_t v393 = 0;
          uint64_t v394 = &byte_1CFBCE98E;
          goto LABEL_620;
        }
        uint64_t v384 = ***(void ***)a2;
        uint64_t v385 = *(void *)(v384 + 152);
        uint64_t v386 = *(unsigned int *)(v384 + 168);
        if (!v386) {
          goto LABEL_618;
        }
        LODWORD(v387) = (v386 - 1) & v509;
        uint64_t v388 = (llvm::UndefValue **)(v385 + 16 * v387);
        uint64_t v389 = *v388;
        if (*v388 != a2)
        {
          int v390 = 1;
          while (v389 != (llvm::UndefValue *)-4096)
          {
            int v391 = v387 + v390++;
            uint64_t v387 = v391 & (v386 - 1);
            uint64_t v389 = *(llvm::UndefValue **)(v385 + 16 * v387);
            if (v389 == a2)
            {
              uint64_t v388 = (llvm::UndefValue **)(v385 + 16 * v387);
              goto LABEL_619;
            }
          }
LABEL_618:
          uint64_t v388 = (llvm::UndefValue **)(v385 + 16 * v386);
        }
LABEL_619:
        uint64_t v392 = v388[1];
        uint64_t v395 = *(void *)v392;
        uint64_t v394 = (char *)v392 + 16;
        uint64_t v393 = v395;
LABEL_620:
        __int16 v552 = 773;
        uint64_t v549 = v394;
        uint64_t v550 = v393;
        v551[0] = ".extract";
        int v396 = sub_1CB8445F4(v382, v373, v383, (uint64_t)&v549);
        sub_1CC9D3C84(a1, v525, v396);
        char v335 = 1;
        unsigned int v310 = __s2;
LABEL_621:
        if (++v336 == (unsigned __int8 ***)v519)
        {
          uint64_t v432 = *(void *)__c;
          goto LABEL_705;
        }
      }
      int v355 = 1;
      while (v354 != (llvm::UndefValue *)-4096)
      {
        int v356 = v352 + v355++;
        uint64_t v352 = v356 & (v351 - 1);
        __int16 v354 = *(llvm::UndefValue **)(v350 + 16 * v352);
        if (v354 == a2)
        {
          unsigned int v353 = (llvm::UndefValue **)(v350 + 16 * v352);
          goto LABEL_582;
        }
      }
LABEL_581:
      unsigned int v353 = (llvm::UndefValue **)(v350 + 16 * v351);
      goto LABEL_582;
    }
  }
  uint64_t v432 = 0;
  char v335 = 0;
LABEL_705:
  MEMORY[0x1D25D9CD0](v432, 8);
  if (p_s1 != (char *)&v555) {
    free(p_s1);
  }
  int v312 = v335 & 1;
  uint64_t v300 = __s2;
LABEL_509:
  if (*(unsigned char *)(v10 + 16) == 91) {
    uint64_t v313 = v5;
  }
  else {
    uint64_t v313 = 0;
  }
  int v314 = *(unsigned __int8 *)(v6 + 16);
  if (v314 == 91) {
    uint64_t v315 = v6;
  }
  else {
    uint64_t v315 = 0;
  }
  if (!v313)
  {
LABEL_520:
    uint64_t v318 = 0;
    goto LABEL_521;
  }
  uint64_t v316 = *(void *)(v313 - 32);
  unsigned int v317 = (*(unsigned char *)(v316 + 16) - 11);
  uint64_t v318 = v10;
  if (v317 >= 2)
  {
    if (v317 < 0xFD)
    {
LABEL_518:
      unsigned int v319 = (v314 - 11);
      if (v319 < 2) {
        goto LABEL_735;
      }
      if (v319 >= 0xFD)
      {
        int v439 = v312;
        p_s1 = (char *)v557;
        uint64_t v554 = (uint64_t)v557;
        uint64_t v555 = 8;
        LODWORD(v556) = 0;
        uint64_t v549 = v551;
        uint64_t v550 = 0x800000000;
        __s1 = &p_s1;
        char v546 = (llvm::Type *)&v549;
        BOOL v440 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v6))
        {
          do
          {
            BOOL v440 = v550 == 0;
            if (!v550) {
              break;
            }
            uint64_t v473 = *((void *)v549 + v550 - 1);
            LODWORD(v550) = v550 - 1;
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v473) & 1) != 0);
        }
        if (v549 != v551) {
          free(v549);
        }
        if ((char *)v554 != p_s1) {
          free((void *)v554);
        }
        uint64_t v300 = __s2;
        int v312 = v439;
        if (v440)
        {
LABEL_735:
          uint64_t v318 = v313;
          goto LABEL_521;
        }
      }
      goto LABEL_520;
    }
    int v435 = v312;
    p_s1 = (char *)v557;
    uint64_t v554 = (uint64_t)v557;
    uint64_t v555 = 8;
    LODWORD(v556) = 0;
    uint64_t v549 = v551;
    uint64_t v550 = 0x800000000;
    __s1 = &p_s1;
    char v546 = (llvm::Type *)&v549;
    BOOL v436 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v316))
    {
      do
      {
        BOOL v436 = v550 == 0;
        if (!v550) {
          break;
        }
        uint64_t v471 = *((void *)v549 + v550 - 1);
        LODWORD(v550) = v550 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v471) & 1) != 0);
    }
    if (v549 != v551) {
      free(v549);
    }
    if ((char *)v554 == p_s1)
    {
      if (v436)
      {
LABEL_721:
        uint64_t v318 = v313;
        uint64_t v300 = __s2;
        int v312 = v435;
        goto LABEL_521;
      }
    }
    else
    {
      free((void *)v554);
      if (v436) {
        goto LABEL_721;
      }
    }
    LOBYTE(v314) = *(unsigned char *)(v6 + 16);
    uint64_t v300 = __s2;
    int v312 = v435;
    goto LABEL_518;
  }
LABEL_521:
  if (v315)
  {
    uint64_t v320 = *(void *)(v315 - 32);
    unsigned int v321 = (*(unsigned char *)(v320 + 16) - 11);
    if (v321 >= 2)
    {
      if (v321 < 0xFD) {
        goto LABEL_524;
      }
      int v437 = v312;
      p_s1 = (char *)v557;
      uint64_t v554 = (uint64_t)v557;
      uint64_t v555 = 8;
      LODWORD(v556) = 0;
      uint64_t v549 = v551;
      uint64_t v550 = 0x800000000;
      __s1 = &p_s1;
      char v546 = (llvm::Type *)&v549;
      BOOL v438 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v320))
      {
        do
        {
          BOOL v438 = v550 == 0;
          if (!v550) {
            break;
          }
          uint64_t v472 = *((void *)v549 + v550 - 1);
          LODWORD(v550) = v550 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v472) & 1) != 0);
      }
      if (v549 != v551) {
        free(v549);
      }
      if ((char *)v554 != p_s1) {
        free((void *)v554);
      }
      uint64_t v300 = __s2;
      int v312 = v437;
      if (!v438) {
LABEL_524:
      }
        uint64_t v315 = 0;
    }
  }
  int v322 = v527;
  if (!(v318 | v315)) {
    goto LABEL_549;
  }
  if (v318)
  {
    uint64_t v323 = *(llvm::UndefValue ***)(v318 - 64);
    size_t v324 = *(void *)(v318 - 32);
    int v325 = *((_DWORD *)*v323 + 8);
  }
  else
  {
    size_t v324 = 0;
    uint64_t v323 = 0;
    int v325 = 0;
  }
  if (v315)
  {
    size_t v326 = *(llvm::UndefValue ***)(v315 - 64);
    int v327 = *((_DWORD *)*v326 + 8);
  }
  else
  {
    size_t v326 = 0;
    int v327 = 0;
  }
  BOOL v328 = (llvm::ValueAsMetadata *)v6;
  if (v318)
  {
    unsigned int v329 = (*(unsigned char *)(v6 + 16) - 11);
    uint64_t v10 = (uint64_t)v323;
    BOOL v328 = (llvm::ValueAsMetadata *)v324;
    if (v329 >= 2)
    {
      if (v329 < 0xFD) {
        goto LABEL_535;
      }
      int v492 = v327;
      int v497 = v325;
      size_t __nc = v324;
      int v506 = v312;
      p_s1 = (char *)v557;
      uint64_t v554 = (uint64_t)v557;
      uint64_t v555 = 8;
      LODWORD(v556) = 0;
      uint64_t v549 = v551;
      uint64_t v550 = 0x800000000;
      __s1 = &p_s1;
      char v546 = (llvm::Type *)&v549;
      BOOL v441 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v6))
      {
        do
        {
          BOOL v441 = v550 == 0;
          if (!v550) {
            break;
          }
          uint64_t v474 = *((void *)v549 + v550 - 1);
          LODWORD(v550) = v550 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s1, v474) & 1) != 0);
      }
      if (v549 != v551) {
        free(v549);
      }
      if ((char *)v554 != p_s1) {
        free((void *)v554);
      }
      uint64_t v10 = (uint64_t)v323;
      size_t v324 = __nc;
      BOOL v328 = (llvm::ValueAsMetadata *)__nc;
      int v322 = v527;
      uint64_t v300 = __s2;
      int v312 = v506;
      int v325 = v497;
      int v327 = v492;
      if (!v441)
      {
LABEL_535:
        if (v325 == v322) {
          uint64_t v10 = (uint64_t)v323;
        }
        else {
          uint64_t v10 = v5;
        }
        BOOL v328 = (llvm::ValueAsMetadata *)v6;
      }
    }
  }
  if (v327 == v322 && v315 != 0) {
    BOOL v328 = (llvm::ValueAsMetadata *)v326;
  }
  if (v323 == v326)
  {
    unint64_t v331 = 0;
  }
  else
  {
    uint64_t v323 = (llvm::UndefValue **)v10;
    unint64_t v331 = (llvm::UndefValue **)v328;
  }
  if (v323 == (llvm::UndefValue **)v5 && v331 == (llvm::UndefValue **)v6)
  {
LABEL_549:
    if (v312) {
      unsigned int PrimitiveSizeInBits = (uint64_t ***)a2;
    }
    else {
      unsigned int PrimitiveSizeInBits = 0;
    }
    goto LABEL_552;
  }
  if (v323 == (llvm::UndefValue **)v5)
  {
    size_t v334 = 0;
    unint64_t v333 = 0;
  }
  else
  {
    unint64_t v333 = *(_DWORD **)(v318 + 64);
    size_t v334 = *(unsigned int *)(v318 + 72);
  }
  int v526 = v328;
  char v401 = 0;
  unsigned int v402 = 0;
  if (v315 && v331 != (llvm::UndefValue **)v6)
  {
    unsigned int v402 = *(_DWORD **)(v315 + 64);
    char v401 = (llvm::ConstantInt *)*(unsigned int *)(v315 + 72);
  }
  if (v323 == (llvm::UndefValue **)v5) {
    int v403 = v322;
  }
  else {
    int v403 = v325;
  }
  __s1 = v547;
  char v546 = (llvm::Type *)0x1000000000;
  if (!v530) {
    goto LABEL_691;
  }
  uint64_t v404 = 0;
  int v405 = (char *)v557;
  int64_t v406 = v551;
  char v407 = 1;
  uint64_t v408 = 0x800000000;
  int v409 = -1;
  uint64_t v410 = v530;
  do
  {
    uint64_t v411 = v300[v404];
    if ((v411 & 0x80000000) != 0)
    {
LABEL_650:
      LODWORD(v411) = -1;
      goto LABEL_674;
    }
    if ((int)v411 >= v322)
    {
      unsigned int v412 = (*(unsigned char *)(v6 + 16) - 11);
      if (v412 < 2)
      {
        int v413 = -1;
LABEL_656:
        BOOL v415 = v323 == v331 || v331 == 0 || v413 < 0;
        if (v415) {
          int v416 = 0;
        }
        else {
          int v416 = v403;
        }
        LODWORD(v411) = v416 + v413;
        goto LABEL_666;
      }
      if (v412 < 0xFD)
      {
LABEL_653:
        int v413 = v411 - v322;
        if (v331 != (llvm::UndefValue **)v6)
        {
          int v413 = v402[v413];
          if (v413 >= v327) {
            int v413 = -1;
          }
        }
        goto LABEL_656;
      }
      size_t __len = v334;
      uint64_t v482 = v402;
      unsigned int v484 = v401;
      unint64_t v488 = v333;
      int v491 = v327;
      int v496 = v325;
      size_t __nb = v324;
      int v505 = v312;
      p_s1 = v405;
      uint64_t v554 = (uint64_t)v405;
      uint64_t v479 = v405;
      uint64_t v555 = 8;
      LODWORD(v556) = 0;
      int v510 = v406;
      uint64_t v549 = v406;
      __b = (void *)v408;
      uint64_t v550 = v408;
      *(void *)__c = &p_s1;
      int v532 = &v549;
      BOOL v420 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)__c, v6))
      {
        do
        {
          BOOL v420 = v550 == 0;
          if (!v550) {
            break;
          }
          uint64_t v421 = *((void *)v549 + v550 - 1);
          LODWORD(v550) = v550 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)__c, v421) & 1) != 0);
      }
      if (v549 != v510) {
        free(v549);
      }
      if ((char *)v554 == p_s1)
      {
        if (v420)
        {
LABEL_683:
          int v413 = -1;
          uint64_t v408 = (uint64_t)__b;
          uint64_t v300 = __s2;
          uint64_t v410 = v530;
          int v322 = v527;
          int v312 = v505;
          int v405 = v479;
          size_t v324 = __nb;
          int v325 = v496;
          int v327 = v491;
          char v401 = v484;
          unint64_t v333 = v488;
          size_t v334 = __len;
          unsigned int v402 = v482;
          int64_t v406 = v510;
          goto LABEL_656;
        }
      }
      else
      {
        free((void *)v554);
        if (v420) {
          goto LABEL_683;
        }
      }
      uint64_t v300 = __s2;
      uint64_t v410 = v530;
      LODWORD(v411) = __s2[v404];
      uint64_t v408 = (uint64_t)__b;
      int v322 = v527;
      int v312 = v505;
      int v405 = v479;
      size_t v324 = __nb;
      int v325 = v496;
      int v327 = v491;
      char v401 = v484;
      unint64_t v333 = v488;
      size_t v334 = __len;
      unsigned int v402 = v482;
      int64_t v406 = v510;
      goto LABEL_653;
    }
    if (v323 != (llvm::UndefValue **)v5)
    {
      LODWORD(v411) = v333[v411];
      if ((int)v411 >= v325 && *(unsigned __int8 *)(v324 + 16) - 11 < 2) {
        goto LABEL_650;
      }
LABEL_666:
      if ((v411 & 0x80000000) != 0) {
        goto LABEL_674;
      }
    }
    BOOL v418 = v409 < 0 || v409 == v411;
    v407 &= v418;
    int v409 = v411;
LABEL_674:
    if (v546 >= (unint64_t)HIDWORD(v546)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)__s1 + v546) = v411;
    uint64_t v419 = (llvm::ConstantInt *)(v546 + 1);
    LODWORD(v546) = v546 + 1;
    ++v404;
  }
  while (v404 != v410);
  if ((v407 & 1) == 0)
  {
    if (v334 != v419) {
      goto LABEL_848;
    }
    int v424 = v312;
    unint64_t v425 = v401;
    uint64_t v426 = v402;
    int v427 = memcmp(__s1, v333, 4 * v334);
    unsigned int v402 = v426;
    char v401 = v425;
    int v312 = v424;
    uint64_t v300 = __s2;
    if (v427)
    {
LABEL_848:
      if (v401 != v419 || (v428 = v312, v429 = memcmp(__s1, v402, 4 * (void)v401), v312 = v428, uint64_t v300 = __s2, v429))
      {
        if (v528 != v419
          || (v430 = v312, v431 = memcmp(__s1, v300, 4 * (void)v419), int v312 = v430, v431))
        {
          if (v312) {
            unsigned int PrimitiveSizeInBits = (uint64_t ***)a2;
          }
          else {
            unsigned int PrimitiveSizeInBits = 0;
          }
          goto LABEL_694;
        }
      }
    }
  }
LABEL_691:
  BOOL v422 = (uint64_t **)v526;
  if (!v331) {
    BOOL v422 = (uint64_t **)llvm::UndefValue::get(*v323, (llvm::Type *)v333);
  }
  unint64_t v423 = (char *)operator new(0xA8uLL);
  *((_DWORD *)v423 + 21) = *((_DWORD *)v423 + 21) & 0x38000000 | 2;
  unsigned int PrimitiveSizeInBits = (uint64_t ***)(v423 + 64);
  *(void *)unint64_t v423 = 0;
  *((void *)v423 + 1) = 0;
  *((void *)v423 + 2) = 0;
  *((void *)v423 + 3) = v423 + 64;
  *((void *)v423 + 4) = 0;
  *((void *)v423 + 5) = 0;
  *((void *)v423 + 6) = 0;
  *((void *)v423 + 7) = v423 + 64;
  v557[0] = 257;
  llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v423 + 8, (uint64_t **)v323, v422, __s1, (llvm::Type *)v546, (const char **)&p_s1, 0);
LABEL_694:
  if (__s1 != v547) {
    free(__s1);
  }
LABEL_552:
  if (v537 >= 0x41 && v536) {
    MEMORY[0x1D25D9CB0](v536, 0x1000C8000313F17);
  }
  return (llvm::UndefValue **)PrimitiveSizeInBits;
}

uint64_t sub_1CCAC9E58(uint64_t a1, __int32 *a2, size_t a3, int a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 < 0x15) {
    return 1;
  }
  uint64_t v9 = a1;
  while (1)
  {
    if (v4 < 0x1C) {
      return 0;
    }
    uint64_t v10 = *(void *)(v9 + 8);
    if (!v10) {
      return 0;
    }
    uint64_t result = 0;
    if (!a4 || *(void *)(v10 + 8)) {
      return result;
    }
    uint64_t v11 = v4 - 41;
    if (v11 > 0x31) {
      return 0;
    }
    if (v11 != 49) {
      break;
    }
    int v12 = *(_DWORD *)(v9 + 20);
    if ((v12 & 0x40000000) != 0) {
      uint64_t v13 = *(void *)(v9 - 8);
    }
    else {
      uint64_t v13 = v9 - 32 * (v12 & 0x7FFFFFF);
    }
    uint64_t result = 0;
    uint64_t v14 = *(void *)(v13 + 64);
    if (!v14 || *(unsigned char *)(v14 + 16) != 16) {
      return result;
    }
    unint64_t v15 = (void *)(v14 + 24);
    uint64_t v16 = *(unsigned int *)(v14 + 32);
    if (v16 >= 0x41)
    {
      int v17 = 0;
      int64_t v18 = (unint64_t)(v16 + 63) >> 6;
      do
      {
        if (v18-- < 1) {
          break;
        }
        unint64_t v20 = *(void *)(*v15 + 8 * v18);
        v17 += __clz(v20);
      }
      while (!v20);
      int v21 = v16 | 0xFFFFFFC0;
      if ((v16 & 0x3F) == 0) {
        int v21 = 0;
      }
      if ((v16 - v17 - v21) > 0x40)
      {
        int v22 = -1;
        if (a3) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
      unint64_t v15 = (void *)*v15;
    }
    int v22 = *(_DWORD *)v15;
    if (a3)
    {
LABEL_26:
      char v23 = 0;
      uint64_t v24 = a2;
      uint64_t v25 = a3;
      do
      {
        int v27 = *v24++;
        int v26 = v27;
        if (v27 == v22 && (v23 & 1) != 0) {
          return 0;
        }
        v23 |= v26 == v22;
      }
      while (--v25);
    }
LABEL_30:
    if ((v12 & 0x40000000) != 0) {
      int v28 = *(uint64_t **)(v9 - 8);
    }
    else {
      int v28 = (uint64_t *)(v9 - 32 * (v12 & 0x7FFFFFF));
    }
    uint64_t v9 = *v28;
    --a4;
    unsigned int v4 = *(unsigned __int8 *)(*v28 + 16);
    uint64_t result = 1;
    if (v4 <= 0x14) {
      return result;
    }
  }
  if (((1 << v11) & 0x303FE23F93FLL) == 0)
  {
    uint64_t result = 0;
    if (((1 << v11) & 0x6C0) == 0) {
      return result;
    }
    uint64_t v36 = wmemchr(a2, -1, a3);
    int v37 = v36 ? v36 : &a2[a3];
    if (a3 != v37 - a2) {
      return 0;
    }
  }
  if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12 && a3 > *(unsigned int *)(*(void *)v9 + 32)) {
    return 0;
  }
  int v29 = *(_DWORD *)(v9 + 20);
  if ((v29 & 0x40000000) != 0)
  {
    uint64_t v31 = *(uint64_t **)(v9 - 8);
    uint64_t v30 = v29 & 0x7FFFFFF;
    if (!v30) {
      return 1;
    }
  }
  else
  {
    uint64_t v30 = v29 & 0x7FFFFFF;
    uint64_t v31 = (uint64_t *)(v9 - 32 * v30);
    if (!v30) {
      return 1;
    }
  }
  uint64_t v32 = (a4 - 1);
  uint64_t v33 = 32 * v30 - 32;
  do
  {
    uint64_t v34 = *v31;
    v31 += 4;
    uint64_t result = sub_1CCAC9E58(v34, a2, a3, v32);
    if (result) {
      BOOL v35 = v33 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    v33 -= 32;
  }
  while (!v35);
  return result;
}

llvm::UndefValue *sub_1CCACA0B4(unsigned __int8 *a1, llvm::Type *a2, llvm::Type *a3)
{
  unsigned int v4 = (int *)a2;
  uint64_t v5 = (uint64_t)a1;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(llvm::FixedVectorType **)a1;
  long long v7 = *(llvm::FixedVectorType **)a1;
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
    long long v7 = (llvm::FixedVectorType *)**((void **)v6 + 2);
  }
  unsigned int v8 = a1[16];
  unsigned int v9 = (v8 - 11);
  if (v9 < 2) {
    goto LABEL_83;
  }
  uint64_t v10 = **(void **)v6;
  if (v9 < 0xFD) {
    goto LABEL_5;
  }
  unsigned int v105 = v109;
  uint64_t v106 = (uint64_t)v109;
  uint64_t v107 = 8;
  int v108 = 0;
  v100[1] = (llvm::SmallPtrSetImplBase *)&v101;
  size_t v101 = v103;
  uint64_t v102 = 0x800000000;
  v100[0] = (llvm::SmallPtrSetImplBase *)&v105;
  BOOL v64 = 0;
  if (sub_1CC04C108(v100, (uint64_t)a1))
  {
    do
    {
      BOOL v64 = v102 == 0;
      if (!v102) {
        break;
      }
      uint64_t v99 = *((void *)v101 + v102 - 1);
      LODWORD(v102) = v102 - 1;
    }
    while ((sub_1CC04C108(v100, v99) & 1) != 0);
  }
  if (v101 != v103) {
    free(v101);
  }
  a1 = (unsigned __int8 *)v106;
  if ((void *)v106 == v105)
  {
    if (v64)
    {
LABEL_83:
      llvm::FixedVectorType::get(v7, a3);
      return llvm::UndefValue::get(v65, v66);
    }
  }
  else
  {
    free((void *)v106);
    if (v64) {
      goto LABEL_83;
    }
  }
  unsigned int v8 = *(unsigned __int8 *)(v5 + 16);
LABEL_5:
  if (v8 == 13)
  {
    llvm::FixedVectorType::get(v7, a3);
    return (llvm::UndefValue *)llvm::ConstantAggregateZero::get(v11, v12);
  }
  if (v8 <= 0x14)
  {
    uint64_t v16 = (llvm *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v5, a2);
    return (llvm::UndefValue *)llvm::ConstantExpr::getShuffleVector((llvm *)v5, v16, v4, a3, 0);
  }
  if (v8 != 90)
  {
    unsigned int v105 = &v107;
    uint64_t v106 = 0x800000000;
    int v17 = (llvm::Type *)*(unsigned int *)(*(void *)v5 + 32);
    char v18 = a3 != v17;
    int v19 = *(_DWORD *)(v5 + 20);
    if ((v19 & 0x7FFFFFF) != 0)
    {
      uint64_t v20 = 0;
      LODWORD(v21) = 0;
      uint64_t v22 = 32 * (v19 & 0x7FFFFFF);
      do
      {
        if ((v19 & 0x40000000) != 0) {
          uint64_t v23 = *(void *)(v5 - 8);
        }
        else {
          uint64_t v23 = v5 - 32 * (v19 & 0x7FFFFFF);
        }
        uint64_t v24 = *(unsigned __int8 **)(v23 + v20);
        if ((*(_DWORD *)(*(void *)v24 + 8) & 0xFE) == 0x12)
        {
          a1 = (unsigned __int8 *)sub_1CCACA0B4(v24, v4, a3);
          uint64_t v24 = a1;
          LODWORD(v21) = v106;
        }
        if (v21 >= HIDWORD(v106)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v105 + v21) = v24;
        uint64_t v21 = (v106 + 1);
        LODWORD(v106) = v106 + 1;
        int v19 = *(_DWORD *)(v5 + 20);
        if ((v19 & 0x40000000) != 0) {
          uint64_t v25 = *(void *)(v5 - 8);
        }
        else {
          uint64_t v25 = v5 - 32 * (v19 & 0x7FFFFFF);
        }
        v18 |= v24 != *(unsigned __int8 **)(v25 + v20);
        v20 += 32;
      }
      while (v22 != v20);
      if (v18)
      {
        uint64_t v26 = v21 - 1;
        int v27 = (uint64_t *)v105;
        unsigned int v8 = *(unsigned __int8 *)(v5 + 16);
        goto LABEL_39;
      }
    }
    else if (a3 != v17)
    {
      uint64_t v26 = -1;
      int v27 = &v107;
LABEL_39:
      switch(v8)
      {
        case ';':
        case '<':
        case '=':
        case '?':
        case '@':
        case 'A':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
          __break(1u);
          goto LABEL_106;
        case '>':
          uint64_t v69 = (uint64_t *)*v27;
          int v67 = v27 + 1;
          int v68 = v69;
          uint64_t v70 = *(void *)(v5 + 64);
          uint64_t v71 = (v26 + 1);
          __int16 v104 = 257;
          unint64_t v72 = (llvm::Value *)operator new(32 * v71 + 80);
          uint64_t v40 = (llvm::Value *)((char *)v72 + 32 * v71);
          *((_DWORD *)v40 + 5) = *((_DWORD *)v40 + 5) & 0x38000000 | v71 & 0x7FFFFFF;
          if (v26 != -1)
          {
            do
            {
              *(void *)unint64_t v72 = 0;
              *((void *)v72 + 1) = 0;
              *((void *)v72 + 2) = 0;
              *((void *)v72 + 3) = v40;
              unint64_t v72 = (llvm::Value *)((char *)v72 + 32);
            }
            while (v72 != v40);
          }
          sub_1CB845A7C(v70, v68, (uint64_t)v67, v26);
          *(void *)uint64_t v40 = v73;
          *((void *)v40 + 1) = 0;
          int v74 = *((_DWORD *)v40 + 5) & 0xC0000000 | v71 & 0x7FFFFFF;
          *((_DWORD *)v40 + 4) = 62;
          *((_DWORD *)v40 + 5) = v74;
          *(_OWORD *)((char *)v40 + 24) = 0u;
          int v75 = (char *)v40 + 24;
          *(_OWORD *)((char *)v40 + 40) = 0u;
          *((_DWORD *)v40 + 14) = 0;
          if (v5)
          {
            uint64_t v88 = *(void *)(v5 + 40);
            uint64_t v89 = (uint64_t *)(v5 + 24);
            *((void *)v40 + 5) = v88;
            *(_WORD *)(v88 + 18) &= ~0x8000u;
            if ((*((unsigned char *)v40 + 23) & 0x10) != 0)
            {
              uint64_t v97 = *(void *)(v88 + 56);
              if (v97)
              {
                unsigned int v98 = *(llvm::ValueSymbolTable **)(v97 + 104);
                if (v98) {
                  llvm::ValueSymbolTable::reinsertValue(v98, v40);
                }
              }
            }
            uint64_t v90 = *v89;
            *((void *)v40 + 3) = *v89;
            *((void *)v40 + 4) = v89;
            *(void *)(v90 + 8) = v75;
            uint64_t *v89 = (uint64_t)v75;
          }
          *((void *)v40 + 8) = v70;
          *((void *)v40 + 9) = llvm::GetElementPtrInst::getIndexedType(v70, (uint64_t)v67, v26);
          llvm::GetElementPtrInst::init((uint64_t ***)v40, (uint64_t **)v68, v67, v26, (const char **)&v101);
          char v45 = *((unsigned char *)v40 + 17) & 0xFD | *(unsigned char *)(v5 + 17) & 2;
          goto LABEL_48;
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
          a1 = *(unsigned __int8 **)v5;
          if ((*(_DWORD *)(*(void *)v5 + 8) & 0xFE) == 0x12) {
            a1 = (unsigned __int8 *)**((void **)a1 + 2);
          }
          uint64_t v59 = *(void *)*v27;
          a2 = (llvm::Type *)*(unsigned int *)(v59 + 32);
          if (*(unsigned char *)(v59 + 8) == 19) {
LABEL_106:
          }
            llvm::ScalableVectorType::get((uint64_t **)a1, a2);
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)a1, a2);
          }
          uint64_t v61 = v60;
          int v62 = *(unsigned __int8 *)(v5 + 16) - 28;
          unsigned int v63 = (void *)*v27;
          __int16 v104 = 257;
          uint64_t v40 = llvm::CastInst::Create(v62, (uint64_t)v63, v61, (const char **)&v101, v5);
          goto LABEL_76;
        case 'Q':
          char v76 = operator new(0x80uLL);
          uint64_t v40 = (llvm::Value *)(v76 + 16);
          v76[21] = v76[21] & 0x38000000 | 2;
          *(void *)char v76 = 0;
          *((void *)v76 + 1) = 0;
          *((void *)v76 + 2) = 0;
          *((void *)v76 + 3) = v76 + 16;
          *((void *)v76 + 4) = 0;
          *((void *)v76 + 5) = 0;
          *((void *)v76 + 6) = 0;
          *((void *)v76 + 7) = v76 + 16;
          __int16 v77 = *(_WORD *)(v5 + 18) & 0x3F;
          int v79 = (void *)*v27;
          uint64_t v78 = v27[1];
          __int16 v104 = 257;
          int v80 = (void **)*v79;
          uint64_t v81 = **(void **)*v79 + 1888;
          if (*v79 && (v80[1] & 0xFE) == 0x12)
          {
            uint64_t v91 = (uint64_t **)(**(void **)*v79 + 1888);
            uint64_t v92 = (llvm::Type *)*((unsigned int *)v80 + 8);
            if (*((_DWORD *)v80 + 2) == 19) {
              llvm::ScalableVectorType::get(v91, v92);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v91, v92);
            }
            uint64_t v81 = v93;
          }
          llvm::CmpInst::CmpInst(v40, v81, 53, v77, (uint64_t)v79, v78, (const char **)&v101, v5, 0);
          goto LABEL_76;
        case 'R':
          uint64_t v82 = operator new(0x80uLL);
          uint64_t v40 = (llvm::Value *)(v82 + 16);
          v82[21] = v82[21] & 0x38000000 | 2;
          *(void *)uint64_t v82 = 0;
          *((void *)v82 + 1) = 0;
          *((void *)v82 + 2) = 0;
          *((void *)v82 + 3) = v82 + 16;
          *((void *)v82 + 4) = 0;
          *((void *)v82 + 5) = 0;
          *((void *)v82 + 6) = 0;
          *((void *)v82 + 7) = v82 + 16;
          __int16 v83 = *(_WORD *)(v5 + 18) & 0x3F;
          uint64_t v85 = (void *)*v27;
          uint64_t v84 = v27[1];
          __int16 v104 = 257;
          int v86 = (void **)*v85;
          uint64_t v87 = **(void **)*v85 + 1888;
          if (*v85 && (v86[1] & 0xFE) == 0x12)
          {
            uint64_t v94 = (uint64_t **)(**(void **)*v85 + 1888);
            uint64_t v95 = (llvm::Type *)*((unsigned int *)v86 + 8);
            if (*((_DWORD *)v86 + 2) == 19) {
              llvm::ScalableVectorType::get(v94, v95);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v94, v95);
            }
            uint64_t v87 = v96;
          }
          llvm::CmpInst::CmpInst(v40, v87, 54, v83, (uint64_t)v85, v84, (const char **)&v101, v5, 0);
          goto LABEL_76;
        default:
          int v37 = (void *)*v27;
          uint64_t v38 = v27[1];
          __int16 v104 = 257;
          uint64_t v39 = llvm::BinaryOperator::Create(v8 - 28, v37, v38, (const char **)&v101, v5);
          uint64_t v40 = v39;
          unsigned int v41 = *(unsigned __int8 *)(v5 + 16);
          HIDWORD(v43) = v41 - 41;
          LODWORD(v43) = v41 - 41;
          unsigned int v42 = v43 >> 1;
          if (v42 <= 6 && ((1 << v42) & 0x47) != 0)
          {
            int v44 = *((unsigned char *)v39 + 17) & 0xFD | (2 * ((*(unsigned __int8 *)(v5 + 17) >> 1) & 1));
            *((unsigned char *)v39 + 17) = v44;
            *((unsigned char *)v39 + 17) = v44 & 0xFB | *(unsigned char *)(v5 + 17) & 4;
            unsigned int v41 = *(unsigned __int8 *)(v5 + 16);
          }
          if (v41 <= 0x37 && ((1 << v41) & 0xC1800000000000) != 0) {
            *((unsigned char *)v39 + 17) = *((unsigned char *)v39 + 17) & 0xFD | *(unsigned char *)(v5 + 17) & 2;
          }
          if (!sub_1CB845E74(v5)) {
            goto LABEL_76;
          }
          char v45 = *(unsigned char *)(v5 + 17) & 0xFE | *((unsigned char *)v40 + 17) & 1;
LABEL_48:
          *((unsigned char *)v40 + 17) = v45;
          break;
      }
      goto LABEL_76;
    }
    uint64_t v40 = (llvm::Value *)v5;
LABEL_76:
    if (v105 != &v107) {
      free(v105);
    }
    return v40;
  }
  int v14 = *(_DWORD *)(v5 + 20);
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v15 = v5 - 32 * (v14 & 0x7FFFFFF);
  }
  uint64_t v28 = *(void *)(v15 + 64);
  int v29 = (void *)(v28 + 24);
  uint64_t v30 = *(unsigned int *)(v28 + 32);
  if (v30 < 0x41) {
    goto LABEL_51;
  }
  int v31 = 0;
  int64_t v32 = (unint64_t)(v30 + 63) >> 6;
  do
  {
    if (v32-- < 1) {
      break;
    }
    unint64_t v34 = *(void *)(*v29 + 8 * v32);
    v31 += __clz(v34);
  }
  while (!v34);
  int v35 = v30 | 0xFFFFFFC0;
  if ((v30 & 0x3F) == 0) {
    int v35 = 0;
  }
  if ((v30 - v31 - v35) <= 0x40)
  {
    int v29 = (void *)*v29;
LABEL_51:
    int v36 = *(_DWORD *)v29;
    goto LABEL_52;
  }
  int v36 = -1;
LABEL_52:
  if (!a3)
  {
LABEL_56:
    if ((v14 & 0x40000000) != 0) {
      uint64_t v48 = *(void **)(v5 - 8);
    }
    else {
      uint64_t v48 = (void *)(v5 - 32 * (v14 & 0x7FFFFFF));
    }
    return (llvm::UndefValue *)sub_1CCACA0B4(*v48, v4, a3);
  }
  unint64_t v46 = 0;
  uint64_t v47 = (llvm::ConstantInt *)(v10 + 1960);
  while (v4[v46] != v36)
  {
    if (a3 == ++v46) {
      goto LABEL_56;
    }
  }
  if ((v14 & 0x40000000) != 0) {
    unsigned int v50 = *(void **)(v5 - 8);
  }
  else {
    unsigned int v50 = (void *)(v5 - 32 * (v14 & 0x7FFFFFF));
  }
  int v51 = (llvm::Value *)sub_1CCACA0B4(*v50, v4, a3);
  int v52 = *(_DWORD *)(v5 + 20);
  if ((v52 & 0x40000000) != 0) {
    uint64_t v53 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v53 = v5 - 32 * (v52 & 0x7FFFFFF);
  }
  unsigned int v54 = *(llvm::Value **)(v53 + 32);
  BOOL v55 = (llvm::Value *)llvm::ConstantInt::get(v47, v46, 0);
  v109[0] = 257;
  unint64_t v56 = operator new(0xA0uLL);
  uint64_t v57 = 0;
  uint64_t v40 = (llvm::Value *)(v56 + 24);
  v56[29] = v56[29] & 0x38000000 | 3;
  do
  {
    unsigned int v58 = &v56[v57];
    *unsigned int v58 = 0;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v40;
    v57 += 8;
  }
  while (v57 != 24);
  llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v56 + 24), v51, v54, v55, (const char **)&v105, (llvm::Instruction *)v5);
  return v40;
}

uint64_t sub_1CCACA9E8(unsigned char *a1, unsigned char *a2, unsigned char *a3, char **a4)
{
  v44[8] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(unsigned int *)(*(void *)a1 + 32);
  unsigned int v7 = (a1[16] - 11);
  if (v7 < 2) {
    goto LABEL_45;
  }
  if (v7 < 0xFD) {
    goto LABEL_3;
  }
  int v37 = v41;
  uint64_t v38 = v41;
  uint64_t v39 = 8;
  int v40 = 0;
  unsigned int v42 = v44;
  uint64_t v43 = 0x800000000;
  v36[0] = (llvm::SmallPtrSetImplBase *)&v37;
  v36[1] = (llvm::SmallPtrSetImplBase *)&v42;
  BOOL v29 = 0;
  if (sub_1CC04C108(v36, (uint64_t)a1))
  {
    do
    {
      BOOL v29 = v43 == 0;
      if (!v43) {
        break;
      }
      uint64_t v35 = *((void *)v42 + v43 - 1);
      LODWORD(v43) = v43 - 1;
    }
    while ((sub_1CC04C108(v36, v35) & 1) != 0);
  }
  if (v42 != v44) {
    free(v42);
  }
  if (v38 == v37)
  {
    if (v29)
    {
LABEL_45:
      if (*((_DWORD *)a4 + 3) < v6)
      {
        *((_DWORD *)a4 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v30 = *a4;
      unsigned int v33 = *((_DWORD *)a4 + 2);
      int64_t v32 = a4 + 1;
      unint64_t v31 = v33;
      if (v33 >= v6) {
        unint64_t v34 = v6;
      }
      else {
        unint64_t v34 = v31;
      }
      if (v34)
      {
        memset(v30, 255, 4 * v34);
        unint64_t v31 = *v32;
      }
      if (v6 > v31) {
        memset(&v30[4 * v31], 255, 4 * (v6 - v31));
      }
      *int64_t v32 = v6;
      return 1;
    }
  }
  else
  {
    free(v38);
    if (v29) {
      goto LABEL_45;
    }
  }
LABEL_3:
  if (a1 == a2)
  {
    if (v6)
    {
      int v19 = 0;
      unsigned int v20 = *((_DWORD *)a4 + 2);
      do
      {
        if (v20 >= *((_DWORD *)a4 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&(*a4)[4 * v20] = v19;
        unsigned int v20 = *((_DWORD *)a4 + 2) + 1;
        *((_DWORD *)a4 + 2) = v20;
        ++v19;
      }
      while (v6 != v19);
    }
  }
  else
  {
    if (a1 != a3)
    {
      if (a1[16] != 90)
      {
        int v23 = 0;
        return v4 & v23;
      }
      uint64_t v11 = *((void *)a1 - 4);
      if (*(unsigned char *)(v11 + 16) != 16)
      {
        int v4 = 0;
        goto LABEL_27;
      }
      uint64_t v12 = *((void *)a1 - 12);
      uint64_t v13 = *((void *)a1 - 8);
      int v14 = (void *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u) {
        int v14 = (void *)*v14;
      }
      uint64_t v15 = (void *)*v14;
      int v16 = *(unsigned __int8 *)(v13 + 16);
      if ((v16 - 11) > 1)
      {
        if (v16 == 89)
        {
          uint64_t v24 = *(void *)(v13 - 32);
          if (*(unsigned char *)(v24 + 16) == 16)
          {
            uint64_t v25 = (void *)(v24 + 24);
            if (*(_DWORD *)(v24 + 32) >= 0x41u) {
              uint64_t v25 = (void *)*v25;
            }
            int v18 = *(_DWORD *)v25;
            int v26 = *(_DWORD *)(*(void *)a2 + 32);
            int v27 = *(unsigned char **)(v13 - 64);
            if (v27 == a2 || v27 == a3)
            {
              if (sub_1CCACA9E8(v12, a2, a3, a4))
              {
                if (*(unsigned char **)(v13 - 64) != a2) {
                  v18 += v26;
                }
                uint64_t v17 = v15 % v6;
                goto LABEL_12;
              }
            }
          }
        }
      }
      else if (sub_1CCACA9E8(v12, a2, a3, a4))
      {
        uint64_t v17 = v15;
        int v18 = -1;
LABEL_12:
        *(_DWORD *)&(*a4)[4 * v17] = v18;
        int v4 = 1;
LABEL_27:
        int v23 = 1;
        return v4 & v23;
      }
      int v23 = 0;
      int v4 = 1;
      return v4 & v23;
    }
    if (v6)
    {
      int v21 = 0;
      unsigned int v22 = *((_DWORD *)a4 + 2);
      do
      {
        if (v22 >= *((_DWORD *)a4 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&(*a4)[4 * v22] = v6 + v21;
        unsigned int v22 = *((_DWORD *)a4 + 2) + 1;
        *((_DWORD *)a4 + 2) = v22;
        ++v21;
      }
      while (v6 != v21);
    }
  }
  return 1;
}

uint64_t sub_1CCACADAC(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 90) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    **a1 = v4;
    int v5 = *(_DWORD *)(a2 + 20);
    if ((v5 & 0x40000000) != 0) {
      uint64_t v6 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v6 = a2 - 32 * (v5 & 0x7FFFFFF);
    }
    uint64_t v7 = *(void *)(v6 + 64);
    if (v7) {
      BOOL v8 = *(unsigned char *)(v7 + 16) == 16;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      return 0;
    }
    unsigned int v9 = (void *)(v7 + 24);
    uint64_t v10 = *(unsigned int *)(v7 + 32);
    if (v10 < 0x41) {
      goto LABEL_15;
    }
    int v12 = 0;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    do
    {
      if (v13-- < 1) {
        break;
      }
      unint64_t v15 = *(void *)(*v9 + 8 * v13);
      v12 += __clz(v15);
    }
    while (!v15);
    uint64_t v4 = 0;
    int v16 = v10 | 0xFFFFFFC0;
    if ((v10 & 0x3F) == 0) {
      int v16 = 0;
    }
    if ((v10 - v12 - v16) <= 0x40)
    {
      unsigned int v9 = (void *)*v9;
LABEL_15:
      *a1[2] = *v9;
      return 1;
    }
  }
  return v4;
}

uint64_t sub_1CCACAE8C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 90) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  uint64_t v3 = (v2 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v2 & 0x7FFFFFF);
  uint64_t v4 = *(void *)(v3 + 32);
  if (!v4) {
    return 0;
  }
  **(void **)(a1 + 8) = v4;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 64);
  if (!v7 || *(unsigned char *)(v7 + 16) != 16) {
    return 0;
  }
  **(void **)(a1 + 16) = v7;
  return 1;
}

void *sub_1CCACAF04(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = *a1 >> 1;
  if (*a1) {
    unsigned int v4 = 4;
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v7 = (uint64_t)a1;
  sub_1CD68CF10((uint64_t)a1, v4);
  BOOL v8 = 0;
  sub_1CC056A94(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CCACAFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 64);
  if (v4)
  {
    **(void **)a1 = v4;
    uint64_t v4 = *(void *)(a2 - 32);
    if (v4 && *(unsigned __int8 *)(v4 + 16) <= 0x14u)
    {
      unsigned int v9 = *(void **)(a1 + 8);
LABEL_16:
      void *v9 = v4;
      return 1;
    }
  }
  uint64_t v6 = a1 + 16;
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 43)
  {
    uint64_t result = sub_1CBF535C4(v6, *(llvm::Constant **)(a2 - 64));
    if (result)
    {
      uint64_t v4 = *(void *)(a2 - 32);
      if (v4)
      {
        unsigned int v9 = *(void **)(a1 + 24);
        goto LABEL_16;
      }
      return 0;
    }
  }
  else
  {
    if (v7 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 15
        && sub_1CC03F414(v6, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))
      {
        uint64_t v4 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        if (v4)
        {
          **(void **)(a1 + 24) = v4;
          LOBYTE(v4) = 1;
        }
      }
      else
      {
        LOBYTE(v4) = 0;
      }
    }
    return (v7 == 5) & v4;
  }
  return result;
}

uint64_t *sub_1CCACB0BC(uint64_t a1, uint64_t *a2)
{
  BOOL v8 = 0;
  char v4 = sub_1CCACB19C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_5;
    }
  }
  else
  {
    v7 *= 2;
  }
  sub_1CCACB230(a1, v7);
  BOOL v8 = 0;
  sub_1CCACB19C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CCACB19C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v6 = a2 - 1;
    unsigned int v7 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    char v4 = (void *)(a1 + 16 * v7);
    uint64_t v8 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      unsigned int v9 = 0;
      int v10 = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v9 = v4;
        }
        unsigned int v13 = v7 + v10++;
        unsigned int v7 = v13 & v6;
        char v4 = (void *)(a1 + 16 * (v13 & v6));
        uint64_t v8 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_8;
        }
      }
      uint64_t v5 = 0;
      if (v9) {
        char v4 = v9;
      }
    }
  }
  else
  {
    char v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_8:
  *a4 = v4;
  return v5;
}

void *sub_1CCACB230(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD68D1C0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::getAddressSanitizerParams(llvm *this, const llvm::Triple *a2, int a3, void *a4, unint64_t *a5, int *a6, BOOL *a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t result = sub_1CCACB368((uint64_t)&v11, this, (int)a2, a3);
  *a4 = v12;
  *(_DWORD *)a5 = v11;
  *(unsigned char *)a6 = v13;
  return result;
}

uint64_t sub_1CCACB368(uint64_t result, llvm::Triple *a2, int a3, int a4)
{
  uint64_t v4 = result;
  int v6 = *((_DWORD *)a2 + 9);
  int v5 = *((_DWORD *)a2 + 10);
  BOOL v8 = v6 == 7 || v6 == 28 || (v6 - 29) < 3;
  if ((v6 & 0xFFFFFFFE) == 0x20) {
    BOOL v8 = 1;
  }
  int v9 = *((_DWORD *)a2 + 6);
  BOOL v12 = v9 == 42 && *((_DWORD *)a2 + 8) == 3 && v6 == 25;
  BOOL v14 = (v9 - 1) < 2 || (v9 - 39) < 2;
  char v15 = 3;
  *(_DWORD *)uint64_t result = 3;
  if (word_1EA61C6B0)
  {
    char v15 = dword_1EA61C728;
    *(_DWORD *)uint64_t result = dword_1EA61C728;
  }
  unsigned int v16 = v9 & 0xFFFFFFFE;
  if (a3 != 32)
  {
    if (v6 == 6) {
      goto LABEL_30;
    }
    if ((v9 - 23) <= 1)
    {
LABEL_34:
      unint64_t v17 = 0x100000000000;
      goto LABEL_74;
    }
    if (v9 == 36)
    {
      unint64_t v17 = 0x10000000000000;
      goto LABEL_74;
    }
    if (v6 != 5 || v16 == 18)
    {
      if (v6 != 12)
      {
        if (v12)
        {
          unint64_t v17 = 0x10000000000;
          goto LABEL_74;
        }
        if (v6 == 9 && v9 == 42)
        {
          if (a4)
          {
            uint64_t v18 = 0xFC0000000000;
            goto LABEL_51;
          }
        }
        else
        {
          if (v6 == 15 && v9 == 42) {
            goto LABEL_28;
          }
          if (v16 == 18)
          {
            unint64_t v17 = 0x2000000000;
            goto LABEL_74;
          }
          if (v8 || (v6 & 0xFFFFFFF7) == 3 && v9 == 3) {
            goto LABEL_28;
          }
          if (v9 == 3)
          {
            unint64_t v17 = 0x1000000000;
            goto LABEL_74;
          }
          if (v9 != 25 && v9 != 30)
          {
            if (v9 == 32)
            {
              unint64_t v17 = 0xD55550000;
              goto LABEL_74;
            }
            goto LABEL_34;
          }
        }
        unint64_t v17 = (-4096 << v15) & 0x7FFFF000;
        goto LABEL_74;
      }
      if (a4)
      {
        uint64_t v18 = 0x900000000000;
        goto LABEL_51;
      }
    }
    else if (a4)
    {
      uint64_t v18 = 0xF7C000000000;
LABEL_51:
      unint64_t v17 = v18 & 0xFFFFFFFFFFFFLL | 0xDFFF000000000000;
      goto LABEL_74;
    }
    unint64_t v17 = 0x400000000000;
    goto LABEL_74;
  }
  if (v5 != 11)
  {
    if (v16 == 16)
    {
      unint64_t v17 = 178913280;
      goto LABEL_74;
    }
    if (v6 == 5 || v6 == 12)
    {
      unint64_t v17 = 0x40000000;
      goto LABEL_74;
    }
    if (!v8)
    {
      if (v6 == 15)
      {
        unint64_t v17 = 805306368;
        goto LABEL_74;
      }
      if (v6 != 40)
      {
        unint64_t v17 = 0x20000000;
        goto LABEL_74;
      }
LABEL_30:
      unint64_t v17 = 0;
      *(void *)(result + 8) = 0;
      goto LABEL_75;
    }
  }
LABEL_28:
  unint64_t v17 = -1;
LABEL_74:
  *(void *)(result + 8) = v17;
LABEL_75:
  if (byte_1EBCE65F0)
  {
    unint64_t v17 = -1;
    *(void *)(result + 8) = -1;
  }
  if (word_1EA61D2B0)
  {
    unint64_t v17 = xmmword_1EA61D328;
    *(void *)(result + 8) = xmmword_1EA61D328;
  }
  BOOL v19 = !v12
     && ((unsigned int v20 = v9 - 3, v20 >= 0x22) || ((0x220300001uLL >> v20) & 1) == 0)
     && (v17 & (v17 - 1)) == 0
     && v17 != -1;
  *(unsigned char *)(result + 16) = v19;
  if (v5 == 11)
  {
    uint64_t result = sub_1CD4CF6B4(a2, 0x15u);
    char v22 = result ^ 1;
  }
  else
  {
    char v22 = 0;
  }
  if (byte_1EBCE66B0) {
    char v23 = v22 & v14;
  }
  else {
    char v23 = 0;
  }
  *(unsigned char *)(v4 + 17) = v23;
  return result;
}

uint64_t llvm::ASanAccessInfo::ASanAccessInfo(uint64_t this, unsigned int a2)
{
  *(_DWORD *)this = a2;
  *(unsigned char *)(this + 4) = (a2 >> 1) & 0xF;
  *(unsigned char *)(this + 5) = (a2 & 0x20) != 0;
  *(unsigned char *)(this + 6) = a2 & 1;
  return this;
}

{
  *(_DWORD *)this = a2;
  *(unsigned char *)(this + 4) = (a2 >> 1) & 0xF;
  *(unsigned char *)(this + 5) = (a2 & 0x20) != 0;
  *(unsigned char *)(this + 6) = a2 & 1;
  return this;
}

uint64_t llvm::ASanAccessInfo::ASanAccessInfo(uint64_t this, int a2, int a3, int a4)
{
  if (a2) {
    int v4 = 32;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)this = (v4 | a3) + 2 * a4;
  *(unsigned char *)(this + 4) = a4;
  *(unsigned char *)(this + 5) = a2;
  *(unsigned char *)(this + 6) = a3;
  return this;
}

{
  int v4;

  if (a2) {
    int v4 = 32;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)this = (v4 | a3) + 2 * a4;
  *(unsigned char *)(this + 4) = a4;
  *(unsigned char *)(this + 5) = a2;
  *(unsigned char *)(this + 6) = a3;
  return this;
}

uint64_t llvm::ModuleAddressSanitizerPass::ModuleAddressSanitizerPass(uint64_t result, void *a2, char a3, char a4, int a5)
{
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = a3;
  *(unsigned char *)(result + 9) = a4;
  *(_DWORD *)(result + 12) = a5;
  return result;
}

{
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = a3;
  *(unsigned char *)(result + 9) = a4;
  *(_DWORD *)(result + 12) = a5;
  return result;
}

uint64_t sub_1CCACB6D8(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4, BOOL a5, char a6, char a7, int a8)
{
  *(void *)a1 = a3;
  if (word_1EBCE5EB8) {
    a4 = byte_1EBCE5F30 != 0;
  }
  *(unsigned char *)(a1 + 8) = a4;
  BOOL v11 = byte_1EBCE5FF0 != 0;
  if (!word_1EBCE5F78) {
    BOOL v11 = a5;
  }
  *(unsigned char *)(a1 + 9) = v11;
  if (byte_1EA61CEA8) {
    char v12 = a6;
  }
  else {
    char v12 = 0;
  }
  BOOL v13 = !a4;
  *(unsigned char *)(a1 + 10) = v12 & v13;
  if (byte_1EA61CD28) {
    char v14 = 1;
  }
  else {
    char v14 = a7;
  }
  *(unsigned char *)(a1 + 11) = v14;
  if (byte_1EA61CDE8) {
    char v15 = 1;
  }
  else {
    char v15 = a7;
  }
  *(unsigned char *)(a1 + 12) = v15;
  if (byte_1EA61CF68) {
    char v16 = a6;
  }
  else {
    char v16 = 0;
  }
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v17 = a1 + 40;
  *(unsigned char *)(a1 + 13) = v16 & v13;
  *(_DWORD *)(a1 + 16) = a8;
  uint64_t v18 = a1 + 64;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  BOOL v19 = *(llvm::IntegerType **)a2;
  *(void *)(v17 - 8) = *(void *)a2;
  unsigned int v20 = *(_DWORD *)(*(void *)(a2 + 504) + 4);
  *(void *)(v17 - 16) = llvm::IntegerType::get(v19, (llvm::LLVMContext *)v20);
  __int16 v23 = 260;
  v22[0] = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&v24, (const llvm::Twine *)v22);
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)uint64_t v17 = v24;
  *(void *)(v17 + 16) = v25;
  *(_OWORD *)uint64_t v18 = v26;
  *(void *)(v18 + 16) = v27;
  sub_1CCACB368((uint64_t)&v24, (llvm::Triple *)v17, v20, *(unsigned __int8 *)(a1 + 8));
  *(void *)(a1 + 104) = v25;
  *(_OWORD *)(a1 + 88) = v24;
  if (dword_1EA61D818 != 2) {
    *(_DWORD *)(a1 + 16) = dword_1EA61D818;
  }
  return a1;
}

uint64_t sub_1CCACB88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL a5, BOOL a6, char a7, int a8)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (word_1EBCE5EB8) {
    a5 = byte_1EBCE5F30 != 0;
  }
  *(unsigned char *)(a1 + 60) = a5;
  if (word_1EBCE5F78) {
    a6 = byte_1EBCE5FF0 != 0;
  }
  *(unsigned char *)(a1 + 61) = a6;
  if (byte_1EBCE6B30) {
    a7 = 1;
  }
  *(unsigned char *)(a1 + 62) = a7;
  int v16 = dword_1EA61D5C0;
  if (!word_1EA61D548) {
    int v16 = a8;
  }
  *(_DWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 152) = 0uLL;
  bzero((void *)(a1 + 176), 0x338uLL);
  *(void *)(a1 + 1000) = a3;
  *(void *)(a1 + 1008) = a4;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  uint64_t v17 = *(llvm::IntegerType **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v18 = (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a2 + 504) + 4);
  *(_DWORD *)(a1 + 56) = v18;
  *(void *)(a1 + 72) = llvm::IntegerType::get(v17, v18);
  *(void *)(a1 + 80) = llvm::PointerType::get((llvm::PointerType *)(**(void **)a1 + 1912), 0);
  *(void *)(a1 + 88) = **(void **)a1 + 1960;
  __int16 v21 = 260;
  v20[0] = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&v22, (const llvm::Twine *)v20);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v12);
  }
  *(_OWORD *)uint64_t v12 = v22;
  *(void *)(v12 + 16) = v23;
  *(_OWORD *)(a1 + 32) = v24;
  *(void *)(a1 + 48) = v25;
  sub_1CCACB368((uint64_t)&v22, (llvm::Triple *)v12, *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
  *(_OWORD *)(a1 + 96) = v22;
  *(void *)(a1 + 112) = v23;
  return a1;
}

uint64_t sub_1CCACBA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v574 = *MEMORY[0x1E4F143B8];
  int v7 = (llvm *)(v5 + 9);
  if (v5[9] == (uint64_t **)(v5 + 9)) {
    return 0;
  }
  BOOL v8 = v5;
  if ((v5[4] & 0xF) == 1) {
    return 0;
  }
  BOOL v11 = v6;
  uint64_t v12 = v4;
  if (byte_1EA61D4EF >= 0) {
    size_t v13 = byte_1EA61D4EF & 0x7F;
  }
  else {
    size_t v13 = qword_1EA61D4E0;
  }
  int v14 = *((_DWORD *)v5 + 5);
  if (v13) {
    BOOL v15 = (v14 & 0x10000000) == 0;
  }
  else {
    BOOL v15 = 1;
  }
  unsigned int v16 = v5 >> 4;
  if (!v15)
  {
    uint64_t v17 = ***v5;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & (v16 ^ (v5 >> 9));
      __int16 v21 = (uint64_t ****)(v18 + 16 * v20);
      long long v22 = *v21;
      if (*v21 == v5)
      {
LABEL_19:
        uint64_t v25 = v21[1];
        if ((uint64_t **)v13 == *v25)
        {
          long long v26 = byte_1EA61D4EF >= 0 ? &qword_1EA61D4D8 : (uint64_t *)qword_1EA61D4D8;
          if (!memcmp(v26, v25 + 2, v13)) {
            return 0;
          }
        }
        goto LABEL_24;
      }
      int v23 = 1;
      while (v22 != (uint64_t ***)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        long long v22 = *(uint64_t ****)(v18 + 16 * v20);
        if (v22 == v5)
        {
          __int16 v21 = (uint64_t ****)(v18 + 16 * v20);
          goto LABEL_19;
        }
      }
    }
    __int16 v21 = (uint64_t ****)(v18 + 16 * v19);
    goto LABEL_19;
  }
LABEL_24:
  if ((v14 & 0x10000000) == 0)
  {
    uint64_t v46 = 0;
    char v45 = &byte_1CFBCE98E;
    goto LABEL_45;
  }
  uint64_t v27 = ***v8;
  uint64_t v28 = *(void *)(v27 + 152);
  uint64_t v29 = *(unsigned int *)(v27 + 168);
  if (!v29) {
    goto LABEL_31;
  }
  LODWORD(v30) = (v29 - 1) & (v16 ^ (v8 >> 9));
  unint64_t v31 = (uint64_t ****)(v28 + 16 * v30);
  int64_t v32 = *v31;
  if (*v31 != v8)
  {
    int v33 = 1;
    while (v32 != (uint64_t ***)-4096)
    {
      int v34 = v30 + v33++;
      uint64_t v30 = v34 & (v29 - 1);
      int64_t v32 = *(uint64_t ****)(v28 + 16 * v30);
      if (v32 == v8)
      {
        unint64_t v31 = (uint64_t ****)(v28 + 16 * v30);
        goto LABEL_32;
      }
    }
LABEL_31:
    unint64_t v31 = (uint64_t ****)(v28 + 16 * v29);
  }
LABEL_32:
  uint64_t v35 = v31[1];
  if ((unint64_t)*v35 >= 7)
  {
    int v36 = *((_DWORD *)v35 + 4);
    int v37 = *(_DWORD *)((char *)v35 + 19);
    if (v36 == 1935761247 && v37 == 1601069427) {
      return 0;
    }
  }
  if (!v29) {
    goto LABEL_43;
  }
  LODWORD(v39) = (v29 - 1) & (v16 ^ (v8 >> 9));
  int v40 = (uint64_t ****)(v28 + 16 * v39);
  unsigned int v41 = *v40;
  if (*v40 != v8)
  {
    int v42 = 1;
    while (v41 != (uint64_t ***)-4096)
    {
      int v43 = v39 + v42++;
      uint64_t v39 = v43 & (v29 - 1);
      unsigned int v41 = *(uint64_t ****)(v28 + 16 * v39);
      if (v41 == v8)
      {
        int v40 = (uint64_t ****)(v28 + 16 * v39);
        goto LABEL_44;
      }
    }
LABEL_43:
    int v40 = (uint64_t ****)(v28 + 16 * v29);
  }
LABEL_44:
  int v44 = v40[1];
  uint64_t v47 = (uint64_t)*v44;
  char v45 = (char *)(v44 + 2);
  uint64_t v46 = v47;
LABEL_45:
  int v491 = v45;
  uint64_t v492 = v46;
  uint64_t v48 = llvm::StringRef::find((uint64_t *)&v491, " load]", 6uLL, 0);
  uint64_t v9 = v48 != -1;
  if (v48 != -1)
  {
    inited = (uint64_t **)llvm::declareSanitizerInitFunction((uint64_t)v8[5], "__asan_init", (const char *)0xB, 0, 0);
    uint64_t v132 = v131;
    int v133 = v8[10];
    uint64_t v134 = v133 ? (uint64_t)(v133 - 3) : 0;
    sub_1CBF537B4((uint64_t)&v491, (uint64_t **)v134, *(void *)(v134 + 48), 0, 0, 0);
    __int16 v546 = 257;
    sub_1CB845BAC((uint64_t *)&v491, inited, v132, 0, 0, (uint64_t)v544, 0);
    if (v491 != v493) {
      free(v491);
    }
  }
  uint64_t v49 = v8[14];
  if (!v49 || (*((unsigned char *)v49 + 18) & 4) == 0 || *((char *)v49 + 12) < 0) {
    return v9;
  }
  uint64_t v460 = v48;
  int v462 = v11;
  uint64_t v50 = 0;
  unint64_t v452 = v8;
  uint64_t v51 = (uint64_t)v8[5];
  int v52 = *(void **)v12;
  int v491 = v493;
  uint64_t v492 = 0x200000000;
  unsigned int v495 = 0;
  int v496 = v52;
  int v497 = &v505;
  int v498 = v506;
  uint64_t v499 = 0;
  int v500 = 0;
  __int16 v501 = 512;
  char v502 = 7;
  uint64_t v494 = 0;
  uint64_t v504 = 0;
  uint64_t v503 = 0;
  int v505 = &unk_1F2616E88;
  v506[0] = &unk_1F2617008;
  char v53 = 1;
  uint64_t v478 = v12;
  do
  {
    uint64_t v54 = 0;
    char v474 = v53;
    BOOL v15 = (v53 & 1) == 0;
    uint64_t v55 = 4;
    if (!v15) {
      uint64_t v55 = 0;
    }
    uint64_t v471 = v55;
    char v56 = 1;
    do
    {
      char v465 = v56;
      if (v56) {
        uint64_t v57 = "load";
      }
      else {
        uint64_t v57 = "store";
      }
      if (v56) {
        size_t v58 = 4;
      }
      else {
        size_t v58 = 5;
      }
      BYTE7(v481) = v58;
      memcpy(&__dst, v57, v58);
      *(unsigned char *)((unint64_t)&__dst | v58) = 0;
      char v543 = v471;
      if ((v474 & 1) == 0) {
        LODWORD(v540) = 1601206373;
      }
      *(unsigned char *)((unint64_t)&v540 | v471) = 0;
      uint64_t v59 = *(unsigned __int8 *)(v12 + 61);
      char v538 = 8 * v59;
      if (v59) {
        unsigned int v535 = (void *)0x74726F62616F6E5FLL;
      }
      *((unsigned char *)&v535 + 8 * v59) = 0;
      uint64_t v60 = *(void *)(v12 + 72);
      v544[0] = v545;
      v545[0] = v60;
      v545[1] = v60;
      v544[1] = (void *)0x300000002;
      int v547 = &v549;
      __b = (void *)0x200000000;
      sub_1CB90CB08((uint64_t)&v547, 1uLL, v60);
      if ((v474 & 1) == 0)
      {
        if (LODWORD(v544[1]) >= (unint64_t)HIDWORD(v544[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v61 = **(void **)v12 + 1960;
        *((void *)v544[0] + LODWORD(v544[1])) = v61;
        ++LODWORD(v544[1]);
        if (__b >= (unint64_t)HIDWORD(__b)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v547 + __b) = v61;
        LODWORD(__b) = __b + 1;
      }
      std::operator+<char>();
      if ((SBYTE7(v481) & 0x80u) == 0) {
        unint64_t p_dst = (const std::string::value_type *)&__dst;
      }
      else {
        unint64_t p_dst = __dst;
      }
      if ((SBYTE7(v481) & 0x80u) == 0) {
        std::string::size_type v63 = BYTE7(v481) & 0x7F;
      }
      else {
        std::string::size_type v63 = (std::string::size_type)v480;
      }
      BOOL v64 = std::string::append(&v572, p_dst, v63);
      std::string::size_type v65 = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v539[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v539[0].__r_.__value_.__r.__words[2] = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      int v66 = std::string::append(v539, "_n");
      std::string::size_type v67 = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v556.__r_.__value_.__l.__data_ = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v556.__r_.__value_.__r.__words[2] = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (v538 >= 0) {
        int v68 = (const std::string::value_type *)&v535;
      }
      else {
        int v68 = (const std::string::value_type *)v535;
      }
      if (v538 >= 0) {
        std::string::size_type v69 = v538 & 0x7F;
      }
      else {
        std::string::size_type v69 = v536;
      }
      uint64_t v70 = std::string::append(&v556, v68, v69);
      std::string::size_type v71 = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v534[0] = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      if (v534[0] >= 0) {
        unint64_t v72 = (unsigned __int8 *)__p;
      }
      else {
        unint64_t v72 = (unsigned __int8 *)__p[0];
      }
      if (v534[0] >= 0) {
        uint64_t v73 = (const char *)(HIBYTE(v534[0]) & 0x7F);
      }
      else {
        uint64_t v73 = (const char *)__p[1];
      }
      int v74 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v496 + 1576), (uint64_t)v544[0], LODWORD(v544[1]), 0);
      inserted = llvm::Module::getOrInsertFunction(v51, v72, v73, v74, 0);
      uint64_t v76 = v12 + 32 * v54 + 16 * v50;
      *(void *)(v76 + 816) = inserted;
      *(void *)(v76 + 824) = v77;
      if (SHIBYTE(v534[0]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v556.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v539[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v539[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v572.__r_.__value_.__l.__data_);
      }
      sub_1CB906918((const void **)&xmmword_1EA61D3F0, (const void **)&v540, (uint64_t)&v572);
      if ((SBYTE7(v481) & 0x80u) == 0) {
        uint64_t v78 = (const std::string::value_type *)&__dst;
      }
      else {
        uint64_t v78 = __dst;
      }
      if ((SBYTE7(v481) & 0x80u) == 0) {
        std::string::size_type v79 = BYTE7(v481) & 0x7F;
      }
      else {
        std::string::size_type v79 = (std::string::size_type)v480;
      }
      int v80 = std::string::append(&v572, v78, v79);
      std::string::size_type v81 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v539[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v539[0].__r_.__value_.__r.__words[2] = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      uint64_t v82 = std::string::append(v539, "N");
      std::string::size_type v83 = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v556.__r_.__value_.__l.__data_ = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v556.__r_.__value_.__r.__words[2] = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      if (v538 >= 0) {
        uint64_t v84 = (const std::string::value_type *)&v535;
      }
      else {
        uint64_t v84 = (const std::string::value_type *)v535;
      }
      if (v538 >= 0) {
        std::string::size_type v85 = v538 & 0x7F;
      }
      else {
        std::string::size_type v85 = v536;
      }
      int v86 = std::string::append(&v556, v84, v85);
      std::string::size_type v87 = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v534[0] = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      if (v534[0] >= 0) {
        uint64_t v88 = (unsigned __int8 *)__p;
      }
      else {
        uint64_t v88 = (unsigned __int8 *)__p[0];
      }
      if (v534[0] >= 0) {
        uint64_t v89 = (const char *)(HIBYTE(v534[0]) & 0x7F);
      }
      else {
        uint64_t v89 = (const char *)__p[1];
      }
      uint64_t v90 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v496 + 1576), (uint64_t)v544[0], LODWORD(v544[1]), 0);
      uint64_t v91 = llvm::Module::getOrInsertFunction(v51, v88, v89, v90, 0);
      uint64_t v92 = v12 + 32 * v54 + 16 * v50;
      *(void *)(v92 + 880) = v91;
      *(void *)(v92 + 888) = v93;
      if (SHIBYTE(v534[0]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v556.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v539[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v539[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v572.__r_.__value_.__l.__data_);
      }
      for (uint64_t i = 0; i != 5; ++i)
      {
        uint64_t v95 = 0;
        unint64_t v96 = 1 << i;
        do
        {
          *((unsigned char *)v534 + v95-- + 4) = (v96 % 0xA) | 0x30;
          BOOL v301 = v96 > 9;
          v96 /= 0xAuLL;
        }
        while (v301);
        sub_1CC028D80(&v556, (char *)v534 + v95 + 5, (char *)v534 + 5, -v95);
        if ((SBYTE7(v481) & 0x80u) == 0) {
          uint64_t v97 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v97 = __dst;
        }
        if ((SBYTE7(v481) & 0x80u) == 0) {
          std::string::size_type v98 = BYTE7(v481) & 0x7F;
        }
        else {
          std::string::size_type v98 = (std::string::size_type)v480;
        }
        uint64_t v99 = std::string::insert(&v556, 0, v97, v98);
        std::string::size_type v100 = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v534[0] = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v556.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        if (v534[0] >= 0) {
          size_t v101 = __p;
        }
        else {
          size_t v101 = (void **)__p[0];
        }
        if (v534[0] >= 0) {
          std::string::size_type v102 = HIBYTE(v534[0]) & 0x7F;
        }
        else {
          std::string::size_type v102 = (std::string::size_type)__p[1];
        }
        uint64_t v103 = std::string::append(&v572, (const std::string::value_type *)v101, v102);
        std::string::size_type v104 = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v539[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v539[0].__r_.__value_.__r.__words[2] = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        if (v538 >= 0) {
          unsigned int v105 = (const std::string::value_type *)&v535;
        }
        else {
          unsigned int v105 = (const std::string::value_type *)v535;
        }
        if (v538 >= 0) {
          std::string::size_type v106 = v538 & 0x7F;
        }
        else {
          std::string::size_type v106 = v536;
        }
        uint64_t v107 = std::string::append(v539, v105, v106);
        std::string::size_type v108 = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v556.__r_.__value_.__l.__data_ = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        v556.__r_.__value_.__r.__words[2] = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        if ((v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v109 = &v556;
        }
        else {
          uint64_t v109 = (std::string *)v556.__r_.__value_.__r.__words[0];
        }
        if ((v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v556.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v556.__r_.__value_.__l.__size_;
        }
        uint64_t v111 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v496 + 1576), (uint64_t)v547, __b, 0);
        uint64_t v112 = llvm::Module::getOrInsertFunction(v51, (unsigned __int8 *)v109, (const char *)size, v111, 0);
        uint64_t v113 = v478 + 160 * v54 + 80 * v50 + 16 * i;
        *(void *)(v113 + 176) = v112;
        *(void *)(v113 + 184) = v114;
        if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v556.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v539[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v539[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v572.__r_.__value_.__l.__data_);
        }
        sub_1CB906918((const void **)&xmmword_1EA61D3F0, (const void **)&v540, (uint64_t)&v572);
        if (v534[0] >= 0) {
          BOOL v115 = __p;
        }
        else {
          BOOL v115 = (void **)__p[0];
        }
        if (v534[0] >= 0) {
          std::string::size_type v116 = HIBYTE(v534[0]) & 0x7F;
        }
        else {
          std::string::size_type v116 = (std::string::size_type)__p[1];
        }
        int v117 = std::string::append(&v572, (const std::string::value_type *)v115, v116);
        std::string::size_type v118 = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v539[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v539[0].__r_.__value_.__r.__words[2] = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        if (v538 >= 0) {
          uint64_t v119 = (const std::string::value_type *)&v535;
        }
        else {
          uint64_t v119 = (const std::string::value_type *)v535;
        }
        if (v538 >= 0) {
          std::string::size_type v120 = v538 & 0x7F;
        }
        else {
          std::string::size_type v120 = v536;
        }
        unsigned int v121 = std::string::append(v539, v119, v120);
        std::string::size_type v122 = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v556.__r_.__value_.__l.__data_ = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v556.__r_.__value_.__r.__words[2] = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        if ((v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v123 = &v556;
        }
        else {
          uint64_t v123 = (std::string *)v556.__r_.__value_.__r.__words[0];
        }
        if ((v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v124 = *((unsigned char *)&v556.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v124 = v556.__r_.__value_.__l.__size_;
        }
        unint64_t v125 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v496 + 1576), (uint64_t)v547, __b, 0);
        uint64_t v126 = llvm::Module::getOrInsertFunction(v51, (unsigned __int8 *)v123, (const char *)v124, v125, 0);
        uint64_t v127 = v478 + 160 * v54 + 80 * v50 + 16 * i;
        *(void *)(v127 + 496) = v126;
        *(void *)(v127 + 504) = v128;
        if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v556.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v539[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v539[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v572.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v534[0]) < 0) {
          operator delete(__p[0]);
        }
      }
      if (v547 != &v549) {
        free(v547);
      }
      uint64_t v12 = v478;
      if (v544[0] != v545) {
        free(v544[0]);
      }
      if (v538 < 0) {
        operator delete(v535);
      }
      if (v543 < 0) {
        operator delete(v540);
      }
      if (SBYTE7(v481) < 0) {
        operator delete(__dst);
      }
      char v56 = 0;
      uint64_t v54 = 1;
    }
    while ((v465 & 1) != 0);
    char v53 = 0;
    uint64_t v50 = 1;
  }
  while ((v474 & 1) != 0);
  if (!*(unsigned char *)(v478 + 60) || byte_1EA61C4E8)
  {
    uint64_t v129 = v460;
    if (byte_1EA61D407 < 0)
    {
      sub_1CB8BDF7C((uint64_t)v544, (const void *)xmmword_1EA61D3F0, *((unint64_t *)&xmmword_1EA61D3F0 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v544 = xmmword_1EA61D3F0;
      v545[0] = unk_1EA61D400;
    }
  }
  else
  {
    HIBYTE(v545[0]) = 0;
    LOBYTE(v544[0]) = 0;
    uint64_t v129 = v460;
  }
  if (v545[0] >= 0) {
    size_t v135 = HIBYTE(v545[0]) & 0x7F;
  }
  else {
    size_t v135 = (size_t)v544[1];
  }
  sub_1CB907098((uint64_t)&v547, v135 + 7);
  if (v549 >= 0) {
    uint64_t v136 = &v547;
  }
  else {
    uint64_t v136 = v547;
  }
  if (v135)
  {
    if (v545[0] >= 0) {
      uint64_t v137 = v544;
    }
    else {
      uint64_t v137 = (void **)v544[0];
    }
    memmove(v136, v137, v135);
  }
  strcpy((char *)v136 + v135, "memmove");
  if (v549 >= 0) {
    uint64_t v138 = (unsigned __int8 *)&v547;
  }
  else {
    uint64_t v138 = (unsigned __int8 *)v547;
  }
  if (v549 >= 0) {
    uint64_t v139 = (const char *)(HIBYTE(v549) & 0x7F);
  }
  else {
    uint64_t v139 = (const char *)__b;
  }
  int v140 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  unint64_t v141 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  unint64_t v142 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  *(void *)(v478 + 944) = sub_1CD68E044(v51, v138, v139, 0, v140, v141, v142, *(void *)(v478 + 72));
  *(void *)(v478 + 952) = v143;
  uint64_t v144 = v452;
  if (SHIBYTE(v549) < 0) {
    operator delete(v547);
  }
  if (v545[0] >= 0) {
    size_t v145 = HIBYTE(v545[0]) & 0x7F;
  }
  else {
    size_t v145 = (size_t)v544[1];
  }
  sub_1CB907098((uint64_t)&v547, v145 + 6);
  if (v549 >= 0) {
    char v146 = &v547;
  }
  else {
    char v146 = v547;
  }
  if (v145)
  {
    if (v545[0] >= 0) {
      uint64_t v147 = v544;
    }
    else {
      uint64_t v147 = (void **)v544[0];
    }
    memmove(v146, v147, v145);
  }
  strcpy((char *)v146 + v145, "memcpy");
  if (v549 >= 0) {
    int v148 = (unsigned __int8 *)&v547;
  }
  else {
    int v148 = (unsigned __int8 *)v547;
  }
  if (v549 >= 0) {
    uint64_t v149 = (const char *)(HIBYTE(v549) & 0x7F);
  }
  else {
    uint64_t v149 = (const char *)__b;
  }
  unint64_t v150 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  unint64_t v151 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  unint64_t v152 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  *(void *)(v478 + 960) = sub_1CD68E044(v51, v148, v149, 0, v150, v151, v152, *(void *)(v478 + 72));
  *(void *)(v478 + 968) = v153;
  if (SHIBYTE(v549) < 0) {
    operator delete(v547);
  }
  if (v545[0] >= 0) {
    size_t v154 = HIBYTE(v545[0]) & 0x7F;
  }
  else {
    size_t v154 = (size_t)v544[1];
  }
  sub_1CB907098((uint64_t)&v547, v154 + 6);
  if (v549 >= 0) {
    uint64_t v155 = &v547;
  }
  else {
    uint64_t v155 = v547;
  }
  if (v154)
  {
    if (v545[0] >= 0) {
      unsigned int v156 = v544;
    }
    else {
      unsigned int v156 = (void **)v544[0];
    }
    memmove(v155, v156, v154);
  }
  strcpy((char *)v155 + v154, "memset");
  if (v549 >= 0) {
    uint64_t v157 = (unsigned __int8 *)&v547;
  }
  else {
    uint64_t v157 = (unsigned __int8 *)v547;
  }
  if (v549 >= 0) {
    uint64_t v158 = (const char *)(HIBYTE(v549) & 0x7F);
  }
  else {
    uint64_t v158 = (const char *)__b;
  }
  unsigned int v159 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  unint64_t v160 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  *(void *)(v478 + 976) = sub_1CD68E044(v51, v157, v158, 0, v159, v160, *v496 + 1960, *(void *)(v478 + 72));
  *(void *)(v478 + 984) = v161;
  if (SHIBYTE(v549) < 0) {
    operator delete(v547);
  }
  *(void *)(v478 + 120) = sub_1CD577C30(v51, "__asan_handle_no_return", (const char *)0x17, 0, (uint64_t **)(*v496 + 1576));
  *(void *)(v478 + 128) = v162;
  *(void *)(v478 + 136) = sub_1CD661480(v51, "__sanitizer_ptr_cmp", (const char *)0x13, 0, (uint64_t **)(*v496 + 1576), *(void *)(v478 + 72), *(void *)(v478 + 72));
  *(void *)(v478 + 144) = v163;
  *(void *)(v478 + 152) = sub_1CD661480(v51, "__sanitizer_ptr_sub", (const char *)0x13, 0, (uint64_t **)(*v496 + 1576), *(void *)(v478 + 72), *(void *)(v478 + 72));
  *(void *)(v478 + 160) = v164;
  if (*(unsigned char *)(v478 + 113))
  {
    int v165 = llvm::ArrayType::get((llvm::ArrayType *)(*v496 + 1912), 0);
    *(void *)(v478 + 168) = llvm::Module::getOrInsertGlobal(v51, "__asan_shadow", 0xDuLL, v165);
  }
  int v166 = (uint64_t **)(*v496 + 1888);
  unint64_t v167 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  *(void *)(v478 + 1040) = sub_1CD57B9C0(v51, "llvm.amdgcn.is.shared", (const char *)0x15, 0, v166, v167);
  *(void *)(v478 + 1048) = v168;
  unsigned int v169 = (uint64_t **)(*v496 + 1888);
  unint64_t v170 = llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
  *(void *)(v478 + 1056) = sub_1CD57B9C0(v51, "llvm.amdgcn.is.private", (const char *)0x16, 0, v169, v170);
  *(void *)(v478 + 1064) = v171;
  if (SHIBYTE(v545[0]) < 0) {
    operator delete(v544[0]);
  }
  if (v491 != v493) {
    free(v491);
  }
  uint64_t v172 = *(void *)(v478 + 104);
  if (v172 != -1) {
    goto LABEL_292;
  }
  uint64_t v173 = 0;
  int v174 = v452[10];
  if (v174) {
    uint64_t v175 = v174 - 3;
  }
  else {
    uint64_t v175 = 0;
  }
  uint64_t v176 = v175[6];
  if (v176) {
    int v177 = (uint64_t)(v176 - 3);
  }
  else {
    int v177 = 0;
  }
  uint64_t v178 = **(void ***)v177;
  int v491 = v493;
  uint64_t v492 = 0x200000000;
  unsigned int v495 = 0;
  int v496 = v178;
  int v497 = &v505;
  int v498 = v506;
  uint64_t v499 = 0;
  int v500 = 0;
  __int16 v501 = 512;
  char v502 = 7;
  uint64_t v494 = 0;
  uint64_t v504 = 0;
  uint64_t v503 = 0;
  int v505 = &unk_1F2616E88;
  v506[0] = &unk_1F2617008;
  uint64_t v494 = *(uint64_t **)(v177 + 40);
  unsigned int v495 = (uint64_t **)(v177 + 24);
  unsigned int v179 = *(void **)(v177 + 48);
  int v547 = v179;
  if (v179)
  {
    llvm::MetadataTracking::track((uint64_t)&v547, (unsigned __int8 *)v179, 2);
    uint64_t v173 = v547;
  }
  sub_1CB8461A4((uint64_t)&v491, 0, (uint64_t)v173);
  if (v547)
  {
    int v206 = *(unsigned __int8 *)v547;
    if ((v206 - 4) > 0x1E)
    {
      if ((v206 - 3) >= 0xFFFFFFFE) {
        int v211 = v547;
      }
      else {
        int v211 = 0;
      }
      if ((v206 - 3) < 0xFFFFFFFE)
      {
        uint64_t v129 = v460;
        if (v206 == 3) {
          *((void *)v547 + 1) = 0;
        }
        goto LABEL_281;
      }
      unint64_t v208 = (unint64_t)v211 + 8;
    }
    else
    {
      if ((*((unsigned char *)v547 + 1) & 0x7F) != 2 && !*((_DWORD *)v547 + 3)) {
        goto LABEL_281;
      }
      uint64_t v207 = *((void *)v547 + 2);
      if ((v207 & 4) == 0) {
        goto LABEL_281;
      }
      unint64_t v208 = v207 & 0xFFFFFFFFFFFFFFF8;
      if (!v208) {
        goto LABEL_281;
      }
    }
    v544[0] = &v547;
    sub_1CC5FA668(v208 + 16, v544);
    uint64_t v129 = v460;
  }
LABEL_281:
  if (*(unsigned char *)(v478 + 113))
  {
    if (byte_1EBCE6770)
    {
      uint64_t v188 = *(uint64_t ***)(v478 + 72);
      v544[0] = **(void ***)(v478 + 168);
      uint64_t v189 = (llvm::PointerType *)llvm::FunctionType::get(v188, (uint64_t)v544, 1, 0);
      uint64_t v190 = llvm::InlineAsm::get(v189, (uint64_t)"", 0, (uint64_t)"=r,0", 4, 0, 0, 0, 0);
      uint64_t v191 = 0;
      uint64_t v144 = v452;
      if (v190) {
        uint64_t v191 = *(uint64_t ***)(v190 + 72);
      }
      int v547 = *(void **)(v478 + 168);
      v544[0] = ".asan.shadow";
      __int16 v546 = 259;
      *(void *)(v478 + 992) = sub_1CB845BAC((uint64_t *)&v491, v191, (uint64_t **)v190, (uint64_t *)&v547, 1, (uint64_t)v544, 0);
      goto LABEL_290;
    }
    unsigned int v186 = *(llvm::CastInst **)(v478 + 168);
    uint64_t v187 = *(llvm::Value **)(v478 + 72);
    v544[0] = ".asan.shadow";
    __int16 v546 = 259;
    *(void *)(v478 + 992) = sub_1CC277FE0((uint64_t)&v491, v186, v187, (uint64_t)v544, v180);
  }
  else
  {
    uint64_t v181 = llvm::Module::getOrInsertGlobal((uint64_t)v452[5], "__asan_shadow_memory_dynamic_address", 0x24uLL, *(llvm::PointerType **)(v478 + 72));
    uint64_t v182 = *(llvm::Type **)(v478 + 72);
    v551[0] = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v494[7] + 40) + 272), v182, 1);
    unint64_t v184 = operator new(0x60uLL);
    v184[13] = v184[13] & 0x38000000 | 1;
    uint64_t v185 = (llvm::Instruction *)(v184 + 8);
    *(void *)unint64_t v184 = 0;
    *((void *)v184 + 1) = 0;
    *((void *)v184 + 2) = 0;
    *((void *)v184 + 3) = v184 + 8;
    __int16 v546 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v184 + 8), (uint64_t)v182, (uint64_t)v181, (const char **)v544, 0, Alignment, 0);
    (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v498 + 16))(v498, v185, &v547, v494, v495);
    if (v492)
    {
      uint64_t v209 = (llvm::MDNode **)v491;
      int v210 = (llvm::MDNode **)((char *)v491 + 16 * v492);
      do
      {
        llvm::Instruction::setMetadata(v185, *(_DWORD *)v209, v209[1]);
        v209 += 2;
      }
      while (v209 != v210);
    }
    *(void *)(v478 + 992) = v185;
  }
  uint64_t v144 = v452;
LABEL_290:
  if (v491 != v493) {
    free(v491);
  }
LABEL_292:
  BOOL v193 = v129 != -1 || v172 == -1;
  int v467 = v193;
  uint8x8_t v194 = v144[5][14];
  unsigned int v195 = *((_DWORD *)v194 + 8);
  if (v195 <= 1) {
    uint64_t v196 = 1;
  }
  else {
    uint64_t v196 = v195;
  }
  if (v195 <= 0xF) {
    size_t v197 = v196;
  }
  else {
    size_t v197 = 16;
  }
  uint64_t v475 = *((unsigned int *)v194 + 2);
  if (v475)
  {
    uint64_t v198 = 0;
    int v199 = 0;
    do
      int v199 = 33 * v199 + aLlvmLocalescap_2[v198++];
    while (v197 != v198);
    uint64_t v200 = *v194;
    uint64_t v201 = *v194 + 8 * v475 + 8;
    int v202 = 1;
    int v203 = v199;
    while (1)
    {
      uint64_t v204 = v203 & (v475 - 1);
      unsigned int v205 = *(void **)(v200 + 8 * v204);
      if (v205 != (void *)-8)
      {
        if (!v205) {
          goto LABEL_332;
        }
        if (*(_DWORD *)(v201 + 4 * v204) == v199
          && v197 == *v205
          && !memcmp("llvm.localescape", (char *)v205 + *((unsigned int *)v194 + 5), v197))
        {
          break;
        }
      }
      int v203 = v202 + v204;
      ++v202;
    }
    if (v204 != -1 && (int)v204 != v475)
    {
      uint64_t v212 = *(void *)(*(void *)(v200 + 8 * (int)v204) + 8);
      if (v212)
      {
        if (!*(unsigned char *)(v212 + 16))
        {
          BOOL v434 = v452[10];
          if (v434) {
            int v435 = v434 - 3;
          }
          else {
            int v435 = 0;
          }
          BOOL v436 = v435 + 5;
          for (uint64_t j = v435[6]; j != (uint64_t *)v436; uint64_t j = (uint64_t *)j[1])
          {
            BOOL v438 = (uint64_t)(j - 3);
            if (j) {
              int v439 = (uint64_t)(j - 3);
            }
            else {
              int v439 = 0;
            }
            if (*(unsigned char *)(v439 + 16) == 84)
            {
              uint64_t v440 = *(void *)(v439 - 32);
              if (v440)
              {
                if (!*(unsigned char *)(v440 + 16)
                  && *(void *)(v440 + 24) == *(void *)(v439 + 72)
                  && (*(unsigned char *)(v440 + 33) & 0x20) != 0
                  && *(_DWORD *)(*(j - 7) + 36) == 173)
                {
                  int v441 = *((_DWORD *)j - 1);
                  uint64_t v442 = v441 & 0x7FFFFFF;
                  int v443 = (llvm::Value **)(v438 - 32 * v442);
                  int v444 = *((unsigned __int8 *)j - 8);
                  if (v444 == 84)
                  {
                    uint64_t v445 = 0;
                  }
                  else if (v444 == 39)
                  {
                    uint64_t v445 = (*((_DWORD *)j + 14) + 1);
                  }
                  else
                  {
                    uint64_t v445 = 2;
                  }
                  if (v441 < 0 && (uint64_t v451 = (uint64_t)*(v443 - 1), (v451 & 0xFFFFFFFF0) != 0)) {
                    uint64_t v446 = (*((_DWORD *)v443 - 3) - *(_DWORD *)((char *)v443 - v451));
                  }
                  else {
                    uint64_t v446 = 0;
                  }
                  if (v443 != (llvm::Value **)(v438 - 32 * v445 - 32 * v446 - 32))
                  {
                    uint64_t v447 = 32 * v442 - 32 * v445 - 32 * v446 - 32;
                    do
                    {
                      unint64_t v448 = *v443;
                      v443 += 4;
                      int v449 = llvm::Value::stripPointerCasts(v448);
                      if (*((unsigned char *)v449 + 16) == 59) {
                        int v450 = v449;
                      }
                      else {
                        int v450 = 0;
                      }
                      int v491 = v450;
                      *((unsigned char *)sub_1CD68E11C(v478 + 1016, (uint64_t *)&v491) + 8) = 0;
                      v447 -= 32;
                    }
                    while (v447);
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_332:
  int v547 = v551;
  __b = v551;
  uint64_t v549 = 16;
  int v550 = 0;
  v544[0] = v545;
  v544[1] = (void *)0x1000000000;
  unint64_t v540 = v542;
  uint64_t v541 = 0x1000000000;
  v539[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v539[0].__r_.__value_.__r.__words[2];
  v539[0].__r_.__value_.__l.__size_ = 0x800000000;
  unsigned int v535 = v537;
  uint64_t v536 = 0x1000000000;
  __p[0] = v534;
  __p[1] = (void *)0x1000000000;
  int v213 = v452;
  int v214 = (llvm *)v452[10];
  if (v214 == v7)
  {
    unsigned int v215 = 0;
    unsigned int v216 = 0;
    unsigned int v217 = v545;
    goto LABEL_567;
  }
  do
  {
    uint64_t v472 = v214;
    if (v214) {
      uint64_t v218 = (char *)v214 - 24;
    }
    else {
      uint64_t v218 = 0;
    }
    if (v536 >= (unint64_t)HIDWORD(v536)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v535 + v536) = v218;
    LODWORD(v536) = v536 + 1;
    if (__b == v547) {
      goto LABEL_339;
    }
    if (v549 < 0x21 || 4 * (HIDWORD(v549) - v550) >= v549)
    {
      memset(__b, 255, 8 * v549);
LABEL_339:
      int v550 = 0;
      HIDWORD(v549) = 0;
      goto LABEL_340;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear(&v547);
LABEL_340:
    unsigned int v219 = (char *)*((void *)v218 + 6);
    uint64_t v476 = v218 + 40;
    if (v219 != v218 + 40)
    {
      int v220 = 0;
      while (1)
      {
        if (v219) {
          uint64_t v221 = (uint64_t)(v219 - 24);
        }
        else {
          uint64_t v221 = 0;
        }
        if (*(_DWORD *)(v478 + 56) == 32
          && v219
          && *(unsigned char *)(v221 + 16) == 84
          && *(unsigned char *)(*(void *)(v221 - 32) + 16) == 24)
        {
          int v222 = *(_DWORD *)(v221 + 20);
          if (v222 < 0
            && (uint64_t v298 = v221 - 32 * (v222 & 0x7FFFFFF), v299 = *(void *)(v298 - 8), (v299 & 0xFFFFFFFF0) != 0))
          {
            uint64_t v224 = -(uint64_t)(v222 & 0x7FFFFFF);
            int v223 = *(_DWORD *)(v298 - 12) - *(_DWORD *)(v298 - v299);
          }
          else
          {
            int v223 = 0;
            uint64_t v224 = -(uint64_t)(v222 & 0x7FFFFFF);
          }
          if (((32 * (unint64_t)-v223 - 32 - 32 * v224) >> 5) > 5)
          {
            uint64_t v9 = 0;
            uint64_t v300 = v478;
            goto LABEL_805;
          }
        }
        int v491 = v493;
        uint64_t v492 = 0x100000000;
        __dst = (std::string::value_type *)v221;
        if (*(void *)(v221 + 48) || (int v225 = v219 - 24, (*(unsigned char *)(v221 + 23) & 0x20) != 0))
        {
          if (llvm::Instruction::getMetadataImpl((uint64_t ***)v221, "nosanitize", 0xAuLL)) {
            goto LABEL_392;
          }
          int v225 = __dst;
        }
        if (*(char **)(v478 + 992) != v225)
        {
          int v226 = v225[16];
          if (v225 && v226 == 60)
          {
            if (byte_1EBCE6170 && !sub_1CCAD960C(v478, (const llvm::Instruction *)v225, *((llvm **)v225 - 4)))
            {
              LODWORD(v572.__r_.__value_.__l.__data_) = 0;
              LOBYTE(v552) = 0;
              v556.__r_.__value_.__r.__words[0] = *(void *)v225;
              unint64_t v227 = (unint64_t)*((unsigned __int16 *)v225 + 9) >> 1;
LABEL_367:
              v489[0] = __clz(1 << v227) ^ 0x3F;
              sub_1CD68E3C4((uint64_t)&v491, (uint64_t *)&__dst, (unsigned int *)&v572, (char *)&v552, (uint64_t *)&v556, v489);
            }
          }
          else if (v225 && v226 == 61)
          {
            if (byte_1EBCE6230 && !sub_1CCAD960C(v478, (const llvm::Instruction *)v225, *((llvm **)v225 - 4)))
            {
              LODWORD(v572.__r_.__value_.__l.__data_) = 1;
              LOBYTE(v552) = 1;
              v556.__r_.__value_.__r.__words[0] = **((void **)v225 - 8);
              unint64_t v227 = (unint64_t)*((unsigned __int16 *)v225 + 9) >> 1;
              goto LABEL_367;
            }
          }
          else if (v225 && v226 == 65)
          {
            if (byte_1EBCE63B0 && !sub_1CCAD960C(v478, (const llvm::Instruction *)v225, *((llvm **)v225 - 8)))
            {
              LODWORD(v572.__r_.__value_.__l.__data_) = 0;
              LOBYTE(v552) = 1;
              int64_t v228 = (std::string::size_type *)*((void *)v225 - 4);
LABEL_378:
              v556.__r_.__value_.__r.__words[0] = *v228;
              sub_1CD68E454((uint64_t)&v491, (uint64_t *)&__dst, (unsigned int *)&v572, (char *)&v552, (uint64_t *)&v556);
            }
          }
          else if (v225 && v226 == 64)
          {
            if (byte_1EBCE63B0 && !sub_1CCAD960C(v478, (const llvm::Instruction *)v225, *((llvm **)v225 - 12)))
            {
              LODWORD(v572.__r_.__value_.__l.__data_) = 0;
              LOBYTE(v552) = 1;
              int64_t v228 = (std::string::size_type *)*((void *)v225 - 8);
              goto LABEL_378;
            }
          }
          else
          {
            if (!v225 || v226 != 84) {
              goto LABEL_392;
            }
            uint64_t v229 = *((void *)v225 - 4);
            if (v229 && !*(unsigned char *)(v229 + 16))
            {
              if (*(void *)(v229 + 24) == *((void *)v225 + 9) && *(_DWORD *)(v229 + 36) == 185)
              {
                if (!byte_1EBCE6170) {
                  goto LABEL_392;
                }
                unsigned int v469 = 0;
                uint64_t v230 = 0;
                char v231 = 1;
LABEL_391:
                if (!sub_1CCAD960C(v478, (const llvm::Instruction *)v225, *(llvm **)&v225[32 * v230 + -32 * (*((_DWORD *)v225 + 5) & 0x7FFFFFF)]))
                {
                  uint64_t v290 = (uint64_t *)v225;
                  if ((v231 & 1) == 0) {
                    uint64_t v290 = *(uint64_t **)&v225[-32 * (*((_DWORD *)v225 + 5) & 0x7FFFFFF)];
                  }
                  __int16 v291 = 0;
                  int v292 = &v225[-32 * (*((_DWORD *)v225 + 5) & 0x7FFFFFF)];
                  uint64_t v293 = *(void *)&v292[32 * v469 + 32];
                  LOWORD(v294) = 1;
                  if (v293 && *(unsigned char *)(v293 + 16) == 16)
                  {
                    BOOL v295 = (unint64_t *)(v293 + 24);
                    if (*(_DWORD *)(v293 + 32) >= 0x41u) {
                      BOOL v295 = (unint64_t *)*v295;
                    }
                    unint64_t v296 = *v295;
                    unsigned int v297 = __clz(v296) ^ 0x3F | 0x100;
                    if (!v296) {
                      unsigned int v297 = 0;
                    }
                    __int16 v291 = v297 & 0x7F;
                    unsigned int v294 = v297 >> 8;
                  }
                  sub_1CD68E4E0((uint64_t)&v491, (uint64_t)__dst, v469, v469, *v290, v291 | ((_WORD)v294 << 8), *(void *)&v292[32 * (v469 | 2)]);
                }
                goto LABEL_392;
              }
              if (*(void *)(v229 + 24) == *((void *)v225 + 9) && *(_DWORD *)(v229 + 36) == 187)
              {
                if (!byte_1EBCE6230) {
                  goto LABEL_392;
                }
                char v231 = 0;
                unsigned int v469 = 1;
                uint64_t v230 = 1;
                goto LABEL_391;
              }
            }
            unsigned int data = 0;
            for (char k = 84; ; char k = v225[16])
            {
              LODWORD(v572.__r_.__value_.__l.__data_) = data;
              if (k == 84) {
                uint64_t v283 = 0;
              }
              else {
                uint64_t v283 = k == 39 ? (*((_DWORD *)v225 + 20) + 1) : 2;
              }
              int v284 = *((_DWORD *)v225 + 5);
              if (v284 < 0 && (uint64_t v289 = v284 & 0x7FFFFFF, (*(void *)&v225[-32 * v289 - 8] & 0xFFFFFFFF0) != 0))
              {
                uint64_t v286 = -v289;
                int v285 = *(_DWORD *)&v225[-32 * v289 - 12]
                     - *(_DWORD *)&v225[-*(void *)&v225[-32 * v289 - 8] + -32 * v289];
              }
              else
              {
                int v285 = 0;
                uint64_t v286 = -(uint64_t)(v284 & 0x7FFFFFF);
              }
              if (data >= ((-32 - 32 * v283 + 32 * (unint64_t)-v285 - 32 * v286) >> 5)) {
                break;
              }
              if (byte_1EBCE6470)
              {
                int HasAttr = llvm::CallBase::paramHasAttr((uint64_t)v225, data, 69);
                unsigned int data = v572.__r_.__value_.__l.__data_;
                if (HasAttr)
                {
                  BOOL v288 = sub_1CCAD960C(v478, (const llvm::Instruction *)__dst, *(llvm **)&v225[32 * LODWORD(v572.__r_.__value_.__l.__data_)+ -32 * (*((_DWORD *)v225 + 5) & 0x7FFFFFF)]);
                  unsigned int data = v572.__r_.__value_.__l.__data_;
                  if (!v288)
                  {
                    v556.__r_.__value_.__r.__words[0] = 0;
                    v556.__r_.__value_.__r.__words[0] = sub_1CD49471C((uint64_t)v225, (int)v572.__r_.__value_.__l.__data_);
                    LOBYTE(v552) = 0;
                    v489[0] = 0;
                    sub_1CD68E3C4((uint64_t)&v491, (uint64_t *)&__dst, (unsigned int *)&v572, (char *)&v552, (uint64_t *)&v556, v489);
                    unsigned int data = v572.__r_.__value_.__l.__data_;
                  }
                }
              }
              ++data;
            }
          }
        }
LABEL_392:
        if (v492)
        {
          unsigned int v232 = (char *)v491;
          unsigned int v233 = (char *)v491 + 48 * v492;
          while (1)
          {
            if (byte_1EA61C7E8) {
              BOOL v234 = byte_1EA61C968 == 0;
            }
            else {
              BOOL v234 = 1;
            }
            if (!v234)
            {
              uint64_t v235 = **(void **)v232;
              int64_t v236 = (char *)__b;
              unint64_t v237 = v547;
              if (*((void *)v232 + 5))
              {
                if (__b == v547)
                {
                  unsigned int v238 = HIDWORD(v549);
                  int v239 = (char *)__b + 8 * HIDWORD(v549);
                  if (HIDWORD(v549))
                  {
                    uint64_t v240 = 0;
                    while (*(void *)((char *)__b + v240) != v235)
                    {
                      v240 += 8;
                      if (8 * HIDWORD(v549) == v240) {
                        goto LABEL_442;
                      }
                    }
                    int v239 = (char *)__b + v240;
                  }
LABEL_442:
                  unint64_t v237 = __b;
                }
                else
                {
                  int v246 = v549 - 1;
                  unsigned int v247 = (v549 - 1) & ((v235 >> 4) ^ (v235 >> 9));
                  int v239 = (char *)__b + 8 * v247;
                  uint64_t v248 = *(void *)v239;
                  if (*(void *)v239 == -1)
                  {
                    unint64_t v249 = 0;
LABEL_449:
                    if (v249) {
                      int v239 = v249;
                    }
                    unsigned int v238 = HIDWORD(v549);
                    if (*(void *)v239 != v235) {
                      int v239 = (char *)__b + 8 * v549;
                    }
                  }
                  else
                  {
                    unint64_t v249 = 0;
                    int v250 = 1;
                    while (v248 != v235)
                    {
                      if (v249) {
                        BOOL v251 = 0;
                      }
                      else {
                        BOOL v251 = v248 == -2;
                      }
                      if (v251) {
                        unint64_t v249 = v239;
                      }
                      unsigned int v252 = v247 + v250++;
                      unsigned int v247 = v252 & v246;
                      int v239 = (char *)__b + 8 * (v252 & v246);
                      uint64_t v248 = *(void *)v239;
                      if (*(void *)v239 == -1) {
                        goto LABEL_449;
                      }
                    }
                    unsigned int v238 = HIDWORD(v549);
                  }
                }
                if (__b == v237) {
                  unsigned int v261 = v238;
                }
                else {
                  unsigned int v261 = v549;
                }
                if (v239 != (char *)__b + 8 * v261) {
                  goto LABEL_463;
                }
                goto LABEL_462;
              }
              uint64_t v241 = HIDWORD(v549);
              if (__b != v547)
              {
                unsigned int v245 = v549;
LABEL_427:
                if (3 * v245 <= 4 * (HIDWORD(v549) - v550))
                {
                  if (v245 >= 0x40) {
                    v245 *= 2;
                  }
                  else {
                    unsigned int v245 = 128;
                  }
                }
                else if (v245 - HIDWORD(v549) >= v245 >> 3)
                {
LABEL_429:
                  unsigned int v253 = v245 - 1;
                  unsigned int v254 = (v245 - 1) & ((v235 >> 4) ^ (v235 >> 9));
                  unsigned int v255 = &v236[8 * v254];
                  uint64_t v256 = *(void *)v255;
                  if (*(void *)v255 != -1)
                  {
                    BOOL v257 = 0;
                    int v258 = 1;
                    while (v256 != v235)
                    {
                      if (v257) {
                        BOOL v259 = 0;
                      }
                      else {
                        BOOL v259 = v256 == -2;
                      }
                      if (v259) {
                        BOOL v257 = v255;
                      }
                      unsigned int v260 = v254 + v258++;
                      unsigned int v254 = v260 & v253;
                      unsigned int v255 = &v236[8 * (v260 & v253)];
                      uint64_t v256 = *(void *)v255;
                      if (*(void *)v255 == -1) {
                        goto LABEL_455;
                      }
                    }
                    goto LABEL_463;
                  }
                  BOOL v257 = 0;
LABEL_455:
                  if (v257) {
                    uint64_t v262 = v257;
                  }
                  else {
                    uint64_t v262 = v255;
                  }
                  if (*(void *)v262 == v235) {
                    goto LABEL_463;
                  }
                  if (*(void *)v262 == -2) {
                    --v550;
                  }
                  else {
                    ++HIDWORD(v549);
                  }
                  *(void *)uint64_t v262 = v235;
                  goto LABEL_462;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v547, v245);
                unsigned int v245 = v549;
                int64_t v236 = (char *)__b;
                goto LABEL_429;
              }
              if (HIDWORD(v549))
              {
                int v242 = 0;
                uint64_t v243 = 8 * HIDWORD(v549);
                int v244 = __b;
                while (*v244 != v235)
                {
                  if (*v244 == -2) {
                    int v242 = v244;
                  }
                  ++v244;
                  v243 -= 8;
                  if (!v243)
                  {
                    if (!v242) {
                      goto LABEL_413;
                    }
                    *int v242 = v235;
                    --v550;
                    goto LABEL_462;
                  }
                }
                goto LABEL_463;
              }
LABEL_413:
              unsigned int v245 = v549;
              if (HIDWORD(v549) >= v549) {
                goto LABEL_427;
              }
              ++HIDWORD(v549);
              *((void *)__b + v241) = v235;
            }
LABEL_462:
            uint64_t v263 = (_OWORD *)sub_1CD58643C((uint64_t)v544, (unint64_t)v232, 1);
            unsigned int v264 = (char *)v544[0] + 48 * LODWORD(v544[1]);
            long long v266 = v263[1];
            long long v265 = v263[2];
            _OWORD *v264 = *v263;
            v264[1] = v266;
            v264[2] = v265;
            ++LODWORD(v544[1]);
            ++v220;
LABEL_463:
            v232 += 48;
            if (v232 == v233) {
              goto LABEL_519;
            }
          }
        }
        if (byte_1EBCE6D70 | byte_1EBCE6E30
          && v219
          && *(unsigned char *)(v221 + 16) == 81
          && (*(_WORD *)(v221 + 18) & 0x3E) != 0x20)
        {
          int v269 = *(_DWORD *)(v221 + 20);
          uint64_t v270 = (v269 & 0x40000000) != 0 ? *(unsigned char ***)(v221 - 8) : (unsigned char **)(v221 - 32 * (v269 & 0x7FFFFFF));
          uint64_t v277 = *v270;
          if (*(unsigned char *)(*(void *)v277 + 8) == 15 || v277[16] == 75)
          {
            uint64_t v278 = (v269 & 0x40000000) != 0 ? *(void *)(v221 - 8) : v221 - 32 * (v269 & 0x7FFFFFF);
            uint64_t v279 = *(unsigned char **)(v278 + 32);
            if (*(unsigned char *)(*(void *)v279 + 8) == 15 || v279[16] == 75) {
              goto LABEL_517;
            }
          }
        }
        if (byte_1EBCE6D70 | byte_1EA61C2A8 && v219 && *(unsigned char *)(v221 + 16) == 43)
        {
          int v267 = *(_DWORD *)(v221 + 20);
          unsigned int v268 = (v267 & 0x40000000) != 0 ? *(unsigned char ***)(v221 - 8) : (unsigned char **)(v221 - 32 * (v267 & 0x7FFFFFF));
          long long v271 = *v268;
          if (*(unsigned char *)(*(void *)v271 + 8) == 15 || v271[16] == 75)
          {
            uint64_t v272 = (v267 & 0x40000000) != 0 ? *(void *)(v221 - 8) : v221 - 32 * (v267 & 0x7FFFFFF);
            std::string v273 = *(unsigned char **)(v272 + 32);
            if (*(unsigned char *)(*(void *)v273 + 8) == 15 || v273[16] == 75)
            {
LABEL_517:
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + LODWORD(__p[1])) = v221;
              ++LODWORD(__p[1]);
              goto LABEL_519;
            }
          }
        }
        int v274 = sub_1CBFB3AB0(v221);
        if (!v219 || !v274)
        {
          unsigned int v275 = *(unsigned __int8 *)(v221 + 16) - 33;
          if (v275 <= 0x33 && ((1 << v275) & 0x8000000000041) != 0)
          {
            if (__b == v547) {
              goto LABEL_497;
            }
            if (v549 >= 0x21 && 4 * (HIDWORD(v549) - v550) < v549)
            {
              llvm::SmallPtrSetImplBase::shrink_and_clear(&v547);
            }
            else
            {
              memset(__b, 255, 8 * v549);
LABEL_497:
              int v550 = 0;
              HIDWORD(v549) = 0;
            }
            uint64_t v276 = *((void *)v219 + 5);
            if ((v276 && (*(unsigned char *)(v276 + 16) & 1) != 0
               || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v219 - 24), 32))
              && (!*((void *)v219 + 3) && (*(v219 - 1) & 0x20) == 0
               || !llvm::Instruction::getMetadataImpl((uint64_t ***)v219 - 3, "nosanitize", 0xAuLL)))
            {
              if (LODWORD(v539[0].__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v539[0].__r_.__value_.__r.__words[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v539[0].__r_.__value_.__r.__words[0] + 8 * LODWORD(v539[0].__r_.__value_.__r.__words[1])) = v219 - 24;
              ++LODWORD(v539[0].__r_.__value_.__r.__words[1]);
            }
          }
          if (v219 && *(unsigned char *)(v221 + 16) == 84) {
            llvm::maybeMarkSanitizerLibraryCallNoBuiltin(v221, v462);
          }
          goto LABEL_519;
        }
        if (v541 >= (unint64_t)HIDWORD(v541)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v540 + v541) = v221;
        LODWORD(v541) = v541 + 1;
        ++v220;
LABEL_519:
        int v280 = dword_1EBCE6830;
        if (v491 != v493) {
          free(v491);
        }
        if (v220 < v280)
        {
          unsigned int v219 = (char *)*((void *)v219 + 1);
          if (v219 != v476) {
            continue;
          }
        }
        break;
      }
    }
    int v214 = (llvm *)*((void *)v472 + 1);
  }
  while (v214 != v7);
  unsigned int v216 = v544[1];
  unsigned int v215 = v541;
  unsigned int v217 = v544[0];
  int v213 = v452;
LABEL_567:
  BOOL v301 = dword_1EA61C428 >= 0 && v216 + (unint64_t)v215 > dword_1EA61C428;
  char v302 = v301;
  unsigned __int8 v457 = v302;
  __dst = (std::string::value_type *)(v213[5] + 34);
  int v480 = v462;
  long long v481 = xmmword_1CFB27C20;
  unsigned int v483 = 1;
  uint64_t v482 = 0;
  unsigned int v484 = v488;
  uint64_t v485 = v488;
  uint64_t v486 = 8;
  int v487 = 0;
  uint64_t v303 = v478;
  int v304 = 0;
  if (!v216)
  {
    uint64_t v305 = v215;
    goto LABEL_679;
  }
  BOOL v453 = &v217[6 * v216];
  while (2)
  {
    if (dword_1EA61D1A8 < 0 || dword_1EA61D268 < 0)
    {
      ++v304;
      goto LABEL_584;
    }
    BOOL v306 = v304 >= dword_1EA61D1A8 && v304 <= dword_1EA61D268;
    ++v304;
    if (v306)
    {
LABEL_584:
      int v456 = v304;
      int v307 = v213[5];
      uint64_t v473 = *(llvm **)*v217;
      int v468 = dword_1EA61CC68;
      if (byte_1EA61C7E8) {
        BOOL v308 = byte_1EA61CA28 == 0;
      }
      else {
        BOOL v308 = 1;
      }
      if (!v308
        && ((UnderlyingObject = llvm::getUnderlyingObject(v473, (const llvm::Value *)6)) != 0
          ? (BOOL v314 = *((unsigned char *)UnderlyingObject + 16) == 3)
          : (BOOL v314 = 0),
            v314
         && (!byte_1EBCE6CB0
          || (*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF) != 0
          && ((uint64_t v315 = *(void *)(v303 + 1000),
               uint64_t v316 = sub_1CCAD3BE0(v315, (uint64_t)UnderlyingObject),
               *(void *)v315 + 56 * *(unsigned int *)(v315 + 16) == v316)
           || !*(unsigned char *)(v316 + 48)))
         && sub_1CCAD99A0((llvm::ObjectSizeOffsetVisitor *)&__dst, v473, v217[3], v310, v311, v312, v313))
        || (byte_1EA61C7E8 ? (BOOL v317 = byte_1EA61CAE8 == 0) : (BOOL v317 = 1),
            !v317
         && *((unsigned char *)llvm::getUnderlyingObject(v473, (const llvm::Value *)6) + 16) == 59
         && sub_1CCAD99A0((llvm::ObjectSizeOffsetVisitor *)&__dst, v473, v217[3], v318, v319, v320, v321)))
      {
        int v304 = v456;
        goto LABEL_677;
      }
      uint64_t v322 = v217[5];
      if (!v322)
      {
        sub_1CCAD9AAC(v303, *(void *)(*v217 + 24), *(uint64_t ***)(*v217 + 24), v473, *((_WORD *)v217 + 16), 1 << *(_DWORD *)(v303 + 96), *((_DWORD *)v217 + 6), *((unsigned __int8 *)v217 + 8) != 0, v457, v468);
        int v213 = v452;
        int v304 = v456;
        goto LABEL_677;
      }
      int v463 = *((unsigned __int8 *)v217 + 8);
      unsigned int v464 = 1 << *(_DWORD *)(v303 + 96);
      unsigned int v454 = v217;
      uint64_t v323 = v217[2];
      uint64_t v466 = v323;
      if ((*(_DWORD *)(v323 + 8) & 0xFE) == 0x12) {
        uint64_t v323 = **(void **)(v323 + 16);
      }
      uint64_t v324 = (uint64_t)(v307 + 34);
      int v325 = *(llvm::ConstantInt **)(v303 + 72);
      uint64_t v326 = *(void *)(*v217 + 24);
      uint64_t v461 = *((unsigned __int16 *)v217 + 16);
      int v328 = sub_1CB83544C(v324, v323);
      if (v327 == 1) {
      unint64_t v329 = *(unsigned int *)(v466 + 32);
      }
      int v459 = llvm::ConstantInt::get(v325, 0, 0);
      unint64_t v470 = v329;
      if (!v329)
      {
LABEL_675:
        uint64_t v303 = v478;
        int v213 = v452;
        int v304 = v456;
        unsigned int v217 = v454;
        goto LABEL_677;
      }
      int v458 = v325;
      unint64_t v330 = 0;
      while (1)
      {
        if (*(unsigned char *)(v322 + 16) != 10)
        {
          uint64_t v335 = 0;
          unint64_t v336 = **(void ***)v326;
          int v491 = v493;
          uint64_t v492 = 0x200000000;
          int v496 = v336;
          int v497 = &v505;
          int v498 = v506;
          uint64_t v499 = 0;
          int v500 = 0;
          __int16 v501 = 512;
          char v502 = 7;
          uint64_t v494 = 0;
          unsigned int v495 = 0;
          uint64_t v503 = 0;
          uint64_t v504 = 0;
          int v505 = &unk_1F2616E88;
          v506[0] = &unk_1F2617008;
          uint64_t v494 = *(uint64_t **)(v326 + 40);
          unsigned int v495 = (uint64_t **)(v326 + 24);
          unsigned int v337 = *(unsigned __int8 **)(v326 + 48);
          v572.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
          if (v337)
          {
            llvm::MetadataTracking::track((uint64_t)&v572, v337, 2);
            uint64_t v335 = v572.__r_.__value_.__r.__words[0];
          }
          sub_1CB8461A4((uint64_t)&v491, 0, v335);
          if (!v572.__r_.__value_.__r.__words[0])
          {
LABEL_624:
            __int16 v558 = 257;
            BOOL v339 = *(llvm::ConstantInt **)(*v496 + 1984);
            unsigned int v340 = *(_DWORD *)(*v496 + 1992);
            LODWORD(v572.__r_.__value_.__r.__words[1]) = v340 >> 8;
            if (v340 >> 8 <= 0x40)
            {
              if (v340 <= 0xFF) {
                unint64_t v341 = 0;
              }
              else {
                unint64_t v341 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v340) + 63);
              }
              v572.__r_.__value_.__r.__words[0] = v341 & v330;
              unsigned int v342 = (unsigned __int8 *)llvm::ConstantInt::get(v339, (llvm::LLVMContext *)&v572, v338);
              if (LODWORD(v572.__r_.__value_.__r.__words[1]) >= 0x41 && v572.__r_.__value_.__r.__words[0]) {
                MEMORY[0x1D25D9CB0](v572.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
              }
              unsigned int v343 = sub_1CB8445F4((uint64_t)&v491, (unsigned __int8 *)v322, v342, (uint64_t)&v556);
              sub_1CD1290BC((uint64_t)v343, v326);
            }
            operator new[]();
          }
          int v355 = *v572.__r_.__value_.__l.__data_;
          if ((v355 - 4) > 0x1E)
          {
            if ((v355 - 3) >= 0xFFFFFFFE) {
              std::string::size_type v359 = v572.__r_.__value_.__r.__words[0];
            }
            else {
              std::string::size_type v359 = 0;
            }
            if ((v355 - 3) < 0xFFFFFFFE)
            {
              if (v355 == 3) {
                *(void *)(v572.__r_.__value_.__r.__words[0] + 8) = 0;
              }
              goto LABEL_624;
            }
            unint64_t v357 = v359 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v572.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
              && !*(_DWORD *)(v572.__r_.__value_.__r.__words[0] + 12))
            {
              goto LABEL_624;
            }
            uint64_t v356 = *(void *)(v572.__r_.__value_.__r.__words[0] + 16);
            if ((v356 & 4) == 0) {
              goto LABEL_624;
            }
            unint64_t v357 = v356 & 0xFFFFFFFFFFFFFFF8;
            if (!v357) {
              goto LABEL_624;
            }
          }
          v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&v572;
          sub_1CC5FA668(v357 + 16, &v556);
          goto LABEL_624;
        }
        uint64_t v331 = *(void *)(v322 - 32 * (*(_DWORD *)(v322 + 20) & 0x7FFFFFF) + 32 * v330);
        if (v331) {
          BOOL v332 = *(unsigned char *)(v331 + 16) == 16;
        }
        else {
          BOOL v332 = 0;
        }
        unint64_t v333 = (uint64_t **)v326;
        if (!v332) {
          goto LABEL_630;
        }
        uint64_t v334 = *(unsigned int *)(v331 + 32);
        if (v334 > 0x40) {
          break;
        }
        unint64_t v333 = (uint64_t **)v326;
        if (*(void *)(v331 + 24)) {
          goto LABEL_630;
        }
LABEL_635:
        if (++v330 == v470) {
          goto LABEL_675;
        }
      }
      int v348 = 0;
      int64_t v349 = (unint64_t)(v334 + 63) >> 6;
      do
      {
        BOOL v301 = v349-- < 1;
        if (v301) {
          break;
        }
        unint64_t v350 = *(void *)(*(void *)(v331 + 24) + 8 * v349);
        v348 += __clz(v350);
      }
      while (!v350);
      int v351 = v334 | 0xFFFFFFC0;
      if ((v334 & 0x3F) == 0) {
        int v351 = 0;
      }
      unint64_t v333 = (uint64_t **)v326;
      if (v348 + v351 == v334) {
        goto LABEL_635;
      }
LABEL_630:
      uint64_t v344 = 0;
      uint64_t v345 = **v333;
      int v491 = v493;
      uint64_t v492 = 0x200000000;
      int v496 = (void *)v345;
      int v497 = &v505;
      int v498 = v506;
      uint64_t v499 = 0;
      int v500 = 0;
      __int16 v501 = 512;
      char v502 = 7;
      uint64_t v494 = 0;
      unsigned int v495 = 0;
      uint64_t v503 = 0;
      uint64_t v504 = 0;
      int v505 = &unk_1F2616E88;
      v506[0] = &unk_1F2617008;
      uint64_t v494 = v333[5];
      unsigned int v495 = v333 + 3;
      unsigned int v346 = (unsigned __int8 *)v333[6];
      v572.__r_.__value_.__r.__words[0] = (std::string::size_type)v346;
      if (v346)
      {
        llvm::MetadataTracking::track((uint64_t)&v572, v346, 2);
        uint64_t v344 = v572.__r_.__value_.__r.__words[0];
      }
      sub_1CB8461A4((uint64_t)&v491, 0, v344);
      if (!v572.__r_.__value_.__r.__words[0])
      {
LABEL_633:
        v572.__r_.__value_.__r.__words[0] = (std::string::size_type)v459;
        v572.__r_.__value_.__l.__size_ = (std::string::size_type)llvm::ConstantInt::get(v458, v330, 0);
        __int16 v558 = 257;
        uint64_t v347 = (llvm::CastInst *)sub_1CC27CEC0((uint64_t *)&v491, v466, (uint64_t *)v473, (uint64_t *)&v572, 2, (uint64_t)&v556);
        unint64_t v329 = v329 & 0xFFFFFFFFFFFF0000 | v461;
        sub_1CCAD9AAC(v478, v326, v333, v347, v329, v464, (v328 + 7) & 0xFFFFFFF8, v463 != 0, v457, v468);
        if (v491 != v493) {
          free(v491);
        }
        goto LABEL_635;
      }
      int v352 = *v572.__r_.__value_.__l.__data_;
      if ((v352 - 4) > 0x1E)
      {
        if ((v352 - 3) >= 0xFFFFFFFE) {
          std::string::size_type v358 = v572.__r_.__value_.__r.__words[0];
        }
        else {
          std::string::size_type v358 = 0;
        }
        if ((v352 - 3) < 0xFFFFFFFE)
        {
          if (v352 == 3) {
            *(void *)(v572.__r_.__value_.__r.__words[0] + 8) = 0;
          }
          goto LABEL_633;
        }
        unint64_t v354 = v358 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v572.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
          && !*(_DWORD *)(v572.__r_.__value_.__r.__words[0] + 12))
        {
          goto LABEL_633;
        }
        uint64_t v353 = *(void *)(v572.__r_.__value_.__r.__words[0] + 16);
        if ((v353 & 4) == 0) {
          goto LABEL_633;
        }
        unint64_t v354 = v353 & 0xFFFFFFFFFFFFFFF8;
        if (!v354) {
          goto LABEL_633;
        }
      }
      v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&v572;
      sub_1CC5FA668(v354 + 16, &v556);
      goto LABEL_633;
    }
LABEL_677:
    v217 += 6;
    if (v217 != v453) {
      continue;
    }
    break;
  }
  uint64_t v305 = v541;
  int v467 = 1;
  unsigned int v215 = v541;
LABEL_679:
  if (!v215) {
    goto LABEL_718;
  }
  uint64_t v360 = (uint64_t *)v540;
  uint64_t v361 = 8 * v305;
  while (2)
  {
    uint64_t v362 = *v360;
    if (dword_1EA61D1A8 < 0
      || dword_1EA61D268 < 0
      || (v304 >= dword_1EA61D1A8 ? (BOOL v363 = v304 <= dword_1EA61D268) : (BOOL v363 = 0), ++v304, v363))
    {
      uint64_t v364 = 0;
      uint64_t v365 = **(void ***)v362;
      int v491 = v493;
      uint64_t v492 = 0x200000000;
      int v496 = v365;
      int v497 = &v505;
      int v498 = v506;
      uint64_t v499 = 0;
      int v500 = 0;
      __int16 v501 = 512;
      char v502 = 7;
      uint64_t v494 = 0;
      unsigned int v495 = 0;
      uint64_t v503 = 0;
      uint64_t v504 = 0;
      int v505 = &unk_1F2616E88;
      v506[0] = &unk_1F2617008;
      uint64_t v494 = *(uint64_t **)(v362 + 40);
      unsigned int v495 = (uint64_t **)(v362 + 24);
      uint64_t v366 = *(unsigned __int8 **)(v362 + 48);
      v572.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
      if (v366)
      {
        llvm::MetadataTracking::track((uint64_t)&v572, v366, 2);
        uint64_t v364 = v572.__r_.__value_.__r.__words[0];
      }
      sub_1CB8461A4((uint64_t)&v491, 0, v364);
      if (!v572.__r_.__value_.__r.__words[0])
      {
LABEL_691:
        int v367 = *(_DWORD *)(*(void *)(v362 - 32) + 36);
        if ((v367 - 196) >= 2)
        {
          if (v367 == 199)
          {
            uint64_t v371 = v478;
            int v372 = *(uint64_t ***)(v478 + 976);
            unint64_t v373 = *(uint64_t ***)(v478 + 984);
            uint64_t v382 = *(llvm::CastInst **)(v362 - 32 * (*(_DWORD *)(v362 + 20) & 0x7FFFFFF));
            __int32 v383 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
            __int16 v558 = 257;
            v555[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v491, v382, v383, (uint64_t)&v556, v384);
            uint64_t v385 = *(llvm::CastInst **)(v362 - 32 * (*(_DWORD *)(v362 + 20) & 0x7FFFFFF) + 32);
            uint64_t v386 = (llvm::Type ***)(*v496 + 1960);
            __int16 v573 = 257;
            uint64_t v380 = sub_1CBF56614((uint64_t)&v491, v385, v386, 0, (uint64_t)&v572, v387);
LABEL_700:
            v555[1] = (uint64_t)v380;
            uint64_t v388 = *(llvm::CastInst **)(v362 - 32 * (*(_DWORD *)(v362 + 20) & 0x7FFFFFF) + 64);
            uint64_t v389 = *(llvm::Type ****)(v371 + 72);
            __int16 v554 = 257;
            v555[2] = (uint64_t)sub_1CBF56614((uint64_t)&v491, v388, v389, 0, (uint64_t)&v552, v381);
            __int16 v490 = 257;
            sub_1CB845BAC((uint64_t *)&v491, v372, v373, v555, 3, (uint64_t)v489, 0);
LABEL_701:
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          if (v367 != 194) {
            goto LABEL_701;
          }
        }
        BOOL v368 = v367 == 197;
        uint64_t v369 = 960;
        if (v368) {
          uint64_t v369 = 944;
        }
        uint64_t v370 = v303 + 944;
        if (!v368) {
          uint64_t v370 = v303 + 960;
        }
        uint64_t v371 = v478;
        int v372 = *(uint64_t ***)(v478 + v369);
        unint64_t v373 = *(uint64_t ***)(v370 + 8);
        int v374 = *(llvm::CastInst **)(v362 - 32 * (*(_DWORD *)(v362 + 20) & 0x7FFFFFF));
        uint64_t v375 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
        __int16 v558 = 257;
        v555[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v491, v374, v375, (uint64_t)&v556, v376);
        int v377 = *(llvm::CastInst **)(v362 - 32 * (*(_DWORD *)(v362 + 20) & 0x7FFFFFF) + 32);
        int64_t v378 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v496 + 1912), 0);
        __int16 v573 = 257;
        uint64_t v380 = sub_1CC277FE0((uint64_t)&v491, v377, v378, (uint64_t)&v572, v379);
        goto LABEL_700;
      }
      int v390 = *v572.__r_.__value_.__l.__data_;
      if ((v390 - 4) > 0x1E)
      {
        if ((v390 - 3) >= 0xFFFFFFFE) {
          std::string::size_type v393 = v572.__r_.__value_.__r.__words[0];
        }
        else {
          std::string::size_type v393 = 0;
        }
        if ((v390 - 3) < 0xFFFFFFFE)
        {
          if (v390 == 3) {
            *(void *)(v572.__r_.__value_.__r.__words[0] + 8) = 0;
          }
          goto LABEL_691;
        }
        unint64_t v392 = v393 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v572.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
          && !*(_DWORD *)(v572.__r_.__value_.__r.__words[0] + 12))
        {
          goto LABEL_691;
        }
        uint64_t v391 = *(void *)(v572.__r_.__value_.__r.__words[0] + 16);
        if ((v391 & 4) == 0) {
          goto LABEL_691;
        }
        unint64_t v392 = v391 & 0xFFFFFFFFFFFFFFF8;
        if (!v392) {
          goto LABEL_691;
        }
      }
      v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&v572;
      sub_1CC5FA668(v392 + 16, &v556);
      goto LABEL_691;
    }
    ++v360;
    v361 -= 8;
    if (v361) {
      continue;
    }
    break;
  }
  int v467 = 1;
  uint64_t v303 = v478;
  int v213 = v452;
LABEL_718:
  int v491 = v213;
  uint64_t v492 = v303;
  llvm::DIBuilder::DIBuilder((uint64_t)v493, v213[5], 0, 0);
  uint64_t v394 = *(llvm::PointerType **)(v303 + 72);
  v506[42] = *(void *)v303;
  v506[43] = v394;
  unint64_t v395 = llvm::PointerType::get(v394, 0);
  long long v507 = *(_OWORD *)(v303 + 96);
  uint64_t v396 = *(void *)(v303 + 112);
  v506[44] = v395;
  uint64_t v508 = v396;
  unsigned int v509 = v511;
  uint64_t v510 = 0x1000000000;
  unsigned int v512 = v514;
  uint64_t v513 = 0x1000000000;
  BOOL v515 = v517;
  uint64_t v516 = 0x800000000;
  bzero(&v518, 0x11A0uLL);
  uint64_t v519 = v521;
  uint64_t v520 = 0x800000000;
  BOOL v522 = v524;
  uint64_t v523 = 0x800000000;
  v524[256] = 0;
  unint64_t v525 = &v527;
  uint64_t v526 = 0x100000000;
  unint64_t v528 = v530;
  uint64_t v529 = 0x100000000;
  *(_OWORD *)&v530[8] = 0u;
  __int16 v531 = 0;
  if (byte_1EBCE68F0)
  {
    uint64_t v398 = (uint64_t)(v213[5] + 27);
    __int16 v573 = 260;
    v572.__r_.__value_.__r.__words[0] = v398;
    llvm::Triple::Triple((llvm::Triple *)&v556, (const llvm::Twine *)&v572);
    BOOL v397 = v557 != 25 && v557 != 30;
    if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v556.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v397 = 0;
  }
  BOOL v532 = v397;
  int v455 = sub_1CCAD4414((uint64_t)&v491);
  if (LODWORD(v539[0].__r_.__value_.__r.__words[1]))
  {
    BOOL v422 = (uint64_t ***)v539[0].__r_.__value_.__r.__words[0];
    for (uint64_t m = 8 * LODWORD(v539[0].__r_.__value_.__r.__words[1]); m; m -= 8)
    {
      uint64_t v424 = 0;
      unint64_t v425 = *v422;
      uint64_t v561 = ***v422;
      uint64_t v562 = &v570;
      v563 = v571;
      uint64_t v564 = 0;
      int v565 = 0;
      __int16 v566 = 512;
      char v567 = 7;
      uint64_t v559 = 0;
      uint64_t v560 = 0;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int8x8_t v570 = &unk_1F2616E88;
      v571[0] = &unk_1F2617008;
      uint64_t v559 = v425[5];
      uint64_t v560 = v425 + 3;
      v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&v556.__r_.__value_.__r.__words[2];
      v556.__r_.__value_.__l.__size_ = 0x200000000;
      uint64_t v426 = (unsigned __int8 *)v425[6];
      __int16 v552 = v426;
      if (v426)
      {
        llvm::MetadataTracking::track((uint64_t)&v552, v426, 2);
        uint64_t v424 = (uint64_t)v552;
      }
      sub_1CB8461A4((uint64_t)&v556, 0, v424);
      if (!v552) {
        goto LABEL_765;
      }
      int v429 = *v552;
      if ((v429 - 4) > 0x1E)
      {
        if ((v429 - 3) >= 0xFFFFFFFE) {
          uint64_t v432 = v552;
        }
        else {
          uint64_t v432 = 0;
        }
        if ((v429 - 3) < 0xFFFFFFFE)
        {
          if (v429 == 3) {
            *((void *)v552 + 1) = 0;
          }
          goto LABEL_765;
        }
        unint64_t v431 = (unint64_t)(v432 + 8);
      }
      else
      {
        if ((v552[1] & 0x7F) != 2 && !*((_DWORD *)v552 + 3)) {
          goto LABEL_765;
        }
        uint64_t v430 = *((void *)v552 + 2);
        if ((v430 & 4) == 0) {
          goto LABEL_765;
        }
        unint64_t v431 = v430 & 0xFFFFFFFFFFFFFFF8;
        if (!v431) {
          goto LABEL_765;
        }
      }
      v572.__r_.__value_.__r.__words[0] = (std::string::size_type)&v552;
      sub_1CC5FA668(v431 + 16, &v572);
LABEL_765:
      int v427 = *(uint64_t ***)(v478 + 120);
      int v428 = *(uint64_t ***)(v478 + 128);
      __int16 v573 = 257;
      sub_1CB845BAC((uint64_t *)&v556, v427, v428, 0, 0, (uint64_t)&v572, 0);
      if ((std::string::size_type *)v556.__r_.__value_.__l.__data_ != &v556.__r_.__value_.__r.__words[2]) {
        free(v556.__r_.__value_.__l.__data_);
      }
      ++v422;
    }
  }
  int v400 = v467;
  if (!LODWORD(__p[1])) {
    goto LABEL_783;
  }
  char v401 = (uint64_t ***)__p[0];
  uint64_t v477 = (uint64_t ***)((char *)__p[0] + 8 * LODWORD(__p[1]));
  while (2)
  {
    uint64_t v402 = 0;
    int v403 = *v401;
    uint64_t v404 = ***v401;
    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&v556.__r_.__value_.__r.__words[2];
    v556.__r_.__value_.__l.__size_ = 0x200000000;
    uint64_t v561 = v404;
    uint64_t v562 = &v570;
    v563 = v571;
    uint64_t v564 = 0;
    int v565 = 0;
    __int16 v566 = 512;
    char v567 = 7;
    uint64_t v559 = 0;
    uint64_t v560 = 0;
    uint64_t v568 = 0;
    uint64_t v569 = 0;
    int8x8_t v570 = &unk_1F2616E88;
    v571[0] = &unk_1F2617008;
    uint64_t v559 = v403[5];
    uint64_t v560 = v403 + 3;
    int v405 = (unsigned __int8 *)v403[6];
    __int16 v552 = v405;
    if (v405)
    {
      llvm::MetadataTracking::track((uint64_t)&v552, v405, 2);
      uint64_t v402 = (uint64_t)v552;
    }
    sub_1CB8461A4((uint64_t)&v556, 0, v402);
    if (v552)
    {
      int v418 = *v552;
      if ((v418 - 4) > 0x1E)
      {
        if ((v418 - 3) >= 0xFFFFFFFE) {
          uint64_t v421 = v552;
        }
        else {
          uint64_t v421 = 0;
        }
        if ((v418 - 3) < 0xFFFFFFFE)
        {
          if (v418 == 3) {
            *((void *)v552 + 1) = 0;
          }
          goto LABEL_734;
        }
        unint64_t v420 = (unint64_t)(v421 + 8);
      }
      else
      {
        if ((v552[1] & 0x7F) != 2 && !*((_DWORD *)v552 + 3)) {
          goto LABEL_734;
        }
        uint64_t v419 = *((void *)v552 + 2);
        if ((v419 & 4) == 0) {
          goto LABEL_734;
        }
        unint64_t v420 = v419 & 0xFFFFFFFFFFFFFFF8;
        if (!v420) {
          goto LABEL_734;
        }
      }
      v572.__r_.__value_.__r.__words[0] = (std::string::size_type)&v552;
      sub_1CC5FA668(v420 + 16, &v572);
    }
LABEL_734:
    char v407 = (uint64_t ***)(v478 + 136);
    if (*((unsigned char *)v403 + 16) != 81) {
      char v407 = (uint64_t ***)(v478 + 152);
    }
    uint64_t v408 = *v407;
    int v409 = v407[1];
    unsigned int v553 = 0;
    __int16 v552 = 0;
    int v410 = *((_DWORD *)v403 + 5);
    if ((v410 & 0x40000000) != 0)
    {
      __int16 v552 = (unsigned __int8 *)**(v403 - 1);
      uint64_t v411 = (unsigned __int8 **)*(v403 - 1);
    }
    else
    {
      uint64_t v411 = (unsigned __int8 **)&v403[-4 * (v410 & 0x7FFFFFF)];
      __int16 v552 = *v411;
    }
    char v412 = 0;
    unsigned int v553 = v411[4];
    int v413 = (uint64_t *)&v552;
    uint64_t v414 = 1;
    do
    {
      char v415 = v412;
      int v416 = (llvm::CastInst *)*v413;
      if (*(unsigned char *)(*(void *)*v413 + 8) == 15)
      {
        unsigned int v417 = *(llvm::Value **)(v478 + 72);
        __int16 v573 = 257;
        uint64_t *v413 = (uint64_t)sub_1CC277FE0((uint64_t)&v556, v416, v417, (uint64_t)&v572, v406);
      }
      int v413 = (uint64_t *)&(&v552)[v414];
      char v412 = 1;
      uint64_t v414 = 2;
    }
    while ((v415 & 1) == 0);
    __int16 v573 = 257;
    sub_1CB845BAC((uint64_t *)&v556, v408, v409, (uint64_t *)&v552, 2, (uint64_t)&v572, 0);
    if ((std::string::size_type *)v556.__r_.__value_.__l.__data_ != &v556.__r_.__value_.__r.__words[2]) {
      free(v556.__r_.__value_.__l.__data_);
    }
    if (++v401 != v477) {
      continue;
    }
    break;
  }
  int v400 = 1;
LABEL_783:
  if (LODWORD(v539[0].__r_.__value_.__r.__words[1])) {
    int v433 = 1;
  }
  else {
    int v433 = v455;
  }
  if (v528 != v530) {
    free(v528);
  }
  if (v525 != &v527) {
    free(v525);
  }
  uint64_t v300 = v478;
  if (v522 != v524) {
    free(v522);
  }
  if (v519 != v521) {
    free(v519);
  }
  if (v515 != v517) {
    free(v515);
  }
  if (v512 != v514) {
    free(v512);
  }
  if (v509 != v511) {
    free(v509);
  }
  sub_1CC2DBB1C((uint64_t)v493);
  if (v485 != v484) {
    free(v485);
  }
  uint64_t v9 = v400 | v433;
  if (v483 >= 0x41 && v482) {
    MEMORY[0x1D25D9CB0](v482, 0x1000C8000313F17);
  }
LABEL_805:
  if (__p[0] != v534) {
    free(__p[0]);
  }
  if (v535 != v537) {
    free(v535);
  }
  if ((std::string::size_type *)v539[0].__r_.__value_.__l.__data_ != &v539[0].__r_.__value_.__r.__words[2]) {
    free(v539[0].__r_.__value_.__l.__data_);
  }
  if (v540 != v542) {
    free(v540);
  }
  if (v544[0] != v545) {
    free(v544[0]);
  }
  if (__b != v547) {
    free(__b);
  }
  *(void *)(v300 + 992) = 0;
  sub_1CD3C7F68((_DWORD *)(v300 + 1016));
  return v9;
}

uint64_t sub_1CCACF268(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CCACF2A8(uint64_t a1, void *a2)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x200000000;
  uint64_t v24 = v4;
  uint64_t v25 = &v33;
  long long v26 = v34;
  uint64_t v27 = 0;
  int v28 = 0;
  __int16 v29 = 512;
  char v30 = 7;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v33 = &unk_1F2616E88;
  v34[0] = &unk_1F2617008;
  *(void *)(a1 + 112) = sub_1CD57B9C0((uint64_t)a2, "__asan_before_dynamic_init", (const char *)0x1A, 0, (uint64_t **)(*(void *)v4 + 1576), *(void *)(a1 + 24));
  *(void *)(a1 + 120) = v5;
  *(void *)(a1 + 128) = sub_1CD577C30((uint64_t)a2, "__asan_after_dynamic_init", (const char *)0x19, 0, (uint64_t **)(*(void *)v24 + 1576));
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = sub_1CD661480((uint64_t)a2, "__asan_register_globals", (const char *)0x17, 0, (uint64_t **)(*(void *)v24 + 1576), *(void *)(a1 + 24), *(void *)(a1 + 24));
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = sub_1CD661480((uint64_t)a2, "__asan_unregister_globals", (const char *)0x19, 0, (uint64_t **)(*(void *)v24 + 1576), *(void *)(a1 + 24), *(void *)(a1 + 24));
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = sub_1CD57B9C0((uint64_t)a2, "__asan_register_image_globals", (const char *)0x1D, 0, (uint64_t **)(*(void *)v24 + 1576), *(void *)(a1 + 24));
  *(void *)(a1 + 184) = v9;
  *(void *)(a1 + 192) = sub_1CD57B9C0((uint64_t)a2, "__asan_unregister_image_globals", (const char *)0x1F, 0, (uint64_t **)(*(void *)v24 + 1576), *(void *)(a1 + 24));
  *(void *)(a1 + 200) = v10;
  *(void *)(a1 + 208) = sub_1CCAD3B00((uint64_t)a2, "__asan_register_elf_globals", (const char *)0x1B, 0, (uint64_t **)(*(void *)v24 + 1576), *(void *)(a1 + 24), *(void *)(a1 + 24), *(void *)(a1 + 24));
  *(void *)(a1 + 216) = v11;
  *(void *)(a1 + 224) = sub_1CCAD3B00((uint64_t)a2, "__asan_unregister_elf_globals", (const char *)0x1D, 0, (uint64_t **)(*(void *)v24 + 1576), *(void *)(a1 + 24), *(void *)(a1 + 24), *(void *)(a1 + 24));
  *(void *)(a1 + 232) = v12;
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2]) {
    free(__p.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    int v13 = *(_DWORD *)(a2[63] + 4);
    __int16 v19 = 260;
    uint64_t v17 = a2 + 27;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v17);
    int v14 = v21;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v14 == 11 && v13 == 32) {
      int v16 = 9;
    }
    else {
      int v16 = 8;
    }
    std::to_string(&__p, v16);
    if (byte_1EBCE60B0)
    {
      std::operator+<char>();
    }
    else
    {
      char v18 = 0;
      LOBYTE(v17) = 0;
    }
    llvm::createSanitizerCtorAndInitFunctions((llvm::Module *)a2, "asan.module_ctor", (const char *)0x10, "__asan_init", (const char *)0xB, 0, 0);
  }
  llvm::createSanitizerCtor((llvm::Module *)a2, "asan.module_ctor", (const char *)0x10);
}

void llvm::initializeASanGlobalsMetadataWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE5E98, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCACF93C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE5E98, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCACF93C()
{
}

void llvm::initializeAddressSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE5EA0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCACFA4C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE5EA0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCACFA4C(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v3 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE5E98, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCACF93C;
    v5[1] = &v3;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCE5E98, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  llvm::initializeStackSafetyGlobalInfoWrapperPassPass(this, a2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)this);
  operator new();
}

uint64_t sub_1CCACFB54(uint64_t a1, char a2, char a3, char a4, int a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE5E91;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262B9A8;
  *(unsigned char *)(a1 + 28) = a2;
  *(unsigned char *)(a1 + 29) = a3;
  *(unsigned char *)(a1 + 30) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE5EA0, memory_order_acquire) != -1)
  {
    v9[0] = sub_1CCACFA4C;
    v9[1] = &PassRegistry;
    uint64_t v8 = v9;
    std::__call_once(&qword_1EBCE5EA0, &v8, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::initializeModuleAddressSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE5EA8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCACFC84;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE5EA8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCACFC84()
{
}

uint64_t sub_1CCACFD20(uint64_t a1, char a2, char a3, char a4, char a5, int a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE5E92;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262BA48;
  *(unsigned char *)(a1 + 28) = a2;
  *(unsigned char *)(a1 + 29) = a3;
  *(unsigned char *)(a1 + 30) = a4;
  *(unsigned char *)(a1 + 31) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE5EA8, memory_order_acquire) != -1)
  {
    v10[0] = sub_1CCACFC84;
    v10[1] = &PassRegistry;
    uint64_t v9 = v10;
    std::__call_once(&qword_1EBCE5EA8, &v9, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCACFDE4()
{
}

void sub_1CCACFEB4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262B908;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);

  llvm::Pass::~Pass(a1);
}

void sub_1CCACFF10(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262B908;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCACFF80()
{
  return "ASanGlobalsMetadataWrapperPass";
}

void sub_1CCACFF90(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CCACFF9C(uint64_t a1, llvm::Module *a2)
{
  llvm::GlobalsMetadata::GlobalsMetadata((llvm::GlobalsMetadata *)&v4, a2);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 32), 8);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  *(_DWORD *)(a1 + 48) = v6;
  int v6 = 0;
  MEMORY[0x1D25D9CD0](0, 8);
  return 0;
}

void sub_1CCAD0008()
{
}

void sub_1CCAD0058(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCAD0090()
{
  return "AddressSanitizerFunctionPass";
}

void sub_1CCAD00A0(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EBCE5E90);
  if (byte_1EBCE62F0) {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::StackSafetyGlobalInfoWrapperPass::ID);
  }

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1CCAD0110(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  while (v5 != v6)
  {
    if (*(_UNKNOWN **)v5 == &unk_1EBCE5E90)
    {
      uint64_t v7 = *(void *)(v5 + 8);
LABEL_7:
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &unk_1EBCE5E90);
      if (byte_1EBCE62F0)
      {
        uint64_t v8 = *(uint64_t **)(a1 + 8);
        uint64_t v9 = *v8;
        uint64_t v10 = v8[1];
        if (v9 == v10)
        {
LABEL_11:
          uint64_t v11 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v9 != &llvm::StackSafetyGlobalInfoWrapperPass::ID)
          {
            v9 += 16;
            if (v9 == v10) {
              goto LABEL_11;
            }
          }
          uint64_t v11 = *(void *)(v9 + 8);
        }
        (*(void (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::StackSafetyGlobalInfoWrapperPass::ID);
      }
      uint64_t v12 = *(uint64_t **)(a1 + 8);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (v13 == v14)
      {
LABEL_18:
        uint64_t v15 = 0;
      }
      else
      {
        while (*(char **)v13 != llvm::TargetLibraryInfoWrapperPass::ID)
        {
          v13 += 16;
          if (v13 == v14) {
            goto LABEL_18;
          }
        }
        uint64_t v15 = *(void *)(v13 + 8);
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v15 + 96))(v15, llvm::TargetLibraryInfoWrapperPass::ID);
      uint64_t v17 = v16 + 32;
      if (!*(unsigned char *)(v16 + 232))
      {
        uint64_t v18 = *(void *)(a2 + 40) + 216;
        __int16 v21 = 260;
        v20[0] = v18;
        llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        int v33 = 0;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(void *)&long long v19 = -1;
        *((void *)&v19 + 1) = -1;
        *(_OWORD *)__src = v19;
        long long v25 = v19;
        long long v26 = v19;
        long long v27 = v19;
        long long v28 = v19;
        long long v29 = v19;
        *(_OWORD *)char v30 = v19;
        *(void *)&v30[13] = -1;
        sub_1CC153974((uint64_t)__src, (int *)__p);
        sub_1CD4D04B8(v17, (uint64_t)__src);
        sub_1CD4CFA4C((uint64_t *)__src);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1CC1569E8(__src, v17);
    }
    v5 += 16;
  }
  uint64_t v7 = 0;
  goto LABEL_7;
}

void sub_1CCAD0580()
{
}

void sub_1CCAD05D4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCAD060C()
{
  return "ModuleAddressSanitizer";
}

void sub_1CCAD061C(uint64_t a1, uint64_t a2)
{
}

void sub_1CCAD062C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &unk_1EBCE5E90)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &unk_1EBCE5E90);
  sub_1CCACB6D8((uint64_t)v9, (uint64_t)a2, v8 + 32, *(unsigned char *)(a1 + 28), *(unsigned char *)(a1 + 29), *(unsigned char *)(a1 + 30), *(unsigned char *)(a1 + 31), *(_DWORD *)(a1 + 32));
  sub_1CCACF2A8((uint64_t)v9, a2);
}

void sub_1CCAD070C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  v268[5] = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  int v242 = v246;
  uint64_t v243 = v246;
  uint64_t v244 = 16;
  int v245 = 0;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = a3 + 40;
    uint64_t v7 = *(void *)(a3 + 48);
    if (v7 != a3 + 40)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t ***)(v7 - 48);
        if (!v7) {
          uint64_t v8 = 0;
        }
        if ((*((unsigned char *)v8 + 23) & 0x10) == 0) {
          goto LABEL_48;
        }
        uint64_t v9 = ***v8;
        uint64_t v10 = *(void *)(v9 + 152);
        uint64_t v11 = *(unsigned int *)(v9 + 168);
        if (!v11) {
          goto LABEL_12;
        }
        LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
        uint64_t v14 = *v13;
        if (*v13 != v8) {
          break;
        }
LABEL_13:
        uint64_t v17 = v13[1];
        if ((unint64_t)*v17 >= 2 && *((_WORD *)v17 + 8) == 24415)
        {
          uint64_t v18 = llvm::Value::stripPointerCastsAndAliases((llvm::Value *)*(v8 - 4));
          if (*((unsigned char *)v18 + 16) == 3)
          {
            long long v19 = v18;
            uint64_t v20 = v243;
            uint64_t v21 = HIDWORD(v244);
            if (v243 != v242)
            {
              unsigned int v25 = v244;
LABEL_27:
              if (3 * v25 <= 4 * (HIDWORD(v244) - v245))
              {
                if (v25 >= 0x40) {
                  v25 *= 2;
                }
                else {
                  unsigned int v25 = 128;
                }
              }
              else if (v25 - HIDWORD(v244) >= v25 >> 3)
              {
                goto LABEL_29;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v242, v25);
              unsigned int v25 = v244;
              uint64_t v20 = v243;
LABEL_29:
              unsigned int v26 = v25 - 1;
              unsigned int v27 = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
              long long v28 = &v20[8 * v27];
              long long v29 = *(llvm::Value **)v28;
              if (*(void *)v28 == -1)
              {
                char v30 = 0;
LABEL_41:
                if (v30) {
                  long long v34 = (llvm::Value **)v30;
                }
                else {
                  long long v34 = (llvm::Value **)v28;
                }
                if (*v34 != v19)
                {
                  if (*v34 == (llvm::Value *)-2) {
                    --v245;
                  }
                  else {
                    ++HIDWORD(v244);
                  }
                  *long long v34 = v19;
                }
              }
              else
              {
                char v30 = 0;
                int v31 = 1;
                while (v29 != v19)
                {
                  if (v30) {
                    BOOL v32 = 0;
                  }
                  else {
                    BOOL v32 = v29 == (llvm::Value *)-2;
                  }
                  if (v32) {
                    char v30 = v28;
                  }
                  unsigned int v33 = v27 + v31++;
                  unsigned int v27 = v33 & v26;
                  long long v28 = &v20[8 * (v33 & v26)];
                  long long v29 = *(llvm::Value **)v28;
                  if (*(void *)v28 == -1) {
                    goto LABEL_41;
                  }
                }
              }
              goto LABEL_48;
            }
            if (HIDWORD(v244))
            {
              uint64_t v22 = 0;
              uint64_t v23 = 8 * HIDWORD(v244);
              uint64_t v24 = (llvm::Value **)v243;
              while (*v24 != v18)
              {
                if (*v24 == (llvm::Value *)-2) {
                  uint64_t v22 = v24;
                }
                ++v24;
                v23 -= 8;
                if (!v23)
                {
                  if (!v22) {
                    goto LABEL_24;
                  }
                  uint64_t *v22 = v18;
                  --v245;
                  goto LABEL_48;
                }
              }
              goto LABEL_48;
            }
LABEL_24:
            unsigned int v25 = v244;
            if (HIDWORD(v244) >= v244) {
              goto LABEL_27;
            }
            ++HIDWORD(v244);
            *(void *)&v243[8 * v21] = v18;
          }
        }
LABEL_48:
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v6) {
          goto LABEL_56;
        }
      }
      int v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v8)
        {
          uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_13;
        }
      }
LABEL_12:
      uint64_t v13 = (uint64_t ****)(v10 + 16 * v11);
      goto LABEL_13;
    }
  }
LABEL_56:
  unsigned int v254 = v256;
  uint64_t v255 = 0x1000000000;
  uint64_t v35 = a3 + 8;
  uint64_t v240 = a3;
  uint64_t v36 = *(void *)(a3 + 16);
  if (v36 == a3 + 8) {
    goto LABEL_314;
  }
  do
  {
    if (v36) {
      uint64_t v37 = (uint64_t ***)(v36 - 56);
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = v242;
    if (v243 == v242)
    {
      int v39 = HIDWORD(v244);
      int v40 = &v243[8 * HIDWORD(v244)];
      if (HIDWORD(v244))
      {
        uint64_t v41 = 0;
        while (*(uint64_t ****)&v243[v41] != v37)
        {
          v41 += 8;
          if (8 * HIDWORD(v244) == v41) {
            goto LABEL_79;
          }
        }
        int v40 = &v243[v41];
      }
LABEL_79:
      uint64_t v38 = v243;
    }
    else
    {
      int v42 = v244 - 1;
      unsigned int v43 = (v244 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      int v40 = &v243[8 * v43];
      int v44 = *(uint64_t ****)v40;
      if (*(void *)v40 == -1)
      {
        char v45 = 0;
LABEL_111:
        if (v45) {
          int v40 = v45;
        }
        int v39 = HIDWORD(v244);
        if (*(uint64_t ****)v40 != v37) {
          int v40 = &v243[8 * v244];
        }
      }
      else
      {
        char v45 = 0;
        int v46 = 1;
        while (v44 != v37)
        {
          if (v45) {
            BOOL v47 = 0;
          }
          else {
            BOOL v47 = v44 == (uint64_t ***)-2;
          }
          if (v47) {
            char v45 = v40;
          }
          unsigned int v48 = v43 + v46++;
          unsigned int v43 = v48 & v42;
          int v40 = &v243[8 * (v48 & v42)];
          int v44 = *(uint64_t ****)v40;
          if (*(void *)v40 == -1) {
            goto LABEL_111;
          }
        }
        int v39 = HIDWORD(v244);
      }
    }
    if (v243 == v38) {
      int v49 = v39;
    }
    else {
      int v49 = v244;
    }
    if (v40 != &v243[8 * v49]) {
      goto LABEL_84;
    }
    uint64_t v50 = (uint64_t)v37[3];
    uint64_t v51 = *(void *)a1;
    uint64_t v52 = sub_1CCAD3BE0(*(void *)a1, (uint64_t)v37);
    if (*(void *)v51 + 56 * *(unsigned int *)(v51 + 16) != v52)
    {
      if (*(unsigned char *)(v52 + 49)) {
        goto LABEL_84;
      }
    }
    unsigned int v53 = *(unsigned __int8 *)(v50 + 8);
    if (v53 > 0x11) {
      goto LABEL_140;
    }
    if (((1 << v53) & 0xAC7F) != 0) {
      goto LABEL_90;
    }
    if (((1 << v53) & 0x30000) == 0)
    {
LABEL_140:
      if ((v53 & 0xFE) != 0x12 && v53 != 21) {
        goto LABEL_84;
      }
    }
    if (!llvm::Type::isSizedDerivedType(v50, 0)) {
      goto LABEL_84;
    }
LABEL_90:
    if (v36) {
      BOOL v54 = *((unsigned char *)v37 + 16) == 3;
    }
    else {
      BOOL v54 = 0;
    }
    char v55 = !v54;
    if (v54)
    {
      if ((*((_DWORD *)v37 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_84;
      }
    }
    else if (!*((unsigned char *)v37 + 16) && v37[9] == (uint64_t **)(v37 + 9) && (*((unsigned char *)v37 + 34) & 0x80) == 0)
    {
      goto LABEL_84;
    }
    char v56 = *v37;
    unsigned int v57 = *((_DWORD *)*v37 + 2);
    if (v57 >= 0x100)
    {
      int v67 = *(_DWORD *)(a1 + 64);
      if (v67 != 30 && v67 != 25) {
        goto LABEL_84;
      }
      int v68 = *v37;
      if (((*v37)[1] & 0xFE) == 0x12)
      {
        int v68 = (uint64_t **)*v56[2];
        unsigned int v57 = *((_DWORD *)v68 + 2);
      }
      if ((v57 & 0xFE) == 0x12) {
        unsigned int v57 = *(_DWORD *)(*v68[2] + 8);
      }
      unsigned int v69 = v57 >> 8;
      if (v69 == 3 || v69 == 5) {
        goto LABEL_84;
      }
    }
    int v58 = *((_DWORD *)v37 + 5);
    if ((v58 & 0x10000000) != 0)
    {
      uint64_t v59 = **v56;
      uint64_t v60 = *(void *)(v59 + 152);
      uint64_t v61 = *(unsigned int *)(v59 + 168);
      if (!v61) {
        goto LABEL_128;
      }
      LODWORD(v62) = (v61 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      std::string::size_type v63 = (uint64_t ****)(v60 + 16 * v62);
      BOOL v64 = *v63;
      if (*v63 != v37)
      {
        int v65 = 1;
        while (v64 != (uint64_t ***)-4096)
        {
          int v66 = v62 + v65++;
          uint64_t v62 = v66 & (v61 - 1);
          BOOL v64 = *(uint64_t ****)(v60 + 16 * v62);
          if (v64 == v37)
          {
            std::string::size_type v63 = (uint64_t ****)(v60 + 16 * v62);
            goto LABEL_129;
          }
        }
LABEL_128:
        std::string::size_type v63 = (uint64_t ****)(v60 + 16 * v61);
      }
LABEL_129:
      uint64_t v70 = v63[1];
      if ((unint64_t)*v70 >= 5)
      {
        int v71 = *((_DWORD *)v70 + 4);
        int v72 = *((unsigned __int8 *)v70 + 20);
        if (v71 == 1836477548 && v72 == 46) {
          goto LABEL_84;
        }
      }
      if (v61)
      {
        LODWORD(v74) = (v61 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        int v75 = (uint64_t ****)(v60 + 16 * v74);
        uint64_t v76 = *v75;
        if (*v75 != v37)
        {
          int v77 = 1;
          while (v76 != (uint64_t ***)-4096)
          {
            int v78 = v74 + v77++;
            uint64_t v74 = v78 & (v61 - 1);
            uint64_t v76 = *(uint64_t ****)(v60 + 16 * v74);
            if (v76 == v37)
            {
              int v75 = (uint64_t ****)(v60 + 16 * v74);
              goto LABEL_147;
            }
          }
          goto LABEL_146;
        }
      }
      else
      {
LABEL_146:
        int v75 = (uint64_t ****)(v60 + 16 * v61);
      }
LABEL_147:
      int v80 = v75[1];
      if ((unint64_t)*v80 >= 0xC)
      {
        std::string::size_type v81 = v80[2];
        int v82 = *((_DWORD *)v80 + 6);
        if (v81 == (uint64_t **)0x5F6E6173615F5F5FLL && v82 == 1601070439) {
          goto LABEL_84;
        }
      }
      if (v61)
      {
        LODWORD(v84) = (v61 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        std::string::size_type v85 = (uint64_t ****)(v60 + 16 * v84);
        int v86 = *v85;
        if (*v85 != v37)
        {
          int v87 = 1;
          while (v86 != (uint64_t ***)-4096)
          {
            int v88 = v84 + v87++;
            uint64_t v84 = v88 & (v61 - 1);
            int v86 = *(uint64_t ****)(v60 + 16 * v84);
            if (v86 == v37)
            {
              std::string::size_type v85 = (uint64_t ****)(v60 + 16 * v84);
              goto LABEL_159;
            }
          }
          goto LABEL_158;
        }
      }
      else
      {
LABEL_158:
        std::string::size_type v85 = (uint64_t ****)(v60 + 16 * v61);
      }
LABEL_159:
      uint64_t v89 = v85[1];
      if ((unint64_t)*v89 >= 0xD)
      {
        uint64_t v90 = v89[2];
        uint64_t v91 = *(uint64_t *)((char *)v89 + 21);
        if (v90 == (uint64_t **)0x766F636E61735F5FLL && v91 == 0x5F6E65675F766F63) {
          goto LABEL_84;
        }
      }
      if (v61)
      {
        LODWORD(v93) = (v61 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        uint64_t v94 = (uint64_t ****)(v60 + 16 * v93);
        uint64_t v95 = *v94;
        if (*v94 != v37)
        {
          int v96 = 1;
          while (v95 != (uint64_t ***)-4096)
          {
            int v97 = v93 + v96++;
            uint64_t v93 = v97 & (v61 - 1);
            uint64_t v95 = *(uint64_t ****)(v60 + 16 * v93);
            if (v95 == v37)
            {
              uint64_t v94 = (uint64_t ****)(v60 + 16 * v93);
              goto LABEL_171;
            }
          }
          goto LABEL_170;
        }
      }
      else
      {
LABEL_170:
        uint64_t v94 = (uint64_t ****)(v60 + 16 * v61);
      }
LABEL_171:
      std::string::size_type v98 = v94[1];
      if ((unint64_t)*v98 >= 0xF)
      {
        uint64_t v99 = v98[2];
        uint64_t v100 = *(uint64_t *)((char *)v98 + 23);
        if (v99 == (uint64_t **)0x73615F72646F5F5FLL && v100 == 0x5F6E65675F6E6173) {
          goto LABEL_84;
        }
      }
      if (v61)
      {
        LODWORD(v102) = (v61 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        uint64_t v103 = (uint64_t ****)(v60 + 16 * v102);
        std::string::size_type v104 = *v103;
        if (*v103 != v37)
        {
          int v105 = 1;
          while (v104 != (uint64_t ***)-4096)
          {
            int v106 = v102 + v105++;
            uint64_t v102 = v106 & (v61 - 1);
            std::string::size_type v104 = *(uint64_t ****)(v60 + 16 * v102);
            if (v104 == v37)
            {
              uint64_t v103 = (uint64_t ****)(v60 + 16 * v102);
              goto LABEL_183;
            }
          }
          goto LABEL_182;
        }
      }
      else
      {
LABEL_182:
        uint64_t v103 = (uint64_t ****)(v60 + 16 * v61);
      }
LABEL_183:
      uint64_t v107 = v103[1];
      if (*v107 == (uint64_t **)15)
      {
        std::string::size_type v108 = v107[2];
        uint64_t v109 = *(uint64_t *)((char *)v107 + 23);
        if (v108 == (uint64_t **)0x675F6D766C6C5F5FLL && v109 == 0x7274635F766F6367) {
          goto LABEL_84;
        }
      }
    }
    int v111 = *((_DWORD *)v37 + 8);
    if ((v111 & 0x1C00) == 0)
    {
      char v112 = (BYTE2(v111) & 0x3F) - 1;
      if ((v111 & 0x3F0000) == 0) {
        char v112 = 0;
      }
      LODWORD(v113) = 1 << *(_DWORD *)(a1 + 88);
      unint64_t v113 = v113 <= 0x20 ? 32 : v113;
      if ((v111 & 0x3F0000) == 0 || v113 >> v112)
      {
        if (*(_DWORD *)(a1 + 84) == 1)
        {
          if (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v37)) {
            goto LABEL_84;
          }
          uint64_t v114 = v37[6];
          if (v114)
          {
            if (((*((_DWORD *)v114 + 2) - 2) & 0xFFFFFFFD) == 0) {
              goto LABEL_84;
            }
          }
        }
        else
        {
          if (v55)
          {
            if (!*((unsigned char *)v37 + 16) && (v111 & 0x800000) == 0 && v37[9] == (uint64_t **)(v37 + 9)) {
              goto LABEL_84;
            }
          }
          else if ((v58 & 0x7FFFFFF) == 0)
          {
            goto LABEL_84;
          }
          if (((1 << (v111 & 0xF)) & 0x7D5) == 0
            || (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v37) & 1) != 0
            || v37[6])
          {
            goto LABEL_84;
          }
        }
        if ((*((unsigned char *)v37 + 34) & 0x40) == 0)
        {
          if (*(unsigned char *)(a1 + 8)) {
            goto LABEL_212;
          }
          goto LABEL_242;
        }
        if (*(unsigned char *)(a1 + 8)) {
          goto LABEL_84;
        }
        uint64_t v123 = ***v37;
        BOOL v251 = v37;
        int v124 = *(_DWORD *)(v123 + 2520);
        if (v124)
        {
          uint64_t v125 = *(void *)(v123 + 2504);
          int v126 = v124 - 1;
          unsigned int v127 = v126 & ((v37 >> 4) ^ (v37 >> 9));
          uint64_t v128 = (uint64_t ****)(v125 + 24 * v127);
          uint64_t v129 = *v128;
          if (*v128 == v37) {
            goto LABEL_222;
          }
          size_t v135 = 0;
          int v136 = 1;
          while (v129 != (uint64_t ***)-4096)
          {
            if (v135) {
              BOOL v137 = 0;
            }
            else {
              BOOL v137 = v129 == (uint64_t ***)-8192;
            }
            if (v137) {
              size_t v135 = v128;
            }
            unsigned int v138 = v127 + v136++;
            unsigned int v127 = v138 & v126;
            uint64_t v128 = (uint64_t ****)(v125 + 24 * v127);
            uint64_t v129 = *v128;
            if (*v128 == v37) {
              goto LABEL_222;
            }
          }
          if (v135) {
            uint64_t v139 = v135;
          }
          else {
            uint64_t v139 = v128;
          }
        }
        else
        {
          uint64_t v139 = 0;
        }
        uint64_t v128 = (uint64_t ****)sub_1CC5BF31C(v123 + 2504, (uint64_t)&v251, (uint64_t *)&v251, v139);
        int v140 = (uint64_t ***)v251;
        v128[1] = 0;
        v128[2] = 0;
        void *v128 = v140;
LABEL_222:
        uint64_t v131 = v128[1];
        size_t v130 = (size_t)v128[2];
        unsigned int v260 = v131;
        unsigned int v261 = (uint64_t **)v130;
        if (v130 == 12)
        {
          if (*v131 == (uint64_t **)0x7274702E6D766C6CLL && *((_DWORD *)v131 + 2) == 1752462689) {
            goto LABEL_84;
          }
        }
        else if (v130 == 13 {
               && *v131 == (uint64_t **)0x74656D2E6D766C6CLL
        }
               && *(uint64_t ***)((char *)v131 + 5) == (uint64_t **)0x617461646174656DLL)
        {
          goto LABEL_84;
        }
        if (llvm::StringRef::find((uint64_t *)&v260, "__llvm", 6uLL, 0) != -1
          || llvm::StringRef::find((uint64_t *)&v260, "__LLVM", 6uLL, 0) != -1)
        {
          goto LABEL_84;
        }
        if (v130 >= 0xE)
        {
          if (*v131 == (uint64_t **)0x74696E696572702ELL
            && *(uint64_t ***)((char *)v131 + 6) == (uint64_t **)0x79617272615F7469)
          {
            goto LABEL_84;
          }
        }
        else if (v130 < 0xB)
        {
          goto LABEL_269;
        }
        if (*v131 == (uint64_t **)0x72615F74696E692ELL
          && *(uint64_t ***)((char *)v131 + 3) == (uint64_t **)0x79617272615F7469)
        {
          goto LABEL_84;
        }
        if (*v131 == (uint64_t **)0x72615F696E69662ELL
          && *(uint64_t ***)((char *)v131 + 3) == (uint64_t **)0x79617272615F696ELL)
        {
          goto LABEL_84;
        }
LABEL_269:
        int v144 = *(_DWORD *)(a1 + 84);
        switch(v144)
        {
          case 1:
            if (v130)
            {
              uint64_t v153 = memchr(v131, 36, v130);
              if (v153)
              {
                if (v153 - (unsigned char *)v131 != -1) {
                  goto LABEL_84;
                }
              }
            }
            break;
          case 5:
            unsigned int v252 = 0;
            BOOL v251 = 0;
            unint64_t v249 = 0;
            uint64_t v248 = 0;
            LODWORD(v258) = 0;
            LODWORD(v268[0]) = 0;
            LOBYTE(v257) = 0;
            llvm::MCSectionMachO::ParseSectionSpecifier((uint64_t)v131, v130, (uint64_t *)&v251, (uint64_t *)&v248, (int *)&v258, &v257, v268, &v247);
            if (v252 == (llvm::Type *)6)
            {
              if (*(_DWORD *)v251 == 1112498015 && *((_WORD *)v251 + 2) == 17226) {
                goto LABEL_84;
              }
              int v149 = *(_DWORD *)v251 ^ 0x41445F5F | *((unsigned __int16 *)v251 + 2) ^ 0x4154;
              if (!v149 && v249 >= 7 && *(_DWORD *)v248 == 1651466079 && *(_DWORD *)((char *)v248 + 3) == 1600350818) {
                goto LABEL_84;
              }
              if (!v149 && v249 == 10 && *(void *)v248 == 0x6972747366635F5FLL && *((_WORD *)v248 + 4) == 26478) {
                goto LABEL_84;
              }
              BOOL v152 = *(_DWORD *)v251 == 1163157343 && *((_WORD *)v251 + 2) == 21592;
              if (v152 && (v258 & 2) != 0) {
                goto LABEL_84;
              }
            }
            break;
          case 3:
            if (!v130) {
              goto LABEL_84;
            }
            while (1)
            {
              int v145 = *(unsigned __int8 *)v131;
              BOOL v146 = v145 != 95 && (v145 - 48) >= 0xA;
              if (v146 && (v145 & 0xFFFFFFDF) - 65 >= 0x1A) {
                break;
              }
              uint64_t v131 = (uint64_t ***)((char *)v131 + 1);
              if (!--v130) {
                goto LABEL_84;
              }
            }
            break;
        }
        if (!*(unsigned char *)(a1 + 8)) {
          goto LABEL_242;
        }
LABEL_212:
        if ((*((unsigned char *)v37 + 23) & 0x10) == 0)
        {
LABEL_242:
          if (v255 >= (unint64_t)HIDWORD(v255)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v254 + v255) = v37;
          LODWORD(v255) = v255 + 1;
          goto LABEL_84;
        }
        uint64_t v115 = ***v37;
        uint64_t v116 = *(void *)(v115 + 152);
        uint64_t v117 = *(unsigned int *)(v115 + 168);
        if (v117)
        {
          LODWORD(v118) = (v117 - 1) & ((v37 >> 4) ^ (v37 >> 9));
          uint64_t v119 = (uint64_t ****)(v116 + 16 * v118);
          std::string::size_type v120 = *v119;
          if (*v119 != v37)
          {
            int v121 = 1;
            while (v120 != (uint64_t ***)-4096)
            {
              int v122 = v118 + v121++;
              uint64_t v118 = v122 & (v117 - 1);
              std::string::size_type v120 = *(uint64_t ****)(v116 + 16 * v118);
              if (v120 == v37)
              {
                uint64_t v119 = (uint64_t ****)(v116 + 16 * v118);
                goto LABEL_240;
              }
            }
            goto LABEL_239;
          }
        }
        else
        {
LABEL_239:
          uint64_t v119 = (uint64_t ****)(v116 + 16 * v117);
        }
LABEL_240:
        uint64_t v134 = v119[1];
        if ((unint64_t)*v134 >= 2 && *((_WORD *)v134 + 8) == 24415) {
          goto LABEL_84;
        }
        goto LABEL_242;
      }
    }
LABEL_84:
    uint64_t v36 = *(void *)(v36 + 8);
  }
  while (v36 != v35);
  unint64_t v154 = v255;
  if (v255)
  {
    uint64_t v155 = *(uint64_t ***)(a1 + 24);
    unsigned int v238 = (llvm::DataLayout *)(v240 + 272);
    unsigned int v156 = *v155;
    unsigned int v260 = v155;
    unsigned int v261 = v155;
    uint64_t v262 = v155;
    uint64_t v263 = v155;
    unsigned int v264 = v155;
    long long v265 = v155;
    long long v266 = v155;
    int v267 = v155;
    llvm::StructType::get(v156, (uint64_t)&v260, 8, 0);
    BOOL v251 = &v253;
    unsigned int v252 = (llvm::Type *)0x1000000000;
    sub_1CD676A68((uint64_t)&v251, v154);
    uint64_t v248 = &v250;
    unint64_t v249 = 0x1000000000;
    sub_1CBFC6B20((uint64_t)&v248, v154, 0);
    char v157 = *(unsigned char *)(v240 + 191);
    int v158 = v157;
    if (v157 >= 0) {
      unsigned int v159 = (char *)(v240 + 168);
    }
    else {
      unsigned int v159 = *(char **)(v240 + 168);
    }
    unint64_t v160 = (llvm::Type *)(v157 & 0x7F);
    if (v158 >= 0) {
      uint64_t v161 = v160;
    }
    else {
      uint64_t v161 = *(llvm::Type **)(v240 + 176);
    }
    llvm::createPrivateGlobalForString((uint64_t *)v240, v159, v161, 0, "___asan_gen_");
    uint64_t v162 = *(void *)v254;
    uint64_t v163 = *(void *)a1;
    uint64_t v164 = sub_1CCAD3BE0(*(void *)a1, *(void *)v254);
    if (*(void *)v163 + 56 * *(unsigned int *)(v163 + 16) == v164)
    {
      int v165 = 0;
      int v166 = 0;
    }
    else
    {
      int v166 = *(char **)(v164 + 32);
      int v165 = *(llvm::Type **)(v164 + 40);
    }
    if ((*(unsigned char *)(v162 + 23) & 0x10) != 0)
    {
      uint64_t v167 = ***(void ***)v162;
      uint64_t v168 = *(void *)(v167 + 152);
      uint64_t v169 = *(unsigned int *)(v167 + 168);
      if (v169)
      {
        LODWORD(v170) = (v169 - 1) & ((v162 >> 4) ^ (v162 >> 9));
        uint64_t v171 = (uint64_t *)(v168 + 16 * v170);
        uint64_t v172 = *v171;
        if (*v171 != v162)
        {
          int v173 = 1;
          do
          {
            if (v172 == -4096) {
              goto LABEL_335;
            }
            int v174 = v170 + v173++;
            uint64_t v170 = v174 & (v169 - 1);
            uint64_t v172 = *(void *)(v168 + 16 * v170);
          }
          while (v172 != v162);
          uint64_t v171 = (uint64_t *)(v168 + 16 * v170);
        }
      }
      else
      {
LABEL_335:
        uint64_t v171 = (uint64_t *)(v168 + 16 * v169);
      }
      uint64_t v175 = (void *)v171[1];
      uint64_t v178 = (llvm::Type *)*v175;
      uint64_t v176 = (char *)(v175 + 2);
      int v177 = v178;
    }
    else
    {
      int v177 = 0;
      uint64_t v176 = &byte_1CFBCE98E;
    }
    if (v165) {
      unsigned int v179 = v166;
    }
    else {
      unsigned int v179 = v176;
    }
    if (v165) {
      int v180 = v165;
    }
    else {
      int v180 = v177;
    }
    llvm::createPrivateGlobalForString((uint64_t *)v240, v179, v180, 1, "___asan_gen_");
    uint64_t v181 = *(llvm::Type **)(v162 + 24);
    uint64_t v182 = sub_1CB83544C((uint64_t)v238, (uint64_t)v181);
    BOOL v184 = v183 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v238, v181, 1);
    if (v184) {
    unint64_t v187 = ((1 << Alignment) + ((unint64_t)(v182 + 7) >> 3) - 1) & -(1 << Alignment);
    }
    unsigned int v188 = *(_DWORD *)(a1 + 88);
    LODWORD(v189) = 1 << v188;
    if ((1 << v188) <= 0x20) {
      unint64_t v189 = 32;
    }
    else {
      unint64_t v189 = v189;
    }
    if (v187 <= v189 >> 1)
    {
      uint64_t v191 = (llvm::Type *)(v189 - v187);
    }
    else
    {
      if (v188 <= 5) {
        LOBYTE(v188) = 5;
      }
      unint64_t v190 = v187 >> v188 >> 2 << v188;
      if (v190 >= 0x40000) {
        unint64_t v190 = 0x40000;
      }
      if (v190 <= v189) {
        uint64_t v191 = (llvm::Type *)v189;
      }
      else {
        uint64_t v191 = (llvm::Type *)v190;
      }
      if (((v189 - 1) & v187) != 0) {
        uint64_t v191 = (llvm::Type *)((char *)v191 + v189 - ((v189 - 1) & v187));
      }
    }
    int v192 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)(a2 + 64) + 1912), v191);
    BOOL v193 = *(uint64_t **)v181;
    unsigned int v260 = v181;
    unsigned int v261 = (uint64_t **)v192;
    uint8x8_t v194 = (llvm::PoisonValue *)llvm::StructType::get(v193, (uint64_t)&v260, 2, 0);
    unsigned int v195 = *(void **)(v162 - 32);
    NullValue = llvm::Constant::getNullValue(v192, v196, v197);
    unsigned int v260 = v195;
    unsigned int v261 = (uint64_t **)NullValue;
    int v199 = llvm::ConstantStruct::get(v194, (llvm::Type *)&v260, 2);
    int v200 = *(_DWORD *)(v162 + 32) & 0xF;
    unsigned __int8 v201 = *(unsigned char *)(v162 + 80);
    int v202 = operator new(0x78uLL);
    int v203 = v202;
    uint64_t v204 = (llvm::GlobalObject *)(v202 + 8);
    v202[13] = v202[13] & 0x38000000 | 1;
    *(void *)int v202 = 0;
    *((void *)v202 + 1) = 0;
    *((void *)v202 + 2) = 0;
    *((void *)v202 + 3) = v202 + 8;
    if ((v201 & (v200 == 8)) != 0) {
      char v205 = 7;
    }
    else {
      char v205 = v200;
    }
    char v206 = *(unsigned char *)(v162 + 80) & 1;
    LOWORD(v264) = 257;
    uint64_t v207 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v202 + 4, v240, v194, v206, v205, (unint64_t)v199, (const char **)&v260, v162, (*(_DWORD *)(v162 + 32) >> 10) & 7, (llvm::Type *)(((unint64_t)*(unsigned int *)(*(void *)v162 + 8) >> 8) | 0x100000000), 0);
    llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v207, (const llvm::GlobalObject *)v162);
    *((unsigned char *)v203 + 112) = v203[28] & 0xFD | *(unsigned char *)(v162 + 80) & 2;
    *((void *)v203 + 13) = *(void *)(v162 + 72);
    llvm::GlobalObject::setComdat(v204, *(llvm::Comdat **)(v162 + 48));
    int v208 = *(_DWORD *)(a1 + 84);
    unsigned int v209 = 1 << *(_DWORD *)(a1 + 88);
    if (v209 <= 0x20) {
      unsigned int v209 = 32;
    }
    v203[16] = ((__clz(__rbit32(v209)) << 16) + 0x10000) | v203[16] & 0xFFC0FF3F;
    if (v208 != 5
      || (*(unsigned char *)(v162 + 34) & 0x40) != 0
      || (*(unsigned char *)(v162 + 80) & 1) == 0
      || (int v210 = *(llvm::ConstantDataSequential **)(v162 - 32)) == 0
      || (*((unsigned char *)v210 + 16) & 0xFE) != 0xE
      || !llvm::ConstantDataSequential::isCString(v210))
    {
LABEL_369:
      llvm::GlobalObject::copyMetadata(v204, (const llvm::GlobalObject *)v162, 0);
      BOOL v259 = 0;
      int v258 = 0;
      uint64_t v212 = **(void **)(a2 + 64);
      int v213 = *(llvm::ConstantInt **)(v212 + 1960);
      unsigned int v214 = *(_DWORD *)(v212 + 1968);
      LODWORD(v261) = v214 >> 8;
      if (v214 >> 8 < 0x41)
      {
        unsigned int v260 = 0;
        unsigned int v216 = llvm::ConstantInt::get(v213, (llvm::LLVMContext *)&v260, v211);
        if (v261 >= 0x41 && v260) {
          MEMORY[0x1D25D9CB0](v260, 0x1000C8000313F17);
        }
        int v258 = v216;
        uint64_t v217 = **(void **)(a2 + 64);
        uint64_t v218 = *(llvm::ConstantInt **)(v217 + 1960);
        unsigned int v219 = *(_DWORD *)(v217 + 1968);
        LODWORD(v261) = v219 >> 8;
        if (v219 >> 8 < 0x41)
        {
          unsigned int v260 = 0;
          int v220 = llvm::ConstantInt::get(v218, (llvm::LLVMContext *)&v260, v215);
          if (v261 >= 0x41 && v260) {
            MEMORY[0x1D25D9CB0](v260, 0x1000C8000313F17);
          }
          BOOL v259 = v220;
          ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr((uint64_t)v194, (uint64_t *)v204, (uint64_t)&v258, 2, 1, 0, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v162, ElementPtr, (llvm::Value *)1);
          llvm::Value::takeName((int32x2_t ****)v204, (llvm::Value *)v162);
          llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v162);
        }
        operator new[]();
      }
      operator new[]();
    }
    int v222 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***(void ***)v204 + 2136, "__TEXT,__asan_cstring,regular", 0x1DuLL);
    uint64_t v224 = v223;
    uint64_t v225 = ***(void ***)v204;
    unsigned int v260 = v204;
    int v226 = *(_DWORD *)(v225 + 2520);
    if (v226)
    {
      uint64_t v227 = *(void *)(v225 + 2504);
      int v228 = v226 - 1;
      unsigned int v229 = v228 & ((v204 >> 4) ^ (v204 >> 9));
      uint64_t v230 = (llvm::GlobalObject **)(v227 + 24 * v229);
      char v231 = *v230;
      if (*v230 == v204)
      {
LABEL_378:
        v230[1] = v222;
        v230[2] = v224;
        v203[16] = v203[16] & 0xFFBFFFFF | ((v224 != 0) << 22);
        goto LABEL_369;
      }
      unsigned int v232 = 0;
      int v233 = 1;
      while (v231 != (llvm::GlobalObject *)-4096)
      {
        if (v232) {
          BOOL v234 = 0;
        }
        else {
          BOOL v234 = v231 == (llvm::GlobalObject *)-8192;
        }
        if (v234) {
          unsigned int v232 = v230;
        }
        unsigned int v235 = v229 + v233++;
        unsigned int v229 = v235 & v228;
        uint64_t v230 = (llvm::GlobalObject **)(v227 + 24 * v229);
        char v231 = *v230;
        if (*v230 == v204) {
          goto LABEL_378;
        }
      }
      if (v232) {
        int64_t v236 = v232;
      }
      else {
        int64_t v236 = v230;
      }
    }
    else
    {
      int64_t v236 = 0;
    }
    uint64_t v230 = (llvm::GlobalObject **)sub_1CC5BF31C(v225 + 2504, (uint64_t)&v260, (uint64_t *)&v260, v236);
    unint64_t v237 = (llvm::GlobalObject *)v260;
    v230[1] = 0;
    v230[2] = 0;
    *uint64_t v230 = v237;
    goto LABEL_378;
  }
LABEL_314:
  *a4 = 1;
  if (v254 != v256) {
    free(v254);
  }
  if (v243 != v242) {
    free(v243);
  }
}

llvm::PointerType *sub_1CCAD3B00(uint64_t a1, unsigned __int8 *a2, const char *a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  v14[0] = a6;
  v14[1] = a7;
  void v14[2] = a8;
  uint64_t v12 = (llvm::PointerType *)llvm::FunctionType::get(a5, (uint64_t)v14, 3, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v12, a4);
}

uint64_t sub_1CCAD3BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (sub_1CD4A7E9C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 56 * *(unsigned int *)(a1 + 16);
  }
}

const char *sub_1CCAD3C3C(uint64_t a1, uint64_t a2, llvm::PointerType **a3, const char *a4, const char *a5)
{
  int v10 = *(_DWORD *)(a1 + 84);
  uint64_t v11 = (char *)operator new(0x78uLL);
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 32;
  *((_DWORD *)v11 + 13) = *((_DWORD *)v11 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = v11 + 32;
  uint64_t v14 = *a3;
  if (a5)
  {
    int v15 = *(unsigned __int8 *)a4;
    BOOL v16 = v15 == 1;
    if (v15 == 1) {
      uint64_t v17 = a5 - 1;
    }
    else {
      uint64_t v17 = a5;
    }
    if (v16) {
      ++a4;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (v10 == 5) {
    char v18 = 7;
  }
  else {
    char v18 = 8;
  }
  v37[0] = "__asan_global_";
  v37[2] = a4;
  v37[3] = v17;
  __int16 v38 = 1283;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v11 + 4, a2, v14, 0, v18, (unint64_t)a3, v37, 0, 0, 0, 0);
  uint64_t v20 = (char *)((uint64_t (*)(void))loc_1CCAD41FC)(*(unsigned int *)(a1 + 84));
  if ((v12[66] & 0x40) != 0 || v19)
  {
    if (v19)
    {
      uint64_t v20 = llvm::UniqueStringSaver::save(***(void ***)v13 + 2136, v20, v19);
      uint64_t v22 = v21;
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = ***(void ***)v13;
    v37[0] = v13;
    int v24 = *(_DWORD *)(v23 + 2520);
    if (v24)
    {
      uint64_t v25 = *(void *)(v23 + 2504);
      int v26 = v24 - 1;
      unsigned int v27 = v26 & ((v13 >> 4) ^ (v13 >> 9));
      long long v28 = (const char **)(v25 + 24 * v27);
      long long v29 = *v28;
      if (*v28 == v13)
      {
LABEL_18:
        v28[1] = v20;
        v28[2] = v22;
        *((_DWORD *)v12 + 16) = *((_DWORD *)v12 + 16) & 0xFFBFFFFF | ((v22 != 0) << 22);
        return v13;
      }
      int v31 = 0;
      int v32 = 1;
      while (v29 != (const char *)-4096)
      {
        if (v31) {
          BOOL v33 = 0;
        }
        else {
          BOOL v33 = v29 == (const char *)-8192;
        }
        if (v33) {
          int v31 = v28;
        }
        unsigned int v34 = v27 + v32++;
        unsigned int v27 = v34 & v26;
        long long v28 = (const char **)(v25 + 24 * v27);
        long long v29 = *v28;
        if (*v28 == v13) {
          goto LABEL_18;
        }
      }
      if (v31) {
        uint64_t v35 = v31;
      }
      else {
        uint64_t v35 = v28;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    long long v28 = (const char **)sub_1CC5BF31C(v23 + 2504, (uint64_t)v37, (uint64_t *)v37, v35);
    uint64_t v36 = v37[0];
    v28[1] = 0;
    v28[2] = 0;
    *long long v28 = v36;
    goto LABEL_18;
  }
  return v13;
}

void *sub_1CCAD3E3C(uint64_t a1, llvm::Value *this, llvm::GlobalObject *a3, std::string::value_type *__s, std::string::size_type __n)
{
  uint64_t v7 = (llvm::Comdat *)*((void *)this + 6);
  if (v7) {
    return llvm::GlobalObject::setComdat(a3, v7);
  }
  uint64_t v12 = *((void *)this + 5);
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"___asan_gen_";
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)"_anon_global";
    __int16 v59 = 771;
    llvm::Value::setNameImpl(this, (const char **)&__dst.__r_.__value_.__l.__data_);
    if (!*((unsigned char *)this + 16))
    {
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_22;
      }
      uint64_t v14 = ***(void ***)this;
      uint64_t v15 = *(void *)(v14 + 152);
      uint64_t v16 = *(unsigned int *)(v14 + 168);
      if (v16)
      {
        LODWORD(v17) = (v16 - 1) & ((this >> 4) ^ (this >> 9));
        uint64_t v18 = v15 + 16 * v17;
        size_t v19 = *(llvm::Value **)v18;
        if (*(llvm::Value **)v18 == this)
        {
LABEL_15:
          uint64_t v22 = *(void **)(v18 + 8);
          unint64_t v25 = *v22;
          uint64_t v23 = v22 + 2;
          unint64_t v24 = v25;
          if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
          {
            *((_DWORD *)this + 8) |= 0x2000u;
            int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
            goto LABEL_23;
          }
LABEL_22:
          int v27 = 0;
          *((_DWORD *)this + 8) &= ~0x2000u;
LABEL_23:
          *((_DWORD *)this + 9) = v27;
          if (!__n) {
            goto LABEL_6;
          }
          goto LABEL_24;
        }
        int v20 = 1;
        while (v19 != (llvm::Value *)-4096)
        {
          int v21 = v17 + v20++;
          uint64_t v17 = v21 & (v16 - 1);
          size_t v19 = *(llvm::Value **)(v15 + 16 * v17);
          if (v19 == this)
          {
            uint64_t v18 = v15 + 16 * v17;
            goto LABEL_15;
          }
        }
      }
      uint64_t v18 = v15 + 16 * v16;
      goto LABEL_15;
    }
  }
  if (!__n)
  {
LABEL_6:
    int v13 = *((_DWORD *)this + 5);
    goto LABEL_32;
  }
LABEL_24:
  int v13 = *((_DWORD *)this + 5);
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 <= 1)
  {
    if ((v13 & 0x10000000) == 0)
    {
      std::string::size_type v50 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      unint64_t p_dst = &__dst;
      goto LABEL_55;
    }
    uint64_t v28 = ***(void ***)this;
    uint64_t v29 = *(void *)(v28 + 152);
    uint64_t v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v32 = v29 + 16 * v31;
      BOOL v33 = *(llvm::Value **)v32;
      if (*(llvm::Value **)v32 == this) {
        goto LABEL_47;
      }
      int v34 = 1;
      while (v33 != (llvm::Value *)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        BOOL v33 = *(llvm::Value **)(v29 + 16 * v31);
        if (v33 == this)
        {
          uint64_t v32 = v29 + 16 * v31;
          goto LABEL_47;
        }
      }
    }
    uint64_t v32 = v29 + 16 * v30;
LABEL_47:
    int v49 = *(unint64_t **)(v32 + 8);
    unint64_t v52 = *v49;
    uint64_t v51 = v49 + 2;
    std::string::size_type v50 = v52;
    if (v52 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v50 >= 0x17)
    {
      uint64_t v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17) {
        uint64_t v54 = v50 | 7;
      }
      uint64_t v55 = v54 + 1;
      unint64_t p_dst = (std::string *)operator new(v54 + 1);
      __dst.__r_.__value_.__l.__size_ = v50;
      __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v50;
      unint64_t p_dst = &__dst;
      if (!v50)
      {
LABEL_55:
        p_dst->__r_.__value_.__s.__data_[v50] = 0;
        std::string::append(&__dst, __s, __n);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v56 = &__dst;
        }
        else {
          char v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = __dst.__r_.__value_.__l.__size_;
        }
        inserted = llvm::Module::getOrInsertComdat(v12, (unsigned __int8 *)v56, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_42;
      }
    }
    memmove(p_dst, v51, v50);
    goto LABEL_55;
  }
LABEL_32:
  if ((v13 & 0x10000000) == 0)
  {
    size_t v46 = 0;
    char v45 = (unsigned __int8 *)&byte_1CFBCE98E;
    goto LABEL_41;
  }
  uint64_t v36 = ***(void ***)this;
  uint64_t v37 = *(void *)(v36 + 152);
  uint64_t v38 = *(unsigned int *)(v36 + 168);
  if (!v38) {
    goto LABEL_39;
  }
  LODWORD(v39) = (v38 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v40 = v37 + 16 * v39;
  uint64_t v41 = *(llvm::Value **)v40;
  if (*(llvm::Value **)v40 != this)
  {
    int v42 = 1;
    while (v41 != (llvm::Value *)-4096)
    {
      int v43 = v39 + v42++;
      uint64_t v39 = v43 & (v38 - 1);
      uint64_t v41 = *(llvm::Value **)(v37 + 16 * v39);
      if (v41 == this)
      {
        uint64_t v40 = v37 + 16 * v39;
        goto LABEL_40;
      }
    }
LABEL_39:
    uint64_t v40 = v37 + 16 * v38;
  }
LABEL_40:
  int v44 = *(void **)(v40 + 8);
  size_t v47 = *v44;
  char v45 = (unsigned __int8 *)(v44 + 2);
  size_t v46 = v47;
LABEL_41:
  inserted = llvm::Module::getOrInsertComdat(v12, v45, v46);
LABEL_42:
  if (*(_DWORD *)(a1 + 84) == 1)
  {
    *((_DWORD *)inserted + 2) = 3;
    if ((*((_DWORD *)this + 8) & 0xF) == 8) {
      *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFFBFC0 | 0x4007;
    }
  }
  llvm::GlobalObject::setComdat(this, (llvm::Comdat *)inserted);
  uint64_t v7 = (llvm::Comdat *)*((void *)this + 6);
  return llvm::GlobalObject::setComdat(a3, v7);
}

void sub_1CCAD4290(uint64_t a1, llvm::Module *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)(a1 + 32) + 1576), 0, 0, 0);
  v6[0] = (llvm::ConstantExpr *)"asan.module_dtor";
  __int16 v7 = 259;
  uint64_t v5 = llvm::Function::createWithDefaultAttr(v4, 7, 0, (const char **)v6, a2);
  *(void *)(a1 + 248) = v5;
  *((void *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 37);
  v6[0] = *(llvm::ConstantExpr **)(a1 + 248);
  sub_1CD1CF0D0(a2, "llvm.used", (const char *)9, v6, 1);
  __int16 v7 = 257;
  operator new();
}

uint64_t sub_1CCAD4414(uint64_t a1)
{
  v593[1] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 6010)) {
    return 0;
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)a1;
  int v511 = (unsigned char *)(a1 + 5936);
  if (!byte_1EBCE6A70) {
    goto LABEL_57;
  }
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  if (v5) {
    uint64_t v6 = (uint64_t **)(v5 - 24);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 == *(uint64_t ***)(*(void *)(a1 + 8) + 992))
  {
    uint64_t v8 = v6 + 4;
    __int16 v7 = v6[4];
    uint64_t v9 = (uint64_t)(v8[1] + 5);
    if (v7) {
      BOOL v10 = v7 == (uint64_t *)v9;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (uint64_t **)(v7 - 3);
    }
  }
  locale = 0;
  uint64_t v12 = **v6;
  __int16 v554 = &v556;
  __src = (void *)0x200000000;
  uint64_t v561 = v12;
  uint64_t v562 = &v568;
  v563 = &v569;
  uint64_t v564 = 0;
  LODWORD(v565) = 0;
  WORD2(v565) = 512;
  BYTE6(v565) = 7;
  uint64_t v560 = 0;
  uint64_t v559 = 0;
  uint64_t v567 = 0;
  __int16 v566 = 0;
  uint64_t v568 = &unk_1F2616E88;
  uint64_t v569 = &unk_1F2617008;
  uint64_t v559 = v6[5];
  uint64_t v560 = v6 + 3;
  int v13 = (std::locale::__imp *)v6[6];
  v538[0].__locale_ = v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)v538, (unsigned __int8 *)v13, 2);
    locale = v538[0].__locale_;
  }
  sub_1CB8461A4((uint64_t)&v554, 0, (uint64_t)locale);
  if (v538[0].__locale_)
  {
    int v252 = *(unsigned __int8 *)v538[0].__locale_;
    if ((v252 - 4) > 0x1E)
    {
      if ((v252 - 3) >= 0xFFFFFFFE) {
        uint64_t v257 = v538[0].__locale_;
      }
      else {
        uint64_t v257 = 0;
      }
      if ((v252 - 3) < 0xFFFFFFFE)
      {
        if (v252 == 3) {
          *((void *)v538[0].__locale_ + 1) = 0;
        }
        goto LABEL_19;
      }
      unint64_t v254 = (unint64_t)v257 + 8;
    }
    else
    {
      if ((*((unsigned char *)v538[0].__locale_ + 1) & 0x7F) != 2 && !*((_DWORD *)v538[0].__locale_ + 3)) {
        goto LABEL_19;
      }
      uint64_t v253 = *((void *)v538[0].__locale_ + 2);
      if ((v253 & 4) == 0) {
        goto LABEL_19;
      }
      unint64_t v254 = v253 & 0xFFFFFFFFFFFFFFF8;
      if (!v254) {
        goto LABEL_19;
      }
    }
    uint64_t v578 = v538;
    sub_1CC5FA668(v254 + 16, &v578);
  }
LABEL_19:
  uint64_t v14 = *(void *)v1;
  uint64_t v15 = *(void *)(*(void *)v1 + 40);
  if (*(_WORD *)(*(void *)v1 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)v1);
    uint64_t v16 = *(unsigned char **)(v14 + 88);
    if (*(_WORD *)(v14 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v14);
      uint64_t v17 = *(unsigned char **)(v14 + 88);
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v16 = *(unsigned char **)(v14 + 88);
  }
  uint64_t v17 = v16;
LABEL_22:
  uint64_t v18 = &v17[40 * *(void *)(v14 + 96)];
  if (v16 != v18)
  {
    size_t v19 = (llvm::DataLayout *)(v15 + 272);
    int v20 = ".byval";
    while (1)
    {
      if (*(unsigned char *)(*(void *)v16 + 8) == 15)
      {
        uint64_t v21 = *((void *)v16 + 3);
        uint64_t v24 = *(void *)(v21 + 112);
        uint64_t v22 = (llvm::AttributeList *)(v21 + 112);
        uint64_t v23 = v24;
        if (v24)
        {
          int v25 = *((_DWORD *)v16 + 8);
          if ((v25 + 2) < *(_DWORD *)(v23 + 8))
          {
            int v26 = *(llvm::AttributeSetNode **)(v23 + 8 * (v25 + 2) + 40);
            if (v26)
            {
              if ((*((unsigned char *)v26 + 20) & 0x20) != 0) {
                break;
              }
            }
          }
        }
      }
LABEL_27:
      v16 += 40;
      if (v16 == v18) {
        goto LABEL_54;
      }
    }
    ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType(v22, v25);
    unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v26);
    unsigned __int8 v29 = Alignment;
    if (Alignment <= 0xFFu) {
      unsigned __int8 v29 = llvm::DataLayout::getAlignment(v19, ParamByValType, 1);
    }
    if ((v16[23] & 0x10) == 0)
    {
      uint64_t v30 = v515 & 0xFFFFFFFF00000000;
      unint64_t v31 = v515 & 0xFFFFFFFF00000000 | *((unsigned int *)v16 + 8);
      v538[0].__locale_ = (std::locale::__imp *)"Arg";
      unint64_t v515 = v31;
      *(void *)&long long v539 = v31;
      LOWORD(v540) = 2051;
      char v32 = 2;
      BOOL v33 = v538;
LABEL_43:
      uint64_t v578 = v33;
      uint64_t v579 = v30;
      int v44 = v20;
      uint64_t v580 = v20;
      LOBYTE(v582[0]) = v32;
      HIBYTE(v582[0]) = 3;
      char v45 = sub_1CB935044((uint64_t *)&v554, ParamByValType, 0, (uint64_t)&v578);
      *((_WORD *)v45 + 9) = *((_WORD *)v45 + 9) & 0xFFC0 | v29;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v16, v45, (llvm::Value *)1);
      uint64_t v46 = sub_1CB83544C((uint64_t)v19, (uint64_t)ParamByValType);
      BOOL v48 = v47 == 1;
      char v51 = llvm::DataLayout::getAlignment(v19, ParamByValType, 1);
      if (v48) {
      unint64_t v52 = ((1 << v51) + ((unint64_t)(v46 + 7) >> 3) - 1) & -(1 << v51);
      }
      unsigned int v53 = *(llvm::ConstantInt **)(*(void *)v561 + 1984);
      unsigned int v54 = *(_DWORD *)(*(void *)v561 + 1992);
      LODWORD(v579) = v54 >> 8;
      if (v54 >> 8 > 0x40) {
        operator new[]();
      }
      if (v54 <= 0xFF) {
        unint64_t v55 = 0;
      }
      else {
        unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v54) + 63);
      }
      uint64_t v578 = (std::locale *)(v55 & v52);
      char v56 = llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v578, v50);
      int v20 = v44;
      if (v579 >= 0x41 && v578) {
        MEMORY[0x1D25D9CB0](v578, 0x1000C8000313F17);
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v554, 194, v45, v29 | 0x100, (llvm::Value *)v16, v29 | 0x100, v56, 0, 0, 0, 0, 0);
      goto LABEL_27;
    }
    uint64_t v34 = ***(void ***)v16;
    uint64_t v35 = *(void *)(v34 + 152);
    uint64_t v36 = *(unsigned int *)(v34 + 168);
    if (v36)
    {
      LODWORD(v37) = (v36 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      uint64_t v38 = (void *)(v35 + 16 * v37);
      uint64_t v39 = (unsigned char *)*v38;
      if ((unsigned char *)*v38 == v16)
      {
LABEL_42:
        int v42 = (std::locale::__imp **)v38[1];
        int v43 = *v42;
        BOOL v33 = (std::locale *)(v42 + 2);
        uint64_t v30 = (uint64_t)v43;
        LOWORD(v540) = 261;
        v538[0].__locale_ = (std::locale::__imp *)v33;
        v538[1].__locale_ = v43;
        char v32 = 5;
        goto LABEL_43;
      }
      int v40 = 1;
      while (v39 != (unsigned char *)-4096)
      {
        int v41 = v37 + v40++;
        uint64_t v37 = v41 & (v36 - 1);
        uint64_t v39 = *(unsigned char **)(v35 + 16 * v37);
        if (v39 == v16)
        {
          uint64_t v38 = (void *)(v35 + 16 * v37);
          goto LABEL_42;
        }
      }
    }
    uint64_t v38 = (void *)(v35 + 16 * v36);
    goto LABEL_42;
  }
LABEL_54:
  if (v554 != &v556) {
    free(v554);
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)a1;
LABEL_57:
  uint64_t v57 = *(void *)(v2 + 80);
  if (v57) {
    int v58 = (const char *)(v57 - 24);
  }
  else {
    int v58 = 0;
  }
  uint64_t v578 = (std::locale *)v58;
  sub_1CCADB4C0((uint64_t *)&v578, (uint64_t)&v554);
  __int16 v59 = v582;
  uint64_t v578 = (std::locale *)v582;
  uint64_t v60 = __src;
  if (__src == v554)
  {
    uint64_t v579 = (uint64_t)v582;
    uint64_t v61 = __src;
  }
  else
  {
    unsigned int v255 = v556;
    __int16 v59 = malloc_type_malloc(8 * v556, 0x4065EBACuLL);
    if (!v59)
    {
      if (v255) {
        goto LABEL_734;
      }
      __int16 v59 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      uint64_t v1 = a1;
      if (!v59) {
        goto LABEL_734;
      }
    }
    uint64_t v579 = (uint64_t)v59;
    uint64_t v61 = v554;
    uint64_t v60 = __src;
  }
  unsigned int v62 = v557;
  LODWORD(v580) = v556;
  if (v60 == v61) {
    unsigned int v63 = v557;
  }
  else {
    unsigned int v63 = v556;
  }
  if (v63)
  {
    memmove(v59, v60, 8 * v63);
    unsigned int v62 = v557;
  }
  HIDWORD(v580) = v62;
  int v581 = v558[0];
  unint64_t v590 = 0;
  uint64_t v591 = 0;
  unint64_t v589 = 0;
  sub_1CBFE1720(&v589, v565, v566, (v566 - (unsigned char *)v565) >> 5);
  BOOL v64 = (std::locale::__imp *)&v540;
  v538[0].__locale_ = (std::locale::__imp *)&v540;
  int v65 = v569;
  if (v569 != v568)
  {
    unsigned int v256 = v570;
    BOOL v64 = (std::locale::__imp *)malloc_type_malloc(8 * v570, 0x4065EBACuLL);
    if (v64 || !v256 && (v64 = (std::locale::__imp *)malloc_type_malloc(1uLL, 0x4065EBACuLL), uint64_t v1 = a1, v64))
    {
      v538[1].__locale_ = v64;
      int v66 = v568;
      int v65 = v569;
      goto LABEL_69;
    }
LABEL_734:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v538[1].__locale_ = (std::locale::__imp *)&v540;
  int v66 = v569;
LABEL_69:
  unsigned int v67 = v571;
  LODWORD(v539) = v570;
  if (v65 == v66) {
    unsigned int v68 = v571;
  }
  else {
    unsigned int v68 = v570;
  }
  if (v68)
  {
    memmove(v64, v65, 8 * v68);
    unsigned int v67 = v571;
  }
  *(void *)((char *)&v539 + 4) = __PAIR64__(v572, v67);
  uint64_t v549 = 0;
  std::string __p = 0;
  __int16 v548 = 0;
  sub_1CBFE1720(&__p, v573, v574, (v574 - (unsigned char *)v573) >> 5);
  uint64_t v510 = (llvm::Instruction ***)(v1 + 512);
  while (1)
  {
    if (v590 - v589 != v548 - (unsigned char *)__p) {
      goto LABEL_89;
    }
    if (v589 == v590) {
      break;
    }
    unsigned int v69 = (char *)__p + 16;
    uint64_t v70 = v589 + 16;
    while (1)
    {
      int v71 = v70 - 16;
      if (*((void *)v70 - 2) != *((void *)v69 - 2)) {
        break;
      }
      int v72 = v69[8];
      if (v70[8]) {
        BOOL v73 = v72 == 0;
      }
      else {
        BOOL v73 = 1;
      }
      if (v73)
      {
        if ((v70[8] == 0) == (v72 != 0)) {
          break;
        }
      }
      else if (*(_DWORD *)v70 != *(_DWORD *)v69)
      {
        break;
      }
      v69 += 32;
      v70 += 32;
      if (v71 + 32 == v590) {
        goto LABEL_133;
      }
    }
LABEL_89:
    uint64_t v74 = *((void *)v590 - 4);
    uint64_t v75 = v74 + 40;
    uint64_t v76 = *(void *)(v74 + 48);
    while (v76 != v75)
    {
      uint64_t v77 = v76 - 24;
      BOOL v10 = v76 == 0;
      uint64_t v76 = *(void *)(v76 + 8);
      if (v10) {
        uint64_t v78 = 0;
      }
      else {
        uint64_t v78 = v77;
      }
      switch(*(unsigned char *)(v78 + 16))
      {
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x23:
        case 0x25:
        case 0x26:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x4F:
        case 0x50:
        case 0x51:
        case 0x52:
        case 0x53:
        case 0x55:
        case 0x56:
        case 0x57:
        case 0x58:
        case 0x59:
        case 0x5A:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5E:
        case 0x5F:
          continue;
        case 0x21:
        case 0x27:
          goto LABEL_95;
        case 0x22:
        case 0x24:
          unint64_t v79 = *(unsigned int *)(v1 + 808);
          if (v79 >= *(unsigned int *)(v1 + 812)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          goto LABEL_97;
        case 0x3B:
          BOOL v82 = sub_1CCAD9774(*(void *)(v1 + 8), v78);
          if (*(unsigned char *)(*(void *)(v78 - 32) + 16) == 16
            && ((uint64_t v83 = *(void *)(v78 + 40), (v84 = *(void *)(*(void *)(v83 + 56) + 80)) != 0)
              ? (uint64_t v85 = v84 - 24)
              : (uint64_t v85 = 0),
                v83 == v85))
          {
            BOOL v86 = (*(_WORD *)(v78 + 18) & 0x40) == 0;
            if (v82) {
              goto LABEL_107;
            }
          }
          else
          {
            BOOL v86 = 0;
            if (v82)
            {
LABEL_107:
              if (v86)
              {
                unint64_t v87 = *(unsigned int *)(v1 + 520);
                if (v87 >= *(unsigned int *)(v1 + 524)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v1 + 512) + 8 * v87) = v78;
                ++*(_DWORD *)(v1 + 520);
              }
              else
              {
                unint64_t v90 = *(unsigned int *)(v1 + 5952);
                if (v90 >= *(unsigned int *)(v1 + 5956)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v1 + 5944) + 8 * v90) = v78;
                ++*(_DWORD *)(v1 + 5952);
              }
              continue;
            }
          }
          if (v86 && *(_DWORD *)(v1 + 520))
          {
            unint64_t v91 = *(unsigned int *)(v1 + 664);
            if (v91 >= *(unsigned int *)(v1 + 668)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v1 + 656) + 8 * v91) = v78;
            ++*(_DWORD *)(v1 + 664);
          }
          break;
        case 0x54:
          uint64_t v88 = *(void *)(v78 - 32);
          if (v88
            && !*(unsigned char *)(v88 + 16)
            && *(void *)(v88 + 24) == *(void *)(v78 + 72)
            && ((int v89 = *(_DWORD *)(v88 + 36), v89 > 56) || v89))
          {
            sub_1CCADB65C(v1, (llvm::Instruction *)v78);
          }
          else
          {
LABEL_95:
            sub_1CCADB5C8(v1, v78);
          }
          continue;
        default:
          uint64_t v80 = llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(v78 + 40));
          unint64_t v79 = *(unsigned int *)(v1 + 808);
          unint64_t v81 = *(unsigned int *)(v1 + 812);
          if (v80)
          {
            if (v79 >= v81) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 800) + 8 * v79) = v80;
            uint64_t v1 = a1;
            ++*(_DWORD *)(a1 + 808);
          }
          else
          {
            if (v79 >= v81) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v1 = a1;
LABEL_97:
            *(void *)(*(void *)(v1 + 800) + 8 * v79) = v78;
            ++*(_DWORD *)(v1 + 808);
          }
          continue;
      }
    }
    sub_1CC0D3E0C((uint64_t)&v578);
  }
LABEL_133:
  if (__p)
  {
    __int16 v548 = __p;
    operator delete(__p);
  }
  if (v538[1].__locale_ != v538[0].__locale_) {
    free(v538[1].__locale_);
  }
  if (v589)
  {
    unint64_t v590 = v589;
    operator delete(v589);
  }
  if ((std::locale *)v579 != v578) {
    free((void *)v579);
  }
  if (v573)
  {
    uint64_t v574 = v573;
    operator delete(v573);
  }
  if (v569 != v568) {
    free(v569);
  }
  if (v565)
  {
    __int16 v566 = v565;
    operator delete(v565);
  }
  if (__src != v554) {
    free(__src);
  }
  if (!*(_DWORD *)(v1 + 520) && !*(_DWORD *)(v1 + 5952)) {
    return 0;
  }
  uint64_t v93 = *(void *)(*(void *)v1 + 40);
  uint64_t v94 = *(void *)(v1 + 464);
  uint64_t v578 = (std::locale *)&v580;
  uint64_t v579 = 0x200000000;
  uint64_t v585 = v94;
  uint64_t v586 = &v592;
  unint64_t v587 = v593;
  uint64_t v588 = 0;
  LODWORD(v589) = 0;
  WORD2(v589) = 512;
  BYTE6(v589) = 7;
  uint64_t v583 = 0;
  uint64_t v584 = 0;
  unint64_t v590 = 0;
  uint64_t v591 = 0;
  uint64_t v592 = &unk_1F2616E88;
  v593[0] = &unk_1F2617008;
  uint64_t v95 = *(void *)(v1 + 8);
  if ((*(_DWORD *)(v95 + 64) - 1) <= 1)
  {
    for (unint64_t i = 0; i != 11; ++i)
    {
      int v97 = (char *)&v539 + 5;
      unint64_t v98 = i;
      if (i)
      {
        do
        {
          *--int v97 = (v98 % 0xA) | 0x30;
          BOOL v318 = v98 > 9;
          v98 /= 0xAuLL;
        }
        while (v318);
      }
      else
      {
        BYTE4(v539) = 48;
        int v97 = (char *)&v539 + 4;
      }
      sub_1CC028D80(&v554, v97, (char *)&v539 + 5, (char *)&v539 + 5 - v97);
      std::operator+<char>();
      if ((SBYTE7(v539) & 0x80u) == 0) {
        uint64_t v99 = (unsigned __int8 *)v538;
      }
      else {
        uint64_t v99 = (unsigned __int8 *)v538[0].__locale_;
      }
      if ((SBYTE7(v539) & 0x80u) == 0) {
        uint64_t v100 = (std::locale::__imp *)(BYTE7(v539) & 0x7F);
      }
      else {
        uint64_t v100 = v538[1].__locale_;
      }
      size_t v101 = (void *)(a1 + 16 * i);
      v101[110] = sub_1CD57B9C0(v93, v99, (const char *)v100, 0, *(uint64_t ***)(a1 + 472), *(void *)(a1 + 472));
      v101[111] = v102;
      if (SBYTE7(v539) < 0) {
        operator delete(v538[0].__locale_);
      }
      std::operator+<char>();
      if ((SBYTE7(v539) & 0x80u) == 0) {
        uint64_t v103 = (unsigned __int8 *)v538;
      }
      else {
        uint64_t v103 = (unsigned __int8 *)v538[0].__locale_;
      }
      if ((SBYTE7(v539) & 0x80u) == 0) {
        std::string::size_type v104 = (std::locale::__imp *)(BYTE7(v539) & 0x7F);
      }
      else {
        std::string::size_type v104 = v538[1].__locale_;
      }
      v101[132] = sub_1CD661480(v93, v103, (const char *)v104, 0, (uint64_t **)(*(void *)v585 + 1576), *(void *)(a1 + 472), *(void *)(a1 + 472));
      v101[133] = v105;
      if (SBYTE7(v539) < 0) {
        operator delete(v538[0].__locale_);
      }
      if (SHIBYTE(v557) < 0) {
        operator delete(v554);
      }
    }
    uint64_t v1 = a1;
    uint64_t v95 = *(void *)(a1 + 8);
  }
  if (*(unsigned char *)(v95 + 62))
  {
    *(void *)(v1 + 5328) = sub_1CD661480(v93, "__asan_poison_stack_memory", (const char *)0x1A, 0, (uint64_t **)(*(void *)v585 + 1576), *(void *)(v1 + 472), *(void *)(v1 + 472));
    *(void *)(v1 + 5336) = v106;
    *(void *)(v1 + 5344) = sub_1CD661480(v93, "__asan_unpoison_stack_memory", (const char *)0x1C, 0, (uint64_t **)(*(void *)v585 + 1576), *(void *)(v1 + 472), *(void *)(v1 + 472));
    *(void *)(v1 + 5352) = v107;
  }
  uint64_t v108 = 0;
  uint64_t v109 = (uint64_t *)MEMORY[0x1E4FBA418];
  do
  {
    uint64_t v110 = dword_1CFB27EB8[v108];
    sub_1CBF4C1CC((uint64_t)&v554);
    sub_1CBF435C4(&v554, (uint64_t)"__asan_set_shadow_", 18);
    int v111 = v554;
    char v112 = v554;
    *(void *)((char *)v558 + *((void *)v554 - 3)) = 2;
    unint64_t v113 = (const std::ios_base *)((char *)&v554 + *(v112 - 3));
    if (v113[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v113);
      uint64_t v114 = std::locale::use_facet(v538, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 32);
      std::locale::~locale(v538);
      int v111 = v554;
    }
    v113[1].__fmtflags_ = 48;
    *(_DWORD *)((char *)&__src + *(v111 - 3)) = *(_DWORD *)((unsigned char *)&__src + *(v111 - 3)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    if ((SBYTE7(v539) & 0x80u) == 0) {
      uint64_t v115 = (unsigned __int8 *)v538;
    }
    else {
      uint64_t v115 = (unsigned __int8 *)v538[0].__locale_;
    }
    if ((SBYTE7(v539) & 0x80u) == 0) {
      uint64_t v116 = (std::locale::__imp *)(BYTE7(v539) & 0x7F);
    }
    else {
      uint64_t v116 = v538[1].__locale_;
    }
    uint64_t v117 = sub_1CD661480(v93, v115, (const char *)v116, 0, (uint64_t **)(*(void *)v585 + 1576), *(void *)(a1 + 472), *(void *)(a1 + 472));
    uint64_t v118 = a1 + 16 * v110;
    *(void *)(v118 + 1232) = v117;
    *(void *)(v118 + 1240) = v119;
    if (SBYTE7(v539) < 0) {
      operator delete(v538[0].__locale_);
    }
    sub_1CD45577C((uint64_t)&v554, v109);
    MEMORY[0x1D25D9C00](&v567);
    ++v108;
  }
  while (v108 != 6);
  std::string::size_type v120 = (llvm::Instruction ***)a1;
  *(void *)(a1 + 5360) = sub_1CD661480(v93, "__asan_alloca_poison", (const char *)0x14, 0, (uint64_t **)(*(void *)v585 + 1576), *(void *)(a1 + 472), *(void *)(a1 + 472));
  *(void *)(a1 + 5368) = v121;
  *(void *)(a1 + 5376) = sub_1CD661480(v93, "__asan_allocas_unpoison", (const char *)0x17, 0, (uint64_t **)(*(void *)v585 + 1576), *(void *)(a1 + 472), *(void *)(a1 + 472));
  *(void *)(a1 + 5384) = v122;
  if (v578 != (std::locale *)&v580) {
    free(v578);
  }
  if (*v511)
  {
    *(_DWORD *)(a1 + 5672) = 0;
    *(_DWORD *)(a1 + 5400) = 0;
  }
  if (!byte_1EA61C5A8 || !*(_DWORD *)(a1 + 5952)) {
    goto LABEL_334;
  }
  uint64_t v123 = *(unsigned int *)(a1 + 5400);
  if (v123)
  {
    int v124 = *(llvm::DIBuilder **)(a1 + 5392);
    uint64_t v516 = (llvm::DIBuilder *)((char *)v124 + 32 * v123);
    std::string::size_type v120 = (llvm::Instruction ***)a1;
    do
    {
      uint64_t v125 = 0;
      int v126 = *(uint64_t ***)v124;
      uint64_t v561 = ***(void ***)v124;
      uint64_t v562 = &v568;
      v563 = &v569;
      uint64_t v564 = 0;
      LODWORD(v565) = 0;
      WORD2(v565) = 512;
      BYTE6(v565) = 7;
      uint64_t v559 = 0;
      uint64_t v560 = 0;
      __int16 v566 = 0;
      uint64_t v567 = 0;
      uint64_t v568 = &unk_1F2616E88;
      uint64_t v569 = &unk_1F2617008;
      uint64_t v559 = v126[5];
      uint64_t v560 = v126 + 3;
      __int16 v554 = &v556;
      __src = (void *)0x200000000;
      unsigned int v127 = (std::locale::__imp *)v126[6];
      v538[0].__locale_ = v127;
      if (v127)
      {
        llvm::MetadataTracking::track((uint64_t)v538, (unsigned __int8 *)v127, 2);
        uint64_t v125 = v538[0].__locale_;
      }
      sub_1CB8461A4((uint64_t)&v554, 0, (uint64_t)v125);
      if (!v538[0].__locale_) {
        goto LABEL_202;
      }
      int v139 = *(unsigned __int8 *)v538[0].__locale_;
      if ((v139 - 4) > 0x1E)
      {
        if ((v139 - 3) >= 0xFFFFFFFE) {
          unint64_t v142 = v538[0].__locale_;
        }
        else {
          unint64_t v142 = 0;
        }
        if ((v139 - 3) < 0xFFFFFFFE)
        {
          if (v139 == 3) {
            *((void *)v538[0].__locale_ + 1) = 0;
          }
          goto LABEL_202;
        }
        unint64_t v141 = (unint64_t)v142 + 8;
      }
      else
      {
        if ((*((unsigned char *)v538[0].__locale_ + 1) & 0x7F) != 2 && !*((_DWORD *)v538[0].__locale_ + 3)) {
          goto LABEL_202;
        }
        uint64_t v140 = *((void *)v538[0].__locale_ + 2);
        if ((v140 & 4) == 0) {
          goto LABEL_202;
        }
        unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFF8;
        if (!v141) {
          goto LABEL_202;
        }
      }
      uint64_t v578 = v538;
      sub_1CC5FA668(v141 + 16, &v578);
LABEL_202:
      uint64_t v129 = (llvm::CastInst *)*((void *)v124 + 1);
      unint64_t v130 = *((void *)v124 + 2);
      int v131 = *((unsigned __int8 *)v124 + 24);
      uint64_t v132 = *(llvm::Value **)(a1 + 472);
      v582[0] = 257;
      int v133 = sub_1CC277FE0((uint64_t)&v554, v129, v132, (uint64_t)&v578, v128);
      uint64_t v134 = (std::locale::__imp *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), v130, 0);
      uint64_t v135 = 5328;
      if (!v131) {
        uint64_t v135 = 5344;
      }
      uint64_t v136 = a1 + 5328;
      if (!v131) {
        uint64_t v136 = a1 + 5344;
      }
      BOOL v137 = *(uint64_t ***)(a1 + v135);
      unsigned int v138 = *(uint64_t ***)(v136 + 8);
      v538[0].__locale_ = v133;
      v538[1].__locale_ = v134;
      v582[0] = 257;
      sub_1CB845BAC((uint64_t *)&v554, v137, v138, (uint64_t *)v538, 2, (uint64_t)&v578, 0);
      if (v554 != &v556) {
        free(v554);
      }
      int v124 = (llvm::DIBuilder *)((char *)v124 + 32);
    }
    while (v124 != v516);
  }
  uint64_t v143 = 0;
  int v144 = (*v120)[10];
  if (v144) {
    uint64_t v145 = (uint64_t)v144 - 24;
  }
  else {
    uint64_t v145 = 0;
  }
  uint64_t v146 = *(void *)(v145 + 48);
  if (v146) {
    uint64_t v147 = (uint64_t **)(v146 - 24);
  }
  else {
    uint64_t v147 = 0;
  }
  uint64_t v148 = **v147;
  __int16 v554 = &v556;
  __src = (void *)0x200000000;
  uint64_t v561 = v148;
  uint64_t v562 = &v568;
  v563 = &v569;
  uint64_t v564 = 0;
  LODWORD(v565) = 0;
  WORD2(v565) = 512;
  BYTE6(v565) = 7;
  uint64_t v560 = 0;
  uint64_t v559 = 0;
  uint64_t v567 = 0;
  __int16 v566 = 0;
  uint64_t v568 = &unk_1F2616E88;
  uint64_t v569 = &unk_1F2617008;
  uint64_t v559 = v147[5];
  uint64_t v560 = v147 + 3;
  int v149 = (std::locale::__imp *)v147[6];
  v538[0].__locale_ = v149;
  if (v149)
  {
    llvm::MetadataTracking::track((uint64_t)v538, (unsigned __int8 *)v149, 2);
    uint64_t v143 = v538[0].__locale_;
  }
  sub_1CB8461A4((uint64_t)&v554, 0, (uint64_t)v143);
  if (v538[0].__locale_)
  {
    int v273 = *(unsigned __int8 *)v538[0].__locale_;
    if ((v273 - 4) > 0x1E)
    {
      if ((v273 - 3) >= 0xFFFFFFFE) {
        int v355 = v538[0].__locale_;
      }
      else {
        int v355 = 0;
      }
      if ((v273 - 3) < 0xFFFFFFFE)
      {
        if (v273 == 3) {
          *((void *)v538[0].__locale_ + 1) = 0;
        }
        goto LABEL_235;
      }
      unint64_t v275 = (unint64_t)v355 + 8;
    }
    else
    {
      if ((*((unsigned char *)v538[0].__locale_ + 1) & 0x7F) != 2 && !*((_DWORD *)v538[0].__locale_ + 3)) {
        goto LABEL_235;
      }
      uint64_t v274 = *((void *)v538[0].__locale_ + 2);
      if ((v274 & 4) == 0) {
        goto LABEL_235;
      }
      unint64_t v275 = v274 & 0xFFFFFFFFFFFFFFF8;
      if (!v275) {
        goto LABEL_235;
      }
    }
    uint64_t v578 = v538;
    sub_1CC5FA668(v275 + 16, &v578);
  }
LABEL_235:
  unint64_t v150 = *(llvm::Type **)(a1 + 472);
  v582[0] = 257;
  *(void *)(a1 + 5992) = sub_1CB935044((uint64_t *)&v554, v150, 0, (uint64_t)&v578);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 472), v151, v152);
  uint64_t v154 = *(void *)(a1 + 5992);
  char v155 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v559[7] + 40) + 272), *(llvm::Type **)NullValue, 1);
  unsigned int v156 = (char *)operator new(0x80uLL);
  *((_DWORD *)v156 + 21) = *((_DWORD *)v156 + 21) & 0x38000000 | 2;
  *(void *)unsigned int v156 = 0;
  *((void *)v156 + 2) = 0;
  *((void *)v156 + 1) = 0;
  *((void *)v156 + 5) = 0;
  *((void *)v156 + 6) = 0;
  *((void *)v156 + 4) = 0;
  char v157 = v156 + 32;
  *((void *)v156 + 8) = ***(void ***)NullValue + 1576;
  int v158 = (llvm::Instruction *)(v156 + 64);
  *((void *)v156 + 3) = v156 + 64;
  *((void *)v156 + 7) = v156 + 64;
  *((void *)v156 + 9) = 0;
  v156[80] = 61;
  v156[81] = 0;
  *((_WORD *)v156 + 41) = 0;
  *((_DWORD *)v156 + 21) = 2;
  *(_OWORD *)(v156 + 88) = 0u;
  *(_OWORD *)(v156 + 104) = 0u;
  *((_DWORD *)v156 + 30) = 0;
  *(void *)unsigned int v156 = NullValue;
  uint64_t v161 = *((void *)NullValue + 1);
  unint64_t v160 = (void *)((char *)NullValue + 8);
  uint64_t v159 = v161;
  *((void *)v156 + 1) = v161;
  if (v161) {
    *(void *)(v159 + 16) = v156 + 8;
  }
  *((void *)v156 + 2) = v160;
  void *v160 = v156;
  if (*((void *)v156 + 4))
  {
    **((void **)v156 + 6) = *((void *)v156 + 5);
    uint64_t v497 = *((void *)v156 + 5);
    if (v497) {
      *(void *)(v497 + 16) = *((void *)v156 + 6);
    }
  }
  *char v157 = v154;
  if (v154)
  {
    uint64_t v164 = *(void *)(v154 + 8);
    uint64_t v163 = (void *)(v154 + 8);
    uint64_t v162 = v164;
    *((void *)v156 + 5) = v164;
    if (v164) {
      *(void *)(v162 + 16) = v156 + 40;
    }
    *((void *)v156 + 6) = v163;
    void *v163 = v157;
  }
  *((_WORD *)v156 + 41) = 2 * (v155 & 0x3F);
  v156[124] = 1;
  v582[0] = 257;
  (*((void (**)(void **, llvm::Instruction *, std::locale **, uint64_t *, void **))*v563 + 2))(v563, v158, &v578, v559, v560);
  int v165 = (llvm::MDNode **)v554;
  if (__src)
  {
    unint64_t v354 = (llvm::MDNode **)((char *)v554 + 16 * __src);
    do
    {
      llvm::Instruction::setMetadata(v158, *(_DWORD *)v165, v165[1]);
      v165 += 2;
    }
    while (v165 != v354);
    int v165 = (llvm::MDNode **)v554;
  }
  *(_WORD *)(*(void *)(a1 + 5992) + 18) = *(_WORD *)(*(void *)(a1 + 5992) + 18) & 0xFFC0 | 5;
  if (v165 != (llvm::MDNode **)&v556) {
    free(v165);
  }
  std::string::size_type v120 = (llvm::Instruction ***)a1;
  if (*(_DWORD *)(a1 + 5952))
  {
    int v166 = *(uint64_t ****)(a1 + 5944);
    uint64_t v167 = 0;
    uint64_t v168 = *v166;
    uint64_t v169 = ***v166;
    __int16 v554 = &v556;
    __src = (void *)0x200000000;
    uint64_t v561 = v169;
    uint64_t v562 = &v568;
    v563 = &v569;
    uint64_t v564 = 0;
    LODWORD(v565) = 0;
    WORD2(v565) = 512;
    BYTE6(v565) = 7;
    uint64_t v559 = 0;
    uint64_t v560 = 0;
    __int16 v566 = 0;
    uint64_t v567 = 0;
    uint64_t v568 = &unk_1F2616E88;
    uint64_t v569 = &unk_1F2617008;
    uint64_t v559 = v168[5];
    uint64_t v560 = v168 + 3;
    uint64_t v170 = (std::locale::__imp *)v168[6];
    v538[0].__locale_ = v170;
    if (v170)
    {
      llvm::MetadataTracking::track((uint64_t)v538, (unsigned __int8 *)v170, 2);
      uint64_t v167 = v538[0].__locale_;
    }
    sub_1CB8461A4((uint64_t)&v554, 0, (uint64_t)v167);
    if (!v538[0].__locale_)
    {
LABEL_249:
      if ((unint64_t)(1 << *((_WORD *)v168 + 9)) <= 0x20) {
        unint64_t v173 = 32;
      }
      else {
        unint64_t v173 = 1 << *((_WORD *)v168 + 9);
      }
      unsigned int v512 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 472), v171, v172);
      int v174 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), 0x20uLL, 0);
      uint64_t v175 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), 0x1FuLL, 0);
      uint64_t v176 = (llvm::DataLayout *)(*(void *)(*(void *)a1 + 40) + 272);
      int v177 = (llvm::Type *)v168[8];
      uint64_t v178 = sub_1CB83544C((uint64_t)v176, (uint64_t)v177);
      BOOL v180 = v179 == 1;
      char v183 = llvm::DataLayout::getAlignment(v176, v177, 1);
      if (v180) {
      BOOL v184 = (llvm::CastInst *)*(v168 - 4);
      }
      uint64_t v185 = *(llvm::Type ****)(a1 + 472);
      v582[0] = 257;
      unsigned int v186 = sub_1CBF56614((uint64_t)&v554, v184, v185, 0, (uint64_t)&v578, v182);
      unint64_t v187 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), -(1 << v183) & ((1 << v183) - 1 + ((unint64_t)(v178 + 7) >> 3)), 0);
      LOWORD(v540) = 257;
      unsigned int v188 = sub_1CC09A1EC((uint64_t)&v554, (uint64_t)v186, (uint64_t)v187, (uint64_t)v538, 0, 0);
      v582[0] = 257;
      unint64_t v189 = sub_1CBF52474((uint64_t)&v554, v188, (uint64_t)v175, (uint64_t)&v578);
      v582[0] = 257;
      unint64_t v190 = sub_1CB84494C((uint64_t)&v554, (uint64_t)v174, (uint64_t)v189, (uint64_t)&v578, 0, 0);
      v582[0] = 257;
      uint64_t v191 = sub_1CB845F20((uint64_t)&v554, 33, v190, (uint64_t)v174, (uint64_t)&v578);
      v582[0] = 257;
      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v554, v191, v190, v512, (const llvm::Twine *)&v578, 0);
      BOOL v193 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), v173 + 32, 0);
      v582[0] = 257;
      uint8x8_t v194 = sub_1CB844A3C((uint64_t)&v554, v193, (uint64_t)Select, (uint64_t)&v578, 0, 0);
      v582[0] = 257;
      unsigned int v195 = sub_1CB844A3C((uint64_t)&v554, v188, (uint64_t)v194, (uint64_t)&v578, 0, 0);
      uint64_t v196 = (llvm::Type *)(*(void *)v561 + 1912);
      v582[0] = 257;
      size_t v197 = sub_1CB935044((uint64_t *)&v554, v196, v195, (uint64_t)&v578);
      uint64_t v198 = v197;
      *((_WORD *)v197 + 9) = *((_WORD *)v197 + 9) & 0xFFC0 | __clz(v173) ^ 0x3F;
      uint64_t v199 = *(void *)(a1 + 472);
      LOWORD(v540) = 257;
      int v200 = v197;
      uint64_t v201 = a1;
      if (*(void *)v197 != v199)
      {
        if (*((unsigned __int8 *)v197 + 16) <= 0x14u)
        {
          uint64_t v204 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v562 + 28))(v562, 47, v197, v199);
          int v200 = (llvm::Instruction *)v204;
          if (v204 && *(unsigned __int8 *)(v204 + 16) >= 0x1Cu)
          {
            (*((void (**)(void **, uint64_t, std::locale *, uint64_t *, void **))*v563 + 2))(v563, v204, v538, v559, v560);
            if (__src)
            {
              uint64_t v240 = (llvm::MDNode **)v554;
              uint64_t v241 = (llvm::MDNode **)((char *)v554 + 16 * __src);
              do
              {
                llvm::Instruction::setMetadata(v200, *(_DWORD *)v240, v240[1]);
                v240 += 2;
              }
              while (v240 != v241);
              uint64_t v201 = a1;
            }
            else
            {
              uint64_t v201 = a1;
            }
          }
        }
        else
        {
          v582[0] = 257;
          int v200 = llvm::CastInst::Create(47, (uint64_t)v197, v199, (const char **)&v578, 0);
          (*((void (**)(void **, llvm::Instruction *, std::locale *, uint64_t *, void **))*v563 + 2))(v563, v200, v538, v559, v560);
          if (__src)
          {
            int v202 = (llvm::MDNode **)v554;
            int v203 = (llvm::MDNode **)((char *)v554 + 16 * __src);
            do
            {
              llvm::Instruction::setMetadata(v200, *(_DWORD *)v202, v202[1]);
              v202 += 2;
            }
            while (v202 != v203);
          }
        }
      }
      char v205 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v201 + 472), v173, 0);
      v582[0] = 257;
      char v206 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v554, v200, (uint64_t)v205, (uint64_t)&v578, 0, 0);
      uint64_t v207 = *(uint64_t ***)(v201 + 5360);
      int v208 = *(uint64_t ***)(v201 + 5368);
      v538[0].__locale_ = (std::locale::__imp *)v206;
      v538[1].__locale_ = v188;
      v582[0] = 257;
      sub_1CB845BAC((uint64_t *)&v554, v207, v208, (uint64_t *)v538, 2, (uint64_t)&v578, 0);
      uint64_t v209 = *(void *)(v201 + 472);
      LOWORD(v540) = 257;
      if (*(void *)v198 != v209)
      {
        if (*((unsigned __int8 *)v198 + 16) <= 0x14u)
        {
          uint64_t v198 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v562 + 28))(v562, 47, v198, v209);
          if (v198) {
            BOOL v212 = *((unsigned __int8 *)v198 + 16) >= 0x1Cu;
          }
          else {
            BOOL v212 = 0;
          }
          if (v212)
          {
            (*((void (**)(void **, llvm::Value *, std::locale *, uint64_t *, void **))*v563 + 2))(v563, v198, v538, v559, v560);
            if (__src)
            {
              int64_t v236 = (llvm::MDNode **)v554;
              unint64_t v237 = (llvm::MDNode **)((char *)v554 + 16 * __src);
              do
              {
                llvm::Instruction::setMetadata(v198, *(_DWORD *)v236, v236[1]);
                v236 += 2;
              }
              while (v236 != v237);
            }
            uint64_t v201 = a1;
          }
        }
        else
        {
          v582[0] = 257;
          uint64_t v198 = llvm::CastInst::Create(47, (uint64_t)v198, v209, (const char **)&v578, 0);
          (*((void (**)(void **, llvm::Value *, std::locale *, uint64_t *, void **))*v563 + 2))(v563, v198, v538, v559, v560);
          if (__src)
          {
            int v210 = (llvm::MDNode **)v554;
            int v211 = (llvm::MDNode **)((char *)v554 + 16 * __src);
            do
            {
              llvm::Instruction::setMetadata(v198, *(_DWORD *)v210, v210[1]);
              v210 += 2;
            }
            while (v210 != v211);
          }
        }
      }
      uint64_t v213 = *(void *)(v201 + 5992);
      char v214 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v559[7] + 40) + 272), *(llvm::Type **)v198, 1);
      unsigned int v215 = (char *)operator new(0x80uLL);
      *((_DWORD *)v215 + 21) = *((_DWORD *)v215 + 21) & 0x38000000 | 2;
      *(void *)unsigned int v215 = 0;
      *((void *)v215 + 2) = 0;
      *((void *)v215 + 1) = 0;
      *((void *)v215 + 5) = 0;
      *((void *)v215 + 6) = 0;
      *((void *)v215 + 4) = 0;
      unsigned int v216 = v215 + 32;
      *((void *)v215 + 8) = ***(void ***)v198 + 1576;
      uint64_t v217 = (llvm::Instruction *)(v215 + 64);
      *((void *)v215 + 3) = v215 + 64;
      *((void *)v215 + 7) = v215 + 64;
      *((void *)v215 + 9) = 0;
      v215[80] = 61;
      v215[81] = 0;
      *((_WORD *)v215 + 41) = 0;
      *((_DWORD *)v215 + 21) = 2;
      *(_OWORD *)(v215 + 88) = 0u;
      *(_OWORD *)(v215 + 104) = 0u;
      *((_DWORD *)v215 + 30) = 0;
      *(void *)unsigned int v215 = v198;
      uint64_t v220 = *((void *)v198 + 1);
      unsigned int v219 = (void *)((char *)v198 + 8);
      uint64_t v218 = v220;
      *((void *)v215 + 1) = v220;
      if (v220) {
        *(void *)(v218 + 16) = v215 + 8;
      }
      *((void *)v215 + 2) = v219;
      void *v219 = v215;
      if (*((void *)v215 + 4))
      {
        **((void **)v215 + 6) = *((void *)v215 + 5);
        uint64_t v235 = *((void *)v215 + 5);
        if (v235) {
          *(void *)(v235 + 16) = *((void *)v215 + 6);
        }
      }
      *unsigned int v216 = v213;
      uint64_t v221 = (llvm::ValueAsMetadata *)v168;
      if (v213)
      {
        uint64_t v224 = *(void *)(v213 + 8);
        int v223 = (void *)(v213 + 8);
        uint64_t v222 = v224;
        *((void *)v215 + 5) = v224;
        if (v224) {
          *(void *)(v222 + 16) = v215 + 40;
        }
        *((void *)v215 + 6) = v223;
        *int v223 = v216;
      }
      *((_WORD *)v215 + 41) = 2 * (v214 & 0x3F);
      v215[124] = 1;
      v582[0] = 257;
      (*((void (**)(void **, llvm::Instruction *, std::locale **, uint64_t *, void **))*v563 + 2))(v563, v217, &v578, v559, v560);
      if (__src)
      {
        unsigned int v232 = (llvm::MDNode **)v554;
        int v233 = (llvm::MDNode **)((char *)v554 + 16 * __src);
        do
        {
          llvm::Instruction::setMetadata(v217, *(_DWORD *)v232, v232[1]);
          v232 += 2;
        }
        while (v232 != v233);
      }
      uint64_t v225 = (uint64_t)*v168;
      LOWORD(v540) = 257;
      if (*(void *)v206 != v225)
      {
        if (v206[16] <= 0x14u)
        {
          char v206 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v562 + 28))(v562, 48, v206, v225);
          if (v206) {
            BOOL v228 = v206[16] >= 0x1Cu;
          }
          else {
            BOOL v228 = 0;
          }
          if (v228)
          {
            (*((void (**)(void **, unsigned __int8 *, std::locale *, uint64_t *, void **))*v563 + 2))(v563, v206, v538, v559, v560);
            if (__src)
            {
              unsigned int v238 = (llvm::MDNode **)v554;
              int v239 = (llvm::MDNode **)((char *)v554 + 16 * __src);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v206, *(_DWORD *)v238, v238[1]);
                v238 += 2;
              }
              while (v238 != v239);
            }
            uint64_t v221 = (llvm::ValueAsMetadata *)v168;
          }
        }
        else
        {
          v582[0] = 257;
          char v206 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v206, v225, (const char **)&v578, 0);
          (*((void (**)(void **, unsigned __int8 *, std::locale *, uint64_t *, void **))*v563 + 2))(v563, v206, v538, v559, v560);
          if (__src)
          {
            int v226 = (llvm::MDNode **)v554;
            uint64_t v227 = (llvm::MDNode **)((char *)v554 + 16 * __src);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v206, *(_DWORD *)v226, v226[1]);
              v226 += 2;
            }
            while (v226 != v227);
          }
        }
      }
      llvm::Value::doRAUW(v221, (llvm::Value *)v206, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v229 = *(unsigned __int8 *)v538[0].__locale_;
    if ((v229 - 4) > 0x1E)
    {
      if ((v229 - 3) >= 0xFFFFFFFE) {
        BOOL v234 = v538[0].__locale_;
      }
      else {
        BOOL v234 = 0;
      }
      if ((v229 - 3) < 0xFFFFFFFE)
      {
        if (v229 == 3) {
          *((void *)v538[0].__locale_ + 1) = 0;
        }
        goto LABEL_249;
      }
      unint64_t v231 = (unint64_t)v234 + 8;
    }
    else
    {
      if ((*((unsigned char *)v538[0].__locale_ + 1) & 0x7F) != 2 && !*((_DWORD *)v538[0].__locale_ + 3)) {
        goto LABEL_249;
      }
      uint64_t v230 = *((void *)v538[0].__locale_ + 2);
      if ((v230 & 4) == 0) {
        goto LABEL_249;
      }
      unint64_t v231 = v230 & 0xFFFFFFFFFFFFFFF8;
      if (!v231) {
        goto LABEL_249;
      }
    }
    uint64_t v578 = v538;
    sub_1CC5FA668(v231 + 16, &v578);
    goto LABEL_249;
  }
  uint64_t v242 = *(unsigned int *)(a1 + 808);
  if (v242)
  {
    uint64_t v243 = *(uint64_t ****)(a1 + 800);
    uint64_t v244 = 8 * v242;
    do
    {
      int v245 = *v243++;
      sub_1CCADB904((const char **)a1, v245, *(unsigned __int8 **)(a1 + 5992));
      v244 -= 8;
    }
    while (v244);
  }
  uint64_t v246 = *(unsigned int *)(a1 + 5976);
  if (v246)
  {
    unsigned int v247 = *(uint64_t ****)(a1 + 5968);
    uint64_t v248 = 8 * v246;
    do
    {
      unint64_t v249 = *v247;
      int v250 = *((_DWORD *)*v247 + 5);
      if ((v250 & 0x40000000) != 0) {
        BOOL v251 = (unsigned __int8 **)*(v249 - 1);
      }
      else {
        BOOL v251 = (unsigned __int8 **)&v249[-4 * (v250 & 0x7FFFFFF)];
      }
      sub_1CCADB904((const char **)a1, v249, *v251);
      ++v247;
      v248 -= 8;
    }
    while (v248);
  }
LABEL_334:
  if (!*((_DWORD *)v120 + 130)) {
    return 1;
  }
  BOOL v522 = 0;
  int v258 = *v120;
  if ((*((unsigned char *)*v120 + 23) & 0x20) == 0) {
    goto LABEL_384;
  }
  uint64_t v259 = **(void **)*v258;
  __int16 v554 = *v120;
  int v260 = *(_DWORD *)(v259 + 2496);
  if (!v260)
  {
    uint64_t v482 = 0;
LABEL_691:
    unsigned int v264 = sub_1CC609054(v259 + 2480, (uint64_t)&v554, (uint64_t *)&v554, v482);
    unsigned int v483 = v554;
    v264[3] = 0;
    v264[4] = 0;
    void *v264 = v483;
    v264[1] = v264 + 3;
    v264[2] = 0x100000000;
    goto LABEL_363;
  }
  uint64_t v261 = *(void *)(v259 + 2480);
  int v262 = v260 - 1;
  unsigned int v263 = v262 & ((v258 >> 4) ^ (v258 >> 9));
  unsigned int v264 = (void *)(v261 + 40 * v263);
  long long v265 = (void ***)*v264;
  if ((llvm::Instruction **)*v264 != v258)
  {
    long long v266 = 0;
    int v267 = 1;
    while (v265 != (void ***)-4096)
    {
      if (v266) {
        BOOL v268 = 0;
      }
      else {
        BOOL v268 = v265 == (void ***)-8192;
      }
      if (v268) {
        long long v266 = v264;
      }
      unsigned int v269 = v263 + v267++;
      unsigned int v263 = v269 & v262;
      unsigned int v264 = (void *)(v261 + 40 * v263);
      long long v265 = (void ***)*v264;
      if ((llvm::Instruction **)*v264 == v258) {
        goto LABEL_363;
      }
    }
    if (v266) {
      uint64_t v482 = v266;
    }
    else {
      uint64_t v482 = v264;
    }
    goto LABEL_691;
  }
LABEL_363:
  uint64_t v270 = *((unsigned int *)v264 + 4);
  if (v270)
  {
    long long v271 = (uint64_t *)(v264[1] + 8);
    uint64_t v272 = 16 * v270;
    while (*((_DWORD *)v271 - 2))
    {
      v271 += 2;
      v272 -= 16;
      if (!v272) {
        goto LABEL_384;
      }
    }
    uint64_t v276 = *v271;
    if (*v271)
    {
      uint64_t v277 = *(void *)(v276 + 16);
      uint64_t v278 = (void *)(v277 & 0xFFFFFFFFFFFFFFF8);
      if ((v277 & 4) != 0) {
        uint64_t v278 = (void *)*v278;
      }
      uint64_t Impl = (char *)llvm::DILocation::getImpl(v278, *(_DWORD *)(v276 + 28), 0, v276, 0, 0, 0, 1);
      uint64_t v578 = (std::locale *)Impl;
      if (Impl) {
        llvm::MetadataTracking::track((uint64_t)&v578, (unsigned __int8 *)Impl, 2);
      }
      if (!v522) {
        goto LABEL_382;
      }
      int locale_low = LOBYTE(v522->__locale_);
      if ((locale_low - 4) > 0x1E)
      {
        if ((locale_low - 3) >= 0xFFFFFFFE) {
          int v496 = v522;
        }
        else {
          int v496 = 0;
        }
        if ((locale_low - 3) < 0xFFFFFFFE)
        {
          std::string::size_type v120 = (llvm::Instruction ***)a1;
          if (locale_low == 3) {
            v522[1].__locale_ = 0;
          }
          goto LABEL_382;
        }
        unint64_t v495 = (unint64_t)&v496[1];
      }
      else
      {
        std::string::size_type v120 = (llvm::Instruction ***)a1;
        if ((BYTE1(v522->__locale_) & 0x7F) != 2 && !HIDWORD(v522[1].__locale_)
          || (uint64_t v494 = v522[2].__locale_, (v494 & 4) == 0)
          || (unint64_t v495 = (unint64_t)v494 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_382:
          BOOL v522 = v578;
          if (v578) {
            llvm::MetadataTracking::retrack((uint64_t)&v578, (unsigned __int8 *)v578, (uint64_t)&v522);
          }
          goto LABEL_384;
        }
      }
      __int16 v554 = &v522;
      sub_1CC5FA668(v495 + 16, &v554);
      std::string::size_type v120 = (llvm::Instruction ***)a1;
      goto LABEL_382;
    }
  }
LABEL_384:
  int v280 = 0;
  int v281 = **v510;
  uint64_t v282 = **(void **)v281;
  uint64_t v578 = (std::locale *)&v580;
  uint64_t v579 = 0x200000000;
  uint64_t v585 = v282;
  uint64_t v586 = &v592;
  unint64_t v587 = v593;
  uint64_t v588 = 0;
  LODWORD(v589) = 0;
  WORD2(v589) = 512;
  BYTE6(v589) = 7;
  uint64_t v583 = 0;
  uint64_t v584 = 0;
  unint64_t v590 = 0;
  uint64_t v591 = 0;
  uint64_t v592 = &unk_1F2616E88;
  v593[0] = &unk_1F2617008;
  uint64_t v583 = *((void *)v281 + 5);
  uint64_t v584 = (char *)v281 + 24;
  uint64_t v283 = (std::locale::__imp *)*((void *)v281 + 6);
  v538[0].__locale_ = v283;
  if (v283)
  {
    llvm::MetadataTracking::track((uint64_t)v538, (unsigned __int8 *)v283, 2);
    int v280 = v538[0].__locale_;
  }
  sub_1CB8461A4((uint64_t)&v578, 0, (uint64_t)v280);
  if (v538[0].__locale_)
  {
    int v479 = *(unsigned __int8 *)v538[0].__locale_;
    if ((v479 - 4) > 0x1E)
    {
      if ((v479 - 3) >= 0xFFFFFFFE) {
        __int16 v490 = v538[0].__locale_;
      }
      else {
        __int16 v490 = 0;
      }
      if ((v479 - 3) < 0xFFFFFFFE)
      {
        std::string::size_type v120 = (llvm::Instruction ***)a1;
        if (v479 == 3) {
          *((void *)v538[0].__locale_ + 1) = 0;
        }
        goto LABEL_387;
      }
      unint64_t v481 = (unint64_t)v490 + 8;
    }
    else
    {
      if ((*((unsigned char *)v538[0].__locale_ + 1) & 0x7F) != 2 && !*((_DWORD *)v538[0].__locale_ + 3)) {
        goto LABEL_387;
      }
      uint64_t v480 = *((void *)v538[0].__locale_ + 2);
      if ((v480 & 4) == 0) {
        goto LABEL_387;
      }
      unint64_t v481 = v480 & 0xFFFFFFFFFFFFFFF8;
      if (!v481) {
        goto LABEL_387;
      }
    }
    __int16 v554 = v538;
    sub_1CC5FA668(v481 + 16, &v554);
    std::string::size_type v120 = (llvm::Instruction ***)a1;
  }
LABEL_387:
  uint64_t v284 = *((unsigned int *)v120 + 166);
  if (v284)
  {
    uint64_t v285 = *((void *)v281 + 5);
    uint64_t v286 = v120[82];
    uint64_t v287 = 8 * v284;
    do
    {
      if (*((void *)*v286 + 5) == v285) {
        llvm::Instruction::moveBefore(*v286, v281);
      }
      ++v286;
      v287 -= 8;
    }
    while (v287);
  }
  unint64_t v575 = v577;
  uint64_t v576 = 0x800000000;
  uint64_t v288 = (uint64_t)v120[1];
  uint64_t NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(v281, 0);
  if (NextNonDebugInstruction)
  {
    uint64_t v312 = (unsigned __int8 *)NextNonDebugInstruction;
    do
    {
      int v313 = v312[16];
      if (v313 != 59 && (v313 - 66) >= 0xD)
      {
        if (v313 != 61) {
          break;
        }
        uint64_t v315 = *((void *)v312 - 4);
        if (v315 && *(unsigned char *)(v315 + 16) == 59 && !sub_1CCAD9774(v288, v315))
        {
          uint64_t v316 = (void *)*((void *)v312 - 8);
          unsigned int v317 = *((unsigned __int8 *)v316 + 16);
          BOOL v318 = v317 < 0x1C || v317 - 66 > 0xC;
          BOOL v319 = !v318
              && *(unsigned char *)(*(v316 - 4) + 16) == 21
              && v316 == llvm::Instruction::getPrevNonDebugInstruction((llvm::Instruction *)v312, 0);
          BOOL v320 = v317 != 21 && !v319;
          std::string::size_type v120 = (llvm::Instruction ***)a1;
          if (!v320)
          {
            unsigned int v321 = v576;
            if (v319)
            {
              if (v576 >= HIDWORD(v576)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v575 + v576) = v316;
              unsigned int v321 = v576 + 1;
              LODWORD(v576) = v576 + 1;
            }
            if (v321 >= HIDWORD(v576)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v575 + v321) = v312;
            LODWORD(v576) = v576 + 1;
          }
        }
      }
      uint64_t v312 = (unsigned __int8 *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v312, 0);
    }
    while (v312);
  }
  if (v576)
  {
    __int16 v291 = (llvm::Instruction **)v575;
    uint64_t v292 = 8 * v576;
    do
    {
      uint64_t v293 = *v291++;
      llvm::Instruction::moveBefore(v293, v281);
      v292 -= 8;
    }
    while (v292);
  }
  unsigned int v294 = (llvm::Instruction *)v120[750];
  if (v294) {
    llvm::Instruction::moveBefore(v294, v281);
  }
  __int16 v554 = &v556;
  v290.n128_u64[0] = 0x1000000000;
  __src = (void *)0x1000000000;
  unsigned int v295 = *((_DWORD *)v120 + 130);
  if (v295 >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v295)
  {
    uint64_t v322 = *v510;
    uint64_t v323 = (uint64_t)&(*v510)[v295];
    while (1)
    {
      uint64_t v324 = *v322;
      uint64_t v541 = 0;
      long long v539 = 0u;
      long long v540 = 0u;
      *(_OWORD *)&v538[0].__locale_ = 0u;
      if ((*((unsigned char *)v324 + 23) & 0x10) == 0)
      {
        unint64_t v333 = (std::locale::__imp *)&byte_1CFBCE98E;
        goto LABEL_464;
      }
      uint64_t v325 = ***(void ***)v324;
      uint64_t v326 = *(void *)(v325 + 152);
      uint64_t v327 = *(unsigned int *)(v325 + 168);
      if (!v327) {
        goto LABEL_462;
      }
      LODWORD(v328) = (v327 - 1) & ((v324 >> 4) ^ (v324 >> 9));
      unint64_t v329 = (llvm::Instruction **)(v326 + 16 * v328);
      unint64_t v330 = *v329;
      if (*v329 != v324) {
        break;
      }
LABEL_463:
      unint64_t v333 = (llvm::Instruction *)((char *)v329[1] + 16);
LABEL_464:
      v538[0].__locale_ = v333;
      v538[1].__locale_ = (std::locale::__imp *)sub_1CCAD98C4(v324);
      *(void *)&long long v539 = 0;
      *((void *)&v539 + 1) = 1 << *((_WORD *)v324 + 9);
      long long v540 = (unint64_t)v324;
      LODWORD(v541) = 0;
      unint64_t v334 = sub_1CD68E7B0((uint64_t)&v554, (unint64_t)v538);
      uint64_t v335 = (char *)v554 + 56 * __src;
      __n128 v290 = *(__n128 *)v334;
      long long v336 = *(_OWORD *)(v334 + 16);
      long long v337 = *(_OWORD *)(v334 + 32);
      *((void *)v335 + 6) = *(void *)(v334 + 48);
      *((_OWORD *)v335 + 1) = v336;
      *((_OWORD *)v335 + 2) = v337;
      *(__n128 *)uint64_t v335 = v290;
      LODWORD(__src) = __src + 1;
      if (++v322 == (llvm::Instruction **)v323) {
        goto LABEL_401;
      }
    }
    int v331 = 1;
    while (v330 != (llvm::Instruction *)-4096)
    {
      int v332 = v328 + v331++;
      uint64_t v328 = v332 & (v327 - 1);
      unint64_t v330 = *(llvm::Instruction **)(v326 + 16 * v328);
      if (v330 == v324)
      {
        unint64_t v329 = (llvm::Instruction **)(v326 + 16 * v328);
        goto LABEL_463;
      }
    }
LABEL_462:
    unint64_t v329 = (llvm::Instruction **)(v326 + 16 * v327);
    goto LABEL_463;
  }
LABEL_401:
  uint64_t v296 = a1;
  unint64_t v297 = 1 << *(_DWORD *)(a1 + 488);
  if ((unint64_t)*(int *)(*(void *)(a1 + 8) + 56) >> 1 <= v297) {
    uint64_t v298 = 1 << *(_DWORD *)(a1 + 488);
  }
  else {
    uint64_t v298 = (unint64_t)*(int *)(*(void *)(a1 + 8) + 56) >> 1;
  }
  llvm::ComputeASanStackFrameLayout((unsigned int *)&v554, v297, v298, v520, v290);
  v518[0] = 0;
  v518[1] = 0;
  int v519 = 0;
  if (__src)
  {
    uint64_t v299 = (uint64_t *)v554;
    uint64_t v300 = 56 * __src;
    do
    {
      sub_1CD467E2C((uint64_t)v518, v299 + 4)[1] = v299;
      v299 += 7;
      v300 -= 56;
    }
    while (v300);
  }
  uint64_t v301 = *(unsigned int *)(a1 + 5672);
  if (v301)
  {
    uint64_t v302 = 32 * v301;
    uint64_t v303 = (uint64_t *)(*(void *)(a1 + 5664) + 8);
    do
    {
      uint64_t v304 = sub_1CD467E2C((uint64_t)v518, v303)[1];
      *(void *)(v304 + 16) = *(void *)(v304 + 8);
      if (v522)
      {
        uint64_t v305 = *(void *)(*(v303 - 1) + 48);
        if (v305)
        {
          BOOL v306 = *(unsigned int **)(v305 - 8 * *(unsigned int *)(v305 + 8));
          if (*(unsigned char *)v306 != 15) {
            BOOL v306 = *(unsigned int **)&v306[-2 * v306[2]];
          }
          int v307 = v522[-LODWORD(v522[1].__locale_)].__locale_;
          if (*(unsigned char *)v307 != 15) {
            int v307 = (std::locale::__imp *)*((void *)v307 - *((unsigned int *)v307 + 2));
          }
          if (v306 == (unsigned int *)v307)
          {
            unsigned int v308 = *(_DWORD *)(v305 + 4);
            if (v308)
            {
              unsigned int v309 = *(_DWORD *)(v304 + 48);
              if (!v309) {
                unsigned int v309 = v308;
              }
              if (v308 >= v309) {
                unsigned int v308 = v309;
              }
              *(_DWORD *)(v304 + 48) = v308;
            }
          }
        }
      }
      v303 += 4;
      v302 -= 32;
    }
    while (v302);
  }
  llvm::ComputeASanStackFrameDescription((unsigned int *)&v554, (uint64_t)v552);
  uint64_t v310 = *(void *)(a1 + 8);
  uint64_t v508 = (llvm::Type *)v521;
  if (*(_DWORD *)(v310 + 64))
  {
    if (*(unsigned char *)(v310 + 60)) {
      BOOL v338 = 1;
    }
    else {
      BOOL v338 = v521 > 0x10000;
    }
    int v311 = !v338;
  }
  else
  {
    int v311 = 0;
  }
  if (v511[72])
  {
    unint64_t v341 = sub_1CCADBF14(a1, (uint64_t)&v578, (uint64_t)v520, 0);
LABEL_484:
    llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), 0, 0);
    unsigned int v342 = v341;
    goto LABEL_505;
  }
  if (v511[73]) {
    BOOL v339 = 0;
  }
  else {
    BOOL v339 = byte_1EA61CBA8 != 0;
  }
  if (v511[73]) {
    int v340 = 0;
  }
  else {
    int v340 = v311;
  }
  if (!v339)
  {
    unint64_t v341 = sub_1CCADBF14(a1, (uint64_t)&v578, (uint64_t)v520, 0);
    if (v340) {
      goto LABEL_486;
    }
    goto LABEL_484;
  }
  if (v340)
  {
LABEL_486:
    unsigned int v343 = *(llvm::Type **)(a1 + 472);
    v538[0].__locale_ = (std::locale::__imp *)"asan_local_stack_base";
    LOWORD(v540) = 259;
    sub_1CB935044((uint64_t *)&v578, v343, 0, (uint64_t)v538);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 64) == 1)
    {
      inserted = llvm::Module::getOrInsertGlobal(*(void *)(*(void *)a1 + 40), "__asan_option_detect_stack_use_after_return", 0x2BuLL, (llvm::PointerType *)(*(void *)v585 + 1960));
      uint64_t v345 = (llvm::Type *)(*(void *)v585 + 1960);
      __int16 v528 = 257;
      char v346 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v583 + 56) + 40) + 272), v345, 1);
      uint64_t v347 = operator new(0x60uLL);
      v347[13] = v347[13] & 0x38000000 | 1;
      int v348 = (llvm::Instruction *)(v347 + 8);
      *(void *)uint64_t v347 = 0;
      *((void *)v347 + 1) = 0;
      *((void *)v347 + 2) = 0;
      *((void *)v347 + 3) = v347 + 8;
      LOWORD(v540) = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v347 + 8), (uint64_t)v345, (uint64_t)inserted, (const char **)v538, 0, v346, 0);
      (*(void (**)(void *, llvm::Instruction *, void **, uint64_t, char *))(*v587 + 16))(v587, v348, &v525, v583, v584);
      if (v579)
      {
        int v491 = v578;
        uint64_t v492 = (const char *)&v578[2 * v579];
        do
        {
          llvm::Instruction::setMetadata(v348, (int)v491->__locale_, v491[1].__locale_);
          v491 += 2;
        }
        while (v491 != (std::locale *)v492);
      }
      int v351 = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v585 + 1960), v349, v350);
      LOWORD(v540) = 257;
      uint64_t v513 = sub_1CB845F20((uint64_t)&v578, 33, v348, (uint64_t)v351, (uint64_t)v538);
      sub_1CD1290BC((uint64_t)v513, (uint64_t)v281);
    }
    if ((unint64_t)v508 < 0x41)
    {
      unsigned int v352 = 0;
    }
    else
    {
      unsigned int v352 = 0;
      for (unint64_t j = 64; j < (unint64_t)v508; j *= 2)
        ++v352;
    }
    uint64_t v356 = a1 + 16 * v352;
    unint64_t v357 = *(uint64_t ***)(v356 + 880);
    std::string::size_type v358 = *(uint64_t ***)(v356 + 888);
    unint64_t v525 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (unint64_t)v508, 0);
    LOWORD(v540) = 257;
    std::string::size_type v359 = (void *)sub_1CB845BAC((uint64_t *)&v578, v357, v358, (uint64_t *)&v525, 1, (uint64_t)v538, 0);
    uint64_t v362 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 472), v360, v361);
    LOWORD(v540) = 257;
    BOOL v363 = sub_1CB845F20((uint64_t)&v578, 32, v359, (uint64_t)v362, (uint64_t)v538);
    sub_1CD1290BC((uint64_t)v363, (uint64_t)v281);
  }
  llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), 0, 0);
  unsigned int v342 = sub_1CCADBF14(a1, (uint64_t)&v578, (uint64_t)v520, 1);
  unint64_t v341 = v342;
LABEL_505:
  if (*((unsigned char *)v342 + 16) == 75) {
    unsigned int v342 = (llvm::Instruction *)*((void *)v342 - 4);
  }
  if (__src)
  {
    BOOL v368 = (char *)v554;
    uint64_t v369 = (char *)v554 + 56 * __src;
    do
    {
      uint64_t v370 = (llvm *)*((void *)v368 + 4);
      llvm::replaceDbgDeclare(v370, v342, (llvm::Value *)(a1 + 16), 0, *((_DWORD *)v368 + 10));
      uint64_t v371 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v296 + 472), *((void *)v368 + 5), 0);
      __int16 v528 = 257;
      int v372 = sub_1CB844A3C((uint64_t)&v578, v341, (uint64_t)v371, (uint64_t)&v525, 0, 0);
      unint64_t v373 = (unsigned __int8 *)v372;
      uint64_t v374 = *(void *)v370;
      __int16 v524 = 257;
      if (*(void *)v372 != v374)
      {
        if (*((unsigned __int8 *)v372 + 16) <= 0x14u)
        {
          unint64_t v373 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v586
                                     + 28))(v586, 48, v372, v374);
          if (v373) {
            BOOL v375 = v373[16] >= 0x1Cu;
          }
          else {
            BOOL v375 = 0;
          }
          if (!v375) {
            goto LABEL_523;
          }
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, char *))(*v587 + 16))(v587, v373, &v523, v583, v584);
          if (v579)
          {
            int64_t v378 = v578;
            uint64_t v379 = (const char *)&v578[2 * v579];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v373, (int)v378->__locale_, v378[1].__locale_);
              v378 += 2;
            }
            while (v378 != (std::locale *)v379);
          }
        }
        else
        {
          LOWORD(v540) = 257;
          unint64_t v373 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v372, v374, (const char **)v538, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, char *))(*v587 + 16))(v587, v373, &v523, v583, v584);
          if (v579)
          {
            int v376 = v578;
            int v377 = (const char *)&v578[2 * v579];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v373, (int)v376->__locale_, v376[1].__locale_);
              v376 += 2;
            }
            while (v376 != (std::locale *)v377);
          }
        }
        uint64_t v296 = a1;
      }
LABEL_523:
      llvm::Value::doRAUW(v370, (llvm::Value *)v373, (llvm::Value *)1);
      v368 += 56;
    }
    while (v368 != v369);
  }
  uint64_t v364 = *(void *)(v296 + 480);
  __int16 v528 = 257;
  uint64_t v365 = v341;
  if (*(void *)v341 != v364)
  {
    if (*((unsigned __int8 *)v341 + 16) <= 0x14u)
    {
      uint64_t v365 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v586 + 28))(v586, 48, v341, v364);
      if (v365) {
        BOOL v380 = *((unsigned __int8 *)v365 + 16) >= 0x1Cu;
      }
      else {
        BOOL v380 = 0;
      }
      if (v380)
      {
        (*(void (**)(void *, llvm::Value *, void **, uint64_t, char *))(*v587 + 16))(v587, v365, &v525, v583, v584);
        if (v579)
        {
          __int16 v501 = v578;
          char v502 = (const char *)&v578[2 * v579];
          do
          {
            llvm::Instruction::setMetadata(v365, (int)v501->__locale_, v501[1].__locale_);
            v501 += 2;
          }
          while (v501 != (std::locale *)v502);
        }
        uint64_t v296 = a1;
      }
    }
    else
    {
      LOWORD(v540) = 257;
      uint64_t v365 = llvm::CastInst::Create(48, (uint64_t)v341, v364, (const char **)v538, 0);
      (*(void (**)(void *, llvm::Value *, void **, uint64_t, char *))(*v587 + 16))(v587, v365, &v525, v583, v584);
      if (v579)
      {
        uint64_t v366 = v578;
        int v367 = (const char *)&v578[2 * v579];
        do
        {
          llvm::Instruction::setMetadata(v365, (int)v366->__locale_, v366[1].__locale_);
          v366 += 2;
        }
        while (v366 != (std::locale *)v367);
      }
    }
  }
  BOOL v381 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v296 + 472), 0x41B58AB3uLL, 0);
  char v382 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v583 + 56) + 40) + 272), (llvm::Type *)*v381, 1);
  __int32 v383 = (char *)operator new(0x80uLL);
  *((_DWORD *)v383 + 21) = *((_DWORD *)v383 + 21) & 0x38000000 | 2;
  *(void *)__int32 v383 = 0;
  *((void *)v383 + 2) = 0;
  *((void *)v383 + 1) = 0;
  *((void *)v383 + 5) = 0;
  *((void *)v383 + 6) = 0;
  *((void *)v383 + 4) = 0;
  uint64_t v384 = (llvm::Value **)(v383 + 32);
  *((void *)v383 + 8) = **(void **)*v381 + 1576;
  uint64_t v385 = (llvm::Instruction *)(v383 + 64);
  *((void *)v383 + 3) = v383 + 64;
  *((void *)v383 + 7) = v383 + 64;
  *((void *)v383 + 9) = 0;
  v383[80] = 61;
  v383[81] = 0;
  *((_WORD *)v383 + 41) = 0;
  *((_DWORD *)v383 + 21) = 2;
  *(_OWORD *)(v383 + 88) = 0u;
  *(_OWORD *)(v383 + 104) = 0u;
  *((_DWORD *)v383 + 30) = 0;
  *(void *)__int32 v383 = v381;
  uint64_t v388 = v381[1];
  uint64_t v387 = v381 + 1;
  uint64_t v386 = v388;
  *((void *)v383 + 1) = v388;
  if (v388) {
    *(void *)(v386 + 16) = v383 + 8;
  }
  *((void *)v383 + 2) = v387;
  void *v387 = v383;
  if (*((void *)v383 + 4))
  {
    **((void **)v383 + 6) = *((void *)v383 + 5);
    uint64_t v498 = *((void *)v383 + 5);
    if (v498) {
      *(void *)(v498 + 16) = *((void *)v383 + 6);
    }
  }
  llvm::Instruction *v384 = v365;
  if (v365)
  {
    uint64_t v389 = (llvm::Value ***)((char *)v365 + 8);
    uint64_t v390 = *((void *)v365 + 1);
    *((void *)v383 + 5) = v390;
    if (v390) {
      *(void *)(v390 + 16) = v383 + 40;
    }
    *((void *)v383 + 6) = v389;
    *uint64_t v389 = v384;
  }
  *((_WORD *)v383 + 41) = 2 * (v382 & 0x3F);
  v383[124] = 1;
  LOWORD(v540) = 257;
  (*(void (**)(void *, llvm::Instruction *, std::locale *, uint64_t, char *))(*v587 + 16))(v587, v385, v538, v583, v584);
  if (v579)
  {
    unsigned int v484 = v578;
    uint64_t v485 = (const char *)&v578[2 * v579];
    do
    {
      llvm::Instruction::setMetadata(v385, (int)v484->__locale_, v484[1].__locale_);
      v484 += 2;
    }
    while (v484 != (std::locale *)v485);
  }
  uint64_t v391 = (void *)a1;
  unint64_t v392 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (uint64_t)(*(_DWORD *)(*(void *)(a1 + 8) + 56) + (*(int *)(*(void *)(a1 + 8) + 56) < 0 ? 7 : 0)) >> 3, 0);
  __int16 v528 = 257;
  std::string::size_type v393 = sub_1CB844A3C((uint64_t)&v578, v341, (uint64_t)v392, (uint64_t)&v525, 0, 0);
  uint64_t v394 = v393;
  uint64_t v395 = *(void *)(a1 + 480);
  __int16 v524 = 257;
  long long v507 = v365;
  if (*(void *)v393 != v395)
  {
    if (*((unsigned __int8 *)v393 + 16) <= 0x14u)
    {
      uint64_t v394 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v586 + 28))(v586, 48, v393, v395);
      if (v394) {
        BOOL v398 = *((unsigned __int8 *)v394 + 16) >= 0x1Cu;
      }
      else {
        BOOL v398 = 0;
      }
      if (v398)
      {
        (*(void (**)(void *, llvm::Value *, void **, uint64_t, char *))(*v587 + 16))(v587, v394, &v523, v583, v584);
        if (v579)
        {
          uint64_t v503 = v578;
          uint64_t v504 = (const char *)&v578[2 * v579];
          do
          {
            llvm::Instruction::setMetadata(v394, (int)v503->__locale_, v503[1].__locale_);
            v503 += 2;
          }
          while (v503 != (std::locale *)v504);
        }
        uint64_t v391 = (void *)a1;
      }
    }
    else
    {
      LOWORD(v540) = 257;
      uint64_t v394 = llvm::CastInst::Create(48, (uint64_t)v393, v395, (const char **)v538, 0);
      (*(void (**)(void *, llvm::Value *, void **, uint64_t, char *))(*v587 + 16))(v587, v394, &v523, v583, v584);
      if (v579)
      {
        uint64_t v396 = v578;
        BOOL v397 = (const char *)&v578[2 * v579];
        do
        {
          llvm::Instruction::setMetadata(v394, (int)v396->__locale_, v396[1].__locale_);
          v396 += 2;
        }
        while (v396 != (std::locale *)v397);
      }
    }
  }
  PrivateGlobalForString = (llvm::CastInst *)llvm::createPrivateGlobalForString(*(uint64_t **)(*v391 + 40), (char *)v552[0], (llvm::Type *)v552[1], 1, "___asan_gen_");
  int v400 = (llvm::Value *)v391[59];
  LOWORD(v540) = 257;
  uint64_t v402 = sub_1CC277FE0((uint64_t)&v578, PrivateGlobalForString, v400, (uint64_t)v538, v401);
  char v403 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v583 + 56) + 40) + 272), *(llvm::Type **)v402, 1);
  uint64_t v404 = (char *)operator new(0x80uLL);
  *((_DWORD *)v404 + 21) = *((_DWORD *)v404 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v404 = 0;
  *((void *)v404 + 2) = 0;
  *((void *)v404 + 1) = 0;
  *((void *)v404 + 5) = 0;
  *((void *)v404 + 6) = 0;
  *((void *)v404 + 4) = 0;
  int v405 = (llvm::Value **)(v404 + 32);
  *((void *)v404 + 8) = ***(void ***)v402 + 1576;
  int64_t v406 = (llvm::Instruction *)(v404 + 64);
  *((void *)v404 + 3) = v404 + 64;
  *((void *)v404 + 7) = v404 + 64;
  *((void *)v404 + 9) = 0;
  v404[80] = 61;
  v404[81] = 0;
  *((_WORD *)v404 + 41) = 0;
  *((_DWORD *)v404 + 21) = 2;
  *(_OWORD *)(v404 + 88) = 0u;
  *(_OWORD *)(v404 + 104) = 0u;
  *((_DWORD *)v404 + 30) = 0;
  *(void *)uint64_t v404 = v402;
  uint64_t v409 = *((void *)v402 + 1);
  uint64_t v408 = (void *)((char *)v402 + 8);
  uint64_t v407 = v409;
  *((void *)v404 + 1) = v409;
  if (v409) {
    *(void *)(v407 + 16) = v404 + 8;
  }
  *((void *)v404 + 2) = v408;
  void *v408 = v404;
  if (*((void *)v404 + 4))
  {
    **((void **)v404 + 6) = *((void *)v404 + 5);
    uint64_t v499 = *((void *)v404 + 5);
    if (v499) {
      *(void *)(v499 + 16) = *((void *)v404 + 6);
    }
  }
  unsigned __int8 *v405 = v394;
  if (v394)
  {
    uint64_t v412 = *((void *)v394 + 1);
    uint64_t v411 = (llvm::Value ***)((char *)v394 + 8);
    uint64_t v410 = v412;
    *((void *)v404 + 5) = v412;
    if (v412) {
      *(void *)(v410 + 16) = v404 + 40;
    }
    *((void *)v404 + 6) = v411;
    llvm::Value *v411 = v405;
  }
  *((_WORD *)v404 + 41) = 2 * (v403 & 0x3F);
  v404[124] = 1;
  LOWORD(v540) = 257;
  (*(void (**)(void *, llvm::Instruction *, std::locale *, uint64_t, char *))(*v587 + 16))(v587, v406, v538, v583, v584);
  if (v579)
  {
    uint64_t v486 = v578;
    int v487 = (const char *)&v578[2 * v579];
    do
    {
      llvm::Instruction::setMetadata(v406, (int)v486->__locale_, v486[1].__locale_);
      v486 += 2;
    }
    while (v486 != (std::locale *)v487);
  }
  uint64_t v413 = a1;
  uint64_t v414 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (uint64_t)(*(_DWORD *)(*(void *)(a1 + 8) + 56) + (*(int *)(*(void *)(a1 + 8) + 56) < 0 ? 3 : 0)) >> 2, 0);
  __int16 v528 = 257;
  char v415 = sub_1CB844A3C((uint64_t)&v578, v341, (uint64_t)v414, (uint64_t)&v525, 0, 0);
  unsigned int v417 = v415;
  uint64_t v418 = *(void *)(a1 + 480);
  __int16 v524 = 257;
  if (*(void *)v415 != v418)
  {
    if (*((unsigned __int8 *)v415 + 16) <= 0x14u)
    {
      unsigned int v417 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v586 + 28))(v586, 48, v415, v418);
      if (v417) {
        BOOL v421 = *((unsigned __int8 *)v417 + 16) >= 0x1Cu;
      }
      else {
        BOOL v421 = 0;
      }
      if (v421)
      {
        (*(void (**)(void *, llvm::Value *, void **, uint64_t, char *))(*v587 + 16))(v587, v417, &v523, v583, v584);
        if (v579)
        {
          int v505 = v578;
          int v506 = (const char *)&v578[2 * v579];
          do
          {
            llvm::Instruction::setMetadata(v417, (int)v505->__locale_, v505[1].__locale_);
            v505 += 2;
          }
          while (v505 != (std::locale *)v506);
        }
        uint64_t v413 = a1;
      }
    }
    else
    {
      LOWORD(v540) = 257;
      unsigned int v417 = llvm::CastInst::Create(48, (uint64_t)v415, v418, (const char **)v538, 0);
      (*(void (**)(void *, llvm::Value *, void **, uint64_t, char *))(*v587 + 16))(v587, v417, &v523, v583, v584);
      if (v579)
      {
        uint64_t v419 = v578;
        unint64_t v420 = (const char *)&v578[2 * v579];
        do
        {
          llvm::Instruction::setMetadata(v417, (int)v419->__locale_, v419[1].__locale_);
          v419 += 2;
        }
        while (v419 != (std::locale *)v420);
      }
    }
  }
  BOOL v422 = *(llvm::CastInst **)v413;
  unint64_t v423 = *(llvm::Value **)(v413 + 472);
  __int16 v528 = 257;
  uint64_t v424 = sub_1CC277FE0((uint64_t)&v578, v422, v423, (uint64_t)&v525, v416);
  char v425 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v583 + 56) + 40) + 272), *(llvm::Type **)v424, 1);
  uint64_t v426 = (char *)operator new(0x80uLL);
  *((_DWORD *)v426 + 21) = *((_DWORD *)v426 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v426 = 0;
  *((void *)v426 + 2) = 0;
  *((void *)v426 + 1) = 0;
  *((void *)v426 + 5) = 0;
  *((void *)v426 + 6) = 0;
  *((void *)v426 + 4) = 0;
  int v427 = (llvm::Value **)(v426 + 32);
  *((void *)v426 + 8) = ***(void ***)v424 + 1576;
  int v428 = (llvm::Instruction *)(v426 + 64);
  *((void *)v426 + 3) = v426 + 64;
  *((void *)v426 + 7) = v426 + 64;
  *((void *)v426 + 9) = 0;
  v426[80] = 61;
  v426[81] = 0;
  *((_WORD *)v426 + 41) = 0;
  *((_DWORD *)v426 + 21) = 2;
  *(_OWORD *)(v426 + 88) = 0u;
  *(_OWORD *)(v426 + 104) = 0u;
  *((_DWORD *)v426 + 30) = 0;
  *(void *)uint64_t v426 = v424;
  uint64_t v431 = *((void *)v424 + 1);
  uint64_t v430 = (void *)((char *)v424 + 8);
  uint64_t v429 = v431;
  *((void *)v426 + 1) = v431;
  if (v431) {
    *(void *)(v429 + 16) = v426 + 8;
  }
  *((void *)v426 + 2) = v430;
  *uint64_t v430 = v426;
  if (*((void *)v426 + 4))
  {
    **((void **)v426 + 6) = *((void *)v426 + 5);
    uint64_t v500 = *((void *)v426 + 5);
    if (v500) {
      *(void *)(v500 + 16) = *((void *)v426 + 6);
    }
  }
  *int v427 = v417;
  if (v417)
  {
    uint64_t v434 = *((void *)v417 + 1);
    int v433 = (llvm::Value ***)((char *)v417 + 8);
    uint64_t v432 = v434;
    *((void *)v426 + 5) = v434;
    if (v434) {
      *(void *)(v432 + 16) = v426 + 40;
    }
    *((void *)v426 + 6) = v433;
    *int v433 = v427;
  }
  *((_WORD *)v426 + 41) = 2 * (v425 & 0x3F);
  v426[124] = 1;
  LOWORD(v540) = 257;
  (*(void (**)(void *, llvm::Instruction *, std::locale *, uint64_t, char *))(*v587 + 16))(v587, v428, v538, v583, v584);
  if (v579)
  {
    unint64_t v488 = v578;
    unint64_t v489 = (const char *)&v578[2 * v579];
    do
    {
      llvm::Instruction::setMetadata(v428, (int)v488->__locale_, v488[1].__locale_);
      v488 += 2;
    }
    while (v488 != (std::locale *)v489);
  }
  llvm::GetShadowBytesAfterScope((uint64_t)&v554, v520, &v535);
  uint64_t v514 = sub_1CCADB3EC(*(void *)(v413 + 8), (llvm::ConstantInt **)v341, (uint64_t)&v578);
  sub_1CCADC4A4((llvm::ConstantInt **)v413, (uint64_t)v535, v536[0], (uint64_t)v535, v536[0], 0, *(unint64_t *)v536, (uint64_t *)&v578, v514);
  if (*(_DWORD *)(v413 + 5672))
  {
    llvm::GetShadowBytes((uint64_t *)&v554, v520, &v525);
    uint64_t v462 = *(unsigned int *)(v413 + 5672);
    if (!v462)
    {
LABEL_677:
      if (v525 != &v527) {
        free(v525);
      }
      uint64_t v365 = v507;
      goto LABEL_581;
    }
    uint64_t v463 = 32 * v462;
    unsigned int v464 = (uint64_t *)(*(void *)(v413 + 5664) + 24);
    while (1)
    {
      char v465 = sub_1CD467E2C((uint64_t)v518, v464 - 2);
      uint64_t v466 = 0;
      unint64_t v467 = *(void *)(v465[1] + 40);
      unint64_t v468 = v520[0];
      uint64_t v469 = *(v464 - 1);
      unint64_t v470 = (uint64_t **)*(v464 - 3);
      uint64_t v471 = **v470;
      v538[0].__locale_ = (std::locale::__imp *)&v539;
      v538[1].__locale_ = (std::locale::__imp *)0x200000000;
      uint64_t v543 = v471;
      uint64_t v544 = &v550;
      uint64_t v545 = &v551;
      uint64_t v546 = 0;
      LODWORD(__p) = 0;
      WORD2(__p) = 512;
      BYTE6(__p) = 7;
      uint64_t v541 = 0;
      uint64_t v542 = 0;
      __int16 v548 = 0;
      uint64_t v549 = 0;
      int v550 = &unk_1F2616E88;
      unint64_t v551 = &unk_1F2617008;
      uint64_t v541 = v470[5];
      uint64_t v542 = v470 + 3;
      uint64_t v472 = v470[6];
      BOOL v532 = v472;
      if (v472)
      {
        llvm::MetadataTracking::track((uint64_t)&v532, (unsigned __int8 *)v472, 2);
        uint64_t v466 = v532;
      }
      sub_1CB8461A4((uint64_t)v538, 0, (uint64_t)v466);
      if (!v532) {
        goto LABEL_653;
      }
      int v475 = *(unsigned __int8 *)v532;
      if ((v475 - 4) > 0x1E)
      {
        if ((v475 - 3) >= 0xFFFFFFFE) {
          uint64_t v478 = v532;
        }
        else {
          uint64_t v478 = 0;
        }
        if ((v475 - 3) < 0xFFFFFFFE)
        {
          uint64_t v413 = a1;
          if (v475 == 3) {
            *((void *)v532 + 1) = 0;
          }
          goto LABEL_653;
        }
        unint64_t v477 = (unint64_t)v478 + 8;
      }
      else
      {
        uint64_t v413 = a1;
        if ((*((unsigned char *)v532 + 1) & 0x7F) != 2 && !*((_DWORD *)v532 + 3)) {
          goto LABEL_653;
        }
        uint64_t v476 = *((void *)v532 + 2);
        if ((v476 & 4) == 0) {
          goto LABEL_653;
        }
        unint64_t v477 = v476 & 0xFFFFFFFFFFFFFFF8;
        if (!v477) {
          goto LABEL_653;
        }
      }
      uint64_t v523 = &v532;
      sub_1CC5FA668(v477 + 16, &v523);
      uint64_t v413 = a1;
LABEL_653:
      if (*(unsigned char *)v464) {
        uint64_t v473 = v535;
      }
      else {
        uint64_t v473 = v525;
      }
      if (*(unsigned char *)v464) {
        int v474 = v536[0];
      }
      else {
        int v474 = v526;
      }
      sub_1CCADC4A4((llvm::ConstantInt **)v413, (uint64_t)v535, v536[0], (uint64_t)v473, v474, (llvm::Type *)(v467 / v468), (v468 + v469 - 1) / v468 + v467 / v468, (uint64_t *)v538, v514);
      if ((long long *)v538[0].__locale_ != &v539) {
        free(v538[0].__locale_);
      }
      v464 += 4;
      v463 -= 32;
      if (!v463) {
        goto LABEL_677;
      }
    }
  }
LABEL_581:
  BOOL v532 = v534;
  long long v533 = xmmword_1CD96DBD0;
  sub_1CC5749CC(&v532, *(size_t *)v536, 0);
  uint64_t v529 = v531;
  long long v530 = xmmword_1CD96DBD0;
  uint64_t v435 = *(unsigned int *)(v413 + 808);
  if (v435)
  {
    BOOL v436 = *(uint64_t ****)(v413 + 800);
    unsigned int v509 = &v436[v435];
    int v437 = (llvm::Value ***)((char *)v365 + 8);
    do
    {
      BOOL v438 = 0;
      int v439 = *v436;
      uint64_t v440 = ***v436;
      v538[0].__locale_ = (std::locale::__imp *)&v539;
      v538[1].__locale_ = (std::locale::__imp *)0x200000000;
      uint64_t v543 = v440;
      uint64_t v544 = &v550;
      uint64_t v545 = &v551;
      uint64_t v546 = 0;
      LODWORD(__p) = 0;
      WORD2(__p) = 512;
      BYTE6(__p) = 7;
      uint64_t v541 = 0;
      uint64_t v542 = 0;
      __int16 v548 = 0;
      uint64_t v549 = 0;
      int v550 = &unk_1F2616E88;
      unint64_t v551 = &unk_1F2617008;
      uint64_t v541 = v439[5];
      uint64_t v542 = v439 + 3;
      int v441 = v439[6];
      uint64_t v523 = v441;
      if (v441)
      {
        llvm::MetadataTracking::track((uint64_t)&v523, (unsigned __int8 *)v441, 2);
        BOOL v438 = v523;
      }
      sub_1CB8461A4((uint64_t)v538, 0, (uint64_t)v438);
      if (!v523) {
        goto LABEL_586;
      }
      int v451 = *(unsigned __int8 *)v523;
      if ((v451 - 4) > 0x1E)
      {
        if ((v451 - 3) >= 0xFFFFFFFE) {
          int v456 = v523;
        }
        else {
          int v456 = 0;
        }
        if ((v451 - 3) < 0xFFFFFFFE)
        {
          if (v451 == 3) {
            *((void *)v523 + 1) = 0;
          }
          goto LABEL_586;
        }
        unint64_t v453 = (unint64_t)v456 + 8;
      }
      else
      {
        if ((*((unsigned char *)v523 + 1) & 0x7F) != 2 && !*((_DWORD *)v523 + 3)) {
          goto LABEL_586;
        }
        uint64_t v452 = *((void *)v523 + 2);
        if ((v452 & 4) == 0) {
          goto LABEL_586;
        }
        unint64_t v453 = v452 & 0xFFFFFFFFFFFFFFF8;
        if (!v453) {
          goto LABEL_586;
        }
      }
      unint64_t v525 = &v523;
      sub_1CC5FA668(v453 + 16, &v525);
LABEL_586:
      uint64_t v442 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v413 + 472), 0x45E0360EuLL, 0);
      char v443 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v541[7] + 40) + 272), (llvm::Type *)*v442, 1);
      int v444 = (char *)operator new(0x80uLL);
      *((_DWORD *)v444 + 21) = *((_DWORD *)v444 + 21) & 0x38000000 | 2;
      *(void *)int v444 = 0;
      *((void *)v444 + 2) = 0;
      *((void *)v444 + 1) = 0;
      *((void *)v444 + 5) = 0;
      *((void *)v444 + 6) = 0;
      *((void *)v444 + 4) = 0;
      uint64_t v445 = (llvm::Value **)(v444 + 32);
      *((void *)v444 + 8) = **(void **)*v442 + 1576;
      uint64_t v446 = (llvm::Instruction *)(v444 + 64);
      *((void *)v444 + 3) = v444 + 64;
      *((void *)v444 + 7) = v444 + 64;
      *((void *)v444 + 9) = 0;
      v444[80] = 61;
      v444[81] = 0;
      *((_WORD *)v444 + 41) = 0;
      *((_DWORD *)v444 + 21) = 2;
      *(_OWORD *)(v444 + 88) = 0u;
      *(_OWORD *)(v444 + 104) = 0u;
      *((_DWORD *)v444 + 30) = 0;
      *(void *)int v444 = v442;
      uint64_t v449 = v442[1];
      unint64_t v448 = v442 + 1;
      uint64_t v447 = v449;
      *((void *)v444 + 1) = v449;
      if (v449) {
        *(void *)(v447 + 16) = v444 + 8;
      }
      *((void *)v444 + 2) = v448;
      *unint64_t v448 = v444;
      if (*((void *)v444 + 4))
      {
        **((void **)v444 + 6) = *((void *)v444 + 5);
        uint64_t v457 = *((void *)v444 + 5);
        if (v457) {
          *(void *)(v457 + 16) = *((void *)v444 + 6);
        }
      }
      *uint64_t v445 = v365;
      if (v365)
      {
        int v450 = *v437;
        *((void *)v444 + 5) = *v437;
        if (v450) {
          v450[2] = (llvm::Value *)(v444 + 40);
        }
        *((void *)v444 + 6) = v437;
        *int v437 = v445;
      }
      *((_WORD *)v444 + 41) = 2 * (v443 & 0x3F);
      v444[124] = 1;
      __int16 v528 = 257;
      (*((void (**)(void **, llvm::Instruction *, void **, uint64_t *, void **))*v545 + 2))(v545, v446, &v525, v541, v542);
      if (LODWORD(v538[1].__locale_))
      {
        unsigned int v454 = v538[0].__locale_;
        int v455 = (std::locale::__imp *)((char *)v538[0].__locale_ + 16 * LODWORD(v538[1].__locale_));
        do
        {
          llvm::Instruction::setMetadata(v446, *(_DWORD *)v454, *((llvm::MDNode **)v454 + 1));
          unsigned int v454 = (std::locale::__imp *)((char *)v454 + 16);
        }
        while (v454 != v455);
      }
      uint64_t v413 = a1;
      sub_1CCADC4A4((llvm::ConstantInt **)a1, (uint64_t)v535, v536[0], (uint64_t)v532, v533, 0, *(unint64_t *)v536, (uint64_t *)v538, v514);
      if ((long long *)v538[0].__locale_ != &v539) {
        free(v538[0].__locale_);
      }
      ++v436;
    }
    while (v436 != v509);
  }
  if (*(_DWORD *)(v413 + 520)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v529 != v531) {
    free(v529);
  }
  if (v532 != v534) {
    free(v532);
  }
  if (v535 != &v537) {
    free(v535);
  }
  if (v552[0] != &v553) {
    free(v552[0]);
  }
  MEMORY[0x1D25D9CD0](v518[0], 8);
  if (v554 != &v556) {
    free(v554);
  }
  if (v575 != v577) {
    free(v575);
  }
  if (v578 != (std::locale *)&v580) {
    free(v578);
  }
  if (!v522) {
    return 1;
  }
  int v458 = LOBYTE(v522->__locale_);
  if ((v458 - 4) > 0x1E)
  {
    if ((v458 - 3) >= 0xFFFFFFFE) {
      uint64_t v461 = v522;
    }
    else {
      uint64_t v461 = 0;
    }
    if ((v458 - 3) < 0xFFFFFFFE)
    {
      if (v458 == 3) {
        v522[1].__locale_ = 0;
      }
      return 1;
    }
    unint64_t v460 = (unint64_t)&v461[1];
  }
  else
  {
    if ((BYTE1(v522->__locale_) & 0x7F) != 2 && !HIDWORD(v522[1].__locale_)) {
      return 1;
    }
    int v459 = v522[2].__locale_;
    if ((v459 & 4) == 0) {
      return 1;
    }
    unint64_t v460 = (unint64_t)v459 & 0xFFFFFFFFFFFFFFF8;
    if (!v460) {
      return 1;
    }
  }
  __int16 v554 = &v522;
  sub_1CC5FA668(v460 + 16, &v554);
  return 1;
}

BOOL sub_1CCAD960C(uint64_t a1, const llvm::Instruction *a2, llvm *a3)
{
  uint64_t v4 = *(void *)a3;
  unsigned int v5 = *(_DWORD *)(*(void *)a3 + 8);
  unsigned int v6 = v5;
  uint64_t v7 = *(void *)a3;
  if ((v5 & 0xFE) == 0x12)
  {
    uint64_t v7 = **(void **)(v4 + 16);
    unsigned int v6 = *(_DWORD *)(v7 + 8);
  }
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
  }
  if (v6 >= 0x100)
  {
    int v11 = *(_DWORD *)(a1 + 32);
    if (v11 != 30 && v11 != 25) {
      return 1;
    }
    if ((v5 & 0xFE) == 0x12)
    {
      uint64_t v4 = **(void **)(v4 + 16);
      unsigned int v5 = *(_DWORD *)(v4 + 8);
    }
    if ((v5 & 0xFE) == 0x12) {
      unsigned int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
    }
    if (v5 >> 8 == 3 || v5 >> 8 == 5) {
      return 1;
    }
  }
  int v8 = *((unsigned __int8 *)a3 + 16);
  if (v8 == 59)
  {
    if ((*((_WORD *)a3 + 9) & 0x80) != 0) {
      return 1;
    }
    if (byte_1EA61C668)
    {
      uint64_t v18 = a2;
      uint64_t v19 = a1;
      BOOL v14 = sub_1CCAD9774(a1, (uint64_t)a3);
      a2 = v18;
      a1 = v19;
      if (!v14) {
        return 1;
      }
    }
  }
  else if (v8 == 21)
  {
    uint64_t v15 = *(void *)(*((void *)a3 + 3) + 112);
    if (v15)
    {
      unsigned int v16 = *((_DWORD *)a3 + 8) + 2;
      if (v16 < *(_DWORD *)(v15 + 8))
      {
        uint64_t v17 = *(void *)(v15 + 8 * v16 + 40);
        if (v17)
        {
          if (*(char *)(v17 + 19) < 0) {
            return 1;
          }
        }
      }
    }
  }
  uint64_t v9 = *(llvm::StackSafetyGlobalInfo **)(a1 + 1008);
  return v9 && llvm::StackSafetyGlobalInfo::stackAccessIsSafe(v9, a2) && llvm::findAllocaForValue(a3, 0);
}

BOOL sub_1CCAD9774(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0;
  if (sub_1CD40EA84(*(void *)(a1 + 1016), *(_DWORD *)(a1 + 1032), a2, &v16)) {
    BOOL v5 = v16 == *(void *)(a1 + 1016) + 16 * *(unsigned int *)(a1 + 1032);
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v8 = a1 + 1016;
    uint64_t v9 = *(void *)(a2 + 64);
    unsigned int v10 = *(unsigned __int8 *)(v9 + 8);
    if (v10 > 0x11) {
      goto LABEL_21;
    }
    if (((1 << v10) & 0xAC7F) != 0)
    {
LABEL_9:
      if (*(unsigned char *)(*(void *)(a2 - 32) + 16) != 16
        || ((uint64_t v11 = *(void *)(a2 + 40), (v12 = *(void *)(*(void *)(v11 + 56) + 80)) != 0)
          ? (uint64_t v13 = v12 - 24)
          : (uint64_t v13 = 0),
            v11 != v13 || (*(_WORD *)(a2 + 18) & 0x40) != 0 || sub_1CCAD98C4((llvm::AllocaInst *)a2)))
      {
        if (!byte_1EA61C668 || (llvm::isAllocaPromotable((llvm *)a2, v4) & 1) == 0)
        {
          __int16 v14 = *(_WORD *)(a2 + 18);
          if ((v14 & 0x40) == 0)
          {
            BOOL v6 = (v14 & 0x80) == 0;
LABEL_28:
            uint64_t v16 = a2;
            *((unsigned char *)sub_1CD68E11C(v8, &v16) + 8) = v6;
            return v6;
          }
        }
      }
LABEL_27:
      BOOL v6 = 0;
      goto LABEL_28;
    }
    if (((1 << v10) & 0x30000) == 0)
    {
LABEL_21:
      if ((v10 & 0xFE) != 0x12 && v10 != 21) {
        goto LABEL_27;
      }
    }
    if (!llvm::Type::isSizedDerivedType(v9, 0)) {
      goto LABEL_27;
    }
    goto LABEL_9;
  }
  return *(unsigned char *)(v16 + 8) != 0;
}

uint64_t sub_1CCAD98C4(llvm::AllocaInst *a1)
{
  if (llvm::AllocaInst::isArrayAllocation(a1))
  {
    if (*(unsigned char *)(*((void *)a1 - 4) + 16) == 16) {
      uint64_t v2 = *((void *)a1 - 4);
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v3 = (uint64_t *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u) {
      uint64_t v3 = (uint64_t *)*v3;
    }
    uint64_t v4 = *v3;
  }
  else
  {
    uint64_t v4 = 1;
  }
  BOOL v5 = (llvm::Type *)*((void *)a1 + 8);
  BOOL v6 = (llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a1 + 5) + 56) + 40) + 272);
  unint64_t v7 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)v5) + 7) >> 3;
  BOOL v9 = v8 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v6, v5, 1);
  if (v9) {
  return (((1 << Alignment) + v7 - 1) & -(1 << Alignment)) * v4;
  }
}

BOOL sub_1CCAD99A0(llvm::ObjectSizeOffsetVisitor *a1, llvm::Value *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::ObjectSizeOffsetVisitor::compute((uint64_t *)&v17, a1, a2, a7);
  unsigned int v8 = v18;
  if (v18 >= 2 && v20 >= 2)
  {
    uint64_t v11 = v17;
    if (v18 < 0x41) {
      uint64_t v11 = (uint64_t *)&v17;
    }
    unint64_t v12 = *v11;
    if (v20 > 0x40) {
      uint64_t v13 = *v19;
    }
    else {
      uint64_t v13 = (uint64_t)((void)v19 << -(char)v20) >> -(char)v20;
    }
    BOOL v14 = v12 >= v13 && v12 - v13 >= a3 >> 3;
    BOOL result = v13 >= 0 && v14;
  }
  else
  {
    BOOL result = 0;
  }
  if (v20 >= 0x41 && v19)
  {
    BOOL v15 = result;
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    BOOL result = v15;
    unsigned int v8 = v18;
  }
  if (v8 >= 0x41)
  {
    if (v17)
    {
      BOOL v16 = result;
      MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      return v16;
    }
  }
  return result;
}

void sub_1CCAD9AAC(uint64_t a1, uint64_t a2, uint64_t **a3, llvm::CastInst *a4, __int16 a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, int a10)
{
  v71[1] = *MEMORY[0x1E4F143B8];
  if ((a7 - 8 > 0x38 || ((1 << (a7 - 8)) & 0x100000001000101) == 0) && a7 != 128
    || (a5 & 0xFF00) != 0 && 1 << a5 < (unint64_t)a6 && 1 << a5 < (unint64_t)(a7 >> 3))
  {
    uint64_t v16 = 0;
    uint64_t v17 = **a3;
    char v56 = v58;
    uint64_t v57 = 0x200000000;
    uint64_t v61 = v17;
    unsigned int v62 = &v70;
    unsigned int v63 = v71;
    uint64_t v64 = 0;
    int v65 = 0;
    __int16 v66 = 512;
    char v67 = 7;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = &unk_1F2616E88;
    v71[0] = &unk_1F2617008;
    unsigned int v18 = (unsigned __int8 *)a3[6];
    __int16 v59 = a3[5];
    uint64_t v60 = a3 + 3;
    unint64_t v52 = v18;
    if (v18)
    {
      llvm::MetadataTracking::track((uint64_t)&v52, v18, 2);
      uint64_t v16 = (uint64_t)v52;
    }
    sub_1CB8461A4((uint64_t)&v56, 0, v16);
    if (!v52) {
      goto LABEL_10;
    }
    int v40 = *v52;
    if ((v40 - 4) > 0x1E)
    {
      if ((v40 - 3) >= 0xFFFFFFFE) {
        int v43 = v52;
      }
      else {
        int v43 = 0;
      }
      if ((v40 - 3) < 0xFFFFFFFE)
      {
        if (v40 == 3) {
          *((void *)v52 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v42 = (unint64_t)(v43 + 8);
    }
    else
    {
      if ((v52[1] & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
        goto LABEL_10;
      }
      uint64_t v41 = *((void *)v52 + 2);
      if ((v41 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (!v42) {
        goto LABEL_10;
      }
    }
    int v49 = &v52;
    sub_1CC5FA668(v42 + 16, &v49);
LABEL_10:
    uint64_t v46 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), a7 >> 3, 0);
    uint64_t v19 = *(llvm::Value **)(a1 + 72);
    __int16 v51 = 257;
    uint64_t v21 = sub_1CC277FE0((uint64_t)&v56, a4, v19, (uint64_t)&v49, v20);
    uint64_t v23 = v21;
    if (a9)
    {
      uint64_t v24 = (void *)(a1 + 32 * a8);
      if (a10)
      {
        int v25 = (uint64_t **)v24[112];
        int v26 = (uint64_t **)v24[113];
        unint64_t v52 = (unsigned __int8 *)v21;
        unsigned int v53 = v46;
        int v27 = *(llvm::ConstantInt **)(*(void *)v61 + 1960);
        unsigned int v28 = *(_DWORD *)(*(void *)v61 + 1968);
        unsigned int v50 = v28 >> 8;
        if (v28 >> 8 > 0x40) {
          operator new[]();
        }
        if (v28 <= 0xFF) {
          LODWORD(v29) = 0;
        }
        else {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
        }
        int v49 = (unsigned __int8 **)(v29 & a10);
        uint64_t v30 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v49, v22);
        if (v50 >= 0x41 && v49) {
          MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
        }
        unsigned int v54 = v30;
        __int16 v51 = 257;
        sub_1CB845BAC((uint64_t *)&v56, v25, v26, (uint64_t *)&v52, 3, (uint64_t)&v49, 0);
      }
      else
      {
        uint64_t v38 = (uint64_t **)v24[110];
        uint64_t v39 = (uint64_t **)v24[111];
        unint64_t v52 = (unsigned __int8 *)v21;
        unsigned int v53 = v46;
        __int16 v51 = 257;
        sub_1CB845BAC((uint64_t *)&v56, v38, v39, (uint64_t *)&v52, 2, (uint64_t)&v49, 0);
      }
    }
    else
    {
      unint64_t v31 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), (a7 >> 3) - 1, 0);
      __int16 v55 = 257;
      char v32 = sub_1CB844A3C((uint64_t)&v56, v23, (uint64_t)v31, (uint64_t)&v52, 0, 0);
      BOOL v33 = v32;
      uint64_t v34 = *(void *)a4;
      __int16 v48 = 257;
      if (*(void *)v32 != v34)
      {
        if (*((unsigned __int8 *)v32 + 16) <= 0x14u)
        {
          uint64_t v37 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v62 + 28))(v62, 48, v32, v34);
          BOOL v33 = (llvm::Instruction *)v37;
          if (v37)
          {
            if (*(unsigned __int8 *)(v37 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, unsigned char *, uint64_t *, uint64_t **))(*v63 + 16))(v63, v37, v47, v59, v60);
              if (v57)
              {
                int v44 = (llvm::MDNode **)v56;
                char v45 = (llvm::MDNode **)((char *)v56 + 16 * v57);
                do
                {
                  llvm::Instruction::setMetadata(v33, *(_DWORD *)v44, v44[1]);
                  v44 += 2;
                }
                while (v44 != v45);
              }
            }
          }
        }
        else
        {
          __int16 v51 = 257;
          BOOL v33 = llvm::CastInst::Create(48, (uint64_t)v32, v34, (const char **)&v49, 0);
          (*(void (**)(void *, llvm::Instruction *, unsigned char *, uint64_t *, uint64_t **))(*v63 + 16))(v63, v33, v47, v59, v60);
          if (v57)
          {
            uint64_t v35 = (llvm::MDNode **)v56;
            uint64_t v36 = (llvm::MDNode **)((char *)v56 + 16 * v57);
            do
            {
              llvm::Instruction::setMetadata(v33, *(_DWORD *)v35, v35[1]);
              v35 += 2;
            }
            while (v35 != v36);
          }
        }
      }
      sub_1CCADA0C0(a1, a2, a3, a4, 8u, a8, (uint64_t)v46, 0, a10);
      sub_1CCADA0C0(a1, a2, a3, v33, 8u, a8, (uint64_t)v46, 0, a10);
    }
    if (v56 != v58) {
      free(v56);
    }
    return;
  }

  sub_1CCADA0C0(a1, a2, a3, a4, a7, a8, 0, a9, a10);
}

void sub_1CCADA0C0(uint64_t a1, uint64_t a2, uint64_t **a3, llvm::CastInst *a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, int a9)
{
  v143[1] = *MEMORY[0x1E4F143B8];
  int v15 = *(_DWORD *)(a1 + 32);
  if (v15 != 30 && v15 != 25) {
    goto LABEL_25;
  }
  uint64_t v17 = *(void *)a4;
  unsigned int v18 = *(_DWORD *)(*(void *)a4 + 8);
  unsigned int v19 = v18;
  uint64_t v20 = *(void *)a4;
  if ((v18 & 0xFE) == 0x12)
  {
    uint64_t v20 = **(void **)(v17 + 16);
    unsigned int v19 = *(_DWORD *)(v20 + 8);
  }
  if ((v19 & 0xFE) == 0x12) {
    unsigned int v19 = *(_DWORD *)(**(void **)(v20 + 16) + 8);
  }
  unsigned int v21 = v19 >> 8;
  if (v21 != 3 && v21 != 5)
  {
    if ((v18 & 0xFE) == 0x12)
    {
      uint64_t v17 = **(void **)(v17 + 16);
      unsigned int v18 = *(_DWORD *)(v17 + 8);
    }
    if ((v18 & 0xFE) == 0x12) {
      unsigned int v18 = *(_DWORD *)(**(void **)(v17 + 16) + 8);
    }
    if (v18 > 0xFF)
    {
      if (!a3) {
        return;
      }
LABEL_25:
      int v40 = 0;
      uint64_t v41 = **a3;
      uint64_t v108 = v110;
      uint64_t v109 = 0x200000000;
      uint64_t v114 = v41;
      uint64_t v115 = &v123;
      uint64_t v116 = &v124;
      uint64_t v117 = 0;
      int v118 = 0;
      __int16 v119 = 512;
      char v120 = 7;
      char v112 = 0;
      unint64_t v113 = 0;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = &unk_1F2616E88;
      int v124 = &unk_1F2617008;
      char v112 = a3[5];
      unint64_t v113 = a3 + 3;
      unint64_t v42 = a3[6];
      v125[0] = v42;
      if (v42)
      {
        llvm::MetadataTracking::track((uint64_t)v125, (unsigned __int8 *)v42, 2);
        int v40 = v125[0];
      }
      sub_1CB8461A4((uint64_t)&v108, 0, (uint64_t)v40);
      if (!v125[0])
      {
LABEL_28:
        unsigned int v44 = __clz(__rbit32(a5 >> 3));
        if (a5 >= 8) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 32;
        }
        if (a6) {
          int v46 = 32;
        }
        else {
          int v46 = 0;
        }
        if (!a8)
        {
          unsigned int v54 = *(llvm::Value **)(a1 + 72);
          __int16 v130 = 257;
          __int16 v55 = (llvm::ConstantInt **)sub_1CC277FE0((uint64_t)&v108, a4, v54, (uint64_t)&v127, v43);
          uint64_t v105 = v55;
          unsigned int v56 = a5 >> *(_DWORD *)(a1 + 96);
          if (v56 <= 8) {
            uint64_t v57 = 8;
          }
          else {
            uint64_t v57 = v56;
          }
          int v58 = (llvm::PointerType *)llvm::IntegerType::get(*(llvm::IntegerType **)a1, (llvm::LLVMContext *)v57);
          unint64_t v59 = llvm::PointerType::get(v58, 0);
          uint64_t v60 = (unsigned __int8 *)sub_1CCADB3EC(a1, v55, (uint64_t)&v108);
          NullValue = llvm::Constant::getNullValue(v58, v61, v62);
          __int16 v126 = 257;
          if (*(void *)v60 != v59)
          {
            if (v60[16] <= 0x14u)
            {
              uint64_t v66 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v115 + 28))(v115, 48, v60, v59);
              uint64_t v60 = (unsigned __int8 *)v66;
              if (v66)
              {
                if (*(unsigned __int8 *)(v66 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, uint64_t **, uint64_t *, void **))*v116 + 2))(v116, v66, v125, v112, v113);
                  if (v109)
                  {
                    uint64_t v103 = (llvm::MDNode **)v108;
                    std::string::size_type v104 = (llvm::MDNode **)((char *)v108 + 16 * v109);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v60, *(_DWORD *)v103, v103[1]);
                      v103 += 2;
                    }
                    while (v103 != v104);
                  }
                }
              }
            }
            else
            {
              __int16 v130 = 257;
              uint64_t v60 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v60, v59, (const char **)&v127, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t **, uint64_t *, void **))*v116 + 2))(v116, v60, v125, v112, v113);
              if (v109)
              {
                uint64_t v64 = (llvm::MDNode **)v108;
                int v65 = (llvm::MDNode **)((char *)v108 + 16 * v109);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v60, *(_DWORD *)v64, v64[1]);
                  v64 += 2;
                }
                while (v64 != v65);
              }
            }
          }
          __int16 v107 = 257;
          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v112[7] + 40) + 272), v58, 1);
          uint64_t v68 = operator new(0x60uLL);
          v68[13] = v68[13] & 0x38000000 | 1;
          uint64_t v69 = (llvm::Instruction *)(v68 + 8);
          *(void *)uint64_t v68 = 0;
          *((void *)v68 + 1) = 0;
          *((void *)v68 + 2) = 0;
          *((void *)v68 + 3) = v68 + 8;
          __int16 v130 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v68 + 8), (uint64_t)v58, (uint64_t)v60, (const char **)&v127, 0, Alignment, 0);
          (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, void **))*v116 + 2))(v116, v69, v106, v112, v113);
          if (v109)
          {
            uint64_t v93 = (llvm::MDNode **)v108;
            uint64_t v94 = (llvm::MDNode **)((char *)v108 + 16 * v109);
            do
            {
              llvm::Instruction::setMetadata(v69, *(_DWORD *)v93, v93[1]);
              v93 += 2;
            }
            while (v93 != v94);
          }
          __int16 v130 = 257;
          uint64_t v70 = sub_1CB845F20((uint64_t)&v108, 33, v69, (uint64_t)NullValue, (uint64_t)&v127);
          uint64_t v71 = (uint64_t)v70;
          if (byte_1EBCE6530) {
            BOOL v72 = 1;
          }
          else {
            BOOL v72 = 8 << *(_DWORD *)(a1 + 96) > (unint64_t)a5;
          }
          if (!v72) {
            sub_1CD1290BC((uint64_t)v70, (uint64_t)a3);
          }
          v125[0] = *(uint64_t **)a1;
          unint64_t v127 = 0x186A000000001;
          llvm::MDBuilder::createBranchWeights(v125, (uint64_t)&v127, 2);
          sub_1CD1290BC(v71, (uint64_t)a3);
        }
        if (byte_1EA61C8A8)
        {
          unint64_t v47 = (2 * v45 + v46) | *(unsigned __int8 *)(a1 + 60);
          __int16 v48 = *(uint64_t ***)(v112[7] + 40);
          llvm::Intrinsic::getType(*v48, 6, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v48, 6, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v48, "llvm.asan.check.memaccess", (const char *)0x19, Type, 0);
          unint64_t v52 = (uint64_t **)v50;
          if (v50) {
            unsigned int v53 = *(uint64_t ***)(v50 + 24);
          }
          else {
            unsigned int v53 = 0;
          }
          unint64_t v87 = *(llvm::Value **)(a1 + 80);
          __int16 v130 = 257;
          v106[0] = sub_1CC277FE0((uint64_t)&v108, a4, v87, (uint64_t)&v127, v51);
          v106[1] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 88), v47, 0);
          __int16 v126 = 257;
          uint64_t v83 = v106;
          uint64_t v84 = v125;
          uint64_t v85 = v53;
          BOOL v86 = v52;
        }
        else
        {
          BOOL v73 = *(llvm::Value **)(a1 + 72);
          __int16 v130 = 257;
          uint64_t v74 = (uint64_t *)sub_1CC277FE0((uint64_t)&v108, a4, v73, (uint64_t)&v127, v43);
          uint64_t v105 = v74;
          if (!a9)
          {
            uint64_t v89 = a1 + 160 * a6 + 16 * v45;
            uint64_t v85 = *(uint64_t ***)(v89 + 496);
            BOOL v86 = *(uint64_t ***)(v89 + 504);
            __int16 v130 = 257;
            uint64_t v83 = (uint64_t *)&v105;
            uint64_t v84 = (uint64_t **)&v127;
            uint64_t v88 = 1;
LABEL_65:
            sub_1CB845BAC((uint64_t *)&v108, v85, v86, v83, v88, (uint64_t)v84, 0);
            if (v108 != v110) {
              free(v108);
            }
            return;
          }
          uint64_t v76 = a1 + 160 * a6 + 16 * v45;
          uint64_t v77 = *(uint64_t ***)(v76 + 576);
          uint64_t v78 = *(uint64_t ***)(v76 + 584);
          v125[0] = v74;
          unint64_t v79 = *(llvm::ConstantInt **)(*(void *)v114 + 1960);
          unsigned int v80 = *(_DWORD *)(*(void *)v114 + 1968);
          LODWORD(v128) = v80 >> 8;
          if (v80 >> 8 > 0x40) {
            operator new[]();
          }
          if (v80 <= 0xFF) {
            LODWORD(v81) = 0;
          }
          else {
            unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v80) + 63);
          }
          unint64_t v127 = v81 & a9;
          BOOL v82 = llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v127, v75);
          if (v128 >= 0x41 && v127) {
            MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
          }
          v125[1] = v82;
          __int16 v130 = 257;
          uint64_t v83 = (uint64_t *)v125;
          uint64_t v84 = (uint64_t **)&v127;
          uint64_t v85 = v77;
          BOOL v86 = v78;
        }
        uint64_t v88 = 2;
        goto LABEL_65;
      }
      int v90 = *(unsigned __int8 *)v125[0];
      if ((v90 - 4) > 0x1E)
      {
        if ((v90 - 3) >= 0xFFFFFFFE) {
          uint64_t v95 = v125[0];
        }
        else {
          uint64_t v95 = 0;
        }
        if ((v90 - 3) < 0xFFFFFFFE)
        {
          if (v90 == 3) {
            v125[0][1] = 0;
          }
          goto LABEL_28;
        }
        unint64_t v92 = (unint64_t)(v95 + 1);
      }
      else
      {
        if ((*((unsigned char *)v125[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v125[0] + 3)) {
          goto LABEL_28;
        }
        uint64_t v91 = v125[0][2];
        if ((v91 & 4) == 0) {
          goto LABEL_28;
        }
        unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        if (!v92) {
          goto LABEL_28;
        }
      }
      unint64_t v127 = (unint64_t)v125;
      sub_1CC5FA668(v92 + 16, &v127);
      goto LABEL_28;
    }
    uint64_t v23 = 0;
    uint64_t v24 = (uint64_t *)**a3;
    unint64_t v127 = (unint64_t)&v129;
    uint64_t v128 = 0x200000000;
    int v133 = v24;
    uint64_t v134 = &v142;
    uint64_t v135 = v143;
    uint64_t v136 = 0;
    int v137 = 0;
    __int16 v138 = 512;
    char v139 = 7;
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    unint64_t v142 = &unk_1F2616E88;
    v143[0] = &unk_1F2617008;
    int v25 = a3[6];
    int v131 = a3[5];
    uint64_t v132 = a3 + 3;
    v125[0] = v25;
    if (v25)
    {
      llvm::MetadataTracking::track((uint64_t)v125, (unsigned __int8 *)v25, 2);
      uint64_t v23 = v125[0];
    }
    sub_1CB8461A4((uint64_t)&v127, 0, (uint64_t)v23);
    if (!v125[0])
    {
LABEL_22:
      int v26 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v133 + 1912), 0);
      __int16 v111 = 257;
      unsigned int v28 = (uint64_t *)sub_1CC277FE0((uint64_t)&v127, a4, v26, (uint64_t)&v108, v27);
      unint64_t v29 = *(uint64_t ***)(a1 + 1040);
      uint64_t v30 = *(uint64_t ***)(a1 + 1048);
      v125[0] = v28;
      __int16 v111 = 257;
      unint64_t v31 = (void *)sub_1CB845BAC((uint64_t *)&v127, v29, v30, (uint64_t *)v125, 1, (uint64_t)&v108, 0);
      char v32 = *(uint64_t ***)(a1 + 1056);
      BOOL v33 = *(uint64_t ***)(a1 + 1064);
      v125[0] = v28;
      __int16 v111 = 257;
      uint64_t v34 = sub_1CB845BAC((uint64_t *)&v127, v32, v33, (uint64_t *)v125, 1, (uint64_t)&v108, 0);
      __int16 v111 = 257;
      uint64_t v36 = sub_1CB844AF4((uint64_t)&v127, v31, v34, (uint64_t)&v108);
      uint64_t v37 = *v133;
      uint64_t v38 = *(void **)(*v133 + 1560);
      if (!v38)
      {
        uint64_t v100 = *(llvm::ConstantInt **)(v37 + 1888);
        unsigned int v101 = *(_DWORD *)(v37 + 1896);
        LODWORD(v109) = v101 >> 8;
        if (v101 >> 8 > 0x40) {
          operator new[]();
        }
        if (v101 <= 0xFF) {
          char v102 = 0;
        }
        else {
          char v102 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v101) + 63);
        }
        uint64_t v108 = (void *)(v102 & 1);
        uint64_t v38 = llvm::ConstantInt::get(v100, (llvm::LLVMContext *)&v108, v35);
        if (v109 >= 0x41 && v108) {
          MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
        }
        *(void *)(v37 + 1560) = v38;
      }
      __int16 v111 = 257;
      uint64_t v39 = sub_1CB845F20((uint64_t)&v127, 33, v38, (uint64_t)v36, (uint64_t)&v108);
      sub_1CD1290BC((uint64_t)v39, (uint64_t)a3);
    }
    int v96 = *(unsigned __int8 *)v125[0];
    if ((v96 - 4) > 0x1E)
    {
      if ((v96 - 3) >= 0xFFFFFFFE) {
        uint64_t v99 = v125[0];
      }
      else {
        uint64_t v99 = 0;
      }
      if ((v96 - 3) < 0xFFFFFFFE)
      {
        if (v96 == 3) {
          v125[0][1] = 0;
        }
        goto LABEL_22;
      }
      unint64_t v98 = (unint64_t)(v99 + 1);
    }
    else
    {
      if ((*((unsigned char *)v125[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v125[0] + 3)) {
        goto LABEL_22;
      }
      uint64_t v97 = v125[0][2];
      if ((v97 & 4) == 0) {
        goto LABEL_22;
      }
      unint64_t v98 = v97 & 0xFFFFFFFFFFFFFFF8;
      if (!v98) {
        goto LABEL_22;
      }
    }
    uint64_t v108 = v125;
    sub_1CC5FA668(v98 + 16, &v108);
    goto LABEL_22;
  }
}

llvm::Instruction *sub_1CCADB3EC(uint64_t a1, llvm::ConstantInt **a2, uint64_t a3)
{
  unint64_t v6 = *(int *)(a1 + 96);
  __int16 v14 = 257;
  unint64_t v7 = llvm::ConstantInt::get(*a2, v6, 0);
  unsigned int v8 = sub_1CC2429AC(a3, (uint64_t)a2, (uint64_t)v7, (uint64_t)v13, 0);
  unint64_t v9 = *(void *)(a1 + 104);
  if (v9)
  {
    unsigned int v10 = *(void **)(a1 + 992);
    if (!v10) {
      unsigned int v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), v9, 0);
    }
    if (*(unsigned char *)(a1 + 112))
    {
      __int16 v14 = 257;
      return sub_1CB844AF4(a3, v8, (uint64_t)v10, (uint64_t)v13);
    }
    else
    {
      __int16 v14 = 257;
      return sub_1CB844A3C(a3, v8, (uint64_t)v10, (uint64_t)v13, 0, 0);
    }
  }
  return v8;
}

void sub_1CCADB4C0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v13 = v17;
  __int16 v14 = v17;
  int v16 = 0;
  uint64_t v15 = 0x100000008;
  v17[0] = v3;
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = v3;
  v4[8] = 0;
  v4[24] = 0;
  unsigned int v19 = v4 + 32;
  uint64_t v20 = v4 + 32;
  unsigned int v18 = v4;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  std::string __p = 0;
  BOOL v5 = (char *)v8 + 8;
  unint64_t v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_1CBFE63FC((uint64_t)&v13, (uint64_t)&v5, a2);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v18)
  {
    unsigned int v19 = v18;
    operator delete(v18);
  }
  if (v14 != v13) {
    free(v14);
  }
}

uint64_t sub_1CCADB5C8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v2 = (unsigned char *)(result + 6008);
    BOOL v3 = *(unsigned char *)(*(void *)(a2 - 32) + 16) == 24 && *(void *)(*(void *)(result + 8) + 992) != a2;
    *v2 |= v3;
    uint64_t v4 = *(void *)(a2 + 64);
    if (v4 && *(char *)(v4 + 17) < 0) {
      BOOL result = 1;
    }
    else {
      BOOL result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 47);
    }
    v2[1] |= result;
  }
  return result;
}

__n128 sub_1CCADB65C(uint64_t a1, llvm::Instruction *this)
{
  int v4 = *(_DWORD *)(*((void *)this - 4) + 36);
  if (v4 == 173)
  {
    *(void *)(a1 + 6000) = this;
  }
  else if (v4 == 287)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 5976);
    if (v5 >= *(_DWORD *)(a1 + 5980)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 5968) + 8 * v5) = this;
    ++*(_DWORD *)(a1 + 5976);
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 62))
  {
    if (llvm::Instruction::isLifetimeStartOrEnd(this))
    {
      uint64_t v7 = *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      uint64_t v8 = *(unsigned int *)(v7 + 32);
      if (v8)
      {
        uint64_t v9 = (llvm::Type ***)(v7 + 24);
        if (v8 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v7 + 24)) == v8) {
            return result;
          }
          int v11 = 0;
          int64_t v12 = (unint64_t)(v8 + 63) >> 6;
          do
          {
            if (v12-- < 1) {
              break;
            }
            unint64_t v14 = (unint64_t)(*v9)[v12];
            v11 += __clz(v14);
          }
          while (!v14);
          int v15 = v8 | 0xFFFFFFC0;
          if ((v8 & 0x3F) == 0) {
            int v15 = 0;
          }
          if ((v8 - v11 - v15) > 0x40) {
            return result;
          }
          unsigned int v10 = **v9;
        }
        else
        {
          unsigned int v10 = (llvm::Type *)*v9;
          if (v10 == (llvm::Type *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v8)) {
            return result;
          }
        }
        if (v10 != (llvm::Type *)-1
          && llvm::ConstantInt::isValueValidForType(*(llvm::ConstantInt **)(a1 + 472), v10))
        {
          uint64_t AllocaForValue = llvm::findAllocaForValue(((llvm **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4], (llvm::Value *)1);
          if (!AllocaForValue)
          {
            *(unsigned char *)(a1 + 5936) = 1;
            return result;
          }
          uint64_t v17 = AllocaForValue;
          if (sub_1CCAD9774(*(void *)(a1 + 8), AllocaForValue))
          {
            v28.n128_u64[0] = (unint64_t)this;
            v28.n128_u64[1] = v17;
            v29.n128_u64[0] = (unint64_t)v10;
            v29.n128_u64[1] = v4 == 167;
            if (*(unsigned char *)(*(void *)(v17 - 32) + 16) == 16
              && ((v18 = *(void *)(v17 + 40), (uint64_t v19 = *(void *)(*(void *)(v18 + 56) + 80)) != 0)
                ? (uint64_t v20 = v19 - 24)
                : (uint64_t v20 = 0),
                  v18 == v20 && (*(_WORD *)(v17 + 18) & 0x40) == 0))
            {
              uint64_t v21 = 5664;
            }
            else
            {
              if (!byte_1EA61C5A8) {
                return result;
              }
              uint64_t v21 = 5392;
            }
            uint64_t v22 = a1 + v21;
            uint64_t v23 = *(unsigned int *)(v22 + 8);
            unint64_t v24 = *(void *)v22;
            if (v23 >= *(_DWORD *)(v22 + 12))
            {
              BOOL v27 = v24 + 32 * v23 > (unint64_t)&v28;
              if (v24 <= (unint64_t)&v28 && v27) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v25 = (__n128 *)(v24 + 32 * *(unsigned int *)(v22 + 8));
            __n128 result = v28;
            __n128 v26 = v29;
            *int v25 = v28;
            v25[1] = v26;
            ++*(_DWORD *)(v22 + 8);
          }
        }
      }
    }
  }
  return result;
}

void sub_1CCADB904(const char **a1, uint64_t **a2, unsigned __int8 *a3)
{
  uint64_t v6 = 0;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = **a2;
  unsigned int v44 = v46;
  uint64_t v45 = 0x200000000;
  uint64_t v49 = v7;
  uint64_t v50 = &v58;
  __int16 v51 = &v59;
  uint64_t v52 = 0;
  int v53 = 0;
  __int16 v54 = 512;
  char v55 = 7;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v58 = &unk_1F2616E88;
  unint64_t v59 = &unk_1F2617008;
  uint64_t v8 = a2 + 3;
  unsigned int v10 = a2[5];
  uint64_t v9 = (unsigned __int8 *)a2[6];
  unint64_t v47 = v10;
  __int16 v48 = v8;
  v41[0] = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)v41, v9, 2);
    uint64_t v6 = v41[0];
  }
  sub_1CB8461A4((uint64_t)&v44, 0, v6);
  if (v41[0])
  {
    int v33 = *(unsigned __int8 *)v41[0];
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        uint64_t v36 = v41[0];
      }
      else {
        uint64_t v36 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *(void *)(v41[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v35 = v36 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v41[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v41[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v34 = *(void *)(v41[0] + 16);
      if ((v34 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        goto LABEL_4;
      }
    }
    v60[0] = (const char *)v41;
    sub_1CC5FA668(v35 + 16, v60);
  }
LABEL_4:
  uint64_t v11 = (uint64_t)a1[59];
  __int16 v42 = 257;
  int64_t v12 = (llvm::Instruction *)a3;
  if (*(void *)a3 != v11)
  {
    if (a3[16] <= 0x14u)
    {
      uint64_t v15 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v50 + 28))(v50, 47, a3, v11);
      int64_t v12 = (llvm::Instruction *)v15;
      if (v15)
      {
        if (*(unsigned __int8 *)(v15 + 16) >= 0x1Cu)
        {
          (*((void (**)(void **, uint64_t, void *, uint64_t *, uint64_t **))*v51 + 2))(v51, v15, v41, v47, v48);
          if (v45)
          {
            uint64_t v37 = (llvm::MDNode **)v44;
            uint64_t v38 = (llvm::MDNode **)((char *)v44 + 16 * v45);
            do
            {
              llvm::Instruction::setMetadata(v12, *(_DWORD *)v37, v37[1]);
              v37 += 2;
            }
            while (v37 != v38);
          }
        }
      }
    }
    else
    {
      __int16 v61 = 257;
      int64_t v12 = llvm::CastInst::Create(47, (uint64_t)a3, v11, v60, 0);
      (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v51 + 2))(v51, v12, v41, v47, v48);
      if (v45)
      {
        uint64_t v13 = (llvm::MDNode **)v44;
        unint64_t v14 = (llvm::MDNode **)((char *)v44 + 16 * v45);
        do
        {
          llvm::Instruction::setMetadata(v12, *(_DWORD *)v13, v13[1]);
          v13 += 2;
        }
        while (v13 != v14);
      }
    }
  }
  int v16 = (llvm::Type *)a1[59];
  if (*((unsigned char *)a2 + 16) != 29)
  {
    uint64_t v17 = *(uint64_t ***)(a2[5][7] + 40);
    v60[0] = a1[59];
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(v17, 154, (uint64_t)v60, 1);
    if (Declaration) {
      uint64_t v19 = *(uint64_t ***)(Declaration + 24);
    }
    else {
      uint64_t v19 = 0;
    }
    __int16 v61 = 257;
    uint64_t v20 = sub_1CB845BAC((uint64_t *)&v44, v19, (uint64_t **)Declaration, 0, 0, (uint64_t)v60, 0);
    uint64_t v21 = (uint64_t)a1[59];
    __int16 v42 = 257;
    if (*(void *)a3 != v21)
    {
      if (a3[16] <= 0x14u)
      {
        a3 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v50 + 28))(v50, 47, a3, v21);
        if (a3) {
          BOOL v24 = a3[16] >= 0x1Cu;
        }
        else {
          BOOL v24 = 0;
        }
        if (v24)
        {
          (*((void (**)(void **, unsigned __int8 *, void *, uint64_t *, uint64_t **))*v51 + 2))(v51, a3, v41, v47, v48);
          if (v45)
          {
            uint64_t v39 = (llvm::MDNode **)v44;
            int v40 = (llvm::MDNode **)((char *)v44 + 16 * v45);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v39, v39[1]);
              v39 += 2;
            }
            while (v39 != v40);
          }
        }
      }
      else
      {
        __int16 v61 = 257;
        a3 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)a3, v21, v60, 0);
        (*((void (**)(void **, unsigned __int8 *, void *, uint64_t *, uint64_t **))*v51 + 2))(v51, a3, v41, v47, v48);
        if (v45)
        {
          uint64_t v22 = (llvm::MDNode **)v44;
          uint64_t v23 = (llvm::MDNode **)((char *)v44 + 16 * v45);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v22, v22[1]);
            v22 += 2;
          }
          while (v22 != v23);
        }
      }
    }
    __int16 v61 = 257;
    int64_t v12 = sub_1CB844A3C((uint64_t)&v44, a3, v20, (uint64_t)v60, 0, 0);
    int v16 = (llvm::Type *)a1[59];
  }
  int v25 = (uint64_t **)a1[672];
  __n128 v26 = (uint64_t **)a1[673];
  uint64_t v27 = (uint64_t)a1[749];
  __int16 v42 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v47[7] + 40) + 272), v16, 1);
  __n128 v29 = operator new(0x60uLL);
  v29[13] = v29[13] & 0x38000000 | 1;
  uint64_t v30 = (llvm::Instruction *)(v29 + 8);
  *(void *)__n128 v29 = 0;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = 0;
  *((void *)v29 + 3) = v29 + 8;
  __int16 v61 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v29 + 8), (uint64_t)v16, v27, v60, 0, Alignment, 0);
  (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v51 + 2))(v51, v30, v41, v47, v48);
  if (v45)
  {
    unint64_t v31 = (llvm::MDNode **)v44;
    char v32 = (llvm::MDNode **)((char *)v44 + 16 * v45);
    do
    {
      llvm::Instruction::setMetadata(v30, *(_DWORD *)v31, v31[1]);
      v31 += 2;
    }
    while (v31 != v32);
  }
  v43[0] = (uint64_t)v30;
  v43[1] = (uint64_t)v12;
  __int16 v61 = 257;
  sub_1CB845BAC((uint64_t *)&v44, v25, v26, v43, 2, (uint64_t)v60, 0);
  if (v44 != v46) {
    free(v44);
  }
}

llvm::Instruction *sub_1CCADBF14(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = **(void **)(a2 + 64);
  uint64_t v8 = (llvm::Type *)(v7 + 1912);
  if (a4)
  {
    uint64_t v9 = *(void *)(a3 + 16);
    unsigned int v10 = *(llvm::ConstantInt **)(v7 + 1984);
    unsigned int v11 = *(_DWORD *)(v7 + 1992);
    unsigned int v23 = v11 >> 8;
    if (v11 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
    if (v11 <= 0xFF) {
      unint64_t v12 = 0;
    }
    uint64_t v22 = (const char *)(v12 & v9);
    uint64_t v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v22, (const llvm::APInt *)a3);
    if (v23 >= 0x41 && v22) {
      MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
    }
    uint64_t v22 = "MyAlloca";
    __int16 v24 = 259;
    unint64_t v14 = (uint64_t *)a2;
    uint64_t v15 = v8;
    int v16 = v13;
  }
  else
  {
    uint64_t v15 = llvm::ArrayType::get((llvm::ArrayType *)(v7 + 1912), *(llvm::Type **)(a3 + 16));
    uint64_t v22 = "MyAlloca";
    __int16 v24 = 259;
    unint64_t v14 = (uint64_t *)a2;
    int v16 = 0;
  }
  uint64_t v17 = sub_1CB935044(v14, v15, v16, (uint64_t)&v22);
  unint64_t v19 = dword_1EA61C368;
  if (*(void *)(a3 + 8) > (unint64_t)dword_1EA61C368) {
    unint64_t v19 = *(void *)(a3 + 8);
  }
  *((_WORD *)v17 + 9) = *((_WORD *)v17 + 9) & 0xFFC0 | (63 - __clz(v19));
  uint64_t v20 = *(llvm::Value **)(a1 + 472);
  __int16 v24 = 257;
  return sub_1CC277FE0(a2, v17, v20, (uint64_t)&v22, v18);
}

llvm::Instruction *sub_1CCADC0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v65 = 257;
  unsigned int v10 = sub_1CB93113C(a2, a1, 2, (uint64_t)v64);
  unsigned int v11 = v10;
  uint64_t v12 = *(void *)(a3 + 40);
  int v13 = *((_DWORD *)v10 + 5);
  uint64_t v14 = v13 & 0x7FFFFFF;
  if ((v13 & 0x7FFFFFF) == *((_DWORD *)v10 + 15))
  {
    unsigned int v43 = v14 + (v14 >> 1);
    if (v43 <= 2) {
      uint64_t v44 = 2;
    }
    else {
      uint64_t v44 = v43;
    }
    *((_DWORD *)v10 + 15) = v44;
    if ((v13 & 0x40000000) != 0) {
      uint64_t v45 = (uint64_t *)*((void *)v10 - 1);
    }
    else {
      uint64_t v45 = (uint64_t *)((char *)v10 - 32 * v14);
    }
    std::string __p = v45;
    int v46 = operator new(40 * v44);
    *((void *)v11 - 1) = v46;
    unint64_t v47 = v46;
    do
    {
      void *v47 = 0;
      v47[1] = 0;
      v47[2] = 0;
      v47[3] = v11;
      v47 += 4;
    }
    while (v47 != &v46[4 * v44]);
    int v48 = *((_DWORD *)v11 + 5);
    if ((v48 & 0x40000000) != 0) {
      uint64_t v49 = (uint64_t)v46;
    }
    else {
      uint64_t v49 = (uint64_t)v11 - 32 * (v48 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)v64, __p, &__p[4 * v14], v49);
    if (v14)
    {
      memmove((void *)(v49 + 32 * v44), &__p[4 * v14], 8 * v14);
      uint64_t v50 = 4 * v14;
      do
      {
        __int16 v51 = &__p[v50];
        if (__p[v50 - 4])
        {
          *(void *)*(v51 - 2) = *(v51 - 3);
          uint64_t v52 = *(v51 - 3);
          if (v52) {
            *(void *)(v52 + 16) = *(v51 - 2);
          }
        }
        v50 -= 4;
      }
      while (v50 * 8);
    }
    operator delete(__p);
    int v13 = *((_DWORD *)v11 + 5);
  }
  uint64_t v15 = (v13 + 1) & 0x7FFFFFF;
  *((_DWORD *)v11 + 5) = v13 & 0xF8000000 | (v13 + 1) & 0x7FFFFFF;
  uint64_t v16 = (v15 - 1);
  if ((v13 & 0x40000000) != 0) {
    uint64_t v17 = (char *)*((void *)v11 - 1);
  }
  else {
    uint64_t v17 = (char *)v11 - 32 * v15;
  }
  uint64_t v18 = &v17[32 * v16];
  if (*(void *)v18)
  {
    **((void **)v18 + 2) = *((void *)v18 + 1);
    uint64_t v41 = *((void *)v18 + 1);
    if (v41) {
      *(void *)(v41 + 16) = *((void *)v18 + 2);
    }
  }
  *(void *)uint64_t v18 = a6;
  if (a6)
  {
    uint64_t v21 = *(void *)(a6 + 8);
    uint64_t v20 = (char **)(a6 + 8);
    uint64_t v19 = v21;
    uint64_t v22 = &v17[32 * v16];
    *((void *)v22 + 1) = v21;
    if (v21) {
      *(void *)(v19 + 16) = v22 + 8;
    }
    *((void *)v22 + 2) = v20;
    *uint64_t v20 = v18;
  }
  int v23 = *((_DWORD *)v11 + 5);
  uint64_t v24 = v23 & 0x7FFFFFF;
  if ((v23 & 0x40000000) != 0) {
    int v25 = (char *)*((void *)v11 - 1);
  }
  else {
    int v25 = (char *)v11 - 32 * v24;
  }
  uint64_t v26 = *((unsigned int *)v11 + 15);
  *(void *)&v25[32 * v26 + 8 * (v24 - 1)] = v12;
  uint64_t v27 = *(void *)(a5 + 40);
  int v28 = *((_DWORD *)v11 + 5);
  if ((v28 & 0x7FFFFFF) == v26)
  {
    unsigned int v53 = v26 + (v26 >> 1);
    if (v53 <= 2) {
      uint64_t v54 = 2;
    }
    else {
      uint64_t v54 = v53;
    }
    *((_DWORD *)v11 + 15) = v54;
    if ((v28 & 0x40000000) != 0) {
      char v55 = (uint64_t *)*((void *)v11 - 1);
    }
    else {
      char v55 = (uint64_t *)((char *)v11 - 32 * v26);
    }
    uint64_t v56 = operator new(40 * v54);
    *((void *)v11 - 1) = v56;
    uint64_t v57 = v56;
    do
    {
      *uint64_t v57 = 0;
      v57[1] = 0;
      v57[2] = 0;
      v57[3] = v11;
      v57 += 4;
    }
    while (v57 != &v56[4 * v54]);
    int v58 = *((_DWORD *)v11 + 5);
    if ((v58 & 0x40000000) != 0) {
      uint64_t v59 = (uint64_t)v56;
    }
    else {
      uint64_t v59 = (uint64_t)v11 - 32 * (v58 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)v64, v55, &v55[4 * v26], v59);
    if (v26)
    {
      memmove((void *)(v59 + 32 * v54), &v55[4 * v26], 8 * v26);
      uint64_t v60 = 4 * v26;
      do
      {
        __int16 v61 = &v55[v60];
        if (v55[v60 - 4])
        {
          *(void *)*(v61 - 2) = *(v61 - 3);
          uint64_t v62 = *(v61 - 3);
          if (v62) {
            *(void *)(v62 + 16) = *(v61 - 2);
          }
        }
        v60 -= 4;
      }
      while (v60 * 8);
    }
    operator delete(v55);
    int v28 = *((_DWORD *)v11 + 5);
  }
  uint64_t v29 = (v28 + 1) & 0x7FFFFFF;
  *((_DWORD *)v11 + 5) = v28 & 0xF8000000 | (v28 + 1) & 0x7FFFFFF;
  uint64_t v30 = (v29 - 1);
  if ((v28 & 0x40000000) != 0) {
    unint64_t v31 = (char *)*((void *)v11 - 1);
  }
  else {
    unint64_t v31 = (char *)v11 - 32 * v29;
  }
  char v32 = &v31[32 * v30];
  if (*(void *)v32)
  {
    **((void **)v32 + 2) = *((void *)v32 + 1);
    uint64_t v42 = *((void *)v32 + 1);
    if (v42) {
      *(void *)(v42 + 16) = *((void *)v32 + 2);
    }
  }
  *(void *)char v32 = a4;
  if (a4)
  {
    uint64_t v35 = *(void *)(a4 + 8);
    uint64_t v34 = (char **)(a4 + 8);
    uint64_t v33 = v35;
    uint64_t v36 = &v31[32 * v30];
    *((void *)v36 + 1) = v35;
    if (v35) {
      *(void *)(v33 + 16) = v36 + 8;
    }
    *((void *)v36 + 2) = v34;
    *uint64_t v34 = v32;
  }
  int v37 = *((_DWORD *)v11 + 5);
  uint64_t v38 = v37 & 0x7FFFFFF;
  if ((v37 & 0x40000000) != 0) {
    uint64_t v39 = (char *)*((void *)v11 - 1);
  }
  else {
    uint64_t v39 = (char *)v11 - 32 * v38;
  }
  *(void *)&v39[32 * *((unsigned int *)v11 + 15) + 8 * (v38 - 1)] = v27;
  return v11;
}

llvm::Instruction *sub_1CCADC4A4(llvm::ConstantInt **a1, uint64_t a2, int a3, uint64_t a4, int a5, llvm::Type *a6, unint64_t a7, uint64_t *a8, void *a9)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a6 < a7)
  {
    int v13 = (unsigned int *)&unk_1EBCE6000;
    unint64_t v14 = (unint64_t)a6;
    do
    {
      uint64_t v15 = (llvm::Type *)(v14 + 1);
      if (*(unsigned char *)(a2 + v14))
      {
        uint64_t v16 = *(unsigned __int8 *)(a4 + v14);
        uint64_t v17 = &a1[2 * v16];
        if (v17[155])
        {
          if ((unint64_t)v15 < a7)
          {
            while (*((unsigned char *)v15 + a2) && v16 == *((unsigned __int8 *)v15 + a4))
            {
              uint64_t v15 = (llvm::Type *)((char *)v15 + 1);
              if ((llvm::Type *)a7 == v15)
              {
                uint64_t v15 = (llvm::Type *)a7;
                break;
              }
            }
          }
          if ((unint64_t)v15 - v14 >= v13[620])
          {
            uint64_t v18 = (uint64_t ***)(v17 + 154);
            sub_1CCADC674((llvm::Instruction *)a1, a2, a3, a4, a5, a6, v14, (uint64_t)a8, a9);
            uint64_t v19 = *v18;
            uint64_t v20 = v18[1];
            uint64_t v26 = v19;
            uint64_t v21 = llvm::ConstantInt::get(a1[59], v14, 0);
            __int16 v30 = 257;
            v31[0] = (uint64_t)sub_1CB844A3C((uint64_t)a8, a9, (uint64_t)v21, (uint64_t)v29, 0, 0);
            v31[1] = (uint64_t)llvm::ConstantInt::get(a1[59], (unint64_t)v15 - v14, 0);
            __int16 v28 = 257;
            sub_1CB845BAC(a8, v26, v20, v31, 2, (uint64_t)v27, 0);
            int v13 = (_DWORD *)&unk_1EBCE6000;
            a6 = v15;
          }
        }
      }
      unint64_t v14 = (unint64_t)v15;
    }
    while ((unint64_t)v15 < a7);
  }
  return sub_1CCADC674((llvm::Instruction *)a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9);
}

llvm::Instruction *sub_1CCADC674(llvm::Instruction *result, uint64_t a2, int a3, uint64_t a4, int a5, llvm::Type *a6, unint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v41 = result;
  if ((unint64_t)a6 < a7)
  {
    unsigned int v11 = a6;
    LODWORD(v13) = *(_DWORD *)(*((void *)result + 1) + 56) / 8;
    if (v13 >= 8) {
      uint64_t v13 = 8;
    }
    else {
      uint64_t v13 = v13;
    }
    uint64_t v40 = v13;
    int v14 = *(unsigned __int8 *)(*(void *)(*(void *)result + 40) + 272);
    do
    {
      if (*((unsigned char *)v11 + a2))
      {
        unint64_t v15 = v40;
        do
        {
          unint64_t v16 = v15;
          v15 >>= 1;
        }
        while (v16 > a7 - (unint64_t)v11);
        unint64_t v17 = v16 - 1;
        if (v16 == 1) {
          goto LABEL_14;
        }
        do
        {
          unint64_t v18 = v16;
          if (*((unsigned char *)v11 + v17 + a2)) {
            break;
          }
          do
          {
            unint64_t v16 = v18;
            v18 >>= 1;
          }
          while (v17 <= v16 >> 1);
          --v17;
        }
        while (v17);
        if (v16)
        {
LABEL_14:
          char v19 = 0;
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          uint64_t v22 = (char *)v11 + a4;
          do
          {
            if (v14) {
              unint64_t v21 = v22[v20] | (v21 << 8);
            }
            else {
              v21 |= (unint64_t)v22[v20] << v19;
            }
            ++v20;
            v19 += 8;
          }
          while (v16 != v20);
        }
        else
        {
          unint64_t v21 = 0;
        }
        int v23 = llvm::ConstantInt::get(*((llvm::ConstantInt **)v41 + 59), (unint64_t)v11, 0);
        __int16 v46 = 257;
        uint64_t v24 = (unsigned __int8 *)sub_1CB844A3C(a8, a9, (uint64_t)v23, (uint64_t)&v44, 0, 0);
        uint64_t v25 = llvm::IntegerType::get(*(llvm::IntegerType **)(a8 + 64), (llvm::LLVMContext *)(8 * v16));
        uint64_t v27 = *(llvm::ConstantInt **)v25;
        unsigned int v28 = *(_DWORD *)(v25 + 8);
        unsigned int v45 = v28 >> 8;
        if (v28 >> 8 > 0x40) {
          operator new[]();
        }
        if (v28 <= 0xFF) {
          unint64_t v29 = 0;
        }
        else {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
        }
        uint64_t v44 = (const char *)(v29 & v21);
        __int16 v30 = (llvm::PointerType **)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v44, v26);
        if (v45 >= 0x41 && v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        }
        unint64_t v31 = llvm::PointerType::get(*v30, 0);
        __int16 v43 = 257;
        if (*(void *)v24 != v31)
        {
          if (v24[16] <= 0x14u)
          {
            uint64_t v24 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a8 + 72) + 224))(*(void *)(a8 + 72), 48, v24, v31);
            if (v24) {
              BOOL v35 = v24[16] >= 0x1Cu;
            }
            else {
              BOOL v35 = 0;
            }
            if (v35)
            {
              (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a8 + 80) + 16))(*(void *)(a8 + 80), v24, v42, *(void *)(a8 + 48), *(void *)(a8 + 56));
              uint64_t v36 = *(unsigned int *)(a8 + 8);
              if (v36)
              {
                uint64_t v37 = *(void *)a8;
                uint64_t v38 = *(void *)a8 + 16 * v36;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
                  v37 += 16;
                }
                while (v37 != v38);
              }
            }
          }
          else
          {
            __int16 v46 = 257;
            uint64_t v24 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v24, v31, &v44, 0);
            (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a8 + 80) + 16))(*(void *)(a8 + 80), v24, v42, *(void *)(a8 + 48), *(void *)(a8 + 56));
            uint64_t v32 = *(unsigned int *)(a8 + 8);
            if (v32)
            {
              uint64_t v33 = *(void *)a8;
              uint64_t v34 = *(void *)a8 + 16 * v32;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v33, *(llvm::MDNode **)(v33 + 8));
                v33 += 16;
              }
              while (v33 != v34);
            }
          }
        }
        __n128 result = sub_1CC27BF8C((uint64_t *)a8, (uint64_t)v30, (uint64_t)v24, 256, 0);
        unsigned int v11 = (llvm::Type *)((char *)v11 + v16);
      }
      else
      {
        unsigned int v11 = (llvm::Type *)((char *)v11 + 1);
      }
    }
    while ((unint64_t)v11 < a7);
  }
  return result;
}

uint64_t sub_1CCADCA64()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v6.n128_u64[0] = (unint64_t)"Enable KernelAddressSanitizer instrumentation";
  v6.n128_u64[1] = 45;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE5EB0, "asan-kernel", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE5EB0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Enable recovery mode (continue-after-error).";
  v6.n128_u64[1] = 44;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE5F70, "asan-recover", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE5F70, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Guard against compiler/runtime version mismatch.";
  v6.n128_u64[1] = 48;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6030, "asan-guard-against-version-mismatch", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6030, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument read instructions";
  v6.n128_u64[1] = 28;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE60F0, "asan-instrument-reads", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE60F0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument write instructions";
  v6.n128_u64[1] = 29;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE61B0, "asan-instrument-writes", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE61B0, &dword_1CB82C000);
  int v2 = 0;
  LODWORD(v3) = 1;
  char v1 = 0;
  *(void *)&long long v4 = &v1;
  int v5 = 1;
  v6.n128_u64[0] = (unint64_t)"Use Stack Safety analysis results";
  v6.n128_u64[1] = 33;
  sub_1CD68E8A8(&v3, (char **)&v4, &v5, &v6, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE6270, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument atomic instructions (rmw, cmpxchg)";
  v6.n128_u64[1] = 45;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6330, "asan-instrument-atomics", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6330, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument byval call arguments";
  v6.n128_u64[1] = 31;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE63F0, "asan-instrument-byval", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE63F0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"use instrumentation with slow path for all accesses";
  v6.n128_u64[1] = 51;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE64B0, "asan-always-slow-path", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE64B0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Load shadow address into a local variable for each function";
  v6.n128_u64[1] = 59;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6570, "asan-force-dynamic-shadow", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6570, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Access dynamic shadow through an ifunc global on platforms that support this";
  v6.n128_u64[1] = 76;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6630, "asan-with-ifunc", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6630, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Suppress rematerialization of dynamic shadow address by passing it through inline asm in prologue.";
  v6.n128_u64[1] = 98;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE66F0, "asan-with-ifunc-suppress-remat", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE66F0, &dword_1CB82C000);
  LODWORD(v3) = 10000;
  *(void *)&long long v4 = &v3;
  v6.n128_u64[0] = (unint64_t)"maximal number of instructions to instrument in any given BB";
  v6.n128_u64[1] = 60;
  int v5 = 1;
  sub_1CD68EA5C((int **)&v4, &v6, &v5);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE67B0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Handle stack memory";
  v6.n128_u64[1] = 19;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD68EBD4(&v6, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE6870, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Inline shadow poisoning for blocks up to the given size in bytes.";
  v6.n128_u64[1] = 65;
  LODWORD(v3) = 1;
  int v5 = 64;
  *(void *)&long long v4 = &v5;
  sub_1CD5165E4((uint64_t)&unk_1EBCE6930, "asan-max-inline-poisoning-size", &v6, &v3, (int **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE6930, &dword_1CB82C000);
  *(void *)&long long v4 = "Sets the mode of detection for stack-use-after-return.";
  *((void *)&v4 + 1) = 54;
  v6.n128_u64[0] = (unint64_t)&v7;
  uint64_t v7 = "never";
  uint64_t v8 = 5;
  int v9 = 0;
  unsigned int v10 = "Never detect stack use after return.";
  uint64_t v11 = 36;
  uint64_t v12 = "runtime";
  uint64_t v13 = 7;
  int v14 = 1;
  unint64_t v15 = "Detect stack use after return if binary flag 'ASAN_OPTIONS=detect_stack_use_after_return' is set.";
  uint64_t v16 = 97;
  unint64_t v17 = "always";
  uint64_t v18 = 6;
  int v19 = 2;
  uint64_t v20 = "Always detect stack use after return.";
  uint64_t v21 = 37;
  v6.n128_u64[1] = 0x400000003;
  int v5 = 1;
  int v2 = 1;
  BOOL v3 = &v2;
  sub_1CD68ED4C(&v4, (uint64_t)&v6, &v5, &v3);
  if ((const char **)v6.n128_u64[0] != &v7) {
    free((void *)v6.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD68D270, &qword_1EA61D540, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Create redzones for byval arguments (extra copy required)";
  v6.n128_u64[1] = 57;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE69F0, "asan-redzone-byval-args", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE69F0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Check stack-use-after-scope";
  v6.n128_u64[1] = 27;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6AB0, "asan-use-after-scope", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6AB0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Handle global objects";
  v6.n128_u64[1] = 21;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6B70, "asan-globals", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6B70, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Handle C++ initializer order";
  v6.n128_u64[1] = 28;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6C30, "asan-initialization-order", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6C30, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Instrument <, <=, >, >=, - with pointer operands";
  v6.n128_u64[1] = 48;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6CF0, "asan-detect-invalid-pointer-pair", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6CF0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Instrument <, <=, >, >= with pointer operands";
  v6.n128_u64[1] = 45;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE6DB0, "asan-detect-invalid-pointer-cmp", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6DB0, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Instrument - operations with pointer operands";
  v6.n128_u64[1] = 45;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61C228, "asan-detect-invalid-pointer-sub", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61C228, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Realign stack to the value of this flag (power of two)";
  v6.n128_u64[1] = 54;
  LODWORD(v3) = 1;
  int v5 = 32;
  *(void *)&long long v4 = &v5;
  sub_1CD5165E4((uint64_t)&unk_1EA61C2E8, "asan-realign-stack", &v6, &v3, (int **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EA61C2E8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"If the function being instrumented contains more than this number of memory accesse"
                                     "s, use callbacks instead of inline checks (-1 means never use callbacks).";
  v6.n128_u64[1] = 156;
  LODWORD(v3) = 1;
  int v5 = 7000;
  *(void *)&long long v4 = &v5;
  sub_1CD542604((llvm::cl::Option *)&unk_1EA61C3A8, "asan-instrumentation-with-call-threshold", &v6, &v3, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EA61C3A8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Prefix for memory access callbacks";
  v6.n128_u64[1] = 34;
  LODWORD(v3) = 1;
  *(void *)&long long v4 = "__asan_";
  sub_1CD68F230((long long *)&v6, &v3, (const char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EA61D370, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use prefix for memory intrinsics in KASAN mode";
  v6.n128_u64[1] = 46;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61C468, "asan-kernel-mem-intrinsic-prefix", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61C468, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"instrument dynamic allocas";
  v6.n128_u64[1] = 26;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61C528, "asan-instrument-dynamic-allocas", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61C528, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Do not instrument promotable allocas";
  v6.n128_u64[1] = 36;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61C5E8, "asan-skip-promotable-allocas", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61C5E8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"scale of asan shadow mapping";
  v6.n128_u64[1] = 28;
  LODWORD(v3) = 1;
  int v5 = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD542604((llvm::cl::Option *)&unk_1EA61C6A8, "asan-mapping-scale", &v6, &v3, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EA61C6A8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"offset of asan shadow mapping [EXPERIMENTAL]";
  v6.n128_u64[1] = 44;
  LODWORD(v3) = 1;
  int v5 = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD68F424((long long *)&v6, &v3, (int **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &qword_1EA61D2A8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Optimize instrumentation";
  v6.n128_u64[1] = 24;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD68F550(&v6, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EA61C768, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Optimize callbacks";
  v6.n128_u64[1] = 18;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61C828, "asan-optimize-callbacks", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61C828, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Instrument the same temp just once";
  v6.n128_u64[1] = 34;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD68F6C8(&v6, &v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EA61C8E8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Don't instrument scalar globals";
  v6.n128_u64[1] = 31;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61C9A8, "asan-opt-globals", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61C9A8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Don't instrument scalar stack variables";
  v6.n128_u64[1] = 39;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61CA68, "asan-opt-stack", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61CA68, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use dynamic alloca to represent stack variables";
  v6.n128_u64[1] = 47;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61CB28, "asan-stack-dynamic-alloca", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61CB28, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Force optimization experiment (for testing)";
  v6.n128_u64[1] = 43;
  LODWORD(v3) = 1;
  int v5 = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD68F840((long long *)&v6, &v3, (int **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EA61CBE8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use private aliases for global variables";
  v6.n128_u64[1] = 40;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61CCA8, "asan-use-private-alias", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61CCA8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use odr indicators to improve ODR reporting";
  v6.n128_u64[1] = 43;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61CD68, "asan-use-odr-indicator", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61CD68, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Use linker features to support dead code stripping of globals";
  v6.n128_u64[1] = 61;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61CE28, "asan-globals-live-support", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61CE28, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Place ASan constructors in comdat sections";
  v6.n128_u64[1] = 42;
  LODWORD(v3) = 1;
  LOBYTE(v5) = 1;
  *(void *)&long long v4 = &v5;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EA61CEE8, "asan-with-comdat", &v6, &v3, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA61CEE8, &dword_1CB82C000);
  *(void *)&long long v4 = "Sets the ASan destructor kind. The default is to use the value provided to the pass constructor";
  *((void *)&v4 + 1) = 95;
  v6.n128_u64[0] = (unint64_t)&v7;
  uint64_t v7 = "none";
  uint64_t v8 = 4;
  int v9 = 0;
  unsigned int v10 = "No destructors";
  uint64_t v11 = 14;
  uint64_t v12 = "global";
  uint64_t v13 = 6;
  int v14 = 1;
  unint64_t v15 = "Use global destructors";
  uint64_t v16 = 22;
  v6.n128_u64[1] = 0x400000002;
  int v5 = 2;
  BOOL v3 = &v5;
  int v2 = 1;
  sub_1CD68F968(&v4, (uint64_t)&v6, &v3, &v2);
  if ((const char **)v6.n128_u64[0] != &v7) {
    free((void *)v6.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD68D274, &qword_1EA61D798, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"debug";
  v6.n128_u64[1] = 5;
  LODWORD(v3) = 1;
  int v5 = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD68FE4C(&v6, &v3, (int **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EA61CFA8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"debug stack";
  v6.n128_u64[1] = 11;
  LODWORD(v3) = 1;
  int v5 = 0;
  *(void *)&long long v4 = &v5;
  sub_1CD68FFC4(&v6, &v3, (int **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EA61D068, &dword_1CB82C000);
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Debug func";
  v6.n128_u64[1] = 10;
  sub_1CD69013C(&v4, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EA61D458, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Debug min inst";
  v6.n128_u64[1] = 14;
  LODWORD(v3) = 1;
  int v5 = -1;
  *(void *)&long long v4 = &v5;
  sub_1CD542604((llvm::cl::Option *)&unk_1EA61D128, "asan-debug-min", &v6, &v3, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EA61D128, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Debug max inst";
  v6.n128_u64[1] = 14;
  LODWORD(v3) = 1;
  int v5 = -1;
  *(void *)&long long v4 = &v5;
  sub_1CD542604((llvm::cl::Option *)&unk_1EA61D1E8, "asan-debug-max", &v6, &v3, (_DWORD **)&v4);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EA61D1E8, &dword_1CB82C000);
}

BOOL sub_1CCADDA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5 && (*(unsigned char *)(v5 + 16) & 2) != 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 40) + 272;
  llvm::ObjectSizeOffsetEvaluator::ObjectSizeOffsetEvaluator((uint64_t)v42, v7, a2, **(void **)a1, 256, 0);
  uint64_t v39 = v41;
  uint64_t v40 = 0x400000000;
  uint64_t v8 = a1 + 72;
  for (uint64_t i = *(void *)(a1 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v8)
    {
      BOOL v6 = 0;
      goto LABEL_77;
    }
    uint64_t v10 = i - 24;
    if (!i) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(v10 + 48);
    if (v11 != v10 + 40) {
      break;
    }
  }
  while (1)
  {
    if (v11) {
      uint64_t v12 = v11 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t ***)(v12 + 40);
    if (v11) {
      uint64_t v14 = v12 + 24;
    }
    else {
      uint64_t v14 = 0;
    }
    v34[0] = &unk_1F2602158;
    v34[1] = v7;
    sub_1CD6906F0((uint64_t)&v37, v13, v14, (uint64_t)v34);
    int v15 = *(unsigned __int8 *)(v12 + 16);
    if (v15 == 60) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v11 && v15 == 60)
    {
      if (*(_WORD *)(v16 + 18)) {
        goto LABEL_42;
      }
      unint64_t v17 = (llvm::Value **)(v16 - 32);
      goto LABEL_39;
    }
    if (v15 == 61) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v11 && v15 == 61)
    {
      if (*(_WORD *)(v18 + 18)) {
        goto LABEL_42;
      }
      unint64_t v17 = (llvm::Value **)(v18 - 32);
LABEL_38:
      uint64_t v16 = *(void *)(v18 - 64);
      goto LABEL_39;
    }
    if (v15 == 64) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v11 && v15 == 64)
    {
      if (*(_WORD *)(v18 + 18)) {
        goto LABEL_42;
      }
      unint64_t v17 = (llvm::Value **)(v18 - 96);
      goto LABEL_38;
    }
    if (v15 == 65) {
      uint64_t v23 = v12;
    }
    else {
      uint64_t v23 = 0;
    }
    if (!v11 || v15 != 65 || (*(_WORD *)(v23 + 18) & 1) != 0) {
      goto LABEL_42;
    }
    unint64_t v17 = (llvm::Value **)(v23 - 64);
    uint64_t v16 = *(void *)(v23 - 32);
LABEL_39:
    int v19 = sub_1CCADE5FC(*v17, *(void *)v16, v7, (llvm::ObjectSizeOffsetEvaluator *)v42, (uint64_t)&v37, a3);
    if (v19)
    {
      if (v40 >= (unint64_t)HIDWORD(v40)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v20 = (char *)v39 + 16 * v40;
      *uint64_t v20 = v12;
      v20[1] = v19;
      LODWORD(v40) = v40 + 1;
    }
LABEL_42:
    sub_1CD4A75C4(&v37);
    uint64_t v11 = *(void *)(v11 + 8);
    uint64_t v21 = i - 24;
    if (!i) {
      uint64_t v21 = 0;
    }
    if (v11 == v21 + 40) {
      break;
    }
LABEL_49:
    if (i == v8) {
      goto LABEL_59;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v8) {
      break;
    }
    uint64_t v22 = i - 24;
    if (!i) {
      uint64_t v22 = 0;
    }
    uint64_t v11 = *(void *)(v22 + 48);
    if (v11 != v22 + 40) {
      goto LABEL_49;
    }
  }
LABEL_59:
  uint64_t v24 = (char *)v39;
  if (v40)
  {
    uint64_t v25 = (char *)v39 + 16 * v40;
    do
    {
      uint64_t v26 = *(uint64_t ***)(*(void *)v24 + 40);
      if (*(void *)v24) {
        uint64_t v27 = *(void *)v24 + 24;
      }
      else {
        uint64_t v27 = 0;
      }
      v33[0] = &unk_1F2602158;
      v33[1] = v7;
      sub_1CD6906F0((uint64_t)&v37, v26, v27, (uint64_t)v33);
      uint64_t v28 = *((void *)v24 + 1);
      if (!v28 || *(unsigned char *)(v28 + 16) != 16) {
        goto LABEL_70;
      }
      unint64_t v29 = (void *)(v28 + 24);
      if (*(_DWORD *)(v28 + 32) >= 0x41u) {
        unint64_t v29 = (void *)*v29;
      }
      if (*v29)
      {
LABEL_70:
        uint64_t v30 = v38 - 24;
        if (!v38) {
          uint64_t v30 = 0;
        }
        uint64_t v31 = *(void *)(v30 + 40);
        __int16 v36 = 257;
        llvm::BasicBlock::splitBasicBlock(v31, v38, (uint64_t)v35, 0);
      }
      sub_1CD4A75C4(&v37);
      v24 += 16;
    }
    while (v24 != v25);
    uint64_t v24 = (char *)v39;
    BOOL v6 = v40 != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  if (v24 != v41) {
    free(v24);
  }
LABEL_77:
  sub_1CD4A7604((uint64_t)v42);
  return v6;
}

void llvm::initializeBoundsCheckingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE6F38, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCADE4AC;
    v4[1] = &v2;
    BOOL v3 = v4;
    std::__call_once(&qword_1EBCE6F38, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCADE4AC(uint64_t a1)
{
}

uint64_t sub_1CCADE54C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE6F30;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262BB78;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE6F38, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCADE4AC;
    v5[1] = &PassRegistry;
    long long v4 = v5;
    std::__call_once(&qword_1EBCE6F38, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

llvm::Instruction *sub_1CCADE5FC(llvm::Value *a1, uint64_t a2, uint64_t a3, llvm::ObjectSizeOffsetEvaluator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1CB83544C(a3, a2);
  if (v11 == 1) {
  uint64_t v13 = llvm::ObjectSizeOffsetEvaluator::compute(a4, a1);
  }
  int v15 = 0;
  if (v13)
  {
    uint64_t v16 = v14;
    if (v14)
    {
      unint64_t v17 = v13;
      unint64_t v18 = v12 + 7;
      if (*((unsigned char *)v13 + 16) == 16) {
        int v19 = v13;
      }
      else {
        int v19 = 0;
      }
      uint64_t v20 = *(uint64_t **)a1;
      unsigned int v21 = *(_DWORD *)(*(void *)a1 + 8);
      if ((v21 & 0xFE) == 0x12) {
        unsigned int v21 = *(_DWORD *)(*(void *)v20[2] + 8);
      }
      unint64_t v22 = v18 >> 3;
      if (v21 < 0x100) {
        goto LABEL_19;
      }
      unsigned int v23 = v21 >> 8;
      uint64_t v24 = *(unsigned int *)(a3 + 240);
      uint64_t v25 = *(void *)(a3 + 232);
      if (v24)
      {
        uint64_t v25 = *(void *)(a3 + 232);
        unint64_t v26 = *(unsigned int *)(a3 + 240);
        do
        {
          unint64_t v27 = v26 >> 1;
          uint64_t v28 = v25 + 16 * (v26 >> 1);
          unsigned int v29 = *(_DWORD *)(v28 + 8);
          uint64_t v30 = v28 + 16;
          v26 += ~(v26 >> 1);
          if (v29 < v23) {
            uint64_t v25 = v30;
          }
          else {
            unint64_t v26 = v27;
          }
        }
        while (v26);
      }
      if (v25 == *(void *)(a3 + 232) + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_19:
      }
        uint64_t v25 = *(void *)(a3 + 232);
      uint64_t v31 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v20, (llvm::LLVMContext *)*(unsigned int *)(v25 + 4));
      uint64_t v32 = (llvm::ConstantInt *)v31;
      if ((v20[1] & 0xFE) == 0x12)
      {
        uint64_t v89 = (llvm::Type *)*((unsigned int *)v20 + 8);
        if (*((_DWORD *)v20 + 2) == 19) {
          llvm::ScalableVectorType::get(v31, v89);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v89);
        }
        uint64_t v32 = v90;
      }
      uint64_t v33 = llvm::ConstantInt::get(v32, v22, 0);
      uint64_t v34 = *(void *)(a6 + 104);
      unsigned int v35 = *(_DWORD *)(a6 + 120);
      if (v35)
      {
        unsigned int v36 = (v35 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        uint64_t v37 = v34 + 48 * v36;
        uint64_t v38 = *(void **)(v37 + 24);
        if (v38 == v17)
        {
LABEL_28:
          if (v37 == v34 + 48 * v35 || (uint64_t SCEVIter = *(void *)(v37 + 40)) == 0) {
            uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, (unint64_t)v17);
          }
          uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a6, SCEVIter, 0, 0);
          unsigned int v118 = *(_DWORD *)(RangeRef + 8);
          if (v118 > 0x40) {
            operator new[]();
          }
          uint64_t v117 = *(void *)RangeRef;
          unsigned int v120 = *(_DWORD *)(RangeRef + 24);
          if (v120 > 0x40) {
            operator new[]();
          }
          uint64_t v119 = *(void *)(RangeRef + 16);
          uint64_t v43 = *(void *)(a6 + 104);
          unsigned int v44 = *(_DWORD *)(a6 + 120);
          if (v44)
          {
            unsigned int v45 = (v44 - 1) & ((v16 >> 4) ^ (v16 >> 9));
            uint64_t v46 = v43 + 48 * v45;
            unint64_t v47 = *(void **)(v46 + 24);
            if (v47 == v16)
            {
LABEL_40:
              if (v46 == v43 + 48 * v44 || (uint64_t v50 = *(void *)(v46 + 40)) == 0) {
                uint64_t v50 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, (unint64_t)v16);
              }
              uint64_t v51 = llvm::ScalarEvolution::getRangeRef(a6, v50, 0, 0);
              unsigned int v114 = *(_DWORD *)(v51 + 8);
              if (v114 > 0x40) {
                operator new[]();
              }
              unint64_t v113 = *(char **)v51;
              unsigned int v116 = *(_DWORD *)(v51 + 24);
              if (v116 > 0x40) {
                operator new[]();
              }
              uint64_t v115 = *(void *)(v51 + 16);
              uint64_t v52 = *(void *)(a6 + 104);
              unsigned int v53 = *(_DWORD *)(a6 + 120);
              if (v53)
              {
                unsigned int v54 = (v53 - 1) & ((v33 >> 4) ^ (v33 >> 9));
                uint64_t v55 = v52 + 48 * v54;
                uint64_t v56 = *(void **)(v55 + 24);
                if (v56 == v33)
                {
LABEL_52:
                  if (v55 == v52 + 48 * v53 || (uint64_t v59 = *(void *)(v55 + 40)) == 0) {
                    uint64_t v59 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, (unint64_t)v33);
                  }
                  uint64_t v60 = llvm::ScalarEvolution::getRangeRef(a6, v59, 0, 0);
                  unsigned int v110 = *(_DWORD *)(v60 + 8);
                  if (v110 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v109 = *(char **)v60;
                  unsigned int v112 = *(_DWORD *)(v60 + 24);
                  if (v112 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v111 = *(void *)(v60 + 16);
                  __int16 v108 = 257;
                  __int16 v61 = sub_1CB84494C(a5, (uint64_t)v17, (uint64_t)v16, (uint64_t)&v106, 0, 0);
                  llvm::ConstantRange::getUnsignedMin((uint64_t)&v117, (uint64_t)&v121);
                  llvm::ConstantRange::getUnsignedMax(&v113, (uint64_t)&v104);
                  if (v122 > 0x40)
                  {
                    unint64_t v64 = (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8;
                    while (v64)
                    {
                      unint64_t v65 = *(void *)(v121 - 8 + v64);
                      unint64_t v66 = *(void *)(v104 - 8 + v64);
                      v64 -= 8;
                      if (v65 != v66)
                      {
                        if (v65 <= v66) {
                          goto LABEL_59;
                        }
                        break;
                      }
                    }
                  }
                  else if (v121 < v104)
                  {
LABEL_59:
                    __int16 v108 = 257;
                    unsigned int v63 = sub_1CB845F20(a5, 36, v17, (uint64_t)v16, (uint64_t)&v106);
                    goto LABEL_65;
                  }
                  char v67 = **(uint64_t ***)a1;
                  uint64_t v68 = *v67;
                  unsigned int v63 = *(void **)(*v67 + 1568);
                  if (!v63)
                  {
                    uint64_t v71 = *(llvm::ConstantInt **)(v68 + 1888);
                    unsigned int v72 = *(_DWORD *)(v68 + 1896);
                    unsigned int v101 = v72 >> 8;
                    if (v72 >> 8 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v100 = 0;
                    unsigned int v63 = llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&v100, v62);
                    if (v101 >= 0x41 && v100) {
                      MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
                    }
                    *(void *)(v68 + 1568) = v63;
                  }
LABEL_65:
                  if (v105 >= 0x41 && v104) {
                    MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
                  }
                  if (v122 >= 0x41 && v121) {
                    MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
                  }
                  llvm::ConstantRange::sub((llvm::ConstantRange *)&v117, (const llvm::ConstantRange *)&v113, (uint64_t)&v100);
                  llvm::ConstantRange::getUnsignedMin((uint64_t)&v100, (uint64_t)&v104);
                  llvm::ConstantRange::getUnsignedMax(&v109, (uint64_t)&v98);
                  if (v105 > 0x40)
                  {
                    unint64_t v73 = (((unint64_t)v105 + 63) >> 3) & 0x3FFFFFF8;
                    while (v73)
                    {
                      unint64_t v74 = *(void *)(v104 - 8 + v73);
                      unint64_t v75 = *(void *)(v98 - 8 + v73);
                      v73 -= 8;
                      if (v74 != v75)
                      {
                        if (v74 <= v75) {
                          goto LABEL_73;
                        }
                        break;
                      }
                    }
                  }
                  else if (v104 < v98)
                  {
LABEL_73:
                    __int16 v108 = 257;
                    uint64_t v70 = sub_1CB845F20(a5, 36, v61, (uint64_t)v33, (uint64_t)&v106);
                    goto LABEL_82;
                  }
                  uint64_t v76 = **(uint64_t ***)a1;
                  uint64_t v77 = *v76;
                  uint64_t v70 = *(void **)(*v76 + 1568);
                  if (!v70)
                  {
                    unint64_t v87 = *(llvm::ConstantInt **)(v77 + 1888);
                    unsigned int v88 = *(_DWORD *)(v77 + 1896);
                    unsigned int v122 = v88 >> 8;
                    if (v88 >> 8 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v121 = 0;
                    uint64_t v70 = llvm::ConstantInt::get(v87, (llvm::LLVMContext *)&v121, v69);
                    if (v122 >= 0x41 && v121) {
                      MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
                    }
                    *(void *)(v77 + 1568) = v70;
                  }
LABEL_82:
                  if (v99 >= 0x41 && v98) {
                    MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
                  }
                  if (v105 >= 0x41 && v104) {
                    MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
                  }
                  if (v103 >= 0x41 && v102) {
                    MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
                  }
                  if (v101 >= 0x41 && v100) {
                    MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
                  }
                  __int16 v108 = 257;
                  int v15 = sub_1CB844AF4(a5, v63, (uint64_t)v70, (uint64_t)&v106);
                  if (!v19) {
                    goto LABEL_94;
                  }
                  uint64_t v78 = (llvm::APInt *)(v19 + 3);
                  uint64_t v79 = *((unsigned int *)v19 + 8);
                  if (v79 >= 0x41)
                  {
                    uint64_t v91 = *(uint64_t **)v78;
                    int v92 = v79 - 64;
                    if (((*(void *)(*(void *)v78 + 8 * ((v79 - 1) >> 6)) >> (v79
                                                                                                - 1)) & 1) != 0)
                    {
                      if (v92 - llvm::APInt::countLeadingOnesSlowCase(v78) < 0xFFFFFFBF) {
                        goto LABEL_94;
                      }
                    }
                    else
                    {
                      int v93 = 0;
                      int64_t v94 = (unint64_t)(v79 + 63) >> 6;
                      do
                      {
                        if (v94-- < 1) {
                          break;
                        }
                        unint64_t v96 = v91[v94];
                        v93 += __clz(v96);
                      }
                      while (!v96);
                      if ((v79 & 0x3F) != 0) {
                        int v97 = v79 | 0xFFFFFFC0;
                      }
                      else {
                        int v97 = 0;
                      }
                      if ((v92 - v93 - v97) < 0xFFFFFFBF) {
                        goto LABEL_102;
                      }
                    }
                    uint64_t v80 = *v91;
                  }
                  else
                  {
                    uint64_t v80 = (uint64_t)(*(void *)v78 << -(char)v79) >> -(char)v79;
                  }
                  if (v80 < 0)
                  {
LABEL_94:
                    llvm::ConstantRange::getSignedMin((uint64_t)&v117, (uint64_t)&v106);
                    unsigned int v81 = v107 - 1;
                    if (v107 >= 0x41) {
                      BOOL v82 = (uint64_t *)(v106 + 8 * (v81 >> 6));
                    }
                    else {
                      BOOL v82 = &v106;
                    }
                    uint64_t v83 = (1 << v81) & *v82;
                    if (v107 >= 0x41 && v106) {
                      MEMORY[0x1D25D9CB0]();
                    }
                    if (v83)
                    {
                      uint64_t v84 = llvm::ConstantInt::get(v32, 0, 0);
                      __int16 v108 = 257;
                      uint64_t v85 = sub_1CB845F20(a5, 40, v16, (uint64_t)v84, (uint64_t)&v106);
                      __int16 v108 = 257;
                      int v15 = sub_1CB844AF4(a5, v85, (uint64_t)v15, (uint64_t)&v106);
                    }
                  }
LABEL_102:
                  if (v112 >= 0x41 && v111) {
                    MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
                  }
                  if (v110 >= 0x41 && v109) {
                    MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
                  }
                  if (v116 >= 0x41 && v115) {
                    MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
                  }
                  if (v114 >= 0x41 && v113) {
                    MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
                  }
                  if (v120 >= 0x41 && v119) {
                    MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
                  }
                  if (v118 >= 0x41 && v117) {
                    MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
                  }
                  return v15;
                }
                int v57 = 1;
                while (v56 != (void *)-4096)
                {
                  unsigned int v58 = v54 + v57++;
                  unsigned int v54 = v58 & (v53 - 1);
                  uint64_t v55 = v52 + 48 * v54;
                  uint64_t v56 = *(void **)(v55 + 24);
                  if (v56 == v33) {
                    goto LABEL_52;
                  }
                }
              }
              uint64_t v55 = v52 + 48 * v53;
              goto LABEL_52;
            }
            int v48 = 1;
            while (v47 != (void *)-4096)
            {
              unsigned int v49 = v45 + v48++;
              unsigned int v45 = v49 & (v44 - 1);
              uint64_t v46 = v43 + 48 * v45;
              unint64_t v47 = *(void **)(v46 + 24);
              if (v47 == v16) {
                goto LABEL_40;
              }
            }
          }
          uint64_t v46 = v43 + 48 * v44;
          goto LABEL_40;
        }
        int v39 = 1;
        while (v38 != (void *)-4096)
        {
          unsigned int v40 = v36 + v39++;
          unsigned int v36 = v40 & (v35 - 1);
          uint64_t v37 = v34 + 48 * v36;
          uint64_t v38 = *(void **)(v37 + 24);
          if (v38 == v17) {
            goto LABEL_28;
          }
        }
      }
      uint64_t v37 = v34 + 48 * v35;
      goto LABEL_28;
    }
  }
  return v15;
}

void sub_1CCADF218()
{
}

void sub_1CCADF258(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCADF290(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

void sub_1CCADF2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

uint64_t sub_1CCADF684()
{
  *(void *)&long long v1 = "Use one trap block per function";
  *((void *)&v1 + 1) = 31;
  sub_1CD69079C(&v1);

  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCE6E70, &dword_1CB82C000);
}

void llvm::initializeCGProfileLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE6F48, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCADF758;
    v4[1] = &v2;
    BOOL v3 = v4;
    std::__call_once(&qword_1EBCE6F48, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCADF758()
{
}

uint64_t sub_1CCADF7F4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE6F40;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262BC18;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE6F48, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCADF758;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCE6F48, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCADF8A4(llvm::Module *a1, uint64_t (*a2)(uint64_t, char *), uint64_t a3, uint64_t (*a4)(uint64_t, char *), uint64_t a5, int a6)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  v86[0] = 0;
  v86[1] = 0;
  int v87 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v88 = 0;
  memset(v80, 0, sizeof(v80));
  int v81 = 8;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  memset(v85, 0, sizeof(v85));
  llvm::InstrProfSymtab::create((llvm::InstrProfSymtab *)v80, a1, 0, &v92);
  if ((void)v92) {
    (*(void (**)(void))(*(void *)v92 + 8))(v92);
  }
  uint64_t v8 = (char *)a1 + 24;
  uint64_t v9 = (char *)*((void *)a1 + 4);
  if (v9 == (char *)a1 + 24)
  {
LABEL_77:
    uint64_t v41 = 0;
    goto LABEL_78;
  }
  uint64_t v68 = (uint64_t **)a1;
  uint64_t v71 = (char *)a1 + 24;
  do
  {
    if (v9) {
      long long v10 = v9 - 56;
    }
    else {
      long long v10 = 0;
    }
    if (v9 && v10[16] == 3)
    {
      if ((*((_DWORD *)v10 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_75;
      }
    }
    else if (!v10[16] && *((char **)v10 + 9) == v10 + 72 && (*((_DWORD *)v10 + 8) & 0x800000) == 0)
    {
      goto LABEL_75;
    }
    if (!a6 || (llvm::Function::getEntryCount((uint64_t ***)v10, 0, (uint64_t)&v92), (_BYTE)v93))
    {
      uint64_t v11 = a2(a3, v10);
      if (*(void *)v11)
      {
        if (*(void *)(*(void *)(*(void *)v11 + 8) + 16))
        {
          uint64_t v12 = (llvm::BlockFrequencyInfoImplBase **)v11;
          uint64_t v77 = (void *)a4(a5, v10);
          int v13 = (char *)*((void *)v10 + 10);
          if (v13 != v10 + 72)
          {
            unsigned int v72 = v12;
            do
            {
              if (v13) {
                uint64_t v14 = (const llvm::BasicBlock *)(v13 - 24);
              }
              else {
                uint64_t v14 = 0;
              }
              size_t BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v12, v14, 0);
              if ((_BYTE)v7)
              {
                uint64_t v15 = (void *)((char *)v14 + 40);
                for (uint64_t i = (void *)*((void *)v14 + 6); i != v15; uint64_t i = (void *)i[1])
                {
                  if (i) {
                    uint64_t v17 = i - 3;
                  }
                  else {
                    uint64_t v17 = 0;
                  }
                  unsigned int v18 = *((unsigned __int8 *)v17 + 16) - 33;
                  BOOL v19 = v18 > 0x33;
                  uint64_t v20 = (1 << v18) & 0x8000000000041;
                  if (!v19 && v20 != 0)
                  {
                    uint64_t v22 = *(i - 7);
                    unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
                    if (v23 < 0x15 || v23 == 24)
                    {
                      if (!*(unsigned char *)(v22 + 16))
                      {
                        BOOL v25 = *(void *)(v22 + 24) != i[6] || BlockProfileCount == 0;
                        if (!v25
                          && (*(unsigned int (**)(void, void))(*(void *)*v77 + 176))(*v77, *(i - 7))
                          && (*(_DWORD *)(v22 + 32) & 0x300) != 0x100)
                        {
                          *(void *)&long long v92 = v10;
                          *((void *)&v92 + 1) = v22;
                          long long v26 = (void *)sub_1CD6909F8((uint64_t)v86, &v92);
                          unint64_t v27 = *v26 + BlockProfileCount;
                          BOOL v28 = __CFADD__(*v26, BlockProfileCount);
                          if (v27 < BlockProfileCount) {
                            BOOL v28 = 1;
                          }
                          if (v28) {
                            unint64_t v27 = -1;
                          }
                          *long long v26 = v27;
                        }
                      }
                    }
                    else
                    {
                      unsigned int v79 = 0;
                      uint64_t v78 = 0;
                      int ValueProfDataFromInst = llvm::getValueProfDataFromInst((uint64_t)(i - 3), 0, 8u, (uint64_t)&v92, &v79, &v78, 0);
                      if (ValueProfDataFromInst && v79)
                      {
                        uint64_t v30 = &v92 + v79;
                        uint64_t v31 = (unint64_t *)&v92;
                        do
                        {
                          uint64_t v32 = sub_1CD690978((uint64_t *)v80, *v31);
                          unint64_t v33 = v31[1];
                          if (v32) {
                            BOOL v34 = v33 == 0;
                          }
                          else {
                            BOOL v34 = 1;
                          }
                          if (!v34)
                          {
                            uint64_t v35 = v32;
                            if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v77 + 176))(*v77, v32))
                            {
                              if ((*(_DWORD *)(v35 + 32) & 0x300) != 0x100)
                              {
                                *(void *)&long long v91 = v10;
                                *((void *)&v91 + 1) = v35;
                                long long v36 = (void *)sub_1CD6909F8((uint64_t)v86, &v91);
                                unint64_t v37 = *v36 + v33;
                                BOOL v38 = __CFADD__(*v36, v33);
                                if (v37 < v33) {
                                  BOOL v38 = 1;
                                }
                                if (v38) {
                                  unint64_t v37 = -1;
                                }
                                *long long v36 = v37;
                              }
                            }
                          }
                          v31 += 2;
                        }
                        while (v31 != (unint64_t *)v30);
                      }
                    }
                  }
                }
              }
              int v13 = (char *)*((void *)v13 + 1);
              uint64_t v8 = v71;
              uint64_t v12 = v72;
            }
            while (v13 != v10 + 72);
          }
        }
      }
    }
LABEL_75:
    uint64_t v9 = (char *)*((void *)v9 + 1);
  }
  while (v9 != v8);
  uint64_t v39 = v88;
  uint64_t v40 = v89;
  if (v88 == v89) {
    goto LABEL_77;
  }
  uint64_t v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  uint64_t v46 = *v68;
  do
  {
    unint64_t v47 = *(llvm::ValueAsMetadata **)v39;
    int v48 = *(llvm::ValueAsMetadata **)(v39 + 8);
    uint64_t v49 = *(void *)(v39 + 16);
    long long v92 = 0uLL;
    uint64_t v93 = 0;
    *(void *)&long long v92 = llvm::ValueAsMetadata::get(v47, v7);
    *((void *)&v92 + 1) = llvm::ValueAsMetadata::get(v48, v50);
    uint64_t v52 = *(llvm::ConstantInt **)(*v46 + 1984);
    unsigned int v53 = *(_DWORD *)(*v46 + 1992);
    DWORD2(v91) = v53 >> 8;
    if (v53 >> 8 > 0x40) {
      operator new[]();
    }
    if (v53 <= 0xFF) {
      unint64_t v54 = 0;
    }
    else {
      unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
    }
    *(void *)&long long v91 = v54 & v49;
    uint64_t v56 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v91, v51);
    if (DWORD2(v91) >= 0x41 && (void)v91) {
      MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
    }
    uint64_t v93 = llvm::ValueAsMetadata::get(v56, v55);
    uint64_t Impl = llvm::MDTuple::getImpl((uint64_t)v46, &v92, 3, 0, 1);
    unsigned int v58 = Impl;
    if (v44 >= v43)
    {
      uint64_t v59 = ((char *)v44 - v45) >> 3;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61) {
        abort();
      }
      if (((char *)v43 - v45) >> 2 > v60) {
        unint64_t v60 = ((char *)v43 - v45) >> 2;
      }
      if ((unint64_t)((char *)v43 - v45) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61)
      {
        if (v61 >> 61) {
          sub_1CB833614();
        }
        uint64_t v62 = (char *)operator new(8 * v61);
      }
      else
      {
        uint64_t v62 = 0;
      }
      unsigned int v63 = (llvm::MDNode **)&v62[8 * v59];
      *unsigned int v63 = v58;
      unint64_t v64 = v63 + 1;
      if (v44 != (llvm::MDNode **)v45)
      {
        do
        {
          unint64_t v65 = *--v44;
          *--unsigned int v63 = v65;
        }
        while (v44 != (llvm::MDNode **)v45);
        unsigned int v44 = (llvm::MDNode **)v45;
      }
      unsigned int v45 = (char *)v63;
      uint64_t v43 = (llvm::MDNode **)&v62[8 * v61];
      if (v44) {
        operator delete(v44);
      }
      unsigned int v44 = v64;
    }
    else
    {
      *v44++ = Impl;
    }
    v39 += 24;
  }
  while (v39 != v40);
  uint64_t v66 = ((char *)v44 - v45) >> 3;
  uint64_t v41 = 1;
  char v67 = llvm::MDTuple::getImpl((uint64_t)v46, v45, v66, 0, 1);
  llvm::Module::addModuleFlag(v68, (llvm::Type *)5, "CG Profile", 0xAuLL, (uint64_t)v67);
  if (v45) {
    operator delete(v45);
  }
LABEL_78:
  sub_1CD5DF60C(v80);
  sub_1CD456CB4(v86);
  return v41;
}

void sub_1CCADFEF4()
{
}

void sub_1CCADFF34(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCADFF6C(llvm::PassRegistry *a1, uint64_t a2)
{
  v4[0] = &unk_1F2617E40;
  v4[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v4);
  sub_1CB843600(a2, a2, (uint64_t)llvm::LazyBlockFrequencyInfoPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
}

uint64_t sub_1CCADFFF8(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  return sub_1CCADF8A4(a2, (uint64_t (*)(uint64_t, char *))sub_1CCAE0050, (uint64_t)&v4, (uint64_t (*)(uint64_t, char *))sub_1CCAE00E8, (uint64_t)&v3, 1);
}

llvm::BlockFrequencyInfo *sub_1CCAE0050(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  uint64_t v3 = (llvm::BlockFrequencyInfo *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 96))(v2, llvm::LazyBlockFrequencyInfoPass::ID)+ 32);

  return sub_1CD499004(v3);
}

uint64_t *sub_1CCAE00E8(uint64_t a1, const Function *a2)
{
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
}

void sub_1CCAE0188()
{
}

void sub_1CCAE01B4()
{
}

void llvm::initializeControlHeightReductionLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE6F58, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCAE0250;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE6F58, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCAE0250(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeRegionInfoPassPass(a1, v4);
  operator new();
}

uint64_t sub_1CCAE0308(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE6F50;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262BCB8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE6F58, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCAE0250;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCE6F58, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  sub_1CCAE03E4();
  return a1;
}

llvm::ControlHeightReductionPass *llvm::ControlHeightReductionPass::ControlHeightReductionPass(llvm::ControlHeightReductionPass *this)
{
  return this;
}

{
  sub_1CCAE03E4();
  return this;
}

void sub_1CCAE03E4()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = qword_1EBCE7270;
  if (byte_1EBCE727F >= 0) {
    uint64_t v0 = byte_1EBCE727F & 0x7F;
  }
  if (v0)
  {
    __int16 v26 = 260;
    uint64_t v24 = &qword_1EBCE7268;
    uint64_t v1 = sub_1CD096690((unsigned __int8 *)&v24, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v27);
    if (v28)
    {
      int v16 = (llvm::raw_ostream *)llvm::errs((llvm *)v1);
      uint64_t v17 = sub_1CB8E509C(v16, "Error: Couldn't read the chr-module-list file ");
      unsigned int v18 = &qword_1EBCE7268;
      goto LABEL_32;
    }
    uint64_t v2 = v27[0];
    uint64_t v3 = *(void *)(v27[0] + 16) - *(void *)(v27[0] + 8);
    uint64_t v24 = *(uint64_t **)(v27[0] + 8);
    uint64_t v25 = v3;
    uint64_t v22 = &v24;
    uint64_t v23 = 0;
    llvm::StringRef::split((char *)&v24, (uint64_t)&v22, 10, -1, 1);
    uint64_t v4 = (uint64_t **)v22;
    if (v23)
    {
      uint64_t v5 = 16 * v23;
      do
      {
        long long v21 = *(_OWORD *)v4;
        uint64_t v6 = (unsigned __int8 *)sub_1CD5A69D0(&v21, " \t\n\v\f\r", 6);
        *(void *)&long long v21 = v6;
        *((void *)&v21 + 1) = v7;
        if (v7) {
          sub_1CC0D7F54((llvm::StringMapImpl *)&qword_1EBCE6F60, v6, v7);
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      uint64_t v4 = (uint64_t **)v22;
    }
    if (v4 != &v24) {
      free(v4);
    }
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v8 = qword_1EBCE7358;
  if (byte_1EBCE7367 >= 0) {
    uint64_t v8 = byte_1EBCE7367 & 0x7F;
  }
  if (v8)
  {
    __int16 v26 = 260;
    uint64_t v24 = &qword_1EBCE7350;
    uint64_t v9 = sub_1CD096690((unsigned __int8 *)&v24, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v27);
    if ((v28 & 1) == 0)
    {
      uint64_t v10 = v27[0];
      uint64_t v11 = *(void *)(v27[0] + 16) - *(void *)(v27[0] + 8);
      uint64_t v24 = *(uint64_t **)(v27[0] + 8);
      uint64_t v25 = v11;
      uint64_t v22 = &v24;
      uint64_t v23 = 0;
      llvm::StringRef::split((char *)&v24, (uint64_t)&v22, 10, -1, 1);
      uint64_t v12 = (uint64_t **)v22;
      if (v23)
      {
        uint64_t v13 = 16 * v23;
        do
        {
          long long v21 = *(_OWORD *)v12;
          uint64_t v14 = (unsigned __int8 *)sub_1CD5A69D0(&v21, " \t\n\v\f\r", 6);
          *(void *)&long long v21 = v14;
          *((void *)&v21 + 1) = v15;
          if (v15) {
            sub_1CC0D7F54((llvm::StringMapImpl *)&qword_1EBCE6F80, v14, v15);
          }
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
        uint64_t v12 = (uint64_t **)v22;
      }
      if (v12 != &v24) {
        free(v12);
      }
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      return;
    }
    BOOL v19 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
    uint64_t v17 = sub_1CB8E509C(v19, "Error: Couldn't read the chr-function-list file ");
    unsigned int v18 = &qword_1EBCE7350;
LABEL_32:
    uint64_t v20 = sub_1CD55ABE0(v17, v18);
    sub_1CB8E509C(v20, "\n");
    exit(1);
  }
}

uint64_t sub_1CCAE06F8(uint64_t a1)
{
  v128[34] = *(void **)MEMORY[0x1E4F143B8];
  if (byte_1EBCE7020) {
    goto LABEL_2;
  }
  unint64_t v37 = *(uint64_t ****)a1;
  uint64_t v38 = qword_1EBCE7270;
  if (byte_1EBCE727F >= 0) {
    uint64_t v38 = byte_1EBCE727F & 0x7F;
  }
  if (!v38)
  {
    uint64_t v39 = qword_1EBCE7358;
    if (byte_1EBCE7367 >= 0) {
      uint64_t v39 = byte_1EBCE7367 & 0x7F;
    }
    if (!v39)
    {
      if (llvm::ProfileSummaryInfo::isFunctionEntryHot(*(llvm::ProfileSummaryInfo **)(a1 + 24), *(uint64_t ****)a1)) {
        goto LABEL_2;
      }
      return 0;
    }
  }
  uint64_t v40 = v37[5];
  uint64_t v43 = v40[21];
  uint64_t v41 = v40 + 21;
  uint64_t v42 = v43;
  char v44 = *((unsigned char *)v41 + 23);
  if (v44 >= 0) {
    unsigned int v45 = (unsigned __int8 *)v41;
  }
  else {
    unsigned int v45 = (unsigned __int8 *)v42;
  }
  size_t v46 = (size_t)v41[1];
  if (v44 >= 0) {
    size_t v47 = v44 & 0x7F;
  }
  else {
    size_t v47 = v46;
  }
  unint64_t v95 = dword_1EBCE6F68;
  if (dword_1EBCE6F68)
  {
    int v48 = 0;
    if (v47)
    {
      size_t v49 = v47;
      uint64_t v50 = v45;
      do
      {
        int v51 = *v50++;
        int v48 = 33 * v48 + v51;
        --v49;
      }
      while (v49);
    }
    int v52 = dword_1EBCE6F68 - 1;
    uint64_t v53 = qword_1EBCE6F60;
    uint64_t v54 = qword_1EBCE6F60 + 8 * dword_1EBCE6F68 + 8;
    uint64_t v55 = dword_1EBCE6F74;
    int v56 = 1;
    int v57 = v48;
    while (1)
    {
      uint64_t v58 = v57 & v52;
      uint64_t v59 = *(void **)(v53 + 8 * v58);
      if (v59 != (void *)-8)
      {
        if (!v59) {
          goto LABEL_115;
        }
        if (*(_DWORD *)(v54 + 4 * v58) == v48 && v47 == *v59 && (!v47 || !memcmp(v45, (char *)v59 + v55, v47))) {
          break;
        }
      }
      int v57 = v56 + v58;
      ++v56;
    }
    if (v58 != -1 && (int)v58 != v95)
    {
LABEL_2:
      __int16 v108 = v110;
      uint64_t v109 = 0x800000000;
      uint64_t v1 = sub_1CCAE42AC(a1, *(void **)(*(void *)(a1 + 32) + 32), (uint64_t)&v108);
      unsigned int v2 = v109;
      if (v1)
      {
        if (v109 >= HIDWORD(v109)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v108 + v109) = v1;
        unsigned int v2 = v109 + 1;
        LODWORD(v109) = v109 + 1;
      }
      unsigned int v105 = v107;
      uint64_t v106 = 0x800000000;
      if (!v2) {
        goto LABEL_57;
      }
      uint64_t v3 = (uint64_t *)v108;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *v3;
        *(void *)unsigned int v116 = 0;
        uint64_t v115 = 0;
        *(_DWORD *)&v116[8] = 0;
        sub_1CCAE6C30(v5, (uint64_t)&v115);
        sub_1CCAE6CE4((uint64_t)&v123, a1, v5, 0, 0, 0, (uint64_t)&v105, &v115);
        if (v123 != &v124) {
          free(v123);
        }
        MEMORY[0x1D25D9CD0](v115, 8);
        ++v3;
        v4 -= 8;
      }
      while (v4);
      if (v106)
      {
        uint64_t v6 = (uint64_t **)v105;
        uint64_t v7 = 8 * v106;
        do
        {
          uint64_t v8 = *v6++;
          sub_1CCAE8C94(a1, v8, (uint64_t)v8);
          v7 -= 8;
        }
        while (v7);
        uint64_t v9 = (char *)v105;
        uint64_t v102 = v104;
        uint64_t v103 = 0x800000000;
        if (v106)
        {
          uint64_t v10 = (char *)v105 + 8 * v106;
          uint64_t v11 = v122;
          uint64_t v12 = (uint64_t *)&v126;
          do
          {
            uint64_t v13 = *(void ****)v9;
            if (*(_DWORD *)(*(void *)v9 + 904)
               + *(_DWORD *)(*(void *)v9 + 880)
               + *(_DWORD *)(*(void *)v9 + 1712)
               + *(_DWORD *)(*(void *)v9 + 1736) >= dword_1EBCE70E0)
            {
              if (v103 >= (unint64_t)HIDWORD(v103)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v102 + v103) = v13;
              LODWORD(v103) = v103 + 1;
            }
            else
            {
              uint64_t v14 = *(uint64_t ****)(a1 + 40);
              uint64_t v15 = *(void *)***v14;
              if (*(void *)(v15 + 128)
                || (*(unsigned int (**)(void))(**(void **)(v15 + 72) + 48))(*(void *)(v15 + 72)))
              {
                unint64_t v16 = ***v13 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v17 = *(void *)(v16 + 40);
                if (v17 == v16 + 40)
                {
                  uint64_t v18 = 0;
                }
                else
                {
                  if (v17) {
                    uint64_t v19 = v17 - 24;
                  }
                  else {
                    uint64_t v19 = 0;
                  }
                  if (*(unsigned __int8 *)(v19 + 16) - 29 >= 0xB) {
                    uint64_t v18 = 0;
                  }
                  else {
                    uint64_t v18 = v19;
                  }
                }
                llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v123, (uint64_t)"chr", (uint64_t)"DropScopeWithOneBranchOrSelect", 30, v18);
                v112.__r_.__value_.__r.__words[0] = (std::string::size_type)"Drop scope with < ";
                v112.__r_.__value_.__l.__size_ = 18;
                uint64_t v20 = v12;
                sub_1CC59ADEC(v12, (uint64_t)&v112);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v112, "CHRMergeThreshold", 0x11uLL, dword_1EBCE70E0);
                uint64_t v21 = sub_1CD3D6290((uint64_t)&v123, (long long *)&v112);
                v111[0] = " biased branch(es) or select(s)";
                v111[1] = (void *)31;
                sub_1CC59ADEC((uint64_t *)(v21 + 80), (uint64_t)v111);
                int v22 = *(_DWORD *)(v21 + 8);
                v116[4] = *(unsigned char *)(v21 + 12);
                *(_DWORD *)unsigned int v116 = v22;
                long long v23 = *(_OWORD *)(v21 + 16);
                *(void *)&v116[24] = *(void *)(v21 + 32);
                *(_OWORD *)&v116[8] = v23;
                uint64_t v24 = *(void **)(v21 + 72);
                int64x2_t v25 = *(int64x2_t *)(v21 + 56);
                int64x2_t v117 = *(int64x2_t *)(v21 + 40);
                int64x2_t v118 = v25;
                uint64_t v119 = v24;
                uint64_t v115 = (uint64_t)&unk_1F2616800;
                unsigned int v120 = v11;
                uint64_t v121 = 0x400000000;
                if (*(_DWORD *)(v21 + 88)) {
                  sub_1CD494D68((uint64_t)&v120, v21 + 80);
                }
                __int16 v26 = *(void **)(v21 + 360);
                v122[32] = *(void **)(v21 + 352);
                v122[33] = v26;
                uint64_t v115 = (uint64_t)&unk_1F26165A8;
                if (v114 < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v112.__r_.__value_.__l.__data_);
                }
                uint64_t v123 = &unk_1F2616800;
                unint64_t v27 = (void **)v126;
                if (v127)
                {
                  char v28 = v11;
                  unint64_t v29 = (unint64_t)v127 << 6;
                  do
                  {
                    uint64_t v30 = (void **)((char *)v27 + v29);
                    if (*((char *)v27 + v29 - 17) < 0) {
                      operator delete(*(v30 - 5));
                    }
                    if (*((char *)v30 - 41) < 0) {
                      operator delete(*(v30 - 8));
                    }
                    v29 -= 64;
                  }
                  while (v29);
                  unint64_t v27 = (void **)v126;
                  uint64_t v11 = v28;
                }
                if (v27 != v128) {
                  free(v27);
                }
                llvm::OptimizationRemarkEmitter::emit(v14, (llvm::DiagnosticInfoOptimizationBase *)&v115);
                uint64_t v115 = (uint64_t)&unk_1F2616800;
                uint64_t v31 = (void **)v120;
                uint64_t v12 = v20;
                if (v121)
                {
                  uint64_t v32 = v11;
                  unint64_t v33 = (unint64_t)v121 << 6;
                  do
                  {
                    BOOL v34 = (void **)((char *)v31 + v33);
                    if (*((char *)v31 + v33 - 17) < 0) {
                      operator delete(*(v34 - 5));
                    }
                    if (*((char *)v34 - 41) < 0) {
                      operator delete(*(v34 - 8));
                    }
                    v33 -= 64;
                  }
                  while (v33);
                  uint64_t v31 = (void **)v120;
                  uint64_t v11 = v32;
                }
                if (v31 != v11) {
                  free(v31);
                }
              }
            }
            v9 += 8;
          }
          while (v9 != v10);
          unint64_t v65 = (uint64_t *)v102;
          unsigned int v99 = v101;
          uint64_t v100 = 0x800000000;
          if (v103)
          {
            uint64_t v66 = 8 * v103;
            do
            {
              uint64_t v67 = *v65;
              sub_1CCAE8E74(a1, *v65, *v65);
              if (v100 >= (unint64_t)HIDWORD(v100)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v99 + v100) = v67;
              unint64_t v36 = (v100 + 1);
              LODWORD(v100) = v100 + 1;
              ++v65;
              v66 -= 8;
            }
            while (v66);
            int v97 = 0;
            if (v36)
            {
              if (v36 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              bzero(v98, 8 * v36);
              int v97 = v36;
              if (!v100) {
                goto LABEL_61;
              }
              memmove(v98, v99, 8 * v100);
              unsigned int v35 = v36;
            }
            else
            {
              unsigned int v35 = 0;
            }
LABEL_60:
            unint64_t v36 = v35;
LABEL_61:
            uint64_t v123 = sub_1CCAE9088;
            sub_1CCAE90C4((uint64_t)v98, &v98[v36], (uint64_t (**)(uint64_t, uint64_t))&v123, v36, 0, 0);
            if (v97)
            {
              int64x2_t v93 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
              uint64_t v60 = v98[0];
              unint64_t v61 = (const llvm::BasicBlock *)(***(void ***)v98[0] & 0xFFFFFFFFFFFFFFF8);
              uint64_t v62 = *(void *)(*(void *)(*(void *)v98[0] + 96 * *(unsigned int *)(v98[0] + 8) - 96) + 32);
              llvm::BlockFrequencyInfo::getBlockProfileCount(*(llvm::BlockFrequencyInfoImplBase ***)(a1 + 8), v61, 0);
              if (v62)
              {
                uint64_t v115 = 1;
                *(int64x2_t *)unsigned int v116 = v93;
                *(int64x2_t *)&v116[16] = v93;
                int64x2_t v117 = v93;
                int64x2_t v118 = v93;
                uint64_t v119 = &v121;
                unsigned int v120 = (void *)0x800000000;
                if (*(_DWORD *)(v60 + 8)) {
                  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks();
                }
              }
              unsigned int v63 = *(llvm::BasicBlock **)(v60 + 864);
              uint64_t v64 = *(void *)(a1 + 16);
              LOWORD(v125) = 257;
              sub_1CD126150(v61, v63, 0, v64, 0, 0, (llvm::Twine *)&v123, 0);
            }
            if (v99 != v101) {
              free(v99);
            }
            if (v102 != v104) {
              free(v102);
            }
            if (v105 != v107) {
              free(v105);
            }
            if (v108 != v110) {
              free(v108);
            }
            return 0;
          }
LABEL_59:
          unsigned int v35 = 0;
          int v97 = 0;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_57:
        uint64_t v102 = v104;
        uint64_t v103 = 0x800000000;
      }
      unsigned int v99 = v101;
      uint64_t v100 = 0x800000000;
      goto LABEL_59;
    }
  }
LABEL_115:
  if ((*((unsigned char *)v37 + 23) & 0x10) != 0)
  {
    uint64_t v69 = ***v37;
    uint64_t v70 = *(void *)(v69 + 152);
    uint64_t v71 = *(unsigned int *)(v69 + 168);
    if (v71)
    {
      LODWORD(v72) = (v71 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      unint64_t v73 = (uint64_t ****)(v70 + 16 * v72);
      unint64_t v74 = *v73;
      if (*v73 == v37) {
        goto LABEL_123;
      }
      int v75 = 1;
      while (v74 != (uint64_t ***)-4096)
      {
        int v76 = v72 + v75++;
        uint64_t v72 = v76 & (v71 - 1);
        unint64_t v74 = *(uint64_t ****)(v70 + 16 * v72);
        if (v74 == v37)
        {
          unint64_t v73 = (uint64_t ****)(v70 + 16 * v72);
          goto LABEL_123;
        }
      }
    }
    unint64_t v73 = (uint64_t ****)(v70 + 16 * v71);
LABEL_123:
    unsigned int v77 = dword_1EBCE6F88;
    if (dword_1EBCE6F88)
    {
      uint64_t v78 = v73[1];
      size_t v81 = (size_t)*v78;
      uint64_t v80 = (char *)(v78 + 2);
      size_t v79 = v81;
      if (v81)
      {
        uint64_t v82 = 0;
        int v83 = 0;
        do
          int v83 = 33 * v83 + v80[v82++];
        while (v79 != v82);
        char v84 = 0;
      }
      else
      {
        int v83 = 0;
        char v84 = 1;
      }
      goto LABEL_128;
    }
    return 0;
  }
  unsigned int v77 = dword_1EBCE6F88;
  if (!dword_1EBCE6F88) {
    return 0;
  }
  size_t v79 = 0;
  int v83 = 0;
  char v84 = 1;
  uint64_t v80 = &byte_1CFBCE98E;
LABEL_128:
  unsigned int v85 = v77 - 1;
  uint64_t v86 = qword_1EBCE6F80;
  unint64_t v96 = (void *)v77;
  uint64_t v87 = qword_1EBCE6F80 + 8 * v77 + 8;
  uint64_t v88 = dword_1EBCE6F94;
  int v89 = 1;
  int v90 = v83;
  while (1)
  {
    uint64_t v91 = v90 & v85;
    long long v92 = *(void **)(v86 + 8 * v91);
    if (v92 != (void *)-8)
    {
      if (!v92) {
        return 0;
      }
      if (*(_DWORD *)(v87 + 4 * v91) == v83 && v79 == *v92 && ((v84 & 1) != 0 || !memcmp(v80, (char *)v92 + v88, v79))) {
        break;
      }
    }
    int v90 = v89 + v91;
    ++v89;
  }
  uint64_t result = 0;
  if (v91 != -1 && (void *)(int)v91 != v96) {
    goto LABEL_2;
  }
  return result;
}

uint64_t sub_1CCAE3D74(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 224);
  uint64_t v3 = *(uint64_t **)(a1 + 216);
  uint64_t v4 = *(unsigned int *)(a1 + 232);
  uint64_t v5 = &v3[v4];
  if (v2)
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      uint64_t v7 = v3;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v7;
        v6 -= 8;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v7 = v3;
    }
  }
  else
  {
LABEL_6:
    uint64_t v7 = &v3[v4];
  }
  uint64_t v8 = &v3[v4];
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = *v7;
      if (*v7)
      {
        sub_1CC6D8C2C(v9 + 1752);
        MEMORY[0x1D25D9CD0](*(void *)(v9 + 1752), 8);
        MEMORY[0x1D25D9CD0](*(void *)(v9 + 1728), 8);
        MEMORY[0x1D25D9CD0](*(void *)(v9 + 1704), 8);
        sub_1CCAE8594((char **)(v9 + 920));
        MEMORY[0x1D25D9CD0](*(void *)(v9 + 896), 8);
        MEMORY[0x1D25D9CD0](*(void *)(v9 + 872), 8);
        uint64_t v11 = *(void **)(v9 + 784);
        if (v11 != (void *)(v9 + 800)) {
          free(v11);
        }
        uint64_t v12 = sub_1CCAE8594((char **)v9);
        MEMORY[0x1D25D9CE0](v12, 0x10A0C4016CFE34FLL);
      }
      uint64_t v10 = v7 + 1;
      uint64_t v7 = v5;
      if (v10 != v5)
      {
        uint64_t v7 = v10;
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v7 == v5)
          {
            uint64_t v7 = v5;
            break;
          }
        }
      }
    }
    while (v7 != v8);
    uint64_t v3 = *(uint64_t **)(a1 + 216);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 192), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 168), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 144), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 120), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 96), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 72), 8);
  return a1;
}

void sub_1CCAE3F18()
{
}

void sub_1CCAE3F58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCAE3F90(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

void sub_1CCAE401C(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::BlockFrequencyInfoWrapperPass::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::BlockFrequencyInfoWrapperPass::ID);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_9:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_14:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(char **)v11 != llvm::ProfileSummaryInfoWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_14;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  (*(void (**)(uint64_t, char *))(*(void *)v13 + 96))(v13, llvm::ProfileSummaryInfoWrapperPass::ID);
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_19:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::RegionInfoPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_19;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::RegionInfoPass::ID);
  operator new();
}

uint64_t sub_1CCAE42AC(uint64_t a1, void *a2, uint64_t a3)
{
  v36[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1CCAE4690(a1, a2);
  uint64_t v7 = v6;
  unsigned int v35 = 0;
  uint64_t v8 = (uint64_t *)a2[5];
  if (v8 == (uint64_t *)a2[6]) {
    return v7;
  }
  uint64_t v34 = v6;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = *v8++;
    uint64_t v11 = sub_1CCAE42AC(a1, v10, a3);
    if (v11)
    {
      uint64_t v12 = v11;
      if (!v9) {
        goto LABEL_8;
      }
      uint64_t v13 = *(void ***)v11;
      unint64_t v14 = ***(void ***)v11 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v15 = *(unsigned int *)(v9 + 8);
      if (*(void *)(*(void *)(*(void *)v9 + 96 * v15 - 96) + 32) != v14)
      {
        if (v35 >= 8uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v36[v35++] = v9;
LABEL_8:
        uint64_t v9 = v11;
        continue;
      }
      for (uint64_t i = *(void *)(v14 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v17 = *(void *)(i + 24);
        unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
        if (v17) {
          BOOL v19 = v18 >= 0x1C;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19 && v18 - 29 <= 0xA) {
          llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
        }
      }
      uint64_t v21 = *(unsigned int *)(v11 + 8);
      if (v15 + v21 > (unint64_t)*(unsigned int *)(v9 + 12))
      {
        sub_1CCAE67F4((char **)v9, v15 + v21);
        LODWORD(v15) = *(_DWORD *)(v9 + 8);
      }
      if (v21)
      {
        int v22 = &v13[12 * v21];
        long long v23 = (void *)(*(void *)v9 + 96 * v15 + 16);
        uint64_t v24 = (uint64_t)(v13 + 2);
        do
        {
          uint64_t v26 = v24 - 16;
          uint64_t v25 = *(void *)(v24 - 16);
          *((unsigned char *)v23 - 8) = *(unsigned char *)(v24 - 8);
          *(v23 - 2) = v25;
          *long long v23 = v23 + 2;
          v23[1] = 0x800000000;
          if (*(_DWORD *)(v24 + 8)) {
            long long v23 = (void *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v23, v24);
          }
          v23 += 12;
          v24 += 96;
        }
        while ((void **)(v26 + 96) != v22);
        LODWORD(v15) = *(_DWORD *)(v9 + 8);
      }
      *(_DWORD *)(v9 + 8) = v15 + v21;
      sub_1CD47792C((unsigned int *)(v9 + 784), *(unsigned char **)(v12 + 784), (unsigned char *)(*(void *)(v12 + 784) + 8 * *(unsigned int *)(v12 + 792)));
      uint64_t v7 = v34;
    }
    else if (v9)
    {
      if (v35 >= 8uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v36[v35] = v9;
      uint64_t v9 = 0;
      ++v35;
    }
  }
  while (v8 != (uint64_t *)a2[6]);
  unsigned int v27 = v35;
  if (v9)
  {
    if (v35 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v36[v35] = v9;
    unsigned int v27 = v35 + 1;
  }
  char v28 = v36;
  if (v27)
  {
    uint64_t v29 = 8 * v27;
    do
    {
      if (v7)
      {
        unint64_t v30 = *(unsigned int *)(v7 + 792);
        if (v30 >= *(unsigned int *)(v7 + 796)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v31 = (void *)(v7 + 784);
        uint64_t v32 = (_DWORD *)(v7 + 792);
      }
      else
      {
        unint64_t v30 = *(unsigned int *)(a3 + 8);
        if (v30 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v31 = (void *)a3;
        uint64_t v32 = (_DWORD *)(a3 + 8);
      }
      *(void *)(*v31 + 8 * v30) = *v28;
      ++*v32;
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  return v7;
}

uint64_t sub_1CCAE4690(uint64_t a1, void *a2)
{
  v14[46] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (uint64_t *)(*(void *)(a1 + 32) + 40);
  v14[0] = v3;
  uint64_t v13 = 0;
  int v5 = sub_1CD3C8538(v4, v14, &v13);
  uint64_t v6 = 0;
  if (v5) {
    uint64_t v6 = *(void **)(v13 + 8);
  }
  if (v6 == a2)
  {
    for (uint64_t i = *(void *)(v3 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v9 = *(void *)(i + 24);
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v9) {
        BOOL v11 = v10 >= 0x1C;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11 && v10 - 29 <= 0xA) {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
      }
    }
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks();
  }
  return 0;
}

uint64_t sub_1CCAE5E80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v27 = 0;
  uint64_t result = sub_1CC091A20(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v27);
  uint64_t v7 = v27;
  if (result)
  {
    char v8 = 0;
    goto LABEL_8;
  }
  char v28 = v27;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    int v11 = 2 * v10;
    goto LABEL_10;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    uint64_t v13 = *(void *)a2;
    unint64_t v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 64;
    }
    *(_DWORD *)(a2 + 16) = v17;
    unsigned int v18 = operator new(8 * v17, (std::align_val_t)8uLL);
    *(void *)a2 = v18;
    if (v13)
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v19 = *(unsigned int *)(a2 + 16);
      if (v19)
      {
        uint64_t v20 = 8 * v19;
        do
        {
          *v18++ = -4096;
          v20 -= 8;
        }
        while (v20);
      }
      if (v10)
      {
        int v21 = 0;
        uint64_t v22 = 8 * v10;
        long long v23 = (uint64_t *)v13;
        do
        {
          uint64_t v24 = *v23;
          if ((*v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            uint64_t v29 = 0;
            sub_1CC091A20(*(void *)a2, *(_DWORD *)(a2 + 16), v24, &v29);
            *uint64_t v29 = v24;
            *(_DWORD *)(a2 + 8) = ++v21;
          }
          ++v23;
          v22 -= 8;
        }
        while (v22);
      }
      MEMORY[0x1D25D9CD0](v13, 8);
      unsigned int v18 = *(void **)a2;
      LODWORD(v25) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v25 = *(unsigned int *)(a2 + 16);
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          v18[i] = -4096;
      }
    }
    uint64_t result = sub_1CC091A20((uint64_t)v18, v25, *a3, &v28);
    int v9 = *(_DWORD *)(a2 + 8);
    uint64_t v7 = v28;
  }
  *(_DWORD *)(a2 + 8) = v9 + 1;
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v7 = *a3;
  char v8 = 1;
LABEL_8:
  uint64_t v12 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

void sub_1CCAE6084(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v66[34] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = &a1[a2];
    uint64_t v40 = a3 + 144;
    uint64_t v42 = a3 + 192;
    uint64_t v41 = a3 + 120;
    do
    {
      uint64_t v8 = *v6;
      LODWORD(v44[0]) = -1;
      unsigned int v43 = -1;
      if ((*(unsigned char *)(v8 + 23) & 0x20) == 0)
      {
LABEL_19:
        uint64_t v23 = 0;
        goto LABEL_20;
      }
      uint64_t v9 = ***(void ***)v8;
      int v56 = (void *)v8;
      int v10 = *(_DWORD *)(v9 + 2496);
      if (v10)
      {
        uint64_t v11 = *(void *)(v9 + 2480);
        int v12 = v10 - 1;
        unsigned int v13 = v12 & ((v8 >> 4) ^ (v8 >> 9));
        unint64_t v14 = (void *)(v11 + 40 * v13);
        uint64_t v15 = *v14;
        if (*v14 == v8) {
          goto LABEL_14;
        }
        int v16 = 0;
        int v17 = 1;
        while (v15 != -4096)
        {
          if (v16) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v15 == -8192;
          }
          if (v18) {
            int v16 = v14;
          }
          unsigned int v19 = v13 + v17++;
          unsigned int v13 = v19 & v12;
          unint64_t v14 = (void *)(v11 + 40 * v13);
          uint64_t v15 = *v14;
          if (*v14 == v8) {
            goto LABEL_14;
          }
        }
        if (v16) {
          unint64_t v37 = v16;
        }
        else {
          unint64_t v37 = v14;
        }
      }
      else
      {
        unint64_t v37 = 0;
      }
      unint64_t v14 = sub_1CC609054(v9 + 2480, (uint64_t)&v56, (uint64_t *)&v56, v37);
      uint64_t v38 = v56;
      void v14[4] = 0;
      v14[3] = 0;
      *unint64_t v14 = v38;
      v14[1] = v14 + 3;
      void v14[2] = 0x100000000;
LABEL_14:
      uint64_t v20 = *((unsigned int *)v14 + 4);
      if (!v20) {
        goto LABEL_19;
      }
      int v21 = (uint64_t *)(v14[1] + 8);
      uint64_t v22 = 16 * v20;
      while (*((_DWORD *)v21 - 2) != 2)
      {
        uint64_t v23 = 0;
        v21 += 2;
        v22 -= 16;
        if (!v22) {
          goto LABEL_20;
        }
      }
      uint64_t v23 = *v21;
LABEL_20:
      if (sub_1CCAE65D8(v23, v44, &v43))
      {
        unsigned int v24 = v44[0];
        unsigned int v25 = v43;
        unsigned int v45 = (void *)v8;
        unint64_t v26 = (((unint64_t)(unint64_t)(*(double *)&xmmword_1EBCE71A0 * 1000000.0) << 31) | 0x7A100)
            / 0xF4240;
        if (LODWORD(v44[0]) >= v26)
        {
          sub_1CD690DDC(v41, &v45, (uint64_t)&v56);
LABEL_54:
          *((_DWORD *)sub_1CD690D68(v42, (uint64_t *)&v45) + 2) = v24;
          unint64_t v36 = *(unsigned int *)(a4 + 24);
          if (v36 >= *(unsigned int *)(a4 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a4 + 16) + 8 * v36) = v8;
          ++*(_DWORD *)(a4 + 24);
          goto LABEL_25;
        }
        if (v43 >= v26)
        {
          sub_1CD690DDC(v40, &v45, (uint64_t)&v56);
          unsigned int v24 = v25;
          goto LABEL_54;
        }
      }
      unsigned int v27 = *(uint64_t ****)(a3 + 40);
      uint64_t v28 = *(void *)***v27;
      if (*(void *)(v28 + 128)
        || (*(unsigned int (**)(void))(**(void **)(v28 + 72) + 48))(*(void *)(v28 + 72)))
      {
        llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v56, (uint64_t)"chr", (uint64_t)"SelectNotBiased", 15, v8);
        v44[0] = "Select not biased";
        v44[1] = 17;
        sub_1CC59ADEC((uint64_t *)&v64, (uint64_t)v44);
        int v46 = v57;
        char v47 = v58;
        long long v48 = v59;
        uint64_t v49 = v60;
        long long v50 = v61;
        long long v51 = v62;
        uint64_t v52 = v63;
        unsigned int v45 = &unk_1F2616800;
        uint64_t v53 = v55;
        uint64_t v54 = 0x400000000;
        if (v65)
        {
          sub_1CD494D68((uint64_t)&v53, (uint64_t)&v64);
          uint64_t v29 = v65;
        }
        else
        {
          uint64_t v29 = 0;
        }
        v55[32] = v66[32];
        v55[33] = v66[33];
        unsigned int v45 = &unk_1F26165A8;
        int v56 = &unk_1F2616800;
        unint64_t v30 = (char *)v64;
        if (v29)
        {
          uint64_t v39 = a4;
          uint64_t v31 = v29 << 6;
          do
          {
            uint64_t v32 = (void **)&v30[v31];
            if (v30[v31 - 17] < 0) {
              operator delete(*(v32 - 5));
            }
            if (*((char *)v32 - 41) < 0) {
              operator delete(*(v32 - 8));
            }
            v31 -= 64;
          }
          while (v31);
          unint64_t v30 = (char *)v64;
          a4 = v39;
        }
        if (v30 != (char *)v66) {
          free(v30);
        }
        llvm::OptimizationRemarkEmitter::emit(v27, (llvm::DiagnosticInfoOptimizationBase *)&v45);
        unsigned int v45 = &unk_1F2616800;
        unint64_t v33 = (char *)v53;
        if (v54)
        {
          unint64_t v34 = (unint64_t)v54 << 6;
          do
          {
            unsigned int v35 = (void **)&v33[v34];
            if (v33[v34 - 17] < 0) {
              operator delete(*(v35 - 5));
            }
            if (*((char *)v35 - 41) < 0) {
              operator delete(*(v35 - 8));
            }
            v34 -= 64;
          }
          while (v34);
          unint64_t v33 = (char *)v53;
        }
        if (v33 != (char *)v55) {
          free(v33);
        }
      }
LABEL_25:
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t sub_1CCAE65D8(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  int v5 = *(void **)(*(void *)(result - 8 * v4) + 8);
  if (*v5 != 14) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = v5[3];
  uint64_t v7 = *(void *)((char *)v5 + 30);
  BOOL v9 = v6 != 0x775F68636E617262 || v7 != 0x737468676965775FLL;
  if (v4 != 3 || v9) {
    return result;
  }
  uint64_t v10 = *(void *)(*(void *)(v3 - 16) + 128);
  uint64_t v11 = *(void *)(*(void *)(v3 - 8) + 128);
  if (!v10 || v11 == 0) {
    return 0;
  }
  unsigned int v13 = (unint64_t *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    unsigned int v13 = (unint64_t *)*v13;
  }
  unint64_t v14 = *v13;
  uint64_t v15 = (unint64_t *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    uint64_t v15 = (unint64_t *)*v15;
  }
  unint64_t v16 = *v15;
  unint64_t v17 = v16 + v14;
  if (!(v16 + v14)) {
    return 0;
  }
  char v18 = 0;
  if (HIDWORD(v17))
  {
    unint64_t v23 = v16 + v14;
    do
    {
      unint64_t v19 = v23 >> 1;
      ++v18;
      unint64_t v24 = v23 >> 33;
      v23 >>= 1;
    }
    while (v24);
  }
  else
  {
    unint64_t v19 = v16 + v14;
  }
  unint64_t v20 = v14 >> v18;
  if (v19 != 0x80000000) {
    unint64_t v20 = (((unint64_t)v20 << 31) | (v19 >> 1)) / v19;
  }
  *a2 = v20;
  char v21 = 0;
  if (HIDWORD(v17))
  {
    unint64_t v25 = v17;
    do
    {
      unint64_t v17 = v25 >> 1;
      ++v21;
      unint64_t v26 = v25 >> 33;
      v25 >>= 1;
    }
    while (v26);
  }
  unint64_t v22 = v16 >> v21;
  if (v17 != 0x80000000) {
    unint64_t v22 = (((unint64_t)v22 << 31) | (v17 >> 1)) / v17;
  }
  *a3 = v22;
  return 1;
}

uint64_t sub_1CCAE6730(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  int v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v9 = v4 + 1;
    uint64_t v10 = &v5[96 * v4];
    if ((unint64_t)v5 <= a2 && (unint64_t)v10 > a2)
    {
      unint64_t v12 = a2 - (void)v5;
      sub_1CCAE67F4((char **)a1, v9);
      int v5 = *(char **)a1;
      a2 = *(void *)a1 + v12;
    }
    else
    {
      sub_1CCAE67F4((char **)a1, v9);
      int v5 = *(char **)a1;
    }
  }
  uint64_t v6 = &v5[96 * *(unsigned int *)(a1 + 8)];
  uint64_t v7 = *(void *)a2;
  v6[8] = *(unsigned char *)(a2 + 8);
  *(void *)uint64_t v6 = v7;
  *((void *)v6 + 3) = 0x800000000;
  *((void *)v6 + 2) = v6 + 32;
  uint64_t result = (uint64_t)(v6 + 16);
  if (*(_DWORD *)(a2 + 24)) {
    uint64_t result = llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(result, a2 + 16);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1CCAE67F4(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(96 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = &v8[96 * v9];
    uint64_t v11 = v6 + 16;
    uint64_t v12 = (uint64_t)(v8 + 16);
    do
    {
      uint64_t v14 = v12 - 16;
      uint64_t v13 = *(void *)(v12 - 16);
      *((unsigned char *)v11 - 8) = *(unsigned char *)(v12 - 8);
      *(v11 - 2) = v13;
      *uint64_t v11 = v11 + 2;
      v11[1] = 0x800000000;
      if (*(_DWORD *)(v12 + 8)) {
        sub_1CD41C56C((uint64_t)v11, v12);
      }
      v11 += 12;
      v12 += 96;
    }
    while ((char *)(v14 + 96) != v10);
    uint64_t v8 = *a1;
    uint64_t v15 = *((unsigned int *)a1 + 2);
    if (v15)
    {
      uint64_t v16 = 96 * v15;
      do
      {
        unint64_t v17 = *(char **)&v8[v16 - 80];
        if (&v8[v16 - 64] != v17) {
          free(v17);
        }
        v16 -= 96;
      }
      while (v16);
      uint64_t v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

uint64_t sub_1CCAE6968(unsigned __int8 *a1, const llvm::Instruction *a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  if (a1[16] <= 0x1Bu) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (llvm::Value *)a1;
  }
  unint64_t v26 = v7;
  if (!v7) {
    return (v7 == 0) | v6;
  }
  unint64_t v23 = v7;
  v27[0] = 0;
  if (sub_1CD3C8538((uint64_t *)a6, &v23, v27)
    && v27[0] != *(void *)a6 + 16 * *(unsigned int *)(a6 + 16))
  {
    BOOL v6 = *(unsigned char *)(v27[0] + 8) != 0;
    return (v7 == 0) | v6;
  }
  v27[0] = v26;
  unint64_t v23 = 0;
  if (sub_1CD50F704(a4, v27, &v23))
  {
LABEL_10:
    BOOL v6 = 0;
    *((unsigned char *)sub_1CD578354((uint64_t *)a6, &v26) + 8) = 0;
    return (v7 == 0) | v6;
  }
  if (llvm::DominatorTree::dominates((llvm::DominatorTree *)a3, v26, a2))
  {
    if (a5) {
      sub_1CD50F67C(a5, &v26, (uint64_t)v27);
    }
    BOOL v6 = 1;
    *((unsigned char *)sub_1CD578354((uint64_t *)a6, &v26) + 8) = 1;
  }
  else
  {
    if (!sub_1CCAE6BE0((uint64_t)v26, a3)) {
      goto LABEL_10;
    }
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    int v14 = *((_DWORD *)v26 + 5);
    if ((v14 & 0x40000000) != 0)
    {
      uint64_t v16 = (void *)*((void *)v26 - 1);
      uint64_t v15 = v14 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v15 = v14 & 0x7FFFFFF;
      uint64_t v16 = (void *)((char *)v26 - 32 * v15);
    }
    if (v15)
    {
      uint64_t v17 = 32 * v15;
      while ((sub_1CCAE6968(*v16, a2, a3, a4, &v23, a6) & 1) != 0)
      {
        v16 += 4;
        v17 -= 32;
        if (!v17) {
          goto LABEL_23;
        }
      }
      MEMORY[0x1D25D9CD0](v23, 8);
      goto LABEL_10;
    }
LABEL_23:
    if (a5)
    {
      char v18 = (llvm::Value *)((char *)v23 + 8 * v25);
      if (v24)
      {
        if (v25)
        {
          uint64_t v20 = 8 * v25;
          unint64_t v19 = v23;
          while ((*(void *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            unint64_t v19 = (llvm::Value *)((char *)v19 + 8);
            v20 -= 8;
            if (!v20) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          unint64_t v19 = v23;
        }
      }
      else
      {
LABEL_32:
        unint64_t v19 = (llvm::Value *)((char *)v23 + 8 * v25);
      }
      char v21 = (llvm::Value *)((char *)v23 + 8 * v25);
LABEL_34:
      while (v19 != v21)
      {
        sub_1CD50F67C(a5, v19, (uint64_t)v27);
        unint64_t v22 = (llvm::Value *)((char *)v19 + 8);
        unint64_t v19 = v18;
        if (v22 != v18)
        {
          unint64_t v19 = v22;
          while ((*(void *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            unint64_t v19 = (llvm::Value *)((char *)v19 + 8);
            if (v19 == v18)
            {
              unint64_t v19 = v18;
              goto LABEL_34;
            }
          }
        }
      }
    }
    BOOL v6 = 1;
    *((unsigned char *)sub_1CD578354((uint64_t *)a6, &v26) + 8) = 1;
    MEMORY[0x1D25D9CD0](v23, 8);
  }
  return (v7 == 0) | v6;
}

uint64_t sub_1CCAE6BE0(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 89) >= 5
    && v2 != 62
    && (v2 != 85 ? (BOOL v3 = (v2 - 41) >= 0x12) : (BOOL v3 = 0),
        v3 ? (BOOL v4 = (v2 - 66) >= 0xD) : (BOOL v4 = 0),
        v4 ? (BOOL v5 = (v2 - 81) > 1) : (BOOL v5 = 0),
        v5))
  {
    return 0;
  }
  else
  {
    return llvm::isSafeToSpeculativelyExecute(a1, 0, a2, 0);
  }
}

uint64_t sub_1CCAE6C30(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *(void *)result + 96 * v4;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 24);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)(v5 + 16);
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = *v8++;
          uint64_t v15 = v10;
          uint64_t result = sub_1CD642590(a2, &v15, (uint64_t)v16);
          v9 -= 8;
        }
        while (v9);
      }
      v5 += 96;
    }
    while (v5 != v6);
  }
  uint64_t v11 = *(unsigned int *)(v3 + 792);
  if (v11)
  {
    uint64_t v12 = *(uint64_t **)(v3 + 784);
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t result = sub_1CCAE6C30(v14, a2);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1CCAE6CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, const llvm::Instruction *a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v10 = 0;
  unsigned int v122 = 0;
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  v127[0] = 0;
  v127[1] = 0;
  int v128 = 0;
  uint64_t v143 = v145;
  uint64_t v144 = 0x800000000;
  uint64_t v140 = &v142;
  long long v141 = xmmword_1CD96EEC0;
  int v137 = (char *)&v139;
  uint64_t v138 = 0x800000000;
  uint64_t v134 = v136;
  uint64_t v135 = 0x800000000;
  uint64_t v11 = v133;
  int v131 = v133;
  char v12 = 1;
  uint64_t v132 = 0x800000000;
  if (&v131 == (char **)a3) {
    goto LABEL_183;
  }
  uint64_t v119 = a3;
  unint64_t v13 = *(unsigned int *)(a3 + 8);
  if (!v13) {
    goto LABEL_183;
  }
  uint64_t v17 = a4;
  if (v13 <= 8)
  {
    unint64_t v19 = *(char **)a3;
    uint64_t v20 = *(void *)a3 + 96 * v13;
    goto LABEL_9;
  }
  sub_1CCAE67F4(&v131, v13);
  unsigned int v18 = *(_DWORD *)(v119 + 8);
  uint64_t v11 = v131;
  if (v18)
  {
    unint64_t v19 = *(char **)v119;
    uint64_t v20 = *(void *)v119 + 96 * v18;
LABEL_9:
    char v21 = v11 + 16;
    uint64_t v22 = (uint64_t)(v19 + 16);
    do
    {
      uint64_t v24 = v22 - 16;
      uint64_t v23 = *(void *)(v22 - 16);
      *((unsigned char *)v21 - 8) = *(unsigned char *)(v22 - 8);
      *(v21 - 2) = v23;
      void *v21 = v21 + 2;
      v21[1] = 0x800000000;
      if (*(_DWORD *)(v22 + 8)) {
        char v21 = (void *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v21, v22);
      }
      v21 += 12;
      v22 += 96;
    }
    while (v24 + 96 != v20);
    uint64_t v11 = v131;
    LODWORD(v132) = v13;
    uint64_t v121 = &v131[96 * v13];
    uint64_t v17 = a4;
    goto LABEL_14;
  }
  LODWORD(v132) = v13;
  uint64_t v121 = &v131[96 * v13];
LABEL_14:
  unsigned int v122 = 0;
  char v120 = 1;
  std::string v112 = a6;
  unint64_t v113 = a5;
  do
  {
    unint64_t v25 = **(void **)v11 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)(v25 + 40);
    if (v26 == v25 + 40)
    {
      uint64_t v28 = 0;
    }
    else
    {
      if (v26) {
        unsigned int v27 = (unsigned __int8 *)(v26 - 24);
      }
      else {
        unsigned int v27 = 0;
      }
      if (v27[16] - 29 >= 0xB) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = (const llvm::Instruction *)v27;
      }
    }
    uint64_t v29 = *((unsigned int *)v11 + 6);
    if (v29)
    {
      unint64_t v30 = (const llvm::Instruction **)*((void *)v11 + 2);
      uint64_t v31 = 8 * v29;
      while (*((void *)*v30 + 5) != (**(void **)v11 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v30;
        v31 -= 8;
        if (!v31) {
          goto LABEL_29;
        }
      }
      uint64_t v28 = *v30;
    }
LABEL_29:
    unsigned int v126 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    if (!v11[8])
    {
      if (!v29) {
        goto LABEL_33;
      }
LABEL_31:
      uint64_t v32 = (uint64_t *)*((void *)v11 + 2);
      uint64_t v33 = 8 * v29;
      do
      {
        uint64_t v34 = *v32++;
        uint64_t v146 = *(void **)(v34 - 96);
        sub_1CD691094((uint64_t)&v124, &v146, (uint64_t)&__src);
        v33 -= 8;
      }
      while (v33);
      goto LABEL_33;
    }
    uint64_t v48 = *(void *)((**(void **)v11 & 0xFFFFFFFFFFFFFFF8) + 40);
    if (v48) {
      uint64_t v49 = v48 - 24;
    }
    else {
      uint64_t v49 = 0;
    }
    if (*(unsigned __int8 *)(v49 + 16) - 29 >= 0xB) {
      uint64_t v49 = 0;
    }
    uint64_t v146 = *(void **)(v49 - 96);
    sub_1CD691094((uint64_t)&v124, &v146, (uint64_t)&__src);
    uint64_t v29 = *((unsigned int *)v11 + 6);
    if (v29) {
      goto LABEL_31;
    }
LABEL_33:
    if (*(void *)v11 == *(void *)v131)
    {
      if (!v17)
      {
        sub_1CBFCB9AC((uint64_t)v127, (uint64_t)&v124);
LABEL_48:
        unsigned int v122 = v28;
        goto LABEL_145;
      }
      if (sub_1CCAE8090(a6, (uint64_t)a5, (uint64_t)&v124, *(unsigned __int8 **)(a2 + 16), a8))
      {
        sub_1CBFCB9AC((uint64_t)v127, (uint64_t)&v124);
        uint64_t v38 = *(uint64_t ****)(a2 + 40);
        uint64_t v39 = *(void *)***v38;
        if (!*(void *)(v39 + 128)
          && !(*(unsigned int (**)(void))(**(void **)(v39 + 72) + 48))(*(void *)(v39 + 72)))
        {
          goto LABEL_48;
        }
        unint64_t v40 = **(void **)v11 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v41 = *(void *)(v40 + 40);
        if (v41 == v40 + 40)
        {
          uint64_t v42 = 0;
        }
        else
        {
          if (v41) {
            uint64_t v68 = v41 - 24;
          }
          else {
            uint64_t v68 = 0;
          }
          if (*(unsigned __int8 *)(v68 + 16) - 29 >= 0xB) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v68;
          }
        }
        llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&__src, (uint64_t)"chr", (uint64_t)"SplitScopeFromOuter", 19, v42);
        uint64_t v129 = "Split scope from outer due to unhoistable branch/select ";
        uint64_t v130 = 56;
        sub_1CC59ADEC((uint64_t *)&v165, (uint64_t)&v129);
        uint64_t v129 = "and/or lack of common condition values";
        uint64_t v130 = 38;
        sub_1CC59ADEC((uint64_t *)&v165, (uint64_t)&v129);
        LODWORD(v147) = v159;
        BYTE4(v147) = BYTE4(v159);
        long long v148 = v160;
        uint64_t v149 = v161;
        long long v150 = v162;
        long long v151 = v163;
        uint64_t v152 = v164;
        uint64_t v146 = &unk_1F2616800;
        uint64_t v153 = v155;
        uint64_t v154 = 0x400000000;
        int64x2_t v117 = v28;
        if (v166)
        {
          sub_1CD494D68((uint64_t)&v153, (uint64_t)&v165);
          uint64_t v69 = v166;
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v156 = v168;
        uint64_t v157 = v169;
        uint64_t v146 = &unk_1F26165A8;
        __src = &unk_1F2616800;
        uint64_t v70 = (char *)v165;
        if (v69)
        {
          uint64_t v71 = v69 << 6;
          do
          {
            uint64_t v72 = (void **)&v70[v71];
            if (v70[v71 - 17] < 0) {
              operator delete(*(v72 - 5));
            }
            if (*((char *)v72 - 41) < 0) {
              operator delete(*(v72 - 8));
            }
            v71 -= 64;
          }
          while (v71);
          uint64_t v70 = (char *)v165;
          a5 = v113;
        }
        if (v70 != v167) {
          free(v70);
        }
        llvm::OptimizationRemarkEmitter::emit(v38, (llvm::DiagnosticInfoOptimizationBase *)&v146);
        uint64_t v146 = &unk_1F2616800;
        unint64_t v73 = (char *)v153;
        uint64_t v17 = a4;
        if (v154)
        {
          unint64_t v74 = (unint64_t)v154 << 6;
          do
          {
            int v75 = (void **)&v73[v74];
            if (v73[v74 - 17] < 0) {
              operator delete(*(v75 - 5));
            }
            if (*((char *)v75 - 41) < 0) {
              operator delete(*(v75 - 8));
            }
            v74 -= 64;
          }
          while (v74);
          unint64_t v73 = (char *)v153;
        }
        if (v73 != v155) {
          free(v73);
        }
        unsigned int v122 = v117;
      }
      else
      {
        if (v127 != a5) {
          sub_1CBFCB9AC((uint64_t)v127, (uint64_t)a5);
        }
        unsigned int v45 = &v124[v126];
        if (v125)
        {
          if (v126)
          {
            uint64_t v46 = 8 * v126;
            char v47 = v124;
            while ((*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              ++v47;
              v46 -= 8;
              if (!v46) {
                goto LABEL_64;
              }
            }
          }
          else
          {
            char v47 = v124;
          }
        }
        else
        {
LABEL_64:
          char v47 = &v124[v126];
        }
        uint64_t v54 = &v124[v126];
LABEL_79:
        while (v47 != v54)
        {
          sub_1CBF5FAF4((uint64_t)v127, v47, (uint64_t)&__src);
          uint64_t v55 = v47 + 1;
          char v47 = v45;
          if (v55 != v45)
          {
            char v47 = v55;
            while ((*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (++v47 == v45)
              {
                char v47 = v45;
                goto LABEL_79;
              }
            }
          }
        }
        char v120 = 0;
        unsigned int v122 = a6;
      }
    }
    else if (sub_1CCAE8090(v122, (uint64_t)v127, (uint64_t)&v124, *(unsigned __int8 **)(a2 + 16), a8))
    {
      uint64_t v123 = 0;
      uint64_t v50 = *(unsigned int *)(v119 + 8);
      if (v50)
      {
        unsigned int v116 = v28;
        long long v51 = *(char **)v119;
        uint64_t v52 = 96 * v50;
        uint64_t v53 = -*(void *)v119;
        do
        {
          if (*(void *)v11 == *(void *)v51)
          {
            uint64_t v147 = 0;
            uint64_t v146 = 0;
            LODWORD(v148) = 0;
            if (v52)
            {
              uint64_t v56 = 0;
              do
              {
                sub_1CD4C96F8((uint64_t)&__src, (uint64_t)&v146, (uint64_t *)&v51[v56]);
                v56 += 96;
              }
              while (96 * (v52 / 96) != v56);
            }
            int v57 = *(int8x16_t **)(v119 + 784);
            uint64_t v58 = *(unsigned int *)(v119 + 792);
            uint64_t v129 = (const char *)&v146;
            if (v58)
            {
              uint64_t v59 = 8 * v58;
              uint64_t v60 = (int8x16_t *)((char *)v57 + 8 * v58);
              while (!sub_1CD4C9788(*(void *)v129, *((_DWORD *)v129 + 4), *(void *)(**(void **)v57->i64[0] + 8), &__src))
              {
                int v57 = (int8x16_t *)((char *)v57 + 8);
                v59 -= 8;
                if (v57 == v60) {
                  goto LABEL_138;
                }
              }
              do
              {
                v59 -= 8;
                if (!v59) {
                  goto LABEL_138;
                }
                long long v61 = &v60[-1].i64[1];
                char v62 = sub_1CD4C9788(*(void *)v129, *((_DWORD *)v129 + 4), *(void *)(**(void **)v60[-1].i64[1] + 8), &__src);
                uint64_t v60 = (int8x16_t *)((char *)v60 - 8);
              }
              while ((v62 & 1) != 0);
              uint64_t v63 = (v59 >> 3) + 1;
              if (v59 < 17)
              {
                uint64_t v67 = 0;
                unint64_t v64 = 0;
              }
              else
              {
                uint64_t v114 = (v59 >> 3) + 1;
                if (v63 >= 0xFFFFFFFFFFFFFFFLL) {
                  unint64_t v64 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = (v59 >> 3) + 1;
                }
                while (1)
                {
                  unsigned int v65 = (uint64_t *)operator new(8 * v64, MEMORY[0x1E4FBA2D0]);
                  if (v65) {
                    break;
                  }
                  BOOL v66 = v64 > 1;
                  v64 >>= 1;
                  if (!v66)
                  {
                    uint64_t v67 = 0;
                    unint64_t v64 = 0;
                    goto LABEL_135;
                  }
                }
                uint64_t v67 = v65;
LABEL_135:
                uint64_t v63 = v114;
              }
              sub_1CCAE8844(v57, v61, (uint64_t **)&v129, v63, v67, v64);
              if (v67) {
                operator delete(v67);
              }
            }
LABEL_138:
            operator new();
          }
          v51 += 96;
          v53 -= 96;
          v52 -= 96;
        }
        while (v52);
        a6 = v112;
        a5 = v113;
        uint64_t v28 = v116;
      }
      uint64_t v123 = 0;
      sub_1CCAE5E80((uint64_t)&__src, a2 + 216, &v123);
      if (v144 >= (unint64_t)HIDWORD(v144)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v143 + v144) = v119;
      LODWORD(v144) = v144 + 1;
      if ((unint64_t)(v141 + 1) > *((void *)&v141 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v140 + v141) = v120 & 1;
      *(void *)&long long v141 = v141 + 1;
      unint64_t v76 = sub_1CD691540((uint64_t)&v137, (unint64_t)v127);
      unsigned int v77 = &v137[24 * v138];
      *(void *)unsigned int v77 = 0;
      *((void *)v77 + 1) = 0;
      *((_DWORD *)v77 + 4) = 0;
      sub_1CBFCB9AC((uint64_t)v77, v76);
      LODWORD(v138) = v138 + 1;
      if (v135 >= (unint64_t)HIDWORD(v135)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v134 + v135) = v122;
      LODWORD(v135) = v135 + 1;
      sub_1CBFCB9AC((uint64_t)v127, (uint64_t)&v124);
      uint64_t v78 = *(uint64_t ****)(a2 + 40);
      uint64_t v79 = *(void *)***v78;
      if (*(void *)(v79 + 128)
        || (*(unsigned int (**)(void))(**(void **)(v79 + 72) + 48))(*(void *)(v79 + 72)))
      {
        unint64_t v80 = **(void **)v11 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v81 = *(void *)(v80 + 40);
        if (v81 == v80 + 40)
        {
          uint64_t v82 = 0;
        }
        else
        {
          if (v81) {
            uint64_t v83 = v81 - 24;
          }
          else {
            uint64_t v83 = 0;
          }
          if (*(unsigned __int8 *)(v83 + 16) - 29 >= 0xB) {
            uint64_t v82 = 0;
          }
          else {
            uint64_t v82 = v83;
          }
        }
        llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&__src, (uint64_t)"chr", (uint64_t)"SplitScopeFromPrev", 18, v82);
        uint64_t v129 = "Split scope from previous due to unhoistable branch/select ";
        uint64_t v130 = 59;
        sub_1CC59ADEC((uint64_t *)&v165, (uint64_t)&v129);
        uint64_t v129 = "and/or lack of common condition values";
        uint64_t v130 = 38;
        sub_1CC59ADEC((uint64_t *)&v165, (uint64_t)&v129);
        LODWORD(v147) = v159;
        BYTE4(v147) = BYTE4(v159);
        long long v148 = v160;
        uint64_t v149 = v161;
        long long v150 = v162;
        long long v151 = v163;
        uint64_t v152 = v164;
        uint64_t v146 = &unk_1F2616800;
        uint64_t v153 = v155;
        uint64_t v154 = 0x400000000;
        if (v166)
        {
          sub_1CD494D68((uint64_t)&v153, (uint64_t)&v165);
          uint64_t v84 = v166;
        }
        else
        {
          uint64_t v84 = 0;
        }
        uint64_t v156 = v168;
        uint64_t v157 = v169;
        uint64_t v146 = &unk_1F26165A8;
        __src = &unk_1F2616800;
        unsigned int v85 = (char *)v165;
        if (v84)
        {
          int64x2_t v118 = v28;
          uint64_t v86 = v84 << 6;
          do
          {
            uint64_t v87 = (void **)&v85[v86];
            if (v85[v86 - 17] < 0) {
              operator delete(*(v87 - 5));
            }
            if (*((char *)v87 - 41) < 0) {
              operator delete(*(v87 - 8));
            }
            v86 -= 64;
          }
          while (v86);
          unsigned int v85 = (char *)v165;
          uint64_t v28 = v118;
        }
        if (v85 != v167) {
          free(v85);
        }
        llvm::OptimizationRemarkEmitter::emit(v78, (llvm::DiagnosticInfoOptimizationBase *)&v146);
        uint64_t v146 = &unk_1F2616800;
        uint64_t v88 = (char *)v153;
        a5 = v113;
        if (v154)
        {
          int v89 = v28;
          unint64_t v90 = (unint64_t)v154 << 6;
          do
          {
            uint64_t v91 = (void **)&v88[v90];
            if (v88[v90 - 17] < 0) {
              operator delete(*(v91 - 5));
            }
            if (*((char *)v91 - 41) < 0) {
              operator delete(*(v91 - 8));
            }
            v90 -= 64;
          }
          while (v90);
          uint64_t v88 = (char *)v153;
          uint64_t v28 = v89;
        }
        if (v88 != v155) {
          free(v88);
        }
      }
      uint64_t v119 = 0;
      char v120 = 1;
      unsigned int v122 = v28;
      uint64_t v17 = a4;
    }
    else
    {
      unsigned int v35 = &v124[v126];
      if (v125)
      {
        if (v126)
        {
          uint64_t v36 = 8 * v126;
          unint64_t v37 = v124;
          while ((*v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            ++v37;
            v36 -= 8;
            if (!v36) {
              goto LABEL_40;
            }
          }
        }
        else
        {
          unint64_t v37 = v124;
        }
      }
      else
      {
LABEL_40:
        unint64_t v37 = &v124[v126];
      }
      unsigned int v43 = &v124[v126];
LABEL_51:
      while (v37 != v43)
      {
        sub_1CBF5FAF4((uint64_t)v127, v37, (uint64_t)&__src);
        char v44 = v37 + 1;
        unint64_t v37 = v35;
        if (v44 != v35)
        {
          unint64_t v37 = v44;
          while ((*v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if (++v37 == v35)
            {
              unint64_t v37 = v35;
              goto LABEL_51;
            }
          }
        }
      }
    }
LABEL_145:
    MEMORY[0x1D25D9CD0](v124, 8);
    v11 += 96;
  }
  while (v11 != v121);
  unsigned int v10 = v144;
  if (v144 >= HIDWORD(v144)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  a3 = v119;
  char v12 = v120;
LABEL_183:
  *((void *)v143 + v10) = a3;
  LODWORD(v144) = v144 + 1;
  if ((unint64_t)(v141 + 1) > *((void *)&v141 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v140 + v141) = v12 & 1;
  *(void *)&long long v141 = v141 + 1;
  unint64_t v92 = sub_1CD691540((uint64_t)&v137, (unint64_t)v127);
  int64x2_t v93 = &v137[24 * v138];
  *(void *)int64x2_t v93 = 0;
  *((void *)v93 + 1) = 0;
  *((_DWORD *)v93 + 4) = 0;
  sub_1CBFCB9AC((uint64_t)v93, v92);
  LODWORD(v138) = v138 + 1;
  if (v135 >= HIDWORD(v135)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v134 + v135) = v122;
  LODWORD(v135) = v135 + 1;
  if (v144)
  {
    unint64_t v94 = 0;
    do
    {
      uint64_t v95 = *((void *)v143 + v94);
      uint64_t v96 = *((void *)v134 + v94);
      int v97 = v137;
      __src = &v160;
      uint64_t v159 = 0x800000000;
      uint64_t v124 = 0;
      uint64_t v125 = 0;
      unsigned int v126 = 0;
      sub_1CCAE6C30(v95, (uint64_t)&v124);
      uint64_t v98 = *(unsigned int *)(v95 + 792);
      if (v98)
      {
        unsigned int v99 = &v97[24 * v94];
        uint64_t v100 = *(void **)(v95 + 784);
        uint64_t v101 = 8 * v98;
        do
        {
          sub_1CCAE6CE4(&v146, a2, *v100, v95, v99, v96, a7, &v124);
          sub_1CD47792C((unsigned int *)&__src, v146, (unsigned char *)v146 + 8 * v147);
          if (v146 != &v148) {
            free(v146);
          }
          ++v100;
          v101 -= 8;
        }
        while (v101);
      }
      uint64_t v102 = (void **)(v95 + 784);
      if ((void **)(v95 + 784) != &__src)
      {
        int v103 = v159;
        uint64_t v104 = *(unsigned int *)(v95 + 792);
        if (v104 >= v159)
        {
          if (v159) {
            memmove(*v102, __src, 8 * v159);
          }
        }
        else
        {
          if (*(_DWORD *)(v95 + 796) < v159)
          {
            *(_DWORD *)(v95 + 792) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v104) {
            memmove(*v102, __src, 8 * v104);
          }
          else {
            uint64_t v104 = 0;
          }
          if (v104 != v159) {
            memcpy((char *)*v102 + 8 * v104, (char *)__src + 8 * v104, 8 * v159 - 8 * v104);
          }
        }
        *(_DWORD *)(v95 + 792) = v103;
      }
      MEMORY[0x1D25D9CD0](v124, 8);
      if (__src != &v160) {
        free(__src);
      }
      ++v94;
      int v105 = v144;
    }
    while (v94 < v144);
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x800000000;
    if (v105)
    {
      unint64_t v107 = 0;
      do
      {
        uint64_t v108 = *((void *)v143 + v107);
        if (*((unsigned char *)v140 + v107))
        {
          unint64_t v109 = *(unsigned int *)(a7 + 8);
          if (v109 >= *(unsigned int *)(a7 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a7 + 8 * v109) = v108;
          ++*(_DWORD *)(a7 + 8);
          *(void *)(v108 + 864) = *((void *)v134 + v107);
        }
        else
        {
          unint64_t v110 = *(unsigned int *)(a1 + 8);
          if (v110 >= *(unsigned int *)(a1 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a1 + 8 * v110) = v108;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v107;
      }
      while (v107 < v144);
    }
  }
  else
  {
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x800000000;
  }
  sub_1CCAE8594(&v131);
  if (v134 != v136) {
    free(v134);
  }
  sub_1CD501BD8(&v137);
  if (v140 != &v142) {
    free(v140);
  }
  if (v143 != v145) {
    free(v143);
  }
  return MEMORY[0x1D25D9CD0](v127[0], 8);
}

BOOL sub_1CCAE8090(const llvm::Instruction *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  int v10 = *(_DWORD *)(a3 + 8);
  uint64_t v11 = *(unsigned int *)(a3 + 16);
  uint64_t v12 = *(void *)a3 + 8 * v11;
  if (v10)
  {
    if (v11)
    {
      uint64_t v13 = 8 * v11;
      uint64_t v14 = *(void **)a3;
      while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v14;
        v13 -= 8;
        if (!v13) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v14 = *(void **)a3;
    }
  }
  else
  {
LABEL_6:
    uint64_t v14 = (void *)(*(void *)a3 + 8 * v11);
  }
  uint64_t v15 = *(void *)a3 + 8 * v11;
  if (v14 != (void *)v15)
  {
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)*v14;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      LODWORD(v69) = 0;
      int v17 = sub_1CCAE6968(v16, a1, a4, a5, 0, (uint64_t)&v67);
      MEMORY[0x1D25D9CD0](v67, 8);
      if (!v17) {
        return 1;
      }
      unsigned int v18 = v14 + 1;
      uint64_t v14 = (void *)v12;
      if (v18 != (void *)v12)
      {
        uint64_t v14 = v18;
        while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v14 == (void *)v12)
          {
            uint64_t v14 = (void *)v12;
            break;
          }
        }
      }
      if (v14 == (void *)v15)
      {
        int v10 = *(_DWORD *)(a3 + 8);
        break;
      }
    }
  }
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v19 = v10 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    return 0;
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  v66[1] = 0;
  uint64_t v67 = &v68;
  unsigned int v65 = v66;
  v66[0] = 0;
  v63[0] = 0;
  v63[1] = 0;
  int v64 = 0;
  uint64_t v21 = *(unsigned int *)(a2 + 16);
  if (v21)
  {
    uint64_t v30 = 8 * v21;
    uint64_t v22 = *(void **)a2;
    while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v22;
      v30 -= 8;
      if (!v30) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    uint64_t v22 = *(void **)a2;
  }
  uint64_t v23 = *(void *)a2 + 8 * v21;
  if (v22 != (void *)v23)
  {
    uint64_t v24 = (uint64_t *)*v22;
LABEL_27:
    unint64_t v25 = sub_1CCAE860C(v24, a4, (uint64_t)v63);
    uint64_t v26 = v25 + 1;
    unsigned int v27 = (void *)*v25;
    if ((uint64_t *)*v25 != v25 + 1)
    {
      do
      {
        sub_1CD691490(&v67, &v68, v27 + 4, v27 + 4);
        uint64_t v28 = (uint64_t *)v27[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (uint64_t *)v27[2];
            BOOL v19 = *v29 == (void)v27;
            unsigned int v27 = v29;
          }
          while (!v19);
        }
        unsigned int v27 = v29;
      }
      while (v29 != v26);
    }
    while (++v22 != (void *)v23)
    {
      uint64_t v24 = (uint64_t *)*v22;
      if ((*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v22 != (void *)v23) {
          goto LABEL_27;
        }
        break;
      }
    }
    int v10 = *(_DWORD *)(a3 + 8);
  }
LABEL_41:
  uint64_t v31 = *(unsigned int *)(a3 + 16);
  uint64_t v32 = *(void *)a3 + 8 * v31;
  if (v10)
  {
    if (v31)
    {
      uint64_t v34 = 8 * v31;
      uint64_t v33 = *(uint64_t ***)a3;
      while (((unint64_t)*v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v33;
        v34 -= 8;
        if (!v34) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      uint64_t v33 = *(uint64_t ***)a3;
    }
  }
  else
  {
LABEL_47:
    uint64_t v33 = (uint64_t **)(*(void *)a3 + 8 * v31);
  }
  uint64_t v35 = *(void *)a3 + 8 * v31;
LABEL_49:
  while (v33 != (uint64_t **)v35)
  {
    uint64_t v36 = sub_1CCAE860C(*v33, a4, (uint64_t)v63);
    unint64_t v37 = v36 + 1;
    uint64_t v38 = (void *)*v36;
    if ((uint64_t *)*v36 != v36 + 1)
    {
      do
      {
        sub_1CD691490(&v65, v66, v38 + 4, v38 + 4);
        uint64_t v39 = (uint64_t *)v38[1];
        if (v39)
        {
          do
          {
            unint64_t v40 = v39;
            uint64_t v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            unint64_t v40 = (uint64_t *)v38[2];
            BOOL v19 = *v40 == (void)v38;
            uint64_t v38 = v40;
          }
          while (!v19);
        }
        uint64_t v38 = v40;
      }
      while (v40 != v37);
    }
    uint64_t v41 = v33 + 1;
    uint64_t v33 = (uint64_t **)v32;
    if (v41 != (void *)v32)
    {
      while ((*v41 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v41 == (void *)v32)
        {
          uint64_t v33 = (uint64_t **)v32;
          goto LABEL_49;
        }
      }
      uint64_t v33 = (uint64_t **)v41;
    }
  }
  uint64_t v42 = v67;
  unsigned int v43 = v65;
  if (v67 != &v68 && v65 != v66)
  {
    unsigned int v45 = 0;
    uint64_t v46 = 0;
    char v47 = 0;
    do
    {
      unint64_t v48 = v42[4];
      unint64_t v49 = v43[4];
      if (v48 >= v49)
      {
        if (v49 >= v48)
        {
          if (v46 >= v47)
          {
            uint64_t v53 = (v46 - v45) >> 3;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 61) {
              abort();
            }
            if ((v47 - v45) >> 2 > v54) {
              unint64_t v54 = (v47 - v45) >> 2;
            }
            if ((unint64_t)(v47 - v45) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55)
            {
              if (v55 >> 61) {
                sub_1CB833614();
              }
              uint64_t v56 = (char *)operator new(8 * v55);
              unint64_t v48 = v42[4];
            }
            else
            {
              uint64_t v56 = 0;
            }
            int v57 = &v56[8 * v53];
            *(void *)int v57 = v48;
            uint64_t v52 = v57 + 8;
            while (v46 != v45)
            {
              uint64_t v58 = *((void *)v46 - 1);
              v46 -= 8;
              *((void *)v57 - 1) = v58;
              v57 -= 8;
            }
            char v47 = &v56[8 * v55];
            if (v45) {
              operator delete(v45);
            }
            unsigned int v45 = v57;
          }
          else
          {
            *(void *)uint64_t v46 = v48;
            uint64_t v52 = v46 + 8;
          }
          uint64_t v59 = (void *)v42[1];
          if (v59)
          {
            do
            {
              uint64_t v42 = v59;
              uint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              uint64_t v60 = v42;
              uint64_t v42 = (void *)v42[2];
            }
            while ((void *)*v42 != v60);
          }
          uint64_t v46 = v52;
        }
        long long v61 = (void *)v43[1];
        if (v61)
        {
          do
          {
            unsigned int v43 = v61;
            long long v61 = (void *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            char v62 = v43;
            unsigned int v43 = (void *)v43[2];
          }
          while ((void *)*v43 != v62);
        }
      }
      else
      {
        uint64_t v50 = (void *)v42[1];
        if (v50)
        {
          do
          {
            uint64_t v42 = v50;
            uint64_t v50 = (void *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            long long v51 = v42;
            uint64_t v42 = (void *)v42[2];
          }
          while ((void *)*v42 != v51);
        }
      }
    }
    while (v43 != v66 && v42 != &v68);
    if (v45) {
      operator delete(v45);
    }
    sub_1CD555E34(v63);
    sub_1CB833A08((uint64_t)&v65, v66[0]);
    sub_1CB833A08((uint64_t)&v67, v68);
    return v45 == v46;
  }
  sub_1CD555E34(v63);
  sub_1CB833A08((uint64_t)&v65, v66[0]);
  sub_1CB833A08((uint64_t)&v67, v68);
  return 1;
}

char **sub_1CCAE8594(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 96 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5) {
        free(v5);
      }
      v4 -= 96;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t *sub_1CCAE860C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unsigned int v27 = a1;
  uint64_t v24 = a1;
  BOOL v19 = 0;
  if (!sub_1CD4678E0((uint64_t *)a3, &v24, &v19)
    || v19 == (uint64_t *)(*(void *)a3 + 32 * *(unsigned int *)(a3 + 16)))
  {
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = (uint64_t *)&v25;
    unsigned int v8 = *((unsigned __int8 *)v5 + 16);
    if (v5 && v8 >= 0x1C)
    {
      if (sub_1CCAE6BE0((uint64_t)v5, a2))
      {
        int v9 = *((_DWORD *)v5 + 5);
        if ((v9 & 0x40000000) != 0)
        {
          uint64_t v11 = (uint64_t *)*(v5 - 1);
          uint64_t v10 = v9 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v10 = v9 & 0x7FFFFFF;
          uint64_t v11 = &v5[-4 * v10];
        }
        if (v10)
        {
          uint64_t v12 = &v11[4 * v10];
          do
          {
            uint64_t v13 = (void *)sub_1CCAE860C(*v11, a2, a3);
            uint64_t v14 = v13 + 1;
            uint64_t v15 = (void *)*v13;
            if ((void *)*v13 != v13 + 1)
            {
              do
              {
                sub_1CD691490(&v24, &v25, v15 + 4, v15 + 4);
                uint64_t v16 = (void *)v15[1];
                if (v16)
                {
                  do
                  {
                    int v17 = v16;
                    uint64_t v16 = (void *)*v16;
                  }
                  while (v16);
                }
                else
                {
                  do
                  {
                    int v17 = (void *)v15[2];
                    BOOL v18 = *v17 == (void)v15;
                    uint64_t v15 = v17;
                  }
                  while (!v18);
                }
                uint64_t v15 = v17;
              }
              while (v17 != v14);
            }
            v11 += 4;
          }
          while (v11 != v12);
          uint64_t v5 = v27;
        }
      }
      else
      {
        sub_1CD4C9324((uint64_t *)&v24, (unint64_t)v5, (uint64_t)v5);
      }
      BOOL v19 = v5;
      uint64_t v20 = v24;
      uint64_t v21 = v25;
      uint64_t v22 = v26;
      if (!v26)
      {
        uint64_t v20 = (uint64_t *)&v21;
        goto LABEL_32;
      }
      v25[2] = &v21;
LABEL_31:
      uint64_t v24 = (uint64_t *)&v25;
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      goto LABEL_32;
    }
    if (v8 == 21)
    {
      sub_1CD3CFB98(&v24, (unint64_t *)&v27, &v27);
      BOOL v19 = v27;
      uint64_t v20 = v24;
      uint64_t v21 = v25;
      uint64_t v22 = v26;
      if (v26)
      {
        v25[2] = &v21;
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      BOOL v19 = v5;
    }
    uint64_t v20 = (uint64_t *)&v21;
LABEL_32:
    sub_1CD69111C((uint64_t)v23, a3, &v19, &v20);
    uint64_t v6 = v23[0] + 8;
    sub_1CB833A08((uint64_t)&v20, v21);
    sub_1CB833A08((uint64_t)&v24, v25);
    return (uint64_t *)v6;
  }
  return v19 + 1;
}

char *sub_1CCAE8844(int8x16_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  if (a4 == 2)
  {
    uint64_t v16 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_12:
    *uint64_t v6 = v16;
    return (char *)v6;
  }
  if (a4 == 3)
  {
    if (sub_1CD4C9788(**a3, *((_DWORD *)*a3 + 4), *(void *)(**(void **)a1->i64[1] + 8), &v34))
    {
      uint64_t v19 = v7->i64[1];
      v7->i64[1] = *v6;
      *uint64_t v6 = v19;
      *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
      return &v7->i8[8];
    }
    uint64_t v16 = v7->i64[0];
    v7->i64[0] = v7->i64[1];
    v7->i64[1] = v16;
    v7->i64[1] = *v6;
    goto LABEL_12;
  }
  if (a6 >= a4)
  {
    uint64_t v12 = &a1->i64[1];
    *a5 = a1->i64[0];
    uint64_t v13 = a5 + 1;
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        char v14 = sub_1CD4C9788(**a3, *((_DWORD *)*a3 + 4), *(void *)(**(void **)*v12 + 8), &v34);
        uint64_t v15 = *v12;
        if (v14)
        {
          *v13++ = v15;
        }
        else
        {
          v7->i64[0] = v15;
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        ++v12;
      }
      while (v12 != v6);
      v7->i64[0] = *v6;
      uint64_t v6 = &v7->i64[1];
      if (v13 <= a5) {
        return (char *)v6;
      }
    }
    uint64_t v17 = 0;
    do
    {
      v6[v17] = a5[v17];
      ++v17;
    }
    while (&a5[v17] < v13);
    return (char *)v6;
  }
  if (a4 >= 0) {
    uint64_t v20 = a4;
  }
  else {
    uint64_t v20 = a4 + 1;
  }
  uint64_t v21 = v20 >> 1;
  uint64_t v22 = &a1->i8[8 * (v20 >> 1)];
  uint64_t v23 = v22 - 8;
  if (sub_1CD4C9788(**a3, *((_DWORD *)*a3 + 4), *(void *)(***((void ***)v22 - 1) + 8), &v34))
  {
    uint64_t v24 = 8 - 8 * v21;
    uint64_t v25 = v21;
    while (v24)
    {
      uint64_t v26 = v25 - 1;
      char v27 = sub_1CD4C9788(**a3, *((_DWORD *)*a3 + 4), *(void *)(**(void **)v7[-1].i64[v25] + 8), &v34);
      v24 += 8;
      uint64_t v25 = v26;
      if ((v27 & 1) == 0)
      {
        uint64_t v23 = &v7->i8[-v24];
        goto LABEL_29;
      }
    }
    uint64_t v28 = (char *)v7;
  }
  else
  {
    uint64_t v26 = v21;
LABEL_29:
    uint64_t v28 = (char *)sub_1CCAE8844(v7, v23, a3, v26, a5, a6);
  }
  uint64_t v29 = a4 - v21;
  if (sub_1CD4C9788(**a3, *((_DWORD *)*a3 + 4), *(void *)(**(void **)v7->i64[v21] + 8), &v34))
  {
    uint64_t v30 = v22;
LABEL_33:
    uint64_t v31 = (char *)sub_1CCAE8844(v30, v6, a3, v29, a5, a6);
  }
  else
  {
    uint64_t v31 = (char *)(v6 + 1);
    uint64_t v32 = &v7->i64[v21 + 1];
    while (v32 != v6)
    {
      --v29;
      uint64_t v33 = *v32++;
      if (sub_1CD4C9788(**a3, *((_DWORD *)*a3 + 4), *(void *)(**(void **)v33 + 8), &v34))
      {
        uint64_t v30 = (char *)(v32 - 1);
        goto LABEL_33;
      }
    }
  }
  return sub_1CCAE8B30(v28, v22, v31);
}

char *sub_1CCAE8B30(char *__src, char *a2, char *a3)
{
  uint64_t v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v11 = *(void *)__src;
      int64_t v12 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v3 = &__src[v12];
      *(void *)uint64_t v3 = v11;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v13 = a3 - 8;
      uint64_t v14 = *((void *)a3 - 1);
      uint64_t v3 = __src + 8;
      size_t v15 = a3 - 8 - __src;
      if (v13 != __src) {
        memmove(__src + 8, __src, v15);
      }
      *(void *)__src = v14;
    }
    else
    {
      uint64_t v5 = (a2 - __src) >> 3;
      if (v5 == (a3 - a2) >> 3)
      {
        uint64_t v6 = 0;
        do
        {
          uint64_t v7 = *(void *)&__src[v6];
          *(void *)&__src[v6] = *(void *)&a2[v6];
          unsigned int v8 = &__src[v6 + 8];
          *(void *)&a2[v6] = v7;
          uint64_t v9 = (uint64_t)&a2[v6 + 8];
          v6 += 8;
        }
        while (v8 != a2 && v9 != (void)a3);
        return a2;
      }
      else
      {
        uint64_t v16 = (a3 - a2) >> 3;
        uint64_t v17 = (a2 - __src) >> 3;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = v16;
          uint64_t v16 = v18 % v16;
        }
        while (v16);
        if (v17)
        {
          uint64_t v19 = &__src[8 * v17];
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            uint64_t v20 = v21;
            uint64_t v22 = &v19[8 * v5];
            uint64_t v23 = v19;
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = v22;
              *(void *)uint64_t v24 = *(void *)v22;
              BOOL v25 = __OFSUB__(v5, (a3 - v22) >> 3);
              uint64_t v27 = v5 - ((a3 - v22) >> 3);
              char v26 = (v27 < 0) ^ v25;
              uint64_t v22 = &__src[8 * v27];
              if (v26) {
                uint64_t v22 = &v23[8 * v5];
              }
            }
            while (v22 != v19);
            *(void *)uint64_t v23 = v20;
          }
          while (v19 != __src);
        }
        return &__src[8 * ((a3 - a2) >> 3)];
      }
    }
  }
  return v3;
}

uint64_t sub_1CCAE8C94(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *a2 + 96 * v6;
    uint64_t v25 = a3 + 872;
    do
    {
      if (*(unsigned char *)(v7 + 8))
      {
        uint64_t v16 = *(void *)v7;
        uint64_t v26 = v16;
        v27[0] = 0;
        if (sub_1CD4C9788(*(void *)(v5 + 72), *(_DWORD *)(v5 + 88), v16, v27))
        {
          uint64_t v17 = v27[0];
          uint64_t v18 = *(void *)(v5 + 72);
          uint64_t v19 = *(unsigned int *)(v5 + 88);
        }
        else
        {
          uint64_t v18 = *(void *)(v5 + 72);
          uint64_t v19 = *(unsigned int *)(v5 + 88);
          uint64_t v17 = v18 + 8 * v19;
        }
        if (v17 == v18 + 8 * v19)
        {
          v27[0] = 0;
          sub_1CD4C9788(*(void *)(v5 + 96), *(_DWORD *)(v5 + 112), v16, v27);
          uint64_t v20 = a3 + 896;
        }
        else
        {
          uint64_t v20 = v25;
        }
        uint64_t result = sub_1CD4C96F8((uint64_t)v27, v20, &v26);
      }
      uint64_t v9 = *(unsigned int *)(v7 + 24);
      if (v9)
      {
        uint64_t v10 = *(uint64_t **)(v7 + 16);
        uint64_t v11 = 8 * v9;
        do
        {
          uint64_t v26 = 0;
          uint64_t v26 = *v10;
          v27[0] = 0;
          if (sub_1CD4C9788(*(void *)(v5 + 120), *(_DWORD *)(v5 + 136), v26, v27))
          {
            uint64_t v12 = v27[0];
            uint64_t v13 = *(void *)(v5 + 120);
            uint64_t v14 = *(unsigned int *)(v5 + 136);
          }
          else
          {
            uint64_t v13 = *(void *)(v5 + 120);
            uint64_t v14 = *(unsigned int *)(v5 + 136);
            uint64_t v12 = v13 + 8 * v14;
          }
          if (v12 == v13 + 8 * v14)
          {
            v27[0] = 0;
            sub_1CD4C9788(*(void *)(v5 + 144), *(_DWORD *)(v5 + 160), v26, v27);
            uint64_t v15 = a3 + 1728;
          }
          else
          {
            uint64_t v15 = a3 + 1704;
          }
          uint64_t result = sub_1CD690DDC(v15, &v26, (uint64_t)v27);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v7 += 96;
    }
    while (v7 != v8);
  }
  uint64_t v21 = *((unsigned int *)a2 + 198);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)a2[98];
    uint64_t v23 = 8 * v21;
    do
    {
      uint64_t v24 = *v22++;
      uint64_t result = sub_1CCAE8C94(v5, v24, a3);
      v23 -= 8;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1CCAE8E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v34[0] = 0;
  v34[1] = 0;
  int v35 = 0;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)a2 + 96 * v6;
    do
    {
      uint64_t v9 = *(unsigned int *)(v7 + 24);
      if (v9)
      {
        uint64_t v10 = *(uint64_t **)(v7 + 16);
        uint64_t v11 = 8 * v9;
        do
        {
          uint64_t v12 = *v10++;
          uint64_t v30 = v12;
          sub_1CD642590((uint64_t)v34, &v30, (uint64_t)v36);
          v11 -= 8;
        }
        while (v11);
      }
      v7 += 96;
    }
    while (v7 != v8);
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    if (v13)
    {
      unint64_t v14 = *(void *)a2;
      uint64_t v15 = *(const llvm::Instruction **)(a3 + 864);
      uint64_t v16 = *(void *)a2 + 96 * v13;
      while (1)
      {
        uint64_t v17 = *(void **)v14;
        uint64_t v33 = *(void **)v14;
        int v37 = 0;
        v36[0] = 0;
        v36[1] = 0;
        if (*(unsigned char *)(v14 + 8)) {
          break;
        }
        uint64_t v18 = *(unsigned int *)(v14 + 24);
        if (v18) {
          goto LABEL_19;
        }
LABEL_11:
        MEMORY[0x1D25D9CD0](v36[0], 8);
        v14 += 96;
        if (v14 == v16) {
          goto LABEL_23;
        }
      }
      uint64_t v19 = *(void *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 40);
      if (v19) {
        uint64_t v20 = v19 - 24;
      }
      else {
        uint64_t v20 = 0;
      }
      if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB) {
        uint64_t v20 = 0;
      }
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      int v32 = 0;
      sub_1CCAE6968(*(unsigned __int8 **)(v20 - 96), v15, *(unsigned __int8 **)(a1 + 16), v34, (uint64_t)v36, (uint64_t)&v30);
      MEMORY[0x1D25D9CD0](v30, 8);
      uint64_t v18 = *(unsigned int *)(v14 + 24);
      if (v18)
      {
LABEL_19:
        uint64_t v21 = *(uint64_t **)(v14 + 16);
        uint64_t v22 = &v21[v18];
        do
        {
          uint64_t v23 = *v21++;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          int v32 = 0;
          sub_1CCAE6968(*(unsigned __int8 **)(v23 - 96), v15, *(unsigned __int8 **)(a1 + 16), v34, (uint64_t)v36, (uint64_t)&v30);
          MEMORY[0x1D25D9CD0](v30, 8);
        }
        while (v21 != v22);
      }
      sub_1CCAE6730(a3 + 920, v14);
      uint64_t v24 = sub_1CD69161C(a3 + 1752, (uint64_t *)&v33) + 1;
      if (v36 != v24) {
        sub_1CBFCB9AC((uint64_t)v24, (uint64_t)v36);
      }
      goto LABEL_11;
    }
  }
LABEL_23:
  uint64_t v25 = *(unsigned int *)(a2 + 792);
  if (v25)
  {
    uint64_t v26 = *(uint64_t **)(a2 + 784);
    uint64_t v27 = 8 * v25;
    do
    {
      uint64_t v28 = *v26++;
      sub_1CCAE8E74(a1, v28, a3);
      v27 -= 8;
    }
    while (v27);
  }
  return MEMORY[0x1D25D9CD0](v34[0], 8);
}

BOOL sub_1CCAE9088(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = **a1;
  unsigned int v3 = -1;
  do
  {
    uint64_t v2 = *(void *)(v2 + 8);
    ++v3;
  }
  while (v2);
  uint64_t v4 = **a2;
  unsigned int v5 = -1;
  do
  {
    uint64_t v4 = *(void *)(v4 + 8);
    ++v5;
  }
  while (v4);
  return v3 < v5;
}

uint64_t sub_1CCAE90C4(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      uint64_t result = (*a3)(*(a2 - 1), *(void *)result);
      if (result)
      {
        uint64_t v9 = *v8;
        uint64_t *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v20 = (char *)a5;
      unint64_t v21 = a4 >> 1;
      uint64_t v22 = (uint64_t *)(result + 8 * (a4 >> 1));
      unint64_t v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CCAE9320((uint64_t *)result, v22, a3, v23, a5);
        uint64_t v24 = (uint64_t *)&v20[8 * v21];
        uint64_t result = (uint64_t)sub_1CCAE9320(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24);
        uint64_t v25 = &v20[8 * a4];
        uint64_t v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          uint64_t result = (*a3)(*v26, *(void *)v20);
          if (result) {
            uint64_t v27 = (char *)v26;
          }
          else {
            uint64_t v27 = v20;
          }
          v20 += 8 * (result ^ 1);
          v26 += result;
          *v8++ = *(void *)v27;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              uint64_t v28 = 0;
              do
              {
                v8[v28] = v26[v28];
                ++v28;
              }
              while (&v26[v28] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          uint64_t v29 = 0;
          do
          {
            v8[v29] = *(void *)&v20[v29 * 8];
            ++v29;
          }
          while (&v20[v29 * 8] != (char *)v24);
        }
      }
      else
      {
        sub_1CCAE90C4(result, v22, a3, v23, a5, a6);
        sub_1CCAE90C4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v20, a6);
        return sub_1CCAE951C((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, (unsigned int (**)(void, uint64_t))a3, a4 >> 1, a4 - (a4 >> 1), v20, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      uint64_t v11 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v12 = 0;
        unsigned int v13 = (uint64_t *)result;
        do
        {
          uint64_t v15 = *v13;
          uint64_t v14 = v13[1];
          unsigned int v13 = v11;
          uint64_t result = (*a3)(v14, v15);
          if (result)
          {
            uint64_t v16 = *v13;
            uint64_t v17 = v12;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v17 + 8) = *(uint64_t *)((char *)v8 + v17);
              if (!v17) {
                break;
              }
              uint64_t result = (*a3)(v16, *(uint64_t *)((char *)v8 + v17 - 8));
              v17 -= 8;
              if ((result & 1) == 0)
              {
                uint64_t v18 = (uint64_t *)((char *)v8 + v17 + 8);
                goto LABEL_15;
              }
            }
            uint64_t v18 = v8;
LABEL_15:
            uint64_t *v18 = v16;
          }
          uint64_t v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1CCAE9320(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    unsigned int v5 = a5;
    unint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *unsigned int v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      uint64_t result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if (result) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v7;
      }
      *v5++ = *v11;
      if (!result) {
        unint64_t v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v20 = &result[a4 >> 1];
      sub_1CCAE90C4(result, v20, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (uint64_t *)sub_1CCAE90C4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v21 = &v7[a4 >> 1];
      while (v21 != a2)
      {
        uint64_t result = (uint64_t *)(*a3)(*v21, *v7);
        if (result) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = v7;
        }
        v21 += result;
        v7 += result ^ 1;
        *v5++ = *v22;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              v5[v23] = v21[v23];
              ++v23;
            }
            while (&v21[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        uint64_t v24 = 0;
        do
        {
          v5[v24] = v7[v24];
          ++v24;
        }
        while (&v7[v24] != v20);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a5;
        do
        {
          uint64_t v15 = v14;
          uint64_t v16 = *v14++;
          uint64_t result = (uint64_t *)(*a3)(*v12, v16);
          uint64_t v17 = v14;
          if (result)
          {
            v15[1] = *v15;
            uint64_t v17 = v5;
            if (v15 != v5)
            {
              uint64_t v18 = v13;
              while (1)
              {
                uint64_t v17 = (uint64_t *)((char *)v5 + v18);
                uint64_t result = (uint64_t *)(*a3)(*v12, *(uint64_t *)((char *)v5 + v18 - 8));
                if (!result) {
                  break;
                }
                *uint64_t v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  uint64_t v17 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v19 = *v12++;
          *uint64_t v17 = v19;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCAE951C(uint64_t result, char *a2, char *a3, unsigned int (**a4)(void, uint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  uint64_t v15 = (char *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      uint64_t result = ((uint64_t (*)(void, void))*a4)(*(void *)a2, *(void *)v15);
      if (result) {
        break;
      }
      v15 += 8;
      if (!--a5) {
        return result;
      }
    }
    unsigned int v45 = a3;
    __src = a7;
    uint64_t v47 = v10;
    if (a5 < v10)
    {
      if (v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = v10 + 1;
      }
      unint64_t v17 = v16 >> 1;
      uint64_t v18 = &a2[8 * (v16 >> 1)];
      unint64_t v19 = (a2 - v15) >> 3;
      if (a2 == v15)
      {
        uint64_t v20 = a2;
        goto LABEL_35;
      }
      uint64_t v44 = a8;
      uint64_t v20 = v15;
      unint64_t v21 = a4;
      do
      {
        uint64_t v22 = &v20[8 * (v19 >> 1)];
        uint64_t v24 = *(void *)v22;
        uint64_t v23 = v22 + 8;
        if ((*v21)(*(void *)v18, v24))
        {
          v19 >>= 1;
        }
        else
        {
          uint64_t v20 = v23;
          v19 += ~(v19 >> 1);
        }
      }
      while (v19);
      unint64_t v19 = (v20 - v15) >> 3;
      a4 = v21;
      goto LABEL_33;
    }
    if (a5 == 1)
    {
      uint64_t v42 = *(void *)v15;
      *(void *)uint64_t v15 = *(void *)a2;
      *(void *)a2 = v42;
      return result;
    }
    if (a5 >= 0) {
      uint64_t v25 = a5;
    }
    else {
      uint64_t v25 = a5 + 1;
    }
    unint64_t v19 = v25 >> 1;
    uint64_t v20 = &v15[8 * (v25 >> 1)];
    BOOL v26 = a3 == a2;
    uint64_t v18 = a3;
    unint64_t v17 = (a3 - a2) >> 3;
    if (!v26)
    {
      uint64_t v44 = a8;
      uint64_t v27 = *a4;
      uint64_t v18 = a2;
      do
      {
        uint64_t v28 = &v18[8 * (v17 >> 1)];
        uint64_t v30 = *(void *)v28;
        uint64_t v29 = v28 + 8;
        unsigned int v31 = v27(v30, *(void *)v20);
        if (v31) {
          v17 += ~(v17 >> 1);
        }
        else {
          v17 >>= 1;
        }
        if (v31) {
          uint64_t v18 = v29;
        }
      }
      while (v17);
      unint64_t v17 = (v18 - a2) >> 3;
LABEL_33:
      a8 = v44;
    }
LABEL_35:
    a5 -= v19;
    uint64_t v32 = v47 - v17;
    uint64_t v33 = sub_1CCAE8B30(v20, a2, v18);
    uint64_t v34 = v33;
    if ((uint64_t)(v19 + v17) >= (uint64_t)(a5 + v47 - v17))
    {
      a7 = __src;
      uint64_t result = sub_1CCAE951C(v33, v18, v45, a4, a5, v47 - v17, __src, a8);
      uint64_t v18 = v20;
      uint64_t v10 = v17;
      a5 = v19;
      a3 = v34;
    }
    else
    {
      uint64_t result = sub_1CCAE951C(v15, v20, v33, a4, v19, v17, __src, a8);
      uint64_t v15 = v34;
      a3 = v45;
      uint64_t v10 = v32;
      a7 = __src;
    }
    a2 = v18;
    if (!v10) {
      return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v39 = 0;
      do
      {
        *(void *)&a7[v39] = *(void *)&v15[v39];
        v39 += 8;
      }
      while (&v15[v39] != a2);
      if (v39)
      {
        unint64_t v40 = a7;
        while (a2 != a3)
        {
          uint64_t result = ((uint64_t (*)(void, void))*a4)(*(void *)a2, *(void *)v40);
          if (result) {
            uint64_t v41 = a2;
          }
          else {
            uint64_t v41 = v40;
          }
          v40 += 8 * (result ^ 1);
          a2 += 8 * result;
          *(void *)uint64_t v15 = *(void *)v41;
          v15 += 8;
          if (&a7[v39] == v40) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, v40, a7 - v40 + v39);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v35 = 0;
    do
    {
      *(void *)&a7[v35] = *(void *)&a2[v35];
      v35 += 8;
    }
    while (&a2[v35] != a3);
    if (v35)
    {
      uint64_t v36 = &a7[v35];
      int v37 = a3 - 8;
      while (a2 != v15)
      {
        uint64_t result = ((uint64_t (*)(void, void))*a4)(*((void *)v36 - 1), *((void *)a2 - 1));
        if (result) {
          uint64_t v38 = a2;
        }
        else {
          uint64_t v38 = v36;
        }
        if (result) {
          a2 -= 8;
        }
        else {
          v36 -= 8;
        }
        *(void *)int v37 = *((void *)v38 - 1);
        v37 -= 8;
        if (v36 == a7) {
          return result;
        }
      }
      if (v36 != a7)
      {
        uint64_t v43 = 0;
        do
        {
          *(void *)&v37[v43] = *(void *)&v36[v43 - 8];
          v43 -= 8;
        }
        while (&v36[v43] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1CCAE98D8(unsigned __int8 *a1, const llvm::Instruction *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, llvm::DominatorTree *a7)
{
  v28[0] = 0;
  uint64_t result = sub_1CD41F538(*(void *)a4, *(_DWORD *)(a4 + 16), a3, v28);
  uint64_t v15 = v28[0];
  uint64_t v16 = *(void *)a4;
  uint64_t v17 = *(unsigned int *)(a4 + 16);
  if (a1[16] <= 0x1Bu) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = (llvm::Instruction *)a1;
  }
  BOOL v26 = v18;
  if (v18) {
    BOOL v19 = v18 == a2;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = v16 + 32 * v17;
    if (!result) {
      uint64_t v15 = v20;
    }
    uint64_t v27 = 0;
    v28[0] = v18;
    uint64_t result = sub_1CD50F704((uint64_t *)(v15 + 8), v28, &v27);
    if ((result & 1) == 0)
    {
      if (!v26
        || *((unsigned char *)v26 + 16) != 83
        || (uint64_t result = sub_1CD4C9788(*(void *)a6, *(_DWORD *)(a6 + 16), (uint64_t)v26, v28), (result & 1) == 0))
      {
        uint64_t v27 = 0;
        v28[0] = v26;
        uint64_t result = sub_1CD50F704(a5, v28, &v27);
        if ((result & 1) == 0)
        {
          uint64_t result = llvm::DominatorTree::dominates(a7, v26, a2);
          if ((result & 1) == 0)
          {
            int v21 = *((_DWORD *)v26 + 5);
            if ((v21 & 0x40000000) != 0)
            {
              uint64_t v23 = (uint64_t *)*((void *)v26 - 1);
              uint64_t v22 = v21 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v22 = v21 & 0x7FFFFFF;
              uint64_t v23 = (uint64_t *)((char *)v26 - 32 * v22);
            }
            if (v22)
            {
              uint64_t v24 = 32 * v22;
              do
              {
                uint64_t v25 = *v23;
                v23 += 4;
                sub_1CCAE98D8(v25, a2, a3, a4, a5, a6, a7);
                v24 -= 32;
              }
              while (v24);
            }
            llvm::Instruction::moveBefore(v26, a2);
            return sub_1CD50F67C((uint64_t)a5, &v26, (uint64_t)v28);
          }
        }
      }
    }
  }
  return result;
}

llvm::Instruction *sub_1CCAE9A60(uint64_t ****a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, llvm::Instruction **a7)
{
  if (a2) {
    goto LABEL_38;
  }
  if (!a3 || *(unsigned char *)(a3 + 16) != 81) {
    goto LABEL_35;
  }
  uint64_t v10 = *(void *)(a3 + 8);
  if (!v10)
  {
LABEL_37:
    *(_WORD *)(a3 + 18) = word_1CFB27F3C[*(_WORD *)(a3 + 18) & 0x3FLL] | *(_WORD *)(a3 + 18) & 0xFFC0;
LABEL_38:
    uint64_t v33 = *a7;
    __int16 v41 = 257;
    uint64_t v34 = a6;
    uint64_t v32 = (llvm::Instruction *)a3;
    goto LABEL_39;
  }
  uint64_t v13 = *(void *)(a3 + 8);
  while (1)
  {
    uint64_t v14 = *(void *)(v13 + 24);
    if ((unsigned __int8 *)v14 != a4)
    {
      int v15 = *(unsigned __int8 *)(v14 + 16);
      if (v15 == 85)
      {
        if (*(void *)(v14 - 96) != a3) {
          break;
        }
        goto LABEL_12;
      }
      if (v15 != 30 || (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) != 3) {
        break;
      }
    }
LABEL_12:
    uint64_t v13 = *(void *)(v13 + 8);
    if (!v13)
    {
      while (1)
      {
        uint64_t v16 = *(unsigned __int8 **)(v10 + 24);
        if (v16 != a4)
        {
          int v17 = v16[16];
          if (v16) {
            BOOL v18 = v17 == 30;
          }
          else {
            BOOL v18 = 0;
          }
          if (v18)
          {
            llvm::BranchInst::swapSuccessors((llvm::Instruction *)v16);
          }
          else
          {
            if (v17 == 85) {
              BOOL v19 = *(llvm::Instruction **)(v10 + 24);
            }
            else {
              BOOL v19 = 0;
            }
            uint64_t v42 = v19;
            if (!v19) {
              goto LABEL_31;
            }
            uint64_t v20 = *((void *)v19 - 8);
            uint64_t v21 = *((void *)v19 - 4);
            if (v20 != v21)
            {
              uint64_t v22 = (char *)v19 - 24;
              uint64_t v23 = *((void *)v19 - 3);
              *((void *)v19 - 8) = v21;
              *((void *)v19 - 4) = v20;
              long long v24 = *(_OWORD *)((char *)v19 - 56);
              uint64_t v25 = (void *)*((void *)v19 - 2);
              *((void *)v19 - 7) = v23;
              *((void *)v19 - 6) = v25;
              *(_OWORD *)((char *)v19 - 24) = v24;
              *uint64_t v25 = (char *)v19 - 64;
              uint64_t v26 = *((void *)v19 - 7);
              if (v26) {
                *(void *)(v26 + 16) = (char *)v19 - 56;
              }
              **((void **)v19 - 2) = (char *)v19 - 32;
              uint64_t v27 = *((void *)v19 - 3);
              if (v27) {
                *(void *)(v27 + 16) = v22;
              }
            }
            llvm::Instruction::swapProfMetadata(v42);
            if (sub_1CD4C9788(*(void *)(a5 + 1704), *(_DWORD *)(a5 + 1720), (uint64_t)v42, &v39))
            {
              uint64_t v28 = a5 + 1728;
            }
            else
            {
              if (!sub_1CD4C9788(*(void *)(a5 + 1728), *(_DWORD *)(a5 + 1744), (uint64_t)v42, &v39)) {
                goto LABEL_31;
              }
              uint64_t v28 = a5 + 1704;
            }
            sub_1CD690DDC(v28, &v42, (uint64_t)&v39);
          }
        }
LABEL_31:
        uint64_t v10 = *(void *)(v10 + 8);
        if (!v10) {
          goto LABEL_37;
        }
      }
    }
  }
LABEL_35:
  uint64_t v29 = ***a1;
  uint64_t v30 = *v29;
  unsigned int v31 = *(void **)(*v29 + 1560);
  if (!v31)
  {
    uint64_t v36 = *(llvm::ConstantInt **)(v30 + 1888);
    unsigned int v37 = *(_DWORD *)(v30 + 1896);
    unsigned int v40 = v37 >> 8;
    if (v37 >> 8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v39);
    }
    if (v37 <= 0xFF) {
      char v38 = 0;
    }
    else {
      char v38 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v37);
    }
    uint64_t v39 = v38 & 1;
    unsigned int v31 = llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v39, (const llvm::APInt *)a3);
    if (v40 >= 0x41 && v39) {
      MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
    }
    *(void *)(v30 + 1560) = v31;
  }
  __int16 v41 = 257;
  uint64_t v32 = sub_1CC2428C0(a6, (uint64_t)v31, a3, (uint64_t)&v39);
  uint64_t v33 = *a7;
  __int16 v41 = 257;
  uint64_t v34 = a6;
LABEL_39:
  uint64_t result = sub_1CBF52474(v34, v33, (uint64_t)v32, (uint64_t)&v39);
  *a7 = result;
  return result;
}

uint64_t sub_1CCAE9D40()
{
  LOBYTE(v2) = 0;
  uint64_t v4 = (const char *)&v2;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Apply CHR for all functions";
  v3.n128_u64[1] = 27;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE6FA0, "force-chr", (unsigned char **)&v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE6FA0, &dword_1CB82C000);
  uint64_t v1 = 0x3FEFAE147AE147AELL;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"CHR considers a branch bias greater than this ratio as biased";
  v3.n128_u64[1] = 61;
  uint64_t v4 = (const char *)&v1;
  sub_1CD69196C((uint64_t **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &qword_1EBCE7120, &dword_1CB82C000);
  LODWORD(v1) = 2;
  uint64_t v4 = (const char *)&v1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"CHR merges a group of N branches/selects where N >= this value";
  v3.n128_u64[1] = 62;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCE7060, "chr-merge-threshold", (int **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE7060, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Specify file to retrieve the list of modules to apply CHR to";
  v3.n128_u64[1] = 60;
  uint64_t v4 = "";
  sub_1CD691AE8(&v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE71E8, &dword_1CB82C000);
  v3.n128_u64[1] = 62;
  uint64_t v4 = "";
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Specify file to retrieve the list of functions to apply CHR to";
  sub_1CD691C5C(&v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE72D0, &dword_1CB82C000);
  qword_1EBCE6F60 = 0;
  *(void *)&dword_1EBCE6F68 = 0;
  unk_1EBCE6F70 = 0x800000000;
  __cxa_atexit((void (*)(void *))sub_1CD5A4EF0, &qword_1EBCE6F60, &dword_1CB82C000);
  qword_1EBCE6F80 = 0;
  *(void *)&dword_1EBCE6F88 = 0;
  unk_1EBCE6F90 = 0x800000000;
  return __cxa_atexit((void (*)(void *))sub_1CD5A4EF0, &qword_1EBCE6F80, &dword_1CB82C000);
}

void llvm::initializeDataFlowSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA61D9F0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCAE9FD4;
    v4[1] = &v2;
    __n128 v3 = v4;
    std::__call_once(&qword_1EA61D9F0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCAE9FD4()
{
}

void sub_1CCAEA070(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 520) = a1 + 552;
  *(void *)(a1 + 528) = a1 + 552;
  *(void *)(a1 + 536) = 16;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 744) = a1 + 752;
  *(_OWORD *)(a1 + 768) = 0u;
  *(void *)(a1 + 784) = 0x800000000;
  *(void *)(a1 + 808) = 200;
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  uint64_t v4 = (v2 - *a2) >> 3;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  sub_1CB906CCC(&v46, v3, v2, 0xAAAAAAAAAAAAAAABLL * v4);
  uint64_t v6 = qword_1EBCE7C88;
  uint64_t v5 = unk_1EBCE7C90;
  if (unk_1EBCE7C90 - qword_1EBCE7C88 < 1) {
    goto LABEL_47;
  }
  uint64_t v7 = (unk_1EBCE7C90 - qword_1EBCE7C88) / 24;
  uint64_t v8 = v47;
  uint64_t v9 = v47 - v46;
  uint64_t v10 = &v46[v9];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v48 - (char *)v47) >> 3)) < v7)
  {
    uint64_t v11 = (unk_1EBCE7C90 - qword_1EBCE7C88) / 24;
    unint64_t v12 = v9 + v7;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v13 = 0x5555555555555556 * ((v48 - (char *)v46) >> 3);
    if (v13 <= v12) {
      unint64_t v13 = v12;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v48 - (char *)v46) >> 3) >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v13;
    }
    v49[4] = &v48;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      int v15 = (char *)operator new(24 * v14);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v29 = &v15[24 * v9];
    uint64_t v30 = 3 * v11;
    unsigned int v31 = (std::string *)&v29[24 * v11];
    uint64_t v32 = 8 * v30;
    uint64_t v33 = (uint64_t)v29;
    do
    {
      if (*(char *)(v6 + 23) < 0)
      {
        sub_1CB8BDF7C(v33, *(const void **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v34 = *(_OWORD *)v6;
        *(void *)(v33 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v33 = v34;
      }
      v33 += 24;
      v6 += 24;
      v32 -= 24;
    }
    while (v32);
    uint64_t v35 = v46;
    if (v10 == v46)
    {
      uint64_t v36 = (std::string *)v29;
    }
    else
    {
      unsigned int v37 = v10;
      do
      {
        uint64_t v36 = (std::string *)(v29 - 24);
        long long v38 = *(_OWORD *)&v37[-1].__r_.__value_.__l.__data_;
        *((void *)v29 - 1) = *((void *)&v37[-1].__r_.__value_.__l + 2);
        *(_OWORD *)(v29 - 24) = v38;
        v37[-1].__r_.__value_.__l.__size_ = 0;
        v37[-1].__r_.__value_.__r.__words[2] = 0;
        v37[-1].__r_.__value_.__r.__words[0] = 0;
        --v37;
        v29 -= 24;
      }
      while (v37 != v35);
    }
    uint64_t v39 = v47;
    if (v10 != v47)
    {
      do
      {
        long long v40 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v31->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v40;
        ++v31;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        ++v10;
      }
      while (v10 != v39);
      uint64_t v10 = v47;
    }
    __int16 v41 = v46;
    uint64_t v42 = v48;
    uint64_t v46 = v36;
    uint64_t v47 = v31;
    unint64_t v48 = &v15[24 * v14];
    v49[0] = v41;
    v49[2] = v10;
    v49[3] = v42;
    v49[1] = v41;
    sub_1CBF4EE0C((uint64_t)v49);
    goto LABEL_47;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v10) >> 3)) >= v7)
  {
    uint64_t v16 = qword_1EBCE7C88 + 24 * v7;
    int v17 = v47;
  }
  else
  {
    uint64_t v43 = (unk_1EBCE7C90 - qword_1EBCE7C88) / 24;
    uint64_t v44 = (char *)v47 - (char *)v10;
    uint64_t v16 = qword_1EBCE7C88 + 8 * (((char *)v47 - (char *)v10) >> 3);
    int v17 = v47;
    if (v16 != unk_1EBCE7C90)
    {
      int v17 = v47;
      uint64_t v18 = qword_1EBCE7C88 + 8 * (((char *)v47 - (char *)v10) >> 3);
      uint64_t v19 = (uint64_t)v47;
      do
      {
        if (*(char *)(v18 + 23) < 0)
        {
          sub_1CB8BDF7C(v19, *(const void **)v18, *(void *)(v18 + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)v18;
          *(void *)(v19 + 16) = *(void *)(v18 + 16);
          *(_OWORD *)uint64_t v19 = v20;
        }
        v18 += 24;
        v19 += 24;
        ++v17;
      }
      while (v18 != v5);
    }
    uint64_t v47 = v17;
    if (v44 < 1)
    {
LABEL_47:
      llvm::vfs::getRealFileSystem(&v45);
      llvm::SpecialCaseList::createOrDie();
    }
    uint64_t v7 = v43;
  }
  uint64_t v21 = &v10[v7];
  uint64_t v22 = &v17[-v7];
  uint64_t v23 = v17;
  if (v22 < v8)
  {
    uint64_t v23 = v17;
    do
    {
      long long v24 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v23->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
      ++v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      ++v22;
    }
    while (v22 < v8);
  }
  uint64_t v47 = v23;
  if (v17 != v21)
  {
    uint64_t v25 = v17 - 1;
    uint64_t v26 = 8 * (((char *)v17 - (char *)v21) >> 3);
    do
    {
      if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25->__r_.__value_.__l.__data_);
      }
      uint64_t v27 = (long long *)((char *)&v10[-1] + v26);
      long long v28 = *v27;
      v25->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[(unint64_t)v26 / 8 - 1];
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v28;
      --v25;
      v10->__r_.__value_.__s.__data_[v26 - 1] = 0;
      *(unsigned char *)uint64_t v27 = 0;
      v26 -= 24;
    }
    while (v26);
  }
  for (; v6 != v16; ++v10)
  {
    std::string::operator=(v10, (const std::string *)v6);
    v6 += 24;
  }
  goto LABEL_47;
}

BOOL sub_1CCAEA5C4(uint64_t a1, void *a2)
{
  uint64_t v913 = *MEMORY[0x1E4F143B8];
  __int16 v787 = 260;
  v785.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 27);
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v785);
  if (v810[1] != 9)
  {
    int64_t v722 = "unsupported operating system";
    goto LABEL_1399;
  }
  if (v809 != 42)
  {
    int64_t v722 = "unsupported architecture";
LABEL_1399:
    llvm::report_fatal_error((llvm *)v722, (const llvm::Twine *)1);
  }
  *(void *)(a1 + 800) = &unk_1CFB27FD0;
  *(void *)a1 = a2;
  uint64_t v4 = (uint64_t *)*a2;
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = llvm::PointerType::get((llvm::PointerType *)(*v4 + 1912), 0);
  uint64_t v5 = (llvm::PointerType *)(**(void **)(a1 + 8) + 1960);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = llvm::PointerType::get(v5, 0);
  uint64_t v6 = (llvm::PointerType *)(**(void **)(a1 + 8) + 1912);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = llvm::PointerType::get(v6, 0);
  *(void *)(a1 + 64) = llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 8), (llvm::LLVMContext *)*(unsigned int *)(a2[63] + 4));
  *(void *)(a1 + 72) = llvm::ConstantInt::getSigned(*(llvm::ConstantInt **)(a1 + 48), 0, v7);
  *(void *)(a1 + 40) = llvm::ConstantInt::getSigned(*(llvm::ConstantInt **)(a1 + 24), 0, v8);
  *(_OWORD *)v899 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 120) = llvm::FunctionType::get(*(uint64_t ***)(a1 + 48), (uint64_t)v899, 2, 0);
  uint64_t v9 = *(void **)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v892 = *(unsigned char **)(a1 + 16);
  uint64_t v893 = v9;
  *(void *)(a1 + 128) = llvm::FunctionType::get((uint64_t **)(*(void *)v10 + 1984), (uint64_t)&v892, 2, 0);
  uint64_t v11 = **(void **)(a1 + 8);
  unint64_t v12 = (uint64_t **)(v11 + 1576);
  v785.__r_.__value_.__r.__words[0] = llvm::PointerType::get((llvm::PointerType *)(v11 + 1912), 0);
  *(void *)(a1 + 136) = llvm::FunctionType::get(v12, (uint64_t)&v785, 1, 0);
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v885 = *(unsigned char **)(a1 + 16);
  uint64_t v886 = v885;
  *(void *)(a1 + 144) = llvm::FunctionType::get((uint64_t **)(*(void *)v13 + 1576), (uint64_t)&v885, 2, 0);
  uint64_t v786 = 0;
  unint64_t v14 = *(void *)(a1 + 24);
  v785.__r_.__value_.__r.__words[0] = *(void *)(a1 + 48);
  *(_OWORD *)&v785.__r_.__value_.__r.__words[1] = v14;
  unint64_t v15 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(a1 + 8) + 1912), 0);
  uint64_t v16 = *(void *)(a1 + 64);
  v785.__r_.__value_.__r.__words[2] = v15;
  uint64_t v786 = v16;
  *(void *)(a1 + 152) = llvm::FunctionType::get((uint64_t **)(**(void **)(a1 + 8) + 1576), (uint64_t)&v785, 4, 0);
  *(void *)(a1 + 160) = llvm::FunctionType::get((uint64_t **)(**(void **)(a1 + 8) + 1576), 0, 0, 0);
  uint64_t v17 = **(void **)(a1 + 8);
  uint64_t v18 = (uint64_t **)(v17 + 1576);
  *(void *)&long long __dst = llvm::PointerType::get((llvm::PointerType *)(v17 + 1912), 0);
  *(void *)(a1 + 168) = llvm::FunctionType::get(v18, (uint64_t)&__dst, 1, 0);
  uint64_t v19 = (uint64_t **)(**(void **)(a1 + 8) + 1576);
  *(void *)&long long __dst = *(void *)(a1 + 48);
  *(void *)(a1 + 176) = llvm::FunctionType::get(v19, (uint64_t)&__dst, 1, 0);
  long long v20 = *(void **)(a1 + 24);
  char v876 = *(unsigned char **)(a1 + 48);
  uint64_t v877 = v20;
  *(void *)(a1 + 184) = llvm::FunctionType::get((uint64_t **)(**(void **)(a1 + 8) + 1576), (uint64_t)&v876, 2, 0);
  uint64_t v21 = (uint64_t **)(**(void **)(a1 + 8) + 1576);
  *(void *)&long long __dst = *(void *)(a1 + 48);
  *(void *)(a1 + 192) = llvm::FunctionType::get(v21, (uint64_t)&__dst, 1, 0);
  *(void *)&long long __dst = *(void *)(a1 + 24);
  *(void *)(a1 + 216) = llvm::FunctionType::get((uint64_t **)__dst, (uint64_t)&__dst, 1, 0);
  uint64_t v22 = *(void **)(a1 + 24);
  uint64_t v867 = *(unsigned char **)(a1 + 48);
  uint64_t v868 = v22;
  *(void *)(a1 + 224) = llvm::FunctionType::get((uint64_t **)v22, (uint64_t)&v867, 2, 0);
  long long __dst = 0u;
  long long v779 = 0u;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 16);
  *(void *)&long long __dst = *(void *)v23 + 1912;
  *((void *)&__dst + 1) = v24;
  uint64_t v25 = *(void *)(a1 + 24);
  *(void *)&long long v779 = *(void *)(a1 + 64);
  *((void *)&v779 + 1) = v25;
  *(void *)(a1 + 240) = llvm::FunctionType::get((uint64_t **)(*(void *)v23 + 1576), (uint64_t)&__dst, 4, 0);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v906 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v907 = v906;
  unint64_t v908 = *(void *)(a1 + 64);
  *(void *)(a1 + 232) = llvm::FunctionType::get((uint64_t **)(*(void *)v26 + 1576), (uint64_t)&v906, 3, 0);
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v27 = *(void **)(a1 + 16);
  __int16 v858 = *(unsigned char **)(a1 + 48);
  unint64_t v859 = v27;
  *(void *)(a1 + 200) = llvm::FunctionType::get((uint64_t **)(*(void *)v28 + 1576), (uint64_t)&v858, 2, 0);
  *(_OWORD *)int v850 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 208) = llvm::FunctionType::get((uint64_t **)(**(void **)(a1 + 8) + 1576), (uint64_t)v850, 2, 0);
  uint64_t v769 = *(uint64_t **)(a1 + 8);
  uint64_t v841 = 0x3E800000001;
  *(void *)(a1 + 680) = llvm::MDBuilder::createBranchWeights(&v769, (uint64_t)&v841, 2);
  uint64_t v769 = *(uint64_t **)(a1 + 8);
  uint64_t v841 = 0x3E800000001;
  *(void *)(a1 + 688) = llvm::MDBuilder::createBranchWeights(&v769, (uint64_t)&v841, 2);
  if (SHIBYTE(v808) < 0) {
    operator delete(__p[0]);
  }
  char v30 = *((unsigned char *)a2 + 191);
  if (v30 >= 0) {
    unsigned int v31 = (unsigned __int8 *)(a2 + 21);
  }
  else {
    unsigned int v31 = (unsigned __int8 *)a2[21];
  }
  if (v30 >= 0) {
    size_t v32 = v30 & 0x7F;
  }
  else {
    size_t v32 = a2[22];
  }
  if (llvm::SpecialCaseList::inSectionBlame(*(uint64_t ***)(a1 + 696), "dataflow", 8uLL, "src", 3uLL, v31, v32, v29, "skip", 4uLL))return 0; {
  LODWORD(v35) = -1;
  }
  uint64_t v36 = a2 + 1;
  do
  {
    uint64_t v36 = (void *)v36[1];
    uint64_t v35 = (v35 + 1);
  }
  while (v36 != a2 + 1);
  unsigned int v37 = a2 + 3;
  LODWORD(v38) = -1;
  uint64_t v39 = a2 + 3;
  do
  {
    uint64_t v39 = (void *)v39[1];
    uint64_t v38 = (v38 + 1);
  }
  while (v39 != v37);
  char v750 = 0;
  long long v40 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)(a1 + 8) + 1984), (llvm::Type *)0x64);
  inserted = llvm::Module::getOrInsertGlobal(*(void *)a1, "__dfsan_arg_tls", 0xFuLL, v40);
  if (inserted) {
    BOOL v42 = *((unsigned char *)inserted + 16) == 3;
  }
  else {
    BOOL v42 = 0;
  }
  if (v42)
  {
    int v43 = *((_DWORD *)inserted + 8);
    v750 |= (v43 & 0x1C00) != 3072;
    *((_DWORD *)inserted + 8) = v43 & 0xFFFFE3FF | 0xC00;
  }
  *(void *)(a1 + 80) = inserted;
  uint64_t v44 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)(a1 + 8) + 1984), (llvm::Type *)0x64);
  uint64_t v45 = llvm::Module::getOrInsertGlobal(*(void *)a1, "__dfsan_retval_tls", 0x12uLL, v44);
  if (v45) {
    BOOL v46 = *((unsigned char *)v45 + 16) == 3;
  }
  else {
    BOOL v46 = 0;
  }
  if (v46)
  {
    int v47 = *((_DWORD *)v45 + 8);
    v750 |= (v47 & 0x1C00) != 3072;
    *((_DWORD *)v45 + 8) = v47 & 0xFFFFE3FF | 0xC00;
  }
  *(void *)(a1 + 104) = v45;
  unint64_t v48 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 24), *(llvm::Type **)(a1 + 808));
  *(void *)(a1 + 88) = v48;
  unint64_t v49 = llvm::Module::getOrInsertGlobal(*(void *)a1, "__dfsan_arg_origin_tls", 0x16uLL, v48);
  if (v49 && *((unsigned char *)v49 + 16) == 3)
  {
    int v50 = *((_DWORD *)v49 + 8);
    v750 |= (v50 & 0x1C00) != 3072;
    *((_DWORD *)v49 + 8) = v50 & 0xFFFFE3FF | 0xC00;
  }
  uint64_t v730 = (uint64_t ***)(a1 + 696);
  unint64_t v727 = a2 + 1;
  *(void *)(a1 + 96) = v49;
  long long v51 = llvm::Module::getOrInsertGlobal(*(void *)a1, "__dfsan_retval_origin_tls", 0x19uLL, *(llvm::PointerType **)(a1 + 24));
  if (v51 && *((unsigned char *)v51 + 16) == 3)
  {
    int v52 = *((_DWORD *)v51 + 8);
    v750 |= (v52 & 0x1C00) != 3072;
    *((_DWORD *)v51 + 8) = v52 & 0xFFFFE3FF | 0xC00;
  }
  *(void *)(a1 + 112) = v51;
  uint64_t v53 = *(void *)a1;
  unint64_t v54 = *(llvm::PointerType **)(a1 + 24);
  __p[0] = &v750;
  __p[1] = a2;
  BOOL v808 = (_DWORD *)a1;
  llvm::Module::getOrInsertGlobal(v53, "__dfsan_track_origins", 0x15uLL, v54, (uint64_t (*)(uint64_t))sub_1CCAF74A4, (uint64_t)__p);
  v785.__r_.__value_.__r.__words[0] = 0;
  uint64_t v55 = *(void *)a1;
  v785.__r_.__value_.__r.__words[0] = **(void **)(a1 + 8) + 1960;
  __p[0] = a2;
  __p[1] = &v785;
  llvm::Module::getOrInsertGlobal(v55, "__dfsan_shadow_width_bits", 0x19uLL, (llvm::PointerType *)v785.__r_.__value_.__l.__data_, (uint64_t (*)(uint64_t))sub_1CCAF7570, (uint64_t)__p);
  uint64_t v56 = *(void *)a1;
  __p[0] = a2;
  __p[1] = &v785;
  llvm::Module::getOrInsertGlobal(v56, "__dfsan_shadow_width_bytes", 0x1AuLL, (llvm::PointerType *)v785.__r_.__value_.__l.__data_, (uint64_t (*)(uint64_t))sub_1CCAF7620, (uint64_t)__p);
  *(void *)(a1 + 360) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_load_callback", (const char *)0x15, *(llvm::PointerType **)(a1 + 200), 0);
  *(void *)(a1 + 368) = v57;
  *(void *)(a1 + 376) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_store_callback", (const char *)0x16, *(llvm::PointerType **)(a1 + 200), 0);
  *(void *)(a1 + 384) = v58;
  *(void *)(a1 + 392) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_mem_transfer_callback", (const char *)0x1D, *(llvm::PointerType **)(a1 + 208), 0);
  *(void *)(a1 + 400) = v59;
  *(void *)(a1 + 440) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_cmp_callback", (const char *)0x14, *(llvm::PointerType **)(a1 + 192), 0);
  *(void *)(a1 + 448) = v60;
  *(void *)(a1 + 408) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_conditional_callback", (const char *)0x1C, *(llvm::PointerType **)(a1 + 176), 0);
  *(void *)(a1 + 416) = v61;
  *(void *)(a1 + 424) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_conditional_callback_origin", (const char *)0x23, *(llvm::PointerType **)(a1 + 184), 0);
  *(void *)(a1 + 432) = v62;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 37);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 45);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(void *)(a1 + 248) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_union_load", (const char *)0x12, *(llvm::PointerType **)(a1 + 120), (uint64_t)__p[0]);
  *(void *)(a1 + 256) = v63;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 37);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 45);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(void *)(a1 + 264) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_load_label_and_origin", (const char *)0x1D, *(llvm::PointerType **)(a1 + 128), (uint64_t)__p[0]);
  *(void *)(a1 + 272) = v64;
  *(void *)(a1 + 280) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_unimplemented", (const char *)0x15, *(llvm::PointerType **)(a1 + 136), 0);
  *(void *)(a1 + 288) = v65;
  *(void *)(a1 + 296) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_wrapper_extern_weak_null", (const char *)0x20, *(llvm::PointerType **)(a1 + 144), 0);
  *(void *)(a1 + 304) = v66;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 2, 67);
  *(void *)(a1 + 312) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_set_label", (const char *)0x11, *(llvm::PointerType **)(a1 + 152), (uint64_t)__p[0]);
  *(void *)(a1 + 320) = v67;
  *(void *)(a1 + 328) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_nonzero_label", (const char *)0x15, *(llvm::PointerType **)(a1 + 160), 0);
  *(void *)(a1 + 336) = v68;
  *(void *)(a1 + 344) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_vararg_wrapper", (const char *)0x16, *(llvm::PointerType **)(a1 + 168), 0);
  *(void *)(a1 + 352) = v69;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(void *)(a1 + 456) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_chain_origin", (const char *)0x14, *(llvm::PointerType **)(a1 + 216), (uint64_t)__p[0]);
  *(void *)(a1 + 464) = v70;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 2, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(void *)(a1 + 472) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_chain_origin_if_tainted", (const char *)0x1F, *(llvm::PointerType **)(a1 + 224), (uint64_t)__p[0]);
  *(void *)(a1 + 480) = v71;
  *(void *)(a1 + 488) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_mem_origin_transfer", (const char *)0x1B, *(llvm::PointerType **)(a1 + 232), 0);
  *(void *)(a1 + 496) = v72;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 4, 67);
  *(void *)(a1 + 504) = llvm::Module::getOrInsertFunction(*(void *)a1, "__dfsan_maybe_store_origin", (const char *)0x1A, *(llvm::PointerType **)(a1 + 240), (uint64_t)__p[0]);
  *(void *)(a1 + 512) = v73;
  unint64_t v74 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 256));
  int v75 = v74;
  uint64_t v76 = *(void *)(a1 + 528);
  unsigned int v77 = (unsigned int *)(a1 + 540);
  uint64_t v78 = *(unsigned int *)(a1 + 540);
  if (v76 != *(void *)(a1 + 520))
  {
    unsigned int v82 = *(_DWORD *)(a1 + 536);
    goto LABEL_47;
  }
  if (!v78)
  {
LABEL_44:
    unsigned int v82 = *(_DWORD *)(a1 + 536);
    if (v78 < v82)
    {
      *unsigned int v77 = v78 + 1;
      *(void *)(v76 + 8 * v78) = v74;
      goto LABEL_68;
    }
LABEL_47:
    if (3 * v82 <= 4 * ((int)v78 - *(_DWORD *)(a1 + 544)))
    {
      if (v82 >= 0x40) {
        v82 *= 2;
      }
      else {
        unsigned int v82 = 128;
      }
    }
    else if (v82 - v78 >= v82 >> 3)
    {
      goto LABEL_49;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v82);
    unsigned int v82 = *(_DWORD *)(a1 + 536);
    uint64_t v76 = *(void *)(a1 + 528);
LABEL_49:
    unsigned int v83 = v82 - 1;
    unsigned int v84 = (v82 - 1) & ((v75 >> 4) ^ (v75 >> 9));
    unsigned int v85 = (llvm::Value **)(v76 + 8 * v84);
    uint64_t v86 = *v85;
    if (*v85 == (llvm::Value *)-1)
    {
      uint64_t v87 = 0;
LABEL_61:
      if (v87) {
        uint64_t v91 = v87;
      }
      else {
        uint64_t v91 = v85;
      }
      if (*v91 != v75)
      {
        if (*v91 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *uint64_t v91 = v75;
      }
    }
    else
    {
      uint64_t v87 = 0;
      int v88 = 1;
      while (v86 != v75)
      {
        if (v87) {
          BOOL v89 = 0;
        }
        else {
          BOOL v89 = v86 == (llvm::Value *)-2;
        }
        if (v89) {
          uint64_t v87 = v85;
        }
        unsigned int v90 = v84 + v88++;
        unsigned int v84 = v90 & v83;
        unsigned int v85 = (llvm::Value **)(v76 + 8 * (v90 & v83));
        uint64_t v86 = *v85;
        if (*v85 == (llvm::Value *)-1) {
          goto LABEL_61;
        }
      }
    }
    goto LABEL_68;
  }
  uint64_t v79 = 0;
  uint64_t v80 = 8 * v78;
  uint64_t v81 = *(llvm::Value ***)(a1 + 528);
  while (*v81 != v74)
  {
    if (*v81 == (llvm::Value *)-2) {
      uint64_t v79 = v81;
    }
    ++v81;
    v80 -= 8;
    if (!v80)
    {
      if (!v79) {
        goto LABEL_44;
      }
      *uint64_t v79 = v74;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_68:
  unint64_t v92 = (unsigned int *)(a1 + 536);
  int64x2_t v93 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 272));
  unint64_t v94 = v93;
  uint64_t v95 = *(void *)(a1 + 528);
  uint64_t v96 = *(unsigned int *)(a1 + 540);
  if (v95 != *(void *)(a1 + 520))
  {
    unsigned int v100 = *v92;
    goto LABEL_79;
  }
  if (!v96)
  {
LABEL_76:
    unsigned int v100 = *v92;
    if (v96 < *v92)
    {
      *unsigned int v77 = v96 + 1;
      *(void *)(v95 + 8 * v96) = v93;
      goto LABEL_100;
    }
LABEL_79:
    if (3 * v100 <= 4 * ((int)v96 - *(_DWORD *)(a1 + 544)))
    {
      if (v100 >= 0x40) {
        v100 *= 2;
      }
      else {
        unsigned int v100 = 128;
      }
    }
    else if (v100 - v96 >= v100 >> 3)
    {
      goto LABEL_81;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v100);
    unsigned int v100 = *(_DWORD *)(a1 + 536);
    uint64_t v95 = *(void *)(a1 + 528);
LABEL_81:
    unsigned int v101 = v100 - 1;
    unsigned int v102 = (v100 - 1) & ((v94 >> 4) ^ (v94 >> 9));
    int v103 = (llvm::Value **)(v95 + 8 * v102);
    uint64_t v104 = *v103;
    if (*v103 == (llvm::Value *)-1)
    {
      int v105 = 0;
LABEL_93:
      if (v105) {
        unint64_t v109 = v105;
      }
      else {
        unint64_t v109 = v103;
      }
      if (*v109 != v94)
      {
        if (*v109 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *unint64_t v109 = v94;
      }
    }
    else
    {
      int v105 = 0;
      int v106 = 1;
      while (v104 != v94)
      {
        if (v105) {
          BOOL v107 = 0;
        }
        else {
          BOOL v107 = v104 == (llvm::Value *)-2;
        }
        if (v107) {
          int v105 = v103;
        }
        unsigned int v108 = v102 + v106++;
        unsigned int v102 = v108 & v101;
        int v103 = (llvm::Value **)(v95 + 8 * (v108 & v101));
        uint64_t v104 = *v103;
        if (*v103 == (llvm::Value *)-1) {
          goto LABEL_93;
        }
      }
    }
    goto LABEL_100;
  }
  int v97 = 0;
  uint64_t v98 = 8 * v96;
  unsigned int v99 = *(llvm::Value ***)(a1 + 528);
  while (*v99 != v93)
  {
    if (*v99 == (llvm::Value *)-2) {
      int v97 = v99;
    }
    ++v99;
    v98 -= 8;
    if (!v98)
    {
      if (!v97) {
        goto LABEL_76;
      }
      *int v97 = v93;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_100:
  unint64_t v110 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 288));
  uint64_t v111 = v110;
  uint64_t v112 = *(void *)(a1 + 528);
  uint64_t v113 = *(unsigned int *)(a1 + 540);
  if (v112 != *(void *)(a1 + 520))
  {
    unsigned int v117 = *v92;
    goto LABEL_111;
  }
  if (!v113)
  {
LABEL_108:
    unsigned int v117 = *v92;
    if (v113 < *v92)
    {
      *unsigned int v77 = v113 + 1;
      *(void *)(v112 + 8 * v113) = v110;
      goto LABEL_132;
    }
LABEL_111:
    if (3 * v117 <= 4 * ((int)v113 - *(_DWORD *)(a1 + 544)))
    {
      if (v117 >= 0x40) {
        v117 *= 2;
      }
      else {
        unsigned int v117 = 128;
      }
    }
    else if (v117 - v113 >= v117 >> 3)
    {
      goto LABEL_113;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v117);
    unsigned int v117 = *(_DWORD *)(a1 + 536);
    uint64_t v112 = *(void *)(a1 + 528);
LABEL_113:
    unsigned int v118 = v117 - 1;
    unsigned int v119 = (v117 - 1) & ((v111 >> 4) ^ (v111 >> 9));
    char v120 = (llvm::Value **)(v112 + 8 * v119);
    uint64_t v121 = *v120;
    if (*v120 == (llvm::Value *)-1)
    {
      unsigned int v122 = 0;
LABEL_125:
      if (v122) {
        unsigned int v126 = v122;
      }
      else {
        unsigned int v126 = v120;
      }
      if (*v126 != v111)
      {
        if (*v126 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *unsigned int v126 = v111;
      }
    }
    else
    {
      unsigned int v122 = 0;
      int v123 = 1;
      while (v121 != v111)
      {
        if (v122) {
          BOOL v124 = 0;
        }
        else {
          BOOL v124 = v121 == (llvm::Value *)-2;
        }
        if (v124) {
          unsigned int v122 = v120;
        }
        unsigned int v125 = v119 + v123++;
        unsigned int v119 = v125 & v118;
        char v120 = (llvm::Value **)(v112 + 8 * (v125 & v118));
        uint64_t v121 = *v120;
        if (*v120 == (llvm::Value *)-1) {
          goto LABEL_125;
        }
      }
    }
    goto LABEL_132;
  }
  uint64_t v114 = 0;
  uint64_t v115 = 8 * v113;
  unsigned int v116 = *(llvm::Value ***)(a1 + 528);
  while (*v116 != v110)
  {
    if (*v116 == (llvm::Value *)-2) {
      uint64_t v114 = v116;
    }
    ++v116;
    v115 -= 8;
    if (!v115)
    {
      if (!v114) {
        goto LABEL_108;
      }
      *uint64_t v114 = v110;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_132:
  unsigned int v127 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 304));
  int v128 = v127;
  uint64_t v129 = *(void *)(a1 + 528);
  uint64_t v130 = *(unsigned int *)(a1 + 540);
  if (v129 != *(void *)(a1 + 520))
  {
    unsigned int v134 = *v92;
    goto LABEL_143;
  }
  if (!v130)
  {
LABEL_140:
    unsigned int v134 = *v92;
    if (v130 < *v92)
    {
      *unsigned int v77 = v130 + 1;
      *(void *)(v129 + 8 * v130) = v127;
      goto LABEL_164;
    }
LABEL_143:
    if (3 * v134 <= 4 * ((int)v130 - *(_DWORD *)(a1 + 544)))
    {
      if (v134 >= 0x40) {
        v134 *= 2;
      }
      else {
        unsigned int v134 = 128;
      }
    }
    else if (v134 - v130 >= v134 >> 3)
    {
      goto LABEL_145;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v134);
    unsigned int v134 = *(_DWORD *)(a1 + 536);
    uint64_t v129 = *(void *)(a1 + 528);
LABEL_145:
    unsigned int v135 = v134 - 1;
    unsigned int v136 = (v134 - 1) & ((v128 >> 4) ^ (v128 >> 9));
    int v137 = (llvm::Value **)(v129 + 8 * v136);
    uint64_t v138 = *v137;
    if (*v137 == (llvm::Value *)-1)
    {
      uint64_t v139 = 0;
LABEL_157:
      if (v139) {
        uint64_t v143 = v139;
      }
      else {
        uint64_t v143 = v137;
      }
      if (*v143 != v128)
      {
        if (*v143 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *uint64_t v143 = v128;
      }
    }
    else
    {
      uint64_t v139 = 0;
      int v140 = 1;
      while (v138 != v128)
      {
        if (v139) {
          BOOL v141 = 0;
        }
        else {
          BOOL v141 = v138 == (llvm::Value *)-2;
        }
        if (v141) {
          uint64_t v139 = v137;
        }
        unsigned int v142 = v136 + v140++;
        unsigned int v136 = v142 & v135;
        int v137 = (llvm::Value **)(v129 + 8 * (v142 & v135));
        uint64_t v138 = *v137;
        if (*v137 == (llvm::Value *)-1) {
          goto LABEL_157;
        }
      }
    }
    goto LABEL_164;
  }
  int v131 = 0;
  uint64_t v132 = 8 * v130;
  int v133 = *(llvm::Value ***)(a1 + 528);
  while (*v133 != v127)
  {
    if (*v133 == (llvm::Value *)-2) {
      int v131 = v133;
    }
    ++v133;
    v132 -= 8;
    if (!v132)
    {
      if (!v131) {
        goto LABEL_140;
      }
      char *v131 = v127;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_164:
  uint64_t v144 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 320));
  uint64_t v145 = v144;
  uint64_t v146 = *(void *)(a1 + 528);
  uint64_t v147 = *(unsigned int *)(a1 + 540);
  if (v146 != *(void *)(a1 + 520))
  {
    unsigned int v151 = *v92;
    goto LABEL_175;
  }
  if (!v147)
  {
LABEL_172:
    unsigned int v151 = *v92;
    if (v147 < *v92)
    {
      *unsigned int v77 = v147 + 1;
      *(void *)(v146 + 8 * v147) = v144;
      goto LABEL_196;
    }
LABEL_175:
    if (3 * v151 <= 4 * ((int)v147 - *(_DWORD *)(a1 + 544)))
    {
      if (v151 >= 0x40) {
        v151 *= 2;
      }
      else {
        unsigned int v151 = 128;
      }
    }
    else if (v151 - v147 >= v151 >> 3)
    {
      goto LABEL_177;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v151);
    unsigned int v151 = *(_DWORD *)(a1 + 536);
    uint64_t v146 = *(void *)(a1 + 528);
LABEL_177:
    unsigned int v152 = v151 - 1;
    unsigned int v153 = (v151 - 1) & ((v145 >> 4) ^ (v145 >> 9));
    uint64_t v154 = (llvm::Value **)(v146 + 8 * v153);
    char v155 = *v154;
    if (*v154 == (llvm::Value *)-1)
    {
      uint64_t v156 = 0;
LABEL_189:
      if (v156) {
        long long v160 = v156;
      }
      else {
        long long v160 = v154;
      }
      if (*v160 != v145)
      {
        if (*v160 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        void *v160 = v145;
      }
    }
    else
    {
      uint64_t v156 = 0;
      int v157 = 1;
      while (v155 != v145)
      {
        if (v156) {
          BOOL v158 = 0;
        }
        else {
          BOOL v158 = v155 == (llvm::Value *)-2;
        }
        if (v158) {
          uint64_t v156 = v154;
        }
        unsigned int v159 = v153 + v157++;
        unsigned int v153 = v159 & v152;
        uint64_t v154 = (llvm::Value **)(v146 + 8 * (v159 & v152));
        char v155 = *v154;
        if (*v154 == (llvm::Value *)-1) {
          goto LABEL_189;
        }
      }
    }
    goto LABEL_196;
  }
  long long v148 = 0;
  uint64_t v149 = 8 * v147;
  long long v150 = *(llvm::Value ***)(a1 + 528);
  while (*v150 != v144)
  {
    if (*v150 == (llvm::Value *)-2) {
      long long v148 = v150;
    }
    ++v150;
    v149 -= 8;
    if (!v149)
    {
      if (!v148) {
        goto LABEL_172;
      }
      *long long v148 = v144;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_196:
  uint64_t v161 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 336));
  long long v162 = v161;
  uint64_t v163 = *(void *)(a1 + 528);
  uint64_t v164 = *(unsigned int *)(a1 + 540);
  if (v163 != *(void *)(a1 + 520))
  {
    unsigned int v168 = *v92;
    goto LABEL_207;
  }
  if (!v164)
  {
LABEL_204:
    unsigned int v168 = *v92;
    if (v164 < *v92)
    {
      *unsigned int v77 = v164 + 1;
      *(void *)(v163 + 8 * v164) = v161;
      goto LABEL_228;
    }
LABEL_207:
    if (3 * v168 <= 4 * ((int)v164 - *(_DWORD *)(a1 + 544)))
    {
      if (v168 >= 0x40) {
        v168 *= 2;
      }
      else {
        unsigned int v168 = 128;
      }
    }
    else if (v168 - v164 >= v168 >> 3)
    {
      goto LABEL_209;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v168);
    unsigned int v168 = *(_DWORD *)(a1 + 536);
    uint64_t v163 = *(void *)(a1 + 528);
LABEL_209:
    unsigned int v169 = v168 - 1;
    unsigned int v170 = (v168 - 1) & ((v162 >> 4) ^ (v162 >> 9));
    uint64_t v171 = (llvm::Value **)(v163 + 8 * v170);
    uint64_t v172 = *v171;
    if (*v171 == (llvm::Value *)-1)
    {
      unint64_t v173 = 0;
LABEL_221:
      if (v173) {
        int v177 = v173;
      }
      else {
        int v177 = v171;
      }
      if (*v177 != v162)
      {
        if (*v177 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *int v177 = v162;
      }
    }
    else
    {
      unint64_t v173 = 0;
      int v174 = 1;
      while (v172 != v162)
      {
        if (v173) {
          BOOL v175 = 0;
        }
        else {
          BOOL v175 = v172 == (llvm::Value *)-2;
        }
        if (v175) {
          unint64_t v173 = v171;
        }
        unsigned int v176 = v170 + v174++;
        unsigned int v170 = v176 & v169;
        uint64_t v171 = (llvm::Value **)(v163 + 8 * (v176 & v169));
        uint64_t v172 = *v171;
        if (*v171 == (llvm::Value *)-1) {
          goto LABEL_221;
        }
      }
    }
    goto LABEL_228;
  }
  int v165 = 0;
  uint64_t v166 = 8 * v164;
  uint64_t v167 = *(llvm::Value ***)(a1 + 528);
  while (*v167 != v161)
  {
    if (*v167 == (llvm::Value *)-2) {
      int v165 = v167;
    }
    ++v167;
    v166 -= 8;
    if (!v166)
    {
      if (!v165) {
        goto LABEL_204;
      }
      void *v165 = v161;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_228:
  uint64_t v178 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 352));
  int v179 = v178;
  uint64_t v180 = *(void *)(a1 + 528);
  uint64_t v181 = *(unsigned int *)(a1 + 540);
  if (v180 != *(void *)(a1 + 520))
  {
    unsigned int v185 = *v92;
    goto LABEL_239;
  }
  if (!v181)
  {
LABEL_236:
    unsigned int v185 = *v92;
    if (v181 < *v92)
    {
      *unsigned int v77 = v181 + 1;
      *(void *)(v180 + 8 * v181) = v178;
      goto LABEL_260;
    }
LABEL_239:
    if (3 * v185 <= 4 * ((int)v181 - *(_DWORD *)(a1 + 544)))
    {
      if (v185 >= 0x40) {
        v185 *= 2;
      }
      else {
        unsigned int v185 = 128;
      }
    }
    else if (v185 - v181 >= v185 >> 3)
    {
      goto LABEL_241;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v185);
    unsigned int v185 = *(_DWORD *)(a1 + 536);
    uint64_t v180 = *(void *)(a1 + 528);
LABEL_241:
    unsigned int v186 = v185 - 1;
    unsigned int v187 = (v185 - 1) & ((v179 >> 4) ^ (v179 >> 9));
    unsigned int v188 = (llvm::Value **)(v180 + 8 * v187);
    unint64_t v189 = *v188;
    if (*v188 == (llvm::Value *)-1)
    {
      unint64_t v190 = 0;
LABEL_253:
      if (v190) {
        uint8x8_t v194 = v190;
      }
      else {
        uint8x8_t v194 = v188;
      }
      if (*v194 != v179)
      {
        if (*v194 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *uint8x8_t v194 = v179;
      }
    }
    else
    {
      unint64_t v190 = 0;
      int v191 = 1;
      while (v189 != v179)
      {
        if (v190) {
          BOOL v192 = 0;
        }
        else {
          BOOL v192 = v189 == (llvm::Value *)-2;
        }
        if (v192) {
          unint64_t v190 = v188;
        }
        unsigned int v193 = v187 + v191++;
        unsigned int v187 = v193 & v186;
        unsigned int v188 = (llvm::Value **)(v180 + 8 * (v193 & v186));
        unint64_t v189 = *v188;
        if (*v188 == (llvm::Value *)-1) {
          goto LABEL_253;
        }
      }
    }
    goto LABEL_260;
  }
  uint64_t v182 = 0;
  uint64_t v183 = 8 * v181;
  BOOL v184 = *(llvm::Value ***)(a1 + 528);
  while (*v184 != v178)
  {
    if (*v184 == (llvm::Value *)-2) {
      uint64_t v182 = v184;
    }
    ++v184;
    v183 -= 8;
    if (!v183)
    {
      if (!v182) {
        goto LABEL_236;
      }
      llvm::Instruction *v182 = v178;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_260:
  unsigned int v195 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 368));
  uint64_t v196 = v195;
  uint64_t v197 = *(void *)(a1 + 528);
  uint64_t v198 = *(unsigned int *)(a1 + 540);
  if (v197 != *(void *)(a1 + 520))
  {
    unsigned int v202 = *v92;
    goto LABEL_271;
  }
  if (!v198)
  {
LABEL_268:
    unsigned int v202 = *v92;
    if (v198 < *v92)
    {
      *unsigned int v77 = v198 + 1;
      *(void *)(v197 + 8 * v198) = v195;
      goto LABEL_292;
    }
LABEL_271:
    if (3 * v202 <= 4 * ((int)v198 - *(_DWORD *)(a1 + 544)))
    {
      if (v202 >= 0x40) {
        v202 *= 2;
      }
      else {
        unsigned int v202 = 128;
      }
    }
    else if (v202 - v198 >= v202 >> 3)
    {
      goto LABEL_273;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v202);
    unsigned int v202 = *(_DWORD *)(a1 + 536);
    uint64_t v197 = *(void *)(a1 + 528);
LABEL_273:
    unsigned int v203 = v202 - 1;
    unsigned int v204 = (v202 - 1) & ((v196 >> 4) ^ (v196 >> 9));
    char v205 = (llvm::Value **)(v197 + 8 * v204);
    char v206 = *v205;
    if (*v205 == (llvm::Value *)-1)
    {
      uint64_t v207 = 0;
LABEL_285:
      if (v207) {
        int v211 = v207;
      }
      else {
        int v211 = v205;
      }
      if (*v211 != v196)
      {
        if (*v211 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *int v211 = v196;
      }
    }
    else
    {
      uint64_t v207 = 0;
      int v208 = 1;
      while (v206 != v196)
      {
        if (v207) {
          BOOL v209 = 0;
        }
        else {
          BOOL v209 = v206 == (llvm::Value *)-2;
        }
        if (v209) {
          uint64_t v207 = v205;
        }
        unsigned int v210 = v204 + v208++;
        unsigned int v204 = v210 & v203;
        char v205 = (llvm::Value **)(v197 + 8 * (v210 & v203));
        char v206 = *v205;
        if (*v205 == (llvm::Value *)-1) {
          goto LABEL_285;
        }
      }
    }
    goto LABEL_292;
  }
  uint64_t v199 = 0;
  uint64_t v200 = 8 * v198;
  uint64_t v201 = *(llvm::Value ***)(a1 + 528);
  while (*v201 != v195)
  {
    if (*v201 == (llvm::Value *)-2) {
      uint64_t v199 = v201;
    }
    ++v201;
    v200 -= 8;
    if (!v200)
    {
      if (!v199) {
        goto LABEL_268;
      }
      *uint64_t v199 = v195;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_292:
  BOOL v212 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 384));
  uint64_t v213 = v212;
  uint64_t v214 = *(void *)(a1 + 528);
  uint64_t v215 = *(unsigned int *)(a1 + 540);
  if (v214 != *(void *)(a1 + 520))
  {
    unsigned int v219 = *v92;
    goto LABEL_303;
  }
  if (!v215)
  {
LABEL_300:
    unsigned int v219 = *v92;
    if (v215 < *v92)
    {
      *unsigned int v77 = v215 + 1;
      *(void *)(v214 + 8 * v215) = v212;
      goto LABEL_324;
    }
LABEL_303:
    if (3 * v219 <= 4 * ((int)v215 - *(_DWORD *)(a1 + 544)))
    {
      if (v219 >= 0x40) {
        v219 *= 2;
      }
      else {
        unsigned int v219 = 128;
      }
    }
    else if (v219 - v215 >= v219 >> 3)
    {
      goto LABEL_305;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v219);
    unsigned int v219 = *(_DWORD *)(a1 + 536);
    uint64_t v214 = *(void *)(a1 + 528);
LABEL_305:
    unsigned int v220 = v219 - 1;
    unsigned int v221 = (v219 - 1) & ((v213 >> 4) ^ (v213 >> 9));
    uint64_t v222 = (llvm::Value **)(v214 + 8 * v221);
    int v223 = *v222;
    if (*v222 == (llvm::Value *)-1)
    {
      uint64_t v224 = 0;
LABEL_317:
      if (v224) {
        BOOL v228 = v224;
      }
      else {
        BOOL v228 = v222;
      }
      if (*v228 != v213)
      {
        if (*v228 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        std::string::size_type *v228 = v213;
      }
    }
    else
    {
      uint64_t v224 = 0;
      int v225 = 1;
      while (v223 != v213)
      {
        if (v224) {
          BOOL v226 = 0;
        }
        else {
          BOOL v226 = v223 == (llvm::Value *)-2;
        }
        if (v226) {
          uint64_t v224 = v222;
        }
        unsigned int v227 = v221 + v225++;
        unsigned int v221 = v227 & v220;
        uint64_t v222 = (llvm::Value **)(v214 + 8 * (v227 & v220));
        int v223 = *v222;
        if (*v222 == (llvm::Value *)-1) {
          goto LABEL_317;
        }
      }
    }
    goto LABEL_324;
  }
  unsigned int v216 = 0;
  uint64_t v217 = 8 * v215;
  uint64_t v218 = *(llvm::Value ***)(a1 + 528);
  while (*v218 != v212)
  {
    if (*v218 == (llvm::Value *)-2) {
      unsigned int v216 = v218;
    }
    ++v218;
    v217 -= 8;
    if (!v217)
    {
      if (!v216) {
        goto LABEL_300;
      }
      *unsigned int v216 = v212;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_324:
  int v229 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 400));
  uint64_t v230 = v229;
  uint64_t v231 = *(void *)(a1 + 528);
  uint64_t v232 = *(unsigned int *)(a1 + 540);
  if (v231 != *(void *)(a1 + 520))
  {
    unsigned int v236 = *v92;
    goto LABEL_335;
  }
  if (!v232)
  {
LABEL_332:
    unsigned int v236 = *v92;
    if (v232 < *v92)
    {
      *unsigned int v77 = v232 + 1;
      *(void *)(v231 + 8 * v232) = v229;
      goto LABEL_356;
    }
LABEL_335:
    if (3 * v236 <= 4 * ((int)v232 - *(_DWORD *)(a1 + 544)))
    {
      if (v236 >= 0x40) {
        v236 *= 2;
      }
      else {
        unsigned int v236 = 128;
      }
    }
    else if (v236 - v232 >= v236 >> 3)
    {
      goto LABEL_337;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v236);
    unsigned int v236 = *(_DWORD *)(a1 + 536);
    uint64_t v231 = *(void *)(a1 + 528);
LABEL_337:
    unsigned int v237 = v236 - 1;
    unsigned int v238 = (v236 - 1) & ((v230 >> 4) ^ (v230 >> 9));
    int v239 = (llvm::Value **)(v231 + 8 * v238);
    uint64_t v240 = *v239;
    if (*v239 == (llvm::Value *)-1)
    {
      uint64_t v241 = 0;
LABEL_349:
      if (v241) {
        int v245 = v241;
      }
      else {
        int v245 = v239;
      }
      if (*v245 != v230)
      {
        if (*v245 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        unsigned __int8 *v245 = v230;
      }
    }
    else
    {
      uint64_t v241 = 0;
      int v242 = 1;
      while (v240 != v230)
      {
        if (v241) {
          BOOL v243 = 0;
        }
        else {
          BOOL v243 = v240 == (llvm::Value *)-2;
        }
        if (v243) {
          uint64_t v241 = v239;
        }
        unsigned int v244 = v238 + v242++;
        unsigned int v238 = v244 & v237;
        int v239 = (llvm::Value **)(v231 + 8 * (v244 & v237));
        uint64_t v240 = *v239;
        if (*v239 == (llvm::Value *)-1) {
          goto LABEL_349;
        }
      }
    }
    goto LABEL_356;
  }
  int v233 = 0;
  uint64_t v234 = 8 * v232;
  uint64_t v235 = *(llvm::Value ***)(a1 + 528);
  while (*v235 != v229)
  {
    if (*v235 == (llvm::Value *)-2) {
      int v233 = v235;
    }
    ++v235;
    v234 -= 8;
    if (!v234)
    {
      if (!v233) {
        goto LABEL_332;
      }
      char *v233 = v229;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_356:
  uint64_t v246 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 416));
  unsigned int v247 = v246;
  uint64_t v248 = *(void *)(a1 + 528);
  uint64_t v249 = *(unsigned int *)(a1 + 540);
  if (v248 != *(void *)(a1 + 520))
  {
    unsigned int v253 = *v92;
    goto LABEL_367;
  }
  if (!v249)
  {
LABEL_364:
    unsigned int v253 = *v92;
    if (v249 < *v92)
    {
      *unsigned int v77 = v249 + 1;
      *(void *)(v248 + 8 * v249) = v246;
      goto LABEL_388;
    }
LABEL_367:
    if (3 * v253 <= 4 * ((int)v249 - *(_DWORD *)(a1 + 544)))
    {
      if (v253 >= 0x40) {
        v253 *= 2;
      }
      else {
        unsigned int v253 = 128;
      }
    }
    else if (v253 - v249 >= v253 >> 3)
    {
      goto LABEL_369;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v253);
    unsigned int v253 = *(_DWORD *)(a1 + 536);
    uint64_t v248 = *(void *)(a1 + 528);
LABEL_369:
    unsigned int v254 = v253 - 1;
    unsigned int v255 = (v253 - 1) & ((v247 >> 4) ^ (v247 >> 9));
    unsigned int v256 = (llvm::Value **)(v248 + 8 * v255);
    uint64_t v257 = *v256;
    if (*v256 == (llvm::Value *)-1)
    {
      int v258 = 0;
LABEL_381:
      if (v258) {
        int v262 = v258;
      }
      else {
        int v262 = v256;
      }
      if (*v262 != v247)
      {
        if (*v262 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *int v262 = v247;
      }
    }
    else
    {
      int v258 = 0;
      int v259 = 1;
      while (v257 != v247)
      {
        if (v258) {
          BOOL v260 = 0;
        }
        else {
          BOOL v260 = v257 == (llvm::Value *)-2;
        }
        if (v260) {
          int v258 = v256;
        }
        unsigned int v261 = v255 + v259++;
        unsigned int v255 = v261 & v254;
        unsigned int v256 = (llvm::Value **)(v248 + 8 * (v261 & v254));
        uint64_t v257 = *v256;
        if (*v256 == (llvm::Value *)-1) {
          goto LABEL_381;
        }
      }
    }
    goto LABEL_388;
  }
  int v250 = 0;
  uint64_t v251 = 8 * v249;
  int v252 = *(llvm::Value ***)(a1 + 528);
  while (*v252 != v246)
  {
    if (*v252 == (llvm::Value *)-2) {
      int v250 = v252;
    }
    ++v252;
    v251 -= 8;
    if (!v251)
    {
      if (!v250) {
        goto LABEL_364;
      }
      unsigned char *v250 = v246;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_388:
  unsigned int v263 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 432));
  unsigned int v264 = v263;
  uint64_t v265 = *(void *)(a1 + 528);
  uint64_t v266 = *(unsigned int *)(a1 + 540);
  if (v265 != *(void *)(a1 + 520))
  {
    unsigned int v270 = *v92;
    goto LABEL_399;
  }
  if (!v266)
  {
LABEL_396:
    unsigned int v270 = *v92;
    if (v266 < *v92)
    {
      *unsigned int v77 = v266 + 1;
      *(void *)(v265 + 8 * v266) = v263;
      goto LABEL_420;
    }
LABEL_399:
    if (3 * v270 <= 4 * ((int)v266 - *(_DWORD *)(a1 + 544)))
    {
      if (v270 >= 0x40) {
        v270 *= 2;
      }
      else {
        unsigned int v270 = 128;
      }
    }
    else if (v270 - v266 >= v270 >> 3)
    {
      goto LABEL_401;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v270);
    unsigned int v270 = *(_DWORD *)(a1 + 536);
    uint64_t v265 = *(void *)(a1 + 528);
LABEL_401:
    unsigned int v271 = v270 - 1;
    unsigned int v272 = (v270 - 1) & ((v264 >> 4) ^ (v264 >> 9));
    int v273 = (llvm::Value **)(v265 + 8 * v272);
    uint64_t v274 = *v273;
    if (*v273 == (llvm::Value *)-1)
    {
      unint64_t v275 = 0;
LABEL_413:
      if (v275) {
        uint64_t v279 = v275;
      }
      else {
        uint64_t v279 = v273;
      }
      if (*v279 != v264)
      {
        if (*v279 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        unsigned char *v279 = v264;
      }
    }
    else
    {
      unint64_t v275 = 0;
      int v276 = 1;
      while (v274 != v264)
      {
        if (v275) {
          BOOL v277 = 0;
        }
        else {
          BOOL v277 = v274 == (llvm::Value *)-2;
        }
        if (v277) {
          unint64_t v275 = v273;
        }
        unsigned int v278 = v272 + v276++;
        unsigned int v272 = v278 & v271;
        int v273 = (llvm::Value **)(v265 + 8 * (v278 & v271));
        uint64_t v274 = *v273;
        if (*v273 == (llvm::Value *)-1) {
          goto LABEL_413;
        }
      }
    }
    goto LABEL_420;
  }
  int v267 = 0;
  uint64_t v268 = 8 * v266;
  unsigned int v269 = *(llvm::Value ***)(a1 + 528);
  while (*v269 != v263)
  {
    if (*v269 == (llvm::Value *)-2) {
      int v267 = v269;
    }
    ++v269;
    v268 -= 8;
    if (!v268)
    {
      if (!v267) {
        goto LABEL_396;
      }
      *int v267 = v263;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_420:
  int v280 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 448));
  int v281 = v280;
  uint64_t v282 = *(void *)(a1 + 528);
  uint64_t v283 = *(unsigned int *)(a1 + 540);
  if (v282 != *(void *)(a1 + 520))
  {
    unsigned int v287 = *v92;
    goto LABEL_431;
  }
  if (!v283)
  {
LABEL_428:
    unsigned int v287 = *v92;
    if (v283 < *v92)
    {
      *unsigned int v77 = v283 + 1;
      *(void *)(v282 + 8 * v283) = v280;
      goto LABEL_452;
    }
LABEL_431:
    if (3 * v287 <= 4 * ((int)v283 - *(_DWORD *)(a1 + 544)))
    {
      if (v287 >= 0x40) {
        v287 *= 2;
      }
      else {
        unsigned int v287 = 128;
      }
    }
    else if (v287 - v283 >= v287 >> 3)
    {
      goto LABEL_433;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v287);
    unsigned int v287 = *(_DWORD *)(a1 + 536);
    uint64_t v282 = *(void *)(a1 + 528);
LABEL_433:
    unsigned int v288 = v287 - 1;
    unsigned int v289 = (v287 - 1) & ((v281 >> 4) ^ (v281 >> 9));
    __n128 v290 = (llvm::Value **)(v282 + 8 * v289);
    __int16 v291 = *v290;
    if (*v290 == (llvm::Value *)-1)
    {
      uint64_t v292 = 0;
LABEL_445:
      if (v292) {
        uint64_t v296 = v292;
      }
      else {
        uint64_t v296 = v290;
      }
      if (*v296 != v281)
      {
        if (*v296 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        llvm::Instruction *v296 = v281;
      }
    }
    else
    {
      uint64_t v292 = 0;
      int v293 = 1;
      while (v291 != v281)
      {
        if (v292) {
          BOOL v294 = 0;
        }
        else {
          BOOL v294 = v291 == (llvm::Value *)-2;
        }
        if (v294) {
          uint64_t v292 = v290;
        }
        unsigned int v295 = v289 + v293++;
        unsigned int v289 = v295 & v288;
        __n128 v290 = (llvm::Value **)(v282 + 8 * (v295 & v288));
        __int16 v291 = *v290;
        if (*v290 == (llvm::Value *)-1) {
          goto LABEL_445;
        }
      }
    }
    goto LABEL_452;
  }
  uint64_t v284 = 0;
  uint64_t v285 = 8 * v283;
  uint64_t v286 = *(llvm::Value ***)(a1 + 528);
  while (*v286 != v280)
  {
    if (*v286 == (llvm::Value *)-2) {
      uint64_t v284 = v286;
    }
    ++v286;
    v285 -= 8;
    if (!v285)
    {
      if (!v284) {
        goto LABEL_428;
      }
      *uint64_t v284 = v280;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_452:
  unint64_t v297 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 464));
  uint64_t v298 = v297;
  uint64_t v299 = *(void *)(a1 + 528);
  uint64_t v300 = *(unsigned int *)(a1 + 540);
  if (v299 != *(void *)(a1 + 520))
  {
    unsigned int v304 = *v92;
    goto LABEL_463;
  }
  if (!v300)
  {
LABEL_460:
    unsigned int v304 = *v92;
    if (v300 < *v92)
    {
      *unsigned int v77 = v300 + 1;
      *(void *)(v299 + 8 * v300) = v297;
      goto LABEL_484;
    }
LABEL_463:
    if (3 * v304 <= 4 * ((int)v300 - *(_DWORD *)(a1 + 544)))
    {
      if (v304 >= 0x40) {
        v304 *= 2;
      }
      else {
        unsigned int v304 = 128;
      }
    }
    else if (v304 - v300 >= v304 >> 3)
    {
      goto LABEL_465;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v304);
    unsigned int v304 = *(_DWORD *)(a1 + 536);
    uint64_t v299 = *(void *)(a1 + 528);
LABEL_465:
    unsigned int v305 = v304 - 1;
    unsigned int v306 = (v304 - 1) & ((v298 >> 4) ^ (v298 >> 9));
    int v307 = (llvm::Value **)(v299 + 8 * v306);
    unsigned int v308 = *v307;
    if (*v307 == (llvm::Value *)-1)
    {
      unsigned int v309 = 0;
LABEL_477:
      if (v309) {
        int v313 = v309;
      }
      else {
        int v313 = v307;
      }
      if (*v313 != v298)
      {
        if (*v313 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        llvm::Constant *v313 = v298;
      }
    }
    else
    {
      unsigned int v309 = 0;
      int v310 = 1;
      while (v308 != v298)
      {
        if (v309) {
          BOOL v311 = 0;
        }
        else {
          BOOL v311 = v308 == (llvm::Value *)-2;
        }
        if (v311) {
          unsigned int v309 = v307;
        }
        unsigned int v312 = v306 + v310++;
        unsigned int v306 = v312 & v305;
        int v307 = (llvm::Value **)(v299 + 8 * (v312 & v305));
        unsigned int v308 = *v307;
        if (*v307 == (llvm::Value *)-1) {
          goto LABEL_477;
        }
      }
    }
    goto LABEL_484;
  }
  uint64_t v301 = 0;
  uint64_t v302 = 8 * v300;
  uint64_t v303 = *(llvm::Value ***)(a1 + 528);
  while (*v303 != v297)
  {
    if (*v303 == (llvm::Value *)-2) {
      uint64_t v301 = v303;
    }
    ++v303;
    v302 -= 8;
    if (!v302)
    {
      if (!v301) {
        goto LABEL_460;
      }
      uint64_t *v301 = v297;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_484:
  BOOL v314 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 480));
  uint64_t v315 = v314;
  uint64_t v316 = *(void *)(a1 + 528);
  uint64_t v317 = *(unsigned int *)(a1 + 540);
  if (v316 != *(void *)(a1 + 520))
  {
    unsigned int v321 = *v92;
    goto LABEL_495;
  }
  if (!v317)
  {
LABEL_492:
    unsigned int v321 = *v92;
    if (v317 < *v92)
    {
      *unsigned int v77 = v317 + 1;
      *(void *)(v316 + 8 * v317) = v314;
      goto LABEL_516;
    }
LABEL_495:
    if (3 * v321 <= 4 * ((int)v317 - *(_DWORD *)(a1 + 544)))
    {
      if (v321 >= 0x40) {
        v321 *= 2;
      }
      else {
        unsigned int v321 = 128;
      }
    }
    else if (v321 - v317 >= v321 >> 3)
    {
      goto LABEL_497;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v321);
    unsigned int v321 = *(_DWORD *)(a1 + 536);
    uint64_t v316 = *(void *)(a1 + 528);
LABEL_497:
    unsigned int v322 = v321 - 1;
    unsigned int v323 = (v321 - 1) & ((v315 >> 4) ^ (v315 >> 9));
    uint64_t v324 = (llvm::Value **)(v316 + 8 * v323);
    uint64_t v325 = *v324;
    if (*v324 == (llvm::Value *)-1)
    {
      uint64_t v326 = 0;
LABEL_509:
      if (v326) {
        unint64_t v330 = v326;
      }
      else {
        unint64_t v330 = v324;
      }
      if (*v330 != v315)
      {
        if (*v330 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        llvm::Instruction *v330 = v315;
      }
    }
    else
    {
      uint64_t v326 = 0;
      int v327 = 1;
      while (v325 != v315)
      {
        if (v326) {
          BOOL v328 = 0;
        }
        else {
          BOOL v328 = v325 == (llvm::Value *)-2;
        }
        if (v328) {
          uint64_t v326 = v324;
        }
        unsigned int v329 = v323 + v327++;
        unsigned int v323 = v329 & v322;
        uint64_t v324 = (llvm::Value **)(v316 + 8 * (v329 & v322));
        uint64_t v325 = *v324;
        if (*v324 == (llvm::Value *)-1) {
          goto LABEL_509;
        }
      }
    }
    goto LABEL_516;
  }
  BOOL v318 = 0;
  uint64_t v319 = 8 * v317;
  BOOL v320 = *(llvm::Value ***)(a1 + 528);
  while (*v320 != v314)
  {
    if (*v320 == (llvm::Value *)-2) {
      BOOL v318 = v320;
    }
    ++v320;
    v319 -= 8;
    if (!v319)
    {
      if (!v318) {
        goto LABEL_492;
      }
      int8x8_t *v318 = v314;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_516:
  int v331 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 496));
  int v332 = v331;
  uint64_t v333 = *(void *)(a1 + 528);
  uint64_t v334 = *(unsigned int *)(a1 + 540);
  if (v333 != *(void *)(a1 + 520))
  {
    unsigned int v338 = *v92;
    goto LABEL_527;
  }
  if (!v334)
  {
LABEL_524:
    unsigned int v338 = *v92;
    if (v334 < *v92)
    {
      *unsigned int v77 = v334 + 1;
      *(void *)(v333 + 8 * v334) = v331;
      goto LABEL_548;
    }
LABEL_527:
    if (3 * v338 <= 4 * ((int)v334 - *(_DWORD *)(a1 + 544)))
    {
      if (v338 >= 0x40) {
        v338 *= 2;
      }
      else {
        unsigned int v338 = 128;
      }
    }
    else if (v338 - v334 >= v338 >> 3)
    {
      goto LABEL_529;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v338);
    unsigned int v338 = *(_DWORD *)(a1 + 536);
    uint64_t v333 = *(void *)(a1 + 528);
LABEL_529:
    unsigned int v339 = v338 - 1;
    unsigned int v340 = (v338 - 1) & ((v332 >> 4) ^ (v332 >> 9));
    unint64_t v341 = (llvm::Value **)(v333 + 8 * v340);
    unsigned int v342 = *v341;
    if (*v341 == (llvm::Value *)-1)
    {
      unsigned int v343 = 0;
LABEL_541:
      if (v343) {
        uint64_t v347 = v343;
      }
      else {
        uint64_t v347 = v341;
      }
      if (*v347 != v332)
      {
        if (*v347 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *uint64_t v347 = v332;
      }
    }
    else
    {
      unsigned int v343 = 0;
      int v344 = 1;
      while (v342 != v332)
      {
        if (v343) {
          BOOL v345 = 0;
        }
        else {
          BOOL v345 = v342 == (llvm::Value *)-2;
        }
        if (v345) {
          unsigned int v343 = v341;
        }
        unsigned int v346 = v340 + v344++;
        unsigned int v340 = v346 & v339;
        unint64_t v341 = (llvm::Value **)(v333 + 8 * (v346 & v339));
        unsigned int v342 = *v341;
        if (*v341 == (llvm::Value *)-1) {
          goto LABEL_541;
        }
      }
    }
    goto LABEL_548;
  }
  uint64_t v335 = 0;
  uint64_t v336 = 8 * v334;
  long long v337 = *(llvm::Value ***)(a1 + 528);
  while (*v337 != v331)
  {
    if (*v337 == (llvm::Value *)-2) {
      uint64_t v335 = v337;
    }
    ++v337;
    v336 -= 8;
    if (!v336)
    {
      if (!v335) {
        goto LABEL_524;
      }
      *uint64_t v335 = v331;
      --*(_DWORD *)(a1 + 544);
      break;
    }
  }
LABEL_548:
  int v348 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 512));
  uint64_t v353 = v348;
  uint64_t v354 = *(void *)(a1 + 528);
  uint64_t v355 = *(unsigned int *)(a1 + 540);
  if (v354 != *(void *)(a1 + 520))
  {
    unsigned int v359 = *v92;
    goto LABEL_559;
  }
  if (v355)
  {
    uint64_t v356 = 0;
    uint64_t v357 = 8 * v355;
    std::string::size_type v358 = *(llvm::Value ***)(a1 + 528);
    while (*v358 != v348)
    {
      if (*v358 == (llvm::Value *)-2) {
        uint64_t v356 = v358;
      }
      ++v358;
      v357 -= 8;
      if (!v357)
      {
        if (!v356) {
          goto LABEL_556;
        }
        *uint64_t v356 = v348;
        --*(_DWORD *)(a1 + 544);
        goto LABEL_580;
      }
    }
    goto LABEL_580;
  }
LABEL_556:
  unsigned int v359 = *v92;
  if (v355 >= *v92)
  {
LABEL_559:
    if (3 * v359 <= 4 * ((int)v355 - *(_DWORD *)(a1 + 544)))
    {
      if (v359 >= 0x40) {
        v359 *= 2;
      }
      else {
        unsigned int v359 = 128;
      }
    }
    else if (v359 - v355 >= v359 >> 3)
    {
      goto LABEL_561;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v359);
    unsigned int v359 = *(_DWORD *)(a1 + 536);
    uint64_t v354 = *(void *)(a1 + 528);
LABEL_561:
    unsigned int v360 = v359 - 1;
    unsigned int v361 = (v359 - 1) & ((v353 >> 4) ^ (v353 >> 9));
    uint64_t v362 = (llvm::Value **)(v354 + 8 * v361);
    BOOL v363 = *v362;
    if (*v362 == (llvm::Value *)-1)
    {
      uint64_t v364 = 0;
LABEL_573:
      if (v364) {
        BOOL v368 = v364;
      }
      else {
        BOOL v368 = v362;
      }
      if (*v368 != v353)
      {
        if (*v368 == (llvm::Value *)-2) {
          --*(_DWORD *)(a1 + 544);
        }
        else {
          ++*v77;
        }
        *BOOL v368 = v353;
      }
    }
    else
    {
      uint64_t v364 = 0;
      int v365 = 1;
      while (v363 != v353)
      {
        if (v364) {
          BOOL v366 = 0;
        }
        else {
          BOOL v366 = v363 == (llvm::Value *)-2;
        }
        if (v366) {
          uint64_t v364 = v362;
        }
        unsigned int v367 = v361 + v365++;
        unsigned int v361 = v367 & v360;
        uint64_t v362 = (llvm::Value **)(v354 + 8 * (v367 & v360));
        BOOL v363 = *v362;
        if (*v362 == (llvm::Value *)-1) {
          goto LABEL_573;
        }
      }
    }
    goto LABEL_580;
  }
  *unsigned int v77 = v355 + 1;
  *(void *)(v354 + 8 * v355) = v348;
LABEL_580:
  unsigned int v745 = v749;
  int v746 = v749;
  uint64_t v747 = 2;
  int v748 = 0;
  uint64_t v740 = v744;
  int v741 = v744;
  uint64_t v742 = 2;
  int v743 = 0;
  uint64_t v735 = (char *)&v739;
  uint64_t v736 = (char *)&v739;
  uint64_t v737 = 1;
  int v738 = 0;
  int v728 = a2;
  uint64_t v729 = a2 + 3;
  uint64_t v369 = (void *)a2[4];
  if (v369 != v37)
  {
    uint64_t v370 = 0;
    uint64_t v371 = 0;
    int v372 = 0;
    while (1)
    {
      if (v369) {
        unint64_t v373 = v369 - 7;
      }
      else {
        unint64_t v373 = 0;
      }
      if ((*((unsigned char *)v373 + 33) & 0x20) != 0) {
        goto LABEL_608;
      }
      uint64_t v374 = *(void *)(a1 + 528);
      uint64_t v375 = *(void *)(a1 + 520);
      if (v374 == v375)
      {
        uint64_t v376 = *v77;
        int v377 = (void *)(v374 + 8 * v376);
        if (v376)
        {
          uint64_t v378 = 0;
          uint64_t v379 = 8 * v376;
          while (*(void **)(v374 + v378) != v373)
          {
            v378 += 8;
            if (v379 == v378) {
              goto LABEL_604;
            }
          }
          int v377 = (void *)(v374 + v378);
        }
LABEL_604:
        uint64_t v375 = *(void *)(a1 + 528);
      }
      else
      {
        uint64_t v380 = *(unsigned int *)(a1 + 536);
        int v381 = v380 - 1;
        unsigned int v382 = (v380 - 1) & ((v373 >> 4) ^ (v373 >> 9));
        int v377 = (void *)(v374 + 8 * v382);
        __int32 v383 = (void *)*v377;
        if (*v377 == -1)
        {
          uint64_t v384 = 0;
LABEL_623:
          if (v384) {
            int v377 = v384;
          }
          if ((void *)*v377 != v373) {
            int v377 = (void *)(v374 + 8 * v380);
          }
        }
        else
        {
          uint64_t v384 = 0;
          int v385 = 1;
          while (v383 != v373)
          {
            if (v384) {
              BOOL v386 = 0;
            }
            else {
              BOOL v386 = v383 == (void *)-2;
            }
            if (v386) {
              uint64_t v384 = v377;
            }
            unsigned int v387 = v382 + v385++;
            unsigned int v382 = v387 & v381;
            int v377 = (void *)(v374 + 8 * (v387 & v381));
            __int32 v383 = (void *)*v377;
            if (*v377 == -1) {
              goto LABEL_623;
            }
          }
        }
      }
      BOOL v42 = v374 == v375;
      uint64_t v388 = (unsigned int *)(a1 + 536);
      if (v42) {
        uint64_t v388 = v77;
      }
      if (v377 == (void *)(v374 + 8 * *v388))
      {
        if (v371 >= (uint64_t ****)v370)
        {
          uint64_t v390 = v77;
          uint64_t v391 = v371 - v372;
          unint64_t v392 = v391 + 1;
          if ((unint64_t)(v391 + 1) >> 61) {
            goto LABEL_1400;
          }
          if ((v370 - (char *)v372) >> 2 > v392) {
            unint64_t v392 = (v370 - (char *)v372) >> 2;
          }
          if ((unint64_t)(v370 - (char *)v372) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v393 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v393 = v392;
          }
          if (v393)
          {
            if (v393 >> 61) {
              sub_1CB833614();
            }
            uint64_t v394 = (char *)operator new(8 * v393);
          }
          else
          {
            uint64_t v394 = 0;
          }
          uint64_t v395 = (uint64_t ****)&v394[8 * v391];
          llvm::Instruction *v395 = (uint64_t ***)v373;
          uint64_t v389 = v395 + 1;
          if (v371 == v372)
          {
            int v372 = (uint64_t ****)&v394[8 * v391];
            unsigned int v77 = v390;
          }
          else
          {
            unsigned int v77 = v390;
            do
            {
              uint64_t v396 = *--v371;
              *--uint64_t v395 = v396;
            }
            while (v371 != v372);
            uint64_t v371 = v372;
            int v372 = v395;
          }
          uint64_t v370 = &v394[8 * v393];
          if (v371)
          {
            BOOL v397 = v371;
            BOOL v398 = v370;
            uint64_t v399 = v77;
            int v400 = v389;
            operator delete(v397);
            uint64_t v389 = v400;
            unsigned int v77 = v399;
            uint64_t v370 = v398;
          }
          unsigned int v37 = v729;
        }
        else
        {
          void *v371 = (uint64_t ***)v373;
          uint64_t v389 = v371 + 1;
        }
        if ((*((_WORD *)v373 + 9) & 8) != 0)
        {
          unint64_t v731 = v370;
          char v401 = v77;
          int v402 = *((_DWORD *)v373 + 5);
          char v403 = v389;
          if ((v402 & 0x40000000) != 0) {
            uint64_t v404 = (llvm::Value **)*(v373 - 1);
          }
          else {
            uint64_t v404 = (llvm::Value **)&v373[-4 * (v402 & 0x7FFFFFF)];
          }
          int v405 = llvm::Value::stripPointerCasts(*v404);
          int64_t v406 = v405;
          uint64_t v407 = v736;
          uint64_t v408 = HIDWORD(v737);
          if (v736 != v735)
          {
            unsigned int v412 = v737;
            uint64_t v389 = v403;
            unsigned int v77 = v401;
LABEL_652:
            if (3 * v412 <= 4 * (HIDWORD(v737) - v738))
            {
              if (v412 >= 0x40) {
                v412 *= 2;
              }
              else {
                unsigned int v412 = 128;
              }
            }
            else if (v412 - HIDWORD(v737) >= v412 >> 3)
            {
              goto LABEL_654;
            }
            BOOL v422 = v389;
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v735, v412);
            uint64_t v389 = v422;
            unsigned int v77 = v401;
            unsigned int v412 = v737;
            uint64_t v407 = v736;
LABEL_654:
            unsigned int v413 = v412 - 1;
            unsigned int v414 = (v412 - 1) & ((v406 >> 4) ^ (v406 >> 9));
            char v415 = &v407[8 * v414];
            int v416 = *(llvm::Value **)v415;
            if (*(void *)v415 == -1)
            {
              unsigned int v417 = 0;
              uint64_t v370 = v731;
LABEL_666:
              if (v417) {
                BOOL v421 = (llvm::Value **)v417;
              }
              else {
                BOOL v421 = (llvm::Value **)v415;
              }
              if (*v421 != v406)
              {
                if (*v421 == (llvm::Value *)-2) {
                  --v738;
                }
                else {
                  ++HIDWORD(v737);
                }
                *BOOL v421 = v406;
              }
            }
            else
            {
              unsigned int v417 = 0;
              int v418 = 1;
              uint64_t v370 = v731;
              while (v416 != v406)
              {
                if (v417) {
                  BOOL v419 = 0;
                }
                else {
                  BOOL v419 = v416 == (llvm::Value *)-2;
                }
                if (v419) {
                  unsigned int v417 = v415;
                }
                unsigned int v420 = v414 + v418++;
                unsigned int v414 = v420 & v413;
                char v415 = &v407[8 * (v420 & v413)];
                int v416 = *(llvm::Value **)v415;
                if (*(void *)v415 == -1) {
                  goto LABEL_666;
                }
              }
            }
            goto LABEL_609;
          }
          uint64_t v389 = v403;
          unsigned int v77 = v401;
          if (HIDWORD(v737))
          {
            uint64_t v409 = 0;
            uint64_t v410 = 8 * HIDWORD(v737);
            uint64_t v411 = (llvm::Value **)v736;
            while (*v411 != v405)
            {
              if (*v411 == (llvm::Value *)-2) {
                uint64_t v409 = v411;
              }
              ++v411;
              v410 -= 8;
              if (!v410)
              {
                if (!v409) {
                  goto LABEL_648;
                }
                *uint64_t v409 = v405;
                --v738;
                break;
              }
            }
          }
          else
          {
LABEL_648:
            unsigned int v412 = v737;
            if (HIDWORD(v737) >= v737) {
              goto LABEL_652;
            }
            ++HIDWORD(v737);
            *(void *)&v736[8 * v408] = v405;
          }
          uint64_t v370 = v731;
        }
      }
      else
      {
LABEL_608:
        uint64_t v389 = v371;
      }
LABEL_609:
      uint64_t v369 = (void *)v369[1];
      uint64_t v371 = v389;
      if (v369 == v37) {
        goto LABEL_680;
      }
    }
  }
  int v372 = 0;
  uint64_t v389 = 0;
LABEL_680:
  if (byte_1EBCE7BC8)
  {
    if (v736 == v735) {
      unint64_t v423 = (uint64_t *)((char *)&v737 + 4);
    }
    else {
      unint64_t v423 = &v737;
    }
    uint64_t v424 = *(unsigned int *)v423;
    char v425 = v728;
    if (v424)
    {
      uint64_t v426 = 8 * v424;
      int v427 = (unint64_t *)v736;
      while (*v427 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v427;
        v426 -= 8;
        if (!v426) {
          goto LABEL_712;
        }
      }
    }
    else
    {
      int v427 = (unint64_t *)v736;
    }
    int v428 = (unint64_t *)&v736[8 * v424];
    if (v427 != v428)
    {
      uint64_t v429 = v389;
      uint64_t v430 = (uint64_t ***)*v427;
LABEL_693:
      if (sub_1CCAF76D0(v730, v430, "uninstrumented", 0xEuLL, (uint64_t)v349, v350, v351, v352))
      {
        uint64_t v389 = v429;
        uint64_t v431 = v372;
        if (v372 != v429)
        {
          while (*v431 != v430)
          {
            if (++v431 == v429)
            {
              uint64_t v431 = v429;
              break;
            }
          }
        }
        if (v431 != v429)
        {
          for (uint64_t i = v431 + 1; i != v429; ++i)
          {
            if (*i != v430) {
              *v431++ = *i;
            }
          }
        }
        if (v431 != v429) {
          uint64_t v389 = v431;
        }
        char v425 = v728;
      }
      else
      {
        uint64_t v389 = v429;
      }
      int v433 = v427 + 1;
      while (v433 != v428)
      {
        unint64_t v434 = *v433++;
        uint64_t v430 = (uint64_t ***)v434;
        if (v434 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v429 = v389;
          int v427 = v433 - 1;
          goto LABEL_693;
        }
      }
    }
  }
  else
  {
    char v425 = v728;
  }
LABEL_712:
  uint64_t v435 = v425 + 5;
  BOOL v436 = (void *)v425[6];
  if (v436 != v425 + 5)
  {
    while (1)
    {
      int v437 = v389;
      BOOL v438 = (llvm::GlobalAlias *)(v436 - 6);
      BOOL v42 = v436 == 0;
      BOOL v436 = (void *)v436[1];
      if (v42) {
        int v439 = 0;
      }
      else {
        int v439 = v438;
      }
      uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v439);
      if (AliaseeObject) {
        BOOL v441 = *(unsigned char *)(AliaseeObject + 16) == 0;
      }
      else {
        BOOL v441 = 0;
      }
      if (!v441) {
        goto LABEL_720;
      }
      uint64_t v442 = AliaseeObject;
      char v443 = (void **)*((void *)v439 + 5);
      uint64_t v446 = (unsigned __int8 *)v443[21];
      int v444 = v443 + 21;
      uint64_t v445 = v446;
      char v447 = *((unsigned char *)v444 + 23);
      if (v447 >= 0) {
        unint64_t v448 = (unsigned __int8 *)v444;
      }
      else {
        unint64_t v448 = v445;
      }
      size_t v449 = (size_t)v444[1];
      if (v447 >= 0) {
        size_t v450 = v447 & 0x7F;
      }
      else {
        size_t v450 = v449;
      }
      if (llvm::SpecialCaseList::inSectionBlame(*v730, "dataflow", 8uLL, "src", 3uLL, v448, v450, v352, "uninstrumented", 0xEuLL))
      {
LABEL_729:
        if ((sub_1CCAF76D0(v730, (uint64_t ***)v442, "uninstrumented", 0xEuLL, v451, v452, v453, v454) & 1) == 0) {
          goto LABEL_730;
        }
        goto LABEL_720;
      }
      if ((*((unsigned char *)v439 + 23) & 0x10) != 0) {
        break;
      }
      size_t v465 = 0;
      unsigned int v464 = (unsigned __int8 *)&byte_1CFBCE98E;
LABEL_740:
      unint64_t v467 = *v730;
      if (*(unsigned char *)(*((void *)v439 + 3) + 8) == 14)
      {
        int v468 = llvm::SpecialCaseList::inSectionBlame(v467, "dataflow", 8uLL, "fun", 3uLL, v464, v465, v454, "uninstrumented", 0xEuLL);
      }
      else
      {
        if (llvm::SpecialCaseList::inSectionBlame(v467, "dataflow", 8uLL, "global", 6uLL, v464, v465, v454, "uninstrumented", 0xEuLL))goto LABEL_729; {
        int v474 = (void **)*((void *)v439 + 3);
        }
        if (v474)
        {
          size_t v475 = 14;
          uint64_t v476 = "<unknown type>";
          if ((v474[1] & 0x4FF) == 0x10)
          {
            uint64_t v476 = (unsigned __int8 *)v474[3];
            if (v476)
            {
              size_t v477 = *(void *)v476;
              v476 += 16;
              size_t v475 = v477;
            }
            else
            {
              size_t v475 = 0;
            }
          }
        }
        else
        {
          size_t v475 = 14;
          uint64_t v476 = "<unknown type>";
        }
        int v468 = llvm::SpecialCaseList::inSectionBlame(*v730, "dataflow", 8uLL, "type", 4uLL, v476, v475, v454, "uninstrumented", 0xEuLL);
      }
      int v732 = v468;
      int v473 = sub_1CCAF76D0(v730, (uint64_t ***)v442, "uninstrumented", 0xEuLL, v469, v470, v471, v472);
      if (v732 || (v473 & 1) != 0)
      {
        if ((v732 != 0) != v473) {
LABEL_730:
        }
          sub_1CCAEFD54(a1, (const llvm::Function *)v442, "", 0, *((_DWORD *)v439 + 8) & 0xF, *(llvm::PointerType **)(v442 + 24));
      }
      else
      {
        sub_1CCAEF720((uint64_t ***)v439);
      }
LABEL_720:
      uint64_t v389 = v437;
      if (v436 == v435) {
        goto LABEL_756;
      }
    }
    uint64_t v455 = ***(void ***)v439;
    uint64_t v456 = *(void *)(v455 + 152);
    uint64_t v457 = *(unsigned int *)(v455 + 168);
    if (v457)
    {
      LODWORD(v458) = (v457 - 1) & ((v439 >> 4) ^ (v439 >> 9));
      int v459 = (llvm::GlobalAlias **)(v456 + 16 * v458);
      unint64_t v460 = *v459;
      if (*v459 == v439)
      {
LABEL_739:
        uint64_t v463 = v459[1];
        size_t v466 = *(void *)v463;
        unsigned int v464 = (unsigned __int8 *)v463 + 16;
        size_t v465 = v466;
        goto LABEL_740;
      }
      int v461 = 1;
      while (v460 != (llvm::GlobalAlias *)-4096)
      {
        int v462 = v458 + v461++;
        uint64_t v458 = v462 & (v457 - 1);
        unint64_t v460 = *(llvm::GlobalAlias **)(v456 + 16 * v458);
        if (v460 == v439)
        {
          int v459 = (llvm::GlobalAlias **)(v456 + 16 * v458);
          goto LABEL_739;
        }
      }
    }
    int v459 = (llvm::GlobalAlias **)(v456 + 16 * v457);
    goto LABEL_739;
  }
LABEL_756:
  *(void *)(a1 + 728) |= 0x300000000000uLL;
  if (v372 == v389)
  {
    uint64_t v478 = v372;
    goto LABEL_1279;
  }
  int64_t v726 = v389;
  uint64_t v478 = v372;
  do
  {
    uint64_t v733 = v389;
    int v479 = *v372;
    uint64_t v480 = (*v372)[3];
    BOOL v481 = *((_DWORD *)v480 + 3) == 1 && *((_DWORD *)v480 + 2) <= 0xFFu && *(unsigned __int8 *)(*v480[2] + 8) == 7;
    if ((sub_1CCAF76D0(v730, *v372, "uninstrumented", 0xEuLL, (uint64_t)v349, v350, v351, v352) & 1) == 0)
    {
      if (!sub_1CCAF76D0(v730, v479, "force_zero_labels", 0x11uLL, v484, v485, v486, v487))
      {
LABEL_805:
        sub_1CCAEF720(v479);
        goto LABEL_806;
      }
      unint64_t v489 = v741;
      uint64_t v490 = HIDWORD(v742);
      if (v741 == v740)
      {
        if (HIDWORD(v742))
        {
          int v491 = 0;
          uint64_t v492 = 8 * HIDWORD(v742);
          uint64_t v493 = (uint64_t ****)v741;
          while (*v493 != v479)
          {
            if (*v493 == (uint64_t ***)-2) {
              int v491 = v493;
            }
            ++v493;
            v492 -= 8;
            if (!v492)
            {
              if (!v491) {
                goto LABEL_776;
              }
              *int v491 = v479;
              --v743;
              goto LABEL_805;
            }
          }
          goto LABEL_805;
        }
LABEL_776:
        unsigned int v494 = v742;
        if (HIDWORD(v742) < v742)
        {
          ++HIDWORD(v742);
          *(void *)&v741[8 * v490] = v479;
          goto LABEL_805;
        }
      }
      else
      {
        unsigned int v494 = v742;
      }
      if (3 * v494 <= 4 * (HIDWORD(v742) - v743))
      {
        if (v494 >= 0x40) {
          v494 *= 2;
        }
        else {
          unsigned int v494 = 128;
        }
      }
      else if (v494 - HIDWORD(v742) >= v494 >> 3)
      {
        goto LABEL_781;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v740, v494);
      unsigned int v494 = v742;
      unint64_t v489 = v741;
LABEL_781:
      unsigned int v495 = v494 - 1;
      unsigned int v496 = (v494 - 1) & ((v479 >> 4) ^ (v479 >> 9));
      uint64_t v497 = &v489[8 * v496];
      uint64_t v498 = *(uint64_t ****)v497;
      if (*(void *)v497 == -1)
      {
        uint64_t v499 = 0;
LABEL_798:
        if (v499) {
          int v506 = (uint64_t ****)v499;
        }
        else {
          int v506 = (uint64_t ****)v497;
        }
        if (*v506 != v479)
        {
          if (*v506 == (uint64_t ***)-2) {
            --v743;
          }
          else {
            ++HIDWORD(v742);
          }
          const char *v506 = v479;
        }
      }
      else
      {
        uint64_t v499 = 0;
        int v500 = 1;
        while (v498 != v479)
        {
          if (v499) {
            BOOL v501 = 0;
          }
          else {
            BOOL v501 = v498 == (uint64_t ***)-2;
          }
          if (v501) {
            uint64_t v499 = v497;
          }
          unsigned int v502 = v496 + v500++;
          unsigned int v496 = v502 & v495;
          uint64_t v497 = &v489[8 * (v502 & v495)];
          uint64_t v498 = *(uint64_t ****)v497;
          if (*(void *)v497 == -1) {
            goto LABEL_798;
          }
        }
      }
      goto LABEL_805;
    }
    if (!v481 || sub_1CCAF0384(a1, v479, v482, v483, v484, v485, v486, v487) == 3)
    {
      if ((v479[4] & 0xFu) - 7 >= 2) {
        LOBYTE(v503) = 3;
      }
      else {
        int v503 = v479[4] & 0xF;
      }
      int v504 = sub_1CCAF0410();
      *((unsigned char *)&v785.__r_.__value_.__s + 23) = 5;
      v785.__r_.__value_.__s.__data_[4] = 36;
      if (v504) {
        int v505 = 1869833828;
      }
      else {
        int v505 = 2004051556;
      }
      LODWORD(v785.__r_.__value_.__l.__data_) = v505;
      v785.__r_.__value_.__s.__data_[5] = 0;
      if ((*((unsigned char *)v479 + 23) & 0x10) == 0)
      {
        size_t v518 = 0;
        BYTE7(v779) = 0;
        unint64_t p_dst = &__dst;
LABEL_826:
        *((unsigned char *)p_dst + v518) = 0;
        if ((SBYTE7(v779) & 0x80u) == 0) {
          BOOL v522 = (const std::string::value_type *)&__dst;
        }
        else {
          BOOL v522 = (const std::string::value_type *)__dst;
        }
        if ((SBYTE7(v779) & 0x80u) == 0) {
          std::string::size_type v523 = BYTE7(v779) & 0x7F;
        }
        else {
          std::string::size_type v523 = *((void *)&__dst + 1);
        }
        __int16 v524 = std::string::append(&v785, v522, v523);
        unint64_t v525 = (_DWORD *)v524->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = *(_OWORD *)&v524->__r_.__value_.__l.__data_;
        BOOL v808 = v525;
        v524->__r_.__value_.__l.__size_ = 0;
        v524->__r_.__value_.__r.__words[2] = 0;
        v524->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v808) >= 0) {
          uint64_t v526 = __p;
        }
        else {
          uint64_t v526 = (void **)__p[0];
        }
        if (SHIBYTE(v808) >= 0) {
          uint64_t v527 = (void *)(HIBYTE(v808) & 0x7F);
        }
        else {
          uint64_t v527 = __p[1];
        }
        sub_1CCAEFD54(a1, (const llvm::Function *)v479, v526, v527, v503, (llvm::PointerType *)v480);
      }
      uint64_t v507 = ***v479;
      uint64_t v508 = *(void *)(v507 + 152);
      uint64_t v509 = *(unsigned int *)(v507 + 168);
      if (v509)
      {
        LODWORD(v510) = (v509 - 1) & ((v479 >> 4) ^ (v479 >> 9));
        int v511 = (uint64_t ****)(v508 + 16 * v510);
        unsigned int v512 = *v511;
        if (*v511 != v479)
        {
          int v513 = 1;
          do
          {
            if (v512 == (uint64_t ***)-4096) {
              goto LABEL_816;
            }
            int v514 = v510 + v513++;
            uint64_t v510 = v514 & (v509 - 1);
            unsigned int v512 = *(uint64_t ****)(v508 + 16 * v510);
          }
          while (v512 != v479);
          int v511 = (uint64_t ****)(v508 + 16 * v510);
        }
      }
      else
      {
LABEL_816:
        int v511 = (uint64_t ****)(v508 + 16 * v509);
      }
      char v515 = v503;
      uint64_t v516 = (unint64_t *)v511[1];
      unint64_t v519 = *v516;
      BOOL v517 = v516 + 2;
      size_t v518 = v519;
      if (v519 < 0x7FFFFFFFFFFFFFF8)
      {
        if (v518 >= 0x17)
        {
          uint64_t v521 = (v518 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v518 | 7) != 0x17) {
            uint64_t v521 = v518 | 7;
          }
          uint64_t v725 = v521 + 1;
          unint64_t p_dst = (long long *)operator new(v521 + 1);
          *(void *)&long long v779 = v725 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
          *((void *)&__dst + 1) = v518;
        }
        else
        {
          BYTE7(v779) = v518;
          unint64_t p_dst = &__dst;
          if (!v518)
          {
LABEL_825:
            LOBYTE(v503) = v515;
            goto LABEL_826;
          }
        }
        memmove(p_dst, v517, v518);
        goto LABEL_825;
      }
LABEL_1400:
      abort();
    }
    if (*((_DWORD *)v480 + 2) >= 0x100u)
    {
      __p[0] = v479;
      sub_1CD467E2C(a1 + 704, (uint64_t *)__p)[1] = v479;
      llvm::Instruction *v372 = 0;
    }
LABEL_806:
    uint64_t v389 = v733;
    ++v372;
  }
  while (v372 != v733);
  __int16 v528 = v726;
  if (v478 == v726)
  {
LABEL_1279:
    if (v750) {
      goto LABEL_1283;
    }
    uint64_t v718 = v35 + 1;
    int v719 = v727;
    do
    {
      int v719 = (void *)v719[1];
      --v718;
    }
    while (v719 != v727);
    if (v718)
    {
LABEL_1283:
      BOOL v33 = 1;
    }
    else
    {
      uint64_t v720 = v38 + 1;
      int v721 = v729;
      do
      {
        int v721 = (void *)v721[1];
        --v720;
      }
      while (v721 != v729);
      BOOL v33 = v720 != 0;
    }
    goto LABEL_1284;
  }
  uint64_t v529 = v478;
  do
  {
    long long v530 = *v529;
    if (!*v529) {
      goto LABEL_1175;
    }
    if (*((unsigned char *)v530 + 16))
    {
      if (*((unsigned char *)v530 + 16) == 3 && (*((_DWORD *)v530 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_1175;
      }
    }
    else if (v530[9] == (uint64_t **)(v530 + 9) && (*((unsigned char *)v530 + 34) & 0x80) == 0)
    {
      goto LABEL_1175;
    }
    int v724 = v529;
    llvm::removeUnreachableBlocks((llvm *)v530, 0, 0, v488, v349);
    __int16 v531 = v745;
    if (v746 == v745)
    {
      unsigned int v532 = HIDWORD(v747);
      long long v533 = (char *)v746 + 8 * HIDWORD(v747);
      if (HIDWORD(v747))
      {
        uint64_t v534 = 0;
        while (*(uint64_t ****)((char *)v746 + v534) != v530)
        {
          v534 += 8;
          if (8 * HIDWORD(v747) == v534) {
            goto LABEL_874;
          }
        }
        long long v533 = (char *)v746 + v534;
      }
LABEL_874:
      __int16 v531 = v746;
    }
    else
    {
      int v535 = v747 - 1;
      unsigned int v536 = (v747 - 1) & ((v530 >> 4) ^ (v530 >> 9));
      long long v533 = (char *)v746 + 8 * v536;
      uint64_t v537 = *(uint64_t ****)v533;
      if (*(void *)v533 == -1)
      {
        char v538 = 0;
LABEL_1052:
        if (v538) {
          long long v533 = v538;
        }
        unsigned int v532 = HIDWORD(v747);
        if (*(uint64_t ****)v533 != v530) {
          long long v533 = (char *)v746 + 8 * v747;
        }
      }
      else
      {
        char v538 = 0;
        int v539 = 1;
        while (v537 != v530)
        {
          if (v538) {
            BOOL v540 = 0;
          }
          else {
            BOOL v540 = v537 == (uint64_t ***)-2;
          }
          if (v540) {
            char v538 = v533;
          }
          unsigned int v541 = v536 + v539++;
          unsigned int v536 = v541 & v535;
          long long v533 = (char *)v746 + 8 * (v541 & v535);
          uint64_t v537 = *(uint64_t ****)v533;
          if (*(void *)v533 == -1) {
            goto LABEL_1052;
          }
        }
        unsigned int v532 = HIDWORD(v747);
      }
    }
    unsigned int v542 = v747;
    if (v746 == v531) {
      unsigned int v542 = v532;
    }
    uint64_t v543 = v740;
    if (v741 == v740)
    {
      int v544 = HIDWORD(v742);
      uint64_t v545 = &v741[8 * HIDWORD(v742)];
      if (HIDWORD(v742))
      {
        uint64_t v546 = 0;
        while (*(uint64_t ****)&v741[v546] != v530)
        {
          v546 += 8;
          if (8 * HIDWORD(v742) == v546) {
            goto LABEL_896;
          }
        }
        uint64_t v545 = &v741[v546];
      }
LABEL_896:
      uint64_t v543 = v741;
    }
    else
    {
      int v547 = v742 - 1;
      unsigned int v548 = (v742 - 1) & ((v530 >> 4) ^ (v530 >> 9));
      uint64_t v545 = &v741[8 * v548];
      uint64_t v549 = *(uint64_t ****)v545;
      if (*(void *)v545 == -1)
      {
        int v550 = 0;
LABEL_1058:
        if (v550) {
          uint64_t v545 = v550;
        }
        int v544 = HIDWORD(v742);
        if (*(uint64_t ****)v545 != v530) {
          uint64_t v545 = &v741[8 * v742];
        }
      }
      else
      {
        int v550 = 0;
        int v551 = 1;
        while (v549 != v530)
        {
          if (v550) {
            BOOL v552 = 0;
          }
          else {
            BOOL v552 = v549 == (uint64_t ***)-2;
          }
          if (v552) {
            int v550 = v545;
          }
          unsigned int v553 = v548 + v551++;
          unsigned int v548 = v553 & v547;
          uint64_t v545 = &v741[8 * (v553 & v547)];
          uint64_t v549 = *(uint64_t ****)v545;
          if (*(void *)v545 == -1) {
            goto LABEL_1058;
          }
        }
        int v544 = HIDWORD(v742);
      }
    }
    BOOL v554 = v533 != (char *)v746 + 8 * v542;
    __p[0] = (void *)a1;
    __p[1] = v530;
    if (v741 == v543) {
      int v555 = v544;
    }
    else {
      int v555 = v742;
    }
    BOOL v808 = v810;
    uint64_t v809 = 0x100000000;
    int v816 = 0;
    v811[0] = 0;
    v811[1] = 0;
    int v812 = 0;
    uint64_t v813 = 0;
    char v815 = 0;
    BOOL v817 = v554;
    BOOL v818 = v545 != &v741[8 * v555];
    int v840 = 0;
    long long v819 = 0u;
    long long v820 = 0u;
    int v821 = 0;
    uint64_t v822 = 0;
    uint64_t v823 = 0;
    int v824 = 0;
    int v827 = 0;
    uint64_t v825 = 0;
    uint64_t v826 = 0;
    int v830 = 0;
    uint64_t v828 = 0;
    uint64_t v829 = 0;
    long long v831 = 0u;
    memset(v832, 0, 28);
    long long v833 = 0u;
    memset(v834, 0, 28);
    int v837 = 0;
    uint64_t v835 = 0;
    uint64_t v836 = 0;
    v838[0] = 0;
    v838[1] = 0;
    int v839 = 0;
    v814 = v530;
    sub_1CC5A43B0((uint64_t)&v808, 0);
    unsigned int v556 = v530[10];
    if (v556) {
      uint64_t v557 = (uint64_t)(v556 - 3);
    }
    else {
      uint64_t v557 = 0;
    }
    uint64_t v734 = v557;
    sub_1CCADB4C0(&v734, (uint64_t)&v785);
    BOOL v804 = v806;
    uint64_t v805 = 0x400000000;
    uint64_t v760 = v765;
    size_t size = (const void *)v785.__r_.__value_.__l.__size_;
    if (v785.__r_.__value_.__l.__size_ == v785.__r_.__value_.__r.__words[0])
    {
      uint64_t v761 = v765;
      uint64_t v559 = v765;
      std::string::size_type v560 = v785.__r_.__value_.__l.__size_;
    }
    else
    {
      int v706 = v785.__r_.__value_.__r.__words[2];
      uint64_t v559 = malloc_type_malloc(8 * LODWORD(v785.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
      if (!v559)
      {
        if (v706) {
          goto LABEL_1277;
        }
        uint64_t v559 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v559) {
          goto LABEL_1277;
        }
      }
      uint64_t v761 = v559;
      size_t size = (const void *)v785.__r_.__value_.__l.__size_;
      std::string::size_type v560 = v785.__r_.__value_.__r.__words[0];
    }
    unsigned int v561 = HIDWORD(v785.__r_.__value_.__r.__words[2]);
    unsigned int v762 = v785.__r_.__value_.__r.__words[2];
    if (size == (const void *)v560) {
      unsigned int v562 = HIDWORD(v785.__r_.__value_.__r.__words[2]);
    }
    else {
      unsigned int v562 = v785.__r_.__value_.__r.__words[2];
    }
    if (v562)
    {
      memmove(v559, size, 8 * v562);
      unsigned int v561 = HIDWORD(v785.__r_.__value_.__r.__words[2]);
    }
    unsigned int v763 = v561;
    unsigned int v764 = v786;
    v767 = 0;
    uint64_t v768 = 0;
    unint64_t v766 = 0;
    sub_1CBFE1720(&v766, v794, v795, (v795 - (unsigned char *)v794) >> 5);
    uint64_t v751 = v756;
    v563 = __src;
    if (__src == v797)
    {
      unint64_t v752 = v756;
      uint64_t v564 = v756;
      int v565 = __src;
    }
    else
    {
      unsigned int v707 = v799;
      uint64_t v564 = malloc_type_malloc(8 * v799, 0x4065EBACuLL);
      if (!v564)
      {
        if (v707) {
          goto LABEL_1277;
        }
        uint64_t v564 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v564) {
          goto LABEL_1277;
        }
      }
      unint64_t v752 = v564;
      int v565 = v797;
      v563 = __src;
    }
    unsigned int v566 = v800;
    unsigned int v753 = v799;
    if (v563 == v565) {
      unsigned int v567 = v800;
    }
    else {
      unsigned int v567 = v799;
    }
    if (v567)
    {
      memmove(v564, v563, 8 * v567);
      unsigned int v566 = v800;
    }
    unsigned int v754 = v566;
    unsigned int v755 = v801;
    __int32 v758 = 0;
    uint64_t v759 = 0;
    unsigned int v757 = 0;
    sub_1CBFE1720(&v757, v802, v803, (v803 - (unsigned char *)v802) >> 5);
    char v876 = v881;
    uint64_t v568 = v761;
    if (v761 == v760)
    {
      uint64_t v877 = v881;
      uint64_t v569 = v881;
      unsigned int v570 = v761;
    }
    else
    {
      unsigned int v708 = v762;
      uint64_t v569 = malloc_type_malloc(8 * v762, 0x4065EBACuLL);
      if (!v569)
      {
        if (v708) {
          goto LABEL_1277;
        }
        uint64_t v569 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v569) {
          goto LABEL_1277;
        }
      }
      uint64_t v877 = v569;
      unsigned int v570 = v760;
      uint64_t v568 = v761;
    }
    unsigned int v571 = v763;
    unsigned int v878 = v762;
    if (v568 == v570) {
      unsigned int v572 = v763;
    }
    else {
      unsigned int v572 = v762;
    }
    if (v572)
    {
      memmove(v569, v568, 8 * v572);
      unsigned int v571 = v763;
    }
    unsigned int v879 = v571;
    unsigned int v880 = v764;
    v883 = 0;
    uint64_t v884 = 0;
    unint64_t v882 = 0;
    sub_1CBFE1720(&v882, v766, v767, (v767 - (unsigned char *)v766) >> 5);
    __int16 v573 = v872;
    uint64_t v867 = v872;
    uint64_t v574 = v752;
    if (v752 == v751)
    {
      uint64_t v868 = v872;
      unint64_t v575 = v752;
    }
    else
    {
      unsigned int v709 = v753;
      __int16 v573 = malloc_type_malloc(8 * v753, 0x4065EBACuLL);
      if (!v573)
      {
        if (v709) {
          goto LABEL_1277;
        }
        __int16 v573 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v573) {
          goto LABEL_1277;
        }
      }
      uint64_t v868 = v573;
      unint64_t v575 = v751;
      uint64_t v574 = v752;
    }
    unsigned int v576 = v754;
    unsigned int v869 = v753;
    if (v574 == v575) {
      unsigned int v577 = v754;
    }
    else {
      unsigned int v577 = v753;
    }
    if (v577)
    {
      memmove(v573, v574, 8 * v577);
      unsigned int v576 = v754;
    }
    unsigned int v870 = v576;
    unsigned int v871 = v755;
    unint64_t v874 = 0;
    uint64_t v875 = 0;
    unint64_t v873 = 0;
    sub_1CBFE1720(&v873, v757, v758, (v758 - (unsigned char *)v757) >> 5);
    if (v873)
    {
      unint64_t v874 = v873;
      operator delete(v873);
    }
    if (v868 != v867) {
      free(v868);
    }
    if (v882)
    {
      v883 = v882;
      operator delete(v882);
    }
    if (v877 != v876) {
      free(v877);
    }
    uint64_t v578 = v863;
    __int16 v858 = v863;
    uint64_t v579 = v761;
    if (v761 == v760)
    {
      unint64_t v859 = v863;
      uint64_t v580 = v761;
    }
    else
    {
      unsigned int v710 = v762;
      uint64_t v578 = malloc_type_malloc(8 * v762, 0x4065EBACuLL);
      if (!v578)
      {
        if (v710) {
          goto LABEL_1277;
        }
        uint64_t v578 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v578) {
          goto LABEL_1277;
        }
      }
      unint64_t v859 = v578;
      uint64_t v580 = v760;
      uint64_t v579 = v761;
    }
    unsigned int v581 = v763;
    unsigned int v860 = v762;
    if (v579 == v580) {
      unsigned int v582 = v763;
    }
    else {
      unsigned int v582 = v762;
    }
    if (v582)
    {
      memmove(v578, v579, 8 * v582);
      unsigned int v581 = v763;
    }
    unsigned int v861 = v581;
    unsigned int v862 = v764;
    v865 = 0;
    uint64_t v866 = 0;
    unint64_t v864 = 0;
    sub_1CBFE1720(&v864, v766, v767, (v767 - (unsigned char *)v766) >> 5);
    uint64_t v583 = v854;
    v850[0] = v854;
    uint64_t v584 = v752;
    if (v752 == v751)
    {
      v850[1] = v854;
      uint64_t v585 = v752;
    }
    else
    {
      unsigned int v711 = v753;
      uint64_t v583 = malloc_type_malloc(8 * v753, 0x4065EBACuLL);
      if (!v583)
      {
        if (v711) {
          goto LABEL_1277;
        }
        uint64_t v583 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v583) {
          goto LABEL_1277;
        }
      }
      v850[1] = v583;
      uint64_t v585 = v751;
      uint64_t v584 = v752;
    }
    unsigned int v586 = v754;
    unsigned int v851 = v753;
    if (v584 == v585) {
      unsigned int v587 = v754;
    }
    else {
      unsigned int v587 = v753;
    }
    if (v587)
    {
      memmove(v583, v584, 8 * v587);
      unsigned int v586 = v754;
    }
    unsigned int v852 = v586;
    unsigned int v853 = v755;
    unint64_t v856 = 0;
    uint64_t v857 = 0;
    unsigned int v855 = 0;
    sub_1CBFE1720(&v855, v757, v758, (v758 - (unsigned char *)v757) >> 5);
    *(void *)&long long __dst = v780;
    uint64_t v588 = v859;
    if (v859 == v858)
    {
      *((void *)&__dst + 1) = v780;
      unint64_t v589 = v780;
      unint64_t v590 = v859;
    }
    else
    {
      unsigned int v712 = v860;
      unint64_t v589 = malloc_type_malloc(8 * v860, 0x4065EBACuLL);
      if (!v589)
      {
        if (v712) {
          goto LABEL_1277;
        }
        unint64_t v589 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v589) {
          goto LABEL_1277;
        }
      }
      *((void *)&__dst + 1) = v589;
      unint64_t v590 = v858;
      uint64_t v588 = v859;
    }
    unsigned int v591 = v861;
    LODWORD(v779) = v860;
    if (v588 == v590) {
      unsigned int v592 = v861;
    }
    else {
      unsigned int v592 = v860;
    }
    if (v592)
    {
      memmove(v589, v588, 8 * v592);
      unsigned int v591 = v861;
    }
    *(void *)((char *)&v779 + 4) = __PAIR64__(v862, v591);
    unsigned int v782 = 0;
    uint64_t v783 = 0;
    uint64_t v781 = 0;
    sub_1CBFE1720(&v781, v864, v865, (v865 - (unsigned char *)v864) >> 5);
    uint64_t v906 = (unsigned __int8 *)v910;
    int v593 = v850[1];
    if (v850[1] == v850[0])
    {
      uint64_t v907 = (unsigned __int8 *)v910;
      unint64_t v594 = (unsigned __int8 *)v910;
      uint64_t v595 = v850[1];
    }
    else
    {
      unsigned int v713 = v851;
      unint64_t v594 = (unsigned __int8 *)malloc_type_malloc(8 * v851, 0x4065EBACuLL);
      if (!v594)
      {
        if (v713) {
          goto LABEL_1277;
        }
        unint64_t v594 = (unsigned __int8 *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v594) {
          goto LABEL_1277;
        }
      }
      uint64_t v907 = v594;
      uint64_t v595 = v850[0];
      int v593 = v850[1];
    }
    unsigned int v596 = v852;
    LODWORD(v908) = v851;
    if (v593 == v595) {
      unsigned int v597 = v852;
    }
    else {
      unsigned int v597 = v851;
    }
    if (v597)
    {
      memmove(v594, v593, 8 * v597);
      unsigned int v596 = v852;
    }
    HIDWORD(v908) = v596;
    unsigned int v909 = v853;
    long long v912 = 0uLL;
    int64_t v911 = 0;
    sub_1CBFE1720(&v911, v855, v856, (v856 - (unsigned char *)v855) >> 5);
    for (uint64_t j = 0; ; ++j)
    {
      if (v782 - (unsigned char *)v781 != (void)v912 - (void)v911) {
        goto LABEL_982;
      }
      if (v781 == v782) {
        break;
      }
      uint64_t v599 = v911 + 16;
      uint64_t v600 = (char *)v781 + 16;
      while (1)
      {
        uint64_t v601 = v600 - 16;
        if (*((void *)v600 - 2) != *((void *)v599 - 2)) {
          break;
        }
        int v602 = v599[8];
        if (v600[8]) {
          BOOL v603 = v602 == 0;
        }
        else {
          BOOL v603 = 1;
        }
        if (v603)
        {
          if ((v600[8] == 0) == (v602 != 0)) {
            break;
          }
        }
        else if (*(_DWORD *)v600 != *(_DWORD *)v599)
        {
          break;
        }
        v599 += 32;
        v600 += 32;
        if (v601 + 32 == v782) {
          goto LABEL_983;
        }
      }
LABEL_982:
      sub_1CC0D3E0C((uint64_t)&__dst);
    }
LABEL_983:
    if (v911)
    {
      *(void *)&long long v912 = v911;
      operator delete(v911);
    }
    if (v907 != v906) {
      free(v907);
    }
    if (v781)
    {
      unsigned int v782 = (char *)v781;
      operator delete(v781);
    }
    if (*((void *)&__dst + 1) != (void)__dst) {
      free(*((void **)&__dst + 1));
    }
    if (v855)
    {
      unint64_t v856 = v855;
      operator delete(v855);
    }
    if (v850[1] != v850[0]) {
      free(v850[1]);
    }
    if (v864)
    {
      v865 = v864;
      operator delete(v864);
    }
    if (v859 != v858) {
      free(v859);
    }
    if (j + (unint64_t)v805 > HIDWORD(v805)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v604 = v846;
    uint64_t v841 = (uint64_t)v846;
    BOOL v605 = v761;
    if (v761 == v760)
    {
      uint64_t v842 = v846;
      unint64_t v606 = v761;
      goto LABEL_1003;
    }
    unsigned int v714 = v762;
    int v604 = malloc_type_malloc(8 * v762, 0x4065EBACuLL);
    if (!v604 && (v714 || (int v604 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_1277:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    uint64_t v842 = v604;
    unint64_t v606 = v760;
    BOOL v605 = v761;
LABEL_1003:
    unsigned int v607 = v763;
    unsigned int v843 = v762;
    if (v605 == v606) {
      unsigned int v608 = v763;
    }
    else {
      unsigned int v608 = v762;
    }
    if (v608)
    {
      memmove(v604, v605, 8 * v608);
      unsigned int v607 = v763;
    }
    unsigned int v844 = v607;
    unsigned int v845 = v764;
    unint64_t v848 = 0;
    uint64_t v849 = 0;
    unint64_t v847 = 0;
    sub_1CBFE1720(&v847, v766, v767, (v767 - (unsigned char *)v766) >> 5);
    v609 = v774;
    uint64_t v769 = (uint64_t *)v774;
    uint64_t v610 = v752;
    if (v752 == v751)
    {
      unint64_t v770 = v774;
      uint64_t v611 = v752;
    }
    else
    {
      unsigned int v715 = v753;
      v609 = malloc_type_malloc(8 * v753, 0x4065EBACuLL);
      if (!v609)
      {
        if (v715) {
          goto LABEL_1277;
        }
        v609 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v609) {
          goto LABEL_1277;
        }
      }
      unint64_t v770 = v609;
      uint64_t v611 = v751;
      uint64_t v610 = v752;
    }
    unsigned int v612 = v754;
    unsigned int v771 = v753;
    if (v610 == v611) {
      unsigned int v613 = v754;
    }
    else {
      unsigned int v613 = v753;
    }
    if (v613)
    {
      memmove(v609, v610, 8 * v613);
      unsigned int v612 = v754;
    }
    unsigned int v772 = v612;
    unsigned int v773 = v755;
    unint64_t v776 = 0;
    uint64_t v777 = 0;
    char v775 = 0;
    sub_1CBFE1720(&v775, v757, v758, (v758 - (unsigned char *)v757) >> 5);
    char v614 = (char *)v804;
    uint64_t v615 = v805;
    int v616 = v896;
    uint64_t v892 = v896;
    unsigned int v617 = v842;
    if (v842 == (void *)v841)
    {
      uint64_t v893 = v896;
      uint64_t v618 = v842;
    }
    else
    {
      unsigned int v716 = v843;
      int v616 = malloc_type_malloc(8 * v843, 0x4065EBACuLL);
      if (!v616)
      {
        if (v716) {
          goto LABEL_1277;
        }
        int v616 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v616) {
          goto LABEL_1277;
        }
      }
      uint64_t v893 = v616;
      uint64_t v618 = (void *)v841;
      unsigned int v617 = v842;
    }
    unsigned int v619 = v844;
    LODWORD(v894) = v843;
    if (v617 == v618) {
      unsigned int v620 = v844;
    }
    else {
      unsigned int v620 = v843;
    }
    if (v620)
    {
      memmove(v616, v617, 8 * v620);
      unsigned int v619 = v844;
    }
    HIDWORD(v894) = v619;
    unsigned int v895 = v845;
    long long v898 = 0uLL;
    int v897 = 0;
    sub_1CBFE1720(&v897, v847, v848, (v848 - (unsigned char *)v847) >> 5);
    int v621 = v889;
    uint64_t v885 = v889;
    unint64_t v622 = (uint64_t *)v770;
    if (v770 == v769)
    {
      uint64_t v886 = v889;
      uint64_t v623 = (uint64_t *)v770;
    }
    else
    {
      unsigned int v717 = v771;
      int v621 = malloc_type_malloc(8 * v771, 0x4065EBACuLL);
      if (!v621)
      {
        if (v717) {
          goto LABEL_1277;
        }
        int v621 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v621) {
          goto LABEL_1277;
        }
      }
      uint64_t v886 = v621;
      uint64_t v623 = v769;
      unint64_t v622 = (uint64_t *)v770;
    }
    unsigned int v624 = v772;
    LODWORD(v887) = v771;
    if (v622 == v623) {
      unsigned int v625 = v772;
    }
    else {
      unsigned int v625 = v771;
    }
    if (v625)
    {
      memmove(v621, v622, 8 * v625);
      unsigned int v624 = v772;
    }
    HIDWORD(v887) = v624;
    int v888 = v773;
    long long v891 = 0uLL;
    uint64_t v890 = 0;
    sub_1CBFE1720(&v890, v775, v776, (v776 - (unsigned char *)v775) >> 5);
    uint64_t v906 = (unsigned __int8 *)v910;
    if (v893 == v892)
    {
      uint64_t v907 = (unsigned __int8 *)v910;
      unsigned int v626 = HIDWORD(v894);
      if (HIDWORD(v894)) {
        memmove(v910, v893, 8 * HIDWORD(v894));
      }
    }
    else
    {
      uint64_t v907 = (unsigned __int8 *)v893;
      uint64_t v893 = v892;
      unsigned int v626 = HIDWORD(v894);
    }
    unint64_t v908 = __PAIR64__(v626, v894);
    unsigned int v909 = v895;
    uint64_t v894 = 8;
    unsigned int v895 = 0;
    int v627 = (char *)v897;
    int64_t v911 = (char *)v897;
    unint64_t v628 = (void *)v898;
    long long v912 = v898;
    long long v898 = 0uLL;
    int v897 = 0;
    v899[0] = v903;
    if (v886 == v885)
    {
      v899[1] = v903;
      int v629 = HIDWORD(v887);
      if (HIDWORD(v887))
      {
        unint64_t v723 = v628;
        memmove(v903, v886, 8 * HIDWORD(v887));
        unint64_t v628 = v723;
      }
    }
    else
    {
      v899[1] = v886;
      uint64_t v886 = v885;
      int v629 = HIDWORD(v887);
    }
    int8x8_t v630 = &v614[8 * v615];
    int v900 = v887;
    int v901 = v629;
    int v902 = v888;
    uint64_t v887 = 8;
    int v888 = 0;
    v631 = (char *)v890;
    unint64_t v904 = (char *)v890;
    uint64_t v632 = v891;
    long long v905 = v891;
    long long v891 = 0uLL;
    uint64_t v633 = v632;
    v634 = (char *)v628;
    uint64_t v890 = 0;
    while (2)
    {
      if (v634 - v627 != v633 - (void)v631)
      {
LABEL_1050:
        *(void *)int8x8_t v630 = *((void *)v634 - 4);
        v630 += 8;
        sub_1CC0D3E0C((uint64_t)&v906);
        uint64_t v633 = v905;
        v631 = v904;
        int v627 = v911;
        v634 = (char *)v912;
        continue;
      }
      break;
    }
    if (v627 != v634)
    {
      unsigned int v635 = v631 + 16;
      char v636 = v627 + 16;
      while (1)
      {
        v637 = v636 - 16;
        if (*((void *)v636 - 2) != *((void *)v635 - 2)) {
          goto LABEL_1050;
        }
        int v638 = v635[8];
        if (v636[8]) {
          BOOL v639 = v638 == 0;
        }
        else {
          BOOL v639 = 1;
        }
        if (v639)
        {
          if ((v636[8] == 0) == (v638 != 0)) {
            goto LABEL_1050;
          }
        }
        else if (*(_DWORD *)v636 != *(_DWORD *)v635)
        {
          goto LABEL_1050;
        }
        v635 += 32;
        v636 += 32;
        if (v637 + 32 == v634) {
          goto LABEL_1063;
        }
      }
    }
    v634 = v627;
LABEL_1063:
    *(void *)&long long __dst = v780;
    if (v907 == v906)
    {
      *((void *)&__dst + 1) = v780;
      unsigned int v640 = HIDWORD(v908);
      if (HIDWORD(v908)) {
        memmove(v780, v907, 8 * HIDWORD(v908));
      }
    }
    else
    {
      *((void *)&__dst + 1) = v907;
      uint64_t v907 = v906;
      unsigned int v640 = HIDWORD(v908);
    }
    *(void *)&long long v779 = __PAIR64__(v640, v908);
    DWORD2(v779) = v909;
    unint64_t v908 = 8;
    unsigned int v909 = 0;
    uint64_t v781 = v627;
    unsigned int v782 = v634;
    uint64_t v641 = *((void *)&v912 + 1);
    long long v912 = 0uLL;
    int64_t v911 = 0;
    uint64_t v783 = v641;
    uint64_t v784 = v630;
    if (v631)
    {
      *(void *)&long long v905 = v631;
      operator delete(v631);
    }
    if (v899[1] != v899[0]) {
      free(v899[1]);
    }
    if (v911)
    {
      *(void *)&long long v912 = v911;
      operator delete(v911);
    }
    if (v907 != v906) {
      free(v907);
    }
    if (v781)
    {
      unsigned int v782 = (char *)v781;
      operator delete(v781);
    }
    if (*((void *)&__dst + 1) != (void)__dst) {
      free(*((void **)&__dst + 1));
    }
    if (v890)
    {
      *(void *)&long long v891 = v890;
      operator delete(v890);
    }
    if (v886 != v885) {
      free(v886);
    }
    if (v897)
    {
      *(void *)&long long v898 = v897;
      operator delete(v897);
    }
    if (v893 != v892) {
      free(v893);
    }
    if (v775)
    {
      unint64_t v776 = v775;
      operator delete(v775);
    }
    if (v770 != v769) {
      free(v770);
    }
    if (v847)
    {
      unint64_t v848 = v847;
      operator delete(v847);
    }
    if (v842 != (void *)v841) {
      free(v842);
    }
    LODWORD(v805) = v805 + j;
    if (v757)
    {
      __int32 v758 = v757;
      operator delete(v757);
    }
    if (v752 != v751) {
      free(v752);
    }
    if (v766)
    {
      v767 = v766;
      operator delete(v766);
    }
    if (v761 != v760) {
      free(v761);
    }
    if (v802)
    {
      int v803 = v802;
      operator delete(v802);
    }
    if (__src != v797) {
      free(__src);
    }
    if (v794)
    {
      uint64_t v795 = v794;
      operator delete(v794);
    }
    if (v785.__r_.__value_.__l.__size_ != v785.__r_.__value_.__r.__words[0]) {
      free((void *)v785.__r_.__value_.__l.__size_);
    }
    if (v805)
    {
      int8x8_t v642 = (char *)v804;
      uint64_t v643 = (char *)v804 + 8 * v805;
      do
      {
        uint64_t v644 = *(void *)(*(void *)v642 + 48);
        if (v644) {
          uint64_t v645 = v644 - 24;
        }
        else {
          uint64_t v645 = 0;
        }
        do
        {
          uint64_t v646 = *(void *)(v645 + 32);
          if (v646) {
            BOOL v647 = v646 == *(void *)(v645 + 40) + 40;
          }
          else {
            BOOL v647 = 1;
          }
          if (v647) {
            uint64_t v648 = 0;
          }
          else {
            uint64_t v648 = v646 - 24;
          }
          int v649 = *(unsigned __int8 *)(v645 + 16);
          if (LODWORD(v832[3]))
          {
            unsigned int v650 = (LODWORD(v832[3]) - 1) & ((v645 >> 4) ^ (v645 >> 9));
            uint64_t v651 = *(void *)(v832[1] + 8 * v650);
            if (v645 == v651) {
              goto LABEL_1128;
            }
            int v652 = 1;
            while (v651 != -4096)
            {
              unsigned int v653 = v650 + v652++;
              unsigned int v650 = v653 & (LODWORD(v832[3]) - 1);
              uint64_t v651 = *(void *)(v832[1] + 8 * v650);
              if (v645 == v651) {
                goto LABEL_1128;
              }
            }
          }
          v785.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          sub_1CCAF0470((uint64_t **)&v785, (uint64_t **)v645);
LABEL_1128:
          uint64_t v645 = v648;
        }
        while ((v649 - 29) > 0xA);
        v642 += 8;
      }
      while (v642 != v643);
    }
    int v655 = (void *)*((void *)&v831 + 1);
    for (char k = (void *)v831; k != v655; k += 3)
    {
      uint64_t v656 = *(_DWORD *)(*k + 20) & 0x7FFFFFF;
      if (v656)
      {
        uint64_t v657 = 0;
        uint64_t v658 = 32 * v656;
        do
        {
          uint64_t v659 = *k;
          int v660 = *(_DWORD *)(*k + 20);
          if ((v660 & 0x40000000) != 0) {
            uint64_t v661 = *(void *)(v659 - 8);
          }
          else {
            uint64_t v661 = v659 - 32 * (v660 & 0x7FFFFFF);
          }
          uint64_t v662 = k[1];
          std::string::size_type v663 = sub_1CCAF68D0((uint64_t)__p, *(void *)(v661 + v657));
          int v664 = *(_DWORD *)(v662 + 20);
          if ((v664 & 0x40000000) != 0) {
            uint64_t v665 = *(void *)(v662 - 8);
          }
          else {
            uint64_t v665 = v662 - 32 * (v664 & 0x7FFFFFF);
          }
          uint64_t v666 = v665 + v657;
          if (*(void *)(v665 + v657))
          {
            **(void **)(v666 + 16) = *(void *)(v666 + 8);
            uint64_t v683 = *(void *)(v666 + 8);
            if (v683) {
              *(void *)(v683 + 16) = *(void *)(v666 + 16);
            }
          }
          *(void *)uint64_t v666 = v663;
          if (v663)
          {
            uint64_t v669 = v663[1];
            uint64_t v667 = v663 + 1;
            uint64_t v668 = v669;
            uint64_t v670 = v665 + v657;
            *(void *)(v670 + 8) = v669;
            if (v669) {
              *(void *)(v668 + 16) = v670 + 8;
            }
            *(void *)(v670 + 16) = v667;
            void *v667 = v666;
          }
          uint64_t v671 = k[2];
          if (v671)
          {
            uint64_t v672 = *k;
            int v673 = *(_DWORD *)(*k + 20);
            if ((v673 & 0x40000000) != 0) {
              uint64_t v674 = *(void *)(v672 - 8);
            }
            else {
              uint64_t v674 = v672 - 32 * (v673 & 0x7FFFFFF);
            }
            uint64_t v675 = sub_1CCAF6F18((uint64_t *)__p, *(void *)(v674 + v657));
            int v676 = *(_DWORD *)(v671 + 20);
            if ((v676 & 0x40000000) != 0) {
              uint64_t v677 = *(void *)(v671 - 8);
            }
            else {
              uint64_t v677 = v671 - 32 * (v676 & 0x7FFFFFF);
            }
            uint64_t v678 = v677 + v657;
            if (*(void *)(v677 + v657))
            {
              **(void **)(v678 + 16) = *(void *)(v678 + 8);
              uint64_t v684 = *(void *)(v678 + 8);
              if (v684) {
                *(void *)(v684 + 16) = *(void *)(v678 + 16);
              }
            }
            *(void *)uint64_t v678 = v675;
            if (v675)
            {
              uint64_t v681 = *((void *)v675 + 1);
              uint64_t v679 = (void *)((char *)v675 + 8);
              uint64_t v680 = v681;
              uint64_t v682 = v677 + v657;
              *(void *)(v682 + 8) = v681;
              if (v681) {
                *(void *)(v680 + 16) = v682 + 8;
              }
              *(void *)(v682 + 16) = v679;
              *uint64_t v679 = v678;
            }
          }
          v657 += 32;
        }
        while (v658 != v657);
      }
    }
    if (byte_1EBCE7748 && (void)v833 != *((void *)&v833 + 1))
    {
      uint64_t v685 = *(uint64_t **)v833;
      if (*(void *)v833) {
        BOOL v686 = *(unsigned __int8 *)(*(void *)v833 + 16) >= 0x1Cu;
      }
      else {
        BOOL v686 = 0;
      }
      if (v686)
      {
        uint64_t v692 = v685[4];
        uint64_t v691 = v685[5];
        goto LABEL_1188;
      }
      uint64_t v687 = *((void *)__p[1] + 10);
      if (v687) {
        uint64_t v688 = v687 - 24;
      }
      else {
        uint64_t v688 = 0;
      }
      uint64_t v689 = *(void *)(v688 + 48);
      if (v689) {
        unsigned int v690 = (const llvm::Instruction *)(v689 - 24);
      }
      else {
        unsigned int v690 = 0;
      }
      while (1)
      {
        int v695 = *((unsigned __int8 *)v690 + 16);
        if (v695 != 83 && v695 != 59) {
          break;
        }
        uint64_t v692 = *((void *)v690 + 4);
        uint64_t v691 = *((void *)v690 + 5);
LABEL_1188:
        uint64_t v693 = v691 + 40;
        if (v692) {
          BOOL v694 = v692 == v693;
        }
        else {
          BOOL v694 = 1;
        }
        if (v694) {
          unsigned int v690 = 0;
        }
        else {
          unsigned int v690 = (const llvm::Instruction *)(v692 - 24);
        }
      }
      uint64_t v696 = 0;
      uint64_t v697 = **(void **)v690;
      v785.__r_.__value_.__r.__words[0] = (std::string::size_type)&v785.__r_.__value_.__r.__words[2];
      v785.__r_.__value_.__l.__size_ = 0x200000000;
      uint64_t v790 = v697;
      unint64_t v791 = &v797;
      int8x8_t p_src = &__src;
      uint64_t v793 = 0;
      LODWORD(v794) = 0;
      WORD2(v794) = 512;
      BYTE6(v794) = 7;
      uint64_t v788 = 0;
      BOOL v789 = 0;
      uint64_t v795 = 0;
      uint64_t v796 = 0;
      int v797 = &unk_1F2616E88;
      __src = &unk_1F2617008;
      uint64_t v788 = *((void *)v690 + 5);
      BOOL v789 = (char *)v690 + 24;
      uint64_t v698 = (unsigned __int8 *)*((void *)v690 + 6);
      uint64_t v906 = v698;
      if (v698)
      {
        llvm::MetadataTracking::track((uint64_t)&v906, v698, 2);
        uint64_t v696 = (uint64_t)v906;
      }
      sub_1CB8461A4((uint64_t)&v785, 0, v696);
      if (!v906)
      {
LABEL_1200:
        unint64_t v699 = sub_1CCAF728C((uint64_t)__p, v685, v690);
        uint64_t v700 = *((void *)__p[0] + 9);
        v780[0] = 257;
        uint64_t v701 = sub_1CB845F20((uint64_t)&v785, 33, v699, v700, (uint64_t)&__dst);
        sub_1CD1290BC((uint64_t)v701, (uint64_t)v690);
      }
      int v702 = *v906;
      if ((v702 - 4) > 0x1E)
      {
        if ((v702 - 3) >= 0xFFFFFFFE) {
          unint64_t v705 = v906;
        }
        else {
          unint64_t v705 = 0;
        }
        if ((v702 - 3) < 0xFFFFFFFE)
        {
          if (v702 == 3) {
            *((void *)v906 + 1) = 0;
          }
          goto LABEL_1200;
        }
        unint64_t v704 = (unint64_t)(v705 + 8);
      }
      else
      {
        if ((v906[1] & 0x7F) != 2 && !*((_DWORD *)v906 + 3)) {
          goto LABEL_1200;
        }
        uint64_t v703 = *((void *)v906 + 2);
        if ((v703 & 4) == 0) {
          goto LABEL_1200;
        }
        unint64_t v704 = v703 & 0xFFFFFFFFFFFFFFF8;
        if (!v704) {
          goto LABEL_1200;
        }
      }
      *(void *)&long long __dst = &v906;
      sub_1CC5FA668(v704 + 16, &__dst);
      goto LABEL_1200;
    }
    if (v804 != v806) {
      free(v804);
    }
    sub_1CD555E34(v838);
    MEMORY[0x1D25D9CD0](v835, 8);
    MEMORY[0x1D25D9CD0](v834[1], 8);
    __int16 v528 = v726;
    if ((void)v833)
    {
      *((void *)&v833 + 1) = v833;
      operator delete((void *)v833);
    }
    MEMORY[0x1D25D9CD0](v832[1], 8);
    if ((void)v831)
    {
      *((void *)&v831 + 1) = v831;
      operator delete((void *)v831);
    }
    MEMORY[0x1D25D9CD0](v828, 8);
    MEMORY[0x1D25D9CD0](v825, 8);
    MEMORY[0x1D25D9CD0](v822, 8);
    MEMORY[0x1D25D9CD0](v820, 8);
    sub_1CBF8FF88(v811);
    if (v808 != v810) {
      free(v808);
    }
    uint64_t v529 = v724;
LABEL_1175:
    ++v529;
  }
  while (v529 != v528);
  BOOL v33 = 1;
LABEL_1284:
  if (v736 != v735) {
    free(v736);
  }
  if (v741 != v740) {
    free(v741);
  }
  if (v746 != v745) {
    free(v746);
  }
  if (v478) {
    operator delete(v478);
  }
  return v33;
}

uint64_t sub_1CCAEF47C(uint64_t a1)
{
  sub_1CC0D7CD8(a1 + 768);
  sub_1CC1E4850(a1 + 744, *(void **)(a1 + 752));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 704), 8);
  uint64_t v2 = *(void ***)(a1 + 696);
  *(void *)(a1 + 696) = 0;
  if (v2)
  {
    uint64_t v5 = v2;
    sub_1CD0AC7B0(&v5);
    MEMORY[0x1D25D9CE0](v2, 0x20C40960023A9);
  }
  uint64_t v3 = *(void **)(a1 + 528);
  if (v3 != *(void **)(a1 + 520)) {
    free(v3);
  }
  return a1;
}

void sub_1CCAEF50C()
{
}

void sub_1CCAEF59C(void **a1)
{
  *a1 = &unk_1F262BD58;
  uint64_t v2 = a1 + 4;
  sub_1CB8338B8(&v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

uint64_t sub_1CCAEF5F8(void **a1)
{
  *a1 = &unk_1F262BD58;
  uint64_t v3 = a1 + 4;
  sub_1CB8338B8(&v3);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  return MEMORY[0x1D25D9CE0]();
}

void sub_1CCAEF668(uint64_t a1)
{
  sub_1CCAEA070((uint64_t)v1, (uint64_t *)(a1 + 32));
}

void sub_1CCAEF720(uint64_t ***a1)
{
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
  {
    size_t v11 = 0;
    HIBYTE(v77) = 0;
    unint64_t v14 = __dst;
    goto LABEL_17;
  }
  uint64_t v2 = ***a1;
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(unsigned int *)(v2 + 168);
  if (!v4) {
    goto LABEL_8;
  }
  LODWORD(v5) = (v4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v6 = (uint64_t ****)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a1)
  {
    int v8 = 1;
    while (v7 != (uint64_t ***)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(uint64_t ****)(v3 + 16 * v5);
      if (v7 == a1)
      {
        uint64_t v6 = (uint64_t ****)(v3 + 16 * v5);
        goto LABEL_9;
      }
    }
LABEL_8:
    uint64_t v6 = (uint64_t ****)(v3 + 16 * v4);
  }
LABEL_9:
  uint64_t v10 = (unint64_t *)v6[1];
  unint64_t v13 = *v10;
  unint64_t v12 = v10 + 2;
  size_t v11 = v13;
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v14 = (const void **)operator new(v15 + 1);
    __dst[1] = (const void *)v11;
    unint64_t v77 = v16 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v77) = v11;
    unint64_t v14 = __dst;
    if (!v11) {
      goto LABEL_17;
    }
  }
  memmove(v14, v12, v11);
LABEL_17:
  *((unsigned char *)v14 + v11) = 0;
  char v75 = 6;
  strcpy((char *)&v73, ".dfsan");
  sub_1CB906918(__dst, (const void **)&v73, (uint64_t)&__p);
  __int16 v72 = 260;
  *(void *)uint64_t v71 = &__p;
  llvm::Value::setNameImpl((llvm::Value *)a1, (const char **)v71);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_132;
    }
    uint64_t v53 = ***a1;
    uint64_t v54 = *(void *)(v53 + 152);
    uint64_t v55 = *(unsigned int *)(v53 + 168);
    if (v55)
    {
      LODWORD(v56) = (v55 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v57 = (uint64_t ****)(v54 + 16 * v56);
      uint64_t v58 = *v57;
      if (*v57 == a1)
      {
LABEL_125:
        uint64_t v61 = v57[1];
        unint64_t v64 = (unint64_t)*v61;
        uint64_t v62 = v61 + 2;
        unint64_t v63 = v64;
        if (v64 >= 5 && *(_DWORD *)v62 == *(_DWORD *)"llvm." && v62[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v66 = llvm::Function::lookupIntrinsicID(v62, v63);
LABEL_133:
          *((_DWORD *)a1 + 9) = v66;
          goto LABEL_19;
        }
LABEL_132:
        int v66 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_133;
      }
      int v59 = 1;
      while (v58 != (uint64_t ***)-4096)
      {
        int v60 = v56 + v59++;
        uint64_t v56 = v60 & (v55 - 1);
        uint64_t v58 = *(uint64_t ****)(v54 + 16 * v56);
        if (v58 == a1)
        {
          uint64_t v57 = (uint64_t ****)(v54 + 16 * v56);
          goto LABEL_125;
        }
      }
    }
    uint64_t v57 = (uint64_t ****)(v54 + 16 * v55);
    goto LABEL_125;
  }
LABEL_19:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = a1[5];
  if (*((char *)v17 + 111) < 0) {
    sub_1CB8BDF7C((uint64_t)&__p, v17[11], (unint64_t)v17[12]);
  }
  else {
    std::string __p = *(std::string *)(v17 + 11);
  }
  std::operator+<char>();
  uint64_t v18 = std::string::append((std::string *)v71, ",");
  std::string v69 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if ((v71[23] & 0x80000000) != 0) {
    operator delete(*(void **)v71);
  }
  int64_t v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v21 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  uint64_t v22 = (void *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v69;
  }
  else {
    uint64_t v23 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = *((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    int64_t size = v69.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v19 = __p.__r_.__value_.__l.__size_;
    }
    if (v19 >= size)
    {
      uint64_t v25 = (char *)p_p + v19;
      int v26 = v23->__r_.__value_.__s.__data_[0];
      uint64_t v27 = p_p;
      do
      {
        int64_t v28 = v19 - size;
        if (v28 == -1) {
          break;
        }
        uint64_t v29 = (char *)memchr(v27, v26, v28 + 1);
        if (!v29) {
          break;
        }
        char v30 = v29;
        if (!memcmp(v29, v23, size))
        {
          if (v30 == v25) {
            break;
          }
          std::string::size_type v31 = v30 - (char *)p_p;
          if (v30 - (char *)p_p == -1) {
            break;
          }
          goto LABEL_58;
        }
        uint64_t v27 = (std::string *)(v30 + 1);
        int64_t v19 = v25 - (v30 + 1);
      }
      while (v19 >= size);
    }
  }
  else
  {
    std::string::size_type v31 = 0;
LABEL_58:
    std::operator+<char>();
    if (v75 >= 0) {
      size_t v32 = (const std::string::value_type *)&v73;
    }
    else {
      size_t v32 = v73;
    }
    if (v75 >= 0) {
      std::string::size_type v33 = v75 & 0x7F;
    }
    else {
      std::string::size_type v33 = v74;
    }
    long long v34 = std::string::append(&v67, v32, v33);
    std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&v68, ",");
    std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v71 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(void *)&v71[16] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v71[23] >= 0) {
      uint64_t v38 = v71;
    }
    else {
      uint64_t v38 = *(const std::string::value_type **)v71;
    }
    if (v71[23] >= 0) {
      std::string::size_type v39 = v71[23] & 0x7F;
    }
    else {
      std::string::size_type v39 = *(void *)&v71[8];
    }
    std::string::replace(&__p, v31, size, v38, v39);
    if ((v71[23] & 0x80000000) != 0) {
      operator delete(*(void **)v71);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v40 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v41 = &__p;
    }
    else {
      __int16 v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v40 < 1) {
      goto LABEL_87;
    }
    BOOL v42 = (char *)v41 + v40;
    int v43 = v41;
    while (1)
    {
      uint64_t v44 = memchr(v43, 64, v40);
      if (!v44) {
        goto LABEL_87;
      }
      if (*v44 == 64) {
        break;
      }
      int v43 = (std::string *)(v44 + 1);
      int64_t v40 = v42 - (unsigned char *)v43;
      if (v42 - (unsigned char *)v43 < 1) {
        goto LABEL_87;
      }
    }
    if (v44 == v42 || (std::string::size_type v45 = v44 - (unsigned char *)v41, v45 == -1))
    {
LABEL_87:
      sub_1CD5C0A90(&v68, (uint64_t *)&__p);
      __int16 v72 = 1283;
      *(void *)uint64_t v71 = "unsupported .symver: ";
      *(_OWORD *)&v71[16] = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
      llvm::report_fatal_error((llvm *)v71, (const llvm::Twine *)1);
    }
    if (v75 >= 0) {
      size_t v46 = v75 & 0x7F;
    }
    else {
      size_t v46 = v74;
    }
    sub_1CB907098((uint64_t)v71, v46 + 1);
    if (v71[23] >= 0) {
      int v47 = v71;
    }
    else {
      int v47 = *(unsigned char **)v71;
    }
    if (v46)
    {
      if (v75 >= 0) {
        unint64_t v48 = (void **)&v73;
      }
      else {
        unint64_t v48 = (void **)v73;
      }
      memmove(v47, v48, v46);
    }
    *(_WORD *)&v47[v46] = 64;
    if (v71[23] >= 0) {
      unint64_t v49 = v71;
    }
    else {
      unint64_t v49 = *(const std::string::value_type **)v71;
    }
    if (v71[23] >= 0) {
      std::string::size_type v50 = v71[23] & 0x7F;
    }
    else {
      std::string::size_type v50 = *(void *)&v71[8];
    }
    std::string::replace(&__p, v45, 1uLL, v49, v50);
    if ((v71[23] & 0x80000000) != 0) {
      operator delete(*(void **)v71);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v51 = &__p;
    }
    else {
      long long v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type v52 = __p.__r_.__value_.__l.__size_;
    }
    LLVMSetModuleInlineAsm2_0((uint64_t)a1[5], (const std::string::value_type *)v51, v52);
  }
  if (v21 < 0) {
    operator delete(v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75 < 0) {
    operator delete(v73);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete((void *)__dst[0]);
  }
}

void sub_1CCAEFD54(uint64_t a1, const llvm::Function *a2, void *a3, void *a4, char a5, llvm::PointerType *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v9 = (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8);
  LOWORD(v28) = 261;
  v25[0] = a3;
  v25[1] = a4;
  unint64_t v10 = *((void *)a2 + 5);
  size_t v11 = (char *)operator new(0x80uLL);
  *((_DWORD *)v11 + 7) = *((_DWORD *)v11 + 7) & 0x38000000 | 0x40000000;
  *(void *)size_t v11 = 0;
  unint64_t v12 = llvm::Function::Function((unint64_t *)v11 + 1, a6, a5, v9, (const char **)v25, v10);
  llvm::Function::copyAttributesFrom((llvm::Function *)v12, a2);
  uint64_t v13 = **((void **)a6 + 2);
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v26 = &v27;
  int v14 = *(unsigned __int8 *)(v13 + 8);
  if (v14 == 13)
  {
    unint64_t v15 = 0x80003080004C0000;
    uint64_t v16 = 13296;
  }
  else
  {
    *(_OWORD *)uint64_t v25 = xmmword_1CFAC6340;
    if (v14 == 15)
    {
      unint64_t v15 = 0x1000000000002;
      uint64_t v16 = 8;
LABEL_6:
      int v17 = v14;
      if ((v14 & 0xFE) == 0x12) {
        int v17 = *(unsigned __int8 *)(**(void **)(v13 + 16) + 8);
      }
      if (v17 != 15) {
        v25[1] = (void *)(v16 | 0x400);
      }
      if (v14 == 7) {
        v25[0] = (void *)(v15 | 0x1000000000);
      }
      uint64_t v18 = (uint64_t *)**((void **)v11 + 1);
      long long v20 = (uint64_t *)(v11 + 120);
      uint64_t v19 = *((void *)v11 + 15);
      if (v19 && *(_DWORD *)(v19 + 8) >= 2u) {
        uint64_t v21 = *(void *)(v19 + 48);
      }
      else {
        uint64_t v21 = 0;
      }
      v24[0] = v21;
      uint64_t v22 = llvm::AttributeSet::removeAttributes(v24, v18, (uint64_t)v25);
      if (v21 == v22) {
        uint64_t v23 = *v20;
      }
      else {
        uint64_t v23 = llvm::AttributeList::setAttributesAtIndex((void *)v11 + 15, v18, 0, v22);
      }
      *long long v20 = v23;
      sub_1CC1E4850((uint64_t)&v26, v27);
      v25[0] = "entry";
      LOWORD(v28) = 259;
      operator new();
    }
    unint64_t v15 = 0x80013080004C0002;
    uint64_t v16 = 13304;
  }
  v25[0] = (void *)v15;
  v25[1] = (void *)v16;
  goto LABEL_6;
}

uint64_t sub_1CCAF0384(uint64_t a1, uint64_t ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = (uint64_t ***)(a1 + 696);
  if (sub_1CCAF76D0((uint64_t ***)(a1 + 696), a2, "functional", 0xAuLL, a5, a6, a7, a8)) {
    return 2;
  }
  if (sub_1CCAF76D0(v9, a2, "discard", 7uLL, v10, v11, v12, v13)) {
    return 1;
  }
  if (sub_1CCAF76D0(v9, a2, "custom", 6uLL, v15, v16, v17, v18)) {
    return 3;
  }
  return 0;
}

uint64_t sub_1CCAF0410()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1EBCE73C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1EBCE73C0))
  {
    byte_1EBCE73BA = dword_1EBCE7B08 != 0;
    __cxa_guard_release(qword_1EBCE73C0);
  }
  return byte_1EBCE73BA;
}

void sub_1CCAF0470(uint64_t **a1, uint64_t **a2)
{
  v915[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  switch(*((unsigned char *)a2 + 16))
  {
    case 0x1E:
      if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 3) {
        return;
      }
      uint64_t v76 = *a1;
      uint64_t v77 = (uint64_t)*(a2 - 12);
LABEL_111:
      sub_1CCAF7AA4(v76, a2, v77);
      return;
    case 0x1F:
      int v21 = *((_DWORD *)a2 + 5);
      if ((v21 & 0x40000000) != 0) {
        uint64_t v22 = *(a2 - 1);
      }
      else {
        uint64_t v22 = (uint64_t *)&a2[-4 * (v21 & 0x7FFFFFF)];
      }
      uint64_t v76 = *a1;
      uint64_t v77 = *v22;
      goto LABEL_111;
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x3F:
    case 0x4F:
    case 0x50:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x5F:
      return;
    case 0x21:
    case 0x27:
      goto LABEL_52;
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4E:
    case 0x59:
    case 0x5A:
    case 0x5B:
      goto LABEL_2;
    case 0x3B:
      int v123 = a2[1];
      if (!v123) {
        goto LABEL_96;
      }
      while (1)
      {
        uint64_t v124 = v123[3];
        int v125 = *(unsigned __int8 *)(v124 + 16);
        if (v125 != 60 && (v125 != 61 || *(uint64_t ***)(v124 - 32) != a2)) {
          break;
        }
        int v123 = (uint64_t *)v123[1];
        if (!v123)
        {
LABEL_96:
          unsigned int v126 = 0;
          uint64_t v127 = **a2;
          v899 = v901;
          uint64_t v900 = 0x200000000;
          uint64_t v905 = v127;
          uint64_t v906 = &v914;
          uint64_t v907 = v915;
          uint64_t v908 = 0;
          int v909 = 0;
          __int16 v910 = 512;
          char v911 = 7;
          uint64_t v912 = 0;
          uint64_t v913 = 0;
          unsigned int v914 = &unk_1F2616E88;
          v915[0] = &unk_1F2617008;
          uint64_t v129 = a2[5];
          int v128 = a2[6];
          int v903 = v129;
          unint64_t v904 = v2 + 3;
          unsigned int v861 = v128;
          if (v128)
          {
            llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v128, 2);
            unsigned int v126 = v861;
          }
          sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v126);
          if (!v861) {
            goto LABEL_99;
          }
          int v642 = *(unsigned __int8 *)v861;
          if ((v642 - 4) > 0x1E)
          {
            if ((v642 - 3) >= 0xFFFFFFFE) {
              unsigned int v709 = v861;
            }
            else {
              unsigned int v709 = 0;
            }
            if ((v642 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v644 = (unint64_t)v709 + 8;
              goto LABEL_983;
            }
            if (v642 == 3) {
              *((void *)v861 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v861 + 1) & 0x7F) == 2 || *((_DWORD *)v861 + 3))
          {
            uint64_t v643 = *((void *)v861 + 2);
            if ((v643 & 4) != 0)
            {
              unint64_t v644 = v643 & 0xFFFFFFFFFFFFFFF8;
              if (v644)
              {
LABEL_983:
                unsigned int v878 = &v861;
                sub_1CC5FA668(v644 + 16, &v878);
              }
            }
          }
LABEL_99:
          uint64_t v130 = *(llvm::Type **)(**v3 + 48);
          LOWORD(v882) = 257;
          int v131 = sub_1CB935044((uint64_t *)&v899, v130, 0, (uint64_t)&v878);
          uint64_t v132 = (uint64_t)(*v3 + 20);
          unsigned int v861 = v2;
          sub_1CD467E2C(v132, (uint64_t *)&v861)[1] = v131;
          if (sub_1CCAF0410())
          {
            BOOL v639 = *(llvm::Type **)(**v3 + 24);
            unsigned int v878 = "_dfsa";
            LOWORD(v882) = 259;
            unsigned int v640 = sub_1CB935044((uint64_t *)&v899, v639, 0, (uint64_t)&v878);
            uint64_t v641 = (uint64_t)(*v3 + 23);
            unsigned int v861 = v2;
            sub_1CD467E2C(v641, (uint64_t *)&v861)[1] = v640;
          }
          if (v899 != v901) {
            free(v899);
          }
          break;
        }
      }
      int v133 = *v3 + 14;
      uint64_t v134 = *(void *)(**v3 + 72);
      v899 = (char *)v2;
      sub_1CC080DE0(v133, &v899)[1] = v134;
LABEL_106:
      unsigned int v135 = *v3;
      uint64_t v19 = *(llvm::Instruction **)(**v3 + 40);
      if (sub_1CCAF0410())
      {
        long long v20 = v135 + 17;
LABEL_108:
        v899 = (char *)v2;
        sub_1CC080DE0(v20, &v899)[1] = v19;
      }
      return;
    case 0x3C:
      BOOL v107 = (char *)sub_1CB83544C(*(void *)(a2[5][7] + 40) + 272, (uint64_t)*a2);
      unint64_t v109 = (unint64_t)(v107 + 7);
      if (v108 == 1) {
      if (v109 <= 7)
      }
        goto LABEL_79;
      int v185 = *((unsigned __int8 *)v2 + 16);
      if (v185 == 60 || v185 == 61)
      {
        unsigned int v186 = *((unsigned __int16 *)v2 + 9);
        if ((v186 & 0x380) == 0)
        {
LABEL_455:
          uint64_t v374 = v2;
          goto LABEL_456;
        }
      }
      else if ((v185 - 63) >= 3)
      {
        unsigned int v186 = *((unsigned __int16 *)v2 + 9);
        goto LABEL_455;
      }
      unsigned int v187 = *((unsigned __int16 *)v2 + 9);
      int v188 = (v187 >> 7) & 7;
      char v189 = 1;
      switch(v188)
      {
        case 1:
        case 2:
        case 4:
          char v189 = 0;
          int v188 = 512;
          goto LABEL_443;
        case 3:
          __break(1u);
          goto LABEL_1208;
        case 5:
        case 6:
          char v189 = 0;
          int v188 = 768;
          goto LABEL_443;
        case 7:
          char v189 = 0;
          int v188 = 896;
          goto LABEL_443;
        default:
LABEL_443:
          int v371 = v187 & 0xFC7F;
          unsigned int v186 = v188 | v371;
          *((_WORD *)v2 + 9) = v188 | v371;
          if (v185 == 60 || v185 == 61)
          {
            if (v189) {
              goto LABEL_455;
            }
          }
          else if ((v185 - 63) >= 3)
          {
            goto LABEL_455;
          }
          int v372 = v2[4];
          if (v372) {
            BOOL v373 = v372 == v2[5] + 5;
          }
          else {
            BOOL v373 = 1;
          }
          if (v373) {
            uint64_t v374 = 0;
          }
          else {
            uint64_t v374 = (uint64_t **)(v372 - 3);
          }
          break;
      }
LABEL_456:
      uint64_t v849 = 0;
      int v850 = 0;
      unint64_t v851 = 0;
      int v846 = 0;
      unint64_t v847 = 0;
      unint64_t v848 = 0;
      int v838 = (uint64_t *)v3;
      uint64_t v375 = *v3;
      uint64_t v376 = (llvm::CastInst *)*(v2 - 4);
      int v377 = sub_1CCAF0410();
      uint64_t v378 = &unk_1EBCE7000;
      if (v376)
      {
        if (*((unsigned char *)v376 + 16) == 59)
        {
          v899 = 0;
          if (sub_1CD40EA84(v375[20], *((_DWORD *)v375 + 44), (uint64_t)v376, &v899))
          {
            int v504 = v899;
            if (v899 != (char *)(v375[20] + 16 * *((unsigned int *)v375 + 44)))
            {
              uint64_t v834 = v2;
              int v505 = 0;
              uint64_t v506 = **v374;
              v899 = v901;
              uint64_t v900 = 0x200000000;
              uint64_t v905 = v506;
              uint64_t v906 = &v914;
              uint64_t v907 = v915;
              uint64_t v908 = 0;
              int v909 = 0;
              __int16 v910 = 512;
              char v911 = 7;
              int v903 = 0;
              unint64_t v904 = 0;
              uint64_t v912 = 0;
              uint64_t v913 = 0;
              unsigned int v914 = &unk_1F2616E88;
              v915[0] = &unk_1F2617008;
              int v903 = v374[5];
              unint64_t v904 = v374 + 3;
              uint64_t v507 = v374[6];
              unsigned int v861 = v507;
              if (v507)
              {
                llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v507, 2);
                int v505 = v861;
              }
              sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v505);
              if (!v861) {
                goto LABEL_654;
              }
              int v775 = *(unsigned __int8 *)v861;
              if ((v775 - 4) > 0x1E)
              {
                if ((v775 - 3) >= 0xFFFFFFFE) {
                  int v778 = v861;
                }
                else {
                  int v778 = 0;
                }
                if ((v775 - 3) < 0xFFFFFFFE)
                {
                  if (v775 == 3) {
                    *((void *)v861 + 1) = 0;
                  }
                  goto LABEL_654;
                }
                unint64_t v777 = (unint64_t)v778 + 8;
              }
              else
              {
                if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
                  goto LABEL_654;
                }
                uint64_t v776 = *((void *)v861 + 2);
                if ((v776 & 4) == 0) {
                  goto LABEL_654;
                }
                unint64_t v777 = v776 & 0xFFFFFFFFFFFFFFF8;
                if (!v777) {
                  goto LABEL_654;
                }
              }
              unsigned int v878 = &v861;
              sub_1CC5FA668(v777 + 16, &v878);
LABEL_654:
              uint64_t v508 = *(llvm::Type **)(*v375 + 48);
              uint64_t v509 = *((void *)v504 + 1);
              __int16 v864 = 257;
              char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v903[7] + 40) + 272), v508, 1);
              int v511 = operator new(0x60uLL);
              v511[13] = v511[13] & 0x38000000 | 1;
              uint64_t v386 = (uint64_t)(v511 + 8);
              *(void *)int v511 = 0;
              *((void *)v511 + 1) = 0;
              *((void *)v511 + 2) = 0;
              *((void *)v511 + 3) = v511 + 8;
              LOWORD(v882) = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v511 + 8), (uint64_t)v508, v509, (const char **)&v878, 0, Alignment, 0);
              (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v386, &v861, v903, v904);
              if (v900)
              {
                unsigned int v772 = v899;
                unsigned int v773 = &v899[16 * v900];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v386, *(_DWORD *)v772, *((llvm::MDNode **)v772 + 1));
                  v772 += 16;
                }
                while (v772 != v773);
              }
              unsigned int v878 = 0;
              if (sub_1CD40EA84(v375[23], *((_DWORD *)v375 + 50), (uint64_t)v376, &v878)) {
                unsigned int v512 = v878;
              }
              else {
                unsigned int v512 = (void *)(v375[23] + 16 * *((unsigned int *)v375 + 50));
              }
              if (v377)
              {
                int64_t v726 = *(llvm::Type **)(*v375 + 24);
                uint64_t v727 = v512[1];
                __int16 v864 = 257;
                char v728 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v903[7] + 40) + 272), v726, 1);
                uint64_t v729 = operator new(0x60uLL);
                v729[13] = v729[13] & 0x38000000 | 1;
                uint64_t v385 = (uint64_t)(v729 + 8);
                *(void *)uint64_t v729 = 0;
                *((void *)v729 + 1) = 0;
                *((void *)v729 + 2) = 0;
                *((void *)v729 + 3) = v729 + 8;
                LOWORD(v882) = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v729 + 8), (uint64_t)v726, v727, (const char **)&v878, 0, v728, 0);
                (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v385, &v861, v903, v904);
                if (v900)
                {
                  uint64_t v730 = v899;
                  unint64_t v731 = &v899[16 * v900];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v385, *(_DWORD *)v730, *((llvm::MDNode **)v730 + 1));
                    v730 += 16;
                  }
                  while (v730 != v731);
                }
              }
              else
              {
                uint64_t v385 = 0;
              }
              if (v899 != v901) {
                free(v899);
              }
              uint64_t v2 = v834;
              unsigned int v387 = v838;
              uint64_t v378 = (_DWORD *)&unk_1EBCE7000;
              goto LABEL_474;
            }
          }
        }
      }
      uint64_t v893 = v895;
      uint64_t v894 = 0x200000000;
      llvm::getUnderlyingObjects((uint64_t)v376, (uint64_t)&v893, 0, (llvm::Value *)6);
      if (!v894)
      {
LABEL_467:
        uint64_t v384 = *v375;
        if (v377) {
          uint64_t v385 = *(void *)(v384 + 40);
        }
        else {
          uint64_t v385 = 0;
        }
        uint64_t v386 = *(void *)(v384 + 72);
LABEL_471:
        unsigned int v387 = v838;
        goto LABEL_472;
      }
      int v379 = (v186 >> 1) & 0x3F;
      uint64_t v380 = (char *)v893;
      uint64_t v381 = 8 * v894;
      while (1)
      {
        int v382 = *(unsigned __int8 *)(*(void *)v380 + 16);
        BOOL v383 = !*(unsigned char *)(*(void *)v380 + 16) || v382 == 4;
        if (!v383 && (v382 != 3 || (*(unsigned char *)(*(void *)v380 + 80) & 1) == 0)) {
          break;
        }
        v380 += 8;
        v381 -= 8;
        if (!v381) {
          goto LABEL_467;
        }
      }
      long long v833 = v2;
      unint64_t __pf = v109 >> 3;
      if (!v377
        || dword_1EBCE7B08 != 2
        && (v109 < 0x18
         || (__clz(1 << v379) ^ 0x3F) >= HIBYTE(word_1EBCE73B8)
         && (v109 >> 3 == 4 || (v109 & 0x38) == 0)))
      {
        uint64_t v490 = sub_1CCAFC3A8(*v375, v376, (v186 >> 1) & 0x3F, v374);
        uint64_t v822 = v491;
        unsigned int v492 = __clz(1 << v379) ^ 0x3F;
        if (byte_1EBCE7448) {
          __int16 v493 = v492;
        }
        else {
          __int16 v493 = 0;
        }
        __int16 v830 = v493;
        if (HIBYTE(word_1EBCE73B8) <= v492) {
          char v494 = v492;
        }
        else {
          char v494 = HIBYTE(word_1EBCE73B8);
        }
        if (!v377)
        {
          uint64_t v385 = 0;
          unsigned int v387 = v838;
          unint64_t v501 = v109 >> 3;
          goto LABEL_644;
        }
        unsigned int v495 = 0;
        uint64_t v496 = **v374;
        v899 = v901;
        uint64_t v900 = 0x200000000;
        uint64_t v905 = v496;
        uint64_t v906 = &v914;
        uint64_t v907 = v915;
        uint64_t v908 = 0;
        int v909 = 0;
        __int16 v910 = 512;
        char v911 = 7;
        int v903 = 0;
        unint64_t v904 = 0;
        uint64_t v912 = 0;
        uint64_t v913 = 0;
        unsigned int v914 = &unk_1F2616E88;
        v915[0] = &unk_1F2617008;
        int v903 = v374[5];
        unint64_t v904 = v374 + 3;
        uint64_t v497 = v374[6];
        unsigned int v861 = v497;
        unsigned int v387 = v838;
        if (v497)
        {
          llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v497, 2);
          unsigned int v495 = v861;
        }
        sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v495);
        if (v861)
        {
          int v701 = *(unsigned __int8 *)v861;
          if ((v701 - 4) > 0x1E)
          {
            if ((v701 - 3) >= 0xFFFFFFFE) {
              char v750 = v861;
            }
            else {
              char v750 = 0;
            }
            if ((v701 - 3) < 0xFFFFFFFE)
            {
              unsigned int v387 = v838;
              if (v701 == 3) {
                *((void *)v861 + 1) = 0;
              }
              goto LABEL_639;
            }
            unint64_t v703 = (unint64_t)v750 + 8;
          }
          else
          {
            unsigned int v387 = v838;
            if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
              goto LABEL_639;
            }
            uint64_t v702 = *((void *)v861 + 2);
            if ((v702 & 4) == 0) {
              goto LABEL_639;
            }
            unint64_t v703 = v702 & 0xFFFFFFFFFFFFFFF8;
            if (!v703) {
              goto LABEL_639;
            }
          }
          unsigned int v878 = &v861;
          sub_1CC5FA668(v703 + 16, &v878);
          unsigned int v387 = v838;
        }
LABEL_639:
        uint64_t v498 = *(void *)(*v375 + 24);
        __int16 v864 = 257;
        uint64_t v499 = operator new(0x60uLL);
        v499[13] = v499[13] & 0x38000000 | 1;
        uint64_t v385 = (uint64_t)(v499 + 8);
        *(void *)uint64_t v499 = 0;
        *((void *)v499 + 1) = 0;
        *((void *)v499 + 2) = 0;
        *((void *)v499 + 3) = v499 + 8;
        LOWORD(v882) = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v499 + 8), v498, (uint64_t)v822, (const char **)&v878, 0, v494, 0);
        (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v385, &v861, v903, v904);
        int v500 = v899;
        if (v900)
        {
          uint64_t v697 = &v899[16 * v900];
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v385, *(_DWORD *)v500, *((llvm::MDNode **)v500 + 1));
            v500 += 16;
          }
          while (v500 != v697);
          int v500 = v899;
          unsigned int v387 = v838;
        }
        uint64_t v378 = (_DWORD *)&unk_1EBCE7000;
        unint64_t v501 = v109 >> 3;
        if (v500 != v901)
        {
          free(v500);
          unint64_t v501 = v109 >> 3;
        }
LABEL_644:
        if (v501 != 2)
        {
          if (v501 == 1)
          {
            unsigned int v502 = operator new(0x60uLL);
            uint64_t v386 = (uint64_t)(v502 + 8);
            v502[13] = v502[13] & 0x38000000 | 1;
            *(void *)unsigned int v502 = 0;
            *((void *)v502 + 1) = 0;
            *((void *)v502 + 2) = 0;
            *((void *)v502 + 3) = v502 + 8;
            int v503 = *(llvm::Type **)(*v375 + 48);
            __int16 v902 = 257;
            llvm::LoadInst::LoadInst((llvm::LoadInst *)(v502 + 8), v503, (llvm::Value *)v490, (const char **)&v899, 0, (llvm::Instruction *)v374);
            *((_WORD *)v502 + 25) = *((_WORD *)v502 + 25) & 0xFF81 | (2 * v830);
LABEL_825:
            uint64_t v2 = v833;
LABEL_472:
            if (v893 != v895) {
              free(v893);
            }
LABEL_474:
            if (!sub_1CCAF0410() || v378[706] != 2) {
              goto LABEL_489;
            }
            uint64_t v388 = 0;
            uint64_t v389 = **v374;
            v899 = v901;
            uint64_t v900 = 0x200000000;
            uint64_t v905 = v389;
            uint64_t v906 = &v914;
            uint64_t v907 = v915;
            uint64_t v908 = 0;
            int v909 = 0;
            __int16 v910 = 512;
            char v911 = 7;
            int v903 = 0;
            unint64_t v904 = 0;
            uint64_t v912 = 0;
            uint64_t v913 = 0;
            unsigned int v914 = &unk_1F2616E88;
            v915[0] = &unk_1F2617008;
            int v903 = v374[5];
            unint64_t v904 = v374 + 3;
            uint64_t v390 = v374[6];
            unsigned int v861 = v390;
            if (v390)
            {
              llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v390, 2);
              uint64_t v388 = v861;
            }
            sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v388);
            if (!v861)
            {
LABEL_479:
              if (!v386) {
                goto LABEL_486;
              }
              unsigned int v391 = *(unsigned __int8 *)(v386 + 16);
              if (v391 > 0x14) {
                goto LABEL_486;
              }
              if (v391 == 17)
              {
                if (*(_UNKNOWN **)(v386 + 32) == &unk_1CFB2E344) {
                  uint64_t v790 = *(char **)(v386 + 40);
                }
                else {
                  uint64_t v790 = (char *)(v386 + 24);
                }
              }
              else
              {
                if ((*(_DWORD *)(*(void *)v386 + 8) & 0xFE) != 0x12
                  || (SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v386, 0)) == 0
                  || SplatValue[16] != 17)
                {
                  int v392 = *(unsigned __int8 *)(v386 + 16);
                  if (v392 != 16)
                  {
                    if (v392 == 17)
                    {
                      if ((sub_1CB844168(v386, 0.0) & 1) == 0)
                      {
LABEL_486:
                        uint64_t v394 = *(uint64_t ***)(*v375 + 472);
                        uint64_t v395 = *(uint64_t ***)(*v375 + 480);
                        unsigned int v861 = (void *)v386;
                        unint64_t v862 = v385;
                        LOWORD(v882) = 257;
                        uint64_t v385 = sub_1CB845BAC((uint64_t *)&v899, v394, v395, (uint64_t *)&v861, 2, (uint64_t)&v878, 0);
                      }
                    }
                    else if ((v392 - 18) >= 3 && v392 != 13)
                    {
                      goto LABEL_486;
                    }
LABEL_487:
                    if (v899 != v901) {
                      free(v899);
                    }
LABEL_489:
                    int v396 = sub_1CCAF0410();
                    if (v396)
                    {
                      BOOL v397 = v850;
                      if ((unint64_t)v850 >= v851)
                      {
                        unsigned int v417 = (char *)v849;
                        uint64_t v418 = (v850 - (unsigned char *)v849) >> 3;
                        unint64_t v419 = v418 + 1;
                        if ((unint64_t)(v418 + 1) >> 61) {
                          goto LABEL_1183;
                        }
                        uint64_t v420 = v851 - (void)v849;
                        if ((uint64_t)(v851 - (void)v849) >> 2 > v419) {
                          unint64_t v419 = v420 >> 2;
                        }
                        if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v421 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v421 = v419;
                        }
                        if (v421)
                        {
                          if (v421 >> 61) {
                            goto LABEL_1186;
                          }
                          BOOL v422 = (char *)operator new(8 * v421);
                        }
                        else
                        {
                          BOOL v422 = 0;
                        }
                        unint64_t v423 = (uint64_t *)&v422[8 * v418];
                        uint64_t v424 = &v422[8 * v421];
                        *unint64_t v423 = v386;
                        BOOL v398 = (char *)(v423 + 1);
                        if (v397 == v417)
                        {
                          unsigned int v387 = v838;
                        }
                        else
                        {
                          unsigned int v387 = v838;
                          do
                          {
                            uint64_t v425 = *((void *)v397 - 1);
                            v397 -= 8;
                            *--unint64_t v423 = v425;
                          }
                          while (v397 != v417);
                          BOOL v397 = (char *)v849;
                        }
                        uint64_t v849 = v423;
                        unint64_t v851 = (unint64_t)v424;
                        if (v397) {
                          operator delete(v397);
                        }
                      }
                      else
                      {
                        *(void *)int v850 = v386;
                        BOOL v398 = v397 + 8;
                      }
                      int v850 = v398;
                      uint64_t v426 = v847;
                      if ((unint64_t)v847 >= v848)
                      {
                        int v428 = (char *)v846;
                        uint64_t v429 = (v847 - (unsigned char *)v846) >> 3;
                        unint64_t v430 = v429 + 1;
                        if ((unint64_t)(v429 + 1) >> 61) {
                          goto LABEL_1183;
                        }
                        uint64_t v431 = v848 - (void)v846;
                        if ((uint64_t)(v848 - (void)v846) >> 2 > v430) {
                          unint64_t v430 = v431 >> 2;
                        }
                        if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v432 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v432 = v430;
                        }
                        if (v432)
                        {
                          if (v432 >> 61) {
                            goto LABEL_1186;
                          }
                          int v433 = (char *)operator new(8 * v432);
                        }
                        else
                        {
                          int v433 = 0;
                        }
                        unint64_t v434 = (uint64_t *)&v433[8 * v429];
                        uint64_t v435 = &v433[8 * v432];
                        *unint64_t v434 = v385;
                        int v427 = (char *)(v434 + 1);
                        if (v426 == v428)
                        {
                          unsigned int v387 = v838;
                        }
                        else
                        {
                          unsigned int v387 = v838;
                          do
                          {
                            uint64_t v436 = *((void *)v426 - 1);
                            v426 -= 8;
                            *--unint64_t v434 = v436;
                          }
                          while (v426 != v428);
                          uint64_t v426 = (char *)v846;
                        }
                        int v846 = v434;
                        unint64_t v848 = (unint64_t)v435;
                        if (v426) {
                          operator delete(v426);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v847 = v385;
                        int v427 = v426 + 8;
                      }
                      unint64_t v847 = v427;
                    }
                    if (byte_1EBCE7508
                      || (int v513 = (uint64_t *)*v387,
                          int v514 = StripPointerGEPsAndCasts((llvm::Value *)*(v2 - 4)),
                          sub_1CCAFC1F0(v513, v514)))
                    {
                      int v437 = sub_1CCAF68D0(*v387, (uint64_t)*(v2 - 4));
                      uint64_t v386 = (uint64_t)sub_1CCAFB0E8(*v387, (uint64_t *)v386, v437, (const llvm::Instruction *)v374);
                      if (v396)
                      {
                        BOOL v438 = v850;
                        if ((unint64_t)v850 >= v851)
                        {
                          uint64_t v440 = (char *)v849;
                          uint64_t v441 = (v850 - (unsigned char *)v849) >> 3;
                          unint64_t v442 = v441 + 1;
                          if ((unint64_t)(v441 + 1) >> 61) {
                            goto LABEL_1183;
                          }
                          uint64_t v443 = v851 - (void)v849;
                          if ((uint64_t)(v851 - (void)v849) >> 2 > v442) {
                            unint64_t v442 = v443 >> 2;
                          }
                          if ((unint64_t)v443 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v444 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v444 = v442;
                          }
                          if (v444)
                          {
                            if (v444 >> 61) {
                              goto LABEL_1186;
                            }
                            uint64_t v445 = (char *)operator new(8 * v444);
                          }
                          else
                          {
                            uint64_t v445 = 0;
                          }
                          uint64_t v446 = (uint64_t **)&v445[8 * v441];
                          char v447 = &v445[8 * v444];
                          unsigned __int8 *v446 = v437;
                          int v439 = (char *)(v446 + 1);
                          if (v438 == v440)
                          {
                            unsigned int v387 = v838;
                          }
                          else
                          {
                            unsigned int v387 = v838;
                            do
                            {
                              unint64_t v448 = (uint64_t *)*((void *)v438 - 1);
                              v438 -= 8;
                              *--uint64_t v446 = v448;
                            }
                            while (v438 != v440);
                            BOOL v438 = (char *)v849;
                          }
                          uint64_t v849 = v446;
                          unint64_t v851 = (unint64_t)v447;
                          if (v438) {
                            operator delete(v438);
                          }
                        }
                        else
                        {
                          *(void *)int v850 = v437;
                          int v439 = v438 + 8;
                        }
                        int v850 = v439;
                        size_t v449 = sub_1CCAF6F18((uint64_t *)*v387, (uint64_t)*(v2 - 4));
                        size_t v450 = v449;
                        uint64_t v451 = v847;
                        if ((unint64_t)v847 >= v848)
                        {
                          uint64_t v453 = (char *)v846;
                          uint64_t v454 = (v847 - (unsigned char *)v846) >> 3;
                          unint64_t v455 = v454 + 1;
                          if ((unint64_t)(v454 + 1) >> 61) {
                            goto LABEL_1183;
                          }
                          uint64_t v456 = v848 - (void)v846;
                          if ((uint64_t)(v848 - (void)v846) >> 2 > v455) {
                            unint64_t v455 = v456 >> 2;
                          }
                          if ((unint64_t)v456 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v457 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v457 = v455;
                          }
                          if (v457)
                          {
                            if (v457 >> 61) {
                              goto LABEL_1186;
                            }
                            uint64_t v458 = (char *)operator new(8 * v457);
                          }
                          else
                          {
                            uint64_t v458 = 0;
                          }
                          int v459 = (llvm::Instruction **)&v458[8 * v454];
                          unint64_t v460 = &v458[8 * v457];
                          std::locale::__imp *v459 = v450;
                          uint64_t v452 = (char *)(v459 + 1);
                          if (v451 == v453)
                          {
                            unsigned int v387 = v838;
                          }
                          else
                          {
                            unsigned int v387 = v838;
                            do
                            {
                              int v461 = (llvm::Instruction *)*((void *)v451 - 1);
                              v451 -= 8;
                              *--int v459 = v461;
                            }
                            while (v451 != v453);
                            uint64_t v451 = (char *)v846;
                          }
                          int v846 = v459;
                          unint64_t v848 = (unint64_t)v460;
                          if (v451) {
                            operator delete(v451);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v847 = v449;
                          uint64_t v452 = v451 + 8;
                        }
                        unint64_t v847 = v452;
                      }
                    }
                    int v462 = (uint64_t *)*v387;
                    if (sub_1CCAFABC8(v386))
                    {
LABEL_607:
                      size_t v475 = sub_1CCAFB838(v462, (uint64_t)*v2, v386, v374);
                      uint64_t v476 = (uint64_t *)(*v387 + 112);
                      v899 = (char *)v2;
                      sub_1CC080DE0(v476, &v899)[1] = v475;
                      if (v396)
                      {
                        uint64_t v477 = *v387;
                        uint64_t v478 = sub_1CCAFBD40(*v387, &v849, &v846, (const llvm::Instruction *)v374, 0);
                        if (sub_1CCAF0410())
                        {
                          v899 = (char *)v2;
                          sub_1CC080DE0((uint64_t *)(v477 + 136), &v899)[1] = v478;
                        }
                      }
                      if (!byte_1EBCE7808)
                      {
LABEL_624:
                        if (v846) {
                          operator delete(v846);
                        }
                        __n128 v290 = v849;
                        if (!v849) {
                          return;
                        }
LABEL_745:
                        operator delete(v290);
                        return;
                      }
                      int v479 = 0;
                      uint64_t v480 = **v374;
                      v899 = v901;
                      uint64_t v900 = 0x200000000;
                      uint64_t v905 = v480;
                      uint64_t v906 = &v914;
                      uint64_t v907 = v915;
                      uint64_t v908 = 0;
                      int v909 = 0;
                      __int16 v910 = 512;
                      char v911 = 7;
                      uint64_t v912 = 0;
                      uint64_t v913 = 0;
                      unsigned int v914 = &unk_1F2616E88;
                      v915[0] = &unk_1F2617008;
                      int v903 = v374[5];
                      unint64_t v904 = v374 + 3;
                      BOOL v481 = v374[6];
                      unsigned int v861 = v481;
                      if (v481)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v481, 2);
                        int v479 = v861;
                      }
                      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v479);
                      if (v861)
                      {
                        int v606 = *(unsigned __int8 *)v861;
                        if ((v606 - 4) > 0x1E)
                        {
                          if ((v606 - 3) >= 0xFFFFFFFE) {
                            uint64_t v677 = v861;
                          }
                          else {
                            uint64_t v677 = 0;
                          }
                          if ((v606 - 3) < 0xFFFFFFFE)
                          {
                            unsigned int v387 = v838;
                            if (v606 == 3) {
                              *((void *)v861 + 1) = 0;
                            }
                            goto LABEL_614;
                          }
                          unint64_t v608 = (unint64_t)v677 + 8;
                        }
                        else
                        {
                          if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
                            goto LABEL_614;
                          }
                          uint64_t v607 = *((void *)v861 + 2);
                          if ((v607 & 4) == 0) {
                            goto LABEL_614;
                          }
                          unint64_t v608 = v607 & 0xFFFFFFFFFFFFFFF8;
                          if (!v608) {
                            goto LABEL_614;
                          }
                        }
                        unsigned int v878 = &v861;
                        sub_1CC5FA668(v608 + 16, &v878);
                        unsigned int v387 = v838;
                      }
LABEL_614:
                      uint64_t v482 = (unsigned __int8 *)*(v2 - 4);
                      uint64_t v483 = *(void *)(*(void *)*v387 + 16);
                      __int16 v864 = 257;
                      if (*(void *)v482 != v483)
                      {
                        if (v482[16] <= 0x14u)
                        {
                          uint64_t v486 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v906 + 28))(v906, 49, v482, v483);
                          uint64_t v482 = (unsigned __int8 *)v486;
                          if (v486 && *(unsigned __int8 *)(v486 + 16) >= 0x1Cu)
                          {
                            (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v486, &v861, v903, v904);
                            if (v900)
                            {
                              unsigned int v802 = v899;
                              int v803 = &v899[16 * v900];
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v482, *(_DWORD *)v802, *((llvm::MDNode **)v802 + 1));
                                v802 += 16;
                              }
                              while (v802 != v803);
                            }
                            unsigned int v387 = v838;
                          }
                        }
                        else
                        {
                          LOWORD(v882) = 257;
                          uint64_t v482 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v482, v483, (const char **)&v878, 0);
                          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v482, &v861, v903, v904);
                          if (v900)
                          {
                            uint64_t v484 = v899;
                            uint64_t v485 = &v899[16 * v900];
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v482, *(_DWORD *)v484, *((llvm::MDNode **)v484 + 1));
                              v484 += 16;
                            }
                            while (v484 != v485);
                          }
                        }
                      }
                      uint64_t v487 = *(void *)*v387;
                      unint64_t v488 = *(uint64_t ***)(v487 + 360);
                      unint64_t v489 = *(uint64_t ***)(v487 + 368);
                      unsigned int v861 = (void *)v386;
                      unint64_t v862 = (unint64_t)v482;
                      LOWORD(v882) = 257;
                      sub_1CB845BAC((uint64_t *)&v899, v488, v489, (uint64_t *)&v861, 2, (uint64_t)&v878, 0);
                      if (v899 != v901) {
                        free(v899);
                      }
                      goto LABEL_624;
                    }
                    unsigned int v464 = (uint64_t *)v462[33];
                    unint64_t v463 = v462[34];
                    if ((unint64_t)v464 < v463)
                    {
                      *unsigned int v464 = v386;
                      size_t v465 = v464 + 1;
LABEL_606:
                      v462[33] = (uint64_t)v465;
                      int v462 = (uint64_t *)*v387;
                      goto LABEL_607;
                    }
                    size_t v466 = (void *)v462[32];
                    uint64_t v467 = v464 - v466;
                    unint64_t v468 = v467 + 1;
                    if (!((unint64_t)(v467 + 1) >> 61))
                    {
                      uint64_t v469 = v463 - (void)v466;
                      if (v469 >> 2 > v468) {
                        unint64_t v468 = v469 >> 2;
                      }
                      if ((unint64_t)v469 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v470 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v470 = v468;
                      }
                      if (!v470)
                      {
                        uint64_t v471 = 0;
LABEL_599:
                        uint64_t v472 = (uint64_t *)&v471[8 * v467];
                        int v473 = &v471[8 * v470];
                        uint64_t *v472 = v386;
                        size_t v465 = v472 + 1;
                        if (v464 == v466)
                        {
                          unsigned int v387 = v838;
                        }
                        else
                        {
                          unsigned int v387 = v838;
                          do
                          {
                            uint64_t v474 = *--v464;
                            *--uint64_t v472 = v474;
                          }
                          while (v464 != v466);
                          unsigned int v464 = (uint64_t *)v462[32];
                        }
                        v462[32] = (uint64_t)v472;
                        v462[33] = (uint64_t)v465;
                        v462[34] = (uint64_t)v473;
                        if (v464) {
                          operator delete(v464);
                        }
                        goto LABEL_606;
                      }
                      if (!(v470 >> 61))
                      {
                        uint64_t v471 = (char *)operator new(8 * v470);
                        goto LABEL_599;
                      }
LABEL_1186:
                      sub_1CB833614();
                    }
LABEL_1183:
                    abort();
                  }
                  uint64_t v393 = *(unsigned int *)(v386 + 32);
                  if (v393 < 0x41)
                  {
                    if (!*(void *)(v386 + 24)) {
                      goto LABEL_487;
                    }
                    goto LABEL_486;
                  }
                  int v779 = 0;
                  int64_t v780 = (unint64_t)(v393 + 63) >> 6;
                  do
                  {
                    BOOL v669 = v780-- < 1;
                    if (v669) {
                      break;
                    }
                    unint64_t v781 = *(void *)(*(void *)(v386 + 24) + 8 * v780);
                    v779 += __clz(v781);
                  }
                  while (!v781);
                  int v782 = v393 | 0xFFFFFFC0;
                  if ((v393 & 0x3F) == 0) {
                    int v782 = 0;
                  }
                  BOOL v783 = v779 + v782 == v393;
LABEL_1167:
                  unsigned int v387 = v838;
                  if (!v783) {
                    goto LABEL_486;
                  }
                  goto LABEL_487;
                }
                if (*((_UNKNOWN **)SplatValue + 4) == &unk_1CFB2E344) {
                  uint64_t v790 = (char *)*((void *)SplatValue + 5);
                }
                else {
                  uint64_t v790 = SplatValue + 24;
                }
              }
              BOOL v783 = (v790[28] & 7) == 3;
              goto LABEL_1167;
            }
            int v611 = *(unsigned __int8 *)v861;
            if ((v611 - 4) > 0x1E)
            {
              if ((v611 - 3) >= 0xFFFFFFFE) {
                uint64_t v684 = v861;
              }
              else {
                uint64_t v684 = 0;
              }
              if ((v611 - 3) < 0xFFFFFFFE)
              {
                unsigned int v387 = v838;
                if (v611 == 3) {
                  *((void *)v861 + 1) = 0;
                }
                goto LABEL_479;
              }
              unint64_t v613 = (unint64_t)v684 + 8;
            }
            else
            {
              if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
                goto LABEL_479;
              }
              uint64_t v612 = *((void *)v861 + 2);
              if ((v612 & 4) == 0) {
                goto LABEL_479;
              }
              unint64_t v613 = v612 & 0xFFFFFFFFFFFFFFF8;
              if (!v613) {
                goto LABEL_479;
              }
            }
            unsigned int v878 = &v861;
            sub_1CC5FA668(v613 + 16, &v878);
            unsigned int v387 = v838;
            goto LABEL_479;
          }
          if (v501 != 4 && (v109 & 0x38) != 0)
          {
            int v551 = 0;
            uint64_t v552 = **v374;
            v899 = v901;
            uint64_t v900 = 0x200000000;
            uint64_t v905 = v552;
            uint64_t v906 = &v914;
            uint64_t v907 = v915;
            uint64_t v908 = 0;
            int v909 = 0;
            __int16 v910 = 512;
            char v911 = 7;
            int v903 = 0;
            unint64_t v904 = 0;
            uint64_t v912 = 0;
            uint64_t v913 = 0;
            unsigned int v914 = &unk_1F2616E88;
            v915[0] = &unk_1F2617008;
            int v903 = v374[5];
            unint64_t v904 = v374 + 3;
            unsigned int v553 = v374[6];
            unsigned int v861 = v553;
            if (v553)
            {
              llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v553, 2);
              int v551 = v861;
            }
            sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v551);
            uint64_t v2 = v833;
            if (!v861) {
              goto LABEL_699;
            }
            int v738 = *(unsigned __int8 *)v861;
            if ((v738 - 4) > 0x1E)
            {
              if ((v738 - 3) >= 0xFFFFFFFE) {
                uint64_t v760 = v861;
              }
              else {
                uint64_t v760 = 0;
              }
              if ((v738 - 3) < 0xFFFFFFFE)
              {
                uint64_t v2 = v833;
                if (v738 == 3) {
                  *((void *)v861 + 1) = 0;
                }
                goto LABEL_699;
              }
              unint64_t v740 = (unint64_t)v760 + 8;
            }
            else
            {
              uint64_t v2 = v833;
              if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
                goto LABEL_699;
              }
              uint64_t v739 = *((void *)v861 + 2);
              if ((v739 & 4) == 0) {
                goto LABEL_699;
              }
              unint64_t v740 = v739 & 0xFFFFFFFFFFFFFFF8;
              if (!v740) {
                goto LABEL_699;
              }
            }
            unsigned int v878 = &v861;
            sub_1CC5FA668(v740 + 16, &v878);
            uint64_t v2 = v833;
LABEL_699:
            int v555 = *(uint64_t ***)(*v375 + 248);
            unsigned int v556 = *(uint64_t ***)(*v375 + 256);
            unsigned int v861 = v490;
            uint64_t v557 = *(void *)(*v375 + 64);
            __int16 v558 = *(llvm::ConstantInt **)v557;
            unint64_t v559 = *(unsigned int *)(v557 + 8);
            LODWORD(v879) = v559 >> 8;
            if (v559 >> 8 > 0x40) {
              operator new[]();
            }
            if (v559 <= 0xFF) {
              unint64_t v560 = 0;
            }
            else {
              unint64_t v560 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v559) + 63);
            }
            unsigned int v878 = (void *)(v560 & __pf);
            unsigned int v561 = llvm::ConstantInt::get(v558, (llvm::LLVMContext *)&v878, v554);
            if (v879 >= 0x41 && v878) {
              MEMORY[0x1D25D9CB0](v878, 0x1000C8000313F17);
            }
            unint64_t v862 = (unint64_t)v561;
            LOWORD(v882) = 257;
            uint64_t v386 = sub_1CB845BAC((uint64_t *)&v899, v555, v556, (uint64_t *)&v861, 2, (uint64_t)&v878, 0);
            *(void *)(v386 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v386 + 64), **(uint64_t ***)v386, 0, 67);
            if (v899 != v901) {
              free(v899);
            }
            goto LABEL_471;
          }
          char v860 = v494;
          __int16 v858 = v374;
          unint64_t v859 = v822;
          int v824 = sub_1CCAF0410();
          char v614 = 0;
          uint64_t v889 = 0;
          int v888 = 0;
          uint64_t v890 = 0;
          unsigned int v855 = 0;
          unint64_t v856 = 0;
          uint64_t v857 = 0;
          unsigned int v854 = 0;
          uint64_t v615 = **(void **)(*v375 + 8);
          int v616 = (llvm::PointerType *)(v615 + 1960);
          unsigned int v617 = (llvm::PointerType *)(v615 + 1984);
          if (__pf == 4) {
            unsigned int v617 = v616;
          }
          unsigned int v854 = v617;
          uint64_t v618 = **v858;
          v899 = v901;
          uint64_t v900 = 0x200000000;
          uint64_t v905 = v618;
          uint64_t v906 = &v914;
          uint64_t v907 = v915;
          uint64_t v908 = 0;
          int v909 = 0;
          __int16 v910 = 512;
          char v911 = 7;
          int v903 = 0;
          unint64_t v904 = 0;
          uint64_t v912 = 0;
          uint64_t v913 = 0;
          unsigned int v914 = &unk_1F2616E88;
          v915[0] = &unk_1F2617008;
          int v903 = v858[5];
          unint64_t v904 = v858 + 3;
          unsigned int v619 = v858[6];
          unsigned int v861 = v619;
          if (v619)
          {
            llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v619, 2);
            char v614 = v861;
          }
          sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v614);
          if (v861)
          {
            int v735 = *(unsigned __int8 *)v861;
            if ((v735 - 4) > 0x1E)
            {
              if ((v735 - 3) >= 0xFFFFFFFE) {
                uint64_t v759 = v861;
              }
              else {
                uint64_t v759 = 0;
              }
              if ((v735 - 3) < 0xFFFFFFFE)
              {
                if (v735 == 3) {
                  *((void *)v861 + 1) = 0;
                }
                goto LABEL_798;
              }
              unint64_t v737 = (unint64_t)v759 + 8;
            }
            else
            {
              if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
                goto LABEL_798;
              }
              uint64_t v736 = *((void *)v861 + 2);
              if ((v736 & 4) == 0) {
                goto LABEL_798;
              }
              unint64_t v737 = v736 & 0xFFFFFFFFFFFFFFF8;
              if (!v737) {
                goto LABEL_798;
              }
            }
            unsigned int v878 = &v861;
            sub_1CC5FA668(v737 + 16, &v878);
          }
LABEL_798:
          unint64_t v620 = llvm::PointerType::get(v854, 0);
          __int16 v864 = 257;
          if (*(void *)v490 != v620)
          {
            if (v490[16] <= 0x14u)
            {
              uint64_t v648 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v906 + 28))(v906, 49, v490, v620);
              uint64_t v490 = (unsigned __int8 *)v648;
              if (v648)
              {
                if (*(unsigned __int8 *)(v648 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v648, &v861, v903, v904);
                  if (v900)
                  {
                    BOOL v804 = v899;
                    uint64_t v805 = &v899[16 * v900];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v490, *(_DWORD *)v804, *((llvm::MDNode **)v804 + 1));
                      v804 += 16;
                    }
                    while (v804 != v805);
                  }
                }
              }
            }
            else
            {
              LOWORD(v882) = 257;
              uint64_t v490 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v490, v620, (const char **)&v878, 0);
              (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v490, &v861, v903, v904);
              if (v900)
              {
                int v621 = v899;
                unint64_t v622 = &v899[16 * v900];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v490, *(_DWORD *)v621, *((llvm::MDNode **)v621 + 1));
                  v621 += 16;
                }
                while (v621 != v622);
              }
            }
          }
          int v649 = v854;
          __int16 v864 = 257;
          unsigned int v650 = operator new(0x60uLL);
          v650[13] = v650[13] & 0x38000000 | 1;
          uint64_t v386 = (uint64_t)(v650 + 8);
          *(void *)unsigned int v650 = 0;
          *((void *)v650 + 1) = 0;
          *((void *)v650 + 2) = 0;
          *((void *)v650 + 3) = v650 + 8;
          LOWORD(v882) = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v650 + 8), (uint64_t)v649, (uint64_t)v490, (const char **)&v878, 0, v830, 0);
          (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v386, &v861, v903, v904);
          if (v900)
          {
            uint64_t v720 = v899;
            int v721 = &v899[16 * v900];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v386, *(_DWORD *)v720, *((llvm::MDNode **)v720 + 1));
              v720 += 16;
            }
            while (v720 != v721);
          }
          unint64_t v652 = *((unsigned int *)v854 + 2);
          unsigned int v853 = v652 >> 8;
          unint64_t v653 = v652 >> 11;
          unint64_t v852 = v652 >> 11;
          unsigned int v878 = &v852;
          unsigned int v879 = (const char **)&v899;
          unsigned int v880 = &v854;
          uint64_t v881 = &v853;
          unint64_t v882 = &v888;
          v883 = &v855;
          uint64_t v884 = v375;
          uint64_t v885 = &v858;
          uint64_t v886 = &v860;
          uint64_t v887 = &v859;
          if (v824)
          {
            sub_1CCAFCE08((uint64_t)&v878, v386, v385);
            unint64_t v653 = v852;
          }
          for (; v653 < __pf; v653 += v852)
          {
            BOOL v654 = v854;
            uint64_t v655 = *(void *)(*v375 + 64);
            uint64_t v656 = *(llvm::ConstantInt **)v655;
            unint64_t v657 = *(unsigned int *)(v655 + 8);
            LODWORD(v862) = v657 >> 8;
            if (v657 >> 8 > 0x40) {
              operator new[]();
            }
            if (v657 <= 0xFF) {
              LOBYTE(v658) = 0;
            }
            else {
              unint64_t v658 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v657) + 63);
            }
            unsigned int v861 = (void *)(v658 & 1);
            uint64_t v659 = (const char *)llvm::ConstantInt::get(v656, (llvm::LLVMContext *)&v861, v651);
            if (v862 >= 0x41 && v861) {
              MEMORY[0x1D25D9CB0](v861, 0x1000C8000313F17);
            }
            __int16 v864 = 257;
            uint64_t v490 = (unsigned __int8 *)sub_1CB930F7C((uint64_t *)&v899, (uint64_t)v654, (uint64_t *)v490, v659, (uint64_t)&v861);
            int v660 = v854;
            __int16 v898 = 257;
            uint64_t v661 = operator new(0x60uLL);
            v661[13] = v661[13] & 0x38000000 | 1;
            uint64_t v662 = (llvm::Instruction *)(v661 + 8);
            *(void *)uint64_t v661 = 0;
            *((void *)v661 + 1) = 0;
            *((void *)v661 + 2) = 0;
            *((void *)v661 + 3) = v661 + 8;
            __int16 v864 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v661 + 8), (uint64_t)v660, (uint64_t)v490, (const char **)&v861, 0, v830, 0);
            (*(void (**)(void *, llvm::Instruction *, llvm::Instruction **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v662, &v896, v903, v904);
            if (v900)
            {
              int v664 = v899;
              uint64_t v665 = &v899[16 * v900];
              do
              {
                llvm::Instruction::setMetadata(v662, *(_DWORD *)v664, *((llvm::MDNode **)v664 + 1));
                v664 += 16;
              }
              while (v664 != v665);
            }
            __int16 v864 = 257;
            uint64_t v386 = (uint64_t)sub_1CB844AF4((uint64_t)&v899, (void *)v386, (uint64_t)v662, (uint64_t)&v861);
            if (v824)
            {
              std::string::size_type v663 = sub_1CCAFD2E8(*v375, v858, v860, &v859);
              sub_1CCAFCE08((uint64_t)&v878, (uint64_t)v662, (uint64_t)v663);
            }
          }
          unsigned int v666 = v853;
          if (v853 >= 0x10)
          {
            do
            {
              __int16 v864 = 257;
              uint64_t v667 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v386, v666 >> 1, 0);
              uint64_t v668 = sub_1CC2429AC((uint64_t)&v899, v386, (uint64_t)v667, (uint64_t)&v861, 0);
              __int16 v864 = 257;
              uint64_t v386 = (uint64_t)sub_1CB844AF4((uint64_t)&v899, (void *)v386, (uint64_t)v668, (uint64_t)&v861);
              BOOL v669 = v666 > 0x1F;
              v666 >>= 1;
            }
            while (v669);
          }
          uint64_t v670 = *(void *)(*v375 + 48);
          __int16 v898 = 257;
          if (*(void *)v386 != v670)
          {
            if (*(unsigned __int8 *)(v386 + 16) <= 0x14u)
            {
              uint64_t v386 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v906 + 28))(v906, 38, v386, v670);
              if (v386) {
                BOOL v673 = *(unsigned __int8 *)(v386 + 16) >= 0x1Cu;
              }
              else {
                BOOL v673 = 0;
              }
              if (v673)
              {
                (*(void (**)(void *, uint64_t, llvm::Instruction **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v386, &v896, v903, v904);
                if (v900)
                {
                  unsigned int v800 = v899;
                  unsigned int v801 = &v899[16 * v900];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v386, *(_DWORD *)v800, *((llvm::MDNode **)v800 + 1));
                    v800 += 16;
                  }
                  while (v800 != v801);
                }
              }
            }
            else
            {
              __int16 v864 = 257;
              uint64_t v386 = (uint64_t)llvm::CastInst::Create(38, v386, v670, (const char **)&v861, 0);
              (*(void (**)(void *, uint64_t, llvm::Instruction **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v386, &v896, v903, v904);
              if (v900)
              {
                uint64_t v671 = v899;
                uint64_t v672 = &v899[16 * v900];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v386, *(_DWORD *)v671, *((llvm::MDNode **)v671 + 1));
                  v671 += 16;
                }
                while (v671 != v672);
              }
            }
          }
          uint64_t v2 = v833;
          unsigned int v387 = v838;
          uint64_t v378 = (_DWORD *)&unk_1EBCE7000;
          if (v824)
          {
            uint64_t v674 = (const llvm::Instruction *)v858;
            Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt *)(*(void *)v905 + 1984), 0, v651);
            uint64_t v385 = (uint64_t)sub_1CCAFBD40((uint64_t)v375, &v888, &v855, v674, (uint64_t)Signed);
          }
          else
          {
            uint64_t v385 = *(void *)(*v375 + 40);
          }
          if (v899 != v901) {
            free(v899);
          }
          if (v855)
          {
            unint64_t v856 = v855;
            operator delete(v855);
          }
          if (v888)
          {
            uint64_t v889 = v888;
            operator delete(v888);
          }
          goto LABEL_472;
        }
        int v535 = 0;
        uint64_t v536 = **v374;
        v899 = v901;
        uint64_t v900 = 0x200000000;
        uint64_t v905 = v536;
        uint64_t v906 = &v914;
        uint64_t v907 = v915;
        uint64_t v908 = 0;
        int v909 = 0;
        __int16 v910 = 512;
        char v911 = 7;
        int v903 = 0;
        unint64_t v904 = 0;
        uint64_t v912 = 0;
        uint64_t v913 = 0;
        unsigned int v914 = &unk_1F2616E88;
        v915[0] = &unk_1F2617008;
        int v903 = v374[5];
        unint64_t v904 = v374 + 3;
        uint64_t v537 = v374[6];
        unsigned int v861 = v537;
        if (v537)
        {
          llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v537, 2);
          int v535 = v861;
        }
        sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v535);
        if (v861)
        {
          int v711 = *(unsigned __int8 *)v861;
          if ((v711 - 4) > 0x1E)
          {
            if ((v711 - 3) >= 0xFFFFFFFE) {
              unsigned int v754 = v861;
            }
            else {
              unsigned int v754 = 0;
            }
            if ((v711 - 3) < 0xFFFFFFFE)
            {
              unsigned int v387 = v838;
              if (v711 == 3) {
                *((void *)v861 + 1) = 0;
              }
              goto LABEL_684;
            }
            unint64_t v713 = (unint64_t)v754 + 8;
          }
          else
          {
            unsigned int v387 = v838;
            if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
              goto LABEL_684;
            }
            uint64_t v712 = *((void *)v861 + 2);
            if ((v712 & 4) == 0) {
              goto LABEL_684;
            }
            unint64_t v713 = v712 & 0xFFFFFFFFFFFFFFF8;
            if (!v713) {
              goto LABEL_684;
            }
          }
          unsigned int v878 = &v861;
          sub_1CC5FA668(v713 + 16, &v878);
          unsigned int v387 = v838;
        }
LABEL_684:
        uint64_t v539 = *(void *)(*v375 + 48);
        uint64_t v540 = *(void *)(*v375 + 64);
        unsigned int v541 = *(llvm::ConstantInt **)v540;
        unint64_t v542 = *(unsigned int *)(v540 + 8);
        LODWORD(v879) = v542 >> 8;
        if (v542 >> 8 > 0x40) {
          operator new[]();
        }
        if (v542 <= 0xFF) {
          LOBYTE(v543) = 0;
        }
        else {
          unint64_t v543 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v542) + 63);
        }
        unsigned int v878 = (void *)(v543 & 1);
        int v544 = (const char *)llvm::ConstantInt::get(v541, (llvm::LLVMContext *)&v878, v538);
        if (v879 >= 0x41 && v878) {
          MEMORY[0x1D25D9CB0](v878, 0x1000C8000313F17);
        }
        LOWORD(v882) = 257;
        uint64_t v823 = sub_1CB930F7C((uint64_t *)&v899, v539, (uint64_t *)v490, v544, (uint64_t)&v878);
        uint64_t v545 = *(void *)(*v375 + 48);
        __int16 v864 = 257;
        uint64_t v546 = operator new(0x60uLL);
        v546[13] = v546[13] & 0x38000000 | 1;
        int v547 = (llvm::Instruction *)(v546 + 8);
        *(void *)uint64_t v546 = 0;
        *((void *)v546 + 1) = 0;
        *((void *)v546 + 2) = 0;
        *((void *)v546 + 3) = v546 + 8;
        LOWORD(v882) = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v546 + 8), v545, (uint64_t)v490, (const char **)&v878, 0, v830, 0);
        (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v547, &v861, v903, v904);
        if (v900)
        {
          unint64_t v704 = v899;
          unint64_t v705 = &v899[16 * v900];
          do
          {
            llvm::Instruction::setMetadata(v547, *(_DWORD *)v704, *((llvm::MDNode **)v704 + 1));
            v704 += 16;
          }
          while (v704 != v705);
        }
        uint64_t v548 = *(void *)(*v375 + 48);
        __int16 v864 = 257;
        uint64_t v549 = operator new(0x60uLL);
        v549[13] = v549[13] & 0x38000000 | 1;
        int v550 = (llvm::Instruction *)(v549 + 8);
        *(void *)uint64_t v549 = 0;
        *((void *)v549 + 1) = 0;
        *((void *)v549 + 2) = 0;
        *((void *)v549 + 3) = v549 + 8;
        LOWORD(v882) = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v549 + 8), v548, (uint64_t)v823, (const char **)&v878, 0, v830, 0);
        (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v550, &v861, v903, v904);
        if (v900)
        {
          int v706 = v899;
          unsigned int v707 = &v899[16 * v900];
          do
          {
            llvm::Instruction::setMetadata(v550, *(_DWORD *)v706, *((llvm::MDNode **)v706 + 1));
            v706 += 16;
          }
          while (v706 != v707);
        }
        uint64_t v386 = (uint64_t)sub_1CCAFB0E8((uint64_t)v375, (uint64_t *)v547, (uint64_t *)v550, (const llvm::Instruction *)v374);
        uint64_t v2 = v833;
        if (v899 != v901) {
          free(v899);
        }
        uint64_t v378 = (_DWORD *)&unk_1EBCE7000;
        goto LABEL_472;
      }
      uint64_t v399 = 0;
      uint64_t v400 = **v374;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v400;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      int v903 = 0;
      unint64_t v904 = 0;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      int v903 = v374[5];
      unint64_t v904 = v374 + 3;
      char v401 = v374[6];
      unsigned int v861 = v401;
      if (v401)
      {
        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v401, 2);
        uint64_t v399 = v861;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v399);
      unsigned int v387 = v838;
      if (!v861) {
        goto LABEL_497;
      }
      int v698 = *(unsigned __int8 *)v861;
      if ((v698 - 4) > 0x1E)
      {
        if ((v698 - 3) >= 0xFFFFFFFE) {
          int v743 = v861;
        }
        else {
          int v743 = 0;
        }
        if ((v698 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v700 = (unint64_t)v743 + 8;
LABEL_1059:
          unsigned int v878 = &v861;
          sub_1CC5FA668(v700 + 16, &v878);
          unsigned int v387 = v838;
          goto LABEL_497;
        }
        unsigned int v387 = v838;
        if (v698 == 3) {
          *((void *)v861 + 1) = 0;
        }
      }
      else
      {
        unsigned int v387 = v838;
        if ((*((unsigned char *)v861 + 1) & 0x7F) == 2 || *((_DWORD *)v861 + 3))
        {
          uint64_t v699 = *((void *)v861 + 2);
          if ((v699 & 4) != 0)
          {
            unint64_t v700 = v699 & 0xFFFFFFFFFFFFFFF8;
            if (v700) {
              goto LABEL_1059;
            }
          }
        }
      }
LABEL_497:
      int v402 = *(uint64_t ***)(*v375 + 264);
      char v403 = *(uint64_t ***)(*v375 + 272);
      uint64_t v404 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v905 + 1912), 0);
      LOWORD(v882) = 257;
      uint64_t v896 = sub_1CC277FE0((uint64_t)&v899, v376, v404, (uint64_t)&v878, v405);
      uint64_t v407 = *(void *)(*v375 + 64);
      uint64_t v408 = *(llvm::ConstantInt **)v407;
      unint64_t v409 = *(unsigned int *)(v407 + 8);
      LODWORD(v862) = v409 >> 8;
      if (v409 >> 8 > 0x40) {
        operator new[]();
      }
      if (v409 <= 0xFF) {
        unint64_t v410 = 0;
      }
      else {
        unint64_t v410 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v409) + 63);
      }
      unsigned int v861 = (void *)(v410 & __pf);
      uint64_t v411 = llvm::ConstantInt::get(v408, (llvm::LLVMContext *)&v861, v406);
      if (v862 >= 0x41 && v861) {
        MEMORY[0x1D25D9CB0](v861, 0x1000C8000313F17);
      }
      int v897 = v411;
      __int16 v864 = 257;
      uint64_t v385 = sub_1CB845BAC((uint64_t *)&v899, v402, v403, (uint64_t *)&v896, 2, (uint64_t)&v861, 0);
      *(void *)(v385 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v385 + 64), **(uint64_t ***)v385, 0, 67);
      __int16 v864 = 257;
      unsigned int v412 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v385, 0x20uLL, 0);
      unsigned int v413 = sub_1CC2429AC((uint64_t)&v899, v385, (uint64_t)v412, (uint64_t)&v861, 0);
      uint64_t v386 = (uint64_t)v413;
      uint64_t v414 = *(void *)(*v375 + 48);
      __int16 v898 = 257;
      if (*(void *)v413 != v414)
      {
        if (*((unsigned __int8 *)v413 + 16) <= 0x14u)
        {
          uint64_t v593 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v906 + 28))(v906, 38, v413, v414);
          uint64_t v386 = v593;
          if (v593 && *(unsigned __int8 *)(v593 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, llvm::Instruction **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v593, &v896, v903, v904);
            if (v900)
            {
              uint64_t v810 = v899;
              unint64_t v811 = &v899[16 * v900];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v386, *(_DWORD *)v810, *((llvm::MDNode **)v810 + 1));
                v810 += 16;
              }
              while (v810 != v811);
            }
            unsigned int v387 = v838;
          }
        }
        else
        {
          LOWORD(v882) = 257;
          uint64_t v386 = (uint64_t)llvm::CastInst::Create(38, (uint64_t)v413, v414, (const char **)&v878, 0);
          (*(void (**)(void *, uint64_t, llvm::Instruction **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v386, &v896, v903, v904);
          if (v900)
          {
            char v415 = v899;
            int v416 = &v899[16 * v900];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v386, *(_DWORD *)v415, *((llvm::MDNode **)v415 + 1));
              v415 += 16;
            }
            while (v415 != v416);
          }
        }
      }
      uint64_t v626 = *(void *)(*v375 + 24);
      __int16 v892 = 257;
      if (*(void *)v385 != v626)
      {
        if (*(unsigned __int8 *)(v385 + 16) <= 0x14u)
        {
          uint64_t v385 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v906 + 28))(v906, 38, v385, v626);
          if (v385) {
            BOOL v627 = *(unsigned __int8 *)(v385 + 16) >= 0x1Cu;
          }
          else {
            BOOL v627 = 0;
          }
          uint64_t v378 = &unk_1EBCE7000;
          if (v627)
          {
            (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v385, &v888, v903, v904);
            if (v900)
            {
              BOOL v808 = v899;
              uint64_t v809 = &v899[16 * v900];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v385, *(_DWORD *)v808, *((llvm::MDNode **)v808 + 1));
                v808 += 16;
              }
              while (v808 != v809);
            }
            unsigned int v387 = v838;
            uint64_t v378 = &unk_1EBCE7000;
          }
          goto LABEL_823;
        }
        LOWORD(v882) = 257;
        uint64_t v385 = (uint64_t)llvm::CastInst::Create(38, v385, v626, (const char **)&v878, 0);
        (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v385, &v888, v903, v904);
        if (v900)
        {
          int v741 = v899;
          uint64_t v742 = &v899[16 * v900];
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v385, *(_DWORD *)v741, *((llvm::MDNode **)v741 + 1));
            v741 += 16;
          }
          while (v741 != v742);
        }
      }
      uint64_t v378 = &unk_1EBCE7000;
LABEL_823:
      if (v899 != v901) {
        free(v899);
      }
      goto LABEL_825;
    case 0x3D:
      uint64_t v115 = *(a2 - 8);
      unint64_t v117 = sub_1CB83544C(*(void *)(a2[5][7] + 40) + 272, *v115) + 7;
      if (v116 == 1) {
      if (v117 < 8)
      }
        return;
      int v118 = *((unsigned __int8 *)v2 + 16);
      if (v118 == 60 || v118 == 61)
      {
        if ((*((_WORD *)v2 + 9) & 0x380) == 0) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }
      if ((v118 - 63) < 3) {
LABEL_86:
      }
        *((_WORD *)v2 + 9) = word_1CFB27FA0[((unint64_t)*((unsigned __int16 *)v2 + 9) >> 7) & 7] | *((_WORD *)v2 + 9) & 0xFC7F;
LABEL_87:
      int v119 = sub_1CCAF0410();
      int v120 = *((unsigned __int8 *)v2 + 16);
      unint64_t v827 = v117;
      if (v119)
      {
        if (v120 == 60 || v120 == 61) {
          BOOL v121 = (*((_WORD *)v2 + 9) & 0x380) != 0;
        }
        else {
          BOOL v121 = (v120 - 63) <= 2;
        }
        int v122 = !v121;
      }
      else
      {
        int v122 = 0;
      }
      uint64_t v894 = 0;
      uint64_t v893 = 0;
      v895[0] = 0;
      unsigned int v855 = 0;
      unint64_t v856 = 0;
      uint64_t v857 = 0;
      if (v120 == 60 || v120 == 61)
      {
        BOOL v226 = *v3;
        if ((*((_WORD *)v2 + 9) & 0x380) == 0)
        {
LABEL_280:
          uint64_t v230 = sub_1CCAF68D0((uint64_t)v226, (uint64_t)v115);
          goto LABEL_281;
        }
      }
      else
      {
        if ((v120 - 63) >= 3)
        {
          BOOL v226 = *v3;
          goto LABEL_280;
        }
        BOOL v226 = *v3;
      }
      uint64_t v227 = *v226;
      if ((*(_DWORD *)(*v115 + 8) & 0xFE) != 0x10)
      {
        uint64_t v234 = *(uint64_t **)(v227 + 72);
        goto LABEL_282;
      }
      BOOL v228 = sub_1CCAF7854(v227, *v115);
      uint64_t v230 = llvm::ConstantAggregateZero::get(v228, v229);
LABEL_281:
      uint64_t v234 = v230;
LABEL_282:
      v832 = v2;
      if (v122)
      {
        int v258 = (char *)operator new(8uLL);
        *(void *)int v258 = v234;
        int v259 = v258 + 8;
        v895[0] = v258 + 8;
        uint64_t v893 = v258;
        uint64_t v894 = (uint64_t)(v258 + 8);
        BOOL v260 = sub_1CCAF6F18(*v3, (uint64_t)v115);
        unsigned int v261 = (char *)operator new(8uLL);
        *(void *)unsigned int v261 = v260;
        int v262 = v261 + 8;
        unint64_t v856 = v261 + 8;
        uint64_t v857 = v261 + 8;
        unsigned int v855 = v261;
      }
      else
      {
        unsigned int v261 = 0;
        int v262 = 0;
        int v258 = 0;
        int v259 = 0;
      }
      unsigned int v263 = *v3;
      if (byte_1EBCE75C8)
      {
        unsigned int v264 = sub_1CCAF68D0((uint64_t)v263, (uint64_t)*(v832 - 4));
        uint64_t v265 = v264;
        if (v122)
        {
          uint64_t v266 = v259 - v258;
          uint64_t v267 = (v259 - v258) >> 3;
          unint64_t v268 = v267 + 1;
          if ((unint64_t)(v267 + 1) >> 61) {
            goto LABEL_1183;
          }
          if (v266 >> 2 > v268) {
            unint64_t v268 = v266 >> 2;
          }
          unint64_t v269 = (unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v268;
          uint64_t v836 = v3;
          if (v269)
          {
            int __pc = v122;
            if (v269 >> 61) {
              goto LABEL_1186;
            }
            unsigned int v270 = v234;
            unsigned int v271 = v264;
            unsigned int v272 = (char *)operator new(8 * v269);
            uint64_t v265 = v271;
            uint64_t v234 = v270;
            int v122 = __pc;
          }
          else
          {
            unsigned int v272 = 0;
          }
          unint64_t v275 = (uint64_t **)&v272[8 * v267];
          int v276 = &v272[8 * v269];
          __pd = v265;
          llvm::Instruction *v275 = v265;
          BOOL v277 = v275 + 1;
          if (v259 != v258)
          {
            unint64_t v278 = (v259 - v258 - 8) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v275 = (uint64_t **)&v272[v266 - v278 - 8];
            memcpy(v275, &v259[-v278 - 8], v278 + 8);
          }
          uint64_t v893 = v275;
          v895[0] = v276;
          if (v258) {
            operator delete(v258);
          }
          uint64_t v894 = (uint64_t)v277;
          uint64_t v3 = v836;
          uint64_t v279 = sub_1CCAF6F18(*v836, (uint64_t)*(v832 - 4));
          uint64_t v280 = v262 - v261;
          uint64_t v281 = (v262 - v261) >> 3;
          unint64_t v282 = v281 + 1;
          if ((unint64_t)(v281 + 1) >> 61) {
            goto LABEL_1183;
          }
          uint64_t v283 = v279;
          if (v280 >> 2 > v282) {
            unint64_t v282 = v280 >> 2;
          }
          if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v284 = v282;
          }
          if (v284)
          {
            if (v284 >> 61) {
              goto LABEL_1186;
            }
            uint64_t v285 = (char *)operator new(8 * v284);
          }
          else
          {
            uint64_t v285 = 0;
          }
          __int16 v291 = (llvm::Instruction **)&v285[8 * v281];
          llvm::Value *v291 = v283;
          uint64_t v292 = v291 + 1;
          if (v262 != v261)
          {
            do
            {
              int v293 = (llvm::Instruction *)*((void *)v262 - 1);
              v262 -= 8;
              *--__int16 v291 = v293;
            }
            while (v262 != v261);
            unsigned int v261 = (char *)v855;
          }
          unsigned int v855 = v291;
          uint64_t v857 = &v285[8 * v284];
          if (v261) {
            operator delete(v261);
          }
          unint64_t v856 = v292;
          uint64_t v265 = __pd;
        }
        int v273 = v832;
        uint64_t v274 = sub_1CCAFB0E8((uint64_t)*v3, v234, v265, (const llvm::Instruction *)v832);
      }
      else
      {
        int v273 = v832;
        uint64_t v274 = sub_1CCAF728C((uint64_t)v263, v234, (const llvm::Instruction *)v832);
      }
      __pe = v274;
      if (v122) {
        BOOL v294 = sub_1CCAFBD40((uint64_t)*v3, &v893, &v855, (const llvm::Instruction *)v273, 0);
      }
      else {
        BOOL v294 = 0;
      }
      unsigned int v295 = *v3;
      uint64_t v296 = (llvm::CastInst *)*(v273 - 4);
      unint64_t v297 = *((unsigned __int16 *)v273 + 9);
      int v298 = sub_1CCAF0410();
      if (v294) {
        int v299 = v298;
      }
      else {
        int v299 = 0;
      }
      int v819 = v299;
      if (v296 && *((unsigned char *)v296 + 16) == 59)
      {
        v899 = 0;
        int v515 = sub_1CD40EA84(v295[20], *((_DWORD *)v295 + 44), (uint64_t)v296, &v899);
        uint64_t v516 = v899;
        if (v515 && v899 != (char *)(v295[20] + 16 * *((unsigned int *)v295 + 44)))
        {
          size_t v518 = 0;
          uint64_t v519 = **v273;
          v899 = v901;
          uint64_t v900 = 0x200000000;
          uint64_t v905 = v519;
          uint64_t v906 = &v914;
          uint64_t v907 = v915;
          uint64_t v908 = 0;
          int v909 = 0;
          __int16 v910 = 512;
          char v911 = 7;
          uint64_t v912 = 0;
          uint64_t v913 = 0;
          unsigned int v914 = &unk_1F2616E88;
          v915[0] = &unk_1F2617008;
          uint64_t v520 = v273[6];
          int v903 = v273[5];
          unint64_t v904 = v273 + 3;
          unsigned int v861 = v520;
          if (v520)
          {
            llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v520, 2);
            size_t v518 = v861;
          }
          uint64_t v521 = (uint64_t)v296;
          sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v518);
          if (!v861)
          {
LABEL_666:
            uint64_t v522 = *((void *)v516 + 1);
            char v523 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v903[7] + 40) + 272), (llvm::Type *)*__pe, 1);
            __int16 v524 = (char *)operator new(0x80uLL);
            *((_DWORD *)v524 + 21) = *((_DWORD *)v524 + 21) & 0x38000000 | 2;
            *(void *)__int16 v524 = 0;
            *((void *)v524 + 2) = 0;
            *((void *)v524 + 1) = 0;
            *((void *)v524 + 5) = 0;
            *((void *)v524 + 6) = 0;
            *((void *)v524 + 4) = 0;
            unint64_t v525 = v524 + 32;
            *((void *)v524 + 8) = **(void **)*__pe + 1576;
            uint64_t v526 = (llvm::Instruction *)(v524 + 64);
            *((void *)v524 + 3) = v524 + 64;
            *((void *)v524 + 7) = v524 + 64;
            *((void *)v524 + 9) = 0;
            v524[80] = 61;
            v524[81] = 0;
            *((_WORD *)v524 + 41) = 0;
            *((_DWORD *)v524 + 21) = 2;
            *(_OWORD *)(v524 + 88) = 0u;
            *(_OWORD *)(v524 + 104) = 0u;
            *((_DWORD *)v524 + 30) = 0;
            *(void *)__int16 v524 = __pe;
            uint64_t v527 = __pe + 1;
            uint64_t v528 = __pe[1];
            *((void *)v524 + 1) = v528;
            if (v528) {
              *(void *)(v528 + 16) = v524 + 8;
            }
            *((void *)v524 + 2) = v527;
            *uint64_t v527 = v524;
            if (*((void *)v524 + 4))
            {
              **((void **)v524 + 6) = *((void *)v524 + 5);
              uint64_t v799 = *((void *)v524 + 5);
              if (v799) {
                *(void *)(v799 + 16) = *((void *)v524 + 6);
              }
            }
            void *v525 = v522;
            if (v522)
            {
              uint64_t v531 = *(void *)(v522 + 8);
              long long v530 = (void *)(v522 + 8);
              uint64_t v529 = v531;
              *((void *)v524 + 5) = v531;
              if (v531) {
                *(void *)(v529 + 16) = v524 + 40;
              }
              *((void *)v524 + 6) = v530;
              void *v530 = v525;
            }
            *((_WORD *)v524 + 41) = 2 * (v523 & 0x3F);
            v524[124] = 1;
            LOWORD(v882) = 257;
            (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v526, &v878, v903, v904);
            if (v900)
            {
              int v756 = v899;
              unsigned int v757 = &v899[16 * v900];
              do
              {
                llvm::Instruction::setMetadata(v526, *(_DWORD *)v756, *((llvm::MDNode **)v756 + 1));
                v756 += 16;
              }
              while (v756 != v757);
            }
            if (v819 && !sub_1CCAFABC8((uint64_t)__pe))
            {
              unsigned int v878 = 0;
              if (sub_1CD40EA84(v295[23], *((_DWORD *)v295 + 50), v521, &v878)) {
                unsigned int v755 = v878;
              }
              else {
                unsigned int v755 = (void *)(v295[23] + 16 * *((unsigned int *)v295 + 50));
              }
              uint64_t v761 = v755[1];
              char v762 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v903[7] + 40) + 272), *(llvm::Type **)v294, 1);
              unsigned int v763 = (char *)operator new(0x80uLL);
              *((_DWORD *)v763 + 21) = *((_DWORD *)v763 + 21) & 0x38000000 | 2;
              *(void *)unsigned int v763 = 0;
              *((void *)v763 + 2) = 0;
              *((void *)v763 + 1) = 0;
              *((void *)v763 + 5) = 0;
              *((void *)v763 + 6) = 0;
              *((void *)v763 + 4) = 0;
              unsigned int v764 = v763 + 32;
              *((void *)v763 + 8) = ***(void ***)v294 + 1576;
              BOOL v765 = (llvm::Instruction *)(v763 + 64);
              *((void *)v763 + 3) = v763 + 64;
              *((void *)v763 + 7) = v763 + 64;
              *((void *)v763 + 9) = 0;
              v763[80] = 61;
              v763[81] = 0;
              *((_WORD *)v763 + 41) = 0;
              *((_DWORD *)v763 + 21) = 2;
              *(_OWORD *)(v763 + 88) = 0u;
              *(_OWORD *)(v763 + 104) = 0u;
              *((_DWORD *)v763 + 30) = 0;
              *(void *)unsigned int v763 = v294;
              uint64_t v768 = *((void *)v294 + 1);
              v767 = (void *)((char *)v294 + 8);
              uint64_t v766 = v768;
              *((void *)v763 + 1) = v768;
              if (v768) {
                *(void *)(v766 + 16) = v763 + 8;
              }
              *((void *)v763 + 2) = v767;
              void *v767 = v763;
              if (*((void *)v763 + 4))
              {
                **((void **)v763 + 6) = *((void *)v763 + 5);
                uint64_t v812 = *((void *)v763 + 5);
                if (v812) {
                  *(void *)(v812 + 16) = *((void *)v763 + 6);
                }
              }
              *unsigned int v764 = v761;
              if (v761)
              {
                uint64_t v771 = *(void *)(v761 + 8);
                unint64_t v770 = (void *)(v761 + 8);
                uint64_t v769 = v771;
                *((void *)v763 + 5) = v771;
                if (v771) {
                  *(void *)(v769 + 16) = v763 + 40;
                }
                *((void *)v763 + 6) = v770;
                void *v770 = v764;
              }
              *((_WORD *)v763 + 41) = 2 * (v762 & 0x3F);
              v763[124] = 1;
              LOWORD(v882) = 257;
              (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v765, &v878, v903, v904);
              if (v900)
              {
                uint64_t v784 = v899;
                std::string v785 = &v899[16 * v900];
                do
                {
                  llvm::Instruction::setMetadata(v765, *(_DWORD *)v784, *((llvm::MDNode **)v784 + 1));
                  v784 += 16;
                }
                while (v784 != v785);
              }
              int v273 = v832;
            }
            unsigned int v532 = v899;
            if (v899 != v901) {
              goto LABEL_677;
            }
            goto LABEL_729;
          }
          int v732 = *(unsigned __int8 *)v861;
          if ((v732 - 4) > 0x1E)
          {
            if ((v732 - 3) >= 0xFFFFFFFE) {
              __int32 v758 = v861;
            }
            else {
              __int32 v758 = 0;
            }
            if ((v732 - 3) < 0xFFFFFFFE)
            {
              int v273 = v832;
              if (v732 == 3) {
                *((void *)v861 + 1) = 0;
              }
              goto LABEL_666;
            }
            unint64_t v734 = (unint64_t)v758 + 8;
          }
          else
          {
            int v273 = v832;
            if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
              goto LABEL_666;
            }
            uint64_t v733 = *((void *)v861 + 2);
            if ((v733 & 4) == 0) {
              goto LABEL_666;
            }
            unint64_t v734 = v733 & 0xFFFFFFFFFFFFFFF8;
            if (!v734) {
              goto LABEL_666;
            }
          }
          unsigned int v878 = &v861;
          sub_1CC5FA668(v734 + 16, &v878);
          int v273 = v832;
          goto LABEL_666;
        }
      }
      unint64_t v300 = v827;
      unint64_t v301 = v827 >> 3;
      unsigned int v302 = __clz(1 << (v297 >> 1)) ^ 0x3F;
      if (byte_1EBCE7448) {
        __int16 v303 = v302;
      }
      else {
        __int16 v303 = 0;
      }
      if (sub_1CCAFABC8((uint64_t)__pe))
      {
        sub_1CCAFD67C(v295, v296, v301, v303, v273);
        goto LABEL_729;
      }
      BOOL v817 = v296;
      unsigned int v304 = 0;
      uint64_t v305 = **v273;
      unsigned int v861 = v863;
      unint64_t v862 = 0x200000000;
      uint64_t v867 = v305;
      uint64_t v868 = &v876;
      unsigned int v869 = &v877;
      uint64_t v870 = 0;
      int v871 = 0;
      __int16 v872 = 512;
      char v873 = 7;
      uint64_t v874 = 0;
      uint64_t v875 = 0;
      char v876 = &unk_1F2616E88;
      unsigned int v306 = v273[6];
      v865 = v273[5];
      uint64_t v866 = v273 + 3;
      char v815 = v273 + 3;
      uint64_t v877 = &unk_1F2617008;
      unsigned int v878 = v306;
      if (v306)
      {
        llvm::MetadataTracking::track((uint64_t)&v878, (unsigned __int8 *)v306, 2);
        unsigned int v304 = v878;
      }
      sub_1CB8461A4((uint64_t)&v861, 0, (uint64_t)v304);
      unsigned int v816 = v302;
      if (!v878) {
        goto LABEL_348;
      }
      int v623 = *(unsigned __int8 *)v878;
      if ((v623 - 4) > 0x1E)
      {
        if ((v623 - 3) >= 0xFFFFFFFE) {
          uint64_t v685 = v878;
        }
        else {
          uint64_t v685 = 0;
        }
        if ((v623 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v625 = (unint64_t)v685 + 8;
LABEL_929:
          v899 = (char *)&v878;
          sub_1CC5FA668(v625 + 16, &v899);
          unint64_t v300 = v827;
          int v273 = v832;
          goto LABEL_348;
        }
        unint64_t v300 = v827;
        int v273 = v832;
        if (v623 == 3) {
          *((void *)v878 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v878 + 1) & 0x7F) == 2 || *((_DWORD *)v878 + 3))
      {
        uint64_t v624 = *((void *)v878 + 2);
        if ((v624 & 4) != 0)
        {
          unint64_t v625 = v624 & 0xFFFFFFFFFFFFFFF8;
          if (v625) {
            goto LABEL_929;
          }
        }
      }
LABEL_348:
      uint64_t v814 = (uint64_t)v294;
      int v837 = v3;
      uint64_t v826 = v295;
      uint64_t v829 = sub_1CCAFC3A8(*v295, v296, (v297 >> 1) & 0x3F, v273);
      uint64_t v813 = v307;
      __int16 v308 = 2 * v303;
      if (v300 < 0x40)
      {
        int v319 = 0;
        unint64_t v320 = v301;
      }
      else
      {
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(*v295 + 48), (llvm::Type *)8);
        int v821 = v309;
        unsigned int v312 = llvm::UndefValue::get(v309, v310);
        for (uint64_t i = 0; i != 8; ++i)
        {
          uint64_t v314 = **(void **)(*v295 + 8);
          uint64_t v315 = *(llvm::ConstantInt **)(v314 + 1960);
          unint64_t v316 = *(unsigned int *)(v314 + 1968);
          LODWORD(v900) = v316 >> 8;
          if (v316 >> 8 > 0x40) {
            operator new[]();
          }
          if (v316 <= 0xFF) {
            unint64_t v317 = 0;
          }
          else {
            unint64_t v317 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v316) + 63);
          }
          v899 = (char *)(v317 & i);
          BOOL v318 = (unsigned __int8 *)llvm::ConstantInt::get(v315, (llvm::LLVMContext *)&v899, v311);
          if (v900 >= 0x41 && v899) {
            MEMORY[0x1D25D9CB0](v899, 0x1000C8000313F17);
          }
          __int16 v902 = 257;
          unsigned int v312 = sub_1CB84478C((uint64_t)&v861, (unsigned __int8 *)v312, (unsigned __int8 *)__pe, v318, (uint64_t)&v899);
        }
        unint64_t v321 = llvm::PointerType::get(v821, 0);
        LOWORD(v882) = 257;
        if (*(void *)v829 == v321)
        {
          unsigned int v322 = v829;
        }
        else if (v829[16] <= 0x14u)
        {
          unsigned int v322 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t))*v868 + 28))(v868, 49);
          if (v322) {
            BOOL v333 = v322[16] >= 0x1Cu;
          }
          else {
            BOOL v333 = 0;
          }
          if (v333)
          {
            (*((void (**)(void **, unsigned __int8 *, void **, uint64_t *, void **))*v869 + 2))(v869, v322, &v878, v865, v866);
            if (v862)
            {
              int v797 = (llvm::MDNode **)v861;
              int64_t v798 = (llvm::MDNode **)((char *)v861 + 16 * v862);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v322, *(_DWORD *)v797, v797[1]);
                v797 += 2;
              }
              while (v797 != v798);
            }
          }
        }
        else
        {
          __int16 v902 = 257;
          unsigned int v322 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v829, v321, (const char **)&v899, 0);
          (*((void (**)(void **, unsigned __int8 *, void **, uint64_t *, void **))*v869 + 2))(v869, v322, &v878, v865, v866);
          if (v862)
          {
            unsigned int v323 = (llvm::MDNode **)v861;
            uint64_t v324 = (llvm::MDNode **)((char *)v861 + 16 * v862);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v322, *(_DWORD *)v323, v323[1]);
              v323 += 2;
            }
            while (v323 != v324);
          }
        }
        int v334 = 0;
        uint64_t v335 = (void *)((char *)v312 + 8);
        unint64_t v320 = v301;
        do
        {
          __int16 v902 = 257;
          uint64_t v336 = sub_1CB930CF4((uint64_t *)&v861, (uint64_t)v821, (const llvm::APInt *)v322, v334, (uint64_t)&v899);
          long long v337 = (char *)operator new(0x80uLL);
          *((_DWORD *)v337 + 21) = *((_DWORD *)v337 + 21) & 0x38000000 | 2;
          *(void *)long long v337 = 0;
          *((void *)v337 + 2) = 0;
          *((void *)v337 + 1) = 0;
          *((void *)v337 + 5) = 0;
          *((void *)v337 + 6) = 0;
          *((void *)v337 + 4) = 0;
          unsigned int v338 = (llvm::Instruction **)(v337 + 32);
          *((void *)v337 + 8) = ***(void ***)v312 + 1576;
          unsigned int v339 = (llvm::Instruction *)(v337 + 64);
          *((void *)v337 + 3) = v337 + 64;
          *((void *)v337 + 7) = v337 + 64;
          *((void *)v337 + 9) = 0;
          v337[80] = 61;
          v337[81] = 0;
          *((_WORD *)v337 + 41) = 0;
          *((_DWORD *)v337 + 21) = 2;
          *(_OWORD *)(v337 + 88) = 0u;
          *(_OWORD *)(v337 + 104) = 0u;
          *((_DWORD *)v337 + 30) = 0;
          *(void *)long long v337 = v312;
          uint64_t v340 = *((void *)v312 + 1);
          *((void *)v337 + 1) = v340;
          if (v340) {
            *(void *)(v340 + 16) = v337 + 8;
          }
          *((void *)v337 + 2) = v335;
          *uint64_t v335 = v337;
          if (*((void *)v337 + 4))
          {
            **((void **)v337 + 6) = *((void *)v337 + 5);
            uint64_t v346 = *((void *)v337 + 5);
            if (v346) {
              *(void *)(v346 + 16) = *((void *)v337 + 6);
            }
          }
          *unsigned int v338 = v336;
          if (v336)
          {
            uint64_t v343 = *((void *)v336 + 1);
            unsigned int v342 = (llvm::Instruction ***)((char *)v336 + 8);
            uint64_t v341 = v343;
            *((void *)v337 + 5) = v343;
            if (v343) {
              *(void *)(v341 + 16) = v337 + 40;
            }
            *((void *)v337 + 6) = v342;
            *unsigned int v342 = v338;
          }
          *((_WORD *)v337 + 41) = v308;
          v337[124] = 1;
          __int16 v902 = 257;
          (*((void (**)(void **, llvm::Instruction *, char **, uint64_t *, void **))*v869 + 2))(v869, v339, &v899, v865, v866);
          if (v862)
          {
            int v344 = (llvm::MDNode **)v861;
            BOOL v345 = (llvm::MDNode **)((char *)v861 + 16 * v862);
            do
            {
              llvm::Instruction::setMetadata(v339, *(_DWORD *)v344, v344[1]);
              v344 += 2;
            }
            while (v344 != v345);
          }
          v320 -= 8;
          ++v334;
        }
        while (v320 > 7);
        int v319 = 8 * v334;
      }
      if (v320)
      {
        uint64_t v347 = __pe + 1;
        do
        {
          uint64_t v348 = *(void *)(*v826 + 48);
          __int16 v902 = 257;
          int64_t v349 = sub_1CB930CF4((uint64_t *)&v861, v348, (const llvm::APInt *)v829, v319, (uint64_t)&v899);
          uint64_t v350 = (char *)operator new(0x80uLL);
          *((_DWORD *)v350 + 21) = *((_DWORD *)v350 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v350 = 0;
          *((void *)v350 + 2) = 0;
          *((void *)v350 + 1) = 0;
          *((void *)v350 + 5) = 0;
          *((void *)v350 + 6) = 0;
          *((void *)v350 + 4) = 0;
          uint64_t v351 = (llvm::Instruction **)(v350 + 32);
          *((void *)v350 + 8) = **(void **)*__pe + 1576;
          uint64_t v352 = (llvm::Instruction *)(v350 + 64);
          *((void *)v350 + 3) = v350 + 64;
          *((void *)v350 + 7) = v350 + 64;
          *((void *)v350 + 9) = 0;
          v350[80] = 61;
          v350[81] = 0;
          *((_WORD *)v350 + 41) = 0;
          *((_DWORD *)v350 + 21) = 2;
          *(_OWORD *)(v350 + 88) = 0u;
          *(_OWORD *)(v350 + 104) = 0u;
          *((_DWORD *)v350 + 30) = 0;
          *(void *)uint64_t v350 = __pe;
          uint64_t v353 = __pe[1];
          *((void *)v350 + 1) = v353;
          if (v353) {
            *(void *)(v353 + 16) = v350 + 8;
          }
          *((void *)v350 + 2) = v347;
          *uint64_t v347 = v350;
          if (*((void *)v350 + 4))
          {
            **((void **)v350 + 6) = *((void *)v350 + 5);
            uint64_t v359 = *((void *)v350 + 5);
            if (v359) {
              *(void *)(v359 + 16) = *((void *)v350 + 6);
            }
          }
          *uint64_t v351 = v349;
          if (v349)
          {
            uint64_t v356 = *((void *)v349 + 1);
            uint64_t v355 = (llvm::Instruction ***)((char *)v349 + 8);
            uint64_t v354 = v356;
            *((void *)v350 + 5) = v356;
            if (v356) {
              *(void *)(v354 + 16) = v350 + 40;
            }
            *((void *)v350 + 6) = v355;
            *uint64_t v355 = v351;
          }
          *((_WORD *)v350 + 41) = v308;
          v350[124] = 1;
          __int16 v902 = 257;
          (*((void (**)(void **, llvm::Instruction *, char **, uint64_t *, void **))*v869 + 2))(v869, v352, &v899, v865, v866);
          if (v862)
          {
            uint64_t v357 = (llvm::MDNode **)v861;
            std::string::size_type v358 = (llvm::MDNode **)((char *)v861 + 16 * v862);
            do
            {
              llvm::Instruction::setMetadata(v352, *(_DWORD *)v357, v357[1]);
              v357 += 2;
            }
            while (v357 != v358);
          }
          ++v319;
          --v320;
        }
        while (v320);
      }
      int v273 = v832;
      if (!v819) {
        goto LABEL_728;
      }
      if (HIBYTE(word_1EBCE73B8) <= v816) {
        unsigned __int8 v360 = v816;
      }
      else {
        unsigned __int8 v360 = HIBYTE(word_1EBCE73B8);
      }
      unsigned int v361 = (llvm::ConstantInt **)sub_1CCAF728C((uint64_t)v826, __pe, (const llvm::Instruction *)v832);
      uint64_t v362 = 0;
      uint64_t v363 = **v832;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v363;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      uint64_t v364 = (unsigned __int8 *)v832[6];
      int v903 = v832[5];
      unint64_t v904 = v815;
      uint64_t v896 = (llvm::Instruction *)v364;
      if (v364)
      {
        llvm::MetadataTracking::track((uint64_t)&v896, v364, 2);
        uint64_t v362 = (uint64_t)v896;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, v362);
      if (!v896) {
        goto LABEL_426;
      }
      int v636 = *(unsigned __int8 *)v896;
      if ((v636 - 4) > 0x1E)
      {
        if ((v636 - 3) >= 0xFFFFFFFE) {
          unsigned int v708 = v896;
        }
        else {
          unsigned int v708 = 0;
        }
        if ((v636 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v638 = (unint64_t)v708 + 8;
LABEL_973:
          unsigned int v878 = &v896;
          sub_1CC5FA668(v638 + 16, &v878);
          goto LABEL_426;
        }
        if (v636 == 3) {
          *((void *)v896 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v896 + 1) & 0x7F) == 2 || *((_DWORD *)v896 + 3))
      {
        uint64_t v637 = *((void *)v896 + 2);
        if ((v637 & 4) != 0)
        {
          unint64_t v638 = v637 & 0xFFFFFFFFFFFFFFF8;
          if (v638) {
            goto LABEL_973;
          }
        }
      }
LABEL_426:
      unsigned int v365 = *((unsigned __int8 *)v361 + 16);
      if (v365 > 0x14 || !v361)
      {
        if (dword_1EBCE7A48 < 0 || *((_DWORD *)v826 + 88) < dword_1EBCE7A48)
        {
          unsigned int v878 = "_dfscmp";
          LOWORD(v882) = 259;
          if ((*((_DWORD *)*v361 + 2) & 0xFFFFFF00) != 0x100)
          {
            uint64_t v369 = llvm::ConstantInt::get(*v361, 0, 0);
            unsigned int v361 = (llvm::ConstantInt **)sub_1CB845F20((uint64_t)&v899, 33, v361, (uint64_t)v369, (uint64_t)&v878);
          }
          if (v904) {
            uint64_t v370 = (uint64_t)(v904 - 3);
          }
          else {
            uint64_t v370 = 0;
          }
          sub_1CD1290BC((uint64_t)v361, v370);
        }
        unsigned int v572 = *(uint64_t ***)(*v826 + 504);
        __int16 v573 = *(uint64_t ***)(*v826 + 512);
        int v888 = v361;
        uint64_t v574 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v905 + 1912), 0);
        LOWORD(v882) = 257;
        uint64_t v889 = sub_1CC277FE0((uint64_t)&v899, v817, v574, (uint64_t)&v878, v575);
        uint64_t v577 = *(void *)(*v826 + 64);
        uint64_t v578 = *(llvm::ConstantInt **)v577;
        unint64_t v579 = *(unsigned int *)(v577 + 8);
        LODWORD(v897) = v579 >> 8;
        if (v579 >> 8 > 0x40) {
          operator new[]();
        }
        if (v579 <= 0xFF) {
          unint64_t v580 = 0;
        }
        else {
          unint64_t v580 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v579) + 63);
        }
        uint64_t v896 = (llvm::Instruction *)(v580 & v301);
        unsigned int v581 = (unsigned __int8 *)llvm::ConstantInt::get(v578, (llvm::LLVMContext *)&v896, v576);
        if (v897 >= 0x41 && v896) {
          MEMORY[0x1D25D9CB0](v896, 0x1000C8000313F17);
        }
        uint64_t v890 = v581;
        long long v891 = (llvm::Instruction *)v814;
        __int16 v898 = 257;
        sub_1CB845BAC((uint64_t *)&v899, v572, v573, (uint64_t *)&v888, 4, (uint64_t)&v896, 0);
        goto LABEL_725;
      }
      if (v365 == 17)
      {
        if (v361[4] == (llvm::ConstantInt *)&unk_1CFB2E344) {
          unint64_t v791 = v361[5];
        }
        else {
          unint64_t v791 = (llvm::ConstantInt *)(v361 + 3);
        }
      }
      else
      {
        if ((*((_DWORD *)*v361 + 2) & 0xFE) != 0x12
          || (uint64_t v793 = llvm::Constant::getSplatValue((llvm::Constant *)v361, 0)) == 0
          || v793[16] != 17)
        {
          int v366 = *((unsigned __int8 *)v361 + 16);
          if (v366 == 16)
          {
            uint64_t v367 = *((unsigned int *)v361 + 8);
            if (v367 < 0x41)
            {
              if (!v361[3]) {
                goto LABEL_725;
              }
              goto LABEL_433;
            }
            int v786 = 0;
            int64_t v787 = (unint64_t)(v367 + 63) >> 6;
            do
            {
              BOOL v669 = v787-- < 1;
              if (v669) {
                break;
              }
              unint64_t v788 = *((void *)v361[3] + v787);
              v786 += __clz(v788);
            }
            while (!v788);
            int v789 = v367 | 0xFFFFFFC0;
            if ((v367 & 0x3F) == 0) {
              int v789 = 0;
            }
            if (v786 + v789 == v367) {
              goto LABEL_725;
            }
          }
          else
          {
            if (v366 != 17)
            {
              if ((v366 - 18) >= 3 && v366 != 13) {
                goto LABEL_433;
              }
              goto LABEL_725;
            }
            if (sub_1CB844168((uint64_t)v361, 0.0)) {
              goto LABEL_725;
            }
          }
LABEL_433:
          BOOL v368 = (llvm::CastInst *)sub_1CCAFE32C((uint64_t)v826, v814, (uint64_t *)&v899);
          sub_1CCAFE050(v826, (uint64_t *)&v899, v368, v813, v301, v360);
          goto LABEL_725;
        }
        if (*((_UNKNOWN **)v793 + 4) == &unk_1CFB2E344) {
          unint64_t v791 = (llvm::ConstantInt *)*((void *)v793 + 5);
        }
        else {
          unint64_t v791 = (llvm::ConstantInt *)(v793 + 24);
        }
      }
      if ((*((unsigned char *)v791 + 28) & 7) != 3) {
        goto LABEL_433;
      }
LABEL_725:
      if (v899 != v901) {
        free(v899);
      }
      int v273 = v832;
LABEL_728:
      unsigned int v532 = (char *)v861;
      uint64_t v3 = v837;
      if (v861 != v863) {
LABEL_677:
      }
        free(v532);
LABEL_729:
      if (!byte_1EBCE7808) {
        goto LABEL_742;
      }
      unsigned int v582 = 0;
      uint64_t v583 = **v273;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v583;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      uint64_t v584 = v273[6];
      int v903 = v273[5];
      unint64_t v904 = v273 + 3;
      unsigned int v861 = v584;
      if (v584)
      {
        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v584, 2);
        unsigned int v582 = v861;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v582);
      if (v861)
      {
        int v603 = *(unsigned __int8 *)v861;
        if ((v603 - 4) > 0x1E)
        {
          if ((v603 - 3) >= 0xFFFFFFFE) {
            int v676 = v861;
          }
          else {
            int v676 = 0;
          }
          if ((v603 - 3) < 0xFFFFFFFE)
          {
            int v273 = v832;
            if (v603 == 3) {
              *((void *)v861 + 1) = 0;
            }
            goto LABEL_733;
          }
          unint64_t v605 = (unint64_t)v676 + 8;
        }
        else
        {
          if ((*((unsigned char *)v861 + 1) & 0x7F) != 2 && !*((_DWORD *)v861 + 3)) {
            goto LABEL_733;
          }
          uint64_t v604 = *((void *)v861 + 2);
          if ((v604 & 4) == 0) {
            goto LABEL_733;
          }
          unint64_t v605 = v604 & 0xFFFFFFFFFFFFFFF8;
          if (!v605) {
            goto LABEL_733;
          }
        }
        unsigned int v878 = &v861;
        sub_1CC5FA668(v605 + 16, &v878);
        int v273 = v832;
      }
LABEL_733:
      uint64_t v585 = (unsigned __int8 *)*(v273 - 4);
      uint64_t v586 = *(void *)(**v3 + 16);
      __int16 v864 = 257;
      if (*(void *)v585 != v586)
      {
        if (v585[16] <= 0x14u)
        {
          uint64_t v589 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v906 + 28))(v906, 49, v585, v586);
          uint64_t v585 = (unsigned __int8 *)v589;
          if (v589)
          {
            if (*(unsigned __int8 *)(v589 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v589, &v861, v903, v904);
              if (v900)
              {
                int v794 = v899;
                uint64_t v795 = &v899[16 * v900];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v585, *(_DWORD *)v794, *((llvm::MDNode **)v794 + 1));
                  v794 += 16;
                }
                while (v794 != v795);
              }
            }
          }
        }
        else
        {
          LOWORD(v882) = 257;
          uint64_t v585 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v585, v586, (const char **)&v878, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v585, &v861, v903, v904);
          if (v900)
          {
            unsigned int v587 = v899;
            uint64_t v588 = &v899[16 * v900];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v585, *(_DWORD *)v587, *((llvm::MDNode **)v587 + 1));
              v587 += 16;
            }
            while (v587 != v588);
          }
        }
      }
      uint64_t v590 = **v3;
      unsigned int v591 = *(uint64_t ***)(v590 + 376);
      unsigned int v592 = *(uint64_t ***)(v590 + 384);
      unsigned int v861 = __pe;
      unint64_t v862 = (unint64_t)v585;
      LOWORD(v882) = 257;
      sub_1CB845BAC((uint64_t *)&v899, v591, v592, (uint64_t *)&v861, 2, (uint64_t)&v878, 0);
      BOOL v107 = v899;
      if (v899 != v901) {
LABEL_1208:
      }
        free(v107);
LABEL_742:
      if (v855) {
        operator delete(v855);
      }
      __n128 v290 = v893;
      if (v893) {
        goto LABEL_745;
      }
      return;
    case 0x3E:
      if (byte_1EBCE7688) {
        goto LABEL_2;
      }
      uint64_t v13 = *a1;
      int v14 = StripPointerGEPsAndCasts((llvm::Value *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
      if (sub_1CCAFC1F0(v13, v14)) {
        goto LABEL_2;
      }
      uint64_t v15 = (uint64_t)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
      uint64_t v16 = *v3;
      uint64_t v17 = sub_1CCAF68D0((uint64_t)*v3, v15);
      v899 = (char *)v2;
      sub_1CC080DE0(v16 + 14, &v899)[1] = v17;
      if (!sub_1CCAF0410()) {
        return;
      }
      uint64_t v18 = *v3;
      uint64_t v19 = sub_1CCAF6F18(*v3, v15);
      if (!sub_1CCAF0410()) {
        return;
      }
      long long v20 = v18 + 17;
      goto LABEL_108;
    case 0x40:
      sub_1CCAFE3A0(a1, *((unsigned char *)a2 + 19) & 0x3F, a2);
      unint64_t v105 = *((unsigned __int16 *)v2 + 9);
      __int16 v24 = word_1CFB27FB0[(v105 >> 2) & 7];
      __int16 v25 = v105 & 0xFFE3;
      goto LABEL_71;
    case 0x41:
      sub_1CCAFE3A0(a1, *((unsigned char *)a2 + 19) & 0x3F, a2);
      __int16 v23 = *((_WORD *)v2 + 9);
      __int16 v24 = *(_WORD *)((char *)&unk_1CFB27FC0 + (v23 & 0xE));
      __int16 v25 = v23 & 0xFFF1;
LABEL_71:
      *((_WORD *)v2 + 9) = v24 | v25;
      return;
    case 0x4D:
      uint64_t v106 = (uint64_t)*(a2 - 4);
      if (!v106 || *(unsigned char *)(v106 + 16) != 84 || (*(_WORD *)(v106 + 18) & 3) != 2)
      {
LABEL_2:
        sub_1CCAFAA94((uint64_t *)v3, v2);
      }
      return;
    case 0x51:
    case 0x52:
      sub_1CCAFE660((uint64_t *)a1, a2);
      return;
    case 0x53:
      int v88 = sub_1CCAF7854(**a1, (uint64_t)*a2);
      int v89 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
      __int16 v902 = 257;
      unsigned int v90 = operator new(0x48uLL);
      v90[1] = v88;
      uint64_t v91 = (llvm::Value *)(v90 + 1);
      *unsigned int v90 = 0;
      v90[2] = 0;
      v90[3] = 0x4000000000000053;
      *((_OWORD *)v90 + 2) = 0u;
      unint64_t v92 = (char *)(v90 + 4);
      *((_OWORD *)v90 + 3) = 0u;
      *((_DWORD *)v90 + 16) = 0;
      int64x2_t v93 = v2[5];
      unint64_t v94 = (uint64_t *)(v2 + 3);
      v90[6] = v93;
      *((_WORD *)v93 + 9) &= ~0x8000u;
      if ((*((unsigned char *)v90 + 31) & 0x10) != 0)
      {
        uint64_t v325 = v93[7];
        if (v325)
        {
          uint64_t v326 = *(llvm::ValueSymbolTable **)(v325 + 104);
          if (v326) {
            llvm::ValueSymbolTable::reinsertValue(v326, v91);
          }
        }
      }
      uint64_t v95 = *v94;
      v90[4] = *v94;
      v90[5] = v94;
      *(void *)(v95 + 8) = v92;
      *unint64_t v94 = (uint64_t)v92;
      *((_DWORD *)v90 + 17) = v89;
      llvm::Value::setNameImpl(v91, (const char **)&v899);
      long long v820 = (llvm::PointerType *)(v2 + 3);
      if (*((unsigned char *)v90 + 24)) {
        goto LABEL_65;
      }
      if ((*((unsigned char *)v90 + 31) & 0x10) == 0) {
        goto LABEL_1006;
      }
      uint64_t v628 = ***(void ***)v91;
      uint64_t v629 = *(void *)(v628 + 152);
      uint64_t v630 = *(unsigned int *)(v628 + 168);
      if (!v630) {
        goto LABEL_998;
      }
      LODWORD(v631) = (v630 - 1) & ((v91 >> 4) ^ (v91 >> 9));
      uint64_t v632 = (llvm::Value **)(v629 + 16 * v631);
      uint64_t v633 = *v632;
      if (*v632 == v91) {
        goto LABEL_999;
      }
      int v634 = 1;
      while (v633 != (llvm::Value *)-4096)
      {
        int v635 = v631 + v634++;
        uint64_t v631 = v635 & (v630 - 1);
        uint64_t v633 = *(llvm::Value **)(v629 + 16 * v631);
        if (v633 == v91)
        {
          uint64_t v632 = (llvm::Value **)(v629 + 16 * v631);
          goto LABEL_999;
        }
      }
LABEL_998:
      uint64_t v632 = (llvm::Value **)(v629 + 16 * v630);
LABEL_999:
      unsigned int v714 = v632[1];
      unint64_t v717 = *(void *)v714;
      unsigned int v715 = (char *)v714 + 16;
      unint64_t v716 = v717;
      if (v717 >= 5 && (*(_DWORD *)v715 == *(_DWORD *)"llvm." ? (BOOL v718 = v715[4] == aLlvm_1[4]) : (BOOL v718 = 0), v718))
      {
        *((_DWORD *)v90 + 10) |= 0x2000u;
        int v719 = llvm::Function::lookupIntrinsicID(v715, v716);
      }
      else
      {
LABEL_1006:
        int v719 = 0;
        *((_DWORD *)v90 + 10) &= ~0x2000u;
      }
      *((_DWORD *)v90 + 11) = v719;
LABEL_65:
      uint64_t v96 = *((unsigned int *)v90 + 17);
      int v97 = operator new(40 * v96);
      *unsigned int v90 = v97;
      if (v96)
      {
        unsigned int v99 = &v97[4 * v96];
        do
        {
          *int v97 = 0;
          v97[1] = 0;
          v97[2] = 0;
          v97[3] = v91;
          v97 += 4;
        }
        while (v97 != v99);
      }
      unsigned int v100 = llvm::UndefValue::get(v88, v98);
      unsigned int v101 = v100;
      int v102 = *((_DWORD *)v2 + 5);
      long long v831 = v2;
      if ((v102 & 0x40000000) != 0)
      {
        uint64_t v104 = (uint64_t **)*(v2 - 1);
        uint64_t v103 = v102 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v103 = v102 & 0x7FFFFFF;
        uint64_t v104 = &v2[-4 * v103];
      }
      uint64_t v828 = (uint64_t **)(v90 + 1);
      uint64_t v835 = v3;
      if (v103)
      {
        BOOL v141 = &v104[4 * *((unsigned int *)v2 + 15)];
        unsigned int v142 = &v141[v103];
        uint64_t v143 = (char **)((char *)v100 + 8);
        LODWORD(v144) = *((_DWORD *)v90 + 17);
        uint64_t v825 = v142;
        do
        {
          uint64_t v145 = *v141;
          int v146 = *((_DWORD *)v90 + 7);
          if ((v146 & 0x7FFFFFF) == v144)
          {
            unsigned int v157 = v144 + (v144 >> 1);
            if (v157 <= 2) {
              uint64_t v158 = 2;
            }
            else {
              uint64_t v158 = v157;
            }
            *((_DWORD *)v90 + 17) = v158;
            if ((v146 & 0x40000000) != 0) {
              unsigned int v159 = (uint64_t *)*v90;
            }
            else {
              unsigned int v159 = (uint64_t *)((char *)v91 - 32 * v144);
            }
            __pa = v159;
            long long v160 = operator new(40 * v158);
            *unsigned int v90 = v160;
            uint64_t v161 = v160;
            do
            {
              *uint64_t v161 = 0;
              v161[1] = 0;
              v161[2] = 0;
              v161[3] = v91;
              v161 += 4;
            }
            while (v161 != &v160[4 * v158]);
            int v162 = *((_DWORD *)v90 + 7);
            if ((v162 & 0x40000000) != 0) {
              uint64_t v163 = (uint64_t)v160;
            }
            else {
              uint64_t v163 = (uint64_t)v91 - 32 * (v162 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v899, __pa, &__pa[4 * v144], v163);
            if (v144)
            {
              memmove((void *)(v163 + 32 * v158), &__pa[4 * v144], 8 * v144);
              uint64_t v164 = 4 * v144;
              do
              {
                int v165 = &__pa[v164];
                if (__pa[v164 - 4])
                {
                  *(void *)*(v165 - 2) = *(v165 - 3);
                  uint64_t v166 = *(v165 - 3);
                  if (v166) {
                    *(void *)(v166 + 16) = *(v165 - 2);
                  }
                }
                v164 -= 4;
              }
              while (v164 * 8);
            }
            operator delete(__pa);
            int v146 = *((_DWORD *)v90 + 7);
            uint64_t v3 = v835;
            unsigned int v142 = v825;
            uint64_t v91 = (llvm::Value *)(v90 + 1);
          }
          uint64_t v147 = (v146 + 1) & 0x7FFFFFF;
          *((_DWORD *)v90 + 7) = v146 & 0xF8000000 | (v146 + 1) & 0x7FFFFFF;
          if ((v146 & 0x40000000) != 0) {
            long long v148 = (char *)*v90;
          }
          else {
            long long v148 = (char *)v91 - 32 * v147;
          }
          uint64_t v149 = (v147 - 1);
          long long v150 = &v148[32 * v149];
          if (*(void *)v150)
          {
            **((void **)v150 + 2) = *((void *)v150 + 1);
            uint64_t v156 = *((void *)v150 + 1);
            if (v156) {
              *(void *)(v156 + 16) = *((void *)v150 + 2);
            }
          }
          *(void *)long long v150 = v101;
          if (v101)
          {
            unsigned int v151 = *v143;
            unsigned int v152 = &v148[32 * v149];
            *((void *)v152 + 1) = *v143;
            if (v151) {
              *((void *)v151 + 2) = v152 + 8;
            }
            *((void *)v152 + 2) = v143;
            *uint64_t v143 = v150;
          }
          int v153 = *((_DWORD *)v90 + 7);
          uint64_t v154 = v153 & 0x7FFFFFF;
          if ((v153 & 0x40000000) != 0) {
            char v155 = (char *)*v90;
          }
          else {
            char v155 = (char *)v91 - 32 * v154;
          }
          uint64_t v144 = *((unsigned int *)v90 + 17);
          *(void *)&v155[32 * v144 + 8 * (v154 - 1)] = v145;
          ++v141;
        }
        while (v141 != v142);
      }
      uint64_t v167 = *v3 + 14;
      unsigned int v168 = v831;
      v899 = (char *)v831;
      sub_1CC080DE0(v167, &v899)[1] = v91;
      if ((sub_1CCAF0410() & 1) == 0)
      {
        uint64_t v172 = 0;
        goto LABEL_207;
      }
      uint64_t v169 = *(void *)(**v3 + 24);
      int v170 = *((_DWORD *)v831 + 5) & 0x7FFFFFF;
      __int16 v902 = 257;
      uint64_t v171 = operator new(0x48uLL);
      v171[1] = v169;
      uint64_t v172 = (llvm::Value *)(v171 + 1);
      *uint64_t v171 = 0;
      v171[2] = 0;
      v171[3] = 0x4000000000000053;
      *((_OWORD *)v171 + 2) = 0u;
      unint64_t v173 = (char *)(v171 + 4);
      *((_OWORD *)v171 + 3) = 0u;
      *((_DWORD *)v171 + 16) = 0;
      int v174 = v831[5];
      v171[6] = v174;
      *((_WORD *)v174 + 9) &= ~0x8000u;
      if ((*((unsigned char *)v171 + 31) & 0x10) != 0)
      {
        uint64_t v533 = v174[7];
        if (v533)
        {
          uint64_t v534 = *(llvm::ValueSymbolTable **)(v533 + 104);
          if (v534) {
            llvm::ValueSymbolTable::reinsertValue(v534, v172);
          }
        }
      }
      uint64_t v175 = *(void *)v820;
      v171[4] = *(void *)v820;
      v171[5] = v820;
      *(void *)(v175 + 8) = v173;
      *(void *)long long v820 = v173;
      *((_DWORD *)v171 + 17) = v170;
      llvm::Value::setNameImpl(v172, (const char **)&v899);
      if (*((unsigned char *)v171 + 24)) {
        goto LABEL_157;
      }
      if ((*((unsigned char *)v171 + 31) & 0x10) == 0) {
        goto LABEL_1068;
      }
      uint64_t v686 = ***(void ***)v172;
      uint64_t v687 = *(void *)(v686 + 152);
      uint64_t v688 = *(unsigned int *)(v686 + 168);
      if (!v688) {
        goto LABEL_1060;
      }
      LODWORD(v689) = (v688 - 1) & ((v172 >> 4) ^ (v172 >> 9));
      unsigned int v690 = (llvm::Value **)(v687 + 16 * v689);
      uint64_t v691 = *v690;
      if (*v690 != v172)
      {
        int v692 = 1;
        while (v691 != (llvm::Value *)-4096)
        {
          int v693 = v689 + v692++;
          uint64_t v689 = v693 & (v688 - 1);
          uint64_t v691 = *(llvm::Value **)(v687 + 16 * v689);
          if (v691 == v172)
          {
            unsigned int v690 = (llvm::Value **)(v687 + 16 * v689);
            goto LABEL_1061;
          }
        }
LABEL_1060:
        unsigned int v690 = (llvm::Value **)(v687 + 16 * v688);
      }
LABEL_1061:
      int v744 = v690[1];
      unint64_t v747 = *(void *)v744;
      unsigned int v745 = (char *)v744 + 16;
      unint64_t v746 = v747;
      if (v747 >= 5 && (*(_DWORD *)v745 == *(_DWORD *)"llvm." ? (BOOL v748 = v745[4] == aLlvm_1[4]) : (BOOL v748 = 0), v748))
      {
        *((_DWORD *)v171 + 10) |= 0x2000u;
        int v749 = llvm::Function::lookupIntrinsicID(v745, v746);
      }
      else
      {
LABEL_1068:
        int v749 = 0;
        *((_DWORD *)v171 + 10) &= ~0x2000u;
      }
      *((_DWORD *)v171 + 11) = v749;
LABEL_157:
      uint64_t v176 = *((unsigned int *)v171 + 17);
      int v177 = operator new(40 * v176);
      *uint64_t v171 = v177;
      if (v176)
      {
        int v179 = &v177[4 * v176];
        do
        {
          *int v177 = 0;
          v177[1] = 0;
          v177[2] = 0;
          v177[3] = v172;
          v177 += 4;
        }
        while (v177 != v179);
      }
      uint64_t v180 = llvm::UndefValue::get(*(llvm::UndefValue **)(**v3 + 24), v178);
      uint64_t v181 = v180;
      int v182 = *((_DWORD *)v831 + 5);
      if ((v182 & 0x40000000) != 0)
      {
        BOOL v184 = (uint64_t **)*(v831 - 1);
        uint64_t v183 = v182 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v183 = v182 & 0x7FFFFFF;
        BOOL v184 = &v831[-4 * v183];
      }
      if (v183)
      {
        unint64_t v190 = &v184[4 * *((unsigned int *)v831 + 15)];
        int v191 = &v190[v183];
        BOOL v192 = (char **)((char *)v180 + 8);
        LODWORD(v193) = *((_DWORD *)v171 + 17);
        BOOL v818 = v191;
        do
        {
          uint8x8_t v194 = *v190;
          int v195 = *((_DWORD *)v171 + 7);
          if ((v195 & 0x7FFFFFF) == v193)
          {
            unsigned int v206 = v193 + (v193 >> 1);
            if (v206 <= 2) {
              uint64_t v207 = 2;
            }
            else {
              uint64_t v207 = v206;
            }
            *((_DWORD *)v171 + 17) = v207;
            if ((v195 & 0x40000000) != 0) {
              int v208 = (uint64_t *)*v171;
            }
            else {
              int v208 = (uint64_t *)((char *)v172 - 32 * v193);
            }
            int __pb = v208;
            BOOL v209 = operator new(40 * v207);
            *uint64_t v171 = v209;
            unsigned int v210 = v209;
            do
            {
              *unsigned int v210 = 0;
              v210[1] = 0;
              v210[2] = 0;
              v210[3] = v172;
              v210 += 4;
            }
            while (v210 != &v209[4 * v207]);
            int v211 = *((_DWORD *)v171 + 7);
            if ((v211 & 0x40000000) != 0) {
              uint64_t v212 = (uint64_t)v209;
            }
            else {
              uint64_t v212 = (uint64_t)v172 - 32 * (v211 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v899, __pb, &__pb[4 * v193], v212);
            if (v193)
            {
              memmove((void *)(v212 + 32 * v207), &__pb[4 * v193], 8 * v193);
              uint64_t v213 = 4 * v193;
              do
              {
                uint64_t v214 = &__pb[v213];
                if (__pb[v213 - 4])
                {
                  *(void *)*(v214 - 2) = *(v214 - 3);
                  uint64_t v215 = *(v214 - 3);
                  if (v215) {
                    *(void *)(v215 + 16) = *(v214 - 2);
                  }
                }
                v213 -= 4;
              }
              while (v213 * 8);
            }
            operator delete(__pb);
            int v195 = *((_DWORD *)v171 + 7);
            uint64_t v3 = v835;
            int v191 = v818;
            uint64_t v172 = (llvm::Value *)(v171 + 1);
          }
          uint64_t v196 = (v195 + 1) & 0x7FFFFFF;
          *((_DWORD *)v171 + 7) = v195 & 0xF8000000 | (v195 + 1) & 0x7FFFFFF;
          if ((v195 & 0x40000000) != 0) {
            uint64_t v197 = (char *)*v171;
          }
          else {
            uint64_t v197 = (char *)v172 - 32 * v196;
          }
          uint64_t v198 = (v196 - 1);
          uint64_t v199 = &v197[32 * v198];
          if (*(void *)v199)
          {
            **((void **)v199 + 2) = *((void *)v199 + 1);
            uint64_t v205 = *((void *)v199 + 1);
            if (v205) {
              *(void *)(v205 + 16) = *((void *)v199 + 2);
            }
          }
          *(void *)uint64_t v199 = v181;
          if (v181)
          {
            uint64_t v200 = *v192;
            uint64_t v201 = &v197[32 * v198];
            *((void *)v201 + 1) = *v192;
            if (v200) {
              *((void *)v200 + 2) = v201 + 8;
            }
            *((void *)v201 + 2) = v192;
            *BOOL v192 = v199;
          }
          int v202 = *((_DWORD *)v171 + 7);
          uint64_t v203 = v202 & 0x7FFFFFF;
          if ((v202 & 0x40000000) != 0) {
            unsigned int v204 = (char *)*v171;
          }
          else {
            unsigned int v204 = (char *)v172 - 32 * v203;
          }
          uint64_t v193 = *((unsigned int *)v171 + 17);
          *(void *)&v204[32 * v193 + 8 * (v203 - 1)] = v194;
          ++v190;
        }
        while (v190 != v191);
      }
      unsigned int v216 = *v3;
      unsigned int v168 = v831;
      if (sub_1CCAF0410())
      {
        v899 = (char *)v831;
        sub_1CC080DE0(v216 + 17, &v899)[1] = v172;
      }
LABEL_207:
      uint64_t v217 = *v3;
      unsigned int v219 = (uint64_t ***)(*v3)[27];
      unint64_t v218 = (*v3)[28];
      if ((unint64_t)v219 >= v218)
      {
        unsigned int v221 = (void *)v217[26];
        unint64_t v222 = 0xAAAAAAAAAAAAAAABLL * (v219 - (uint64_t ***)v221) + 1;
        if (v222 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_1183;
        }
        unint64_t v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (void)v221) >> 3);
        if (2 * v223 > v222) {
          unint64_t v222 = 2 * v223;
        }
        if (v223 >= 0x555555555555555) {
          unint64_t v224 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v224 = v222;
        }
        if (v224)
        {
          if (v224 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_1186;
          }
          int v225 = (char *)operator new(24 * v224);
        }
        else
        {
          int v225 = 0;
        }
        uint64_t v232 = &v225[8 * (v219 - (uint64_t ***)v221)];
        *(void *)uint64_t v232 = v168;
        *((void *)v232 + 1) = v828;
        *((void *)v232 + 2) = v172;
        unsigned int v220 = v232 + 24;
        if (v219 != v221)
        {
          do
          {
            long long v233 = *(_OWORD *)(v219 - 3);
            *((void *)v232 - 1) = *(v219 - 1);
            *(_OWORD *)(v232 - 24) = v233;
            v232 -= 24;
            v219 -= 3;
          }
          while (v219 != v221);
          unsigned int v219 = (uint64_t ***)v217[26];
        }
        v217[26] = (uint64_t)v232;
        v217[27] = (uint64_t)v220;
        v217[28] = (uint64_t)&v225[24 * v224];
        if (v219) {
          operator delete(v219);
        }
      }
      else
      {
        void *v219 = v168;
        v219[1] = v828;
        unsigned int v220 = v219 + 3;
        v219[2] = (uint64_t **)v172;
      }
      v217[27] = (uint64_t)v220;
      return;
    case 0x54:
      uint64_t v75 = (uint64_t)*(a2 - 4);
      if (!v75 || *(unsigned char *)(v75 + 16) || *(uint64_t **)(v75 + 24) != a2[9]) {
        goto LABEL_52;
      }
      int v257 = *(_DWORD *)(v75 + 36);
      if (v257 <= 196)
      {
        if (v257 != 194) {
          goto LABEL_52;
        }
LABEL_768:
        sub_1CCAFE854(a1, a2);
        return;
      }
      if (v257 > 312) {
        goto LABEL_52;
      }
      if (v257 == 197) {
        goto LABEL_768;
      }
      if (v257 != 199)
      {
LABEL_52:
        sub_1CCAF7CDC((uint64_t *)a1, a2);
        return;
      }
      unint64_t v594 = 0;
      uint64_t v595 = **a2;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v595;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      unsigned int v597 = a2[5];
      unsigned int v596 = a2[6];
      int v903 = v597;
      unint64_t v904 = v2 + 3;
      unsigned int v861 = v596;
      if (v596)
      {
        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v596, 2);
        unint64_t v594 = v861;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v594);
      if (!v861) {
        goto LABEL_754;
      }
      int v751 = *(unsigned __int8 *)v861;
      if ((v751 - 4) > 0x1E)
      {
        if ((v751 - 3) >= 0xFFFFFFFE) {
          uint64_t v774 = v861;
        }
        else {
          uint64_t v774 = 0;
        }
        if ((v751 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v753 = (unint64_t)v774 + 8;
LABEL_1135:
          unsigned int v878 = &v861;
          sub_1CC5FA668(v753 + 16, &v878);
          goto LABEL_754;
        }
        if (v751 == 3) {
          *((void *)v861 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v861 + 1) & 0x7F) == 2 || *((_DWORD *)v861 + 3))
      {
        uint64_t v752 = *((void *)v861 + 2);
        if ((v752 & 4) != 0)
        {
          unint64_t v753 = v752 & 0xFFFFFFFFFFFFFFF8;
          if (v753) {
            goto LABEL_1135;
          }
        }
      }
LABEL_754:
      int v598 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 4]);
      int v599 = sub_1CCAF0410();
      uint64_t v600 = *v3;
      if (v599)
      {
        uint64_t v601 = sub_1CCAF6F18(v600, (uint64_t)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 4]);
        uint64_t v602 = **v3;
      }
      else
      {
        uint64_t v602 = *v600;
        uint64_t v601 = *(llvm::Instruction **)(*v600 + 40);
      }
      uint64_t v678 = *(uint64_t ***)(v602 + 312);
      uint64_t v679 = *(uint64_t ***)(v602 + 320);
      int v888 = v598;
      uint64_t v889 = v601;
      uint64_t v680 = (unsigned __int8 *)llvm::Value::stripPointerCasts((llvm::Value *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)]);
      unint64_t v681 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(**v3 + 8) + 1912), 0);
      __int16 v864 = 257;
      if (*(void *)v680 != v681)
      {
        if (v680[16] <= 0x14u)
        {
          uint64_t v694 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v906 + 28))(v906, 49, v680, v681);
          uint64_t v680 = (unsigned __int8 *)v694;
          if (v694)
          {
            if (*(unsigned __int8 *)(v694 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v694, &v861, v903, v904);
              if (v900)
              {
                char v806 = v899;
                int8x8_t v807 = &v899[16 * v900];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v680, *(_DWORD *)v806, *((llvm::MDNode **)v806 + 1));
                  v806 += 16;
                }
                while (v806 != v807);
              }
            }
          }
        }
        else
        {
          LOWORD(v882) = 257;
          uint64_t v680 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v680, v681, (const char **)&v878, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v680, &v861, v903, v904);
          if (v900)
          {
            uint64_t v682 = v899;
            uint64_t v683 = &v899[16 * v900];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v680, *(_DWORD *)v682, *((llvm::MDNode **)v682 + 1));
              v682 += 16;
            }
            while (v682 != v683);
          }
        }
      }
      uint64_t v890 = v680;
      int v695 = (unsigned __int8 *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 8];
      uint64_t v696 = *(void *)(**v3 + 64);
      LOWORD(v882) = 257;
      long long v891 = sub_1CB844B8C((uint64_t)&v899, v695, v696, (uint64_t)&v878);
      __int16 v898 = 257;
      sub_1CB845BAC((uint64_t *)&v899, v678, v679, (uint64_t *)&v888, 4, (uint64_t)&v896, 0);
      uint64_t v87 = v899;
      if (v899 == v901) {
        return;
      }
      goto LABEL_940;
    case 0x55:
      std::string __p = sub_1CCAF68D0((uint64_t)*a1, (uint64_t)*(a2 - 12));
      int v59 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)*(v2 - 8));
      int v60 = v2;
      uint64_t v61 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)*(v2 - 4));
      int v62 = sub_1CCAF0410();
      unint64_t v63 = 0;
      unint64_t v64 = 0;
      unsigned int v878 = 0;
      unsigned int v879 = 0;
      unsigned int v880 = 0;
      unsigned int v861 = 0;
      unint64_t v862 = 0;
      v863[0] = 0;
      if (v62)
      {
        unint64_t v63 = (uint64_t *)sub_1CCAF6F18(*v3, (uint64_t)*(v60 - 8));
        unint64_t v64 = sub_1CCAF6F18(*v3, (uint64_t)*(v60 - 4));
      }
      sub_1CCAF7AA4(*v3, v60, (uint64_t)*(v60 - 12));
      uint64_t v65 = (uint64_t)*(v60 - 12);
      if ((*(_DWORD *)(*(void *)v65 + 8) & 0xFE) == 0x12)
      {
        int v66 = (uint64_t *)v3;
        std::string v67 = *v3;
        std::string v68 = *v60;
        std::string v69 = sub_1CCAFB0E8((uint64_t)v67, v59, v61, (const llvm::Instruction *)v60);
        uint64_t v70 = (uint64_t)v60;
        uint64_t v71 = sub_1CCAFB838(v67, (uint64_t)v68, (uint64_t)v69, v60);
        if (v62)
        {
          __int16 v72 = (const char **)operator new(0x10uLL);
          uint64_t v73 = (char *)(v72 + 2);
          *__int16 v72 = (const char *)v59;
          v72[1] = (const char *)v61;
          unsigned int v879 = v72 + 2;
          unsigned int v880 = (llvm::PointerType **)(v72 + 2);
          unsigned int v878 = v72;
          std::string::size_type v74 = operator new(0x10uLL);
          void *v74 = v63;
          v74[1] = v64;
          unint64_t v862 = (unint64_t)(v74 + 2);
          v863[0] = v74 + 2;
          unsigned int v861 = v74;
        }
        else
        {
          __int16 v72 = 0;
          uint64_t v73 = 0;
        }
LABEL_236:
        int v137 = (const llvm::Instruction *)v70;
        goto LABEL_237;
      }
      uint64_t v70 = (uint64_t)v60;
      int v66 = (uint64_t *)v3;
      if (v59 == v61)
      {
        if (v62)
        {
          __int16 v72 = (const char **)operator new(8uLL);
          *__int16 v72 = (const char *)v59;
          uint64_t v73 = (char *)(v72 + 1);
          unsigned int v879 = v72 + 1;
          unsigned int v880 = (llvm::PointerType **)(v72 + 1);
          unsigned int v878 = v72;
          uint64_t v231 = operator new(8uLL);
          unsigned int v861 = v231;
          *uint64_t v231 = v63;
          unint64_t v862 = (unint64_t)(v231 + 1);
          v863[0] = v231 + 1;
        }
        else
        {
          __int16 v72 = 0;
          uint64_t v73 = 0;
        }
        uint64_t v71 = v59;
        goto LABEL_236;
      }
      __int16 v902 = 257;
      uint64_t v136 = (uint64_t)v61;
      int v137 = (const llvm::Instruction *)v60;
      uint64_t v71 = (uint64_t *)sub_1CC199EFC(v65, v59, v136, (const char **)&v899, (uint64_t)v60, 0);
      if (v62)
      {
        __int16 v72 = (const char **)operator new(8uLL);
        *__int16 v72 = (const char *)v71;
        uint64_t v73 = (char *)(v72 + 1);
        unsigned int v879 = v72 + 1;
        unsigned int v880 = (llvm::PointerType **)(v72 + 1);
        unsigned int v878 = v72;
        uint64_t v138 = *(void *)(v70 - 96);
        __int16 v902 = 257;
        uint64_t v139 = sub_1CC199EFC(v138, v63, (uint64_t)v64, (const char **)&v899, v70, 0);
        int v140 = operator new(8uLL);
        unsigned int v861 = v140;
        void *v140 = v139;
        unint64_t v862 = (unint64_t)(v140 + 1);
        v863[0] = v140 + 1;
      }
      else
      {
        __int16 v72 = 0;
        uint64_t v73 = 0;
      }
LABEL_237:
      uint64_t v235 = (uint64_t *)*v66;
      if (byte_1EBCE7988)
      {
        uint64_t v236 = *(void *)v137;
        unsigned int v237 = sub_1CCAFB0E8(*v66, __p, v71, v137);
        uint64_t v71 = sub_1CCAFB838(v235, v236, (uint64_t)v237, (uint64_t **)v137);
      }
      v899 = (char *)v137;
      sub_1CC080DE0(v235 + 14, &v899)[1] = v71;
      if (v62)
      {
        unsigned int v238 = v66;
        if (byte_1EBCE7988)
        {
          uint64_t v239 = v73 - (char *)v72;
          uint64_t v240 = (v73 - (char *)v72) >> 3;
          unint64_t v241 = v240 + 1;
          if ((unint64_t)(v240 + 1) >> 61) {
            goto LABEL_1183;
          }
          if (v239 >> 2 > v241) {
            unint64_t v241 = v239 >> 2;
          }
          if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v242 = v241;
          }
          if (v242)
          {
            if (v242 >> 61) {
              goto LABEL_1186;
            }
            BOOL v243 = (char *)operator new(8 * v242);
          }
          else
          {
            BOOL v243 = 0;
          }
          unsigned int v244 = (uint64_t **)&v243[8 * v240];
          void *v244 = __p;
          int v245 = (const char **)(v244 + 1);
          if (v73 != (char *)v72)
          {
            do
            {
              uint64_t v246 = (uint64_t *)*((void *)v73 - 1);
              v73 -= 8;
              *--unsigned int v244 = v246;
            }
            while (v73 != (char *)v72);
            __int16 v72 = (const char **)v878;
          }
          unsigned int v878 = v244;
          unsigned int v880 = (llvm::PointerType **)&v243[8 * v242];
          if (v72) {
            operator delete(v72);
          }
          unsigned int v879 = v245;
          unsigned int v247 = sub_1CCAF6F18((uint64_t *)*v66, *((void *)v137 - 12));
          uint64_t v248 = v247;
          uint64_t v249 = (char *)v862;
          if (v862 >= v863[0])
          {
            uint64_t v251 = (char *)v861;
            uint64_t v252 = (uint64_t)(v862 - (void)v861) >> 3;
            unint64_t v253 = v252 + 1;
            if ((unint64_t)(v252 + 1) >> 61) {
              goto LABEL_1183;
            }
            uint64_t v254 = v863[0] - (void)v861;
            if ((uint64_t)(v863[0] - (void)v861) >> 2 > v253) {
              unint64_t v253 = v254 >> 2;
            }
            if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v255 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v255 = v253;
            }
            if (v255)
            {
              if (v255 >> 61) {
                goto LABEL_1186;
              }
              unsigned int v256 = (char *)operator new(8 * v255);
            }
            else
            {
              unsigned int v256 = 0;
            }
            uint64_t v286 = (llvm::Instruction **)&v256[8 * v252];
            *uint64_t v286 = v248;
            int v250 = v286 + 1;
            if (v249 != v251)
            {
              do
              {
                unsigned int v287 = (llvm::Instruction *)*((void *)v249 - 1);
                v249 -= 8;
                *--uint64_t v286 = v287;
              }
              while (v249 != v251);
              uint64_t v249 = (char *)v861;
            }
            unsigned int v861 = v286;
            v863[0] = &v256[8 * v255];
            if (v249) {
              operator delete(v249);
            }
          }
          else
          {
            *(void *)unint64_t v862 = v247;
            int v250 = v249 + 8;
          }
          unint64_t v862 = (unint64_t)v250;
        }
        uint64_t v288 = *v238;
        unsigned int v289 = sub_1CCAFBD40(*v238, &v878, &v861, v137, 0);
        if (sub_1CCAF0410())
        {
          v899 = (char *)v137;
          sub_1CC080DE0((uint64_t *)(v288 + 136), &v899)[1] = v289;
        }
      }
      if (v861) {
        operator delete(v861);
      }
      __n128 v290 = v878;
      if (v878) {
        goto LABEL_745;
      }
      return;
    case 0x5C:
      uint64_t v78 = 0;
      uint64_t v79 = **a2;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v79;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      uint64_t v81 = a2[5];
      uint64_t v80 = a2[6];
      int v903 = v81;
      unint64_t v904 = v2 + 3;
      unsigned int v861 = v80;
      if (v80)
      {
        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v80, 2);
        uint64_t v78 = v861;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v78);
      if (!v861) {
        goto LABEL_60;
      }
      int v330 = *(unsigned __int8 *)v861;
      if ((v330 - 4) > 0x1E)
      {
        if ((v330 - 3) >= 0xFFFFFFFE) {
          uint64_t v610 = v861;
        }
        else {
          uint64_t v610 = 0;
        }
        if ((v330 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v332 = (unint64_t)v610 + 8;
LABEL_786:
          unsigned int v878 = &v861;
          sub_1CC5FA668(v332 + 16, &v878);
          goto LABEL_60;
        }
        if (v330 == 3) {
          *((void *)v861 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v861 + 1) & 0x7F) == 2 || *((_DWORD *)v861 + 3))
      {
        uint64_t v331 = *((void *)v861 + 2);
        if ((v331 & 4) != 0)
        {
          unint64_t v332 = v331 & 0xFFFFFFFFFFFFFFF8;
          if (v332) {
            goto LABEL_786;
          }
        }
      }
LABEL_60:
      unsigned int v82 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)*(v2 - 4));
      unsigned int v83 = (unsigned int *)v2[8];
      uint64_t v84 = *((unsigned int *)v2 + 18);
      LOWORD(v882) = 257;
      uint64_t v12 = sub_1CC2415A4((uint64_t)&v899, v82, v83, v84, (uint64_t)&v878);
      goto LABEL_61;
    case 0x5D:
      uint64_t v4 = 0;
      uint64_t v5 = **a2;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v5;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      uint64_t v7 = a2[5];
      uint64_t v6 = a2[6];
      int v903 = v7;
      unint64_t v904 = v2 + 3;
      unsigned int v861 = v6;
      if (v6)
      {
        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v6, 2);
        uint64_t v4 = v861;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v4);
      if (!v861) {
        goto LABEL_11;
      }
      int v327 = *(unsigned __int8 *)v861;
      if ((v327 - 4) > 0x1E)
      {
        if ((v327 - 3) >= 0xFFFFFFFE) {
          v609 = v861;
        }
        else {
          v609 = 0;
        }
        if ((v327 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v329 = (unint64_t)v609 + 8;
LABEL_780:
          unsigned int v878 = &v861;
          sub_1CC5FA668(v329 + 16, &v878);
          goto LABEL_11;
        }
        if (v327 == 3) {
          *((void *)v861 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v861 + 1) & 0x7F) == 2 || *((_DWORD *)v861 + 3))
      {
        uint64_t v328 = *((void *)v861 + 2);
        if ((v328 & 4) != 0)
        {
          unint64_t v329 = v328 & 0xFFFFFFFFFFFFFFF8;
          if (v329) {
            goto LABEL_780;
          }
        }
      }
LABEL_11:
      int v8 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)*(v2 - 8));
      int v9 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)*(v2 - 4));
      uint64_t v10 = v2[8];
      uint64_t v11 = *((unsigned int *)v2 + 18);
      LOWORD(v882) = 257;
      uint64_t v12 = sub_1CC2411F8((uint64_t)&v899, (uint64_t)v8, (uint64_t)v9, v10, v11, (uint64_t)&v878);
LABEL_61:
      unsigned int v85 = v12;
      uint64_t v86 = *v3 + 14;
      unsigned int v878 = v2;
      sub_1CC080DE0(v86, &v878)[1] = v85;
      sub_1CCAFAF50(v3, v2);
      uint64_t v87 = v899;
      if (v899 == v901) {
        return;
      }
      goto LABEL_940;
    case 0x5E:
LABEL_79:
      unint64_t v110 = *v3;
      uint64_t v111 = **v3;
      if (((*v2)[1] & 0xFE) == 0x10)
      {
        uint64_t v112 = sub_1CCAF7854(v111, (uint64_t)*v2);
        uint64_t v114 = llvm::ConstantAggregateZero::get(v112, v113);
      }
      else
      {
        uint64_t v114 = *(void **)(v111 + 72);
      }
      v899 = (char *)v2;
      sub_1CC080DE0(v110 + 14, &v899)[1] = v114;
      goto LABEL_106;
    default:
      int v26 = *a1;
      if (*((unsigned char *)*v3 + 88)) {
        return;
      }
      uint64_t v27 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      if (!v27) {
        return;
      }
      uint64_t v28 = (uint64_t *)&a2[-4 * v27];
      uint64_t v29 = *v28;
      if (!*v28) {
        return;
      }
      int v30 = *(unsigned __int8 *)(v29 + 16);
      uint64_t v31 = *v28;
      if (v30 == 77)
      {
        uint64_t v31 = *(void *)(v29 - 32);
        int v30 = *(unsigned __int8 *)(v31 + 16);
      }
      if (v30 == 84 && (*(_WORD *)(v31 + 18) & 3) == 2) {
        return;
      }
      size_t v32 = sub_1CCAF68D0((uint64_t)v26, v29);
      std::string::size_type v33 = 0;
      uint64_t v34 = **v2;
      v899 = v901;
      uint64_t v900 = 0x200000000;
      uint64_t v905 = v34;
      uint64_t v906 = &v914;
      uint64_t v907 = v915;
      uint64_t v908 = 0;
      int v909 = 0;
      __int16 v910 = 512;
      char v911 = 7;
      uint64_t v912 = 0;
      uint64_t v913 = 0;
      unsigned int v914 = &unk_1F2616E88;
      v915[0] = &unk_1F2617008;
      std::string::size_type v35 = v2[6];
      int v903 = v2[5];
      unint64_t v904 = v2 + 3;
      unsigned int v861 = v35;
      if (v35)
      {
        llvm::MetadataTracking::track((uint64_t)&v861, (unsigned __int8 *)v35, 2);
        std::string::size_type v33 = v861;
      }
      sub_1CB8461A4((uint64_t)&v899, 0, (uint64_t)v33);
      if (!v861) {
        goto LABEL_30;
      }
      int v645 = *(unsigned __int8 *)v861;
      if ((v645 - 4) > 0x1E)
      {
        if ((v645 - 3) >= 0xFFFFFFFE) {
          unsigned int v710 = v861;
        }
        else {
          unsigned int v710 = 0;
        }
        if ((v645 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v647 = (unint64_t)v710 + 8;
LABEL_989:
          unsigned int v878 = &v861;
          sub_1CC5FA668(v647 + 16, &v878);
          goto LABEL_30;
        }
        if (v645 == 3) {
          *((void *)v861 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v861 + 1) & 0x7F) == 2 || *((_DWORD *)v861 + 3))
      {
        uint64_t v646 = *((void *)v861 + 2);
        if ((v646 & 4) != 0)
        {
          unint64_t v647 = v646 & 0xFFFFFFFFFFFFFFF8;
          if (v647) {
            goto LABEL_989;
          }
        }
      }
LABEL_30:
      uint64_t v36 = (*v3)[1];
      uint64_t v37 = **(void **)(*(void *)(v36 + 24) + 16);
      uint64_t v38 = (llvm::DataLayout *)(*(void *)(v36 + 40) + 272);
      std::string::size_type v39 = sub_1CCAF7854(**v3, v37);
      unint64_t v40 = (unint64_t)(sub_1CB83544C((uint64_t)v38, (uint64_t)v39) + 7) >> 3;
      BOOL v42 = v41 == 1;
      char v43 = llvm::DataLayout::getAlignment(v38, v39, 1);
      uint64_t v45 = ((1 << v43) + 0xFFFFFFFFLL + v40) & -(1 << v43);
      if (v42) {
      if (v45 <= 0x320)
      }
      {
        size_t v46 = sub_1CCAF7A44(**v3, v37, (uint64_t)&v899);
        char v47 = word_1EBCE73B8;
        unint64_t v48 = (char *)operator new(0x80uLL);
        *((_DWORD *)v48 + 21) = *((_DWORD *)v48 + 21) & 0x38000000 | 2;
        *(void *)unint64_t v48 = 0;
        *((void *)v48 + 2) = 0;
        *((void *)v48 + 1) = 0;
        *((void *)v48 + 5) = 0;
        *((void *)v48 + 6) = 0;
        *((void *)v48 + 4) = 0;
        unint64_t v49 = (llvm::Instruction **)(v48 + 32);
        *((void *)v48 + 8) = **(void **)*v32 + 1576;
        std::string::size_type v50 = (llvm::Instruction *)(v48 + 64);
        *((void *)v48 + 3) = v48 + 64;
        *((void *)v48 + 7) = v48 + 64;
        *((void *)v48 + 9) = 0;
        v48[80] = 61;
        v48[81] = 0;
        *((_WORD *)v48 + 41) = 0;
        *((_DWORD *)v48 + 21) = 2;
        *(_OWORD *)(v48 + 88) = 0u;
        *(_OWORD *)(v48 + 104) = 0u;
        *((_DWORD *)v48 + 30) = 0;
        *(void *)unint64_t v48 = v32;
        uint64_t v53 = v32[1];
        std::string::size_type v52 = v32 + 1;
        uint64_t v51 = v53;
        *((void *)v48 + 1) = v53;
        if (v53) {
          *(void *)(v51 + 16) = v48 + 8;
        }
        *((void *)v48 + 2) = v52;
        *std::string::size_type v52 = v48;
        if (*((void *)v48 + 4))
        {
          **((void **)v48 + 6) = *((void *)v48 + 5);
          uint64_t v796 = *((void *)v48 + 5);
          if (v796) {
            *(void *)(v796 + 16) = *((void *)v48 + 6);
          }
        }
        *unint64_t v49 = v46;
        if (v46)
        {
          uint64_t v56 = *((void *)v46 + 1);
          uint64_t v55 = (llvm::Instruction ***)((char *)v46 + 8);
          uint64_t v54 = v56;
          *((void *)v48 + 5) = v56;
          if (v56) {
            *(void *)(v54 + 16) = v48 + 40;
          }
          *((void *)v48 + 6) = v55;
          *uint64_t v55 = v49;
        }
        *((_WORD *)v48 + 41) = 2 * (v47 & 0x3F);
        v48[124] = 1;
        LOWORD(v882) = 257;
        (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v50, &v878, v903, v904);
        if (v900)
        {
          int64_t v722 = v899;
          unint64_t v723 = &v899[16 * v900];
          do
          {
            llvm::Instruction::setMetadata(v50, *(_DWORD *)v722, *((llvm::MDNode **)v722 + 1));
            v722 += 16;
          }
          while (v722 != v723);
        }
      }
      if (sub_1CCAF0410())
      {
        uint64_t v57 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
        if (v57) {
          uint64_t v58 = (uint64_t)v2[-4 * v57];
        }
        else {
          uint64_t v58 = 0;
        }
        unsigned int v562 = sub_1CCAF6F18(*v3, v58);
        uint64_t v563 = *(void *)(**v3 + 112);
        char v564 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v903[7] + 40) + 272), *(llvm::Type **)v562, 1);
        int v565 = (char *)operator new(0x80uLL);
        *((_DWORD *)v565 + 21) = *((_DWORD *)v565 + 21) & 0x38000000 | 2;
        *(void *)int v565 = 0;
        *((void *)v565 + 2) = 0;
        *((void *)v565 + 1) = 0;
        *((void *)v565 + 5) = 0;
        *((void *)v565 + 6) = 0;
        *((void *)v565 + 4) = 0;
        *((void *)v565 + 8) = ***(void ***)v562 + 1576;
        unsigned int v566 = (llvm::Instruction *)(v565 + 64);
        *((void *)v565 + 3) = v565 + 64;
        *((void *)v565 + 7) = v565 + 64;
        *((void *)v565 + 9) = 0;
        v565[80] = 61;
        v565[81] = 0;
        *((_DWORD *)v565 + 21) = 2;
        *(_OWORD *)(v565 + 88) = 0u;
        *(_OWORD *)(v565 + 104) = 0u;
        *((_DWORD *)v565 + 30) = 0;
        unsigned int v567 = (void *)((char *)v562 + 8);
        uint64_t v568 = *((void *)v562 + 1);
        *(void *)int v565 = v562;
        *((void *)v565 + 1) = v568;
        if (v568) {
          *(void *)(v568 + 16) = v565 + 8;
        }
        *((void *)v565 + 2) = v567;
        *unsigned int v567 = v565;
        *((void *)v565 + 4) = v563;
        if (v563)
        {
          uint64_t v571 = *(void *)(v563 + 8);
          unsigned int v570 = (void *)(v563 + 8);
          uint64_t v569 = v571;
          *((void *)v565 + 5) = v571;
          if (v571) {
            *(void *)(v569 + 16) = v565 + 40;
          }
          *((void *)v565 + 6) = v570;
          *unsigned int v570 = v565 + 32;
        }
        *((_WORD *)v565 + 41) = 2 * (v564 & 0x3F);
        v565[124] = 1;
        LOWORD(v882) = 257;
        (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, uint64_t **))(*v907 + 16))(v907, v566, &v878, v903, v904);
        if (v900)
        {
          int v724 = v899;
          uint64_t v725 = &v899[16 * v900];
          do
          {
            llvm::Instruction::setMetadata(v566, *(_DWORD *)v724, *((llvm::MDNode **)v724 + 1));
            v724 += 16;
          }
          while (v724 != v725);
        }
      }
      uint64_t v87 = v899;
      if (v899 == v901) {
        return;
      }
LABEL_940:
      free(v87);
      return;
  }
}

void *sub_1CCAF68D0(uint64_t a1, uint64_t a2)
{
  v90[1] = *MEMORY[0x1E4F143B8];
  uint64_t v70 = a2;
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  BOOL v4 = v3 == 21 || v3 > 0x1B;
  if (!v4 || *(unsigned char *)(a1 + 89))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(void *)a2;
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x10)
    {
      uint64_t v7 = sub_1CCAF7854(v5, v6);
      return llvm::ConstantAggregateZero::get(v7, v8);
    }
    return *(void **)(v5 + 72);
  }
  uint64_t v10 = sub_1CC27AF70((uint64_t *)(a1 + 112), &v70);
  uint64_t result = (void *)v10[1];
  if (result) {
    return result;
  }
  uint64_t v11 = (uint64_t *)v70;
  if (!v70 || *(unsigned char *)(v70 + 16) != 21)
  {
    uint64_t v14 = *(void *)a1;
    if ((*(_DWORD *)(*(void *)v70 + 8) & 0xFE) == 0x10)
    {
      uint64_t v15 = sub_1CCAF7854(v14, *(void *)v70);
      uint64_t result = llvm::ConstantAggregateZero::get(v15, v16);
    }
    else
    {
      uint64_t result = *(void **)(v14 + 72);
    }
    v10[1] = result;
    return result;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v5 = *(void *)a1;
    if ((*(_DWORD *)(*(void *)v70 + 8) & 0xFE) == 0x10)
    {
      uint64_t v12 = sub_1CCAF7854(v5, *(void *)v70);
      return llvm::ConstantAggregateZero::get(v12, v13);
    }
    return *(void **)(v5 + 72);
  }
  std::string v69 = v10;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(v17 + 40);
  if (*(_WORD *)(v17 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
    uint64_t v19 = *(uint64_t **)(v17 + 88);
    if (*(_WORD *)(v17 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v17);
      long long v20 = *(uint64_t **)(v17 + 88);
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(v17 + 88);
  }
  long long v20 = v19;
LABEL_26:
  int v21 = &v20[5 * *(void *)(v17 + 96)];
  if (v19 == v21) {
    goto LABEL_46;
  }
  unsigned int v22 = 0;
  __int16 v23 = (llvm::DataLayout *)(v18 + 272);
  while (1)
  {
    uint64_t v24 = *v19;
    unsigned int v25 = *(unsigned __int8 *)(*v19 + 8);
    if (v25 <= 0x11)
    {
      if (((1 << v25) & 0xAC7F) != 0) {
        goto LABEL_30;
      }
      if (((1 << v25) & 0x30000) != 0) {
        goto LABEL_103;
      }
    }
    if ((v25 & 0xFE) == 0x12 || v25 == 21)
    {
LABEL_103:
      if (llvm::Type::isSizedDerivedType(*v19, 0)) {
        break;
      }
    }
    if (v19 == v11) {
      goto LABEL_46;
    }
LABEL_34:
    v19 += 5;
    if (v19 == v21) {
      goto LABEL_46;
    }
  }
  uint64_t v24 = *v19;
LABEL_30:
  int v26 = sub_1CCAF7854(*(void *)a1, v24);
  uint64_t v27 = sub_1CB83544C((uint64_t)v23, (uint64_t)v26);
  BOOL v29 = v28 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v23, v26, 1);
  if (v29)
  {
    char v34 = Alignment;
    char Alignment = v34;
  }
  unint64_t v32 = ((1 << Alignment) + ((unint64_t)(v27 + 7) >> 3) - 1) & -(1 << Alignment);
  if (v19 != v11)
  {
    v22 += (v32 + (1 << word_1EBCE73B8) - 1) & -(1 << word_1EBCE73B8);
    if (v22 > 0x320) {
      goto LABEL_46;
    }
    goto LABEL_34;
  }
  if (v22 + v32 > 0x320)
  {
LABEL_46:
    uint64_t v35 = *(void *)a1;
    if ((*(_DWORD *)(*v11 + 8) & 0xFE) == 0x10)
    {
      uint64_t v36 = sub_1CCAF7854(v35, *v11);
      uint64_t v38 = (llvm::Instruction *)llvm::ConstantAggregateZero::get(v36, v37);
    }
    else
    {
      uint64_t v38 = *(llvm::Instruction **)(v35 + 72);
    }
    std::string::size_type v39 = v69;
    goto LABEL_50;
  }
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v52) {
    uint64_t v53 = v52 - 24;
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = *(void *)(v53 + 48);
  if (v54) {
    uint64_t v55 = (uint64_t **)(v54 - 24);
  }
  else {
    uint64_t v55 = 0;
  }
  uint64_t v56 = **v55;
  uint64_t v75 = v77;
  uint64_t v76 = 0x200000000;
  uint64_t v80 = v56;
  uint64_t v81 = &v89;
  unsigned int v82 = v90;
  uint64_t v83 = 0;
  int v84 = 0;
  __int16 v85 = 512;
  char v86 = 7;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = &unk_1F2616E88;
  v90[0] = &unk_1F2617008;
  uint64_t v78 = v55[5];
  uint64_t v79 = v55 + 3;
  uint64_t v57 = (unsigned __int8 *)v55[6];
  v71[0] = v57;
  if (v57)
  {
    llvm::MetadataTracking::track((uint64_t)v71, v57, 2);
    uint64_t v51 = v71[0];
  }
  sub_1CB8461A4((uint64_t)&v75, 0, v51);
  if (v71[0])
  {
    int v65 = *(unsigned __int8 *)v71[0];
    if ((v65 - 4) > 0x1E)
    {
      if ((v65 - 3) >= 0xFFFFFFFE) {
        uint64_t v68 = v71[0];
      }
      else {
        uint64_t v68 = 0;
      }
      if ((v65 - 3) < 0xFFFFFFFE)
      {
        if (v65 == 3) {
          *(void *)(v71[0] + 8) = 0;
        }
        goto LABEL_79;
      }
      unint64_t v67 = v68 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v71[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v71[0] + 12)) {
        goto LABEL_79;
      }
      uint64_t v66 = *(void *)(v71[0] + 16);
      if ((v66 & 4) == 0) {
        goto LABEL_79;
      }
      unint64_t v67 = v66 & 0xFFFFFFFFFFFFFFF8;
      if (!v67) {
        goto LABEL_79;
      }
    }
    v73[0] = (const char *)v71;
    sub_1CC5FA668(v67 + 16, v73);
  }
LABEL_79:
  int v59 = sub_1CCAFAC54((uint64_t *)a1, *v11, v22, (uint64_t)&v75, v58);
  int v60 = sub_1CCAF7854(*(void *)a1, *v11);
  char v61 = word_1EBCE73B8;
  __int16 v72 = 257;
  int v62 = operator new(0x60uLL);
  v62[13] = v62[13] & 0x38000000 | 1;
  uint64_t v38 = (llvm::Instruction *)(v62 + 8);
  *(void *)int v62 = 0;
  *((void *)v62 + 1) = 0;
  *((void *)v62 + 2) = 0;
  *((void *)v62 + 3) = v62 + 8;
  __int16 v74 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v62 + 8), (uint64_t)v60, (uint64_t)v59, v73, 0, v61, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v82 + 16))(v82, v38, v71, v78, v79);
  unint64_t v63 = (llvm::MDNode **)v75;
  std::string::size_type v39 = v69;
  if (v76)
  {
    unint64_t v64 = (llvm::MDNode **)((char *)v75 + 16 * v76);
    do
    {
      llvm::Instruction::setMetadata(v38, *(_DWORD *)v63, v63[1]);
      v63 += 2;
    }
    while (v63 != v64);
    unint64_t v63 = (llvm::MDNode **)v75;
  }
  if (v63 != (llvm::MDNode **)v77) {
    free(v63);
  }
LABEL_50:
  v39[1] = v38;
  int v41 = *(llvm::Instruction ***)(a1 + 264);
  unint64_t v40 = *(void *)(a1 + 272);
  if ((unint64_t)v41 >= v40)
  {
    char v43 = *(void **)(a1 + 256);
    uint64_t v44 = v41 - (llvm::Instruction **)v43;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61) {
      abort();
    }
    uint64_t v46 = v40 - (void)v43;
    if (v46 >> 2 > v45) {
      unint64_t v45 = v46 >> 2;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47)
    {
      if (v47 >> 61) {
        sub_1CB833614();
      }
      unint64_t v48 = (char *)operator new(8 * v47);
    }
    else
    {
      unint64_t v48 = 0;
    }
    unint64_t v49 = (llvm::Instruction **)&v48[8 * v44];
    *unint64_t v49 = v38;
    BOOL v42 = v49 + 1;
    if (v41 != v43)
    {
      do
      {
        std::string::size_type v50 = *--v41;
        *--unint64_t v49 = v50;
      }
      while (v41 != v43);
      int v41 = *(llvm::Instruction ***)(a1 + 256);
    }
    *(void *)(a1 + 256) = v49;
    *(void *)(a1 + 264) = v42;
    *(void *)(a1 + 272) = &v48[8 * v47];
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *int v41 = v38;
    BOOL v42 = v41 + 1;
  }
  *(void *)(a1 + 264) = v42;
  return (void *)v39[1];
}

llvm::Instruction *sub_1CCAF6F18(uint64_t *a1, uint64_t a2)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  uint64_t v32 = a2;
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 21 && v3 <= 0x1B) {
    goto LABEL_10;
  }
  uint64_t v5 = (llvm::Instruction **)(sub_1CC27AF70(a1 + 17, &v32) + 1);
  if (!*v5)
  {
    uint64_t v6 = v32;
    if (!v32 || *(unsigned char *)(v32 + 16) != 21)
    {
      uint64_t v8 = *a1;
      goto LABEL_14;
    }
    if (*((unsigned char *)a1 + 88))
    {
LABEL_10:
      uint64_t v5 = (llvm::Instruction **)(*a1 + 40);
      return *v5;
    }
    uint64_t v8 = *a1;
    if (*(void *)(*a1 + 808) <= (unint64_t)*(unsigned int *)(v32 + 32))
    {
LABEL_14:
      *uint64_t v5 = *(llvm::Instruction **)(v8 + 40);
      return *v5;
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1[1] + 80);
    if (v10) {
      uint64_t v11 = v10 - 24;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    if (v12) {
      uint64_t v13 = (uint64_t **)(v12 - 24);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = **v13;
    uint64_t v35 = v37;
    uint64_t v36 = 0x200000000;
    uint64_t v40 = v14;
    int v41 = &v49;
    BOOL v42 = v50;
    uint64_t v43 = 0;
    int v44 = 0;
    __int16 v45 = 512;
    char v46 = 7;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t v49 = &unk_1F2616E88;
    v50[0] = &unk_1F2617008;
    uint64_t v38 = v13[5];
    std::string::size_type v39 = v13 + 3;
    uint64_t v15 = (unsigned __int8 *)v13[6];
    v30[0] = v15;
    if (v15)
    {
      llvm::MetadataTracking::track((uint64_t)v30, v15, 2);
      uint64_t v9 = v30[0];
    }
    sub_1CB8461A4((uint64_t)&v35, 0, v9);
    if (!v30[0]) {
      goto LABEL_24;
    }
    int v26 = *(unsigned __int8 *)v30[0];
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v30[0];
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v26 - 3) < 0xFFFFFFFE)
      {
        if (v26 == 3) {
          *(void *)(v30[0] + 8) = 0;
        }
        goto LABEL_24;
      }
      unint64_t v28 = v29 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v30[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v30[0] + 12)) {
        goto LABEL_24;
      }
      uint64_t v27 = *(void *)(v30[0] + 16);
      if ((v27 & 4) == 0) {
        goto LABEL_24;
      }
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (!v28) {
        goto LABEL_24;
      }
    }
    v33[0] = (const char *)v30;
    sub_1CC5FA668(v28 + 16, v33);
LABEL_24:
    unint64_t v16 = *(unsigned int *)(v6 + 32);
    uint64_t v17 = *(llvm::LLVMContext **)(*a1 + 88);
    uint64_t v18 = *(uint64_t **)(*a1 + 96);
    v33[0] = "_dfsarg_o";
    __int16 v34 = 259;
    uint64_t v19 = sub_1CD3C8B64((uint64_t)&v35, v17, v18, 0, v16, (uint64_t)v33);
    long long v20 = *(llvm::Type **)(*a1 + 24);
    __int16 v31 = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v38[7] + 40) + 272), v20, 1);
    unsigned int v22 = operator new(0x60uLL);
    v22[13] = v22[13] & 0x38000000 | 1;
    __int16 v23 = (llvm::Instruction *)(v22 + 8);
    *(void *)unsigned int v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = 0;
    *((void *)v22 + 3) = v22 + 8;
    __int16 v34 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v22 + 8), (uint64_t)v20, (uint64_t)v19, v33, 0, Alignment, 0);
    (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v42 + 16))(v42, v23, v30, v38, v39);
    uint64_t v24 = (llvm::MDNode **)v35;
    if (v36)
    {
      unsigned int v25 = (llvm::MDNode **)((char *)v35 + 16 * v36);
      do
      {
        llvm::Instruction::setMetadata(v23, *(_DWORD *)v24, v24[1]);
        v24 += 2;
      }
      while (v24 != v25);
      uint64_t v24 = (llvm::MDNode **)v35;
    }
    *uint64_t v5 = v23;
    if (v24 != (llvm::MDNode **)v37) {
      free(v24);
    }
  }
  return *v5;
}

uint64_t *sub_1CCAF728C(uint64_t a1, uint64_t *a2, const llvm::Instruction *a3)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  unint64_t v16 = a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) != 0x10) {
    return a2;
  }
  uint64_t v5 = sub_1CC27AF70((uint64_t *)(a1 + 304), &v16);
  uint64_t v6 = (const llvm::Value *)v5[1];
  if (v6 && llvm::DominatorTree::dominates((llvm::DominatorTree *)(a1 + 16), v6, a3)) {
    return (uint64_t *)v5[1];
  }
  uint64_t v7 = 0;
  uint64_t v8 = **(void **)a3;
  v19[0] = v20;
  v19[1] = (void *)0x200000000;
  v20[6] = v8;
  v20[7] = &v26;
  v20[8] = v27;
  v20[9] = 0;
  int v21 = 0;
  __int16 v22 = 512;
  char v23 = 7;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v26 = &unk_1F2616E88;
  v27[0] = &unk_1F2617008;
  uint64_t v9 = (unsigned __int8 *)*((void *)a3 + 6);
  uint64_t v20[4] = *((void *)a3 + 5);
  v20[5] = (char *)a3 + 24;
  uint64_t v17 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v17, v9, 2);
    uint64_t v7 = (uint64_t)v17;
  }
  sub_1CB8461A4((uint64_t)v19, 0, v7);
  if (v17)
  {
    int v11 = *v17;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v17;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v11 - 3) < 0xFFFFFFFE)
      {
        if (v11 == 3) {
          *((void *)v17 + 1) = 0;
        }
        goto LABEL_8;
      }
      unint64_t v13 = (unint64_t)(v14 + 8);
    }
    else
    {
      if ((v17[1] & 0x7F) != 2 && !*((_DWORD *)v17 + 3)) {
        goto LABEL_8;
      }
      uint64_t v12 = *((void *)v17 + 2);
      if ((v12 & 4) == 0) {
        goto LABEL_8;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        goto LABEL_8;
      }
    }
    uint64_t v18 = &v17;
    sub_1CC5FA668(v13 + 16, &v18);
  }
LABEL_8:
  a2 = (uint64_t *)sub_1CCAFEFDC(a1, v16, (uint64_t)v19);
  v5[1] = a2;
  if (v19[0] != v20)
  {
    uint64_t v15 = a2;
    free(v19[0]);
    return v15;
  }
  return a2;
}

unint64_t *sub_1CCAF74A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  **(unsigned char **)a1 = 1;
  unsigned int v3 = (char *)operator new(0x78uLL);
  BOOL v4 = (unint64_t *)(v3 + 32);
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0x38000000 | 1;
  *(void *)unsigned int v3 = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 32;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(llvm::ConstantInt **)(v2 + 24);
  if (sub_1CCAF0410()) {
    unint64_t v8 = dword_1EBCE7B08;
  }
  else {
    unint64_t v8 = 0;
  }
  Signed = llvm::ConstantInt::getSigned(v6, v8, v7);
  int v11 = "__dfsan_track_origins";
  __int16 v12 = 259;
  return llvm::GlobalVariable::GlobalVariable(v4, v5, v6, 1, 5, (unint64_t)Signed, &v11, 0, 0, 0, 0);
}

unint64_t *sub_1CCAF7570(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  unsigned int v3 = (unint64_t *)(v2 + 32);
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = **(llvm::ConstantInt ***)(a1 + 8);
  uint64_t v6 = llvm::ConstantInt::get(v5, 8uLL, 0);
  unint64_t v8 = "__dfsan_shadow_width_bits";
  __int16 v9 = 259;
  return llvm::GlobalVariable::GlobalVariable(v3, v4, v5, 1, 5, (unint64_t)v6, &v8, 0, 0, 0, 0);
}

unint64_t *sub_1CCAF7620(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  unsigned int v3 = (unint64_t *)(v2 + 32);
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = **(llvm::ConstantInt ***)(a1 + 8);
  uint64_t v6 = llvm::ConstantInt::get(v5, 1uLL, 0);
  unint64_t v8 = "__dfsan_shadow_width_bytes";
  __int16 v9 = 259;
  return llvm::GlobalVariable::GlobalVariable(v3, v4, v5, 1, 5, (unint64_t)v6, &v8, 0, 0, 0, 0);
}

uint64_t sub_1CCAF76D0(uint64_t ***a1, uint64_t ***a2, unsigned __int8 *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v12 = a2[5];
  unint64_t v13 = *a1;
  unint64_t v16 = (unsigned __int8 *)v12[21];
  uint64_t v14 = v12 + 21;
  uint64_t v15 = v16;
  char v17 = *((unsigned char *)v14 + 23);
  if (v17 >= 0) {
    uint64_t v18 = (unsigned __int8 *)v14;
  }
  else {
    uint64_t v18 = v15;
  }
  size_t v19 = (size_t)v14[1];
  if (v17 >= 0) {
    size_t v20 = v17 & 0x7F;
  }
  else {
    size_t v20 = v19;
  }
  if (llvm::SpecialCaseList::inSectionBlame(v13, "dataflow", 8uLL, "src", 3uLL, v18, v20, a8, a3, a4)) {
    return 1;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    size_t v33 = 0;
    uint64_t v32 = (unsigned __int8 *)&byte_1CFBCE98E;
    return llvm::SpecialCaseList::inSectionBlame(*a1, "dataflow", 8uLL, "fun", 3uLL, v32, v33, v21, a3, a4) != 0;
  }
  uint64_t v23 = ***a2;
  uint64_t v24 = *(void *)(v23 + 152);
  uint64_t v25 = *(unsigned int *)(v23 + 168);
  if (!v25) {
    goto LABEL_16;
  }
  LODWORD(v26) = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v27 = (uint64_t ****)(v24 + 16 * v26);
  unint64_t v28 = *v27;
  if (*v27 != a2)
  {
    int v29 = 1;
    while (v28 != (uint64_t ***)-4096)
    {
      int v30 = v26 + v29++;
      uint64_t v26 = v30 & (v25 - 1);
      unint64_t v28 = *(uint64_t ****)(v24 + 16 * v26);
      if (v28 == a2)
      {
        uint64_t v27 = (uint64_t ****)(v24 + 16 * v26);
        goto LABEL_17;
      }
    }
LABEL_16:
    uint64_t v27 = (uint64_t ****)(v24 + 16 * v25);
  }
LABEL_17:
  __int16 v31 = v27[1];
  size_t v34 = (size_t)*v31;
  uint64_t v32 = (unsigned __int8 *)(v31 + 2);
  size_t v33 = v34;
  return llvm::SpecialCaseList::inSectionBlame(*a1, "dataflow", 8uLL, "fun", 3uLL, v32, v33, v21, a3, a4) != 0;
}

BOOL sub_1CCAF7818(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2) {
    BOOL v4 = v3 == 5;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4 && *(_WORD *)(v2 + 18) == 53) {
    return 0;
  }
  if (v2) {
    BOOL v6 = v3 == 81;
  }
  else {
    BOOL v6 = 0;
  }
  return !v6;
}

llvm::ArrayType *sub_1CCAF7854(uint64_t a1, uint64_t a2)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 > 0x11) {
    goto LABEL_11;
  }
  if (((1 << v4) & 0xAC7F) != 0) {
    goto LABEL_3;
  }
  if (((1 << v4) & 0x30000) == 0)
  {
LABEL_11:
    if ((v4 & 0xFE) != 0x12 && v4 != 21) {
      return *(llvm::ArrayType **)(a1 + 48);
    }
  }
  if (!llvm::Type::isSizedDerivedType(a2, 0)) {
    return *(llvm::ArrayType **)(a1 + 48);
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
LABEL_3:
  if (v4 == 13 || (v4 & 0xFE) == 0x12) {
    return *(llvm::ArrayType **)(a1 + 48);
  }
  if (v4 == 16)
  {
    unsigned int v15 = 0;
    uint64_t v10 = *(unsigned int *)(a2 + 12);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = sub_1CCAF7854(a1, *(void *)(*(void *)(a2 + 16) + v11));
        if (v15 >= 4uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v16[v15] = v13;
        uint64_t v14 = ++v15;
        v11 += 8;
      }
      while (v12 != v11);
    }
    else
    {
      uint64_t v14 = 0;
    }
    return (llvm::ArrayType *)llvm::StructType::get(*(uint64_t **)(a1 + 8), (uint64_t)v16, v14, 0);
  }
  if (v4 != 17) {
    return *(llvm::ArrayType **)(a1 + 48);
  }
  uint64_t v5 = (llvm::ArrayType *)sub_1CCAF7854(a1, *(void *)(a2 + 24));
  BOOL v6 = *(llvm::Type **)(a2 + 32);

  return llvm::ArrayType::get(v5, v6);
}

llvm::Instruction *sub_1CCAF7A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(llvm::CastInst **)(a1 + 104);
  uint64_t v5 = sub_1CCAF7854(a1, a2);
  BOOL v6 = (llvm::Value *)llvm::PointerType::get(v5, 0);
  __int16 v9 = "_dfsret";
  __int16 v10 = 259;
  return sub_1CC277FE0(a3, v4, v6, (uint64_t)&v9, v7);
}

void sub_1CCAF7AA4(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCE78C8) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = **a2;
  v22[0] = v23;
  v22[1] = (void *)0x200000000;
  v23[6] = v6;
  v23[7] = &v29;
  v23[8] = v30;
  v23[9] = 0;
  int v24 = 0;
  __int16 v25 = 512;
  char v26 = 7;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = &unk_1F2616E88;
  v30[0] = &unk_1F2617008;
  uint64_t v7 = a2 + 3;
  __int16 v9 = a2[5];
  unint64_t v8 = (unsigned __int8 *)a2[6];
  v23[4] = v9;
  v23[5] = v7;
  v21[0] = (uint64_t)v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)v21, v8, 2);
    uint64_t v5 = v21[0];
  }
  sub_1CB8461A4((uint64_t)v22, 0, v5);
  if (v21[0])
  {
    int v15 = *(unsigned __int8 *)v21[0];
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        uint64_t v18 = v21[0];
      }
      else {
        uint64_t v18 = 0;
      }
      if ((v15 - 3) < 0xFFFFFFFE)
      {
        if (v15 == 3) {
          *(void *)(v21[0] + 8) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v17 = v18 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v21[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v21[0] + 12)) {
        goto LABEL_5;
      }
      uint64_t v16 = *(void *)(v21[0] + 16);
      if ((v16 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (!v17) {
        goto LABEL_5;
      }
    }
    v19[0] = v21;
    sub_1CC5FA668(v17 + 16, v19);
  }
LABEL_5:
  __int16 v10 = sub_1CCAF68D0((uint64_t)a1, a3);
  if (sub_1CCAF0410())
  {
    uint64_t v11 = sub_1CCAF6F18(a1, a3);
    uint64_t v12 = *(uint64_t ***)(*a1 + 424);
    uint64_t v13 = *(uint64_t ***)(*a1 + 432);
    v21[0] = (uint64_t)v10;
    v21[1] = (uint64_t)v11;
    __int16 v20 = 257;
    uint64_t v14 = 2;
  }
  else
  {
    uint64_t v12 = *(uint64_t ***)(*a1 + 408);
    uint64_t v13 = *(uint64_t ***)(*a1 + 416);
    v21[0] = (uint64_t)v10;
    __int16 v20 = 257;
    uint64_t v14 = 1;
  }
  sub_1CB845BAC((uint64_t *)v22, v12, v13, v21, v14, (uint64_t)v19, 0);
  if (v22[0] != v23) {
    free(v22[0]);
  }
}

void sub_1CCAF7CDC(uint64_t *a1, uint64_t **a2)
{
  int v3 = (uint64_t **)a1;
  v538[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(a2 - 4);
  uint64_t v4 = (uint64_t)*(a2 - 4);
  if (!v4)
  {
    int v6 = MEMORY[0x10];
LABEL_7:
    if (v6 == 24) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  int v6 = *(unsigned __int8 *)(v4 + 16);
  if (*(unsigned char *)(v4 + 16)) {
    goto LABEL_7;
  }
  if (*(uint64_t **)(v4 + 24) != a2[9]) {
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v4 + 33) & 0x20) != 0)
  {
LABEL_8:
    sub_1CCAFAA94(a1, a2);
    return;
  }
LABEL_12:
  if ((llvm::Value *)v4 == llvm::Value::stripPointerCasts(*(llvm::Value **)(*(void *)*a1 + 352))) {
    return;
  }
  uint64_t v7 = **v3;
  uint64_t v8 = *v5;
  char v523 = 0;
  if (sub_1CD40EA84(*(void *)(v7 + 704), *(_DWORD *)(v7 + 720), v8, &v523)) {
    __int16 v9 = v523;
  }
  else {
    __int16 v9 = (void *)(*(void *)(v7 + 704) + 16 * *(unsigned int *)(v7 + 720));
  }
  int v491 = a2;
  unsigned int v492 = v3;
  if (v9 != (void *)(*(void *)(**v3 + 704) + 16 * *(unsigned int *)(**v3 + 720)))
  {
    __int16 v10 = 0;
    uint64_t v11 = (uint64_t ***)v9[1];
    uint64_t v12 = **a2;
    char v523 = v525;
    uint64_t v524 = 0x200000000;
    uint64_t v528 = v12;
    uint64_t v529 = &v537;
    long long v530 = v538;
    uint64_t v531 = 0;
    int v532 = 0;
    __int16 v533 = 512;
    char v534 = 7;
    uint64_t v535 = 0;
    uint64_t v536 = 0;
    uint64_t v537 = &unk_1F2616E88;
    v538[0] = &unk_1F2617008;
    uint64_t v13 = (char *)a2[6];
    uint64_t v526 = a2[5];
    uint64_t v527 = a2 + 3;
    p_p = (void **)v13;
    if (v13)
    {
      llvm::MetadataTracking::track((uint64_t)&p_p, (unsigned __int8 *)v13, 2);
      __int16 v10 = (const char *)p_p;
    }
    sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v10);
    if (!p_p) {
      goto LABEL_21;
    }
    int v130 = *(unsigned __int8 *)p_p;
    if ((v130 - 4) > 0x1E)
    {
      if ((v130 - 3) >= 0xFFFFFFFE) {
        uint64_t v280 = p_p;
      }
      else {
        uint64_t v280 = 0;
      }
      if ((v130 - 3) < 0xFFFFFFFE)
      {
        if (v130 == 3) {
          p_p[1] = 0;
        }
        goto LABEL_21;
      }
      unint64_t v132 = (unint64_t)(v280 + 1);
    }
    else
    {
      if ((*((unsigned char *)p_p + 1) & 0x7F) != 2 && !*((_DWORD *)p_p + 3)) {
        goto LABEL_21;
      }
      unint64_t v131 = (unint64_t)p_p[2];
      if ((v131 & 4) == 0) {
        goto LABEL_21;
      }
      unint64_t v132 = v131 & 0xFFFFFFFFFFFFFFF8;
      if (!v132) {
        goto LABEL_21;
      }
    }
    uint64_t v506 = &p_p;
    sub_1CC5FA668(v132 + 16, &v506);
LABEL_21:
    BOOL v481 = (llvm::Function *)v11;
    switch(sub_1CCAF0384(**v3, v11, v14, v15, v16, v17, v18, v19))
    {
      case 1u:
        a2[9] = (uint64_t *)v11[3];
        if (*(a2 - 4))
        {
          **(a2 - 2) = (uint64_t)*(a2 - 3);
          uint64_t v20 = (uint64_t)*(a2 - 3);
          if (v20) {
            *(void *)(v20 + 16) = *(a2 - 2);
          }
        }
        *(a2 - 4) = (uint64_t *)v11;
        uint64_t v21 = (uint64_t *)v11[1];
        *(a2 - 3) = v21;
        if (v21) {
          uint64_t v21[2] = (uint64_t)(a2 - 3);
        }
        *(a2 - 2) = (uint64_t *)(v11 + 1);
        v11[1] = (uint64_t **)v5;
        sub_1CCAFC088(**v3, (uint64_t)&v523, (llvm::CastInst *)v11);
        __int16 v22 = *v3;
        uint64_t v23 = **v3;
        if (((*a2)[1] & 0xFE) == 0x10)
        {
          int v24 = sub_1CCAF7854(v23, (uint64_t)*a2);
          char v26 = llvm::ConstantAggregateZero::get(v24, v25);
        }
        else
        {
          char v26 = *(void **)(v23 + 72);
        }
        uint64_t v506 = a2;
        sub_1CC080DE0(v22 + 14, &v506)[1] = v26;
        unint64_t v49 = *v3;
        goto LABEL_66;
      case 2u:
        a2[9] = (uint64_t *)v11[3];
        if (*(a2 - 4))
        {
          **(a2 - 2) = (uint64_t)*(a2 - 3);
          uint64_t v47 = (uint64_t)*(a2 - 3);
          if (v47) {
            *(void *)(v47 + 16) = *(a2 - 2);
          }
        }
        *(a2 - 4) = (uint64_t *)v11;
        uint64_t v48 = (uint64_t *)v11[1];
        *(a2 - 3) = v48;
        if (v48) {
          v48[2] = (uint64_t)(a2 - 3);
        }
        *(a2 - 2) = (uint64_t *)(v11 + 1);
        v11[1] = (uint64_t **)v5;
        sub_1CCAFC088(**v3, (uint64_t)&v523, (llvm::CastInst *)v11);
        sub_1CCAFAA94((uint64_t *)v3, a2);
        goto LABEL_560;
      case 3u:
        int v27 = *((unsigned __int8 *)a2 + 16);
        BOOL v28 = v27 == 84;
        if (v27 == 84) {
          int v29 = (llvm::ValueAsMetadata *)a2;
        }
        else {
          int v29 = 0;
        }
        uint64_t v480 = v29;
        if (!v28)
        {
          if (v523 != v525) {
            free(v523);
          }
          break;
        }
        int v487 = sub_1CCAF0410();
        int v30 = v11[3];
        __int16 v31 = (void *)**v3;
        uint64_t v506 = v508;
        uint64_t v507 = 0x400000000;
        unint64_t v489 = v30;
        int v32 = *((_DWORD *)v30 + 3);
        uint64_t v33 = (v32 - 1);
        if (v32 == 1)
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          unsigned int v34 = 0;
          uint64_t v129 = a2;
        }
        else
        {
          uint64_t v477 = v31;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          do
          {
            uint64_t v39 = v489[2][++v35];
            if (v37 >= v38)
            {
              uint64_t v40 = (v37 - v36) >> 2;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62) {
                goto LABEL_605;
              }
              if ((v38 - v36) >> 1 > v41) {
                unint64_t v41 = (v38 - v36) >> 1;
              }
              if ((unint64_t)(v38 - v36) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42)
              {
                if (v42 >> 62) {
                  goto LABEL_606;
                }
                uint64_t v43 = (char *)operator new(4 * v42);
              }
              else
              {
                uint64_t v43 = 0;
              }
              int v44 = &v43[4 * v40];
              *(_DWORD *)int v44 = v34;
              __int16 v45 = v44 + 4;
              while (v37 != v36)
              {
                int v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v44 - 1) = v46;
                v44 -= 4;
              }
              uint64_t v38 = &v43[4 * v42];
              if (v36) {
                operator delete(v36);
              }
              uint64_t v36 = v44;
              uint64_t v37 = v45;
            }
            else
            {
              *(_DWORD *)uint64_t v37 = v34;
              v37 += 4;
            }
            if (v507 >= (unint64_t)HIDWORD(v507)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v506 + v507) = v39;
            unsigned int v34 = v507 + 1;
            LODWORD(v507) = v507 + 1;
          }
          while (v35 != v33);
          int v127 = *((_DWORD *)v489 + 3);
          int v128 = v127 - 1;
          if (v127 == 1)
          {
            uint64_t v129 = v491;
            __int16 v31 = v477;
          }
          else
          {
            uint64_t v129 = v491;
            __int16 v31 = v477;
            do
            {
              if (v34 >= HIDWORD(v507)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v506 + v34) = v477[6];
              unsigned int v34 = v507 + 1;
              LODWORD(v507) = v507 + 1;
              --v128;
            }
            while (v128);
          }
        }
        if (*((_DWORD *)v489 + 2) > 0xFFu)
        {
          if (v34 >= HIDWORD(v507)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v506 + v34) = v31[7];
          unsigned int v34 = v507 + 1;
          LODWORD(v507) = v507 + 1;
        }
        uint64_t v136 = *v489[2];
        if (*(unsigned char *)(v136 + 8) != 7)
        {
          if (v34 >= HIDWORD(v507)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v506 + v34) = v31[7];
          LODWORD(v507) = v507 + 1;
        }
        if (sub_1CCAF0410())
        {
          int v137 = *((_DWORD *)v489 + 3);
          unsigned int v138 = v507;
          int v139 = v137 - 1;
          if (v137 != 1)
          {
            do
            {
              if (v138 >= HIDWORD(v507)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v506 + v138) = v31[3];
              unsigned int v138 = v507 + 1;
              LODWORD(v507) = v507 + 1;
              --v139;
            }
            while (v139);
          }
          if (*((_DWORD *)v489 + 2) <= 0xFFu)
          {
            int v140 = (uint64_t ***)v492;
          }
          else
          {
            int v140 = (uint64_t ***)v492;
            if (v138 >= HIDWORD(v507)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v506 + v138) = v31[4];
            unsigned int v138 = v507 + 1;
            LODWORD(v507) = v507 + 1;
          }
          if (*(unsigned char *)(v136 + 8) != 7)
          {
            if (v138 >= HIDWORD(v507)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v506 + v138) = v31[4];
            unsigned int v138 = v507 + 1;
            LODWORD(v507) = v507 + 1;
          }
        }
        else
        {
          unsigned int v138 = v507;
          int v140 = (uint64_t ***)v492;
        }
        BOOL v141 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)*v489[2], (uint64_t)v506, v138, *((_DWORD *)v489 + 2) > 0xFFu);
        uint64_t v498 = 0;
        uint64_t v499 = 0;
        std::string __p = 0;
        sub_1CBA85A80(&__p, v36, (uint64_t)v37, (v37 - v36) >> 2);
        p_p = (void **)v489;
        unsigned int v502 = v141;
        uint64_t v504 = 0;
        uint64_t v505 = 0;
        int v503 = 0;
        sub_1CBA85A80(&v503, __p, (uint64_t)v498, (v498 - (unsigned char *)__p) >> 2);
        if (__p)
        {
          uint64_t v498 = __p;
          operator delete(__p);
        }
        if (v36) {
          operator delete(v36);
        }
        if (v506 != v508) {
          free(v506);
        }
        unsigned int v142 = "__dfsw_";
        if (v487) {
          unsigned int v142 = "__dfso_";
        }
        *((unsigned char *)&v496.__r_.__value_.__s + 23) = 7;
        LODWORD(v496.__r_.__value_.__l.__data_) = *(_DWORD *)v142;
        *(_DWORD *)((char *)v496.__r_.__value_.__r.__words + 3) = *(_DWORD *)(v142 + 3);
        v496.__r_.__value_.__s.__data_[7] = 0;
        if ((*((unsigned char *)v481 + 23) & 0x10) != 0)
        {
          uint64_t v143 = ***(void ***)v481;
          uint64_t v144 = *(void *)(v143 + 152);
          uint64_t v145 = *(unsigned int *)(v143 + 168);
          if (v145)
          {
            LODWORD(v146) = (v145 - 1) & ((v481 >> 4) ^ (v481 >> 9));
            uint64_t v147 = (llvm::Function **)(v144 + 16 * v146);
            long long v148 = *v147;
            if (*v147 != v481)
            {
              int v149 = 1;
              do
              {
                if (v148 == (llvm::Function *)-4096) {
                  goto LABEL_194;
                }
                int v150 = v146 + v149++;
                uint64_t v146 = v150 & (v145 - 1);
                long long v148 = *(llvm::Function **)(v144 + 16 * v146);
              }
              while (v148 != v481);
              uint64_t v147 = (llvm::Function **)(v144 + 16 * v146);
            }
          }
          else
          {
LABEL_194:
            uint64_t v147 = (llvm::Function **)(v144 + 16 * v145);
          }
          unsigned int v151 = v147[1];
          std::string::size_type v154 = *(void *)v151;
          unsigned int v152 = (char *)v151 + 16;
          std::string::size_type v153 = v154;
        }
        else
        {
          std::string::size_type v153 = 0;
          unsigned int v152 = &byte_1CFBCE98E;
        }
        std::string::append(&v496, v152, v153);
        if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v155 = &v496;
        }
        else {
          char v155 = (std::string *)v496.__r_.__value_.__r.__words[0];
        }
        if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v496.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v496.__r_.__value_.__l.__size_;
        }
        inserted = (uint64_t **)llvm::Module::getOrInsertFunction(***v140, (unsigned __int8 *)v155, (const char *)size, v502, 0);
        uint64_t v158 = (uint64_t)v157;
        if (*((unsigned char *)v157 + 16)) {
          BOOL v159 = 1;
        }
        else {
          BOOL v159 = v157 == 0;
        }
        if (!v159)
        {
          llvm::Function::copyAttributesFrom(v157, v481);
          if (*(unsigned char *)(*v489[2] + 8) != 7) {
            llvm::Function::removeFnAttrs(v158, (uint64_t)(**v140 + 91));
          }
        }
        size_t v475 = (uint64_t **)v158;
        char v494 = 0;
        unsigned int v495 = 0;
        __int16 v493 = 0;
        uint64_t v160 = -(uint64_t)(*((_DWORD *)v129 + 5) & 0x7FFFFFF);
        int v161 = *((_DWORD *)v489 + 3);
        int v162 = v161 - 1;
        if (v161 == 1)
        {
          uint64_t v474 = 0;
          uint64_t v163 = 0;
        }
        else
        {
          uint64_t v163 = 0;
          uint64_t v164 = (uint64_t *)&v129[-4 * (*((_DWORD *)v129 + 5) & 0x7FFFFFF)];
          do
          {
            uint64_t v165 = *v164;
            if (v163 >= v495)
            {
              uint64_t v166 = (char *)v493;
              uint64_t v167 = (v163 - (unsigned char *)v493) >> 3;
              unint64_t v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 61) {
                goto LABEL_605;
              }
              uint64_t v169 = v495 - (unsigned char *)v493;
              if ((v495 - (unsigned char *)v493) >> 2 > v168) {
                unint64_t v168 = v169 >> 2;
              }
              if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v170 = v168;
              }
              if (v170)
              {
                if (v170 >> 61) {
                  goto LABEL_606;
                }
                uint64_t v171 = (char *)operator new(8 * v170);
              }
              else
              {
                uint64_t v171 = 0;
              }
              uint64_t v172 = &v171[8 * v167];
              *(void *)uint64_t v172 = v165;
              unint64_t v173 = v172 + 8;
              if (v163 != v166)
              {
                do
                {
                  uint64_t v174 = *((void *)v163 - 1);
                  v163 -= 8;
                  *((void *)v172 - 1) = v174;
                  v172 -= 8;
                }
                while (v163 != v166);
                uint64_t v163 = (char *)v493;
              }
              __int16 v493 = v172;
              char v494 = v173;
              unsigned int v495 = &v171[8 * v170];
              if (v163) {
                operator delete(v163);
              }
              uint64_t v163 = v173;
            }
            else
            {
              *(void *)uint64_t v163 = v165;
              v163 += 8;
            }
            char v494 = v163;
            v164 += 4;
            --v162;
          }
          while (v162);
          int v140 = (uint64_t ***)v492;
          uint64_t v474 = v493;
          uint64_t v129 = v491;
          uint64_t v160 = -(uint64_t)(*((_DWORD *)v491 + 5) & 0x7FFFFFF);
        }
        uint64_t v175 = (uint64_t *)&v129[4 * v160];
        uint64_t v478 = *((void *)v481 + 3);
        int v176 = *(_DWORD *)(v478 + 12);
        int v177 = v176 - 1;
        if (v176 == 1)
        {
          uint64_t v183 = v163;
        }
        else
        {
          do
          {
            uint64_t v178 = *v140;
            int v179 = sub_1CCAF68D0((uint64_t)*v140, *v175);
            uint64_t v180 = sub_1CCAF728C((uint64_t)v178, v179, (const llvm::Instruction *)v491);
            uint64_t v181 = v180;
            int v182 = v494;
            if (v494 >= v495)
            {
              BOOL v184 = (char *)v493;
              uint64_t v185 = (v494 - (unsigned char *)v493) >> 3;
              unint64_t v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 61) {
                goto LABEL_605;
              }
              uint64_t v187 = v495 - (unsigned char *)v493;
              if ((v495 - (unsigned char *)v493) >> 2 > v186) {
                unint64_t v186 = v187 >> 2;
              }
              if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v188 = v186;
              }
              if (v188)
              {
                if (v188 >> 61) {
                  goto LABEL_606;
                }
                char v189 = (char *)operator new(8 * v188);
              }
              else
              {
                char v189 = 0;
              }
              unint64_t v190 = (uint64_t **)&v189[8 * v185];
              llvm::Instruction *v190 = v181;
              uint64_t v183 = (char *)(v190 + 1);
              if (v182 == v184)
              {
                int v140 = (uint64_t ***)v492;
              }
              else
              {
                int v140 = (uint64_t ***)v492;
                do
                {
                  int v191 = (uint64_t *)*((void *)v182 - 1);
                  v182 -= 8;
                  *--unint64_t v190 = v191;
                }
                while (v182 != v184);
                int v182 = (char *)v493;
              }
              __int16 v493 = v190;
              char v494 = v183;
              unsigned int v495 = &v189[8 * v188];
              if (v182)
              {
                BOOL v192 = v182;
                uint64_t v193 = v183;
                operator delete(v192);
                uint64_t v183 = v193;
              }
            }
            else
            {
              *(void *)char v494 = v180;
              uint64_t v183 = v182 + 8;
              int v140 = (uint64_t ***)v492;
            }
            char v494 = v183;
            v175 += 4;
            --v177;
          }
          while (v177);
        }
        uint64_t v194 = v478;
        int v195 = v491;
        if (*(_DWORD *)(v478 + 8) > 0xFFu)
        {
          uint64_t v196 = (llvm::ArrayType *)(**v140)[6];
          int v197 = *((unsigned __int8 *)v491 + 16);
          if (v197 == 84)
          {
            uint64_t v198 = 0;
          }
          else
          {
            if (v197 == 39)
            {
              int v195 = v491;
              int v140 = (uint64_t ***)v492;
              uint64_t v198 = (*((_DWORD *)v491 + 20) + 1);
            }
            else
            {
              uint64_t v198 = 2;
              int v195 = v491;
              int v140 = (uint64_t ***)v492;
            }
            uint64_t v194 = v478;
          }
          int v199 = *((_DWORD *)v195 + 5);
          if (v199 < 0
            && (uint64_t v467 = &v195[-4 * (v199 & 0x7FFFFFF)], v468 = (uint64_t)*(v467 - 1), (v468 & 0xFFFFFFFF0) != 0))
          {
            uint64_t v201 = -(uint64_t)(v199 & 0x7FFFFFF);
            int v200 = *((_DWORD *)v467 - 3) - *(_DWORD *)((char *)v467 - v468);
          }
          else
          {
            int v200 = 0;
            uint64_t v201 = -(uint64_t)(v199 & 0x7FFFFFF);
          }
          int v202 = llvm::ArrayType::get(v196, (llvm::Type *)(((-32 * v198+ 32 * (unint64_t)-v200- 32 * v201- 32) >> 5)- *(_DWORD *)(v194 + 12)+ 1));
          uint64_t v203 = operator new(0x68uLL);
          v203[13] = v203[13] & 0x38000000 | 1;
          *(void *)uint64_t v203 = 0;
          *((void *)v203 + 1) = 0;
          *((void *)v203 + 2) = 0;
          *((void *)v203 + 3) = v203 + 8;
          unsigned int v204 = (*v140)[1];
          uint64_t v205 = (llvm::Type *)*(unsigned int *)(v204[5] + 276);
          uint64_t v506 = "labelva";
          __int16 v509 = 259;
          uint64_t v206 = v204[10];
          if (v206) {
            uint64_t v207 = v206 - 24;
          }
          else {
            uint64_t v207 = 0;
          }
          uint64_t v208 = *(void *)(v207 + 48);
          if (v208) {
            BOOL v209 = (llvm::Instruction *)(v208 - 24);
          }
          else {
            BOOL v209 = 0;
          }
          uint64_t v485 = (const llvm::APInt *)(v203 + 8);
          uint64_t v210 = (uint64_t)v202;
          llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v203 + 8), v202, v205, 0, (const char **)&v506, v209);
          unsigned int v211 = 0;
          uint64_t v472 = v195 - 1;
          while (1)
          {
            int v212 = *((unsigned __int8 *)v195 + 16);
            if (v212 == 84)
            {
              uint64_t v213 = 0;
            }
            else if (v212 == 39)
            {
              int v195 = v491;
              int v140 = (uint64_t ***)v492;
              uint64_t v213 = (*((_DWORD *)v491 + 20) + 1);
            }
            else
            {
              uint64_t v213 = 2;
              int v195 = v491;
              int v140 = (uint64_t ***)v492;
            }
            int v214 = *((_DWORD *)v195 + 5);
            if (v214 < 0)
            {
              uint64_t v215 = 0;
              uint64_t v232 = v214 & 0x7FFFFFF;
              if (((unint64_t)v472[-4 * v232] & 0xFFFFFFFF0) != 0) {
                uint64_t v215 = (*((_DWORD *)&v195[-4 * v232 - 1] - 1)
              }
                                    - *(_DWORD *)((char *)&v195[-4 * v232] - (char *)v195[-4 * v232 - 1]));
            }
            else
            {
              uint64_t v215 = 0;
            }
            if (v175 == &v5[-4 * v213 + -4 * v215]) {
              break;
            }
            __int16 v509 = 257;
            unsigned int v216 = sub_1CC5812D4((uint64_t *)&v523, v210, v485, 0, v211, (uint64_t)&v506);
            uint64_t v217 = *v140;
            unint64_t v218 = sub_1CCAF68D0((uint64_t)*v140, *v175);
            unsigned int v219 = sub_1CCAF728C((uint64_t)v217, v218, (const llvm::Instruction *)v195);
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v526[7] + 40) + 272), (llvm::Type *)*v219, 1);
            unsigned int v221 = (char *)operator new(0x80uLL);
            *((_DWORD *)v221 + 21) = *((_DWORD *)v221 + 21) & 0x38000000 | 2;
            *(void *)unsigned int v221 = 0;
            *((void *)v221 + 2) = 0;
            *((void *)v221 + 1) = 0;
            *((void *)v221 + 5) = 0;
            *((void *)v221 + 6) = 0;
            *((void *)v221 + 4) = 0;
            unint64_t v222 = (uint64_t ****)(v221 + 32);
            *((void *)v221 + 8) = **(void **)*v219 + 1576;
            unint64_t v223 = (llvm::Instruction *)(v221 + 64);
            *((void *)v221 + 3) = v221 + 64;
            *((void *)v221 + 7) = v221 + 64;
            *((void *)v221 + 9) = 0;
            v221[80] = 61;
            v221[81] = 0;
            *((_WORD *)v221 + 41) = 0;
            *((_DWORD *)v221 + 21) = 2;
            *(_OWORD *)(v221 + 88) = 0u;
            *(_OWORD *)(v221 + 104) = 0u;
            *((_DWORD *)v221 + 30) = 0;
            *(void *)unsigned int v221 = v219;
            uint64_t v226 = v219[1];
            int v225 = v219 + 1;
            uint64_t v224 = v226;
            *((void *)v221 + 1) = v226;
            if (v226) {
              *(void *)(v224 + 16) = v221 + 8;
            }
            *((void *)v221 + 2) = v225;
            void *v225 = v221;
            if (*((void *)v221 + 4))
            {
              **((void **)v221 + 6) = *((void *)v221 + 5);
              uint64_t v233 = *((void *)v221 + 5);
              if (v233) {
                *(void *)(v233 + 16) = *((void *)v221 + 6);
              }
            }
            *unint64_t v222 = v216;
            int v195 = v491;
            if (v216)
            {
              int v229 = v216[1];
              BOOL v228 = (uint64_t *****)(v216 + 1);
              uint64_t v227 = v229;
              *((void *)v221 + 5) = v229;
              if (v229) {
                v227[2] = (uint64_t *)(v221 + 40);
              }
              *((void *)v221 + 6) = v228;
              llvm::ConstantAggregateZero *v228 = v222;
            }
            *((_WORD *)v221 + 41) = 2 * (Alignment & 0x3F);
            v221[124] = 1;
            __int16 v509 = 257;
            (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v530 + 16))(v530, v223, &v506, v526, v527);
            if (v524)
            {
              uint64_t v230 = (llvm::MDNode **)v523;
              uint64_t v231 = &v523[16 * v524];
              do
              {
                llvm::Instruction::setMetadata(v223, *(_DWORD *)v230, v230[1]);
                v230 += 2;
              }
              while (v230 != (llvm::MDNode **)v231);
            }
            v175 += 4;
            ++v211;
            int v140 = (uint64_t ***)v492;
          }
          __int16 v509 = 257;
          uint64_t v234 = sub_1CC5812D4((uint64_t *)&v523, v210, v485, 0, 0, (uint64_t)&v506);
          uint64_t v235 = v234;
          uint64_t v236 = v494;
          if (v494 >= v495)
          {
            unsigned int v237 = (char *)v493;
            uint64_t v238 = (v494 - (unsigned char *)v493) >> 3;
            unint64_t v239 = v238 + 1;
            if ((unint64_t)(v238 + 1) >> 61) {
              goto LABEL_605;
            }
            uint64_t v240 = v495 - (unsigned char *)v493;
            if ((v495 - (unsigned char *)v493) >> 2 > v239) {
              unint64_t v239 = v240 >> 2;
            }
            if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v241 = v239;
            }
            if (v241)
            {
              if (v241 >> 61) {
                goto LABEL_606;
              }
              unint64_t v242 = (char *)operator new(8 * v241);
            }
            else
            {
              unint64_t v242 = 0;
            }
            uint64_t v281 = (uint64_t ****)&v242[8 * v238];
            llvm::Value *v281 = v235;
            uint64_t v183 = (char *)(v281 + 1);
            if (v236 == v237)
            {
              int v140 = (uint64_t ***)v492;
            }
            else
            {
              int v140 = (uint64_t ***)v492;
              do
              {
                unint64_t v282 = (uint64_t ***)*((void *)v236 - 1);
                v236 -= 8;
                *--uint64_t v281 = v282;
              }
              while (v236 != v237);
              uint64_t v236 = (char *)v493;
            }
            __int16 v493 = v281;
            char v494 = v183;
            unsigned int v495 = &v242[8 * v241];
            int v195 = v491;
            if (v236)
            {
              uint64_t v283 = v236;
              unint64_t v284 = v183;
              operator delete(v283);
              uint64_t v183 = v284;
            }
          }
          else
          {
            *(void *)char v494 = v234;
            uint64_t v183 = v236 + 8;
            int v140 = (uint64_t ***)v492;
          }
          uint64_t v194 = v478;
          char v494 = v183;
        }
        if (*(unsigned char *)(**(void **)(v194 + 16) + 8) != 7)
        {
          uint64_t v285 = (*v140)[12];
          if (!v285)
          {
            uint64_t v286 = operator new(0x68uLL);
            uint64_t v285 = (uint64_t *)(v286 + 8);
            v286[13] = v286[13] & 0x38000000 | 1;
            *(void *)uint64_t v286 = 0;
            *((void *)v286 + 1) = 0;
            *((void *)v286 + 2) = 0;
            *((void *)v286 + 3) = v286 + 8;
            unsigned int v287 = (*v140)[1];
            uint64_t v288 = (llvm::Type *)(**v140)[6];
            unsigned int v289 = (llvm::Type *)*(unsigned int *)(v287[5] + 276);
            uint64_t v506 = "labelreturn";
            __int16 v509 = 259;
            uint64_t v290 = v287[10];
            if (v290) {
              uint64_t v291 = v290 - 24;
            }
            else {
              uint64_t v291 = 0;
            }
            uint64_t v292 = *(void *)(v291 + 48);
            if (v292) {
              int v293 = (llvm::Instruction *)(v292 - 24);
            }
            else {
              int v293 = 0;
            }
            llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v286 + 8), v288, v289, 0, (const char **)&v506, v293);
            (*v140)[12] = v285;
            uint64_t v183 = v494;
          }
          if (v183 >= v495)
          {
            unsigned int v295 = (char *)v493;
            uint64_t v296 = (v183 - (unsigned char *)v493) >> 3;
            unint64_t v297 = v296 + 1;
            if ((unint64_t)(v296 + 1) >> 61) {
              goto LABEL_605;
            }
            uint64_t v298 = v495 - (unsigned char *)v493;
            if ((v495 - (unsigned char *)v493) >> 2 > v297) {
              unint64_t v297 = v298 >> 2;
            }
            if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v299 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v299 = v297;
            }
            if (v299)
            {
              if (v299 >> 61) {
                goto LABEL_606;
              }
              unint64_t v300 = v183;
              unint64_t v301 = (char *)operator new(8 * v299);
              uint64_t v183 = v300;
            }
            else
            {
              unint64_t v301 = 0;
            }
            unsigned int v302 = (uint64_t **)&v301[8 * v296];
            __int16 v303 = &v301[8 * v299];
            *unsigned int v302 = v285;
            BOOL v294 = (char *)(v302 + 1);
            if (v183 != v295)
            {
              do
              {
                unsigned int v304 = (uint64_t *)*((void *)v183 - 1);
                v183 -= 8;
                *--unsigned int v302 = v304;
              }
              while (v183 != v295);
              uint64_t v183 = (char *)v493;
            }
            __int16 v493 = v302;
            char v494 = v294;
            unsigned int v495 = v303;
            int v140 = (uint64_t ***)v492;
            if (v183) {
              operator delete(v183);
            }
          }
          else
          {
            *(void *)uint64_t v183 = v285;
            BOOL v294 = v183 + 8;
          }
          char v494 = v294;
          uint64_t v183 = v294;
          int v195 = v491;
        }
        int v473 = v493;
        uint64_t v305 = v183;
        int v479 = v183;
        if (v487)
        {
          unsigned int v306 = (uint64_t *)&v195[-4 * (*((_DWORD *)v195 + 5) & 0x7FFFFFF)];
          uint64_t v482 = (llvm::Function *)*((void *)v481 + 3);
          int v307 = *((_DWORD *)v482 + 3);
          int v308 = v307 - 1;
          if (v307 == 1)
          {
            uint64_t v305 = v183;
          }
          else
          {
            do
            {
              unsigned int v309 = sub_1CCAF6F18((uint64_t *)*v140, *v306);
              int v310 = v309;
              BOOL v311 = v494;
              if (v494 >= v495)
              {
                unsigned int v312 = (char *)v493;
                uint64_t v313 = (v494 - (unsigned char *)v493) >> 3;
                unint64_t v314 = v313 + 1;
                if ((unint64_t)(v313 + 1) >> 61) {
                  goto LABEL_605;
                }
                uint64_t v315 = v495 - (unsigned char *)v493;
                if ((v495 - (unsigned char *)v493) >> 2 > v314) {
                  unint64_t v314 = v315 >> 2;
                }
                if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v316 = v314;
                }
                if (v316)
                {
                  if (v316 >> 61) {
                    goto LABEL_606;
                  }
                  unint64_t v317 = (char *)operator new(8 * v316);
                }
                else
                {
                  unint64_t v317 = 0;
                }
                BOOL v318 = (llvm::Instruction **)&v317[8 * v313];
                unsigned __int8 *v318 = v310;
                uint64_t v305 = (char *)(v318 + 1);
                if (v311 == v312)
                {
                  int v140 = (uint64_t ***)v492;
                }
                else
                {
                  int v140 = (uint64_t ***)v492;
                  do
                  {
                    int v319 = (llvm::Instruction *)*((void *)v311 - 1);
                    v311 -= 8;
                    *--BOOL v318 = v319;
                  }
                  while (v311 != v312);
                  BOOL v311 = (char *)v493;
                }
                __int16 v493 = v318;
                char v494 = v305;
                unsigned int v495 = &v317[8 * v316];
                if (v311) {
                  operator delete(v311);
                }
              }
              else
              {
                *(void *)char v494 = v309;
                uint64_t v305 = v311 + 8;
                int v140 = (uint64_t ***)v492;
              }
              char v494 = v305;
              v306 += 4;
              --v308;
            }
            while (v308);
          }
          unint64_t v320 = v482;
          int v195 = v491;
          if (*((_DWORD *)v482 + 2) > 0xFFu)
          {
            unint64_t v321 = (llvm::ArrayType *)(**v140)[3];
            int v322 = *((unsigned __int8 *)v491 + 16);
            if (v322 == 84)
            {
              uint64_t v323 = 0;
            }
            else
            {
              if (v322 == 39)
              {
                int v195 = v491;
                int v140 = (uint64_t ***)v492;
                uint64_t v323 = (*((_DWORD *)v491 + 20) + 1);
              }
              else
              {
                uint64_t v323 = 2;
                int v195 = v491;
                int v140 = (uint64_t ***)v492;
              }
              unint64_t v320 = v482;
            }
            int v324 = *((_DWORD *)v195 + 5);
            if (v324 < 0
              && (uint64_t v469 = &v195[-4 * (v324 & 0x7FFFFFF)], v470 = (uint64_t)*(v469 - 1), (v470 & 0xFFFFFFFF0) != 0))
            {
              uint64_t v326 = -(uint64_t)(v324 & 0x7FFFFFF);
              int v325 = *((_DWORD *)v469 - 3) - *(_DWORD *)((char *)v469 - v470);
            }
            else
            {
              int v325 = 0;
              uint64_t v326 = -(uint64_t)(v324 & 0x7FFFFFF);
            }
            int v327 = llvm::ArrayType::get(v321, (llvm::Type *)(((-32 * v323+ 32 * (unint64_t)-v325- 32 * v326- 32) >> 5)- *((_DWORD *)v320 + 3)+ 1));
            uint64_t v328 = operator new(0x68uLL);
            v328[13] = v328[13] & 0x38000000 | 1;
            *(void *)uint64_t v328 = 0;
            *((void *)v328 + 1) = 0;
            *((void *)v328 + 2) = 0;
            *((void *)v328 + 3) = v328 + 8;
            unint64_t v329 = (*v140)[1];
            int v330 = (llvm::Type *)*(unsigned int *)(v329[5] + 276);
            uint64_t v506 = "originva";
            __int16 v509 = 259;
            uint64_t v331 = v329[10];
            if (v331) {
              uint64_t v332 = v331 - 24;
            }
            else {
              uint64_t v332 = 0;
            }
            uint64_t v333 = *(void *)(v332 + 48);
            if (v333) {
              int v334 = (llvm::Instruction *)(v333 - 24);
            }
            else {
              int v334 = 0;
            }
            uint64_t v486 = (const llvm::APInt *)(v328 + 8);
            uint64_t v335 = (uint64_t)v327;
            llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v328 + 8), v327, v330, 0, (const char **)&v506, v334);
            unsigned int v336 = 0;
            uint64_t v471 = v195 - 1;
            while (1)
            {
              int v337 = *((unsigned __int8 *)v195 + 16);
              if (v337 == 84)
              {
                uint64_t v338 = 0;
              }
              else if (v337 == 39)
              {
                int v195 = v491;
                int v140 = (uint64_t ***)v492;
                uint64_t v338 = (*((_DWORD *)v491 + 20) + 1);
              }
              else
              {
                uint64_t v338 = 2;
                int v195 = v491;
                int v140 = (uint64_t ***)v492;
              }
              int v339 = *((_DWORD *)v195 + 5);
              if (v339 < 0)
              {
                uint64_t v340 = 0;
                uint64_t v355 = v339 & 0x7FFFFFF;
                if (((unint64_t)v471[-4 * v355] & 0xFFFFFFFF0) != 0) {
                  uint64_t v340 = (*((_DWORD *)&v195[-4 * v355 - 1] - 1)
                }
                                      - *(_DWORD *)((char *)&v195[-4 * v355] - (char *)v195[-4 * v355 - 1]));
              }
              else
              {
                uint64_t v340 = 0;
              }
              if (v306 == &v5[-4 * v338 + -4 * v340]) {
                break;
              }
              __int16 v509 = 257;
              uint64_t v341 = sub_1CC5812D4((uint64_t *)&v523, v335, v486, 0, v336, (uint64_t)&v506);
              unsigned int v342 = sub_1CCAF6F18((uint64_t *)*v140, *v306);
              char v343 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v526[7] + 40) + 272), *(llvm::Type **)v342, 1);
              int v344 = (char *)operator new(0x80uLL);
              *((_DWORD *)v344 + 21) = *((_DWORD *)v344 + 21) & 0x38000000 | 2;
              *(void *)int v344 = 0;
              *((void *)v344 + 2) = 0;
              *((void *)v344 + 1) = 0;
              *((void *)v344 + 5) = 0;
              *((void *)v344 + 6) = 0;
              *((void *)v344 + 4) = 0;
              BOOL v345 = (uint64_t ****)(v344 + 32);
              *((void *)v344 + 8) = ***(void ***)v342 + 1576;
              uint64_t v346 = (llvm::Instruction *)(v344 + 64);
              *((void *)v344 + 3) = v344 + 64;
              *((void *)v344 + 7) = v344 + 64;
              *((void *)v344 + 9) = 0;
              v344[80] = 61;
              v344[81] = 0;
              *((_WORD *)v344 + 41) = 0;
              *((_DWORD *)v344 + 21) = 2;
              *(_OWORD *)(v344 + 88) = 0u;
              *(_OWORD *)(v344 + 104) = 0u;
              *((_DWORD *)v344 + 30) = 0;
              *(void *)int v344 = v342;
              uint64_t v349 = *((void *)v342 + 1);
              uint64_t v348 = (void *)((char *)v342 + 8);
              uint64_t v347 = v349;
              *((void *)v344 + 1) = v349;
              if (v349) {
                *(void *)(v347 + 16) = v344 + 8;
              }
              *((void *)v344 + 2) = v348;
              *uint64_t v348 = v344;
              if (*((void *)v344 + 4))
              {
                **((void **)v344 + 6) = *((void *)v344 + 5);
                uint64_t v356 = *((void *)v344 + 5);
                if (v356) {
                  *(void *)(v356 + 16) = *((void *)v344 + 6);
                }
              }
              *BOOL v345 = v341;
              int v195 = v491;
              if (v341)
              {
                uint64_t v352 = v341[1];
                uint64_t v351 = (uint64_t *****)(v341 + 1);
                uint64_t v350 = v352;
                *((void *)v344 + 5) = v352;
                if (v352) {
                  v350[2] = (uint64_t *)(v344 + 40);
                }
                *((void *)v344 + 6) = v351;
                *uint64_t v351 = v345;
              }
              *((_WORD *)v344 + 41) = 2 * (v343 & 0x3F);
              v344[124] = 1;
              __int16 v509 = 257;
              (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v530 + 16))(v530, v346, &v506, v526, v527);
              if (v524)
              {
                uint64_t v353 = (llvm::MDNode **)v523;
                uint64_t v354 = &v523[16 * v524];
                do
                {
                  llvm::Instruction::setMetadata(v346, *(_DWORD *)v353, v353[1]);
                  v353 += 2;
                }
                while (v353 != (llvm::MDNode **)v354);
              }
              v306 += 4;
              ++v336;
              int v140 = (uint64_t ***)v492;
            }
            __int16 v509 = 257;
            uint64_t v357 = sub_1CC5812D4((uint64_t *)&v523, v335, v486, 0, 0, (uint64_t)&v506);
            std::string::size_type v358 = v357;
            uint64_t v359 = v494;
            if (v494 >= v495)
            {
              unsigned __int8 v360 = (char *)v493;
              uint64_t v361 = (v494 - (unsigned char *)v493) >> 3;
              unint64_t v362 = v361 + 1;
              if ((unint64_t)(v361 + 1) >> 61) {
                goto LABEL_605;
              }
              uint64_t v363 = v495 - (unsigned char *)v493;
              if ((v495 - (unsigned char *)v493) >> 2 > v362) {
                unint64_t v362 = v363 >> 2;
              }
              if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v364 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v364 = v362;
              }
              if (v364)
              {
                if (v364 >> 61) {
                  goto LABEL_606;
                }
                unsigned int v365 = (char *)operator new(8 * v364);
              }
              else
              {
                unsigned int v365 = 0;
              }
              uint64_t v376 = (uint64_t ****)&v365[8 * v361];
              int v377 = &v365[8 * v364];
              *uint64_t v376 = v358;
              uint64_t v305 = (char *)(v376 + 1);
              if (v359 == v360)
              {
                int v195 = v491;
                int v140 = (uint64_t ***)v492;
              }
              else
              {
                int v195 = v491;
                int v140 = (uint64_t ***)v492;
                do
                {
                  uint64_t v378 = (uint64_t ***)*((void *)v359 - 1);
                  v359 -= 8;
                  *--uint64_t v376 = v378;
                }
                while (v359 != v360);
                uint64_t v359 = (char *)v493;
              }
              __int16 v493 = v376;
              char v494 = v305;
              unsigned int v495 = v377;
              if (v359) {
                operator delete(v359);
              }
            }
            else
            {
              *(void *)char v494 = v357;
              uint64_t v305 = v359 + 8;
              int v140 = (uint64_t ***)v492;
            }
            unint64_t v320 = v482;
            char v494 = v305;
          }
          if (*(unsigned char *)(**((void **)v320 + 2) + 8) != 7)
          {
            int v379 = (*v140)[13];
            if (!v379)
            {
              uint64_t v380 = operator new(0x68uLL);
              int v379 = (uint64_t *)(v380 + 8);
              v380[13] = v380[13] & 0x38000000 | 1;
              *(void *)uint64_t v380 = 0;
              *((void *)v380 + 1) = 0;
              *((void *)v380 + 2) = 0;
              *((void *)v380 + 3) = v380 + 8;
              uint64_t v381 = (*v140)[1];
              int v382 = (llvm::Type *)(**v140)[3];
              BOOL v383 = (llvm::Type *)*(unsigned int *)(v381[5] + 276);
              uint64_t v506 = "originreturn";
              __int16 v509 = 259;
              uint64_t v384 = v381[10];
              if (v384) {
                uint64_t v385 = v384 - 24;
              }
              else {
                uint64_t v385 = 0;
              }
              uint64_t v386 = *(void *)(v385 + 48);
              if (v386) {
                unsigned int v387 = (llvm::Instruction *)(v386 - 24);
              }
              else {
                unsigned int v387 = 0;
              }
              llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v380 + 8), v382, v383, 0, (const char **)&v506, v387);
              (*v140)[13] = v379;
              uint64_t v305 = v494;
            }
            if (v305 >= v495)
            {
              uint64_t v389 = (char *)v493;
              uint64_t v390 = (v305 - (unsigned char *)v493) >> 3;
              unint64_t v391 = v390 + 1;
              if ((unint64_t)(v390 + 1) >> 61) {
                goto LABEL_605;
              }
              uint64_t v392 = v495 - (unsigned char *)v493;
              if ((v495 - (unsigned char *)v493) >> 2 > v391) {
                unint64_t v391 = v392 >> 2;
              }
              if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v393 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v393 = v391;
              }
              if (v393)
              {
                if (v393 >> 61) {
                  goto LABEL_606;
                }
                uint64_t v394 = (char *)operator new(8 * v393);
              }
              else
              {
                uint64_t v394 = 0;
              }
              uint64_t v395 = (uint64_t **)&v394[8 * v390];
              llvm::Instruction *v395 = v379;
              uint64_t v388 = (char *)(v395 + 1);
              if (v305 != v389)
              {
                do
                {
                  int v396 = (uint64_t *)*((void *)v305 - 1);
                  v305 -= 8;
                  *--uint64_t v395 = v396;
                }
                while (v305 != v389);
                uint64_t v305 = (char *)v493;
              }
              __int16 v493 = v395;
              char v494 = v388;
              unsigned int v495 = &v394[8 * v393];
              if (v305) {
                operator delete(v305);
              }
            }
            else
            {
              *(void *)uint64_t v305 = v379;
              uint64_t v388 = v305 + 8;
            }
            char v494 = v388;
            uint64_t v305 = v388;
          }
        }
        int v397 = *((_DWORD *)v195 + 5);
        int v398 = *((unsigned __int8 *)v195 + 16);
        if (v398 == 84)
        {
          uint64_t v399 = 0;
        }
        else if (v398 == 39)
        {
          int v195 = v491;
          uint64_t v399 = (*((_DWORD *)v491 + 20) + 1);
        }
        else
        {
          uint64_t v399 = 2;
          int v195 = v491;
        }
        uint64_t v400 = &v195[-4 * (v397 & 0x7FFFFFF)];
        if (v397 < 0)
        {
          uint64_t v466 = (uint64_t)*(v400 - 1);
          if ((v466 & 0xFFFFFFFF0) != 0) {
            uint64_t v401 = (*((_DWORD *)v400 - 3) - *(_DWORD *)((char *)v400 - v466));
          }
          else {
            uint64_t v401 = 0;
          }
          int v195 = v491;
        }
        else
        {
          uint64_t v401 = 0;
        }
        int v402 = (uint64_t *)&(&v195[-4 * v399])[-4 * v401 - 4];
        char v403 = (uint64_t *)&v400[4 * (*((_DWORD *)v489 + 3) - 1)];
        sub_1CC233E3C((char **)&v493, (uint64_t)v305, v403, v402, ((char *)v402 - (char *)v403) >> 5);
        __int16 v509 = 257;
        uint64_t v404 = sub_1CB845BAC((uint64_t *)&v523, inserted, v475, (uint64_t *)v493, (v494 - (unsigned char *)v493) >> 3, (uint64_t)&v506, 0);
        *(_WORD *)(v404 + 18) = *(_WORD *)(v404 + 18) & 0xF003 | *((_WORD *)v480 + 9) & 0xFFC;
        int v405 = **(uint64_t ***)v480;
        uint64_t v406 = *((void *)v480 + 8);
        int v407 = *((_DWORD *)v502 + 3);
        unsigned int v408 = v407 - 1;
        if (v407 == 1)
        {
          unint64_t v409 = 0;
          unint64_t v410 = 0;
        }
        else
        {
          unint64_t v409 = (char *)operator new(8 * (v407 - 1));
          bzero(v409, 8 * v408);
          unint64_t v410 = &v409[8 * v408];
        }
        uint64_t v411 = (unsigned int *)v503;
        if (((v504 - (void)v503) & 0x3FFFFFFFCLL) != 0)
        {
          uint64_t v412 = 0;
          uint64_t v413 = ((unint64_t)(v504 - (void)v503) >> 2);
          do
          {
            if (v406 && (v412 + 2) < *(_DWORD *)(v406 + 8)) {
              uint64_t v414 = *(void *)(v406 + 40 + 8 * (v412 + 2));
            }
            else {
              uint64_t v414 = 0;
            }
            *(void *)&v409[8 * v411[v412++]] = v414;
          }
          while (v413 != v412);
        }
        if (!v406)
        {
          uint64_t v415 = 0;
          uint64_t v416 = 0;
          goto LABEL_543;
        }
        uint64_t v483 = (llvm::Function *)v405;
        uint64_t v417 = (*((_DWORD *)p_p + 3) - 1);
        uint64_t v418 = *(unsigned int *)(v406 + 8);
        if (v417 >= v418)
        {
          unint64_t v419 = v410;
        }
        else
        {
          unint64_t v419 = v410;
          do
          {
            if ((v417 + 2) < *(_DWORD *)(v406 + 8)) {
              uint64_t v420 = *(void *)(v406 + 40 + 8 * (v417 + 2));
            }
            else {
              uint64_t v420 = 0;
            }
            if (v419 >= v410)
            {
              uint64_t v421 = (v419 - v409) >> 3;
              unint64_t v422 = v421 + 1;
              if ((unint64_t)(v421 + 1) >> 61) {
                goto LABEL_605;
              }
              if ((v410 - v409) >> 2 > v422) {
                unint64_t v422 = (v410 - v409) >> 2;
              }
              if ((unint64_t)(v410 - v409) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v423 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v423 = v422;
              }
              if (v423)
              {
                if (v423 >> 61) {
                  goto LABEL_606;
                }
                uint64_t v424 = (char *)operator new(8 * v423);
              }
              else
              {
                uint64_t v424 = 0;
              }
              uint64_t v425 = &v424[8 * v421];
              *(void *)uint64_t v425 = v420;
              uint64_t v426 = v425 + 8;
              if (v419 != v409)
              {
                do
                {
                  uint64_t v427 = *((void *)v419 - 1);
                  v419 -= 8;
                  *((void *)v425 - 1) = v427;
                  v425 -= 8;
                }
                while (v419 != v409);
                unint64_t v419 = v409;
              }
              unint64_t v409 = v425;
              unint64_t v410 = &v424[8 * v423];
              if (v419) {
                operator delete(v419);
              }
              unint64_t v419 = v426;
            }
            else
            {
              *(void *)unint64_t v419 = v420;
              v419 += 8;
            }
            ++v417;
          }
          while (v417 != v418);
          LODWORD(v418) = *(_DWORD *)(v406 + 8);
        }
        int v405 = (uint64_t *)v483;
        if (v418)
        {
          uint64_t v415 = *(void *)(v406 + 40);
          if (v418 != 1)
          {
            uint64_t v416 = *(void *)(v406 + 48);
            goto LABEL_542;
          }
        }
        else
        {
          uint64_t v415 = 0;
        }
        uint64_t v416 = 0;
LABEL_542:
        unint64_t v410 = v419;
LABEL_543:
        uint64_t v428 = llvm::AttributeList::get(v405, v415, v416, v409, (v410 - v409) >> 3);
        if (v409) {
          operator delete(v409);
        }
        *(void *)(v404 + 64) = v428;
        if (*((_DWORD *)v489 + 3) != 1)
        {
          unint64_t v429 = 0;
          unint64_t v430 = (unint64_t)(v163 - v474) >> 3;
          unint64_t v431 = (unint64_t)(v479 - v473) >> 3;
          do
          {
            if (**(void **)(v404 - 32 * (*(_DWORD *)(v404 + 20) & 0x7FFFFFF) + 32 * (v430 + v429)) == *(void *)(**v492 + 48)) {
              *(void *)(v404 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v404 + 64), **(uint64_t ***)v404, (int)v430 + (int)v429 + 1, 67);
            }
            if (v487
              && **(void **)(v404 - 32 * (*(_DWORD *)(v404 + 20) & 0x7FFFFFF) + 32 * (v431 + v429)) == *(void *)(**v492 + 24))
            {
              *(void *)(v404 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v404 + 64), **(uint64_t ***)v404, (int)v431 + (int)v429 + 1, 67);
            }
            ++v429;
          }
          while (v429 < (*((_DWORD *)v489 + 3) - 1));
        }
        if (*(unsigned char *)(*v489[2] + 8) != 7)
        {
          unint64_t v432 = *(llvm::Type **)(**v492 + 48);
          uint64_t v433 = (*v492)[12];
          __int16 v500 = 257;
          char v434 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v526[7] + 40) + 272), v432, 1);
          uint64_t v435 = operator new(0x60uLL);
          v435[13] = v435[13] & 0x38000000 | 1;
          uint64_t v436 = (llvm::Instruction *)(v435 + 8);
          *(void *)uint64_t v435 = 0;
          *((void *)v435 + 1) = 0;
          *((void *)v435 + 2) = 0;
          *((void *)v435 + 3) = v435 + 8;
          __int16 v509 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v435 + 8), (uint64_t)v432, v433, (const char **)&v506, 0, v434, 0);
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v530 + 16))(v530, v436, &__p, v526, v527);
          if (v524)
          {
            uint64_t v445 = (llvm::MDNode **)v523;
            uint64_t v446 = &v523[16 * v524];
            do
            {
              llvm::Instruction::setMetadata(v436, *(_DWORD *)v445, v445[1]);
              v445 += 2;
            }
            while (v445 != (llvm::MDNode **)v446);
          }
          int v437 = *v492;
          BOOL v438 = sub_1CCAFB838(*v492, *v489[2], (uint64_t)v436, v491);
          uint64_t v506 = (void *)v404;
          sub_1CC080DE0(v437 + 14, &v506)[1] = v438;
          if (v487)
          {
            int v439 = *(llvm::Type **)(**v492 + 24);
            uint64_t v440 = (*v492)[13];
            __int16 v500 = 257;
            char v441 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v526[7] + 40) + 272), v439, 1);
            unint64_t v442 = operator new(0x60uLL);
            v442[13] = v442[13] & 0x38000000 | 1;
            uint64_t v443 = (llvm::Instruction *)(v442 + 8);
            *(void *)unint64_t v442 = 0;
            *((void *)v442 + 1) = 0;
            *((void *)v442 + 2) = 0;
            *((void *)v442 + 3) = v442 + 8;
            __int16 v509 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v442 + 8), (uint64_t)v439, v440, (const char **)&v506, 0, v441, 0);
            (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v530 + 16))(v530, v443, &__p, v526, v527);
            if (v524)
            {
              unint64_t v460 = (llvm::MDNode **)v523;
              int v461 = &v523[16 * v524];
              do
              {
                llvm::Instruction::setMetadata(v443, *(_DWORD *)v460, v460[1]);
                v460 += 2;
              }
              while (v460 != (llvm::MDNode **)v461);
            }
            unint64_t v444 = *v492;
            if (sub_1CCAF0410())
            {
              uint64_t v506 = (void *)v404;
              sub_1CC080DE0(v444 + 17, &v506)[1] = v443;
            }
          }
        }
        llvm::Value::doRAUW(v480, (llvm::Value *)v404, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      default:
        a2[9] = (uint64_t *)v11[3];
        if (*(a2 - 4))
        {
          **(a2 - 2) = (uint64_t)*(a2 - 3);
          uint64_t v243 = (uint64_t)*(a2 - 3);
          if (v243) {
            *(void *)(v243 + 16) = *(a2 - 2);
          }
        }
        *(a2 - 4) = (uint64_t *)v11;
        unsigned int v244 = (uint64_t *)v11[1];
        *(a2 - 3) = v244;
        if (v244) {
          v244[2] = (uint64_t)(a2 - 3);
        }
        *(a2 - 2) = (uint64_t *)(v11 + 1);
        v11[1] = (uint64_t **)v5;
        uint64_t v245 = **v3;
        uint64_t v246 = *(uint64_t ***)(v245 + 280);
        unsigned int v247 = *(uint64_t ***)(v245 + 288);
        if ((*((unsigned char *)v11 + 23) & 0x10) != 0)
        {
          uint64_t v248 = ***v11;
          uint64_t v249 = *(void *)(v248 + 152);
          uint64_t v250 = *(unsigned int *)(v248 + 168);
          if (v250)
          {
            LODWORD(v251) = (v250 - 1) & ((v11 >> 4) ^ (v11 >> 9));
            uint64_t v252 = (uint64_t ****)(v249 + 16 * v251);
            unint64_t v253 = *v252;
            if (*v252 != v11)
            {
              int v254 = 1;
              do
              {
                if (v253 == (uint64_t ***)-4096) {
                  goto LABEL_574;
                }
                int v255 = v251 + v254++;
                uint64_t v251 = v255 & (v250 - 1);
                unint64_t v253 = *(uint64_t ****)(v249 + 16 * v251);
              }
              while (v253 != v11);
              uint64_t v252 = (uint64_t ****)(v249 + 16 * v251);
            }
          }
          else
          {
LABEL_574:
            uint64_t v252 = (uint64_t ****)(v249 + 16 * v250);
          }
          unint64_t v448 = v252[1];
          uint64_t v451 = (llvm::Type *)*v448;
          size_t v449 = (char *)(v448 + 2);
          size_t v450 = v451;
          goto LABEL_576;
        }
        size_t v450 = 0;
        size_t v449 = &byte_1CFBCE98E;
LABEL_576:
        __int16 v509 = 257;
        std::string __p = (void *)sub_1CD57DDA8((uint64_t)&v523, v449, v450, (const char **)&v506, 0, 0);
        LOWORD(v505) = 257;
        sub_1CB845BAC((uint64_t *)&v523, v246, v247, (uint64_t *)&__p, 1, (uint64_t)&p_p, 0);
        sub_1CCAFC088(**v492, (uint64_t)&v523, (llvm::CastInst *)v11);
        uint64_t v452 = *v492;
        uint64_t v453 = **v492;
        if (((*a2)[1] & 0xFE) == 0x10)
        {
          uint64_t v454 = sub_1CCAF7854(v453, (uint64_t)*a2);
          uint64_t v456 = llvm::ConstantAggregateZero::get(v454, v455);
        }
        else
        {
          uint64_t v456 = *(void **)(v453 + 72);
        }
        uint64_t v506 = a2;
        sub_1CC080DE0(v452 + 14, &v506)[1] = v456;
        unint64_t v49 = *v492;
LABEL_66:
        uint64_t v50 = *(void *)(*v49 + 40);
        if (sub_1CCAF0410())
        {
          uint64_t v506 = a2;
          sub_1CC080DE0(v49 + 17, &v506)[1] = v50;
        }
LABEL_560:
        unsigned int v126 = v523;
        if (v523 != v525) {
          goto LABEL_561;
        }
        return;
    }
  }
  uint64_t v51 = 0;
  uint64_t v52 = **a2;
  char v523 = v525;
  uint64_t v524 = 0x200000000;
  uint64_t v528 = v52;
  uint64_t v529 = &v537;
  long long v530 = v538;
  uint64_t v531 = 0;
  int v532 = 0;
  __int16 v533 = 512;
  char v534 = 7;
  uint64_t v535 = 0;
  uint64_t v536 = 0;
  uint64_t v537 = &unk_1F2616E88;
  v538[0] = &unk_1F2617008;
  uint64_t v53 = (char *)a2[6];
  uint64_t v526 = a2[5];
  uint64_t v527 = a2 + 3;
  p_p = (void **)v53;
  if (v53)
  {
    llvm::MetadataTracking::track((uint64_t)&p_p, (unsigned __int8 *)v53, 2);
    uint64_t v51 = (const char *)p_p;
  }
  sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v51);
  if (p_p)
  {
    int v133 = *(unsigned __int8 *)p_p;
    if ((v133 - 4) > 0x1E)
    {
      if ((v133 - 3) >= 0xFFFFFFFE) {
        int v366 = p_p;
      }
      else {
        int v366 = 0;
      }
      if ((v133 - 3) < 0xFFFFFFFE)
      {
        if (v133 == 3) {
          p_p[1] = 0;
        }
        goto LABEL_73;
      }
      unint64_t v135 = (unint64_t)(v366 + 1);
    }
    else
    {
      if ((*((unsigned char *)p_p + 1) & 0x7F) != 2 && !*((_DWORD *)p_p + 3)) {
        goto LABEL_73;
      }
      unint64_t v134 = (unint64_t)p_p[2];
      if ((v134 & 4) == 0) {
        goto LABEL_73;
      }
      unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8;
      if (!v135) {
        goto LABEL_73;
      }
    }
    uint64_t v506 = &p_p;
    sub_1CC5FA668(v135 + 16, &v506);
  }
LABEL_73:
  int v490 = sub_1CCAF0410();
  uint64_t v54 = a2[9];
  uint64_t v484 = (*((_DWORD *)v54 + 3) - 1);
  unint64_t v488 = (llvm::DataLayout *)(*(void *)((*v3)[1] + 40) + 272);
  if (*((_DWORD *)v54 + 3) != 1)
  {
    unint64_t v55 = 0;
    unsigned int v56 = 0;
    do
    {
      uint64_t v57 = *v3;
      uint64_t v58 = 4 * v55;
      if (v490)
      {
        int v59 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)(&v491[4 * v55])[-4 * (*((_DWORD *)v491 + 5) & 0x7FFFFFF)]);
        uint64_t v57 = *v3;
        if (*(void *)(**v3 + 808) > v55 && !sub_1CCAFABC8((uint64_t)v59))
        {
          unsigned int v82 = sub_1CCAF6F18(v57, (uint64_t)(&v491[4 * v55])[-4 * (*((_DWORD *)v491 + 5) & 0x7FFFFFF)]);
          uint64_t v83 = **v3;
          int v84 = *(llvm::LLVMContext **)(v83 + 88);
          __int16 v85 = *(uint64_t **)(v83 + 96);
          uint64_t v506 = "_dfsarg_o";
          __int16 v509 = 259;
          char v86 = sub_1CD3C8B64((uint64_t)&v523, v84, v85, 0, v55, (uint64_t)&v506);
          char v87 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v526[7] + 40) + 272), *(llvm::Type **)v82, 1);
          uint64_t v88 = (char *)operator new(0x80uLL);
          *((_DWORD *)v88 + 21) = *((_DWORD *)v88 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v88 = 0;
          *((void *)v88 + 2) = 0;
          *((void *)v88 + 1) = 0;
          *((void *)v88 + 5) = 0;
          *((void *)v88 + 6) = 0;
          *((void *)v88 + 4) = 0;
          int v89 = (llvm::Instruction **)(v88 + 32);
          *((void *)v88 + 8) = ***(void ***)v82 + 1576;
          unsigned int v90 = (llvm::Instruction *)(v88 + 64);
          *((void *)v88 + 3) = v88 + 64;
          *((void *)v88 + 7) = v88 + 64;
          *((void *)v88 + 9) = 0;
          v88[80] = 61;
          v88[81] = 0;
          *((_WORD *)v88 + 41) = 0;
          *((_DWORD *)v88 + 21) = 2;
          *(_OWORD *)(v88 + 88) = 0u;
          *(_OWORD *)(v88 + 104) = 0u;
          *((_DWORD *)v88 + 30) = 0;
          *(void *)uint64_t v88 = v82;
          uint64_t v93 = *((void *)v82 + 1);
          unint64_t v92 = (void *)((char *)v82 + 8);
          uint64_t v91 = v93;
          *((void *)v88 + 1) = v93;
          if (v93) {
            *(void *)(v91 + 16) = v88 + 8;
          }
          *((void *)v88 + 2) = v92;
          void *v92 = v88;
          if (*((void *)v88 + 4))
          {
            **((void **)v88 + 6) = *((void *)v88 + 5);
            uint64_t v100 = *((void *)v88 + 5);
            if (v100) {
              *(void *)(v100 + 16) = *((void *)v88 + 6);
            }
          }
          void *v89 = v86;
          if (v86)
          {
            uint64_t v96 = *((void *)v86 + 1);
            uint64_t v95 = (llvm::Instruction ***)((char *)v86 + 8);
            uint64_t v94 = v96;
            *((void *)v88 + 5) = v96;
            if (v96) {
              *(void *)(v94 + 16) = v88 + 40;
            }
            *((void *)v88 + 6) = v95;
            *uint64_t v95 = v89;
          }
          *((_WORD *)v88 + 41) = 2 * (v87 & 0x3F);
          v88[124] = 1;
          __int16 v509 = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v530 + 16))(v530, v90, &v506, v526, v527);
          if (v524)
          {
            int v97 = (llvm::MDNode **)v523;
            uint64_t v98 = &v523[16 * v524];
            do
            {
              llvm::Instruction::setMetadata(v90, *(_DWORD *)v97, v97[1]);
              v97 += 2;
            }
            while (v97 != (llvm::MDNode **)v98);
          }
          int v3 = v492;
          uint64_t v57 = *v492;
        }
      }
      ++v55;
      int v60 = sub_1CCAF7854(*v57, *(void *)(v54[2] + 8 * v55));
      uint64_t v61 = sub_1CB83544C((uint64_t)v488, (uint64_t)v60);
      BOOL v63 = v62 == 1;
      char v65 = llvm::DataLayout::getAlignment(v488, v60, 1);
      if (v63) {
      unint64_t v66 = ((1 << v65) + ((unint64_t)(v61 + 7) >> 3) - 1) & -(1 << v65);
      }
      if (v56 + v66 > 0x320) {
        break;
      }
      unint64_t v67 = sub_1CCAF68D0((uint64_t)*v3, (uint64_t)(&v491[v58])[-4 * (*((_DWORD *)v491 + 5) & 0x7FFFFFF)]);
      std::string v69 = sub_1CCAFAC54(*v3, *(void *)(v54[2] + 8 * v55), v56, (uint64_t)&v523, v68);
      char v70 = word_1EBCE73B8;
      uint64_t v71 = (char *)operator new(0x80uLL);
      *((_DWORD *)v71 + 21) = *((_DWORD *)v71 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v71 = 0;
      *((void *)v71 + 2) = 0;
      *((void *)v71 + 1) = 0;
      *((void *)v71 + 5) = 0;
      *((void *)v71 + 6) = 0;
      *((void *)v71 + 4) = 0;
      __int16 v72 = (llvm::Instruction **)(v71 + 32);
      *((void *)v71 + 8) = **(void **)*v67 + 1576;
      uint64_t v73 = (llvm::Instruction *)(v71 + 64);
      *((void *)v71 + 3) = v71 + 64;
      *((void *)v71 + 7) = v71 + 64;
      *((void *)v71 + 9) = 0;
      v71[80] = 61;
      v71[81] = 0;
      *((_WORD *)v71 + 41) = 0;
      *((_DWORD *)v71 + 21) = 2;
      *(_OWORD *)(v71 + 88) = 0u;
      *(_OWORD *)(v71 + 104) = 0u;
      *((_DWORD *)v71 + 30) = 0;
      *(void *)uint64_t v71 = v67;
      uint64_t v76 = v67[1];
      uint64_t v75 = v67 + 1;
      uint64_t v74 = v76;
      *((void *)v71 + 1) = v76;
      if (v76) {
        *(void *)(v74 + 16) = v71 + 8;
      }
      *((void *)v71 + 2) = v75;
      void *v75 = v71;
      if (*((void *)v71 + 4))
      {
        **((void **)v71 + 6) = *((void *)v71 + 5);
        uint64_t v99 = *((void *)v71 + 5);
        if (v99) {
          *(void *)(v99 + 16) = *((void *)v71 + 6);
        }
      }
      *__int16 v72 = v69;
      if (v69)
      {
        uint64_t v79 = *((void *)v69 + 1);
        uint64_t v78 = (llvm::Instruction ***)((char *)v69 + 8);
        uint64_t v77 = v79;
        *((void *)v71 + 5) = v79;
        if (v79) {
          *(void *)(v77 + 16) = v71 + 40;
        }
        *((void *)v71 + 6) = v78;
        uint64_t *v78 = v72;
      }
      *((_WORD *)v71 + 41) = 2 * (v70 & 0x3F);
      v71[124] = 1;
      __int16 v509 = 257;
      (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void **))(*v530 + 16))(v530, v73, &v506, v526, v527);
      if (v524)
      {
        uint64_t v80 = (llvm::MDNode **)v523;
        uint64_t v81 = &v523[16 * v524];
        do
        {
          llvm::Instruction::setMetadata(v73, *(_DWORD *)v80, v80[1]);
          v80 += 2;
        }
        while (v80 != (llvm::MDNode **)v81);
      }
      v56 += (v66 + (1 << word_1EBCE73B8) - 1) & -(int)(1 << word_1EBCE73B8);
      int v3 = v492;
    }
    while (v55 != v484);
  }
  unsigned int v101 = (uint64_t *)v491;
  if (*((unsigned char *)*v491 + 8) != 7)
  {
    int v102 = *((unsigned __int8 *)v491 + 16);
    if (v102 == 33)
    {
      uint64_t v103 = (llvm::BasicBlock *)*(v491 - 12);
      if (llvm::BasicBlock::getSinglePredecessor(v103))
      {
        uint64_t v105 = *((void *)v103 + 6);
        if (v105) {
          uint64_t v106 = (uint64_t **)(v105 - 24);
        }
        else {
          uint64_t v106 = 0;
        }
        goto LABEL_124;
      }
      uint64_t v367 = (llvm *)v491[5];
      BOOL v368 = (llvm::BasicBlock *)(*v3 + 2);
      __int16 v509 = 257;
      uint64_t v369 = *(void *)(llvm::SplitEdge(v367, v103, v368, 0, 0, (llvm::MemorySSAUpdater *)&v506, v104) + 48);
      if (v369) {
        uint64_t v106 = (uint64_t **)(v369 - 24);
      }
      else {
        uint64_t v106 = 0;
      }
      int v102 = *((unsigned __int8 *)v491 + 16);
    }
    else
    {
      BOOL v107 = v491[4];
      if (v107) {
        BOOL v108 = v107 == v491[5] + 5;
      }
      else {
        BOOL v108 = 1;
      }
      if (v108) {
        uint64_t v106 = 0;
      }
      else {
        uint64_t v106 = (uint64_t **)(v107 - 3);
      }
    }
    if (v102 == 84 && (*((_WORD *)v491 + 9) & 3) == 2) {
      goto LABEL_137;
    }
LABEL_124:
    unint64_t v109 = 0;
    uint64_t v110 = **v106;
    uint64_t v506 = v508;
    uint64_t v507 = 0x200000000;
    uint64_t v512 = v110;
    int v513 = &v521;
    int v514 = &v522;
    uint64_t v515 = 0;
    int v516 = 0;
    __int16 v517 = 512;
    char v518 = 7;
    uint64_t v510 = 0;
    int v511 = 0;
    uint64_t v519 = 0;
    uint64_t v520 = 0;
    uint64_t v521 = &unk_1F2616E88;
    uint64_t v522 = &unk_1F2617008;
    uint64_t v510 = v106[5];
    int v511 = v106 + 3;
    uint64_t v111 = v106[6];
    std::string __p = v111;
    if (v111)
    {
      llvm::MetadataTracking::track((uint64_t)&__p, (unsigned __int8 *)v111, 2);
      unint64_t v109 = __p;
    }
    sub_1CB8461A4((uint64_t)&v506, 0, (uint64_t)v109);
    if (!__p)
    {
LABEL_127:
      uint64_t v112 = sub_1CCAF7854(**v3, *v101);
      unint64_t v113 = (unint64_t)(sub_1CB83544C((uint64_t)v488, (uint64_t)v112) + 7) >> 3;
      BOOL v115 = v114 == 1;
      char v116 = llvm::DataLayout::getAlignment(v488, v112, 1);
      uint64_t v118 = ((1 << v116) + 0xFFFFFFFFLL + v113) & -(1 << v116);
      if (v115) {
      int v119 = *v3;
      }
      uint64_t v120 = **v3;
      uint64_t v121 = *v101;
      if (v118 >= 0x321)
      {
        if ((*(_DWORD *)(v121 + 8) & 0xFE) == 0x10)
        {
          int v122 = sub_1CCAF7854(v120, v121);
          uint64_t v124 = llvm::ConstantAggregateZero::get(v122, v123);
        }
        else
        {
          uint64_t v124 = *(void **)(v120 + 72);
        }
        p_p = (void **)v101;
        sub_1CC080DE0(v119 + 14, &p_p)[1] = v124;
        int v125 = v492;
        goto LABEL_134;
      }
      unsigned int v256 = sub_1CCAF7854(v120, v121);
      int v257 = (const char *)v101;
      int v258 = sub_1CCAF7A44(**v3, *v101, (uint64_t)&v506);
      char v259 = word_1EBCE73B8;
      std::string __p = "_dfsret";
      __int16 v500 = 259;
      BOOL v260 = operator new(0x60uLL);
      v260[13] = v260[13] & 0x38000000 | 1;
      unsigned int v261 = v3;
      int v262 = (llvm::Instruction *)(v260 + 8);
      *(void *)BOOL v260 = 0;
      *((void *)v260 + 1) = 0;
      *((void *)v260 + 2) = 0;
      *((void *)v260 + 3) = v260 + 8;
      LOWORD(v505) = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v260 + 8), (uint64_t)v256, (uint64_t)v258, (const char **)&p_p, 0, v259, 0);
      (*((void (**)(void **, llvm::Instruction *, void **, uint64_t *, uint64_t **))*v514 + 2))(v514, v262, &__p, v510, v511);
      if (v507)
      {
        int v462 = (llvm::MDNode **)v506;
        unint64_t v463 = (llvm::MDNode **)((char *)v506 + 16 * v507);
        do
        {
          llvm::Instruction::setMetadata(v262, *(_DWORD *)v462, v462[1]);
          v462 += 2;
        }
        while (v462 != v463);
      }
      uint64_t v263 = (uint64_t)(*v261 + 29);
      std::string __p = v262;
      sub_1CD642590(v263, &__p, (uint64_t)&p_p);
      unsigned int v264 = *v261 + 14;
      p_p = (void **)v257;
      sub_1CC080DE0(v264, &p_p)[1] = v262;
      uint64_t v265 = *v261;
      uint64_t v267 = (llvm::Instruction **)(*v261)[33];
      unint64_t v266 = (*v261)[34];
      if ((unint64_t)v267 < v266)
      {
        *uint64_t v267 = v262;
        unint64_t v268 = v267 + 1;
        int v125 = v492;
LABEL_588:
        v265[33] = (uint64_t)v268;
LABEL_134:
        if (v490)
        {
          uint64_t v269 = **v125;
          unsigned int v270 = *(llvm::Type **)(v269 + 24);
          uint64_t v271 = *(void *)(v269 + 112);
          std::string __p = "_dfsret_o";
          __int16 v500 = 259;
          char v272 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v510[7] + 40) + 272), v270, 1);
          int v273 = operator new(0x60uLL);
          v273[13] = v273[13] & 0x38000000 | 1;
          uint64_t v274 = (llvm::Instruction *)(v273 + 8);
          *(void *)int v273 = 0;
          *((void *)v273 + 1) = 0;
          *((void *)v273 + 2) = 0;
          *((void *)v273 + 3) = v273 + 8;
          LOWORD(v505) = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v273 + 8), (uint64_t)v270, v271, (const char **)&p_p, 0, v272, 0);
          (*((void (**)(void **, llvm::Instruction *, void **, uint64_t *, uint64_t **))*v514 + 2))(v514, v274, &__p, v510, v511);
          if (v507)
          {
            unsigned int v464 = (llvm::MDNode **)v506;
            size_t v465 = (llvm::MDNode **)((char *)v506 + 16 * v507);
            do
            {
              llvm::Instruction::setMetadata(v274, *(_DWORD *)v464, v464[1]);
              v464 += 2;
            }
            while (v464 != v465);
          }
          uint64_t v275 = (uint64_t)(*v125 + 29);
          std::string __p = v274;
          sub_1CD642590(v275, &__p, (uint64_t)&p_p);
          int v276 = *v125;
          if (sub_1CCAF0410())
          {
            p_p = (void **)v491;
            sub_1CC080DE0(v276 + 17, &p_p)[1] = v274;
          }
        }
        if (v506 != v508) {
          free(v506);
        }
        goto LABEL_137;
      }
      uint64_t v370 = (void *)v265[32];
      uint64_t v371 = v267 - (llvm::Instruction **)v370;
      unint64_t v372 = v371 + 1;
      if (!((unint64_t)(v371 + 1) >> 61))
      {
        uint64_t v373 = v266 - (void)v370;
        if (v373 >> 2 > v372) {
          unint64_t v372 = v373 >> 2;
        }
        if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v374 = v372;
        }
        if (!v374)
        {
          uint64_t v375 = 0;
LABEL_581:
          unint64_t v457 = (llvm::Instruction **)&v375[8 * v371];
          uint64_t v458 = &v375[8 * v374];
          *unint64_t v457 = v262;
          unint64_t v268 = v457 + 1;
          if (v267 == v370)
          {
            int v125 = v492;
          }
          else
          {
            int v125 = v492;
            do
            {
              int v459 = *--v267;
              *--unint64_t v457 = v459;
            }
            while (v267 != v370);
            uint64_t v267 = (llvm::Instruction **)v265[32];
          }
          v265[32] = (uint64_t)v457;
          v265[33] = (uint64_t)v268;
          v265[34] = (uint64_t)v458;
          if (v267) {
            operator delete(v267);
          }
          goto LABEL_588;
        }
        if (!(v374 >> 61))
        {
          uint64_t v375 = (char *)operator new(8 * v374);
          goto LABEL_581;
        }
LABEL_606:
        sub_1CB833614();
      }
LABEL_605:
      abort();
    }
    int v277 = *(unsigned __int8 *)__p;
    if ((v277 - 4) > 0x1E)
    {
      if ((v277 - 3) >= 0xFFFFFFFE) {
        char v447 = __p;
      }
      else {
        char v447 = 0;
      }
      if ((v277 - 3) < 0xFFFFFFFE)
      {
        if (v277 == 3) {
          *((void *)__p + 1) = 0;
        }
        goto LABEL_127;
      }
      unint64_t v279 = (unint64_t)v447 + 8;
    }
    else
    {
      if ((*((unsigned char *)__p + 1) & 0x7F) != 2 && !*((_DWORD *)__p + 3)) {
        goto LABEL_127;
      }
      uint64_t v278 = *((void *)__p + 2);
      if ((v278 & 4) == 0) {
        goto LABEL_127;
      }
      unint64_t v279 = v278 & 0xFFFFFFFFFFFFFFF8;
      if (!v279) {
        goto LABEL_127;
      }
    }
    p_p = &__p;
    sub_1CC5FA668(v279 + 16, &p_p);
    unsigned int v101 = (uint64_t *)v491;
    int v3 = v492;
    goto LABEL_127;
  }
LABEL_137:
  unsigned int v126 = v523;
  if (v523 != v525) {
LABEL_561:
  }
    free(v126);
}

uint64_t sub_1CCAFAA94(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  int v5 = a2[5];
  if ((v5 & 0x7FFFFFF) != 0)
  {
    if ((v5 & 0x40000000) != 0) {
      int v6 = (uint64_t *)*((void *)a2 - 1);
    }
    else {
      int v6 = (uint64_t *)&a2[-8 * (v5 & 0x7FFFFFF)];
    }
    uint64_t v12 = sub_1CCAF68D0(*a1, *v6);
    uint64_t v13 = a2[5] & 0x7FFFFFF;
    if (v13 >= 2)
    {
      uint64_t v14 = 32 * v13;
      uint64_t v15 = 32;
      do
      {
        int v16 = a2[5];
        if ((v16 & 0x40000000) != 0) {
          uint64_t v17 = (_DWORD *)*((void *)a2 - 1);
        }
        else {
          uint64_t v17 = &a2[-8 * (v16 & 0x7FFFFFF)];
        }
        uint64_t v18 = sub_1CCAF68D0((uint64_t)v4, *(void *)&v17[(unint64_t)v15 / 4]);
        uint64_t v12 = sub_1CCAFB0E8((uint64_t)v4, v12, v18, (const llvm::Instruction *)a2);
        v15 += 32;
      }
      while (v14 != v15);
    }
    uint64_t v11 = sub_1CCAFB838(v4, *(void *)a2, (uint64_t)v12, (uint64_t **)a2);
  }
  else
  {
    uint64_t v7 = *v4;
    uint64_t v8 = *(void *)a2;
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x10)
    {
      uint64_t v19 = *(void **)(v7 + 72);
      goto LABEL_16;
    }
    __int16 v9 = sub_1CCAF7854(v7, v8);
    uint64_t v11 = llvm::ConstantAggregateZero::get(v9, v10);
  }
  uint64_t v19 = v11;
LABEL_16:
  uint64_t v20 = (uint64_t *)(*a1 + 112);
  __int16 v22 = a2;
  sub_1CC080DE0(v20, &v22)[1] = v19;
  return sub_1CCAFAF50((uint64_t **)a1, a2);
}

BOOL sub_1CCAFABC8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x10)
  {
    return v1 == 13;
  }
  else
  {
    if (v1 != 16) {
      return 0;
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3 > 0x40)
    {
      int v5 = 0;
      int64_t v6 = (unint64_t)(v3 + 63) >> 6;
      do
      {
        if (v6-- < 1) {
          break;
        }
        unint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * v6);
        v5 += __clz(v8);
      }
      while (!v8);
      int v9 = v3 | 0xFFFFFFC0;
      if ((v3 & 0x3F) == 0) {
        int v9 = 0;
      }
      return v5 + v9 == v3;
    }
    else
    {
      return *(void *)(a1 + 24) == 0;
    }
  }
}

llvm::Instruction *sub_1CCAFAC54(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, llvm::Instruction *a5)
{
  int v9 = *(llvm::CastInst **)(*a1 + 80);
  __int16 v10 = *(llvm::Value **)(*a1 + 64);
  __int16 v33 = 257;
  uint64_t v12 = sub_1CC277FE0(a4, v9, v10, (uint64_t)&v31, a5);
  if (a3)
  {
    uint64_t v13 = *(void *)(*a1 + 64);
    uint64_t v14 = a3;
    uint64_t v15 = *(llvm::ConstantInt **)v13;
    unint64_t v16 = *(unsigned int *)(v13 + 8);
    unsigned int v32 = v16 >> 8;
    if (v16 >> 8 > 0x40) {
      operator new[]();
    }
    if (v16 <= 0xFF) {
      unint64_t v17 = 0;
    }
    else {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
    }
    __int16 v31 = (const char *)(v17 & v14);
    uint64_t v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v31, v11);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
    __int16 v33 = 257;
    uint64_t v12 = sub_1CB844A3C(a4, v12, (uint64_t)v18, (uint64_t)&v31, 0, 0);
  }
  uint64_t v19 = sub_1CCAF7854(*a1, a2);
  unint64_t v20 = llvm::PointerType::get(v19, 0);
  v29[0] = "_dfsarg";
  __int16 v30 = 259;
  if (*(void *)v12 != v20)
  {
    if (*((unsigned __int8 *)v12 + 16) <= 0x14u)
    {
      uint64_t v12 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, unint64_t))(**(void **)(a4 + 72) + 224))(*(void *)(a4 + 72), 48, v12, v20);
      if (v12) {
        BOOL v24 = *((unsigned __int8 *)v12 + 16) >= 0x1Cu;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a4 + 80) + 16))(*(void *)(a4 + 80), v12, v29, *(void *)(a4 + 48), *(void *)(a4 + 56));
        uint64_t v26 = *(unsigned int *)(a4 + 8);
        if (v26)
        {
          uint64_t v27 = *(void *)a4;
          uint64_t v28 = v27 + 16 * v26;
          do
          {
            llvm::Instruction::setMetadata(v12, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
            v27 += 16;
          }
          while (v27 != v28);
        }
      }
    }
    else
    {
      __int16 v33 = 257;
      uint64_t v12 = llvm::CastInst::Create(48, (uint64_t)v12, v20, &v31, 0);
      (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a4 + 80) + 16))(*(void *)(a4 + 80), v12, v29, *(void *)(a4 + 48), *(void *)(a4 + 56));
      uint64_t v21 = *(unsigned int *)(a4 + 8);
      if (v21)
      {
        uint64_t v22 = *(void *)a4;
        uint64_t v23 = v22 + 16 * v21;
        do
        {
          llvm::Instruction::setMetadata(v12, *(_DWORD *)v22, *(llvm::MDNode **)(v22 + 8));
          v22 += 16;
        }
        while (v22 != v23);
      }
    }
  }
  return v12;
}

uint64_t sub_1CCAFAF50(uint64_t **a1, _DWORD *a2)
{
  uint64_t result = sub_1CCAF0410();
  if (result)
  {
    int v5 = *a1;
    int v6 = a2[5];
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    BOOL v24 = 0;
    uint64_t v7 = v6 & 0x7FFFFFF;
    if ((v6 & 0x7FFFFFF) != 0)
    {
      unint64_t v8 = (char *)operator new(8 * v7);
      uint64_t v22 = v8;
      BOOL v24 = &v8[8 * v7];
      bzero(v8, 8 * v7);
      uint64_t v23 = v24;
      int v9 = (char *)operator new(8 * v7);
      uint64_t v19 = v9;
      uint64_t v21 = &v9[8 * v7];
      bzero(v9, 8 * v7);
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      unint64_t v20 = v21;
      uint64_t v12 = 32 * v7;
      do
      {
        int v13 = a2[5];
        if ((v13 & 0x40000000) != 0) {
          uint64_t v14 = (_DWORD *)*((void *)a2 - 1);
        }
        else {
          uint64_t v14 = &a2[-8 * (v13 & 0x7FFFFFF)];
        }
        *(void *)&v8[v10] = sub_1CCAF68D0((uint64_t)v5, *(void *)&v14[v11 / 4]);
        int v15 = a2[5];
        if ((v15 & 0x40000000) != 0) {
          unint64_t v16 = (_DWORD *)*((void *)a2 - 1);
        }
        else {
          unint64_t v16 = &a2[-8 * (v15 & 0x7FFFFFF)];
        }
        *(void *)&v9[v10] = sub_1CCAF6F18(v5, *(void *)&v16[v11 / 4]);
        v11 += 32;
        v10 += 8;
      }
      while (v12 != v11);
      unint64_t v17 = sub_1CCAFBD40((uint64_t)v5, &v22, &v19, (const llvm::Instruction *)a2, 0);
      operator delete(v9);
      operator delete(v8);
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v17 = sub_1CCAFBD40((uint64_t)v5, &v22, &v19, (const llvm::Instruction *)a2, 0);
    }
    uint64_t v18 = *a1;
    uint64_t result = sub_1CCAF0410();
    if (result)
    {
      uint64_t v22 = (char *)a2;
      uint64_t result = (uint64_t)sub_1CC080DE0(v18 + 17, &v22);
      *(void *)(result + 8) = v17;
    }
  }
  return result;
}

uint64_t *sub_1CCAFB0E8(uint64_t a1, uint64_t *a2, uint64_t *a3, const llvm::Instruction *a4)
{
  v87[1] = *MEMORY[0x1E4F143B8];
  uint64_t v76 = a3;
  uint64_t v77 = a2;
  if (!sub_1CCAFABC8((uint64_t)a2))
  {
    if (sub_1CCAFABC8((uint64_t)a3) || a2 == a3)
    {
      uint64_t v8 = a1;
      int v9 = a2;
      goto LABEL_6;
    }
    unint64_t v11 = (uint64_t *)(a1 + 328);
    __int16 v72 = a2;
    v79[0] = 0;
    if (sub_1CD4678E0((uint64_t *)(a1 + 328), &v72, v79)) {
      uint64_t v12 = v79[0];
    }
    else {
      uint64_t v12 = (void *)(*(void *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344));
    }
    __int16 v72 = a3;
    v79[0] = 0;
    int v13 = sub_1CD4678E0((uint64_t *)(a1 + 328), &v72, v79);
    uint64_t v14 = v79[0];
    uint64_t v15 = *(void *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344);
    if (!v13) {
      uint64_t v14 = (void *)(*(void *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344));
    }
    uint64_t v71 = v14;
    if (v12 == (void *)v15 || v14 == (void *)v15)
    {
      if (v12 == (void *)v15)
      {
        if (v14 != v12)
        {
          for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)*i)
          {
            unint64_t v25 = i[4];
            if (v25 <= (unint64_t)a2)
            {
              if (v25 >= (unint64_t)a2) {
                goto LABEL_26;
              }
              ++i;
            }
          }
        }
      }
      else
      {
        for (uint64_t j = (void *)v12[2]; j; uint64_t j = (void *)*j)
        {
          unint64_t v22 = j[4];
          if (v22 <= (unint64_t)a3)
          {
            if (v22 >= (unint64_t)a3) {
              goto LABEL_17;
            }
            ++j;
          }
        }
      }
    }
    else
    {
      unint64_t v16 = (void *)v12[1];
      unint64_t v17 = (void *)v14[1];
      uint64_t v18 = v14 + 2;
      if (sub_1CCAFBAC0(v16, v12 + 2, v17, v14 + 2))
      {
LABEL_17:
        uint64_t v19 = a1;
        unint64_t v20 = a2;
        return sub_1CCAF728C(v19, v20, a4);
      }
      if (sub_1CCAFBAC0(v17, v18, v16, v12 + 2))
      {
LABEL_26:
        uint64_t v19 = a1;
        unint64_t v20 = a3;
        return sub_1CCAF728C(v19, v20, a4);
      }
    }
    if (a2 <= a3) {
      uint64_t v26 = (uint64_t)a3;
    }
    else {
      uint64_t v26 = (uint64_t)a2;
    }
    if (a2 <= a3) {
      uint64_t v27 = (uint64_t)a2;
    }
    else {
      uint64_t v27 = (uint64_t)a3;
    }
    uint64_t v78 = 0;
    char v28 = sub_1CC42A670(*(void *)(a1 + 280), *(_DWORD *)(a1 + 296), v27, v26, &v78);
    int v29 = v78;
    if (v28)
    {
      __int16 v30 = v78 + 2;
      if (v78[2]) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      goto LABEL_50;
    }
    __int16 v72 = v78;
    int v31 = *(_DWORD *)(a1 + 288);
    uint64_t v32 = *(unsigned int *)(a1 + 296);
    if (4 * v31 + 4 >= (3 * v32))
    {
      int v33 = 2 * v32;
    }
    else
    {
      int v33 = *(_DWORD *)(a1 + 296);
      if ((int)v32 + ~v31 - *(_DWORD *)(a1 + 292) > v32 >> 3)
      {
LABEL_46:
        *(_DWORD *)(a1 + 288) = v31 + 1;
        if (*v29 != -4096 || v29[1] != -4096) {
          --*(_DWORD *)(a1 + 292);
        }
        *int v29 = v27;
        v29[1] = v26;
        v29[2] = 0;
        __int16 v30 = v29 + 2;
        v29[3] = 0;
        unint64_t v11 = (uint64_t *)(a1 + 328);
LABEL_50:
        unsigned int v34 = sub_1CCAF728C(a1, a2, a4);
        uint64_t v35 = sub_1CCAF728C(a1, a3, a4);
        uint64_t v36 = 0;
        uint64_t v37 = **(void **)a4;
        v79[1] = (void *)0x200000000;
        v80[6] = v37;
        v80[7] = &v86;
        v80[8] = v87;
        v80[9] = 0;
        int v81 = 0;
        __int16 v82 = 512;
        char v83 = 7;
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        char v86 = &unk_1F2616E88;
        v87[0] = &unk_1F2617008;
        uint64_t v38 = (unsigned __int8 *)*((void *)a4 + 6);
        v80[4] = *((void *)a4 + 5);
        v80[5] = (char *)a4 + 24;
        uint64_t v78 = (uint64_t *)v38;
        v79[0] = v80;
        if (v38)
        {
          llvm::MetadataTracking::track((uint64_t)&v78, v38, 2);
          uint64_t v36 = (uint64_t)v78;
        }
        sub_1CB8461A4((uint64_t)v79, 0, v36);
        if (!v78) {
          goto LABEL_53;
        }
        int v49 = *(unsigned __int8 *)v78;
        if ((v49 - 4) > 0x1E)
        {
          if ((v49 - 3) >= 0xFFFFFFFE) {
            uint64_t v52 = v78;
          }
          else {
            uint64_t v52 = 0;
          }
          if ((v49 - 3) < 0xFFFFFFFE)
          {
            if (v49 == 3) {
              v78[1] = 0;
            }
            goto LABEL_53;
          }
          unint64_t v51 = (unint64_t)(v52 + 1);
        }
        else
        {
          if ((*((unsigned char *)v78 + 1) & 0x7F) != 2 && !*((_DWORD *)v78 + 3)) {
            goto LABEL_53;
          }
          uint64_t v50 = v78[2];
          if ((v50 & 4) == 0) {
            goto LABEL_53;
          }
          unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
          if (!v51) {
            goto LABEL_53;
          }
        }
        __int16 v72 = (uint64_t *)&v78;
        sub_1CC5FA668(v51 + 16, &v72);
LABEL_53:
        *__int16 v30 = *((void *)a4 + 5);
        __int16 v75 = 257;
        v29[3] = (uint64_t)sub_1CB844AF4((uint64_t)v79, v34, (uint64_t)v35, (uint64_t)&v72);
        uint64_t v39 = v29 + 3;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        __int16 v72 = (uint64_t *)&v73;
        if (v12 == (void *)(*(void *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344)))
        {
          sub_1CD3CFB98(&v72, (unint64_t *)&v77, &v77);
        }
        else if (&v72 != v12 + 1)
        {
          sub_1CD692038((uint64_t)&v72, (void *)v12[1], v12 + 2);
        }
        if (v71 == (void *)(*(void *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344)))
        {
          sub_1CD3CFB98(&v72, (unint64_t *)&v76, &v76);
        }
        else
        {
          uint64_t v40 = (void *)v71[1];
          if (v40 != v71 + 2)
          {
            do
            {
              sub_1CD691490(&v72, &v73, v40 + 4, v40 + 4);
              unint64_t v41 = (void *)v40[1];
              if (v41)
              {
                do
                {
                  unint64_t v42 = v41;
                  unint64_t v41 = (void *)*v41;
                }
                while (v41);
              }
              else
              {
                do
                {
                  unint64_t v42 = (void *)v40[2];
                  BOOL v43 = *v42 == (void)v40;
                  uint64_t v40 = v42;
                }
                while (!v43);
              }
              uint64_t v40 = v42;
            }
            while (v42 != v71 + 2);
          }
        }
        int v44 = sub_1CD692240(v11, v39);
        __int16 v45 = v44 + 2;
        int v46 = v44 + 1;
        sub_1CB833A08((uint64_t)(v44 + 1), (void *)v44[2]);
        *(v45 - 1) = v72;
        uint64_t v47 = v73;
        void *v45 = v73;
        uint64_t v48 = v74;
        v45[1] = v74;
        if (v48)
        {
          v47[2] = v45;
          __int16 v72 = (uint64_t *)&v73;
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          uint64_t v47 = 0;
        }
        else
        {
          void *v46 = v45;
        }
        uint64_t v23 = *v39;
        sub_1CB833A08((uint64_t)&v72, v47);
        if (v79[0] != v80) {
          free(v79[0]);
        }
        return (uint64_t *)v23;
      }
    }
    uint64_t v53 = *(void *)(a1 + 280);
    unint64_t v54 = (v33 - 1) | ((unint64_t)(v33 - 1) >> 1);
    unint64_t v55 = v54 | (v54 >> 2) | ((v54 | (v54 >> 2)) >> 4);
    int v56 = ((v55 | (v55 >> 8)) >> 16) | v55 | (v55 >> 8);
    if ((v56 + 1) > 0x40) {
      unsigned int v57 = v56 + 1;
    }
    else {
      unsigned int v57 = 64;
    }
    *(_DWORD *)(a1 + 296) = v57;
    uint64_t v58 = operator new(32 * v57, (std::align_val_t)8uLL);
    *(void *)(a1 + 280) = v58;
    uint64_t v70 = v53;
    if (v53)
    {
      *(void *)(a1 + 288) = 0;
      uint64_t v62 = *(unsigned int *)(a1 + 296);
      if (v62)
      {
        uint64_t v63 = 32 * v62;
        int64x2_t v64 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *uint64_t v58 = v64;
          v58 += 2;
          v63 -= 32;
        }
        while (v63);
      }
      if (v32)
      {
        uint64_t v65 = 32 * v32;
        uint64_t v66 = v70 + 8;
        do
        {
          uint64_t v68 = *(void *)(v66 - 8);
          uint64_t v67 = *(void *)v66;
          if ((v68 != -4096 || v67 != -4096) && (v68 != -8192 || v67 != -8192))
          {
            v79[0] = 0;
            sub_1CC42A670(*(void *)(a1 + 280), *(_DWORD *)(a1 + 296), v68, v67, v79);
            std::string v69 = v79[0];
            *(void *)v79[0] = v68;
            v69[1] = *(void *)v66;
            *((_OWORD *)v69 + 1) = *(_OWORD *)(v66 + 8);
            ++*(_DWORD *)(a1 + 288);
          }
          v66 += 32;
          v65 -= 32;
        }
        while (v65);
      }
      MEMORY[0x1D25D9CD0](v70, 8);
      uint64_t v58 = *(_OWORD **)(a1 + 280);
      LODWORD(v59) = *(_DWORD *)(a1 + 296);
    }
    else
    {
      *(void *)(a1 + 288) = 0;
      uint64_t v59 = *(unsigned int *)(a1 + 296);
      if (v59)
      {
        uint64_t v60 = 0;
        int64x2_t v61 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          v58[v60] = v61;
          v60 += 2;
        }
        while (2 * v59 != v60);
      }
    }
    sub_1CC42A670((uint64_t)v58, v59, v27, v26, &v72);
    int v31 = *(_DWORD *)(a1 + 288);
    int v29 = v72;
    goto LABEL_46;
  }
  uint64_t v8 = a1;
  int v9 = a3;
LABEL_6:

  return sub_1CCAF728C(v8, v9, a4);
}

void *sub_1CCAFB838(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1CCAF7854(*a1, a2);
  if ((*((_DWORD *)v7 + 2) & 0xFE) != 0x10) {
    return (void *)a3;
  }
  uint64_t v8 = v7;
  if (!sub_1CCAFABC8(a3))
  {
    uint64_t v12 = 0;
    uint64_t v13 = **a4;
    v24[0] = v25;
    v24[1] = (void *)0x200000000;
    v25[6] = v13;
    v25[7] = &v31;
    v25[8] = v32;
    v25[9] = 0;
    int v26 = 0;
    __int16 v27 = 512;
    char v28 = 7;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = &unk_1F2616E88;
    v32[0] = &unk_1F2617008;
    uint64_t v14 = (unsigned __int8 *)a4[6];
    v25[4] = a4[5];
    v25[5] = a4 + 3;
    uint64_t v21 = (llvm::Instruction *)v14;
    if (v14)
    {
      llvm::MetadataTracking::track((uint64_t)&v21, v14, 2);
      uint64_t v12 = (uint64_t)v21;
    }
    sub_1CB8461A4((uint64_t)v24, 0, v12);
    if (!v21) {
      goto LABEL_9;
    }
    int v17 = *(unsigned __int8 *)v21;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        unint64_t v20 = v21;
      }
      else {
        unint64_t v20 = 0;
      }
      if ((v17 - 3) < 0xFFFFFFFE)
      {
        if (v17 == 3) {
          *((void *)v21 + 1) = 0;
        }
        goto LABEL_9;
      }
      unint64_t v19 = (unint64_t)v20 + 8;
    }
    else
    {
      if ((*((unsigned char *)v21 + 1) & 0x7F) != 2 && !*((_DWORD *)v21 + 3)) {
        goto LABEL_9;
      }
      uint64_t v18 = *((void *)v21 + 2);
      if ((v18 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (!v19) {
        goto LABEL_9;
      }
    }
    v22[0] = &v21;
    sub_1CC5FA668(v19 + 16, v22);
LABEL_9:
    v22[0] = v23;
    v22[1] = (void *)0x400000000;
    unint64_t v16 = llvm::UndefValue::get(v8, v15);
    uint64_t v21 = sub_1CCAFBB78((uint64_t)v16, (uint64_t)v22, (uint64_t)v8, a3, (uint64_t)v24);
    sub_1CC27AF70(a1 + 38, &v21)[1] = a3;
    a3 = (uint64_t)v21;
    if (v22[0] != v23) {
      free(v22[0]);
    }
    if (v24[0] != v25) {
      free(v24[0]);
    }
    return (void *)a3;
  }
  int v9 = sub_1CCAF7854(*a1, (uint64_t)v8);

  return llvm::ConstantAggregateZero::get(v9, v10);
}

BOOL sub_1CCAFBAC0(void *a1, void *a2, void *a3, void *a4)
{
  BOOL v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      unint64_t v5 = a3[4];
      unint64_t v6 = a1[4];
      if (v5 < v6) {
        break;
      }
      if (v6 >= v5)
      {
        uint64_t v8 = (void *)a3[1];
        if (v8)
        {
          do
          {
            uint64_t v7 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v7 = (void *)a3[2];
            BOOL v9 = *v7 == (void)a3;
            a3 = v7;
          }
          while (!v9);
        }
      }
      else
      {
        uint64_t v7 = a3;
      }
      uint64_t v10 = (void *)a1[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)a1[2];
          BOOL v9 = *v11 == (void)a1;
          a1 = v11;
        }
        while (!v9);
      }
      BOOL v4 = v7 == a4;
      if (v7 != a4)
      {
        a1 = v11;
        a3 = v7;
        if (v11 != a2) {
          continue;
        }
      }
      return v4;
    }
    return 0;
  }
  return v4;
}

llvm::Instruction *sub_1CCAFBB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x10)
  {
    int v10 = *(_DWORD *)(a3 + 8);
    if (v10 == 16)
    {
      if (*(_DWORD *)(a3 + 12))
      {
        unint64_t v17 = 0;
        unsigned int v18 = *(_DWORD *)(a2 + 8);
        do
        {
          if (v18 >= *(_DWORD *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
          ++*(_DWORD *)(a2 + 8);
          uint64_t v8 = sub_1CCAFBB78(v8, a2, *(void *)(*(void *)(a3 + 16) + 8 * v17), a4, a5);
          unsigned int v18 = *(_DWORD *)(a2 + 8) - 1;
          *(_DWORD *)(a2 + 8) = v18;
          ++v17;
        }
        while (v17 < *(unsigned int *)(a3 + 12));
      }
    }
    else if (v10 == 17 && *(void *)(a3 + 32))
    {
      unsigned int v11 = *(_DWORD *)(a2 + 8);
      unsigned int v12 = 1;
      do
      {
        if (v11 >= *(_DWORD *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v11) = v12 - 1;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v8 = sub_1CCAFBB78(v8, a2, *(void *)(a3 + 24), a4, a5);
        unsigned int v11 = *(_DWORD *)(a2 + 8) - 1;
        *(_DWORD *)(a2 + 8) = v11;
      }
      while (*(void *)(a3 + 32) > (unint64_t)v12++);
    }
  }
  else
  {
    uint64_t v14 = *(void **)a2;
    uint64_t v15 = *(unsigned int *)(a2 + 8);
    __int16 v20 = 257;
    return sub_1CC2411F8(a5, a1, a4, v14, v15, (uint64_t)v19);
  }
  return (llvm::Instruction *)v8;
}

llvm::Value *sub_1CCAFBD40(uint64_t a1, void *a2, void *a3, const llvm::Instruction *a4, uint64_t a5)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3[1] - *a3;
  if (!v5) {
    return *(llvm::Value **)(*(void *)a1 + 40);
  }
  uint64_t v6 = a5;
  if (!a5) {
    uint64_t v6 = *(void *)(*(void *)a1 + 72);
  }
  uint64_t v9 = 0;
  Select = 0;
  uint64_t v33 = v5 >> 3;
  uint64_t v30 = (void **)((char *)a4 + 24);
  do
  {
    uint64_t v11 = *(void *)(*a3 + 8 * v9);
    unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
    if (v11) {
      BOOL v13 = v12 > 0x14;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_12;
    }
    if (v12 == 16)
    {
      uint64_t v14 = *(unsigned int *)(v11 + 32);
      if (v14 < 0x41)
      {
        if (!*(void *)(v11 + 24)) {
          goto LABEL_19;
        }
        goto LABEL_12;
      }
      int v25 = 0;
      int64_t v26 = (unint64_t)(v14 + 63) >> 6;
      do
      {
        BOOL v13 = v26-- < 1;
        if (v13) {
          break;
        }
        unint64_t v27 = *(void *)(*(void *)(v11 + 24) + 8 * v26);
        v25 += __clz(v27);
      }
      while (!v27);
      int v28 = v14 | 0xFFFFFFC0;
      if ((v14 & 0x3F) == 0) {
        int v28 = 0;
      }
      if (v25 + v28 != v14) {
        goto LABEL_12;
      }
    }
    else
    {
      if (v12 == 17)
      {
        if (sub_1CB844168(*(void *)(*a3 + 8 * v9), 0.0)) {
          goto LABEL_19;
        }
LABEL_12:
        if (!Select)
        {
          Select = (llvm::Value *)v11;
          goto LABEL_19;
        }
        uint64_t v15 = sub_1CCAF728C(a1, *(uint64_t **)(*a2 + 8 * v9), a4);
        uint64_t v16 = 0;
        uint64_t v17 = **(void **)a4;
        v37[1] = (void *)0x200000000;
        v38[6] = v17;
        v38[7] = &v44;
        v38[8] = v45;
        v38[9] = 0;
        int v39 = 0;
        __int16 v40 = 512;
        char v41 = 7;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        int v44 = &unk_1F2616E88;
        v45[0] = &unk_1F2617008;
        unsigned int v18 = (unsigned __int8 *)*((void *)a4 + 6);
        v38[4] = *((void *)a4 + 5);
        v38[5] = v30;
        uint64_t v36 = v18;
        v37[0] = v38;
        if (v18)
        {
          llvm::MetadataTracking::track((uint64_t)&v36, v18, 2);
          uint64_t v16 = (uint64_t)v36;
        }
        sub_1CB8461A4((uint64_t)v37, 0, v16);
        if (v36)
        {
          int v21 = *v36;
          if ((v21 - 4) > 0x1E)
          {
            if ((v21 - 3) >= 0xFFFFFFFE) {
              BOOL v24 = v36;
            }
            else {
              BOOL v24 = 0;
            }
            if ((v21 - 3) < 0xFFFFFFFE)
            {
              if (v21 == 3) {
                *((void *)v36 + 1) = 0;
              }
              goto LABEL_16;
            }
            unint64_t v23 = (unint64_t)(v24 + 8);
          }
          else
          {
            if ((v36[1] & 0x7F) != 2 && !*((_DWORD *)v36 + 3)) {
              goto LABEL_16;
            }
            uint64_t v22 = *((void *)v36 + 2);
            if ((v22 & 4) == 0) {
              goto LABEL_16;
            }
            unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
            if (!v23) {
              goto LABEL_16;
            }
          }
          v34[0] = &v36;
          sub_1CC5FA668(v23 + 16, v34);
        }
LABEL_16:
        __int16 v35 = 257;
        unint64_t v19 = sub_1CB845F20((uint64_t)v37, 33, v15, v6, (uint64_t)v34);
        __int16 v35 = 257;
        Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v37, v19, (llvm::Value *)v11, Select, (const llvm::Twine *)v34, 0);
        if (v37[0] != v38) {
          free(v37[0]);
        }
        goto LABEL_19;
      }
      if (v12 - 18 >= 3 && v12 != 13) {
        goto LABEL_12;
      }
    }
LABEL_19:
    ++v9;
  }
  while (v9 != v33);
  if (!Select) {
    return *(llvm::Value **)(*(void *)a1 + 40);
  }
  return Select;
}

void sub_1CCAFC088(uint64_t a1, uint64_t a2, llvm::CastInst *a3)
{
  if ((*((_DWORD *)a3 + 8) & 0xF) == 9)
  {
    uint64_t v6 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a2 + 64) + 1912), 0);
    __int16 v26 = 257;
    uint64_t v8 = sub_1CC277FE0(a2, a3, v6, (uint64_t)v25, v7);
    if ((*((unsigned char *)a3 + 23) & 0x10) == 0)
    {
      unint64_t v19 = 0;
      unsigned int v18 = &byte_1CFBCE98E;
      goto LABEL_11;
    }
    uint64_t v9 = ***(void ***)a3;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      BOOL v13 = (llvm::CastInst **)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a3)
      {
LABEL_10:
        uint64_t v17 = v13[1];
        __int16 v20 = *(llvm::Type **)v17;
        unsigned int v18 = (char *)v17 + 16;
        unint64_t v19 = v20;
LABEL_11:
        __int16 v26 = 257;
        uint64_t v21 = sub_1CD57DDA8(a2, v18, v19, v25, 0, 0);
        uint64_t v22 = (uint64_t *)operator new(0x10uLL);
        uint64_t *v22 = (uint64_t)v8;
        v22[1] = v21;
        unint64_t v23 = *(uint64_t ***)(a1 + 296);
        BOOL v24 = *(uint64_t ***)(a1 + 304);
        __int16 v26 = 257;
        sub_1CB845BAC((uint64_t *)a2, v23, v24, v22, 2, (uint64_t)v25, 0);
        operator delete(v22);
        return;
      }
      int v15 = 1;
      while (v14 != (llvm::CastInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::CastInst **)(v10 + 16 * v12);
        if (v14 == a3)
        {
          BOOL v13 = (llvm::CastInst **)(v10 + 16 * v12);
          goto LABEL_10;
        }
      }
    }
    BOOL v13 = (llvm::CastInst **)(v10 + 16 * v11);
    goto LABEL_10;
  }
}

BOOL sub_1CCAFC1F0(uint64_t *a1, llvm::Value *this)
{
  uint64_t v3 = llvm::Value::stripPointerCasts(this);
  uint64_t v4 = 0;
  if (!v3 || *((unsigned char *)v3 + 16) != 3) {
    return v4;
  }
  if ((*((unsigned char *)v3 + 80) & 1) == 0 || (*((unsigned char *)v3 + 23) & 0x10) == 0) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = ***(void ***)v3;
  uint64_t v7 = *(void *)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(v6 + 168);
  if (!v8) {
    goto LABEL_12;
  }
  LODWORD(v9) = (v8 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  uint64_t v10 = (llvm::Value **)(v7 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != v3)
  {
    int v12 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      uint64_t v11 = *(llvm::Value **)(v7 + 16 * v9);
      if (v11 == v3)
      {
        uint64_t v10 = (llvm::Value **)(v7 + 16 * v9);
        goto LABEL_13;
      }
    }
LABEL_12:
    uint64_t v10 = (llvm::Value **)(v7 + 16 * v8);
  }
LABEL_13:
  uint64_t v14 = *(unsigned int *)(v5 + 776);
  if (v14)
  {
    int v15 = (size_t *)v10[1];
    size_t v18 = *v15;
    int v16 = (unsigned __int8 *)(v15 + 2);
    size_t v17 = v18;
    if (v18)
    {
      int v19 = 0;
      size_t v20 = v17;
      uint64_t v21 = v16;
      do
      {
        int v22 = *v21++;
        int v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    else
    {
      int v19 = 0;
    }
    uint64_t v23 = *(void *)(v5 + 768);
    int v24 = 1;
    int v25 = v19;
    while (1)
    {
      uint64_t v26 = v25 & (v14 - 1);
      unint64_t v27 = *(void **)(v23 + 8 * v26);
      if (v27 != (void *)-8)
      {
        if (!v27)
        {
          uint64_t v28 = v14;
          return v28 != v14;
        }
        if (*(_DWORD *)(v23 + 8 * v14 + 8 + 4 * v26) == v19
          && v17 == *v27
          && (!v17 || !memcmp(v16, (char *)v27 + *(unsigned int *)(v5 + 788), v17)))
        {
          break;
        }
      }
      int v25 = v24 + v26;
      ++v24;
    }
    uint64_t v28 = (int)v26;
    if (v26 == -1) {
      uint64_t v28 = v14;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v28 = 0;
  }
  return v28 != v14;
}

unsigned __int8 *sub_1CCAFC3A8(uint64_t a1, llvm::CastInst *a2, char a3, uint64_t **a4)
{
  uint64_t v7 = 0;
  v72[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = **a4;
  unsigned int v57 = v59;
  uint64_t v58 = 0x200000000;
  uint64_t v62 = v8;
  uint64_t v63 = &v71;
  int64x2_t v64 = v72;
  uint64_t v65 = 0;
  int v66 = 0;
  __int16 v67 = 512;
  char v68 = 7;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = &unk_1F2616E88;
  v72[0] = &unk_1F2617008;
  uint64_t v9 = (unsigned __int8 *)a4[6];
  uint64_t v60 = a4[5];
  int64x2_t v61 = a4 + 3;
  v52[0] = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)v52, v9, 2);
    uint64_t v7 = v52[0];
  }
  sub_1CB8461A4((uint64_t)&v57, 0, v7);
  if (v52[0])
  {
    int v44 = *(unsigned __int8 *)v52[0];
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        uint64_t v47 = v52[0];
      }
      else {
        uint64_t v47 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *(void *)(v52[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v46 = v47 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v52[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v52[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v45 = *(void *)(v52[0] + 16);
      if ((v45 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v46) {
        goto LABEL_4;
      }
    }
    unint64_t v54 = (const char *)v52;
    sub_1CC5FA668(v46 + 16, &v54);
  }
LABEL_4:
  int v13 = sub_1CCAFCB98(a1, a2, (uint64_t)&v57, v10, v11);
  uint64_t v14 = *(void *)(*(void *)(a1 + 800) + 16);
  int v15 = (unsigned __int8 *)v13;
  if (v14)
  {
    uint64_t v16 = *(void *)(a1 + 64);
    size_t v17 = *(llvm::ConstantInt **)v16;
    unint64_t v18 = *(unsigned int *)(v16 + 8);
    unsigned int v55 = v18 >> 8;
    if (v18 >> 8 > 0x40) {
      operator new[]();
    }
    if (v18 <= 0xFF) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v18) + 63);
    }
    unint64_t v54 = (const char *)(v19 & v14);
    size_t v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v54, v12);
    if (v55 >= 0x41 && v54) {
      MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
    }
    __int16 v56 = 257;
    int v15 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v57, v13, (uint64_t)v20, (uint64_t)&v54, 0, 0);
  }
  unint64_t v21 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(a1 + 8) + 1912), 0);
  __int16 v53 = 257;
  if (*(void *)v15 != v21)
  {
    if (v15[16] <= 0x14u)
    {
      uint64_t v24 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v63 + 28))(v63, 48, v15, v21);
      int v15 = (unsigned __int8 *)v24;
      if (v24)
      {
        if (*(unsigned __int8 *)(v24 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v64 + 16))(v64, v24, v52, v60, v61);
          if (v58)
          {
            uint64_t v48 = (llvm::MDNode **)v57;
            int v49 = (llvm::MDNode **)((char *)v57 + 16 * v58);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v48, v48[1]);
              v48 += 2;
            }
            while (v48 != v49);
          }
        }
      }
    }
    else
    {
      __int16 v56 = 257;
      int v15 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v15, v21, &v54, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v64 + 16))(v64, v15, v52, v60, v61);
      if (v58)
      {
        int v22 = (llvm::MDNode **)v57;
        uint64_t v23 = (llvm::MDNode **)((char *)v57 + 16 * v58);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v22, v22[1]);
          v22 += 2;
        }
        while (v22 != v23);
      }
    }
  }
  if (sub_1CCAF0410())
  {
    uint64_t v26 = *(void *)(*(void *)(a1 + 800) + 24);
    if (v26)
    {
      uint64_t v27 = *(void *)(a1 + 64);
      uint64_t v28 = *(llvm::ConstantInt **)v27;
      unsigned int v29 = *(_DWORD *)(v27 + 8);
      unsigned int v55 = v29 >> 8;
      if (v29 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v29) + 63);
      if (v29 <= 0xFF) {
        unint64_t v30 = 0;
      }
      unint64_t v54 = (const char *)(v30 & v26);
      int v31 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v54, v25);
      if (v55 >= 0x41 && v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
      __int16 v56 = 257;
      int v13 = sub_1CB844A3C((uint64_t)&v57, v13, (uint64_t)v31, (uint64_t)&v54, 0, 0);
    }
    if ((__clz(1 << a3) ^ 0x3F) < HIBYTE(word_1EBCE73B8))
    {
      uint64_t v32 = *(void *)(a1 + 64);
      uint64_t v33 = *(llvm::ConstantInt **)v32;
      unsigned int v34 = *(_DWORD *)(v32 + 8);
      unsigned int v55 = v34 >> 8;
      if (v34 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v34) + 63);
      if (v34 <= 0xFF) {
        unint64_t v35 = 0;
      }
      unint64_t v54 = (const char *)(v35 & (-1 << SHIBYTE(word_1EBCE73B8)));
      uint64_t v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v54, v25);
      if (v55 >= 0x41 && v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
      __int16 v56 = 257;
      int v13 = sub_1CBF52474((uint64_t)&v57, v13, (uint64_t)v36, (uint64_t)&v54);
    }
    uint64_t v37 = *(void *)(a1 + 32);
    __int16 v53 = 257;
    if (*(void *)v13 != v37)
    {
      if (*((unsigned __int8 *)v13 + 16) <= 0x14u)
      {
        char v41 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v63 + 28))(v63, 48, v13, v37);
        if (v41) {
          BOOL v42 = v41[16] >= 0x1Cu;
        }
        else {
          BOOL v42 = 0;
        }
        if (v42)
        {
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v64 + 16))(v64, v41, v52, v60, v61);
          if (v58)
          {
            uint64_t v50 = (llvm::MDNode **)v57;
            unint64_t v51 = (llvm::MDNode **)((char *)v57 + 16 * v58);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v41, *(_DWORD *)v50, v50[1]);
              v50 += 2;
            }
            while (v50 != v51);
          }
        }
      }
      else
      {
        __int16 v56 = 257;
        uint64_t v38 = llvm::CastInst::Create(48, (uint64_t)v13, v37, &v54, 0);
        (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v64 + 16))(v64, v38, v52, v60, v61);
        if (v58)
        {
          int v39 = (llvm::MDNode **)v57;
          __int16 v40 = (llvm::MDNode **)((char *)v57 + 16 * v58);
          do
          {
            llvm::Instruction::setMetadata(v38, *(_DWORD *)v39, v39[1]);
            v39 += 2;
          }
          while (v39 != v40);
        }
      }
    }
  }
  if (v57 != v59) {
    free(v57);
  }
  return v15;
}

llvm::Instruction *sub_1CCAFCB98(uint64_t a1, llvm::CastInst *a2, uint64_t a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v7 = *(llvm::Value **)(a1 + 64);
  __int16 v26 = 257;
  uint64_t v9 = sub_1CC277FE0(a3, a2, v7, (uint64_t)&v24, a5);
  uint64_t v10 = *(uint64_t **)(a1 + 800);
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = *(void *)(a1 + 64);
    int v13 = *(llvm::ConstantInt **)v12;
    unint64_t v14 = *(unsigned int *)(v12 + 8);
    unsigned int v25 = v14 >> 8;
    if (v14 >> 8 > 0x40) {
      operator new[]();
    }
    if (v14 <= 0xFF) {
      unint64_t v15 = 0;
    }
    else {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
    }
    unint64_t v24 = v15 & ~v11;
    uint64_t v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v24, v8);
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    __int16 v26 = 257;
    uint64_t v9 = sub_1CBF52474(a3, v9, (uint64_t)v16, (uint64_t)&v24);
    uint64_t v10 = *(uint64_t **)(a1 + 800);
  }
  uint64_t v17 = v10[1];
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = *(llvm::ConstantInt **)v18;
    unint64_t v20 = *(unsigned int *)(v18 + 8);
    unsigned int v25 = v20 >> 8;
    if (v20 >> 8 > 0x40) {
      operator new[]();
    }
    if (v20 <= 0xFF) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v20) + 63);
    }
    unint64_t v24 = v21 & v17;
    int v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v24, v8);
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    __int16 v26 = 257;
    return sub_1CC2428C0(a3, (uint64_t)v9, (uint64_t)v22, (uint64_t)&v24);
  }
  return v9;
}

void sub_1CCAFCE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(void **)a1 < 5uLL)
  {
    unint64_t v14 = *(uint64_t ***)(a1 + 32);
    uint64_t v16 = v14[1];
    unint64_t v15 = (unint64_t)v14[2];
    if ((unint64_t)v16 >= v15)
    {
      unint64_t v24 = *v14;
      uint64_t v25 = v16 - *v14;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61) {
        goto LABEL_102;
      }
      uint64_t v27 = v15 - (void)v24;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 61) {
          goto LABEL_103;
        }
        unsigned int v29 = (char *)operator new(8 * v28);
      }
      else
      {
        unsigned int v29 = 0;
      }
      int v44 = (uint64_t *)&v29[8 * v25];
      *int v44 = a2;
      uint64_t v17 = v44 + 1;
      if (v16 != v24)
      {
        do
        {
          uint64_t v45 = *--v16;
          *--int v44 = v45;
        }
        while (v16 != v24);
        uint64_t v16 = *v14;
      }
      *unint64_t v14 = v44;
      v14[1] = v17;
      void v14[2] = (uint64_t *)&v29[8 * v28];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v16 = a2;
      uint64_t v17 = v16 + 1;
    }
    v14[1] = v17;
    unint64_t v46 = *(char ***)(a1 + 40);
    uint64_t v48 = v46[1];
    unint64_t v47 = (unint64_t)v46[2];
    if ((unint64_t)v48 < v47)
    {
LABEL_85:
      *(void *)uint64_t v48 = a3;
      uint64_t v69 = v48 + 8;
      goto LABEL_101;
    }
    int v49 = *v46;
    uint64_t v50 = (v48 - *v46) >> 3;
    unint64_t v51 = v50 + 1;
    if (!((unint64_t)(v50 + 1) >> 61))
    {
      uint64_t v52 = v47 - (void)v49;
      if (v52 >> 2 > v51) {
        unint64_t v51 = v52 >> 2;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53)
      {
        if (v53 >> 61) {
          goto LABEL_103;
        }
        unint64_t v54 = (char *)operator new(8 * v53);
      }
      else
      {
        unint64_t v54 = 0;
      }
      __int16 v67 = &v54[8 * v50];
      char v68 = &v54[8 * v53];
      *(void *)__int16 v67 = a3;
      uint64_t v69 = v67 + 8;
      if (v48 == v49) {
        goto LABEL_99;
      }
      do
      {
        uint64_t v70 = *((void *)v48 - 1);
        v48 -= 8;
        *((void *)v67 - 1) = v70;
        v67 -= 8;
      }
      while (v48 != v49);
      goto LABEL_98;
    }
    goto LABEL_102;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(a1 + 16), (unint64_t)**(unsigned int **)(a1 + 24) >> 1, 0);
  __int16 v82 = 257;
  uint64_t v9 = sub_1CC242524(v7, a2, (uint64_t)v8, (uint64_t)v81, 0, 0);
  uint64_t v10 = *(uint64_t ***)(a1 + 32);
  uint64_t v12 = v10[1];
  unint64_t v11 = (unint64_t)v10[2];
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v18 = *v10;
    uint64_t v19 = v12 - *v10;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      goto LABEL_102;
    }
    uint64_t v21 = v11 - (void)v18;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        goto LABEL_103;
      }
      uint64_t v23 = (char *)operator new(8 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    unint64_t v30 = (uint64_t *)&v23[8 * v19];
    *unint64_t v30 = a2;
    int v13 = v30 + 1;
    if (v12 != v18)
    {
      do
      {
        uint64_t v31 = *--v12;
        *--unint64_t v30 = v31;
      }
      while (v12 != v18);
      uint64_t v12 = *v10;
    }
    *uint64_t v10 = v30;
    v10[1] = v13;
    void v10[2] = (uint64_t *)&v23[8 * v22];
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *uint64_t v12 = a2;
    int v13 = v12 + 1;
  }
  v10[1] = v13;
  uint64_t v32 = *(llvm::Instruction ****)(a1 + 40);
  uint64_t v33 = sub_1CCAFD2E8(*v6, **(uint64_t ****)(a1 + 56), **(unsigned char **)(a1 + 64), *(uint64_t ***)(a1 + 72));
  unsigned int v34 = v33;
  uint64_t v36 = v32[1];
  unint64_t v35 = (unint64_t)v32[2];
  if ((unint64_t)v36 >= v35)
  {
    uint64_t v38 = *v32;
    uint64_t v39 = v36 - *v32;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61) {
      goto LABEL_102;
    }
    uint64_t v41 = v35 - (void)v38;
    if (v41 >> 2 > v40) {
      unint64_t v40 = v41 >> 2;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      if (v42 >> 61) {
        goto LABEL_103;
      }
      uint64_t v43 = (char *)operator new(8 * v42);
    }
    else
    {
      uint64_t v43 = 0;
    }
    unsigned int v55 = (llvm::Instruction **)&v43[8 * v39];
    *unsigned int v55 = v34;
    uint64_t v37 = v55 + 1;
    if (v36 != v38)
    {
      do
      {
        __int16 v56 = *--v36;
        *--unsigned int v55 = v56;
      }
      while (v36 != v38);
      uint64_t v36 = *v32;
    }
    *uint64_t v32 = v55;
    v32[1] = v37;
    void v32[2] = (llvm::Instruction **)&v43[8 * v42];
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *uint64_t v36 = v33;
    uint64_t v37 = v36 + 1;
  }
  v32[1] = v37;
  unsigned int v57 = *(llvm::Instruction ****)(a1 + 32);
  uint64_t v59 = v57[1];
  unint64_t v58 = (unint64_t)v57[2];
  if ((unint64_t)v59 >= v58)
  {
    int64x2_t v61 = *v57;
    uint64_t v62 = v59 - *v57;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61) {
      goto LABEL_102;
    }
    uint64_t v64 = v58 - (void)v61;
    if (v64 >> 2 > v63) {
      unint64_t v63 = v64 >> 2;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    if (v65)
    {
      if (v65 >> 61) {
        goto LABEL_103;
      }
      int v66 = (char *)operator new(8 * v65);
    }
    else
    {
      int v66 = 0;
    }
    uint64_t v71 = (llvm::Instruction **)&v66[8 * v62];
    *uint64_t v71 = v9;
    uint64_t v60 = v71 + 1;
    if (v59 != v61)
    {
      do
      {
        __int16 v72 = *--v59;
        *--uint64_t v71 = v72;
      }
      while (v59 != v61);
      uint64_t v59 = *v57;
    }
    *unsigned int v57 = v71;
    v57[1] = v60;
    v57[2] = (llvm::Instruction **)&v66[8 * v65];
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *uint64_t v59 = v9;
    uint64_t v60 = v59 + 1;
  }
  v57[1] = v60;
  unint64_t v46 = *(char ***)(a1 + 40);
  uint64_t v48 = v46[1];
  unint64_t v73 = (unint64_t)v46[2];
  if ((unint64_t)v48 < v73) {
    goto LABEL_85;
  }
  uint64_t v74 = *v46;
  uint64_t v75 = (v48 - *v46) >> 3;
  unint64_t v76 = v75 + 1;
  if ((unint64_t)(v75 + 1) >> 61) {
LABEL_102:
  }
    abort();
  uint64_t v77 = v73 - (void)v74;
  if (v77 >> 2 > v76) {
    unint64_t v76 = v77 >> 2;
  }
  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v78 = v76;
  }
  if (!v78)
  {
    uint64_t v79 = 0;
    goto LABEL_96;
  }
  if (v78 >> 61) {
LABEL_103:
  }
    sub_1CB833614();
  uint64_t v79 = (char *)operator new(8 * v78);
LABEL_96:
  __int16 v67 = &v79[8 * v75];
  char v68 = &v79[8 * v78];
  *(void *)__int16 v67 = a3;
  uint64_t v69 = v67 + 8;
  if (v48 == v74) {
    goto LABEL_99;
  }
  do
  {
    uint64_t v80 = *((void *)v48 - 1);
    v48 -= 8;
    *((void *)v67 - 1) = v80;
    v67 -= 8;
  }
  while (v48 != v74);
LABEL_98:
  uint64_t v48 = *v46;
LABEL_99:
  void *v46 = v67;
  v46[1] = v69;
  v46[2] = v68;
  if (v48) {
    operator delete(v48);
  }
LABEL_101:
  v46[1] = v69;
}

llvm::Instruction *sub_1CCAFD2E8(uint64_t a1, uint64_t **a2, char a3, uint64_t **a4)
{
  uint64_t v7 = 0;
  v51[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = **a2;
  uint64_t v36 = v38;
  uint64_t v37 = 0x200000000;
  uint64_t v41 = v8;
  unint64_t v42 = &v50;
  uint64_t v43 = v51;
  uint64_t v44 = 0;
  int v45 = 0;
  __int16 v46 = 512;
  char v47 = 7;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = &unk_1F2616E88;
  v51[0] = &unk_1F2617008;
  uint64_t v9 = a2 + 3;
  unint64_t v11 = a2[5];
  uint64_t v10 = (unsigned __int8 *)a2[6];
  uint64_t v39 = v11;
  unint64_t v40 = v9;
  v31[0] = v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v31, v10, 2);
    uint64_t v7 = v31[0];
  }
  sub_1CB8461A4((uint64_t)&v36, 0, v7);
  if (v31[0])
  {
    int v27 = *(unsigned __int8 *)v31[0];
    if ((v27 - 4) > 0x1E)
    {
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = v31[0];
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v27 - 3) < 0xFFFFFFFE)
      {
        if (v27 == 3) {
          *(void *)(v31[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v29 = v30 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v31[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v31[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v28 = *(void *)(v31[0] + 16);
      if ((v28 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v29) {
        goto LABEL_4;
      }
    }
    uint64_t v33 = (const char *)v31;
    sub_1CC5FA668(v29 + 16, &v33);
  }
LABEL_4:
  uint64_t v13 = *(void *)(a1 + 24);
  unint64_t v14 = *a4;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(llvm::ConstantInt **)v15;
  unint64_t v17 = *(unsigned int *)(v15 + 8);
  unsigned int v34 = v17 >> 8;
  if (v17 >> 8 > 0x40) {
    operator new[]();
  }
  if (v17 <= 0xFF) {
    LOBYTE(v18) = 0;
  }
  else {
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
  }
  uint64_t v33 = (const char *)(v18 & 1);
  uint64_t v19 = (const char *)llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v33, v12);
  if (v34 >= 0x41 && v33) {
    MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
  }
  __int16 v35 = 257;
  unint64_t v20 = sub_1CB930F7C((uint64_t *)&v36, v13, v14, v19, (uint64_t)&v33);
  *a4 = (uint64_t *)v20;
  uint64_t v21 = *(void *)(a1 + 24);
  __int16 v32 = 257;
  unint64_t v22 = operator new(0x60uLL);
  v22[13] = v22[13] & 0x38000000 | 1;
  uint64_t v23 = (llvm::Instruction *)(v22 + 8);
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = v22 + 8;
  __int16 v35 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v22 + 8), v21, (uint64_t)v20, &v33, 0, a3, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v43 + 16))(v43, v23, v31, v39, v40);
  unint64_t v24 = (llvm::MDNode **)v36;
  if (v37)
  {
    unint64_t v26 = (llvm::MDNode **)((char *)v36 + 16 * v37);
    do
    {
      llvm::Instruction::setMetadata(v23, *(_DWORD *)v24, v24[1]);
      v24 += 2;
    }
    while (v24 != v26);
    unint64_t v24 = (llvm::MDNode **)v36;
  }
  if (v24 != (llvm::MDNode **)v38) {
    free(v24);
  }
  return v23;
}

void sub_1CCAFD67C(uint64_t *a1, llvm::CastInst *a2, int a3, char a4, uint64_t **a5)
{
  uint64_t v10 = 0;
  v58[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = **a5;
  uint64_t v43 = v45;
  uint64_t v44 = 0x200000000;
  uint64_t v48 = v11;
  uint64_t v49 = &v57;
  uint64_t v50 = v58;
  uint64_t v51 = 0;
  int v52 = 0;
  __int16 v53 = 512;
  char v54 = 7;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v57 = &unk_1F2616E88;
  v58[0] = &unk_1F2617008;
  uint64_t v12 = (unsigned __int8 *)a5[6];
  __int16 v46 = a5[5];
  char v47 = a5 + 3;
  v38[0] = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)v38, v12, 2);
    uint64_t v10 = v38[0];
  }
  sub_1CB8461A4((uint64_t)&v43, 0, v10);
  if (v38[0])
  {
    int v31 = *(unsigned __int8 *)v38[0];
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = v38[0];
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v31 - 3) < 0xFFFFFFFE)
      {
        if (v31 == 3) {
          *(void *)(v38[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v33 = v35 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v38[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v38[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v32 = *(void *)(v38[0] + 16);
      if ((v32 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        goto LABEL_4;
      }
    }
    unint64_t v40 = (const char *)v38;
    sub_1CC5FA668(v33 + 16, &v40);
  }
LABEL_4:
  unint64_t v14 = (llvm::PointerType *)llvm::IntegerType::get(*(llvm::IntegerType **)(*a1 + 8), (llvm::LLVMContext *)(8 * a3));
  uint64_t v15 = *(llvm::ConstantInt **)v14;
  unsigned int v16 = *((_DWORD *)v14 + 2);
  unsigned int v41 = v16 >> 8;
  if (v16 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v40 = 0;
  unint64_t v17 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v40, v13);
  if (v41 >= 0x41 && v40) {
    MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
  }
  unint64_t v18 = sub_1CCAFDBD8(*a1, a2, a5);
  unint64_t v19 = llvm::PointerType::get(v14, 0);
  __int16 v39 = 257;
  if (*v18 != v19)
  {
    if (*((unsigned __int8 *)v18 + 16) <= 0x14u)
    {
      uint64_t v22 = (*((uint64_t (**)(void **, uint64_t, void *, unint64_t))*v49 + 28))(v49, 49, v18, v19);
      unint64_t v18 = (void *)v22;
      if (v22)
      {
        if (*(unsigned __int8 *)(v22 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, v22, v38, v46, v47);
          if (v44)
          {
            uint64_t v36 = (llvm::MDNode **)v43;
            uint64_t v37 = (llvm::MDNode **)((char *)v43 + 16 * v44);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v18, *(_DWORD *)v36, v36[1]);
              v36 += 2;
            }
            while (v36 != v37);
          }
        }
      }
    }
    else
    {
      __int16 v42 = 257;
      unint64_t v18 = llvm::CastInst::Create(49, (uint64_t)v18, v19, &v40, 0);
      (*(void (**)(void *, void *, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, v18, v38, v46, v47);
      if (v44)
      {
        unint64_t v20 = (llvm::MDNode **)v43;
        uint64_t v21 = (llvm::MDNode **)((char *)v43 + 16 * v44);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v18, *(_DWORD *)v20, v20[1]);
          v20 += 2;
        }
        while (v20 != v21);
      }
    }
  }
  uint64_t v23 = (char *)operator new(0x80uLL);
  *((_DWORD *)v23 + 21) = *((_DWORD *)v23 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 5) = 0;
  *((void *)v23 + 6) = 0;
  *((void *)v23 + 4) = 0;
  *((void *)v23 + 8) = **(void **)*v17 + 1576;
  unint64_t v24 = (llvm::Instruction *)(v23 + 64);
  *((void *)v23 + 3) = v23 + 64;
  *((void *)v23 + 7) = v23 + 64;
  *((void *)v23 + 9) = 0;
  v23[80] = 61;
  v23[81] = 0;
  *((_DWORD *)v23 + 21) = 2;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *((_DWORD *)v23 + 30) = 0;
  uint64_t v25 = v17 + 1;
  uint64_t v26 = v17[1];
  *(void *)uint64_t v23 = v17;
  *((void *)v23 + 1) = v26;
  if (v26) {
    *(void *)(v26 + 16) = v23 + 8;
  }
  *((void *)v23 + 2) = v25;
  *uint64_t v25 = v23;
  *((void *)v23 + 4) = v18;
  if (v18)
  {
    uint64_t v29 = v18[1];
    uint64_t v28 = v18 + 1;
    uint64_t v27 = v29;
    *((void *)v23 + 5) = v29;
    if (v29) {
      *(void *)(v27 + 16) = v23 + 40;
    }
    *((void *)v23 + 6) = v28;
    *uint64_t v28 = v23 + 32;
  }
  *((_WORD *)v23 + 41) = 2 * (a4 & 0x3F);
  v23[124] = 1;
  __int16 v42 = 257;
  (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, uint64_t **))(*v50 + 16))(v50, v24, &v40, v46, v47);
  uint64_t v30 = (llvm::MDNode **)v43;
  if (v44)
  {
    unsigned int v34 = (llvm::MDNode **)((char *)v43 + 16 * v44);
    do
    {
      llvm::Instruction::setMetadata(v24, *(_DWORD *)v30, v30[1]);
      v30 += 2;
    }
    while (v30 != v34);
    uint64_t v30 = (llvm::MDNode **)v43;
  }
  if (v30 != (llvm::MDNode **)v45) {
    free(v30);
  }
}

unsigned __int8 *sub_1CCAFDBD8(uint64_t a1, llvm::CastInst *a2, uint64_t **a3)
{
  uint64_t v6 = 0;
  v58[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = **a3;
  v34[0] = v35;
  v34[1] = (void *)0x200000000;
  v35[6] = v7;
  v35[7] = &v41;
  v35[8] = &v42;
  v35[9] = 0;
  int v36 = 0;
  __int16 v37 = 512;
  char v38 = 7;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v41 = &unk_1F2616E88;
  __int16 v42 = &unk_1F2617008;
  uint64_t v8 = (char *)a3[6];
  void v35[4] = a3[5];
  v35[5] = a3 + 3;
  v32[0] = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)v32, (unsigned __int8 *)v8, 2);
    uint64_t v6 = v32[0];
  }
  sub_1CB8461A4((uint64_t)v34, 0, (uint64_t)v6);
  if (v32[0])
  {
    int v20 = *v32[0];
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        uint64_t v26 = v32[0];
      }
      else {
        uint64_t v26 = 0;
      }
      if ((v20 - 3) < 0xFFFFFFFE)
      {
        if (v20 == 3) {
          *((void *)v32[0] + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v22 = (unint64_t)(v26 + 8);
    }
    else
    {
      if ((v32[0][1] & 0x7F) != 2 && !*((_DWORD *)v32[0] + 3)) {
        goto LABEL_4;
      }
      uint64_t v21 = *((void *)v32[0] + 2);
      if ((v21 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (!v22) {
        goto LABEL_4;
      }
    }
    uint64_t v43 = v32;
    sub_1CC5FA668(v22 + 16, &v43);
  }
LABEL_4:
  uint64_t v11 = (unsigned __int8 *)sub_1CCAFCB98(a1, a2, (uint64_t)v34, v9, v10);
  uint64_t v12 = 0;
  uint64_t v13 = **a3;
  uint64_t v43 = v45;
  uint64_t v44 = 0x200000000;
  uint64_t v48 = v13;
  uint64_t v49 = &v57;
  uint64_t v50 = v58;
  uint64_t v51 = 0;
  int v52 = 0;
  __int16 v53 = 512;
  char v54 = 7;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v57 = &unk_1F2616E88;
  v58[0] = &unk_1F2617008;
  unint64_t v14 = (unsigned __int8 *)a3[6];
  __int16 v46 = a3[5];
  char v47 = a3 + 3;
  v30[0] = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)v30, v14, 2);
    uint64_t v12 = v30[0];
  }
  sub_1CB8461A4((uint64_t)&v43, 0, v12);
  if (v30[0])
  {
    int v23 = *(unsigned __int8 *)v30[0];
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v30[0];
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v23 - 3) < 0xFFFFFFFE)
      {
        if (v23 == 3) {
          *(void *)(v30[0] + 8) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v25 = v27 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v30[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v30[0] + 12)) {
        goto LABEL_7;
      }
      uint64_t v24 = *(void *)(v30[0] + 16);
      if ((v24 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v25) {
        goto LABEL_7;
      }
    }
    v32[0] = (const char *)v30;
    sub_1CC5FA668(v25 + 16, v32);
  }
LABEL_7:
  uint64_t v15 = *(void *)(a1 + 56);
  __int16 v31 = 257;
  if (*(void *)v11 != v15)
  {
    if (v11[16] <= 0x14u)
    {
      uint64_t v18 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v49 + 28))(v49, 48, v11, v15);
      uint64_t v11 = (unsigned __int8 *)v18;
      if (v18)
      {
        if (*(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, v18, v30, v46, v47);
          if (v44)
          {
            uint64_t v28 = (llvm::MDNode **)v43;
            uint64_t v29 = (llvm::MDNode **)((char *)v43 + 16 * v44);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v28, v28[1]);
              v28 += 2;
            }
            while (v28 != v29);
          }
        }
      }
    }
    else
    {
      __int16 v33 = 257;
      uint64_t v11 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v11, v15, v32, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, v11, v30, v46, v47);
      if (v44)
      {
        unsigned int v16 = (llvm::MDNode **)v43;
        unint64_t v17 = (llvm::MDNode **)((char *)v43 + 16 * v44);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v16, v16[1]);
          v16 += 2;
        }
        while (v16 != v17);
      }
    }
  }
  if (v43 != v45) {
    free(v43);
  }
  if (v34[0] != v35) {
    free(v34[0]);
  }
  return v11;
}

uint64_t sub_1CCAFE050(void *a1, uint64_t *a2, llvm::CastInst *a3, llvm::CastInst *a4, unint64_t a5, unsigned __int8 a6)
{
  uint64_t v11 = a1;
  unint64_t v12 = *(void *)(a1[1] + 40) + 272;
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)v12, *(llvm::Type **)(*a1 + 64), 1);
  uint64_t result = sub_1CB83544C(v12, *(void *)(*v11 + 64));
  unint64_t v16 = result + 7;
  if (v15 == 1) {
  BOOL v17 = a6 >= Alignment && (v16 >> 3) >= 5;
  }
  char v44 = a6;
  if (v17)
  {
    char v46 = Alignment;
    uint64_t v21 = sub_1CB83544C(*(void *)(v11[1] + 40) + 272, *(void *)(*v11 + 64)) + 7;
    if (v19 == 1) {
    unint64_t v22 = a3;
    }
    if ((v21 & 0x7FFFFFFF8) != 0x20)
    {
      int v23 = *(llvm::Type ****)(*v11 + 64);
      __int16 v50 = 257;
      unint64_t v12 = (unint64_t)sub_1CBF56614((uint64_t)a2, a3, v23, 0, (uint64_t)v49, v20);
      __int16 v50 = 257;
      uint64_t v24 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, 0x20uLL, 0);
      unint64_t v25 = sub_1CC242524((uint64_t)a2, v12, (uint64_t)v24, (uint64_t)v49, 0, 0);
      __int16 v48 = 257;
      unint64_t v22 = sub_1CB844AF4((uint64_t)a2, (void *)v12, (uint64_t)v25, (uint64_t)v47);
    }
    int v45 = v11;
    uint64_t v26 = (llvm::Value *)llvm::PointerType::get(*(llvm::PointerType **)(*v11 + 64), 0);
    __int16 v50 = 257;
    uint64_t result = (uint64_t)sub_1CC277FE0((uint64_t)a2, a4, v26, (uint64_t)v49, v27);
    unint64_t v28 = (v16 >> 3);
    if (v28 <= a5)
    {
      uint64_t v29 = (const llvm::APInt *)result;
      __int16 v42 = a3;
      LODWORD(v12) = 0;
      LODWORD(v18) = 0;
      unint64_t v30 = a5;
      unsigned __int8 v31 = v44;
      unsigned int v32 = (v16 >> 3) >> 2;
      unint64_t v43 = v30;
      unint64_t v33 = v30 / v28;
      do
      {
        unsigned int v34 = v29;
        if (v12)
        {
          uint64_t v35 = *(void *)(*v45 + 64);
          __int16 v50 = 257;
          unsigned int v34 = sub_1CB930CF4(a2, v35, v29, v12, (uint64_t)v49);
        }
        unint64_t v36 = v16 & 0xFFFFFFFFFFFF0000 | v31;
        unint64_t v16 = v36 | 0x100;
        uint64_t result = (uint64_t)sub_1CC27BF8C(a2, (uint64_t)v22, (uint64_t)v34, (unsigned __int16)v36 | 0x100u, 0);
        LODWORD(v18) = v18 + v32;
        unint64_t v12 = (v12 + 1);
        unsigned __int8 v31 = v46;
      }
      while (v33 > v12);
      char v44 = v46;
      a3 = v42;
      a5 = v43;
    }
    else
    {
      LODWORD(v18) = 0;
    }
    uint64_t v11 = v45;
  }
  else
  {
    LODWORD(v18) = 0;
  }
  unint64_t v37 = (a5 + 3) >> 2;
  if (v37 > v18)
  {
    unsigned __int8 v38 = v44;
    do
    {
      uint64_t v39 = a4;
      if (v18)
      {
        uint64_t v40 = *(void *)(*v11 + 24);
        __int16 v50 = 257;
        uint64_t v39 = sub_1CB930CF4(a2, v40, a4, v18, (uint64_t)v49);
      }
      unint64_t v41 = v12 & 0xFFFFFFFFFFFF0000 | v38;
      unint64_t v12 = v41 | 0x100;
      uint64_t result = (uint64_t)sub_1CC27BF8C(a2, (uint64_t)a3, (uint64_t)v39, (unsigned __int16)v41 | 0x100u, 0);
      unsigned __int8 v38 = HIBYTE(word_1EBCE73B8);
      unint64_t v18 = (v18 + 1);
    }
    while (v37 > v18);
  }
  return result;
}

uint64_t sub_1CCAFE32C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v10 = a2;
  if (sub_1CCAF0410())
  {
    uint64_t v6 = *(uint64_t ***)(*(void *)a1 + 456);
    uint64_t v7 = *(uint64_t ***)(*(void *)a1 + 464);
    v9[16] = 257;
    return sub_1CB845BAC(a3, v6, v7, &v10, 1, (uint64_t)v9, 0);
  }
  return v4;
}

void sub_1CCAFE3A0(uint64_t **a1, char a2, uint64_t **a3)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a3 + 5);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = (uint64_t **)*(a3 - 1);
  }
  else {
    uint64_t v7 = &a3[-4 * (v6 & 0x7FFFFFF)];
  }
  unint64_t v9 = sub_1CB83544C(*(void *)(a3[5][7] + 40) + 272, *v7[4]) + 7;
  if (v8 == 1) {
  if (v9 >= 8)
  }
  {
    uint64_t v10 = 0;
    uint64_t v11 = **a3;
    v30[0] = v31;
    v30[1] = (void *)0x200000000;
    v31[6] = v11;
    v31[7] = &v37;
    v31[8] = v38;
    v31[9] = 0;
    int v32 = 0;
    __int16 v33 = 512;
    char v34 = 7;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    unint64_t v37 = &unk_1F2616E88;
    v38[0] = &unk_1F2617008;
    unint64_t v12 = (unsigned __int8 *)a3[6];
    void v31[4] = a3[5];
    v31[5] = a3 + 3;
    unint64_t v28 = v12;
    if (v12)
    {
      llvm::MetadataTracking::track((uint64_t)&v28, v12, 2);
      uint64_t v10 = (uint64_t)v28;
    }
    unint64_t v13 = v9 >> 3;
    sub_1CB8461A4((uint64_t)v30, 0, v10);
    if (!v28) {
      goto LABEL_10;
    }
    int v24 = *v28;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v28;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v24 - 3) < 0xFFFFFFFE)
      {
        if (v24 == 3) {
          *((void *)v28 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v26 = (unint64_t)(v27 + 8);
    }
    else
    {
      if ((v28[1] & 0x7F) != 2 && !*((_DWORD *)v28 + 3)) {
        goto LABEL_10;
      }
      uint64_t v25 = *((void *)v28 + 2);
      if ((v25 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (!v26) {
        goto LABEL_10;
      }
    }
    uint64_t v29 = (uint64_t **)&v28;
    sub_1CC5FA668(v26 + 16, &v29);
LABEL_10:
    int v14 = *((_DWORD *)a3 + 5);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = (llvm::CastInst **)*(a3 - 1);
    }
    else {
      uint64_t v15 = (llvm::CastInst **)&a3[-4 * (v14 & 0x7FFFFFF)];
    }
    if (byte_1EBCE7448) {
      char v16 = a2;
    }
    else {
      char v16 = 0;
    }
    sub_1CCAFD67C(*a1, *v15, v13, v16, a3);
    BOOL v17 = *a1;
    uint64_t v18 = **a1;
    if (((*a3)[1] & 0xFE) == 0x10)
    {
      unint64_t v19 = sub_1CCAF7854(v18, (uint64_t)*a3);
      uint64_t v21 = llvm::ConstantAggregateZero::get(v19, v20);
    }
    else
    {
      uint64_t v21 = *(void **)(v18 + 72);
    }
    uint64_t v29 = a3;
    sub_1CC080DE0(v17 + 14, &v29)[1] = v21;
    unint64_t v22 = *a1;
    uint64_t v23 = *(void *)(**a1 + 40);
    if (sub_1CCAF0410())
    {
      uint64_t v29 = a3;
      sub_1CC080DE0(v22 + 17, &v29)[1] = v23;
    }
    if (v30[0] != v31) {
      free(v30[0]);
    }
  }
}

void sub_1CCAFE660(uint64_t *a1, uint64_t **a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  sub_1CCAFAA94(a1, a2);
  if (byte_1EBCE7808)
  {
    uint64_t v4 = 0;
    uint64_t v5 = **a2;
    v17[1] = (void *)0x200000000;
    v18[6] = v5;
    v18[7] = &v24;
    v18[8] = v25;
    v18[9] = 0;
    int v19 = 0;
    __int16 v20 = 512;
    char v21 = 7;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = &unk_1F2616E88;
    v25[0] = &unk_1F2617008;
    int v6 = (unsigned __int8 *)a2[6];
    v18[4] = a2[5];
    v18[5] = a2 + 3;
    char v16 = v6;
    v17[0] = v18;
    if (v6)
    {
      llvm::MetadataTracking::track((uint64_t)&v16, v6, 2);
      uint64_t v4 = (uint64_t)v16;
    }
    sub_1CB8461A4((uint64_t)v17, 0, v4);
    if (!v16) {
      goto LABEL_5;
    }
    int v10 = *(unsigned __int8 *)v16;
    if ((v10 - 4) > 0x1E)
    {
      if ((v10 - 3) >= 0xFFFFFFFE) {
        unint64_t v13 = v16;
      }
      else {
        unint64_t v13 = 0;
      }
      if ((v10 - 3) < 0xFFFFFFFE)
      {
        if (v10 == 3) {
          v16[1] = 0;
        }
        goto LABEL_5;
      }
      unint64_t v12 = (unint64_t)(v13 + 1);
    }
    else
    {
      if ((*((unsigned char *)v16 + 1) & 0x7F) != 2 && !*((_DWORD *)v16 + 3)) {
        goto LABEL_5;
      }
      uint64_t v11 = v16[2];
      if ((v11 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (!v12) {
        goto LABEL_5;
      }
    }
    v14[0] = &v16;
    sub_1CC5FA668(v12 + 16, v14);
LABEL_5:
    char v16 = sub_1CCAF68D0(*a1, (uint64_t)a2);
    uint64_t v7 = *(void *)*a1;
    uint64_t v8 = *(uint64_t ***)(v7 + 440);
    unint64_t v9 = *(uint64_t ***)(v7 + 448);
    __int16 v15 = 257;
    sub_1CB845BAC((uint64_t *)v17, v8, v9, (uint64_t *)&v16, 1, (uint64_t)v14, 0);
    if (v17[0] != v18) {
      free(v17[0]);
    }
  }
}

void sub_1CCAFE854(uint64_t **a1, uint64_t **a2)
{
  uint64_t v4 = 0;
  v88[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  unint64_t v73 = v75;
  uint64_t v74 = 0x200000000;
  uint64_t v78 = v5;
  uint64_t v79 = &v87;
  uint64_t v80 = v88;
  uint64_t v81 = 0;
  int v82 = 0;
  __int16 v83 = 512;
  char v84 = 7;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  char v87 = &unk_1F2616E88;
  v88[0] = &unk_1F2617008;
  int v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  unint64_t v76 = v8;
  uint64_t v77 = v6;
  v70[0] = (uint64_t)v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)v70, v7, 2);
    uint64_t v4 = v70[0];
  }
  sub_1CB8461A4((uint64_t)&v73, 0, v4);
  if (v70[0])
  {
    int v55 = *(unsigned __int8 *)v70[0];
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        uint64_t v58 = v70[0];
      }
      else {
        uint64_t v58 = 0;
      }
      if ((v55 - 3) < 0xFFFFFFFE)
      {
        if (v55 == 3) {
          *(void *)(v70[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v57 = v58 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v70[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v70[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v56 = *(void *)(v70[0] + 16);
      if ((v56 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
      if (!v57) {
        goto LABEL_4;
      }
    }
    v66[0] = (const char *)v70;
    sub_1CC5FA668(v57 + 16, v66);
  }
LABEL_4:
  if (sub_1CCAF0410())
  {
    uint64_t v9 = **a1;
    int v10 = *(uint64_t ***)(v9 + 488);
    uint64_t v11 = *(uint64_t ***)(v9 + 496);
    unint64_t v12 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
    unint64_t v13 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v78 + 1912), 0);
    __int16 v67 = 257;
    v72[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v73, v12, v13, (uint64_t)v66, v14);
    __int16 v15 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
    char v16 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v78 + 1912), 0);
    __int16 v71 = 257;
    v72[1] = (uint64_t)sub_1CC277FE0((uint64_t)&v73, v15, v16, (uint64_t)v70, v17);
    uint64_t v18 = (llvm::CastInst *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
    int v19 = *(llvm::Type ****)(**a1 + 64);
    __int16 v69 = 257;
    v72[2] = (uint64_t)sub_1CBF56614((uint64_t)&v73, v18, v19, 0, (uint64_t)v68, v20);
    __int16 v65 = 257;
    sub_1CB845BAC((uint64_t *)&v73, v10, v11, v72, 3, (uint64_t)v64, 0);
  }
  uint64_t v21 = **a1;
  uint64_t v22 = llvm::Value::stripPointerCasts((llvm::Value *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
  uint64_t v23 = sub_1CCAFDBD8(v21, v22, a2);
  uint64_t v24 = **a1;
  uint64_t v25 = llvm::Value::stripPointerCasts((llvm::Value *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4]);
  unint64_t v26 = sub_1CCAFDBD8(v24, v25, a2);
  uint64_t v27 = (llvm::ConstantInt **)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
  unint64_t v28 = llvm::ConstantInt::get(*v27, 1uLL, 0);
  __int16 v67 = 257;
  uint64_t v29 = sub_1CC09A1EC((uint64_t)&v73, (uint64_t)v27, (uint64_t)v28, (uint64_t)v66, 0, 0);
  unint64_t v30 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(**a1 + 8) + 1912), 0);
  __int16 v71 = 257;
  unsigned __int8 v31 = (llvm::Instruction *)v23;
  if (*(void *)v23 != v30)
  {
    if (v23[16] <= 0x14u)
    {
      uint64_t v33 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v79 + 28))(v79, 49, v23, v30);
      unsigned __int8 v31 = (llvm::Instruction *)v33;
      if (v33)
      {
        if (*(unsigned __int8 *)(v33 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, uint64_t *, uint64_t *, uint64_t **))(*v80 + 16))(v80, v33, v70, v76, v77);
          if (v74)
          {
            int64x2_t v61 = (llvm::MDNode **)v73;
            unint64_t v63 = (llvm::MDNode **)((char *)v73 + 16 * v74);
            do
            {
              llvm::Instruction::setMetadata(v31, *(_DWORD *)v61, v61[1]);
              v61 += 2;
            }
            while (v61 != v63);
          }
        }
      }
    }
    else
    {
      __int16 v67 = 257;
      unsigned __int8 v31 = llvm::CastInst::Create(49, (uint64_t)v23, v30, v66, 0);
      (*(void (**)(void *, llvm::Instruction *, uint64_t *, uint64_t *, uint64_t **))(*v80 + 16))(v80, v31, v70, v76, v77);
      if (v74)
      {
        int v32 = (llvm::MDNode **)v73;
        uint64_t v62 = (llvm::MDNode **)((char *)v73 + 16 * v74);
        do
        {
          llvm::Instruction::setMetadata(v31, *(_DWORD *)v32, v32[1]);
          v32 += 2;
        }
        while (v32 != v62);
      }
    }
  }
  __int16 v71 = 257;
  if (*(void *)v26 != v30)
  {
    if (v26[16] <= 0x14u)
    {
      unint64_t v26 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v79
                                + 28))(v79, 49, v26, v30);
      if (v26) {
        BOOL v36 = v26[16] >= 0x1Cu;
      }
      else {
        BOOL v36 = 0;
      }
      if (v36)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t *, uint64_t **))(*v80 + 16))(v80, v26, v70, v76, v77);
        if (v74)
        {
          uint64_t v59 = (llvm::MDNode **)v73;
          uint64_t v60 = (llvm::MDNode **)((char *)v73 + 16 * v74);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v26, *(_DWORD *)v59, v59[1]);
            v59 += 2;
          }
          while (v59 != v60);
        }
      }
    }
    else
    {
      __int16 v67 = 257;
      unint64_t v26 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v26, v30, v66, 0);
      (*(void (**)(void *, unsigned __int8 *, uint64_t *, uint64_t *, uint64_t **))(*v80 + 16))(v80, v26, v70, v76, v77);
      if (v74)
      {
        char v34 = (llvm::MDNode **)v73;
        uint64_t v35 = (llvm::MDNode **)((char *)v73 + 16 * v74);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v26, *(_DWORD *)v34, v34[1]);
          v34 += 2;
        }
        while (v34 != v35);
      }
    }
  }
  unint64_t v37 = (uint64_t **)a2[9];
  unsigned __int8 v38 = (uint64_t **)*(a2 - 4);
  v70[0] = (uint64_t)v31;
  v70[1] = (uint64_t)v26;
  uint64_t v39 = (uint64_t)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 12];
  v70[2] = (uint64_t)v29;
  v70[3] = v39;
  __int16 v67 = 257;
  uint64_t v40 = sub_1CB845BAC((uint64_t *)&v73, v37, v38, v70, 4, (uint64_t)v66, 0);
  uint64_t v41 = v40;
  if (byte_1EBCE7448)
  {
    __int16 v42 = a2[8];
    if (v42 && *((_DWORD *)v42 + 2) >= 3u && (unint64_t v43 = (llvm::AttributeSetNode *)v42[7]) != 0)
    {
      __int16 Alignment = llvm::AttributeSetNode::getAlignment(v43);
      if ((Alignment & 0xFF00) != 0) {
        __int16 v45 = Alignment | 0x100;
      }
      else {
        __int16 v45 = 0;
      }
    }
    else
    {
      __int16 v45 = 0;
    }
    sub_1CC52DDDC(v41, v45);
    char v46 = a2[8];
    if (v46 && *((_DWORD *)v46 + 2) >= 4u && (char v47 = (llvm::AttributeSetNode *)v46[8]) != 0)
    {
      __int16 v48 = llvm::AttributeSetNode::getAlignment(v47);
      if ((v48 & 0xFF00) != 0) {
        __int16 v49 = v48 | 0x100;
      }
      else {
        __int16 v49 = 0;
      }
    }
    else
    {
      __int16 v49 = 0;
    }
    sub_1CC52DE74(v41, v49);
  }
  else
  {
    sub_1CC27C328(v40, 0);
    sub_1CC27C3B8(v41, 0);
  }
  if (byte_1EBCE7808)
  {
    __int16 v50 = (void *)**a1;
    uint64_t v51 = (uint64_t **)v50[49];
    int v52 = (uint64_t **)v50[50];
    v68[0] = (uint64_t)v23;
    __int16 v53 = (unsigned __int8 *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
    uint64_t v54 = v50[8];
    __int16 v67 = 257;
    v68[1] = (uint64_t)sub_1CB844B8C((uint64_t)&v73, v53, v54, (uint64_t)v66);
    __int16 v71 = 257;
    sub_1CB845BAC((uint64_t *)&v73, v51, v52, v68, 2, (uint64_t)v70, 0);
  }
  if (v73 != v75) {
    free(v73);
  }
}

llvm::Instruction *sub_1CCAFEFDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x10)
  {
    int v7 = *(_DWORD *)(*a2 + 8);
    if (v7 == 17)
    {
      if (*(void *)(v4 + 32))
      {
        unsigned int v18 = 0;
        __int16 v17 = 257;
        uint64_t v8 = sub_1CC2415A4(a3, a2, &v18, 1, (uint64_t)v16);
        uint64_t v9 = (llvm::Instruction *)sub_1CCAFEFDC(a1, v8, a3);
        unsigned int v18 = 1;
        if (*(void *)(v4 + 32) >= 2uLL)
        {
          do
          {
            __int16 v17 = 257;
            int v10 = sub_1CC2415A4(a3, v3, &v18, 1, (uint64_t)v16);
            uint64_t v11 = sub_1CCAFEFDC(a1, v10, a3);
            __int16 v17 = 257;
            uint64_t v9 = sub_1CB844AF4(a3, v9, v11, (uint64_t)v16);
            ++v18;
          }
          while (*(void *)(v4 + 32) > (unint64_t)v18);
        }
        return v9;
      }
      return *(llvm::Instruction **)(*(void *)a1 + 72);
    }
    if (v7 != 16) {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      if (*(_DWORD *)(v4 + 12))
      {
        unsigned int v18 = 0;
        __int16 v17 = 257;
        unint64_t v12 = sub_1CC2415A4(a3, a2, &v18, 1, (uint64_t)v16);
        uint64_t v9 = (llvm::Instruction *)sub_1CCAFEFDC(a1, v12, a3);
        unsigned int v18 = 1;
        if (*(_DWORD *)(v4 + 12) >= 2u)
        {
          do
          {
            __int16 v17 = 257;
            unint64_t v13 = sub_1CC2415A4(a3, v3, &v18, 1, (uint64_t)v16);
            uint64_t v14 = sub_1CCAFEFDC(a1, v13, a3);
            __int16 v17 = 257;
            uint64_t v9 = sub_1CB844AF4(a3, v9, v14, (uint64_t)v16);
            ++v18;
          }
          while (v18 < *(_DWORD *)(v4 + 12));
        }
        return v9;
      }
      return *(llvm::Instruction **)(*(void *)a1 + 72);
    }
  }
  return (llvm::Instruction *)v3;
}

uint64_t sub_1CCAFF1D4()
{
  word_1EBCE73B8 = 513;
  v4.n128_u64[0] = (unint64_t)"respect alignment requirements provided by input IR";
  v4.n128_u64[1] = 51;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&qword_1EBCE73C0[1], "dfsan-preserve-alignment", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE73C0[1], &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"File listing native ABI functions and how the pass treats them";
  v4.n128_u64[1] = 62;
  LODWORD(v2) = 1;
  sub_1CD6922B0((long long *)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBCE7C08, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Combine the label of the pointer with the label of the data when loading from memory.";
  v4.n128_u64[1] = 85;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7488, "dfsan-combine-pointer-labels-on-load", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7488, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Combine the label of the pointer with the label of the data when storing in memory.";
  v4.n128_u64[1] = 83;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = (char *)&v1;
  sub_1CD6923A4(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE7548, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Combine the label of the offset with the label of the pointer when doing pointer arithmetic.";
  v4.n128_u64[1] = 92;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7608, "dfsan-combine-offset-labels-on-gep", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7608, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"When dfsan-combine-offset-labels-on-gep and/or dfsan-combine-pointer-labels-on-load"
                                     " are false, this flag can be used to re-enable combining offset and/or pointer tain"
                                     "t when loading specific constant global variables (i.e. lookup tables).";
  v4.n128_u64[1] = 237;
  LODWORD(v2) = 1;
  sub_1CD69251C((long long *)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBCE7CE0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Insert calls to __dfsan_nonzero_label on observing a parameter, load or return with"
                                     " a nonzero label";
  v4.n128_u64[1] = 99;
  LODWORD(v2) = 1;
  sub_1CD6610AC((uint64_t)&unk_1EBCE76C8, "dfsan-debug-nonzero-labels", &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE76C8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Insert calls to __dfsan_*_callback functions on data events.";
  v4.n128_u64[1] = 60;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7788, "dfsan-event-callbacks", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7788, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Insert calls to callback functions on conditionals.";
  v4.n128_u64[1] = 51;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7848, "dfsan-conditional-callbacks", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7848, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Propagate labels from condition values of select instructions to results.";
  v4.n128_u64[1] = 73;
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7908, "dfsan-track-select-control-flow", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7908, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"If the function being instrumented requires more than this number of origin stores,"
                                     " use callbacks instead of inline checks (-1 means never use callbacks).";
  v4.n128_u64[1] = 154;
  int v3 = 1;
  int v1 = 3500;
  uint64_t v2 = (char *)&v1;
  sub_1CD692610(&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE79C8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Track origins of labels";
  v4.n128_u64[1] = 23;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = (char *)&v1;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBCE7A88, "dfsan-track-origins", &v4, &v3, (_DWORD **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCE7A88, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"If a personality routine is marked uninstrumented from the ABI list, do not create "
                                     "a wrapper for it.";
  v4.n128_u64[1] = 100;
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = (char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7B48, "dfsan-ignore-personality-routine", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7B48, &dword_1CB82C000);
}

void llvm::initializeGCOVProfilerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE7DC0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCAFF648;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCE7DC0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCAFF648(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeBranchProbabilityInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CCAFF6F8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE7DB8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262BDF8;
  int v3 = (llvm::PassRegistry *)sub_1CD692AA4((void *)(a1 + 32), a2);
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x400000000;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x1000000000;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0x1000000000;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE7DC0, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CCAFF648;
    v7[1] = &PassRegistry;
    int v6 = v7;
    std::__call_once(&qword_1EBCE7DC0, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

double sub_1CCAFF7FC(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_1CD692AA4(a1, a2);
  v2[9] = v2 + 11;
  v2[10] = 0x400000000;
  v2[13] = 0;
  v2[17] = 0;
  v2[18] = 0;
  v2[19] = v2 + 21;
  v2[20] = 0x1000000000;
  double result = 0.0;
  *(_OWORD *)(v2 + 37) = 0u;
  *(_OWORD *)(v2 + 39) = 0u;
  *(_OWORD *)(v2 + 41) = 0u;
  *(_OWORD *)(v2 + 43) = 0u;
  *((_DWORD *)v2 + 90) = 0;
  v2[46] = 0;
  v2[47] = 0;
  v2[48] = 0x1000000000;
  return result;
}

uint64_t sub_1CCAFF864(uint64_t a1, llvm::Module *a2, uint64_t (*a3)(uint64_t, std::string::size_type), uint64_t a4, uint64_t (*a5)(uint64_t, std::string::size_type), uint64_t a6, uint64_t a7)
{
  v129[2] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 104) = a2;
  sub_1CCB0861C((void *)(a1 + 112), a7);
  *(void *)(a1 + 144) = *(void *)a2;
  v108[0] = "llvm.dbg.cu";
  __int16 v110 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a2, (const char **)v108);
  if (!result) {
    return result;
  }
  if (!*(unsigned char *)a1 && !*(unsigned char *)(a1 + 1)) {
    return 0;
  }
  uint64_t v97 = result;
  uint64_t v98 = a3;
  uint64_t v99 = a4;
  uint64_t v100 = a5;
  uint64_t v101 = a6;
  int v127 = (uint64_t ***)v129;
  uint64_t v128 = 0x200000000;
  uint64_t v124 = (uint64_t ***)v126;
  uint64_t v125 = 0x200000000;
  uint64_t v14 = *(void *)(a1 + 104);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(void *)(v14 + 32);
  if (v16 == v14 + 24) {
    goto LABEL_48;
  }
  do
  {
    uint64_t v17 = *(void *)(a1 + 136);
    if (!v17) {
      sub_1CB920400();
    }
    if (v16) {
      uint64_t v18 = v16 - 56;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 48))(v17, v18);
    uint64_t v20 = v18 + 72;
    uint64_t v21 = *(void *)(v18 + 80);
    if (v21 == v20) {
      goto LABEL_46;
    }
    uint64_t v22 = (uint64_t *)v19;
    while (1)
    {
      uint64_t v23 = v21 - 24;
      if (!v21) {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void *)(v23 + 48);
      if (v24 != v23 + 40) {
        break;
      }
      uint64_t v21 = *(void *)(v21 + 8);
      if (v21 == v20) {
        goto LABEL_46;
      }
    }
    while (1)
    {
      uint64_t v27 = v24 - 24;
      if (!v24) {
        uint64_t v27 = 0;
      }
      int v28 = *(unsigned __int8 *)(v27 + 16);
      if (v28 == 84) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v24)
      {
        if (v28 == 84)
        {
          uint64_t v30 = *(void *)(v29 - 32);
          if (v30)
          {
            if (!*(unsigned char *)(v30 + 16) && *(void *)(v30 + 24) == *(void *)(v29 + 72))
            {
              LODWORD(v108[0]) = 0;
              if (llvm::TargetLibraryInfoImpl::getLibFunc(*v22, (uint64_t ***)v30, v108))
              {
                if ((LODWORD(v108[0]) - 195) >= 8)
                {
                  if (LODWORD(v108[0]) != 251) {
                    goto LABEL_38;
                  }
                  uint64_t v25 = v128;
                  if (v128 >= (unint64_t)HIDWORD(v128)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v26 = &v127;
                }
                else
                {
                  uint64_t v25 = v125;
                  if (v125 >= (unint64_t)HIDWORD(v125)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v26 = &v124;
                }
                (*v26)[v25] = (uint64_t **)v29;
                ++*((_DWORD *)v26 + 2);
              }
            }
          }
        }
      }
LABEL_38:
      uint64_t v24 = *(void *)(v24 + 8);
      uint64_t v31 = v21 - 24;
      if (!v21) {
        uint64_t v31 = 0;
      }
      if (v24 == v31 + 40) {
        break;
      }
LABEL_45:
      if (v21 == v20) {
        goto LABEL_46;
      }
    }
    while (1)
    {
      uint64_t v21 = *(void *)(v21 + 8);
      if (v21 == v20) {
        break;
      }
      uint64_t v32 = v21 - 24;
      if (!v21) {
        uint64_t v32 = 0;
      }
      uint64_t v24 = *(void *)(v32 + 48);
      if (v24 != v32 + 40) {
        goto LABEL_45;
      }
    }
LABEL_46:
    uint64_t v16 = *(void *)(v16 + 8);
  }
  while (v16 != v15);
  if (v128)
  {
    uint64_t v78 = 0;
    uint64_t v79 = *v127;
    uint64_t v80 = ***v127;
    v108[1] = (void *)0x200000000;
    uint64_t v113 = v80;
    int v114 = &v122;
    BOOL v115 = v123;
    uint64_t v116 = 0;
    int v117 = 0;
    __int16 v118 = 512;
    char v119 = 7;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    int v122 = &unk_1F2616E88;
    v123[0] = &unk_1F2617008;
    uint64_t v111 = v79[5];
    uint64_t v112 = v79 + 3;
    uint64_t v81 = (unsigned __int8 *)v79[6];
    BOOL v107 = (unsigned __int8 **)v81;
    v108[0] = v109;
    if (v81)
    {
      llvm::MetadataTracking::track((uint64_t)&v107, v81, 2);
      uint64_t v78 = (uint64_t)v107;
    }
    sub_1CB8461A4((uint64_t)v108, 0, v78);
    if (!v107)
    {
LABEL_143:
      uint64_t v83 = (uint64_t)v79[4];
      uint64_t v82 = (uint64_t)v79[5];
      char v84 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(void *)v113 + 1960), 0, 0, 0);
      inserted = llvm::Module::getOrInsertFunction(*(void *)(a1 + 104), "__gcov_fork", (const char *)0xB, v84, 0);
      char v87 = v79 - 4;
      uint64_t v88 = (uint64_t)*(v79 - 4);
      v79[9] = (uint64_t *)inserted;
      if (v88)
      {
        **(v79 - 2) = (uint64_t)*(v79 - 3);
        uint64_t v89 = (uint64_t)*(v79 - 3);
        if (v89) {
          *(void *)(v89 + 16) = *(v79 - 2);
        }
      }
      *char v87 = v86;
      if (v86)
      {
        unint64_t v92 = (void *)v86[1];
        unsigned int v90 = v86 + 1;
        uint64_t v91 = v92;
        *(v79 - 3) = v92;
        if (v92) {
          v91[2] = v79 - 3;
        }
        *(v79 - 2) = v90;
        *unsigned int v90 = (uint64_t)v87;
      }
      __int16 v106 = 257;
      llvm::BasicBlock::splitBasicBlock(v82, v83, (uint64_t)v105, 0);
    }
    int v93 = *(unsigned __int8 *)v107;
    if ((v93 - 4) > 0x1E)
    {
      if ((v93 - 3) >= 0xFFFFFFFE) {
        uint64_t v96 = v107;
      }
      else {
        uint64_t v96 = 0;
      }
      if ((v93 - 3) < 0xFFFFFFFE)
      {
        if (v93 == 3) {
          v107[1] = 0;
        }
        goto LABEL_143;
      }
      unint64_t v95 = (unint64_t)(v96 + 1);
    }
    else
    {
      if ((*((unsigned char *)v107 + 1) & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
        goto LABEL_143;
      }
      unint64_t v94 = (unint64_t)v107[2];
      if ((v94 & 4) == 0) {
        goto LABEL_143;
      }
      unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
      if (!v95) {
        goto LABEL_143;
      }
    }
    v105[0] = (void **)&v107;
    sub_1CC5FA668(v95 + 16, v105);
    goto LABEL_143;
  }
LABEL_48:
  if (v125)
  {
    uint64_t v33 = 0;
    char v34 = *v124;
    uint64_t v35 = ***v124;
    v108[1] = (void *)0x200000000;
    uint64_t v113 = v35;
    int v114 = &v122;
    BOOL v115 = v123;
    uint64_t v116 = 0;
    int v117 = 0;
    __int16 v118 = 512;
    char v119 = 7;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    int v122 = &unk_1F2616E88;
    v123[0] = &unk_1F2617008;
    uint64_t v111 = v34[5];
    uint64_t v112 = v34 + 3;
    BOOL v36 = (unsigned __int8 *)v34[6];
    BOOL v107 = (unsigned __int8 **)v36;
    v108[0] = v109;
    if (v36)
    {
      llvm::MetadataTracking::track((uint64_t)&v107, v36, 2);
      uint64_t v33 = (uint64_t)v107;
    }
    sub_1CB8461A4((uint64_t)v108, 0, v33);
    if (v107)
    {
      int v54 = *(unsigned __int8 *)v107;
      if ((v54 - 4) > 0x1E)
      {
        if ((v54 - 3) >= 0xFFFFFFFE) {
          int64x2_t v61 = v107;
        }
        else {
          int64x2_t v61 = 0;
        }
        if ((v54 - 3) < 0xFFFFFFFE)
        {
          if (v54 == 3) {
            v107[1] = 0;
          }
          goto LABEL_52;
        }
        unint64_t v56 = (unint64_t)(v61 + 1);
      }
      else
      {
        if ((*((unsigned char *)v107 + 1) & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
          goto LABEL_52;
        }
        unint64_t v55 = (unint64_t)v107[2];
        if ((v55 & 4) == 0) {
          goto LABEL_52;
        }
        unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
        if (!v56) {
          goto LABEL_52;
        }
      }
      v105[0] = (void **)&v107;
      sub_1CC5FA668(v56 + 16, v105);
    }
LABEL_52:
    uint64_t v37 = (uint64_t)v34[4];
    uint64_t v104 = v34[5];
    unsigned __int8 v38 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(void *)v113 + 1576), 0, 0, 0);
    uint64_t v39 = (uint64_t **)llvm::Module::getOrInsertFunction(*(void *)(a1 + 104), "llvm_writeout_files", (const char *)0x13, v38, 0);
    __int16 v106 = 257;
    sub_1CB845BAC((uint64_t *)v108, v39, v40, 0, 0, (uint64_t)v105, 0);
    uint64_t v41 = (unsigned __int8 *)v34[6];
    uint64_t v103 = v41;
    if (v41) {
      llvm::MetadataTracking::track((uint64_t)&v103, v41, 2);
    }
    uint64_t v42 = 0;
    uint64_t v43 = v37 - 24;
    if (!v37) {
      uint64_t v43 = 0;
    }
    uint64_t v111 = *(uint64_t **)(v43 + 40);
    uint64_t v112 = (void **)(v43 + 24);
    char v44 = *(unsigned __int8 **)(v43 + 48);
    BOOL v107 = (unsigned __int8 **)v44;
    if (v44)
    {
      llvm::MetadataTracking::track((uint64_t)&v107, v44, 2);
      uint64_t v42 = (uint64_t)v107;
    }
    sub_1CB8461A4((uint64_t)v108, 0, v42);
    if (v107)
    {
      int v57 = *(unsigned __int8 *)v107;
      if ((v57 - 4) > 0x1E)
      {
        if ((v57 - 3) >= 0xFFFFFFFE) {
          uint64_t v62 = v107;
        }
        else {
          uint64_t v62 = 0;
        }
        if ((v57 - 3) < 0xFFFFFFFE)
        {
          if (v57 == 3) {
            v107[1] = 0;
          }
          goto LABEL_59;
        }
        unint64_t v59 = (unint64_t)(v62 + 1);
      }
      else
      {
        if ((*((unsigned char *)v107 + 1) & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
          goto LABEL_59;
        }
        unint64_t v58 = (unint64_t)v107[2];
        if ((v58 & 4) == 0) {
          goto LABEL_59;
        }
        unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
        if (!v59) {
          goto LABEL_59;
        }
      }
      v105[0] = (void **)&v107;
      sub_1CC5FA668(v59 + 16, v105);
    }
LABEL_59:
    __int16 v45 = (uint64_t **)llvm::Module::getOrInsertFunction(*(void *)(a1 + 104), "llvm_reset_counters", (const char *)0x13, v38, 0);
    __int16 v106 = 257;
    uint64_t v47 = sub_1CB845BAC((uint64_t *)v108, v45, v46, 0, 0, (uint64_t)v105, 0);
    int v102 = v103;
    if (v103) {
      llvm::MetadataTracking::track((uint64_t)&v102, v103, 2);
    }
    __int16 v48 = (unsigned __int8 **)(v47 + 48);
    if (&v102 != v48)
    {
      __int16 v49 = *v48;
      if (!*v48) {
        goto LABEL_63;
      }
      int v51 = *v49;
      if ((v51 - 4) > 0x1E)
      {
        if ((v51 - 3) >= 0xFFFFFFFE) {
          uint64_t v60 = *v48;
        }
        else {
          uint64_t v60 = 0;
        }
        if ((v51 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v53 = (unint64_t)(v60 + 8);
LABEL_89:
          BOOL v107 = v48;
          sub_1CC5FA668(v53 + 16, &v107);
          goto LABEL_63;
        }
        if (v51 == 3) {
          *((void *)v49 + 1) = 0;
        }
      }
      else if ((v49[1] & 0x7F) == 2 || *((_DWORD *)v49 + 3))
      {
        uint64_t v52 = *((void *)v49 + 2);
        if ((v52 & 4) != 0)
        {
          unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
          if (v53) {
            goto LABEL_89;
          }
        }
      }
LABEL_63:
      __int16 v50 = v102;
      char *v48 = v102;
      if (v50)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v102, v50, (uint64_t)v48);
        int v102 = 0;
      }
LABEL_65:
      sub_1CD4201D0(a1 + 344, &v104, (uint64_t)v105);
      __int16 v106 = 257;
      llvm::BasicBlock::splitBasicBlock((uint64_t)v104, v37, (uint64_t)v105, 0);
    }
    if (!v102) {
      goto LABEL_65;
    }
    int v63 = *v102;
    if ((v63 - 4) > 0x1E)
    {
      if ((v63 - 3) >= 0xFFFFFFFE) {
        int v66 = v102;
      }
      else {
        int v66 = 0;
      }
      if ((v63 - 3) < 0xFFFFFFFE)
      {
        if (v63 == 3) {
          *((void *)v102 + 1) = 0;
        }
        goto LABEL_65;
      }
      unint64_t v65 = (unint64_t)(v66 + 8);
    }
    else
    {
      if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
        goto LABEL_65;
      }
      uint64_t v64 = *((void *)v102 + 2);
      if ((v64 & 4) == 0) {
        goto LABEL_65;
      }
      unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v65) {
        goto LABEL_65;
      }
    }
    BOOL v107 = &v102;
    sub_1CC5FA668(v65 + 16, &v107);
    goto LABEL_65;
  }
  int v67 = v128;
  if (v124 != (uint64_t ***)v126) {
    free(v124);
  }
  if (v127 != v129) {
    free(v127);
  }
  char v68 = *(unsigned char *)(a1 + 31);
  int v69 = v68;
  if (v68 >= 0) {
    uint64_t v70 = a1 + 8;
  }
  else {
    uint64_t v70 = *(void *)(a1 + 8);
  }
  unint64_t v71 = v68 & 0x7F;
  if (v69 >= 0) {
    unint64_t v72 = v71;
  }
  else {
    unint64_t v72 = *(void *)(a1 + 16);
  }
  sub_1CCB00FB4(v108, a1, v70, v72);
  sub_1CD692B28((void **)(a1 + 296));
  *(_OWORD *)(a1 + 296) = *(_OWORD *)v108;
  *(void *)(a1 + 312) = v109[0];
  v108[1] = 0;
  v109[0] = 0;
  v108[0] = 0;
  v105[0] = v108;
  sub_1CCB086FC(v105);
  char v73 = *(unsigned char *)(a1 + 55);
  int v74 = v73;
  if (v73 >= 0) {
    uint64_t v75 = a1 + 32;
  }
  else {
    uint64_t v75 = *(void *)(a1 + 32);
  }
  unint64_t v76 = v73 & 0x7F;
  if (v74 >= 0) {
    unint64_t v77 = v76;
  }
  else {
    unint64_t v77 = *(void *)(a1 + 40);
  }
  sub_1CCB00FB4(v108, a1, v75, v77);
  sub_1CD692B28((void **)(a1 + 320));
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v108;
  *(void *)(a1 + 336) = v109[0];
  v108[1] = 0;
  v109[0] = 0;
  v108[0] = 0;
  v105[0] = v108;
  sub_1CCB086FC(v105);
  sub_1CCB0123C(a1, v97, v67 != 0, v98, v99, v100, v101);
  return 1;
}

uint64_t sub_1CCB0071C(uint64_t a1)
{
  sub_1CC0D7CD8(a1 + 368);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 344), 8);
  uint64_t v9 = (void **)(a1 + 320);
  sub_1CCB086FC(&v9);
  uint64_t v9 = (void **)(a1 + 296);
  sub_1CCB086FC(&v9);
  uint64_t v2 = *(char **)(a1 + 152);
  uint64_t v3 = *(unsigned int *)(a1 + 160);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      sub_1CCB08980((uint64_t *)&v5[v4]);
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 152);
  }
  if (v2 != (char *)(a1 + 168)) {
    free(v2);
  }
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6 == a1 + 112)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 32))(a1 + 112);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  int v7 = *(void **)(a1 + 72);
  if (v7 != (void *)(a1 + 88)) {
    free(v7);
  }

  return sub_1CD692A60(a1);
}

void sub_1CCB00844()
{
}

void sub_1CCB008BC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262BDF8;
  sub_1CCB0071C((uint64_t)a1 + 32);

  llvm::Pass::~Pass(a1);
}

void sub_1CCB00910(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262BDF8;
  sub_1CCB0071C((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB00978()
{
  return "GCOV Profiler";
}

void sub_1CCB00988(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1CCB009D8(uint64_t a1, llvm::Module *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  uint64_t v5 = a1;
  v6[0] = &unk_1F262BE98;
  v6[1] = a1;
  int v7 = v6;
  uint64_t v2 = sub_1CCAFF864(a1 + 32, a2, (uint64_t (*)(uint64_t, std::string::size_type))sub_1CCB00AF0, (uint64_t)&v5, (uint64_t (*)(uint64_t, std::string::size_type))sub_1CCB00B78, (uint64_t)&v4, (uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return v2;
}

uint64_t sub_1CCB00AF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t sub_1CCB00B78(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::BranchProbabilityInfoWrapperPass::ID)+ 32;
}

void sub_1CCB00C04()
{
}

void *sub_1CCB00C18(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F262BE98;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB00C60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262BE98;
  a2[1] = v2;
  return result;
}

void sub_1CCB00C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

void *sub_1CCB00FB4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v10 = a3;
  unint64_t v11 = a4;
  result[1] = 0;
  result[2] = 0;
  void *result = 0;
  if (a4)
  {
    unint64_t v4 = a4;
    uint64_t v5 = a3;
    do
    {
      LOBYTE(v9) = 59;
      uint64_t result = (void *)llvm::StringRef::find(&v10, (char *)&v9, 1uLL, 0);
      if (result == (void *)-1
        || (v4 >= (unint64_t)result ? (uint64_t v6 = result) : (uint64_t v6 = (void *)v4),
            v4 >= (unint64_t)result + 1 ? (unint64_t v7 = (unint64_t)result + 1) : (unint64_t v7 = v4),
            unint64_t v8 = v4 - v7,
            v6))
      {
        llvm::Regex::Regex();
      }
      uint64_t v10 = v5 + v7;
      unint64_t v11 = v4 - v7;
      v5 += v7;
      v4 -= v7;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1CCB0123C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, std::string::size_type), uint64_t a5, uint64_t (*a6)(uint64_t, std::string::size_type), uint64_t a7)
{
  uint64_t v310 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *(unsigned __int8 *)(result + 2);
  uint64_t v263 = (char *)(result + 2);
  int v8 = *(unsigned __int8 *)(result + 4);
  if (v7 < 0x41) {
    int v9 = v8 + 10 * v7 - 480;
  }
  else {
    int v9 = v8 + 100 * v7 + 10 * *(unsigned __int8 *)(result + 3) - 6980;
  }
  int v268 = v9;
  uint64_t v10 = *(unsigned int *)(*(void *)(a2 + 48) + 8);
  if (v10)
  {
    uint64_t v11 = 0;
    BOOL v275 = *(unsigned char *)(result + 1) != 0;
    char v272 = (llvm::StringMapImpl *)(result + 368);
    int v262 = (char *)(result + 5);
    uint64_t v270 = *(unsigned int *)(*(void *)(a2 + 48) + 8);
    uint64_t v271 = a2;
    uint64_t v281 = result;
    while (*(void *)(*(void *)(**(void **)(a2 + 48) + 8 * v11) + 40))
    {
LABEL_176:
      if (++v11 == v10) {
        return result;
      }
    }
    uint64_t v269 = *(void *)(**(void **)(a2 + 48) + 8 * v11);
    uint64_t v274 = v11;
    uint64_t v296 = v298;
    uint64_t v297 = 0x800000000;
    uint64_t v12 = *(void *)(result + 104);
    *(_DWORD *)(result + 56) = *(unsigned char *)(v12 + 272) == 0;
    uint64_t v13 = v12 + 24;
    uint64_t v14 = *(void *)(v12 + 32);
    if (v14 != v12 + 24)
    {
      uint64_t v277 = v12 + 24;
      do
      {
        if (v14) {
          uint64_t v15 = (std::string *)(v14 - 56);
        }
        else {
          uint64_t v15 = 0;
        }
        if ((*((unsigned char *)&v15->__r_.__value_.__s + 23) & 0x20) == 0) {
          goto LABEL_27;
        }
        uint64_t v16 = **(void **)v15->__r_.__value_.__l.__data_;
        unint64_t v299 = v15;
        int v17 = *(_DWORD *)(v16 + 2496);
        unsigned int v18 = v15 >> 4;
        if (v17)
        {
          uint64_t v19 = *(void *)(v16 + 2480);
          int v20 = v17 - 1;
          unsigned int v21 = v20 & (v18 ^ (v15 >> 9));
          uint64_t v22 = (std::string **)(v19 + 40 * v21);
          char v23 = *v22;
          if (*v22 == v15) {
            goto LABEL_23;
          }
          uint64_t v24 = 0;
          int v25 = 1;
          while (1)
          {
            unsigned int v26 = v15 >> 4;
            if (v23 == (std::string *)-4096) {
              break;
            }
            if (v24) {
              BOOL v27 = 0;
            }
            else {
              BOOL v27 = v23 == (std::string *)-8192;
            }
            if (v27) {
              uint64_t v24 = v22;
            }
            unsigned int v28 = v21 + v25++;
            unsigned int v21 = v28 & v20;
            uint64_t v22 = (std::string **)(v19 + 40 * v21);
            char v23 = *v22;
            if (*v22 == v15) {
              goto LABEL_23;
            }
          }
          uint64_t v55 = v14;
          if (v24) {
            unint64_t v56 = v24;
          }
          else {
            unint64_t v56 = v22;
          }
        }
        else
        {
          unsigned int v26 = v15 >> 4;
          uint64_t v55 = v14;
          unint64_t v56 = 0;
        }
        uint64_t v22 = (std::string **)sub_1CC609054(v16 + 2480, (uint64_t)&v299, (uint64_t *)&v299, v56);
        int v57 = v299;
        void v22[4] = 0;
        v22[3] = 0;
        uint64_t *v22 = v57;
        v22[1] = (std::string *)(v22 + 3);
        v22[2] = (std::string *)0x100000000;
        uint64_t v14 = v55;
        unsigned int v18 = v26;
LABEL_23:
        uint64_t v29 = *((unsigned int *)v22 + 4);
        if (!v29) {
          goto LABEL_27;
        }
        p_std::string::size_type size = (unsigned __int8 **)&v22[1]->__r_.__value_.__l.__size_;
        uint64_t v31 = 16 * v29;
        while (*((_DWORD *)p_size - 2))
        {
          p_size += 2;
          v31 -= 16;
          if (!v31) {
            goto LABEL_27;
          }
        }
        uint64_t v280 = *p_size;
        if (*p_size)
        {
          std::string::size_type size = (llvm::Instruction *)v15[3].__r_.__value_.__l.__size_;
          unint64_t v279 = (llvm::Instruction *)&v15[3];
          if (size != (llvm::Instruction *)&v15[3])
          {
            unsigned int v273 = v18;
            uint64_t v278 = (llvm::PoisonValue *)v15;
            uint64_t v276 = v14;
            while (2)
            {
              int v33 = (void *)((char *)size - 24);
              if (!size) {
                int v33 = 0;
              }
              long long v34 = v33 + 5;
              for (uint64_t i = (void *)v33[6]; i != v34; uint64_t i = (void *)i[1])
              {
                if (i) {
                  uint64_t v36 = (uint64_t)(i - 3);
                }
                else {
                  uint64_t v36 = 0;
                }
                if (!sub_1CBF63B28(v36))
                {
                  uint64_t v38 = *(void *)(v36 + 48);
                  if (v38)
                  {
                    if (*(_DWORD *)(v38 + 4))
                    {
                      uint64_t v13 = v277;
                      std::string::size_type v39 = (std::string::size_type)v278;
                      if (*(void *)(v281 + 296) == *(void *)(v281 + 304)
                        && *(void *)(v281 + 320) == *(void *)(v281 + 328))
                      {
                        goto LABEL_113;
                      }
                      if ((*((unsigned char *)v278 + 23) & 0x20) == 0) {
                        goto LABEL_68;
                      }
                      uint64_t v40 = ***(void ***)v278;
                      unint64_t v299 = (std::string *)v278;
                      int v41 = *(_DWORD *)(v40 + 2496);
                      if (!v41)
                      {
                        uint64_t v96 = 0;
                        goto LABEL_133;
                      }
                      uint64_t v42 = *(void *)(v40 + 2480);
                      int v43 = v41 - 1;
                      unsigned int v44 = v43 & (v273 ^ (v278 >> 9));
                      __int16 v45 = (llvm::PoisonValue **)(v42 + 40 * v44);
                      char v46 = *v45;
                      if (*v45 != v278)
                      {
                        uint64_t v47 = 0;
                        int v48 = 1;
                        while (v46 != (llvm::PoisonValue *)-4096)
                        {
                          if (v47) {
                            BOOL v49 = 0;
                          }
                          else {
                            BOOL v49 = v46 == (llvm::PoisonValue *)-8192;
                          }
                          if (v49) {
                            uint64_t v47 = v45;
                          }
                          unsigned int v50 = v44 + v48++;
                          unsigned int v44 = v50 & v43;
                          __int16 v45 = (llvm::PoisonValue **)(v42 + 40 * v44);
                          char v46 = *v45;
                          if (*v45 == v278) {
                            goto LABEL_58;
                          }
                        }
                        if (v47) {
                          uint64_t v96 = v47;
                        }
                        else {
                          uint64_t v96 = v45;
                        }
LABEL_133:
                        __int16 v45 = (llvm::PoisonValue **)sub_1CC609054(v40 + 2480, (uint64_t)&v299, (uint64_t *)&v299, v96);
                        uint64_t v97 = v299;
                        v45[4] = 0;
                        void v45[3] = 0;
                        void *v45 = (llvm::PoisonValue *)v97;
                        v45[1] = (llvm::PoisonValue *)(v45 + 3);
                        v45[2] = (llvm::PoisonValue *)0x100000000;
                      }
LABEL_58:
                      uint64_t v51 = *((unsigned int *)v45 + 4);
                      if (v51)
                      {
                        uint64_t v52 = (unsigned __int8 **)((char *)v45[1] + 8);
                        uint64_t v53 = 16 * v51;
                        while (*((_DWORD *)v52 - 2))
                        {
                          int v54 = 0;
                          v52 += 2;
                          v53 -= 16;
                          if (!v53) {
                            goto LABEL_69;
                          }
                        }
                        int v54 = *v52;
                      }
                      else
                      {
LABEL_68:
                        int v54 = 0;
                      }
LABEL_69:
                      sub_1CCB08780((uint64_t)&v305, v54);
                      unint64_t v58 = v305;
                      unint64_t v59 = v306;
                      unint64_t v284 = (llvm::Instruction *)*(unsigned int *)(v281 + 376);
                      if (!v284) {
                        goto LABEL_354;
                      }
                      int v60 = 0;
                      if (v306)
                      {
                        int64x2_t v61 = v306;
                        uint64_t v62 = v305;
                        do
                        {
                          int v63 = *v62++;
                          int v60 = 33 * v60 + v63;
                          int64x2_t v61 = (llvm::Type *)((char *)v61 - 1);
                        }
                        while (v61);
                      }
                      uint64_t v64 = *(llvm::BasicBlock **)v272;
                      uint64_t v65 = *(void *)v272 + 8 * (void)v284 + 8;
                      int v66 = 1;
                      int v67 = v60;
                      unsigned int v287 = *(llvm::BasicBlock **)v272;
                      while (1)
                      {
                        uint64_t v68 = v67 & (v284 - 1);
                        int v69 = (llvm::Type **)*((void *)v64 + v68);
                        if (v69 != (llvm::Type **)-8)
                        {
                          if (!v69) {
                            goto LABEL_85;
                          }
                          if (*(_DWORD *)(v65 + 4 * v68) == v60 && v59 == *v69)
                          {
                            if (!v59) {
                              break;
                            }
                            uint64_t v70 = v58;
                            int v71 = memcmp(v58, (char *)v69 + *(unsigned int *)(v281 + 388), (size_t)v59);
                            uint64_t v64 = v287;
                            unint64_t v58 = v70;
                            if (!v71) {
                              break;
                            }
                          }
                        }
                        int v67 = v66 + v68;
                        ++v66;
                      }
                      if (v68 == -1 || (llvm::Instruction *)(int)v68 == v284)
                      {
LABEL_354:
                      {
LABEL_85:
                        unint64_t v299 = (std::string *)&v301;
                        long long v300 = xmmword_1CD96DBF0;
                        __int16 v304 = 261;
                        v303[0] = v58;
                        v303[1] = v59;
                        int v73 = llvm::sys::fs::real_path((unsigned __int8 *)v303, &v299, 0);
                        int v74 = &v306;
                        if (!v73) {
                          int v74 = (llvm::Type **)&v300;
                        }
                      }
                        uint64_t v75 = (uint64_t)*v74;
                        unint64_t v76 = v73 ? (char **)&v305 : (char **)&v299;
                        unint64_t v77 = *v76;
                        uint64_t v78 = *(void *)(v281 + 296);
                        uint64_t v79 = *(void *)(v281 + 304);
                        if (v78 == v79)
                        {
                          uint64_t v80 = *(void *)(v281 + 320);
                          uint64_t v81 = *(void *)(v281 + 328);
                          if (v80 == v81)
                          {
                            int v72 = 1;
                          }
                          else
                          {
                            do
                            {
                              int v82 = llvm::Regex::match(v80, v77, v75, 0, 0);
                              if (v82) {
                                break;
                              }
                              v80 += 16;
                            }
                            while (v80 != v81);
                            int v72 = v82 ^ 1;
                          }
                        }
                        else if (*(void *)(v281 + 320) == *(void *)(v281 + 328))
                        {
                          do
                          {
                            int v72 = llvm::Regex::match(v78, v77, v75, 0, 0);
                            if (v72) {
                              break;
                            }
                            v78 += 16;
                          }
                          while (v78 != v79);
                        }
                        else
                        {
                          while (!llvm::Regex::match(v78, v77, v75, 0, 0))
                          {
                            v78 += 16;
                            if (v78 == v79)
                            {
                              int v72 = 0;
                              goto LABEL_107;
                            }
                          }
                          uint64_t v83 = *(void *)(v281 + 320);
                          uint64_t v84 = *(void *)(v281 + 328);
                          if (v83 == v84)
                          {
                            int v72 = 1;
                          }
                          else
                          {
                            do
                            {
                              int v85 = llvm::Regex::match(v83, v77, v75, 0, 0);
                              if (v85) {
                                break;
                              }
                              v83 += 16;
                            }
                            while (v83 != v84);
                            int v72 = v85 ^ 1;
                          }
                        }
LABEL_107:
                        *(unsigned char *)(*sub_1CC0D7D50(v272, v305, (size_t)v306) + 8) = v72;
                        if (v299 != (std::string *)&v301) {
                          free(v299);
                        }
                        unint64_t v58 = v305;
                      }
                      else
                      {
                        int v72 = *(unsigned __int8 *)(*((void *)v64 + (int)v68) + 8) != 0;
                      }
                      uint64_t v13 = v277;
                      std::string::size_type v39 = (std::string::size_type)v278;
                      if (v58 != (unsigned __int8 *)&v307) {
                        free(v58);
                      }
                      if (v72)
                      {
LABEL_113:
                        uint64_t v14 = v276;
                        if ((*(_WORD *)(v39 + 18) & 8) == 0
                          || ((int v92 = *(_DWORD *)(v39 + 20), (v92 & 0x40000000) != 0)
                            ? (int v93 = *(llvm::Value ***)(v39 - 8))
                            : (int v93 = (llvm::Value **)(v39 - 32 * (v92 & 0x7FFFFFF))),
                              (unsigned int v94 = llvm::classifyEHPersonality(*v93, v37), v94 - 7 >= 4)
                            ? (BOOL v95 = v94 == 12)
                            : (BOOL v95 = 1),
                              uint64_t v14 = v276,
                              !v95))
                        {
                          uint64_t v86 = *(void *)(v39 + 112);
                          if (!v86 || (*(unsigned char *)(v86 + 15) & 0x20) == 0)
                          {
                            sub_1CCB08780((uint64_t)&v299, v280);
                            uint64_t v87 = a6(a7, v39);
                            uint64_t v88 = (llvm::BranchProbabilityInfo *)a4(a5, v39);
                            llvm::SplitIndirectBrCriticalEdges((llvm *)v39, 0, v87, v88, v89);
                            v290.__r_.__value_.__r.__words[0] = v39;
                            char v292 = 0;
                            *(_OWORD *)&v290.__r_.__value_.__r.__words[1] = 0u;
                            memset(v291, 0, 28);
                            uint64_t v293 = v87;
                            BOOL v294 = v88;
                            char v295 = 0;
                            uint64_t v90 = *(void *)(v39 + 80);
                            if (v90) {
                              uint64_t v91 = v90 - 24;
                            }
                            else {
                              uint64_t v91 = 0;
                            }
                            sub_1CCB094F4((uint64_t)&v290, 0, v91);
                          }
                        }
                        goto LABEL_27;
                      }
LABEL_134:
                      uint64_t v14 = v276;
                      goto LABEL_27;
                    }
                  }
                }
              }
              std::string::size_type size = (llvm::Instruction *)*((void *)size + 1);
              if (size != v279) {
                continue;
              }
              break;
            }
            uint64_t v13 = v277;
            goto LABEL_134;
          }
        }
LABEL_27:
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14 != v13);
    }
    unint64_t v98 = *(unsigned int *)(v281 + 80);
    if (v98 >= *(unsigned int *)(v281 + 84)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)(v281 + 72) + 4 * v98) = -1;
    ++*(_DWORD *)(v281 + 80);
    if (!*(unsigned char *)v281) {
      goto LABEL_139;
    }
    v309.__val_ = 0;
    v309.__cat_ = std::system_category();
    sub_1CCB08ED0(&v299, *(llvm::Module **)(v281 + 104), v269, 0);
    if (v300 >= 0) {
      uint64_t v111 = &v299;
    }
    else {
      uint64_t v111 = (std::string **)v299;
    }
    if (v300 >= 0) {
      uint64_t v112 = HIBYTE(v300) & 0x7F;
    }
    else {
      uint64_t v112 = v300;
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v303, v111, v112, (uint64_t)&v309, 0);
    if (SHIBYTE(v300) < 0) {
      operator delete(v299);
    }
    if (v309.__val_)
    {
      uint64_t v115 = *(void *)(v281 + 144);
      uint64_t v305 = "failed to open coverage notes file for writing: ";
      LOWORD(v308) = 259;
      std::error_code::message(&v290, &v309);
      char v116 = v308;
      if ((_BYTE)v308)
      {
        if (v308 == 1)
        {
          unint64_t v299 = &v290;
          char v117 = 1;
          char v116 = 4;
        }
        else
        {
          if (BYTE1(v308) != 1) {
            char v116 = 2;
          }
          unsigned int v261 = (void **)&v305;
          if (BYTE1(v308) == 1) {
            unsigned int v261 = (void **)v305;
          }
          unint64_t v299 = (std::string *)v261;
          *(void *)&long long v300 = v306;
          *((void *)&v300 + 1) = &v290;
          char v117 = 4;
        }
      }
      else
      {
        char v117 = 1;
      }
      LOBYTE(v302) = v116;
      HIBYTE(v302) = v117;
      llvm::LLVMContext::emitError(v115, (uint64_t)&v299);
      if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v290.__r_.__value_.__l.__data_);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v303);
LABEL_173:
      if (v296 != v298) {
        free(v296);
      }
      uint64_t v10 = v270;
      a2 = v271;
      uint64_t result = v281;
      uint64_t v11 = v274;
      goto LABEL_176;
    }
    *(void *)(v281 + 64) = v303;
    if (*(_DWORD *)(v281 + 56))
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v303, "oncg", 4uLL);
      uint64_t v118 = 0;
      char v119 = v262;
      do
      {
        char v120 = *v119--;
        uint64_t v113 = v289;
        v289[v118++] = v120;
      }
      while (v118 != 4);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v303, "gcno", 4uLL);
      uint64_t v113 = v263;
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)v303, v113, 4uLL);
    unsigned int v121 = bswap32(0xFFFFFFFF);
    unsigned int v283 = v121;
    if ((*(_DWORD *)(v281 + 56) - 1) >= 2) {
      int v122 = v121;
    }
    else {
      int v122 = -1;
    }
    LODWORD(v299) = v122;
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v281 + 64), (const char *)&v299, 4uLL);
    if (v268 < 138)
    {
      if (v268 < 128)
      {
LABEL_192:
        uint64_t v123 = *(unsigned int *)(v281 + 160);
        if (!v123)
        {
LABEL_341:
          LODWORD(v299) = 0;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v281 + 64), (const char *)&v299, 4uLL);
          LODWORD(v299) = 0;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v281 + 64), (const char *)&v299, 4uLL);
          llvm::raw_fd_ostream::close((llvm::raw_fd_ostream *)v303);
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v303);
LABEL_139:
          if (v275)
          {
            unint64_t v282 = (llvm::Type *)llvm::FunctionType::get((uint64_t **)(**(void **)(v281 + 144) + 1576), 0, 0, 0);
            uint64_t v99 = *(uint64_t **)(*(void *)(v281 + 104) + 112);
            unsigned int v100 = *((_DWORD *)v99 + 8);
            if (v100 <= 1) {
              uint64_t v101 = 1;
            }
            else {
              uint64_t v101 = v100;
            }
            if (v100 <= 0x13) {
              size_t v102 = v101;
            }
            else {
              size_t v102 = 20;
            }
            uint64_t v285 = (llvm::Instruction *)*((unsigned int *)v99 + 2);
            if (!v285) {
              goto LABEL_170;
            }
            uint64_t v103 = 0;
            int v104 = 0;
            do
              int v104 = 33 * v104 + aLlvmGcovWriteo[v103++];
            while (v102 != v103);
            uint64_t v105 = *v99;
            uint64_t v106 = *v99 + 8 * (void)v285 + 8;
            int v107 = 1;
            int v108 = v104;
            while (1)
            {
              uint64_t v109 = v108 & (v285 - 1);
              __int16 v110 = *(void **)(v105 + 8 * v109);
              if (v110 != (void *)-8)
              {
                if (!v110) {
                  goto LABEL_170;
                }
                if (*(_DWORD *)(v106 + 4 * v109) == v104
                  && v102 == *v110
                  && !memcmp("__llvm_gcov_writeout", (char *)v110 + *((unsigned int *)v99 + 5), v102))
                {
                  break;
                }
              }
              int v108 = v107 + v109;
              ++v107;
            }
            if (v109 == -1
              || (llvm::Instruction *)(int)v109 == v285
              || (int v114 = *(char **)(*(void *)(v105 + 8 * (int)v109) + 8)) == 0
              || v114[16])
            {
LABEL_170:
              int v114 = sub_1CCB0C7AC(v281, v282, "__llvm_gcov_writeout", (const char *)0x14);
            }
            *((void *)v114 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v114 + 14, **(uint64_t ***)v114, -1, 27);
            unint64_t v299 = (std::string *)"entry";
            __int16 v302 = 259;
            operator new();
          }
          BOOL v275 = 0;
          goto LABEL_173;
        }
        uint64_t v124 = *(llvm::BasicBlock **)(v281 + 152);
        uint64_t v286 = (llvm::BasicBlock *)((char *)v124 + 8 * v123);
        while (1)
        {
          uint64_t v288 = v124;
          uint64_t v125 = *(uint64_t **)v124;
          uint64_t v126 = **(void **)v124;
          if ((*(_DWORD *)(v126 + 56) - 1) >= 2) {
            int v127 = 1;
          }
          else {
            int v127 = 0x1000000;
          }
          LODWORD(v299) = v127;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v126 + 64), (const char *)&v299, 4uLL);
          sub_1CCB08780((uint64_t)&v305, (unsigned __int8 *)v125[1]);
          uint64_t v128 = v125[1] - 8 * *(unsigned int *)(v125[1] + 8);
          uint64_t v129 = *(void *)(v128 + 24);
          if (!v129 || (unint64_t v130 = **(void **)(v129 + 8)) == 0)
          {
            uint64_t v131 = *(void *)(v128 + 16);
            if (v131) {
              unint64_t v130 = **(void **)(v131 + 8);
            }
            else {
              unint64_t v130 = 0;
            }
          }
          int v132 = *((_DWORD *)v125 + 7);
          unint64_t v133 = v130 >> 2;
          if (v132 <= 0x59) {
            int v134 = 6;
          }
          else {
            int v134 = 7;
          }
          if (v132 < 80) {
            int v134 = 3;
          }
          if (v132 <= 46) {
            int v135 = 4;
          }
          else {
            int v135 = 5;
          }
          unsigned int v136 = v134 + v135 + ((unint64_t)v306 >> 2) + v133;
          uint64_t v137 = *v125;
          unsigned int v138 = bswap32(v136);
          if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
            unsigned int v136 = v138;
          }
          LODWORD(v299) = v136;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v137 + 64), (const char *)&v299, 4uLL);
          unsigned int v139 = *((_DWORD *)v125 + 5);
          uint64_t v140 = *v125;
          unsigned int v141 = bswap32(v139);
          if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
            unsigned int v139 = v141;
          }
          LODWORD(v299) = v139;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v140 + 64), (const char *)&v299, 4uLL);
          unsigned int v142 = *((_DWORD *)v125 + 6);
          uint64_t v143 = *v125;
          unsigned int v144 = bswap32(v142);
          if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
            unsigned int v142 = v144;
          }
          LODWORD(v299) = v142;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v143 + 64), (const char *)&v299, 4uLL);
          if (*((int *)v125 + 7) >= 47)
          {
            uint64_t v145 = *v125;
            int v146 = v283;
            if ((*(_DWORD *)(*v125 + 56) - 1) < 2) {
              int v146 = -1;
            }
            LODWORD(v299) = v146;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v145 + 64), (const char *)&v299, 4uLL);
          }
          uint64_t v147 = v125[1] - 8 * *(unsigned int *)(v125[1] + 8);
          uint64_t v148 = *(void *)(v147 + 24);
          if (!v148
            || (v149 = *(void **)(v148 + 8), v152 = *v149, int v150 = (const char *)(v149 + 3), (v151 = v152) == 0))
          {
            uint64_t v153 = *(void *)(v147 + 16);
            if (v153)
            {
              std::string::size_type v154 = *(void **)(v153 + 8);
              size_t v155 = *v154;
              int v150 = (const char *)(v154 + 3);
              size_t v151 = v155;
            }
            else
            {
              int v150 = 0;
              size_t v151 = 0;
            }
          }
          sub_1CCB09460(*v125, v150, v151);
          uint64_t v156 = *v125;
          if (*((int *)v125 + 7) > 79)
          {
            int v161 = (*(_DWORD *)(v125[1] + 40) >> 6) & 1;
            if ((*(_DWORD *)(v156 + 56) - 1) >= 2) {
              v161 <<= 24;
            }
            LODWORD(v299) = v161;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v156 + 64), (const char *)&v299, 4uLL);
            sub_1CCB09460(*v125, (const char *)v305, (size_t)v306);
            uint64_t v162 = *v125;
            unsigned int v163 = *(_DWORD *)(v125[1] + 24);
            unsigned int v164 = bswap32(v163);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v163 = v164;
            }
            LODWORD(v299) = v163;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v162 + 64), (const char *)&v299, 4uLL);
            uint64_t v165 = *v125;
            LODWORD(v299) = 0;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v165 + 64), (const char *)&v299, 4uLL);
            unsigned int v166 = *((_DWORD *)v125 + 4);
            uint64_t v167 = *v125;
            unsigned int v168 = bswap32(v166);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v166 = v168;
            }
            LODWORD(v299) = v166;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v167 + 64), (const char *)&v299, 4uLL);
            if (*((int *)v125 + 7) < 90) {
              goto LABEL_238;
            }
            uint64_t v169 = *v125;
            LODWORD(v299) = 0;
            uint64_t v160 = *(llvm::raw_ostream **)(v169 + 64);
          }
          else
          {
            sub_1CCB09460(v156, (const char *)v305, (size_t)v306);
            uint64_t v157 = *v125;
            unsigned int v158 = *(_DWORD *)(v125[1] + 24);
            unsigned int v159 = bswap32(v158);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v158 = v159;
            }
            LODWORD(v299) = v158;
            uint64_t v160 = *(llvm::raw_ostream **)(v157 + 64);
          }
          llvm::raw_ostream::write(v160, (const char *)&v299, 4uLL);
LABEL_238:
          uint64_t v170 = *v125;
          if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
            int v171 = 16641;
          }
          else {
            int v171 = 21037056;
          }
          LODWORD(v299) = v171;
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v170 + 64), (const char *)&v299, 4uLL);
          if (*((int *)v125 + 7) > 79)
          {
            uint64_t v177 = *v125;
            if ((*(_DWORD *)(*v125 + 56) - 1) < 2) {
              int v178 = 1;
            }
            else {
              int v178 = 0x1000000;
            }
            LODWORD(v299) = v178;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v177 + 64), (const char *)&v299, 4uLL);
            unsigned int v179 = 2 - 252645135 * ((unint64_t)(v125[8] - v125[7]) >> 3);
            uint64_t v180 = *v125;
            unsigned int v181 = bswap32(v179);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v179 = v181;
            }
            LODWORD(v299) = v179;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v180 + 64), (const char *)&v299, 4uLL);
          }
          else
          {
            unsigned int v172 = 2 - 252645135 * ((unint64_t)(v125[8] - v125[7]) >> 3);
            uint64_t v173 = *v125;
            unsigned int v174 = bswap32(v172);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v172 = v174;
            }
            LODWORD(v299) = v172;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v173 + 64), (const char *)&v299, 4uLL);
            int v175 = -252645135 * ((unint64_t)(v125[8] - v125[7]) >> 3) + 2;
            if (-252645135 * ((unint64_t)(v125[8] - v125[7]) >> 3) != -2)
            {
              do
              {
                uint64_t v176 = *v125;
                LODWORD(v299) = 0;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v176 + 64), (const char *)&v299, 4uLL);
                --v175;
              }
              while (v175);
            }
          }
          int v182 = *((_DWORD *)v125 + 26);
          if (v182)
          {
            uint64_t v183 = *v125;
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              int v184 = 17153;
            }
            else {
              int v184 = 21168128;
            }
            LODWORD(v299) = v184;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v183 + 64), (const char *)&v299, 4uLL);
            unsigned int v185 = (2 * v182) | 1;
            uint64_t v186 = *v125;
            unsigned int v187 = bswap32(v185);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v185 = v187;
            }
            LODWORD(v299) = v185;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v186 + 64), (const char *)&v299, 4uLL);
            unsigned int v188 = *((_DWORD *)v125 + 22);
            uint64_t v189 = *v125;
            unsigned int v190 = bswap32(v188);
            if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
              unsigned int v188 = v190;
            }
            LODWORD(v299) = v188;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(v189 + 64), (const char *)&v299, 4uLL);
            uint64_t v191 = *((unsigned int *)v125 + 26);
            if (v191)
            {
              BOOL v192 = (_DWORD *)v125[12];
              uint64_t v193 = &v192[4 * v191];
              do
              {
                unsigned int v194 = *(_DWORD *)(*(void *)v192 + 8);
                uint64_t v195 = *v125;
                unsigned int v196 = bswap32(v194);
                if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                  unsigned int v194 = v196;
                }
                LODWORD(v299) = v194;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v195 + 64), (const char *)&v299, 4uLL);
                unsigned int v197 = v192[2];
                uint64_t v198 = *v125;
                unsigned int v199 = bswap32(v197);
                if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                  unsigned int v197 = v199;
                }
                LODWORD(v299) = v197;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v198 + 64), (const char *)&v299, 4uLL);
                v192 += 4;
              }
              while (v192 != v193);
            }
          }
          uint64_t v200 = v125[7];
          uint64_t v201 = v125[8];
          if (v200 != v201)
          {
            do
            {
              if (*(_DWORD *)(v200 + 32))
              {
                uint64_t v202 = *v125;
                if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                  int v203 = 17153;
                }
                else {
                  int v203 = 21168128;
                }
                LODWORD(v299) = v203;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v202 + 64), (const char *)&v299, 4uLL);
                unsigned int v204 = (2 * *(_DWORD *)(v200 + 32)) | 1;
                uint64_t v205 = *v125;
                unsigned int v206 = bswap32(v204);
                if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                  unsigned int v204 = v206;
                }
                LODWORD(v299) = v204;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v205 + 64), (const char *)&v299, 4uLL);
                unsigned int v207 = *(_DWORD *)(v200 + 16);
                uint64_t v208 = *v125;
                unsigned int v209 = bswap32(v207);
                if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                  unsigned int v207 = v209;
                }
                LODWORD(v299) = v207;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v208 + 64), (const char *)&v299, 4uLL);
                uint64_t v210 = *(unsigned int *)(v200 + 32);
                if (v210)
                {
                  unsigned int v211 = *(_DWORD **)(v200 + 24);
                  int v212 = &v211[4 * v210];
                  do
                  {
                    unsigned int v213 = *(_DWORD *)(*(void *)v211 + 8);
                    uint64_t v214 = *v125;
                    unsigned int v215 = bswap32(v213);
                    if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                      unsigned int v213 = v215;
                    }
                    LODWORD(v299) = v213;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v214 + 64), (const char *)&v299, 4uLL);
                    unsigned int v216 = v211[2];
                    uint64_t v217 = *v125;
                    unsigned int v218 = bswap32(v216);
                    if ((*(_DWORD *)(*v125 + 56) - 1) >= 2) {
                      unsigned int v216 = v218;
                    }
                    LODWORD(v299) = v216;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v217 + 64), (const char *)&v299, 4uLL);
                    v211 += 4;
                  }
                  while (v211 != v212);
                }
              }
              v200 += 136;
            }
            while (v200 != v201);
            uint64_t v220 = v125[7];
            for (uint64_t j = v125[8]; v220 != j; v220 += 136)
            {
              unint64_t v299 = (std::string *)((char *)&v300 + 8);
              *(void *)&long long v300 = 0x2000000000;
              uint64_t v221 = *(unsigned int *)(v220 + 112);
              if (v221)
              {
                for (char k = *(std::string::size_type **)(v220 + 104); !*k || *k == -8; ++k)
                  ;
              }
              else
              {
                char k = *(std::string::size_type **)(v220 + 104);
              }
              uint64_t v224 = *(void *)(v220 + 104) + 8 * v221;
              if (k == (std::string::size_type *)v224)
              {
                unsigned int v227 = 3;
              }
              else
              {
                unsigned int v225 = 0;
                std::string::size_type v226 = *k;
                unsigned int v227 = 3;
                do
                {
                  char v228 = *(unsigned char *)(v226 + 39);
                  int v229 = v228;
                  unint64_t v230 = v228 & 0x7C;
                  if (v229 >= 0) {
                    unint64_t v231 = v230;
                  }
                  else {
                    unint64_t v231 = *(void *)(v226 + 24);
                  }
                  if (v225 >= DWORD1(v300)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v227 += *(_DWORD *)(v226 + 48) + (v231 >> 2) + 3;
                  v299->__r_.__value_.__r.__words[v225] = v226;
                  unsigned int v225 = v300 + 1;
                  LODWORD(v300) = v300 + 1;
                  do
                  {
                    std::string::size_type v232 = k[1];
                    ++k;
                    std::string::size_type v226 = v232;
                    if (v232) {
                      BOOL v233 = v226 == -8;
                    }
                    else {
                      BOOL v233 = 1;
                    }
                  }
                  while (v233);
                }
                while (k != (std::string::size_type *)v224);
              }
              uint64_t v234 = *(void *)(v220 + 8);
              if ((*(_DWORD *)(v234 + 56) - 1) >= 2) {
                int v235 = 17665;
              }
              else {
                int v235 = 21299200;
              }
              LODWORD(v290.__r_.__value_.__l.__data_) = v235;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v234 + 64), (const char *)&v290, 4uLL);
              uint64_t v236 = *(void *)(v220 + 8);
              unsigned int v237 = bswap32(v227);
              if ((*(_DWORD *)(v236 + 56) - 1) >= 2) {
                unsigned int v238 = v237;
              }
              else {
                unsigned int v238 = v227;
              }
              LODWORD(v290.__r_.__value_.__l.__data_) = v238;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v236 + 64), (const char *)&v290, 4uLL);
              unsigned int v239 = *(_DWORD *)(v220 + 16);
              uint64_t v240 = *(void *)(v220 + 8);
              unsigned int v241 = bswap32(v239);
              if ((*(_DWORD *)(v240 + 56) - 1) >= 2) {
                unsigned int v239 = v241;
              }
              LODWORD(v290.__r_.__value_.__l.__data_) = v239;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v240 + 64), (const char *)&v290, 4uLL);
              unint64_t v242 = 126 - 2 * __clz(v300);
              if (v300) {
                uint64_t v243 = (char *)v242;
              }
              else {
                uint64_t v243 = 0;
              }
              sub_1CCB0B3E8((size_t **)v299, (size_t **)&v299->__r_.__value_.__l.__data_ + v300, v243, 1);
              if (v300)
              {
                unsigned int v244 = v299;
                uint64_t v245 = &v299->__r_.__value_.__s.__data_[8 * v300];
                do
                {
                  std::string::size_type v246 = v244->__r_.__value_.__r.__words[0];
                  uint64_t v247 = *(void *)(v244->__r_.__value_.__r.__words[0] + 8);
                  LODWORD(v290.__r_.__value_.__l.__data_) = 0;
                  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v247 + 64), (const char *)&v290, 4uLL);
                  char v248 = *(unsigned char *)(v246 + 39);
                  int v249 = v248;
                  if (v248 >= 0) {
                    uint64_t v250 = (const char *)(v246 + 16);
                  }
                  else {
                    uint64_t v250 = *(const char **)(v246 + 16);
                  }
                  size_t v251 = v248 & 0x7F;
                  if (v249 >= 0) {
                    size_t v252 = v251;
                  }
                  else {
                    size_t v252 = *(void *)(v246 + 24);
                  }
                  sub_1CCB09460(*(void *)(v246 + 8), v250, v252);
                  uint64_t v253 = *(unsigned int *)(v246 + 48);
                  if (v253)
                  {
                    uint64_t v254 = 0;
                    uint64_t v255 = 4 * v253;
                    do
                    {
                      unsigned int v256 = *(_DWORD *)(*(void *)(v246 + 40) + v254);
                      uint64_t v257 = *(void *)(v246 + 8);
                      unsigned int v258 = bswap32(v256);
                      if ((*(_DWORD *)(v257 + 56) - 1) >= 2) {
                        unsigned int v256 = v258;
                      }
                      LODWORD(v290.__r_.__value_.__l.__data_) = v256;
                      llvm::raw_ostream::write(*(llvm::raw_ostream **)(v257 + 64), (const char *)&v290, 4uLL);
                      v254 += 4;
                    }
                    while (v255 != v254);
                  }
                  unsigned int v244 = (std::string *)((char *)v244 + 8);
                }
                while (v244 != (std::string *)v245);
              }
              uint64_t v259 = *(void *)(v220 + 8);
              LODWORD(v290.__r_.__value_.__l.__data_) = 0;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v259 + 64), (const char *)&v290, 4uLL);
              uint64_t v260 = *(void *)(v220 + 8);
              LODWORD(v290.__r_.__value_.__l.__data_) = 0;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v260 + 64), (const char *)&v290, 4uLL);
              if (v299 != (std::string *)((char *)&v300 + 8)) {
                free(v299);
              }
            }
          }
          if (v305 != (unsigned __int8 *)&v307) {
            free(v305);
          }
          uint64_t v124 = (llvm::BasicBlock *)((char *)v288 + 8);
          if ((llvm::BasicBlock *)((char *)v288 + 8) == v286) {
            goto LABEL_341;
          }
        }
      }
    }
    else
    {
      sub_1CCB09460(v281, "", 0);
    }
    LODWORD(v299) = 0;
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v281 + 64), (const char *)&v299, 4uLL);
    goto LABEL_192;
  }
  return result;
}

void *sub_1CCB0861C(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void sub_1CCB086FC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        llvm::Regex::~Regex((llvm::Regex *)(v4 - 16));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCB08780(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1CFAC3020;
  unint64_t v4 = a2;
  if (*a2 == 15 || (unint64_t v4 = *(unsigned __int8 **)&a2[-8 * *((unsigned int *)a2 + 2)]) != 0)
  {
    uint64_t v5 = *(void *)&v4[-8 * *((unsigned int *)v4 + 2)];
    if (v5)
    {
      uint64_t v6 = *(void **)(v5 + 8);
      size_t v9 = *v6;
      int v8 = (const char *)(v6 + 3);
      size_t v7 = v9;
    }
    else
    {
      size_t v7 = 0;
      int v8 = 0;
    }
  }
  else
  {
    size_t v7 = 0;
    int v8 = "";
  }
  __int16 v30 = 261;
  unsigned int v28 = v8;
  size_t v29 = v7;
  if (llvm::sys::fs::access((unsigned __int8 *)&v28, 0))
  {
    int v10 = *v2;
    uint64_t v11 = v2;
    if (v10 == 15 || (v12 = *((unsigned int *)v2 + 2), (uint64_t v11 = *(unsigned __int8 **)&v2[-8 * v12]) != 0))
    {
      size_t v13 = *(void *)&v11[-8 * *((unsigned int *)v11 + 2) + 8];
      if (v13)
      {
        uint64_t v14 = *(void **)(v13 + 8);
        size_t v16 = *v14;
        uint64_t v15 = (const char *)(v14 + 3);
        size_t v13 = v16;
      }
      else
      {
        uint64_t v15 = 0;
      }
      __int16 v30 = 261;
      unsigned int v28 = v15;
      size_t v29 = v13;
      if (v10 == 15) {
        goto LABEL_13;
      }
      uint64_t v17 = -(uint64_t)*((unsigned int *)v2 + 2);
    }
    else
    {
      uint64_t v17 = -v12;
      __int16 v30 = 261;
      unsigned int v28 = "";
      size_t v29 = 0;
    }
    uint64_t v2 = *(unsigned __int8 **)&v2[8 * v17];
    if (!v2)
    {
      unsigned int v18 = 0;
      int v20 = "";
LABEL_15:
      __int16 v27 = 261;
      v26[0] = v20;
      v26[1] = v18;
      __int16 v25 = 257;
      unsigned char v23[16] = 257;
      llvm::sys::path::append((void *)a1, 0, &v28, v26, (uint64_t)v24, (uint64_t)v23);
      return;
    }
LABEL_13:
    unsigned int v18 = *(void **)&v2[-8 * *((unsigned int *)v2 + 2)];
    if (v18)
    {
      uint64_t v19 = (void *)v18[1];
      unsigned int v21 = (void *)*v19;
      int v20 = (const char *)(v19 + 3);
      unsigned int v18 = v21;
    }
    else
    {
      int v20 = 0;
    }
    goto LABEL_15;
  }
  *(void *)(a1 + 8) = 0;
  if (*(void *)(a1 + 16) < v7) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v22 = 0;
  if (v7)
  {
    memcpy(*(void **)a1, v8, v7);
    uint64_t v22 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v22 + v7;
}

uint64_t *sub_1CCB08980(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 316))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 312);
      if (v3)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 8 * v3;
        do
        {
          uint64_t v6 = *(void *)(*(void *)(v2 + 304) + v4);
          if (v6 != -8 && v6 != 0)
          {
            int v8 = *(void **)(v6 + 40);
            if (v8 != (void *)(v6 + 56)) {
              free(v8);
            }
            if (*(char *)(v6 + 39) < 0) {
              operator delete(*(void **)(v6 + 16));
            }
            MEMORY[0x1D25D9CD0](v6, 8);
          }
          v4 += 8;
        }
        while (v5 != v4);
      }
    }
    free(*(void **)(v2 + 304));
    size_t v9 = *(void **)(v2 + 224);
    if (v9 != (void *)(v2 + 240)) {
      free(v9);
    }
    if (*(_DWORD *)(v2 + 188))
    {
      uint64_t v10 = *(unsigned int *)(v2 + 184);
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = *(void *)(*(void *)(v2 + 176) + v11);
          if (v13 != -8 && v13 != 0)
          {
            uint64_t v15 = *(void **)(v13 + 40);
            if (v15 != (void *)(v13 + 56)) {
              free(v15);
            }
            if (*(char *)(v13 + 39) < 0) {
              operator delete(*(void **)(v13 + 16));
            }
            MEMORY[0x1D25D9CD0](v13, 8);
          }
          v11 += 8;
        }
        while (v12 != v11);
      }
    }
    free(*(void **)(v2 + 176));
    size_t v16 = *(void **)(v2 + 96);
    if (v16 != (void *)(v2 + 112)) {
      free(v16);
    }
    uint64_t v17 = *(void *)(v2 + 56);
    if (v17)
    {
      uint64_t v18 = *(void *)(v2 + 64);
      uint64_t v19 = *(void **)(v2 + 56);
      if (v18 != v17)
      {
        do
        {
          if (*(_DWORD *)(v18 - 20))
          {
            uint64_t v20 = *(unsigned int *)(v18 - 24);
            if (v20)
            {
              uint64_t v21 = 0;
              uint64_t v22 = 8 * v20;
              do
              {
                uint64_t v23 = *(void *)(*(void *)(v18 - 32) + v21);
                if (v23 != -8 && v23 != 0)
                {
                  __int16 v25 = *(void **)(v23 + 40);
                  if (v25 != (void *)(v23 + 56)) {
                    free(v25);
                  }
                  if (*(char *)(v23 + 39) < 0) {
                    operator delete(*(void **)(v23 + 16));
                  }
                  MEMORY[0x1D25D9CD0](v23, 8);
                }
                v21 += 8;
              }
              while (v22 != v21);
            }
          }
          free(*(void **)(v18 - 32));
          unsigned int v26 = *(void **)(v18 - 112);
          if (v26 != (void *)(v18 - 96)) {
            free(v26);
          }
          v18 -= 136;
        }
        while (v18 != v17);
        uint64_t v19 = *(void **)(v2 + 56);
      }
      *(void *)(v2 + 64) = v17;
      operator delete(v19);
    }
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 32), 8);
    MEMORY[0x1D25D9CE0](v2, 0x10E0C400A7081E3);
  }
  return a1;
}

uint64_t sub_1CCB08BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    uint64_t v9 = *(void *)(a1 + 64);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 56) + 136 * *((unsigned int *)v5 + 2);
  }
  return v9 + 8;
}

void *sub_1CCB08C34(uint64_t *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 26);
  if (!v5)
  {
    *((_DWORD *)a1 + 27) = 0;
    *((_DWORD *)a1 + 28) = 0;
    size_t v29 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v29) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v29[16] = 2;
    a1[12] = (uint64_t)v29;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 26) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    int v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = a1[12];
  unsigned int v11 = v5 - 1;
  uint64_t v12 = v10 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    uint64_t v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 29), __n)))
    {
      goto LABEL_20;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  uint64_t v17 = *(void **)(v10 + 8 * v16);
LABEL_20:
  if (v17 == (void *)-8)
  {
    --*((_DWORD *)a1 + 28);
  }
  else if (v17)
  {
    return v17 + 1;
  }
  uint64_t v19 = (char *)operator new(__n + 185, (std::align_val_t)8uLL);
  uint64_t v20 = v19;
  if (__n)
  {
    memcpy(v19 + 184, a2, __n);
    v20[__n + 184] = 0;
    uint64_t v21 = *a1;
    *(void *)uint64_t v20 = __n;
    *((void *)v20 + 1) = v21;
    if (__n >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__n >= 0x17)
    {
      size_t v24 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__n | 7) != 0x17) {
        size_t v24 = __n | 7;
      }
      size_t v25 = v24 + 1;
      uint64_t v22 = operator new(v24 + 1);
      *((void *)v20 + 3) = __n;
      *((void *)v20 + 4) = v25 | 0x8000000000000000;
      *((void *)v20 + 2) = v22;
    }
    else
    {
      uint64_t v22 = v20 + 16;
      v20[39] = __n;
    }
    memmove(v22, a2, __n);
  }
  else
  {
    v19[184] = 0;
    uint64_t v23 = *a1;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = v23;
    uint64_t v22 = v19 + 16;
    v19[39] = 0;
  }
  *((unsigned char *)v22 + __n) = 0;
  *((void *)v20 + 5) = v20 + 56;
  *((void *)v20 + 6) = 0x2000000000;
  *(void *)(v10 + 8 * v16) = v20;
  ++*((_DWORD *)a1 + 27);
  for (uint64_t i = (void **)(a1[12]
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 12), v16)); ; ++i)
  {
    uint64_t v17 = *i;
    if (*i && v17 + 1 != 0) {
      break;
    }
  }
  return v17 + 1;
}

void sub_1CCB08ED0(void *a1, llvm::Module *this, uint64_t a3, int a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = "llvm.gcov";
  v64[4] = 259;
  NamedMetaunsigned int data = llvm::Module::getNamedMetadata(this, (const char **)&v62);
  if (NamedMetadata)
  {
    int v8 = *(uint64_t **)(NamedMetadata + 48);
    uint64_t v9 = *((unsigned int *)v8 + 2);
    if (v9)
    {
      uint64_t v10 = *v8;
      do
      {
        uint64_t v11 = *(unsigned int *)(*(void *)v10 + 8);
        if (v11 == 3)
        {
          uint64_t v12 = 2;
        }
        else
        {
          if (v11 != 2) {
            goto LABEL_15;
          }
          uint64_t v12 = 1;
        }
        int v13 = (unsigned __int8 **)(*(void *)v10 - 8 * v11);
        int v14 = v13[v12];
        switch(*v14)
        {
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
            break;
          default:
            int v14 = 0;
            break;
        }
        if (v14 == (unsigned __int8 *)a3)
        {
          if (v11 == 3)
          {
            if (!(**v13 | *v13[1]))
            {
              if (a4) {
                size_t v25 = v13[1];
              }
              else {
                size_t v25 = *v13;
              }
              unsigned int v26 = (unint64_t *)*((void *)v25 + 1);
              unint64_t v29 = *v26;
              unsigned int v28 = v26 + 3;
              size_t v27 = v29;
              if (v29 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_74;
              }
              if (v27 >= 0x17)
              {
                uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v27 | 7) != 0x17) {
                  uint64_t v30 = v27 | 7;
                }
                uint64_t v31 = v30 + 1;
                uint64_t v32 = operator new(v30 + 1);
                a1[1] = v27;
                a1[2] = v31 | 0x8000000000000000;
                *a1 = v32;
                a1 = v32;
              }
              else
              {
                *((unsigned char *)a1 + 23) = v27;
                if (!v27)
                {
LABEL_40:
                  *((unsigned char *)a1 + v27) = 0;
                  return;
                }
              }
              memmove(a1, v28, v27);
              goto LABEL_40;
            }
          }
          else if (!**v13)
          {
            uint64_t v36 = (unint64_t *)*((void *)*v13 + 1);
            unint64_t v39 = *v36;
            uint64_t v38 = v36 + 3;
            size_t v37 = v39;
            uint64_t v62 = (char *)v64;
            long long v63 = xmmword_1CFAC3020;
            if (v39 >= 0x81) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            uint64_t v40 = 0;
            if (v37)
            {
              memcpy(v62, v38, v37);
              uint64_t v40 = v63;
            }
            size_t v41 = v40 + v37;
            uint64_t v42 = "gcda";
            *(void *)&long long v63 = v41;
            if (!a4) {
              uint64_t v42 = "gcno";
            }
            char v43 = 1;
            BYTE1(v60) = 1;
            if (*v42)
            {
              int v57 = v42;
              char v43 = 3;
            }
            LOBYTE(v60) = v43;
            llvm::sys::path::replace_extension((unsigned __int8 **)&v62, (void **)&v57, 0);
            size_t v44 = v63;
            if ((unint64_t)v63 <= 0x7FFFFFFFFFFFFFF7)
            {
              __int16 v45 = (unsigned __int8 *)v62;
              if ((unint64_t)v63 >= 0x17)
              {
                uint64_t v46 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                if (((unint64_t)v63 | 7) != 0x17) {
                  uint64_t v46 = v63 | 7;
                }
                uint64_t v47 = v46 + 1;
                int v48 = operator new(v46 + 1);
                a1[1] = v44;
                a1[2] = v47 | 0x8000000000000000;
                *a1 = v48;
                a1 = v48;
              }
              else
              {
                *((unsigned char *)a1 + 23) = v63;
                if (!v44)
                {
LABEL_70:
                  *((unsigned char *)a1 + v44) = 0;
                  goto LABEL_52;
                }
              }
              memmove(a1, v45, v44);
              goto LABEL_70;
            }
LABEL_74:
            abort();
          }
        }
LABEL_15:
        v10 += 8;
        --v9;
      }
      while (v9);
    }
  }
  if ((*(unsigned char *)a3 == 15 || (a3 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8))) != 0)
    && (uint64_t v15 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8))) != 0)
  {
    uint64_t v16 = *(unint64_t **)(v15 + 8);
    unint64_t v19 = *v16;
    uint64_t v18 = v16 + 3;
    size_t v17 = v19;
    uint64_t v62 = (char *)v64;
    long long v63 = xmmword_1CFAC3020;
    if (v19 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v20 = 0;
    if (v17)
    {
      memcpy(v64, v18, v17);
      uint64_t v20 = v63;
    }
    else
    {
      size_t v17 = 0;
    }
  }
  else
  {
    size_t v17 = 0;
    uint64_t v20 = 0;
    uint64_t v62 = (char *)v64;
    *((void *)&v63 + 1) = 128;
  }
  uint64_t v21 = "gcda";
  *(void *)&long long v63 = v20 + v17;
  if (!a4) {
    uint64_t v21 = "gcno";
  }
  char v22 = 1;
  BYTE1(v60) = 1;
  if (*v21)
  {
    int v57 = v21;
    char v22 = 3;
  }
  LOBYTE(v60) = v22;
  llvm::sys::path::replace_extension((unsigned __int8 **)&v62, (void **)&v57, 0);
  size_t v59 = 0;
  int v57 = v62;
  long long v58 = (unint64_t)v63;
  uint64_t v60 = v63;
  int v61 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)&v57);
  size_t v24 = (const char *)*((void *)&v58 + 1);
  size_t v23 = v59;
  int v57 = &v59;
  long long v58 = xmmword_1CFAC3020;
  if (llvm::sys::fs::current_path((uint64_t)&v57))
  {
    if (v23 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_74;
    }
  }
  else
  {
    __int16 v56 = 261;
    v55[0] = v24;
    v55[1] = (const char *)v23;
    __int16 v54 = 257;
    __int16 v52 = 257;
    __int16 v50 = 257;
    llvm::sys::path::append(&v57, 0, v55, &v53, (uint64_t)v51, (uint64_t)v49);
    size_t v23 = v58;
    if ((unint64_t)v58 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_74;
    }
    size_t v24 = (const char *)v57;
  }
  if (v23 >= 0x17)
  {
    uint64_t v33 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v33 = v23 | 7;
    }
    uint64_t v34 = v33 + 1;
    long long v35 = operator new(v33 + 1);
    a1[1] = v23;
    a1[2] = v34 | 0x8000000000000000;
    *a1 = v35;
    a1 = v35;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v23;
    if (!v23) {
      goto LABEL_50;
    }
  }
  memmove(a1, v24, v23);
LABEL_50:
  *((unsigned char *)a1 + v23) = 0;
  if (v57 != &v59) {
    free(v57);
  }
LABEL_52:
  if (v62 != (char *)v64) {
    free(v62);
  }
}

llvm::raw_ostream *sub_1CCB09460(uint64_t a1, const char *a2, size_t a3)
{
  unsigned int v6 = bswap32((a3 >> 2) + 1);
  if ((*(_DWORD *)(a1 + 56) - 1) < 2) {
    unsigned int v7 = (a3 >> 2) + 1;
  }
  else {
    unsigned int v7 = v6;
  }
  *(_DWORD *)uint64_t v9 = v7;
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), v9, 4uLL);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), "", 4 - (a3 & 3));
}

void sub_1CCB094F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 32;
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  sub_1CCB09764((uint64_t)v9, a1 + 32, &v7);
  int v5 = v10;
  if (v8) {
    MEMORY[0x1D25D9CE0](v8, 0x1020C40EDED9539);
  }
  if (v5) {
    operator new();
  }
  uint64_t v7 = a3;
  uint64_t v8 = 0;
  sub_1CCB09764((uint64_t)v9, v4, &v7);
  int v6 = v10;
  if (v8) {
    MEMORY[0x1D25D9CE0](v8, 0x1020C40EDED9539);
  }
  if (v6) {
    operator new();
  }
  operator new();
}

uint64_t sub_1CCB09764(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v13 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  uint64_t v7 = v13;
  if (result)
  {
    char v8 = 0;
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_10;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    sub_1CCB09874(a2, v10);
    int v13 = 0;
    uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
    uint64_t v7 = v13;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v7 = *a3;
  uint64_t v11 = a3[1];
  a3[1] = 0;
  v7[1] = v11;
  char v8 = 1;
LABEL_8:
  uint64_t v12 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

void *sub_1CCB09874(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      int v13 = (uint64_t *)(v4 + 8);
      do
      {
        uint64_t v14 = *(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v20 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          uint64_t v15 = v20;
          *uint64_t v20 = v14;
          uint64_t v16 = *v13;
          *int v13 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v17 = *v13;
          *int v13 = 0;
          if (v17) {
            MEMORY[0x1D25D9CE0](v17, 0x1020C40EDED9539);
          }
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 16 * v18;
    do
    {
      void *result = -4096;
      result += 2;
      v19 -= 16;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1CCB099E8(uint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(void *)(v7 + 16) > *(void *)(*(void *)result + 16))
      {
        *(void *)uint64_t result = v7;
        *((void *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)result != a2)
      {
        uint64_t v15 = (uint64_t *)(result + 8);
        if ((char *)(result + 8) != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (uint64_t *)result;
          do
          {
            uint64_t v18 = *v17;
            uint64_t v17 = v15;
            uint64_t v19 = *v15;
            if (*(void *)(*v15 + 16) > *(void *)(v18 + 16))
            {
              uint64_t v20 = 0;
              *uint64_t v15 = 0;
              for (uint64_t i = v16; ; i -= 8)
              {
                char v22 = (uint64_t *)((char *)v6 + i);
                uint64_t *v22 = 0;
                v22[1] = v18;
                if (v20) {
                  MEMORY[0x1D25D9CE0](v20, 0x1060C40E80B6244);
                }
                if (!i) {
                  break;
                }
                size_t v23 = (uint64_t *)((char *)v6 + i);
                uint64_t v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(void *)(v19 + 16) <= *(void *)(v18 + 16)) {
                  goto LABEL_22;
                }
                uint64_t v20 = *v22;
              }
              size_t v23 = v6;
LABEL_22:
              uint64_t result = *v23;
              *size_t v23 = v19;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
              }
            }
            uint64_t v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != (uint64_t *)a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a4;
      unint64_t v12 = a3 >> 1;
      uint64_t v13 = result + 8 * (a3 >> 1);
      unint64_t v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCB09D20(result, v13, v14, a4);
        size_t v24 = &v11[v12];
        uint64_t result = sub_1CCB09D20((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v24);
        size_t v25 = &v11[a3];
        unsigned int v26 = v24;
        size_t v27 = v11;
        while (v26 != v25)
        {
          uint64_t v28 = *v26;
          uint64_t v29 = *v27;
          if (*(void *)(*v26 + 16) <= *(void *)(*v27 + 16))
          {
            *size_t v27 = 0;
            uint64_t result = *v6;
            *unint64_t v6 = v29;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v27;
          }
          else
          {
            *unsigned int v26 = 0;
            uint64_t result = *v6;
            *unint64_t v6 = v28;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = v26[v30];
                v26[v30] = 0;
                uint64_t result = v6[v30];
                v6[v30] = v31;
                if (result) {
                  uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
                }
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_47;
          }
        }
        if (v27 != v24)
        {
          uint64_t v32 = 0;
          do
          {
            uint64_t v33 = v27[v32];
            v27[v32] = 0;
            uint64_t result = v6[v32];
            v6[v32] = v33;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_47:
        if (v11)
        {
          unint64_t v34 = a3;
          do
          {
            uint64_t result = *v11;
            *uint64_t v11 = 0;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1CCB099E8(result, v13, v14, a4, a5);
        sub_1CCB099E8(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_1CCB09F64((uint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB09D20(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      uint64_t v13 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *uint64_t v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(void *)(a2 - 8);
      unint64_t v9 = *(void *)(v8 + 16);
      unint64_t v10 = *(void *)(*(void *)result + 16);
      BOOL v11 = v9 > v10;
      if (v9 <= v10) {
        unint64_t v12 = (void *)result;
      }
      else {
        unint64_t v12 = (void *)(a2 - 8);
      }
      if (!v11) {
        uint64_t v8 = *(void *)result;
      }
      *unint64_t v12 = 0;
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (!v11) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = result + 8 * (a3 >> 1);
      sub_1CCB099E8(result, v27, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CCB099E8(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        uint64_t v29 = *(void *)v28;
        uint64_t v30 = *(void *)v6;
        if (*(void *)(*(void *)v28 + 16) <= *(void *)(*(void *)v6 + 16))
        {
          *(void *)uint64_t v6 = 0;
          v6 += 8;
          uint64_t v29 = v30;
        }
        else
        {
          *(void *)unint64_t v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            unint64_t v31 = 0;
            do
            {
              uint64_t v32 = *(void *)(v28 + v31);
              *(void *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        unint64_t v33 = 0;
        do
        {
          uint64_t v34 = *(void *)(v6 + v33);
          *(void *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(void *)uint64_t result = 0;
      uint64_t v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a4;
        do
        {
          uint64_t v18 = v17;
          uint64_t v20 = *v17++;
          uint64_t v19 = v20;
          uint64_t v21 = *(void *)v15;
          if (*(void *)(*(void *)v15 + 16) <= *(void *)(v20 + 16))
          {
            *(void *)uint64_t v15 = 0;
            *uint64_t v17 = v21;
          }
          else
          {
            uint64_t *v18 = 0;
            v18[1] = v19;
            char v22 = v4;
            if (v18 != v4)
            {
              uint64_t v23 = v16;
              while (1)
              {
                char v22 = (uint64_t *)((char *)v4 + v23);
                uint64_t v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(void *)(*(void *)v15 + 16) <= *(void *)(v24 + 16)) {
                  break;
                }
                uint64_t v25 = *v22;
                *(v22 - 1) = 0;
                uint64_t *v22 = v24;
                if (v25) {
                  MEMORY[0x1D25D9CE0](v25, 0x1060C40E80B6244);
                }
                v23 -= 8;
                if (!v23)
                {
                  char v22 = v4;
                  break;
                }
              }
            }
            uint64_t v26 = *(void *)v15;
            *(void *)uint64_t v15 = 0;
            uint64_t result = *v22;
            uint64_t *v22 = v26;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB09F64(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    BOOL v11 = (char *)result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = *(void *)&v11[v12];
        if (*(void *)(*(void *)a2 + 16) > *(void *)(v14 + 16)) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v62 = a3;
      long long v63 = a6;
      uint64_t v64 = a7;
      int v61 = &v11[v12];
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          *(void *)&v11[v12] = *(void *)a2;
          *(void *)a2 = v14;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v25 = -v13;
        }
        else {
          uint64_t v25 = 1 - v13;
        }
        uint64_t v26 = v25 >> 1;
        uint64_t v20 = &v11[8 * (v25 >> 1) + v12];
        uint64_t v18 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = (a3 - a2) >> 3;
          uint64_t v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v18[8 * (v27 >> 1)];
            uint64_t v31 = *(void *)v29;
            uint64_t v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(void *)(v31 + 16) > *(void *)(*(void *)v20 + 16)) {
              uint64_t v18 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v16 = v8;
        }
        else {
          uint64_t v16 = v8 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = &a2[8 * (v16 >> 1)];
        if (&v11[v12] == a2)
        {
          uint64_t v20 = a2;
        }
        else
        {
          unint64_t v19 = (a2 - v11 - v12) >> 3;
          uint64_t v20 = &v11[v12];
          do
          {
            unint64_t v21 = v19 >> 1;
            char v22 = &v20[8 * (v19 >> 1)];
            uint64_t v24 = *(void *)v22;
            uint64_t v23 = v22 + 8;
            v19 += ~(v19 >> 1);
            if (*(void *)(*(void *)v18 + 16) > *(void *)(v24 + 16)) {
              unint64_t v19 = v21;
            }
            else {
              uint64_t v20 = v23;
            }
          }
          while (v19);
        }
        uint64_t v26 = (v20 - v11 - v12) >> 3;
      }
      a4 = -(v26 + v13);
      uint64_t v32 = v8 - v17;
      unint64_t v33 = a2;
      uint64_t v34 = v17;
      long long v35 = (char *)sub_1CCB0A41C(v20, v33, v18);
      uint64_t v36 = v34;
      size_t v37 = v35;
      if (v26 + v36 >= v8 - (v26 + v36) - v13)
      {
        uint64_t v39 = v36;
        uint64_t result = sub_1CCB09F64(v35, v18, v62, -(v26 + v13), v32, v63, v64);
        uint64_t v18 = v20;
        a6 = v63;
        uint64_t v32 = v39;
        a4 = v26;
        a3 = v37;
        BOOL v11 = v61;
      }
      else
      {
        uint64_t v38 = v20;
        a6 = v63;
        uint64_t result = sub_1CCB09F64(&v11[v12], v38, v35, v26, v36, v63, v64);
        BOOL v11 = v37;
        a3 = v62;
      }
      uint64_t v8 = v32;
      a2 = v18;
      a7 = v64;
      if (!v32) {
        return result;
      }
    }
    if (a4 > v8)
    {
      if (a2 == a3) {
        return result;
      }
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      do
      {
        uint64_t v42 = *(void *)&a2[v40];
        *(void *)&a2[v40] = 0;
        a6[v40 / 8] = v42;
        ++v41;
        v40 += 8;
      }
      while (&a2[v40] != a3);
      if (!v40) {
        goto LABEL_81;
      }
      char v43 = &a6[v40 / 8];
      size_t v44 = (uint64_t *)(a3 - 8);
      while (1)
      {
        if (a2 == v11)
        {
          if (v43 != a6)
          {
            uint64_t v57 = 0;
            do
            {
              uint64_t v58 = v43[v57 - 1];
              v43[v57 - 1] = 0;
              uint64_t result = v44[v57];
              v44[v57] = v58;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
              }
              --v57;
            }
            while (&v43[v57] != a6);
          }
          goto LABEL_81;
        }
        uint64_t v46 = a2 - 8;
        uint64_t v45 = *((void *)a2 - 1);
        uint64_t v47 = *(v43 - 1);
        if (*(void *)(v47 + 16) > *(void *)(v45 + 16)) {
          break;
        }
        *(v43 - 1) = 0;
        uint64_t result = *v44;
        *size_t v44 = v47;
        uint64_t v46 = a2;
        --v43;
        if (result) {
          goto LABEL_51;
        }
LABEL_52:
        --v44;
        a2 = v46;
        if (v43 == a6) {
          goto LABEL_81;
        }
      }
      *(void *)uint64_t v46 = 0;
      uint64_t result = *v44;
      *size_t v44 = v45;
      if (!result) {
        goto LABEL_52;
      }
LABEL_51:
      uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
      goto LABEL_52;
    }
    if (v11 != a2)
    {
      uint64_t v48 = 0;
      uint64_t v41 = 0;
      do
      {
        uint64_t v49 = *(void *)&v11[v48 * 8];
        *(void *)&v11[v48 * 8] = 0;
        a6[v48] = v49;
        ++v41;
        ++v48;
      }
      while (&v11[v48 * 8] != a2);
      if (!(v48 * 8)) {
        goto LABEL_81;
      }
      __int16 v50 = &a6[v48];
      uint64_t v51 = (uint64_t)&a6[v48 - 1];
      __int16 v52 = a6;
      while (a2 != a3)
      {
        uint64_t v53 = *(void *)a2;
        uint64_t v54 = *v52;
        if (*(void *)(*(void *)a2 + 16) <= *(void *)(*v52 + 16))
        {
          *__int16 v52 = 0;
          uint64_t result = *(void *)v11;
          *(void *)BOOL v11 = v54;
          if (result)
          {
            __int16 v56 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            a3 = v56;
          }
          ++v52;
        }
        else
        {
          *(void *)a2 = 0;
          uint64_t result = *(void *)v11;
          *(void *)BOOL v11 = v53;
          if (result)
          {
            uint64_t v55 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            a3 = v55;
          }
          a2 += 8;
        }
        v11 += 8;
        if (v50 == v52) {
          goto LABEL_81;
        }
      }
      if (v50 != v52)
      {
        uint64_t v59 = 0;
        do
        {
          uint64_t v60 = v52[v59];
          v52[v59] = 0;
          uint64_t result = *(void *)&v11[v59 * 8];
          *(void *)&v11[v59 * 8] = v60;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
          }
          ++v59;
        }
        while ((uint64_t *)v51 != &v52[v59 - 1]);
      }
LABEL_81:
      if (a6)
      {
        do
        {
          uint64_t result = *a6;
          *a6 = 0;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
          }
          ++a6;
          --v41;
        }
        while (v41);
      }
    }
  }
  return result;
}

void *sub_1CCB0A41C(void *a1, void *a2, void *a3)
{
  if (a1 != a2)
  {
    if (a2 != a3)
    {
      uint64_t v3 = *a1;
      *a1++ = *a2;
      for (uint64_t i = a2; ; *a1++ = *i)
      {
        *i++ = v3;
        if (i == a3) {
          break;
        }
        if (a1 == a2) {
          a2 = i;
        }
        uint64_t v3 = *a1;
      }
      if (a1 != a2)
      {
        unint64_t v5 = a1;
        uint64_t v6 = a2;
        while (1)
        {
          uint64_t v7 = v5;
          while (1)
          {
            uint64_t v8 = *v5;
            *v7++ = *v6;
            *v6++ = v8;
            if (v6 != a3) {
              break;
            }
            unint64_t v5 = v7;
            uint64_t v6 = a2;
            if (v7 == a2) {
              return a1;
            }
          }
          if (v7 == a2) {
            a2 = v6;
          }
          ++v5;
        }
      }
    }
    return a1;
  }
  return a3;
}

BOOL sub_1CCB0A4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  if (sub_1CBB0BF40(*(void *)(a1 + 32), *(_DWORD *)(a1 + 48), a2, &v12)) {
    uint64_t v5 = v12;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48);
  }
  uint64_t v6 = sub_1CCB0A59C(*(uint64_t **)(v5 + 8));
  uint64_t v12 = 0;
  if (sub_1CBB0BF40(*(void *)(a1 + 32), *(_DWORD *)(a1 + 48), a3, &v12)) {
    uint64_t v7 = v12;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48);
  }
  uint64_t v8 = sub_1CCB0A59C(*(uint64_t **)(v7 + 8));
  if (v6 != v8)
  {
    unsigned int v9 = *((_DWORD *)v6 + 3);
    unsigned int v10 = *((_DWORD *)v8 + 3);
    if (v9 >= v10)
    {
      uint64_t *v8 = (uint64_t)v6;
      if (v9 == v10) {
        *((_DWORD *)v6 + 3) = v9 + 1;
      }
    }
    else
    {
      *uint64_t v6 = (uint64_t)v8;
    }
  }
  return v6 != v8;
}

uint64_t *sub_1CCB0A59C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((uint64_t *)*a1 != a1)
  {
    uint64_t v2 = sub_1CCB0A59C();
    *uint64_t v1 = v2;
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t *sub_1CCB0A5D8(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    uint64_t v9 = a1->i64[1];
    if (!*(void *)(v9 + 24))
    {
      a1->i64[1] = *a2;
      *a2 = v9;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return &a1->i64[1];
    }
    uint64_t v8 = a1->i64[0];
    a1->i64[0] = v9;
    a1->i64[1] = v8;
    a1->i64[1] = *a2;
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    uint64_t v8 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_6:
    *a2 = v8;
    return v5;
  }
  BOOL v11 = a4;
  if (a5 >= a3)
  {
    uint64_t v17 = a1->i64[0];
    a1->i64[0] = 0;
    uint64_t v18 = &a1->i64[1];
    *a4 = v17;
    unint64_t v19 = a4 + 1;
    uint64_t v20 = 1;
    while (v18 != v5)
    {
      uint64_t v21 = *v18;
      uint64_t v22 = *(void *)(*v18 + 24);
      uint64_t *v18 = 0;
      if (v22)
      {
        uint64_t v23 = *v6;
        *uint64_t v6 = v21;
        if (v23) {
          MEMORY[0x1D25D9CE0](v23, 0x1060C40E80B6244);
        }
        ++v6;
      }
      else
      {
        *v19++ = v21;
        ++v20;
      }
      ++v18;
    }
    uint64_t v24 = *v5;
    *uint64_t v5 = 0;
    uint64_t v25 = *v6;
    *uint64_t v6 = v24;
    if (v25) {
      MEMORY[0x1D25D9CE0](v25, 0x1060C40E80B6244);
    }
    uint64_t v5 = v6 + 1;
    if (v19 > v11)
    {
      uint64_t v26 = v11;
      unint64_t v27 = v5;
      do
      {
        uint64_t v28 = *v26;
        *uint64_t v26 = 0;
        uint64_t v29 = *v27;
        *unint64_t v27 = v28;
        if (v29) {
          MEMORY[0x1D25D9CE0](v29, 0x1060C40E80B6244);
        }
        ++v26;
        ++v27;
      }
      while (v26 < v19);
    }
    for (; v20; --v20)
    {
      uint64_t v30 = *v11;
      *BOOL v11 = 0;
      if (v30) {
        MEMORY[0x1D25D9CE0](v30, 0x1060C40E80B6244);
      }
      ++v11;
    }
  }
  else
  {
    if (a3 >= 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = a3 + 1;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = &a1->i64[v12 >> 1];
    uint64_t v15 = v14 - 1;
    if (*(void *)(*(v14 - 1) + 24))
    {
      uint64_t v16 = v12 >> 1;
LABEL_38:
      uint64_t v34 = (uint64_t *)sub_1CCB0A5D8(a1, v15, v16, a4, a5);
    }
    else
    {
      uint64_t v31 = 8 - 8 * v13;
      uint64_t v32 = v13;
      while (v31)
      {
        uint64_t v16 = v32 - 1;
        uint64_t v33 = *(void *)(a1[-1].i64[v32] + 24);
        v31 += 8;
        --v32;
        if (v33)
        {
          uint64_t v15 = (uint64_t *)((char *)a1->i64 - v31);
          goto LABEL_38;
        }
      }
      uint64_t v34 = (uint64_t *)a1;
    }
    uint64_t v35 = a3 - v13;
    if (*(void *)(v6[v13] + 24))
    {
      uint64_t v36 = v5 + 1;
      size_t v37 = &v6[v13];
      uint64_t v38 = v37 + 1;
      while (v38 != v5)
      {
        --v35;
        uint64_t v39 = *v38++;
        ++v37;
        if (!*(void *)(v39 + 24)) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      size_t v37 = v14;
LABEL_45:
      uint64_t v36 = (void *)sub_1CCB0A5D8(v37, v5, v35, v11, a5);
    }
    return sub_1CCB0A41C(v34, v14, v36);
  }
  return v5;
}

uint64_t sub_1CCB0A880(uint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      unsigned int v8 = *(_DWORD *)(v7 + 32);
      uint64_t v9 = *(void *)result;
      unsigned int v10 = *(_DWORD *)(*(void *)result + 32);
      BOOL v11 = v8 >= v10;
      if (v8 == v10) {
        BOOL v11 = *(_DWORD *)(v7 + 36) >= *(_DWORD *)(v9 + 36);
      }
      if (!v11)
      {
        *(void *)uint64_t result = v7;
        *((void *)a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)result != a2)
      {
        uint64_t v18 = (uint64_t *)(result + 8);
        if ((char *)(result + 8) != a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = (uint64_t *)result;
          do
          {
            uint64_t v21 = *v20;
            uint64_t v20 = v18;
            uint64_t v22 = *v18;
            unsigned int v23 = *(_DWORD *)(*v18 + 32);
            unsigned int v24 = *(_DWORD *)(v21 + 32);
            BOOL v25 = v23 >= v24;
            if (v23 == v24) {
              BOOL v25 = *(_DWORD *)(v22 + 36) >= *(_DWORD *)(v21 + 36);
            }
            if (!v25)
            {
              uint64_t v26 = 0;
              *uint64_t v20 = 0;
              for (uint64_t i = v19; ; i -= 8)
              {
                uint64_t v28 = (uint64_t *)((char *)v6 + i);
                *uint64_t v28 = 0;
                v28[1] = v21;
                if (v26) {
                  MEMORY[0x1D25D9CE0](v26, 0x1060C40E80B6244);
                }
                if (!i)
                {
                  uint64_t v32 = v6;
                  goto LABEL_29;
                }
                unsigned int v29 = *(_DWORD *)(v22 + 32);
                uint64_t v21 = *(uint64_t *)((char *)v6 + i - 8);
                unsigned int v30 = *(_DWORD *)(v21 + 32);
                BOOL v31 = v29 >= v30;
                if (v29 == v30) {
                  BOOL v31 = *(_DWORD *)(v22 + 36) >= *(_DWORD *)(v21 + 36);
                }
                if (v31) {
                  break;
                }
                uint64_t v26 = *v28;
              }
              uint64_t v32 = (uint64_t *)((char *)v6 + i);
LABEL_29:
              uint64_t result = *v32;
              *uint64_t v32 = v22;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
              }
            }
            uint64_t v18 = v20 + 1;
            v19 += 8;
          }
          while (v20 + 1 != (uint64_t *)a2);
        }
      }
    }
    else
    {
      uint64_t v14 = a4;
      unint64_t v15 = a3 >> 1;
      uint64_t v16 = result + 8 * (a3 >> 1);
      unint64_t v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCB0AC00(result, v16, v17, a4);
        uint64_t v33 = &v14[v15];
        uint64_t result = sub_1CCB0AC00((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v33);
        uint64_t v34 = &v14[a3];
        uint64_t v35 = v33;
        uint64_t v36 = v14;
        while (v35 != v34)
        {
          uint64_t v37 = *v35;
          unsigned int v38 = *(_DWORD *)(*v35 + 32);
          uint64_t v39 = *v36;
          unsigned int v40 = *(_DWORD *)(*v36 + 32);
          BOOL v41 = v38 >= v40;
          if (v38 == v40) {
            BOOL v41 = *(_DWORD *)(v37 + 36) >= *(_DWORD *)(v39 + 36);
          }
          if (v41)
          {
            *uint64_t v36 = 0;
            uint64_t result = *v6;
            *uint64_t v6 = v39;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v36;
          }
          else
          {
            *uint64_t v35 = 0;
            uint64_t result = *v6;
            *uint64_t v6 = v37;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v35;
          }
          ++v6;
          if (v36 == v33)
          {
            if (v35 != v34)
            {
              uint64_t v42 = 0;
              do
              {
                uint64_t v43 = v35[v42];
                v35[v42] = 0;
                uint64_t result = v6[v42];
                v6[v42] = v43;
                if (result) {
                  uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
                }
                ++v42;
              }
              while (&v35[v42] != v34);
            }
            goto LABEL_56;
          }
        }
        if (v36 != v33)
        {
          uint64_t v44 = 0;
          do
          {
            uint64_t v45 = v36[v44];
            v36[v44] = 0;
            uint64_t result = v6[v44];
            v6[v44] = v45;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v44;
          }
          while (&v36[v44] != v33);
        }
LABEL_56:
        if (v14)
        {
          unint64_t v46 = a3;
          do
          {
            uint64_t result = *v14;
            *uint64_t v14 = 0;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
            ++v14;
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        sub_1CCB0A880(result, v16, v17, a4, a5);
        sub_1CCB0A880(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v14, a5);
        return sub_1CCB0AEC4((uint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB0AC00(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
      uint64_t v9 = (uint64_t *)result;
LABEL_34:
      uint64_t v33 = *v9;
      uint64_t *v9 = 0;
      *uint64_t v4 = v33;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v9 = (uint64_t *)(a2 - 8);
      uint64_t v8 = *(void *)(a2 - 8);
      unsigned int v10 = *(_DWORD *)(v8 + 32);
      uint64_t v11 = *(void *)result;
      unsigned int v12 = *(_DWORD *)(*(void *)result + 32);
      if (v10 == v12)
      {
        if (*(_DWORD *)(v8 + 36) >= *(_DWORD *)(v11 + 36))
        {
LABEL_6:
          uint64_t v13 = (void *)result;
LABEL_33:
          *uint64_t v13 = 0;
          *a4 = v11;
          uint64_t v4 = a4 + 1;
          goto LABEL_34;
        }
      }
      else if (v10 >= v12)
      {
        goto LABEL_6;
      }
      uint64_t v13 = (void *)(a2 - 8);
      uint64_t v11 = *(void *)(a2 - 8);
      uint64_t v9 = (uint64_t *)result;
      goto LABEL_33;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v34 = result + 8 * (a3 >> 1);
      sub_1CCB0A880(result, v34, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CCB0A880(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v35 = v6 + 8 * (a3 >> 1);
      while (v35 != a2)
      {
        uint64_t v36 = *(void *)v35;
        unsigned int v37 = *(_DWORD *)(*(void *)v35 + 32);
        uint64_t v38 = *(void *)v6;
        unsigned int v39 = *(_DWORD *)(*(void *)v6 + 32);
        BOOL v40 = v37 >= v39;
        if (v37 == v39) {
          BOOL v40 = *(_DWORD *)(v36 + 36) >= *(_DWORD *)(v38 + 36);
        }
        if (v40)
        {
          *(void *)uint64_t v6 = 0;
          v6 += 8;
          *uint64_t v4 = v38;
        }
        else
        {
          *(void *)unint64_t v35 = 0;
          v35 += 8;
          *uint64_t v4 = v36;
        }
        ++v4;
        if (v6 == v34)
        {
          if (v35 != a2)
          {
            unint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)(v35 + v41);
              *(void *)(v35 + v41) = 0;
              v4[v41 / 8] = v42;
              v41 += 8;
            }
            while (v35 + v41 != a2);
          }
          return result;
        }
      }
      if (v6 != v34)
      {
        unint64_t v43 = 0;
        do
        {
          uint64_t v44 = *(void *)(v6 + v43);
          *(void *)(v6 + v43) = 0;
          v4[v43 / 8] = v44;
          v43 += 8;
        }
        while (v6 + v43 != v34);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(void *)uint64_t result = 0;
      uint64_t v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        unint64_t v17 = a4;
        do
        {
          uint64_t v18 = v17;
          uint64_t v20 = *v17++;
          uint64_t v19 = v20;
          uint64_t v21 = *(void *)v15;
          unsigned int v22 = *(_DWORD *)(*(void *)v15 + 32);
          unsigned int v23 = *(_DWORD *)(v20 + 32);
          BOOL v24 = v22 >= v23;
          if (v22 == v23) {
            BOOL v24 = *(_DWORD *)(v21 + 36) >= *(_DWORD *)(v19 + 36);
          }
          if (v24)
          {
            *(void *)uint64_t v15 = 0;
            *unint64_t v17 = v21;
          }
          else
          {
            uint64_t *v18 = 0;
            v18[1] = v19;
            BOOL v25 = v4;
            if (v18 != v4)
            {
              uint64_t v26 = v16;
              while (1)
              {
                unint64_t v27 = (uint64_t *)((char *)v4 + v26);
                unsigned int v28 = *(_DWORD *)(*(void *)v15 + 32);
                uint64_t v29 = *(uint64_t *)((char *)v4 + v26 - 8);
                unsigned int v30 = *(_DWORD *)(v29 + 32);
                if (v28 == v30)
                {
                  if (*(_DWORD *)(*(void *)v15 + 36) >= *(_DWORD *)(v29 + 36))
                  {
                    BOOL v25 = v18;
                    break;
                  }
                }
                else if (v28 >= v30)
                {
                  BOOL v25 = (uint64_t *)((char *)v4 + v26);
                  break;
                }
                uint64_t v31 = *v27;
                *(v27 - 1) = 0;
                *unint64_t v27 = v29;
                if (v31) {
                  MEMORY[0x1D25D9CE0](v31, 0x1060C40E80B6244);
                }
                --v18;
                v26 -= 8;
                if (!v26)
                {
                  BOOL v25 = v4;
                  break;
                }
              }
            }
            uint64_t v32 = *(void *)v15;
            *(void *)uint64_t v15 = 0;
            uint64_t result = *v25;
            *BOOL v25 = v32;
            if (result) {
              uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            }
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCB0AEC4(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    unsigned int v12 = (char *)result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)a2;
      unsigned int v15 = *(_DWORD *)(*(void *)a2 + 32);
      uint64_t v16 = -a4;
      while (1)
      {
        uint64_t v17 = *(void *)&v12[v13];
        unsigned int v18 = *(_DWORD *)(v17 + 32);
        BOOL v19 = v15 >= v18;
        if (v15 == v18) {
          BOOL v19 = *(_DWORD *)(v14 + 36) >= *(_DWORD *)(v17 + 36);
        }
        if (!v19) {
          break;
        }
        v13 += 8;
        BOOL v19 = __CFADD__(v16++, 1);
        if (v19) {
          return result;
        }
      }
      uint64_t v80 = a3;
      uint64_t v81 = a6;
      uint64_t v78 = &v12[v13];
      uint64_t v79 = a7;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          *(void *)&v12[v13] = v14;
          *(void *)a2 = v17;
          return result;
        }
        if (v16 <= 0) {
          uint64_t v32 = -v16;
        }
        else {
          uint64_t v32 = 1 - v16;
        }
        uint64_t v33 = v32 >> 1;
        BOOL v25 = &v12[8 * (v32 >> 1) + v13];
        unsigned int v22 = a3;
        if (a3 != a2)
        {
          unint64_t v34 = (a3 - a2) >> 3;
          unsigned int v35 = *(_DWORD *)(*(void *)v25 + 32);
          unsigned int v22 = a2;
          do
          {
            unint64_t v36 = v34 >> 1;
            unsigned int v37 = &v22[8 * (v34 >> 1)];
            unsigned int v38 = *(_DWORD *)(*(void *)v37 + 32);
            BOOL v39 = v38 >= v35;
            if (v38 == v35) {
              BOOL v39 = *(_DWORD *)(*(void *)v37 + 36) >= *(_DWORD *)(*(void *)v25 + 36);
            }
            int v40 = !v39;
            unint64_t v41 = v37 + 8;
            v34 += ~v36;
            if (v40) {
              unsigned int v22 = v41;
            }
            else {
              unint64_t v34 = v36;
            }
          }
          while (v34);
        }
        uint64_t v21 = (v22 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v20 = v9;
        }
        else {
          uint64_t v20 = v9 + 1;
        }
        uint64_t v21 = v20 >> 1;
        unsigned int v22 = &a2[8 * (v20 >> 1)];
        if (&v12[v13] == a2)
        {
          BOOL v25 = a2;
        }
        else
        {
          unint64_t v23 = (a2 - v12 - v13) >> 3;
          unsigned int v24 = *(_DWORD *)(*(void *)v22 + 32);
          BOOL v25 = &v12[v13];
          do
          {
            unint64_t v26 = v23 >> 1;
            unint64_t v27 = &v25[8 * (v23 >> 1)];
            unsigned int v28 = *(_DWORD *)(*(void *)v27 + 32);
            BOOL v29 = v24 >= v28;
            if (v24 == v28) {
              BOOL v29 = *(_DWORD *)(*(void *)v22 + 36) >= *(_DWORD *)(*(void *)v27 + 36);
            }
            int v30 = !v29;
            uint64_t v31 = v27 + 8;
            v23 += ~v26;
            if (v30) {
              unint64_t v23 = v26;
            }
            else {
              BOOL v25 = v31;
            }
          }
          while (v23);
        }
        uint64_t v33 = (v25 - v12 - v13) >> 3;
      }
      a4 = -(v33 + v16);
      uint64_t v42 = v9 - v21;
      unint64_t v43 = a2;
      uint64_t v44 = v21;
      uint64_t v45 = (char *)sub_1CCB0A41C(v25, v43, v22);
      uint64_t v46 = v44;
      uint64_t v47 = v45;
      if (v33 + v46 >= v9 - (v33 + v46) - v16)
      {
        uint64_t v50 = v46;
        uint64_t result = sub_1CCB0AEC4(v45, v22, v80, -(v33 + v16), v42, v81, v79);
        unsigned int v22 = v25;
        a6 = v81;
        uint64_t v42 = v50;
        a4 = v33;
        a7 = v79;
        a3 = v47;
        unsigned int v12 = v78;
      }
      else
      {
        uint64_t v48 = v25;
        uint64_t v49 = v33;
        a6 = v81;
        a7 = v79;
        uint64_t result = sub_1CCB0AEC4(&v12[v13], v48, v45, v49, v46, v81, v79);
        unsigned int v12 = v47;
        a3 = v80;
      }
      uint64_t v9 = v42;
      a2 = v22;
      if (!v42) {
        return result;
      }
    }
    if (a4 > v9)
    {
      if (a2 == a3) {
        return result;
      }
      unint64_t v51 = 0;
      uint64_t v52 = 0;
      do
      {
        uint64_t v53 = *(void *)&a2[v51];
        *(void *)&a2[v51] = 0;
        a6[v51 / 8] = v53;
        ++v52;
        v51 += 8;
      }
      while (&a2[v51] != a3);
      if (!v51) {
        goto LABEL_98;
      }
      uint64_t v54 = &a6[v51 / 8];
      uint64_t v55 = (uint64_t *)(a3 - 8);
      while (1)
      {
        if (a2 == v12)
        {
          if (v54 != a6)
          {
            uint64_t v74 = 0;
            do
            {
              uint64_t v75 = v54[v74 - 1];
              v54[v74 - 1] = 0;
              uint64_t result = v55[v74];
              v55[v74] = v75;
              if (result) {
                uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
              }
              --v74;
            }
            while (&v54[v74] != a6);
          }
          goto LABEL_98;
        }
        uint64_t v57 = a2 - 8;
        uint64_t v56 = *((void *)a2 - 1);
        uint64_t v58 = *(v54 - 1);
        unsigned int v59 = *(_DWORD *)(v58 + 32);
        unsigned int v60 = *(_DWORD *)(v56 + 32);
        BOOL v61 = v59 >= v60;
        if (v59 == v60) {
          BOOL v61 = *(_DWORD *)(v58 + 36) >= *(_DWORD *)(v56 + 36);
        }
        if (!v61) {
          break;
        }
        *(v54 - 1) = 0;
        uint64_t result = *v55;
        *uint64_t v55 = v58;
        uint64_t v57 = a2;
        --v54;
        if (result) {
          goto LABEL_66;
        }
LABEL_67:
        --v55;
        a2 = v57;
        if (v54 == a6) {
          goto LABEL_98;
        }
      }
      *(void *)uint64_t v57 = 0;
      uint64_t result = *v55;
      *uint64_t v55 = v56;
      if (!result) {
        goto LABEL_67;
      }
LABEL_66:
      uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
      goto LABEL_67;
    }
    if (v12 != a2)
    {
      uint64_t v62 = 0;
      uint64_t v52 = 0;
      do
      {
        uint64_t v63 = *(void *)&v12[v62 * 8];
        *(void *)&v12[v62 * 8] = 0;
        a6[v62] = v63;
        ++v52;
        ++v62;
      }
      while (&v12[v62 * 8] != a2);
      if (!(v62 * 8)) {
        goto LABEL_98;
      }
      uint64_t v64 = &a6[v62];
      uint64_t v65 = (uint64_t)&a6[v62 - 1];
      int v66 = a6;
      while (a2 != a3)
      {
        uint64_t v67 = *(void *)a2;
        unsigned int v68 = *(_DWORD *)(*(void *)a2 + 32);
        uint64_t v69 = *v66;
        unsigned int v70 = *(_DWORD *)(*v66 + 32);
        BOOL v71 = v68 >= v70;
        if (v68 == v70) {
          BOOL v71 = *(_DWORD *)(v67 + 36) >= *(_DWORD *)(v69 + 36);
        }
        if (v71)
        {
          *int v66 = 0;
          uint64_t result = *(void *)v12;
          *(void *)unsigned int v12 = v69;
          if (result)
          {
            int v73 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            a3 = v73;
          }
          ++v66;
        }
        else
        {
          *(void *)a2 = 0;
          uint64_t result = *(void *)v12;
          *(void *)unsigned int v12 = v67;
          if (result)
          {
            int v72 = a3;
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
            a3 = v72;
          }
          a2 += 8;
        }
        v12 += 8;
        if (v64 == v66) {
          goto LABEL_98;
        }
      }
      if (v64 != v66)
      {
        uint64_t v76 = 0;
        do
        {
          uint64_t v77 = v66[v76];
          v66[v76] = 0;
          uint64_t result = *(void *)&v12[v76 * 8];
          *(void *)&v12[v76 * 8] = v77;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
          }
          ++v76;
        }
        while ((uint64_t *)v65 != &v66[v76 - 1]);
      }
LABEL_98:
      if (a6)
      {
        do
        {
          uint64_t result = *a6;
          *a6 = 0;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1060C40E80B6244);
          }
          ++a6;
          --v52;
        }
        while (v52);
      }
    }
  }
  return result;
}

size_t **sub_1CCB0B3E8(size_t **result, size_t **a2, char *a3, char a4)
{
  uint64_t v7 = result;
LABEL_2:
  uint64_t v8 = a2;
  uint64_t v9 = a2 - 1;
  uint64_t i = v7;
  while (1)
  {
    uint64_t v7 = i;
    uint64_t v11 = (char *)v8 - (char *)i;
    uint64_t v12 = v8 - i;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v83 = *(a2 - 1);
          uint64_t v84 = *v7;
          size_t v85 = *v83;
          size_t v86 = **v7;
          if (v86 >= *v83) {
            size_t v87 = *v83;
          }
          else {
            size_t v87 = **v7;
          }
          if (v87)
          {
            uint64_t result = (size_t **)memcmp(v83 + 23, v84 + 23, v87);
            if ((result & 0x80000000) == 0)
            {
              BOOL v88 = result || v85 == v86;
              if (v88 || v85 >= v86) {
                return result;
              }
            }
          }
          else if (v85 >= v86)
          {
            return result;
          }
          *uint64_t v7 = v83;
          *(a2 - 1) = v84;
          return result;
        case 3:
          return sub_1CCB0C23C(v7, v7 + 1, v9);
        case 4:
          return sub_1CCB0C674(v7, v7 + 1, v7 + 2, v9);
        case 5:
          return sub_1CCB0C0A8(v7, v7 + 1, v7 + 2, v7 + 3, v9);
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v7 == v8) {
        return result;
      }
      int64_t v110 = (unint64_t)(v12 - 2) >> 1;
      int64_t v111 = v110;
LABEL_271:
      int64_t v112 = v111;
      if (v110 < v111) {
        goto LABEL_337;
      }
      uint64_t v113 = (2 * v111) | 1;
      int v114 = &v7[v113];
      uint64_t v115 = 2 * v111 + 2;
      BOOL v192 = (void *)v111;
      if (v115 < v12)
      {
        char v116 = v114[1];
        size_t v117 = **v114;
        size_t v118 = *v116;
        if (*v116 >= v117) {
          size_t v119 = **v114;
        }
        else {
          size_t v119 = *v116;
        }
        if (v119 && (uint64_t result = (size_t **)memcmp(*v114 + 23, v116 + 23, v119), result))
        {
          int v120 = ((int)result >> 31) | 1;
        }
        else
        {
          if (v117 < v118) {
            int v120 = -1;
          }
          else {
            int v120 = 1;
          }
          if (v117 == v118) {
            int v120 = 0;
          }
        }
        if (v120 == -1)
        {
          ++v114;
          uint64_t v113 = v115;
        }
        int64_t v112 = (int64_t)v192;
      }
      unsigned int v121 = *v114;
      int v122 = v7[v112];
      size_t v123 = **v114;
      size_t v124 = *v122;
      if (*v122 >= v123) {
        size_t v125 = **v114;
      }
      else {
        size_t v125 = *v122;
      }
      if (v125)
      {
        uint64_t result = (size_t **)memcmp(v121 + 23, v122 + 23, v125);
        if ((result & 0x80000000) != 0) {
          goto LABEL_337;
        }
        BOOL v126 = result || v123 == v124;
        if (!v126 && v123 < v124) {
          goto LABEL_337;
        }
      }
      else if (v123 < v124)
      {
        goto LABEL_337;
      }
      v7[v112] = v121;
      if (v110 < v113)
      {
        uint64_t v128 = v114;
        goto LABEL_336;
      }
      __s2 = v122 + 23;
      uint64_t v189 = v122;
      while (1)
      {
        uint64_t v129 = 2 * v113;
        uint64_t v113 = (2 * v113) | 1;
        uint64_t v128 = &v7[v113];
        uint64_t v130 = v129 + 2;
        if (v129 + 2 < v12)
        {
          uint64_t v131 = v128[1];
          size_t v132 = **v128;
          size_t v133 = *v131;
          if (*v131 >= v132) {
            size_t v134 = **v128;
          }
          else {
            size_t v134 = *v131;
          }
          if (v134 && (uint64_t result = (size_t **)memcmp(*v128 + 23, v131 + 23, v134), result))
          {
            int v135 = ((int)result >> 31) | 1;
          }
          else
          {
            if (v132 < v133) {
              int v135 = -1;
            }
            else {
              int v135 = 1;
            }
            if (v132 == v133) {
              int v135 = 0;
            }
          }
          if (v135 == -1)
          {
            ++v128;
            uint64_t v113 = v130;
          }
          int64_t v110 = (unint64_t)(v12 - 2) >> 1;
          int64_t v112 = (int64_t)v192;
        }
        unsigned int v136 = *v128;
        size_t v137 = **v128;
        if (v124 >= v137) {
          size_t v138 = **v128;
        }
        else {
          size_t v138 = v124;
        }
        if (v138)
        {
          uint64_t result = (size_t **)memcmp(v136 + 23, __s2, v138);
          if ((result & 0x80000000) != 0
            || (!result ? (v139 = v137 == v124) : (v139 = 1), !v139 ? (BOOL v140 = v137 >= v124) : (BOOL v140 = 1), !v140))
          {
LABEL_335:
            uint64_t v128 = v114;
            int v122 = v189;
LABEL_336:
            uint64_t *v128 = v122;
LABEL_337:
            int64_t v111 = v112 - 1;
            if (!v112)
            {
              while (2)
              {
                uint64_t v141 = 0;
                uint64_t v193 = *v7;
                unsigned int v142 = v7;
                do
                {
                  uint64_t v143 = &v142[v141 + 1];
                  uint64_t v144 = (2 * v141) | 1;
                  uint64_t v145 = 2 * v141 + 2;
                  if (v145 < v12)
                  {
                    int v146 = v142[v141 + 2];
                    size_t v147 = **v143;
                    size_t v148 = *v146;
                    if (*v146 >= v147) {
                      size_t v149 = **v143;
                    }
                    else {
                      size_t v149 = *v146;
                    }
                    if (v149 && (uint64_t result = (size_t **)memcmp(*v143 + 23, v146 + 23, v149), result))
                    {
                      int v150 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v147 < v148) {
                        int v150 = -1;
                      }
                      else {
                        int v150 = 1;
                      }
                      if (v147 == v148) {
                        int v150 = 0;
                      }
                    }
                    if (v150 == -1)
                    {
                      ++v143;
                      uint64_t v144 = v145;
                    }
                  }
                  const char *v142 = *v143;
                  unsigned int v142 = v143;
                  uint64_t v141 = v144;
                }
                while (v144 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                size_t v151 = a2 - 1;
                BOOL v5 = v143 == --a2;
                if (v5)
                {
                  *uint64_t v143 = v193;
                  goto LABEL_391;
                }
                *uint64_t v143 = *v151;
                *size_t v151 = v193;
                uint64_t v152 = (char *)v143 - (char *)v7 + 8;
                if (v152 >= 9)
                {
                  unint64_t v153 = ((unint64_t)v152 >> 3) - 2;
                  unint64_t v154 = v153 >> 1;
                  size_t v155 = &v7[v153 >> 1];
                  uint64_t v156 = *v155;
                  uint64_t v157 = *v143;
                  size_t v158 = **v155;
                  size_t v159 = **v143;
                  if (v159 >= v158) {
                    size_t v160 = **v155;
                  }
                  else {
                    size_t v160 = **v143;
                  }
                  if (v160)
                  {
                    uint64_t result = (size_t **)memcmp(v156 + 23, v157 + 23, v160);
                    if ((result & 0x80000000) != 0
                      || (!result ? (BOOL v161 = v158 == v159) : (BOOL v161 = 1),
                          !v161 ? (BOOL v162 = v158 >= v159) : (BOOL v162 = 1),
                          !v162))
                    {
LABEL_372:
                      *uint64_t v143 = v156;
                      if (v153 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v164 = v154 - 1;
                          unint64_t v154 = (v154 - 1) >> 1;
                          unsigned int v163 = &v7[v154];
                          uint64_t v165 = *v163;
                          size_t v166 = **v163;
                          if (v159 >= v166) {
                            size_t v167 = **v163;
                          }
                          else {
                            size_t v167 = v159;
                          }
                          if (v167)
                          {
                            uint64_t result = (size_t **)memcmp(v165 + 23, v157 + 23, v167);
                            if ((result & 0x80000000) == 0)
                            {
                              BOOL v168 = result || v166 == v159;
                              if (v168 || v166 >= v159) {
                                break;
                              }
                            }
                          }
                          else if (v166 >= v159)
                          {
                            break;
                          }
                          *size_t v155 = v165;
                          size_t v155 = &v7[v154];
                          if (v164 <= 1) {
                            goto LABEL_390;
                          }
                        }
                      }
                      unsigned int v163 = v155;
LABEL_390:
                      char *v163 = v157;
                    }
                  }
                  else if (v158 < v159)
                  {
                    goto LABEL_372;
                  }
                }
LABEL_391:
                if (v12-- <= 2) {
                  return result;
                }
                continue;
              }
            }
            goto LABEL_271;
          }
        }
        else if (v137 < v124)
        {
          goto LABEL_335;
        }
        *int v114 = v136;
        int v114 = v128;
        int v122 = v189;
        if (v110 < v113) {
          goto LABEL_336;
        }
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v7[(unint64_t)v12 >> 1];
    if ((unint64_t)v11 < 0x401)
    {
      uint64_t result = sub_1CCB0C23C(v14, v7, v9);
    }
    else
    {
      sub_1CCB0C23C(v7, v14, v9);
      sub_1CCB0C23C(v7 + 1, v14 - 1, a2 - 2);
      sub_1CCB0C23C(v7 + 2, &v7[v13 + 1], a2 - 3);
      uint64_t result = sub_1CCB0C23C(v14 - 1, v14, &v7[v13 + 1]);
      unsigned int v15 = *v7;
      *uint64_t v7 = *v14;
      *uint64_t v14 = v15;
    }
    uint64_t v16 = *v7;
    size_t v17 = **v7;
    unsigned int v190 = a3 - 1;
    if ((a4 & 1) == 0)
    {
      unsigned int v18 = *(v7 - 1);
      size_t v19 = *v18;
      if (v17 >= *v18) {
        size_t v20 = *v18;
      }
      else {
        size_t v20 = **v7;
      }
      if (v20)
      {
        uint64_t result = (size_t **)memcmp(v18 + 23, v16 + 23, v20);
        if ((result & 0x80000000) == 0)
        {
          BOOL v21 = result || v19 == v17;
          if (v21 || v19 >= v17)
          {
LABEL_110:
            uint64_t v57 = *v9;
            size_t v58 = **v9;
            if (v58 >= v17) {
              size_t v59 = v17;
            }
            else {
              size_t v59 = **v9;
            }
            if (v59 && (uint64_t result = (size_t **)memcmp(v16 + 23, v57 + 23, v59), result))
            {
              if ((result & 0x80000000) != 0) {
                goto LABEL_179;
              }
            }
            else if (v17 < v58)
            {
LABEL_179:
              for (uint64_t i = v7 + 1; ; ++i)
              {
                size_t v79 = **i;
                if (v79 >= v17) {
                  size_t v80 = v17;
                }
                else {
                  size_t v80 = **i;
                }
                if (v80)
                {
                  uint64_t result = (size_t **)memcmp(v16 + 23, *i + 23, v80);
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_132;
                  }
                  BOOL v81 = result || v17 == v79;
                  if (!v81 && v17 < v79) {
                    goto LABEL_132;
                  }
                }
                else if (v17 < v79)
                {
                  goto LABEL_132;
                }
              }
            }
            for (uint64_t i = v7 + 1; i < a2; ++i)
            {
              size_t v60 = **i;
              if (v60 >= v17) {
                size_t v61 = v17;
              }
              else {
                size_t v61 = **i;
              }
              if (v61)
              {
                uint64_t result = (size_t **)memcmp(v16 + 23, *i + 23, v61);
                if ((result & 0x80000000) != 0) {
                  break;
                }
                BOOL v62 = result || v17 == v60;
                if (!v62 && v17 < v60) {
                  break;
                }
              }
              else if (v17 < v60)
              {
                break;
              }
            }
LABEL_132:
            uint64_t j = a2;
            if (i < a2)
            {
              for (uint64_t j = v9; ; --j)
              {
                if (v58 >= v17) {
                  size_t v65 = v17;
                }
                else {
                  size_t v65 = v58;
                }
                if (v65)
                {
                  uint64_t result = (size_t **)memcmp(v16 + 23, v57 + 23, v65);
                  if ((result & 0x80000000) == 0 && (result || v17 == v58 || v17 >= v58)) {
                    break;
                  }
                }
                else if (v17 >= v58)
                {
                  break;
                }
                int v66 = *(j - 1);
                uint64_t v57 = v66;
                size_t v58 = *v66;
              }
            }
            if (i < j)
            {
              uint64_t v67 = *i;
              unsigned int v68 = *j;
              do
              {
                *uint64_t i = v68;
                *uint64_t j = v67;
                uint64_t v69 = i + 1;
                do
                {
                  uint64_t i = v69;
                  uint64_t v67 = *v69;
                  size_t v70 = **v69;
                  if (v70 >= v17) {
                    size_t v71 = v17;
                  }
                  else {
                    size_t v71 = **v69;
                  }
                  if (v71 && (uint64_t result = (size_t **)memcmp(v16 + 23, v67 + 23, v71), result))
                  {
                    int v72 = ((int)result >> 31) | 1;
                  }
                  else if (v17 == v70)
                  {
                    int v72 = 0;
                  }
                  else
                  {
                    if (v17 < v70) {
                      goto LABEL_159;
                    }
                    int v72 = 1;
                  }
                  uint64_t v69 = i + 1;
                }
                while (v72 != -1);
                while (1)
                {
LABEL_159:
                  while (1)
                  {
                    int v73 = *--j;
                    unsigned int v68 = v73;
                    size_t v74 = *v73;
                    size_t v75 = *v73 >= v17 ? v17 : v74;
                    if (v75) {
                      break;
                    }
                    if (v17 >= v74) {
                      goto LABEL_174;
                    }
                  }
                  uint64_t result = (size_t **)memcmp(v16 + 23, v68 + 23, v75);
                  if ((result & 0x80000000) == 0)
                  {
                    BOOL v76 = result || v17 == v74;
                    if (v76 || v17 >= v74) {
                      break;
                    }
                  }
                }
LABEL_174:
                uint64_t v9 = a2 - 1;
              }
              while (i < j);
            }
            uint64_t v78 = i - 1;
            BOOL v4 = i - 1 >= v7;
            BOOL v5 = i - 1 == v7;
            if (i - 1 != v7) {
              *uint64_t v7 = *v78;
            }
            a4 = 0;
            char *v78 = v16;
            --a3;
            uint64_t v8 = a2;
            continue;
          }
        }
      }
      else if (v19 >= v17)
      {
        goto LABEL_110;
      }
    }
    unsigned int v188 = v16;
    unint64_t v23 = v16 + 23;
    for (uint64_t k = 1; ; ++k)
    {
      BOOL v25 = v7[k];
      size_t v26 = *v25;
      size_t v27 = v17 >= *v25 ? *v25 : v17;
      if (v27) {
        break;
      }
      if (v26 >= v17) {
        goto LABEL_40;
      }
LABEL_39:
      ;
    }
    int v28 = memcmp(v25 + 23, v16 + 23, v27);
    if (v28 < 0) {
      goto LABEL_39;
    }
    BOOL v29 = v28 || v26 == v17;
    if (!v29 && v26 < v17) {
      goto LABEL_39;
    }
LABEL_40:
    uint64_t v31 = &v7[k];
    uint64_t m = v9;
    if (k != 1)
    {
      while (1)
      {
        size_t v33 = **m;
        if (v17 >= v33) {
          size_t v34 = **m;
        }
        else {
          size_t v34 = v17;
        }
        if (v34)
        {
          int v35 = memcmp(*m + 23, v16 + 23, v34);
          if (v35 < 0) {
            goto LABEL_73;
          }
          BOOL v36 = v35 || v33 == v17;
          if (!v36 && v33 < v17) {
            goto LABEL_73;
          }
        }
        else if (v33 < v17)
        {
          goto LABEL_73;
        }
        --m;
      }
    }
    uint64_t m = a2;
    if (v31 < a2)
    {
      for (uint64_t m = v9; ; --m)
      {
        size_t v38 = **m;
        if (v17 >= v38) {
          size_t v39 = **m;
        }
        else {
          size_t v39 = v17;
        }
        if (v39)
        {
          int v40 = memcmp(*m + 23, v16 + 23, v39);
          if (v40 < 0) {
            break;
          }
          BOOL v41 = v40 != 0;
          if (v38 == v17) {
            BOOL v41 = 1;
          }
          if (v38 >= v17) {
            BOOL v41 = 1;
          }
          if (v31 >= m || !v41) {
            break;
          }
        }
        else if (v31 >= m || v38 < v17)
        {
          break;
        }
      }
    }
LABEL_73:
    if (v31 >= m)
    {
      uint64_t i = v31;
    }
    else
    {
      uint64_t v42 = *m;
      uint64_t i = v31;
      unint64_t v43 = m;
      do
      {
        *uint64_t i = v42;
        *unint64_t v43 = v25;
        uint64_t v44 = i + 1;
        do
        {
          uint64_t i = v44;
          BOOL v25 = *v44;
          size_t v45 = **v44;
          if (v17 >= v45) {
            size_t v46 = **v44;
          }
          else {
            size_t v46 = v17;
          }
          if (v46 && (int v47 = memcmp(v25 + 23, v23, v46)) != 0)
          {
            int v48 = (v47 >> 31) | 1;
          }
          else
          {
            if (v45 >= v17) {
              goto LABEL_85;
            }
            int v48 = -1;
          }
          uint64_t v44 = i + 1;
        }
        while (v48 == -1);
        do
        {
LABEL_85:
          while (1)
          {
            uint64_t v49 = *--v43;
            uint64_t v42 = v49;
            size_t v50 = *v49;
            size_t v51 = v17 >= *v49 ? v50 : v17;
            if (v51) {
              break;
            }
            if (v50 < v17) {
              goto LABEL_99;
            }
          }
          int v52 = memcmp(v42 + 23, v23, v51);
          if (v52 < 0) {
            break;
          }
          BOOL v53 = v52 || v50 == v17;
        }
        while (v53 || v50 >= v17);
LABEL_99:
        ;
      }
      while (i < v43);
    }
    uint64_t v55 = i - 1;
    if (i - 1 != v7) {
      *uint64_t v7 = *v55;
    }
    uint64_t v9 = a2 - 1;
    *uint64_t v55 = v188;
    BOOL v4 = v31 >= m;
    a3 = v190;
    uint64_t v8 = a2;
    if (v4)
    {
      BOOL v56 = sub_1CCB0C3F8(v7, i - 1);
      uint64_t result = (size_t **)sub_1CCB0C3F8(i, a2);
      if (result)
      {
        a2 = i - 1;
        if (v56) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v56) {
        goto LABEL_108;
      }
    }
    else
    {
LABEL_108:
      uint64_t result = (size_t **)sub_1CCB0B3E8(v7, i - 1, v190, a4 & 1);
      a4 = 0;
    }
  }
  uint64_t v90 = v7 + 1;
  BOOL v92 = v7 == v8 || v90 == v8;
  if ((a4 & 1) == 0)
  {
    if (v92) {
      return result;
    }
    while (1)
    {
      int v171 = v7;
      uint64_t v7 = v90;
      uint64_t v173 = *v171;
      unsigned int v172 = v171[1];
      size_t v174 = *v172;
      size_t v175 = **v171;
      if (v175 >= *v172) {
        size_t v176 = *v172;
      }
      else {
        size_t v176 = **v171;
      }
      if (v176)
      {
        uint64_t result = (size_t **)memcmp(v172 + 23, v173 + 23, v176);
        if ((result & 0x80000000) != 0
          || (!result ? (v177 = v174 == v175) : (v177 = 1), !v177 ? (BOOL v178 = v174 >= v175) : (BOOL v178 = 1), !v178))
        {
          while (1)
          {
LABEL_410:
            while (1)
            {
              unsigned int v179 = v171;
              uint64_t v180 = v173;
              unsigned int v181 = *--v171;
              uint64_t v173 = v181;
              v171[2] = v180;
              size_t v182 = *v181;
              size_t v183 = *v181 >= v174 ? v174 : v182;
              if (v183) {
                break;
              }
              if (v174 >= v182) {
                goto LABEL_425;
              }
            }
            uint64_t result = (size_t **)memcmp(v172 + 23, v173 + 23, v183);
            if ((result & 0x80000000) == 0)
            {
              BOOL v184 = result || v174 == v182;
              if (v184 || v174 >= v182) {
                break;
              }
            }
          }
LABEL_425:
          *unsigned int v179 = v172;
        }
      }
      else if (v174 < v175)
      {
        goto LABEL_410;
      }
      uint64_t v90 = v7 + 1;
      if (v7 + 1 == a2) {
        return result;
      }
    }
  }
  if (v92) {
    return result;
  }
  uint64_t v93 = 0;
  unsigned int v94 = v7;
  while (2)
  {
    BOOL v95 = v94;
    unsigned int v94 = v90;
    uint64_t v97 = *v95;
    uint64_t v96 = v95[1];
    size_t v98 = *v96;
    size_t v99 = **v95;
    if (v99 >= *v96) {
      size_t v100 = *v96;
    }
    else {
      size_t v100 = **v95;
    }
    if (v100)
    {
      uint64_t result = (size_t **)memcmp(v96 + 23, v97 + 23, v100);
      if ((result & 0x80000000) == 0)
      {
        BOOL v101 = result || v98 == v99;
        if (v101 || v98 >= v99) {
          goto LABEL_267;
        }
      }
    }
    else if (v98 >= v99)
    {
      goto LABEL_267;
    }
    v95[1] = v97;
    uint64_t v103 = v7;
    if (v95 == v7) {
      goto LABEL_266;
    }
    uint64_t v191 = v94;
    uint64_t v104 = v93;
    while (2)
    {
      uint64_t v105 = *(size_t **)((char *)v7 + v104 - 8);
      size_t v106 = *v105;
      if (*v105 >= v98) {
        size_t v107 = v98;
      }
      else {
        size_t v107 = *v105;
      }
      if (v107)
      {
        uint64_t result = (size_t **)memcmp(v96 + 23, v105 + 23, v107);
        if ((result & 0x80000000) == 0)
        {
          BOOL v108 = result || v98 == v106;
          if (v108 || v98 >= v106)
          {
            uint64_t v103 = (size_t **)((char *)v7 + v104);
            goto LABEL_265;
          }
        }
LABEL_262:
        --v95;
        *(size_t **)((char *)v7 + v104) = v105;
        v104 -= 8;
        if (!v104)
        {
          uint64_t v103 = v7;
          goto LABEL_265;
        }
        continue;
      }
      break;
    }
    if (v98 < v106) {
      goto LABEL_262;
    }
    uint64_t v103 = v95;
LABEL_265:
    unsigned int v94 = v191;
LABEL_266:
    *uint64_t v103 = v96;
LABEL_267:
    uint64_t v90 = v94 + 1;
    v93 += 8;
    if (v94 + 1 != a2) {
      continue;
    }
    return result;
  }
}

size_t **sub_1CCB0C0A8(size_t **a1, size_t **a2, size_t **a3, size_t **a4, size_t **a5)
{
  uint64_t result = sub_1CCB0C674(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  size_t v13 = **a5;
  size_t v14 = **a4;
  if (v14 >= v13) {
    size_t v15 = **a5;
  }
  else {
    size_t v15 = **a4;
  }
  if (v15)
  {
    uint64_t result = (size_t **)memcmp(v11 + 23, v12 + 23, v15);
    if ((result & 0x80000000) == 0)
    {
      BOOL v16 = result || v13 == v14;
      if (v16 || v13 >= v14) {
        return result;
      }
    }
  }
  else if (v13 >= v14)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  unsigned int v18 = *a4;
  size_t v19 = *a3;
  size_t v20 = **a4;
  size_t v21 = **a3;
  if (v21 >= v20) {
    size_t v22 = **a4;
  }
  else {
    size_t v22 = **a3;
  }
  if (v22)
  {
    uint64_t result = (size_t **)memcmp(v18 + 23, v19 + 23, v22);
    if ((result & 0x80000000) == 0)
    {
      BOOL v23 = result || v20 == v21;
      if (v23 || v20 >= v21) {
        return result;
      }
    }
  }
  else if (v20 >= v21)
  {
    return result;
  }
  *a3 = v18;
  *a4 = v19;
  BOOL v25 = *a3;
  size_t v26 = *a2;
  size_t v27 = **a3;
  size_t v28 = **a2;
  if (v28 >= v27) {
    size_t v29 = **a3;
  }
  else {
    size_t v29 = **a2;
  }
  if (v29)
  {
    uint64_t result = (size_t **)memcmp(v25 + 23, v26 + 23, v29);
    if ((result & 0x80000000) == 0)
    {
      BOOL v30 = result || v27 == v28;
      if (v30 || v27 >= v28) {
        return result;
      }
    }
  }
  else if (v27 >= v28)
  {
    return result;
  }
  *a2 = v25;
  *a3 = v26;
  uint64_t v32 = *a2;
  size_t v33 = *a1;
  size_t v34 = **a2;
  size_t v35 = **a1;
  if (v35 >= v34) {
    size_t v36 = **a2;
  }
  else {
    size_t v36 = **a1;
  }
  if (!v36)
  {
    if (v34 >= v35) {
      return result;
    }
    goto LABEL_54;
  }
  uint64_t result = (size_t **)memcmp(v32 + 23, v33 + 23, v36);
  if ((result & 0x80000000) != 0 || !result && v34 != v35 && v34 < v35)
  {
LABEL_54:
    *a1 = v32;
    *a2 = v33;
  }
  return result;
}

size_t **sub_1CCB0C23C(size_t **result, size_t **a2, size_t **a3)
{
  BOOL v5 = result;
  uint64_t v6 = *a2;
  uint64_t v7 = *result;
  size_t v8 = **a2;
  size_t v9 = **result;
  if (v9 >= v8) {
    size_t v10 = **a2;
  }
  else {
    size_t v10 = **result;
  }
  if (v10)
  {
    uint64_t result = (size_t **)memcmp(v6 + 23, v7 + 23, v10);
    if ((result & 0x80000000) != 0) {
      goto LABEL_29;
    }
    BOOL v11 = result || v8 == v9;
    if (!v11 && v8 < v9) {
      goto LABEL_29;
    }
LABEL_14:
    size_t v13 = *a3;
    size_t v14 = **a3;
    if (v8 >= v14) {
      size_t v15 = **a3;
    }
    else {
      size_t v15 = v8;
    }
    if (v15)
    {
      uint64_t result = (size_t **)memcmp(v13 + 23, v6 + 23, v15);
      if ((result & 0x80000000) == 0)
      {
        BOOL v16 = result || v14 == v8;
        if (v16 || v14 >= v8) {
          return result;
        }
      }
    }
    else if (v14 >= v8)
    {
      return result;
    }
    *a2 = v13;
    *a3 = v6;
    size_t v28 = *a2;
    size_t v29 = *v5;
    size_t v30 = **a2;
    size_t v31 = **v5;
    if (v31 >= v30) {
      size_t v32 = **a2;
    }
    else {
      size_t v32 = **v5;
    }
    if (v32)
    {
      uint64_t result = (size_t **)memcmp(v28 + 23, v29 + 23, v32);
      if ((result & 0x80000000) == 0)
      {
        BOOL v33 = result || v30 == v31;
        if (v33 || v30 >= v31) {
          return result;
        }
      }
    }
    else if (v30 >= v31)
    {
      return result;
    }
    *BOOL v5 = v28;
    *a2 = v29;
    return result;
  }
  if (v8 >= v9) {
    goto LABEL_14;
  }
LABEL_29:
  unsigned int v18 = *a3;
  size_t v19 = **a3;
  if (v8 >= v19) {
    size_t v20 = **a3;
  }
  else {
    size_t v20 = v8;
  }
  if (v20)
  {
    uint64_t result = (size_t **)memcmp(v18 + 23, v6 + 23, v20);
    if ((result & 0x80000000) != 0) {
      goto LABEL_57;
    }
    BOOL v21 = result || v19 == v8;
    if (!v21 && v19 < v8) {
      goto LABEL_57;
    }
  }
  else if (v19 < v8)
  {
LABEL_57:
    *BOOL v5 = v18;
LABEL_75:
    *a3 = v7;
    return result;
  }
  *BOOL v5 = v6;
  *a2 = v7;
  BOOL v23 = *a3;
  size_t v24 = **a3;
  if (v9 >= v24) {
    size_t v25 = **a3;
  }
  else {
    size_t v25 = v9;
  }
  if (!v25)
  {
    if (v24 >= v9) {
      return result;
    }
    goto LABEL_74;
  }
  uint64_t result = (size_t **)memcmp(v23 + 23, v7 + 23, v25);
  if ((result & 0x80000000) != 0
    || (!result ? (BOOL v26 = v24 == v9) : (BOOL v26 = 1), !v26 ? (v27 = v24 >= v9) : (v27 = 1), !v27))
  {
LABEL_74:
    *a2 = v23;
    goto LABEL_75;
  }
  return result;
}

BOOL sub_1CCB0C3F8(size_t **a1, size_t **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      size_t v8 = *v6;
      size_t v9 = **a1;
      if (v9 >= *v6) {
        size_t v10 = *v6;
      }
      else {
        size_t v10 = **a1;
      }
      if (v10)
      {
        int v11 = memcmp(v6 + 23, v7 + 23, v10);
        if (v11 < 0) {
          goto LABEL_61;
        }
        BOOL v12 = v11 || v8 == v9;
        if (!v12 && v8 < v9) {
          goto LABEL_61;
        }
        return 1;
      }
      else if (v8 < v9)
      {
LABEL_61:
        *a1 = v6;
        *(v2 - 1) = v7;
        return 1;
      }
      return result;
    case 3:
      sub_1CCB0C23C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CCB0C674(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CCB0C0A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      size_t v14 = a1 + 2;
      sub_1CCB0C23C(a1, a1 + 1, a1 + 2);
      size_t v15 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      size_t v35 = v2;
      while (2)
      {
        unsigned int v18 = *v15;
        size_t v19 = *v14;
        size_t v20 = **v15;
        size_t v21 = **v14;
        if (v21 >= v20) {
          size_t v22 = **v15;
        }
        else {
          size_t v22 = **v14;
        }
        if (v22)
        {
          int v23 = memcmp(v18 + 23, v19 + 23, v22);
          if ((v23 & 0x80000000) == 0)
          {
            BOOL v24 = v23 || v20 == v21;
            if (v24 || v20 >= v21) {
              goto LABEL_55;
            }
          }
        }
        else if (v20 >= v21)
        {
          goto LABEL_55;
        }
        *size_t v15 = v19;
        BOOL v26 = a1;
        if (v14 == a1) {
          goto LABEL_54;
        }
        int v37 = v17;
        size_t v36 = v18;
        BOOL v27 = v18 + 23;
        uint64_t v28 = v16;
        while (2)
        {
          size_t v29 = *(size_t **)((char *)a1 + v28 + 8);
          size_t v30 = *v29;
          if (*v29 >= v20) {
            size_t v31 = v20;
          }
          else {
            size_t v31 = *v29;
          }
          if (v31)
          {
            int v32 = memcmp(v27, v29 + 23, v31);
            if ((v32 & 0x80000000) == 0)
            {
              BOOL v33 = v32 || v20 == v30;
              if (v33 || v20 >= v30)
              {
                BOOL v26 = (size_t **)((char *)a1 + v28 + 16);
                goto LABEL_53;
              }
            }
LABEL_50:
            --v14;
            *(size_t **)((char *)a1 + v28 + 16) = v29;
            v28 -= 8;
            if (v28 == -16)
            {
              BOOL v26 = a1;
              goto LABEL_53;
            }
            continue;
          }
          break;
        }
        if (v20 < v30) {
          goto LABEL_50;
        }
        BOOL v26 = v14;
LABEL_53:
        uint64_t v2 = v35;
        unsigned int v18 = v36;
        int v17 = v37;
LABEL_54:
        *BOOL v26 = v18;
        if (++v17 != 8)
        {
LABEL_55:
          size_t v14 = v15;
          v16 += 8;
          if (++v15 == v2) {
            return 1;
          }
          continue;
        }
        return v15 + 1 == v2;
      }
  }
}

size_t **sub_1CCB0C674(size_t **a1, size_t **a2, size_t **a3, size_t **a4)
{
  BOOL result = sub_1CCB0C23C(a1, a2, a3);
  size_t v9 = *a4;
  size_t v10 = *a3;
  size_t v11 = **a4;
  size_t v12 = **a3;
  if (v12 >= v11) {
    size_t v13 = **a4;
  }
  else {
    size_t v13 = **a3;
  }
  if (v13)
  {
    BOOL result = (size_t **)memcmp(v9 + 23, v10 + 23, v13);
    if ((result & 0x80000000) == 0)
    {
      BOOL v14 = result || v11 == v12;
      if (v14 || v11 >= v12) {
        return result;
      }
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  uint64_t v16 = *a3;
  int v17 = *a2;
  size_t v18 = **a3;
  size_t v19 = **a2;
  if (v19 >= v18) {
    size_t v20 = **a3;
  }
  else {
    size_t v20 = **a2;
  }
  if (v20)
  {
    BOOL result = (size_t **)memcmp(v16 + 23, v17 + 23, v20);
    if ((result & 0x80000000) == 0)
    {
      BOOL v21 = result || v18 == v19;
      if (v21 || v18 >= v19) {
        return result;
      }
    }
  }
  else if (v18 >= v19)
  {
    return result;
  }
  *a2 = v16;
  *a3 = v17;
  int v23 = *a2;
  BOOL v24 = *a1;
  size_t v25 = **a2;
  size_t v26 = **a1;
  if (v26 >= v25) {
    size_t v27 = **a2;
  }
  else {
    size_t v27 = **a1;
  }
  if (!v27)
  {
    if (v25 >= v26) {
      return result;
    }
    goto LABEL_46;
  }
  BOOL result = (size_t **)memcmp(v23 + 23, v24 + 23, v27);
  if ((result & 0x80000000) != 0
    || (!result ? (BOOL v28 = v25 == v26) : (BOOL v28 = 1), !v28 ? (v29 = v25 >= v26) : (v29 = 1), !v29))
  {
LABEL_46:
    *a1 = v23;
    *a2 = v24;
  }
  return result;
}

char *sub_1CCB0C7AC(uint64_t a1, llvm::PointerType *a2, const char *a3, const char *a4)
{
  __int16 v8 = 261;
  v7[0] = a3;
  v7[1] = a4;
  BOOL v5 = llvm::Function::createWithDefaultAttr(a2, 7, 0, v7, *(llvm::Module **)(a1 + 104));
  *((_DWORD *)v5 + 8) = *((_DWORD *)v5 + 8) & 0xFFFFFF3F | 0x80;
  *((void *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 37);
  if (*(unsigned char *)(a1 + 6)) {
    *((void *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 31);
  }
  return v5;
}

void sub_1CCB0C85C()
{
}

void sub_1CCB0C888()
{
}

void sub_1CCB0C8B8()
{
}

void *sub_1CCB0C8CC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F262BEE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCB0C914(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262BEE0;
  a2[1] = v2;
  return result;
}

void sub_1CCB0C940()
{
}

uint64_t sub_1CCB0C96C()
{
  *(void *)&long long v2 = "408*";
  int v3 = 1;
  int v1 = 2;
  sub_1CD692B88((const char **)&v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBD091B0, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Make counter updates atomic";
  *((void *)&v2 + 1) = 27;
  sub_1CD4C1500((uint64_t)&unk_1EBD09298, "gcov-atomic-counter", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD09298, &dword_1CB82C000);
}

uint64_t sub_1CCB0CA38(uint64_t a1, uint64_t ***a2)
{
  v253[10] = *MEMORY[0x1E4F143B8];
  if ((a2[4] & 0xF) == 1) {
    return 0;
  }
  if (byte_1EBCE879F >= 0) {
    int v3 = &qword_1EBCE8788;
  }
  else {
    int v3 = (uint64_t *)qword_1EBCE8788;
  }
  if (byte_1EBCE879F >= 0) {
    size_t v4 = byte_1EBCE879F & 0x7F;
  }
  else {
    size_t v4 = unk_1EBCE8790;
  }
  int v5 = *((_DWORD *)a2 + 5);
  unsigned int v6 = a2 >> 4;
  if ((v5 & 0x10000000) == 0)
  {
    int v17 = 0;
    uint64_t v16 = &byte_1CFBCE98E;
    goto LABEL_17;
  }
  uint64_t v7 = ***a2;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (!v9) {
    goto LABEL_15;
  }
  LODWORD(v10) = (v9 - 1) & (v6 ^ (a2 >> 9));
  size_t v11 = (uint64_t ****)(v8 + 16 * v10);
  size_t v12 = *v11;
  if (*v11 != a2)
  {
    int v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      size_t v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        size_t v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_16;
      }
    }
LABEL_15:
    size_t v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_16:
  size_t v15 = v11[1];
  size_t v18 = *v15;
  uint64_t v16 = (char *)(v15 + 2);
  int v17 = v18;
LABEL_17:
  if ((uint64_t **)v4 != v17) {
    goto LABEL_20;
  }
  if (v4)
  {
    uint64_t result = memcmp(v3, v16, v4);
    if (!result) {
      return result;
    }
LABEL_20:
    if ((v5 & 0x10000000) == 0)
    {
      uint64_t v37 = 0;
      size_t v38 = &byte_1CFBCE98E;
LABEL_46:
      unsigned int v238 = v38;
      uint64_t v239 = v37;
      if (llvm::StringRef::find((uint64_t *)&v238, " load]", 6uLL, 0) != -1)
      {
        inited = (uint64_t **)llvm::declareSanitizerInitFunction((uint64_t)a2[5], "__memprof_init", (const char *)0xE, 0, 0);
        unint64_t v43 = v42;
        uint64_t v44 = a2[10];
        uint64_t v45 = v44 ? (uint64_t)(v44 - 3) : 0;
        sub_1CBF537B4((uint64_t)&v238, (uint64_t **)v45, *(void *)(v45 + 48), 0, 0, 0);
        __int16 v223 = 257;
        sub_1CB845BAC((uint64_t *)&v238, inited, v43, 0, 0, (uint64_t)&v220, 0);
        if (v238 != v240) {
          free(v238);
        }
      }
      uint64_t v46 = 0;
      uint64_t v195 = a2;
      uint64_t v47 = (uint64_t)a2[5];
      int v48 = *(uint64_t **)a1;
      unsigned int v238 = v240;
      uint64_t v239 = 0x200000000;
      uint64_t v243 = v48;
      unsigned int v244 = &v252;
      uint64_t v245 = v253;
      uint64_t v246 = 0;
      int v247 = 0;
      __int16 v248 = 512;
      char v249 = 7;
      uint64_t v242 = 0;
      uint64_t v241 = 0;
      uint64_t v251 = 0;
      uint64_t v250 = 0;
      size_t v252 = &unk_1F2616E88;
      v253[0] = &unk_1F2617008;
      char v49 = 1;
      do
      {
        char v50 = v49;
        if (v49) {
          size_t v51 = "load";
        }
        else {
          size_t v51 = "store";
        }
        if (v49) {
          size_t v52 = 4;
        }
        else {
          size_t v52 = 5;
        }
        char v209 = v52;
        memcpy(__dst, v51, v52);
        *(unsigned char *)((unint64_t)__dst | v52) = 0;
        uint64_t v53 = *(void *)(a1 + 16);
        uint64_t v220 = v222;
        v222[0] = v53;
        v222[1] = v53;
        uint64_t v221 = 0x300000002;
        unsigned int v211 = v213;
        uint64_t v212 = 0x200000000;
        sub_1CB90CB08((uint64_t)&v211, 1uLL, v53);
        sub_1CB906918((const void **)&qword_1EBCE86A0, __dst, (uint64_t)&v206);
        uint64_t v54 = std::string::append(&v206, "N");
        std::string::size_type v55 = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        uint64_t v217 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        if (v217 >= 0) {
          BOOL v56 = (unsigned __int8 *)__p;
        }
        else {
          BOOL v56 = (unsigned __int8 *)__p[0];
        }
        if (v217 >= 0) {
          uint64_t v57 = (const char *)(HIBYTE(v217) & 0x7F);
        }
        else {
          uint64_t v57 = (const char *)__p[1];
        }
        size_t v58 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v243 + 1576), (uint64_t)v220, v221, 0);
        inserted = llvm::Module::getOrInsertFunction(v47, v56, v57, v58, 0);
        uint64_t v60 = a1 + 16 * v46;
        *(void *)(v60 + 72) = inserted;
        *(void *)(v60 + 80) = v61;
        if (SHIBYTE(v217) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v206.__r_.__value_.__l.__data_);
        }
        sub_1CB906918((const void **)&qword_1EBCE86A0, __dst, (uint64_t)__p);
        if (v217 >= 0) {
          BOOL v62 = (unsigned __int8 *)__p;
        }
        else {
          BOOL v62 = (unsigned __int8 *)__p[0];
        }
        if (v217 >= 0) {
          uint64_t v63 = (const char *)(HIBYTE(v217) & 0x7F);
        }
        else {
          uint64_t v63 = (const char *)__p[1];
        }
        uint64_t v64 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v243 + 1576), (uint64_t)v211, v212, 0);
        size_t v65 = llvm::Module::getOrInsertFunction(v47, v62, v63, v64, 0);
        uint64_t v66 = a1 + 16 * v46;
        *(void *)(v66 + 40) = v65;
        *(void *)(v66 + 48) = v67;
        if (SHIBYTE(v217) < 0) {
          operator delete(__p[0]);
        }
        if (v211 != v213) {
          free(v211);
        }
        if (v220 != v222) {
          free(v220);
        }
        if (v209 < 0) {
          operator delete((void *)__dst[0]);
        }
        char v49 = 0;
        uint64_t v46 = 1;
      }
      while ((v50 & 1) != 0);
      if (byte_1EBCE86B7 >= 0) {
        size_t v68 = byte_1EBCE86B7 & 0x7F;
      }
      else {
        size_t v68 = qword_1EBCE86A8;
      }
      sub_1CB907098((uint64_t)&v220, v68 + 7);
      if (v222[0] >= 0) {
        uint64_t v69 = &v220;
      }
      else {
        uint64_t v69 = v220;
      }
      if (v68)
      {
        if (byte_1EBCE86B7 >= 0) {
          size_t v70 = &qword_1EBCE86A0;
        }
        else {
          size_t v70 = (uint64_t *)qword_1EBCE86A0;
        }
        memmove(v69, v70, v68);
      }
      strcpy((char *)v69 + v68, "memmove");
      if (v222[0] >= 0) {
        size_t v71 = (unsigned __int8 *)&v220;
      }
      else {
        size_t v71 = (unsigned __int8 *)v220;
      }
      if (v222[0] >= 0) {
        int v72 = (const char *)(HIBYTE(v222[0]) & 0x7F);
      }
      else {
        int v72 = (const char *)v221;
      }
      int v73 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      unint64_t v74 = llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      unint64_t v75 = llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      *(void *)(a1 + 104) = sub_1CD68E044(v47, v71, v72, 0, v73, v74, v75, *(void *)(a1 + 16));
      *(void *)(a1 + 112) = v76;
      if (SHIBYTE(v222[0]) < 0) {
        operator delete(v220);
      }
      if (byte_1EBCE86B7 >= 0) {
        size_t v77 = byte_1EBCE86B7 & 0x7F;
      }
      else {
        size_t v77 = qword_1EBCE86A8;
      }
      sub_1CB907098((uint64_t)&v220, v77 + 6);
      if (v222[0] >= 0) {
        uint64_t v78 = &v220;
      }
      else {
        uint64_t v78 = v220;
      }
      if (v77)
      {
        if (byte_1EBCE86B7 >= 0) {
          size_t v79 = &qword_1EBCE86A0;
        }
        else {
          size_t v79 = (uint64_t *)qword_1EBCE86A0;
        }
        memmove(v78, v79, v77);
      }
      strcpy((char *)v78 + v77, "memcpy");
      if (v222[0] >= 0) {
        size_t v80 = (unsigned __int8 *)&v220;
      }
      else {
        size_t v80 = (unsigned __int8 *)v220;
      }
      if (v222[0] >= 0) {
        BOOL v81 = (const char *)(HIBYTE(v222[0]) & 0x7F);
      }
      else {
        BOOL v81 = (const char *)v221;
      }
      int v82 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      unint64_t v83 = llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      unint64_t v84 = llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      *(void *)(a1 + 120) = sub_1CD68E044(v47, v80, v81, 0, v82, v83, v84, *(void *)(a1 + 16));
      *(void *)(a1 + 128) = v85;
      if (SHIBYTE(v222[0]) < 0) {
        operator delete(v220);
      }
      if (byte_1EBCE86B7 >= 0) {
        size_t v86 = byte_1EBCE86B7 & 0x7F;
      }
      else {
        size_t v86 = qword_1EBCE86A8;
      }
      sub_1CB907098((uint64_t)&v220, v86 + 6);
      if (v222[0] >= 0) {
        size_t v87 = &v220;
      }
      else {
        size_t v87 = v220;
      }
      if (v86)
      {
        if (byte_1EBCE86B7 >= 0) {
          BOOL v88 = &qword_1EBCE86A0;
        }
        else {
          BOOL v88 = (uint64_t *)qword_1EBCE86A0;
        }
        memmove(v87, v88, v86);
      }
      strcpy((char *)v87 + v86, "memset");
      if (v222[0] >= 0) {
        uint64_t v89 = (unsigned __int8 *)&v220;
      }
      else {
        uint64_t v89 = (unsigned __int8 *)v220;
      }
      if (v222[0] >= 0) {
        uint64_t v90 = (const char *)(HIBYTE(v222[0]) & 0x7F);
      }
      else {
        uint64_t v90 = (const char *)v221;
      }
      uint64_t v91 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      unint64_t v92 = llvm::PointerType::get((llvm::PointerType *)(*v243 + 1912), 0);
      *(void *)(a1 + 136) = sub_1CD68E044(v47, v89, v90, 0, v91, v92, *v243 + 1960, *(void *)(a1 + 16));
      *(void *)(a1 + 144) = v93;
      if (SHIBYTE(v222[0]) < 0) {
        operator delete(v220);
      }
      if (v238 != v240) {
        free(v238);
      }
      unsigned int v94 = 0;
      BOOL v95 = v195[10];
      if (v95) {
        uint64_t v96 = v95 - 3;
      }
      else {
        uint64_t v96 = 0;
      }
      uint64_t v97 = v96[6];
      if (v97) {
        size_t v98 = (uint64_t **)(v97 - 3);
      }
      else {
        size_t v98 = 0;
      }
      uint64_t v99 = **v98;
      uint64_t v220 = v222;
      uint64_t v221 = 0x200000000;
      uint64_t v227 = v99;
      char v228 = &v236;
      int v229 = &v237;
      uint64_t v230 = 0;
      int v231 = 0;
      __int16 v232 = 512;
      char v233 = 7;
      uint64_t v234 = 0;
      uint64_t v235 = 0;
      uint64_t v236 = &unk_1F2616E88;
      unsigned int v237 = &unk_1F2617008;
      unsigned int v225 = v98[5];
      std::string::size_type v226 = v98 + 3;
      size_t v100 = v98[6];
      unsigned int v211 = v100;
      if (v100)
      {
        llvm::MetadataTracking::track((uint64_t)&v211, (unsigned __int8 *)v100, 2);
        unsigned int v94 = v211;
      }
      sub_1CB8461A4((uint64_t)&v220, 0, (uint64_t)v94);
      if (!v211)
      {
LABEL_152:
        BOOL v101 = llvm::Module::getOrInsertGlobal((uint64_t)v195[5], "__memprof_shadow_memory_dynamic_address", 0x27uLL, *(llvm::PointerType **)(a1 + 16));
        size_t v102 = (llvm::Module *)v195[5];
        unsigned int v238 = v240;
        uint64_t v239 = 0x800000000;
        llvm::Module::getModuleFlagsMetadata(v102, (uint64_t)&v238);
        if (v239)
        {
          uint64_t v103 = (uint64_t *)((char *)v238 + 16);
          uint64_t v104 = 24 * v239;
          while (1)
          {
            uint64_t v105 = *(void *)(*(v103 - 1) + 8);
            if (*(void *)v105 == 9)
            {
              uint64_t v106 = *(void *)(v105 + 24);
              uint64_t v107 = *(unsigned __int8 *)(v105 + 32);
              if (*(void *)"PIC Level" == v106 && aPicLevel[8] == v107) {
                break;
              }
            }
            v103 += 3;
            v104 -= 24;
            if (!v104) {
              goto LABEL_163;
            }
          }
          uint64_t v109 = *v103;
        }
        else
        {
LABEL_163:
          uint64_t v109 = 0;
        }
        if (v238 == v240)
        {
          if (!v109)
          {
LABEL_166:
            *((_DWORD *)v101 + 8) |= 0x4000u;
LABEL_167:
            int64_t v110 = *(llvm::Type **)(a1 + 16);
            LOWORD(v214) = 257;
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v225[7] + 40) + 272), v110, 1);
            int64_t v112 = operator new(0x60uLL);
            v112[13] = v112[13] & 0x38000000 | 1;
            uint64_t v113 = (llvm::Instruction *)(v112 + 8);
            *(void *)int64_t v112 = 0;
            *((void *)v112 + 1) = 0;
            *((void *)v112 + 2) = 0;
            *((void *)v112 + 3) = v112 + 8;
            v240[8] = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v112 + 8), (uint64_t)v110, (uint64_t)v101, (const char **)&v238, 0, Alignment, 0);
            (*((void (**)(void **, llvm::Instruction *, void **, uint64_t *, uint64_t **))*v229 + 2))(v229, v113, &v211, v225, v226);
            int v114 = (llvm::MDNode **)v220;
            if (v221)
            {
              unsigned int v190 = (llvm::MDNode **)((char *)v220 + 16 * v221);
              do
              {
                llvm::Instruction::setMetadata(v113, *(_DWORD *)v114, v114[1]);
                v114 += 2;
              }
              while (v114 != v190);
              int v114 = (llvm::MDNode **)v220;
            }
            *(void *)(a1 + 152) = v113;
            if (v114 != v222) {
              free(v114);
            }
            unsigned int v238 = v240;
            uint64_t v239 = 0x1000000000;
            uint64_t v115 = (uint64_t ***)v195[10];
            if (v115 == v195 + 9) {
              return 1;
            }
            do
            {
              char v116 = v115 - 3;
              if (!v115) {
                char v116 = 0;
              }
              size_t v117 = (uint64_t **)(v116 + 5);
              for (uint64_t i = v116[6]; i != v117; uint64_t i = (uint64_t **)i[1])
              {
                if (i) {
                  uint64_t v119 = (uint64_t)(i - 3);
                }
                else {
                  uint64_t v119 = 0;
                }
                sub_1CCB0E808(&v220, *(void *)(a1 + 152), v119);
                if (v224 || (sub_1CBFB3AB0(v119) & 1) != 0)
                {
                  if (v239 >= (unint64_t)HIDWORD(v239)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v238 + v239) = v119;
                  LODWORD(v239) = v239 + 1;
                }
              }
              uint64_t v115 = (uint64_t ***)v115[1];
            }
            while (v115 != v195 + 9);
            int v120 = (uint64_t *)v238;
            if (!v239)
            {
LABEL_299:
              if (v120 != (uint64_t *)v240) {
                free(v120);
              }
              return 1;
            }
            int v121 = 0;
            unsigned int v196 = (char *)v238 + 8 * v239;
            while (1)
            {
              int v122 = (uint64_t **)*v120;
              if ((dword_1EBCE8520 & 0x80000000) == 0 && (dword_1EBCE85E0 & 0x80000000) == 0)
              {
                BOOL v123 = v121 >= dword_1EBCE8520 && v121 <= dword_1EBCE85E0;
                if (!v123) {
                  goto LABEL_283;
                }
              }
              sub_1CCB0E808(&v211, *(void *)(a1 + 152), *v120);
              unsigned int v197 = v120;
              if (!v215) {
                break;
              }
              size_t v124 = v195[5];
              uint64_t v201 = (uint64_t *)v211;
              if (byte_1EBCE83A0
                || *((unsigned char *)llvm::getUnderlyingObject((llvm *)v211, (const llvm::Value *)6) + 16) != 59)
              {
                uint64_t v125 = v214;
                if (v214)
                {
                  uint64_t v126 = v213[0];
                  uint64_t v200 = v213[0];
                  if ((*(_DWORD *)(v213[0] + 8) & 0xFE) == 0x12) {
                    uint64_t v126 = **(void **)(v213[0] + 16);
                  }
                  int v199 = v212;
                  sub_1CB83544C((uint64_t)(v124 + 34), v126);
                  if (v127 == 1) {
                  uint64_t v128 = *(unsigned int *)(v200 + 32);
                  }
                  uint64_t v198 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 16), 0, 0);
                  if (v128)
                  {
                    unint64_t v129 = 0;
                    while (1)
                    {
                      if (*(unsigned char *)(v125 + 16) != 10)
                      {
                        size_t v134 = 0;
                        uint64_t v135 = **v122;
                        uint64_t v220 = v222;
                        uint64_t v221 = 0x200000000;
                        uint64_t v227 = v135;
                        char v228 = &v236;
                        int v229 = &v237;
                        uint64_t v230 = 0;
                        int v231 = 0;
                        __int16 v232 = 512;
                        char v233 = 7;
                        unsigned int v225 = 0;
                        std::string::size_type v226 = 0;
                        uint64_t v234 = 0;
                        uint64_t v235 = 0;
                        uint64_t v236 = &unk_1F2616E88;
                        unsigned int v237 = &unk_1F2617008;
                        unsigned int v225 = v122[5];
                        std::string::size_type v226 = v122 + 3;
                        unsigned int v136 = v122[6];
                        __p[0] = v136;
                        if (v136)
                        {
                          llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v136, 2);
                          size_t v134 = __p[0];
                        }
                        sub_1CB8461A4((uint64_t)&v220, 0, (uint64_t)v134);
                        if (!__p[0])
                        {
LABEL_216:
                          __int16 v210 = 257;
                          size_t v138 = *(llvm::ConstantInt **)(*(void *)v227 + 1984);
                          unsigned int v139 = *(_DWORD *)(*(void *)v227 + 1992);
                          LODWORD(__p[1]) = v139 >> 8;
                          if (v139 >> 8 <= 0x40)
                          {
                            if (v139 <= 0xFF) {
                              unint64_t v140 = 0;
                            }
                            else {
                              unint64_t v140 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v139) + 63);
                            }
                            __p[0] = (void *)(v140 & v129);
                            uint64_t v141 = (unsigned __int8 *)llvm::ConstantInt::get(v138, (llvm::LLVMContext *)__p, v137);
                            if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                              MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                            }
                            unsigned int v142 = sub_1CB8445F4((uint64_t)&v220, (unsigned __int8 *)v125, v141, (uint64_t)__dst);
                            sub_1CD1290BC((uint64_t)v142, (uint64_t)v122);
                          }
                          operator new[]();
                        }
                        int v154 = *(unsigned __int8 *)__p[0];
                        if ((v154 - 4) > 0x1E)
                        {
                          if ((v154 - 3) >= 0xFFFFFFFE) {
                            size_t v158 = __p[0];
                          }
                          else {
                            size_t v158 = 0;
                          }
                          if ((v154 - 3) < 0xFFFFFFFE)
                          {
                            if (v154 == 3) {
                              *((void *)__p[0] + 1) = 0;
                            }
                            goto LABEL_216;
                          }
                          unint64_t v156 = (unint64_t)v158 + 8;
                        }
                        else
                        {
                          if ((*((unsigned char *)__p[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__p[0] + 3)) {
                            goto LABEL_216;
                          }
                          uint64_t v155 = *((void *)__p[0] + 2);
                          if ((v155 & 4) == 0) {
                            goto LABEL_216;
                          }
                          unint64_t v156 = v155 & 0xFFFFFFFFFFFFFFF8;
                          if (!v156) {
                            goto LABEL_216;
                          }
                        }
                        __dst[0] = __p;
                        sub_1CC5FA668(v156 + 16, __dst);
                        goto LABEL_216;
                      }
                      uint64_t v130 = *(void *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF) + 32 * v129);
                      if (v130) {
                        BOOL v131 = *(unsigned char *)(v130 + 16) == 16;
                      }
                      else {
                        BOOL v131 = 0;
                      }
                      size_t v132 = v122;
                      if (!v131) {
                        goto LABEL_222;
                      }
                      uint64_t v133 = *(unsigned int *)(v130 + 32);
                      if (v133 > 0x40) {
                        break;
                      }
                      size_t v132 = v122;
                      if (*(void *)(v130 + 24)) {
                        goto LABEL_222;
                      }
LABEL_227:
                      if (++v129 == v128) {
                        goto LABEL_282;
                      }
                    }
                    int v147 = 0;
                    int64_t v148 = (unint64_t)(v133 + 63) >> 6;
                    do
                    {
                      BOOL v123 = v148-- < 1;
                      if (v123) {
                        break;
                      }
                      unint64_t v149 = *(void *)(*(void *)(v130 + 24) + 8 * v148);
                      v147 += __clz(v149);
                    }
                    while (!v149);
                    int v150 = v133 | 0xFFFFFFC0;
                    if ((v133 & 0x3F) == 0) {
                      int v150 = 0;
                    }
                    size_t v132 = v122;
                    if (v147 + v150 == v133) {
                      goto LABEL_227;
                    }
LABEL_222:
                    uint64_t v143 = 0;
                    uint64_t v144 = **v132;
                    uint64_t v220 = v222;
                    uint64_t v221 = 0x200000000;
                    uint64_t v227 = v144;
                    char v228 = &v236;
                    int v229 = &v237;
                    uint64_t v230 = 0;
                    int v231 = 0;
                    __int16 v232 = 512;
                    char v233 = 7;
                    unsigned int v225 = 0;
                    std::string::size_type v226 = 0;
                    uint64_t v234 = 0;
                    uint64_t v235 = 0;
                    uint64_t v236 = &unk_1F2616E88;
                    unsigned int v237 = &unk_1F2617008;
                    unsigned int v225 = v132[5];
                    std::string::size_type v226 = v132 + 3;
                    uint64_t v145 = v132[6];
                    __p[0] = v145;
                    if (v145)
                    {
                      llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v145, 2);
                      uint64_t v143 = __p[0];
                    }
                    sub_1CB8461A4((uint64_t)&v220, 0, (uint64_t)v143);
                    if (!__p[0])
                    {
LABEL_225:
                      __p[0] = v198;
                      __p[1] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 16), v129, 0);
                      __int16 v210 = 257;
                      int v146 = (llvm::CastInst *)sub_1CC27CEC0((uint64_t *)&v220, v200, v201, (uint64_t *)__p, 2, (uint64_t)__dst);
                      sub_1CCB0EB14((uint64_t **)a1, v132, v146, v199 != 0);
                      if (v220 != v222) {
                        free(v220);
                      }
                      goto LABEL_227;
                    }
                    int v151 = *(unsigned __int8 *)__p[0];
                    if ((v151 - 4) > 0x1E)
                    {
                      if ((v151 - 3) >= 0xFFFFFFFE) {
                        uint64_t v157 = __p[0];
                      }
                      else {
                        uint64_t v157 = 0;
                      }
                      if ((v151 - 3) < 0xFFFFFFFE)
                      {
                        if (v151 == 3) {
                          *((void *)__p[0] + 1) = 0;
                        }
                        goto LABEL_225;
                      }
                      unint64_t v153 = (unint64_t)v157 + 8;
                    }
                    else
                    {
                      if ((*((unsigned char *)__p[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__p[0] + 3)) {
                        goto LABEL_225;
                      }
                      uint64_t v152 = *((void *)__p[0] + 2);
                      if ((v152 & 4) == 0) {
                        goto LABEL_225;
                      }
                      unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
                      if (!v153) {
                        goto LABEL_225;
                      }
                    }
                    __dst[0] = __p;
                    sub_1CC5FA668(v153 + 16, __dst);
                    goto LABEL_225;
                  }
                }
                else
                {
                  sub_1CCB0EB14((uint64_t **)a1, v122, (llvm::CastInst *)v201, v212);
                }
              }
LABEL_282:
              int v120 = v197;
LABEL_283:
              ++v121;
              if (++v120 == (uint64_t *)v196)
              {
                int v120 = (uint64_t *)v238;
                goto LABEL_299;
              }
            }
            size_t v159 = 0;
            uint64_t v160 = **v122;
            uint64_t v220 = v222;
            uint64_t v221 = 0x200000000;
            uint64_t v227 = v160;
            char v228 = &v236;
            int v229 = &v237;
            uint64_t v230 = 0;
            int v231 = 0;
            __int16 v232 = 512;
            char v233 = 7;
            unsigned int v225 = 0;
            std::string::size_type v226 = 0;
            uint64_t v234 = 0;
            uint64_t v235 = 0;
            uint64_t v236 = &unk_1F2616E88;
            unsigned int v237 = &unk_1F2617008;
            unsigned int v225 = v122[5];
            std::string::size_type v226 = v122 + 3;
            BOOL v161 = v122[6];
            __p[0] = v161;
            if (v161)
            {
              llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v161, 2);
              size_t v159 = __p[0];
            }
            sub_1CB8461A4((uint64_t)&v220, 0, (uint64_t)v159);
            if (!__p[0])
            {
LABEL_270:
              int v162 = *((_DWORD *)*(v122 - 4) + 9);
              if ((v162 - 196) >= 2)
              {
                if (v162 == 199)
                {
                  uint64_t v166 = a1;
                  size_t v167 = *(uint64_t ***)(a1 + 144);
                  uint64_t v202 = *(uint64_t ***)(a1 + 136);
                  size_t v176 = (llvm::CastInst *)v122[-4 * (*((_DWORD *)v122 + 5) & 0x7FFFFFF)];
                  BOOL v177 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v227 + 1912), 0);
                  __int16 v210 = 257;
                  v219[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v220, v176, v177, (uint64_t)__dst, v178);
                  unsigned int v179 = (llvm::CastInst *)v122[-4 * (*((_DWORD *)v122 + 5) & 0x7FFFFFF) + 4];
                  uint64_t v180 = (llvm::Type ***)(*(void *)v227 + 1960);
                  __int16 v218 = 257;
                  size_t v174 = sub_1CBF56614((uint64_t)&v220, v179, v180, 0, (uint64_t)__p, v181);
LABEL_280:
                  v219[1] = (uint64_t)v174;
                  size_t v182 = (llvm::CastInst *)v122[-4 * (*((_DWORD *)v122 + 5) & 0x7FFFFFF) + 8];
                  size_t v183 = *(llvm::Type ****)(v166 + 16);
                  __int16 v207 = 257;
                  v219[2] = (uint64_t)sub_1CBF56614((uint64_t)&v220, v182, v183, 0, (uint64_t)&v206, v175);
                  __int16 v205 = 257;
                  sub_1CB845BAC((uint64_t *)&v220, v202, v167, v219, 3, (uint64_t)&v204, 0);
LABEL_281:
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                if (v162 != 194) {
                  goto LABEL_281;
                }
              }
              BOOL v163 = v162 == 197;
              uint64_t v164 = 120;
              if (v163) {
                uint64_t v164 = 104;
              }
              uint64_t v165 = a1 + 104;
              if (!v163) {
                uint64_t v165 = a1 + 120;
              }
              uint64_t v166 = a1;
              uint64_t v202 = *(uint64_t ***)(a1 + v164);
              size_t v167 = *(uint64_t ***)(v165 + 8);
              BOOL v168 = (llvm::CastInst *)v122[-4 * (*((_DWORD *)v122 + 5) & 0x7FFFFFF)];
              uint64_t v169 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v227 + 1912), 0);
              __int16 v210 = 257;
              v219[0] = (uint64_t)sub_1CC277FE0((uint64_t)&v220, v168, v169, (uint64_t)__dst, v170);
              int v171 = (llvm::CastInst *)v122[-4 * (*((_DWORD *)v122 + 5) & 0x7FFFFFF) + 4];
              unsigned int v172 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v227 + 1912), 0);
              __int16 v218 = 257;
              size_t v174 = sub_1CC277FE0((uint64_t)&v220, v171, v172, (uint64_t)__p, v173);
              goto LABEL_280;
            }
            int v184 = *(unsigned __int8 *)__p[0];
            if ((v184 - 4) > 0x1E)
            {
              if ((v184 - 3) >= 0xFFFFFFFE) {
                unsigned int v187 = __p[0];
              }
              else {
                unsigned int v187 = 0;
              }
              if ((v184 - 3) < 0xFFFFFFFE)
              {
                if (v184 == 3) {
                  *((void *)__p[0] + 1) = 0;
                }
                goto LABEL_270;
              }
              unint64_t v186 = (unint64_t)v187 + 8;
            }
            else
            {
              if ((*((unsigned char *)__p[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__p[0] + 3)) {
                goto LABEL_270;
              }
              uint64_t v185 = *((void *)__p[0] + 2);
              if ((v185 & 4) == 0) {
                goto LABEL_270;
              }
              unint64_t v186 = v185 & 0xFFFFFFFFFFFFFFF8;
              if (!v186) {
                goto LABEL_270;
              }
            }
            __dst[0] = __p;
            sub_1CC5FA668(v186 + 16, __dst);
            goto LABEL_270;
          }
        }
        else
        {
          free(v238);
          if (!v109) {
            goto LABEL_166;
          }
        }
        uint64_t v188 = *(void *)(v109 + 128);
        uint64_t v189 = (void *)(v188 + 24);
        if (*(_DWORD *)(v188 + 32) >= 0x41u) {
          uint64_t v189 = (void *)*v189;
        }
        if (*(_DWORD *)v189) {
          goto LABEL_167;
        }
        goto LABEL_166;
      }
      int v191 = *(unsigned __int8 *)v211;
      if ((v191 - 4) > 0x1E)
      {
        if ((v191 - 3) >= 0xFFFFFFFE) {
          unsigned int v194 = v211;
        }
        else {
          unsigned int v194 = 0;
        }
        if ((v191 - 3) < 0xFFFFFFFE)
        {
          if (v191 == 3) {
            *((void *)v211 + 1) = 0;
          }
          goto LABEL_152;
        }
        unint64_t v193 = (unint64_t)v194 + 8;
      }
      else
      {
        if ((*((unsigned char *)v211 + 1) & 0x7F) != 2 && !*((_DWORD *)v211 + 3)) {
          goto LABEL_152;
        }
        uint64_t v192 = *((void *)v211 + 2);
        if ((v192 & 4) == 0) {
          goto LABEL_152;
        }
        unint64_t v193 = v192 & 0xFFFFFFFFFFFFFFF8;
        if (!v193) {
          goto LABEL_152;
        }
      }
      unsigned int v238 = &v211;
      sub_1CC5FA668(v193 + 16, &v238);
      goto LABEL_152;
    }
    uint64_t v20 = ***a2;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & (v6 ^ (a2 >> 9));
      BOOL v24 = (uint64_t ****)(v21 + 16 * v23);
      size_t v25 = *v24;
      if (*v24 == a2)
      {
LABEL_28:
        BOOL v28 = v24[1];
        if ((unint64_t)*v28 < 0xA
          || ((BOOL v29 = v28[2], v30 = *((unsigned __int16 *)v28 + 12), v29 == (uint64_t **)0x6F72706D656D5F5FLL)
            ? (BOOL v31 = v30 == 24422)
            : (BOOL v31 = 0),
              !v31))
        {
          if (v22)
          {
            LODWORD(v32) = (v22 - 1) & (v6 ^ (a2 >> 9));
            BOOL v33 = (uint64_t ****)(v21 + 16 * v32);
            size_t v34 = *v33;
            if (*v33 == a2)
            {
LABEL_45:
              size_t v39 = v33[1];
              uint64_t v40 = (uint64_t)*v39;
              size_t v38 = (char *)(v39 + 2);
              uint64_t v37 = v40;
              goto LABEL_46;
            }
            int v35 = 1;
            while (v34 != (uint64_t ***)-4096)
            {
              int v36 = v32 + v35++;
              uint64_t v32 = v36 & (v22 - 1);
              size_t v34 = *(uint64_t ****)(v21 + 16 * v32);
              if (v34 == a2)
              {
                BOOL v33 = (uint64_t ****)(v21 + 16 * v32);
                goto LABEL_45;
              }
            }
          }
          BOOL v33 = (uint64_t ****)(v21 + 16 * v22);
          goto LABEL_45;
        }
        return 0;
      }
      int v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        size_t v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == a2)
        {
          BOOL v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_28;
        }
      }
    }
    BOOL v24 = (uint64_t ****)(v21 + 16 * v22);
    goto LABEL_28;
  }
  return 0;
}

uint64_t sub_1CCB0E0DC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 48) = dword_1EBCE8220;
  int v3 = dword_1EBCE82E0;
  *(_DWORD *)(a1 + 52) = dword_1EBCE82E0;
  *(void *)(a1 + 56) = -v3;
  *(void *)(a1 + 64) = 0;
  __int16 v6 = 260;
  v5[0] = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&v7, (const llvm::Twine *)v5);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = v7;
  *(void *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = v10;
  return a1;
}

void sub_1CCB0E184(uint64_t a1, llvm::Module *a2)
{
  std::to_string(&v3, 1);
  if (byte_1EBCE7E60) {
    std::operator+<char>();
  }
  llvm::createSanitizerCtorAndInitFunctions(a2, "memprof.module_ctor", (const char *)0x13, "__memprof_init", (const char *)0xE, 0, 0);
}

void llvm::initializeMemProfilerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  long long v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE7DD0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB0E304;
    v4[1] = &v2;
    std::string v3 = v4;
    std::__call_once(&qword_1EBCE7DD0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB0E304()
{
}

uint64_t sub_1CCB0E3A0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE7DC8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262BF28;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE7DD0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCB0E304;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCE7DD0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::initializeModuleMemProfilerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  long long v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE7DD8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB0E4C0;
    v4[1] = &v2;
    std::string v3 = v4;
    std::__call_once(&qword_1EBCE7DD8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB0E4C0()
{
}

uint64_t sub_1CCB0E55C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE7DC9;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262BFC8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE7DD8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCB0E4C0;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCE7DD8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCB0E60C()
{
}

void sub_1CCB0E64C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB0E684()
{
  return "MemProfilerFunctionPass";
}

uint64_t sub_1CCB0E694(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  int v8 = dword_1EBCE8220;
  int v9 = dword_1EBCE82E0;
  uint64_t v10 = -dword_1EBCE82E0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  int v5 = *(llvm::IntegerType **)v3;
  unsigned int v6 = *(_DWORD *)(*(void *)(v3 + 504) + 4);
  uint64_t v7 = llvm::IntegerType::get(v5, (llvm::LLVMContext *)v6);
  return sub_1CCB0CA38((uint64_t)&v5, (uint64_t ***)a2);
}

void sub_1CCB0E72C()
{
}

void sub_1CCB0E76C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCB0E7A4()
{
  return "ModuleMemProfiler";
}

void sub_1CCB0E7B8(uint64_t a1, llvm::Module *a2)
{
  sub_1CCB0E0DC((uint64_t)__p, (uint64_t)a2);
  sub_1CCB0E184((uint64_t)__p, a2);
}

unsigned char *sub_1CCB0E808(unsigned char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a2 == a3) {
    goto LABEL_36;
  }
  int v4 = *(unsigned __int8 *)(a3 + 16);
  if (!a3 || v4 != 60)
  {
    if (a3 && v4 == 61)
    {
      char v5 = byte_1EBCE7FE0;
      if (byte_1EBCE7FE0)
      {
        uint64_t v6 = 0;
        uint64_t v8 = **(void **)(a3 - 64);
        LOBYTE(v7) = 1;
        uint64_t v9 = 1 << ((unint64_t)*(unsigned __int16 *)(a3 + 18) >> 1);
        uint64_t v10 = *(uint64_t **)(a3 - 32);
        if (!v10) {
          goto LABEL_36;
        }
        goto LABEL_21;
      }
LABEL_37:
      void *result = 0;
      goto LABEL_38;
    }
    if (a3 && v4 == 65)
    {
      char v5 = byte_1EBCE80A0;
      if (!byte_1EBCE80A0) {
        goto LABEL_37;
      }
      uint64_t v6 = 0;
      LODWORD(v9) = 0;
      uint64_t v8 = **(void **)(a3 - 32);
      uint64_t v10 = *(uint64_t **)(a3 - 64);
    }
    else
    {
      if (!a3 || v4 != 64)
      {
        if (!a3) {
          goto LABEL_36;
        }
        if (v4 != 84) {
          goto LABEL_36;
        }
        uint64_t v16 = *(void *)(a3 - 32);
        if (!v16 || *(unsigned char *)(v16 + 16) || *(void *)(v16 + 24) != *(void *)(a3 + 72)) {
          goto LABEL_36;
        }
        int v17 = *(_DWORD *)(v16 + 36);
        if (v17 == 185)
        {
          char v5 = byte_1EBCE7F20;
          if (!byte_1EBCE7F20) {
            goto LABEL_37;
          }
          unsigned int v7 = 0;
          uint64_t v19 = -(uint64_t)(*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
          uint64_t v20 = (uint64_t *)a3;
        }
        else
        {
          if (v17 != 187) {
            goto LABEL_36;
          }
          char v5 = byte_1EBCE7FE0;
          if (!byte_1EBCE7FE0) {
            goto LABEL_37;
          }
          uint64_t v18 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
          uint64_t v19 = -v18;
          uint64_t v20 = *(uint64_t **)(a3 - 32 * v18);
          unsigned int v7 = 1;
        }
        uint64_t v21 = a3 + 32 * v19;
        uint64_t v10 = *(uint64_t **)(v21 + 32 * v7);
        uint64_t v8 = *v20;
        uint64_t v22 = *(void *)(v21 + 32 * (v7 + 1));
        LODWORD(v9) = 1;
        if (v22 && *(unsigned char *)(v22 + 16) == 16)
        {
          uint64_t v23 = (void *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u) {
            uint64_t v23 = (void *)*v23;
          }
          LODWORD(v9) = *(_DWORD *)v23;
        }
        uint64_t v6 = *(void *)(v21 + 32 * (v7 | 2));
        if (!v10) {
          goto LABEL_36;
        }
        goto LABEL_21;
      }
      char v5 = byte_1EBCE80A0;
      if (!byte_1EBCE80A0) {
        goto LABEL_37;
      }
      uint64_t v6 = 0;
      LODWORD(v9) = 0;
      uint64_t v8 = **(void **)(a3 - 64);
      uint64_t v10 = *(uint64_t **)(a3 - 96);
    }
    LOBYTE(v7) = 1;
    if (v10) {
      goto LABEL_21;
    }
LABEL_36:
    char v5 = 0;
    goto LABEL_37;
  }
  char v5 = byte_1EBCE7F20;
  if (!byte_1EBCE7F20) {
    goto LABEL_37;
  }
  uint64_t v6 = 0;
  LOBYTE(v7) = 0;
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = 1 << ((unint64_t)*(unsigned __int16 *)(a3 + 18) >> 1);
  uint64_t v10 = *(uint64_t **)(a3 - 32);
  if (!v10) {
    goto LABEL_36;
  }
LABEL_21:
  uint64_t v11 = *v10;
  unsigned int v12 = *(_DWORD *)(*v10 + 8);
  if ((v12 & 0xFE) == 0x12)
  {
    uint64_t v11 = **(void **)(v11 + 16);
    unsigned int v12 = *(_DWORD *)(v11 + 8);
  }
  if ((v12 & 0xFE) == 0x12) {
    unsigned int v12 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
  }
  if (v12 >= 0x100) {
    goto LABEL_36;
  }
  int v13 = *((unsigned __int8 *)v10 + 16);
  if (v13 == 59)
  {
    if ((*((_WORD *)v10 + 9) & 0x80) != 0) {
      goto LABEL_36;
    }
  }
  else if (v13 == 21)
  {
    uint64_t v24 = *(void *)(v10[3] + 112);
    if (v24)
    {
      unsigned int v25 = *((_DWORD *)v10 + 8) + 2;
      if (v25 < *(_DWORD *)(v24 + 8))
      {
        uint64_t v26 = *(void *)(v24 + 8 * v25 + 40);
        if (v26)
        {
          if (*(char *)(v26 + 19) < 0) {
            goto LABEL_36;
          }
        }
      }
    }
  }
  uint64_t result = (unsigned char *)sub_1CB83544C(*(void *)(*(void *)(*(void *)(a3 + 40) + 56) + 40) + 272, v8);
  unint64_t v15 = (unint64_t)(result + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v14 == 1)
  {
    unint64_t v27 = (unint64_t)(result + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = v27;
  }
  *(void *)uint64_t v3 = v10;
  v3[8] = v7;
  *((_DWORD *)v3 + 3) = v9;
  *((void *)v3 + 2) = v8;
  *((void *)v3 + 3) = v15;
  char v5 = 1;
  *((void *)v3 + 4) = v6;
LABEL_38:
  v3[40] = v5;
  return result;
}

void sub_1CCB0EB14(uint64_t **a1, uint64_t **a2, llvm::CastInst *a3, unsigned int a4)
{
  uint64_t v7 = 0;
  v82[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = **a2;
  uint64_t v67 = v69;
  uint64_t v68 = 0x200000000;
  uint64_t v72 = v8;
  int v73 = &v81;
  unint64_t v74 = v82;
  uint64_t v75 = 0;
  int v76 = 0;
  __int16 v77 = 512;
  char v78 = 7;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  BOOL v81 = &unk_1F2616E88;
  v82[0] = &unk_1F2617008;
  uint64_t v9 = a2 + 3;
  uint64_t v11 = a2[5];
  uint64_t v10 = (unsigned __int8 *)a2[6];
  size_t v70 = v11;
  size_t v71 = v9;
  v61[0] = v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v61, v10, 2);
    uint64_t v7 = v61[0];
  }
  sub_1CB8461A4((uint64_t)&v67, 0, v7);
  if (v61[0])
  {
    int v51 = *(unsigned __int8 *)v61[0];
    if ((v51 - 4) > 0x1E)
    {
      if ((v51 - 3) >= 0xFFFFFFFE) {
        uint64_t v56 = v61[0];
      }
      else {
        uint64_t v56 = 0;
      }
      if ((v51 - 3) < 0xFFFFFFFE)
      {
        if (v51 == 3) {
          *(void *)(v61[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v53 = v56 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v61[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v61[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v52 = *(void *)(v61[0] + 16);
      if ((v52 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        goto LABEL_4;
      }
    }
    uint64_t v64 = (const char *)v61;
    sub_1CC5FA668(v53 + 16, &v64);
  }
LABEL_4:
  int v13 = (llvm::Value *)a1[2];
  __int16 v66 = 257;
  long long v14 = sub_1CC277FE0((uint64_t)&v67, a3, v13, (uint64_t)&v64, v12);
  uint64_t v63 = v14;
  if (byte_1EBCE8160)
  {
    unint64_t v15 = &a1[2 * a4];
    uint64_t v16 = (uint64_t **)v15[5];
    int v17 = (uint64_t **)v15[6];
    __int16 v66 = 257;
    sub_1CB845BAC((uint64_t *)&v67, v16, v17, (uint64_t *)&v63, 1, (uint64_t)&v64, 0);
  }
  else
  {
    uint64_t v18 = (llvm::ConstantInt **)v14;
    uint64_t v19 = (llvm::PointerType *)(**a1 + 1984);
    unint64_t v20 = llvm::PointerType::get(v19, 0);
    unint64_t v21 = (unint64_t)a1[4];
    __int16 v66 = 257;
    uint64_t v22 = llvm::ConstantInt::get(*v18, v21, 0);
    uint64_t v23 = (llvm::ConstantInt **)sub_1CBF52474((uint64_t)&v67, v18, (uint64_t)v22, (uint64_t)&v64);
    unint64_t v24 = *((int *)a1 + 6);
    __int16 v66 = 257;
    unsigned int v25 = llvm::ConstantInt::get(*v23, v24, 0);
    uint64_t v26 = sub_1CC2429AC((uint64_t)&v67, (uint64_t)v23, (uint64_t)v25, (uint64_t)&v64, 0);
    uint64_t v27 = (uint64_t)a1[19];
    __int16 v66 = 257;
    BOOL v28 = sub_1CB844A3C((uint64_t)&v67, v26, v27, (uint64_t)&v64, 0, 0);
    BOOL v29 = v28;
    __int16 v62 = 257;
    if (*(void *)v28 != v20)
    {
      if (*((unsigned __int8 *)v28 + 16) <= 0x14u)
      {
        uint64_t v32 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, unint64_t))*v73 + 28))(v73, 48, v28, v20);
        BOOL v29 = (llvm::Value *)v32;
        if (v32)
        {
          if (*(unsigned __int8 *)(v32 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v74 + 16))(v74, v32, v61, v70, v71);
            if (v68)
            {
              size_t v59 = (llvm::MDNode **)v67;
              uint64_t v60 = (llvm::MDNode **)((char *)v67 + 16 * v68);
              do
              {
                llvm::Instruction::setMetadata(v29, *(_DWORD *)v59, v59[1]);
                v59 += 2;
              }
              while (v59 != v60);
            }
          }
        }
      }
      else
      {
        __int16 v66 = 257;
        BOOL v29 = llvm::CastInst::Create(48, (uint64_t)v28, v20, &v64, 0);
        (*(void (**)(void *, llvm::Value *, void *, uint64_t *, uint64_t **))(*v74 + 16))(v74, v29, v61, v70, v71);
        if (v68)
        {
          int v30 = (llvm::MDNode **)v67;
          BOOL v31 = (llvm::MDNode **)((char *)v67 + 16 * v68);
          do
          {
            llvm::Instruction::setMetadata(v29, *(_DWORD *)v30, v30[1]);
            v30 += 2;
          }
          while (v30 != v31);
        }
      }
    }
    __int16 v62 = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v70[7] + 40) + 272), v19, 1);
    size_t v34 = operator new(0x60uLL);
    v34[13] = v34[13] & 0x38000000 | 1;
    int v35 = (llvm::Instruction *)(v34 + 8);
    *(void *)size_t v34 = 0;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = 0;
    *((void *)v34 + 3) = v34 + 8;
    __int16 v66 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v34 + 8), (uint64_t)v19, (uint64_t)v29, &v64, 0, Alignment, 0);
    (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v74 + 16))(v74, v35, v61, v70, v71);
    if (v68)
    {
      uint64_t v54 = (llvm::MDNode **)v67;
      std::string::size_type v55 = (llvm::MDNode **)((char *)v67 + 16 * v68);
      do
      {
        llvm::Instruction::setMetadata(v35, *(_DWORD *)v54, v54[1]);
        v54 += 2;
      }
      while (v54 != v55);
    }
    uint64_t v37 = **a1;
    size_t v38 = *(llvm::ConstantInt **)(v37 + 1984);
    unint64_t v39 = *(unsigned int *)(v37 + 1992);
    unsigned int v65 = v39 >> 8;
    if (v39 >> 8 > 0x40) {
      operator new[]();
    }
    if (v39 <= 0xFF) {
      LOBYTE(v40) = 0;
    }
    else {
      unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
    }
    uint64_t v64 = (const char *)(v40 & 1);
    BOOL v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v64, v36);
    if (v65 >= 0x41 && v64) {
      MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
    }
    __int16 v66 = 257;
    uint64_t v42 = sub_1CB844A3C((uint64_t)&v67, v35, (uint64_t)v41, (uint64_t)&v64, 0, 0);
    char v43 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v70[7] + 40) + 272), *(llvm::Type **)v42, 1);
    uint64_t v44 = (char *)operator new(0x80uLL);
    *((_DWORD *)v44 + 21) = *((_DWORD *)v44 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v44 = 0;
    *((void *)v44 + 2) = 0;
    *((void *)v44 + 1) = 0;
    *((void *)v44 + 5) = 0;
    *((void *)v44 + 6) = 0;
    *((void *)v44 + 4) = 0;
    *((void *)v44 + 8) = ***(void ***)v42 + 1576;
    uint64_t v45 = (llvm::Instruction *)(v44 + 64);
    *((void *)v44 + 3) = v44 + 64;
    *((void *)v44 + 7) = v44 + 64;
    *((void *)v44 + 9) = 0;
    v44[80] = 61;
    v44[81] = 0;
    *((_DWORD *)v44 + 21) = 2;
    *(_OWORD *)(v44 + 88) = 0u;
    *(_OWORD *)(v44 + 104) = 0u;
    *((_DWORD *)v44 + 30) = 0;
    uint64_t v46 = (void *)((char *)v42 + 8);
    uint64_t v47 = *((void *)v42 + 1);
    *(void *)uint64_t v44 = v42;
    *((void *)v44 + 1) = v47;
    if (v47) {
      *(void *)(v47 + 16) = v44 + 8;
    }
    *((void *)v44 + 2) = v46;
    void *v46 = v44;
    *((void *)v44 + 4) = v29;
    if (v29)
    {
      uint64_t v50 = *((void *)v29 + 1);
      char v49 = (void *)((char *)v29 + 8);
      uint64_t v48 = v50;
      *((void *)v44 + 5) = v50;
      if (v50) {
        *(void *)(v48 + 16) = v44 + 40;
      }
      *((void *)v44 + 6) = v49;
      *char v49 = v44 + 32;
    }
    *((_WORD *)v44 + 41) = 2 * (v43 & 0x3F);
    v44[124] = 1;
    __int16 v66 = 257;
    (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, uint64_t **))(*v74 + 16))(v74, v45, &v64, v70, v71);
    if (v68)
    {
      uint64_t v57 = (llvm::MDNode **)v67;
      size_t v58 = (llvm::MDNode **)((char *)v67 + 16 * v68);
      do
      {
        llvm::Instruction::setMetadata(v45, *(_DWORD *)v57, v57[1]);
        v57 += 2;
      }
      while (v57 != v58);
    }
  }
  if (v67 != v69) {
    free(v67);
  }
}

uint64_t sub_1CCB0F250()
{
  v4.n128_u64[0] = (unint64_t)"Guard against compiler/runtime version mismatch.";
  v4.n128_u64[1] = 48;
  int v3 = 1;
  LOBYTE(v1) = 1;
  long long v2 = (const char *)&v1;
  sub_1CD693088(&v4, &v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE7DE0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"instrument read instructions";
  v4.n128_u64[1] = 28;
  int v3 = 1;
  LOBYTE(v1) = 1;
  long long v2 = (const char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7EA0, "memprof-instrument-reads", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7EA0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"instrument write instructions";
  v4.n128_u64[1] = 29;
  int v3 = 1;
  LOBYTE(v1) = 1;
  long long v2 = (const char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE7F60, "memprof-instrument-writes", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE7F60, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"instrument atomic instructions (rmw, cmpxchg)";
  v4.n128_u64[1] = 45;
  int v3 = 1;
  LOBYTE(v1) = 1;
  long long v2 = (const char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8020, "memprof-instrument-atomics", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8020, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Use callbacks instead of inline instrumentation sequences.";
  v4.n128_u64[1] = 58;
  int v3 = 1;
  LOBYTE(v1) = 0;
  long long v2 = (const char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE80E0, "memprof-use-callbacks", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE80E0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Prefix for memory access callbacks";
  v4.n128_u64[1] = 34;
  int v3 = 1;
  long long v2 = "__memprof_";
  sub_1CD693200((long long *)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE8620, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"scale of memprof shadow mapping";
  v4.n128_u64[1] = 31;
  int v3 = 1;
  long long v2 = (const char *)&unk_1CFB27FF0;
  sub_1CD6933F4((long long *)&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE81A0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"granularity of memprof shadow mapping";
  v4.n128_u64[1] = 37;
  int v3 = 1;
  long long v2 = (const char *)&unk_1CFB27FF8;
  sub_1CD69351C((long long *)&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE8260, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Instrument scalar stack variables";
  v4.n128_u64[1] = 33;
  int v3 = 1;
  LOBYTE(v1) = 0;
  long long v2 = (const char *)&v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE8320, "memprof-instrument-stack", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE8320, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"debug";
  v4.n128_u64[1] = 5;
  int v3 = 1;
  int v1 = 0;
  long long v2 = (const char *)&v1;
  sub_1CD693644(&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE83E0, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Debug func";
  v4.n128_u64[1] = 10;
  sub_1CD45DC8C((uint64_t)&unk_1EBCE8708, "memprof-debug-func", &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCE8708, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Debug min inst";
  v4.n128_u64[1] = 14;
  int v3 = 1;
  int v1 = -1;
  long long v2 = (const char *)&v1;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBCE84A0, "memprof-debug-min", &v4, &v3, (_DWORD **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCE84A0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Debug max inst";
  v4.n128_u64[1] = 14;
  int v3 = 1;
  int v1 = -1;
  long long v2 = (const char *)&v1;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBCE8560, "memprof-debug-max", &v4, &v3, (_DWORD **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCE8560, &dword_1CB82C000);
}

uint64_t llvm::MemorySanitizerOptions::MemorySanitizerOptions(uint64_t this, int a2, char a3, BOOL a4, BOOL a5)
{
  BOOL v5 = byte_1EBD09618 != 0;
  if (!word_1EBD095A0) {
    BOOL v5 = a4;
  }
  *(unsigned char *)this = v5;
  if (v5) {
    int v6 = 2;
  }
  else {
    int v6 = a2;
  }
  if (word_1EBD09360) {
    int v6 = dword_1EBD093D8;
  }
  *(_DWORD *)(this + 4) = v6;
  char v7 = v5 | a3;
  BOOL v8 = byte_1EBD09498 != 0;
  if (!word_1EBD09420) {
    BOOL v8 = v7;
  }
  *(unsigned char *)(this + 8) = v8;
  BOOL v9 = byte_1EBD09558 != 0;
  if (!word_1EBD094E0) {
    BOOL v9 = a5;
  }
  *(unsigned char *)(this + 9) = v9;
  return this;
}

{
  BOOL v5;
  int v6;
  char v7;
  BOOL v8;
  BOOL v9;

  BOOL v5 = byte_1EBD09618 != 0;
  if (!word_1EBD095A0) {
    BOOL v5 = a4;
  }
  *(unsigned char *)this = v5;
  if (v5) {
    int v6 = 2;
  }
  else {
    int v6 = a2;
  }
  if (word_1EBD09360) {
    int v6 = dword_1EBD093D8;
  }
  *(_DWORD *)(this + 4) = v6;
  char v7 = v5 | a3;
  BOOL v8 = byte_1EBD09498 != 0;
  if (!word_1EBD09420) {
    BOOL v8 = v7;
  }
  *(unsigned char *)(this + 8) = v8;
  BOOL v9 = byte_1EBD09558 != 0;
  if (!word_1EBD094E0) {
    BOOL v9 = a5;
  }
  *(unsigned char *)(this + 9) = v9;
  return this;
}

uint64_t sub_1CCB0F6FC(uint64_t a1, llvm::IntegerType **a2, uint64_t a3, __int16 a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = a3 & 1;
  *(_DWORD *)(a1 + 4) = HIDWORD(a3);
  *(unsigned char *)(a1 + 8) = a4 & 1;
  *(unsigned char *)(a1 + 9) = HIBYTE(a4) & 1;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  if ((unsigned __int16)word_1EBCE9418 | (unsigned __int16)word_1EBCE94E0)
  {
    *(void *)(a1 + 600) = qword_1EBCE9300;
    *(void *)(a1 + 608) = qword_1EBCE93C8;
    *(void *)(a1 + 616) = qword_1EBCE9490;
    *(void *)(a1 + 624) = qword_1EBCE9558;
    *(void *)(a1 + 592) = a1 + 600;
    goto LABEL_28;
  }
  __int16 v33 = 260;
  uint64_t v30 = (uint64_t)(a2 + 27);
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v30);
  if (v16 == 12)
  {
    if (v15 == 42)
    {
      int v6 = &unk_1CFB28120;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  if (v16 == 9)
  {
    if (v15 <= 22)
    {
      if ((v15 - 3) < 2)
      {
        int v6 = &unk_1CFB281E0;
        goto LABEL_26;
      }
      if ((v15 - 18) < 2)
      {
        int v6 = &unk_1CFB28180;
        goto LABEL_26;
      }
    }
    else if (v15 > 40)
    {
      if (v15 == 42)
      {
        int v6 = &unk_1CFB28160;
        goto LABEL_26;
      }
      if (v15 == 41)
      {
        int v6 = &unk_1CFB28140;
        goto LABEL_26;
      }
    }
    else
    {
      if ((v15 - 23) < 2)
      {
        int v6 = &unk_1CFB281A0;
        goto LABEL_26;
      }
      if (v15 == 36)
      {
        int v6 = &unk_1CFB281C0;
        goto LABEL_26;
      }
    }
LABEL_36:
    uint64_t v11 = "unsupported architecture";
    goto LABEL_38;
  }
  if (v16 != 5)
  {
    uint64_t v11 = "unsupported operating system";
LABEL_38:
    llvm::report_fatal_error((llvm *)v11, (const llvm::Twine *)1);
  }
  if (v15 != 42)
  {
    if (v15 == 41)
    {
      int v6 = &unk_1CFB280E0;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  int v6 = &unk_1CFB28100;
LABEL_26:
  *(void *)(a1 + 592) = v6;
  if ((v14[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
LABEL_28:
  char v7 = *a2;
  *(void *)(a1 + 16) = *a2;
  __p[0] = v14;
  __p[1] = (void *)0x200000000;
  uint64_t v19 = v7;
  unint64_t v20 = &v28;
  unint64_t v21 = &v29;
  uint64_t v22 = 0;
  int v23 = 0;
  __int16 v24 = 512;
  char v25 = 7;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  BOOL v28 = &unk_1F2616E88;
  BOOL v29 = &unk_1F2617008;
  *(void *)(a1 + 24) = llvm::IntegerType::get(v7, (llvm::LLVMContext *)*((unsigned int *)a2[63] + 1));
  *(void *)(a1 + 32) = *(void *)v19 + 1960;
  unsigned int v12 = *(uint64_t **)(a1 + 16);
  uint64_t v30 = 0x3E800000001;
  *(void *)(a1 + 632) = llvm::MDBuilder::createBranchWeights(&v12, (uint64_t)&v30, 2);
  unsigned int v12 = *(uint64_t **)(a1 + 16);
  uint64_t v30 = 0x3E800000001;
  *(void *)(a1 + 640) = llvm::MDBuilder::createBranchWeights(&v12, (uint64_t)&v30, 2);
  if (!*(unsigned char *)a1)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      BOOL v9 = (llvm::PointerType *)(*(void *)v19 + 1960);
      uint64_t v30 = (uint64_t)a2;
      BOOL v31 = __p;
      uint64_t v32 = a1;
      llvm::Module::getOrInsertGlobal((uint64_t)a2, "__msan_track_origins", 0x14uLL, v9, (uint64_t (*)(uint64_t))sub_1CCB13B40, (uint64_t)&v30);
    }
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v10 = (llvm::PointerType *)(*(void *)v19 + 1960);
      uint64_t v30 = (uint64_t)a2;
      BOOL v31 = __p;
      uint64_t v32 = a1;
      llvm::Module::getOrInsertGlobal((uint64_t)a2, "__msan_keep_going", 0x11uLL, v10, (uint64_t (*)(uint64_t))sub_1CCB13CD8, (uint64_t)&v30);
    }
  }
  if (__p[0] != v14) {
    free(__p[0]);
  }
  return a1;
}

uint64_t sub_1CCB0FB10(unsigned char *a1, uint64_t ***a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*a1 && (*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v3 = ***a2;
    uint64_t v4 = *(void *)(v3 + 152);
    uint64_t v5 = *(unsigned int *)(v3 + 168);
    if (v5)
    {
      LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      char v7 = (uint64_t ****)(v4 + 16 * v6);
      BOOL v8 = *v7;
      if (*v7 == a2)
      {
LABEL_10:
        uint64_t v11 = v7[1];
        if (*v11 == (uint64_t **)16)
        {
          int v13 = v11[2];
          unsigned int v12 = v11[3];
          if (v13 == (uint64_t **)0x646F6D2E6E61736DLL && v12 == (uint64_t **)0x726F74635F656C75) {
            return 0;
          }
        }
        goto LABEL_15;
      }
      int v9 = 1;
      while (v8 != (uint64_t ***)-4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & (v5 - 1);
        BOOL v8 = *(uint64_t ****)(v4 + 16 * v6);
        if (v8 == a2)
        {
          char v7 = (uint64_t ****)(v4 + 16 * v6);
          goto LABEL_10;
        }
      }
    }
    char v7 = (uint64_t ****)(v4 + 16 * v5);
    goto LABEL_10;
  }
LABEL_15:
  int v15 = a2[14];
  if (!v15 || (*((char *)v15 + 12) & 0x80000000) == 0)
  {
    int v19 = 128;
    uint64_t v18 = operator new(0x1800uLL, (std::align_val_t)8uLL);
    sub_1CD693BD0(&v18);
    LOBYTE(v20) = 0;
    char v21 = 0;
    int v23 = 128;
    uint64_t v22 = operator new(0x1800uLL, (std::align_val_t)8uLL);
    sub_1CD693BD0(&v22);
    LOBYTE(v24) = 0;
    char v25 = 0;
    uint64_t v17 = a2[5] + 27;
    __int16 v29 = 260;
    BOOL v28 = v17;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v28);
    if (v27 == 42) {
      operator new();
    }
    if ((v27 & 0xFFFFFFFE) == 0x12) {
      operator new();
    }
    if ((v27 - 23) >= 2)
    {
      if (v27 != 36)
      {
        if (v27 == 3) {
          operator new();
        }
        operator new();
      }
      operator new();
    }
    operator new();
  }
  return 0;
}

void llvm::initializeMemorySanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  long long v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE87F8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCB139E0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE87F8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CCB139E0(uint64_t a1)
{
}

uint64_t sub_1CCB13A80(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE87F2;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F262C068;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(void *)(a1 + 688) = a2;
  *(_DWORD *)(a1 + 696) = a3;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE87F8, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CCB139E0;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCE87F8, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

unint64_t *sub_1CCB13B40(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (char *)operator new(0x78uLL);
  uint64_t v5 = (unint64_t *)(v3 + 32);
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 32;
  uint64_t v6 = *a1;
  uint64_t v7 = **(void **)(a1[1] + 64);
  BOOL v8 = (llvm::PointerType *)(v7 + 1960);
  uint64_t v9 = *(unsigned int *)(v2 + 4);
  int v10 = *(llvm::ConstantInt **)(v7 + 1960);
  unint64_t v11 = *(unsigned int *)(v7 + 1968);
  unsigned int v16 = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  int v15 = (const char *)(v12 & v9);
  int v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v15, v4);
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  int v15 = "__msan_track_origins";
  __int16 v17 = 259;
  return llvm::GlobalVariable::GlobalVariable(v5, v6, v8, 1, 5, (unint64_t)v13, &v15, 0, 0, 0, 0);
}