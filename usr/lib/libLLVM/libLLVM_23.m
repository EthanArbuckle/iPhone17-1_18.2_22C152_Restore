__n128 sub_1CC3D2D34(uint64_t a1, void ***a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  __n128 result;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  BOOL v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  void **v31;
  void **v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  void **v38;
  void v39[3];
  void **v40;
  void v41[3];
  void **v42;
  void v43[3];
  void **v44;
  void v45[3];
  void **v46;
  void v47[3];
  void **v48;
  void v49[3];
  void *v50;
  void v51[3];
  void *v52;
  void v53[3];
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;

  sub_1CC3D3C34(a1, (uint64_t)a2, a3, (void **)a4);
  v9 = (uint64_t)a5[1];
  v52 = *a5;
  memset(v53, 0, sizeof(v53));
  sub_1CC3D0450(v53, v9, (uint64_t)a5[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5[2] - v9) >> 4));
  v11 = (void *)(a4 + 8);
  v10 = *(void *)(a4 + 8);
  v50 = *(void **)a4;
  memset(v51, 0, sizeof(v51));
  sub_1CC3D0450(v51, v10, *(void *)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 16) - v10) >> 4));
  if (v52 == v50) {
    v12 = HIDWORD(v52) < HIDWORD(v50);
  }
  else {
    v12 = v52 < v50;
  }
  v54 = (void **)v51;
  sub_1CC3CE3C8(&v54);
  v54 = (void **)v53;
  sub_1CC3CE3C8(&v54);
  if (v12)
  {
    v54 = *(void ***)a4;
    v14 = v54;
    v15 = *(void **)(a4 + 24);
    v33 = *(_OWORD *)(a4 + 8);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *v11 = 0;
    *(void *)a4 = *a5;
    sub_1CD564AEC((void **)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 1);
    *(void *)(a4 + 24) = a5[3];
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
    *a5 = v14;
    sub_1CD564AEC(a5 + 1);
    *(_OWORD *)(a5 + 1) = v33;
    a5[3] = v15;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    v48 = (void **)&v55;
    sub_1CC3CE3C8(&v48);
    v16 = *(void *)(a4 + 8);
    v48 = *(void ***)a4;
    memset(v49, 0, sizeof(v49));
    sub_1CC3D0450(v49, v16, *(void *)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 16) - v16) >> 4));
    v18 = (void *)(a3 + 8);
    v17 = *(void *)(a3 + 8);
    v46 = *(void ***)a3;
    memset(v47, 0, sizeof(v47));
    sub_1CC3D0450(v47, v17, *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 16) - v17) >> 4));
    v19 = v48 == v46 ? HIDWORD(v48) < HIDWORD(v46) : v48 < v46;
    v54 = (void **)v47;
    sub_1CC3CE3C8(&v54);
    v54 = (void **)v49;
    sub_1CC3CE3C8(&v54);
    if (v19)
    {
      v54 = *(void ***)a3;
      v20 = v54;
      v21 = *(void *)(a3 + 24);
      v34 = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *v18 = 0;
      *(void *)a3 = *(void *)a4;
      sub_1CD564AEC((void **)(a3 + 8));
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(void *)(a3 + 24) = *(void *)(a4 + 24);
      *v11 = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(void *)a4 = v20;
      sub_1CD564AEC((void **)(a4 + 8));
      *(_OWORD *)(a4 + 8) = v34;
      *(void *)(a4 + 24) = v21;
      v56 = 0;
      v57 = 0;
      v55 = 0;
      v44 = (void **)&v55;
      sub_1CC3CE3C8(&v44);
      v22 = *(void *)(a3 + 8);
      v44 = *(void ***)a3;
      memset(v45, 0, sizeof(v45));
      sub_1CC3D0450(v45, v22, *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 16) - v22) >> 4));
      v24 = (void **)(a2 + 1);
      v23 = (uint64_t)a2[1];
      v42 = *a2;
      memset(v43, 0, sizeof(v43));
      sub_1CC3D0450(v43, v23, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v23) >> 4));
      v25 = v44 == v42 ? HIDWORD(v44) < HIDWORD(v42) : v44 < v42;
      v54 = (void **)v43;
      sub_1CC3CE3C8(&v54);
      v54 = (void **)v45;
      sub_1CC3CE3C8(&v54);
      if (v25)
      {
        v54 = *a2;
        v26 = v54;
        v27 = a2[3];
        v35 = *(_OWORD *)(a2 + 1);
        a2[2] = 0;
        a2[3] = 0;
        *v24 = 0;
        *a2 = *(void ***)a3;
        sub_1CD564AEC(v24);
        *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
        a2[3] = *(void ***)(a3 + 24);
        *v18 = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        *(void *)a3 = v26;
        sub_1CD564AEC((void **)(a3 + 8));
        *(_OWORD *)(a3 + 8) = v35;
        *(void *)(a3 + 24) = v27;
        v56 = 0;
        v57 = 0;
        v55 = 0;
        v40 = (void **)&v55;
        sub_1CC3CE3C8(&v40);
        v28 = (uint64_t)a2[1];
        v40 = *a2;
        memset(v41, 0, sizeof(v41));
        sub_1CC3D0450(v41, v28, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v28) >> 4));
        v29 = *(void *)(a1 + 8);
        v38 = *(void ***)a1;
        memset(v39, 0, sizeof(v39));
        sub_1CC3D0450(v39, v29, *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v29) >> 4));
        if (v40 == v38) {
          v30 = HIDWORD(v40) < HIDWORD(v38);
        }
        else {
          v30 = v40 < v38;
        }
        v54 = (void **)v39;
        sub_1CC3CE3C8(&v54);
        v54 = (void **)v41;
        sub_1CC3CE3C8(&v54);
        if (v30)
        {
          v54 = *(void ***)a1;
          v31 = v54;
          v32 = *(void ***)(a1 + 24);
          v36 = *(_OWORD *)(a1 + 8);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)a1 = *a2;
          sub_1CD564AEC((void **)(a1 + 8));
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
          *(void *)(a1 + 24) = a2[3];
          *v24 = 0;
          a2[2] = 0;
          a2[3] = 0;
          *a2 = v31;
          sub_1CD564AEC(v24);
          *(_OWORD *)(a2 + 1) = v36;
          a2[3] = v32;
          v56 = 0;
          v57 = 0;
          v55 = 0;
          v58 = (void **)&v55;
          sub_1CC3CE3C8(&v58);
        }
      }
    }
  }
  return result;
}

void sub_1CC3D3208(uint64_t a1, void ***a2, void ***a3)
{
  v6 = *a2;
  v8 = (void **)(a2 + 1);
  uint64_t v7 = (uint64_t)a2[1];
  v56 = v6;
  memset(v57, 0, sizeof(v57));
  sub_1CC3D0450(v57, v7, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v7) >> 4));
  v10 = (void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 8);
  v54 = *(void ***)a1;
  memset(v55, 0, sizeof(v55));
  sub_1CC3D0450(v55, v9, *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v9) >> 4));
  if (v56 == v54) {
    BOOL v11 = HIDWORD(v56) < HIDWORD(v54);
  }
  else {
    BOOL v11 = v56 < v54;
  }
  v58 = (void **)v55;
  sub_1CC3CE3C8(&v58);
  v58 = (void **)v57;
  sub_1CC3CE3C8(&v58);
  v12 = a3 + 1;
  if (v11)
  {
    v44 = *a3;
    memset(v45, 0, sizeof(v45));
    sub_1CC3D0450(v45, (uint64_t)a3[1], (uint64_t)a3[2], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[2] - (char *)a3[1]) >> 4));
    uint64_t v15 = (uint64_t)a2[1];
    v42 = *a2;
    memset(v43, 0, sizeof(v43));
    sub_1CC3D0450(v43, v15, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v15) >> 4));
    if (v44 == v42) {
      BOOL v16 = HIDWORD(v44) < HIDWORD(v42);
    }
    else {
      BOOL v16 = v44 < v42;
    }
    v58 = (void **)v43;
    sub_1CC3CE3C8(&v58);
    v58 = (void **)v45;
    sub_1CC3CE3C8(&v58);
    if (v16)
    {
      v58 = *(void ***)a1;
      v17 = v58;
      v18 = *(void ***)(a1 + 24);
      long long v33 = *(_OWORD *)(a1 + 8);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      void *v10 = 0;
      *(void *)a1 = *a3;
      sub_1CD564AEC((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 1);
      *(void *)(a1 + 24) = a3[3];
      void *v12 = 0;
      a3[2] = 0;
      a3[3] = 0;
      *a3 = v17;
      sub_1CD564AEC((void **)a3 + 1);
      *(_OWORD *)(a3 + 1) = v33;
      a3[3] = v18;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v59 = 0;
      v62 = (void **)&v59;
LABEL_15:
      sub_1CC3CE3C8(&v62);
      return;
    }
    v58 = *(void ***)a1;
    v26 = v58;
    v27 = *(void ***)(a1 + 24);
    long long v36 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v10 = 0;
    *(void *)a1 = *a2;
    sub_1CD564AEC((void **)(a1 + 8));
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24) = a2[3];
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *a2 = v26;
    sub_1CD564AEC(v8);
    *(_OWORD *)(a2 + 1) = v36;
    a2[3] = v27;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = 0;
    v62 = (void **)&v59;
    sub_1CC3CE3C8(&v62);
    uint64_t v28 = (uint64_t)a3[1];
    v40 = *a3;
    memset(v41, 0, sizeof(v41));
    sub_1CC3D0450(v41, v28, (uint64_t)a3[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3[2] - v28) >> 4));
    uint64_t v29 = (uint64_t)a2[1];
    v38 = *a2;
    memset(v39, 0, sizeof(v39));
    sub_1CC3D0450(v39, v29, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v29) >> 4));
    if (v40 == v38) {
      BOOL v30 = HIDWORD(v40) < HIDWORD(v38);
    }
    else {
      BOOL v30 = v40 < v38;
    }
    v58 = (void **)v39;
    sub_1CC3CE3C8(&v58);
    v58 = (void **)v41;
    sub_1CC3CE3C8(&v58);
    if (v30)
    {
      v58 = *a2;
      v31 = v58;
      v32 = a2[3];
      long long v37 = *(_OWORD *)(a2 + 1);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *a2 = *a3;
      sub_1CD564AEC(v8);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
      void *v12 = 0;
      a3[2] = 0;
      a3[3] = 0;
      *a3 = v31;
      sub_1CD564AEC((void **)a3 + 1);
      *(_OWORD *)(a3 + 1) = v37;
      a3[3] = v32;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v59 = 0;
      v62 = (void **)&v59;
      goto LABEL_15;
    }
  }
  else
  {
    v52 = *a3;
    memset(v53, 0, sizeof(v53));
    sub_1CC3D0450(v53, (uint64_t)a3[1], (uint64_t)a3[2], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[2] - (char *)a3[1]) >> 4));
    uint64_t v13 = (uint64_t)a2[1];
    v50 = *a2;
    memset(v51, 0, sizeof(v51));
    sub_1CC3D0450(v51, v13, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v13) >> 4));
    if (v52 == v50) {
      BOOL v14 = HIDWORD(v52) < HIDWORD(v50);
    }
    else {
      BOOL v14 = v52 < v50;
    }
    v58 = (void **)v51;
    sub_1CC3CE3C8(&v58);
    v58 = (void **)v53;
    sub_1CC3CE3C8(&v58);
    if (v14)
    {
      v58 = *a2;
      v19 = v58;
      v20 = a2[3];
      long long v34 = *(_OWORD *)(a2 + 1);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *a2 = *a3;
      sub_1CD564AEC(v8);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
      void *v12 = 0;
      a3[2] = 0;
      a3[3] = 0;
      *a3 = v19;
      sub_1CD564AEC((void **)a3 + 1);
      *(_OWORD *)(a3 + 1) = v34;
      a3[3] = v20;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v59 = 0;
      v62 = (void **)&v59;
      sub_1CC3CE3C8(&v62);
      uint64_t v21 = (uint64_t)a2[1];
      v48 = *a2;
      memset(v49, 0, sizeof(v49));
      sub_1CC3D0450(v49, v21, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v21) >> 4));
      uint64_t v22 = *(void *)(a1 + 8);
      v46 = *(void ***)a1;
      memset(v47, 0, sizeof(v47));
      sub_1CC3D0450(v47, v22, *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v22) >> 4));
      BOOL v23 = v48 == v46 ? HIDWORD(v48) < HIDWORD(v46) : v48 < v46;
      v58 = (void **)v47;
      sub_1CC3CE3C8(&v58);
      v58 = (void **)v49;
      sub_1CC3CE3C8(&v58);
      if (v23)
      {
        v58 = *(void ***)a1;
        v24 = v58;
        v25 = *(void ***)(a1 + 24);
        long long v35 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        void *v10 = 0;
        *(void *)a1 = *a2;
        sub_1CD564AEC((void **)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        *(void *)(a1 + 24) = a2[3];
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        *a2 = v24;
        sub_1CD564AEC(v8);
        *(_OWORD *)(a2 + 1) = v35;
        a2[3] = v25;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v59 = 0;
        v62 = (void **)&v59;
        goto LABEL_15;
      }
    }
  }
}

BOOL sub_1CC3D37B0(uint64_t a1, void **a2)
{
  v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (uint64_t)*(a2 - 3);
      uint64_t v37 = (uint64_t)*(v2 - 4);
      memset(v38, 0, sizeof(v38));
      sub_1CC3D0450(v38, v6, (uint64_t)*(v2 - 2), 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*(v2 - 2) - v6) >> 4));
      uint64_t v7 = *(void *)(a1 + 8);
      long long v35 = *(void ***)a1;
      memset(v36, 0, sizeof(v36));
      sub_1CC3D0450(v36, v7, *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v7) >> 4));
      if (v37 == v35) {
        BOOL v8 = HIDWORD(v37) < HIDWORD(v35);
      }
      else {
        BOOL v8 = v37 < v35;
      }
      v39 = (void **)v36;
      sub_1CC3CE3C8(&v39);
      v39 = (void **)v38;
      sub_1CC3CE3C8(&v39);
      if (v8)
      {
        v39 = *(void ***)a1;
        uint64_t v9 = v39;
        v10 = *(void **)(a1 + 24);
        long long v25 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(v2 - 4);
        sub_1CD564AEC((void **)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v2 - 3);
        *(void *)(a1 + 24) = *(v2 - 1);
        *(v2 - 3) = 0;
        *(v2 - 2) = 0;
        *(v2 - 1) = 0;
        *(v2 - 4) = v9;
        sub_1CD564AEC(v2 - 3);
        *(_OWORD *)(v2 - 3) = v25;
        *(v2 - 1) = v10;
        v41 = 0;
        long long v40 = 0uLL;
        v42[0] = (void **)&v40;
        sub_1CC3CE3C8(v42);
      }
      return 1;
    case 3:
      sub_1CC3D3208(a1, (void ***)(a1 + 32), (void ***)a2 - 4);
      return 1;
    case 4:
      sub_1CC3D3C34(a1, a1 + 32, a1 + 64, a2 - 4);
      return 1;
    case 5:
      sub_1CC3D2D34(a1, (void ***)(a1 + 32), a1 + 64, a1 + 96, a2 - 4);
      return 1;
    default:
      BOOL v11 = (void **)(a1 + 64);
      sub_1CC3D3208(a1, (void ***)(a1 + 32), (void ***)(a1 + 64));
      v12 = (void **)(a1 + 96);
      if ((void **)(a1 + 96) == v2) {
        return 1;
      }
      uint64_t v26 = a1;
      uint64_t v13 = 0;
      int v24 = 0;
      break;
  }
  do
  {
    BOOL v14 = v2;
    long long v33 = (void **)*v12;
    uint64_t v15 = (uint64_t)v12[1];
    memset(v34, 0, sizeof(v34));
    sub_1CC3D0450(v34, v15, (uint64_t)v12[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12[2] - v15) >> 4));
    v31 = *v11;
    memset(v32, 0, sizeof(v32));
    sub_1CC3D0450(v32, (uint64_t)v11[1], (uint64_t)v11[2], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v11[2] - (unsigned char *)v11[1]) >> 4));
    if (v33 == v31) {
      BOOL v16 = HIDWORD(v33) < HIDWORD(v31);
    }
    else {
      BOOL v16 = v33 < v31;
    }
    v39 = (void **)v32;
    sub_1CC3CE3C8(&v39);
    v39 = (void **)v34;
    sub_1CC3CE3C8(&v39);
    if (v16)
    {
      v17 = (void **)*v12;
      long long v40 = *(_OWORD *)(v12 + 1);
      v18 = v12[3];
      v39 = v17;
      v41 = v18;
      v12[2] = 0;
      v12[3] = 0;
      v12[1] = 0;
      uint64_t v19 = v13;
      while (1)
      {
        uint64_t v20 = v26 + v19;
        *(void *)(v26 + v19 + 96) = *(void *)(v26 + v19 + 64);
        sub_1CD564AEC((void **)(v26 + v19 + 104));
        *(_OWORD *)(v20 + 104) = *(_OWORD *)(v20 + 72);
        *(void *)(v20 + 120) = *(void *)(v20 + 88);
        *(void *)(v20 + 80) = 0;
        *(void *)(v20 + 88) = 0;
        *(void *)(v20 + 72) = 0;
        if (v19 == -64) {
          break;
        }
        uint64_t v29 = v39;
        memset(v30, 0, sizeof(v30));
        sub_1CC3D0450(v30, v40, *((uint64_t *)&v40 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v40 + 1) - v40) >> 4));
        uint64_t v21 = *(void *)(v20 + 40);
        uint64_t v27 = *(void *)(v20 + 32);
        memset(v28, 0, sizeof(v28));
        sub_1CC3D0450(v28, v21, *(void *)(v20 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v20 + 48) - v21) >> 4));
        if (v29 == v27) {
          BOOL v22 = HIDWORD(v29) < HIDWORD(v27);
        }
        else {
          BOOL v22 = v29 < v27;
        }
        v42[0] = (void **)v28;
        sub_1CC3CE3C8(v42);
        v42[0] = (void **)v30;
        sub_1CC3CE3C8(v42);
        v19 -= 32;
        if (!v22)
        {
          uint64_t v23 = v26 + v19 + 96;
          goto LABEL_23;
        }
      }
      uint64_t v23 = v26;
LABEL_23:
      *(void *)uint64_t v23 = v39;
      sub_1CD564AEC((void **)(v23 + 8));
      *(_OWORD *)(v23 + 8) = v40;
      *(void *)(v23 + 24) = v41;
      v41 = 0;
      long long v40 = 0uLL;
      v42[0] = (void **)&v40;
      sub_1CC3CE3C8(v42);
      ++v24;
      v2 = v14;
      if (v24 == 8) {
        return v12 + 4 == v14;
      }
    }
    BOOL v11 = v12;
    v13 += 32;
    v12 += 4;
  }
  while (v12 != v2);
  return 1;
}

__n128 sub_1CC3D3C34(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  sub_1CC3D3208(a1, (void ***)a2, (void ***)a3);
  uint64_t v8 = (uint64_t)a4[1];
  v39 = *a4;
  memset(v40, 0, sizeof(v40));
  sub_1CC3D0450(v40, v8, (uint64_t)a4[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4[2] - v8) >> 4));
  v10 = (void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v37 = *(void ***)a3;
  memset(v38, 0, sizeof(v38));
  sub_1CC3D0450(v38, v9, *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 16) - v9) >> 4));
  if (v39 == v37) {
    BOOL v11 = HIDWORD(v39) < HIDWORD(v37);
  }
  else {
    BOOL v11 = v39 < v37;
  }
  v41 = (void **)v38;
  sub_1CC3CE3C8(&v41);
  v41 = (void **)v40;
  sub_1CC3CE3C8(&v41);
  if (v11)
  {
    v41 = *(void ***)a3;
    uint64_t v13 = v41;
    BOOL v14 = *(void **)(a3 + 24);
    long long v26 = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    void *v10 = 0;
    *(void *)a3 = *a4;
    sub_1CD564AEC((void **)(a3 + 8));
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 1);
    *(void *)(a3 + 24) = a4[3];
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
    *a4 = v13;
    sub_1CD564AEC(a4 + 1);
    *(_OWORD *)(a4 + 1) = v26;
    a4[3] = v14;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    v45[0] = (void **)&v42;
    sub_1CC3CE3C8(v45);
    uint64_t v15 = *(void *)(a3 + 8);
    long long v35 = *(void ***)a3;
    memset(v36, 0, sizeof(v36));
    sub_1CC3D0450(v36, v15, *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 16) - v15) >> 4));
    v17 = (void *)(a2 + 8);
    uint64_t v16 = *(void *)(a2 + 8);
    long long v33 = *(void ***)a2;
    memset(v34, 0, sizeof(v34));
    sub_1CC3D0450(v34, v16, *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 16) - v16) >> 4));
    BOOL v18 = v35 == v33 ? HIDWORD(v35) < HIDWORD(v33) : v35 < v33;
    v41 = (void **)v34;
    sub_1CC3CE3C8(&v41);
    v41 = (void **)v36;
    sub_1CC3CE3C8(&v41);
    if (v18)
    {
      v41 = *(void ***)a2;
      uint64_t v19 = v41;
      uint64_t v20 = *(void *)(a2 + 24);
      long long v27 = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      void *v17 = 0;
      *(void *)a2 = *(void *)a3;
      sub_1CD564AEC((void **)(a2 + 8));
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a2 + 24) = *(void *)(a3 + 24);
      void *v10 = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)a3 = v19;
      sub_1CD564AEC((void **)(a3 + 8));
      *(_OWORD *)(a3 + 8) = v27;
      *(void *)(a3 + 24) = v20;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v42 = 0;
      v45[0] = (void **)&v42;
      sub_1CC3CE3C8(v45);
      uint64_t v21 = *(void *)(a2 + 8);
      v31 = *(void ***)a2;
      memset(v32, 0, sizeof(v32));
      sub_1CC3D0450(v32, v21, *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 16) - v21) >> 4));
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v29 = *(void ***)a1;
      memset(v30, 0, sizeof(v30));
      sub_1CC3D0450(v30, v22, *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v22) >> 4));
      if (v31 == v29) {
        BOOL v23 = HIDWORD(v31) < HIDWORD(v29);
      }
      else {
        BOOL v23 = v31 < v29;
      }
      v41 = (void **)v30;
      sub_1CC3CE3C8(&v41);
      v41 = (void **)v32;
      sub_1CC3CE3C8(&v41);
      if (v23)
      {
        v41 = *(void ***)a1;
        int v24 = v41;
        uint64_t v25 = *(void *)(a1 + 24);
        long long v28 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(void *)a2;
        sub_1CD564AEC((void **)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        void *v17 = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)a2 = v24;
        sub_1CD564AEC((void **)(a2 + 8));
        *(_OWORD *)(a2 + 8) = v28;
        *(void *)(a2 + 24) = v25;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v42 = 0;
        v45[0] = (void **)&v42;
        sub_1CC3CE3C8(v45);
      }
    }
  }
  return result;
}

char *sub_1CC3D3FE4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v20 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[40 * v2];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v10 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  if (v9 == a1->i64[0])
  {
    int64x2_t v11 = vdupq_n_s64(v9);
    v12 = &v7[40 * v2];
  }
  else
  {
    v12 = &v7[40 * v2];
    do
    {
      long long v13 = *(_OWORD *)(v9 - 40);
      *((void *)v12 - 3) = *(void *)(v9 - 24);
      *(_OWORD *)(v12 - 40) = v13;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 40) = 0;
      *((_OWORD *)v12 - 1) = *(_OWORD *)(v9 - 16);
      v12 -= 40;
      v9 -= 40;
    }
    while (v9 != v10);
    int64x2_t v11 = *a1;
  }
  BOOL v14 = v8 + 40;
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)(v8 + 40);
  int64x2_t v18 = v11;
  uint64_t v15 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[40 * v6];
  uint64_t v19 = v15;
  uint64_t v17 = v11.i64[0];
  sub_1CD561578((uint64_t)&v17);
  return v14;
}

uint64_t sub_1CC3D414C()
{
  LODWORD(v3) = 1;
  v1.n128_u64[0] = (unint64_t)"Leave out unnecessary information when printing MIR";
  v1.n128_u64[1] = 51;
  sub_1CD4C1500((uint64_t)&unk_1EBCD11A8, "simplify-mir", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD11A8, &dword_1CB82C000);
  int v4 = 1;
  char v2 = 1;
  unint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Print MIR debug-locations";
  v1.n128_u64[1] = 25;
  sub_1CD55EE8C(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD1268, &dword_1CB82C000);
}

void llvm::initializeMIRPrintingPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA61BE68, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC3D4288;
    v3[1] = &v1;
    char v2 = v3;
    std::__call_once(&qword_1EA61BE68, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC3D4288()
{
}

void sub_1CC3D4320()
{
}

void sub_1CC3D43E0(void **this)
{
  *this = &unk_1F2610630;
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  *this = &unk_1F260E110;
  char v2 = (void **)this[22];
  if (v2 != this + 24) {
    free(v2);
  }
  unint64_t v3 = (void **)this[13];
  if (v3 != this + 15) {
    free(v3);
  }
  int v4 = (void **)this[4];
  if (v4 != this + 6) {
    free(v4);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC3D44A4(void **this)
{
  *this = &unk_1F2610630;
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  *this = &unk_1F260E110;
  char v2 = (void **)this[22];
  if (v2 != this + 24) {
    free(v2);
  }
  unint64_t v3 = (void **)this[13];
  if (v3 != this + 15) {
    free(v3);
  }
  int v4 = (void **)this[4];
  if (v4 != this + 6) {
    free(v4);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC3D457C()
{
  return "MIR Printing Pass";
}

uint64_t sub_1CC3D458C(uint64_t a1, const std::string *a2, const llvm::Module *a3)
{
  llvm::printMIR(*(llvm **)(a1 + 248), a2, a3);
  char v4 = *(unsigned char *)(a1 + 279);
  int v5 = v4;
  if (v4 >= 0) {
    unint64_t v6 = (const char *)(a1 + 256);
  }
  else {
    unint64_t v6 = *(const char **)(a1 + 256);
  }
  size_t v7 = v4 & 0x7F;
  if (v5 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = *(void *)(a1 + 264);
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 248), v6, v8);
  return 0;
}

void sub_1CC3D45E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC3D45EC(uint64_t a1, llvm::raw_ostream *a2, const llvm::MachineFunction *a3)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  int v9 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v16 = v17;
  int v15 = 0;
  size_t v8 = &unk_1F2646F30;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  llvm::printMIR((llvm *)&v8, a2, a3);
  char v4 = *((unsigned char *)v16 + 23);
  if (v4 >= 0) {
    int v5 = (const std::string::value_type *)v16;
  }
  else {
    int v5 = (const std::string::value_type *)*v16;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = v4 & 0x7F;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)v16[1];
  }
  std::string::append((std::string *)(a1 + 256), v5, v6);
  size_t v8 = &unk_1F2646B98;
  if (v15 == 1 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8077774924);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  return 0;
}

BOOL llvm::hasLessThanNumFused(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2)
  {
    unint64_t v3 = *(_DWORD **)(a1 + 32);
    char v4 = &v3[4 * v2];
    unsigned int v5 = 1;
    while (1)
    {
      while ((~*v3 & 6) != 0 || v3[2] != 5)
      {
        v3 += 4;
        if (v3 == v4) {
          return v5 < a2;
        }
      }
      unint64_t v6 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
      BOOL result = v5 < a2;
      if (!v6 || v5 >= a2) {
        break;
      }
      ++v5;
      unint64_t v3 = *(_DWORD **)(v6 + 32);
      uint64_t v9 = *(unsigned int *)(v6 + 40);
      char v4 = &v3[4 * v9];
      if (!v9) {
        return v5 < a2;
      }
    }
  }
  else
  {
    unsigned int v5 = 1;
    return v5 < a2;
  }
  return result;
}

uint64_t llvm::fuseInstructionPair(llvm *this, llvm::ScheduleDAGInstrs *a2, llvm::SUnit *a3, llvm::SUnit *a4)
{
  uint64_t v7 = *((unsigned int *)a2 + 30);
  if (v7)
  {
    uint64_t v8 = 16 * v7;
    uint64_t v9 = (_DWORD *)(*((void *)a2 + 14) + 8);
    while ((~*(v9 - 2) & 6) != 0 || *v9 != 5)
    {
      v9 += 4;
      v8 -= 16;
      if (!v8) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v10 = *((unsigned int *)a3 + 10);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    uint64_t v12 = (_DWORD *)(*((void *)a3 + 4) + 8);
    while ((~*(v12 - 2) & 6) != 0 || *v12 != 5)
    {
      v12 += 4;
      v11 -= 16;
      if (!v11) {
        goto LABEL_11;
      }
    }
    return 0;
  }
LABEL_11:
  unint64_t v44 = (unint64_t)a2 | 6;
  uint64_t v45 = 5;
  uint64_t result = llvm::ScheduleDAGInstrs::addEdge((uint64_t)this, a3, (uint64_t)&v44);
  if (result)
  {
    uint64_t v14 = (uint64_t *)*((void *)a2 + 14);
    uint64_t v15 = *((unsigned int *)a2 + 30);
    if (v15)
    {
      uint64_t v16 = 16 * v15;
      uint64_t v17 = *((void *)a2 + 14);
      do
      {
        if ((llvm::SUnit *)(*(void *)v17 & 0xFFFFFFFFFFFFFFF8) == a3) {
          *(_DWORD *)(v17 + 12) = 0;
        }
        v17 += 16;
        v16 -= 16;
      }
      while (v16);
    }
    uint64_t v18 = *((unsigned int *)a3 + 10);
    if (v18)
    {
      uint64_t v19 = *((void *)a3 + 4);
      uint64_t v20 = 16 * v18;
      do
      {
        if ((llvm::ScheduleDAGInstrs *)(*(void *)v19 & 0xFFFFFFFFFFFFFFF8) == a2) {
          *(_DWORD *)(v19 + 12) = 0;
        }
        v19 += 16;
        v20 -= 16;
      }
      while (v20);
    }
    uint64_t v21 = (llvm *)((char *)this + 344);
    if ((llvm *)((char *)this + 344) != a3 && v15)
    {
      uint64_t v22 = &v14[2 * v15];
      do
      {
        uint64_t v23 = *v14;
        if ((~*(_DWORD *)v14 & 6) != 0 || *((_DWORD *)v14 + 2) <= 3u)
        {
          unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v25 = ((v23 >> 1) & 3) - 1;
          BOOL v26 = (llvm::SUnit *)v24 == a3 || v21 == (llvm::SUnit *)v24;
          if (!v26 && v25 >= 2)
          {
            uint64_t v28 = *(unsigned int *)(v24 + 40);
            if (v28)
            {
              uint64_t v29 = *(void **)(v24 + 32);
              uint64_t v30 = 16 * v28;
              while ((llvm::SUnit *)(*v29 & 0xFFFFFFFFFFFFFFF8) != a3)
              {
                v29 += 2;
                v30 -= 16;
                if (!v30) {
                  goto LABEL_40;
                }
              }
            }
            else
            {
LABEL_40:
              unint64_t v44 = (unint64_t)a3 | 6;
              uint64_t v45 = 3;
              llvm::ScheduleDAGInstrs::addEdge((uint64_t)this, (llvm::SUnit *)v24, (uint64_t)&v44);
            }
          }
        }
        v14 += 2;
      }
      while (v14 != v22);
    }
    if ((llvm *)((char *)this + 72) == a2) {
      return 1;
    }
    uint64_t v31 = *((unsigned int *)a3 + 10);
    if (v31)
    {
      v32 = (uint64_t *)*((void *)a3 + 4);
      long long v33 = &v32[2 * v31];
      do
      {
        uint64_t v34 = *v32;
        if ((~*(_DWORD *)v32 & 6) != 0 || *((_DWORD *)v32 + 2) <= 3u)
        {
          unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v36 = ((v34 >> 1) & 3) - 1;
          if ((llvm::ScheduleDAGInstrs *)v35 != a2 && v36 >= 2)
          {
            uint64_t v38 = *((unsigned int *)a2 + 30);
            if (v38)
            {
              v39 = (void *)*((void *)a2 + 14);
              uint64_t v40 = 16 * v38;
              while ((*v39 & 0xFFFFFFFFFFFFFFF8) != v35)
              {
                v39 += 2;
                v40 -= 16;
                if (!v40) {
                  goto LABEL_58;
                }
              }
            }
            else
            {
LABEL_58:
              unint64_t v44 = v35 | 6;
              uint64_t v45 = 3;
              llvm::ScheduleDAGInstrs::addEdge((uint64_t)this, a2, (uint64_t)&v44);
            }
          }
        }
        v32 += 2;
      }
      while (v32 != v33);
    }
    if (v21 != a3) {
      return 1;
    }
    uint64_t v41 = *((void *)this + 6);
    uint64_t v42 = *((void *)this + 7);
    if (v41 == v42)
    {
      return 1;
    }
    else
    {
      uint64_t v43 = *((void *)this + 6);
      do
      {
        if (!*(_DWORD *)(v43 + 120))
        {
          unint64_t v44 = v41 | 6;
          uint64_t v45 = 3;
          llvm::ScheduleDAGInstrs::addEdge((uint64_t)this, a2, (uint64_t)&v44);
        }
        v43 += 272;
        v41 += 272;
        uint64_t result = 1;
      }
      while (v43 != v42);
    }
  }
  return result;
}

void llvm::createMacroFusionDAGMutation(void *a1@<X8>)
{
  if (byte_1EBCD13A8) {
    operator new();
  }
  *a1 = 0;
}

void llvm::createBranchMacroFusionDAGMutation(void *a1@<X8>)
{
  if (byte_1EBCD13A8) {
    operator new();
  }
  *a1 = 0;
}

uint64_t sub_1CC3D4DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC3D4E70(void *a1)
{
  *a1 = &unk_1F26106F0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC3D4F14(void *a1)
{
  *a1 = &unk_1F26106F0;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC3D4FD8(uint64_t result, llvm *a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v4 = *((void *)a2 + 6);
    uint64_t v5 = *((void *)a2 + 7);
    while (v4 != v5)
    {
      uint64_t result = sub_1CC3D5064(v3, a2, v4);
      v4 += 272;
    }
  }
  if (*((void *)a2 + 44))
  {
    return sub_1CC3D5064(v3, a2, (uint64_t)a2 + 344);
  }
  return result;
}

uint64_t sub_1CC3D5064(uint64_t a1, llvm *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *(void *)(*((void *)a2 + 4) + 16);
  uint64_t v25 = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 48))(v7, v5, v6, &v25, v4);
    if (result)
    {
      uint64_t v11 = *(unsigned int *)(a3 + 40);
      if (v11)
      {
        uint64_t v12 = *(uint64_t **)(a3 + 32);
        char v13 = &v12[2 * v11];
        do
        {
          uint64_t v14 = *v12;
          if (((~*(_DWORD *)v12 & 6) != 0 || *((_DWORD *)v12 + 2) <= 3u) && ((v14 >> 1) & 3) - 1 >= 2)
          {
            unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            {
              uint64_t v16 = *(unsigned int *)(v15 + 40);
              if (!v16) {
                goto LABEL_19;
              }
              uint64_t v17 = *(uint64_t **)(v15 + 32);
              uint64_t v18 = &v17[2 * v16];
              char v19 = 1;
              do
              {
                while (1)
                {
                  uint64_t v20 = *v17;
                  if ((~*(_DWORD *)v17 & 6) == 0 && *((_DWORD *)v17 + 2) == 5) {
                    break;
                  }
                  v17 += 2;
                  if (v17 == v18) {
                    goto LABEL_18;
                  }
                }
                unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
                if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0 || (v19 & 1) == 0) {
                  break;
                }
                char v19 = 0;
                uint64_t v17 = *(uint64_t **)(v21 + 32);
                uint64_t v22 = *(unsigned int *)(v21 + 40);
                uint64_t v18 = &v17[2 * v22];
              }
              while (v22);
LABEL_18:
              if (v19)
              {
LABEL_19:
                uint64_t v25 = *(void *)(v15 + 8);
                uint64_t v23 = *(void *)(a1 + 32);
                if (!v23) {
                  goto LABEL_24;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v23 + 48))(v23, v5, v6, &v25, v4);
                if (result)
                {
                  uint64_t result = llvm::fuseInstructionPair(a2, (llvm::ScheduleDAGInstrs *)v15, (llvm::SUnit *)a3, v24);
                  if (result) {
                    break;
                  }
                }
              }
            }
          }
          v12 += 2;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
LABEL_24:
    sub_1CB920400();
    return sub_1CC3D522C();
  }
  return result;
}

uint64_t sub_1CC3D522C()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable scheduling for macro fusion.";
  v3.n128_u64[1] = 35;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCD1328, "misched-fusion", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1328, &dword_1CB82C000);
}

void llvm::obfuscateModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  LOWORD(v17) = 260;
  uint64_t v16 = (void *)(v4 + 216);
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v16);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  v6[0] = v5;
  v6[1] = v5;
  v6[2] = v5;
  v6[3] = v5;
  v6[4] = v5;
  v6[5] = v5;
  *(_OWORD *)uint64_t v7 = v5;
  *(void *)&v7[13] = -1;
  sub_1CC153974((uint64_t)v6, (int *)&__p);
  if (v15 < 0) {
    operator delete(__p);
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

void sub_1CC3D71D4(uint64_t a1)
{
}

void llvm::createObfuscateModulePass(llvm *this)
{
}

uint64_t sub_1CC3D72B0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCD13E8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F26107F8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD13F0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC3D71D4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCD13F0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC3D7360(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(_DWORD *)(result + 160);
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 144);
      int v4 = v2 - 1;
      unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v6 = *(void *)(v3 + 8 * v5);
      if (v6 == a2) {
        return result;
      }
      int v7 = 1;
      while (v6 != -4096)
      {
        unsigned int v8 = v5 + v7++;
        unsigned int v5 = v8 & v4;
        uint64_t v6 = *(void *)(v3 + 8 * v5);
        if (v6 == a2) {
          return result;
        }
      }
    }
  }
  unsigned int v9 = *(_DWORD *)(result + 8);
  if (v9 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v9) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

void *sub_1CC3D7414(uint64_t **a1, unsigned char *a2)
{
  if ((a2[23] & 0x10) == 0) {
    return 0;
  }
  int v4 = *((_DWORD *)a2 + 8) & 0xF;
  uint64_t v5 = ***(void ***)a2;
  uint64_t v6 = *(void *)(v5 + 152);
  uint64_t v7 = *(unsigned int *)(v5 + 168);
  unsigned int v8 = a2 >> 4;
  if (v7)
  {
    LODWORD(v9) = (v7 - 1) & (v8 ^ (a2 >> 9));
    int v10 = (void *)(v6 + 16 * v9);
    long long v11 = (unsigned char *)*v10;
    if ((unsigned char *)*v10 == a2) {
      goto LABEL_9;
    }
    int v12 = 1;
    while (v11 != (unsigned char *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v7 - 1);
      long long v11 = *(unsigned char **)(v6 + 16 * v9);
      if (v11 == a2)
      {
        int v10 = (void *)(v6 + 16 * v9);
        goto LABEL_9;
      }
    }
  }
  int v10 = (void *)(v6 + 16 * v7);
LABEL_9:
  uint64_t v14 = (unint64_t *)v10[1];
  unint64_t v17 = *v14;
  uint64_t result = v14 + 2;
  unint64_t v16 = v17;
  if (v4 == 8) {
    return result;
  }
  if (v16 >= 5 && *(_DWORD *)result == 1836477548 && *((unsigned char *)result + 4) == 46) {
    return 0;
  }
  if (!v7) {
    goto LABEL_21;
  }
  LODWORD(v19) = (v7 - 1) & (v8 ^ (a2 >> 9));
  uint64_t v20 = (void *)(v6 + 16 * v19);
  unint64_t v21 = (unsigned char *)*v20;
  if ((unsigned char *)*v20 != a2)
  {
    int v22 = 1;
    while (v21 != (unsigned char *)-4096)
    {
      int v23 = v19 + v22++;
      uint64_t v19 = v23 & (v7 - 1);
      unint64_t v21 = *(unsigned char **)(v6 + 16 * v19);
      if (v21 == a2)
      {
        uint64_t v20 = (void *)(v6 + 16 * v19);
        goto LABEL_22;
      }
    }
LABEL_21:
    uint64_t v20 = (void *)(v6 + 16 * v7);
  }
LABEL_22:
  uint64_t v24 = v20[1];
  if (*(void *)v24 < 9uLL
    || ((uint64_t v25 = *(void *)(v24 + 16), v26 = *(unsigned __int8 *)(v24 + 24), v25 == 0x72612E676E616C63)
      ? (BOOL v27 = v26 == 99)
      : (BOOL v27 = 0),
        !v27))
  {
    uint64_t v28 = (uint64_t)*a1;
    uint64_t v29 = a1[1];
    *(void *)(v28 + 8) = 0;
    llvm::TargetMachine::getNameWithPrefix(*v29, v28, (const llvm::GlobalValue *)a2, (llvm::Mangler *)a1[2], 0);
    if ((a2[23] & 0x10) == 0)
    {
      uint64_t v40 = 0;
      v39 = &byte_1CFBCE98E;
LABEL_39:
      if ((sub_1CC3D7988(a1[3][3], (uint64_t)v39, v40, **a1, (*a1)[1]) & 1) == 0) {
        return (void *)**a1;
      }
      return 0;
    }
    uint64_t v30 = ***(void ***)a2;
    uint64_t v31 = *(void *)(v30 + 152);
    uint64_t v32 = *(unsigned int *)(v30 + 168);
    if (v32)
    {
      LODWORD(v33) = (v32 - 1) & (v8 ^ (a2 >> 9));
      uint64_t v34 = (void *)(v31 + 16 * v33);
      unint64_t v35 = (unsigned char *)*v34;
      if ((unsigned char *)*v34 == a2)
      {
LABEL_38:
        uint64_t v38 = (void *)v34[1];
        uint64_t v41 = *v38;
        v39 = (char *)(v38 + 2);
        uint64_t v40 = v41;
        goto LABEL_39;
      }
      int v36 = 1;
      while (v35 != (unsigned char *)-4096)
      {
        int v37 = v33 + v36++;
        uint64_t v33 = v37 & (v32 - 1);
        unint64_t v35 = *(unsigned char **)(v31 + 16 * v33);
        if (v35 == a2)
        {
          uint64_t v34 = (void *)(v31 + 16 * v33);
          goto LABEL_38;
        }
      }
    }
    uint64_t v34 = (void *)(v31 + 16 * v32);
    goto LABEL_38;
  }
  return 0;
}

void sub_1CC3D7650(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1)
  {
    uint64_t v3 = a1 + 144;
    while (1)
    {
      uint64_t v32 = 0;
      int v4 = *(unsigned int **)(*(void *)a1 + 8 * v1-- - 8);
      *(_DWORD *)(a1 + 8) = v1;
      uint64_t v32 = v4;
      if (v4) {
        break;
      }
LABEL_36:
      if (!v1) {
        return;
      }
    }
    int v5 = *(_DWORD *)(a1 + 160);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 144);
      int v7 = v5 - 1;
      unsigned int v8 = v7 & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v9 = (unsigned int **)(v6 + 8 * v8);
      int v10 = *v9;
      if (v4 == *v9)
      {
LABEL_35:
        unsigned int v1 = *(_DWORD *)(a1 + 8);
        goto LABEL_36;
      }
      int v11 = 1;
      int v12 = *v9;
      unsigned int v13 = v7 & ((v4 >> 4) ^ (v4 >> 9));
      while (v12 != (unsigned int *)-4096)
      {
        unsigned int v14 = v13 + v11++;
        unsigned int v13 = v14 & v7;
        int v12 = *(unsigned int **)(v6 + 8 * v13);
        if (v4 == v12) {
          goto LABEL_35;
        }
      }
      char v15 = 0;
      int v16 = 1;
      while (v10 != (unsigned int *)-4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v10 == (unsigned int *)-8192;
        }
        if (v17) {
          char v15 = v9;
        }
        unsigned int v18 = v8 + v16++;
        unsigned int v8 = v18 & v7;
        uint64_t v9 = (unsigned int **)(v6 + 8 * v8);
        int v10 = *v9;
        if (v4 == *v9) {
          goto LABEL_23;
        }
      }
      if (v15) {
        uint64_t v19 = v15;
      }
      else {
        uint64_t v19 = v9;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = sub_1CC3D79E0(v3, (uint64_t)&v32, (uint64_t *)&v32, v19);
    *uint64_t v20 = v32;
    int v4 = v32;
LABEL_23:
    unint64_t v21 = v4[2];
    if (v21)
    {
      unint64_t v22 = 0;
      while (1)
      {
        int v23 = *(unsigned __int8 **)&v4[2 * v22 + -2 * v21];
        if (v23)
        {
          if (*v23)
          {
            if (*v23 - 4 < 0x1F)
            {
              unint64_t v31 = *(unsigned int *)(a1 + 8);
              if (v31 >= *(unsigned int *)(a1 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)a1 + 8 * v31) = v23;
              ++*(_DWORD *)(a1 + 8);
            }
          }
          else
          {
            uint64_t v24 = *(uint64_t **)(a1 + 168);
            uint64_t v25 = (uint64_t *)*((void *)v23 + 1);
            uint64_t v26 = *v25;
            v33[0] = v25 + 3;
            v33[1] = v26;
            uint64_t v27 = *(void *)(a1 + 200);
            if (!v27)
            {
              sub_1CB920400();
              sub_1CC3D7884();
              return;
            }
            uint64_t v28 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v27 + 48))(v27, v33);
            uint64_t v30 = (llvm::Metadata *)llvm::MDString::get(v24, v28, v29);
            llvm::MDNode::replaceOperandWith((llvm::MDNode *)v4, v22, v30);
          }
        }
        ++v22;
        int v4 = v32;
        unint64_t v21 = v32[2];
        if (v22 >= v21) {
          goto LABEL_35;
        }
      }
    }
    goto LABEL_35;
  }
}

uint64_t sub_1CC3D7884(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 48) + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v2;
    do
    {
      uint64_t result = sub_1CC3D7360(v4, *(void *)(**(void **)(a2 + 48) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_1CC3D78E8()
{
}

void *sub_1CC3D78FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2610768;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC3D7944(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2610768;
  a2[1] = v2;
  return result;
}

unsigned __int8 *sub_1CC3D7970(uint64_t a1, uint64_t a2)
{
  return llvm::Obfuscator::obfuscate(*(void *)(a1 + 8), *(unsigned __int8 **)a2, *(void *)(a2 + 8), 0, 0);
}

void *sub_1CC3D7988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a4;
  v10[1] = a5;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *))(*(void *)a1 + 48))(a1, v11, v10);
  }
  sub_1CB920400();
  return sub_1CC3D79E0(v6, v7, v8, v9);
}

void *sub_1CC3D79E0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBB24F14(a1, v7);
      BOOL v17 = 0;
      sub_1CBB23CC4(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBB24F14(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 8 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CC3D7B18()
{
}

__n128 sub_1CC3D7B2C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26107B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC3D7B78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26107B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *sub_1CC3D7BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)a2;
  size_t v3 = *(void *)(a2 + 8);
  if (sub_1CC3D7988(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v4, v3, (uint64_t)v4, v3)) {
    return v4;
  }
  uint64_t v6 = *(void *)(a1 + 8);

  return llvm::Obfuscator::obfuscate(v6, v4, v3, 1, 0);
}

void sub_1CC3D7C30()
{
}

void sub_1CC3D7C70(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3D7CA8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void sub_1CC3D7CE0(uint64_t a1, llvm *a2)
{
  size_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::TargetPassConfig::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::TargetPassConfig::ID);
  llvm::obfuscateModule(a2, *(llvm::Module **)(v7 + 112), v8);
}

void sub_1CC3D7D7C()
{
}

__n128 sub_1CC3D7D90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F2610898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC3D7DE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2610898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CC3D7E1C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  size_t v49 = *(void *)(a2 + 8);
  v50 = *(unsigned char **)a2;
  size_t v3 = *a3;
  size_t v4 = (size_t)a3[1];
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *((unsigned int *)v5 + 2);
  if (v6)
  {
    int v7 = 0;
    if (v4)
    {
      uint64_t v8 = a3[1];
      uint64_t v9 = *a3;
      do
      {
        int v10 = *v9++;
        int v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    uint64_t v11 = *v5;
    uint64_t v12 = *v5 + 8 * v6 + 8;
    int v13 = 1;
    int v14 = v7;
    while (1)
    {
      uint64_t v15 = v14 & (v6 - 1);
      unsigned int v16 = *(void **)(v11 + 8 * v15);
      if (v16 != (void *)-8)
      {
        if (!v16) {
          goto LABEL_15;
        }
        if (*(_DWORD *)(v12 + 4 * v15) == v7
          && v4 == *v16
          && (!v4 || !memcmp(v3, (char *)v16 + *((unsigned int *)v5 + 5), v4)))
        {
          break;
        }
      }
      int v14 = v13 + v15;
      ++v13;
    }
    if (v15 != -1 && (int)v15 != v6) {
      return 1;
    }
  }
LABEL_15:
  BOOL v17 = sub_1CC154CDC(v50, v49);
  if (v18)
  {
    uint64_t v19 = v17;
    size_t v20 = v18;
    unint64_t v21 = &llvm::TargetLibraryInfoImpl::StandardNames;
    unint64_t v22 = 468;
    do
    {
      int v23 = &v21[2 * (v22 >> 1)];
      size_t v24 = (size_t)v23[1];
      if (v20 >= v24) {
        size_t v25 = (size_t)v23[1];
      }
      else {
        size_t v25 = v20;
      }
      if (v25 && (int v26 = memcmp(*v23, v19, v25)) != 0)
      {
        int v27 = (v26 >> 31) | 1;
      }
      else
      {
        if (v24 < v20) {
          int v27 = -1;
        }
        else {
          int v27 = 1;
        }
        if (v24 == v20) {
          int v27 = 0;
        }
      }
      if (v27 == -1) {
        v22 += ~(v22 >> 1);
      }
      else {
        v22 >>= 1;
      }
      if (v27 == -1) {
        unint64_t v21 = v23 + 2;
      }
    }
    while (v22);
    if (v21 != &llvm::TargetLibraryInfoImpl::StandardNames + 936 && v21[1] == (char *)v20 && !memcmp(*v21, v19, v20)) {
      return 1;
    }
  }
  if (v4 >= 9)
  {
    if (*(void *)v3 == 0x63617274645F5F5FLL && v3[8] == 101) {
      return 1;
    }
    if (v4 >= 0xE)
    {
      if (*(void *)v3 == 0x246E6F6974636573 && *(void *)(v3 + 6) == 0x247472617473246ELL) {
        return 1;
      }
      if (*(void *)v3 == 0x246E6F6974636573 && *((_DWORD *)v3 + 2) == 610561637) {
        return 1;
      }
      if (*(void *)v3 == 0x24746E656D676573 && *(void *)(v3 + 6) == 0x2474726174732474) {
        return 1;
      }
    }
    else
    {
      if (v4 < 0xC) {
        goto LABEL_38;
      }
      if (*(void *)v3 == 0x246E6F6974636573 && *((_DWORD *)v3 + 2) == 610561637) {
        return 1;
      }
    }
    if (*(void *)v3 == 0x24746E656D676573 && *((_DWORD *)v3 + 2) == 610561637) {
      return 1;
    }
  }
LABEL_38:
  uint64_t v28 = *(uint64_t **)(a1 + 24);
  uint64_t v29 = *((unsigned int *)v28 + 2);
  if (v29)
  {
    int v30 = 0;
    if (v4)
    {
      size_t v31 = v4;
      uint64_t v32 = v3;
      do
      {
        int v33 = *v32++;
        int v30 = 33 * v30 + v33;
        --v31;
      }
      while (v31);
    }
    uint64_t v34 = *v28;
    uint64_t v35 = *v28 + 8 * v29 + 8;
    int v36 = 1;
    int v37 = v30;
    while (1)
    {
      uint64_t v38 = v37 & (v29 - 1);
      v39 = *(void **)(v34 + 8 * v38);
      if (v39 != (void *)-8)
      {
        if (!v39)
        {
          uint64_t v40 = v29;
          return v40 != v29;
        }
        if (*(_DWORD *)(v35 + 4 * v38) == v30
          && v4 == *v39
          && (!v4 || !memcmp(v3, (char *)v39 + *((unsigned int *)v28 + 5), v4)))
        {
          break;
        }
      }
      int v37 = v36 + v38;
      ++v36;
    }
    uint64_t v40 = (int)v38;
    if (v38 == -1) {
      uint64_t v40 = v29;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v40 = 0;
  }
  return v40 != v29;
}

uint64_t sub_1CC3D81C0()
{
  int v3 = 2;
  *(void *)&long long v2 = "Specify the symbol_map output";
  *((void *)&v2 + 1) = 29;
  *(void *)&long long v1 = "filename.bcsymbolmap";
  *((void *)&v1 + 1) = 20;
  sub_1CD567DB4(&v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCD14D0, &dword_1CB82C000);
  LODWORD(v1) = 1;
  int v3 = 2;
  *(void *)&long long v2 = "<sym name>";
  *((void *)&v2 + 1) = 10;
  sub_1CD567ED8(&v1, &v3, &v2);

  return __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBCD13F8, &dword_1CB82C000);
}

uint64_t llvm::NonRelocatableStringpool::getEntry(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  size_t v3 = a3;
  size_t v4 = a2;
  if (!a3 && *(_DWORD *)(a1 + 12)) {
    return *(void *)(a1 + 136);
  }
  uint64_t v6 = *(void *)(a1 + 168);
  if (v6)
  {
    v16[0] = a2;
    v16[1] = a3;
    size_t v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v16);
    size_t v3 = v7;
  }
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  uint64_t v8 = sub_1CC3D8604((uint64_t *)a1, v4, v3, &v14);
  uint64_t v9 = *v8;
  if (v10 || *(_DWORD *)(v9 + 24) == -1)
  {
    int v11 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v11 + 1;
    *(_DWORD *)(v9 + 24) = v11;
    uint64_t v12 = *(void *)(a1 + 120);
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = v12;
    *(void *)(a1 + 120) = v3 + v12 + 1;
    uint64_t v9 = *v8;
  }
  return v9 | 4;
}

uint64_t llvm::NonRelocatableStringpool::internString(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  size_t v3 = a2;
  uint64_t v5 = a1[21];
  if (v5)
  {
    v10[0] = a2;
    v10[1] = a3;
    size_t v3 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v10);
    a3 = v6;
  }
  long long v8 = xmmword_1CFAC7330;
  uint64_t v9 = 0xFFFFFFFFLL;
  return *sub_1CC3D8604(a1, v3, a3, &v8) + 32;
}

unint64_t llvm::NonRelocatableStringpool::getEntriesForEmission@<X0>(uint64_t **this@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *((unsigned int *)this + 3);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)operator new(8 * v4);
    size_t v6 = &v5[v4];
    *a2 = (unint64_t)v5;
    a2[1] = (unint64_t)v5;
    a2[2] = (unint64_t)v6;
  }
  else
  {
    uint64_t v5 = 0;
    size_t v6 = 0;
  }
  uint64_t v7 = *((unsigned int *)this + 2);
  if (v7)
  {
    for (i = *this; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *this;
  }
  uint64_t v10 = (uint64_t)&(*this)[v7];
  if (i == (uint64_t *)v10)
  {
    unint64_t v22 = (unint64_t)v5;
  }
  else
  {
    uint64_t v11 = *i;
    uint64_t v12 = v5;
    do
    {
      if (*(_DWORD *)(v11 + 24) != -1)
      {
        if (v5 >= v6)
        {
          uint64_t v14 = v5 - v12;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            abort();
          }
          if (((char *)v6 - (char *)v12) >> 2 > v15) {
            unint64_t v15 = ((char *)v6 - (char *)v12) >> 2;
          }
          if ((unint64_t)((char *)v6 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            if (v16 >> 61) {
              sub_1CB833614();
            }
            BOOL v17 = (char *)operator new(8 * v16);
          }
          else
          {
            BOOL v17 = 0;
          }
          size_t v18 = (uint64_t *)&v17[8 * v14];
          uint64_t *v18 = v11 | 4;
          int v13 = v18 + 1;
          while (v5 != v12)
          {
            uint64_t v19 = *--v5;
            *--size_t v18 = v19;
          }
          size_t v6 = (uint64_t *)&v17[8 * v16];
          *a2 = (unint64_t)v18;
          a2[1] = (unint64_t)v13;
          a2[2] = (unint64_t)v6;
          if (v12) {
            operator delete(v12);
          }
          uint64_t v12 = v18;
        }
        else
        {
          *uint64_t v5 = v11 | 4;
          int v13 = v5 + 1;
        }
        a2[1] = (unint64_t)v13;
        uint64_t v5 = v13;
      }
      do
      {
        uint64_t v20 = i[1];
        ++i;
        uint64_t v11 = v20;
        if (v20) {
          BOOL v21 = v11 == -8;
        }
        else {
          BOOL v21 = 1;
        }
      }
      while (v21);
    }
    while (i != (uint64_t *)v10);
    unint64_t v22 = *a2;
  }
  unint64_t v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v5 - v22) >> 3);
  if (v5 == (uint64_t *)v22) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }

  return sub_1CC3D8824(v22, v5, v24, 1);
}

uint64_t *sub_1CC3D8604(uint64_t *a1, unsigned __int8 *a2, size_t __n, long long *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v28[16] = 2;
    *a1 = (uint64_t)v28;
    unsigned int v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  uint64_t v29 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    uint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *a1;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *a1 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && __n == *v19
    }
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  uint64_t v19 = *(void **)(v12 + 8 * v18);
LABEL_20:
  i = (uint64_t *)(v12 + 8 * v18);
  if (v19 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v19)
  {
    return i;
  }
  uint64_t v22 = sub_1CB906F34(a1 + 3, __n + 33, 3);
  uint64_t v23 = v22;
  uint64_t v24 = v22 + 32;
  if (__n) {
    memcpy((void *)(v22 + 32), a2, __n);
  }
  *(unsigned char *)(v24 + __n) = 0;
  *(void *)uint64_t v23 = __n;
  long long v25 = *v29;
  *(void *)(v23 + 24) = *((void *)v29 + 2);
  *(_OWORD *)(v23 + 8) = v25;
  uint64_t *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v18));
        !*i || *i == -8;
  return i;
}

unint64_t sub_1CC3D8824(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  size_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          size_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24))
                {
                  uint64_t *v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                __n128 result = (unint64_t)sub_1CC3D8FF8(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                __n128 result = (unint64_t)sub_1CC3D92D0(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t v41 = v10 + 1;
                uint64_t v42 = v10 + 2;
                uint64_t v43 = v10 + 3;
                __n128 result = (unint64_t)sub_1CC3D92D0(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24))
                {
                  *uint64_t v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unsigned int v48 = *(_DWORD *)((*v43 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (v48 < *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24))
                  {
                    *uint64_t v42 = v46;
                    *uint64_t v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(_DWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 24))
                    {
                      v10[1] = v46;
                      void v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24))
                      {
                        uint64_t *v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  v55 = v51;
                  unsigned int v58 = *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (v58 < *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        uint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24));
                    uint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *uint64_t v61 = v56;
                  }
                  v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v90 = *v9;
                uint64_t v89 = v9[1];
                size_t v9 = v51;
                unsigned int v91 = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v91 < *(_DWORD *)((v90 & 0xFFFFFFFFFFFFFFF8) + 24))
                {
                  v92 = v9;
                  do
                  {
                    uint64_t *v92 = v90;
                    uint64_t v90 = *(v92 - 2);
                    --v92;
                  }
                  while (v91 < *(_DWORD *)((v90 & 0xFFFFFFFFFFFFFFF8) + 24));
                  uint64_t *v92 = v89;
                }
                v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12)
                  {
                    __n128 result = *(unsigned int *)((v66[1] & 0xFFFFFFFFFFFFFFF8) + 24);
                    if (*(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24) < result)
                    {
                      uint64_t v67 = v66[1];
                      ++v66;
                      uint64_t v65 = 2 * v64 + 2;
                    }
                  }
                  v68 = &v10[v64];
                  uint64_t v69 = *v68;
                  unsigned int v70 = *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (*(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24) >= v70)
                  {
                    do
                    {
                      v71 = v66;
                      uint64_t *v68 = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v72 = (2 * v65) | 1;
                      v66 = &v10[v72];
                      uint64_t v65 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v65 < v12)
                      {
                        if (*(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v66[1] & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24))
                        {
                          uint64_t v65 = v72;
                        }
                        else
                        {
                          uint64_t v67 = v66[1];
                          ++v66;
                        }
                      }
                      else
                      {
                        uint64_t v65 = v72;
                      }
                      __n128 result = *(unsigned int *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v68 = v71;
                    }
                    while (result >= v70);
                    uint64_t *v71 = v69;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                v75 = v10;
                do
                {
                  v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v73 = 2 * v73 + 2;
                  if (v73 < v12)
                  {
                    __n128 result = *(unsigned int *)((v78 & 0xFFFFFFFFFFFFFFF8) + 24);
                    if (result >= *(_DWORD *)((v77[1] & 0xFFFFFFFFFFFFFFF8) + 24))
                    {
                      uint64_t v73 = v80;
                    }
                    else
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                    }
                  }
                  else
                  {
                    uint64_t v73 = v80;
                  }
                  uint64_t *v75 = v78;
                  v75 = v77;
                }
                while (v73 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  uint64_t *v77 = v74;
                }
                else
                {
                  uint64_t *v77 = *a2;
                  *a2 = v74;
                  uint64_t v81 = (char *)v77 - (char *)v10 + 8;
                  if (v81 >= 9)
                  {
                    unint64_t v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                    v83 = &v10[v82];
                    uint64_t v84 = *v83;
                    uint64_t v85 = *v77;
                    unsigned int v86 = *(_DWORD *)((*v77 & 0xFFFFFFFFFFFFFFF8) + 24);
                    if (*(_DWORD *)((*v83 & 0xFFFFFFFFFFFFFFF8) + 24) < v86)
                    {
                      do
                      {
                        v87 = v83;
                        uint64_t *v77 = v84;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        v83 = &v10[v82];
                        uint64_t v84 = *v83;
                        v77 = v87;
                      }
                      while (*(_DWORD *)((*v83 & 0xFFFFFFFFFFFFFFF8) + 24) < v86);
                      uint64_t *v87 = v85;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC3D8FF8(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC3D8FF8(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC3D8FF8(v9 + 2, &v9[v13 + 1], a2 - 3);
            __n128 result = (unint64_t)sub_1CC3D8FF8(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *size_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            __n128 result = (unint64_t)sub_1CC3D8FF8(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
          if (*(_DWORD *)((*(v9 - 1) & 0xFFFFFFFFFFFFFFF8) + 24) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            size_t v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              uint64_t *v10 = v35;
              uint64_t *v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24));
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *size_t v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v16;
        }
        unsigned int v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) < v17);
        uint64_t v20 = &v9[v18];
        BOOL v21 = a2;
        if (v18 == 1)
        {
          BOOL v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          long long v25 = v21;
          do
          {
            uint64_t *v10 = v24;
            *long long v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *size_t v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        __n128 result = sub_1CC3D8824(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CC3D9098(v9, v10 - 1);
      __n128 result = sub_1CC3D9098(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC3D8FF8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v6 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *__n128 result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *__n128 result = v3;
      *a2 = v4;
      if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CC3D9098(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC3D8FF8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC3D92D0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CC3D92D0(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v25 < *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CC3D8FF8(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v14 < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC3D92D0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC3D8FF8(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_1CC3D9380()
{
}

void sub_1CC3D941C()
{
}

void sub_1CC3D9530(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  long long v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  long long v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unsigned int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3D95E4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  long long v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3D9690(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC3D9704(llvm::FunctionPass *a1, uint64_t a2)
{
  if ((llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    *((void *)a1 + 31) = *(void *)(a2 + 40);
    *((void *)a1 + 32) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
    uint64_t v4 = *(void *)(a2 + 328);
    uint64_t v34 = a2 + 320;
    if (v4 != a2 + 320)
    {
      int v5 = 0;
      while (1)
      {
        int v36 = v5;
        uint64_t v6 = (llvm::MachineInstr *)(v4 + 48);
        uint64_t v35 = v4;
        uint64_t v7 = *(void *)(v4 + 56);
        if (v7 != v4 + 48) {
          break;
        }
        int v8 = 0;
LABEL_76:
        int v5 = v36 | v8;
        uint64_t v4 = *(void *)(v35 + 8);
        if (v4 == v34) {
          return v5 & 1;
        }
      }
      int v8 = 0;
      while (1)
      {
        if (!v7 || (uint64_t v9 = v7, (*(unsigned char *)v7 & 4) == 0))
        {
          uint64_t v9 = v7;
          if ((*(_WORD *)(v7 + 44) & 8) != 0)
          {
            uint64_t v9 = v7;
            do
              uint64_t v9 = *(void *)(v9 + 8);
            while ((*(_WORD *)(v9 + 44) & 8) != 0);
          }
        }
        int v10 = **(unsigned __int16 **)(v7 + 16);
        if (v10 != 69 && v10 != 0) {
          goto LABEL_76;
        }
        uint64_t v12 = *(llvm::MachineInstr **)(v9 + 8);
        v42[0] = 0;
        uint64_t v37 = v41;
        uint64_t v38 = v41;
        uint64_t v39 = 16;
        int v40 = 0;
        if (!sub_1CC3D9AFC((uint64_t)a1, v7, v42, (uint64_t)&v37)) {
          break;
        }
        unsigned int v13 = v42[0];
        if (!v42[0]) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(*(void *)(v7 + 32) + 4);
        if (sub_1CC38D61C(*((void **)a1 + 31), v42[0], *(void *)(*(void *)(*((void *)a1 + 31) + 24) + 16 * (v42[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(*(void *)(*((void *)a1 + 31) + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
        {
          uint64_t v15 = (void *)*((void *)a1 + 31);
          uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(*v15 + 16) + 176))(*(void *)(*v15 + 16));
          if ((v14 & 0x80000000) != 0) {
            unsigned int v17 = (uint64_t *)(v15[3] + 16 * (v14 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v17 = (uint64_t *)(v15[34] + 8 * v14);
          }
          uint64_t v18 = *v17;
          if (*v17)
          {
            do
            {
              uint64_t v19 = *(void *)(v18 + 24);
              if (v13 >> 30) {
                llvm::MachineOperand::setReg(v18, v13);
              }
              else {
                llvm::MachineOperand::substPhysReg((unsigned int *)v18, v13, v16);
              }
              uint64_t v18 = v19;
            }
            while (v19);
          }
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
          uint64_t v24 = *((void *)a1 + 31);
          if ((v42[0] & 0x80000000) != 0) {
            unsigned int v25 = (unsigned int **)(*(void *)(v24 + 24) + 16 * (v42[0] & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v25 = (unsigned int **)(*(void *)(v24 + 272) + 8 * v42[0]);
          }
          uint64_t v26 = *v25;
          if (v26)
          {
            while (1)
            {
              unsigned int v27 = *v26;
              if ((*v26 & 0x1000000) == 0) {
                break;
              }
              uint64_t v26 = (unsigned int *)*((void *)v26 + 3);
              if (!v26) {
                goto LABEL_43;
              }
            }
LABEL_45:
            *uint64_t v26 = v27 & 0xFBFFFFFF;
            while (1)
            {
              uint64_t v26 = (unsigned int *)*((void *)v26 + 3);
              if (!v26) {
                break;
              }
              unsigned int v27 = *v26;
              if ((*v26 & 0x1000000) == 0) {
                goto LABEL_45;
              }
            }
          }
LABEL_43:
          int v8 = 1;
        }
LABEL_65:
        uint64_t v7 = (uint64_t)v12;
        if (v38 != v37) {
          free(v38);
        }
        if (v12 == v6) {
          goto LABEL_76;
        }
      }
      if (v38 != v37)
      {
        if (v39 >= 0x21 && 4 * (HIDWORD(v39) - v40) < v39)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v37);
LABEL_29:
          if (sub_1CC3D9DF4((uint64_t)a1, v7, (uint64_t)&v37))
          {
            if (v38 == v37) {
              uint64_t v20 = (uint64_t *)((char *)&v39 + 4);
            }
            else {
              uint64_t v20 = &v39;
            }
            uint64_t v21 = *(unsigned int *)v20;
            if (v21)
            {
              uint64_t v22 = 8 * v21;
              uint64_t v23 = v38;
              while (*(void *)v23 >= 0xFFFFFFFFFFFFFFFELL)
              {
                v23 += 8;
                v22 -= 8;
                if (!v22) {
                  goto LABEL_64;
                }
              }
            }
            else
            {
              uint64_t v23 = v38;
            }
            uint64_t v28 = &v38[8 * v21];
            if (v23 != v28)
            {
              BOOL v29 = *(llvm::MachineInstr **)v23;
LABEL_53:
              if (v12 == v29)
              {
                if (!v29 || (uint64_t v30 = v29, (*(unsigned char *)v29 & 4) == 0))
                {
                  uint64_t v30 = v29;
                  if ((*((_WORD *)v29 + 22) & 8) != 0)
                  {
                    uint64_t v30 = v29;
                    do
                      uint64_t v30 = (llvm::MachineInstr *)*((void *)v30 + 1);
                    while ((*((_WORD *)v30 + 22) & 8) != 0);
                  }
                }
                uint64_t v12 = (llvm::MachineInstr *)*((void *)v30 + 1);
              }
              llvm::MachineInstr::eraseFromParent(v29);
              size_t v31 = (unint64_t *)(v23 + 8);
              while (v31 != (unint64_t *)v28)
              {
                unint64_t v32 = *v31++;
                BOOL v29 = (llvm::MachineInstr *)v32;
                if (v32 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  uint64_t v23 = (char *)(v31 - 1);
                  goto LABEL_53;
                }
              }
            }
LABEL_64:
            int v8 = 1;
          }
          goto LABEL_65;
        }
        memset(v38, 255, 8 * v39);
      }
      HIDWORD(v39) = 0;
      int v40 = 0;
      goto LABEL_29;
    }
  }
  LOBYTE(v5) = 0;
  return v5 & 1;
}

uint64_t sub_1CC3D9AFC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v10 = *(unsigned int *)(a4 + 20);
  if (v9 == *(void *)a4)
  {
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v10;
      unsigned int v13 = *(void **)(a4 + 8);
      do
      {
        if (*v13 == a2) {
          return 1;
        }
        if (*v13 == -2) {
          uint64_t v11 = v13;
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
      if (v11)
      {
        *uint64_t v11 = a2;
        --*(_DWORD *)(a4 + 24);
        goto LABEL_33;
      }
    }
    unsigned int v14 = *(_DWORD *)(a4 + 16);
    if (v10 < v14)
    {
      *(_DWORD *)(a4 + 20) = v10 + 1;
      *(void *)(v9 + 8 * v10) = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(a4 + 16);
  }
  if (3 * v14 <= 4 * ((int)v10 - *(_DWORD *)(a4 + 24)))
  {
    if (v14 >= 0x40) {
      v14 *= 2;
    }
    else {
      unsigned int v14 = 128;
    }
    goto LABEL_76;
  }
  if (v14 - v10 < v14 >> 3)
  {
LABEL_76:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v14);
    unsigned int v14 = *(_DWORD *)(a4 + 16);
    uint64_t v9 = *(void *)(a4 + 8);
  }
  unsigned int v15 = v14 - 1;
  unsigned int v16 = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v17 = (void *)(v9 + 8 * v16);
  uint64_t v18 = *v17;
  if (*v17 != -1)
  {
    uint64_t v19 = 0;
    int v20 = 1;
    while (v18 != a2)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == -2;
      }
      if (v21) {
        uint64_t v19 = v17;
      }
      unsigned int v22 = v16 + v20++;
      unsigned int v16 = v22 & v15;
      unsigned int v17 = (void *)(v9 + 8 * (v22 & v15));
      uint64_t v18 = *v17;
      if (*v17 == -1) {
        goto LABEL_26;
      }
    }
    return 1;
  }
  uint64_t v19 = 0;
LABEL_26:
  if (v19) {
    uint64_t v23 = v19;
  }
  else {
    uint64_t v23 = v17;
  }
  if (*v23 == a2) {
    return 1;
  }
  if (*v23 == -2) {
    --*(_DWORD *)(a4 + 24);
  }
  else {
    ++*(_DWORD *)(a4 + 20);
  }
  *uint64_t v23 = a2;
LABEL_33:
  if (*(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24) == 16) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 40) != 1)
  {
    unsigned int v25 = 1;
    while (1)
    {
      uint64_t v26 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * v25 + 4);
      if (v26 == v8) {
        goto LABEL_62;
      }
      uint64_t v27 = *(void *)(a1 + 248);
      if ((v26 & 0x80000000) != 0) {
        uint64_t v28 = (uint64_t *)(*(void *)(v27 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v28 = (uint64_t *)(*(void *)(v27 + 272) + 8 * v26);
      }
      uint64_t v29 = *v28;
      if (!v29) {
        return 0;
      }
      if ((*(unsigned char *)(v29 + 3) & 1) == 0)
      {
        uint64_t v29 = *(void *)(v29 + 24);
        if (!v29 || (*(unsigned char *)(v29 + 3) & 1) == 0) {
          return 0;
        }
      }
      uint64_t v30 = *(void *)(v29 + 8);
      if (!v30) {
        return 0;
      }
      int v31 = **(unsigned __int16 **)(v30 + 16);
      if (v31 != 19) {
        goto LABEL_52;
      }
      unint64_t v32 = *(_DWORD **)(v30 + 32);
      if ((*v32 & 0xFFF00) == 0 && (v32[8] & 0xFFF00) == 0)
      {
        int v33 = v32[9];
        if (v33 < 0) {
          break;
        }
      }
LABEL_59:
      if (*a3 && *a3 != v26) {
        return 0;
      }
      *a3 = v26;
LABEL_62:
      v25 += 2;
      if (v25 == *(_DWORD *)(a2 + 40)) {
        return 1;
      }
    }
    uint64_t v34 = *(void *)(*(void *)(v27 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
    if (!v34) {
      return 0;
    }
    if ((*(unsigned char *)(v34 + 3) & 1) == 0)
    {
      uint64_t v34 = *(void *)(v34 + 24);
      if (!v34 || (*(unsigned char *)(v34 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v35 = *(void *)(v34 + 8);
    if (!v35) {
      return 0;
    }
    int v31 = **(unsigned __int16 **)(v35 + 16);
    LODWORD(v26) = v33;
LABEL_52:
    if (v31 == 69 || v31 == 0)
    {
      if ((sub_1CC3D9AFC(a1) & 1) == 0) {
        return 0;
      }
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  return 1;
}

uint64_t sub_1CC3D9DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(unsigned int *)(a3 + 20);
  if (v7 == *(void *)a3)
  {
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v8;
      uint64_t v11 = *(void **)(a3 + 8);
      while (*v11 != a2)
      {
        if (*v11 == -2) {
          uint64_t v9 = v11;
        }
        ++v11;
        v10 -= 8;
        if (!v10)
        {
          if (!v9) {
            goto LABEL_9;
          }
          *uint64_t v9 = a2;
          --*(_DWORD *)(a3 + 24);
          goto LABEL_33;
        }
      }
      return 1;
    }
LABEL_9:
    unsigned int v12 = *(_DWORD *)(a3 + 16);
    if (v8 < v12)
    {
      *(_DWORD *)(a3 + 20) = v8 + 1;
      *(void *)(v7 + 8 * v8) = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a3 + 16);
  }
  if (3 * v12 <= 4 * ((int)v8 - *(_DWORD *)(a3 + 24)))
  {
    if (v12 >= 0x40) {
      v12 *= 2;
    }
    else {
      unsigned int v12 = 128;
    }
    goto LABEL_60;
  }
  if (v12 - v8 < v12 >> 3)
  {
LABEL_60:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v12);
    unsigned int v12 = *(_DWORD *)(a3 + 16);
    uint64_t v7 = *(void *)(a3 + 8);
  }
  unsigned int v13 = v12 - 1;
  unsigned int v14 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v15 = (void *)(v7 + 8 * v14);
  uint64_t v16 = *v15;
  if (*v15 != -1)
  {
    unsigned int v17 = 0;
    int v18 = 1;
    while (v16 != a2)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -2;
      }
      if (v19) {
        unsigned int v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      unsigned int v15 = (void *)(v7 + 8 * (v20 & v13));
      uint64_t v16 = *v15;
      if (*v15 == -1) {
        goto LABEL_26;
      }
    }
    return 1;
  }
  unsigned int v17 = 0;
LABEL_26:
  if (v17) {
    BOOL v21 = v17;
  }
  else {
    BOOL v21 = v15;
  }
  if (*v21 == a2) {
    return 1;
  }
  if (*v21 == -2) {
    --*(_DWORD *)(a3 + 24);
  }
  else {
    ++*(_DWORD *)(a3 + 20);
  }
  *BOOL v21 = a2;
LABEL_33:
  if (*(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24) == 16) {
    return 0;
  }
  uint64_t v23 = *(void *)(a1 + 248);
  if ((v6 & 0x80000000) != 0) {
    uint64_t v24 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v24 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v6);
  }
  uint64_t v25 = *v24;
  if (*v24)
  {
    if ((*(unsigned char *)(v25 + 3) & 0x81) != 0)
    {
      while (1)
      {
        uint64_t v25 = *(void *)(v25 + 24);
        if (!v25) {
          break;
        }
        if ((*(_DWORD *)v25 & 0x81000000) == 0) {
          goto LABEL_41;
        }
      }
    }
    else
    {
LABEL_41:
      uint64_t v26 = *(void *)(v25 + 8);
LABEL_42:
      int v27 = **(unsigned __int16 **)(v26 + 16);
      if (v27 != 69 && v27 != 0) {
        return 0;
      }
      uint64_t result = sub_1CC3D9DF4(a1);
      if (!result) {
        return result;
      }
      uint64_t v29 = *(void *)(v25 + 8);
      while (1)
      {
        uint64_t v25 = *(void *)(v25 + 24);
        if (!v25) {
          break;
        }
        if ((*(_DWORD *)v25 & 0x81000000) == 0)
        {
          uint64_t v26 = *(void *)(v25 + 8);
          if (v26 != v29) {
            goto LABEL_42;
          }
        }
      }
    }
  }
  return 1;
}

void llvm::splitCodeGen(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  int v15 = a7;
  if (a3 == 1)
  {
    if (a5) {
      llvm::WriteBitcodeToFile();
    }
    uint64_t v10 = *a2;
    sub_1CC3DA1BC((uint64_t)a1, v10, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1CC3DA2E4, a6);
  }
  int v12 = a3;
  llvm::ThreadPool::ThreadPool((uint64_t)v18, a3 | 0x100000000);
  int v14 = 0;
  v13[0] = v16;
  v13[1] = &v14;
  v13[2] = v17;
  v13[3] = v18;
  v13[4] = a6;
  v13[5] = &v15;
  llvm::SplitModule(a1, v12, (uint64_t)sub_1CC3DA334, (uint64_t)v13, a8);
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)v18);
}

void sub_1CC3DA1BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  a3(&v5, a4);
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)&v4);
}

uint64_t sub_1CC3DA2E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    long long v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    sub_1CB920400();
    return sub_1CC3DA334();
  }
}

void sub_1CC3DA334(uint64_t a1, void *a2)
{
  v12[28] = *(void **)MEMORY[0x1E4F143B8];
  *a2 = 0;
  v11[1] = 0;
  void v11[2] = 0;
  uint64_t v10 = v11;
  v11[0] = v12;
  int v3 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  long long v2 = &unk_1F2646FA8;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  llvm::WriteBitcodeToFile();
}

uint64_t sub_1CC3DA82C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::future<void> *a4@<X8>)
{
  v16[1] = *(std::future<void> *)MEMORY[0x1E4F143B8];
  sub_1CC3DAE00((uint64_t)v12, a2);
  sub_1CC3DAA90((uint64_t)v12, (uint64_t)v14);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  std::mutex::lock((std::mutex *)(a1 + 248));
  if (v15)
  {
    if (v15 == v14)
    {
      uint64_t v10 = v9;
      (*(void (**)(void *, void *))(v14[0] + 24))(v14, v9);
    }
    else
    {
      uint64_t v10 = v15;
      int v15 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = a3;
  sub_1CD5680CC((void *)(a1 + 200), (uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  int v7 = *(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 240);
  std::mutex::unlock((std::mutex *)(a1 + 248));
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 312));
  llvm::ThreadPool::grow((llvm::ThreadPool *)a1, v7);
  a4->__state_ = (std::__assoc_sub_state *)v16[0];
  v16[0].__state_ = 0;
  std::future<void>::~future(v16);
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void sub_1CC3DAA90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::promise<void> *)operator new(0x20uLL);
  v4[1].__state_ = 0;
  v4[2].__state_ = 0;
  v4->__state_ = (std::__assoc_sub_state *)&unk_1F26109A0;
  uint64_t v5 = std::promise<void>::promise(v4 + 3);
  std::promise<void>::get_future(v5);
  v7[0] = (uint64_t)&v4[3];
  v7[1] = (uint64_t)v4;
  sub_1CC3DAE00((uint64_t)v8, a1);
  sub_1CC3DAB64(a2, v7, &v6);
  sub_1CD5683A4((uint64_t)v7);
  std::future<void>::~future(&v6);
}

uint64_t sub_1CC3DAB64(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v6;
  *a2 = 0;
  a2[1] = 0;
  int v7 = (uint64_t *)a2[5];
  if (v7)
  {
    if (v7 == a2 + 2)
    {
      int v14 = v13;
      (*(void (**)(uint64_t *, void *))(*v7 + 24))(v7, v13);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      int v7 = v14;
    }
    else
    {
      int v14 = (uint64_t *)a2[5];
      a2[5] = 0;
    }
  }
  else
  {
    int v14 = 0;
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v8 = operator new(0x38uLL);
  int v9 = v8;
  *uint64_t v8 = &unk_1F26109D8;
  v8[1] = v5;
  v8[2] = v6;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v7)
  {
    if (v7 == v13)
    {
      v8[6] = v8 + 3;
      (*(void (**)(void *))(v13[0] + 24))(v13);
    }
    else
    {
      v8[6] = v7;
      int v14 = 0;
    }
  }
  else
  {
    v8[6] = 0;
  }
  *(void *)(a1 + 24) = v9;
  sub_1CD5683A4((uint64_t)&v11);
  *(void *)(a1 + 32) = *a3;
  *a3 = 0;
  return a1;
}

void *sub_1CC3DACE8(uint64_t a1)
{
  long long v2 = operator new(0x38uLL);
  int v3 = v2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *long long v2 = &unk_1F26109D8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1CC3DAE00((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

uint64_t sub_1CC3DAD58(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *a2 = &unk_1F26109D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_1CC3DAE00((uint64_t)(a2 + 3), a1 + 24);
}

void sub_1CC3DAD9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    uint64_t v3 = *(std::promise<void> **)(a1 + 8);
    std::promise<void>::set_value(v3);
  }
  else
  {
    sub_1CB920400();
    sub_1CC3DAE00(v4, v5);
  }
}

uint64_t sub_1CC3DAE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC3DAE98(void *a1)
{
  *a1 = &unk_1F2610A20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[7];
  if (v3 != a1 + 10) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void sub_1CC3DAF50(void *a1)
{
  *a1 = &unk_1F2610A20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[7];
  if (v3 != a1 + 10) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC3DB028(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  *uint64_t v2 = &unk_1F2610A20;
  sub_1CC3DB324((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CC3DB07C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2610A20;
  return sub_1CC3DB324((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CC3DB0A8(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (uint64_t *)a1[7];
  if (v3 != a1 + 10) {
    free(v3);
  }
  uint64_t result = a1[4];
  if ((uint64_t *)result == v2)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t *))(*v2 + 32);
    return v6(v2);
  }
  else if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v5();
  }
  return result;
}

void sub_1CC3DB16C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 7);
  if (v3 != __p + 80) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)__p + 4);
  if (v4 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }

  operator delete(__p);
}

void sub_1CC3DB218()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)v0);
}

uint64_t sub_1CC3DB324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CC3DB380(a1, a2);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(v4 + 48) = v4 + 72;
  uint64_t v6 = v4 + 48;
  *(_OWORD *)(v6 - 16) = v5;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  if (*(void *)(a2 + 56)) {
    sub_1CC223970(v6, a2 + 48);
  }
  return a1;
}

void sub_1CC3DB374(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1CC3DB380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CC3DB418(uint64_t a1)
{
}

void sub_1CC3DB4C0()
{
}

void sub_1CC3DB5D4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    long long v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3DB688(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3DB734(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  if (byte_1EBCD1648)
  {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
    sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);
  }
}

uint64_t sub_1CC3DB820(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)a1;
  v498[6] = *(void **)MEMORY[0x1E4F143B8];
  LOBYTE(v442) = 0;
  if ((llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2) & 1) == 0 && !byte_1EBCD1708)
  {
    *(void *)(v3 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
    *(void *)(v3 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
    *(void *)(v3 + 264) = *(void *)(a2 + 40);
    if (byte_1EBCD1648)
    {
      uint64_t v4 = *(uint64_t **)(v3 + 8);
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      if (v5 == v6)
      {
LABEL_7:
        uint64_t v7 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v5 != &llvm::MachineDominatorTree::ID)
        {
          v5 += 16;
          if (v5 == v6) {
            goto LABEL_7;
          }
        }
        uint64_t v7 = *(void *)(v5 + 8);
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineDominatorTree::ID);
    }
    else
    {
      uint64_t v8 = 0;
    }
    *(void *)(v3 + 272) = v8;
    int v9 = *(uint64_t **)(v3 + 8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v10 == v11)
    {
LABEL_14:
      uint64_t v12 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v10 != &llvm::MachineLoopInfo::ID)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_14;
        }
      }
      uint64_t v12 = *(void *)(v10 + 8);
    }
    *(void *)(v3 + 280) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::MachineLoopInfo::ID);
    uint64_t v13 = *(void *)(a2 + 328);
    uint64_t v440 = a2 + 320;
    if (v13 != a2 + 320)
    {
      int v442 = 0;
      uint64_t v447 = v3;
      while (1)
      {
        v461 = v465;
        v462 = v465;
        uint64_t v463 = 16;
        int v464 = 0;
        v485 = v487;
        uint64_t v486 = 0x400000000;
        v489 = 0;
        uint64_t v490 = 0;
        v488 = &v489;
        v459[0] = 0;
        v459[1] = 0;
        int v460 = 0;
        v479 = v481;
        uint64_t v480 = 0x1000000000;
        v483 = 0;
        uint64_t v484 = 0;
        v482 = &v483;
        v456 = 0;
        int32x2_t v457 = 0;
        unsigned int v458 = 0;
        uint64_t v453 = 0;
        uint64_t v454 = 0;
        unsigned int v455 = 0;
        uint64_t v14 = *(void *)(v3 + 280);
        int v15 = *(_DWORD *)(v14 + 264);
        if (v15)
        {
          uint64_t v16 = *(void *)(v14 + 248);
          unsigned int v17 = v15 - 1;
          uint64_t v18 = (v15 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          uint64_t v19 = *(void *)(v16 + 16 * v18);
          if (v13 == v19)
          {
LABEL_23:
            uint64_t v22 = *(void *)(v16 + 16 * v18 + 8);
            if (v22)
            {
              BOOL v448 = **(void **)(v22 + 32) == v13;
              goto LABEL_26;
            }
          }
          else
          {
            int v20 = 1;
            while (v19 != -4096)
            {
              int v21 = v18 + v20++;
              uint64_t v18 = v21 & v17;
              uint64_t v19 = *(void *)(v16 + 16 * v18);
              if (v13 == v19) {
                goto LABEL_23;
              }
            }
          }
          BOOL v448 = 0;
        }
        else
        {
          BOOL v448 = 0;
        }
LABEL_26:
        uint64_t v23 = v13 + 48;
        uint64_t v443 = v13;
        uint64_t v24 = *(void *)(v13 + 56);
        if (v24 != v13 + 48)
        {
          uint64_t v25 = v13 + 48;
          char v441 = 0;
          uint64_t v449 = v23;
          while (1)
          {
            if (!v24 || (uint64_t v26 = v24, (*(unsigned char *)v24 & 4) == 0))
            {
              uint64_t v26 = v24;
              if ((*(_WORD *)(v24 + 44) & 8) != 0)
              {
                uint64_t v26 = v24;
                do
                  uint64_t v26 = *(void *)(v26 + 8);
                while ((*(_WORD *)(v26 + 44) & 8) != 0);
              }
            }
            uint64_t v27 = *(void *)(v26 + 8);
            uint64_t v28 = v462;
            uint64_t v29 = HIDWORD(v463);
            if (v462 == v461)
            {
              if (HIDWORD(v463))
              {
                uint64_t v30 = 0;
                uint64_t v31 = 8 * HIDWORD(v463);
                unint64_t v32 = (uint64_t *)v462;
                do
                {
                  if (*v32 == v24) {
                    goto LABEL_65;
                  }
                  if (*v32 == -2) {
                    uint64_t v30 = v32;
                  }
                  ++v32;
                  v31 -= 8;
                }
                while (v31);
                if (v30)
                {
                  *uint64_t v30 = v24;
                  --v464;
                  goto LABEL_65;
                }
              }
              unsigned int v33 = v463;
              if (HIDWORD(v463) < v463)
              {
                ++HIDWORD(v463);
                *(void *)&v462[8 * v29] = v24;
                goto LABEL_65;
              }
            }
            else
            {
              unsigned int v33 = v463;
            }
            if (3 * v33 <= 4 * (HIDWORD(v463) - v464))
            {
              if (v33 >= 0x40) {
                v33 *= 2;
              }
              else {
                unsigned int v33 = 128;
              }
            }
            else if (v33 - HIDWORD(v463) >= v33 >> 3)
            {
              goto LABEL_46;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v461, v33);
            unsigned int v33 = v463;
            uint64_t v28 = v462;
LABEL_46:
            unsigned int v34 = v33 - 1;
            unsigned int v35 = (v33 - 1) & ((v24 >> 4) ^ (v24 >> 9));
            int v36 = &v28[8 * v35];
            uint64_t v37 = *(void *)v36;
            if (*(void *)v36 == -1)
            {
              uint64_t v38 = 0;
LABEL_58:
              if (v38) {
                uint64_t v42 = v38;
              }
              else {
                uint64_t v42 = (uint64_t *)v36;
              }
              if (*v42 != v24)
              {
                if (*v42 == -2) {
                  --v464;
                }
                else {
                  ++HIDWORD(v463);
                }
                *uint64_t v42 = v24;
              }
            }
            else
            {
              uint64_t v38 = 0;
              int v39 = 1;
              while (v37 != v24)
              {
                if (v38) {
                  BOOL v40 = 0;
                }
                else {
                  BOOL v40 = v37 == -2;
                }
                if (v40) {
                  uint64_t v38 = (uint64_t *)v36;
                }
                unsigned int v41 = v35 + v39++;
                unsigned int v35 = v41 & v34;
                int v36 = &v28[8 * (v41 & v34)];
                uint64_t v37 = *(void *)v36;
                if (*(void *)v36 == -1) {
                  goto LABEL_58;
                }
              }
            }
LABEL_65:
            uint64_t v43 = *(unsigned __int16 **)(v24 + 16);
            unsigned int v44 = *v43;
            if (v44 <= 0x11 && ((1 << v44) & 0x3E078) != 0) {
              goto LABEL_69;
            }
            if (!v448) {
              goto LABEL_102;
            }
            if (v44 != 69 && v44 != 0) {
              goto LABEL_102;
            }
            v494 = (char *)&v496;
            uint64_t v495 = 0x200000000;
            v498[0] = 0;
            v498[1] = 0;
            v497 = v498;
            if (*(_DWORD *)(v24 + 40) >= 2u)
            {
              unsigned int v47 = 1;
              do
              {
                LODWORD(v491) = *(_DWORD *)(*(void *)(v24 + 32) + 32 * v47 + 4);
                sub_1CC37086C((uint64_t)&v494, (unsigned int *)&v491);
                v47 += 2;
              }
              while (v47 < *(_DWORD *)(v24 + 40));
            }
            v491 = (llvm::MachineInstr *)v493;
            uint64_t v492 = 0x400000000;
            char v48 = sub_1CC3DED08(v3, *(_DWORD *)(*(void *)(v24 + 32) + 4), (uint64_t)&v494, (uint64_t)&v491);
            uint64_t v49 = v491;
            uint64_t v50 = v492;
            if (v48)
            {
              char v51 = 0;
              if (v492)
              {
                uint64_t v52 = 24 * v492;
                BOOL v53 = (llvm::MachineInstr **)((char *)v491 + 16);
                do
                {
                  if (*(unsigned char *)v53)
                  {
                    llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(v3 + 248), *(v53 - 2), 0, *((_DWORD *)v53 - 2), *((_DWORD *)v53 - 1));
                    char v51 = 1;
                  }
                  v53 += 3;
                  v52 -= 24;
                }
                while (v52);
                uint64_t v49 = v491;
                uint64_t v50 = v492;
              }
              char v54 = v51;
              if (!v50) {
                goto LABEL_95;
              }
LABEL_91:
              v55 = (char *)v49 - 8;
              uint64_t v56 = 24 * v50;
              do
              {
                if (v55[v56]) {
                  v55[v56] = 0;
                }
                v56 -= 24;
              }
              while (v56);
              goto LABEL_95;
            }
            char v54 = 0;
            if (v492) {
              goto LABEL_91;
            }
LABEL_95:
            if (v49 != (llvm::MachineInstr *)v493) {
              free(v49);
            }
            sub_1CB833A08((uint64_t)&v497, v498[0]);
            if (v494 != (char *)&v496) {
              free(v494);
            }
            if (v54)
            {
              int v442 = 1;
              uint64_t v25 = v449;
              goto LABEL_69;
            }
            uint64_t v43 = *(unsigned __int16 **)(v24 + 16);
            unsigned int v44 = *v43;
LABEL_102:
            uint64_t v450 = v27;
            if (v44 == 19) {
              goto LABEL_103;
            }
            uint64_t v64 = *(unsigned int *)(v24 + 40);
            if (v64)
            {
              uint64_t v65 = *(void *)(v24 + 32);
              uint64_t v66 = v65 + 32 * v64;
              do
              {
                if (*(unsigned char *)v65 == 12)
                {
                  uint64_t v69 = (uint64_t)v456;
                  unsigned int v70 = &v456[4 * v458];
                  if (v457.i32[0])
                  {
                    if (v458)
                    {
                      uint64_t v71 = 16 * v458;
                      uint64_t v72 = v456;
                      while (*v72 >= 0xFFFFFFFE)
                      {
                        v72 += 4;
                        v71 -= 16;
                        if (!v71) {
                          goto LABEL_135;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v72 = v456;
                    }
                  }
                  else
                  {
LABEL_135:
                    uint64_t v72 = &v456[4 * v458];
                  }
                  uint64_t v73 = &v456[4 * v458];
                  if (v72 != v73)
                  {
                    uint64_t v74 = *(void *)(v65 + 16);
                    do
                    {
                      unint64_t v75 = *v72;
                      if (((*(_DWORD *)(v74 + ((v75 >> 3) & 0x1FFFFFFC)) >> v75) & 1) == 0 && v458)
                      {
                        LODWORD(v76) = (v458 - 1) & (37 * v75);
                        v77 = (int *)(v69 + 16 * v76);
                        int v78 = *v77;
                        if (v75 != *v77)
                        {
                          int v81 = 1;
                          do
                          {
                            if (v78 == -1) {
                              goto LABEL_143;
                            }
                            int v82 = v76 + v81++;
                            uint64_t v76 = v82 & (v458 - 1);
                            int v78 = *(_DWORD *)(v69 + 16 * v76);
                          }
                          while (v75 != v78);
                          v77 = (int *)(v69 + 16 * v76);
                        }
                        int *v77 = -2;
                        int32x2_t v457 = vadd_s32(v457, (int32x2_t)0x1FFFFFFFFLL);
                      }
LABEL_143:
                      uint64_t v79 = v72 + 4;
                      while (v79 != v70)
                      {
                        unsigned int v80 = *v79;
                        v79 += 4;
                        if (v80 <= 0xFFFFFFFD)
                        {
                          uint64_t v72 = v79 - 4;
                          goto LABEL_148;
                        }
                      }
                      uint64_t v72 = v70;
LABEL_148:
                      ;
                    }
                    while (v72 != v73);
                  }
                }
                else if (!*(unsigned char *)v65)
                {
                  unsigned int v67 = *(_DWORD *)(v65 + 4);
                  LODWORD(v491) = v67;
                  if ((*(unsigned char *)(v65 + 3) & 1) != 0
                    && v67 - 1 <= 0x3FFFFFFE
                    && !sub_1CB946A80(*(void **)(v3 + 264), v67))
                  {
                    v68 = sub_1CC3DEC94((uint64_t *)&v456, &v491);
                    if (&v456[4 * v458] != (unsigned int *)v68)
                    {
                      int *v68 = -2;
                      int32x2_t v457 = vadd_s32(v457, (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
                }
                v65 += 32;
              }
              while (v65 != v66);
              uint64_t v43 = *(unsigned __int16 **)(v24 + 16);
              unsigned int v44 = *v43;
            }
            if (v44 == 7 || v44 == 10)
            {
              uint64_t v25 = v449;
              uint64_t v27 = v450;
              goto LABEL_69;
            }
            uint64_t v27 = v450;
            if (v44 - 1 >= 2)
            {
LABEL_103:
              __int16 v57 = *(_WORD *)(v24 + 44);
              uint64_t v58 = *((void *)v43 + 1);
              if ((v57 & 0xC) != 0 && (v57 & 4) == 0)
              {
                uint64_t v414 = v24;
                if ((v58 & 0x1000000) != 0)
                {
LABEL_949:
                  uint64_t v3 = v447;
                  uint64_t v27 = v450;
                }
                else
                {
                  while ((*(_WORD *)(v414 + 44) & 8) != 0)
                  {
                    uint64_t v414 = *(void *)(v414 + 8);
                    if (*(unsigned char *)(*(void *)(v414 + 16) + 11)) {
                      goto LABEL_949;
                    }
                  }
                  if (v44 - 1 > 1)
                  {
                    uint64_t v3 = v447;
                    uint64_t v27 = v450;
                    goto LABEL_106;
                  }
                  uint64_t v3 = v447;
                  uint64_t v27 = v450;
                  if ((*(unsigned char *)(*(void *)(v24 + 32) + 48) & 1) == 0) {
                    goto LABEL_106;
                  }
                }
              }
              else if ((v58 & 0x1000000) == 0)
              {
                goto LABEL_106;
              }
            }
            if (v457)
            {
              if (v458 > 4 * v457.i32[0] && v458 >= 0x41)
              {
                sub_1CBC04D20(&v456);
                uint64_t v43 = *(unsigned __int16 **)(v24 + 16);
              }
              else
              {
                if (v458)
                {
                  uint64_t v85 = v456;
                  uint64_t v86 = 16 * v458;
                  do
                  {
                    *uint64_t v85 = -1;
                    v85 += 4;
                    v86 -= 16;
                  }
                  while (v86);
                }
                int32x2_t v457 = 0;
              }
            }
LABEL_106:
            uint64_t v59 = *((void *)v43 + 1);
            if ((v59 & 0x8000) == 0 && ((v59 & 0xE00000000) == 0 || byte_1EBCD17C8 != 0)) {
              goto LABEL_253;
            }
            LODWORD(v469) = 0;
            v467 = &unk_1F2610B28;
            v468 = (unsigned char *)v24;
            HIDWORD(v469) = *((unsigned __int8 *)v43 + 4);
            v491 = (llvm::MachineInstr *)1;
            for (uint64_t i = 8; i != 200; i += 48)
              *(llvm::MachineInstr **)((char *)&v491 + i) = (llvm::MachineInstr *)-1;
            v478[0] = 0;
            unint64_t v466 = 0;
            v494 = (char *)&v496;
            uint64_t v495 = 0x400000000;
            if (!sub_1CC3DF174((uint64_t)&v467, v478, &v466)) {
              goto LABEL_248;
            }
            do
            {
              if ((v466 - 1) < 0x3FFFFFFF || (unint64_t v62 = v466, !sub_1CC3DF1EC(v3, v466, &v491)))
              {
                int v84 = 1;
                uint64_t v27 = v450;
                goto LABEL_249;
              }
              if (v495 >= (unint64_t)HIDWORD(v495)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)&v494[8 * v495] = v62;
              int v63 = v495 + 1;
              LODWORD(v495) = v495 + 1;
            }
            while ((sub_1CC3DF174((uint64_t)&v467, v478, &v466) & 1) != 0);
            uint64_t v27 = v450;
            if (v63)
            {
              v87 = (unint64_t *)v494;
              v445 = &v494[8 * v63];
              while (1)
              {
                unint64_t v88 = *v87;
                unint64_t v89 = sub_1CC3E06F4(*(void **)(v3 + 264), *(void *)(v3 + 248), *v87, (uint64_t)&v491, 1);
                uint64_t v90 = *(void *)(v3 + 264);
                unint64_t v91 = *(void *)(*(void *)(v90 + 24) + 16 * (v88 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v90, "", 0);
                *(void *)(*(void *)(v90 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v91;
                uint64_t v93 = *(void *)(v90 + 8);
                if (v93) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 24))(v93, IncompleteVirtualRegister);
                }
                v94 = sub_1CB84B030(*(void *)(v24 + 24), v24, (unsigned __int8 **)(v24 + 56), *(void *)(*(void *)(v3 + 248) + 8) + 912, IncompleteVirtualRegister);
                v96 = v95;
                v473 = 0;
                uint64_t v474 = 0;
                uint64_t v475 = 0;
                HIDWORD(v472) = v89;
                LODWORD(v472) = (v89 >> 24) & 0xFFF00;
                llvm::MachineInstr::addOperand(v95, v94, (const llvm::MachineOperand *)&v472);
                if (HIDWORD(v88))
                {
                  **((_DWORD **)v96 + 4) = **((_DWORD **)v96 + 4) & 0xFFF000FF | ((WORD2(v88) & 0xFFF) << 8);
                  **((_DWORD **)v96 + 4) |= 0x10000000u;
                }
                v97 = *(void **)(v3 + 264);
                uint64_t v98 = (*(uint64_t (**)(void))(**(void **)(*v97 + 16) + 176))(*(void *)(*v97 + 16));
                if ((v88 & 0x80000000) != 0) {
                  v99 = (uint64_t *)(v97[3] + 16 * (v88 & 0x7FFFFFFF) + 8);
                }
                else {
                  v99 = (uint64_t *)(v97[34] + 8 * v88);
                }
                uint64_t v100 = *v99;
                uint64_t v3 = v447;
                if (*v99)
                {
                  do
                  {
                    uint64_t v101 = *(void *)(v100 + 24);
                    if ((IncompleteVirtualRegister - 1) <= 0x3FFFFFFE) {
                      llvm::MachineOperand::substPhysReg((unsigned int *)v100, IncompleteVirtualRegister, v98);
                    }
                    else {
                      llvm::MachineOperand::setReg(v100, IncompleteVirtualRegister);
                    }
                    uint64_t v100 = v101;
                  }
                  while (v101);
                }
                uint64_t v102 = *(void *)(v447 + 264);
                if ((IncompleteVirtualRegister & 0x80000000) != 0) {
                  v103 = (unsigned int **)(*(void *)(v102 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF) + 8);
                }
                else {
                  v103 = (unsigned int **)(*(void *)(v102 + 272) + 8 * IncompleteVirtualRegister);
                }
                v104 = *v103;
                if (v104)
                {
                  while (1)
                  {
                    unsigned int v105 = *v104;
                    if ((*v104 & 0x1000000) == 0) {
                      break;
                    }
                    v104 = (unsigned int *)*((void *)v104 + 3);
                    if (!v104) {
                      goto LABEL_196;
                    }
                  }
LABEL_191:
                  unsigned int *v104 = v105 & 0xFBFFFFFF;
                  while (1)
                  {
                    v104 = (unsigned int *)*((void *)v104 + 3);
                    if (!v104) {
                      break;
                    }
                    unsigned int v105 = *v104;
                    if ((*v104 & 0x1000000) == 0) {
                      goto LABEL_191;
                    }
                  }
                  uint64_t v102 = *(void *)(v447 + 264);
                }
LABEL_196:
                if ((v89 & 0x80000000) != 0) {
                  v106 = (unsigned int **)(*(void *)(v102 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
                }
                else {
                  v106 = (unsigned int **)(*(void *)(v102 + 272) + 8 * v89);
                }
                v107 = *v106;
                uint64_t v27 = v450;
                if (v107)
                {
                  while (1)
                  {
                    unsigned int v108 = *v107;
                    if ((*v107 & 0x1000000) == 0) {
                      break;
                    }
                    v107 = (unsigned int *)*((void *)v107 + 3);
                    if (!v107) {
                      goto LABEL_201;
                    }
                  }
LABEL_211:
                  unsigned int *v107 = v108 & 0xFBFFFFFF;
                  while (1)
                  {
                    v107 = (unsigned int *)*((void *)v107 + 3);
                    if (!v107) {
                      break;
                    }
                    unsigned int v108 = *v107;
                    if ((*v107 & 0x1000000) == 0) {
                      goto LABEL_211;
                    }
                  }
                }
LABEL_201:
                v109 = v462;
                uint64_t v110 = HIDWORD(v463);
                if (v462 != v461) {
                  break;
                }
                if (!HIDWORD(v463)) {
                  goto LABEL_209;
                }
                v111 = 0;
                uint64_t v112 = 8 * HIDWORD(v463);
                v113 = (llvm::MachineInstr **)v462;
                do
                {
                  if (*v113 == v96) {
                    goto LABEL_237;
                  }
                  if (*v113 == (llvm::MachineInstr *)-2) {
                    v111 = v113;
                  }
                  ++v113;
                  v112 -= 8;
                }
                while (v112);
                if (v111)
                {
                  *v111 = v96;
                  --v464;
                }
                else
                {
LABEL_209:
                  unsigned int v114 = v463;
                  if (HIDWORD(v463) >= v463) {
                    goto LABEL_216;
                  }
                  ++HIDWORD(v463);
                  *(void *)&v462[8 * v110] = v96;
                }
LABEL_237:
                if (++v87 == (unint64_t *)v445) {
                  goto LABEL_248;
                }
              }
              unsigned int v114 = v463;
LABEL_216:
              if (3 * v114 <= 4 * (HIDWORD(v463) - v464))
              {
                if (v114 >= 0x40) {
                  v114 *= 2;
                }
                else {
                  unsigned int v114 = 128;
                }
              }
              else if (v114 - HIDWORD(v463) >= v114 >> 3)
              {
                goto LABEL_218;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v461, v114);
              unsigned int v114 = v463;
              v109 = v462;
LABEL_218:
              unsigned int v115 = v114 - 1;
              unsigned int v116 = (v114 - 1) & ((v96 >> 4) ^ (v96 >> 9));
              v117 = &v109[8 * v116];
              v118 = *(llvm::MachineInstr **)v117;
              if (*(void *)v117 == -1)
              {
                v119 = 0;
LABEL_230:
                if (v119) {
                  v123 = (llvm::MachineInstr **)v119;
                }
                else {
                  v123 = (llvm::MachineInstr **)v117;
                }
                if (*v123 != v96)
                {
                  if (*v123 == (llvm::MachineInstr *)-2) {
                    --v464;
                  }
                  else {
                    ++HIDWORD(v463);
                  }
                  *v123 = v96;
                }
              }
              else
              {
                v119 = 0;
                int v120 = 1;
                while (v118 != v96)
                {
                  if (v119) {
                    BOOL v121 = 0;
                  }
                  else {
                    BOOL v121 = v118 == (llvm::MachineInstr *)-2;
                  }
                  if (v121) {
                    v119 = v117;
                  }
                  unsigned int v122 = v116 + v120++;
                  unsigned int v116 = v122 & v115;
                  v117 = &v109[8 * (v122 & v115)];
                  v118 = *(llvm::MachineInstr **)v117;
                  if (*(void *)v117 == -1) {
                    goto LABEL_230;
                  }
                }
              }
              goto LABEL_237;
            }
LABEL_248:
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v24);
            int v84 = 0;
LABEL_249:
            if (v494 != (char *)&v496) {
              free(v494);
            }
            sub_1CC3DFF8C((int *)&v491);
            if (!v84)
            {
LABEL_272:
              v125 = v461;
              if (v462 == v461)
              {
                int v126 = HIDWORD(v463);
                v127 = &v462[8 * HIDWORD(v463)];
                uint64_t v25 = v449;
                if (HIDWORD(v463))
                {
                  uint64_t v128 = 0;
                  while (*(void *)&v462[v128] != v24)
                  {
                    v128 += 8;
                    if (8 * HIDWORD(v463) == v128) {
                      goto LABEL_307;
                    }
                  }
                  v127 = &v462[v128];
                }
LABEL_307:
                v125 = v462;
              }
              else
              {
                int v134 = v463 - 1;
                unsigned int v135 = (v463 - 1) & ((v24 >> 4) ^ (v24 >> 9));
                v127 = &v462[8 * v135];
                uint64_t v136 = *(void *)v127;
                uint64_t v25 = v449;
                v137 = 0;
                if (*(void *)v127 == -1)
                {
LABEL_300:
                  if (v137) {
                    v127 = v137;
                  }
                  int v126 = HIDWORD(v463);
                  if (*(void *)v127 != v24) {
                    v127 = &v462[8 * v463];
                  }
                }
                else
                {
                  int v138 = 1;
                  while (v136 != v24)
                  {
                    if (v137) {
                      BOOL v139 = 0;
                    }
                    else {
                      BOOL v139 = v136 == -2;
                    }
                    if (v139) {
                      v137 = v127;
                    }
                    unsigned int v140 = v135 + v138++;
                    unsigned int v135 = v140 & v134;
                    v127 = &v462[8 * (v140 & v134)];
                    uint64_t v136 = *(void *)v127;
                    if (*(void *)v127 == -1) {
                      goto LABEL_300;
                    }
                  }
                  int v126 = HIDWORD(v463);
                }
              }
              if (v462 == v125) {
                int v141 = v126;
              }
              else {
                int v141 = v463;
              }
              if (v127 != &v462[8 * v141])
              {
                *(void *)v127 = -2;
                ++v464;
              }
              goto LABEL_313;
            }
            uint64_t v59 = *(void *)(*(void *)(v24 + 16) + 8);
LABEL_253:
            if ((v59 & 0x1000) != 0)
            {
              LODWORD(v472) = 0;
              LODWORD(v467) = 0;
              v491 = 0;
              v494 = 0;
              if ((*(unsigned int (**)(void))(**(void **)(v3 + 248) + 896))())
              {
                if ((v472 - 1) >= 0x3FFFFFFF
                  && (v467 - 1) >= 0x3FFFFFFF
                  && ((*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 248) + 904))(*(void *)(v3 + 248), v24) & 1) != 0)
                {
                  goto LABEL_272;
                }
              }
            }
            if (*(unsigned char *)(*(void *)(v24 + 16) + 10))
            {
              LODWORD(v494) = 0;
              LODWORD(v472) = 0;
              LOBYTE(v467) = 0;
              v491 = (llvm::MachineInstr *)v493;
              uint64_t v492 = 0x400000000;
              int v124 = 0;
              if (((*(uint64_t (**)(void, uint64_t, llvm::MachineInstr **, char **, char **, unsigned char **))(**(void **)(v3 + 248) + 384))(*(void *)(v3 + 248), v24, &v491, &v494, &v472, &v467) & 1) == 0&& (_BYTE)v467)
              {
                if ((*(uint64_t (**)(void, uint64_t, char **, void))(**(void **)(v3 + 248) + 392))(*(void *)(v3 + 248), v24, &v461, 0))
                {
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v24);
                  int v124 = 1;
                }
                else
                {
                  int v124 = 0;
                }
              }
              if (v491 != (llvm::MachineInstr *)v493) {
                free(v491);
              }
              if (v124) {
                goto LABEL_272;
              }
            }
            __int16 v129 = *(_WORD *)(v24 + 44);
            v130 = *(unsigned __int16 **)(v24 + 16);
            uint64_t v131 = *((void *)v130 + 1);
            if ((v129 & 0xC) != 0 && (v129 & 4) == 0)
            {
              uint64_t v417 = v24;
              if ((v131 & 0x400) != 0)
              {
LABEL_959:
                if ((v131 & 0x100) != 0) {
                  goto LABEL_1019;
                }
                uint64_t v418 = v24;
                while ((*(_WORD *)(v418 + 44) & 8) != 0)
                {
                  uint64_t v418 = *(void *)(v418 + 8);
                  if (*(unsigned char *)(*(void *)(v418 + 16) + 9)) {
                    goto LABEL_1019;
                  }
                }
                if ((v131 & 0x800) != 0) {
                  goto LABEL_1019;
                }
                uint64_t v437 = v24;
                do
                {
                  uint64_t v3 = v447;
                  uint64_t v25 = v449;
                  uint64_t v27 = v450;
                  if ((*(_WORD *)(v437 + 44) & 8) == 0) {
                    goto LABEL_1017;
                  }
                  uint64_t v437 = *(void *)(v437 + 8);
                }
                while ((*(unsigned char *)(*(void *)(v437 + 16) + 9) & 8) == 0);
                uint64_t v3 = v447;
              }
              else
              {
                while ((*(_WORD *)(v417 + 44) & 8) != 0)
                {
                  uint64_t v417 = *(void *)(v417 + 8);
                  if ((*(unsigned char *)(*(void *)(v417 + 16) + 9) & 4) != 0) {
                    goto LABEL_959;
                  }
                }
LABEL_1019:
                uint64_t v3 = v447;
              }
              uint64_t v25 = v449;
              uint64_t v27 = v450;
              goto LABEL_281;
            }
            uint64_t v25 = v449;
            if ((*((void *)v130 + 1) & 0xD00) == 0x400)
            {
LABEL_1017:
              if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 248) + 912))(*(void *)(v3 + 248), v24))goto LABEL_313; {
              v130 = *(unsigned __int16 **)(v24 + 16);
              }
            }
LABEL_281:
            unsigned int v132 = *v130;
            if (v132 == 19) {
              goto LABEL_287;
            }
            if (byte_1EBCD17C8) {
              goto LABEL_399;
            }
            if (v132 <= 0x12 && ((1 << v132) & 0x40300) != 0)
            {
LABEL_287:
              if ((*(_DWORD *)(*(void *)(v24 + 32) + 4) - 1) >= 0x3FFFFFFF)
              {
                if ((*((void *)v130 + 1) & 0xE00008000) != 0) {
                  operator new();
                }
                if (*v130 > 0x11u)
                {
                  if (v132 == 18) {
                    operator new();
                  }
                  if (v132 == 19) {
                    operator new();
                  }
                }
                else
                {
                  if (v132 == 8) {
                    operator new();
                  }
                  if (v132 == 9) {
                    operator new();
                  }
                }
              }
            }
            if (v132 != 19) {
              goto LABEL_399;
            }
            v142 = *(_DWORD **)(v24 + 32);
            uint64_t v143 = v142[9];
            if ((v143 & 0x80000000) == 0) {
              goto LABEL_367;
            }
            int v144 = v142[1];
            if ((v144 & 0x80000000) == 0) {
              goto LABEL_367;
            }
            unint64_t v145 = ((unint64_t)v142[8] >> 8) & 0xFFF;
            if (!v455)
            {
              v168 = 0;
LABEL_359:
              if (4 * (int)v454 + 4 >= 3 * v455)
              {
                sub_1CC3E0E00(&v453, 2 * v455);
                if (v455)
                {
                  unint64_t v381 = ((37 * v145) | ((unint64_t)(37 * v143) << 32))
                       + ~((unint64_t)(37 * v145) << 32);
                  unint64_t v382 = (v381 ^ (v381 >> 22)) + ~((v381 ^ (v381 >> 22)) << 13);
                  unint64_t v383 = (9 * (v382 ^ (v382 >> 8))) ^ ((9 * (v382 ^ (v382 >> 8))) >> 15);
                  int v384 = ((v383 + ~(v383 << 27)) >> 31) ^ (v383 + ~(v383 << 27));
                  unsigned int v385 = v455 - 1;
                  unsigned int v386 = (v455 - 1) & v384;
                  v168 = (int *)(v453 + 16 * v386);
                  int v387 = *v168;
                  int v388 = v168[1];
                  if (v143 != *v168 || v145 != v388)
                  {
                    v390 = 0;
                    int v391 = 1;
                    while (v387 != -1 || v388 != -1)
                    {
                      if (v390) {
                        BOOL v392 = 0;
                      }
                      else {
                        BOOL v392 = v388 == -2;
                      }
                      if (v392 && v387 == -2) {
                        v390 = v168;
                      }
                      unsigned int v394 = v386 + v391++;
                      unsigned int v386 = v394 & v385;
                      v168 = (int *)(v453 + 16 * (v394 & v385));
                      int v387 = *v168;
                      int v388 = v168[1];
                      if (v143 == *v168 && v145 == v388) {
                        goto LABEL_361;
                      }
                    }
                    if (v390) {
                      v168 = v390;
                    }
                  }
                }
                else
                {
                  v168 = 0;
                }
              }
              else if (v455 + ~v454 - HIDWORD(v454) <= v455 >> 3)
              {
                sub_1CC3E0E00(&v453, v455);
                if (v455)
                {
                  unint64_t v422 = ((37 * v145) | ((unint64_t)(37 * v143) << 32))
                       + ~((unint64_t)(37 * v145) << 32);
                  unint64_t v423 = (v422 ^ (v422 >> 22)) + ~((v422 ^ (v422 >> 22)) << 13);
                  unint64_t v424 = (9 * (v423 ^ (v423 >> 8))) ^ ((9 * (v423 ^ (v423 >> 8))) >> 15);
                  int v425 = ((v424 + ~(v424 << 27)) >> 31) ^ (v424 + ~(v424 << 27));
                  unsigned int v426 = v455 - 1;
                  unsigned int v427 = (v455 - 1) & v425;
                  v168 = (int *)(v453 + 16 * v427);
                  int v428 = *v168;
                  int v429 = v168[1];
                  if (*v168 != v143 || v429 != v145)
                  {
                    v431 = 0;
                    int v432 = 1;
                    while (v428 != -1 || v429 != -1)
                    {
                      if (v431) {
                        BOOL v433 = 0;
                      }
                      else {
                        BOOL v433 = v429 == -2;
                      }
                      if (v433 && v428 == -2) {
                        v431 = v168;
                      }
                      unsigned int v435 = v427 + v432++;
                      unsigned int v427 = v435 & v426;
                      v168 = (int *)(v453 + 16 * (v435 & v426));
                      int v428 = *v168;
                      int v429 = v168[1];
                      BOOL v436 = *v168 == v143 && v429 == v145;
                      uint64_t v3 = v447;
                      if (v436) {
                        goto LABEL_361;
                      }
                    }
                    if (v431) {
                      v168 = v431;
                    }
                  }
                }
                else
                {
                  v168 = 0;
                }
                uint64_t v3 = v447;
              }
LABEL_361:
              LODWORD(v454) = v454 + 1;
              if (*v168 != -1 || v168[1] != -1) {
                --HIDWORD(v454);
              }
              *(void *)v168 = v143 | (v145 << 32);
              *((void *)v168 + 1) = v24;
              goto LABEL_367;
            }
            unint64_t v146 = ((37 * v145) | ((unint64_t)(37 * v143) << 32))
                 + ~((unint64_t)(37 * v145) << 32);
            unint64_t v147 = (v146 ^ (v146 >> 22)) + ~((v146 ^ (v146 >> 22)) << 13);
            unint64_t v148 = (9 * (v147 ^ (v147 >> 8))) ^ ((9 * (v147 ^ (v147 >> 8))) >> 15);
            int v149 = ((v148 + ~(v148 << 27)) >> 31) ^ (v148 + ~(v148 << 27));
            unsigned int v150 = v455 - 1;
            unsigned int v151 = (v455 - 1) & v149;
            v152 = (int *)(v453 + 16 * v151);
            int v154 = *v152;
            int v153 = v152[1];
            if (v143 == *v152 && v145 == v153) {
              goto LABEL_921;
            }
            v156 = 0;
            int v157 = 1;
            int v158 = v152[1];
            int v159 = *v152;
            int v160 = v151;
            do
            {
              if (v159 == -1 && v158 == -1)
              {
                if (v156) {
                  v168 = v156;
                }
                else {
                  v168 = v152;
                }
                goto LABEL_359;
              }
              if (v156) {
                BOOL v161 = 0;
              }
              else {
                BOOL v161 = v158 == -2;
              }
              if (v161 && v159 == -2) {
                v156 = v152;
              }
              int v163 = v160 + v157++;
              int v160 = v163 & v150;
              v152 = (int *)(v453 + 16 * (v163 & v150));
              int v159 = *v152;
              int v158 = v152[1];
            }
            while (v143 != *v152 || v145 != v158);
            int v165 = 1;
            while (v154 != -1 || v153 != -1)
            {
              unsigned int v166 = v151 + v165++;
              unsigned int v151 = v166 & v150;
              v152 = (int *)(v453 + 16 * v151);
              int v154 = *v152;
              int v153 = v152[1];
              if (v143 == *v152 && v145 == v153) {
                goto LABEL_921;
              }
            }
            v152 = (int *)(v453 + 16 * v455);
LABEL_921:
            uint64_t v404 = *(unsigned int *)(*(void *)(*((void *)v152 + 1) + 32) + 4);
            v405 = *(void **)(v3 + 264);
            uint64_t v406 = v144 & 0x7FFFFFFF;
            if ((*(void *)(v405[3] + 16 * v406) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v405[3]
                                                                                         + 16 * (v404 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v407 = (*(uint64_t (**)(void))(**(void **)(*v405 + 16) + 176))(*(void *)(*v405 + 16));
              uint64_t v408 = *(void *)(v405[3] + 16 * v406 + 8);
              if (v408)
              {
                do
                {
                  uint64_t v409 = *(void *)(v408 + 24);
                  if ((v404 - 1) <= 0x3FFFFFFE) {
                    llvm::MachineOperand::substPhysReg((unsigned int *)v408, v404, v407);
                  }
                  else {
                    llvm::MachineOperand::setReg(v408, v404);
                  }
                  uint64_t v408 = v409;
                }
                while (v409);
              }
              uint64_t v410 = *(void *)(v3 + 264);
              if ((v404 & 0x80000000) != 0) {
                v411 = (unsigned int **)(*(void *)(v410 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8);
              }
              else {
                v411 = (unsigned int **)(*(void *)(v410 + 272) + 8 * v404);
              }
              uint64_t v25 = v449;
              uint64_t v27 = v450;
              v412 = *v411;
              if (v412)
              {
                while (1)
                {
                  unsigned int v413 = *v412;
                  if ((*v412 & 0x1000000) == 0) {
                    break;
                  }
                  v412 = (unsigned int *)*((void *)v412 + 3);
                  if (!v412) {
                    goto LABEL_388;
                  }
                }
LABEL_934:
                unsigned int *v412 = v413 & 0xFBFFFFFF;
                while (1)
                {
                  v412 = (unsigned int *)*((void *)v412 + 3);
                  if (!v412) {
                    break;
                  }
                  unsigned int v413 = *v412;
                  if ((*v412 & 0x1000000) == 0) {
                    goto LABEL_934;
                  }
                }
              }
LABEL_388:
              v181 = v461;
              if (v462 == v461)
              {
                int v182 = HIDWORD(v463);
                v183 = &v462[8 * HIDWORD(v463)];
                if (HIDWORD(v463))
                {
                  uint64_t v184 = 0;
                  while (*(void *)&v462[v184] != v24)
                  {
                    v184 += 8;
                    if (8 * HIDWORD(v463) == v184) {
                      goto LABEL_913;
                    }
                  }
                  v183 = &v462[v184];
                }
LABEL_913:
                v181 = v462;
              }
              else
              {
                int v396 = v463 - 1;
                unsigned int v397 = (v463 - 1) & ((v24 >> 4) ^ (v24 >> 9));
                v183 = &v462[8 * v397];
                uint64_t v398 = *(void *)v183;
                if (*(void *)v183 == -1)
                {
                  v399 = 0;
LABEL_939:
                  if (v399) {
                    v183 = v399;
                  }
                  int v182 = HIDWORD(v463);
                  if (*(void *)v183 != v24) {
                    v183 = &v462[8 * v463];
                  }
                }
                else
                {
                  v399 = 0;
                  int v400 = 1;
                  while (v398 != v24)
                  {
                    if (v399) {
                      BOOL v401 = 0;
                    }
                    else {
                      BOOL v401 = v398 == -2;
                    }
                    if (v401) {
                      v399 = v183;
                    }
                    unsigned int v402 = v397 + v400++;
                    unsigned int v397 = v402 & v396;
                    v183 = &v462[8 * (v402 & v396)];
                    uint64_t v398 = *(void *)v183;
                    if (*(void *)v183 == -1) {
                      goto LABEL_939;
                    }
                  }
                  int v182 = HIDWORD(v463);
                }
              }
              if (v462 == v181) {
                int v403 = v182;
              }
              else {
                int v403 = v463;
              }
              if (v183 != &v462[8 * v403])
              {
                *(void *)v183 = -2;
                ++v464;
              }
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v24);
LABEL_313:
              int v442 = 1;
              goto LABEL_69;
            }
LABEL_367:
            uint64_t v25 = v449;
            uint64_t v27 = v450;
            if (!byte_1EBCD1888)
            {
              uint64_t v170 = *(void *)(v24 + 32);
              unsigned int v171 = *(_DWORD *)(v170 + 4);
              LODWORD(v494) = v171;
              unsigned int v172 = *(_DWORD *)(v170 + 36);
              if (v172 - 1 > 0x3FFFFFFE)
              {
                if ((v172 & 0x80000000) != 0 && v171 - 1 <= 0x3FFFFFFE && !sub_1CB946A80(*(void **)(v3 + 264), v171))
                {
                  v180 = sub_1CC3DEC94((uint64_t *)&v456, &v494);
                  if (&v456[4 * v458] != (unsigned int *)v180)
                  {
                    if (*(_DWORD *)(*(void *)(*((void *)v180 + 1) + 32) + 4) == v172)
                    {
                      uint64_t v27 = v450;
                      goto LABEL_388;
                    }
                    int *v180 = -2;
                    int32x2_t v457 = vadd_s32(v457, (int32x2_t)0x1FFFFFFFFLL);
                  }
                }
              }
              else if (!sub_1CB946A80(*(void **)(v3 + 264), v172) && (v494 & 0x80000000) != 0)
              {
                LODWORD(v491) = v172;
                uint64_t v492 = v24;
                if (!v458)
                {
                  v185 = 0;
                  goto LABEL_397;
                }
                unsigned int v173 = (v458 - 1) & (37 * v172);
                v174 = &v456[4 * v173];
                unsigned int v175 = *v174;
                if (v172 != *v174)
                {
                  v176 = 0;
                  int v177 = 1;
                  while (v175 != -1)
                  {
                    if (v176) {
                      BOOL v178 = 0;
                    }
                    else {
                      BOOL v178 = v175 == -2;
                    }
                    if (v178) {
                      v176 = v174;
                    }
                    unsigned int v179 = v173 + v177++;
                    unsigned int v173 = v179 & (v458 - 1);
                    v174 = &v456[4 * v173];
                    unsigned int v175 = *v174;
                    if (v172 == *v174) {
                      goto LABEL_398;
                    }
                  }
                  if (v176) {
                    v185 = v176;
                  }
                  else {
                    v185 = v174;
                  }
LABEL_397:
                  v186 = sub_1CC3E0FEC((uint64_t)&v456, (uint64_t)&v491, (int *)&v491, v185);
                  _DWORD *v186 = v491;
                  *((void *)v186 + 1) = v492;
                }
              }
LABEL_398:
              uint64_t v27 = v450;
            }
LABEL_399:
            uint64_t v187 = *(void *)(v24 + 16);
            if ((*(unsigned char *)(v187 + 9) & 0x20) != 0 && *(unsigned char *)(v187 + 4) == 1)
            {
              v188 = (llvm::MachineInstr *)*(unsigned int *)(*(void *)(v24 + 32) + 4);
              LODWORD(v494) = v188;
              if ((v188 & 0x80000000) != 0)
              {
                v491 = v188;
                uint64_t v492 = v24;
                if (v460)
                {
                  unsigned int v192 = (v460 - 1) & (37 * v188);
                  v193 = (_DWORD *)(v459[0] + 16 * v192);
                  int v194 = *v193;
                  if (v188 != *v193)
                  {
                    v195 = 0;
                    int v196 = 1;
                    while (v194 != -1)
                    {
                      if (v195) {
                        BOOL v197 = 0;
                      }
                      else {
                        BOOL v197 = v194 == -2;
                      }
                      if (v197) {
                        v195 = v193;
                      }
                      unsigned int v198 = v192 + v196++;
                      unsigned int v192 = v198 & (v460 - 1);
                      v193 = (_DWORD *)(v459[0] + 16 * v192);
                      int v194 = *v193;
                      if (v188 == *v193) {
                        goto LABEL_426;
                      }
                    }
                    if (v195) {
                      v199 = v195;
                    }
                    else {
                      v199 = v193;
                    }
LABEL_425:
                    v200 = sub_1CC3E0FEC((uint64_t)v459, (uint64_t)&v491, (int *)&v491, v199);
                    _DWORD *v200 = v491;
                    *((void *)v200 + 1) = v492;
                  }
LABEL_426:
                  sub_1CBB141C8((uint64_t)&v485, (unsigned int *)&v494);
                  char v441 = 1;
                  goto LABEL_722;
                }
                v199 = 0;
                goto LABEL_425;
              }
            }
            LODWORD(v466) = 0;
            uint64_t v477 = 0;
            if (!(*(unsigned int (**)(void, uint64_t, unint64_t *, char *, uint64_t *))(**(void **)(v3 + 248) + 56))(*(void *)(v3 + 248), v24, &v466, (char *)&v477 + 4, &v477)|| (HIDWORD(v477) - 1) < 0x3FFFFFFF|| (v466 - 1) < 0x3FFFFFFF)
            {
              goto LABEL_691;
            }
            uint64_t v189 = *(void *)(v3 + 264);
            if ((v466 & 0x80000000) != 0) {
              v190 = (uint64_t *)(*(void *)(v189 + 24) + 16 * (v466 & 0x7FFFFFFF) + 8);
            }
            else {
              v190 = (uint64_t *)(*(void *)(v189 + 272) + 8 * v466);
            }
            uint64_t v191 = *v190;
            if (!v191)
            {
LABEL_429:
              uint64_t v444 = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(v3 + 256) + 200))(*(void *)(v3 + 256), *(void *)(*(void *)(v189 + 24) + 16 * (HIDWORD(v477) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v477);
              if (!v444) {
                goto LABEL_691;
              }
              uint64_t v451 = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(v3 + 256) + 200))(*(void *)(v3 + 256), *(void *)(*(void *)(*(void *)(v3 + 264) + 24) + 16 * (v466 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v477);
              v472 = v476;
              v473 = v476;
              uint64_t v474 = 4;
              LODWORD(v475) = 0;
              uint64_t v201 = *(void *)(v3 + 264);
              if (v477 < 0) {
                v202 = (uint64_t *)(*(void *)(v201 + 24) + 16 * (HIDWORD(v477) & 0x7FFFFFFF) + 8);
              }
              else {
                v202 = (uint64_t *)(*(void *)(v201 + 272) + 8 * HIDWORD(v477));
              }
              uint64_t v203 = *v202;
              if (*v202)
              {
                while ((*(_DWORD *)v203 & 0x81000000) != 0)
                {
                  uint64_t v203 = *(void *)(v203 + 24);
                  if (!v203) {
                    goto LABEL_480;
                  }
                }
                unsigned int v204 = 0;
                uint64_t v205 = *(void *)(v203 + 8);
                unsigned int v206 = 4;
                v207 = v476;
                v208 = v476;
LABEL_437:
                uint64_t v209 = *(void *)(v205 + 24);
                if (v207 == v208)
                {
                  if (v204)
                  {
                    v210 = 0;
                    uint64_t v211 = 8 * v204;
                    v212 = v208;
                    do
                    {
                      if (*(void *)v212 == v209) {
                        goto LABEL_468;
                      }
                      if (*(void *)v212 == -2) {
                        v210 = v212;
                      }
                      v212 += 8;
                      v211 -= 8;
                    }
                    while (v211);
                    if (v210)
                    {
                      *(void *)v210 = v209;
                      LODWORD(v475) = v475 - 1;
                      goto LABEL_468;
                    }
                  }
                  if (v206 > v204)
                  {
                    HIDWORD(v474) = v204 + 1;
                    *(void *)&v208[8 * v204] = v209;
                    goto LABEL_468;
                  }
                }
                if (3 * v206 <= 4 * (v204 - v475))
                {
                  if (v206 >= 0x40) {
                    v206 *= 2;
                  }
                  else {
                    unsigned int v206 = 128;
                  }
                }
                else if (v206 - v204 >= v206 >> 3)
                {
                  goto LABEL_449;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v472, v206);
                unsigned int v206 = v474;
                v207 = v473;
LABEL_449:
                unsigned int v213 = v206 - 1;
                unsigned int v214 = (v206 - 1) & ((v209 >> 4) ^ (v209 >> 9));
                v215 = &v207[8 * v214];
                uint64_t v216 = *(void *)v215;
                if (*(void *)v215 == -1)
                {
                  v217 = 0;
LABEL_461:
                  if (v217) {
                    v221 = v217;
                  }
                  else {
                    v221 = v215;
                  }
                  if (*(void *)v221 != v209)
                  {
                    if (*(void *)v221 == -2) {
                      LODWORD(v475) = v475 - 1;
                    }
                    else {
                      ++HIDWORD(v474);
                    }
                    *(void *)v221 = v209;
                  }
                }
                else
                {
                  v217 = 0;
                  int v218 = 1;
                  while (v216 != v209)
                  {
                    if (v217) {
                      BOOL v219 = 0;
                    }
                    else {
                      BOOL v219 = v216 == -2;
                    }
                    if (v219) {
                      v217 = v215;
                    }
                    unsigned int v220 = v214 + v218++;
                    unsigned int v214 = v220 & v213;
                    v215 = &v207[8 * (v220 & v213)];
                    uint64_t v216 = *(void *)v215;
                    if (*(void *)v215 == -1) {
                      goto LABEL_461;
                    }
                  }
                }
LABEL_468:
                v208 = v472;
                v207 = v473;
                unsigned int v204 = HIDWORD(v474);
                unsigned int v206 = v474;
                uint64_t v222 = *(void *)(v203 + 8);
                while (1)
                {
                  uint64_t v203 = *(void *)(v203 + 24);
                  if (!v203) {
                    break;
                  }
                  if ((*(_DWORD *)v203 & 0x81000000) == 0)
                  {
                    uint64_t v205 = *(void *)(v203 + 8);
                    if (v205 != v222) {
                      goto LABEL_437;
                    }
                  }
                }
                uint64_t v201 = *(void *)(v3 + 264);
              }
LABEL_480:
              v491 = (llvm::MachineInstr *)v493;
              uint64_t v492 = 0x800000000;
              v494 = (char *)&v496;
              uint64_t v495 = 0x800000000;
              if ((v466 & 0x80000000) != 0) {
                v223 = (unsigned int **)(*(void *)(v201 + 24) + 16 * (v466 & 0x7FFFFFFF) + 8);
              }
              else {
                v223 = (unsigned int **)(*(void *)(v201 + 272) + 8 * v466);
              }
              v224 = *v223;
              if (*v223)
              {
                while (1)
                {
                  unsigned int v225 = *v224;
                  if ((*v224 & 0x81000000) == 0) {
                    break;
                  }
                  v224 = (unsigned int *)*((void *)v224 + 3);
                  if (!v224) {
                    goto LABEL_569;
                  }
                }
                uint64_t v226 = 1;
LABEL_487:
                uint64_t v227 = *((void *)v224 + 1);
                if (v227 == v24)
                {
LABEL_547:
                  uint64_t v228 = v226;
                  goto LABEL_548;
                }
                uint64_t v228 = 0;
                int v229 = **(unsigned __int16 **)(v227 + 16);
                if (!**(_WORD **)(v227 + 16) || v229 == 69) {
                  goto LABEL_548;
                }
                if (v451)
                {
                  int v230 = (v225 >> 8) & 0xFFF;
                  if (v229 == 11 || v230 != v477) {
                    goto LABEL_547;
                  }
                }
                else if (v229 == 11)
                {
                  goto LABEL_547;
                }
                uint64_t v232 = *(void *)(v227 + 24);
                if (v232 == v443)
                {
                  v237 = v461;
                  if (v462 == v461)
                  {
                    int v238 = HIDWORD(v463);
                    v239 = &v462[8 * HIDWORD(v463)];
                    if (HIDWORD(v463))
                    {
                      uint64_t v240 = 0;
                      while (*(void *)&v462[v240] != v227)
                      {
                        v240 += 8;
                        if (8 * HIDWORD(v463) == v240) {
                          goto LABEL_543;
                        }
                      }
                      v239 = &v462[v240];
                    }
LABEL_543:
                    v237 = v462;
                  }
                  else
                  {
                    int v248 = v463 - 1;
                    unsigned int v249 = (v463 - 1) & ((v227 >> 4) ^ (v227 >> 9));
                    v239 = &v462[8 * v249];
                    uint64_t v250 = *(void *)v239;
                    if (*(void *)v239 == -1)
                    {
                      v251 = 0;
LABEL_560:
                      if (v251) {
                        v239 = v251;
                      }
                      int v238 = HIDWORD(v463);
                      if (*(void *)v239 != v227) {
                        v239 = &v462[8 * v463];
                      }
                    }
                    else
                    {
                      v251 = 0;
                      int v252 = 1;
                      while (v250 != v227)
                      {
                        if (v251) {
                          BOOL v253 = 0;
                        }
                        else {
                          BOOL v253 = v250 == -2;
                        }
                        if (v253) {
                          v251 = v239;
                        }
                        unsigned int v254 = v249 + v252++;
                        unsigned int v249 = v254 & v248;
                        v239 = &v462[8 * (v254 & v248)];
                        uint64_t v250 = *(void *)v239;
                        if (*(void *)v239 == -1) {
                          goto LABEL_560;
                        }
                      }
                      int v238 = HIDWORD(v463);
                    }
                  }
                  int v256 = v463;
                  if (v462 == v237) {
                    int v256 = v238;
                  }
                  if (v239 != &v462[8 * v256]) {
                    goto LABEL_547;
                  }
                }
                else
                {
                  v233 = v472;
                  if (v473 == v472)
                  {
                    int v234 = HIDWORD(v474);
                    v235 = &v473[8 * HIDWORD(v474)];
                    if (HIDWORD(v474))
                    {
                      uint64_t v236 = 0;
                      while (*(void *)&v473[v236] != v232)
                      {
                        v236 += 8;
                        if (8 * HIDWORD(v474) == v236) {
                          goto LABEL_534;
                        }
                      }
                      v235 = &v473[v236];
                    }
LABEL_534:
                    v233 = v473;
                  }
                  else
                  {
                    int v241 = v474 - 1;
                    unsigned int v242 = (v474 - 1) & ((v232 >> 4) ^ (v232 >> 9));
                    v235 = &v473[8 * v242];
                    uint64_t v243 = *(void *)v235;
                    if (*(void *)v235 == -1)
                    {
                      v244 = 0;
LABEL_554:
                      if (v244) {
                        v235 = v244;
                      }
                      int v234 = HIDWORD(v474);
                      if (*(void *)v235 != v232) {
                        v235 = &v473[8 * v474];
                      }
                    }
                    else
                    {
                      v244 = 0;
                      int v245 = 1;
                      while (v243 != v232)
                      {
                        if (v244) {
                          BOOL v246 = 0;
                        }
                        else {
                          BOOL v246 = v243 == -2;
                        }
                        if (v246) {
                          v244 = v235;
                        }
                        unsigned int v247 = v242 + v245++;
                        unsigned int v242 = v247 & v241;
                        v235 = &v473[8 * (v247 & v241)];
                        uint64_t v243 = *(void *)v235;
                        if (*(void *)v235 == -1) {
                          goto LABEL_554;
                        }
                      }
                      int v234 = HIDWORD(v474);
                    }
                  }
                  if (v473 == v233) {
                    int v255 = v234;
                  }
                  else {
                    int v255 = v474;
                  }
                  if (v235 == &v473[8 * v255])
                  {
                    if (byte_1EBCD1648)
                    {
                      llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(v3 + 272));
                      llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
                    }
                    goto LABEL_569;
                  }
                }
                if (v492 >= (unint64_t)HIDWORD(v492)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v491 + v492) = v224;
                LODWORD(v492) = v492 + 1;
                uint64_t v228 = v226;
LABEL_548:
                while (1)
                {
                  v224 = (unsigned int *)*((void *)v224 + 3);
                  if (!v224) {
                    break;
                  }
                  unsigned int v225 = *v224;
                  if ((*v224 & 0x81000000) == 0)
                  {
                    uint64_t v226 = v228;
                    goto LABEL_487;
                  }
                }
                if ((v228 & 1) != 0 && v495) {
                  sub_1CD47792C((unsigned int *)&v491, v494, &v494[8 * v495]);
                }
              }
LABEL_569:
              uint64_t v257 = v492;
              if (!v492)
              {
                int v281 = 0;
                uint64_t v25 = v449;
                goto LABEL_684;
              }
              v467 = v471;
              v468 = v471;
              uint64_t v469 = 4;
              int v470 = 0;
              uint64_t v258 = *(void *)(v3 + 264);
              if (v477 < 0) {
                v259 = (uint64_t *)(*(void *)(v258 + 24) + 16 * (HIDWORD(v477) & 0x7FFFFFFF) + 8);
              }
              else {
                v259 = (uint64_t *)(*(void *)(v258 + 272) + 8 * HIDWORD(v477));
              }
              uint64_t v260 = *v259;
              if (!*v259) {
                goto LABEL_625;
              }
              while ((*(_DWORD *)v260 & 0x81000000) != 0)
              {
                uint64_t v260 = *(void *)(v260 + 24);
                if (!v260)
                {
                  v261 = v471;
                  v262 = v471;
                  goto LABEL_624;
                }
              }
              unsigned int v263 = 0;
              uint64_t v264 = *(void *)(v260 + 8);
              unsigned int v265 = 4;
              v261 = v471;
              v262 = v471;
LABEL_577:
              int v266 = **(unsigned __int16 **)(v264 + 16);
              if (v266 != 69 && v266 != 0)
              {
LABEL_613:
                while (1)
                {
                  uint64_t v260 = *(void *)(v260 + 24);
                  if (!v260) {
                    break;
                  }
                  if ((*(_DWORD *)v260 & 0x81000000) == 0 && *(void *)(v260 + 8) != v264)
                  {
                    uint64_t v264 = *(void *)(v260 + 8);
                    goto LABEL_577;
                  }
                }
                uint64_t v258 = *(void *)(v3 + 264);
                uint64_t v257 = v492;
LABEL_624:
                if (v257)
                {
LABEL_625:
                  uint64_t v280 = 0;
                  int v281 = 0;
                  unint64_t v446 = *(void *)(*(void *)(v258 + 24) + 16 * (v466 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    uint64_t v282 = *((void *)v491 + v280);
                    uint64_t v283 = *(void *)(v282 + 8);
                    uint64_t v284 = *(void *)(v283 + 24);
                    v285 = v467;
                    if (v468 == v467)
                    {
                      int v286 = HIDWORD(v469);
                      v287 = &v468[8 * HIDWORD(v469)];
                      if (HIDWORD(v469))
                      {
                        uint64_t v288 = 0;
                        while (*(void *)&v468[v288] != v284)
                        {
                          v288 += 8;
                          if (8 * HIDWORD(v469) == v288) {
                            goto LABEL_645;
                          }
                        }
                        v287 = &v468[v288];
                      }
LABEL_645:
                      v285 = v468;
                    }
                    else
                    {
                      int v289 = v469 - 1;
                      unsigned int v290 = (v469 - 1) & ((v284 >> 4) ^ (v284 >> 9));
                      v287 = &v468[8 * v290];
                      uint64_t v291 = *v287;
                      if (*v287 == -1)
                      {
                        v292 = 0;
LABEL_673:
                        if (v292) {
                          v287 = v292;
                        }
                        int v286 = HIDWORD(v469);
                        if (*v287 != v284) {
                          v287 = &v468[8 * v469];
                        }
                      }
                      else
                      {
                        v292 = 0;
                        int v293 = 1;
                        while (v291 != v284)
                        {
                          if (v292) {
                            BOOL v294 = 0;
                          }
                          else {
                            BOOL v294 = v291 == -2;
                          }
                          if (v294) {
                            v292 = v287;
                          }
                          unsigned int v295 = v290 + v293++;
                          unsigned int v290 = v295 & v289;
                          v287 = &v468[8 * (v295 & v289)];
                          uint64_t v291 = *v287;
                          if (*v287 == -1) {
                            goto LABEL_673;
                          }
                        }
                        int v286 = HIDWORD(v469);
                      }
                    }
                    if (v468 == v285) {
                      int v296 = v286;
                    }
                    else {
                      int v296 = v469;
                    }
                    if (v287 == (void *)&v468[8 * v296])
                    {
                      v297 = *(void **)(v447 + 264);
                      if ((v281 & 1) == 0)
                      {
                        int v298 = HIDWORD(v477);
                        if (v477 < 0) {
                          v299 = (unsigned int **)(v297[3] + 16 * (HIDWORD(v477) & 0x7FFFFFFF) + 8);
                        }
                        else {
                          v299 = (unsigned int **)(v297[34] + 8 * HIDWORD(v477));
                        }
                        v300 = *v299;
                        if (v300)
                        {
                          while (1)
                          {
                            unsigned int v301 = *v300;
                            if ((*v300 & 0x1000000) == 0) {
                              break;
                            }
                            v300 = (unsigned int *)*((void *)v300 + 3);
                            if (!v300) {
                              goto LABEL_656;
                            }
                          }
LABEL_657:
                          unsigned int *v300 = v301 & 0xFBFFFFFF;
                          while (1)
                          {
                            v300 = (unsigned int *)*((void *)v300 + 3);
                            if (!v300) {
                              break;
                            }
                            unsigned int v301 = *v300;
                            if ((*v300 & 0x1000000) == 0) {
                              goto LABEL_657;
                            }
                          }
                          uint64_t v302 = v447;
                          v297 = *(void **)(v447 + 264);
                          int v298 = HIDWORD(v477);
                        }
                        else
                        {
LABEL_656:
                          uint64_t v302 = v447;
                        }
                        sub_1CC38D61C(v297, v298, *(void *)(v297[3] + 16 * (v298 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v444, 0);
                        v297 = *(void **)(v302 + 264);
                      }
                      if (v451) {
                        unint64_t v446 = *(void *)(v297[3] + 16 * (*(_DWORD *)(*(void *)(v283 + 32) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                      }
                      uint64_t v303 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v297, "", 0);
                      *(void *)(v297[3] + 16 * (v303 & 0x7FFFFFFF)) = v446 & 0xFFFFFFFFFFFFFFFBLL;
                      uint64_t v304 = v297[1];
                      if (v304) {
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v304 + 24))(v304, v303);
                      }
                      v305 = sub_1CB84B030(v284, v283, (unsigned __int8 **)(v283 + 56), *(void *)(*(void *)(v447 + 248) + 8) + 912, v303);
                      memset(&v478[1], 0, 24);
                      HIDWORD(v478[0]) = HIDWORD(v477);
                      LODWORD(v478[0]) = (v477 & 0xFFF) << 8;
                      llvm::MachineInstr::addOperand(v306, v305, (const llvm::MachineOperand *)v478);
                      if (v451) {
                        *(_DWORD *)v282 &= 0xFFF000FF;
                      }
                      llvm::MachineOperand::setReg(v282, v303);
                      int v281 = 1;
                    }
                    ++v280;
                  }
                  while (v280 != v257);
                  v262 = v467;
                  v261 = v468;
                  uint64_t v3 = v447;
                }
                else
                {
                  int v281 = 0;
                }
                uint64_t v25 = v449;
                if (v261 != v262) {
                  free(v261);
                }
LABEL_684:
                if (v494 != (char *)&v496) {
                  free(v494);
                }
                if (v491 != (llvm::MachineInstr *)v493) {
                  free(v491);
                }
                if (v473 != v472) {
                  free(v473);
                }
                v442 |= v281;
                if (v24) {
                  goto LABEL_691;
                }
                goto LABEL_692;
              }
              uint64_t v268 = *(void *)(v264 + 24);
              if (v261 == v262)
              {
                if (v263)
                {
                  v269 = 0;
                  uint64_t v270 = 8 * v263;
                  v271 = v262;
                  do
                  {
                    if (*v271 == v268) {
                      goto LABEL_612;
                    }
                    if (*v271 == -2) {
                      v269 = v271;
                    }
                    ++v271;
                    v270 -= 8;
                  }
                  while (v270);
                  if (v269)
                  {
                    void *v269 = v268;
                    --v470;
                    goto LABEL_612;
                  }
                }
                if (v265 > v263)
                {
                  HIDWORD(v469) = v263 + 1;
                  *(void *)&v262[8 * v263] = v268;
                  goto LABEL_612;
                }
              }
              if (3 * v265 <= 4 * (v263 - v470))
              {
                if (v265 >= 0x40) {
                  v265 *= 2;
                }
                else {
                  unsigned int v265 = 128;
                }
              }
              else if (v265 - v263 >= v265 >> 3)
              {
                goto LABEL_594;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v467, v265);
              unsigned int v265 = v469;
              v261 = v468;
LABEL_594:
              unsigned int v272 = v265 - 1;
              unsigned int v273 = (v265 - 1) & ((v268 >> 4) ^ (v268 >> 9));
              v274 = &v261[8 * v273];
              uint64_t v275 = *v274;
              if (*v274 == -1)
              {
                v276 = 0;
LABEL_606:
                if (v276) {
                  v274 = v276;
                }
                if (*v274 != v268)
                {
                  if (*v274 == -2) {
                    --v470;
                  }
                  else {
                    ++HIDWORD(v469);
                  }
                  void *v274 = v268;
                }
              }
              else
              {
                v276 = 0;
                int v277 = 1;
                while (v275 != v268)
                {
                  if (v276) {
                    BOOL v278 = 0;
                  }
                  else {
                    BOOL v278 = v275 == -2;
                  }
                  if (v278) {
                    v276 = v274;
                  }
                  unsigned int v279 = v273 + v277++;
                  unsigned int v273 = v279 & v272;
                  v274 = &v261[8 * (v279 & v272)];
                  uint64_t v275 = *v274;
                  if (*v274 == -1) {
                    goto LABEL_606;
                  }
                }
              }
LABEL_612:
              v262 = v467;
              v261 = v468;
              unsigned int v263 = HIDWORD(v469);
              unsigned int v265 = v469;
              uint64_t v264 = *(void *)(v260 + 8);
              goto LABEL_613;
            }
            while ((*(_DWORD *)v191 & 0x81000000) != 0)
            {
              uint64_t v191 = *(void *)(v191 + 24);
              if (!v191) {
                goto LABEL_429;
              }
            }
            while (1)
            {
              uint64_t v191 = *(void *)(v191 + 24);
              if (!v191) {
                break;
              }
              if ((*(_DWORD *)v191 & 0x81000000) == 0) {
                goto LABEL_429;
              }
            }
LABEL_691:
            uint64_t v307 = v24;
            if ((*(unsigned char *)v24 & 4) == 0)
            {
LABEL_692:
              if ((*(_WORD *)(v24 + 44) & 8) != 0)
              {
                uint64_t v307 = v24;
                do
                  uint64_t v307 = *(void *)(v307 + 8);
                while ((*(_WORD *)(v307 + 44) & 8) != 0);
              }
              else
              {
                uint64_t v307 = v24;
              }
            }
            uint64_t v27 = *(void *)(v307 + 8);
            if ((v441 & 1) == 0)
            {
              char v441 = 0;
              goto LABEL_722;
            }
            uint64_t v308 = *(void *)(v24 + 16);
            uint64_t v309 = *(unsigned __int16 *)(v308 + 2);
            if (!*(_WORD *)(v308 + 2))
            {
              int v319 = 0;
              goto LABEL_721;
            }
            uint64_t v310 = v27;
            uint64_t v311 = 0;
            while (2)
            {
              uint64_t v312 = *(void *)(v24 + 32);
              if ((*(_DWORD *)(v312 + 32 * v311) & 0x10000FF) != 0) {
                goto LABEL_701;
              }
              unsigned int v313 = *(_DWORD *)(v312 + 32 * v311 + 4);
              LODWORD(v491) = v313;
              if ((v313 & 0x80000000) == 0) {
                goto LABEL_701;
              }
              if (v490)
              {
                for (j = v489; j; j = (void *)*j)
                {
                  unsigned int v315 = *((_DWORD *)j + 7);
                  if (v313 >= v315)
                  {
                    if (v315 >= v313) {
                      goto LABEL_716;
                    }
                    ++j;
                  }
                }
                goto LABEL_701;
              }
              if (!v486) {
                goto LABEL_701;
              }
              v316 = v485;
              uint64_t v317 = 4 * v486;
              while (*v316 != v313)
              {
                ++v316;
                v317 -= 4;
                if (!v317) {
                  goto LABEL_701;
                }
              }
              if (!v317)
              {
LABEL_701:
                if (++v311 == v309)
                {
                  int v319 = 0;
                  goto LABEL_719;
                }
                continue;
              }
              break;
            }
LABEL_716:
            v318 = sub_1CC3DEC94(v459, &v491);
            if (((*(uint64_t (**)(void, uint64_t, void, void, void))(**(void **)(v3 + 248) + 928))(*(void *)(v3 + 248), v24, *((void *)v318 + 1), v491, *(void *)(v3 + 264)) & 1) == 0)goto LABEL_701; {
            int v319 = 1;
            }
LABEL_719:
            uint64_t v27 = v310;
LABEL_721:
            char v441 = 1;
            v442 |= v319;
            uint64_t v25 = v449;
LABEL_722:
            v320 = *(unsigned __int16 **)(v24 + 16);
            uint64_t v321 = *((void *)v320 + 1);
            if ((v321 & 0x40000) != 0)
            {
              if (*v320 - 1 <= 1 && (*(unsigned char *)(*(void *)(v24 + 32) + 48) & 8) != 0)
              {
LABEL_727:
                if (*((unsigned char *)v320 + 4) == 1)
                {
                  v323 = *(_DWORD **)(v24 + 32);
                  unsigned int v324 = v323[1];
                  LODWORD(v491) = v324;
                  if ((v324 & 0x80000000) != 0
                    && (*v323 & 0xFFF00) == 0
                    && llvm::MachineRegisterInfo::hasOneNonDBGUser(*(void *)(v3 + 264), v324))
                  {
                    sub_1CD533D58((uint64_t)&v479, (unsigned int *)&v491);
                    goto LABEL_735;
                  }
                }
              }
              else
              {
                __int16 v322 = *(_WORD *)(v24 + 44);
                if ((v322 & 0xC) != 0 && (v322 & 4) == 0)
                {
                  uint64_t v420 = v24;
                  if ((v321 & 0x80000) != 0) {
                    goto LABEL_727;
                  }
                  while ((*(_WORD *)(v420 + 44) & 8) != 0)
                  {
                    uint64_t v420 = *(void *)(v420 + 8);
                    if ((*(unsigned char *)(*(void *)(v420 + 16) + 10) & 8) != 0) {
                      goto LABEL_727;
                    }
                  }
                }
                else if ((v321 & 0x80000) != 0)
                {
                  goto LABEL_727;
                }
              }
            }
            if (v480) {
              BOOL v325 = 0;
            }
            else {
              BOOL v325 = v484 == 0;
            }
            if (!v325)
            {
              unsigned int v326 = *(unsigned __int8 *)(*(void *)(v24 + 16) + 4);
              if (*(_DWORD *)(v24 + 40) != v326)
              {
                uint64_t v452 = v27;
                while (1)
                {
                  uint64_t v331 = *(void *)(v24 + 32);
                  uint64_t v332 = v326;
                  if (!*(unsigned char *)(v331 + 32 * v326)) {
                    break;
                  }
LABEL_747:
                  unsigned int v326 = v332 + 1;
                  if (v332 + 1 == *(_DWORD *)(v24 + 40)) {
                    goto LABEL_735;
                  }
                }
                unsigned int v333 = *(_DWORD *)(v331 + 32 * v326 + 4);
                LODWORD(v494) = *(_DWORD *)(v331 + 32 * v332 + 4);
                if (v484)
                {
                  for (k = v483; k; k = (void *)*k)
                  {
                    unsigned int v335 = *((_DWORD *)k + 7);
                    if (v333 >= v335)
                    {
                      if (v335 >= v333) {
                        goto LABEL_762;
                      }
                      ++k;
                    }
                  }
                  goto LABEL_747;
                }
                if (!v480) {
                  goto LABEL_747;
                }
                v336 = v479;
                uint64_t v337 = 4 * v480;
                while (*v336 != v333)
                {
                  ++v336;
                  v337 -= 4;
                  if (!v337) {
                    goto LABEL_747;
                  }
                }
                if (!v337) {
                  goto LABEL_747;
                }
LABEL_762:
                LODWORD(v472) = v333;
                v491 = 0;
                uint64_t v338 = (*(uint64_t (**)(void, uint64_t, void, char **, llvm::MachineInstr **))(**(void **)(v3 + 248) + 920))(*(void *)(v3 + 248), v24, *(void *)(v3 + 264), &v494, &v491);
                if (!v338) {
                  goto LABEL_862;
                }
                v339 = (const llvm::MachineInstr *)v338;
                v341 = v461;
                v340 = v462;
                if (v462 == v461)
                {
                  unsigned int v342 = HIDWORD(v463);
                  v343 = &v462[8 * HIDWORD(v463)];
                  if (HIDWORD(v463))
                  {
                    uint64_t v344 = 0;
                    while (*(void *)&v462[v344] != v24)
                    {
                      v344 += 8;
                      if (8 * HIDWORD(v463) == v344) {
                        goto LABEL_782;
                      }
                    }
                    v343 = &v462[v344];
                  }
LABEL_782:
                  v352 = v462;
                }
                else
                {
                  int v345 = v463 - 1;
                  unsigned int v346 = (v463 - 1) & ((v24 >> 4) ^ (v24 >> 9));
                  v343 = &v462[8 * v346];
                  uint64_t v347 = *(void *)v343;
                  if (*(void *)v343 == -1)
                  {
                    v348 = 0;
LABEL_784:
                    if (v348) {
                      v343 = v348;
                    }
                    unsigned int v342 = HIDWORD(v463);
                    if (*(void *)v343 != v24) {
                      v343 = &v462[8 * v463];
                    }
                  }
                  else
                  {
                    v348 = 0;
                    int v349 = 1;
                    while (v347 != v24)
                    {
                      if (v348) {
                        BOOL v350 = 0;
                      }
                      else {
                        BOOL v350 = v347 == -2;
                      }
                      if (v350) {
                        v348 = v343;
                      }
                      unsigned int v351 = v346 + v349++;
                      unsigned int v346 = v351 & v345;
                      v343 = &v462[8 * (v351 & v345)];
                      uint64_t v347 = *(void *)v343;
                      if (*(void *)v343 == -1) {
                        goto LABEL_784;
                      }
                    }
                    unsigned int v342 = HIDWORD(v463);
                  }
                  v352 = v461;
                }
                int v353 = v463;
                if (v462 == v352) {
                  int v354 = v342;
                }
                else {
                  int v354 = v463;
                }
                if (v343 != &v462[8 * v354])
                {
                  *(void *)v343 = -2;
                  ++v464;
                  v341 = v461;
                  v340 = v462;
                  v352 = v461;
                }
                if (v340 != v352)
                {
                  int v358 = v353 - 1;
                  unsigned int v359 = ((v491 >> 4) ^ (v491 >> 9)) & (v353 - 1);
                  v355 = (llvm::MachineInstr **)&v340[8 * v359];
                  v360 = *v355;
                  if (*v355 == (llvm::MachineInstr *)-1)
                  {
                    v361 = 0;
LABEL_814:
                    if (v361) {
                      v355 = v361;
                    }
                    if (*v355 != v491)
                    {
                      unsigned int v365 = HIDWORD(v463);
                      unsigned int v366 = v463;
                      if (v340 == v341) {
                        int v367 = HIDWORD(v463);
                      }
                      else {
                        int v367 = v463;
                      }
                      v355 = (llvm::MachineInstr **)&v340[8 * v367];
                      v352 = v340;
                      goto LABEL_823;
                    }
                  }
                  else
                  {
                    v361 = 0;
                    int v362 = 1;
                    while (v360 != v491)
                    {
                      if (v361) {
                        BOOL v363 = 0;
                      }
                      else {
                        BOOL v363 = v360 == (llvm::MachineInstr *)-2;
                      }
                      if (v363) {
                        v361 = v355;
                      }
                      unsigned int v364 = v359 + v362++;
                      unsigned int v359 = v364 & v358;
                      v355 = (llvm::MachineInstr **)&v340[8 * (v364 & v358)];
                      v360 = *v355;
                      if (*v355 == (llvm::MachineInstr *)-1) {
                        goto LABEL_814;
                      }
                    }
                  }
                  v352 = v340;
                  goto LABEL_822;
                }
                v355 = (llvm::MachineInstr **)&v352[8 * v342];
                if (v342)
                {
                  uint64_t v356 = 0;
                  uint64_t v357 = 8 * v342;
                  while (*(llvm::MachineInstr **)&v352[v356] != v491)
                  {
                    v356 += 8;
                    if (v357 == v356) {
                      goto LABEL_812;
                    }
                  }
                  v355 = (llvm::MachineInstr **)&v352[v356];
                }
LABEL_812:
                v341 = v352;
LABEL_822:
                unsigned int v365 = HIDWORD(v463);
                unsigned int v366 = v463;
LABEL_823:
                if (v352 == v341) {
                  unsigned int v368 = v365;
                }
                else {
                  unsigned int v368 = v366;
                }
                if (v355 != (llvm::MachineInstr **)&v352[8 * v368])
                {
                  *v355 = (llvm::MachineInstr *)-2;
                  ++v464;
                  v341 = v461;
                  v340 = v462;
                  v352 = v462;
                }
                if (v352 == v341)
                {
                  if (v365)
                  {
                    v369 = 0;
                    uint64_t v370 = 8 * v365;
                    v371 = (uint64_t *)v341;
                    while (*v371 != v338)
                    {
                      if (*v371 == -2) {
                        v369 = v371;
                      }
                      ++v371;
                      v370 -= 8;
                      if (!v370)
                      {
                        if (!v369) {
                          goto LABEL_836;
                        }
                        uint64_t *v369 = v338;
                        --v464;
                        break;
                      }
                    }
LABEL_859:
                    if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v24)) {
                      llvm::MachineFunction::moveCallSiteInfo(*(llvm::MachineFunction **)(*(void *)(v24 + 24) + 32), (const llvm::MachineInstr *)v24, v339);
                    }
                    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v24);
                    llvm::MachineInstr::eraseFromParent(v491);
                    llvm::MachineRegisterInfo::markUsesInDebugValueAsUndef(*(void *)(v3 + 264), v472);
                    sub_1CC34EC20((uint64_t)&v479, (unsigned int *)&v472);
                    int v442 = 1;
                    uint64_t v24 = (uint64_t)v339;
LABEL_862:
                    uint64_t v27 = v452;
                    goto LABEL_747;
                  }
LABEL_836:
                  if (v365 < v366)
                  {
                    HIDWORD(v463) = v365 + 1;
                    *(void *)&v341[8 * v365] = v338;
                    goto LABEL_859;
                  }
                }
                if (3 * v366 <= 4 * (HIDWORD(v463) - v464))
                {
                  if (v366 >= 0x40) {
                    v366 *= 2;
                  }
                  else {
                    unsigned int v366 = 128;
                  }
                }
                else if (v366 - HIDWORD(v463) >= v366 >> 3)
                {
                  goto LABEL_840;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v461, v366);
                unsigned int v366 = v463;
                v340 = v462;
LABEL_840:
                unsigned int v372 = v366 - 1;
                unsigned int v373 = (v366 - 1) & ((v339 >> 4) ^ (v339 >> 9));
                v374 = &v340[8 * v373];
                v375 = *(const llvm::MachineInstr **)v374;
                if (*(void *)v374 == -1)
                {
                  v376 = 0;
LABEL_852:
                  if (v376) {
                    v380 = v376;
                  }
                  else {
                    v380 = (const llvm::MachineInstr **)v374;
                  }
                  if (*v380 != v339)
                  {
                    if (*v380 == (const llvm::MachineInstr *)-2) {
                      --v464;
                    }
                    else {
                      ++HIDWORD(v463);
                    }
                    *v380 = v339;
                  }
                }
                else
                {
                  v376 = 0;
                  int v377 = 1;
                  while (v375 != v339)
                  {
                    if (v376) {
                      BOOL v378 = 0;
                    }
                    else {
                      BOOL v378 = v375 == (const llvm::MachineInstr *)-2;
                    }
                    if (v378) {
                      v376 = (const llvm::MachineInstr **)v374;
                    }
                    unsigned int v379 = v373 + v377++;
                    unsigned int v373 = v379 & v372;
                    v374 = &v340[8 * (v379 & v372)];
                    v375 = *(const llvm::MachineInstr **)v374;
                    if (*(void *)v374 == -1) {
                      goto LABEL_852;
                    }
                  }
                }
                goto LABEL_859;
              }
            }
LABEL_735:
            v327 = *(unsigned __int16 **)(v24 + 16);
            int v328 = *v327;
            if ((v328 - 1) <= 1 && (*(unsigned char *)(*(void *)(v24 + 32) + 48) & 0x10) != 0) {
              goto LABEL_982;
            }
            uint64_t v329 = *((void *)v327 + 1);
            if ((*(_WORD *)(v24 + 44) & 0xC) != 0 && (*(_WORD *)(v24 + 44) & 4) == 0)
            {
              uint64_t v415 = v24;
              if ((v329 & 0x100000) != 0) {
                goto LABEL_982;
              }
              while (1)
              {
                uint64_t v416 = v27;
                if ((*(_WORD *)(v415 + 44) & 8) == 0) {
                  break;
                }
                uint64_t v415 = *(void *)(v415 + 8);
                uint64_t v3 = v447;
                uint64_t v25 = v449;
                if ((*(unsigned char *)(*(void *)(v415 + 16) + 10) & 0x10) != 0) {
                  goto LABEL_982;
                }
              }
              uint64_t v419 = v24;
              uint64_t v3 = v447;
              uint64_t v25 = v449;
              if ((v329 & 0x80) != 0)
              {
LABEL_982:
                LODWORD(v480) = 0;
                sub_1CB833A08((uint64_t)&v482, v483);
                uint64_t v484 = 0;
                v482 = &v483;
                v483 = 0;
              }
              else
              {
                while ((*(_WORD *)(v419 + 44) & 8) != 0)
                {
                  uint64_t v419 = *(void *)(v419 + 8);
                  uint64_t v3 = v447;
                  uint64_t v25 = v449;
                  uint64_t v27 = v416;
                  if ((*(unsigned char *)(*(void *)(v419 + 16) + 8) & 0x80) != 0) {
                    goto LABEL_982;
                  }
                }
                uint64_t v3 = v447;
                uint64_t v25 = v449;
                uint64_t v27 = v416;
                if ((v329 & 0x1000000) != 0) {
                  goto LABEL_981;
                }
                uint64_t v421 = v24;
                while ((*(_WORD *)(v421 + 44) & 8) != 0)
                {
                  uint64_t v421 = *(void *)(v421 + 8);
                  if (*(unsigned char *)(*(void *)(v421 + 16) + 11)) {
                    goto LABEL_981;
                  }
                }
LABEL_742:
                if (v328 - 1) <= 1 && (*(unsigned char *)(*(void *)(v24 + 32) + 48)) {
                  goto LABEL_982;
                }
              }
            }
            else
            {
              if ((v329 & 0x100080) != 0) {
                goto LABEL_982;
              }
              if ((v329 & 0x1000000) == 0) {
                goto LABEL_742;
              }
LABEL_981:
              if (v328 != 23) {
                goto LABEL_982;
              }
            }
LABEL_69:
            uint64_t v24 = v27;
            if (v27 == v25)
            {
              uint64_t v438 = v453;
              goto LABEL_1024;
            }
          }
        }
        uint64_t v438 = 0;
LABEL_1024:
        MEMORY[0x1D25D9CD0](v438, 8);
        MEMORY[0x1D25D9CD0](v456, 8);
        sub_1CB833A08((uint64_t)&v482, v483);
        if (v479 != v481) {
          free(v479);
        }
        MEMORY[0x1D25D9CD0](v459[0], 8);
        sub_1CB833A08((uint64_t)&v488, v489);
        if (v485 != v487) {
          free(v485);
        }
        if (v462 != v461) {
          free(v462);
        }
        uint64_t v13 = *(void *)(v443 + 8);
        if (v13 == v440) {
          return v442 & 1;
        }
      }
    }
    LOBYTE(v442) = 0;
  }
  return v442 & 1;
}

double sub_1CC3DEC6C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

int *sub_1CC3DEC94(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    double result = (int *)(v2 + 16 * v4);
    int v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    int v7 = 1;
    while (v6 != -1)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      int v6 = *(_DWORD *)(v2 + 16 * v4);
      if (*a2 == v6) {
        return (int *)(v2 + 16 * v4);
      }
    }
  }
  return (int *)(v2 + 16 * v3);
}

uint64_t sub_1CC3DED08(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 40))
  {
    for (uint64_t i = *(uint64_t **)(a3 + 32); i; uint64_t i = (uint64_t *)*i)
    {
      unsigned int v8 = *((_DWORD *)i + 7);
      if (v8 <= a2)
      {
        if (v8 >= a2) {
          return 1;
        }
        ++i;
      }
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a3 + 8);
    if (v9)
    {
      uint64_t v10 = *(_DWORD **)a3;
      uint64_t v11 = 4 * v9;
      while (*v10 != a2)
      {
        ++v10;
        v11 -= 4;
        if (!v11) {
          goto LABEL_15;
        }
      }
      if (v11) {
        return 1;
      }
    }
  }
LABEL_15:
  uint64_t v13 = *(void *)(a1 + 264);
  if ((a2 & 0x80000000) != 0) {
    uint64_t v14 = (uint64_t *)(*(void *)(v13 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v14 = (uint64_t *)(*(void *)(v13 + 272) + 8 * a2);
  }
  uint64_t v15 = *v14;
  if (!*v14) {
    return 0;
  }
  if ((*(unsigned char *)(v15 + 3) & 0x81) == 0) {
    goto LABEL_21;
  }
  do
  {
    uint64_t v15 = *(void *)(v15 + 24);
    if (!v15) {
      return 0;
    }
  }
  while ((*(_DWORD *)v15 & 0x81000000) != 0);
LABEL_21:
  while (1)
  {
    uint64_t v15 = *(void *)(v15 + 24);
    if (!v15) {
      break;
    }
    uint64_t result = 0;
    if ((*(_DWORD *)v15 & 0x81000000) == 0) {
      return result;
    }
  }
  if (*(_DWORD *)(a4 + 8) >= dword_1EBCD1A08) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    uint64_t v16 = (uint64_t *)(*(void *)(v13 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v16 = (uint64_t *)(*(void *)(v13 + 272) + 8 * a2);
  }
  for (uint64_t j = *v16; (*(_DWORD *)j & 0x81000000) != 0; uint64_t j = *(void *)(j + 24))
    ;
  uint64_t v18 = *(llvm::MachineInstr **)(j + 8);
  unsigned int RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)v18, a2, 0, 0);
  uint64_t result = 0;
  unsigned int v32 = RegisterUseOperandIdx;
  if (*(unsigned char *)(*((void *)v18 + 2) + 4) == 1)
  {
    uint64_t result = 0;
    int v20 = (int *)*((void *)v18 + 4);
    int v21 = *v20;
    if (!*v20 && v20[1] < 0)
    {
      int v22 = v21 & 0x10000FF;
      int v23 = v21 & 0xF00000;
      if (v22 == 0x1000000 && v23 != 0)
      {
        uint64_t TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(v18, 0);
        if (RegisterUseOperandIdx == TiedOperandIdx)
        {
          uint64_t v29 = v18;
          LOBYTE(v30) = 0;
          char v31 = 0;
LABEL_49:
          sub_1CC3DEF90((char **)a4, (char *)&v29);
          return sub_1CC3DED08(a1, v20[1], a3, a4);
        }
        uint64_t v26 = TiedOperandIdx;
        int v28 = -1;
        if ((*(unsigned int (**)(void, llvm::MachineInstr *, unsigned int *, int *))(**(void **)(a1 + 248)
                                                                                                 + 200))(*(void *)(a1 + 248), v18, &v32, &v28))
        {
          BOOL v27 = v28 == v26;
        }
        else
        {
          BOOL v27 = 0;
        }
        if (v27)
        {
          uint64_t v29 = v18;
          unint64_t v30 = v32 | (unint64_t)(v26 << 32);
          char v31 = 1;
          goto LABEL_49;
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_1CC3DEF90(char **a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v5 = *((unsigned int *)a1 + 3);
  int v6 = *a1;
  if (v4 >= v5)
  {
    unint64_t v10 = v4 + 1;
    BOOL v12 = v6 <= a2 && &v6[24 * v4] > a2;
    if (v12) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v6) >> 3);
    }
    else {
      unint64_t v13 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v10);
    }
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v14 = (2 * v5) | 1;
    if (v14 <= v10) {
      unint64_t v14 = v10;
    }
    if (v14 >= 0xFFFFFFFF) {
      uint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v14;
    }
    uint64_t v16 = (char *)malloc_type_malloc(24 * v15, 0x4065EBACuLL);
    if (!v16) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    int v6 = v16;
    unsigned int v17 = *a1;
    int v18 = *((_DWORD *)a1 + 2);
    if (!v18) {
      goto LABEL_33;
    }
    uint64_t v19 = &v17[24 * v18];
    int v20 = v6 + 16;
    int v21 = v17 + 8;
    do
    {
      int v22 = v21 - 8;
      *((void *)v20 - 2) = *((void *)v21 - 1);
      *(v20 - 8) = 0;
      *int v20 = 0;
      if (v21[8])
      {
        *((void *)v20 - 1) = *(void *)v21;
        *int v20 = 1;
      }
      v20 += 24;
      v21 += 24;
    }
    while (v22 + 24 != v19);
    unsigned int v17 = *a1;
    uint64_t v4 = *((unsigned int *)a1 + 2);
    if (v4)
    {
      uint64_t v23 = 24 * v4;
      do
      {
        if (v17[v23 - 8]) {
          v17[v23 - 8] = 0;
        }
        v23 -= 24;
      }
      while (v23);
    }
    else
    {
LABEL_33:
      LODWORD(v4) = 0;
    }
    if (v17 != (char *)(a1 + 2))
    {
      free(v17);
      LODWORD(v4) = *((_DWORD *)a1 + 2);
    }
    *a1 = v6;
    *((_DWORD *)a1 + 3) = v15;
    if (v12) {
      uint64_t v2 = &v6[24 * v13];
    }
  }
  *(void *)&v6[24 * v4] = *(void *)v2;
  int v7 = &v6[24 * v4];
  v7[8] = 0;
  unsigned int v8 = v7 + 8;
  v7[16] = 0;
  uint64_t v9 = v7 + 16;
  if (v2[16])
  {
    *unsigned int v8 = *((void *)v2 + 1);
    *uint64_t v9 = 1;
  }
  ++*((_DWORD *)a1 + 2);
}

uint64_t sub_1CC3DF174(uint64_t a1, void *a2, unint64_t *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 32);
  while ((~*(_DWORD *)(v5 + 32 * v3) & 0x5000000) == 0)
  {
    *(_DWORD *)(a1 + 16) = ++v3;
    if (v4 == v3) {
      return 0;
    }
  }
  *a2 = 0;
  *a3 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 32) + 32 * *(unsigned int *)(a1 + 16) + 4) | ((unint64_t)((*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 32) + 32 * *(unsigned int *)(a1 + 16)) >> 8) & 0xFFF) << 32);
  ++*(_DWORD *)(a1 + 16);
  return 1;
}

BOOL sub_1CC3DF1EC(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) < 0x3FFFFFFF) {
    return 0;
  }
  uint64_t v5 = a1;
  int v87 = 0;
  unint64_t v85 = *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v86 = HIDWORD(a2);
  uint64_t v101 = v103;
  int v84 = a2;
  v103[0] = a2;
  uint64_t v102 = 0x400000001;
  unsigned int v6 = 1;
  do
  {
    unint64_t v7 = *((void *)v101 + v6 - 1);
    LODWORD(v102) = v6 - 1;
    if ((v7 - 1) < 0x3FFFFFFF)
    {
LABEL_227:
      BOOL v3 = 0;
      goto LABEL_228;
    }
    uint64_t v8 = *(void *)(v5 + 264);
    if ((v7 & 0x80000000) != 0) {
      uint64_t v9 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v7);
    }
    uint64_t v10 = *v9;
    unint64_t v89 = *(void **)(v5 + 264);
    if (!v10) {
      goto LABEL_224;
    }
    if (*(unsigned char *)(v10 + 3)) {
      goto LABEL_9;
    }
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10)
    {
      uint64_t v11 = 0;
      uint64_t v8 = *(void *)(v5 + 264);
      goto LABEL_10;
    }
    uint64_t v8 = *(void *)(v5 + 264);
    if (*(unsigned char *)(v10 + 3)) {
LABEL_9:
    }
      uint64_t v11 = *(void *)(v10 + 8);
    else {
LABEL_224:
    }
      uint64_t v11 = 0;
LABEL_10:
    BOOL v12 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v7);
    if ((v7 & 0x80000000) != 0) {
      BOOL v12 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    }
    uint64_t v13 = *v12;
    if ((*(unsigned char *)(v13 + 3) & 1) == 0)
    {
      uint64_t v13 = *(void *)(v13 + 24);
      if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
        uint64_t v13 = 0;
      }
    }
    unint64_t v14 = HIDWORD(v7);
    uint64_t v88 = *(void *)(v5 + 248);
    uint64_t v15 = (unint64_t)(v13 - *(void *)(*(void *)(v13 + 8) + 32)) >> 5;
    unint64_t v90 = HIDWORD(v7);
    LODWORD(v91) = v7;
    do
    {
      if (!v11) {
        goto LABEL_196;
      }
      uint64_t v16 = *(unsigned __int16 **)(v11 + 16);
      int v17 = *v16;
      if (v17 == 19)
      {
        uint64_t v18 = *(void *)(v11 + 32);
        if (((*(_DWORD *)(v18 + 32 * v15) >> 8) & 0xFFF) != v14) {
          goto LABEL_195;
        }
        unsigned int v19 = *(_DWORD *)(v18 + 32);
        if ((v19 & 0x10000000) != 0) {
          goto LABEL_195;
        }
        unsigned int v20 = *(_DWORD *)(v18 + 36);
        unsigned int v21 = (v19 >> 8) & 0xFFF;
LABEL_21:
        __src = &v98;
LABEL_22:
        uint64_t v97 = 0x200000000;
        uint64_t v100 = 0;
        goto LABEL_23;
      }
      uint64_t v24 = *((void *)v16 + 1);
      if ((v24 & 0x8000) != 0)
      {
        unsigned int v35 = *(unsigned __int16 *)(v11 + 44);
        int v36 = (v35 >> 2) & 1;
        if ((v35 & 0xC) == 0) {
          LOBYTE(v36) = 1;
        }
        if (v36)
        {
          if ((v24 & 0x200000) == 0)
          {
            if ((v24 & 0x1000000) == 0) {
              goto LABEL_52;
            }
            goto LABEL_195;
          }
LABEL_190:
          if ((v35 & 0x4000) == 0) {
            goto LABEL_195;
          }
        }
        else
        {
          uint64_t v75 = v11;
          if ((v24 & 0x200000) != 0) {
            goto LABEL_190;
          }
          while ((*(_WORD *)(v75 + 44) & 8) != 0)
          {
            uint64_t v75 = *(void *)(v75 + 8);
            if ((*(unsigned char *)(*(void *)(v75 + 16) + 10) & 0x20) != 0) {
              goto LABEL_190;
            }
          }
        }
        if (v36)
        {
          if ((v24 & 0x1000000) == 0) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v81 = v11;
          if ((v24 & 0x1000000) == 0)
          {
            while ((*(_WORD *)(v81 + 44) & 8) != 0)
            {
              uint64_t v81 = *(void *)(v81 + 8);
              if (*(unsigned char *)(*(void *)(v81 + 16) + 11)) {
                goto LABEL_195;
              }
            }
LABEL_52:
            if (((v17 - 1) > 1 || (*(unsigned char *)(*(void *)(v11 + 32) + 48) & 1) == 0)
              && *((unsigned char *)v16 + 4) == 1)
            {
              uint64_t v37 = *(void *)(v11 + 32);
              uint64_t v38 = (_DWORD *)(v37 + 32 * v15);
              if (((*v38 >> 8) & 0xFFF) == v14)
              {
                unsigned int v39 = *(_DWORD *)(v11 + 40);
                unsigned int v40 = v15 + 1;
                if (v15 + 1 != v39)
                {
                  uint64_t v41 = v38[1];
                  unsigned int v42 = *(_DWORD *)(v11 + 40);
                  while (1)
                  {
                    if (!*(_DWORD *)(v37 + 32 * v40)
                      && (~*(_DWORD *)(v37 + 32 * v40) & 0x7000000) != 0
                      && *(_DWORD *)(v37 + 32 * v40 + 4) != 0)
                    {
                      BOOL v25 = v42 == v39;
                      unsigned int v42 = v40;
                      if (!v25) {
                        break;
                      }
                    }
                    if (v39 == ++v40)
                    {
                      if (v42 >= v39) {
                        break;
                      }
                      if ((v41 & 0x80000000) != 0) {
                        unsigned int v44 = (uint64_t *)(v89[3] + 16 * (v41 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        unsigned int v44 = (uint64_t *)(v89[34] + 8 * v41);
                      }
                      uint64_t v45 = *v44;
                      if (v45)
                      {
                        if ((*(unsigned char *)(v45 + 3) & 0x81) != 0)
                        {
                          while (1)
                          {
                            uint64_t v45 = *(void *)(v45 + 24);
                            if (!v45) {
                              break;
                            }
                            if ((*(_DWORD *)v45 & 0x81000000) == 0) {
                              goto LABEL_72;
                            }
                          }
                        }
                        else
                        {
LABEL_72:
                          uint64_t v46 = *(void *)(v45 + 8);
                          if (**(_WORD **)(v46 + 16) == 11) {
                            break;
                          }
                          while (1)
                          {
                            uint64_t v45 = *(void *)(v45 + 24);
                            if (!v45) {
                              break;
                            }
                            if ((*(_DWORD *)v45 & 0x81000000) == 0)
                            {
                              uint64_t v47 = *(void *)(v45 + 8);
                              if (v47 != v46)
                              {
                                uint64_t v46 = *(void *)(v45 + 8);
                                if (**(_WORD **)(v47 + 16) == 11) {
                                  goto LABEL_195;
                                }
                              }
                            }
                          }
                        }
                      }
                      unsigned int v65 = *(_DWORD *)(v37 + 32 * v42);
                      if ((v65 & 0x10000000) == 0)
                      {
                        unsigned int v20 = *(_DWORD *)(v37 + 32 * v42 + 4);
                        __src = &v98;
                        unsigned int v21 = (v65 >> 8) & 0xFFF;
                        goto LABEL_22;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_195:
        uint64_t v11 = 0;
        goto LABEL_196;
      }
      if (byte_1EBCD17C8) {
        goto LABEL_195;
      }
      BOOL v25 = v17 != 18 && (v24 & 0x200000000) == 0;
      if (v25)
      {
        if (v17 != 9 && (v24 & 0x800000000) == 0)
        {
          if (v17 != 8 && (v24 & 0x400000000) == 0)
          {
            if (*v16 && v17 != 69)
            {
              if (v17 != 11) {
                goto LABEL_195;
              }
              uint64_t v62 = *(void *)(v11 + 32);
              if (*(void *)(v62 + 112) != v14 || (*(_DWORD *)(v62 + 64) & 0xFFF00) != 0) {
                goto LABEL_195;
              }
              unsigned int v20 = *(_DWORD *)(v62 + 68);
LABEL_136:
              __src = &v98;
              uint64_t v97 = 0x200000000;
              uint64_t v100 = 0;
              unsigned int v21 = v14;
LABEL_23:
              sub_1CC3E0140((uint64_t)&__src, v20, v21);
              goto LABEL_24;
            }
            v104 = &v106;
            uint64_t v105 = 0x200000000;
            uint64_t v108 = 0;
            if (((**(_DWORD **)(v11 + 32) >> 8) & 0xFFF) == v14)
            {
              unsigned int v66 = *(_DWORD *)(v11 + 40);
              if (v66 < 2)
              {
                __src = &v98;
                uint64_t v97 = 0x200000000;
              }
              else
              {
                unsigned int v67 = 1;
                do
                {
                  uint64_t v68 = *(void *)(v11 + 32);
                  unsigned int v69 = *(_DWORD *)(v68 + 32 * v67);
                  if ((v69 & 0x10000000) != 0)
                  {
                    uint64_t v72 = 0;
                    uint64_t v98 = 0;
                    uint64_t v99 = 0;
                    __src = &v98;
                    uint64_t v97 = 0x200000000;
                    goto LABEL_169;
                  }
                  unsigned int v70 = v67;
                  sub_1CC3E0140((uint64_t)&v104, *(_DWORD *)(v68 + 32 * v67 + 4), (v69 >> 8) & 0xFFF);
                  unsigned int v67 = v70 + 2;
                }
                while (v70 + 2 < v66);
                int v71 = v105;
                __src = &v98;
                uint64_t v97 = 0x200000000;
                if (v105)
                {
                  if (v104 == &v106)
                  {
                    if (v105 >= 3uLL) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    memcpy(&v98, &v106, 8 * v105);
                    LODWORD(v97) = v71;
                  }
                  else
                  {
                    __src = v104;
                    uint64_t v97 = v105;
                    v104 = &v106;
                    HIDWORD(v105) = 0;
                  }
                  LODWORD(v105) = 0;
                }
              }
              uint64_t v72 = v108;
            }
            else
            {
              uint64_t v72 = 0;
              uint64_t v98 = 0;
              uint64_t v99 = 0;
              __src = &v98;
              uint64_t v97 = 0x200000000;
            }
LABEL_169:
            uint64_t v100 = v72;
            goto LABEL_210;
          }
          if (v14) {
            goto LABEL_195;
          }
          if (!v88)
          {
            uint64_t v11 = 0;
            LODWORD(v14) = 0;
LABEL_196:
            uint64_t v98 = 0;
            uint64_t v99 = 0;
            __src = &v98;
            uint64_t v97 = 0x200000000;
            int v48 = 1;
            uint64_t v100 = 0;
            goto LABEL_197;
          }
          v104 = 0;
          LODWORD(v105) = 0;
          if ((llvm::TargetInstrInfo::getExtractSubregInputs(v88, v11, v15, &v104) & 1) != 0 && !HIDWORD(v104))
          {
            unsigned int v20 = v104;
            unsigned int v21 = v105;
            goto LABEL_21;
          }
        }
        else
        {
          if ((*(_DWORD *)(*(void *)(v11 + 32) + 32 * v15) & 0xFFF00) != 0 || !v88) {
            goto LABEL_195;
          }
          uint64_t v93 = 0;
          v104 = 0;
          LODWORD(v105) = 0;
          if (llvm::TargetInstrInfo::getInsertSubregInputs(v88, v11, v15, &v93, &v104))
          {
            if (v105 == v14)
            {
              unsigned int v20 = v104;
              unsigned int v21 = HIDWORD(v104);
              goto LABEL_21;
            }
            if ((*(void *)(v89[3]
                            + 16 * (*(_DWORD *)(*(void *)(v11 + 32) + 32 * v15 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v89[3] + 16 * (v93 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
              && HIDWORD(v93) == 0)
            {
              uint64_t v74 = (*(uint64_t (**)(void))(**(void **)(*v89 + 16) + 176))(*(void *)(*v89 + 16));
              if (v74)
              {
                if ((*(void *)(*(void *)(v74 + 232) + 8 * v105) & *(void *)(*(void *)(v74 + 232)
                                                                                                 + 8
                                                                                                 * v14)) == 0)
                {
                  unsigned int v20 = v93;
                  goto LABEL_136;
                }
              }
            }
          }
        }
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        __src = &v98;
        uint64_t v97 = 0x200000000;
        uint64_t v100 = 0;
        goto LABEL_24;
      }
      if ((*(_DWORD *)(*(void *)(v11 + 32) + 32 * v15) & 0xFFF00) != 0 || !v88) {
        goto LABEL_195;
      }
      v104 = &v106;
      uint64_t v105 = 0x800000000;
      if (v17 == 18)
      {
        int v26 = *(_DWORD *)(v11 + 40);
        if (v26 != 1)
        {
          uint64_t v83 = v5;
          unsigned int v27 = 0;
          unsigned int v28 = 1;
          do
          {
            uint64_t v29 = a3;
            uint64_t v30 = *(void *)(v11 + 32);
            unsigned int v31 = v28;
            unsigned int v32 = *(_DWORD *)(v30 + 32 * v28);
            if ((v32 & 0x10000000) == 0)
            {
              uint64_t v33 = *(void *)(v30 + 32 * (v28 + 1) + 16);
              if (v27 >= HIDWORD(v105)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v34 = (char *)v104 + 12 * v27;
              *(void *)unsigned int v34 = *(unsigned int *)(v30 + 32 * v28 + 4) | ((unint64_t)((v32 >> 8) & 0xFFF) << 32);
              *((_DWORD *)v34 + 2) = v33;
              unsigned int v27 = v105 + 1;
              LODWORD(v105) = v105 + 1;
            }
            v28 += 2;
            a3 = v29;
          }
          while (v26 != v31 + 2);
          goto LABEL_204;
        }
        goto LABEL_208;
      }
      uint64_t v83 = v5;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t **))(*(void *)v88 + 608))(v88, v11, v15, &v104))
      {
        unsigned int v27 = v105;
LABEL_204:
        uint64_t v5 = v83;
        if (v27)
        {
          uint64_t v76 = v27;
          v77 = (unsigned int *)v104 + 1;
          uint64_t v78 = 12 * v76;
          while (v77[1] != v14)
          {
            v77 += 3;
            v78 -= 12;
            if (!v78) {
              goto LABEL_208;
            }
          }
          unsigned int v79 = *(v77 - 1);
          unsigned int v80 = *v77;
          __src = &v98;
          uint64_t v97 = 0x200000000;
          uint64_t v100 = 0;
          sub_1CC3E0140((uint64_t)&__src, v79, v80);
          goto LABEL_210;
        }
LABEL_208:
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        __src = &v98;
        uint64_t v97 = 0x200000000;
        uint64_t v100 = 0;
        goto LABEL_210;
      }
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      __src = &v98;
      uint64_t v97 = 0x200000000;
      uint64_t v100 = 0;
LABEL_210:
      if (v104 != &v106) {
        free(v104);
      }
LABEL_24:
      if ((int)v97 < 1)
      {
        uint64_t v11 = 0;
        int v48 = 1;
        goto LABEL_197;
      }
      if (v97 != 1)
      {
        uint64_t v100 = v11;
LABEL_88:
        uint64_t v11 = 0;
        goto LABEL_89;
      }
      uint64_t v22 = *(unsigned int *)__src;
      uint64_t v100 = v11;
      if ((v22 - 1) < 0x3FFFFFFF) {
        goto LABEL_88;
      }
      uint64_t v23 = (uint64_t *)((v22 & 0x80000000) != 0 ? v89[3] + 16 * (v22 & 0x7FFFFFFF) + 8 : v89[34] + 8 * v22);
      uint64_t v63 = *v23;
      if (!v63) {
        goto LABEL_88;
      }
      if ((*(unsigned char *)(v63 + 3) & 1) == 0)
      {
        uint64_t v63 = *(void *)(v63 + 24);
        if (!v63 || (*(unsigned char *)(v63 + 3) & 1) == 0) {
          goto LABEL_88;
        }
      }
      uint64_t v11 = *(void *)(v63 + 8);
      uint64_t v15 = (unint64_t)(v63 - *(void *)(v11 + 32)) >> 5;
      LODWORD(v14) = *((_DWORD *)__src + 1);
LABEL_89:
      sub_1CC3E0058((const void **)&v93, (uint64_t)a3, v91, v90);
      if (v94 >= 1)
      {
        if (v94 == 1) {
          int v48 = 5;
        }
        else {
          int v48 = 1;
        }
        goto LABEL_163;
      }
      v104 = (uint64_t *)(v91 | (v90 << 32));
      uint64_t v105 = (uint64_t)&v107;
      uint64_t v106 = 0x200000000;
      int v50 = v97;
      int v51 = v90;
      int v52 = v91;
      if (v97)
      {
        if (v97 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(&v107, __src, 8 * v97);
        LODWORD(v106) = v50;
        int v52 = (int)v104;
        int v51 = HIDWORD(v104);
      }
      uint64_t v109 = v100;
      uint64_t v92 = 0;
      if ((sub_1CC3E01B0((uint64_t)a3, v52, v51, &v92) & 1) == 0)
      {
        int v53 = *a3 >> 1;
        if (*a3) {
          unsigned int v54 = 4;
        }
        else {
          unsigned int v54 = a3[4];
        }
        if (4 * v53 + 4 >= 3 * v54)
        {
          v54 *= 2;
        }
        else if (v54 + ~v53 - a3[1] > v54 >> 3)
        {
          goto LABEL_102;
        }
        sub_1CC3E02B0((uint64_t)a3, v54);
        uint64_t v92 = 0;
        sub_1CC3E01B0((uint64_t)a3, (int)v104, SHIDWORD(v104), &v92);
LABEL_102:
        uint64_t v55 = v92;
        *a3 += 2;
        if (*(_DWORD *)v55 != -1 || *(_DWORD *)(v55 + 4) != -1) {
          --a3[1];
        }
        *(void *)uint64_t v55 = v104;
        *(void *)(v55 + 8) = v55 + 24;
        *(void *)(v55 + 16) = 0x200000000;
        if ((uint64_t **)v55 != &v104)
        {
          int v56 = v106;
          if (v106)
          {
            if ((uint64_t *)v105 == &v107)
            {
              if (v106 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v55 + 24), &v107, 8 * v106);
              *(_DWORD *)(v55 + 16) = v56;
            }
            else
            {
              *(void *)(v55 + 8) = v105;
              *(_DWORD *)(v55 + 16) = v56;
              *(_DWORD *)(v55 + 20) = HIDWORD(v106);
              uint64_t v105 = (uint64_t)&v107;
              HIDWORD(v106) = 0;
            }
            LODWORD(v106) = 0;
          }
        }
        *(void *)(v55 + 40) = v109;
      }
      if ((uint64_t *)v105 != &v107) {
        free((void *)v105);
      }
      int v57 = v97;
      if (v97 >= 2)
      {
        if (++v87 < dword_1EBCD1948)
        {
          int v58 = 0;
          unsigned int v59 = v102;
          do
          {
            if (v59 >= HIDWORD(v102)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v101 + v59) = *((void *)__src + v58);
            unsigned int v59 = v102 + 1;
            LODWORD(v102) = v102 + 1;
            ++v58;
          }
          while (v57 != v58);
          int v48 = 5;
          goto LABEL_163;
        }
LABEL_129:
        int v48 = 1;
        goto LABEL_163;
      }
      unint64_t v61 = HIDWORD(*(void *)__src);
      unint64_t v90 = v61;
      uint64_t v91 = *(void *)__src;
      if (*(void *)__src - 1 < 0x3FFFFFFF) {
        goto LABEL_129;
      }
      if ((*(unsigned int (**)(void, unint64_t, unint64_t, unint64_t, unint64_t))(**(void **)(v5 + 256) + 192))(*(void *)(v5 + 256), v85, v86, *(void *)(*(void *)(*(void *)(v5 + 264) + 24) + 16 * (*(void *)__src & 0x7FFFFFFFLL)) & 0xFFFFFFFFFFFFFFF8, v61))
      {
        if (v61) {
          BOOL v64 = v87 == 0;
        }
        else {
          BOOL v64 = 1;
        }
        if (v64) {
          int v48 = 5;
        }
        else {
          int v48 = 4;
        }
      }
      else
      {
        int v48 = 4;
      }
LABEL_163:
      if (v93 != &v95) {
        free(v93);
      }
LABEL_197:
      if (__src != &v98) {
        free(__src);
      }
    }
    while (v48 == 4);
    if (v48 != 5) {
      goto LABEL_227;
    }
    unsigned int v6 = v102;
  }
  while (v102);
  BOOL v3 = v91 != v84;
LABEL_228:
  if (v101 != v103) {
    free(v101);
  }
  return v3;
}

int *sub_1CC3DFF8C(int *a1)
{
  int v2 = *a1;
  if (*a1)
  {
    int v4 = a1 + 2;
    unsigned int v3 = 4;
  }
  else
  {
    unsigned int v3 = a1[4];
    if (!v3) {
      goto LABEL_18;
    }
    int v4 = (int *)*((void *)a1 + 1);
  }
  uint64_t v5 = (char *)&v4[12 * v3];
  unsigned int v6 = v4 + 6;
  do
  {
    int v7 = *(v6 - 6);
    int v8 = *(v6 - 5);
    uint64_t v9 = (char *)(v6 - 6);
    if ((v7 != -1 || v8 != -1) && (v7 != -2 || v8 != -2))
    {
      BOOL v12 = (_DWORD *)*((void *)v6 - 2);
      if (v6 != v12) {
        free(v12);
      }
    }
    v6 += 12;
  }
  while (v9 + 48 != v5);
  int v2 = *a1;
LABEL_18:
  if ((v2 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
  }
  return a1;
}

void sub_1CC3E003C()
{
}

uint64_t sub_1CC3E0050()
{
  return 0;
}

double sub_1CC3E0058(const void **a1, uint64_t a2, int a3, int a4)
{
  uint64_t v10 = 0;
  if (sub_1CC3E01B0(a2, a3, a4, &v10))
  {
    uint64_t v5 = v10;
    *a1 = a1 + 2;
    *(void *)&double result = 0x200000000;
    a1[1] = (const void *)0x200000000;
    unsigned int v7 = *(_DWORD *)(v5 + 16);
    int v8 = (const void **)(v5 + 8);
    if (v7) {
      BOOL v9 = v8 == a1;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v7 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(a1 + 2, *v8, 8 * *(unsigned int *)(v5 + 16));
      *((_DWORD *)a1 + 2) = v7;
    }
    a1[4] = *(const void **)(v5 + 40);
  }
  else
  {
    a1[2] = 0;
    *a1 = a1 + 2;
    *(void *)&double result = 0x200000000;
    a1[1] = (const void *)0x200000000;
    a1[3] = 0;
    a1[4] = 0;
  }
  return result;
}

uint64_t sub_1CC3E0140(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v3) = a2 | ((unint64_t)a3 << 32);
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC3E01B0(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 4;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      BOOL v12 = 0;
      uint64_t result = 0;
      goto LABEL_11;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v6 = ((37 * a3) | ((unint64_t)(37 * a2) << 32))
     + ~((unint64_t)(37 * a3) << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
  int v10 = v5 - 1;
  unsigned int v11 = (v5 - 1) & v9;
  BOOL v12 = (_DWORD *)(v4 + 48 * v11);
  int v13 = *v12;
  int v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v16 = 0;
    int v17 = 1;
    uint64_t result = 1;
    while (v13 != -1 || v14 != -1)
    {
      if (v16) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -2;
      }
      if (v19 && v13 == -2) {
        uint64_t v16 = v12;
      }
      unsigned int v21 = v11 + v17++;
      unsigned int v11 = v21 & v10;
      BOOL v12 = (_DWORD *)(v4 + 48 * (v21 & v10));
      int v13 = *v12;
      int v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    if (v16) {
      BOOL v12 = v16;
    }
  }
LABEL_11:
  *a4 = v12;
  return result;
}

void sub_1CC3E02B0(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(void *)(a1 + 8) = operator new(48 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC3E0558(a1, v7, v7 + 48 * v8);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = 0;
  int v10 = v21;
  do
  {
    int v11 = *(_DWORD *)(a1 + v9 + 8);
    int v12 = *(_DWORD *)(a1 + v9 + 12);
    int v13 = (void *)(a1 + v9 + 8);
    if ((v11 != -1 || v12 != -1) && (v11 != -2 || v12 != -2))
    {
      *(void *)int v10 = *v13;
      *((void *)v10 + 1) = v10 + 24;
      uint64_t v16 = a1 + v9;
      *((void *)v10 + 2) = 0x200000000;
      unsigned int v17 = *(_DWORD *)(a1 + v9 + 24);
      uint64_t v18 = *(void **)(a1 + v9 + 16);
      if (v17 && v13 != (void *)v10)
      {
        uint64_t v19 = a1 + v9;
        uint64_t v20 = a1 + v9 + 32;
        if ((void *)v20 == v18)
        {
          if (v17 >= 3) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v10 + 24, v18, 8 * *(unsigned int *)(a1 + v9 + 24));
          *((_DWORD *)v10 + 4) = v17;
          uint64_t v18 = *(void **)(v16 + 16);
        }
        else
        {
          *((void *)v10 + 1) = v18;
          *((_DWORD *)v10 + 4) = v17;
          *((_DWORD *)v10 + 5) = *(_DWORD *)(v19 + 28);
          *(void *)(v16 + 16) = v20;
          *(_DWORD *)(v19 + 28) = 0;
          uint64_t v18 = (void *)(a1 + v9 + 32);
        }
        *(_DWORD *)(v16 + 24) = 0;
      }
      *((void *)v10 + 5) = *(void *)(v16 + 48);
      v10 += 48;
      if ((void *)(v16 + 32) != v18) {
        free(v18);
      }
    }
    v9 += 48;
  }
  while (v9 != 192);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(48 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CC3E0558(a1, (uint64_t)v21, (uint64_t)v10);
}

void sub_1CC3E0558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 200);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_6;
    }
    unsigned int v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[6 * v7];
  }
  do
  {
    *unsigned int v8 = -1;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      int v10 = *(_DWORD *)v4;
      int v11 = *(_DWORD *)(v4 + 4);
      if ((*(_DWORD *)v4 != -1 || v11 != -1) && (v10 != -2 || v11 != -2))
      {
        uint64_t v20 = 0;
        sub_1CC3E01B0(a1, v10, v11, &v20);
        int v14 = v20;
        *uint64_t v20 = *(void *)v4;
        v14[1] = v14 + 3;
        v14[2] = 0x200000000;
        unsigned int v15 = *(_DWORD *)(v4 + 16);
        if ((void *)v4 != v14 && v15 != 0)
        {
          unsigned int v17 = *(const void **)(v4 + 8);
          if ((const void *)(v4 + 24) == v17)
          {
            if (v15 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v14 + 3, v17, 8 * *(unsigned int *)(v4 + 16));
            *((_DWORD *)v14 + 4) = v15;
          }
          else
          {
            v14[1] = v17;
            int v19 = *(_DWORD *)(v4 + 20);
            *((_DWORD *)v14 + 4) = v15;
            *((_DWORD *)v14 + 5) = v19;
            *(void *)(v4 + 8) = v4 + 24;
            *(_DWORD *)(v4 + 20) = 0;
          }
          *(_DWORD *)(v4 + 16) = 0;
        }
        v14[5] = *(void *)(v4 + 40);
        *(_DWORD *)a1 += 2;
        uint64_t v18 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v18) {
          free(v18);
        }
      }
      v4 += 48;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC3E06F4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v7 = a5;
  unint64_t v9 = a3;
  v54[3] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = HIDWORD(a3);
  do
  {
    v13.n128_f64[0] = sub_1CC3E0058((const void **)&v52, a4, v9, v12);
    if (v53 < 1)
    {
      int v14 = 1;
      unsigned int v5 = v9;
      unsigned int v6 = v12;
    }
    else if (v53 == 1)
    {
      unint64_t v9 = *(unsigned int *)v52;
      unint64_t v12 = *((unsigned int *)v52 + 1);
      int v14 = 2;
    }
    else if (v7)
    {
      uint64_t v15 = 0;
      uint64_t v49 = v51;
      uint64_t v50 = 0x400000000;
      uint64_t v16 = 8 * v53;
      do
      {
        uint64_t v17 = sub_1CC3E06F4(a1, a2, *(void *)((char *)v52 + v15), a4, 1, v13);
        if (v50 >= (unint64_t)HIDWORD(v50)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v15 += 8;
        *((void *)v49 + v50) = v17;
        LODWORD(v50) = v50 + 1;
      }
      while (v16 != v15);
      unint64_t v43 = v12;
      unint64_t v44 = v9;
      uint64_t v18 = v54[2];
      unint64_t v19 = *(void *)(a1[3] + 16 * (*(_DWORD *)v49 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a1, "", 0);
      uint64_t v21 = IncompleteVirtualRegister;
      *(void *)(a1[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v19;
      uint64_t v22 = a1[1];
      if (v22) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 24))(v22, v21);
      }
      uint64_t v23 = sub_1CB84B030(*(void *)(v18 + 24), v18, (unsigned __int8 **)(v18 + 56), *(void *)(a2 + 8), v21);
      BOOL v25 = v24;
      int v26 = (char *)v49;
      if (v50)
      {
        unsigned int v27 = v23;
        unsigned int v28 = (char *)v49 + 8 * v50;
        unsigned int v29 = 2;
        do
        {
          int v30 = *(_DWORD *)v26;
          unsigned int v31 = *((_DWORD *)v26 + 1);
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          v45[0] = (v31 & 0xFFF) << 8;
          v45[1] = v30;
          llvm::MachineInstr::addOperand(v25, v27, (const llvm::MachineOperand *)v45);
          uint64_t v32 = *(void *)(*(void *)(v18 + 32) + 32 * v29 + 16);
          uint64_t v46 = 0;
          uint64_t v47 = v32;
          v45[0] = 4;
          llvm::MachineInstr::addOperand(v25, v27, (const llvm::MachineOperand *)v45);
          uint64_t v33 = *(unsigned int *)v26;
          if ((v33 & 0x80000000) != 0) {
            unsigned int v34 = (unsigned int **)(a1[3] + 16 * (v33 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v34 = (unsigned int **)(a1[34] + 8 * v33);
          }
          unsigned int v35 = *v34;
          if (v35)
          {
            while (1)
            {
              unsigned int v36 = *v35;
              if ((*v35 & 0x1000000) == 0) {
                break;
              }
              unsigned int v35 = (unsigned int *)*((void *)v35 + 3);
              if (!v35) {
                goto LABEL_22;
              }
            }
LABEL_24:
            *unsigned int v35 = v36 & 0xFBFFFFFF;
            while (1)
            {
              unsigned int v35 = (unsigned int *)*((void *)v35 + 3);
              if (!v35) {
                break;
              }
              unsigned int v36 = *v35;
              if ((*v35 & 0x1000000) == 0) {
                goto LABEL_24;
              }
            }
          }
LABEL_22:
          v29 += 2;
          v26 += 8;
        }
        while (v26 != v28);
        int v26 = (char *)v49;
      }
      uint64_t v37 = (unsigned int *)*((void *)v25 + 4);
      unsigned int v38 = *v37;
      unsigned int v5 = v37[1];
      unint64_t v9 = v44;
      if (v26 != v51) {
        free(v26);
      }
      unsigned int v6 = (v38 >> 8) & 0xFFF;
      int v14 = 1;
      int v7 = a5;
      unint64_t v12 = v43;
    }
    else
    {
      int v14 = 3;
    }
    if (v52 != v54) {
      free(v52);
    }
  }
  while (v14 == 2);
  if (v14 == 3) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = v5;
  }
  if (v14 == 3) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v6;
  }
  return v39 | (v40 << 32);
}

void sub_1CC3E0A54()
{
}

BOOL sub_1CC3E0A68(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    *(_DWORD *)(a1 + 16) = 1;
    *a2 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 32) + 36) | ((unint64_t)((*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 32) + 32) >> 8) & 0xFFF) << 32);
    *a3 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 32) + 4) | ((unint64_t)((**(_DWORD **)(*(void *)(a1 + 8) + 32) >> 8) & 0xFFF) << 32);
  }
  return v3 == 0;
}

BOOL sub_1CC3E0AB4(uint64_t a1, unsigned int a2, __int16 a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 32);
    llvm::MachineOperand::setReg(v5 + 32, a2);
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 32) & 0xFFF000FF | ((a3 & 0xFFF) << 8);
  }
  return v3 == 1;
}

void sub_1CC3E0B14()
{
}

uint64_t sub_1CC3E0B28(uint64_t a1, unint64_t *a2, void *a3)
{
  if (*(_DWORD *)(a1 + 16) == 2) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = 2;
  *a2 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 32) + 68) | ((unint64_t)((*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 32) + 64) >> 8) & 0xFFF) << 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 32);
  if ((*(_DWORD *)v3 & 0xFFF00) != 0) {
    return 0;
  }
  *a3 = *(unsigned int *)(v3 + 4) | (*(void *)(v3 + 112) << 32);
  return 1;
}

BOOL sub_1CC3E0B88(uint64_t a1, unsigned int a2, __int16 a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 2)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 32);
    llvm::MachineOperand::setReg(v5 + 64, a2);
    *(_DWORD *)(v5 + 64) = *(_DWORD *)(v5 + 64) & 0xFFF000FF | ((a3 & 0xFFF) << 8);
  }
  return v3 == 2;
}

void sub_1CC3E0BE8()
{
}

uint64_t sub_1CC3E0BFC(uint64_t a1, void *a2, unint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16) == 1) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = 1;
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 32);
  if ((*(_DWORD *)(v3 + 32) & 0xFFF00) != 0) {
    return 0;
  }
  *a2 = *(unsigned int *)(v3 + 36) | (*(void *)(v3 + 80) << 32);
  *a3 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 32) + 4) | ((unint64_t)((**(_DWORD **)(*(void *)(a1 + 8) + 32) >> 8) & 0xFFF) << 32);
  return 1;
}

BOOL sub_1CC3E0C5C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    llvm::MachineOperand::setReg(*(void *)(*(void *)(a1 + 8) + 32) + 32, a2);
    if (a3)
    {
      *(void *)(*(void *)(*(void *)(a1 + 8) + 32) + 32 * (*(_DWORD *)(a1 + 16) + 1) + 16) = a3;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = -1;
      llvm::MachineInstr::removeOperand(*(char **)(a1 + 8), 2u);
      *(void *)(*(void *)(a1 + 8) + 16) = *(void *)(*(void *)(a1 + 24) + 8) + 912;
    }
  }
  return v3 == 1;
}

void sub_1CC3E0D00()
{
}

BOOL sub_1CC3E0D14(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    unsigned int v4 = v3 + 2;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v4 >= *(_DWORD *)(v5 + 40)) {
      return 0;
    }
  }
  else
  {
    unsigned int v4 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unsigned int v6 = *(_DWORD **)(v5 + 32);
  int v7 = &v6[8 * v4];
  *a2 = v7[1];
  LODWORD(v7) = (*v7 >> 8) & 0xFFF;
  a2[1] = v7;
  if (v7) {
    return 0;
  }
  a3[1] = *(void *)&v6[8 * (*(_DWORD *)(a1 + 16) + 1) + 4];
  *a3 = v6[1];
  return (*v6 & 0xFFF00) == 0;
}

uint64_t sub_1CC3E0D9C(uint64_t a1, unsigned int a2, __int16 a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((v3 & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v3 > *(_DWORD *)(v4 + 40)) {
    return 0;
  }
  int v7 = (unsigned int *)(*(void *)(v4 + 32) + 32 * v3);
  llvm::MachineOperand::setReg((uint64_t)v7, a2);
  *int v7 = *v7 & 0xFFF000FF | ((a3 & 0xFFF) << 8);
  return 1;
}

void *sub_1CC3E0E00(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *uint64_t result = -1;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = v4;
      do
      {
        int v15 = *v14;
        int v16 = v14[1];
        if ((*v14 != -1 || v16 != -1) && (v15 != -2 || v16 != -2))
        {
          unint64_t v19 = ((37 * v16) | ((unint64_t)(37 * v15) << 32))
              + ~((unint64_t)(37 * v16) << 32);
          unint64_t v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
          unint64_t v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
          int v22 = ((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~(v21 << 27));
          int v23 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v24 = v23 & v22;
          uint64_t v25 = *a1 + 16 * v24;
          int v26 = *(_DWORD *)v25;
          int v27 = *(_DWORD *)(v25 + 4);
          if (v15 != *(_DWORD *)v25 || v16 != v27)
          {
            uint64_t v29 = 0;
            int v30 = 1;
            while (v26 != -1 || v27 != -1)
            {
              if (v29) {
                BOOL v31 = 0;
              }
              else {
                BOOL v31 = v27 == -2;
              }
              if (v31 && v26 == -2) {
                uint64_t v29 = v25;
              }
              unsigned int v33 = v24 + v30++;
              unsigned int v24 = v33 & v23;
              uint64_t v25 = *a1 + 16 * (v33 & v23);
              int v26 = *(_DWORD *)v25;
              int v27 = *(_DWORD *)(v25 + 4);
              if (v15 == *(_DWORD *)v25 && v16 == v27) {
                goto LABEL_45;
              }
            }
            if (v29) {
              uint64_t v25 = v29;
            }
          }
LABEL_45:
          *(void *)uint64_t v25 = *(void *)v14;
          *(void *)(v25 + 8) = *((void *)v14 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v14 += 4;
      }
      while (v14 != &v4[4 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_DWORD *sub_1CC3E0FEC(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CBB2F3F0(a1, 2 * v7);
    int v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
    int v12 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          uint64_t v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
        int v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_10;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      int v8 = *a4;
      goto LABEL_4;
    }
    sub_1CBB2F3F0(a1, v7);
    int v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(void *)a1 + 16 * v18);
    int v19 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v20 = 1;
      while (v19 != -1)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -2;
        }
        if (v21) {
          uint64_t v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (_DWORD *)(*(void *)a1 + 16 * v18);
        int v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_10:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC3E1164()
{
  LODWORD(v3) = 1;
  v1.n128_u64[0] = (unint64_t)"Aggressive extension optimization";
  v1.n128_u64[1] = 33;
  sub_1CD4C1500((uint64_t)&unk_1EBCD15C8, "aggressive-ext-opt", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD15C8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable the peephole optimizer";
  v1.n128_u64[1] = 30;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD1688, "disable-peephole", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1688, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable advanced copy optimization";
  v1.n128_u64[1] = 34;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD1748, "disable-adv-copy-opt", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1748, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable non-allocatable physical register copy optimization";
  v1.n128_u64[1] = 59;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD1808, "disable-non-allocatable-phys-copy-opt", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1808, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 10;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Limit the length of PHI chains to lookup";
  v1.n128_u64[1] = 40;
  sub_1CD568660(&v4, &v3, (long long *)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD18C8, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 3;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum length of recurrence chain when evaluating the benefit of commuting operands";
  v1.n128_u64[1] = 84;
  sub_1CD45A86C((uint64_t)&unk_1EBCD1988, "recurrence-chain-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD1988, &dword_1CB82C000);
}

void sub_1CC3E1380(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC3E1420()
{
}

void sub_1CC3E155C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2610C18;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 45), 8);
  int v2 = (void *)*((void *)a1 + 38);
  if (v2 != *((void **)a1 + 37)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 34), 4);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = (void *)*((void *)a1 + 22);
  if (v3 != (void *)((char *)a1 + 192)) {
    free(v3);
  }
  int v4 = (void *)*((void *)a1 + 13);
  if (v4 != (void *)((char *)a1 + 120)) {
    free(v4);
  }
  unint64_t v5 = (void *)*((void *)a1 + 4);
  if (v5 != (void *)((char *)a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3E1638(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2610C18;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 45), 8);
  int v2 = (void *)*((void *)a1 + 38);
  if (v2 != *((void **)a1 + 37)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 34), 4);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = (void *)*((void *)a1 + 22);
  if (v3 != (void *)((char *)a1 + 192)) {
    free(v3);
  }
  int v4 = (void *)*((void *)a1 + 13);
  if (v4 != (void *)((char *)a1 + 120)) {
    free(v4);
  }
  unint64_t v5 = (void *)*((void *)a1 + 4);
  if (v5 != (void *)((char *)a1 + 48)) {
    free(v5);
  }
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3E1728(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2 + 144, (uint64_t)&llvm::LiveVariables::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LiveVariables::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC3E17E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 248) = *(void *)(a2 + 40);
  uint64_t v3 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v3, &llvm::LiveVariables::ID, 1);
  if (AnalysisPass)
  {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveVariables::ID);
    uint64_t v3 = *(llvm::PMDataManager **)(*(void *)(v2 + 8) + 24);
  }
  *(void *)(v2 + 256) = AnalysisPass;
  uint64_t v5 = llvm::PMDataManager::findAnalysisPass(v3, &llvm::LiveIntervals::ID, 1);
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LiveIntervals::ID);
  }
  *(void *)(v2 + 264) = v5;
  uint64_t v548 = v2;
  if (byte_1EBCD1AD0 || (uint64_t v6 = *(void *)(v2 + 256), !(v6 | v5)))
  {
    int v7 = 0;
    goto LABEL_8;
  }
  memset(v563, 0, sizeof(v563));
  if (v6)
  {
    unsigned int v503 = -1;
    uint64_t v504 = a2 + 320;
    do
    {
      uint64_t v504 = *(void *)(v504 + 8);
      ++v503;
    }
    while (v504 != a2 + 320);
    sub_1CD5687FC((uint64_t)v563, v503);
    int v505 = *(_DWORD *)(*(void *)(v2 + 248) + 32);
    if (v505)
    {
      unsigned int v506 = 0;
      while (1)
      {
        uint64_t v507 = v506 & 0x7FFFFFFF;
        uint64_t v508 = *(void *)(*(void *)(*(void *)(v2 + 248) + 24) + 16 * v507 + 8);
        if (!v508) {
          goto LABEL_847;
        }
        if ((*(unsigned char *)(v508 + 3) & 1) == 0)
        {
          uint64_t v508 = *(void *)(v508 + 24);
          if (!v508 || (*(unsigned char *)(v508 + 3) & 1) == 0) {
            goto LABEL_847;
          }
        }
        uint64_t v509 = *(void *)(v508 + 8);
        if (!v509) {
          goto LABEL_847;
        }
        uint64_t v510 = *(void *)(v2 + 256);
        v511 = (uint64_t *)(v510 + 248);
        if (v507 >= *(_DWORD *)(v510 + 256)) {
          sub_1CD520A8C((uint64_t *)(v510 + 248), v507 + 1, v510 + 264);
        }
        uint64_t v512 = *v511;
        v513 = (unsigned __int8 **)(v512 + 56 * v507);
        v559 = v513;
        uint64_t v560 = (uint64_t)v513[1];
        v562[0] = 0;
        unint64_t v561 = 0xFFFFFFFF00000000;
        LOBYTE(v558) = 0;
        sub_1CC30D2C4((uint64_t)&v558);
        *(void *)&long long v555 = v513;
        *((void *)&v555 + 1) = v513[1];
        uint64_t v557 = 0;
        unint64_t v556 = 0xFFFFFFFF00000000;
        LOBYTE(v554) = 1;
        sub_1CC30D2C4((uint64_t)&v554);
        int v514 = v558;
        int v515 = v554;
        if (!(_BYTE)v558 || !(_BYTE)v554)
        {
          do
          {
            uint64_t v516 = v561;
            if (v514 == v515 && v556 == v561) {
              break;
            }
            LODWORD(v561) = v561 + 1;
            v562[0] >>= 1;
            sub_1CC30D348((uint64_t)&v558);
            sub_1CBF7C6A8(&v563[0][4 * v516], v506);
            int v514 = v558;
            int v515 = v554;
          }
          while (!(_BYTE)v558 || v554 == 0);
        }
        uint64_t v518 = v512 + 56 * v507;
        v520 = *(uint64_t **)(v518 + 32);
        v519 = *(uint64_t **)(v518 + 40);
        if ((unint64_t)((char *)v519 - (char *)v520) <= 8) {
          break;
        }
        while (v520 != v519)
        {
LABEL_845:
          uint64_t v521 = *v520++;
          sub_1CBF7C6A8(&v563[0][4 * *(int *)(*(void *)(v521 + 24) + 24)], v506);
        }
LABEL_847:
        if (++v506 == v505) {
          goto LABEL_667;
        }
      }
      if (v520 == v519 || *(void *)(*v520 + 24) == *(void *)(v509 + 24)) {
        goto LABEL_847;
      }
      goto LABEL_845;
    }
  }
LABEL_667:
  uint64_t v404 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(v2 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (v404) {
    uint64_t v405 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v404 + 96))(v404, &llvm::MachineLoopInfo::ID);
  }
  else {
    uint64_t v405 = 0;
  }
  uint64_t v424 = *(void *)(a2 + 328);
  if (v424 == a2 + 320)
  {
    int v425 = 0;
    goto LABEL_816;
  }
  int v425 = 0;
  unsigned int v426 = &unk_1EBCD1000;
  uint64_t v543 = v405;
  do
  {
    unsigned int v427 = v563;
    if (!*(void *)(v2 + 256)) {
      unsigned int v427 = 0;
    }
    v551 = v427;
    uint64_t v428 = v424 + 48;
    if (v424 + 48 == (*(void *)(v424 + 48) & 0xFFFFFFFFFFFFFFF8)
      || ((uint64_t v429 = *(void *)(v424 + 56), v430 = **(unsigned __int16 **)(v429 + 16), v430 != 69)
        ? (BOOL v431 = v430 == 0)
        : (BOOL v431 = 1),
          !v431 || *(unsigned char *)(v424 + 184)))
    {
LABEL_709:
      int v432 = 0;
      goto LABEL_710;
    }
    if (!v405) {
      goto LABEL_720;
    }
    int v433 = *(_DWORD *)(v405 + 264);
    if (!v433) {
      goto LABEL_720;
    }
    uint64_t v434 = *(void *)(v405 + 248);
    unsigned int v435 = v433 - 1;
    uint64_t v436 = (v433 - 1) & ((v424 >> 4) ^ (v424 >> 9));
    uint64_t v437 = *(void *)(v434 + 16 * v436);
    if (v424 != v437)
    {
      int v438 = 1;
      while (v437 != -4096)
      {
        int v439 = v436 + v438++;
        uint64_t v436 = v439 & v435;
        uint64_t v437 = *(void *)(v434 + 16 * v436);
        if (v424 == v437) {
          goto LABEL_718;
        }
      }
LABEL_720:
      uint64_t v440 = 0;
LABEL_721:
      BOOL v441 = 0;
      goto LABEL_722;
    }
LABEL_718:
    uint64_t v440 = *(void *)(v434 + 16 * v436 + 8);
    if (!v440) {
      goto LABEL_721;
    }
    BOOL v441 = **(void **)(v440 + 32) == v424;
LABEL_722:
    if (v429 == v428) {
      goto LABEL_709;
    }
    int v432 = 0;
    uint64_t v547 = v440;
    BOOL v545 = v441;
    int v533 = v425;
    do
    {
      int v442 = **(unsigned __int16 **)(v429 + 16);
      if (v442 != 69 && v442 != 0) {
        break;
      }
      int v444 = *(_DWORD *)(v429 + 40);
      if (v444 == 1) {
        goto LABEL_809;
      }
      for (unsigned int i = 1; i != v444; i += 2)
      {
        uint64_t v446 = *(void *)(v429 + 32);
        uint64_t v447 = *(void **)(v446 + 32 * (i + 1) + 16);
        uint64_t v448 = v447[11];
        uint64_t v449 = v447[12];
        if (((v449 - v448) & 0x7FFFFFFF8) == 8) {
          continue;
        }
        int v450 = v426[2960];
        if (v447 == (void *)v424 && v450 == 0) {
          continue;
        }
        if (v405)
        {
          int v452 = *(_DWORD *)(v405 + 264);
          if (v452)
          {
            uint64_t v453 = *(void *)(v405 + 248);
            unsigned int v454 = v452 - 1;
            uint64_t v455 = (v452 - 1) & ((v447 >> 4) ^ (v447 >> 9));
            v456 = *(void **)(v453 + 16 * v455);
            if (v447 == v456)
            {
LABEL_742:
              v459 = *(void **)(v453 + 16 * v455 + 8);
              goto LABEL_744;
            }
            int v457 = 1;
            while (v456 != (void *)-4096)
            {
              int v458 = v455 + v457++;
              uint64_t v455 = v458 & v454;
              v456 = *(void **)(v453 + 16 * v455);
              if (v447 == v456) {
                goto LABEL_742;
              }
            }
          }
        }
        v459 = 0;
LABEL_744:
        BOOL v460 = v459 == (void *)v440 && v441;
        if (!v460 || v450 != 0)
        {
          int v462 = *(_DWORD *)(v446 + 32 * i + 4);
          uint64_t v463 = *(void *)(v2 + 264);
          unsigned int v553 = v462;
          if (v463)
          {
            int v464 = (void *)(v463 + 408);
            unint64_t v465 = *(unsigned int *)(v463 + 416);
            BOOL v125 = (v462 & 0x7FFFFFFFu) >= v465;
            unint64_t v466 = (v462 & 0x7FFFFFFF) - v465;
            if (v125)
            {
              sub_1CB9153B8((uint64_t)v464, v466 + 1, *(void *)(v463 + 424));
LABEL_805:
              operator new();
            }
            uint64_t v467 = *(void *)(*v464 + 8 * (v462 & 0x7FFFFFFF));
            if (!v467) {
              goto LABEL_805;
            }
            if (v448 != v449)
            {
              uint64_t v468 = *(void *)(v2 + 264);
              unsigned int v469 = *(_DWORD *)(v467 + 8);
              uint64_t v470 = *(void *)v467 + 24 * v469;
              while (1)
              {
                uint64_t v471 = *(void *)(*(void *)(*(void *)(v468 + 288) + 392)
                                 + 16 * *(unsigned int *)(*(void *)v448 + 24));
                v472 = (void *)(*(void *)v467 + 24 * v469);
                if (v469)
                {
                  unsigned int v473 = *(_DWORD *)((v471 & 0xFFFFFFFFFFFFFFF8) + 24) | (v471 >> 1) & 3;
                  v472 = (void *)(*(void *)v467 + 24 * v469);
                  if (v473 < ((*(void *)(v470 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v470 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
                  {
                    v472 = *(void **)v467;
                    unint64_t v474 = *(unsigned int *)(v467 + 8);
                    do
                    {
                      unint64_t v475 = v474 >> 1;
                      uint64_t v476 = v472[3 * (v474 >> 1) + 1];
                      LODWORD(v476) = (v476 >> 1) & 3 | *(_DWORD *)((v476 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v474 -= (v474 >> 1) + 1;
                      BOOL v477 = v473 >= v476;
                      if (v473 >= v476) {
                        unint64_t v478 = v475 + 1;
                      }
                      else {
                        unint64_t v478 = 0;
                      }
                      v472 += 3 * v478;
                      if (!v477) {
                        unint64_t v474 = v475;
                      }
                    }
                    while (v474);
                  }
                }
                if (v472 != (void *)v470
                  && ((*v472 >> 1) & 3 | *(_DWORD *)((*v472 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v471 & 0xFFFFFFFFFFFFFFF8) + 24) | (v471 >> 1) & 3))
                {
                  break;
                }
                v448 += 8;
                if (v448 == v449) {
                  goto LABEL_768;
                }
              }
LABEL_772:
              unsigned int v481 = v553;
              if (!v468)
              {
                uint64_t v501 = *(void *)(v2 + 256);
                unint64_t v502 = v553 & 0x7FFFFFFF;
                if (v502 >= *(unsigned int *)(v501 + 256))
                {
                  sub_1CD520A8C((uint64_t *)(v501 + 248), v502 + 1, v501 + 264);
                  unsigned int v481 = v553;
                }
                unsigned __int8 isLiveIn = llvm::LiveVariables::VarInfo::isLiveIn((uint64_t *)(*(void *)(v501 + 248) + 56 * v502), v424, v481, *(void *)(v501 + 368));
                uint64_t v405 = v543;
                unsigned int v426 = (unsigned char *)&unk_1EBCD1000;
                uint64_t v440 = v547;
                BOOL v441 = v545;
                goto LABEL_788;
              }
              v482 = (void *)(v468 + 408);
              unint64_t v483 = *(unsigned int *)(v468 + 416);
              BOOL v125 = (v553 & 0x7FFFFFFF) >= v483;
              unint64_t v484 = (v553 & 0x7FFFFFFF) - v483;
              if (v125)
              {
                sub_1CB9153B8((uint64_t)v482, v484 + 1, *(void *)(v468 + 424));
LABEL_807:
                operator new();
              }
              uint64_t v485 = *(void *)(*v482 + 8 * (v553 & 0x7FFFFFFF));
              if (!v485) {
                goto LABEL_807;
              }
              uint64_t v486 = *(void *)(*(void *)(*(void *)(v468 + 288) + 392) + 16 * *(unsigned int *)(v424 + 24));
              unsigned int v487 = *(_DWORD *)(v485 + 8);
              v488 = *(void **)v485;
              if (v487)
              {
                uint64_t v489 = v488[3 * v487 - 2];
                unsigned int v490 = *(_DWORD *)((v486 & 0xFFFFFFFFFFFFFFF8) + 24) | (v486 >> 1) & 3;
                unsigned int v491 = (v489 >> 1) & 3 | *(_DWORD *)((v489 & 0xFFFFFFFFFFFFFFF8) + 24);
                uint64_t v492 = *(void **)v485;
                unint64_t v493 = *(unsigned int *)(v485 + 8);
                if (v490 < v491)
                {
                  do
                  {
                    unint64_t v494 = v493 >> 1;
                    uint64_t v495 = v492[3 * (v493 >> 1) + 1];
                    LODWORD(v495) = (v495 >> 1) & 3 | *(_DWORD *)((v495 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v493 -= (v493 >> 1) + 1;
                    BOOL v496 = v490 >= v495;
                    if (v490 >= v495) {
                      unint64_t v497 = v494 + 1;
                    }
                    else {
                      unint64_t v497 = 0;
                    }
                    v492 += 3 * v497;
                    if (!v496) {
                      unint64_t v493 = v494;
                    }
                  }
                  while (v493);
LABEL_786:
                  unsigned __int8 isLiveIn = v492 != &v488[3 * v487]
                          && ((*v492 >> 1) & 3 | *(_DWORD *)((*v492 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v486 & 0xFFFFFFFFFFFFFFF8) + 24) | (v486 >> 1) & 3);
LABEL_788:
                  char v479 = isLiveIn ^ 1;
                  if (((isLiveIn ^ 1) & 1) == 0)
                  {
LABEL_789:
                    if (v459 != (void *)v440)
                    {
                      if (v459)
                      {
                        v499 = (void *)v440;
                        while (v499)
                        {
                          v499 = (void *)*v499;
                          if (v499 == v459)
                          {
                            char v479 = 0;
                            goto LABEL_795;
                          }
                        }
                        goto LABEL_797;
                      }
                      goto LABEL_796;
                    }
                  }
LABEL_795:
                  if (v479)
                  {
LABEL_797:
                    unint64_t v500 = llvm::MachineBasicBlock::SplitCriticalEdge(v447, (const llvm::MachineBasicBlock *)v424, v2, v551);
                    BOOL v441 = v545;
                    uint64_t v440 = v547;
                    unsigned int v426 = (unsigned char *)&unk_1EBCD1000;
                    uint64_t v405 = v543;
                    v432 |= v500 != 0;
                    continue;
                  }
LABEL_796:
                  if (!v426[2960]) {
                    continue;
                  }
                  goto LABEL_797;
                }
              }
              else
              {
                unsigned int v487 = 0;
              }
              uint64_t v492 = &v488[3 * v487];
              goto LABEL_786;
            }
          }
          else
          {
            BOOL isLiveOut = llvm::LiveVariables::isLiveOut(*(void *)(v2 + 256), v462, (uint64_t)v447);
            BOOL v441 = v545;
            uint64_t v440 = v547;
            unsigned int v426 = &unk_1EBCD1000;
            uint64_t v405 = v543;
            if (isLiveOut)
            {
              uint64_t v468 = *(void *)(v2 + 264);
              goto LABEL_772;
            }
          }
LABEL_768:
          if (!byte_1EBCD1C50) {
            continue;
          }
          char v479 = 0;
          goto LABEL_789;
        }
      }
      int v425 = v533;
      uint64_t v428 = v424 + 48;
      if (v429)
      {
LABEL_809:
        if ((*(unsigned char *)v429 & 4) != 0) {
          goto LABEL_813;
        }
      }
      while ((*(_WORD *)(v429 + 44) & 8) != 0)
        uint64_t v429 = *(void *)(v429 + 8);
LABEL_813:
      uint64_t v429 = *(void *)(v429 + 8);
    }
    while (v429 != v428);
LABEL_710:
    v425 |= v432;
    uint64_t v424 = *(void *)(v424 + 8);
  }
  while (v424 != a2 + 320);
LABEL_816:
  if (v563[0])
  {
    sub_1CC3E4D6C(v563, v563[0]);
    operator delete(v563[0]);
  }
  int v7 = v425;
LABEL_8:
  int v8 = *(void **)(**(void **)(v2 + 248) + 360);
  *v8 &= ~1uLL;
  unint64_t v9 = *(llvm::MachineBasicBlock **)(a2 + 328);
  v534 = (llvm::MachineBasicBlock *)(a2 + 320);
  if (v9 != (llvm::MachineBasicBlock *)(a2 + 320))
  {
    do
    {
      for (uint64_t j = *((void *)v9 + 7);
            (llvm::MachineBasicBlock *)j != (llvm::MachineBasicBlock *)((char *)v9 + 48);
            uint64_t j = *(void *)(j + 8))
      {
        int v11 = **(unsigned __int16 **)(j + 16);
        if (v11 != 69 && v11 != 0) {
          break;
        }
        int v13 = *(_DWORD *)(j + 40);
        if (v13 != 1)
        {
          unsigned int v14 = 1;
          do
          {
            uint64_t v15 = *(void *)(j + 32);
            unsigned int v16 = v14;
            uint64_t v17 = v15 + 32 * v14;
            if ((*(unsigned char *)(v17 + 3) & 0x10) == 0)
            {
              int v18 = *(_DWORD *)(v17 + 4);
              LODWORD(v558) = *(_DWORD *)(*(void *)(v15 + 32 * (v16 + 1) + 16) + 24);
              HIDWORD(v558) = v18;
              int v19 = sub_1CC3E4DF8(v2 + 272, (int *)&v558);
              ++v19[2];
            }
            unsigned int v14 = v16 + 2;
          }
          while (v13 != v16 + 2);
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      unint64_t v9 = (llvm::MachineBasicBlock *)*((void *)v9 + 1);
    }
    while (v9 != v534);
    int v20 = *(llvm::MachineBasicBlock **)(a2 + 328);
    if (v20 != v534)
    {
      uint64_t v536 = v2 + 360;
      v531 = (llvm::SmallPtrSetImplBase *)(v2 + 296);
      uint64_t v546 = v2 + 272;
      while (1)
      {
        v538 = (void *)((char *)v20 + 48);
        if ((llvm::MachineBasicBlock *)((char *)v20 + 48) != (llvm::MachineBasicBlock *)(*((void *)v20 + 6) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        int v348 = 0;
LABEL_593:
        v7 |= v348;
        int v20 = (llvm::MachineBasicBlock *)*((void *)v20 + 1);
        if (v20 == v534) {
          goto LABEL_594;
        }
      }
      int v532 = v7;
      BOOL v21 = (void *)*((void *)v20 + 7);
      int v22 = *(unsigned __int16 *)v21[2];
      if (v22 != 69 && v22 != 0)
      {
        int v348 = 0;
LABEL_592:
        int v7 = v532;
        goto LABEL_593;
      }
      uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(*((void *)v20 + 4) + 16) + 104))(*(void *)(*((void *)v20 + 4) + 16));
      if (v538 == v21)
      {
LABEL_44:
        BOOL v21 = (void *)((char *)v20 + 48);
      }
      else
      {
        uint64_t v25 = v24;
        while (1)
        {
          int v26 = *(unsigned __int16 *)v21[2];
          if (*(_WORD *)v21[2])
          {
            if (v26 != 69
              && (v26 - 3) >= 4
              && !(*(unsigned int (**)(uint64_t, void *))(*(void *)v25 + 1144))(v25, v21))
            {
              break;
            }
          }
          if ((*(unsigned char *)v21 & 4) == 0)
          {
            while ((*((_WORD *)v21 + 22) & 8) != 0)
              BOOL v21 = (void *)v21[1];
          }
          BOOL v21 = (void *)v21[1];
          if (v21 == v538) {
            goto LABEL_44;
          }
        }
      }
      unint64_t v27 = *v21 & 0xFFFFFFFFFFFFFFF8;
      if (!v27 || (*(unsigned char *)v27 & 4) == 0)
      {
        while ((*(_WORD *)(v27 + 44) & 4) != 0)
          unint64_t v27 = *(void *)v27 & 0xFFFFFFFFFFFFFFF8;
      }
      v552 = v20;
      unint64_t v539 = v27;
      while (2)
      {
        uint64_t v28 = *((void *)v20 + 7);
        int v29 = **(unsigned __int16 **)(v28 + 16);
        if (v29 != 69 && v29 != 0)
        {
          int v348 = 1;
          goto LABEL_592;
        }
        unint64_t v31 = v27;
        if ((*(unsigned char *)v27 & 4) == 0)
        {
          unint64_t v31 = v27;
          if ((*(_WORD *)(v27 + 44) & 8) != 0)
          {
            unint64_t v31 = v27;
            do
              unint64_t v31 = *(void *)(v31 + 8);
            while ((*(_WORD *)(v31 + 44) & 8) != 0);
          }
        }
        uint64_t v32 = *(uint64_t **)(v31 + 8);
        v564 = 0;
        uint64_t v33 = *(void *)(*(void *)(v28 + 24) + 32);
        if (v33)
        {
          uint64_t v34 = *(void *)(v33 + 728);
          if (v34) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 32))(v34, v28);
          }
          uint64_t v35 = *(unsigned int *)(v28 + 40);
          if (v35)
          {
            uint64_t v36 = *(void *)(v28 + 32);
            uint64_t v37 = *(void *)(v33 + 40);
            uint64_t v38 = 32 * v35;
            do
            {
              if (!*(unsigned char *)v36)
              {
                uint64_t v39 = *(unsigned int *)(v36 + 4);
                if ((v39 & 0x80000000) != 0) {
                  uint64_t v40 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v40 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v39);
                }
                uint64_t v41 = *v40;
                uint64_t v43 = *(void *)(v36 + 16);
                uint64_t v42 = *(void *)(v36 + 24);
                if (v36 != *v40) {
                  uint64_t v40 = (uint64_t *)(v43 + 24);
                }
                *uint64_t v40 = v42;
                if (v42) {
                  uint64_t v44 = v42;
                }
                else {
                  uint64_t v44 = v41;
                }
                *(void *)(v44 + 16) = v43;
                *(void *)(v36 + 16) = 0;
                *(void *)(v36 + 24) = 0;
              }
              v36 += 32;
              v38 -= 32;
            }
            while (v38);
          }
        }
        *(void *)(v28 + 24) = 0;
        uint64_t v45 = *(unint64_t **)(v28 + 8);
        unint64_t v46 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
        *uint64_t v45 = v46 | *v45 & 7;
        *(void *)(v46 + 8) = v45;
        *(void *)v28 &= 7uLL;
        *(void *)(v28 + 8) = 0;
        v564 = (llvm::MachineInstr *)v28;
        int v549 = *(_DWORD *)(v28 + 40);
        uint64_t v47 = *(int **)(v28 + 32);
        int v49 = *v47;
        uint64_t v48 = v47[1];
        uint64_t v540 = *((void *)v20 + 4);
        v544 = (void *)(*(uint64_t (**)(void))(**(void **)(v540 + 16) + 104))(*(void *)(v540 + 16));
        uint64_t v50 = v564;
        int v51 = *((_DWORD *)v564 + 10);
        if (v51 != 1)
        {
          uint64_t v52 = *(void *)(v548 + 248);
          uint64_t v53 = *((void *)v564 + 4);
          uint64_t v54 = *(void *)(v52 + 24);
          uint64_t v55 = *(void *)(v52 + 272);
          unsigned int v56 = 1;
          while (1)
          {
            unsigned int v57 = v56;
            uint64_t v58 = v53 + 32 * v56;
            if ((sub_1CC3E5338(*(_DWORD *)(v58 + 4), v54, v55) & 1) == 0 && (*(unsigned char *)(v58 + 3) & 0x10) == 0) {
              break;
            }
            unsigned int v56 = v57 + 2;
            if (v51 == v57 + 2) {
              goto LABEL_82;
            }
          }
          uint64_t v2 = v548;
          int v78 = *(_DWORD *)(v548 + 376);
          if (v78)
          {
            uint64_t v79 = *(void *)(v548 + 360);
            unsigned int HashValue = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v564, v59);
            uint64_t v81 = 0;
            int v82 = v78 - 1;
            for (int k = 1; ; ++k)
            {
              unsigned int v84 = HashValue & v82;
              unint64_t v85 = (uint64_t *)(v79 + 16 * (HashValue & v82));
              unint64_t v86 = (llvm::MachineInstr *)*v85;
              if ((unint64_t)(*v85 + 1) < 2 || (unint64_t)v564 + 1 <= 1)
              {
                if (v564 == v86) {
                  goto LABEL_574;
                }
              }
              else
              {
                if (llvm::MachineInstr::isIdenticalTo((uint64_t)v564, (uint64_t)v86, 3))
                {
LABEL_574:
                  uint64_t v91 = *((unsigned int *)v85 + 2);
                  uint64_t v2 = v548;
                  if (!v91) {
                    goto LABEL_116;
                  }
                  int v541 = 1;
                  unsigned int IncompleteVirtualRegister = *((_DWORD *)v85 + 2);
                  goto LABEL_119;
                }
                unint64_t v86 = (llvm::MachineInstr *)*v85;
              }
              if (!v86)
              {
                if (v81) {
                  uint64_t v88 = v81;
                }
                else {
                  uint64_t v88 = (uint64_t *)(v79 + 16 * v84);
                }
                uint64_t v2 = v548;
                goto LABEL_115;
              }
              if (v81) {
                BOOL v87 = 0;
              }
              else {
                BOOL v87 = v86 == (llvm::MachineInstr *)-1;
              }
              if (v87) {
                uint64_t v81 = (uint64_t *)(v79 + 16 * v84);
              }
              unsigned int HashValue = v84 + k;
            }
          }
          uint64_t v88 = 0;
LABEL_115:
          unint64_t v85 = sub_1CC370220(v536, (uint64_t)&v564, (llvm::MachineInstrExpressionTrait *)&v564, v88);
          *unint64_t v85 = (uint64_t)v564;
          *((_DWORD *)v85 + 2) = 0;
LABEL_116:
          uint64_t v89 = *(void *)(v540 + 40);
          unint64_t v90 = *(void *)(*(void *)(v89 + 24) + 16 * (v48 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v89, "", 0);
          uint64_t v91 = IncompleteVirtualRegister;
          *(void *)(*(void *)(v89 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v90;
          uint64_t v92 = *(void *)(v89 + 8);
          if (v92) {
            (*(void (**)(uint64_t, void))(*(void *)v92 + 24))(v92, IncompleteVirtualRegister);
          }
          int v541 = 0;
          *((_DWORD *)v85 + 2) = IncompleteVirtualRegister;
LABEL_119:
          unint64_t v61 = v552;
          uint64_t v64 = (*(uint64_t (**)(void *, llvm::MachineBasicBlock *, uint64_t *, char *, uint64_t, uint64_t))(*v544 + 1152))(v544, v552, v32, (char *)v564 + 56, v91, v48);
LABEL_89:
          if (*((_DWORD *)v564 + 16))
          {
            uint64_t v93 = *((void *)v61 + 4) + 1096;
            LODWORD(v554) = *((_DWORD *)v564 + 16);
            *(void *)&long long v555 = v61;
            *((void *)&v555 + 1) = IncompleteVirtualRegister;
            sub_1CD568C70((uint64_t)&v558, v93, (int *)&v554, &v555);
          }
          uint64_t v71 = *(void *)(v2 + 256);
          unsigned int v542 = IncompleteVirtualRegister;
          if (v71)
          {
            if (IncompleteVirtualRegister)
            {
              unint64_t v94 = IncompleteVirtualRegister & 0x7FFFFFFF;
              uint64_t v95 = *(void *)(v2 + 256);
              uint64_t v96 = v548;
              if (v94 >= *(unsigned int *)(v71 + 256))
              {
                sub_1CD520A8C((uint64_t *)(v71 + 248), v94 + 1, v71 + 264);
                uint64_t v95 = *(void *)(v548 + 256);
              }
              uint64_t v97 = *(void *)(v71 + 248);
              sub_1CBF7C6A8((uint64_t *)(v95 + 328), IncompleteVirtualRegister);
              if (v541)
              {
                uint64_t v98 = v97 + 56 * v94;
                uint64_t v99 = *(uint64_t **)(v98 + 32);
                uint64_t v100 = *(uint64_t **)(v98 + 40);
                while (v99 != v100)
                {
                  uint64_t v101 = *v99;
                  if (*(llvm::MachineBasicBlock **)(*v99 + 24) == v552)
                  {
                    uint64_t v339 = *((void *)v552 + 7);
                    uint64_t v340 = (*(uint64_t (**)(void))(**(void **)(*((void *)v552 + 4) + 16) + 104))(*(void *)(*((void *)v552 + 4) + 16));
                    if (v538 != (void *)v339)
                    {
                      uint64_t v341 = v340;
                      while (1)
                      {
                        int v342 = **(unsigned __int16 **)(v339 + 16);
                        if (**(_WORD **)(v339 + 16))
                        {
                          if (v342 != 69
                            && (v342 - 3) >= 4
                            && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v341 + 1144))(v341, v339))
                          {
                            break;
                          }
                        }
                        if ((*(unsigned char *)v339 & 4) == 0)
                        {
                          while ((*(_WORD *)(v339 + 44) & 8) != 0)
                            uint64_t v339 = *(void *)(v339 + 8);
                        }
                        uint64_t v339 = *(void *)(v339 + 8);
                        if ((void *)v339 == v538) {
                          goto LABEL_570;
                        }
                      }
                      if (v538 != (void *)v339 && v64 != v339)
                      {
                        while (v339 != v101)
                        {
                          if (!v339 || (*(unsigned char *)v339 & 4) == 0)
                          {
                            while ((*(_WORD *)(v339 + 44) & 8) != 0)
                              uint64_t v339 = *(void *)(v339 + 8);
                          }
                          uint64_t v339 = *(void *)(v339 + 8);
                          if ((void *)v339 == v538 || v339 == v64) {
                            goto LABEL_570;
                          }
                        }
                        uint64_t v96 = v548;
                        sub_1CD5689A4(*(void *)(v548 + 256), IncompleteVirtualRegister, v101);
                        break;
                      }
                    }
                    goto LABEL_570;
                  }
                  ++v99;
                }
              }
              sub_1CD568A58(*(void *)(v96 + 256), IncompleteVirtualRegister, (llvm::MachineInstr *)v64, 0);
            }
LABEL_570:
            uint64_t v2 = v548;
            llvm::LiveVariables::removeVirtualRegistersKilled(*(void *)(v548 + 256), v564);
            unint64_t v61 = v552;
            if ((v49 & 0x5000000) == 0x5000000)
            {
              sub_1CD568B08(*(void *)(v548 + 256), v48, (llvm::MachineInstr *)v64, 0);
              sub_1CD568BB8(*(void *)(v548 + 256), v48, (uint64_t)v564);
            }
          }
          uint64_t v72 = *(void *)(v2 + 264);
          if (!v72) {
            goto LABEL_211;
          }
          unint64_t v73 = sub_1CB914C88(*(void *)(v72 + 288), v64, 0);
          uint64_t v74 = *(void *)(v2 + 264);
          uint64_t v75 = *(void *)(*(void *)(*(void *)(v74 + 288) + 392) + 16 * *((unsigned int *)v61 + 6));
          if (IncompleteVirtualRegister)
          {
            uint64_t v76 = IncompleteVirtualRegister & 0x7FFFFFFF;
            uint64_t v77 = *(unsigned int *)(v74 + 416);
            if (v76 >= v77) {
              sub_1CB9153B8(v74 + 408, v76 - v77 + 1, *(void *)(v74 + 424));
            }
            operator new();
          }
          uint64_t v109 = v48 & 0x7FFFFFFF;
          uint64_t v110 = (void *)(v74 + 408);
          uint64_t v111 = *(unsigned int *)(v74 + 416);
          if ((v48 & 0x7FFFFFFF) >= v111)
          {
            sub_1CB9153B8((uint64_t)v110, v109 - v111 + 1, *(void *)(v74 + 424));
LABEL_573:
            operator new();
          }
          uint64_t v112 = *(void *)(*v110 + 8 * v109);
          if (!v112) {
            goto LABEL_573;
          }
          unint64_t v113 = *(unsigned int *)(v112 + 8);
          unsigned int v114 = v113;
          uint64_t v115 = *(void *)v112 + 24 * v113;
          uint64_t v116 = *(void *)(v115 - 16);
          if ((~*(_DWORD *)(v115 - 16) & 6) == 0)
          {
            if (v113)
            {
              unint64_t v117 = v75 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v118 = (v75 >> 1) & 3;
              unsigned int v119 = *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) | v118;
              if (v119 < (*(_DWORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 24) | (v116 >> 1) & 3))
              {
                int v120 = *(void **)v112;
                unint64_t v121 = *(unsigned int *)(v112 + 8);
                do
                {
                  unsigned int v122 = v120;
                  unint64_t v123 = v121 >> 1;
                  uint64_t v124 = v120[3 * (v121 >> 1) + 1];
                  LODWORD(v124) = (v124 >> 1) & 3 | *(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v121 -= (v121 >> 1) + 1;
                  BOOL v125 = v119 >= v124;
                  if (v119 >= v124) {
                    unint64_t v126 = v123 + 1;
                  }
                  else {
                    unint64_t v126 = 0;
                  }
                  v120 += 3 * v126;
                  if (!v125) {
                    unint64_t v121 = v123;
                  }
                }
                while (v121);
                if (v120 != (void *)v115)
                {
                  if (((*v120 >> 1) & 3 | *(_DWORD *)((*v120 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v117 + 24) | v118)) {
                    uint64_t v127 = v122[3 * v126 + 2];
                  }
                  else {
                    uint64_t v127 = 0;
                  }
                  goto LABEL_169;
                }
              }
            }
            uint64_t v127 = 0;
            unint64_t v117 = v75 & 0xFFFFFFFFFFFFFFF8;
            if (v113)
            {
LABEL_169:
              unsigned int v137 = *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) | (v75 >> 1) & 3;
              int v138 = (uint64_t *)(*(void *)v112 + 24 * v113);
              if (v137 < (*(_DWORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 24) | (v116 >> 1) & 3))
              {
                int v138 = *(uint64_t **)v112;
                do
                {
                  unint64_t v139 = v113 >> 1;
                  uint64_t v140 = v138[3 * (v113 >> 1) + 1];
                  LODWORD(v140) = (v140 >> 1) & 3 | *(_DWORD *)((v140 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v113 -= (v113 >> 1) + 1;
                  BOOL v141 = v137 >= v140;
                  if (v137 >= v140) {
                    unint64_t v142 = v139 + 1;
                  }
                  else {
                    unint64_t v142 = 0;
                  }
                  v138 += 3 * v142;
                  if (!v141) {
                    unint64_t v113 = v139;
                  }
                }
                while (v113);
              }
            }
            else
            {
              int v138 = (uint64_t *)(*(void *)v112 + 24 * v113);
            }
            uint64_t v143 = v117 | 6;
            int v144 = (unsigned __int8 **)v138[1];
            if (*v138 == v75)
            {
              if (v144 == (unsigned __int8 **)v143)
              {
                if ((uint64_t *)v115 != v138 + 3)
                {
                  memmove(v138, v138 + 3, v115 - (void)(v138 + 3));
                  unsigned int v114 = *(_DWORD *)(v112 + 8);
                }
                *(_DWORD *)(v112 + 8) = v114 - 1;
              }
              else
              {
                *int v138 = v143;
              }
            }
            else
            {
              uint64_t v146 = v138[2];
              v138[1] = v75;
              if (v144 != (unsigned __int8 **)v143)
              {
                v558 = (unsigned __int8 **)(v117 | 6);
                v559 = v144;
                uint64_t v560 = v146;
                sub_1CC2FC960((uint64_t *)v112, (unint64_t)(v138 + 3), (unint64_t)&v558);
              }
            }
            unint64_t v158 = v73 & 0xFFFFFFFFFFFFFFF8 | 4;
            uint64_t v159 = *(void *)(v2 + 264) + 312;
            if (*(void *)(v112 + 96))
            {
              v558 = (unsigned __int8 **)v112;
              sub_1CC2F6AE4((uint64_t *)&v558, v158, v159, 0);
            }
            else
            {
              v558 = (unsigned __int8 **)v112;
              sub_1CC2F6F18((unint64_t **)&v558, v158, v159, 0);
            }
            llvm::LiveRange::removeValNo((uint64_t *)v112, v127);
LABEL_211:
            BOOL v161 = v564;
            if (*((_DWORD *)v564 + 10) != 1)
            {
              unsigned int v162 = 1;
              do
              {
                uint64_t v163 = *((void *)v161 + 4);
                unsigned int v164 = v162;
                uint64_t v165 = v163 + 32 * v162;
                if ((*(unsigned char *)(v165 + 3) & 0x10) == 0)
                {
                  int v166 = *(_DWORD *)(v165 + 4);
                  LODWORD(v558) = *(_DWORD *)(*(void *)(v163 + 32 * (v164 + 1) + 16) + 24);
                  HIDWORD(v558) = v166;
                  v167 = sub_1CC3E4DF8(v546, (int *)&v558);
                  --v167[2];
                  BOOL v161 = v564;
                }
                unsigned int v162 = v164 + 2;
              }
              while (v164 + 2 != *((_DWORD *)v161 + 10));
            }
            v558 = (unsigned __int8 **)v562;
            v559 = (unsigned __int8 **)v562;
            uint64_t v560 = 8;
            LODWORD(v561) = 0;
            if ((v549 - 1) < 2)
            {
LABEL_217:
              char v168 = v541;
              if (!v542) {
                char v168 = 1;
              }
              int v20 = v552;
              if (v168)
              {
                uint64_t v169 = *(void *)(v2 + 264);
                uint64_t v170 = v564;
                if (v169)
                {
                  unsigned int v171 = *(int32x2_t **)(v169 + 288);
                  int32x2_t v172 = v171[46];
                  uint64_t v173 = v171[48].u32[0];
                  if (!v173) {
                    goto LABEL_531;
                  }
                  LODWORD(v174) = (v173 - 1) & ((v564 >> 4) ^ (v564 >> 9));
                  uint64_t v175 = *(void *)&v172 + 16 * v174;
                  v176 = *(llvm::MachineInstr **)v175;
                  if (*(llvm::MachineInstr **)v175 != v564)
                  {
                    int v177 = 1;
                    while (v176 != (llvm::MachineInstr *)-4096)
                    {
                      int v178 = v174 + v177++;
                      uint64_t v174 = v178 & (v173 - 1);
                      v176 = *(llvm::MachineInstr **)(*(void *)&v172 + 16 * v174);
                      if (v176 == v564)
                      {
                        uint64_t v175 = *(void *)&v172 + 16 * v174;
                        goto LABEL_532;
                      }
                    }
LABEL_531:
                    uint64_t v175 = *(void *)&v172 + 16 * v173;
                  }
LABEL_532:
                  if (v175 != *(void *)&v172 + 16 * v173)
                  {
                    unint64_t v334 = *(void *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)uint64_t v175 = -8192;
                    v171[47] = vadd_s32(v171[47], (int32x2_t)0x1FFFFFFFFLL);
                    *(void *)(v334 + 16) = 0;
                    uint64_t v170 = v564;
                  }
                }
                unsigned int v335 = (void *)*((void *)v170 + 4);
                if (v335)
                {
                  uint64_t v336 = *((unsigned __int8 *)v170 + 47);
                  uint64_t v337 = (uint64_t *)(v540 + 232);
                  if (*(_DWORD *)(v540 + 240) <= v336) {
                    sub_1CC34BDE0(v540 + 232, v336 + 1);
                  }
                  uint64_t v338 = *v337;
                  *unsigned int v335 = *(void *)(*v337 + 8 * v336);
                  *(void *)(v338 + 8 * v336) = v335;
                }
                *(void *)uint64_t v170 = *(void *)(v540 + 224);
                *(void *)(v540 + 224) = v170;
              }
              if (v559 != v558) {
                free(v559);
              }
              unint64_t v27 = v539;
              continue;
            }
            uint64_t v179 = (v549 - 1) >> 1;
            int v180 = v541;
            if (!IncompleteVirtualRegister) {
              int v180 = 1;
            }
            int v550 = v180;
            unint64_t v537 = IncompleteVirtualRegister & 0x7FFFFFFF;
            int v181 = v179;
            while (2)
            {
              --v181;
              int v182 = 1;
              uint64_t v183 = *((void *)v564 + 4);
              uint64_t v184 = (unsigned int *)(v183 + 32 * ((2 * v181) | 1u));
              unsigned int v186 = *v184;
              v185 = (llvm::MachineBasicBlock *)v184[1];
              if ((*v184 & 0x10000000) == 0) {
                int v182 = sub_1CC3E5338((int)v185, *(void *)(*(void *)(v2 + 248) + 24), *(void *)(*(void *)(v2 + 248) + 272));
              }
              uint64_t v187 = *(void *)(v183 + 32 * (2 * v181 + 2) + 16);
              v188 = v559;
              uint64_t v189 = HIDWORD(v560);
              if (v559 != v558)
              {
                unsigned int v193 = v560;
                goto LABEL_243;
              }
              if (!HIDWORD(v560)) {
                goto LABEL_240;
              }
              v190 = 0;
              uint64_t v191 = 8 * HIDWORD(v560);
              unsigned int v192 = v559;
              do
              {
                if (*v192 == (unsigned __int8 *)v187) {
                  goto LABEL_397;
                }
                if (*v192 == (unsigned __int8 *)-2) {
                  v190 = (uint64_t *)v192;
                }
                ++v192;
                v191 -= 8;
              }
              while (v191);
              if (v190)
              {
                uint64_t *v190 = v187;
                LODWORD(v561) = v561 - 1;
              }
              else
              {
LABEL_240:
                unsigned int v193 = v560;
                if (HIDWORD(v560) < v560)
                {
                  ++HIDWORD(v560);
                  v559[v189] = (unsigned __int8 *)v187;
                  break;
                }
LABEL_243:
                if (3 * v193 <= 4 * (HIDWORD(v560) - (int)v561))
                {
                  if (v193 >= 0x40) {
                    v193 *= 2;
                  }
                  else {
                    unsigned int v193 = 128;
                  }
                }
                else if (v193 - HIDWORD(v560) >= v193 >> 3)
                {
                  goto LABEL_245;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v558, v193);
                unsigned int v193 = v560;
                v188 = v559;
LABEL_245:
                unsigned int v194 = v193 - 1;
                unsigned int v195 = (v193 - 1) & ((v187 >> 4) ^ (v187 >> 9));
                int v196 = &v188[v195];
                BOOL v197 = *v196;
                if (*v196 != (unsigned __int8 *)-1)
                {
                  unsigned int v198 = 0;
                  int v199 = 1;
                  while (v197 != (unsigned __int8 *)v187)
                  {
                    if (v198) {
                      BOOL v200 = 0;
                    }
                    else {
                      BOOL v200 = v197 == (unsigned __int8 *)-2;
                    }
                    if (v200) {
                      unsigned int v198 = (uint64_t *)v196;
                    }
                    unsigned int v201 = v195 + v199++;
                    unsigned int v195 = v201 & v194;
                    int v196 = &v188[v201 & v194];
                    BOOL v197 = *v196;
                    if (*v196 == (unsigned __int8 *)-1) {
                      goto LABEL_257;
                    }
                  }
                  goto LABEL_397;
                }
                unsigned int v198 = 0;
LABEL_257:
                if (v198) {
                  v202 = v198;
                }
                else {
                  v202 = (uint64_t *)v196;
                }
                if (*v202 == v187)
                {
LABEL_397:
                  BOOL v262 = v179-- <= 1;
                  if (v262) {
                    goto LABEL_217;
                  }
                  continue;
                }
                if (*v202 == -2) {
                  LODWORD(v561) = v561 - 1;
                }
                else {
                  ++HIDWORD(v560);
                }
                uint64_t *v202 = v187;
              }
              break;
            }
            uint64_t v203 = *(void *)(v2 + 248);
            if ((v185 & 0x80000000) != 0) {
              unsigned int v204 = (uint64_t *)(*(void *)(v203 + 24) + 16 * (v185 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v204 = (uint64_t *)(*(void *)(v203 + 272) + 8 * (void)v185);
            }
            uint64_t v205 = *v204;
            if (v205)
            {
              if ((*(unsigned char *)(v205 + 3) & 1) != 0
                || (uint64_t v205 = *(void *)(v205 + 24)) != 0 && (*(unsigned char *)(v205 + 3) & 1) != 0)
              {
                uint64_t v206 = *(void *)(v205 + 8);
                if (v206)
                {
                  uint64_t v207 = *(void *)(*(void *)(v206 + 16) + 8);
                  if ((*(_WORD *)(v206 + 44) & 0xC) != 0 && (*(_WORD *)(v206 + 44) & 4) == 0)
                  {
                    uint64_t v317 = *(void *)(v205 + 8);
                    if ((v207 & 0x200) != 0) {
                      goto LABEL_493;
                    }
                    while ((*(_WORD *)(v317 + 44) & 8) != 0)
                    {
                      uint64_t v317 = *(void *)(v317 + 8);
                      if ((*(unsigned char *)(*(void *)(v317 + 16) + 9) & 2) != 0) {
                        goto LABEL_493;
                      }
                    }
                  }
                  else
                  {
                    if ((v207 & 0x200) == 0) {
                      goto LABEL_274;
                    }
LABEL_493:
                    if ((*(unsigned int (**)(void *, uint64_t))(*v544 + 424))(v544, v206))
                    {
                      llvm::MachineOperand::setReg(*(void *)(v206 + 32), v542);
                      uint64_t v318 = *(void *)(v2 + 256);
                      if (v318)
                      {
                        unint64_t v319 = v185 & 0x7FFFFFFF;
                        unint64_t v320 = *(unsigned int *)(v318 + 256);
                        uint64_t v321 = *(void *)(v2 + 256);
                        if (v319 >= v320)
                        {
                          sub_1CD520A8C((uint64_t *)(v318 + 248), v319 + 1, v318 + 264);
                          uint64_t v321 = *(void *)(v2 + 256);
                          unint64_t v320 = *(unsigned int *)(v321 + 256);
                        }
                        uint64_t v322 = *(void *)(v318 + 248);
                        v323 = (void *)(v321 + 248);
                        if (v537 >= v320) {
                          sub_1CD520A8C((uint64_t *)(v321 + 248), (v542 & 0x7FFFFFFF) + 1, v321 + 264);
                        }
                        unsigned int v324 = (uint64_t *)(v322 + 56 * v319);
                        BOOL v325 = (uint64_t *)(*v323 + 56 * v537);
                        sub_1CBF831E8(v325, v324);
                        v325[3] = v325[1];
                        if (v324[2])
                        {
                          uint64_t v327 = *v324;
                          unsigned int v326 = (uint64_t *)v324[1];
                          uint64_t v328 = *v326;
                          *(void *)(v328 + 8) = *(void *)(*v324 + 8);
                          **(void **)(v327 + 8) = v328;
                          v324[2] = 0;
                          if (v326 != v324)
                          {
                            do
                            {
                              uint64_t v329 = (uint64_t *)v326[1];
                              operator delete(v326);
                              unsigned int v326 = v329;
                            }
                            while (v329 != v324);
                          }
                        }
                      }
                      goto LABEL_397;
                    }
                  }
                }
              }
            }
LABEL_274:
            PHICopyInsertPoint = (void *)llvm::findPHICopyInsertPoint((llvm *)v187, v552, v185);
            if (v550)
            {
              uint64_t MachineInstr = 0;
              goto LABEL_276;
            }
            if (!v182)
            {
              v565[0] = 0;
              uint64_t MachineInstr = (*(uint64_t (**)(void *, uint64_t, void *, unsigned __int8 **, llvm::MachineBasicBlock *, void, void))(*v544 + 1160))(v544, v187, PHICopyInsertPoint, v565, v185, (v186 >> 8) & 0xFFF, v542);
              if (!v565[0]) {
                goto LABEL_276;
              }
              int v237 = *v565[0];
              if ((v237 - 4) > 0x1E)
              {
                if ((v237 - 3) >= 0xFFFFFFFE) {
                  uint64_t v240 = v565[0];
                }
                else {
                  uint64_t v240 = 0;
                }
                if ((v237 - 3) < 0xFFFFFFFE)
                {
                  if (v237 == 3) {
                    *((void *)v565[0] + 1) = 0;
                  }
                  goto LABEL_276;
                }
                unint64_t v239 = (unint64_t)(v240 + 8);
              }
              else
              {
                if ((v565[0][1] & 0x7F) != 2 && !*((_DWORD *)v565[0] + 3)) {
                  goto LABEL_276;
                }
                uint64_t v238 = *((void *)v565[0] + 2);
                if ((v238 & 4) == 0) {
                  goto LABEL_276;
                }
                unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFF8;
                if (!v239) {
                  goto LABEL_276;
                }
              }
              v554 = v565;
              sub_1CC5FA668(v239 + 16, &v554);
              goto LABEL_276;
            }
            uint64_t v218 = v544[1];
            BOOL v219 = *(llvm::MachineFunction **)(v187 + 32);
            unsigned int v220 = (unsigned __int8 *)*((void *)v564 + 7);
            v565[0] = v220;
            if (v220) {
              llvm::MetadataTracking::track((uint64_t)v565, v220, 2);
            }
            uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v219, v218 + 480, v565, 0);
            if (v565[0])
            {
              int v330 = *v565[0];
              if ((v330 - 4) > 0x1E)
              {
                if ((v330 - 3) >= 0xFFFFFFFE) {
                  unsigned int v333 = v565[0];
                }
                else {
                  unsigned int v333 = 0;
                }
                if ((v330 - 3) < 0xFFFFFFFE)
                {
                  if (v330 == 3) {
                    *((void *)v565[0] + 1) = 0;
                  }
                  goto LABEL_312;
                }
                unint64_t v332 = (unint64_t)(v333 + 8);
              }
              else
              {
                if ((v565[0][1] & 0x7F) != 2 && !*((_DWORD *)v565[0] + 3)) {
                  goto LABEL_312;
                }
                uint64_t v331 = *((void *)v565[0] + 2);
                if ((v331 & 4) == 0) {
                  goto LABEL_312;
                }
                unint64_t v332 = v331 & 0xFFFFFFFFFFFFFFF8;
                if (!v332) {
                  goto LABEL_312;
                }
              }
              v554 = v565;
              sub_1CC5FA668(v332 + 16, &v554);
            }
LABEL_312:
            uint64_t v221 = *(void *)(v187 + 40);
            *(void *)(MachineInstr + 24) = v221;
            uint64_t v222 = *(void *)(v221 + 32);
            uint64_t v223 = *(unsigned int *)(MachineInstr + 40);
            if (v223)
            {
              uint64_t v249 = *(void *)(MachineInstr + 32);
              uint64_t v250 = *(void *)(v222 + 40);
              uint64_t v251 = 32 * v223;
              do
              {
                if (!*(unsigned char *)v249)
                {
                  uint64_t v252 = *(unsigned int *)(v249 + 4);
                  if ((int)v252 >= 0) {
                    BOOL v253 = (uint64_t *)(*(void *)(v250 + 272) + 8 * v252);
                  }
                  else {
                    BOOL v253 = (uint64_t *)(*(void *)(v250 + 24) + 16 * (v252 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v254 = *v253;
                  if (*v253)
                  {
                    uint64_t v255 = *(void *)(v254 + 16);
                    *(void *)(v254 + 16) = v249;
                    *(void *)(v249 + 16) = v255;
                    if (*(unsigned char *)(v249 + 3))
                    {
                      *(void *)(v249 + 24) = v254;
                    }
                    else
                    {
                      *(void *)(v249 + 24) = 0;
                      BOOL v253 = (uint64_t *)(v255 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v249 + 16) = v249;
                    *(void *)(v249 + 24) = 0;
                  }
                  *BOOL v253 = v249;
                }
                v249 += 32;
                v251 -= 32;
              }
              while (v251);
            }
            uint64_t v224 = *(void *)(v222 + 728);
            if (v224) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v224 + 24))(v224, MachineInstr);
            }
            unint64_t v225 = *PHICopyInsertPoint & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t MachineInstr = v225 | *(void *)MachineInstr & 7;
            *(void *)(MachineInstr + 8) = PHICopyInsertPoint;
            *(void *)(v225 + 8) = MachineInstr;
            void *PHICopyInsertPoint = *PHICopyInsertPoint & 7 | MachineInstr;
            long long v555 = 0uLL;
            unint64_t v556 = 0;
            LODWORD(v554) = 0x1000000;
            HIDWORD(v554) = v542;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v219, (const llvm::MachineOperand *)&v554);
            uint64_t v226 = *(void *)(v548 + 248);
            if ((v185 & 0x80000000) != 0) {
              uint64_t v227 = (uint64_t *)(*(void *)(v226 + 24) + 16 * (v185 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v227 = (uint64_t *)(*(void *)(v226 + 272) + 8 * (void)v185);
            }
            uint64_t v228 = *v227;
            if (!v228
              || (*(unsigned char *)(v228 + 3) & 1) == 0
              && ((uint64_t v228 = *(void *)(v228 + 24)) == 0 || (*(unsigned char *)(v228 + 3) & 1) == 0)
              || (uint64_t v229 = *(void *)(v228 + 8)) == 0
              || **(_WORD **)(v229 + 16) != 10)
            {
LABEL_392:
              uint64_t v2 = v548;
              goto LABEL_393;
            }
            uint64_t v230 = v548;
            uint64_t v231 = *(void *)(v548 + 304);
            uint64_t v232 = *(unsigned int *)(v548 + 316);
            if (v231 == *(void *)(v548 + 296))
            {
              if (v232)
              {
                v233 = 0;
                uint64_t v234 = 8 * v232;
                v235 = *(void **)(v548 + 304);
                while (*v235 != v229)
                {
                  if (*v235 == -2) {
                    v233 = v235;
                  }
                  ++v235;
                  v234 -= 8;
                  if (!v234)
                  {
                    if (!v233) {
                      goto LABEL_329;
                    }
                    void *v233 = v229;
                    uint64_t v2 = v548;
                    --*(_DWORD *)(v548 + 320);
                    goto LABEL_276;
                  }
                }
LABEL_382:
                uint64_t v2 = v548;
LABEL_276:
                if (*(void *)(v2 + 256)) {
                  char v211 = v182;
                }
                else {
                  char v211 = 1;
                }
                if ((v211 & 1) == 0)
                {
                  LODWORD(v554) = *(_DWORD *)(v187 + 24);
                  HIDWORD(v554) = v185;
                  if (!sub_1CC3E4DF8(v546, (int *)&v554)[2]
                    && !llvm::LiveVariables::isLiveOut(*(void *)(v2 + 256), (int)v185, v187))
                  {
                    uint64_t v212 = v187 + 48;
                    unsigned int v213 = PHICopyInsertPoint;
                    if ((void *)(v187 + 48) != PHICopyInsertPoint)
                    {
                      unsigned int v213 = (void *)(v187 + 48);
                      uint64_t v214 = (uint64_t)PHICopyInsertPoint;
                      do
                      {
                        if (llvm::MachineInstr::findRegisterUseOperandIdx(v214, v185, 0, 0) != -1)unsigned int v213 = (void *)v214; {
                        if (!v214 || (*(unsigned char *)v214 & 4) == 0)
                        }
                        {
                          while ((*(_WORD *)(v214 + 44) & 8) != 0)
                            uint64_t v214 = *(void *)(v214 + 8);
                        }
                        uint64_t v214 = *(void *)(v214 + 8);
                      }
                      while (v214 != v212);
                    }
                    int v215 = v550;
                    if (v213 == (void *)v212)
                    {
                      unint64_t v216 = MachineInstr;
                    }
                    else
                    {
                      int v215 = 0;
                      unint64_t v216 = (unint64_t)v213;
                    }
                    if (v215 == 1)
                    {
                      v217 = *(void **)(v187 + 56);
                      unint64_t v216 = (unint64_t)PHICopyInsertPoint;
                      if (v217 != PHICopyInsertPoint)
                      {
                        unint64_t v216 = (unint64_t)PHICopyInsertPoint;
                        do
                        {
                          unint64_t v216 = *(void *)v216 & 0xFFFFFFFFFFFFFFF8;
                          if (!v216 || (*(unsigned char *)v216 & 4) == 0)
                          {
                            while ((*(_WORD *)(v216 + 44) & 4) != 0)
                              unint64_t v216 = *(void *)v216 & 0xFFFFFFFFFFFFFFF8;
                          }
                          if (**(unsigned __int16 **)(v216 + 16) - 13 > 4)
                          {
                            if (llvm::MachineInstr::findRegisterUseOperandIdx(v216, v185, 0, 0) != -1)break; {
                            v217 = *(void **)(v187 + 56);
                            }
                          }
                        }
                        while ((void *)v216 != v217);
                      }
                    }
                    sub_1CD568A58(*(void *)(v548 + 256), v185, (llvm::MachineInstr *)v216, 0);
                    unsigned int v257 = *(_DWORD *)(v187 + 24);
                    uint64_t v258 = *(void *)(v548 + 256);
                    v259 = (void *)(v258 + 248);
                    unint64_t v260 = v185 & 0x7FFFFFFF;
                    if (v260 >= *(unsigned int *)(v258 + 256))
                    {
                      unsigned int v530 = *(_DWORD *)(v187 + 24);
                      sub_1CD520A8C((uint64_t *)(v258 + 248), v260 + 1, v258 + 264);
                      unsigned int v257 = v530;
                    }
                    sub_1CC3E53D0((uint64_t *)(*v259 + 56 * v260), v257);
                    goto LABEL_392;
                  }
                }
LABEL_393:
                uint64_t v261 = *(void *)(v2 + 264);
                if (!v261) {
                  goto LABEL_397;
                }
                if (MachineInstr)
                {
                  sub_1CB914C88(*(void *)(v261 + 288), MachineInstr, 0);
                  llvm::LiveIntervals::addSegmentToEndOfBlock(*(void *)(v2 + 264), v542);
                }
                if (v182) {
                  goto LABEL_397;
                }
                LODWORD(v554) = *(_DWORD *)(v187 + 24);
                HIDWORD(v554) = v185;
                if (sub_1CC3E4DF8(v546, (int *)&v554)[2]) {
                  goto LABEL_397;
                }
                uint64_t v263 = *(void *)(v2 + 264);
                uint64_t v264 = (void *)(v263 + 408);
                unint64_t v265 = *(unsigned int *)(v263 + 416);
                BOOL v125 = (v185 & 0x7FFFFFFF) >= v265;
                unint64_t v266 = (v185 & 0x7FFFFFFF) - v265;
                if (v125)
                {
                  sub_1CB9153B8((uint64_t)v264, v266 + 1, *(void *)(v263 + 424));
LABEL_507:
                  operator new();
                }
                v267 = *(uint64_t **)(*v264 + 8 * (v185 & 0x7FFFFFFF));
                if (!v267) {
                  goto LABEL_507;
                }
                uint64_t v268 = *(void *)(v187 + 88);
                uint64_t v269 = *(void *)(v187 + 96);
                if (v268 != v269)
                {
                  unsigned int v270 = *((_DWORD *)v267 + 2);
                  uint64_t v271 = *v267 + 24 * v270;
                  do
                  {
                    uint64_t v272 = *(void *)(*(void *)(*(void *)(*(void *)(v2 + 264) + 288) + 392)
                                     + 16 * *(unsigned int *)(*(void *)v268 + 24));
                    unsigned int v273 = (void *)(*v267 + 24 * v270);
                    if (v270)
                    {
                      unsigned int v274 = *(_DWORD *)((v272 & 0xFFFFFFFFFFFFFFF8) + 24) | (v272 >> 1) & 3;
                      unsigned int v273 = (void *)(*v267 + 24 * v270);
                      if (v274 < ((*(void *)(v271 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v271 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 24)))
                      {
                        unsigned int v273 = (void *)*v267;
                        unint64_t v275 = *((unsigned int *)v267 + 2);
                        do
                        {
                          unint64_t v276 = v275 >> 1;
                          uint64_t v277 = v273[3 * (v275 >> 1) + 1];
                          LODWORD(v277) = (v277 >> 1) & 3 | *(_DWORD *)((v277 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v275 -= (v275 >> 1) + 1;
                          BOOL v278 = v274 >= v277;
                          if (v274 >= v277) {
                            unint64_t v279 = v276 + 1;
                          }
                          else {
                            unint64_t v279 = 0;
                          }
                          v273 += 3 * v279;
                          if (!v278) {
                            unint64_t v275 = v276;
                          }
                        }
                        while (v275);
                      }
                    }
                    if (v273 != (void *)v271
                      && ((*v273 >> 1) & 3 | *(_DWORD *)((*v273 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v272 & 0xFFFFFFFFFFFFFFF8) + 24) | (v272 >> 1) & 3))
                    {
                      uint64_t v280 = v273[2];
                      if (v280)
                      {
                        if (*(void *)(v280 + 8) != v272) {
                          goto LABEL_397;
                        }
                      }
                    }
                    v268 += 8;
                  }
                  while (v268 != v269);
                }
                uint64_t v281 = v187 + 48;
                if ((void *)(v187 + 48) == PHICopyInsertPoint)
                {
                  unint64_t v283 = (unint64_t)PHICopyInsertPoint;
                }
                else
                {
                  uint64_t v282 = (uint64_t)PHICopyInsertPoint;
                  unint64_t v283 = v187 + 48;
                  do
                  {
                    if (llvm::MachineInstr::findRegisterUseOperandIdx(v282, v185, 0, 0) != -1) {
                      unint64_t v283 = v282;
                    }
                    if (!v282 || (*(unsigned char *)v282 & 4) == 0)
                    {
                      while ((*(_WORD *)(v282 + 44) & 8) != 0)
                        uint64_t v282 = *(void *)(v282 + 8);
                    }
                    uint64_t v282 = *(void *)(v282 + 8);
                  }
                  while (v282 != v281);
                }
                uint64_t v2 = v548;
                if (v283 == v281)
                {
                  if (v550)
                  {
                    int v298 = *(void **)(v187 + 56);
                    unint64_t v283 = (unint64_t)PHICopyInsertPoint;
                    if (v298 != PHICopyInsertPoint)
                    {
                      do
                      {
                        unint64_t v283 = *(void *)v283 & 0xFFFFFFFFFFFFFFF8;
                        if (!v283 || (*(unsigned char *)v283 & 4) == 0)
                        {
                          while ((*(_WORD *)(v283 + 44) & 4) != 0)
                            unint64_t v283 = *(void *)v283 & 0xFFFFFFFFFFFFFFF8;
                        }
                        if (**(unsigned __int16 **)(v283 + 16) - 13 > 4)
                        {
                          if (llvm::MachineInstr::findRegisterUseOperandIdx(v283, v185, 0, 0) != -1)break; {
                          int v298 = *(void **)(v187 + 56);
                          }
                        }
                      }
                      while ((void *)v283 != v298);
                    }
                  }
                  else
                  {
                    unint64_t v283 = *PHICopyInsertPoint & 0xFFFFFFFFFFFFFFF8;
                    if (!v283 || (*(unsigned char *)v283 & 4) == 0)
                    {
                      while ((*(_WORD *)(v283 + 44) & 4) != 0)
                        unint64_t v283 = *(void *)v283 & 0xFFFFFFFFFFFFFFF8;
                    }
                  }
                }
                uint64_t v284 = *(void *)(*(void *)(v548 + 264) + 288);
                __int16 v285 = *(_WORD *)(v283 + 44);
                unint64_t v286 = v283;
                if ((v285 & 4) != 0)
                {
                  do
                    unint64_t v286 = *(void *)v286 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v286 + 44) & 4) != 0);
                }
                if ((v285 & 8) != 0)
                {
                  do
                    unint64_t v283 = *(void *)(v283 + 8);
                  while ((*(_WORD *)(v283 + 44) & 8) != 0);
                }
                uint64_t v287 = *(void *)(v283 + 8);
                if (v286 != v287)
                {
                  while (1)
                  {
                    unsigned int v288 = **(unsigned __int16 **)(v286 + 16);
                    BOOL v262 = v288 > 0x17;
                    int v289 = (1 << v288) & 0x83E000;
                    if (v262 || v289 == 0) {
                      break;
                    }
                    unint64_t v286 = *(void *)(v286 + 8);
                    if (v286 == v287)
                    {
                      unint64_t v286 = *(void *)(v283 + 8);
                      break;
                    }
                  }
                }
                uint64_t v291 = *(void *)(v284 + 368);
                uint64_t v292 = *(unsigned int *)(v284 + 384);
                if (v292)
                {
                  LODWORD(v293) = ((v286 >> 4) ^ (v286 >> 9)) & (v292 - 1);
                  BOOL v294 = (uint64_t *)(v291 + 16 * v293);
                  uint64_t v295 = *v294;
                  if (v286 != *v294)
                  {
                    int v296 = 1;
                    while (v295 != -4096)
                    {
                      int v297 = v293 + v296++;
                      uint64_t v293 = v297 & (v292 - 1);
                      uint64_t v295 = *(void *)(v291 + 16 * v293);
                      if (v286 == v295)
                      {
                        BOOL v294 = (uint64_t *)(v291 + 16 * v293);
                        goto LABEL_466;
                      }
                    }
                    goto LABEL_465;
                  }
                }
                else
                {
LABEL_465:
                  BOOL v294 = (uint64_t *)(v291 + 16 * v292);
                }
LABEL_466:
                unint64_t v299 = v294[1] & 0xFFFFFFFFFFFFFFF8;
                v300 = *(unsigned __int8 **)(*(void *)(v284 + 392) + 16 * *(unsigned int *)(v187 + 24) + 8);
                unsigned int v301 = *((_DWORD *)v267 + 2);
                uint64_t v302 = *v267;
                if (v301)
                {
                  uint64_t v303 = *(void *)(v302 + 24 * v301 - 16);
                  unsigned int v304 = *(_DWORD *)(v299 + 24) | 2;
                  unsigned int v305 = (v303 >> 1) & 3 | *(_DWORD *)((v303 & 0xFFFFFFFFFFFFFFF8) + 24);
                  unsigned int v306 = *((_DWORD *)v267 + 2);
                  uint64_t v307 = (unsigned __int8 **)*v267;
                  unint64_t v308 = v306;
                  if (v304 < v305)
                  {
                    do
                    {
                      unint64_t v309 = v308 >> 1;
                      uint64_t v310 = v307[3 * (v308 >> 1) + 1];
                      LODWORD(v310) = (v310 >> 1) & 3 | *(_DWORD *)(((unint64_t)v310 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 24);
                      v308 -= (v308 >> 1) + 1;
                      BOOL v311 = v304 >= v310;
                      if (v304 >= v310) {
                        unint64_t v312 = v309 + 1;
                      }
                      else {
                        unint64_t v312 = 0;
                      }
                      v307 += 3 * v312;
                      if (!v311) {
                        unint64_t v308 = v309;
                      }
                    }
                    while (v308);
                    goto LABEL_477;
                  }
                }
                else
                {
                  unsigned int v306 = 0;
                }
                uint64_t v307 = (unsigned __int8 **)(v302 + 24 * v306);
LABEL_477:
                uint64_t v313 = v299 | 4;
                v314 = v307[1];
                if (*v307 == (unsigned __int8 *)v313)
                {
                  if (v314 == v300)
                  {
                    v316 = (char *)(v302 + 24 * v301);
                    if (v316 != (char *)(v307 + 3))
                    {
                      memmove(v307, v307 + 3, v316 - (char *)(v307 + 3));
                      unsigned int v301 = *((_DWORD *)v267 + 2);
                    }
                    *((_DWORD *)v267 + 2) = v301 - 1;
                  }
                  else
                  {
                    *uint64_t v307 = v300;
                  }
                }
                else
                {
                  unsigned int v315 = v307[2];
                  v307[1] = (unsigned __int8 *)v313;
                  if (v314 != v300)
                  {
                    v554 = (unsigned __int8 **)v300;
                    *(void *)&long long v555 = v314;
                    *((void *)&v555 + 1) = v315;
                    sub_1CC2FC960(v267, (unint64_t)(v307 + 3), (unint64_t)&v554);
                  }
                }
                goto LABEL_397;
              }
LABEL_329:
              uint64_t v230 = v548;
              unsigned int v236 = *(_DWORD *)(v548 + 312);
              if (v232 < v236)
              {
                *(_DWORD *)(v548 + 316) = v232 + 1;
                *(void *)(v231 + 8 * v232) = v229;
                uint64_t v2 = v548;
                goto LABEL_276;
              }
            }
            else
            {
              unsigned int v236 = *(_DWORD *)(v548 + 312);
            }
            if (3 * v236 <= 4 * ((int)v232 - *(_DWORD *)(v230 + 320)))
            {
              if (v236 >= 0x40) {
                v236 *= 2;
              }
              else {
                unsigned int v236 = 128;
              }
            }
            else if (v236 - v232 >= v236 >> 3)
            {
              goto LABEL_348;
            }
            llvm::SmallPtrSetImplBase::Grow(v531, v236);
            unsigned int v236 = *(_DWORD *)(v548 + 312);
            uint64_t v231 = *(void *)(v548 + 304);
LABEL_348:
            unsigned int v241 = v236 - 1;
            unsigned int v242 = (v236 - 1) & ((v229 >> 4) ^ (v229 >> 9));
            uint64_t v243 = (void *)(v231 + 8 * v242);
            uint64_t v244 = *v243;
            if (*v243 == -1)
            {
              int v245 = 0;
LABEL_375:
              if (v245) {
                int v256 = v245;
              }
              else {
                int v256 = v243;
              }
              if (*v256 != v229)
              {
                if (*v256 == -2) {
                  --*(_DWORD *)(v548 + 320);
                }
                else {
                  ++*(_DWORD *)(v548 + 316);
                }
                *int v256 = v229;
              }
            }
            else
            {
              int v245 = 0;
              int v246 = 1;
              while (v244 != v229)
              {
                if (v245) {
                  BOOL v247 = 0;
                }
                else {
                  BOOL v247 = v244 == -2;
                }
                if (v247) {
                  int v245 = v243;
                }
                unsigned int v248 = v242 + v246++;
                unsigned int v242 = v248 & v241;
                uint64_t v243 = (void *)(v231 + 8 * (v248 & v241));
                uint64_t v244 = *v243;
                if (*v243 == -1) {
                  goto LABEL_375;
                }
              }
            }
            goto LABEL_382;
          }
          if (v113)
          {
            unsigned int v128 = *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) | (v75 >> 1) & 3;
            __int16 v129 = (uint64_t *)(*(void *)v112 + 24 * v113);
            if (v128 < (*(_DWORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 24) | (v116 >> 1) & 3))
            {
              __int16 v129 = *(uint64_t **)v112;
              do
              {
                unint64_t v130 = v113 >> 1;
                uint64_t v131 = v129[3 * (v113 >> 1) + 1];
                LODWORD(v131) = (v131 >> 1) & 3 | *(_DWORD *)((v131 & 0xFFFFFFFFFFFFFFF8) + 24);
                v113 -= (v113 >> 1) + 1;
                BOOL v132 = v128 >= v131;
                if (v128 >= v131) {
                  unint64_t v133 = v130 + 1;
                }
                else {
                  unint64_t v133 = 0;
                }
                v129 += 3 * v133;
                if (!v132) {
                  unint64_t v113 = v130;
                }
              }
              while (v113);
            }
          }
          else
          {
            __int16 v129 = *(uint64_t **)v112;
          }
          unint64_t v134 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v135 = v134 | 4;
          uint64_t v136 = (unsigned __int8 **)v129[1];
          if (*v129 == v75)
          {
            if (v136 == (unsigned __int8 **)v135)
            {
              if ((uint64_t *)v115 != v129 + 3)
              {
                memmove(v129, v129 + 3, v115 - (void)(v129 + 3));
                unsigned int v114 = *(_DWORD *)(v112 + 8);
              }
              *(_DWORD *)(v112 + 8) = --v114;
            }
            else
            {
              *__int16 v129 = v135;
            }
          }
          else
          {
            uint64_t v145 = v129[2];
            v129[1] = v75;
            if (v136 != (unsigned __int8 **)v135)
            {
              v558 = (unsigned __int8 **)(v134 | 4);
              v559 = v136;
              uint64_t v560 = v145;
              sub_1CC2FC960((uint64_t *)v112, (unint64_t)(v129 + 3), (unint64_t)&v558);
              unsigned int v114 = *(_DWORD *)(v112 + 8);
            }
          }
          uint64_t v147 = *(void *)v112;
          if (v114)
          {
            unint64_t v148 = v114;
            uint64_t v149 = *(void *)(v147 + 24 * v114 - 16);
            unsigned int v150 = *(_DWORD *)(v134 + 24) | 2;
            unsigned int v151 = (v149 >> 1) & 3 | *(_DWORD *)((v149 & 0xFFFFFFFFFFFFFFF8) + 24);
            v152 = *(uint64_t **)v112;
            unint64_t v153 = v148;
            if (v150 < v151)
            {
              do
              {
                unint64_t v154 = v153 >> 1;
                uint64_t v155 = v152[3 * (v153 >> 1) + 1];
                LODWORD(v155) = (v155 >> 1) & 3 | *(_DWORD *)((v155 & 0xFFFFFFFFFFFFFFF8) + 24);
                v153 -= (v153 >> 1) + 1;
                BOOL v156 = v150 >= v155;
                if (v150 >= v155) {
                  unint64_t v157 = v154 + 1;
                }
                else {
                  unint64_t v157 = 0;
                }
                v152 += 3 * v157;
                if (!v156) {
                  unint64_t v153 = v154;
                }
              }
              while (v153);
              goto LABEL_207;
            }
          }
          else
          {
            LODWORD(v148) = 0;
          }
          v152 = (uint64_t *)(v147 + 24 * v148);
LABEL_207:
          int v160 = (uint64_t *)(v147 + 24 * v148);
          if (v152 == v160
            || ((*v152 >> 1) & 3 | *(_DWORD *)((*v152 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v134 + 24) | 2u))
          {
            v152 = v160;
          }
          *(void *)(v152[2] + 8) = v135;
          goto LABEL_211;
        }
        break;
      }
LABEL_82:
      uint64_t v60 = v544[1];
      unint64_t v61 = v552;
      uint64_t v62 = (llvm::MachineFunction *)*((void *)v552 + 4);
      uint64_t v63 = (unsigned __int8 *)*((void *)v50 + 7);
      v554 = (unsigned __int8 **)v63;
      if (v63) {
        llvm::MetadataTracking::track((uint64_t)&v554, v63, 2);
      }
      uint64_t v64 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v62, v60 + 480, (unsigned __int8 **)&v554, 0);
      if (v554)
      {
        int v344 = *(unsigned __int8 *)v554;
        if ((v344 - 4) > 0x1E)
        {
          if ((v344 - 3) >= 0xFFFFFFFE) {
            uint64_t v347 = (unsigned __int8 *)v554;
          }
          else {
            uint64_t v347 = 0;
          }
          if ((v344 - 3) < 0xFFFFFFFE)
          {
            unint64_t v61 = v552;
            if (v344 == 3) {
              v554[1] = 0;
            }
            goto LABEL_85;
          }
          unint64_t v346 = (unint64_t)(v347 + 8);
        }
        else
        {
          unint64_t v61 = v552;
          if ((*((unsigned char *)v554 + 1) & 0x7F) != 2 && !*((_DWORD *)v554 + 3)) {
            goto LABEL_85;
          }
          unint64_t v345 = (unint64_t)v554[2];
          if ((v345 & 4) == 0) {
            goto LABEL_85;
          }
          unint64_t v346 = v345 & 0xFFFFFFFFFFFFFFF8;
          if (!v346) {
            goto LABEL_85;
          }
        }
        v558 = (unsigned __int8 **)&v554;
        sub_1CC5FA668(v346 + 16, &v558);
        unint64_t v61 = v552;
      }
LABEL_85:
      uint64_t v65 = *((void *)v61 + 5);
      *(void *)(v64 + 24) = v65;
      uint64_t v66 = *(void *)(v65 + 32);
      uint64_t v67 = *(unsigned int *)(v64 + 40);
      uint64_t v2 = v548;
      if (v67)
      {
        uint64_t v102 = *(void *)(v64 + 32);
        uint64_t v103 = *(void *)(v66 + 40);
        uint64_t v104 = 32 * v67;
        do
        {
          if (!*(unsigned char *)v102)
          {
            uint64_t v105 = *(unsigned int *)(v102 + 4);
            if ((int)v105 >= 0) {
              uint64_t v106 = (uint64_t *)(*(void *)(v103 + 272) + 8 * v105);
            }
            else {
              uint64_t v106 = (uint64_t *)(*(void *)(v103 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8);
            }
            uint64_t v107 = *v106;
            if (*v106)
            {
              uint64_t v108 = *(void *)(v107 + 16);
              *(void *)(v107 + 16) = v102;
              *(void *)(v102 + 16) = v108;
              if (*(unsigned char *)(v102 + 3))
              {
                *(void *)(v102 + 24) = v107;
              }
              else
              {
                *(void *)(v102 + 24) = 0;
                uint64_t v106 = (uint64_t *)(v108 + 24);
              }
            }
            else
            {
              *(void *)(v102 + 16) = v102;
              *(void *)(v102 + 24) = 0;
            }
            *uint64_t v106 = v102;
          }
          v102 += 32;
          v104 -= 32;
        }
        while (v104);
      }
      uint64_t v68 = *(void *)(v66 + 728);
      if (v68) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 24))(v68, v64);
      }
      unint64_t v69 = *v32 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v64 = v69 | *(void *)v64 & 7;
      *(void *)(v64 + 8) = v32;
      *(void *)(v69 + 8) = v64;
      uint64_t *v32 = *v32 & 7 | v64;
      v559 = 0;
      uint64_t v560 = 0;
      unint64_t v561 = 0;
      LODWORD(v558) = 0x1000000;
      HIDWORD(v558) = v48;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v558);
      int v541 = 0;
      unsigned int IncompleteVirtualRegister = 0;
      goto LABEL_89;
    }
  }
LABEL_594:
  uint64_t v349 = *(void *)(v2 + 304);
  uint64_t v350 = 312;
  if (v349 == *(void *)(v2 + 296)) {
    uint64_t v350 = 316;
  }
  uint64_t v351 = *(unsigned int *)(v2 + v350);
  if (v351)
  {
    uint64_t v352 = 8 * v351;
    int v353 = *(unint64_t **)(v2 + 304);
    while (*v353 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v353;
      v352 -= 8;
      if (!v352) {
        goto LABEL_625;
      }
    }
  }
  else
  {
    int v353 = *(unint64_t **)(v2 + 304);
  }
  int v354 = (unint64_t *)(v349 + 8 * v351);
  if (v353 == v354) {
    goto LABEL_625;
  }
  v355 = (llvm::MachineInstr *)*v353;
LABEL_604:
  uint64_t v356 = *(unsigned int *)(*((void *)v355 + 4) + 4);
  uint64_t v357 = *(void *)(v2 + 248);
  if ((v356 & 0x80000000) != 0) {
    int v358 = (uint64_t *)(*(void *)(v357 + 24) + 16 * (v356 & 0x7FFFFFFF) + 8);
  }
  else {
    int v358 = (uint64_t *)(*(void *)(v357 + 272) + 8 * v356);
  }
  uint64_t v359 = *v358;
  if (!v359)
  {
LABEL_609:
    uint64_t v360 = *(void *)(v2 + 264);
    if (!v360)
    {
LABEL_619:
      llvm::MachineInstr::eraseFromParent(v355);
      goto LABEL_620;
    }
    v361 = *(int32x2_t **)(v360 + 288);
    int32x2_t v362 = v361[46];
    uint64_t v363 = v361[48].u32[0];
    if (v363)
    {
      LODWORD(v364) = (v363 - 1) & ((v355 >> 4) ^ (v355 >> 9));
      unsigned int v365 = (llvm::MachineInstr **)(*(void *)&v362 + 16 * v364);
      unsigned int v366 = *v365;
      if (*v365 == v355) {
        goto LABEL_617;
      }
      int v367 = 1;
      while (v366 != (llvm::MachineInstr *)-4096)
      {
        int v368 = v364 + v367++;
        uint64_t v364 = v368 & (v363 - 1);
        unsigned int v366 = *(llvm::MachineInstr **)(*(void *)&v362 + 16 * v364);
        if (v366 == v355)
        {
          unsigned int v365 = (llvm::MachineInstr **)(*(void *)&v362 + 16 * v364);
          goto LABEL_617;
        }
      }
    }
    unsigned int v365 = (llvm::MachineInstr **)(*(void *)&v362 + 16 * v363);
LABEL_617:
    if (v365 != (llvm::MachineInstr **)(*(void *)&v362 + 16 * v363))
    {
      unint64_t v369 = (unint64_t)v365[1] & 0xFFFFFFFFFFFFFFF8;
      *unsigned int v365 = (llvm::MachineInstr *)-8192;
      v361[47] = vadd_s32(v361[47], (int32x2_t)0x1FFFFFFFFLL);
      *(void *)(v369 + 16) = 0;
    }
    goto LABEL_619;
  }
  while ((*(_DWORD *)v359 & 0x81000000) != 0)
  {
    uint64_t v359 = *(void *)(v359 + 24);
    if (!v359) {
      goto LABEL_609;
    }
  }
LABEL_620:
  uint64_t v370 = v353 + 1;
  while (v370 != v354)
  {
    unint64_t v371 = *v370++;
    v355 = (llvm::MachineInstr *)v371;
    if (v371 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v353 = v370 - 1;
      goto LABEL_604;
    }
  }
LABEL_625:
  uint64_t v372 = *(void *)(v2 + 360);
  uint64_t v373 = *(unsigned int *)(v2 + 376);
  v374 = (uint64_t *)(v372 + 16 * v373);
  if (*(_DWORD *)(v2 + 368))
  {
    if (v373)
    {
      uint64_t v375 = 16 * v373;
      v376 = *(uint64_t **)(v2 + 360);
      while ((unint64_t)(*v376 + 1) <= 1)
      {
        v376 += 2;
        v375 -= 16;
        if (!v375) {
          goto LABEL_630;
        }
      }
    }
    else
    {
      v376 = *(uint64_t **)(v2 + 360);
    }
  }
  else
  {
LABEL_630:
    v376 = (uint64_t *)(v372 + 16 * v373);
  }
  int v377 = (uint64_t *)(v372 + 16 * v373);
  if (v376 != v377)
  {
    BOOL v378 = (uint64_t *)(a2 + 232);
    while (1)
    {
      uint64_t v379 = *(void *)(v2 + 264);
      uint64_t v380 = *v376;
      if (v379) {
        break;
      }
LABEL_644:
      v390 = *(void **)(v380 + 32);
      if (v390)
      {
        uint64_t v391 = *(unsigned __int8 *)(v380 + 47);
        if (*(_DWORD *)(a2 + 240) <= v391) {
          sub_1CC34BDE0((uint64_t)v378, v391 + 1);
        }
        uint64_t v392 = *v378;
        void *v390 = *(void *)(*v378 + 8 * v391);
        *(void *)(v392 + 8 * v391) = v390;
      }
      *(void *)uint64_t v380 = *(void *)(a2 + 224);
      *(void *)(a2 + 224) = v380;
      v393 = v376 + 2;
      v376 = v374;
      if (v393 != v374)
      {
        v376 = v393;
        while ((unint64_t)(*v376 + 1) <= 1)
        {
          v376 += 2;
          if (v376 == v374)
          {
            v376 = v374;
            break;
          }
        }
      }
      if (v376 == v377) {
        goto LABEL_654;
      }
    }
    unint64_t v381 = *(int32x2_t **)(v379 + 288);
    int32x2_t v382 = v381[46];
    uint64_t v383 = v381[48].u32[0];
    if (v383)
    {
      LODWORD(v384) = (v383 - 1) & ((v380 >> 4) ^ (v380 >> 9));
      unsigned int v385 = (uint64_t *)(*(void *)&v382 + 16 * v384);
      uint64_t v386 = *v385;
      if (*v385 != v380)
      {
        int v387 = 1;
        while (v386 != -4096)
        {
          int v388 = v384 + v387++;
          uint64_t v384 = v388 & (v383 - 1);
          uint64_t v386 = *(void *)(*(void *)&v382 + 16 * v384);
          if (v386 == v380)
          {
            unsigned int v385 = (uint64_t *)(*(void *)&v382 + 16 * v384);
            goto LABEL_642;
          }
        }
        goto LABEL_641;
      }
    }
    else
    {
LABEL_641:
      unsigned int v385 = (uint64_t *)(*(void *)&v382 + 16 * v383);
    }
LABEL_642:
    if (v385 != (uint64_t *)(*(void *)&v382 + 16 * v383))
    {
      unint64_t v389 = v385[1] & 0xFFFFFFFFFFFFFFF8;
      *unsigned int v385 = -8192;
      v381[47] = vadd_s32(v381[47], (int32x2_t)0x1FFFFFFFFLL);
      *(void *)(v389 + 16) = 0;
      uint64_t v380 = *v376;
    }
    goto LABEL_644;
  }
LABEL_654:
  if (v7)
  {
    uint64_t v394 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(v2 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
    if (v394)
    {
      uint64_t v395 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v394 + 96))(v394, &llvm::MachineDominatorTree::ID);
      if (v395)
      {
        uint64_t v396 = v395;
        if (!*(void *)(v395 + 1320)) {
          operator new();
        }
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v395);
        uint64_t v397 = *(void *)(v396 + 1320);
        *(void *)(v397 + 56) = a2;
        sub_1CC2DC400(v397, 0);
      }
    }
  }
  uint64_t v398 = v2 + 360;
  int v399 = *(_DWORD *)(v2 + 368);
  if (v399)
  {
    unsigned int v406 = *(_DWORD *)(v2 + 376);
    if (v406 > 4 * v399 && v406 >= 0x41)
    {
      int v407 = 1 << (33 - __clz(v399 - 1));
      if (v407 <= 64) {
        int v408 = 64;
      }
      else {
        int v408 = v407;
      }
      goto LABEL_674;
    }
    goto LABEL_859;
  }
  if (!*(_DWORD *)(v2 + 372)) {
    goto LABEL_661;
  }
  unsigned int v406 = *(_DWORD *)(v2 + 376);
  if (v406 <= 0x40)
  {
    uint64_t v2 = v548;
LABEL_859:
    if (v406)
    {
      v524 = *(void **)v398;
      uint64_t v525 = 16 * v406;
      do
      {
        void *v524 = 0;
        v524 += 2;
        v525 -= 16;
      }
      while (v525);
    }
    *(void *)(v2 + 368) = 0;
    goto LABEL_661;
  }
  int v408 = 0;
  uint64_t v2 = v548;
LABEL_674:
  if (v408 == v406)
  {
    *(void *)(v2 + 368) = 0;
    uint64_t v526 = 16 * v406;
    v527 = *(void **)(v2 + 360);
    do
    {
      void *v527 = 0;
      v527 += 2;
      v526 -= 16;
    }
    while (v526);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)v398, 8);
    if (v408)
    {
      unint64_t v409 = (4 * v408 / 3u + 1) | ((unint64_t)(4 * v408 / 3u + 1) >> 1);
      unint64_t v410 = v409 | (v409 >> 2) | ((v409 | (v409 >> 2)) >> 4);
      LODWORD(v410) = (((v410 | (v410 >> 8)) >> 16) | v410 | (v410 >> 8)) + 1;
      *(_DWORD *)(v2 + 376) = v410;
      v411 = operator new(16 * v410, (std::align_val_t)8uLL);
      *(void *)(v2 + 360) = v411;
      *(void *)(v2 + 368) = 0;
      uint64_t v412 = *(unsigned int *)(v2 + 376);
      if (v412)
      {
        uint64_t v413 = 16 * v412;
        do
        {
          void *v411 = 0;
          v411 += 2;
          v413 -= 16;
        }
        while (v413);
      }
    }
    else
    {
      *(void *)uint64_t v398 = 0;
      *(void *)(v398 + 8) = 0;
      *(_DWORD *)(v398 + 16) = 0;
    }
  }
LABEL_661:
  int v400 = *(void **)(v2 + 304);
  if (v400 == *(void **)(v2 + 296))
  {
LABEL_662:
    *(void *)(v2 + 316) = 0;
  }
  else
  {
    uint64_t v422 = *(unsigned int *)(v2 + 312);
    if (v422 < 0x21 || 4 * (*(_DWORD *)(v2 + 316) - *(_DWORD *)(v2 + 320)) >= v422)
    {
      memset(v400, 255, 8 * v422);
      goto LABEL_662;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v2 + 296));
  }
  uint64_t v401 = v2 + 272;
  int v402 = *(_DWORD *)(v2 + 280);
  if (v402)
  {
    unsigned int v414 = *(_DWORD *)(v2 + 288);
    if (v414 > 4 * v402 && v414 >= 0x41)
    {
      int v415 = 1 << (33 - __clz(v402 - 1));
      if (v415 <= 64) {
        int v416 = 64;
      }
      else {
        int v416 = v415;
      }
      goto LABEL_685;
    }
    goto LABEL_854;
  }
  if (!*(_DWORD *)(v2 + 284)) {
    goto LABEL_665;
  }
  unsigned int v414 = *(_DWORD *)(v2 + 288);
  if (v414 <= 0x40)
  {
    uint64_t v2 = v548;
LABEL_854:
    if (v414)
    {
      v522 = *(void **)v401;
      uint64_t v523 = 12 * v414;
      do
      {
        void *v522 = -1;
        v522 = (void *)((char *)v522 + 12);
        v523 -= 12;
      }
      while (v523);
    }
    *(void *)(v2 + 280) = 0;
    goto LABEL_665;
  }
  int v416 = 0;
  uint64_t v2 = v548;
LABEL_685:
  if (v416 == v414)
  {
    *(void *)(v2 + 280) = 0;
    v528 = *(void **)(v2 + 272);
    uint64_t v529 = 12 * v414;
    do
    {
      void *v528 = -1;
      v528 = (void *)((char *)v528 + 12);
      v529 -= 12;
    }
    while (v529);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)v401, 4);
    if (v416)
    {
      unint64_t v417 = (4 * v416 / 3u + 1) | ((unint64_t)(4 * v416 / 3u + 1) >> 1);
      unint64_t v418 = v417 | (v417 >> 2) | ((v417 | (v417 >> 2)) >> 4);
      LODWORD(v418) = (((v418 | (v418 >> 8)) >> 16) | v418 | (v418 >> 8)) + 1;
      *(_DWORD *)(v2 + 288) = v418;
      uint64_t v419 = operator new(12 * v418, (std::align_val_t)4uLL);
      *(void *)(v2 + 272) = v419;
      *(void *)(v2 + 280) = 0;
      uint64_t v420 = *(unsigned int *)(v2 + 288);
      if (v420)
      {
        uint64_t v421 = 12 * v420;
        do
        {
          *uint64_t v419 = -1;
          uint64_t v419 = (void *)((char *)v419 + 12);
          v421 -= 12;
        }
        while (v421);
      }
    }
    else
    {
      *(void *)uint64_t v401 = 0;
      *(void *)(v401 + 8) = 0;
      *(_DWORD *)(v401 + 16) = 0;
    }
  }
LABEL_665:
  **(void **)(a2 + 360) |= 2uLL;
  return v7 & 1;
}

void *sub_1CC3E4CDC(void *result, void *a2)
{
  uint64_t v2 = (void *)result[2];
  if (v2 != a2)
  {
    int v4 = result;
    do
    {
      uint64_t v5 = v2 - 4;
      v4[2] = v2 - 4;
      if (*(v2 - 2))
      {
        uint64_t v6 = *(v2 - 4);
        uint64_t result = (void *)*(v2 - 3);
        uint64_t v7 = *result;
        *(void *)(v7 + 8) = *(void *)(v6 + 8);
        **(void **)(v6 + 8) = v7;
        *(v2 - 2) = 0;
        if (result != v5)
        {
          do
          {
            int v8 = (void *)result[1];
            operator delete(result);
            uint64_t result = v8;
          }
          while (v8 != v5);
          uint64_t v5 = (void *)v4[2];
        }
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

void *sub_1CC3E4D6C(void *result, void *a2)
{
  uint64_t v3 = result;
  int v4 = (void *)result[1];
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 4;
      if (*(v4 - 2))
      {
        uint64_t v6 = *(v4 - 4);
        uint64_t result = (void *)*(v4 - 3);
        uint64_t v7 = *result;
        *(void *)(v7 + 8) = *(void *)(v6 + 8);
        **(void **)(v6 + 8) = v7;
        *(v4 - 2) = 0;
        if (result != v5)
        {
          do
          {
            int v8 = (void *)result[1];
            operator delete(result);
            uint64_t result = v8;
          }
          while (v8 != v5);
        }
      }
      int v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

int *sub_1CC3E4DF8(uint64_t a1, int *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    int v5 = a2[1];
    unint64_t v6 = ((37 * v5) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v5) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    unsigned int v9 = (v4 - 1) & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27)));
    uint64_t result = (int *)(*(void *)a1 + 12 * v9);
    int v11 = *result;
    int v12 = result[1];
    if (*a2 == *result && v5 == v12) {
      return result;
    }
    unsigned int v14 = 0;
    int v15 = 1;
    while (v11 != -1 || v12 != -1)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v12 == -2;
      }
      if (v16 && v11 == -2) {
        unsigned int v14 = result;
      }
      unsigned int v18 = v9 + v15++;
      unsigned int v9 = v18 & (v4 - 1);
      uint64_t result = (int *)(*(void *)a1 + 12 * v9);
      int v11 = *result;
      int v12 = result[1];
      if (*a2 == *result && v5 == v12) {
        return result;
      }
    }
    if (v14) {
      uint64_t result = v14;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  int v20 = *(_DWORD *)(a1 + 8);
  if (4 * v20 + 4 >= 3 * v4)
  {
    sub_1CC3E5140(a1, 2 * v4);
    int v22 = *(_DWORD *)(a1 + 16);
    if (v22)
    {
      int v23 = a2[1];
      unint64_t v24 = ((37 * v23) | ((unint64_t)(37 * *a2) << 32))
          + ~((unint64_t)(37 * v23) << 32);
      unint64_t v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
      unint64_t v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
      int v27 = v22 - 1;
      unsigned int v28 = v27 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~(v26 << 27)));
      uint64_t result = (int *)(*(void *)a1 + 12 * v28);
      int v29 = *result;
      int v30 = result[1];
      if (*a2 != *result || v23 != v30)
      {
        uint64_t v32 = 0;
        int v33 = 1;
        while (v29 != -1 || v30 != -1)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v30 == -2;
          }
          if (v34 && v29 == -2) {
            uint64_t v32 = result;
          }
          unsigned int v36 = v28 + v33++;
          unsigned int v28 = v36 & v27;
          uint64_t result = (int *)(*(void *)a1 + 12 * v28);
          int v29 = *result;
          int v30 = result[1];
          if (*a2 == *result && v23 == v30) {
            goto LABEL_28;
          }
        }
        if (v32) {
          uint64_t result = v32;
        }
      }
    }
    else
    {
      uint64_t result = 0;
    }
  }
  else if (v4 + ~v20 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1CC3E5140(a1, v4);
    uint64_t v38 = 0;
    sub_1CC3E5070(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v38);
    uint64_t result = v38;
  }
LABEL_28:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1 || result[1] != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  *(void *)(result + 1) = a2[1];
  return result;
}

uint64_t sub_1CC3E5070(uint64_t result, int a2, int a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    int v10 = (_DWORD *)(result + 12 * v9);
    int v11 = *v10;
    int v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      unsigned int v14 = 0;
      int v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -2;
        }
        if (v16 && v11 == -2) {
          unsigned int v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        int v10 = (_DWORD *)(result + 12 * (v18 & v8));
        int v11 = *v10;
        int v12 = v10[1];
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_25;
        }
      }
      if (v14) {
        int v10 = v14;
      }
    }
  }
  else
  {
    int v10 = 0;
  }
LABEL_25:
  *a5 = v10;
  return result;
}

void *sub_1CC3E5140(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 12 * v10;
      int v12 = result;
      do
      {
        void *v12 = -1;
        int v12 = (void *)((char *)v12 + 12);
        v11 -= 12;
      }
      while (v11);
    }
    if (v3)
    {
      int v13 = 0;
      int v14 = v10 - 1;
      int v15 = v4;
      do
      {
        int v16 = *v15;
        int v17 = v15[1];
        if ((*v15 != -1 || v17 != -1) && (v16 != -2 || v17 != -2))
        {
          unint64_t v20 = ((37 * v17) | ((unint64_t)(37 * v16) << 32))
              + ~((unint64_t)(37 * v17) << 32);
          unint64_t v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          unint64_t v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          unsigned int v23 = v14 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~(v22 << 27)));
          unint64_t v24 = (_DWORD *)result + 3 * v23;
          int v25 = *v24;
          int v26 = v24[1];
          if (v16 != *v24 || v17 != v26)
          {
            unsigned int v28 = 0;
            int v29 = 1;
            while (v25 != -1 || v26 != -1)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v26 == -2;
              }
              if (v30 && v25 == -2) {
                unsigned int v28 = v24;
              }
              unsigned int v32 = v23 + v29++;
              unsigned int v23 = v32 & v14;
              unint64_t v24 = (_DWORD *)result + 3 * (v32 & v14);
              int v25 = *v24;
              int v26 = v24[1];
              if (v16 == *v24 && v17 == v26) {
                goto LABEL_41;
              }
            }
            if (v28) {
              unint64_t v24 = v28;
            }
          }
LABEL_41:
          *unint64_t v24 = v16;
          v24[1] = v17;
          v24[2] = v15[2];
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 3;
      }
      while (v15 != &v4[3 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v34 = *(unsigned int *)(a1 + 16);
  if (v34)
  {
    uint64_t v35 = 12 * v34;
    do
    {
      *uint64_t result = -1;
      uint64_t result = (void *)((char *)result + 12);
      v35 -= 12;
    }
    while (v35);
  }
  return result;
}

uint64_t sub_1CC3E5338(int a1, uint64_t a2, uint64_t a3)
{
  int v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0) {
    int v3 = (uint64_t *)(a3 + 8 * a1);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    if (*(unsigned char *)(v4 + 3) & 1) != 0 || (uint64_t v4 = *(void *)(v4 + 24)) != 0 && (*(unsigned char *)(v4 + 3))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (**(_WORD **)(v5 + 16) != 10) {
        return 0;
      }
      while (1)
      {
        uint64_t v4 = *(void *)(v4 + 24);
        if (!v4 || (*(unsigned char *)(v4 + 3) & 1) == 0) {
          break;
        }
        uint64_t v6 = *(void *)(v4 + 8);
        if (v6 != v5)
        {
          uint64_t result = 0;
          uint64_t v5 = *(void *)(v4 + 8);
          if (**(_WORD **)(v6 + 16) != 10) {
            return result;
          }
        }
      }
    }
  }
  return 1;
}

void sub_1CC3E53D0(uint64_t *a1, unsigned int a2)
{
  if (a1[2])
  {
    unsigned int v4 = a2 >> 7;
    uint64_t v5 = sub_1CBF7CC48(a1, a2 >> 7);
    if (v5 != a1)
    {
      uint64_t v6 = v5 + 2;
      if (*((_DWORD *)v5 + 4) == v4)
      {
        uint64_t v7 = 0;
        char v8 = 1;
        unsigned int v9 = &v6[(a2 >> 6) & 1];
        v9[1] &= ~(1 << a2);
        while (!v6[v7 + 1])
        {
          char v10 = v8;
          char v8 = 0;
          uint64_t v7 = 1;
          if ((v10 & 1) == 0)
          {
            uint64_t v11 = a1[2];
            uint64_t v12 = *(void *)(a1[3] + 8);
            uint64_t v13 = *v5;
            *(void *)(v13 + 8) = v5[1];
            *(void *)v5[1] = v13;
            a1[2] = v11 - 1;
            a1[3] = v12;
            operator delete(v5);
            return;
          }
        }
      }
    }
  }
}

uint64_t sub_1CC3E54A4()
{
  char v3 = 0;
  unsigned int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable critical edge splitting during PHI elimination";
  v1.n128_u64[1] = 54;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD1A50, "disable-phi-elim-edge-splitting", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1A50, &dword_1CB82C000);
  char v3 = 0;
  unsigned int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Split all critical edges during PHI elimination";
  v1.n128_u64[1] = 47;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD1B10, "phi-elim-split-all-critical-edges", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1B10, &dword_1CB82C000);
  char v3 = 0;
  unsigned int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Do not use an early exit if isLiveOutPastPHIs returns true.";
  v1.n128_u64[1] = 59;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD1BD0, "no-phi-elim-live-out-early-exit", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1BD0, &dword_1CB82C000);
}

unint64_t llvm::findPHICopyInsertPoint(llvm *this, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3)
{
  if ((llvm *)((char *)this + 48) == (llvm *)(*((void *)this + 6) & 0xFFFFFFFFFFFFFFF8)) {
    return *((void *)this + 7);
  }
  if (*((unsigned char *)a2 + 184) || *((unsigned char *)a2 + 202))
  {
    int v15 = *((unsigned __int8 *)a2 + 184);
    int v16 = (char *)this + 48;
    unsigned int v18 = v22;
    int v19 = v22;
    uint64_t v20 = 8;
    int v21 = 0;
    uint64_t v5 = sub_1CBB2C050(*(void *)(*((void *)this + 4) + 40), a3);
    if (v5 != v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      do
      {
        uint64_t v9 = *(void *)(v7 + 8);
        if (*(llvm **)(v9 + 24) == this)
        {
          sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v18, v9);
          uint64_t v9 = *(void *)(v7 + 8);
        }
        do
        {
          uint64_t v7 = *(void *)(v7 + 24);
          if (!v7) {
            break;
          }
          if ((*(unsigned char *)(v7 + 3) & 1) == 0)
          {
            uint64_t v7 = 0;
            break;
          }
        }
        while (*(void *)(v7 + 8) == v9);
      }
      while (v7 != v8);
    }
    uint64_t v10 = *((void *)this + 7);
    unint64_t v11 = *((void *)this + 6) & 0xFFFFFFFFFFFFFFF8;
    if (!v11 || (*(unsigned char *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 4) != 0)
        unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((char *)v11 != v16)
    {
      while (1)
      {
        uint64_t v12 = (char *)sub_1CB896AE8((uint64_t)&v18, v11);
        uint64_t v13 = v19 == v18 ? (uint64_t *)((char *)&v20 + 4) : &v20;
        if (v12 != &v19[8 * *(unsigned int *)v13]) {
          break;
        }
        if (v15)
        {
          if ((*(_WORD *)(v11 + 44) & 0xC) != 0 && (*(_WORD *)(v11 + 44) & 4) == 0)
          {
            if (llvm::MachineInstr::hasPropertyInBundle(v11, 128, 1)) {
              goto LABEL_45;
            }
          }
          else if ((*(unsigned char *)(*(void *)(v11 + 16) + 8) & 0x80) != 0)
          {
            goto LABEL_45;
          }
        }
        if (**(_WORD **)(v11 + 16) == 2)
        {
LABEL_45:
          uint64_t v10 = v11;
          goto LABEL_46;
        }
        unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
        if (!v11 || (*(unsigned char *)v11 & 4) == 0)
        {
          while ((*(_WORD *)(v11 + 44) & 4) != 0)
            unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((char *)v11 == v16) {
          goto LABEL_46;
        }
      }
      if ((*(unsigned char *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          unint64_t v11 = *(void *)(v11 + 8);
      }
      uint64_t v10 = *(void *)(v11 + 8);
    }
LABEL_46:
    uint64_t v4 = llvm::MachineBasicBlock::SkipPHIsAndLabels((uint64_t)this, v10);
    if (v19 != v18) {
      free(v19);
    }
    return v4;
  }

  return llvm::MachineBasicBlock::getFirstTerminator(this);
}

void sub_1CC3E5830()
{
}

void sub_1CC3E58CC()
{
}

void sub_1CC3E5970(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  char v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3E5A24(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3E5AD0(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC3E5B44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v3 + 888))();
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = a2 + 320;
    uint64_t v7 = *(void *)(a2 + 328);
    if (v7 == v6)
    {
      char v8 = 0;
    }
    else
    {
      char v8 = 0;
      do
      {
        for (uint64_t i = *(void *)(v7 + 56); i != v7 + 48; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 64))(v5, i);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v10);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 744))(v3, v7, i, v10);
          BOOL v11 = v10 != 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, i);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
            (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
          }
          if (!i || (*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
          v8 |= v11;
        }
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while (v7 != v6);
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

void sub_1CC3E5DB4()
{
}

llvm *sub_1CC3E5E50(llvm *result)
{
  __n128 v1 = (void *)*((void *)result + 345);
  int v2 = (void *)*((void *)result + 346);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      if (*v1)
      {
        uint64_t result = (llvm *)(*(uint64_t (**)(llvm *))(*(void *)v3 + 32))(v3);
      }
      else
      {
        uint64_t result = llvm::dbgs(result);
        uint64_t v4 = (void *)*((void *)result + 4);
        if (*((void *)result + 3) - (void)v4 > 0xEuLL)
        {
          qmemcpy(v4, "**** NOOP ****\n", 15);
          *((void *)result + 4) += 15;
        }
        else
        {
          uint64_t result = llvm::raw_ostream::write(result, "**** NOOP ****\n", 0xFuLL);
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

void sub_1CC3E5F14()
{
}

void sub_1CC3E6008(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2610DD8;
  sub_1CD50C1C0(a1 + 32);
  *a1 = (uint64_t)&unk_1F260E110;
  int v2 = (uint64_t *)a1[22];
  if (v2 != a1 + 24) {
    free(v2);
  }
  uint64_t v3 = (uint64_t *)a1[13];
  if (v3 != a1 + 15) {
    free(v3);
  }
  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 != a1 + 6) {
    free(v4);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC3E60C4(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2610DD8;
  sub_1CD50C1C0(a1 + 32);
  *a1 = (uint64_t)&unk_1F260E110;
  int v2 = (uint64_t *)a1[22];
  if (v2 != a1 + 24) {
    free(v2);
  }
  uint64_t v3 = (uint64_t *)a1[13];
  if (v3 != a1 + 15) {
    free(v3);
  }
  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 != a1 + 6) {
    free(v4);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3E6194(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC3E6288(void *a1, uint64_t a2)
{
  v72[4] = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(llvm::LLVMContextImpl *****)a2)) {
    return 0;
  }
  a1[31] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::MachineLoopInfo::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineLoopInfo::ID);
  uint64_t v10 = (uint64_t *)a1[1];
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_11:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::AAResultsWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::AAResultsWrapperPass::ID);
  int v15 = (uint64_t *)a1[1];
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_16:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::TargetPassConfig::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_16;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = *(void *)(v14 + 32);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::TargetPassConfig::ID);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(a1 + 32), (const llvm::MachineFunction *)a2);
  v71[0] = v72;
  v71[1] = (void *)0x400000000;
  uint64_t v21 = *(void *)(a2 + 16);
  int v22 = *(_DWORD *)(*(void *)(v20 + 112) + 552);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 312))(v21);
  (*(void (**)(uint64_t, void **))(*(void *)v21 + 320))(v21, v71);
  if (word_1EBCD1CAC)
  {
    if (byte_1EBCD1D20) {
      goto LABEL_20;
    }
LABEL_36:
    uint64_t v4 = 0;
    goto LABEL_86;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v21 + 264))(v21)
    || (*(int (**)(uint64_t))(*(void *)v21 + 352))(v21) > v22)
  {
    goto LABEL_36;
  }
LABEL_20:
  if (word_1EBCD1EEC)
  {
    unint64_t v24 = byte_1EBCD1F77;
    if (byte_1EBCD1F77 >= 0) {
      uint64_t v25 = byte_1EBCD1F77 & 0x7F;
    }
    else {
      uint64_t v25 = qword_1EBCD1F68;
    }
    if (v25 == 8)
    {
      if (byte_1EBCD1F77 < 0)
      {
        unsigned int v28 = (uint64_t *)qword_1EBCD1F60;
        unint64_t v24 = qword_1EBCD1F68;
      }
      else
      {
        unsigned int v28 = &qword_1EBCD1F60;
      }
      if (v24 >= 8) {
        size_t v29 = 8;
      }
      else {
        size_t v29 = v24;
      }
      BOOL v30 = memcmp(v28, "critical", v29) == 0;
      int v23 = v24 == 8 && v30;
    }
    else if (v25 == 3)
    {
      if (byte_1EBCD1F77 < 0)
      {
        int v26 = (uint64_t *)qword_1EBCD1F60;
        unint64_t v24 = qword_1EBCD1F68;
      }
      else
      {
        int v26 = &qword_1EBCD1F60;
      }
      if (v24 >= 3) {
        size_t v27 = 3;
      }
      else {
        size_t v27 = v24;
      }
      int v23 = 0;
      if (!memcmp(v26, "all", v27) && v24 == 3) {
        int v23 = 2;
      }
    }
    else
    {
      int v23 = 0;
    }
  }
  llvm::ScheduleDAGInstrs::ScheduleDAGInstrs((llvm::ScheduleDAGInstrs *)v49, (const llvm::TargetSubtargetInfo **)a2, v9, 0);
  v49[0] = (uint64_t)&unk_1F2610E98;
  int v55 = 0;
  char v56 = 0;
  uint64_t v54 = &unk_1F260C6B8;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v60 = &v54;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v66 = v19;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  unsigned int v70 = 0;
  (*(void (**)(void))(**(void **)(a2 + 16) + 192))(*(void *)(a2 + 16));
  uint64_t v31 = *(void *)(*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v64 = (*(uint64_t (**)(void))(v31 + 880))();
  (*(void (**)(void))(**(void **)(a2 + 16) + 328))();
  if (v23 == 1) {
    llvm::createCriticalAntiDepBreaker((llvm *)a2, (llvm::MachineFunction *)(a1 + 32), v32);
  }
  if (v23 == 2) {
    llvm::createAggressiveAntiDepBreaker();
  }
  uint64_t v65 = 0;
  for (uint64_t i = *(void *)(a2 + 328); i != a2 + 320; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v50 = i;
    (*(void (**)(uint64_t))(*(void *)v64 + 32))(v64);
    if (v65) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v65 + 16))(v65, i);
    }
    unint64_t v34 = i + 48;
    LODWORD(v35) = -1;
    uint64_t v36 = i + 48;
    do
    {
      uint64_t v36 = *(void *)(v36 + 8);
      LODWORD(v35) = v35 + 1;
    }
    while (v36 != v34);
    if (v34 != *(void *)(i + 56))
    {
      unsigned int v37 = v35;
      uint64_t v38 = (void *)(i + 48);
      while (1)
      {
        unint64_t v39 = *v38 & 0xFFFFFFFFFFFFFFF8;
        if (v39 && (*(unsigned char *)v39 & 4) != 0)
        {
          __int16 v40 = *(_WORD *)(v39 + 44);
        }
        else
        {
          while (1)
          {
            __int16 v40 = *(_WORD *)(v39 + 44);
            if ((v40 & 4) == 0) {
              break;
            }
            unint64_t v39 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        uint64_t v35 = (v35 - 1);
        int v41 = v40 & 0xC;
        int v42 = v40 & 4;
        uint64_t v43 = *(void *)(*(void *)(v39 + 16) + 8);
        if (v41) {
          BOOL v44 = v42 == 0;
        }
        else {
          BOOL v44 = 0;
        }
        if (v44)
        {
          unint64_t v46 = v39;
          if ((v43 & 0x80) != 0)
          {
LABEL_67:
            int v51 = v38;
            unint64_t v52 = v34;
            unsigned int v53 = v37 - v35;
            *((void *)&v67 + 1) = v67;
            unsigned int v70 = v37;
            sub_1CC3E6BC4((uint64_t)v49);
            sub_1CC3E73B4(v49);
            unsigned int v37 = v35;
            unint64_t v34 = v39;
            if (v65)
            {
              (*(void (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)v65 + 32))(v65, v39, v35, v70);
              unsigned int v37 = v35;
              unint64_t v34 = v39;
            }
            goto LABEL_69;
          }
          while ((*(_WORD *)(v46 + 44) & 8) != 0)
          {
            unint64_t v46 = *(void *)(v46 + 8);
            if ((*(unsigned char *)(*(void *)(v46 + 16) + 8) & 0x80) != 0) {
              goto LABEL_67;
            }
          }
        }
        else if ((v43 & 0x80) != 0)
        {
          goto LABEL_67;
        }
        if ((*(unsigned int (**)(void, unint64_t, uint64_t, uint64_t))(*(void *)a1[31] + 848))(a1[31], v39, i, a2))
        {
          goto LABEL_67;
        }
LABEL_69:
        if (**(_WORD **)(v39 + 16) == 20)
        {
          if ((*(_WORD *)(v39 + 44) & 8) != 0)
          {
            int v45 = 0;
            unint64_t v47 = v39;
            do
            {
              ++v45;
              unint64_t v47 = *(void *)(v47 + 8);
            }
            while ((*(_WORD *)(v47 + 44) & 8) != 0);
          }
          else
          {
            int v45 = 0;
          }
          LODWORD(v35) = v35 - v45;
        }
        uint64_t v38 = (void *)v39;
        if (v39 == *(void *)(i + 56)) {
          goto LABEL_82;
        }
      }
    }
    unsigned int v37 = v35;
    unint64_t v39 = i + 48;
LABEL_82:
    int v51 = (void *)v39;
    unint64_t v52 = v34;
    unsigned int v53 = v37;
    *((void *)&v67 + 1) = v67;
    unsigned int v70 = v37;
    sub_1CC3E6BC4((uint64_t)v49);
    sub_1CC3E73B4(v49);
    if (v65) {
      (*(void (**)(uint64_t))(*(void *)v65 + 40))(v65);
    }
    uint64_t v50 = 0;
    llvm::ScheduleDAGInstrs::fixupKills((llvm::ScheduleDAGInstrs *)v49, (const llvm::MachineFunction **)i);
  }
  sub_1CC3E7558((uint64_t)v49);
  uint64_t v4 = 1;
LABEL_86:
  if (v71[0] != v72) {
    free(v71[0]);
  }
  return v4;
}

double sub_1CC3E6AEC@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC3E6B14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 920) = a2;
  (*(void (**)(void))(**(void **)(a1 + 2736) + 32))(*(void *)(a1 + 2736));
  uint64_t result = *(void *)(a1 + 2744);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_1CC3E6BAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(result + 928) = a3;
  *(void *)(result + 936) = a4;
  *(_DWORD *)(result + 944) = a5;
  *(void *)(result + 2768) = *(void *)(result + 2760);
  return result;
}

void sub_1CC3E6BC4(uint64_t a1)
{
  llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)a1, *(llvm::AAResults **)(a1 + 2752), 0, 0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 2744);
  if (v2
    && (*(unsigned int (**)(uint64_t, uint64_t, void, void, void, uint64_t))(*(void *)v2 + 24))(v2, a1 + 48, *(void *)(a1 + 928), *(void *)(a1 + 936), *(unsigned int *)(a1 + 2808), a1 + 2536))
  {
    sub_1CC463D08(a1 + 48, *(void *)(a1 + 48));
    memset(&v58[3], 0, 32);
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    *(_DWORD *)(a1 + 264) = -1;
    *(_WORD *)(a1 + 300) = 0;
    *(_OWORD *)(a1 + 268) = 0u;
    *(_OWORD *)(a1 + 284) = 0u;
    *(_DWORD *)(a1 + 304) = 0;
    *(unsigned char *)(a1 + 308) = 0;
    *(_OWORD *)(a1 + 309) = *(_OWORD *)v58;
    *(_OWORD *)(a1 + 325) = *(_OWORD *)&v58[16];
    *(_DWORD *)(a1 + 340) = 0;
    memset(&v58[3], 0, 32);
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_DWORD *)(a1 + 384) = 0;
    *(_DWORD *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 536) = -1;
    *(_OWORD *)(a1 + 540) = 0u;
    *(_OWORD *)(a1 + 556) = 0u;
    *(_WORD *)(a1 + 572) = 0;
    *(_DWORD *)(a1 + 576) = 0;
    *(unsigned char *)(a1 + 580) = 0;
    *(_OWORD *)(a1 + 581) = *(_OWORD *)v58;
    *(_OWORD *)(a1 + 597) = *(_OWORD *)&v58[16];
    *(_DWORD *)(a1 + 612) = 0;
    llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)a1, *(llvm::AAResults **)(a1 + 2752), 0, 0, 0, 0);
  }
  uint64_t v3 = *(uint64_t **)(a1 + 2784);
  uint64_t v4 = *(uint64_t **)(a1 + 2792);
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a1);
  }
  sub_1CD51747C((void *)(a1 + 2632), (void *)(a1 + 48));
  (*(void (**)(void))(**(void **)(a1 + 2736) + 32))(*(void *)(a1 + 2736));
  sub_1CC3E766C((void *)a1, *(void *)(a1 + 184), *(_DWORD *)(a1 + 192));
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v7 == v6)
  {
    uint64_t v8 = *(void *)(a1 + 48);
  }
  else
  {
    do
    {
      if (!*(_DWORD *)(v7 + 208) && (*(_WORD *)(v7 + 228) & 0x200) == 0)
      {
        llvm::LatencyPriorityQueue::push((void *)(a1 + 2632), v7);
        *(_WORD *)(v7 + 228) |= 0x200u;
      }
      v7 += 272;
    }
    while (v7 != v6);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
  }
  sub_1CBF7ACFC(a1 + 2760, 0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 4));
  uint64_t v9 = *(void *)(a1 + 2680);
  uint64_t v10 = *(void *)(a1 + 2688);
  uint64_t v11 = *(void *)(a1 + 2720);
  uint64_t v12 = *(void *)(a1 + 2712);
  if (v9 != v10 || v12 != v11)
  {
    uint64_t v54 = (uint64_t **)(a1 + 2760);
    char v55 = 0;
    unsigned int v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    while (1)
    {
      unint64_t v17 = (unint64_t)(v11 - v12) >> 3;
      if (v17)
      {
        unsigned int v18 = 0;
        unsigned int v19 = -1;
        do
        {
          uint64_t v20 = *(void *)(*(void *)(a1 + 2712) + 8 * v18);
          uint64_t v21 = v20;
          if ((*(unsigned char *)(v20 + 236) & 1) == 0)
          {
            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(*(void *)(a1 + 2712) + 8 * v18));
            uint64_t v21 = *(void *)(*(void *)(a1 + 2712) + 8 * v18);
          }
          if (*(_DWORD *)(v20 + 240) <= v14)
          {
            llvm::LatencyPriorityQueue::push((void *)(a1 + 2632), v21);
            uint64_t v23 = *(void *)(*(void *)(a1 + 2712) + 8 * v18);
            *(_WORD *)(v23 + 228) |= 0x200u;
            *(void *)(*(void *)(a1 + 2712) + 8 * v18) = *(void *)(*(void *)(a1 + 2720) - 8);
            *(void *)(a1 + 2720) -= 8;
            --v18;
            LODWORD(v17) = v17 - 1;
          }
          else
          {
            if ((*(unsigned char *)(v21 + 236) & 1) == 0) {
              llvm::SUnit::ComputeDepth((llvm::SUnit *)v21);
            }
            if (*(_DWORD *)(v21 + 240) < v19)
            {
              uint64_t v22 = *(void *)(*(void *)(a1 + 2712) + 8 * v18);
              if ((*(unsigned char *)(v22 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(*(void *)(a1 + 2712) + 8 * v18));
              }
              unsigned int v19 = *(_DWORD *)(v22 + 240);
            }
          }
          ++v18;
        }
        while (v18 != v17);
        uint64_t v9 = *(void *)(a1 + 2680);
        uint64_t v10 = *(void *)(a1 + 2688);
      }
      if (v9 == v10) {
        goto LABEL_67;
      }
      char v24 = 0;
      uint64_t v56 = 0;
      uint64_t v25 = v15;
      while (1)
      {
        uint64_t v26 = llvm::LatencyPriorityQueue::pop((uint64_t **)(a1 + 2632));
        int v27 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 2736) + 24))(*(void *)(a1 + 2736), v26, 0);
        if (v27)
        {
LABEL_38:
          v24 |= v27 == 2;
          if (v25 >= v16)
          {
            uint64_t v29 = v25 - v15;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
              goto LABEL_105;
            }
            if (((char *)v16 - (char *)v15) >> 2 > v30) {
              unint64_t v30 = ((char *)v16 - (char *)v15) >> 2;
            }
            if ((unint64_t)((char *)v16 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31)
            {
              if (v31 >> 61) {
                goto LABEL_106;
              }
              unsigned int v32 = (char *)operator new(8 * v31);
            }
            else
            {
              unsigned int v32 = 0;
            }
            int v33 = (uint64_t *)&v32[8 * v29];
            *int v33 = v26;
            unsigned int v28 = v33 + 1;
            while (v25 != v15)
            {
              uint64_t v34 = *--v25;
              *--int v33 = v34;
            }
            uint64_t v16 = (uint64_t *)&v32[8 * v31];
            if (v15) {
              operator delete(v15);
            }
            int v15 = v33;
          }
          else
          {
            *uint64_t v25 = v26;
            unsigned int v28 = v25 + 1;
          }
          goto LABEL_57;
        }
        if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 2736) + 72))(*(void *)(a1 + 2736), v26))break; {
        if (v56)
        }
          goto LABEL_38;
        unsigned int v28 = v25;
        uint64_t v56 = v26;
LABEL_57:
        uint64_t v25 = v28;
        if (*(void *)(a1 + 2680) == *(void *)(a1 + 2688)) {
          goto LABEL_58;
        }
      }
      if (!v56) {
        goto LABEL_79;
      }
      if (v26)
      {
        llvm::LatencyPriorityQueue::push((void *)(a1 + 2632), v56);
LABEL_79:
        unsigned int v28 = v25;
        uint64_t v56 = v26;
      }
      else
      {
        unsigned int v28 = v25;
      }
LABEL_58:
      long long v57 = v16;
      if (v15 != v28)
      {
        uint64_t v35 = v15;
        do
        {
          uint64_t v36 = *v35++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 2632) + 88))(a1 + 2632, v36);
        }
        while (v35 != v28);
      }
      if (v56)
      {
        for (int i = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2736) + 56))(*(void *)(a1 + 2736), v56); i; --i)
          sub_1CC3E77D0(a1);
        uint64_t v38 = *(uint64_t **)(a1 + 2768);
        unint64_t v39 = *(void *)(a1 + 2776);
        if ((unint64_t)v38 >= v39)
        {
          int v41 = *v54;
          uint64_t v42 = v38 - *v54;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
LABEL_105:
          }
            abort();
          uint64_t v44 = v39 - (void)v41;
          if (v44 >> 2 > v43) {
            unint64_t v43 = v44 >> 2;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            if (v45 >> 61) {
LABEL_106:
            }
              sub_1CB833614();
            unint64_t v46 = (char *)operator new(8 * v45);
          }
          else
          {
            unint64_t v46 = 0;
          }
          unint64_t v47 = (uint64_t *)&v46[8 * v42];
          *unint64_t v47 = v56;
          __int16 v40 = v47 + 1;
          if (v38 != v41)
          {
            do
            {
              uint64_t v48 = *--v38;
              *--unint64_t v47 = v48;
            }
            while (v38 != v41);
            uint64_t v38 = *v54;
          }
          *(void *)(a1 + 2760) = v47;
          *(void *)(a1 + 2768) = v40;
          *(void *)(a1 + 2776) = &v46[8 * v45];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *uint64_t v38 = v56;
          __int16 v40 = v38 + 1;
        }
        *(void *)(a1 + 2768) = v40;
        llvm::SUnit::setDepthToAtLeast((llvm::SUnit *)v56, v14);
        sub_1CC3E766C((void *)a1, *(void *)(v56 + 112), *(_DWORD *)(v56 + 120));
        *(_WORD *)(v56 + 228) |= 0x400u;
        uint64_t v49 = *(unsigned int *)(v56 + 120);
        if (v49)
        {
          uint64_t v50 = *(uint64_t **)(v56 + 112);
          uint64_t v51 = 16 * v49;
          do
          {
            uint64_t v52 = *v50;
            v50 += 2;
            llvm::LatencyPriorityQueue::AdjustPriorityOfUnscheduledPreds(a1 + 2632, v52 & 0xFFFFFFFFFFFFFFF8);
            v51 -= 16;
          }
          while (v51);
        }
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 2736) + 40))(*(void *)(a1 + 2736), v56);
        char v53 = (*(uint64_t (**)(void))(**(void **)(a1 + 2736) + 16))(*(void *)(a1 + 2736));
        if (v53)
        {
          (*(void (**)(void))(**(void **)(a1 + 2736) + 80))(*(void *)(a1 + 2736));
          ++v14;
        }
        uint64_t v16 = v57;
        char v55 = v53 ^ 1;
      }
      else
      {
        if (v55)
        {
          uint64_t v16 = v57;
          goto LABEL_67;
        }
        uint64_t v16 = v57;
        if (v24)
        {
          sub_1CC3E77D0(a1);
          goto LABEL_68;
        }
LABEL_67:
        (*(void (**)(void))(**(void **)(a1 + 2736) + 80))(*(void *)(a1 + 2736));
LABEL_68:
        char v55 = 0;
        ++v14;
      }
      uint64_t v9 = *(void *)(a1 + 2680);
      uint64_t v10 = *(void *)(a1 + 2688);
      uint64_t v11 = *(void *)(a1 + 2720);
      uint64_t v12 = *(void *)(a1 + 2712);
      if (v9 == v10 && v12 == v11)
      {
        if (v15) {
          operator delete(v15);
        }
        break;
      }
    }
  }
  *(void *)(a1 + 2648) = 0;
}

uint64_t *sub_1CC3E73B4(uint64_t *result)
{
  __n128 v1 = result;
  uint64_t v2 = (unint64_t *)result[117];
  result[116] = (uint64_t)v2;
  uint64_t v3 = (unint64_t *)result[320];
  if (v3) {
    uint64_t result = (uint64_t *)sub_1CB9173F0(result[115], v2, result[115], v3);
  }
  unint64_t v4 = v1[346] - v1[345];
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    do
    {
      uint64_t v7 = *(void *)(v1[345] + 8 * v5);
      if (v7)
      {
        uint64_t result = (uint64_t *)sub_1CB9173F0(v1[115], (unint64_t *)v1[117], v1[115], *(unint64_t **)(v7 + 8));
        if (!v5) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 736))(v1[2], v1[115], v1[117]);
        if (!v5)
        {
LABEL_9:
          unint64_t v8 = *(void *)v1[117] & 0xFFFFFFFFFFFFFFF8;
          if (!v8 || (*(unsigned char *)v8 & 4) == 0)
          {
            while ((*(_WORD *)(v8 + 44) & 4) != 0)
              unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
          }
          v1[116] = v8;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v9 = v1[318];
  uint64_t v10 = v1[317];
  if (v9 != v10)
  {
    do
    {
      uint64_t v11 = *(unint64_t **)(v9 - 16);
      uint64_t v12 = *(void *)(v9 - 8);
      v9 -= 16;
      if (!v12 || (*(unsigned char *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
          uint64_t v12 = *(void *)(v12 + 8);
      }
      uint64_t result = (uint64_t *)sub_1CB9173F0(v1[115], *(unint64_t **)(v12 + 8), v1[115], v11);
    }
    while (v9 != v10);
    uint64_t v9 = v1[317];
  }
  v1[318] = v9;
  v1[320] = 0;
  return result;
}

uint64_t sub_1CC3E7508(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2744);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  *(void *)(a1 + 920) = 0;
  return result;
}

void sub_1CC3E7558(uint64_t a1)
{
  *(void *)a1 = &unk_1F2610E98;
  uint64_t v2 = *(void *)(a1 + 2736);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 2744);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v6 = (void **)(a1 + 2784);
  sub_1CC291398(&v6);
  unint64_t v4 = *(void **)(a1 + 2760);
  if (v4)
  {
    *(void *)(a1 + 2768) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 2712);
  if (v5)
  {
    *(void *)(a1 + 2720) = v5;
    operator delete(v5);
  }
  sub_1CD51759C((void *)(a1 + 2632));
  sub_1CC29121C(a1);
}

void sub_1CC3E7634(uint64_t a1)
{
  sub_1CC3E7558(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3E766C(void *a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a2;
    uint64_t v5 = a1 + 43;
    uint64_t v6 = a2 + 16 * a3;
    do
    {
      unint64_t v7 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
      if ((~*(_DWORD *)v3 & 6) != 0 || *(_DWORD *)(v3 + 8) < 4u)
      {
        int v8 = *(_DWORD *)(v7 + 208) - 1;
        *(_DWORD *)(v7 + 208) = v8;
        if (v8) {
          BOOL v9 = 1;
        }
        else {
          BOOL v9 = v5 == (void *)v7;
        }
        if (!v9)
        {
          uint64_t v10 = (unint64_t *)a1[340];
          unint64_t v11 = a1[341];
          if ((unint64_t)v10 >= v11)
          {
            uint64_t v13 = (void *)a1[339];
            uint64_t v14 = v10 - v13;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61) {
              abort();
            }
            uint64_t v16 = v11 - (void)v13;
            if (v16 >> 2 > v15) {
              unint64_t v15 = v16 >> 2;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              if (v17 >> 61) {
                sub_1CB833614();
              }
              unsigned int v18 = (char *)operator new(8 * v17);
            }
            else
            {
              unsigned int v18 = 0;
            }
            unsigned int v19 = (unint64_t *)&v18[8 * v14];
            *unsigned int v19 = v7;
            uint64_t v12 = v19 + 1;
            if (v10 != v13)
            {
              do
              {
                unint64_t v20 = *--v10;
                *--unsigned int v19 = v20;
              }
              while (v10 != v13);
              uint64_t v10 = (unint64_t *)a1[339];
            }
            a1[339] = v19;
            a1[340] = v12;
            a1[341] = &v18[8 * v17];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            unint64_t *v10 = v7;
            uint64_t v12 = v10 + 1;
          }
          a1[340] = v12;
        }
      }
      else
      {
        --*(_DWORD *)(v7 + 216);
      }
      v3 += 16;
    }
    while (v3 != v6);
  }
}

void sub_1CC3E77D0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 2736) + 96))(*(void *)(a1 + 2736));
  uint64_t v2 = *(void **)(a1 + 2768);
  unint64_t v3 = *(void *)(a1 + 2776);
  if ((unint64_t)v2 >= v3)
  {
    uint64_t v5 = *(void **)(a1 + 2760);
    uint64_t v6 = v2 - v5;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      abort();
    }
    uint64_t v8 = v3 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 >> 61) {
        sub_1CB833614();
      }
      uint64_t v10 = (char *)operator new(8 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v11 = &v10[8 * v6];
    *(void *)unint64_t v11 = 0;
    unint64_t v4 = v11 + 8;
    if (v2 != v5)
    {
      do
      {
        uint64_t v12 = *--v2;
        *((void *)v11 - 1) = v12;
        v11 -= 8;
      }
      while (v2 != v5);
      uint64_t v2 = *(void **)(a1 + 2760);
    }
    *(void *)(a1 + 2760) = v11;
    *(void *)(a1 + 2768) = v4;
    *(void *)(a1 + 2776) = &v10[8 * v9];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = 0;
    unint64_t v4 = v2 + 1;
  }
  *(void *)(a1 + 2768) = v4;
}

uint64_t sub_1CC3E78E8()
{
  v4.n128_u64[0] = (unint64_t)"Enable scheduling after register allocation";
  v4.n128_u64[1] = 43;
  LOBYTE(v1) = 0;
  unint64_t v3 = &v1;
  int v2 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD1CA0, "post-RA-scheduler", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD1CA0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Break post-RA scheduling anti-dependencies: \"critical\", \"all\", or \"none\"";
  v4.n128_u64[1] = 72;
  unint64_t v3 = (int *)"none";
  int v2 = 1;
  sub_1CD568DFC((long long *)&v4, (const char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCD1EE0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Debug control MBBs that are scheduled";
  v4.n128_u64[1] = 37;
  int v1 = 1;
  int v2 = 0;
  unint64_t v3 = &v2;
  sub_1CD4965C8((llvm::cl::Option *)&unk_1EBCD1D60, "postra-sched-debugdiv", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCD1D60, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Debug control MBBs that are scheduled";
  v4.n128_u64[1] = 37;
  int v1 = 1;
  int v2 = 0;
  unint64_t v3 = &v2;
  sub_1CD4965C8((llvm::cl::Option *)&unk_1EBCD1E20, "postra-sched-debugmod", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCD1E20, &dword_1CB82C000);
}

void sub_1CC3E7A74()
{
}

double llvm::PreISelIntrinsicLoweringPass::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_1CC3E7B98(a1))
  {
    int v3 = 0;
    *(void *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    uint64_t v4 = a2 + 32;
  }
  else
  {
    *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
    uint64_t v4 = a2 + 32;
    int v3 = 1;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(void *)&double result = 2;
  *(void *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t sub_1CC3E7B98(uint64_t a1)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 24;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 != a1 + 24)
  {
    int v3 = 0;
    uint64_t v84 = a1 + 24;
    while (1)
    {
      if (v2) {
        uint64_t v4 = (uint64_t ***)(v2 - 56);
      }
      else {
        uint64_t v4 = 0;
      }
      unsigned int v5 = v4 >> 4;
      if ((*((unsigned char *)v4 + 34) & 0x40) == 0) {
        goto LABEL_22;
      }
      uint64_t v6 = ***v4;
      unint64_t v90 = v4;
      int v7 = *(_DWORD *)(v6 + 2520);
      if (!v7) {
        break;
      }
      uint64_t v8 = *(void *)(v6 + 2504);
      int v9 = v7 - 1;
      unsigned int v10 = v9 & (v5 ^ (v4 >> 9));
      unint64_t v11 = (void *)(v8 + 24 * v10);
      uint64_t v12 = (void ***)*v11;
      if ((uint64_t ***)*v11 != v4)
      {
        long long v68 = 0;
        int v69 = 1;
        while (v12 != (void ***)-4096)
        {
          if (v68) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v12 == (void ***)-8192;
          }
          if (v70) {
            long long v68 = v11;
          }
          unsigned int v71 = v10 + v69++;
          unsigned int v10 = v71 & v9;
          unint64_t v11 = (void *)(v8 + 24 * v10);
          uint64_t v12 = (void ***)*v11;
          if ((uint64_t ***)*v11 == v4) {
            goto LABEL_9;
          }
        }
        if (v68) {
          uint64_t v72 = v68;
        }
        else {
          uint64_t v72 = v11;
        }
        goto LABEL_96;
      }
LABEL_9:
      if (v11[2] == 22)
      {
        uint64_t v13 = (uint64_t *)v11[1];
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        uint64_t v16 = *(uint64_t *)((char *)v13 + 14);
        BOOL v17 = v14 == 0x657478652E726961 && v15 == 0x645F796C6C616E72;
        BOOL v18 = v17 && v16 == 0x64656E696665645FLL;
        if (v18 && (*((unsigned char *)v4 + 34) & 0x40) != 0)
        {
          uint64_t v19 = ***v4;
          unint64_t v90 = v4;
          int v20 = *(_DWORD *)(v19 + 2520);
          if (v20)
          {
            uint64_t v21 = *(void *)(v19 + 2504);
            int v22 = v20 - 1;
            unsigned int v23 = v22 & (v5 ^ (v4 >> 9));
            char v24 = (uint64_t ****)(v21 + 24 * v23);
            uint64_t v25 = *v24;
            if (*v24 == v4)
            {
LABEL_21:
              v24[1] = (uint64_t ***)"";
              v24[2] = 0;
              *((_DWORD *)v4 + 8) &= ~0x400000u;
              goto LABEL_22;
            }
            uint64_t v76 = 0;
            int v77 = 1;
            while (v25 != (uint64_t ***)-4096)
            {
              if (v76) {
                BOOL v78 = 0;
              }
              else {
                BOOL v78 = v25 == (uint64_t ***)-8192;
              }
              if (v78) {
                uint64_t v76 = v24;
              }
              unsigned int v79 = v23 + v77++;
              unsigned int v23 = v79 & v22;
              char v24 = (uint64_t ****)(v21 + 24 * v23);
              uint64_t v25 = *v24;
              if (*v24 == v4) {
                goto LABEL_21;
              }
            }
            if (v76) {
              unsigned int v80 = v76;
            }
            else {
              unsigned int v80 = v24;
            }
          }
          else
          {
            unsigned int v80 = 0;
          }
          char v24 = (uint64_t ****)sub_1CC5BF31C(v19 + 2504, (uint64_t)&v90, (uint64_t *)&v90, v80);
          uint64_t v81 = (uint64_t ***)v90;
          v24[1] = 0;
          v24[2] = 0;
          *char v24 = v81;
          goto LABEL_21;
        }
      }
LABEL_22:
      if ((*((unsigned char *)v4 + 23) & 0x10) == 0) {
        goto LABEL_38;
      }
      uint64_t v26 = ***v4;
      uint64_t v27 = *(void *)(v26 + 152);
      uint64_t v28 = *(unsigned int *)(v26 + 168);
      if (!v28) {
        goto LABEL_29;
      }
      LODWORD(v29) = (v28 - 1) & (v5 ^ (v4 >> 9));
      unint64_t v30 = (uint64_t ****)(v27 + 16 * v29);
      unint64_t v31 = *v30;
      if (*v30 != v4)
      {
        int v32 = 1;
        while (v31 != (uint64_t ***)-4096)
        {
          int v33 = v29 + v32++;
          uint64_t v29 = v33 & (v28 - 1);
          unint64_t v31 = *(uint64_t ****)(v27 + 16 * v29);
          if (v31 == v4)
          {
            unint64_t v30 = (uint64_t ****)(v27 + 16 * v29);
            goto LABEL_30;
          }
        }
LABEL_29:
        unint64_t v30 = (uint64_t ****)(v27 + 16 * v28);
      }
LABEL_30:
      uint64_t v34 = v30[1];
      if ((unint64_t)*v34 < 0x13
        || ((uint64_t v35 = v34[2], v36 = v34[3], v37 = *(uint64_t *)((char *)v34 + 27), v35 == (uint64_t **)0x616F6C2E6D766C6CLL)
          ? (BOOL v38 = v36 == (uint64_t **)0x6974616C65722E64)
          : (BOOL v38 = 0),
            v38 ? (BOOL v39 = v37 == 0x2E65766974616C65) : (BOOL v39 = 0),
            !v39))
      {
LABEL_38:
        switch(*((_DWORD *)v4 + 9))
        {
          case 0xD0:
            __int16 v40 = "objc_autorelease";
            goto LABEL_123;
          case 0xD1:
            goto LABEL_123;
          case 0xD2:
            goto LABEL_123;
          case 0xD3:
            __int16 v40 = "objc_autoreleaseReturnValue";
            goto LABEL_123;
          case 0xD4:
            __int16 v40 = "objc_claimAutoreleasedReturnValue";
            goto LABEL_123;
          case 0xD7:
            __int16 v40 = "objc_copyWeak";
            goto LABEL_123;
          case 0xD8:
            __int16 v40 = "objc_destroyWeak";
            goto LABEL_123;
          case 0xD9:
            __int16 v40 = "objc_initWeak";
            goto LABEL_123;
          case 0xDA:
            __int16 v40 = "objc_loadWeak";
            goto LABEL_123;
          case 0xDB:
            __int16 v40 = "objc_loadWeakRetained";
            goto LABEL_123;
          case 0xDC:
            __int16 v40 = "objc_moveWeak";
            goto LABEL_123;
          case 0xDD:
            __int16 v40 = "objc_release";
            goto LABEL_110;
          case 0xDE:
            __int16 v40 = "objc_retain";
LABEL_110:
            uint64_t v74 = (uint64_t)v4;
            int v75 = 1;
            goto LABEL_124;
          case 0xDF:
            __int16 v40 = "objc_retain_autorelease";
            goto LABEL_123;
          case 0xE0:
            __int16 v40 = "objc_retainAutorelease";
            goto LABEL_123;
          case 0xE1:
            __int16 v40 = "objc_retainAutoreleaseReturnValue";
            goto LABEL_123;
          case 0xE2:
            __int16 v40 = "objc_retainAutoreleasedReturnValue";
            goto LABEL_123;
          case 0xE3:
            __int16 v40 = "objc_retainBlock";
            goto LABEL_123;
          case 0xE4:
            __int16 v40 = "objc_retainedObject";
            goto LABEL_123;
          case 0xE5:
            __int16 v40 = "objc_storeStrong";
            goto LABEL_123;
          case 0xE6:
            __int16 v40 = "objc_storeWeak";
            goto LABEL_123;
          case 0xE7:
            __int16 v40 = "objc_sync_enter";
            goto LABEL_123;
          case 0xE8:
            __int16 v40 = "objc_sync_exit";
            goto LABEL_123;
          case 0xE9:
            __int16 v40 = "objc_unretainedObject";
            goto LABEL_123;
          case 0xEA:
            __int16 v40 = "objc_unretainedPointer";
            goto LABEL_123;
          case 0xEB:
            __int16 v40 = "objc_unsafeClaimAutoreleasedReturnValue";
LABEL_123:
            uint64_t v74 = (uint64_t)v4;
            int v75 = 0;
LABEL_124:
            v3 |= sub_1CC3E8654(v74, v40, v75);
            break;
          default:
            goto LABEL_125;
        }
        goto LABEL_125;
      }
      if (v4[1])
      {
        uint64_t v85 = v26 + 1960;
        unint64_t v41 = llvm::PointerType::get((llvm::PointerType *)(v26 + 1960), 0);
        uint64_t v42 = v4[1];
        if (v42)
        {
          uint64_t v43 = v41;
          uint64_t v44 = ***v4 + 1912;
          while (1)
          {
            unint64_t v45 = (llvm::ValueAsMetadata *)v42[3];
            uint64_t v42 = (uint64_t **)v42[1];
            if (v45)
            {
              if (*((unsigned char *)v45 + 16) == 84 && *((uint64_t ****)v45 - 4) == v4) {
                break;
              }
            }
            if (!v42) {
              goto LABEL_83;
            }
          }
          uint64_t v46 = 0;
          uint64_t v47 = **(void **)v45;
          unint64_t v90 = &v92;
          uint64_t v91 = 0x200000000;
          uint64_t v95 = v47;
          uint64_t v96 = &v104;
          uint64_t v97 = v105;
          uint64_t v98 = 0;
          int v99 = 0;
          __int16 v100 = 512;
          char v101 = 7;
          uint64_t v93 = 0;
          unint64_t v94 = 0;
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v104 = &unk_1F2616E88;
          v105[0] = &unk_1F2617008;
          uint64_t v93 = *((void *)v45 + 5);
          unint64_t v94 = (char *)v45 + 24;
          uint64_t v48 = (unsigned __int8 *)*((void *)v45 + 6);
          v86[0] = v48;
          if (v48)
          {
            llvm::MetadataTracking::track((uint64_t)v86, v48, 2);
            uint64_t v46 = v86[0];
          }
          sub_1CB8461A4((uint64_t)&v90, 0, v46);
          if (!v86[0])
          {
LABEL_51:
            uint64_t v49 = (char *)v45 - 32 * (*((_DWORD *)v45 + 5) & 0x7FFFFFF);
            uint64_t v50 = *(uint64_t **)v49;
            uint64_t v51 = (const char *)*((void *)v49 + 4);
            __int16 v89 = 257;
            uint64_t v52 = sub_1CB930F7C((uint64_t *)&v90, v44, v50, v51, (uint64_t)v88);
            char v53 = v52;
            __int16 v87 = 257;
            if (*(void *)v52 != v43)
            {
              if (*((unsigned __int8 *)v52 + 16) <= 0x14u)
              {
                uint64_t v54 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v96 + 28))(v96, 49, v52, v43);
                char v53 = (llvm::Instruction *)v54;
                if (v54)
                {
                  if (*(unsigned __int8 *)(v54 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, void *, uint64_t, char *))(*v97 + 16))(v97, v54, v86, v93, v94);
                    if (v91)
                    {
                      uint64_t v66 = (llvm::MDNode **)v90;
                      long long v67 = (llvm::MDNode **)((char *)v90 + 16 * v91);
                      do
                      {
                        llvm::Instruction::setMetadata(v53, *(_DWORD *)v66, v66[1]);
                        v66 += 2;
                      }
                      while (v66 != v67);
                    }
                  }
                }
              }
              else
              {
                __int16 v89 = 257;
                char v53 = llvm::CastInst::Create(49, (uint64_t)v52, v43, v88, 0);
                (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, char *))(*v97 + 16))(v97, v53, v86, v93, v94);
                if (v91)
                {
                  uint64_t v63 = (llvm::MDNode **)v90;
                  uint64_t v64 = (llvm::MDNode **)((char *)v90 + 16 * v91);
                  do
                  {
                    llvm::Instruction::setMetadata(v53, *(_DWORD *)v63, v63[1]);
                    v63 += 2;
                  }
                  while (v63 != v64);
                }
              }
            }
            __int16 v87 = 257;
            char v55 = operator new(0x60uLL);
            v55[13] = v55[13] & 0x38000000 | 1;
            uint64_t v56 = (llvm::Instruction *)(v55 + 8);
            *(void *)char v55 = 0;
            *((void *)v55 + 1) = 0;
            *((void *)v55 + 2) = 0;
            *((void *)v55 + 3) = v55 + 8;
            __int16 v89 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v55 + 8), v85, (uint64_t)v53, v88, 0, 2, 0);
            (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, char *))(*v97 + 16))(v97, v56, v86, v93, v94);
            if (v91)
            {
              long long v59 = (llvm::MDNode **)v90;
              uint64_t v83 = (llvm::MDNode **)((char *)v90 + 16 * v91);
              do
              {
                llvm::Instruction::setMetadata(v56, *(_DWORD *)v59, v59[1]);
                v59 += 2;
              }
              while (v59 != v83);
            }
            long long v57 = (uint64_t *)*((void *)v45 - 4 * (*((_DWORD *)v45 + 5) & 0x7FFFFFF));
            __int16 v89 = 257;
            long long v58 = sub_1CB930F7C((uint64_t *)&v90, v44, v57, (const char *)v56, (uint64_t)v88);
            llvm::Value::doRAUW(v45, v58, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          int v60 = *(unsigned __int8 *)v86[0];
          if ((v60 - 4) > 0x1E)
          {
            if ((v60 - 3) >= 0xFFFFFFFE) {
              uint64_t v65 = v86[0];
            }
            else {
              uint64_t v65 = 0;
            }
            if ((v60 - 3) < 0xFFFFFFFE)
            {
              if (v60 == 3) {
                *(void *)(v86[0] + 8) = 0;
              }
              goto LABEL_51;
            }
            unint64_t v62 = v65 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v86[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v86[0] + 12)) {
              goto LABEL_51;
            }
            uint64_t v61 = *(void *)(v86[0] + 16);
            if ((v61 & 4) == 0) {
              goto LABEL_51;
            }
            unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFF8;
            if (!v62) {
              goto LABEL_51;
            }
          }
          v88[0] = (const char *)v86;
          sub_1CC5FA668(v62 + 16, v88);
          goto LABEL_51;
        }
      }
LABEL_83:
      uint64_t v1 = v84;
LABEL_125:
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == v1) {
        return v3 & 1;
      }
    }
    uint64_t v72 = 0;
LABEL_96:
    unint64_t v11 = sub_1CC5BF31C(v6 + 2504, (uint64_t)&v90, (uint64_t *)&v90, v72);
    unint64_t v73 = v90;
    v11[1] = 0;
    void v11[2] = 0;
    *unint64_t v11 = v73;
    goto LABEL_9;
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_1CC3E85B4()
{
}

void sub_1CC3E8614(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC3E864C(uint64_t a1, uint64_t a2)
{
  return sub_1CC3E7B98(a2);
}

BOOL sub_1CC3E8654(uint64_t a1, char *__s, int a3)
{
  v82[17] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v3 != 0;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (__s) {
    int v9 = (const char *)strlen(__s);
  }
  else {
    int v9 = 0;
  }
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v8, (unsigned __int8 *)__s, v9, *(llvm::PointerType **)(a1 + 24), 0);
  uint64_t v11 = v10;
  if (*(unsigned char *)(v10 + 16)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v10 == 0;
  }
  if (!v12)
  {
    int v13 = *(_DWORD *)(a1 + 32);
    unsigned int v14 = (v13 & 0xF) - 7;
    int v15 = *(_DWORD *)(v10 + 32);
    BOOL v16 = v14 >= 2;
    if (v14 >= 2) {
      unsigned int v17 = *(_DWORD *)(v10 + 32);
    }
    else {
      unsigned int v17 = v15 & 0xFFFFFFC0;
    }
    unsigned int v18 = v17 & 0xFFFFFFF0 | v13 & 0xF;
    *(_DWORD *)(v10 + 32) = v18;
    if (v16)
    {
      if (v15 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v10)) {
        goto LABEL_16;
      }
      unsigned int v18 = *(_DWORD *)(v11 + 32);
    }
    *(_DWORD *)(v11 + 32) = v18 | 0x4000;
LABEL_16:
    if (a3)
    {
      unsigned int v19 = *(_DWORD *)(v11 + 32) & 0xF;
      BOOL v20 = v19 > 0xA;
      int v21 = (1 << v19) & 0x63C;
      if (v20 || v21 == 0) {
        *(void *)(v11 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v11 + 112), **(uint64_t ***)v11, -1, 38);
      }
    }
  }
  int FunctionClass = llvm::objcarc::GetFunctionClass((llvm::objcarc *)a1, (const llvm::Function *)v10);
  uint64_t v24 = *(void *)(a1 + 8);
  if (v24)
  {
    unsigned int v75 = dword_1CFAC7348[FunctionClass];
    uint64_t v25 = (uint64_t *)(v11 + 8);
    do
    {
      uint64_t v26 = v24;
      uint64_t v27 = (uint64_t *)(v24 + 8);
      uint64_t v24 = *(void *)(v24 + 8);
      uint64_t v28 = (uint64_t ***)v27[2];
      uint64_t v29 = (uint64_t)*(v28 - 4);
      if (v29 && !*(unsigned char *)(v29 + 16) && v29 == a1 && *(void *)(v29 + 24) == (void)v28[9])
      {
        sub_1CBF537B4((uint64_t)v82, v28[5], (uint64_t)(v28 + 3), 0, 0, 0);
        uint64_t v33 = 0;
        int v34 = *((unsigned __int8 *)v28 + 16);
        if (v34 != 84)
        {
          if (v34 == 39) {
            uint64_t v33 = (*((_DWORD *)v28 + 20) + 1);
          }
          else {
            uint64_t v33 = 2;
          }
        }
        int v35 = *((_DWORD *)v28 + 5);
        uint64_t v36 = v35 & 0x7FFFFFF;
        uint64_t v37 = &v28[-4 * v36];
        if (v35 < 0 && (uint64_t v74 = (uint64_t)*(v37 - 1), (v74 & 0xFFFFFFFF0) != 0)) {
          uint64_t v38 = (*((_DWORD *)v37 - 3) - *(_DWORD *)((char *)v37 - v74));
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v39 = (uint64_t)&(&v28[-4 * v33])[-4 * v38 - 4];
        unsigned int v79 = v81;
        uint64_t v80 = 0x800000000;
        unint64_t v40 = v39 - (void)v37;
        if ((unint64_t)(v39 - (void)v37) >= 0x101) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v41 = (uint64_t *)v81;
        if (v37 != (uint64_t ***)v39)
        {
          uint64_t v42 = (uint64_t ***)v81;
          uint64_t v43 = 32 * v36 - 32 * v33 - 32 * v38 - 32;
          do
          {
            uint64_t v44 = *v37;
            v37 += 4;
            *v42++ = v44;
            v43 -= 32;
          }
          while (v43);
          unint64_t v41 = (uint64_t *)v79;
        }
        LODWORD(v80) = v40 >> 5;
        __int16 v78 = 257;
        unint64_t v45 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v82, inserted, (uint64_t **)v11, v41, v80, (uint64_t)v77, 0);
        uint64_t v46 = v45;
        if ((*((unsigned char *)v28 + 23) & 0x10) != 0)
        {
          uint64_t v47 = ***v28;
          uint64_t v48 = *(void *)(v47 + 152);
          uint64_t v49 = *(unsigned int *)(v47 + 168);
          if (v49)
          {
            LODWORD(v50) = (v49 - 1) & ((v28 >> 4) ^ (v28 >> 9));
            uint64_t v51 = (uint64_t ****)(v48 + 16 * v50);
            uint64_t v52 = *v51;
            if (*v51 != v28)
            {
              int v53 = 1;
              do
              {
                if (v52 == (uint64_t ***)-4096) {
                  goto LABEL_54;
                }
                int v54 = v50 + v53++;
                uint64_t v50 = v54 & (v49 - 1);
                uint64_t v52 = *(uint64_t ****)(v48 + 16 * v50);
              }
              while (v52 != v28);
              uint64_t v51 = (uint64_t ****)(v48 + 16 * v50);
            }
          }
          else
          {
LABEL_54:
            uint64_t v51 = (uint64_t ****)(v48 + 16 * v49);
          }
          char v55 = v51[1];
          long long v58 = (const char *)*v55;
          long long v57 = (const char *)(v55 + 2);
          uint64_t v56 = v58;
        }
        else
        {
          uint64_t v56 = 0;
          long long v57 = &byte_1CFBCE98E;
        }
        __int16 v78 = 261;
        v77[0] = v57;
        v77[1] = v56;
        llvm::Value::setNameImpl(v45, v77);
        if (v46 && !*((unsigned char *)v46 + 16))
        {
          if ((*((unsigned char *)v46 + 23) & 0x10) == 0) {
            goto LABEL_80;
          }
          uint64_t v60 = ***(void ***)v46;
          uint64_t v61 = *(void *)(v60 + 152);
          uint64_t v62 = *(unsigned int *)(v60 + 168);
          if (v62)
          {
            LODWORD(v63) = (v62 - 1) & ((v46 >> 4) ^ (v46 >> 9));
            uint64_t v64 = (llvm::Value **)(v61 + 16 * v63);
            uint64_t v65 = *v64;
            if (*v64 != v46)
            {
              int v66 = 1;
              do
              {
                if (v65 == (llvm::Value *)-4096) {
                  goto LABEL_72;
                }
                int v67 = v63 + v66++;
                uint64_t v63 = v67 & (v62 - 1);
                uint64_t v65 = *(llvm::Value **)(v61 + 16 * v63);
              }
              while (v65 != v46);
              uint64_t v64 = (llvm::Value **)(v61 + 16 * v63);
            }
          }
          else
          {
LABEL_72:
            uint64_t v64 = (llvm::Value **)(v61 + 16 * v62);
          }
          long long v68 = v64[1];
          unint64_t v71 = *(void *)v68;
          int v69 = (char *)v68 + 16;
          unint64_t v70 = v71;
          if (v71 >= 5 && (*(_DWORD *)v69 == *(_DWORD *)"llvm." ? (BOOL v72 = v69[4] == aLlvm_1[4]) : (BOOL v72 = 0), v72))
          {
            *((_DWORD *)v46 + 8) |= 0x2000u;
            int v73 = llvm::Function::lookupIntrinsicID(v69, v70);
          }
          else
          {
LABEL_80:
            int v73 = 0;
            *((_DWORD *)v46 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v46 + 9) = v73;
        }
        unsigned int v59 = *((_WORD *)v28 + 9) & 3;
        if (v75 > v59) {
          LOWORD(v59) = v75;
        }
        *((_WORD *)v46 + 9) = *((_WORD *)v46 + 9) & 0xFFFC | v59;
        if (v28[1]) {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v28, v46, (llvm::Value *)1);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (*(void *)v26)
      {
        **(void **)(v26 + 16) = v24;
        uint64_t v31 = *(void *)(v26 + 8);
        if (v31) {
          *(void *)(v31 + 16) = *(void *)(v26 + 16);
        }
      }
      *(void *)uint64_t v26 = v11;
      if (v11)
      {
        uint64_t v32 = *v25;
        *uint64_t v27 = *v25;
        if (v32) {
          *(void *)(v32 + 16) = v27;
        }
        *(void *)(v26 + 16) = v25;
        *uint64_t v25 = v26;
      }
    }
    while (v24);
  }
  return v3 != 0;
}

void sub_1CC3E8BE8()
{
}

void sub_1CC3E8C84()
{
}

void sub_1CC3E8DD4(llvm::Pass *this)
{
  *(void *)this = &unk_1F2610FC8;
  uint64_t v2 = (char *)*((void *)this + 51);
  if (v2 != (char *)this + 424) {
    free(v2);
  }
  if ((*((unsigned char *)this + 272) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 35), 8);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  unsigned int v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC3E8EB4(llvm::Pass *this)
{
  *(void *)this = &unk_1F2610FC8;
  uint64_t v2 = (char *)*((void *)this + 51);
  if (v2 != (char *)this + 424) {
    free(v2);
  }
  if ((*((unsigned char *)this + 272) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 35), 8);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  unsigned int v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3E8FA8(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::AAResultsWrapperPass::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC3E9038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(v3 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(v3 + 264) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 328);
  uint64_t v32 = a2 + 320;
  if (v4 != a2 + 320)
  {
    char v5 = 0;
    int v34 = (_DWORD *)(v3 + 272);
    uint64_t v35 = v3;
    while (1)
    {
      uint64_t v6 = v4 + 48;
      uint64_t v33 = v4;
      for (uint64_t i = *(void *)(v4 + 56); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if (**(_WORD **)(i + 16) == 10)
        {
          uint64_t v36 = i;
          sub_1CBB03C18((uint64_t)v34, &v36);
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v8 = *(unsigned int *)(v3 + 416);
      if (v8) {
        break;
      }
LABEL_52:
      uint64_t v4 = *(void *)(v33 + 8);
      if (v4 == v32) {
        return v5 & 1;
      }
    }
    while (1)
    {
      uint64_t v9 = *(void *)(v3 + 408) + 8 * v8;
      uint64_t v10 = *(void *)(v9 - 8);
      sub_1CBB08284(v34, (void *)(v9 - 8));
      --*(_DWORD *)(v3 + 416);
      unsigned int v11 = *(_DWORD *)(*(void *)(v10 + 32) + 4);
      if ((v11 & 0x80000000) != 0)
      {
        int v22 = *(int **)(*(void *)(*(void *)(v3 + 264) + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
        if (v22)
        {
          while (1)
          {
            int v23 = *v22;
            if ((*v22 & 0x81000000) == 0) {
              break;
            }
            int v22 = (int *)*((void *)v22 + 3);
            if (!v22) {
              goto LABEL_33;
            }
          }
LABEL_36:
          *int v22 = v23 | 0x10000000;
          uint64_t v24 = *((void *)v22 + 1);
          uint64_t v36 = v24;
          int v25 = **(unsigned __int16 **)(v24 + 16);
          if ((v25 - 9) <= 0x3C && ((1 << (v25 - 9)) & 0x1000000000000605) != 0
            || v25 == 0)
          {
            uint64_t v28 = *(unsigned int *)(v24 + 40);
            if (v28)
            {
              uint64_t v29 = *(_DWORD **)(v24 + 32);
              uint64_t v30 = 32 * v28;
              do
              {
                if ((*v29 & 0x310000FF) == 0) {
                  goto LABEL_49;
                }
                v29 += 8;
                v30 -= 32;
              }
              while (v30);
            }
            *(void *)(v24 + 16) = *(void *)(*(void *)(v35 + 248) + 8) + 480;
            sub_1CBB03C18((uint64_t)v34, &v36);
          }
LABEL_49:
          while (1)
          {
            int v22 = (int *)*((void *)v22 + 3);
            if (!v22) {
              break;
            }
            int v23 = *v22;
            if ((*v22 & 0x81000000) == 0) {
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v10 + 24) + 48;
        uint64_t v13 = *(void *)(v10 + 8);
        if (v13 == v12)
        {
LABEL_27:
          int v20 = *(_DWORD *)(v10 + 40);
          unsigned int v21 = v20 - 1;
          if (v20 != 1)
          {
            do
              llvm::MachineInstr::removeOperand((char *)v10, v21--);
            while (v21);
          }
          goto LABEL_34;
        }
        while (1)
        {
          uint64_t v14 = *(unsigned int *)(v13 + 40);
          if (v14)
          {
            char v15 = 0;
            BOOL v16 = *(int **)(v13 + 32);
            uint64_t v17 = 32 * v14;
            do
            {
              int v18 = *v16;
              if (!*v16)
              {
                unsigned int v19 = v16[1];
                if (v19 - 1 <= 0x3FFFFFFE
                  && (v11 == v19
                   || v11 - 1 <= 0x3FFFFFFE
                   && llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(v35 + 256) + 8), v11, v19)))
                {
                  if ((v18 & 0x1000000) == 0) {
                    *BOOL v16 = v18 | 0x10000000;
                  }
                  char v15 = 1;
                }
              }
              v16 += 8;
              v17 -= 32;
            }
            while (v17);
            if (v15) {
              break;
            }
          }
          uint64_t v13 = *(void *)(v13 + 8);
          if (v13 == v12) {
            goto LABEL_27;
          }
        }
      }
LABEL_33:
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v10);
LABEL_34:
      uint64_t v3 = v35;
      uint64_t v8 = *(unsigned int *)(v35 + 416);
      if (!v8)
      {
        char v5 = 1;
        goto LABEL_52;
      }
    }
  }
  char v5 = 0;
  return v5 & 1;
}

void sub_1CC3E9364(llvm *a1)
{
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CC3E9414(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61EF35;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F2611088;
  *(void *)(a1 + 256) = 0xFFFFFFFFLL;
  *(void *)(a1 + 264) = a1 + 280;
  *(void *)(a1 + 272) = 0x400000000;
  *(void *)(a1 + 312) = a1 + 328;
  *(void *)(a1 + 320) = 0x400000000;
  *(void *)(a1 + 368) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD1FD8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC3E9364;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCD1FD8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC3E953C()
{
}

void sub_1CC3E9578(llvm::Pass *this)
{
  *(void *)this = &unk_1F2611088;
  uint64_t v2 = (char *)*((void *)this + 39);
  if (v2 != (char *)this + 328) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 33);
  if (v3 != (char *)this + 280) {
    free(v3);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v4 = (char *)*((void *)this + 22);
  if (v4 != (char *)this + 192) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 13);
  if (v5 != (char *)this + 120) {
    free(v5);
  }
  uint64_t v6 = (char *)*((void *)this + 4);
  if (v6 != (char *)this + 48) {
    free(v6);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC3E9654(llvm::Pass *this)
{
  *(void *)this = &unk_1F2611088;
  uint64_t v2 = (char *)*((void *)this + 39);
  if (v2 != (char *)this + 328) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 33);
  if (v3 != (char *)this + 280) {
    free(v3);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v4 = (char *)*((void *)this + 22);
  if (v4 != (char *)this + 192) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 13);
  if (v5 != (char *)this + 120) {
    free(v5);
  }
  uint64_t v6 = (char *)*((void *)this + 4);
  if (v6 != (char *)this + 48) {
    free(v6);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3E9744(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineOptimizationRemarkEmitterPass::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC3E97FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v874 = *MEMORY[0x1E4F143B8];
  uint64_t v803 = *a2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 176))(a2[2]);
  uint64_t v804 = (*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 112))(a2[2]);
  v828 = (llvm::MachineFunction *)a2;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v4 + 376))(v4, a2)) {
    operator new();
  }
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 360) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 392))(v4, a2);
  char v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v802 = v4;
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::MachineOptimizationRemarkEmitterPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  *(void *)(a1 + 368) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
  uint64_t v9 = (llvm::MachineFunction *)a2;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 104))(a2[2]);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)v9 + 2) + 112))(*((void *)v9 + 2));
  BOOL v12 = *(_DWORD *)(v10 + 64) == -1 && *(_DWORD *)(v10 + 68) == -1;
  uint64_t v815 = a1;
  if (v12) {
    goto LABEL_55;
  }
  uint64_t v13 = a2[7];
  uint64_t v14 = (uint64_t *)a2[41];
  if (v14 == a2 + 40)
  {
    *(_DWORD *)(v13 + 72) = 0;
    uint64_t v9 = (llvm::MachineFunction *)a2;
    goto LABEL_55;
  }
  uint64_t v816 = v11;
  unsigned int v15 = 0;
  BOOL v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v813 = *((void *)v828 + 7);
  int v19 = *(unsigned __int8 *)(v13 + 61) != 0;
  do
  {
    int v20 = v14 + 6;
    v829 = v14;
    uint64_t v21 = v14[7];
    while ((void *)v21 != v20)
    {
      int v22 = **(unsigned __int16 **)(v21 + 16);
      if (*(_DWORD *)(v10 + 64) != v22 && *(_DWORD *)(v10 + 68) != v22)
      {
        if ((v22 - 1) <= 1) {
          v19 |= (*(unsigned char *)(*(void *)(v21 + 32) + 48) & 2) >> 1;
        }
        goto LABEL_33;
      }
      if (v15 <= *(_DWORD *)(*(void *)(v21 + 32) + 16)) {
        unsigned int v15 = *(_DWORD *)(*(void *)(v21 + 32) + 16);
      }
      if (v17 < v18)
      {
        *(void *)uint64_t v17 = v21;
        v17 += 8;
        int v19 = 1;
LABEL_33:
        uint64_t v28 = v16;
LABEL_41:
        if ((*(unsigned char *)v21 & 4) != 0) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      uint64_t v23 = (v17 - v16) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        goto LABEL_1002;
      }
      uint64_t v25 = v18 - v16;
      if (v25 >> 2 > v24) {
        unint64_t v24 = v25 >> 2;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        if (v26 >> 61) {
LABEL_1389:
        }
          sub_1CB833614();
        uint64_t v27 = (char *)operator new(8 * v26);
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v27[8 * v23];
      *(void *)uint64_t v28 = v21;
      uint64_t v29 = v28 + 8;
      while (v17 != v16)
      {
        uint64_t v30 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v28 - 1) = v30;
        v28 -= 8;
      }
      if (v16) {
        operator delete(v16);
      }
      int v18 = &v27[8 * v26];
      int v19 = 1;
      uint64_t v17 = v29;
      if (v21) {
        goto LABEL_41;
      }
LABEL_44:
      while ((*(_WORD *)(v21 + 44) & 8) != 0)
        uint64_t v21 = *(void *)(v21 + 8);
LABEL_45:
      uint64_t v21 = *(void *)(v21 + 8);
      BOOL v16 = v28;
    }
    uint64_t v14 = (uint64_t *)v829[1];
  }
  while (v14 != (uint64_t *)((char *)v828 + 320));
  a1 = v815;
  *(unsigned char *)(v813 + 61) = v19 & 1;
  *(_DWORD *)(v813 + 72) = v15;
  if (v16 != v17)
  {
    uint64_t v31 = v16;
    do
    {
      uint64_t v32 = *(void *)v31;
      if ((*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(void *)v816 + 216))(v816, v828)) {
        (*(void (**)(uint64_t, llvm::MachineFunction *, void, uint64_t))(*(void *)v816 + 296))(v816, v828, *(void *)(v32 + 24), v32);
      }
      v31 += 8;
    }
    while (v31 != v17);
  }
  uint64_t v9 = v828;
  if (v16) {
    operator delete(v16);
  }
LABEL_55:
  uint64_t v33 = *((void *)v9 + 7);
  uint64_t v34 = *(void *)(v33 + 656);
  if (!v34)
  {
    unsigned int v39 = *(_DWORD *)(a1 + 272);
    if (v39 >= *(_DWORD *)(a1 + 276)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 264) + 8 * v39) = *((void *)v9 + 41);
    ++*(_DWORD *)(a1 + 272);
    uint64_t v40 = *((void *)v9 + 41);
    if ((llvm::MachineFunction *)v40 == (llvm::MachineFunction *)((char *)v9 + 320)) {
      goto LABEL_99;
    }
    while (1)
    {
      if (*(unsigned char *)(v40 + 189))
      {
        unint64_t v41 = *(unsigned int *)(a1 + 272);
        if (v41 >= *(unsigned int *)(a1 + 276)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 264) + 8 * v41) = v40;
        ++*(_DWORD *)(a1 + 272);
      }
      unint64_t v42 = *(void *)(v40 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (v40 + 48 == v42) {
        goto LABEL_81;
      }
      if (v42 && (*(unsigned char *)v42 & 4) != 0)
      {
        __int16 v43 = *(_WORD *)(v42 + 44);
      }
      else
      {
        while (1)
        {
          __int16 v43 = *(_WORD *)(v42 + 44);
          if ((v43 & 4) == 0) {
            break;
          }
          unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v44 = v43 & 0xC;
      int v45 = v43 & 4;
      uint64_t v46 = *(void *)(*(void *)(v42 + 16) + 8);
      if (v44 && v45 == 0) {
        break;
      }
      if ((v46 & 0x20) != 0) {
        goto LABEL_79;
      }
LABEL_81:
      uint64_t v40 = *(void *)(v40 + 8);
      if ((llvm::MachineFunction *)v40 == (llvm::MachineFunction *)((char *)v9 + 320)) {
        goto LABEL_99;
      }
    }
    while ((v46 & 0x20) == 0)
    {
      if ((*(_WORD *)(v42 + 44) & 8) == 0) {
        goto LABEL_81;
      }
      unint64_t v42 = *(void *)(v42 + 8);
      LOBYTE(v46) = *(unsigned char *)(*(void *)(v42 + 16) + 8);
    }
LABEL_79:
    unint64_t v48 = *(unsigned int *)(a1 + 320);
    if (v48 >= *(unsigned int *)(a1 + 324)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 312) + 8 * v48) = v40;
    ++*(_DWORD *)(a1 + 320);
    goto LABEL_81;
  }
  unsigned int v35 = *(_DWORD *)(a1 + 272);
  if (v35 >= *(_DWORD *)(a1 + 276)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 264) + 8 * v35) = v34;
  ++*(_DWORD *)(a1 + 272);
  uint64_t v36 = *(void **)(v33 + 664);
  if (v36[11] != v36[12]) {
    goto LABEL_97;
  }
  unint64_t v37 = v36[6] & 0xFFFFFFFFFFFFFFF8;
  if (v36 + 6 == (void *)v37) {
    goto LABEL_99;
  }
  if (v37 && (*(unsigned char *)v37 & 4) != 0)
  {
    __int16 v38 = *(_WORD *)(v37 + 44);
  }
  else
  {
    while (1)
    {
      __int16 v38 = *(_WORD *)(v37 + 44);
      if ((v38 & 4) == 0) {
        break;
      }
      unint64_t v37 = *(void *)v37 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  int v49 = v38 & 0xC;
  int v50 = v38 & 4;
  uint64_t v51 = *(void *)(*(void *)(v37 + 16) + 8);
  if (v49) {
    BOOL v52 = v50 == 0;
  }
  else {
    BOOL v52 = 0;
  }
  if (v52)
  {
    if ((v51 & 0x20) == 0)
    {
      while ((*(_WORD *)(v37 + 44) & 8) != 0)
      {
        unint64_t v37 = *(void *)(v37 + 8);
        if ((*(unsigned char *)(*(void *)(v37 + 16) + 8) & 0x20) != 0) {
          goto LABEL_97;
        }
      }
      goto LABEL_99;
    }
LABEL_97:
    unsigned int v53 = *(_DWORD *)(a1 + 320);
    if (v53 >= *(_DWORD *)(a1 + 324)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 312) + 8 * v53) = v36;
    ++*(_DWORD *)(a1 + 320);
    goto LABEL_99;
  }
  if ((v51 & 0x20) != 0) {
    goto LABEL_97;
  }
LABEL_99:
  uint64_t v836 = 1;
  v814 = &v837;
  v800 = &v839;
  for (uint64_t i = 8; i != 232; i += 56)
    *(uint64_t *)((char *)&v836 + i) = -4096;
  uint64_t v55 = *(unsigned int *)(a1 + 272);
  if (v55)
  {
    uint64_t v56 = *(uint64_t **)(v815 + 264);
    v821 = &v56[v55];
    while (1)
    {
      uint64_t v57 = *v56;
      v862 = (uint64_t *)&v864;
      uint64_t v863 = 0x400000000;
      for (uint64_t j = *(void *)(v57 + 56); j != v57 + 48; uint64_t j = *(void *)(j + 8))
      {
        int v59 = **(unsigned __int16 **)(j + 16);
        if ((v59 - 13) > 4) {
          break;
        }
        if ((unsigned __int16)(v59 - 13) <= 1u)
        {
          uint64_t v60 = *(void *)(j + 32);
          uint64_t v61 = *(void *)(v60 + ((unint64_t)(v59 != 14) << 6) + 16);
          if (*(_WORD *)(v61 + 32))
          {
            if (v59 == 14)
            {
              uint64_t v62 = *(unsigned int *)(j + 40);
              if (v62 != 2)
              {
                uint64_t v63 = (unsigned char *)(v60 + 64);
                uint64_t v64 = (unsigned char *)(v60 + 32 * v62);
                goto LABEL_112;
              }
LABEL_114:
              uint64_t v65 = v59 == 14 ? 32 : 96;
              if (v863)
              {
                uint64_t v66 = *(void *)(v60 + v65 + 16);
                int v67 = v862;
                uint64_t v68 = 8 * v863;
                while (1)
                {
                  int v69 = **(unsigned __int16 **)(*v67 + 16);
                  uint64_t v70 = *(void *)(*v67 + 32);
                  if (*(void *)(v70 + ((unint64_t)(v69 != 14) << 6) + 16) == v61)
                  {
                    uint64_t v71 = v69 == 14 ? 32 : 96;
                    if (sub_1CC3EF174(v66, *(void *)(v70 + v71 + 16))) {
                      break;
                    }
                  }
                  ++v67;
                  v68 -= 8;
                  if (!v68) {
                    goto LABEL_125;
                  }
                }
              }
              else
              {
LABEL_125:
                uint64_t v852 = v57;
                BOOL v72 = sub_1CD5691D0(&v836, &v852);
                unint64_t v73 = *((unsigned int *)v72 + 4);
                if (v73 >= *((unsigned int *)v72 + 5)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v72[1] + 8 * v73) = j;
                ++*((_DWORD *)v72 + 4);
              }
            }
            else
            {
              uint64_t v64 = (unsigned char *)(v60 + 32);
              uint64_t v63 = *(unsigned char **)(j + 32);
LABEL_112:
              while (*v63 != 5)
              {
                v63 += 32;
                if (v63 == v64) {
                  goto LABEL_114;
                }
              }
              if (v863 >= (unint64_t)HIDWORD(v863)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v862[v863] = j;
              LODWORD(v863) = v863 + 1;
            }
            if (!j) {
              goto LABEL_133;
            }
          }
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
LABEL_133:
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      if (v836) {
        break;
      }
      int v74 = v838;
      if (v838)
      {
        unsigned int v75 = v837;
LABEL_139:
        int v76 = v74 - 1;
        unsigned int v77 = v76 & ((v57 >> 4) ^ (v57 >> 9));
        uint64_t v78 = v75[7 * v77];
        if (v78 == v57)
        {
LABEL_143:
          uint64_t v852 = v57;
          uint64_t v81 = sub_1CD5691D0(&v836, &v852);
          uint64_t v82 = *((unsigned int *)v81 + 4);
          if (v82)
          {
            uint64_t v83 = (void *)v81[1];
            uint64_t v84 = &v83[v82];
            do
            {
              uint64_t v85 = *v83;
              uint64_t v86 = *(void *)(*(void *)(*v83 + 24) + 32);
              if (v86)
              {
                uint64_t v87 = *(void *)(v86 + 728);
                if (v87) {
                  (*(void (**)(uint64_t, void))(*(void *)v87 + 32))(v87, *v83);
                }
                uint64_t v88 = *(unsigned int *)(v85 + 40);
                if (v88)
                {
                  uint64_t v89 = *(void *)(v85 + 32);
                  uint64_t v90 = *(void *)(v86 + 40);
                  uint64_t v91 = 32 * v88;
                  do
                  {
                    if (!*(unsigned char *)v89)
                    {
                      uint64_t v92 = *(unsigned int *)(v89 + 4);
                      if ((v92 & 0x80000000) != 0) {
                        uint64_t v93 = (uint64_t *)(*(void *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        uint64_t v93 = (uint64_t *)(*(void *)(v90 + 272) + 8 * v92);
                      }
                      uint64_t v94 = *v93;
                      uint64_t v96 = *(void *)(v89 + 16);
                      uint64_t v95 = *(void *)(v89 + 24);
                      if (v89 != *v93) {
                        uint64_t v93 = (uint64_t *)(v96 + 24);
                      }
                      *uint64_t v93 = v95;
                      if (v95) {
                        uint64_t v97 = v95;
                      }
                      else {
                        uint64_t v97 = v94;
                      }
                      *(void *)(v97 + 16) = v96;
                      *(void *)(v89 + 16) = 0;
                      *(void *)(v89 + 24) = 0;
                    }
                    v89 += 32;
                    v91 -= 32;
                  }
                  while (v91);
                }
              }
              *(void *)(v85 + 24) = 0;
              uint64_t v98 = *(unint64_t **)(v85 + 8);
              unint64_t v99 = *(void *)v85 & 0xFFFFFFFFFFFFFFF8;
              *uint64_t v98 = v99 | *v98 & 7;
              *(void *)(v99 + 8) = v98;
              *(void *)v85 &= 7uLL;
              *(void *)(v85 + 8) = 0;
              ++v83;
            }
            while (v83 != v84);
          }
        }
        else
        {
          int v79 = 1;
          while (v78 != -4096)
          {
            unsigned int v80 = v77 + v79++;
            unsigned int v77 = v80 & v76;
            uint64_t v78 = v75[7 * v77];
            if (v78 == v57) {
              goto LABEL_143;
            }
          }
        }
      }
      if (v862 != (uint64_t *)&v864) {
        free(v862);
      }
      if (++v56 == v821) {
        goto LABEL_169;
      }
    }
    int v74 = 4;
    unsigned int v75 = &v837;
    goto LABEL_139;
  }
LABEL_169:
  __int16 v100 = v828;
  uint64_t v101 = v815;
  if ((*(uint64_t (**)(void))(**((void **)v828 + 1) + 184))(*((void *)v828 + 1)))
  {
    uint64_t v102 = *(void *)v828;
    uint64_t v103 = (*(uint64_t (**)(void))(**((void **)v828 + 2) + 112))(*((void *)v828 + 2));
    uint64_t v811 = *((void *)v828 + 7);
    *(void *)(v815 + 256) = 0xFFFFFFFFLL;
    v846.__r_.__value_.__r.__words[0] = (std::string::size_type)&v846.__r_.__value_.__r.__words[2];
    v846.__r_.__value_.__l.__size_ = 0x600000000;
    unsigned int v851 = 0;
    (*(void (**)(void))(*(void *)v103 + 264))();
    if (!v851)
    {
LABEL_256:
      uint64_t v157 = *(void *)(v102 + 112);
      if (v157 && (*(unsigned char *)(v157 + 14) & 2) != 0
        || (*(unsigned char *)(v811 + 104) = 1, *(void *)(v811 + 80) == *(void *)(v811 + 88)))
      {
LABEL_566:
        if ((std::string::size_type *)v846.__r_.__value_.__l.__data_ != &v846.__r_.__value_.__r.__words[2]) {
          free(v846.__r_.__value_.__l.__data_);
        }
        uint64_t v101 = v815;
        __int16 v100 = v828;
        goto LABEL_569;
      }
      uint64_t v158 = *(unsigned int *)(v815 + 272);
      if (v158)
      {
        uint64_t v159 = *(void *)(v815 + 264);
        uint64_t v805 = v159 + 8 * v158;
        while (1)
        {
          uint64_t v808 = v159;
          int v160 = *(void **)v159;
          BOOL v161 = *(unsigned int **)(v811 + 80);
          unsigned int v162 = *(unsigned int **)(v811 + 88);
          uint64_t v163 = *(void *)(*(void *)v159 + 32);
          v830 = (void *)(*(uint64_t (**)(void))(**(void **)(v163 + 16) + 104))(*(void *)(v163 + 16));
          uint64_t v164 = (*(uint64_t (**)(void))(**(void **)(v163 + 16) + 112))(*(void *)(v163 + 16));
          uint64_t v165 = (*(uint64_t (**)(void))(**(void **)(v163 + 16) + 176))(*(void *)(v163 + 16));
          int v166 = (unint64_t *)v160[7];
          uint64_t v818 = v165;
          if (((*(uint64_t (**)(uint64_t, void *, unint64_t *, unsigned int *, unint64_t))(*(void *)v164 + 176))(v164, v160, v166, v161, 0xAAAAAAAAAAAAAAABLL * (v162 - v161)) & 1) == 0)break; {
LABEL_262:
          }
          uint64_t v159 = v808 + 8;
          if (v808 + 8 == v805) {
            goto LABEL_334;
          }
        }
        if (v162 == v161)
        {
LABEL_328:
          for (uint64_t k = v160[7]; (unint64_t *)k != v166; uint64_t k = *(void *)(k + 8))
          {
            __int16 v198 = *(_WORD *)(k + 44);
            *(_WORD *)(k + 44) = v198 | 1;
            if ((*(unsigned char *)k & 4) == 0 && (v198 & 8) != 0)
            {
              do
                uint64_t k = *(void *)(k + 8);
              while ((*(_WORD *)(k + 44) & 8) != 0);
            }
          }
          goto LABEL_262;
        }
        v823 = &v161[v162 - v161];
        while (1)
        {
          unint64_t v167 = *v161;
          if (!*((unsigned char *)v161 + 9))
          {
            int v180 = *(uint64_t ***)(v818 + 240);
            int v181 = *(uint64_t ***)(v818 + 248);
            if (v180 == v181)
            {
              int v182 = 0;
            }
            else
            {
              int v182 = 0;
              unint64_t v183 = v167 >> 3;
              do
              {
                if ((v167 - 0x40000000) >= 0xC0000001)
                {
                  uint64_t v184 = **v180;
                  if (v183 < *(unsigned __int16 *)(v184 + 22)
                    && ((1 << (v167 & 7)) & *(unsigned __int8 *)(*(void *)(v184 + 8) + v183)) != 0
                    && (!v182
                     || *v180 != v182
                     && ((*(_DWORD *)(v182[1] + ((*(unsigned __int16 *)(v184 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v184 + 24)) & 1) != 0))
                  {
                    int v182 = *v180;
                  }
                }
                ++v180;
              }
              while (v180 != v181);
            }
            (*(void (**)(void *, void *, unint64_t *, void, uint64_t, void, uint64_t *, uint64_t))(*v830 + 448))(v830, v160, v166, *v161, 1, v161[1], v182, v818);
            goto LABEL_312;
          }
          uint64_t v839 = 0;
          uint64_t v168 = v830[1] + 912;
          unsigned int v169 = v161[1];
          uint64_t v170 = (llvm::MachineFunction *)v160[4];
          uint64_t v852 = 0;
          uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v170, v168, (unsigned __int8 **)&v852, 0);
          if (v852)
          {
            int v193 = *(unsigned __int8 *)v852;
            if ((v193 - 4) > 0x1E)
            {
              if ((v193 - 3) >= 0xFFFFFFFE) {
                uint64_t v196 = v852;
              }
              else {
                uint64_t v196 = 0;
              }
              if ((v193 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v195 = v196 + 8;
LABEL_325:
                v862 = &v852;
                sub_1CC5FA668(v195 + 16, &v862);
                goto LABEL_268;
              }
              if (v193 == 3) {
                *(void *)(v852 + 8) = 0;
              }
            }
            else if ((*(unsigned char *)(v852 + 1) & 0x7F) == 2 || *(_DWORD *)(v852 + 12))
            {
              uint64_t v194 = *(void *)(v852 + 16);
              if ((v194 & 4) != 0)
              {
                unint64_t v195 = v194 & 0xFFFFFFFFFFFFFFF8;
                if (v195) {
                  goto LABEL_325;
                }
              }
            }
          }
LABEL_268:
          uint64_t v172 = v160[5];
          *((void *)MachineInstr + 3) = v172;
          uint64_t v173 = *(void *)(v172 + 32);
          uint64_t v174 = *((unsigned int *)MachineInstr + 10);
          if (v174)
          {
            uint64_t v186 = *((void *)MachineInstr + 4);
            uint64_t v187 = *(void *)(v173 + 40);
            uint64_t v188 = 32 * v174;
            do
            {
              if (!*(unsigned char *)v186)
              {
                uint64_t v189 = *(unsigned int *)(v186 + 4);
                if ((int)v189 >= 0) {
                  v190 = (uint64_t *)(*(void *)(v187 + 272) + 8 * v189);
                }
                else {
                  v190 = (uint64_t *)(*(void *)(v187 + 24) + 16 * (v189 & 0x7FFFFFFF) + 8);
                }
                uint64_t v191 = *v190;
                if (*v190)
                {
                  uint64_t v192 = *(void *)(v191 + 16);
                  *(void *)(v191 + 16) = v186;
                  *(void *)(v186 + 16) = v192;
                  if (*(unsigned char *)(v186 + 3))
                  {
                    *(void *)(v186 + 24) = v191;
                  }
                  else
                  {
                    *(void *)(v186 + 24) = 0;
                    v190 = (uint64_t *)(v192 + 24);
                  }
                }
                else
                {
                  *(void *)(v186 + 16) = v186;
                  *(void *)(v186 + 24) = 0;
                }
                uint64_t *v190 = v186;
              }
              v186 += 32;
              v188 -= 32;
            }
            while (v188);
          }
          uint64_t v175 = *(void *)(v173 + 728);
          if (v175) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v175 + 24))(v175, MachineInstr);
          }
          unint64_t v176 = *v166 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t MachineInstr = v176 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v166;
          *(void *)(v176 + 8) = MachineInstr;
          *int v166 = *v166 & 7 | (unint64_t)MachineInstr;
          uint64_t v863 = 0;
          long long v864 = 0uLL;
          HIDWORD(v862) = v169;
          LODWORD(v862) = 0x1000000;
          llvm::MachineInstr::addOperand(MachineInstr, v170, (const llvm::MachineOperand *)&v862);
          uint64_t v863 = 0;
          long long v864 = 0uLL;
          HIDWORD(v862) = v167;
          LODWORD(v862) = 0x4000000;
          llvm::MachineInstr::addOperand(MachineInstr, v170, (const llvm::MachineOperand *)&v862);
          if (!v839) {
            goto LABEL_312;
          }
          int v177 = *(unsigned __int8 *)v839;
          if ((v177 - 4) > 0x1E)
          {
            if ((v177 - 3) >= 0xFFFFFFFE) {
              uint64_t v185 = v839;
            }
            else {
              uint64_t v185 = 0;
            }
            if ((v177 - 3) < 0xFFFFFFFE)
            {
              if (v177 == 3) {
                *(void *)(v839 + 8) = 0;
              }
              goto LABEL_312;
            }
            unint64_t v179 = v185 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v839 + 1) & 0x7F) != 2 && !*(_DWORD *)(v839 + 12)) {
              goto LABEL_312;
            }
            uint64_t v178 = *(void *)(v839 + 16);
            if ((v178 & 4) == 0) {
              goto LABEL_312;
            }
            unint64_t v179 = v178 & 0xFFFFFFFFFFFFFFF8;
            if (!v179) {
              goto LABEL_312;
            }
          }
          v862 = &v839;
          sub_1CC5FA668(v179 + 16, &v862);
LABEL_312:
          v161 += 3;
          if (v161 == v823) {
            goto LABEL_328;
          }
        }
      }
LABEL_334:
      int v199 = (void *)*((void *)v828 + 7);
      BOOL v200 = &v865;
      v862 = (uint64_t *)&v865;
      uint64_t v863 = (uint64_t)&v865;
      LODWORD(v864) = 8;
      DWORD2(v864) = 0;
      uint64_t v852 = (uint64_t)&v854;
      uint64_t v853 = 0x800000000;
      unint64_t v201 = *((void *)v828 + 41);
      if (v199[82]) {
        unint64_t v202 = v199[82];
      }
      else {
        unint64_t v202 = *((void *)v828 + 41);
      }
      if (v201 == v202)
      {
        unsigned int v203 = 0;
        uint64_t v204 = v815;
LABEL_341:
        DWORD1(v864) = v203 + 1;
        unint64_t *v200 = v202;
        uint64_t v205 = v199[83];
        if (v205)
        {
LABEL_342:
          *((void *)&v854 + v203++) = v205;
          goto LABEL_345;
        }
        if (v201 != v202)
        {
          uint64_t v205 = 0;
          unsigned int v203 = 1;
          goto LABEL_345;
        }
LABEL_392:
        unint64_t v225 = (unsigned int *)v199[10];
        uint64_t v226 = (unsigned int *)v199[11];
        if (v225 != v226)
        {
          uint64_t v831 = *((void *)v828 + 5);
          v824 = (unsigned int *)v199[11];
          do
          {
            if ((uint64_t *)v863 == v862) {
              uint64_t v227 = (unsigned int *)&v864 + 1;
            }
            else {
              uint64_t v227 = (unsigned int *)&v864;
            }
            uint64_t v228 = *v227;
            if (v228)
            {
              uint64_t v229 = 8 * v228;
              uint64_t v230 = (unint64_t *)v863;
              while (*v230 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v230;
                v229 -= 8;
                if (!v229) {
                  goto LABEL_435;
                }
              }
            }
            else
            {
              uint64_t v230 = (unint64_t *)v863;
            }
            uint64_t v231 = (unint64_t *)(v863 + 8 * v228);
            if (v230 != v231)
            {
              uint64_t v232 = (void *)*v230;
              while (1)
              {
                if (((*(void *)(*(void *)(v831 + 352) + (((unint64_t)*v225 >> 3) & 0x1FF8)) >> *v225) & 1) == 0)
                {
                  int v233 = (unsigned __int16)*v225;
                  uint64_t v234 = (unsigned __int16 *)v232[19];
                  v235 = (unsigned __int16 *)v232[20];
                  if (v234 == v235) {
                    goto LABEL_410;
                  }
                  unsigned int v236 = (unsigned __int16 *)v232[19];
                  while (*v236 != v233)
                  {
                    v236 += 8;
                    if (v236 == v235) {
                      goto LABEL_410;
                    }
                  }
                  if (!*((void *)v236 + 1))
                  {
LABEL_410:
                    unint64_t v237 = v232[21];
                    if ((unint64_t)v235 >= v237)
                    {
                      uint64_t v239 = ((char *)v235 - (char *)v234) >> 4;
                      unint64_t v240 = v239 + 1;
                      if ((unint64_t)(v239 + 1) >> 60) {
                        goto LABEL_1002;
                      }
                      uint64_t v241 = v237 - (void)v234;
                      if (v241 >> 3 > v240) {
                        unint64_t v240 = v241 >> 3;
                      }
                      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v242 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v242 = v240;
                      }
                      if (v242)
                      {
                        if (v242 >> 60) {
                          goto LABEL_1389;
                        }
                        uint64_t v243 = (char *)operator new(16 * v242);
                      }
                      else
                      {
                        uint64_t v243 = 0;
                      }
                      uint64_t v244 = &v243[16 * v239];
                      *(_WORD *)uint64_t v244 = v233;
                      *((void *)v244 + 1) = -1;
                      int v245 = v244;
                      if (v234 != v235)
                      {
                        do
                        {
                          *((_OWORD *)v245 - 1) = *((_OWORD *)v235 - 1);
                          v245 -= 16;
                          v235 -= 8;
                        }
                        while (v235 != v234);
                        uint64_t v234 = (unsigned __int16 *)v232[19];
                      }
                      uint64_t v238 = v244 + 16;
                      v232[19] = v245;
                      v232[20] = v244 + 16;
                      v232[21] = &v243[16 * v242];
                      if (v234) {
                        operator delete(v234);
                      }
                      uint64_t v226 = v824;
                    }
                    else
                    {
                      unsigned __int16 *v235 = v233;
                      *((void *)v235 + 1) = -1;
                      uint64_t v238 = (char *)(v235 + 8);
                    }
                    v232[20] = v238;
                  }
                }
                int v246 = v230 + 1;
                uint64_t v204 = v815;
                do
                {
                  if (v246 == v231) {
                    goto LABEL_435;
                  }
                  unint64_t v247 = *v246++;
                  uint64_t v232 = (void *)v247;
                }
                while (v247 > 0xFFFFFFFFFFFFFFFDLL);
                uint64_t v230 = v246 - 1;
              }
            }
LABEL_435:
            if (*((unsigned char *)v225 + 9))
            {
              for (m = (void *)*((void *)v828 + 41); m != (void *)((char *)v828 + 320); m = (void *)m[1])
              {
                uint64_t v249 = v862;
                if ((uint64_t *)v863 == v862)
                {
                  unsigned int v250 = DWORD1(v864);
                  uint64_t v251 = (char *)(v863 + 8 * DWORD1(v864));
                  if (DWORD1(v864))
                  {
                    uint64_t v252 = 0;
                    while (*(void **)(v863 + v252) != m)
                    {
                      v252 += 8;
                      if (8 * DWORD1(v864) == v252) {
                        goto LABEL_457;
                      }
                    }
                    uint64_t v251 = (char *)(v863 + v252);
                  }
LABEL_457:
                  uint64_t v249 = (void *)v863;
                }
                else
                {
                  int v253 = v864 - 1;
                  unsigned int v254 = (v864 - 1) & ((m >> 4) ^ (m >> 9));
                  uint64_t v251 = (char *)(v863 + 8 * v254);
                  uint64_t v255 = *(void **)v251;
                  if (*(void *)v251 == -1)
                  {
                    int v256 = 0;
LABEL_478:
                    if (v256) {
                      uint64_t v251 = v256;
                    }
                    unsigned int v250 = DWORD1(v864);
                    if (*(void **)v251 != m) {
                      uint64_t v251 = (char *)(v863 + 8 * v864);
                    }
                  }
                  else
                  {
                    int v256 = 0;
                    int v257 = 1;
                    while (v255 != m)
                    {
                      if (v256) {
                        BOOL v258 = 0;
                      }
                      else {
                        BOOL v258 = v255 == (void *)-2;
                      }
                      if (v258) {
                        int v256 = v251;
                      }
                      unsigned int v259 = v254 + v257++;
                      unsigned int v254 = v259 & v253;
                      uint64_t v251 = (char *)(v863 + 8 * (v259 & v253));
                      uint64_t v255 = *(void **)v251;
                      if (*(void *)v251 == -1) {
                        goto LABEL_478;
                      }
                    }
                    unsigned int v250 = DWORD1(v864);
                  }
                }
                if ((void *)v863 == v249) {
                  unsigned int v260 = v250;
                }
                else {
                  unsigned int v260 = v864;
                }
                if (v251 == (char *)(v863 + 8 * v260))
                {
                  unsigned int v261 = v225[1];
                  BOOL v262 = (unsigned __int16 *)m[19];
                  uint64_t v263 = (unsigned __int16 *)m[20];
                  if (v262 == v263) {
                    goto LABEL_466;
                  }
                  uint64_t v264 = (unsigned __int16 *)m[19];
                  while (*v264 != (unsigned __int16)v261)
                  {
                    v264 += 8;
                    if (v264 == v263) {
                      goto LABEL_466;
                    }
                  }
                  if (!*((void *)v264 + 1))
                  {
LABEL_466:
                    unint64_t v265 = m[21];
                    if ((unint64_t)v263 >= v265)
                    {
                      uint64_t v267 = ((char *)v263 - (char *)v262) >> 4;
                      unint64_t v268 = v267 + 1;
                      if ((unint64_t)(v267 + 1) >> 60) {
                        goto LABEL_1002;
                      }
                      uint64_t v269 = v265 - (void)v262;
                      if (v269 >> 3 > v268) {
                        unint64_t v268 = v269 >> 3;
                      }
                      if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v270 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v270 = v268;
                      }
                      if (v270)
                      {
                        if (v270 >> 60) {
                          goto LABEL_1389;
                        }
                        uint64_t v271 = (char *)operator new(16 * v270);
                      }
                      else
                      {
                        uint64_t v271 = 0;
                      }
                      uint64_t v272 = &v271[16 * v267];
                      *(_WORD *)uint64_t v272 = v261;
                      *((void *)v272 + 1) = -1;
                      unsigned int v273 = v272;
                      if (v262 != v263)
                      {
                        do
                        {
                          *((_OWORD *)v273 - 1) = *((_OWORD *)v263 - 1);
                          v273 -= 16;
                          v263 -= 8;
                        }
                        while (v263 != v262);
                        BOOL v262 = (unsigned __int16 *)m[19];
                      }
                      unint64_t v266 = v272 + 16;
                      m[19] = v273;
                      m[20] = v272 + 16;
                      m[21] = &v271[16 * v270];
                      if (v262) {
                        operator delete(v262);
                      }
                    }
                    else
                    {
                      *uint64_t v263 = v261;
                      *((void *)v263 + 1) = -1;
                      unint64_t v266 = (char *)(v263 + 8);
                    }
                    m[20] = v266;
                  }
                }
              }
            }
            v225 += 3;
          }
          while (v225 != v226);
        }
        if ((long long *)v852 != &v854) {
          free((void *)v852);
        }
        if ((uint64_t *)v863 != v862) {
          free((void *)v863);
        }
        uint64_t v274 = *(unsigned int *)(v204 + 320);
        if (v274)
        {
          unint64_t v275 = *(llvm::MachineBasicBlock ***)(v815 + 312);
          v806 = &v275[v274];
          while (1)
          {
            v809 = v275;
            unint64_t v276 = *v275;
            uint64_t v277 = *((void *)*v275 + 4);
            v832 = (void *)(*(uint64_t (**)(void))(**(void **)(v277 + 16) + 104))(*(void *)(v277 + 16));
            uint64_t v278 = (*(uint64_t (**)(void))(**(void **)(v277 + 16) + 112))(*(void *)(v277 + 16));
            uint64_t v279 = (*(uint64_t (**)(void))(**(void **)(v277 + 16) + 176))(*(void *)(v277 + 16));
            FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator(v276);
            if (((*(uint64_t (**)(uint64_t, llvm::MachineBasicBlock *, void *))(*(void *)v278 + 184))(v278, v276, FirstTerminator) & 1) == 0)
            {
              uint64_t v281 = *(void *)(v811 + 88);
              uint64_t v825 = *(void *)(v811 + 80);
              if (v281 != v825) {
                break;
              }
            }
LABEL_565:
            unint64_t v275 = v809 + 1;
            if (v809 + 1 == v806) {
              goto LABEL_566;
            }
          }
          uint64_t v282 = *(void *)(v811 + 88);
          while (1)
          {
            unsigned int v284 = *(_DWORD *)(v282 - 12);
            v282 -= 12;
            unint64_t v283 = v284;
            if (!*(unsigned char *)(v282 + 9))
            {
              int v297 = *(uint64_t ***)(v279 + 240);
              int v298 = *(uint64_t ***)(v279 + 248);
              if (v297 == v298)
              {
                unint64_t v299 = 0;
              }
              else
              {
                unint64_t v299 = 0;
                unint64_t v300 = v283 >> 3;
                do
                {
                  if ((v283 - 0x40000000) >= 0xC0000001)
                  {
                    uint64_t v301 = **v297;
                    if (v300 < *(unsigned __int16 *)(v301 + 22)
                      && ((1 << (v283 & 7)) & *(unsigned __int8 *)(*(void *)(v301 + 8) + v300)) != 0
                      && (!v299
                       || *v297 != v299
                       && ((*(_DWORD *)(v299[1] + ((*(unsigned __int16 *)(v301 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v301 + 24)) & 1) != 0))
                    {
                      unint64_t v299 = *v297;
                    }
                  }
                  ++v297;
                }
                while (v297 != v298);
              }
              (*(void (**)(void *, llvm::MachineBasicBlock *, void *, unint64_t, void, uint64_t *, uint64_t))(*v832 + 464))(v832, v276, FirstTerminator, v283, *(unsigned int *)(v281 - 8), v299, v279);
              goto LABEL_549;
            }
            uint64_t v839 = 0;
            uint64_t v285 = v832[1] + 912;
            unint64_t v286 = (llvm::MachineFunction *)*((void *)v276 + 4);
            uint64_t v852 = 0;
            uint64_t v287 = llvm::MachineFunction::CreateMachineInstr(v286, v285, (unsigned __int8 **)&v852, 0);
            if (v852)
            {
              int v310 = *(unsigned __int8 *)v852;
              if ((v310 - 4) > 0x1E)
              {
                if ((v310 - 3) >= 0xFFFFFFFE) {
                  uint64_t v313 = v852;
                }
                else {
                  uint64_t v313 = 0;
                }
                if ((v310 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v312 = v313 + 8;
LABEL_562:
                  v862 = &v852;
                  sub_1CC5FA668(v312 + 16, &v862);
                  goto LABEL_505;
                }
                if (v310 == 3) {
                  *(void *)(v852 + 8) = 0;
                }
              }
              else if ((*(unsigned char *)(v852 + 1) & 0x7F) == 2 || *(_DWORD *)(v852 + 12))
              {
                uint64_t v311 = *(void *)(v852 + 16);
                if ((v311 & 4) != 0)
                {
                  unint64_t v312 = v311 & 0xFFFFFFFFFFFFFFF8;
                  if (v312) {
                    goto LABEL_562;
                  }
                }
              }
            }
LABEL_505:
            uint64_t v288 = *((void *)v276 + 5);
            *((void *)v287 + 3) = v288;
            uint64_t v289 = *(void *)(v288 + 32);
            uint64_t v290 = *((unsigned int *)v287 + 10);
            if (v290)
            {
              uint64_t v303 = *((void *)v287 + 4);
              uint64_t v304 = *(void *)(v289 + 40);
              uint64_t v305 = 32 * v290;
              do
              {
                if (!*(unsigned char *)v303)
                {
                  uint64_t v306 = *(unsigned int *)(v303 + 4);
                  if ((int)v306 >= 0) {
                    uint64_t v307 = (uint64_t *)(*(void *)(v304 + 272) + 8 * v306);
                  }
                  else {
                    uint64_t v307 = (uint64_t *)(*(void *)(v304 + 24) + 16 * (v306 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v308 = *v307;
                  if (*v307)
                  {
                    uint64_t v309 = *(void *)(v308 + 16);
                    *(void *)(v308 + 16) = v303;
                    *(void *)(v303 + 16) = v309;
                    if (*(unsigned char *)(v303 + 3))
                    {
                      *(void *)(v303 + 24) = v308;
                    }
                    else
                    {
                      *(void *)(v303 + 24) = 0;
                      uint64_t v307 = (uint64_t *)(v309 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v303 + 16) = v303;
                    *(void *)(v303 + 24) = 0;
                  }
                  *uint64_t v307 = v303;
                }
                v303 += 32;
                v305 -= 32;
              }
              while (v305);
            }
            uint64_t v291 = *(void *)(v289 + 728);
            if (v291) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v291 + 24))(v291, v287);
            }
            unint64_t v292 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v287 = v292 | *(void *)v287 & 7;
            *((void *)v287 + 1) = FirstTerminator;
            *(void *)(v292 + 8) = v287;
            void *FirstTerminator = *FirstTerminator & 7 | (unint64_t)v287;
            uint64_t v863 = 0;
            long long v864 = 0uLL;
            HIDWORD(v862) = v283;
            LODWORD(v862) = 0x1000000;
            llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v862);
            int v293 = *(_DWORD *)(v281 - 8);
            uint64_t v863 = 0;
            long long v864 = 0uLL;
            HIDWORD(v862) = v293;
            LODWORD(v862) = 0x4000000;
            llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v862);
            if (!v839) {
              goto LABEL_549;
            }
            int v294 = *(unsigned __int8 *)v839;
            if ((v294 - 4) > 0x1E)
            {
              if ((v294 - 3) >= 0xFFFFFFFE) {
                uint64_t v302 = v839;
              }
              else {
                uint64_t v302 = 0;
              }
              if ((v294 - 3) < 0xFFFFFFFE)
              {
                if (v294 == 3) {
                  *(void *)(v839 + 8) = 0;
                }
                goto LABEL_549;
              }
              unint64_t v296 = v302 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v839 + 1) & 0x7F) != 2 && !*(_DWORD *)(v839 + 12)) {
                goto LABEL_549;
              }
              uint64_t v295 = *(void *)(v839 + 16);
              if ((v295 & 4) == 0) {
                goto LABEL_549;
              }
              unint64_t v296 = v295 & 0xFFFFFFFFFFFFFFF8;
              if (!v296) {
                goto LABEL_549;
              }
            }
            v862 = &v839;
            sub_1CC5FA668(v296 + 16, &v862);
LABEL_549:
            uint64_t v281 = v282;
            if (v282 == v825) {
              goto LABEL_565;
            }
          }
        }
        goto LABEL_566;
      }
      *(void *)&long long v854 = *((void *)v828 + 41);
      unsigned int v203 = 1;
      LODWORD(v853) = 1;
      DWORD1(v864) = 1;
      unint64_t v865 = v201;
      uint64_t v204 = v815;
      if (v201 != -2)
      {
        BOOL v200 = (unint64_t *)&v866;
        goto LABEL_341;
      }
      unint64_t v865 = v202;
      DWORD2(v864) = -1;
      uint64_t v205 = v199[83];
      unsigned int v203 = 1;
      if (v205) {
        goto LABEL_342;
      }
LABEL_345:
      while (1)
      {
        uint64_t v206 = *(void *)(v852 + 8 * v203 - 8);
        LODWORD(v853) = --v203;
        if (v202 == v205 || v206 != v202)
        {
          uint64_t v207 = *(uint64_t **)(v206 + 88);
          v208 = *(uint64_t **)(v206 + 96);
          if (v207 != v208) {
            break;
          }
        }
LABEL_391:
        if (!v203) {
          goto LABEL_392;
        }
      }
      while (1)
      {
        uint64_t v209 = *v207;
        uint64_t v210 = v863;
        uint64_t v211 = DWORD1(v864);
        if ((uint64_t *)v863 == v862)
        {
          if (DWORD1(v864))
          {
            uint64_t v212 = 0;
            uint64_t v213 = 8 * DWORD1(v864);
            uint64_t v214 = (void *)v863;
            while (*v214 != v209)
            {
              if (*v214 == -2) {
                uint64_t v212 = v214;
              }
              ++v214;
              v213 -= 8;
              if (!v213)
              {
                if (!v212) {
                  goto LABEL_356;
                }
                void *v212 = v209;
                --DWORD2(v864);
                goto LABEL_380;
              }
            }
            goto LABEL_382;
          }
LABEL_356:
          unsigned int v215 = v864;
          if (DWORD1(v864) < v864)
          {
            ++DWORD1(v864);
            *(void *)(v863 + 8 * v211) = v209;
            goto LABEL_380;
          }
        }
        else
        {
          unsigned int v215 = v864;
        }
        if (3 * v215 <= 4 * (DWORD1(v864) - DWORD2(v864))) {
          break;
        }
        if (v215 - DWORD1(v864) < v215 >> 3) {
          goto LABEL_389;
        }
LABEL_361:
        unsigned int v216 = v215 - 1;
        unsigned int v217 = (v215 - 1) & ((v209 >> 4) ^ (v209 >> 9));
        uint64_t v218 = (void *)(v210 + 8 * v217);
        uint64_t v219 = *v218;
        if (*v218 != -1)
        {
          unsigned int v220 = 0;
          int v221 = 1;
          while (v219 != v209)
          {
            if (v220) {
              BOOL v222 = 0;
            }
            else {
              BOOL v222 = v219 == -2;
            }
            if (v222) {
              unsigned int v220 = v218;
            }
            unsigned int v223 = v217 + v221++;
            unsigned int v217 = v223 & v216;
            uint64_t v218 = (void *)(v210 + 8 * (v223 & v216));
            uint64_t v219 = *v218;
            if (*v218 == -1) {
              goto LABEL_373;
            }
          }
          goto LABEL_382;
        }
        unsigned int v220 = 0;
LABEL_373:
        if (v220) {
          uint64_t v224 = v220;
        }
        else {
          uint64_t v224 = v218;
        }
        if (*v224 == v209) {
          goto LABEL_382;
        }
        if (*v224 == -2) {
          --DWORD2(v864);
        }
        else {
          ++DWORD1(v864);
        }
        void *v224 = v209;
LABEL_380:
        if (v853 >= (unint64_t)HIDWORD(v853)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v852 + 8 * v853) = v209;
        LODWORD(v853) = v853 + 1;
LABEL_382:
        if (++v207 == v208)
        {
          unsigned int v203 = v853;
          uint64_t v204 = v815;
          goto LABEL_391;
        }
      }
      if (v215 >= 0x40) {
        v215 *= 2;
      }
      else {
        unsigned int v215 = 128;
      }
LABEL_389:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v862, v215);
      unsigned int v215 = v864;
      uint64_t v210 = v863;
      goto LABEL_361;
    }
    uint64_t v822 = v102;
    uint64_t v104 = (*(uint64_t (**)(void))(**((void **)v828 + 2) + 176))(*((void *)v828 + 2));
    uint64_t v105 = (void *)*((void *)v828 + 5);
    if (*((unsigned char *)v105 + 144))
    {
      uint64_t v107 = (unsigned __int16 *)v105[19];
    }
    else
    {
      uint64_t v106 = (*(uint64_t (**)(void))(**(void **)(*v105 + 16) + 176))(*(void *)(*v105 + 16));
      uint64_t v107 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, void))(*(void *)v106 + 32))(v106, *v105);
    }
    unsigned int v108 = v851;
    uint64_t v109 = (v851 + 63) >> 6;
    v862 = (uint64_t *)&v864;
    HIDWORD(v863) = 6;
    if (v851 + 63 >= 0x1C0)
    {
      LODWORD(v863) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v851 + 63 >= 0x40) {
      bzero(&v864, 8 * v109);
    }
    LODWORD(v863) = v109;
    DWORD2(v867) = v108;
    unsigned __int16 v110 = *v107;
    if (*v107)
    {
      unsigned int v111 = 1;
      LOWORD(v112) = *v107;
      do
      {
        *((void *)&v864 + ((unsigned __int16)v112 >> 6)) |= 1 << v112;
        int v112 = v107[v111++];
      }
      while (v112);
      unint64_t v113 = 0;
      int v114 = 0;
      uint64_t v852 = 0;
      uint64_t v853 = 0;
      *(void *)&long long v854 = 0;
      do
      {
        if ((*(void *)(v846.__r_.__value_.__r.__words[0] + 8 * (v110 >> 6)) >> v110))
        {
          int v115 = v110;
          uint64_t v116 = *(void *)(v104 + 56);
          uint64_t v117 = *(unsigned int *)(*(void *)(v104 + 8) + 24 * v110 + 8);
          if (*(_WORD *)(v116 + 2 * v117))
          {
            unsigned __int16 v118 = *(_WORD *)(v116 + 2 * v117) + v110;
            unsigned int v119 = (unsigned __int16 *)(v116 + 2 * v117 + 2);
            while (((1 << v118) & *(void *)(v846.__r_.__value_.__r.__words[0] + 8 * (v118 >> 6))) == 0
                 || (v862[v118 >> 6] & (1 << v118)) == 0)
            {
              int v120 = *v119++;
              v118 += v120;
              if (!v120) {
                goto LABEL_188;
              }
            }
          }
          else
          {
LABEL_188:
            if ((unint64_t)v113 >= (unint64_t)v854)
            {
              uint64_t v122 = v852;
              unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v113[-v852] >> 2);
              unint64_t v124 = v123 + 1;
              if (v123 + 1 > 0x1555555555555555) {
                goto LABEL_1002;
              }
              if (0x5555555555555556 * (((uint64_t)v854 - v852) >> 2) > v124) {
                unint64_t v124 = 0x5555555555555556 * (((uint64_t)v854 - v852) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v854 - v852) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v125 = 0x1555555555555555;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                if (v125 > 0x1555555555555555) {
                  goto LABEL_1389;
                }
                unint64_t v126 = (char *)operator new(12 * v125);
              }
              else
              {
                unint64_t v126 = 0;
              }
              uint64_t v127 = &v126[12 * v123];
              *(_DWORD *)uint64_t v127 = v115;
              *((_DWORD *)v127 + 1) = 0;
              *((_WORD *)v127 + 4) = 1;
              uint64_t v128 = (uint64_t)v127;
              if (v113 != (unsigned __int8 *)v122)
              {
                do
                {
                  uint64_t v129 = *(void *)(v113 - 12);
                  v113 -= 12;
                  __int16 v130 = *((_WORD *)v113 + 4);
                  *(void *)(v128 - 12) = v129;
                  v128 -= 12;
                  *(_WORD *)(v128 + 8) = v130;
                }
                while (v113 != (unsigned __int8 *)v122);
                unint64_t v113 = (unsigned __int8 *)v852;
              }
              unint64_t v121 = (unsigned __int8 *)(v127 + 12);
              uint64_t v852 = v128;
              uint64_t v853 = (uint64_t)(v127 + 12);
              *(void *)&long long v854 = &v126[12 * v125];
              uint64_t v101 = v815;
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v113 = v115;
              *((_DWORD *)v113 + 1) = 0;
              unint64_t v121 = v113 + 12;
              *((_WORD *)v113 + 4) = 1;
            }
            uint64_t v853 = (uint64_t)v121;
            unint64_t v113 = v121;
          }
        }
        unsigned __int16 v110 = v107[++v114];
      }
      while (v110);
    }
    else
    {
      uint64_t v852 = 0;
      uint64_t v853 = 0;
      *(void *)&long long v854 = 0;
    }
    uint64_t v131 = (unsigned int *)(v101 + 260);
    BOOL v132 = (unsigned char *)(*(uint64_t (**)(void))(**((void **)v828 + 2) + 112))(*((void *)v828 + 2));
    uint64_t v133 = *((void *)v828 + 7);
    v817 = (unsigned int *)(v101 + 256);
    char v134 = (*(uint64_t (**)(unsigned char *, llvm::MachineFunction *, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v132 + 40))(v132, v828, v104, &v852, v101 + 256, v101 + 260);
    uint64_t v136 = (unsigned __int8 *)v852;
    uint64_t v135 = (unsigned __int8 *)v853;
    if ((v134 & 1) == 0)
    {
      if (v852 == v853)
      {
LABEL_252:
        if (v136)
        {
          uint64_t v853 = (uint64_t)v136;
          operator delete(v136);
        }
        uint64_t v102 = v822;
        if (v862 != (uint64_t *)&v864) {
          free(v862);
        }
        goto LABEL_256;
      }
      LODWORD(v839) = 0;
      uint64_t v807 = (*(uint64_t (**)(unsigned char *, uint64_t *))(*(void *)v132 + 56))(v132, &v839);
      uint64_t v135 = (unsigned __int8 *)v852;
      unsigned int v137 = (unsigned int *)v853;
      if (v852 == v853)
      {
        uint64_t v136 = (unsigned __int8 *)v852;
      }
      else
      {
        do
        {
          if (!v135[9])
          {
            unint64_t v138 = *(unsigned int *)v135;
            unint64_t v139 = *(uint64_t ***)(v104 + 240);
            uint64_t v140 = *(uint64_t ***)(v104 + 248);
            if (v139 == v140)
            {
              BOOL v141 = 0;
            }
            else
            {
              BOOL v141 = 0;
              unint64_t v142 = v138 >> 3;
              do
              {
                if ((v138 - 0x40000000) >= 0xC0000001)
                {
                  uint64_t v143 = **v139;
                  if (v142 < *(unsigned __int16 *)(v143 + 22)
                    && ((1 << (v138 & 7)) & *(unsigned __int8 *)(*(void *)(v143 + 8) + v142)) != 0
                    && (!v141
                     || *v139 != v141
                     && ((*(_DWORD *)(v141[1] + ((*(unsigned __int16 *)(v143 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v143 + 24)) & 1) != 0))
                  {
                    BOOL v141 = *v139;
                  }
                }
                ++v139;
              }
              while (v139 != v140);
            }
            unsigned int v835 = 0;
            if ((*(uint64_t (**)(uint64_t, llvm::MachineFunction *, unint64_t, unsigned int *))(*(void *)v104 + 416))(v104, v828, v138, &v835))
            {
              unsigned int StackObject = v835;
            }
            else
            {
              if (v839)
              {
                uint64_t v145 = 8 * v839;
                uint64_t v146 = (_DWORD *)v807;
                while (1)
                {
                  BOOL v147 = *v146 != v138;
                  if (*v146 == v138) {
                    break;
                  }
                  v146 += 2;
                  v145 -= 8;
                  if (!v145)
                  {
                    uint64_t v146 = (_DWORD *)(v807 + 8 * v839);
                    break;
                  }
                }
              }
              else
              {
                BOOL v147 = 1;
                uint64_t v146 = (_DWORD *)v807;
              }
              uint64_t v148 = *(void *)(v104 + 264);
              unsigned int v149 = *(unsigned __int16 *)(*v141 + 24)
                   + *(_DWORD *)(v104 + 272) * ((*(void *)(v104 + 248) - *(void *)(v104 + 240)) >> 3);
              unint64_t v150 = (unint64_t)*(unsigned int *)(v148 + 24 * v149 + 4) >> 3;
              if (v147)
              {
                unsigned __int8 v151 = 63 - __clz((unint64_t)*(unsigned int *)(v148 + 24 * v149 + 8) >> 3);
                if (v132[12] >= v151) {
                  unsigned __int8 v152 = v151;
                }
                else {
                  unsigned __int8 v152 = v132[12];
                }
                unsigned int StackObject = llvm::MachineFrameInfo::CreateStackObject((unsigned __int8 *)v133, v150, v152, 1u, 0, 0);
                if (StackObject < *v817) {
                  unsigned int *v817 = StackObject;
                }
                if (StackObject > *v131) {
                  *uint64_t v131 = StackObject;
                }
              }
              else
              {
                unsigned int StackObject = llvm::MachineFrameInfo::CreateFixedSpillStackObject((llvm::MachineFrameInfo *)v133, v150, (int)v146[1], 0);
              }
            }
            *((_DWORD *)v135 + 1) = StackObject;
            v135[9] = 0;
          }
          v135 += 12;
        }
        while (v135 != (unsigned __int8 *)v137);
        uint64_t v136 = (unsigned __int8 *)v852;
        uint64_t v135 = (unsigned __int8 *)v853;
      }
    }
    uint64_t v153 = v135 - v136;
    if (v135 == v136)
    {
      unint64_t v154 = 0;
      uint64_t v155 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v153 >> 2) > 0x1555555555555555) {
LABEL_1002:
      }
        abort();
      unint64_t v154 = (char *)operator new(v135 - v136);
      uint64_t v155 = &v154[4 * (v153 >> 2)];
      memcpy(v154, v136, v153 - 2);
    }
    BOOL v156 = *(void **)(v133 + 80);
    if (v156)
    {
      *(void *)(v133 + 88) = v156;
      operator delete(v156);
      uint64_t v136 = (unsigned __int8 *)v852;
    }
    *(void *)(v133 + 80) = v154;
    *(void *)(v133 + 88) = v155;
    *(void *)(v133 + 96) = v155;
    goto LABEL_252;
  }
LABEL_569:
  (*(void (**)(uint64_t, llvm::MachineFunction *, void))(*(void *)v804 + 272))(v804, v100, *(void *)(v101 + 248));
  v314 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)v100 + 2) + 112))(*((void *)v100 + 2));
  unsigned int v315 = v314;
  int v316 = *((_DWORD *)v314 + 2);
  uint64_t v317 = *((void *)v100 + 7);
  int v318 = *((_DWORD *)v314 + 4);
  if (v316 == 1) {
    int v318 = -v318;
  }
  int64_t v319 = v318;
  int v833 = (*(uint64_t (**)(unsigned __int8 *, llvm::MachineFunction *))(*(void *)v314 + 16))(v314, v100);
  int v320 = *(_DWORD *)(v317 + 32);
  if (v320)
  {
    uint64_t v321 = *(uint64_t **)(v317 + 8);
    uint64_t v322 = -v320 + 1;
    int64_t v323 = v319;
    do
    {
      if (!*((unsigned char *)v321 + 20))
      {
        uint64_t v324 = *v321;
        int64_t v325 = v316 == 1 ? -v324 : v321[1] + v324;
        if (v325 > v323) {
          int64_t v323 = v325;
        }
      }
      int v326 = v322++;
      v321 += 5;
    }
    while (v326);
  }
  else
  {
    int64_t v323 = v319;
  }
  unsigned __int8 v327 = *(unsigned char *)(v317 + 60);
  unsigned int v328 = *(_DWORD *)(v815 + 260);
  unsigned int v329 = *(_DWORD *)(v815 + 256);
  if (v328 >= v329)
  {
    uint64_t v343 = *(void *)(v317 + 8);
    unsigned int v344 = v329 - 1;
    do
    {
      if (v316 == 1) {
        unsigned int v345 = v329;
      }
      else {
        unsigned int v345 = v328;
      }
      unsigned int v346 = v345 + v320;
      if (!*(unsigned char *)(v343 + 40 * v346 + 20))
      {
        uint64_t v347 = *(void *)(v343 + 40 * v346 + 8);
        if (v316 == 1)
        {
          v323 += v347;
LABEL_607:
          unsigned int v348 = *(unsigned __int8 *)(v343 + 40 * v346 + 16);
          if (v327 <= v348) {
            unsigned __int8 v327 = *(unsigned char *)(v343 + 40 * v346 + 16);
          }
          int64_t v323 = (((1 << v348) + v323 + ~(unint64_t)(((1 << v348) - 1) & v833)) & -(1 << v348))
               + (((1 << v348) - 1) & v833);
          if (v316 == 1)
          {
            *(void *)(v343 + 40 * v346) = -v323;
          }
          else
          {
            *(void *)(v343 + 40 * v346) = v323;
            v323 += v347;
          }
          goto LABEL_602;
        }
        if (v347 != -1) {
          goto LABEL_607;
        }
      }
LABEL_602:
      --v328;
      ++v329;
    }
    while (v344 != v328);
  }
  uint64_t v330 = (*(uint64_t (**)(void))(**((void **)v828 + 2) + 176))(*((void *)v828 + 2));
  int v331 = (*(uint64_t (**)(unsigned __int8 *, llvm::MachineFunction *))(*(void *)v315 + 32))(v315, v828);
  uint64_t v332 = *(void *)(v815 + 248);
  v826 = v315;
  char v819 = v331;
  uint64_t v801 = v330;
  if (v332)
  {
    if (v331)
    {
      v862 = (uint64_t *)&v864;
      uint64_t v863 = 0x200000000;
      sub_1CC3EF1E8(*(_DWORD **)(v332 + 48), *(_DWORD *)(v332 + 56), (uint64_t)&v862);
      unsigned int v333 = v862;
      if (v863)
      {
        int v334 = *(_DWORD *)(v317 + 32);
        uint64_t v335 = 4 * v863;
        uint64_t v336 = v862;
        unint64_t v337 = v323;
        do
        {
          int v338 = *(_DWORD *)v336;
          if (v316 == 1)
          {
            unsigned int v339 = v334 + v338;
            uint64_t v340 = *(void *)(v317 + 8);
            v337 += *(void *)(v340 + 40 * (v334 + v338) + 8);
          }
          else
          {
            uint64_t v340 = *(void *)(v317 + 8);
            unsigned int v339 = v334 + v338;
          }
          unsigned int v341 = *(unsigned __int8 *)(v340 + 40 * v339 + 16);
          if (v327 <= v341) {
            unsigned __int8 v327 = v341;
          }
          unint64_t v337 = (((1 << v341) + v337 + ~(unint64_t)(((1 << v341) - 1) & v833)) & -(1 << v341))
               + (((1 << v341) - 1) & v833);
          if (v316 == 1)
          {
            *(void *)(v340 + 40 * (v334 + v338)) = -(uint64_t)v337;
          }
          else
          {
            int v342 = (unint64_t *)(v340 + 40 * (v334 + v338));
            *int v342 = v337;
            v337 += v342[1];
          }
          uint64_t v336 = (uint64_t *)((char *)v336 + 4);
          v335 -= 4;
        }
        while (v335);
      }
      else
      {
        unint64_t v337 = v323;
      }
      if (v333 != (uint64_t *)&v864) {
        free(v333);
      }
    }
    else
    {
      unint64_t v337 = v323;
    }
  }
  else
  {
    unint64_t v337 = v323;
  }
  int v349 = *(unsigned __int8 *)(v317 + 649);
  if (*(unsigned char *)(v317 + 649))
  {
    unsigned int v350 = *(unsigned __int8 *)(v317 + 648);
    uint64_t v351 = ((1 << v350) - 1) & v833;
    uint64_t v352 = (((1 << v350) + v337 + ~v351) & -(1 << v350)) + v351;
    int v353 = *(_DWORD *)(v317 + 120);
    if (v353)
    {
      int v354 = 0;
      uint64_t v355 = *(void *)(v317 + 112);
      if (v316 == 1) {
        uint64_t v356 = -v352;
      }
      else {
        uint64_t v356 = v352;
      }
      int v357 = *(_DWORD *)(v317 + 32);
      uint64_t v358 = *(void *)(v317 + 8);
      do
      {
        *(void *)(v358 + 40 * (v357 + *(_DWORD *)(v355 + 16 * v354))) = *(void *)(v355 + 16 * v354 + 8)
                                                                                          + v356;
        ++v354;
      }
      while (v353 != v354);
    }
    unint64_t v337 = *(void *)(v317 + 640) + v352;
    if (v350 > v327) {
      unsigned __int8 v327 = v350;
    }
  }
  uint64_t v359 = *((void *)v828 + 12);
  if (v359) {
    int v360 = *(_DWORD *)(v359 + 680);
  }
  else {
    int v360 = 0x7FFFFFFF;
  }
  v862 = (uint64_t *)&v864;
  uint64_t v863 = 0x1000000000;
  v871[0] = 0;
  uint64_t v870 = 0;
  v869 = &v870;
  int v361 = *(_DWORD *)(v317 + 64);
  int v810 = v360;
  if (v361 != -1)
  {
    if (v349)
    {
      uint64_t v362 = *(void *)(v317 + 8);
      if (*(unsigned char *)(v362 + 40 * (*(_DWORD *)(v317 + 32) + v361) + 32)) {
        goto LABEL_719;
      }
      unsigned int v796 = *(_DWORD *)(v317 + 64);
      int64_t v797 = v319;
    }
    else
    {
      unsigned int v796 = *(_DWORD *)(v317 + 64);
      int64_t v797 = v319;
      uint64_t v362 = *(void *)(v317 + 8);
    }
    uint64_t v852 = 1;
    memset_pattern16(&v853, &unk_1CDB165A0, 0x20uLL);
    *(void *)&long long v856 = &v857;
    *((void *)&v856 + 1) = 0x800000000;
    v846.__r_.__value_.__r.__words[0] = 1;
    memset_pattern16(&v846.__r_.__value_.__r.__words[1], &unk_1CDB165A0, 0x20uLL);
    v848 = (int *)&v850;
    uint64_t v849 = 0x800000000;
    uint64_t v839 = 1;
    memset_pattern16(&v840, &unk_1CDB165A0, 0x20uLL);
    v842 = (int *)&v844;
    uint64_t v843 = 0x800000000;
    int v363 = *(_DWORD *)(v317 + 32);
    uint64_t v364 = v796;
    unsigned int v365 = v363 + v796;
    if (*(unsigned char *)(v362 + 40 * (v363 + v796) + 20))
    {
      int v366 = v810;
    }
    else
    {
      int v366 = v810;
      if (!v349)
      {
        if (v316 == 1) {
          v337 += *(void *)(v362 + 40 * v365 + 8);
        }
        unsigned int v367 = *(unsigned __int8 *)(v362 + 40 * v365 + 16);
        if (v327 <= v367) {
          unsigned __int8 v327 = *(unsigned char *)(v362 + 40 * v365 + 16);
        }
        unint64_t v337 = (((1 << v367) + v337 + ~(unint64_t)(((1 << v367) - 1) & v833)) & -(1 << v367))
             + (((1 << v367) - 1) & v833);
        if (v316 == 1)
        {
          *(void *)(v362 + 40 * v365) = -(uint64_t)v337;
        }
        else
        {
          int v368 = (unint64_t *)(v362 + 40 * v365);
          *int v368 = v337;
          v337 += v368[1];
        }
      }
    }
    int v369 = -858993459 * ((unint64_t)(*(void *)(v317 + 16) - v362) >> 3);
    if (v363 != v369)
    {
      unsigned int v370 = 0;
      int v371 = v369 - v363;
      while (1)
      {
        unsigned int v372 = *(_DWORD *)(v317 + 32) + v370;
        uint64_t v373 = *(void *)(v317 + 8);
        if ((!*(unsigned char *)(v373 + 40 * v372 + 32) || !*(unsigned char *)(v317 + 649))
          && (v370 < *(_DWORD *)(v815 + 256) || v370 > *(_DWORD *)(v815 + 260)))
        {
          uint64_t v374 = *(void *)(v815 + 248);
          if (v374)
          {
            uint64_t v375 = *(unsigned int *)(v374 + 56);
            if (v375)
            {
              v376 = *(_DWORD **)(v374 + 48);
              uint64_t v377 = 16 * v375;
              while (*v376 != v370)
              {
                v376 += 4;
                v377 -= 16;
                if (!v377) {
                  goto LABEL_656;
                }
              }
              goto LABEL_663;
            }
          }
LABEL_656:
          if (v364 != v370
            && *(void *)(v373 + 40 * v372 + 8) != -1
            && v366 != v370
            && !*(unsigned char *)(v373 + 40 * v372 + 20))
          {
            int v379 = *(unsigned __int8 *)(v373 + 40 * v372 + 36);
            if (v379)
            {
              if (v379 == 1)
              {
                unsigned int v835 = v370;
                uint64_t v380 = &v852;
              }
              else
              {
                if (v379 != 3)
                {
                  uint64_t v382 = v364;
                  unsigned int v835 = v370;
                  sub_1CD52500C((uint64_t)&v846, (int *)&v835);
                  int v366 = v810;
                  uint64_t v364 = v382;
                  goto LABEL_663;
                }
                unsigned int v835 = v370;
                uint64_t v380 = &v839;
              }
              uint64_t v381 = v364;
              sub_1CD52500C((uint64_t)v380, (int *)&v835);
              uint64_t v364 = v381;
              int v366 = v810;
            }
          }
        }
LABEL_663:
        if (++v370 == v371)
        {
          if (!*(unsigned char *)(v317 + 649) && DWORD2(v856))
          {
            uint64_t v383 = (int *)v856;
            uint64_t v384 = 4 * DWORD2(v856);
            do
            {
              unsigned int v835 = 0;
              int v385 = *v383;
              unsigned int v835 = *v383;
              int v386 = *(_DWORD *)(v317 + 32);
              if (v316 == 1)
              {
                unsigned int v387 = v386 + v385;
                uint64_t v388 = *(void *)(v317 + 8);
                v337 += *(void *)(v388 + 40 * (v386 + v385) + 8);
              }
              else
              {
                uint64_t v388 = *(void *)(v317 + 8);
                unsigned int v387 = v386 + v385;
              }
              unsigned int v389 = *(unsigned __int8 *)(v388 + 40 * v387 + 16);
              if (v327 <= v389) {
                unsigned __int8 v327 = v389;
              }
              unint64_t v337 = (((1 << v389) + v337 + ~(unint64_t)(((1 << v389) - 1) & v833)) & -(1 << v389))
                   + (((1 << v389) - 1) & v833);
              if (v316 == 1)
              {
                *(void *)(v388 + 40 * (v386 + v385)) = -(uint64_t)v337;
              }
              else
              {
                v390 = (unint64_t *)(v388 + 40 * (v386 + v385));
                unint64_t *v390 = v337;
                v337 += v390[1];
              }
              sub_1CD41AE70((uint64_t)&v862, (int *)&v835);
              ++v383;
              v384 -= 4;
            }
            while (v384);
          }
          break;
        }
      }
    }
    if (v849)
    {
      uint64_t v391 = v848;
      uint64_t v392 = 4 * v849;
      do
      {
        unsigned int v835 = 0;
        int v393 = *v391;
        unsigned int v835 = *v391;
        int v394 = *(_DWORD *)(v317 + 32);
        if (v316 == 1)
        {
          unsigned int v395 = v394 + v393;
          uint64_t v396 = *(void *)(v317 + 8);
          v337 += *(void *)(v396 + 40 * (v394 + v393) + 8);
        }
        else
        {
          uint64_t v396 = *(void *)(v317 + 8);
          unsigned int v395 = v394 + v393;
        }
        unsigned int v397 = *(unsigned __int8 *)(v396 + 40 * v395 + 16);
        if (v327 <= v397) {
          unsigned __int8 v327 = v397;
        }
        unint64_t v337 = (((1 << v397) + v337 + ~(unint64_t)(((1 << v397) - 1) & v833)) & -(1 << v397))
             + (((1 << v397) - 1) & v833);
        if (v316 == 1)
        {
          *(void *)(v396 + 40 * (v394 + v393)) = -(uint64_t)v337;
        }
        else
        {
          uint64_t v398 = (unint64_t *)(v396 + 40 * (v394 + v393));
          *uint64_t v398 = v337;
          v337 += v398[1];
        }
        sub_1CD41AE70((uint64_t)&v862, (int *)&v835);
        ++v391;
        v392 -= 4;
      }
      while (v392);
    }
    int v399 = v842;
    if (v843)
    {
      uint64_t v400 = 4 * v843;
      do
      {
        unsigned int v835 = 0;
        int v401 = *v399;
        unsigned int v835 = *v399;
        int v402 = *(_DWORD *)(v317 + 32);
        if (v316 == 1)
        {
          unsigned int v403 = v402 + v401;
          uint64_t v404 = *(void *)(v317 + 8);
          v337 += *(void *)(v404 + 40 * (v402 + v401) + 8);
        }
        else
        {
          uint64_t v404 = *(void *)(v317 + 8);
          unsigned int v403 = v402 + v401;
        }
        unsigned int v405 = *(unsigned __int8 *)(v404 + 40 * v403 + 16);
        if (v327 <= v405) {
          unsigned __int8 v327 = v405;
        }
        unint64_t v337 = (((1 << v405) + v337 + ~(unint64_t)(((1 << v405) - 1) & v833)) & -(1 << v405))
             + (((1 << v405) - 1) & v833);
        if (v316 == 1)
        {
          *(void *)(v404 + 40 * (v402 + v401)) = -(uint64_t)v337;
        }
        else
        {
          unsigned int v406 = (unint64_t *)(v404 + 40 * (v402 + v401));
          *unsigned int v406 = v337;
          v337 += v406[1];
        }
        sub_1CD41AE70((uint64_t)&v862, (int *)&v835);
        ++v399;
        v400 -= 4;
      }
      while (v400);
      int v399 = v842;
    }
    int64_t v319 = v797;
    if (v399 != (int *)&v844) {
      free(v399);
    }
    if ((v839 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v840, 4);
    }
    if (v848 != (int *)&v850) {
      free(v848);
    }
    if ((v846.__r_.__value_.__s.__data_[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](v846.__r_.__value_.__l.__size_, 4);
    }
    if ((long long *)v856 != &v857) {
      free((void *)v856);
    }
    if ((v852 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v853, 4);
    }
    int v360 = v810;
  }
LABEL_719:
  uint64_t v839 = (uint64_t)v841;
  uint64_t v840 = 0x800000000;
  int v407 = -858993459 * ((*(void *)(v317 + 16) - *(void *)(v317 + 8)) >> 3);
  int v408 = *(_DWORD *)(v317 + 32);
  int v409 = v407 - v408;
  if (v407 != v408)
  {
    unsigned int v410 = 0;
    unsigned int v412 = 0;
    while (1)
    {
      unsigned int v413 = *(_DWORD *)(v317 + 32) + v412;
      uint64_t v414 = *(void *)(v317 + 8);
      if ((!*(unsigned char *)(v414 + 40 * v413 + 32) || !*(unsigned char *)(v317 + 649))
        && (v412 < *(_DWORD *)(v815 + 256) || v412 > *(_DWORD *)(v815 + 260)))
      {
        uint64_t v415 = *(void *)(v815 + 248);
        if (v415)
        {
          uint64_t v416 = *(unsigned int *)(v415 + 56);
          if (v416)
          {
            unint64_t v417 = *(_DWORD **)(v415 + 48);
            uint64_t v418 = 16 * v416;
            while (*v417 != v412)
            {
              v417 += 4;
              v418 -= 16;
              if (!v418) {
                goto LABEL_733;
              }
            }
            goto LABEL_752;
          }
        }
LABEL_733:
        if (*(void *)(v414 + 40 * v413 + 8) != -1 && *(_DWORD *)(v317 + 64) != v412 && v360 != v412)
        {
          if (v871[0])
          {
            uint64_t v419 = (void *)v870;
            if (v870)
            {
              do
              {
                int v420 = *((_DWORD *)v419 + 7);
                if ((int)v412 >= v420)
                {
                  if (v420 >= (int)v412) {
                    goto LABEL_752;
                  }
                  ++v419;
                }
                uint64_t v419 = (void *)*v419;
              }
              while (v419);
            }
          }
          else if (v863)
          {
            uint64_t v421 = v862;
            uint64_t v422 = 4 * v863;
            while (*(_DWORD *)v421 != v412)
            {
              uint64_t v421 = (uint64_t *)((char *)v421 + 4);
              v422 -= 4;
              if (!v422) {
                goto LABEL_749;
              }
            }
            if (v422) {
              goto LABEL_752;
            }
          }
LABEL_749:
          if (!*(unsigned char *)(v414 + 40 * v413 + 20))
          {
            if (v410 >= HIDWORD(v840)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v839 + 4 * v410) = v412;
            unsigned int v410 = v840 + 1;
            LODWORD(v840) = v840 + 1;
          }
        }
      }
LABEL_752:
      if (++v412 == v409) {
        goto LABEL_721;
      }
    }
  }
  unsigned int v410 = 0;
LABEL_721:
  if (v360 == 0x7FFFFFFF)
  {
    v411 = v826;
  }
  else
  {
    int v423 = *(_DWORD *)(v317 + 32);
    v411 = v826;
    if (v316 == 1)
    {
      unsigned int v424 = v423 + v360;
      uint64_t v425 = *(void *)(v317 + 8);
      v337 += *(void *)(v425 + 40 * (v423 + v360) + 8);
    }
    else
    {
      uint64_t v425 = *(void *)(v317 + 8);
      unsigned int v424 = v423 + v360;
    }
    unsigned int v426 = *(unsigned __int8 *)(v425 + 40 * v424 + 16);
    if (v327 <= v426) {
      unsigned __int8 v327 = v426;
    }
    unint64_t v337 = (((1 << v426) + v337 + ~(unint64_t)(((1 << v426) - 1) & v833)) & -(1 << v426))
         + (((1 << v426) - 1) & v833);
    if (v316 == 1)
    {
      *(void *)(v425 + 40 * (v423 + v360)) = -(uint64_t)v337;
    }
    else
    {
      unsigned int v427 = (unint64_t *)(v425 + 40 * (v423 + v360));
      *unsigned int v427 = v337;
      v337 += v427[1];
    }
  }
  uint64_t v428 = *((void *)v828 + 1);
  if (*(_DWORD *)(v428 + 552) && (*(_WORD *)(v428 + 1020) & 0x400) != 0)
  {
    (*(void (**)(unsigned __int8 *, llvm::MachineFunction *, uint64_t *))(*(void *)v411 + 304))(v411, v828, &v839);
    unsigned int v410 = v840;
  }
  v846.__r_.__value_.__r.__words[0] = (std::string::size_type)&v846.__r_.__value_.__r.__words[2];
  v846.__r_.__value_.__l.__size_ = 0x600000000;
  unsigned int v851 = 0;
  if (!v410) {
    goto LABEL_885;
  }
  if (*(_DWORD *)(*((void *)v828 + 1) + 552)
    && (*(_DWORD *)(v317 + 64) & 0x80000000) != 0
    && (*(unsigned int (**)(unsigned __int8 *, llvm::MachineFunction *))(*(void *)v411 + 80))(v411, v828)
    && v323 <= 0x7FFFFFFF)
  {
    unsigned int v429 = *(_DWORD *)(v815 + 256);
    unsigned int v430 = *(_DWORD *)(v815 + 260);
    uint64_t v431 = LODWORD(v846.__r_.__value_.__r.__words[1]);
    if ((v851 & 0x3F) != 0) {
      *(void *)(v846.__r_.__value_.__r.__words[0] + 8 * LODWORD(v846.__r_.__value_.__r.__words[1]) - 8) |= -1 << (v851 & 0x3F);
    }
    unsigned int v432 = v431;
    unsigned int v851 = v323;
    unsigned int v433 = v323 + 63;
    if (v431 != (v323 + 63) >> 6)
    {
      uint64_t v434 = v433 >> 6;
      if (v431 > v434)
      {
        LODWORD(v846.__r_.__value_.__r.__words[1]) = v433 >> 6;
        unsigned int v432 = v433 >> 6;
      }
      else
      {
        if (v434 > HIDWORD(v846.__r_.__value_.__r.__words[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v434 != v431)
        {
          unsigned int v798 = v430;
          int v435 = v431;
          memset((void *)(v846.__r_.__value_.__r.__words[0] + 8 * v431), 255, 8 * (v434 - v431));
          LODWORD(v431) = v435;
          unsigned int v430 = v798;
        }
        v432 += v434 - v431;
        LODWORD(v846.__r_.__value_.__r.__words[1]) = v432;
        LOBYTE(v323) = v851;
      }
    }
    if ((v323 & 0x3F) != 0) {
      *(void *)(v846.__r_.__value_.__r.__words[0] + 8 * v432 - 8) &= ~(-1 << (v323 & 0x3F));
    }
    uint64_t v852 = (uint64_t)&v854;
    uint64_t v853 = 0x1000000000;
    int v436 = *(_DWORD *)(v317 + 32);
    if (v436)
    {
      unsigned int v437 = 0;
      int v438 = -v436;
      do
      {
        if (!*(unsigned char *)(*(void *)(v317 + 8) + 40 * (v438 + *(_DWORD *)(v317 + 32)) + 20))
        {
          if (v437 >= HIDWORD(v853)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v852 + 4 * v437) = v438;
          unsigned int v437 = v853 + 1;
          LODWORD(v853) = v853 + 1;
        }
      }
      while (!__CFADD__(v438++, 1));
    }
    else
    {
      unsigned int v437 = 0;
    }
    if ((int)v429 <= (int)v430 && v429 <= v430)
    {
      do
      {
        if (!*(unsigned char *)(*(void *)(v317 + 8) + 40 * (v429 + *(_DWORD *)(v317 + 32)) + 20))
        {
          if (v437 >= HIDWORD(v853)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(v852 + 4 * v437) = v429;
          unsigned int v437 = v853 + 1;
          LODWORD(v853) = v853 + 1;
        }
        ++v429;
      }
      while (v430 + 1 != v429);
    }
    BOOL v441 = (unsigned __int8 *)v852;
    v411 = v826;
    if (v437)
    {
      int v442 = *(_DWORD *)(v317 + 32);
      uint64_t v443 = *(void *)(v317 + 8);
      int v444 = (unsigned __int8 *)v852;
      std::string::size_type v445 = v846.__r_.__value_.__r.__words[0];
      uint64_t v446 = (unsigned __int8 *)(v852 + 4 * v437);
      do
      {
        uint64_t v447 = (unsigned int *)(v443 + 40 * (*(_DWORD *)v444 + v442));
        unsigned int v448 = *v447;
        unsigned int v449 = v447[2];
        unsigned int v450 = v449 + *v447;
        if (v316 == 1) {
          unsigned int v450 = -v448;
        }
        if ((int)v450 < 1) {
          goto LABEL_807;
        }
        unsigned int v451 = -v448 - v449;
        if (v316 != 1) {
          unsigned int v451 = v448;
        }
        if (v451 == v450) {
          goto LABEL_807;
        }
        unsigned int v452 = v451 >> 6;
        if (v451 >> 6 == v450 >> 6)
        {
          uint64_t v453 = ~((1 << v450) + (-1 << v451));
        }
        else
        {
          *(void *)(v445 + 8 * v452) &= ~(-1 << v451);
          unsigned int v454 = (v451 + 63) & 0xFFFFFFC0;
          if (v454 + 64 <= v450)
          {
            do
            {
              *(void *)(v445 + 8 * (v454 >> 6)) = 0;
              unsigned int v455 = v454 + 64;
              unsigned int v456 = v454 + 128;
              v454 += 64;
            }
            while (v456 <= v450);
          }
          else
          {
            unsigned int v455 = (v451 + 63) & 0xFFFFFFC0;
          }
          if (v455 >= v450) {
            goto LABEL_807;
          }
          uint64_t v453 = -1 << v450;
          unsigned int v452 = v455 >> 6;
        }
        *(void *)(v445 + 8 * v452) &= v453;
LABEL_807:
        v444 += 4;
      }
      while (v444 != v446);
    }
    if (v441 != (unsigned __int8 *)&v854) {
      free(v441);
    }
  }
  if (!v840)
  {
LABEL_885:
    uint64_t v464 = v815;
    goto LABEL_886;
  }
  int v457 = (char *)v839;
  int v458 = (char *)(v839 + 4 * v840);
  unsigned int v459 = v851;
  uint64_t v460 = LODWORD(v846.__r_.__value_.__r.__words[1]);
  int v461 = *(_DWORD *)(v317 + 32);
  uint64_t v462 = *(void *)(v317 + 8);
  std::string::size_type v463 = v846.__r_.__value_.__r.__words[0];
  uint64_t v464 = v815;
  do
  {
    unsigned int v465 = *(_DWORD *)v457 + v461;
    uint64_t v466 = *(void *)(v462 + 40 * v465 + 8);
    if (!v466) {
      goto LABEL_825;
    }
    if (!v460)
    {
LABEL_824:
      unsigned int v459 = 0;
      uint64_t v460 = 0;
      unsigned int v851 = 0;
      LODWORD(v846.__r_.__value_.__r.__words[1]) = 0;
      unsigned int v465 = *(_DWORD *)v457 + v461;
LABEL_825:
      if (v316 == 1) {
        v337 += *(void *)(v462 + 40 * v465 + 8);
      }
      unsigned int v469 = *(unsigned __int8 *)(v462 + 40 * v465 + 16);
      if (v327 <= v469) {
        unsigned __int8 v327 = *(unsigned char *)(v462 + 40 * v465 + 16);
      }
      unint64_t v337 = (((1 << v469) + v337 + ~(unint64_t)(((1 << v469) - 1) & v833)) & -(1 << v469))
           + (((1 << v469) - 1) & v833);
      if (v316 == 1)
      {
        *(void *)(v462 + 40 * v465) = -(uint64_t)v337;
      }
      else
      {
        uint64_t v470 = (unint64_t *)(v462 + 40 * v465);
        *uint64_t v470 = v337;
        v337 += v470[1];
      }
      goto LABEL_832;
    }
    uint64_t v467 = 8 * v460;
    uint64_t v468 = (void *)v463;
    while (!*v468)
    {
      ++v468;
      v467 -= 8;
      if (!v467) {
        goto LABEL_824;
      }
    }
    unsigned int v471 = *(unsigned __int8 *)(v462 + 40 * v465 + 16);
    if (v471 > v327 || !v459) {
      goto LABEL_825;
    }
    uint64_t v472 = 0;
    uint64_t v473 = (v459 - 1) >> 6;
    uint64_t v474 = v473 << 6;
    unint64_t v475 = (uint64_t *)v463;
    while (1)
    {
      uint64_t v477 = *v475++;
      uint64_t v476 = v477;
      unint64_t v478 = v474 + v472 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v459;
      unint64_t v479 = v478 & v476;
      if (v479) {
        break;
      }
      v472 -= 64;
      if (v474 + v472 == -64) {
        goto LABEL_825;
      }
    }
    int v480 = __clz(__rbit64(v479));
    if (v480 + 1 == v472) {
      goto LABEL_825;
    }
    int v481 = v480 - v472;
    uint64_t v482 = -(1 << v471);
    uint64_t v799 = (1 << v471) - 1;
    while (1)
    {
      uint64_t v483 = v481;
      uint64_t v484 = v466 + v481;
      unsigned int v485 = v316 == 1 ? v484 : v483;
      if (((v799 + v485) & v482) == v485) {
        break;
      }
LABEL_855:
      unsigned int v487 = v483 + 1;
      v411 = v826;
      if (v487 == v459) {
        goto LABEL_825;
      }
      unsigned int v488 = v487 >> 6;
      if (v487 >> 6 > v473) {
        goto LABEL_825;
      }
      int64_t v489 = v319;
      uint64_t v490 = 0;
      int v491 = v487 & 0x3F;
      BOOL v12 = v491 == 0;
      unint64_t v492 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v491;
      if (v12) {
        uint64_t v493 = -1;
      }
      else {
        uint64_t v493 = ~v492;
      }
      int v494 = v488 << 6;
      uint64_t v495 = v473 - v488;
      std::string::size_type v496 = v463 + 8 * v488;
      while (1)
      {
        uint64_t v497 = v490 ? -1 : v493;
        unint64_t v498 = v495 == v490 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v459 : -1;
        unint64_t v499 = v497 & v498 & *(void *)(v496 + 8 * v490);
        if (v499) {
          break;
        }
        v494 += 64;
        if (v495 + 1 == ++v490)
        {
          uint64_t v464 = v815;
          int64_t v319 = v489;
          goto LABEL_871;
        }
      }
      int v481 = __clz(__rbit64(v499)) + v494;
      uint64_t v464 = v815;
      int64_t v319 = v489;
      if (v481 == -1)
      {
LABEL_871:
        v411 = v826;
        goto LABEL_825;
      }
    }
    if (v484 > v459) {
      goto LABEL_871;
    }
    if (v466 >= 1)
    {
      LODWORD(v486) = 0;
      while (((*(void *)(v463 + 8 * ((v483 + v486) >> 6)) >> (v483
                                                                               + v486)) & 1) != 0)
      {
        uint64_t v486 = (v486 + 1);
        if (v466 <= v486) {
          goto LABEL_872;
        }
      }
      goto LABEL_855;
    }
LABEL_872:
    unsigned int v500 = v483 + v466;
    uint64_t v501 = -(v483 + v466);
    if (v316 != 1) {
      uint64_t v501 = v483;
    }
    *(void *)(v462 + 40 * v465) = v501;
    if (v466)
    {
      unsigned int v502 = v483 >> 6;
      v411 = v826;
      if (v483 >> 6 == v500 >> 6)
      {
        uint64_t v503 = ~((1 << v500) + (-1 << v483));
        goto LABEL_877;
      }
      *(void *)(v463 + 8 * v502) &= ~(-1 << v483);
      unsigned int v504 = (v483 + 63) & 0xFFFFFFC0;
      if (v504 + 64 <= v500)
      {
        do
        {
          *(void *)(v463 + 8 * (v504 >> 6)) = 0;
          unsigned int v505 = v504 + 64;
          unsigned int v506 = v504 + 128;
          v504 += 64;
        }
        while (v506 <= v500);
      }
      else
      {
        unsigned int v505 = (v483 + 63) & 0xFFFFFFC0;
      }
      if (v505 < v500)
      {
        uint64_t v503 = -1 << v500;
        unsigned int v502 = v505 >> 6;
LABEL_877:
        *(void *)(v463 + 8 * v502) &= v503;
      }
    }
    else
    {
      v411 = v826;
    }
LABEL_832:
    v457 += 4;
  }
  while (v457 != v458);
LABEL_886:
  uint64_t v507 = *(void *)(v464 + 248);
  char v508 = v819;
  if (!v507) {
    char v508 = 1;
  }
  if ((v508 & 1) == 0)
  {
    uint64_t v852 = (uint64_t)&v854;
    uint64_t v853 = 0x200000000;
    sub_1CC3EF1E8(*(_DWORD **)(v507 + 48), *(_DWORD *)(v507 + 56), (uint64_t)&v852);
    uint64_t v509 = (unsigned __int8 *)v852;
    if (v853)
    {
      int v510 = *(_DWORD *)(v317 + 32);
      uint64_t v511 = 4 * v853;
      uint64_t v512 = (int *)v852;
      do
      {
        int v513 = *v512;
        if (v316 == 1)
        {
          unsigned int v514 = v510 + v513;
          uint64_t v515 = *(void *)(v317 + 8);
          v337 += *(void *)(v515 + 40 * (v510 + v513) + 8);
        }
        else
        {
          uint64_t v515 = *(void *)(v317 + 8);
          unsigned int v514 = v510 + v513;
        }
        unsigned int v516 = *(unsigned __int8 *)(v515 + 40 * v514 + 16);
        if (v327 <= v516) {
          unsigned __int8 v327 = v516;
        }
        unint64_t v337 = (((1 << v516) + v337 + ~(unint64_t)(((1 << v516) - 1) & v833)) & -(1 << v516))
             + (((1 << v516) - 1) & v833);
        if (v316 == 1)
        {
          *(void *)(v515 + 40 * (v510 + v513)) = -(uint64_t)v337;
        }
        else
        {
          v517 = (unint64_t *)(v515 + 40 * (v510 + v513));
          unint64_t *v517 = v337;
          v337 += v517[1];
        }
        ++v512;
        v511 -= 4;
      }
      while (v511);
    }
    if (v509 != (unsigned __int8 *)&v854) {
      free(v509);
    }
  }
  if ((*(uint64_t (**)(unsigned __int8 *))(*(void *)v411 + 64))(v411))
  {
    unint64_t v518 = v337;
    goto LABEL_904;
  }
  if (*(unsigned char *)(v317 + 61))
  {
    if ((*(unsigned int (**)(unsigned __int8 *, llvm::MachineFunction *))(*(void *)v411 + 208))(v411, v828))
    {
      LODWORD(v561) = *(_DWORD *)(v317 + 72);
      if (v561 == -1) {
        uint64_t v561 = 0;
      }
      else {
        uint64_t v561 = v561;
      }
      v337 += v561;
    }
    if (*(unsigned char *)(v317 + 61)) {
      goto LABEL_973;
    }
  }
  if (*(unsigned char *)(v317 + 36)
    || (*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(void *)v801 + 440))(v801, v828)
    && (*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(void *)v801 + 432))(v801, v828)
    && *(_DWORD *)(v317 + 32) != -858993459 * ((*(void *)(v317 + 16) - *(void *)(v317 + 8)) >> 3))
  {
LABEL_973:
    v562 = v411 + 12;
  }
  else
  {
    v562 = v411 + 13;
  }
  unsigned int v563 = *v562;
  if (v563 <= v327) {
    LOBYTE(v563) = v327;
  }
  unint64_t v518 = (((1 << v563) + v337 + ~(unint64_t)(((1 << v563) - 1) & v833)) & -(1 << v563))
       + (((1 << v563) - 1) & v833);
  if (v316 == 1)
  {
    v519 = (uint64_t **)v828;
    if (v337 != v518)
    {
      uint64_t v564 = *(void *)(v464 + 248);
      char v565 = v819;
      if (!v564) {
        char v565 = 1;
      }
      if ((v565 & 1) == 0)
      {
        uint64_t v852 = (uint64_t)&v854;
        uint64_t v853 = 0x200000000;
        sub_1CC3EF1E8(*(_DWORD **)(v564 + 48), *(_DWORD *)(v564 + 56), (uint64_t)&v852);
        v566 = (unsigned __int8 *)v852;
        if (v853)
        {
          int v567 = *(_DWORD *)(v317 + 32);
          uint64_t v568 = *(void *)(v317 + 8);
          uint64_t v569 = 4 * v853;
          v570 = (int *)v852;
          do
          {
            int v571 = *v570++;
            *(void *)(v568 + 40 * (v571 + v567)) += v337 - v518;
            v569 -= 4;
          }
          while (v569);
        }
        if (v566 != (unsigned __int8 *)&v854) {
          free(v566);
        }
      }
    }
  }
  else
  {
LABEL_904:
    v519 = (uint64_t **)v828;
  }
  *(void *)(v317 + 48) = v518 - v319;
  if ((std::string::size_type *)v846.__r_.__value_.__l.__data_ != &v846.__r_.__value_.__r.__words[2]) {
    free(v846.__r_.__value_.__l.__data_);
  }
  if ((unsigned char *)v839 != v841) {
    free((void *)v839);
  }
  sub_1CD3C5048((uint64_t)&v869, (void *)v870);
  if (v862 != (uint64_t *)&v864) {
    free(v862);
  }
  uint64_t v520 = *(void *)(v803 + 112);
  if (!v520 || (*(unsigned char *)(v520 + 14) & 2) == 0)
  {
    uint64_t v521 = (*(uint64_t (**)(uint64_t *))(*v519[2] + 112))(v519[2]);
    uint64_t v522 = *(unsigned int *)(v464 + 272);
    if (v522)
    {
      uint64_t v523 = *(uint64_t **)(v464 + 264);
      uint64_t v524 = 8 * v522;
      do
      {
        uint64_t v525 = *v523++;
        (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(void *)v521 + 96))(v521, v519, v525);
        v524 -= 8;
      }
      while (v524);
    }
    uint64_t v526 = *(unsigned int *)(v464 + 320);
    if (v526)
    {
      v527 = *(uint64_t **)(v464 + 312);
      uint64_t v528 = 8 * v526;
      do
      {
        uint64_t v529 = *v527++;
        (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(void *)v521 + 104))(v521, v519, v529);
        v528 -= 8;
      }
      while (v528);
    }
    unsigned int v530 = *v519;
    uint64_t v531 = (*v519)[14];
    if (v531)
    {
      if (*(_DWORD *)(v531 + 8))
      {
        uint64_t v532 = *(void *)(v531 + 40);
        if (v532)
        {
          int v533 = *(_DWORD *)(v532 + 40);
          if (v533)
          {
            uint64_t v534 = *(void *)(v532 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCBE588))
            {
              unint64_t v790 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v790 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v790;
              __cxa_guard_release(&qword_1EBCBE588);
            }
            uint64_t v535 = __ROR8__(qword_1EBCBE580 ^ 0xDD0BD02F49080E7DLL, 30);
            unint64_t v536 = 0x9DDFEA08EB382D69
                 * ((qword_1EBCBE580 - 0x7F03C492FD0D025ELL) ^ ((0x9DDFEA08EB382D69
                                                               * ((v535 + 0x33CEB1F3DE1A15C6) ^ (qword_1EBCBE580
                                                                                                 - 0x7F03C492FD0D025ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v535 + 0x33CEB1F3DE1A15C6) ^ (qword_1EBCBE580 - 0x7F03C492FD0D025ELL))));
            unsigned int v537 = -348639895 * ((v536 >> 47) ^ v536);
            for (int n = 1; ; ++n)
            {
              unsigned int v539 = v537 & (v533 - 1);
              uint64_t v540 = v534 + 24 * v539;
              int v541 = *(void **)v540;
              if (*(void *)v540 == -1)
              {
                if ("zero-call-used-regs" == (char *)-1) {
                  goto LABEL_941;
                }
                goto LABEL_927;
              }
              if (v541 != (void *)-2) {
                break;
              }
              if ("zero-call-used-regs" == (char *)-2) {
                goto LABEL_941;
              }
LABEL_927:
              if (v541 == (void *)-1) {
                goto LABEL_1138;
              }
              unsigned int v537 = n + v539;
            }
            if (*(void *)(v540 + 8) != 19) {
              goto LABEL_927;
            }
            BOOL v542 = *v541 == 0x6C61632D6F72657ALL && v541[1] == 0x722D646573752D6CLL;
            if (!v542 || *(void *)((char *)v541 + 11) != 0x736765722D646573) {
              goto LABEL_927;
            }
LABEL_941:
            uint64_t v544 = v530[14];
            if (!v544
              || !*(_DWORD *)(v544 + 8)
              || (uint64_t v545 = *(void *)(v544 + 40)) == 0
              || (int v546 = *(_DWORD *)(v545 + 40)) == 0)
            {
LABEL_998:
              char v572 = 0;
              goto LABEL_999;
            }
            uint64_t v547 = *(void *)(v545 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCBE588))
            {
              unint64_t v792 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v792 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v792;
              __cxa_guard_release(&qword_1EBCBE588);
            }
            uint64_t v548 = __ROR8__(qword_1EBCBE580 ^ 0xDD0BD02F49080E7DLL, 30);
            unint64_t v549 = 0x9DDFEA08EB382D69
                 * ((qword_1EBCBE580 - 0x7F03C492FD0D025ELL) ^ ((0x9DDFEA08EB382D69
                                                               * ((v548 + 0x33CEB1F3DE1A15C6) ^ (qword_1EBCBE580
                                                                                                 - 0x7F03C492FD0D025ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v548 + 0x33CEB1F3DE1A15C6) ^ (qword_1EBCBE580 - 0x7F03C492FD0D025ELL))));
            unsigned int v550 = -348639895 * ((v549 >> 47) ^ v549);
            int v551 = 1;
            uint64_t v552 = (uint64_t)v828;
            while (2)
            {
              unsigned int v553 = v550 & (v546 - 1);
              uint64_t v554 = v547 + 24 * v553;
              long long v555 = *(void **)v554;
              if (*(void *)v554 == -1)
              {
                if ("zero-call-used-regs" == (char *)-1) {
                  break;
                }
                goto LABEL_949;
              }
              if (v555 == (void *)-2)
              {
                if ("zero-call-used-regs" == (char *)-2) {
                  break;
                }
                goto LABEL_949;
              }
              if (*(void *)(v554 + 8) != 19
                || (*v555 == 0x6C61632D6F72657ALL ? (BOOL v556 = v555[1] == 0x722D646573752D6CLL) : (BOOL v556 = 0),
                    v556 ? (BOOL v557 = *(void *)((char *)v555 + 11) == 0x736765722D646573) : (BOOL v557 = 0),
                    !v557))
              {
LABEL_949:
                if (v555 == (void *)-1) {
                  goto LABEL_1011;
                }
                unsigned int v550 = v551 + v553;
                ++v551;
                continue;
              }
              break;
            }
            uint64_t v558 = *(void *)(v554 + 16);
            if (!v558)
            {
LABEL_1011:
              char v572 = 0;
              goto LABEL_1012;
            }
            int v559 = *(_DWORD *)(v558 + 16) - 3;
            uint64_t v560 = (_DWORD *)(v558 + *(unsigned int *)(v558 + 12) + 24);
            switch(v559)
            {
              case 1:
                if (*(_DWORD *)((char *)v560 + 1) == 1885956979) {
                  goto LABEL_1138;
                }
                char v572 = 2 * (*(_DWORD *)((char *)v560 + 1) == 1684370293);
                break;
              case 4:
                if (*(_DWORD *)((char *)v560 + 1) == 762080353 && v560[1] == 1919969069)
                {
                  char v572 = 4;
                  goto LABEL_1012;
                }
                int v574 = *(_DWORD *)((char *)v560 + 1);
                int v575 = v560[1];
                if (v574 != 762080353 || v575 != 1735549229) {
                  goto LABEL_1011;
                }
                char v572 = 8;
                goto LABEL_1012;
              case 5:
                if (*(void *)((char *)v560 + 1) == 0x7270672D64657375)
                {
                  char v572 = 6;
                }
                else
                {
                  if (*(void *)((char *)v560 + 1) != 0x6772612D64657375) {
                    goto LABEL_998;
                  }
                  char v572 = 10;
                }
                break;
              case 8:
                BOOL v787 = (*(void *)((char *)v560 + 1) ^ 0x2D7270672D6C6C61 | *(void *)(v560 + 1) ^ 0x6772612D7270672DLL) == 0;
                char v788 = 12;
                goto LABEL_1386;
              case 9:
                BOOL v787 = (*(void *)((char *)v560 + 1) ^ 0x7270672D64657375 | *(unsigned int *)((char *)v560 + 9) ^ 0x6772612DLL) == 0;
                char v788 = 14;
LABEL_1386:
                if (v787) {
                  char v572 = v788;
                }
                else {
                  char v572 = 0;
                }
                goto LABEL_1012;
              default:
                goto LABEL_1011;
            }
LABEL_999:
            uint64_t v552 = (uint64_t)v828;
LABEL_1012:
            uint64_t v577 = (*(uint64_t (**)(void))(**(void **)(v552 + 16) + 176))(*(void *)(v552 + 16));
            llvm::TargetRegisterInfo::getAllocatableSet(v577, v552, 0, (uint64_t)&v852);
            v834 = (void *)v577;
            unsigned int v578 = *(_DWORD *)(v577 + 16);
            v846.__r_.__value_.__r.__words[0] = (std::string::size_type)&v846.__r_.__value_.__r.__words[2];
            HIDWORD(v846.__r_.__value_.__r.__words[1]) = 6;
            if (v578 + 63 >= 0x1C0)
            {
              LODWORD(v846.__r_.__value_.__r.__words[1]) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v578 + 63 >= 0x40) {
              bzero(&v846.__r_.__value_.__r.__words[2], 8 * ((v578 + 63) >> 6));
            }
            LODWORD(v846.__r_.__value_.__r.__words[1]) = (v578 + 63) >> 6;
            unsigned int v851 = v578;
            if ((v572 & 2) != 0)
            {
              for (iuint64_t i = *(void *)(v552 + 328); ii != v552 + 320; iuint64_t i = *(void *)(ii + 8))
              {
                for (juint64_t j = *(void *)(ii + 56); jj != ii + 48; juint64_t j = *(void *)(jj + 8))
                {
                  uint64_t v581 = *(unsigned int *)(jj + 40);
                  if (v581)
                  {
                    uint64_t v582 = v852;
                    std::string::size_type v583 = v846.__r_.__value_.__r.__words[0];
                    uint64_t v584 = 32 * v581;
                    v585 = (unsigned int *)(*(void *)(jj + 32) + 4);
                    do
                    {
                      if (!*(v585 - 1) && (*(v585 - 1) & 0x2000000) == 0)
                      {
                        unint64_t v586 = *v585;
                        uint64_t v587 = 1 << v586;
                        unint64_t v588 = v586 >> 6;
                        if ((v587 & *(void *)(v582 + 8 * v588)) != 0) {
                          *(void *)(v583 + 8 * v588) |= v587;
                        }
                      }
                      v585 += 8;
                      v584 -= 32;
                    }
                    while (v584);
                    if (!jj) {
                      goto LABEL_1030;
                    }
                  }
                  if ((*(unsigned char *)jj & 4) == 0)
                  {
LABEL_1030:
                    while ((*(_WORD *)(jj + 44) & 8) != 0)
                      juint64_t j = *(void *)(jj + 8);
                  }
                }
              }
            }
            int v589 = *(_DWORD *)(v577 + 16);
            uint64_t v839 = (uint64_t)v841;
            HIDWORD(v840) = 6;
            if ((v589 + 63) >= 0x1C0)
            {
              LODWORD(v840) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if ((v589 + 63) >= 0x40) {
              bzero(v841, 8 * ((v589 + 63) >> 6));
            }
            LODWORD(v840) = (v589 + 63) >> 6;
            int v845 = v589;
            if (DWORD2(v857))
            {
              uint64_t v590 = 0;
              v591 = (uint64_t *)v852;
              uint64_t v592 = (DWORD2(v857) - 1) & 0xFFFFFFC0;
              while (1)
              {
                uint64_t v594 = *v591++;
                uint64_t v593 = v594;
                unint64_t v595 = v592 + v590 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v857);
                unint64_t v596 = v595 & v593;
                if (v596) {
                  break;
                }
                v590 -= 64;
                if (v592 + v590 == -64) {
                  goto LABEL_1071;
                }
              }
              int v597 = __clz(__rbit64(v596));
              if (v597 + 1 != v590)
              {
                unsigned int v598 = v597 - v590;
                unint64_t v599 = (v597 - v590);
                do
                {
                  if (((*(uint64_t (**)(void *, llvm::MachineFunction *, unint64_t))(*v834 + 160))(v834, v828, v599) & 1) == 0&& ((v572 & 4) == 0|| (*(unsigned int (**)(void *, llvm::MachineFunction *, unint64_t))(*v834 + 168))(v834, v828, v599)))
                  {
                    unint64_t v600 = v599 >> 3;
                    if (((v572 & 2) == 0
                       || ((*(void *)(v846.__r_.__value_.__r.__words[0] + (v600 & 0x1FFFFFFFFFFFFFF8)) >> v599) & 1) != 0)
                      && ((v572 & 8) == 0
                       || (*(unsigned int (**)(void *, llvm::MachineFunction *, unint64_t))(*v834 + 152))(v834, v828, v599)))
                    {
                      *(void *)(v839 + (v600 & 0x1FFFFFFFFFFFFFF8)) |= 1 << v599;
                    }
                  }
                  unsigned int v601 = v598 + 1;
                  if (v598 + 1 == DWORD2(v857)) {
                    break;
                  }
                  unsigned int v602 = v601 >> 6;
                  unsigned int v603 = DWORD2(v857) - 1;
                  if (v601 >> 6 > (DWORD2(v857) - 1) >> 6) {
                    break;
                  }
                  uint64_t v604 = 0;
                  uint64_t v605 = v603 >> 6;
                  int v606 = v601 & 0x3F;
                  BOOL v12 = v606 == 0;
                  unint64_t v607 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v606;
                  uint64_t v608 = v12 ? -1 : ~v607;
                  unint64_t v609 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v603;
                  int v610 = v602 << 6;
                  uint64_t v611 = v605 - v602;
                  v612 = (unsigned __int8 *)(v852 + 8 * v602);
                  while (1)
                  {
                    uint64_t v613 = v604 ? -1 : v608;
                    unint64_t v614 = v611 == v604 ? v609 : -1;
                    unint64_t v615 = v613 & v614 & *(void *)&v612[8 * v604];
                    if (v615) {
                      break;
                    }
                    v610 += 64;
                    if (v611 + 1 == ++v604) {
                      goto LABEL_1071;
                    }
                  }
                  unsigned int v598 = __clz(__rbit64(v615)) + v610;
                  unint64_t v599 = v598;
                }
                while (v598 != -1);
              }
            }
LABEL_1071:
            v616 = v828;
            v617 = (llvm::MachineBasicBlock *)*((void *)v828 + 41);
            v820 = (llvm::MachineFunction *)((char *)v828 + 320);
            if (v617 != (llvm::MachineFunction *)((char *)v828 + 320))
            {
              while (1)
              {
                unint64_t v618 = llvm::MachineBasicBlock::getFirstTerminator(v617);
                v812 = v617;
                v619 = (char *)v617 + 48;
                if ((llvm::MachineBasicBlock *)((char *)v617 + 48) != (llvm::MachineBasicBlock *)v618) {
                  break;
                }
LABEL_1106:
                v617 = (llvm::MachineBasicBlock *)*((void *)v812 + 1);
                if (v617 == v820) {
                  goto LABEL_1107;
                }
              }
              unint64_t v620 = v618;
              v827 = (char *)v617 + 48;
              while (2)
              {
                uint64_t v621 = *(void *)(*(void *)(v620 + 16) + 8);
                if ((*(_WORD *)(v620 + 44) & 0xC) != 0 && (*(_WORD *)(v620 + 44) & 4) == 0)
                {
                  unint64_t v638 = v620;
                  if ((v621 & 0x20) != 0) {
                    goto LABEL_1079;
                  }
                  while ((*(_WORD *)(v638 + 44) & 8) != 0)
                  {
                    unint64_t v638 = *(void *)(v638 + 8);
                    if ((*(unsigned char *)(*(void *)(v638 + 16) + 8) & 0x20) != 0) {
                      goto LABEL_1079;
                    }
                  }
                  goto LABEL_1101;
                }
                if ((v621 & 0x20) == 0) {
                  goto LABEL_1101;
                }
LABEL_1079:
                uint64_t v623 = *(unsigned int *)(v620 + 40);
                if (!v623) {
                  goto LABEL_1101;
                }
                uint64_t v624 = *(void *)(v620 + 32);
                uint64_t v625 = v624 + 32 * v623;
                do
                {
                  if (!*(unsigned char *)v624)
                  {
                    unsigned int v626 = *(_DWORD *)(v624 + 4);
                    uint64_t v627 = v834[7];
                    uint64_t v628 = v834[1] + 24 * v626;
                    uint64_t v629 = *(unsigned int *)(v628 + 4);
                    v630 = (unsigned __int16 *)(v627 + 2 * *(unsigned int *)(v628 + 8));
                    int v632 = *v630;
                    unint64_t v631 = (unint64_t)(v630 + 1);
                    __int16 v633 = v632 + v626;
                    if (!v632) {
                      unint64_t v631 = 0;
                    }
                    unint64_t v634 = v627 + 2 * v629;
                    LOWORD(v862) = *(_DWORD *)(v624 + 4);
                    uint64_t v863 = v634;
                    LOWORD(v864) = v626;
                    WORD4(v864) = v633;
                    unint64_t v865 = v631;
                    LOWORD(v866) = v633;
                    LOWORD(v868) = 0;
                    *((void *)&v866 + 1) = 0;
                    *(void *)&long long v867 = 0;
                    v869 = 0;
                    while (v634 | v631 || (unint64_t)v867 | (unint64_t)v869)
                    {
                      uint64_t v635 = 0;
                      do
                      {
                        v636 = (_WORD *)(*(uint64_t (**)(uint64_t **))((char *)&off_1F2611138 + v635))(&v862);
                        v635 += 16;
                      }
                      while (!v636);
                      uint64_t v637 = 0;
                      *(void *)(v839 + (((unint64_t)(unsigned __int16)*v636 >> 3) & 0x1FF8)) &= ~(1 << *v636);
                      do
                      {
                        if ((*(uint64_t (**)(uint64_t **))((char *)&off_1F2611158 + v637))(&v862)) {
                          break;
                        }
                        BOOL v12 = v637 == 16;
                        v637 += 16;
                      }
                      while (!v12);
                      unint64_t v634 = v863;
                      unint64_t v631 = v865;
                    }
                  }
                  v624 += 32;
                }
                while (v624 != v625);
                v619 = v827;
                v616 = v828;
                if (v620)
                {
LABEL_1101:
                  if ((*(unsigned char *)v620 & 4) != 0) {
                    goto LABEL_1105;
                  }
                }
                while ((*(_WORD *)(v620 + 44) & 8) != 0)
                  unint64_t v620 = *(void *)(v620 + 8);
LABEL_1105:
                unint64_t v620 = *(void *)(v620 + 8);
                if ((char *)v620 == v619) {
                  goto LABEL_1106;
                }
                continue;
              }
            }
LABEL_1107:
            uint64_t v639 = (*(uint64_t (**)(void))(**((void **)v616 + 2) + 112))(*((void *)v616 + 2));
            v640 = (llvm::MachineBasicBlock *)*((void *)v616 + 41);
            uint64_t v464 = v815;
            if (v640 != v820)
            {
              uint64_t v641 = v639;
              do
              {
                unint64_t v642 = *((void *)v640 + 6) & 0xFFFFFFFFFFFFFFF8;
                if ((llvm::MachineBasicBlock *)((char *)v640 + 48) != (llvm::MachineBasicBlock *)v642)
                {
                  if (v642 && (*(unsigned char *)v642 & 4) != 0)
                  {
                    __int16 v643 = *(_WORD *)(v642 + 44);
                  }
                  else
                  {
                    while (1)
                    {
                      __int16 v643 = *(_WORD *)(v642 + 44);
                      if ((v643 & 4) == 0) {
                        break;
                      }
                      unint64_t v642 = *(void *)v642 & 0xFFFFFFFFFFFFFFF8;
                    }
                  }
                  int v644 = v643 & 0xC;
                  int v645 = v643 & 4;
                  uint64_t v646 = *(void *)(*(void *)(v642 + 16) + 8);
                  if (v644) {
                    BOOL v647 = v645 == 0;
                  }
                  else {
                    BOOL v647 = 0;
                  }
                  if (v647)
                  {
                    while ((v646 & 0x20) == 0)
                    {
                      if ((*(_WORD *)(v642 + 44) & 8) == 0) {
                        goto LABEL_1126;
                      }
                      unint64_t v642 = *(void *)(v642 + 8);
                      LOBYTE(v646) = *(unsigned char *)(*(void *)(v642 + 16) + 8);
                    }
LABEL_1120:
                    v862 = (uint64_t *)&v864;
                    uint64_t v863 = 0x600000000;
                    int v648 = v840;
                    if (v840)
                    {
                      if (v840 >= 7uLL) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy(&v864, (const void *)v839, 8 * v840);
                      LODWORD(v863) = v648;
                    }
                    DWORD2(v867) = v845;
                    (*(void (**)(uint64_t, uint64_t **, llvm::MachineBasicBlock *))(*(void *)v641 + 112))(v641, &v862, v640);
                    uint64_t v464 = v815;
                    if (v862 != (uint64_t *)&v864) {
                      free(v862);
                    }
                    goto LABEL_1126;
                  }
                  if ((v646 & 0x20) != 0) {
                    goto LABEL_1120;
                  }
                }
LABEL_1126:
                v640 = (llvm::MachineBasicBlock *)*((void *)v640 + 1);
              }
              while (v640 != v820);
            }
            if ((unsigned char *)v839 != v841) {
              free((void *)v839);
            }
            if ((std::string::size_type *)v846.__r_.__value_.__l.__data_ != &v846.__r_.__value_.__r.__words[2]) {
              free(v846.__r_.__value_.__l.__data_);
            }
            if ((long long *)v852 != &v854) {
              free((void *)v852);
            }
          }
        }
      }
    }
LABEL_1138:
    uint64_t v649 = *(unsigned int *)(v464 + 272);
    v519 = (uint64_t **)v828;
    if (v649)
    {
      v650 = *(uint64_t **)(v464 + 264);
      uint64_t v651 = 8 * v649;
      do
      {
        uint64_t v652 = *v650++;
        (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(void *)v521 + 144))(v521, v828, v652);
        v651 -= 8;
      }
      while (v651);
    }
    if (llvm::MachineFunction::shouldSplitStack(v828))
    {
      uint64_t v653 = *(unsigned int *)(v464 + 272);
      if (v653)
      {
        v654 = *(uint64_t **)(v464 + 264);
        uint64_t v655 = 8 * v653;
        do
        {
          uint64_t v656 = *v654++;
          (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(void *)v521 + 160))(v521, v828, v656);
          v655 -= 8;
        }
        while (v655);
      }
    }
    if ((*(_WORD *)(*(void *)v828 + 18) & 0x3FF0) == 0xB0)
    {
      uint64_t v657 = *(unsigned int *)(v464 + 272);
      if (v657)
      {
        v658 = *(uint64_t **)(v464 + 264);
        uint64_t v659 = 8 * v657;
        do
        {
          uint64_t v660 = *v658++;
          (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(void *)v521 + 168))(v521, v828, v660);
          v659 -= 8;
        }
        while (v659);
      }
    }
  }
  int v661 = v836;
  if (v836 > 1)
  {
    v664 = (uint64_t *)&v837;
    if ((v836 & 1) == 0)
    {
      v664 = v837;
      if (!v838)
      {
        int v661 = 0;
        v665 = v837;
LABEL_1428:
        uint64_t v464 = v815;
        v519 = (uint64_t **)v828;
        goto LABEL_1153;
      }
      v800 = &v837[7 * v838];
    }
    int v661 = v836 & 1;
    while ((*v664 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v664 += 7;
      if (v664 == v800)
      {
        v665 = v800;
        v664 = v800;
        goto LABEL_1428;
      }
    }
    uint64_t v464 = v815;
    v519 = (uint64_t **)v828;
    v665 = v800;
  }
  else
  {
    if (v836)
    {
      unsigned int v662 = 4;
      v663 = &v837;
    }
    else
    {
      v663 = v837;
      unsigned int v662 = v838;
    }
    v664 = &v663[7 * v662];
    v665 = v664;
  }
LABEL_1153:
  BOOL v666 = v661 == 0;
  v667 = &v837;
  if (v666) {
    v667 = v837;
  }
  unsigned int v668 = v838;
  if (!v666) {
    unsigned int v668 = 4;
  }
  v669 = &v667[7 * v668];
LABEL_1158:
  while (v664 != v669)
  {
    uint64_t v670 = *((unsigned int *)v664 + 4);
    if (v670)
    {
      uint64_t v671 = *v664;
      v672 = (uint64_t *)v664[1];
      v673 = *(uint64_t **)(*v664 + 56);
      v674 = &v672[v670];
      do
      {
        uint64_t v675 = *v672;
        uint64_t v676 = *(void *)(v671 + 40);
        *(void *)(v675 + 24) = v676;
        uint64_t v677 = *(void *)(v676 + 32);
        uint64_t v678 = *(unsigned int *)(v675 + 40);
        if (v678)
        {
          uint64_t v681 = *(void *)(v675 + 32);
          uint64_t v682 = *(void *)(v677 + 40);
          uint64_t v683 = 32 * v678;
          do
          {
            if (!*(unsigned char *)v681)
            {
              uint64_t v684 = *(unsigned int *)(v681 + 4);
              if ((int)v684 >= 0) {
                v685 = (uint64_t *)(*(void *)(v682 + 272) + 8 * v684);
              }
              else {
                v685 = (uint64_t *)(*(void *)(v682 + 24) + 16 * (v684 & 0x7FFFFFFF) + 8);
              }
              uint64_t v686 = *v685;
              if (*v685)
              {
                uint64_t v687 = *(void *)(v686 + 16);
                *(void *)(v686 + 16) = v681;
                *(void *)(v681 + 16) = v687;
                if (*(unsigned char *)(v681 + 3))
                {
                  *(void *)(v681 + 24) = v686;
                }
                else
                {
                  *(void *)(v681 + 24) = 0;
                  v685 = (uint64_t *)(v687 + 24);
                }
              }
              else
              {
                *(void *)(v681 + 16) = v681;
                *(void *)(v681 + 24) = 0;
              }
              uint64_t *v685 = v681;
            }
            v681 += 32;
            v683 -= 32;
          }
          while (v683);
        }
        uint64_t v679 = *(void *)(v677 + 728);
        if (v679) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v679 + 24))(v679, v675);
        }
        unint64_t v680 = *v673 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v675 = v680 | *(void *)v675 & 7;
        *(void *)(v675 + 8) = v673;
        *(void *)(v680 + 8) = v675;
        uint64_t *v673 = *v673 & 7 | v675;
        ++v672;
      }
      while (v672 != v674);
    }
    v688 = v664 + 7;
    v664 = v665;
    v519 = (uint64_t **)v828;
    if (v688 != v665)
    {
      while ((*v688 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v688 += 7;
        if (v688 == v665)
        {
          v664 = v665;
          goto LABEL_1158;
        }
      }
      v664 = v688;
    }
  }
  (*(void (**)(uint64_t, uint64_t **, void))(*(void *)v804 + 280))(v804, v519, *(void *)(v464 + 248));
  v689 = v519[2];
  uint64_t v690 = (*(uint64_t (**)(uint64_t *))(*v689 + 112))(v689);
  if ((*(unsigned int (**)(uint64_t, uint64_t **))(*(void *)v690 + 224))(v690, v519))
  {
    uint64_t v691 = (*(uint64_t (**)(uint64_t *))(*v689 + 176))(v689);
    if (*(void *)(v464 + 248) && !*(unsigned char *)(v464 + 360)) {
      char v692 = 1;
    }
    else {
      char v692 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v691 + 400))(v691, v519);
    }
    *(unsigned char *)(v464 + 361) = v692;
    uint64_t v852 = (uint64_t)&v854;
    uint64_t v853 = 0x800000000;
    sub_1CBB1173C((uint64_t)&v852, ((unint64_t)((char *)v519[14] - (char *)v519[13]) >> 3));
    v862 = (uint64_t *)&v865;
    uint64_t v863 = (uint64_t)&v865;
    *(void *)&long long v864 = 8;
    DWORD2(v864) = 0;
    uint64_t v839 = (uint64_t)v519;
    sub_1CC3EF304((llvm::SmallPtrSetImplBase *)&v862, (uint64_t)&v839, &v846);
    v693 = (void *)v846.__r_.__value_.__r.__words[2];
    for (kuint64_t k = v846.__r_.__value_.__l.__size_;
          v846.__r_.__value_.__r.__words[2] != v846.__r_.__value_.__l.__size_;
          kuint64_t k = v846.__r_.__value_.__l.__size_)
    {
      LODWORD(v839) = 0;
      unint64_t v695 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v693 - kk) >> 3);
      if ((v695 & 0xFFFFFFFE) != 0) {
        LODWORD(v839) = *(_DWORD *)(v852 + 4 * *(int *)(*(void *)(kk + 24 * (v695 - 2)) + 24));
      }
      uint64_t v696 = *(v693 - 3);
      sub_1CC3EF380(v464, (void *)v696, (uint64_t)v519, (unsigned int *)&v839);
      *(_DWORD *)(v852 + 4 * *(int *)(v696 + 24)) = v839;
      sub_1CC3EFCC0(&v846);
      v693 = (void *)v846.__r_.__value_.__r.__words[2];
    }
    if (v693) {
      operator delete(v693);
    }
    for (mm = (uint64_t **)v519[41]; mm != v519 + 40; mm = (uint64_t **)mm[1])
    {
      v698 = v862;
      if ((uint64_t *)v863 == v862)
      {
        unsigned int v699 = DWORD1(v864);
        v700 = (char *)(v863 + 8 * DWORD1(v864));
        if (DWORD1(v864))
        {
          uint64_t v701 = 0;
          while (*(uint64_t ***)(v863 + v701) != mm)
          {
            v701 += 8;
            if (8 * DWORD1(v864) == v701) {
              goto LABEL_1215;
            }
          }
          v700 = (char *)(v863 + v701);
        }
LABEL_1215:
        v698 = (void *)v863;
      }
      else
      {
        int v702 = v864 - 1;
        unsigned int v703 = (v864 - 1) & ((mm >> 4) ^ (mm >> 9));
        v700 = (char *)(v863 + 8 * v703);
        v704 = *(uint64_t ***)v700;
        if (*(void *)v700 == -1)
        {
          v705 = 0;
LABEL_1224:
          if (v705) {
            v700 = v705;
          }
          unsigned int v699 = DWORD1(v864);
          if (*(uint64_t ***)v700 != mm) {
            v700 = (char *)(v863 + 8 * v864);
          }
        }
        else
        {
          v705 = 0;
          int v706 = 1;
          while (v704 != mm)
          {
            if (v705) {
              BOOL v707 = 0;
            }
            else {
              BOOL v707 = v704 == (uint64_t **)-2;
            }
            if (v707) {
              v705 = v700;
            }
            unsigned int v708 = v703 + v706++;
            unsigned int v703 = v708 & v702;
            v700 = (char *)(v863 + 8 * (v708 & v702));
            v704 = *(uint64_t ***)v700;
            if (*(void *)v700 == -1) {
              goto LABEL_1224;
            }
          }
          unsigned int v699 = DWORD1(v864);
        }
      }
      if ((void *)v863 == v698) {
        unsigned int v709 = v699;
      }
      else {
        unsigned int v709 = v864;
      }
      if (v700 == (char *)(v863 + 8 * v709))
      {
        LODWORD(v846.__r_.__value_.__l.__data_) = 0;
        sub_1CC3EF380(v464, mm, (uint64_t)v519, (unsigned int *)&v846);
      }
    }
    if ((uint64_t *)v863 != v862) {
      free((void *)v863);
    }
    if ((long long *)v852 != &v854) {
      free((void *)v852);
    }
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v802 + 376))(v802, v519) & 1) != 0
    && *(unsigned char *)(v464 + 360))
  {
    llvm::scavengeFrameVirtualRegs(v519, *(llvm::MachineFunction **)(v464 + 248), v710);
  }
  v711 = v519[7];
  unint64_t v712 = v711[6];
  uint64_t v713 = (*v519)[14];
  if (!v713 || !*(_DWORD *)(v713 + 8) || (uint64_t v714 = *(void *)(v713 + 40)) == 0 || (v715 = *(_DWORD *)(v714 + 40)) == 0)
  {
    unint64_t v720 = 0xFFFFFFFFLL;
    goto LABEL_1290;
  }
  uint64_t v716 = *(void *)(v714 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v789 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v789 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v789;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v717 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xA794B9D9BC943BA1)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1EBCBE580 ^ 0xA794B9D9BC943BA1)) >> 47) ^ 0xC6E0CAF4D2E65AD6);
  unsigned int v718 = (-348639895 * ((v717 >> 47) ^ v717)) ^ 0x2D6B6361;
  int v719 = 1;
  unint64_t v720 = 0xFFFFFFFFLL;
  while (1)
  {
    unsigned int v721 = v718 & (v715 - 1);
    uint64_t v722 = v716 + 24 * v721;
    v723 = *(void **)v722;
    if (*(void *)v722 == -1)
    {
      if ("warn-stack-size" == (char *)-1) {
        goto LABEL_1255;
      }
      goto LABEL_1244;
    }
    if (v723 != (void *)-2) {
      break;
    }
    if ("warn-stack-size" == (char *)-2) {
      goto LABEL_1255;
    }
LABEL_1244:
    if (v723 == (void *)-1)
    {
      v519 = (uint64_t **)v828;
      goto LABEL_1290;
    }
    unsigned int v718 = v719 + v721;
    ++v719;
  }
  if (*(void *)(v722 + 8) != 15) {
    goto LABEL_1244;
  }
  if (*v723 != 0x6174732D6E726177 || *(void *)((char *)v723 + 7) != 0x657A69732D6B6361) {
    goto LABEL_1244;
  }
LABEL_1255:
  v519 = (uint64_t **)v828;
  unint64_t v725 = *(void *)(*(void *)v828 + 112);
  if (!v725)
  {
    LODWORD(v726) = 0;
LABEL_1372:
    BOOL v784 = 1;
    goto LABEL_1434;
  }
  LODWORD(v726) = *(_DWORD *)(v725 + 8);
  if (!v726)
  {
LABEL_1429:
    unint64_t v725 = 0;
    goto LABEL_1372;
  }
  unint64_t v725 = *(void *)(v725 + 40);
  if (!v725)
  {
LABEL_1378:
    LODWORD(v726) = 0;
    BOOL v784 = 1;
    goto LABEL_1434;
  }
  int v727 = *(_DWORD *)(v725 + 40);
  if (!v727)
  {
    unint64_t v725 = 0;
    goto LABEL_1378;
  }
  uint64_t v728 = *(void *)(v725 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v791 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v791 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v791;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v729 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xA794B9D9BC943BA1)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1EBCBE580 ^ 0xA794B9D9BC943BA1)) >> 47) ^ 0xC6E0CAF4D2E65AD6);
  unsigned int v730 = (-348639895 * ((v729 >> 47) ^ v729)) ^ 0x2D6B6361;
  int v731 = 1;
  while (2)
  {
    unsigned int v732 = v730 & (v727 - 1);
    uint64_t v733 = v728 + 24 * v732;
    v734 = *(void **)v733;
    if (*(void *)v733 == -1)
    {
      if ("warn-stack-size" == (char *)-1) {
        goto LABEL_1274;
      }
      goto LABEL_1263;
    }
    if (v734 == (void *)-2)
    {
      if ("warn-stack-size" == (char *)-2) {
        goto LABEL_1274;
      }
LABEL_1263:
      if (v734 != (void *)-1)
      {
        unsigned int v730 = v731 + v732;
        ++v731;
        continue;
      }
      unint64_t v725 = 0;
LABEL_1366:
      LODWORD(v726) = 0;
      BOOL v784 = 1;
      v519 = (uint64_t **)v828;
      goto LABEL_1434;
    }
    break;
  }
  if (*(void *)(v733 + 8) != 15) {
    goto LABEL_1263;
  }
  if (*v734 != 0x6174732D6E726177 || *(void *)((char *)v734 + 7) != 0x657A69732D6B6361) {
    goto LABEL_1263;
  }
LABEL_1274:
  unint64_t v725 = *(void *)(v733 + 16);
  if (!v725) {
    goto LABEL_1366;
  }
  uint64_t v726 = *(unsigned int *)(v725 + 16);
  v519 = (uint64_t **)v828;
  if (!v726) {
    goto LABEL_1429;
  }
  unint64_t v736 = 0;
  v737 = (unsigned __int8 *)(*(unsigned int *)(v725 + 12) + v725 + 25);
  uint64_t v738 = *(unsigned int *)(v725 + 16);
  while (1)
  {
    int v740 = *v737++;
    int v739 = v740;
    if ((v740 - 48) < 0xA)
    {
      int v741 = -48;
      goto LABEL_1279;
    }
    if ((v739 - 97) >= 0x1A) {
      break;
    }
    int v741 = -87;
LABEL_1287:
    uint64_t v464 = v815;
    v519 = (uint64_t **)v828;
LABEL_1279:
    unsigned int v742 = v741 + v739;
    if (v742 > 9)
    {
      unint64_t v725 = v736;
      goto LABEL_1433;
    }
    unint64_t v725 = 10 * v736 + v742;
    if (v736 > v725 / 0xA)
    {
      LODWORD(v726) = 1;
      goto LABEL_1372;
    }
    unint64_t v736 = v725;
    if (!--v738) {
      goto LABEL_1433;
    }
  }
  if ((v739 - 65) <= 0x19)
  {
    int v741 = -55;
    goto LABEL_1287;
  }
  unint64_t v725 = v736;
  uint64_t v464 = v815;
  v519 = (uint64_t **)v828;
LABEL_1433:
  BOOL v784 = v738 == v726;
  LODWORD(v726) = v738 != 0;
LABEL_1434:
  int v793 = v726 | v784;
  unint64_t v794 = v725;
  if (HIDWORD(v725)) {
    int v795 = 1;
  }
  else {
    int v795 = v793;
  }
  BOOL v12 = v795 == 0;
  unint64_t v720 = 0xFFFFFFFFLL;
  if (v12) {
    unint64_t v720 = v794;
  }
LABEL_1290:
  uint64_t v743 = (*v519)[14];
  if (v743 && (*(unsigned char *)(v743 + 18) & 2) != 0) {
    v712 += v711[84];
  }
  if (v712 > v720)
  {
    LODWORD(v863) = 2;
    BYTE4(v863) = 1;
    *(void *)&long long v864 = v803;
    *((void *)&v864 + 1) = "stack frame size";
    unint64_t v865 = v712;
    *(void *)&long long v866 = v720;
    v862 = (uint64_t *)&unk_1F26166E0;
    llvm::LLVMContext::diagnose(**(void **)v803, (const llvm::DiagnosticInfo *)&v862);
  }
  v744 = *(uint64_t *****)(v464 + 368);
  uint64_t v745 = *(void *)****v744;
  if (*(void *)(v745 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v745 + 72) + 48))(*(void *)(v745 + 72)))
  {
    v759 = *v519;
    if ((*((unsigned char *)*v519 + 23) & 0x20) == 0) {
      goto LABEL_1337;
    }
    uint64_t v760 = **(void **)*v759;
    v862 = *v519;
    int v761 = *(_DWORD *)(v760 + 2496);
    if (v761)
    {
      uint64_t v762 = *(void *)(v760 + 2480);
      int v763 = v761 - 1;
      unsigned int v764 = v763 & ((v759 >> 4) ^ (v759 >> 9));
      v765 = (uint64_t **)(v762 + 40 * v764);
      v766 = *v765;
      if (*v765 == v759) {
        goto LABEL_1332;
      }
      v767 = 0;
      int v768 = 1;
      while (v766 != (uint64_t *)-4096)
      {
        if (v767) {
          BOOL v769 = 0;
        }
        else {
          BOOL v769 = v766 == (uint64_t *)-8192;
        }
        if (v769) {
          v767 = v765;
        }
        unsigned int v770 = v764 + v768++;
        unsigned int v764 = v770 & v763;
        v765 = (uint64_t **)(v762 + 40 * v764);
        v766 = *v765;
        if (*v765 == v759) {
          goto LABEL_1332;
        }
      }
      if (v767) {
        v785 = v767;
      }
      else {
        v785 = v765;
      }
    }
    else
    {
      v785 = 0;
    }
    v765 = (uint64_t **)sub_1CC609054(v760 + 2480, (uint64_t)&v862, (uint64_t *)&v862, v785);
    v786 = v862;
    v765[3] = 0;
    v765[4] = 0;
    *v765 = v786;
    v765[1] = (uint64_t *)(v765 + 3);
    v765[2] = (uint64_t *)0x100000000;
LABEL_1332:
    uint64_t v771 = *((unsigned int *)v765 + 4);
    if (v771)
    {
      v772 = v765[1] + 1;
      uint64_t v773 = 16 * v771;
      LODWORD(v774) = 0;
      while (*((_DWORD *)v772 - 2))
      {
        uint64_t v775 = 0;
        v772 += 2;
        v773 -= 16;
        if (!v773) {
          goto LABEL_1339;
        }
      }
      uint64_t v774 = *v772;
      if (*v772)
      {
        uint64_t v775 = *v772;
        if (*(unsigned char *)v774 != 15) {
          uint64_t v775 = *(void *)(v774 - 8 * *(unsigned int *)(v774 + 8));
        }
        LODWORD(v774) = *(_DWORD *)(v774 + 28);
        goto LABEL_1339;
      }
LABEL_1338:
      uint64_t v775 = 0;
LABEL_1339:
      v776 = v519[41];
      uint64_t v777 = *(void *)v776[4];
      LODWORD(v863) = 17;
      BYTE4(v863) = 2;
      *(void *)&long long v864 = v777;
      *((void *)&v864 + 1) = v775;
      unint64_t v865 = v774;
      *(void *)&long long v866 = "prologepilog";
      *((void *)&v866 + 1) = "StackSize";
      *(void *)&long long v867 = 9;
      BYTE8(v867) = 0;
      LOBYTE(v868) = 0;
      v869 = v871;
      uint64_t v870 = 0x400000000;
      LOBYTE(v872) = 0;
      HIDWORD(v872) = -1;
      v873 = v776;
      v862 = (uint64_t *)&unk_1F260E0D8;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v846, "NumStackBytes", 0xDuLL, v712);
      sub_1CD3D6290((uint64_t)&v862, (long long *)&v846);
      uint64_t v852 = (uint64_t)" stack bytes in function";
      uint64_t v853 = 24;
      sub_1CC59ADEC((uint64_t *)&v869, (uint64_t)&v852);
      LODWORD(v853) = v863;
      BYTE4(v853) = BYTE4(v863);
      long long v854 = v864;
      unint64_t v855 = v865;
      uint64_t v852 = (uint64_t)&unk_1F2616800;
      long long v856 = v866;
      long long v857 = v867;
      uint64_t v858 = v868;
      v859 = (char *)v861;
      uint64_t v860 = 0x400000000;
      if (v870) {
        sub_1CD494D68((uint64_t)&v859, (uint64_t)&v869);
      }
      v861[32] = v872;
      v861[33] = v873;
      uint64_t v852 = (uint64_t)&unk_1F260E0D8;
      if (SHIBYTE(v848) < 0) {
        operator delete(v847);
      }
      if (SHIBYTE(v846.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v846.__r_.__value_.__l.__data_);
      }
      v862 = (uint64_t *)&unk_1F2616800;
      v778 = (char *)v869;
      if (v870)
      {
        unint64_t v779 = (unint64_t)v870 << 6;
        do
        {
          v780 = (void **)&v778[v779];
          if (v778[v779 - 17] < 0) {
            operator delete(*(v780 - 5));
          }
          if (*((char *)v780 - 41) < 0) {
            operator delete(*(v780 - 8));
          }
          v779 -= 64;
        }
        while (v779);
        v778 = (char *)v869;
      }
      if (v778 != (char *)v871) {
        free(v778);
      }
      llvm::MachineOptimizationRemarkEmitter::emit(v744, (llvm::DiagnosticInfoOptimizationBase *)&v852);
      uint64_t v852 = (uint64_t)&unk_1F2616800;
      v781 = v859;
      uint64_t v464 = v815;
      if (v860)
      {
        unint64_t v782 = (unint64_t)v860 << 6;
        do
        {
          v783 = (void **)&v781[v782];
          if (v781[v782 - 17] < 0) {
            operator delete(*(v783 - 5));
          }
          if (*((char *)v783 - 41) < 0) {
            operator delete(*(v783 - 8));
          }
          v782 -= 64;
        }
        while (v782);
        v781 = v859;
      }
      if (v781 != (char *)v861) {
        free(v781);
      }
      goto LABEL_1297;
    }
LABEL_1337:
    LODWORD(v774) = 0;
    goto LABEL_1338;
  }
LABEL_1297:
  v746 = *(void **)(v464 + 248);
  if (v746)
  {
    v747 = (void *)v746[40];
    if (v747 != v746 + 42) {
      free(v747);
    }
    v748 = (void *)v746[31];
    if (v748 != v746 + 33) {
      free(v748);
    }
    v749 = (void *)v746[22];
    if (v749 != v746 + 24) {
      free(v749);
    }
    v750 = (void *)v746[13];
    if (v750 != v746 + 15) {
      free(v750);
    }
    v751 = (void *)v746[6];
    if (v751 != v746 + 8) {
      free(v751);
    }
    MEMORY[0x1D25D9CE0](v746, 0x10E0C4069A138BFLL);
  }
  *(_DWORD *)(v464 + 272) = 0;
  *(_DWORD *)(v464 + 320) = 0;
  *((_OWORD *)v711 + 41) = 0u;
  char v752 = v836;
  if (v836)
  {
    uint64_t v753 = 4;
LABEL_1311:
    v754 = v814 + 3;
    uint64_t v755 = 56 * v753;
    do
    {
      uint64_t v756 = *(v754 - 3);
      if (v756 != -4096 && v756 != -8192)
      {
        v757 = (void *)*(v754 - 2);
        if (v754 != v757) {
          free(v757);
        }
      }
      v754 += 7;
      v755 -= 56;
    }
    while (v755);
    char v752 = v836;
  }
  else
  {
    uint64_t v753 = v838;
    if (v838)
    {
      v814 = v837;
      goto LABEL_1311;
    }
  }
  if ((v752 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v837, 8);
  }
  return 1;
}

BOOL sub_1CC3EF174(uint64_t a1, uint64_t a2)
{
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a1 + 24), *(uint64_t **)(a1 + 32), &v5);
  if (v6 && (llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), &v5), v6)) {
    return sub_1CD569164(a1, a2) == 0;
  }
  else {
    return 1;
  }
}

_DWORD *sub_1CC3EF1E8(_DWORD *result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = 16 * a2;
    do
    {
      if ((*result & 0x80000000) == 0)
      {
        unint64_t v4 = *(unsigned int *)(a3 + 8);
        if (v4 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a3 + 4 * v4) = *result;
        ++*(_DWORD *)(a3 + 8);
      }
      result += 4;
      v3 -= 16;
    }
    while (v3);
  }
  return result;
}

BOOL sub_1CC3EF284(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 8);
  uint64_t v2 = *(unsigned __int16 **)(a1 + 56);
  if (v1 != v2)
  {
    int v3 = *v1;
    *(void *)(a1 + 8) = v1 + 1;
    __int16 v4 = *(_WORD *)a1 + v3;
    *(_WORD *)a1 = v4;
    if (!v3) {
      *(void *)(a1 + 8) = 0;
    }
    *(_WORD *)(a1 + 16) = v4;
  }
  return v1 != v2;
}

BOOL sub_1CC3EF2C4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 32);
  uint64_t v2 = *(unsigned __int16 **)(a1 + 80);
  if (v1 != v2)
  {
    int v3 = *v1;
    *(void *)(a1 + 32) = v1 + 1;
    __int16 v4 = *(_WORD *)(a1 + 24) + v3;
    *(_WORD *)(a1 + 24) = v4;
    if (!v3) {
      *(void *)(a1 + 32) = 0;
    }
    *(_WORD *)(a1 + 40) = v4;
  }
  return v1 != v2;
}

void sub_1CC3EF304(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  sub_1CC3EFA10(&v5, *(void *)(*(void *)a2 + 328), this);
  __int16 v4 = __p;
  *a3 = v5;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  sub_1CBF340A8(a3 + 1, v4, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3));
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1CC3EF380(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4)
{
  v52[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a3 + 16) + 104))(*(void *)(a3 + 16));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a3 + 16) + 176))(*(void *)(a3 + 16));
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a3 + 16) + 112))(*(void *)(a3 + 16));
  uint64_t v10 = *(void *)(a1 + 248);
  if (v10 && *(unsigned char *)(a1 + 361))
  {
    llvm::RegScavenger::init(*(llvm::RegScavenger **)(a1 + 248), (llvm::MachineBasicBlock *)a2);
    llvm::LiveRegUnits::addLiveIns((llvm::LiveRegUnits *)(v10 + 96), (const llvm::MachineFunction **)a2);
  }
  unint64_t v41 = a2;
  uint64_t v11 = a2[7];
  unint64_t v42 = a2 + 7;
  BOOL v12 = a2 + 6;
  if ((void *)v11 == a2 + 6) {
    return;
  }
  BOOL v43 = 0;
  int v45 = v7;
  uint64_t v46 = a1;
  int v44 = a2 + 6;
  do
  {
    while (1)
    {
      uint64_t v13 = v11;
      int v14 = **(unsigned __int16 **)(v11 + 16);
      int v15 = v7[16];
      BOOL v16 = v15 == v14;
      if (v15 != v14 && v7[17] != v14) {
        break;
      }
      *a4 += (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v7 + 48))(v7, v11);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v9 + 296))(v9, a3, v41, v11);
      BOOL v43 = v16;
      if (v12 == (void *)v11) {
        return;
      }
    }
    uint64_t v17 = *(unsigned int *)(v11 + 40);
    if (!v17)
    {
LABEL_37:
      if (v43)
      {
        uint64_t v7 = v45;
        int v32 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v45 + 48))(v45, v13);
        char v33 = 0;
        uint64_t v34 = v46;
        *a4 += v32;
        unint64_t v35 = v13;
      }
      else
      {
        char v33 = 0;
        unint64_t v35 = v13;
        uint64_t v7 = v45;
        uint64_t v34 = v46;
      }
      BOOL v12 = v44;
      goto LABEL_41;
    }
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *(void *)(v13 + 32);
      if (*(unsigned char *)(v20 + v18) == 5)
      {
        int v21 = **(unsigned __int16 **)(v13 + 16);
        if ((v21 - 13) <= 1)
        {
          unsigned int v49 = 0;
          uint64_t v22 = *(unsigned int *)(*(void *)(*(void *)(a3 + 56) + 8)
                                + 40
                                * (*(_DWORD *)(*(void *)(a3 + 56) + 32) + *(_DWORD *)(v20 + v18 + 16))
                                + 8);
          v48[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 232))(v9, a3);
          v48[1] = v23;
          llvm::MachineOperand::ChangeToRegister(v20 + v18, v49, 0, 0, 0, 0, 0, 0);
          int v24 = **(unsigned __int16 **)(v13 + 16);
          uint64_t v25 = *(unsigned char **)(v13 + 32);
          uint64_t v26 = 96;
          if (v24 == 14) {
            uint64_t v26 = 32;
          }
          uint64_t v27 = *(llvm::DIExpression **)&v25[v26 + 16];
          if (v24 == 14)
          {
            v25 += 64;
          }
          else if (v24 == 13)
          {
            if (v25[32] != 1 || *v25)
            {
              if (llvm::DIExpression::isComplex(v27)) {
                unsigned int v28 = 0;
              }
              else {
                unsigned int v28 = 4;
              }
            }
            else
            {
              if (llvm::DIExpression::isImplicit(v27))
              {
                int v50 = v52;
                v52[0] = 148;
                v52[1] = v22;
                uint64_t v51 = 0x200000002;
                uint64_t v27 = llvm::DIExpression::prependOpcodes(v27, (unsigned int *)&v50, 1, 0);
                llvm::MachineOperand::ChangeToRegister(*(void *)(v13 + 32) + 32, 0, 0, 0, 0, 0, 0, 0);
                if (v50 != v52) {
                  free(v50);
                }
              }
              unsigned int v28 = 0;
            }
            appended = llvm::TargetRegisterInfo::prependOffsetExpression(v8, v27, v28, (uint64_t)v48);
LABEL_28:
            uint64_t v31 = 96;
            if (**(_WORD **)(v13 + 16) == 14) {
              uint64_t v31 = 32;
            }
            *(void *)(*(void *)(v13 + 32) + v31 + 16) = appended;
            goto LABEL_31;
          }
          unint64_t v29 = (unint64_t)(v18 + v20 - (void)v25) >> 5;
          int v50 = v52;
          uint64_t v51 = 0x300000000;
          (*(void (**)(uint64_t, void *, void **))(*(void *)v8 + 488))(v8, v48, &v50);
          appended = llvm::DIExpression::appendOpsToArg(v27, (uint64_t *)v50, v51, v29, 0);
          if (v50 != v52) {
            free(v50);
          }
          goto LABEL_28;
        }
        if (v21 != 16) {
          break;
        }
      }
LABEL_31:
      ++v19;
      v18 += 32;
      if (v17 == v19) {
        goto LABEL_37;
      }
    }
    if (v21 == 31)
    {
      LODWORD(v50) = 0;
      *(void *)(v20 + v18 + 48) += (int)*a4
                                   + (*(uint64_t (**)(uint64_t, uint64_t, void, void **, void))(*(void *)v9 + 240))(v9, a3, *(unsigned int *)(v20 + v18 + 16), &v50, 0);
      llvm::MachineOperand::ChangeToRegister(*(void *)(v13 + 32) + v18, v50, 0, 0, 0, 0, 0, 0);
      goto LABEL_31;
    }
    uint64_t v38 = *v42;
    unint64_t v35 = v13;
    uint64_t v34 = v46;
    BOOL v12 = v44;
    if (v13 != *v42)
    {
      unint64_t v35 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
      if (!v35 || (*(unsigned char *)v35 & 4) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 4) != 0)
          unint64_t v35 = *(void *)v35 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    if (*(unsigned char *)(v46 + 361)) {
      uint64_t v39 = *(void *)(v46 + 248);
    }
    else {
      uint64_t v39 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v8 + 504))(v8, v13, *a4, v19, v39);
    char v33 = 1;
    uint64_t v36 = v42;
    BOOL v40 = v13 == v38;
    uint64_t v7 = v45;
    if (v40)
    {
LABEL_46:
      uint64_t v11 = *v36;
    }
    else
    {
LABEL_41:
      if ((void *)v35 != v12)
      {
        if ((*(unsigned char *)v35 & 4) == 0)
        {
          while ((*(_WORD *)(v35 + 44) & 8) != 0)
            unint64_t v35 = *(void *)(v35 + 8);
        }
        uint64_t v36 = (uint64_t *)(v35 + 8);
        goto LABEL_46;
      }
      uint64_t v11 = (uint64_t)v12;
    }
    uint64_t v37 = *(void *)(v34 + 248);
    if (v37)
    {
      if (!*(unsigned char *)(v34 + 361)) {
        char v33 = 1;
      }
      if ((v33 & 1) == 0) {
        sub_1CD41C88C(v37, v13);
      }
    }
  }
  while ((void *)v11 != v12);
}

void *sub_1CC3EFA10(void *a1, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  *a1 = this;
  a1[1] = 0;
  char v6 = (void **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((unsigned int *)this + 5);
  if (v7 == *(void *)this)
  {
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v8;
      uint64_t v11 = (void *)*((void *)this + 1);
      while (*v11 != a2)
      {
        if (*v11 == -2) {
          uint64_t v9 = v11;
        }
        ++v11;
        v10 -= 8;
        if (!v10)
        {
          if (!v9) {
            goto LABEL_9;
          }
          *uint64_t v9 = a2;
          --*((_DWORD *)this + 6);
          goto LABEL_11;
        }
      }
      return a1;
    }
LABEL_9:
    unsigned int v12 = *((_DWORD *)this + 4);
    if (v8 < v12)
    {
      *((_DWORD *)this + 5) = v8 + 1;
      *(void *)(v7 + 8 * v8) = a2;
LABEL_11:
      int v14 = (char *)a1[2];
      unint64_t v13 = a1[3];
      if ((unint64_t)v14 < v13)
      {
        *(void *)int v14 = a2;
        v14[8] = 0;
        uint64_t v22 = v14 + 24;
        v14[16] = 0;
      }
      else
      {
        int v15 = (char *)*v6;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*v6) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v15) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 > 0xAAAAAAAAAAAAAAALL) {
            sub_1CB833614();
          }
          uint64_t v20 = (char *)operator new(24 * v19);
        }
        else
        {
          uint64_t v20 = 0;
        }
        int v21 = &v20[24 * v16];
        *(void *)int v21 = a2;
        v21[8] = 0;
        v21[16] = 0;
        uint64_t v22 = v21 + 24;
        if (v14 != v15)
        {
          do
          {
            long long v23 = *(_OWORD *)(v14 - 24);
            *((void *)v21 - 1) = *((void *)v14 - 1);
            *(_OWORD *)(v21 - 24) = v23;
            v21 -= 24;
            v14 -= 24;
          }
          while (v14 != v15);
          int v14 = (char *)*v6;
        }
        a1[1] = v21;
        a1[2] = v22;
        a1[3] = &v20[24 * v19];
        if (v14) {
          operator delete(v14);
        }
      }
      a1[2] = v22;
      return a1;
    }
  }
  else
  {
    unsigned int v12 = *((_DWORD *)this + 4);
  }
  if (3 * v12 <= 4 * ((int)v8 - *((_DWORD *)this + 6)))
  {
    if (v12 >= 0x40) {
      v12 *= 2;
    }
    else {
      unsigned int v12 = 128;
    }
  }
  else if (v12 - v8 >= v12 >> 3)
  {
    goto LABEL_31;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v12);
  unsigned int v12 = *((_DWORD *)this + 4);
  uint64_t v7 = *((void *)this + 1);
LABEL_31:
  unsigned int v25 = v12 - 1;
  unsigned int v26 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v27 = (void *)(v7 + 8 * v26);
  uint64_t v28 = *v27;
  if (*v27 != -1)
  {
    unint64_t v29 = 0;
    int v30 = 1;
    while (v28 != a2)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v28 == -2;
      }
      if (v31) {
        unint64_t v29 = v27;
      }
      unsigned int v32 = v26 + v30++;
      unsigned int v26 = v32 & v25;
      uint64_t v27 = (void *)(v7 + 8 * (v32 & v25));
      uint64_t v28 = *v27;
      if (*v27 == -1) {
        goto LABEL_44;
      }
    }
    return a1;
  }
  unint64_t v29 = 0;
LABEL_44:
  if (v29) {
    char v33 = v29;
  }
  else {
    char v33 = v27;
  }
  if (*v33 != a2)
  {
    if (*v33 == -2) {
      --*((_DWORD *)this + 6);
    }
    else {
      ++*((_DWORD *)this + 5);
    }
    *char v33 = a2;
    goto LABEL_11;
  }
  return a1;
}

void sub_1CC3EFCC0(void *a1)
{
  uint64_t v2 = a1[2];
  while (2)
  {
    uint64_t v3 = *(void *)(v2 - 24);
    if (!*(unsigned char *)(v2 - 8))
    {
      *(void *)(v2 - 16) = *(void *)(v3 + 88);
      *(unsigned char *)(v2 - 8) = 1;
    }
    while (1)
    {
      __int16 v4 = *(uint64_t **)(v2 - 16);
      if (v4 == *(uint64_t **)(v3 + 96)) {
        break;
      }
      *(void *)(v2 - 16) = v4 + 1;
      uint64_t v5 = *v4;
      uint64_t v6 = *a1;
      uint64_t v7 = *(void *)(*a1 + 8);
      uint64_t v8 = *(unsigned int *)(*a1 + 20);
      if (v7 != *(void *)*a1)
      {
        unsigned int v12 = *(_DWORD *)(v6 + 16);
        goto LABEL_29;
      }
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8 * v8;
        uint64_t v11 = *(void **)(*a1 + 8);
        while (*v11 != v5)
        {
          if (*v11 == -2) {
            uint64_t v9 = v11;
          }
          ++v11;
          v10 -= 8;
          if (!v10)
          {
            if (!v9) {
              goto LABEL_13;
            }
            *uint64_t v9 = v5;
            --*(_DWORD *)(v6 + 24);
            goto LABEL_36;
          }
        }
      }
      else
      {
LABEL_13:
        unsigned int v12 = *(_DWORD *)(v6 + 16);
        if (v8 < v12)
        {
          *(_DWORD *)(v6 + 20) = v8 + 1;
          *(void *)(v7 + 8 * v8) = v5;
LABEL_36:
          int v24 = (unsigned char *)a1[2];
          unint64_t v23 = a1[3];
          if ((unint64_t)v24 >= v23)
          {
            unsigned int v26 = (unsigned char *)a1[1];
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v26) >> 3) + 1;
            if (v27 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v26) >> 3);
            if (2 * v28 > v27) {
              unint64_t v27 = 2 * v28;
            }
            if (v28 >= 0x555555555555555) {
              unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              if (v29 > 0xAAAAAAAAAAAAAAALL) {
                sub_1CB833614();
              }
              int v30 = (char *)operator new(24 * v29);
            }
            else
            {
              int v30 = 0;
            }
            BOOL v31 = &v30[8 * ((v24 - v26) >> 3)];
            *(void *)BOOL v31 = v5;
            v31[8] = 0;
            v31[16] = 0;
            unsigned int v25 = v31 + 24;
            if (v24 != v26)
            {
              do
              {
                long long v32 = *(_OWORD *)(v24 - 24);
                *((void *)v31 - 1) = *((void *)v24 - 1);
                *(_OWORD *)(v31 - 24) = v32;
                v31 -= 24;
                v24 -= 24;
              }
              while (v24 != v26);
              int v24 = (unsigned char *)a1[1];
            }
            a1[1] = v31;
            a1[2] = v25;
            a1[3] = &v30[24 * v29];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(void *)int v24 = v5;
            v24[8] = 0;
            unsigned int v25 = v24 + 24;
            v24[16] = 0;
          }
          a1[2] = v25;
          return;
        }
LABEL_29:
        if (3 * v12 <= 4 * ((int)v8 - *(_DWORD *)(v6 + 24)))
        {
          if (v12 >= 0x40) {
            v12 *= 2;
          }
          else {
            unsigned int v12 = 128;
          }
LABEL_63:
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)*a1, v12);
          unsigned int v12 = *(_DWORD *)(v6 + 16);
          uint64_t v7 = *(void *)(v6 + 8);
          goto LABEL_31;
        }
        if (v12 - v8 < v12 >> 3) {
          goto LABEL_63;
        }
LABEL_31:
        unsigned int v21 = v12 - 1;
        unsigned int v17 = (v12 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        unint64_t v18 = (void *)(v7 + 8 * v17);
        uint64_t v19 = *v18;
        if (*v18 == -1)
        {
          int v14 = 0;
LABEL_23:
          if (v14) {
            uint64_t v20 = v14;
          }
          else {
            uint64_t v20 = v18;
          }
          if (*v20 != v5)
          {
            if (*v20 == -2) {
              --*(_DWORD *)(v6 + 24);
            }
            else {
              ++*(_DWORD *)(v6 + 20);
            }
            *uint64_t v20 = v5;
            goto LABEL_36;
          }
        }
        else
        {
          int v14 = 0;
          int v16 = 1;
          while (v19 != v5)
          {
            if (v14) {
              BOOL v13 = 0;
            }
            else {
              BOOL v13 = v19 == -2;
            }
            if (v13) {
              int v14 = v18;
            }
            unsigned int v15 = v17 + v16++;
            unsigned int v17 = v15 & v21;
            unint64_t v18 = (void *)(v7 + 8 * (v15 & v21));
            uint64_t v19 = *v18;
            if (*v18 == -1) {
              goto LABEL_23;
            }
          }
        }
      }
    }
    uint64_t v22 = a1[1];
    uint64_t v2 = a1[2] - 24;
    a1[2] = v2;
    if (v22 != v2) {
      continue;
    }
    break;
  }
}

void llvm::initializePseudoProbeInserterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD1FE8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC3F0028;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD1FE8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC3F0028(uint64_t a1)
{
}

void llvm::createPseudoProbeInserter(llvm *this)
{
}

uint64_t sub_1CC3F0104(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCD1FE0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F2611188;
  *(unsigned char *)(a1 + 248) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD1FE8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC3F0028;
    v5[1] = &PassRegistry;
    __int16 v4 = v5;
    std::__call_once(&qword_1EBCD1FE8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC3F0200()
{
}

void sub_1CC3F023C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __int16 v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3F02F0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __int16 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC3F039C()
{
  return "Pseudo Probe Inserter";
}

uint64_t sub_1CC3F03AC(uint64_t a1, llvm::Module *this)
{
  uint64_t v3 = "llvm.pseudo_probe_desc";
  __int16 v4 = 259;
  *(unsigned char *)(a1 + 248) = llvm::Module::getNamedMetadata(this, &v3) != 0;
  return 0;
}

void sub_1CC3F0408(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC3F0414(uint64_t a1, uint64_t a2)
{
  v92[18] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 248)
    || (uint64_t v87 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16)),
        uint64_t v3 = *(void **)(a2 + 328),
        uint64_t v88 = (void *)(a2 + 320),
        v3 == (void *)(a2 + 320)))
  {
    char v4 = 0;
    return v4 & 1;
  }
  char v4 = 0;
  do
  {
    uint64_t v5 = v3 + 6;
    uint64_t v6 = v3[7];
    if ((void *)v6 == v3 + 6) {
      goto LABEL_161;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v3 + 5;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v6 + 16) + 8);
      if ((v9 & 8) == 0) {
        uint64_t v7 = (unint64_t *)v6;
      }
      if ((*(_WORD *)(v6 + 44) & 0xC) == 0 || (*(_WORD *)(v6 + 44) & 4) != 0)
      {
        if ((v9 & 0x80) == 0) {
          goto LABEL_52;
        }
LABEL_13:
        uint64_t v11 = *(void *)(v6 + 56);
        if (!v11) {
          goto LABEL_52;
        }
        uint64_t v12 = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8));
        if (*(unsigned char *)v12 != 19) {
          goto LABEL_52;
        }
        unint64_t v13 = *(unsigned int *)(v12 + 24);
        if (v13 < 8 || (*(_DWORD *)(v12 + 24) & 7) != 7) {
          goto LABEL_52;
        }
        uint64_t v89 = *(unsigned __int8 **)(v6 + 56);
        llvm::MetadataTracking::track((uint64_t)&v89, (unsigned __int8 *)v11, 2);
        uint64_t v15 = *(void *)(v87 + 8) + 1104;
        if ((*(_WORD *)(v6 + 44) & 4) == 0)
        {
          int v16 = (llvm::MachineFunction *)v3[4];
          v90[0] = v89;
          if (v89) {
            llvm::MetadataTracking::track((uint64_t)v90, v89, 2);
          }
          uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v16, v15, v90, 0);
          if (!v90[0]) {
            goto LABEL_24;
          }
          int v45 = *v90[0];
          if ((v45 - 4) > 0x1E)
          {
            if ((v45 - 3) >= 0xFFFFFFFE) {
              uint64_t v51 = v90[0];
            }
            else {
              uint64_t v51 = 0;
            }
            if ((v45 - 3) < 0xFFFFFFFE)
            {
              if (v45 == 3) {
                *((void *)v90[0] + 1) = 0;
              }
              goto LABEL_24;
            }
            unint64_t v47 = (unint64_t)(v51 + 8);
          }
          else
          {
            if ((v90[0][1] & 0x7F) != 2 && !*((_DWORD *)v90[0] + 3)) {
              goto LABEL_24;
            }
            uint64_t v46 = *((void *)v90[0] + 2);
            if ((v46 & 4) == 0) {
              goto LABEL_24;
            }
            unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
            if (!v47) {
              goto LABEL_24;
            }
          }
          v91[0] = v90;
          sub_1CC5FA668(v47 + 16, v91);
LABEL_24:
          uint64_t v18 = *v8;
          *(void *)(MachineInstr + 24) = *v8;
          uint64_t v19 = *(void *)(v18 + 32);
          uint64_t v20 = *(unsigned int *)(MachineInstr + 40);
          if (v20)
          {
            uint64_t v37 = *(void *)(MachineInstr + 32);
            uint64_t v38 = *(void *)(v19 + 40);
            uint64_t v39 = 32 * v20;
            do
            {
              if (!*(unsigned char *)v37)
              {
                uint64_t v40 = *(unsigned int *)(v37 + 4);
                if ((int)v40 >= 0) {
                  unint64_t v41 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v40);
                }
                else {
                  unint64_t v41 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
                }
                uint64_t v42 = *v41;
                if (*v41)
                {
                  uint64_t v43 = *(void *)(v42 + 16);
                  *(void *)(v42 + 16) = v37;
                  *(void *)(v37 + 16) = v43;
                  if (*(unsigned char *)(v37 + 3))
                  {
                    *(void *)(v37 + 24) = v42;
                  }
                  else
                  {
                    *(void *)(v37 + 24) = 0;
                    unint64_t v41 = (uint64_t *)(v43 + 24);
                  }
                }
                else
                {
                  *(void *)(v37 + 16) = v37;
                  *(void *)(v37 + 24) = 0;
                }
                uint64_t *v41 = v37;
              }
              v37 += 32;
              v39 -= 32;
            }
            while (v39);
          }
          uint64_t v21 = *(void *)(v19 + 728);
          if (v21) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 24))(v21, MachineInstr);
          }
          unint64_t v22 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t MachineInstr = v22 | *(void *)MachineInstr & 7;
          *(void *)(MachineInstr + 8) = v6;
          *(void *)(v22 + 8) = MachineInstr;
          *(void *)uint64_t v6 = *(void *)v6 & 7 | MachineInstr;
          goto LABEL_39;
        }
        int v16 = (llvm::MachineFunction *)v3[4];
        v90[0] = v89;
        if (v89) {
          llvm::MetadataTracking::track((uint64_t)v90, v89, 2);
        }
        uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v16, v15, v90, 0);
        if (v90[0])
        {
          int v48 = *v90[0];
          if ((v48 - 4) > 0x1E)
          {
            if ((v48 - 3) >= 0xFFFFFFFE) {
              BOOL v52 = v90[0];
            }
            else {
              BOOL v52 = 0;
            }
            if ((v48 - 3) < 0xFFFFFFFE)
            {
              if (v48 == 3) {
                *((void *)v90[0] + 1) = 0;
              }
              goto LABEL_35;
            }
            unint64_t v50 = (unint64_t)(v52 + 8);
          }
          else
          {
            if ((v90[0][1] & 0x7F) != 2 && !*((_DWORD *)v90[0] + 3)) {
              goto LABEL_35;
            }
            uint64_t v49 = *((void *)v90[0] + 2);
            if ((v49 & 4) == 0) {
              goto LABEL_35;
            }
            unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
            if (!v50) {
              goto LABEL_35;
            }
          }
          v91[0] = v90;
          sub_1CC5FA668(v50 + 16, v91);
        }
LABEL_35:
        if (v5 != (void *)v6 && (*(_WORD *)(v6 + 44) & 4) != 0) {
          *(_WORD *)(MachineInstr + 44) |= 0xCu;
        }
        sub_1CC31973C(v3 + 5, (uint64_t *)v6, MachineInstr);
LABEL_39:
        for (uint64_t i = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8));
              (*(unsigned char *)i & 0xFE) == 0x12;
        uint64_t v25 = i - 8 * *(unsigned int *)(i + 8);
        uint64_t v26 = *(void *)(v25 + 24);
        if (!v26 || (v27 = *(void **)(v26 + 8), v30 = *v27, unint64_t v28 = (int *)(v27 + 3), (v29 = v30) == 0))
        {
          uint64_t v31 = *(void *)(v25 + 16);
          if (v31)
          {
            long long v32 = *(void **)(v31 + 8);
            size_t v33 = *v32;
            unint64_t v28 = (int *)(v32 + 3);
            size_t v29 = v33;
          }
          else
          {
            size_t v29 = 0;
            unint64_t v28 = 0;
          }
        }
        *(_OWORD *)uint64_t v91 = xmmword_1CFAC4320;
        v92[0] = 0;
        llvm::MD5::update((int *)v91, v28, v29);
        llvm::MD5::final((int *)v91, (int *)v90);
        LODWORD(v91[0]) = 1;
        v91[1] = 0;
        v92[0] = v90[0];
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v16, (const llvm::MachineOperand *)v91);
        LODWORD(v91[0]) = 1;
        v91[1] = 0;
        v92[0] = (unsigned __int16)(v13 >> 3);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v16, (const llvm::MachineOperand *)v91);
        LODWORD(v91[0]) = 1;
        v91[1] = 0;
        v92[0] = (v13 >> 26) & 7;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v16, (const llvm::MachineOperand *)v91);
        LODWORD(v91[0]) = 1;
        v91[1] = 0;
        v92[0] = v13 >> 29;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v16, (const llvm::MachineOperand *)v91);
        if (!v89) {
          goto LABEL_51;
        }
        int v34 = *v89;
        if ((v34 - 4) > 0x1E)
        {
          if ((v34 - 3) >= 0xFFFFFFFE) {
            unint64_t v35 = v89;
          }
          else {
            unint64_t v35 = 0;
          }
          if ((v34 - 3) < 0xFFFFFFFE)
          {
            if (v34 == 3) {
              *((void *)v89 + 1) = 0;
            }
            goto LABEL_51;
          }
          unint64_t v36 = (unint64_t)(v35 + 8);
        }
        else
        {
          if ((v89[1] & 0x7F) != 2 && !*((_DWORD *)v89 + 3)) {
            goto LABEL_51;
          }
          uint64_t v44 = *((void *)v89 + 2);
          if ((v44 & 4) == 0) {
            goto LABEL_51;
          }
          unint64_t v36 = v44 & 0xFFFFFFFFFFFFFFF8;
          if (!v36) {
            goto LABEL_51;
          }
        }
        v91[0] = &v89;
        sub_1CC5FA668(v36 + 16, v91);
LABEL_51:
        char v4 = 1;
        goto LABEL_52;
      }
      uint64_t v23 = v6;
      if ((v9 & 0x80) != 0) {
        goto LABEL_13;
      }
      while ((*(_WORD *)(v23 + 44) & 8) != 0)
      {
        uint64_t v23 = *(void *)(v23 + 8);
        if ((*(unsigned char *)(*(void *)(v23 + 16) + 8) & 0x80) != 0) {
          goto LABEL_13;
        }
      }
LABEL_52:
      if ((*(unsigned char *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          uint64_t v6 = *(void *)(v6 + 8);
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while ((void *)v6 != v5);
    if (v7)
    {
      unint64_t v53 = *v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v53 || (*(unsigned char *)v53 & 4) == 0)
      {
        while ((*(_WORD *)(v53 + 44) & 4) != 0)
          unint64_t v53 = *(void *)v53 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v53 != v5)
      {
        do
        {
          uint64_t v54 = *(void *)(v53 + 16);
          if ((*(unsigned char *)(v54 + 8) & 8) == 0) {
            break;
          }
          unint64_t v55 = *(void *)v53 & 0xFFFFFFFFFFFFFFF8;
          if (!v55 || (*(unsigned char *)v55 & 4) == 0)
          {
            while ((*(_WORD *)(v55 + 44) & 4) != 0)
              unint64_t v55 = *(void *)v55 & 0xFFFFFFFFFFFFFFF8;
          }
          if (*(_WORD *)v54 == 23)
          {
            uint64_t v56 = *(void *)(*(void *)(v53 + 24) + 32);
            if (v56)
            {
              uint64_t v57 = *(void *)(v56 + 728);
              if (v57) {
                (*(void (**)(uint64_t, unint64_t))(*(void *)v57 + 32))(v57, v53);
              }
              uint64_t v58 = *(unsigned int *)(v53 + 40);
              if (v58)
              {
                uint64_t v59 = *(void *)(v53 + 32);
                uint64_t v60 = *(void *)(v56 + 40);
                uint64_t v61 = 32 * v58;
                do
                {
                  if (!*(unsigned char *)v59)
                  {
                    uint64_t v62 = *(unsigned int *)(v59 + 4);
                    if ((v62 & 0x80000000) != 0) {
                      uint64_t v63 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v63 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v62);
                    }
                    uint64_t v64 = *v63;
                    uint64_t v66 = *(void *)(v59 + 16);
                    uint64_t v65 = *(void *)(v59 + 24);
                    if (v59 != *v63) {
                      uint64_t v63 = (uint64_t *)(v66 + 24);
                    }
                    *uint64_t v63 = v65;
                    if (v65) {
                      uint64_t v67 = v65;
                    }
                    else {
                      uint64_t v67 = v64;
                    }
                    *(void *)(v67 + 16) = v66;
                    *(void *)(v59 + 16) = 0;
                    *(void *)(v59 + 24) = 0;
                  }
                  v59 += 32;
                  v61 -= 32;
                }
                while (v61);
              }
            }
            uint64_t v68 = *(unint64_t **)(v53 + 8);
            unint64_t v69 = *(void *)v53 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v68 = v69 | *v68 & 7;
            *(void *)(v69 + 8) = v68;
            *(void *)v53 &= 7uLL;
            *(void *)(v53 + 8) = 0;
            uint64_t v70 = *v8;
            *(void *)(v53 + 24) = *v8;
            uint64_t v71 = *(void *)(v70 + 32);
            uint64_t v72 = *(unsigned int *)(v53 + 40);
            if (v72)
            {
              uint64_t v75 = *(void *)(v53 + 32);
              uint64_t v76 = *(void *)(v71 + 40);
              uint64_t v77 = 32 * v72;
              do
              {
                if (!*(unsigned char *)v75)
                {
                  uint64_t v78 = *(unsigned int *)(v75 + 4);
                  if ((int)v78 >= 0) {
                    int v79 = (uint64_t *)(*(void *)(v76 + 272) + 8 * v78);
                  }
                  else {
                    int v79 = (uint64_t *)(*(void *)(v76 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v80 = *v79;
                  if (*v79)
                  {
                    uint64_t v81 = *(void *)(v80 + 16);
                    *(void *)(v80 + 16) = v75;
                    *(void *)(v75 + 16) = v81;
                    if (*(unsigned char *)(v75 + 3))
                    {
                      *(void *)(v75 + 24) = v80;
                    }
                    else
                    {
                      *(void *)(v75 + 24) = 0;
                      int v79 = (uint64_t *)(v81 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v75 + 16) = v75;
                    *(void *)(v75 + 24) = 0;
                  }
                  *int v79 = v75;
                }
                v75 += 32;
                v77 -= 32;
              }
              while (v77);
            }
            uint64_t v73 = *(void *)(v71 + 728);
            if (v73) {
              (*(void (**)(uint64_t, unint64_t))(*(void *)v73 + 24))(v73, v53);
            }
            unint64_t v74 = *v7 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v53 = v74 | *(void *)v53 & 7;
            *(void *)(v53 + 8) = v7;
            *(void *)(v74 + 8) = v53;
            *uint64_t v7 = *v7 & 7 | v53;
            char v4 = 1;
          }
          unint64_t v53 = v55;
        }
        while ((void *)v55 != v5);
      }
      goto LABEL_178;
    }
    uint64_t v6 = v3[7];
LABEL_161:
    v91[0] = v92;
    v91[1] = (void *)0x400000000;
    if ((void *)v6 != v5)
    {
      unsigned int v82 = 0;
      do
      {
        if (**(_WORD **)(v6 + 16) == 23)
        {
          if (v82 >= HIDWORD(v91[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v91[0] + v82) = v6;
          unsigned int v82 = ++LODWORD(v91[1]);
        }
        if ((*(unsigned char *)v6 & 4) == 0)
        {
          while ((*(_WORD *)(v6 + 44) & 8) != 0)
            uint64_t v6 = *(void *)(v6 + 8);
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while ((void *)v6 != v5);
      uint64_t v83 = (llvm::MachineInstr **)v91[0];
      if (v82)
      {
        uint64_t v84 = 8 * v82;
        do
        {
          uint64_t v85 = *v83++;
          llvm::MachineInstr::eraseFromParent(v85);
          v84 -= 8;
        }
        while (v84);
        unsigned int v82 = v91[1];
        uint64_t v83 = (llvm::MachineInstr **)v91[0];
      }
      v4 |= v82 != 0;
      if (v83 != v92) {
        free(v83);
      }
    }
LABEL_178:
    uint64_t v3 = (void *)v3[1];
  }
  while (v3 != v88);
  return v4 & 1;
}

uint64_t llvm::PseudoSourceValue::PseudoSourceValue(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 632))(a3);
  return a1;
}

{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 632))(a3);
  return a1;
}

BOOL llvm::PseudoSourceValue::isConstant(llvm::PseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return *((_DWORD *)this + 2) != 0;
}

uint64_t llvm::PseudoSourceValue::isAliased(llvm::PseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

BOOL llvm::PseudoSourceValue::mayAlias(llvm::PseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return (*((_DWORD *)this + 2) - 4) < 0xFFFFFFFD;
}

BOOL llvm::FixedStackPseudoSourceValue::isConstant(llvm::FixedStackPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return a2
      && !*((unsigned char *)a2 + 654)
      && *(unsigned char *)(*((void *)a2 + 1) + 40 * (*((_DWORD *)a2 + 8) + *((_DWORD *)this + 4)) + 17) != 0;
}

uint64_t llvm::CallEntryPseudoSourceValue::CallEntryPseudoSourceValue(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 632))(a3);
  *(void *)a1 = &unk_1F2611288;
  return a1;
}

{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 632))(a3);
  *(void *)a1 = &unk_1F2611288;
  return a1;
}

uint64_t llvm::CallEntryPseudoSourceValue::isConstant(llvm::CallEntryPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

uint64_t llvm::CallEntryPseudoSourceValue::isAliased(llvm::CallEntryPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

uint64_t llvm::CallEntryPseudoSourceValue::mayAlias(llvm::CallEntryPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

uint64_t llvm::GlobalValuePseudoSourceValue::GlobalValuePseudoSourceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = 5;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 632))(a3, 5);
  *(void *)a1 = &unk_1F26112C8;
  *(void *)(a1 + 16) = a2;
  return a1;
}

{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = 5;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 632))(a3, 5);
  *(void *)a1 = &unk_1F26112C8;
  *(void *)(a1 + 16) = a2;
  return a1;
}

uint64_t llvm::ExternalSymbolPseudoSourceValue::ExternalSymbolPseudoSourceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = 6;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 632))(a3, 6);
  *(void *)a1 = &unk_1F2611308;
  *(void *)(a1 + 16) = a2;
  return a1;
}

{
  *(void *)a1 = &unk_1F2611248;
  *(_DWORD *)(a1 + 8) = 6;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 632))(a3, 6);
  *(void *)a1 = &unk_1F2611308;
  *(void *)(a1 + 16) = a2;
  return a1;
}

llvm::PseudoSourceValueManager *llvm::PseudoSourceValueManager::PseudoSourceValueManager(llvm::PseudoSourceValueManager *this, const llvm::TargetInstrInfo *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = &unk_1F2611248;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 5) = (*(uint64_t (**)(const llvm::TargetInstrInfo *, void))(*(void *)a2 + 632))(a2, 0);
  uint64_t v3 = *(void *)this;
  *((void *)this + 3) = &unk_1F2611248;
  *((_DWORD *)this + 8) = 1;
  *((_DWORD *)this + 9) = (*(uint64_t (**)(void))(*(void *)v3 + 632))();
  uint64_t v4 = *(void *)this;
  *((void *)this + 5) = &unk_1F2611248;
  *((_DWORD *)this + 12) = 2;
  *((_DWORD *)this + 13) = (*(uint64_t (**)(void))(*(void *)v4 + 632))();
  uint64_t v5 = *(void *)this;
  *((void *)this + 7) = &unk_1F2611248;
  *((_DWORD *)this + 16) = 3;
  *((_DWORD *)this + 17) = (*(uint64_t (**)(void))(*(void *)v5 + 632))();
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0x1000000000;
  *((_DWORD *)this + 36) = 128;
  *((void *)this + 16) = operator new(0x1800uLL, (std::align_val_t)8uLL);
  sub_1CC34C188((void *)this + 16);
  *((unsigned char *)this + 152) = 0;
  *((unsigned char *)this + 176) = 0;
  return this;
}

uint64_t llvm::PseudoSourceValueManager::getStack(llvm::PseudoSourceValueManager *this)
{
  return (uint64_t)this + 8;
}

uint64_t llvm::PseudoSourceValueManager::getGOT(llvm::PseudoSourceValueManager *this)
{
  return (uint64_t)this + 24;
}

uint64_t *llvm::PseudoSourceValueManager::getFixedStack(uint64_t **this, int a2)
{
  int v4 = a2;
  uint64_t v5 = &v4;
  uint64_t v2 = sub_1CC3F1D04(this + 9, &v4, (uint64_t)&std::piecewise_construct, &v5)[5];
  if (!v2) {
    operator new();
  }
  return v2;
}

uint64_t llvm::PseudoSourceValueManager::getGlobalValueCallEntry(llvm::PseudoSourceValueManager *this, const llvm::GlobalValue *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 128);
  uint64_t v38 = 2;
  uint64_t v39 = 0;
  uint64_t v40 = a2;
  if (a2 != (const llvm::GlobalValue *)-8192 && a2 != (const llvm::GlobalValue *)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v38);
  }
  uint64_t v37 = &unk_1F260E0B0;
  unint64_t v41 = v2;
  uint64_t v42 = 0;
  char v3 = sub_1CD5323B4(v2, (uint64_t)&v37, &v42);
  uint64_t v4 = v42;
  if ((v3 & 1) == 0)
  {
    unsigned int v17 = (void *)sub_1CD532764((uint64_t)v2, (uint64_t)&v37, (uint64_t)&v37, v42);
    uint64_t v4 = (uint64_t)v17;
    uint64_t v18 = (const llvm::GlobalValue *)v17[3];
    uint64_t v19 = v40;
    if (v18 != v40)
    {
      BOOL v20 = v18 == (const llvm::GlobalValue *)-4096 || v18 == 0;
      if (!v20 && v18 != (const llvm::GlobalValue *)-8192)
      {
        unint64_t v25 = v17[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v25 = v17[2];
        uint64_t v26 = (unint64_t *)v17[2];
        if (v26)
        {
          *uint64_t v26 = *v26 & 7 | v25;
        }
        else
        {
          uint64_t v27 = v17[3];
          unint64_t v28 = ***(int32x2_t ****)v27;
          unint64_t v29 = (unint64_t)v28[303];
          if (v29 <= v25)
          {
            uint64_t v30 = v28[305].u32[0];
            if (v29 + 16 * v30 > v25)
            {
              unsigned int v31 = v30 - 1;
              LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
              size_t v33 = (uint64_t *)(v29 + 16 * v32);
              uint64_t v34 = *v33;
              if (v27 == *v33)
              {
LABEL_46:
                *size_t v33 = -8192;
                v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v27 = v17[3];
              }
              else
              {
                int v35 = 1;
                while (v34 != -4096)
                {
                  int v36 = v32 + v35++;
                  uint64_t v32 = v36 & v31;
                  uint64_t v34 = *(void *)(v29 + 16 * v32);
                  if (v27 == v34)
                  {
                    size_t v33 = (uint64_t *)(v29 + 16 * v32);
                    goto LABEL_46;
                  }
                }
              }
              *(unsigned char *)(v27 + 17) &= ~1u;
            }
          }
        }
        uint64_t v19 = v40;
      }
      v17[3] = v19;
      if (v19 != (const llvm::GlobalValue *)-4096 && v19 != (const llvm::GlobalValue *)-8192 && v19 != 0)
      {
        uint64_t v22 = v38;
        uint64_t v23 = (void *)(v38 & 0xFFFFFFFFFFFFFFF8);
        void v17[2] = *(void *)(v38 & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v23 = v17 + 1;
        v17[1] = v22 & 0xFFFFFFFFFFFFFFF8 | v17[1] & 7;
        int v24 = (unint64_t *)v17[2];
        if (v24) {
          *int v24 = *v24 & 7 | (unint64_t)(v17 + 2);
        }
      }
    }
    v17[4] = v41;
    v17[5] = 0;
  }
  if (v40 != (const llvm::GlobalValue *)-8192 && v40 != (const llvm::GlobalValue *)-4096 && v40)
  {
    unint64_t v5 = v38 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v38 & 0xFFFFFFFFFFFFFFF8) = v39;
    if (v39)
    {
      unint64_t *v39 = *v39 & 7 | v5;
    }
    else
    {
      uint64_t v6 = v40;
      uint64_t v7 = ***(int32x2_t ****)v40;
      unint64_t v8 = (unint64_t)v7[303];
      if (v8 <= v5)
      {
        uint64_t v9 = v7[305].u32[0];
        if (v8 + 16 * v9 > v5)
        {
          unsigned int v10 = v9 - 1;
          LODWORD(v11) = v10 & ((v40 >> 4) ^ (v40 >> 9));
          uint64_t v12 = (const llvm::GlobalValue **)(v8 + 16 * v11);
          unint64_t v13 = *v12;
          if (v40 == *v12)
          {
LABEL_17:
            void *v12 = (const llvm::GlobalValue *)-8192;
            v7[304] = vadd_s32(v7[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v6 = v40;
          }
          else
          {
            int v14 = 1;
            while (v13 != (const llvm::GlobalValue *)-4096)
            {
              int v15 = v11 + v14++;
              uint64_t v11 = v15 & v10;
              unint64_t v13 = *(const llvm::GlobalValue **)(v8 + 16 * v11);
              if (v40 == v13)
              {
                uint64_t v12 = (const llvm::GlobalValue **)(v8 + 16 * v11);
                goto LABEL_17;
              }
            }
          }
          *((unsigned char *)v6 + 17) &= ~1u;
        }
      }
    }
  }
  if (!*(void *)(v4 + 40)) {
    operator new();
  }
  return *(void *)(v4 + 40);
}

uint64_t llvm::PseudoSourceValueManager::getExternalSymbolCallEntry(llvm::PseudoSourceValueManager *this, const char *__s)
{
  uint64_t v2 = __s;
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }
  unsigned int v5 = *((_DWORD *)this + 26);
  if (!v5)
  {
    *((_DWORD *)this + 27) = 0;
    *((_DWORD *)this + 28) = 0;
    unint64_t v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *((void *)this + 12) = v25;
    unsigned int v5 = 16;
    *((_DWORD *)this + 26) = 16;
  }
  __s1 = v2;
  int v6 = 0;
  if (v4)
  {
    size_t v7 = v4;
    do
    {
      int v8 = *(unsigned __int8 *)v2++;
      int v6 = 33 * v6 + v8;
      --v7;
    }
    while (v7);
  }
  uint64_t v9 = *((void *)this + 12);
  unsigned int v10 = v5 - 1;
  uint64_t v11 = v9 + 8 * v5 + 8;
  int v12 = -1;
  int v13 = 1;
  int v14 = v6;
  while (1)
  {
    uint64_t v15 = v14 & v10;
    int v16 = *(void **)(v9 + 8 * v15);
    if (!v16) {
      break;
    }
    if (v16 == (void *)-8)
    {
      if (v12 == -1) {
        int v12 = v14 & v10;
      }
    }
    else if (*(_DWORD *)(v11 + 4 * v15) == v6 {
           && v4 == *v16
    }
           && (!v4 || !memcmp(__s1, (char *)v16 + *((unsigned int *)this + 29), v4)))
    {
      goto LABEL_23;
    }
    int v14 = v13 + v15;
    ++v13;
  }
  uint64_t v17 = v12;
  if (v12 == -1)
  {
    uint64_t v17 = v15;
    uint64_t v15 = v15;
  }
  else
  {
    uint64_t v15 = v12;
  }
  *(_DWORD *)(v11 + 4 * v17) = v6;
  int v16 = *(void **)(v9 + 8 * v15);
LABEL_23:
  if (v16 == (void *)-8)
  {
    --*((_DWORD *)this + 28);
    uint64_t v18 = __s1;
  }
  else
  {
    uint64_t v18 = __s1;
    if (v16) {
      goto LABEL_36;
    }
  }
  uint64_t v19 = operator new(v4 + 17, (std::align_val_t)8uLL);
  BOOL v20 = v19;
  uint64_t v21 = (char *)(v19 + 2);
  if (v4) {
    memcpy(v19 + 2, v18, v4);
  }
  v21[v4] = 0;
  *BOOL v20 = v4;
  v20[1] = 0;
  *(void *)(v9 + 8 * v15) = v20;
  ++*((_DWORD *)this + 27);
  for (uint64_t i = (void **)(*((void *)this + 12)
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::PseudoSourceValueManager *)((char *)this + 96), v15)); ; ++i)
  {
    int v16 = *i;
    if (*i && v16 + 1 != 0) {
      break;
    }
  }
LABEL_36:
  if (!v16[1]) {
    operator new();
  }
  return v16[1];
}

void sub_1CC3F1CA8()
{
}

void sub_1CC3F1CC0()
{
}

void sub_1CC3F1CD8()
{
}

void sub_1CC3F1CF0()
{
}

uint64_t **sub_1CC3F1D04(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  size_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    do
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        size_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        return v9;
      }
      int v6 = v9[1];
    }
    while (v6);
    size_t v7 = v9 + 1;
  }
  else
  {
    uint64_t v9 = a1 + 1;
  }
LABEL_10:
  int v12 = (uint64_t *)v9;
  uint64_t v9 = (uint64_t **)operator new(0x30uLL);
  *((_DWORD *)v9 + 8) = **a4;
  v9[5] = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = v12;
  *size_t v7 = (uint64_t *)v9;
  int v13 = (uint64_t *)**a1;
  int v14 = (uint64_t *)v9;
  if (v13)
  {
    *a1 = v13;
    int v14 = *v7;
  }
  sub_1CB8358B8(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*a2 != -1)
  {
    size_t v4 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v4 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 58);
    }
    else
    {
      *((void *)this + 4) = v4 + 1;
      *size_t v4 = 58;
    }
    uint64_t v5 = *a2;
    uint64_t v9 = v8;
    v8[0] = &unk_1F260C990;
    v8[1] = v5;
    v7[0] = &unk_1F25FF808;
    v7[1] = "%016llX";
    uint64_t v7[2] = v5;
    llvm::raw_ostream::operator<<(this, (uint64_t)v7);
    if (v9 == v8)
    {
      (*(void (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      (*(void (**)(void))(*v9 + 40))();
    }
  }
  return this;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, unsigned int **a2)
{
  unsigned int v4 = **a2;
  if (v4 && (uint64_t v5 = *((void *)a2[1] + 2), v4 < *(_DWORD *)(v5 + 16)))
  {
    uint64_t v6 = *(void *)(v5 + 72);
    if (v6)
    {
      size_t v7 = (const char *)(v6 + *(unsigned int *)(*(void *)(v5 + 8) + 24 * v4));
      size_t v8 = strlen(v7);
      uint64_t v9 = (void *)*((void *)this + 4);
      if (v8 <= *((void *)this + 3) - (void)v9)
      {
        if (v8)
        {
          memcpy(v9, v7, v8);
          *((void *)this + 4) += v8;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v7, v8);
      }
    }
  }
  else
  {
    uint64_t v10 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v10 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 35);
    }
    else
    {
      *((void *)this + 4) = v10 + 1;
      unsigned char *v10 = 35;
    }
    sub_1CD098D14(this, **a2, 0, 0, 0);
  }
  uint64_t v12 = *((void *)*a2 + 1);
  return llvm::rdf::operator<<(this, &v12);
}

llvm::raw_ostream *llvm::rdf::operator<<(char **this, unsigned int **a2)
{
  char v3 = (llvm::raw_ostream *)this;
  __int16 v4 = *(_WORD *)(*(void *)(*((void *)a2[1] + 37) + 8 * ((**a2 - 1) >> a2[1][69])) + 32 * (a2[1][70] & (**a2 - 1)));
  int v5 = v4 & 0x1C;
  if ((v4 & 3) != 2)
  {
    if ((v4 & 3) == 1)
    {
      switch((v5 - 12) >> 2)
      {
        case 0u:
          uint64_t v6 = this[4];
          if (v6 < this[3])
          {
            this[4] = v6 + 1;
            char v7 = 112;
            goto LABEL_47;
          }
          char v9 = 112;
          goto LABEL_53;
        case 1u:
          uint64_t v6 = this[4];
          if (v6 < this[3])
          {
            this[4] = v6 + 1;
            char v7 = 115;
            goto LABEL_47;
          }
          char v9 = 115;
          goto LABEL_53;
        case 2u:
          goto LABEL_33;
        case 3u:
          uint64_t v6 = this[4];
          if (v6 < this[3])
          {
            this[4] = v6 + 1;
            char v7 = 102;
            goto LABEL_47;
          }
          char v9 = 102;
          goto LABEL_53;
        default:
          int v13 = (__int16 *)this[4];
          if ((unint64_t)(this[3] - (char *)v13) <= 1)
          {
            int v14 = "c?";
            goto LABEL_42;
          }
          __int16 v17 = 16227;
          break;
      }
      goto LABEL_61;
    }
    uint64_t v6 = this[4];
    if (v6 < this[3])
    {
      this[4] = v6 + 1;
      char v7 = 63;
LABEL_47:
      *uint64_t v6 = v7;
      goto LABEL_54;
    }
    char v9 = 63;
    goto LABEL_53;
  }
  if ((*(_WORD *)(*(void *)(*((void *)a2[1] + 37) + 8 * ((**a2 - 1) >> a2[1][69])) + 32
                                                                                          * (a2[1][70] & (**a2 - 1))) & 0x400) != 0)
  {
    size_t v8 = this[4];
    if (v8 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, 47);
    }
    else
    {
      this[4] = v8 + 1;
      *size_t v8 = 47;
    }
  }
  if ((v4 & 0xFE0u) >= 0x800)
  {
    uint64_t v10 = (unsigned char *)*((void *)v3 + 4);
    if ((unint64_t)v10 >= *((void *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 92);
      if ((v4 & 0x100) != 0) {
        goto LABEL_21;
      }
    }
    else
    {
      *((void *)v3 + 4) = v10 + 1;
      unsigned char *v10 = 92;
      if ((v4 & 0x100) != 0) {
        goto LABEL_21;
      }
    }
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if ((v4 & 0x100) == 0) {
    goto LABEL_15;
  }
LABEL_21:
  uint64_t v11 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v11 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 43);
    if ((v4 & 0x40) == 0) {
      goto LABEL_28;
    }
  }
  else
  {
    *((void *)v3 + 4) = v11 + 1;
    *uint64_t v11 = 43;
    if ((v4 & 0x40) == 0) {
      goto LABEL_28;
    }
  }
LABEL_25:
  uint64_t v12 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v12 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 126);
  }
  else
  {
    *((void *)v3 + 4) = v12 + 1;
    unsigned char *v12 = 126;
  }
LABEL_28:
  switch(v5)
  {
    case 4:
      uint64_t v6 = (char *)*((void *)v3 + 4);
      if ((unint64_t)v6 < *((void *)v3 + 3))
      {
        *((void *)v3 + 4) = v6 + 1;
        char v7 = 100;
        goto LABEL_47;
      }
      this = (char **)v3;
      char v9 = 100;
      goto LABEL_53;
    case 20:
LABEL_33:
      uint64_t v6 = (char *)*((void *)v3 + 4);
      if ((unint64_t)v6 < *((void *)v3 + 3))
      {
        *((void *)v3 + 4) = v6 + 1;
        char v7 = 98;
        goto LABEL_47;
      }
      this = (char **)v3;
      char v9 = 98;
      goto LABEL_53;
    case 8:
      uint64_t v6 = (char *)*((void *)v3 + 4);
      if ((unint64_t)v6 < *((void *)v3 + 3))
      {
        *((void *)v3 + 4) = v6 + 1;
        char v7 = 117;
        goto LABEL_47;
      }
      this = (char **)v3;
      char v9 = 117;
LABEL_53:
      llvm::raw_ostream::write((llvm::raw_ostream *)this, v9);
      goto LABEL_54;
  }
  int v13 = (__int16 *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v13 > 1uLL)
  {
    __int16 v17 = 16242;
LABEL_61:
    *int v13 = v17;
    *((void *)v3 + 4) += 2;
    goto LABEL_54;
  }
  int v14 = "r?";
LABEL_42:
  llvm::raw_ostream::write(v3, v14, 2uLL);
LABEL_54:
  sub_1CD098D14(v3, **a2, 0, 0, 0);
  if ((v4 & 0x20) != 0)
  {
    uint64_t v15 = (unsigned char *)*((void *)v3 + 4);
    if ((unint64_t)v15 >= *((void *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 34);
    }
    else
    {
      *((void *)v3 + 4) = v15 + 1;
      *uint64_t v15 = 34;
    }
  }
  return v3;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  sub_1CC3F2594((uint64_t)a1, **(llvm::rdf::RefNode ***)a2, *(unsigned int *)(*(void *)a2 + 8), *(unsigned int **)(a2 + 8));
  __int16 v4 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v4 >= *((void *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 40);
  }
  else
  {
    *((void *)a1 + 4) = v4 + 1;
    *__int16 v4 = 40;
  }
  int v15 = *(_DWORD *)(**(void **)a2 + 8);
  if (v15)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v13 = (unsigned int *)&v15;
    uint64_t v14 = v5;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  uint64_t v6 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v6 >= *((void *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 44);
  }
  else
  {
    *((void *)a1 + 4) = v6 + 1;
    *uint64_t v6 = 44;
  }
  int v15 = *(_DWORD *)(**(void **)a2 + 16);
  if (v15)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    int v13 = (unsigned int *)&v15;
    uint64_t v14 = v7;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  size_t v8 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v8 >= *((void *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 44);
  }
  else
  {
    *((void *)a1 + 4) = v8 + 1;
    *size_t v8 = 44;
  }
  int v15 = *(_DWORD *)(**(void **)a2 + 20);
  if (v15)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    int v13 = (unsigned int *)&v15;
    uint64_t v14 = v9;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  uint64_t v10 = (_WORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v10 > 1uLL)
  {
    _WORD *v10 = 14889;
    *((void *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "):", 2uLL);
  }
  int v15 = *(_DWORD *)(**(void **)a2 + 12);
  if (v15)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    int v13 = (unsigned int *)&v15;
    uint64_t v14 = v11;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  return a1;
}

{
  unsigned char *v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  unsigned int *v9;
  uint64_t v10;
  int v11;

  sub_1CC3F2594((uint64_t)a1, **(llvm::rdf::RefNode ***)a2, *(unsigned int *)(*(void *)a2 + 8), *(unsigned int **)(a2 + 8));
  __int16 v4 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v4 >= *((void *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 40);
  }
  else
  {
    *((void *)a1 + 4) = v4 + 1;
    *__int16 v4 = 40;
  }
  uint64_t v11 = *(_DWORD *)(**(void **)a2 + 8);
  if (v11)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v9 = (unsigned int *)&v11;
    uint64_t v10 = v5;
    llvm::rdf::operator<<((char **)a1, &v9);
  }
  uint64_t v6 = (_WORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v6 > 1uLL)
  {
    *uint64_t v6 = 14889;
    *((void *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "):", 2uLL);
  }
  uint64_t v11 = *(_DWORD *)(**(void **)a2 + 12);
  if (v11)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v9 = (unsigned int *)&v11;
    uint64_t v10 = v7;
    llvm::rdf::operator<<((char **)a1, &v9);
  }
  return a1;
}

{
  unsigned char *v4;
  uint64_t v5;
  unsigned char *v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  int v13;

  sub_1CC3F2594((uint64_t)a1, **(llvm::rdf::RefNode ***)a2, *(unsigned int *)(*(void *)a2 + 8), *(unsigned int **)(a2 + 8));
  __int16 v4 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v4 >= *((void *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 40);
  }
  else
  {
    *((void *)a1 + 4) = v4 + 1;
    *__int16 v4 = 40;
  }
  int v13 = *(_DWORD *)(**(void **)a2 + 8);
  if (v13)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v11 = (unsigned int *)&v13;
    uint64_t v12 = v5;
    llvm::rdf::operator<<((char **)a1, &v11);
  }
  uint64_t v6 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v6 >= *((void *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 44);
  }
  else
  {
    *((void *)a1 + 4) = v6 + 1;
    *uint64_t v6 = 44;
  }
  int v13 = *(_DWORD *)(**(void **)a2 + 16);
  if (v13)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v11 = (unsigned int *)&v13;
    uint64_t v12 = v7;
    llvm::rdf::operator<<((char **)a1, &v11);
  }
  size_t v8 = (_WORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v8 > 1uLL)
  {
    *size_t v8 = 14889;
    *((void *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "):", 2uLL);
  }
  int v13 = *(_DWORD *)(**(void **)a2 + 12);
  if (v13)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v11 = (unsigned int *)&v13;
    uint64_t v12 = v9;
    llvm::rdf::operator<<((char **)a1, &v11);
  }
  return a1;
}

llvm::raw_ostream *sub_1CC3F2594(uint64_t a1, llvm::rdf::RefNode *a2, uint64_t a3, unsigned int *a4)
{
  int v15 = a2;
  uint64_t v16 = a3;
  v14[0] = (unsigned int *)&v16;
  v14[1] = a4;
  uint64_t v6 = llvm::rdf::operator<<((char **)a1, v14);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 60);
  }
  else
  {
    *(void *)(a1 + 32) = v7 + 1;
    *uint64_t v7 = 60;
  }
  v12[0] = llvm::rdf::RefNode::getRegRef(v15, (const llvm::rdf::DataFlowGraph *)a4);
  v12[1] = v8;
  v13[0] = (unsigned int *)v12;
  v13[1] = a4;
  double result = llvm::rdf::operator<<((llvm::raw_ostream *)a1, v13);
  uint64_t v10 = *(unsigned char **)(a1 + 32);
  if ((unint64_t)v10 >= *(void *)(a1 + 24))
  {
    double result = llvm::raw_ostream::write((llvm::raw_ostream *)a1, 62);
  }
  else
  {
    *(void *)(a1 + 32) = v10 + 1;
    unsigned char *v10 = 62;
  }
  if ((*(_WORD *)v15 & 0x200) != 0)
  {
    uint64_t v11 = *(unsigned char **)(a1 + 32);
    if ((unint64_t)v11 >= *(void *)(a1 + 24))
    {
      return llvm::raw_ostream::write((llvm::raw_ostream *)a1, 33);
    }
    else
    {
      *(void *)(a1 + 32) = v11 + 1;
      *uint64_t v11 = 33;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *result, __int16 ***a2)
{
  uint64_t v2 = *a2;
  __int16 v3 = ***a2;
  if ((v3 & 0x1C) == 8)
  {
    uint64_t v6 = **a2;
    int v7 = *((_DWORD *)v2 + 2);
    uint64_t v5 = a2[1];
    uint64_t v8 = (uint64_t *)&v6;
    uint64_t v9 = v5;
    if ((v3 & 0x80) != 0) {
      return llvm::rdf::operator<<(result, (uint64_t)&v8);
    }
    else {
      return llvm::rdf::operator<<(result, (uint64_t)&v8);
    }
  }
  else if ((v3 & 0x1C) == 4)
  {
    uint64_t v6 = **a2;
    int v7 = *((_DWORD *)v2 + 2);
    __int16 v4 = a2[1];
    uint64_t v8 = (uint64_t *)&v6;
    uint64_t v9 = v4;
    return llvm::rdf::operator<<(result, (uint64_t)&v8);
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)a2 + 8);
  if (v2)
  {
    __int16 v4 = **(long long ***)a2;
    int v5 = v2 - 1;
    uint64_t v6 = 16 * v2;
    do
    {
      long long v10 = *v4;
      int v7 = *(unsigned int **)(a2 + 8);
      v9[0] = (unsigned int *)&v10 + 2;
      v9[1] = v7;
      double result = llvm::rdf::operator<<((char **)result, v9);
      if (v5)
      {
        uint64_t v8 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v8 >= *((void *)result + 3))
        {
          double result = llvm::raw_ostream::write(result, 32);
        }
        else
        {
          *((void *)result + 4) = v8 + 1;
          *uint64_t v8 = 32;
        }
      }
      ++v4;
      --v5;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  int v5;
  unsigned int *v6;
  unsigned char *v7;
  void *v8;
  void *v9;
  BOOL v10;
  unsigned int *v11[2];
  int v12;

  uint64_t v2 = *(void *)a2 + 8;
  __int16 v3 = **(void ***)a2;
  if (v3 != (void *)v2)
  {
    int v5 = *(_DWORD *)(*(void *)a2 + 16);
    do
    {
      uint64_t v12 = *((_DWORD *)v3 + 7);
      uint64_t v6 = *(unsigned int **)(a2 + 8);
      v11[0] = (unsigned int *)&v12;
      v11[1] = v6;
      double result = llvm::rdf::operator<<((char **)result, v11);
      if (--v5)
      {
        int v7 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v7 >= *((void *)result + 3))
        {
          double result = llvm::raw_ostream::write(result, 32);
        }
        else
        {
          *((void *)result + 4) = v7 + 1;
          *int v7 = 32;
        }
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v3[2];
          long long v10 = *v9 == (void)v3;
          __int16 v3 = v9;
        }
        while (!v10);
      }
      __int16 v3 = v9;
    }
    while (v9 != (void *)v2);
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  void *v5;
  unsigned char *v6;
  unsigned int *v7;
  void *v8;
  void *v9;
  BOOL v10;
  _WORD *v11;
  unsigned int *v12[2];
  long long v13;

  __int16 v3 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v3 >= *((void *)result + 3))
  {
    double result = llvm::raw_ostream::write(result, 123);
  }
  else
  {
    *((void *)result + 4) = v3 + 1;
    *__int16 v3 = 123;
  }
  __int16 v4 = *(void *)a2 + 8;
  int v5 = **(void ***)a2;
  if (v5 != (void *)v4)
  {
    do
    {
      int v13 = *((_OWORD *)v5 + 2);
      uint64_t v6 = (unsigned char *)*((void *)result + 4);
      if ((unint64_t)v6 >= *((void *)result + 3))
      {
        double result = llvm::raw_ostream::write(result, 32);
      }
      else
      {
        *((void *)result + 4) = v6 + 1;
        *uint64_t v6 = 32;
      }
      int v7 = *(unsigned int **)(a2 + 8);
      v12[0] = (unsigned int *)&v13;
      v12[1] = v7;
      double result = llvm::rdf::operator<<(result, v12);
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          long long v10 = *v9 == (void)v5;
          int v5 = v9;
        }
        while (!v10);
      }
      int v5 = v9;
    }
    while (v9 != (void *)v4);
  }
  uint64_t v11 = (_WORD *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v11 <= 1uLL) {
    return llvm::raw_ostream::write(result, " }", 2uLL);
  }
  *uint64_t v11 = 32032;
  *((void *)result + 4) += 2;
  return result;
}

uint64_t llvm::rdf::operator<<(uint64_t a1, uint64_t **a2)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  __int16 v4 = (unsigned int *)a2[1];
  v11[0] = (unsigned int *)(*a2 + 1);
  v11[1] = v4;
  int v5 = llvm::rdf::operator<<((char **)a1, v11);
  uint64_t v6 = (_DWORD *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 6uLL)
  {
    *(_DWORD *)((char *)v6 + 3) = 1528850792;
    *uint64_t v6 = 1752178746;
    *(void *)(a1 + 32) += 7;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, ": phi [", 7uLL);
  }
  llvm::rdf::CodeNode::members(**a2, (const llvm::rdf::DataFlowGraph *)a2[1], (uint64_t)v12);
  int v7 = (uint64_t **)a2[1];
  v10[0] = (uint64_t **)v12;
  v10[1] = v7;
  sub_1CC3F2C3C((llvm::raw_ostream *)a1, v10);
  uint64_t v8 = *(unsigned char **)(a1 + 32);
  if ((unint64_t)v8 >= *(void *)(a1 + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 93);
  }
  else
  {
    *(void *)(a1 + 32) = v8 + 1;
    *uint64_t v8 = 93;
  }
  if (v12[0] != v13) {
    free(v12[0]);
  }
  return a1;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unsigned char *v25;
  int v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char **v33;
  const char *v34;
  int v35;
  int v36;
  const char *v37;
  size_t v38;
  void *v39;
  llvm::raw_ostream *v40;
  const char *v41;
  size_t v42;
  const char *v43;
  size_t v44;
  size_t v45;
  void *v46;
  _WORD *v47;
  uint64_t **v48;
  unsigned char *v49;
  size_t v51;
  uint64_t **v52[2];
  void *v53;
  const char *v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;

  uint64_t v57 = *MEMORY[0x1E4F143B8];
  __int16 v4 = a2[1];
  int v5 = *(void *)(**a2 + 8);
  uint64_t v6 = **(unsigned __int16 **)(v5 + 16);
  unint64_t v53 = *a2 + 1;
  uint64_t v54 = (const char *)v4;
  int v7 = llvm::rdf::operator<<((char **)a1, (unsigned int **)&v53);
  uint64_t v8 = (_WORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 1uLL)
  {
    *uint64_t v8 = 8250;
    *(void *)(a1 + 32) += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, ": ", 2uLL);
  }
  uint64_t v9 = a2[1][1];
  long long v10 = *(void *)(v9 + 24);
  if (v10)
  {
    uint64_t v11 = (const char *)(v10 + *(unsigned int *)(*(void *)(v9 + 16) + 4 * v6));
    uint64_t v12 = strlen(v11);
    int v13 = *(void **)(a1 + 32);
    if (v12 <= *(void *)(a1 + 24) - (void)v13)
    {
      if (v12)
      {
        memcpy(v13, v11, v12);
        *(void *)(a1 + 32) += v12;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, v11, v12);
    }
  }
  uint64_t v14 = *(void *)(*(void *)(v5 + 16) + 8);
  if ((*(_WORD *)(v5 + 44) & 0xC) == 0 || (*(_WORD *)(v5 + 44) & 4) != 0)
  {
    if ((v14 & 0x480) == 0) {
      goto LABEL_57;
    }
LABEL_13:
    uint64_t v16 = *(unsigned int *)(v5 + 40);
    if (!v16) {
      goto LABEL_57;
    }
    __int16 v17 = *(void *)(v5 + 32) + 16;
    uint64_t v18 = 32 * v16;
    while (1)
    {
      uint64_t v19 = *(unsigned __int8 *)(v17 - 16);
      BOOL v20 = v19 > 0xA;
      uint64_t v21 = (1 << v19) & 0x610;
      if (!v20 && v21 != 0) {
        break;
      }
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_57;
      }
    }
    unint64_t v25 = *(unsigned char **)(a1 + 32);
    if ((unint64_t)v25 >= *(void *)(a1 + 24))
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, 32);
    }
    else
    {
      *(void *)(a1 + 32) = v25 + 1;
      *unint64_t v25 = 32;
    }
    uint64_t v26 = *(unsigned __int8 *)(v17 - 16);
    if (v26 != 10)
    {
      if (v26 != 9)
      {
        if (v26 == 4)
        {
          uint64_t v27 = *(const char **)v17;
          uint64_t v56 = &v53;
          unint64_t v53 = &unk_1F260D508;
          uint64_t v54 = v27;
          off_1F260D538((uint64_t)&v53, (llvm::raw_ostream *)a1);
          if (v56 == &v53)
          {
            (*((void (**)(void **))v53 + 4))(&v53);
          }
          else if (v56)
          {
            (*((void (**)(void))*v56 + 5))();
          }
        }
        goto LABEL_57;
      }
      uint64_t v37 = *(const char **)v17;
      if (!v37) {
        goto LABEL_57;
      }
      uint64_t v38 = strlen(v37);
      uint64_t v39 = *(void **)(a1 + 32);
      if (v38 > *(void *)(a1 + 24) - (void)v39)
      {
        uint64_t v40 = (llvm::raw_ostream *)a1;
        unint64_t v41 = v37;
        uint64_t v42 = v38;
LABEL_56:
        llvm::raw_ostream::write(v40, v41, v42);
        goto LABEL_57;
      }
      if (!v38) {
        goto LABEL_57;
      }
      memcpy(v39, v37, v38);
      uint64_t v51 = *(void *)(a1 + 32) + v38;
      goto LABEL_68;
    }
    unint64_t v28 = *(const char **)v17;
    if ((*(unsigned char *)(*(void *)v17 + 23) & 0x10) == 0) {
      goto LABEL_57;
    }
    unint64_t v29 = ***(void ***)v28;
    uint64_t v30 = *(void *)(v29 + 152);
    unsigned int v31 = *(unsigned int *)(v29 + 168);
    if (v31)
    {
      LODWORD(v32) = (v31 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      size_t v33 = (const char **)(v30 + 16 * v32);
      uint64_t v34 = *v33;
      if (*v33 == v28)
      {
LABEL_54:
        uint64_t v43 = v33[1];
        int v45 = *(void *)v43;
        unint64_t v41 = v43 + 16;
        uint64_t v44 = v45;
        uint64_t v46 = *(void **)(a1 + 32);
        if (v45 > *(void *)(a1 + 24) - (void)v46)
        {
          uint64_t v40 = (llvm::raw_ostream *)a1;
          uint64_t v42 = v44;
          goto LABEL_56;
        }
        if (!v44) {
          goto LABEL_57;
        }
        memcpy(v46, v41, v44);
        uint64_t v51 = *(void *)(a1 + 32) + v44;
LABEL_68:
        *(void *)(a1 + 32) = v51;
        goto LABEL_57;
      }
      int v35 = 1;
      while (v34 != (const char *)-4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        uint64_t v34 = *(const char **)(v30 + 16 * v32);
        if (v34 == v28)
        {
          size_t v33 = (const char **)(v30 + 16 * v32);
          goto LABEL_54;
        }
      }
    }
    size_t v33 = (const char **)(v30 + 16 * v31);
    goto LABEL_54;
  }
  if ((v14 & 0x80) != 0) {
    goto LABEL_13;
  }
  uint64_t v23 = v5;
  while ((*(_WORD *)(v23 + 44) & 8) != 0)
  {
    uint64_t v23 = *(void *)(v23 + 8);
    if ((*(unsigned char *)(*(void *)(v23 + 16) + 8) & 0x80) != 0) {
      goto LABEL_13;
    }
  }
  if ((v14 & 0x400) != 0) {
    goto LABEL_13;
  }
  int v24 = v5;
  while ((*(_WORD *)(v24 + 44) & 8) != 0)
  {
    int v24 = *(void *)(v24 + 8);
    if ((*(unsigned char *)(*(void *)(v24 + 16) + 9) & 4) != 0) {
      goto LABEL_13;
    }
  }
LABEL_57:
  unint64_t v47 = *(_WORD **)(a1 + 32);
  if (*(void *)(a1 + 24) - (void)v47 > 1uLL)
  {
    *unint64_t v47 = 23328;
    *(void *)(a1 + 32) += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, " [", 2uLL);
  }
  llvm::rdf::CodeNode::members(**a2, (const llvm::rdf::DataFlowGraph *)a2[1], (uint64_t)&v53);
  int v48 = (uint64_t **)a2[1];
  v52[0] = (uint64_t **)&v53;
  v52[1] = v48;
  sub_1CC3F2C3C((llvm::raw_ostream *)a1, v52);
  uint64_t v49 = *(unsigned char **)(a1 + 32);
  if ((unint64_t)v49 >= *(void *)(a1 + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 93);
  }
  else
  {
    *(void *)(a1 + 32) = v49 + 1;
    *uint64_t v49 = 93;
  }
  if (v53 != &v55) {
    free(v53);
  }
  return a1;
}

llvm::raw_ostream *sub_1CC3F2C3C(llvm::raw_ostream *result, uint64_t ***a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *((unsigned int *)*a2 + 2);
  if (v3)
  {
    int v5 = *v2;
    uint64_t v6 = (uint64_t)&(*v2)[2 * v3];
    int v7 = v3 - 1;
    do
    {
      uint64_t v11 = *v5;
      int v12 = *((_DWORD *)v5 + 2);
      uint64_t v8 = (__int16 **)a2[1];
      v10[0] = (__int16 **)&v11;
      v10[1] = v8;
      double result = llvm::rdf::operator<<(result, v10);
      if (v7)
      {
        uint64_t v9 = (_WORD *)*((void *)result + 4);
        if (*((void *)result + 3) - (void)v9 > 1uLL)
        {
          *uint64_t v9 = 8236;
          *((void *)result + 4) += 2;
        }
        else
        {
          double result = llvm::raw_ostream::write(result, ", ", 2uLL);
        }
      }
      --v7;
      v5 += 2;
    }
    while (v5 != (uint64_t *)v6);
  }
  return result;
}

uint64_t llvm::rdf::CodeNode::members@<X0>(uint64_t this@<X0>, const llvm::rdf::DataFlowGraph *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  unsigned int v4 = *(_DWORD *)(this + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(*((void *)a2 + 37) + 8 * ((v4 - 1) >> *((_DWORD *)a2 + 69)))
       + 32 * (*((_DWORD *)a2 + 70) & (v4 - 1));
    if (v5 != this)
    {
      unsigned int v6 = 0;
      do
      {
        if (v6 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v7 = (void *)(*(void *)a3 + 16 * v6);
        *int v7 = v5;
        v7[1] = v4;
        unsigned int v6 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v6;
        unsigned int v4 = *(_DWORD *)(v5 + 4);
        if (v4) {
          uint64_t v5 = *(void *)(*((void *)a2 + 37) + 8 * ((v4 - 1) >> *((_DWORD *)a2 + 69)))
        }
             + 32 * (*((_DWORD *)a2 + 70) & (v4 - 1));
        else {
          uint64_t v5 = 0;
        }
      }
      while (v5 != this);
    }
  }
  return this;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  int v4 = *(_WORD *)**a2 & 0x1C;
  if (v4 == 16)
  {
    uint64_t v10 = **a2;
    int v11 = *((_DWORD *)v3 + 2);
    int v7 = a2[1];
    int v12 = &v10;
    int v13 = v7;
    return (llvm::raw_ostream *)llvm::rdf::operator<<((uint64_t)a1, &v12);
  }
  else if (v4 == 12)
  {
    uint64_t v10 = **a2;
    int v11 = *((_DWORD *)v3 + 2);
    uint64_t v5 = a2[1];
    int v12 = &v10;
    int v13 = v5;
    return (llvm::raw_ostream *)llvm::rdf::operator<<((uint64_t)a1, &v12);
  }
  else
  {
    uint64_t v8 = (_DWORD *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 541028980;
      *uint64_t v8 = 1953721961;
      *((void *)a1 + 4) += 7;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "instr? ", 7uLL);
    }
    uint64_t v9 = a2[1];
    int v12 = *a2 + 1;
    int v13 = v9;
    return llvm::rdf::operator<<((char **)a1, (unsigned int **)&v12);
  }
}

char **llvm::rdf::operator<<(char **a1, uint64_t **a2)
{
  uint64_t v3 = a1;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  int v4 = a2[1];
  uint64_t v5 = *(void *)(**a2 + 8);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v77 = *a2 + 1;
  uint64_t v78 = v4;
  uint64_t v8 = llvm::rdf::operator<<(a1, (unsigned int **)&v77);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 5)
  {
    *(_WORD *)(v9 + 4) = 8237;
    *(_DWORD *)uint64_t v9 = 757932090;
    v3[4] += 6;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, ": --- ", 6uLL);
  }
  unsigned int v82 = &v79;
  int v79 = &unk_1F260D508;
  uint64_t v80 = v5;
  off_1F260D538((uint64_t)&v79, (llvm::raw_ostream *)v3);
  uint64_t v10 = v3[4];
  if ((unint64_t)(v3[3] - v10) > 0xA)
  {
    *(_DWORD *)(v10 + 7) = 678650981;
    *(void *)uint64_t v10 = *(void *)" --- preds(";
    v3[4] += 11;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, " --- preds(", 0xBuLL);
  }
  sub_1CD098D14((llvm::raw_ostream *)v3, ((unint64_t)(v6 - v7) >> 3), 0, 0, 0);
  int v11 = v3[4];
  if ((unint64_t)(v3[3] - v11) > 2)
  {
    void v11[2] = 32;
    *(_WORD *)int v11 = 14889;
    v3[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, "): ", 3uLL);
  }
  if (v82 == &v79)
  {
    (*((void (**)(void **))v79 + 4))(&v79);
  }
  else if (v82)
  {
    (*((void (**)(void))*v82 + 5))();
  }
  uint64_t v67 = a2;
  uint64_t v68 = v5;
  uint64_t v12 = *(void *)(v5 + 64);
  uint64_t v13 = *(void *)(v5 + 72);
  if (v12 == v13)
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    do
    {
      int v17 = *(_DWORD *)(*(void *)v12 + 24);
      if (v15 >= v14)
      {
        uint64_t v19 = (v15 - v16) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
LABEL_111:
        }
          abort();
        if ((v14 - v16) >> 1 > v20) {
          unint64_t v20 = (v14 - v16) >> 1;
        }
        if ((unint64_t)(v14 - v16) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 62) {
LABEL_112:
          }
            sub_1CB833614();
          uint64_t v22 = (char *)operator new(4 * v21);
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v23 = &v22[4 * v19];
        *(_DWORD *)uint64_t v23 = v17;
        uint64_t v18 = (uint64_t)(v23 + 4);
        while (v15 != v16)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        uint64_t v14 = &v22[4 * v21];
        if (v16) {
          operator delete(v16);
        }
        uint64_t v16 = v23;
      }
      else
      {
        *(_DWORD *)int v15 = v17;
        uint64_t v18 = (uint64_t)(v15 + 4);
      }
      v12 += 8;
      int v15 = (char *)v18;
    }
    while (v12 != v13);
  }
  unint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  sub_1CBA85A80(&v74, v16, v18, (v18 - (uint64_t)v16) >> 2);
  unint64_t v25 = v74;
  uint64_t v26 = v75;
  if (v74 != v75)
  {
    int v27 = ((unint64_t)((char *)v75 - (char *)v74) >> 2) - 1;
    unint64_t v28 = v74;
    while (1)
    {
      unint64_t v29 = *v28;
      uint64_t v30 = v3[4];
      if ((unint64_t)(v3[3] - v30) > 3)
      {
        *(_DWORD *)uint64_t v30 = 778199589;
        v3[4] += 4;
        if ((v29 & 0x80000000) != 0)
        {
LABEL_45:
          unint64_t v32 = -(uint64_t)v29;
          unsigned int v31 = (llvm::raw_ostream *)v3;
          int v33 = 1;
          goto LABEL_39;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v3, "%bb.", 4uLL);
        if ((v29 & 0x80000000) != 0) {
          goto LABEL_45;
        }
      }
      unsigned int v31 = (llvm::raw_ostream *)v3;
      unint64_t v32 = v29;
      int v33 = 0;
LABEL_39:
      sub_1CD098D14(v31, v32, 0, 0, v33);
      if (v27)
      {
        uint64_t v34 = v3[4];
        if ((unint64_t)(v3[3] - v34) > 1)
        {
          *(_WORD *)uint64_t v34 = 8236;
          v3[4] += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v3, ", ", 2uLL);
        }
      }
      ++v28;
      --v27;
      if (v28 == v26) {
        goto LABEL_48;
      }
    }
  }
  unint64_t v25 = v75;
LABEL_48:
  if (v25)
  {
    uint64_t v75 = v25;
    operator delete(v25);
  }
  unint64_t v35 = *(void *)(v68 + 96) - *(void *)(v68 + 88);
  int v36 = v3[4];
  if ((unint64_t)(v3[3] - v36) > 7)
  {
    *(void *)int v36 = 0x2873636375732020;
    v3[4] += 8;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, "  succs(", 8uLL);
  }
  sub_1CD098D14((llvm::raw_ostream *)v3, (v35 >> 3), 0, 0, 0);
  uint64_t v37 = v3[4];
  if ((unint64_t)(v3[3] - v37) > 2)
  {
    v37[2] = 32;
    *(_WORD *)uint64_t v37 = 14889;
    v3[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, "): ", 3uLL);
  }
  uint64_t v39 = *(void *)(v68 + 88);
  uint64_t v38 = *(void *)(v68 + 96);
  uint64_t v40 = v16;
  while (v39 != v38)
  {
    int v41 = *(_DWORD *)(*(void *)v39 + 24);
    if (v40 >= v14)
    {
      uint64_t v42 = v3;
      uint64_t v43 = (v40 - v16) >> 2;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62) {
        goto LABEL_111;
      }
      if ((v14 - v16) >> 1 > v44) {
        unint64_t v44 = (v14 - v16) >> 1;
      }
      if ((unint64_t)(v14 - v16) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45)
      {
        if (v45 >> 62) {
          goto LABEL_112;
        }
        uint64_t v46 = (char *)operator new(4 * v45);
      }
      else
      {
        uint64_t v46 = 0;
      }
      unint64_t v47 = &v46[4 * v43];
      *(_DWORD *)unint64_t v47 = v41;
      int v48 = v47 + 4;
      while (v40 != v16)
      {
        int v49 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *((_DWORD *)v47 - 1) = v49;
        v47 -= 4;
      }
      uint64_t v14 = &v46[4 * v45];
      if (v16) {
        operator delete(v16);
      }
      uint64_t v16 = v47;
      uint64_t v40 = v48;
      uint64_t v3 = v42;
    }
    else
    {
      *(_DWORD *)uint64_t v40 = v41;
      v40 += 4;
    }
    v39 += 8;
  }
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  sub_1CBA85A80(&v71, v16, (uint64_t)v40, (v40 - v16) >> 2);
  unint64_t v50 = v71;
  uint64_t v51 = v72;
  if (v71 != v72)
  {
    int v52 = ((unint64_t)((char *)v72 - (char *)v71) >> 2) - 1;
    unint64_t v53 = v71;
    while (1)
    {
      unint64_t v54 = *v53;
      unint64_t v55 = v3[4];
      if ((unint64_t)(v3[3] - v55) > 3)
      {
        *(_DWORD *)unint64_t v55 = 778199589;
        v3[4] += 4;
        if ((v54 & 0x80000000) != 0)
        {
LABEL_86:
          unint64_t v57 = -(uint64_t)v54;
          uint64_t v56 = (llvm::raw_ostream *)v3;
          int v58 = 1;
          goto LABEL_80;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v3, "%bb.", 4uLL);
        if ((v54 & 0x80000000) != 0) {
          goto LABEL_86;
        }
      }
      uint64_t v56 = (llvm::raw_ostream *)v3;
      unint64_t v57 = v54;
      int v58 = 0;
LABEL_80:
      sub_1CD098D14(v56, v57, 0, 0, v58);
      if (v52)
      {
        uint64_t v59 = v3[4];
        if ((unint64_t)(v3[3] - v59) > 1)
        {
          *(_WORD *)uint64_t v59 = 8236;
          v3[4] += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v3, ", ", 2uLL);
        }
      }
      ++v53;
      --v52;
      if (v53 == v51) {
        goto LABEL_89;
      }
    }
  }
  unint64_t v50 = v72;
LABEL_89:
  if (v50)
  {
    uint64_t v72 = v50;
    operator delete(v50);
  }
  uint64_t v60 = v3[4];
  if (v60 >= v3[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, 10);
  }
  else
  {
    v3[4] = v60 + 1;
    *uint64_t v60 = 10;
  }
  llvm::rdf::CodeNode::members(**v67, (const llvm::rdf::DataFlowGraph *)v67[1], (uint64_t)&v79);
  uint64_t v61 = (char *)v79;
  if (v80)
  {
    uint64_t v62 = (char *)v79 + 16 * v80;
    do
    {
      int v63 = *((_DWORD *)v61 + 2);
      uint64_t v69 = *(void *)v61;
      int v70 = v63;
      uint64_t v64 = v67[1];
      uint64_t v77 = &v69;
      uint64_t v78 = v64;
      llvm::rdf::operator<<((llvm::raw_ostream *)v3, &v77);
      uint64_t v65 = v3[4];
      if (v65 >= v3[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v3, 10);
      }
      else
      {
        v3[4] = v65 + 1;
        *uint64_t v65 = 10;
      }
      v61 += 16;
    }
    while (v61 != v62);
    uint64_t v61 = (char *)v79;
  }
  if (v61 != (char *)&v81) {
    free(v61);
  }
  if (v16) {
    operator delete(v16);
  }
  return v3;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, uint64_t **a2)
{
  v33[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v4) > 0xA)
  {
    *(_DWORD *)(v4 + 7) = 173750896;
    *(void *)uint64_t v4 = *(void *)"DFG dump:[\n";
    *((void *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "DFG dump:[\n", 0xBuLL);
  }
  uint64_t v5 = a2[1];
  unsigned int v31 = *a2 + 1;
  unint64_t v32 = v5;
  llvm::rdf::operator<<((char **)this, (unsigned int **)&v31);
  uint64_t v6 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v6) > 0xB)
  {
    *(_DWORD *)(v6 + 8) = 540700271;
    *(void *)uint64_t v6 = *(void *)": Function: ";
    *((void *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, ": Function: ", 0xCuLL);
  }
  uint64_t v7 = **(uint64_t *****)(**a2 + 8);
  if ((*((unsigned char *)v7 + 23) & 0x10) == 0) {
    goto LABEL_15;
  }
  uint64_t v8 = ***v7;
  uint64_t v9 = *(void *)(v8 + 152);
  uint64_t v10 = *(unsigned int *)(v8 + 168);
  if (v10)
  {
    LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
    uint64_t v13 = *v12;
    if (*v12 == v7) {
      goto LABEL_13;
    }
    int v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v7)
      {
        uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_13;
      }
    }
  }
  uint64_t v12 = (uint64_t ****)(v9 + 16 * v10);
LABEL_13:
  uint64_t v16 = v12[1];
  size_t v19 = (size_t)*v16;
  int v17 = (const char *)(v16 + 2);
  size_t v18 = v19;
  unint64_t v20 = (unsigned char *)*((void *)this + 4);
  if (v19 > *((void *)this + 3) - (void)v20)
  {
    llvm::raw_ostream::write(this, v17, v18);
LABEL_15:
    unint64_t v20 = (unsigned char *)*((void *)this + 4);
    goto LABEL_18;
  }
  if (v18)
  {
    memcpy(v20, v17, v18);
    unint64_t v20 = (unsigned char *)(*((void *)this + 4) + v18);
    *((void *)this + 4) = v20;
  }
LABEL_18:
  if ((unint64_t)v20 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 10);
  }
  else
  {
    *((void *)this + 4) = v20 + 1;
    *unint64_t v20 = 10;
  }
  llvm::rdf::CodeNode::members(**a2, (const llvm::rdf::DataFlowGraph *)a2[1], (uint64_t)&v31);
  unint64_t v21 = (char *)v31;
  if (v32)
  {
    uint64_t v22 = (char *)v31 + 16 * v32;
    do
    {
      int v23 = *((_DWORD *)v21 + 2);
      uint64_t v28 = *(void *)v21;
      int v29 = v23;
      int v24 = a2[1];
      v30[0] = &v28;
      v30[1] = v24;
      llvm::rdf::operator<<((char **)this, v30);
      unint64_t v25 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v25 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((void *)this + 4) = v25 + 1;
        *unint64_t v25 = 10;
      }
      v21 += 16;
    }
    while (v21 != v22);
    unint64_t v21 = (char *)v31;
  }
  if (v21 != (char *)v33) {
    free(v21);
  }
  uint64_t v26 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v26 > 1uLL)
  {
    *uint64_t v26 = 2653;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "]\n", 2uLL);
  }
  return this;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, llvm::raw_ostream **a2)
{
  return a1;
}

char **llvm::rdf::operator<<(char **this, unsigned int **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)*a2;
  unint64_t v6 = *((void *)*a2 + 1) - v5;
  int v7 = (v6 >> 4) + 1;
  uint64_t v8 = v6 & 0xFFFFFFFF0;
  while (v8)
  {
    uint64_t v9 = *(void *)(v5 + v8 - 16);
    --v7;
    v8 -= 16;
    if (v9)
    {
LABEL_4:
      uint64_t v10 = (v7 - 1);
      uint64_t v11 = a2[1];
      v23[0] = (unsigned int *)(v5 + 16 * v10 + 8);
      v23[1] = v11;
      llvm::rdf::operator<<(this, v23);
      uint64_t v12 = this[4];
      if (v12 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 60);
      }
      else
      {
        this[4] = v12 + 1;
        char *v12 = 60;
      }
      uint64_t v13 = *(llvm::rdf::RefNode **)(*(void *)v4 + 16 * v10);
      int v14 = (const llvm::rdf::DataFlowGraph *)a2[1];
      v21[0] = llvm::rdf::RefNode::getRegRef(v13, v14);
      v21[1] = v15;
      v22[0] = (unsigned int *)v21;
      v22[1] = (unsigned int *)v14;
      llvm::rdf::operator<<((llvm::raw_ostream *)this, v22);
      uint64_t v16 = this[4];
      if (v16 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 62);
      }
      else
      {
        this[4] = v16 + 1;
        *uint64_t v16 = 62;
      }
      while (1)
      {
        int v17 = v7 - 1;
        if (v7 == 1) {
          return this;
        }
        uint64_t v18 = *(void *)(*(void *)v4 + 16 * (v7 - 2));
        --v7;
        if (v18)
        {
          size_t v19 = this[4];
          if (v19 >= this[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)this, 32);
          }
          else
          {
            this[4] = v19 + 1;
            *size_t v19 = 32;
          }
          uint64_t v5 = *(void *)v4;
          int v7 = v17;
          goto LABEL_4;
        }
      }
    }
  }
  return this;
}

uint64_t llvm::rdf::RefNode::getRegRef(llvm::rdf::RefNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  if ((*(_WORD *)this & 0x80) != 0) {
    return *((void *)this + 3);
  }
  else {
    return llvm::rdf::DataFlowGraph::makeRegRef(a2, *((const llvm::MachineOperand **)this + 3));
  }
}

void llvm::rdf::NodeAllocator::startNewBlock(size_t __sz)
{
  uint64_t v2 = (32 * *(_DWORD *)__sz);
  *(void *)(__sz + 128) += v2;
  uint64_t v3 = *(void *)(__sz + 48);
  if (((v3 + 31) & 0xFFFFFFFFFFFFFFE0) - v3 + v2 <= *(void *)(__sz + 56) - v3)
  {
    unint64_t v7 = (v3 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(void *)(__sz + 48) = v7 + v2;
  }
  else if (v2 < 0xFFE2)
  {
    unsigned int v8 = *(_DWORD *)(__sz + 72) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 0x10000 << v8;
    uint64_t v10 = (char *)operator new(0x10000 << v8, (std::align_val_t)8uLL);
    unsigned int v11 = *(_DWORD *)(__sz + 72);
    if (v11 >= *(_DWORD *)(__sz + 76)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(__sz + 64) + 8 * v11) = v10;
    ++*(_DWORD *)(__sz + 72);
    uint64_t v12 = &v10[v9];
    unint64_t v7 = (unint64_t)(v10 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(void *)(__sz + 48) = v7 + v2;
    *(void *)(__sz + 56) = v12;
  }
  else
  {
    uint64_t v4 = operator new(v2 | 0x1F, (std::align_val_t)8uLL);
    unsigned int v5 = *(_DWORD *)(__sz + 120);
    if (v5 >= *(_DWORD *)(__sz + 124)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v6 = (void *)(*(void *)(__sz + 112) + 16 * v5);
    *unint64_t v6 = v4;
    v6[1] = v2 | 0x1F;
    ++*(_DWORD *)(__sz + 120);
    unint64_t v7 = ((unint64_t)v4 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  int v14 = *(unint64_t **)(__sz + 32);
  unint64_t v13 = *(void *)(__sz + 40);
  if ((unint64_t)v14 >= v13)
  {
    uint64_t v16 = *(void **)(__sz + 24);
    uint64_t v17 = v14 - v16;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      abort();
    }
    uint64_t v19 = v13 - (void)v16;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        sub_1CB833614();
      }
      unint64_t v21 = (char *)operator new(8 * v20);
    }
    else
    {
      unint64_t v21 = 0;
    }
    uint64_t v22 = (unint64_t *)&v21[8 * v17];
    *uint64_t v22 = v7;
    uint64_t v15 = v22 + 1;
    if (v14 != v16)
    {
      do
      {
        unint64_t v23 = *--v14;
        *--uint64_t v22 = v23;
      }
      while (v14 != v16);
      int v14 = *(unint64_t **)(__sz + 24);
    }
    *(void *)(__sz + 24) = v22;
    *(void *)(__sz + 32) = v15;
    *(void *)(__sz + 40) = &v21[8 * v20];
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *int v14 = v7;
    uint64_t v15 = v14 + 1;
  }
  *(void *)(__sz + 32) = v15;
  *(void *)(__sz + 16) = v7;
}

BOOL llvm::rdf::NodeAllocator::needNewBlock(llvm::rdf::NodeAllocator *this)
{
  uint64_t v1 = *((void *)this + 4);
  return *((void *)this + 3) == v1
      || *(_DWORD *)this <= ((*((void *)this + 2) - *(void *)(v1 - 8)) / 32);
}

uint64_t llvm::rdf::NodeAllocator::New(size_t __sz)
{
  uint64_t v2 = *(void *)(__sz + 32);
  if (*(void *)(__sz + 24) == v2
    || (uint64_t result = *(void *)(__sz + 16), *(_DWORD *)__sz <= ((result - *(void *)(v2 - 8)) / 32)))
  {
    llvm::rdf::NodeAllocator::startNewBlock(__sz);
    uint64_t result = *(void *)(__sz + 16);
  }
  *(void *)(__sz + 16) = result + 32;
  return result;
}

unint64_t llvm::rdf::NodeAllocator::id(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32) - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 3);
    while (1)
    {
      unint64_t v3 = *(void *)(v2 + 8 * v4);
      if (v3 <= a2 && (32 * *(_DWORD *)a1) + v3 > a2) {
        break;
      }
      if (v5 == ++v4) {
        return v3;
      }
    }
    return ((v4 << *(_DWORD *)(a1 + 4)) | ((a2 - v3) >> 5)) + 1;
  }
  return v3;
}

uint64_t llvm::rdf::NodeAllocator::clear(llvm::rdf::NodeAllocator *this)
{
  uint64_t result = sub_1CC3F44F0((uint64_t)this + 48);
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 2) = 0;
  return result;
}

uint64_t sub_1CC3F44F0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 72);
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(result + 64);
    uint64_t v4 = 16 * v2;
    do
    {
      uint64_t v5 = *v3;
      v3 += 2;
      uint64_t result = MEMORY[0x1D25D9CD0](v5, 8);
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v6 = *(unsigned int *)(v1 + 24);
  if (v6)
  {
    *(void *)(v1 + 80) = 0;
    unint64_t v7 = *(void **)(v1 + 16);
    uint64_t v8 = *v7 + 0x10000;
    *(void *)uint64_t v1 = *v7;
    *(void *)(v1 + 8) = v8;
    if (v6 != 1)
    {
      uint64_t v9 = v7 + 1;
      uint64_t v10 = 8 * v6 - 8;
      do
      {
        uint64_t v11 = *v9++;
        uint64_t result = MEMORY[0x1D25D9CD0](v11, 8);
        v10 -= 8;
      }
      while (v10);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t llvm::rdf::NodeBase::append(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 4);
  if (v3 != a3)
  {
    *(_DWORD *)(result + 4) = a3;
    *(_DWORD *)(a2 + 4) = v3;
  }
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::makeRegRef(llvm::rdf::DataFlowGraph *this, const llvm::MachineOperand *a2)
{
  if (*(_DWORD *)a2)
  {
    uint64_t v2 = (char *)*((void *)this + 4);
    int v3 = (char *)*((void *)this + 5);
    if (v2 == v3)
    {
      uint64_t v4 = (char *)*((void *)this + 4);
    }
    else
    {
      uint64_t v4 = (char *)*((void *)this + 4);
      while (*(void *)v4 != *((void *)a2 + 2))
      {
        v4 += 8;
        if (v4 == v3)
        {
          uint64_t v4 = (char *)*((void *)this + 5);
          return ((unint64_t)(v4 - v2) >> 3) + 1073741825;
        }
      }
    }
    return ((unint64_t)(v4 - v2) >> 3) + 1073741825;
  }
  else
  {
    unsigned int v5 = *((_DWORD *)a2 + 1);
    int v6 = (*(_DWORD *)a2 >> 8) & 0xFFF;
    if (v6)
    {
      unint64_t v7 = (void *)*((void *)this + 2);
      uint64_t v8 = v7[1];
      uint64_t v9 = v7[7];
      uint64_t v10 = *(unsigned int *)(v8 + 24 * v5 + 4);
      if (*(_WORD *)(v9 + 2 * v10))
      {
        unsigned __int16 v11 = *(_WORD *)(v9 + 2 * v10) + v5;
        uint64_t v12 = (unsigned __int16 *)(v7[11] + 2 * *(unsigned int *)(v8 + 24 * v5 + 12));
        unint64_t v13 = (unsigned __int16 *)(v9 + 2 * v10 + 2);
        while (v6 != *v12)
        {
          unsigned int v5 = 0;
          int v14 = *v13++;
          v11 += v14;
          ++v12;
          if (!v14) {
            return v5;
          }
        }
        return v11;
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t llvm::rdf::RefNode::setRegRef(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == -1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t result = sub_1CC3FA000(a4 + 440, a3);
    uint64_t v6 = result << 32;
  }
  *(void *)(v5 + 24) = v6 | a2;
  return result;
}

uint64_t llvm::rdf::RefNode::setRegRef(uint64_t this, llvm::MachineOperand *a2, llvm::rdf::DataFlowGraph *a3)
{
  *(void *)(this + 24) = a2;
  return this;
}

uint64_t llvm::rdf::RefNode::getOwner(llvm::rdf::RefNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v2 = *((_DWORD *)this + 1);
  if (v2) {
    uint64_t result = *(void *)(*((void *)a2 + 37) + 8 * ((v2 - 1) >> *((_DWORD *)a2 + 69)))
  }
           + 32 * (*((_DWORD *)a2 + 70) & (v2 - 1));
  else {
    uint64_t result = 0;
  }
  while ((*(_WORD *)result & 3) != 1)
  {
    int v4 = *(_DWORD *)(result + 4);
    if (v4) {
      uint64_t result = *(void *)(*((void *)a2 + 37) + 8 * ((v4 - 1) >> *((_DWORD *)a2 + 69)))
    }
             + 32 * ((v4 - 1) & *((_DWORD *)a2 + 70));
    else {
      uint64_t result = 0;
    }
  }
  return result;
}

uint64_t llvm::rdf::DefNode::linkToDef(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = a2;
  return result;
}

uint64_t llvm::rdf::UseNode::linkToDef(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = a2;
  return result;
}

uint64_t llvm::rdf::CodeNode::getFirstMember(llvm::rdf::CodeNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v3 = *((_DWORD *)this + 4);
  if (v3) {
    return *(void *)(*((void *)a2 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a2 + 69)))
  }
         + 32 * (*((_DWORD *)a2 + 70) & (v3 - 1));
  else {
    return 0;
  }
}

uint64_t llvm::rdf::CodeNode::getLastMember(llvm::rdf::CodeNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v3 = *((_DWORD *)this + 5);
  if (v3) {
    return *(void *)(*((void *)a2 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a2 + 69)))
  }
         + 32 * (*((_DWORD *)a2 + 70) & (v3 - 1));
  else {
    return 0;
  }
}

unint64_t llvm::rdf::CodeNode::addMember(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 20);
  if (!v7)
  {
    *(_DWORD *)(a1 + 16) = a3;
    unint64_t result = llvm::rdf::DataFlowGraph::id(a4, a1);
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(*(void *)(a4 + 296) + 8 * ((v7 - 1) >> *(_DWORD *)(a4 + 276)))
     + 32 * (*(_DWORD *)(a4 + 280) & (v7 - 1));
  unint64_t result = *(unsigned int *)(v8 + 4);
  if (result != a3)
  {
    *(_DWORD *)(v8 + 4) = a3;
LABEL_5:
    *(_DWORD *)(a2 + 4) = result;
  }
  *(_DWORD *)(a1 + 20) = a3;
  return result;
}

unint64_t llvm::rdf::DataFlowGraph::id(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 296);
  unint64_t v3 = *(void *)(a1 + 304) - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 3);
    while (1)
    {
      unint64_t v3 = *(void *)(v2 + 8 * v4);
      if (v3 <= a2 && (32 * *(_DWORD *)(a1 + 272)) + v3 > a2) {
        break;
      }
      if (v5 == ++v4) {
        return v3;
      }
    }
    return ((v4 << *(_DWORD *)(a1 + 276)) | ((a2 - v3) >> 5)) + 1;
  }
  return v3;
}

uint64_t llvm::rdf::CodeNode::addMemberAfter(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 != a5)
  {
    *(_DWORD *)(a2 + 4) = a5;
    *(_DWORD *)(a4 + 4) = v5;
  }
  if (*(_DWORD *)(result + 20) == a3) {
    *(_DWORD *)(result + 20) = a5;
  }
  return result;
}

uint64_t llvm::rdf::CodeNode::removeMember(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(result + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a4 + 296) + 8 * ((v4 - 1) >> *(_DWORD *)(a4 + 276)))
       + 32 * (*(_DWORD *)(a4 + 280) & (v4 - 1));
  }
  else
  {
    uint64_t v5 = 0;
    int v4 = 0;
  }
  if (v4 == a3)
  {
    if (*(_DWORD *)(result + 20) == a3) {
      *(void *)(result + 16) = 0;
    }
    else {
      *(_DWORD *)(result + 16) = *(_DWORD *)(v5 + 4);
    }
  }
  else
  {
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 != a3)
    {
      do
      {
        int v7 = v6;
        uint64_t v5 = *(void *)(*(void *)(a4 + 296) + 8 * ((v6 - 1) >> *(_DWORD *)(a4 + 276)))
           + 32 * ((v6 - 1) & *(_DWORD *)(a4 + 280));
        int v6 = *(_DWORD *)(v5 + 4);
      }
      while (v6 != a3);
      int v4 = v7;
    }
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(result + 20) == a3) {
      *(_DWORD *)(result + 20) = v4;
    }
  }
  return result;
}

uint64_t llvm::rdf::InstrNode::getOwner(llvm::rdf::InstrNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v2 = *((_DWORD *)this + 1);
  if (v2) {
    uint64_t result = *(void *)(*((void *)a2 + 37) + 8 * ((v2 - 1) >> *((_DWORD *)a2 + 69)))
  }
           + 32 * (*((_DWORD *)a2 + 70) & (v2 - 1));
  else {
    uint64_t result = 0;
  }
  while ((*(_WORD *)result & 0x1C) != 0x14)
  {
    int v4 = *(_DWORD *)(result + 4);
    if (v4) {
      uint64_t result = *(void *)(*((void *)a2 + 37) + 8 * ((v4 - 1) >> *((_DWORD *)a2 + 69)))
    }
             + 32 * ((v4 - 1) & *((_DWORD *)a2 + 70));
    else {
      uint64_t result = 0;
    }
  }
  return result;
}

unint64_t llvm::rdf::BlockNode::addPhi(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(result + 16);
  if (!v4) {
    return llvm::rdf::CodeNode::addMember(result, a2, a3, a4);
  }
  int v5 = *(_DWORD *)(a4 + 276);
  unsigned int v6 = *(_DWORD *)(a4 + 280);
  uint64_t v7 = *(void *)(a4 + 296);
  uint64_t v8 = *(void *)(v7 + 8 * ((v4 - 1) >> v5)) + 32 * (v6 & (v4 - 1));
  if ((*(_WORD *)v8 & 0x1C) == 0x10)
  {
    *(_DWORD *)(result + 16) = a3;
    *(_DWORD *)(a2 + 4) = v4;
  }
  else
  {
    do
    {
      int v9 = v4;
      uint64_t v10 = v8;
      int v4 = *(_DWORD *)(v8 + 4);
      uint64_t v8 = *(void *)(v7 + 8 * ((v4 - 1) >> v5)) + 32 * ((v4 - 1) & v6);
    }
    while ((*(_WORD *)v8 & 0x1C) == 0xC);
    if (v4 != a3)
    {
      *(_DWORD *)(v10 + 4) = a3;
      *(_DWORD *)(a2 + 4) = v4;
    }
    if (*(_DWORD *)(result + 20) == v9) {
      *(_DWORD *)(result + 20) = a3;
    }
  }
  return result;
}

uint64_t llvm::rdf::FuncNode::findBlock(llvm::rdf::FuncNode *this, const llvm::MachineBasicBlock *a2, const llvm::rdf::DataFlowGraph *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  unsigned int v3 = *((_DWORD *)this + 4);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(*((void *)a3 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a3 + 69)))
     + 32 * (*((_DWORD *)a3 + 70) & (v3 - 1));
  if ((llvm::rdf::FuncNode *)v4 == this) {
    return 0;
  }
  unsigned int v5 = 0;
  do
  {
    if (*(const llvm::MachineBasicBlock **)(v4 + 8) == a2)
    {
      if (v5 >= 4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v6 = &v10[v5];
      *unsigned int v6 = v4;
      v6[1] = v3;
      unsigned int v5 = ++v9;
    }
    unsigned int v3 = *(_DWORD *)(v4 + 4);
    if (v3) {
      uint64_t v4 = *(void *)(*((void *)a3 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a3 + 69)))
    }
         + 32 * (*((_DWORD *)a3 + 70) & (v3 - 1));
    else {
      uint64_t v4 = 0;
    }
  }
  while ((llvm::rdf::FuncNode *)v4 != this);
  if (v5) {
    return *(void *)&v10[0];
  }
  else {
    return 0;
  }
}

uint64_t llvm::rdf::FuncNode::getEntryBlock(llvm::rdf::FuncNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  return llvm::rdf::FuncNode::findBlock(this, *(const llvm::MachineBasicBlock **)(*((void *)this + 1) + 328), a2);
}

uint64_t llvm::rdf::TargetOperandInfo::isPreserving(llvm::rdf::TargetOperandInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(void, const llvm::MachineInstr *))(**((void **)this + 1) + 768))(*((void *)this + 1), a2);
}

uint64_t llvm::rdf::TargetOperandInfo::isClobbering(llvm::rdf::TargetOperandInfo *this, const llvm::MachineInstr *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(*((void *)a2 + 4) + 32 * a3);
  if (v3 == 12) {
    return 1;
  }
  if ((*((_WORD *)a2 + 22) & 0xC) != 0 && (*((_WORD *)a2 + 22) & 4) == 0)
  {
    if ((*(void *)(*((void *)a2 + 2) + 8) & 0x80) != 0)
    {
LABEL_16:
      if ((~v3 & 0x5000000) == 0) {
        return 1;
      }
    }
    else
    {
      while ((*((_WORD *)a2 + 22) & 8) != 0)
      {
        a2 = (const llvm::MachineInstr *)*((void *)a2 + 1);
        if ((*(unsigned char *)(*((void *)a2 + 2) + 8) & 0x80) != 0) {
          goto LABEL_16;
        }
      }
    }
  }
  else if ((~v3 & 0x5000000) == 0 && (*(void *)(*((void *)a2 + 2) + 8) & 0x80) != 0)
  {
    return 1;
  }
  return 0;
}

BOOL llvm::rdf::TargetOperandInfo::isFixedReg(llvm::rdf::TargetOperandInfo *this, const llvm::MachineInstr *a2, unsigned int a3)
{
  int v3 = (void *)*((void *)a2 + 2);
  uint64_t v4 = v3[1];
  BOOL v5 = (*((_WORD *)a2 + 22) & 0xC) != 0 && (*((_WORD *)a2 + 22) & 4) == 0;
  if (v5)
  {
    if ((v4 & 0x80) != 0) {
      return 1;
    }
    uint64_t v12 = a2;
    BOOL result = 1;
    while ((*((_WORD *)v12 + 22) & 8) != 0)
    {
      uint64_t v12 = (const llvm::MachineInstr *)*((void *)v12 + 1);
      if ((*(unsigned char *)(*((void *)v12 + 2) + 8) & 0x80) != 0) {
        return result;
      }
    }
    if ((v4 & 0x20) != 0) {
      return 1;
    }
    unint64_t v13 = a2;
    BOOL result = 1;
    while ((*((_WORD *)v13 + 22) & 8) != 0)
    {
      unint64_t v13 = (const llvm::MachineInstr *)*((void *)v13 + 1);
      if ((*(unsigned char *)(*((void *)v13 + 2) + 8) & 0x20) != 0) {
        return result;
      }
    }
    if (*(unsigned __int16 *)v3 - 1 < 2) {
      return 1;
    }
    if ((v4 & 0x400) == 0)
    {
      int v14 = a2;
      while ((*((_WORD *)v14 + 22) & 8) != 0)
      {
        int v14 = (const llvm::MachineInstr *)*((void *)v14 + 1);
        if ((*(unsigned char *)(*((void *)v14 + 2) + 9) & 4) != 0) {
          goto LABEL_8;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if ((v4 & 0xA0) != 0 || *(unsigned __int16 *)v3 - 1 < 2) {
    return 1;
  }
  if ((v4 & 0x400) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned int *)a2 + 10);
    if (v6)
    {
      uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 4);
      uint64_t v8 = 32 * v6;
      while (*v7 - 9 >= 2)
      {
        v7 += 32;
        v8 -= 32;
        if (!v8) {
          goto LABEL_12;
        }
      }
      return 1;
    }
  }
  if (!v3[4] && !v3[3]) {
    return 0;
  }
  uint64_t v9 = *((void *)a2 + 4);
  int v10 = *(_DWORD *)(v9 + 32 * a3);
  if ((v10 & 0xFFF00) != 0) {
    return 0;
  }
LABEL_12:
  BOOL v5 = (v10 & 0x1000000) == 0;
  uint64_t v15 = 4;
  if (v5) {
    uint64_t v15 = 3;
  }
  uint64_t v16 = (unsigned __int16 *)v3[v15];
  if (!v16) {
    return 0;
  }
  int v17 = *(_DWORD *)(v9 + 32 * a3 + 4);
  do
  {
    int v19 = *v16++;
    int v18 = v19;
    BOOL result = v19 != 0;
    if (v19) {
      BOOL v20 = v17 == v18;
    }
    else {
      BOOL v20 = 1;
    }
  }
  while (!v20);
  return result;
}

llvm::rdf::DataFlowGraph *llvm::rdf::DataFlowGraph::DataFlowGraph(llvm::rdf::DataFlowGraph *this, llvm::MachineFunction *a2, const llvm::TargetInstrInfo *a3, const llvm::TargetRegisterInfo *a4, const llvm::MachineDominatorTree *a5, const llvm::MachineDominanceFrontier *a6, const llvm::rdf::TargetOperandInfo *a7)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  uint64_t v11 = (char *)this + 24;
  llvm::rdf::PhysicalRegisterInfo::PhysicalRegisterInfo((llvm::rdf::DataFlowGraph *)((char *)this + 24), a4, a2);
  *((void *)this + 22) = (char *)this + 192;
  *((void *)this + 19) = a5;
  *((void *)this + 20) = a6;
  *((void *)this + 21) = a7;
  int v12 = *(_DWORD *)(*((void *)this + 3) + 44);
  uint64_t v13 = (v12 + 63) >> 6;
  *((_DWORD *)this + 47) = 6;
  if ((v12 + 63) >= 0x1C0)
  {
    *((_DWORD *)this + 46) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v12 + 63) >= 0x40) {
    bzero((char *)this + 192, 8 * v13);
  }
  *((_DWORD *)this + 46) = v13;
  *((_DWORD *)this + 60) = v12;
  *((void *)this + 31) = v11;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((void *)this + 34) = 0xC00001000;
  *((_DWORD *)this + 70) = 4095;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 42) = (char *)this + 352;
  *((void *)this + 43) = 0x400000000;
  *((void *)this + 48) = (char *)this + 400;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 1;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 52) = (char *)this + 424;
  int v14 = (char *)operator new(0x100uLL);
  *((void *)this + 55) = v14;
  *((void *)this + 56) = v14;
  *((void *)this + 57) = v14 + 256;
  return this;
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::Iterator::Iterator(uint64_t result, void *a2, char a3)
{
  *(void *)BOOL result = a2;
  if (a3)
  {
    unint64_t v3 = a2[1] - *a2;
    int v4 = (v3 >> 4) + 1;
    uint64_t v5 = v3 & 0xFFFFFFFF0;
    while (v5)
    {
      uint64_t v6 = *(void *)(*a2 - 16 + v5);
      --v4;
      v5 -= 16;
      if (v6) {
        goto LABEL_8;
      }
    }
    int v4 = 0;
LABEL_8:
    *(_DWORD *)(result + 8) = v4;
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)BOOL result = a2;
  if (a3)
  {
    unint64_t v3 = a2[1] - *a2;
    int v4 = (v3 >> 4) + 1;
    uint64_t v5 = v3 & 0xFFFFFFFF0;
    while (v5)
    {
      uint64_t v6 = *(void *)(*a2 - 16 + v5);
      --v4;
      v5 -= 16;
      if (v6) {
        goto LABEL_8;
      }
    }
    int v4 = 0;
LABEL_8:
    *(_DWORD *)(result + 8) = v4;
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::size(llvm::rdf::DataFlowGraph::DefStack *this)
{
  uint64_t v1 = *(void *)this;
  unint64_t v2 = *((void *)this + 1) - *(void *)this;
  int v3 = (v2 >> 4) + 1;
  uint64_t v4 = v2 & 0xFFFFFFFF0;
  do
  {
    if (!v4) {
      return 0;
    }
    uint64_t v5 = *(void *)(*(void *)this - 16 + v4);
    --v3;
    v4 -= 16;
  }
  while (!v5);
  LODWORD(result) = 0;
LABEL_5:
  uint64_t result = (result + 1);
  int v7 = v3;
  while (1)
  {
    int v3 = v7 - 1;
    if (v7 == 1) {
      return result;
    }
    uint64_t v8 = *(void *)(v1 + 16 * (v7 - 2));
    --v7;
    if (v8) {
      goto LABEL_5;
    }
  }
}

void llvm::rdf::DataFlowGraph::DefStack::pop(llvm::rdf::DataFlowGraph::DefStack *this)
{
  uint64_t v1 = *((void *)this + 1) - *(void *)this;
  unsigned int v2 = ((unint64_t)v1 >> 4) - 2;
  uint64_t v3 = ((unint64_t)v1 >> 4) - 1;
  uint64_t v4 = *(void *)this + 16 * v3;
  uint64_t v5 = -v3;
  do
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    if (v2 == -1) {
      break;
    }
    uint64_t v8 = *(void *)(*(void *)this + 16 * v2--);
    v4 -= 16;
    ++v5;
  }
  while (!v8);
  unint64_t v9 = v1 >> 4;
  if (v9 >= -v7)
  {
    if (v9 > -v7) {
      *((void *)this + 1) = v6;
    }
  }
  else
  {
    sub_1CC3FA2B0((uint64_t)this, -v7 - v9);
  }
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::nextDown(llvm::rdf::DataFlowGraph::DefStack *this, int a2)
{
  uint64_t v2 = (a2 - 1);
  do
  {
    uint64_t v3 = v2;
    if (!v2) {
      break;
    }
    uint64_t v2 = (v2 - 1);
  }
  while (!*(void *)(*(void *)this + 16 * (v3 - 1)));
  return v3;
}

void llvm::rdf::DataFlowGraph::DefStack::start_block(llvm::rdf::DataFlowGraph::DefStack *this, int a2)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(_DWORD **)this;
    uint64_t v8 = ((uint64_t)v5 - *(void *)this) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_1CB833614();
      }
      int v12 = (char *)operator new(16 * v11);
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    *(void *)uint64_t v13 = 0;
    *((_DWORD *)v13 + 2) = a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 2);
        v5 -= 4;
        int v15 = v5[2];
        *((void *)v13 - 2) = v14;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      uint64_t v5 = *(_DWORD **)this;
    }
    *(void *)this = v13;
    *((void *)this + 1) = v6;
    *((void *)this + 2) = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v5 = 0;
    void v5[2] = a2;
    uint64_t v6 = v5 + 4;
  }
  *((void *)this + 1) = v6;
}

void llvm::rdf::DataFlowGraph::DefStack::clear_block(llvm::rdf::DataFlowGraph::DefStack *this, int a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1) - *(void *)this;
  if ((v3 & 0xFFFFFFFF0) != 0)
  {
    unsigned int v4 = (unint64_t)v3 >> 4;
    unsigned int v5 = v4 - 1;
    while (1)
    {
      --v4;
      uint64_t v6 = v5;
      if (!*(void *)(v2 + 16 * v5))
      {
        if (!a2) {
          goto LABEL_8;
        }
        if (*(_DWORD *)(v2 + 16 * v5 + 8) == a2) {
          break;
        }
      }
      --v5;
      if (!v6) {
        goto LABEL_7;
      }
    }
    unsigned int v5 = v4;
  }
  else
  {
LABEL_7:
    unsigned int v5 = 0;
  }
LABEL_8:
  unint64_t v7 = v3 >> 4;
  if (v5 <= (unint64_t)(v3 >> 4))
  {
    if (v5 < v7) {
      *((void *)this + 1) = v2 + 16 * v5;
    }
  }
  else
  {
    sub_1CC3FA2B0((uint64_t)this, v5 - v7);
  }
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::nextUp(llvm::rdf::DataFlowGraph::DefStack *this, uint64_t a2)
{
  do
  {
    uint64_t v2 = 16 * a2;
    a2 = (a2 + 1);
  }
  while (a2 < ((*((void *)this + 1) - *(void *)this) >> 4)
       && *(void *)(*(void *)this + v2) == 0);
  return a2;
}

uint64_t **llvm::rdf::DataFlowGraph::getLandingPadLiveIns@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  uint64_t v4 = **this;
  if ((*(_WORD *)(v4 + 18) & 8) != 0)
  {
    int v5 = *(_DWORD *)(v4 + 20);
    if ((v5 & 0x40000000) != 0) {
      uint64_t v6 = *(llvm::Value ***)(v4 - 8);
    }
    else {
      uint64_t v6 = (llvm::Value **)(v4 - 32 * (v5 & 0x7FFFFFF));
    }
    uint64_t v3 = *v6;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(*this)[2] + 120))((*this)[2]);
  unsigned int v8 = (*(uint64_t (**)(void))(*(void *)v7 + 712))();
  if (v8)
  {
    LODWORD(v11) = v8;
    *((void *)&v11 + 1) = -1;
    sub_1CC3FA3E0((uint64_t)a2, v8, 0xFFFFFFFFFFFFFFFFLL, &v11);
  }
  uint64_t result = (uint64_t **)llvm::classifyEHPersonality(v3, v9);
  if ((result - 7) >= 4)
  {
    uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t, llvm::Value *))(*(void *)v7 + 720))(v7, v3);
    if (result)
    {
      LODWORD(v11) = result;
      *((void *)&v11 + 1) = -1;
      return sub_1CC3FA3E0((uint64_t)a2, result, 0xFFFFFFFFFFFFFFFFLL, &v11);
    }
  }
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::ptr(llvm::rdf::DataFlowGraph *this, int a2)
{
  if (a2) {
    return *(void *)(*((void *)this + 37) + 8 * ((a2 - 1) >> *((_DWORD *)this + 69)))
  }
         + 32 * (*((_DWORD *)this + 70) & (a2 - 1));
  else {
    return 0;
  }
}

double llvm::rdf::DataFlowGraph::newNode(llvm::rdf::DataFlowGraph *this, __int16 a2)
{
  uint64_t v3 = (_OWORD *)llvm::rdf::NodeAllocator::New((size_t)this + 272);
  double result = 0.0;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  *(_WORD *)uint64_t v3 = a2;
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::cloneNode(uint64_t a1, _OWORD *a2)
{
  uint64_t result = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  long long v4 = a2[1];
  *(_OWORD *)uint64_t result = *a2;
  *(_OWORD *)(result + 16) = v4;
  __int16 v5 = *(_WORD *)result;
  if ((*(_WORD *)result & 3) == 2)
  {
    *(void *)(result + 8) = 0;
    if ((v5 & 0x1C) == 4) {
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

void *llvm::rdf::DataFlowGraph::newUse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  __int16 v6 = a5 | 0xA;
  uint64_t result = (void *)llvm::rdf::NodeAllocator::New(a1 + 272);
  *uint64_t result = 0;
  result[1] = 0;
  *(_WORD *)uint64_t result = v6;
  result[2] = 0;
  result[3] = a4;
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::newPhiUse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, __int16 a8)
{
  __int16 v12 = a8 | 0xA;
  uint64_t v13 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_WORD *)uint64_t v13 = v12;
  if (a5 == -1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = sub_1CC3FA000(a1 + 440, a5) << 32;
  }
  *(void *)(v13 + 24) = v14 | a4;
  *(_DWORD *)(v13 + 16) = a7;
  return v13;
}

void *llvm::rdf::DataFlowGraph::newDef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  __int16 v6 = a5 | 6;
  uint64_t result = (void *)llvm::rdf::NodeAllocator::New(a1 + 272);
  *uint64_t result = 0;
  result[1] = 0;
  *(_WORD *)uint64_t result = v6;
  result[2] = 0;
  result[3] = a4;
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::newDef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, __int16 a6)
{
  __int16 v9 = a6 | 6;
  uint64_t v10 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_WORD *)uint64_t v10 = v9;
  if (a5 == -1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = sub_1CC3FA000(a1 + 440, a5) << 32;
  }
  *(void *)(v10 + 24) = v11 | a4;
  return v10;
}

_OWORD *llvm::rdf::DataFlowGraph::newPhi(uint64_t a1, unint64_t a2)
{
  long long v4 = (_OWORD *)llvm::rdf::NodeAllocator::New(a1 + 272);
  *long long v4 = 0u;
  v4[1] = 0u;
  *(_WORD *)long long v4 = 13;
  llvm::rdf::BlockNode::addPhi(a2, (uint64_t)v4, v5, a1);
  return v4;
}

uint64_t llvm::rdf::DataFlowGraph::newStmt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_WORD *)uint64_t v7 = 17;
  *(void *)(v7 + 8) = a4;
  llvm::rdf::CodeNode::addMember(a2, v7, v8, a1);
  return v7;
}

uint64_t llvm::rdf::DataFlowGraph::newBlock(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_WORD *)uint64_t v7 = 21;
  *(void *)(v7 + 8) = a4;
  llvm::rdf::CodeNode::addMember(a2, v7, v8, a1);
  return v7;
}

double llvm::rdf::DataFlowGraph::newFunc(llvm::rdf::DataFlowGraph *this, llvm::MachineFunction *a2)
{
  uint64_t v3 = llvm::rdf::NodeAllocator::New((size_t)this + 272);
  double result = 0.0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_WORD *)uint64_t v3 = 25;
  *(void *)(v3 + 8) = a2;
  return result;
}

void llvm::rdf::DataFlowGraph::build(llvm::rdf::DataFlowGraph *this, char a2)
{
  v105[8] = *MEMORY[0x1E4F143B8];
  llvm::rdf::DataFlowGraph::reset(this);
  uint64_t v5 = *(void *)this;
  __sz = (char *)this + 272;
  uint64_t v6 = llvm::rdf::NodeAllocator::New((size_t)this + 272);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_WORD *)uint64_t v6 = 25;
  *(void *)(v6 + 8) = v5;
  *((void *)this + 32) = v6;
  *((_DWORD *)this + 66) = v7;
  int v8 = (void *)(*(void *)this + 320);
  if ((void *)*v8 == v8) {
    return;
  }
  char v88 = a2;
  __int16 v9 = *(void **)(*(void *)this + 328);
  if (v9 != v8)
  {
    unint64_t v2 = 21;
    do
    {
      unint64_t v10 = *((void *)this + 32);
      uint64_t v11 = llvm::rdf::NodeAllocator::New((size_t)__sz);
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_WORD *)uint64_t v11 = 21;
      *(void *)(v11 + 8) = v9;
      uint64_t v13 = v12;
      llvm::rdf::CodeNode::addMember(v10, v11, v12, (uint64_t)this);
      uint64_t v14 = (uint64_t *)*((void *)this + 53);
      int v15 = (uint64_t **)((char *)this + 424);
      uint64_t v16 = (uint64_t **)((char *)this + 424);
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v16 = (uint64_t **)v14;
            unint64_t v17 = v14[4];
            if (v17 <= (unint64_t)v9) {
              break;
            }
            uint64_t v14 = *v16;
            int v15 = v16;
            if (!*v16) {
              goto LABEL_11;
            }
          }
          if (v17 >= (unint64_t)v9) {
            break;
          }
          uint64_t v14 = v16[1];
          if (!v14)
          {
            int v15 = v16 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        int v18 = (uint64_t *)operator new(0x38uLL);
        v18[4] = (uint64_t)v9;
        v18[5] = v11;
        v18[6] = v13;
        uint64_t *v18 = 0;
        v18[1] = 0;
        v18[2] = (uint64_t)v16;
        *int v15 = v18;
        uint64_t v19 = **((void **)this + 52);
        if (v19)
        {
          *((void *)this + 52) = v19;
          BOOL v20 = *v15;
        }
        else
        {
          BOOL v20 = v18;
        }
        sub_1CB8358B8(*((uint64_t **)this + 53), v20);
        ++*((void *)this + 54);
      }
      for (uint64_t i = v9[7]; (void *)i != v9 + 6; uint64_t i = *(void *)(i + 8))
      {
        if (**(unsigned __int16 **)(i + 16) - 13 >= 5) {
          llvm::rdf::DataFlowGraph::buildStmt((uint64_t)this, v11, v13, i);
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      __int16 v9 = (void *)v9[1];
    }
    while (v9 != v8);
    uint64_t v6 = *((void *)this + 32);
  }
  Blocuint64_t k = llvm::rdf::FuncNode::findBlock((llvm::rdf::FuncNode *)v6, *(const llvm::MachineBasicBlock **)(*(void *)(v6 + 8) + 328), this);
  int v87 = v22;
  llvm::rdf::CodeNode::members(*((void *)this + 32), this, (uint64_t)&v103);
  v95[0] = 0;
  v95[1] = 0;
  uint64_t v94 = v95;
  if (v104)
  {
    unint64_t v23 = v103;
    int v24 = &v103[2 * v104];
    do
    {
      llvm::rdf::CodeNode::members(*v23, this, (uint64_t)v100);
      unint64_t v25 = (uint64_t *)v100[0];
      unint64_t v2 = (unint64_t)v100[0] + 16 * LODWORD(v100[1]);
      if (LODWORD(v100[1]))
      {
        do
        {
          llvm::rdf::CodeNode::members(*v25, this, (uint64_t)&v96);
          uint64_t v26 = (llvm::rdf::RefNode **)v96;
          if (v97)
          {
            uint64_t v27 = 16 * v97;
            do
            {
              uint64_t v28 = *v26;
              v26 += 2;
              *(void *)&long long v92 = llvm::rdf::RefNode::getRegRef(v28, this);
              *((void *)&v92 + 1) = v29;
              sub_1CC3FA3E0((uint64_t)&v94, v92, v29, &v92);
              v27 -= 16;
            }
            while (v27);
            uint64_t v26 = (llvm::rdf::RefNode **)v96;
          }
          if (v26 != (llvm::rdf::RefNode **)&v98) {
            free(v26);
          }
          v25 += 2;
        }
        while (v25 != (uint64_t *)v2);
        unint64_t v25 = (uint64_t *)v100[0];
      }
      if (v25 != (uint64_t *)&__p) {
        free(v25);
      }
      v23 += 2;
    }
    while (v23 != v24);
  }
  uint64_t v30 = *(void **)(*(void *)this + 40);
  uint64_t v31 = Block;
  uint64_t v32 = *(void *)(Block + 8);
  int v33 = (int *)v30[57];
  uint64_t v34 = v30[58] - (void)v33;
  if (v34)
  {
    uint64_t v35 = 8 * (v34 >> 3);
    do
    {
      int v37 = *v33;
      v33 += 2;
      int v36 = v37;
      if (v37) {
        uint64_t v38 = -1;
      }
      else {
        uint64_t v38 = 0;
      }
      llvm::rdf::RegisterAggr::insert((uint64_t)this + 176, v36, v38);
      v35 -= 8;
    }
    while (v35);
  }
  if ((**(unsigned char **)(*v30 + 360) & 4) != 0)
  {
    uint64_t v40 = *(unsigned __int16 **)(v32 + 152);
    for (uint64_t j = *(unsigned __int16 **)(v32 + 160); v40 != j; v40 += 8)
    {
      if (*v40) {
        uint64_t v41 = *((void *)v40 + 1);
      }
      else {
        uint64_t v41 = 0;
      }
      llvm::rdf::RegisterAggr::insert((uint64_t)this + 176, *v40, v41);
    }
  }
  unint64_t v42 = (unint64_t)this + 176;
  llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t ***)v100, (uint64_t)this + 176, 0);
  llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t ***)&v96, (uint64_t)this + 176, 1);
  if (v102 != v99)
  {
    uint64_t v43 = (void *)*((void *)&__p + 1);
    do
    {
      unint64_t v42 = *((unsigned int *)v43 + 8);
      uint64_t v44 = v43[5];
      if (v42) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = (_OWORD *)llvm::rdf::NodeAllocator::New((size_t)__sz);
      *uint64_t v46 = 0u;
      v46[1] = 0u;
      *(_WORD *)uint64_t v46 = 13;
      llvm::rdf::BlockNode::addPhi(Block, (uint64_t)v46, v47, (uint64_t)this);
      uint64_t v50 = llvm::rdf::DataFlowGraph::newDef((uint64_t)this, v48, v49, v42, v45, 384);
      llvm::rdf::CodeNode::addMember((unint64_t)v46, v50, v51, (uint64_t)this);
      int v52 = (void *)*((void *)&__p + 1);
      unint64_t v53 = *(void **)(*((void *)&__p + 1) + 8);
      if (v53)
      {
        do
        {
          uint64_t v43 = v53;
          unint64_t v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          uint64_t v43 = (void *)v52[2];
          BOOL v54 = *v43 == (void)v52;
          int v52 = v43;
        }
        while (!v54);
      }
      *((void *)&__p + 1) = v43;
      ++v102;
    }
    while (v102 != v99);
  }
  sub_1CC1B4328((uint64_t)&v96, v97);
  sub_1CC1B4328((uint64_t)v100, (void *)v100[1]);
  llvm::rdf::DataFlowGraph::getLandingPadLiveIns((uint64_t **)this, &v96);
  unint64_t v55 = (unsigned int *)v103;
  unsigned int v56 = v104;
  if (!v98) {
    goto LABEL_86;
  }
  if (v104)
  {
    unint64_t v57 = (char *)this + 416;
    uint64_t v90 = (unsigned int *)&v103[2 * v104];
    do
    {
      unint64_t v58 = *(void *)v55;
      uint64_t v59 = *(void *)(*(void *)v55 + 8);
      if (*(unsigned char *)(v59 + 184))
      {
        v100[0] = &__p;
        v100[1] = (void *)0x400000000;
        unint64_t v42 = *(void *)(v59 + 64);
        uint64_t v60 = *(void *)(v59 + 72);
        while (v42 != v60)
        {
          *(void *)&long long v92 = *(void *)v42;
          uint64_t v61 = sub_1CC3FA140((uint64_t)v57, (unint64_t *)&v92);
          uint64_t v62 = *((unsigned int *)v61 + 2);
          if (LODWORD(v100[1]) >= (unint64_t)HIDWORD(v100[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v63 = (char *)v100[0] + 16 * LODWORD(v100[1]);
          *int v63 = *v61;
          v63[1] = v62;
          ++LODWORD(v100[1]);
          v42 += 8;
        }
        uint64_t v64 = v96;
        if (v96 != &v97)
        {
          do
          {
            uint64_t v65 = v64[4];
            unint64_t v42 = v64[5];
            uint64_t v66 = (_OWORD *)llvm::rdf::NodeAllocator::New((size_t)__sz);
            _OWORD *v66 = 0u;
            v66[1] = 0u;
            *(_WORD *)uint64_t v66 = 13;
            llvm::rdf::BlockNode::addPhi(v58, (uint64_t)v66, v67, (uint64_t)this);
            uint64_t v70 = llvm::rdf::DataFlowGraph::newDef((uint64_t)this, v68, v69, v65, v42, 384);
            llvm::rdf::CodeNode::addMember((unint64_t)v66, v70, v71, (uint64_t)this);
            if (LODWORD(v100[1]))
            {
              unint64_t v74 = (uint64_t *)v100[0];
              uint64_t v75 = (uint64_t *)((char *)v100[0] + 16 * LODWORD(v100[1]));
              do
              {
                unint64_t v2 = v2 & 0xFFFFFFFF00000000 | *((unsigned int *)v74 + 2);
                uint64_t v76 = llvm::rdf::DataFlowGraph::newPhiUse((uint64_t)this, v72, v73, v65, v42, *v74, v2, 128);
                llvm::rdf::CodeNode::addMember((unint64_t)v66, v76, v77, (uint64_t)this);
                v74 += 2;
              }
              while (v74 != v75);
            }
            uint64_t v78 = (void *)v64[1];
            if (v78)
            {
              do
              {
                int v79 = (void **)v78;
                uint64_t v78 = (void *)*v78;
              }
              while (v78);
            }
            else
            {
              do
              {
                int v79 = (void **)v64[2];
                BOOL v54 = *v79 == v64;
                uint64_t v64 = v79;
              }
              while (!v54);
            }
            uint64_t v64 = v79;
          }
          while (v79 != &v97);
        }
        if (v100[0] != &__p) {
          free(v100[0]);
        }
        unint64_t v57 = (char *)this + 416;
      }
      v55 += 4;
    }
    while (v55 != v90);
    unint64_t v55 = (unsigned int *)v103;
    unsigned int v56 = v104;
    uint64_t v31 = Block;
LABEL_86:
    *((void *)&v92 + 1) = 0;
    uint64_t v93 = 0;
    *(void *)&long long v92 = (char *)&v92 + 8;
    if (v56)
    {
      uint64_t v80 = &v55[4 * v56];
      do
      {
        unint64_t v42 = v42 & 0xFFFFFFFF00000000 | v55[2];
        llvm::rdf::DataFlowGraph::recordDefsForDF(this, (uint64_t **)&v92, *(llvm::rdf::CodeNode **)v55);
        v55 += 4;
      }
      while (v55 != v80);
      if (v104)
      {
        uint64_t v81 = (unint64_t *)v103;
        unsigned int v82 = (char *)&v103[2 * v104];
        do
        {
          unint64_t v42 = v42 & 0xFFFFFFFF00000000 | *((unsigned int *)v81 + 2);
          llvm::rdf::DataFlowGraph::buildPhis((uint64_t)this, (uint64_t)&v92, &v94, *v81, v42);
          v81 += 2;
        }
        while (v81 != (unint64_t *)v82);
      }
    }
    goto LABEL_94;
  }
  *((void *)&v92 + 1) = 0;
  uint64_t v93 = 0;
  *(void *)&long long v92 = (char *)&v92 + 8;
LABEL_94:
  *(_OWORD *)__int16 v100 = 0u;
  long long __p = 0u;
  int v102 = 1065353216;
  llvm::rdf::DataFlowGraph::linkBlockRefs((uint64_t)this, (uint64_t *)v100, v31, v87);
  if ((v88 & 1) == 0) {
    llvm::rdf::DataFlowGraph::removeUnusedPhis(this);
  }
  uint64_t v83 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      uint64_t v84 = (void *)*v83;
      uint64_t v85 = (void *)v83[3];
      if (v85)
      {
        v83[4] = v85;
        operator delete(v85);
      }
      operator delete(v83);
      uint64_t v83 = v84;
    }
    while (v84);
  }
  uint64_t v86 = v100[0];
  v100[0] = 0;
  if (v86) {
    operator delete(v86);
  }
  sub_1CC3FA4DC(*((void **)&v92 + 1));
  sub_1CBB0D544(v97);
  sub_1CBB0D544(v95[0]);
  if (v103 != v105) {
    free(v103);
  }
}

void llvm::rdf::DataFlowGraph::reset(llvm::rdf::DataFlowGraph *this)
{
  *((void *)this + 38) = *((void *)this + 37);
  *((void *)this + 36) = 0;
  sub_1CBB0D544(*((void **)this + 53));
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 52) = (char *)this + 424;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
}

void llvm::rdf::DataFlowGraph::buildStmt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  size_t v7 = a1 + 272;
  uint64_t v8 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_WORD *)uint64_t v8 = 17;
  *(void *)(v8 + 8) = a4;
  llvm::rdf::CodeNode::addMember(a2, v8, v9, a1);
  unsigned int v10 = *(unsigned __int16 *)(a4 + 44);
  BOOL v31 = (v10 & 0xC) == 0;
  int v11 = (v10 >> 2) & 1;
  if (v31) {
    char v12 = 1;
  }
  else {
    char v12 = v11;
  }
  uint64_t v13 = *(void *)(*(void *)(a4 + 16) + 8);
  if (v12)
  {
    if ((v13 & 0x80) != 0) {
      goto LABEL_23;
    }
    if ((v13 & 0x400) == 0)
    {
LABEL_7:
      int v78 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    if ((v13 & 0x80) != 0) {
      goto LABEL_23;
    }
    uint64_t v14 = a4;
    while ((*(_WORD *)(v14 + 44) & 8) != 0)
    {
      uint64_t v14 = *(void *)(v14 + 8);
      if ((*(unsigned char *)(*(void *)(v14 + 16) + 8) & 0x80) != 0) {
        goto LABEL_23;
      }
    }
    if ((v13 & 0x400) == 0)
    {
      uint64_t v15 = a4;
      while ((*(_WORD *)(v15 + 44) & 8) != 0)
      {
        uint64_t v15 = *(void *)(v15 + 8);
        if ((*(unsigned char *)(*(void *)(v15 + 16) + 9) & 4) != 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_7;
    }
  }
LABEL_17:
  uint64_t v16 = *(unsigned int *)(a4 + 40);
  if (v16)
  {
    unint64_t v17 = *(unsigned __int8 **)(a4 + 32);
    uint64_t v18 = 32 * v16;
    while (*v17 - 9 >= 2)
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    if (v12)
    {
      if ((v13 & 0x800) == 0) {
        goto LABEL_7;
      }
    }
    else if ((v13 & 0x800) == 0)
    {
      uint64_t v76 = a4;
      while ((*(_WORD *)(v76 + 44) & 8) != 0)
      {
        uint64_t v76 = *(void *)(v76 + 8);
        int v78 = 1;
        if ((*(unsigned char *)(*(void *)(v76 + 16) + 9) & 8) != 0) {
          goto LABEL_24;
        }
      }
      goto LABEL_7;
    }
  }
LABEL_23:
  int v78 = 1;
LABEL_24:
  uint64_t v19 = *(unsigned int *)(a4 + 40);
  int v20 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
  uint64_t v83 = v86;
  int v85 = 6;
  if ((v20 + 63) >= 0x1C0)
  {
    unsigned int v84 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v20 + 63) >= 0x40) {
    bzero(v86, 8 * ((v20 + 63) >> 6));
  }
  unsigned int v84 = (v20 + 63) >> 6;
  v86[12] = v20;
  size_t __sz = v7;
  unint64_t v77 = v8;
  if (v19)
  {
    for (uint64_t i = 0; i != v19; ++i)
    {
      int v22 = (const llvm::MachineOperand *)(*(void *)(a4 + 32) + 32 * i);
      if ((*(_DWORD *)v22 & 0x30000FF) == 0x1000000)
      {
        unsigned int v23 = *((_DWORD *)v22 + 1);
        if (v23 - 1 <= 0x3FFFFFFE)
        {
          if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), a4, i))
          {
            int RegRef = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, v22);
            uint64_t v26 = *(unsigned int *)(a4 + 40);
            if (v26)
            {
              int v27 = RegRef;
              uint64_t v28 = v25;
              unint64_t v29 = *(const llvm::MachineOperand **)(a4 + 32);
              uint64_t v30 = 32 * v26;
              while (1)
              {
                if (!*(_DWORD *)v29)
                {
                  BOOL v31 = (*(_DWORD *)v29 & 0x11000000) != 0 || *((_DWORD *)v29 + 1) == 0;
                  if (!v31)
                  {
                    int v32 = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, v29);
                    if (sub_1CC3F83B8((void *)(a1 + 24), v27, v28, v32, v33)) {
                      break;
                    }
                  }
                }
                unint64_t v29 = (const llvm::MachineOperand *)((char *)v29 + 32);
                v30 -= 32;
                if (!v30)
                {
                  __int16 v34 = 1280;
                  goto LABEL_43;
                }
              }
              __int16 v34 = 256;
LABEL_43:
              size_t v7 = __sz;
              uint64_t v8 = v77;
            }
            else
            {
              __int16 v34 = 1280;
              size_t v7 = __sz;
            }
          }
          else
          {
            __int16 v34 = 0;
          }
          if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168), a4, i))
          {
            v34 |= 0x40u;
          }
          int v35 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168), a4, i);
          __int16 v36 = v34 | 0x200;
          if (!v35) {
            __int16 v36 = v34;
          }
          if (v78 && (~*(_DWORD *)v22 & 0x5000000) == 0) {
            v36 |= 0x800u;
          }
          __int16 v37 = v36 | 6;
          uint64_t v38 = (void *)llvm::rdf::NodeAllocator::New(v7);
          *uint64_t v38 = 0;
          v38[1] = 0;
          *(_WORD *)uint64_t v38 = v37;
          v38[2] = 0;
          void v38[3] = v22;
          llvm::rdf::CodeNode::addMember(v8, (uint64_t)v38, v39, a1);
          *((void *)v83 + (v23 >> 6)) |= 1 << v23;
        }
      }
    }
  }
  int v40 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
  if ((v40 + 63) >= 0x1C0) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v40 + 63) >= 0x40) {
    bzero(v81, 8 * ((v40 + 63) >> 6));
  }
  int v82 = v40;
  if (v19)
  {
    for (uint64_t j = 0; j != v19; ++j)
    {
      uint64_t v42 = *(void *)(a4 + 32) + 32 * j;
      if (*(unsigned char *)v42 == 12)
      {
        uint64_t v43 = (void *)llvm::rdf::NodeAllocator::New(__sz);
        *uint64_t v43 = 0;
        v43[1] = 0;
        *(_WORD *)uint64_t v43 = 2630;
        v43[2] = 0;
        void v43[3] = v42;
        llvm::rdf::CodeNode::addMember(v8, (uint64_t)v43, v44, a1);
        int v45 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
        if (v45 != 1)
        {
          uint64_t v46 = *(void *)(v42 + 16);
          for (unsigned int k = 1; k != v45; ++k)
          {
            if (((*(_DWORD *)(v46 + 4 * (k >> 5)) >> k) & 1) == 0) {
              v81[k >> 6] |= 1 << k;
            }
          }
        }
      }
    }
    uint64_t v48 = 0;
    while (1)
    {
      uint64_t v49 = (_DWORD *)(*(void *)(a4 + 32) + 32 * v48);
      if ((*v49 & 0x30000FF) != 0x3000000) {
        goto LABEL_97;
      }
      unsigned int v50 = v49[1];
      if (v50 - 1 > 0x3FFFFFFE) {
        goto LABEL_97;
      }
      uint64_t v51 = 1 << v50;
      unsigned int v52 = v50 >> 6;
      if ((*((void *)v83 + (v50 >> 6)) & (1 << v50)) != 0) {
        goto LABEL_97;
      }
      int v79 = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, (const llvm::MachineOperand *)(*(void *)(a4 + 32) + 32 * v48));
      uint64_t v54 = v53;
      if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), a4, v48))
      {
        uint64_t v55 = *(unsigned int *)(a4 + 40);
        if (v55)
        {
          unsigned int v56 = *(const llvm::MachineOperand **)(a4 + 32);
          uint64_t v57 = 32 * v55;
          while (1)
          {
            if (!*(_DWORD *)v56 && (*(_DWORD *)v56 & 0x11000000) == 0 && *((_DWORD *)v56 + 1) != 0)
            {
              int v59 = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, v56);
              if (sub_1CC3F83B8((void *)(a1 + 24), v79, v54, v59, v60)) {
                break;
              }
            }
            unsigned int v56 = (const llvm::MachineOperand *)((char *)v56 + 32);
            v57 -= 32;
            if (!v57)
            {
              __int16 v61 = 1280;
              goto LABEL_85;
            }
          }
          __int16 v61 = 256;
LABEL_85:
          uint64_t v8 = v77;
        }
        else
        {
          __int16 v61 = 1280;
        }
      }
      else
      {
        __int16 v61 = 0;
      }
      if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168), a4, v48))
      {
        v61 |= 0x40u;
      }
      int v62 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168), a4, v48);
      __int16 v63 = v61 | 0x200;
      if (!v62) {
        __int16 v63 = v61;
      }
      if (!v78 || (~*v49 & 0x5000000) != 0) {
        goto LABEL_96;
      }
      if ((v81[v52] & v51) == 0) {
        break;
      }
LABEL_97:
      if (++v48 == v19)
      {
        uint64_t v67 = 0;
        for (uint64_t m = 0; m != v19; ++m)
        {
          uint64_t v69 = (_DWORD *)(*(void *)(a4 + 32) + v67);
          if ((*v69 & 0x10000FF) == 0 && (v69[1] - 1) <= 0x3FFFFFFE)
          {
            int v70 = (*v69 >> 18) & 0x400;
            int v71 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168), a4, m);
            __int16 v72 = v70 | 0x200;
            if (!v71) {
              __int16 v72 = v70;
            }
            __int16 v73 = v72 | 0xA;
            unint64_t v74 = (void *)llvm::rdf::NodeAllocator::New(__sz);
            *unint64_t v74 = 0;
            v74[1] = 0;
            *(_WORD *)unint64_t v74 = v73;
            v74[2] = 0;
            v74[3] = v69;
            llvm::rdf::CodeNode::addMember(v77, (uint64_t)v74, v75, a1);
          }
          v67 += 32;
        }
        goto LABEL_106;
      }
    }
    v63 |= 0x800u;
LABEL_96:
    __int16 v64 = v63 | 6;
    uint64_t v65 = (void *)llvm::rdf::NodeAllocator::New(__sz);
    *uint64_t v65 = 0;
    v65[1] = 0;
    *(_WORD *)uint64_t v65 = v64;
    v65[2] = 0;
    v65[3] = v49;
    llvm::rdf::CodeNode::addMember(v8, (uint64_t)v65, v66, a1);
    *((void *)v83 + v52) |= v51;
    goto LABEL_97;
  }
LABEL_106:
  if (v83 != v86) {
    free(v83);
  }
}

void llvm::rdf::DataFlowGraph::recordDefsForDF(llvm::rdf::DataFlowGraph *a1, uint64_t **a2, llvm::rdf::CodeNode *this)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 20);
  long long v4 = *(void **)(v3 + 256);
  if (v4)
  {
    unint64_t v7 = *((void *)this + 1);
    uint64_t v8 = (void *)(v3 + 256);
    int v9 = v8;
    do
    {
      unint64_t v10 = v4[4];
      BOOL v11 = v10 >= v7;
      if (v10 >= v7) {
        char v12 = v4;
      }
      else {
        char v12 = v4 + 1;
      }
      if (v11) {
        int v9 = v4;
      }
      long long v4 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v8 && v9[4] <= v7 && v9[7])
    {
      v63[0] = 0;
      v63[1] = 0;
      int v62 = v63;
      llvm::rdf::CodeNode::members((uint64_t)this, a1, (uint64_t)&v67);
      uint64_t v13 = (uint64_t *)v67;
      int v59 = a2;
      if (v68)
      {
        uint64_t v14 = (uint64_t *)((char *)v67 + 16 * v68);
        do
        {
          sub_1CC3F9160(*v13, (uint64_t (*)(uint64_t, void))sub_1CC3F9280, (uint64_t)a1, (uint64_t)&v64);
          uint64_t v15 = (llvm::rdf::RefNode **)v64;
          if (v65)
          {
            uint64_t v16 = 16 * v65;
            do
            {
              unint64_t v17 = *v15;
              v15 += 2;
              *(void *)&long long v61 = llvm::rdf::RefNode::getRegRef(v17, a1);
              *((void *)&v61 + 1) = v18;
              sub_1CC3FA3E0((uint64_t)&v62, v61, v18, &v61);
              v16 -= 16;
            }
            while (v16);
            uint64_t v15 = (llvm::rdf::RefNode **)v64;
          }
          if (v15 != (llvm::rdf::RefNode **)&v66) {
            free(v15);
          }
          v13 += 2;
        }
        while (v13 != v14);
        uint64_t v13 = (uint64_t *)v67;
      }
      if (v13 != (uint64_t *)&v69) {
        free(v13);
      }
      uint64_t v19 = (void *)v9[5];
      int v69 = 0;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      int v70 = 0;
      int v71 = 0;
      uint64_t v72 = 0;
      sub_1CC3F979C((uint64_t)&v67, v19, v9 + 6);
      unint64_t v21 = v70;
      int v20 = v71;
      if (v71 != v70)
      {
        uint64_t v22 = 0;
        unsigned int v23 = 0;
        do
        {
          uint64_t v24 = *((void *)a1 + 20);
          uint64_t v25 = *(void **)(v24 + 256);
          if (v25)
          {
            uint64_t v26 = v21[v22];
            int v27 = (void *)(v24 + 256);
            uint64_t v28 = v27;
            do
            {
              unint64_t v29 = v25[4];
              BOOL v30 = v29 >= (unint64_t)v26;
              if (v29 >= (unint64_t)v26) {
                BOOL v31 = v25;
              }
              else {
                BOOL v31 = v25 + 1;
              }
              if (v30) {
                uint64_t v28 = v25;
              }
              uint64_t v25 = (void *)*v31;
            }
            while (*v31);
            if (v28 != v27 && v28[4] <= (unint64_t)v26)
            {
              sub_1CC3F979C((uint64_t)&v67, (void *)v28[5], v28 + 6);
              unint64_t v21 = v70;
              int v20 = v71;
            }
          }
          uint64_t v22 = ++v23;
        }
        while (v23 < (unint64_t)(v20 - v21));
        if (v21 == v20)
        {
          int v20 = v21;
        }
        else
        {
          uint64_t v60 = (char *)a1 + 416;
          int v32 = (char **)(v59 + 1);
          do
          {
            __int16 v64 = *v21;
            unsigned int v33 = *((_DWORD *)sub_1CC3FA140((uint64_t)v60, (unint64_t *)&v64) + 2);
            __int16 v34 = *v32;
            int v35 = v59 + 1;
            __int16 v36 = (char *)(v59 + 1);
            if (*v32)
            {
              while (1)
              {
                while (1)
                {
                  __int16 v36 = v34;
                  unsigned int v37 = *((_DWORD *)v34 + 8);
                  if (v37 <= v33) {
                    break;
                  }
                  __int16 v34 = *(char **)v36;
                  int v35 = (uint64_t **)v36;
                  if (!*(void *)v36) {
                    goto LABEL_49;
                  }
                }
                if (v37 >= v33) {
                  break;
                }
                __int16 v34 = (char *)*((void *)v36 + 1);
                if (!v34)
                {
                  int v35 = (uint64_t **)(v36 + 8);
                  goto LABEL_49;
                }
              }
            }
            else
            {
LABEL_49:
              uint64_t v38 = v36;
              __int16 v36 = (char *)operator new(0x40uLL);
              *((_DWORD *)v36 + 8) = v33;
              *((void *)v36 + 7) = 0;
              *((void *)v36 + 6) = 0;
              *((void *)v36 + 5) = v36 + 48;
              *(void *)__int16 v36 = 0;
              *((void *)v36 + 1) = 0;
              *((void *)v36 + 2) = v38;
              *int v35 = (uint64_t *)v36;
              int v39 = (uint64_t *)**v59;
              int v40 = (uint64_t *)v36;
              if (v39)
              {
                *int v59 = v39;
                int v40 = *v35;
              }
              sub_1CB8358B8(v59[1], v40);
              v59[2] = (uint64_t *)((char *)v59[2] + 1);
            }
            uint64_t v41 = v62;
            if (v62 != v63)
            {
              uint64_t v42 = (void **)(v36 + 40);
              uint64_t v43 = v36 + 48;
              do
              {
                unsigned int v44 = *((_DWORD *)v41 + 8);
                int v45 = (void *)*v43;
                uint64_t v46 = v36 + 48;
                if (*v42 == v43) {
                  goto LABEL_60;
                }
                int v47 = (void *)*v43;
                uint64_t v48 = v36 + 48;
                if (v45)
                {
                  do
                  {
                    uint64_t v46 = v47;
                    int v47 = (void *)v47[1];
                  }
                  while (v47);
                }
                else
                {
                  do
                  {
                    uint64_t v46 = (void *)*((void *)v48 + 2);
                    BOOL v49 = *v46 == (void)v48;
                    uint64_t v48 = (char *)v46;
                  }
                  while (v49);
                }
                unsigned int v50 = *((_DWORD *)v46 + 8);
                if (v50 < v44 || (unint64_t v52 = (unint64_t)v41[5], v50 == v44) && v46[5] < v52)
                {
LABEL_60:
                  if (v45)
                  {
                    __int16 v64 = v46;
                    uint64_t v51 = (uint64_t **)(v46 + 1);
                  }
                  else
                  {
                    __int16 v64 = v36 + 48;
                    uint64_t v51 = (uint64_t **)(v36 + 48);
                  }
                }
                else
                {
                  uint64_t v51 = (uint64_t **)sub_1CC3FA480((uint64_t)(v36 + 40), &v64, v44, v52);
                }
                if (!*v51)
                {
                  uint64_t v53 = operator new(0x30uLL);
                  v53[2] = *((_OWORD *)v41 + 2);
                  uint64_t v54 = v64;
                  *(void *)uint64_t v53 = 0;
                  *((void *)v53 + 1) = 0;
                  *((void *)v53 + 2) = v54;
                  int *v51 = (uint64_t *)v53;
                  uint64_t v55 = (void *)**v42;
                  if (v55)
                  {
                    *uint64_t v42 = v55;
                    unsigned int v56 = *v51;
                  }
                  else
                  {
                    unsigned int v56 = (uint64_t *)v53;
                  }
                  sub_1CB8358B8(*((uint64_t **)v36 + 6), v56);
                  ++*((void *)v36 + 7);
                }
                uint64_t v57 = v41[1];
                if (v57)
                {
                  do
                  {
                    unint64_t v58 = (void **)v57;
                    uint64_t v57 = (void *)*v57;
                  }
                  while (v57);
                }
                else
                {
                  do
                  {
                    unint64_t v58 = (void **)v41[2];
                    BOOL v49 = *v58 == v41;
                    uint64_t v41 = v58;
                  }
                  while (!v49);
                }
                uint64_t v41 = v58;
              }
              while (v58 != v63);
            }
            ++v21;
          }
          while (v21 != v20);
          int v20 = v70;
        }
      }
      if (v20)
      {
        int v71 = v20;
        operator delete(v20);
      }
      MEMORY[0x1D25D9CD0](v67, 8);
      sub_1CBB0D544(v63[0]);
    }
  }
}

void llvm::rdf::DataFlowGraph::buildPhis(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, unsigned int a5)
{
  v121[8] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = v7;
  if (v7)
  {
    uint64_t v9 = v5;
    do
    {
      unsigned int v10 = *(_DWORD *)(v6 + 32);
      BOOL v11 = v10 >= a5;
      if (v10 >= a5) {
        char v12 = (uint64_t *)v6;
      }
      else {
        char v12 = (uint64_t *)(v6 + 8);
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      uint64_t v6 = *v12;
    }
    while (*v12);
    if (v9 != v5 && *(_DWORD *)(v9 + 32) <= a5 && *(void *)(v9 + 56))
    {
      v118[0] = 0;
      v118[1] = 0;
      uint64_t v117 = v118;
      uint64_t v13 = *(void **)(v9 + 40);
      uint64_t v14 = (void *)(v9 + 48);
      if (v13 == (void *)(v9 + 48)) {
        goto LABEL_76;
      }
      uint64_t v114 = a1 + 24;
      do
      {
        unint64_t v15 = v13[4];
        unint64_t v16 = v13[5];
        unint64_t v17 = HIDWORD(v15);
        unint64_t v18 = *(void **)(v9 + 40);
        if (v18 != v14)
        {
          do
          {
            unint64_t v19 = v18[4];
            unint64_t v20 = v18[5];
            BOOL v21 = v15 == v19 && v20 == v16;
            if (!v21 && sub_1CC3FA190(v18[4], v18[5], v15, v16, v114))
            {
              LODWORD(v15) = v19;
              unint64_t v17 = HIDWORD(v19);
              unint64_t v16 = v20;
            }
            uint64_t v22 = (void *)v18[1];
            if (v22)
            {
              do
              {
                unsigned int v23 = v22;
                uint64_t v22 = (void *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                unsigned int v23 = (void *)v18[2];
                BOOL v21 = *v23 == (void)v18;
                unint64_t v18 = v23;
              }
              while (!v21);
            }
            unint64_t v18 = v23;
          }
          while (v23 != v14);
        }
        *(void *)&long long v120 = v15 | (v17 << 32);
        *((void *)&v120 + 1) = v16;
        sub_1CC3FA3E0((uint64_t)&v117, v15, v16, &v120);
        uint64_t v24 = (void *)v13[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = v24;
            uint64_t v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v25 = (void *)v13[2];
            BOOL v21 = *v25 == (void)v13;
            uint64_t v13 = v25;
          }
          while (!v21);
        }
        uint64_t v13 = v25;
      }
      while (v25 != v14);
      uint64_t v26 = v117;
      if (v117 == v118)
      {
LABEL_76:
        unint64_t v29 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        int v27 = 0;
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        BOOL v30 = a3 + 1;
        do
        {
          unint64_t v111 = (unint64_t)v27;
          unsigned int v108 = v28;
          uint64_t v31 = v26[5];
          uint64_t v32 = v26[4];
          uint64_t v33 = HIDWORD(v26[4]);
          __int16 v34 = (void *)*a3;
          if ((void *)*a3 != v30)
          {
            do
            {
              unint64_t v36 = v34[4];
              uint64_t v35 = v34[5];
              if (v32 != v36 || v35 != v31)
              {
                int v38 = sub_1CC3FA190(v34[4], v34[5], v32, v31, v114);
                BOOL v30 = a3 + 1;
                if (v38)
                {
                  uint64_t v32 = v36;
                  uint64_t v33 = HIDWORD(v36);
                  uint64_t v31 = v35;
                }
              }
              int v39 = (void *)v34[1];
              if (v39)
              {
                do
                {
                  int v40 = v39;
                  int v39 = (void *)*v39;
                }
                while (v39);
              }
              else
              {
                do
                {
                  int v40 = (void *)v34[2];
                  BOOL v21 = *v40 == (void)v34;
                  __int16 v34 = v40;
                }
                while (!v21);
              }
              __int16 v34 = v40;
            }
            while (v40 != v30);
          }
          unint64_t v41 = v32 | (v33 << 32);
          int v27 = (char *)v111;
          if ((unint64_t)v108 >= v111)
          {
            uint64_t v42 = v108 - v29;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 60) {
LABEL_158:
            }
              abort();
            if ((uint64_t)(v111 - (void)v29) >> 3 > v43) {
              unint64_t v43 = (uint64_t)(v111 - (void)v29) >> 3;
            }
            if (v111 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v43;
            }
            if (v44)
            {
              if (v44 >> 60) {
LABEL_159:
              }
                sub_1CB833614();
              int v45 = (char *)operator new(16 * v44);
            }
            else
            {
              int v45 = 0;
            }
            uint64_t v46 = (__n128 *)&v45[16 * v42];
            v46->n128_u64[0] = v41;
            v46->n128_u64[1] = v31;
            int v47 = v108;
            if (v108 == v29)
            {
              BOOL v49 = v108;
              unint64_t v29 = (__n128 *)&v45[16 * v42];
            }
            else
            {
              uint64_t v48 = (__n128 *)&v45[16 * v42];
              do
              {
                v48[-1] = v47[-1];
                --v48;
                --v47;
              }
              while (v47 != v29);
              BOOL v49 = v29;
              unint64_t v29 = v48;
            }
            int v27 = &v45[16 * v44];
            uint64_t v28 = v46 + 1;
            if (v49) {
              operator delete(v49);
            }
            BOOL v30 = a3 + 1;
          }
          else
          {
            v108->n128_u64[0] = v41;
            v108->n128_u64[1] = v31;
            uint64_t v28 = v108 + 1;
          }
          unsigned int v50 = (void *)v26[1];
          if (v50)
          {
            do
            {
              uint64_t v51 = (void **)v50;
              unsigned int v50 = (void *)*v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              uint64_t v51 = (void **)v26[2];
              BOOL v21 = *v51 == v26;
              uint64_t v26 = v51;
            }
            while (!v21);
          }
          uint64_t v26 = v51;
        }
        while (v51 != v118);
      }
      unint64_t v52 = v28 - v29;
      unint64_t v53 = 126 - 2 * __clz(v52);
      if (v28 == v29) {
        uint64_t v54 = 0;
      }
      else {
        uint64_t v54 = v53;
      }
      sub_1CC3FA914(v29, v28, (uint64_t)&v120, v54, 1);
      if (v28 != v29)
      {
        uint64_t v55 = v29 - 1;
        while (&v55[2] != v28)
        {
          unsigned __int32 v56 = v55[1].n128_u32[0];
          ++v55;
          if (v56 == v55[1].n128_u32[0] && v55->n128_u64[1] == v55[1].n128_u64[1])
          {
            for (uint64_t i = v55 + 2; i != v28; ++i)
            {
              if (v55->n128_u32[0] != i->n128_u32[0] || v55->n128_u64[1] != i->n128_u64[1])
              {
                v55[1] = *i;
                ++v55;
              }
            }
            uint64_t v60 = v55 + 1;
            unint64_t v52 = v60 - v29;
            goto LABEL_98;
          }
        }
      }
      uint64_t v60 = v28;
LABEL_98:
      long long v61 = (char *)((char *)v28 - (char *)v60);
      if (v61)
      {
        int v62 = &v29[v52];
        size_t v63 = (char *)v28 - &v61[(void)v62];
        if (v63) {
          memmove(&v29[v52], &v61[(void)v62], v63);
        }
        __int16 v64 = (__n128 *)((char *)v62 + v63);
      }
      else
      {
        __int16 v64 = v28;
      }
      *(void *)&long long v120 = v121;
      *((void *)&v120 + 1) = 0x400000000;
      uint64_t v65 = *(void *)(a4 + 8);
      uint64_t v66 = *(unint64_t **)(v65 + 64);
      for (uint64_t j = *(unint64_t **)(v65 + 72); v66 != j; ++v66)
      {
        unint64_t v119 = *v66;
        uint64_t v68 = sub_1CC3FA140(a1 + 416, &v119);
        uint64_t v69 = *((unsigned int *)v68 + 2);
        if (DWORD2(v120) >= (unint64_t)HIDWORD(v120)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v70 = (void *)(v120 + 16 * DWORD2(v120));
        *int v70 = *v68;
        v70[1] = v69;
        ++DWORD2(v120);
      }
      if (v29 != v64)
      {
        unsigned int k = v64;
        uint64_t v72 = (void *)(a1 + 24);
        do
        {
          uint64_t v73 = (unsigned int *)operator new(4uLL);
          unint64_t v74 = v73;
          *uint64_t v73 = 0;
          int v75 = v73 + 1;
          uint64_t v109 = k;
          if ((char *)k - (char *)v29 != 16)
          {
            int v112 = (char *)(v73 + 1);
            uint64_t v115 = k - v29;
            uint64_t v76 = 1;
            do
            {
              if (v74 == v75)
              {
                unint64_t v74 = v75;
              }
              else
              {
                unint64_t v77 = &v29[v76];
                unint64_t v78 = v77->n128_u64[0];
                uint64_t v79 = v77->n128_i64[1];
                uint64_t v80 = v74;
                while (!sub_1CC3F83B8(v72, v78, v79, v29[*v80].n128_u64[0], v29[*v80].n128_i64[1]))
                {
                  if (++v80 == v75) {
                    goto LABEL_135;
                  }
                }
                if (v75 >= (unsigned int *)v112)
                {
                  uint64_t v81 = v75 - v74;
                  unint64_t v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 62) {
                    goto LABEL_158;
                  }
                  if ((v112 - (char *)v74) >> 1 > v82) {
                    unint64_t v82 = (v112 - (char *)v74) >> 1;
                  }
                  if ((unint64_t)(v112 - (char *)v74) >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v82;
                  }
                  if (v83)
                  {
                    if (v83 >> 62) {
                      goto LABEL_159;
                    }
                    unsigned int v84 = (char *)operator new(4 * v83);
                  }
                  else
                  {
                    unsigned int v84 = 0;
                  }
                  int v85 = &v84[4 * v81];
                  *(_DWORD *)int v85 = v76;
                  uint64_t v86 = (unsigned int *)v85;
                  do
                  {
                    unsigned int v87 = *--v75;
                    *--uint64_t v86 = v87;
                  }
                  while (v75 != v74);
                  int v112 = &v84[4 * v83];
                  int v75 = (unsigned int *)(v85 + 4);
                  if (v74) {
                    operator delete(v74);
                  }
                  unint64_t v74 = v86;
                  uint64_t v72 = (void *)(a1 + 24);
                }
                else
                {
                  *v75++ = v76;
                }
              }
LABEL_135:
              uint64_t v76 = (v76 + 1);
            }
            while (v115 != v76);
          }
          char v88 = (_OWORD *)llvm::rdf::NodeAllocator::New(a1 + 272);
          *char v88 = 0u;
          v88[1] = 0u;
          *(_WORD *)char v88 = 13;
          llvm::rdf::BlockNode::addPhi(a4, (uint64_t)v88, v89, a1);
          uint64_t v116 = ((char *)v75 - (char *)v74) & 0x3FFFFFFFCLL;
          if (v116)
          {
            long long v92 = v74;
            uint64_t v93 = ((unint64_t)((char *)v75 - (char *)v74) >> 2);
            do
            {
              int v94 = *v92++;
              uint64_t v95 = llvm::rdf::DataFlowGraph::newDef(a1, v90, v91, v29[v94].n128_u64[0], v29[v94].n128_i64[1], 384);
              llvm::rdf::CodeNode::addMember((unint64_t)v88, v95, v96, a1);
              --v93;
            }
            while (v93);
          }
          if (DWORD2(v120))
          {
            uint64_t v97 = v120;
            uint64_t v113 = v120 + 16 * DWORD2(v120);
            do
            {
              int v98 = *(_DWORD *)(v97 + 8);
              if (v116)
              {
                uint64_t v99 = *(void *)v97;
                __int16 v100 = v74;
                uint64_t v101 = ((unint64_t)((char *)v75 - (char *)v74) >> 2);
                do
                {
                  int v102 = *v100++;
                  uint64_t v103 = llvm::rdf::DataFlowGraph::newPhiUse(a1, v90, v91, v29[v102].n128_u64[0], v29[v102].n128_i64[1], v99, v98, 128);
                  llvm::rdf::CodeNode::addMember((unint64_t)v88, v103, v104, a1);
                  --v101;
                }
                while (v101);
              }
              v97 += 16;
            }
            while (v97 != v113);
          }
          for (unsigned int k = v109; v75 != v74; --k)
          {
            int v105 = *--v75;
            uint64_t v106 = &v29[v105];
            if (k != &v106[1]) {
              memmove(v106, &v106[1], (char *)k - (char *)&v106[1]);
            }
          }
          if (v74) {
            operator delete(v74);
          }
          uint64_t v72 = (void *)(a1 + 24);
        }
        while (v29 != k);
      }
      if ((void *)v120 != v121) {
        free((void *)v120);
      }
      if (v29) {
        operator delete(v29);
      }
      sub_1CBB0D544(v118[0]);
    }
  }
}

void llvm::rdf::DataFlowGraph::linkBlockRefs(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  v119[8] = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (void *)a2[2]; i; uint64_t i = (void *)*i)
  {
    uint64_t v9 = (char *)i[4];
    unint64_t v8 = i[5];
    if ((unint64_t)v9 >= v8)
    {
      BOOL v11 = (char *)i[3];
      uint64_t v12 = (v9 - v11) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        abort();
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 60) {
          sub_1CB833614();
        }
        unint64_t v16 = (char *)operator new(16 * v15);
      }
      else
      {
        unint64_t v16 = 0;
      }
      unint64_t v17 = &v16[16 * v12];
      *(void *)unint64_t v17 = 0;
      *((_DWORD *)v17 + 2) = a4;
      unint64_t v18 = v17;
      if (v9 != v11)
      {
        do
        {
          uint64_t v19 = *((void *)v9 - 2);
          v9 -= 16;
          int v20 = *((_DWORD *)v9 + 2);
          *((void *)v18 - 2) = v19;
          v18 -= 16;
          *((_DWORD *)v18 + 2) = v20;
        }
        while (v9 != v11);
        uint64_t v9 = (char *)i[3];
      }
      unsigned int v10 = v17 + 16;
      i[3] = v18;
      i[4] = v17 + 16;
      i[5] = &v16[16 * v15];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)uint64_t v9 = 0;
      *((_DWORD *)v9 + 2) = a4;
      unsigned int v10 = v9 + 16;
    }
    i[4] = v10;
  }
  unint64_t v21 = (unint64_t)&v114;
  uint64_t v22 = a3;
  llvm::rdf::CodeNode::members(a3, (const llvm::rdf::DataFlowGraph *)a1, (uint64_t)&v114);
  unsigned int v23 = (char *)v114;
  if (v115)
  {
    uint64_t v101 = (char *)v114 + 16 * v115;
    do
    {
      uint64_t v24 = *(_WORD **)v23;
      uint64_t v25 = *((unsigned int *)v23 + 2);
      if ((**(_WORD **)v23 & 0x1C) == 0x10)
      {
        unint64_t v108 = v21;
        sub_1CC3F9160((uint64_t)v24, (uint64_t (*)(uint64_t, void))sub_1CC3F9998, a1, (uint64_t)&v117);
        uint64_t v26 = (llvm::rdf::RefNode **)v117;
        if (v118)
        {
          int v104 = v23;
          int v27 = (llvm::rdf::RefNode **)((char *)v117 + 16 * v118);
          do
          {
            uint64_t v28 = *v26;
            unsigned int v29 = *((_DWORD *)v26 + 2);
            __int16 v30 = *(_WORD *)*v26;
            unsigned int RegRef = llvm::rdf::RefNode::getRegRef(*v26, (const llvm::rdf::DataFlowGraph *)a1);
            uint64_t v32 = sub_1CC3FBC74(*a2, a2[1], RegRef);
            if (v32)
            {
              uint64_t v33 = v32 + 3;
              if ((v30 & 0x1C) == 8) {
                sub_1CC3F99AC((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v24, v25, v28, v29, v33);
              }
              else {
                sub_1CC3FBA04((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v24, v25, v28, v29, v33);
              }
            }
            v26 += 2;
          }
          while (v26 != v27);
          uint64_t v26 = (llvm::rdf::RefNode **)v117;
          unsigned int v23 = v104;
        }
        if (v26 != v119) {
          free(v26);
        }
        uint64_t v117 = v119;
        uint64_t v118 = 0x400000000;
        unsigned int v34 = *((_DWORD *)v24 + 4);
        if (v34)
        {
          uint64_t v35 = *(void *)(*(void *)(a1 + 296) + 8 * ((v34 - 1) >> *(_DWORD *)(a1 + 276)))
              + 32 * (*(_DWORD *)(a1 + 280) & (v34 - 1));
          if ((_WORD *)v35 != v24)
          {
            unsigned int v36 = 0;
            do
            {
              if ((*(_WORD *)v35 & 0x5F) == 0x46)
              {
                if (v36 >= HIDWORD(v118)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v37 = (char *)v117 + 16 * v36;
                *unsigned int v37 = v35;
                v37[1] = v34;
                unsigned int v36 = v118 + 1;
                LODWORD(v118) = v118 + 1;
              }
              unsigned int v34 = *(_DWORD *)(v35 + 4);
              if (v34) {
                uint64_t v35 = *(void *)(*(void *)(a1 + 296) + 8 * ((v34 - 1) >> *(_DWORD *)(a1 + 276)))
              }
                    + 32 * (*(_DWORD *)(a1 + 280) & (v34 - 1));
              else {
                uint64_t v35 = 0;
              }
            }
            while ((_WORD *)v35 != v24);
            int v38 = (llvm::rdf::RefNode **)v117;
            if (v36)
            {
              int v105 = v23;
              int v39 = (llvm::rdf::RefNode **)((char *)v117 + 16 * v36);
              do
              {
                int v40 = *v38;
                unsigned int v41 = *((_DWORD *)v38 + 2);
                __int16 v42 = *(_WORD *)*v38;
                unsigned int v43 = llvm::rdf::RefNode::getRegRef(*v38, (const llvm::rdf::DataFlowGraph *)a1);
                unint64_t v44 = sub_1CC3FBC74(*a2, a2[1], v43);
                if (v44)
                {
                  int v45 = v44 + 3;
                  if ((v42 & 0x1C) == 8) {
                    sub_1CC3F99AC((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v24, v25, v40, v41, v45);
                  }
                  else {
                    sub_1CC3FBA04((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v24, v25, v40, v41, v45);
                  }
                }
                v38 += 2;
              }
              while (v38 != v39);
              int v38 = (llvm::rdf::RefNode **)v117;
              unsigned int v23 = v105;
            }
            if (v38 != v119) {
              free(v38);
            }
          }
        }
        unint64_t v21 = v108;
      }
      unint64_t v21 = v21 & 0xFFFFFFFF00000000 | v25;
      llvm::rdf::DataFlowGraph::pushClobbers(a1, v24, v21, a2);
      if ((*v24 & 0x1C) == 0x10)
      {
        unint64_t v109 = v21;
        uint64_t v117 = v119;
        uint64_t v118 = 0x400000000;
        unsigned int v46 = *((_DWORD *)v24 + 4);
        if (v46)
        {
          uint64_t v47 = *(void *)(*(void *)(a1 + 296) + 8 * ((v46 - 1) >> *(_DWORD *)(a1 + 276)))
              + 32 * (*(_DWORD *)(a1 + 280) & (v46 - 1));
          if ((_WORD *)v47 != v24)
          {
            unsigned int v48 = 0;
            do
            {
              if ((*(_WORD *)v47 & 0x5F) == 6)
              {
                if (v48 >= HIDWORD(v118)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                BOOL v49 = (char *)v117 + 16 * v48;
                *BOOL v49 = v47;
                v49[1] = v46;
                unsigned int v48 = v118 + 1;
                LODWORD(v118) = v118 + 1;
              }
              unsigned int v46 = *(_DWORD *)(v47 + 4);
              if (v46) {
                uint64_t v47 = *(void *)(*(void *)(a1 + 296) + 8 * ((v46 - 1) >> *(_DWORD *)(a1 + 276)))
              }
                    + 32 * (*(_DWORD *)(a1 + 280) & (v46 - 1));
              else {
                uint64_t v47 = 0;
              }
            }
            while ((_WORD *)v47 != v24);
            unsigned int v50 = (llvm::rdf::RefNode **)v117;
            if (v48)
            {
              uint64_t v106 = v23;
              uint64_t v51 = (llvm::rdf::RefNode **)((char *)v117 + 16 * v48);
              do
              {
                unint64_t v52 = *v50;
                unsigned int v53 = *((_DWORD *)v50 + 2);
                __int16 v54 = *(_WORD *)*v50;
                unsigned int v55 = llvm::rdf::RefNode::getRegRef(*v50, (const llvm::rdf::DataFlowGraph *)a1);
                unsigned __int32 v56 = sub_1CC3FBC74(*a2, a2[1], v55);
                if (v56)
                {
                  uint64_t v57 = v56 + 3;
                  if ((v54 & 0x1C) == 8) {
                    sub_1CC3F99AC((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v24, v25, v52, v53, v57);
                  }
                  else {
                    sub_1CC3FBA04((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v24, v25, v52, v53, v57);
                  }
                }
                v50 += 2;
              }
              while (v50 != v51);
              unsigned int v50 = (llvm::rdf::RefNode **)v117;
              unsigned int v23 = v106;
            }
            if (v50 != v119) {
              free(v50);
            }
          }
        }
        unint64_t v21 = v109;
      }
      llvm::rdf::DataFlowGraph::pushDefs(a1, v24, v21, a2);
      v23 += 16;
    }
    while (v23 != v101);
    unsigned int v23 = (char *)v114;
    uint64_t v22 = a3;
  }
  if (v23 != v116) {
    free(v23);
  }
  uint64_t v58 = *(void *)(a1 + 152);
  uint64_t v59 = *(void *)(v22 + 8);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v58);
  uint64_t v60 = *(void *)(v58 + 1320);
  uint64_t v61 = *(void *)(v60 + 24);
  uint64_t v62 = *(unsigned int *)(v60 + 40);
  if (v62)
  {
    LODWORD(v63) = (v62 - 1) & ((v59 >> 4) ^ (v59 >> 9));
    __int16 v64 = (uint64_t *)(v61 + 16 * v63);
    uint64_t v65 = *v64;
    if (*v64 == v59) {
      goto LABEL_91;
    }
    int v66 = 1;
    while (v65 != -4096)
    {
      int v67 = v63 + v66++;
      uint64_t v63 = v67 & (v62 - 1);
      uint64_t v65 = *(void *)(v61 + 16 * v63);
      if (v65 == v59)
      {
        __int16 v64 = (uint64_t *)(v61 + 16 * v63);
        goto LABEL_91;
      }
    }
  }
  __int16 v64 = (uint64_t *)(v61 + 16 * v62);
LABEL_91:
  uint64_t v68 = v64[1];
  uint64_t v69 = *(unsigned int *)(v68 + 32);
  if (v69)
  {
    int v70 = *(void ****)(v68 + 24);
    uint64_t v71 = 8 * v69;
    do
    {
      uint64_t v72 = *v70++;
      uint64_t v117 = *v72;
      uint64_t v73 = sub_1CC3FA140(a1 + 416, (unint64_t *)&v117);
      llvm::rdf::DataFlowGraph::linkBlockRefs(a1, a2, *v73, v73[1]);
      v71 -= 8;
    }
    while (v71);
  }
  unsigned int LandingPadLiveIns = llvm::rdf::DataFlowGraph::getLandingPadLiveIns((uint64_t **)a1, &v112);
  uint64_t v75 = *(void *)(v22 + 8);
  uint64_t v76 = *(void ***)(v75 + 88);
  __int16 v100 = *(void ***)(v75 + 96);
  if (v76 != v100)
  {
    unint64_t v77 = v116;
    int v103 = a4;
    do
    {
      int v102 = v76;
      int v78 = *((unsigned __int8 *)*v76 + 184);
      uint64_t v117 = *v76;
      uint64_t v79 = sub_1CC3FA140(a1 + 416, (unint64_t *)&v117);
      unsigned int LandingPadLiveIns = sub_1CC3F9160(*v79, (uint64_t (*)(uint64_t, void))sub_1CC3F9984, a1, (uint64_t)&v117);
      uint64_t v80 = (char *)v117;
      unsigned __int16 v110 = (char *)v117 + 16 * v118;
      int v107 = v78;
      if (v118)
      {
        do
        {
          uint64_t v81 = *(void *)v80;
          int v82 = *((_DWORD *)v80 + 2);
          unsigned int v83 = *(_DWORD *)(*(void *)v80 + 16);
          if (v78)
          {
            unsigned int v84 = v83
                ? (llvm::rdf::RefNode *)(*(void *)(*(void *)(a1 + 296) + 8 * ((v83 - 1) >> *(_DWORD *)(a1 + 276)))
                                       + 32 * (*(_DWORD *)(a1 + 280) & (v83 - 1)))
                : 0;
            unsigned int LandingPadLiveIns = llvm::rdf::RefNode::getRegRef(v84, (const llvm::rdf::DataFlowGraph *)a1);
            for (uint64_t j = v113; j; uint64_t j = (void *)*j)
            {
              unsigned int v87 = *((_DWORD *)j + 8);
              if (v87 <= LandingPadLiveIns)
              {
                if (v87 != LandingPadLiveIns)
                {
                  if (v87 >= LandingPadLiveIns) {
                    goto LABEL_129;
                  }
                  goto LABEL_108;
                }
                unint64_t v88 = j[5];
                if (v85 >= v88)
                {
                  if (v88 >= v85) {
                    goto LABEL_129;
                  }
LABEL_108:
                  ++j;
                }
              }
            }
          }
          uint64_t v114 = v77;
          uint64_t v115 = 0x400000000;
          if (v83)
          {
            uint64_t v89 = *(void *)(*(void *)(a1 + 296) + 8 * ((v83 - 1) >> *(_DWORD *)(a1 + 276)))
                + 32 * (*(_DWORD *)(a1 + 280) & (v83 - 1));
            if (v81 != v89)
            {
              unsigned int v90 = 0;
              do
              {
                if ((*(_WORD *)v89 & 0x1C) == 8 && *(_DWORD *)(v89 + 16) == a4)
                {
                  if (v90 >= HIDWORD(v115)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v91 = (char *)v114 + 16 * v90;
                  *uint64_t v91 = v89;
                  v91[1] = v83;
                  unsigned int v90 = v115 + 1;
                  LODWORD(v115) = v115 + 1;
                }
                unsigned int v83 = *(_DWORD *)(v89 + 4);
                if (v83) {
                  uint64_t v89 = *(void *)(*(void *)(a1 + 296) + 8 * ((v83 - 1) >> *(_DWORD *)(a1 + 276)))
                }
                      + 32 * (*(_DWORD *)(a1 + 280) & (v83 - 1));
                else {
                  uint64_t v89 = 0;
                }
              }
              while (v81 != v89);
              long long v92 = (char *)v114;
              if (v90)
              {
                uint64_t v93 = v77;
                int v94 = (char *)v114 + 16 * v90;
                do
                {
                  uint64_t v95 = *(llvm::rdf::RefNode **)v92;
                  unsigned int v96 = *((_DWORD *)v92 + 2);
                  v111[0] = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v92, (const llvm::rdf::DataFlowGraph *)a1);
                  v111[1] = v97;
                  int v98 = sub_1CC3FA530(a2, v111[0], v111);
                  sub_1CC3F99AC((llvm::rdf::DataFlowGraph *)a1, v81, v82, v95, v96, v98 + 3);
                  v92 += 16;
                }
                while (v92 != v94);
                long long v92 = (char *)v114;
                unint64_t v77 = v93;
                a4 = v103;
                int v78 = v107;
              }
              if (v92 != v77) {
                free(v92);
              }
            }
          }
LABEL_129:
          v80 += 16;
        }
        while (v80 != v110);
        uint64_t v80 = (char *)v117;
      }
      if (v80 != (char *)v119) {
        free(v80);
      }
      uint64_t v76 = v102 + 1;
    }
    while (v102 + 1 != v100);
  }
  llvm::rdf::DataFlowGraph::releaseBlock(LandingPadLiveIns, a4, a2);
  sub_1CBB0D544(v113);
}

uint64_t llvm::rdf::DataFlowGraph::removeUnusedPhis(llvm::rdf::DataFlowGraph *this)
{
  v37[8] = *MEMORY[0x1E4F143B8];
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  __int16 v30 = 0;
  uint64_t v31 = 0;
  unsigned int v29 = 0;
  llvm::rdf::CodeNode::members(*((void *)this + 32), this, (uint64_t)&v35);
  unint64_t v2 = (uint64_t *)v35;
  if (v36)
  {
    uint64_t v3 = (uint64_t *)((char *)v35 + 16 * v36);
    do
    {
      sub_1CC3F9160(*v2, (uint64_t (*)(uint64_t, void))sub_1CC3F9984, (uint64_t)this, (uint64_t)&v32);
      long long v4 = v32;
      if (__c[0])
      {
        uint64_t v5 = 16 * __c[0];
        do
        {
          long long v6 = *(_OWORD *)v4;
          long long v4 = (llvm::rdf::InstrNode *)((char *)v4 + 16);
          v26[0] = *((void *)&v6 + 1);
          sub_1CBB29A9C((uint64_t)v27, (int *)v26);
          v5 -= 16;
        }
        while (v5);
        long long v4 = v32;
      }
      if (v4 != (llvm::rdf::InstrNode *)&v34) {
        free(v4);
      }
      v2 += 2;
    }
    while (v2 != v3);
    unint64_t v2 = (uint64_t *)v35;
  }
  if (v2 != v37) {
    free(v2);
  }
  for (uint64_t i = v29; v29 != v30; uint64_t i = v29)
  {
    uint64_t v8 = *i;
    if (v8) {
      uint64_t v9 = (llvm::rdf::InstrNode *)(*(void *)(*((void *)this + 37)
    }
                                              + 8 * ((v8 - 1) >> *((_DWORD *)this + 69)))
                                  + 32 * (*((_DWORD *)this + 70) & (v8 - 1)));
    else {
      uint64_t v9 = 0;
    }
    uint64_t v32 = v9;
    *(void *)__c = v8;
    if (sub_1CD48A5AC(v27, __c))
    {
      unsigned int v10 = v30;
      BOOL v11 = wmemchr(v29, __c[0], v30 - v29);
      if (v11) {
        unsigned int v10 = v11;
      }
      uint64_t v12 = (char *)((char *)v30 - (char *)(v10 + 1));
      if (v30 != v10 + 1) {
        memmove(v10, v10 + 1, (char *)v30 - (char *)(v10 + 1));
      }
      __int16 v30 = (__int32 *)&v12[(void)v10];
    }
    llvm::rdf::CodeNode::members((uint64_t)v32, this, (uint64_t)&v35);
    if (v36)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (char *)v35;
      unint64_t v15 = (char *)v35 + 16 * v36;
      while (1)
      {
        uint64_t v16 = *(void *)((char *)v35 + v13);
        if ((*(_WORD *)v16 & 0x1C) == 4 && (*(_DWORD *)(v16 + 16) || *(_DWORD *)(v16 + 20))) {
          break;
        }
        v13 += 16;
        if (16 * v36 == v13)
        {
          do
          {
            unint64_t v17 = *(llvm::rdf::RefNode **)v14;
            int v18 = *((_DWORD *)v14 + 2);
            int v19 = *(_DWORD *)(*(void *)v14 + 8);
            if (v19)
            {
              Owner = (_WORD *)llvm::rdf::RefNode::getOwner((llvm::rdf::RefNode *)(*(void *)(*((void *)this + 37)+ 8* ((v19 - 1) >> *((_DWORD *)this + 69)))+ 32 * (*((_DWORD *)this + 70) & (v19 - 1))), this);
              LODWORD(v26[0]) = v20;
              if ((*Owner & 0x1F) == 0xD) {
                sub_1CBB29A9C((uint64_t)v27, (int *)v26);
              }
            }
            if ((*(_WORD *)v17 & 0x1C) == 4) {
              llvm::rdf::DataFlowGraph::unlinkDefDF((uint64_t)this, v17, v18);
            }
            else {
              llvm::rdf::DataFlowGraph::unlinkUseDF((uint64_t)this, (uint64_t)v17, v18);
            }
            uint64_t v21 = llvm::rdf::RefNode::getOwner(v17, this);
            llvm::rdf::CodeNode::removeMember(v21, (uint64_t)v17, v18, (uint64_t)this);
            v14 += 16;
          }
          while (v14 != v15);
          goto LABEL_36;
        }
      }
    }
    else
    {
LABEL_36:
      uint64_t v22 = v32;
      uint64_t v23 = llvm::rdf::InstrNode::getOwner(v32, this);
      llvm::rdf::CodeNode::removeMember(v23, (uint64_t)v22, __c[0], (uint64_t)this);
      uint64_t v14 = (char *)v35;
    }
    if (v14 != (char *)v37) {
      free(v14);
    }
  }
  if (i)
  {
    __int16 v30 = i;
    operator delete(i);
  }
  return MEMORY[0x1D25D9CD0](*(void *)v27, 4);
}

uint64_t llvm::rdf::DataFlowGraph::makeRegRef(llvm::rdf::DataFlowGraph *this, unsigned int a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    uint64_t v4 = v3[1];
    uint64_t v5 = v3[7];
    uint64_t v6 = *(unsigned int *)(v4 + 24 * a2 + 4);
    if (*(_WORD *)(v5 + 2 * v6))
    {
      unsigned __int16 v7 = *(_WORD *)(v5 + 2 * v6) + a2;
      uint64_t v8 = (unsigned __int16 *)(v3[11] + 2 * *(unsigned int *)(v4 + 24 * a2 + 12));
      uint64_t v9 = (unsigned __int16 *)(v5 + 2 * v6 + 2);
      while (*v8 != a3)
      {
        a2 = 0;
        int v10 = *v9++;
        v7 += v10;
        ++v8;
        if (!v10) {
          return a2;
        }
      }
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

unint64_t llvm::rdf::DataFlowGraph::restrictRef(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a2 == a4)
  {
    unint64_t v6 = 0;
    if ((a5 & a3) != 0) {
      unsigned int v7 = a2;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  else
  {
    int v8 = sub_1CC3F83B8((void *)(a1 + 24), a2, a3, a4, a5);
    unint64_t v6 = a2 & 0xFFFFFFFF00000000;
    if (v8)
    {
      unsigned int v7 = a2;
    }
    else
    {
      unint64_t v6 = 0;
      unsigned int v7 = 0;
    }
  }
  return v7 | v6;
}

uint64_t sub_1CC3F83B8(void *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5 = a2;
  if (a2 > 0x3FFFFFFF)
  {
    if (a4 > 0x3FFFFFFF) {
      return llvm::rdf::PhysicalRegisterInfo::aliasMM(a1, a2, a3, a4);
    }
    a2 = a4;
    a3 = a5;
    a4 = v5;
    return llvm::rdf::PhysicalRegisterInfo::aliasRM(a1, a2, a3, a4);
  }
  if (a4 > 0x3FFFFFFF) {
    return llvm::rdf::PhysicalRegisterInfo::aliasRM(a1, a2, a3, a4);
  }
  return llvm::rdf::PhysicalRegisterInfo::aliasRR(a1, a2, a3, a4, a5);
}

void llvm::rdf::DataFlowGraph::markBlock(uint64_t a1, int a2, uint64_t a3)
{
  for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = (char *)i[4];
    unint64_t v5 = i[5];
    if ((unint64_t)v6 >= v5)
    {
      int v8 = (char *)i[3];
      uint64_t v9 = (v6 - v8) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 60) {
          sub_1CB833614();
        }
        uint64_t v13 = (char *)operator new(16 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[16 * v9];
      *(void *)uint64_t v14 = 0;
      *((_DWORD *)v14 + 2) = a2;
      unint64_t v15 = v14;
      if (v6 != v8)
      {
        do
        {
          uint64_t v16 = *((void *)v6 - 2);
          v6 -= 16;
          int v17 = *((_DWORD *)v6 + 2);
          *((void *)v15 - 2) = v16;
          v15 -= 16;
          *((_DWORD *)v15 + 2) = v17;
        }
        while (v6 != v8);
        unint64_t v6 = (char *)i[3];
      }
      unsigned int v7 = v14 + 16;
      i[3] = v15;
      i[4] = v14 + 16;
      i[5] = &v13[16 * v12];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(void *)unint64_t v6 = 0;
      *((_DWORD *)v6 + 2) = a2;
      unsigned int v7 = v6 + 16;
    }
    i[4] = v7;
  }
}

void llvm::rdf::DataFlowGraph::releaseBlock(int a1, int a2, void *a3)
{
  uint64_t v3 = (void **)(a3 + 2);
  uint64_t v4 = (void *)a3[2];
  if (v4)
  {
    do
    {
      llvm::rdf::DataFlowGraph::DefStack::clear_block((llvm::rdf::DataFlowGraph::DefStack *)(v4 + 3), a2);
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
    unsigned int v7 = *v3;
    if (*v3)
    {
      do
      {
        int v8 = (void *)*v7;
        uint64_t v9 = v7[3];
        uint64_t v10 = v7[4];
        if (v9 != v10)
        {
          uint64_t v11 = v10 - v9;
          uint64_t v12 = v9 - 16;
          uint64_t v13 = v11 & 0xFFFFFFFF0;
          while (v13)
          {
            uint64_t v14 = *(void *)(v12 + v13);
            v13 -= 16;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
        int8x8_t v15 = (int8x8_t)a3[1];
        unint64_t v16 = v7[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(v15);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&v15) {
            v16 %= *(void *)&v15;
          }
        }
        else
        {
          v16 &= *(void *)&v15 - 1;
        }
        int v18 = *(void **)(*a3 + 8 * v16);
        do
        {
          int v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18 != v7);
        if (v19 == v3) {
          goto LABEL_42;
        }
        unint64_t v20 = v19[1];
        if (v17.u32[0] > 1uLL)
        {
          if (v20 >= *(void *)&v15) {
            v20 %= *(void *)&v15;
          }
        }
        else
        {
          v20 &= *(void *)&v15 - 1;
        }
        uint64_t v21 = (void *)*v7;
        if (v20 != v16)
        {
LABEL_42:
          if (v8)
          {
            unint64_t v22 = v8[1];
            if (v17.u32[0] > 1uLL)
            {
              unint64_t v23 = v8[1];
              if (v22 >= *(void *)&v15) {
                unint64_t v23 = v22 % *(void *)&v15;
              }
            }
            else
            {
              unint64_t v23 = v22 & (*(void *)&v15 - 1);
            }
            uint64_t v21 = (void *)*v7;
            if (v23 == v16) {
              goto LABEL_30;
            }
          }
          *(void *)(*a3 + 8 * v16) = 0;
          uint64_t v21 = (void *)*v7;
        }
        if (!v21) {
          goto LABEL_36;
        }
        unint64_t v22 = v21[1];
LABEL_30:
        if (v17.u32[0] > 1uLL)
        {
          if (v22 >= *(void *)&v15) {
            v22 %= *(void *)&v15;
          }
        }
        else
        {
          v22 &= *(void *)&v15 - 1;
        }
        if (v22 != v16)
        {
          *(void *)(*a3 + 8 * v22) = v19;
          uint64_t v21 = (void *)*v7;
        }
LABEL_36:
        *int v19 = v21;
        *unsigned int v7 = 0;
        --a3[3];
        uint64_t v24 = (void *)v7[3];
        if (v24)
        {
          v7[4] = v24;
          operator delete(v24);
        }
        operator delete(v7);
LABEL_39:
        unsigned int v7 = v8;
      }
      while (v8);
    }
  }
}

void llvm::rdf::DataFlowGraph::pushAllDefs(uint64_t a1, _WORD *a2, int a3, uint64_t *a4)
{
  llvm::rdf::DataFlowGraph::pushClobbers(a1, a2, a3, a4);

  llvm::rdf::DataFlowGraph::pushDefs(a1, a2, a3, a4);
}

void llvm::rdf::DataFlowGraph::pushClobbers(uint64_t a1, _WORD *a2, int a3, uint64_t *a4)
{
  v92[8] = *MEMORY[0x1E4F143B8];
  unint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v83 = 0;
  unsigned int v84 = &v85;
  uint64_t v81 = &v82;
  int v82 = 0;
  sub_1CC3F9160((uint64_t)a2, (uint64_t (*)(uint64_t, void))sub_1CC3F9280, a1, (uint64_t)&v90);
  unint64_t v6 = v90;
  if (v91)
  {
    uint64_t v69 = (llvm::rdf::PhysicalRegisterInfo *)(a1 + 24);
    int v70 = (llvm::rdf::DataFlowGraph *)a1;
    unsigned int v7 = &v78;
    unint64_t v74 = (llvm::rdf::RefNode **)&v90[2 * v91];
    int v8 = (llvm::rdf::RefNode **)v90;
    do
    {
      uint64_t v9 = *v8;
      uint64_t v10 = *((unsigned int *)v8 + 2);
      unint64_t v75 = v75 & 0xFFFFFFFF00000000 | v10;
      for (uint64_t i = v85; i; uint64_t i = (uint64_t *)*i)
      {
        unsigned int v12 = *((_DWORD *)i + 7);
        if (v10 >= v12)
        {
          if (v12 >= v10) {
            goto LABEL_80;
          }
          ++i;
        }
      }
      if ((*(_WORD *)v9 & 0x40) != 0)
      {
        llvm::rdf::DataFlowGraph::getRelatedRefs(v70, v9, a2, a3, v10, (uint64_t)&v87);
        *(void *)uint64_t v79 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v87, v70);
        uint64_t v80 = v13;
        uint64_t v14 = sub_1CC3FA530(a4, v79[0], v79);
        int8x8_t v15 = v14;
        uint8x8_t v17 = (char *)v14[4];
        unint64_t v16 = v14[5];
        if ((unint64_t)v17 >= v16)
        {
          int v19 = v8;
          unint64_t v20 = (char *)v14[3];
          uint64_t v21 = (v17 - v20) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
LABEL_85:
          }
            abort();
          uint64_t v23 = v16 - (void)v20;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 >> 60) {
LABEL_86:
            }
              sub_1CB833614();
            uint64_t v25 = (char *)operator new(16 * v24);
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v26 = (llvm::rdf::RefNode **)&v25[16 * v21];
          *uint64_t v26 = v9;
          v26[1] = (llvm::rdf::RefNode *)v75;
          int v27 = v26;
          if (v17 != v20)
          {
            do
            {
              int v28 = (llvm::rdf::RefNode *)*((void *)v17 - 2);
              v17 -= 16;
              int v29 = *((_DWORD *)v17 + 2);
              *(v27 - 2) = v28;
              v27 -= 2;
              *((_DWORD *)v27 + 2) = v29;
            }
            while (v17 != v20);
            uint8x8_t v17 = (char *)v15[3];
          }
          int v18 = v26 + 2;
          v15[3] = v27;
          v15[4] = v26 + 2;
          v15[5] = &v25[16 * v24];
          int v8 = v19;
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)uint8x8_t v17 = v9;
          *((void *)v17 + 1) = v75;
          int v18 = v17 + 16;
        }
        v15[4] = v18;
        __int16 v30 = v82;
        uint64_t v31 = &v82;
        uint64_t v32 = &v82;
        int v33 = v79[0];
        if (v82)
        {
          do
          {
            while (1)
            {
              uint64_t v31 = (uint64_t **)v30;
              unsigned int v34 = *((_DWORD *)v30 + 7);
              if (v79[0] >= v34) {
                break;
              }
              __int16 v30 = *v31;
              uint64_t v32 = v31;
              if (!*v31) {
                goto LABEL_32;
              }
            }
            if (v34 >= v79[0]) {
              goto LABEL_35;
            }
            __int16 v30 = v31[1];
          }
          while (v30);
          uint64_t v32 = v31 + 1;
        }
LABEL_32:
        uint64_t v35 = operator new(0x20uLL);
        v35[7] = v33;
        *(void *)uint64_t v35 = 0;
        *((void *)v35 + 1) = 0;
        *((void *)v35 + 2) = v31;
        llvm::rdf::InstrNode *v32 = (uint64_t *)v35;
        if (*v81)
        {
          uint64_t v81 = (uint64_t **)*v81;
          uint64_t v35 = *v32;
        }
        sub_1CB8358B8(v82, (uint64_t *)v35);
        ++v83;
LABEL_35:
        uint64_t v73 = v8;
        llvm::rdf::PhysicalRegisterInfo::getAliasSet((uint64_t)v69, v33, &v77);
        unsigned int v36 = v77;
        if (v77 != v7)
        {
          do
          {
            unsigned int v37 = *((_DWORD *)v36 + 7);
            unsigned int v76 = v37;
            for (uint64_t j = v82; j; uint64_t j = (uint64_t *)*j)
            {
              unsigned int v39 = *((_DWORD *)j + 7);
              if (v37 >= v39)
              {
                if (v39 >= v37) {
                  goto LABEL_59;
                }
                ++j;
              }
            }
            int v40 = sub_1CC3FA530(a4, v37, &v76);
            unsigned int v41 = v40;
            unsigned int v43 = (char *)v40[4];
            unint64_t v42 = v40[5];
            if ((unint64_t)v43 >= v42)
            {
              int v45 = v7;
              unsigned int v46 = a4;
              uint64_t v47 = (char *)v40[3];
              uint64_t v48 = (v43 - v47) >> 4;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 60) {
                goto LABEL_85;
              }
              uint64_t v50 = v42 - (void)v47;
              if (v50 >> 3 > v49) {
                unint64_t v49 = v50 >> 3;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                if (v51 >> 60) {
                  goto LABEL_86;
                }
                unint64_t v52 = (char *)operator new(16 * v51);
              }
              else
              {
                unint64_t v52 = 0;
              }
              unsigned int v53 = (llvm::rdf::RefNode **)&v52[16 * v48];
              *unsigned int v53 = v9;
              v53[1] = (llvm::rdf::RefNode *)v75;
              __int16 v54 = v53;
              a4 = v46;
              if (v43 != v47)
              {
                do
                {
                  unsigned int v55 = (llvm::rdf::RefNode *)*((void *)v43 - 2);
                  v43 -= 16;
                  int v56 = *((_DWORD *)v43 + 2);
                  *(v54 - 2) = v55;
                  v54 -= 2;
                  *((_DWORD *)v54 + 2) = v56;
                }
                while (v43 != v47);
                unsigned int v43 = (char *)v41[3];
              }
              unsigned int v7 = v45;
              uint64_t v57 = &v52[16 * v51];
              unint64_t v44 = v53 + 2;
              void v41[3] = v54;
              v41[4] = v53 + 2;
              v41[5] = v57;
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              *(void *)unsigned int v43 = v9;
              *((void *)v43 + 1) = v75;
              unint64_t v44 = v43 + 16;
            }
            v41[4] = v44;
LABEL_59:
            uint64_t v58 = (void *)v36[1];
            if (v58)
            {
              do
              {
                uint64_t v59 = v58;
                uint64_t v58 = (void *)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                uint64_t v59 = (void *)v36[2];
                BOOL v60 = *v59 == (void)v36;
                unsigned int v36 = v59;
              }
              while (!v60);
            }
            unsigned int v36 = v59;
          }
          while (v59 != v7);
        }
        sub_1CB833A08((uint64_t)&v77, v78);
        uint64_t v61 = (char *)v87;
        uint64_t v62 = (char *)v87 + 16 * v88;
        if (v88)
        {
          do
          {
            unsigned int v63 = *((_DWORD *)v61 + 2);
            __int16 v64 = v85;
            uint64_t v65 = &v85;
            int v66 = &v85;
            if (v85)
            {
              do
              {
                while (1)
                {
                  int v66 = (uint64_t **)v64;
                  unsigned int v67 = *((_DWORD *)v64 + 7);
                  if (v63 >= v67) {
                    break;
                  }
                  __int16 v64 = *v66;
                  uint64_t v65 = v66;
                  if (!*v66) {
                    goto LABEL_72;
                  }
                }
                if (v67 >= v63) {
                  goto LABEL_75;
                }
                __int16 v64 = v66[1];
              }
              while (v64);
              uint64_t v65 = v66 + 1;
            }
LABEL_72:
            uint64_t v68 = operator new(0x20uLL);
            v68[7] = v63;
            *(void *)uint64_t v68 = 0;
            *((void *)v68 + 1) = 0;
            *((void *)v68 + 2) = v66;
            *uint64_t v65 = (uint64_t *)v68;
            if (*v84)
            {
              unsigned int v84 = (uint64_t **)*v84;
              uint64_t v68 = *v65;
            }
            sub_1CB8358B8(v85, (uint64_t *)v68);
            ++v86;
LABEL_75:
            v61 += 16;
          }
          while (v61 != v62);
          uint64_t v61 = (char *)v87;
        }
        if (v61 != (char *)&v89) {
          free(v61);
        }
        int v8 = v73;
      }
LABEL_80:
      v8 += 2;
    }
    while (v8 != v74);
    unint64_t v6 = v90;
  }
  if (v6 != v92) {
    free(v6);
  }
  sub_1CB833A08((uint64_t)&v81, v82);
  sub_1CB833A08((uint64_t)&v84, v85);
}

void llvm::rdf::DataFlowGraph::pushDefs(uint64_t a1, _WORD *a2, int a3, uint64_t *a4)
{
  unint64_t v5 = (llvm::rdf::DataFlowGraph *)a1;
  v77[8] = *MEMORY[0x1E4F143B8];
  int v70 = 0;
  uint64_t v71 = 0;
  uint64_t v69 = &v70;
  sub_1CC3F9160((uint64_t)a2, (uint64_t (*)(uint64_t, void))sub_1CC3F9280, a1, (uint64_t)&v75);
  unint64_t v6 = v75;
  if (v76)
  {
    uint64_t v58 = v5;
    uint64_t v59 = (llvm::rdf::DataFlowGraph *)((char *)v5 + 24);
    unsigned int v7 = &v75[2 * v76];
    uint64_t v57 = v7;
    do
    {
      int v8 = *v6;
      uint64_t v9 = *((unsigned int *)v6 + 2);
      unint64_t v63 = v63 & 0xFFFFFFFF00000000 | v9;
      for (uint64_t i = v70; i; uint64_t i = (uint64_t *)*i)
      {
        unsigned int v11 = *((_DWORD *)i + 7);
        if (v9 >= v11)
        {
          if (v11 >= v9) {
            goto LABEL_65;
          }
          ++i;
        }
      }
      if ((*(_WORD *)v8 & 0x40) == 0)
      {
        llvm::rdf::DataFlowGraph::getRelatedRefs(v5, v8, a2, a3, v9, (uint64_t)&v72);
        *(void *)unsigned int v67 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v72, v5);
        uint64_t v68 = v12;
        uint64_t v13 = sub_1CC3FA530(a4, v67[0], v67);
        uint64_t v14 = v13;
        unint64_t v16 = (char *)v13[4];
        unint64_t v15 = v13[5];
        uint64_t v62 = v6;
        if ((unint64_t)v16 >= v15)
        {
          int v18 = (char *)v13[3];
          uint64_t v19 = (v16 - v18) >> 4;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
LABEL_70:
          }
            abort();
          uint64_t v21 = v15 - (void)v18;
          if (v21 >> 3 > v20) {
            unint64_t v20 = v21 >> 3;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 60) {
LABEL_71:
            }
              sub_1CB833614();
            uint64_t v23 = (char *)operator new(16 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (llvm::rdf::RefNode **)&v23[16 * v19];
          *unint64_t v24 = v8;
          v24[1] = (llvm::rdf::RefNode *)v63;
          uint64_t v25 = v24;
          if (v16 != v18)
          {
            do
            {
              uint64_t v26 = (llvm::rdf::RefNode *)*((void *)v16 - 2);
              v16 -= 16;
              int v27 = *((_DWORD *)v16 + 2);
              *(v25 - 2) = v26;
              v25 -= 2;
              *((_DWORD *)v25 + 2) = v27;
            }
            while (v16 != v18);
            unint64_t v16 = (char *)v14[3];
          }
          uint8x8_t v17 = v24 + 2;
          void v14[3] = v25;
          v14[4] = v24 + 2;
          v14[5] = &v23[16 * v22];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)unint64_t v16 = v8;
          *((void *)v16 + 1) = v63;
          uint8x8_t v17 = v16 + 16;
        }
        v14[4] = v17;
        llvm::rdf::PhysicalRegisterInfo::getAliasSet((uint64_t)v59, v67[0], &v65);
        int v28 = v65;
        if (v65 != v66)
        {
          do
          {
            unsigned int v64 = *((_DWORD *)v28 + 7);
            int v29 = sub_1CC3FA530(a4, v64, &v64);
            __int16 v30 = v29;
            uint64_t v32 = (char *)v29[4];
            unint64_t v31 = v29[5];
            if ((unint64_t)v32 >= v31)
            {
              unsigned int v34 = a4;
              uint64_t v35 = (char *)v29[3];
              uint64_t v36 = (v32 - v35) >> 4;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 60) {
                goto LABEL_70;
              }
              uint64_t v38 = v31 - (void)v35;
              if (v38 >> 3 > v37) {
                unint64_t v37 = v38 >> 3;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v39)
              {
                if (v39 >> 60) {
                  goto LABEL_71;
                }
                int v40 = (char *)operator new(16 * v39);
              }
              else
              {
                int v40 = 0;
              }
              unsigned int v41 = (llvm::rdf::RefNode **)&v40[16 * v36];
              void *v41 = v8;
              v41[1] = (llvm::rdf::RefNode *)v63;
              unint64_t v42 = v41;
              a4 = v34;
              if (v32 != v35)
              {
                do
                {
                  unsigned int v43 = (llvm::rdf::RefNode *)*((void *)v32 - 2);
                  v32 -= 16;
                  int v44 = *((_DWORD *)v32 + 2);
                  *(v42 - 2) = v43;
                  v42 -= 2;
                  *((_DWORD *)v42 + 2) = v44;
                }
                while (v32 != v35);
                uint64_t v32 = (char *)v30[3];
              }
              int v45 = &v40[16 * v39];
              int v33 = v41 + 2;
              void v30[3] = v42;
              v30[4] = v41 + 2;
              v30[5] = v45;
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(void *)uint64_t v32 = v8;
              *((void *)v32 + 1) = v63;
              int v33 = v32 + 16;
            }
            v30[4] = v33;
            unsigned int v46 = (void *)v28[1];
            if (v46)
            {
              do
              {
                uint64_t v47 = (void **)v46;
                unsigned int v46 = (void *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                uint64_t v47 = (void **)v28[2];
                BOOL v48 = *v47 == v28;
                int v28 = v47;
              }
              while (!v48);
            }
            int v28 = v47;
          }
          while (v47 != v66);
        }
        sub_1CB833A08((uint64_t)&v65, v66[0]);
        unint64_t v49 = (char *)v72;
        uint64_t v50 = (char *)v72 + 16 * v73;
        if (v73)
        {
          do
          {
            unsigned int v51 = *((_DWORD *)v49 + 2);
            unint64_t v52 = v70;
            unsigned int v53 = &v70;
            __int16 v54 = &v70;
            if (v70)
            {
              do
              {
                while (1)
                {
                  __int16 v54 = (uint64_t **)v52;
                  unsigned int v55 = *((_DWORD *)v52 + 7);
                  if (v51 >= v55) {
                    break;
                  }
                  unint64_t v52 = *v54;
                  unsigned int v53 = v54;
                  if (!*v54) {
                    goto LABEL_57;
                  }
                }
                if (v55 >= v51) {
                  goto LABEL_60;
                }
                unint64_t v52 = v54[1];
              }
              while (v52);
              unsigned int v53 = v54 + 1;
            }
LABEL_57:
            int v56 = operator new(0x20uLL);
            v56[7] = v51;
            *(void *)int v56 = 0;
            *((void *)v56 + 1) = 0;
            *((void *)v56 + 2) = v54;
            *unsigned int v53 = (uint64_t *)v56;
            if (*v69)
            {
              uint64_t v69 = (uint64_t **)*v69;
              int v56 = *v53;
            }
            sub_1CB8358B8(v70, (uint64_t *)v56);
            ++v71;
LABEL_60:
            v49 += 16;
          }
          while (v49 != v50);
          unint64_t v49 = (char *)v72;
        }
        if (v49 != (char *)&v74) {
          free(v49);
        }
        unint64_t v5 = v58;
        unint64_t v6 = v62;
        unsigned int v7 = v57;
      }
LABEL_65:
      v6 += 2;
    }
    while (v6 != v7);
    unint64_t v6 = v75;
  }
  if (v6 != v77) {
    free(v6);
  }
  sub_1CB833A08((uint64_t)&v69, v70);
}

uint64_t sub_1CC3F9160@<X0>(uint64_t result@<X0>, uint64_t (*a2)(uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a4 + 16;
  *(void *)(a4 + 8) = 0x400000000;
  unsigned int v5 = *(_DWORD *)(result + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(*(void *)(a3 + 296) + 8 * ((v5 - 1) >> *(_DWORD *)(a3 + 276)))
       + 32 * (*(_DWORD *)(a3 + 280) & (v5 - 1));
    if (v8 != result)
    {
      do
      {
        uint64_t v10 = v5;
        double result = a2(v8, v5);
        if (result)
        {
          unint64_t v11 = *(unsigned int *)(a4 + 8);
          if (v11 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v12 = (void *)(*(void *)a4 + 16 * v11);
          void *v12 = v8;
          v12[1] = v10;
          ++*(_DWORD *)(a4 + 8);
        }
        unsigned int v5 = *(_DWORD *)(v8 + 4);
        if (v5) {
          uint64_t v8 = *(void *)(*(void *)(a3 + 296) + 8 * ((v5 - 1) >> *(_DWORD *)(a3 + 276)))
        }
             + 32 * (*(_DWORD *)(a3 + 280) & (v5 - 1));
        else {
          uint64_t v8 = 0;
        }
      }
      while (v8 != v7);
    }
  }
  return result;
}

BOOL sub_1CC3F9280(_WORD *a1)
{
  return (*a1 & 0x1F) == 6;
}

unsigned __int16 *llvm::rdf::DataFlowGraph::getRelatedRefs@<X0>(llvm::rdf::DataFlowGraph *a1@<X0>, llvm::rdf::RefNode *this@<X3>, _WORD *a3@<X1>, int a4@<W2>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int v12 = 0;
  *(void *)a6 = a6 + 16;
  *(void *)(a6 + 8) = 0x400000000;
  unsigned int v13 = a5;
  do
  {
    if (v12 >= *(_DWORD *)(a6 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v14 = (void *)(*(void *)a6 + 16 * v12);
    *uint64_t v14 = this;
    v14[1] = v13;
    unsigned int v12 = *(_DWORD *)(a6 + 8) + 1;
    *(_DWORD *)(a6 + 8) = v12;
    double result = llvm::rdf::DataFlowGraph::getNextRelated(a1, a3, a4, this);
    unsigned int v13 = v16;
    if (!v16) {
      break;
    }
    this = (llvm::rdf::RefNode *)result;
  }
  while (v16 != a5);
  return result;
}

unsigned __int16 *llvm::rdf::DataFlowGraph::getNextRelated(llvm::rdf::DataFlowGraph *a1, _WORD *a2, int a3, llvm::rdf::RefNode *this)
{
  int RegRef = llvm::rdf::RefNode::getRegRef(this, a1);
  uint64_t v9 = v8;
  int v10 = *((_DWORD *)this + 1);
  if ((*a2 & 0x1C) == 0x10)
  {
    if (!v10) {
      goto LABEL_4;
    }
LABEL_3:
    for (uint64_t i = (unsigned __int16 *)(*(void *)(*((void *)a1 + 37)
                                             + 8 * ((v10 - 1) >> *((_DWORD *)a1 + 69)))
                                 + 32 * (*((_DWORD *)a1 + 70) & (v10 - 1)));
          i != (unsigned __int16 *)this;
          uint64_t i = 0)
    {
      unsigned __int16 v12 = *i;
      if ((*i & 3) == 2)
      {
        if (llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)i, a1) != RegRef
          || v14 != v9
          || ((*(_WORD *)this ^ v12) & 0x1C) != 0
          || RegRef != llvm::rdf::RefNode::getRegRef(this, a1)
          || v9 != v15
          || *((void *)this + 3) != *((void *)i + 3))
        {
          return 0;
        }
        return i;
      }
      int v10 = *((_DWORD *)i + 4);
      if (v10) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
  }
  else
  {
    while (1)
    {
      uint64_t i = v10
        ? (unsigned __int16 *)(*(void *)(*((void *)a1 + 37) + 8
                                                                * ((v10 - 1) >> *((_DWORD *)a1 + 69)))
                             + 32 * (*((_DWORD *)a1 + 70) & (v10 - 1)))
        : 0;
      if (i == (unsigned __int16 *)this) {
        break;
      }
      unsigned __int16 v13 = *i;
      if ((*i & 3) == 2)
      {
        if (llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)i, a1) != RegRef
          || v16 != v9
          || ((*(_WORD *)this ^ v13) & 0x1C) != 0
          || RegRef != llvm::rdf::RefNode::getRegRef(this, a1)
          || v9 != v18
          || (v13 & 0x1C) == 8 && *((_DWORD *)i + 4) != *((_DWORD *)this + 4))
        {
          return 0;
        }
        return i;
      }
      int v10 = *((_DWORD *)i + 4);
    }
  }
  return 0;
}

llvm::rdf::RefNode *llvm::rdf::DataFlowGraph::getNextShadow(llvm::rdf::DataFlowGraph *a1, uint64_t a2, int a3, llvm::rdf::RefNode *a4, int a5, int a6)
{
  unsigned __int16 v12 = a4;
  int v13 = *(_WORD *)a4 & 0xFC0 | 0x20;
  NextRelated = llvm::rdf::DataFlowGraph::getNextRelated(a1, (_WORD *)a2, a3, a4);
  uint64_t v16 = 0;
  if (!v15 || v15 == a5)
  {
    int v17 = a5;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = v15;
    if ((*NextRelated & 0xFE0) == v13)
    {
      unsigned __int16 v12 = a4;
      int v17 = a5;
      uint64_t v16 = (llvm::rdf::RefNode *)NextRelated;
    }
    else
    {
      uint64_t v16 = (llvm::rdf::RefNode *)NextRelated;
      while (1)
      {
        unsigned __int16 v12 = v16;
        int v17 = v15;
        uint64_t v18 = llvm::rdf::DataFlowGraph::getNextRelated(a1, (_WORD *)a2, a3, v16);
        if (!v15 || v15 == a5) {
          break;
        }
        uint64_t v16 = (llvm::rdf::RefNode *)v18;
        uint64_t v15 = v15;
        if ((*v18 & 0xFE0) == v13) {
          goto LABEL_12;
        }
      }
      uint64_t v16 = 0;
      uint64_t v15 = 0;
    }
  }
LABEL_12:
  if (!v15 && a6)
  {
    uint64_t v19 = llvm::rdf::NodeAllocator::New((size_t)a1 + 272);
    uint64_t v16 = (llvm::rdf::RefNode *)v19;
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    long long v21 = *((_OWORD *)a4 + 1);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)a4;
    *(_OWORD *)(v19 + 16) = v21;
    __int16 v22 = *(_WORD *)v19;
    if ((*(_WORD *)v19 & 3) == 2)
    {
      *(void *)(v19 + 8) = 0;
      if ((v22 & 0x1C) == 4) {
        *(void *)(v19 + 16) = 0;
      }
    }
    *(_WORD *)uint64_t v19 = v22 & 0xF01F | v13;
    int v23 = *((_DWORD *)v12 + 1);
    if (v23 != v20)
    {
      *((_DWORD *)v12 + 1) = v20;
      *(_DWORD *)(v19 + 4) = v23;
    }
    if (*(_DWORD *)(a2 + 20) == v17) {
      *(_DWORD *)(a2 + 20) = v20;
    }
  }
  return v16;
}

llvm::rdf::RefNode *llvm::rdf::DataFlowGraph::getNextShadow(llvm::rdf::DataFlowGraph *a1, _WORD *a2, int a3, llvm::rdf::RefNode *a4, int a5)
{
  __int16 v9 = *(_WORD *)a4;
  NextRelated = llvm::rdf::DataFlowGraph::getNextRelated(a1, a2, a3, a4);
  if (!v11) {
    return 0;
  }
  unsigned __int16 v12 = (llvm::rdf::RefNode *)NextRelated;
  double result = 0;
  if (v11 != a5)
  {
    int v14 = v9 & 0xFC0 | 0x20;
    while ((*(_WORD *)v12 & 0xFE0) != v14)
    {
      uint64_t v15 = llvm::rdf::DataFlowGraph::getNextRelated(a1, a2, a3, v12);
      if (!v16) {
        return 0;
      }
      unsigned __int16 v12 = (llvm::rdf::RefNode *)v15;
      double result = 0;
      if (v16 == a5) {
        return result;
      }
    }
    return v12;
  }
  return result;
}

void sub_1CC3F979C(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    while (1)
    {
      unint64_t v6 = v4 + 4;
      int v7 = *(_DWORD *)(a1 + 16);
      if (!v7) {
        break;
      }
      int v8 = v7 - 1;
      unsigned int v9 = ((*v6 >> 4) ^ (*v6 >> 9)) & v8;
      int v10 = (void *)(*(void *)a1 + 8 * v9);
      uint64_t v11 = *v10;
      if (*v6 != *v10)
      {
        unsigned __int16 v12 = 0;
        int v13 = 1;
        while (v11 != -4096)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -8192;
          }
          if (v14) {
            unsigned __int16 v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          int v10 = (void *)(*(void *)a1 + 8 * v9);
          uint64_t v11 = *v10;
          if (*v6 == *v10) {
            goto LABEL_35;
          }
        }
        if (v12) {
          int v16 = v12;
        }
        else {
          int v16 = v10;
        }
        goto LABEL_17;
      }
LABEL_35:
      int v28 = (void *)v4[1];
      if (v28)
      {
        do
        {
          int v29 = v28;
          int v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int v29 = (void *)v4[2];
          BOOL v14 = *v29 == (void)v4;
          uint64_t v4 = v29;
        }
        while (!v14);
      }
      uint64_t v4 = v29;
      if (v29 == a3) {
        return;
      }
    }
    int v16 = 0;
LABEL_17:
    *sub_1CBB24DE0(a1, (uint64_t)(v4 + 4), v4 + 4, v16) = *v6;
    uint64_t v18 = *(void **)(a1 + 32);
    unint64_t v17 = *(void *)(a1 + 40);
    if ((unint64_t)v18 >= v17)
    {
      int v20 = *(void **)(a1 + 24);
      uint64_t v21 = v18 - v20;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61) {
        abort();
      }
      uint64_t v23 = v17 - (void)v20;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          sub_1CB833614();
        }
        uint64_t v25 = (char *)operator new(8 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      uint64_t v26 = &v25[8 * v21];
      *(void *)uint64_t v26 = *v6;
      uint64_t v19 = v26 + 8;
      if (v18 != v20)
      {
        do
        {
          uint64_t v27 = *--v18;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        while (v18 != v20);
        uint64_t v18 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v26;
      *(void *)(a1 + 32) = v19;
      *(void *)(a1 + 40) = &v25[8 * v24];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      void *v18 = *v6;
      uint64_t v19 = v18 + 1;
    }
    *(void *)(a1 + 32) = v19;
    goto LABEL_35;
  }
}

BOOL sub_1CC3F9984(_WORD *a1)
{
  return (*a1 & 0x1F) == 13;
}

BOOL sub_1CC3F9998(_WORD *a1)
{
  return (*a1 & 0x1F) == 10;
}

void sub_1CC3F99AC(llvm::rdf::DataFlowGraph *a1, uint64_t a2, int a3, llvm::rdf::RefNode *this, unsigned int a5, uint64_t *a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a6;
  uint64_t v6 = a6[1];
  if (*a6 != v6)
  {
    uint64_t v11 = ((unint64_t)(v6 - v7) >> 4);
    uint64_t v12 = 16 * v11;
    while (v12)
    {
      uint64_t v13 = *(void *)(v7 + v12 - 16);
      v12 -= 16;
      if (v13)
      {
        int RegRef = llvm::rdf::RefNode::getRegRef(this, a1);
        uint64_t v39 = v15;
        int v40 = RegRef;
        int v16 = *(_DWORD *)(*((void *)a1 + 3) + 44);
        unsigned int v41 = v44;
        int v43 = 6;
        if ((v16 + 63) >= 0x1C0)
        {
          unsigned int v42 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if ((v16 + 63) >= 0x40) {
          bzero(v44, 8 * ((v16 + 63) >> 6));
        }
        unint64_t v17 = v44;
        unsigned int v42 = (v16 + 63) >> 6;
        v44[12] = v16;
        int v18 = v11 + 1;
        uint64_t v19 = 16 * v11;
        int v45 = (char *)a1 + 24;
        while (v19)
        {
          uint64_t v20 = *(void *)(v7 + v19 - 16);
          --v18;
          v19 -= 16;
          if (v20)
          {
            uint64_t v38 = 0;
            NextShadow = 0;
LABEL_13:
            int v22 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)(v7 + 16 * (v18 - 1)), a1);
            uint64_t v24 = v23;
            BOOL hasAliasOf = llvm::rdf::RegisterAggr::hasAliasOf((uint64_t)&v41, v22, v23);
            uint64_t v26 = llvm::rdf::RegisterAggr::insert((uint64_t)&v41, v22, v24);
            char hasCoverOf = llvm::rdf::RegisterAggr::hasCoverOf(v26, v40, v39);
            char v28 = hasCoverOf;
            if (hasAliasOf)
            {
              if (hasCoverOf)
              {
LABEL_25:
                unint64_t v17 = v41;
                break;
              }
            }
            else
            {
              int v29 = (uint64_t *)(*a6 + 16 * (v18 - 1));
              uint64_t v30 = *v29;
              uint64_t v31 = v29[1];
              if (v38)
              {
                *(_WORD *)NextShadow |= 0x20u;
                NextShadow = llvm::rdf::DataFlowGraph::getNextShadow(a1, a2, a3, NextShadow, v38, 1);
              }
              else
              {
                NextShadow = this;
                unsigned int v32 = a5;
              }
              *((_DWORD *)NextShadow + 2) = v31;
              *((_DWORD *)NextShadow + 3) = *(_DWORD *)(v30 + 20);
              *(_DWORD *)(v30 + 20) = v32;
              if (v28) {
                goto LABEL_25;
              }
              uint64_t v38 = v32;
            }
            uint64_t v7 = *a6;
            while (1)
            {
              int v33 = v18 - 1;
              if (v18 == 1) {
                goto LABEL_25;
              }
              uint64_t v34 = *(void *)(v7 + 16 * (v18 - 2));
              --v18;
              if (v34)
              {
                int v18 = v33;
                goto LABEL_13;
              }
            }
          }
        }
        if (v17 != v44) {
          free(v17);
        }
        return;
      }
    }
  }
}

uint64_t llvm::rdf::DataFlowGraph::unlinkUseDF(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    unsigned int v4 = v3 - 1;
    int v5 = *(_DWORD *)(result + 276);
    unsigned int v6 = v4 >> v5;
    unsigned int v7 = *(_DWORD *)(result + 280);
    uint64_t v8 = 32 * (v7 & v4);
    uint64_t v9 = *(void *)(result + 296);
    uint64_t v10 = *(void *)(v9 + 8 * v6) + v8;
    int v13 = *(_DWORD *)(v10 + 20);
    uint64_t v11 = (_DWORD *)(v10 + 20);
    int v12 = v13;
    if (v13)
    {
      if (v12 != a3)
      {
        int v14 = v12 - 1;
        uint64_t v15 = *(void *)(v9 + 8 * ((v12 - 1) >> v5));
        uint64_t v16 = 32 * (v14 & v7);
        while (1)
        {
          uint64_t v17 = v15 + v16;
          int v18 = *(_DWORD *)(v17 + 12);
          if (v18 == a3) {
            break;
          }
          if (!v18) {
            return result;
          }
          unsigned int v19 = v18 - 1;
          unsigned int v20 = v19 >> v5;
          uint64_t v16 = 32 * (v19 & v7);
          uint64_t v15 = *(void *)(v9 + 8 * v20);
        }
        uint64_t v11 = (_DWORD *)(v17 + 12);
      }
      goto LABEL_11;
    }
    if (!a3) {
LABEL_11:
    }
      *uint64_t v11 = *(_DWORD *)(a2 + 12);
  }
  return result;
}

void llvm::rdf::DataFlowGraph::unlinkDefDF(uint64_t a1, _DWORD *a2, int a3)
{
  v43[8] = *MEMORY[0x1E4F143B8];
  int v4 = a2[2];
  unsigned int v5 = a2[4];
  unsigned int v41 = v43;
  uint64_t v42 = 0x400000000;
  for (i = 0; v5; unsigned int v5 = *(_DWORD *)(v7 + 12))
  {
    if (i >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 296) + 8 * ((v5 - 1) >> *(_DWORD *)(a1 + 276)))
       + 32 * (*(_DWORD *)(a1 + 280) & (v5 - 1));
    uint64_t v8 = (char *)v41 + 16 * i;
    *uint64_t v8 = v7;
    v8[1] = v5;
    unsigned int i = v42 + 1;
    LODWORD(v42) = v42 + 1;
  }
  unsigned int v9 = a2[5];
  uint64_t v38 = v40;
  uint64_t v39 = 0x400000000;
  unsigned int v10 = 0;
  if (v9)
  {
    do
    {
      if (v10 >= HIDWORD(v39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 296) + 8 * ((v9 - 1) >> *(_DWORD *)(a1 + 276)))
          + 32 * (*(_DWORD *)(a1 + 280) & (v9 - 1));
      int v12 = (char *)v38 + 16 * v10;
      void *v12 = v11;
      v12[1] = v9;
      unsigned int v10 = v39 + 1;
      LODWORD(v39) = v39 + 1;
      unsigned int v9 = *(_DWORD *)(v11 + 12);
    }
    while (v9);
    unsigned int i = v42;
  }
  int v13 = (uint64_t *)v41;
  if (!v4)
  {
    if (i)
    {
      uint64_t v14 = 16 * i;
      uint64_t v15 = (uint64_t *)v41;
      do
      {
        uint64_t v16 = *v15;
        v15 += 2;
        *(_DWORD *)(v16 + 12) = 0;
        v14 -= 16;
      }
      while (v14);
    }
    if (v10)
    {
      uint64_t v17 = (uint64_t *)v38;
      uint64_t v18 = 16 * v10;
      do
      {
        uint64_t v19 = *v17;
        v17 += 2;
        *(_DWORD *)(v19 + 12) = 0;
        v18 -= 16;
      }
      while (v18);
    }
  }
  if (i)
  {
    uint64_t v20 = 16 * i;
    do
    {
      uint64_t v21 = *v13;
      v13 += 2;
      *(_DWORD *)(v21 + 8) = v4;
      v20 -= 16;
    }
    while (v20);
    unsigned int v10 = v39;
  }
  int v22 = v38;
  if (v10)
  {
    uint64_t v23 = 16 * v10;
    uint64_t v24 = (uint64_t *)v38;
    do
    {
      uint64_t v25 = *v24;
      v24 += 2;
      *(_DWORD *)(v25 + 8) = v4;
      v23 -= 16;
    }
    while (v23);
  }
  if (v4)
  {
    int v26 = a2[3];
    int v27 = *(_DWORD *)(a1 + 276);
    unsigned int v28 = *(_DWORD *)(a1 + 280);
    uint64_t v29 = *(void *)(a1 + 296);
    uint64_t v30 = *(void *)(v29 + 8 * ((v4 - 1) >> v27)) + 32 * (v28 & (v4 - 1));
    int v31 = *(_DWORD *)(v30 + 16);
    if (v31)
    {
      if (v31 != a3)
      {
        unsigned int v32 = v31 - 1;
        uint64_t v33 = *(void *)(v29 + 8 * (v32 >> v27));
        uint64_t v34 = 32 * (v32 & v28);
        while (1)
        {
          uint64_t v35 = v33 + v34;
          int v36 = *(_DWORD *)(v35 + 12);
          if (v36 == a3) {
            break;
          }
          if (!v36) {
            goto LABEL_35;
          }
          uint64_t v34 = 32 * ((v36 - 1) & v28);
          uint64_t v33 = *(void *)(v29 + 8 * ((v36 - 1) >> v27));
        }
        *(_DWORD *)(v35 + 12) = v26;
        goto LABEL_35;
      }
    }
    else if (a3)
    {
LABEL_35:
      if (v42)
      {
        unint64_t v37 = v41;
        *(_DWORD *)(*((void *)v41 + 2 * v42 - 2) + 12) = *(_DWORD *)(v30 + 16);
        *(_DWORD *)(v30 + 16) = v37[2];
      }
      int v22 = v38;
      if (v39)
      {
        *(_DWORD *)(*((void *)v38 + 2 * v39 - 2) + 12) = *(_DWORD *)(v30 + 20);
        *(_DWORD *)(v30 + 20) = v22[2];
        int v22 = v38;
      }
      goto LABEL_39;
    }
    *(_DWORD *)(v30 + 16) = v26;
    goto LABEL_35;
  }
LABEL_39:
  if (v22 != (_DWORD *)v40) {
    free(v22);
  }
  if (v41 != v43) {
    free(v41);
  }
}

void sub_1CC3F9FEC()
{
}

uint64_t sub_1CC3FA000(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)a1;
  unsigned int v5 = *(char **)(a1 + 8);
  unsigned int v6 = *(char **)a1;
  if (*(char **)a1 != v5)
  {
    unsigned int v6 = *(char **)a1;
    while (*(void *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v5)
      {
        unsigned int v6 = *(char **)(a1 + 8);
        break;
      }
    }
  }
  if (v6 != v5) {
    return ((v6 - v4) >> 3) + 1;
  }
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v8)
  {
    uint64_t v10 = (v5 - v4) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v8 - (void)v4;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1CB833614();
      }
      uint64_t v14 = (char *)operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *(void *)uint64_t v15 = a2;
    for (unsigned int i = v15 + 8; v5 != v4; v15 -= 8)
    {
      uint64_t v16 = *((void *)v5 - 1);
      v5 -= 8;
      *((void *)v15 - 1) = v16;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v4)
    {
      operator delete(v4);
      int v4 = *(char **)a1;
    }
    else
    {
      int v4 = v15;
    }
  }
  else
  {
    *(void *)unsigned int v5 = a2;
    unsigned int i = v5 + 8;
  }
  *(void *)(a1 + 8) = i;
  return (i - v4) >> 3;
}

void *sub_1CC3FA140(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    abort();
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      unint64_t v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    unint64_t v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_1CC3FA190(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v10 = *(_DWORD *)(*(void *)a5 + 44);
  uint64_t v14 = v17;
  int v16 = 6;
  if ((v10 + 63) >= 0x1C0)
  {
    unsigned int v15 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v10 + 63) >= 0x40) {
    bzero(v17, 8 * ((v10 + 63) >> 6));
  }
  unsigned int v15 = (v10 + 63) >> 6;
  v17[12] = v10;
  uint64_t v18 = a5;
  uint64_t v11 = llvm::rdf::RegisterAggr::insert((uint64_t)&v14, a1, a2);
  uint64_t hasCoverOf = llvm::rdf::RegisterAggr::hasCoverOf(v11, a3, a4);
  if (v14 != v17) {
    free(v14);
  }
  return hasCoverOf;
}

void sub_1CC3FA2B0(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 += 4 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(_DWORD **)a1;
    uint64_t v7 = (uint64_t)v5 - *(void *)a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      abort();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[16 * (v7 >> 4)];
    unint64_t v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    uint64_t v14 = &v12[16 * a2];
    if (v5 != v6)
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 2);
        v5 -= 4;
        int v16 = v5[2];
        *((void *)v12 - 2) = v15;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v16;
      }
      while (v5 != v6);
      unsigned int v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t **sub_1CC3FA3E0(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  double result = (uint64_t **)sub_1CC3FA480(a1, &v12, a2, a3);
  if (!*result)
  {
    uint64_t v7 = result;
    unint64_t v8 = operator new(0x30uLL);
    v8[2] = *a4;
    uint64_t v9 = v12;
    *(void *)unint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v9;
    *uint64_t v7 = (uint64_t *)v8;
    uint64_t v10 = **(void **)a1;
    if (v10)
    {
      *(void *)a1 = v10;
      uint64_t v11 = *v7;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v8;
    }
    double result = (uint64_t **)sub_1CB8358B8(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
  }
  return result;
}

void *sub_1CC3FA480(uint64_t a1, void *a2, unsigned int a3, unint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  double result = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = (void *)v5;
      unsigned int v8 = *(_DWORD *)(v5 + 32);
      if (v8 > a3) {
        goto LABEL_6;
      }
      if (v8 != a3)
      {
        BOOL v10 = v8 >= a3;
        goto LABEL_8;
      }
      unint64_t v9 = v7[5];
      BOOL v10 = v9 >= a4;
      if (v9 <= a4)
      {
LABEL_8:
        if (v10) {
          goto LABEL_12;
        }
        double result = v7 + 1;
        uint64_t v5 = v7[1];
        if (!v5) {
          goto LABEL_12;
        }
      }
      else
      {
LABEL_6:
        uint64_t v5 = *v7;
        double result = v7;
        if (!*v7) {
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v7 = result;
LABEL_12:
  *a2 = v7;
  return result;
}

void sub_1CC3FA4DC(void *a1)
{
  if (a1)
  {
    sub_1CC3FA4DC(*a1);
    sub_1CC3FA4DC(a1[1]);
    sub_1CBB0D544((void *)a1[6]);
    operator delete(a1);
  }
}

void *sub_1CC3FA530(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 2;
  BOOL v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  _OWORD v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_1CB833614();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          int v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            unsigned int v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *int v22 = *v28;
                  *unsigned int v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  unsigned int v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                int v22 = v28;
                unsigned int v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  int v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    void *v10 = *v31;
LABEL_72:
    void *v31 = v10;
    goto LABEL_73;
  }
  void *v10 = *v12;
  void *v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    int v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1CC3FA914(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
_OWORD *sub_1CC3FAD10(_OWORD *result, _OWORD *a2)
{
  if (result != a2)
  {
    unint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      while (1)
      {
        char v5 = v4;
        uint64_t v4 = v2;
        unsigned int v6 = *((_DWORD *)v5 + 4);
        if (v6 < *(_DWORD *)v5) {
          break;
        }
        if (v6 == *(_DWORD *)v5)
        {
          unint64_t v7 = *((void *)v5 + 3);
          if (v7 < *((void *)v5 + 1)) {
            goto LABEL_6;
          }
        }
LABEL_19:
        unint64_t v2 = v4 + 1;
        v3 += 16;
        if (v4 + 1 == a2) {
          return result;
        }
      }
      unint64_t v7 = *((void *)v5 + 3);
LABEL_6:
      int v8 = *((_DWORD *)v5 + 5);
      *uint64_t v4 = *v5;
      unint64_t v9 = result;
      if (v5 != result)
      {
        uint64_t v10 = v3;
        while (1)
        {
          unsigned int v11 = *(_DWORD *)((char *)result + v10 - 16);
          if (v6 >= v11)
          {
            if (v6 != v11)
            {
              unint64_t v9 = (_OWORD *)((char *)result + v10);
              goto LABEL_18;
            }
            if (v7 >= *(void *)((char *)result + v10 - 8)) {
              break;
            }
          }
          --v5;
          *(_OWORD *)((char *)result + v10) = *(_OWORD *)((char *)result + v10 - 16);
          v10 -= 16;
          if (!v10)
          {
            unint64_t v9 = result;
            goto LABEL_18;
          }
        }
        unint64_t v9 = v5;
      }
LABEL_18:
      *(_DWORD *)unint64_t v9 = v6;
      *((_DWORD *)v9 + 1) = v8;
      *((void *)v9 + 1) = v7;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_1CC3FADE8(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 16 == a2) {
        return result;
      }
      uint64_t v2 = result;
      result += 16;
      unsigned int v3 = *(_DWORD *)(v2 + 16);
      if (v3 >= *(_DWORD *)v2)
      {
        if (v3 == *(_DWORD *)v2)
        {
          unint64_t v4 = *(void *)(v2 + 24);
          if (v4 < *(void *)(v2 + 8)) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        unint64_t v4 = *(void *)(v2 + 24);
LABEL_7:
        int v5 = *(_DWORD *)(v2 + 20);
        do
        {
          do
          {
            uint64_t v6 = v2;
            *(_OWORD *)(v2 + 16) = *(_OWORD *)v2;
            unsigned int v7 = *(_DWORD *)(v2 - 16);
            v2 -= 16;
            BOOL v8 = v3 == v7;
          }
          while (v3 < v7);
        }
        while (v8 && v4 < *(void *)(v6 - 8));
        *(_DWORD *)uint64_t v6 = v3;
        *(_DWORD *)(v6 + 4) = v5;
        *(void *)(v6 + 8) = v4;
      }
    }
  }
  return result;
}

uint64_t sub_1CC3FAE6C(long long *a1, unsigned int *a2, long long *a3)
{
  unsigned int v3 = *a2;
  if (*a2 < *(_DWORD *)a1 || v3 == *(_DWORD *)a1 && *((void *)a2 + 1) < *((void *)a1 + 1))
  {
    if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((void *)a3 + 1) < *((void *)a2 + 1))
    {
      long long v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      long long v8 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && *((void *)a3 + 1) < *((void *)a2 + 1))
      {
        long long v9 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v9;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((void *)a3 + 1) < *((void *)a2 + 1))
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && *((void *)a2 + 1) < *((void *)a1 + 1))
    {
      long long v7 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

void *sub_1CC3FAF94(void *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unsigned int v4 = *(_DWORD *)(a2 - 16);
  unsigned int v5 = *a1;
  if (v5 < v4 || v5 == v4 && v3 < *(void *)(a2 - 8))
  {
    unsigned int i = a1;
    do
    {
      unsigned int v8 = *((_DWORD *)i + 4);
      i += 2;
      unsigned int v7 = v8;
    }
    while (v5 >= v8 && (v5 != v7 || v3 >= i[1]));
  }
  else
  {
    for (unsigned int i = a1 + 2; (unint64_t)i < a2 && v5 >= *(_DWORD *)i && (v5 != *(_DWORD *)i || v3 >= i[1]); i += 2)
      ;
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; v5 < v4 || v5 == v4 && v3 < *(void *)(a2 + 8); a2 -= 16)
    {
      unsigned int v9 = *(_DWORD *)(a2 - 16);
      unsigned int v4 = v9;
    }
  }
  while ((unint64_t)i < a2)
  {
    long long v15 = *(_OWORD *)i;
    *(_OWORD *)unsigned int i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v15;
    do
    {
      unsigned int v11 = *((_DWORD *)i + 4);
      i += 2;
      unsigned int v10 = v11;
    }
    while (v5 >= v11 && (v5 != v10 || v3 >= i[1]));
    do
    {
      do
      {
        unsigned int v12 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        BOOL v13 = v5 == v12;
      }
      while (v5 < v12);
    }
    while (v13 && v3 < *(void *)(a2 + 8));
  }
  if (i - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t sub_1CC3FB0C4(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unsigned int v5 = *a1;
  while (1)
  {
    unsigned int v6 = a1[v2 + 2];
    if (v6 >= v5 && (v6 != v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v7 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unsigned int v9 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      unsigned int v8 = v9;
    }
    while (v9 >= v5 && (v8 != v5 || *(void *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_16:
    if (v7 < a2)
    {
      do
      {
        unsigned int v11 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        unsigned int v10 = v11;
        if (v11 < v5) {
          break;
        }
        if (v10 != v5) {
          goto LABEL_16;
        }
      }
      while (v7 < a2 && *(void *)(a2 + 8) >= v4);
    }
  }
  unint64_t v12 = v7;
  if (v7 < a2)
  {
    unint64_t v13 = a2;
    do
    {
      long long v19 = *(_OWORD *)v12;
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)unint64_t v13 = v19;
      do
      {
        do
        {
          unsigned int v14 = *(_DWORD *)(v12 + 16);
          v12 += 16;
          BOOL v15 = v14 == v5;
        }
        while (v14 < v5);
      }
      while (v15 && *(void *)(v12 + 8) < v4);
      do
      {
        unsigned int v17 = *(_DWORD *)(v13 - 16);
        v13 -= 16;
        unsigned int v16 = v17;
      }
      while (v17 >= v5 && (v16 != v5 || *(void *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((uint64_t *)(v12 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 16);
  }
  *(void *)(v12 - 16) = v3;
  *(void *)(v12 - 8) = v4;
  return v12 - 16;
}

BOOL sub_1CC3FB204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = (long long *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)(a2 - 16);
      if (v7 < *(_DWORD *)a1 || v7 == *(_DWORD *)a1 && *(void *)(a2 - 8) < *(void *)(a1 + 8))
      {
        long long v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unsigned int v6 = v8;
      }
      return result;
    case 3:
      sub_1CC3FAE6C((long long *)a1, (unsigned int *)(a1 + 16), (long long *)(a2 - 16));
      return 1;
    case 4:
      sub_1CC3FB420(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1CC3FB508((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      sub_1CC3FAE6C((long long *)a1, (unsigned int *)(a1 + 16), (long long *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *(_DWORD *)v9) {
      break;
    }
    if (v13 == *(_DWORD *)v9)
    {
      unint64_t v14 = *(void *)(v10 + 8);
      if (v14 < *(void *)(v9 + 8)) {
        goto LABEL_12;
      }
    }
LABEL_22:
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
  unint64_t v14 = *(void *)(v10 + 8);
LABEL_12:
  int v15 = *(_DWORD *)(v10 + 4);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v9;
  uint64_t v16 = a1;
  if (v9 != a1)
  {
    uint64_t v17 = v11;
    while (1)
    {
      unsigned int v18 = *(_DWORD *)(a1 + v17 + 16);
      if (v13 >= v18)
      {
        if (v13 != v18)
        {
          uint64_t v16 = a1 + v17 + 32;
          goto LABEL_21;
        }
        if (v14 >= *(void *)(a1 + v17 + 24)) {
          break;
        }
      }
      v9 -= 16;
      *(_OWORD *)(a1 + v17 + 32) = *(_OWORD *)(a1 + v17 + 16);
      v17 -= 16;
      if (v17 == -32)
      {
        uint64_t v16 = a1;
        goto LABEL_21;
      }
    }
    uint64_t v16 = v9;
  }
LABEL_21:
  *(_DWORD *)uint64_t v16 = v13;
  *(_DWORD *)(v16 + 4) = v15;
  *(void *)(v16 + 8) = v14;
  if (++v12 != 8) {
    goto LABEL_22;
  }
  return v10 + 16 == a2;
}

__n128 sub_1CC3FB420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CC3FAE6C((long long *)a1, (unsigned int *)a2, (long long *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && *(void *)(a4 + 8) < *(void *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || *(_DWORD *)a3 == *(_DWORD *)a2 && *(void *)(a3 + 8) < *(void *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || *(_DWORD *)a2 == *(_DWORD *)a1 && *(void *)(a2 + 8) < *(void *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1CC3FB508(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = sub_1CC3FB420((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u32[0] < a4->n128_u32[0] || a5->n128_u32[0] == a4->n128_u32[0] && a5->n128_u64[1] < a4->n128_u64[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] < a3->n128_u32[0] || a4->n128_u32[0] == a3->n128_u32[0] && a4->n128_u64[1] < a3->n128_u64[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a3->n128_u32[0] < a2->n128_u32[0] || a3->n128_u32[0] == a2->n128_u32[0] && a3->n128_u64[1] < a2->n128_u64[1])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (a2->n128_u32[0] < a1->n128_u32[0]
          || a2->n128_u32[0] == a1->n128_u32[0] && a2->n128_u64[1] < a1->n128_u64[1])
        {
          __n128 result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_1CC3FB638(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  if ((_OWORD *)a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (int *)(a1 + 16 * v10);
      do
      {
        sub_1CC3FB81C(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 == *(_DWORD *)a1 && *((void *)v14 + 1) < *(void *)(a1 + 8))
        {
          long long v15 = *v14;
          *unint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1CC3FB81C(a1, a4, v9, (int *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 17)
    {
      do
      {
        uint64_t v16 = 0;
        long long v25 = *(_OWORD *)a1;
        uint64_t v17 = a1;
        do
        {
          unsigned int v18 = (_OWORD *)v17;
          uint64_t v19 = v16 + 1;
          v17 += 16 * (v16 + 1);
          uint64_t v20 = 2 * v16;
          uint64_t v16 = (2 * v16) | 1;
          uint64_t v21 = v20 + 2;
          if (v21 < v9)
          {
            unsigned int v22 = *(_DWORD *)(v17 + 16);
            if (*(_DWORD *)v17 < v22 || *(_DWORD *)v17 == v22 && *((void *)&v18[v19] + 1) < *(void *)(v17 + 24))
            {
              v17 += 16;
              uint64_t v16 = v21;
            }
          }
          _OWORD *v18 = *(_OWORD *)v17;
        }
        while (v16 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        if ((_OWORD *)v17 == --v6)
        {
          *(_OWORD *)uint64_t v17 = v25;
        }
        else
        {
          *(_OWORD *)uint64_t v17 = *v6;
          *unsigned int v6 = v25;
          sub_1CC3FB958(a1, v17 + 16, a4, (v17 + 16 - a1) >> 4);
        }
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1CC3FB81C(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = *(_DWORD *)(v8 + 16);
        if (*(_DWORD *)v8 < v10 || *(_DWORD *)v8 == v10 && *(void *)(result + 16 * v7 + 8) < *(void *)(v8 + 24))
        {
          v8 += 16;
          uint64_t v7 = v9;
        }
      }
      unsigned int v11 = *a4;
      if (*(_DWORD *)v8 >= *a4)
      {
        if (*(_DWORD *)v8 == v11)
        {
          unint64_t v12 = *((void *)a4 + 1);
          if (*(void *)(v8 + 8) < v12) {
            return result;
          }
        }
        else
        {
          unint64_t v12 = *((void *)a4 + 1);
        }
        int v13 = a4[1];
        *(_OWORD *)a4 = *(_OWORD *)v8;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v14 = result + 16 * v7;
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unsigned int v17 = *(_DWORD *)(v14 + 16);
              if (*(_DWORD *)v14 < v17
                || *(_DWORD *)v14 == v17 && *(void *)(result + 16 * v7 + 8) < *(void *)(v14 + 24))
              {
                v14 += 16;
                uint64_t v7 = v16;
              }
            }
            if (*(_DWORD *)v14 < v11 || *(_DWORD *)v14 == v11 && *(void *)(v14 + 8) < v12) {
              break;
            }
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v14;
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_24;
            }
          }
        }
        uint64_t v14 = v8;
LABEL_24:
        *(_DWORD *)uint64_t v14 = v11;
        *(_DWORD *)(v14 + 4) = v13;
        *(void *)(v14 + 8) = v12;
      }
    }
  }
  return result;
}

uint64_t sub_1CC3FB958(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 16 * (v4 >> 1));
    unsigned int v7 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (*v6 != v7) {
        return result;
      }
      unint64_t v8 = *(void *)(a2 - 8);
      if (*(void *)(result + 16 * v5 + 8) >= v8) {
        return result;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(a2 - 8);
    }
    unsigned int v9 = *(_DWORD *)(a2 - 12);
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unsigned int v10 = (unsigned int *)(result + 16 * v5);
        if (*v10 >= v7 && (*v10 != v7 || *(void *)(result + 16 * v5 + 8) >= v8)) {
          break;
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v10;
        uint64_t v6 = (unsigned int *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_12;
        }
      }
    }
    unsigned int v10 = v6;
LABEL_12:
    unsigned int *v10 = v7;
    v10[1] = v9;
    *((void *)v10 + 1) = v8;
  }
  return result;
}

void sub_1CC3FBA04(llvm::rdf::DataFlowGraph *a1, uint64_t a2, int a3, llvm::rdf::RefNode *this, unsigned int a5, uint64_t *a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a6;
  uint64_t v6 = a6[1];
  if (*a6 != v6)
  {
    uint64_t v11 = ((unint64_t)(v6 - v7) >> 4);
    uint64_t v12 = 16 * v11;
    while (v12)
    {
      uint64_t v13 = *(void *)(v7 + v12 - 16);
      v12 -= 16;
      if (v13)
      {
        int RegRef = llvm::rdf::RefNode::getRegRef(this, a1);
        uint64_t v39 = v15;
        int v40 = RegRef;
        int v16 = *(_DWORD *)(*((void *)a1 + 3) + 44);
        unsigned int v41 = v44;
        int v43 = 6;
        if ((v16 + 63) >= 0x1C0)
        {
          unsigned int v42 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if ((v16 + 63) >= 0x40) {
          bzero(v44, 8 * ((v16 + 63) >> 6));
        }
        unsigned int v17 = v44;
        unsigned int v42 = (v16 + 63) >> 6;
        v44[12] = v16;
        int v18 = v11 + 1;
        uint64_t v19 = 16 * v11;
        int v45 = (char *)a1 + 24;
        while (v19)
        {
          uint64_t v20 = *(void *)(v7 + v19 - 16);
          --v18;
          v19 -= 16;
          if (v20)
          {
            uint64_t v38 = 0;
            NextShadow = 0;
LABEL_13:
            int v22 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)(v7 + 16 * (v18 - 1)), a1);
            uint64_t v24 = v23;
            BOOL hasAliasOf = llvm::rdf::RegisterAggr::hasAliasOf((uint64_t)&v41, v22, v23);
            uint64_t v26 = llvm::rdf::RegisterAggr::insert((uint64_t)&v41, v22, v24);
            char hasCoverOf = llvm::rdf::RegisterAggr::hasCoverOf(v26, v40, v39);
            char v28 = hasCoverOf;
            if (hasAliasOf)
            {
              if (hasCoverOf)
              {
LABEL_25:
                unsigned int v17 = v41;
                break;
              }
            }
            else
            {
              unint64_t v29 = (uint64_t *)(*a6 + 16 * (v18 - 1));
              uint64_t v30 = *v29;
              uint64_t v31 = v29[1];
              if (v38)
              {
                *(_WORD *)NextShadow |= 0x20u;
                NextShadow = llvm::rdf::DataFlowGraph::getNextShadow(a1, a2, a3, NextShadow, v38, 1);
              }
              else
              {
                NextShadow = this;
                unsigned int v32 = a5;
              }
              *((_DWORD *)NextShadow + 2) = v31;
              *((_DWORD *)NextShadow + 3) = *(_DWORD *)(v30 + 16);
              *(_DWORD *)(v30 + 16) = v32;
              if (v28) {
                goto LABEL_25;
              }
              uint64_t v38 = v32;
            }
            uint64_t v7 = *a6;
            while (1)
            {
              int v33 = v18 - 1;
              if (v18 == 1) {
                goto LABEL_25;
              }
              uint64_t v34 = *(void *)(v7 + 16 * (v18 - 2));
              --v18;
              if (v34)
              {
                int v18 = v33;
                goto LABEL_13;
              }
            }
          }
        }
        if (v17 != v44) {
          free(v17);
        }
        return;
      }
    }
  }
}

uint64_t *sub_1CC3FBC74(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 123);
  }
  else
  {
    *((void *)this + 4) = v4 + 1;
    *unint64_t v4 = 123;
  }
  unint64_t v5 = *(uint64_t **)(*a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
    do
    {
      unint64_t v7 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v7 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((void *)this + 4) = v7 + 1;
        *unint64_t v7 = 32;
      }
      int v8 = *((_DWORD *)v5 + 4);
      uint64_t v9 = *(void *)(a2[1] + 16);
      unsigned int v10 = operator new(0x28uLL);
      *(void *)unsigned int v10 = &unk_1F26154E0;
      void v10[2] = v8;
      *((void *)v10 + 2) = v9;
      v10[6] = 0;
      *((void *)v10 + 4) = 0;
      uint64_t v21 = (unsigned int **)v10;
      v6((llvm::raw_ostream *)v10, this);
      uint64_t v11 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v11 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 123);
      }
      else
      {
        *((void *)this + 4) = v11 + 1;
        *uint64_t v11 = 123;
      }
      if (v21 == v20)
      {
        (*((void (**)(unsigned int **))v20[0] + 4))(v20);
      }
      else if (v21)
      {
        (*((void (**)(void))*v21 + 5))();
      }
      uint64_t v12 = (uint64_t *)v5[5];
      if (v12)
      {
        while (1)
        {
          uint64_t v13 = (unsigned int *)a2[1];
          v20[0] = (unsigned int *)(v12 + 2);
          v20[1] = v13;
          uint64_t v14 = llvm::rdf::operator<<((char **)this, v20);
          uint64_t v19 = v12[3];
          llvm::rdf::operator<<(v14, &v19);
          uint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            break;
          }
          uint64_t v15 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v15 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 44);
          }
          else
          {
            *((void *)this + 4) = v15 + 1;
            *uint64_t v15 = 44;
          }
        }
      }
      int v16 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v16 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 125);
      }
      else
      {
        *((void *)this + 4) = v16 + 1;
        *int v16 = 125;
      }
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  unsigned int v17 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v17 > 1uLL)
  {
    _WORD *v17 = 32032;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " }", 2uLL);
  }
  return this;
}

uint64_t llvm::rdf::Liveness::getAllReachingDefs@<X0>(llvm::rdf::RefNode *this@<X3>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X2>, unsigned int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, unsigned int *a9@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  *(void *)a9 = a9 + 4;
  *((void *)a9 + 1) = 0x400000000;
  v191[0] = 0;
  v191[1] = 0;
  int v192 = 0;
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  int v193 = 0;
  v189[0] = 0;
  v189[1] = 0;
  int v190 = 0;
  if ((*(_WORD *)this & 0x400) == 0)
  {
    LODWORD(v206) = *(_DWORD *)(*(void *)(*(void *)(*(void *)a2 + 296)
                                          + 8 * ((a5 - 1) >> *(_DWORD *)(*(void *)a2 + 276)))
                              + 32 * (*(_DWORD *)(*(void *)a2 + 280) & (a5 - 1))
                              + 8);
    if (v206) {
      sub_1CBB29A9C((uint64_t)v191, (int *)&v206);
    }
    if (a6)
    {
      uint64_t v15 = *(llvm::rdf::DataFlowGraph **)a2;
      Owner = (_WORD *)llvm::rdf::RefNode::getOwner(this, *(const llvm::rdf::DataFlowGraph **)a2);
      llvm::rdf::DataFlowGraph::getRelatedRefs(v15, this, Owner, v17, a5, (uint64_t)&v206);
      int v18 = (char *)v206;
      if (v207)
      {
        uint64_t v19 = 16 * v207;
        do
        {
          LODWORD(__dst) = *(_DWORD *)(*(void *)v18 + 8);
          if (__dst) {
            sub_1CBB29A9C((uint64_t)v191, (int *)&__dst);
          }
          v18 += 16;
          v19 -= 16;
        }
        while (v19);
        int v18 = (char *)v206;
      }
      if (v18 != v208) {
        free(v18);
      }
    }
    uint64_t v20 = (unsigned int *)v193;
    uint64_t v21 = v194;
    uint64_t v176 = a8;
    if (v194 == v193)
    {
      uint64_t v20 = v194;
    }
    else
    {
      uint64_t v22 = 0;
      unsigned int v23 = 0;
      do
      {
        uint64_t v24 = *(const llvm::rdf::DataFlowGraph **)a2;
        unsigned int v25 = v20[v22];
        if (v25) {
          uint64_t v26 = (llvm::rdf::RefNode *)(*(void *)(*((void *)v24 + 37) + 8 * ((v25 - 1) >> *((_DWORD *)v24 + 69)))
        }
                                     + 32 * (*((_DWORD *)v24 + 70) & (v25 - 1)));
        else {
          uint64_t v26 = 0;
        }
        if ((*(_WORD *)v26 & 0x80) == 0)
        {
          int RegRef = llvm::rdf::RefNode::getRegRef(v26, v24);
          if ((*(_WORD *)v26 & 0x500) == 0x100 || (sub_1CC3FA190(RegRef, v28, a3, a4, *(void *)(a2 + 16)) & 1) == 0)
          {
            unint64_t v29 = *(llvm::rdf::DataFlowGraph **)a2;
            uint64_t v30 = (_WORD *)llvm::rdf::RefNode::getOwner(v26, *(const llvm::rdf::DataFlowGraph **)a2);
            llvm::rdf::DataFlowGraph::getRelatedRefs(v29, v26, v30, v31, v25, (uint64_t)&v206);
            unsigned int v32 = (char *)v206;
            if (v207)
            {
              uint64_t v33 = 16 * v207;
              do
              {
                LODWORD(__dst) = *(_DWORD *)(*(void *)v32 + 8);
                if (__dst) {
                  sub_1CBB29A9C((uint64_t)v191, (int *)&__dst);
                }
                v32 += 16;
                v33 -= 16;
              }
              while (v33);
              unsigned int v32 = (char *)v206;
            }
            if (v32 != v208) {
              free(v32);
            }
          }
        }
        uint64_t v20 = (unsigned int *)v193;
        uint64_t v21 = v194;
        uint64_t v22 = ++v23;
      }
      while (v23 < (unint64_t)(((char *)v194 - (unsigned char *)v193) >> 2));
    }
    uint64_t v206 = v208;
    uint64_t v207 = 0x2000000000;
    uint64_t v211 = 0;
    uint64_t v210 = 0;
    uint64_t v209 = &v210;
    uint64_t v187 = 0;
    uint64_t v188 = 0;
    uint64_t v185 = 0;
    uint64_t v186 = &v187;
    unint64_t v183 = (uint64_t *)&v184;
    uint64_t v184 = 0;
    if (v20 != v21)
    {
      do
      {
        uint64_t v34 = *v20;
        uint64_t v35 = *(const llvm::rdf::DataFlowGraph **)a2;
        if (v34) {
          int v36 = (unsigned char *)(*(void *)(*((void *)v35 + 37) + 8 * ((v34 - 1) >> *((_DWORD *)v35 + 69)))
        }
                        + 32 * (*((_DWORD *)v35 + 70) & (v34 - 1)));
        else {
          int v36 = 0;
        }
        __dst = v36;
        uint64_t v203 = v34;
        if ((*v36 & 0x80) != 0
          || (unint64_t v37 = *(void **)(a2 + 16),
              int v38 = llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)v36, v35),
              sub_1CC3F83B8(v37, a3, a4, v38, v39)))
        {
          sub_1CB946958((uint64_t)&v206, (unsigned int *)&v203);
          int v40 = (uint64_t *)llvm::rdf::RefNode::getOwner((llvm::rdf::RefNode *)__dst, *(const llvm::rdf::DataFlowGraph **)a2);
          int v42 = v41;
          int v43 = v203;
          int v44 = v187;
          int v45 = &v187;
          uint64_t v46 = &v187;
          if (v187)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v46 = (uint64_t **)v44;
                unsigned int v47 = *((_DWORD *)v44 + 8);
                if (v47 <= v203) {
                  break;
                }
                int v44 = *v46;
                int v45 = v46;
                if (!*v46) {
                  goto LABEL_45;
                }
              }
              if (v47 >= v203) {
                break;
              }
              int v44 = v46[1];
              if (!v44)
              {
                int v45 = v46 + 1;
                goto LABEL_45;
              }
            }
          }
          else
          {
LABEL_45:
            BOOL v48 = (uint64_t *)v46;
            uint64_t v46 = (uint64_t **)operator new(0x38uLL);
            *((_DWORD *)v46 + 8) = v43;
            *uint64_t v46 = 0;
            v46[1] = 0;
            v46[5] = 0;
            v46[6] = 0;
            v46[2] = v48;
            *int v45 = (uint64_t *)v46;
            unint64_t v49 = (uint64_t *)v46;
            if (*v186)
            {
              uint64_t v186 = (uint64_t **)*v186;
              unint64_t v49 = *v45;
            }
            sub_1CB8358B8(v187, v49);
            ++v188;
          }
          v46[5] = v40;
          *((_DWORD *)v46 + 12) = v42;
          if ((*(_WORD *)v40 & 0x1C) == 0x10) {
            uint64_t v50 = (uint64_t **)(v40[1] + 24);
          }
          else {
            uint64_t v50 = (uint64_t **)(llvm::rdf::InstrNode::getOwner((llvm::rdf::InstrNode *)v40, *(const llvm::rdf::DataFlowGraph **)a2)+ 8);
          }
          unsigned int v51 = *v50;
          unint64_t v52 = v184;
          for (i = &v184; ; unint64_t v52 = *i)
          {
            __int16 v54 = i;
            if (!v52) {
              break;
            }
            while (1)
            {
              unsigned int i = (uint64_t **)v52;
              unint64_t v55 = v52[4];
              if (v55 > (unint64_t)v51) {
                break;
              }
              if (v55 >= (unint64_t)v51) {
                goto LABEL_61;
              }
              unint64_t v52 = i[1];
              if (!v52)
              {
                __int16 v54 = i + 1;
                goto LABEL_58;
              }
            }
          }
LABEL_58:
          int v56 = (uint64_t *)i;
          unsigned int i = (uint64_t **)operator new(0xB8uLL);
          i[4] = v51;
          i[5] = (uint64_t *)(i + 7);
          i[6] = (uint64_t *)0x2000000000;
          void *i = 0;
          i[1] = 0;
          i[2] = v56;
          *__int16 v54 = (uint64_t *)i;
          uint64_t v57 = (uint64_t *)i;
          if (*v183)
          {
            unint64_t v183 = (uint64_t *)*v183;
            uint64_t v57 = *v54;
          }
          sub_1CB8358B8(v184, v57);
          ++v185;
LABEL_61:
          unint64_t v58 = *((unsigned int *)i + 12);
          if (v58 >= *((unsigned int *)i + 13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)i[5] + v58) = v42;
          ++*((_DWORD *)i + 12);
        }
        ++v20;
      }
      while (v20 != v21);
      uint64_t v59 = v183;
      if (v183 != (uint64_t *)&v184)
      {
        long long __p = 0;
        BOOL v60 = 0;
        uint64_t v61 = 0;
        while (1)
        {
          if (v60 >= v61)
          {
            uint64_t v62 = (v60 - __p) >> 3;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 61) {
LABEL_274:
            }
              abort();
            if ((v61 - __p) >> 2 > v63) {
              unint64_t v63 = (v61 - __p) >> 2;
            }
            unint64_t v64 = (unint64_t)(v61 - __p) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v63;
            if (v64)
            {
              if (v64 >> 61) {
LABEL_275:
              }
                sub_1CB833614();
              uint64_t v65 = (char *)operator new(8 * v64);
            }
            else
            {
              uint64_t v65 = 0;
            }
            int v66 = &v65[8 * v62];
            *(void *)int v66 = v59[4];
            unsigned int v67 = v66 + 8;
            while (v60 != __p)
            {
              uint64_t v68 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v66 - 1) = v68;
              v66 -= 8;
            }
            uint64_t v61 = &v65[8 * v64];
            if (__p) {
              operator delete(__p);
            }
            long long __p = v66;
            BOOL v60 = v67;
          }
          else
          {
            *(void *)BOOL v60 = v59[4];
            v60 += 8;
          }
          unint64_t v69 = *((unsigned int *)v59 + 12);
          if (v69 >= 3)
          {
            uint64_t v70 = v59[4];
            uint64_t v71 = (unsigned char *)(v70 + 48);
            uint64_t v72 = *(unsigned char **)(v70 + 56);
            if (v72 != (unsigned char *)(v70 + 48)) {
              break;
            }
          }
LABEL_112:
          uint64_t v83 = v59[5];
          __dst = (void *)a2;
          uint64_t v203 = (uint64_t)v189;
          unint64_t v84 = 126 - 2 * __clz(v69);
          if (v69) {
            uint64_t v85 = v84;
          }
          else {
            uint64_t v85 = 0;
          }
          sub_1CC4042D4(v83, (unsigned int *)(v83 + 4 * v69), (uint64_t)&__dst, v85, 1);
          uint64_t v86 = (uint64_t *)v59[1];
          if (v86)
          {
            do
            {
              unsigned int v87 = (uint64_t **)v86;
              uint64_t v86 = (uint64_t *)*v86;
            }
            while (v86);
          }
          else
          {
            do
            {
              unsigned int v87 = (uint64_t **)v59[2];
              BOOL v79 = *v87 == v59;
              uint64_t v59 = (uint64_t *)v87;
            }
            while (!v79);
          }
          uint64_t v59 = (uint64_t *)v87;
          if (v87 == &v184) {
            goto LABEL_123;
          }
        }
        int v73 = 0;
        while (1)
        {
          ++v73;
          __dst = v72;
          LODWORD(v203) = v73;
          if (v190)
          {
            unsigned int v74 = (v190 - 1) & ((v72 >> 4) ^ (v72 >> 9));
            unint64_t v75 = (void *)(v189[0] + 16 * v74);
            unsigned int v76 = (unsigned char *)*v75;
            if (v72 == (unsigned char *)*v75)
            {
LABEL_99:
              if (!v72) {
                goto LABEL_108;
              }
              goto LABEL_105;
            }
            unint64_t v77 = 0;
            int v78 = 1;
            while (v76 != (unsigned char *)-4096)
            {
              if (v77) {
                BOOL v79 = 0;
              }
              else {
                BOOL v79 = v76 == (unsigned char *)-8192;
              }
              if (v79) {
                unint64_t v77 = v75;
              }
              unsigned int v80 = v74 + v78++;
              unsigned int v74 = v80 & (v190 - 1);
              unint64_t v75 = (void *)(v189[0] + 16 * v74);
              unsigned int v76 = (unsigned char *)*v75;
              if (v72 == (unsigned char *)*v75) {
                goto LABEL_99;
              }
            }
            if (v77) {
              uint64_t v81 = v77;
            }
            else {
              uint64_t v81 = v75;
            }
          }
          else
          {
            uint64_t v81 = 0;
          }
          int v82 = sub_1CB9A052C((uint64_t)v189, (uint64_t)&__dst, (uint64_t *)&__dst, v81);
          *int v82 = __dst;
          *((_DWORD *)v82 + 2) = v203;
          if (!v72) {
            goto LABEL_108;
          }
LABEL_105:
          if ((*v72 & 4) == 0)
          {
LABEL_108:
            while ((*((_WORD *)v72 + 22) & 8) != 0)
              uint64_t v72 = (unsigned char *)*((void *)v72 + 1);
          }
          uint64_t v72 = (unsigned char *)*((void *)v72 + 1);
          if (v72 == v71)
          {
            unint64_t v69 = *((unsigned int *)v59 + 12);
            goto LABEL_112;
          }
        }
      }
    }
    BOOL v60 = 0;
    long long __p = 0;
LABEL_123:
    unint64_t v88 = 126 - 2 * __clz((v60 - __p) >> 3);
    __dst = (void *)a2;
    if (v60 == __p) {
      uint64_t v89 = 0;
    }
    else {
      uint64_t v89 = v88;
    }
    sub_1CC4051E0(__p, v60, (uint64_t)&__dst, v89, 1);
    if (v60 != __p)
    {
      unsigned int v90 = 0;
      unsigned int v91 = 0;
      long long v92 = 0;
      while (1)
      {
        int v94 = (uint64_t *)*((void *)v60 - 1);
        v60 -= 8;
        uint64_t v93 = v94;
        uint64_t v95 = v184;
        for (uint64_t j = &v184; ; v95 = *j)
        {
          uint64_t v97 = j;
          if (!v95) {
            break;
          }
          while (1)
          {
            uint64_t j = (uint64_t **)v95;
            unint64_t v98 = v95[4];
            if (v98 > (unint64_t)v93) {
              break;
            }
            if (v98 >= (unint64_t)v93) {
              goto LABEL_138;
            }
            uint64_t v95 = j[1];
            if (!v95)
            {
              uint64_t v97 = j + 1;
              goto LABEL_135;
            }
          }
        }
LABEL_135:
        uint64_t v99 = (uint64_t *)j;
        uint64_t j = (uint64_t **)operator new(0xB8uLL);
        j[4] = v93;
        j[5] = (uint64_t *)(j + 7);
        j[6] = (uint64_t *)0x2000000000;
        uint64_t *j = 0;
        j[1] = 0;
        j[2] = v99;
        void *v97 = (uint64_t *)j;
        __int16 v100 = (uint64_t *)j;
        if (*v183)
        {
          unint64_t v183 = (uint64_t *)*v183;
          __int16 v100 = *v97;
        }
        sub_1CB8358B8(v184, v100);
        ++v185;
LABEL_138:
        uint64_t v101 = *((unsigned int *)j + 12);
        if (v101)
        {
          int v102 = j[5];
          uint64_t v103 = (v91 - v90) >> 2;
          int v104 = &v90[(v91 - v90) & 0xFFFFFFFFFFFFFFFCLL];
          if (v101 > (v92 - v91) >> 2)
          {
            unint64_t v105 = v103 + v101;
            if ((unint64_t)(v103 + v101) >> 62) {
              goto LABEL_274;
            }
            if ((v92 - v90) >> 1 > v105) {
              unint64_t v105 = (v92 - v90) >> 1;
            }
            if ((unint64_t)(v92 - v90) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106)
            {
              if (v106 >> 62) {
                goto LABEL_275;
              }
              int v107 = (char *)operator new(4 * v106);
              uint64_t v103 = (v91 - v90) >> 2;
            }
            else
            {
              int v107 = 0;
            }
            uint64_t v115 = &v107[4 * v103];
            uint64_t v116 = &v115[4 * v101];
            uint64_t v117 = 4 * v101;
            uint64_t v118 = (char *)v102 - 4;
            unint64_t v108 = v115;
            do
            {
              *(_DWORD *)uint64_t v115 = *(_DWORD *)&v118[v117];
              v115 += 4;
              v117 -= 4;
            }
            while (v117);
            if (v90 != v91)
            {
              uint64_t v119 = 4 * v103;
              do
              {
                *(_DWORD *)&v107[v119 - 4] = *(_DWORD *)&v90[v119 - 4];
                v119 -= 4;
              }
              while (v119);
              unint64_t v108 = v107;
            }
            size_t v120 = v91 - v104;
            if (v120) {
              memmove(v116, v104, v120);
            }
            long long v92 = &v107[4 * v106];
            unsigned int v91 = &v116[v120];
            if (v90) {
              operator delete(v90);
            }
            goto LABEL_181;
          }
          unint64_t v109 = (uint64_t *)((char *)v102 + 4 * v101);
          uint64_t v110 = (v91 - v104) >> 2;
          if (v110 >= v101)
          {
            uint64_t v113 = v91;
          }
          else
          {
            unint64_t v111 = (uint64_t *)((char *)v109 - 4 * v110);
            if (v111 == v102)
            {
              uint64_t v113 = v91;
            }
            else
            {
              uint64_t v112 = 4 * v101 - 4 * v110;
              uint64_t v113 = v91;
              uint64_t v114 = v91;
              do
              {
                *(_DWORD *)uint64_t v114 = *(_DWORD *)((char *)v102 + v112 - 4);
                v114 += 4;
                v113 += 4;
                v112 -= 4;
              }
              while (v112);
            }
            if (v91 - v104 < 1)
            {
              unint64_t v108 = v90;
              unsigned int v91 = v113;
              goto LABEL_181;
            }
            int v102 = v111;
          }
          unint64_t v121 = &v113[-4 * v101];
          uint64_t v122 = v113;
          while (v121 < v91)
          {
            int v123 = *(_DWORD *)v121;
            v121 += 4;
            *(_DWORD *)uint64_t v122 = v123;
            v122 += 4;
          }
          unint64_t v124 = &v104[4 * v101];
          if (v113 != v124)
          {
            memmove(&v113[-4 * ((v113 - v124) >> 2)], &v90[(v91 - v90) & 0xFFFFFFFFFFFFFFFCLL], v113 - v124);
            uint64_t v103 = (v91 - v90) >> 2;
          }
          if (v102 != v109)
          {
            uint64_t v125 = 4 * v103;
            unint64_t v126 = __p;
            do
            {
              int v127 = *((_DWORD *)v109 - 1);
              unint64_t v109 = (uint64_t *)((char *)v109 - 4);
              *(_DWORD *)&v90[v125] = v127;
              v125 += 4;
            }
            while (v109 != v102);
            unint64_t v108 = v90;
            unsigned int v91 = v122;
            goto LABEL_182;
          }
          unint64_t v108 = v90;
          unsigned int v91 = v122;
        }
        else
        {
          unint64_t v108 = v90;
        }
LABEL_181:
        unint64_t v126 = __p;
LABEL_182:
        unsigned int v90 = v108;
        if (v60 == v126) {
          goto LABEL_185;
        }
      }
    }
    unint64_t v108 = 0;
    unsigned int v91 = 0;
LABEL_185:
    __dst = v204;
    uint64_t v203 = 0x600000000;
    if (&__dst != (void **)v176)
    {
      unsigned int v128 = *(_DWORD *)(v176 + 8);
      if (v128)
      {
        if (v128 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v204, *(const void **)v176, 8 * *(unsigned int *)(v176 + 8));
        LODWORD(v203) = v128;
      }
    }
    v204[12] = *(_DWORD *)(v176 + 64);
    uint64_t v205 = *(void *)(v176 + 72);
    int v177 = v108;
    if (v108 != v91)
    {
      uint64_t v129 = v108;
      do
      {
        int v130 = *(_DWORD *)v129;
        if (a7 & 1) == 0 && (llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)&__dst, a3, a4)) {
          break;
        }
        uint64_t v131 = *(const llvm::rdf::DataFlowGraph **)a2;
        int v132 = *(_DWORD *)(*(void *)a2 + 276);
        int v133 = *(_DWORD *)(*(void *)a2 + 280);
        uint64_t v134 = *(void *)(*(void *)a2 + 296);
        uint64_t v135 = (__int16 *)(*(void *)(v134 + 8 * ((v130 - 1) >> v132))
                         + 32 * (v133 & (v130 - 1)));
        __int16 v136 = *v135;
        __src = v201;
        uint64_t v200 = 0x400000000;
        uint64_t v196 = v198;
        uint64_t v197 = 0x400000000;
        unsigned int v137 = *((_DWORD *)v135 + 4);
        if (v137)
        {
          uint64_t v138 = *(void *)(v134 + 8 * ((v137 - 1) >> v132)) + 32 * (v133 & (v137 - 1));
          if (v135 != (__int16 *)v138)
          {
            unsigned int v139 = 0;
            int v140 = v136 & 0x1F;
            do
            {
              if ((*(_WORD *)v138 & 0x1C) == 4)
              {
                uint64_t v141 = v137;
                if (v211)
                {
                  for (unsigned int k = v210; k; unsigned int k = (void *)*k)
                  {
                    unsigned int v143 = *((_DWORD *)k + 7);
                    if (v143 <= v141)
                    {
                      if (v143 >= v141) {
                        goto LABEL_211;
                      }
                      ++k;
                    }
                  }
                }
                else if (v207)
                {
                  int v144 = v206;
                  uint64_t v145 = 4 * v207;
                  while (*v144 != v141)
                  {
                    ++v144;
                    v145 -= 4;
                    if (!v145) {
                      goto LABEL_213;
                    }
                  }
                  if (v145)
                  {
LABEL_211:
                    if (v139 >= HIDWORD(v197)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    uint64_t v146 = (char *)v196 + 16 * v139;
                    *uint64_t v146 = v138;
                    v146[1] = v141;
                    unsigned int v139 = v197 + 1;
                    LODWORD(v197) = v197 + 1;
                  }
                }
              }
LABEL_213:
              unsigned int v137 = *(_DWORD *)(v138 + 4);
              if (v137) {
                uint64_t v138 = *(void *)(*((void *)v131 + 37) + 8 * ((v137 - 1) >> *((_DWORD *)v131 + 69)))
              }
                     + 32 * (*((_DWORD *)v131 + 70) & (v137 - 1));
              else {
                uint64_t v138 = 0;
              }
            }
            while ((__int16 *)v138 != v135);
            BOOL v147 = (llvm::rdf::RefNode **)v196;
            if (v139)
            {
              uint64_t v148 = (llvm::rdf::RefNode **)((char *)v196 + 16 * v139);
              if (v140 == 13) {
                char v149 = 1;
              }
              else {
                char v149 = a7;
              }
              do
              {
                unint64_t v150 = *v147;
                unsigned __int8 v151 = (llvm::rdf::RefNode *)*((unsigned int *)v147 + 2);
                int v152 = llvm::rdf::RefNode::getRegRef(*v147, *(const llvm::rdf::DataFlowGraph **)a2);
                if ((v149 & 1) != 0 || (llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)&__dst, v152, v153) & 1) == 0)
                {
                  if (v200 >= (unint64_t)HIDWORD(v200)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v154 = (llvm::rdf::RefNode **)((char *)__src + 16 * v200);
                  *unint64_t v154 = v150;
                  v154[1] = v151;
                  LODWORD(v200) = v200 + 1;
                }
                v147 += 2;
              }
              while (v147 != v148);
              BOOL v147 = (llvm::rdf::RefNode **)v196;
            }
            if (v147 != (llvm::rdf::RefNode **)v198) {
              free(v147);
            }
          }
        }
        sub_1CC4061A4(a9, *(void *)a9 + 16 * a9[2], (char *)__src, (char *)__src + 16 * v200);
        uint64_t v155 = (llvm::rdf::RefNode **)__src;
        if (v200)
        {
          uint64_t v156 = 16 * v200;
          do
          {
            __int16 v157 = *(_WORD *)*v155;
            if ((v157 & 0x80) != 0) {
              int v158 = a7 ^ 1;
            }
            else {
              int v158 = 1;
            }
            int v159 = v157 & 0x100;
            if (v158 == 1 && v159 == 0)
            {
              int v161 = llvm::rdf::RefNode::getRegRef(*v155, *(const llvm::rdf::DataFlowGraph **)a2);
              llvm::rdf::RegisterAggr::insert((uint64_t)&__dst, v161, v162);
            }
            v155 += 2;
            v156 -= 16;
          }
          while (v156);
          uint64_t v155 = (llvm::rdf::RefNode **)__src;
        }
        if (v155 != (llvm::rdf::RefNode **)v201) {
          free(v155);
        }
        v129 += 4;
      }
      while (v129 != v91);
    }
    uint64_t v163 = *(char **)a9;
    uint64_t v164 = a9[2];
    if (v164)
    {
      uint64_t v165 = &v163[16 * v164];
      uint64_t v166 = 16 * v164 - 16;
      unint64_t v167 = *(char **)a9;
      uint64_t v168 = *(char **)a9;
      while (1)
      {
        unsigned int v169 = *(_WORD **)v168;
        v168 += 16;
        if ((*v169 & 0x800) != 0) {
          break;
        }
        v166 -= 16;
        unint64_t v167 = v168;
        if (v168 == v165)
        {
          uint64_t v170 = __p;
LABEL_261:
          unsigned int v171 = v177;
          goto LABEL_262;
        }
      }
      uint64_t v170 = __p;
      if (v168 == v165)
      {
        uint64_t v165 = v167;
        goto LABEL_261;
      }
      uint64_t v172 = 16;
      uint64_t v165 = v167;
      unsigned int v171 = v177;
      do
      {
        uint64_t v173 = &v167[v172];
        if ((**(_WORD **)&v167[v172] & 0x800) == 0)
        {
          uint64_t v174 = *(_WORD **)v173;
          *((_DWORD *)v165 + 2) = *((_DWORD *)v173 + 2);
          *(void *)uint64_t v165 = v174;
          v165 += 16;
        }
        v172 += 16;
        v166 -= 16;
      }
      while (v166);
      uint64_t v163 = *(char **)a9;
    }
    else
    {
      uint64_t v165 = *(char **)a9;
      unsigned int v171 = v177;
      uint64_t v170 = __p;
    }
LABEL_262:
    a9[2] = (unint64_t)(v165 - v163) >> 4;
    if (__dst != v204) {
      free(__dst);
    }
    if (v171) {
      operator delete(v171);
    }
    if (v170) {
      operator delete(v170);
    }
    sub_1CC4040C0(v184);
    sub_1CBB0D544(v187);
    sub_1CB833A08((uint64_t)&v209, v210);
    if (v206 != v208) {
      free(v206);
    }
    uint64_t v10 = v189[0];
  }
  MEMORY[0x1D25D9CD0](v10, 8);
  if (v193)
  {
    uint64_t v194 = (unsigned int *)v193;
    operator delete(v193);
  }
  return MEMORY[0x1D25D9CD0](v191[0], 4);
}

BOOL sub_1CC3FCF24(_WORD *a1)
{
  return (*a1 & 0x1F) == 13;
}

void llvm::rdf::Liveness::getAllReachingDefsRec(const llvm::rdf::DataFlowGraph **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::rdf::RefNode *a4@<X3>, unsigned int a5@<W4>, uint64_t **a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
}

void llvm::rdf::Liveness::getAllReachingDefsRecImpl(const llvm::rdf::DataFlowGraph **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::rdf::RefNode *a4@<X3>, unsigned int a5@<W4>, uint64_t **a6@<X5>, void *a7@<X6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (a8 <= a10)
  {
    int v16 = a1[2];
    int v17 = *(_DWORD *)(*(void *)v16 + 44);
    int v82 = v85;
    int v84 = 6;
    if ((v17 + 63) >= 0x1C0)
    {
      unsigned int v83 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v17 + 63) >= 0x40) {
      bzero(v85, 8 * ((v17 + 63) >> 6));
    }
    unsigned int v83 = (v17 + 63) >> 6;
    v85[12] = v17;
    uint64_t v86 = v16;
    int v18 = (void *)*a7;
    if ((void *)*a7 != a7 + 1)
    {
      do
      {
        uint64_t v19 = (llvm::rdf::RefNode *)(*(void *)(*((void *)*a1 + 37)
                                               + 8
                                               * ((*((_DWORD *)v18 + 7) - 1) >> *((_DWORD *)*a1 + 69)))
                                   + 32 * (*((_DWORD *)*a1 + 70) & (*((_DWORD *)v18 + 7) - 1)));
        if ((*(_WORD *)v19 & 0x80) == 0)
        {
          int RegRef = llvm::rdf::RefNode::getRegRef(v19, *a1);
          llvm::rdf::RegisterAggr::insert((uint64_t)&v82, RegRef, v21);
        }
        uint64_t v22 = (void *)v18[1];
        if (v22)
        {
          do
          {
            unsigned int v23 = v22;
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unsigned int v23 = (void *)v18[2];
            BOOL v24 = *v23 == (void)v18;
            int v18 = v23;
          }
          while (!v24);
        }
        int v18 = v23;
      }
      while (v23 != a7 + 1);
    }
    llvm::rdf::Liveness::getAllReachingDefs(a4, (uint64_t)a1, a2, a3, a5, 0, 1, (uint64_t)&v82, (unsigned int *)&v79);
    if (v80)
    {
      uint64_t v60 = a9;
      sub_1CC4063DC((uint64_t)&v73, a7);
      if (v80)
      {
        unsigned int v25 = (char *)v79;
        uint64_t v26 = (char *)v79 + 16 * v80;
        do
        {
          unsigned int v27 = *((_DWORD *)v25 + 2);
          uint64_t v28 = v74;
          unint64_t v29 = &v74;
          uint64_t v30 = &v74;
          if (v74)
          {
            do
            {
              while (1)
              {
                uint64_t v30 = (uint64_t **)v28;
                unsigned int v31 = *((_DWORD *)v28 + 7);
                if (v27 >= v31) {
                  break;
                }
                uint64_t v28 = *v30;
                unint64_t v29 = v30;
                if (!*v30) {
                  goto LABEL_25;
                }
              }
              if (v31 >= v27) {
                goto LABEL_28;
              }
              uint64_t v28 = v30[1];
            }
            while (v28);
            unint64_t v29 = v30 + 1;
          }
LABEL_25:
          unsigned int v32 = operator new(0x20uLL);
          v32[7] = v27;
          *(void *)unsigned int v32 = 0;
          *((void *)v32 + 1) = 0;
          *((void *)v32 + 2) = v30;
          *unint64_t v29 = (uint64_t *)v32;
          if (*v73)
          {
            int v73 = (void *)*v73;
            unsigned int v32 = *v29;
          }
          sub_1CB8358B8(v74, (uint64_t *)v32);
          ++v75;
LABEL_28:
          v25 += 16;
        }
        while (v25 != v26);
      }
      sub_1CC4063DC((uint64_t)&v70, a7);
      if (v80)
      {
        uint64_t v33 = (llvm::rdf::RefNode **)v79;
        uint64_t v65 = (llvm::rdf::RefNode **)((char *)v79 + 16 * v80);
        unint64_t v63 = (uint64_t *)(a6 + 1);
        uint64_t v34 = a8 + 1;
        while (1)
        {
          uint64_t v35 = *v33;
          unsigned int v36 = *((_DWORD *)v33 + 2);
          unint64_t v37 = &v71;
          int v38 = &v71;
          uint64_t v39 = v71;
          if (v71)
          {
            do
            {
              while (1)
              {
                int v38 = (uint64_t **)v39;
                unsigned int v40 = *((_DWORD *)v39 + 7);
                if (v36 >= v40) {
                  break;
                }
                uint64_t v39 = *v38;
                unint64_t v37 = v38;
                if (!*v38) {
                  goto LABEL_37;
                }
              }
              if (v40 >= v36) {
                goto LABEL_40;
              }
              uint64_t v39 = v38[1];
            }
            while (v39);
            unint64_t v37 = v38 + 1;
          }
LABEL_37:
          int v41 = operator new(0x20uLL);
          v41[7] = v36;
          *(void *)int v41 = 0;
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = v38;
          *unint64_t v37 = (uint64_t *)v41;
          if (*v70)
          {
            uint64_t v70 = (void *)*v70;
            int v41 = *v37;
          }
          sub_1CB8358B8(v71, (uint64_t *)v41);
          ++v72;
LABEL_40:
          if ((*(_WORD *)v35 & 0x80) != 0)
          {
            int v42 = *a1;
            uint64_t Owner = llvm::rdf::RefNode::getOwner(v35, *a1);
            unsigned int v45 = v44;
            uint64_t v46 = a6 + 1;
            uint64_t v47 = *v63;
            BOOL v48 = a6 + 1;
            if (*v63)
            {
              unint64_t v49 = (uint64_t *)*v63;
              do
              {
                unsigned int v50 = *((_DWORD *)v49 + 7);
                if (v50 <= v44)
                {
                  if (v50 >= v44) {
                    goto LABEL_71;
                  }
                  ++v49;
                }
                unint64_t v49 = (uint64_t *)*v49;
              }
              while (v49);
              do
              {
                while (1)
                {
                  uint64_t v46 = (void *)v47;
                  unsigned int v51 = *(_DWORD *)(v47 + 28);
                  if (v51 <= v44) {
                    break;
                  }
                  uint64_t v47 = *v46;
                  BOOL v48 = v46;
                  if (!*v46) {
                    goto LABEL_52;
                  }
                }
                if (v51 >= v44) {
                  goto LABEL_55;
                }
                uint64_t v47 = v46[1];
              }
              while (v47);
              BOOL v48 = v46 + 1;
            }
LABEL_52:
            uint64_t v62 = Owner;
            unint64_t v52 = operator new(0x20uLL);
            v52[7] = v45;
            *(void *)unint64_t v52 = 0;
            *((void *)v52 + 1) = 0;
            *((void *)v52 + 2) = v46;
            *BOOL v48 = v52;
            unsigned int v53 = (uint64_t *)**a6;
            if (v53)
            {
              *a6 = v53;
              unint64_t v52 = (_DWORD *)*v48;
            }
            sub_1CB8358B8(a6[1], (uint64_t *)v52);
            a6[2] = (uint64_t *)((char *)a6[2] + 1);
            int v42 = *a1;
            uint64_t Owner = v62;
LABEL_55:
            sub_1CC3F9160(Owner, (uint64_t (*)(uint64_t, void))sub_1CC3FD580, (uint64_t)v42, (uint64_t)&v76);
            if (v77)
            {
              __int16 v54 = (char *)v76;
              unint64_t v55 = (char *)v76 + 16 * v77;
              while (1)
              {
                llvm::rdf::Liveness::getAllReachingDefsRecImpl(&v67, a1, a2, a3, *(void *)v54, *((unsigned int *)v54 + 2), a6, &v73, v34, a10);
                if (!v69) {
                  break;
                }
                int v56 = v67;
                if (v67 != (unsigned int *)v68)
                {
                  do
                  {
                    sub_1CC406474(&v70, (uint64_t *)&v71, v56 + 7, v56 + 7);
                    uint64_t v57 = (unsigned int *)*((void *)v56 + 1);
                    if (v57)
                    {
                      do
                      {
                        unint64_t v58 = v57;
                        uint64_t v57 = *(unsigned int **)v57;
                      }
                      while (v57);
                    }
                    else
                    {
                      do
                      {
                        unint64_t v58 = (unsigned int *)*((void *)v56 + 2);
                        BOOL v24 = *(void *)v58 == (void)v56;
                        int v56 = v58;
                      }
                      while (!v24);
                    }
                    int v56 = v58;
                  }
                  while (v58 != (unsigned int *)v68);
                }
                sub_1CB833A08((uint64_t)&v67, v68[0]);
                v54 += 16;
                if (v54 == v55) {
                  goto LABEL_66;
                }
              }
              *(unsigned char *)(sub_1CC4063DC(v60, &v67) + 24) = 0;
              sub_1CB833A08((uint64_t)&v67, v68[0]);
              int v59 = 0;
            }
            else
            {
LABEL_66:
              int v59 = 1;
            }
            if (v76 != &v78) {
              free(v76);
            }
            if (!v59) {
              break;
            }
          }
LABEL_71:
          v33 += 2;
          if (v33 == v65) {
            goto LABEL_72;
          }
        }
      }
      else
      {
LABEL_72:
        *(unsigned char *)(sub_1CC4063DC(v60, &v70) + 24) = 1;
      }
      sub_1CB833A08((uint64_t)&v70, v71);
      sub_1CB833A08((uint64_t)&v73, v74);
    }
    else
    {
      sub_1CC4063DC(a9, a7);
      *(unsigned char *)(a9 + 24) = 1;
    }
    if (v79 != &v81) {
      free(v79);
    }
    if (v82 != v85) {
      free(v82);
    }
  }
  else
  {
    *(void *)(a9 + 16) = 0;
    *(void *)(a9 + 8) = 0;
    *(void *)a9 = a9 + 8;
    *(unsigned char *)(a9 + 24) = 0;
  }
}

BOOL sub_1CC3FD580(_WORD *a1)
{
  return (*a1 & 0x1F) == 10;
}

llvm::rdf::RefNode *llvm::rdf::Liveness::getNearestAliasedRef(unint64_t *a1, int a2, uint64_t a3, llvm::rdf::InstrNode *this, int a5)
{
  v55[8] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *a1;
  uint64_t Owner = llvm::rdf::InstrNode::getOwner(this, (const llvm::rdf::DataFlowGraph *)*a1);
  llvm::rdf::CodeNode::members(Owner, (const llvm::rdf::DataFlowGraph *)v7, (uint64_t)&__dst);
  uint64_t v9 = (char *)__dst;
  uint64_t v10 = 16 * v54;
  uint64_t v44 = Owner;
  while (v10)
  {
    int v11 = *(_DWORD *)((char *)__dst + v10 - 8);
    v10 -= 16;
    if (v11 == a5)
    {
      uint64_t v12 = (char *)__dst + v10 + 16;
      goto LABEL_6;
    }
  }
  uint64_t v12 = (char *)__dst;
LABEL_6:
  if (v12 == __dst) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = -1;
  }
  for (unsigned int i = &v12[16 * v13]; i == v9; unsigned int i = (char *)__dst + 16 * v41)
  {
LABEL_26:
    uint64_t v26 = *(void *)(v44 + 8);
    unint64_t v27 = a1[3];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v27);
    uint64_t v28 = *(void *)(v27 + 1320);
    uint64_t v29 = *(void *)(v28 + 24);
    uint64_t v30 = *(unsigned int *)(v28 + 40);
    if (!v30) {
      goto LABEL_32;
    }
    LODWORD(v31) = (v30 - 1) & ((v26 >> 4) ^ (v26 >> 9));
    unsigned int v32 = (uint64_t *)(v29 + 16 * v31);
    uint64_t v33 = *v32;
    if (*v32 != v26)
    {
      int v34 = 1;
      while (v33 != -4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        uint64_t v33 = *(void *)(v29 + 16 * v31);
        if (v33 == v26)
        {
          unsigned int v32 = (uint64_t *)(v29 + 16 * v31);
          goto LABEL_33;
        }
      }
LABEL_32:
      unsigned int v32 = (uint64_t *)(v29 + 16 * v30);
    }
LABEL_33:
    if (v32 == (uint64_t *)(v29 + 16 * v30)
      || (uint64_t v36 = v32[1]) == 0
      || (unint64_t v37 = *(void ***)(v36 + 8)) == 0
      || (int v38 = (const llvm::rdf::DataFlowGraph *)*a1,
          unsigned int v50 = *v37,
          uint64_t v39 = sub_1CC3FA140((uint64_t)v38 + 416, (unint64_t *)&v50),
          !*((_DWORD *)v39 + 2)))
    {
      int v18 = 0;
      goto LABEL_57;
    }
    uint64_t v44 = *v39;
    llvm::rdf::CodeNode::members(*v39, (const llvm::rdf::DataFlowGraph *)*a1, (uint64_t)&v50);
    unsigned int v40 = v50;
    if (v50 == v52)
    {
      unsigned int v41 = v51;
      uint64_t v42 = v54;
      if (v54 >= v51)
      {
        if (v51) {
          memmove(__dst, v52, 16 * v51 - 4);
        }
      }
      else
      {
        if (HIDWORD(v54) < v51)
        {
          LODWORD(v54) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v54) {
          memmove(__dst, v52, 16 * v54 - 4);
        }
        else {
          uint64_t v42 = 0;
        }
        if (v42 != v51) {
          memcpy((char *)__dst + 16 * v42, (char *)v50 + 16 * v42, 16 * v51 - 16 * v42);
        }
      }
      LODWORD(v54) = v41;
    }
    else
    {
      if (__dst != v55)
      {
        free(__dst);
        unsigned int v40 = v50;
      }
      __dst = v40;
      uint64_t v54 = v51;
      unsigned int v50 = v52;
      HIDWORD(v51) = 0;
      unsigned int v41 = v54;
    }
    LODWORD(v51) = 0;
    if (v50 != v52)
    {
      free(v50);
      unsigned int v41 = v54;
    }
    uint64_t v9 = (char *)__dst;
  }
  unsigned int v45 = v9;
  while (1)
  {
    uint64_t v15 = *((void *)i - 2);
    i -= 16;
    llvm::rdf::CodeNode::members(v15, (const llvm::rdf::DataFlowGraph *)*a1, (uint64_t)&v50);
    int v16 = (unsigned int *)v50;
    if (v51) {
      break;
    }
LABEL_23:
    if (v16 != (unsigned int *)v52) {
      free(v16);
    }
    if (i == v9) {
      goto LABEL_26;
    }
  }
  uint64_t v46 = i;
  uint64_t v47 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = (unsigned int *)((char *)v50 + 16 * v51);
  do
  {
    uint64_t v21 = *(llvm::rdf::RefNode **)v16;
    uint64_t v22 = v16[2];
    unint64_t v7 = v7 & 0xFFFFFFFF00000000 | v22;
    unsigned int v23 = (void *)a1[2];
    int RegRef = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v16, (const llvm::rdf::DataFlowGraph *)*a1);
    if (sub_1CC3F83B8(v23, RegRef, v25, a2, a3))
    {
      if ((*(_WORD *)v21 & 0x1F) == 6)
      {
        int v19 = v22;
        int v18 = v21;
        if ((*(_WORD *)v21 & 0x40) == 0)
        {
          int v18 = v21;
          goto LABEL_55;
        }
      }
      else
      {
        int v17 = v22;
        uint64_t v47 = v21;
      }
    }
    v16 += 4;
  }
  while (v16 != v20);
  if (!v19)
  {
    if (!v17)
    {
      int v16 = (unsigned int *)v50;
      uint64_t v9 = v45;
      unsigned int i = v46;
      goto LABEL_23;
    }
    int v18 = v47;
  }
LABEL_55:
  if (v50 != v52) {
    free(v50);
  }
LABEL_57:
  if (__dst != v55) {
    free(__dst);
  }
  return v18;
}

void llvm::rdf::Liveness::getAllReachedUses(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  a6[1] = 0;
  uint64_t v9 = a6 + 1;
  a6[2] = 0;
  *a6 = (uint64_t)(a6 + 1);
  if ((llvm::rdf::RegisterAggr::hasCoverOf(a5, a2, a3) & 1) == 0)
  {
    if ((*(_WORD *)a4 & 0x800) == 0)
    {
      for (unsigned int i = *(_DWORD *)(a4 + 20); i; unsigned int i = *(_DWORD *)(v12 + 12))
      {
        uint64_t v11 = *(void *)(*(void *)(*(void *)a1 + 296) + 8 * ((i - 1) >> *(_DWORD *)(*(void *)a1 + 276)));
        uint64_t v12 = v11 + 32 * (*(_DWORD *)(*(void *)a1 + 280) & (i - 1));
        if ((*(_WORD *)v12 & 0x400) == 0)
        {
          int RegRef = llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)(v11 + 32 * (*(_DWORD *)(*(void *)a1 + 280) & (i - 1))), *(const llvm::rdf::DataFlowGraph **)a1);
          uint64_t v15 = v14;
          if (sub_1CC3F83B8(*(void **)(a1 + 16), a2, a3, RegRef, v14))
          {
            if ((llvm::rdf::RegisterAggr::hasCoverOf(a5, RegRef, v15) & 1) == 0)
            {
              uint64_t v16 = *v9;
              int v17 = a6 + 1;
              int v18 = a6 + 1;
              if (*v9)
              {
                do
                {
                  while (1)
                  {
                    int v18 = (void *)v16;
                    unsigned int v19 = *(_DWORD *)(v16 + 28);
                    if (i >= v19) {
                      break;
                    }
                    uint64_t v16 = *v18;
                    int v17 = v18;
                    if (!*v18) {
                      goto LABEL_13;
                    }
                  }
                  if (v19 >= i) {
                    goto LABEL_16;
                  }
                  uint64_t v16 = v18[1];
                }
                while (v16);
                int v17 = v18 + 1;
              }
LABEL_13:
              uint64_t v20 = operator new(0x20uLL);
              v20[7] = i;
              *(void *)uint64_t v20 = 0;
              *((void *)v20 + 1) = 0;
              *((void *)v20 + 2) = v18;
              void *v17 = v20;
              uint64_t v21 = *(uint64_t **)*a6;
              if (v21)
              {
                *a6 = (uint64_t)v21;
                uint64_t v20 = (_DWORD *)*v17;
              }
              sub_1CB8358B8((uint64_t *)a6[1], (uint64_t *)v20);
              ++a6[2];
            }
          }
        }
LABEL_16:
        ;
      }
    }
    unsigned int v22 = *(_DWORD *)(a4 + 16);
    while (v22)
    {
      unsigned int v23 = v22;
      BOOL v24 = (llvm::rdf::RefNode *)(*(void *)(*(void *)(*(void *)a1 + 296)
                                             + 8 * ((v22 - 1) >> *(_DWORD *)(*(void *)a1 + 276)))
                                 + 32 * (*(_DWORD *)(*(void *)a1 + 280) & (v22 - 1)));
      unsigned int v22 = *((_DWORD *)v24 + 3);
      int v25 = llvm::rdf::RefNode::getRegRef(v24, *(const llvm::rdf::DataFlowGraph **)a1);
      uint64_t v27 = v26;
      if ((llvm::rdf::RegisterAggr::hasCoverOf(a5, v25, v26) & 1) == 0
        && sub_1CC3F83B8(*(void **)(a1 + 16), a2, a3, v25, v27))
      {
        uint64_t v28 = v23;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        int v43 = (unsigned int *)&v44;
        if ((*(_WORD *)v24 & 0x500) == 0x100)
        {
          llvm::rdf::Liveness::getAllReachedUses(&__dst, a1, a2, a3, v24, v23, a5);
          sub_1CB833A08((uint64_t)&v43, v44);
          uint64_t v29 = (void *)v47;
          int v43 = (unsigned int *)__dst;
          uint64_t v44 = (void *)v47;
          uint64_t v45 = v48[0];
          if (v48[0])
          {
            *(void *)(v47 + 16) = &v44;
            __dst = &v47;
            uint64_t v47 = 0;
            v48[0] = 0;
            uint64_t v29 = 0;
          }
          else
          {
            int v43 = (unsigned int *)&v44;
          }
          sub_1CB833A08((uint64_t)&__dst, v29);
        }
        else
        {
          __dst = v48;
          uint64_t v47 = 0x600000000;
          uint64_t v30 = a5;
          if (&__dst != (void **)a5)
          {
            unint64_t v31 = *(unsigned int *)(a5 + 8);
            if (*(_DWORD *)(a5 + 8))
            {
              if (v31 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v48, *(const void **)a5, 8 * *(unsigned int *)(a5 + 8));
              uint64_t v30 = a5;
              LODWORD(v47) = v31;
            }
          }
          int v49 = *(_DWORD *)(v30 + 64);
          uint64_t v50 = *(void *)(v30 + 72);
          llvm::rdf::RegisterAggr::insert((uint64_t)&__dst, v25, v27);
          llvm::rdf::Liveness::getAllReachedUses(&v40, a1, a2, a3, v24, v28, &__dst);
          sub_1CB833A08((uint64_t)&v43, v44);
          unsigned int v32 = v41;
          int v43 = v40;
          uint64_t v44 = v41;
          uint64_t v45 = v42;
          if (v42)
          {
            v41[2] = &v44;
            unsigned int v40 = (unsigned int *)&v41;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            unsigned int v32 = 0;
          }
          else
          {
            int v43 = (unsigned int *)&v44;
          }
          sub_1CB833A08((uint64_t)&v40, v32);
          if (__dst != v48) {
            free(__dst);
          }
        }
        uint64_t v33 = v43;
        if (v43 != (unsigned int *)&v44)
        {
          do
          {
            sub_1CC406474((void **)a6, a6 + 1, v33 + 7, v33 + 7);
            int v34 = (unsigned int *)*((void *)v33 + 1);
            if (v34)
            {
              do
              {
                int v35 = v34;
                int v34 = *(unsigned int **)v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                int v35 = (unsigned int *)*((void *)v33 + 2);
                BOOL v36 = *(void *)v35 == (void)v33;
                uint64_t v33 = v35;
              }
              while (!v36);
            }
            uint64_t v33 = v35;
          }
          while (v35 != (unsigned int *)&v44);
        }
        sub_1CB833A08((uint64_t)&v43, v44);
      }
    }
  }
}

void llvm::rdf::Liveness::computePhiInfo(llvm::rdf::Liveness *this)
{
  unint64_t v5 = this;
  v510[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)this + 296;
  int v7 = *((_DWORD *)this + 76);
  if (!*((void *)this + 38)) {
    goto LABEL_26;
  }
  uint64_t v8 = *((unsigned int *)this + 78);
  uint64_t v9 = *((void *)this + 37);
  if (v8 <= 4 * v7 || v8 < 0x41)
  {
    if (!v8)
    {
LABEL_25:
      *((void *)v5 + 38) = 0;
      goto LABEL_26;
    }
    uint64_t v16 = v9 + 8;
    uint64_t v17 = 48 * v8;
    while (1)
    {
      int v18 = *(_DWORD *)(v16 - 8);
      if (v18 == -2) {
        goto LABEL_23;
      }
      if (v18 != -1) {
        break;
      }
LABEL_24:
      v16 += 48;
      v17 -= 48;
      if (!v17) {
        goto LABEL_25;
      }
    }
    uint64_t v16 = sub_1CC404274(v16);
LABEL_23:
    *(_DWORD *)(v16 - 8) = -1;
    goto LABEL_24;
  }
  uint64_t v10 = 48 * v8;
  uint64_t v11 = v9 + 8;
  do
  {
    if (*(_DWORD *)(v11 - 8) <= 0xFFFFFFFD) {
      uint64_t v11 = sub_1CC404274(v11);
    }
    v11 += 48;
    v10 -= 48;
  }
  while (v10);
  int v12 = 1 << (33 - __clz(v7 - 1));
  if (v12 <= 64) {
    int v12 = 64;
  }
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13 == *((_DWORD *)v5 + 78))
  {
    *((void *)v5 + 38) = 0;
    if (v13)
    {
      uint64_t v14 = (_DWORD *)*((void *)v5 + 37);
      uint64_t v15 = 48 * v13;
      do
      {
        *uint64_t v14 = -1;
        v14 += 12;
        v15 -= 48;
      }
      while (v15);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)v6, 8);
    if (v13)
    {
      unint64_t v360 = (4 * (int)v13 / 3u + 1) | ((unint64_t)(4 * (int)v13 / 3u + 1) >> 1);
      unint64_t v361 = v360 | (v360 >> 2) | ((v360 | (v360 >> 2)) >> 4);
      LODWORD(v361) = (((v361 | (v361 >> 8)) >> 16) | v361 | (v361 >> 8)) + 1;
      *((_DWORD *)v5 + 78) = v361;
      uint64_t v362 = operator new(48 * v361, (std::align_val_t)8uLL);
      *((void *)v5 + 37) = v362;
      *((void *)v5 + 38) = 0;
      uint64_t v363 = *((unsigned int *)v5 + 78);
      if (v363)
      {
        uint64_t v364 = 48 * v363;
        do
        {
          *uint64_t v362 = -1;
          v362 += 12;
          v364 -= 48;
        }
        while (v364);
      }
    }
    else
    {
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      *((_DWORD *)v6 + 4) = 0;
    }
  }
LABEL_26:
  char v508 = (char *)v510;
  uint64_t v509 = 0x400000000;
  uint64_t v19 = llvm::rdf::CodeNode::members(*(void *)(*(void *)v5 + 256), *(const llvm::rdf::DataFlowGraph **)v5, (uint64_t)&v505);
  if (v506)
  {
    uint64_t v20 = (uint64_t *)v505;
    unint64_t prime = 16 * v506;
    do
    {
      sub_1CC3F9160(*v20, (uint64_t (*)(uint64_t, void))sub_1CC3FCF24, *(void *)v5, (uint64_t)&v490);
      sub_1CC4061A4((unsigned int *)&v508, (uint64_t)&v508[16 * v509], (char *)v490, (char *)v490 + 16 * __dst);
      uint64_t v19 = (uint64_t)v490;
      if (v490 != &v492) {
        free(v490);
      }
      v20 += 2;
      prime -= 16;
    }
    while (prime);
  }
  uint64_t v447 = (uint64_t)v6;
  v482[0] = 0;
  v482[1] = 0;
  int v481 = (uint64_t *)v482;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)unint64_t v479 = 0u;
  float v480 = 1.0;
  uint64_t v451 = (uint64_t)v5;
  if (v509)
  {
    unsigned int v433 = 0;
    uint64_t v21 = 0;
    unsigned int v22 = (unsigned int *)v508;
    unsigned int v437 = 0;
    unsigned int v23 = (int *)&v488[1];
    uint64_t v457 = (uint64_t)v5 + 184;
    unsigned int v427 = &v508[16 * v509];
    while (1)
    {
      *(void *)uint64_t v476 = *(void *)v22;
      uint64_t v24 = *(void *)v476;
      unsigned int v429 = v22;
      unint64_t v25 = v22[2];
      int v477 = v22[2];
      sub_1CC406714(v447, &v477);
      uint64_t v434 = v26;
      llvm::rdf::CodeNode::members(v24, *(const llvm::rdf::DataFlowGraph **)v5, (uint64_t)&v501);
      long long v471 = 0uLL;
      int v472 = 0;
      uint64_t v474 = 0;
      uint64_t v475 = 0;
      uint64_t v473 = 0;
      unsigned int v469 = 0;
      uint64_t v470 = 0;
      uint64_t v468 = &v469;
      uint64_t v27 = (uint64_t *)*((void *)v5 + 2);
      int v28 = *(_DWORD *)(*v27 + 44);
      unint64_t prime = (v28 + 63) >> 6;
      __src[0] = v497;
      HIDWORD(__src[1]) = 6;
      if ((v28 + 63) >= 0x1C0)
      {
        LODWORD(__src[1]) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v28 + 63) >= 0x40) {
        bzero(v497, 8 * prime);
      }
      LODWORD(__src[1]) = (v28 + 63) >> 6;
      int v499 = v28;
      unsigned int v500 = v27;
      int v442 = v21;
      if (v502)
      {
        uint64_t v3 = v25;
        uint64_t v29 = (char *)v501;
        uint64_t v30 = (char *)v501 + 16 * v502;
        do
        {
          unint64_t v31 = *(_WORD **)v29;
          uint64_t v490 = v31;
          LODWORD(__dst) = *((_DWORD *)v29 + 2);
          if ((*v31 & 0x1F) == 6)
          {
            int RegRef = llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)v31, *(const llvm::rdf::DataFlowGraph **)v5);
            llvm::rdf::RegisterAggr::insert((uint64_t)__src, RegRef, v33);
            sub_1CBB29A9C((uint64_t)&v471, (int *)&__dst);
            int v34 = v469;
            int v35 = (int)__dst;
            for (i = &v469; ; int v34 = *i)
            {
              unint64_t v37 = i;
              if (!v34) {
                break;
              }
              while (1)
              {
                unsigned int i = (uint64_t **)v34;
                unsigned int v38 = *((_DWORD *)v34 + 7);
                if (__dst < v38) {
                  break;
                }
                if (v38 >= __dst) {
                  goto LABEL_50;
                }
                int v34 = i[1];
                if (!v34)
                {
                  unint64_t v37 = i + 1;
                  goto LABEL_47;
                }
              }
            }
LABEL_47:
            uint64_t v39 = operator new(0x20uLL);
            v39[7] = v35;
            *(void *)uint64_t v39 = 0;
            *((void *)v39 + 1) = 0;
            *((void *)v39 + 2) = i;
            *unint64_t v37 = (uint64_t *)v39;
            if (*v468)
            {
              uint64_t v468 = (uint64_t **)*v468;
              uint64_t v39 = *v37;
            }
            sub_1CB8358B8(v469, (uint64_t *)v39);
            ++v470;
          }
LABEL_50:
          v29 += 16;
        }
        while (v29 != v30);
        unint64_t prime = LODWORD(__src[1]);
        unint64_t v25 = v3;
      }
      LODWORD(v490) = v25;
      __dst = v493;
      uint64_t v492 = 0x600000000;
      if (prime)
      {
        if (prime >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v493, __src[0], 8 * prime);
        LODWORD(v492) = prime;
        unint64_t v25 = v490;
      }
      int v40 = v499;
      LODWORD(v494) = v499;
      unsigned int v41 = v500;
      uint64_t v495 = v500;
      unint64_t v42 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v43.i16[0] = vaddlv_u8(v43);
        if (v43.u32[0] > 1uLL)
        {
          uint64_t v3 = v25;
          if (__p[1] <= (void *)v25) {
            uint64_t v3 = v25 % (unint64_t)__p[1];
          }
        }
        else
        {
          uint64_t v3 = (LODWORD(__p[1]) - 1) & v25;
        }
        uint64_t v44 = (uint64_t **)*((void *)__p[0] + v3);
        if (v44)
        {
          for (uint64_t j = *v44; j; uint64_t j = (uint64_t *)*j)
          {
            unint64_t v46 = j[1];
            if (v46 == v25)
            {
              if (*((_DWORD *)j + 4) == v25) {
                goto LABEL_130;
              }
            }
            else
            {
              if (v43.u32[0] > 1uLL)
              {
                if ((void *)v46 >= __p[1]) {
                  v46 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v46 &= (unint64_t)__p[1] - 1;
              }
              if (v46 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v47 = operator new(0x68uLL);
      *uint64_t v47 = 0;
      v47[1] = v25;
      *((_DWORD *)v47 + 4) = v25;
      void v47[3] = v47 + 5;
      v47[4] = 0x600000000;
      if (prime)
      {
        memcpy(v47 + 5, __dst, 8 * prime);
        *((_DWORD *)v47 + 8) = prime;
        int v40 = v494;
        unsigned int v41 = v495;
      }
      *((_DWORD *)v47 + 22) = v40;
      v47[12] = v41;
      float v48 = (float)((unint64_t)v479[1] + 1);
      if (!v42 || (float)(v480 * (float)v42) < v48) {
        break;
      }
LABEL_120:
      unint64_t v63 = __p[0];
      unint64_t v64 = (void *)*((void *)__p[0] + v3);
      if (v64)
      {
        *uint64_t v47 = *v64;
      }
      else
      {
        *uint64_t v47 = v479[0];
        v479[0] = v47;
        v63[v3] = v479;
        if (!*v47) {
          goto LABEL_129;
        }
        unint64_t v65 = *(void *)(*v47 + 8);
        if ((v42 & (v42 - 1)) != 0)
        {
          if (v65 >= v42) {
            v65 %= v42;
          }
        }
        else
        {
          v65 &= v42 - 1;
        }
        unint64_t v64 = (char *)__p[0] + 8 * v65;
      }
      *unint64_t v64 = v47;
LABEL_129:
      ++v479[1];
LABEL_130:
      if (__dst != v493) {
        free(__dst);
      }
      unsigned int v448 = v434 + 1;
      int v66 = v473;
      unint64_t v5 = (llvm::rdf::Liveness *)v451;
      if (v474 != v473)
      {
        uint64_t v67 = 0;
        unsigned int v68 = 0;
        do
        {
          uint64_t v69 = *(void *)(*(void *)(*(void *)v451 + 296)
                          + 8 * ((v66[v67] - 1) >> *(_DWORD *)(*(void *)v451 + 276)))
              + 32 * (*(_DWORD *)(*(void *)v451 + 280) & (v66[v67] - 1));
          unint64_t prime = 1152;
          if ((*(_WORD *)v69 & 0x800) == 0)
          {
            for (unsigned int k = *(_DWORD *)(v69 + 20); k; unsigned int k = *(_DWORD *)(v71 + 12))
            {
              uint64_t v71 = *(void *)(*(void *)(*(void *)v451 + 296)
                              + 8 * ((k - 1) >> *(_DWORD *)(*(void *)v451 + 276)))
                  + 32 * (*(_DWORD *)(*(void *)v451 + 280) & (k - 1));
              if ((*(_WORD *)v71 & 0x480) == 0)
              {
                uint64_t v72 = (void *)llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)(*(void *)(*(void *)(*(void *)v451 + 296)+ 8* ((k - 1) >> *(_DWORD *)(*(void *)v451 + 276)))+ 32 * (*(_DWORD *)(*(void *)v451 + 280) & (k - 1))), *(const llvm::rdf::DataFlowGraph **)v451);
                unsigned int v74 = v73;
                uint64_t v490 = v72;
                __dst = v73;
                uint64_t v75 = sub_1CC406A5C((uint64_t)v448, v72, &v490);
                LODWORD(v488[0]) = k;
                v488[1] = v74;
                unint64_t v76 = (unint64_t)v74;
                unint64_t prime = 1152;
                sub_1CC406E6C((uint64_t)(v75 + 24), k, v76, v488);
              }
            }
          }
          for (unsigned int m = *(_DWORD *)(v69 + 16); m; unsigned int m = *(_DWORD *)(prime + 12))
          {
            uint64_t v78 = *(llvm::rdf::DataFlowGraph **)v451;
            unint64_t prime = *(void *)(*(void *)(*(void *)v451 + 296)
                              + 8 * ((m - 1) >> *(_DWORD *)(*(void *)v451 + 276)))
                  + 32 * (*(_DWORD *)(*(void *)v451 + 280) & (m - 1));
            unsigned int v79 = m;
            uint64_t Owner = (_WORD *)llvm::rdf::RefNode::getOwner((llvm::rdf::RefNode *)prime, *(const llvm::rdf::DataFlowGraph **)v451);
            llvm::rdf::DataFlowGraph::getRelatedRefs(v78, (llvm::rdf::RefNode *)prime, Owner, v81, v79, (uint64_t)&v490);
            int v82 = (uint64_t *)v490;
            if (__dst)
            {
              uint64_t v83 = 16 * __dst;
              do
              {
                *(_OWORD *)unsigned int v488 = *(_OWORD *)v82;
                if ((*(unsigned char *)v488[0] & 0x80) == 0) {
                  sub_1CBB29A9C((uint64_t)&v471, v23);
                }
                v82 += 2;
                v83 -= 16;
              }
              while (v83);
              int v82 = (uint64_t *)v490;
            }
            if (v82 != &v492) {
              free(v82);
            }
          }
          int v66 = v473;
          uint64_t v67 = ++v68;
        }
        while (v68 < (unint64_t)((v474 - (unsigned char *)v473) >> 2));
      }
      uint64_t v2 = v434[3];
      uint64_t v21 = v442;
      while (v2)
      {
        sub_1CC40707C((uint64_t)&v483, v2 + 24);
        if (*(void *)(v2 + 48))
        {
          int v84 = *(void **)(v2 + 40);
          if (v84)
          {
            do
            {
              uint64_t v85 = (void *)*v84;
              operator delete(v84);
              int v84 = v85;
            }
            while (v85);
          }
          *(void *)(v2 + 40) = 0;
          uint64_t v86 = *(void *)(v2 + 32);
          if (v86)
          {
            for (uint64_t n = 0; n != v86; ++n)
              *(void *)(*(void *)(v2 + 24) + 8 * n) = 0;
          }
          *(void *)(v2 + 48) = 0;
        }
        uint64_t v453 = v2 + 24;
        unint64_t v88 = v485[0];
        uint64_t v459 = v2;
        if (!v485[0]) {
          goto LABEL_189;
        }
        do
        {
          unint64_t prime = (unint64_t)v23;
          unsigned int v89 = *((_DWORD *)v88 + 4);
          unint64_t v90 = v4;
          if (v89) {
            unsigned int v91 = (llvm::rdf::RefNode *)(*(void *)(*(void *)(*(void *)v5 + 296)
          }
                                                   + 8 * ((v89 - 1) >> *(_DWORD *)(*(void *)v5 + 276)))
                                       + 32 * (*(_DWORD *)(*(void *)v5 + 280) & (v89 - 1)));
          else {
            unsigned int v91 = 0;
          }
          uint64_t v92 = *(unsigned int *)(v2 + 16);
          if (v92) {
            uint64_t v3 = *((void *)v88 + 3);
          }
          else {
            uint64_t v3 = 0;
          }
          uint64_t v93 = *((void *)v5 + 2);
          int v94 = *(_DWORD *)(*(void *)v93 + 44);
          uint64_t v490 = &v492;
          HIDWORD(__dst) = 6;
          if ((v94 + 63) >= 0x1C0)
          {
            LODWORD(__dst) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if ((v94 + 63) >= 0x40) {
            bzero(&v492, 8 * ((v94 + 63) >> 6));
          }
          unint64_t v4 = v90 & 0xFFFFFFFF00000000 | v92;
          LODWORD(__dst) = (v94 + 63) >> 6;
          v493[10] = v94;
          uint64_t v494 = v93;
          unint64_t v5 = (llvm::rdf::Liveness *)v451;
          llvm::rdf::Liveness::getAllReachingDefs(v91, v451, v4, v3, v89, 0, 0, v457, (unsigned int *)v488);
          unsigned int v23 = (int *)prime;
          if (LODWORD(v488[1]))
          {
            uint64_t v95 = (char *)v488[0];
            unsigned int v96 = (char *)v488[0] + 16 * LODWORD(v488[1]);
            do
            {
              uint64_t v97 = v469;
              if (v469)
              {
                unsigned int v98 = *((_DWORD *)v95 + 2);
                do
                {
                  unsigned int v99 = *((_DWORD *)v97 + 7);
                  if (v98 >= v99)
                  {
                    if (v99 >= v98) {
                      goto LABEL_179;
                    }
                    ++v97;
                  }
                  uint64_t v97 = (uint64_t *)*v97;
                }
                while (v97);
              }
              int v100 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v95, *(const llvm::rdf::DataFlowGraph **)v451);
              llvm::rdf::RegisterAggr::insert((uint64_t)&v490, v100, v101);
              v95 += 16;
            }
            while (v95 != v96);
          }
LABEL_179:
          if (v488[0] != v489) {
            free(v488[0]);
          }
          uint64_t v103 = llvm::rdf::RegisterAggr::clearIn((uint64_t)&v490, v4, v3);
          uint64_t v2 = v459;
          if (v103 && v102)
          {
            llvm::rdf::PhysicalRegisterInfo::mapTo(*(void **)(v451 + 16), v103, v102, *(_DWORD *)(v459 + 16));
            LODWORD(v488[0]) = v89;
            v488[1] = v104;
            sub_1CC406E6C(v453, v89, (unint64_t)v104, v488);
          }
          if (v490 != &v492) {
            free(v490);
          }
          unint64_t v88 = *(void **)v88;
        }
        while (v88);
        if (*(void *)(v459 + 48)) {
          uint64_t v2 = *(void *)v459;
        }
        else {
LABEL_189:
        }
          uint64_t v2 = sub_1CC4070E0(v448, (uint64_t *)v2);
        unint64_t v105 = v485[0];
        uint64_t v21 = v442;
        if (v485[0])
        {
          do
          {
            unint64_t v106 = (void *)*v105;
            operator delete(v105);
            unint64_t v105 = v106;
          }
          while (v106);
        }
        int v107 = v483;
        uint64_t v483 = 0;
        if (v107) {
          operator delete(v107);
        }
      }
      if (v434[4])
      {
        if (v21 >= (int *)v433)
        {
          uint64_t v108 = v21 - v437;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 62) {
            goto LABEL_611;
          }
          if ((v433 - (char *)v437) >> 1 > v109) {
            unint64_t v109 = (v433 - (char *)v437) >> 1;
          }
          if ((unint64_t)(v433 - (char *)v437) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v110 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v110 = v109;
          }
          if (v110)
          {
            if (v110 >> 62) {
              goto LABEL_759;
            }
            unint64_t v111 = (char *)operator new(4 * v110);
          }
          else
          {
            unint64_t v111 = 0;
          }
          uint64_t v112 = (int *)&v111[4 * v108];
          *uint64_t v112 = v477;
          unint64_t prime = (unint64_t)(v112 + 1);
          if (v21 == v437)
          {
            uint64_t v113 = v437;
          }
          else
          {
            uint64_t v113 = v437;
            do
            {
              int v114 = *--v21;
              *--uint64_t v112 = v114;
            }
            while (v21 != v437);
          }
          unsigned int v433 = &v111[4 * v110];
          if (v113) {
            operator delete(v113);
          }
          unsigned int v437 = v112;
          uint64_t v21 = (int *)prime;
        }
        else
        {
          *v21++ = v477;
        }
      }
      uint64_t v466 = 0;
      uint64_t v467 = 0;
      unsigned int v465 = &v466;
      if (v502)
      {
        uint64_t v3 = (uint64_t)v501;
        uint64_t v115 = (char *)v501 + 16 * v502;
        uint64_t v443 = v21;
        unint64_t v454 = v4;
        unsigned int v432 = v115;
        do
        {
          uint64_t v116 = *(llvm::rdf::RefNode **)v3;
          if ((**(_WORD **)v3 & 0x1F) == 0xA)
          {
            unint64_t prime = *(unsigned int *)(v3 + 8);
            for (iunsigned int i = v466; ii; iunsigned int i = (uint64_t *)*ii)
            {
              unint64_t v118 = *((unsigned int *)ii + 7);
              if (v118 <= prime)
              {
                if (v118 >= prime) {
                  goto LABEL_284;
                }
                ++ii;
              }
            }
            std::string::size_type v463 = *(llvm::rdf::RefNode **)v3;
            unsigned int v464 = *(_DWORD *)(v3 + 8);
            if (*((_DWORD *)v116 + 2))
            {
              int v119 = llvm::rdf::RefNode::getRegRef(v116, *(const llvm::rdf::DataFlowGraph **)v5);
              llvm::rdf::Liveness::getAllReachingDefs(v116, (uint64_t)v5, v119, v120, prime, 1, 0, v457, (unsigned int *)v488);
              unint64_t v121 = (uint64_t *)*((void *)v5 + 2);
              uint64_t v2 = *(unsigned int *)(*v121 + 44);
              uint64_t v483 = v485;
              HIDWORD(v484) = 6;
              if ((v2 + 63) >= 0x1C0)
              {
                LODWORD(v484) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if ((v2 + 63) >= 0x40) {
                bzero(v485, 8 * ((v2 + 63) >> 6));
              }
              LODWORD(v484) = (v2 + 63) >> 6;
              unsigned int v486 = v2;
              unsigned int v487 = v121;
              if (LODWORD(v488[1]))
              {
                uint64_t v435 = v3;
                uint64_t v122 = (llvm::rdf::RefNode **)v488[0];
                int v123 = (llvm::rdf::RefNode **)((char *)v488[0] + 16 * LODWORD(v488[1]));
                unsigned int v449 = v123;
                do
                {
                  unint64_t v124 = *v122;
                  if ((*(_WORD *)*v122 & 0x80) != 0)
                  {
                    llvm::rdf::RefNode::getOwner(*v122, *(const llvm::rdf::DataFlowGraph **)v5);
                    unsigned int v126 = v125;
                    int v127 = sub_1CC407240(&v481, v464, &v464);
                    unsigned int v128 = v127;
                    int v130 = v127 + 6;
                    uint64_t v129 = v127[6];
                    if (!v129) {
                      goto LABEL_242;
                    }
                    uint64_t v131 = v127 + 6;
                    do
                    {
                      unsigned int v132 = *((_DWORD *)v129 + 8);
                      BOOL v133 = v132 >= v126;
                      if (v132 >= v126) {
                        uint64_t v134 = (uint64_t **)v129;
                      }
                      else {
                        uint64_t v134 = (uint64_t **)(v129 + 1);
                      }
                      if (v133) {
                        uint64_t v131 = (uint64_t **)v129;
                      }
                      uint64_t v129 = *v134;
                    }
                    while (*v134);
                    if (v131 != v130 && *((_DWORD *)v131 + 8) <= v126)
                    {
                      llvm::rdf::RegisterAggr::insert((uint64_t)(v131 + 5), (uint64_t)&v483);
                      unint64_t v5 = (llvm::rdf::Liveness *)v451;
                    }
                    else
                    {
LABEL_242:
                      LODWORD(v490) = v126;
                      __dst = v493;
                      uint64_t v492 = 0x600000000;
                      uint64_t v135 = v484;
                      if (v484)
                      {
                        if (v484 >= 7) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        memcpy(v493, v483, 8 * v484);
                        LODWORD(v492) = v135;
                        unsigned int v126 = v490;
                      }
                      uint64_t v460 = v128;
                      uint64_t v2 = v486;
                      LODWORD(v494) = v486;
                      __int16 v136 = v487;
                      uint64_t v495 = v487;
                      unsigned int v137 = *v130;
                      uint64_t v138 = v130;
                      if (*v130)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            uint64_t v138 = (uint64_t **)v137;
                            unsigned int v139 = *((_DWORD *)v137 + 8);
                            if (v139 <= v126) {
                              break;
                            }
                            unsigned int v137 = *v138;
                            int v130 = v138;
                            if (!*v138) {
                              goto LABEL_253;
                            }
                          }
                          if (v139 >= v126) {
                            break;
                          }
                          unsigned int v137 = v138[1];
                          if (!v137)
                          {
                            int v130 = v138 + 1;
                            goto LABEL_253;
                          }
                        }
                      }
                      else
                      {
LABEL_253:
                        int v140 = operator new(0x78uLL);
                        v140[8] = v126;
                        *((void *)v140 + 5) = v140 + 14;
                        *((void *)v140 + 6) = 0x600000000;
                        if (v135)
                        {
                          if (v135 >= 7) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          memcpy(v140 + 14, __dst, 8 * v135);
                          v140[12] = v135;
                          uint64_t v2 = v494;
                          __int16 v136 = v495;
                        }
                        v140[26] = v2;
                        *((void *)v140 + 14) = v136;
                        *(void *)int v140 = 0;
                        *((void *)v140 + 1) = 0;
                        *((void *)v140 + 2) = v138;
                        unsigned __int16 *v130 = (uint64_t *)v140;
                        uint64_t v141 = (uint64_t *)*v460[5];
                        if (v141)
                        {
                          v460[5] = v141;
                          int v140 = *v130;
                        }
                        sub_1CB8358B8(v460[6], (uint64_t *)v140);
                        v460[7] = (uint64_t *)((char *)v460[7] + 1);
                        int v123 = v449;
                      }
                      if (__dst != v493) {
                        free(__dst);
                      }
                      unint64_t v5 = (llvm::rdf::Liveness *)v451;
                      unint64_t v4 = v454;
                    }
                  }
                  int v142 = llvm::rdf::RefNode::getRegRef(v124, *(const llvm::rdf::DataFlowGraph **)v5);
                  llvm::rdf::RegisterAggr::insert((uint64_t)&v483, v142, v143);
                  v122 += 2;
                }
                while (v122 != v123);
                uint64_t v116 = v463;
                unint64_t prime = v464;
                uint64_t v3 = v435;
                uint64_t v115 = v432;
              }
              llvm::rdf::DataFlowGraph::getRelatedRefs(*(llvm::rdf::DataFlowGraph **)v5, v116, *(_WORD **)v476, v477, prime, (uint64_t)&v490);
              int v144 = (unsigned int *)v490;
              uint64_t v145 = (unsigned int *)((char *)v490 + 16 * __dst);
              if (__dst)
              {
                do
                {
                  unint64_t prime = v144[2];
                  uint64_t v146 = v466;
                  uint64_t v2 = (uint64_t)&v466;
                  BOOL v147 = &v466;
                  if (v466)
                  {
                    do
                    {
                      while (1)
                      {
                        BOOL v147 = (uint64_t **)v146;
                        unsigned int v148 = *((_DWORD *)v146 + 7);
                        if (prime >= v148) {
                          break;
                        }
                        uint64_t v146 = *v147;
                        uint64_t v2 = (uint64_t)v147;
                        if (!*v147) {
                          goto LABEL_273;
                        }
                      }
                      if (v148 >= prime) {
                        goto LABEL_276;
                      }
                      uint64_t v146 = v147[1];
                    }
                    while (v146);
                    uint64_t v2 = (uint64_t)(v147 + 1);
                  }
LABEL_273:
                  char v149 = operator new(0x20uLL);
                  v149[7] = prime;
                  *(void *)char v149 = 0;
                  *((void *)v149 + 1) = 0;
                  *((void *)v149 + 2) = v147;
                  *(void *)uint64_t v2 = v149;
                  if (*v465)
                  {
                    unsigned int v465 = (uint64_t **)*v465;
                    char v149 = *(_DWORD **)v2;
                  }
                  sub_1CB8358B8(v466, (uint64_t *)v149);
                  ++v467;
LABEL_276:
                  v144 += 4;
                }
                while (v144 != v145);
                int v144 = (unsigned int *)v490;
              }
              if (v144 != (unsigned int *)&v492) {
                free(v144);
              }
              uint64_t v21 = v443;
              if (v483 != v485) {
                free(v483);
              }
              if (v488[0] != v489) {
                free(v488[0]);
              }
            }
          }
LABEL_284:
          v3 += 16;
        }
        while ((char *)v3 != v115);
        unint64_t v150 = v466;
      }
      else
      {
        unint64_t v150 = 0;
      }
      sub_1CB833A08((uint64_t)&v465, v150);
      if (__src[0] != v497) {
        free(__src[0]);
      }
      sub_1CB833A08((uint64_t)&v468, v469);
      if (v473)
      {
        uint64_t v474 = v473;
        operator delete(v473);
      }
      MEMORY[0x1D25D9CD0](v471, 4);
      uint64_t v19 = (uint64_t)v501;
      if (v501 != &v503) {
        free(v501);
      }
      unsigned int v22 = v429 + 4;
      if (v429 + 4 == (unsigned int *)v427) {
        goto LABEL_305;
      }
    }
    BOOL v49 = (v42 & (v42 - 1)) != 0;
    if (v42 < 3) {
      BOOL v49 = 1;
    }
    unint64_t v50 = v49 | (2 * v42);
    unint64_t v51 = vcvtps_u32_f32(v48 / v480);
    if (v50 <= v51) {
      unint64_t prime = v51;
    }
    else {
      unint64_t prime = v50;
    }
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v42 = (unint64_t)__p[1];
    if ((void *)prime > __p[1]) {
      goto LABEL_86;
    }
    if ((void *)prime < __p[1])
    {
      unint64_t v58 = vcvtps_u32_f32((float)(unint64_t)v479[1] / v480);
      if (__p[1] < (void *)3
        || (uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
      {
        unint64_t v58 = std::__next_prime(v58);
      }
      else
      {
        uint64_t v60 = 1 << -(char)__clz(v58 - 1);
        if (v58 >= 2) {
          unint64_t v58 = v60;
        }
      }
      if (prime <= v58) {
        unint64_t prime = v58;
      }
      if (prime >= v42)
      {
        unint64_t v42 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_86:
          if (prime >> 61) {
            goto LABEL_759;
          }
          unint64_t v52 = operator new(8 * prime);
          unsigned int v53 = __p[0];
          __p[0] = v52;
          if (v53) {
            operator delete(v53);
          }
          uint64_t v54 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v54++) = 0;
          while (prime != v54);
          unint64_t v55 = (void **)v479[0];
          if (v479[0])
          {
            unint64_t v56 = *((void *)v479[0] + 1);
            uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
            v57.i16[0] = vaddlv_u8(v57);
            if (v57.u32[0] > 1uLL)
            {
              if (v56 >= prime) {
                v56 %= prime;
              }
            }
            else
            {
              v56 &= prime - 1;
            }
            *((void *)__p[0] + v56) = v479;
            for (jj = *v55; jj; unint64_t v56 = v62)
            {
              unint64_t v62 = jj[1];
              if (v57.u32[0] > 1uLL)
              {
                if (v62 >= prime) {
                  v62 %= prime;
                }
              }
              else
              {
                v62 &= prime - 1;
              }
              if (v62 != v56)
              {
                if (!*((void *)__p[0] + v62))
                {
                  *((void *)__p[0] + v62) = v55;
                  goto LABEL_111;
                }
                char *v55 = (void *)*jj;
                *juint64_t j = **((void **)__p[0] + v62);
                **((void **)__p[0] + v62) = jj;
                juint64_t j = v55;
              }
              unint64_t v62 = v56;
LABEL_111:
              unint64_t v55 = (void **)jj;
              juint64_t j = (void *)*jj;
            }
          }
          unint64_t v42 = prime;
          goto LABEL_115;
        }
        unsigned __int8 v151 = __p[0];
        __p[0] = 0;
        if (v151) {
          operator delete(v151);
        }
        unint64_t v42 = 0;
        __p[1] = 0;
      }
    }
LABEL_115:
    if ((v42 & (v42 - 1)) != 0)
    {
      if (v42 <= v25) {
        uint64_t v3 = v25 % v42;
      }
      else {
        uint64_t v3 = v25;
      }
    }
    else
    {
      uint64_t v3 = (v42 - 1) & v25;
    }
    goto LABEL_120;
  }
  unsigned int v437 = 0;
  uint64_t v21 = 0;
  unsigned int v433 = 0;
LABEL_305:
  uint64_t v152 = v447;
  int v444 = v21;
  if (*((unsigned char *)v5 + 264))
  {
    uint64_t v19 = (uint64_t)llvm::dbgs((llvm *)v19);
    unsigned int v365 = *(void **)(v19 + 32);
    if (*(void *)(v19 + 24) - (void)v365 > 0x28uLL)
    {
      qmemcpy(v365, "Phi-up-to-phi map with intervening defs:\n", 41);
      *(void *)(v19 + 32) += 41;
    }
    else
    {
      uint64_t v19 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v19, "Phi-up-to-phi map with intervening defs:\n", 0x29uLL);
    }
    int v366 = v481;
    if (v481 != (uint64_t *)v482)
    {
      uint64_t v2 = (uint64_t)v493;
      while (1)
      {
        LODWORD(v501) = *((_DWORD *)v366 + 8);
        uint64_t v503 = 0;
        uint64_t v504 = 0;
        unsigned int v502 = &v503;
        unsigned int v367 = (uint64_t *)v366[5];
        if (v367 != v366 + 6) {
          break;
        }
LABEL_683:
        uint64_t v380 = llvm::dbgs((llvm *)v19);
        uint64_t v381 = (_DWORD *)*((void *)v380 + 4);
        if (*((void *)v380 + 3) - (void)v381 > 3uLL)
        {
          *uint64_t v381 = 543778928;
          *((void *)v380 + 4) += 4;
        }
        else
        {
          uint64_t v380 = llvm::raw_ostream::write(v380, "phi ", 4uLL);
        }
        uint64_t v382 = *(const llvm::rdf::DataFlowGraph **)v451;
        uint64_t v490 = &v501;
        __dst = v382;
        uint64_t v383 = llvm::rdf::operator<<((char **)v380, (unsigned int **)&v490);
        uint64_t v384 = *((void *)v383 + 4);
        if ((unint64_t)(*((void *)v383 + 3) - v384) > 4)
        {
          *(unsigned char *)(v384 + 4) = 123;
          *(_DWORD *)uint64_t v384 = 540945696;
          *((void *)v383 + 4) += 5;
        }
        else
        {
          uint64_t v383 = llvm::raw_ostream::write(v383, " -> {", 5uLL);
        }
        int v385 = v502;
        if (v502 != &v503)
        {
          do
          {
            LODWORD(v490) = *((_DWORD *)v385 + 8);
            __dst = v493;
            uint64_t v492 = 0x600000000;
            unint64_t prime = *((unsigned int *)v385 + 12);
            int v386 = (void **)(v385 + 5);
            if (prime) {
              BOOL v387 = &__dst == v386;
            }
            else {
              BOOL v387 = 1;
            }
            if (!v387)
            {
              if (prime >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v383 = (llvm::raw_ostream *)memcpy(v493, *v386, 8 * *((unsigned int *)v385 + 12));
              LODWORD(v492) = prime;
            }
            LODWORD(v494) = *((_DWORD *)v385 + 26);
            uint64_t v495 = v385[14];
            uint64_t v388 = llvm::dbgs(v383);
            unsigned int v389 = (unsigned char *)*((void *)v388 + 4);
            if ((unint64_t)v389 >= *((void *)v388 + 3))
            {
              uint64_t v388 = llvm::raw_ostream::write(v388, 32);
            }
            else
            {
              *((void *)v388 + 4) = v389 + 1;
              *unsigned int v389 = 32;
            }
            uint64_t v21 = v444;
            v390 = *(const llvm::rdf::DataFlowGraph **)v451;
            __src[0] = &v490;
            __src[1] = v390;
            uint64_t v391 = llvm::rdf::operator<<((char **)v388, (unsigned int **)__src);
            llvm::rdf::RegisterAggr::print((llvm::raw_ostream *)&__dst, v391);
            uint64_t v383 = (llvm::raw_ostream *)__dst;
            if (__dst != v493) {
              free(__dst);
            }
            uint64_t v392 = v385[1];
            if (v392)
            {
              do
              {
                int v393 = (uint64_t **)v392;
                uint64_t v392 = (uint64_t *)*v392;
              }
              while (v392);
            }
            else
            {
              do
              {
                int v393 = (uint64_t **)v385[2];
                BOOL v248 = *v393 == (uint64_t *)v385;
                int v385 = v393;
              }
              while (!v248);
            }
            int v385 = v393;
          }
          while (v393 != &v503);
        }
        int v394 = llvm::dbgs(v383);
        uint64_t v395 = *((void *)v394 + 4);
        if ((unint64_t)(*((void *)v394 + 3) - v395) > 2)
        {
          *(unsigned char *)(v395 + 2) = 10;
          *(_WORD *)uint64_t v395 = 32032;
          *((void *)v394 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v394, " }\n", 3uLL);
        }
        sub_1CC4040C0(v503);
        uint64_t v396 = (uint64_t *)v366[1];
        if (v396)
        {
          do
          {
            unsigned int v397 = v396;
            uint64_t v396 = (uint64_t *)*v396;
          }
          while (v396);
        }
        else
        {
          do
          {
            unsigned int v397 = (uint64_t *)v366[2];
            BOOL v248 = *v397 == (void)v366;
            int v366 = v397;
          }
          while (!v248);
        }
        int v366 = v397;
        if (v397 == (uint64_t *)v482) {
          goto LABEL_306;
        }
      }
      while (1)
      {
        int v368 = v503;
        int v369 = &v503;
        if (v502 != &v503)
        {
          unsigned int v370 = v503;
          int v371 = &v503;
          if (v503)
          {
            do
            {
              int v369 = (uint64_t **)v370;
              unsigned int v370 = (uint64_t *)v370[1];
            }
            while (v370);
          }
          else
          {
            do
            {
              int v369 = (uint64_t **)v371[2];
              BOOL v248 = *v369 == (uint64_t *)v371;
              int v371 = v369;
            }
            while (v248);
          }
          unsigned int v372 = *((_DWORD *)v367 + 8);
          if (*((_DWORD *)v369 + 8) >= v372) {
            break;
          }
        }
        if (v503) {
          uint64_t v373 = v369;
        }
        else {
          uint64_t v373 = &v503;
        }
        if (v503) {
          uint64_t v374 = v369 + 1;
        }
        else {
          uint64_t v374 = &v503;
        }
        if (!*v374) {
          goto LABEL_669;
        }
LABEL_677:
        BOOL v378 = (uint64_t *)v367[1];
        uint64_t v21 = v444;
        if (v378)
        {
          do
          {
            int v379 = v378;
            BOOL v378 = (uint64_t *)*v378;
          }
          while (v378);
        }
        else
        {
          do
          {
            int v379 = (uint64_t *)v367[2];
            BOOL v248 = *v379 == (void)v367;
            unsigned int v367 = v379;
          }
          while (!v248);
        }
        unsigned int v367 = v379;
        if (v379 == v366 + 6) {
          goto LABEL_683;
        }
      }
      uint64_t v374 = &v503;
      uint64_t v373 = &v503;
      if (v503)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v373 = (uint64_t **)v368;
            unsigned int v375 = *((_DWORD *)v368 + 8);
            if (v375 <= v372) {
              break;
            }
            int v368 = *v373;
            uint64_t v374 = v373;
            if (!*v373) {
              goto LABEL_669;
            }
          }
          if (v375 >= v372) {
            goto LABEL_677;
          }
          int v368 = v373[1];
          if (!v368)
          {
            uint64_t v374 = v373 + 1;
            break;
          }
        }
      }
LABEL_669:
      v376 = (uint64_t *)operator new(0x78uLL);
      unint64_t prime = (unint64_t)v376;
      *((_DWORD *)v376 + 8) = *((_DWORD *)v367 + 8);
      v376[5] = (uint64_t)(v376 + 7);
      v376[6] = 0x600000000;
      unsigned int v377 = *((_DWORD *)v367 + 12);
      if (v377 && v376 != v367)
      {
        if (v377 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v376 + 7, (const void *)v367[5], 8 * *((unsigned int *)v367 + 12));
        *(_DWORD *)(prime + 48) = v377;
      }
      *(_DWORD *)(prime + 104) = *((_DWORD *)v367 + 26);
      *(void *)(prime + 112) = v367[14];
      *(void *)unint64_t prime = 0;
      *(void *)(prime + 8) = 0;
      *(void *)(prime + 16) = v373;
      uint64_t *v374 = (uint64_t *)prime;
      if (*v502)
      {
        unsigned int v502 = (uint64_t **)*v502;
        unint64_t prime = (unint64_t)*v374;
      }
      uint64_t v19 = (uint64_t)sub_1CB8358B8(v503, (uint64_t *)prime);
      ++v504;
      uint64_t v152 = v447;
      goto LABEL_677;
    }
  }
LABEL_306:
  *(_OWORD *)__src = 0u;
  *(_OWORD *)uint64_t v497 = 0u;
  float v498 = 1.0;
  uint64_t v153 = v437;
  if (v21 != v437)
  {
    uint64_t v154 = 0;
    unsigned int v428 = 0;
    uint64_t v155 = v451;
    while (1)
    {
      uint64_t v156 = *(const llvm::rdf::DataFlowGraph **)v155;
      __int16 v157 = (uint64_t **)v153[v154];
      int v158 = v157
           ? (void *)(*(void *)(*((void *)v156 + 37)
                                + 8 * ((v157 - 1) >> *((_DWORD *)v156 + 69)))
                    + 32 * (*((_DWORD *)v156 + 70) & (v157 - 1)))
           : 0;
      uint64_t v501 = v158;
      unsigned int v502 = v157;
      sub_1CC3F9160((uint64_t)v158, (uint64_t (*)(uint64_t, void))sub_1CC3FD580, (uint64_t)v156, (uint64_t)&v490);
      sub_1CC406714(v152, (int *)&v502);
      uint64_t v436 = v159;
      uint64_t v19 = (uint64_t)v490;
      if (__dst) {
        break;
      }
LABEL_607:
      if ((uint64_t *)v19 != &v492) {
        free((void *)v19);
      }
      uint64_t v154 = ++v428;
      if (v428 >= (unint64_t)(v444 - v153)) {
        goto LABEL_613;
      }
    }
    unsigned int v430 = (char *)v490 + 16 * __dst;
    while (1)
    {
      unint64_t v160 = prime;
      v488[0] = *(void **)v19;
      int v161 = (llvm::rdf::RefNode *)v488[0];
      uint64_t v431 = v19;
      LODWORD(v488[1]) = *(_DWORD *)(v19 + 8);
      uint64_t v162 = sub_1CC407240(&v481, v488[1], &v488[1]);
      int v163 = llvm::rdf::RefNode::getRegRef(v161, *(const llvm::rdf::DataFlowGraph **)v155);
      uint64_t v440 = v164;
      int v441 = v163;
      uint64_t v165 = v162[5];
      int v439 = v162 + 6;
      unint64_t prime = v160;
      if (v165 != (uint64_t *)v439) {
        break;
      }
LABEL_605:
      uint64_t v19 = v431 + 16;
      if ((char *)(v431 + 16) == v430)
      {
        uint64_t v19 = (uint64_t)v490;
        goto LABEL_607;
      }
    }
LABEL_314:
    unsigned int v450 = (const void **)(v165 + 5);
    if (llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)(v165 + 5), v441, v440)) {
      goto LABEL_593;
    }
    uint64_t v166 = v165;
    unint64_t v167 = prime;
    int v168 = *((_DWORD *)v166 + 26);
    unsigned int v169 = (void *)v166[5];
    unsigned int v455 = v166;
    uint64_t v170 = *((unsigned int *)v166 + 12);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v347 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v347 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v347;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    unint64_t v171 = 8 * v170;
    if (v170 > 8)
    {
      unint64_t v173 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (qword_1EBCBE580 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      uint64_t v174 = __ROR8__(qword_1EBCBE580 ^ 0xB492B66FBE98F273, 49);
      unint64_t v175 = qword_1EBCBE580 ^ ((unint64_t)qword_1EBCBE580 >> 47);
      unint64_t v176 = qword_1EBCBE580 ^ (((0x9DDFEA08EB382D69 * (v175 ^ (0xB492B66FBE98F273 * qword_1EBCBE580))) ^ qword_1EBCBE580) >> 47) ^ (0x9DDFEA08EB382D69 * (v175 ^ (0xB492B66FBE98F273 * qword_1EBCBE580)));
      uint64_t v177 = v169[1];
      uint64_t v178 = v174 + qword_1EBCBE580 + v177;
      uint64_t v179 = v169[6];
      uint64_t v180 = v169[7];
      uint64_t v181 = v169[5];
      unint64_t v182 = v181
           + v174
           - 0x4B6D499041670D8DLL * __ROR8__(v179 + qword_1EBCBE580 - 0x4B6D499041670D8DLL * qword_1EBCBE580, 42);
      unint64_t v183 = v175 - 0x622015F714C7D297 * (v173 ^ (v173 >> 47));
      uint64_t v184 = *v169 - 0x6D8ED9027DD26057 * qword_1EBCBE580;
      unint64_t v185 = v175 + v184;
      uint64_t v187 = v169[2];
      uint64_t v186 = v169[3];
      uint64_t v188 = v184 + v177 + v187;
      unint64_t v189 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v176) ^ ((0x9DDFEA08EB382D69 * v176) >> 47));
      unint64_t v190 = (0xB492B66FBE98F273 * __ROR8__(v178, 37)) ^ v189;
      uint64_t v191 = __ROR8__(v188, 44) + v184 + __ROR8__(v190 + v185 + v186, 21);
      uint64_t v192 = __ROR8__(v183, 33);
      unint64_t v193 = 0xB492B66FBE98F273 * v192;
      uint64_t v194 = v188 + v186;
      uint64_t v195 = v189 + v169[4] - 0x4B6D499041670D8DLL * v192;
      uint64_t v196 = __ROR8__(v181 + v179 + v195, 44) + v195 + __ROR8__(v182 + v187 + v180 + v195, 21);
      uint64_t v197 = v181 + v179 + v195 + v180;
      uint64_t v198 = (v171 & 0x7FFFFFFC0) - 64;
      if ((v171 & 0x7FFFFFFC0) == 0x40)
      {
        unint64_t v199 = v190;
      }
      else
      {
        uint64_t v200 = v169 + 15;
        do
        {
          uint64_t v201 = *(v200 - 6);
          uint64_t v202 = __ROR8__(v182 + v193 + v194 + v201, 37);
          uint64_t v204 = *(v200 - 2);
          uint64_t v203 = *(v200 - 1);
          unint64_t v182 = v204 + v194 - 0x4B6D499041670D8DLL * __ROR8__(v191 + v182 + v203, 42);
          uint64_t v205 = v197 + v190;
          uint64_t v206 = *(v200 - 7) - 0x4B6D499041670D8DLL * v191;
          uint64_t v207 = *(v200 - 4);
          uint64_t v208 = *(v200 - 5);
          uint64_t v209 = v206 + v201 + v208;
          unint64_t v199 = (0xB492B66FBE98F273 * v202) ^ v196;
          unint64_t v193 = 0xB492B66FBE98F273 * __ROR8__(v205, 33);
          uint64_t v191 = __ROR8__(v209, 44) + v206 + __ROR8__(v199 + v197 + v206 + v207, 21);
          uint64_t v194 = v209 + v207;
          unint64_t v210 = v193 + v196 + *(v200 - 3);
          uint64_t v211 = *v200;
          v200 += 8;
          uint64_t v212 = __ROR8__(v182 + v208 + v210 + v211, 21);
          unint64_t v213 = v204 + v203 + v210;
          uint64_t v196 = __ROR8__(v213, 44) + v210 + v212;
          uint64_t v197 = v213 + v211;
          unint64_t v190 = v199;
          v198 -= 64;
        }
        while (v198);
      }
      if ((v170 & 7) != 0)
      {
        uint64_t v214 = &v169[v170];
        uint64_t v215 = *(v214 - 7);
        uint64_t v217 = *(v214 - 2);
        uint64_t v216 = *(v214 - 1);
        uint64_t v218 = v199 + v197;
        unint64_t v219 = (0xB492B66FBE98F273 * __ROR8__(v182 + v194 + v193 + v215, 37)) ^ v196;
        uint64_t v221 = *(v214 - 4);
        uint64_t v220 = *(v214 - 3);
        unint64_t v182 = v220 + v194 - 0x4B6D499041670D8DLL * __ROR8__(v182 + v191 + v217, 42);
        uint64_t v222 = v219 + v197;
        uint64_t v223 = *(v214 - 8) - 0x4B6D499041670D8DLL * v191;
        uint64_t v226 = v214 - 6;
        uint64_t v225 = *(v214 - 6);
        uint64_t v224 = v226[1];
        uint64_t v227 = v223 + v215 + v225;
        unint64_t v193 = 0xB492B66FBE98F273 * __ROR8__(v218, 33);
        uint64_t v191 = __ROR8__(v227, 44) + v223 + __ROR8__(v222 + v223 + v224, 21);
        uint64_t v194 = v227 + v224;
        unint64_t v228 = v193 + v196 + v221;
        unint64_t v229 = v220 + v217 + v228;
        uint64_t v196 = __ROR8__(v229, 44) + v228 + __ROR8__(v182 + v225 + v228 + v216, 21);
        uint64_t v197 = v229 + v216;
        unint64_t v199 = v219;
      }
      unint64_t v230 = 0x9DDFEA08EB382D69
           * (v196 ^ ((0x9DDFEA08EB382D69 * (v191 ^ v196)) >> 47) ^ (0x9DDFEA08EB382D69 * (v191 ^ v196)));
      uint64_t v231 = v193 - 0x5B6A4C820B386C68 * v170 - 0x622015F714C7D297 * (v230 ^ (v230 >> 47));
      unint64_t v232 = 0x9DDFEA08EB382D69
           * ((v199
             - 0x4B6D499041670D8DLL * (v182 ^ (v182 >> 47))
             - 0x622015F714C7D297
             * ((0x9DDFEA08EB382D69
               * (v197 ^ ((0x9DDFEA08EB382D69 * (v194 ^ v197)) >> 47) ^ (0x9DDFEA08EB382D69 * (v194 ^ v197)))) ^ ((0x9DDFEA08EB382D69 * (v197 ^ ((0x9DDFEA08EB382D69 * (v194 ^ v197)) >> 47) ^ (0x9DDFEA08EB382D69 * (v194 ^ v197)))) >> 47))) ^ v231);
      unint64_t v172 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v231 ^ (v232 >> 47) ^ v232)) ^ ((0x9DDFEA08EB382D69
                                                                      * (v231 ^ (v232 >> 47) ^ v232)) >> 47));
    }
    else
    {
      unint64_t v172 = sub_1CBAE06B8(v169, v171, qword_1EBCBE580);
    }
    unint64_t v233 = ~(v172 << 32);
    unint64_t v234 = v172 | ((unint64_t)(37 * v168) << 32);
    unint64_t v235 = ((v234 + v233) ^ ((v234 + v233) >> 22)) + ~(((v234 + v233) ^ ((v234 + v233) >> 22)) << 13);
    unint64_t v236 = (9 * (v235 ^ (v235 >> 8))) ^ ((9 * (v235 ^ (v235 >> 8))) >> 15);
    unint64_t v237 = v236 + ~(v236 << 27);
    unint64_t v238 = (v237 >> 31) ^ v237;
    unint64_t v239 = (unint64_t)__src[1];
    int v438 = v153;
    if (__src[1])
    {
      uint8x8_t v240 = (uint8x8_t)vcnt_s8((int8x8_t)__src[1]);
      v240.i16[0] = vaddlv_u8(v240);
      unint64_t v241 = v240.u32[0];
      if (v240.u32[0] > 1uLL)
      {
        uint64_t v2 = (v237 >> 31) ^ v237;
        if (__src[1] <= (void *)v238) {
          uint64_t v2 = v238 % (unint64_t)__src[1];
        }
      }
      else
      {
        uint64_t v2 = v238 & ((unint64_t)__src[1] + 0xFFFFFFFF);
      }
      unint64_t v242 = (void **)*((void *)__src[0] + v2);
      if (v242)
      {
        uint64_t v243 = (unsigned int *)*v242;
        if (*v242)
        {
          uint64_t v244 = (const void *)v455[5];
          int v245 = *((_DWORD *)v455 + 26);
          while (1)
          {
            unint64_t v246 = *((void *)v243 + 1);
            if (v246 == v238) {
              break;
            }
            if (v241 > 1)
            {
              if (v246 >= v239) {
                v246 %= v239;
              }
            }
            else
            {
              v246 &= v239 - 1;
            }
            if (v246 != v2)
            {
LABEL_353:
              uint64_t v152 = v447;
              goto LABEL_354;
            }
LABEL_352:
            uint64_t v243 = *(unsigned int **)v243;
            if (!v243) {
              goto LABEL_353;
            }
          }
          unsigned int v247 = v243[20];
          BOOL v248 = v247 == -1 || v245 == -1;
          if (!v248)
          {
            if (v247 == v245 && !memcmp(*((const void **)v243 + 2), v244, 8 * v243[6])) {
              goto LABEL_600;
            }
            goto LABEL_352;
          }
          BOOL v249 = v247 != -1;
          int v250 = v245 == -1 || v249;
          if (((v249 ^ v250) & 1) == 0) {
            goto LABEL_352;
          }
LABEL_600:
          uint64_t v152 = v447;
          unint64_t prime = v167;
          uint64_t v165 = v455;
LABEL_415:
          uint64_t v2 = *(void *)(v436 + 24);
          if (!v2)
          {
            uint64_t v155 = v451;
            uint64_t v153 = v438;
            goto LABEL_593;
          }
          uint64_t v271 = 0;
          int v458 = (int *)(v165 + 4);
          uint64_t v446 = v243 + 28;
LABEL_417:
          if (!__p[1]) {
            goto LABEL_611;
          }
          unint64_t v272 = *v458;
          uint8x8_t v273 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v273.i16[0] = vaddlv_u8(v273);
          if (v273.u32[0] > 1uLL)
          {
            unint64_t v274 = *v458;
            if (__p[1] <= (void *)v272) {
              unint64_t v274 = v272 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v274 = (LODWORD(__p[1]) - 1) & v272;
          }
          unint64_t v275 = (uint64_t **)*((void *)__p[0] + v274);
          if (!v275 || (unint64_t v276 = *v275) == 0) {
LABEL_611:
          }
            abort();
          uint64_t v277 = *(unsigned int *)(v2 + 16);
          while (2)
          {
            unint64_t v278 = v276[1];
            if (v278 != v272)
            {
              if (v273.u32[0] > 1uLL)
              {
                if ((void *)v278 >= __p[1]) {
                  v278 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v278 &= (unint64_t)__p[1] - 1;
              }
              if (v278 != v274) {
                goto LABEL_611;
              }
LABEL_433:
              unint64_t v276 = (uint64_t *)*v276;
              if (!v276) {
                goto LABEL_611;
              }
              continue;
            }
            break;
          }
          if (*((_DWORD *)v276 + 4) != v272) {
            goto LABEL_433;
          }
          uint64_t v279 = v271;
          if (v277) {
            uint64_t v280 = -1;
          }
          else {
            uint64_t v280 = 0;
          }
          unint64_t v281 = prime & 0xFFFFFFFF00000000 | v277;
          uint64_t v282 = (uint64_t)(v276 + 3);
          if (llvm::rdf::RegisterAggr::hasAliasOf((uint64_t)(v276 + 3), v281, v280))
          {
            unint64_t v283 = *(void **)(v451 + 16);
            unint64_t v284 = llvm::rdf::RegisterAggr::intersectWith(v282, v281, v280);
            unint64_t v286 = llvm::rdf::PhysicalRegisterInfo::mapTo(v283, v284, v285, *(_DWORD *)(v2 + 16));
            unint64_t prime = v286;
            uint64_t v462 = v287;
            uint64_t v445 = v2;
            uint64_t v288 = *(uint64_t **)(v2 + 40);
            if (v288)
            {
              unint64_t v289 = v286;
              uint64_t v271 = v279;
              unint64_t v452 = v286;
              while ((v288[3] & (unint64_t)v462) == 0)
              {
LABEL_550:
                uint64_t v288 = (uint64_t *)*v288;
                if (!v288)
                {
                  uint64_t v2 = v445;
LABEL_563:
                  uint64_t v2 = *(void *)v2;
                  if (v2) {
                    goto LABEL_417;
                  }
                  uint64_t v155 = v451;
                  uint64_t v153 = v438;
                  if (v271)
                  {
                    if (v444 >= (int *)v433)
                    {
                      uint64_t v336 = v444 - v438;
                      unint64_t v337 = v336 + 1;
                      if ((unint64_t)(v336 + 1) >> 62) {
                        goto LABEL_611;
                      }
                      if ((v433 - (char *)v438) >> 1 > v337) {
                        unint64_t v337 = (v433 - (char *)v438) >> 1;
                      }
                      if ((unint64_t)(v433 - (char *)v438) >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v338 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v338 = v337;
                      }
                      if (v338)
                      {
                        if (v338 >> 62) {
                          goto LABEL_759;
                        }
                        uint64_t v2 = prime;
                        unsigned int v339 = (char *)operator new(4 * v338);
                      }
                      else
                      {
                        uint64_t v2 = prime;
                        unsigned int v339 = 0;
                      }
                      unsigned int v341 = (int *)&v339[4 * v336];
                      int *v341 = *v458;
                      int v342 = v341 + 1;
                      if (v444 != v438)
                      {
                        uint64_t v343 = v444;
                        do
                        {
                          int v344 = *--v343;
                          *--unsigned int v341 = v344;
                        }
                        while (v343 != v438);
                      }
                      unsigned int v433 = &v339[4 * v338];
                      if (v438) {
                        operator delete(v438);
                      }
                      uint64_t v153 = v341;
                      int v444 = v342;
                      unint64_t prime = v2;
                    }
                    else
                    {
                      *v444++ = *v458;
                    }
                  }
LABEL_593:
                  unsigned int v345 = (uint64_t *)v165[1];
                  if (v345)
                  {
                    do
                    {
                      unsigned int v346 = v345;
                      unsigned int v345 = (uint64_t *)*v345;
                    }
                    while (v345);
                  }
                  else
                  {
                    do
                    {
                      unsigned int v346 = (uint64_t *)v165[2];
                      BOOL v248 = *v346 == (void)v165;
                      uint64_t v165 = v346;
                    }
                    while (!v248);
                  }
                  uint64_t v165 = v346;
                  if (v346 == (uint64_t *)v439) {
                    goto LABEL_605;
                  }
                  goto LABEL_314;
                }
              }
              if (v289) {
                uint64_t v290 = v288[3] & (unint64_t)v462;
              }
              else {
                uint64_t v290 = 0;
              }
              uint64_t v291 = *((unsigned int *)v165 + 12);
              unsigned int v461 = *((_DWORD *)v288 + 4);
              if (!v291)
              {
LABEL_449:
                int v294 = (void *)v289;
                unint64_t v295 = v290;
                goto LABEL_547;
              }
              unint64_t v292 = (void *)v165[5];
              uint64_t v293 = 8 * v291;
              while (!*v292)
              {
                ++v292;
                v293 -= 8;
                if (!v293) {
                  goto LABEL_449;
                }
              }
              unint64_t v296 = v290 ^ v289;
              int8x8_t v297 = *(int8x8_t *)(v243 + 26);
              if (v297)
              {
                uint8x8_t v298 = (uint8x8_t)vcnt_s8(v297);
                v298.i16[0] = vaddlv_u8(v298);
                if (v298.u32[0] > 1uLL)
                {
                  uint64_t v299 = v290 ^ v289;
                  if (v296 >= *(void *)&v297) {
                    uint64_t v299 = v296 % *(void *)&v297;
                  }
                }
                else
                {
                  uint64_t v299 = (*(void *)&v297 - 1) & v296;
                }
                unint64_t v300 = *(uint64_t ***)(*((void *)v243 + 12) + 8 * v299);
                if (v300)
                {
                  for (kunsigned int k = *v300; kk; kunsigned int k = (uint64_t *)*kk)
                  {
                    unint64_t v302 = kk[1];
                    if (v302 == v296)
                    {
                      if (*((_DWORD *)kk + 4) == prime && kk[3] == v290)
                      {
                        int v294 = (void *)kk[4];
                        unint64_t v295 = kk[5];
                        uint64_t v165 = v455;
                        goto LABEL_547;
                      }
                    }
                    else
                    {
                      if (v298.u32[0] > 1uLL)
                      {
                        if (v302 >= *(void *)&v297) {
                          v302 %= *(void *)&v297;
                        }
                      }
                      else
                      {
                        v302 &= *(void *)&v297 - 1;
                      }
                      if (v302 != v299) {
                        break;
                      }
                    }
                  }
                }
              }
              unsigned int v456 = v271;
              int v294 = (void *)llvm::rdf::RegisterAggr::clearIn((uint64_t)v450, v289, v290);
              unint64_t v295 = v304;
              unint64_t v305 = *((void *)v243 + 13);
              if (v305)
              {
                uint8x8_t v306 = (uint8x8_t)vcnt_s8((int8x8_t)v305);
                v306.i16[0] = vaddlv_u8(v306);
                if (v306.u32[0] > 1uLL)
                {
                  uint64_t v152 = v290 ^ v289;
                  if (v296 >= v305) {
                    uint64_t v152 = v296 % v305;
                  }
                }
                else
                {
                  uint64_t v152 = (v305 - 1) & v296;
                }
                uint64_t v307 = *(uint64_t ***)(*((void *)v243 + 12) + 8 * v152);
                if (v307)
                {
                  for (munsigned int m = *v307; mm; munsigned int m = (uint64_t *)*mm)
                  {
                    unint64_t v309 = mm[1];
                    if (v309 == v296)
                    {
                      if (*((_DWORD *)mm + 4) == prime && mm[3] == v290)
                      {
                        uint64_t v152 = v447;
                        uint64_t v165 = v455;
                        goto LABEL_546;
                      }
                    }
                    else
                    {
                      if (v306.u32[0] > 1uLL)
                      {
                        if (v309 >= v305) {
                          v309 %= v305;
                        }
                      }
                      else
                      {
                        v309 &= v305 - 1;
                      }
                      if (v309 != v152) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v311 = operator new(0x30uLL);
              *uint64_t v311 = 0;
              v311[1] = v296;
              v311[2] = v289;
              v311[3] = v290;
              v311[4] = v294;
              v311[5] = v295;
              float v312 = (float)(unint64_t)(*((void *)v243 + 15) + 1);
              float v313 = *((float *)v243 + 32);
              if (v305 && (float)(v313 * (float)v305) >= v312)
              {
LABEL_536:
                uint64_t v330 = *((void *)v243 + 12);
                int v331 = *(void **)(v330 + 8 * v152);
                uint64_t v165 = v455;
                if (v331)
                {
                  *uint64_t v311 = *v331;
                  uint64_t v152 = v447;
                }
                else
                {
                  *uint64_t v311 = *v446;
                  *uint64_t v446 = v311;
                  *(void *)(v330 + 8 * v152) = v446;
                  uint64_t v152 = v447;
                  if (!*v311)
                  {
LABEL_545:
                    ++*((void *)v243 + 15);
                    unint64_t prime = v452;
LABEL_546:
                    uint64_t v271 = v456;
LABEL_547:
                    uint64_t v483 = v294;
                    unint64_t v484 = v295;
                    if (v294 && v295)
                    {
                      sub_1CC406714(v152, v458);
                      int v334 = sub_1CC406A5C(v333 + 8, v294, &v483);
                      LODWORD(v471) = v461;
                      *((void *)&v471 + 1) = v295;
                      uint64_t v271 = (sub_1CC406E6C((uint64_t)(v334 + 24), v461, v295, &v471) | v271) & 1;
                    }
                    goto LABEL_550;
                  }
                  unint64_t v332 = *(void *)(*v311 + 8);
                  if ((v305 & (v305 - 1)) != 0)
                  {
                    if (v332 >= v305) {
                      v332 %= v305;
                    }
                  }
                  else
                  {
                    v332 &= v305 - 1;
                  }
                  int v331 = (void *)(*((void *)v243 + 12) + 8 * v332);
                }
                *int v331 = v311;
                goto LABEL_545;
              }
              BOOL v314 = (v305 & (v305 - 1)) != 0;
              if (v305 < 3) {
                BOOL v314 = 1;
              }
              unint64_t v315 = v314 | (2 * v305);
              unint64_t v316 = vcvtps_u32_f32(v312 / v313);
              if (v315 <= v316) {
                int8x8_t v317 = (int8x8_t)v316;
              }
              else {
                int8x8_t v317 = (int8x8_t)v315;
              }
              if (*(void *)&v317 == 1)
              {
                int8x8_t v317 = (int8x8_t)2;
              }
              else if ((*(void *)&v317 & (*(void *)&v317 - 1)) != 0)
              {
                int8x8_t v317 = (int8x8_t)std::__next_prime(*(void *)&v317);
                unint64_t v305 = *((void *)v243 + 13);
              }
              if (*(void *)&v317 > v305) {
                goto LABEL_502;
              }
              if (*(void *)&v317 < v305)
              {
                unint64_t v324 = vcvtps_u32_f32((float)*((unint64_t *)v243 + 15) / *((float *)v243 + 32));
                if (v305 < 3
                  || (uint8x8_t v325 = (uint8x8_t)vcnt_s8((int8x8_t)v305), v325.i16[0] = vaddlv_u8(v325), v325.u32[0] > 1uLL))
                {
                  unint64_t v324 = std::__next_prime(v324);
                }
                else
                {
                  uint64_t v326 = 1 << -(char)__clz(v324 - 1);
                  if (v324 >= 2) {
                    unint64_t v324 = v326;
                  }
                }
                if (*(void *)&v317 <= v324) {
                  int8x8_t v317 = (int8x8_t)v324;
                }
                if (*(void *)&v317 >= v305)
                {
                  unint64_t v305 = *((void *)v243 + 13);
                }
                else
                {
                  if (v317)
                  {
LABEL_502:
                    if (*(void *)&v317 >> 61) {
                      goto LABEL_759;
                    }
                    int v318 = operator new(8 * *(void *)&v317);
                    int64_t v319 = (void *)*((void *)v243 + 12);
                    *((void *)v243 + 12) = v318;
                    if (v319) {
                      operator delete(v319);
                    }
                    uint64_t v320 = 0;
                    *((int8x8_t *)v243 + 13) = v317;
                    do
                      *(void *)(*((void *)v243 + 12) + 8 * v320++) = 0;
                    while (*(void *)&v317 != v320);
                    uint64_t v321 = (void *)*v446;
                    if (*v446)
                    {
                      unint64_t v322 = v321[1];
                      uint8x8_t v323 = (uint8x8_t)vcnt_s8(v317);
                      v323.i16[0] = vaddlv_u8(v323);
                      if (v323.u32[0] > 1uLL)
                      {
                        if (v322 >= *(void *)&v317) {
                          v322 %= *(void *)&v317;
                        }
                      }
                      else
                      {
                        v322 &= *(void *)&v317 - 1;
                      }
                      *(void *)(*((void *)v243 + 12) + 8 * v322) = v446;
                      unsigned __int8 v327 = (void *)*v321;
                      if (*v321)
                      {
                        do
                        {
                          unint64_t v328 = v327[1];
                          if (v323.u32[0] > 1uLL)
                          {
                            if (v328 >= *(void *)&v317) {
                              v328 %= *(void *)&v317;
                            }
                          }
                          else
                          {
                            v328 &= *(void *)&v317 - 1;
                          }
                          if (v328 != v322)
                          {
                            uint64_t v329 = *((void *)v243 + 12);
                            if (!*(void *)(v329 + 8 * v328))
                            {
                              *(void *)(v329 + 8 * v328) = v321;
                              goto LABEL_527;
                            }
                            *uint64_t v321 = *v327;
                            void *v327 = **(void **)(*((void *)v243 + 12) + 8 * v328);
                            **(void **)(*((void *)v243 + 12) + 8 * v328) = v327;
                            unsigned __int8 v327 = v321;
                          }
                          unint64_t v328 = v322;
LABEL_527:
                          uint64_t v321 = v327;
                          unsigned __int8 v327 = (void *)*v327;
                          unint64_t v322 = v328;
                        }
                        while (v327);
                      }
                    }
                    unint64_t v305 = (unint64_t)v317;
                    goto LABEL_531;
                  }
                  uint64_t v335 = (void *)*((void *)v243 + 12);
                  *((void *)v243 + 12) = 0;
                  if (v335) {
                    operator delete(v335);
                  }
                  unint64_t v305 = 0;
                  *((void *)v243 + 13) = 0;
                }
              }
LABEL_531:
              if ((v305 & (v305 - 1)) != 0)
              {
                if (v296 >= v305) {
                  uint64_t v152 = v296 % v305;
                }
                else {
                  uint64_t v152 = v296;
                }
              }
              else
              {
                uint64_t v152 = (v305 - 1) & v296;
              }
              goto LABEL_536;
            }
          }
          else
          {
            unint64_t prime = v281;
          }
          uint64_t v271 = v279;
          goto LABEL_563;
        }
      }
    }
LABEL_354:
    uint64_t v243 = (unsigned int *)operator new(0x88uLL);
    *(void *)uint64_t v243 = 0;
    *((void *)v243 + 1) = v238;
    *((void *)v243 + 2) = v243 + 8;
    *((void *)v243 + 3) = 0x600000000;
    if (v450 != (const void **)(v243 + 4))
    {
      unint64_t v251 = *((unsigned int *)v455 + 12);
      if (*((_DWORD *)v455 + 12))
      {
        if (v251 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v243 + 8, *v450, 8 * *((unsigned int *)v455 + 12));
        v243[6] = v251;
      }
    }
    v243[20] = *((_DWORD *)v455 + 26);
    *((void *)v243 + 11) = v455[14];
    *((_OWORD *)v243 + 6) = 0u;
    *((_OWORD *)v243 + 7) = 0u;
    v243[32] = 1065353216;
    float v252 = (float)((unint64_t)v497[1] + 1);
    unint64_t prime = v167;
    if (v239 && (float)(v498 * (float)v239) >= v252)
    {
LABEL_405:
      unint64_t v268 = __src[0];
      uint64_t v269 = (void *)*((void *)__src[0] + v2);
      uint64_t v165 = v455;
      if (v269)
      {
        *(void *)uint64_t v243 = *v269;
      }
      else
      {
        *(void **)uint64_t v243 = v497[0];
        v497[0] = v243;
        v268[v2] = v497;
        if (!*(void *)v243)
        {
LABEL_414:
          ++v497[1];
          goto LABEL_415;
        }
        unint64_t v270 = *(void *)(*(void *)v243 + 8);
        if ((v239 & (v239 - 1)) != 0)
        {
          if (v270 >= v239) {
            v270 %= v239;
          }
        }
        else
        {
          v270 &= v239 - 1;
        }
        uint64_t v269 = (char *)__src[0] + 8 * v270;
      }
      void *v269 = v243;
      goto LABEL_414;
    }
    BOOL v253 = (v239 & (v239 - 1)) != 0;
    if (v239 < 3) {
      BOOL v253 = 1;
    }
    unint64_t v254 = v253 | (2 * v239);
    unint64_t v255 = vcvtps_u32_f32(v252 / v498);
    if (v254 <= v255) {
      int8x8_t v256 = (int8x8_t)v255;
    }
    else {
      int8x8_t v256 = (int8x8_t)v254;
    }
    if (*(void *)&v256 == 1)
    {
      int8x8_t v256 = (int8x8_t)2;
    }
    else if ((*(void *)&v256 & (*(void *)&v256 - 1)) != 0)
    {
      int8x8_t v256 = (int8x8_t)std::__next_prime(*(void *)&v256);
    }
    unint64_t v239 = (unint64_t)__src[1];
    if ((void *)*(void *)&v256 > __src[1]) {
      goto LABEL_371;
    }
    if ((void *)*(void *)&v256 < __src[1])
    {
      unint64_t v263 = vcvtps_u32_f32((float)(unint64_t)v497[1] / v498);
      if (__src[1] < (void *)3
        || (uint8x8_t v264 = (uint8x8_t)vcnt_s8((int8x8_t)__src[1]), v264.i16[0] = vaddlv_u8(v264), v264.u32[0] > 1uLL))
      {
        unint64_t v263 = std::__next_prime(v263);
      }
      else
      {
        uint64_t v265 = 1 << -(char)__clz(v263 - 1);
        if (v263 >= 2) {
          unint64_t v263 = v265;
        }
      }
      if (*(void *)&v256 <= v263) {
        int8x8_t v256 = (int8x8_t)v263;
      }
      if (*(void *)&v256 >= v239)
      {
        unint64_t v239 = (unint64_t)__src[1];
      }
      else
      {
        if (v256)
        {
LABEL_371:
          if (*(void *)&v256 >> 61) {
LABEL_759:
          }
            sub_1CB833614();
          int v257 = operator new(8 * *(void *)&v256);
          BOOL v258 = __src[0];
          __src[0] = v257;
          if (v258) {
            operator delete(v258);
          }
          uint64_t v259 = 0;
          __src[1] = (void *)v256;
          do
            *((void *)__src[0] + v259++) = 0;
          while (*(void *)&v256 != v259);
          unsigned int v260 = (void **)v497[0];
          if (v497[0])
          {
            unint64_t v261 = *((void *)v497[0] + 1);
            uint8x8_t v262 = (uint8x8_t)vcnt_s8(v256);
            v262.i16[0] = vaddlv_u8(v262);
            if (v262.u32[0] > 1uLL)
            {
              if (v261 >= *(void *)&v256) {
                v261 %= *(void *)&v256;
              }
            }
            else
            {
              v261 &= *(void *)&v256 - 1;
            }
            *((void *)__src[0] + v261) = v497;
            for (nn = *v260; nn; unint64_t v261 = v267)
            {
              unint64_t v267 = nn[1];
              if (v262.u32[0] > 1uLL)
              {
                if (v267 >= *(void *)&v256) {
                  v267 %= *(void *)&v256;
                }
              }
              else
              {
                v267 &= *(void *)&v256 - 1;
              }
              if (v267 != v261)
              {
                if (!*((void *)__src[0] + v267))
                {
                  *((void *)__src[0] + v267) = v260;
                  goto LABEL_396;
                }
                *unsigned int v260 = (void *)*nn;
                *nuint64_t n = **((void **)__src[0] + v267);
                **((void **)__src[0] + v267) = nn;
                nuint64_t n = v260;
              }
              unint64_t v267 = v261;
LABEL_396:
              unsigned int v260 = (void **)nn;
              nuint64_t n = (void *)*nn;
            }
          }
          unint64_t v239 = (unint64_t)v256;
          goto LABEL_400;
        }
        uint64_t v340 = __src[0];
        __src[0] = 0;
        if (v340) {
          operator delete(v340);
        }
        unint64_t v239 = 0;
        __src[1] = 0;
      }
    }
LABEL_400:
    if ((v239 & (v239 - 1)) != 0)
    {
      if (v239 <= v238) {
        uint64_t v2 = v238 % v239;
      }
      else {
        uint64_t v2 = v238;
      }
    }
    else
    {
      uint64_t v2 = (v239 - 1) & v238;
    }
    goto LABEL_405;
  }
  uint64_t v155 = v451;
LABEL_613:
  unsigned int v348 = v153;
  if (*(unsigned char *)(v155 + 264))
  {
    uint64_t v398 = llvm::dbgs((llvm *)v19);
    int v399 = (void *)*((void *)v398 + 4);
    if (*((void *)v398 + 3) - (void)v399 > 0xDuLL)
    {
      qmemcpy(v399, "Real use map:\n", 14);
      *((void *)v398 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v398, "Real use map:\n", 0xEuLL);
    }
    uint64_t v400 = *(void *)(v451 + 296);
    uint64_t v401 = *(unsigned int *)(v451 + 312);
    int v402 = (unsigned int *)(v400 + 48 * v401);
    if (*(_DWORD *)(v451 + 304))
    {
      if (v401)
      {
        uint64_t v403 = 48 * v401;
        uint64_t v404 = *(unsigned int **)(v451 + 296);
        while (*v404 >= 0xFFFFFFFE)
        {
          v404 += 12;
          v403 -= 48;
          if (!v403) {
            goto LABEL_725;
          }
        }
      }
      else
      {
        uint64_t v404 = *(unsigned int **)(v451 + 296);
      }
    }
    else
    {
LABEL_725:
      uint64_t v404 = (unsigned int *)(v400 + 48 * v401);
    }
    unsigned int v405 = (unsigned int *)(v400 + 48 * v401);
    while (v404 != v405)
    {
      LODWORD(v501) = *v404;
      unsigned int v406 = (llvm *)sub_1CC40731C((uint64_t)&v502, (uint64_t)(v404 + 2));
      int v407 = llvm::dbgs(v406);
      int v408 = (_DWORD *)*((void *)v407 + 4);
      if (*((void *)v407 + 3) - (void)v408 > 3uLL)
      {
        *int v408 = 543778928;
        *((void *)v407 + 4) += 4;
      }
      else
      {
        int v407 = llvm::raw_ostream::write(v407, "phi ", 4uLL);
      }
      int v409 = *(const llvm::rdf::DataFlowGraph **)v451;
      uint64_t v490 = &v501;
      __dst = v409;
      llvm::rdf::operator<<((char **)v407, (unsigned int **)&v490);
      unsigned int v410 = *(const llvm::rdf::DataFlowGraph **)v451;
      if (v501) {
        uint64_t v411 = *(void *)(*((void *)v410 + 37) + 8 * ((v501 - 1) >> *((_DWORD *)v410 + 69)))
      }
             + 32 * (*((_DWORD *)v410 + 70) & (v501 - 1));
      else {
        uint64_t v411 = 0;
      }
      unsigned int v412 = (llvm *)sub_1CC3F9160(v411, (uint64_t (*)(uint64_t, void))sub_1CC400CA4, (uint64_t)v410, (uint64_t)&v490);
      if (__dst)
      {
        v488[0] = (void *)llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v490, *(const llvm::rdf::DataFlowGraph **)v451);
        v488[1] = v415;
        uint64_t v416 = llvm::dbgs((llvm *)v488[0]);
        unint64_t v417 = (unsigned char *)*((void *)v416 + 4);
        if ((unint64_t)v417 >= *((void *)v416 + 3))
        {
          uint64_t v416 = llvm::raw_ostream::write(v416, 60);
        }
        else
        {
          *((void *)v416 + 4) = v417 + 1;
          *unint64_t v417 = 60;
        }
        uint64_t v418 = *(const llvm::rdf::DataFlowGraph **)v451;
        uint64_t v483 = v488;
        unint64_t v484 = (unint64_t)v418;
        unsigned int v413 = llvm::rdf::operator<<(v416, (unsigned int **)&v483);
        uint64_t v419 = (unsigned char *)*((void *)v413 + 4);
        if ((unint64_t)v419 >= *((void *)v413 + 3))
        {
          unsigned int v413 = llvm::raw_ostream::write(v413, 62);
        }
        else
        {
          *((void *)v413 + 4) = v419 + 1;
          *uint64_t v419 = 62;
        }
      }
      else
      {
        unsigned int v413 = llvm::dbgs(v412);
        uint64_t v414 = (_DWORD *)*((void *)v413 + 4);
        if (*((void *)v413 + 3) - (void)v414 > 6uLL)
        {
          *(_DWORD *)((char *)v414 + 3) = 1046963570;
          *uint64_t v414 = 1919905340;
          *((void *)v413 + 4) += 7;
        }
        else
        {
          unsigned int v413 = llvm::raw_ostream::write(v413, "<noreg>", 7uLL);
        }
      }
      int v420 = llvm::dbgs(v413);
      uint64_t v421 = (_DWORD *)*((void *)v420 + 4);
      if (*((void *)v420 + 3) - (void)v421 > 3uLL)
      {
        *uint64_t v421 = 540945696;
        *((void *)v420 + 4) += 4;
      }
      else
      {
        int v420 = llvm::raw_ostream::write(v420, " -> ", 4uLL);
      }
      uint64_t v422 = *(const llvm::rdf::DataFlowGraph **)v451;
      v488[0] = &v502;
      v488[1] = v422;
      int v423 = llvm::rdf::operator<<(v420, v488);
      unsigned int v424 = (unsigned char *)*((void *)v423 + 4);
      if ((unint64_t)v424 >= *((void *)v423 + 3))
      {
        llvm::raw_ostream::write(v423, 10);
      }
      else
      {
        *((void *)v423 + 4) = v424 + 1;
        *unsigned int v424 = 10;
      }
      if (v490 != &v492) {
        free(v490);
      }
      sub_1CC404274((uint64_t)&v502);
      uint64_t v425 = v404 + 12;
      while (v425 != v402)
      {
        unsigned int v426 = *v425;
        v425 += 12;
        if (v426 <= 0xFFFFFFFD)
        {
          uint64_t v404 = v425 - 12;
          goto LABEL_754;
        }
      }
      uint64_t v404 = v402;
LABEL_754:
      ;
    }
  }
  int v349 = v497[0];
  if (v497[0])
  {
    do
    {
      unsigned int v350 = (void *)*v349;
      uint64_t v351 = (void *)v349[14];
      if (v351)
      {
        do
        {
          uint64_t v352 = (void *)*v351;
          operator delete(v351);
          uint64_t v351 = v352;
        }
        while (v352);
      }
      int v353 = (void *)v349[12];
      v349[12] = 0;
      if (v353) {
        operator delete(v353);
      }
      int v354 = (void *)v349[2];
      if (v354 != v349 + 4) {
        free(v354);
      }
      operator delete(v349);
      int v349 = v350;
    }
    while (v350);
  }
  uint64_t v355 = __src[0];
  __src[0] = 0;
  if (v355) {
    operator delete(v355);
  }
  uint64_t v356 = v479[0];
  if (v479[0])
  {
    do
    {
      int v357 = (void *)*v356;
      uint64_t v358 = (void *)v356[3];
      if (v358 != v356 + 5) {
        free(v358);
      }
      operator delete(v356);
      uint64_t v356 = v357;
    }
    while (v357);
  }
  uint64_t v359 = __p[0];
  __p[0] = 0;
  if (v359) {
    operator delete(v359);
  }
  if (v348) {
    operator delete(v348);
  }
  sub_1CC4066C0(v482[0]);
  if (v505 != &v507) {
    free(v505);
  }
  if (v508 != (char *)v510) {
    free(v508);
  }
}

BOOL sub_1CC400CA4(_WORD *a1)
{
  return (*a1 & 0x1F) == 6;
}

void llvm::rdf::Liveness::computeLiveIns(llvm::rdf::Liveness *this)
{
  uint64_t v1 = (const llvm::rdf::DataFlowGraph **)this;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 272;
  sub_1CD569848((_DWORD *)this + 68);
  llvm::rdf::CodeNode::members(*((void *)*v1 + 32), *v1, (uint64_t)&v247);
  uint64_t v3 = v247;
  uint64_t v221 = (llvm::rdf::Liveness *)v1;
  if (v248)
  {
    uint64_t v212 = &v247[2 * v248];
    do
    {
      uint64_t v216 = v3;
      uint64_t v4 = *v3;
      unint64_t v5 = *(void **)(v4 + 8);
      llvm::rdf::CodeNode::members(v4, *(const llvm::rdf::DataFlowGraph **)v221, (uint64_t)&v243);
      unint64_t v6 = v243.n128_u64[0];
      unint64_t v7 = v243.n128_u64[0] + 16 * v243.n128_u32[2];
      if (v243.n128_u32[2])
      {
        do
        {
          uint64_t v8 = (void *)*(unsigned int *)(v6 + 8);
          llvm::rdf::CodeNode::members(*(void *)v6, *(const llvm::rdf::DataFlowGraph **)v221, (uint64_t)v240);
          uint64_t v9 = v240[0];
          if (LODWORD(v240[1]))
          {
            uint64_t v10 = 16 * LODWORD(v240[1]);
            uint64_t v11 = (unsigned int *)((char *)v240[0] + 8);
            do
            {
              unsigned int v12 = *v11;
              v11 += 4;
              unint64_t v233 = (void *)v12;
              unint64_t v234 = v5;
              sub_1CC407554((uint64_t)v237, (uint64_t)v2, &v233, &v234);
              v10 -= 16;
            }
            while (v10);
            uint64_t v9 = v240[0];
          }
          if (v9 != v241) {
            free(v9);
          }
          v237[0] = v8;
          v237[1] = v5;
          sub_1CC407554((uint64_t)v240, (uint64_t)v2, v237, &v237[1]);
          v6 += 16;
        }
        while (v6 != v7);
        unint64_t v6 = v243.n128_u64[0];
      }
      if ((uint64_t *)v6 != &v244) {
        free((void *)v6);
      }
      uint64_t v3 = v216 + 2;
    }
    while (v216 + 2 != v212);
    uint64_t v3 = v247;
    uint64_t v1 = (const llvm::rdf::DataFlowGraph **)v221;
  }
  if (v3 != (uint64_t *)&v249) {
    free(v3);
  }
  uint64_t v13 = *(void *)*v1;
  uint64_t v231 = 0;
  uint64_t v232 = 0;
  unint64_t v230 = &v231;
  uint64_t v14 = (uint64_t *)(v13 + 320);
  uint64_t v198 = v13;
  uint64_t v15 = *(uint64_t **)(v13 + 328);
  if (v15 != (uint64_t *)(v13 + 320))
  {
    uint64_t v16 = v221;
    do
    {
      uint64_t v17 = *((void *)v16 + 4);
      int v18 = *(void **)(v17 + 256);
      if (v18)
      {
        uint64_t v19 = (void *)(v17 + 256);
        uint64_t v20 = (void *)(v17 + 256);
        do
        {
          unint64_t v21 = v18[4];
          BOOL v22 = v21 >= (unint64_t)v15;
          if (v21 >= (unint64_t)v15) {
            unsigned int v23 = v18;
          }
          else {
            unsigned int v23 = v18 + 1;
          }
          if (v22) {
            uint64_t v20 = v18;
          }
          int v18 = (void *)*v23;
        }
        while (*v23);
        if (v20 != v19 && v20[4] <= (unint64_t)v15)
        {
          uint64_t v24 = (void *)v20[5];
          unsigned int v247 = 0;
          BOOL v248 = 0;
          LODWORD(v249) = 0;
          int v250 = 0;
          unint64_t v251 = 0;
          uint64_t v252 = 0;
          sub_1CC3F979C((uint64_t)&v247, v24, v20 + 6);
          uint64_t v26 = v250;
          unint64_t v25 = v251;
          if (v251 != v250)
          {
            uint64_t v27 = 0;
            unsigned int v28 = 0;
            do
            {
              uint64_t v29 = *((void *)v16 + 4);
              uint64_t v30 = *(void **)(v29 + 256);
              if (v30)
              {
                unint64_t v31 = v26[v27];
                unsigned int v32 = (void *)(v29 + 256);
                uint64_t v33 = v32;
                do
                {
                  unint64_t v34 = v30[4];
                  BOOL v35 = v34 >= v31;
                  if (v34 >= v31) {
                    BOOL v36 = v30;
                  }
                  else {
                    BOOL v36 = v30 + 1;
                  }
                  if (v35) {
                    uint64_t v33 = v30;
                  }
                  uint64_t v30 = (void *)*v36;
                }
                while (*v36);
                if (v33 != v32 && v33[4] <= v31)
                {
                  sub_1CC3F979C((uint64_t)&v247, (void *)v33[5], v33 + 6);
                  uint64_t v26 = v250;
                  unint64_t v25 = v251;
                }
              }
              uint64_t v27 = ++v28;
            }
            while (v28 < (unint64_t)(v25 - v26));
          }
          v243.n128_u64[0] = (unint64_t)v15;
          sub_1CBB24B0C((uint64_t)&v247, &v243);
          unint64_t v37 = v231;
          unsigned int v38 = &v231;
          uint64_t v39 = &v231;
          if (v231)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v39 = (uint64_t **)v37;
                unint64_t v40 = v37[4];
                if (v40 <= (unint64_t)v15) {
                  break;
                }
                unint64_t v37 = *v39;
                unsigned int v38 = v39;
                if (!*v39) {
                  goto LABEL_53;
                }
              }
              if (v40 >= (unint64_t)v15) {
                break;
              }
              unint64_t v37 = v39[1];
              if (!v37)
              {
                unsigned int v38 = v39 + 1;
                goto LABEL_53;
              }
            }
          }
          else
          {
LABEL_53:
            unsigned int v41 = (uint64_t *)v39;
            uint64_t v39 = (uint64_t **)operator new(0x40uLL);
            v39[7] = 0;
            v39[6] = 0;
            v39[4] = v15;
            v39[5] = (uint64_t *)(v39 + 6);
            _DWORD *v39 = 0;
            v39[1] = 0;
            v39[2] = v41;
            *unsigned int v38 = (uint64_t *)v39;
            unint64_t v42 = (uint64_t *)v39;
            if (*v230)
            {
              unint64_t v230 = (uint64_t **)*v230;
              unint64_t v42 = *v38;
            }
            sub_1CB8358B8(v231, v42);
            ++v232;
          }
          uint64_t v44 = v250;
          uint8x8_t v43 = v251;
          if (v250 != v251)
          {
            uint64_t v45 = v39 + 5;
            unint64_t v46 = v39 + 6;
            do
            {
              sub_1CC33D514(v45, v46, v44, (uint64_t *)v44);
              ++v44;
            }
            while (v44 != v43);
            uint64_t v44 = v250;
            uint64_t v16 = v221;
          }
          if (v44)
          {
            unint64_t v251 = v44;
            operator delete(v44);
          }
          MEMORY[0x1D25D9CD0](v247, 8);
        }
      }
      uint64_t v15 = (uint64_t *)v15[1];
    }
    while (v15 != v14);
    uint64_t v47 = (uint64_t *)v230;
    if (v230 != &v231)
    {
      do
      {
        unsigned int v247 = (uint64_t *)v47[4];
        sub_1CC33D47C((uint64_t)&v248, v47 + 5);
        float v48 = v248;
        if (v248 != &v249)
        {
          do
          {
            v240[0] = v48[4];
            v243.n128_u64[0] = (unint64_t)v240;
            BOOL v49 = sub_1CD52CA74((uint64_t **)v221 + 40, (unint64_t *)v240, (uint64_t)&std::piecewise_construct, (uint64_t ***)&v243);
            sub_1CD3CFB98(v49 + 5, (unint64_t *)&v247, &v247);
            unint64_t v50 = v48[1];
            if (v50)
            {
              do
              {
                unint64_t v51 = (void **)v50;
                unint64_t v50 = (void *)*v50;
              }
              while (v50);
            }
            else
            {
              do
              {
                unint64_t v51 = (void **)v48[2];
                BOOL v52 = *v51 == v48;
                float v48 = v51;
              }
              while (!v52);
            }
            float v48 = v51;
          }
          while (v51 != &v249);
        }
        sub_1CB833A08((uint64_t)&v248, v249);
        unsigned int v53 = (uint64_t *)v47[1];
        if (v53)
        {
          do
          {
            uint64_t v54 = (uint64_t **)v53;
            unsigned int v53 = (uint64_t *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            uint64_t v54 = (uint64_t **)v47[2];
            BOOL v52 = *v54 == v47;
            uint64_t v47 = (uint64_t *)v54;
          }
          while (!v52);
        }
        uint64_t v47 = (uint64_t *)v54;
      }
      while (v54 != &v231);
    }
  }
  unint64_t v199 = v14;
  llvm::rdf::Liveness::computePhiInfo(v221);
  uint64_t v55 = llvm::rdf::CodeNode::members(*(void *)(*(void *)v221 + 256), *(const llvm::rdf::DataFlowGraph **)v221, (uint64_t)&v247);
  if (v248)
  {
    unint64_t v56 = v247;
    uint64_t v217 = &v247[2 * v248];
    do
    {
      uint64_t v57 = *v56;
      v237[0] = *(void **)(*v56 + 8);
      unint64_t v58 = sub_1CC407970((uint64_t **)v221 + 43, (unint64_t)v237[0], v237);
      uint64_t v55 = sub_1CC3F9160(v57, (uint64_t (*)(uint64_t, void))sub_1CC3FCF24, *(void *)v221, (uint64_t)&v243);
      uint8x8_t v59 = (uint64_t *)v243.n128_u64[0];
      if (v243.n128_u32[2])
      {
        uint64_t v60 = (uint64_t)(v58 + 40);
        uint64_t v61 = (uint64_t *)(v243.n128_u64[0] + 16 * v243.n128_u32[2]);
        do
        {
          *(_OWORD *)uint8x8_t v240 = *(_OWORD *)v59;
          sub_1CC406714((uint64_t)v221 + 296, (int *)&v240[1]);
          for (unsigned int i = *(uint64_t **)(v55 + 24); i; unsigned int i = (uint64_t *)*i)
          {
            uint64_t v55 = (uint64_t)sub_1CC406A5C(v60, *((_DWORD *)i + 4), (_DWORD *)i + 4);
            unint64_t v63 = (uint64_t *)i[5];
            if (v63)
            {
              uint64_t v64 = v55 + 24;
              do
              {
                sub_1CC407A50(v64, v63[2], v63[3], (_OWORD *)v63 + 1);
                unint64_t v63 = (uint64_t *)*v63;
              }
              while (v63);
            }
          }
          v59 += 2;
        }
        while (v59 != v61);
        uint8x8_t v59 = (uint64_t *)v243.n128_u64[0];
      }
      if (v59 != &v244) {
        free(v59);
      }
      v56 += 2;
    }
    while (v56 != v217);
  }
  uint64_t v65 = (uint64_t)v221;
  if (*((unsigned char *)v221 + 264))
  {
    uint64_t v55 = (uint64_t)llvm::dbgs((llvm *)v55);
    int v66 = *(void **)(v55 + 32);
    if (*(void *)(v55 + 24) - (void)v66 > 0x16uLL)
    {
      qmemcpy(v66, "Phi live-on-entry map:\n", 23);
      *(void *)(v55 + 32) += 23;
    }
    else
    {
      uint64_t v55 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v55, "Phi live-on-entry map:\n", 0x17uLL);
    }
    uint64_t v67 = (void *)*((void *)v221 + 43);
    if (v67 != (void *)((char *)v221 + 352))
    {
      do
      {
        int v123 = llvm::dbgs((llvm *)v55);
        unint64_t v124 = v123;
        unsigned int v125 = (_DWORD *)*((void *)v123 + 4);
        if (*((void *)v123 + 3) - (void)v125 > 6uLL)
        {
          *(_DWORD *)((char *)v125 + 3) = 589327203;
          _DWORD *v125 = 1668246626;
          *((void *)v123 + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(v123, "block #", 7uLL);
        }
        unint64_t v126 = *(int *)(v67[4] + 24);
        if ((v126 & 0x80000000) != 0)
        {
          unint64_t v126 = -(uint64_t)v126;
          int v127 = v124;
          int v128 = 1;
        }
        else
        {
          int v127 = v124;
          int v128 = 0;
        }
        sub_1CD098D14(v127, v126, 0, 0, v128);
        uint64_t v129 = (_DWORD *)*((void *)v124 + 4);
        if (*((void *)v124 + 3) - (void)v129 > 3uLL)
        {
          *uint64_t v129 = 540945696;
          *((void *)v124 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v124, " -> ", 4uLL);
        }
        int v130 = *(const llvm::rdf::DataFlowGraph **)v221;
        v243.n128_u64[0] = (unint64_t)(v67 + 5);
        v243.n128_u64[1] = (unint64_t)v130;
        uint64_t v55 = (uint64_t)llvm::rdf::operator<<(v124, &v243);
        uint64_t v131 = (unsigned char *)*((void *)v124 + 4);
        if ((unint64_t)v131 >= *((void *)v124 + 3))
        {
          uint64_t v55 = (uint64_t)llvm::raw_ostream::write(v124, 10);
        }
        else
        {
          *((void *)v124 + 4) = v131 + 1;
          *uint64_t v131 = 10;
        }
        unsigned int v132 = (void *)v67[1];
        uint64_t v65 = (uint64_t)v221;
        if (v132)
        {
          do
          {
            BOOL v133 = v132;
            unsigned int v132 = (void *)*v132;
          }
          while (v132);
        }
        else
        {
          do
          {
            BOOL v133 = (void *)v67[2];
            BOOL v52 = *v133 == (void)v67;
            uint64_t v67 = v133;
          }
          while (!v52);
        }
        uint64_t v67 = v133;
      }
      while (v133 != (void *)((char *)v221 + 352));
    }
  }
  if (v248)
  {
    unsigned int v68 = v247;
    uint64_t v202 = v65 + 296;
    uint64_t v209 = v65 + 184;
    uint64_t v200 = &v247[2 * v248];
    uint64_t v206 = (char *)(v65 + 376);
    do
    {
      uint64_t v201 = v68;
      sub_1CC3F9160(*v68, (uint64_t (*)(uint64_t, void))sub_1CC3FCF24, *(void *)v65, (uint64_t)&v243);
      uint64_t v55 = v243.n128_u64[0];
      unint64_t v203 = v243.n128_u64[0] + 16 * v243.n128_u32[2];
      if (v243.n128_u32[2])
      {
        do
        {
          uint64_t v69 = *(void *)v55;
          *(void *)unint64_t v228 = *(void *)v55;
          uint64_t v205 = v55;
          int v218 = *(_DWORD *)(v55 + 8);
          int v229 = v218;
          sub_1CC406714(v202, &v229);
          if (*(void *)(v70 + 32))
          {
            uint64_t v71 = v70;
            uint64_t v226 = 0;
            uint64_t v227 = 0;
            uint64_t v225 = &v226;
            sub_1CC3F9160(v69, (uint64_t (*)(uint64_t, void))sub_1CC3FD580, *(void *)v65, (uint64_t)v240);
            uint64_t v72 = (char *)v240[0];
            if (LODWORD(v240[1]))
            {
              int v73 = (char *)v240[0] + 16 * LODWORD(v240[1]);
              uint64_t v207 = v73;
              uint64_t v204 = v71;
              do
              {
                unsigned int v74 = *(llvm::rdf::RefNode **)v72;
                unsigned int v75 = *((_DWORD *)v72 + 2);
                unint64_t v76 = &v226;
                unsigned int v77 = &v226;
                uint64_t v78 = v226;
                if (v226)
                {
                  do
                  {
                    while (1)
                    {
                      unsigned int v77 = (uint64_t **)v78;
                      unsigned int v79 = *((_DWORD *)v78 + 7);
                      if (v75 >= v79) {
                        break;
                      }
                      uint64_t v78 = *v77;
                      unint64_t v76 = v77;
                      if (!*v77) {
                        goto LABEL_108;
                      }
                    }
                    if (v79 >= v75) {
                      goto LABEL_158;
                    }
                    uint64_t v78 = v77[1];
                  }
                  while (v78);
                  unint64_t v76 = v77 + 1;
                }
LABEL_108:
                unsigned int v80 = operator new(0x20uLL);
                unsigned int v214 = v75;
                v80[7] = v75;
                *(void *)unsigned int v80 = 0;
                *((void *)v80 + 1) = 0;
                *((void *)v80 + 2) = v77;
                void *v76 = (uint64_t *)v80;
                if (*v225)
                {
                  uint64_t v225 = (uint64_t **)*v225;
                  unsigned int v80 = *v76;
                }
                sub_1CB8358B8(v226, (uint64_t *)v80);
                ++v227;
                if (*((_DWORD *)v74 + 2))
                {
                  uint64_t v81 = v65;
                  unint64_t v82 = *(void *)(*(void *)(*(void *)(*(void *)v65 + 296)
                                              + 8
                                              * ((*((_DWORD *)v74 + 4) - 1) >> *(_DWORD *)(*(void *)v65 + 276)))
                                  + 32
                                  * (*(_DWORD *)(*(void *)v65 + 280) & (*((_DWORD *)v74 + 4) - 1))
                                  + 8);
                  uint64_t v83 = *(char **)(v81 + 376);
                  int v84 = v206;
LABEL_112:
                  uint64_t v85 = (uint64_t **)v84;
                  if (v83)
                  {
                    while (1)
                    {
                      int v84 = v83;
                      unint64_t v86 = *((void *)v83 + 4);
                      if (v86 > v82)
                      {
                        uint64_t v83 = *(char **)v84;
                        goto LABEL_112;
                      }
                      if (v86 >= v82) {
                        break;
                      }
                      uint64_t v83 = (char *)*((void *)v84 + 1);
                      if (!v83)
                      {
                        uint64_t v85 = (uint64_t **)(v84 + 8);
                        goto LABEL_119;
                      }
                    }
                    uint64_t v87 = (uint64_t)v221;
                  }
                  else
                  {
LABEL_119:
                    unint64_t v88 = v84;
                    int v84 = (char *)operator new(0x50uLL);
                    *((void *)v84 + 4) = v82;
                    *(_OWORD *)(v84 + 40) = 0u;
                    *(_OWORD *)(v84 + 56) = 0u;
                    *((_DWORD *)v84 + 18) = 1065353216;
                    *(void *)int v84 = 0;
                    *((void *)v84 + 1) = 0;
                    *((void *)v84 + 2) = v88;
                    *uint64_t v85 = (uint64_t *)v84;
                    uint64_t v87 = (uint64_t)v221;
                    uint64_t v89 = **((void **)v221 + 46);
                    unint64_t v90 = (uint64_t *)v84;
                    if (v89)
                    {
                      *((void *)v221 + 46) = v89;
                      unint64_t v90 = *v85;
                    }
                    sub_1CB8358B8(*((uint64_t **)v221 + 47), v90);
                    ++*((void *)v221 + 48);
                  }
                  unsigned int v91 = *(uint64_t **)(v71 + 24);
                  if (v91)
                  {
                    uint64_t v208 = v72;
                    uint64_t v92 = (uint64_t)(v84 + 40);
                    unint64_t v210 = v74;
                    do
                    {
                      uint64_t v93 = (void *)v91[5];
                      if (v93)
                      {
                        unint64_t v219 = v91;
                        do
                        {
                          uint64_t v94 = v93[3];
                          v223[0] = *((_DWORD *)v91 + 4);
                          if (v223[0]) {
                            uint64_t v95 = v94;
                          }
                          else {
                            uint64_t v95 = 0;
                          }
                          uint64_t v224 = v95;
                          llvm::rdf::Liveness::getAllReachingDefs(v74, v87, v223[0], v95, v214, 1, 0, v209, (unsigned int *)v237);
                          unsigned int v96 = (char *)v237[0];
                          uint64_t v97 = (char *)v237[0] + 16 * LODWORD(v237[1]);
                          if (LODWORD(v237[1]))
                          {
                            do
                            {
                              unsigned int v98 = *(llvm::rdf::RefNode **)v96;
                              unsigned int v99 = *((_DWORD *)v96 + 2);
                              uint64_t v100 = *(void *)(v87 + 16);
                              int v101 = *(_DWORD *)(*(void *)v100 + 44);
                              unint64_t v233 = v235;
                              HIDWORD(v234) = 6;
                              if ((v101 + 63) >= 0x1C0)
                              {
                                LODWORD(v234) = 0;
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              if ((v101 + 63) >= 0x40) {
                                bzero(v235, 8 * ((v101 + 63) >> 6));
                              }
                              LODWORD(v234) = (v101 + 63) >> 6;
                              v235[12] = v101;
                              uint64_t v236 = v100;
                              uint64_t v87 = (uint64_t)v221;
                              int RegRef = llvm::rdf::RefNode::getRegRef(v98, *(const llvm::rdf::DataFlowGraph **)v221);
                              uint64_t v104 = llvm::rdf::RegisterAggr::insert((uint64_t)&v233, RegRef, v103);
                              unsigned int v105 = v223[0];
                              llvm::rdf::RegisterAggr::intersect(v104, v223[0], v224);
                              llvm::rdf::RegisterAggr::makeRegRef((llvm::rdf::RegisterAggr *)&v233);
                              unint64_t v107 = v106;
                              uint64_t v108 = sub_1CC406A5C(v92, v105, v223);
                              LODWORD(v222) = v99;
                              *((void *)&v222 + 1) = v107;
                              sub_1CC406E6C((uint64_t)(v108 + 24), v99, v107, &v222);
                              if (v233 != v235) {
                                free(v233);
                              }
                              v96 += 16;
                            }
                            while (v96 != v97);
                            unsigned int v96 = (char *)v237[0];
                          }
                          if (v96 != (char *)&v238) {
                            free(v96);
                          }
                          uint64_t v93 = (void *)*v93;
                          unsigned int v74 = v210;
                          unsigned int v91 = v219;
                        }
                        while (v93);
                      }
                      unsigned int v91 = (uint64_t *)*v91;
                    }
                    while (v91);
                    int v218 = v229;
                    uint64_t v71 = v204;
                    uint64_t v72 = v208;
                  }
                  llvm::rdf::DataFlowGraph::getRelatedRefs(*(llvm::rdf::DataFlowGraph **)v87, v74, *(_WORD **)v228, v218, v214, (uint64_t)v237);
                  unint64_t v109 = (char *)v237[0];
                  unint64_t v110 = (char *)v237[0] + 16 * LODWORD(v237[1]);
                  if (LODWORD(v237[1]))
                  {
                    do
                    {
                      unsigned int v111 = *((_DWORD *)v109 + 2);
                      uint64_t v112 = v226;
                      uint64_t v113 = &v226;
                      int v114 = &v226;
                      if (v226)
                      {
                        do
                        {
                          while (1)
                          {
                            int v114 = (uint64_t **)v112;
                            unsigned int v115 = *((_DWORD *)v112 + 7);
                            if (v111 >= v115) {
                              break;
                            }
                            uint64_t v112 = *v114;
                            uint64_t v113 = v114;
                            if (!*v114) {
                              goto LABEL_150;
                            }
                          }
                          if (v115 >= v111) {
                            goto LABEL_153;
                          }
                          uint64_t v112 = v114[1];
                        }
                        while (v112);
                        uint64_t v113 = v114 + 1;
                      }
LABEL_150:
                      uint64_t v116 = operator new(0x20uLL);
                      v116[7] = v111;
                      *(void *)uint64_t v116 = 0;
                      *((void *)v116 + 1) = 0;
                      *((void *)v116 + 2) = v114;
                      *uint64_t v113 = (uint64_t *)v116;
                      if (*v225)
                      {
                        uint64_t v225 = (uint64_t **)*v225;
                        uint64_t v116 = *v113;
                      }
                      sub_1CB8358B8(v226, (uint64_t *)v116);
                      ++v227;
LABEL_153:
                      v109 += 16;
                    }
                    while (v109 != v110);
                    unint64_t v109 = (char *)v237[0];
                  }
                  if (v109 != (char *)&v238) {
                    free(v109);
                  }
                  uint64_t v65 = (uint64_t)v221;
                  int v73 = v207;
                }
LABEL_158:
                v72 += 16;
              }
              while (v72 != v73);
              uint64_t v72 = (char *)v240[0];
            }
            if (v72 != v241) {
              free(v72);
            }
            sub_1CB833A08((uint64_t)&v225, v226);
          }
          uint64_t v55 = v205 + 16;
        }
        while (v205 + 16 != v203);
        uint64_t v55 = v243.n128_u64[0];
      }
      if ((uint64_t *)v55 != &v244) {
        free((void *)v55);
      }
      unsigned int v68 = v201 + 2;
    }
    while (v201 + 2 != v200);
  }
  if (*(unsigned char *)(v65 + 264))
  {
    uint64_t v117 = llvm::dbgs((llvm *)v55);
    unint64_t v118 = (void *)*((void *)v117 + 4);
    if (*((void *)v117 + 3) - (void)v118 > 0x15uLL)
    {
      qmemcpy(v118, "Phi live-on-exit map:\n", 22);
      *((void *)v117 + 4) += 22;
    }
    else
    {
      uint64_t v117 = llvm::raw_ostream::write(v117, "Phi live-on-exit map:\n", 0x16uLL);
    }
    int v119 = *(void **)(v65 + 368);
    uint64_t v120 = (void *)(v65 + 376);
    if (v119 != (void *)(v65 + 376))
    {
      do
      {
        uint64_t v134 = llvm::dbgs(v117);
        uint64_t v135 = v134;
        __int16 v136 = (_DWORD *)*((void *)v134 + 4);
        if (*((void *)v134 + 3) - (void)v136 > 6uLL)
        {
          *(_DWORD *)((char *)v136 + 3) = 589327203;
          *__int16 v136 = 1668246626;
          *((void *)v134 + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(v134, "block #", 7uLL);
        }
        unint64_t v137 = *(int *)(v119[4] + 24);
        if ((v137 & 0x80000000) != 0)
        {
          unint64_t v137 = -(uint64_t)v137;
          uint64_t v138 = v135;
          int v139 = 1;
        }
        else
        {
          uint64_t v138 = v135;
          int v139 = 0;
        }
        sub_1CD098D14(v138, v137, 0, 0, v139);
        int v140 = (_DWORD *)*((void *)v135 + 4);
        if (*((void *)v135 + 3) - (void)v140 > 3uLL)
        {
          *int v140 = 540945696;
          *((void *)v135 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v135, " -> ", 4uLL);
        }
        uint64_t v141 = *(const llvm::rdf::DataFlowGraph **)v221;
        v243.n128_u64[0] = (unint64_t)(v119 + 5);
        v243.n128_u64[1] = (unint64_t)v141;
        uint64_t v117 = llvm::rdf::operator<<(v135, &v243);
        int v142 = (unsigned char *)*((void *)v135 + 4);
        if ((unint64_t)v142 >= *((void *)v135 + 3))
        {
          uint64_t v117 = llvm::raw_ostream::write(v135, 10);
        }
        else
        {
          *((void *)v135 + 4) = v142 + 1;
          unsigned char *v142 = 10;
        }
        uint64_t v143 = (void *)v119[1];
        uint64_t v65 = (uint64_t)v221;
        if (v143)
        {
          do
          {
            int v144 = v143;
            uint64_t v143 = (void *)*v143;
          }
          while (v143);
        }
        else
        {
          do
          {
            int v144 = (void *)v119[2];
            BOOL v52 = *v144 == (void)v119;
            int v119 = v144;
          }
          while (!v52);
        }
        int v119 = v144;
      }
      while (v144 != v120);
    }
  }
  *(_OWORD *)unint64_t v237 = 0u;
  long long v238 = 0u;
  int v239 = 1065353216;
  llvm::rdf::Liveness::traverse(v65, *(llvm::MachineBasicBlock **)(v198 + 328), (uint64_t)v237);
  unint64_t v213 = (uint64_t **)(v65 + 120);
  uint64_t v215 = v65 + 40;
  unint64_t v121 = sub_1CC404120((uint64_t **)(v65 + 120), *(void *)(v198 + 328), *(void *)(v198 + 328), v65 + 40);
  llvm::rdf::RegisterAggr::insert((uint64_t)(v121 + 5), *(void *)v65 + 176);
  if (*(unsigned char *)(v65 + 264))
  {
    unint64_t v122 = *(void *)(v198 + 328);
    if ((uint64_t *)v122 != v199)
    {
      uint64_t v211 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
      while (1)
      {
        uint64_t v146 = *(unsigned __int16 **)(v122 + 152);
        uint64_t v145 = *(unsigned __int16 **)(v122 + 160);
        unint64_t v220 = v122;
        if (v145 == v146)
        {
          BOOL v147 = 0;
          unsigned int v148 = 0;
          char v149 = 0;
        }
        else
        {
          char v149 = 0;
          unint64_t v150 = 0;
          BOOL v147 = 0;
          do
          {
            unsigned __int32 v151 = *v146;
            if (*v146) {
              unint64_t v152 = *((void *)v146 + 1);
            }
            else {
              unint64_t v152 = 0;
            }
            if (v150 >= v149)
            {
              uint64_t v153 = v150 - v147;
              unint64_t v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 60) {
LABEL_311:
              }
                abort();
              if (((char *)v149 - (char *)v147) >> 3 > v154) {
                unint64_t v154 = ((char *)v149 - (char *)v147) >> 3;
              }
              if ((unint64_t)((char *)v149 - (char *)v147) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v155 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v154;
              }
              if (v155)
              {
                if (v155 >> 60) {
LABEL_312:
                }
                  sub_1CB833614();
                uint64_t v156 = (char *)operator new(16 * v155);
              }
              else
              {
                uint64_t v156 = 0;
              }
              __int16 v157 = (__n128 *)&v156[16 * v153];
              v157->n128_u32[0] = v151;
              v157->n128_u64[1] = v152;
              if (v150 == v147)
              {
                BOOL v147 = (__n128 *)&v156[16 * v153];
              }
              else
              {
                int v158 = (__n128 *)&v156[16 * v153];
                do
                {
                  v158[-1] = v150[-1];
                  --v158;
                  --v150;
                }
                while (v150 != v147);
                unint64_t v150 = v147;
                BOOL v147 = v158;
              }
              char v149 = (__n128 *)&v156[16 * v155];
              unsigned int v148 = v157 + 1;
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              v150->n128_u32[0] = v151;
              v150->n128_u64[1] = v152;
              unsigned int v148 = v150 + 1;
            }
            v146 += 8;
            unint64_t v150 = v148;
          }
          while (v146 != v145);
        }
        unint64_t v159 = 126 - 2 * __clz(v148 - v147);
        uint64_t v160 = v148 == v147 ? 0 : v159;
        sub_1CC3FA914(v147, v148, (uint64_t)&v243, v160, 1);
        uint64_t v162 = llvm::dbgs(v161);
        int v245 = (llvm *)&v243;
        v243.n128_u64[0] = (unint64_t)&unk_1F260D508;
        v243.n128_u64[1] = v220;
        v211((uint64_t)&v243, v162);
        uint64_t v163 = *((void *)v162 + 4);
        if ((unint64_t)(*((void *)v162 + 3) - v163) > 8)
        {
          *(unsigned char *)(v163 + 8) = 123;
          *(void *)uint64_t v163 = *(void *)"\t rec = {";
          *((void *)v162 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v162, "\t rec = {", 9uLL);
        }
        uint64_t v164 = (void **)v221;
        uint64_t v165 = v245;
        if (v245 == (llvm *)&v243)
        {
          uint64_t v165 = (llvm *)(*(uint64_t (**)(__n128 *))(v243.n128_u64[0] + 32))(&v243);
        }
        else if (v245)
        {
          uint64_t v165 = (llvm *)(*(uint64_t (**)(void))(*(void *)v245 + 40))();
        }
        for (uint64_t j = v147; j != v148; ++j)
        {
          __n128 v243 = *j;
          unint64_t v167 = llvm::dbgs(v165);
          int v168 = (unsigned char *)*((void *)v167 + 4);
          if ((unint64_t)v168 >= *((void *)v167 + 3))
          {
            unint64_t v167 = llvm::raw_ostream::write(v167, 32);
          }
          else
          {
            *((void *)v167 + 4) = v168 + 1;
            unsigned char *v168 = 32;
          }
          unsigned int v169 = *(const llvm::rdf::DataFlowGraph **)v221;
          v240[0] = &v243;
          v240[1] = v169;
          uint64_t v165 = llvm::rdf::operator<<(v167, (unsigned int **)v240);
        }
        uint64_t v170 = llvm::dbgs(v165);
        uint64_t v171 = *((void *)v170 + 4);
        if ((unint64_t)(*((void *)v170 + 3) - v171) > 2)
        {
          *(unsigned char *)(v171 + 2) = 10;
          *(_WORD *)uint64_t v171 = 32032;
          *((void *)v170 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v170, " }\n", 3uLL);
        }
        unint64_t v172 = sub_1CC404120(v213, v220, v220, v215) + 5;
        llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t ***)&v243, (uint64_t)v172, 0);
        llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t ***)v240, (uint64_t)v172, 1);
        if (v246 == v242)
        {
          unint64_t v173 = v147;
        }
        else
        {
          uint64_t v174 = v245;
          unint64_t v173 = v147;
          do
          {
            unint64_t v175 = *((unsigned int *)v174 + 8);
            unint64_t v176 = *((void *)v174 + 5);
            if (v175) {
              unint64_t v177 = v176;
            }
            else {
              unint64_t v177 = 0;
            }
            if (v147 >= v149)
            {
              uint64_t v178 = v147 - v173;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 60) {
                goto LABEL_311;
              }
              if (((char *)v149 - (char *)v173) >> 3 > v179) {
                unint64_t v179 = ((char *)v149 - (char *)v173) >> 3;
              }
              if ((unint64_t)((char *)v149 - (char *)v173) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v180 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                if (v180 >> 60) {
                  goto LABEL_312;
                }
                uint64_t v181 = (char *)operator new(16 * v180);
              }
              else
              {
                uint64_t v181 = 0;
              }
              unint64_t v182 = (__n128 *)&v181[16 * v178];
              v182->n128_u64[0] = v175;
              v182->n128_u64[1] = v177;
              if (v147 == v173)
              {
                uint64_t v184 = v147;
                unint64_t v173 = (__n128 *)&v181[16 * v178];
                uint64_t v164 = (void **)v221;
              }
              else
              {
                unint64_t v183 = (__n128 *)&v181[16 * v178];
                uint64_t v164 = (void **)v221;
                do
                {
                  v183[-1] = v147[-1];
                  --v183;
                  --v147;
                }
                while (v147 != v173);
                uint64_t v184 = v173;
                unint64_t v173 = v183;
              }
              char v149 = (__n128 *)&v181[16 * v180];
              BOOL v147 = v182 + 1;
              if (v184) {
                operator delete(v184);
              }
            }
            else
            {
              v147->n128_u64[0] = v175;
              v147->n128_u64[1] = v177;
              ++v147;
              uint64_t v164 = (void **)v221;
            }
            unint64_t v185 = v245;
            uint64_t v186 = (llvm *)*((void *)v245 + 1);
            if (v186)
            {
              do
              {
                uint64_t v174 = v186;
                uint64_t v186 = *(llvm **)v186;
              }
              while (v186);
            }
            else
            {
              do
              {
                uint64_t v174 = (llvm *)*((void *)v185 + 2);
                BOOL v52 = *(void *)v174 == (void)v185;
                unint64_t v185 = v174;
              }
              while (!v52);
            }
            int v245 = v174;
            ++v246;
          }
          while (v246 != v242);
        }
        sub_1CC1B4328((uint64_t)v240, (void *)v240[1]);
        sub_1CC1B4328((uint64_t)&v243, (void *)v243.n128_u64[1]);
        unint64_t v187 = 126 - 2 * __clz(v147 - v173);
        if (v147 == v173) {
          uint64_t v188 = 0;
        }
        else {
          uint64_t v188 = v187;
        }
        sub_1CC3FA914(v173, v147, (uint64_t)&v243, v188, 1);
        unint64_t v190 = llvm::dbgs(v189);
        uint64_t v191 = *((void *)v190 + 4);
        if ((unint64_t)(*((void *)v190 + 3) - v191) > 8)
        {
          *(unsigned char *)(v191 + 8) = 123;
          *(void *)uint64_t v191 = *(void *)"\tcomp = {";
          *((void *)v190 + 4) += 9;
        }
        else
        {
          unint64_t v190 = llvm::raw_ostream::write(v190, "\tcomp = {", 9uLL);
        }
        for (unsigned int k = v173; k != v147; ++k)
        {
          __n128 v243 = *k;
          unint64_t v193 = llvm::dbgs(v190);
          uint64_t v194 = (unsigned char *)*((void *)v193 + 4);
          if ((unint64_t)v194 >= *((void *)v193 + 3))
          {
            unint64_t v193 = llvm::raw_ostream::write(v193, 32);
          }
          else
          {
            *((void *)v193 + 4) = v194 + 1;
            *uint64_t v194 = 32;
          }
          uint64_t v195 = *v164;
          v240[0] = &v243;
          v240[1] = v195;
          unint64_t v190 = llvm::rdf::operator<<(v193, (unsigned int **)v240);
        }
        uint64_t v196 = llvm::dbgs(v190);
        uint64_t v197 = *((void *)v196 + 4);
        if ((unint64_t)(*((void *)v196 + 3) - v197) > 2) {
          break;
        }
        llvm::raw_ostream::write(v196, " }\n", 3uLL);
        if (v173) {
          goto LABEL_301;
        }
LABEL_302:
        unint64_t v122 = *(void *)(v220 + 8);
        if ((uint64_t *)v122 == v199) {
          goto LABEL_174;
        }
      }
      *(unsigned char *)(v197 + 2) = 10;
      *(_WORD *)uint64_t v197 = 32032;
      *((void *)v196 + 4) += 3;
      if (!v173) {
        goto LABEL_302;
      }
LABEL_301:
      operator delete(v173);
      goto LABEL_302;
    }
  }
LABEL_174:
  sub_1CC404274((uint64_t)v237);
  if (v247 != (uint64_t *)&v249) {
    free(v247);
  }
  sub_1CD486DF0((uint64_t)&v230, v231);
}

uint64_t llvm::rdf::Liveness::traverse(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  unint64_t v185 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = (llvm *)llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v6);
  uint64_t v8 = *(void *)(v6 + 1320);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(unsigned int *)(v8 + 40);
  if (v10)
  {
    LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v12 = (llvm::MachineBasicBlock **)(v9 + 16 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_8;
    }
    int v14 = 1;
    while (v13 != (llvm::MachineBasicBlock *)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(llvm::MachineBasicBlock **)(v9 + 16 * v11);
      if (v13 == a2)
      {
        unsigned int v12 = (llvm::MachineBasicBlock **)(v9 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  unsigned int v12 = (llvm::MachineBasicBlock **)(v9 + 16 * v10);
LABEL_8:
  uint64_t v180 = a3;
  if (v12 == (llvm::MachineBasicBlock **)(v9 + 16 * v10)) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v12[1];
  }
  uint64_t v17 = *((unsigned int *)v16 + 8);
  if (v17)
  {
    int v18 = (void *)*((void *)v16 + 3);
    uint64_t v19 = &v18[v17];
    do
    {
      uint64_t v20 = (void *)*v18;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      int v191 = 1065353216;
      llvm::rdf::Liveness::traverse(a1, *v20, v189);
      for (unsigned int i = (uint64_t *)v190; i; unsigned int i = (uint64_t *)*i)
      {
        LODWORD(v192) = *((_DWORD *)i + 4);
        sub_1CC40707C((uint64_t)&v193, (uint64_t)(i + 3));
        BOOL v22 = sub_1CC406A5C(v180, v192, &v192);
        unsigned int v23 = v195;
        if (v195)
        {
          uint64_t v24 = (uint64_t)(v22 + 24);
          do
          {
            sub_1CC407A50(v24, v23[2], (unint64_t)v23[3], (_OWORD *)v23 + 1);
            unsigned int v23 = (uint64_t ***)*v23;
          }
          while (v23);
          unint64_t v25 = v195;
          if (v195)
          {
            do
            {
              uint64_t v26 = *v25;
              operator delete(v25);
              unint64_t v25 = (uint64_t ***)v26;
            }
            while (v26);
          }
        }
        uint64_t v27 = v193;
        unint64_t v193 = 0;
        if (v27) {
          operator delete(v27);
        }
      }
      unint64_t v7 = (llvm *)sub_1CC404274((uint64_t)v189);
      ++v18;
    }
    while (v18 != v19);
  }
  if (*(unsigned char *)(a1 + 264))
  {
    unsigned int v28 = llvm::dbgs(v7);
    uint64_t v29 = v28;
    uint64_t v30 = (_DWORD *)*((void *)v28 + 4);
    if (*((void *)v28 + 3) - (void)v30 > 3uLL)
    {
      *uint64_t v30 = 539831562;
      *((void *)v28 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v28, "\n-- ", 4uLL);
    }
    uint64_t v195 = (uint64_t ***)&v192;
    uint64_t v192 = (llvm::MachineBasicBlock **)&unk_1F260D508;
    unint64_t v193 = a2;
    off_1F260D538((uint64_t)&v192, v29);
    unint64_t v31 = (_WORD *)*((void *)v29 + 4);
    if (*((void *)v29 + 3) - (void)v31 > 1uLL)
    {
      _WORD *v31 = 8250;
      unsigned int v32 = (void *)(*((void *)v29 + 4) + 2);
      *((void *)v29 + 4) = v32;
    }
    else
    {
      llvm::raw_ostream::write(v29, ": ", 2uLL);
      unsigned int v32 = (void *)*((void *)v29 + 4);
    }
    if (*((void *)v29 + 3) - (void)v32 > 7uLL)
    {
      void *v32 = 0x6573726576617274;
      uint64_t v33 = (void *)(*((void *)v29 + 4) + 8);
      *((void *)v29 + 4) = v33;
    }
    else
    {
      llvm::raw_ostream::write(v29, "traverse", 8uLL);
      uint64_t v33 = (void *)*((void *)v29 + 4);
    }
    if (*((void *)v29 + 3) - (void)v33 > 0x17uLL)
    {
      qmemcpy(v33, " after recursion into: {", 24);
      *((void *)v29 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v29, " after recursion into: {", 0x18uLL);
    }
    unint64_t v34 = (llvm *)v195;
    if (v195 == (uint64_t ***)&v192)
    {
      unint64_t v34 = (llvm *)((uint64_t (*)(llvm::MachineBasicBlock ***))v192[4])(&v192);
    }
    else if (v195)
    {
      unint64_t v34 = (llvm *)((uint64_t (*)(void))(*v195)[5])();
    }
    uint64_t v35 = *((unsigned int *)v16 + 8);
    if (v35)
    {
      uint8x8_t v43 = (uint64_t *)*((void *)v16 + 3);
      uint64_t v44 = 8 * v35;
      do
      {
        uint64_t v45 = *v43;
        unint64_t v46 = llvm::dbgs(v34);
        uint64_t v47 = (unsigned char *)*((void *)v46 + 4);
        if ((unint64_t)v47 >= *((void *)v46 + 3))
        {
          unint64_t v46 = llvm::raw_ostream::write(v46, 32);
        }
        else
        {
          *((void *)v46 + 4) = v47 + 1;
          *uint64_t v47 = 32;
        }
        unint64_t v48 = *(int *)(*(void *)v45 + 24);
        if ((v48 & 0x80000000) != 0)
        {
          unint64_t v48 = -(uint64_t)v48;
          int v49 = 1;
        }
        else
        {
          int v49 = 0;
        }
        unint64_t v34 = sub_1CD098D14(v46, v48, 0, 0, v49);
        ++v43;
        v44 -= 8;
      }
      while (v44);
    }
    BOOL v36 = llvm::dbgs(v34);
    uint64_t v37 = *((void *)v36 + 4);
    if ((unint64_t)(*((void *)v36 + 3) - v37) > 2)
    {
      *(unsigned char *)(v37 + 2) = 10;
      *(_WORD *)uint64_t v37 = 32032;
      *((void *)v36 + 4) += 3;
    }
    else
    {
      BOOL v36 = llvm::raw_ostream::write(v36, " }\n", 3uLL);
    }
    unsigned int v38 = llvm::dbgs(v36);
    uint64_t v39 = *((void *)v38 + 4);
    if ((unint64_t)(*((void *)v38 + 3) - v39) > 9)
    {
      *(_WORD *)(v39 + 8) = 8250;
      *(void *)uint64_t v39 = *(void *)"  LiveIn: ";
      *((void *)v38 + 4) += 10;
    }
    else
    {
      unsigned int v38 = llvm::raw_ostream::write(v38, "  LiveIn: ", 0xAuLL);
    }
    unint64_t v40 = *(const llvm::rdf::DataFlowGraph **)a1;
    uint64_t v192 = (llvm::MachineBasicBlock **)v180;
    unint64_t v193 = v40;
    unsigned int v41 = llvm::rdf::operator<<(v38, &v192);
    unint64_t v42 = (unsigned char *)*((void *)v41 + 4);
    if ((unint64_t)v42 >= *((void *)v41 + 3))
    {
      unsigned int v41 = llvm::raw_ostream::write(v41, 10);
    }
    else
    {
      *((void *)v41 + 4) = v42 + 1;
      *unint64_t v42 = 10;
    }
    unint64_t v50 = llvm::dbgs(v41);
    unint64_t v51 = v50;
    uint64_t v52 = *((void *)v50 + 4);
    if ((unint64_t)(*((void *)v50 + 3) - v52) > 9)
    {
      *(_WORD *)(v52 + 8) = 8224;
      *(void *)uint64_t v52 = *(void *)"  Local:  ";
      *((void *)v50 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v50, "  Local:  ", 0xAuLL);
    }
    unsigned int v53 = sub_1CC404120((uint64_t **)(a1 + 120), (unint64_t)a2, (uint64_t)a2, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::raw_ostream *)(v53 + 5), v51);
    uint64_t v54 = (unsigned char *)*((void *)v51 + 4);
    if ((unint64_t)v54 >= *((void *)v51 + 3))
    {
      llvm::raw_ostream::write(v51, 10);
    }
    else
    {
      *((void *)v51 + 4) = v54 + 1;
      *uint64_t v54 = 10;
    }
  }
  uint64_t v55 = sub_1CC407970((uint64_t **)(a1 + 368), (unint64_t)a2, &v185);
  unint64_t v56 = (uint64_t *)*((void *)v55 + 7);
  for (j = (llvm::MachineBasicBlock **)v180; v56; unint64_t v56 = (uint64_t *)*v56)
  {
    uint64_t v55 = sub_1CC406A5C(v180, *((_DWORD *)v56 + 4), (_DWORD *)v56 + 4);
    unint64_t v58 = (uint64_t *)v56[5];
    if (v58)
    {
      uint64_t v59 = (uint64_t)(v55 + 24);
      do
      {
        sub_1CC407A50(v59, v58[2], v58[3], (_OWORD *)v58 + 1);
        unint64_t v58 = (uint64_t *)*v58;
      }
      while (v58);
    }
  }
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v60 = llvm::dbgs((llvm *)v55);
    uint64_t v61 = *((void *)v60 + 4);
    if ((unint64_t)(*((void *)v60 + 3) - v61) > 9)
    {
      *(_WORD *)(v61 + 8) = 2648;
      *(void *)uint64_t v61 = *(void *)"after LOX\n";
      *((void *)v60 + 4) += 10;
    }
    else
    {
      uint64_t v60 = llvm::raw_ostream::write(v60, "after LOX\n", 0xAuLL);
    }
    unint64_t v62 = llvm::dbgs(v60);
    uint64_t v63 = *((void *)v62 + 4);
    if ((unint64_t)(*((void *)v62 + 3) - v63) > 9)
    {
      *(_WORD *)(v63 + 8) = 8250;
      *(void *)uint64_t v63 = *(void *)"  LiveIn: ";
      *((void *)v62 + 4) += 10;
    }
    else
    {
      unint64_t v62 = llvm::raw_ostream::write(v62, "  LiveIn: ", 0xAuLL);
    }
    uint64_t v64 = *(const llvm::rdf::DataFlowGraph **)a1;
    uint64_t v192 = (llvm::MachineBasicBlock **)v180;
    unint64_t v193 = v64;
    uint64_t v65 = llvm::rdf::operator<<(v62, &v192);
    int v66 = (unsigned char *)*((void *)v65 + 4);
    if ((unint64_t)v66 >= *((void *)v65 + 3))
    {
      uint64_t v65 = llvm::raw_ostream::write(v65, 10);
    }
    else
    {
      *((void *)v65 + 4) = v66 + 1;
      unsigned char *v66 = 10;
    }
    uint64_t v67 = llvm::dbgs(v65);
    unsigned int v68 = v67;
    uint64_t v69 = *((void *)v67 + 4);
    if ((unint64_t)(*((void *)v67 + 3) - v69) > 9)
    {
      *(_WORD *)(v69 + 8) = 8224;
      *(void *)uint64_t v69 = *(void *)"  Local:  ";
      *((void *)v67 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v67, "  Local:  ", 0xAuLL);
    }
    uint64_t v70 = sub_1CC404120((uint64_t **)(a1 + 120), (unint64_t)a2, (uint64_t)a2, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::raw_ostream *)(v70 + 5), v68);
    uint64_t v71 = (unsigned char *)*((void *)v68 + 4);
    if ((unint64_t)v71 >= *((void *)v68 + 3))
    {
      llvm::raw_ostream::write(v68, 10);
    }
    else
    {
      *((void *)v68 + 4) = v71 + 1;
      unsigned char *v71 = 10;
    }
  }
  uint64_t v72 = (llvm *)sub_1CC40731C((uint64_t)v183, v180);
  if (*(void *)(v180 + 24))
  {
    int v73 = *(void **)(v180 + 16);
    if (v73)
    {
      do
      {
        unsigned int v74 = (void *)*v73;
        sub_1CD4CAAF4((uint64_t)(v73 + 3));
        operator delete(v73);
        int v73 = v74;
      }
      while (v74);
    }
    *(void *)(v180 + 16) = 0;
    uint64_t v75 = *(void *)(v180 + 8);
    if (v75)
    {
      for (uint64_t k = 0; k != v75; ++k)
        *(void *)(*(void *)v180 + 8 * k) = 0;
    }
    *(void *)(v180 + 24) = 0;
  }
  uint64_t v77 = v184;
  if (v184)
  {
    while (1)
    {
      unsigned int v78 = *(_DWORD *)(v77 + 16);
      LODWORD(v186) = v78;
      uint64_t v79 = v78 ? -1 : 0;
      uint64_t v187 = v79;
      uint64_t v72 = (llvm *)sub_1CC406A5C((uint64_t)j, v78, &v186);
      unint64_t v177 = (uint64_t *)v77;
      unsigned int v80 = *(uint64_t **)(v77 + 40);
      if (v80) {
        break;
      }
LABEL_114:
      uint64_t v77 = *v177;
      uint64_t j = (llvm::MachineBasicBlock **)v180;
      if (!*v177) {
        goto LABEL_115;
      }
    }
    uint64_t v179 = (uint64_t)v72 + 24;
    int v81 = (int)v186;
    while (1)
    {
      long long v182 = *((_OWORD *)v80 + 1);
      unint64_t v82 = *(const llvm::rdf::DataFlowGraph **)a1;
      unsigned int v83 = v182;
      int v84 = v182
          ? (llvm::rdf::RefNode *)(*(void *)(*((void *)v82 + 37)
                                             + 8 * ((v182 - 1) >> *((_DWORD *)v82 + 69)))
                                 + 32 * (*((_DWORD *)v82 + 70) & (v182 - 1)))
          : 0;
      uint64_t Owner = (llvm::rdf::InstrNode *)llvm::rdf::RefNode::getOwner(v84, *(const llvm::rdf::DataFlowGraph **)a1);
      uint64_t v86 = llvm::rdf::InstrNode::getOwner(Owner, v82);
      uint64_t v87 = v185;
      if (v185 == *(llvm::MachineBasicBlock **)(v86 + 8)) {
        break;
      }
      sub_1CC407A50(v179, v182, *((unint64_t *)&v182 + 1), &v182);
LABEL_113:
      unsigned int v80 = (uint64_t *)*v80;
      if (!v80) {
        goto LABEL_114;
      }
    }
    uint64_t v88 = *(void *)(a1 + 16);
    int v89 = *(_DWORD *)(*(void *)v88 + 44);
    uint64_t v192 = (llvm::MachineBasicBlock **)&v194;
    HIDWORD(v193) = 6;
    if ((v89 + 63) >= 0x1C0)
    {
      LODWORD(v193) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v89 + 63) >= 0x40) {
      bzero(&v194, 8 * ((v89 + 63) >> 6));
    }
    LODWORD(v193) = (v89 + 63) >> 6;
    int v196 = v89;
    uint64_t v197 = v88;
    uint64_t v90 = *((void *)&v182 + 1);
    if ((*(_WORD *)v84 & 0x500) != 0x100)
    {
      int RegRef = llvm::rdf::RefNode::getRegRef(v84, v82);
      uint64_t v93 = llvm::rdf::RegisterAggr::insert((uint64_t)&v192, RegRef, v92);
      if (llvm::rdf::RegisterAggr::hasCoverOf(v93, v81, v90))
      {
LABEL_111:
        uint64_t v72 = (llvm *)v192;
        if (v192 != (llvm::MachineBasicBlock **)&v194) {
          free(v192);
        }
        goto LABEL_113;
      }
      unint64_t v82 = *(const llvm::rdf::DataFlowGraph **)a1;
    }
    int v94 = llvm::rdf::RefNode::getRegRef(v84, v82);
    llvm::rdf::Liveness::getAllReachingDefs(v84, a1, v94, v95, v83, 0, 0, a1 + 184, (unsigned int *)v189);
    if (LODWORD(v189[1]))
    {
      unsigned int v96 = (char *)v189[0];
      uint64_t v97 = (char *)v189[0] + 16 * LODWORD(v189[1]);
      while (1)
      {
        unsigned int v98 = *(llvm::rdf::RefNode **)v96;
        unsigned int v99 = *((_DWORD *)v96 + 2);
        uint64_t v100 = *(const llvm::rdf::DataFlowGraph **)a1;
        int v101 = (llvm::rdf::InstrNode *)llvm::rdf::RefNode::getOwner(*(llvm::rdf::RefNode **)v96, *(const llvm::rdf::DataFlowGraph **)a1);
        if (*(llvm::MachineBasicBlock **)(llvm::rdf::InstrNode::getOwner(v101, v100) + 8) != v87) {
          break;
        }
        if ((*(_WORD *)v98 & 0x100) == 0)
        {
          int v102 = llvm::rdf::RefNode::getRegRef(v98, v100);
          llvm::rdf::RegisterAggr::insert((uint64_t)&v192, v102, v103);
        }
        if ((llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)&v192, v81, v90) & 1) == 0)
        {
          v96 += 16;
          if (v96 != v97) {
            continue;
          }
        }
        goto LABEL_109;
      }
      llvm::rdf::RegisterAggr::clearIn((uint64_t)&v192, v81, v90);
      LODWORD(v181) = v99;
      *((void *)&v181 + 1) = v104;
      sub_1CC406E6C(v179, v99, v104, &v181);
    }
LABEL_109:
    if (v189[0] != &v190) {
      free(v189[0]);
    }
    goto LABEL_111;
  }
LABEL_115:
  unsigned int v105 = (uint64_t *)j[2];
  if (v105)
  {
    do
    {
      while (v105[6])
      {
        unsigned int v105 = (uint64_t *)*v105;
        if (!v105) {
          goto LABEL_120;
        }
      }
      uint64_t v72 = (llvm *)sub_1CC4070E0(j, v105);
      unsigned int v105 = (uint64_t *)v72;
    }
    while (v72);
  }
LABEL_120:
  if (*(unsigned char *)(a1 + 264))
  {
    unint64_t v107 = llvm::dbgs(v72);
    uint64_t v108 = *((void *)v107 + 4);
    if ((unint64_t)(*((void *)v107 + 3) - v108) > 0x13)
    {
      *(_DWORD *)(v108 + 16) = 174809967;
      *(_OWORD *)uint64_t v108 = *(_OWORD *)"after defs in block\n";
      *((void *)v107 + 4) += 20;
    }
    else
    {
      unint64_t v107 = llvm::raw_ostream::write(v107, "after defs in block\n", 0x14uLL);
    }
    unint64_t v109 = llvm::dbgs(v107);
    uint64_t v110 = *((void *)v109 + 4);
    if ((unint64_t)(*((void *)v109 + 3) - v110) > 9)
    {
      *(_WORD *)(v110 + 8) = 8250;
      *(void *)uint64_t v110 = *(void *)"  LiveIn: ";
      *((void *)v109 + 4) += 10;
    }
    else
    {
      unint64_t v109 = llvm::raw_ostream::write(v109, "  LiveIn: ", 0xAuLL);
    }
    unsigned int v111 = *(const llvm::rdf::DataFlowGraph **)a1;
    uint64_t v192 = j;
    unint64_t v193 = v111;
    uint64_t v112 = llvm::rdf::operator<<(v109, &v192);
    uint64_t v113 = (unsigned char *)*((void *)v112 + 4);
    if ((unint64_t)v113 >= *((void *)v112 + 3))
    {
      uint64_t v112 = llvm::raw_ostream::write(v112, 10);
    }
    else
    {
      *((void *)v112 + 4) = v113 + 1;
      *uint64_t v113 = 10;
    }
    int v114 = llvm::dbgs(v112);
    unsigned int v115 = v114;
    uint64_t v116 = *((void *)v114 + 4);
    if ((unint64_t)(*((void *)v114 + 3) - v116) > 9)
    {
      *(_WORD *)(v116 + 8) = 8224;
      *(void *)uint64_t v116 = *(void *)"  Local:  ";
      *((void *)v114 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v114, "  Local:  ", 0xAuLL);
    }
    unint64_t v106 = v185;
    uint64_t v117 = sub_1CC404120((uint64_t **)(a1 + 120), (unint64_t)v185, (uint64_t)v185, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::raw_ostream *)(v117 + 5), v115);
    unint64_t v118 = (unsigned char *)*((void *)v115 + 4);
    if ((unint64_t)v118 >= *((void *)v115 + 3))
    {
      llvm::raw_ostream::write(v115, 10);
    }
    else
    {
      *((void *)v115 + 4) = v118 + 1;
      unsigned char *v118 = 10;
    }
  }
  else
  {
    unint64_t v106 = v185;
  }
  Blocuint64_t k = llvm::rdf::FuncNode::findBlock(*(llvm::rdf::FuncNode **)(*(void *)a1 + 256), v106, *(const llvm::rdf::DataFlowGraph **)a1);
  uint64_t v120 = (uint64_t *)llvm::rdf::CodeNode::members(Block, *(const llvm::rdf::DataFlowGraph **)a1, (uint64_t)&v192);
  unint64_t v121 = (uint64_t **)v192;
  if (v193)
  {
    unint64_t v122 = (uint64_t **)&v192[2 * v193];
    uint64_t v178 = v122;
    do
    {
      uint64_t v120 = *v121;
      if ((*(_WORD *)*v121 & 0x1C) == 0x10)
      {
        uint64_t v120 = (uint64_t *)sub_1CC3F9160((uint64_t)v120, (uint64_t (*)(uint64_t, void))sub_1CC3F9998, *(void *)a1, (uint64_t)v189);
        int v123 = (char *)v189[0];
        unint64_t v124 = (char *)v189[0] + 16 * LODWORD(v189[1]);
        if (LODWORD(v189[1]))
        {
          do
          {
            unsigned int v125 = *(llvm::rdf::RefNode **)v123;
            if ((**(_WORD **)v123 & 0x400) == 0)
            {
              unsigned int v126 = *((_DWORD *)v123 + 2);
              uint64_t v127 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v123, *(const llvm::rdf::DataFlowGraph **)a1);
              unsigned int v128 = v127;
              unint64_t v130 = v129;
              *(void *)&long long v182 = v127;
              *((void *)&v182 + 1) = v129;
              int v131 = llvm::rdf::RefNode::getRegRef(v125, *(const llvm::rdf::DataFlowGraph **)a1);
              llvm::rdf::Liveness::getAllReachingDefs(v125, a1, v131, v132, v126, 0, 0, a1 + 184, (unsigned int *)&v186);
              uint64_t v120 = (uint64_t *)v186;
              if (v187)
              {
                uint64_t v133 = 16 * v187;
                uint64_t v134 = (int *)((char *)v186 + 8);
                do
                {
                  int v136 = *v134;
                  v134 += 4;
                  unsigned int v135 = v136;
                  if (*((llvm::MachineBasicBlock **)sub_1CBF3C94C(*(void *)(a1 + 272), *(_DWORD *)(a1 + 288), v136)
                       + 1) != v106)
                  {
                    unint64_t v137 = sub_1CC406A5C(v180, v128, &v182);
                    LODWORD(v181) = v135;
                    *((void *)&v181 + 1) = v130;
                    sub_1CC406E6C((uint64_t)(v137 + 24), v135, v130, &v181);
                  }
                  v133 -= 16;
                }
                while (v133);
                uint64_t v120 = (uint64_t *)v186;
              }
              if (v120 != &v188) {
                free(v120);
              }
            }
            v123 += 16;
          }
          while (v123 != v124);
          int v123 = (char *)v189[0];
        }
        if (v123 != (char *)&v190) {
          free(v123);
        }
        uint64_t j = (llvm::MachineBasicBlock **)v180;
        unint64_t v122 = v178;
      }
      v121 += 2;
    }
    while (v121 != v122);
    unint64_t v121 = (uint64_t **)v192;
  }
  if (v121 != (uint64_t **)&v194) {
    free(v121);
  }
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v138 = llvm::dbgs((llvm *)v120);
    uint64_t v139 = *((void *)v138 + 4);
    if ((unint64_t)(*((void *)v138 + 3) - v139) > 0x13)
    {
      *(_DWORD *)(v139 + 16) = 174809967;
      *(_OWORD *)uint64_t v139 = *(_OWORD *)"after uses in block\n";
      *((void *)v138 + 4) += 20;
    }
    else
    {
      uint64_t v138 = llvm::raw_ostream::write(v138, "after uses in block\n", 0x14uLL);
    }
    int v140 = llvm::dbgs(v138);
    uint64_t v141 = *((void *)v140 + 4);
    if ((unint64_t)(*((void *)v140 + 3) - v141) > 9)
    {
      *(_WORD *)(v141 + 8) = 8250;
      *(void *)uint64_t v141 = *(void *)"  LiveIn: ";
      *((void *)v140 + 4) += 10;
    }
    else
    {
      int v140 = llvm::raw_ostream::write(v140, "  LiveIn: ", 0xAuLL);
    }
    int v142 = *(const llvm::rdf::DataFlowGraph **)a1;
    uint64_t v192 = j;
    unint64_t v193 = v142;
    uint64_t v143 = llvm::rdf::operator<<(v140, &v192);
    int v144 = (unsigned char *)*((void *)v143 + 4);
    if ((unint64_t)v144 >= *((void *)v143 + 3))
    {
      uint64_t v143 = llvm::raw_ostream::write(v143, 10);
    }
    else
    {
      *((void *)v143 + 4) = v144 + 1;
      *int v144 = 10;
    }
    uint64_t v145 = llvm::dbgs(v143);
    uint64_t v146 = v145;
    uint64_t v147 = *((void *)v145 + 4);
    if ((unint64_t)(*((void *)v145 + 3) - v147) > 9)
    {
      *(_WORD *)(v147 + 8) = 8224;
      *(void *)uint64_t v147 = *(void *)"  Local:  ";
      *((void *)v145 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v145, "  Local:  ", 0xAuLL);
    }
    unsigned int v148 = sub_1CC404120((uint64_t **)(a1 + 120), (unint64_t)v106, (uint64_t)v106, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::raw_ostream *)(v148 + 5), v146);
    char v149 = (unsigned char *)*((void *)v146 + 4);
    if ((unint64_t)v149 >= *((void *)v146 + 3))
    {
      llvm::raw_ostream::write(v146, 10);
    }
    else
    {
      *((void *)v146 + 4) = v149 + 1;
      *char v149 = 10;
    }
  }
  unint64_t v150 = (llvm::raw_ostream *)(sub_1CC404120((uint64_t **)(a1 + 120), (unint64_t)v106, (uint64_t)v106, a1 + 40) + 5);
  unsigned __int32 v151 = (llvm *)sub_1CC407970((uint64_t **)(a1 + 344), (unint64_t)v106, &v185);
  for (unsigned int m = (uint64_t *)*((void *)v151 + 7); m; unsigned int m = (uint64_t *)*m)
  {
    uint64_t v153 = (void *)m[5];
    if (v153)
    {
      uint64_t v154 = 0;
      do
      {
        v154 |= v153[3];
        uint64_t v153 = (void *)*v153;
      }
      while (v153);
    }
    else
    {
      uint64_t v154 = 0;
    }
    if (*((_DWORD *)m + 4)) {
      uint64_t v155 = v154;
    }
    else {
      uint64_t v155 = 0;
    }
    unsigned __int32 v151 = (llvm *)llvm::rdf::RegisterAggr::insert((uint64_t)v150, *((_DWORD *)m + 4), v155);
  }
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v156 = llvm::dbgs(v151);
    __int16 v157 = (void *)*((void *)v156 + 4);
    if (*((void *)v156 + 3) - (void)v157 > 0x17uLL)
    {
      qmemcpy(v157, "after phi uses in block\n", 24);
      *((void *)v156 + 4) += 24;
    }
    else
    {
      uint64_t v156 = llvm::raw_ostream::write(v156, "after phi uses in block\n", 0x18uLL);
    }
    int v158 = llvm::dbgs(v156);
    uint64_t v159 = *((void *)v158 + 4);
    if ((unint64_t)(*((void *)v158 + 3) - v159) > 9)
    {
      *(_WORD *)(v159 + 8) = 8250;
      *(void *)uint64_t v159 = *(void *)"  LiveIn: ";
      *((void *)v158 + 4) += 10;
    }
    else
    {
      int v158 = llvm::raw_ostream::write(v158, "  LiveIn: ", 0xAuLL);
    }
    uint64_t v160 = *(const llvm::rdf::DataFlowGraph **)a1;
    uint64_t v192 = (llvm::MachineBasicBlock **)v180;
    unint64_t v193 = v160;
    int v161 = llvm::rdf::operator<<(v158, &v192);
    uint64_t v162 = (unsigned char *)*((void *)v161 + 4);
    if ((unint64_t)v162 >= *((void *)v161 + 3))
    {
      int v161 = llvm::raw_ostream::write(v161, 10);
    }
    else
    {
      *((void *)v161 + 4) = v162 + 1;
      *uint64_t v162 = 10;
    }
    uint64_t v163 = llvm::dbgs(v161);
    uint64_t v164 = v163;
    uint64_t v165 = *((void *)v163 + 4);
    if ((unint64_t)(*((void *)v163 + 3) - v165) > 9)
    {
      *(_WORD *)(v165 + 8) = 8224;
      *(void *)uint64_t v165 = *(void *)"  Local:  ";
      *((void *)v163 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v163, "  Local:  ", 0xAuLL);
    }
    llvm::rdf::RegisterAggr::print(v150, v164);
    uint64_t v166 = (unsigned char *)*((void *)v164 + 4);
    if ((unint64_t)v166 >= *((void *)v164 + 3))
    {
      llvm::raw_ostream::write(v164, 10);
    }
    else
    {
      *((void *)v164 + 4) = v166 + 1;
      *uint64_t v166 = 10;
    }
  }
  uint64_t v192 = &v185;
  unint64_t v167 = sub_1CD52CA74((uint64_t **)(a1 + 320), (unint64_t *)&v185, (uint64_t)&std::piecewise_construct, (uint64_t ***)&v192);
  int v168 = (uint64_t **)v167[5];
  unsigned int v169 = v167 + 6;
  for (BOOL n = v168 == v167 + 6; !n; BOOL n = v175 == v169)
  {
    sub_1CC404120((uint64_t **)(a1 + 120), (unint64_t)v168[4], (uint64_t)v168[4], a1 + 40);
    for (iunsigned int i = *(void **)(v180 + 16); ii; iunsigned int i = (void *)*ii)
    {
      uint64_t v172 = ii[5];
      if (v172)
      {
        unint64_t v173 = *(void ****)(a1 + 24);
        sub_1CBF3C94C(*(void *)(a1 + 272), *(_DWORD *)(a1 + 288), *(_DWORD *)(v172 + 16));
        llvm::MachineDominatorTree::applySplitCriticalEdges(v173);
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
      }
    }
    uint64_t v174 = v168[1];
    if (v174)
    {
      do
      {
        unint64_t v175 = (uint64_t **)v174;
        uint64_t v174 = (uint64_t *)*v174;
      }
      while (v174);
    }
    else
    {
      do
      {
        unint64_t v175 = (uint64_t **)v168[2];
        BOOL n = *v175 == (uint64_t *)v168;
        int v168 = v175;
      }
      while (!n);
    }
    int v168 = v175;
  }
  return sub_1CC404274((uint64_t)v183);
}

void llvm::rdf::Liveness::resetLiveIns(llvm::rdf::Liveness *this)
{
  uint64_t v1 = **(void **)this;
  uint64_t v2 = *(void **)(v1 + 328);
  uint64_t v45 = (void *)(v1 + 320);
  if (v2 != (void *)(v1 + 320))
  {
    uint8x8_t v43 = (uint64_t **)((char *)this + 120);
    uint64_t v44 = (char *)this + 40;
    do
    {
      uint64_t v3 = (unsigned __int16 *)v2[19];
      uint64_t v4 = (unsigned __int16 *)v2[20];
      if (v4 == v3)
      {
        unint64_t v7 = 0;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        unint64_t v7 = 0;
        do
        {
          int v8 = *v3;
          if (v6 >= v5)
          {
            uint64_t v9 = (v6 - v7) >> 2;
            unint64_t v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62) {
LABEL_74:
            }
              abort();
            if ((v5 - v7) >> 1 > v10) {
              unint64_t v10 = (v5 - v7) >> 1;
            }
            if ((unint64_t)(v5 - v7) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v11 = v10;
            }
            if (v11)
            {
              if (v11 >> 62) {
LABEL_75:
              }
                sub_1CB833614();
              unsigned int v12 = (char *)operator new(4 * v11);
            }
            else
            {
              unsigned int v12 = 0;
            }
            uint64_t v13 = &v12[4 * v9];
            *(_DWORD *)uint64_t v13 = v8;
            int v14 = v13 + 4;
            while (v6 != v7)
            {
              int v15 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v13 - 1) = v15;
              v13 -= 4;
            }
            unint64_t v5 = &v12[4 * v11];
            if (v7) {
              operator delete(v7);
            }
            unint64_t v7 = v13;
            uint64_t v6 = v14;
          }
          else
          {
            *(_DWORD *)uint64_t v6 = v8;
            v6 += 4;
          }
          v3 += 8;
        }
        while (v3 != v4);
        for (unsigned int i = v7; i != v6; i += 4)
        {
          int v17 = *(unsigned __int16 *)i;
          llvm::MachineBasicBlock::removeLiveIn(v2, v17, -1);
        }
      }
      int v18 = sub_1CC404120(v43, (unint64_t)v2, (uint64_t)v2, (uint64_t)v44) + 5;
      llvm::rdf::RegisterAggr::rr_iterator::rr_iterator(&v53, (uint64_t)v18, 0);
      llvm::rdf::RegisterAggr::rr_iterator::rr_iterator(&v48, (uint64_t)v18, 1);
      uint64_t v20 = v53;
      uint64_t v19 = v54;
      uint64_t v71 = (uint64_t *)v53;
      uint64_t v72 = v54;
      unint64_t v21 = v55;
      int v73 = v55;
      if (v55)
      {
        v54[2] = &v72;
        unsigned int v53 = &v54;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v20 = &v72;
        uint64_t v71 = (uint64_t *)&v72;
      }
      long long v74 = v56;
      uint64_t v75 = v57;
      unsigned int v23 = v48;
      BOOL v22 = v49;
      int v66 = (uint64_t *)v48;
      uint64_t v67 = v49;
      uint64_t v24 = v50;
      unsigned int v68 = v50;
      if (v50)
      {
        v49[2] = &v67;
        unint64_t v48 = &v49;
        int v49 = 0;
        unint64_t v50 = 0;
        unint64_t v21 = v73;
      }
      else
      {
        unsigned int v23 = &v67;
        int v66 = (uint64_t *)&v67;
      }
      long long v69 = v51;
      uint64_t v70 = v52;
      unint64_t v58 = v20;
      v59[0] = v19;
      v59[1] = v21;
      if (v21)
      {
        v19[2] = v59;
        uint64_t v71 = (uint64_t *)&v72;
        uint64_t v72 = 0;
        int v73 = 0;
      }
      else
      {
        unint64_t v58 = v59;
      }
      long long v60 = v74;
      uint64_t v61 = v75;
      unint64_t v62 = v23;
      v63[0] = v22;
      v63[1] = v24;
      if (v24)
      {
        v22[2] = v63;
        int v66 = (uint64_t *)&v67;
        uint64_t v67 = 0;
        unsigned int v68 = 0;
        BOOL v22 = 0;
      }
      else
      {
        unint64_t v62 = v63;
      }
      long long v64 = v69;
      uint64_t v65 = v70;
      sub_1CC1B4328((uint64_t)&v66, v22);
      sub_1CC1B4328((uint64_t)&v71, v72);
      sub_1CC1B4328((uint64_t)&v48, v49);
      sub_1CC1B4328((uint64_t)&v53, v54);
      sub_1CC407C54(&v71, &v58);
      long long v74 = v60;
      uint64_t v75 = v61;
      sub_1CC407C54(&v66, &v62);
      uint64_t v70 = v65;
      long long v69 = v64;
      if (DWORD2(v74) != DWORD2(v64))
      {
        unint64_t v25 = (void *)v74;
        uint64_t v26 = (char *)v2[20];
        do
        {
          int v27 = *((_DWORD *)v25 + 8);
          uint64_t v28 = v25[5];
          if (v27) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          unint64_t v30 = v2[21];
          if ((unint64_t)v26 >= v30)
          {
            unint64_t v31 = (char *)v2[19];
            uint64_t v32 = (v26 - v31) >> 4;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60) {
              goto LABEL_74;
            }
            uint64_t v34 = v30 - (void)v31;
            if (v34 >> 3 > v33) {
              unint64_t v33 = v34 >> 3;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              if (v35 >> 60) {
                goto LABEL_75;
              }
              BOOL v36 = (char *)operator new(16 * v35);
            }
            else
            {
              BOOL v36 = 0;
            }
            uint64_t v37 = &v36[16 * v32];
            *(_WORD *)uint64_t v37 = v27;
            *((void *)v37 + 1) = v29;
            if (v26 == v31)
            {
              uint64_t v39 = v26;
              unsigned int v38 = &v36[16 * v32];
            }
            else
            {
              unsigned int v38 = &v36[16 * v32];
              do
              {
                *((_OWORD *)v38 - 1) = *((_OWORD *)v26 - 1);
                v38 -= 16;
                v26 -= 16;
              }
              while (v26 != v31);
              uint64_t v39 = (char *)v2[19];
            }
            uint64_t v26 = v37 + 16;
            v2[19] = v38;
            v2[20] = v37 + 16;
            v2[21] = &v36[16 * v35];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_WORD *)uint64_t v26 = v27;
            *((_WORD *)v26 + 3) = v47;
            *(_DWORD *)(v26 + 2) = v46;
            *((void *)v26 + 1) = v29;
            v26 += 16;
          }
          v2[20] = v26;
          unint64_t v40 = (void *)v74;
          unsigned int v41 = *(void **)(v74 + 8);
          if (v41)
          {
            do
            {
              unint64_t v25 = v41;
              unsigned int v41 = (void *)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              unint64_t v25 = (void *)v40[2];
              BOOL v42 = *v25 == (void)v40;
              unint64_t v40 = v25;
            }
            while (!v42);
          }
          *(void *)&long long v74 = v25;
          ++DWORD2(v74);
        }
        while (DWORD2(v74) != DWORD2(v69));
      }
      sub_1CC1B4328((uint64_t)&v66, v67);
      sub_1CC1B4328((uint64_t)&v71, v72);
      sub_1CC1B4328((uint64_t)&v62, v63[0]);
      sub_1CC1B4328((uint64_t)&v58, v59[0]);
      if (v7) {
        operator delete(v7);
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v45);
  }
}

void llvm::rdf::Liveness::resetKills(llvm::rdf::Liveness *this)
{
  uint64_t v1 = **(void **)this;
  uint64_t v2 = (llvm::MachineBasicBlock *)(v1 + 320);
  uint64_t v3 = *(llvm::MachineBasicBlock **)(v1 + 328);
  if (v3 != (llvm::MachineBasicBlock *)(v1 + 320))
  {
    do
    {
      llvm::rdf::Liveness::resetKills(this, v3);
      uint64_t v3 = (llvm::MachineBasicBlock *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void llvm::rdf::Liveness::resetKills(llvm::rdf::Liveness *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(*((void *)this + 1) + 16);
  unsigned int v5 = v4 + 63;
  uint64_t v6 = (v4 + 63) >> 6;
  uint64_t v86 = v89;
  int v88 = 6;
  if ((v4 + 63) > 0x1BF)
  {
    unsigned int v87 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v5 >= 0x40) {
    bzero(v89, 8 * v6);
  }
  unsigned int v87 = (v4 + 63) >> 6;
  v89[12] = v4;
  if (v5 >= 0x40) {
    bzero(v84, 8 * v6);
  }
  int v85 = v4;
  unint64_t v7 = (unsigned __int16 *)*((void *)a2 + 19);
  int v8 = (unsigned __int16 *)*((void *)a2 + 20);
  if (v8 != v7)
  {
    uint64_t v9 = *((void *)this + 1);
    if (v9) {
      unint64_t v10 = (uint64_t *)(v9 + 8);
    }
    else {
      unint64_t v10 = 0;
    }
    uint64_t v11 = v10[6];
    uint64_t v12 = *v10;
    uint64_t v13 = v10[10];
    int v14 = v86;
    do
    {
      unsigned int v15 = *v7;
      uint64_t v16 = *(unsigned int *)(v12 + 24 * *v7 + 4);
      if (*(_WORD *)(v11 + 2 * v16))
      {
        uint64_t v17 = *((void *)v7 + 1);
        int v18 = (unsigned __int16 *)(v13 + 2 * *(unsigned int *)(v12 + 24 * *v7 + 12));
        unsigned __int16 v19 = *(_WORD *)(v11 + 2 * v16) + v15;
        uint64_t v20 = *(void *)(v9 + 232);
        unint64_t v21 = v86;
        BOOL v22 = (unsigned __int16 *)(v11 + 2 + 2 * v16);
        do
        {
          if ((*(void *)(v20 + 8 * *v18) & v17) != 0) {
            v21[v19 >> 6] |= 1 << v19;
          }
          int v23 = *v22++;
          v19 += v23;
          ++v18;
        }
        while (v23);
      }
      else
      {
        v14[v15 >> 6] |= 1 << v15;
      }
      v7 += 8;
    }
    while (v7 != v8);
  }
  uint64_t v24 = *((void *)a2 + 11);
  for (uint64_t i = *((void *)a2 + 12); v24 != i; v24 += 8)
  {
    uint64_t v26 = *(unsigned __int16 **)(*(void *)v24 + 152);
    int v27 = *(unsigned __int16 **)(*(void *)v24 + 160);
    if (v27 != v26)
    {
      uint64_t v28 = *((void *)this + 1);
      if (v28) {
        uint64_t v29 = (uint64_t *)(v28 + 8);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = v29[6];
      uint64_t v31 = *v29;
      uint64_t v32 = v29[10];
      do
      {
        unsigned int v33 = *v26;
        uint64_t v34 = *(unsigned int *)(v31 + 24 * *v26 + 4);
        if (*(_WORD *)(v30 + 2 * v34))
        {
          uint64_t v35 = *((void *)v26 + 1);
          BOOL v36 = (unsigned __int16 *)(v32 + 2 * *(unsigned int *)(v31 + 24 * *v26 + 12));
          unsigned __int16 v37 = *(_WORD *)(v30 + 2 * v34) + v33;
          uint64_t v38 = *(void *)(v28 + 232);
          uint64_t v39 = (unsigned __int16 *)(v30 + 2 + 2 * v34);
          do
          {
            if ((*(void *)(v38 + 8 * *v36) & v35) != 0) {
              *(void *)&v84[8 * (v37 >> 6)] |= 1 << v37;
            }
            int v40 = *v39++;
            v37 += v40;
            ++v36;
          }
          while (v40);
        }
        else
        {
          *(void *)&v84[8 * (v33 >> 6)] |= 1 << v33;
        }
        v26 += 8;
      }
      while (v26 != v27);
    }
  }
  uint64_t v42 = *((void *)a2 + 6);
  unsigned int v41 = (char *)a2 + 48;
  unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
  if ((v42 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v43 & 4) == 0)
  {
    while ((*(_WORD *)(v43 + 44) & 4) != 0)
      unint64_t v43 = *(void *)v43 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((char *)v43 != v41)
  {
    if (**(unsigned __int16 **)(v43 + 16) - 13 >= 5)
    {
      uint64_t v44 = *(unsigned int *)(v43 + 40);
      if (v44)
      {
        uint64_t v45 = *(_DWORD **)(v43 + 32);
        uint64_t v46 = 32 * v44;
        do
        {
          if ((*v45 & 0x10000FF) == 0) {
            *v45 &= ~0x4000000u;
          }
          v45 += 8;
          v46 -= 32;
        }
        while (v46);
        uint64_t v47 = *(unsigned int *)(v43 + 40);
        if (v47)
        {
          unint64_t v48 = *(_DWORD **)(v43 + 32);
          int v49 = &v48[8 * v47];
          unint64_t v50 = v48;
          do
          {
            if ((*v50 & 0x30000FF) == 0x1000000)
            {
              unsigned int v51 = v50[1];
              if (v51 - 1 <= 0x3FFFFFFE)
              {
                uint64_t v52 = *((void *)this + 1);
                unsigned int v53 = (void *)(v52 + 8);
                if (!v52) {
                  unsigned int v53 = 0;
                }
                uint64_t v54 = v53[6];
                if (v54)
                {
                  uint64_t v55 = (unsigned __int16 *)(v54 + 2 * *(unsigned int *)(*v53 + 24 * v51 + 4));
                  do
                  {
                    *(void *)&v84[8 * ((unsigned __int16)v51 >> 6)] &= ~(1 << v51);
                    int v56 = *v55++;
                    v51 += v56;
                  }
                  while (v56);
                }
              }
            }
            v50 += 8;
          }
          while (v50 != v49);
          do
          {
            if ((*v48 & 0x110000FF) == 0)
            {
              unsigned int v66 = v48[1];
              if (v66 - 1 <= 0x3FFFFFFE)
              {
                uint64_t v67 = *((void *)this + 1);
                if (v67) {
                  unsigned int v68 = (uint64_t *)(v67 + 8);
                }
                else {
                  unsigned int v68 = 0;
                }
                uint64_t v69 = *v68;
                int v70 = *(_DWORD *)(*v68 + 24 * v66 + 16) & 0xF;
                unint64_t v71 = ((unint64_t)*(unsigned int *)(*v68 + 24 * v66 + 16) >> 3) & 0x1FFFFFFE;
                long long v74 = v68 + 5;
                uint64_t v73 = v68[5];
                uint64_t v72 = v74[1];
                uint64_t v75 = (unsigned __int16 *)(v72 + v71);
                int v76 = *v75;
                long long v64 = v75 + 1;
                int v63 = v76 + v70 * v66;
                while (1)
                {
                  uint64_t v77 = 4 * (unsigned __int16)v63;
                  unint64_t v61 = *(unsigned __int16 *)(v73 + v77);
                  if (*(_WORD *)(v73 + v77) && v72 != 0) {
                    break;
                  }
                  int v79 = (unsigned __int16)*v64++;
                  v63 += v79;
                  if (!v79)
                  {
LABEL_81:
                    *v48 |= 0x4000000u;
                    uint64_t v67 = *((void *)this + 1);
                    goto LABEL_83;
                  }
                }
                if (((*(void *)&v84[(v61 >> 3) & 0x1FF8] >> v61) & 1) == 0)
                {
                  uint64_t v57 = (unsigned __int16 *)(v72
                                           + 2
                                           * *(unsigned int *)(v69
                                                             + 24
                                                             * *(unsigned __int16 *)(v73 + 4 * (unsigned __int16)v63)
                                                             + 8));
                  unsigned int v58 = *(unsigned __int16 *)(v73 + 4 * (unsigned __int16)v63 + 2) << 16;
                  do
                  {
                    int v60 = *v57++;
                    __int16 v59 = v60;
                    if (v60)
                    {
                      LOWORD(v61) = v59 + v61;
                    }
                    else
                    {
                      unsigned int v62 = HIWORD(v58);
                      if (HIWORD(v58))
                      {
                        v58 >>= 16;
                      }
                      else
                      {
                        if (!*v64) {
                          goto LABEL_81;
                        }
                        v63 += (unsigned __int16)*v64++;
                        uint64_t v65 = (unsigned __int16 *)(v73 + 4 * (unsigned __int16)v63);
                        unsigned int v62 = *v65;
                        unsigned int v58 = v65[1] << 16;
                      }
                      LOWORD(v61) = v62;
                      uint64_t v57 = (unsigned __int16 *)(v72 + 2 * *(unsigned int *)(v69 + 24 * v62 + 8));
                    }
                  }
                  while (((*(void *)&v84[8 * ((unsigned __int16)v61 >> 6)] >> v61) & 1) == 0);
                }
LABEL_83:
                if (v67) {
                  unsigned int v80 = (void *)(v67 + 8);
                }
                else {
                  unsigned int v80 = 0;
                }
                uint64_t v81 = v80[6];
                if (v81)
                {
                  unint64_t v82 = (unsigned __int16 *)(v81 + 2 * *(unsigned int *)(*v80 + 24 * v66 + 4));
                  do
                  {
                    *(void *)&v84[8 * ((unsigned __int16)v66 >> 6)] |= 1 << v66;
                    int v83 = *v82++;
                    v66 += v83;
                  }
                  while (v83);
                }
              }
            }
            v48 += 8;
          }
          while (v48 != v49);
        }
      }
    }
    unint64_t v43 = *(void *)v43 & 0xFFFFFFFFFFFFFFF8;
    if (!v43 || (*(unsigned char *)v43 & 4) == 0)
    {
      while ((*(_WORD *)(v43 + 44) & 4) != 0)
        unint64_t v43 = *(void *)v43 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v86 != v89) {
    free(v86);
  }
}

uint64_t llvm::rdf::Liveness::getBlockWithRef(llvm::rdf::Liveness *this, int a2)
{
  return *((void *)sub_1CBF3C94C(*((void *)this + 34), *((_DWORD *)this + 72), a2) + 1);
}

void llvm::rdf::Liveness::emptify(uint64_t a1, void *a2)
{
  for (uint64_t i = (uint64_t *)a2[2]; i; uint64_t i = (uint64_t *)sub_1CC4070E0(a2, i))
  {
    while (i[6])
    {
      uint64_t i = (uint64_t *)*i;
      if (!i) {
        return;
      }
    }
  }
}

void sub_1CC4040C0(void *a1)
{
  if (a1)
  {
    sub_1CC4040C0(*a1);
    sub_1CC4040C0(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2 != a1 + 7) {
      free(v2);
    }
    operator delete(a1);
  }
}

uint64_t **sub_1CC404120(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = a1 + 1;
  unint64_t v7 = a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (v10 <= a2) {
          break;
        }
        unint64_t v7 = *v9;
        int v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        return v9;
      }
      unint64_t v7 = v9[1];
      if (!v7)
      {
        int v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_9:
    uint64_t v11 = operator new(0x78uLL);
    v11[4] = a3;
    v11[5] = v11 + 7;
    v11[6] = 0x600000000;
    unsigned int v12 = *(_DWORD *)(a4 + 8);
    if (v11 + 5 != (void *)a4 && v12 != 0)
    {
      if (v12 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v11 + 7, *(const void **)a4, 8 * *(unsigned int *)(a4 + 8));
      *((_DWORD *)v11 + 12) = v12;
    }
    *((_DWORD *)v11 + 26) = *(_DWORD *)(a4 + 64);
    v11[14] = *(void *)(a4 + 72);
    *uint64_t v11 = 0;
    v11[1] = 0;
    void v11[2] = v9;
    *int v8 = v11;
    int v14 = (uint64_t *)**a1;
    unsigned int v15 = v11;
    if (v14)
    {
      *a1 = v14;
      unsigned int v15 = *v8;
    }
    sub_1CB8358B8(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v11;
}

uint64_t sub_1CC404274(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1CD4CAAF4((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1CC4042D4(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unsigned int *)result;
  while (2)
  {
    unint64_t v10 = a2;
    uint64_t v117 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = (char *)v10 - (char *)v11;
          uint64_t v13 = v10 - v11;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unsigned int v47 = *(a2 - 1);
                unsigned int v48 = *v11;
                __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v47, *v11);
                if (result)
                {
                  *uint64_t v11 = v47;
                  *(a2 - 1) = v48;
                }
                break;
              case 3:
                __n128 result = sub_1CC404DD8(v11, v11 + 1, v117, a3);
                break;
              case 4:
                __n128 result = sub_1CC405124(v11, v11 + 1, v11 + 2, v117, a3);
                break;
              case 5:
                int v49 = v11 + 2;
                unint64_t v50 = v11 + 3;
                sub_1CC405124(v11, v11 + 1, v11 + 2, v11 + 3, a3);
                unsigned int v51 = *(a2 - 1);
                unsigned int v52 = v11[3];
                __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v51, v52);
                if (result)
                {
                  unsigned int *v50 = v51;
                  *(a2 - 1) = v52;
                  unsigned int v53 = *v50;
                  unsigned int v54 = *v49;
                  __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), *v50, *v49);
                  if (result)
                  {
                    *int v49 = v53;
                    unsigned int *v50 = v54;
                    unsigned int v55 = v11[1];
                    __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v53, v55);
                    if (result)
                    {
                      v11[1] = v53;
                      void v11[2] = v55;
                      unsigned int v56 = *v11;
                      __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v53, *v11);
                      if (result)
                      {
                        *uint64_t v11 = v53;
                        v11[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            uint64_t v57 = v11 + 1;
            BOOL v59 = v11 == v10 || v57 == v10;
            if (a5)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                uint64_t v61 = *(void *)a3;
                unsigned int v62 = v11;
                do
                {
                  unsigned int v64 = *v62;
                  unsigned int v63 = v62[1];
                  unsigned int v62 = v57;
                  __n128 result = sub_1CC404C0C(v61, *(uint64_t **)(a3 + 8), v63, v64);
                  if (result)
                  {
                    uint64_t v65 = v60;
                    while (1)
                    {
                      *(unsigned int *)((char *)v11 + v65 + 4) = v64;
                      if (!v65) {
                        break;
                      }
                      unsigned int v64 = *(unsigned int *)((char *)v11 + v65 - 4);
                      __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v63, v64);
                      v65 -= 4;
                      if ((result & 1) == 0)
                      {
                        unsigned int v66 = (unsigned int *)((char *)v11 + v65 + 4);
                        goto LABEL_84;
                      }
                    }
                    unsigned int v66 = v11;
LABEL_84:
                    unsigned int *v66 = v63;
                    uint64_t v61 = *(void *)a3;
                  }
                  uint64_t v57 = v62 + 1;
                  v60 += 4;
                }
                while (v62 + 1 != a2);
              }
            }
            else if (!v59)
            {
              uint64_t v112 = *(void *)a3;
              do
              {
                unsigned int v114 = *v11;
                unsigned int v113 = v11[1];
                uint64_t v11 = v57;
                __n128 result = sub_1CC404C0C(v112, *(uint64_t **)(a3 + 8), v113, v114);
                if (result)
                {
                  unsigned int v115 = v11;
                  do
                  {
                    *unsigned int v115 = v114;
                    unsigned int v114 = *(v115 - 2);
                    __n128 result = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v113, v114);
                    --v115;
                  }
                  while ((result & 1) != 0);
                  *unsigned int v115 = v113;
                  uint64_t v112 = *(void *)a3;
                }
                uint64_t v57 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          unsigned int v125 = v11;
          if (!a4)
          {
            if (v11 != v10)
            {
              uint64_t v67 = a3;
              int64_t v68 = (unint64_t)(v13 - 2) >> 1;
              int64_t v69 = v68;
              uint64_t v122 = v10 - v11;
              int64_t v118 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v125[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  unsigned int v74 = *v72;
                  int64_t v116 = v69;
                  if (v73 < v13)
                  {
                    unsigned int v75 = v72[1];
                    uint64_t v77 = *(void *)v67;
                    unsigned int v78 = *(uint64_t **)(v67 + 8);
                    int v76 = sub_1CC404C0C(*(void *)v67, v78, v74, v75);
                    if (v76)
                    {
                      unsigned int v74 = v75;
                      ++v72;
                    }
                    int64_t v70 = v116;
                    if (v76) {
                      uint64_t v71 = v73;
                    }
                  }
                  else
                  {
                    uint64_t v77 = *(void *)v67;
                    unsigned int v78 = *(uint64_t **)(v67 + 8);
                  }
                  int v79 = &v125[v70];
                  uint64_t v80 = v77;
                  unsigned int v81 = *v79;
                  __n128 result = sub_1CC404C0C(v80, v78, v74, *v79);
                  uint64_t v13 = v122;
                  if ((result & 1) == 0)
                  {
                    unsigned int v120 = v81;
                    do
                    {
                      unint64_t v82 = v72;
                      *int v79 = v74;
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v83 = (2 * v71) | 1;
                      uint64_t v72 = &v125[v83];
                      uint64_t v84 = 2 * v71 + 2;
                      unsigned int v74 = *v72;
                      if (v84 >= v13)
                      {
                        uint64_t v86 = *(void *)v67;
                        unsigned int v87 = *(uint64_t **)(v67 + 8);
                        uint64_t v71 = (2 * v71) | 1;
                      }
                      else
                      {
                        unsigned int v85 = v72[1];
                        uint64_t v86 = *(void *)v67;
                        unsigned int v87 = *(uint64_t **)(v67 + 8);
                        int v88 = sub_1CC404C0C(*(void *)v67, v87, *v72, v85);
                        if (v88)
                        {
                          unsigned int v74 = v85;
                          ++v72;
                        }
                        int64_t v68 = v118;
                        uint64_t v71 = v88 ? v84 : v83;
                      }
                      uint64_t v89 = v86;
                      unsigned int v81 = v120;
                      __n128 result = sub_1CC404C0C(v89, v87, v74, v120);
                      int v79 = v82;
                      uint64_t v13 = v122;
                    }
                    while (!result);
                    *unint64_t v82 = v81;
                    int64_t v70 = v116;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v90 = v67;
              unsigned int v91 = v125;
              do
              {
                uint64_t v92 = 0;
                unsigned int v123 = *v91;
                int64_t v93 = (unint64_t)(v13 - 2) >> 1;
                int v94 = v91;
                do
                {
                  uint64_t v95 = &v94[v92];
                  unsigned int v98 = v95[1];
                  unsigned int v96 = v95 + 1;
                  unsigned int v97 = v98;
                  uint64_t v99 = (2 * v92) | 1;
                  uint64_t v100 = 2 * v92 + 2;
                  if (v100 < v13)
                  {
                    unsigned int v101 = v96[1];
                    uint64_t v102 = v13;
                    __n128 result = sub_1CC404C0C(*(void *)v67, *(uint64_t **)(v67 + 8), v97, v101);
                    uint64_t v13 = v102;
                    if (result)
                    {
                      unsigned int v97 = v101;
                      ++v96;
                    }
                    uint64_t v90 = v67;
                    if (result) {
                      uint64_t v99 = v100;
                    }
                  }
                  unsigned int *v94 = v97;
                  int v94 = v96;
                  uint64_t v92 = v99;
                }
                while (v99 <= v93);
                uint64_t v103 = a2 - 1;
                BOOL v6 = v96 == --a2;
                if (v6)
                {
                  unsigned int *v96 = v123;
                  unsigned int v91 = v125;
                }
                else
                {
                  unsigned int *v96 = *v103;
                  *uint64_t v103 = v123;
                  unsigned int v91 = v125;
                  uint64_t v104 = (char *)v96 - (char *)v125 + 4;
                  if (v104 >= 5)
                  {
                    unint64_t v105 = (((unint64_t)v104 >> 2) - 2) >> 1;
                    unint64_t v106 = &v125[v105];
                    unsigned int v107 = *v106;
                    unsigned int v108 = *v96;
                    uint64_t v109 = v13;
                    __n128 result = sub_1CC404C0C(*(void *)v90, *(uint64_t **)(v90 + 8), *v106, *v96);
                    uint64_t v13 = v109;
                    if (result)
                    {
                      do
                      {
                        uint64_t v110 = v106;
                        unsigned int *v96 = v107;
                        if (!v105) {
                          break;
                        }
                        unint64_t v105 = (v105 - 1) >> 1;
                        unint64_t v106 = &v125[v105];
                        unsigned int v107 = *v106;
                        __n128 result = sub_1CC404C0C(*(void *)v90, *(uint64_t **)(v90 + 8), *v106, v108);
                        unsigned int v96 = v110;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v110 = v108;
                      uint64_t v13 = v109;
                    }
                  }
                }
              }
              while (v13-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unsigned int v15 = &v11[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            sub_1CC404DD8(v11, &v11[(unint64_t)v13 >> 1], v117, a3);
            sub_1CC404DD8(v11 + 1, v15 - 1, a2 - 2, a3);
            sub_1CC404DD8(v11 + 2, &v11[v14 + 1], a2 - 3, a3);
            sub_1CC404DD8(v15 - 1, v15, &v11[v14 + 1], a3);
            unsigned int v16 = *v11;
            *uint64_t v11 = *v15;
            *unsigned int v15 = v16;
          }
          else
          {
            sub_1CC404DD8(&v11[(unint64_t)v13 >> 1], v11, v117, a3);
          }
          uint64_t v17 = a4 - 1;
          unsigned int v18 = *v11;
          uint64_t v19 = *(void *)a3;
          uint64_t v20 = *(uint64_t **)(a3 + 8);
          if (a5 & 1) != 0 || (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), *(v11 - 1), *v11)) {
            break;
          }
          __n128 result = sub_1CC404C0C(v19, v20, v18, *v117);
          if (result)
          {
            do
            {
              unsigned int v35 = v11[1];
              ++v11;
              __n128 result = sub_1CC404C0C(v19, v20, v18, v35);
            }
            while ((result & 1) == 0);
          }
          else
          {
            BOOL v36 = v11 + 1;
            do
            {
              uint64_t v11 = v36;
              if (v36 >= v10) {
                break;
              }
              ++v36;
              __n128 result = sub_1CC404C0C(v19, v20, v18, *v11);
            }
            while (!result);
          }
          uint64_t v37 = v17;
          uint64_t v38 = v10;
          if (v11 < v10)
          {
            uint64_t v38 = v10;
            do
            {
              unsigned int v39 = *--v38;
              __n128 result = sub_1CC404C0C(v19, v20, v18, v39);
            }
            while ((result & 1) != 0);
          }
          if (v11 < v38)
          {
            unsigned int v40 = *v11;
            unsigned int v41 = *v38;
            do
            {
              *uint64_t v11 = v41;
              *uint64_t v38 = v40;
              uint64_t v42 = *(void *)a3;
              unint64_t v43 = *(uint64_t **)(a3 + 8);
              do
              {
                unsigned int v44 = v11[1];
                ++v11;
                unsigned int v40 = v44;
              }
              while (!sub_1CC404C0C(v42, v43, v18, v44));
              do
              {
                unsigned int v45 = *--v38;
                unsigned int v41 = v45;
                __n128 result = sub_1CC404C0C(v42, v43, v18, v45);
              }
              while ((result & 1) != 0);
            }
            while (v11 < v38);
          }
          uint64_t v46 = v11 - 1;
          unint64_t v10 = a2;
          BOOL v5 = v11 - 1 >= v125;
          BOOL v6 = v11 - 1 == v125;
          if (v11 - 1 != v125) {
            unsigned int *v125 = *v46;
          }
          a5 = 0;
          *uint64_t v46 = v18;
          a4 = v37;
        }
        uint64_t v121 = v17;
        uint64_t v21 = 0;
        do
          unsigned int v22 = v11[++v21];
        while ((sub_1CC404C0C(v19, v20, v22, v18) & 1) != 0);
        int v23 = &v11[v21];
        uint64_t v24 = v10;
        if (v21 == 1)
        {
          uint64_t v24 = v10;
          do
          {
            if (v23 >= v24) {
              break;
            }
            unsigned int v26 = *--v24;
          }
          while ((sub_1CC404C0C(v19, v20, v26, v18) & 1) == 0);
        }
        else
        {
          do
            unsigned int v25 = *--v24;
          while (!sub_1CC404C0C(v19, v20, v25, v18));
        }
        if (v23 >= v24)
        {
          uint64_t v11 = (unsigned int *)((char *)v11 + v21 * 4);
        }
        else
        {
          unsigned int v27 = *v24;
          uint64_t v11 = (unsigned int *)((char *)v11 + v21 * 4);
          uint64_t v28 = v24;
          do
          {
            *uint64_t v11 = v27;
            *uint64_t v28 = v22;
            uint64_t v29 = *(void *)a3;
            uint64_t v30 = *(uint64_t **)(a3 + 8);
            do
            {
              unsigned int v31 = v11[1];
              ++v11;
              unsigned int v22 = v31;
            }
            while ((sub_1CC404C0C(v29, v30, v31, v18) & 1) != 0);
            do
            {
              unsigned int v32 = *--v28;
              unsigned int v27 = v32;
            }
            while (!sub_1CC404C0C(v29, v30, v32, v18));
          }
          while (v11 < v28);
        }
        unsigned int v33 = v11 - 1;
        unint64_t v10 = a2;
        uint64_t v9 = v125;
        if (v11 - 1 != v125) {
          unsigned int *v125 = *v33;
        }
        *unsigned int v33 = v18;
        BOOL v5 = v23 >= v24;
        a4 = v121;
        if (v5) {
          break;
        }
LABEL_34:
        __n128 result = sub_1CC4042D4(v125, v11 - 1, a3, v121, a5 & 1);
        a5 = 0;
      }
      BOOL v34 = sub_1CC404ECC(v125, v11 - 1, a3);
      __n128 result = sub_1CC404ECC(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v11 - 1;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CC404C0C(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  if (a3 == a4)
  {
LABEL_2:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  char v5 = *(_DWORD *)(*(void *)a1 + 276);
  int v6 = *(_DWORD *)(*(void *)a1 + 280);
  uint64_t v7 = *(void *)(*(void *)a1 + 296);
  uint64_t v8 = *(void *)(v7 + 8 * ((a3 - 1) >> v5)) + 32 * (v6 & (a3 - 1));
  uint64_t v9 = *(void *)(v7 + 8 * ((a4 - 1) >> v5)) + 32 * (v6 & (a4 - 1));
  int v10 = *(_WORD *)v8 & 0x1C;
  int v11 = *(_WORD *)v9 & 0x1C;
  if (v10 != 16 || v11 != 16)
  {
    BOOL v13 = v10 != 16;
    if (v13 && v11 != 16) {
      LOBYTE(v4) = a3 < a4;
    }
    else {
      LOBYTE(v4) = v13;
    }
    return v4 & 1;
  }
  uint64_t v14 = *(void *)(v8 + 8);
  uint64_t v15 = *(void *)(v9 + 8);
  uint64_t v4 = *((unsigned int *)a2 + 4);
  if (!v4) {
    goto LABEL_18;
  }
  uint64_t v16 = *a2;
  unsigned int v17 = v4 - 1;
  LODWORD(v18) = (v4 - 1) & ((v14 >> 4) ^ (v14 >> 9));
  uint64_t v19 = (void *)(*a2 + 16 * v18);
  uint64_t v20 = *v19;
  if (v14 != *v19)
  {
    int v21 = 1;
    while (v20 != -4096)
    {
      int v22 = v18 + v21++;
      uint64_t v18 = v22 & v17;
      uint64_t v20 = *(void *)(v16 + 16 * v18);
      if (v14 == v20)
      {
        if (v18 == v4) {
          goto LABEL_18;
        }
        int v23 = (unsigned int *)(v16 + 16 * v18 + 8);
        goto LABEL_31;
      }
    }
    goto LABEL_18;
  }
  if (v18 == v4)
  {
LABEL_18:
    uint64_t v24 = *(void *)(v14 + 24);
    uint64_t v25 = v24 + 48;
    uint64_t v26 = *(void *)(v24 + 56);
    if (v26 != v25)
    {
      while (v26 != v14)
      {
        if (v26 == v15) {
          goto LABEL_2;
        }
        if (!v26 || (LOBYTE(v4) = *(unsigned char *)v26, (*(unsigned char *)v26 & 4) == 0))
        {
          while (1)
          {
            LOWORD(v4) = *(_WORD *)(v26 + 44);
            if ((v4 & 8) == 0) {
              break;
            }
            uint64_t v26 = *(void *)(v26 + 8);
          }
        }
        uint64_t v26 = *(void *)(v26 + 8);
        if (v26 == v25) {
          return v4 & 1;
        }
      }
      LOBYTE(v4) = 1;
    }
    return v4 & 1;
  }
  int v23 = (unsigned int *)(v19 + 1);
LABEL_31:
  unsigned int v27 = *v23;
  LODWORD(v28) = v17 & ((v15 >> 4) ^ (v15 >> 9));
  uint64_t v29 = (uint64_t *)(v16 + 16 * v28);
  uint64_t v30 = *v29;
  if (v15 != *v29)
  {
    uint64_t v29 = (uint64_t *)(v16 + 16 * v4);
    int v31 = 1;
    while (v30 != -4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & v17;
      uint64_t v30 = *(void *)(v16 + 16 * v28);
      if (v15 == v30)
      {
        uint64_t v29 = (uint64_t *)(v16 + 16 * v28);
        break;
      }
    }
  }
  LOBYTE(v4) = v27 < *((_DWORD *)v29 + 2);
  return v4 & 1;
}

uint64_t sub_1CC404DD8(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v8 = *a2;
  unsigned int v9 = *a1;
  uint64_t v10 = *(void *)a4;
  int v11 = *(uint64_t **)(a4 + 8);
  char v12 = sub_1CC404C0C(*(void *)a4, v11, *a2, *a1);
  unsigned int v13 = *a3;
  uint64_t result = sub_1CC404C0C(v10, v11, *a3, v8);
  if (v12)
  {
    if (result)
    {
      *a1 = v13;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      unsigned int v17 = *a3;
      uint64_t result = sub_1CC404C0C(*(void *)a4, *(uint64_t **)(a4 + 8), *a3, v9);
      if (!result) {
        return result;
      }
      *a2 = v17;
    }
    *a3 = v9;
  }
  else if (result)
  {
    *a2 = v13;
    *a3 = v8;
    unsigned int v15 = *a2;
    unsigned int v16 = *a1;
    uint64_t result = sub_1CC404C0C(*(void *)a4, *(uint64_t **)(a4 + 8), *a2, *a1);
    if (result)
    {
      *a1 = v15;
      *a2 = v16;
    }
  }
  return result;
}

BOOL sub_1CC404ECC(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      unsigned int v9 = *a1;
      if (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v8, *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1CC404DD8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC405124(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v20 = a1 + 2;
      int v21 = a1 + 3;
      sub_1CC405124(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      unsigned int v22 = *(a2 - 1);
      unsigned int v23 = a1[3];
      if (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v22, v23))
      {
        *int v21 = v22;
        *(a2 - 1) = v23;
        unsigned int v24 = *v21;
        unsigned int v25 = *v20;
        if (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), *v21, *v20))
        {
          *uint64_t v20 = v24;
          *int v21 = v25;
          unsigned int v26 = a1[1];
          if (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v24, v26))
          {
            a1[1] = v24;
            a1[2] = v26;
            unsigned int v27 = *a1;
            if (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v24, *a1))
            {
              *a1 = v24;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_1CC404DD8(a1, a1 + 1, a1 + 2, a3);
      int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = 12;
      break;
  }
  while (1)
  {
    unsigned int v14 = *v11;
    unsigned int v15 = *v10;
    if (sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), *v11, v15))
    {
      uint64_t v16 = v13;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16) = v15;
        uint64_t v17 = v16 - 4;
        if (v16 == 4) {
          break;
        }
        unsigned int v15 = *(unsigned int *)((char *)a1 + v16 - 8);
        char v18 = sub_1CC404C0C(*(void *)a3, *(uint64_t **)(a3 + 8), v14, v15);
        uint64_t v16 = v17;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (unsigned int *)((char *)a1 + v17);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *uint64_t v19 = v14;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v13 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC405124(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  sub_1CC404DD8(a1, a2, a3, a5);
  unsigned int v10 = *a4;
  unsigned int v11 = *a3;
  uint64_t result = sub_1CC404C0C(*(void *)a5, *(uint64_t **)(a5 + 8), *a4, *a3);
  if (result)
  {
    *a3 = v10;
    *a4 = v11;
    unsigned int v13 = *a3;
    unsigned int v14 = *a2;
    uint64_t result = sub_1CC404C0C(*(void *)a5, *(uint64_t **)(a5 + 8), *a3, *a2);
    if (result)
    {
      *a2 = v13;
      *a3 = v14;
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      uint64_t result = sub_1CC404C0C(*(void *)a5, *(uint64_t **)(a5 + 8), *a2, *a1);
      if (result)
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  return result;
}

char *sub_1CC4051E0(char *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = a2;
  uint64_t v21 = (uint64_t)(a2 - 8);
  uint64_t v8 = a2 - result;
  uint64_t v9 = (a2 - result) >> 3;
  if (!v6 & v5)
  {
    if (v8 <= 191)
    {
      BOOL v12 = result == a2 || result + 8 == a2;
      if (a5)
      {
        if (!v12)
        {
          llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
        }
      }
      else if (!v12)
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
      }
    }
    else
    {
      if (a4)
      {
        uint64_t v10 = (uint64_t)&result[8 * ((unint64_t)v9 >> 1)];
        if ((unint64_t)v8 >= 0x401) {
          sub_1CC405D34((uint64_t)result, v10, v21, a3);
        }
        sub_1CC405D34(v10, (uint64_t)result, v21, a3);
      }
      if (result != a2)
      {
        int64_t v13 = (unint64_t)(v9 - 2) >> 1;
        do
        {
          int64_t v14 = v13;
          if ((uint64_t)((unint64_t)(v9 - 2) >> 1) >= v13)
          {
            if (2 * v13 + 2 >= v9)
            {
              llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
            }
            llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
            llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
          }
          --v13;
        }
        while (v14);
        do
        {
          uint64_t v15 = 0;
          unsigned int v16 = result;
          uint64_t v20 = v7;
          uint64_t v22 = *(void *)result;
          do
          {
            uint64_t v17 = &v16[8 * v15 + 8];
            uint64_t v18 = (2 * v15) | 1;
            if (2 * v15 + 2 < v9)
            {
              llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
            }
            *(void *)unsigned int v16 = *(void *)v17;
            v16 += 8 * v15 + 8;
            uint64_t v15 = (2 * v15) | 1;
          }
          while (v18 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
          v7 -= 8;
          if (v17 == v20 - 8)
          {
            *(void *)uint64_t v17 = v22;
          }
          else
          {
            *(void *)uint64_t v17 = *(void *)v7;
            *(void *)uint64_t v7 = v22;
            if (v17 - result + 8 >= 9)
            {
              llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
            }
          }
        }
        while (v9-- > 2);
      }
    }
  }
  else
  {
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
      case 3:
        sub_1CC405D34((uint64_t)result, (uint64_t)(result + 8), v21, a3);
      case 4:
        sub_1CC40609C((uint64_t)result, (uint64_t)(result + 8), (uint64_t)(result + 16), v21, a3);
      case 5:
        sub_1CC405BE4((uint64_t)result, (uint64_t)(result + 8), (uint64_t)(result + 16), (uint64_t)(result + 24), v21, a3);
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

void sub_1CC405BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1CC405D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1CC405E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (a2 - a1) >> 3;
  uint64_t result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(*(void *)a3 + 24));
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates();
    case 3:
      sub_1CC405D34(a1, a1 + 8, a2 - 8, a3);
    case 4:
      sub_1CC40609C(a1, a1 + 8, a1 + 16, a2 - 8, a3);
    case 5:
      sub_1CC405BE4(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8, a3);
    default:
      sub_1CC405D34(a1, a1 + 8, a1 + 16, a3);
  }
}

void sub_1CC40609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

unsigned int *sub_1CC4061A4(unsigned int *result, uint64_t a2, char *__src, char *a4)
{
  char v5 = __src;
  char v6 = result;
  uint64_t v7 = *(void *)result;
  uint64_t v8 = result[2];
  unint64_t v9 = result[3];
  size_t v10 = a4 - __src;
  unint64_t v11 = v8 + ((a4 - __src) >> 4);
  if (*(void *)result + 16 * v8 == a2)
  {
    if (v11 > v9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5 != a4)
    {
      uint64_t result = (unsigned int *)memcpy((void *)(v7 + 16 * v8), v5, v10);
      LODWORD(v8) = v6[2];
    }
    void v6[2] = v8 + (v10 >> 4);
  }
  else
  {
    uint64_t v12 = (a2 - v7) >> 4;
    unint64_t v13 = (uint64_t)v10 >> 4;
    if (v11 > v9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int64_t v14 = (_DWORD *)(v7 + 16 * v12);
    uint64_t v15 = (unsigned char *)(v7 + 16 * v8);
    unint64_t v16 = (v15 - (unsigned char *)v14) >> 4;
    if (v16 >= v13)
    {
      if (v13 + v8 > result[3]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5 != a4)
      {
        uint64_t v19 = (_OWORD *)(*(void *)result + 16 * v8);
        uint64_t v20 = -16 * v13;
        do
        {
          *v19++ = *(_OWORD *)&v15[v20];
          v20 += 16;
        }
        while (v20);
        LODWORD(v8) = result[2];
      }
      result[2] = v8 + v13;
      if (&v15[-16 * v13] != (unsigned char *)v14) {
        uint64_t result = (unsigned int *)memmove(&v14[4 * v13], v14, &v15[-16 * v13] - (unsigned char *)v14 - 4);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memmove(v14, v5, v10 - 4);
      }
    }
    else
    {
      unsigned int v17 = v8 + (v10 >> 4);
      result[2] = v17;
      if (v12 != v8)
      {
        uint64_t result = (unsigned int *)memcpy((void *)(v7 + 16 * v17 - 16 * v16), (const void *)(v7 + 16 * v12), v15 - (unsigned char *)v14);
        do
        {
          uint64_t v18 = *(void *)v5;
          v14[2] = *((_DWORD *)v5 + 2);
          *(void *)int64_t v14 = v18;
          v14 += 4;
          v5 += 16;
          --v16;
        }
        while (v16);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memcpy(v15, v5, a4 - v5);
      }
    }
  }
  return result;
}

uint64_t sub_1CC4063DC(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = (unsigned int *)(a2 + 1);
  char v5 = (unsigned int *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1CC406474((void **)a1, v3, v5 + 7, v5 + 7);
      char v6 = (unsigned int *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          char v6 = *(unsigned int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (unsigned int *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          char v5 = v7;
        }
        while (!v8);
      }
      char v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_DWORD *sub_1CC406474(void **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  char v6 = sub_1CC406524(a1, a2, &v14, &v13, a3);
  uint64_t v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    uint64_t v7 = operator new(0x20uLL);
    v7[7] = *a4;
    unint64_t v9 = v14;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *BOOL v8 = (uint64_t)v7;
    size_t v10 = (void *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = (uint64_t *)*v8;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_1CC406524(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  char v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    BOOL v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      size_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        size_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        size_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v16;
          unsigned int v17 = *(_DWORD *)(v16 + 28);
          if (v15 >= v17) {
            break;
          }
          uint64_t v16 = *a4;
          char v5 = a4;
          if (!*a4) {
            goto LABEL_34;
          }
        }
        if (v17 >= v15) {
          break;
        }
        char v5 = a4 + 1;
        uint64_t v16 = a4[1];
      }
      while (v16);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v18 = a2;
    do
    {
      a4 = (uint64_t *)v18[2];
      BOOL v14 = *a4 == (void)v18;
      uint64_t v18 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v19 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v19;
          unsigned int v20 = *(_DWORD *)(v19 + 28);
          if (v6 >= v20) {
            break;
          }
          uint64_t v19 = *a4;
          char v5 = a4;
          if (!*a4) {
            goto LABEL_34;
          }
        }
        if (v20 >= v6) {
          break;
        }
        char v5 = a4 + 1;
        uint64_t v19 = a4[1];
      }
      while (v19);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v11)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1CC4066C0(void *a1)
{
  if (a1)
  {
    sub_1CC4066C0(*a1);
    sub_1CC4066C0(a1[1]);
    sub_1CC4040C0((void *)a1[6]);
    operator delete(a1);
  }
}

double sub_1CC406714(uint64_t a1, int *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC406804(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CC40689C(a1, v8);
    uint64_t v9 = 0;
    sub_1CC406804(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v6 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t v6 = *a2;
  double result = 0.0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_DWORD *)(v6 + 40) = 1065353216;
  return result;
}

uint64_t sub_1CC406804(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (_DWORD *)(a1 + 48 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      size_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          size_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (_DWORD *)(a1 + 48 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1CC40689C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 48 * v10;
      do
      {
        *double result = -1;
        result += 12;
        v11 -= 48;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 48 * v3;
      do
      {
        unsigned int v14 = *(_DWORD *)(v4 + v12);
        if (v14 <= 0xFFFFFFFD)
        {
          unsigned int v25 = 0;
          sub_1CC406804(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v25);
          unsigned int v15 = v25;
          *unsigned int v25 = *(_DWORD *)(v4 + v12);
          uint64_t v16 = (uint64_t *)(v4 + v12 + 8);
          uint64_t v17 = *v16;
          *uint64_t v16 = 0;
          *((void *)v15 + 1) = v17;
          *((void *)v15 + 2) = *(void *)(v4 + v12 + 16);
          *(void *)(v4 + v12 + 16) = 0;
          uint64_t v18 = *(void *)(v4 + v12 + 24);
          *((void *)v15 + 3) = v18;
          uint64_t v19 = v15 + 6;
          uint64_t v20 = *(void *)(v4 + v12 + 32);
          *((void *)v15 + 4) = v20;
          v15[10] = *(_DWORD *)(v4 + v12 + 40);
          if (v20)
          {
            unint64_t v21 = *(void *)(v18 + 8);
            unint64_t v22 = *((void *)v15 + 2);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v21 >= v22) {
                v21 %= v22;
              }
            }
            else
            {
              v21 &= v22 - 1;
            }
            *(void *)(v17 + 8 * v21) = v19;
            *(void *)(v4 + v12 + 24) = 0;
            *(void *)(v4 + v12 + 32) = 0;
          }
          ++*(_DWORD *)(a1 + 8);
          sub_1CC404274((uint64_t)v16);
        }
        v12 += 48;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v23 = *(unsigned int *)(a1 + 16);
  if (v23)
  {
    uint64_t v24 = 48 * v23;
    do
    {
      *double result = -1;
      result += 12;
      v24 -= 48;
    }
    while (v24);
  }
  return result;
}

char *sub_1CC406A5C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1CC406C70(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *(void *)uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1CC406C70(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_1CB833614();
  }
  unint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint8x8_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    BOOL v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint8x8_t v8 = *v14;
          *BOOL v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          BOOL v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint8x8_t v8 = v14;
        BOOL v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t sub_1CC406E6C(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  unint64_t v7 = a2 ^ a3;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2 ^ a3;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint8x8_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == a2 && i[3] == a3) {
            return 0;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  BOOL v14 = operator new(0x20uLL);
  *BOOL v14 = 0;
  v14[1] = v7;
  *((_OWORD *)v14 + 1) = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1CC406C70(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *BOOL v14 = *v22;
LABEL_42:
    *unint64_t v22 = v14;
    goto LABEL_43;
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return 1;
}

uint64_t sub_1CC40707C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1CC406C70(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_1CC407A50(a1, i[2], i[3], (_OWORD *)i + 1);
  return a1;
}

uint64_t sub_1CC4070E0(void *a1, uint64_t *a2)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    unint64_t v8 = v7;
    unint64_t v7 = (uint64_t *)*v7;
  }
  while (v7 != a2);
  if (v8 != a1 + 2)
  {
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    uint64_t v10 = *a2;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v5) {
    goto LABEL_19;
  }
  unint64_t v11 = *(void *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  uint64_t v10 = *a2;
  if (v11 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v10 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v12 = *(void *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v3) {
      v12 %= *(void *)&v3;
    }
  }
  else
  {
    v12 &= *(void *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(void *)(*a1 + 8 * v12) = v8;
    uint64_t v10 = *a2;
  }
LABEL_27:
  *unint64_t v8 = v10;
  *a2 = 0;
  --a1[3];
  sub_1CD4CAAF4((uint64_t)(a2 + 3));
  operator delete(a2);
  return v5;
}

uint64_t **sub_1CC407240(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint8x8_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint8x8_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint8x8_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *unint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v7[2] = v9;
    *uint8x8_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1CC40731C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1CC406C70(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint8x8_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = *((unsigned int *)v5 + 4);
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v5 + 4);
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (*((_DWORD *)i + 4) == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v13 = operator new(0x40uLL);
      *uint64_t v13 = 0;
      v13[1] = v7;
      *((_DWORD *)v13 + 4) = *((_DWORD *)v5 + 4);
      sub_1CC40707C((uint64_t)(v13 + 3), (uint64_t)(v5 + 3));
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        BOOL v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v8);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        sub_1CC406C70(a1, v19);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        *uint64_t v13 = *v21;
      }
      else
      {
        *uint64_t v13 = *v6;
        *uint8x8_t v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8) {
            v22 %= v8;
          }
        }
        else
        {
          v22 &= v8 - 1;
        }
        uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      *uint64_t v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

_DWORD *sub_1CC407554(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    float v14 = 0;
LABEL_5:
    double result = sub_1CC407648(a2, (uint64_t)a3, a3, v14);
    *double result = *a3;
    *((void *)result + 1) = *a4;
    uint64_t v9 = *(void *)a2;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    char v13 = 1;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a2;
  unsigned int v10 = (37 * *a3) & (v8 - 1);
  double result = (_DWORD *)(*(void *)a2 + 16 * v10);
  int v12 = *result;
  if (*a3 != *result)
  {
    float v15 = 0;
    int v16 = 1;
    while (v12 != -1)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -2;
      }
      if (v17) {
        float v15 = result;
      }
      unsigned int v18 = v10 + v16++;
      unsigned int v10 = v18 & (v8 - 1);
      double result = (_DWORD *)(v9 + 16 * v10);
      int v12 = *result;
      if (*a3 == *result) {
        goto LABEL_3;
      }
    }
    if (v15) {
      float v14 = v15;
    }
    else {
      float v14 = result;
    }
    goto LABEL_5;
  }
LABEL_3:
  char v13 = 0;
LABEL_6:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a1 + 16) = v13;
  return result;
}

_DWORD *sub_1CC407648(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CC4077D4(a1, v7);
    int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = (37 * *a3) & v16;
      a4 = (_DWORD *)(*(void *)a1 + 16 * v17);
      int v18 = *a4;
      if (*a3 == *a4) {
        goto LABEL_3;
      }
      char v13 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v13) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          char v13 = a4;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a4 = (_DWORD *)(*(void *)a1 + 16 * v17);
        int v18 = *a4;
        if (*a3 == *a4) {
          goto LABEL_3;
        }
      }
      goto LABEL_10;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1CC4077D4(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9) {
    goto LABEL_24;
  }
  int v10 = v9 - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
  int v12 = *a4;
  if (*a3 == *a4) {
    goto LABEL_3;
  }
  char v13 = 0;
  int v14 = 1;
  while (v12 != -1)
  {
    if (v13) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v12 == -2;
    }
    if (v22) {
      char v13 = a4;
    }
    unsigned int v23 = v11 + v14++;
    unsigned int v11 = v23 & v10;
    a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
    int v12 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
  }
LABEL_10:
  if (v13) {
    a4 = v13;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CC4077D4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC4078A0(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -1;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC4078A0(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    unint64_t v4 = *(_DWORD **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *unint64_t v4 = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    int v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & (37 * v6);
      uint64_t v9 = *(void *)result + 16 * v8;
      int v10 = *(_DWORD *)v9;
      if (v6 != *(_DWORD *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -1)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -2;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 16 * (v14 & v7);
          int v10 = *(_DWORD *)v9;
          if (v6 == *(_DWORD *)v9) {
            goto LABEL_11;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_11:
      *(_DWORD *)uint64_t v9 = v6;
      *(void *)(v9 + 8) = *((void *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

char *sub_1CC407970(uint64_t **a1, unint64_t a2, void *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = v5;
        unint64_t v8 = *((void *)v5 + 4);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(char **)v7;
        int v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        int v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    int v7 = (char *)operator new(0x50uLL);
    *((void *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(void *)int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *int v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1CC407A50(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  unint64_t v7 = a2 ^ a3;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2 ^ a3;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == a2 && i[3] == a3) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unsigned int v14 = operator new(0x20uLL);
  *unsigned int v14 = 0;
  v14[1] = v7;
  *((_OWORD *)v14 + 1) = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1CC406C70(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unsigned int v14 = *v22;
LABEL_42:
    *BOOL v22 = v14;
    goto LABEL_43;
  }
  *unsigned int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
}

uint64_t **sub_1CC407C54(uint64_t **a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unsigned int v6 = *((_DWORD *)v5 + 8);
      unint64_t v7 = a1[1];
      unint64_t v8 = v3;
      if (*a1 == v3) {
        goto LABEL_8;
      }
      uint8x8_t v9 = a1[1];
      int v10 = v3;
      if (v7)
      {
        do
        {
          unint64_t v8 = v9;
          uint8x8_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          int v10 = v8;
        }
        while (v11);
      }
      if (*((_DWORD *)v8 + 8) < v6)
      {
LABEL_8:
        if (v7) {
          unint64_t v12 = (uint64_t **)v8;
        }
        else {
          unint64_t v12 = (uint64_t **)v3;
        }
        if (v7) {
          BOOL v13 = (uint64_t **)(v8 + 1);
        }
        else {
          BOOL v13 = (uint64_t **)v3;
        }
        if (*v13) {
          goto LABEL_27;
        }
      }
      else
      {
        BOOL v13 = (uint64_t **)v3;
        unint64_t v12 = (uint64_t **)v3;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v12 = (uint64_t **)v7;
              unsigned int v14 = *((_DWORD *)v7 + 8);
              if (v14 <= v6) {
                break;
              }
              unint64_t v7 = *v12;
              BOOL v13 = v12;
              if (!*v12) {
                goto LABEL_23;
              }
            }
            if (v14 >= v6) {
              goto LABEL_27;
            }
            unint64_t v7 = v12[1];
            if (!v7)
            {
              BOOL v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      float v15 = operator new(0x30uLL);
      v15[2] = *((_OWORD *)v5 + 2);
      *(void *)float v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v12;
      *BOOL v13 = (uint64_t *)v15;
      float v16 = (uint64_t *)**a1;
      if (v16)
      {
        *a1 = v16;
        BOOL v17 = *v13;
      }
      else
      {
        BOOL v17 = (uint64_t *)v15;
      }
      sub_1CB8358B8(a1[1], v17);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      unint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          unint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v5[2];
          BOOL v11 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v11);
      }
      uint64_t v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

uint64_t sub_1CC407DE0()
{
  unint64_t v4 = &v3;
  int v2 = 1;
  int v3 = 25;
  *(void *)&long long v1 = "Maximum recursion level";
  *((void *)&v1 + 1) = 23;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCD1FF0, "rdf-liveness-max-rec", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD1FF0, &dword_1CB82C000);
}

llvm::rdf::PhysicalRegisterInfo *llvm::rdf::PhysicalRegisterInfo::PhysicalRegisterInfo(llvm::rdf::PhysicalRegisterInfo *this, const llvm::TargetRegisterInfo *a2, const llvm::MachineFunction *a3)
{
  unint64_t v4 = a2;
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  unsigned int v6 = (char *)operator new(0x100uLL);
  *((void *)this + 1) = v6;
  *((void *)this + 2) = v6;
  unint64_t v7 = (void *)((char *)this + 8);
  *((void *)this + 3) = v6 + 256;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v8 = (uint64_t *)((char *)this + 32);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  uint64_t v9 = *((unsigned int *)v4 + 4);
  if (v9)
  {
    int v10 = (char *)operator new(8 * v9);
    bzero(v10, 8 * v9);
    BOOL v11 = &v10[8 * v9];
    *((void *)this + 4) = v10;
    *((void *)this + 5) = v11;
    *((void *)this + 6) = v11;
    uint64_t v12 = (v9 + 63) >> 6;
    uint64_t v178 = v181;
    int v180 = 6;
    if ((v9 + 63) >= 0x1C0)
    {
      int v179 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v9 + 63) >= 0x40) {
      bzero(v181, 8 * v12);
    }
  }
  else
  {
    LODWORD(v12) = 0;
    uint64_t v178 = v181;
    int v180 = 6;
  }
  int v179 = v12;
  v181[12] = v9;
  BOOL v13 = (unsigned __int16 ****)*((void *)v4 + 30);
  unsigned int v14 = (unsigned __int16 ****)*((void *)v4 + 31);
  if (v13 != v14)
  {
    while (1)
    {
      float v15 = *v13;
      float v16 = **v13;
      uint64_t v17 = *((unsigned __int16 *)v16 + 10);
      if (*((_WORD *)v16 + 10)) {
        break;
      }
LABEL_16:
      if (++v13 == v14) {
        goto LABEL_17;
      }
    }
    unint64_t v18 = *v16;
    uint64_t v19 = *v8;
    uint64_t v20 = 2 * v17;
    uint64_t v21 = v178;
    while (1)
    {
      unint64_t v22 = *v18;
      uint64_t v23 = *(void *)(v19 + 8 * v22);
      uint64_t v24 = v15;
      if (!v23) {
        goto LABEL_14;
      }
      uint64_t v25 = v21[v22 >> 6];
      uint64_t v24 = v15;
      if ((v25 & (1 << v22)) != 0) {
        goto LABEL_14;
      }
      if (v15[3] != *(unsigned __int16 ***)(v23 + 24)) {
        break;
      }
LABEL_15:
      ++v18;
      v20 -= 2;
      if (!v20) {
        goto LABEL_16;
      }
    }
    uint64_t v24 = 0;
    v21[v22 >> 6] = v25 | (1 << v22);
LABEL_14:
    *(void *)(v19 + 8 * v22) = v24;
    goto LABEL_15;
  }
LABEL_17:
  uint64_t v172 = this;
  unint64_t v26 = *((unsigned int *)v4 + 11);
  unsigned int v27 = (unsigned char *)*((void *)this + 7);
  uint64_t v28 = (char *)*((void *)this + 8);
  unint64_t v29 = (v28 - v27) >> 4;
  if (v26 <= v29)
  {
    if (v26 >= v29)
    {
      unsigned int v40 = this;
    }
    else
    {
      unsigned int v40 = this;
      *((void *)this + 8) = &v27[16 * v26];
    }
  }
  else
  {
    unint64_t v30 = v26 - v29;
    uint64_t v31 = *((void *)this + 9);
    if (v26 - v29 <= (v31 - (uint64_t)v28) >> 4)
    {
      bzero(*((void **)this + 8), 16 * v30);
      *((void *)this + 8) = &v28[16 * v30];
      unsigned int v40 = this;
    }
    else
    {
      uint64_t v170 = a3;
      uint64_t v32 = v31 - (void)v27;
      uint64_t v33 = v32 >> 3;
      if (v32 >> 3 <= v26) {
        uint64_t v33 = *((unsigned int *)v4 + 11);
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34 >> 60) {
        goto LABEL_213;
      }
      unsigned int v35 = (char *)operator new(16 * v34);
      BOOL v36 = &v35[16 * v29];
      uint64_t v37 = &v35[16 * v34];
      bzero(v36, 16 * v30);
      uint64_t v38 = &v35[16 * v26];
      if (v28 == v27)
      {
        unsigned int v39 = v172;
        a3 = v170;
      }
      else
      {
        a3 = v170;
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v28 - 1);
          v36 -= 16;
          v28 -= 16;
        }
        while (v28 != v27);
        unsigned int v39 = v172;
        uint64_t v28 = (char *)*((void *)v172 + 7);
      }
      *((void *)v39 + 7) = v36;
      *((void *)v39 + 8) = v38;
      *((void *)v39 + 9) = v37;
      unsigned int v40 = v39;
      if (v28) {
        operator delete(v28);
      }
    }
    unint64_t v4 = *(const llvm::TargetRegisterInfo **)v40;
    LODWORD(v26) = *(_DWORD *)(*(void *)v40 + 44);
  }
  if (v26)
  {
    uint64_t v41 = 0;
    uint64_t v42 = *((void *)v40 + 7);
    while (1)
    {
      unint64_t v43 = (_DWORD *)(v42 + 16 * v41);
      if (!*v43) {
        break;
      }
LABEL_42:
      if (++v41 == v26) {
        goto LABEL_53;
      }
    }
    unsigned int v44 = (unsigned __int16 *)(*((void *)v4 + 6) + 4 * v41);
    uint64_t v45 = *v44;
    if (v44[1])
    {
      *(void *)(v42 + 16 * v41 + 8) = -1;
      *unint64_t v43 = v45;
      goto LABEL_42;
    }
    uint64_t v46 = *((void *)v4 + 1) + 24 * *v44;
    unint64_t v47 = *(unsigned int *)(v46 + 16);
    __int16 v48 = v47 & 0xF;
    int v49 = (_WORD *)(*((void *)v4 + 7) + ((v47 >> 3) & 0x1FFFFFFE));
    __int16 v51 = *v49;
    unint64_t v50 = v49 + 1;
    unsigned __int16 v52 = v51 + v48 * v45;
    unsigned int v53 = (uint64_t *)(*((void *)v4 + 8) + 8 * *(unsigned __int16 *)(v46 + 20));
    while (1)
    {
      uint64_t v54 = *v53;
      *(_DWORD *)(v42 + 16 * v52) = v45;
      if (v54)
      {
        uint64_t v55 = v42 + 16 * v52;
      }
      else
      {
        uint64_t v56 = *(void *)(*v8 + 8 * v45);
        if (!v56)
        {
          *(void *)(v42 + 16 * v52 + 8) = -1;
          goto LABEL_50;
        }
        uint64_t v55 = v42 + 16 * v52;
        uint64_t v54 = *(void *)(v56 + 24);
      }
      *(void *)(v55 + 8) = v54;
LABEL_50:
      ++v53;
      int v57 = *v50++;
      v52 += v57;
      if (!v57) {
        goto LABEL_42;
      }
    }
  }
LABEL_53:
  uint64_t v58 = (*(uint64_t (**)(const llvm::TargetRegisterInfo *))(*(void *)v4 + 72))(v4);
  if (v59)
  {
    uint64_t v60 = (uint64_t *)v58;
    uint64_t v61 = 8 * v59;
    do
    {
      uint64_t v62 = *v60++;
      sub_1CC408C7C((uint64_t)v7, v62);
      v61 -= 8;
    }
    while (v61);
  }
  unsigned int v63 = (char *)a3 + 320;
  for (uint64_t i = *((void *)a3 + 41); (char *)i != v63; uint64_t i = *(void *)(i + 8))
  {
    for (uint64_t j = *(void *)(i + 56); j != i + 48; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v66 = *(unsigned int *)(j + 40);
      if (v66)
      {
        uint64_t v67 = 32 * v66;
        int64_t v68 = (uint64_t *)(*(void *)(j + 32) + 16);
        do
        {
          if (*((unsigned char *)v68 - 16) == 12) {
            sub_1CC408C7C((uint64_t)v7, *v68);
          }
          v68 += 4;
          v67 -= 32;
        }
        while (v67);
        if (!j) {
          goto LABEL_69;
        }
      }
      if ((*(unsigned char *)j & 4) == 0)
      {
LABEL_69:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
    }
  }
  unint64_t v69 = ((*((void *)v40 + 2) - *((void *)v40 + 1)) >> 3) + 1;
  int64_t v70 = (char *)*((void *)v40 + 10);
  uint64_t v71 = (char *)*((void *)v40 + 11);
  unint64_t v72 = 0x8E38E38E38E38E39 * ((v71 - v70) >> 3);
  unint64_t v73 = v69 - v72;
  if (v69 <= v72)
  {
    if (v69 < v72)
    {
      uint64_t v90 = &v70[72 * v69];
      while (v71 != v90)
      {
        uint64_t v92 = (char *)*((void *)v71 - 9);
        v71 -= 72;
        unsigned int v91 = v92;
        if (v71 + 16 != v92) {
          free(v91);
        }
      }
      *((void *)v40 + 11) = v90;
    }
  }
  else
  {
    uint64_t v74 = *((void *)v40 + 12);
    if (0x8E38E38E38E38E39 * ((v74 - (uint64_t)v71) >> 3) >= v73)
    {
      int64_t v93 = &v71[72 * v73];
      uint64_t v94 = 72 * v69 - 8 * ((v71 - v70) >> 3);
      uint64_t v95 = v71 + 16;
      do
      {
        *((void *)v95 + 6) = 0;
        *((_OWORD *)v95 + 1) = 0uLL;
        *((_OWORD *)v95 + 2) = 0uLL;
        *(_OWORD *)uint64_t v95 = 0uLL;
        *((void *)v95 - 2) = v95;
        *((void *)v95 - 1) = 0x600000000;
        v95 += 72;
        v94 -= 72;
      }
      while (v94);
      *((void *)v40 + 11) = v93;
    }
    else
    {
      unint64_t v75 = 0x1C71C71C71C71C72 * ((v74 - (uint64_t)v70) >> 3);
      if (v75 <= v69) {
        unint64_t v75 = ((*((void *)v40 + 2) - *((void *)v40 + 1)) >> 3) + 1;
      }
      if (0x8E38E38E38E38E39 * ((v74 - (uint64_t)v70) >> 3) >= 0x1C71C71C71C71C7) {
        unint64_t v76 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v76 = v75;
      }
      if (v76 > 0x38E38E38E38E38ELL) {
        goto LABEL_213;
      }
      uint64_t v77 = (char *)operator new(72 * v76);
      unsigned int v78 = &v77[8 * ((v71 - v70) >> 3)];
      int v79 = v78 + 16;
      uint64_t v80 = 72 * v69 - 8 * ((v71 - v70) >> 3);
      do
      {
        *((void *)v79 + 6) = 0;
        *((_OWORD *)v79 + 1) = 0uLL;
        *((_OWORD *)v79 + 2) = 0uLL;
        *(_OWORD *)int v79 = 0uLL;
        *((void *)v79 - 2) = v79;
        *((void *)v79 - 1) = 0x600000000;
        v79 += 72;
        v80 -= 72;
      }
      while (v80);
      unsigned int v81 = &v77[72 * v76];
      if (v71 == v70)
      {
        *((void *)v40 + 10) = v78;
        *((void *)v40 + 11) = &v77[72 * v69];
        *((void *)v40 + 12) = v81;
      }
      else
      {
        uint64_t v171 = &v77[72 * v69];
        uint64_t v82 = 0;
        do
        {
          uint64_t v83 = &v71[v82];
          uint64_t v84 = &v78[v82];
          unsigned int v85 = &v78[v82 - 56];
          *(void *)&v78[v82 - 72] = v85;
          *(void *)&v78[v82 - 64] = 0x600000000;
          if (v78 != v71)
          {
            unsigned int v86 = *((_DWORD *)v83 - 16);
            if (v86)
            {
              unsigned int v87 = (const void *)*((void *)v83 - 9);
              int v88 = &v71[v82];
              uint64_t v89 = (uint64_t)&v71[v82 - 56];
              if ((const void *)v89 == v87)
              {
                if (v86 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v85, v87, 8 * *((unsigned int *)v83 - 16));
                *((_DWORD *)v84 - 16) = v86;
              }
              else
              {
                *(void *)&v78[v82 - 72] = v87;
                *((_DWORD *)v84 - 16) = v86;
                *((_DWORD *)v84 - 15) = *((_DWORD *)v88 - 15);
                *((void *)v83 - 9) = v89;
                *((_DWORD *)v88 - 15) = 0;
              }
              *((_DWORD *)v83 - 16) = 0;
            }
          }
          *((_DWORD *)v84 - 2) = *((_DWORD *)v83 - 2);
          v82 -= 72;
        }
        while (&v71[v82] != v70);
        uint64_t v71 = (char *)*((void *)v172 + 10);
        unsigned int v96 = (char *)*((void *)v172 + 11);
        unsigned int v97 = &v78[v82];
        unsigned int v40 = v172;
        *((void *)v172 + 10) = v97;
        *((void *)v172 + 11) = v171;
        *((void *)v172 + 12) = v81;
        while (v96 != v71)
        {
          uint64_t v99 = (char *)*((void *)v96 - 9);
          v96 -= 72;
          unsigned int v98 = v99;
          if (v96 + 16 != v99) {
            free(v98);
          }
        }
      }
      if (v71) {
        operator delete(v71);
      }
    }
  }
  uint64_t v100 = (*((void *)v40 + 2) - *((void *)v40 + 1)) >> 3;
  if (v100)
  {
    unsigned int v101 = 1;
    do
    {
      uint64_t v102 = *(void *)v172;
      int v103 = *(_DWORD *)(*(void *)v172 + 44);
      unsigned int v104 = v103 + 63;
      uint64_t v105 = (v103 + 63) >> 6;
      __src = v176;
      int v175 = 6;
      if ((v103 + 63) >= 0x1C0)
      {
        unsigned int v174 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v104 >= 0x40) {
        bzero(v176, 8 * v105);
      }
      unint64_t v106 = v176;
      unsigned int v174 = (v103 + 63) >> 6;
      int v177 = v103;
      int v107 = *(_DWORD *)(v102 + 16);
      if (v107 != 1)
      {
        uint64_t v108 = *(void *)(*v7 + 8 * (v101 - 1));
        uint64_t v109 = 1;
        do
        {
          if ((*(_DWORD *)(v108 + 4 * (v109 >> 5)) >> v109))
          {
            uint64_t v110 = (unsigned __int16 *)(*(void *)(v102 + 56)
                                      + (((unint64_t)*(unsigned int *)(*(void *)(v102 + 8) + 24 * v109 + 16) >> 3) & 0x1FFFFFFE));
            int v112 = *v110;
            unsigned int v111 = v110 + 1;
            int v113 = v112 + (*(_DWORD *)(*(void *)(v102 + 8) + 24 * v109 + 16) & 0xF) * v109;
            do
            {
              v176[(unsigned __int16)v113 >> 6] |= 1 << v113;
              int v114 = *v111++;
              v113 += v114;
            }
            while (v114);
          }
          ++v109;
        }
        while (v107 != v109);
      }
      if (v104 >= 0x40)
      {
        uint64_t v115 = 8 * v105;
        int64_t v116 = v176;
        do
        {
          *int64_t v116 = ~*v116;
          ++v116;
          v115 -= 8;
        }
        while (v115);
      }
      if ((v103 & 0x3F) != 0) {
        v176[v105 - 1] &= ~(-1 << (v103 & 0x3F));
      }
      uint64_t v117 = *((void *)v172 + 10) + 72 * v101;
      if ((void **)v117 != &__src)
      {
        uint64_t v118 = *(unsigned int *)(v117 + 8);
        if (v118 >= v105)
        {
          if (v104 >= 0x40) {
            memmove(*(void **)v117, v176, 8 * v105);
          }
        }
        else
        {
          if (*(_DWORD *)(v117 + 12) < v105)
          {
            *(_DWORD *)(v117 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v118) {
            memmove(*(void **)v117, v176, 8 * v118);
          }
          else {
            uint64_t v118 = 0;
          }
          if (v118 != v174) {
            memcpy((void *)(*(void *)v117 + 8 * v118), (char *)__src + 8 * v118, 8 * v174 - 8 * v118);
          }
        }
        *(_DWORD *)(v117 + 8) = v105;
        int v103 = v177;
        unint64_t v106 = __src;
      }
      *(_DWORD *)(v117 + 64) = v103;
      if (v106 != v176) {
        free(v106);
      }
      ++v101;
    }
    while (v101 <= v100);
  }
  int v119 = v172;
  unint64_t v120 = *(unsigned int *)(*(void *)v172 + 44);
  uint64_t v121 = (char *)*((void *)v172 + 13);
  uint64_t v122 = (char *)*((void *)v172 + 14);
  unint64_t v123 = 0x8E38E38E38E38E39 * ((v122 - v121) >> 3);
  unint64_t v124 = v120 - v123;
  if (v120 > v123)
  {
    uint64_t v125 = *((void *)v172 + 15);
    if (0x8E38E38E38E38E39 * ((v125 - (uint64_t)v122) >> 3) >= v124)
    {
      uint64_t v145 = &v122[72 * v124];
      uint64_t v146 = 72 * v120 - 8 * ((v122 - v121) >> 3);
      uint64_t v147 = v122 + 16;
      do
      {
        *((void *)v147 + 6) = 0;
        *((_OWORD *)v147 + 1) = 0uLL;
        *((_OWORD *)v147 + 2) = 0uLL;
        *(_OWORD *)uint64_t v147 = 0uLL;
        *((void *)v147 - 2) = v147;
        *((void *)v147 - 1) = 0x600000000;
        v147 += 72;
        v146 -= 72;
      }
      while (v146);
      *((void *)v172 + 14) = v145;
      goto LABEL_179;
    }
    unint64_t v126 = 0x1C71C71C71C71C72 * ((v125 - (uint64_t)v121) >> 3);
    if (v126 <= v120) {
      unint64_t v126 = *(unsigned int *)(*(void *)v172 + 44);
    }
    if (0x8E38E38E38E38E39 * ((v125 - (uint64_t)v121) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v127 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v127 = v126;
    }
    if (v127 <= 0x38E38E38E38E38ELL)
    {
      unsigned int v128 = (char *)operator new(72 * v127);
      unint64_t v129 = &v128[8 * ((v122 - v121) >> 3)];
      unint64_t v130 = &v128[72 * v120];
      int v131 = v129 + 16;
      uint64_t v132 = 72 * v120 - 8 * ((v122 - v121) >> 3);
      do
      {
        *((void *)v131 + 6) = 0;
        *((_OWORD *)v131 + 1) = 0uLL;
        *((_OWORD *)v131 + 2) = 0uLL;
        *(_OWORD *)int v131 = 0uLL;
        *((void *)v131 - 2) = v131;
        *((void *)v131 - 1) = 0x600000000;
        v131 += 72;
        v132 -= 72;
      }
      while (v132);
      uint64_t v133 = &v128[72 * v127];
      if (v122 == v121)
      {
        *((void *)v172 + 13) = v129;
        *((void *)v172 + 14) = v130;
        *((void *)v172 + 15) = v133;
      }
      else
      {
        uint64_t v134 = 0;
        do
        {
          unsigned int v135 = &v122[v134];
          int v136 = &v129[v134];
          unint64_t v137 = &v129[v134 - 56];
          *(void *)&v129[v134 - 72] = v137;
          *(void *)&v129[v134 - 64] = 0x600000000;
          if (v129 != v122)
          {
            unsigned int v138 = *((_DWORD *)v135 - 16);
            if (v138)
            {
              uint64_t v139 = (const void *)*((void *)v135 - 9);
              int v140 = &v122[v134];
              uint64_t v141 = (uint64_t)&v122[v134 - 56];
              if ((const void *)v141 == v139)
              {
                if (v138 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v137, v139, 8 * *((unsigned int *)v135 - 16));
                *((_DWORD *)v136 - 16) = v138;
              }
              else
              {
                *(void *)&v129[v134 - 72] = v139;
                *((_DWORD *)v136 - 16) = v138;
                *((_DWORD *)v136 - 15) = *((_DWORD *)v140 - 15);
                *((void *)v135 - 9) = v141;
                *((_DWORD *)v140 - 15) = 0;
              }
              *((_DWORD *)v135 - 16) = 0;
            }
          }
          *((_DWORD *)v136 - 2) = *((_DWORD *)v135 - 2);
          v134 -= 72;
        }
        while (&v122[v134] != v121);
        int v119 = v172;
        uint64_t v122 = (char *)*((void *)v172 + 13);
        unsigned int v148 = (char *)*((void *)v172 + 14);
        *((void *)v172 + 13) = &v129[v134];
        *((void *)v172 + 14) = v130;
        *((void *)v172 + 15) = v133;
        while (v148 != v122)
        {
          unint64_t v150 = (char *)*((void *)v148 - 9);
          v148 -= 72;
          char v149 = v150;
          if (v148 + 16 != v150) {
            free(v149);
          }
        }
      }
      if (v122) {
        operator delete(v122);
      }
      goto LABEL_179;
    }
LABEL_213:
    sub_1CB833614();
  }
  if (v120 < v123)
  {
    int v142 = &v121[72 * v120];
    while (v122 != v142)
    {
      int v144 = (char *)*((void *)v122 - 9);
      v122 -= 72;
      uint64_t v143 = v144;
      if (v122 + 16 != v144) {
        free(v143);
      }
    }
    *((void *)v172 + 14) = v142;
  }
LABEL_179:
  uint64_t v151 = *(unsigned int *)(*(void *)v119 + 44);
  if (v151)
  {
    for (uint64_t k = 0; k != v151; ++k)
    {
      uint64_t v153 = *(void *)v119;
      int v154 = *(_DWORD *)(*(void *)v119 + 16);
      unsigned int v155 = v154 + 63;
      uint64_t v156 = (v154 + 63) >> 6;
      __src = v176;
      int v175 = 6;
      if ((v154 + 63) >= 0x1C0)
      {
        unsigned int v174 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v155 >= 0x40) {
        bzero(v176, 8 * v156);
      }
      unsigned int v174 = (v154 + 63) >> 6;
      int v177 = v154;
      if (v153) {
        __int16 v157 = (uint64_t *)(v153 + 8);
      }
      else {
        __int16 v157 = 0;
      }
      uint64_t v158 = v157[5];
      int v159 = *(unsigned __int16 *)(v158 + 4 * k);
      if (*(_WORD *)(v158 + 4 * k))
      {
        int v160 = *(unsigned __int16 *)(v158 + 4 * k + 2);
        uint64_t v161 = v157[6];
        uint64_t v162 = *v157;
        uint64_t v163 = __src;
        do
        {
          if (v161)
          {
            uint64_t v164 = (unsigned __int16 *)(v161 + 2 * *(unsigned int *)(v162 + 24 * (unsigned __int16)v159 + 8));
            do
            {
              v163[(unsigned __int16)v159 >> 6] |= 1 << v159;
              int v165 = *v164++;
              v159 += v165;
            }
            while (v165);
          }
          int v159 = v160;
          BOOL v166 = (unsigned __int16)v160 == 0;
          int v160 = 0;
        }
        while (!v166);
      }
      uint64_t v167 = *((void *)v172 + 13) + 72 * k;
      if ((void **)v167 != &__src)
      {
        uint64_t v168 = *(unsigned int *)(v167 + 8);
        if (v168 >= v156)
        {
          if (v155 >= 0x40) {
            memmove(*(void **)v167, __src, 8 * v156);
          }
        }
        else
        {
          if (*(_DWORD *)(v167 + 12) < v156)
          {
            *(_DWORD *)(v167 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v168) {
            memmove(*(void **)v167, __src, 8 * v168);
          }
          else {
            uint64_t v168 = 0;
          }
          if (v168 != v174) {
            memcpy((void *)(*(void *)v167 + 8 * v168), (char *)__src + 8 * v168, 8 * v174 - 8 * v168);
          }
        }
        *(_DWORD *)(v167 + 8) = v156;
        int v154 = v177;
      }
      *(_DWORD *)(v167 + 64) = v154;
      if (__src != v176) {
        free(__src);
      }
      int v119 = v172;
    }
  }
  if (v178 != v181) {
    free(v178);
  }
  return v119;
}

void sub_1CC408C7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  unsigned int v6 = *(char **)a1;
  if (*(char **)a1 != v5)
  {
    unsigned int v6 = *(char **)a1;
    while (*(void *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v5)
      {
        unsigned int v6 = *(char **)(a1 + 8);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    unint64_t v7 = *(void *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = (v5 - v4) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v7 - (void)v4;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1CB833614();
        }
        BOOL v13 = (char *)operator new(8 * v12);
      }
      else
      {
        BOOL v13 = 0;
      }
      unsigned int v14 = &v13[8 * v9];
      *(void *)unsigned int v14 = a2;
      unint64_t v8 = v14 + 8;
      if (v4 != v5)
      {
        do
        {
          uint64_t v15 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v5 != v4);
        unint64_t v4 = *(char **)a1;
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = &v13[8 * v12];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(void *)uint64_t v5 = a2;
      unint64_t v8 = v5 + 8;
    }
    *(void *)(a1 + 8) = v8;
  }
}

uint64_t llvm::rdf::PhysicalRegisterInfo::getAliasSet@<X0>(uint64_t this@<X0>, int a2@<W1>, void **a3@<X8>)
{
  unint64_t v4 = (void *)this;
  a3[1] = 0;
  unsigned int v6 = a3 + 1;
  a3[2] = 0;
  *a3 = a3 + 1;
  if (a2 < 0x40000000)
  {
    if (*(void *)this) {
      uint64_t v17 = (void *)(*(void *)this + 8);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v19 = v17[5];
    uint64_t v18 = v17[6];
    uint64_t v20 = (_WORD *)(v18 + (((unint64_t)*(unsigned int *)(*v17 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
    int v21 = (unsigned __int16)*v20 + (*(_DWORD *)(*v17 + 24 * a2 + 16) & 0xF) * a2;
    while (1)
    {
      ++v20;
      LOWORD(v23) = *(_WORD *)(v19 + 4 * (unsigned __int16)v21);
      if ((_WORD)v23) {
        break;
      }
LABEL_28:
      v21 += (unsigned __int16)*v20;
      if (!*v20) {
        goto LABEL_41;
      }
    }
    int v24 = *(unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21 + 2);
    unsigned int v25 = v24 << 16;
    while (!v18)
    {
LABEL_26:
      unsigned int v25 = 0;
      LOWORD(v23) = v24;
      BOOL v28 = (unsigned __int16)v24 == 0;
      LOWORD(v24) = 0;
      if (v28) {
        goto LABEL_28;
      }
    }
    unint64_t v26 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(*v17 + 24 * (unsigned __int16)v23 + 8));
    while (a2 == (unsigned __int16)v23)
    {
      int v27 = *v26++;
      LOWORD(v23) = v27 + v23;
      if (!v27) {
        goto LABEL_26;
      }
    }
    do
    {
      unsigned int v58 = (unsigned __int16)v23;
      this = (uint64_t)sub_1CD508748(a3, &v58, &v58);
      do
      {
        int v30 = *v26++;
        __int16 v29 = v30;
        if (v30)
        {
          LOWORD(v23) = v29 + v23;
        }
        else
        {
          unsigned int v23 = HIWORD(v25);
          if (HIWORD(v25))
          {
            v25 >>= 16;
          }
          else
          {
            if (!*v20) {
              goto LABEL_41;
            }
            v21 += (unsigned __int16)*v20++;
            uint64_t v31 = (unsigned __int16 *)(v17[5] + 4 * (unsigned __int16)v21);
            unsigned int v23 = *v31;
            unsigned int v25 = v31[1] << 16;
          }
          unint64_t v26 = (unsigned __int16 *)(v17[6] + 2 * *(unsigned int *)(*v17 + 24 * v23 + 8));
        }
      }
      while (a2 == (unsigned __int16)v23);
    }
    while (v20);
LABEL_41:
    uint64_t v32 = (void *)v4[1];
    uint64_t v33 = (void *)v4[2];
    if (v32 != v33)
    {
      if (a2) {
        uint64_t v34 = -1;
      }
      else {
        uint64_t v34 = 0;
      }
      do
      {
        unsigned int v35 = (char *)v4[1];
        BOOL v36 = (char *)v4[2];
        if (v35 == v36)
        {
          uint64_t v37 = (char *)v4[1];
        }
        else
        {
          uint64_t v37 = (char *)v4[1];
          while (*(void *)v37 != *v32)
          {
            v37 += 8;
            if (v37 == v36)
            {
              uint64_t v37 = (char *)v4[2];
              break;
            }
          }
        }
        unsigned int v38 = ((unint64_t)(v37 - v35) >> 3) + 1073741825;
        this = llvm::rdf::PhysicalRegisterInfo::aliasRM(v4, a2, v34, v38);
        if (this)
        {
          uint64_t v39 = *v6;
          unsigned int v40 = v6;
          uint64_t v41 = v6;
          if (*v6)
          {
            do
            {
              while (1)
              {
                uint64_t v41 = (void *)v39;
                unsigned int v42 = *(_DWORD *)(v39 + 28);
                if (v38 >= v42) {
                  break;
                }
                uint64_t v39 = *v41;
                unsigned int v40 = v41;
                if (!*v41) {
                  goto LABEL_58;
                }
              }
              if (v42 >= v38) {
                goto LABEL_61;
              }
              uint64_t v39 = v41[1];
            }
            while (v39);
            unsigned int v40 = v41 + 1;
          }
LABEL_58:
          unint64_t v43 = operator new(0x20uLL);
          v43[7] = v38;
          *(void *)unint64_t v43 = 0;
          *((void *)v43 + 1) = 0;
          *((void *)v43 + 2) = v41;
          *unsigned int v40 = v43;
          unsigned int v44 = (void *)**a3;
          if (v44)
          {
            *a3 = v44;
            unint64_t v43 = (_DWORD *)*v40;
          }
          this = (uint64_t)sub_1CB8358B8(a3[1], (uint64_t *)v43);
          a3[2] = (void *)((char *)a3[2] + 1);
        }
LABEL_61:
        ++v32;
      }
      while (v32 != v33);
    }
  }
  else
  {
    unint64_t v7 = *(void **)(this + 8);
    int v8 = *(_DWORD *)(*(void *)this + 16);
    if (v8 != 1)
    {
      uint64_t v9 = v7[a2 - 1073741825];
      for (unsigned int i = 1; i != v8; ++i)
      {
        if (((*(_DWORD *)(v9 + 4 * (i >> 5)) >> i) & 1) == 0)
        {
          uint64_t v11 = *v6;
          unint64_t v12 = v6;
          BOOL v13 = v6;
          if (*v6)
          {
            do
            {
              while (1)
              {
                BOOL v13 = (void *)v11;
                unsigned int v14 = *(_DWORD *)(v11 + 28);
                if (i >= v14) {
                  break;
                }
                uint64_t v11 = *v13;
                unint64_t v12 = v13;
                if (!*v13) {
                  goto LABEL_13;
                }
              }
              if (v14 >= i) {
                goto LABEL_5;
              }
              uint64_t v11 = v13[1];
            }
            while (v11);
            unint64_t v12 = v13 + 1;
          }
LABEL_13:
          uint64_t v15 = operator new(0x20uLL);
          v15[7] = i;
          *(void *)uint64_t v15 = 0;
          *((void *)v15 + 1) = 0;
          *((void *)v15 + 2) = v13;
          void *v12 = v15;
          float v16 = (void *)**a3;
          if (v16)
          {
            *a3 = v16;
            uint64_t v15 = (_DWORD *)*v12;
          }
          this = (uint64_t)sub_1CB8358B8(a3[1], (uint64_t *)v15);
          a3[2] = (void *)((char *)a3[2] + 1);
        }
LABEL_5:
        ;
      }
      unint64_t v7 = (void *)v4[1];
    }
    for (uint64_t j = (void *)v4[2]; v7 != j; ++v7)
    {
      uint64_t v46 = (char *)v4[1];
      unint64_t v47 = (char *)v4[2];
      if (v46 == v47)
      {
        __int16 v48 = (char *)v4[1];
      }
      else
      {
        __int16 v48 = (char *)v4[1];
        while (*(void *)v48 != *v7)
        {
          v48 += 8;
          if (v48 == v47)
          {
            __int16 v48 = (char *)v4[2];
            break;
          }
        }
      }
      unint64_t v49 = (unint64_t)(v48 - v46) >> 3;
      unsigned int v50 = v49 + 1073741825;
      if (v49 + 1073741825 != a2)
      {
        this = llvm::rdf::PhysicalRegisterInfo::aliasMM(v4, a2, -1, v49 + 1073741825);
        if (this)
        {
          uint64_t v51 = *v6;
          unsigned __int16 v52 = v6;
          unsigned int v53 = v6;
          if (*v6)
          {
            do
            {
              while (1)
              {
                unsigned int v53 = (void *)v51;
                unsigned int v54 = *(_DWORD *)(v51 + 28);
                if (v50 >= v54) {
                  break;
                }
                uint64_t v51 = *v53;
                unsigned __int16 v52 = v53;
                if (!*v53) {
                  goto LABEL_78;
                }
              }
              if (v54 >= v50) {
                goto LABEL_81;
              }
              uint64_t v51 = v53[1];
            }
            while (v51);
            unsigned __int16 v52 = v53 + 1;
          }
LABEL_78:
          uint64_t v55 = operator new(0x20uLL);
          v55[7] = v50;
          *(void *)uint64_t v55 = 0;
          *((void *)v55 + 1) = 0;
          *((void *)v55 + 2) = v53;
          *unsigned __int16 v52 = v55;
          uint64_t v56 = (void *)**a3;
          if (v56)
          {
            *a3 = v56;
            uint64_t v55 = (_DWORD *)*v52;
          }
          this = (uint64_t)sub_1CB8358B8(a3[1], (uint64_t *)v55);
          a3[2] = (void *)((char *)a3[2] + 1);
        }
      }
LABEL_81:
      ;
    }
  }
  return this;
}

BOOL llvm::rdf::PhysicalRegisterInfo::aliasMM(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 8 * (a2 - 1073741825));
  unint64_t v6 = *(unsigned int *)(*a1 + 16);
  uint64_t v7 = *(void *)(v4 + 8 * (a4 - 1073741825));
  unint64_t v8 = v6 >> 5;
  if (v6 < 0x20)
  {
LABEL_8:
    int v12 = *(_DWORD *)(*a1 + 16) & 0x1F;
    return v12
        && (*(_DWORD *)(v5 + 4 * v8) | (-1 << v12) | *(_DWORD *)(v7 + 4 * v8)) != -1;
  }
  else
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = *(_DWORD *)(v7 + v9) | *(_DWORD *)(v5 + v9);
      if (v9 ? ~v10 : ~v10 & 0xFFFFFFFE) {
        return 1;
      }
      v9 += 4;
      if (4 * v8 == v9) {
        goto LABEL_8;
      }
    }
  }
}

uint64_t llvm::rdf::PhysicalRegisterInfo::aliasRM(void *a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1[1] + 8 * (a4 - 1073741825));
  BOOL v5 = ((*(_DWORD *)(v4 + 4 * (a2 >> 5)) >> a2) & 1) == 0;
  if (a3 != -1)
  {
    uint64_t v6 = *(void *)(a1[4] + 8 * a2);
    if (!v6 || (*(void *)(v6 + 24) & ~a3) != 0)
    {
      if (*a1) {
        uint64_t v7 = (void *)(*a1 + 8);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v7[6];
      uint64_t v9 = *(unsigned int *)(*v7 + 24 * a2 + 4);
      if (*(_WORD *)(v8 + 2 * v9))
      {
        int v10 = (unsigned __int16 *)(v7[10] + 2 * *(unsigned int *)(*v7 + 24 * a2 + 12));
        unsigned __int16 v11 = *(_WORD *)(v8 + 2 * v9) + a2;
        int v12 = (unsigned __int16 *)(v8 + 2 * v9 + 2);
        uint64_t v13 = a3;
        while (1)
        {
          uint64_t v14 = *(void *)(*(void *)(*a1 + 232) + 8 * *v10);
          if (v14 & a3) != 0 && ((*(_DWORD *)(v4 + 4 * (v11 >> 5)) >> v11))
          {
            v13 &= ~v14;
            if (!v13) {
              break;
            }
          }
          int v15 = *v12++;
          v11 += v15;
          ++v10;
          if (!v15) {
            return 1;
          }
        }
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return v5;
}

uint64_t llvm::rdf::PhysicalRegisterInfo::aliasRR(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (*a1) {
    BOOL v5 = (uint64_t *)(*a1 + 8);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = *v5;
  uint64_t v7 = *v5 + 24 * a2;
  unint64_t v8 = *(unsigned int *)(v7 + 16);
  uint64_t v9 = v5[6];
  uint64_t v10 = v5[7];
  unsigned __int16 v11 = (_WORD *)(v9 + ((v8 >> 3) & 0x1FFFFFFE));
  __int16 v13 = *v11;
  int v12 = v11 + 1;
  unsigned __int16 v14 = v13 + (v8 & 0xF) * a2;
  int v15 = (void *)(v10 + 8 * *(unsigned __int16 *)(v7 + 20));
  uint64_t v16 = v6 + 24 * a4;
  unint64_t v17 = *(unsigned int *)(v16 + 16);
  __int16 v18 = v17 & 0xF;
  uint64_t v19 = (_WORD *)(v9 + ((v17 >> 3) & 0x1FFFFFFE));
  __int16 v21 = *v19;
  uint64_t v20 = v19 + 1;
  unsigned __int16 v22 = v21 + v18 * a4;
  unsigned int v23 = (void *)(v10 + 8 * *(unsigned __int16 *)(v16 + 20));
  while (1)
  {
    if (*v15) {
      BOOL v24 = (*v15 & a3) == 0;
    }
    else {
      BOOL v24 = 0;
    }
    if (v24) {
      goto LABEL_15;
    }
    if (*v23) {
      BOOL v25 = (*v23 & a5) == 0;
    }
    else {
      BOOL v25 = 0;
    }
    if (v25)
    {
LABEL_18:
      ++v23;
      int v27 = *v20++;
      v22 += v27;
      if (!v27) {
        uint64_t v20 = 0;
      }
      goto LABEL_20;
    }
    if (v14 == v22) {
      return 1;
    }
    if (v14 >= v22) {
      goto LABEL_18;
    }
LABEL_15:
    ++v15;
    int v26 = *v12++;
    v14 += v26;
    if (!v26) {
      int v12 = 0;
    }
LABEL_20:
    if (v12) {
      BOOL v28 = v20 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (v28) {
      return 0;
    }
  }
}

unint64_t llvm::rdf::PhysicalRegisterInfo::mapTo(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a2 == a4)
  {
    unint64_t v6 = a2 & 0xFFFFFFFF00000000;
    uint64_t v7 = a4;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = (void *)(*a1 + 8);
    uint64_t v7 = a4;
    unsigned int v10 = a2;
    uint64_t SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex(v9, a4, a2);
    if (SubRegIndex)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 216))(v8, SubRegIndex, a3);
      unint64_t v6 = 0;
    }
    else
    {
      uint64_t v12 = llvm::MCRegisterInfo::getSubRegIndex(v9, v10, a4);
      if (v12) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 224))(v8, v12, a3);
      }
      unint64_t v6 = 0;
    }
  }
  return v6 | v7;
}

BOOL llvm::rdf::RegisterAggr::hasAliasOf(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = *(void **)(a1 + 72);
  if (a2 < 0x40000000)
  {
    uint64_t v16 = (void *)*v3;
    uint64_t v17 = v16[1] + 24 * a2;
    unint64_t v18 = *(unsigned int *)(v17 + 16);
    uint64_t v19 = v16[8];
    uint64_t v20 = (_WORD *)(v16[7] + ((v18 >> 3) & 0x1FFFFFFE));
    __int16 v22 = *v20;
    __int16 v21 = v20 + 1;
    unsigned __int16 v23 = v22 + (v18 & 0xF) * a2;
    BOOL v24 = (void *)(v19 + 8 * *(unsigned __int16 *)(v17 + 20));
    while (1)
    {
      BOOL v25 = *v24 && (*v24 & a3) == 0;
      if (!v25 && ((*(void *)(*(void *)a1 + 8 * (v23 >> 6)) >> v23) & 1) != 0) {
        break;
      }
      ++v24;
      int v26 = *v21++;
      v23 += v26;
      if (!v26) {
        return 0;
      }
    }
    return 1;
  }
  else
  {
    uint64_t v4 = v3[10] + 72 * (a2 - 0x40000000);
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
    if (v6 >= v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v6;
    }
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a1;
      uint64_t v8 = *(uint64_t **)v4;
      uint64_t v9 = v6 - 1;
      do
      {
        uint64_t v11 = *v7++;
        uint64_t v10 = v11;
        uint64_t v12 = *v8++;
        uint64_t v13 = v12 & v10;
        BOOL result = v13 != 0;
        if (v13) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = v9 == 0;
        }
        --v9;
      }
      while (!v15);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::rdf::RegisterAggr::hasCoverOf(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2 < 0x40000000)
  {
    uint64_t v8 = **(void ***)(a1 + 72);
    uint64_t v9 = v8[1] + 24 * a2;
    unint64_t v10 = *(unsigned int *)(v9 + 16);
    uint64_t v11 = v8[8];
    uint64_t v12 = (_WORD *)(v8[7] + ((v10 >> 3) & 0x1FFFFFFE));
    __int16 v14 = *v12;
    uint64_t v13 = v12 + 1;
    unsigned __int16 v15 = v14 + (v10 & 0xF) * a2;
    uint64_t v16 = (void *)(v11 + 8 * *(unsigned __int16 *)(v9 + 20));
    while (1)
    {
      BOOL v17 = *v16 && (*v16 & a3) == 0;
      if (!v17 && ((*(void *)(*(void *)a1 + 8 * (v15 >> 6)) >> v15) & 1) == 0) {
        break;
      }
      ++v16;
      int v18 = *v13++;
      v15 += v18;
      if (!v18) {
        return 1;
      }
    }
    return 0;
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 80) + 72 * (a2 - 0x40000000);
    __dst = v31;
    uint64_t v30 = 0x600000000;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    if (&__dst == (void **)v4 || v5 == 0)
    {
      unsigned int v5 = 0;
      uint64_t v7 = v31;
    }
    else
    {
      if (v5 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v31, *(const void **)v4, 8 * *(unsigned int *)(v4 + 8));
      uint64_t v7 = __dst;
      LODWORD(v30) = v5;
    }
    v31[12] = *(_DWORD *)(v4 + 64);
    LODWORD(v20) = *(_DWORD *)(a1 + 8);
    if (v20 >= v5) {
      uint64_t v20 = v5;
    }
    else {
      uint64_t v20 = v20;
    }
    if (v20)
    {
      __int16 v21 = *(uint64_t **)a1;
      __int16 v22 = v7;
      do
      {
        uint64_t v23 = *v21++;
        *v22++ &= ~v23;
        --v20;
      }
      while (v20);
    }
    if (v5)
    {
      uint64_t v24 = 8 * v5 - 8;
      BOOL v25 = (uint64_t *)v7;
      do
      {
        uint64_t v26 = *v25++;
        BOOL v19 = v26 == 0;
        if (v26) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = v24 == 0;
        }
        v24 -= 8;
      }
      while (!v27);
    }
    else
    {
      BOOL v19 = 1;
    }
    if (v7 != v31) {
      free(v7);
    }
  }
  return v19;
}

uint64_t llvm::rdf::RegisterAggr::insert(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 72);
  if (a2 < 0x40000000)
  {
    uint64_t v11 = (void *)*v4;
    uint64_t v12 = v11[1] + 24 * a2;
    unint64_t v13 = *(unsigned int *)(v12 + 16);
    uint64_t v14 = v11[8];
    unsigned __int16 v15 = (_WORD *)(v11[7] + ((v13 >> 3) & 0x1FFFFFFE));
    __int16 v17 = *v15;
    uint64_t v16 = v15 + 1;
    unsigned __int16 v18 = v17 + (v13 & 0xF) * a2;
    BOOL v19 = (void *)(v14 + 8 * *(unsigned __int16 *)(v12 + 20));
    do
    {
      if (*v19) {
        BOOL v20 = (*v19 & a3) == 0;
      }
      else {
        BOOL v20 = 0;
      }
      if (!v20) {
        *(void *)(*(void *)a1 + 8 * (v18 >> 6)) |= 1 << v18;
      }
      ++v19;
      int v21 = *v16++;
      v18 += v21;
    }
    while (v21);
  }
  else
  {
    uint64_t v5 = v4[10] + 72 * (a2 - 0x40000000);
    unsigned int v6 = *(_DWORD *)(v5 + 64);
    if (*(_DWORD *)(a1 + 64) < v6)
    {
      int v23 = *(_DWORD *)(a1 + 64) & 0x3F;
      uint64_t v24 = *(unsigned int *)(a1 + 8);
      if (v23) {
        *(void *)(*(void *)a1 + 8 * v24 - 8) &= ~(-1 << v23);
      }
      unsigned int v25 = v24;
      *(_DWORD *)(a1 + 64) = v6;
      unsigned int v26 = v6 + 63;
      if (v24 != (v6 + 63) >> 6)
      {
        uint64_t v27 = v26 >> 6;
        if (v24 > v27)
        {
          *(_DWORD *)(a1 + 8) = v27;
          unsigned int v25 = v26 >> 6;
        }
        else
        {
          if (v27 > *(_DWORD *)(a1 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v27 != v24) {
            bzero((void *)(*(void *)a1 + 8 * v24), 8 * (v27 - v24));
          }
          unsigned int v25 = v27;
          *(_DWORD *)(a1 + 8) = v27;
          unsigned int v6 = *(_DWORD *)(a1 + 64);
        }
      }
      int v28 = v6 & 0x3F;
      if (v28) {
        *(void *)(*(void *)a1 + 8 * v25 - 8) &= ~(-1 << v28);
      }
    }
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)v5;
      uint64_t v9 = *(void **)a1;
      do
      {
        uint64_t v10 = *v8++;
        *v9++ |= v10;
        --v7;
      }
      while (v7);
    }
  }
  return a1;
}

uint64_t llvm::rdf::RegisterAggr::insert(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 64);
  if (*(_DWORD *)(a1 + 64) < v4)
  {
    int v10 = *(_DWORD *)(a1 + 64) & 0x3F;
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v10) {
      *(void *)(*(void *)a1 + 8 * v11 - 8) &= ~(-1 << v10);
    }
    unsigned int v12 = v11;
    *(_DWORD *)(a1 + 64) = v4;
    unsigned int v13 = v4 + 63;
    if (v11 != (v4 + 63) >> 6)
    {
      uint64_t v14 = v13 >> 6;
      if (v11 > v14)
      {
        *(_DWORD *)(a1 + 8) = v14;
        unsigned int v12 = v13 >> 6;
      }
      else
      {
        if (v14 > *(_DWORD *)(a1 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v14 != v11) {
          bzero((void *)(*(void *)a1 + 8 * v11), 8 * (v14 - v11));
        }
        unsigned int v12 = v14;
        *(_DWORD *)(a1 + 8) = v14;
        unsigned int v4 = *(_DWORD *)(a1 + 64);
      }
    }
    int v15 = v4 & 0x3F;
    if (v15) {
      *(void *)(*(void *)a1 + 8 * v12 - 8) &= ~(-1 << v15);
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5)
  {
    unsigned int v6 = *(uint64_t **)a2;
    uint64_t v7 = *(void **)a1;
    do
    {
      uint64_t v8 = *v6++;
      *v7++ |= v8;
      --v5;
    }
    while (v5);
  }
  return a1;
}

uint64_t llvm::rdf::RegisterAggr::intersect(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(*(void *)v6 + 44);
  __int16 v17 = v20;
  int v19 = 6;
  if ((v7 + 63) >= 0x1C0)
  {
    unsigned int v18 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v7 + 63) >= 0x40) {
    bzero(v20, 8 * ((v7 + 63) >> 6));
  }
  unsigned int v18 = (v7 + 63) >> 6;
  v20[12] = v7;
  uint64_t v21 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v17, a2, a3);
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = v18;
  if (v18 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v18;
  }
  if (v10)
  {
    uint64_t v11 = (uint64_t *)v17;
    unsigned int v12 = *(void **)a1;
    uint64_t v13 = v10;
    do
    {
      uint64_t v14 = *v11++;
      *v12++ &= v14;
      --v13;
    }
    while (v13);
  }
  if (v8 > v9)
  {
    int v15 = *(void **)a1;
    do
    {
      v15[v10] = 0;
      LODWORD(v10) = v10 + 1;
    }
    while (v8 != v10);
  }
  if (v17 != v20) {
    free(v17);
  }
  return a1;
}

uint64_t llvm::rdf::RegisterAggr::intersect(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= v2) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = *(void **)result;
    uint64_t v7 = v4;
    do
    {
      uint64_t v8 = *v5++;
      *v6++ &= v8;
      --v7;
    }
    while (v7);
  }
  if (v2 > v3)
  {
    unsigned int v9 = *(void **)result;
    do
    {
      v9[v4] = 0;
      LODWORD(v4) = v4 + 1;
    }
    while (v2 != v4);
  }
  return result;
}

uint64_t llvm::rdf::RegisterAggr::clear(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(*(void *)v6 + 44);
  uint64_t v14 = v17;
  int v16 = 6;
  if ((v7 + 63) >= 0x1C0)
  {
    unsigned int v15 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v7 + 63) >= 0x40) {
    bzero(v17, 8 * ((v7 + 63) >> 6));
  }
  unsigned int v15 = (v7 + 63) >> 6;
  v17[12] = v7;
  uint64_t v18 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v14, a2, a3);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  if (v15 >= v8) {
    uint64_t v8 = v8;
  }
  else {
    uint64_t v8 = v15;
  }
  unsigned int v9 = v14;
  if (v8)
  {
    uint64_t v10 = *(void **)a1;
    uint64_t v11 = (uint64_t *)v14;
    do
    {
      uint64_t v12 = *v11++;
      *v10++ &= ~v12;
      --v8;
    }
    while (v8);
  }
  if (v9 != v17) {
    free(v9);
  }
  return a1;
}

uint64_t llvm::rdf::RegisterAggr::clear(uint64_t result, uint64_t a2)
{
  LODWORD(v2) = *(_DWORD *)(result + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= v2) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v3;
  }
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)a2;
    uint64_t v5 = *(void **)result;
    do
    {
      uint64_t v6 = *v4++;
      *v5++ &= ~v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

unint64_t llvm::rdf::RegisterAggr::intersectWith(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(*(void *)v6 + 44);
  uint64_t v22 = v25;
  int v24 = 6;
  if ((v7 + 63) >= 0x1C0)
  {
    unsigned int v23 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v7 + 63) >= 0x40) {
    bzero(v25, 8 * ((v7 + 63) >> 6));
  }
  unsigned int v23 = (v7 + 63) >> 6;
  v25[12] = v7;
  uint64_t v26 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v22, a2, a3);
  uint64_t v8 = v23;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (v9 >= v23) {
    uint64_t v10 = v23;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = v22;
  if (v10)
  {
    uint64_t v12 = *(uint64_t **)a1;
    uint64_t v13 = v22;
    uint64_t v14 = v10;
    do
    {
      uint64_t v15 = *v12++;
      *v13++ &= v15;
      --v14;
    }
    while (v14);
  }
  if (v8 > v9)
  {
    do
    {
      v11[v10] = 0;
      LODWORD(v10) = v10 + 1;
    }
    while (v8 != v10);
  }
  if (v8)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 8 * v8;
    while (!v11[v16 / 8])
    {
      v16 += 8;
      if (v17 == v16) {
        goto LABEL_17;
      }
    }
    uint64_t RegRef = llvm::rdf::RegisterAggr::makeRegRef((llvm::rdf::RegisterAggr *)&v22);
    unint64_t v19 = RegRef & 0xFFFFFFFF00000000;
    uint64_t v18 = RegRef;
    uint64_t v11 = v22;
  }
  else
  {
LABEL_17:
    uint64_t v18 = 0;
    unint64_t v19 = 0;
  }
  if (v11 != (void *)v25) {
    free(v11);
  }
  return v19 | v18;
}

uint64_t llvm::rdf::RegisterAggr::makeRegRef(llvm::rdf::RegisterAggr *this)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v1 = *((_DWORD *)this + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(uint64_t **)this;
  uint64_t v5 = (v1 - 1) & 0xFFFFFFC0;
  while (1)
  {
    uint64_t v7 = *v4++;
    uint64_t v6 = v7;
    unint64_t v8 = v5 + v3 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    unint64_t v9 = v8 & v6;
    if (v9) {
      break;
    }
    v3 -= 64;
    if (v5 + v3 == -64) {
      return 0;
    }
  }
  int v10 = __clz(__rbit64(v9));
  unsigned int v11 = v10 - v3;
  if (v10 - v3 < 0)
  {
    return 0;
  }
  else
  {
    uint64_t v12 = *(void *)(*((void *)this + 9) + 104) + 72 * v11;
    __dst = v75;
    uint64_t v74 = 0x600000000;
    unsigned int v13 = *(_DWORD *)(v12 + 8);
    BOOL v14 = &__dst == (void **)v12 || v13 == 0;
    if (v14)
    {
      unsigned int v13 = 0;
    }
    else
    {
      if (v13 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v75, *(const void **)v12, 8 * *(unsigned int *)(v12 + 8));
      LODWORD(v74) = v13;
      int v1 = *((_DWORD *)this + 16);
    }
    int v16 = *(_DWORD *)(v12 + 64);
    v75[12] = v16;
    if (v10 - v1 + 1 == v3 || (uint64_t v17 = (v1 - 1) >> 6, v17 < (v11 + 1) >> 6))
    {
LABEL_34:
      __int16 v29 = __dst;
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = (v10 - v3 + 1);
      unint64_t v20 = v19 >> 6;
      uint64_t v21 = *(void *)this;
      if ((((_BYTE)v11 + 1) & 0x3F) != 0) {
        unint64_t v22 = ~(0xFFFFFFFFFFFFFFFFLL >> -((v11 + 1) & 0x3F));
      }
      else {
        unint64_t v22 = -1;
      }
      int v23 = -64 * v20;
      uint64_t v24 = v17 - (v19 >> 6);
      uint64_t v25 = v21 + 8 * v20;
      while (1)
      {
        uint64_t v26 = v18 ? -1 : v22;
        unint64_t v27 = v24 == v18 ? 0xFFFFFFFFFFFFFFFFLL >> ~(v1 - 1) : -1;
        unint64_t v28 = v26 & v27 & *(void *)(v25 + 8 * v18);
        if (v28) {
          break;
        }
        v23 -= 64;
        if (v24 + 1 == ++v18) {
          goto LABEL_34;
        }
      }
      __int16 v29 = __dst;
      int v30 = __clz(__rbit64(v28)) - v23;
      if (v30 >= 0)
      {
        uint64_t v31 = *(void *)(*((void *)this + 9) + 104);
        do
        {
          uint64_t v32 = v31 + 72 * v30;
          unsigned int v33 = *(_DWORD *)(v32 + 8);
          if (v33 >= v13) {
            uint64_t v34 = v13;
          }
          else {
            uint64_t v34 = v33;
          }
          if (v34)
          {
            unsigned int v35 = *(uint64_t **)v32;
            BOOL v36 = v29;
            uint64_t v37 = v34;
            do
            {
              uint64_t v38 = *v35++;
              *v36++ &= v38;
              --v37;
            }
            while (v37);
          }
          if (v13 > v33)
          {
            do
            {
              v29[v34] = 0;
              LODWORD(v34) = v34 + 1;
            }
            while (v13 != v34);
          }
          unsigned int v39 = v30 + 1;
          if (v30 + 1 == v1) {
            break;
          }
          unsigned int v40 = v39 >> 6;
          if (v39 >> 6 > v17) {
            break;
          }
          uint64_t v41 = 0;
          int v42 = v39 & 0x3F;
          BOOL v14 = v42 == 0;
          unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
          uint64_t v44 = v14 ? -1 : ~v43;
          int v45 = -64 * v40;
          uint64_t v46 = v17 - v40;
          uint64_t v47 = v21 + 8 * v40;
          while (1)
          {
            uint64_t v48 = v41 ? -1 : v44;
            unint64_t v49 = v46 == v41 ? 0xFFFFFFFFFFFFFFFFLL >> ~(v1 - 1) : -1;
            unint64_t v50 = v48 & v49 & *(void *)(v47 + 8 * v41);
            if (v50) {
              break;
            }
            v45 -= 64;
            if (v46 + 1 == ++v41) {
              goto LABEL_61;
            }
          }
          int v30 = __clz(__rbit64(v50)) - v45;
        }
        while (v30 >= 0);
      }
    }
    if (!v16) {
      goto LABEL_75;
    }
LABEL_61:
    uint64_t v51 = 0;
    int v52 = v16 - 1;
    unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    uint64_t v54 = v52 & 0xFFFFFFC0;
    uint64_t v55 = v29;
    while (1)
    {
      uint64_t v57 = *v55++;
      uint64_t v56 = v57;
      unint64_t v58 = v54 == v51 ? v53 : -1;
      unint64_t v59 = v58 & v56;
      if (v59) {
        break;
      }
      v51 += 64;
      if (v54 + 64 == v51) {
        goto LABEL_75;
      }
    }
    int v15 = __clz(__rbit64(v59)) + v51;
    if (v15 >= 1)
    {
      uint64_t v60 = 0;
      uint64_t v61 = (void *)**((void **)this + 9);
      uint64_t v62 = v61[1] + 24 * v15;
      uint64_t v63 = v61[8];
      unsigned int v64 = (unsigned __int16 *)(v61[7] + (((unint64_t)*(unsigned int *)(v62 + 16) >> 3) & 0x1FFFFFFE));
      int v66 = *v64;
      uint64_t v65 = v64 + 1;
      int v67 = v66 + (*(_DWORD *)(v62 + 16) & 0xF) * v15;
      int64_t v68 = (uint64_t *)(v63 + 8 * *(unsigned __int16 *)(v62 + 20));
      do
      {
        uint64_t v70 = *v68++;
        uint64_t v69 = v70;
        if (!v70) {
          uint64_t v69 = -1;
        }
        v60 |= ((uint64_t)(*(void *)(*(void *)this + 8 * ((unsigned __int16)v67 >> 6)) >> v67 << 63) >> 63) & v69;
        int v71 = *v65++;
        v67 += v71;
      }
      while (v71);
    }
    else
    {
LABEL_75:
      int v15 = 0;
    }
    if (v29 != (void *)v75) {
      free(v29);
    }
  }
  return v15;
}

uint64_t llvm::rdf::RegisterAggr::clearIn(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(*(void *)v6 + 44);
  int v15 = v18;
  int v17 = 6;
  if ((v7 + 63) >= 0x1C0)
  {
    unsigned int v16 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v7 + 63) >= 0x40) {
    bzero(v18, 8 * ((v7 + 63) >> 6));
  }
  unsigned int v16 = (v7 + 63) >> 6;
  v18[12] = v7;
  uint64_t v19 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v15, a2, a3);
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= v16) {
    uint64_t v9 = v16;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v9)
  {
    int v10 = *(uint64_t **)a1;
    unsigned int v11 = v15;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ &= ~v12;
      --v9;
    }
    while (v9);
  }
  uint64_t RegRef = llvm::rdf::RegisterAggr::makeRegRef((llvm::rdf::RegisterAggr *)&v15);
  if (v15 != v18) {
    free(v15);
  }
  return RegRef;
}

llvm::raw_ostream *llvm::rdf::RegisterAggr::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v4 >= *((void *)a2 + 3))
  {
    this = llvm::raw_ostream::write(a2, 123);
  }
  else
  {
    *((void *)a2 + 4) = v4 + 1;
    *uint64_t v4 = 123;
  }
  int v5 = *(_DWORD *)(v3 + 64);
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = -v5;
    int v8 = v5 - 1;
    uint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> v7;
    uint64_t v11 = v8 & 0xFFFFFFC0;
    while (1)
    {
      uint64_t v13 = *v9++;
      uint64_t v12 = v13;
      unint64_t v14 = v11 == v6 ? v10 : -1;
      unint64_t v15 = v14 & v12;
      if (v15) {
        break;
      }
      v6 += 64;
      if (v11 + 64 == v6) {
        goto LABEL_37;
      }
    }
    int v16 = __clz(__rbit64(v15)) + v6;
    if ((v16 & 0x80000000) == 0)
    {
      int v17 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615558;
      do
      {
        uint64_t v18 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v18 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 32);
        }
        else
        {
          *((void *)a2 + 4) = v18 + 1;
          unsigned char *v18 = 32;
        }
        v37[2] = **(void **)(v3 + 72);
        uint64_t v38 = (llvm::raw_ostream *)v37;
        v37[0] = &unk_1F2615528;
        v37[1] = v16;
        v17((llvm::raw_ostream *)v37, a2);
        this = v38;
        if (v38 == (llvm::raw_ostream *)v37)
        {
          this = (llvm::raw_ostream *)(*(uint64_t (**)(void *))(v37[0] + 32))(v37);
        }
        else if (v38)
        {
          this = (llvm::raw_ostream *)(*(uint64_t (**)(void))(*(void *)v38 + 40))();
        }
        unsigned int v19 = v16 + 1;
        int v20 = *(_DWORD *)(v3 + 64);
        if (v16 + 1 == v20) {
          break;
        }
        unsigned int v21 = v19 >> 6;
        unsigned int v22 = v20 - 1;
        if (v19 >> 6 > (v20 - 1) >> 6) {
          break;
        }
        uint64_t v23 = 0;
        uint64_t v24 = v22 >> 6;
        int v26 = v19 & 0x3F;
        BOOL v25 = v26 == 0;
        unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
        unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v22;
        uint64_t v29 = v25 ? -1 : ~v27;
        int v30 = -64 * v21;
        uint64_t v31 = v24 - v21;
        uint64_t v32 = *(void *)v3 + 8 * v21;
        while (1)
        {
          uint64_t v33 = v23 ? -1 : v29;
          unint64_t v34 = v31 == v23 ? v28 : -1;
          unint64_t v35 = v33 & v34 & *(void *)(v32 + 8 * v23);
          if (v35) {
            break;
          }
          v30 -= 64;
          if (v31 + 1 == ++v23) {
            goto LABEL_37;
          }
        }
        int v16 = __clz(__rbit64(v35)) - v30;
      }
      while (v16 >= 0);
    }
  }
LABEL_37:
  BOOL v36 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v36 <= 1uLL) {
    return llvm::raw_ostream::write(a2, " }", 2uLL);
  }
  *BOOL v36 = 32032;
  *((void *)a2 + 4) += 2;
  return this;
}

uint64_t ***llvm::rdf::RegisterAggr::rr_iterator::rr_iterator(uint64_t ***a1, uint64_t a2, char a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t **)(a1 + 1);
  *a1 = (uint64_t **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  a1[5] = (uint64_t **)a2;
  int v5 = *(_DWORD *)(a2 + 64);
  if (!v5) {
    goto LABEL_41;
  }
  uint64_t v7 = 0;
  int v8 = *(uint64_t **)a2;
  uint64_t v9 = (v5 - 1) & 0xFFFFFFC0;
  while (1)
  {
    uint64_t v11 = *v8++;
    uint64_t v10 = v11;
    unint64_t v12 = v9 == v7 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v5 : -1;
    unint64_t v13 = v12 & v10;
    if (v13) {
      break;
    }
    v7 += 64;
    if (v9 + 64 == v7) {
      goto LABEL_41;
    }
  }
  int v14 = __clz(__rbit64(v13)) + v7;
  if (v14 < 0)
  {
LABEL_41:
    LODWORD(v15) = 0;
  }
  else
  {
    LODWORD(v15) = 0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a2 + 72) + 56) + 16 * v14;
      unsigned int v17 = *(_DWORD *)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      if (v17) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      int v20 = *v4;
      unsigned int v21 = v4;
      unsigned int v22 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            unsigned int v22 = (uint64_t **)v20;
            unsigned int v23 = *((_DWORD *)v20 + 8);
            if (v23 <= v17) {
              break;
            }
            int v20 = *v22;
            unsigned int v21 = v22;
            if (!*v22) {
              goto LABEL_21;
            }
          }
          if (v23 >= v17) {
            break;
          }
          int v20 = v22[1];
          if (!v20)
          {
            unsigned int v21 = v22 + 1;
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        uint64_t v24 = (uint64_t *)v22;
        unsigned int v22 = (uint64_t **)operator new(0x30uLL);
        *((_DWORD *)v22 + 8) = v17;
        v22[5] = 0;
        *unsigned int v22 = 0;
        v22[1] = 0;
        v22[2] = v24;
        *unsigned int v21 = (uint64_t *)v22;
        BOOL v25 = **a1;
        int v26 = (uint64_t *)v22;
        if (v25)
        {
          *a1 = (uint64_t **)v25;
          int v26 = *v21;
        }
        sub_1CB8358B8((uint64_t *)a1[1], v26);
        uint64_t v15 = (uint64_t)a1[2] + 1;
        a1[2] = (uint64_t **)v15;
        int v5 = *(_DWORD *)(a2 + 64);
      }
      v22[5] = (uint64_t *)((unint64_t)v22[5] | v19);
      unsigned int v27 = v14 + 1;
      if (v14 + 1 == v5) {
        break;
      }
      unsigned int v28 = v27 >> 6;
      unsigned int v29 = v5 - 1;
      if (v27 >> 6 > (v5 - 1) >> 6) {
        break;
      }
      uint64_t v30 = 0;
      uint64_t v31 = v29 >> 6;
      int v33 = v27 & 0x3F;
      BOOL v32 = v33 == 0;
      unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
      unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v29;
      uint64_t v36 = v32 ? -1 : ~v34;
      int v37 = -64 * v28;
      uint64_t v38 = v31 - v28;
      uint64_t v39 = *(void *)a2 + 8 * v28;
      while (1)
      {
        uint64_t v40 = v30 ? -1 : v36;
        unint64_t v41 = v38 == v30 ? v35 : -1;
        unint64_t v42 = v40 & v41 & *(void *)(v39 + 8 * v30);
        if (v42) {
          break;
        }
        v37 -= 64;
        if (v38 + 1 == ++v30) {
          goto LABEL_42;
        }
      }
      int v14 = __clz(__rbit64(v42)) - v37;
    }
    while (v14 >= 0);
  }
LABEL_42:
  if ((a3 & 1) == 0)
  {
    LODWORD(v15) = 0;
    uint64_t v4 = *a1;
  }
  a1[3] = v4;
  *((_DWORD *)a1 + 8) = v15;
  return a1;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, llvm::rdf::RegisterAggr *this)
{
  return a1;
}

void llvm::initializeReachingDefAnalysisPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA61BE98, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC40ABD8;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EA61BE98, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC40ABD8()
{
}

char *llvm::ReachingDefAnalysis::enterBasicBlock(llvm::ReachingDefAnalysis *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v2 = a2;
  unsigned int v4 = *((_DWORD *)a2 + 6);
  uint64_t v5 = *((void *)this + 65);
  uint64_t v6 = (void *)(v5 + 24 * v4);
  unint64_t v7 = *((unsigned int *)this + 86);
  uint64_t v9 = (char **)(v6 + 1);
  int v8 = (char *)v6[1];
  uint64_t v10 = (char *)*v6;
  uint64_t v11 = (uint64_t)&v8[-*v6];
  unint64_t v12 = v11 >> 3;
  if (v7 > v11 >> 3)
  {
    unint64_t v13 = v7 - v12;
    uint64_t v14 = v5 + 24 * v4;
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v16 = (char **)(v14 + 16);
    uint64_t v15 = v17;
    if (v7 - v12 <= (v17 - (uint64_t)v8) >> 3)
    {
      bzero(v8, 8 * v13);
      *uint64_t v9 = &v8[8 * v13];
      goto LABEL_23;
    }
    uint64_t v61 = v16;
    uint64_t v18 = v15 - (void)v10;
    if (v18 >> 2 > v7) {
      unint64_t v7 = v18 >> 2;
    }
    BOOL v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v19) {
      unint64_t v20 = v7;
    }
    if (v20 >> 61) {
      sub_1CB833614();
    }
    unint64_t v59 = v20;
    unsigned int v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v12];
    uint64_t v60 = &v21[8 * v59];
    bzero(v22, 8 * v13);
    unsigned int v23 = &v21[8 * v13 + v11];
    if (v8 == v10)
    {
      *uint64_t v6 = v22;
      *uint64_t v9 = v23;
      *uint64_t v61 = v60;
      uint64_t v2 = a2;
      if (!v8) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v24 = v8;
      do
      {
        uint64_t v25 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v22 - 1) = v25;
        v22 -= 8;
        *(void *)uint64_t v24 = 0;
      }
      while (v24 != v10);
      *uint64_t v6 = v22;
      *uint64_t v9 = v23;
      *uint64_t v61 = v60;
      uint64_t v2 = a2;
      do
      {
        v8 -= 8;
        sub_1CC40F97C((uint64_t *)v8);
      }
      while (v8 != v10);
      int v8 = v10;
      if (!v10) {
        goto LABEL_23;
      }
    }
    operator delete(v8);
    goto LABEL_23;
  }
  if (v7 < v12)
  {
    int v26 = &v10[8 * v7];
    while (v8 != v26)
    {
      v8 -= 8;
      sub_1CC40F97C((uint64_t *)v8);
    }
    *uint64_t v9 = v26;
  }
LABEL_23:
  *((_DWORD *)this + 122) = 0;
  unsigned int v27 = (void *)((char *)this + 352);
  BOOL result = (char *)*((void *)this + 44);
  if (result == *((char **)this + 45))
  {
    unint64_t v29 = *((unsigned int *)this + 86);
    uint64_t v30 = *((void *)this + 46);
    if (v29 <= (v30 - (uint64_t)result) >> 2)
    {
      unint64_t v34 = &result[4 * v29];
      if (v29)
      {
        uint64_t v36 = 0;
        do
        {
          *(_DWORD *)&result[v36] = *((_DWORD *)this + 158);
          v36 += 4;
        }
        while (4 * v29 != v36);
      }
    }
    else
    {
      if (result)
      {
        *((void *)this + 45) = result;
        operator delete(result);
        uint64_t v30 = 0;
        *unsigned int v27 = 0;
        *((void *)this + 45) = 0;
        *((void *)this + 46) = 0;
      }
      uint64_t v31 = v30 >> 1;
      if (v30 >> 1 <= v29) {
        uint64_t v31 = v29;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32 >> 62) {
        abort();
      }
      BOOL result = (char *)operator new(4 * v32);
      uint64_t v33 = 0;
      *((void *)this + 44) = result;
      *((void *)this + 46) = &result[4 * v32];
      unint64_t v34 = &result[4 * v29];
      int v35 = *((_DWORD *)this + 158);
      do
      {
        *(_DWORD *)&result[v33] = v35;
        v33 += 4;
      }
      while (4 * v29 != v33);
    }
    *((void *)this + 45) = v34;
  }
  uint64_t v37 = *((void *)v2 + 8);
  uint64_t v38 = *((void *)v2 + 9);
  if (v37 == v38)
  {
    unint64_t v49 = (_WORD *)*((void *)v2 + 19);
    for (unsigned int i = (_WORD *)*((void *)v2 + 20); v49 != i; v49 += 8)
    {
      uint64_t v50 = *((void *)this + 32);
      if (v50) {
        uint64_t v51 = (void *)(v50 + 8);
      }
      else {
        uint64_t v51 = 0;
      }
      unint64_t v52 = *(unsigned int *)(*v51 + 24 * (unsigned __int16)*v49 + 16);
      unint64_t v53 = (_WORD *)(v51[6] + ((v52 >> 3) & 0x1FFFFFFE));
      __int16 v55 = *v53;
      uint64_t v54 = v53 + 1;
      unsigned __int16 v56 = v55 + (v52 & 0xF) * *v49;
      do
      {
        unsigned __int16 v57 = v56;
        if (*(_DWORD *)(*v27 + 4 * v56) != -1)
        {
          *(_DWORD *)(*v27 + 4 * v56) = -1;
          BOOL result = (char *)sub_1CC40B04C((unint64_t *)(*(void *)(*((void *)this + 65) + 24 * v4) + 8 * v56), -2);
        }
        int v58 = *v54++;
        unsigned __int16 v56 = v58 + v57;
      }
      while (v58);
    }
  }
  else
  {
    uint64_t v39 = *((void *)this + 47);
    do
    {
      uint64_t v40 = (uint64_t *)(v39 + 24 * *(int *)(*(void *)v37 + 24));
      uint64_t v41 = *v40;
      if (*v40 != v40[1] && *((_DWORD *)this + 86))
      {
        unsigned int v42 = 0;
        do
        {
          int v43 = *(_DWORD *)&result[4 * v42];
          if (v43 <= *(_DWORD *)(v41 + 4 * v42)) {
            int v43 = *(_DWORD *)(v41 + 4 * v42);
          }
          *(_DWORD *)&result[4 * v42++] = v43;
        }
        while (v42 != *((_DWORD *)this + 86));
      }
      v37 += 8;
    }
    while (v37 != v38);
    int v44 = *((_DWORD *)this + 86);
    if (v44)
    {
      unsigned int v45 = 0;
      do
      {
        uint64_t v46 = v45;
        uint64_t v47 = *(int *)(*((void *)this + 44) + 4 * v45);
        if (v47 != *((_DWORD *)this + 158))
        {
          BOOL result = (char *)sub_1CC40B04C((unint64_t *)(*(void *)(*((void *)this + 65) + 24 * v4) + 8 * v46), (4 * v47) | 2);
          int v44 = *((_DWORD *)this + 86);
        }
        unsigned int v45 = v46 + 1;
      }
      while (v46 + 1 != v44);
    }
  }
  return result;
}

unint64_t *sub_1CC40B04C(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if (*result > 1)
  {
    if ((v2 & 1) == 0) {
      operator new();
    }
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    unsigned int v4 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (v4 >= *(_DWORD *)(v3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  else
  {
    *BOOL result = a2 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

const void **llvm::ReachingDefAnalysis::leaveBasicBlock(const void **this, llvm::MachineBasicBlock *a2)
{
  unint64_t v2 = this;
  unsigned int v3 = *((_DWORD *)a2 + 6);
  unsigned int v4 = this[47];
  uint64_t v5 = (const void ***)&v4[3 * v3];
  if (v5 == (const void ***)(this + 44)) {
    goto LABEL_23;
  }
  uint64_t v6 = (char *)this[44];
  unint64_t v7 = this[45];
  size_t v8 = v7 - v6;
  unint64_t v9 = (v7 - v6) >> 2;
  uint64_t v10 = &v4[3 * v3];
  uint64_t v13 = v10[2];
  unint64_t v12 = v10 + 2;
  uint64_t v11 = v13;
  uint64_t v14 = (char *)*v5;
  if (v9 > (v13 - (uint64_t)*v5) >> 2)
  {
    if (v14)
    {
      v4[3 * v3 + 1] = v14;
      operator delete(v14);
      uint64_t v11 = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      void v5[2] = 0;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      goto LABEL_29;
    }
    uint64_t v15 = v11 >> 1;
    if (v11 >> 1 <= v9) {
      uint64_t v15 = (v7 - v6) >> 2;
    }
    unint64_t v16 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v15;
    if (v16 >> 62) {
LABEL_29:
    }
      abort();
    this = (const void **)operator new(4 * v16);
    uint64_t v14 = (char *)this;
    *uint64_t v5 = this;
    uint64_t v17 = &v4[3 * v3];
    v17[1] = this;
    uint64_t v18 = (void **)(v17 + 1);
    void *v12 = (char *)this + 4 * v16;
    if (v7 != v6) {
      this = (const void **)memcpy(this, v6, v7 - v6);
    }
    goto LABEL_22;
  }
  BOOL v19 = &v4[3 * v3];
  unsigned int v21 = (char *)v19[1];
  uint64_t v18 = (void **)(v19 + 1);
  unint64_t v20 = v21;
  size_t v22 = v21 - v14;
  unint64_t v23 = (v21 - v14) >> 2;
  if (v23 < v9)
  {
    uint64_t v24 = &v6[4 * v23];
    if (v20 != v14)
    {
      this = (const void **)memmove(v14, this[44], v22);
      uint64_t v14 = (char *)*v18;
    }
    size_t v8 = v7 - v24;
    if (v7 == v24) {
      goto LABEL_22;
    }
    uint64_t v25 = v14;
    int v26 = v24;
    goto LABEL_21;
  }
  if (v7 != v6)
  {
    uint64_t v25 = v14;
    int v26 = (char *)v2[44];
LABEL_21:
    this = (const void **)memmove(v25, v26, v8);
  }
LABEL_22:
  unsigned char *v18 = &v14[v8];
  unsigned int v4 = v2[47];
LABEL_23:
  unsigned int v27 = &v4[3 * v3];
  unsigned int v28 = (_DWORD *)*v27;
  unint64_t v29 = (_DWORD *)v27[1];
  while (v28 != v29)
  {
    if (*v28 != *((_DWORD *)v2 + 158)) {
      *v28 -= *((_DWORD *)v2 + 122);
    }
    ++v28;
  }
  v2[45] = v2[44];
  return this;
}

void *llvm::ReachingDefAnalysis::processDefs(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2)
{
  size_t v22 = a2;
  uint64_t v3 = *((unsigned int *)a2 + 10);
  if (v3)
  {
    unsigned int v4 = (_DWORD *)*((void *)a2 + 4);
    uint64_t v5 = &v4[8 * v3];
    unsigned int v6 = *(_DWORD *)(*((void *)a2 + 3) + 24);
    do
    {
      unsigned int v7 = v4[1];
      if ((*v4 & 0x10000FF) == 0x1000000 && v7 != 0)
      {
        uint64_t v9 = *((void *)this + 32);
        if (v9) {
          uint64_t v10 = (void *)(v9 + 8);
        }
        else {
          uint64_t v10 = 0;
        }
        unint64_t v11 = *(unsigned int *)(*v10 + 24 * v7 + 16);
        unint64_t v12 = (_WORD *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
        __int16 v14 = *v12;
        uint64_t v13 = v12 + 1;
        unsigned __int16 v15 = v14 + (v11 & 0xF) * v7;
        do
        {
          uint64_t v16 = v15;
          uint64_t v17 = *((void *)this + 44);
          int v18 = *((_DWORD *)this + 122);
          if (*(_DWORD *)(v17 + 4 * v16) != v18)
          {
            *(_DWORD *)(v17 + 4 * v16) = v18;
            sub_1CC40B04C((unint64_t *)(*(void *)(*((void *)this + 65) + 24 * v6) + 8 * v16), (4 * *((int *)this + 122)) | 2);
          }
          int v19 = *v13++;
          unsigned __int16 v15 = v19 + v16;
        }
        while (v19);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  int v20 = *((_DWORD *)this + 122);
  BOOL result = sub_1CD3CDD24((uint64_t *)this + 62, &v22);
  *((_DWORD *)result + 2) = v20;
  ++*((_DWORD *)this + 122);
  return result;
}

unint64_t *llvm::ReachingDefAnalysis::reprocessBasicBlock(unint64_t *this, llvm::MachineBasicBlock *a2)
{
  unint64_t v2 = this;
  uint64_t v3 = (char *)a2 + 48;
  uint64_t v4 = *((void *)a2 + 7);
  if ((llvm::MachineBasicBlock *)v4 != (llvm::MachineBasicBlock *)((char *)a2 + 48))
  {
    while (1)
    {
      int v5 = **(unsigned __int16 **)(v4 + 16);
      if ((v5 - 13) >= 5 && v5 != 23) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if ((char *)v4 == v3) {
        goto LABEL_19;
      }
    }
  }
  if ((char *)v4 == v3)
  {
LABEL_19:
    int v28 = 0;
  }
  else
  {
    int v28 = 0;
LABEL_11:
    ++v28;
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if ((char *)v4 == v3) {
        break;
      }
      int v7 = **(unsigned __int16 **)(v4 + 16);
      if ((v7 - 13) >= 5 && v7 != 23)
      {
        if ((char *)v4 != v3) {
          goto LABEL_11;
        }
        break;
      }
    }
  }
  uint64_t v9 = *((void *)a2 + 8);
  uint64_t v27 = *((void *)a2 + 9);
  if (v9 != v27)
  {
    unsigned int v10 = *((_DWORD *)a2 + 6);
    unint64_t v11 = this[47];
    while (1)
    {
      unint64_t v12 = (void *)(v11 + 24 * *(int *)(*(void *)v9 + 24));
      if (*v12 != v12[1])
      {
        if (*((_DWORD *)v2 + 86)) {
          break;
        }
      }
LABEL_49:
      v9 += 8;
      if (v9 == v27) {
        return this;
      }
    }
    unsigned int v13 = 0;
    while (1)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(int *)(*v12 + 4 * v13);
      if (v15 != *((_DWORD *)v2 + 158))
      {
        this = (unint64_t *)(*(void *)(v2[65] + 24 * v10) + 8 * v13);
        unint64_t v16 = *this;
        if (*this)
        {
          int v18 = *(unint64_t **)(v16 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v17 = &v18[*(unsigned int *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8)];
        }
        else
        {
          uint64_t v17 = &this[v16 > 1];
          int v18 = (unint64_t *)(*(void *)(v2[65] + 24 * v10) + 8 * v14);
        }
        if (v18 == v17 || (*(_DWORD *)v18 & 0x80000000) == 0)
        {
          uint64_t v19 = (4 * v15) | 2;
          if (v16)
          {
            unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v22 = *(void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
            uint64_t v23 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8);
            if ((unint64_t *)(v22 + 8 * v23) == v18) {
              goto LABEL_39;
            }
            if (v23 >= *(_DWORD *)(v21 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v24 = (uint64_t *)(v22 + 8 * (((uint64_t)v18 - v22) >> 3));
            uint64_t v25 = (void *)(v22 + 8 * v23);
            *uint64_t v25 = *(v25 - 1);
            if (v25 - 1 != v24)
            {
              this = (unint64_t *)memmove(v24 + 1, v24, (char *)(v25 - 1) - (char *)v24);
              LODWORD(v23) = *(_DWORD *)(v21 + 8);
            }
            *(_DWORD *)(v21 + 8) = v23 + 1;
            *uint64_t v24 = v19;
          }
          else
          {
            if (&this[v16 > 1] != v18)
            {
              uint64_t v20 = v16 & 0xFFFFFFFFFFFFFFFELL;
              *this = v19;
              goto LABEL_40;
            }
LABEL_39:
            uint64_t v20 = (4 * v15) | 2;
LABEL_40:
            this = sub_1CC40B04C(this, v20);
          }
          unint64_t v11 = v2[47];
LABEL_42:
          uint64_t v26 = *(void *)(v11 + 24 * v10);
          if (*(_DWORD *)(v26 + 4 * v14) < (int)v15 - v28) {
            *(_DWORD *)(v26 + 4 * v14) = v15 - v28;
          }
          goto LABEL_46;
        }
        if ((int)v15 > *(int *)v18 >> 2)
        {
          unint64_t *v18 = (4 * v15) | 2;
          goto LABEL_42;
        }
      }
LABEL_46:
      unsigned int v13 = v14 + 1;
      if (v14 + 1 == *((_DWORD *)v2 + 86)) {
        goto LABEL_49;
      }
    }
  }
  return this;
}

unint64_t *llvm::ReachingDefAnalysis::processBasicBlock(llvm::ReachingDefAnalysis *this, uint64_t a2)
{
  uint64_t v3 = *(llvm::MachineBasicBlock **)a2;
  if (*(unsigned char *)(a2 + 8))
  {
    llvm::ReachingDefAnalysis::enterBasicBlock(this, *(llvm::MachineBasicBlock **)a2);
    uint64_t v4 = (char *)v3 + 48;
    uint64_t v5 = *((void *)v3 + 7);
    if ((llvm::MachineBasicBlock *)v5 != (llvm::MachineBasicBlock *)((char *)v3 + 48))
    {
      while (1)
      {
        int v6 = **(unsigned __int16 **)(v5 + 16);
        if ((v6 - 13) >= 5 && v6 != 23) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
        if ((char *)v5 == v4) {
          goto LABEL_20;
        }
      }
    }
LABEL_19:
    if ((char *)v5 != v4)
    {
      llvm::ReachingDefAnalysis::processDefs(this, (llvm::MachineInstr *)v5);
      while (1)
      {
        uint64_t v5 = *(void *)(v5 + 8);
        if ((char *)v5 == v4) {
          break;
        }
        int v10 = **(unsigned __int16 **)(v5 + 16);
        if ((v10 - 13) >= 5 && v10 != 23) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    return (unint64_t *)llvm::ReachingDefAnalysis::leaveBasicBlock((const void **)this, v3);
  }
  else
  {
    size_t v8 = *(llvm::MachineBasicBlock **)a2;
    return llvm::ReachingDefAnalysis::reprocessBasicBlock((unint64_t *)this, v8);
  }
}

uint64_t llvm::ReachingDefAnalysis::runOnMachineFunction(llvm::ReachingDefAnalysis *this, llvm::MachineFunction *a2)
{
  *((void *)this + 31) = a2;
  *((void *)this + 32) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 176))(*((void *)a2 + 2));
  llvm::ReachingDefAnalysis::init(this);
  uint64_t v3 = *((unsigned int *)this + 68);
  if (v3)
  {
    uint64_t v4 = (long long *)*((void *)this + 33);
    uint64_t v5 = 16 * v3;
    do
    {
      long long v6 = *v4++;
      long long v8 = v6;
      llvm::ReachingDefAnalysis::processBasicBlock(this, (uint64_t)&v8);
      v5 -= 16;
    }
    while (v5);
  }
  return 0;
}

void llvm::ReachingDefAnalysis::init(llvm::ReachingDefAnalysis *this)
{
  v46[8] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (llvm::MachineFunction *)*((void *)this + 31);
  *((_DWORD *)this + 86) = *(_DWORD *)(*((void *)this + 32) + 44);
  uint64_t v3 = (*((void *)v2 + 14) - *((void *)v2 + 13)) >> 3;
  unint64_t v4 = v3;
  unint64_t v5 = *((unsigned int *)this + 132);
  if (v3 != v5)
  {
    if (v3 >= v5)
    {
      unint64_t v9 = *((unsigned int *)this + 133);
      if (v3 > v9)
      {
        if (v9 == -1) {
          goto LABEL_77;
        }
        unint64_t v10 = (2 * v9) | 1;
        if (v10 <= v3) {
          unint64_t v10 = v3;
        }
        if (v10 >= 0xFFFFFFFF) {
          uint64_t v11 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v11 = v10;
        }
        unint64_t v12 = malloc_type_malloc(24 * v11, 0x4065EBACuLL);
        if (!v12) {
          goto LABEL_78;
        }
        unsigned int v13 = v12;
        uint64_t v14 = (char *)*((void *)this + 65);
        uint64_t v15 = *((unsigned int *)this + 132);
        if (v15)
        {
          unint64_t v16 = &v14[24 * v15];
          uint64_t v17 = v13;
          do
          {
            void *v17 = 0;
            v17[1] = 0;
            void v17[2] = 0;
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v14;
            void v17[2] = *((void *)v14 + 2);
            *(void *)uint64_t v14 = 0;
            *((void *)v14 + 1) = 0;
            *((void *)v14 + 2) = 0;
            v14 += 24;
            v17 += 3;
          }
          while (v14 != v16);
          uint64_t v18 = 24 * v15;
          uint64_t v19 = *((void *)this + 65) - 24;
          do
          {
            v45[0] = (void *)(v19 + v18);
            sub_1CC40F8F8((void ***)v45);
            v18 -= 24;
          }
          while (v18);
          uint64_t v14 = (char *)*((void *)this + 65);
        }
        if (v14 != (char *)this + 536) {
          free(v14);
        }
        *((void *)this + 65) = v13;
        *((_DWORD *)this + 133) = v11;
        unint64_t v5 = *((unsigned int *)this + 132);
      }
      if (v3 != v5) {
        bzero((void *)(*((void *)this + 65) + 24 * v5), 24 * ((24 * (v3 - v5) - 24) / 0x18) + 24);
      }
    }
    else
    {
      uint64_t v6 = 3 * v5;
      uint64_t v7 = 24 * v3 - 8 * v6;
      long long v8 = (char *)(*((void *)this + 65) + 8 * v6 - 24);
      do
      {
        v45[0] = v8;
        sub_1CC40F8F8((void ***)v45);
        v8 -= 24;
        v7 += 24;
      }
      while (v7);
    }
    *((_DWORD *)this + 132) = v3;
    unint64_t v2 = (llvm::MachineFunction *)*((void *)this + 31);
    uint64_t v3 = (*((void *)v2 + 14) - *((void *)v2 + 13)) >> 3;
    unint64_t v4 = v3;
  }
  unint64_t v20 = *((unsigned int *)this + 96);
  if (v4 == v20) {
    goto LABEL_55;
  }
  if (v4 >= v20)
  {
    unint64_t v25 = *((unsigned int *)this + 97);
    if (v4 <= v25)
    {
LABEL_52:
      if (v4 != v20) {
        bzero((void *)(*((void *)this + 47) + 24 * v20), 24 * ((24 * (v4 - v20) - 24) / 0x18) + 24);
      }
      goto LABEL_54;
    }
    if (v25 != -1)
    {
      unint64_t v26 = (2 * v25) | 1;
      if (v26 <= v4) {
        unint64_t v26 = v4;
      }
      if (v26 >= 0xFFFFFFFF) {
        uint64_t v27 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v27 = v26;
      }
      int v28 = malloc_type_malloc(24 * v27, 0x4065EBACuLL);
      if (v28)
      {
        unint64_t v29 = v28;
        uint64_t v30 = (char *)*((void *)this + 47);
        uint64_t v31 = *((unsigned int *)this + 96);
        if (v31)
        {
          unint64_t v32 = &v30[24 * v31];
          uint64_t v33 = v29;
          do
          {
            *uint64_t v33 = 0;
            v33[1] = 0;
            void v33[2] = 0;
            *(_OWORD *)uint64_t v33 = *(_OWORD *)v30;
            void v33[2] = *((void *)v30 + 2);
            *(void *)uint64_t v30 = 0;
            *((void *)v30 + 1) = 0;
            *((void *)v30 + 2) = 0;
            v30 += 24;
            v33 += 3;
          }
          while (v30 != v32);
          uint64_t v34 = *((void *)this + 47);
          uint64_t v35 = 24 * v31;
          do
          {
            uint64_t v36 = *(void **)(v34 + v35 - 24);
            if (v36)
            {
              *(void *)(v34 + v35 - 16) = v36;
              operator delete(v36);
            }
            v35 -= 24;
          }
          while (v35);
          uint64_t v30 = (char *)*((void *)this + 47);
        }
        if (v30 != (char *)this + 392) {
          free(v30);
        }
        *((void *)this + 47) = v29;
        *((_DWORD *)this + 97) = v27;
        unint64_t v20 = *((unsigned int *)this + 96);
        goto LABEL_52;
      }
LABEL_78:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
LABEL_77:
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  uint64_t v21 = 3 * v20;
  uint64_t v22 = *((void *)this + 47) + 8 * v21 - 24;
  uint64_t v23 = 24 * v4 - 8 * v21;
  do
  {
    uint64_t v24 = *(void **)v22;
    if (*(void *)v22)
    {
      *(void *)(v22 + 8) = v24;
      operator delete(v24);
    }
    v22 -= 24;
    v23 += 24;
  }
  while (v23);
LABEL_54:
  *((_DWORD *)this + 96) = v3;
  unint64_t v2 = (llvm::MachineFunction *)*((void *)this + 31);
LABEL_55:
  v45[0] = v46;
  v45[1] = (void *)0x400000000;
  llvm::LoopTraversal::traverse((llvm::LoopTraversal *)v45, v2, (uint64_t)&__src);
  uint64_t v37 = (void **)((char *)this + 264);
  uint64_t v38 = __src;
  if ((void **)((char *)this + 264) != &__src)
  {
    if (__src == v44)
    {
      int v40 = v43;
      uint64_t v41 = *((unsigned int *)this + 68);
      if (v41 >= v43)
      {
        if (v43) {
          memmove(*v37, __src, 16 * v43 - 6);
        }
      }
      else
      {
        if (*((_DWORD *)this + 69) < v43)
        {
          *((_DWORD *)this + 68) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v41) {
          memmove(*v37, __src, 16 * v41 - 6);
        }
        else {
          uint64_t v41 = 0;
        }
        if (v41 != v43) {
          memcpy((char *)*v37 + 16 * v41, (char *)__src + 16 * v41, 16 * v43 - 16 * v41);
        }
      }
      *((_DWORD *)this + 68) = v40;
    }
    else
    {
      uint64_t v39 = (char *)*((void *)this + 33);
      if (v39 != (char *)this + 280)
      {
        free(v39);
        uint64_t v38 = __src;
      }
      *((void *)this + 33) = v38;
      *((void *)this + 34) = v43;
      __src = v44;
      HIDWORD(v43) = 0;
    }
    LODWORD(v43) = 0;
    uint64_t v38 = __src;
  }
  if (v38 != v44) {
    free(v38);
  }
  if (v45[0] != v46) {
    free(v45[0]);
  }
}

unint64_t *llvm::ReachingDefAnalysis::traverse(unint64_t *this)
{
  uint64_t v1 = *((unsigned int *)this + 68);
  if (v1)
  {
    unint64_t v2 = (llvm::ReachingDefAnalysis *)this;
    uint64_t v3 = (long long *)this[33];
    uint64_t v4 = 16 * v1;
    do
    {
      long long v5 = *v3++;
      long long v6 = v5;
      this = llvm::ReachingDefAnalysis::processBasicBlock(v2, (uint64_t)&v6);
      v4 -= 16;
    }
    while (v4);
  }
  return this;
}

void llvm::ReachingDefAnalysis::releaseMemory(llvm::ReachingDefAnalysis *this)
{
  uint64_t v2 = *((unsigned int *)this + 96);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 47);
    uint64_t v4 = 24 * v2;
    do
    {
      long long v5 = *(void **)(v3 + v4 - 24);
      if (v5)
      {
        *(void *)(v3 + v4 - 16) = v5;
        operator delete(v5);
      }
      v4 -= 24;
    }
    while (v4);
  }
  *((_DWORD *)this + 96) = 0;
  uint64_t v6 = *((unsigned int *)this + 132);
  if (v6)
  {
    uint64_t v7 = 24 * v6;
    uint64_t v8 = *((void *)this + 65) - 24;
    do
    {
      uint64_t v23 = (void **)(v8 + v7);
      sub_1CC40F8F8(&v23);
      v7 -= 24;
    }
    while (v7);
  }
  *((_DWORD *)this + 132) = 0;
  unint64_t v9 = (void *)((char *)this + 496);
  int v10 = *((_DWORD *)this + 126);
  if (v10)
  {
    unsigned int v11 = *((_DWORD *)this + 128);
    if (v11 > 4 * v10 && v11 >= 0x41)
    {
      int v12 = 1 << (33 - __clz(v10 - 1));
      if (v12 <= 64) {
        int v13 = 64;
      }
      else {
        int v13 = v12;
      }
LABEL_18:
      if (v13 == v11)
      {
        *((void *)this + 63) = 0;
        uint64_t v14 = 16 * v11;
        uint64_t v15 = (void *)*((void *)this + 62);
        do
        {
          *uint64_t v15 = -4096;
          v15 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v9, 8);
        if (v13)
        {
          unint64_t v18 = (4 * v13 / 3u + 1) | ((unint64_t)(4 * v13 / 3u + 1) >> 1);
          unint64_t v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
          LODWORD(v19) = (((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8)) + 1;
          *((_DWORD *)this + 128) = v19;
          unint64_t v20 = operator new(16 * v19, (std::align_val_t)8uLL);
          *((void *)this + 62) = v20;
          *((void *)this + 63) = 0;
          uint64_t v21 = *((unsigned int *)this + 128);
          if (v21)
          {
            uint64_t v22 = 16 * v21;
            do
            {
              *unint64_t v20 = -4096;
              v20 += 2;
              v22 -= 16;
            }
            while (v22);
          }
        }
        else
        {
          *unint64_t v9 = 0;
          *((void *)this + 63) = 0;
          *((_DWORD *)this + 128) = 0;
        }
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 127)) {
      goto LABEL_26;
    }
    unsigned int v11 = *((_DWORD *)this + 128);
    if (v11 > 0x40)
    {
      int v13 = 0;
      goto LABEL_18;
    }
  }
  if (v11)
  {
    unint64_t v16 = (void *)*v9;
    uint64_t v17 = 16 * v11;
    do
    {
      *unint64_t v16 = -4096;
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  *((void *)this + 63) = 0;
LABEL_26:
  *((void *)this + 45) = *((void *)this + 44);
}

void llvm::ReachingDefAnalysis::reset(long long **this)
{
  (*((void (**)(long long **))*this + 11))(this);
  llvm::ReachingDefAnalysis::init((llvm::ReachingDefAnalysis *)this);
  uint64_t v2 = *((unsigned int *)this + 68);
  if (v2)
  {
    uint64_t v3 = this[33];
    uint64_t v4 = 16 * v2;
    do
    {
      long long v5 = *v3++;
      long long v6 = v5;
      llvm::ReachingDefAnalysis::processBasicBlock((llvm::ReachingDefAnalysis *)this, (uint64_t)&v6);
      v4 -= 16;
    }
    while (v4);
  }
}

uint64_t llvm::ReachingDefAnalysis::getReachingDef(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = a2;
  if (sub_1CD3C8538((uint64_t *)(a1 + 496), &v21, &v20)) {
    int v6 = *(_DWORD *)(v20 + 8);
  }
  else {
    int v6 = 0;
  }
  int v7 = *(_DWORD *)(a1 + 632);
  uint64_t v8 = *(void *)(a1 + 256);
  if (v8) {
    unint64_t v9 = (void *)(v8 + 8);
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v10 = *(unsigned int *)(*v9 + 24 * a3 + 16);
  unsigned int v11 = (_WORD *)(v9[6] + ((v10 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v12 = *v11 + (v10 & 0xF) * a3;
  LODWORD(result) = *(_DWORD *)(a1 + 632);
  do
  {
    uint64_t v14 = (unint64_t *)(*(void *)(*(void *)(a1 + 520) + 24 * *(unsigned int *)(*(void *)(a2 + 24) + 24))
                             + 8 * v12);
    unint64_t v15 = *v14;
    if (*v14)
    {
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v14 = *(unint64_t **)v17;
      uint64_t v16 = *(void *)v17 + 8 * *(unsigned int *)(v17 + 8);
    }
    else
    {
      uint64_t v16 = (uint64_t)&v14[v15 > 1];
    }
    while (v14 != (unint64_t *)v16)
    {
      int v18 = *(int *)v14 >> 2;
      if (v18 >= v6) {
        break;
      }
      ++v14;
      int v7 = v18;
    }
    if ((int)result <= v7) {
      uint64_t result = v7;
    }
    else {
      uint64_t result = result;
    }
    int v19 = (unsigned __int16)v11[1];
    ++v11;
    v12 += v19;
  }
  while (v19);
  return result;
}

uint64_t llvm::ReachingDefAnalysis::getReachingLocalMIDef(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  if ((llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, a2, a3) & 0x80000000) != 0) {
    return 0;
  }
  int v6 = *(llvm::MachineBasicBlock **)(a2 + 24);
  int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, a2, a3);

  return llvm::ReachingDefAnalysis::getInstFromId(a1, v6, ReachingDef);
}

BOOL llvm::ReachingDefAnalysis::hasLocalDefBefore(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (int)llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a3) >= 0;
}

uint64_t llvm::ReachingDefAnalysis::getInstFromId(llvm::ReachingDefAnalysis *this, llvm::MachineBasicBlock *a2, int a3)
{
  if (a3 < 0) {
    return 0;
  }
  uint64_t v3 = (char *)a2 + 48;
  uint64_t v4 = *((void *)a2 + 7);
  if ((llvm::MachineBasicBlock *)v4 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
    return 0;
  }
  int v7 = (uint64_t *)((char *)this + 496);
  while (1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v4;
    if (sub_1CD3C8538(v7, &v13, &v12))
    {
      uint64_t v8 = v12;
      uint64_t v9 = *((void *)this + 62);
      uint64_t v10 = *((unsigned int *)this + 128);
    }
    else
    {
      uint64_t v9 = *((void *)this + 62);
      uint64_t v10 = *((unsigned int *)this + 128);
      uint64_t v8 = v9 + 16 * v10;
    }
    if (v8 != v9 + 16 * v10 && *(_DWORD *)(v8 + 8) == a3) {
      break;
    }
    if (!v4 || (*(unsigned char *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
        uint64_t v4 = *(void *)(v4 + 8);
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if ((char *)v4 == v3) {
      return 0;
    }
  }
  return v4;
}

BOOL llvm::ReachingDefAnalysis::hasSameReachingDef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (*(void *)(a2 + 24) != *(void *)(a3 + 24)) {
    return 0;
  }
  int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a4);
  return ReachingDef == llvm::ReachingDefAnalysis::getReachingDef(a1, a3, a4);
}

uint64_t llvm::ReachingDefAnalysis::getClearance(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  if (sub_1CD3C8538((uint64_t *)(a1 + 496), &v9, &v8)) {
    int v6 = *(_DWORD *)(v8 + 8);
  }
  else {
    int v6 = 0;
  }
  return v6 - llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a3);
}

void llvm::ReachingDefAnalysis::getReachingLocalUses(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 24) + 48;
  uint64_t v9 = a2;
  while (1)
  {
LABEL_2:
    if (!v9 || (*(unsigned char *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
        uint64_t v9 = *(void *)(v9 + 8);
    }
    uint64_t v9 = *(void *)(v9 + 8);
    if (v9 == v7) {
      break;
    }
    if (**(unsigned __int16 **)(v9 + 16) - 13 >= 5)
    {
      if (llvm::ReachingDefAnalysis::getReachingLocalMIDef((llvm::ReachingDefAnalysis *)a1, v9, a3) != a2) {
        return;
      }
      uint64_t v10 = *(unsigned int *)(v9 + 40);
      if (v10)
      {
        uint64_t v11 = *(void *)(v9 + 32);
        uint64_t v12 = v11 + 32 * v10;
        while (!sub_1CC40C5A4(*(_DWORD *)v11, *(_DWORD *)(v11 + 4), a3, a1[32]))
        {
LABEL_46:
          v11 += 32;
          if (v11 == v12) {
            goto LABEL_2;
          }
        }
        uint64_t v13 = *(void *)(a4 + 8);
        uint64_t v14 = *(unsigned int *)(a4 + 20);
        if (v13 == *(void *)a4)
        {
          if (v14)
          {
            unint64_t v15 = 0;
            uint64_t v16 = 8 * v14;
            unint64_t v17 = *(uint64_t **)(a4 + 8);
            while (*v17 != v9)
            {
              if (*v17 == -2) {
                unint64_t v15 = v17;
              }
              ++v17;
              v16 -= 8;
              if (!v16)
              {
                if (!v15) {
                  goto LABEL_21;
                }
                *unint64_t v15 = v9;
                --*(_DWORD *)(a4 + 24);
                break;
              }
            }
LABEL_45:
            if ((*(_DWORD *)v11 >> 26) & ~HIBYTE(*(_DWORD *)v11)) {
              return;
            }
            goto LABEL_46;
          }
LABEL_21:
          unsigned int v18 = *(_DWORD *)(a4 + 16);
          if (v14 < v18)
          {
            *(_DWORD *)(a4 + 20) = v14 + 1;
            *(void *)(v13 + 8 * v14) = v9;
            goto LABEL_45;
          }
        }
        else
        {
          unsigned int v18 = *(_DWORD *)(a4 + 16);
        }
        if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a4 + 24)))
        {
          if (v18 >= 0x40) {
            v18 *= 2;
          }
          else {
            unsigned int v18 = 128;
          }
        }
        else if (v18 - v14 >= v18 >> 3)
        {
          goto LABEL_26;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v18);
        unsigned int v18 = *(_DWORD *)(a4 + 16);
        uint64_t v13 = *(void *)(a4 + 8);
LABEL_26:
        unsigned int v19 = v18 - 1;
        unsigned int v20 = (v18 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        uint64_t v21 = (uint64_t *)(v13 + 8 * v20);
        uint64_t v22 = *v21;
        if (*v21 == -1)
        {
          uint64_t v23 = 0;
LABEL_38:
          if (v23) {
            uint64_t v27 = v23;
          }
          else {
            uint64_t v27 = v21;
          }
          if (*v27 != v9)
          {
            if (*v27 == -2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            *uint64_t v27 = v9;
          }
        }
        else
        {
          uint64_t v23 = 0;
          int v24 = 1;
          while (v22 != v9)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v22 == -2;
            }
            if (v25) {
              uint64_t v23 = v21;
            }
            unsigned int v26 = v20 + v24++;
            unsigned int v20 = v26 & v19;
            uint64_t v21 = (uint64_t *)(v13 + 8 * (v26 & v19));
            uint64_t v22 = *v21;
            if (*v21 == -1) {
              goto LABEL_38;
            }
          }
        }
        goto LABEL_45;
      }
    }
  }
}

BOOL sub_1CC40C5A4(int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if ((a1 & 0x10000FF) != 0 || a2 == 0) {
    return 0;
  }
  if (a3 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (!(a2 >> 30) && a3 - 1 <= 0x3FFFFFFE) {
    return llvm::MCRegisterInfo::regsOverlap((void *)(a4 + 8), a2, a3);
  }
  return result;
}

uint64_t llvm::ReachingDefAnalysis::getLiveInUses(uint64_t a1, llvm::MachineBasicBlock *this, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = (char *)this + 48;
  uint64_t v9 = *((void *)this + 7);
  if ((llvm::MachineBasicBlock *)v9 != (llvm::MachineBasicBlock *)((char *)this + 48))
  {
    while (1)
    {
      int v10 = **(unsigned __int16 **)(v9 + 16);
      if ((v10 - 13) >= 5 && v10 != 23) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if ((char *)v9 == v8) {
        goto LABEL_60;
      }
    }
  }
  if ((char *)v9 == v8) {
    goto LABEL_60;
  }
LABEL_10:
  uint64_t v12 = *(unsigned int *)(v9 + 40);
  if (!v12) {
    goto LABEL_54;
  }
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = v13 + 32 * v12;
  do
  {
    if (!sub_1CC40C5A4(*(_DWORD *)v13, *(_DWORD *)(v13 + 4), a3, *(void *)(a1 + 256))) {
      goto LABEL_46;
    }
    if ((llvm::ReachingDefAnalysis::getReachingDef(a1, v9, a3) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v15 = *(void *)(a4 + 8);
    uint64_t v16 = *(unsigned int *)(a4 + 20);
    if (v15 != *(void *)a4)
    {
      unsigned int v20 = *(_DWORD *)(a4 + 16);
      goto LABEL_25;
    }
    if (!v16)
    {
LABEL_22:
      unsigned int v20 = *(_DWORD *)(a4 + 16);
      if (v16 < v20)
      {
        *(_DWORD *)(a4 + 20) = v16 + 1;
        *(void *)(v15 + 8 * v16) = v9;
        goto LABEL_46;
      }
LABEL_25:
      if (3 * v20 <= 4 * ((int)v16 - *(_DWORD *)(a4 + 24)))
      {
        if (v20 >= 0x40) {
          v20 *= 2;
        }
        else {
          unsigned int v20 = 128;
        }
      }
      else if (v20 - v16 >= v20 >> 3)
      {
        goto LABEL_27;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v20);
      unsigned int v20 = *(_DWORD *)(a4 + 16);
      uint64_t v15 = *(void *)(a4 + 8);
LABEL_27:
      unsigned int v21 = v20 - 1;
      unsigned int v22 = (v20 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v23 = (uint64_t *)(v15 + 8 * v22);
      uint64_t v24 = *v23;
      if (*v23 == -1)
      {
        BOOL v25 = 0;
LABEL_39:
        if (v25) {
          unint64_t v29 = v25;
        }
        else {
          unint64_t v29 = v23;
        }
        if (*v29 != v9)
        {
          if (*v29 == -2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          *unint64_t v29 = v9;
        }
      }
      else
      {
        BOOL v25 = 0;
        int v26 = 1;
        while (v24 != v9)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -2;
          }
          if (v27) {
            BOOL v25 = v23;
          }
          unsigned int v28 = v22 + v26++;
          unsigned int v22 = v28 & v21;
          uint64_t v23 = (uint64_t *)(v15 + 8 * (v28 & v21));
          uint64_t v24 = *v23;
          if (*v23 == -1) {
            goto LABEL_39;
          }
        }
      }
      goto LABEL_46;
    }
    unint64_t v17 = 0;
    uint64_t v18 = 8 * v16;
    unsigned int v19 = *(uint64_t **)(a4 + 8);
    while (*v19 != v9)
    {
      if (*v19 == -2) {
        unint64_t v17 = v19;
      }
      ++v19;
      v18 -= 8;
      if (!v18)
      {
        if (!v17) {
          goto LABEL_22;
        }
        uint64_t *v17 = v9;
        --*(_DWORD *)(a4 + 24);
        break;
      }
    }
LABEL_46:
    v13 += 32;
  }
  while (v13 != v14);
LABEL_54:
  while (1)
  {
    uint64_t v9 = *(void *)(v9 + 8);
    if ((char *)v9 == v8) {
      break;
    }
    int v30 = **(unsigned __int16 **)(v9 + 16);
    if ((v30 - 13) >= 5 && v30 != 23)
    {
      if ((char *)v9 != v8) {
        goto LABEL_10;
      }
      break;
    }
  }
LABEL_60:
  uint64_t v32 = 1;
  uint64_t LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(this, 1);
  if (v8 == (char *)LastNonDebugInstr) {
    return v32;
  }

  return llvm::ReachingDefAnalysis::isReachingDefLiveOut(a1, LastNonDebugInstr, a3);
}

uint64_t llvm::ReachingDefAnalysis::isReachingDefLiveOut(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 256);
  uint64_t v19 = v7;
  unsigned int v20 = v22;
  long long v21 = xmmword_1CD96EEC0;
  uint64_t v23 = 0;
  int v24 = 0;
  int v8 = *(_DWORD *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = malloc_type_calloc(*(unsigned int *)(v7 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v9) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v23 = v9;
    int v24 = v8;
  }
  llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v19, (const llvm::MachineFunction **)v6);
  if ((llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v19, *(const llvm::MachineRegisterInfo **)(*(void *)(v6 + 32) + 40), (unsigned __int16)a3) & 1) == 0&& ((LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr((llvm::MachineBasicBlock *)v6, 1), int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a3), v6 + 48 == LastNonDebugInstr)|| llvm::ReachingDefAnalysis::getReachingDef(a1, LastNonDebugInstr, a3) == ReachingDef))
  {
    uint64_t v12 = *(unsigned int *)(LastNonDebugInstr + 40);
    if (v12)
    {
      uint64_t v13 = *(void *)(LastNonDebugInstr + 32);
      uint64_t v14 = v13 + 32 * v12;
      uint64_t v15 = *(void *)(a1 + 256);
      do
      {
        BOOL v16 = sub_1CC40DBF8(*(_DWORD *)v13, *(_DWORD *)(v13 + 4), a3, v15);
        if (v16) {
          break;
        }
        v13 += 32;
      }
      while (v13 != v14);
      uint64_t v17 = !v16;
    }
    else
    {
      uint64_t v17 = 1;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  free(v23);
  if (v20 != v22) {
    free(v20);
  }
  return v17;
}

void llvm::ReachingDefAnalysis::getGlobalUses(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 v5 = a3;
  v55[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 24);
  llvm::ReachingDefAnalysis::getReachingLocalUses(a1, a2, a3, a4);
  uint64_t LocalLiveOutMIDef = llvm::ReachingDefAnalysis::getLocalLiveOutMIDef((llvm::ReachingDefAnalysis *)a1, *(const llvm::MachineFunction ***)(a2 + 24), a3);
  if (LocalLiveOutMIDef) {
    BOOL v11 = LocalLiveOutMIDef == a2;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v12 = *(char **)(v8 + 88);
    uint64_t v13 = *(char **)(v8 + 96);
    unint64_t v53 = v55;
    uint64_t v54 = 0x400000000;
    unint64_t v14 = v13 - v12;
    if ((unint64_t)(v13 - v12) >= 0x21) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v12 != v13)
    {
      uint64_t v15 = v53;
      do
      {
        uint64_t v16 = *(void *)v12;
        v12 += 8;
        *v15++ = v16;
      }
      while (v12 != v13);
    }
    uint64_t v48 = v52;
    unint64_t v49 = v52;
    uint64_t v50 = 4;
    int v51 = 0;
    unsigned int v17 = v14 >> 3;
    LODWORD(v54) = v17;
    if (v17)
    {
      int v18 = v5;
      do
      {
        uint64_t v19 = *((void *)v53 + v17 - 1);
        LODWORD(v54) = v17 - 1;
        unsigned int v20 = v48;
        if (v49 == v48)
        {
          int v21 = HIDWORD(v50);
          unsigned int v22 = &v49[8 * HIDWORD(v50)];
          if (HIDWORD(v50))
          {
            uint64_t v23 = 0;
            while (*(void *)&v49[v23] != v19)
            {
              v23 += 8;
              if (8 * HIDWORD(v50) == v23) {
                goto LABEL_31;
              }
            }
            unsigned int v22 = &v49[v23];
          }
LABEL_31:
          unsigned int v20 = v49;
        }
        else
        {
          int v24 = v50 - 1;
          unsigned int v25 = (v50 - 1) & ((v19 >> 4) ^ (v19 >> 9));
          unsigned int v22 = &v49[8 * v25];
          uint64_t v26 = *(void *)v22;
          if (*(void *)v22 == -1)
          {
            BOOL v27 = 0;
LABEL_43:
            if (v27) {
              unsigned int v22 = v27;
            }
            int v21 = HIDWORD(v50);
            if (*(void *)v22 != v19) {
              unsigned int v22 = &v49[8 * v50];
            }
          }
          else
          {
            BOOL v27 = 0;
            int v28 = 1;
            while (v26 != v19)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -2;
              }
              if (v29) {
                BOOL v27 = v22;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v24;
              unsigned int v22 = &v49[8 * (v30 & v24)];
              uint64_t v26 = *(void *)v22;
              if (*(void *)v22 == -1) {
                goto LABEL_43;
              }
            }
            int v21 = HIDWORD(v50);
          }
        }
        if (v49 == v20) {
          int v31 = v21;
        }
        else {
          int v31 = v50;
        }
        if (v22 == &v49[8 * v31])
        {
          for (unsigned int i = *(unsigned __int16 **)(v19 + 152); ; i += 8)
          {
            if (i == *(unsigned __int16 **)(v19 + 160)) {
              goto LABEL_36;
            }
            if (*i == v18) {
              break;
            }
          }
          if (!*((void *)i + 1)) {
            goto LABEL_36;
          }
          if (llvm::ReachingDefAnalysis::getLiveInUses((uint64_t)a1, (llvm::MachineBasicBlock *)v19, a3, a4))sub_1CC33AD70((uint64_t)&v53, (uint64_t)v53 + 8 * v54, *(char **)(v19 + 88), *(char **)(v19 + 96)); {
          uint64_t v33 = v49;
          }
          uint64_t v34 = HIDWORD(v50);
          if (v49 != v48)
          {
            unsigned int v38 = v50;
            goto LABEL_62;
          }
          if (!HIDWORD(v50))
          {
LABEL_59:
            unsigned int v38 = v50;
            if (HIDWORD(v50) < v50)
            {
              ++HIDWORD(v50);
              *(void *)&v49[8 * v34] = v19;
              goto LABEL_36;
            }
LABEL_62:
            if (3 * v38 <= 4 * (HIDWORD(v50) - v51))
            {
              if (v38 >= 0x40) {
                v38 *= 2;
              }
              else {
                unsigned int v38 = 128;
              }
            }
            else if (v38 - HIDWORD(v50) >= v38 >> 3)
            {
              goto LABEL_64;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v48, v38);
            unsigned int v38 = v50;
            uint64_t v33 = v49;
LABEL_64:
            unsigned int v39 = v38 - 1;
            unsigned int v40 = (v38 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            uint64_t v41 = &v33[8 * v40];
            uint64_t v42 = *(void *)v41;
            if (*(void *)v41 == -1)
            {
              uint64_t v43 = 0;
LABEL_76:
              if (v43) {
                uint64_t v47 = v43;
              }
              else {
                uint64_t v47 = v41;
              }
              if (*(void *)v47 != v19)
              {
                if (*(void *)v47 == -2) {
                  --v51;
                }
                else {
                  ++HIDWORD(v50);
                }
                *(void *)uint64_t v47 = v19;
              }
            }
            else
            {
              uint64_t v43 = 0;
              int v44 = 1;
              while (v42 != v19)
              {
                if (v43) {
                  BOOL v45 = 0;
                }
                else {
                  BOOL v45 = v42 == -2;
                }
                if (v45) {
                  uint64_t v43 = v41;
                }
                unsigned int v46 = v40 + v44++;
                unsigned int v40 = v46 & v39;
                uint64_t v41 = &v33[8 * (v46 & v39)];
                uint64_t v42 = *(void *)v41;
                if (*(void *)v41 == -1) {
                  goto LABEL_76;
                }
              }
            }
            goto LABEL_36;
          }
          uint64_t v35 = 0;
          uint64_t v36 = 8 * HIDWORD(v50);
          uint64_t v37 = v49;
          while (*v37 != v19)
          {
            if (*v37 == -2) {
              uint64_t v35 = v37;
            }
            ++v37;
            v36 -= 8;
            if (!v36)
            {
              if (!v35) {
                goto LABEL_59;
              }
              *uint64_t v35 = v19;
              --v51;
              break;
            }
          }
        }
LABEL_36:
        unsigned int v17 = v54;
      }
      while (v54);
      if (v49 != v48) {
        free(v49);
      }
    }
    if (v53 != v55) {
      free(v53);
    }
  }
}

uint64_t llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(llvm::ReachingDefAnalysis *a1, const llvm::MachineFunction **a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 32);
  uint64_t v18 = v6;
  uint64_t v19 = v21;
  long long v20 = xmmword_1CD96EEC0;
  unsigned int v22 = 0;
  int v23 = 0;
  int v7 = *(_DWORD *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = malloc_type_calloc(*(unsigned int *)(v6 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v8) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned int v22 = v8;
    int v23 = v7;
  }
  llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v18, a2);
  if ((llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v18, *((const llvm::MachineRegisterInfo **)a2[4] + 5), (unsigned __int16)a3) & 1) != 0|| (uint64_t LastNonDebugInstr = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::getLastNonDebugInstr((llvm::MachineBasicBlock *)a2, 1), a2 + 6 == (const llvm::MachineFunction **)LastNonDebugInstr))
  {
LABEL_12:
    uint64_t InstFromId = 0;
    goto LABEL_13;
  }
  uint64_t InstFromId = (uint64_t)LastNonDebugInstr;
  unsigned int v11 = a3;
  int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, (uint64_t)LastNonDebugInstr, a3);
  uint64_t v13 = *(unsigned int *)(InstFromId + 40);
  if (!v13)
  {
LABEL_10:
    if ((ReachingDef & 0x80000000) == 0)
    {
      uint64_t InstFromId = llvm::ReachingDefAnalysis::getInstFromId(a1, (llvm::MachineBasicBlock *)a2, ReachingDef);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v14 = *(void *)(InstFromId + 32);
  uint64_t v15 = v14 + 32 * v13;
  uint64_t v16 = *((void *)a1 + 32);
  while (!sub_1CC40DBF8(*(_DWORD *)v14, *(_DWORD *)(v14 + 4), v11, v16))
  {
    v14 += 32;
    if (v14 == v15) {
      goto LABEL_10;
    }
  }
LABEL_13:
  free(v22);
  if (v19 != v21) {
    free(v19);
  }
  return InstFromId;
}

void llvm::ReachingDefAnalysis::getGlobalReachingDefs(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t UniqueReachingMIDef = llvm::ReachingDefAnalysis::getUniqueReachingMIDef(a1, a2, a3);
  if (!UniqueReachingMIDef)
  {
    uint64_t v16 = *(void *)(a2 + 24);
    unsigned int v17 = *(uint64_t **)(v16 + 64);
    uint64_t v18 = *(uint64_t **)(v16 + 72);
    while (v17 != v18)
    {
      uint64_t v19 = *v17++;
      llvm::ReachingDefAnalysis::getLiveOuts((llvm::ReachingDefAnalysis *)a1, v19, a3, a4);
    }
    return;
  }
  uint64_t v9 = UniqueReachingMIDef;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(unsigned int *)(a4 + 20);
  if (v10 != *(void *)a4)
  {
    unsigned int v15 = *(_DWORD *)(a4 + 16);
    goto LABEL_16;
  }
  if (!v11)
  {
LABEL_10:
    unsigned int v15 = *(_DWORD *)(a4 + 16);
    if (v11 < v15)
    {
      *(_DWORD *)(a4 + 20) = v11 + 1;
      *(void *)(v10 + 8 * v11) = UniqueReachingMIDef;
      return;
    }
LABEL_16:
    if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a4 + 24)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v11 >= v15 >> 3)
    {
      goto LABEL_18;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v15);
    unsigned int v15 = *(_DWORD *)(a4 + 16);
    uint64_t v10 = *(void *)(a4 + 8);
LABEL_18:
    unsigned int v20 = v15 - 1;
    unsigned int v21 = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    unsigned int v22 = (uint64_t *)(v10 + 8 * v21);
    uint64_t v23 = *v22;
    if (*v22 == -1)
    {
      uint64_t v24 = 0;
LABEL_30:
      if (v24) {
        int v28 = v24;
      }
      else {
        int v28 = v22;
      }
      if (*v28 != v9)
      {
        if (*v28 == -2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *int v28 = v9;
      }
    }
    else
    {
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != v9)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          uint64_t v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        unsigned int v22 = (uint64_t *)(v10 + 8 * (v27 & v20));
        uint64_t v23 = *v22;
        if (*v22 == -1) {
          goto LABEL_30;
        }
      }
    }
    return;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * v11;
  uint64_t v14 = *(uint64_t **)(a4 + 8);
  while (*v14 != UniqueReachingMIDef)
  {
    if (*v14 == -2) {
      uint64_t v12 = v14;
    }
    ++v14;
    v13 -= 8;
    if (!v13)
    {
      if (!v12) {
        goto LABEL_10;
      }
      uint64_t *v12 = UniqueReachingMIDef;
      --*(_DWORD *)(a4 + 24);
      return;
    }
  }
}

uint64_t llvm::ReachingDefAnalysis::getUniqueReachingMIDef(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t ReachingLocalMIDef = llvm::ReachingDefAnalysis::getReachingLocalMIDef((llvm::ReachingDefAnalysis *)a1, a2, a3);
  if (!ReachingLocalMIDef
    || ((uint64_t v20 = ReachingLocalMIDef,
         uint64_t v24 = (uint64_t *)ReachingLocalMIDef,
         uint64_t v29 = 0,
         !sub_1CD3C8538(a1 + 62, &v24, &v29))
      ? (int v22 = 0)
      : (int v22 = *(_DWORD *)(v29 + 8)),
        (v24 = (uint64_t *)a2, uint64_t v29 = 0, !sub_1CD3C8538(a1 + 62, &v24, &v29))
      ? (int v23 = 0)
      : (int v23 = *(_DWORD *)(v29 + 8)),
        v22 >= v23))
  {
    int v7 = (uint64_t *)v28;
    uint64_t v24 = (uint64_t *)v28;
    int v25 = (uint64_t *)v28;
    uint64_t v26 = 2;
    int v27 = 0;
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(uint64_t **)(v8 + 64);
    uint64_t v10 = *(uint64_t **)(v8 + 72);
    if (v9 == v10)
    {
      int v13 = 0;
      LODWORD(v12) = 0;
      uint64_t v14 = (uint64_t *)v28;
    }
    else
    {
      do
      {
        uint64_t v11 = *v9++;
        llvm::ReachingDefAnalysis::getLiveOuts((llvm::ReachingDefAnalysis *)a1, v11, a3, (uint64_t)&v24);
      }
      while (v9 != v10);
      LODWORD(v12) = HIDWORD(v26);
      int v13 = v27;
      int v7 = v24;
      uint64_t v14 = v25;
    }
    if (v12 - v13 == 1)
    {
      if (v14 == v7) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = v26;
      }
      if (v12)
      {
        uint64_t v15 = 8 * v12;
        uint64_t v16 = 8 * v12;
        unsigned int v17 = v14;
        while (1)
        {
          uint64_t v18 = *v17;
          if ((unint64_t)*v17 < 0xFFFFFFFFFFFFFFFELL) {
            break;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            uint64_t v18 = v14[v12];
            break;
          }
        }
        if (*(void *)(v18 + 24) != v8)
        {
          uint64_t v19 = v14;
          while (1)
          {
            uint64_t v20 = *v19;
            if ((unint64_t)*v19 < 0xFFFFFFFFFFFFFFFELL) {
              goto LABEL_22;
            }
            ++v19;
            v15 -= 8;
            if (!v15)
            {
              uint64_t v20 = v14[v12];
              goto LABEL_22;
            }
          }
        }
      }
      else
      {
        uint64_t v20 = *v14;
        if (*(void *)(*v14 + 24) != v8) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v20 = 0;
LABEL_22:
    if (v14 != v7) {
      free(v14);
    }
  }
  return v20;
}

void llvm::ReachingDefAnalysis::getLiveOuts(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = v8;
  unsigned __int16 v5 = v8;
  uint64_t v6 = 2;
  int v7 = 0;
  llvm::ReachingDefAnalysis::getLiveOuts(a1, a2, a3, a4, (uint64_t *)&v4);
  if (v5 != v4) {
    free(v5);
  }
}

void llvm::ReachingDefAnalysis::getLiveOuts(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a5;
  uint64_t v10 = a5[1];
  if (v10 == *a5)
  {
    uint64_t v12 = *((unsigned int *)a5 + 5);
    int v13 = (void *)(v10 + 8 * v12);
    if (v12)
    {
      uint64_t v14 = 0;
      while (*(void *)(v10 + v14) != a2)
      {
        v14 += 8;
        if (8 * v12 == v14) {
          goto LABEL_19;
        }
      }
      int v13 = (void *)(v10 + v14);
    }
LABEL_19:
    uint64_t v11 = a5[1];
  }
  else
  {
    uint64_t v15 = *((unsigned int *)a5 + 4);
    int v16 = v15 - 1;
    unsigned int v17 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v13 = (void *)(v10 + 8 * v17);
    uint64_t v18 = *v13;
    if (*v13 == -1)
    {
      uint64_t v19 = 0;
LABEL_21:
      if (v19) {
        int v13 = v19;
      }
      if (*v13 != a2)
      {
        LODWORD(v12) = *((_DWORD *)a5 + 5);
        int v13 = (void *)(v10 + 8 * v15);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != a2)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          uint64_t v19 = v13;
        }
        unsigned int v22 = v17 + v20++;
        unsigned int v17 = v22 & v16;
        int v13 = (void *)(v10 + 8 * (v22 & v16));
        uint64_t v18 = *v13;
        if (*v13 == -1) {
          goto LABEL_21;
        }
      }
    }
    LODWORD(v12) = *((_DWORD *)a5 + 5);
  }
LABEL_26:
  unsigned int v23 = *((_DWORD *)a5 + 4);
  if (v10 == v11) {
    unsigned int v24 = v12;
  }
  else {
    unsigned int v24 = *((_DWORD *)a5 + 4);
  }
  if (v13 == (void *)(v10 + 8 * v24))
  {
    if (v10 == v11)
    {
      if (v12)
      {
        int v25 = 0;
        uint64_t v26 = 8 * v12;
        int v27 = (void *)a5[1];
        while (*v27 != a2)
        {
          if (*v27 == -2) {
            int v25 = v27;
          }
          ++v27;
          v26 -= 8;
          if (!v26)
          {
            if (!v25) {
              goto LABEL_39;
            }
            *int v25 = a2;
            --*((_DWORD *)a5 + 6);
            break;
          }
        }
LABEL_62:
        uint64_t v37 = *((void *)a1 + 32);
        uint64_t v61 = v37;
        uint64_t v62 = v64;
        long long v63 = xmmword_1CD96EEC0;
        uint64_t v65 = 0;
        int v66 = 0;
        int v38 = *(_DWORD *)(v37 + 16);
        if (v38)
        {
          unsigned int v39 = malloc_type_calloc(*(unsigned int *)(v37 + 16), 1uLL, 0x6D9A4F0CuLL);
          if (!v39) {
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          }
          uint64_t v65 = v39;
          int v66 = v38;
        }
        llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v61, (const llvm::MachineFunction **)a2);
        if (llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v61, *(const llvm::MachineRegisterInfo **)(*(void *)(a2 + 32) + 40), (unsigned __int16)a3))goto LABEL_102; {
        uint64_t v40 = a3;
        }
        uint64_t LocalLiveOutMIDef = llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(a1, (const llvm::MachineFunction **)a2, a3);
        if (!LocalLiveOutMIDef)
        {
          uint64_t v50 = *(uint64_t **)(a2 + 64);
          unint64_t v49 = *(uint64_t **)(a2 + 72);
          while (v50 != v49)
          {
            uint64_t v51 = *v50++;
            llvm::ReachingDefAnalysis::getLiveOuts(a1, v51, v40, a4, a5);
          }
          goto LABEL_102;
        }
        uint64_t v42 = LocalLiveOutMIDef;
        uint64_t v43 = *(void *)(a4 + 8);
        uint64_t v44 = *(unsigned int *)(a4 + 20);
        if (v43 == *(void *)a4)
        {
          if (v44)
          {
            BOOL v45 = 0;
            uint64_t v46 = 8 * v44;
            uint64_t v47 = *(uint64_t **)(a4 + 8);
            while (*v47 != LocalLiveOutMIDef)
            {
              if (*v47 == -2) {
                BOOL v45 = v47;
              }
              ++v47;
              v46 -= 8;
              if (!v46)
              {
                if (!v45) {
                  goto LABEL_75;
                }
                *BOOL v45 = LocalLiveOutMIDef;
                --*(_DWORD *)(a4 + 24);
                goto LABEL_102;
              }
            }
            goto LABEL_102;
          }
LABEL_75:
          unsigned int v48 = *(_DWORD *)(a4 + 16);
          if (v44 < v48)
          {
            *(_DWORD *)(a4 + 20) = v44 + 1;
            *(void *)(v43 + 8 * v44) = LocalLiveOutMIDef;
LABEL_102:
            free(v65);
            if (v62 != v64) {
              free(v62);
            }
            return;
          }
        }
        else
        {
          unsigned int v48 = *(_DWORD *)(a4 + 16);
        }
        if (3 * v48 <= 4 * ((int)v44 - *(_DWORD *)(a4 + 24)))
        {
          if (v48 >= 0x40) {
            v48 *= 2;
          }
          else {
            unsigned int v48 = 128;
          }
        }
        else if (v48 - v44 >= v48 >> 3)
        {
          goto LABEL_83;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v48);
        unsigned int v48 = *(_DWORD *)(a4 + 16);
        uint64_t v43 = *(void *)(a4 + 8);
LABEL_83:
        unsigned int v52 = v48 - 1;
        unsigned int v53 = (v48 - 1) & ((v42 >> 4) ^ (v42 >> 9));
        uint64_t v54 = (uint64_t *)(v43 + 8 * v53);
        uint64_t v55 = *v54;
        if (*v54 == -1)
        {
          unsigned __int16 v56 = 0;
LABEL_95:
          if (v56) {
            uint64_t v60 = v56;
          }
          else {
            uint64_t v60 = v54;
          }
          if (*v60 != v42)
          {
            if (*v60 == -2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            *uint64_t v60 = v42;
          }
        }
        else
        {
          unsigned __int16 v56 = 0;
          int v57 = 1;
          while (v55 != v42)
          {
            if (v56) {
              BOOL v58 = 0;
            }
            else {
              BOOL v58 = v55 == -2;
            }
            if (v58) {
              unsigned __int16 v56 = v54;
            }
            unsigned int v59 = v53 + v57++;
            unsigned int v53 = v59 & v52;
            uint64_t v54 = (uint64_t *)(v43 + 8 * (v59 & v52));
            uint64_t v55 = *v54;
            if (*v54 == -1) {
              goto LABEL_95;
            }
          }
        }
        goto LABEL_102;
      }
LABEL_39:
      if (v23 > v12)
      {
        *((_DWORD *)a5 + 5) = v12 + 1;
        *(void *)(v10 + 8 * v12) = a2;
        goto LABEL_62;
      }
    }
    if (3 * v23 <= 4 * ((int)v12 - *((_DWORD *)a5 + 6)))
    {
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
    }
    else if (v23 - v12 >= v23 >> 3)
    {
      goto LABEL_43;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a5, v23);
    unsigned int v23 = *((_DWORD *)a5 + 4);
    uint64_t v10 = a5[1];
LABEL_43:
    unsigned int v28 = v23 - 1;
    unsigned int v29 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v30 = (void *)(v10 + 8 * v29);
    uint64_t v31 = *v30;
    if (*v30 == -1)
    {
      uint64_t v32 = 0;
LABEL_55:
      if (v32) {
        uint64_t v36 = v32;
      }
      else {
        uint64_t v36 = v30;
      }
      if (*v36 != a2)
      {
        if (*v36 == -2) {
          --*((_DWORD *)a5 + 6);
        }
        else {
          ++*((_DWORD *)a5 + 5);
        }
        *uint64_t v36 = a2;
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v33 = 1;
      while (v31 != a2)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -2;
        }
        if (v34) {
          uint64_t v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & v28;
        unsigned int v30 = (void *)(v10 + 8 * (v35 & v28));
        uint64_t v31 = *v30;
        if (*v30 == -1) {
          goto LABEL_55;
        }
      }
    }
    goto LABEL_62;
  }
}

uint64_t llvm::ReachingDefAnalysis::getMIOperand(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, unsigned int a3)
{
  return llvm::ReachingDefAnalysis::getUniqueReachingMIDef((uint64_t *)this, (uint64_t)a2, *(_DWORD *)(*((void *)a2 + 4) + 32 * a3 + 4));
}

uint64_t llvm::ReachingDefAnalysis::getMIOperand(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, llvm::MachineOperand *a3)
{
  return llvm::ReachingDefAnalysis::getUniqueReachingMIDef((uint64_t *)this, (uint64_t)a2, *((_DWORD *)a3 + 1));
}

BOOL llvm::ReachingDefAnalysis::isRegUsedAfter(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 256);
  uint64_t v24 = v7;
  int v25 = v27;
  long long v26 = xmmword_1CD96EEC0;
  unsigned int v28 = 0;
  int v29 = 0;
  int v8 = *(_DWORD *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = malloc_type_calloc(*(unsigned int *)(v7 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v9) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned int v28 = v9;
    int v29 = v8;
  }
  llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v24, (const llvm::MachineFunction **)v6);
  if (llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v24, *(const llvm::MachineRegisterInfo **)(*(void *)(v6 + 32) + 40), a3))
  {
    uint64_t v11 = (unsigned __int16 **)(v6 + 48);
    for (unsigned int i = *(unsigned __int16 **)(v6 + 48); ; unsigned int i = *v12)
    {
      uint64_t v12 = (unsigned __int16 **)((unint64_t)i & 0xFFFFFFFFFFFFFFF8);
      if (v11 == (unsigned __int16 **)((unint64_t)i & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_26;
      }
      int v13 = *v12[2];
      if ((v13 - 13) >= 5 && v13 != 23) {
        break;
      }
    }
    if (v12 == v11)
    {
LABEL_26:
      BOOL v15 = 0;
      goto LABEL_27;
    }
    while (1)
    {
      llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)&v24, (const llvm::MachineInstr *)v12);
      llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)&v24, (const llvm::MachineInstr *)v12);
      if (!llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v24, *(const llvm::MachineRegisterInfo **)(*(void *)(v6 + 32) + 40), a3))break; {
      uint64_t v12 = (unsigned __int16 **)((unint64_t)*v12 & 0xFFFFFFFFFFFFFFF8);
      }
      if (v11 == v12) {
        goto LABEL_26;
      }
      while (1)
      {
        int v16 = *v12[2];
        BOOL v15 = 0;
        if ((v16 - 13) >= 5 && v16 != 23) {
          break;
        }
        uint64_t v12 = (unsigned __int16 **)((unint64_t)*v12 & 0xFFFFFFFFFFFFFFF8);
        if (v11 == v12) {
          goto LABEL_27;
        }
      }
      if (v12 == v11) {
        goto LABEL_27;
      }
    }
    uint64_t v19 = (uint64_t *)(a1 + 496);
    uint64_t v22 = 0;
    unsigned int v23 = v12;
    if (sub_1CD3C8538((uint64_t *)(a1 + 496), &v23, &v22)) {
      int v20 = *(_DWORD *)(v22 + 8);
    }
    else {
      int v20 = 0;
    }
    uint64_t v22 = 0;
    unsigned int v23 = (unsigned __int16 **)a2;
    if (sub_1CD3C8538(v19, &v23, &v22)) {
      int v21 = *(_DWORD *)(v22 + 8);
    }
    else {
      int v21 = 0;
    }
    BOOL v15 = v20 > v21;
  }
  else
  {
    BOOL v15 = 1;
  }
LABEL_27:
  free(v28);
  if (v25 != v27) {
    free(v25);
  }
  return v15;
}

uint64_t llvm::ReachingDefAnalysis::isRegDefinedAfter(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(llvm::MachineBasicBlock **)(a2 + 24);
  uint64_t LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v6, 1);
  if ((llvm::MachineBasicBlock *)((char *)v6 + 48) != (llvm::MachineBasicBlock *)LastNonDebugInstr)
  {
    uint64_t v8 = LastNonDebugInstr;
    int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, a2, a3);
    if (ReachingDef != llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, v8, a3)) {
      return 1;
    }
  }
  uint64_t result = llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(a1, (const llvm::MachineFunction **)v6, a3);
  if (result) {
    return result == llvm::ReachingDefAnalysis::getReachingLocalMIDef(a1, a2, a3);
  }
  return result;
}

BOOL sub_1CC40DBF8(int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if ((a1 & 0x10000FF) != 0x1000000 || a2 == 0) {
    return 0;
  }
  if (a3 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (!(a2 >> 30) && a3 - 1 <= 0x3FFFFFFE) {
    return llvm::MCRegisterInfo::regsOverlap((void *)(a4 + 8), a2, a3);
  }
  return result;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToMoveForwards(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, llvm::MachineInstr *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 3);
  if ((llvm::MachineInstr *)(v3 + 48) == a2) {
    return 0;
  }
  unsigned __int16 v5 = a2;
  uint64_t v7 = a2;
  while (v7 != a3)
  {
    if (!v7 || (*(unsigned char *)v7 & 4) == 0)
    {
      while ((*((_WORD *)v7 + 22) & 8) != 0)
        uint64_t v7 = (llvm::MachineInstr *)*((void *)v7 + 1);
    }
    uint64_t v7 = (llvm::MachineInstr *)*((void *)v7 + 1);
    if (v7 == (llvm::MachineInstr *)(v3 + 48)) {
      return 0;
    }
  }
  uint64_t v8 = 0;
  if (a2 != a3 && v3 == *((void *)a3 + 3))
  {
    uint64_t v32 = &v34;
    uint64_t v33 = 0x200000000;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unsigned int v35 = &v36;
    uint64_t v10 = *((unsigned int *)a2 + 10);
    if (v10)
    {
      uint64_t v11 = (_DWORD *)*((void *)a2 + 4);
      uint64_t v12 = &v11[8 * v10];
      do
      {
        unsigned int v13 = v11[1];
        if (*v11) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = v13 == 0;
        }
        if (!v14)
        {
          if ((*v11 & 0x1000000) != 0)
          {
            int v31 = v11[1];
            sub_1CC40F9DC((uint64_t **)&v32, &v31);
          }
          else if (*((void *)v5 + 3) != *((void *)a3 + 3) {
                 || (int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)v5, v11[1]),
          }
                     ReachingDef != llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)a3, v13)))
          {
            uint64_t v8 = 0;
            unsigned int v17 = v36;
            goto LABEL_62;
          }
        }
        v11 += 8;
      }
      while (v11 != v12);
      if (!v5) {
        goto LABEL_30;
      }
    }
    if ((*(unsigned char *)v5 & 4) == 0)
    {
LABEL_30:
      while ((*((_WORD *)v5 + 22) & 8) != 0)
        unsigned __int16 v5 = (llvm::MachineInstr *)*((void *)v5 + 1);
    }
    uint64_t v16 = *((void *)v5 + 1);
    unsigned int v17 = v36;
    if ((llvm::MachineInstr *)v16 == a3)
    {
      uint64_t v8 = 1;
      goto LABEL_62;
    }
    uint64_t v18 = v37;
    uint64_t v19 = v32;
    int v20 = v33;
    uint64_t v21 = 4 * v33;
    do
    {
      int v22 = sub_1CC40EB0C(v16);
      if (v22) {
        break;
      }
      uint64_t v23 = *(unsigned int *)(v16 + 40);
      if (v23)
      {
        uint64_t v24 = *(void *)(v16 + 32);
        uint64_t v25 = v24 + 32 * v23;
        do
        {
          if (!*(unsigned char *)v24)
          {
            int v26 = *(_DWORD *)(v24 + 4);
            if (v26)
            {
              if (v18)
              {
                for (unsigned int i = v17; i; unsigned int i = (void *)*i)
                {
                  int v28 = *((_DWORD *)i + 7);
                  if (v26 >= v28)
                  {
                    if (v28 >= v26) {
                      goto LABEL_59;
                    }
                    ++i;
                  }
                }
              }
              else if (v20)
              {
                uint64_t v29 = v21;
                uint64_t v30 = v19;
                while (*v30 != v26)
                {
                  ++v30;
                  v29 -= 4;
                  if (!v29) {
                    goto LABEL_37;
                  }
                }
                if (v29)
                {
LABEL_59:
                  uint64_t v8 = 0;
                  goto LABEL_62;
                }
              }
            }
          }
LABEL_37:
          v24 += 32;
        }
        while (v24 != v25);
      }
      if ((*(unsigned char *)v16 & 4) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 8) != 0)
          uint64_t v16 = *(void *)(v16 + 8);
      }
      uint64_t v16 = *(void *)(v16 + 8);
    }
    while ((llvm::MachineInstr *)v16 != a3);
    uint64_t v8 = v22 ^ 1u;
LABEL_62:
    sub_1CD3C5048((uint64_t)&v35, v17);
    if (v32 != &v34) {
      free(v32);
    }
  }
  return v8;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToMoveBackwards(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, llvm::MachineInstr *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 3);
  if ((llvm::MachineInstr *)(v3 + 48) == a2) {
    return 0;
  }
  uint64_t v7 = a2;
  while (v7 != a3)
  {
    uint64_t v7 = (llvm::MachineInstr *)(*(void *)v7 & 0xFFFFFFFFFFFFFFF8);
    if (!v7 || (*(unsigned char *)v7 & 4) == 0)
    {
      while ((*((_WORD *)v7 + 22) & 4) != 0)
        uint64_t v7 = (llvm::MachineInstr *)(*(void *)v7 & 0xFFFFFFFFFFFFFFF8);
    }
    if (v7 == (llvm::MachineInstr *)(v3 + 48)) {
      return 0;
    }
  }
  uint64_t v8 = 0;
  if (a2 != a3 && v3 == *((void *)a3 + 3))
  {
    uint64_t v32 = &v34;
    uint64_t v33 = 0x200000000;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unsigned int v35 = &v36;
    uint64_t v10 = *((unsigned int *)a2 + 10);
    if (v10)
    {
      uint64_t v11 = (_DWORD *)*((void *)a2 + 4);
      uint64_t v12 = &v11[8 * v10];
      do
      {
        unsigned int v13 = v11[1];
        if (*v11) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = v13 == 0;
        }
        if (!v14)
        {
          if ((*v11 & 0x1000000) != 0)
          {
            int v31 = v11[1];
            sub_1CC40F9DC((uint64_t **)&v32, &v31);
          }
          else if (*((void *)a2 + 3) != *((void *)a3 + 3) {
                 || (int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)a2, v11[1]),
          }
                     ReachingDef != llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)a3, v13)))
          {
            uint64_t v8 = 0;
            unsigned int v17 = v36;
            goto LABEL_64;
          }
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    unint64_t v16 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v16 || (*(unsigned char *)v16 & 4) == 0)
    {
      while ((*(_WORD *)(v16 + 44) & 4) != 0)
        unint64_t v16 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
    }
    unsigned int v17 = v36;
    if ((llvm::MachineInstr *)v16 == a3)
    {
      uint64_t v8 = 1;
      goto LABEL_64;
    }
    uint64_t v18 = v37;
    uint64_t v19 = v32;
    int v20 = v33;
    uint64_t v21 = 4 * v33;
    do
    {
      int v22 = sub_1CC40EB0C(v16);
      if (v22) {
        break;
      }
      uint64_t v23 = *(unsigned int *)(v16 + 40);
      if (v23)
      {
        uint64_t v24 = *(void *)(v16 + 32);
        uint64_t v25 = v24 + 32 * v23;
        do
        {
          if (!*(unsigned char *)v24)
          {
            int v26 = *(_DWORD *)(v24 + 4);
            if (v26)
            {
              if (v18)
              {
                for (unsigned int i = v17; i; unsigned int i = (void *)*i)
                {
                  int v28 = *((_DWORD *)i + 7);
                  if (v26 >= v28)
                  {
                    if (v28 >= v26) {
                      goto LABEL_61;
                    }
                    ++i;
                  }
                }
              }
              else if (v20)
              {
                uint64_t v29 = v21;
                uint64_t v30 = v19;
                while (*v30 != v26)
                {
                  ++v30;
                  v29 -= 4;
                  if (!v29) {
                    goto LABEL_37;
                  }
                }
                if (v29)
                {
LABEL_61:
                  uint64_t v8 = 0;
                  goto LABEL_64;
                }
              }
            }
          }
LABEL_37:
          v24 += 32;
        }
        while (v24 != v25);
      }
      unint64_t v16 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
      if (!v16 || (*(unsigned char *)v16 & 4) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 4) != 0)
          unint64_t v16 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while ((llvm::MachineInstr *)v16 != a3);
    uint64_t v8 = v22 ^ 1u;
LABEL_64:
    sub_1CD3C5048((uint64_t)&v35, v17);
    if (v32 != &v34) {
      free(v32);
    }
  }
  return v8;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToRemove(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = &v14;
  uint64_t v11 = &v14;
  uint64_t v12 = 1;
  int v13 = 0;
  unsigned __int16 v5 = v9;
  uint64_t v6 = v9;
  uint64_t v7 = 2;
  int v8 = 0;
  uint64_t v3 = llvm::ReachingDefAnalysis::isSafeToRemove(a1, a2, (uint64_t)&v5, a3, (uint64_t *)&v10);
  if (v6 != v5) {
    free(v6);
  }
  if (v11 != v10) {
    free(v11);
  }
  return v3;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToRemove(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v11 = *(uint64_t **)a3;
  uint64_t v10 = *(uint64_t **)(a3 + 8);
  if (v10 != *(uint64_t **)a3)
  {
    uint64_t v15 = *(unsigned int *)(a3 + 16);
    int v16 = v15 - 1;
    unsigned int v17 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v13 = &v10[v17];
    uint64_t v18 = *v13;
    if (*v13 == -1)
    {
      uint64_t v19 = 0;
LABEL_21:
      if (v19) {
        int v13 = v19;
      }
      if (*v13 != a2)
      {
        LODWORD(v12) = *(_DWORD *)(a3 + 20);
        int v13 = &v10[v15];
LABEL_26:
        uint64_t v23 = *(uint64_t **)a3;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != a2)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          uint64_t v19 = v13;
        }
        unsigned int v22 = v17 + v20++;
        unsigned int v17 = v22 & v16;
        int v13 = &v10[v22 & v16];
        uint64_t v18 = *v13;
        if (*v13 == -1) {
          goto LABEL_21;
        }
      }
    }
    LODWORD(v12) = *(_DWORD *)(a3 + 20);
    goto LABEL_26;
  }
  uint64_t v12 = *(unsigned int *)(a3 + 20);
  int v13 = &v10[v12];
  if (v12)
  {
    uint64_t v14 = 0;
    while (v10[v14] != a2)
    {
      if (v12 == ++v14) {
        goto LABEL_19;
      }
    }
    int v13 = &v10[v14];
  }
LABEL_19:
  uint64_t v23 = *(uint64_t **)(a3 + 8);
LABEL_27:
  unsigned int v24 = *(_DWORD *)(a3 + 16);
  if (v10 == v23) {
    int v25 = v12;
  }
  else {
    int v25 = *(_DWORD *)(a3 + 16);
  }
  if (v13 != &v10[v25]) {
    return 1;
  }
  uint64_t v27 = *a5;
  uint64_t v26 = a5[1];
  if (v26 == *a5)
  {
    uint64_t v28 = *((unsigned int *)a5 + 5);
    uint64_t v29 = (void *)(v26 + 8 * v28);
    if (v28)
    {
      uint64_t v30 = 0;
      while (*(void *)(v26 + v30) != a2)
      {
        v30 += 8;
        if (8 * v28 == v30) {
          goto LABEL_49;
        }
      }
      uint64_t v29 = (void *)(v26 + v30);
    }
LABEL_49:
    uint64_t v27 = a5[1];
  }
  else
  {
    uint64_t v31 = *((unsigned int *)a5 + 4);
    int v32 = v31 - 1;
    unsigned int v33 = (v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v29 = (void *)(v26 + 8 * v33);
    uint64_t v34 = *v29;
    if (*v29 == -1)
    {
      unsigned int v35 = 0;
LABEL_51:
      if (v35) {
        uint64_t v29 = v35;
      }
      if (*v29 != a2)
      {
        LODWORD(v28) = *((_DWORD *)a5 + 5);
        uint64_t v29 = (void *)(v26 + 8 * v31);
        goto LABEL_56;
      }
    }
    else
    {
      unsigned int v35 = 0;
      int v36 = 1;
      while (v34 != a2)
      {
        if (v35) {
          BOOL v37 = 0;
        }
        else {
          BOOL v37 = v34 == -2;
        }
        if (v37) {
          unsigned int v35 = v29;
        }
        unsigned int v38 = v33 + v36++;
        unsigned int v33 = v38 & v32;
        uint64_t v29 = (void *)(v26 + 8 * (v38 & v32));
        uint64_t v34 = *v29;
        if (*v29 == -1) {
          goto LABEL_51;
        }
      }
    }
    LODWORD(v28) = *((_DWORD *)a5 + 5);
  }
LABEL_56:
  if (v26 == v27) {
    unsigned int v39 = v28;
  }
  else {
    unsigned int v39 = *((_DWORD *)a5 + 4);
  }
  if (v29 != (void *)(v26 + 8 * v39)) {
    return 1;
  }
  if ((sub_1CC40EB0C(a2) & 1) == 0)
  {
    if (v10 == v11)
    {
      if (v12)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 8 * v12;
        uint64_t v43 = v10;
        while (*v43 != a2)
        {
          if (*v43 == -2) {
            uint64_t v41 = v43;
          }
          ++v43;
          v42 -= 8;
          if (!v42)
          {
            if (!v41) {
              goto LABEL_71;
            }
            uint64_t *v41 = a2;
            --*(_DWORD *)(a3 + 24);
            break;
          }
        }
LABEL_93:
        uint64_t v52 = *(unsigned int *)(a2 + 40);
        if (v52)
        {
          unsigned int v53 = *(_DWORD **)(a2 + 32);
          uint64_t v54 = &v53[8 * v52];
          while (1)
          {
            if ((*v53 & 0x10000FF) != 0x1000000 || v53[1] == 0) {
              goto LABEL_179;
            }
            uint64_t v110 = v114;
            unsigned int v111 = v114;
            uint64_t v112 = 4;
            int v113 = 0;
            llvm::ReachingDefAnalysis::getGlobalUses(a1, a2, v53[1], (uint64_t)&v110);
            if (v111 == v110) {
              unsigned __int16 v56 = (uint64_t *)((char *)&v112 + 4);
            }
            else {
              unsigned __int16 v56 = &v112;
            }
            uint64_t v57 = *(unsigned int *)v56;
            if (v57)
            {
              uint64_t v58 = 8 * v57;
              unsigned int v59 = (unint64_t *)v111;
              while (*v59 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v59;
                v58 -= 8;
                if (!v58) {
                  goto LABEL_175;
                }
              }
            }
            else
            {
              unsigned int v59 = (unint64_t *)v111;
            }
            uint64_t v60 = &v111[8 * v57];
            if (v59 == (unint64_t *)v60) {
              goto LABEL_175;
            }
            unint64_t v61 = *v59;
LABEL_110:
            uint64_t v63 = *a5;
            uint64_t v62 = a5[1];
            if (v62 == *a5)
            {
              uint64_t v64 = *((unsigned int *)a5 + 5);
              uint64_t v65 = (void *)(v62 + 8 * v64);
              if (v64)
              {
                uint64_t v66 = 0;
                while (*(void *)(v62 + v66) != v61)
                {
                  v66 += 8;
                  if (8 * v64 == v66) {
                    goto LABEL_129;
                  }
                }
                uint64_t v65 = (void *)(v62 + v66);
              }
LABEL_129:
              uint64_t v63 = a5[1];
            }
            else
            {
              uint64_t v67 = *((unsigned int *)a5 + 4);
              int v68 = v67 - 1;
              unsigned int v69 = (v67 - 1) & ((v61 >> 4) ^ (v61 >> 9));
              uint64_t v65 = (void *)(v62 + 8 * v69);
              uint64_t v70 = *v65;
              if (*v65 == -1)
              {
                int v71 = 0;
LABEL_152:
                if (v71) {
                  uint64_t v65 = v71;
                }
                LODWORD(v64) = *((_DWORD *)a5 + 5);
                uint64_t v89 = (void *)(v62 + 8 * v67);
                if (*v65 != v61) {
                  uint64_t v65 = v89;
                }
              }
              else
              {
                int v71 = 0;
                int v72 = 1;
                while (v70 != v61)
                {
                  if (v71) {
                    BOOL v73 = 0;
                  }
                  else {
                    BOOL v73 = v70 == -2;
                  }
                  if (v73) {
                    int v71 = v65;
                  }
                  unsigned int v74 = v69 + v72++;
                  unsigned int v69 = v74 & v68;
                  uint64_t v65 = (void *)(v62 + 8 * (v74 & v68));
                  uint64_t v70 = *v65;
                  if (*v65 == -1) {
                    goto LABEL_152;
                  }
                }
                LODWORD(v64) = *((_DWORD *)a5 + 5);
              }
            }
            unsigned int v75 = v62 == v63 ? v64 : *((_DWORD *)a5 + 4);
            if (v65 != (void *)(v62 + 8 * v75)) {
              break;
            }
            uint64_t v77 = *a4;
            uint64_t v76 = a4[1];
            if (v76 == *a4)
            {
              uint64_t v78 = *((unsigned int *)a4 + 5);
              int v79 = (void *)(v76 + 8 * v78);
              if (v78)
              {
                uint64_t v80 = 0;
                while (*(void *)(v76 + v80) != v61)
                {
                  v80 += 8;
                  if (8 * v78 == v80) {
                    goto LABEL_159;
                  }
                }
                int v79 = (void *)(v76 + v80);
              }
LABEL_159:
              uint64_t v77 = a4[1];
            }
            else
            {
              uint64_t v81 = *((unsigned int *)a4 + 4);
              int v82 = v81 - 1;
              unsigned int v83 = (v81 - 1) & ((v61 >> 4) ^ (v61 >> 9));
              int v79 = (void *)(v76 + 8 * v83);
              uint64_t v84 = *v79;
              if (*v79 == -1)
              {
                unsigned int v85 = 0;
LABEL_170:
                if (v85) {
                  int v79 = v85;
                }
                LODWORD(v78) = *((_DWORD *)a4 + 5);
                int64_t v93 = (void *)(v76 + 8 * v81);
                if (*v79 != v61) {
                  int v79 = v93;
                }
              }
              else
              {
                unsigned int v85 = 0;
                int v86 = 1;
                while (v84 != v61)
                {
                  if (v85) {
                    BOOL v87 = 0;
                  }
                  else {
                    BOOL v87 = v84 == -2;
                  }
                  if (v87) {
                    unsigned int v85 = v79;
                  }
                  unsigned int v88 = v83 + v86++;
                  unsigned int v83 = v88 & v82;
                  int v79 = (void *)(v76 + 8 * (v88 & v82));
                  uint64_t v84 = *v79;
                  if (*v79 == -1) {
                    goto LABEL_170;
                  }
                }
                LODWORD(v78) = *((_DWORD *)a4 + 5);
              }
            }
            unsigned int v90 = v76 == v77 ? v78 : *((_DWORD *)a4 + 4);
            if (v79 != (void *)(v76 + 8 * v90) || llvm::ReachingDefAnalysis::isSafeToRemove(a1)) {
              break;
            }
            int v94 = 0;
LABEL_176:
            if (v111 != v110) {
              free(v111);
            }
            if (!v94) {
              return 0;
            }
LABEL_179:
            v53 += 8;
            if (v53 == v54) {
              goto LABEL_182;
            }
          }
          unsigned int v91 = v59 + 1;
          while (v91 != (unint64_t *)v60)
          {
            unint64_t v92 = *v91++;
            unint64_t v61 = v92;
            if (v92 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unsigned int v59 = v91 - 1;
              goto LABEL_110;
            }
          }
LABEL_175:
          int v94 = 1;
          goto LABEL_176;
        }
LABEL_182:
        uint64_t v95 = a4[1];
        uint64_t v96 = *((unsigned int *)a4 + 5);
        if (v95 == *a4)
        {
          if (v96)
          {
            unsigned int v97 = 0;
            uint64_t v98 = 8 * v96;
            uint64_t v99 = (uint64_t *)a4[1];
            while (*v99 != a2)
            {
              if (*v99 == -2) {
                unsigned int v97 = v99;
              }
              ++v99;
              v98 -= 8;
              if (!v98)
              {
                if (!v97) {
                  goto LABEL_190;
                }
                uint64_t *v97 = a2;
                --*((_DWORD *)a4 + 6);
                return 1;
              }
            }
            return 1;
          }
LABEL_190:
          unsigned int v100 = *((_DWORD *)a4 + 4);
          if (v96 < v100)
          {
            *((_DWORD *)a4 + 5) = v96 + 1;
            *(void *)(v95 + 8 * v96) = a2;
            return 1;
          }
        }
        else
        {
          unsigned int v100 = *((_DWORD *)a4 + 4);
        }
        if (3 * v100 <= 4 * ((int)v96 - *((_DWORD *)a4 + 6)))
        {
          if (v100 >= 0x40) {
            v100 *= 2;
          }
          else {
            unsigned int v100 = 128;
          }
        }
        else if (v100 - v96 >= v100 >> 3)
        {
          goto LABEL_195;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v100);
        unsigned int v100 = *((_DWORD *)a4 + 4);
        uint64_t v95 = a4[1];
LABEL_195:
        unsigned int v101 = v100 - 1;
        unsigned int v102 = (v100 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v103 = (uint64_t *)(v95 + 8 * v102);
        uint64_t v104 = *v103;
        if (*v103 == -1)
        {
          uint64_t v105 = 0;
LABEL_207:
          if (v105) {
            uint64_t v109 = v105;
          }
          else {
            uint64_t v109 = v103;
          }
          if (*v109 != a2)
          {
            if (*v109 == -2) {
              --*((_DWORD *)a4 + 6);
            }
            else {
              ++*((_DWORD *)a4 + 5);
            }
            uint64_t *v109 = a2;
          }
        }
        else
        {
          uint64_t v105 = 0;
          int v106 = 1;
          while (v104 != a2)
          {
            if (v105) {
              BOOL v107 = 0;
            }
            else {
              BOOL v107 = v104 == -2;
            }
            if (v107) {
              uint64_t v105 = v103;
            }
            unsigned int v108 = v102 + v106++;
            unsigned int v102 = v108 & v101;
            int v103 = (uint64_t *)(v95 + 8 * (v108 & v101));
            uint64_t v104 = *v103;
            if (*v103 == -1) {
              goto LABEL_207;
            }
          }
        }
        return 1;
      }
LABEL_71:
      if (v24 > v12)
      {
        *(_DWORD *)(a3 + 20) = v12 + 1;
        v10[v12] = a2;
        goto LABEL_93;
      }
    }
    if (3 * v24 <= 4 * ((int)v12 - *(_DWORD *)(a3 + 24)))
    {
      if (v24 >= 0x40) {
        v24 *= 2;
      }
      else {
        unsigned int v24 = 128;
      }
    }
    else if (v24 - v12 >= v24 >> 3)
    {
      goto LABEL_75;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v24);
    unsigned int v24 = *(_DWORD *)(a3 + 16);
    uint64_t v10 = *(uint64_t **)(a3 + 8);
LABEL_75:
    unsigned int v44 = v24 - 1;
    unsigned int v45 = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v46 = &v10[v45];
    uint64_t v47 = *v46;
    if (*v46 == -1)
    {
      unsigned int v48 = 0;
LABEL_87:
      if (v48) {
        uint64_t v46 = v48;
      }
      if (*v46 != a2)
      {
        if (*v46 == -2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        *uint64_t v46 = a2;
      }
    }
    else
    {
      unsigned int v48 = 0;
      int v49 = 1;
      while (v47 != a2)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v47 == -2;
        }
        if (v50) {
          unsigned int v48 = v46;
        }
        unsigned int v51 = v45 + v49++;
        unsigned int v45 = v51 & v44;
        uint64_t v46 = &v10[v51 & v44];
        uint64_t v47 = *v46;
        if (*v46 == -1) {
          goto LABEL_87;
        }
      }
    }
    goto LABEL_93;
  }
  return 0;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToRemove(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v10;
  uint64_t v7 = v10;
  uint64_t v8 = 2;
  int v9 = 0;
  uint64_t v4 = llvm::ReachingDefAnalysis::isSafeToRemove(a1, a2, (uint64_t)&v6, a3, a4);
  if (v7 != v6) {
    free(v7);
  }
  return v4;
}

uint64_t sub_1CC40EB0C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 16);
  unsigned int v2 = *v1 - 1;
  if (v2 <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 8) != 0) {
    return 1;
  }
  __int16 v3 = *(_WORD *)(a1 + 44);
  BOOL v4 = (v3 & 0xC) == 0 || (v3 & 4) != 0;
  unint64_t v5 = *((void *)v1 + 1);
  if (v4)
  {
    if ((v5 & 0x80000) != 0) {
      return 1;
    }
  }
  else
  {
    if ((v5 & 0x80000) != 0) {
      return 1;
    }
    uint64_t v14 = a1;
    while ((*(_WORD *)(v14 + 44) & 8) != 0)
    {
      uint64_t v14 = *(void *)(v14 + 8);
      uint64_t v8 = 1;
      if ((*(unsigned char *)(*(void *)(v14 + 16) + 10) & 8) != 0) {
        return v8;
      }
    }
  }
  if (v2 <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 0x10) != 0) {
    return 1;
  }
  if (v4)
  {
    if ((v5 & 0x100000) != 0) {
      return 1;
    }
    if ((v5 & 0x200000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    if ((v5 & 0x100000) != 0) {
      return 1;
    }
    uint64_t v15 = a1;
    while ((*(_WORD *)(v15 + 44) & 8) != 0)
    {
      uint64_t v15 = *(void *)(v15 + 8);
      uint64_t v8 = 1;
      if ((*(unsigned char *)(*(void *)(v15 + 16) + 10) & 0x10) != 0) {
        return v8;
      }
    }
    if ((v5 & 0x200000) == 0)
    {
      uint64_t v16 = a1;
      while ((*(_WORD *)(v16 + 44) & 8) != 0)
      {
        uint64_t v16 = *(void *)(v16 + 8);
        if ((*(unsigned char *)(*(void *)(v16 + 16) + 10) & 0x20) != 0) {
          goto LABEL_59;
        }
      }
      goto LABEL_60;
    }
  }
LABEL_59:
  if ((*(_WORD *)(a1 + 44) & 0x4000) == 0) {
    return 1;
  }
LABEL_60:
  if (v4)
  {
LABEL_11:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_12;
    }
    return 1;
  }
  if ((v5 & 0x1000000) != 0) {
    return 1;
  }
  uint64_t v17 = a1;
  while ((*(_WORD *)(v17 + 44) & 8) != 0)
  {
    uint64_t v17 = *(void *)(v17 + 8);
    uint64_t v8 = 1;
    if (*(unsigned char *)(*(void *)(v17 + 16) + 11)) {
      return v8;
    }
  }
LABEL_12:
  if (v2 <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 1) != 0) {
    return 1;
  }
  if (v4)
  {
    BOOL v6 = (v5 & 0x780) == 0;
    uint64_t v7 = (v5 >> 5) & 1;
    if (v6) {
      return v7;
    }
    else {
      return 1;
    }
  }
  else
  {
    if ((v5 & 0x200) != 0) {
      return 1;
    }
    uint64_t v9 = a1;
    while ((*(_WORD *)(v9 + 44) & 8) != 0)
    {
      uint64_t v9 = *(void *)(v9 + 8);
      uint64_t v8 = 1;
      if ((*(unsigned char *)(*(void *)(v9 + 16) + 9) & 2) != 0) {
        return v8;
      }
    }
    if ((v5 & 0x80) != 0) {
      return 1;
    }
    uint64_t v10 = a1;
    while ((*(_WORD *)(v10 + 44) & 8) != 0)
    {
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v8 = 1;
      if ((*(unsigned char *)(*(void *)(v10 + 16) + 8) & 0x80) != 0) {
        return v8;
      }
    }
    if ((v5 & 0x100) != 0) {
      return 1;
    }
    uint64_t v11 = a1;
    while ((*(_WORD *)(v11 + 44) & 8) != 0)
    {
      uint64_t v11 = *(void *)(v11 + 8);
      uint64_t v8 = 1;
      if (*(unsigned char *)(*(void *)(v11 + 16) + 9)) {
        return v8;
      }
    }
    if ((v5 & 0x400) != 0) {
      return 1;
    }
    uint64_t v12 = a1;
    while ((*(_WORD *)(v12 + 44) & 8) != 0)
    {
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v8 = 1;
      if ((*(unsigned char *)(*(void *)(v12 + 16) + 9) & 4) != 0) {
        return v8;
      }
    }
    if ((v5 & 0x20) != 0) {
      return 1;
    }
    do
    {
      unsigned int v13 = *(unsigned __int16 *)(a1 + 44);
      uint64_t v8 = (v13 >> 3) & 1;
      if ((v13 & 8) == 0) {
        break;
      }
      a1 = *(void *)(a1 + 8);
    }
    while ((*(unsigned char *)(*(void *)(a1 + 16) + 8) & 0x20) == 0);
  }
  return v8;
}

void llvm::ReachingDefAnalysis::collectKilledOperands(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a3[1];
  uint64_t v7 = *((unsigned int *)a3 + 5);
  if (v6 != *a3)
  {
    unsigned int v11 = *((_DWORD *)a3 + 4);
    goto LABEL_12;
  }
  if (!v7)
  {
LABEL_9:
    unsigned int v11 = *((_DWORD *)a3 + 4);
    if (v7 < v11)
    {
      *((_DWORD *)a3 + 5) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      goto LABEL_33;
    }
LABEL_12:
    if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)a3 + 6)))
    {
      if (v11 >= 0x40) {
        v11 *= 2;
      }
      else {
        unsigned int v11 = 128;
      }
    }
    else if (v11 - v7 >= v11 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v11);
    unsigned int v11 = *((_DWORD *)a3 + 4);
    uint64_t v6 = a3[1];
LABEL_14:
    unsigned int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
    uint64_t v15 = *v14;
    if (*v14 == -1)
    {
      uint64_t v16 = 0;
LABEL_26:
      if (v16) {
        int v20 = v16;
      }
      else {
        int v20 = v14;
      }
      if (*v20 != a2)
      {
        if (*v20 == -2) {
          --*((_DWORD *)a3 + 6);
        }
        else {
          ++*((_DWORD *)a3 + 5);
        }
        *int v20 = a2;
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != a2)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        uint64_t v14 = (uint64_t *)(v6 + 8 * (v19 & v12));
        uint64_t v15 = *v14;
        if (*v14 == -1) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_33;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 8 * v7;
  uint64_t v10 = (uint64_t *)a3[1];
  while (*v10 != a2)
  {
    if (*v10 == -2) {
      uint64_t v8 = v10;
    }
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      if (!v8) {
        goto LABEL_9;
      }
      *uint64_t v8 = a2;
      --*((_DWORD *)a3 + 6);
      break;
    }
  }
LABEL_33:
  uint64_t v21 = *(unsigned int *)(a2 + 40);
  if (v21)
  {
    unsigned int v22 = *(_DWORD **)(a2 + 32);
    uint64_t v23 = &v22[8 * v21];
    do
    {
      unsigned int v24 = v22[1];
      if ((*v22 & 0x10000FF) != 0 || v24 == 0) {
        goto LABEL_109;
      }
      uint64_t UniqueReachingMIDef = llvm::ReachingDefAnalysis::getUniqueReachingMIDef(a1, a2, v24);
      if (!UniqueReachingMIDef) {
        goto LABEL_109;
      }
      uint64_t v27 = UniqueReachingMIDef;
      unsigned int v28 = v22[1];
      if (sub_1CC40EB0C(UniqueReachingMIDef)) {
        goto LABEL_109;
      }
      uint64_t v29 = *(unsigned int *)(v27 + 40);
      if (v29)
      {
        unsigned int v30 = 0;
        uint64_t v31 = *(int **)(v27 + 32);
        int v32 = &v31[8 * v29];
        do
        {
          int v33 = *v31;
          int v34 = v31[1];
          v31 += 8;
          BOOL v36 = (v33 & 0x10000FF) == 0x1000000 && v34 != 0;
          int v37 = (~v33 & 0x5000000) != 0 && v36;
          v30 += v37;
        }
        while (v31 != v32);
        if (v30 > 1) {
          goto LABEL_109;
        }
      }
      uint64_t v64 = v68;
      uint64_t v65 = v68;
      uint64_t v66 = 4;
      int v67 = 0;
      llvm::ReachingDefAnalysis::getGlobalUses(a1, v27, v28, (uint64_t)&v64);
      int v38 = 0;
      if (HIDWORD(v66) - v67 <= (*((_DWORD *)a3 + 5) - *((_DWORD *)a3 + 6)))
      {
        if (v65 == v64) {
          uint64_t v39 = HIDWORD(v66);
        }
        else {
          uint64_t v39 = v66;
        }
        uint64_t v40 = (unint64_t *)v65;
        if (v39)
        {
          uint64_t v41 = 8 * v39;
          uint64_t v40 = (unint64_t *)v65;
          while (*v40 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v40;
            v41 -= 8;
            if (!v41) {
              goto LABEL_104;
            }
          }
        }
        uint64_t v42 = &v65[8 * v39];
        if (v40 != (unint64_t *)v42)
        {
          uint64_t v44 = *a3;
          uint64_t v43 = a3[1];
          int v45 = *((_DWORD *)a3 + 4) - 1;
          if (v43 == *a3) {
            unsigned int v46 = *((_DWORD *)a3 + 5);
          }
          else {
            unsigned int v46 = *((_DWORD *)a3 + 4);
          }
          uint64_t v47 = (unint64_t *)(v43 + 8 * v46);
          unint64_t v48 = *v40;
          unsigned int v49 = *((_DWORD *)a3 + 5);
          uint64_t v50 = a3[1];
LABEL_68:
          if (v50 == v44)
          {
            unsigned int v51 = (unint64_t *)(v44 + 8 * v49);
            if (v49)
            {
              uint64_t v52 = 0;
              while (*(void *)(v44 + v52) != v48)
              {
                v52 += 8;
                if (8 * v49 == v52) {
                  goto LABEL_87;
                }
              }
              unsigned int v51 = (unint64_t *)(v44 + v52);
            }
LABEL_87:
            uint64_t v50 = *a3;
          }
          else
          {
            unsigned int v53 = ((v48 >> 4) ^ (v48 >> 9)) & v45;
            uint64_t v54 = (unint64_t *)(v43 + 8 * v53);
            unint64_t v55 = *v54;
            if (*v54 == -1)
            {
              unsigned __int16 v56 = 0;
LABEL_89:
              if (v56) {
                uint64_t v54 = v56;
              }
              unint64_t v60 = *v54;
            }
            else
            {
              unsigned __int16 v56 = 0;
              int v57 = 1;
              while (v55 != v48)
              {
                if (v56) {
                  BOOL v58 = 0;
                }
                else {
                  BOOL v58 = v55 == -2;
                }
                if (v58) {
                  unsigned __int16 v56 = v54;
                }
                unsigned int v59 = v53 + v57++;
                unsigned int v53 = v59 & v45;
                uint64_t v54 = (unint64_t *)(v43 + 8 * (v59 & v45));
                unint64_t v55 = *v54;
                if (*v54 == -1) {
                  goto LABEL_89;
                }
              }
              unint64_t v60 = v48;
            }
            if (v60 == v48) {
              unsigned int v51 = v54;
            }
            else {
              unsigned int v51 = v47;
            }
            unsigned int v49 = *((_DWORD *)a3 + 5);
            uint64_t v50 = a3[1];
          }
          if (v50 == v44) {
            unsigned int v61 = v49;
          }
          else {
            unsigned int v61 = *((_DWORD *)a3 + 4);
          }
          if (v51 == (unint64_t *)(v50 + 8 * v61))
          {
            int v38 = 0;
            goto LABEL_105;
          }
          uint64_t v62 = v40 + 1;
          while (v62 != (unint64_t *)v42)
          {
            unint64_t v63 = *v62++;
            unint64_t v48 = v63;
            if (v63 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v40 = v62 - 1;
              goto LABEL_68;
            }
          }
        }
LABEL_104:
        int v38 = 1;
      }
LABEL_105:
      if (v65 != v64) {
        free(v65);
      }
      if (v38) {
        llvm::ReachingDefAnalysis::collectKilledOperands(a1, v27, a3);
      }
LABEL_109:
      v22 += 8;
    }
    while (v22 != v23);
  }
}

uint64_t llvm::ReachingDefAnalysis::isSafeToDefRegAt(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = &v9;
  uint64_t v6 = &v9;
  uint64_t v7 = 1;
  int v8 = 0;
  uint64_t isSafeToDefRegAt = llvm::ReachingDefAnalysis::isSafeToDefRegAt(a1, a2, a3, (uint64_t *)&v5);
  if (v6 != v5) {
    free(v6);
  }
  return isSafeToDefRegAt;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToDefRegAt(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (llvm::ReachingDefAnalysis::isRegUsedAfter((uint64_t)a1, a2, a3))
  {
    uint64_t result = llvm::ReachingDefAnalysis::getReachingLocalMIDef(a1, v5, a3);
    if (!result) {
      return result;
    }
    BOOL v58 = v62;
    unsigned int v59 = v62;
    uint64_t v60 = 2;
    int v61 = 0;
    llvm::ReachingDefAnalysis::getGlobalUses((uint64_t *)a1, result, a3, (uint64_t)&v58);
    int v9 = 0;
    if (HIDWORD(v60) - v61 > (*((_DWORD *)a4 + 5) - *((_DWORD *)a4 + 6))) {
      goto LABEL_54;
    }
    if (v59 == v58) {
      uint64_t v10 = HIDWORD(v60);
    }
    else {
      uint64_t v10 = v60;
    }
    unsigned int v11 = (unint64_t *)v59;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      unsigned int v11 = (unint64_t *)v59;
      while (*v11 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v11;
        v12 -= 8;
        if (!v12) {
          goto LABEL_53;
        }
      }
    }
    unsigned int v13 = &v59[8 * v10];
    if (v11 != (unint64_t *)v13)
    {
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      int v16 = *((_DWORD *)a4 + 4) - 1;
      if (v14 == *a4) {
        unsigned int v17 = *((_DWORD *)a4 + 5);
      }
      else {
        unsigned int v17 = *((_DWORD *)a4 + 4);
      }
      BOOL v18 = (unint64_t *)(v14 + 8 * v17);
      unint64_t v19 = *v11;
      unsigned int v20 = *((_DWORD *)a4 + 5);
      uint64_t v21 = a4[1];
LABEL_17:
      if (v21 == v15)
      {
        unsigned int v22 = (unint64_t *)(v15 + 8 * v20);
        if (v20)
        {
          uint64_t v23 = 0;
          while (*(void *)(v15 + v23) != v19)
          {
            v23 += 8;
            if (8 * v20 == v23) {
              goto LABEL_36;
            }
          }
          unsigned int v22 = (unint64_t *)(v15 + v23);
        }
LABEL_36:
        uint64_t v21 = *a4;
      }
      else
      {
        unsigned int v24 = ((v19 >> 4) ^ (v19 >> 9)) & v16;
        int v25 = (unint64_t *)(v14 + 8 * v24);
        unint64_t v26 = *v25;
        if (*v25 == -1)
        {
          uint64_t v27 = 0;
LABEL_38:
          if (v27) {
            int v25 = v27;
          }
          unint64_t v31 = *v25;
        }
        else
        {
          uint64_t v27 = 0;
          int v28 = 1;
          while (v26 != v19)
          {
            if (v27) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v26 == -2;
            }
            if (v29) {
              uint64_t v27 = v25;
            }
            unsigned int v30 = v24 + v28++;
            unsigned int v24 = v30 & v16;
            int v25 = (unint64_t *)(v14 + 8 * (v30 & v16));
            unint64_t v26 = *v25;
            if (*v25 == -1) {
              goto LABEL_38;
            }
          }
          unint64_t v31 = v19;
        }
        if (v31 == v19) {
          unsigned int v22 = v25;
        }
        else {
          unsigned int v22 = v18;
        }
        unsigned int v20 = *((_DWORD *)a4 + 5);
        uint64_t v21 = a4[1];
      }
      if (v21 == v15) {
        unsigned int v32 = v20;
      }
      else {
        unsigned int v32 = *((_DWORD *)a4 + 4);
      }
      if (v22 == (unint64_t *)(v21 + 8 * v32))
      {
        int v9 = 0;
LABEL_54:
        if (v59 != v58) {
          free(v59);
        }
        if (!v9) {
          return 0;
        }
        goto LABEL_57;
      }
      int v33 = v11 + 1;
      while (v33 != (unint64_t *)v13)
      {
        unint64_t v34 = *v33++;
        unint64_t v19 = v34;
        if (v34 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v11 = v33 - 1;
          goto LABEL_17;
        }
      }
    }
LABEL_53:
    int v9 = 1;
    goto LABEL_54;
  }
LABEL_57:
  uint64_t v35 = *(void *)(v5 + 24);
  if (!llvm::ReachingDefAnalysis::isRegDefinedAfter(a1, v5, a3)) {
    return 1;
  }
  uint64_t v57 = v35 + 48;
  if (v35 + 48 == v5) {
    return 1;
  }
  unint64_t v55 = a1;
  uint64_t v37 = *a4;
  uint64_t v36 = a4[1];
  uint64_t v38 = *((unsigned int *)a4 + 4);
  uint64_t v39 = *((unsigned int *)a4 + 5);
  int v56 = v38 - 1;
  while (1)
  {
    if (v36 == v37)
    {
      if (v39)
      {
        uint64_t v40 = 0;
        while (*(void *)(v36 + v40) != v5)
        {
          v40 += 8;
          if (8 * v39 == v40)
          {
            unsigned int v41 = v39;
            goto LABEL_80;
          }
        }
        uint64_t v43 = (uint64_t *)(v36 + v40);
        unsigned int v41 = v39;
        uint64_t v50 = v36;
      }
      else
      {
        unsigned int v41 = 0;
LABEL_80:
        uint64_t v50 = v36;
        uint64_t v43 = (uint64_t *)(v36 + 8 * v39);
      }
    }
    else
    {
      unsigned int v42 = v56 & ((v5 >> 4) ^ (v5 >> 9));
      uint64_t v43 = (uint64_t *)(v36 + 8 * v42);
      uint64_t v44 = *v43;
      if (*v43 == -1)
      {
        int v45 = 0;
LABEL_82:
        if (v45) {
          uint64_t v43 = v45;
        }
        uint64_t v49 = *v43;
      }
      else
      {
        int v45 = 0;
        int v46 = 1;
        while (v44 != v5)
        {
          if (v45) {
            BOOL v47 = 0;
          }
          else {
            BOOL v47 = v44 == -2;
          }
          if (v47) {
            int v45 = v43;
          }
          unsigned int v48 = v42 + v46++;
          unsigned int v42 = v48 & v56;
          uint64_t v43 = (uint64_t *)(v36 + 8 * (v48 & v56));
          uint64_t v44 = *v43;
          if (*v43 == -1) {
            goto LABEL_82;
          }
        }
        uint64_t v49 = v5;
      }
      if (v49 != v5) {
        uint64_t v43 = (uint64_t *)(v36 + 8 * v38);
      }
      unsigned int v41 = v39;
      uint64_t v50 = v37;
    }
    if (v36 != v50) {
      unsigned int v41 = v38;
    }
    if (v43 == (uint64_t *)(v36 + 8 * v41)) {
      break;
    }
LABEL_91:
    if (!v5) {
      goto LABEL_101;
    }
LABEL_98:
    if ((*(unsigned char *)v5 & 4) == 0)
    {
LABEL_101:
      while ((*(_WORD *)(v5 + 44) & 8) != 0)
        uint64_t v5 = *(void *)(v5 + 8);
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v57) {
      return 1;
    }
  }
  uint64_t v51 = *(unsigned int *)(v5 + 40);
  if (!v51) {
    goto LABEL_98;
  }
  uint64_t v52 = *(void *)(v5 + 32);
  uint64_t v53 = v52 + 32 * v51;
  uint64_t v54 = *((void *)v55 + 32);
  while (!sub_1CC40DBF8(*(_DWORD *)v52, *(_DWORD *)(v52 + 4), a3, v54))
  {
    v52 += 32;
    if (v52 == v53) {
      goto LABEL_91;
    }
  }
  return 0;
}

void sub_1CC40F5B8(uint64_t a1)
{
  sub_1CC40F778(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC40F5F0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

double sub_1CC40F5FC@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 12;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void llvm::callDefaultCtor<llvm::ReachingDefAnalysis>()
{
}

void sub_1CC40F778(uint64_t a1)
{
  *(void *)a1 = &unk_1F26113C0;
  unsigned int v2 = *(char **)(a1 + 520);
  uint64_t v3 = *(unsigned int *)(a1 + 528);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = v2 - 24;
    do
    {
      uint64_t v15 = (void **)&v5[v4];
      sub_1CC40F8F8(&v15);
      v4 -= 24;
    }
    while (v4);
    unsigned int v2 = *(char **)(a1 + 520);
  }
  if (v2 != (char *)(a1 + 536)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 496), 8);
  uint64_t v6 = *(char **)(a1 + 376);
  uint64_t v7 = *(unsigned int *)(a1 + 384);
  if (v7)
  {
    uint64_t v8 = 24 * v7;
    do
    {
      int v9 = *(void **)&v6[v8 - 24];
      if (v9)
      {
        *(void *)&v6[v8 - 16] = v9;
        operator delete(v9);
      }
      v8 -= 24;
    }
    while (v8);
    uint64_t v6 = *(char **)(a1 + 376);
  }
  if (v6 != (char *)(a1 + 392)) {
    free(v6);
  }
  uint64_t v10 = *(void **)(a1 + 352);
  if (v10)
  {
    *(void *)(a1 + 360) = v10;
    operator delete(v10);
  }
  unsigned int v11 = *(void **)(a1 + 264);
  if (v11 != (void *)(a1 + 280)) {
    free(v11);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v12 = *(void **)(a1 + 176);
  if (v12 != (void *)(a1 + 192)) {
    free(v12);
  }
  unsigned int v13 = *(void **)(a1 + 104);
  if (v13 != (void *)(a1 + 120)) {
    free(v13);
  }
  uint64_t v14 = *(void **)(a1 + 32);
  if (v14 != (void *)(a1 + 48)) {
    free(v14);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC40F8F8(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_1CC40F97C(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1CC40F97C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      if (*v3 != v3 + 2) {
        free(*v3);
      }
      MEMORY[0x1D25D9CE0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t **sub_1CC40F9DC(uint64_t **result, int *a2)
{
  uint64_t v3 = result;
  if (result[5])
  {
    uint64_t v8 = result + 3;
  }
  else
  {
    uint64_t v4 = *((unsigned int *)result + 2);
    int v5 = *a2;
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v6 = 4 * v4;
    uint64_t v7 = *result;
    while (*(_DWORD *)v7 != v5)
    {
      uint64_t v7 = (uint64_t *)((char *)v7 + 4);
      v6 -= 4;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (v6) {
      return result;
    }
LABEL_8:
    if (v4 <= 1)
    {
LABEL_9:
      if (v4 >= *((_DWORD *)result + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)*result + v4) = v5;
      ++*((_DWORD *)result + 2);
      return result;
    }
    do
    {
      int v9 = (int *)*v3 + v4 - 1;
      sub_1CD41B018(v3 + 3, v9, v9);
      LODWORD(v4) = *((_DWORD *)v3 + 2) - 1;
      *((_DWORD *)v3 + 2) = v4;
    }
    while (v4);
    uint64_t v8 = v3 + 3;
  }

  return sub_1CD41B018(v8, a2, a2);
}

void llvm::RegAllocBase::init(llvm::RegAllocBase *this, llvm::VirtRegMap *a2, llvm::LiveIntervals *a3, llvm::LiveRegMatrix *a4)
{
  uint64_t v6 = (llvm::MachineRegisterInfo *)*((void *)a2 + 31);
  uint64_t v8 = *((void *)a2 + 33);
  uint64_t v7 = (const llvm::MachineFunction *)*((void *)a2 + 34);
  *((void *)this + 1) = v8;
  *((void *)this + 2) = v6;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  *((void *)this + 5) = a4;
  llvm::MachineRegisterInfo::freezeReservedRegs(v6, v7);
  int v9 = (const llvm::MachineFunction *)*((void *)a2 + 34);

  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegAllocBase *)((char *)this + 48), v9);
}

llvm::Timer *llvm::RegAllocBase::seedLiveRegs(llvm::RegAllocBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::NamedRegionTimer::NamedRegionTimer(&v20, "seed", 4uLL, "Seed Live Regs", 0xEuLL, "regalloc", 8uLL, a8, (uint64_t)"Register Allocation", 19, llvm::TimePassesIsEnabled);
  int v9 = *(_DWORD *)(*((void *)this + 2) + 32);
  if (!v9)
  {
LABEL_13:
    double result = v20;
    if (v20) {
      return (llvm::Timer *)llvm::Timer::stopTimer(result);
    }
    return result;
  }
  int v10 = 0;
  while (1)
  {
    uint64_t v11 = v10 & 0x7FFFFFFF;
    uint64_t v12 = *(void *)(*(void *)(*((void *)this + 2) + 24) + 16 * v11 + 8);
    if (v12)
    {
      while ((*(_DWORD *)v12 & 0x80000000) != 0)
      {
        uint64_t v12 = *(void *)(v12 + 24);
        if (!v12) {
          goto LABEL_4;
        }
      }
      uint64_t v13 = *((void *)this + 4);
      uint64_t v14 = (void *)(v13 + 408);
      uint64_t v15 = *(unsigned int *)(v13 + 416);
      if (v11 >= v15)
      {
        sub_1CB9153B8((uint64_t)v14, v11 - v15 + 1, *(void *)(v13 + 424));
LABEL_16:
        operator new();
      }
      uint64_t v16 = *(void *)(*v14 + 8 * v11);
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v17 = *(_DWORD *)(v16 + 112) & 0x7FFFFFFF;
      if (!*(_DWORD *)(*(void *)(*((void *)this + 3) + 280) + 4 * v17)) {
        break;
      }
    }
LABEL_4:
    if (++v10 == v9) {
      goto LABEL_13;
    }
  }
  uint64_t v18 = *((void *)this + 39);
  if (v18)
  {
    if ((*(unsigned int (**)(uint64_t, void, unint64_t))(*(void *)v18 + 48))(v18, *((void *)this + 1), *(void *)(*(void *)(*((void *)this + 2) + 24) + 16 * v17) & 0xFFFFFFFFFFFFFFF8))
    {
      (*(void (**)(llvm::RegAllocBase *, uint64_t))(*(void *)this + 40))(this, v16);
    }
    goto LABEL_4;
  }
  sub_1CB920400();
  return (llvm::Timer *)llvm::Timer::stopTimer(result);
}

void *llvm::RegAllocBase::enqueue(void *this, const llvm::LiveInterval *a2)
{
  uint64_t v2 = *((_DWORD *)a2 + 28) & 0x7FFFFFFF;
  if (!*(_DWORD *)(*(void *)(this[3] + 280) + 4 * v2))
  {
    uint64_t v3 = this;
    uint64_t v4 = this[39];
    if (v4)
    {
      this = (void *)(*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)v4 + 48))(v4, v3[1], *(void *)(*(void *)(v3[2] + 24) + 16 * v2) & 0xFFFFFFFFFFFFFFF8);
      if (this)
      {
        uint64_t v6 = *(uint64_t (**)(void *, const llvm::LiveInterval *))(*v3 + 40);
        return (void *)v6(v3, a2);
      }
    }
    else
    {
      sub_1CB920400();
      return (void *)llvm::RegAllocBase::allocatePhysRegs(v7);
    }
  }
  return this;
}

unsigned int *llvm::RegAllocBase::allocatePhysRegs(llvm::RegAllocBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v66[2] = *MEMORY[0x1E4F143B8];
  llvm::RegAllocBase::seedLiveRegs(this, a2, a3, a4, a5, a6, a7, a8);
  double result = (unsigned int *)(*(uint64_t (**)(llvm::RegAllocBase *))(*(void *)this + 48))(this);
  if (result)
  {
    int v10 = result;
    do
    {
      uint64_t v11 = *((void *)this + 2);
      uint64_t v12 = v10[28];
      if ((v12 & 0x80000000) != 0) {
        uint64_t v13 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v13 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v12);
      }
      uint64_t v14 = *v13;
      if (v14)
      {
        while ((*(_DWORD *)v14 & 0x80000000) != 0)
        {
          uint64_t v14 = *(void *)(v14 + 24);
          if (!v14) {
            goto LABEL_32;
          }
        }
        ++*(_DWORD *)(*((void *)this + 5) + 272);
        uint64_t v64 = v66;
        uint64_t v65 = 0x400000000;
        unsigned int v15 = (*(uint64_t (**)(llvm::RegAllocBase *, unsigned int *, void **))(*(void *)this + 56))(this, v10, &v64);
        if (v15)
        {
          if (v15 == -1)
          {
            uint64_t v36 = *((void *)this + 2);
            uint64_t v37 = v10[28];
            if ((v37 & 0x80000000) != 0) {
              uint64_t v38 = (uint64_t *)(*(void *)(v36 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v38 = (uint64_t *)(*(void *)(v36 + 272) + 8 * v37);
            }
            uint64_t v39 = *v38;
            if (v39)
            {
              uint64_t v40 = *(void *)(v39 + 8);
LABEL_47:
              uint64_t v41 = v40;
              while (1)
              {
                uint64_t v39 = *(void *)(v39 + 24);
                if (!v39) {
                  break;
                }
                uint64_t v40 = *(void *)(v39 + 8);
                if (v40 != v41)
                {
                  if (**(unsigned __int16 **)(v41 + 16) - 1 > 1) {
                    goto LABEL_47;
                  }
                  break;
                }
              }
            }
            else
            {
              uint64_t v41 = 0;
            }
            uint64_t v49 = (unsigned __int16 ***)(*(void *)(*(void *)(v36 + 24) + 16 * (v37 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            unsigned int v50 = *((unsigned __int16 *)*v49 + 12);
            uint64_t v51 = *((void *)this + 6);
            if (*((_DWORD *)this + 14) != *(_DWORD *)(v51 + 24 * *((unsigned __int16 *)*v49 + 12))) {
              llvm::RegisterClassInfo::compute((uint64_t *)this + 6, v49);
            }
            uint64_t v52 = v51 + 24 * v50;
            if (!*(_DWORD *)(v52 + 4))
            {
LABEL_74:
              unint64_t v55 = "no registers from class available to allocate";
              goto LABEL_76;
            }
            if (!v41)
            {
              unint64_t v55 = "ran out of registers during register allocation";
LABEL_76:
              llvm::report_fatal_error((llvm *)v55, (const llvm::Twine *)1);
            }
            uint64_t v53 = *(unsigned __int16 **)(v52 + 16);
            if (**(unsigned __int16 **)(v41 + 16) - 1 > 1)
            {
              uint64_t v54 = **(void **)(*(void *)(*(void *)(*(void *)(v41 + 24) + 32) + 32) + 2064);
              uint64_t v62 = "ran out of registers during register allocation";
              __int16 v63 = 259;
              llvm::LLVMContext::emitError(v54, (uint64_t)&v62);
            }
            else
            {
              llvm::MachineInstr::emitError(v41, (uint64_t)"inline assembly requires more registers than available", 54);
            }
            *(_DWORD *)(*(void *)(*((void *)this + 3) + 280) + 4 * (v10[28] & 0x7FFFFFFF)) = *v53;
          }
          else
          {
            llvm::LiveRegMatrix::assign(*((void **)this + 5), (llvm::LiveInterval *)v10, v15);
          }
        }
        uint64_t v16 = v64;
        if (v65)
        {
          uint64_t v17 = (char *)v64 + 4 * v65;
          while (1)
          {
            uint64_t v18 = *((void *)this + 4);
            uint64_t v19 = *v16 & 0x7FFFFFFF;
            unsigned int v20 = (void *)(v18 + 408);
            uint64_t v21 = *(unsigned int *)(v18 + 416);
            if ((*v16 & 0x7FFFFFFFu) >= v21)
            {
              sub_1CB9153B8((uint64_t)v20, v19 - v21 + 1, *(void *)(v18 + 424));
LABEL_30:
              operator new();
            }
            uint64_t v22 = *(void *)(*v20 + 8 * v19);
            if (!v22) {
              goto LABEL_30;
            }
            uint64_t v23 = *((void *)this + 2);
            uint64_t v24 = *(unsigned int *)(v22 + 112);
            if ((v24 & 0x80000000) != 0) {
              int v25 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
            }
            else {
              int v25 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v24);
            }
            uint64_t v26 = *v25;
            if (v26)
            {
              while ((*(_DWORD *)v26 & 0x80000000) != 0)
              {
                uint64_t v26 = *(void *)(v26 + 24);
                if (!v26) {
                  goto LABEL_53;
                }
              }
              uint64_t v27 = v24 & 0x7FFFFFFF;
              if (!*(_DWORD *)(*(void *)(*((void *)this + 3) + 280) + 4 * v27))
              {
                uint64_t v28 = *((void *)this + 39);
                if (!v28)
                {
                  sub_1CB920400();
                  goto LABEL_74;
                }
                if ((*(unsigned int (**)(uint64_t, void, unint64_t))(*(void *)v28 + 48))(v28, *((void *)this + 1), *(void *)(*(void *)(v23 + 24) + 16 * v27) & 0xFFFFFFFFFFFFFFF8))
                {
                  (*(void (**)(llvm::RegAllocBase *, uint64_t))(*(void *)this + 40))(this, v22);
                }
              }
            }
            else
            {
LABEL_53:
              (*(void (**)(llvm::RegAllocBase *, uint64_t))(*(void *)this + 64))(this, v22);
              uint64_t v42 = *((void *)this + 4);
              uint64_t v43 = *(_DWORD *)(v22 + 112) & 0x7FFFFFFF;
              uint64_t v44 = *(void *)(v42 + 408);
              uint64_t v45 = *(void *)(v44 + 8 * v43);
              if (v45)
              {
                uint64_t v46 = *(void *)(v45 + 104);
                if (v46)
                {
                  do
                  {
                    uint64_t v59 = *(void *)(v46 + 96);
                    uint64_t v60 = *(void *)(v46 + 104);
                    *(void *)(v46 + 96) = 0;
                    if (v59)
                    {
                      sub_1CB833A08(v59, *(void **)(v59 + 8));
                      MEMORY[0x1D25D9CE0](v59, 0x1020C4062D53EE8);
                    }
                    int v61 = *(void **)(v46 + 64);
                    if (v61 != (void *)(v46 + 80)) {
                      free(v61);
                    }
                    if (*(void *)v46 != v46 + 16) {
                      free(*(void **)v46);
                    }
                    uint64_t v46 = v60;
                  }
                  while (v60);
                }
                uint64_t v47 = *(void *)(v45 + 96);
                *(void *)(v45 + 96) = 0;
                *(void *)(v45 + 104) = 0;
                if (v47)
                {
                  sub_1CB833A08(v47, *(void **)(v47 + 8));
                  MEMORY[0x1D25D9CE0](v47, 0x1020C4062D53EE8);
                }
                unsigned int v48 = *(void **)(v45 + 64);
                if (v48 != (void *)(v45 + 80)) {
                  free(v48);
                }
                if (*(void *)v45 != v45 + 16) {
                  free(*(void **)v45);
                }
                MEMORY[0x1D25D9CE0](v45, 0x10A0C408DA535C6);
                uint64_t v44 = *(void *)(v42 + 408);
              }
              *(void *)(v44 + 8 * v43) = 0;
            }
            if (++v16 == (_DWORD *)v17)
            {
              uint64_t v16 = v64;
              break;
            }
          }
        }
        if (v16 != (_DWORD *)v66) {
          free(v16);
        }
      }
      else
      {
LABEL_32:
        (*(void (**)(llvm::RegAllocBase *, unsigned int *))(*(void *)this + 64))(this, v10);
        uint64_t v29 = *((void *)this + 4);
        uint64_t v30 = v10[28] & 0x7FFFFFFF;
        uint64_t v31 = *(void *)(v29 + 408);
        uint64_t v32 = *(void *)(v31 + 8 * v30);
        if (v32)
        {
          uint64_t v33 = *(void *)(v32 + 104);
          if (v33)
          {
            do
            {
              uint64_t v56 = *(void *)(v33 + 96);
              uint64_t v57 = *(void *)(v33 + 104);
              *(void *)(v33 + 96) = 0;
              if (v56)
              {
                sub_1CB833A08(v56, *(void **)(v56 + 8));
                MEMORY[0x1D25D9CE0](v56, 0x1020C4062D53EE8);
              }
              BOOL v58 = *(void **)(v33 + 64);
              if (v58 != (void *)(v33 + 80)) {
                free(v58);
              }
              if (*(void *)v33 != v33 + 16) {
                free(*(void **)v33);
              }
              uint64_t v33 = v57;
            }
            while (v57);
          }
          uint64_t v34 = *(void *)(v32 + 96);
          *(void *)(v32 + 96) = 0;
          *(void *)(v32 + 104) = 0;
          if (v34)
          {
            sub_1CB833A08(v34, *(void **)(v34 + 8));
            MEMORY[0x1D25D9CE0](v34, 0x1020C4062D53EE8);
          }
          uint64_t v35 = *(void **)(v32 + 64);
          if (v35 != (void *)(v32 + 80)) {
            free(v35);
          }
          if (*(void *)v32 != v32 + 16) {
            free(*(void **)v32);
          }
          MEMORY[0x1D25D9CE0](v32, 0x10A0C408DA535C6);
          uint64_t v31 = *(void *)(v29 + 408);
        }
        *(void *)(v31 + 8 * v30) = 0;
      }
      double result = (unsigned int *)(*(uint64_t (**)(llvm::RegAllocBase *))(*(void *)this + 48))(this);
      int v10 = result;
    }
    while (result);
  }
  return result;
}

char *llvm::RegAllocBase::postOptimization(char **this)
{
  uint64_t v2 = (*((uint64_t (**)(char **))*this + 4))(this);
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = this[40];
  double result = this[41];
  uint64_t v5 = 336;
  if (result == v4) {
    uint64_t v5 = 340;
  }
  uint64_t v6 = *(unsigned int *)((char *)this + v5);
  uint64_t v7 = (llvm::MachineInstr **)this[41];
  if (v6)
  {
    uint64_t v8 = 0;
    while (*(void *)&result[v8] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v8 += 8;
      if (8 * v6 == v8) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = (llvm::MachineInstr **)&result[v8];
  }
  uint64_t v11 = &result[8 * v6];
  if (v7 != (llvm::MachineInstr **)v11)
  {
    uint64_t v12 = *v7;
LABEL_21:
    uint64_t v13 = (int32x2_t *)*((void *)this[4] + 36);
    int32x2_t v14 = v13[46];
    uint64_t v15 = v13[48].u32[0];
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v17 = (llvm::MachineInstr **)(*(void *)&v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v12) {
        goto LABEL_23;
      }
      int v22 = 1;
      while (v18 != (llvm::MachineInstr *)-4096)
      {
        int v23 = v16 + v22++;
        uint64_t v16 = v23 & (v15 - 1);
        uint64_t v18 = *(llvm::MachineInstr **)(*(void *)&v14 + 16 * v16);
        if (v18 == v12)
        {
          uint64_t v17 = (llvm::MachineInstr **)(*(void *)&v14 + 16 * v16);
          goto LABEL_23;
        }
      }
    }
    uint64_t v17 = (llvm::MachineInstr **)(*(void *)&v14 + 16 * v15);
LABEL_23:
    if (v17 != (llvm::MachineInstr **)(*(void *)&v14 + 16 * v15))
    {
      unint64_t v19 = (unint64_t)v17[1] & 0xFFFFFFFFFFFFFFF8;
      char *v17 = (llvm::MachineInstr *)-8192;
      v13[47] = vadd_s32(v13[47], (int32x2_t)0x1FFFFFFFFLL);
      *(void *)(v19 + 16) = 0;
    }
    llvm::MachineInstr::eraseFromParent(v12);
    unsigned int v20 = (unint64_t *)(v7 + 1);
    while (v20 != (unint64_t *)v11)
    {
      unint64_t v21 = *v20++;
      uint64_t v12 = (llvm::MachineInstr *)v21;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v7 = (llvm::MachineInstr **)(v20 - 1);
        goto LABEL_21;
      }
    }
    uint64_t v4 = this[40];
    double result = this[41];
  }
LABEL_7:
  if (result == v4)
  {
LABEL_8:
    *(char **)((char *)this + 340) = 0;
    return result;
  }
  uint64_t v9 = *((unsigned int *)this + 84);
  if (v9 < 0x21 || 4 * (*((_DWORD *)this + 85) - *((_DWORD *)this + 86)) >= v9)
  {
    double result = (char *)memset(result, 255, 8 * v9);
    goto LABEL_8;
  }

  return (char *)llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 40);
}

uint64_t sub_1CC410818()
{
  uint64_t v3 = &llvm::RegAllocBase::VerifyEnabled;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify during register allocation";
  v1.n128_u64[1] = 33;
  sub_1CD4A42A8((llvm::cl::Option *)&unk_1EBCD20B0, "verify-regalloc", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &unk_1EBCD20B0, &dword_1CB82C000);
}

void *sub_1CC4108A4(void *a1)
{
  return a1;
}

void sub_1CC4108D8(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeLiveDebugVariablesPass(a1, a2);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeRegisterCoalescerPass(a1, v3);
  llvm::initializeMachineSchedulerPass(a1, v4);
  llvm::initializeLiveStacksPass(a1, v5);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeVirtRegMapPass(a1, v6);
  llvm::initializeLiveRegMatrixPass(a1, v7);
  operator new();
}

uint64_t sub_1CC4109C0()
{
  return 1;
}

uint64_t sub_1CC4109C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61BEA0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260E110;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  sub_1CC4124A8((uint64_t)v4, a2);
  *(void *)(a1 + 248) = &unk_1F2611480;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + sub_1CC3F44F0((uint64_t)this + 320) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = a1 + 360;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 4;
  *(void *)(a1 + 368) = a1 + 384;
  *(void *)(a1 + 376) = 0x600000000;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = a1 + 456;
  *(void *)(a1 + 448) = 0x600000000;
  *(_DWORD *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  if (v5)
  {
    if (v5 == v4)
    {
      *(void *)(a1 + 560) = a1 + 536;
      (*(void (**)(void *))(v4[0] + 24))(v4);
    }
    else
    {
      *(void *)(a1 + 560) = (*(uint64_t (**)(void))(*v5 + 16))();
    }
  }
  else
  {
    *(void *)(a1 + 560) = 0;
  }
  *(void *)(a1 + 568) = a1 + 600;
  *(void *)(a1 + 576) = a1 + 600;
  *(void *)(a1 + 584) = 32;
  *(_DWORD *)(a1 + 592) = 0;
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  *(void *)a1 = &unk_1F26114D8;
  *(void *)(a1 + 248) = &unk_1F26115C8;
  *(void *)(a1 + 856) = &unk_1F2611620;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(void *)(a1 + 912) = a1 + 928;
  *(void *)(a1 + 920) = 0x600000000;
  *(_DWORD *)(a1 + 976) = 0;
  return a1;
}

void llvm::createBasicRegisterAllocator()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC410D90(void *a1, void *a2)
{
  *a2 = *a1;
  *a1 = a2;
  uint64_t result = a1[2];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)result + 24))(result, a2[1], a2[2], a2[5], a2[3], a2[4]);
  }
  return result;
}

void *sub_1CC410DDC(void *result, void *a2)
{
  int v2 = result;
  while (1)
  {
    uint64_t v3 = (void **)v2;
    int v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (v2 == a2)
    {
      uint64_t result = (void *)result[2];
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, void))(*result + 32))(result, a2[1], a2[2]);
        a2 = *v3;
      }
      *uint64_t v3 = (void *)*a2;
      return result;
    }
  }
  return result;
}

void sub_1CC410E50()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC410F5C(void *a1)
{
  *a1 = &unk_1F26114D8;
  int v2 = a1 + 31;
  a1[31] = &unk_1F26115C8;
  a1[107] = &unk_1F2611620;
  uint64_t v3 = (void *)a1[114];
  if (v3 != a1 + 116) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[110];
  if (v4)
  {
    a1[111] = v4;
    operator delete(v4);
  }
  uint64_t v5 = a1[109];
  a1[109] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  sub_1CD569AD4(v2);
  *a1 = &unk_1F260E110;
  uint64_t v6 = (void *)a1[22];
  if (v6 != a1 + 24) {
    free(v6);
  }
  uint64_t v7 = (void *)a1[13];
  if (v7 != a1 + 15) {
    free(v7);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8 != a1 + 6) {
    free(v8);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC4110AC(void *a1)
{
  sub_1CC410F5C(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC4110E4()
{
  return "Basic Register Allocator";
}

void sub_1CC4110F4(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61EEDF);
  sub_1CB843600(a2, v4, (uint64_t)&unk_1EA61EEDF);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveStacks::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveStacks::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::VirtRegMap::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::VirtRegMap::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveRegMatrix::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveRegMatrix::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC4112EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void sub_1CC411324(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 864) = a2;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::VirtRegMap::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::VirtRegMap *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::VirtRegMap::ID);
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::LiveIntervals::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  uint64_t v12 = (llvm::LiveIntervals *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::LiveIntervals::ID);
  uint64_t v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_14:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::LiveRegMatrix::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  uint64_t v17 = (llvm::LiveRegMatrix *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::LiveRegMatrix::ID);
  llvm::RegAllocBase::init((llvm::RegAllocBase *)(a1 + 248), v7, v12, v17);
  uint64_t v18 = *(uint64_t **)(a1 + 8);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (v19 == v20)
  {
LABEL_19:
    uint64_t v21 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v19 != &llvm::MachineLoopInfo::ID)
    {
      v19 += 16;
      if (v19 == v20) {
        goto LABEL_19;
      }
    }
    uint64_t v21 = *(void *)(v19 + 8);
  }
  uint64_t v22 = *(void *)(a1 + 864);
  int8x16_t v30 = *(int8x16_t *)(a1 + 272);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v21 + 96))(v21, &llvm::MachineLoopInfo::ID);
  uint64_t v24 = *(uint64_t **)(a1 + 8);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  if (v25 == v26)
  {
LABEL_24:
    uint64_t v27 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v25 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v25 += 16;
      if (v25 == v26) {
        goto LABEL_24;
      }
    }
    uint64_t v27 = *(void *)(v25 + 8);
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v27 + 96))(v27, &llvm::MachineBlockFrequencyInfo::ID);
  v31[0] = &unk_1F2611668;
  v31[1] = v22;
  int8x16_t v32 = vextq_s8(v30, v30, 8uLL);
  uint64_t v33 = v23;
  uint64_t v34 = v28;
  llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints((llvm::VirtRegAuxInfo *)v31);
  llvm::createInlineSpiller((llvm *)a1, *(llvm::MachineFunctionPass **)(a1 + 864), *(llvm::MachineFunction **)(a1 + 272), (llvm::VirtRegMap *)v31, v29);
}

double sub_1CC41166C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 2;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC411694@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

BOOL sub_1CC4116BC(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 280);
  unint64_t v4 = a2 & 0x7FFFFFFF;
  uint64_t v5 = (void *)(v3 + 408);
  unint64_t v6 = *(unsigned int *)(v3 + 416);
  BOOL v7 = v4 >= v6;
  unint64_t v8 = v4 - v6;
  if (v7)
  {
    sub_1CB9153B8((uint64_t)v5, v8 + 1, *(void *)(v3 + 424));
LABEL_8:
    operator new();
  }
  uint64_t v9 = *(const llvm::LiveInterval **)(*v5 + 8 * v4);
  if (!v9) {
    goto LABEL_8;
  }
  int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 272) + 280) + 4 * v4);
  if (v10)
  {
    llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v9);
    (*(void (**)(uint64_t, const llvm::LiveInterval *))(*(void *)(a1 + 248) + 64))(a1 + 248, v9);
  }
  else
  {
    *((_DWORD *)v9 + 18) = 0;
    *((_DWORD *)v9 + 2) = 0;
  }
  return v10 != 0;
}

uint64_t sub_1CC411870(uint64_t result, int a2)
{
  unint64_t v2 = a2 & 0x7FFFFFFF;
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 272) + 280) + 4 * v2)) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 280);
  uint64_t v5 = (void *)(v4 + 408);
  unint64_t v6 = *(unsigned int *)(v4 + 416);
  BOOL v7 = v2 >= v6;
  unint64_t v8 = v2 - v6;
  if (v7)
  {
    sub_1CB9153B8((uint64_t)v5, v8 + 1, *(void *)(v4 + 424));
LABEL_12:
    operator new();
  }
  uint64_t v9 = *(const llvm::LiveInterval **)(*v5 + 8 * v2);
  if (!v9) {
    goto LABEL_12;
  }
  double result = llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v3 + 288), v9);
  uint64_t v10 = *((_DWORD *)v9 + 28) & 0x7FFFFFFF;
  if (!*(_DWORD *)(*(void *)(*(void *)(v3 + 272) + 280) + 4 * v10))
  {
    uint64_t v11 = *(void *)(v3 + 560);
    if (v11)
    {
      double result = (*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)v11 + 48))(v11, *(void *)(v3 + 256), *(void *)(*(void *)(*(void *)(v3 + 264) + 24) + 16 * v10) & 0xFFFFFFFFFFFFFFF8);
      if (result)
      {
        uint64_t v12 = *(uint64_t (**)(void))(*(void *)(v3 + 248) + 40);
        return v12();
      }
    }
    else
    {
      sub_1CB920400();
      return sub_1CC411A94(v13);
    }
  }
  return result;
}

uint64_t sub_1CC411A94(uint64_t a1)
{
  return *(void *)(a1 + 872);
}

void sub_1CC411A9C(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[111];
  unint64_t v5 = a1[112];
  if ((unint64_t)v4 >= v5)
  {
    BOOL v7 = (void *)a1[110];
    uint64_t v8 = v4 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a2;
    unint64_t v6 = v13 + 8;
    if (v4 != v7)
    {
      do
      {
        uint64_t v14 = *--v4;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v4 != v7);
      uint64_t v4 = (void *)a1[110];
    }
    a1[110] = v13;
    a1[111] = v6;
    a1[112] = &v12[8 * v11];
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    unint64_t v6 = v4 + 1;
  }
  a1[111] = v6;
  uint64_t v15 = a1[110];
  if ((uint64_t)v6 - v15 >= 9)
  {
    unint64_t v16 = ((((unint64_t)v6 - v15) >> 3) - 2) >> 1;
    uint64_t v17 = (void *)(v15 + 8 * v16);
    uint64_t v18 = *v17;
    uint64_t v21 = *(v6 - 1);
    uint64_t v20 = v6 - 1;
    uint64_t v19 = v21;
    float v22 = *(float *)(v21 + 116);
    if (*(float *)(*v17 + 116) < v22)
    {
      do
      {
        uint64_t v23 = v17;
        *uint64_t v20 = v18;
        if (!v16) {
          break;
        }
        unint64_t v16 = (v16 - 1) >> 1;
        uint64_t v17 = (void *)(v15 + 8 * v16);
        uint64_t v18 = *v17;
        uint64_t v20 = v23;
      }
      while (*(float *)(*v17 + 116) < v22);
      *uint64_t v23 = v19;
    }
  }
}

uint64_t sub_1CC411BF8(uint64_t a1)
{
  __n128 v1 = *(char **)(a1 + 880);
  unint64_t v2 = *(char **)(a1 + 888);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = v2 - v1;
  if (v2 - v1 >= 9)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 >> 3;
    int64_t v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
    uint64_t v8 = *(char **)(a1 + 880);
    do
    {
      unint64_t v9 = v8;
      v8 += 8 * v5 + 8;
      uint64_t v10 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < v6 && *(float *)(*(void *)v8 + 116) < *(float *)(*((void *)v8 + 1) + 116))
      {
        v8 += 8;
        uint64_t v5 = v11;
      }
      *(void *)unint64_t v9 = *(void *)v8;
    }
    while (v5 <= v7);
    uint64_t v12 = v2 - 8;
    if (v8 == v12)
    {
      *(void *)uint64_t v8 = v3;
    }
    else
    {
      *(void *)uint64_t v8 = *(void *)v12;
      *(void *)uint64_t v12 = v3;
      uint64_t v13 = v8 - v1 + 8;
      if (v13 >= 9)
      {
        unint64_t v14 = (((unint64_t)v13 >> 3) - 2) >> 1;
        uint64_t v15 = &v1[8 * v14];
        uint64_t v16 = *(void *)v15;
        uint64_t v17 = *(void *)v8;
        float v18 = *(float *)(*(void *)v8 + 116);
        if (*(float *)(*(void *)v15 + 116) < v18)
        {
          do
          {
            uint64_t v19 = v15;
            *(void *)uint64_t v8 = v16;
            if (!v14) {
              break;
            }
            unint64_t v14 = (v14 - 1) >> 1;
            uint64_t v15 = &v1[8 * v14];
            uint64_t v16 = *(void *)v15;
            uint64_t v8 = v19;
          }
          while (*(float *)(*(void *)v15 + 116) < v18);
          *(void *)uint64_t v19 = v17;
        }
      }
    }
  }
  *(void *)(a1 + 888) -= 8;
  return v3;
}

uint64_t sub_1CC411D2C(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  v79[8] = *MEMORY[0x1E4F143B8];
  unsigned int v74 = v76;
  uint64_t v75 = 0x800000000;
  sub_1CC2356A0(*(_DWORD *)(a2 + 112), a1[17].i64[0], (uint64_t)&a1[18].i64[1], a1[18].i64[0], (uint64_t)&v69);
  uint64_t v5 = -v70;
  int v6 = v73;
  if (v73 != -(int)v70)
  {
    LODWORD(v36) = -(int)v70;
    do
    {
      uint64_t v37 = (unsigned __int16 *)((char *)v69 + 2 * v70 + 2 * (int)v36);
      if ((int)v5 >= 0) {
        uint64_t v37 = (unsigned __int16 *)(v72 + 2 * v36);
      }
      uint64_t v35 = *v37;
      int v38 = llvm::LiveRegMatrix::checkInterference(a1[18].i64[0], (llvm::LiveRange *)a2, *v37);
      if (v38 == 1)
      {
        if (v75 >= (unint64_t)HIDWORD(v75)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&v74[4 * v75] = v35;
        LODWORD(v75) = v75 + 1;
      }
      else if (!v38)
      {
        goto LABEL_70;
      }
      if (v73 <= (int)v5)
      {
        int v39 = v5;
      }
      else
      {
        LODWORD(v36) = v5 + 1;
        int v39 = v5 + 1;
      }
      if ((v39 & 0x80000000) == 0 && v39 < v73)
      {
        for (int i = *(unsigned __int16 *)(v72 + 2 * v39); (i - 1) <= 0x3FFFFFFE; ++v39)
        {
          if (v70)
          {
            uint64_t v41 = 2 * v70;
            uint64_t v42 = (char *)v69;
            while (*(unsigned __int16 *)v42 != (unsigned __int16)i)
            {
              v42 += 2;
              v41 -= 2;
              if (!v41)
              {
                uint64_t v42 = (char *)v69 + 2 * v70;
                break;
              }
            }
          }
          else
          {
            uint64_t v42 = (char *)v69;
          }
          if (v70 == (v42 - (unsigned char *)v69) >> 1) {
            break;
          }
          uint64_t v36 = (v39 + 1);
          if (v36 == v73) {
            break;
          }
          int i = *(unsigned __int16 *)(v72 + 2 * v36);
        }
      }
      LODWORD(v5) = v36;
    }
    while (v6 != v36);
  }
  if (!v75)
  {
LABEL_40:
    if (*(float *)(a2 + 116) == INFINITY)
    {
      uint64_t v35 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v44 = a1[54].i64[0];
      uint64_t v49 = &unk_1F260CAB0;
      uint64_t v50 = a2;
      uint64_t v45 = *(void *)(v44 + 40);
      uint64_t v51 = a3;
      uint64_t v52 = v45;
      int8x16_t v53 = vextq_s8(a1[17], a1[17], 8uLL);
      uint64_t v54 = (*(uint64_t (**)(void))(**(void **)(v44 + 16) + 104))(*(void *)(v44 + 16));
      unint64_t v55 = &a1[53].i8[8];
      int v56 = *(_DWORD *)(a3 + 8);
      char v57 = 0;
      BOOL v58 = &a1[35].i8[8];
      uint64_t v59 = v63;
      uint64_t v60 = v63;
      uint64_t v61 = 4;
      int v62 = 0;
      uint64_t v64 = v68;
      uint64_t v65 = v68;
      uint64_t v66 = 4;
      int v67 = 0;
      *(void *)(v52 + 8) = &v49;
      uint64_t v46 = (*(uint64_t (**)(int8x16_t *))(a1->i64[0] + 192))(a1);
      (*(void (**)(uint64_t, void **))(*(void *)v46 + 24))(v46, &v49);
      sub_1CD516CC4(&v49);
      uint64_t v35 = 0;
    }
    goto LABEL_70;
  }
  int64_t v7 = (unsigned int *)v74;
  unsigned int v48 = &v74[4 * v75];
  while (2)
  {
    unsigned int v8 = *v7;
    uint64_t v77 = v79;
    uint64_t v78 = 0x800000000;
    uint64_t v9 = a1[16].i64[0];
    if (v9) {
      uint64_t v10 = (void *)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t v11 = *(unsigned int *)(*v10 + 24 * v8 + 16);
    uint64_t v12 = (_WORD *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v13 = *v12 + (v11 & 0xF) * v8;
    while (1)
    {
      uint64_t v14 = a1[18].i64[0];
      unsigned int v15 = v13;
      uint64_t v16 = *(void *)(v14 + 400);
      uint64_t v17 = v16 + 176 * v13;
      int v18 = *(_DWORD *)(v14 + 272);
      uint64_t v19 = (_DWORD *)(*(void *)(v14 + 392) + 216 * v15);
      if (*(_DWORD *)(v17 + 168) != v18
        || *(void *)(v16 + 176 * v15 + 8) != a2
        || *(_DWORD **)v17 != v19
        || *v19 != *(_DWORD *)(v16 + 176 * v15 + 164))
      {
        *(void *)uint64_t v17 = v19;
        uint64_t v20 = v16 + 176 * v15;
        *(void *)(v20 + 8) = a2;
        *(_DWORD *)(v20 + 120) = 0;
        *(_WORD *)(v20 + 160) = 0;
        *(_DWORD *)(v20 + 164) = *v19;
        *(_DWORD *)(v17 + 168) = v18;
LABEL_10:
        llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v17, 0xFFFFFFFF);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(v17 + 161)) {
        goto LABEL_10;
      }
LABEL_11:
      uint64_t v21 = *(unsigned int *)(v17 + 120);
      if (v21) {
        break;
      }
LABEL_22:
      int v27 = (unsigned __int16)v12[1];
      ++v12;
      unsigned __int16 v13 = v27 + v15;
      if (!v27)
      {
        if (v78)
        {
          unint64_t v29 = 0;
          uint64_t v30 = 8 * v78;
          do
          {
            uint64_t v31 = v77[v29 / 8];
            if (*(_DWORD *)(*(void *)(a1[17].i64[0] + 280) + 4 * (*(_DWORD *)(v31 + 112) & 0x7FFFFFFF)))
            {
              llvm::LiveRegMatrix::unassign((llvm::LiveRegMatrix *)a1[18].i64[0], (const llvm::LiveInterval *)v77[v29 / 8]);
              uint64_t v32 = a1[54].i64[0];
              uint64_t v49 = &unk_1F260CAB0;
              uint64_t v50 = v31;
              uint64_t v33 = *(void *)(v32 + 40);
              uint64_t v51 = a3;
              uint64_t v52 = v33;
              int8x16_t v53 = vextq_s8(a1[17], a1[17], 8uLL);
              uint64_t v54 = (*(uint64_t (**)(void))(**(void **)(v32 + 16) + 104))(*(void *)(v32 + 16));
              unint64_t v55 = &a1[53].i8[8];
              int v56 = *(_DWORD *)(a3 + 8);
              char v57 = 0;
              BOOL v58 = &a1[35].i8[8];
              uint64_t v59 = v63;
              uint64_t v60 = v63;
              uint64_t v61 = 4;
              int v62 = 0;
              uint64_t v64 = v68;
              uint64_t v65 = v68;
              uint64_t v66 = 4;
              int v67 = 0;
              *(void *)(v52 + 8) = &v49;
              uint64_t v34 = (*(uint64_t (**)(int8x16_t *))(a1->i64[0] + 192))(a1);
              (*(void (**)(uint64_t, void **))(*(void *)v34 + 24))(v34, &v49);
              sub_1CD516CC4(&v49);
            }
            v29 += 8;
          }
          while (v30 != v29);
        }
        int v28 = 1;
        goto LABEL_29;
      }
    }
    uint64_t v22 = *(void *)(v17 + 112);
    uint64_t v23 = 8 * v21;
    while (1)
    {
      uint64_t v24 = *(void *)(v22 - 8 + v23);
      float v25 = *(float *)(v24 + 116);
      if (v25 == INFINITY || v25 > *(float *)(a2 + 116)) {
        break;
      }
      if (v78 >= (unint64_t)HIDWORD(v78)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v77[v78] = v24;
      LODWORD(v78) = v78 + 1;
      v23 -= 8;
      if (!v23) {
        goto LABEL_22;
      }
    }
    int v28 = 0;
LABEL_29:
    if (v77 != v79) {
      free(v77);
    }
    if (!v28)
    {
      if (++v7 == (unsigned int *)v48) {
        goto LABEL_40;
      }
      continue;
    }
    break;
  }
  uint64_t v35 = *v7;
LABEL_70:
  if (v69 != &v71) {
    free(v69);
  }
  if (v74 != v76) {
    free(v74);
  }
  return v35;
}

void sub_1CC4123C4(uint64_t a1)
{
}

void sub_1CC4123CC(uint64_t a1)
{
  sub_1CC410F5C((void *)(a1 - 248));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC412408(uint64_t a1)
{
  return *(void *)(a1 + 624);
}

void sub_1CC412410(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CC412418(uint64_t a1)
{
  return sub_1CC411BF8(a1 - 248);
}

uint64_t sub_1CC412420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CC411D2C((int8x16_t *)(a1 - 248), a2, a3);
}

void sub_1CC412428(uint64_t a1)
{
}

void sub_1CC412430(uint64_t a1)
{
  sub_1CC410F5C((void *)(a1 - 856));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC41246C(uint64_t a1, int a2)
{
  return sub_1CC4116BC(a1 - 856, a2);
}

uint64_t sub_1CC412478(uint64_t a1, int a2)
{
  return sub_1CC411870(a1 - 856, a2);
}

void sub_1CC412484()
{
}

float sub_1CC412498(float a1, uint64_t a2, int a3)
{
  return a1 / (float)(a3 + 400);
}

uint64_t sub_1CC4124A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC412540()
{
  qword_1EBCD2170 = 0;
  *(void *)algn_1EBCD2178 = "basic";
  qword_1EBCD2180 = 5;
  unk_1EBCD2188 = "basic register allocator";
  qword_1EBCD2190 = 24;
  unk_1EBCD2198 = llvm::createBasicRegisterAllocator;
  sub_1CC410D90(&llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry, &qword_1EBCD2170);

  return __cxa_atexit((void (*)(void *))sub_1CC4108A4, &qword_1EBCD2170, &dword_1CB82C000);
}

void sub_1CC4125D0()
{
}

int8x16_t *llvm::RegAllocEvictionAdvisor::RegAllocEvictionAdvisor(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  a1->i64[0] = (uint64_t)&unk_1F2611690;
  a1->i64[1] = a2;
  a1[1].i64[0] = (uint64_t)a3;
  a1[1].i64[1] = a3[18].i64[0];
  int8x16_t v6 = a3[17];
  a1[2] = vextq_s8(v6, v6, 8uLL);
  a1[3].i64[0] = *(void *)(v6.i64[0] + 248);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  a1[3].i64[1] = v7;
  a1[4].i64[0] = (uint64_t)&a3[18].i64[1];
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 232))(v7, a2);
  uint64_t v9 = *(unsigned int *)(v7 + 16);
  a1[4].i64[1] = **(void **)(v7 + 216) + (v9 * v8);
  a1[5].i64[0] = v9;
  if (byte_1EBD059E0) {
    char v10 = 1;
  }
  else {
    char v10 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 360))(*(void *)(a2 + 16), *(unsigned int *)(*(void *)(a2 + 8) + 552));
  }
  a1[5].i8[8] = v10;
  a1[5].i32[3] = 1;
  return a1;
}

BOOL llvm::DefaultEvictionAdvisor::shouldEvict(llvm::DefaultEvictionAdvisor *this, const llvm::LiveInterval *a2, int a3, const llvm::LiveInterval *a4, int a5)
{
  return *(int *)(*(void *)(*((void *)this + 2) + 1248) + 8 * (*((_DWORD *)a4 + 28) & 0x7FFFFFFF)) <= 3
      && a3 != 0
      && a5 == 0
      || *((float *)a2 + 29) > *((float *)a4 + 29);
}

uint64_t llvm::DefaultEvictionAdvisor::canEvictHintInterference(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = 1;
  return llvm::DefaultEvictionAdvisor::canEvictInterferenceBasedOnCost(a1, a2, a3, 1, (unsigned int *)&v5, a4);
}

uint64_t llvm::DefaultEvictionAdvisor::canEvictInterferenceBasedOnCost(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int *a5, uint64_t a6)
{
  __int16 v9 = a3;
  uint64_t v12 = a3;
  if ((int)llvm::LiveRegMatrix::checkInterference(*(void *)(a1 + 24), (llvm::LiveRange *)a2, a3) <= 1)
  {
    if (*(_DWORD *)(a2 + 8)) {
      BOOL v14 = llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(a1 + 32), a2) != 0;
    }
    else {
      BOOL v14 = 1;
    }
    BOOL v80 = v14;
    uint64_t v15 = *(void *)(a1 + 16);
    unsigned int v82 = *(_DWORD *)(*(void *)(v15 + 1248) + 8 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF) + 4);
    if (!v82) {
      unsigned int v82 = *(_DWORD *)(v15 + 1280);
    }
    unsigned int v16 = 0;
    uint64_t v17 = *(void *)(a1 + 56);
    if (v17) {
      int v18 = (void *)(v17 + 8);
    }
    else {
      int v18 = 0;
    }
    unint64_t v19 = *(unsigned int *)(*v18 + 24 * v12 + 16);
    uint64_t v20 = (_WORD *)(v18[6] + ((v19 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v21 = *v20 + (v19 & 0xF) * v9;
    int v81 = a4 ^ 1;
    float v22 = 0.0;
    uint64_t v23 = &unk_1EBD05000;
    while (1)
    {
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v25 = v21;
      uint64_t v26 = *(void *)(v24 + 400);
      uint64_t v27 = v26 + 176 * v21;
      int v28 = *(_DWORD *)(v24 + 272);
      unint64_t v29 = (_DWORD *)(*(void *)(v24 + 392) + 216 * v25);
      if (*(_DWORD *)(v27 + 168) != v28
        || *(void *)(v26 + 176 * v25 + 8) != a2
        || *(_DWORD **)v27 != v29
        || *v29 != *(_DWORD *)(v26 + 176 * v25 + 164))
      {
        break;
      }
      unsigned int v32 = *(_DWORD *)(v27 + 120);
      unsigned int v31 = v23[680];
      if (*(unsigned char *)(v27 + 161)) {
        BOOL v75 = v32 > v31;
      }
      else {
        BOOL v75 = 1;
      }
      if (v75) {
        goto LABEL_15;
      }
LABEL_16:
      if (v32 >= v31) {
        return 0;
      }
      int v79 = v20;
      if (v32)
      {
        uint64_t v33 = *(void *)(v27 + 112);
        uint64_t v34 = v33 + 8 * v32;
        do
        {
          uint64_t v36 = *(void *)(v34 - 8);
          v34 -= 8;
          uint64_t v35 = v36;
          unsigned int v37 = *(_DWORD *)(v36 + 112);
          if (*(void *)(a6 + 96))
          {
            for (int i = *(uint64_t **)(a6 + 88); i; int i = (uint64_t *)*i)
            {
              unsigned int v39 = *((_DWORD *)i + 7);
              if (v37 >= v39)
              {
                if (v39 >= v37) {
                  return 0;
                }
                ++i;
              }
            }
          }
          else
          {
            uint64_t v40 = *(unsigned int *)(a6 + 8);
            if (v40)
            {
              uint64_t v41 = *(_DWORD **)a6;
              uint64_t v42 = 4 * v40;
              while (*v41 != v37)
              {
                ++v41;
                v42 -= 4;
                if (!v42) {
                  goto LABEL_32;
                }
              }
              if (v42) {
                return 0;
              }
            }
          }
LABEL_32:
          uint64_t v43 = v37 & 0x7FFFFFFF;
          uint64_t v44 = *(void *)(*(void *)(a1 + 16) + 1248);
          if (*(_DWORD *)(v44 + 8 * v43) == 6) {
            return 0;
          }
          if (*(float *)(a2 + 116) == INFINITY)
          {
            if (*(float *)(v35 + 116) == INFINITY)
            {
              uint64_t v77 = v12;
              uint64_t v78 = a5;
              uint64_t v46 = *(void *)(a1 + 64);
              uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 24);
              unsigned int v48 = (unsigned __int16 ***)(*(void *)(v47 + 16 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v49 = *((unsigned __int16 *)*v48 + 12);
              uint64_t v50 = *(void *)v46;
              int v51 = *(_DWORD *)(v46 + 8);
              if (v51 == *(_DWORD *)(*(void *)v46 + 24 * *((unsigned __int16 *)*v48 + 12)))
              {
                uint64_t v52 = *(void *)v46;
              }
              else
              {
                uint64_t v53 = v33;
                llvm::RegisterClassInfo::compute((uint64_t *)v46, v48);
                uint64_t v33 = v53;
                uint64_t v23 = (_DWORD *)&unk_1EBD05000;
                uint64_t v46 = *(void *)(a1 + 64);
                uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 24);
                uint64_t v52 = *(void *)v46;
                int v51 = *(_DWORD *)(v46 + 8);
                uint64_t v43 = *(_DWORD *)(v35 + 112) & 0x7FFFFFFF;
                unsigned int v37 = *(_DWORD *)(v35 + 112);
              }
              unsigned int v54 = *(_DWORD *)(v50 + 24 * v49 + 4);
              unint64_t v55 = (unsigned __int16 ***)(*(void *)(v47 + 16 * v43) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v56 = *((unsigned __int16 *)*v55 + 12);
              if (v51 != *(_DWORD *)(v52 + 24 * *((unsigned __int16 *)*v55 + 12)))
              {
                uint64_t v57 = v33;
                uint64_t v76 = v25;
                unsigned int v58 = v54;
                llvm::RegisterClassInfo::compute((uint64_t *)v46, v55);
                unsigned int v54 = v58;
                uint64_t v25 = v76;
                uint64_t v33 = v57;
                uint64_t v23 = (_DWORD *)&unk_1EBD05000;
                unsigned int v37 = *(_DWORD *)(v35 + 112);
                uint64_t v43 = v37 & 0x7FFFFFFF;
              }
              BOOL v45 = v54 < *(_DWORD *)(v52 + 24 * v56 + 4);
              uint64_t v44 = *(void *)(*(void *)(a1 + 16) + 1248);
              uint64_t v12 = v77;
              a5 = v78;
            }
            else
            {
              BOOL v45 = 1;
            }
          }
          else
          {
            BOOL v45 = 0;
          }
          unsigned int v59 = *(_DWORD *)(v44 + 8 * v43 + 4);
          if (v82 == v59) {
            return 0;
          }
          if (v82 < v59)
          {
            if (!v45) {
              return 0;
            }
            v16 += 10;
          }
          uint64_t v60 = *(void *)(a1 + 40);
          uint64_t v61 = v37 & 0x7FFFFFFF;
          uint64_t v62 = *(void *)(*(void *)(v60 + 248) + 208);
          uint64_t v63 = v62 + 40 * v61;
          if (!*(_DWORD *)(v63 + 16)
            || ((int v72 = **(_DWORD **)(v63 + 8), !*(_DWORD *)(v62 + 40 * v61))
              ? (BOOL v73 = v72 == 0)
              : (BOOL v73 = 1),
                v73))
          {
            int v64 = 0;
          }
          else
          {
            uint64_t v74 = *(void *)(v60 + 280);
            if (v72 < 0) {
              int v72 = *(_DWORD *)(v74 + 4 * (v72 & 0x7FFFFFFF));
            }
            int v64 = *(_DWORD *)(v74 + 4 * v61) == v72;
          }
          v16 += v64;
          float v65 = *(float *)(v35 + 116);
          if (v22 < v65) {
            float v22 = *(float *)(v35 + 116);
          }
          unsigned int v66 = *a5;
          if (v16 >= *a5 && (v66 < v16 || v22 >= *((float *)a5 + 1))) {
            return 0;
          }
          if (!v45)
          {
            BOOL v68 = *(_DWORD *)(v44 + 8 * v61) <= 3;
            int v67 = v81;
            if (!v68) {
              int v67 = 1;
            }
            BOOL v68 = (v64 | v67) == 1 && *(float *)(a2 + 116) <= v65;
            if (v68) {
              return 0;
            }
            BOOL v69 = v80;
            if (v66 == -1) {
              BOOL v69 = 0;
            }
            if (v69)
            {
              uint64_t v70 = v33;
              uint64_t v71 = llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(a1 + 32), v35);
              uint64_t v33 = v70;
              uint64_t v23 = (_DWORD *)&unk_1EBD05000;
              if (v71)
              {
                if (!*(unsigned char *)(a1 + 88)) {
                  return 0;
                }
                uint64_t result = llvm::RegAllocEvictionAdvisor::canReassign((uint64_t *)a1, v35, v12);
                uint64_t v33 = v70;
                uint64_t v23 = (_DWORD *)&unk_1EBD05000;
                if (!result) {
                  return result;
                }
              }
            }
          }
        }
        while (v34 != v33);
      }
      uint64_t v20 = v79 + 1;
      unsigned __int16 v21 = v79[1] + v25;
      if (!v79[1])
      {
        *a5 = v16;
        *((float *)a5 + 1) = v22;
        return 1;
      }
    }
    *(void *)uint64_t v27 = v29;
    uint64_t v30 = v26 + 176 * v25;
    *(void *)(v30 + 8) = a2;
    *(_DWORD *)(v30 + 120) = 0;
    *(_WORD *)(v30 + 160) = 0;
    *(_DWORD *)(v30 + 164) = *v29;
    *(_DWORD *)(v27 + 168) = v28;
    unsigned int v31 = v23[680];
LABEL_15:
    llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v27, v31);
    uint64_t v23 = &unk_1EBD05000;
    unsigned int v32 = *(_DWORD *)(v27 + 120);
    unsigned int v31 = dword_1EBD05AA0;
    goto LABEL_16;
  }
  return 0;
}

uint64_t llvm::DefaultEvictionAdvisor::tryFindEvictionCandidate(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v34 = 0xFFFFFFFFLL;
  uint64_t OrderLimit = llvm::RegAllocEvictionAdvisor::getOrderLimit(a1, a2, a3, a4);
  if ((OrderLimit & 0xFF00000000) == 0) {
    return 0;
  }
  if (a4 != 255)
  {
    LODWORD(v34) = 0;
    HIDWORD(v34) = *(_DWORD *)(a2 + 116);
  }
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = -v11;
  if (OrderLimit)
  {
    int v13 = OrderLimit - 1;
    int v14 = *(_DWORD *)(a3 + 72);
    if (v14 < (int)OrderLimit - 1) {
      int v13 = *(_DWORD *)(a3 + 72);
    }
    if (v14 < (int)OrderLimit) {
      int v15 = v13;
    }
    else {
      int v15 = v13 + 1;
    }
    if ((v15 & 0x80000000) == 0 && v15 < v14)
    {
      uint64_t v16 = *(void *)(a3 + 56);
      int v17 = *(unsigned __int16 *)(v16 + 2 * v15);
      if ((v17 - 1) <= 0x3FFFFFFE)
      {
        int v18 = *(unsigned __int16 **)a3;
        do
        {
          if (v11)
          {
            uint64_t v19 = 2 * v11;
            uint64_t v20 = *(unsigned __int16 **)a3;
            while (*v20 != v17)
            {
              ++v20;
              v19 -= 2;
              if (!v19)
              {
                uint64_t v20 = &v18[v11];
                break;
              }
            }
          }
          else
          {
            uint64_t v20 = *(unsigned __int16 **)a3;
          }
          if (v11 == v20 - v18) {
            break;
          }
          if (v15 == v14 - 1)
          {
            int v15 = *(_DWORD *)(a3 + 72);
            break;
          }
          int v17 = *(unsigned __int16 *)(v16 + 2 * ++v15);
        }
        while ((v17 - 1) <= 0x3FFFFFFE);
      }
    }
  }
  else
  {
    int v15 = *(_DWORD *)(a3 + 72);
  }
  if (v15 == v12)
  {
    return 0;
  }
  else
  {
    unsigned int v33 = 0;
    LODWORD(v21) = -(int)v11;
    do
    {
      float v22 = (unsigned __int16 *)(*(void *)a3 + 2 * *(void *)(a3 + 8) + 2 * (int)v21);
      if ((int)v12 >= 0) {
        float v22 = (unsigned __int16 *)(*(void *)(a3 + 56) + 2 * v21);
      }
      unint64_t v23 = *v22;
      if (*(unsigned __int8 *)(a1[9] + v23) < a4)
      {
        if (a4 != 1
          || (uint64_t v32 = a1[8], *(void *)(v32 + 48) <= v23)
          || !*(_WORD *)(*(void *)(v32 + 40) + 2 * v23)
          || llvm::LiveRegMatrix::isPhysRegUsed(a1[3], v23))
        {
          if (llvm::DefaultEvictionAdvisor::canEvictInterferenceBasedOnCost((uint64_t)a1, a2, v23, 0, (unsigned int *)&v34, a5))
          {
            unsigned int v33 = v23;
            if ((v12 & 0x80000000) != 0) {
              break;
            }
          }
        }
      }
      int v24 = *(_DWORD *)(a3 + 72);
      if (v24 <= (int)v12)
      {
        int v25 = v12;
      }
      else
      {
        LODWORD(v21) = v12 + 1;
        int v25 = v12 + 1;
      }
      if ((v25 & 0x80000000) == 0 && v25 < v24)
      {
        uint64_t v26 = *(void *)(a3 + 56);
        int v27 = *(unsigned __int16 *)(v26 + 2 * v25);
        if ((v27 - 1) <= 0x3FFFFFFE)
        {
          uint64_t v28 = *(void *)(a3 + 8);
          do
          {
            if (v28)
            {
              uint64_t v29 = 2 * v28;
              uint64_t v30 = *(unsigned __int16 **)a3;
              while (*v30 != (unsigned __int16)v27)
              {
                ++v30;
                v29 -= 2;
                if (!v29)
                {
                  uint64_t v30 = (unsigned __int16 *)(*(void *)a3 + 2 * v28);
                  break;
                }
              }
            }
            else
            {
              uint64_t v30 = *(unsigned __int16 **)a3;
            }
            if (v28 == ((uint64_t)v30 - *(void *)a3) >> 1) {
              break;
            }
            uint64_t v21 = (v25 + 1);
            if (v21 == v24) {
              break;
            }
            int v27 = *(unsigned __int16 *)(v26 + 2 * v21);
            ++v25;
          }
          while ((v27 - 1) <= 0x3FFFFFFE);
        }
      }
      LODWORD(v12) = v21;
    }
    while (v15 != v21);
  }
  return v33;
}

void sub_1CC413018()
{
}

void sub_1CC413030(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC413068(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *a2;
    uint64_t v4 = "Requested regalloc eviction advisor analysis could be created. Using default";
    __int16 v5 = 259;
    llvm::LLVMContext::emitError(v3, (uint64_t)&v4);
  }
  return 0;
}

void sub_1CC4130B4()
{
}

uint64_t sub_1CC413128()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = 1;
  int v5 = 1;
  int v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Enable regalloc advisor mode";
  *((void *)&v1 + 1) = 28;
  v6.n128_u64[0] = (unint64_t)v7;
  v7[0] = "default";
  v7[1] = 7;
  int v8 = 0;
  __int16 v9 = "Default";
  uint64_t v10 = 7;
  uint64_t v11 = "release";
  uint64_t v12 = 7;
  int v13 = 1;
  int v14 = "precompiled";
  uint64_t v15 = 11;
  uint64_t v16 = "development";
  uint64_t v17 = 11;
  int v18 = 2;
  uint64_t v19 = "for training";
  uint64_t v20 = 12;
  v6.n128_u64[1] = 0x400000003;
  sub_1CD56A084(&v5, &v4, &v3, &v1, (uint64_t)&v6);
  if ((void *)v6.n128_u64[0] != v7) {
    free((void *)v6.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD569B9C, &qword_1EBCD21A8, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Local reassignment can yield better allocation decisions, but may be compile time intensive";
  v6.n128_u64[1] = 91;
  LOBYTE(v5) = 0;
  *(void *)&long long v1 = &v5;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBD05960, "enable-local-reassign", &v3, &v6, (unsigned char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD05960, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Number of interferences after which we declare an interference unevictable and bail"
                                     " out. This is a compilation cost-saving consideration. To disable, pass a very large number.";
  v6.n128_u64[1] = 175;
  int v5 = 10;
  *(void *)&long long v1 = &v5;
  sub_1CD56A584(&v3, (long long *)&v6, (int **)&v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &EvictInterferenceCutoff, &dword_1CB82C000);
}

void sub_1CC413328()
{
}

uint64_t sub_1CC4133C4()
{
  return 1;
}

uint64_t sub_1CC4133CC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61BEA8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F2611990;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + sub_1CC3F44F0((uint64_t)this + 320) = a1 + 344;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 4;
  *(void *)(a1 + 352) = a1 + 368;
  *(void *)(a1 + 360) = 0x600000000;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = a1 + 440;
  *(void *)(a1 + 432) = 0x600000000;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  sub_1CC4124A8(a1 + 520, a2);
  *(void *)(a1 + 560) = a1 + 576;
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  *(unsigned char *)(a1 + 584) = a3;
  *(void *)(a1 + 592) = a1 + 608;
  *(void *)(a1 + 600) = 0x800000000;
  *(void *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = a1 + 904;
  *(void *)(a1 + 896) = 0x600000000;
  *(_DWORD *)(a1 + 952) = 0;
  *(void *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 984) = a1 + 1000;
  *(void *)(a1 + 992) = 0x2000000000;
  *(void *)(a1 + 1256) = a1 + 1280;
  *(_OWORD *)(a1 + 1264) = xmmword_1CD96EEC0;
  *(void *)(a1 + 1296) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(void *)(a1 + 1312) = a1 + 1336;
  *(void *)(a1 + 1sub_1CC3F44F0((uint64_t)this + 320) = 0;
  *(void *)(a1 + 1328) = 8;
  *(void *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1360) = 0;
  *(void *)(a1 + 1368) = a1 + 1392;
  *(_OWORD *)(a1 + 1376) = xmmword_1CD96EEC0;
  *(void *)(a1 + 1408) = a1 + 1424;
  *(void *)(a1 + 1416) = 0x600000000;
  return a1;
}

void llvm::createFastRegisterAllocator()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC4136A0()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC4137B0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2611990;
  int v2 = *(void **)(a1 + 1408);
  if (v2 != (void *)(a1 + 1424)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1368);
  if (v3 != (void *)(a1 + 1392)) {
    free(v3);
  }
  free(*(void **)(a1 + 1352));
  int v4 = *(void **)(a1 + 1312);
  if (v4 != (void *)(a1 + 1336)) {
    free(v4);
  }
  free(*(void **)(a1 + 1296));
  int v5 = *(void **)(a1 + 1256);
  if (v5 != (void *)(a1 + 1280)) {
    free(v5);
  }
  __n128 v6 = *(void **)(a1 + 984);
  if (v6 != (void *)(a1 + 1000)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 960);
  if (v7)
  {
    *(void *)(a1 + 968) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 888);
  if (v8 != (void *)(a1 + 904)) {
    free(v8);
  }
  sub_1CD56A830((uint64_t *)(a1 + 864));
  sub_1CD56A8A4((uint64_t *)(a1 + 840));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 816), 4);
  free(*(void **)(a1 + 800));
  __int16 v9 = *(void **)(a1 + 592);
  if (v9 != (void *)(a1 + 608)) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a1 + 560);
  if (v10 != (void *)(a1 + 576)) {
    free(v10);
  }
  uint64_t v11 = *(void *)(a1 + 544);
  if (v11 == a1 + 520)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 520) + 32))(a1 + 520);
  }
  else if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  sub_1CD50C1C0((uint64_t *)(a1 + 280));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v12 = *(void **)(a1 + 176);
  if (v12 != (void *)(a1 + 192)) {
    free(v12);
  }
  int v13 = *(void **)(a1 + 104);
  if (v13 != (void *)(a1 + 120)) {
    free(v13);
  }
  int v14 = *(void **)(a1 + 32);
  if (v14 != (void *)(a1 + 48)) {
    free(v14);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC4139B4(uint64_t a1)
{
  sub_1CC4137B0(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC4139EC()
{
  return "Fast Register Allocator";
}

void sub_1CC4139FC(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC413A70(uint64_t a1, const llvm::MachineFunction *a2)
{
  uint64_t v3 = a1;
  uint64_t v416 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 256) = *((void *)a2 + 5);
  uint64_t v4 = *((void *)a2 + 2);
  *(void *)(a1 + 264) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  *(void *)(v3 + 272) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  *(void *)(v3 + 248) = *((void *)a2 + 7);
  llvm::MachineRegisterInfo::freezeReservedRegs(*(llvm::MachineRegisterInfo **)(v3 + 256), a2);
  int v385 = (uint64_t *)(v3 + 280);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(v3 + 280), a2);
  LODWORD(v4) = *(_DWORD *)(*(void *)(v3 + 264) + 44);
  *(void *)(v3 + 1264) = 0;
  sub_1CD50BAB8((void *)(v3 + 1256), v4);
  int v5 = (uint64_t *)(v3 + 1312);
  *(void *)(v3 + 1sub_1CC3F44F0((uint64_t)this + 320) = 0;
  sub_1CD50BAB8((void *)(v3 + 1312), v4);
  size_t v6 = *(unsigned int *)(*(void *)(v3 + 256) + 32);
  uint64_t v388 = (void *)(v3 + 560);
  uint64_t v7 = *(unsigned int *)(v3 + 568);
  uint64_t v393 = v3;
  v390 = (uint64_t *)(v3 + 1256);
  if (v7 != v6)
  {
    int v8 = *(_DWORD *)(*(void *)(v3 + 256) + 32);
    if (v7 <= v6)
    {
      int v9 = *(_DWORD *)(v3 + 576);
      size_t v10 = v6 - v7;
      int v11 = v7;
      if (v6 > *(_DWORD *)(v393 + 572)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v10)
      {
        uint64_t v12 = (_DWORD *)(*v388 + 4 * v7);
        size_t v13 = v7 - v6;
        do
        {
          *v12++ = v9;
          BOOL v117 = __CFADD__(v13++, 1);
        }
        while (!v117);
        int v11 = *(_DWORD *)(v393 + 568);
      }
      int v8 = v11 + v10;
    }
    uint64_t v3 = v393;
    *(_DWORD *)(v393 + 568) = v8;
  }
  unsigned int v14 = *(_DWORD *)(v3 + 808);
  uint64_t v15 = v3;
  if (v14 < v6 || v14 >> 2 > v6)
  {
    free(*(void **)(v3 + 800));
    uint64_t v16 = malloc_type_calloc(v6, 1uLL, 0x6D9A4F0CuLL);
    if (!v16)
    {
      if (v6 || (v16 = malloc_type_malloc(1uLL, 0x4065EBACuLL), uint64_t v15 = v393, !v16)) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
    }
    *(void *)(v15 + 800) = v16;
    *(_DWORD *)(v15 + 808) = v6;
  }
  uint64_t v383 = (void *)(v15 + 888);
  *(_DWORD *)(v15 + 896) = 0;
  *(_DWORD *)(v15 + 952) = v6;
  if ((v6 + 63) < 0x40)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = (v6 + 63) >> 6;
    if (v17 > *(_DWORD *)(v15 + 900)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(v15 + 888), 8 * v17);
    uint64_t v18 = v17;
    *(_DWORD *)(v15 + 896) = v17;
  }
  if ((v6 & 0x3F) != 0) {
    *(void *)(*v383 + 8 * v18 - 8) &= ~(-1 << (v6 & 0x3F));
  }
  uint64_t v19 = (llvm::MachineBasicBlock *)*((void *)a2 + 41);
  unsigned int v375 = (const llvm::MachineFunction *)((char *)a2 + 320);
  if (v19 == (const llvm::MachineFunction *)((char *)a2 + 320)) {
    goto LABEL_21;
  }
  uint64_t v380 = (_DWORD *)(v15 + 816);
  uint64_t v382 = (uint64_t *)(v15 + 592);
  uint64_t v374 = (void *)(v15 + 960);
  int v386 = (_DWORD *)(v15 + 864);
  uint64_t v387 = v15 + 840;
  while (2)
  {
    *(void *)(v15 + 552) = v19;
    unint64_t v21 = *(unsigned int *)(*(void *)(v15 + 264) + 44);
    uint64_t v22 = *(void *)(v15 + 976);
    unint64_t v23 = *(char **)(v15 + 960);
    if (v21 > (v22 - (uint64_t)v23) >> 2)
    {
      if (v23)
      {
        *(void *)(v15 + 968) = v23;
        operator delete(v23);
        uint64_t v22 = 0;
        void *v374 = 0;
        v374[1] = 0;
        v374[2] = 0;
      }
      uint64_t v314 = v22 >> 1;
      if (v22 >> 1 <= v21) {
        uint64_t v314 = v21;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v315 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v315 = v314;
      }
      if (v315 >> 62) {
        abort();
      }
      unint64_t v316 = (char *)operator new(4 * v315);
      *(void *)(v15 + 960) = v316;
      *(void *)(v15 + 976) = &v316[4 * v315];
      bzero(v316, 4 * v21);
      unsigned int v370 = &v316[4 * v21];
    }
    else
    {
      int v24 = *(unsigned char **)(v15 + 968);
      unint64_t v25 = (v24 - v23) >> 2;
      if (v25 >= v21) {
        uint64_t v26 = v21;
      }
      else {
        uint64_t v26 = (v24 - v23) >> 2;
      }
      if (v26) {
        bzero(v23, 4 * v26);
      }
      BOOL v117 = v21 >= v25;
      unint64_t v27 = v21 - v25;
      if (v27 != 0 && v117)
      {
        bzero(v24, 4 * v21 - ((v24 - v23) & 0xFFFFFFFFFFFFFFFCLL));
        unsigned int v370 = &v24[4 * v27];
      }
      else
      {
        unsigned int v370 = &v23[4 * v21];
      }
      uint64_t v15 = v393;
    }
    *(void *)(v15 + 968) = v370;
    llvm::MachineBasicBlock::liveout_begin(v19, (uint64_t)v401);
    uint64_t v28 = *((void *)v19 + 12);
    long long v408 = *(_OWORD *)v401;
    v409[0] = v402;
    while (*((void *)&v408 + 1) == *(void *)&v409[0])
    {
      if (v28 == *((void *)&v408 + 1)) {
        goto LABEL_48;
      }
      uint64_t v29 = (unsigned __int16 *)*((void *)&v409[0] + 1);
LABEL_42:
      unsigned int v31 = *v29;
      uint64_t v32 = *(void *)(v15 + 264);
      if (v32) {
        unsigned int v33 = (void *)(v32 + 8);
      }
      else {
        unsigned int v33 = 0;
      }
      unint64_t v34 = *(unsigned int *)(*v33 + 24 * v31 + 16);
      uint64_t v35 = (unsigned __int16 *)(v33[6] + ((v34 >> 3) & 0x1FFFFFFE));
      int v37 = *v35;
      uint64_t v36 = v35 + 1;
      int v38 = v37 + (v34 & 0xF) * v31;
      uint64_t v39 = *(void *)(v15 + 960);
      do
      {
        *(_DWORD *)(v39 + 4 * (unsigned __int16)v38) = 1;
        int v40 = *v36++;
        v38 += v40;
      }
      while (v40);
      sub_1CD527214((unsigned __int16 *)&v408);
    }
    uint64_t v29 = (unsigned __int16 *)*((void *)&v409[0] + 1);
    BOOL v30 = *((void *)&v408 + 1) == v28 && *((void *)&v409[0] + 1) == 0;
    if (!v30) {
      goto LABEL_42;
    }
LABEL_48:
    *(_DWORD *)(v15 + 992) = 0;
    uint64_t v41 = (void *)((char *)v19 + 48);
    unint64_t v42 = *((void *)v19 + 6) & 0xFFFFFFFFFFFFFFF8;
    if (!v42 || (*(unsigned char *)v42 & 4) == 0)
    {
      while ((*(_WORD *)(v42 + 44) & 4) != 0)
        unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v43 = v388;
    unsigned int v389 = v19;
    uint64_t v381 = (void *)((char *)v19 + 48);
    if ((void *)v42 == v41)
    {
LABEL_54:
      if (!*(_DWORD *)(v15 + 600)) {
        goto LABEL_518;
      }
      uint64_t v44 = (unsigned __int16 *)*((void *)v19 + 19);
      BOOL v45 = (unsigned __int16 *)*((void *)v19 + 20);
      if (v45 != v44)
      {
        uint64_t v46 = *(void *)(v15 + 264);
        uint64_t v47 = (uint64_t *)(v46 + 8);
        if (!v46) {
          uint64_t v47 = 0;
        }
        uint64_t v48 = *v47;
        uint64_t v49 = v47[6];
        uint64_t v50 = *(void *)(v15 + 960);
        do
        {
          unint64_t v51 = ((unint64_t)*(unsigned int *)(v48 + 24 * *v44 + 16) >> 3) & 0x1FFFFFFE;
          int v52 = *(unsigned __int16 *)(v49 + v51) + (*(_DWORD *)(v48 + 24 * *v44 + 16) & 0xF) * *v44;
          uint64_t v53 = (unsigned __int16 *)(v49 + 2 + v51);
          do
          {
            *(_DWORD *)(v50 + 4 * (unsigned __int16)v52) = 2;
            int v54 = *v53++;
            v52 += v54;
          }
          while (v54);
          v44 += 8;
        }
        while (v44 != v45);
      }
      v401[0] = &v402;
      v401[1] = (void *)0x200000000;
      uint64_t v403 = 0;
      uint64_t v404 = 0;
      *((void *)&v402 + 1) = &v403;
      for (uint64_t i = *((void *)v19 + 7); (void *)i != v41; uint64_t i = *(void *)(i + 8))
      {
        if (**(unsigned __int16 **)(i + 16) - 4 > 2)
        {
          if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v15 + 272) + 1144))(*(void *)(v15 + 272), i))
          {
            uint64_t v41 = (void *)i;
            break;
          }
          uint64_t v56 = *(unsigned int *)(i + 40);
          if (v56)
          {
            uint64_t v57 = 32 * v56;
            unsigned int v58 = (_DWORD *)(*(void *)(i + 32) + 4);
            do
            {
              if (!*((unsigned char *)v58 - 4))
              {
                LODWORD(v408) = *v58;
                sub_1CC37086C((uint64_t)v401, (unsigned int *)&v408);
              }
              v58 += 8;
              v57 -= 32;
            }
            while (v57);
            if (!i) {
              goto LABEL_76;
            }
          }
          if ((*(unsigned char *)i & 4) == 0)
          {
LABEL_76:
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        else if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      unsigned int v317 = *(_DWORD *)(v15 + 600);
      if (!v317)
      {
LABEL_516:
        uint64_t v15 = v393;
        *(_DWORD *)(v393 + 600) = 0;
        sub_1CB833A08((uint64_t)&v402 + 8, v403);
        if (v401[0] != &v402) {
          free(v401[0]);
        }
LABEL_518:
        uint64_t v330 = *(unsigned int *)(v15 + 992);
        if (v330)
        {
          uint64_t v335 = *(uint64_t **)(v393 + 984);
          uint64_t v392 = &v335[v330];
          do
          {
            uint64_t v336 = *v335;
            if (!*v335 || (uint64_t v337 = *v335, (*(unsigned char *)v336 & 4) == 0))
            {
              uint64_t v337 = *v335;
              if ((*(_WORD *)(v336 + 44) & 8) != 0)
              {
                uint64_t v337 = *v335;
                do
                  uint64_t v337 = *(void *)(v337 + 8);
                while ((*(_WORD *)(v337 + 44) & 8) != 0);
              }
            }
            uint64_t v338 = *(void *)(v337 + 8);
            if (v338 != v336)
            {
              do
              {
                uint64_t v339 = *(void *)(v336 + 8);
                uint64_t v340 = *(void *)(*(void *)(v336 + 24) + 32);
                if (v340)
                {
                  uint64_t v341 = *(void *)(v340 + 728);
                  if (v341) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v341 + 32))(v341, v336);
                  }
                  uint64_t v342 = *(unsigned int *)(v336 + 40);
                  if (v342)
                  {
                    uint64_t v343 = *(void *)(v336 + 32);
                    uint64_t v344 = *(void *)(v340 + 40);
                    uint64_t v345 = 32 * v342;
                    do
                    {
                      if (!*(unsigned char *)v343)
                      {
                        uint64_t v346 = *(unsigned int *)(v343 + 4);
                        if ((v346 & 0x80000000) != 0) {
                          unint64_t v347 = (uint64_t *)(*(void *)(v344 + 24) + 16 * (v346 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          unint64_t v347 = (uint64_t *)(*(void *)(v344 + 272) + 8 * v346);
                        }
                        uint64_t v348 = *v347;
                        uint64_t v350 = *(void *)(v343 + 16);
                        uint64_t v349 = *(void *)(v343 + 24);
                        if (v343 != *v347) {
                          unint64_t v347 = (uint64_t *)(v350 + 24);
                        }
                        *unint64_t v347 = v349;
                        if (v349) {
                          uint64_t v351 = v349;
                        }
                        else {
                          uint64_t v351 = v348;
                        }
                        *(void *)(v351 + 16) = v350;
                        *(void *)(v343 + 16) = 0;
                        *(void *)(v343 + 24) = 0;
                      }
                      v343 += 32;
                      v345 -= 32;
                    }
                    while (v345);
                  }
                }
                *(void *)(v336 + 24) = 0;
                uint64_t v352 = *(unint64_t **)(v336 + 8);
                unint64_t v353 = *(void *)v336 & 0xFFFFFFFFFFFFFFF8;
                unint64_t *v352 = v353 | *v352 & 7;
                *(void *)(v353 + 8) = v352;
                *(void *)v336 &= 7uLL;
                *(void *)(v336 + 8) = 0;
                uint64_t v354 = *(void *)(*((void *)v19 + 5) + 32);
                uint64_t v355 = *(void **)(v336 + 32);
                if (v355)
                {
                  uint64_t v356 = *(unsigned __int8 *)(v336 + 47);
                  int v357 = (uint64_t *)(v354 + 232);
                  if (*(_DWORD *)(v354 + 240) <= v356) {
                    sub_1CC34BDE0(v354 + 232, v356 + 1);
                  }
                  uint64_t v358 = *v357;
                  void *v355 = *(void *)(*v357 + 8 * v356);
                  *(void *)(v358 + 8 * v356) = v355;
                }
                *(void *)uint64_t v336 = *(void *)(v354 + 224);
                *(void *)(v354 + 224) = v336;
                uint64_t v336 = v339;
              }
              while (v339 != v338);
            }
            ++v335;
          }
          while (v335 != v392);
        }
        uint64_t v331 = *(void *)(v393 + 864);
        uint64_t v332 = *(unsigned int *)(v393 + 880);
        uint64_t v333 = (unsigned int *)(v331 + 32 * v332);
        if (*(_DWORD *)(v393 + 872))
        {
          if (*(_DWORD *)(v393 + 880))
          {
            uint64_t v369 = 32 * v332;
            int v334 = *(unsigned int **)(v393 + 864);
            while (*v334 >= 0xFFFFFFFE)
            {
              v334 += 8;
              v369 -= 32;
              if (!v369) {
                goto LABEL_520;
              }
            }
          }
          else
          {
            int v334 = *(unsigned int **)(v393 + 864);
          }
        }
        else
        {
LABEL_520:
          int v334 = (unsigned int *)(v331 + 32 * v332);
        }
        uint64_t v359 = (unsigned int *)(v331 + 32 * v332);
LABEL_556:
        while (v334 != v359)
        {
          uint64_t v360 = v334[4];
          if (v360)
          {
            unint64_t v361 = (uint64_t *)*((void *)v334 + 1);
            uint64_t v362 = &v361[v360];
            do
            {
              uint64_t v363 = *v361;
              uint64_t v364 = *(void *)(*v361 + 32);
              if (**(_WORD **)(*v361 + 16) != 14)
              {
                uint64_t v366 = v364 + 32;
                goto LABEL_563;
              }
              uint64_t v365 = *(unsigned int *)(v363 + 40);
              if (v365 != 2)
              {
                uint64_t v366 = v364 + 32 * v365;
                v364 += 64;
LABEL_563:
                while (*(unsigned char *)v364 || *(_DWORD *)(v364 + 4) != *v334)
                {
                  v364 += 32;
                  if (v364 == v366) {
                    goto LABEL_566;
                  }
                }
                sub_1CD5485A8(v363);
              }
LABEL_566:
              ++v361;
            }
            while (v361 != v362);
          }
          unsigned int v367 = v334 + 8;
          while (v367 != v333)
          {
            unsigned int v368 = *v367;
            v367 += 8;
            if (v368 <= 0xFFFFFFFD)
            {
              int v334 = v367 - 8;
              goto LABEL_556;
            }
          }
          int v334 = v333;
        }
        sub_1CD56A9E0(v386);
        uint64_t v19 = (llvm::MachineBasicBlock *)*((void *)v19 + 1);
        uint64_t v15 = v393;
        if (v19 == v375)
        {
LABEL_21:
          if (*(unsigned char *)(v15 + 584)) {
            goto LABEL_581;
          }
          goto LABEL_22;
        }
        continue;
      }
      uint64_t v318 = *(void *)(v393 + 592);
      uint64_t v319 = v318 + 24 * v317;
      while (2)
      {
        uint64_t v320 = *(unsigned __int16 *)(v318 + 12);
        if (*(_WORD *)(v318 + 12))
        {
          uint64_t v321 = *(void *)(v393 + 264);
          unint64_t v322 = v321 ? (void *)(v321 + 8) : 0;
          unint64_t v323 = *(unsigned int *)(*v322 + 24 * *(unsigned __int16 *)(v318 + 12) + 16);
          if (*(_DWORD *)(*(void *)(v393 + 960)
                         + 4
                         * (unsigned __int16)(*(_WORD *)(v322[6] + ((v323 >> 3) & 0x1FFFFFFE)) + (v323 & 0xF) * v320)) != 2)
          {
            if (v404)
            {
              for (uint64_t j = v403; j; uint64_t j = (void *)*j)
              {
                unsigned int v325 = *((_DWORD *)j + 7);
                if (v325 <= v320)
                {
                  if (v325 >= v320) {
                    goto LABEL_513;
                  }
                  ++j;
                }
              }
              goto LABEL_514;
            }
            if (!LODWORD(v401[1])) {
              goto LABEL_514;
            }
            uint64_t v326 = v401[0];
            uint64_t v327 = 4 * LODWORD(v401[1]);
            while (*v326 != v320)
            {
              ++v326;
              v327 -= 4;
              if (!v327) {
                goto LABEL_514;
              }
            }
            if (v327)
            {
LABEL_513:
              sub_1CC41891C(v393, *(_DWORD *)(v318 + 8));
              uint64_t v19 = v389;
              (*(void (**)(void))(**(void **)(v393 + 272) + 464))();
            }
            else
            {
LABEL_514:
              int v328 = *(_DWORD *)(v318 + 8);
              uint64_t v329 = sub_1CC41891C(v393, v328);
              (*(void (**)(void, void, void *, uint64_t, uint64_t, unint64_t, void))(**(void **)(v393 + 272) + 464))(*(void *)(v393 + 272), *(void *)(v393 + 552), v41, v320, v329, *(void *)(*(void *)(*(void *)(v393 + 256) + 24) + 16 * (v328 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(v393 + 264));
            }
          }
        }
        v318 += 24;
        if (v318 == v319) {
          goto LABEL_516;
        }
        continue;
      }
    }
    break;
  }
  while (2)
  {
    if (**(unsigned __int16 **)(v42 + 16) - 13 > 1)
    {
      *(void *)(v15 + 1264) = 0;
      *(_DWORD *)(v15 + 1416) = 0;
      sub_1CD56B218(v380);
      uint64_t v81 = *(unsigned int *)(v42 + 40);
      if (!v81) {
        goto LABEL_440;
      }
      int v82 = 0;
      char v83 = 0;
      char v84 = 0;
      char v85 = 0;
      int v391 = 0;
      int v86 = 0;
      BOOL v87 = *(int **)(v42 + 32);
      unsigned int v88 = &v87[8 * v81];
      do
      {
        int v89 = *v87;
        if (*v87 == 12)
        {
          unint64_t v104 = *(unsigned int *)(v393 + 1416);
          if (v104 >= *(unsigned int *)(v393 + 1420)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v393 + 1408) + 8 * v104) = *((void *)v87 + 2);
          ++*(_DWORD *)(v393 + 1416);
          char v83 = 1;
        }
        else if (!*v87)
        {
          unint64_t v90 = v87[1];
          if ((v90 & 0x80000000) != 0)
          {
            if ((v89 & 0x1000000) != 0)
            {
              v391 |= (v89 & 0x40000000u) >> 30;
              if ((v89 & 0xF00000) != 0
                || (v86 |= (v89 & 0x40000000u) >> 30, char v85 = 1, (v89 & 0xFFF00) != 0) && (v89 & 0x10000000) == 0)
              {
                int v86 = 1;
                char v85 = 1;
              }
              char v84 = 1;
            }
          }
          else if ((v90 - 1) <= 0x3FFFFFFE {
                 && ((*(void *)(*(void *)(*(void *)(v393 + 256) + 352) + ((v90 >> 3) & 0x1FFFFFF8)) >> v90) & 1) == 0)
          }
          {
            if ((v89 & 0x1000000) != 0)
            {
              int v91 = v82;
              char v92 = sub_1CC416A00(v393, v42, (unsigned __int16)v87[1]);
              uint64_t v93 = *(void *)(v393 + 264);
              if (v93) {
                int v94 = (void *)(v93 + 8);
              }
              else {
                int v94 = 0;
              }
              unint64_t v95 = *(unsigned int *)(*v94 + 24 * (unsigned __int16)v90 + 16);
              uint64_t v96 = (unsigned __int16 *)(v94[6] + ((v95 >> 3) & 0x1FFFFFFE));
              int v98 = *v96;
              unsigned int v97 = v96 + 1;
              int v99 = v98 + (v95 & 0xF) * v90;
              uint64_t v100 = *(void *)(v393 + 960);
              do
              {
                *(_DWORD *)(v100 + 4 * (unsigned __int16)v99) = 1;
                int v101 = *v97++;
                v99 += v101;
              }
              while (v101);
              int v89 = *v87;
              v391 |= (*v87 & 0x40000000u) >> 30;
              int v82 = v91;
              if ((v92 & 1) == 0)
              {
                v89 |= 0x4000000u;
                int *v87 = v89;
              }
              char v85 = 1;
              uint64_t v19 = v389;
            }
            BOOL v102 = (v89 & 0xFFF00) != 0;
            if ((v89 & 0x1000000) == 0) {
              BOOL v102 = 1;
            }
            BOOL v103 = (v89 & 0x30000000) == 0 && v102;
            v82 |= v103;
          }
        }
        v87 += 8;
      }
      while (v87 != v88);
      char v376 = v82;
      if (v85)
      {
        uint64_t v15 = v393;
        if ((v84 & 1) == 0) {
          goto LABEL_256;
        }
        if (v86)
        {
          *(void *)(v393 + 1376) = 0;
          *(void *)(v393 + 1sub_1CC3F44F0((uint64_t)this + 320) = 0;
          unint64_t v105 = *(void *)(*(void *)(v393 + 264) + 248) - *(void *)(*(void *)(v393 + 264) + 240);
          uint64_t v106 = (v105 >> 3);
          *(void *)&v409[0] = 0;
          long long v408 = 0uLL;
          if ((v105 >> 3))
          {
            size_t v107 = 4 * v106;
            unsigned int v108 = (char *)operator new(4 * v106);
            uint64_t v109 = &v108[4 * v106];
            *(void *)&long long v408 = v108;
            *(void *)&v409[0] = v109;
            bzero(v108, v107);
            *((void *)&v408 + 1) = v109;
          }
          uint64_t v110 = *(unsigned int *)(v42 + 40);
          if (!v110)
          {
            unint64_t v111 = 0;
            goto LABEL_250;
          }
          uint64_t v113 = 0;
          while (1)
          {
            int v114 = (int *)(*(void *)(v42 + 32) + 32 * v113);
            int v115 = *v114;
            if (!*v114) {
              break;
            }
LABEL_241:
            if (++v113 == v110)
            {
              unint64_t v111 = *(void *)(v15 + 1376);
LABEL_250:
              uint64_t v158 = *(void *)(v15 + 1368);
              v401[0] = (void *)v42;
              v401[1] = (void *)v15;
              *(void *)&long long v402 = &v408;
              unint64_t v159 = 126 - 2 * __clz(v111);
              if (v111) {
                uint64_t v160 = v159;
              }
              else {
                uint64_t v160 = 0;
              }
              sub_1CC416C08(v158, (__int16 *)(v158 + 2 * v111), (uint64_t)v401, v160, 1);
              uint64_t v161 = *(void *)(v15 + 1376);
              if (!v161)
              {
LABEL_254:
                if ((void)v408)
                {
                  *((void *)&v408 + 1) = v408;
                  operator delete((void *)v408);
                }
                goto LABEL_256;
              }
              uint64_t v231 = *(unsigned __int16 **)(v15 + 1368);
              uint64_t v232 = &v231[v161];
              while (2)
              {
                uint64_t v233 = *v231;
                unint64_t v234 = (int *)(*(void *)(v42 + 32) + 32 * v233);
                int v235 = *v234;
                unsigned int v236 = v234[1];
                if ((*v234 & 0x40F00000) == 0 && ((v235 & 0xFFF00) == 0 || (v235 & 0x10000000) != 0))
                {
                  uint64_t v238 = v393;
                  uint64_t v239 = v42;
                  unsigned int v240 = *v231;
                  unsigned int v241 = v234[1];
                  int v242 = 0;
                  goto LABEL_382;
                }
                unsigned int v243 = *(unsigned __int8 *)(*(void *)(v393 + 800) + (v236 & 0x7FFFFFFF));
                unsigned int v244 = *(_DWORD *)(v393 + 600);
                if (v244 > v243)
                {
                  uint64_t v245 = *(void *)(v393 + 592);
                  while (1)
                  {
                    unsigned int v246 = v243;
                    if (((*(_DWORD *)(v245 + 24 * v243 + 8) ^ v236) & 0x7FFFFFFF) == 0) {
                      break;
                    }
                    v243 += 256;
                    if (v246 + 256 >= v244) {
                      goto LABEL_381;
                    }
                  }
                  if (v244 != v243)
                  {
                    uint64_t v384 = v245 + 24 * v243;
                    unsigned int v247 = *(unsigned __int16 *)(v384 + 12);
                    if (*(_WORD *)(v384 + 12) && sub_1CC4179BC(v393, v247, 1))
                    {
                      unsigned int v379 = v247;
                      sub_1CC416900(v393, v247);
                      *(_WORD *)(v384 + 12) = 0;
                      sub_1CC417AD0(v393, v42, v384, 0, 1);
                      if (!v42 || (unint64_t v248 = v42, (*(unsigned char *)v42 & 4) == 0))
                      {
                        unint64_t v248 = v42;
                        if ((*(_WORD *)(v42 + 44) & 8) != 0)
                        {
                          unint64_t v248 = v42;
                          do
                            unint64_t v248 = *(void *)(v248 + 8);
                          while ((*(_WORD *)(v248 + 44) & 8) != 0);
                        }
                      }
                      BOOL v378 = *(uint64_t **)(v248 + 8);
                      uint64_t v249 = *(void *)(*(void *)(v393 + 272) + 8);
                      uint64_t v250 = *(void *)(v393 + 552);
                      unint64_t v251 = *(llvm::MachineFunction **)(v250 + 32);
                      uint64_t v252 = *(unsigned __int8 **)(v42 + 56);
                      unsigned int v410 = v252;
                      if (v252) {
                        llvm::MetadataTracking::track((uint64_t)&v410, v252, 2);
                      }
                      unsigned int v377 = v251;
                      uint64_t v253 = llvm::MachineFunction::CreateMachineInstr(v251, v249 + 912, &v410, 0);
                      unint64_t v254 = v253;
                      if (v410)
                      {
                        unint64_t v268 = v253;
                        int v269 = *v410;
                        if ((v269 - 4) > 0x1E)
                        {
                          if ((v269 - 3) >= 0xFFFFFFFE) {
                            unint64_t v272 = v410;
                          }
                          else {
                            unint64_t v272 = 0;
                          }
                          if ((v269 - 3) < 0xFFFFFFFE)
                          {
                            if (v269 == 3) {
                              *((void *)v410 + 1) = 0;
                            }
                            goto LABEL_374;
                          }
                          unint64_t v271 = (unint64_t)(v272 + 8);
                        }
                        else
                        {
                          if ((v410[1] & 0x7F) != 2 && !*((_DWORD *)v410 + 3)) {
                            goto LABEL_374;
                          }
                          uint64_t v270 = *((void *)v410 + 2);
                          if ((v270 & 4) == 0) {
                            goto LABEL_374;
                          }
                          unint64_t v271 = v270 & 0xFFFFFFFFFFFFFFF8;
                          if (!v271) {
                            goto LABEL_374;
                          }
                        }
                        v401[0] = &v410;
                        sub_1CC5FA668(v271 + 16, v401);
                        unint64_t v254 = v268;
                      }
LABEL_374:
                      uint64_t v255 = *(void *)(v250 + 40);
                      *((void *)v254 + 3) = v255;
                      uint64_t v256 = *(void *)(v255 + 32);
                      uint64_t v257 = *((unsigned int *)v254 + 10);
                      if (v257)
                      {
                        uint64_t v261 = *((void *)v254 + 4);
                        uint64_t v262 = *(void *)(v256 + 40);
                        uint64_t v263 = 32 * v257;
                        do
                        {
                          if (!*(unsigned char *)v261)
                          {
                            uint64_t v264 = *(unsigned int *)(v261 + 4);
                            if ((int)v264 >= 0) {
                              uint64_t v265 = (uint64_t *)(*(void *)(v262 + 272) + 8 * v264);
                            }
                            else {
                              uint64_t v265 = (uint64_t *)(*(void *)(v262 + 24) + 16 * (v264 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v266 = *v265;
                            if (*v265)
                            {
                              uint64_t v267 = *(void *)(v266 + 16);
                              *(void *)(v266 + 16) = v261;
                              *(void *)(v261 + 16) = v267;
                              if (*(unsigned char *)(v261 + 3))
                              {
                                *(void *)(v261 + 24) = v266;
                              }
                              else
                              {
                                *(void *)(v261 + 24) = 0;
                                uint64_t v265 = (uint64_t *)(v267 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v261 + 16) = v261;
                              *(void *)(v261 + 24) = 0;
                            }
                            *uint64_t v265 = v261;
                          }
                          v261 += 32;
                          v263 -= 32;
                        }
                        while (v263);
                      }
                      uint64_t v258 = *(void *)(v256 + 728);
                      if (v258) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v258 + 24))(v258, v254);
                      }
                      unint64_t v259 = *v378 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v254 = v259 | *(void *)v254 & 7;
                      *((void *)v254 + 1) = v378;
                      *(void *)(v259 + 8) = v254;
                      *BOOL v378 = *v378 & 7 | (unint64_t)v254;
                      v401[1] = 0;
                      long long v402 = 0uLL;
                      HIDWORD(v401[0]) = v379;
                      LODWORD(v401[0]) = 0x1000000;
                      llvm::MachineInstr::addOperand(v254, v377, (const llvm::MachineOperand *)v401);
                      int v260 = *(unsigned __int16 *)(v384 + 12);
                      v401[1] = 0;
                      long long v402 = 0uLL;
                      HIDWORD(v401[0]) = v260;
                      LODWORD(v401[0]) = 0x4000000;
                      llvm::MachineInstr::addOperand(v254, v377, (const llvm::MachineOperand *)v401);
                      int v235 = *(_DWORD *)(*(void *)(v42 + 32) + 32 * v233);
                    }
                    uint64_t v19 = v389;
                    if ((v235 & 0xFFF00) != 0 && (v235 & 0x10000000) == 0) {
                      *(void *)uint64_t v384 = v42;
                    }
                  }
                }
LABEL_381:
                uint64_t v238 = v393;
                uint64_t v239 = v42;
                unsigned int v240 = v233;
                unsigned int v241 = v236;
                int v242 = 1;
LABEL_382:
                sub_1CC4163D8(v238, v239, v240, v241, v242);
                if (++v231 == v232) {
                  goto LABEL_254;
                }
                continue;
              }
            }
          }
          unsigned int v116 = v114[1];
          if ((v115 & 0x30000000) == 0)
          {
            if ((v115 & 0x1000000) == 0)
            {
              if (v116 - 1 > 0x3FFFFFFE) {
                goto LABEL_210;
              }
              goto LABEL_204;
            }
            BOOL v117 = (v115 & 0xFFF00) == 0 || v116 - 1 >= 0x3FFFFFFF;
            if (!v117)
            {
LABEL_204:
              uint64_t v118 = *(void *)(v15 + 264);
              if (v118) {
                int v119 = (void *)(v118 + 8);
              }
              else {
                int v119 = 0;
              }
              unint64_t v120 = (unsigned __int16 *)(v119[6]
                                        + (((unint64_t)*(unsigned int *)(*v119
                                                                              + 24 * (unsigned __int16)v114[1]
                                                                              + 16) >> 3) & 0x1FFFFFFE));
              int v122 = *v120;
              uint64_t v121 = v120 + 1;
              int v123 = v122 + (*(_DWORD *)(*v119 + 24 * (unsigned __int16)v114[1] + 16) & 0xF) * v116;
              do
              {
                LOWORD(v401[0]) = v123;
                sub_1CD515E0C(v5, v401);
                int v124 = *v121++;
                v123 += v124;
              }
              while (v124);
              int v115 = *v114;
              uint64_t v15 = v393;
              uint64_t v19 = v389;
            }
          }
LABEL_210:
          if ((v115 & 0x1000000) != 0)
          {
            if ((v116 & 0x80000000) != 0)
            {
              uint64_t v147 = *(void *)(v15 + 1376);
              if ((unint64_t)(v147 + 1) > *(void *)(v15 + 1384)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              *(_WORD *)(*(void *)(v15 + 1368) + 2 * v147) = v113;
              ++*(void *)(v15 + 1376);
              uint64_t v148 = *(void *)(*(void *)(v15 + 264) + 240);
              unint64_t v149 = *(void *)(*(void *)(v15 + 264) + 248) - v148;
              if ((v149 & 0x7FFFFFFF8) != 0)
              {
                uint64_t v150 = *(void *)((*(void *)(*(void *)(*(void *)(v15 + 256) + 24) + 16 * (v116 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 8);
                uint64_t v151 = (_DWORD *)v408;
                uint64_t v152 = (v149 >> 3);
                do
                {
                  unsigned int v153 = *(unsigned __int16 *)(**(void **)v148 + 24);
                  if ((*(_DWORD *)(v150 + ((v153 >> 3) & 0x1FFCLL)) >> v153)) {
                    ++*v151;
                  }
                  ++v151;
                  v148 += 8;
                  --v152;
                }
                while (v152);
              }
            }
            else
            {
              uint64_t v125 = *(void **)(v15 + 264);
              uint64_t v126 = v125[30];
              unint64_t v127 = v125[31] - v126;
              if ((v127 & 0x7FFFFFFF8) != 0)
              {
                uint64_t v128 = 0;
                uint64_t v129 = v125[1];
                uint64_t v132 = v125 + 6;
                uint64_t v131 = v125[6];
                uint64_t v130 = v132[1];
                uint64_t v133 = v408;
                uint64_t v134 = (v127 >> 3);
                do
                {
                  uint64_t v135 = *(void *)(v126 + 8 * v128);
                  unint64_t v136 = ((unint64_t)*(unsigned int *)(v129 + 24 * v116 + 16) >> 3) & 0x1FFFFFFE;
                  int v137 = *(unsigned __int16 *)(v130 + v136) + (*(_DWORD *)(v129 + 24 * v116 + 16) & 0xF) * v116;
                  unsigned int v138 = (_WORD *)(v130 + 2 + v136);
                  while (1)
                  {
                    uint64_t v139 = (unsigned __int16)v137;
                    LOWORD(v140) = *(_WORD *)(v131 + 4 * (unsigned __int16)v137);
                    if ((_WORD)v140 && v130 != 0) {
                      break;
                    }
                    int v142 = (unsigned __int16)*v138++;
                    v137 += v142;
                    if (!v142) {
                      goto LABEL_233;
                    }
                  }
                  while (2)
                  {
                    unsigned int v143 = *(unsigned __int16 *)(v131 + 4 * v139 + 2) << 16;
                    uint64_t v144 = (unsigned __int16)v140;
                    while (2)
                    {
                      uint64_t v145 = (unsigned __int16 *)(v130 + 2 * *(unsigned int *)(v129 + 24 * v144 + 8));
                      do
                      {
                        if ((unsigned __int16)v140 - 1 <= 0x3FFFFFFE
                          && (unint64_t)(unsigned __int16)v140 >> 3 < *(unsigned __int16 *)(*(void *)v135 + 22)
                          && ((*(unsigned __int8 *)(*(void *)(*(void *)v135 + 8)
                                                  + ((unint64_t)(unsigned __int16)v140 >> 3)) >> (v140 & 7)) & 1) != 0)
                        {
                          ++*(_DWORD *)(v133 + 4 * v128);
                          goto LABEL_233;
                        }
                        int v146 = *v145++;
                        LOWORD(v140) = v146 + v140;
                      }
                      while (v146);
                      uint64_t v144 = HIWORD(v143);
                      if (v144)
                      {
                        unsigned int v140 = HIWORD(v143);
                        v143 >>= 16;
                        continue;
                      }
                      break;
                    }
                    if (*v138)
                    {
                      v137 += (unsigned __int16)*v138++;
                      uint64_t v139 = (unsigned __int16)v137;
                      LOWORD(v140) = *(_WORD *)(v131 + 4 * (unsigned __int16)v137);
                      continue;
                    }
                    break;
                  }
LABEL_233:
                  ++v128;
                }
                while (v128 != v134);
              }
            }
          }
          goto LABEL_241;
        }
        uint64_t v112 = *(unsigned int *)(v42 + 40);
        if (!v112)
        {
          if ((v83 & 1) == 0) {
            goto LABEL_440;
          }
          goto LABEL_258;
        }
        uint64_t v154 = 0;
        for (uint64_t k = 0; k != v112; ++k)
        {
          uint64_t v156 = *(void *)(v42 + 32);
          if ((*(_DWORD *)(v156 + v154) & 0x10000FF) == 0x1000000)
          {
            unsigned int v157 = *(_DWORD *)(v156 + v154 + 4);
            if ((v157 & 0x80000000) != 0) {
              sub_1CC4163D8(v393, v42, k, v157, 0);
            }
          }
          v154 += 32;
        }
LABEL_256:
        uint64_t v162 = *(unsigned int *)(v42 + 40);
        if (v162)
        {
          int v218 = *(unsigned int **)(v42 + 32);
          unint64_t v219 = &v218[8 * v162];
          do
          {
            unint64_t v220 = v219;
            int v222 = *(v219 - 8);
            v219 -= 8;
            int v221 = v222;
            if ((v222 & 0x10000FF) == 0x1000000)
            {
              if ((v221 & 0xFFF00) != 0)
              {
                *unint64_t v219 = v221 & 0xFFF000FF;
              }
              else if ((v221 & 0x40F00000) == 0)
              {
                unint64_t v223 = *(v220 - 7);
                if (v223)
                {
                  if (((*(void *)(*(void *)(*(void *)(v393 + 256) + 352) + ((v223 >> 3) & 0x1FFFFFF8)) >> v223) & 1) == 0)
                  {
                    sub_1CC416900(v393, (unsigned __int16)*(v220 - 7));
                    uint64_t v224 = *(void *)(v393 + 264);
                    if (v224) {
                      uint64_t v225 = (void *)(v224 + 8);
                    }
                    else {
                      uint64_t v225 = 0;
                    }
                    uint64_t v226 = (unsigned __int16 *)(v225[6]
                                              + (((unint64_t)*(unsigned int *)(*v225
                                                                                    + 24 * (unsigned __int16)v223
                                                                                    + 16) >> 3) & 0x1FFFFFFE));
                    int v228 = *v226;
                    uint64_t v227 = v226 + 1;
                    int v229 = v228 + (*(_DWORD *)(*v225 + 24 * (unsigned __int16)v223 + 16) & 0xF) * v223;
                    do
                    {
                      LOWORD(v401[0]) = v229;
                      sub_1CC300FC8(v390, (unsigned __int16 *)v401);
                      int v230 = *v227++;
                      v229 += v230;
                    }
                    while (v230);
                  }
                }
              }
            }
          }
          while (v219 != v218);
        }
      }
      uint64_t v15 = v393;
      if ((v83 & 1) == 0)
      {
LABEL_271:
        uint64_t v174 = *(unsigned int *)(v42 + 40);
        if ((v376 & 1) == 0) {
          goto LABEL_290;
        }
        if (v174)
        {
          int v175 = *(_DWORD **)(v42 + 32);
          unint64_t v176 = &v175[8 * v174];
          do
          {
            if ((*v175 & 0x300000FF) == 0 && (*v175 & 0x10FFF00) != 0x1000000)
            {
              unint64_t v178 = v175[1];
              if ((v178 - 1) <= 0x3FFFFFFE
                && (*(void *)(*(void *)(*(void *)(v393 + 256) + 352) + 8 * (v178 >> 6)) & (1 << v178)) == 0)
              {
                char v179 = sub_1CC416A00(v393, v42, (unsigned __int16)v175[1]);
                uint64_t v180 = *(void *)(v393 + 264);
                long long v181 = v180 ? (void *)(v180 + 8) : 0;
                unint64_t v182 = *(unsigned int *)(*v181 + 24 * (unsigned __int16)v178 + 16);
                unint64_t v183 = (unsigned __int16 *)(v181[6] + ((v182 >> 3) & 0x1FFFFFFE));
                int v185 = *v183;
                uint64_t v184 = v183 + 1;
                int v186 = v185 + (v182 & 0xF) * v178;
                uint64_t v187 = *(void *)(v393 + 960);
                do
                {
                  *(_DWORD *)(v187 + 4 * (unsigned __int16)v186) = 1;
                  int v188 = *v184++;
                  v186 += v188;
                }
                while (v188);
                sub_1CC418894(v393, (unsigned __int16)v178);
                uint64_t v19 = v389;
                if ((v179 & 1) == 0
                  && (*(void *)(*(void *)(*(void *)(v393 + 256) + 352) + 8 * (v178 >> 6)) & (1 << v178)) == 0)
                {
                  *v175 |= 0x4000000u;
                }
              }
            }
            v175 += 8;
          }
          while (v175 != v176);
          LODWORD(v174) = *(_DWORD *)(v42 + 40);
          uint64_t v15 = v393;
LABEL_290:
          if (!v174)
          {
LABEL_438:
            if (v391)
            {
              uint64_t v299 = *(unsigned int *)(v42 + 40);
              if (v299)
              {
                uint64_t v309 = *(void *)(v42 + 32);
                uint64_t v310 = 32 * v299;
                do
                {
                  int v311 = *(_DWORD *)(v309 + v310 - 32);
                  if ((v311 & 0x410000FF) == 0x41000000)
                  {
                    if ((v311 & 0xFFF00) != 0)
                    {
                      *(_DWORD *)(v309 + v310 - 32) = v311 & 0xFFF000FF;
                    }
                    else
                    {
                      int v312 = *(_DWORD *)(v309 + v310 - 28);
                      if (v312
                        && llvm::MachineInstr::findRegisterUseOperandIdx(v42, *(_DWORD *)(v309 + v310 - 28), 0, *(void *)(v15 + 264)) == -1)
                      {
                        sub_1CC416900(v15, (unsigned __int16)v312);
                      }
                    }
                  }
                  v310 -= 32;
                }
                while (v310);
              }
            }
            goto LABEL_440;
          }
          unint64_t v189 = 0;
          char v190 = 0;
          while (2)
          {
            uint64_t v191 = *(void *)(v42 + 32);
            uint64_t v192 = 32 * v189;
            unint64_t v193 = v174;
            while (1)
            {
              int v194 = *(_DWORD *)(v191 + v192);
              if ((v194 & 0x10000FF) != 0 || (unint64_t v195 = *(unsigned int *)(v191 + v192 + 4), (v195 & 0x80000000) == 0))
              {
                uint64_t v15 = v393;
                goto LABEL_329;
              }
              if ((v194 & 0x10000000) == 0) {
                break;
              }
              ++v189;
              v192 += 32;
              char v190 = 1;
              if (v189 >= v174) {
                goto LABEL_413;
              }
            }
            uint64_t v196 = (v195 >> 6) & 0x1FFFFFF;
            uint64_t v197 = *(void *)(*v383 + 8 * v196);
            if ((v197 & (1 << v195)) == 0)
            {
              uint64_t v198 = *(void *)(*(void *)(*(void *)(v393 + 256) + 24) + 16 * (v195 & 0x7FFFFFFF) + 8);
              if (v198)
              {
                if ((*(unsigned char *)(v198 + 3) & 1) != 0
                  || (uint64_t v198 = *(void *)(v198 + 24)) != 0 && (*(unsigned char *)(v198 + 3) & 1) != 0)
                {
                  uint64_t v199 = *(void *)(v393 + 552);
                  uint64_t v200 = *(void *)(v198 + 8);
                  if (*(void *)(v200 + 24) != v199) {
                    goto LABEL_303;
                  }
                  int v204 = 0;
LABEL_309:
                  if (v204 == 7)
                  {
LABEL_303:
                    *(void *)(*v383 + 8 * v196) = v197 | (1 << v195);
                  }
                  else
                  {
                    ++v204;
                    while (1)
                    {
                      uint64_t v198 = *(void *)(v198 + 24);
                      if (!v198 || (*(unsigned char *)(v198 + 3) & 1) == 0) {
                        break;
                      }
                      uint64_t v205 = *(void *)(v198 + 8);
                      if (v205 != v200)
                      {
                        uint64_t v200 = *(void *)(v198 + 8);
                        if (*(void *)(v205 + 24) == v199) {
                          goto LABEL_309;
                        }
                        goto LABEL_303;
                      }
                    }
                  }
                }
              }
            }
            LODWORD(v408) = v195;
            v401[0] = 0;
            v401[1] = (void *)v195;
            LOBYTE(v402) = 0;
            uint64_t v201 = sub_1CC41852C(v382, (long long *)v401);
            if (v202)
            {
              uint64_t v203 = *(void *)(v42 + 32);
              if (((*(_DWORD *)(v203 + v192) >> 26) & ~HIBYTE(*(_DWORD *)(v203 + v192)) & 1) == 0)
              {
                if (sub_1CC418650((void *)v393, v195)) {
                  *(unsigned char *)(v201 + 14) = 1;
                }
                else {
                  *(_DWORD *)(v203 + v192) |= 0x4000000u;
                }
              }
            }
            uint64_t v206 = (unsigned int *)(v191 + v192);
            unsigned int v207 = *(unsigned __int16 *)(v201 + 12);
            uint64_t v15 = v393;
            if (!*(_WORD *)(v201 + 12))
            {
              if (**(_WORD **)(v42 + 16) == 19
                && (uint64_t v212 = *(void *)(v42 + 32), (*(_DWORD *)(v212 + 32) & 0xFFF00) == 0))
              {
                unsigned int v213 = *(_DWORD *)(v212 + 4);
              }
              else
              {
                unsigned int v213 = 0;
              }
              sub_1CC417AD0(v393, v42, v201, v213, 0);
              if (*(unsigned char *)(v201 + 16))
              {
                unsigned int v214 = v206;
                uint64_t v215 = (unsigned __int16 ***)(*(void *)(*(void *)(*(void *)(v393 + 256) + 24)
                                                        + 16 * (v195 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                unsigned int v216 = *((unsigned __int16 *)*v215 + 12);
                uint64_t v217 = *(void *)(v393 + 280);
                if (*(_DWORD *)(v393 + 288) != *(_DWORD *)(v217 + 24 * *((unsigned __int16 *)*v215 + 12))) {
                  llvm::RegisterClassInfo::compute(v385, v215);
                }
                unsigned int v208 = **(unsigned __int16 **)(v217 + 24 * v216 + 16);
                uint64_t v209 = v393;
                unint64_t v210 = (llvm::MachineInstr *)v42;
                uint64_t v211 = v214;
LABEL_328:
                sub_1CC415F54(v209, v210, v211, v208);
                unint64_t v193 = *(unsigned int *)(v42 + 40);
                LODWORD(v174) = *(_DWORD *)(v42 + 40);
LABEL_329:
                if (++v189 < v193) {
                  continue;
                }
                if ((v190 & 1) == 0) {
                  goto LABEL_438;
                }
                uint64_t v191 = *(void *)(v42 + 32);
LABEL_413:
                uint64_t v273 = *(void *)(v42 + 16);
                unsigned int v274 = *(unsigned __int8 *)(v273 + 4);
                if ((*(unsigned char *)(v273 + 8) & 2) != 0)
                {
                  if (v174 == v274)
                  {
                    uint64_t v15 = v393;
                    goto LABEL_438;
                  }
                  unsigned int v275 = *(unsigned __int8 *)(v273 + 4);
                  uint64_t v15 = v393;
                  do
                  {
                    int v313 = *(_DWORD *)(v191 + 32 * v274);
                    if ((v313 & 0x10000FF) != 0x1000000) {
                      break;
                    }
                    v275 += (v313 & 0x2000000) == 0;
                    if (v174 - 1 == v274) {
                      break;
                    }
                    ++v274;
                  }
                  while ((v313 & 0x2000000) == 0);
                }
                else
                {
                  unsigned int v275 = *(unsigned __int8 *)(v273 + 4);
                  uint64_t v15 = v393;
                }
                if (v275 != v174)
                {
                  unint64_t v276 = (unsigned int *)(v191 + 32 * v174);
                  uint64_t v277 = (unsigned int *)(v191 + 32 * v275);
                  do
                  {
                    unsigned int v278 = *v277;
                    if ((*v277 & 0x10000FF) == 0)
                    {
                      unsigned int v279 = v277[1];
                      if ((v279 & 0x80000000) != 0)
                      {
                        uint64_t v280 = v279 & 0x7FFFFFFF;
                        unsigned int v281 = *(unsigned __int8 *)(*(void *)(v15 + 800) + v280);
                        unsigned int v282 = *(_DWORD *)(v15 + 600);
                        if (v282 <= v281) {
                          goto LABEL_426;
                        }
                        uint64_t v283 = *(void *)(v15 + 592);
                        while (1)
                        {
                          unsigned int v284 = v281;
                          if (((*(_DWORD *)(v283 + 24 * v281 + 8) ^ v279) & 0x7FFFFFFF) == 0) {
                            break;
                          }
                          v281 += 256;
                          if (v284 + 256 >= v282) {
                            goto LABEL_426;
                          }
                        }
                        if (v282 == v281
                          || (unsigned int v285 = *(unsigned __int16 *)(v283 + 24 * v281 + 12), !*(_WORD *)(v283 + 24 * v281 + 12)))
                        {
LABEL_426:
                          unint64_t v286 = (unsigned __int16 ***)(*(void *)(*(void *)(*(void *)(v15 + 256) + 24)
                                                                  + 16 * v280) & 0xFFFFFFFFFFFFFFF8);
                          unsigned int v287 = *((unsigned __int16 *)*v286 + 12);
                          uint64_t v288 = v15;
                          uint64_t v289 = *(void *)(v15 + 280);
                          if (*(_DWORD *)(v288 + 288) != *(_DWORD *)(v289 + 24 * *((unsigned __int16 *)*v286 + 12)))
                          {
                            llvm::RegisterClassInfo::compute(v385, v286);
                            unsigned int v278 = *v277;
                          }
                          unsigned int v285 = **(unsigned __int16 **)(v289 + 24 * v287 + 16);
                          uint64_t v15 = v393;
                        }
                        int v290 = (v278 >> 8) & 0xFFF;
                        if (v290)
                        {
                          uint64_t v291 = *(void **)(v15 + 264);
                          uint64_t v292 = v291[1];
                          uint64_t v293 = v291[7];
                          uint64_t v294 = *(unsigned int *)(v292 + 24 * v285 + 4);
                          if (*(_WORD *)(v293 + 2 * v294))
                          {
                            unsigned int v295 = v285;
                            v285 += *(unsigned __int16 *)(v293 + 2 * v294);
                            unint64_t v296 = (unsigned __int16 *)(v291[11] + 2 * *(unsigned int *)(v292 + 24 * v295 + 12));
                            int8x8_t v297 = (unsigned __int16 *)(v293 + 2 * v294 + 2);
                            while (v290 != *v296)
                            {
                              int v298 = *v297++;
                              v285 += v298;
                              ++v296;
                              if (!v298) {
                                goto LABEL_434;
                              }
                            }
                          }
                          else
                          {
LABEL_434:
                            LOWORD(v285) = 0;
                          }
                          *uint64_t v277 = v278 & 0xFFF000FF;
                        }
                        llvm::MachineOperand::setReg((uint64_t)v277, (unsigned __int16)v285);
                        *v277 |= 0x8000000u;
                      }
                    }
                    v277 += 8;
                  }
                  while (v277 != v276);
                }
                goto LABEL_438;
              }
              unsigned int v207 = *(unsigned __int16 *)(v201 + 12);
            }
            break;
          }
          *(void *)uint64_t v201 = v42;
          if (**(_WORD **)(v42 + 16) == 20)
          {
            *((_WORD *)sub_1CD56BA34((uint64_t)v380, (int *)&v408) + 2) = v207;
            unsigned int v207 = *(unsigned __int16 *)(v201 + 12);
          }
          sub_1CC418894(v393, v207);
          unsigned int v208 = *(unsigned __int16 *)(v201 + 12);
          uint64_t v209 = v393;
          unint64_t v210 = (llvm::MachineInstr *)v42;
          uint64_t v211 = v206;
          goto LABEL_328;
        }
LABEL_440:
        int v300 = **(unsigned __int16 **)(v42 + 16);
        uint64_t v41 = v381;
        if (v300 == 19)
        {
          if (*(_DWORD *)(*(void *)(v42 + 32) + 4) != *(_DWORD *)(*(void *)(v42 + 32) + 36)
            || *(_DWORD *)(v42 + 40) != 2)
          {
            goto LABEL_458;
          }
          unint64_t v302 = *(unsigned int *)(v15 + 992);
          if (v302 >= *(unsigned int *)(v15 + 996)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v15 + 984) + 8 * v302) = v42;
          ++*(_DWORD *)(v15 + 992);
          int v300 = **(unsigned __int16 **)(v42 + 16);
        }
        if (v300 == 20)
        {
          for (uint64_t m = *(void *)(v42 + 8); (*(_WORD *)(m + 44) & 4) != 0; uint64_t m = *(void *)(m + 8))
          {
            uint64_t v304 = *(unsigned int *)(m + 40);
            if (v304)
            {
              unint64_t v305 = *(unsigned int **)(m + 32);
              uint64_t v306 = 32 * v304;
              do
              {
                if (!*(unsigned char *)v305)
                {
                  int v307 = v305[1];
                  if (v307 < 0)
                  {
                    uint64_t v308 = sub_1CBA86078(*(void *)(v15 + 816), *(_DWORD *)(v15 + 832), v307);
                    sub_1CC415F54(v15, (llvm::MachineInstr *)v42, v305, *((unsigned __int16 *)v308 + 2));
                  }
                }
                v305 += 8;
                v306 -= 32;
              }
              while (v306);
            }
          }
        }
LABEL_458:
        unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
        if (v42)
        {
          uint64_t v43 = v388;
          if ((*(unsigned char *)v42 & 4) != 0) {
            goto LABEL_464;
          }
        }
        else
        {
          uint64_t v43 = v388;
        }
        while ((*(_WORD *)(v42 + 44) & 4) != 0)
          unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
LABEL_464:
        if ((void *)v42 == v41) {
          goto LABEL_54;
        }
        continue;
      }
LABEL_258:
      uint64_t v163 = *(unsigned int *)(v15 + 1416);
      if (v163)
      {
        uint64_t v164 = *(int ***)(v15 + 1408);
        uint64_t v165 = 8 * v163;
        do
        {
          BOOL v166 = *v164++;
          sub_1CBA6DECC(*(void *)(v15 + 256) + 280, v166, 0xFFFFFFFF);
          v165 -= 8;
        }
        while (v165);
      }
      unsigned int v167 = *(_DWORD *)(v15 + 600);
      if (v167)
      {
        uint64_t v168 = *(void *)(v15 + 592);
        uint64_t v169 = v168 + 24 * v167;
        do
        {
          unsigned int v170 = *(unsigned __int16 *)(v168 + 12);
          if (*(_WORD *)(v168 + 12))
          {
            uint64_t v171 = *(unsigned int *)(v15 + 1416);
            if (v171)
            {
              uint64_t v172 = *(void **)(v15 + 1408);
              uint64_t v173 = 8 * v171;
              while ((*(_DWORD *)(*v172 + 4 * (v170 >> 5)) & (1 << v170)) != 0)
              {
                ++v172;
                v173 -= 8;
                if (!v173) {
                  goto LABEL_270;
                }
              }
              sub_1CC416A00(v15, v42, v170);
            }
          }
LABEL_270:
          v168 += 24;
        }
        while (v168 != v169);
      }
      goto LABEL_271;
    }
    break;
  }
  sub_1CD56AAA0(&v410, v42);
  uint64_t v59 = v415;
  if (v415) {
    uint64_t v60 = v413;
  }
  else {
    uint64_t v60 = v410;
  }
  if (v415) {
    uint64_t v61 = (unsigned __int8 *)&v414;
  }
  else {
    uint64_t v61 = &v410[4 * v411];
  }
  if (v60 == v61)
  {
LABEL_88:
    sub_1CB833A08((uint64_t)&v413, v414);
    if (v410 != (unsigned __int8 *)&v412) {
      free(v410);
    }
    uint64_t v41 = v381;
    goto LABEL_458;
  }
  while (2)
  {
    uint64_t v62 = (int *)(v60 + 28);
    if (!v59) {
      uint64_t v62 = (int *)v60;
    }
    int v63 = *v62;
    if ((*v62 & 0x80000000) == 0)
    {
      if (v59) {
        goto LABEL_95;
      }
LABEL_103:
      float v65 = v60 + 4;
LABEL_104:
      uint64_t v60 = v65;
      if (v65 == v61) {
        goto LABEL_88;
      }
      continue;
    }
    break;
  }
  int v66 = *(_DWORD *)(*v43 + 4 * (v63 & 0x7FFFFFFF));
  if (v66 != -1)
  {
    llvm::updateDbgValueForSpill(v42, v66, v63);
    if (v59) {
      goto LABEL_95;
    }
    goto LABEL_103;
  }
  unsigned int v67 = *(unsigned __int8 *)(*(void *)(v15 + 800) + (v63 & 0x7FFFFFFF));
  uint64_t v68 = v15;
  uint64_t v15 = *(unsigned int *)(v15 + 600);
  uint64_t v69 = *(void *)(v68 + 592);
  if (v15 > v67)
  {
    while (1)
    {
      unsigned int v70 = v67;
      if (((*(_DWORD *)(v69 + 24 * v67 + 8) ^ v63) & 0x7FFFFFFF) == 0) {
        break;
      }
      v67 += 256;
      if (v70 + 256 >= v15) {
        goto LABEL_111;
      }
    }
    uint64_t v15 = v67;
  }
LABEL_111:
  *(void *)&long long v408 = v409;
  *((void *)&v408 + 1) = 0x600000000;
  sub_1CD5364DC(v42, v63, v401);
  unsigned int v397 = (char *)v401[0];
  uint64_t v398 = (char *)v401[1];
  if (v404)
  {
    if (v404 == &v402)
    {
      uint64_t v400 = v399;
      (*(void (**)(long long *, void *))(v402 + 24))(&v402, v399);
    }
    else
    {
      uint64_t v400 = (void *)(*(uint64_t (**)(void))(*(void *)v404 + 16))();
    }
  }
  else
  {
    uint64_t v400 = 0;
  }
  int v394 = v405;
  if (v407)
  {
    if (v407 == v406)
    {
      uint64_t v396 = v395;
      (*(void (**)(void *))(v406[0] + 24))(v406);
    }
    else
    {
      uint64_t v396 = (void *)(*(uint64_t (**)(void))(*v407 + 16))();
    }
  }
  else
  {
    uint64_t v396 = 0;
  }
LABEL_121:
  uint64_t v71 = v397;
LABEL_122:
  if (v71 == v394)
  {
    if (v396 == v395)
    {
      (*(void (**)(void *))(v395[0] + 32))(v395);
    }
    else if (v396)
    {
      (*(void (**)(void))(*v396 + 40))();
    }
    if (v400 == v399)
    {
      (*(void (**)(void *))(v399[0] + 32))(v399);
    }
    else if (v400)
    {
      (*(void (**)(void))(*v400 + 40))();
    }
    sub_1CD536B84(v401);
    if (v69 + 24 * v15 != *(void *)(v393 + 592) + 24 * *(unsigned int *)(v393 + 600)
      && (uint64_t v72 = v69 + 24 * v15,
          int v74 = *(unsigned __int16 *)(v72 + 12),
          BOOL v73 = (unsigned __int16 *)(v72 + 12),
          v74))
    {
      if (DWORD2(v408))
      {
        uint64_t v78 = (unsigned int **)v408;
        uint64_t v79 = 8 * DWORD2(v408);
        do
        {
          BOOL v80 = *v78++;
          sub_1CC415F54(v393, (llvm::MachineInstr *)v42, v80, *v73);
          v79 -= 8;
        }
        while (v79);
      }
    }
    else
    {
      LODWORD(v401[0]) = v63;
      BOOL v75 = sub_1CD56AB58((uint64_t)v386, v401);
      unint64_t v76 = v75[4];
      if (v76 >= v75[5]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)v75 + 1) + 8 * v76) = v42;
      ++v75[4];
    }
    LODWORD(v401[0]) = v63;
    uint64_t v77 = sub_1CD56AE7C(v387, (int *)v401);
    sub_1CD47792C(v77 + 2, (unsigned char *)v408, (unsigned char *)(v408 + 8 * DWORD2(v408)));
    if ((_OWORD *)v408 != v409) {
      free((void *)v408);
    }
    uint64_t v15 = v393;
    uint64_t v43 = v388;
    uint64_t v19 = v389;
    if (!v59) {
      goto LABEL_103;
    }
LABEL_95:
    int v64 = (unsigned __int8 *)*((void *)v60 + 1);
    if (v64)
    {
      do
      {
        float v65 = v64;
        int v64 = *(unsigned __int8 **)v64;
      }
      while (v64);
    }
    else
    {
      do
      {
        float v65 = (unsigned __int8 *)*((void *)v60 + 2);
        BOOL v30 = *(void *)v65 == (void)v60;
        uint64_t v60 = v65;
      }
      while (!v30);
    }
    goto LABEL_104;
  }
  if (DWORD2(v408) >= (unint64_t)HIDWORD(v408)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(v408 + 8 * DWORD2(v408)) = v71;
  ++DWORD2(v408);
  while (1)
  {
    uint64_t v71 = v397 + 32;
    unsigned int v397 = v71;
    if (v71 == v398) {
      goto LABEL_122;
    }
    if (!v400) {
      break;
    }
    if ((*(unsigned int (**)(void *, char *))(*v400 + 48))(v400, v71)) {
      goto LABEL_121;
    }
  }
  sub_1CB920400();
LABEL_581:
  uint64_t v371 = *(void *)(v15 + 256);
  *(_DWORD *)(v371 + 32) = 0;
  uint64_t v372 = *(void *)(v371 + 456);
  uint64_t v373 = *(void *)(v371 + 464);
  while (v372 != v373)
  {
    *(_DWORD *)(v372 + 4) = 0;
    v372 += 8;
  }
LABEL_22:
  *(_DWORD *)(v15 + 568) = 0;
  sub_1CD56A91C((_DWORD *)(v15 + 840));
  return 1;
}

double sub_1CC415E18@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 2;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC415E40@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 584))
  {
    *(void *)(a2 + 16) = 8;
  }
  else
  {
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(void *)(a2 + 16) = 0;
  }
  *(void *)a2 = a2 + 16;
  *(_DWORD *)(a2 + 8) = 1;
  *(_DWORD *)(a2 + 12) = 6;
  *(_DWORD *)(a2 + 64) = 11;
  return result;
}

double sub_1CC415E90@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

_DWORD *sub_1CC415EB8(_DWORD *result, int a2)
{
  int v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new(40 * v4, (std::align_val_t)8uLL);
    *(void *)int v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 40 * v5;
      do
      {
        *double result = -1;
        result += 10;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC415F54(uint64_t a1, llvm::MachineInstr *a2, unsigned int *a3, unsigned int a4)
{
  int v6 = (*a3 >> 8) & 0xFFF;
  if (v6)
  {
    if (a4
      && (int v9 = *(void **)(a1 + 264),
          uint64_t v10 = v9[1],
          uint64_t v11 = v9[7],
          uint64_t v12 = *(unsigned int *)(v10 + 24 * a4 + 4),
          *(_WORD *)(v11 + 2 * v12)))
    {
      unsigned int v13 = *(unsigned __int16 *)(v11 + 2 * v12) + a4;
      unsigned int v14 = (unsigned __int16 *)(v9[11] + 2 * *(unsigned int *)(v10 + 24 * a4 + 12));
      uint64_t v15 = (unsigned __int16 *)(v11 + 2 * v12 + 2);
      while (v6 != *v14)
      {
        unsigned int v16 = 0;
        int v17 = *v15++;
        v13 += v17;
        ++v14;
        if (!v17) {
          goto LABEL_11;
        }
      }
      unsigned int v16 = (unsigned __int16)v13;
    }
    else
    {
      unsigned int v16 = 0;
    }
LABEL_11:
    llvm::MachineOperand::setReg((uint64_t)a3, v16);
    unsigned int v18 = *a3 | 0x8000000;
    if ((*a3 & 0x1000000) == 0) {
      unsigned int v18 = *a3 & 0xF7F000FF | 0x8000000;
    }
    *a3 = v18;
    if ((!(v18 & 0x1000000) & (v18 >> 26)) != 0)
    {
      uint64_t v19 = *(void *)(a1 + 264);
      llvm::MachineInstr::addRegisterKilled(a2, a4, v19, 1);
    }
    else if ((~v18 & 0x11000000) == 0)
    {
      uint64_t v20 = *(void *)(a1 + 264);
      if ((HIBYTE(v18) & 1 & (v18 >> 26)) != 0)
      {
        llvm::MachineInstr::addRegisterDead(a2, a4, v20, 1);
      }
      else
      {
        llvm::MachineInstr::addRegisterDefined((uint64_t)a2, a4, v20);
      }
    }
  }
  else
  {
    llvm::MachineOperand::setReg((uint64_t)a3, a4);
    *a3 |= 0x8000000u;
  }
}

void sub_1CC4160F0(uint64_t a1, int *a2, int *a3)
{
  unint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *uint64_t v7 = -1;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      int v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        uint64_t v11 = v10 & (37 * v9);
        uint64_t v12 = *(void *)a1 + 32 * v11;
        int v13 = *(_DWORD *)v12;
        if (v9 != *(_DWORD *)v12)
        {
          uint64_t v17 = 0;
          int v18 = 1;
          while (v13 != -1)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v13 == -2;
            }
            if (v19) {
              uint64_t v17 = v12;
            }
            int v20 = v11 + v18++;
            uint64_t v11 = v20 & v10;
            uint64_t v12 = *(void *)a1 + 32 * v11;
            int v13 = *(_DWORD *)v12;
            if (v9 == *(_DWORD *)v12) {
              goto LABEL_7;
            }
          }
          if (v17) {
            uint64_t v12 = v17;
          }
        }
LABEL_7:
        *(void *)(v12 + 8) = v12 + 24;
        *(_DWORD *)uint64_t v12 = v9;
        *(void *)(v12 + 16) = 0x100000000;
        unsigned int v14 = v4[4];
        uint64_t v15 = (int *)*((void *)v4 + 1);
        if ((int *)v12 != v4 && v14 != 0)
        {
          if (v15 == v4 + 6)
          {
            if (v14 >= 2) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v12 + 24), v15, 8 * v4[4]);
            *(_DWORD *)(v12 + 16) = v14;
            uint64_t v15 = (int *)*((void *)v4 + 1);
          }
          else
          {
            *(void *)(v12 + 8) = v15;
            int v21 = v4[5];
            *(_DWORD *)(v12 + 16) = v14;
            *(_DWORD *)(v12 + 20) = v21;
            *((void *)v4 + 1) = v4 + 6;
            v4[5] = 0;
            uint64_t v15 = v4 + 6;
          }
          v4[4] = 0;
        }
        ++*(_DWORD *)(a1 + 8);
        if (v15 != v4 + 6) {
          free(v15);
        }
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC4162B8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v6)
      {
        if (v6) {
          memmove(*(void **)a1, v4, 8 * v6);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 8 * v8);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v7;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v6;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *uint64_t v7 = 0;
  }
  return a1;
}

void sub_1CC4163D8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v7 = a2;
  v59[18] = *MEMORY[0x1E4F143B8];
  unsigned int v51 = a4;
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)&long long v55 = 0;
  int v10 = (unsigned int *)(v9 + 32 * a3);
  *((void *)&v55 + 1) = a4;
  char v56 = 0;
  uint64_t v11 = sub_1CC41852C((uint64_t *)(a1 + 592), &v55);
  if (v12 && (~*v10 & 0x5000000) != 0)
  {
    if (sub_1CC418650((void *)a1, a4)) {
      *(unsigned char *)(v11 + 14) = 1;
    }
    else {
      *v10 |= 0x4000000u;
    }
  }
  unsigned int v13 = *(unsigned __int16 *)(v11 + 12);
  if (!*(_WORD *)(v11 + 12))
  {
    sub_1CC417AD0(a1, v7, v11, 0, a5);
    unsigned int v13 = *(unsigned __int16 *)(v11 + 12);
  }
  if (*(unsigned char *)(v11 + 15) || *(unsigned char *)(v11 + 14))
  {
    if (**(_WORD **)(v7 + 16) != 10)
    {
      uint64_t v14 = v7;
      if ((*(unsigned char *)v7 & 4) == 0)
      {
        uint64_t v14 = v7;
        if ((*(_WORD *)(v7 + 44) & 8) != 0)
        {
          uint64_t v14 = v7;
          do
            uint64_t v14 = *(void *)(v14 + 8);
          while ((*(_WORD *)(v14 + 44) & 8) != 0);
        }
      }
      uint64_t v47 = v10;
      uint64_t v48 = v7;
      uint64_t v15 = *(unint64_t **)(v14 + 8);
      uint64_t v46 = (void *)v11;
      int v50 = *(unsigned __int8 *)(v11 + 14);
      int v16 = sub_1CC41891C(a1, a4);
      unsigned int v45 = v13;
      (*(void (**)(void))(**(void **)(a1 + 272) + 448))();
      FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 552));
      LODWORD(v55) = a4;
      int v18 = sub_1CD56AE7C(a1 + 840, (int *)&v55);
      *(void *)&long long v55 = 1;
      for (uint64_t i = 8; i != 40; i += 16)
        *(void *)((char *)&v55 + i) = -4096;
      uint64_t v57 = (char *)v59;
      uint64_t v58 = 0x200000000;
      uint64_t v49 = v18;
      uint64_t v20 = v18[4];
      if (v20)
      {
        int v21 = (uint64_t *)*((void *)v18 + 1);
        uint64_t v22 = 8 * v20;
        do
        {
          uint64_t v23 = *v21;
          uint64_t v52 = *(void *)(*v21 + 8);
          uint64_t v24 = sub_1CD56B268((uint64_t)&v55, &v52);
          unint64_t v25 = *(unsigned int *)(v24 + 8);
          if (v25 >= *(unsigned int *)(v24 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v24 + 8 * v25) = v23;
          ++*(_DWORD *)(v24 + 8);
          ++v21;
          v22 -= 8;
        }
        while (v22);
        if (v58)
        {
          uint64_t v26 = v57;
          unint64_t v27 = &v57[72 * v58];
          do
          {
            uint64_t v28 = *(void *)v26;
            uint64_t v52 = *(void *)v26;
            v53[0] = v54;
            v53[1] = (void *)0x600000000;
            if (*((_DWORD *)v26 + 4))
            {
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v53, (uint64_t)(v26 + 8));
              uint64_t v28 = v52;
            }
            uint64_t v29 = llvm::buildDbgValueForSpill(*(void *)(a1 + 552), v15, v28, v16, (uint64_t)v53);
            if (v50)
            {
              unint64_t v30 = llvm::MachineFunction::CloneMachineInstr(*(llvm::MachineFunction **)(*(void *)(a1 + 552) + 32), v29);
              unint64_t v31 = v30;
              uint64_t v32 = *(void *)(*(void *)(a1 + 552) + 40);
              *(void *)(v30 + 24) = v32;
              uint64_t v33 = *(void *)(v32 + 32);
              uint64_t v34 = *(unsigned int *)(v30 + 40);
              if (v34)
              {
                uint64_t v38 = *(void *)(v30 + 32);
                uint64_t v39 = *(void *)(v33 + 40);
                uint64_t v40 = 32 * v34;
                do
                {
                  if (!*(unsigned char *)v38)
                  {
                    uint64_t v41 = *(unsigned int *)(v38 + 4);
                    if ((int)v41 >= 0) {
                      unint64_t v42 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v41);
                    }
                    else {
                      unint64_t v42 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v43 = *v42;
                    if (*v42)
                    {
                      uint64_t v44 = *(void *)(v43 + 16);
                      *(void *)(v43 + 16) = v38;
                      *(void *)(v38 + 16) = v44;
                      if (*(unsigned char *)(v38 + 3))
                      {
                        *(void *)(v38 + 24) = v43;
                      }
                      else
                      {
                        *(void *)(v38 + 24) = 0;
                        unint64_t v42 = (uint64_t *)(v44 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v38 + 16) = v38;
                      *(void *)(v38 + 24) = 0;
                    }
                    *unint64_t v42 = v38;
                  }
                  v38 += 32;
                  v40 -= 32;
                }
                while (v40);
              }
              uint64_t v35 = *(void *)(v33 + 728);
              if (v35) {
                (*(void (**)(uint64_t, unint64_t))(*(void *)v35 + 24))(v35, v31);
              }
              unint64_t v36 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v31 = v36 | *(void *)v31 & 7;
              *(void *)(v31 + 8) = FirstTerminator;
              *(void *)(v36 + 8) = v31;
              void *FirstTerminator = *FirstTerminator & 7 | v31;
            }
            if (**(_WORD **)(v28 + 16) == 13)
            {
              uint64_t v37 = *(void *)(v28 + 32);
              if (!*(unsigned char *)v37 && !*(_DWORD *)(v37 + 4)) {
                llvm::updateDbgValueForSpill(v28, v16, 0);
              }
            }
            if (v53[0] != v54) {
              free(v53[0]);
            }
            v26 += 72;
          }
          while (v26 != v27);
        }
      }
      v49[4] = 0;
      sub_1CC398900(&v57);
      if ((v55 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*((void *)&v55 + 1), 8);
      }
      uint64_t v11 = (uint64_t)v46;
      int v10 = v47;
      *uint64_t v46 = 0;
      uint64_t v7 = v48;
      unsigned int v13 = v45;
    }
    *(_WORD *)(v11 + 14) = 0;
  }
  if (**(_WORD **)(v7 + 16) == 20) {
    *((_WORD *)sub_1CD56BA34(a1 + 816, (int *)&v51) + 2) = v13;
  }
  sub_1CC418894(a1, v13);
  sub_1CC415F54(a1, (llvm::MachineInstr *)v7, v10, v13);
}

uint64_t sub_1CC416900(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 264);
  if (v2) {
    unint64_t v3 = (uint64_t *)(v2 + 8);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  unint64_t v5 = *(unsigned int *)(*v3 + 24 * a2 + 16);
  unint64_t v6 = v5 >> 4;
  uint64_t v7 = v3[6];
  int v8 = *(unsigned __int16 *)(v7 + 2 * (v5 >> 4)) + (v5 & 0xF) * a2;
  uint64_t v9 = *(void *)(result + 960);
  int v10 = *(_DWORD *)(v9 + 4 * (unsigned __int16)(*(_WORD *)(v7 + 2 * (v5 >> 4)) + (v5 & 0xF) * a2));
  if (v10)
  {
    if (v10 == 1)
    {
      uint64_t v11 = (unsigned __int16 *)(v7 + 2 * v6 + 2);
      do
      {
        *(_DWORD *)(v9 + 4 * (unsigned __int16)v8) = 0;
        int v12 = *v11++;
        v8 += v12;
      }
      while (v12);
    }
    else
    {
      unsigned int v13 = *(unsigned __int8 *)(*(void *)(result + 800) + (v10 & 0x7FFFFFFF));
      unsigned int v14 = *(_DWORD *)(result + 600);
      uint64_t v15 = *(void *)(result + 592);
      if (v14 > v13)
      {
        while (1)
        {
          unsigned int v16 = v13;
          if (((*(_DWORD *)(v15 + 24 * v13 + 8) ^ v10) & 0x7FFFFFFF) == 0) {
            break;
          }
          v13 += 256;
          if (v16 + 256 >= v14) {
            goto LABEL_14;
          }
        }
        unsigned int v14 = v13;
      }
LABEL_14:
      uint64_t v17 = v15 + 24 * v14;
      unsigned int v20 = *(unsigned __int16 *)(v17 + 12);
      int v18 = (_WORD *)(v17 + 12);
      unsigned int v19 = v20;
      unint64_t v21 = *(unsigned int *)(v4 + 24 * v20 + 16);
      uint64_t v22 = (unsigned __int16 *)(v7 + ((v21 >> 3) & 0x1FFFFFFE));
      int v24 = *v22;
      uint64_t v23 = v22 + 1;
      int v25 = v24 + (v21 & 0xF) * v19;
      do
      {
        *(_DWORD *)(v9 + 4 * (unsigned __int16)v25) = 0;
        int v26 = *v23++;
        v25 += v26;
      }
      while (v26);
      _WORD *v18 = 0;
    }
  }
  return result;
}

uint64_t sub_1CC416A00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4 = 0;
  uint64_t v5 = *(void *)(a1 + 264);
  if (v5) {
    unint64_t v6 = (void *)(v5 + 8);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = *(unsigned int *)(*v6 + 24 * a3 + 16);
  int v8 = (_WORD *)(v6[6] + ((v7 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v9 = *v8 + (v7 & 0xF) * a3;
  uint64_t v10 = *(void *)(a1 + 960);
  do
  {
    unsigned __int16 v11 = v9;
    int v12 = *(_DWORD *)(v10 + 4 * v9);
    if (v12)
    {
      if (v12 == 1)
      {
        *(_DWORD *)(v10 + 4 * v9) = 0;
        char v4 = 1;
      }
      else
      {
        unsigned int v13 = *(unsigned __int8 *)(*(void *)(a1 + 800) + (v12 & 0x7FFFFFFF));
        unsigned int v14 = *(_DWORD *)(a1 + 600);
        uint64_t v15 = *(void *)(a1 + 592);
        if (v14 > v13)
        {
          while (1)
          {
            unsigned int v16 = v13;
            if (((*(_DWORD *)(v15 + 24 * v13 + 8) ^ v12) & 0x7FFFFFFF) == 0) {
              break;
            }
            v13 += 256;
            if (v16 + 256 >= v14) {
              goto LABEL_13;
            }
          }
          unsigned int v14 = v13;
        }
LABEL_13:
        if ((*(unsigned char *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
        {
          uint64_t v17 = a2;
          do
            uint64_t v17 = *(void *)(v17 + 8);
          while ((*(_WORD *)(v17 + 44) & 8) != 0);
        }
        int v18 = (_WORD *)(v15 + 24 * v14 + 12);
        sub_1CC41891C(a1, v12);
        (*(void (**)(void))(**(void **)(a1 + 272) + 464))();
        uint64_t v19 = *(void *)(a1 + 264);
        if (v19) {
          unsigned int v20 = (void *)(v19 + 8);
        }
        else {
          unsigned int v20 = 0;
        }
        unint64_t v21 = *(unsigned int *)(*v20 + 24 * (unsigned __int16)*v18 + 16);
        uint64_t v22 = (unsigned __int16 *)(v20[6] + ((v21 >> 3) & 0x1FFFFFFE));
        int v24 = *v22;
        uint64_t v23 = v22 + 1;
        int v25 = v24 + (v21 & 0xF) * (unsigned __int16)*v18;
        uint64_t v10 = *(void *)(a1 + 960);
        do
        {
          *(_DWORD *)(v10 + 4 * (unsigned __int16)v25) = 0;
          int v26 = *v23++;
          v25 += v26;
        }
        while (v26);
        _WORD *v18 = 0;
        char v4 = 1;
        *(unsigned char *)(v15 + 24 * v14 + 15) = 1;
      }
    }
    int v27 = (unsigned __int16)v8[1];
    ++v8;
    unsigned __int16 v9 = v27 + v11;
  }
  while (v27);
  return v4 & 1;
}

uint64_t sub_1CC416C08(uint64_t result, __int16 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int16 v11 = (__int16 *)result;
  while (2)
  {
    int v89 = a2 - 2;
    unint64_t v90 = a2 - 1;
    unsigned int v88 = a2 - 3;
    int v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned __int16 v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                double result = sub_1CC417408(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)*v11);
                if (result)
                {
                  __int16 v40 = *v11;
                  *unsigned __int16 v11 = *(a2 - 1);
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                double result = sub_1CC4175D0(v11, v11 + 1, v90, a3);
                break;
              case 4:
                double result = sub_1CC417908(v11, v11 + 1, v11 + 2, v90, a3);
                break;
              case 5:
                uint64_t v41 = (unsigned __int16 *)(v11 + 2);
                unint64_t v42 = (unsigned __int16 *)(v11 + 3);
                sub_1CC417908(v11, v11 + 1, v11 + 2, v11 + 3, a3);
                double result = sub_1CC417408(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)v11[3]);
                if (result)
                {
                  __int16 v43 = *v42;
                  *unint64_t v42 = *(a2 - 1);
                  *(a2 - 1) = v43;
                  double result = sub_1CC417408(a3, *v42, *v41);
                  if (result)
                  {
                    unsigned __int16 v44 = *v41;
                    unsigned int v45 = *v42;
                    unsigned __int16 *v41 = v45;
                    *unint64_t v42 = v44;
                    double result = sub_1CC417408(a3, v45, (unsigned __int16)v11[1]);
                    if (result)
                    {
                      __int16 v46 = v11[1];
                      unsigned int v47 = (unsigned __int16)v11[2];
                      v11[1] = v47;
                      void v11[2] = v46;
                      double result = sub_1CC417408(a3, v47, (unsigned __int16)*v11);
                      if (result)
                      {
                        HIDWORD(v48) = *(_DWORD *)v11;
                        LODWORD(v48) = *(_DWORD *)v11;
                        *(_DWORD *)unsigned __int16 v11 = v48 >> 16;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 47)
          {
            uint64_t v49 = v11 + 1;
            BOOL v51 = v11 == a2 || v49 == a2;
            if (a5)
            {
              if (!v51)
              {
                uint64_t v52 = 0;
                uint64_t v53 = v11;
                do
                {
                  unsigned int v54 = (unsigned __int16)v53[1];
                  unsigned int v55 = (unsigned __int16)*v53;
                  uint64_t v53 = v49;
                  double result = sub_1CC417408(a3, v54, v55);
                  if (result)
                  {
                    unsigned int v56 = (unsigned __int16)*v53;
                    uint64_t v57 = v52;
                    while (1)
                    {
                      *(__int16 *)((char *)v11 + v57 + 2) = *(__int16 *)((char *)v11 + v57);
                      if (!v57) {
                        break;
                      }
                      double result = sub_1CC417408(a3, v56, *(unsigned __int16 *)((char *)v11 + v57 - 2));
                      v57 -= 2;
                      if ((result & 1) == 0)
                      {
                        uint64_t v58 = (__int16 *)((char *)v11 + v57 + 2);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v58 = v11;
LABEL_81:
                    *uint64_t v58 = v56;
                  }
                  uint64_t v49 = v53 + 1;
                  v52 += 2;
                }
                while (v53 + 1 != a2);
              }
            }
            else if (!v51)
            {
              do
              {
                unsigned int v81 = (unsigned __int16)v11[1];
                unsigned int v82 = (unsigned __int16)*v11;
                unsigned __int16 v11 = v49;
                double result = sub_1CC417408(a3, v81, v82);
                if (result)
                {
                  unsigned int v83 = (unsigned __int16)*v11;
                  char v84 = v11;
                  do
                  {
                    char v85 = v84;
                    __int16 v86 = *--v84;
                    *char v85 = v86;
                    double result = sub_1CC417408(a3, v83, (unsigned __int16)*(v85 - 2));
                  }
                  while ((result & 1) != 0);
                  *char v84 = v83;
                }
                uint64_t v49 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v59 = (unint64_t)(v14 - 2) >> 1;
              int64_t v91 = v59;
              BOOL v87 = a2;
              do
              {
                int64_t v60 = v59;
                if (v91 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = &v11[v61];
                  if (2 * v59 + 2 < v14 && sub_1CC417408(a3, (unsigned __int16)*v62, (unsigned __int16)v62[1]))
                  {
                    ++v62;
                    uint64_t v61 = 2 * v60 + 2;
                  }
                  int v63 = &v11[v60];
                  double result = sub_1CC417408(a3, (unsigned __int16)*v62, (unsigned __int16)*v63);
                  if ((result & 1) == 0)
                  {
                    unsigned int v64 = (unsigned __int16)*v63;
                    do
                    {
                      float v65 = v62;
                      *int v63 = *v62;
                      if (v91 < v61) {
                        break;
                      }
                      uint64_t v66 = (2 * v61) | 1;
                      uint64_t v62 = &v11[v66];
                      uint64_t v67 = 2 * v61 + 2;
                      if (v67 < v14 && sub_1CC417408(a3, (unsigned __int16)*v62, (unsigned __int16)v62[1]))
                      {
                        ++v62;
                        uint64_t v66 = v67;
                      }
                      double result = sub_1CC417408(a3, (unsigned __int16)*v62, v64);
                      int v63 = v65;
                      uint64_t v61 = v66;
                    }
                    while (!result);
                    *float v65 = v64;
                    a2 = v87;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              do
              {
                uint64_t v68 = a2;
                uint64_t v69 = 0;
                __int16 v92 = *v11;
                unsigned int v70 = v11;
                do
                {
                  uint64_t v71 = 2 * v69 + 2;
                  uint64_t v72 = (__int16 *)((char *)v70 + v71);
                  uint64_t v73 = (2 * v69) | 1;
                  if (v71 < v14)
                  {
                    double result = sub_1CC417408(a3, (unsigned __int16)*v72, (unsigned __int16)v72[1]);
                    if (result)
                    {
                      ++v72;
                      uint64_t v73 = v71;
                    }
                  }
                  *unsigned int v70 = *v72;
                  unsigned int v70 = v72;
                  uint64_t v69 = v73;
                }
                while (v73 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v68 - 1;
                if (v72 == v68 - 1)
                {
                  *uint64_t v72 = v92;
                }
                else
                {
                  *uint64_t v72 = *a2;
                  *a2 = v92;
                  uint64_t v74 = (char *)v72 - (char *)v11 + 2;
                  if (v74 >= 3)
                  {
                    unint64_t v75 = (((unint64_t)v74 >> 1) - 2) >> 1;
                    unint64_t v76 = &v11[v75];
                    double result = sub_1CC417408(a3, (unsigned __int16)*v76, (unsigned __int16)*v72);
                    if (result)
                    {
                      uint64_t v77 = v68 - 1;
                      unsigned int v78 = (unsigned __int16)*v72;
                      do
                      {
                        uint64_t v79 = v76;
                        *uint64_t v72 = *v76;
                        if (!v75) {
                          break;
                        }
                        unint64_t v75 = (v75 - 1) >> 1;
                        unint64_t v76 = &v11[v75];
                        double result = sub_1CC417408(a3, (unsigned __int16)*v76, v78);
                        uint64_t v72 = v79;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v79 = v78;
                      a2 = v77;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unsigned int v16 = &v11[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x101)
          {
            sub_1CC4175D0(v16, v11, v90, a3);
          }
          else
          {
            sub_1CC4175D0(v11, v16, v90, a3);
            sub_1CC4175D0(v11 + 1, v16 - 1, v89, a3);
            sub_1CC4175D0(v11 + 2, &v11[v15 + 1], v88, a3);
            sub_1CC4175D0(v16 - 1, v16, &v11[v15 + 1], a3);
            __int16 v17 = *v11;
            *unsigned __int16 v11 = *v16;
            *unsigned int v16 = v17;
          }
          --a4;
          if ((a5 & 1) != 0 || sub_1CC417408(a3, (unsigned __int16)*(v11 - 1), (unsigned __int16)*v11)) {
            break;
          }
          unsigned int v31 = (unsigned __int16)*v11;
          double result = sub_1CC417408(a3, v31, (unsigned __int16)*v90);
          if (result)
          {
            int v12 = v11;
            do
            {
              unsigned int v32 = (unsigned __int16)v12[1];
              ++v12;
              double result = sub_1CC417408(a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v33 = v11 + 1;
            do
            {
              int v12 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
              double result = sub_1CC417408(a3, v31, (unsigned __int16)*v12);
            }
            while (!result);
          }
          uint64_t v34 = a2;
          if (v12 < a2)
          {
            uint64_t v34 = a2;
            do
            {
              unsigned int v35 = (unsigned __int16)*--v34;
              double result = sub_1CC417408(a3, v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v34)
          {
            __int16 v36 = *v12;
            __int16 *v12 = *v34;
            *uint64_t v34 = v36;
            do
            {
              unsigned int v37 = (unsigned __int16)v12[1];
              ++v12;
            }
            while (!sub_1CC417408(a3, v31, v37));
            do
            {
              unsigned int v38 = (unsigned __int16)*--v34;
              double result = sub_1CC417408(a3, v31, v38);
            }
            while ((result & 1) != 0);
          }
          uint64_t v39 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *unsigned __int16 v11 = *v39;
          }
          a5 = 0;
          __int16 *v39 = v31;
        }
        uint64_t v18 = 0;
        unsigned int v19 = (unsigned __int16)*v11;
        while (sub_1CC417408(a3, (unsigned __int16)v11[++v18], v19))
          ;
        unint64_t v21 = &v11[v18];
        uint64_t v22 = a2;
        if (v18 == 1)
        {
          do
          {
            if (v21 >= a2) {
              break;
            }
            unsigned int v24 = (unsigned __int16)*--a2;
          }
          while (!sub_1CC417408(a3, v24, v19));
        }
        else
        {
          do
            unsigned int v23 = (unsigned __int16)*--a2;
          while (!sub_1CC417408(a3, v23, v19));
        }
        int v12 = &v11[v18];
        if (v21 < a2)
        {
          int v25 = a2;
          do
          {
            __int16 v26 = *v12;
            __int16 *v12 = *v25;
            *int v25 = v26;
            do
            {
              unsigned int v27 = (unsigned __int16)v12[1];
              ++v12;
            }
            while (sub_1CC417408(a3, v27, v19));
            do
              unsigned int v28 = (unsigned __int16)*--v25;
            while (!sub_1CC417408(a3, v28, v19));
          }
          while (v12 < v25);
        }
        uint64_t v29 = v12 - 1;
        if (v12 - 1 != v11) {
          *unsigned __int16 v11 = *v29;
        }
        *uint64_t v29 = v19;
        BOOL v5 = v21 >= a2;
        a2 = v22;
        if (v5) {
          break;
        }
LABEL_31:
        double result = sub_1CC416C08(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v30 = sub_1CC4176B4(v11, v12 - 1, a3);
      double result = sub_1CC4176B4(v12, v22, a3);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v12 - 1;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC417408(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  BOOL v6 = (_DWORD *)(v5 + 32 * a2);
  unint64_t v7 = (unsigned int *)(v5 + 32 * a3);
  uint64_t v8 = *(void *)(*(void *)(v4 + 256) + 24);
  unint64_t v9 = *(void *)(v8 + 16 * (v6[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (unsigned __int16 ***)(*(void *)(v8 + 16 * (v7[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int16 v11 = (uint64_t *)(v4 + 280);
  unsigned int v12 = *(unsigned __int16 *)(*(void *)v9 + 24);
  uint64_t v13 = *(void *)(v4 + 280);
  int v14 = *(_DWORD *)(v4 + 288);
  if (v14 == *(_DWORD *)(v13 + 24 * *(unsigned __int16 *)(*(void *)v9 + 24)))
  {
    uint64_t v15 = *(void *)(v4 + 280);
  }
  else
  {
    llvm::RegisterClassInfo::compute((uint64_t *)(v4 + 280), (unsigned __int16 ***)(*(void *)(v8 + 16 * (v6[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v15 = *(void *)(v4 + 280);
    int v14 = *(_DWORD *)(v4 + 288);
  }
  unsigned int v16 = *(_DWORD *)(v13 + 24 * v12 + 4);
  unsigned int v17 = *((unsigned __int16 *)*v10 + 12);
  uint64_t v18 = *((unsigned __int16 *)*v10 + 12);
  if (v14 != *(_DWORD *)(v15 + 24 * v18))
  {
    llvm::RegisterClassInfo::compute(v11, v10);
    uint64_t v18 = *((unsigned __int16 *)*v10 + 12);
  }
  unsigned int v19 = *(_DWORD *)(v15 + 24 * v17 + 4);
  uint64_t v20 = **(void **)(a1 + 16);
  unsigned int v21 = *(_DWORD *)(v20 + 4 * *(unsigned __int16 *)(*(void *)v9 + 24));
  unsigned int v22 = *(_DWORD *)(v20 + 4 * v18);
  if (v21 > v16 && v22 <= v19) {
    return 1;
  }
  if (v21 <= v16 && v22 > v19) {
    return 0;
  }
  BOOL v25 = ((*v6 >> 28) & 1) == 0;
  if ((*v6 & 0xFFF00) != 0) {
    BOOL v25 = 0;
  }
  unsigned int v26 = (*v6 & 0x40F00000) != 0 || v25;
  unsigned int v27 = *v7;
  unsigned int v28 = (*v7 & 0x40F00000) != 0 || (v27 & 0xFFF00) == 0 && ((v27 >> 28) & 1) == 0;
  if (v26 > v28) {
    return 1;
  }
  return a2 < a3 && v26 >= v28;
}

BOOL sub_1CC4175D0(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t a4)
{
  BOOL v8 = sub_1CC417408(a4, (unsigned __int16)*a2, (unsigned __int16)*a1);
  BOOL result = sub_1CC417408(a4, (unsigned __int16)*a3, (unsigned __int16)*a2);
  if (v8)
  {
    unsigned int v10 = (unsigned __int16)*a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      BOOL result = sub_1CC417408(a4, (unsigned __int16)*a3, v10);
      if (result)
      {
        __int16 v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    __int16 v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    BOOL result = sub_1CC417408(a4, (unsigned __int16)*a2, (unsigned __int16)*a1);
    if (result)
    {
      __int16 v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1CC4176B4(__int16 *a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1CC417408(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)*a1))
      {
        __int16 v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1CC4175D0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC417908(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      unsigned int v17 = (unsigned __int16 *)(a1 + 2);
      uint64_t v18 = (unsigned __int16 *)(a1 + 3);
      sub_1CC417908(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (sub_1CC417408(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)a1[3]))
      {
        __int16 v19 = *v18;
        unsigned __int16 *v18 = *(a2 - 1);
        *(a2 - 1) = v19;
        if (sub_1CC417408(a3, *v18, *v17))
        {
          unsigned __int16 v20 = *v17;
          unsigned int v21 = *v18;
          unsigned __int16 *v17 = v21;
          unsigned __int16 *v18 = v20;
          if (sub_1CC417408(a3, v21, (unsigned __int16)a1[1]))
          {
            __int16 v22 = a1[1];
            unsigned int v23 = (unsigned __int16)a1[2];
            a1[1] = v23;
            a1[2] = v22;
            if (sub_1CC417408(a3, v23, (unsigned __int16)*a1))
            {
              HIDWORD(v24) = *(_DWORD *)a1;
              LODWORD(v24) = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24 >> 16;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v9 = (unsigned __int16 *)(a1 + 2);
      sub_1CC4175D0(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned __int16 *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CC417408(a3, *v10, *v9))
    {
      unsigned int v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(__int16 *)((char *)a1 + v14 + 6) = *(__int16 *)((char *)a1 + v14 + 4);
        if (v14 == -4) {
          break;
        }
        v14 -= 2;
        if (!sub_1CC417408(a3, v13, *((unsigned __int16 *)v15 + 1)))
        {
          unsigned int v16 = (__int16 *)((char *)a1 + v14 + 6);
          goto LABEL_13;
        }
      }
      unsigned int v16 = a1;
LABEL_13:
      *unsigned int v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned __int16 *)a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 2;
    if (++v10 == (unsigned __int16 *)a2) {
      return 1;
    }
  }
}

BOOL sub_1CC417908(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, uint64_t a5)
{
  sub_1CC4175D0(a1, a2, a3, a5);
  BOOL result = sub_1CC417408(a5, (unsigned __int16)*a4, (unsigned __int16)*a3);
  if (result)
  {
    __int16 v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    BOOL result = sub_1CC417408(a5, (unsigned __int16)*a3, (unsigned __int16)*a2);
    if (result)
    {
      __int16 v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL result = sub_1CC417408(a5, (unsigned __int16)*a2, (unsigned __int16)*a1);
      if (result)
      {
        __int16 v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1CC4179BC(uint64_t a1, unsigned int a2, int a3)
{
  if (a3 && (uint64_t v3 = *(unsigned int *)(a1 + 1416), v3))
  {
    uint64_t v4 = *(void **)(a1 + 1408);
    uint64_t v5 = 8 * v3;
    while ((*(_DWORD *)(*v4 + 4 * (a2 >> 5)) & (1 << a2)) != 0)
    {
      ++v4;
      v5 -= 8;
      if (!v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = *(void *)(a1 + 264);
    if (v6) {
      unint64_t v7 = (void *)(v6 + 8);
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = *(unsigned int *)(*v7 + 24 * a2 + 16);
    unint64_t v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v10 = *v9 + (v8 & 0xF) * a2;
    uint64_t v11 = *(void *)(a1 + 1264);
    while (1)
    {
      for (unsigned int i = *(unsigned __int8 *)(*(void *)(a1 + 1296) + v10); i < v11; i += 256)
      {
        if (*(unsigned __int16 *)(*(void *)(a1 + 1256) + 2 * i) == v10)
        {
          if (v11 != i) {
            return 1;
          }
          break;
        }
      }
      if (a3)
      {
        unsigned int v13 = *(unsigned __int8 *)(*(void *)(a1 + 1352) + v10);
        uint64_t v14 = *(void *)(a1 + 1320);
        if (v13 < v14)
        {
          while (1)
          {
            unsigned int v15 = v13;
            if (*(unsigned __int16 *)(*(void *)(a1 + 1312) + 2 * v13) == v10) {
              break;
            }
            v13 += 256;
            if (v15 + 256 >= v14) {
              goto LABEL_21;
            }
          }
          if (v14 != v13) {
            break;
          }
        }
      }
LABEL_21:
      int v16 = (unsigned __int16)v9[1];
      ++v9;
      v10 += v16;
      if (!v16) {
        return 0;
      }
    }
  }
  return 1;
}

void *sub_1CC417AD0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  unsigned int v5 = a4;
  uint64_t v6 = a3;
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  unsigned __int16 v10 = *(void **)(a1 + 256);
  uint64_t v11 = (unsigned __int16 ***)(*(void *)(v10[3] + 16 * (v9 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (a4 - 1 <= 0x3FFFFFFE
    && sub_1CB946A80(v10, a4)
    && (unint64_t v12 = (unint64_t)v5 >> 3, v12 < *((unsigned __int16 *)*v11 + 11))
    && ((*((unsigned __int8 *)(*v11)[1] + v12) >> (v5 & 7)) & 1) != 0
    && (sub_1CC4179BC(a1, (unsigned __int16)v5, a5) & 1) == 0)
  {
    uint64_t v28 = *(void *)(a1 + 264);
    if (v28) {
      uint64_t v29 = (void *)(v28 + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    unint64_t v30 = *(unsigned int *)(*v29 + 24 * (unsigned __int16)v5 + 16);
    unsigned int v31 = (_WORD *)(v29[6] + ((v30 >> 3) & 0x1FFFFFFE));
    __int16 v33 = *v31;
    unsigned int v32 = v31 + 1;
    unsigned __int16 v34 = v33 + (v30 & 0xF) * v5;
    while (!*(_DWORD *)(*(void *)(a1 + 960) + 4 * v34))
    {
      int v35 = *v32++;
      v34 += v35;
      if (!v35)
      {
        unsigned int v36 = (unsigned __int16)v5;
LABEL_61:
        uint64_t v37 = a1;
        uint64_t v38 = a2;
        uint64_t v39 = v6;
        goto LABEL_102;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  unsigned int v13 = *(void **)(a1 + 256);
  if ((v9 & 0x80000000) != 0) {
    uint64_t v14 = (uint64_t *)(v13[3] + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v14 = (uint64_t *)(v13[34] + 8 * v9);
  }
  uint64_t v15 = *v14;
  if (!v15) {
    goto LABEL_69;
  }
  if ((*(unsigned char *)(v15 + 3) & 1) == 0)
  {
    uint64_t v15 = *(void *)(v15 + 24);
    if (!v15 || (*(unsigned char *)(v15 + 3) & 1) == 0) {
      goto LABEL_69;
    }
  }
  int v16 = 0;
  uint64_t v17 = *(void *)(v15 + 8);
LABEL_12:
  if (**(_WORD **)(v17 + 16) != 19 || (uint64_t v18 = *(_DWORD **)(v17 + 32), (*v18 & 0xFFF00) != 0) || (v18[8] & 0xFFF00) != 0)
  {
LABEL_15:
    if (v16 != 2)
    {
      ++v16;
      while (1)
      {
        uint64_t v15 = *(void *)(v15 + 24);
        if (!v15 || (*(unsigned char *)(v15 + 3) & 1) == 0) {
          break;
        }
        if (*(void *)(v15 + 8) != v17)
        {
          uint64_t v17 = *(void *)(v15 + 8);
          goto LABEL_12;
        }
      }
    }
LABEL_69:
    LODWORD(v20) = 0;
    goto LABEL_70;
  }
  unsigned int v19 = 0;
  while (1)
  {
    unint64_t v20 = v18[9];
    if ((v20 - 1) < 0x3FFFFFFF) {
      break;
    }
    if ((v20 & 0x80000000) != 0) {
      unsigned int v21 = (uint64_t *)(v13[3] + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v21 = (uint64_t *)(v13[34] + 8 * v20);
    }
    uint64_t v22 = *v21;
    if (v22)
    {
      if (*(unsigned char *)(v22 + 3) & 1) != 0 || (uint64_t v27 = *(void *)(v22 + 24)) != 0 && (*(unsigned char *)(v27 + 3))
      {
        if ((v20 & 0x80000000) != 0) {
          unsigned int v23 = (uint64_t *)(v13[3] + 16 * (v20 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v23 = (uint64_t *)(v13[34] + 8 * v20);
        }
        uint64_t v24 = *v23;
        if (v24)
        {
          if ((*(unsigned char *)(v24 + 3) & 1) == 0)
          {
            uint64_t v24 = *(void *)(v24 + 24);
            if (v24)
            {
              if ((*(unsigned char *)(v24 + 3) & 1) == 0) {
                uint64_t v24 = 0;
              }
            }
          }
        }
        uint64_t v25 = *(void *)(v24 + 8);
        while (1)
        {
          uint64_t v24 = *(void *)(v24 + 24);
          if (!v24 || (*(unsigned char *)(v24 + 3) & 1) == 0) {
            break;
          }
          if (*(void *)(v24 + 8) != v25) {
            goto LABEL_15;
          }
        }
        if (v25)
        {
          if (**(_WORD **)(v25 + 16) == 19)
          {
            uint64_t v18 = *(_DWORD **)(v25 + 32);
            if ((*v18 & 0xFFF00) == 0 && (v18[8] & 0xFFF00) == 0 && v19++ < 3) {
              continue;
            }
          }
        }
      }
    }
    goto LABEL_15;
  }
  if (!sub_1CB946A80(v13, v20)
    || (v20 >> 3) >= *((unsigned __int16 *)*v11 + 11)
    || ((*((unsigned __int8 *)(*v11)[1] + (v20 >> 3)) >> (v20 & 7)) & 1) == 0
    || (sub_1CC4179BC(a1, (unsigned __int16)v20, a5) & 1) != 0)
  {
    goto LABEL_69;
  }
  uint64_t v69 = *(void *)(a1 + 264);
  if (v69) {
    unsigned int v70 = (void *)(v69 + 8);
  }
  else {
    unsigned int v70 = 0;
  }
  unint64_t v71 = *(unsigned int *)(*v70 + 24 * (unsigned __int16)v20 + 16);
  uint64_t v72 = (_WORD *)(v70[6] + ((v71 >> 3) & 0x1FFFFFFE));
  __int16 v74 = *v72;
  uint64_t v73 = v72 + 1;
  unsigned __int16 v75 = v74 + (v71 & 0xF) * v20;
  while (!*(_DWORD *)(*(void *)(a1 + 960) + 4 * v75))
  {
    int v76 = *v73++;
    v75 += v76;
    if (!v76)
    {
      unsigned int v36 = (unsigned __int16)v20;
      goto LABEL_61;
    }
  }
LABEL_70:
  unsigned int v40 = *((unsigned __int16 *)*v11 + 12);
  uint64_t v41 = *(void *)(a1 + 280);
  if (*(_DWORD *)(a1 + 288) != *(_DWORD *)(v41 + 24 * *((unsigned __int16 *)*v11 + 12))) {
    llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 280), v11);
  }
  uint64_t v42 = v41 + 24 * v40;
  uint64_t v43 = *(unsigned int *)(v42 + 4);
  if (!v43) {
    goto LABEL_107;
  }
  uint64_t v77 = v6;
  unsigned __int16 v44 = 0;
  unsigned int v45 = *(unsigned __int16 **)(v42 + 16);
  __int16 v46 = &v45[v43];
  unsigned int v47 = -1;
  do
  {
    unsigned int v48 = *v45;
    if ((sub_1CC4179BC(a1, v48, a5) & 1) == 0)
    {
      uint64_t v49 = *(void *)(a1 + 264);
      if (v49) {
        int v50 = (void *)(v49 + 8);
      }
      else {
        int v50 = 0;
      }
      unint64_t v51 = *(unsigned int *)(*v50 + 24 * v48 + 16);
      __int16 v52 = v51 & 0xF;
      uint64_t v53 = (_WORD *)(v50[6] + ((v51 >> 3) & 0x1FFFFFFE));
      __int16 v55 = *v53;
      unsigned int v54 = v53 + 1;
      unsigned __int16 v56 = v55 + v52 * v48;
      while (1)
      {
        int v57 = *(_DWORD *)(*(void *)(a1 + 960) + 4 * v56);
        if (v57) {
          break;
        }
        int v58 = *v54++;
        v56 += v58;
        if (!v58)
        {
          uint64_t v37 = a1;
          uint64_t v38 = a2;
          uint64_t v39 = v77;
          unsigned int v36 = v48;
          goto LABEL_102;
        }
      }
      if (v57 == 1)
      {
        unsigned int v59 = -1;
      }
      else
      {
        if (*(_DWORD *)(*(void *)(a1 + 560) + 4 * (v57 & 0x7FFFFFFF)) != -1) {
          goto LABEL_91;
        }
        unsigned int v60 = *(unsigned __int8 *)(*(void *)(a1 + 800) + (v57 & 0x7FFFFFFF));
        unsigned int v61 = *(_DWORD *)(a1 + 600);
        uint64_t v62 = *(void *)(a1 + 592);
        if (v61 > v60)
        {
          while (1)
          {
            unsigned int v63 = v60;
            if (((*(_DWORD *)(v62 + 24 * v60 + 8) ^ v57) & 0x7FFFFFFF) == 0) {
              break;
            }
            v60 += 256;
            if (v63 + 256 >= v61) {
              goto LABEL_90;
            }
          }
          unsigned int v61 = v60;
        }
LABEL_90:
        if (!*(unsigned char *)(v62 + 24 * v61 + 14)) {
          unsigned int v59 = 100;
        }
        else {
LABEL_91:
        }
          unsigned int v59 = 50;
      }
      if (v20 == v48 || v5 == v48) {
        v59 -= 20;
      }
      if (v59 < v47)
      {
        unsigned int v47 = v59;
        unsigned __int16 v44 = v48;
      }
    }
    ++v45;
  }
  while (v45 != v46);
  uint64_t v6 = v77;
  if (v44)
  {
    sub_1CC416A00(a1, a2, v44);
    uint64_t v37 = a1;
    uint64_t v38 = a2;
    uint64_t v39 = v77;
    unsigned int v36 = v44;
LABEL_102:
    return sub_1CC41809C(v37, v38, v39, v36);
  }
  else
  {
LABEL_107:
    unsigned int v66 = **(unsigned __int16 **)(a2 + 16) - 1;
    if (v66 >= 2) {
      uint64_t v67 = "ran out of registers during register allocation";
    }
    else {
      uint64_t v67 = "inline assembly requires more registers than available";
    }
    if (v66 >= 2) {
      uint64_t v68 = 47;
    }
    else {
      uint64_t v68 = 54;
    }
    BOOL result = (void *)llvm::MachineInstr::emitError(a2, (uint64_t)v67, v68);
    *(unsigned char *)(v6 + 16) = 1;
    *(_WORD *)(v6 + 12) = 0;
  }
  return result;
}

void *sub_1CC41809C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(a3 + 12) = a4;
  uint64_t v8 = *(void *)(a1 + 264);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v11 = *(unsigned int *)(*v9 + 24 * a4 + 16);
  unint64_t v12 = (unsigned __int16 *)(v9[6] + ((v11 >> 3) & 0x1FFFFFFE));
  int v14 = *v12;
  unsigned int v13 = v12 + 1;
  int v15 = v14 + (v11 & 0xF) * a4;
  uint64_t v16 = *(void *)(a1 + 960);
  do
  {
    *(_DWORD *)(v16 + 4 * (unsigned __int16)v15) = v7;
    int v17 = *v13++;
    v15 += v17;
  }
  while (v17);
  uint64_t v18 = *(void *)(a1 + 864);
  uint64_t v19 = *(unsigned int *)(a1 + 880);
  BOOL result = sub_1CD489BC0(v18, *(_DWORD *)(a1 + 880), v7);
  if ((void *)(v18 + 32 * v19) != result)
  {
    unsigned int v21 = result;
    uint64_t v22 = *((unsigned int *)result + 4);
    if (v22)
    {
      unsigned int v23 = (uint64_t *)result[1];
      uint64_t v24 = &v23[v22];
      uint64_t v25 = &v40;
      do
      {
        uint64_t v26 = *v23;
        uint64_t v27 = *(void *)(*v23 + 32);
        if (**(_WORD **)(*v23 + 16) != 14)
        {
          uint64_t v29 = v27 + 32;
          goto LABEL_13;
        }
        uint64_t v28 = *(unsigned int *)(v26 + 40);
        if (v28 != 2)
        {
          uint64_t v29 = v27 + 32 * v28;
          v27 += 64;
LABEL_13:
          while (*(unsigned char *)v27 || *(_DWORD *)(v27 + 4) != v7)
          {
            v27 += 32;
            if (v27 == v29) {
              goto LABEL_16;
            }
          }
          unsigned __int16 v34 = v25;
          uint64_t v33 = a2;
          uint64_t v30 = *(void *)(a2 + 8);
          unsigned int v31 = a4;
          if (v30 != v26)
          {
            unsigned int v31 = 20;
            while (llvm::MachineInstr::findRegisterDefOperandIdx(v30, a4, 0, 1, *(void *)(a1 + 264)) == -1)
            {
              if (!--v31) {
                goto LABEL_30;
              }
              if (!v30 || (*(unsigned char *)v30 & 4) == 0)
              {
                while ((*(_WORD *)(v30 + 44) & 8) != 0)
                  uint64_t v30 = *(void *)(v30 + 8);
              }
              uint64_t v30 = *(void *)(v30 + 8);
              if (v30 == v26)
              {
                unsigned int v31 = a4;
                goto LABEL_30;
              }
            }
            unsigned int v31 = 0;
          }
LABEL_30:
          sub_1CD5364DC(v26, v7, v42);
          uint64_t v38 = (_DWORD *)v42[0];
          uint64_t v39 = (_DWORD *)v42[1];
          if (v44)
          {
            if (v44 == v43)
            {
              uint64_t v41 = (uint64_t)v34;
              (*(void (**)(void *))(v43[0] + 24))(v43);
            }
            else
            {
              uint64_t v41 = (*(uint64_t (**)(void))(*v44 + 16))();
            }
          }
          else
          {
            uint64_t v41 = 0;
          }
          int v35 = v45;
          if (v47)
          {
            if (v47 == v46)
            {
              uint64_t v37 = v36;
              (*(void (**)(void *))(v46[0] + 24))(v46);
            }
            else
            {
              uint64_t v37 = (void *)(*(uint64_t (**)(void))(*v47 + 16))();
            }
          }
          else
          {
            uint64_t v37 = 0;
          }
          unsigned int v32 = v38;
          while (v32 != v35)
          {
            llvm::MachineOperand::setReg((uint64_t)v32, v31);
            if (v31) {
              *v32 |= 0x8000000u;
            }
            while (1)
            {
              unsigned int v32 = v38 + 8;
              uint64_t v38 = v32;
              if (v32 == v39) {
                break;
              }
              if (!v41) {
                sub_1CB920400();
              }
              if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)v41 + 48))(v41, v32))
              {
                unsigned int v32 = v38;
                break;
              }
            }
          }
          if (v37 == v36)
          {
            (*(void (**)(void *))(v36[0] + 32))(v36);
            a2 = v33;
            uint64_t v25 = v34;
          }
          else
          {
            a2 = v33;
            uint64_t v25 = v34;
            if (v37) {
              (*(void (**)(void))(*v37 + 40))();
            }
          }
          if ((uint64_t *)v41 == v25)
          {
            (*(void (**)(uint64_t *))(v40 + 32))(v25);
          }
          else if (v41)
          {
            (*(void (**)(void))(*(void *)v41 + 40))();
          }
          BOOL result = sub_1CD536B84(v42);
        }
LABEL_16:
        ++v23;
      }
      while (v23 != v24);
    }
    *((_DWORD *)v21 + 4) = 0;
  }
  return result;
}

uint64_t sub_1CC41852C(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
  uint64_t v3 = a1[26];
  unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (v5 > v4)
  {
    uint64_t v6 = *a1;
    while (1)
    {
      unsigned int v7 = v4;
      if ((*(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF) == v2) {
        break;
      }
      v4 += 256;
      if (v7 + 256 >= v5) {
        goto LABEL_7;
      }
    }
    if (v5 != v4) {
      return v6 + 24 * v4;
    }
  }
LABEL_7:
  *(unsigned char *)(v3 + v2) = v5;
  unsigned int v8 = *((_DWORD *)a1 + 2);
  unint64_t v9 = *a1;
  if (v8 >= *((_DWORD *)a1 + 3))
  {
    unint64_t v13 = v9 + 24 * v8;
    if (v9 > (unint64_t)a2 || v13 <= (unint64_t)a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v10 = v9 + 24 * *((unsigned int *)a1 + 2);
  long long v11 = *a2;
  *(void *)(v10 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v10 = v11;
  LODWORD(v10) = *((_DWORD *)a1 + 2) + 1;
  *((_DWORD *)a1 + 2) = v10;
  return *a1 + 24 * v10 - 24;
}

uint64_t sub_1CC418650(void *a1, unint64_t a2)
{
  uint64_t v2 = 1 << a2;
  uint64_t v3 = (a2 >> 6) & 0x1FFFFFF;
  uint64_t v4 = a1[111];
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  uint64_t v6 = (void *)a1[69];
  unsigned int v7 = (void *)v6[11];
  unsigned int v8 = (void *)v6[12];
  if ((v5 & (1 << a2)) != 0) {
    return v7 != v8;
  }
  unint64_t v10 = (void *)v6[11];
  if (v7 != v8)
  {
    while ((void *)*v10 != v6)
    {
      if (++v10 == v8)
      {
        unint64_t v10 = (void *)v6[12];
        break;
      }
    }
  }
  uint64_t v11 = a1[32];
  if (v10 == v8)
  {
    uint64_t v13 = 0;
  }
  else
  {
    if ((a2 & 0x80000000) != 0) {
      unint64_t v12 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v12 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a2);
    }
    uint64_t v17 = *v12;
    if (!v17) {
      goto LABEL_21;
    }
    if ((*(unsigned char *)(v17 + 3) & 1) == 0)
    {
      uint64_t v24 = *(void *)(v17 + 24);
      if (!v24 || (*(unsigned char *)(v24 + 3) & 1) == 0) {
        goto LABEL_21;
      }
    }
    if ((a2 & 0x80000000) != 0) {
      uint64_t v22 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v22 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a2);
    }
    uint64_t v23 = *v22;
    if (*v22 && (*(unsigned char *)(v23 + 3) & 1) == 0)
    {
      uint64_t v25 = *(void *)(v23 + 24);
      if (v25)
      {
        if (*(unsigned char *)(v25 + 3)) {
          uint64_t v23 = *(void *)(v23 + 24);
        }
        else {
          uint64_t v23 = 0;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
    }
    uint64_t v13 = *(void *)(v23 + 8);
    while (1)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23 || (*(unsigned char *)(v23 + 3) & 1) == 0) {
        break;
      }
      if (*(void *)(v23 + 8) != v13) {
        goto LABEL_21;
      }
    }
    if (!v13)
    {
LABEL_21:
      *(void *)(v4 + 8 * v3) = v5 | v2;
      return 1;
    }
  }
  if ((a2 & 0x80000000) != 0) {
    int v14 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v14 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a2);
  }
  uint64_t v15 = *v14;
  if (v15)
  {
    if ((*(unsigned char *)(v15 + 3) & 0x81) != 0)
    {
      while (1)
      {
        uint64_t v15 = *(void *)(v15 + 24);
        if (!v15) {
          break;
        }
        if ((*(_DWORD *)v15 & 0x81000000) == 0) {
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_17:
      uint64_t v16 = *(void *)(v15 + 8);
      if (*(void **)(v16 + 24) != v6) {
        goto LABEL_18;
      }
      int v18 = 0;
LABEL_23:
      if (v18 == 7)
      {
LABEL_18:
        *(void *)(v4 + 8 * v3) = v5 | v2;
        return v7 != v8;
      }
      ++v18;
      if (v13)
      {
        if (v13 == v16) {
          goto LABEL_21;
        }
        if (v6 + 6 != (void *)v16)
        {
          for (uint64_t i = v6[7]; i != v13 && i != v16; uint64_t i = *(void *)(i + 8))
          {
            if (!i || (*(unsigned char *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                uint64_t i = *(void *)(i + 8);
            }
          }
          if (i != v13) {
            goto LABEL_21;
          }
        }
      }
      while (1)
      {
        uint64_t v15 = *(void *)(v15 + 24);
        if (!v15) {
          break;
        }
        if ((*(_DWORD *)v15 & 0x81000000) == 0)
        {
          uint64_t v21 = *(void *)(v15 + 8);
          if (v21 != v16)
          {
            uint64_t v16 = *(void *)(v15 + 8);
            if (*(void **)(v21 + 24) == v6) {
              goto LABEL_23;
            }
            goto LABEL_18;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC418894(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2) {
    uint64_t v3 = (void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (unsigned __int16 *)(v3[6] + (((unint64_t)*(unsigned int *)(*v3 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
  int v6 = *v4;
  uint64_t v5 = v4 + 1;
  int v7 = v6 + (*(_DWORD *)(*v3 + 24 * a2 + 16) & 0xF) * a2;
  unsigned int v8 = (uint64_t *)(a1 + 1256);
  do
  {
    __int16 v11 = v7;
    uint64_t result = sub_1CD515E0C(v8, &v11);
    int v10 = *v5++;
    v7 += v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1CC41891C(uint64_t a1, int a2)
{
  uint64_t v3 = a2 & 0x7FFFFFFF;
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 560) + 4 * v3);
  if (result == -1)
  {
    uint64_t v5 = *(void *)(a1 + 264);
    uint64_t v6 = *(void *)(v5 + 264)
       + 24
       * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 256) + 24) + 16 * v3) & 0xFFFFFFFFFFFFFFF8)
                              + 24)
        + *(_DWORD *)(v5 + 272) * ((*(void *)(v5 + 248) - *(void *)(v5 + 240)) >> 3));
    uint64_t result = llvm::MachineFrameInfo::CreateSpillStackObject(*(unsigned __int8 **)(a1 + 248), (unint64_t)*(unsigned int *)(v6 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v6 + 8) >> 3));
    *(_DWORD *)(*(void *)(a1 + 560) + 4 * v3) = result;
  }
  return result;
}

uint64_t sub_1CC4189B8()
{
  int v1 = 1;
  sub_1CD56C008(&v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD2440, &dword_1CB82C000);
  qword_1EBCD2410 = 0;
  *(void *)algn_1EBCD2418 = "fast";
  qword_1EBCD2420 = 4;
  unk_1EBCD2428 = "fast register allocator";
  qword_1EBCD2430 = 23;
  unk_1EBCD2438 = llvm::createFastRegisterAllocator;
  sub_1CC410D90(&llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry, &qword_1EBCD2410);

  return __cxa_atexit((void (*)(void *))sub_1CC4108A4, &qword_1EBCD2410, &dword_1CB82C000);
}

void *sub_1CC418A80(void *a1)
{
  *a1 = &unk_1F2611CE8;
  uint64_t v2 = a1 + 21;
  uint64_t v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

void sub_1CC418B34(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeLiveDebugVariablesPass(a1, a2);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeRegisterCoalescerPass(a1, v3);
  llvm::initializeMachineSchedulerPass(a1, v4);
  llvm::initializeLiveStacksPass(a1, v5);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeVirtRegMapPass(a1, v6);
  llvm::initializeLiveRegMatrixPass(a1, v7);
  llvm::initializeEdgeBundlesPass(a1, v8);
  llvm::initializeSpillPlacementPass(a1, v9);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v10);
  llvm::initializeRegAllocEvictionAdvisorAnalysisPass(a1, v11);
  operator new();
}

uint64_t sub_1CC418C3C()
{
  return 1;
}

void llvm::createGreedyRegisterAllocator()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC418D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA61BEB0);
  sub_1CC4124A8((uint64_t)v9, a2);
  *(void *)(a1 + 248) = &unk_1F2611480;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  double v4 = llvm::RegisterClassInfo::RegisterClassInfo((llvm::RegisterClassInfo *)(a1 + 296));
  if (v10)
  {
    if (v10 == v9)
    {
      *(void *)(a1 + 560) = a1 + 536;
      (*(void (**)(void *, double))(v9[0] + 24))(v9, v4);
    }
    else
    {
      *(void *)(a1 + 560) = (*(uint64_t (**)(double))(*v10 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 560) = 0;
  }
  *(void *)(a1 + 568) = a1 + 600;
  *(void *)(a1 + 576) = a1 + 600;
  *(void *)(a1 + 584) = 32;
  *(_DWORD *)(a1 + 592) = 0;
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  *(void *)a1 = &unk_1F2611A50;
  *(void *)(a1 + 248) = &unk_1F2611B50;
  *(void *)(a1 + 856) = &unk_1F2611BA8;
  llvm::RegisterClassInfo::RegisterClassInfo((llvm::RegisterClassInfo *)(a1 + 888));
  *(void *)(a1 + 1240) = 0;
  *(unsigned char *)(a1 + 1248) = 0;
  *(unsigned char *)(a1 + 1288) = 0;
  *(void *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_DWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1380) = 0u;
  uint64_t v5 = 1400;
  do
  {
    uint64_t v6 = a1 + v5;
    *(void *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 48) = a1 + v5 + 64;
    *(void *)(v6 + 56) = 0x400000000;
    *(void *)(v6 + 512) = a1 + v5 + 528;
    v5 += 720;
    *(void *)(v6 + 520) = 0x800000000;
  }
  while (v6 + 720 != a1 + 24440);
  *(void *)(a1 + 24440) = a1 + 24456;
  *(void *)(a1 + 24448) = 0x800000000;
  *(void *)(a1 + 24520) = a1 + 24536;
  *(void *)(a1 + 24528) = 0x2000000000;
  *(void *)(a1 + 29144) = a1 + 29160;
  *(void *)(a1 + 29152) = 0x2000000000;
  *(void *)(a1 + 29288) = 0;
  *(void *)(a1 + 29296) = 1;
  int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 29304) = v7;
  *(int64x2_t *)(a1 + 29sub_1CC3F44F0((uint64_t)this + 320) = v7;
  *(int64x2_t *)(a1 + 29336) = v7;
  *(int64x2_t *)(a1 + 29352) = v7;
  *(void *)(a1 + 29368) = a1 + 29384;
  *(void *)(a1 + 29376) = 0x800000000;
  *(_OWORD *)(a1 + 29448) = 0u;
  return a1;
}

BOOL sub_1CC419054(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 280);
  unint64_t v4 = a2 & 0x7FFFFFFF;
  uint64_t v5 = (void *)(v3 + 408);
  unint64_t v6 = *(unsigned int *)(v3 + 416);
  BOOL v7 = v4 >= v6;
  unint64_t v8 = v4 - v6;
  if (v7)
  {
    sub_1CB9153B8((uint64_t)v5, v8 + 1, *(void *)(v3 + 424));
LABEL_8:
    llvm::LiveIntervals::createInterval();
  }
  unint64_t v9 = *(const llvm::LiveInterval **)(*v5 + 8 * v4);
  if (!v9) {
    goto LABEL_8;
  }
  int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 272) + 280) + 4 * v4);
  if (v10)
  {
    llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v9);
    (*(void (**)(uint64_t, const llvm::LiveInterval *))(*(void *)a1 + 208))(a1, v9);
  }
  else
  {
    *((_DWORD *)v9 + 18) = 0;
    *((_DWORD *)v9 + 2) = 0;
  }
  return v10 != 0;
}

BOOL sub_1CC41913C(uint64_t a1, int a2)
{
  return sub_1CC419054(a1 - 856, a2);
}

uint64_t sub_1CC419148(uint64_t result, int a2)
{
  unint64_t v2 = a2 & 0x7FFFFFFF;
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 272) + 280) + 4 * v2)) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 280);
  uint64_t v5 = (void *)(v4 + 408);
  unint64_t v6 = *(unsigned int *)(v4 + 416);
  BOOL v7 = v2 >= v6;
  unint64_t v8 = v2 - v6;
  if (v7)
  {
    sub_1CB9153B8((uint64_t)v5, v8 + 1, *(void *)(v4 + 424));
LABEL_12:
    llvm::LiveIntervals::createInterval();
  }
  unint64_t v9 = *(const llvm::LiveInterval **)(*v5 + 8 * v2);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t result = llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v3 + 288), v9);
  uint64_t v10 = *((_DWORD *)v9 + 28) & 0x7FFFFFFF;
  if (!*(_DWORD *)(*(void *)(*(void *)(v3 + 272) + 280) + 4 * v10))
  {
    uint64_t v11 = *(void *)(v3 + 560);
    if (v11)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)v11 + 48))(v11, *(void *)(v3 + 256), *(void *)(*(void *)(*(void *)(v3 + 264) + 24) + 16 * v10) & 0xFFFFFFFFFFFFFFF8);
      if (result)
      {
        unint64_t v12 = *(uint64_t (**)(void))(*(void *)(v3 + 248) + 40);
        return v12();
      }
    }
    else
    {
      sub_1CB920400();
      return sub_1CC4192B4();
    }
  }
  return result;
}

uint64_t sub_1CC4192B4(uint64_t a1, int a2)
{
  return sub_1CC419148(a1 - 856, a2);
}

void sub_1CC4192C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v4 = (_DWORD *)(a1 + 24528);
  uint64_t v3 = *(unsigned int *)(a1 + 24528);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 24520);
    uint64_t v6 = 144 * v3;
    do
    {
      uint64_t v7 = v5 + v6;
      unint64_t v8 = *(void **)(v5 + v6 - 48);
      if ((void *)(v5 + v6 - 32) != v8) {
        free(v8);
      }
      unint64_t v9 = *(void **)(v7 - 120);
      if ((void *)(v7 - 104) != v9) {
        free(v9);
      }
      *(void *)(v5 + v6 - 128) = 0;
      uint64_t v10 = *(void *)(v5 + v6 - 136);
      if (v10) {
        --*(_DWORD *)(v10 + 8);
      }
      *(void *)(v5 + v6 - 136) = 0;
      v6 -= 144;
    }
    while (v6);
  }
  *uint64_t v4 = 0;
}

uint64_t sub_1CC419398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 8);
  if (v6)
  {
    unsigned int v7 = 0;
    uint64_t v8 = 24 * v6;
    unint64_t v9 = (void *)(*(void *)a3 + 8);
    do
    {
      unsigned int v7 = ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24))
         + v7
         - ((*(v9 - 1) >> 1) & 3 | *(_DWORD *)((*(v9 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
      v9 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  int v10 = *(_DWORD *)(a3 + 112);
  uint64_t v11 = (uint64_t *)(a1 + 1248);
  uint64_t v12 = v10 & 0x7FFFFFFF;
  uint64_t v13 = *(unsigned int *)(a1 + 1256);
  if ((v10 & 0x7FFFFFFFu) >= v13)
  {
    uint64_t v14 = *(void *)(a1 + 1264);
    uint64_t v15 = v12 + 1 - v13;
    int v16 = *(_DWORD *)(a1 + 1256);
    if (v12 >= *(_DWORD *)(a1 + 1260)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v15)
    {
      uint64_t v17 = (void *)(*v11 + 8 * *(unsigned int *)(a1 + 1256));
      uint64_t v18 = ~v12 + v13;
      do
        *v17++ = v14;
      while (!__CFADD__(v18++, 1));
      int v16 = *(_DWORD *)(a1 + 1256);
    }
    LODWORD(v13) = v16 + v15;
    *(_DWORD *)(a1 + 1256) = v16 + v15;
  }
  uint64_t v20 = *v11;
  int v21 = *(_DWORD *)(*v11 + 8 * v12);
  if (v21)
  {
    if (v21 == 2) {
      goto LABEL_30;
    }
    if (v21 == 5)
    {
      unsigned int v7 = dword_1EA61EF40++;
      goto LABEL_30;
    }
  }
  else
  {
    if (v12 >= v13)
    {
      sub_1CC38F7B8(a1 + 1248, v12 - v13 + 1, *(void *)(a1 + 1264));
      uint64_t v20 = *(void *)(a1 + 1248);
    }
    int v21 = 1;
    *(_DWORD *)(v20 + 8 * v12) = 1;
  }
  char v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 880) + 360))(*(void *)(a1 + 880));
  unint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * v12) & 0xFFFFFFFFFFFFFFF8;
  if (v22)
  {
    BOOL v24 = 0;
  }
  else
  {
    uint64_t v37 = *(void *)(a1 + 888);
    unsigned int v38 = *(unsigned __int16 *)(*(void *)v23 + 24);
    if (*(_DWORD *)(a1 + 896) != *(_DWORD *)(v37 + 24 * *(unsigned __int16 *)(*(void *)v23 + 24))) {
      llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 888), (unsigned __int16 ***)v23);
    }
    BOOL v24 = v7 >> 4 > 2 * *(_DWORD *)(v37 + 24 * v38 + 4);
  }
  if (v21 == 1
    && !v24
    && (unsigned int v25 = *(_DWORD *)(a3 + 8)) != 0
    && llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(a1 + 280), a3))
  {
    if (v22)
    {
      uint64_t v26 = *(void *)(*(void *)(a1 + 1128) + 352);
      uint64_t v27 = *(void *)(*(void *)a3 + 24 * v25 - 16);
    }
    else
    {
      uint64_t v26 = **(void **)a3;
      uint64_t v27 = *(void *)(*(void *)(a1 + 1128) + 344);
    }
    unsigned int v28 = (*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) - *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24)) >> 2;
  }
  else
  {
    unsigned int v28 = v7 + 0x20000000;
  }
  int v29 = v28 | (*(unsigned __int8 *)(v23 + 32) << 24);
  uint64_t v30 = *(void *)(a1 + 272);
  uint64_t v31 = *(void *)(*(void *)(v30 + 248) + 208) + 40 * v12;
  if (*(_DWORD *)(v31 + 16)
    && ((int v36 = **(_DWORD **)(v31 + 8), (v36 - 1) < 0x3FFFFFFF)
     || v36 < 0 && *(_DWORD *)(*(void *)(v30 + 280) + 4 * (v36 & 0x7FFFFFFF))))
  {
    unsigned int v32 = -1073741824;
  }
  else
  {
    unsigned int v32 = 0x80000000;
  }
  unsigned int v7 = v29 | v32;
LABEL_30:
  unint64_t v39 = v7 | ((unint64_t)~v10 << 32);
  uint64_t v33 = *(unint64_t **)(a2 + 8);
  if ((unint64_t)v33 >= *(void *)(a2 + 16))
  {
    unsigned __int16 v34 = sub_1CBC13470((void **)a2, &v39);
  }
  else
  {
    *uint64_t v33 = v7 | ((unint64_t)~v10 << 32);
    unsigned __int16 v34 = v33 + 1;
  }
  *(void *)(a2 + 8) = v34;
  return sub_1CC422244(*(void *)a2, (uint64_t)v34, (uint64_t)&v40, ((uint64_t)v34 - *(void *)a2) >> 3);
}

uint64_t sub_1CC4196FC(uint64_t a1, uint64_t a2)
{
  return sub_1CC419398(a1 - 248, a1 + 960, a2);
}

uint64_t sub_1CC419710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)a2 == v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 280);
  uint64_t v6 = ~v2[1] & 0x7FFFFFFF;
  unsigned int v7 = (void *)(v5 + 408);
  uint64_t v8 = *(unsigned int *)(v5 + 416);
  if (v6 >= v8)
  {
    sub_1CB9153B8((uint64_t)v7, v6 - v8 + 1, *(void *)(v5 + 424));
LABEL_12:
    operator new();
  }
  uint64_t v9 = *(void *)(*v7 + 8 * v6);
  if (!v9) {
    goto LABEL_12;
  }
  if (v3 - (uint64_t)v2 >= 9)
  {
    unsigned int v11 = *v2;
    unsigned int v10 = v2[1];
    uint64_t v12 = sub_1CC4222EC(v2, (uint64_t)&v14, (unint64_t)(v3 - (void)v2) >> 3);
    if ((unsigned int *)(v3 - 8) == v12)
    {
      unsigned int *v12 = v11;
      v12[1] = v10;
    }
    else
    {
      unsigned int *v12 = *(_DWORD *)(v3 - 8);
      v12[1] = *(_DWORD *)(v3 - 4);
      *(_DWORD *)(v3 - 8) = v11;
      *(_DWORD *)(v3 - 4) = v10;
      sub_1CC422244((uint64_t)v2, (uint64_t)(v12 + 2), (uint64_t)&v14, ((char *)(v12 + 2) - (char *)v2) >> 3);
    }
  }
  *(void *)(a2 + 8) -= 8;
  return v9;
}

uint64_t sub_1CC419910(uint64_t a1)
{
  return sub_1CC419710(a1 - 248, a1 + 960);
}

uint64_t sub_1CC419920(uint64_t a1, llvm::LiveRange *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = -v5;
  int v7 = *(_DWORD *)(a3 + 72);
  if (v7 == -(int)v5) {
    return 0;
  }
  uint64_t v14 = -*(_DWORD *)(a3 + 8);
  do
  {
    uint64_t v15 = *(void *)(a1 + 288);
    if ((v6 & 0x80000000) != 0)
    {
      if (!llvm::LiveRegMatrix::checkInterference(v15, this, *(unsigned __int16 *)(*(void *)a3 + 2 * *(void *)(a3 + 8) + 2 * (int)v14)))return *(unsigned __int16 *)(*(void *)a3 + 2 * *(void *)(a3 + 8) + 2 * (int)v14); {
    }
      }
    else if (!llvm::LiveRegMatrix::checkInterference(v15, this, *(unsigned __int16 *)(*(void *)(a3 + 56) + 2 * v14)))
    {
      uint64_t v8 = *(unsigned __int16 *)(*(void *)(a3 + 56) + 2 * v14);
      goto LABEL_9;
    }
    uint64_t v8 = 0;
LABEL_9:
    int v18 = *(_DWORD *)(a3 + 72);
    if (v18 <= (int)v6) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = (v6 + 1);
    }
    if (v18 <= (int)v6) {
      int v20 = v6;
    }
    else {
      int v20 = v6 + 1;
    }
    if (v20 < 0
      || v20 >= v18
      || (uint64_t v21 = *(void *)(a3 + 56),
          int v22 = *(unsigned __int16 *)(v21 + 2 * v20),
          (v22 - 1) > 0x3FFFFFFE))
    {
      uint64_t v6 = v19;
    }
    else
    {
      uint64_t v23 = *(void *)(a3 + 8);
      uint64_t v6 = v19;
      do
      {
        if (v23)
        {
          uint64_t v24 = 2 * v23;
          unsigned int v25 = *(unsigned __int16 **)a3;
          while (*v25 != (unsigned __int16)v22)
          {
            ++v25;
            v24 -= 2;
            if (!v24)
            {
              unsigned int v25 = (unsigned __int16 *)(*(void *)a3 + 2 * v23);
              break;
            }
          }
        }
        else
        {
          unsigned int v25 = *(unsigned __int16 **)a3;
        }
        if (v23 == ((uint64_t)v25 - *(void *)a3) >> 1) {
          break;
        }
        uint64_t v6 = (v20 + 1);
        if (v6 == v18) {
          break;
        }
        int v22 = *(unsigned __int16 *)(v21 + 2 * v6);
        ++v20;
      }
      while ((v22 - 1) <= 0x3FFFFFFE);
    }
    if (v7 == v6) {
      break;
    }
    uint64_t v14 = v6;
  }
  while (!v8);
  if (!v8) {
    return v8;
  }
  unsigned int v26 = *((_DWORD *)this + 28) & 0x7FFFFFFF;
  uint64_t v27 = *(void *)(*(void *)(a1 + 264) + 208);
  uint64_t v28 = v27 + 40 * v26;
  if (*(_DWORD *)(v28 + 16)) {
    unsigned int v29 = **(_DWORD **)(v28 + 8);
  }
  else {
    unsigned int v29 = 0;
  }
  if (*(_DWORD *)(v27 + 40 * v26)) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  if (v30) {
    BOOL v31 = v30 >> 30 == 0;
  }
  else {
    BOOL v31 = 0;
  }
  if (v31)
  {
    uint64_t v35 = *(void *)(a3 + 8);
    uint64_t v36 = *(void *)a3 + 2 * v35;
    if (!WORD1(v30))
    {
      if (v35)
      {
        uint64_t v37 = 2 * v35;
        unsigned int v38 = *(unsigned __int16 **)a3;
        while (*v38 != (unsigned __int16)v30)
        {
          ++v38;
          v37 -= 2;
          if (!v37) {
            goto LABEL_57;
          }
        }
        uint64_t v36 = (uint64_t)v38;
      }
      else
      {
        uint64_t v36 = *(void *)a3;
      }
    }
LABEL_57:
    if (v35 != (v36 - *(void *)a3) >> 1)
    {
      if ((*(uint64_t (**)(void, llvm::LiveRange *, uint64_t, uint64_t))(**(void **)(a1 + 1296) + 24))(*(void *)(a1 + 1296), this, v30, a5))
      {
        sub_1CC419C9C(a1, (uint64_t)this, v30, a4);
        return v30;
      }
      unint64_t v39 = this;
      sub_1CC419FA4(a1 + 29296, (uint64_t *)&v39);
    }
  }
  uint64_t v32 = *(void *)(a1 + 29448);
  if (*(unsigned char *)(v32 + v8))
  {
    unsigned int v33 = sub_1CC41A034(a1, (uint64_t)this, a3, a4, *(unsigned __int8 *)(v32 + v8), a5, v16, v17);
    if (v33) {
      return v33;
    }
    else {
      return v8;
    }
  }
  return v8;
}

_DWORD *sub_1CC419C00(_DWORD *result)
{
  signed int v1 = result[2];
  uint64_t v2 = *(unsigned __int16 ***)result;
  int v3 = *(_DWORD *)(*(void *)result + 72);
  if (v1 < v3) {
    result[2] = ++v1;
  }
  if ((v1 & 0x80000000) == 0 && v1 < v3)
  {
    uint64_t v4 = v2[7];
    do
    {
      int v5 = v4[v1];
      if ((v5 - 1) > 0x3FFFFFFE) {
        break;
      }
      uint64_t v6 = *v2;
      int v7 = v2[1];
      if (v7)
      {
        uint64_t v8 = 2 * (void)v7;
        uint64_t v9 = *v2;
        while (*v9 != v5)
        {
          ++v9;
          v8 -= 2;
          if (!v8)
          {
            uint64_t v9 = &v6[(void)v7];
            break;
          }
        }
      }
      else
      {
        uint64_t v9 = *v2;
      }
      if (v7 == (unsigned __int16 *)(v9 - v6)) {
        break;
      }
      result[2] = ++v1;
    }
    while (v1 != v3);
  }
  return result;
}

void sub_1CC419C9C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = (void *)(a1 + 1248);
  uint64_t v8 = *(_DWORD *)(a2 + 112) & 0x7FFFFFFF;
  uint64_t v9 = *(void *)(a1 + 1248);
  int v10 = *(_DWORD *)(v9 + 8 * v8 + 4);
  if (!v10)
  {
    int v10 = *(_DWORD *)(a1 + 1280);
    *(_DWORD *)(a1 + 1280) = v10 + 1;
    uint64_t v34 = *(unsigned int *)(a1 + 1256);
    if (v8 >= v34)
    {
      sub_1CC38F7B8((uint64_t)v35, v8 - v34 + 1, *(void *)(a1 + 1264));
      uint64_t v9 = *(void *)(a1 + 1248);
    }
    *(_DWORD *)(v9 + 8 * v8 + 4) = v10;
  }
  uint64_t v37 = v39;
  uint64_t v38 = 0x800000000;
  uint64_t v11 = *(void *)(a1 + 880);
  if (v11) {
    uint64_t v12 = (void *)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = *(unsigned int *)(*v12 + 24 * a3 + 16);
  uint64_t v14 = (_WORD *)(v12[6] + ((v13 >> 3) & 0x1FFFFFFE));
  __int16 v16 = *v14;
  uint64_t v15 = v14 + 1;
  unsigned __int16 v17 = v16 + (v13 & 0xF) * a3;
  do
  {
    uint64_t v18 = *(void *)(a1 + 288);
    unsigned int v19 = v17;
    uint64_t v20 = *(void *)(v18 + 400);
    uint64_t v21 = v20 + 176 * v17;
    int v22 = *(_DWORD *)(v18 + 272);
    uint64_t v23 = (_DWORD *)(*(void *)(v18 + 392) + 216 * v19);
    if (*(_DWORD *)(v21 + 168) != v22
      || *(void *)(v20 + 176 * v19 + 8) != a2
      || *(_DWORD **)v21 != v23
      || *v23 != *(_DWORD *)(v20 + 176 * v19 + 164))
    {
      *(void *)uint64_t v21 = v23;
      uint64_t v24 = v20 + 176 * v19;
      *(void *)(v24 + 8) = a2;
      *(_DWORD *)(v24 + 120) = 0;
      *(_WORD *)(v24 + 160) = 0;
      *(_DWORD *)(v24 + 164) = *v23;
      *(_DWORD *)(v21 + 168) = v22;
LABEL_8:
      llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v21, 0xFFFFFFFF);
      goto LABEL_9;
    }
    if (!*(unsigned char *)(v21 + 161)) {
      goto LABEL_8;
    }
LABEL_9:
    sub_1CB935BDC((unsigned int *)&v37, *(unsigned char **)(v21 + 112), (unsigned char *)(*(void *)(v21 + 112) + 8 * *(unsigned int *)(v21 + 120)));
    int v25 = *v15++;
    unsigned __int16 v17 = v25 + v19;
  }
  while (v25);
  unsigned int v26 = (char *)v37;
  if (v38)
  {
    uint64_t v27 = 8 * v38;
    do
    {
      uint64_t v28 = *(const llvm::LiveInterval **)v26;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 272) + 280)
                     + 4 * (*(_DWORD *)(*(void *)v26 + 112) & 0x7FFFFFFF)))
      {
        int v29 = *(_DWORD *)(a2 + 112);
        int v36 = *(_DWORD *)(*(void *)v26 + 112);
        sub_1CC42191C(a1 + 1312, &v36)[1] = v29;
        sub_1CC42191C(a1 + 1312, &v36)[2] = a3;
        llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v28);
        uint64_t v30 = *((_DWORD *)v28 + 28) & 0x7FFFFFFF;
        uint64_t v31 = *(unsigned int *)(a1 + 1256);
        if (v30 >= v31) {
          sub_1CC38F7B8((uint64_t)v35, v30 - v31 + 1, *(void *)(a1 + 1264));
        }
        *(_DWORD *)(*v35 + 8 * v30 + 4) = v10;
        int v32 = *((_DWORD *)v28 + 28);
        unint64_t v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      v26 += 8;
      v27 -= 8;
    }
    while (v27);
    unsigned int v26 = (char *)v37;
  }
  if (v26 != (char *)v39) {
    free(v26);
  }
}

BOOL sub_1CC419FA4(uint64_t a1, uint64_t *a2)
{
  sub_1CC422380(a1, a2, (uint64_t)&v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

uint64_t sub_1CC41A034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::NamedRegionTimer::NamedRegionTimer(&v17, "evict", 5uLL, "Evict", 5uLL, "regalloc", 8uLL, a8, (uint64_t)"Register Allocation", 19, llvm::TimePassesIsEnabled);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 1296) + 16))(*(void *)(a1 + 1296), a2, a3, a5, a6);
  uint64_t v15 = v14;
  if (v14) {
    sub_1CC419C9C(a1, a2, v14, a4);
  }
  if (v17) {
    llvm::Timer::stopTimer(v17);
  }
  return v15;
}

BOOL llvm::RegAllocEvictionAdvisor::isUnusedCalleeSavedReg(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  return *(void *)(v2 + 48) > (unint64_t)a2
      && *(_WORD *)(*(void *)(v2 + 40) + 2 * a2)
      && !llvm::LiveRegMatrix::isPhysRegUsed(*(void *)(a1 + 24), a2);
}

uint64_t llvm::RegAllocEvictionAdvisor::getOrderLimit(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 64);
  if (a4 <= 0xFE)
  {
    uint64_t v15 = *(unsigned int *)(a3 + 64);
    uint64_t v8 = (unsigned __int16 ***)(*(void *)(*(void *)(a1[6] + 24) + 16 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = a1[8];
    unsigned int v10 = *((unsigned __int16 *)*v8 + 12);
    uint64_t v11 = *(void *)v9;
    if (*(_DWORD *)(v9 + 8) != *(_DWORD *)(*(void *)v9 + 24 * *((unsigned __int16 *)*v8 + 12))) {
      llvm::RegisterClassInfo::compute((uint64_t *)v9, v8);
    }
    if (*(unsigned __int8 *)(v11 + 24 * v10 + 9) >= a4)
    {
      uint64_t v5 = 0;
      uint64_t v4 = 0;
      return v4 | v5;
    }
    if (*(unsigned __int8 *)(a1[9] + *(unsigned __int16 *)(*(void *)(a3 + 56) + 2 * *(void *)(a3 + 64) - 2)) < a4)
    {
      uint64_t v5 = 0x100000000;
      uint64_t v4 = v15;
      return v4 | v5;
    }
    uint64_t v12 = a1[8];
    unsigned int v13 = *((unsigned __int16 *)*v8 + 12);
    uint64_t v14 = *(void *)v12;
    if (*(_DWORD *)(v12 + 8) != *(_DWORD *)(*(void *)v12 + 24 * *((unsigned __int16 *)*v8 + 12))) {
      llvm::RegisterClassInfo::compute((uint64_t *)v12, v8);
    }
    uint64_t v4 = *(unsigned __int16 *)(v14 + 24 * v13 + 10);
  }
  uint64_t v5 = 0x100000000;
  return v4 | v5;
}

BOOL llvm::RegAllocEvictionAdvisor::canAllocatePhysReg(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  if (*(unsigned __int8 *)(a1[9] + a3) >= a2) {
    return 0;
  }
  if (a2 != 1) {
    return 1;
  }
  uint64_t v4 = a1[8];
  if (*(void *)(v4 + 48) <= (unint64_t)a3) {
    return 1;
  }
  if (!*(_WORD *)(*(void *)(v4 + 40) + 2 * a3)) {
    return 1;
  }
  BOOL result = llvm::LiveRegMatrix::isPhysRegUsed(a1[3], a3);
  if (result) {
    return 1;
  }
  return result;
}

BOOL sub_1CC41A310(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6 = (unsigned int *)(a1 + 24448);
  uint64_t v7 = *(void *)(a1 + 1336);
  uint64_t v8 = *(void *)(v7 + 280);
  uint64_t v9 = *(unsigned int *)(v7 + 288);
  uint64_t v43 = v9;
  unsigned __int16 v44 = (uint64_t *)(a1 + 24440);
  unsigned int v10 = *(_DWORD *)(a1 + 24448);
  if (v10 == v9)
  {
    if (v9)
    {
LABEL_3:
      uint64_t v41 = v6;
      uint64_t v42 = a3;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *v44;
        uint64_t v14 = (unsigned int *)(*v44 + 8 * v12);
        unsigned int v15 = *(_DWORD *)(*(void *)(v8 + 40 * v12) + 24);
        *uint64_t v14 = v15;
        __int16 v16 = *(unsigned int **)a2;
        if (*(void *)a2)
        {
          uint64_t v17 = *((void *)v16 + 64);
          if (*(_DWORD *)(v17 + 24 * v15) != v16[1])
          {
            sub_1CC2CF4E4(*(unsigned int **)a2, v15);
            uint64_t v9 = v43;
            uint64_t v17 = *((void *)v16 + 64);
          }
          uint64_t v18 = (void *)(v17 + 24 * v15);
        }
        else
        {
          uint64_t v18 = &unk_1CFAC6E40;
        }
        uint64_t v19 = v8 + 40 * v12;
        uint64_t v20 = (unsigned char *)(v19 + 32);
        __int16 v21 = *(unsigned __int8 *)(v19 + 32);
        *(void *)(a2 + 8) = v18;
        *((unsigned char *)v14 + 4) = v21;
        int v22 = v14 + 1;
        int v25 = *(unsigned __int8 *)(v19 + 33);
        uint64_t v24 = (unsigned char *)(v19 + 33);
        __int16 v23 = v25;
        if (v25) {
          __int16 v23 = (**(_WORD **)(*(void *)((*(void *)(v8 + 40 * v12 + 16) & 0xFFFFFFFFFFFFFFF8) + 16) + 16) != 10) << 8;
        }
        *int v22 = v23 | v21;
        *(unsigned char *)(v13 + 8 * v12 + 6) = *(void *)(v8 + 40 * v12 + 24) > 7uLL;
        unint64_t v26 = *(void *)(*(void *)(a2 + 8) + 8);
        if (v26 < 8) {
          goto LABEL_35;
        }
        if (!*v20)
        {
          int v31 = 0;
          goto LABEL_21;
        }
        uint64_t v27 = *v14;
        uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 1128) + 392) + 16 * v27);
        unsigned int v29 = *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3;
        if (v29 <= ((v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          __int16 v30 = 4;
        }
        else
        {
          if (v29 >= ((*(void *)(v8 + 40 * v12 + 8) >> 1) & 3 | *(_DWORD *)((*(void *)(v8 + 40 * v12 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
          {
            int v31 = v29 < ((*(void *)(v8 + 40 * v12 + 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v8 + 40 * v12 + 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 24));
            goto LABEL_21;
          }
          __int16 v30 = 2;
        }
        *int v22 = v30 | v23;
        uint64_t v32 = *(void *)(v8 + 40 * v12 + 8);
        if (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((sub_1CC421BD8(*(void *)(a1 + 1336) + 48, *(void *)(*(void *)(**(void **)(a1 + 1336) + 104)+ 8 * v27)) & 0xFFFFFFFFFFFFFFF8)+ 24))return 0; {
        int v31 = 1;
        }
        uint64_t v9 = v43;
LABEL_21:
        if (*v24)
        {
          uint64_t v33 = *(void *)(*(void *)(a2 + 8) + 16);
          uint64_t v34 = sub_1CC41A70C(*(uint64_t **)(a1 + 1336), *v14);
          if ((*(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3) >= ((v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            __int16 v36 = 1024;
            uint64_t v9 = v43;
            goto LABEL_26;
          }
          unsigned int v35 = (*(void *)(*(void *)(a2 + 8) + 16) >> 1) & 3 | *(_DWORD *)((*(void *)(*(void *)(a2 + 8) + 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 24);
          uint64_t v9 = v43;
          if (v35 > ((*(void *)(v8 + 40 * v12 + 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v8 + 40 * v12 + 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
          {
            __int16 v36 = 512;
LABEL_26:
            *int v22 = *(unsigned __int8 *)v22 | v36;
            ++v31;
LABEL_30:
            uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 1176) + 392) + 8 * *v14);
            do
            {
              if (__CFADD__(v37, v11)) {
                uint64_t v11 = -1;
              }
              else {
                v11 += v37;
              }
              --v31;
            }
            while (v31);
            goto LABEL_35;
          }
          if (v35 > ((*(void *)(v8 + 40 * v12 + 8) >> 1) & 3 | *(_DWORD *)((*(void *)(v8 + 40 * v12 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24)))
            ++v31;
        }
        if (v31) {
          goto LABEL_30;
        }
LABEL_35:
        if (++v12 == v9)
        {
          a3 = v42;
          uint64_t v38 = *v41;
          goto LABEL_44;
        }
      }
    }
  }
  else
  {
    if (v10 <= v9)
    {
      if (*(_DWORD *)(a1 + 24452) < v9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v10 != v9)
      {
        bzero((void *)(*v44 + 8 * v10), 8 * (v9 - v10));
        uint64_t v9 = v43;
      }
    }
    *unsigned int v6 = v9;
    if (v9) {
      goto LABEL_3;
    }
  }
  uint64_t v38 = 0;
  uint64_t v11 = 0;
LABEL_44:
  *a3 = v11;
  llvm::SpillPlacement::addConstraints(*(void **)(a1 + 1176), *(void *)(a1 + 24440), v38);
  char v40 = *(llvm::SpillPlacement **)(a1 + 1176);

  return llvm::SpillPlacement::scanActiveBundles(v40);
}

uint64_t sub_1CC41A70C(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *(unsigned int **)(*(void *)(*a1 + 104) + 8 * a2);
  uint64_t v3 = v2[6];
  uint64_t v4 = a1[7];
  if (*(void *)(v4 + 16 * v3) >= 8uLL && *(void *)(v4 + 16 * v3 + 8) < 8uLL) {
    return *(void *)(v4 + 16 * v3);
  }
  else {
    return sub_1CC4754EC(a1 + 6, a1[5], (llvm::MachineBasicBlock *)v2);
  }
}

BOOL sub_1CC41A758(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v73[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 1336);
  uint64_t v69 = v71;
  uint64_t v70 = 0x600000000;
  unsigned int v5 = *(_DWORD *)(v4 + 632);
  unsigned int v6 = (void **)(v4 + 624);
  if (v5) {
    BOOL v7 = &v69 == v6;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (v5 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v71, *v6, 8 * *(unsigned int *)(v4 + 632));
    LODWORD(v70) = v5;
  }
  uint64_t v8 = 0;
  v71[12] = *(_DWORD *)(v4 + 688);
  unint64_t v66 = xmmword_1EBCD28B8;
  uint64_t v67 = v3;
  while (2)
  {
    uint64_t v9 = *(void *)(v3 + 1176);
    uint64_t v10 = *(unsigned int *)(v9 + 352);
    if (v10)
    {
      uint64_t v11 = *(unsigned int **)(v9 + 344);
      uint64_t v12 = &v11[v10];
      do
      {
        uint64_t v13 = *(void *)(*(void *)(v3 + 1168) + 312) + 48 * *v11;
        unint64_t v14 = *(unsigned int *)(v13 + 8);
        BOOL v15 = v66 > v14;
        v66 -= v14;
        if (!v15)
        {
          BOOL v65 = 0;
          goto LABEL_86;
        }
        if (v14)
        {
          __int16 v16 = *(unsigned int **)v13;
          uint64_t v17 = 4 * v14;
          do
          {
            unint64_t v18 = *v16;
            uint64_t v19 = *((void *)v69 + (v18 >> 6));
            if (((1 << v18) & v19) != 0)
            {
              *((void *)v69 + (v18 >> 6)) = v19 & ~(1 << v18);
              unint64_t v20 = *(unsigned int *)(a2 + 104);
              if (v20 >= *(unsigned int *)(a2 + 108)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*(void *)(a2 + 96) + 4 * v20) = v18;
              ++*(_DWORD *)(a2 + 104);
            }
            ++v16;
            v17 -= 4;
          }
          while (v17);
        }
        ++v11;
        uint64_t v3 = v67;
      }
      while (v11 != v12);
    }
    uint64_t v21 = *(unsigned int *)(a2 + 104);
    BOOL v65 = v21 == v8;
    if (v21 != v8)
    {
      uint64_t v22 = *(void *)(a2 + 96);
      __int16 v23 = (unsigned int *)(v22 + 4 * v8);
      if (!*(_DWORD *)a2)
      {
        llvm::SpillPlacement::addPrefSpill(*(void **)(v3 + 1176), (unsigned int *)(v22 + 4 * v8), v21 - v8, 1);
        goto LABEL_72;
      }
      uint64_t v24 = *(void *)(a2 + 8);
      if (v24) {
        ++*(_DWORD *)(v24 + 8);
      }
      unsigned int v25 = 0;
      unsigned int v26 = 0;
      uint64_t v68 = (unsigned int *)(v22 + 4 * v21);
      while (1)
      {
        uint64_t v27 = *v23;
        if (v24)
        {
          uint64_t v28 = *(void *)(v24 + 512);
          if (*(_DWORD *)(v28 + 24 * v27) != *(_DWORD *)(v24 + 4))
          {
            sub_1CC2CF4E4((unsigned int *)v24, *v23);
            uint64_t v28 = *(void *)(v24 + 512);
          }
          unsigned int v29 = (void *)(v28 + 24 * v27);
        }
        else
        {
          unsigned int v29 = &unk_1CFAC6E40;
        }
        if (v29[1] <= 7uLL)
        {
          v72[v26++] = v27;
          if (v26 == 8)
          {
            llvm::SpillPlacement::addLinks(*(void **)(v3 + 1176), v72, 8);
            unsigned int v26 = 0;
          }
          goto LABEL_47;
        }
        LODWORD(v73[v25]) = v27;
        uint64_t v30 = *(void *)(*(void *)(*(void *)(v3 + 864) + 104) + 8 * v27);
        uint64_t v31 = v30 + 48;
        unint64_t v32 = *(void *)(v30 + 56);
        if (v32 != v31)
        {
          while (1)
          {
            int v33 = **(unsigned __int16 **)(v32 + 16);
            if ((v33 - 13) >= 5 && v33 != 23) {
              break;
            }
            if ((*(unsigned char *)v32 & 4) == 0)
            {
              while ((*(_WORD *)(v32 + 44) & 8) != 0)
                unint64_t v32 = *(void *)(v32 + 8);
            }
            unint64_t v32 = *(void *)(v32 + 8);
            if (v32 == v31) {
              goto LABEL_39;
            }
          }
        }
        if (v31 != v32) {
          break;
        }
LABEL_39:
        uint64_t v35 = *(void *)(*(void *)(*(void *)(v3 + 1128) + 392) + 16 * v27);
        __int16 v36 = &v73[v25];
        if ((*(_DWORD *)((v29[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v29[1] >> 1) & 3) <= ((v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24))) {
          char v37 = 4;
        }
        else {
          char v37 = 2;
        }
        *((unsigned char *)v36 + 4) = v37;
        uint64_t v38 = v29[2];
        uint64_t v39 = sub_1CC41A70C(*(uint64_t **)(v3 + 1336), v27);
        if ((*(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24) | (v38 >> 1) & 3) >= ((v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24))) {
          char v40 = 4;
        }
        else {
          char v40 = 2;
        }
        *((unsigned char *)v36 + 5) = v40;
        ++v25;
        uint64_t v3 = v67;
        if (v25 == 8)
        {
          llvm::SpillPlacement::addConstraints(*(void **)(v67 + 1176), (uint64_t)v73, 8);
          unsigned int v25 = 0;
        }
LABEL_47:
        if (++v23 == v68)
        {
          llvm::SpillPlacement::addConstraints(*(void **)(v3 + 1176), (uint64_t)v73, v25);
          llvm::SpillPlacement::addLinks(*(void **)(v3 + 1176), v72, v26);
          char v56 = 1;
          goto LABEL_69;
        }
      }
      __int16 v41 = *(_WORD *)(v32 + 44);
      unint64_t v42 = v32;
      if ((v41 & 0xC) != 0)
      {
        if ((v41 & 4) != 0)
        {
          unint64_t v42 = v32;
          do
            unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v42 + 44) & 4) != 0);
        }
        if ((v41 & 8) != 0)
        {
          do
            unint64_t v32 = *(void *)(v32 + 8);
          while ((*(_WORD *)(v32 + 44) & 8) != 0);
        }
        uint64_t v3 = v67;
      }
      unint64_t v43 = *(void *)(v32 + 8);
      if (v42 != v43)
      {
        while (1)
        {
          unsigned int v44 = **(unsigned __int16 **)(v42 + 16);
          BOOL v15 = v44 > 0x17;
          int v45 = (1 << v44) & 0x83E000;
          if (v15 || v45 == 0) {
            break;
          }
          unint64_t v42 = *(void *)(v42 + 8);
          if (v42 == v43)
          {
            unint64_t v42 = v43;
            break;
          }
        }
      }
      uint64_t v47 = *(void *)(*(void *)(v3 + 280) + 288);
      uint64_t v48 = *(void *)(v47 + 368);
      uint64_t v49 = *(unsigned int *)(v47 + 384);
      if (v49)
      {
        LODWORD(v50) = ((v42 >> 4) ^ (v42 >> 9)) & (v49 - 1);
        unint64_t v51 = (uint64_t *)(v48 + 16 * v50);
        uint64_t v52 = *v51;
        if (v42 == *v51) {
          goto LABEL_62;
        }
        int v54 = 1;
        while (v52 != -4096)
        {
          int v55 = v50 + v54++;
          uint64_t v50 = v55 & (v49 - 1);
          uint64_t v52 = *(void *)(v48 + 16 * v50);
          if (v42 == v52)
          {
            unint64_t v51 = (uint64_t *)(v48 + 16 * v50);
            goto LABEL_62;
          }
        }
      }
      unint64_t v51 = (uint64_t *)(v48 + 16 * v49);
LABEL_62:
      uint64_t v53 = v51[1];
      if (*(_DWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((sub_1CC421BD8(*(void *)(v3 + 1336) + 48, *(void *)(*(void *)(**(void **)(v3 + 1336)+ 104)+ 8 * v27)) & 0xFFFFFFFFFFFFFFF8)+ 24))
      {
        char v56 = 0;
LABEL_69:
        if (v24) {
          --*(_DWORD *)(v24 + 8);
        }
        if (v56)
        {
LABEL_72:
          uint64_t v8 = *(unsigned int *)(a2 + 104);
          uint64_t v57 = *(void *)(v3 + 1176);
          *(_DWORD *)(v57 + 352) = 0;
          int v58 = *(_DWORD *)(*(void *)(v57 + 256) + 304);
          if (10 * v58)
          {
            int v59 = -10 * v58;
            do
            {
              uint64_t v60 = *(unsigned int *)(v57 + 488);
              if (!v60) {
                break;
              }
              unsigned int v61 = *(_DWORD *)(*(void *)(v57 + 480) + 4 * v60 - 4);
              *(_DWORD *)(v57 + 488) = v60 - 1;
              if (llvm::SpillPlacement::update((llvm::SpillPlacement *)v57, v61)
                && *(int *)(*(void *)(v57 + 280) + 112 * v61 + 16) >= 1)
              {
                unint64_t v62 = *(unsigned int *)(v57 + 352);
                if (v62 >= *(unsigned int *)(v57 + 356)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)(*(void *)(v57 + 344) + 4 * v62) = v61;
                ++*(_DWORD *)(v57 + 352);
              }
            }
            while (!__CFADD__(v59++, 1));
          }
          continue;
        }
        break;
      }
      goto LABEL_39;
    }
    break;
  }
LABEL_86:
  if (v69 != v71) {
    free(v69);
  }
  return v65;
}

BOOL sub_1CC41ADA8(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(*(void *)(a1 + 1336) + 696)) {
    return 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    --*(_DWORD *)(v4 + 8);
  }
  *(void *)(a2 + 8) = 0;
  unsigned int v5 = (void *)(a2 + 24);
  *(_DWORD *)(a2 + 104) = 0;
  uint64_t v6 = *(void *)(a1 + 1176);
  *(_DWORD *)(v6 + 352) = 0;
  *(_DWORD *)(v6 + 488) = 0;
  *(void *)(v6 + 288) = a2 + 24;
  *(_DWORD *)(a2 + 32) = 0;
  int v7 = *(_DWORD *)(*(void *)(v6 + 256) + 304);
  *(_DWORD *)(a2 + 88) = v7;
  if ((v7 + 63) < 0x40)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = (v7 + 63) >> 6;
    if (v8 > *(_DWORD *)(a2 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(a2 + 24), 8 * v8);
    uint64_t v9 = v8;
    *(_DWORD *)(a2 + 32) = v8;
  }
  if ((v7 & 0x3F) != 0) {
    *(void *)(*v5 + 8 * v9 - 8) &= ~(-1 << (v7 & 0x3F));
  }
  uint64_t v10 = *(void *)(a2 + 8);
  v17[0] = v10;
  v17[1] = 0;
  if (v10) {
    ++*(_DWORD *)(v10 + 8);
  }
  BOOL result = sub_1CC41A310(a1, (uint64_t)v17, &v18);
  if (v17[0]) {
    --*(_DWORD *)(v17[0] + 8);
  }
  if (result)
  {
    BOOL result = sub_1CC41A758(a1, a2);
    if (result)
    {
      llvm::SpillPlacement::finish(*(llvm::SpillPlacement **)(a1 + 1176));
      uint64_t v12 = *(unsigned int *)(a2 + 32);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)(a2 + 24);
        uint64_t v14 = 8 * v12 - 8;
        do
        {
          uint64_t v15 = *v13++;
          BOOL result = v15 != 0;
          if (v15) {
            BOOL v16 = 1;
          }
          else {
            BOOL v16 = v14 == 0;
          }
          v14 -= 8;
        }
        while (!v16);
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC41AF54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1336);
  unsigned int v2 = *(_DWORD *)(v1 + 288);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(void *)(v1 + 280);
  uint64_t v6 = v5 + 40 * v2;
  uint64_t v7 = *(void *)(*(void *)(a1 + 1176) + 392);
  uint64_t v8 = v5 + 24;
  do
  {
    uint64_t v9 = v8 - 24;
    uint64_t v10 = *(void *)(v7 + 8 * *(unsigned int *)(*(void *)(v8 - 24) + 24));
    if (__CFADD__(v10, result)) {
      uint64_t result = -1;
    }
    else {
      result += v10;
    }
    if (*(unsigned char *)(v8 + 8) && *(unsigned char *)(v8 + 9))
    {
      BOOL v11 = __CFADD__(v10, result);
      uint64_t v12 = v10 + result;
      if (v11) {
        uint64_t v12 = -1;
      }
      if (*(void *)v8 > 7uLL) {
        uint64_t result = v12;
      }
    }
    v8 += 40;
  }
  while (v9 + 40 != v6);
  return result;
}

uint64_t sub_1CC41AFD8(uint64_t a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  if ((*(unsigned int (**)(void, void, uint64_t))(**(void **)(a1 + 880) + 528))(*(void *)(a1 + 880), *(void *)(a1 + 864), a2))
  {
    unsigned int v15 = 0;
    uint64_t v8 = sub_1CC41AF54(a1);
    BOOL v10 = sub_1CC41ADA8(a1, *(void *)(a1 + 24520));
    if (v10)
    {
      unsigned int v15 = 1;
      uint64_t v8 = -1;
    }
    unint64_t v14 = v8;
    unsigned int v11 = sub_1CC41B0D0(a1, v9, a3, &v14, &v15, 0);
    int v12 = v11 != -1 || v10;
    if (v12 == 1) {
      sub_1CC41B9EC(a1, a2, v11, v10, a4);
    }
  }
  return 0;
}

uint64_t sub_1CC41B0D0(uint64_t a1, uint64_t a2, unsigned __int16 **a3, unint64_t *a4, unsigned int *a5, int a6)
{
  uint64_t v6 = a1;
  uint64_t v7 = a3[1];
  uint64_t v8 = -(uint64_t)v7;
  if (*((_DWORD *)a3 + 18) != -(int)v7)
  {
    uint64_t v10 = -*((_DWORD *)a3 + 2);
    uint64_t v11 = a1 + 24520;
    uint64_t v122 = a1 + 1352;
    int v123 = (unsigned int *)(a1 + 24528);
    unsigned int v130 = -1;
    int v12 = *((_DWORD *)a3 + 18);
    unint64_t v127 = a3;
    int v126 = v12;
    while (1)
    {
      uint64_t v13 = &(*a3)[(void)a3[1] + (int)v10];
      int v131 = v8;
      uint64_t v132 = v10;
      if ((int)v8 >= 0) {
        uint64_t v13 = &a3[7][v10];
      }
      unint64_t v14 = *v13;
      if (a6
        && (uint64_t v15 = *(void *)(v6 + 1296), v16 = *(void *)(v15 + 64), *(void *)(v16 + 48) > v14)
        && *(_WORD *)(*(void *)(v16 + 40) + 2 * v14)
        && !llvm::LiveRegMatrix::isPhysRegUsed(*(void *)(v15 + 24), v14))
      {
        a3 = v127;
        int v40 = v126;
        int v41 = v131;
        uint64_t v10 = v132;
      }
      else
      {
        unsigned int v17 = *a5;
        if (*a5 == 32)
        {
          uint64_t v18 = 0;
          unsigned int v19 = 0;
          unsigned int v20 = -1;
          do
          {
            if (v18 != v130 && *(_DWORD *)(*(void *)v11 + 144 * v18))
            {
              uint64_t v21 = *(void *)v11 + 144 * v18;
              uint64_t v22 = *(unsigned int *)(v21 + 32);
              if (v22)
              {
                unsigned int v23 = 0;
                uint64_t v24 = *(int8x8_t **)(v21 + 24);
                uint64_t v25 = 8 * v22;
                do
                {
                  int8x8_t v26 = *v24++;
                  uint8x8_t v27 = (uint8x8_t)vcnt_s8(v26);
                  v27.i16[0] = vaddlv_u8(v27);
                  v23 += v27.i32[0];
                  v25 -= 8;
                }
                while (v25);
              }
              else
              {
                unsigned int v23 = 0;
              }
              if (v23 < v20)
              {
                unsigned int v19 = v18;
                unsigned int v20 = v23;
              }
            }
            ++v18;
          }
          while (v18 != 32);
          *a5 = 31;
          uint64_t v28 = *(void *)v11;
          unsigned int v29 = (void *)(*(void *)v11 + 144 * v19);
          *unsigned int v29 = *(void *)(*(void *)v11 + 4464);
          v29[2] = 0;
          uint64_t v32 = v29[1];
          uint64_t v30 = v29 + 1;
          uint64_t v31 = v32;
          uint64_t v33 = *(void *)(v28 + 4472);
          if (v32) {
            --*(_DWORD *)(v31 + 8);
          }
          *uint64_t v30 = v33;
          if (v33) {
            ++*(_DWORD *)(v33 + 8);
          }
          if (v19 != 31)
          {
            uint64_t v34 = (void **)(v28 + 144 * v19 + 24);
            uint64_t v35 = *(unsigned int *)(v28 + 4496);
            uint64_t v36 = v28 + 144 * v19;
            unsigned int v39 = *(_DWORD *)(v36 + 32);
            uint64_t v38 = (_DWORD *)(v36 + 32);
            uint64_t v37 = v39;
            if (v39 >= v35)
            {
              if (v35) {
                memmove(*v34, *(const void **)(v28 + 4488), 8 * v35);
              }
            }
            else
            {
              if (*(_DWORD *)(v28 + 144 * v19 + 36) < v35)
              {
                *uint64_t v38 = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v37) {
                memmove(*v34, *(const void **)(v28 + 4488), 8 * v37);
              }
              else {
                uint64_t v37 = 0;
              }
              uint64_t v42 = *(unsigned int *)(v28 + 4496);
              if (v37 != v42) {
                memcpy((char *)*v34 + 8 * v37, (const void *)(*(void *)(v28 + 4488) + 8 * v37), 8 * v42 - 8 * v37);
              }
            }
            *uint64_t v38 = v35;
            uint64_t v43 = v28 + 144 * v19;
            unsigned int v46 = *(_DWORD *)(v43 + 104);
            int v45 = (_DWORD *)(v43 + 104);
            uint64_t v44 = v46;
            *(v45 - 4) = *(_DWORD *)(v28 + 4552);
            uint64_t v47 = (void **)(v45 - 2);
            uint64_t v48 = *(unsigned int *)(v28 + 4568);
            if (v46 >= v48)
            {
              if (v48) {
                memmove(*v47, *(const void **)(v28 + 4560), 4 * v48);
              }
            }
            else
            {
              if (*(_DWORD *)(v28 + 144 * v19 + 108) < v48)
              {
                *int v45 = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v44) {
                memmove(*v47, *(const void **)(v28 + 4560), 4 * v44);
              }
              else {
                uint64_t v44 = 0;
              }
              uint64_t v49 = *(unsigned int *)(v28 + 4568);
              if (v44 != v49) {
                memcpy((char *)*v47 + 4 * v44, (const void *)(*(void *)(v28 + 4560) + 4 * v44), 4 * v49 - 4 * v44);
              }
            }
            *int v45 = v48;
            uint64_t v6 = a1;
          }
          unsigned int v17 = *a5;
          unsigned int v50 = v130;
          if (v130 == *a5) {
            unsigned int v50 = v19;
          }
          unsigned int v130 = v50;
        }
        if (*v123 <= v17)
        {
          sub_1CC4227EC(v11, v17 + 1);
          unsigned int v17 = *a5;
        }
        uint64_t v51 = *(void *)v11;
        uint64_t v52 = *(void *)v11 + 144 * v17;
        *(_DWORD *)uint64_t v52 = v14;
        *(_DWORD *)(v52 + 4) = 0;
        int v54 = (unsigned int **)(v52 + 8);
        uint64_t v53 = *(void *)(v52 + 8);
        *(void *)(v52 + 16) = 0;
        int v55 = (void *)(v52 + 16);
        if (v53) {
          --*(_DWORD *)(v53 + 8);
        }
        *int v54 = 0;
        if (v14)
        {
          char v56 = sub_1CC2CEEEC(v122, v14);
          void *v55 = 0;
          if (*v54) {
            --(*v54)[2];
          }
          *int v54 = v56;
          if (v56) {
            ++v56[2];
          }
        }
        unsigned int v124 = v17;
        uint64_t v125 = v51;
        uint64_t v57 = v51 + 144 * v17;
        *(_DWORD *)(v57 + 104) = 0;
        int v58 = (unsigned int *)(v57 + 104);
        uint64_t v59 = *(void *)(v6 + 1176);
        uint64_t v60 = (void **)(v58 - 20);
        *(_DWORD *)(v59 + 352) = 0;
        *(_DWORD *)(v59 + 488) = 0;
        *(void *)(v59 + 288) = v58 - 20;
        *(v58 - 18) = 0;
        unsigned int v61 = *(_DWORD *)(*(void *)(v59 + 256) + 304);
        *(v58 - 4) = v61;
        if (v61 + 63 < 0x40)
        {
          uint64_t v63 = 0;
        }
        else
        {
          uint64_t v62 = (v61 + 63) >> 6;
          if (v62 > *(v58 - 17)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          bzero(*v60, 8 * v62);
          uint64_t v63 = v62;
          *(v58 - 18) = v62;
          uint64_t v6 = a1;
        }
        if ((v61 & 0x3F) != 0) {
          *((void *)*v60 + v63 - 1) &= ~(-1 << (v61 & 0x3F));
        }
        uint64_t v135 = 0;
        unint64_t v136 = 0;
        uint64_t v134 = *v54;
        if (v134) {
          ++v134[2];
        }
        BOOL v64 = sub_1CC41A310(v6, (uint64_t)&v134, (uint64_t *)&v136);
        uint64_t v135 = 0;
        if (v134) {
          --v134[2];
        }
        uint64_t v134 = 0;
        if (v64)
        {
          unint64_t v65 = v136;
          if (v136 < *a4 && sub_1CC41A758(v6, v52))
          {
            llvm::SpillPlacement::finish(*(llvm::SpillPlacement **)(v6 + 1176));
            uint64_t v66 = *(v58 - 18);
            if (v66)
            {
              uint64_t v67 = *v60;
              uint64_t v68 = 8 * v66;
              while (!*v67)
              {
                ++v67;
                v68 -= 8;
                if (!v68) {
                  goto LABEL_130;
                }
              }
              unint64_t v120 = v65;
              uint64_t v69 = *(void *)(v6 + 1336);
              uint64_t v70 = *(unsigned int *)(v69 + 288);
              if (v70)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v73 = *(void *)(v69 + 280);
                do
                {
                  uint64_t v74 = *(void *)(v6 + 24440);
                  unsigned __int16 v75 = (unsigned int *)(v74 + 8 * v72);
                  unsigned int v76 = *v75;
                  uint64_t v77 = *(void *)(*(void *)(v6 + 1168) + 256);
                  unint64_t v78 = *(unsigned int *)(v77 + 8 * *v75);
                  uint64_t v79 = *(void *)((char *)*v60 + ((v78 >> 3) & 0x1FFFFFF8));
                  unint64_t v80 = *(unsigned int *)(v77 + 4 * ((2 * *v75) | 1));
                  uint64_t v81 = *(void *)((char *)*v60 + ((v80 >> 3) & 0x1FFFFFF8));
                  unsigned int v82 = *v54;
                  if (*v54)
                  {
                    uint64_t v83 = *((void *)v82 + 64);
                    if (*(_DWORD *)(v83 + 24 * v76) != v82[1])
                    {
                      char v113 = v80;
                      uint64_t v114 = *(void *)(v6 + 24440);
                      uint64_t v117 = v70;
                      uint64_t v118 = v71;
                      int v115 = (unsigned int *)(v74 + 8 * v72);
                      uint64_t v116 = v73;
                      char v111 = v78;
                      uint64_t v112 = *(void *)((char *)*v60 + ((v80 >> 3) & 0x1FFFFFF8));
                      uint64_t v110 = *(void *)((char *)*v60 + ((v78 >> 3) & 0x1FFFFFF8));
                      sub_1CC2CF4E4(v82, v76);
                      uint64_t v79 = v110;
                      LOBYTE(v78) = v111;
                      uint64_t v81 = v112;
                      LOBYTE(v80) = v113;
                      uint64_t v74 = v114;
                      unsigned __int16 v75 = v115;
                      uint64_t v73 = v116;
                      uint64_t v70 = v117;
                      uint64_t v71 = v118;
                      uint64_t v83 = *((void *)v82 + 64);
                    }
                    char v84 = (void *)(v83 + 24 * v76);
                  }
                  else
                  {
                    char v84 = &unk_1CFAC6E40;
                  }
                  void *v55 = v84;
                  int v85 = *(unsigned __int8 *)(v73 + 40 * v72 + 32);
                  if (*(unsigned char *)(v73 + 40 * v72 + 32)) {
                    int v85 = (((1 << v78) & v79) != 0) ^ (*(unsigned char *)(v74 + 8 * v72 + 4) == 1);
                  }
                  if (*(unsigned char *)(v73 + 40 * v72 + 33)) {
                    v85 += (((1 << v80) & v81) != 0) ^ (*(unsigned __int8 *)(v74 + 8 * v72 + 5) << 8 == 256);
                  }
                  if (v85)
                  {
                    uint64_t v86 = *(void *)(*(void *)(*(void *)(v6 + 1176) + 392) + 8 * *v75);
                    do
                    {
                      if (__CFADD__(v86, v71)) {
                        uint64_t v71 = -1;
                      }
                      else {
                        v71 += v86;
                      }
                      --v85;
                    }
                    while (v85);
                  }
                  ++v72;
                }
                while (v72 != v70);
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v87 = *v58;
              if (v87)
              {
                unsigned int v88 = *(unsigned int **)(v125 + 144 * v124 + 96);
                for (uint64_t i = 4 * v87; i; i -= 4)
                {
                  uint64_t v90 = *v88;
                  uint64_t v91 = *(void *)(*(void *)(v6 + 1168) + 256);
                  unint64_t v92 = *(unsigned int *)(v91 + 4 * (2 * v90));
                  uint64_t v93 = (1 << v92) & *(void *)((unsigned char *)*v60 + ((v92 >> 3) & 0x1FFFFFF8));
                  unint64_t v94 = *(unsigned int *)(v91 + 4 * ((2 * v90) | 1u));
                  uint64_t v95 = (1 << v94) & *(void *)((unsigned char *)*v60 + ((v94 >> 3) & 0x1FFFFFF8));
                  if (v93 | v95)
                  {
                    if (v93) {
                      BOOL v96 = v95 == 0;
                    }
                    else {
                      BOOL v96 = 1;
                    }
                    if (v96)
                    {
                      uint64_t v100 = *(void *)(*(void *)(*(void *)(v6 + 1176) + 392) + 8 * v90);
                    }
                    else
                    {
                      unsigned int v97 = *v54;
                      if (*v54)
                      {
                        uint64_t v98 = *((void *)v97 + 64);
                        if (*(_DWORD *)(v98 + 24 * v90) != v97[1])
                        {
                          uint64_t v119 = v71;
                          sub_1CC2CF4E4(*v54, *v88);
                          uint64_t v71 = v119;
                          uint64_t v98 = *((void *)v97 + 64);
                        }
                        int v99 = (void *)(v98 + 24 * v90);
                      }
                      else
                      {
                        int v99 = &unk_1CFAC6E40;
                      }
                      void *v55 = v99;
                      if (v99[1] < 8uLL) {
                        goto LABEL_114;
                      }
                      uint64_t v100 = *(void *)(*(void *)(*(void *)(v6 + 1176) + 392) + 8 * v90);
                      if (__CFADD__(v100, v71)) {
                        uint64_t v71 = -1;
                      }
                      else {
                        v71 += v100;
                      }
                    }
                    BOOL v101 = __CFADD__(v100, v71);
                    uint64_t v102 = v100 + v71;
                    if (v101) {
                      uint64_t v71 = -1;
                    }
                    else {
                      uint64_t v71 = v102;
                    }
                  }
LABEL_114:
                  ++v88;
                }
              }
              if (__CFADD__(v71, v120)) {
                unint64_t v103 = -1;
              }
              else {
                unint64_t v103 = v71 + v120;
              }
              unsigned int v104 = *a5;
              if (v103 < *a4)
              {
                *a4 = v103;
                unsigned int v130 = v104;
              }
              *a5 = v104 + 1;
            }
          }
        }
LABEL_130:
        a3 = v127;
        int v40 = v126;
        int v41 = v131;
        uint64_t v10 = v132;
        int v12 = *((_DWORD *)v127 + 18);
      }
      if (v12 > v41) {
        uint64_t v10 = ++v41;
      }
      if ((v41 & 0x80000000) == 0 && v41 < v12)
      {
        unint64_t v105 = a3[7];
        int v106 = v105[v41];
        if ((v106 - 1) <= 0x3FFFFFFE)
        {
          size_t v107 = a3[1];
          do
          {
            if (v107)
            {
              uint64_t v108 = 2 * (void)v107;
              uint64_t v109 = *a3;
              while (*v109 != (unsigned __int16)v106)
              {
                ++v109;
                v108 -= 2;
                if (!v108)
                {
                  uint64_t v109 = &(*a3)[(void)v107];
                  break;
                }
              }
            }
            else
            {
              uint64_t v109 = *a3;
            }
            if (v107 == (unsigned __int16 *)(v109 - *a3)) {
              break;
            }
            uint64_t v10 = (v41 + 1);
            if (v10 == v12) {
              break;
            }
            int v106 = v105[v10];
            ++v41;
          }
          while ((v106 - 1) <= 0x3FFFFFFE);
        }
      }
      LODWORD(v8) = v10;
      if (v40 == v10) {
        return v130;
      }
    }
  }
  return -1;
}

uint64_t sub_1CC41B9EC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (unsigned int *)(a1 + 29152);
  uint64_t v145 = v147;
  uint64_t v146 = 0x800000000;
  uint64_t v10 = *(void *)(a1 + 864);
  uint64_t v11 = a1 + 856;
  uint64_t v12 = a1 + 568;
  v129[0] = &unk_1F260CAB0;
  v129[1] = a2;
  uint64_t v13 = *(void *)(v10 + 40);
  uint64_t v130 = a5;
  uint64_t v131 = v13;
  int8x16_t v132 = vextq_s8(*(int8x16_t *)(a1 + 272), *(int8x16_t *)(a1 + 272), 8uLL);
  uint64_t v133 = (*(uint64_t (**)(void))(**(void **)(v10 + 16) + 104))(*(void *)(v10 + 16));
  uint64_t v134 = v11;
  unsigned int v135 = *(_DWORD *)(a5 + 8);
  char v136 = 0;
  uint64_t v137 = v12;
  unsigned int v138 = v142;
  uint64_t v139 = v142;
  uint64_t v140 = 4;
  int v141 = 0;
  v142[4] = v144;
  v142[5] = v144;
  v142[6] = 4;
  int v143 = 0;
  *(void *)(v131 + 8) = v129;
  sub_1CC47661C(*(void *)(a1 + 1344), (uint64_t)v129, dword_1EBCD2980);
  unint64_t v14 = *(unsigned int *)(*(void *)(a1 + 1168) + 304);
  unsigned int v15 = v14;
  if (v9[1] < v14)
  {
    *uint64_t v9 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v16 = *(void *)(a1 + 29144);
  unint64_t v17 = *v9;
  if (v17 >= v14) {
    uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 1168) + 304);
  }
  else {
    uint64_t v18 = *v9;
  }
  if (v18)
  {
    memset(*(void **)(a1 + 29144), 255, 4 * v18);
    unint64_t v17 = *v9;
  }
  BOOL v19 = v14 > v17;
  unint64_t v20 = v14 - v17;
  if (v19) {
    memset((void *)(v16 + 4 * v17), 255, 4 * v20);
  }
  *uint64_t v9 = v15;
  if (a3 != -1 && sub_1CC41C690(*(void *)(a1 + 24520) + 144 * a3, *(void *)(a1 + 29144), a3))
  {
    if (v146 < HIDWORD(v146))
    {
      *((_DWORD *)v145 + v146) = a3;
      LODWORD(v146) = v146 + 1;
      sub_1CC477C68(*(void *)(a1 + 1344));
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4 && sub_1CC41C690(*(void *)(a1 + 24520), *(void *)(a1 + 29144), 0))
  {
    if (v146 < HIDWORD(v146))
    {
      *((_DWORD *)v145 + v146) = 0;
      LODWORD(v146) = v146 + 1;
      sub_1CC477C68(*(void *)(a1 + 1344));
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v127 = (unsigned int *)v145;
  uint64_t v21 = v146;
  int v122 = *(_DWORD *)(v130 + 8);
  unsigned int v123 = v135;
  uint64_t v22 = *(void *)(a1 + 1336);
  int v124 = *(_DWORD *)(*(void *)(v22 + 40) + 112);
  unsigned int v23 = (unsigned __int16 ***)(*(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v124 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v24 = *((unsigned __int16 *)*v23 + 12);
  uint64_t v25 = *(void *)(a1 + 296);
  if (*(_DWORD *)(a1 + 304) != *(_DWORD *)(v25 + 24 * *((unsigned __int16 *)*v23 + 12)))
  {
    llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 296), v23);
    uint64_t v22 = *(void *)(a1 + 1336);
  }
  uint64_t v26 = *(unsigned int *)(v22 + 288);
  if (v26)
  {
    uint64_t v126 = v21;
    int v120 = *(unsigned __int8 *)(v25 + 24 * v24 + 8);
    uint8x8_t v27 = *(unsigned char **)(v22 + 280);
    uint64_t v28 = 40 * v26;
    do
    {
      unsigned int v29 = *(_DWORD *)(*(void *)v27 + 24);
      if (!v27[32]
        || (unsigned int v30 = *(_DWORD *)(*(void *)(a1 + 29144)
                            + 4 * *(unsigned int *)(*(void *)(*(void *)(a1 + 1168) + 256) + 8 * v29)),
            v30 == -1))
      {
        unint64_t v37 = 0;
        int v33 = 0;
      }
      else
      {
        uint64_t v31 = *(void *)(a1 + 24520);
        uint64_t v32 = v31 + 144 * v30;
        int v33 = *(_DWORD *)(v32 + 4);
        uint64_t v34 = *(void *)(v32 + 8);
        if (v34)
        {
          uint64_t v35 = *(void *)(v34 + 512);
          if (*(_DWORD *)(v35 + 24 * v29) != *(_DWORD *)(v34 + 4))
          {
            int v47 = v33;
            sub_1CC2CF4E4((unsigned int *)v34, *(_DWORD *)(*(void *)v27 + 24));
            int v33 = v47;
            uint64_t v35 = *(void *)(v34 + 512);
          }
          uint64_t v36 = (void *)(v35 + 24 * v29);
        }
        else
        {
          uint64_t v36 = &unk_1CFAC6E40;
        }
        *(void *)(v31 + 144 * v30 + 16) = v36;
        unint64_t v37 = v36[1];
      }
      if (!v27[33]
        || (unsigned int v38 = *(_DWORD *)(*(void *)(a1 + 29144)
                            + 4
                            * *(unsigned int *)(*(void *)(*(void *)(a1 + 1168) + 256) + 4 * ((2 * v29) | 1))),
            v38 == -1))
      {
        unint64_t v45 = 0;
        int v41 = 0;
      }
      else
      {
        uint64_t v39 = *(void *)(a1 + 24520);
        uint64_t v40 = v39 + 144 * v38;
        int v41 = *(_DWORD *)(v40 + 4);
        uint64_t v42 = *(void *)(v40 + 8);
        if (v42)
        {
          uint64_t v43 = *(void *)(v42 + 512);
          if (*(_DWORD *)(v43 + 24 * v29) != *(_DWORD *)(v42 + 4))
          {
            uint64_t v115 = v42;
            int v117 = v33;
            sub_1CC2CF4E4((unsigned int *)v42, v29);
            int v33 = v117;
            uint64_t v43 = *(void *)(v115 + 512);
          }
          uint64_t v44 = (void *)(v43 + 24 * v29);
        }
        else
        {
          uint64_t v44 = &unk_1CFAC6E40;
        }
        *(void *)(v39 + 144 * v38 + 16) = v44;
        unint64_t v45 = v44[2];
      }
      if (v33 | v41)
      {
        unsigned int v46 = *(_DWORD **)(a1 + 1344);
        if (v33 && v41)
        {
          sub_1CC47E50C((uint64_t)v46, v29, v33, v37, v41, v45);
        }
        else if (v33)
        {
          sub_1CC47E738(v46, (uint64_t)v27, v33, v37);
        }
        else
        {
          sub_1CC47E9D0((uint64_t)v46, (uint64_t)v27, v41, v45);
        }
      }
      else if (sub_1CC47E344(*(void **)(a1 + 1336), (uint64_t)v27, v120 != 0))
      {
        sub_1CC47E3B0(*(void *)(a1 + 1344));
      }
      v27 += 40;
      v28 -= 40;
    }
    while (v28);
    uint64_t v22 = *(void *)(a1 + 1336);
    uint64_t v21 = v126;
  }
  uint64_t v150 = v152;
  uint64_t v151 = 0x600000000;
  unsigned int v48 = *(_DWORD *)(v22 + 632);
  uint64_t v49 = (void **)(v22 + 624);
  if (v48) {
    BOOL v50 = &v150 == (void **)v49;
  }
  else {
    BOOL v50 = 1;
  }
  if (!v50)
  {
    if (v48 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v152, *v49, 8 * *(unsigned int *)(v22 + 632));
    LODWORD(v151) = v48;
  }
  v152[12] = *(_DWORD *)(v22 + 688);
  uint64_t v51 = v127;
  if (v21)
  {
    uint64_t v121 = &v127[v21];
    do
    {
      uint64_t v128 = v51;
      uint64_t v52 = *(void *)(a1 + 24520) + 144 * *v51;
      uint64_t v53 = *(unsigned int *)(v52 + 104);
      if (v53)
      {
        int v54 = *(unsigned int **)(v52 + 96);
        uint64_t v55 = 4 * v53;
        do
        {
          unint64_t v56 = *v54;
          uint64_t v57 = v150[v56 >> 6];
          if (((1 << v56) & v57) != 0)
          {
            v150[v56 >> 6] = v57 & ~(1 << v56);
            uint64_t v58 = *(void *)(*(void *)(a1 + 1168) + 256);
            uint64_t v59 = *(void *)(a1 + 29144);
            unsigned int v60 = *(_DWORD *)(v59 + 4 * *(unsigned int *)(v58 + 4 * (2 * v56)));
            if (v60 == -1)
            {
              unint64_t v67 = 0;
              int v63 = 0;
            }
            else
            {
              uint64_t v61 = *(void *)(a1 + 24520);
              uint64_t v62 = v61 + 144 * v60;
              int v63 = *(_DWORD *)(v62 + 4);
              uint64_t v64 = *(void *)(v62 + 8);
              if (v64)
              {
                uint64_t v65 = *(void *)(v64 + 512);
                if (*(_DWORD *)(v65 + 24 * v56) != *(_DWORD *)(v64 + 4))
                {
                  int v118 = v63;
                  sub_1CC2CF4E4((unsigned int *)v64, v56);
                  int v63 = v118;
                  uint64_t v65 = *(void *)(v64 + 512);
                  uint64_t v58 = *(void *)(*(void *)(a1 + 1168) + 256);
                  uint64_t v59 = *(void *)(a1 + 29144);
                }
                uint64_t v66 = (void *)(v65 + 24 * v56);
              }
              else
              {
                uint64_t v66 = &unk_1CFAC6E40;
              }
              *(void *)(v61 + 144 * v60 + 16) = v66;
              unint64_t v67 = v66[1];
            }
            unsigned int v68 = *(_DWORD *)(v59 + 4 * *(unsigned int *)(v58 + 4 * ((2 * v56) | 1u)));
            if (v68 == -1)
            {
              unint64_t v75 = 0;
              int v71 = 0;
            }
            else
            {
              uint64_t v69 = *(void *)(a1 + 24520);
              uint64_t v70 = v69 + 144 * v68;
              int v71 = *(_DWORD *)(v70 + 4);
              uint64_t v72 = *(void *)(v70 + 8);
              if (v72)
              {
                uint64_t v73 = *(void *)(v72 + 512);
                if (*(_DWORD *)(v73 + 24 * v56) != *(_DWORD *)(v72 + 4))
                {
                  uint64_t v116 = v72;
                  int v119 = v63;
                  sub_1CC2CF4E4((unsigned int *)v72, v56);
                  int v63 = v119;
                  uint64_t v73 = *(void *)(v116 + 512);
                }
                uint64_t v74 = (void *)(v73 + 24 * v56);
              }
              else
              {
                uint64_t v74 = &unk_1CFAC6E40;
              }
              *(void *)(v69 + 144 * v68 + 16) = v74;
              unint64_t v75 = v74[2];
            }
            if (v63 | v71) {
              sub_1CC47E50C(*(void *)(a1 + 1344), v56, v63, v67, v71, v75);
            }
          }
          ++v54;
          v55 -= 4;
        }
        while (v55);
      }
      uint64_t v51 = v128 + 1;
    }
    while (v128 + 1 != v121);
  }
  v148[0] = v149;
  v148[1] = (void *)0x800000000;
  sub_1CC4790F8(*(void *)(a1 + 1344), (uint64_t)v148);
  sub_1CC2E527C(*(void *)(a1 + 1184), v124, (int *)(*(void *)v130 + 4 * v135), *(unsigned int *)(v130 + 8) - (unint64_t)v135);
  int v76 = *(_DWORD *)(v130 + 8);
  uint64_t v77 = v76 - v135;
  if (v76 != v135)
  {
    uint64_t v78 = 0;
    unsigned int v125 = *(_DWORD *)(*(void *)(a1 + 1336) + 288)
         - *(_DWORD *)(*(void *)(a1 + 1336) + 616)
         + *(_DWORD *)(*(void *)(a1 + 1336) + 696);
    uint64_t v79 = (uint64_t *)(a1 + 1248);
    do
    {
      uint64_t v80 = *(void *)(a1 + 280);
      int v81 = *(_DWORD *)(*(void *)v130 + 4 * (v135 + v78));
      uint64_t v82 = v81 & 0x7FFFFFFF;
      uint64_t v83 = (void *)(v80 + 408);
      uint64_t v84 = *(unsigned int *)(v80 + 416);
      if ((v81 & 0x7FFFFFFFu) >= v84)
      {
        sub_1CB9153B8((uint64_t)v83, v82 - v84 + 1, *(void *)(v80 + 424));
LABEL_109:
        operator new();
      }
      uint64_t v85 = *(void *)(*v83 + 8 * v82);
      if (!v85) {
        goto LABEL_109;
      }
      int v86 = *(_DWORD *)(v85 + 112);
      uint64_t v87 = v86 & 0x7FFFFFFF;
      uint64_t v88 = *(unsigned int *)(a1 + 1256);
      if ((v86 & 0x7FFFFFFFu) >= v88)
      {
        uint64_t v89 = v87 + 1;
        uint64_t v90 = *(void *)(a1 + 1264);
        int v91 = *(_DWORD *)(a1 + 1256);
        if (v87 >= *(_DWORD *)(a1 + 1260)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v92 = v89 - v88;
        if (v89 != v88)
        {
          uint64_t v93 = (void *)(*v79 + 8 * *(unsigned int *)(a1 + 1256));
          uint64_t v94 = ~v87 + v88;
          do
          {
            *v93++ = v90;
            BOOL v95 = __CFADD__(v94++, 1);
          }
          while (!v95);
          int v91 = *(_DWORD *)(a1 + 1256);
        }
        LODWORD(v88) = v91 + v92;
        *(_DWORD *)(a1 + 1256) = v91 + v92;
      }
      uint64_t v96 = *v79;
      if (*(_DWORD *)(*v79 + 8 * v87)) {
        goto LABEL_105;
      }
      unsigned int v97 = *((_DWORD *)v148[0] + v78);
      if (v97)
      {
        if (v97 >= v122 - v123 || sub_1CC47631C(*(void *)(a1 + 1336), v85) < v125) {
          goto LABEL_105;
        }
        int v98 = *(_DWORD *)(v85 + 112);
        uint64_t v99 = v98 & 0x7FFFFFFF;
        uint64_t v100 = *(unsigned int *)(a1 + 1256);
        if ((v98 & 0x7FFFFFFFu) >= v100)
        {
          uint64_t v109 = v99 + 1;
          uint64_t v110 = *(void *)(a1 + 1264);
          if (v99 >= *(_DWORD *)(a1 + 1260)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v111 = *(_DWORD *)(a1 + 1256);
          if (v109 != v100)
          {
            uint64_t v112 = (void *)(*v79 + 8 * *(unsigned int *)(a1 + 1256));
            uint64_t v113 = ~v99 + v100;
            do
            {
              *v112++ = v110;
              BOOL v95 = __CFADD__(v113++, 1);
            }
            while (!v95);
            int v111 = *(_DWORD *)(a1 + 1256);
          }
          *(_DWORD *)(a1 + 1256) = v111 + v109 - v100;
        }
        uint64_t v96 = *v79;
        uint64_t v101 = 8 * v99;
        int v102 = 3;
      }
      else
      {
        int v103 = *(_DWORD *)(v85 + 112);
        uint64_t v104 = v103 & 0x7FFFFFFF;
        if ((v103 & 0x7FFFFFFFu) >= v88)
        {
          uint64_t v105 = *(void *)(a1 + 1264);
          int v106 = v88;
          if (v104 >= *(_DWORD *)(a1 + 1260)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v104 - v88 != -1)
          {
            size_t v107 = (void *)(v96 + 8 * v88);
            uint64_t v108 = ~v104 + v88;
            do
            {
              *v107++ = v105;
              BOOL v95 = __CFADD__(v108++, 1);
            }
            while (!v95);
            int v106 = *(_DWORD *)(a1 + 1256);
            uint64_t v96 = *(void *)(a1 + 1248);
          }
          *(_DWORD *)(a1 + 1256) = v106 + v104 - v88 + 1;
        }
        uint64_t v101 = 8 * v104;
        int v102 = 4;
      }
      *(_DWORD *)(v96 + v101) = v102;
LABEL_105:
      ++v78;
    }
    while (v78 != v77);
  }
  if (llvm::RegAllocBase::VerifyEnabled) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 864), (llvm::Pass *)a1, "After splitting live range around region", 1);
  }
  if (v148[0] != v149) {
    free(v148[0]);
  }
  if (v150 != (void *)v152) {
    free(v150);
  }
  sub_1CD516CC4(v129);
  if (v145 != v147) {
    free(v145);
  }
  return 0;
}

uint64_t sub_1CC41C5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)a1 = &unk_1F260CAB0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = *(void *)(a4 + 40);
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = (*(uint64_t (**)(void))(**(void **)(a4 + 16) + 104))(*(void *)(a4 + 16));
  *(void *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 8);
  *(unsigned char *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = a8;
  *(void *)(a1 + 80) = a1 + 112;
  *(void *)(a1 + 88) = a1 + 112;
  *(void *)(a1 + 96) = 4;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 144) = a1 + 176;
  *(void *)(a1 + 152) = a1 + 176;
  *(void *)(a1 + 160) = 4;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(*(void *)(a1 + 24) + 8) = a1;
  return a1;
}

uint64_t sub_1CC41C690(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 88);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  uint64_t v6 = (v3 - 1) & 0xFFFFFFC0;
  uint64_t v7 = v5;
  while (1)
  {
    uint64_t v9 = *v7++;
    uint64_t v8 = v9;
    unint64_t v10 = v6 == v4 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v3 : -1;
    unint64_t v11 = v10 & v8;
    if (v11) {
      break;
    }
    v4 += 64;
    if (v6 + 64 == v4) {
      return 0;
    }
  }
  unint64_t v12 = __clz(__rbit64(v11));
  uint64_t v13 = v12 + v4;
  if (v12 + v4 == -1) {
    return 0;
  }
  uint64_t v14 = 0;
  LODWORD(v15) = v13;
  do
  {
    if (*(_DWORD *)(a2 + 4 * v13) == -1)
    {
      *(_DWORD *)(a2 + 4 * v13) = a3;
      uint64_t v14 = (v14 + 1);
      int v3 = *(_DWORD *)(a1 + 88);
    }
    unsigned int v16 = v15 + 1;
    if (v15 + 1 == v3) {
      break;
    }
    unsigned int v17 = v16 >> 6;
    unsigned int v18 = v3 - 1;
    if (v16 >> 6 > (v3 - 1) >> 6) {
      break;
    }
    uint64_t v19 = 0;
    uint64_t v20 = v18 >> 6;
    int v22 = v16 & 0x3F;
    BOOL v21 = v22 == 0;
    unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
    uint64_t v24 = v21 ? -1 : ~v23;
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v18;
    unint64_t v26 = (unint64_t)v17 << 6;
    uint64_t v27 = v20 - v17;
    uint64_t v28 = &v5[v17];
    while (1)
    {
      uint64_t v29 = v19 ? -1 : v24;
      unint64_t v30 = v27 == v19 ? v25 : -1;
      unint64_t v31 = v29 & v30 & v28[v19];
      if (v31) {
        break;
      }
      v26 += 64;
      if (v27 + 1 == ++v19) {
        return v14;
      }
    }
    unint64_t v15 = __clz(__rbit64(v31)) + v26;
    uint64_t v13 = v15;
  }
  while (v15 != -1);
  return v14;
}

uint64_t sub_1CC41C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v64[4] = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a2 + 112);
  uint64_t v8 = (unsigned __int16 ***)(*(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v7 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v9 = *((unsigned __int16 *)*v8 + 12);
  uint64_t v10 = *(void *)(a1 + 296);
  if (*(_DWORD *)(a1 + 304) != *(_DWORD *)(v10 + 24 * *((unsigned __int16 *)*v8 + 12))) {
    llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 296), v8);
  }
  int v11 = *(unsigned __int8 *)(v10 + 24 * v9 + 8);
  uint64_t v12 = *(void *)(a1 + 864);
  v47[0] = &unk_1F260CAB0;
  v47[1] = a2;
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v48 = a4;
  uint64_t v49 = v13;
  int8x16_t v50 = vextq_s8(*(int8x16_t *)(a1 + 272), *(int8x16_t *)(a1 + 272), 8uLL);
  uint64_t v51 = (*(uint64_t (**)(void))(**(void **)(v12 + 16) + 104))(*(void *)(v12 + 16));
  uint64_t v52 = a1 + 856;
  unsigned int v53 = *(_DWORD *)(a4 + 8);
  char v54 = 0;
  uint64_t v55 = a1 + 568;
  unint64_t v56 = v60;
  uint64_t v57 = v60;
  uint64_t v58 = 4;
  int v59 = 0;
  v60[4] = v62;
  v60[5] = v62;
  v60[6] = 4;
  int v61 = 0;
  *(void *)(v49 + 8) = v47;
  sub_1CC47661C(*(void *)(a1 + 1344), (uint64_t)v47, dword_1EBCD2980);
  uint64_t v14 = *(void *)(a1 + 1336);
  uint64_t v15 = *(unsigned int *)(v14 + 288);
  if (v15)
  {
    uint64_t v16 = *(void *)(v14 + 280);
    uint64_t v17 = 40 * v15;
    do
    {
      if (sub_1CC47E344(*(void **)(a1 + 1336), v16, v11 != 0)) {
        sub_1CC47E3B0(*(void *)(a1 + 1344));
      }
      v16 += 40;
      v17 -= 40;
    }
    while (v17);
  }
  if (*(_DWORD *)(v48 + 8) != v53)
  {
    v63[0] = v64;
    v63[1] = (void *)0x800000000;
    sub_1CC4790F8(*(void *)(a1 + 1344), (uint64_t)v63);
    sub_1CC2E527C(*(void *)(a1 + 1184), v7, (int *)(*(void *)v48 + 4 * v53), *(unsigned int *)(v48 + 8) - (unint64_t)v53);
    int v18 = *(_DWORD *)(v48 + 8);
    uint64_t v19 = v18 - v53;
    if (v18 != v53)
    {
      uint64_t v21 = 0;
      int v22 = (uint64_t *)(a1 + 1248);
      do
      {
        uint64_t v23 = *(void *)(a1 + 280);
        int v24 = *(_DWORD *)(*(void *)v48 + 4 * (v53 + v21));
        uint64_t v25 = v24 & 0x7FFFFFFF;
        unint64_t v26 = (void *)(v23 + 408);
        uint64_t v27 = *(unsigned int *)(v23 + 416);
        if ((v24 & 0x7FFFFFFFu) >= v27)
        {
          sub_1CB9153B8((uint64_t)v26, v25 - v27 + 1, *(void *)(v23 + 424));
LABEL_42:
          operator new();
        }
        uint64_t v28 = *(void *)(*v26 + 8 * v25);
        if (!v28) {
          goto LABEL_42;
        }
        int v29 = *(_DWORD *)(v28 + 112);
        uint64_t v30 = v29 & 0x7FFFFFFF;
        uint64_t v31 = *(unsigned int *)(a1 + 1256);
        if ((v29 & 0x7FFFFFFFu) >= v31)
        {
          uint64_t v32 = v30 + 1;
          uint64_t v33 = *(void *)(a1 + 1264);
          int v34 = *(_DWORD *)(a1 + 1256);
          if (v30 >= *(_DWORD *)(a1 + 1260)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v35 = v32 - v31;
          if (v32 != v31)
          {
            uint64_t v36 = (void *)(*v22 + 8 * *(unsigned int *)(a1 + 1256));
            uint64_t v37 = ~v30 + v31;
            do
            {
              *v36++ = v33;
              BOOL v38 = __CFADD__(v37++, 1);
            }
            while (!v38);
            int v34 = *(_DWORD *)(a1 + 1256);
          }
          LODWORD(v31) = v34 + v35;
          *(_DWORD *)(a1 + 1256) = v34 + v35;
        }
        uint64_t v39 = *v22;
        if (!*(_DWORD *)(*v22 + 8 * v30) && !*((_DWORD *)v63[0] + v21))
        {
          int v40 = *(_DWORD *)(v28 + 112);
          uint64_t v41 = v40 & 0x7FFFFFFF;
          if ((v40 & 0x7FFFFFFFu) >= v31)
          {
            uint64_t v42 = *(void *)(a1 + 1264);
            int v43 = v31;
            if (v41 >= *(_DWORD *)(a1 + 1260)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v44 = v41 + 1 - v31;
            if (v44)
            {
              unint64_t v45 = (void *)(v39 + 8 * v31);
              uint64_t v46 = ~v41 + v31;
              do
              {
                *v45++ = v42;
                BOOL v38 = __CFADD__(v46++, 1);
              }
              while (!v38);
              int v43 = *(_DWORD *)(a1 + 1256);
              uint64_t v39 = *(void *)(a1 + 1248);
            }
            *(_DWORD *)(a1 + 1256) = v43 + v44;
          }
          *(_DWORD *)(v39 + 8 * v41) = 4;
        }
        ++v21;
      }
      while (v21 != v19);
    }
    if (llvm::RegAllocBase::VerifyEnabled) {
      llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 864), (llvm::Pass *)a1, "After splitting live range around basic blocks", 1);
    }
    if (v63[0] != v64) {
      free(v63[0]);
    }
  }
  sub_1CD516CC4(v47);
  return 0;
}

uint64_t sub_1CC41CCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v58[4] = *MEMORY[0x1E4F143B8];
  int v7 = (unsigned __int16 ***)(*(void *)(*(void *)(*(void *)(a1 + 264) + 24)
                                        + 16 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = *((unsigned __int16 *)*v7 + 12);
  uint64_t v9 = *(void *)(a1 + 296);
  if (*(_DWORD *)(a1 + 304) != *(_DWORD *)(v9 + 24 * *((unsigned __int16 *)*v7 + 12))) {
    llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 296), v7);
  }
  if (*(unsigned char *)(v9 + 24 * v8 + 8))
  {
    uint64_t v11 = *(void *)(a1 + 864);
    v41[0] = &unk_1F260CAB0;
    v41[1] = a2;
    uint64_t v12 = *(void *)(v11 + 40);
    uint64_t v42 = a4;
    uint64_t v43 = v12;
    int8x16_t v44 = vextq_s8(*(int8x16_t *)(a1 + 272), *(int8x16_t *)(a1 + 272), 8uLL);
    uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(v11 + 16) + 104))(*(void *)(v11 + 16));
    uint64_t v46 = a1 + 856;
    unsigned int v47 = *(_DWORD *)(a4 + 8);
    char v48 = 0;
    uint64_t v49 = a1 + 568;
    int8x16_t v50 = v54;
    uint64_t v51 = v54;
    uint64_t v52 = 4;
    int v53 = 0;
    v54[4] = v56;
    void v54[5] = v56;
    v54[6] = 4;
    int v55 = 0;
    *(void *)(v43 + 8) = v41;
    sub_1CC47661C(*(void *)(a1 + 1344), (uint64_t)v41, 1);
    uint64_t v13 = *(void *)(a1 + 1336);
    uint64_t v14 = *(unsigned int *)(v13 + 208);
    if (v14 >= 2)
    {
      uint64_t v15 = *(void **)(v13 + 200);
      uint64_t v16 = (unsigned __int16 ***)(*(uint64_t (**)(void, unsigned __int16 ***, void))(**(void **)(a1 + 880)
                                                                                                  + 256))(*(void *)(a1 + 880), v7, *(void *)(a1 + 864));
      int v40 = (uint64_t *)(a1 + 888);
      unsigned int v17 = *((unsigned __int16 *)*v16 + 12);
      uint64_t v18 = *(void *)(a1 + 888);
      if (*(_DWORD *)(a1 + 896) != *(_DWORD *)(v18 + 24 * *((unsigned __int16 *)*v16 + 12))) {
        llvm::RegisterClassInfo::compute(v40, v16);
      }
      int v19 = *(_DWORD *)(v18 + 24 * v17 + 4);
      uint64_t v20 = 8 * v14;
      do
      {
        if (*v15 < 8uLL) {
          goto LABEL_20;
        }
        unint64_t v21 = *(void *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 16);
        if (!v21) {
          goto LABEL_20;
        }
        if (**(_WORD **)(v21 + 16) != 19
          || (int v22 = *(_DWORD **)(v21 + 32), (*v22 & 0xFFF00) != 0)
          || (v22[8] & 0xFFF00) != 0)
        {
          RegClassConstraintEffectForVReg = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraintEffectForVReg(v21, *(_DWORD *)(a2 + 112), (uint64_t)v16, *(llvm::TargetInstrInfo **)(a1 + 872), *(llvm::TargetRegisterInfo **)(a1 + 880), 1);
          if (RegClassConstraintEffectForVReg)
          {
            unsigned int v24 = *((unsigned __int16 *)*RegClassConstraintEffectForVReg + 12);
            uint64_t v25 = *(void *)(a1 + 888);
            if (*(_DWORD *)(a1 + 896) != *(_DWORD *)(v25
                                                    + 24
                                                    * *((unsigned __int16 *)*RegClassConstraintEffectForVReg + 12)))
              llvm::RegisterClassInfo::compute(v40, RegClassConstraintEffectForVReg);
            int v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
          }
          else
          {
            int v26 = 0;
          }
          if (v19 != v26) {
LABEL_20:
          }
            sub_1CC477C68(*(void *)(a1 + 1344));
        }
        ++v15;
        v20 -= 8;
      }
      while (v20);
      if (*(_DWORD *)(v42 + 8) != v47)
      {
        v57[0] = v58;
        v57[1] = (void *)0x800000000;
        sub_1CC4790F8(*(void *)(a1 + 1344), (uint64_t)v57);
        sub_1CC2E527C(*(void *)(a1 + 1184), *(_DWORD *)(a2 + 112), (int *)(*(void *)v42 + 4 * v47), *(unsigned int *)(v42 + 8) - (unint64_t)v47);
        uint64_t v27 = *(unsigned int *)(v42 + 8);
        if (v47 != v27)
        {
          uint64_t v28 = (void *)(a1 + 1248);
          uint64_t v29 = *(void *)v42 + 4 * v27;
          uint64_t v30 = (_DWORD *)(*(void *)v42 + 4 * v47);
          unsigned int v31 = *(_DWORD *)(a1 + 1256);
          do
          {
            uint64_t v32 = *v30 & 0x7FFFFFFF;
            if ((*v30 & 0x7FFFFFFFu) >= v31)
            {
              uint64_t v33 = *(void *)(a1 + 1264);
              unsigned int v34 = v31;
              if (v32 >= *(_DWORD *)(a1 + 1260)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v35 = v32 + 1 - v31;
              if (v35)
              {
                uint64_t v36 = (void *)(*v28 + 8 * v31);
                uint64_t v37 = ~v32 + v31;
                do
                  *v36++ = v33;
                while (!__CFADD__(v37++, 1));
                unsigned int v34 = *(_DWORD *)(a1 + 1256);
              }
              unsigned int v31 = v34 + v35;
              *(_DWORD *)(a1 + 1256) = v34 + v35;
            }
            uint64_t v39 = (_DWORD *)(*v28 + 8 * v32);
            if (!*v39) {
              _DWORD *v39 = 4;
            }
            ++v30;
          }
          while (v30 != (_DWORD *)v29);
        }
        if (v57[0] != v58) {
          free(v57[0]);
        }
      }
    }
    sub_1CD516CC4(v41);
  }
  return 0;
}

uint64_t sub_1CC41D160(int8x16_t *a1, _DWORD *a2, unsigned __int16 **a3, uint64_t a4)
{
  v208[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[83].i64[1];
  if (*(_DWORD *)(v4 + 288) != 1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v4 + 208);
  if (v5 < 3) {
    return 0;
  }
  unint64_t v176 = *(uint64_t **)(v4 + 280);
  unsigned int v8 = *(void **)(v4 + 200);
  uint64_t v206 = (int *)v208;
  uint64_t v207 = 0x800000000;
  uint64_t v9 = a1[18].i64[0];
  int v10 = a2[28];
  if (*(_DWORD *)(v9 + 412) == v10)
  {
    int v11 = *(_DWORD *)(v9 + 272);
    if (*(_DWORD *)(v9 + 408) == v11) {
      goto LABEL_5;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(v9 + 272);
  }
  *(_DWORD *)(v9 + 412) = v10;
  *(_DWORD *)(v9 + 408) = v11;
  *(_DWORD *)(v9 + 480) = 0;
  *(_DWORD *)(v9 + 424) = 0;
  llvm::LiveIntervals::checkRegMaskInterference(*(void *)(v9 + 256), (uint64_t)a2, v9 + 416);
LABEL_5:
  uint64_t v12 = v5 - 1;
  uint64_t v13 = *v176;
  uint64_t v171 = a4;
  if (*(_DWORD *)(v9 + 480))
  {
    uint64_t v154 = a1[17].i64[1];
    unsigned int v155 = (unsigned int *)(*(void *)(v154 + 600) + 8 * *(unsigned int *)(v13 + 24));
    uint64_t v156 = *v155;
    unsigned int v157 = v155[1];
    uint64_t v158 = *(void *)(v154 + 440);
    uint64_t v159 = v158 + 8 * v156;
    if (v157)
    {
      uint64_t v160 = (void *)(v158 + 8 * v156);
      unint64_t v161 = v155[1];
      do
      {
        unint64_t v162 = v161 >> 1;
        uint64_t v163 = &v160[v161 >> 1];
        uint64_t v165 = *v163;
        uint64_t v164 = v163 + 1;
        v161 += ~(v161 >> 1);
        if (((v165 >> 1) & 3 | *(_DWORD *)((v165 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24) | 2u)) {
          uint64_t v160 = v164;
        }
        else {
          unint64_t v161 = v162;
        }
      }
      while (v161);
    }
    else
    {
      uint64_t v160 = (void *)(v158 + 8 * v156);
    }
    unint64_t v166 = ((unint64_t)v160 - v159) >> 3;
    if (v157 != v166)
    {
      uint64_t v167 = 0;
      while (1)
      {
        uint64_t v168 = v167 + 1;
        unint64_t v169 = v8[v167 + 1] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v170 = *(void *)(v159 + 8 * v166) & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v169 + 24) >= *(_DWORD *)(v170 + 24))
        {
          if (v168 == v12 && v169 == v170) {
            goto LABEL_218;
          }
          if (v207 >= (unint64_t)HIDWORD(v207)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v206[v207] = v167;
          LODWORD(v207) = v207 + 1;
          if (v166 == v157)
          {
LABEL_218:
            uint64_t v13 = *v176;
            break;
          }
          while (*(_DWORD *)((*(void *)(v159 + 8 * v166) & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v8[v168] & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            LODWORD(v166) = v166 + 1;
            if (v157 == v166) {
              goto LABEL_218;
            }
          }
        }
        if (v168 != v12)
        {
          ++v167;
          if (v166 != v157) {
            continue;
          }
        }
        goto LABEL_218;
      }
    }
  }
  uint64_t v14 = a1;
  uint64_t v15 = *(unsigned int *)(v13 + 24);
  uint64_t v16 = *(void *)(a1[71].i64[0] + 248);
  if (v16) {
    float v17 = (float)*(unint64_t *)(*(void *)(v16 + 8) + 16);
  }
  else {
    float v17 = 0.0;
  }
  unint64_t v18 = *(void *)(*(void *)(a1[73].i64[1] + 392) + 8 * v15);
  int v19 = *(_DWORD *)(a1[78].i64[0] + 8 * (a2[28] & 0x7FFFFFFF));
  uint64_t v20 = (float *)v205;
  uint64_t v203 = (float *)v205;
  uint64_t v204 = 0x800000000;
  uint64_t v21 = -(uint64_t)a3[1];
  int v175 = *((_DWORD *)a3 + 18);
  if (v175 == v21) {
    goto LABEL_190;
  }
  unsigned int v22 = 0;
  float v23 = (float)(1.0 / v17) * (float)v18;
  uint64_t v24 = -*((_DWORD *)a3 + 2);
  float v25 = 0.0;
  int v26 = v12;
  uint64_t v173 = a3;
  uint64_t v174 = v8;
  int v172 = v19;
  do
  {
    int v180 = v26;
    unsigned int v181 = v22;
    uint64_t v27 = &(*a3)[(void)a3[1] + (int)v24];
    int v178 = v21;
    uint64_t v179 = v24;
    if ((int)v21 >= 0) {
      uint64_t v27 = &a3[7][v24];
    }
    unint64_t v182 = *v27;
    uint64_t v28 = v14[83].i64[1];
    uint64_t v29 = *(void *)(v28 + 280);
    uint64_t v30 = *(void *)(v28 + 200);
    unint64_t v31 = (*(_DWORD *)(v28 + 208) - 1);
    if (*(unsigned char *)(v29 + 32)) {
      unint64_t v32 = *(void *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v32 = *(void *)(v29 + 8);
    }
    if (*(unsigned char *)(v29 + 33)) {
      unint64_t v33 = *(void *)(v29 + 16) & 0xFFFFFFFFFFFFFFF8 | 6;
    }
    else {
      unint64_t v33 = *(void *)(v29 + 16);
    }
    if (HIDWORD(v204) < v31)
    {
      LODWORD(v204) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v34 = v204;
    if (v204 >= v31) {
      uint64_t v35 = (*(_DWORD *)(v28 + 208) - 1);
    }
    else {
      uint64_t v35 = v204;
    }
    if (v35) {
      bzero(v20, 4 * v35);
    }
    if (v34 < v31) {
      bzero(&v20[v34], 4 * (v31 - v34));
    }
    LODWORD(v204) = v31;
    uint64_t v36 = v14[55].i64[0];
    if (v36) {
      uint64_t v37 = (void *)(v36 + 8);
    }
    else {
      uint64_t v37 = 0;
    }
    unint64_t v38 = *(unsigned int *)(*v37 + 24 * v182 + 16);
    uint64_t v39 = (_WORD *)(v37[6] + ((v38 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v40 = *v39 + (v38 & 0xF) * v182;
    unint64_t v185 = v32 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v184 = (v32 >> 1) & 3;
    unint64_t v41 = v33 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v42 = (v33 >> 1) & 3;
    do
    {
      uint64_t v43 = v14[18].i64[0];
      uint64_t v44 = *(void *)(v14[83].i64[1] + 40);
      unsigned int v45 = v40;
      uint64_t v46 = *(void *)(v43 + 400);
      unsigned int v47 = (llvm::LiveIntervalUnion::Query *)(v46 + 176 * v40);
      int v48 = *(_DWORD *)(v43 + 272);
      uint64_t v49 = (_DWORD *)(*(void *)(v43 + 392) + 216 * v45);
      if (*((_DWORD *)v47 + 42) != v48
        || *(void *)(v46 + 176 * v45 + 8) != v44
        || *(_DWORD **)v47 != v49
        || *v49 != *(_DWORD *)(v46 + 176 * v45 + 164))
      {
        *(void *)unsigned int v47 = v49;
        uint64_t v50 = v46 + 176 * v45;
        *(void *)(v50 + 8) = v44;
        *(_DWORD *)(v50 + 120) = 0;
        *(_WORD *)(v50 + 160) = 0;
        *(_DWORD *)(v50 + 164) = *v49;
        *((_DWORD *)v47 + 42) = v48;
      }
      if (llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v47, 1u))
      {
        uint64_t v51 = *(void *)(v14[18].i64[0] + 392);
        uint64_t v52 = v51 + 216 * v45;
        uint64_t v53 = v52 + 8;
        int v186 = (_DWORD *)(v52 + 8);
        uint64_t v187 = &v189;
        HIDWORD(v188) = 4;
        if (*(_DWORD *)(v52 + 200))
        {
          unint64_t v60 = *(unsigned int *)(v51 + 216 * v45 + 204);
          if (v60)
          {
            uint64_t v61 = 0;
            uint64_t v62 = v51 + 216 * v45 + 104;
            while (((*(void *)(v62 + 8 * v61) >> 1) & 3 | *(_DWORD *)((*(void *)(v62 + 8 * v61) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 24)) <= (*(_DWORD *)(v185 + 24) | v184))
            {
              if (v60 == ++v61)
              {
                unint64_t v63 = v60;
                goto LABEL_48;
              }
            }
            unint64_t v63 = v61;
          }
          else
          {
            unint64_t v60 = 0;
            unint64_t v63 = 0;
          }
LABEL_48:
          uint64_t v189 = v53 + 8;
          v190.i64[0] = v60 | (v63 << 32);
          LODWORD(v188) = 1;
          if (v63 < v60)
          {
            sub_1CC2D02F0((uint64_t)&v186, v32);
            uint64_t v59 = v188;
            if (!v188)
            {
LABEL_83:
              if (v187 != &v189) {
                free(v187);
              }
              goto LABEL_85;
            }
LABEL_50:
            unsigned int v64 = 0;
LABEL_51:
            uint64_t v65 = v187;
            unsigned int v66 = *((_DWORD *)v187 + 2);
            if (*((_DWORD *)v187 + 3) < v66)
            {
              unint64_t v67 = (char *)v187 + 16 * v59;
              uint64_t v68 = *((void *)v67 - 2);
              uint64_t v69 = *((unsigned int *)v67 - 1);
              if (((*(void *)(v68 + 16 * v69) >> 1) & 3 | *(_DWORD *)((*(void *)(v68 + 16 * v69) & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)(v41 + 24) | v42))
              {
                uint64_t v70 = v186;
                int v71 = v186[48];
                unsigned int v72 = *((_DWORD *)v67 - 1);
                uint64_t v73 = *((void *)v67 - 2);
                while (1)
                {
                  unsigned int v74 = v64 + 1;
                  unint64_t v75 = (void *)(v73 + 16 * v72);
                  if (!v71) {
                    unint64_t v75 = (void *)(v68 + 16 * v69);
                  }
                  if ((*(_DWORD *)((*(void *)(v30 + 8 * v74) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u) >= ((*v75 >> 1) & 3 | *(_DWORD *)((*v75 & 0xFFFFFFFFFFFFFFF8) + 24))) {
                    break;
                  }
                  if (!v71)
                  {
                    uint64_t v73 = *((void *)v67 - 2);
                    unsigned int v72 = *((_DWORD *)v67 - 1);
                  }
                  ++v64;
                  if (v31 == v74) {
                    goto LABEL_83;
                  }
                }
                if (v31 != v64)
                {
                  float v76 = *(float *)(*(void *)(v68 + 8 * v69 + 128) + 116);
                  uint64_t v77 = v203;
                  unsigned int v78 = *((_DWORD *)v67 - 1);
                  uint64_t v79 = *((void *)v67 - 2);
                  while (v31 != v64)
                  {
                    float v80 = v77[v64];
                    if (v80 < v76) {
                      float v80 = v76;
                    }
                    v77[v64++] = v80;
                    int v81 = (void *)(v79 + 16 * v78 + 8);
                    if (!v71)
                    {
                      unsigned int v78 = v69;
                      uint64_t v79 = v68;
                      int v81 = (void *)(v68 + 16 * v69 + 8);
                    }
                    if (*(_DWORD *)((*(void *)(v30 + 8 * v64) & 0xFFFFFFFFFFFFFFF8) + 24) >= ((*v81 >> 1) & 3 | *(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24)))
                    {
                      int v82 = v69 + 1;
                      *((_DWORD *)v67 - 1) = v69 + 1;
                      uint64_t v59 = v188;
                      if (v82 == v65[4 * v188 - 2])
                      {
                        uint64_t v83 = v70[48];
                        if (v83)
                        {
                          unsigned int v84 = 1;
                          uint64_t v85 = v83 + 1;
                          int v86 = &v65[4 * v83 - 2];
                          while (1)
                          {
                            uint64_t v87 = v86;
                            if (v85 == 2) {
                              break;
                            }
                            unsigned int v88 = v86[1];
                            int v89 = *v86 - 1;
                            --v85;
                            v86 -= 4;
                            if (v88 != v89)
                            {
                              unsigned int v84 = v85;
                              unsigned int v66 = *v87;
                              goto LABEL_78;
                            }
                          }
                          unsigned int v88 = v65[3];
LABEL_78:
                          v87[1] = v88 + 1;
                          if (v88 + 1 != v66)
                          {
                            uint64_t v90 = *(void *)(*((void *)v87 - 1) + 8 * (v88 + 1));
                            if (v83 != v84)
                            {
                              do
                              {
                                int v92 = (char *)v187 + 16 * v84;
                                *(void *)int v92 = v90 & 0xFFFFFFFFFFFFFFC0;
                                *((_DWORD *)v92 + 2) = (v90 & 0x3F) + 1;
                                *((_DWORD *)v92 + 3) = 0;
                                ++v84;
                                uint64_t v90 = *(void *)(v90 & 0xFFFFFFFFFFFFFFC0);
                              }
                              while (v83 != v84);
                              uint64_t v65 = v187;
                            }
                            int v91 = (unint64_t *)&v65[4 * v83];
                            *int v91 = v90 & 0xFFFFFFFFFFFFFFC0;
                            v91[1] = (v90 & 0x3F) + 1;
                            uint64_t v59 = v188;
                          }
                        }
                      }
                      --v64;
                      if (v59) {
                        goto LABEL_51;
                      }
                      goto LABEL_83;
                    }
                  }
                }
              }
            }
            goto LABEL_83;
          }
        }
        else
        {
          uint64_t v54 = *(unsigned int *)(v51 + 216 * v45 + 204);
          if (v54)
          {
            uint64_t v55 = 0;
            unint64_t v56 = (uint64_t *)(v51 + 216 * v45 + 16);
            while (1)
            {
              uint64_t v57 = *v56;
              v56 += 2;
              if (((v57 >> 1) & 3 | *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v185 + 24) | v184)) {
                break;
              }
              if (v54 == ++v55)
              {
                uint64_t v58 = v54;
                goto LABEL_40;
              }
            }
            uint64_t v58 = v55;
          }
          else
          {
            uint64_t v54 = 0;
            uint64_t v58 = 0;
          }
LABEL_40:
          uint64_t v189 = v53;
          v190.i64[0] = v54 | (v58 << 32);
          LODWORD(v188) = 1;
        }
        uint64_t v59 = 1;
        goto LABEL_50;
      }
LABEL_85:
      int v93 = (unsigned __int16)v39[1];
      ++v39;
      unsigned __int16 v40 = v93 + v45;
    }
    while (v93);
    uint64_t v94 = v14[55].i64[0];
    if (v94) {
      BOOL v95 = (void *)(v94 + 8);
    }
    else {
      BOOL v95 = 0;
    }
    unint64_t v96 = *(unsigned int *)(*v95 + 24 * v182 + 16);
    unsigned int v97 = (_WORD *)(v95[6] + ((v96 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v98 = *v97 + (v96 & 0xF) * v182;
    do
    {
      unsigned __int16 v99 = v98;
      uint64_t v100 = *(void *)(*(void *)(v14[17].i64[1] + 680) + 8 * v98);
      if (!v100) {
        operator new();
      }
      unsigned int v101 = *(_DWORD *)(v100 + 8);
      int v102 = *(void **)v100;
      if (v101)
      {
        uint64_t v103 = v102[3 * v101 - 2];
        unsigned int v104 = *(_DWORD *)(v185 + 24) | v184;
        unsigned int v105 = (v103 >> 1) & 3 | *(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24);
        int v106 = *(void **)v100;
        unint64_t v107 = *(unsigned int *)(v100 + 8);
        uint64_t v14 = a1;
        if (v104 < v105)
        {
          do
          {
            unint64_t v108 = v107 >> 1;
            uint64_t v109 = v106[3 * (v107 >> 1) + 1];
            LODWORD(v109) = (v109 >> 1) & 3 | *(_DWORD *)((v109 & 0xFFFFFFFFFFFFFFF8) + 24);
            v107 -= (v107 >> 1) + 1;
            BOOL v110 = v104 >= v109;
            if (v104 >= v109) {
              unint64_t v111 = v108 + 1;
            }
            else {
              unint64_t v111 = 0;
            }
            v106 += 3 * v111;
            if (!v110) {
              unint64_t v107 = v108;
            }
          }
          while (v107);
          goto LABEL_109;
        }
      }
      else
      {
        unsigned int v101 = 0;
        uint64_t v14 = a1;
      }
      int v106 = &v102[3 * v101];
LABEL_109:
      uint64_t v112 = &v102[3 * v101];
      if (v106 != v112)
      {
        unsigned int v113 = 0;
        unsigned int v114 = *(_DWORD *)(v41 + 24) | v42;
LABEL_111:
        unsigned int v115 = (*v106 >> 1) & 3 | *(_DWORD *)((*v106 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v115 < v114)
        {
          while (1)
          {
            unsigned int v116 = v113 + 1;
            if ((*(_DWORD *)((*(void *)(v30 + 8 * (v113 + 1)) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u) >= v115) {
              break;
            }
            ++v113;
            if (v31 == v116) {
              goto LABEL_120;
            }
          }
          if (v31 != v113)
          {
            int v117 = v203;
            while (v31 != v113)
            {
              v117[v113++] = INFINITY;
              if (*(_DWORD *)((*(void *)(v30 + 8 * v113) & 0xFFFFFFFFFFFFFFF8) + 24) >= ((v106[1] >> 1) & 3 | *(_DWORD *)((v106[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
              {
                v106 += 3;
                --v113;
                if (v106 != v112) {
                  goto LABEL_111;
                }
                break;
              }
            }
          }
        }
      }
LABEL_120:
      int v118 = (unsigned __int16)v97[1];
      ++v97;
      unsigned __int16 v98 = v118 + v99;
    }
    while (v118);
    uint64_t v119 = v14[18].i64[0];
    int v120 = a2[28];
    if (*(_DWORD *)(v119 + 412) != v120)
    {
      int v121 = *(_DWORD *)(v119 + 272);
      a3 = v173;
      int v122 = v174;
LABEL_179:
      *(_DWORD *)(v119 + 412) = v120;
      *(_DWORD *)(v119 + 408) = v121;
      *(_DWORD *)(v119 + 480) = 0;
      *(_DWORD *)(v119 + 424) = 0;
      llvm::LiveIntervals::checkRegMaskInterference(*(void *)(v119 + 256), (uint64_t)a2, v119 + 416);
      goto LABEL_125;
    }
    int v121 = *(_DWORD *)(v119 + 272);
    a3 = v173;
    int v122 = v174;
    if (*(_DWORD *)(v119 + 408) != v121) {
      goto LABEL_179;
    }
LABEL_125:
    if (!*(_DWORD *)(v119 + 480)
      || v182 && ((*(void *)(*(void *)(v119 + 416) + ((v182 >> 3) & 0x1FF8)) >> v182) & 1) != 0)
    {
      uint64_t v20 = v203;
LABEL_127:
      int v26 = v180;
      unsigned int v22 = v181;
      int v123 = v172;
      int v124 = v178;
      uint64_t v24 = v179;
      goto LABEL_128;
    }
    uint64_t v148 = v207;
    uint64_t v20 = v203;
    if (!v207) {
      goto LABEL_127;
    }
    unint64_t v149 = v206;
    int v26 = v180;
    unsigned int v22 = v181;
    int v123 = v172;
    int v124 = v178;
    uint64_t v24 = v179;
    do
    {
      int v150 = *v149++;
      v20[v150] = INFINITY;
      --v148;
    }
    while (v148);
LABEL_128:
    int v125 = 0;
    int v126 = *((unsigned __int8 *)v176 + 32);
    BOOL v127 = *((unsigned char *)v176 + 32) != 0;
    float v128 = *v20;
    BOOL v129 = 1;
    unsigned int v130 = 1;
    while (2)
    {
      int v131 = v127 + v129;
      unsigned int v132 = v131 + v130 - v125;
      BOOL v134 = (v132 < v12 || v123 < 3) && v128 < INFINITY;
      if (v134
        && (float v135 = (float)(v23 * (float)(v132 + 1))
                 / (float)(((v122[v130] >> 1) & 3 | *(_DWORD *)((v122[v130] & 0xFFFFFFFFFFFFFFF8) + 24))
                         + 16 * v131
                         - ((v122[v125] >> 1) & 3 | *(_DWORD *)((v122[v125] & 0xFFFFFFFFFFFFFFF8) + 24))
                         + 400),
            (float)(v135 * 0.97998) >= v128))
      {
        float v138 = v135 - v128;
        if (v138 > v25)
        {
          float v25 = v138 * 0.97998;
          unsigned int v22 = v130;
          int v26 = v125;
        }
      }
      else
      {
        int v136 = v125 + 1;
        if (v125 + 1 < v130)
        {
          if (v20[v125] >= v128)
          {
            float v128 = v20[v136];
            for (int i = v125 + 2; v130 != i; ++i)
            {
              if (v128 < v20[i]) {
                float v128 = v20[i];
              }
            }
          }
          int v125 = v136;
          goto LABEL_151;
        }
        float v128 = 0.0;
        ++v125;
      }
      if (v130 >= v12) {
        break;
      }
      float v139 = v20[v130++];
      if (v128 < v139) {
        float v128 = v139;
      }
LABEL_151:
      BOOL v127 = (v126 | v125) != 0;
      BOOL v129 = v130 != v12 || *((unsigned char *)v176 + 33) != 0;
      if (v126 | v125 || v129) {
        continue;
      }
      break;
    }
    int v141 = *((_DWORD *)a3 + 18);
    if (v141 <= v124)
    {
      int v142 = v124;
    }
    else
    {
      uint64_t v24 = (v124 + 1);
      int v142 = v124 + 1;
    }
    if ((v142 & 0x80000000) == 0 && v142 < v141)
    {
      int v143 = a3[7];
      int v144 = v143[v142];
      if ((v144 - 1) <= 0x3FFFFFFE)
      {
        uint64_t v145 = a3[1];
        do
        {
          if (v145)
          {
            uint64_t v146 = 2 * (void)v145;
            uint64_t v147 = *a3;
            while (*v147 != (unsigned __int16)v144)
            {
              ++v147;
              v146 -= 2;
              if (!v146)
              {
                uint64_t v147 = &(*a3)[(void)v145];
                break;
              }
            }
          }
          else
          {
            uint64_t v147 = *a3;
          }
          if (v145 == (unsigned __int16 *)(v147 - *a3)) {
            break;
          }
          uint64_t v24 = (v142 + 1);
          if (v24 == v141) {
            break;
          }
          int v144 = v143[v24];
          ++v142;
        }
        while ((v144 - 1) <= 0x3FFFFFFE);
      }
    }
    LODWORD(v21) = v24;
  }
  while (v175 != v24);
  if (v26 != v12)
  {
    uint64_t v152 = v14[54].i64[0];
    int v186 = &unk_1F260CAB0;
    uint64_t v187 = a2;
    uint64_t v153 = *(void *)(v152 + 40);
    uint64_t v188 = v171;
    uint64_t v189 = v153;
    int8x16_t v190 = vextq_s8(v14[17], v14[17], 8uLL);
    uint64_t v191 = (*(uint64_t (**)(void))(**(void **)(v152 + 16) + 104))(*(void *)(v152 + 16));
    uint64_t v192 = &v14[53].i8[8];
    int v193 = *(_DWORD *)(v171 + 8);
    char v194 = 0;
    unint64_t v195 = &v14[35].i8[8];
    uint64_t v196 = v200;
    uint64_t v197 = v200;
    uint64_t v198 = 4;
    int v199 = 0;
    v200[4] = v202;
    v200[5] = v202;
    v200[6] = 4;
    int v201 = 0;
    *(void *)(v189 + 8) = &v186;
    sub_1CC47661C(v14[84].i64[0], (uint64_t)&v186, 0);
    sub_1CC477C68(v14[84].i64[0]);
  }
  if (v20 != (float *)v205) {
    free(v20);
  }
LABEL_190:
  if (v206 != (int *)v208) {
    free(v206);
  }
  return 0;
}

uint64_t sub_1CC41E348(int8x16_t *a1, _DWORD *a2, unsigned __int16 **a3, uint64_t a4)
{
  if (*(int *)(a1[78].i64[0] + 8 * (a2[28] & 0x7FFFFFFF)) <= 3)
  {
    if (llvm::LiveIntervals::intervalIsInOneMBB(a1[17].i64[1], (uint64_t)a2))
    {
      llvm::NamedRegionTimer::NamedRegionTimer(&v14, "local_split", 0xBuLL, "Local Splitting", 0xFuLL, "regalloc", 8uLL, v8, (uint64_t)"Register Allocation", 19, llvm::TimePassesIsEnabled);
      uint64_t v11 = a1[83].i64[1];
      *(_DWORD *)(v11 + 208) = 0;
      *(_DWORD *)(v11 + 288) = 0;
      *(_DWORD *)(v11 + 688) = 0;
      *(_DWORD *)(v11 + 632) = 0;
      *(void *)(v11 + 40) = a2;
      sub_1CC475A9C(v11);
      sub_1CC41D160(a1, a2, a3, a4);
      if (!*(_DWORD *)(a4 + 8)) {
        sub_1CC41CCE8((uint64_t)a1, (uint64_t)a2, v12, a4);
      }
    }
    else
    {
      llvm::NamedRegionTimer::NamedRegionTimer(&v14, "global_split", 0xCuLL, "Global Splitting", 0x10uLL, "regalloc", 8uLL, v8, (uint64_t)"Register Allocation", 19, llvm::TimePassesIsEnabled);
      uint64_t v9 = a1[83].i64[1];
      *(_DWORD *)(v9 + 208) = 0;
      *(_DWORD *)(v9 + 288) = 0;
      *(_DWORD *)(v9 + 688) = 0;
      *(_DWORD *)(v9 + 632) = 0;
      *(void *)(v9 + 40) = a2;
      sub_1CC475A9C(v9);
      if (*(int *)(a1[78].i64[0] + 8 * (a2[28] & 0x7FFFFFFF)) > 2
        || (sub_1CC41AFD8((uint64_t)a1, (uint64_t)a2, a3, a4), !*(_DWORD *)(a4 + 8)))
      {
        sub_1CC41C7BC((uint64_t)a1, (uint64_t)a2, v10, a4);
      }
    }
    if (v14) {
      llvm::Timer::stopTimer(v14);
    }
  }
  return 0;
}

uint64_t sub_1CC41E500(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v63 = *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (*(_DWORD *)(a3 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(a1 + 880);
  if (v9) {
    uint64_t v10 = (void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = *(unsigned int *)(*v10 + 24 * a2 + 16);
  uint64_t v12 = (_WORD *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v13 = *v12 + (v11 & 0xF) * a2;
  for (int i = &unk_1EBCD2000; ; int i = (unsigned char *)&unk_1EBCD2000)
  {
    uint64_t v15 = *(void *)(a1 + 288);
    unsigned int v16 = v13;
    uint64_t v17 = *(void *)(v15 + 400);
    uint64_t v18 = v17 + 176 * v13;
    int v19 = *(_DWORD *)(v15 + 272);
    uint64_t v20 = (_DWORD *)(*(void *)(v15 + 392) + 216 * v16);
    if (*(_DWORD *)(v18 + 168) != v19
      || *(void *)(v17 + 176 * v16 + 8) != a3
      || *(_DWORD **)v18 != v20
      || *v20 != *(_DWORD *)(v17 + 176 * v16 + 164))
    {
      *(void *)uint64_t v18 = v20;
      uint64_t v21 = (unsigned char *)(v18 + 161);
      uint64_t v22 = v17 + 176 * v16;
      *(void *)(v22 + 8) = a3;
      *(_DWORD *)(v22 + 120) = 0;
      *(_WORD *)(v22 + 160) = 0;
      *(_DWORD *)(v22 + 164) = *v20;
      *(_DWORD *)(v18 + 168) = v19;
      unsigned int v23 = dword_1EBCD2678;
LABEL_7:
      llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v18, v23);
      unsigned int v24 = *(_DWORD *)(v18 + 120);
      unsigned int v23 = dword_1EBCD2678;
      goto LABEL_8;
    }
    uint64_t v21 = (unsigned char *)(v18 + 161);
    unsigned int v24 = *(_DWORD *)(v18 + 120);
    unsigned int v23 = dword_1EBCD2678;
    if (*(unsigned char *)(v18 + 161)) {
      BOOL v61 = v24 > dword_1EBCD2678;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61) {
      goto LABEL_7;
    }
LABEL_8:
    if (v24 >= v23 && i[1848] == 0) {
      break;
    }
    if (!*v21)
    {
      llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v18, 0xFFFFFFFF);
      unsigned int v24 = *(_DWORD *)(v18 + 120);
      if (!v24) {
        goto LABEL_91;
      }
LABEL_16:
      uint64_t v26 = *(void *)(v18 + 112);
      uint64_t v27 = v26 + 8 * v24;
      while (1)
      {
        uint64_t v29 = *(void *)(v27 - 8);
        v27 -= 8;
        uint64_t v28 = v29;
        uint64_t v30 = *(unsigned int *)(v29 + 112);
        if (*(_DWORD *)(*(void *)(a1 + 1248) + 8 * (v30 & 0x7FFFFFFF)) != 6) {
          goto LABEL_19;
        }
        uint64_t v31 = *(void *)(a1 + 264);
        uint64_t v32 = *(void *)(v31 + 24);
        if ((*(void *)(v32 + 16 * (v30 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != v63) {
          goto LABEL_19;
        }
        uint64_t v38 = *(unsigned int *)(a3 + 112);
        if ((v38 & 0x80000000) != 0) {
          uint64_t v39 = (int **)(v32 + 16 * (v38 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v39 = (int **)(*(void *)(v31 + 272) + 8 * v38);
        }
        unsigned __int16 v40 = *v39;
        if (!v40) {
          return 0;
        }
        int v41 = *v40;
        if ((*v40 & 0x1000000) == 0) {
          break;
        }
LABEL_80:
        if ((v41 & 0xF00000) == 0) {
          break;
        }
        if ((v30 & 0x80000000) != 0) {
          uint64_t v57 = (int **)(v32 + 16 * (v30 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v57 = (int **)(*(void *)(v31 + 272) + 8 * v30);
        }
        uint64_t v58 = *v57;
        if (v58)
        {
          int v59 = *v58;
          if ((*v58 & 0x1000000) != 0) {
            goto LABEL_89;
          }
          while (1)
          {
            uint64_t v58 = (int *)*((void *)v58 + 3);
            if (!v58) {
              break;
            }
            int v59 = *v58;
            if ((*v58 & 0x1000000) == 0) {
              break;
            }
LABEL_89:
            if ((v59 & 0xF00000) != 0) {
              return 0;
            }
          }
        }
LABEL_19:
        if (*(void *)(a5 + 96))
        {
          for (uint64_t j = *(uint64_t **)(a5 + 88); j; uint64_t j = (uint64_t *)*j)
          {
            unsigned int v34 = *((_DWORD *)j + 7);
            if (v30 >= v34)
            {
              if (v34 >= v30) {
                return 0;
              }
              ++j;
            }
          }
        }
        else
        {
          uint64_t v35 = *(unsigned int *)(a5 + 8);
          if (v35)
          {
            uint64_t v36 = *(_DWORD **)a5;
            uint64_t v37 = 4 * v35;
            while (*v36 != v30)
            {
              ++v36;
              v37 -= 4;
              if (!v37) {
                goto LABEL_37;
              }
            }
            if (v37) {
              return 0;
            }
          }
        }
LABEL_37:
        uint64_t v42 = *(void *)(a4 + 8);
        uint64_t v43 = *(unsigned int *)(a4 + 20);
        if (v42 != *(void *)a4)
        {
          unsigned int v47 = *(_DWORD *)(a4 + 16);
LABEL_48:
          if (3 * v47 <= 4 * ((int)v43 - *(_DWORD *)(a4 + 24)))
          {
            if (v47 >= 0x40) {
              v47 *= 2;
            }
            else {
              unsigned int v47 = 128;
            }
          }
          else if (v47 - v43 >= v47 >> 3)
          {
            goto LABEL_50;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v47);
          unsigned int v47 = *(_DWORD *)(a4 + 16);
          uint64_t v42 = *(void *)(a4 + 8);
LABEL_50:
          unsigned int v48 = v47 - 1;
          unsigned int v49 = (v47 - 1) & ((v28 >> 4) ^ (v28 >> 9));
          uint64_t v50 = (void *)(v42 + 8 * v49);
          uint64_t v51 = *v50;
          if (*v50 == -1)
          {
            uint64_t v52 = 0;
LABEL_62:
            if (v52) {
              unint64_t v56 = v52;
            }
            else {
              unint64_t v56 = v50;
            }
            if (*v56 != v28)
            {
              if (*v56 == -2) {
                --*(_DWORD *)(a4 + 24);
              }
              else {
                ++*(_DWORD *)(a4 + 20);
              }
              *unint64_t v56 = v28;
            }
          }
          else
          {
            uint64_t v52 = 0;
            int v53 = 1;
            while (v51 != v28)
            {
              if (v52) {
                BOOL v54 = 0;
              }
              else {
                BOOL v54 = v51 == -2;
              }
              if (v54) {
                uint64_t v52 = v50;
              }
              unsigned int v55 = v49 + v53++;
              unsigned int v49 = v55 & v48;
              uint64_t v50 = (void *)(v42 + 8 * (v55 & v48));
              uint64_t v51 = *v50;
              if (*v50 == -1) {
                goto LABEL_62;
              }
            }
          }
          goto LABEL_69;
        }
        if (v43)
        {
          uint64_t v44 = 0;
          uint64_t v45 = 8 * v43;
          uint64_t v46 = *(void **)(a4 + 8);
          while (*v46 != v28)
          {
            if (*v46 == -2) {
              uint64_t v44 = v46;
            }
            ++v46;
            v45 -= 8;
            if (!v45)
            {
              if (!v44) {
                goto LABEL_45;
              }
              *uint64_t v44 = v28;
              --*(_DWORD *)(a4 + 24);
              goto LABEL_69;
            }
          }
          goto LABEL_69;
        }
LABEL_45:
        unsigned int v47 = *(_DWORD *)(a4 + 16);
        if (v43 >= v47) {
          goto LABEL_48;
        }
        *(_DWORD *)(a4 + 20) = v43 + 1;
        *(void *)(v42 + 8 * v43) = v28;
LABEL_69:
        if (v27 == v26) {
          goto LABEL_91;
        }
      }
      unsigned __int16 v40 = (int *)*((void *)v40 + 3);
      if (!v40) {
        return 0;
      }
      int v41 = *v40;
      if ((*v40 & 0x1000000) == 0) {
        return 0;
      }
      goto LABEL_80;
    }
    if (v24) {
      goto LABEL_16;
    }
LABEL_91:
    int v60 = (unsigned __int16)v12[1];
    ++v12;
    unsigned __int16 v13 = v60 + v16;
    if (!v60) {
      return 1;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 1304) |= 2u;
  return result;
}

uint64_t sub_1CC41E990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  v92[7] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v90 = -1;
  sub_1CC2356A0(*(_DWORD *)(a2 + 112), *(void *)(a1 + 272), a1 + 296, *(void *)(a1 + 288), (uint64_t)v91);
  uint64_t v12 = sub_1CC419920(a1, (llvm::LiveRange *)a2, (uint64_t)v91, a3, a4);
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v15 = v12;
  int v16 = *(_DWORD *)(a1 + 1328);
  if (v16)
  {
    int v17 = *(_DWORD *)(a2 + 112);
    uint64_t v18 = *(void *)(a1 + 1312);
    int v19 = v16 - 1;
    unsigned int v20 = v19 & (37 * v17);
    uint64_t v21 = (int *)(v18 + 12 * v20);
    int v22 = *v21;
    if (*v21 == v17)
    {
LABEL_7:
      *uint64_t v21 = -2;
      *(int32x2_t *)(a1 + 1sub_1CC3F44F0((uint64_t)this + 320) = vadd_s32(*(int32x2_t *)(a1 + 1320), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v23 = 1;
      while (v22 != -1)
      {
        unsigned int v24 = v20 + v23++;
        unsigned int v20 = v24 & v19;
        uint64_t v21 = (int *)(v18 + 12 * v20);
        int v22 = *v21;
        if (*v21 == v17) {
          goto LABEL_7;
        }
      }
    }
  }
  if (*(void *)(a1 + 29288))
  {
    uint64_t v25 = *(void *)(a1 + 1296);
    uint64_t v26 = *(void *)(v25 + 64);
    if (*(void *)(v26 + 48) > (unint64_t)v12)
    {
      if (*(_WORD *)(*(void *)(v26 + 40) + 2 * v12))
      {
        if (!llvm::LiveRegMatrix::isPhysRegUsed(*(void *)(v25 + 24), v12) && !*(_DWORD *)(a3 + 8))
        {
          uint64_t v15 = sub_1CD56CDF4((void *)a1, a2, v91, v15, &v90, a3);
          if (!(v15 | *(_DWORD *)(a3 + 8)))
          {
LABEL_14:
            uint64_t v27 = (uint64_t *)(a1 + 1248);
            int v28 = *(_DWORD *)(*(void *)(a1 + 1248) + 8 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF));
            if (v28 == 2)
            {
LABEL_15:
              int v29 = *(_DWORD *)(a3 + 8);
              sub_1CC41E348((int8x16_t *)a1, (_DWORD *)a2, v91, a3);
              if (*(_DWORD *)(a3 + 8) == v29)
              {
                if (*(float *)(a2 + 116) != INFINITY)
                {
LABEL_17:
                  if (byte_1EBD05B60
                    || (*(unsigned int (**)(void, void, uint64_t))(**(void **)(a1 + 880) + 544))(*(void *)(a1 + 880), *(void *)(a1 + 864), a2))
                  {
                    int v31 = *(_DWORD *)(a2 + 112);
                    uint64_t v32 = v31 & 0x7FFFFFFF;
                    uint64_t v33 = *v27;
                    if (*(int *)(*v27 + 8 * v32) <= 4)
                    {
                      uint64_t v34 = *(unsigned int *)(a1 + 1256);
                      if (v32 >= v34)
                      {
                        uint64_t v35 = *(void *)(a1 + 1264);
                        uint64_t v36 = v32 + 1 - v34;
                        if (v32 >= *(_DWORD *)(a1 + 1260)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        int v37 = *(_DWORD *)(a1 + 1256);
                        if (v36)
                        {
                          uint64_t v38 = (void *)(v33 + 8 * *(unsigned int *)(a1 + 1256));
                          uint64_t v39 = ~v32 + v34;
                          do
                          {
                            *v38++ = v35;
                            BOOL v40 = __CFADD__(v39++, 1);
                          }
                          while (!v40);
                          int v37 = *(_DWORD *)(a1 + 1256);
                          uint64_t v33 = *(void *)(a1 + 1248);
                        }
                        *(_DWORD *)(a1 + 1256) = v37 + v36;
                        int v31 = *(_DWORD *)(a2 + 112);
                      }
                      *(_DWORD *)(v33 + 8 * v32) = 5;
LABEL_48:
                      unsigned int v62 = *(_DWORD *)(a3 + 8);
                      if (v62 >= *(_DWORD *)(a3 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v15 = 0;
                      *(_DWORD *)(*(void *)a3 + 4 * v62) = v31;
                      ++*(_DWORD *)(a3 + 8);
                      goto LABEL_78;
                    }
                  }
                  llvm::NamedRegionTimer::NamedRegionTimer(&v89, "spill", 5uLL, "Spiller", 7uLL, "regalloc", 8uLL, v30, (uint64_t)"Register Allocation", 19, llvm::TimePassesIsEnabled);
                  sub_1CC41C5C0((uint64_t)v86, a2, a3, *(void *)(a1 + 864), *(void *)(a1 + 280), *(void *)(a1 + 272), a1 + 856, a1 + 568);
                  uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 24))(v73, v86);
                  uint64_t v74 = *(unsigned int *)(a3 + 8);
                  if (v74)
                  {
                    float v76 = *(_DWORD **)a3;
                    uint64_t v77 = *(void *)a3 + 4 * v74;
                    unsigned int v78 = *(_DWORD *)(a1 + 1256);
                    do
                    {
                      uint64_t v79 = *v76 & 0x7FFFFFFF;
                      if ((*v76 & 0x7FFFFFFFu) >= v78)
                      {
                        uint64_t v80 = *(void *)(a1 + 1264);
                        unsigned int v81 = v78;
                        if (v79 >= *(_DWORD *)(a1 + 1260)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        uint64_t v82 = v79 + 1 - v78;
                        if (v82)
                        {
                          uint64_t v83 = (void *)(*v27 + 8 * v78);
                          uint64_t v84 = ~v79 + v78;
                          do
                          {
                            *v83++ = v80;
                            BOOL v40 = __CFADD__(v84++, 1);
                          }
                          while (!v40);
                          unsigned int v81 = *(_DWORD *)(a1 + 1256);
                        }
                        unsigned int v78 = v81 + v82;
                        *(_DWORD *)(a1 + 1256) = v81 + v82;
                      }
                      uint64_t v85 = (_DWORD *)(*v27 + 8 * v79);
                      if (!*v85) {
                        *uint64_t v85 = 6;
                      }
                      ++v76;
                    }
                    while (v76 != (_DWORD *)v77);
                  }
                  sub_1CC2E527C(*(void *)(a1 + 1184), *(_DWORD *)(a2 + 112), (int *)(*(void *)v87 + 4 * v88), *(unsigned int *)(v87 + 8) - (unint64_t)v88);
                  if (llvm::RegAllocBase::VerifyEnabled) {
                    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 864), (llvm::Pass *)a1, "After spilling", 1);
                  }
                  sub_1CD516CC4(v86);
                  if (v89) {
                    llvm::Timer::stopTimer(v89);
                  }
LABEL_77:
                  uint64_t v15 = 0;
                  goto LABEL_78;
                }
LABEL_71:
                uint64_t v15 = sub_1CD56C730(a1, (llvm::LiveInterval *)a2, (uint64_t)v91, a3, a4, a5, a6);
                goto LABEL_78;
              }
              int v46 = *(_DWORD *)(a1 + 1328);
              if (!v46) {
                goto LABEL_77;
              }
              int v47 = *(_DWORD *)(a2 + 112);
              uint64_t v48 = *(void *)(a1 + 1312);
              int v49 = v46 - 1;
              unsigned int v50 = v49 & (37 * v47);
              uint64_t v51 = (int *)(v48 + 12 * v50);
              int v52 = *v51;
              if (*v51 != v47)
              {
                int v53 = 1;
                while (v52 != -1)
                {
                  unsigned int v54 = v50 + v53++;
                  unsigned int v50 = v54 & v49;
                  uint64_t v51 = (int *)(v48 + 12 * v50);
                  int v52 = *v51;
                  if (*v51 == v47) {
                    goto LABEL_37;
                  }
                }
                goto LABEL_77;
              }
LABEL_37:
              uint64_t v15 = 0;
LABEL_64:
              int *v51 = -2;
              *(int32x2_t *)(a1 + 1sub_1CC3F44F0((uint64_t)this + 320) = vadd_s32(*(int32x2_t *)(a1 + 1320), (int32x2_t)0x1FFFFFFFFLL);
              goto LABEL_78;
            }
            uint64_t v41 = sub_1CC41A034(a1, a2, (uint64_t)v91, a3, v90, a4, v13, v14);
            if (!v41)
            {
              if (v28 <= 1)
              {
                int v31 = *(_DWORD *)(a2 + 112);
                uint64_t v55 = v31 & 0x7FFFFFFF;
                uint64_t v56 = *(unsigned int *)(a1 + 1256);
                if ((v31 & 0x7FFFFFFFu) >= v56)
                {
                  uint64_t v57 = *(void *)(a1 + 1264);
                  uint64_t v58 = v55 + 1 - v56;
                  if (v55 >= *(_DWORD *)(a1 + 1260)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v59 = *(_DWORD *)(a1 + 1256);
                  if (v58)
                  {
                    int v60 = (void *)(*v27 + 8 * *(unsigned int *)(a1 + 1256));
                    uint64_t v61 = ~v55 + v56;
                    do
                    {
                      *v60++ = v57;
                      BOOL v40 = __CFADD__(v61++, 1);
                    }
                    while (!v40);
                    int v59 = *(_DWORD *)(a1 + 1256);
                  }
                  *(_DWORD *)(a1 + 1256) = v59 + v58;
                  int v31 = *(_DWORD *)(a2 + 112);
                }
                *(_DWORD *)(*v27 + 8 * v55) = 2;
                goto LABEL_48;
              }
              if (v28 > 3)
              {
                if (v28 <= 5 && *(float *)(a2 + 116) != INFINITY) {
                  goto LABEL_17;
                }
                goto LABEL_71;
              }
              goto LABEL_15;
            }
            uint64_t v15 = v41;
            int v42 = *(_DWORD *)(a2 + 112);
            uint64_t v43 = *(void *)(*(void *)(a1 + 264) + 208);
            uint64_t v44 = v43 + 40 * (v42 & 0x7FFFFFFF);
            if (*(_DWORD *)(v44 + 16)) {
              int v45 = **(_DWORD **)(v44 + 8);
            }
            else {
              int v45 = 0;
            }
            if (*(_DWORD *)(v43 + 40 * (v42 & 0x7FFFFFFF))) {
              int v63 = 0;
            }
            else {
              int v63 = v45;
            }
            if (v63) {
              BOOL v64 = v63 == v41;
            }
            else {
              BOOL v64 = 1;
            }
            if (!v64)
            {
              v86[0] = a2;
              sub_1CC419FA4(a1 + 29296, v86);
              int v42 = *(_DWORD *)(a2 + 112);
            }
            int v65 = *(_DWORD *)(a1 + 1328);
            if (v65)
            {
              uint64_t v66 = *(void *)(a1 + 1312);
              int v67 = v65 - 1;
              unsigned int v68 = v67 & (37 * v42);
              uint64_t v51 = (int *)(v66 + 12 * v68);
              int v69 = *v51;
              if (*v51 == v42) {
                goto LABEL_64;
              }
              int v70 = 1;
              while (v69 != -1)
              {
                unsigned int v71 = v68 + v70++;
                unsigned int v68 = v71 & v67;
                uint64_t v51 = (int *)(v66 + 12 * v68);
                int v69 = *v51;
                if (*v51 == v42) {
                  goto LABEL_64;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_78:
  if ((void *)v91[0] != v92) {
    free(v91[0]);
  }
  return v15;
}

uint64_t sub_1CC41F124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::future<void> v16[2] = *(void **)MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 1304) = 0;
  uint64_t v4 = ****(void ****)(a1 + 864);
  v13[0] = v14;
  v13[1] = (void *)0x1000000000;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  uint64_t v5 = sub_1CC41E990(a1, a2, a3, (uint64_t)v13, (uint64_t)v11, 0);
  if (v5 == -1 && *(unsigned char *)(a1 + 1304))
  {
    int v7 = *(unsigned char *)(a1 + 1304) & 3;
    switch(v7)
    {
      case 3:
        uint64_t v8 = "register allocation failed: maximum interference and depth for recoloring reached. Use -fexhaustive-registe"
             "r-search to skip cutoffs";
        break;
      case 2:
        uint64_t v8 = "register allocation failed: maximum interference for recoloring reached. Use -fexhaustive-register-search to skip cutoffs";
        break;
      case 1:
        uint64_t v8 = "register allocation failed: maximum depth for recoloring reached. Use -fexhaustive-register-search to skip cutoffs";
        break;
      default:
        goto LABEL_2;
    }
    uint64_t v9 = v8;
    __int16 v10 = 259;
    llvm::LLVMContext::emitError(v4, (uint64_t)&v9);
  }
LABEL_2:
  if (v11[0] != v12) {
    free(v11[0]);
  }
  sub_1CB833A08((uint64_t)&v15, v16[0]);
  if (v13[0] != v14) {
    free(v13[0]);
  }
  return v5;
}

uint64_t sub_1CC41F298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CC41F124(a1 - 248, a2, a3);
}

uint64_t sub_1CC41F2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_1CC41F2D0(a1 + 29296, &v3);
}

uint64_t sub_1CC41F2D0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1CC4228EC((_DWORD *)a1, a2);
  if (v4)
  {
    uint64_t v6 = *(void **)(a1 + 72);
    uint64_t v7 = *(unsigned int *)(a1 + 80);
    uint64_t v8 = &v6[v7];
    if (v7)
    {
      uint64_t v9 = 8 * v7;
      while (*v6 != *a2)
      {
        ++v6;
        v9 -= 8;
        if (!v9)
        {
          uint64_t v6 = v8;
          break;
        }
      }
    }
    if (v8 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v8 - (char *)(v6 + 1));
      LODWORD(v7) = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v7 - 1;
  }
  return v4;
}

uint64_t sub_1CC41F360(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_1CC41F2D0(a1 + 29048, &v3);
}

void *sub_1CC41F390(void *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result[33];
  if ((a2 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 272) + 8 * a2);
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return result;
  }
  while ((*(_DWORD *)v5 & 0x80000000) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
LABEL_6:
  if (**(_WORD **)(v6 + 16) != 19
    || (uint64_t v8 = *(_DWORD **)(v6 + 32), (*v8 & 0xFFF00) != 0)
    || (v8[8] & 0xFFF00) != 0
    || (uint64_t v9 = v8[1], v9 == a2) && (uint64_t v9 = v8[9], v9 == a2))
  {
    uint64_t v7 = v6;
    goto LABEL_8;
  }
  uint64_t v10 = v9;
  if ((unint64_t)(v9 - 1) >= 0x3FFFFFFF) {
    uint64_t v10 = *(unsigned int *)(*(void *)(result[34] + 280) + 4 * (v9 & 0x7FFFFFFF));
  }
  uint64_t v11 = *(void *)(result[142] + 248);
  if (v11)
  {
    int v12 = *(_DWORD *)(v11 + 176);
    if (v12)
    {
      uint64_t v13 = *(void *)(v6 + 24);
      uint64_t v14 = *(void *)(v11 + 160);
      unsigned int v15 = v12 - 1;
      uint64_t v16 = (v12 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      uint64_t v17 = *(void *)(v14 + 16 * v16);
      if (v17 == v13)
      {
LABEL_21:
        uint64_t v18 = *(unsigned int *)(v14 + 16 * v16 + 8);
        if (v18 != 0xFFFFFFFFLL)
        {
          uint64_t v19 = *(void *)(*(void *)(v11 + 8) + 24 * v18 + 16);
          goto LABEL_23;
        }
      }
      else
      {
        int v22 = 1;
        while (v17 != -4096)
        {
          int v23 = v16 + v22++;
          uint64_t v16 = v23 & v15;
          uint64_t v17 = *(void *)(v14 + 16 * v16);
          if (v17 == v13) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  uint64_t v19 = 0;
LABEL_23:
  unint64_t v20 = *(unsigned int *)(a3 + 8);
  if (v20 >= *(unsigned int *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v21 = (void *)(*(void *)a3 + 16 * v20);
  *uint64_t v21 = v19;
  v21[1] = v9 | (v10 << 32);
  ++*(_DWORD *)(a3 + 8);
  uint64_t v7 = *(void *)(v5 + 8);
LABEL_8:
  while (1)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return result;
    }
    if ((*(_DWORD *)v5 & 0x80000000) == 0)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6 != v7) {
        goto LABEL_6;
      }
    }
  }
}

void sub_1CC41F584(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  v77[2] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v5 = a3 + 48;
  uint64_t v6 = *(void *)(a3 + 56);
  if (v6 != a3 + 48)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    int v57 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = *(void *)(*(void *)(a2 + 864) + 56);
    int v62 = 0;
    uint64_t v60 = 0;
    while (1)
    {
      if (**(_WORD **)(v6 + 16) == 19)
      {
        uint64_t v11 = *(void *)(v6 + 32);
        if (!*(unsigned char *)v11
          && !*(unsigned char *)(v11 + 32)
          && (*(_DWORD *)(v11 + 4) & 0x80000000) != 0
          && (*(_DWORD *)(v11 + 36) & 0x80000000) != 0)
        {
          *((_DWORD *)v4 + 5) = ++v7;
        }
      }
      else
      {
        unint64_t v75 = v77;
        uint64_t v76 = 0x200000000;
        if ((*(unsigned int (**)(void, uint64_t, int *))(**(void **)(a2 + 872) + 64))(*(void *)(a2 + 872), v6, &v62)&& *(unsigned char *)(*(void *)(v10 + 8) + 40 * (*(_DWORD *)(v10 + 32) + v62) + 18))
        {
          *(_DWORD *)uint64_t v4 = ++HIDWORD(v60);
          goto LABEL_71;
        }
        if ((*(unsigned int (**)(void, uint64_t, int *))(**(void **)(a2 + 872) + 96))(*(void *)(a2 + 872), v6, &v62)&& *(unsigned char *)(*(void *)(v10 + 8) + 40 * (*(_DWORD *)(v10 + 32) + v62) + 18))
        {
          *((_DWORD *)v4 + 3) = ++v9;
          goto LABEL_71;
        }
        if ((*(unsigned int (**)(void, uint64_t, void **))(**(void **)(a2 + 872) + 88))(*(void *)(a2 + 872), v6, &v75)&& v76)
        {
          int v12 = (void **)v75;
          uint64_t v13 = 8 * v76;
          do
          {
            if (*(unsigned char *)(*(void *)(v10 + 8)
                          + 40
                          * (*(_DWORD *)((**v12 & ((uint64_t)(**v12 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                                     + 0x10)
                                         + *(_DWORD *)(v10 + 32))
                          + 18))
            {
              unsigned int v16 = **(unsigned __int16 **)(v6 + 16);
              BOOL v17 = v16 > 0x1F;
              unsigned int v18 = (1 << v16) & 0x8A000000;
              BOOL v19 = v17 || v18 == 0;
              if (v19)
              {
                LODWORD(v60) = v76 + v60;
                *((_DWORD *)v4 + 1) = v60;
                goto LABEL_71;
              }
              unsigned int v54 = v9;
              unsigned int v55 = v8;
              unsigned int v56 = v7;
              unint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 872) + 496))(*(void *)(a2 + 872), v6);
              uint64_t v21 = v71;
              int v69 = v71;
              uint64_t v70 = 0x1000000000;
              int v22 = &v73;
              uint64_t v73 = 0;
              uint64_t v74 = 0;
              unsigned int v72 = &v73;
              int v63 = v65;
              uint64_t v64 = 0x1000000000;
              int v67 = 0;
              uint64_t v68 = 0;
              uint64_t v66 = &v67;
              uint64_t v23 = *(unsigned int *)(v6 + 40);
              if (v23)
              {
                int v53 = v4;
                uint64_t v24 = 0;
                unint64_t v25 = 0;
                unint64_t v59 = HIDWORD(v20);
                unint64_t v26 = v20;
                do
                {
                  uint64_t v27 = *(void *)(v6 + 32);
                  if (*(unsigned char *)(v27 + v24) == 5)
                  {
                    unsigned int v28 = *(_DWORD *)(v27 + v24 + 16);
                    if (*(unsigned char *)(*(void *)(v10 + 8) + 40 * (*(_DWORD *)(v10 + 32) + v28) + 18))
                    {
                      if (v25 < v26 || v25 >= v59)
                      {
                        unsigned int v61 = v28;
                        int v29 = &v63;
                      }
                      else
                      {
                        unsigned int v61 = v28;
                        int v29 = &v69;
                      }
                      sub_1CB8F4B90((uint64_t)v29, &v61);
                    }
                  }
                  ++v25;
                  v24 += 32;
                }
                while (v23 != v25);
                uint64_t v21 = v69;
                uint64_t v30 = v74;
                int v22 = v72;
                uint64_t v31 = v70;
                uint64_t v4 = v53;
              }
              else
              {
                uint64_t v31 = 0;
                uint64_t v30 = 0;
              }
              if (v30) {
                uint64_t v32 = v22;
              }
              else {
                uint64_t v32 = v21;
              }
              uint64_t v33 = &v21[4 * v31];
              while (1)
              {
                if (v30)
                {
                  if (v32 == &v73) {
                    goto LABEL_61;
                  }
                }
                else if (v32 == (void *)v33)
                {
LABEL_61:
                  if (v74) {
                    int v37 = v74;
                  }
                  else {
                    int v37 = v70;
                  }
                  int v38 = v60 + v37;
                  int v39 = v64;
                  BOOL v40 = v67;
                  if (v68) {
                    int v39 = v68;
                  }
                  LODWORD(v60) = v38;
                  *((_DWORD *)v4 + 1) = v38;
                  *((_DWORD *)v4 + 2) = v57 + v39;
                  v57 += v39;
                  sub_1CB833A08((uint64_t)&v66, v40);
                  if (v63 != v65) {
                    free(v63);
                  }
                  sub_1CB833A08((uint64_t)&v72, v73);
                  unsigned int v8 = v55;
                  unsigned int v7 = v56;
                  unsigned int v9 = v54;
                  if (v69 != v71) {
                    free(v69);
                  }
                  goto LABEL_71;
                }
                unsigned int v61 = 0;
                uint64_t v34 = (unsigned int *)v32 + 7;
                if (!v30) {
                  uint64_t v34 = (unsigned int *)v32;
                }
                unsigned int v61 = *v34;
                sub_1CC34EC20((uint64_t)&v63, &v61);
                if (v30)
                {
                  uint64_t v35 = (void *)v32[1];
                  uint64_t v36 = v32;
                  if (v35)
                  {
                    do
                    {
                      uint64_t v32 = v35;
                      uint64_t v35 = (void *)*v35;
                    }
                    while (v35);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v32 = (void *)v36[2];
                      BOOL v19 = *v32 == (void)v36;
                      uint64_t v36 = v32;
                    }
                    while (!v19);
                  }
                }
                else
                {
                  uint64_t v32 = (void *)((char *)v32 + 4);
                }
              }
            }
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
        LODWORD(v76) = 0;
        if ((*(unsigned int (**)(void, uint64_t, void **))(**(void **)(a2 + 872) + 120))(*(void *)(a2 + 872), v6, &v75)&& v76)
        {
          uint64_t v14 = (void **)v75;
          uint64_t v15 = 8 * v76;
          while (!*(unsigned char *)(*(void *)(v10 + 8)
                            + 40
                            * (*(_DWORD *)((**v14 & ((uint64_t)(**v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                                       + 0x10)
                                           + *(_DWORD *)(v10 + 32))
                            + 18))
          {
            ++v14;
            v15 -= 8;
            if (!v15) {
              goto LABEL_71;
            }
          }
          v8 += v76;
          *((_DWORD *)v4 + 4) = v8;
        }
LABEL_71:
        if (v75 != v77) {
          free(v75);
        }
        if (!v6)
        {
LABEL_77:
          while ((*(_WORD *)(v6 + 44) & 8) != 0)
            uint64_t v6 = *(void *)(v6 + 8);
          goto LABEL_78;
        }
      }
      if ((*(unsigned char *)v6 & 4) == 0) {
        goto LABEL_77;
      }
LABEL_78:
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == v5) {
        goto LABEL_81;
      }
    }
  }
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  uint64_t v60 = 0;
LABEL_81:
  uint64_t v41 = *(void *)(*(void *)(a2 + 1136) + 248);
  if (v41)
  {
    int v42 = *(_DWORD *)(v41 + 176);
    float v43 = 0.0;
    if (v42)
    {
      uint64_t v44 = *(void *)(v41 + 160);
      unsigned int v45 = v42 - 1;
      uint64_t v46 = (v42 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v47 = *(void *)(v44 + 16 * v46);
      if (v47 == a3)
      {
LABEL_84:
        uint64_t v48 = *(unsigned int *)(v44 + 16 * v46 + 8);
        if (v48 != 0xFFFFFFFFLL) {
          float v43 = (float)*(unint64_t *)(*(void *)(v41 + 8) + 24 * v48 + 16);
        }
      }
      else
      {
        int v51 = 1;
        while (v47 != -4096)
        {
          int v52 = v46 + v51++;
          uint64_t v46 = v52 & v45;
          uint64_t v47 = *(void *)(v44 + 16 * v46);
          if (v47 == a3) {
            goto LABEL_84;
          }
        }
      }
    }
    float v49 = (float)*(unint64_t *)(*(void *)(v41 + 8) + 16);
  }
  else
  {
    float v43 = 0.0;
    float v49 = 0.0;
  }
  float v50 = v43 * (float)(1.0 / v49);
  *((float *)v4 + 6) = v50 * (float)HIDWORD(v60);
  *((float *)v4 + 7) = v50 * (float)v60;
  *((float *)v4 + 8) = v50 * (float)v9;
  *((float *)v4 + 9) = v50 * (float)v8;
  *((float *)v4 + 10) = v50 * (float)v7;
}

void sub_1CC41FC48(uint64_t a1, uint64_t a2, llvm::MachineLoop *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v6 = (uint64_t *)*((void *)a3 + 1);
  unsigned int v7 = (uint64_t *)*((void *)a3 + 2);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    sub_1CC41FC48(v24, a2, v8);
    sub_1CD56D3A4(a1, (uint64_t)v24);
  }
  unsigned int v9 = (uint64_t *)*((void *)a3 + 4);
  uint64_t v10 = (uint64_t *)*((void *)a3 + 5);
  if (v10 != v9)
  {
    while (1)
    {
      uint64_t v11 = *v9;
      uint64_t v12 = *(void *)(a2 + 1152);
      int v13 = *(_DWORD *)(v12 + 264);
      if (!v13) {
        goto LABEL_11;
      }
      uint64_t v14 = *(void *)(v12 + 248);
      unsigned int v15 = v13 - 1;
      uint64_t v16 = ((v11 >> 4) ^ (v11 >> 9)) & (v13 - 1);
      uint64_t v17 = *(void *)(v14 + 16 * v16);
      if (v11 != v17) {
        break;
      }
LABEL_10:
      unint64_t v20 = *(llvm::MachineLoop **)(v14 + 16 * v16 + 8);
LABEL_12:
      if (v20 == a3)
      {
        sub_1CC41F584(v23, a2, v11);
        sub_1CD56D3A4(a1, (uint64_t)v23);
      }
      if (++v9 == v10) {
        goto LABEL_15;
      }
    }
    int v18 = 1;
    while (v17 != -4096)
    {
      int v19 = v16 + v18++;
      uint64_t v16 = v19 & v15;
      uint64_t v17 = *(void *)(v14 + 16 * v16);
      if (v11 == v17) {
        goto LABEL_10;
      }
    }
LABEL_11:
    unint64_t v20 = 0;
    goto LABEL_12;
  }
LABEL_15:
  *(int32x2_t *)v21.i8 = vrev64_s32(*(int32x2_t *)a1);
  v21.i64[1] = *(void *)(a1 + 12);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v21, v21))) & 1) != 0 || *(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 20))
  {
    uint64_t v22 = ******(void ******)(a2 + 1160);
    if (*(void *)(v22 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v22 + 72) + 48))(*(void *)(v22 + 72)))
    {
      llvm::MachineLoop::getStartLoc(a3);
    }
  }
}

void sub_1CC41FFF8(uint64_t a1, const llvm::MachineFunction *a2)
{
  v73[46] = *(void **)MEMORY[0x1E4F143B8];
  *(void *)(a1 + 864) = a2;
  *(void *)(a1 + 880) = (*(uint64_t (**)(void *))(**((void **)a2 + 2) + 176))(*((void **)a2 + 2));
  *(void *)(a1 + 872) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 104))(*(void *)(*(void *)(a1 + 864) + 16));
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(a1 + 888), a2);
  if (llvm::RegAllocBase::VerifyEnabled) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 864), (llvm::Pass *)a1, "Before greedy register allocator", 1);
  }
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_6:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::VirtRegMap::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (llvm::VirtRegMap *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::VirtRegMap::ID);
  unsigned int v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_11:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::LiveIntervals::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  int v13 = (llvm::LiveIntervals *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::LiveIntervals::ID);
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_16:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::LiveRegMatrix::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_16;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  int v18 = (llvm::LiveRegMatrix *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::LiveRegMatrix::ID);
  llvm::RegAllocBase::init((llvm::RegAllocBase *)(a1 + 248), v8, v13, v18);
  int v19 = *(uint64_t **)(a1 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_21:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::SlotIndexes::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_21;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  *(void *)(a1 + 1128) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::SlotIndexes::ID);
  uint64_t v23 = *(uint64_t **)(a1 + 8);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  if (v24 == v25)
  {
LABEL_78:
    uint64_t v26 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v24 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v24 += 16;
      if (v24 == v25) {
        goto LABEL_78;
      }
    }
    uint64_t v26 = *(void *)(v24 + 8);
  }
  *(void *)(a1 + 1136) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v26 + 96))(v26, &llvm::MachineBlockFrequencyInfo::ID);
  uint64_t v27 = *(uint64_t **)(a1 + 8);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  if (v28 == v29)
  {
LABEL_29:
    uint64_t v30 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v28 != &llvm::MachineDominatorTree::ID)
    {
      v28 += 16;
      if (v28 == v29) {
        goto LABEL_29;
      }
    }
    uint64_t v30 = *(void *)(v28 + 8);
  }
  *(void *)(a1 + 1144) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v30 + 96))(v30, &llvm::MachineDominatorTree::ID);
  uint64_t v31 = *(uint64_t **)(a1 + 8);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  if (v32 == v33)
  {
LABEL_34:
    uint64_t v34 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v32 != &llvm::MachineOptimizationRemarkEmitterPass::ID)
    {
      v32 += 16;
      if (v32 == v33) {
        goto LABEL_34;
      }
    }
    uint64_t v34 = *(void *)(v32 + 8);
  }
  *(void *)(a1 + 1160) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v34 + 96))(v34, &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
  uint64_t v35 = *(uint64_t **)(a1 + 8);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  if (v36 == v37)
  {
LABEL_39:
    uint64_t v38 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v36 != &llvm::MachineLoopInfo::ID)
    {
      v36 += 16;
      if (v36 == v37) {
        goto LABEL_39;
      }
    }
    uint64_t v38 = *(void *)(v36 + 8);
  }
  *(void *)(a1 + 1152) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v38 + 96))(v38, &llvm::MachineLoopInfo::ID);
  int v39 = *(uint64_t **)(a1 + 8);
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  if (v40 == v41)
  {
LABEL_44:
    uint64_t v42 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v40 != &llvm::EdgeBundles::ID)
    {
      v40 += 16;
      if (v40 == v41) {
        goto LABEL_44;
      }
    }
    uint64_t v42 = *(void *)(v40 + 8);
  }
  *(void *)(a1 + 1168) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v42 + 96))(v42, &llvm::EdgeBundles::ID);
  float v43 = *(uint64_t **)(a1 + 8);
  uint64_t v44 = *v43;
  uint64_t v45 = v43[1];
  if (v44 == v45)
  {
LABEL_49:
    uint64_t v46 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v44 != &llvm::SpillPlacement::ID)
    {
      v44 += 16;
      if (v44 == v45) {
        goto LABEL_49;
      }
    }
    uint64_t v46 = *(void *)(v44 + 8);
  }
  *(void *)(a1 + 1176) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v46 + 96))(v46, &llvm::SpillPlacement::ID);
  uint64_t v47 = *(uint64_t **)(a1 + 8);
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  if (v48 == v49)
  {
LABEL_54:
    uint64_t v50 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v48 != &unk_1EA61EEDF)
    {
      v48 += 16;
      if (v48 == v49) {
        goto LABEL_54;
      }
    }
    uint64_t v50 = *(void *)(v48 + 8);
  }
  *(void *)(a1 + 1184) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v50 + 96))(v50, &unk_1EA61EEDF);
  int v51 = *(uint64_t **)(a1 + 8);
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  if (v52 == v53)
  {
LABEL_59:
    uint64_t v54 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v52 != &llvm::AAResultsWrapperPass::ID)
    {
      v52 += 16;
      if (v52 == v53) {
        goto LABEL_59;
      }
    }
    uint64_t v54 = *(void *)(v52 + 8);
  }
  *(void *)(a1 + 1192) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v54 + 96))(v54, &llvm::AAResultsWrapperPass::ID)+ 32);
  unsigned int v55 = dword_1EBCD27F8;
  unsigned int v56 = (*(uint64_t (**)(void))(**(void **)(a1 + 880) + 368))();
  if (v55 <= v56) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = v55;
  }
  *(void *)(a1 + 29288) = v57;
  if (v57)
  {
    uint64_t v70 = (void *)(a1 + 29288);
    uint64_t v71 = *(void *)(*(void *)(a1 + 1136) + 248);
    if (v71 && (unint64_t v72 = *(void *)(*(void *)(v71 + 8) + 16)) != 0)
    {
      if (v72 >> 14)
      {
        if (HIDWORD(v72))
        {
          *uint64_t v70 = (v72 >> 14) * v57;
        }
        else
        {
          llvm::BranchProbability::BranchProbability(v73, 0x4000uLL, v72);
          llvm::BlockFrequency::operator/=((unint64_t *)(a1 + 29288), (int)v73[0]);
        }
      }
      else
      {
        llvm::BranchProbability::BranchProbability(v73, v72, 0x4000u);
        llvm::BlockFrequency::operator*=((uint64_t *)(a1 + 29288), (int)v73[0]);
      }
    }
    else
    {
      *uint64_t v70 = 0;
    }
  }
  uint64_t v58 = *(void *)(a1 + 880);
  int v59 = (*(uint64_t (**)(uint64_t, void))(*(void *)v58 + 232))(v58, *(void *)(a1 + 864));
  uint64_t v60 = *(unsigned int *)(v58 + 16);
  *(void *)(a1 + 29448) = **(void **)(v58 + 216) + (v60 * v59);
  *(void *)(a1 + 29456) = v60;
  if (*(unsigned char *)(a1 + 1288))
  {
    unsigned int v61 = *(void **)(a1 + 1248);
    if (v61 != (void *)(a1 + 1264)) {
      free(v61);
    }
  }
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1248) = a1 + 1264;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1256) = 0;
  *(_DWORD *)(a1 + 1280) = 1;
  *(unsigned char *)(a1 + 1288) = 1;
  int v62 = *(uint64_t **)(a1 + 8);
  uint64_t v63 = *v62;
  uint64_t v64 = v62[1];
  if (v63 == v64)
  {
LABEL_71:
    uint64_t v65 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v63 != &llvm::RegAllocEvictionAdvisorAnalysis::ID)
    {
      v63 += 16;
      if (v63 == v64) {
        goto LABEL_71;
      }
    }
    uint64_t v65 = *(void *)(v63 + 8);
  }
  uint64_t v66 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v65 + 96))(v65, &llvm::RegAllocEvictionAdvisorAnalysis::ID);
  (*(void (**)(void **__return_ptr))(*(void *)v66 + 152))(v73);
  int v67 = v73[0];
  v73[0] = 0;
  uint64_t v68 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1296) = v67;
  if (v68)
  {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
    int v69 = v73[0];
    v73[0] = 0;
    if (v69) {
      (*(void (**)(void *))(*(void *)v69 + 8))(v69);
    }
  }
  operator new();
}

const char *sub_1CC4217E4()
{
  return "Greedy Register Allocator";
}

double sub_1CC4217F4@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 2;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC42181C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC421844(uint64_t a1)
{
  return *(void *)(a1 + 1200);
}

uint64_t sub_1CC42184C(uint64_t a1)
{
  return *(void *)(a1 + 952);
}

void sub_1CC421854(void *a1)
{
  *a1 = &unk_1F2611CE8;
  unsigned int v2 = a1 + 21;
  uint64_t v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

int *sub_1CC42191C(uint64_t a1, int *a2)
{
  unsigned int v9 = 0;
  char v4 = sub_1CC4219FC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  double result = v9;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC421A88(a1, v7);
    unsigned int v9 = 0;
    sub_1CC4219FC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    double result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  int v8 = *a2;
  result[1] = 0;
  result[2] = 0;
  *double result = v8;
  return result;
}

uint64_t sub_1CC4219FC(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    int v6 = (_DWORD *)(a1 + 12 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      int v8 = 0;
      int v9 = 1;
      while (v7 != -1)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -2;
        }
        if (v10) {
          int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (_DWORD *)(a1 + 12 * (v11 & v4));
        int v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

_DWORD *sub_1CC421A88(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 12 * v10;
      do
      {
        *uint64_t result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 12 * v3;
      uint64_t v13 = v4;
      do
      {
        int v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          int v18 = 0;
          sub_1CC4219FC(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          _DWORD *v18 = *(_DWORD *)v13;
          *(void *)(v15 + 1) = *(void *)(v13 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 12;
        v12 -= 12;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      *uint64_t result = -1;
      result += 3;
      v17 -= 12;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CC421BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 48;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 288) + 392) + 16 * *(unsigned int *)(a2 + 24));
  if (a2 + 48 != (*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v5 = llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug(a2, *(void *)(a2 + 56), 1);
    if (v2 != v5)
    {
      uint64_t v6 = *(void *)(*(void *)a1 + 288);
      __int16 v7 = *(_WORD *)(v5 + 44);
      unint64_t v8 = v5;
      if ((v7 & 0xC) != 0)
      {
        unint64_t v8 = v5;
        if ((v7 & 4) != 0)
        {
          unint64_t v8 = v5;
          do
            unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v8 + 44) & 4) != 0);
        }
        if ((v7 & 8) != 0)
        {
          do
            uint64_t v5 = *(void *)(v5 + 8);
          while ((*(_WORD *)(v5 + 44) & 8) != 0);
        }
      }
      uint64_t v9 = *(void *)(v5 + 8);
      if (v8 != v9)
      {
        while (1)
        {
          unsigned int v10 = **(unsigned __int16 **)(v8 + 16);
          BOOL v11 = v10 > 0x17;
          int v12 = (1 << v10) & 0x83E000;
          if (v11 || v12 == 0) {
            break;
          }
          unint64_t v8 = *(void *)(v8 + 8);
          if (v8 == v9)
          {
            unint64_t v8 = *(void *)(v5 + 8);
            break;
          }
        }
      }
      uint64_t v14 = *(void *)(v6 + 368);
      uint64_t v15 = *(unsigned int *)(v6 + 384);
      if (v15)
      {
        LODWORD(v16) = ((v8 >> 4) ^ (v8 >> 9)) & (v15 - 1);
        uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
        uint64_t v18 = *v17;
        if (v8 == *v17) {
          return v17[1];
        }
        int v20 = 1;
        while (v18 != -4096)
        {
          int v21 = v16 + v20++;
          uint64_t v16 = v21 & (v15 - 1);
          uint64_t v18 = *(void *)(v14 + 16 * v16);
          if (v8 == v18)
          {
            uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
            return v17[1];
          }
        }
      }
      uint64_t v17 = (uint64_t *)(v14 + 16 * v15);
      return v17[1];
    }
  }
  return v3;
}

uint64_t sub_1CC421D48(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1CD56DAFC((void **)a1, v3, *((_DWORD *)v5 + 7), (_DWORD *)v5 + 7);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          __int16 v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          __int16 v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t sub_1CC421DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2, a3) & 1) != 0)
  {
    return 1;
  }
  __int16 v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v7(a1, a2, a3);
}

void sub_1CC421EC8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2611A50;
  uint64_t v2 = (void *)(a1 + 248);
  *(void *)(a1 + 248) = &unk_1F2611B50;
  *(void *)(a1 + 856) = &unk_1F2611BA8;
  uint64_t v3 = (unsigned char *)(a1 + 29296);
  uint64_t v4 = *(void **)(a1 + 29368);
  if (v4 != (void *)(a1 + 29384)) {
    free(v4);
  }
  if ((*v3 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 29304), 8);
  }
  uint64_t v5 = *(void **)(a1 + 29144);
  if (v5 != (void *)(a1 + 29160)) {
    free(v5);
  }
  sub_1CD56DFC8((void **)(a1 + 24520));
  uint64_t v6 = *(void **)(a1 + 24440);
  if (v6 != (void *)(a1 + 24456)) {
    free(v6);
  }
  sub_1CC422174(a1 + 1352);
  uint64_t v7 = *(void *)(a1 + 1344);
  *(void *)(a1 + 1344) = 0;
  if (v7)
  {
    uint64_t v8 = sub_1CC4229C4(v7);
    MEMORY[0x1D25D9CE0](v8, 0x10F0C4069DD8601);
  }
  uint64_t v9 = *(void **)(a1 + 1336);
  *(void *)(a1 + 1336) = 0;
  if (v9)
  {
    unsigned int v10 = sub_1CC422940(v9);
    MEMORY[0x1D25D9CE0](v10, 0x10E0C405BCED39ELL);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1312), 4);
  uint64_t v11 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1296) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (*(unsigned char *)(a1 + 1288))
  {
    int v12 = *(void **)(a1 + 1248);
    if (v12 != (void *)(a1 + 1264)) {
      free(v12);
    }
    *(unsigned char *)(a1 + 1288) = 0;
  }
  uint64_t v13 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void **)(a1 + 1208);
  if (v14)
  {
    *(void *)(a1 + 1216) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
  }
  sub_1CD50C1C0((uint64_t *)(a1 + 888));
  sub_1CD569AD4(v2);

  sub_1CBA0E6AC((llvm::Pass *)a1);
}

void *sub_1CC422100(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2 != a1 + 14) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3 != a1 + 5) {
    free(v3);
  }
  a1[2] = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    --*(_DWORD *)(v4 + 8);
  }
  a1[1] = 0;
  return a1;
}

uint64_t sub_1CC422174(uint64_t a1)
{
  free(*(void **)(a1 + 24));
  uint64_t v2 = a1 + 23088;
  do
  {
    uint64_t v3 = *(void **)(v2 - 208);
    if (v3 != (void *)(v2 - 192)) {
      free(v3);
    }
    uint64_t v4 = v2 - 720;
    uint64_t v6 = (void **)(v2 - 672);
    uint64_t v5 = *(char **)(v2 - 672);
    uint64_t v7 = *(unsigned int *)(v2 - 664);
    if (v7)
    {
      uint64_t v8 = 112 * v7;
      do
      {
        uint64_t v9 = *(char **)&v5[v8 - 104];
        if (&v5[v8 - 88] != v9)
        {
          int v12 = v6;
          uint64_t v13 = v5;
          uint64_t v11 = v8;
          free(v9);
          uint64_t v8 = v11;
          uint64_t v6 = v12;
          uint64_t v5 = v13;
        }
        v8 -= 112;
      }
      while (v8);
      uint64_t v5 = (char *)*v6;
    }
    if (v5 != (char *)(v2 - 656)) {
      free(v5);
    }
    v2 -= 720;
  }
  while (v4 != a1 + 48);
  return a1;
}

uint64_t sub_1CC422244(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    unsigned int v7 = *v6;
    unsigned int v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      unsigned int v9 = *(_DWORD *)(a2 - 8);
      unsigned int v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v12 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          uint64_t v11 = (unsigned int *)(result + 8 * v5);
          unsigned int v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9) {
              break;
            }
            unsigned int v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10) {
              break;
            }
          }
          else
          {
            unsigned int v14 = v11[1];
          }
          *uint64_t v6 = v13;
          v6[1] = v14;
          uint64_t v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v11 = v6;
LABEL_12:
      *uint64_t v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

unsigned int *sub_1CC4222EC(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unsigned int v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

void *sub_1CC422380@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v14 = 0;
  uint64_t result = (void *)sub_1CC42243C(a1, a2, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 8;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    uint64_t result = sub_1CC4224EC((_DWORD *)a1, (uint64_t)a2, a2, v14);
    uint64_t v7 = result;
    *uint64_t result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 8;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CC42243C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_16;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC4224EC(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC4225B0((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC42243C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CC4225B0(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CC42272C(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v11 = *(void *)(a1 + i);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v9++ = v11;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CC42272C(a1, v14, v9);
}

uint64_t sub_1CC42272C(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v10 = 0;
      uint64_t result = sub_1CC42243C((uint64_t)v5, a2, &v10);
      void *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC4227EC(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      uint64_t v5 = 9 * v2;
      uint64_t v6 = 144 * a2 - 16 * v5;
      uint64_t v7 = (void *)(*(void *)result + 16 * v5 - 144);
      int v8 = a2;
      uint64_t v9 = result;
      do
      {
        sub_1CC422100(v7);
        LODWORD(a2) = v8;
        uint64_t result = v9;
        v7 -= 18;
        v6 += 144;
      }
      while (v6);
    }
    else
    {
      if (*(unsigned int *)(result + 12) < a2) {
        sub_1CD56E960();
      }
      if (v2 != a2)
      {
        uint64_t v3 = *(void *)result + 144 * a2;
        uint64_t v4 = *(void *)result + 144 * v2;
        do
        {
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 96) = 0uLL;
          *(_OWORD *)(v4 + 128) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *(_OWORD *)(v4 + 112) = 0uLL;
          *(void *)(v4 + 24) = v4 + 40;
          *(_DWORD *)(v4 + 36) = 6;
          *(void *)(v4 + 96) = v4 + 112;
          *(_DWORD *)(v4 + 108) = 8;
          v4 += 144;
        }
        while (v4 != v3);
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1CC4228EC(_DWORD *a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CC42243C((uint64_t)a1, a2, &v5);
  if (result)
  {
    *uint64_t v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

void *sub_1CC422940(void *a1)
{
  unint64_t v2 = (void *)a1[78];
  if (v2 != a1 + 80) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[35];
  if (v3 != a1 + 37) {
    free(v3);
  }
  int v4 = (void *)a1[25];
  if (v4 != a1 + 27) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5 != a1 + 9) {
    free(v5);
  }
  return a1;
}

uint64_t sub_1CC4229C4(uint64_t a1)
{
  for (uint64_t i = 1128; i != -280; i -= 704)
    sub_1CC2F56BC(a1 + i);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 400), 8);
  if (*(_DWORD *)(a1 + 384))
  {
    sub_1CC422A74(a1 + 200, (void (*)(void *, void, uint64_t))llvm::IntervalMap<llvm::SlotIndex,unsigned int,9u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode, 0);
    *(_OWORD *)(a1 + 372) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
  }
  *(_DWORD *)(a1 + 388) = 0;
  *(void *)(a1 + 96) = 0;
  sub_1CBFFBA64(a1 + 104);
  return a1;
}

void sub_1CC422A74(uint64_t a1, void (*a2)(void *, void, uint64_t), uint64_t a3)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 184);
  if (v3)
  {
    uint64_t v22 = v24;
    uint64_t v23 = 0x400000000;
    int v19 = v21;
    uint64_t v20 = 0x400000000;
    unsigned int v7 = *(_DWORD *)(a1 + 188);
    if (v7)
    {
      unsigned int v7 = 0;
      unsigned int v8 = 0;
      do
      {
        if (v7 >= HIDWORD(v23)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v22 + v7) = *(void *)(a1 + 8 + 8 * v8);
        unsigned int v7 = v23 + 1;
        LODWORD(v23) = v23 + 1;
        ++v8;
      }
      while (v8 != *(_DWORD *)(a1 + 188));
      int v3 = *(_DWORD *)(a1 + 184);
    }
    uint64_t v9 = (v3 - 1);
    if (v3 != 1)
    {
      do
      {
        uint64_t v18 = v23;
        if (v23)
        {
          uint64_t v13 = 0;
          uint64_t v17 = (void *)(a1 + (a3 >> 1));
          do
          {
            uint64_t v14 = 0;
            unsigned int v15 = v20;
            uint64_t v16 = 8 * (*((void *)v22 + v13) & 0x3FLL) + 8;
            do
            {
              if (v15 >= HIDWORD(v20)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v19 + v15) = *(void *)((*((void *)v22 + v13) & 0xFFFFFFFFFFFFFFC0) + v14);
              unsigned int v15 = v20 + 1;
              LODWORD(v20) = v20 + 1;
              v14 += 8;
            }
            while (v16 != v14);
            if (a3) {
              (*(void (**)(void *, void, uint64_t))(*v17 + a2))(v17, *((void *)v22 + v13), v9);
            }
            else {
              a2(v17, *((void *)v22 + v13), v9);
            }
            ++v13;
          }
          while (v13 != v18);
        }
        LODWORD(v23) = 0;
        sub_1CC2E99B4(&v22, &v19);
        uint64_t v9 = (v9 - 1);
      }
      while (v9);
      unsigned int v7 = v23;
    }
    if (v7)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v7;
      uint64_t v12 = (void *)(a1 + (a3 >> 1));
      do
      {
        if (a3) {
          (*(void (**)(void *, void, void))(*v12 + a2))(v12, *(void *)((char *)v22 + v10), 0);
        }
        else {
          a2(v12, *(void *)((char *)v22 + v10), 0);
        }
        v10 += 8;
      }
      while (v11 != v10);
    }
    if (v19 != v21) {
      free(v19);
    }
    if (v22 != v24) {
      free(v22);
    }
  }
}

uint64_t llvm::IntervalMap<llvm::SlotIndex,unsigned int,9u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unint64_t **)(result + 192);
  *(void *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *unint64_t v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

void *sub_1CC422D18(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  char v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 9)
  {
    uint64_t v6 = result + 1;
    *uint64_t result = 1;
    unsigned int v7 = result + 9;
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1D25D9CD0](result[1], 8);
      goto LABEL_12;
    }
    *uint64_t result = 0;
    if (!v5) {
      return result;
    }
    uint64_t v6 = (void *)result[1];
    unsigned int v7 = &v6[v5];
    do
LABEL_18:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
LABEL_12:

  return sub_1CD54202C(v1, v5);
}

uint64_t sub_1CC422DF0()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v4 = 1;
  *(void *)&long long v3 = "Spill mode for splitting live ranges";
  *((void *)&v3 + 1) = 36;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "default";
  v6[1] = 7;
  int v7 = 0;
  unsigned int v8 = "Default";
  uint64_t v9 = 7;
  uint64_t v10 = "size";
  uint64_t v11 = 4;
  int v12 = 1;
  uint64_t v13 = "Optimize for size";
  uint64_t v14 = 17;
  unsigned int v15 = "speed";
  uint64_t v16 = 5;
  int v17 = 2;
  uint64_t v18 = "Optimize for speed";
  uint64_t v19 = 18;
  v5.n128_u64[1] = 0x400000003;
  int v1 = 2;
  unsigned int v2 = &v1;
  sub_1CD56E048(&v4, &v3, (uint64_t)&v5, &v2);
  if ((void *)v5.n128_u64[0] != v6) {
    free((void *)v5.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD56C100, &qword_1EBCD2900, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Last chance recoloring max depth";
  v5.n128_u64[1] = 32;
  int v4 = 5;
  *(void *)&long long v3 = &v4;
  sub_1CD413D64((uint64_t)&unk_1EBCD2538, "lcr-max-depth", &v2, &v5, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD2538, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Last chance recoloring maximum number of considered interference at a time";
  v5.n128_u64[1] = 74;
  int v4 = 8;
  *(void *)&long long v3 = &v4;
  sub_1CD56E52C(&v2, (long long *)&v5, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD25F8, &dword_1CB82C000);
  LODWORD(v3) = 0;
  v5.n128_u64[0] = (unint64_t)"Exhaustive Search for registers bypassing the depth and interference cutoffs of las"
                                     "t chance recoloring";
  v5.n128_u64[1] = 102;
  LODWORD(v2) = 1;
  sub_1CD56E654(&v3, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD26B8, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Instead of spilling a variable right away, defer the actual code insertion to the e"
                                     "nd of the allocation. That way the allocator might still find a suitable coloring f"
                                     "or this variable because of other evicted variables.";
  v5.n128_u64[1] = 218;
  LOBYTE(v4) = 0;
  *(void *)&long long v3 = &v4;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBD05AE0, "enable-deferred-spilling", &v2, &v5, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD05AE0, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"Cost for first time use of callee-saved register.";
  v5.n128_u64[1] = 49;
  LODWORD(v2) = 0;
  *(void *)&long long v3 = &v2;
  int v4 = 1;
  sub_1CD50BCD4((uint64_t)&unk_1EBCD2778, "regalloc-csr-first-time-cost", &v5, (int **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD2778, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"growRegion() does not scale with the number of BB edges, so limit its budget and ba"
                                     "il out once we reach the limit.";
  v5.n128_u64[1] = 114;
  LODWORD(v2) = 10000;
  *(void *)&long long v3 = &v2;
  int v4 = 1;
  sub_1CD56E7B8((long long *)&v5, (int **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC418A80, &qword_1EBCD2838, &dword_1CB82C000);
  qword_1EBCD2508 = 0;
  unk_1EBCD2510 = "greedy";
  qword_1EBCD2518 = 6;
  unk_1EBCD2520 = "greedy register allocator";
  qword_1EBCD2528 = 25;
  unk_1EBCD2530 = llvm::createGreedyRegisterAllocator;
  sub_1CC410D90(&llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry, &qword_1EBCD2508);
  return __cxa_atexit((void (*)(void *))sub_1CC4108A4, &qword_1EBCD2508, &dword_1CB82C000);
}

void llvm::createDefaultPBQPRegisterAllocator(llvm *this, char *a2)
{
}

uint64_t llvm::PBQP::RegAlloc::PBQPRAGraph::dump(llvm::PBQP::RegAlloc::PBQPRAGraph *this, llvm::raw_ostream *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v4 = -1171354717 * ((*((void *)this + 17) - *((void *)this + 16)) >> 3);
  LODWORD(v28) = 0;
  HIDWORD(v28) = v4;
  __n128 v5 = (char *)this + 152;
  unint64_t v29 = (unint64_t)this + 152;
  LODWORD(v28) = sub_1CC42DBA4((uint64_t)&v28, 0);
  unsigned int v6 = v28;
  uint64_t v26 = v28;
  uint64_t v27 = v5;
  LODWORD(v28) = -1171354717 * ((*((void *)this + 17) - *((void *)this + 16)) >> 3);
  HIDWORD(v28) = v28;
  unint64_t v29 = (unint64_t)v5;
  int v7 = sub_1CC42DBA4((uint64_t)&v28, v28);
  if (v6 != v7)
  {
    int v9 = v7;
    do
    {
      uint64_t v10 = *(float ***)(*((void *)this + 16) + 88 * v6);
      uint64_t v28 = (void (**)(void **))&unk_1F2611E60;
      unint64_t v29 = v6;
      uint64_t v30 = this;
      uint64_t v31 = (void **)&v28;
      sub_1CC424344((uint64_t)&v28, a2);
      uint64_t v11 = (_WORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v11 > 1uLL)
      {
        *uint64_t v11 = 8250;
        *((void *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, ": ", 2uLL);
      }
      sub_1CC4237D4(a2, v10);
      int v12 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v12 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v12 + 1;
        unsigned char *v12 = 10;
      }
      if (v31 == (void **)&v28)
      {
        v28[4]((void **)&v28);
      }
      else if (v31)
      {
        (*((void (**)(void))*v31 + 5))();
      }
      LODWORD(v26) = v6 + 1;
      unsigned int v6 = sub_1CC42DBA4((uint64_t)&v26, v6 + 1);
      LODWORD(v26) = v6;
    }
    while (v6 != v9);
  }
  unsigned int v8 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v8 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v8 + 1;
    *unsigned int v8 = 10;
  }
  int v13 = -1431655765 * ((*((void *)this + 23) - *((void *)this + 22)) >> 4);
  LODWORD(v28) = 0;
  HIDWORD(v28) = v13;
  unint64_t v29 = (unint64_t)this + 200;
  LODWORD(v28) = sub_1CC42DBA4((uint64_t)&v28, 0);
  unsigned int v14 = v28;
  uint64_t v26 = v28;
  uint64_t v27 = (char *)this + 200;
  LODWORD(v28) = -1431655765 * ((*((void *)this + 23) - *((void *)this + 22)) >> 4);
  HIDWORD(v28) = v28;
  unint64_t v29 = (unint64_t)this + 200;
  uint64_t result = sub_1CC42DBA4((uint64_t)&v28, v28);
  if (v14 != result)
  {
    int v16 = result;
    do
    {
      uint64_t v17 = *((void *)this + 22) + 48 * v14;
      uint64_t v18 = (char *)*(unsigned int *)(v17 + 20);
      uint64_t v19 = (char *)*(unsigned int *)(v17 + 24);
      uint64_t v20 = *(unsigned int **)v17;
      uint64_t v28 = (void (**)(void **))&unk_1F2611E60;
      unint64_t v29 = (unint64_t)v18;
      uint64_t v30 = this;
      uint64_t v31 = (void **)&v28;
      sub_1CC424344((uint64_t)&v28, a2);
      int v21 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v21 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((void *)a2 + 4) = v21 + 1;
        *int v21 = 32;
      }
      sub_1CD098D14(a2, *v20, 0, 0, 0);
      uint64_t v22 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v22 > 7uLL)
      {
        *uint64_t v22 = 0x202F2073776F7220;
        *((void *)a2 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a2, " rows / ", 8uLL);
      }
      if (v31 == (void **)&v28)
      {
        v28[4]((void **)&v28);
      }
      else if (v31)
      {
        (*((void (**)(void))*v31 + 5))();
      }
      uint64_t v30 = this;
      uint64_t v31 = (void **)&v28;
      uint64_t v28 = (void (**)(void **))&unk_1F2611E60;
      unint64_t v29 = (unint64_t)v19;
      sub_1CC424344((uint64_t)&v28, a2);
      uint64_t v23 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v23 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((void *)a2 + 4) = v23 + 1;
        *uint64_t v23 = 32;
      }
      sub_1CD098D14(a2, v20[1], 0, 0, 0);
      uint64_t v24 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v24 > 6uLL)
      {
        *(_DWORD *)((char *)v24 + 3) = 171602796;
        *uint64_t v24 = 1819239200;
        *((void *)a2 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a2, " cols:\n", 7uLL);
      }
      if (v31 == (void **)&v28)
      {
        v28[4]((void **)&v28);
      }
      else if (v31)
      {
        (*((void (**)(void))*v31 + 5))();
      }
      if (*v20)
      {
        LODWORD(v28) = v20[1];
        operator new[]();
      }
      uint64_t v25 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v25 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v25 + 1;
        *uint64_t v25 = 10;
      }
      LODWORD(v26) = v14 + 1;
      uint64_t result = sub_1CC42DBA4((uint64_t)&v26, v14 + 1);
      unsigned int v14 = result;
      LODWORD(v26) = result;
    }
    while (result != v16);
  }
  return result;
}

llvm::raw_ostream *sub_1CC4237D4(llvm::raw_ostream *this, float **a2)
{
  int v4 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 1uLL)
  {
    *int v4 = 8283;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "[ ", 2uLL);
  }
  llvm::write_double(this, 0, 0, 0, *a2[1]);
  if (*(_DWORD *)a2 >= 2u)
  {
    unint64_t v5 = 1;
    do
    {
      unsigned int v6 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v6 > 1uLL)
      {
        *unsigned int v6 = 8236;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
      }
      llvm::write_double(this, 0, 0, 0, a2[1][v5++]);
    }
    while (v5 < *(unsigned int *)a2);
  }
  int v7 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v7 > 1uLL)
  {
    *int v7 = 23840;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " ]", 2uLL);
  }
  return this;
}

uint64_t llvm::PBQP::RegAlloc::PBQPRAGraph::dump(llvm::PBQP::RegAlloc::PBQPRAGraph *this)
{
  unsigned int v2 = llvm::dbgs(this);

  return llvm::PBQP::RegAlloc::PBQPRAGraph::dump(this, v2);
}

llvm::raw_ostream *llvm::PBQP::RegAlloc::PBQPRAGraph::printDot(llvm::PBQP::RegAlloc::PBQPRAGraph *this, llvm::raw_ostream *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 7uLL)
  {
    *int v4 = 0xA7B206870617267;
    *((void *)a2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a2, "graph {\n", 8uLL);
  }
  int v5 = -1171354717 * ((*((void *)this + 17) - *((void *)this + 16)) >> 3);
  LODWORD(v27) = 0;
  HIDWORD(v27) = v5;
  unint64_t v28 = (unint64_t)this + 152;
  LODWORD(v27) = sub_1CC42DBA4((uint64_t)&v27, 0);
  unsigned int v6 = v27;
  uint64_t v25 = v27;
  uint64_t v26 = (char *)this + 152;
  LODWORD(v27) = -1171354717 * ((*((void *)this + 17) - *((void *)this + 16)) >> 3);
  HIDWORD(v27) = v27;
  unint64_t v28 = (unint64_t)this + 152;
  int v7 = sub_1CC42DBA4((uint64_t)&v27, v27);
  if (v6 != v7)
  {
    int v14 = v7;
    do
    {
      uint64_t v15 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v15) > 5)
      {
        *(_WORD *)(v15 + 4) = 25956;
        *(_DWORD *)uint64_t v15 = 1869488160;
        *((void *)a2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  node", 6uLL);
      }
      sub_1CD098D14(a2, v6, 0, 0, 0);
      uint64_t v16 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v16) > 9)
      {
        *(_WORD *)(v16 + 8) = 8765;
        *(void *)uint64_t v16 = *(void *)" [ label=\"";
        *((void *)a2 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(a2, " [ label=\"", 0xAuLL);
      }
      unint64_t v29 = this;
      uint64_t v30 = (void **)&v27;
      uint64_t v27 = (void (**)(void **))&unk_1F2611E60;
      unint64_t v28 = v6;
      sub_1CC424344((uint64_t)&v27, a2);
      uint64_t v17 = (_WORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v17 > 1uLL)
      {
        _WORD *v17 = 28252;
        *((void *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\\n", 2uLL);
      }
      sub_1CC4237D4(a2, *(float ***)(*((void *)this + 16) + 88 * v6));
      uint64_t v18 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v18 > 3uLL)
      {
        _DWORD *v18 = 173875234;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\" ]\n", 4uLL);
      }
      if (v30 == (void **)&v27)
      {
        v27[4]((void **)&v27);
      }
      else if (v30)
      {
        (*((void (**)(void))*v30 + 5))();
      }
      LODWORD(v25) = v6 + 1;
      unsigned int v6 = sub_1CC42DBA4((uint64_t)&v25, v6 + 1);
      LODWORD(v25) = v6;
    }
    while (v6 != v14);
  }
  unsigned int v8 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v8 > 0xCuLL)
  {
    qmemcpy(v8, "  edge [ len=", 13);
    *((void *)a2 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  edge [ len=", 0xDuLL);
  }
  sub_1CD098D14(a2, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 3)- ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2), 0, 0, 0);
  uint64_t v9 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 10;
    *(_WORD *)uint64_t v9 = 23840;
    *((void *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, " ]\n", 3uLL);
  }
  int v10 = -1431655765 * ((*((void *)this + 23) - *((void *)this + 22)) >> 4);
  LODWORD(v27) = 0;
  HIDWORD(v27) = v10;
  unint64_t v28 = (unint64_t)this + 200;
  LODWORD(v27) = sub_1CC42DBA4((uint64_t)&v27, 0);
  unsigned int v11 = v27;
  uint64_t v25 = v27;
  uint64_t v26 = (char *)this + 200;
  LODWORD(v27) = -1431655765 * ((*((void *)this + 23) - *((void *)this + 22)) >> 4);
  HIDWORD(v27) = v27;
  unint64_t v28 = (unint64_t)this + 200;
  uint64_t result = (llvm::raw_ostream *)sub_1CC42DBA4((uint64_t)&v27, v27);
  if (v11 != result)
  {
    int v19 = (int)result;
    do
    {
      uint64_t v20 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v20) > 5)
      {
        *(_WORD *)(v20 + 4) = 25956;
        *(_DWORD *)uint64_t v20 = 1869488160;
        *((void *)a2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  node", 6uLL);
      }
      sub_1CD098D14(a2, *(unsigned int *)(*((void *)this + 22) + 48 * v11 + 20), 0, 0, 0);
      int v21 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v21 > 7uLL)
      {
        *int v21 = 0x65646F6E202D2D20;
        *((void *)a2 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a2, " -- node", 8uLL);
      }
      sub_1CD098D14(a2, *(unsigned int *)(*((void *)this + 22) + 48 * v11 + 24), 0, 0, 0);
      uint64_t v22 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v22) > 9)
      {
        *(_WORD *)(v22 + 8) = 8765;
        *(void *)uint64_t v22 = *(void *)" [ label=\"";
        *((void *)a2 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(a2, " [ label=\"", 0xAuLL);
      }
      uint64_t v23 = *(_DWORD **)(*((void *)this + 22) + 48 * v11);
      if (*v23)
      {
        LODWORD(v27) = v23[1];
        operator new[]();
      }
      uint64_t v24 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v24 > 3uLL)
      {
        *uint64_t v24 = 173875234;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\" ]\n", 4uLL);
      }
      LODWORD(v25) = v11 + 1;
      uint64_t result = (llvm::raw_ostream *)sub_1CC42DBA4((uint64_t)&v25, v11 + 1);
      unsigned int v11 = result;
      LODWORD(v25) = result;
    }
    while (result != v19);
  }
  int v13 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v13 <= 1uLL) {
    return llvm::raw_ostream::write(a2, "}\n", 2uLL);
  }
  *int v13 = 2685;
  *((void *)a2 + 4) += 2;
  return result;
}

void llvm::createPBQPRegisterAllocator(llvm *this, char *a2)
{
}

uint64_t sub_1CC424178(uint64_t a1)
{
  *(void *)a1 = &unk_1F2611E30;
  long long v3 = (void **)(a1 + 8);
  sub_1CC42DAFC(&v3);
  return a1;
}

void sub_1CC4241D0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2611E30;
  int v1 = (void **)(a1 + 8);
  sub_1CC42DAFC(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC424248(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(uint64_t **)(result + 8);
  for (uint64_t i = *(uint64_t **)(result + 16);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

void sub_1CC4242B4()
{
}

__n128 sub_1CC4242C8(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F2611E60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC424314(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2611E60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC424344(uint64_t a1, llvm::raw_ostream *a2)
{
  int v4 = *(void **)(**(void **)(a1 + 16) + 40);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*v4 + 16) + 176))(*(void *)(*v4 + 16));
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 128) + 88 * v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(v4[3] + 16 * (v7 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)(v5 + 80);
  uint64_t v10 = *(unsigned int *)(v8 + 16);
  sub_1CD098D14(a2, v6, 0, 0, 0);
  unsigned int v11 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v11 > 1uLL)
  {
    *unsigned int v11 = 10272;
    int v12 = (unsigned char *)(*((void *)a2 + 4) + 2);
    *((void *)a2 + 4) = v12;
    if (!v9) {
      goto LABEL_5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
    int v12 = (unsigned char *)*((void *)a2 + 4);
    if (!v9) {
      goto LABEL_5;
    }
  }
  int v13 = (const char *)(v9 + v10);
  size_t v14 = strlen(v13);
  size_t v15 = v14;
  if (v14 <= *((void *)a2 + 3) - (void)v12)
  {
    if (v14)
    {
      memcpy(v12, v13, v14);
      int v12 = (unsigned char *)(*((void *)a2 + 4) + v15);
      *((void *)a2 + 4) = v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, v13, v14);
    int v12 = (unsigned char *)*((void *)a2 + 4);
  }
LABEL_5:
  if ((unint64_t)v12 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 58);
  }
  else
  {
    *((void *)a2 + 4) = v12 + 1;
    unsigned char *v12 = 58;
  }
  uint64_t v16 = operator new(0x28uLL);
  *(void *)uint64_t v16 = &unk_1F26154E0;
  std::future<void> v16[2] = v7;
  *((void *)v16 + 2) = v5;
  v16[6] = 0;
  *((void *)v16 + 4) = 0;
  off_1F2615510((llvm::raw_ostream *)v16, a2);
  uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v17 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 41);
  }
  else
  {
    *((void *)a2 + 4) = v17 + 1;
    unsigned char *v17 = 41;
  }
  uint64_t v18 = *(uint64_t (**)(_DWORD *))(*(void *)v16 + 40);

  return v18(v16);
}

void sub_1CC424580(uint64_t a1)
{
  *(void *)a1 = &unk_1F2611EA8;
  unsigned int v2 = *(void **)(a1 + 312);
  if (v2 != *(void **)(a1 + 304)) {
    free(v2);
  }
  sub_1CB833A08(a1 + 280, *(void **)(a1 + 288));
  sub_1CB833A08(a1 + 256, *(void **)(a1 + 264));
  *(void *)a1 = &unk_1F260E110;
  long long v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  int v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC424660(uint64_t a1)
{
  *(void *)a1 = &unk_1F2611EA8;
  unsigned int v2 = *(void **)(a1 + 312);
  if (v2 != *(void **)(a1 + 304)) {
    free(v2);
  }
  sub_1CB833A08(a1 + 280, *(void **)(a1 + 288));
  sub_1CB833A08(a1 + 256, *(void **)(a1 + 264));
  *(void *)a1 = &unk_1F260E110;
  long long v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  int v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC424754()
{
  return "PBQP Register Allocator";
}

void sub_1CC424764(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v7[0] = &unk_1F2617E40;
  v7[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v7);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  uint64_t v6 = *((void *)a1 + 31);
  if (v6) {
    sub_1CB843600(a2, a2, v6);
  }
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveStacks::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveStacks::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::VirtRegMap::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::VirtRegMap::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

void sub_1CC424934(llvm *a1, llvm::MachineFunctionPass *a2)
{
  v31[28] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::LiveIntervals::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LiveIntervals::ID);
  uint64_t v6 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_9:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineBlockFrequencyInfo::ID);
  uint64_t v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_14:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::VirtRegMap::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_14;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  unint64_t v29 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::VirtRegMap::ID);
  size_t v14 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_19:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::MachineLoopInfo::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_19;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::MachineLoopInfo::ID);
  v31[1] = a2;
  void v31[2] = v27;
  v31[3] = v29;
  v31[4] = v18;
  v31[5] = v25;
  v31[0] = &unk_1F2611F68;
  llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints((llvm::VirtRegAuxInfo *)v31);
  int v19 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  while (v20 != v21)
  {
    if (*(_UNKNOWN **)v20 == &llvm::MachineLoopInfo::ID)
    {
      uint64_t v22 = *(void *)(v20 + 8);
LABEL_27:
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::MachineLoopInfo::ID);
      v30[0] = &unk_1F2611668;
      v30[1] = a2;
      v30[2] = v27;
      void v30[3] = v29;
      v30[4] = v23;
      v30[5] = v25;
      llvm::createInlineSpiller(a1, a2, v29, (llvm::VirtRegMap *)v30, v24);
    }
    v20 += 16;
  }
  uint64_t v22 = 0;
  goto LABEL_27;
}

double sub_1CC428350@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 2;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC428378@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void sub_1CC4283A4()
{
}

float sub_1CC4283B8(float a1, uint64_t a2, int a3, unsigned int a4)
{
  return (float)(a1 / (float)(a3 + 400)) * (float)a4;
}

uint64_t sub_1CC4283D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CC428450()
{
}

uint64_t sub_1CC428464(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  unsigned int v4 = -1171354717 * ((a2[17] - a2[16]) >> 3);
  unsigned int v11 = 0;
  unsigned int v12 = v4;
  uint64_t v5 = a2 + 19;
  uint64_t v13 = a2 + 19;
  unsigned int v11 = sub_1CC42DBA4((uint64_t)&v11, 0);
  unsigned int v6 = v11;
  unsigned int v11 = -1171354717 * ((a2[17] - a2[16]) >> 3);
  unsigned int v12 = v11;
  uint64_t v13 = v5;
  uint64_t result = sub_1CC42DBA4((uint64_t)&v11, v11);
  if (v6 != result)
  {
    int v8 = *(_DWORD *)(a2[16] + 88 * v6 + 40);
    uint64_t v9 = v8 & 0x7FFFFFFF;
    uint64_t v10 = *(unsigned int *)(v3 + 416);
    if ((v8 & 0x7FFFFFFFu) >= v10)
    {
      sub_1CB9153B8(v3 + 408, v9 - v10 + 1, *(void *)(v3 + 424));
    }
    else if (*(void *)(*(void *)(v3 + 408) + 8 * v9))
    {
      operator new[]();
    }
    operator new();
  }
  return result;
}

void sub_1CC428730(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v12 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  uint64_t v13 = v5;
  *(_DWORD *)a3 = 0;
  sub_1CC428874(&v14, a1 + 72, &v12);
  uint64_t v6 = v13;
  uint64_t v13 = 0;
  if (v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8052888210);
  }
  uint64_t v7 = (std::__shared_weak_count **)(*(void *)(a1 + 128) + 88 * a2);
  uint64_t v9 = v14;
  int v8 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v7[1];
  *uint64_t v7 = v9;
  v7[1] = v8;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unsigned int v11 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1CC428874(std::__shared_weak_count **a1, uint64_t a2, unsigned int *a3)
{
  v34[2] = *(unint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = (float *)*((void *)a3 + 1);
  *((void *)a3 + 1) = 0;
  *a3 = 0;
  int v7 = *(_DWORD *)(a2 + 16);
  if (!v7)
  {
LABEL_2:
    int v8 = (std::__shared_weak_count *)operator new(0x40uLL);
    uint64_t v9 = v8;
    v8->__shared_weak_owners_ = 0;
    v8->__shared_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2611FC0;
    unint64_t v10 = (unint64_t)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    v8[1].__shared_weak_owners_ = a2;
    LODWORD(v8[2].__vftable) = v5;
    unsigned int v11 = v8 + 2;
    v8[2].__shared_owners_ = (uint64_t)v6;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    unint64_t v33 = v10;
    v34[0] = 0;
    if (sub_1CC428F98(*(void *)a2, *(_DWORD *)(a2 + 16), &v33, v34))
    {
LABEL_10:
      *a1 = v11;
      a1[1] = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v6 = 0;
        goto LABEL_13;
      }
      return;
    }
    unsigned int v12 = *(_DWORD *)(a2 + 16);
    int v13 = *(_DWORD *)(a2 + 8);
    if (4 * v13 + 4 >= 3 * v12)
    {
      v12 *= 2;
    }
    else if (v12 + ~v13 - *(_DWORD *)(a2 + 12) > v12 >> 3)
    {
LABEL_7:
      size_t v14 = v34[0];
      ++*(_DWORD *)(a2 + 8);
      if (*v14) {
        --*(_DWORD *)(a2 + 12);
      }
      *size_t v14 = v10;
      goto LABEL_10;
    }
    sub_1CC4291C4(a2, v12);
    v34[0] = 0;
    sub_1CC428F98(*(void *)a2, *(_DWORD *)(a2 + 16), &v33, v34);
    goto LABEL_7;
  }
  uint64_t v15 = *(std::__shared_weak_count ***)a2;
  unint64_t v16 = sub_1CD48BB60(v6, (uint64_t)&v6[v5]);
  memset(v34, 0, 12);
  uint64_t v17 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
LABEL_38:
    int v31 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v17 = &unk_1EBCBE000;
    if (v31)
    {
      unint64_t v32 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v32 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v32;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v17 = (void *)&unk_1EBCBE000;
    }
  }
  uint64_t v18 = v17[176];
  LODWORD(v34[0]) = v5;
  *(unint64_t **)((char *)v34 + 4) = (unint64_t *)v16;
  uint64_t v19 = __ROR8__(v16 + 12, 12);
  unint64_t v20 = 0x9DDFEA08EB382D69
      * (v19 ^ ((0x9DDFEA08EB382D69 * (v18 ^ (uint64_t)v34[0] ^ v19)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * (v18 ^ (uint64_t)v34[0] ^ v19)));
  unsigned int v21 = (v7 - 1) & ((-348639895 * ((v20 >> 47) ^ v20)) ^ v16);
  for (int i = 1; ; ++i)
  {
    uint64_t v23 = v21;
    unint64_t v24 = (unint64_t)v15[v21];
    if (v24 < 2) {
      goto LABEL_21;
    }
    if (v5 != *(_DWORD *)(v24 + 24)) {
      goto LABEL_29;
    }
    if (!v5) {
      break;
    }
    uint64_t v25 = *(float **)(v24 + 32);
    uint64_t v26 = 4 * v5;
    uint64_t v27 = v6;
    while (*v27 == *v25)
    {
      ++v27;
      ++v25;
      v26 -= 4;
      if (!v26) {
        goto LABEL_30;
      }
    }
LABEL_21:
    if (!v24) {
      goto LABEL_2;
    }
LABEL_29:
    int v28 = i + v23;
    unsigned int v21 = v28 & (v7 - 1);
  }
LABEL_30:
  v15 += v23;
  if (v15 == (std::__shared_weak_count **)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 16))) {
    goto LABEL_2;
  }
  unint64_t v29 = *(std::__shared_weak_count **)(v24 + 8);
  if (!v29 || (uint64_t v30 = std::__shared_weak_count::lock(v29)) == 0)
  {
    sub_1CC428E54();
    goto LABEL_38;
  }
  uint64_t v9 = v30;
  *a1 = *v15 + 1;
  a1[1] = v30;
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v6)
  {
    JUMPOUT(0x1D25D9CB0);
  }
}

unint64_t sub_1CC428C88(_DWORD *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  unsigned int v2 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v7 = a2;
    int v8 = a1;
    int v4 = __cxa_guard_acquire(&qword_1EBCBE588);
    unsigned int v2 = &unk_1EBCBE000;
    int v5 = v4;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v6;
      __cxa_guard_release(&qword_1EBCBE588);
      unsigned int v2 = (void *)&unk_1EBCBE000;
      a2 = v7;
      a1 = v8;
    }
  }
  unint64_t v11 = v2[176];
  LODWORD(v9[0]) = *a1;
  *(void *)((char *)v9 + 4) = *a2;
  return sub_1CBAE06B8(v9, 0xCuLL, v11);
}

unint64_t sub_1CC428D84(char *a1, _DWORD *__dst, char *a3, int a4, uint64_t *a5)
{
  uint64_t v14 = 0;
  int v8 = sub_1CC0AC9D0(a1, &v14, __dst, (unint64_t)a3, a4);
  uint64_t v15 = v14;
  uint64_t v9 = (char *)sub_1CBFFCBA0(a1, &v15, v8, (unint64_t)a3, *a5);
  uint64_t v10 = v15;
  if (!v15) {
    return sub_1CBAE06B8(a1, v9 - a1, *((void *)a1 + 15));
  }
  int v13 = v9;
  if (v9 != a1 && v9 != a3) {
    sub_1CBFFD1E8(a1, v9, a3);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v13[v10 - (void)a1]);
}

uint64_t sub_1CC428E54()
{
  return sub_1CC428E6C();
}

void sub_1CC428E6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2611FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC428E8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2611FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC428EE0(void *a1)
{
  uint64_t v2 = a1[5];
  int v5 = a1 + 3;
  unint64_t v6 = 0;
  if (sub_1CC428F98(*(void *)v2, *(_DWORD *)(v2 + 16), (unint64_t *)&v5, &v6))
  {
    *unint64_t v6 = 1;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    MEMORY[0x1D25D9CB0](v3, 0x1000C8052888210);
  }
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_1CC428F98(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  if (!a2)
  {
    int v5 = 0;
    uint64_t result = 0;
    goto LABEL_3;
  }
  unint64_t v10 = *a3;
  unint64_t v11 = sub_1CD48BB60(*(void **)(*a3 + 32), *(void *)(*a3 + 32) + 4 * *(unsigned int *)(*a3 + 24));
  uint64_t v12 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v29 = v11;
    int v26 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v12 = &unk_1EBCBE000;
    int v27 = v26;
    unint64_t v11 = v29;
    if (v27)
    {
      unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v28 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v28;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v12 = (void *)&unk_1EBCBE000;
      unint64_t v11 = v29;
    }
  }
  int v13 = 0;
  LODWORD(v30) = *(_DWORD *)(v10 + 24);
  HIDWORD(v30) = v11;
  uint64_t v14 = __ROR8__(v11 + 12, 12);
  unint64_t v15 = 0x9DDFEA08EB382D69
      * (v14 ^ ((0x9DDFEA08EB382D69 * (v12[176] ^ v30 ^ v14)) >> 47) ^ (0x9DDFEA08EB382D69 * (v12[176] ^ v30 ^ v14)));
  unsigned int v16 = (a2 - 1) & ((-348639895 * ((v15 >> 47) ^ v15)) ^ v11);
  unint64_t v17 = *a3;
  int v18 = 1;
  uint64_t result = 1;
  while (1)
  {
    int v5 = (unint64_t *)(a1 + 8 * v16);
    unint64_t v19 = *v5;
    if (v17 < 2)
    {
      if (v17 == v19) {
        goto LABEL_24;
      }
      goto LABEL_10;
    }
    if (v19 < 2) {
      goto LABEL_10;
    }
    uint64_t v20 = *(unsigned int *)(v17 + 24);
    if (v20 == *(_DWORD *)(v19 + 24)) {
      break;
    }
LABEL_18:
    if (v13) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v19 == 1;
    }
    if (v24) {
      int v13 = (unint64_t *)(a1 + 8 * v16);
    }
    unsigned int v25 = v18 + v16;
    ++v18;
    unsigned int v16 = v25 & (a2 - 1);
  }
  if (!v20)
  {
LABEL_24:
    uint64_t result = 1;
    goto LABEL_3;
  }
  unsigned int v21 = *(float **)(v17 + 32);
  uint64_t v22 = *(float **)(v19 + 32);
  uint64_t v23 = 4 * v20;
  while (*v21 == *v22)
  {
    ++v21;
    ++v22;
    v23 -= 4;
    if (!v23) {
      goto LABEL_3;
    }
  }
LABEL_10:
  if (v19) {
    goto LABEL_18;
  }
  uint64_t result = 0;
  if (v13) {
    int v5 = v13;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

void sub_1CC4291C4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10) {
      bzero(v9, 8 * v10);
    }
    if (v3)
    {
      uint64_t v11 = 8 * v3;
      uint64_t v12 = (unint64_t *)v4;
      do
      {
        if (*v12 >= 2)
        {
          uint64_t v14 = 0;
          sub_1CC428F98(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
          *uint64_t v14 = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v13)
  {
    bzero(v9, 8 * v13);
  }
}

void sub_1CC42930C()
{
}

uint64_t sub_1CC429320(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  unsigned int v114 = 0;
  v110[0] = 0;
  v110[1] = 0;
  int v111 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  unsigned int v109 = 0;
  unsigned int v104 = 0;
  uint64_t v105 = 0;
  int v106 = (unsigned int (*)(long long *, uint64_t *))sub_1CC42A1DC;
  uint64_t v103 = &v104;
  int v4 = -1171354717 * ((unint64_t)(a2[17] - a2[16]) >> 3);
  LODWORD(v115) = 0;
  DWORD1(v115) = v4;
  unint64_t v5 = a2 + 19;
  *((void *)&v115 + 1) = a2 + 19;
  LODWORD(v115) = sub_1CC42DBA4((uint64_t)&v115, 0);
  unsigned int v6 = v115;
  *(void *)&long long v101 = v115;
  *((void *)&v101 + 1) = v5;
  uint64_t v7 = -1171354717 * ((unint64_t)(a2[17] - a2[16]) >> 3);
  LODWORD(v115) = v7;
  DWORD1(v115) = v7;
  *((void *)&v115 + 1) = v5;
  int v8 = sub_1CC42DBA4((uint64_t)&v115, v7);
  if (v6 != v8)
  {
    int v9 = v8;
    unsigned int v97 = a2;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v3;
    unsigned __int16 v98 = (void *)(v3 + 408);
    do
    {
      uint64_t v14 = (char *)v11;
      unint64_t v15 = v12;
      int v16 = *(_DWORD *)(v97[16] + 88 * v6 + 40);
      uint64_t v17 = v16 & 0x7FFFFFFF;
      uint64_t v18 = *(unsigned int *)(v13 + 416);
      if ((v16 & 0x7FFFFFFFu) >= v18)
      {
        sub_1CB9153B8((uint64_t)v98, v17 - v18 + 1, *(void *)(v13 + 424));
LABEL_27:
        operator new();
      }
      uint64_t v19 = *(void *)(*v98 + 8 * v17);
      if (!v19) {
        goto LABEL_27;
      }
      if (v14 >= v10)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_152:
        }
          abort();
        if (0x5555555555555556 * ((v10 - v15) >> 3) > v21) {
          unint64_t v21 = 0x5555555555555556 * ((v10 - v15) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v10 - v15) >> 3) >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_153:
          }
            sub_1CB833614();
          uint64_t v23 = (char *)operator new(24 * v22);
        }
        else
        {
          uint64_t v23 = 0;
        }
        BOOL v24 = &v23[8 * ((v14 - v15) >> 3)];
        *(void *)BOOL v24 = v19;
        *((void *)v24 + 1) = 0;
        *((_DWORD *)v24 + 4) = v6;
        if (v14 == v15)
        {
          unint64_t v15 = v14;
          uint64_t v12 = &v23[24 * v20];
        }
        else
        {
          unsigned int v25 = &v23[8 * ((v14 - v15) >> 3)];
          do
          {
            long long v26 = *(_OWORD *)(v14 - 24);
            *((void *)v25 - 1) = *((void *)v14 - 1);
            *(_OWORD *)(v25 - 24) = v26;
            v25 -= 24;
            v14 -= 24;
          }
          while (v14 != v15);
          uint64_t v12 = v25;
        }
        uint64_t v10 = &v23[24 * v22];
        uint64_t v11 = (uint64_t)(v24 + 24);
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)uint64_t v14 = v19;
        *((void *)v14 + 1) = 0;
        *((_DWORD *)v14 + 4) = v6;
        uint64_t v11 = (uint64_t)(v14 + 24);
        uint64_t v12 = v15;
      }
      *(void *)&long long v115 = sub_1CC42A250;
      sub_1CC42A2A0((uint64_t)v12, v11, (uint64_t (**)(uint64_t, uint64_t))&v115, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 3));
      LODWORD(v101) = v101 + 1;
      unsigned int v6 = sub_1CC42DBA4((uint64_t)&v101, v101);
      LODWORD(v101) = v6;
    }
    while (v6 != v9);
    if (v12 != (char *)v11)
    {
      int v27 = v97;
      do
      {
        long long v28 = *(_OWORD *)v12;
        uint64_t v102 = *((void *)v12 + 2);
        long long v101 = v28;
        unint64_t v29 = v103;
        if (v103 != &v104)
        {
          while (1)
          {
            uint64_t v30 = (char *)v11;
            unint64_t v32 = v29[4];
            int v31 = v29[5];
            uint64_t v33 = *(void *)(*v32 + 24 * (void)v31 + 8);
            if ((*(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3) > ((*(void *)(*(void *)v101 + 24 * *((void *)&v101 + 1)) >> 1) & 3 | *(_DWORD *)((*(void *)(*(void *)v101 + 24 * *((void *)&v101 + 1)) & 0xFFFFFFFFFFFFFFF8) + 24))) {
              break;
            }
            if (v31 == (uint64_t *)(*((unsigned int *)v32 + 2) - 1))
            {
              uint64_t v11 = (uint64_t)v30;
            }
            else
            {
              uint64_t v34 = (char *)v31 + 1;
              int v35 = *((_DWORD *)v29 + 12);
              if (v30 >= v10)
              {
                unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v12) >> 3) + 1;
                if (v36 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_152;
                }
                if (0x5555555555555556 * ((v10 - v12) >> 3) > v36) {
                  unint64_t v36 = 0x5555555555555556 * ((v10 - v12) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v10 - v12) >> 3) >= 0x555555555555555) {
                  unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v37 = v36;
                }
                if (v37)
                {
                  if (v37 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_153;
                  }
                  uint64_t v38 = (char *)operator new(24 * v37);
                }
                else
                {
                  uint64_t v38 = 0;
                }
                int v39 = &v38[8 * ((v30 - v12) >> 3)];
                *(void *)int v39 = v32;
                *((void *)v39 + 1) = v34;
                *((_DWORD *)v39 + 4) = v35;
                uint64_t v40 = v30;
                if (v30 == v12)
                {
                  uint64_t v12 = &v38[8 * ((v30 - v12) >> 3)];
                }
                else
                {
                  uint64_t v41 = &v38[8 * ((v30 - v12) >> 3)];
                  do
                  {
                    long long v42 = *(_OWORD *)(v40 - 24);
                    *((void *)v41 - 1) = *((void *)v40 - 1);
                    *(_OWORD *)(v41 - 24) = v42;
                    v41 -= 24;
                    v40 -= 24;
                  }
                  while (v40 != v12);
                  uint64_t v40 = v12;
                  uint64_t v12 = v41;
                }
                uint64_t v10 = &v38[24 * v37];
                uint64_t v11 = (uint64_t)(v39 + 24);
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(void *)uint64_t v30 = v32;
                *((void *)v30 + 1) = v34;
                uint64_t v11 = (uint64_t)(v30 + 24);
                *((_DWORD *)v30 + 4) = v35;
              }
              *(void *)&long long v115 = sub_1CC42A250;
              sub_1CC42A2A0((uint64_t)v12, v11, (uint64_t (**)(uint64_t, uint64_t))&v115, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 3));
            }
            float v43 = v29[1];
            if (v43)
            {
              do
              {
                uint64_t v44 = (uint64_t **)v43;
                float v43 = (uint64_t *)*v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                uint64_t v44 = (uint64_t **)v29[2];
                BOOL v68 = *v44 == (uint64_t *)v29;
                unint64_t v29 = v44;
              }
              while (!v68);
            }
            unint64_t v29 = v44;
            if (v44 == &v104)
            {
              unint64_t v29 = &v104;
              goto LABEL_62;
            }
          }
          uint64_t v11 = (uint64_t)v30;
LABEL_62:
          uint64_t v45 = (uint64_t *)v103;
          if (v103 != v29)
          {
            uint64_t v46 = v10;
            uint64_t v47 = v11;
            do
            {
              uint64_t v48 = (uint64_t *)v45[1];
              uint64_t v49 = v45;
              if (v48)
              {
                do
                {
                  uint64_t v50 = (uint64_t **)v48;
                  uint64_t v48 = (uint64_t *)*v48;
                }
                while (v48);
              }
              else
              {
                do
                {
                  uint64_t v50 = (uint64_t **)v49[2];
                  BOOL v68 = *v50 == v49;
                  uint64_t v49 = (uint64_t *)v50;
                }
                while (!v68);
              }
              if (v103 == (uint64_t **)v45) {
                uint64_t v103 = v50;
              }
              --v105;
              sub_1CB91F7C8(v104, v45);
              operator delete(v45);
              uint64_t v45 = (uint64_t *)v50;
            }
            while (v50 != v29);
            uint64_t v11 = v47;
            uint64_t v10 = v46;
          }
        }
        uint64_t v94 = v10;
        uint64_t v95 = v11;
        uint64_t v51 = *((void *)v12 + 1);
        *(void *)&long long v101 = *(void *)v12;
        *((void *)&v101 + 1) = v51;
        LODWORD(v102) = *((_DWORD *)v12 + 4);
        *(void *)&long long v115 = sub_1CC42A250;
        uint64_t v96 = (uint64_t)v12;
        if (v11 - (uint64_t)v12 >= 25)
        {
          uint64_t v52 = 0;
          int64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 3);
          uint64_t v54 = *(void *)v12;
          uint64_t v55 = *((void *)v12 + 1);
          int v56 = *((_DWORD *)v12 + 4);
          do
          {
            uint64_t v57 = (uint64_t)&v12[24 * v52 + 24];
            uint64_t v58 = (2 * v52) | 1;
            uint64_t v59 = 2 * v52 + 2;
            if (v59 < v53
              && ((unsigned int (*)(char *, char *))v115)(&v12[24 * v52 + 24], &v12[24 * v52 + 48]))
            {
              v57 += 24;
              uint64_t v58 = v59;
            }
            *(void *)uint64_t v12 = *(void *)v57;
            *((void *)v12 + 1) = *(void *)(v57 + 8);
            *((_DWORD *)v12 + 4) = *(_DWORD *)(v57 + 16);
            uint64_t v12 = (char *)v57;
            uint64_t v52 = v58;
          }
          while (v58 <= (uint64_t)((unint64_t)(v53 - 2) >> 1));
          if (v57 == v95 - 24)
          {
            *(void *)uint64_t v57 = v54;
            *(void *)(v57 + 8) = v55;
            *(_DWORD *)(v57 + 16) = v56;
            uint64_t v12 = (char *)v96;
          }
          else
          {
            *(void *)uint64_t v57 = *(void *)(v95 - 24);
            *(void *)(v57 + 8) = *(void *)(v95 - 16);
            *(_DWORD *)(v57 + 16) = *(_DWORD *)(v95 - 8);
            *(void *)(v95 - 24) = v54;
            *(void *)(v95 - 16) = v55;
            *(_DWORD *)(v95 - 8) = v56;
            uint64_t v12 = (char *)v96;
            sub_1CC42A2A0(v96, v57 + 24, (uint64_t (**)(uint64_t, uint64_t))&v115, 0xAAAAAAAAAAAAAAABLL * ((v57 + 24 - v96) >> 3));
          }
          int v27 = v97;
        }
        uint64_t v60 = v103;
        if (v103 != &v104)
        {
          unsigned int v99 = v102;
          do
          {
            unsigned int v61 = *((_DWORD *)v60 + 12);
            uint64_t v62 = v27[16];
            unint64_t v63 = *(void *)(v62 + 88 * v99 + 48);
            unint64_t v64 = *(void *)(v62 + 88 * v61 + 48);
            if (v63 == v64
              || ((*(void *)&v115 = 0, v65 = v107, v66 = v109, v63 >= v64) ? (v67 = v64) : (v67 = v63, unint64_t v63 = v64),
                  sub_1CC42A384(v107, v109, v67, v63, &v115)
                ? (BOOL v68 = (void)v115 == v65 + 16 * v66)
                : (BOOL v68 = 1),
                  v68))
            {
              int v71 = v61 >= v99 ? v99 : v61;
              int v72 = v99 <= v61 ? v61 : v99;
              v100[0] = v71;
              v100[1] = v72;
              if ((sub_1CD56EB80(v110[0], v111, v71, v72, &v115) & 1) == 0)
              {
                (*(void (**)(void))(**(void **)(*v27 + 16) + 176))(*(void *)(*v27 + 16));
                uint64_t v73 = v27[16];
                uint64_t v74 = *(void *)(v73 + 88 * v99 + 48);
                uint64_t v75 = *(void *)(v73 + 88 * v61 + 48);
                *(void *)&long long v115 = 0;
                uint64_t v76 = (uint64_t)v112;
                uint64_t v77 = v114;
                if (sub_1CC42A670((uint64_t)v112, v114, v74, v75, &v115)) {
                  BOOL v78 = (void)v115 == v76 + 32 * v77;
                }
                else {
                  BOOL v78 = 1;
                }
                if (v78) {
                  operator new[]();
                }
                uint64_t v79 = *(void *)(v115 + 16);
                uint64_t v80 = *(std::__shared_weak_count **)(v115 + 24);
                if (v80)
                {
                  atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v12 = (char *)v96;
                *(void *)&long long v115 = v79;
                *((void *)&v115 + 1) = v80;
                unsigned int v116 = v99;
                unsigned int v117 = v61;
                uint64_t v118 = -1;
                uint64_t v119 = -1;
                unsigned int v81 = sub_1CC42A758(v27, &v115);
                uint64_t v82 = (std::__shared_weak_count *)*((void *)&v115 + 1);
                if (*((void *)&v115 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v115 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
                uint64_t v83 = v27[15];
                if (v83)
                {
                  sub_1CC42AAF0(*(void *)(*(void *)v83 + 128), *(void *)(*(void *)v83 + 176), v81, *(_DWORD *)(*(void *)(*(void *)v83 + 176) + 48 * v81 + 20));
                  sub_1CC42AAF0(*(void *)(*(void *)v83 + 128), *(void *)(*(void *)v83 + 176), v81, *(_DWORD *)(*(void *)(*(void *)v83 + 176) + 48 * v81 + 24));
                }
                if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
                sub_1CD56EC64((uint64_t)&v115, (uint64_t)v110, v100);
              }
            }
            int v69 = v60[1];
            if (v69)
            {
              do
              {
                uint64_t v70 = (uint64_t **)v69;
                int v69 = (uint64_t *)*v69;
              }
              while (v69);
            }
            else
            {
              do
              {
                uint64_t v70 = (uint64_t **)v60[2];
                BOOL v68 = *v70 == (uint64_t *)v60;
                uint64_t v60 = v70;
              }
              while (!v68);
            }
            uint64_t v60 = v70;
          }
          while (v70 != &v104);
        }
        uint64_t v84 = v104;
        uint64_t v85 = &v104;
        int v86 = &v104;
        if (!v104) {
          goto LABEL_133;
        }
        uint64_t v85 = &v104;
        while (1)
        {
          while (1)
          {
            int v86 = (uint64_t **)v84;
            if (!v106(&v101, v84 + 4)) {
              break;
            }
            uint64_t v84 = *v86;
            uint64_t v85 = v86;
            if (!*v86) {
              goto LABEL_133;
            }
          }
          if (!v106((long long *)v86 + 2, (uint64_t *)&v101)) {
            break;
          }
          uint64_t v85 = v86 + 1;
          uint64_t v84 = v86[1];
          if (!v84) {
            goto LABEL_133;
          }
        }
        if (!*v85)
        {
LABEL_133:
          uint64_t v87 = operator new(0x38uLL);
          v87[2] = v101;
          *((void *)v87 + 6) = v102;
          *(void *)uint64_t v87 = 0;
          *((void *)v87 + 1) = 0;
          *((void *)v87 + 2) = v86;
          *uint64_t v85 = (uint64_t *)v87;
          if (*v103)
          {
            uint64_t v103 = (uint64_t **)*v103;
            unsigned int v88 = *v85;
          }
          else
          {
            unsigned int v88 = (uint64_t *)v87;
          }
          sub_1CB8358B8(v104, v88);
          ++v105;
        }
        uint64_t v10 = v94;
        uint64_t v11 = v95 - 24;
      }
      while (v12 != (char *)(v95 - 24));
    }
    if (v12) {
      operator delete(v12);
    }
  }
  sub_1CBB0D544(v104);
  MEMORY[0x1D25D9CD0](v107, 8);
  MEMORY[0x1D25D9CD0](v110[0], 4);
  int v89 = v112;
  if (v114)
  {
    unsigned __int8 v90 = &v112[4 * v114];
    do
    {
      uint64_t v91 = v89[1];
      if ((*v89 != -4096 || v91 != -4096) && (*v89 != -8192 || v91 != -8192))
      {
        int v92 = (std::__shared_weak_count *)v89[3];
        if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v89 += 4;
    }
    while (v89 != v90);
    int v89 = v112;
  }
  return MEMORY[0x1D25D9CD0](v89, 8);
}

BOOL sub_1CC42A1DC(void *a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)*a1 + 24 * a1[1] + 8);
  uint64_t v3 = *(void *)(*(void *)*a2 + 24 * a2[1] + 8);
  unsigned int v4 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 24) | (v2 >> 1) & 3;
  unsigned int v5 = (v3 >> 1) & 3 | *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v4 < v5) {
    return 1;
  }
  if (v4 > v5) {
    return 0;
  }
  return *(_DWORD *)(*a1 + 112) < *(_DWORD *)(*a2 + 112);
}

BOOL sub_1CC42A250(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(**(void **)a1 + 24 * *(void *)(a1 + 8));
  uint64_t v3 = *(void *)(**(void **)a2 + 24 * *(void *)(a2 + 8));
  return (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 24) | (v2 >> 1) & 3) > ((v3 >> 1) & 3 | *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24));
}

uint64_t sub_1CC42A2A0(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = result + 24 * (v6 >> 1);
    uint64_t v11 = (long long *)(a2 - 24);
    uint64_t result = (*a3)(v10, a2 - 24);
    if (result)
    {
      long long v12 = *v11;
      uint64_t v15 = *((void *)v11 + 2);
      long long v14 = v12;
      do
      {
        uint64_t v13 = v10;
        *(void *)uint64_t v11 = *(void *)v10;
        *((void *)v11 + 1) = *(void *)(v10 + 8);
        *((_DWORD *)v11 + 4) = *(_DWORD *)(v10 + 16);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v8 + 24 * v9;
        uint64_t result = (*a3)(v10, (uint64_t)&v14);
        uint64_t v11 = (long long *)v13;
      }
      while ((result & 1) != 0);
      *(_OWORD *)uint64_t v13 = v14;
      *(_DWORD *)(v13 + 16) = v15;
    }
  }
  return result;
}

uint64_t sub_1CC42A384(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (void *)(a1 + 16 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -8192;
        }
        if (v18 && v11 == -8192) {
          uint64_t v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        uint64_t v10 = (void *)(a1 + 16 * (v20 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_9;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        uint64_t v10 = v16;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

unint64_t sub_1CC42A46C(uint64_t *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v21 = *a4;
  uint64_t v7 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v22 = v7;
  sub_1CC42AB74(&v23, (uint64_t)(a1 + 9), (int *)&v21);
  uint64_t v8 = v22;
  uint64_t v22 = 0;
  if (v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8052888210);
  }
  uint64_t v10 = v23;
  unsigned int v9 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v9;
  int v17 = a2;
  int v18 = a3;
  uint64_t v19 = -1;
  uint64_t v20 = -1;
  unint64_t v11 = sub_1CC42A758(a1, &v16);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = a1[15];
  if (v13)
  {
    sub_1CC42AAF0(*(void *)(*(void *)v13 + 128), *(void *)(*(void *)v13 + 176), v11, *(_DWORD *)(*(void *)(*(void *)v13 + 176) + 48 * v11 + 20));
    sub_1CC42AAF0(*(void *)(*(void *)v13 + 128), *(void *)(*(void *)v13 + 176), v11, *(_DWORD *)(*(void *)(*(void *)v13 + 176) + 48 * v11 + 24));
  }
  uint64_t v14 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return v11;
}

void *sub_1CC42A5F0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_1CC42A670(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    uint64_t v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    unsigned int v9 = (void *)(a1 + 32 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (*v9 == a3 && v11 == a4)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v10 != -4096 || v11 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v11 == -8192;
        }
        if (v17 && v10 == -8192) {
          uint64_t v15 = v9;
        }
        int v19 = v8 + v16++;
        uint64_t v8 = v19 & (a2 - 1);
        unsigned int v9 = (void *)(a1 + 32 * v8);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v13 = 1;
        if (*v9 == a3 && v11 == a4) {
          goto LABEL_9;
        }
      }
      uint64_t v13 = 0;
      if (v15) {
        unsigned int v9 = v15;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t v13 = 0;
  }
LABEL_9:
  *a5 = v9;
  return v13;
}

unint64_t sub_1CC42A758(uint64_t *a1, long long *a2)
{
  uint64_t v4 = a1[26];
  if (a1[25] == v4)
  {
    uint64_t v14 = a1[22];
    unint64_t v13 = a1[23];
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 4);
    unint64_t v15 = a1[24];
    if (v13 >= v15)
    {
      unint64_t v18 = v12 + 1;
      if (v12 + 1 > 0x555555555555555) {
        abort();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v14) >> 4);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v20 = 0x555555555555555;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        if (v20 > 0x555555555555555) {
          sub_1CB833614();
        }
        uint64_t v21 = (char *)operator new(48 * v20);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = &v21[16 * ((uint64_t)(v13 - v14) >> 4)];
      uint64_t v23 = &v21[48 * v20];
      long long v24 = *a2;
      long long v25 = a2[1];
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      *(_OWORD *)uint64_t v22 = v24;
      *((_OWORD *)v22 + 1) = v25;
      *((_OWORD *)v22 + 2) = a2[2];
      BOOL v17 = v22 + 48;
      while (v13 != v14)
      {
        long long v26 = *(_OWORD *)(v13 - 48);
        v13 -= 48;
        *((_OWORD *)v22 - 3) = v26;
        v22 -= 48;
        *(void *)unint64_t v13 = 0;
        *(void *)(v13 + 8) = 0;
        long long v27 = *(_OWORD *)(v13 + 32);
        *((_OWORD *)v22 + 1) = *(_OWORD *)(v13 + 16);
        *((_OWORD *)v22 + 2) = v27;
      }
      long long v28 = (char *)a1[22];
      unint64_t v29 = (char *)a1[23];
      a1[22] = (uint64_t)v22;
      a1[23] = (uint64_t)v17;
      for (a1[24] = (uint64_t)v23; v29 != v28; v29 -= 48)
      {
        uint64_t v30 = (std::__shared_weak_count *)*((void *)v29 - 5);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v13 = *a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      long long v16 = a2[2];
      *(_OWORD *)(v13 + 16) = a2[1];
      *(_OWORD *)(v13 + 32) = v16;
      BOOL v17 = (_OWORD *)(v13 + 48);
    }
    a1[23] = (uint64_t)v17;
    LODWORD(v5) = v12;
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(v4 - 4);
    a1[26] = v4 - 4;
    uint64_t v6 = a1[22];
    unint64_t v7 = v6 + 48 * v5;
    long long v8 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unsigned int v9 = *(std::__shared_weak_count **)(v7 + 8);
    *(_OWORD *)unint64_t v7 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    long long v10 = a2[2];
    uint64_t v11 = v6 + 48 * v5;
    *(_OWORD *)(v11 + 16) = a2[1];
    *(_OWORD *)(v11 + 32) = v10;
    unint64_t v12 = v5;
  }
  uint64_t v31 = a1[22] + 48 * v5;
  sub_1CC42A9C4(v31, a1[16], v12, 0);
  sub_1CC42A9C4(v31, a1[16], v12, 1u);
  return v12;
}

void sub_1CC42A9C4(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v7 = a2 + 88 * *(unsigned int *)(a1 + 4 * a4 + 20);
  long long v10 = *(char **)(v7 + 64);
  unsigned int v9 = (char **)(v7 + 64);
  long long v8 = v10;
  uint64_t v11 = v9 + 1;
  unint64_t v12 = v9[1];
  unint64_t v13 = (unint64_t)v9[2];
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = (v12 - v8) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      abort();
    }
    uint64_t v17 = v13 - (void)v8;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_1CB833614();
      }
      unint64_t v19 = (char *)operator new(4 * v18);
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v20 = &v19[4 * v15];
    uint64_t v21 = &v19[4 * v18];
    *(_DWORD *)unint64_t v20 = a3;
    uint64_t v14 = v20 + 4;
    while (v12 != v8)
    {
      int v22 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *unsigned int v9 = v20;
    *uint64_t v11 = v14;
    v9[2] = v21;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v12 = a3;
    uint64_t v14 = v12 + 4;
    uint64_t v15 = (v12 - v8) >> 2;
  }
  *uint64_t v11 = v14;
  *(void *)(a1 + 8 * a4 + 32) = v15;
}

uint64_t sub_1CC42AAF0(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = (uint64_t *)(a2 + 48 * a3);
  uint64_t v5 = *v4;
  uint64_t v6 = *v4 + 16;
  LODWORD(v4) = *((_DWORD *)v4 + 6);
  BOOL v7 = v4 == a4;
  if (v4 == a4) {
    long long v8 = (int *)v6;
  }
  else {
    long long v8 = (int *)(v5 + 20);
  }
  int v9 = *v8;
  uint64_t v10 = result + 88 * a4;
  int v12 = *(_DWORD *)(v10 + 20);
  int v13 = *(_DWORD *)(v10 + 24);
  uint64_t v11 = (unsigned int *)(v10 + 20);
  v11[1] = v13 + v9;
  uint64_t v14 = (uint64_t *)(v5 + 32);
  uint64_t v15 = (uint64_t *)(v5 + 24);
  if (!v7) {
    uint64_t v14 = v15;
  }
  if (v12)
  {
    unint64_t v16 = 0;
    uint64_t v17 = *v14;
    uint64_t v18 = *(void *)(result + 88 * a4 + 32);
    do
    {
      *(_DWORD *)(v18 + 4 * v16) += *(unsigned __int8 *)(v17 + v16);
      ++v16;
    }
    while (v16 < *v11);
  }
  return result;
}

unint64_t sub_1CC42AB74(void *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = (float *)*((void *)a3 + 1);
  *((void *)a3 + 1) = 0;
  uint64_t v6 = a2 + 24;
  uint64_t v7 = *(void *)(a2 + 24);
  int v8 = *a3;
  int v9 = a3[1];
  LODWORD(v28) = *a3;
  HIDWORD(v28) = v9;
  unint64_t v29 = v5;
  *(void *)a3 = 0;
  int v10 = *(_DWORD *)(a2 + 40);
  if (!v10)
  {
LABEL_2:
    uint64_t v11 = operator new(0x58uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *uint64_t v11 = &unk_1F2612028;
    v11[3] = 0;
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    v11[4] = 0;
    v11[5] = v6;
    *((_DWORD *)v11 + 12) = v8;
    *((_DWORD *)v11 + 13) = v9;
    v11[7] = v5;
    sub_1CC42B184(v11 + 8);
  }
  unint64_t v30 = sub_1CD48BB60(v5, (uint64_t)&v5[v9 * v8]);
  unsigned int v13 = (v10 - 1) & sub_1CC42AF04(&v28, (int *)&v28 + 1, (uint64_t *)&v30);
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = v13;
    unint64_t v16 = *(void *)(v7 + 8 * v13);
    if (v16 < 2) {
      goto LABEL_12;
    }
    if (v8 != *(_DWORD *)(v16 + 24) || v9 != *(_DWORD *)(v16 + 28)) {
      goto LABEL_21;
    }
    if (!(v9 * v8)) {
      break;
    }
    uint64_t v17 = *(float **)(v16 + 32);
    uint64_t v18 = 4 * (v9 * v8);
    unint64_t v19 = v5;
    while (*v19 == *v17)
    {
      ++v19;
      ++v17;
      v18 -= 4;
      if (!v18) {
        goto LABEL_22;
      }
    }
LABEL_12:
    if (!v16) {
      goto LABEL_2;
    }
LABEL_21:
    int v20 = i + v15;
    unsigned int v13 = v20 & (v10 - 1);
  }
LABEL_22:
  uint64_t v21 = (void *)(v7 + 8 * v15);
  if (v21 == (void *)(*(void *)(a2 + 24) + 8 * *(unsigned int *)(a2 + 40))) {
    goto LABEL_2;
  }
  int v22 = *(std::__shared_weak_count **)(v16 + 8);
  if (v22 && (uint64_t v23 = std::__shared_weak_count::lock(v22)) != 0)
  {
    long long v24 = v23;
    *a1 = *v21 + 24;
    a1[1] = v23;
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v24);
    }
    unint64_t result = (unint64_t)v29;
    if (v29)
    {
      JUMPOUT(0x1D25D9CB0);
    }
  }
  else
  {
    long long v25 = (_DWORD *)sub_1CC428E54();
    return sub_1CC42AF04(v25, v26, v27);
  }
  return result;
}

unint64_t sub_1CC42AF04(_DWORD *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  uint64_t v4 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a1;
    int v9 = a2;
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v4 = &unk_1EBCBE000;
    a2 = v9;
    uint64_t v3 = a3;
    int v7 = v6;
    a1 = v11;
    if (v7)
    {
      unint64_t v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v8 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v8;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v4 = (void *)&unk_1EBCBE000;
      uint64_t v3 = a3;
      a1 = v11;
      a2 = v9;
    }
  }
  uint64_t v15 = v4[176];
  LODWORD(v12[0]) = *a1;
  return sub_1CC428D84((char *)v12, (_DWORD *)v12 + 1, (char *)v13, *a2, v3);
}

void sub_1CC42B018(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2612028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC42B038(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2612028;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC42B08C(void *a1)
{
  uint64_t v2 = a1[5];
  int v7 = a1 + 3;
  unint64_t v8 = 0;
  if (sub_1CC42B358(*(void *)v2, *(_DWORD *)(v2 + 16), (unint64_t *)&v7, &v8))
  {
    *unint64_t v8 = 1;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    MEMORY[0x1D25D9CB0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = a1[9];
  a1[9] = 0;
  if (v4) {
    MEMORY[0x1D25D9CB0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = a1[7];
  a1[7] = 0;
  if (v5) {
    MEMORY[0x1D25D9CB0](v5, 0x1000C8052888210);
  }
  int v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1CC42B184(void *a1)
{
  *a1 = 0;
  operator new[]();
}

uint64_t sub_1CC42B358(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
    goto LABEL_3;
  }
  int v10 = (_DWORD *)(*a3 + 24);
  uint64_t v11 = (int *)(*a3 + 28);
  unint64_t v26 = sub_1CD48BB60(*(void **)(*a3 + 32), *(void *)(*a3 + 32) + 4 * (*v11 * *v10));
  int v12 = sub_1CC42AF04(v10, v11, (uint64_t *)&v26);
  unsigned int v13 = 0;
  unsigned int v14 = (a2 - 1) & v12;
  unint64_t v15 = *a3;
  int v16 = 1;
  uint64_t result = 1;
  while (1)
  {
    uint64_t v5 = (unint64_t *)(a1 + 8 * v14);
    unint64_t v17 = *v5;
    if (v15 >= 2)
    {
      if (v17 >= 2)
      {
        int v18 = *(_DWORD *)(v15 + 24);
        if (v18 != *(_DWORD *)(v17 + 24)) {
          goto LABEL_17;
        }
        int v19 = *(_DWORD *)(v15 + 28);
        if (v19 != *(_DWORD *)(v17 + 28)) {
          goto LABEL_17;
        }
        uint64_t v20 = (v19 * v18);
        if (!v20)
        {
LABEL_23:
          uint64_t result = 1;
          goto LABEL_3;
        }
        uint64_t v21 = *(float **)(v15 + 32);
        int v22 = *(float **)(v17 + 32);
        uint64_t v23 = 4 * v20;
        while (*v21 == *v22)
        {
          ++v21;
          ++v22;
          v23 -= 4;
          if (!v23) {
            goto LABEL_3;
          }
        }
      }
    }
    else if (v15 == v17)
    {
      goto LABEL_23;
    }
    if (!v17) {
      break;
    }
LABEL_17:
    if (v13) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v17 == 1;
    }
    if (v24) {
      unsigned int v13 = (unint64_t *)(a1 + 8 * v14);
    }
    unsigned int v25 = v16 + v14;
    ++v16;
    unsigned int v14 = v25 & (a2 - 1);
  }
  uint64_t result = 0;
  if (v13) {
    uint64_t v5 = v13;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

void sub_1CC42B4AC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10) {
      bzero(v9, 8 * v10);
    }
    if (v3)
    {
      uint64_t v11 = 8 * v3;
      int v12 = (unint64_t *)v4;
      do
      {
        if (*v12 >= 2)
        {
          unsigned int v14 = 0;
          sub_1CC42B358(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
          *unsigned int v14 = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v13)
  {
    bzero(v9, 8 * v13);
  }
}

_OWORD *sub_1CC42B5F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *uint64_t result = v12;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v13 = 32 * v3;
      unsigned int v14 = (uint64_t *)v4;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = v14[1];
        if ((*v14 != -4096 || v16 != -4096) && (v15 != -8192 || v16 != -8192))
        {
          uint64_t v21 = 0;
          sub_1CC42A670(*(void *)a1, *(_DWORD *)(a1 + 16), v15, v16, &v21);
          unint64_t v17 = v21;
          *uint64_t v21 = *v14;
          *(_OWORD *)(v17 + 1) = *(_OWORD *)(v14 + 1);
          v17[3] = v14[3];
          v14[2] = 0;
          void v14[3] = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 32 * v18;
    int64x2_t v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *uint64_t result = v20;
      result += 2;
      v19 -= 32;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1CC42B75C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64x2_t v12 = 0;
  uint64_t result = sub_1CC42A384(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  int v7 = v12;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (result)
  {
    char v9 = 0;
    goto LABEL_9;
  }
  int v10 = *(_DWORD *)(a2 + 8);
  if (4 * v10 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v10 - *(_DWORD *)(a2 + 12) > v8 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC42B878(a2, v8);
  int64x2_t v12 = 0;
  uint64_t result = sub_1CC42A384(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  int v7 = v12;
LABEL_5:
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096 || v7[1] != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *int v7 = *a3;
  v7[1] = a3[1];
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v9 = 1;
LABEL_9:
  uint64_t v11 = *(void *)a2 + 16 * v8;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v9;
  return result;
}

void sub_1CC42B878(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  char v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10) {
      memset_pattern16(v9, &unk_1CFAC3070, 16 * v10);
    }
    if (v3)
    {
      uint64_t v11 = 16 * v3;
      int64x2_t v12 = (uint64_t *)(v4 + 8);
      do
      {
        uint64_t v13 = *(v12 - 1);
        uint64_t v14 = *v12;
        if ((v13 != -4096 || v14 != -4096) && (v13 != -8192 || v14 != -8192))
        {
          unint64_t v17 = 0;
          sub_1CC42A384(*(void *)a1, *(_DWORD *)(a1 + 16), v13, v14, &v17);
          uint64_t v15 = v17;
          void *v17 = *(v12 - 1);
          v15[1] = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    memset_pattern16(v9, &unk_1CFAC3070, 16 * v16);
  }
}

void *sub_1CC42B9E8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD56EDB4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    return memset(result, 255, 8 * v10);
  }
  return result;
}

void sub_1CC42BACC()
{
}

uint64_t sub_1CC42BAE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  uint64_t v52 = a2[2];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a2 + 16) + 176))(*(void *)(*a2 + 16));
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  v56[0] = 0;
  uint64_t v54 = result;
  *(_DWORD *)((char *)v56 + 7) = 0;
  uint64_t v51 = v3;
  uint64_t v5 = *(void *)(v3 + 328);
  uint64_t v50 = v3 + 320;
  if (v5 != v3 + 320)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 56);
      if (v6 != v5 + 48) {
        break;
      }
LABEL_69:
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v50) {
        return result;
      }
    }
    unsigned int v53 = (v5 >> 4) ^ (v5 >> 9);
    while (1)
    {
      uint64_t result = llvm::CoalescerPair::setRegisters((llvm::CoalescerPair *)&v54, (const llvm::MachineInstr *)v6);
      if (result)
      {
        int v7 = v55;
        int v8 = HIDWORD(v55);
        if (HIDWORD(v55) != v55)
        {
          uint64_t v9 = *(void *)(v52 + 248);
          if (v9)
          {
            int v10 = *(_DWORD *)(v9 + 176);
            if (v10)
            {
              uint64_t v11 = *(void *)(v9 + 160);
              int v12 = v10 - 1;
              unsigned int v13 = v12 & v53;
              uint64_t v14 = *(void *)(v11 + 16 * (v12 & v53));
              if (v14 != v5)
              {
                int v32 = 1;
                do
                {
                  if (v14 == -4096) {
                    break;
                  }
                  unsigned int v33 = v13 + v32++;
                  unsigned int v13 = v33 & v12;
                  uint64_t v14 = *(void *)(v11 + 16 * v13);
                }
                while (v14 != v5);
              }
            }
          }
          if (v57)
          {
            uint64_t v15 = a2[3];
            uint64_t v16 = *((unsigned int *)a2 + 10);
            if (v16)
            {
              LODWORD(v17) = (v16 - 1) & (37 * v55);
              uint64_t v18 = (int *)(v15 + 8 * v17);
              int v19 = *v18;
              if (v55 != *v18)
              {
                int v34 = 1;
                do
                {
                  if (v19 == -1) {
                    goto LABEL_53;
                  }
                  int v35 = v17 + v34++;
                  uint64_t v17 = v35 & (v16 - 1);
                  int v19 = *(_DWORD *)(v15 + 8 * v17);
                }
                while (v55 != v19);
                uint64_t v18 = (int *)(v15 + 8 * v17);
              }
            }
            else
            {
LABEL_53:
              uint64_t v18 = (int *)(v15 + 8 * v16);
            }
            int64x2_t v20 = (int *)(v15 + 8 * v16);
            if (v20 == v18)
            {
              unsigned int v21 = -1;
              if (!v16) {
                goto LABEL_36;
              }
            }
            else
            {
              unsigned int v21 = v18[1];
              if (!v16) {
                goto LABEL_36;
              }
            }
            unsigned int v28 = v16 - 1;
            LODWORD(v16) = (v16 - 1) & (37 * HIDWORD(v55));
            unint64_t v29 = (int *)(v15 + 8 * v16);
            int v30 = *v29;
            if (HIDWORD(v55) != *v29)
            {
              int v36 = 1;
              do
              {
                if (v30 == -1) {
                  goto LABEL_36;
                }
                int v37 = v16 + v36++;
                uint64_t v16 = v37 & v28;
                int v30 = *(_DWORD *)(v15 + 8 * v16);
              }
              while (HIDWORD(v55) != v30);
              unint64_t v29 = (int *)(v15 + 8 * v16);
            }
            if (v20 == v29) {
LABEL_36:
            }
              int v31 = -1;
            else {
              int v31 = v29[1];
            }
            uint64_t v38 = a2[16] + 88 * v21;
            int v39 = *(unsigned int **)(v38 + 64);
            uint64_t v40 = *(unsigned int **)(v38 + 72);
            if (v39 != v40)
            {
              uint64_t v41 = a2[22];
              while (1)
              {
                unsigned int v42 = *v39;
                if (*(_DWORD *)(v41 + 48 * *v39 + 20) == v31 || *(_DWORD *)(v41 + 48 * v42 + 24) == v31) {
                  break;
                }
                if (++v39 == v40) {
                  goto LABEL_45;
                }
              }
              if (v42 != -1) {
                operator new[]();
              }
            }
LABEL_45:
            operator new[]();
          }
          uint64_t result = sub_1CB946A80(*(void **)(v51 + 40), v55);
          if (result) {
            break;
          }
        }
      }
LABEL_46:
      if (!v6 || (*(unsigned char *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          uint64_t v6 = *(void *)(v6 + 8);
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == v5 + 48) {
        goto LABEL_69;
      }
    }
    uint64_t v22 = a2[3];
    uint64_t v23 = *((unsigned int *)a2 + 10);
    if (v23)
    {
      LODWORD(v24) = (v23 - 1) & (37 * v8);
      unsigned int v25 = (int *)(v22 + 8 * v24);
      int v26 = *v25;
      if (v8 == *v25) {
        goto LABEL_18;
      }
      int v48 = 1;
      while (v26 != -1)
      {
        int v49 = v24 + v48++;
        uint64_t v24 = v49 & (v23 - 1);
        int v26 = *(_DWORD *)(v22 + 8 * v24);
        if (v8 == v26)
        {
          unsigned int v25 = (int *)(v22 + 8 * v24);
          goto LABEL_18;
        }
      }
    }
    unsigned int v25 = (int *)(v22 + 8 * v23);
LABEL_18:
    if ((int *)(v22 + 8 * v23) == v25) {
      unsigned int v27 = -1;
    }
    else {
      unsigned int v27 = v25[1];
    }
    float v43 = *(unsigned int **)(a2[16] + 88 * v27 + 48);
    uint64_t v44 = *v43;
    if (v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = *((void *)v43 + 1);
      uint64_t v47 = 4 * v44;
      do
      {
        if (*(_DWORD *)(v46 + v45) == v7) {
          operator new[]();
        }
        v45 += 4;
      }
      while (v47 != v45);
    }
    goto LABEL_46;
  }
  return result;
}

void sub_1CC42C148(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v38 = *a3;
  uint64_t v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v39 = v5;
  sub_1CC42AB74(&v40, a1 + 72, (int *)&v38);
  uint64_t v6 = v39;
  uint64_t v39 = 0;
  if (v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8052888210);
  }
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = v40;
  if (v7)
  {
    uint64_t v9 = *(void *)(*(void *)v7 + 176) + 48 * a2;
    unsigned int v10 = *(_DWORD *)(v9 + 20);
    unsigned int v11 = *(_DWORD *)(v9 + 24);
    uint64_t v12 = *(void *)(*(void *)v7 + 128);
    uint64_t v13 = *(void *)v9;
    uint64_t v14 = v12 + 88 * v10;
    int v16 = *(_DWORD *)(v14 + 20);
    uint64_t v15 = (unsigned int *)(v14 + 20);
    v15[1] -= *(_DWORD *)(v13 + 20);
    if (v16)
    {
      unint64_t v17 = 0;
      uint64_t v18 = *(void *)(v13 + 24);
      uint64_t v19 = *(void *)(v12 + 88 * v10 + 32);
      do
      {
        *(_DWORD *)(v19 + 4 * v17) -= *(unsigned __int8 *)(v18 + v17);
        ++v17;
        unint64_t v20 = *v15;
      }
      while (v17 < v20);
    }
    else
    {
      LODWORD(v20) = 0;
    }
    uint64_t v22 = v12 + 88 * v11;
    int v24 = *(_DWORD *)(v22 + 20);
    uint64_t v23 = (unsigned int *)(v22 + 20);
    v23[1] -= *(_DWORD *)(v13 + 16);
    if (v24)
    {
      unint64_t v25 = 0;
      uint64_t v26 = *(void *)(v13 + 32);
      uint64_t v27 = *(void *)(v12 + 88 * v11 + 32);
      do
      {
        *(_DWORD *)(v27 + 4 * v25) -= *(unsigned __int8 *)(v26 + v25);
        ++v25;
        unint64_t v28 = *v23;
      }
      while (v25 < v28);
      LODWORD(v20) = *v15;
    }
    else
    {
      LODWORD(v28) = 0;
    }
    v15[1] += *(_DWORD *)(v8 + 20);
    if (v20)
    {
      unint64_t v29 = 0;
      uint64_t v30 = *(void *)(v8 + 24);
      uint64_t v31 = *(void *)(v12 + 88 * v10 + 32);
      do
      {
        *(_DWORD *)(v31 + 4 * v29) += *(unsigned __int8 *)(v30 + v29);
        ++v29;
      }
      while (v29 < *v15);
      LODWORD(v28) = *v23;
    }
    unsigned int v21 = a2;
    v23[1] += *(_DWORD *)(v8 + 16);
    if (v28)
    {
      unint64_t v32 = 0;
      uint64_t v33 = *(void *)(v8 + 32);
      uint64_t v34 = *(void *)(v12 + 88 * v11 + 32);
      do
      {
        *(_DWORD *)(v34 + 4 * v32) += *(unsigned __int8 *)(v33 + v32);
        ++v32;
      }
      while (v32 < *v23);
    }
    uint64_t v35 = v12 + 88 * v11 + 16;
    sub_1CC42C404(v7, v10, v12 + 88 * v10 + 16);
    sub_1CC42C404(v7, v11, v35);
  }
  else
  {
    unsigned int v21 = a2;
  }
  int v36 = (void *)(*(void *)(a1 + 176) + 48 * v21);
  int v37 = v41;
  sub_1CC42A5F0(v36, v8, (uint64_t)v41);
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
}

uint64_t sub_1CC42C404(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (void **)result;
  if (*(void *)(*(void *)(*(void *)result + 128) + 88 * a2 + 72)
     - *(void *)(*(void *)(*(void *)result + 128) + 88 * a2 + 64) == 12)
  {
    uint64_t result = sub_1CC42C610(result, a2);
    uint64_t v6 = v4 + 2;
    uint64_t v5 = v4[2];
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v7 = v5;
          unsigned int v8 = *((_DWORD *)v5 + 7);
          if (v8 <= a2) {
            break;
          }
          uint64_t v5 = (void *)*v7;
          uint64_t v6 = v7;
          if (!*v7) {
            goto LABEL_17;
          }
        }
        if (v8 >= a2) {
          break;
        }
        uint64_t v5 = (void *)v7[1];
        if (!v5)
        {
          uint64_t v6 = v7 + 1;
          goto LABEL_17;
        }
      }
      int v13 = 3;
      goto LABEL_34;
    }
    uint64_t v7 = v4 + 2;
LABEL_17:
    uint64_t v14 = operator new(0x20uLL);
    v14[7] = a2;
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v7;
    *uint64_t v6 = v14;
    uint64_t v15 = (void *)*v4[1];
    if (v15)
    {
      v4[1] = v15;
      uint64_t v14 = (_DWORD *)*v6;
    }
    uint64_t result = (uint64_t)sub_1CB8358B8(v4[2], (uint64_t *)v14);
    int v16 = v4 + 3;
    int v13 = 3;
LABEL_33:
    ++*v16;
LABEL_34:
    *(_DWORD *)((*v4)[16] + 88 * a2 + 16) = v13;
    return result;
  }
  if (*(_DWORD *)a3 == 1)
  {
    uint64_t v9 = *(unsigned int *)(a3 + 4);
    if (*(_DWORD *)(a3 + 8) < v9) {
      goto LABEL_22;
    }
    uint64_t v10 = *(void *)(a3 + 16);
    if (v9)
    {
      uint64_t v11 = 4 * v9;
      uint64_t v12 = *(_DWORD **)(a3 + 16);
      while (*v12)
      {
        ++v12;
        v11 -= 4;
        if (!v11)
        {
          uint64_t v12 = (_DWORD *)(v10 + 4 * v9);
          break;
        }
      }
    }
    else
    {
      uint64_t v12 = *(_DWORD **)(a3 + 16);
    }
    if (v9 != ((uint64_t)v12 - v10) >> 2)
    {
LABEL_22:
      uint64_t result = sub_1CC42C610(result, a2);
      uint64_t v18 = v4 + 5;
      unint64_t v17 = v4[5];
      if (v17)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v19 = v17;
            unsigned int v20 = *((_DWORD *)v17 + 7);
            if (v20 <= a2) {
              break;
            }
            unint64_t v17 = (void *)*v19;
            uint64_t v18 = v19;
            if (!*v19) {
              goto LABEL_30;
            }
          }
          if (v20 >= a2) {
            break;
          }
          unint64_t v17 = (void *)v19[1];
          if (!v17)
          {
            uint64_t v18 = v19 + 1;
            goto LABEL_30;
          }
        }
        int v13 = 2;
        goto LABEL_34;
      }
      uint64_t v19 = v4 + 5;
LABEL_30:
      unsigned int v21 = operator new(0x20uLL);
      v21[7] = a2;
      *(void *)unsigned int v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = v19;
      void *v18 = v21;
      uint64_t v22 = (void *)*v4[4];
      if (v22)
      {
        v4[4] = v22;
        unsigned int v21 = (_DWORD *)*v18;
      }
      uint64_t result = (uint64_t)sub_1CB8358B8(v4[5], (uint64_t *)v21);
      int v16 = v4 + 6;
      int v13 = 2;
      goto LABEL_33;
    }
  }
  return result;
}

uint64_t sub_1CC42C610(uint64_t result, unsigned int a2)
{
  unsigned int v4 = a2;
  int v2 = *(_DWORD *)(*(void *)(*(void *)result + 128) + 88 * a2 + 16);
  switch(v2)
  {
    case 1:
      uint64_t v3 = result + 56;
      return sub_1CD50BF28(v3, &v4);
    case 2:
      uint64_t v3 = result + 32;
      return sub_1CD50BF28(v3, &v4);
    case 3:
      uint64_t v3 = result + 8;
      return sub_1CD50BF28(v3, &v4);
  }
  return result;
}

void *sub_1CC42C67C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v43[0] = a2;
  uint64_t v12 = (uint64_t *)(a1 + 256);
  sub_1CD50BF28(a1 + 256, v43);
  uint64_t v13 = v43[0] & 0x7FFFFFFF;
  uint64_t v14 = (void *)(a5 + 408);
  uint64_t v15 = *(unsigned int *)(a5 + 416);
  if ((v43[0] & 0x7FFFFFFF) >= v15)
  {
    sub_1CB9153B8(a5 + 408, v13 - v15 + 1, *(void *)(a5 + 424));
LABEL_13:
    operator new();
  }
  uint64_t v16 = *(void *)(*v14 + 8 * v13);
  if (!v16) {
    goto LABEL_13;
  }
  v26[0] = &unk_1F260CAB0;
  v26[1] = v16;
  uint64_t v17 = *(void *)(a4 + 40);
  uint64_t v27 = a3;
  uint64_t v28 = v17;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a4 + 16) + 104))(*(void *)(a4 + 16));
  uint64_t v32 = 0;
  unsigned int v33 = *(_DWORD *)(a3 + 8);
  char v34 = 0;
  uint64_t v35 = a1 + 304;
  int v36 = v40;
  int v37 = v40;
  uint64_t v38 = 4;
  int v39 = 0;
  v40[4] = v42;
  v40[5] = v42;
  v40[6] = 4;
  int v41 = 0;
  *(void *)(v28 + 8) = v26;
  (*(void (**)(uint64_t, void *))(*(void *)a7 + 24))(a7, v26);
  (*(void (**)(void))(**(void **)(a4 + 16) + 176))(*(void *)(a4 + 16));
  uint64_t v18 = *(unsigned int *)(v27 + 8);
  if (v33 != v18)
  {
    unsigned int v20 = (_DWORD *)(*(void *)v27 + 4 * v33);
    uint64_t v21 = 4 * v18 - 4 * v33;
    do
    {
      uint64_t v22 = *v20 & 0x7FFFFFFF;
      uint64_t v23 = *(unsigned int *)(a5 + 416);
      if ((*v20 & 0x7FFFFFFFu) >= v23)
      {
        sub_1CB9153B8(a5 + 408, v22 - v23 + 1, *(void *)(a5 + 424));
LABEL_11:
        operator new();
      }
      uint64_t v24 = *(void *)(*v14 + 8 * v22);
      if (!v24) {
        goto LABEL_11;
      }
      sub_1CC42CA88(v12, *(_DWORD *)(v24 + 112), *(_DWORD *)(v24 + 112));
      ++v20;
      v21 -= 4;
    }
    while (v21);
  }
  return sub_1CD516CC4(v26);
}

uint64_t *sub_1CC42CA88(uint64_t *result, unsigned int a2, int a3)
{
  unsigned int v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (void *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = result + 1;
LABEL_9:
    uint64_t v9 = operator new(0x20uLL);
    _OWORD v9[7] = a3;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *unsigned int v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    uint64_t result = sub_1CB8358B8((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void sub_1CC42CB40(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 4) = a2 - 1;
  operator new[]();
}

unint64_t sub_1CC42CBD4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unsigned int v53 = a1;
    int v54 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v3 = &unk_1EBCBE000;
    int v55 = v54;
    a1 = v53;
    if (v55)
    {
      unint64_t v56 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v56 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v56;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v3 = (void *)&unk_1EBCBE000;
      a1 = v53;
    }
  }
  unint64_t v4 = v3[176];
  if (a1 == a2)
  {
    unint64_t v7 = 0;
    return sub_1CBAE06B8(&v63, v7, v4);
  }
  else
  {
    for (unint64_t i = 0; ; i += 8)
    {
      uint64_t v6 = *a1;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
      {
        uint64_t v9 = a1;
        unint64_t v10 = v4;
        int v11 = __cxa_guard_acquire(&qword_1EBCBE588);
        uint64_t v3 = &unk_1EBCBE000;
        unint64_t v4 = v10;
        int v12 = v11;
        a1 = v9;
        if (v12)
        {
          unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v13 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v13;
          __cxa_guard_release(&qword_1EBCBE588);
          uint64_t v3 = (void *)&unk_1EBCBE000;
          unint64_t v4 = v10;
          a1 = v9;
        }
      }
      if (i > 0x38) {
        break;
      }
      unint64_t v7 = i + 8;
      unint64_t v8 = 0x9DDFEA08EB382D69 * (v3[176] + 8 * v6);
      *(uint64_t *)((char *)&v63 + i) = 0x9DDFEA08EB382D69
                                     * ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v8 ^ (v8 >> 47))) >> 47));
      if (++a1 == a2) {
        return sub_1CBAE06B8(&v63, v7, v4);
      }
    }
    unint64_t v15 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v16 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v17 = v4 ^ (v4 >> 47);
    unint64_t v18 = v4 ^ (((0x9DDFEA08EB382D69 * (v17 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v17 ^ (0xB492B66FBE98F273 * v4)));
    uint64_t v19 = v16 + v4 + v64;
    unint64_t v20 = v68 + v16 - 0x4B6D499041670D8DLL * __ROR8__(v69 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    uint64_t v21 = v63 - 0x6D8ED9027DD26057 * v4;
    uint64_t v22 = v17 + v21;
    uint64_t v23 = v21 + v64 + v65;
    uint64_t v24 = __ROR8__(v23, 44) + v21;
    unint64_t v25 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v18) ^ ((0x9DDFEA08EB382D69 * v18) >> 47));
    unint64_t v26 = (0xB492B66FBE98F273 * __ROR8__(v19, 37)) ^ v25;
    uint64_t v27 = __ROR8__(v17 - 0x622015F714C7D297 * (v15 ^ (v15 >> 47)), 33);
    uint64_t v28 = v24 + __ROR8__(v26 + v22 + v66, 21);
    unint64_t v29 = 0xB492B66FBE98F273 * v27;
    uint64_t v30 = v23 + v66;
    uint64_t v31 = v25 + v67 - 0x4B6D499041670D8DLL * v27;
    uint64_t v32 = __ROR8__(v68 + v69 + v31, 44) + v31 + __ROR8__(v20 + v65 + v70 + v31, 21);
    uint64_t v33 = v68 + v69 + v31 + v70;
    unint64_t v34 = 64;
    if (a1 != a2)
    {
      unint64_t v35 = v26;
      do
      {
        unint64_t v36 = 0;
        do
        {
          uint64_t v37 = *a1;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v40 = a1;
            uint64_t v59 = v30;
            uint64_t v61 = v28;
            unint64_t v57 = v35;
            uint64_t v58 = v32;
            int v41 = __cxa_guard_acquire(&qword_1EBCBE588);
            unint64_t v35 = v57;
            uint64_t v32 = v58;
            uint64_t v30 = v59;
            uint64_t v28 = v61;
            uint64_t v3 = &unk_1EBCBE000;
            int v42 = v41;
            a1 = v40;
            if (v42)
            {
              unint64_t v43 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v43 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v43;
              __cxa_guard_release(&qword_1EBCBE588);
              unint64_t v35 = v57;
              uint64_t v32 = v58;
              uint64_t v30 = v59;
              uint64_t v28 = v61;
              uint64_t v3 = (void *)&unk_1EBCBE000;
              a1 = v40;
            }
          }
          if (v36 > 0x38)
          {
            uint64_t v38 = 64;
            goto LABEL_29;
          }
          uint64_t v38 = v36 + 8;
          unint64_t v39 = 0x9DDFEA08EB382D69 * (v3[176] + 8 * v37);
          *(uint64_t *)((char *)&v63 + v36) = 0x9DDFEA08EB382D69
                                           * ((0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                                                             * (v39 ^ (v39 >> 47))) >> 47));
          ++a1;
          v36 += 8;
        }
        while (a1 != a2);
        if ((v38 & 0x7FFFFFFFFFFFFFB8) != 0)
        {
          uint64_t v60 = v30;
          uint64_t v62 = v28;
          uint64_t v44 = v32;
          unint64_t v45 = v35;
          sub_1CBFFD29C(&v63, (unsigned char *)&v63 + v38, &v71);
          unint64_t v35 = v45;
          uint64_t v30 = v60;
          uint64_t v28 = v62;
          uint64_t v32 = v44;
          uint64_t v3 = (void *)&unk_1EBCBE000;
        }
        a1 = a2;
LABEL_29:
        uint64_t v46 = v20 + v29 + v30 + v64;
        unint64_t v20 = v68 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v28 + v20 + v69, 42);
        uint64_t v47 = v63 - 0x4B6D499041670D8DLL * v28;
        unint64_t v26 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v32;
        uint64_t v28 = __ROR8__(v47 + v64 + v65, 44) + v47 + __ROR8__(v26 + v33 + v47 + v66, 21);
        unint64_t v29 = 0xB492B66FBE98F273 * __ROR8__(v33 + v35, 33);
        uint64_t v30 = v47 + v64 + v65 + v66;
        unint64_t v48 = v29 + v32 + v67;
        uint64_t v32 = __ROR8__(v68 + v69 + v48, 44) + v48 + __ROR8__(v20 + v65 + v48 + v70, 21);
        uint64_t v33 = v68 + v69 + v48 + v70;
        v34 += v38;
        unint64_t v35 = v26;
      }
      while (a1 != a2);
    }
    unint64_t v49 = 0x9DDFEA08EB382D69
        * (v33 ^ ((0x9DDFEA08EB382D69 * (v30 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ v33)));
    uint64_t v50 = v26 - 0x4B6D499041670D8DLL * (v20 ^ (v20 >> 47)) - 0x622015F714C7D297 * (v49 ^ (v49 >> 47));
    unint64_t v51 = 0x9DDFEA08EB382D69
        * (v32 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v32)));
    uint64_t v52 = v29 - 0x4B6D499041670D8DLL * (v34 ^ (v34 >> 47)) - 0x622015F714C7D297 * (v51 ^ (v51 >> 47));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v52 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v52)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v52)))) ^ ((0x9DDFEA08EB382D69 * (v52 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v52)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v52)))) >> 47));
  }
}

void sub_1CC42D14C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2612090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC42D16C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2612090;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC42D1C0(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v5 = a1 + 3;
  uint64_t v6 = 0;
  if (sub_1CC42D278(*(void *)v2, *(_DWORD *)(v2 + 16), (unint64_t *)&v5, &v6))
  {
    *uint64_t v6 = 1;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    MEMORY[0x1D25D9CB0](v3, 0x1000C8052888210);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_1CC42D278(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  if (!a2)
  {
    unint64_t v17 = 0;
    uint64_t result = 0;
    goto LABEL_26;
  }
  unint64_t v8 = *a3;
  unint64_t v9 = sub_1CC42CBD4(*(unsigned int **)(*a3 + 32), (unsigned int *)(*(void *)(*a3 + 32) + 4 * *(unsigned int *)(*a3 + 24)));
  unint64_t v10 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v29 = v9;
    int v26 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v10 = &unk_1EBCBE000;
    int v27 = v26;
    unint64_t v9 = v29;
    if (v27)
    {
      unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v28 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v28;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v10 = (void *)&unk_1EBCBE000;
      unint64_t v9 = v29;
    }
  }
  int v11 = 0;
  LODWORD(v30) = *(_DWORD *)(v8 + 24);
  HIDWORD(v30) = v9;
  uint64_t v12 = __ROR8__(v9 + 12, 12);
  unint64_t v13 = 0x9DDFEA08EB382D69
      * (v12 ^ ((0x9DDFEA08EB382D69 * (v10[176] ^ v30 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10[176] ^ v30 ^ v12)));
  unsigned int v14 = (a2 - 1) & ((-348639895 * ((v13 >> 47) ^ v13)) ^ v9);
  unint64_t v15 = *a3;
  for (int i = 1; ; ++i)
  {
    unint64_t v17 = (unint64_t *)(a1 + 8 * v14);
    unint64_t v18 = *v17;
    if (v15 < 2)
    {
      if (v15 == v18) {
        goto LABEL_22;
      }
      goto LABEL_8;
    }
    if (v18 < 2) {
      goto LABEL_8;
    }
    uint64_t v19 = *(unsigned int *)(v15 + 24);
    if (v19 == *(_DWORD *)(v18 + 24)) {
      break;
    }
LABEL_16:
    if (v11) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v18 == 1;
    }
    if (v23) {
      int v11 = (unint64_t *)(a1 + 8 * v14);
    }
    unsigned int v24 = i + v14;
    unsigned int v14 = v24 & (a2 - 1);
  }
  if (!v19)
  {
LABEL_22:
    uint64_t result = 1;
    goto LABEL_26;
  }
  unint64_t v20 = *(_DWORD **)(v15 + 32);
  uint64_t v21 = *(_DWORD **)(v18 + 32);
  uint64_t v22 = 4 * v19;
  while (*v20 == *v21)
  {
    ++v20;
    ++v21;
    v22 -= 4;
    if (!v22) {
      goto LABEL_22;
    }
  }
LABEL_8:
  if (v18) {
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v11) {
    unint64_t v17 = v11;
  }
LABEL_26:
  *a4 = v17;
  return result;
}

void sub_1CC42D4A0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  unint64_t v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10) {
      bzero(v9, 8 * v10);
    }
    if (v3)
    {
      uint64_t v11 = 8 * v3;
      uint64_t v12 = (unint64_t *)v4;
      do
      {
        if (*v12 >= 2)
        {
          unsigned int v14 = 0;
          sub_1CC42D278(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
          *unsigned int v14 = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v13)
  {
    bzero(v9, 8 * v13);
  }
}

void sub_1CC42D5E4(void *a1)
{
  if (a1)
  {
    sub_1CC42D5E4(*a1);
    sub_1CC42D5E4(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_1CC42D640(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 128) + 88 * a2;
  uint64_t v3 = *(unsigned int **)(v2 + 64);
  uint64_t v4 = *(unsigned int **)(v2 + 72);
  if (v3 != v4)
  {
    unint64_t v6 = (void *)result;
    do
    {
      unsigned int v7 = *v3;
      uint64_t v8 = v6[22];
      unsigned int v9 = *(_DWORD *)(v8 + 48 * *v3 + 20);
      if (v9 == a2) {
        unsigned int v9 = *(_DWORD *)(v8 + 48 * v7 + 24);
      }
      uint64_t result = sub_1CC42D6C4(v6, v7, v9);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_1CC42D6C4(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = a1[15];
  if (result)
  {
    uint64_t v6 = *(void *)(*(void *)result + 128);
    unsigned int v7 = a2;
    uint64_t v8 = *(void *)(*(void *)result + 176) + 48 * a2;
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)v8 + 16;
    LODWORD(v8) = *(_DWORD *)(v8 + 24);
    BOOL v11 = v8 == a3;
    if (v8 == a3) {
      uint64_t v12 = (int *)v10;
    }
    else {
      uint64_t v12 = (int *)(v9 + 20);
    }
    int v13 = *v12;
    uint64_t v14 = v6 + 88 * a3;
    int v16 = *(_DWORD *)(v14 + 20);
    int v17 = *(_DWORD *)(v14 + 24);
    unint64_t v15 = (unsigned int *)(v14 + 20);
    unint64_t v18 = (uint64_t *)(v9 + 32);
    uint64_t v19 = (uint64_t *)(v9 + 24);
    if (!v11) {
      unint64_t v18 = v19;
    }
    v15[1] = v17 - v13;
    if (v16)
    {
      unint64_t v20 = 0;
      uint64_t v21 = *v18;
      uint64_t v22 = *(void *)(v6 + 88 * a3 + 32);
      do
      {
        *(_DWORD *)(v22 + 4 * v20) -= *(unsigned __int8 *)(v21 + v20);
        ++v20;
      }
      while (v20 < *v15);
    }
    uint64_t result = sub_1CC42C404(result, a3, v6 + 88 * a3 + 16);
  }
  else
  {
    unsigned int v7 = a2;
  }
  uint64_t v23 = a1[22];
  if (*(_DWORD *)(v23 + 48 * v7 + 20) == a3)
  {
    uint64_t v24 = v23 + 48 * v7;
    uint64_t v27 = *(void *)(v24 + 32);
    unint64_t v25 = (void *)(v24 + 32);
    uint64_t v26 = v27;
    uint64_t v28 = a1[16] + 88 * a3;
    uint64_t v30 = *(void *)(v28 + 64);
    uint64_t v29 = *(void *)(v28 + 72);
    LODWORD(v27) = *(_DWORD *)(v29 - 4);
    uint64_t v31 = v29 - 4;
    int v32 = v27;
    uint64_t v33 = v23 + 48 * v27;
    BOOL v11 = *(_DWORD *)(v33 + 20) == a3;
    unint64_t v34 = (void *)(v33 + 40);
    unint64_t v35 = (void *)(v33 + 32);
    if (!v11) {
      unint64_t v35 = v34;
    }
    *unint64_t v35 = v26;
    *(_DWORD *)(v30 + 4 * v26) = v32;
    *(void *)(v28 + 72) = v31;
  }
  else
  {
    uint64_t v36 = v23 + 48 * v7;
    uint64_t v38 = *(void *)(v36 + 40);
    unint64_t v25 = (void *)(v36 + 40);
    uint64_t v37 = v38;
    unsigned int v39 = *((_DWORD *)v25 - 4);
    uint64_t v40 = a1[16] + 88 * v39;
    uint64_t v42 = *(void *)(v40 + 64);
    uint64_t v41 = *(void *)(v40 + 72);
    LODWORD(v38) = *(_DWORD *)(v41 - 4);
    uint64_t v43 = v41 - 4;
    int v44 = v38;
    uint64_t v45 = v23 + 48 * v38;
    BOOL v11 = *(_DWORD *)(v45 + 20) == v39;
    uint64_t v46 = (void *)(v45 + 40);
    uint64_t v47 = (void *)(v45 + 32);
    if (!v11) {
      uint64_t v47 = v46;
    }
    *uint64_t v47 = v37;
    *(_DWORD *)(v42 + 4 * v37) = v44;
    *(void *)(v40 + 72) = v43;
  }
  *unint64_t v25 = -1;
  return result;
}

void sub_1CC42D854(_DWORD *a1, int *a2)
{
  int v2 = *a2;
  *a1 = a2[1];
  a1[1] = v2;
  operator new[]();
}

void *sub_1CC42D914(void *a1)
{
  int v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[22];
  if (v3)
  {
    uint64_t v4 = a1[23];
    unint64_t v5 = (void *)a1[22];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v4 - 40);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 48;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)a1[22];
    }
    a1[23] = v3;
    operator delete(v5);
  }
  unsigned int v7 = (void *)a1[19];
  if (v7)
  {
    a1[20] = v7;
    operator delete(v7);
  }
  uint64_t v8 = a1[16];
  if (v8)
  {
    uint64_t v9 = a1[17];
    uint64_t v10 = (void *)a1[16];
    if (v9 != v8)
    {
      do
      {
        BOOL v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(void *)(v9 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v12 = *(std::__shared_weak_count **)(v9 - 32);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        uint64_t v13 = *(void *)(v9 - 56);
        *(void *)(v9 - 56) = 0;
        if (v13) {
          MEMORY[0x1D25D9CB0](v13, 0x1000C8052888210);
        }
        uint64_t v14 = *(std::__shared_weak_count **)(v9 - 80);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v9 -= 88;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)a1[16];
    }
    a1[17] = v8;
    operator delete(v10);
  }
  MEMORY[0x1D25D9CD0](a1[12], 8);
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[6], 8);
  MEMORY[0x1D25D9CD0](a1[3], 4);
  return a1;
}

void sub_1CC42DAFC(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC42DBA4(uint64_t a1, uint64_t __c)
{
  for (uint64_t i = __c; i < *(_DWORD *)(a1 + 4); uint64_t i = (i + 1))
  {
    uint64_t v4 = *(__int32 ***)(a1 + 8);
    unint64_t v5 = v4[1];
    uint64_t v6 = wmemchr(*v4, i, v5 - *v4);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = v5;
    }
    if (v7 == v4[1]) {
      break;
    }
  }
  return i;
}

uint64_t sub_1CC42DC1C()
{
  qword_1EBCD2B58 = 0;
  unk_1EBCD2B60 = "pbqp";
  qword_1EBCD2B68 = 4;
  unk_1EBCD2B70 = "PBQP register allocator";
  qword_1EBCD2B78 = 23;
  unk_1EBCD2B80 = llvm::createDefaultPBQPRegisterAllocator;
  sub_1CC410D90(&llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry, &qword_1EBCD2B58);
  __cxa_atexit((void (*)(void *))sub_1CC4108A4, &qword_1EBCD2B58, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Attempt coalescing during PBQP register allocation.";
  v4.n128_u64[1] = 51;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD2B88, "pbqp-coalescing", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD2B88, &dword_1CB82C000);
}

float64_t llvm::RegAllocScore::operator+=(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = a1[1];
  *a1 = vaddq_f64(*a2, *a1);
  double v3 = a1[2].f64[1];
  a1[2].f64[0] = a2[2].f64[0] + a1[2].f64[0];
  a1[1] = vaddq_f64(a2[1], v2);
  float64_t result = a2[2].f64[1] + v3;
  a1[2].f64[1] = result;
  return result;
}

BOOL llvm::RegAllocScore::operator==(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[4] == a2[4] && a1[3] == a2[3] && a1[5] == a2[5];
}

BOOL llvm::RegAllocScore::operator!=(double *a1, double *a2)
{
  return !llvm::RegAllocScore::operator==(a1, a2);
}

double llvm::RegAllocScore::getScore(llvm::RegAllocScore *this)
{
  return *(double *)&qword_1EBD05C20 * *(double *)this
       + 0.0
       + *(double *)&qword_1EBD05CE8 * *((double *)this + 1)
       + *(double *)&xmmword_1EBD05DB0 * *((double *)this + 2)
       + (*(double *)&qword_1EBD05CE8 + *(double *)&xmmword_1EBD05DB0) * *((double *)this + 4)
       + *(double *)&xmmword_1EBD05E78 * *((double *)this + 3)
       + *(double *)&xmmword_1EBD05F40 * *((double *)this + 5);
}

void llvm::calculateRegAllocScore(llvm *this@<X0>, const llvm::MachineFunction *a2@<X1>, const llvm::MachineBlockFrequencyInfo *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2;
  v5[0] = this;
  v5[1] = a3;
  llvm::calculateRegAllocScore((uint64_t)this, sub_1CC42E2E4, (uint64_t)&v6, (uint64_t (*)(uint64_t, uint64_t))sub_1CC42E3A0, (uint64_t)v5, a4);
}

void llvm::calculateRegAllocScore(uint64_t a1@<X0>, double (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = a1 + 320;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  uint64_t v7 = *(void *)(a1 + 328);
  if (v7 != a1 + 320)
  {
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    while (1)
    {
      double v18 = a2(a3, v7);
      uint64_t v19 = *(void *)(v7 + 56);
      double v40 = 0.0;
      double v41 = 0.0;
      double v37 = 0.0;
      double v38 = 0.0;
      double v39 = 0.0;
      double v20 = 0.0;
      if (v19 != v7 + 48) {
        break;
      }
LABEL_64:
      double v17 = v17 + v20;
      double v16 = v16 + v38;
      *(double *)a6 = v17;
      *(double *)(a6 + 8) = v16;
      double v15 = v15 + v39;
      double v14 = v14 + v37;
      double v13 = v13 + v40;
      *(double *)(a6 + 16) = v15;
      *(double *)(a6 + 24) = v13;
      double v12 = v12 + v41;
      *(double *)(a6 + 32) = v14;
      *(double *)(a6 + 40) = v12;
      uint64_t v7 = *(void *)(v7 + 8);
      if (v7 == v6) {
        return;
      }
    }
    double v38 = 0.0;
    double v39 = 0.0;
    double v40 = 0.0;
    double v41 = 0.0;
    double v37 = 0.0;
    while (1)
    {
      unsigned int v21 = **(unsigned __int16 **)(v19 + 16);
      if (v21 <= 0x13)
      {
        if (((1 << v21) & 0x3E086) != 0) {
          goto LABEL_7;
        }
        if (v21 == 19)
        {
          double v20 = v18 + v20;
          goto LABEL_7;
        }
      }
      int v22 = a4(a5, v19);
      uint64_t v23 = *(unsigned __int16 **)(v19 + 16);
      if (v22)
      {
        if ((*((unsigned char *)v23 + 11) & 0x40) != 0) {
          double v40 = v18 + v40;
        }
        else {
          double v41 = v18 + v41;
        }
        goto LABEL_7;
      }
      unsigned int v24 = *v23 - 1;
      if (v24 <= 1)
      {
        uint64_t v31 = *(void *)(*(void *)(v19 + 32) + 48);
        if ((v31 & 8) != 0) {
          goto LABEL_51;
        }
      }
      unsigned int v25 = *(unsigned __int16 *)(v19 + 44);
      int v26 = v25 & 0xC;
      uint64_t v27 = *((void *)v23 + 1);
      BOOL v28 = (v25 & 0xC) != 0 && (v25 & 4) == 0;
      if (v28)
      {
        uint64_t v32 = v19;
        if ((v27 & 0x80000) != 0)
        {
LABEL_23:
          if (v24 <= 1)
          {
            uint64_t v31 = *(void *)(*(void *)(v19 + 32) + 48);
LABEL_51:
            if ((v31 & 0x10) != 0) {
              goto LABEL_63;
            }
            unsigned int v25 = *(unsigned __int16 *)(v19 + 44);
            int v26 = v25 & 0xC;
          }
          uint64_t v27 = *((void *)v23 + 1);
          if (v26 && (v25 & 4) == 0)
          {
            uint64_t v35 = v19;
            if ((v27 & 0x100000) != 0)
            {
LABEL_63:
              double v37 = v18 + v37;
              goto LABEL_7;
            }
            while ((*(_WORD *)(v35 + 44) & 8) != 0)
            {
              uint64_t v35 = *(void *)(v35 + 8);
              if ((*(unsigned char *)(*(void *)(v35 + 16) + 10) & 0x10) != 0) {
                goto LABEL_63;
              }
            }
          }
          else if ((v27 & 0x100000) != 0)
          {
            goto LABEL_63;
          }
          goto LABEL_27;
        }
        while ((*(_WORD *)(v32 + 44) & 8) != 0)
        {
          uint64_t v32 = *(void *)(v32 + 8);
          if ((*(unsigned char *)(*(void *)(v32 + 16) + 10) & 8) != 0) {
            goto LABEL_23;
          }
        }
      }
      else if ((v27 & 0x80000) != 0)
      {
        goto LABEL_23;
      }
LABEL_27:
      if (v24 > 1 || (*(unsigned char *)(*(void *)(v19 + 32) + 48) & 8) == 0)
      {
        BOOL v28 = (v25 & 0xC) == 0;
        int v29 = (v25 >> 2) & 1;
        if (v28) {
          LOBYTE(v29) = 1;
        }
        if (v29)
        {
          if ((v27 & 0x80000) == 0) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v33 = v19;
          if ((v27 & 0x80000) == 0)
          {
            while ((*(_WORD *)(v33 + 44) & 8) != 0)
            {
              uint64_t v33 = *(void *)(v33 + 8);
              if ((*(unsigned char *)(*(void *)(v33 + 16) + 10) & 8) != 0) {
                goto LABEL_45;
              }
            }
LABEL_33:
            if (v24 <= 1 && (*(unsigned char *)(*(void *)(v19 + 32) + 48) & 0x10) != 0)
            {
LABEL_54:
              double v30 = v18;
            }
            else
            {
              if (v29)
              {
                if ((v27 & 0x100000) != 0) {
                  goto LABEL_54;
                }
              }
              else
              {
                uint64_t v34 = v19;
                if ((v27 & 0x100000) != 0) {
                  goto LABEL_54;
                }
                while ((*(_WORD *)(v34 + 44) & 8) != 0)
                {
                  uint64_t v34 = *(void *)(v34 + 8);
                  if ((*(unsigned char *)(*(void *)(v34 + 16) + 10) & 0x10) != 0) {
                    goto LABEL_54;
                  }
                }
              }
              double v30 = -0.0;
            }
            double v39 = v39 + v30;
            goto LABEL_7;
          }
        }
      }
LABEL_45:
      double v38 = v18 + v38;
LABEL_7:
      if ((*(unsigned char *)v19 & 4) == 0)
      {
        while ((*(_WORD *)(v19 + 44) & 8) != 0)
          uint64_t v19 = *(void *)(v19 + 8);
      }
      uint64_t v19 = *(void *)(v19 + 8);
      if (v19 == v7 + 48) {
        goto LABEL_64;
      }
    }
  }
}

uint64_t sub_1CC42E1C4(uint64_t a1, char *a2, void **a3, _WORD *a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(void *)(v8 + 136) = &unk_1F2601200;
  *(void *)uint64_t v8 = &unk_1F2601198;
  *(void *)(v8 + 160) = &unk_1F2643E40;
  *(void *)(v8 + 168) = &unk_1F2601220;
  *(void *)(v8 + 192) = v8 + 168;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  uint64_t v10 = *a3;
  *(void *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 144) = *v10;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

double sub_1CC42E2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 248);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 176);
    float v4 = 0.0;
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 160);
      unsigned int v6 = v3 - 1;
      uint64_t v7 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v8 = *(void *)(v5 + 16 * v7);
      if (v8 == a2)
      {
LABEL_4:
        uint64_t v9 = *(unsigned int *)(v5 + 16 * v7 + 8);
        if (v9 != 0xFFFFFFFFLL) {
          float v4 = (float)*(unint64_t *)(*(void *)(v2 + 8) + 24 * v9 + 16);
        }
      }
      else
      {
        int v12 = 1;
        while (v8 != -4096)
        {
          int v13 = v7 + v12++;
          uint64_t v7 = v13 & v6;
          uint64_t v8 = *(void *)(v5 + 16 * v7);
          if (v8 == a2) {
            goto LABEL_4;
          }
        }
      }
    }
    float v10 = (float)*(unint64_t *)(*(void *)(v2 + 8) + 16);
  }
  else
  {
    float v4 = 0.0;
    float v10 = 0.0;
  }
  return (float)(v4 * (float)(1.0 / v10));
}

uint64_t sub_1CC42E3A0(void *a1, const llvm::MachineInstr *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 104))(*(void *)(*a1 + 16));
  uint64_t v5 = *((void *)a2 + 2);
  if (*(_WORD *)v5 == 10) {
    return 1;
  }
  if ((*(unsigned char *)(v5 + 11) & 0x20) == 0) {
    return 0;
  }
  unsigned int v6 = (llvm::TargetInstrInfo *)v4;
  uint64_t v7 = (llvm::AAResults *)a1[1];
  if ((*(uint64_t (**)(uint64_t, const llvm::MachineInstr *, llvm::AAResults *))(*(void *)v4 + 32))(v4, a2, v7))return 1; {

  }
  return llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v6, a2, v7);
}

uint64_t sub_1CC42E480()
{
  uint64_t v4 = 0x3FC999999999999ALL;
  uint64_t v5 = &v4;
  int v3 = 1;
  sub_1CC42E1C4((uint64_t)&CopyWeight, "regalloc-copy-weight", &v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &CopyWeight, &dword_1CB82C000);
  uint64_t v4 = 0x4010000000000000;
  uint64_t v5 = &v4;
  int v3 = 1;
  sub_1CC42E1C4((uint64_t)&LoadWeight, "regalloc-load-weight", &v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &LoadWeight, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&StoreWeight, 0, 0);
  xmmword_1EBD05DB0 = 0u;
  *(_OWORD *)&qword_1EBD05DC0 = 0u;
  *((void *)&xmmword_1EBD05DB0 + 1) = &unk_1F2601200;
  StoreWeight = (uint64_t)&unk_1F2601198;
  qword_1EBD05DD0 = (uint64_t)&unk_1F2643E40;
  qword_1EBD05DD8 = (uint64_t)&unk_1F2601220;
  qword_1EBD05DF0 = (uint64_t)&qword_1EBD05DD8;
  llvm::cl::Option::setArgStr((uint64_t)&StoreWeight, "regalloc-store-weight", 0x15uLL);
  *(void *)&xmmword_1EBD05DB0 = 0x3FF0000000000000;
  byte_1EBD05DC8 = 1;
  qword_1EBD05DC0 = 0x3FF0000000000000;
  word_1EBD05D3A = word_1EBD05D3A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&StoreWeight);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &StoreWeight, &dword_1CB82C000);
  uint64_t v0 = sub_1CB883A14((uint64_t)&CheapRematWeight, 0, 0);
  xmmword_1EBD05E78 = 0u;
  *(_OWORD *)&qword_1EBD05E88 = 0u;
  *((void *)&xmmword_1EBD05E78 + 1) = &unk_1F2601200;
  CheapRematWeight = (uint64_t)&unk_1F2601198;
  qword_1EBD05E98 = (uint64_t)&unk_1F2643E40;
  qword_1EBD05EA0 = (uint64_t)&unk_1F2601220;
  qword_1EBD05EB8 = (uint64_t)&qword_1EBD05EA0;
  llvm::cl::Option::setArgStr(v0, "regalloc-cheap-remat-weight", 0x1BuLL);
  *(void *)&xmmword_1EBD05E78 = 0x3FC999999999999ALL;
  byte_1EBD05E90 = 1;
  qword_1EBD05E88 = 0x3FC999999999999ALL;
  word_1EBD05E02 = word_1EBD05E02 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&CheapRematWeight);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &CheapRematWeight, &dword_1CB82C000);
  uint64_t v1 = sub_1CB883A14((uint64_t)&ExpensiveRematWeight, 0, 0);
  xmmword_1EBD05F40 = 0u;
  *(_OWORD *)&qword_1EBD05F50 = 0u;
  *((void *)&xmmword_1EBD05F40 + 1) = &unk_1F2601200;
  ExpensiveRematWeight = (uint64_t)&unk_1F2601198;
  qword_1EBD05F60 = (uint64_t)&unk_1F2643E40;
  qword_1EBD05F68 = (uint64_t)&unk_1F2601220;
  qword_1EBD05F80 = (uint64_t)&qword_1EBD05F68;
  llvm::cl::Option::setArgStr(v1, "regalloc-expensive-remat-weight", 0x1FuLL);
  *(void *)&xmmword_1EBD05F40 = 0x3FF0000000000000;
  byte_1EBD05F58 = 1;
  qword_1EBD05F50 = 0x3FF0000000000000;
  word_1EBD05ECA = word_1EBD05ECA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ExpensiveRematWeight);
  return __cxa_atexit((void (*)(void *))sub_1CBF801A0, &ExpensiveRematWeight, &dword_1CB82C000);
}

double llvm::RegisterClassInfo::RegisterClassInfo(llvm::RegisterClassInfo *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 64;
  *((_OWORD *)this + 3) = xmmword_1CDB159A0;
  *((void *)this + 9) = (char *)this + 88;
  *(void *)&double result = 0x600000000;
  *((void *)this + 10) = 0x600000000;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 18) = (char *)this + 160;
  *((void *)this + 19) = 0x600000000;
  *((_DWORD *)this + 52) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 64;
  *((_OWORD *)this + 3) = xmmword_1CDB159A0;
  *((void *)this + 9) = (char *)this + 88;
  *(void *)&double result = 0x600000000;
  *((void *)this + 10) = 0x600000000;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 18) = (char *)this + 160;
  *((void *)this + 19) = 0x600000000;
  *((_DWORD *)this + 52) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  return result;
}

void llvm::RegisterClassInfo::runOnMachineFunction(llvm::RegisterClassInfo *this, const llvm::MachineFunction *a2)
{
  int v3 = this;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  *((void *)this + 2) = a2;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  if (v5 != *((void *)v3 + 3))
  {
    *((void *)v3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
    operator new[]();
  }
  unsigned int v6 = *(void **)(*((void *)v3 + 2) + 40);
  if (*((unsigned char *)v6 + 144))
  {
    uint64_t v9 = v5;
    uint64_t v8 = (_WORD *)v6[19];
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*v6 + 16) + 176))(*(void *)(*v6 + 16));
    uint64_t v8 = (_WORD *)(*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 32))(v7, *v6);
    uint64_t v9 = *((void *)v3 + 3);
  }
  if (v8 == *((_WORD **)v3 + 4))
  {
    int v72 = 0;
  }
  else
  {
    unint64_t v45 = *(unsigned int *)(v9 + 16);
    if (*((void *)v3 + 7) < v45)
    {
      *((void *)v3 + 6) = 0;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    unint64_t v46 = *((void *)v3 + 6);
    uint64_t v47 = *((void *)v3 + 5);
    if (v46 >= v45) {
      uint64_t v48 = *(unsigned int *)(v9 + 16);
    }
    else {
      uint64_t v48 = *((void *)v3 + 6);
    }
    if (v48) {
      bzero(*((void **)v3 + 5), 2 * v48);
    }
    if (v45 > v46) {
      bzero((void *)(v47 + 2 * v46), 2 * (v45 - v46));
    }
    *((void *)v3 + 6) = v45;
    int v49 = (unsigned __int16)*v8;
    if (*v8)
    {
      if (v9) {
        uint64_t v50 = (uint64_t *)(v9 + 8);
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v51 = *v50;
      int v54 = v50 + 5;
      uint64_t v53 = v50[5];
      uint64_t v52 = v54[1];
      int v55 = v8;
      do
      {
        unint64_t v56 = ((unint64_t)*(unsigned int *)(v51 + 24 * (unsigned __int16)v49 + 16) >> 3) & 0x1FFFFFFE;
        int v57 = *(unsigned __int16 *)(v52 + v56) + (*(_DWORD *)(v51 + 24 * (unsigned __int16)v49 + 16) & 0xF) * v49;
        uint64_t v58 = (_WORD *)(v52 + 2 + v56);
        do
        {
          unsigned __int16 v59 = *(_WORD *)(v53 + 4 * (unsigned __int16)v57);
          if (v59) {
            BOOL v60 = v52 == 0;
          }
          else {
            BOOL v60 = 1;
          }
          if (!v60)
          {
            unsigned int v61 = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v57 + 2) << 16;
            uint64_t v62 = (unsigned __int16 *)(v52
                                     + 2
                                     * *(unsigned int *)(v51
                                                       + 24 * *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v57)
                                                       + 8));
            while (1)
            {
              *(_WORD *)(v47 + 2 * v59) = v49;
              int v64 = *v62++;
              __int16 v63 = v64;
              if (v64)
              {
                v59 += v63;
              }
              else
              {
                unsigned int v65 = HIWORD(v61);
                if (HIWORD(v61))
                {
                  v61 >>= 16;
                }
                else
                {
                  if (!*v58) {
                    goto LABEL_94;
                  }
                  v57 += (unsigned __int16)*v58++;
                  uint64_t v66 = (unsigned __int16 *)(v53 + 4 * (unsigned __int16)v57);
                  unsigned int v65 = *v66;
                  unsigned int v61 = v66[1] << 16;
                }
                unsigned __int16 v59 = v65;
                uint64_t v62 = (unsigned __int16 *)(v52 + 2 * *(unsigned int *)(v51 + 24 * v65 + 8));
              }
              LOWORD(v49) = *v55;
            }
          }
          int v69 = (unsigned __int16)*v58++;
          v57 += v69;
        }
        while (v69);
LABEL_94:
        int v67 = (unsigned __int16)v55[1];
        ++v55;
        int v49 = v67;
      }
      while (v67);
    }
    int v72 = 1;
  }
  *((void *)v3 + 4) = v8;
  int v10 = *(_DWORD *)(v9 + 16);
  uint64_t v73 = v76;
  int v75 = 6;
  if ((v10 + 63) >= 0x1C0)
  {
    unsigned int v74 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v10 + 63) >= 0x40) {
    bzero(v76, 8 * ((v10 + 63) >> 6));
  }
  BOOL v11 = v76;
  unsigned int v74 = (v10 + 63) >> 6;
  int v77 = v10;
  int v12 = (unsigned __int16)*v8;
  if (*v8)
  {
    uint64_t v70 = v3;
    do
    {
      uint64_t v71 = v8;
      uint64_t v23 = *((void *)v3 + 3);
      if (v23) {
        unsigned int v24 = (void *)(v23 + 8);
      }
      else {
        unsigned int v24 = 0;
      }
      unint64_t v25 = ((unint64_t)*(unsigned int *)(*v24 + 24 * (unsigned __int16)v12 + 16) >> 3) & 0x1FFFFFFE;
      uint64_t v27 = v24[5];
      uint64_t v26 = v24[6];
      BOOL v28 = (_WORD *)(v26 + v25 + 2);
      int v29 = *(unsigned __int16 *)(v26 + v25) + (*(_DWORD *)(*v24 + 24 * (unsigned __int16)v12 + 16) & 0xF) * v12;
      do
      {
        LOWORD(v30) = *(_WORD *)(v27 + 4 * (unsigned __int16)v29);
        if ((_WORD)v30) {
          BOOL v31 = v26 == 0;
        }
        else {
          BOOL v31 = 1;
        }
        if (!v31)
        {
          unsigned int v32 = *(unsigned __int16 *)(v27 + 4 * (unsigned __int16)v29 + 2) << 16;
          for (uint64_t i = (unsigned int *)(*v24 + 24 * *(unsigned __int16 *)(v27 + 4 * (unsigned __int16)v29) + 8);
                ;
                uint64_t i = (unsigned int *)(*v24 + 24 * v40 + 8))
          {
            uint64_t v34 = (unsigned __int16 *)(v26 + 2 * *i);
            do
            {
              int v35 = (*(uint64_t (**)(uint64_t, const llvm::MachineFunction *, void))(*(void *)v4 + 416))(v4, a2, (unsigned __int16)v30);
              uint64_t v36 = (unsigned __int16)v30 >> 6;
              BOOL v11 = v73;
              uint64_t v37 = 1 << v30;
              if (v35) {
                uint64_t v38 = *((void *)v73 + v36) | v37;
              }
              else {
                uint64_t v38 = *((void *)v73 + v36) & ~v37;
              }
              *((void *)v73 + v36) = v38;
              int v39 = *v34++;
              LOWORD(v30) = v39 + v30;
            }
            while (v39);
            unsigned int v40 = HIWORD(v32);
            if (HIWORD(v32))
            {
              unsigned int v30 = HIWORD(v32);
              v32 >>= 16;
            }
            else
            {
              if (!*v28) {
                goto LABEL_48;
              }
              v29 += (unsigned __int16)*v28++;
              double v41 = (unsigned __int16 *)(v24[5] + 4 * (unsigned __int16)v29);
              unsigned int v40 = *v41;
              unsigned int v32 = v41[1] << 16;
              LOWORD(v30) = *v41;
            }
            uint64_t v26 = v24[6];
          }
        }
        int v68 = (unsigned __int16)*v28++;
        v29 += v68;
      }
      while (v68);
LABEL_48:
      int v3 = v70;
      uint64_t v8 = v71 + 1;
      int v12 = (unsigned __int16)v71[1];
    }
    while (v71[1]);
    int v10 = v77;
  }
  if (*((_DWORD *)v3 + 34) != v10 || memcmp(*((const void **)v3 + 9), v11, 8 * *((unsigned int *)v3 + 20)))
  {
    uint64_t v42 = (void **)((char *)v3 + 72);
    if ((void **)((char *)v3 + 72) != &v73)
    {
      unsigned int v43 = v74;
      uint64_t v44 = *((unsigned int *)v3 + 20);
      if (v44 >= v74)
      {
        if (v74) {
          memmove(*v42, v11, 8 * v74);
        }
      }
      else
      {
        if (*((_DWORD *)v3 + 21) < v74)
        {
          *((_DWORD *)v3 + 20) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v44) {
          memmove(*v42, v11, 8 * v44);
        }
        else {
          uint64_t v44 = 0;
        }
        if (v44 != v74) {
          memcpy((char *)*v42 + 8 * v44, (char *)v73 + 8 * v44, 8 * v74 - 8 * v44);
        }
      }
      *((_DWORD *)v3 + 20) = v43;
      int v10 = v77;
    }
    *((_DWORD *)v3 + 34) = v10;
    int v72 = 1;
  }
  uint64_t v13 = *((void *)v3 + 3);
  int v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 232))(v13, *((void *)v3 + 2));
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  *((void *)v3 + 28) = **(void **)(v13 + 216) + (v15 * v14);
  *((void *)v3 + 29) = v15;
  uint64_t v16 = *(void *)(*((void *)v3 + 2) + 40);
  double v17 = (void **)((char *)v3 + 144);
  int v18 = *(_DWORD *)(v16 + 416);
  if (*((_DWORD *)v3 + 52) != v18 || memcmp(*(const void **)(v16 + 352), *v17, 8 * *(unsigned int *)(v16 + 360)))
  {
    uint64_t v19 = (const void **)(v16 + 352);
    if (v17 != (void **)(v16 + 352))
    {
      uint64_t v20 = *(unsigned int *)(v16 + 360);
      uint64_t v21 = *((unsigned int *)v3 + 38);
      if (v21 >= v20)
      {
        if (v20) {
          memmove(*v17, *v19, 8 * v20);
        }
      }
      else
      {
        if (*((_DWORD *)v3 + 39) < v20)
        {
          *((_DWORD *)v3 + 38) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v21) {
          memmove(*v17, *v19, 8 * v21);
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(unsigned int *)(v16 + 360);
        if (v21 != v22) {
          memcpy((char *)*v17 + 8 * v21, (char *)*v19 + 8 * v21, (unsigned char *)*v19 + 8 * v22 - ((unsigned char *)*v19 + 8 * v21));
        }
      }
      *((_DWORD *)v3 + 38) = v20;
      int v18 = *(_DWORD *)(v16 + 416);
    }
    *((_DWORD *)v3 + 52) = v18;
LABEL_27:
    (*(void (**)(void))(**((void **)v3 + 3) + 296))(*((void *)v3 + 3));
    operator new[]();
  }
  if (v72) {
    goto LABEL_27;
  }
  if (v73 != v76) {
    free(v73);
  }
}

void llvm::RegisterClassInfo::compute(uint64_t *a1, unsigned __int16 ***a2)
{
  uint64_t v2 = a2;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((unsigned __int16 *)*a2 + 12);
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(a1[2] + 16);
  uint64_t v43 = *a1 + 24 * *((unsigned __int16 *)*a2 + 12);
  uint64_t v7 = (uint64_t *)(v43 + 16);
  if (!*(void *)(v43 + 16)) {
    operator new[]();
  }
  uint64_t v46 = 0;
  uint64_t v8 = a2[6];
  if (v8)
  {
    uint64_t v37 = *(void *)(a1[2] + 16);
    uint64_t v38 = ((uint64_t (*)(uint64_t))v8)(a1[2]);
    uint64_t v6 = v37;
    uint64_t v2 = a2;
    uint64_t v9 = (unsigned __int16 *)v38;
  }
  else
  {
    uint64_t v9 = **a2;
    uint64_t v10 = *((unsigned __int16 *)*a2 + 10);
  }
  uint64_t v44 = v5;
  unsigned int v45 = v4;
  if (v10)
  {
    unsigned int v11 = 0;
    __int16 v12 = 0;
    uint64_t v13 = 2 * v10;
    unsigned __int8 v14 = -1;
    unsigned __int8 v15 = -1;
    do
    {
      unint64_t v16 = *v9;
      if (((*(void *)(a1[18] + ((v16 >> 3) & 0x1FF8)) >> v16) & 1) == 0)
      {
        unsigned int v17 = *(unsigned __int8 *)(a1[28] + v16);
        if (v17 < v15) {
          unsigned __int8 v15 = *(unsigned char *)(a1[28] + v16);
        }
        if (!*(_WORD *)(a1[5] + 2 * v16)
          || (uint64_t v41 = v6,
              uint64_t v42 = v2,
              char v28 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 416))(v6, a1[2], *v9),
              uint64_t v6 = v41,
              uint64_t v2 = v42,
              (v28 & 1) != 0))
        {
          if (v17 != v14) {
            __int16 v12 = v11;
          }
          *(_WORD *)(*v7 + 2 * v11++) = v16;
          unsigned __int8 v14 = v17;
        }
        else
        {
          if ((unint64_t)(v46 + 1) > 0x10) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          v47[v46++] = v16;
        }
      }
      ++v9;
      v13 -= 2;
    }
    while (v13);
  }
  else
  {
    __int16 v12 = 0;
    unsigned int v11 = 0;
    unsigned __int8 v15 = -1;
    unsigned __int8 v14 = -1;
  }
  unsigned int v18 = v11 + v46;
  uint64_t v20 = v44;
  unsigned int v19 = v45;
  uint64_t v21 = v44 + 24 * v45;
  *(_DWORD *)(v21 + 4) = v11 + v46;
  uint64_t v22 = (_DWORD *)(v21 + 4);
  if (v46)
  {
    uint64_t v29 = v46;
    unsigned int v30 = v47;
    uint64_t v31 = a1[28];
    uint64_t v32 = *v7;
    do
    {
      unsigned int v34 = *v30++;
      __int16 v33 = v34;
      int v35 = *(unsigned __int8 *)(v31 + v34);
      if (v35 != v14) {
        __int16 v12 = v11;
      }
      *(_WORD *)(v32 + 2 * v11++) = v33;
      unsigned __int8 v14 = v35;
      --v29;
    }
    while (v29);
  }
  if (dword_1EBD06008) {
    BOOL v23 = v18 > dword_1EBD06008;
  }
  else {
    BOOL v23 = 0;
  }
  if (v23) {
    *uint64_t v22 = dword_1EBD06008;
  }
  unsigned int v24 = v2;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, unsigned __int16 ***, uint64_t))(*(void *)a1[3] + 256))(a1[3], v2, a1[2]);
  if (v25) {
    BOOL v26 = v25 == (void)v24;
  }
  else {
    BOOL v26 = 1;
  }
  if (!v26)
  {
    unsigned int v39 = *(unsigned __int16 *)(*(void *)v25 + 24);
    uint64_t v40 = *a1;
    if (*((_DWORD *)a1 + 2) != *(_DWORD *)(*a1 + 24 * *(unsigned __int16 *)(*(void *)v25 + 24))) {
      llvm::RegisterClassInfo::compute(a1, v25);
    }
    uint64_t v20 = v44;
    unsigned int v19 = v45;
    if (*(_DWORD *)(v40 + 24 * v39 + 4) > *v22) {
      *(unsigned char *)(v44 + 24 * v45 + 8) = 1;
    }
  }
  uint64_t v27 = v20 + 24 * v19;
  *(unsigned char *)(v27 + 9) = v15;
  *(_WORD *)(v27 + 10) = v12;
  *(_DWORD *)uint64_t v43 = *((_DWORD *)a1 + 2);
}

uint64_t llvm::RegisterClassInfo::computePSetLimit(llvm::RegisterClassInfo *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(unsigned __int16 *****)(v4 + 240);
  uint64_t v6 = *(unsigned __int16 *****)(v4 + 248);
  if (v5 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    do
    {
      uint64_t v9 = *v5;
      uint64_t v10 = (int *)(*(uint64_t (**)(void, unsigned __int16 ***))(**((void **)this + 3) + 320))(*((void *)this + 3), *v5);
      do
      {
        int v12 = *v10++;
        int v11 = v12;
      }
      while (v12 != -1 && v11 != a2);
      if (v11 != -1)
      {
        unsigned int v14 = *(_DWORD *)((*(uint64_t (**)(void, unsigned __int16 ***))(**((void **)this + 3) + 280))(*((void *)this + 3), v9)+ 4);
        if (!v7 || v14 > v8)
        {
          unsigned int v8 = v14;
          uint64_t v7 = v9;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  llvm::RegisterClassInfo::compute((uint64_t *)this, v7);
  if ((*(uint64_t (**)(void))(**((void **)this + 3) + 144))(*((void *)this + 3)))
  {
    int v17 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 16) + 424))(*(void *)(*((void *)this + 2) + 16));
    unsigned int v18 = *v7;
    int v19 = *((unsigned __int16 *)*v7 + 10);
    int v20 = v17 + 16;
    int v21 = 2 * v17;
    if (v19 != 256) {
      int v21 = *((unsigned __int16 *)*v7 + 10);
    }
    if (v19 != 144) {
      int v20 = v21;
    }
    if (v19 == 128) {
      int v22 = v17;
    }
    else {
      int v22 = v20;
    }
    unsigned int v23 = *((unsigned __int16 *)v18 + 12);
    uint64_t v24 = *(void *)this;
    if (*((_DWORD *)this + 2) != *(_DWORD *)(*(void *)this + 24 * *((unsigned __int16 *)v18 + 12))) {
      llvm::RegisterClassInfo::compute((uint64_t *)this, v7);
    }
    int v25 = *(_DWORD *)(v24 + 24 * v23 + 4) - v22;
    LODWORD(a2) = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 3) + 312))(*((void *)this + 3), *((void *)this + 2), a2);
    return (a2
                        + *(_DWORD *)(*(uint64_t (**)(void, unsigned __int16 ***))(**((void **)this + 3)
                                                                                             + 280))(*((void *)this + 3), v7)* v25);
  }
  unsigned int v27 = *((unsigned __int16 *)*v7 + 12);
  uint64_t v28 = *(void *)this;
  if (*((_DWORD *)this + 2) != *(_DWORD *)(*(void *)this + 24 * *((unsigned __int16 *)*v7 + 12))) {
    llvm::RegisterClassInfo::compute((uint64_t *)this, v7);
  }
  int v29 = *(_DWORD *)(v28 + 24 * v27 + 4);
  a2 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 3) + 312))(*((void *)this + 3), *((void *)this + 2), a2);
  if (v29)
  {
    int v25 = v29 - *((unsigned __int16 *)*v7 + 10);
    return (a2
                        + *(_DWORD *)(*(uint64_t (**)(void, unsigned __int16 ***))(**((void **)this + 3)
                                                                                             + 280))(*((void *)this + 3), v7)* v25);
  }
  return a2;
}

uint64_t sub_1CC42F704()
{
  int v5 = 1;
  int v3 = 0;
  uint64_t v4 = &v3;
  *(void *)&long long v2 = "N";
  *((void *)&v2 + 1) = 1;
  v1.n128_u64[0] = (unint64_t)"Limit all regclasses to N registers";
  v1.n128_u64[1] = 35;
  sub_1CD56EFA4(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD05F88, &dword_1CB82C000);
}

void sub_1CC42F788(llvm *a1)
{
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

uint64_t llvm::CoalescerPair::setRegisters(llvm::CoalescerPair *this, const llvm::MachineInstr *a2)
{
  *((void *)this + 2) = 0;
  uint64_t v4 = (unsigned int *)((char *)this + 16);
  *((void *)this + 4) = 0;
  *(_WORD *)((char *)this + 25) = 0;
  *((void *)this + 1) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t result = sub_1CC42FB94(*(void *)this, (uint64_t)a2, (_DWORD *)&v32 + 1, &v32, (int *)&v31 + 1, (int *)&v31);
  if (!result) {
    return result;
  }
  unsigned int v7 = v31;
  unsigned int v6 = HIDWORD(v31);
  *((unsigned char *)this + 24) = v31 != 0;
  int v8 = v32;
  int v9 = HIDWORD(v32);
  unsigned int v10 = v32 - 1;
  if ((HIDWORD(v32) - 1) <= 0x3FFFFFFE)
  {
    if (v10 < 0x3FFFFFFF) {
      return 0;
    }
    *((unsigned char *)this + 26) = 1;
    uint64_t v11 = *(void *)(*(void *)(*((void *)a2 + 3) + 32) + 40);
    LODWORD(result) = v9;
    int v28 = v7;
  }
  else
  {
    uint64_t v11 = *(void *)(*(void *)(*((void *)a2 + 3) + 32) + 40);
    if (v10 > 0x3FFFFFFE)
    {
      uint64_t v12 = *(void *)(v11 + 24);
      unint64_t v13 = *(void *)(v12 + 16 * (HIDWORD(v32) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v14 = *(void *)(v12 + 16 * (v32 & 0x7FFFFFFF));
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if (!v6 || !v7)
      {
        if (v7)
        {
          *((_DWORD *)this + 5) = v7;
          int v17 = *(uint64_t (**)(void))(**(void **)this + 184);
        }
        else
        {
          if (!v6)
          {
            if (v15 == v13)
            {
              unint64_t v18 = *(void *)(v12 + 16 * (HIDWORD(v32) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            }
            else
            {
              if (v13) {
                BOOL v16 = v15 == 0;
              }
              else {
                BOOL v16 = 1;
              }
              if (v16
                || (uint64_t v22 = *(void *)(*(void *)this + 240),
                    unint64_t v23 = (unint64_t)(*(void *)(*(void *)this + 248) - v22) >> 3,
                    !v23))
              {
LABEL_14:
                uint64_t result = 0;
                *((void *)this + 4) = 0;
                return result;
              }
              unsigned int v24 = 0;
              int v25 = *(_DWORD **)(v13 + 8);
              BOOL v26 = *(_DWORD **)(v15 + 8);
              while (1)
              {
                unsigned int v27 = *v25 & *v26;
                if (v27) {
                  break;
                }
                ++v25;
                ++v26;
                v24 += 32;
                if (v24 >= v23) {
                  goto LABEL_14;
                }
              }
              unint64_t v18 = *(void *)(v22 + 8 * (__clz(__rbit32(v27)) + v24));
            }
LABEL_17:
            *((void *)this + 4) = v18;
            if (v18) {
              goto LABEL_18;
            }
            return 0;
          }
          *((_DWORD *)this + 4) = v6;
          int v17 = *(uint64_t (**)(void))(**(void **)this + 184);
        }
        unint64_t v18 = v17();
        goto LABEL_17;
      }
      if (HIDWORD(v32) == v32 && v6 != v7) {
        return 0;
      }
      uint64_t result = (uint64_t)llvm::TargetRegisterInfo::getCommonSuperRegClass(*(void *)this, *(void *)(v12 + 16 * (HIDWORD(v32) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v6, v14 & 0xFFFFFFFFFFFFFFF8, v7, (unsigned int *)this + 5, v4);
      unint64_t v18 = result;
      *((void *)this + 4) = result;
      if (result)
      {
LABEL_18:
        unsigned int v19 = *v4;
        if (!*v4 || *((_DWORD *)this + 5))
        {
          LODWORD(result) = v8;
          int v8 = v9;
        }
        else
        {
          *((_DWORD *)this + 4) = 0;
          *((_DWORD *)this + 5) = v19;
          *((unsigned char *)this + 26) ^= 1u;
          LODWORD(result) = v9;
        }
        BOOL v21 = v18 != v15 || v18 != v13;
        *((unsigned char *)this + 25) = v21;
        goto LABEL_27;
      }
      return result;
    }
    LODWORD(result) = v32;
    int v8 = HIDWORD(v32);
    int v28 = v6;
    unsigned int v6 = v7;
  }
  if (!v6 || (uint64_t result = llvm::MCRegisterInfo::getSubReg((void *)(*(void *)this + 8), result, v6), result))
  {
    if (v28)
    {
      uint64_t result = llvm::MCRegisterInfo::getMatchingSuperReg((uint64_t *)(*(void *)this + 8), result, v28, *(void *)(*(void *)(*(void *)(v11 + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8));
      if (!result) {
        return result;
      }
    }
    else
    {
      if ((result - 1) > 0x3FFFFFFE) {
        return 0;
      }
      uint64_t v29 = *(void *)(*(void *)(*(void *)(v11 + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v30 = (unint64_t)result >> 3;
      if (v30 >= *(unsigned __int16 *)(v29 + 22)
        || ((*(unsigned __int8 *)(*(void *)(v29 + 8) + v30) >> (result & 7)) & 1) == 0)
      {
        return 0;
      }
    }
LABEL_27:
    *((_DWORD *)this + 2) = result;
    *((_DWORD *)this + 3) = v8;
    return 1;
  }
  return result;
}

uint64_t sub_1CC42FB94(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5, int *a6)
{
  int v10 = **(unsigned __int16 **)(a2 + 16);
  if (v10 == 11)
  {
    uint64_t v14 = *(_DWORD **)(a2 + 32);
    *a4 = v14[1];
    int v15 = v14[28];
    if (((*v14 >> 8) & 0xFFF) != 0)
    {
      if (v15)
      {
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
        uint64_t v14 = *(_DWORD **)(a2 + 32);
      }
      else
      {
        int v15 = (*v14 >> 8) & 0xFFF;
      }
    }
    *a6 = v15;
    uint64_t v12 = v14 + 16;
    int v13 = v14[17];
  }
  else
  {
    if (v10 != 19) {
      return 0;
    }
    uint64_t v11 = *(_DWORD **)(a2 + 32);
    *a4 = v11[1];
    *a6 = (*v11 >> 8) & 0xFFF;
    uint64_t v12 = v11 + 8;
    int v13 = v11[9];
  }
  *a3 = v13;
  *a5 = (*v12 >> 8) & 0xFFF;
  return 1;
}

BOOL llvm::CoalescerPair::flip(int32x2_t *this)
{
  __int32 v1 = this[1].i32[0];
  if ((v1 - 0x40000000) <= 0xC0000000)
  {
    this[1].i32[0] = this[1].i32[1];
    this[1].i32[1] = v1;
    this[2] = vrev64_s32(this[2]);
    this[3].i8[2] ^= 1u;
  }
  return (v1 - 0x40000000) < 0xC0000001;
}

uint64_t llvm::CoalescerPair::isCoalescable(llvm::CoalescerPair *this, const llvm::MachineInstr *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t result = sub_1CC42FB94(*(void *)this, (uint64_t)a2, (_DWORD *)&v20 + 1, &v20, (int *)&v19 + 1, (int *)&v19);
  if (result)
  {
    unsigned int SubReg = v20;
    int v5 = *((_DWORD *)this + 3);
    if (v20 == v5)
    {
      unint64_t v19 = __PAIR64__(v19, HIDWORD(v19));
      unsigned int SubReg = HIDWORD(v20);
    }
    else if (HIDWORD(v20) != v5)
    {
      return 0;
    }
    unsigned int v6 = *((_DWORD *)this + 2);
    if (v6 - 1 <= 0x3FFFFFFE)
    {
      if (SubReg - 1 <= 0x3FFFFFFE)
      {
        if (v19) {
          unsigned int SubReg = llvm::MCRegisterInfo::getSubReg((void *)(*(void *)this + 8), SubReg, v19);
        }
        if (HIDWORD(v19))
        {
          uint64_t v11 = *(void *)(*(void *)this + 8);
          uint64_t v12 = *(void *)(*(void *)this + 56);
          uint64_t v13 = *(unsigned int *)(v11 + 24 * v6 + 4);
          if (*(_WORD *)(v12 + 2 * v13))
          {
            unsigned __int16 v14 = *(_WORD *)(v12 + 2 * v13) + v6;
            int v15 = (unsigned __int16 *)(*(void *)(*(void *)this + 88)
                                     + 2 * *(unsigned int *)(v11 + 24 * v6 + 12));
            BOOL v16 = (unsigned __int16 *)(v12 + 2 * v13 + 2);
            while (HIDWORD(v19) != *v15)
            {
              int v18 = *v16++;
              v14 += v18;
              ++v15;
              if (!v18) {
                goto LABEL_33;
              }
            }
            int v17 = v14;
          }
          else
          {
LABEL_33:
            int v17 = 0;
          }
          return v17 == SubReg;
        }
        else
        {
          return v6 == SubReg;
        }
      }
    }
    else if (v6 == SubReg)
    {
      uint64_t v7 = *(void *)this;
      int v8 = HIDWORD(v19);
      if (*((_DWORD *)this + 5))
      {
        if (HIDWORD(v19))
        {
          int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 208))(v7);
          uint64_t v7 = *(void *)this;
        }
        else
        {
          int v8 = *((_DWORD *)this + 5);
        }
      }
      int v9 = v19;
      if (*((_DWORD *)this + 4))
      {
        if (v19) {
          int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 208))(v7);
        }
        else {
          int v9 = *((_DWORD *)this + 4);
        }
      }
      return v8 == v9;
    }
    return 0;
  }
  return result;
}

void sub_1CC42FEA4()
{
}

void sub_1CC4300C4(uint64_t a1)
{
  *(void *)a1 = &unk_1F26120C8;
  *(void *)(a1 + 248) = &unk_1F2612190;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1072), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1048), 4);
  long long v2 = *(void **)(a1 + 1000);
  if (v2 != (void *)(a1 + 1016)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 920);
  if (v3 != (void *)(a1 + 936)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 832);
  if (v4 != *(void **)(a1 + 824)) {
    free(v4);
  }
  int v5 = *(void **)(a1 + 744);
  if (v5 != (void *)(a1 + 760)) {
    free(v5);
  }
  unsigned int v6 = *(void **)(a1 + 664);
  if (v6 != (void *)(a1 + 680)) {
    free(v6);
  }
  sub_1CD56F1B0((uint64_t *)(a1 + 624));
  sub_1CC432578((unsigned int *)(a1 + 600));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 600), 8);
  sub_1CD56F22C((uint64_t *)(a1 + 576));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 552), 8);
  sub_1CD50C1C0((uint64_t *)(a1 + 312));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192)) {
    free(v7);
  }
  int v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120)) {
    free(v8);
  }
  int v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48)) {
    free(v9);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC43024C(uint64_t a1)
{
  sub_1CC4300C4(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC430284(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 288) + 40))();
}

void sub_1CC4302AC(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

_DWORD *sub_1CC4303B4(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 832);
  if (result == *(_DWORD **)(a1 + 824)) {
    goto LABEL_2;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 840);
  if (v5 < 0x21 || 4 * (*(_DWORD *)(a1 + 844) - *(_DWORD *)(a1 + 848)) >= v5)
  {
    uint64_t result = memset(result, 255, 8 * v5);
LABEL_2:
    *(void *)(a1 + 844) = 0;
    goto LABEL_3;
  }
  uint64_t result = llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 824));
LABEL_3:
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 1008) = 0;
  int v3 = (void *)(a1 + 1072);
  int v4 = *(_DWORD *)(a1 + 1080);
  if (v4)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 1088);
    if (v7 > 4 * v4 && v7 >= 0x41)
    {
      int v10 = 1 << (33 - __clz(v4 - 1));
      if (v10 <= 64) {
        int v11 = 64;
      }
      else {
        int v11 = v10;
      }
LABEL_21:
      if (v11 == v7)
      {
        *(void *)(a1 + 1080) = 0;
        BOOL v16 = *(_DWORD **)(a1 + 1072);
        uint64_t v17 = 16 * v7;
        do
        {
          *BOOL v16 = -1;
          v16 += 4;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        uint64_t result = (_DWORD *)MEMORY[0x1D25D9CD0](*v3, 8);
        if (v11)
        {
          unint64_t v12 = (4 * v11 / 3u + 1) | ((unint64_t)(4 * v11 / 3u + 1) >> 1);
          unint64_t v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
          LODWORD(v13) = (((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8)) + 1;
          *(_DWORD *)(a1 + 1088) = v13;
          uint64_t result = operator new(16 * v13, (std::align_val_t)8uLL);
          *(void *)(a1 + 1072) = result;
          *(void *)(a1 + 1080) = 0;
          uint64_t v14 = *(unsigned int *)(a1 + 1088);
          if (v14)
          {
            uint64_t v15 = 16 * v14;
            do
            {
              *uint64_t result = -1;
              result += 4;
              v15 -= 16;
            }
            while (v15);
          }
        }
        else
        {
          *int v3 = 0;
          *(void *)(a1 + 1080) = 0;
          *(_DWORD *)(a1 + 1088) = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1084)) {
      return result;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 1088);
    if (v7 > 0x40)
    {
      int v11 = 0;
      goto LABEL_21;
    }
  }
  if (v7)
  {
    int v8 = (_DWORD *)*v3;
    uint64_t v9 = 16 * v7;
    do
    {
      *int v8 = -1;
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  *(void *)(a1 + 1080) = 0;
  return result;
}

BOOL sub_1CC430580(uint64_t a1, uint64_t a2)
{
  v318[2] = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a2 + 353);
  if (*(unsigned char *)(a2 + 353)) {
    return v2 == 0;
  }
  *(void *)(a1 + 256) = a2;
  *(void *)(a1 + 264) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 272) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  *(void *)(a1 + 280) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::LiveIntervals::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  *(void *)(a1 + 288) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::LiveIntervals::ID);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_10:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::AAResultsWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_10;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  *(void *)(a1 + 304) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::AAResultsWrapperPass::ID)+ 32);
  unint64_t v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_15:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::MachineLoopInfo::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_15;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  *(void *)(a1 + 296) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::MachineLoopInfo::ID);
  if (dword_1EBCD2F10) {
    char v17 = dword_1EBCD2F10 == 1;
  }
  else {
    char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256))(v4);
  }
  *(unsigned char *)(a1 + 657) = v17;
  uint64_t v18 = *(void *)(*(void *)(a1 + 288) + 288);
  uint64_t v19 = *(void *)(a1 + 256);
  uint64_t v20 = *(void *)(v19 + 1096);
  uint64_t v21 = *(unsigned int *)(v19 + 1112);
  uint64_t v22 = (unsigned int *)(v20 + 24 * v21);
  unint64_t v305 = (llvm::Pass *)a1;
  int v295 = v2;
  if (*(_DWORD *)(v19 + 1104))
  {
    if (v21)
    {
      uint64_t v23 = 24 * v21;
      unsigned int v24 = *(unsigned int **)(v19 + 1096);
      while (*v24 >= 0xFFFFFFFE)
      {
        v24 += 6;
        v23 -= 24;
        if (!v23) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      unsigned int v24 = *(unsigned int **)(v19 + 1096);
    }
  }
  else
  {
LABEL_25:
    unsigned int v24 = (unsigned int *)(v20 + 24 * v21);
  }
  int v25 = (unsigned int *)(v20 + 24 * v21);
  if (v24 != v25)
  {
    uint64_t v309 = a1 + 552;
    uint64_t v26 = a1 + 576;
    while (1)
    {
      uint64_t v27 = *((void *)v24 + 1);
      uint64_t v28 = *((void *)v24 + 2);
      LODWORD(__src) = v28;
      uint64_t v29 = *(void *)(*(void *)(v18 + 392) + 16 * *(unsigned int *)(v27 + 24));
      unsigned int v30 = *v24;
      unsigned int v31 = *((_DWORD *)v305 + 142);
      if (v31)
      {
        uint64_t v35 = *((void *)v305 + 69);
        unsigned int v36 = (v31 - 1) & (37 * v30);
        uint64_t v37 = (_DWORD *)(v35 + 24 * v36);
        int v38 = *v37;
        if (v30 == *v37) {
          goto LABEL_37;
        }
        uint64_t v52 = 0;
        int v53 = 1;
        while (v38 != -1)
        {
          if (v52) {
            BOOL v54 = 0;
          }
          else {
            BOOL v54 = v38 == -2;
          }
          if (v54) {
            uint64_t v52 = v37;
          }
          unsigned int v55 = v36 + v53++;
          unsigned int v36 = v55 & (v31 - 1);
          uint64_t v37 = (_DWORD *)(v35 + 24 * v36);
          int v38 = *v37;
          if (v30 == *v37) {
            goto LABEL_37;
          }
        }
        uint64_t v32 = v52 ? v52 : v37;
      }
      else
      {
        uint64_t v32 = 0;
      }
      __int16 v33 = v305;
      int v34 = *((_DWORD *)v305 + 140);
      if (4 * v34 + 4 >= 3 * v31) {
        break;
      }
      if (v31 + ~v34 - *((_DWORD *)v305 + 141) <= v31 >> 3)
      {
        uint64_t v307 = v28;
        sub_1CC4325D8(v309, v31);
        int v56 = *((_DWORD *)v305 + 142);
        if (!v56)
        {
LABEL_67:
          uint64_t v32 = 0;
          goto LABEL_72;
        }
        uint64_t v57 = *((void *)v305 + 69);
        int v58 = v56 - 1;
        unsigned int v59 = (v56 - 1) & (37 * v30);
        uint64_t v32 = (unsigned int *)(v57 + 24 * v59);
        unsigned int v60 = *v32;
        if (v30 == *v32) {
          goto LABEL_72;
        }
        uint64_t v48 = 0;
        int v61 = 1;
        while (v60 != -1)
        {
          if (v48) {
            BOOL v62 = 0;
          }
          else {
            BOOL v62 = v60 == -2;
          }
          if (v62) {
            uint64_t v48 = v32;
          }
          unsigned int v63 = v59 + v61++;
          unsigned int v59 = v63 & v58;
          uint64_t v32 = (unsigned int *)(v57 + 24 * (v63 & v58));
          unsigned int v60 = *v32;
          __int16 v33 = v305;
          uint64_t v28 = v307;
          if (v30 == *v32) {
            goto LABEL_33;
          }
        }
        goto LABEL_82;
      }
LABEL_33:
      ++*((_DWORD *)v33 + 140);
      if (*v32 != -1) {
        --*((_DWORD *)v305 + 141);
      }
      unsigned int *v32 = v30;
      *((void *)v32 + 1) = v29;
      *((void *)v32 + 2) = v28;
LABEL_37:
      unsigned int v39 = sub_1CD56F2A4(v26, (int *)&__src);
      unint64_t v40 = v39[4];
      if (v40 >= v39[5]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*((void *)v39 + 1) + 4 * v40) = *v24;
      ++v39[4];
      uint64_t v41 = v24 + 6;
      while (v41 != v22)
      {
        unsigned int v42 = *v41;
        v41 += 6;
        if (v42 <= 0xFFFFFFFD)
        {
          unsigned int v24 = v41 - 6;
          goto LABEL_43;
        }
      }
      unsigned int v24 = v22;
LABEL_43:
      if (v24 == v25) {
        goto LABEL_85;
      }
    }
    uint64_t v307 = v28;
    sub_1CC4325D8(v309, 2 * v31);
    int v43 = *((_DWORD *)v305 + 142);
    if (!v43) {
      goto LABEL_67;
    }
    uint64_t v44 = *((void *)v305 + 69);
    int v45 = v43 - 1;
    unsigned int v46 = (v43 - 1) & (37 * v30);
    uint64_t v32 = (unsigned int *)(v44 + 24 * v46);
    unsigned int v47 = *v32;
    if (v30 == *v32)
    {
LABEL_72:
      __int16 v33 = v305;
      uint64_t v28 = v307;
      goto LABEL_33;
    }
    uint64_t v48 = 0;
    int v49 = 1;
    while (v47 != -1)
    {
      if (v48) {
        BOOL v50 = 0;
      }
      else {
        BOOL v50 = v47 == -2;
      }
      if (v50) {
        uint64_t v48 = v32;
      }
      unsigned int v51 = v46 + v49++;
      unsigned int v46 = v51 & v45;
      uint64_t v32 = (unsigned int *)(v44 + 24 * (v51 & v45));
      unsigned int v47 = *v32;
      __int16 v33 = v305;
      uint64_t v28 = v307;
      if (v30 == *v32) {
        goto LABEL_33;
      }
    }
LABEL_82:
    if (v48) {
      uint64_t v32 = v48;
    }
    goto LABEL_72;
  }
LABEL_85:
  int v64 = v305;
  *((unsigned char *)v305 + 658) = byte_1EBCD2E50;
  if (byte_1EBCD2FD0) {
    llvm::MachineFunction::verify(*((llvm::MachineFunction **)v305 + 32), v305, "Before register coalescing", 1);
  }
  uint64_t v65 = (uint64_t)v305 + 600;
  int v66 = *((_DWORD *)v305 + 152);
  uint64_t v308 = (unsigned int *)((char *)v305 + 600);
  if (v66 || *((_DWORD *)v305 + 153))
  {
    uint64_t v279 = *((unsigned int *)v305 + 154);
    if (v279 > 4 * v66 && v279 >= 0x41)
    {
      uint64_t v65 = (uint64_t)v305 + 600;
      sub_1CD56F5B8(v308);
      int v64 = v305;
    }
    else
    {
      if (v279)
      {
        uint64_t v280 = *(void *)v308;
        uint64_t v281 = 32 * v279;
        do
        {
          if (*(_DWORD *)v280 != -1)
          {
            if (*(_DWORD *)v280 != -2)
            {
              unsigned int v282 = *(void **)(v280 + 8);
              if (v282)
              {
                *(void *)(v280 + 16) = v282;
                operator delete(v282);
              }
            }
            *(_DWORD *)uint64_t v280 = -1;
          }
          v280 += 32;
          v281 -= 32;
        }
        while (v281);
      }
      int v64 = v305;
      *((void *)v305 + 76) = 0;
      uint64_t v65 = (uint64_t)v305 + 600;
    }
  }
  int v67 = *((_DWORD *)v64 + 158);
  if (v67 || *((_DWORD *)v64 + 159))
  {
    uint64_t v283 = (_DWORD *)((char *)v64 + 624);
    uint64_t v284 = *((unsigned int *)v64 + 160);
    if (v284 > 4 * v67 && v284 >= 0x41)
    {
      sub_1CD56BF0C(v283);
      int v64 = v305;
    }
    else
    {
      if (v284)
      {
        uint64_t v285 = *(void *)v283 + 24;
        uint64_t v286 = 40 * v284;
        while (1)
        {
          int v287 = *(_DWORD *)(v285 - 24);
          if (v287 == -2) {
            goto LABEL_492;
          }
          if (v287 != -1) {
            break;
          }
LABEL_493:
          v285 += 40;
          v286 -= 40;
          if (!v286) {
            goto LABEL_494;
          }
        }
        uint64_t v288 = *(void **)(v285 - 16);
        if ((void *)v285 != v288) {
          free(v288);
        }
LABEL_492:
        *(_DWORD *)(v285 - 24) = -1;
        goto LABEL_493;
      }
LABEL_494:
      int v64 = v305;
      *((void *)v305 + 79) = 0;
    }
    uint64_t v65 = (uint64_t)v305 + 600;
  }
  uint64_t v304 = *(void **)(*((void *)v64 + 36) + 288);
  __src = v315;
  uint64_t v314 = 0x800000000;
  uint64_t v68 = *(void *)(a2 + 328);
  if (v68 != a2 + 320)
  {
    while (1)
    {
      uint64_t v69 = v68 + 48;
      uint64_t v302 = v68;
      unint64_t v70 = *(void *)(v68 + 56);
      if (v70 != v68 + 48) {
        break;
      }
LABEL_197:
      LODWORD(v314) = 0;
      uint64_t v68 = *(void *)(v302 + 8);
      if (v68 == a2 + 320) {
        goto LABEL_198;
      }
    }
    unsigned int v71 = 0;
    unsigned int v72 = 0;
    unsigned int v73 = 0;
    unsigned int v74 = 0;
    uint64_t v300 = v69;
    while (1)
    {
      unsigned int v75 = **(unsigned __int16 **)(v70 + 16);
      if (v75 - 13 > 1) {
        break;
      }
      uint64_t v76 = *(void *)(v70 + 32);
      if (v75 != 14)
      {
        uint64_t v78 = v76 + 32;
        goto LABEL_148;
      }
      uint64_t v77 = *(unsigned int *)(v70 + 40);
      if (v77 != 2)
      {
        uint64_t v78 = v76 + 32 * v77;
        v76 += 64;
        do
        {
LABEL_148:
          if (!*(unsigned char *)v76 && (*(_DWORD *)(v76 + 4) & 0x80000000) != 0)
          {
            if (v73 >= HIDWORD(v314)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__src + v72) = v70;
            unsigned int v71 = v314 + 1;
            goto LABEL_155;
          }
          v76 += 32;
        }
        while (v76 != v78);
        if (v70) {
          goto LABEL_156;
        }
LABEL_159:
        while ((*(_WORD *)(v70 + 44) & 8) != 0)
          unint64_t v70 = *(void *)(v70 + 8);
        goto LABEL_160;
      }
LABEL_156:
      if ((*(unsigned char *)v70 & 4) == 0) {
        goto LABEL_159;
      }
LABEL_160:
      unint64_t v70 = *(void *)(v70 + 8);
      if (v70 == v69)
      {
        if (v71)
        {
          uint64_t v113 = *(void *)(v304[49] + 16 * *(unsigned int *)(v302 + 24) + 8);
          unsigned int v114 = (char *)__src;
          int v311 = (char *)__src + 8 * v71;
          do
          {
            uint64_t v115 = *(void *)v114;
            uint64_t v116 = *(void *)(*(void *)v114 + 32);
            if (**(_WORD **)(*(void *)v114 + 16) != 14)
            {
              uint64_t v118 = v116 + 32;
              goto LABEL_175;
            }
            uint64_t v117 = *(unsigned int *)(v115 + 40);
            if (v117 != 2)
            {
              uint64_t v118 = v116 + 32 * v117;
              v116 += 64;
              do
              {
LABEL_175:
                if (!*(unsigned char *)v116 && (*(_DWORD *)(v116 + 4) & 0x80000000) != 0)
                {
                  LODWORD(v316) = *(_DWORD *)(v116 + 4);
                  uint64_t v119 = (void *)sub_1CC4328FC(v65, (int *)&v316);
                  int v120 = v119;
                  int v122 = (char *)v119[2];
                  unint64_t v121 = v119[3];
                  if ((unint64_t)v122 >= v121)
                  {
                    int v124 = (char *)v119[1];
                    uint64_t v125 = (v122 - v124) >> 4;
                    unint64_t v126 = v125 + 1;
                    if ((unint64_t)(v125 + 1) >> 60) {
                      goto LABEL_470;
                    }
                    uint64_t v127 = v121 - (void)v124;
                    if (v127 >> 3 > v126) {
                      unint64_t v126 = v127 >> 3;
                    }
                    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v128 = v126;
                    }
                    if (v128)
                    {
                      if (v128 >> 60) {
                        goto LABEL_471;
                      }
                      BOOL v129 = (char *)operator new(16 * v128);
                    }
                    else
                    {
                      BOOL v129 = 0;
                    }
                    unsigned int v130 = &v129[16 * v125];
                    *(void *)unsigned int v130 = v113;
                    *((void *)v130 + 1) = v115;
                    int v131 = v130;
                    if (v122 != v124)
                    {
                      do
                      {
                        *((_OWORD *)v131 - 1) = *((_OWORD *)v122 - 1);
                        v131 -= 16;
                        v122 -= 16;
                      }
                      while (v122 != v124);
                      int v122 = (char *)v120[1];
                    }
                    int v123 = v130 + 16;
                    v120[1] = v131;
                    v120[2] = v130 + 16;
                    v120[3] = &v129[16 * v128];
                    uint64_t v65 = (uint64_t)v305 + 600;
                    if (v122) {
                      operator delete(v122);
                    }
                  }
                  else
                  {
                    *(void *)int v122 = v113;
                    *((void *)v122 + 1) = v115;
                    int v123 = v122 + 16;
                  }
                  v120[2] = v123;
                }
                v116 += 32;
              }
              while (v116 != v118);
            }
            v114 += 8;
          }
          while (v114 != v311);
        }
        goto LABEL_197;
      }
    }
    if (v75 <= 0x17 && ((1 << v75) & 0x838000) != 0) {
      goto LABEL_156;
    }
    __int16 v80 = *(_WORD *)(v70 + 44);
    unint64_t v81 = v70;
    if ((v80 & 4) != 0)
    {
      do
        unint64_t v81 = *(void *)v81 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v81 + 44) & 4) != 0);
    }
    unint64_t v82 = v70;
    if ((v80 & 8) != 0)
    {
      do
        unint64_t v82 = *(void *)(v82 + 8);
      while ((*(_WORD *)(v82 + 44) & 8) != 0);
    }
    unint64_t v83 = *(void *)(v82 + 8);
    if (v81 != v83)
    {
      while (1)
      {
        unsigned int v84 = **(unsigned __int16 **)(v81 + 16);
        BOOL v85 = v84 > 0x17;
        int v86 = (1 << v84) & 0x83E000;
        if (v85 || v86 == 0) {
          break;
        }
        unint64_t v81 = *(void *)(v81 + 8);
        if (v81 == v83)
        {
          unint64_t v81 = v83;
          break;
        }
      }
    }
    uint64_t v88 = v304[46];
    uint64_t v89 = *((unsigned int *)v304 + 96);
    if (v89)
    {
      LODWORD(v90) = ((v81 >> 4) ^ (v81 >> 9)) & (v89 - 1);
      uint64_t v91 = (uint64_t *)(v88 + 16 * v90);
      uint64_t v92 = *v91;
      if (v81 != *v91)
      {
        int v93 = 1;
        do
        {
          if (v92 == -4096) {
            goto LABEL_162;
          }
          int v94 = v90 + v93++;
          uint64_t v90 = v94 & (v89 - 1);
          uint64_t v92 = *(void *)(v88 + 16 * v90);
        }
        while (v81 != v92);
        uint64_t v91 = (uint64_t *)(v88 + 16 * v90);
      }
      if (v74)
      {
LABEL_119:
        uint64_t v310 = v91[1];
        uint64_t v95 = (char *)__src;
        uint64_t v306 = (char *)__src + 8 * v74;
        while (1)
        {
          uint64_t v96 = *(void *)v95;
          uint64_t v97 = *(void *)(*(void *)v95 + 32);
          if (**(_WORD **)(*(void *)v95 + 16) != 14) {
            break;
          }
          uint64_t v98 = *(unsigned int *)(v96 + 40);
          if (v98 != 2)
          {
            uint64_t v99 = v97 + 32 * v98;
            v97 += 64;
            do
            {
LABEL_124:
              if (!*(unsigned char *)v97 && (*(_DWORD *)(v97 + 4) & 0x80000000) != 0)
              {
                LODWORD(v316) = *(_DWORD *)(v97 + 4);
                uint64_t v100 = (void *)sub_1CC4328FC(v65, (int *)&v316);
                long long v101 = v100;
                uint64_t v103 = (char *)v100[2];
                unint64_t v102 = v100[3];
                if ((unint64_t)v103 >= v102)
                {
                  uint64_t v105 = (char *)v100[1];
                  uint64_t v106 = (v103 - v105) >> 4;
                  unint64_t v107 = v106 + 1;
                  if ((unint64_t)(v106 + 1) >> 60) {
LABEL_470:
                  }
                    abort();
                  uint64_t v108 = v102 - (void)v105;
                  if (v108 >> 3 > v107) {
                    unint64_t v107 = v108 >> 3;
                  }
                  if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v109 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v109 = v107;
                  }
                  if (v109)
                  {
                    if (v109 >> 60) {
LABEL_471:
                    }
                      sub_1CB833614();
                    BOOL v110 = (char *)operator new(16 * v109);
                  }
                  else
                  {
                    BOOL v110 = 0;
                  }
                  int v111 = &v110[16 * v106];
                  *(void *)int v111 = v310;
                  *((void *)v111 + 1) = v96;
                  uint64_t v112 = v111;
                  if (v103 != v105)
                  {
                    do
                    {
                      *((_OWORD *)v112 - 1) = *((_OWORD *)v103 - 1);
                      v112 -= 16;
                      v103 -= 16;
                    }
                    while (v103 != v105);
                    uint64_t v103 = (char *)v101[1];
                  }
                  unsigned int v104 = v111 + 16;
                  v101[1] = v112;
                  v101[2] = v111 + 16;
                  v101[3] = &v110[16 * v109];
                  uint64_t v65 = (uint64_t)v305 + 600;
                  if (v103) {
                    operator delete(v103);
                  }
                }
                else
                {
                  *(void *)uint64_t v103 = v310;
                  *((void *)v103 + 1) = v96;
                  unsigned int v104 = v103 + 16;
                }
                v101[2] = v104;
              }
              v97 += 32;
            }
            while (v97 != v99);
          }
          v95 += 8;
          if (v95 == v306)
          {
            unsigned int v71 = 0;
            uint64_t v69 = v300;
            goto LABEL_155;
          }
        }
        uint64_t v99 = v97 + 32;
        goto LABEL_124;
      }
    }
    else
    {
LABEL_162:
      uint64_t v91 = (uint64_t *)(v88 + 16 * v89);
      if (v74) {
        goto LABEL_119;
      }
    }
    unsigned int v71 = 0;
LABEL_155:
    LODWORD(v314) = v71;
    unsigned int v72 = v71;
    unsigned int v73 = v71;
    unsigned int v74 = v71;
    if (!v70) {
      goto LABEL_159;
    }
    goto LABEL_156;
  }
LABEL_198:
  uint64_t v132 = (uint64_t)v305;
  uint64_t v133 = *((void *)v305 + 75);
  uint64_t v134 = *((unsigned int *)v305 + 154);
  float v135 = (unsigned int *)(v133 + 32 * v134);
  if (*((_DWORD *)v305 + 152))
  {
    if (v134)
    {
      uint64_t v136 = 32 * v134;
      uint64_t v137 = (unsigned int *)*((void *)v305 + 75);
      while (*v137 >= 0xFFFFFFFE)
      {
        v137 += 8;
        v136 -= 32;
        if (!v136) {
          goto LABEL_203;
        }
      }
    }
    else
    {
      uint64_t v137 = (unsigned int *)*((void *)v305 + 75);
    }
  }
  else
  {
LABEL_203:
    uint64_t v137 = (unsigned int *)(v133 + 32 * v134);
  }
  float v138 = (unsigned int *)(v133 + 32 * v134);
  while (v137 != v138)
  {
    float v139 = (uint64_t *)*((void *)v137 + 1);
    uint64_t v140 = (uint64_t *)*((void *)v137 + 2);
    unint64_t v141 = 126 - 2 * __clz(((char *)v140 - (char *)v139) >> 4);
    if (v140 == v139) {
      uint64_t v142 = 0;
    }
    else {
      uint64_t v142 = v141;
    }
    sub_1CC432BE8(v139, v140, v142, 1);
    int v143 = v137 + 8;
    while (v143 != v135)
    {
      unsigned int v144 = *v143;
      v143 += 8;
      if (v144 <= 0xFFFFFFFD)
      {
        uint64_t v137 = v143 - 8;
        goto LABEL_214;
      }
    }
    uint64_t v137 = v135;
LABEL_214:
    ;
  }
  if (__src != v315) {
    free(__src);
  }
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::Pass *)((char *)v305 + 312), (const llvm::MachineFunction *)a2);
  if (byte_1EBCD2CD0)
  {
    uint64_t v145 = *((void *)v305 + 32);
    uint64_t v146 = (void *)(v145 + 320);
    unsigned int v147 = -1;
    uint64_t v148 = (void *)(v145 + 320);
    do
    {
      uint64_t v148 = (void *)v148[1];
      ++v147;
    }
    while (v148 != v146);
    uint64_t v149 = v147;
    if (v147)
    {
      int v150 = (char *)operator new(16 * v147);
      uint64_t v151 = &v150[16 * v149];
    }
    else
    {
      int v150 = 0;
      uint64_t v151 = 0;
    }
    uint64_t v152 = *(void **)(v145 + 328);
    if (v152 != v146)
    {
      uint64_t v153 = v150;
      while (1)
      {
        uint64_t v154 = *((void *)v305 + 37);
        int v155 = *(_DWORD *)(v154 + 264);
        if (v155)
        {
          uint64_t v156 = *(void *)(v154 + 248);
          unsigned int v157 = v155 - 1;
          uint64_t v158 = (v155 - 1) & ((v152 >> 4) ^ (v152 >> 9));
          uint64_t v159 = *(void **)(v156 + 16 * v158);
          if (v152 == v159)
          {
LABEL_230:
            unint64_t v162 = *(void **)(v156 + 16 * v158 + 8);
            if (v162)
            {
              int v163 = 0;
              do
              {
                unint64_t v162 = (void *)*v162;
                ++v163;
              }
              while (v162);
              goto LABEL_235;
            }
          }
          else
          {
            int v160 = 1;
            while (v159 != (void *)-4096)
            {
              int v161 = v158 + v160++;
              uint64_t v158 = v161 & v157;
              uint64_t v159 = *(void **)(v156 + 16 * v158);
              if (v152 == v159) {
                goto LABEL_230;
              }
            }
          }
        }
        int v163 = 0;
LABEL_235:
        if (*((unsigned char *)v305 + 658)
          && ((v152[9] - v152[8]) & 0x7FFFFFFF8) == 8
          && ((v152[12] - v152[11]) & 0x7FFFFFFF8) == 8)
        {
          for (uint64_t i = v152[7]; (void *)i != v152 + 6; uint64_t i = *(void *)(i + 8))
          {
            int v165 = **(unsigned __int16 **)(i + 16);
            if (v165 != 11 && v165 != 19 && !sub_1CD50C018(i, 1)) {
              goto LABEL_250;
            }
            if ((*(unsigned char *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                uint64_t i = *(void *)(i + 8);
            }
          }
          char v168 = 1;
        }
        else
        {
LABEL_250:
          char v168 = 0;
        }
        if (v150 >= v151)
        {
          uint64_t v169 = (v150 - v153) >> 4;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 60) {
            goto LABEL_470;
          }
          if ((v151 - v153) >> 3 > v170) {
            unint64_t v170 = (v151 - v153) >> 3;
          }
          if ((unint64_t)(v151 - v153) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v171 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v171 = v170;
          }
          if (v171)
          {
            if (v171 >> 60) {
              goto LABEL_471;
            }
            int v172 = (char *)operator new(16 * v171);
          }
          else
          {
            int v172 = 0;
          }
          uint64_t v173 = &v172[16 * v169];
          *(void *)uint64_t v173 = v152;
          *((_DWORD *)v173 + 2) = v163;
          v173[12] = v168;
          uint64_t v174 = v173;
          while (v150 != v153)
          {
            uint64_t v175 = *((void *)v150 - 2);
            v150 -= 16;
            uint64_t v176 = *(void *)(v150 + 5);
            *((void *)v174 - 2) = v175;
            v174 -= 16;
            *(void *)(v174 + 5) = v176;
          }
          uint64_t v151 = &v172[16 * v171];
          int v150 = v173 + 16;
          if (v153) {
            operator delete(v153);
          }
          uint64_t v153 = v174;
        }
        else
        {
          *(void *)int v150 = v152;
          *((_DWORD *)v150 + 2) = v163;
          v150[12] = v168;
          v150 += 16;
        }
        uint64_t v152 = (void *)v152[1];
        if (v152 == v146) {
          goto LABEL_273;
        }
      }
    }
    uint64_t v153 = v150;
LABEL_273:
    if (v150 - v153 >= 32) {
      qsort(v153, (unint64_t)(v150 - v153) >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1CC434084);
    }
    uint64_t v132 = (uint64_t)v305;
    if (v153 != v150)
    {
      int v177 = (void **)((char *)v305 + 664);
      int v312 = (unsigned int *)((char *)v305 + 672);
      unsigned int v297 = -1;
      int v178 = v153;
      unint64_t v296 = v153;
      uint64_t v303 = (void *)((char *)v305 + 664);
      do
      {
        uint64_t v301 = v178;
        if (*(unsigned char *)(v132 + 657))
        {
          uint64_t v179 = v178;
          if (*((_DWORD *)v178 + 2) >= v297)
          {
            uint64_t v180 = *(void *)v178;
            uint64_t v181 = *v312;
LABEL_285:
            __src = v315;
            uint64_t v314 = 0x200000000;
            unint64_t v316 = v318;
            uint64_t v317 = 0x200000000;
            uint64_t v187 = v180 + 48;
            uint64_t v188 = *(void *)(v180 + 56);
            if (v188 == v180 + 48)
            {
              unsigned int v210 = 0;
              uint64_t v209 = v315;
            }
            else
            {
              do
              {
                int v189 = **(unsigned __int16 **)(v188 + 16);
                if (v189 == 19 || v189 == 11)
                {
                  int v191 = sub_1CC43B350((uint64_t *)v132, v188);
                  if (**(_WORD **)(v188 + 16) != 19) {
                    goto LABEL_297;
                  }
                  uint64_t v192 = *(void *)(v188 + 32);
                  if ((*(unsigned char *)(v192 + 35) & 0x10) != 0) {
                    goto LABEL_297;
                  }
                  int v193 = *(_DWORD *)(v192 + 36);
                  int v194 = *(_DWORD *)(v192 + 4);
                  BOOL v195 = (v193 - 1) >= 0x3FFFFFFF && (v194 - 1) >= 0x3FFFFFFF;
                  if (!v195) {
                    goto LABEL_297;
                  }
                  uint64_t v199 = *((void *)v305 + 36);
                  uint64_t v200 = (void *)(v199 + 408);
                  unint64_t v201 = *(unsigned int *)(v199 + 416);
                  BOOL v195 = (v193 & 0x7FFFFFFFu) >= v201;
                  unint64_t v202 = (v193 & 0x7FFFFFFF) - v201;
                  uint64_t v299 = (void *)(v199 + 408);
                  if (v195)
                  {
                    sub_1CB9153B8((uint64_t)v200, v202 + 1, *(void *)(v199 + 424));
LABEL_324:
                    llvm::LiveIntervals::createInterval();
                  }
                  uint64_t v203 = *(void *)(*v200 + 8 * (v193 & 0x7FFFFFFF));
                  if (!v203) {
                    goto LABEL_324;
                  }
                  uint64_t v204 = llvm::LiveIntervals::intervalIsInOneMBB(v199, v203);
                  int v177 = (void **)((char *)v305 + 664);
                  if (v204) {
                    goto LABEL_314;
                  }
                  unint64_t v205 = *(unsigned int *)(v199 + 416);
                  BOOL v195 = (v194 & 0x7FFFFFFFu) >= v205;
                  unint64_t v206 = (v194 & 0x7FFFFFFF) - v205;
                  if (v195)
                  {
                    sub_1CB9153B8((uint64_t)v299, v206 + 1, *(void *)(v199 + 424));
LABEL_326:
                    llvm::LiveIntervals::createInterval();
                  }
                  uint64_t v207 = *(void *)(*v299 + 8 * (v194 & 0x7FFFFFFF));
                  if (!v207) {
                    goto LABEL_326;
                  }
                  uint64_t v208 = llvm::LiveIntervals::intervalIsInOneMBB(v199, v207);
                  int v177 = (void **)((char *)v305 + 664);
                  if (v208)
                  {
LABEL_314:
                    if (v191)
                    {
                      unint64_t v196 = v314;
                      if (v314 >= (unint64_t)HIDWORD(v314)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      p_src = &__src;
                      uint64_t v198 = &v314;
                      uint64_t v132 = (uint64_t)v305;
                    }
                    else
                    {
                      uint64_t v132 = (uint64_t)v305;
                      unint64_t v196 = *((unsigned int *)v305 + 188);
                      if (v196 >= *((unsigned int *)v305 + 189)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v198 = (uint64_t *)((char *)v305 + 752);
                      p_src = (void **)((char *)v305 + 744);
                    }
                  }
                  else
                  {
LABEL_297:
                    if (v191)
                    {
                      unint64_t v196 = v317;
                      if (v317 >= (unint64_t)HIDWORD(v317)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      p_src = (void **)&v316;
                      uint64_t v132 = (uint64_t)v305;
                      uint64_t v198 = &v317;
                    }
                    else
                    {
                      uint64_t v132 = (uint64_t)v305;
                      unint64_t v196 = *((unsigned int *)v305 + 168);
                      if (v196 >= *((unsigned int *)v305 + 169)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      p_src = v177;
                      uint64_t v198 = (uint64_t *)((char *)v305 + 672);
                    }
                  }
                  *((void *)*p_src + v196) = v188;
                  ++*(_DWORD *)v198;
                }
                if ((*(unsigned char *)v188 & 4) == 0)
                {
                  while ((*(_WORD *)(v188 + 44) & 8) != 0)
                    uint64_t v188 = *(void *)(v188 + 8);
                }
                uint64_t v188 = *(void *)(v188 + 8);
              }
              while (v188 != v187);
              uint64_t v209 = __src;
              unsigned int v210 = v314;
            }
            uint64_t v211 = *(unsigned int *)(v132 + 752);
            uint64_t v153 = v296;
            if (v211 + (unint64_t)v210 > *(unsigned int *)(v132 + 756)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v210)
            {
              memcpy((void *)(*((void *)v305 + 93) + 8 * v211), v209, 8 * v210);
              LODWORD(v211) = *((_DWORD *)v305 + 188);
            }
            int v177 = (void **)((char *)v305 + 664);
            *(_DWORD *)(v132 + 752) = v211 + v210;
            int v212 = v317;
            uint64_t v213 = *(unsigned int *)(v132 + 672);
            if (v213 + (unint64_t)v317 > *(unsigned int *)(v132 + 676)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v317)
            {
              memcpy((void *)(*v303 + 8 * v213), v316, 8 * v317);
              LODWORD(v213) = *v312;
            }
            *int v312 = v213 + v212;
            if (v316 != v318) {
              free(v316);
            }
            if (__src != v315) {
              free(__src);
            }
            goto LABEL_362;
          }
          sub_1CC434120(v132);
          unsigned int v297 = *((_DWORD *)v179 + 2);
          uint64_t v180 = *(void *)v179;
          uint64_t v181 = *(unsigned int *)(v132 + 672);
          if (*(unsigned char *)(v132 + 657)) {
            goto LABEL_285;
          }
          unsigned int v182 = *(_DWORD *)(v132 + 672);
        }
        else
        {
          uint64_t v180 = *(void *)v178;
          unsigned int v182 = *v312;
          uint64_t v181 = *v312;
        }
        __src = v315;
        uint64_t v314 = 0x200000000;
        uint64_t v183 = v180 + 48;
        uint64_t v184 = *(void *)(v180 + 56);
        if (v184 == v180 + 48)
        {
          unsigned int v185 = 0;
          int v186 = v315;
        }
        else
        {
          do
          {
            int v214 = **(unsigned __int16 **)(v184 + 16);
            if (v214 == 19 || v214 == 11)
            {
              if (sub_1CC43B350((uint64_t *)v132, v184))
              {
                unint64_t v216 = v314;
                if (v314 >= (unint64_t)HIDWORD(v314)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v217 = &__src;
                int v218 = &v314;
              }
              else
              {
                unint64_t v216 = *(unsigned int *)(v132 + 672);
                if (v216 >= *(unsigned int *)(v132 + 676)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v217 = v177;
                int v218 = (uint64_t *)((char *)v305 + 672);
              }
              *((void *)*v217 + v216) = v184;
              ++*(_DWORD *)v218;
            }
            if ((*(unsigned char *)v184 & 4) == 0)
            {
              while ((*(_WORD *)(v184 + 44) & 8) != 0)
                uint64_t v184 = *(void *)(v184 + 8);
            }
            uint64_t v184 = *(void *)(v184 + 8);
          }
          while (v184 != v183);
          int v186 = __src;
          unsigned int v185 = v314;
          unsigned int v182 = *v312;
        }
        if (v185 + (unint64_t)v182 > *(unsigned int *)(v132 + 676)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v185)
        {
          memcpy((void *)(*v303 + 8 * v182), v186, 8 * v185);
          unsigned int v182 = *v312;
        }
        unint64_t v219 = __src;
        *int v312 = v182 + v185;
        if (v219 != v315) {
          free(v219);
        }
        int v177 = (void **)((char *)v305 + 664);
LABEL_362:
        if (sub_1CC434330(v132, (uint64_t *)(*(void *)(v132 + 664) + 8 * v181), *(unsigned int *)(v132 + 672) - v181))
        {
          unint64_t v220 = *v177;
          uint64_t v221 = *v312;
          uint64_t v222 = (uint64_t)*v177 + 8 * v221;
          if (v181 == v221)
          {
            unint64_t v223 = (char *)*v177 + 8 * v181;
          }
          else
          {
            uint64_t v224 = 8 * v221 - 8 * v181;
            unint64_t v223 = (char *)*v177 + 8 * v181;
            while (*v223)
            {
              ++v223;
              v224 -= 8;
              if (!v224)
              {
                unint64_t v223 = (char *)*v177 + 8 * v221;
                break;
              }
            }
          }
          if (v223 != (void *)v222)
          {
            uint64_t v225 = v223 + 1;
            if (v223 + 1 != (void *)v222)
            {
              uint64_t v226 = 8 * v221 - 8 * v181 - 8 * (((char *)v223 - ((unsigned char *)*v177 + 8 * v181)) >> 3) - 8;
              do
              {
                if (*v225) {
                  *v223++ = *v225;
                }
                ++v225;
                v226 -= 8;
              }
              while (v226);
              unint64_t v220 = *v177;
            }
          }
          *int v312 = (unint64_t)((char *)v223 - v220) >> 3;
        }
        int v178 = v301 + 16;
      }
      while (v301 + 16 != v150);
    }
    sub_1CC4341D4(v132);
    sub_1CC434120(v132);
    while ((sub_1CC434330(v132, *(uint64_t **)(v132 + 664), *(unsigned int *)(v132 + 672)) & 1) != 0)
      ;
    sub_1CC4341D4(v132);
    if (v153) {
      operator delete(v153);
    }
  }
  size_t v227 = *(unsigned int *)(v132 + 1008);
  if (v227 >= 2)
  {
    qsort(*(void **)(v132 + 1000), v227, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CC442178);
    LODWORD(v227) = *(_DWORD *)(v132 + 1008);
  }
  uint64_t v228 = *(void *)(v132 + 1000);
  int v229 = (int *)(v228 + 4 * v227);
  if (v227)
  {
    int v230 = (int *)(v228 - 4);
    uint64_t v231 = 4 * v227 - 4;
    while (v231)
    {
      int v232 = v230[1];
      int v233 = v230[2];
      ++v230;
      v231 -= 4;
      if (v232 == v233) {
        goto LABEL_394;
      }
    }
  }
  else
  {
    int v230 = *(int **)(v132 + 1000);
LABEL_394:
    if (v230 != v229)
    {
      unint64_t v234 = v230 + 2;
      if (v230 + 2 != v229)
      {
        int v235 = *v230;
        do
        {
          int v236 = v235;
          int v235 = *v234;
          if (v236 != *v234)
          {
            v230[1] = v235;
            ++v230;
          }
          ++v234;
        }
        while (v234 != v229);
      }
      int v229 = v230 + 1;
    }
  }
  unint64_t v237 = (unint64_t)v229 - v228;
  *(_DWORD *)(v132 + 1008) = v237 >> 2;
  if ((v237 >> 2))
  {
    uint64_t v238 = 0;
    uint64_t v239 = (v237 >> 2);
    do
    {
      uint64_t v240 = *(unsigned int *)(*(void *)(v132 + 1000) + 4 * v238);
      unsigned int v241 = *(void **)(v132 + 264);
      if ((v240 & 0x80000000) != 0) {
        int v242 = (uint64_t *)(v241[3] + 16 * (v240 & 0x7FFFFFFF) + 8);
      }
      else {
        int v242 = (uint64_t *)(v241[34] + 8 * v240);
      }
      uint64_t v243 = *v242;
      if (v243)
      {
        while ((*(_DWORD *)v243 & 0x80000000) != 0)
        {
          uint64_t v243 = *(void *)(v243 + 24);
          if (!v243) {
            goto LABEL_424;
          }
        }
        if (llvm::MachineRegisterInfo::recomputeRegClass(v241, v240))
        {
          uint64_t v244 = *(void *)(v132 + 288);
          unint64_t v245 = v240 & 0x7FFFFFFF;
          unsigned int v246 = (void *)(v244 + 408);
          unint64_t v247 = *(unsigned int *)(v244 + 416);
          BOOL v195 = v245 >= v247;
          unint64_t v248 = v245 - v247;
          if (v195)
          {
            sub_1CB9153B8((uint64_t)v246, v248 + 1, *(void *)(v244 + 424));
LABEL_427:
            llvm::LiveIntervals::createInterval();
          }
          uint64_t v249 = *(void *)(*v246 + 8 * v245);
          if (!v249) {
            goto LABEL_427;
          }
          uint64_t v250 = *(void *)(v249 + 104);
          if (v250)
          {
            uint64_t v251 = *(void *)(v132 + 264);
            if (!*(unsigned char *)(v251 + 16)
              || !*(unsigned char *)((*(void *)(*(void *)(v251 + 24) + 16 * v245) & 0xFFFFFFFFFFFFFFF8) + 34))
            {
              do
              {
                uint64_t v253 = *(void *)(v250 + 96);
                uint64_t v252 = *(void *)(v250 + 104);
                *(void *)(v250 + 96) = 0;
                if (v253)
                {
                  sub_1CB833A08(v253, *(void **)(v253 + 8));
                  MEMORY[0x1D25D9CE0](v253, 0x1020C4062D53EE8);
                }
                unint64_t v254 = *(void **)(v250 + 64);
                if (v254 != (void *)(v250 + 80)) {
                  free(v254);
                }
                if (*(void *)v250 != v250 + 16) {
                  free(*(void **)v250);
                }
                uint64_t v250 = v252;
              }
              while (v252);
              *(void *)(v249 + 104) = 0;
            }
          }
        }
      }
LABEL_424:
      ++v238;
    }
    while (v238 != v239);
  }
  uint64_t v255 = *(void *)(v132 + 256);
  uint64_t v256 = *(void *)(v255 + 1096);
  uint64_t v257 = *(unsigned int *)(v255 + 1112);
  uint64_t v258 = (int *)(v256 + 24 * v257);
  if (*(_DWORD *)(v255 + 1104))
  {
    if (v257)
    {
      uint64_t v259 = 24 * v257;
      int v260 = *(int **)(v255 + 1096);
      while (*v260 >= 0xFFFFFFFE)
      {
        v260 += 6;
        v259 -= 24;
        if (!v259) {
          goto LABEL_433;
        }
      }
    }
    else
    {
      int v260 = *(int **)(v255 + 1096);
    }
  }
  else
  {
LABEL_433:
    int v260 = (int *)(v256 + 24 * v257);
  }
  uint64_t v261 = (int *)(v256 + 24 * v257);
  while (v260 != v261)
  {
    __src = 0;
    if (sub_1CB8F50CC(*(void *)(v132 + 552), *(_DWORD *)(v132 + 568), *v260, &__src)) {
      uint64_t v262 = __src;
    }
    else {
      uint64_t v262 = (_DWORD *)(*(void *)(v132 + 552) + 24 * *(unsigned int *)(v132 + 568));
    }
    v260[4] = v262[4];
    v260[5] = v262[5];
    uint64_t v263 = (unsigned int *)(v260 + 6);
    while (v263 != (unsigned int *)v258)
    {
      unsigned int v264 = *v263;
      v263 += 6;
      if (v264 <= 0xFFFFFFFD)
      {
        int v260 = (int *)(v263 - 6);
        goto LABEL_444;
      }
    }
    int v260 = v258;
LABEL_444:
    ;
  }
  int v265 = *(_DWORD *)(v132 + 560);
  int v2 = v295;
  if (v265 || *(_DWORD *)(v132 + 564))
  {
    uint64_t v266 = *(unsigned int *)(v132 + 568);
    uint64_t v267 = *(_DWORD **)(v132 + 552);
    if (v266 <= 4 * v265 || v266 < 0x41)
    {
      if (v266)
      {
        uint64_t v271 = 24 * v266;
        do
        {
          _DWORD *v267 = -1;
          v267 += 6;
          v271 -= 24;
        }
        while (v271);
      }
      *(void *)(v132 + 560) = 0;
    }
    else if (v265)
    {
      int v268 = 1 << (33 - __clz(v265 - 1));
      if (v268 <= 64) {
        int v269 = 64;
      }
      else {
        int v269 = v268;
      }
      if (v269 == v266)
      {
        *(void *)(v132 + 560) = 0;
        uint64_t v270 = 24 * v266;
        do
        {
          _DWORD *v267 = -1;
          v267 += 6;
          v270 -= 24;
        }
        while (v270);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v267, 8);
        unint64_t v272 = (4 * v269 / 3u + 1) | ((unint64_t)(4 * v269 / 3u + 1) >> 1);
        unint64_t v273 = v272 | (v272 >> 2) | ((v272 | (v272 >> 2)) >> 4);
        LODWORD(v273) = (((v273 | (v273 >> 8)) >> 16) | v273 | (v273 >> 8)) + 1;
        *(_DWORD *)(v132 + 568) = v273;
        unsigned int v274 = operator new(24 * v273, (std::align_val_t)8uLL);
        *(void *)(v132 + 552) = v274;
        *(void *)(v132 + 560) = 0;
        uint64_t v275 = *(unsigned int *)(v132 + 568);
        if (v275)
        {
          uint64_t v276 = 24 * v275;
          do
          {
            _DWORD *v274 = -1;
            v274 += 6;
            v276 -= 24;
          }
          while (v276);
        }
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0](v267, 8);
      *(void *)(v132 + 552) = 0;
      *(void *)(v132 + 560) = 0;
      *(_DWORD *)(v132 + 568) = 0;
    }
  }
  int v277 = *(_DWORD *)(v132 + 584);
  if (!v277 && !*(_DWORD *)(v132 + 588)) {
    goto LABEL_467;
  }
  uint64_t v289 = (_DWORD *)(v132 + 576);
  uint64_t v290 = *(unsigned int *)(v132 + 592);
  if (v290 > 4 * v277 && v290 >= 0x41)
  {
    sub_1CD56BE0C(v289);
    uint64_t v132 = (uint64_t)v305;
  }
  else
  {
    if (v290)
    {
      uint64_t v291 = *(void *)v289 + 24;
      uint64_t v292 = 32 * v290;
      while (1)
      {
        int v293 = *(_DWORD *)(v291 - 24);
        if (v293 == -2) {
          goto LABEL_504;
        }
        if (v293 != -1) {
          break;
        }
LABEL_505:
        v291 += 32;
        v292 -= 32;
        if (!v292) {
          goto LABEL_506;
        }
      }
      uint64_t v294 = *(void **)(v291 - 16);
      if ((void *)v291 != v294) {
        free(v294);
      }
LABEL_504:
      *(_DWORD *)(v291 - 24) = -1;
      goto LABEL_505;
    }
LABEL_506:
    uint64_t v132 = (uint64_t)v305;
    *((void *)v305 + 73) = 0;
  }
LABEL_467:
  if (byte_1EBCD2FD0) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(v132 + 256), (llvm::Pass *)v132, "After register coalescing", 1);
  }
  return v2 == 0;
}

void sub_1CC43222C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 832);
  uint64_t v5 = *(unsigned int *)(a1 + 844);
  if (v4 != *(void *)(a1 + 824))
  {
    unsigned int v9 = *(_DWORD *)(a1 + 840);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *(_DWORD *)(a1 + 840);
    if (v5 < v9)
    {
      *(_DWORD *)(a1 + 844) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
      return;
    }
LABEL_12:
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(a1 + 848)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 824), v9);
    unsigned int v9 = *(_DWORD *)(a1 + 840);
    uint64_t v4 = *(void *)(a1 + 832);
LABEL_14:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (void *)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      uint64_t v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v12;
      }
      if (*v18 != a2)
      {
        if (*v18 == -2) {
          --*(_DWORD *)(a1 + 848);
        }
        else {
          ++*(_DWORD *)(a1 + 844);
        }
        void *v18 = a2;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          uint64_t v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
        uint64_t v13 = *v12;
        if (*v12 == -1) {
          goto LABEL_26;
        }
      }
    }
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v8 = *(void **)(a1 + 832);
  while (*v8 != a2)
  {
    if (*v8 == -2) {
      uint64_t v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      *uint64_t v6 = a2;
      --*(_DWORD *)(a1 + 848);
      return;
    }
  }
}

void sub_1CC4323B0(uint64_t a1)
{
}

void sub_1CC4323B8(uint64_t a1)
{
  sub_1CC4300C4(a1 - 248);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4323F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(unsigned int *)(a1 + 596);
  if (v4 != *(void *)(a1 + 576))
  {
    unsigned int v9 = *(_DWORD *)(a1 + 592);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *(_DWORD *)(a1 + 592);
    if (v5 < v9)
    {
      *(_DWORD *)(a1 + 596) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
      return;
    }
LABEL_12:
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(a1 + 600)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 576), v9);
    unsigned int v9 = *(_DWORD *)(a1 + 592);
    uint64_t v4 = *(void *)(a1 + 584);
LABEL_14:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (void *)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      uint64_t v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v12;
      }
      if (*v18 != a2)
      {
        if (*v18 == -2) {
          --*(_DWORD *)(a1 + 600);
        }
        else {
          ++*(_DWORD *)(a1 + 596);
        }
        void *v18 = a2;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          uint64_t v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
        uint64_t v13 = *v12;
        if (*v12 == -1) {
          goto LABEL_26;
        }
      }
    }
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v8 = *(void **)(a1 + 584);
  while (*v8 != a2)
  {
    if (*v8 == -2) {
      uint64_t v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      *uint64_t v6 = a2;
      --*(_DWORD *)(a1 + 600);
      return;
    }
  }
}

void sub_1CC432578(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    int v3 = (void *)(*(void *)a1 + 16);
    do
    {
      if (*((_DWORD *)v3 - 4) <= 0xFFFFFFFD)
      {
        uint64_t v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *int v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

_DWORD *sub_1CC4325D8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *uint64_t result = -1;
        result += 6;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = (_OWORD *)(v4 + 8);
      do
      {
        unsigned int v14 = *((_DWORD *)v13 - 2);
        if (v14 <= 0xFFFFFFFD)
        {
          uint64_t v18 = 0;
          sub_1CB8F50CC(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          unsigned int *v18 = v14;
          *(_OWORD *)(v15 + 2) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v13 = (_OWORD *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *uint64_t result = -1;
      result += 6;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void sub_1CC432734(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -1;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      int v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        uint64_t v11 = v10 & (37 * v9);
        uint64_t v12 = *(void *)a1 + 32 * v11;
        int v13 = *(_DWORD *)v12;
        if (v9 != *(_DWORD *)v12)
        {
          uint64_t v18 = 0;
          int v19 = 1;
          while (v13 != -1)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v13 == -2;
            }
            if (v20) {
              uint64_t v18 = v12;
            }
            int v21 = v11 + v19++;
            uint64_t v11 = v21 & v10;
            uint64_t v12 = *(void *)a1 + 32 * v11;
            int v13 = *(_DWORD *)v12;
            if (v9 == *(_DWORD *)v12) {
              goto LABEL_7;
            }
          }
          if (v18) {
            uint64_t v12 = v18;
          }
        }
LABEL_7:
        *(void *)(v12 + 8) = v12 + 24;
        *(_DWORD *)uint64_t v12 = v9;
        *(void *)(v12 + 16) = 0x200000000;
        unsigned int v14 = v4[4];
        int v15 = (int *)*((void *)v4 + 1);
        if ((int *)v12 != v4 && v14 != 0)
        {
          if (v15 == v4 + 6)
          {
            if (v14 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v12 + 24), v15, 4 * v4[4]);
            *(_DWORD *)(v12 + 16) = v14;
            int v15 = (int *)*((void *)v4 + 1);
          }
          else
          {
            *(void *)(v12 + 8) = v15;
            int v17 = v4[5];
            *(_DWORD *)(v12 + 16) = v14;
            *(_DWORD *)(v12 + 20) = v17;
            *((void *)v4 + 1) = v4 + 6;
            v4[5] = 0;
            int v15 = v4 + 6;
          }
          v4[4] = 0;
        }
        ++*(_DWORD *)(a1 + 8);
        if (v15 != v4 + 6) {
          free(v15);
        }
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC4328FC(uint64_t a1, int *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (37 * *a2) & (v4 - 1);
    uint64_t result = *(void *)a1 + 32 * v5;
    int v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result) {
      return result;
    }
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -2;
      }
      if (v10) {
        uint64_t v8 = result;
      }
      int v11 = v5 + v9++;
      uint64_t v5 = v11 & (v4 - 1);
      uint64_t result = *(void *)a1 + 32 * v5;
      int v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result) {
        return result;
      }
    }
    if (v8) {
      uint64_t result = v8;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  int v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1CD56F678(a1, 2 * v4);
    int v13 = *a2;
    int v14 = *(_DWORD *)(a1 + 16) - 1;
    uint64_t v15 = (37 * *a2) & v14;
    uint64_t result = *(void *)a1 + 32 * v15;
    int v16 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result) {
      goto LABEL_17;
    }
    uint64_t v17 = 0;
    int v18 = 1;
    while (v16 != -1)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -2;
      }
      if (v19) {
        uint64_t v17 = result;
      }
      int v20 = v15 + v18++;
      uint64_t v15 = v20 & v14;
      uint64_t result = *(void *)a1 + 32 * v15;
      int v16 = *(_DWORD *)result;
      if (v13 == *(_DWORD *)result) {
        goto LABEL_17;
      }
    }
    goto LABEL_35;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1CD56F678(a1, v4);
    int v13 = *a2;
    int v21 = *(_DWORD *)(a1 + 16) - 1;
    uint64_t v22 = (37 * *a2) & v21;
    uint64_t result = *(void *)a1 + 32 * v22;
    int v23 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result) {
      goto LABEL_17;
    }
    uint64_t v17 = 0;
    int v24 = 1;
    while (v23 != -1)
    {
      if (v17) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v23 == -2;
      }
      if (v25) {
        uint64_t v17 = result;
      }
      int v26 = v22 + v24++;
      uint64_t v22 = v26 & v21;
      uint64_t result = *(void *)a1 + 32 * v22;
      int v23 = *(_DWORD *)result;
      if (v13 == *(_DWORD *)result) {
        goto LABEL_17;
      }
    }
LABEL_35:
    if (v17) {
      uint64_t result = v17;
    }
  }
  int v13 = *(_DWORD *)result;
LABEL_17:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t result = *a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t sub_1CC432B00(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    unsigned int v4 = *(_DWORD **)result;
    uint64_t v5 = 32 * v3;
    do
    {
      *unsigned int v4 = -1;
      v4 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 8)
  {
    int v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      uint64_t v8 = v7 & (37 * v6);
      uint64_t v9 = *(void *)result + 32 * v8;
      int v10 = *(_DWORD *)v9;
      if (v6 != *(_DWORD *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -1)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -2;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          int v14 = v8 + v12++;
          uint64_t v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 32 * v8;
          int v10 = *(_DWORD *)v9;
          if (v6 == *(_DWORD *)v9) {
            goto LABEL_18;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_18:
      *(_DWORD *)uint64_t v9 = v6;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 8) = 0;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 2);
      *(void *)(v9 + 24) = *((void *)a2 + 3);
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t *sub_1CC432BE8(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
void *sub_1CC432FE4(void *result, void *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  unsigned int v4 = result;
  do
  {
    uint64_t v5 = v4;
    unsigned int v4 = v2;
    uint64_t v6 = v5[2];
    unsigned int v7 = (v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v8 = *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v5 >> 1) & 3;
    if (v7 >= v8)
    {
      if (v8 < v7) {
        goto LABEL_20;
      }
      unint64_t v9 = v5[3];
      unint64_t v10 = v5[1];
      if (v9 >= v10) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v9 = v5[3];
      unint64_t v10 = v5[1];
    }
    void v5[2] = *v5;
    v4[1] = v10;
    unint64_t v11 = result;
    if (v5 == result) {
      goto LABEL_19;
    }
    uint64_t v12 = v3;
    while (1)
    {
      uint64_t v13 = *(void *)((char *)result + v12 - 16);
      unsigned int v14 = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v7 < v14)
      {
        unint64_t v15 = *(void *)((char *)result + v12 - 8);
        goto LABEL_12;
      }
      if (v14 < v7)
      {
        unint64_t v11 = (void *)((char *)result + v12);
        goto LABEL_19;
      }
      unint64_t v15 = *(void *)((char *)result + v12 - 8);
      if (v9 >= v15) {
        break;
      }
LABEL_12:
      v5 -= 2;
      int v16 = (void *)((char *)result + v12);
      *int v16 = v13;
      v16[1] = v15;
      v12 -= 16;
      if (!v12)
      {
        unint64_t v11 = result;
        goto LABEL_19;
      }
    }
    unint64_t v11 = v5;
LABEL_19:
    *unint64_t v11 = v6;
    v11[1] = v9;
LABEL_20:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t *sub_1CC4330F4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      for (uint64_t i = (unint64_t *)(result + 1); ; i += 2)
      {
        unsigned int v4 = result;
        uint64_t result = v2;
        uint64_t v5 = *v4;
        unint64_t v6 = v4[2];
        unsigned int v7 = (v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v8 = *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v4 >> 1) & 3;
        if (v7 < v8) {
          break;
        }
        if (v8 >= v7)
        {
          unint64_t v9 = v4[3];
          if (v9 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      unint64_t v9 = v4[3];
LABEL_6:
      for (uint64_t j = i; ; j -= 2)
      {
        unint64_t v11 = *j;
        j[1] = v5;
        j[2] = v11;
        uint64_t v5 = *(j - 3);
        unsigned int v12 = (v5 >> 1) & 3 | *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v7 >= v12 && (v12 < v7 || v9 >= *(j - 2))) {
          break;
        }
      }
      *(j - 1) = v6;
      unint64_t *j = v9;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t *sub_1CC4331C0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  unsigned int v5 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v6 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
  if (v5 >= v6 && (v6 < v5 || a2[1] >= (unint64_t)result[1]))
  {
    unsigned int v10 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v10 >= v5)
    {
      if (v5 < v10) {
        return result;
      }
      unint64_t v12 = a3[1];
      unint64_t v11 = a2[1];
      if (v12 >= v11) {
        return result;
      }
    }
    else
    {
      unint64_t v11 = a2[1];
      unint64_t v12 = a3[1];
    }
    *a2 = *a3;
    a2[1] = v12;
    *a3 = v4;
    a3[1] = v11;
    uint64_t v13 = *result;
    unsigned int v14 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v15 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
    if (v14 >= v15)
    {
      if (v15 < v14) {
        return result;
      }
      unint64_t v17 = a2[1];
      unint64_t v16 = result[1];
      if (v17 >= v16) {
        return result;
      }
    }
    else
    {
      unint64_t v16 = result[1];
      unint64_t v17 = a2[1];
    }
    *uint64_t result = *a2;
    result[1] = v17;
    *a2 = v13;
    a2[1] = v16;
    return result;
  }
  unsigned int v7 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v7 < v5)
  {
    unint64_t v8 = a3[1];
LABEL_6:
    uint64_t v9 = result[1];
    *uint64_t result = *a3;
    result[1] = v8;
    *a3 = v3;
    a3[1] = v9;
    return result;
  }
  if (v5 >= v7)
  {
    unint64_t v8 = a3[1];
    unint64_t v18 = a2[1];
    if (v8 < v18) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v18 = a2[1];
  }
  unint64_t v19 = result[1];
  *uint64_t result = v4;
  result[1] = v18;
  *a2 = v3;
  a2[1] = v19;
  unsigned int v20 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v20 < v6)
  {
    unint64_t v21 = a3[1];
LABEL_24:
    *a2 = *a3;
    a2[1] = v21;
    *a3 = v3;
    a3[1] = v19;
    return result;
  }
  if (v6 >= v20)
  {
    unint64_t v21 = a3[1];
    if (v21 < v19) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t *sub_1CC433350(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  unsigned int v5 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  unsigned int v6 = (v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 >= v6 && (v6 < v5 || v3 >= *(a2 - 1)))
  {
    for (uint64_t i = a1 + 2; i < a2; i += 2)
    {
      unsigned int v22 = (*i >> 1) & 3 | *(_DWORD *)((*i & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v5 < v22 || v22 >= v5 && v3 < i[1]) {
        break;
      }
    }
  }
  else
  {
    uint64_t i = a1;
    do
    {
      uint64_t v8 = i[2];
      i += 2;
      unsigned int v9 = (v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24);
    }
    while (v5 >= v9 && (v9 < v5 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; ; a2 -= 2)
    {
      unsigned int v10 = (v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v5 >= v10 && (v10 < v5 || v3 >= a2[1])) {
        break;
      }
      uint64_t v11 = *(a2 - 2);
      uint64_t v4 = v11;
    }
  }
  if (i < a2)
  {
    uint64_t v12 = *i;
    uint64_t v13 = *a2;
    do
    {
      uint64_t *i = v13;
      *a2 = v12;
      uint64_t v14 = i[2];
      i += 2;
      uint64_t v12 = v14;
      uint64_t v15 = *(i - 1);
      *(i - 1) = a2[1];
      a2[1] = v15;
      while (1)
      {
        unsigned int v16 = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v5 < v16 || v16 >= v5 && v3 < i[1]) {
          break;
        }
        uint64_t v17 = i[2];
        i += 2;
        uint64_t v12 = v17;
      }
      do
      {
        do
        {
          uint64_t v18 = *(a2 - 2);
          a2 -= 2;
          uint64_t v13 = v18;
          unsigned int v19 = (v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        while (v5 < v19);
      }
      while (v19 >= v5 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    uint64_t v20 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v20;
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

void *sub_1CC433504(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unsigned int v5 = (*a1 >> 1) & 3 | *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  while (1)
  {
    uint64_t v6 = a1[v2 + 2];
    unsigned int v7 = (v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v7 >= v5 && (v5 < v7 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v8 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      uint64_t v9 = *(a2 - 2);
      a2 -= 2;
      unsigned int v10 = (v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
    }
    while (v10 >= v5 && (v5 < v10 || a2[1] >= v4));
  }
  else
  {
LABEL_16:
    if (v8 < (unint64_t)a2)
    {
      do
      {
        uint64_t v11 = *(a2 - 2);
        a2 -= 2;
        unsigned int v12 = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v12 < v5) {
          break;
        }
        if (v5 < v12) {
          goto LABEL_16;
        }
      }
      while (v8 < (unint64_t)a2 && a2[1] >= v4);
    }
  }
  if (v8 >= (unint64_t)a2)
  {
    uint64_t v14 = (void *)v8;
  }
  else
  {
    uint64_t v13 = *a2;
    uint64_t v14 = (void *)v8;
    uint64_t v15 = a2;
    do
    {
      uint64_t v16 = v14[1];
      uint64_t v17 = v15[1];
      *uint64_t v14 = v13;
      v14[1] = v17;
      *uint64_t v15 = v6;
      v15[1] = v16;
      do
      {
        do
        {
          uint64_t v18 = v14[2];
          v14 += 2;
          uint64_t v6 = v18;
          unsigned int v19 = (v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        while (v19 < v5);
      }
      while (v5 >= v19 && v14[1] < v4);
      do
      {
        uint64_t v20 = *(v15 - 2);
        v15 -= 2;
        uint64_t v13 = v20;
        unsigned int v21 = (v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24);
      }
      while (v21 >= v5 && (v5 < v21 || v15[1] >= v4));
    }
    while (v14 < v15);
  }
  if (v14 - 2 != a1)
  {
    uint64_t v22 = *(v14 - 1);
    *a1 = *(v14 - 2);
    a1[1] = v22;
  }
  *(v14 - 2) = v3;
  *(v14 - 1) = v4;
  return v14 - 2;
}

BOOL sub_1CC43369C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      uint64_t v7 = *(a2 - 2);
      unsigned int v8 = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned int v9 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
      if (v8 < v9)
      {
        unint64_t v10 = a1[1];
        unint64_t v11 = *(a2 - 1);
LABEL_30:
        *a1 = v7;
        a1[1] = v11;
        *(a2 - 2) = v6;
        *(a2 - 1) = v10;
        return result;
      }
      if (v9 >= v8)
      {
        unint64_t v11 = *(a2 - 1);
        unint64_t v10 = a1[1];
        if (v11 < v10) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      sub_1CC4331C0(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC4338FC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC433A48(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unsigned int v12 = a1 + 4;
      sub_1CC4331C0(a1, a1 + 2, a1 + 4);
      uint64_t v13 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
LABEL_6:
  uint64_t v16 = *v13;
  unsigned int v17 = (*v13 >> 1) & 3 | *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v18 = *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v12 >> 1) & 3;
  if (v17 >= v18)
  {
    if (v18 < v17) {
      goto LABEL_21;
    }
    unint64_t v19 = v13[1];
    unint64_t v20 = v12[1];
    if (v19 >= v20) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v19 = v13[1];
    unint64_t v20 = v12[1];
  }
  *uint64_t v13 = *v12;
  v13[1] = v20;
  unsigned int v21 = a1;
  if (v12 == a1) {
    goto LABEL_20;
  }
  uint64_t v22 = v14;
  while (1)
  {
    char v23 = (char *)a1 + v22;
    uint64_t v24 = *(uint64_t *)((char *)a1 + v22 + 16);
    unsigned int v25 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v17 >= v25)
    {
      if (v25 < v17)
      {
        unsigned int v21 = (uint64_t *)((char *)a1 + v22 + 32);
        goto LABEL_20;
      }
      unint64_t v26 = *(uint64_t *)((char *)a1 + v22 + 24);
      if (v19 >= v26)
      {
        unsigned int v21 = v12;
LABEL_20:
        *unsigned int v21 = v16;
        v21[1] = v19;
        if (++v15 == 8) {
          return v13 + 2 == a2;
        }
LABEL_21:
        unsigned int v12 = v13;
        v14 += 16;
        v13 += 2;
        if (v13 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v26 = *((void *)v23 + 3);
    }
    v12 -= 2;
    *((void *)v23 + 4) = v24;
    *(uint64_t *)((char *)a1 + v22 + 40) = v26;
    v22 -= 16;
    if (v22 == -32)
    {
      unsigned int v21 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t *sub_1CC4338FC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC4331C0(a1, a2, a3);
  uint64_t v9 = *a3;
  unsigned int v10 = (*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v11 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
  if (v10 >= v11)
  {
    if (v11 < v10) {
      return result;
    }
    unint64_t v13 = a4[1];
    unint64_t v12 = a3[1];
    if (v13 >= v12) {
      return result;
    }
  }
  else
  {
    unint64_t v12 = a3[1];
    unint64_t v13 = a4[1];
  }
  *a3 = *a4;
  a3[1] = v13;
  *a4 = v9;
  a4[1] = v12;
  uint64_t v14 = *a2;
  unsigned int v15 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v16 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3;
  if (v15 >= v16)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = a3[1];
    unint64_t v17 = a2[1];
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = a2[1];
    unint64_t v18 = a3[1];
  }
  *a2 = *a3;
  a2[1] = v18;
  *a3 = v14;
  a3[1] = v17;
  uint64_t v19 = *a1;
  unsigned int v20 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v21 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  if (v20 < v21)
  {
    unint64_t v22 = a1[1];
    unint64_t v23 = a2[1];
LABEL_15:
    *a1 = *a2;
    a1[1] = v23;
    *a2 = v19;
    a2[1] = v22;
    return result;
  }
  if (v21 >= v20)
  {
    unint64_t v23 = a2[1];
    unint64_t v22 = a1[1];
    if (v23 < v22) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t *sub_1CC433A48(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL result = sub_1CC4338FC(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  unsigned int v12 = (*a5 >> 1) & 3 | *(_DWORD *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v13 = *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a4 >> 1) & 3;
  if (v12 >= v13)
  {
    if (v13 < v12) {
      return result;
    }
    unint64_t v15 = a5[1];
    unint64_t v14 = a4[1];
    if (v15 >= v14) {
      return result;
    }
  }
  else
  {
    unint64_t v14 = a4[1];
    unint64_t v15 = a5[1];
  }
  *a4 = *a5;
  a4[1] = v15;
  *a5 = v11;
  a5[1] = v14;
  uint64_t v16 = *a3;
  unsigned int v17 = (*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v18 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
  if (v17 >= v18)
  {
    if (v18 < v17) {
      return result;
    }
    unint64_t v20 = a4[1];
    unint64_t v19 = a3[1];
    if (v20 >= v19) {
      return result;
    }
  }
  else
  {
    unint64_t v19 = a3[1];
    unint64_t v20 = a4[1];
  }
  *a3 = *a4;
  a3[1] = v20;
  *a4 = v16;
  a4[1] = v19;
  uint64_t v21 = *a2;
  unsigned int v22 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v23 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3;
  if (v22 >= v23)
  {
    if (v23 < v22) {
      return result;
    }
    unint64_t v25 = a3[1];
    unint64_t v24 = a2[1];
    if (v25 >= v24) {
      return result;
    }
  }
  else
  {
    unint64_t v24 = a2[1];
    unint64_t v25 = a3[1];
  }
  *a2 = *a3;
  a2[1] = v25;
  *a3 = v21;
  a3[1] = v24;
  uint64_t v26 = *a1;
  unsigned int v27 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v28 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  if (v27 < v28)
  {
    unint64_t v29 = a1[1];
    unint64_t v30 = a2[1];
LABEL_9:
    *a1 = *a2;
    a1[1] = v30;
    *a2 = v26;
    a2[1] = v29;
    return result;
  }
  if (v28 >= v27)
  {
    unint64_t v30 = a2[1];
    unint64_t v29 = a1[1];
    if (v30 < v29) {
      goto LABEL_9;
    }
  }
  return result;
}

unint64_t sub_1CC433BFC(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = a2;
    unsigned int v5 = (uint64_t *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = (uint64_t)((uint64_t)a2 - result) >> 4;
    if ((uint64_t)((uint64_t)a2 - result) >= 17)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      unsigned int v10 = (uint64_t *)(result + 16 * v8);
      do
      {
        BOOL result = sub_1CC433ED8((uint64_t)v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      for (uint64_t i = v4; i != a3; i += 2)
      {
        uint64_t v12 = *i;
        unsigned int v13 = (*i >> 1) & 3 | *(_DWORD *)((*i & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v14 = *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v5 >> 1) & 3;
        if (v13 >= v14)
        {
          if (v14 < v13) {
            continue;
          }
          unint64_t v15 = i[1];
          unint64_t v16 = v5[1];
          if (v15 >= v16) {
            continue;
          }
        }
        else
        {
          unint64_t v15 = i[1];
          unint64_t v16 = v5[1];
        }
        uint64_t *i = *v5;
        i[1] = v16;
        *unsigned int v5 = v12;
        v5[1] = v15;
        BOOL result = sub_1CC433ED8((uint64_t)v5, v7, v5);
      }
    }
    if (v6 >= 17)
    {
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *v5;
        uint64_t v19 = v5[1];
        uint64_t v20 = v7 - 2;
        if (v7 < 2) {
          uint64_t v20 = v7 - 1;
        }
        uint64_t v21 = v20 >> 1;
        unsigned int v22 = v5;
        do
        {
          unsigned int v23 = v22;
          uint64_t v24 = v17 + 1;
          v22 += 2 * v17 + 2;
          uint64_t v25 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v26 = v25 + 2;
          if (v26 < v7)
          {
            BOOL result = (*v22 >> 1) & 3 | *(_DWORD *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 24);
            unsigned int v27 = *(_DWORD *)((v22[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v22[2] >> 1) & 3;
            if (result < v27
              || v27 >= result && (BOOL result = v22[3], v23[2 * v24 + 1] < result))
            {
              v22 += 2;
              uint64_t v17 = v26;
            }
          }
          uint64_t v28 = v22[1];
          *unsigned int v23 = *v22;
          v23[1] = v28;
        }
        while (v17 <= v21);
        if (v22 == v4 - 2)
        {
          *unsigned int v22 = v18;
          v22[1] = v19;
        }
        else
        {
          uint64_t v29 = *(v4 - 1);
          *unsigned int v22 = *(v4 - 2);
          v22[1] = v29;
          *(v4 - 2) = v18;
          *(v4 - 1) = v19;
          uint64_t v30 = (char *)v22 - (char *)v5 + 16;
          if (v30 >= 17)
          {
            unint64_t v31 = ((unint64_t)v30 >> 4) - 2;
            unint64_t v32 = v31 >> 1;
            __int16 v33 = &v5[2 * (v31 >> 1)];
            uint64_t v34 = *v22;
            unsigned int v35 = (*v33 >> 1) & 3 | *(_DWORD *)((*v33 & 0xFFFFFFFFFFFFFFF8) + 24);
            BOOL result = (*v22 >> 1) & 3;
            unsigned int v36 = *(_DWORD *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 24) | result;
            if (v35 < v36)
            {
              unint64_t v37 = v22[1];
              BOOL result = v33[1];
LABEL_30:
              *unsigned int v22 = *v33;
              v22[1] = result;
              if (v31 >= 2)
              {
                while (1)
                {
                  unint64_t v39 = v32 - 1;
                  unint64_t v32 = (v32 - 1) >> 1;
                  int v38 = &v5[2 * v32];
                  BOOL result = (*v38 >> 1) & 3 | *(_DWORD *)((*v38 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (result >= v36)
                  {
                    if (v36 < result) {
                      break;
                    }
                    BOOL result = v5[2 * v32 + 1];
                    if (result >= v37) {
                      break;
                    }
                  }
                  else
                  {
                    BOOL result = v38[1];
                  }
                  *__int16 v33 = *v38;
                  v33[1] = result;
                  __int16 v33 = &v5[2 * v32];
                  if (v39 <= 1) {
                    goto LABEL_37;
                  }
                }
              }
              int v38 = v33;
LABEL_37:
              *int v38 = v34;
              v38[1] = v37;
              goto LABEL_38;
            }
            if (v36 >= v35)
            {
              BOOL result = v5[2 * v32 + 1];
              unint64_t v37 = v22[1];
              if (result < v37) {
                goto LABEL_30;
              }
            }
          }
        }
LABEL_38:
        v4 -= 2;
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CC433ED8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) + 1;
      uint64_t v7 = (uint64_t *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2)
      {
        unsigned int v9 = (*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v10 = *(_DWORD *)((v7[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v7[2] >> 1) & 3;
        if (v9 < v10 || v10 >= v9 && *(void *)(result + 16 * v6 + 8) < (unint64_t)v7[3])
        {
          v7 += 2;
          uint64_t v6 = v8;
        }
      }
      uint64_t v11 = *a3;
      unsigned int v12 = (*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned int v13 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
      if (v12 >= v13)
      {
        if (v13 >= v12)
        {
          unint64_t v15 = v7[1];
          unint64_t v14 = a3[1];
          if (v15 < v14) {
            return result;
          }
        }
        else
        {
          unint64_t v14 = a3[1];
          unint64_t v15 = v7[1];
        }
        *a3 = *v7;
        a3[1] = v15;
        if (v4 >= v6)
        {
          while (1)
          {
            uint64_t v17 = 2 * v6;
            uint64_t v6 = (2 * v6) | 1;
            unint64_t v16 = (uint64_t *)(result + 16 * v6);
            uint64_t v18 = v17 + 2;
            if (v18 < a2)
            {
              unsigned int v19 = (*v16 >> 1) & 3 | *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 24);
              unsigned int v20 = *(_DWORD *)((v16[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v16[2] >> 1) & 3;
              if (v19 < v20 || v20 >= v19 && *(void *)(result + 16 * v6 + 8) < (unint64_t)v16[3])
              {
                v16 += 2;
                uint64_t v6 = v18;
              }
            }
            unsigned int v21 = (*v16 >> 1) & 3 | *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v21 < v13) {
              break;
            }
            unint64_t v22 = v16[1];
            if (v13 >= v21 && v22 < v14) {
              break;
            }
            *uint64_t v7 = *v16;
            v7[1] = v22;
            uint64_t v7 = v16;
            if (v4 < v6) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v16 = v7;
LABEL_14:
        *unint64_t v16 = v11;
        v16[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1CC434084(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  unsigned int v3 = *((_DWORD *)a2 + 2);
  BOOL v4 = v2 > v3;
  if (v2 != v3)
  {
LABEL_7:
    if (v4) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  if (a1[12] == a2[12])
  {
    unsigned int v5 = ((*(void *)(*(void *)a1 + 96) - *(void *)(*(void *)a1 + 88)) >> 3)
       + ((*(void *)(*(void *)a1 + 72) - *(void *)(*(void *)a1 + 64)) >> 3);
    unsigned int v6 = ((*(void *)(*(void *)a2 + 96) - *(void *)(*(void *)a2 + 88)) >> 3)
       + ((*(void *)(*(void *)a2 + 72) - *(void *)(*(void *)a2 + 64)) >> 3);
    BOOL v4 = v5 > v6;
    if (v5 == v6)
    {
      if (*(_DWORD *)(*(void *)a1 + 24) < *(_DWORD *)(*(void *)a2 + 24)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    }
    goto LABEL_7;
  }
  if (a1[12]) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CC434120(uint64_t a1)
{
  uint64_t result = sub_1CC434330(a1, *(uint64_t **)(a1 + 744), *(unsigned int *)(a1 + 752));
  uint64_t v3 = *(unsigned int *)(a1 + 752);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 744) + v4);
      if (v6)
      {
        unint64_t v7 = *(unsigned int *)(a1 + 672);
        if (v7 >= *(unsigned int *)(a1 + 676)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 664) + 8 * v7) = v6;
        ++*(_DWORD *)(a1 + 672);
      }
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_DWORD *)(a1 + 752) = 0;
  return result;
}

void sub_1CC4341D4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 1056);
  uint64_t v3 = *(void *)(a1 + 1048);
  uint64_t v4 = *(unsigned int *)(a1 + 1064);
  uint64_t v5 = (unsigned int *)(v3 + 4 * v4);
  if (v2)
  {
    if (v4)
    {
      uint64_t v6 = 4 * v4;
      unint64_t v7 = *(unsigned int **)(a1 + 1048);
      while (*v7 >= 0xFFFFFFFE)
      {
        ++v7;
        v6 -= 4;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      unint64_t v7 = *(unsigned int **)(a1 + 1048);
    }
  }
  else
  {
LABEL_6:
    unint64_t v7 = (unsigned int *)(v3 + 4 * v4);
  }
  uint64_t v8 = (unsigned int *)(v3 + 4 * v4);
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = *(void *)(a1 + 288);
      uint64_t v10 = *v7 & 0x7FFFFFFF;
      if (v10 < *(_DWORD *)(v9 + 416))
      {
        uint64_t v11 = *(const llvm::LiveRange **)(*(void *)(v9 + 408) + 8 * v10);
        if (v11)
        {
          sub_1CC43B764(a1, v11, a1 + 920);
          if (*(_DWORD *)(a1 + 928)) {
            sub_1CC43B808(a1);
          }
        }
      }
      unsigned int v12 = v7 + 1;
      while (v12 != v5)
      {
        unsigned int v13 = *v12++;
        if (v13 <= 0xFFFFFFFD)
        {
          unint64_t v7 = v12 - 1;
          goto LABEL_18;
        }
      }
      unint64_t v7 = v5;
LABEL_18:
      ;
    }
    while (v7 != v8);
    int v2 = *(_DWORD *)(a1 + 1056);
  }
  if (v2 || *(_DWORD *)(a1 + 1060))
  {
    unint64_t v14 = (void **)(a1 + 1048);
    uint64_t v15 = *(unsigned int *)(a1 + 1064);
    if (v15 <= 4 * v2 || v15 < 0x41)
    {
      if (v15) {
        memset(*v14, 255, 4 * v15);
      }
      *(void *)(a1 + 1056) = 0;
    }
    else
    {
      sub_1CBB23624(v14);
    }
  }
}

uint64_t sub_1CC434330(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v1351[16] = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  uint64_t v3 = a2;
  int v5 = 0;
  uint64_t v6 = &a2[a3];
  v1306 = (llvm::SmallPtrSetImplBase *)(a1 + 824);
  unint64_t v7 = (unsigned int *)(a1 + 844);
  uint64_t v8 = (unsigned int *)(a1 + 840);
  v1309 = (void *)(a1 + 648);
  uint64_t v1310 = a1 + 1072;
  uint64_t v1307 = a1 + 624;
  uint64_t v1305 = a1 + 576;
  v1308 = (uint64_t *)(a1 + 312);
  v1311 = (unsigned int *)(a1 + 844);
  v1312 = v6;
  v1313 = (unsigned int *)(a1 + 840);
  do
  {
    uint64_t v9 = *v3;
    if (!*v3) {
      goto LABEL_1679;
    }
    uint64_t v10 = *(void *)(a1 + 832);
    uint64_t v11 = *(void *)(a1 + 824);
    if (v10 == v11)
    {
      uint64_t v12 = *v7;
      unsigned int v13 = (void *)(v10 + 8 * v12);
      if (v12)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 8 * v12;
        while (*(void *)(v10 + v14) != v9)
        {
          v14 += 8;
          if (v15 == v14) {
            goto LABEL_22;
          }
        }
        unsigned int v13 = (void *)(v10 + v14);
      }
LABEL_22:
      uint64_t v11 = *(void *)(a1 + 832);
    }
    else
    {
      uint64_t v16 = *v8;
      int v17 = v16 - 1;
      unsigned int v18 = (v16 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      unsigned int v13 = (void *)(v10 + 8 * v18);
      uint64_t v19 = *v13;
      if (*v13 == -1)
      {
        unsigned int v20 = 0;
LABEL_32:
        if (v20) {
          unsigned int v13 = v20;
        }
        if (*v13 != v9) {
          unsigned int v13 = (void *)(v10 + 8 * v16);
        }
      }
      else
      {
        unsigned int v20 = 0;
        int v21 = 1;
        while (v19 != v9)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            unsigned int v20 = v13;
          }
          unsigned int v23 = v18 + v21++;
          unsigned int v18 = v23 & v17;
          unsigned int v13 = (void *)(v10 + 8 * (v23 & v17));
          uint64_t v19 = *v13;
          if (*v13 == -1) {
            goto LABEL_32;
          }
        }
      }
    }
    if (v10 == v11) {
      uint64_t v24 = v7;
    }
    else {
      uint64_t v24 = v8;
    }
    if (v13 != (void *)(v10 + 8 * *v24)) {
      goto LABEL_1678;
    }
    uint64_t v1316 = *(void *)(a1 + 272);
    uint64_t v1318 = 0;
    memset(v1317, 0, 19);
    int v25 = llvm::CoalescerPair::setRegisters((llvm::CoalescerPair *)&v1316, (const llvm::MachineInstr *)v9);
    int v26 = 0;
    if (!v25) {
      goto LABEL_1677;
    }
    if (!v1318) {
      goto LABEL_111;
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 264) + 24);
    unint64_t v28 = *(void *)(v27 + 16 * (HIDWORD(v1317[0]) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = *(void *)(v27 + 16 * (v1317[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = HIDWORD(v1317[1]);
    if (BYTE2(v1317[2]))
    {
      uint64_t v31 = HIDWORD(v1317[1]);
      uint64_t v30 = LODWORD(v1317[1]);
      unint64_t v29 = *(void *)(v27 + 16 * (HIDWORD(v1317[0]) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v28 = *(void *)(v27 + 16 * (v1317[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      uint64_t v31 = LODWORD(v1317[1]);
    }
    if (!(*(unsigned int (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(**(void **)(a1 + 272) + 520))(*(void *)(a1 + 272), v9, v28, v30, v29, v31))goto LABEL_1676; {
    if (!v1318)
    }
      goto LABEL_111;
    uint64_t v32 = *(unsigned int *)(v9 + 40);
    if (!v32)
    {
LABEL_47:
      unint64_t v36 = *(unsigned int *)(a1 + 928);
      if (v36 >= *(unsigned int *)(a1 + 932)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 920) + 8 * v36) = v9;
      ++*(_DWORD *)(a1 + 928);
      sub_1CC43B808(a1);
      int v26 = 1;
      goto LABEL_1677;
    }
    __int16 v33 = *(_DWORD **)(v9 + 32);
    uint64_t v34 = 32 * v32;
    while ((*v33 & 0x10000FF) != 0x1000000 || (*v33 & 0x5000000) == 83886080)
    {
      v33 += 8;
      v34 -= 32;
      if (!v34) {
        goto LABEL_47;
      }
    }
    LODWORD(v1340) = 0;
    LODWORD(v1333) = 0;
    LODWORD(v1349) = 0;
    LODWORD(v1330) = 0;
    if (!sub_1CC42FB94(*(void *)(a1 + 272), v9, &v1340, &v1333, (int *)&v1349, (int *)&v1330)) {
      goto LABEL_111;
    }
    __int16 v38 = *(_WORD *)(v9 + 44);
    unint64_t v39 = v9;
    if ((v38 & 4) != 0)
    {
      do
        unint64_t v39 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v39 + 44) & 4) != 0);
    }
    uint64_t v40 = v9;
    if ((v38 & 8) != 0)
    {
      do
        uint64_t v40 = *(void *)(v40 + 8);
      while ((*(_WORD *)(v40 + 44) & 8) != 0);
    }
    unint64_t v41 = *(void *)(v40 + 8);
    if (v39 != v41)
    {
      while (1)
      {
        unsigned int v42 = **(unsigned __int16 **)(v39 + 16);
        BOOL v43 = v42 > 0x17;
        int v44 = (1 << v42) & 0x83E000;
        if (v43 || v44 == 0) {
          break;
        }
        unint64_t v39 = *(void *)(v39 + 8);
        if (v39 == v41)
        {
          unint64_t v39 = v41;
          break;
        }
      }
    }
    uint64_t v46 = *(void *)(a1 + 288);
    uint64_t v47 = *(void *)(v46 + 288);
    uint64_t v48 = *(void *)(v47 + 368);
    uint64_t v49 = *(unsigned int *)(v47 + 384);
    if (v49)
    {
      LODWORD(v50) = ((v39 >> 4) ^ (v39 >> 9)) & (v49 - 1);
      unsigned int v51 = (uint64_t *)(v48 + 16 * v50);
      uint64_t v52 = *v51;
      if (v39 == *v51) {
        goto LABEL_66;
      }
      int v53 = 1;
      while (v52 != -4096)
      {
        int v54 = v50 + v53++;
        uint64_t v50 = v54 & (v49 - 1);
        uint64_t v52 = *(void *)(v48 + 16 * v50);
        if (v39 == v52)
        {
          unsigned int v51 = (uint64_t *)(v48 + 16 * v50);
          goto LABEL_66;
        }
      }
    }
    unsigned int v51 = (uint64_t *)(v48 + 16 * v49);
LABEL_66:
    int v1314 = v5;
    uint64_t v55 = v51[1];
    unint64_t v56 = v1340 & 0x7FFFFFFF;
    uint64_t v57 = (void *)(v46 + 408);
    unint64_t v58 = *(unsigned int *)(v46 + 416);
    BOOL v73 = v56 >= v58;
    unint64_t v59 = v56 - v58;
    if (v73)
    {
      sub_1CB9153B8((uint64_t)v57, v59 + 1, *(void *)(v46 + 424));
LABEL_839:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v60 = *(void *)(*v57 + 8 * v56);
    if (!v60) {
      goto LABEL_839;
    }
    if (v1349)
    {
      uint64_t v61 = *(void *)(v60 + 104);
      if (v61)
      {
        unint64_t v62 = v55 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v63 = (v55 >> 1) & 3;
        int v5 = v1314;
        uint64_t v6 = v1312;
        uint64_t v8 = v1313;
        while (2)
        {
          if ((*(void *)(v61 + 112) & *(void *)(*(void *)(*(void *)(a1 + 272) + 232)
                                                   + 8 * v1349)) == 0)
            goto LABEL_85;
          unsigned int v64 = *(_DWORD *)(v61 + 8);
          uint64_t v65 = *(void **)v61;
          if (v64)
          {
            uint64_t v66 = v65[3 * v64 - 2];
            unsigned int v67 = *(_DWORD *)(v62 + 24) | v63;
            unsigned int v68 = (v66 >> 1) & 3 | *(_DWORD *)((v66 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v69 = *(void **)v61;
            unint64_t v70 = *(unsigned int *)(v61 + 8);
            if (v67 < v68)
            {
              do
              {
                unint64_t v71 = v70 >> 1;
                uint64_t v72 = v69[3 * (v70 >> 1) + 1];
                LODWORD(v72) = (v72 >> 1) & 3 | *(_DWORD *)((v72 & 0xFFFFFFFFFFFFFFF8) + 24);
                v70 -= (v70 >> 1) + 1;
                BOOL v73 = v67 >= v72;
                if (v67 >= v72) {
                  unint64_t v74 = v71 + 1;
                }
                else {
                  unint64_t v74 = 0;
                }
                v69 += 3 * v74;
                if (!v73) {
                  unint64_t v70 = v71;
                }
              }
              while (v70);
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v64 = 0;
          }
          uint64_t v69 = &v65[3 * v64];
LABEL_83:
          if (v69 != &v65[3 * v64]
            && ((*v69 >> 1) & 3 | *(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v62 + 24) | v63))
          {
            goto LABEL_111;
          }
LABEL_85:
          uint64_t v61 = *(void *)(v61 + 104);
          if (!v61) {
            goto LABEL_100;
          }
          continue;
        }
      }
    }
    unsigned int v75 = *(_DWORD *)(v60 + 8);
    uint64_t v76 = *(void **)v60;
    uint64_t v6 = v1312;
    uint64_t v8 = v1313;
    if (!v75)
    {
      unsigned int v75 = 0;
LABEL_97:
      int v5 = v1314;
      __int16 v80 = &v76[3 * v75];
      goto LABEL_98;
    }
    uint64_t v77 = v76[3 * v75 - 2];
    unsigned int v78 = *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24) | (v55 >> 1) & 3;
    unsigned int v79 = (v77 >> 1) & 3 | *(_DWORD *)((v77 & 0xFFFFFFFFFFFFFFF8) + 24);
    __int16 v80 = *(void **)v60;
    unint64_t v81 = *(unsigned int *)(v60 + 8);
    if (v78 >= v79) {
      goto LABEL_97;
    }
    do
    {
      unint64_t v82 = v81 >> 1;
      uint64_t v83 = v80[3 * (v81 >> 1) + 1];
      LODWORD(v83) = (v83 >> 1) & 3 | *(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 24);
      v81 -= (v81 >> 1) + 1;
      BOOL v84 = v78 >= v83;
      if (v78 >= v83) {
        unint64_t v85 = v82 + 1;
      }
      else {
        unint64_t v85 = 0;
      }
      v80 += 3 * v85;
      if (!v84) {
        unint64_t v81 = v82;
      }
    }
    while (v81);
    int v5 = v1314;
LABEL_98:
    if (v80 == &v76[3 * v75]
      || ((*v80 >> 1) & 3 | *(_DWORD *)((*v80 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24) | (v55 >> 1) & 3))
    {
LABEL_100:
      uint64_t v86 = *(void *)(a1 + 288);
      uint64_t v87 = v1333;
      unint64_t v88 = v1333 & 0x7FFFFFFF;
      uint64_t v89 = (void *)(v86 + 408);
      unint64_t v90 = *(unsigned int *)(v86 + 416);
      BOOL v73 = v88 >= v90;
      unint64_t v91 = v88 - v90;
      if (v73)
      {
        sub_1CB9153B8((uint64_t)v89, v91 + 1, *(void *)(v86 + 424));
      }
      else
      {
        uint64_t v92 = *(void *)(*v89 + 8 * v88);
        if (v92)
        {
          unint64_t v93 = v55 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v94 = *(_DWORD *)(v92 + 8);
          uint64_t v95 = *(void **)v92;
          if (v94)
          {
            uint64_t v96 = v95[3 * v94 - 2];
            unsigned int v97 = *(_DWORD *)(v93 + 24) | 2;
            unsigned int v98 = (v96 >> 1) & 3 | *(_DWORD *)((v96 & 0xFFFFFFFFFFFFFFF8) + 24);
            unint64_t v99 = *(unsigned int *)(v92 + 8);
            uint64_t v100 = *(void **)v92;
            unint64_t v101 = v99;
            uint64_t v8 = v1313;
            if (v97 < v98)
            {
              do
              {
                unint64_t v102 = v101 >> 1;
                uint64_t v103 = v100[3 * (v101 >> 1) + 1];
                LODWORD(v103) = (v103 >> 1) & 3 | *(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24);
                v101 -= (v101 >> 1) + 1;
                BOOL v104 = v97 >= v103;
                if (v97 >= v103) {
                  unint64_t v105 = v102 + 1;
                }
                else {
                  unint64_t v105 = 0;
                }
                v100 += 3 * v105;
                if (!v104) {
                  unint64_t v101 = v102;
                }
              }
              while (v101);
              unint64_t v99 = *(unsigned int *)(v92 + 8);
LABEL_452:
              uint64_t v362 = &v95[3 * v99];
              if (v100 == v362
                || ((*v100 >> 1) & 3 | *(_DWORD *)((*v100 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v93 + 24) | 2u))
              {
                uint64_t v100 = &v95[3 * v99];
                if (!v94) {
                  goto LABEL_1660;
                }
              }
              else if (!v94)
              {
                goto LABEL_1660;
              }
              if (v100 == v362) {
                uint64_t v363 = 0;
              }
              else {
                uint64_t v363 = v100;
              }
              uint64_t v364 = v363[1];
              unint64_t v365 = v364 & 0xFFFFFFFFFFFFFFF8;
              int v366 = *(_DWORD *)((v364 & 0xFFFFFFFFFFFFFFF8) + 24);
              unsigned int v367 = (v364 >> 1) & 3;
              unsigned int v368 = v366 | v367;
              if (v368 < ((*(v362 - 2) >> 1) & 3 | *(_DWORD *)((*(v362 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
              {
                uint64_t v369 = *(void **)v92;
                unint64_t v370 = v99;
                do
                {
                  uint64_t v371 = v369;
                  unint64_t v372 = v370 >> 1;
                  uint64_t v373 = v369[3 * (v370 >> 1) + 1];
                  LODWORD(v373) = (v373 >> 1) & 3 | *(_DWORD *)((v373 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v370 -= (v370 >> 1) + 1;
                  BOOL v374 = v368 >= v373;
                  if (v368 >= v373) {
                    unint64_t v375 = v372 + 1;
                  }
                  else {
                    unint64_t v375 = 0;
                  }
                  v369 += 3 * v375;
                  if (!v374) {
                    unint64_t v370 = v372;
                  }
                }
                while (v370);
                if (v369 != v362
                  && ((*v369 >> 1) & 3 | *(_DWORD *)((*v369 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v365 + 24) | v367))
                {
                  uint64_t v376 = v371[3 * v375 + 2];
                  if (v376)
                  {
                    if ((*(unsigned char *)(v376 + 8) & 6) == 0)
                    {
                      *(void *)(v9 + 16) = *(void *)(*(void *)(a1 + 280) + 8) + 480;
                      int v395 = *(_DWORD *)(v9 + 40);
                      unint64_t v7 = v1311;
                      uint64_t v6 = v1312;
                      if (v395)
                      {
                        unsigned int v396 = v395 - 1;
                        uint64_t v397 = 32 * (v395 - 1);
                        do
                        {
                          if ((*(_DWORD *)(*(void *)(v9 + 32) + v397) & 0x10000FF) == 0) {
                            llvm::MachineInstr::removeOperand((char *)v9, v396);
                          }
                          --v396;
                          v397 -= 32;
                        }
                        while (v396 != -1);
                      }
LABEL_1674:
                      int v5 = v1314;
                      if (**(_WORD **)(v9 + 16) != 10) {
                        sub_1CC43B958(a1, (llvm::MachineInstr *)v9);
                      }
LABEL_1676:
                      int v26 = 0;
                      goto LABEL_1677;
                    }
                  }
                }
              }
              unsigned int v377 = (v55 >> 1) & 3;
              unsigned int v378 = *(_DWORD *)(v93 + 24) | v377;
              if (v378 < ((*(v362 - 2) >> 1) & 3 | *(_DWORD *)((*(v362 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
              {
                unsigned int v379 = *(void **)v92;
                unint64_t v380 = v99;
                do
                {
                  uint64_t v381 = v379;
                  unint64_t v382 = v380 >> 1;
                  uint64_t v383 = v379[3 * (v380 >> 1) + 1];
                  LODWORD(v383) = (v383 >> 1) & 3 | *(_DWORD *)((v383 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v380 -= (v380 >> 1) + 1;
                  BOOL v384 = v378 >= v383;
                  if (v378 >= v383) {
                    unint64_t v385 = v382 + 1;
                  }
                  else {
                    unint64_t v385 = 0;
                  }
                  v379 += 3 * v385;
                  if (!v384) {
                    unint64_t v380 = v382;
                  }
                }
                while (v380);
                if (v379 != v362)
                {
                  int v386 = *(_DWORD *)(v93 + 24);
                  if (((*v379 >> 1) & 3 | *(_DWORD *)((*v379 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (v386 | v377))
                  {
                    uint64_t v387 = v381[3 * v385 + 2];
                    if (v387)
                    {
                      unsigned int v388 = v386 | 2;
                      if ((v386 | 2u) >= ((*(v362 - 2) >> 1) & 3 | *(_DWORD *)((*(v362 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 24)))
                        goto LABEL_490;
                      do
                      {
                        unsigned int v389 = v95;
                        unint64_t v390 = v99 >> 1;
                        uint64_t v391 = v95[3 * (v99 >> 1) + 1];
                        LODWORD(v391) = (v391 >> 1) & 3 | *(_DWORD *)((v391 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v99 -= (v99 >> 1) + 1;
                        BOOL v392 = v388 >= v391;
                        if (v388 >= v391) {
                          unint64_t v393 = v390 + 1;
                        }
                        else {
                          unint64_t v393 = 0;
                        }
                        uint64_t v95 = &v389[3 * v393];
                        if (!v392) {
                          unint64_t v99 = v390;
                        }
                      }
                      while (v99);
                      if (v95 == v362
                        || ((*v95 >> 1) & 3 | *(_DWORD *)((*v95 & 0xFFFFFFFFFFFFFFF8) + 24)) > v388)
                      {
LABEL_490:
                        uint64_t v394 = 0;
                      }
                      else
                      {
                        uint64_t v394 = v389[3 * v393 + 2];
                      }
                      llvm::LiveRange::MergeValueNumberInto(v92, v394, v387);
                      uint64_t v411 = *(void *)(v92 + 104);
                      if (v411)
                      {
                        v1298 = (uint64_t *)(v92 + 104);
                        uint64_t v412 = *(void *)(*(void *)(*(void *)(a1 + 272) + 232) + 8 * v1330);
                        while ((*(void *)(v411 + 112) & v412) == 0)
                        {
LABEL_531:
                          uint64_t v411 = *(void *)(v411 + 104);
                          if (!v411)
                          {
                            uint64_t v425 = (void *)(v92 + 104);
                            uint64_t v426 = *v1298;
                            if (!*v1298) {
                              goto LABEL_1661;
                            }
                            while (1)
                            {
                              uint64_t v1094 = v426;
                              if (!*(_DWORD *)(v426 + 8)) {
                                break;
                              }
LABEL_1503:
                              uint64_t v425 = (void *)(v426 + 104);
                              uint64_t v426 = *(void *)(v426 + 104);
                              if (!v426) {
                                goto LABEL_1661;
                              }
                            }
                            while (1)
                            {
                              uint64_t v1092 = *(void *)(v1094 + 96);
                              uint64_t v426 = *(void *)(v1094 + 104);
                              *(void *)(v1094 + 96) = 0;
                              if (v1092)
                              {
                                uint64_t v1304 = v1092;
                                sub_1CB833A08(v1092, *(void **)(v1092 + 8));
                                MEMORY[0x1D25D9CE0](v1304, 0x1020C4062D53EE8);
                              }
                              v1093 = *(void **)(v1094 + 64);
                              if (v1093 != (void *)(v1094 + 80)) {
                                free(v1093);
                              }
                              if (*(void *)v1094 == v1094 + 16)
                              {
                                if (!v426)
                                {
LABEL_1505:
                                  *uint64_t v425 = 0;
                                  goto LABEL_1661;
                                }
                              }
                              else
                              {
                                free(*(void **)v1094);
                                if (!v426) {
                                  goto LABEL_1505;
                                }
                              }
                              uint64_t v1094 = v426;
                              if (*(_DWORD *)(v426 + 8))
                              {
                                *uint64_t v425 = v426;
                                goto LABEL_1503;
                              }
                            }
                          }
                        }
                        unsigned int v413 = *(_DWORD *)(v411 + 8);
                        uint64_t v414 = *(void *)v411;
                        if (v413)
                        {
                          uint64_t v415 = *(void *)(v414 + 24 * v413 - 16);
                          unsigned int v416 = *(_DWORD *)(v93 + 24) | 2;
                          unsigned int v417 = (v415 >> 1) & 3 | *(_DWORD *)((v415 & 0xFFFFFFFFFFFFFFF8) + 24);
                          uint64_t v418 = *(void **)v411;
                          unint64_t v419 = *(unsigned int *)(v411 + 8);
                          if (v416 < v417)
                          {
                            do
                            {
                              unint64_t v420 = v419 >> 1;
                              uint64_t v421 = v418[3 * (v419 >> 1) + 1];
                              LODWORD(v421) = (v421 >> 1) & 3 | *(_DWORD *)((v421 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                              v419 -= (v419 >> 1) + 1;
                              BOOL v422 = v416 >= v421;
                              if (v416 >= v421) {
                                unint64_t v423 = v420 + 1;
                              }
                              else {
                                unint64_t v423 = 0;
                              }
                              v418 += 3 * v423;
                              if (!v422) {
                                unint64_t v419 = v420;
                              }
                            }
                            while (v419);
                            goto LABEL_526;
                          }
                        }
                        else
                        {
                          unsigned int v413 = 0;
                        }
                        uint64_t v418 = (void *)(v414 + 24 * v413);
LABEL_526:
                        if (v418 == (void *)(v414 + 24 * v413)
                          || ((*v418 >> 1) & 3 | *(_DWORD *)((*v418 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v93 + 24) | 2u))
                        {
                          uint64_t v424 = 0;
                        }
                        else
                        {
                          uint64_t v424 = v418[2];
                        }
                        llvm::LiveRange::removeValNo((uint64_t *)v411, v424);
                        goto LABEL_531;
                      }
LABEL_1661:
                      uint64_t v1195 = *(void *)(a1 + 264);
                      if ((v87 & 0x80000000) != 0) {
                        v1196 = (unsigned int **)(*(void *)(v1195 + 24) + 16 * v88 + 8);
                      }
                      else {
                        v1196 = (unsigned int **)(*(void *)(v1195 + 272) + 8 * v87);
                      }
                      unint64_t v7 = v1311;
                      uint64_t v6 = v1312;
                      uint64_t v8 = v1313;
                      v1197 = *v1196;
                      if (!v1197)
                      {
LABEL_1667:
                        uint64_t v1199 = *(unsigned int *)(v9 + 40);
                        if (v1199)
                        {
                          v1200 = *(_DWORD **)(v9 + 32);
                          int v1201 = (int)v1333;
                          uint64_t v1202 = 32 * v1199;
                          do
                          {
                            if ((*v1200 & 0x10000FF) == 0x1000000 && v1200[1] == v1201) {
                              *v1200 |= 0x10000000u;
                            }
                            v1200 += 8;
                            v1202 -= 32;
                          }
                          while (v1202);
                        }
                        llvm::LiveIntervals::shrinkToUses(*(void **)(a1 + 288), v92, 0);
                        goto LABEL_1674;
                      }
                      while (1)
                      {
                        unsigned int v1198 = *v1197;
                        if ((*v1197 & 0x80000000) == 0) {
                          break;
                        }
                        v1197 = (unsigned int *)*((void *)v1197 + 3);
                        if (!v1197) {
                          goto LABEL_1667;
                        }
                      }
LABEL_1681:
                      if ((v1198 & 0x1000000) != 0) {
                        goto LABEL_1733;
                      }
                      unint64_t v1203 = *((void *)v1197 + 1);
                      __int16 v1204 = *(_WORD *)(v1203 + 44);
                      unint64_t v1205 = v1203;
                      if ((v1204 & 4) != 0)
                      {
                        do
                          unint64_t v1205 = *(void *)v1205 & 0xFFFFFFFFFFFFFFF8;
                        while ((*(_WORD *)(v1205 + 44) & 4) != 0);
                      }
                      if ((v1204 & 8) != 0)
                      {
                        do
                          unint64_t v1203 = *(void *)(v1203 + 8);
                        while ((*(_WORD *)(v1203 + 44) & 8) != 0);
                      }
                      unint64_t v1206 = *(void *)(v1203 + 8);
                      if (v1205 != v1206)
                      {
                        while (1)
                        {
                          unsigned int v1207 = **(unsigned __int16 **)(v1205 + 16);
                          BOOL v43 = v1207 > 0x17;
                          int v1208 = (1 << v1207) & 0x83E000;
                          if (v43 || v1208 == 0) {
                            break;
                          }
                          unint64_t v1205 = *(void *)(v1205 + 8);
                          if (v1205 == v1206)
                          {
                            unint64_t v1205 = v1206;
                            break;
                          }
                        }
                      }
                      uint64_t v1210 = *(void *)(*(void *)(a1 + 288) + 288);
                      uint64_t v1211 = *(void *)(v1210 + 368);
                      uint64_t v1212 = *(unsigned int *)(v1210 + 384);
                      if (v1212)
                      {
                        LODWORD(v1213) = ((v1205 >> 4) ^ (v1205 >> 9)) & (v1212 - 1);
                        v1214 = (uint64_t *)(v1211 + 16 * v1213);
                        uint64_t v1215 = *v1214;
                        if (v1205 == *v1214) {
                          goto LABEL_1698;
                        }
                        int v1216 = 1;
                        while (v1215 != -4096)
                        {
                          int v1217 = v1213 + v1216++;
                          uint64_t v1213 = v1217 & (v1212 - 1);
                          uint64_t v1215 = *(void *)(v1211 + 16 * v1213);
                          if (v1205 == v1215)
                          {
                            v1214 = (uint64_t *)(v1211 + 16 * v1213);
                            goto LABEL_1698;
                          }
                        }
                      }
                      v1214 = (uint64_t *)(v1211 + 16 * v1212);
LABEL_1698:
                      uint64_t v1218 = v1214[1];
                      uint64_t v1219 = *(void *)(*(void *)(*(void *)(a1 + 272) + 232) + 8 * ((v1198 >> 8) & 0xFFF));
                      uint64_t v1220 = *(void *)(v92 + 104);
                      if (v1219 != -1 && v1220 != 0)
                      {
                        unint64_t v1233 = v1218 & 0xFFFFFFFFFFFFFFF8;
                        unsigned int v1234 = (v1218 >> 1) & 3;
                        while ((*(void *)(v1220 + 112) & v1219) == 0)
                        {
LABEL_1726:
                          uint64_t v1220 = *(void *)(v1220 + 104);
                          if (!v1220) {
                            goto LABEL_1732;
                          }
                        }
                        unsigned int v1235 = *(_DWORD *)(v1220 + 8);
                        v1236 = *(void **)v1220;
                        if (v1235)
                        {
                          uint64_t v1237 = v1236[3 * v1235 - 2];
                          unsigned int v1238 = *(_DWORD *)(v1233 + 24) | v1234;
                          unsigned int v1239 = (v1237 >> 1) & 3 | *(_DWORD *)((v1237 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v1240 = *(void **)v1220;
                          unint64_t v1241 = *(unsigned int *)(v1220 + 8);
                          if (v1238 < v1239)
                          {
                            do
                            {
                              unint64_t v1242 = v1241 >> 1;
                              uint64_t v1243 = v1240[3 * (v1241 >> 1) + 1];
                              LODWORD(v1243) = (v1243 >> 1) & 3 | *(_DWORD *)((v1243 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24);
                              v1241 -= (v1241 >> 1) + 1;
                              BOOL v1244 = v1238 >= v1243;
                              if (v1238 >= v1243) {
                                unint64_t v1245 = v1242 + 1;
                              }
                              else {
                                unint64_t v1245 = 0;
                              }
                              v1240 += 3 * v1245;
                              if (!v1244) {
                                unint64_t v1241 = v1242;
                              }
                            }
                            while (v1241);
LABEL_1724:
                            if (v1240 != &v1236[3 * v1235]
                              && ((*v1240 >> 1) & 3 | *(_DWORD *)((*v1240 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v1233 + 24) | v1234))
                            {
                              goto LABEL_1733;
                            }
                            goto LABEL_1726;
                          }
                        }
                        else
                        {
                          unsigned int v1235 = 0;
                        }
                        v1240 = &v1236[3 * v1235];
                        goto LABEL_1724;
                      }
                      unsigned int v1222 = *(_DWORD *)(v92 + 8);
                      v1223 = *(void **)v92;
                      if (v1222)
                      {
                        uint64_t v1224 = v1223[3 * v1222 - 2];
                        unsigned int v1225 = *(_DWORD *)((v1218 & 0xFFFFFFFFFFFFFFF8) + 24) | (v1218 >> 1) & 3;
                        unsigned int v1226 = (v1224 >> 1) & 3 | *(_DWORD *)((v1224 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v1227 = *(void **)v92;
                        unint64_t v1228 = *(unsigned int *)(v92 + 8);
                        if (v1225 < v1226)
                        {
                          do
                          {
                            unint64_t v1229 = v1228 >> 1;
                            uint64_t v1230 = v1227[3 * (v1228 >> 1) + 1];
                            LODWORD(v1230) = (v1230 >> 1) & 3 | *(_DWORD *)((v1230 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                            v1228 -= (v1228 >> 1) + 1;
                            BOOL v1231 = v1225 >= v1230;
                            if (v1225 >= v1230) {
                              unint64_t v1232 = v1229 + 1;
                            }
                            else {
                              unint64_t v1232 = 0;
                            }
                            v1227 += 3 * v1232;
                            if (!v1231) {
                              unint64_t v1228 = v1229;
                            }
                          }
                          while (v1228);
                          goto LABEL_1730;
                        }
                      }
                      else
                      {
                        unsigned int v1222 = 0;
                      }
                      v1227 = &v1223[3 * v1222];
LABEL_1730:
                      if (v1227 == &v1223[3 * v1222]
                        || ((*v1227 >> 1) & 3 | *(_DWORD *)((*v1227 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v1218 & 0xFFFFFFFFFFFFFFF8) + 24) | (v1218 >> 1) & 3))
                      {
LABEL_1732:
                        unsigned int *v1197 = v1198 | 0x10000000;
                      }
LABEL_1733:
                      while (1)
                      {
                        v1197 = (unsigned int *)*((void *)v1197 + 3);
                        if (!v1197) {
                          goto LABEL_1667;
                        }
                        unsigned int v1198 = *v1197;
                        if ((*v1197 & 0x80000000) == 0) {
                          goto LABEL_1681;
                        }
                      }
                    }
                  }
                }
              }
LABEL_1660:
              llvm::LiveIntervals::removeVRegDefAt(*(void *)(a1 + 288), v92, v93 | 4);
              goto LABEL_1661;
            }
          }
          else
          {
            unint64_t v99 = 0;
            uint64_t v8 = v1313;
          }
          uint64_t v100 = &v95[3 * v99];
          goto LABEL_452;
        }
      }
      llvm::LiveIntervals::createInterval();
    }
LABEL_111:
    int v1315 = v5;
    LODWORD(v106) = HIDWORD(v1317[0]);
    if (HIDWORD(v1317[0]) == (unint64_t)LODWORD(v1317[0]))
    {
      uint64_t v107 = *(void *)(a1 + 288);
      uint64_t v108 = (void *)(v107 + 408);
      unint64_t v109 = *(unsigned int *)(v107 + 416);
      BOOL v73 = (HIDWORD(v1317[0]) & 0x7FFFFFFFu) >= v109;
      unint64_t v110 = (HIDWORD(v1317[0]) & 0x7FFFFFFF) - v109;
      if (v73)
      {
        sub_1CB9153B8((uint64_t)v108, v110 + 1, *(void *)(v107 + 424));
      }
      else
      {
        uint64_t v111 = *(void *)(*v108 + 8 * (HIDWORD(v1317[0]) & 0x7FFFFFFF));
        if (v111)
        {
          unint64_t v7 = v1311;
          uint64_t v112 = *(void *)(v107 + 288);
          __int16 v113 = *(_WORD *)(v9 + 44);
          unint64_t v114 = v9;
          if ((v113 & 4) != 0)
          {
            do
              unint64_t v114 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v114 + 44) & 4) != 0);
          }
          uint64_t v115 = v9;
          if ((v113 & 8) != 0)
          {
            do
              uint64_t v115 = *(void *)(v115 + 8);
            while ((*(_WORD *)(v115 + 44) & 8) != 0);
          }
          unint64_t v116 = *(void *)(v115 + 8);
          if (v114 != v116)
          {
            while (1)
            {
              unsigned int v117 = **(unsigned __int16 **)(v114 + 16);
              BOOL v43 = v117 > 0x17;
              int v118 = (1 << v117) & 0x83E000;
              if (v43 || v118 == 0) {
                break;
              }
              unint64_t v114 = *(void *)(v114 + 8);
              if (v114 == v116)
              {
                unint64_t v114 = v116;
                break;
              }
            }
          }
          uint64_t v120 = *(void *)(v112 + 368);
          uint64_t v121 = *(unsigned int *)(v112 + 384);
          if (v121)
          {
            LODWORD(v122) = ((v114 >> 4) ^ (v114 >> 9)) & (v121 - 1);
            int v123 = (uint64_t *)(v120 + 16 * v122);
            uint64_t v124 = *v123;
            if (v114 == *v123) {
              goto LABEL_203;
            }
            int v125 = 1;
            while (v124 != -4096)
            {
              int v126 = v122 + v125++;
              uint64_t v122 = v126 & (v121 - 1);
              uint64_t v124 = *(void *)(v120 + 16 * v122);
              if (v114 == v124)
              {
                int v123 = (uint64_t *)(v120 + 16 * v122);
                goto LABEL_203;
              }
            }
          }
          int v123 = (uint64_t *)(v120 + 16 * v121);
LABEL_203:
          unint64_t v184 = v123[1] & 0xFFFFFFFFFFFFFFF8;
          unsigned int v185 = *(_DWORD *)(v111 + 8);
          int v186 = *(void **)v111;
          if (v185)
          {
            uint64_t v187 = v186[3 * v185 - 2];
            unsigned int v188 = *(_DWORD *)(v184 + 24);
            unsigned int v189 = (v187 >> 1) & 3 | *(_DWORD *)((v187 & 0xFFFFFFFFFFFFFFF8) + 24);
            int8x16_t v190 = *(void **)v111;
            unint64_t v191 = *(unsigned int *)(v111 + 8);
            if (v188 < v189)
            {
              do
              {
                unint64_t v192 = v191 >> 1;
                uint64_t v193 = v190[3 * (v191 >> 1) + 1];
                LODWORD(v193) = (v193 >> 1) & 3 | *(_DWORD *)((v193 & 0xFFFFFFFFFFFFFFF8) + 24);
                v191 -= (v191 >> 1) + 1;
                BOOL v194 = v188 >= v193;
                if (v188 >= v193) {
                  unint64_t v195 = v192 + 1;
                }
                else {
                  unint64_t v195 = 0;
                }
                v190 += 3 * v195;
                if (!v194) {
                  unint64_t v191 = v192;
                }
              }
              while (v191);
              goto LABEL_244;
            }
          }
          else
          {
            unsigned int v185 = 0;
          }
          int8x16_t v190 = &v186[3 * v185];
LABEL_244:
          uint64_t v217 = &v186[3 * v185];
          if (v190 == v217) {
            goto LABEL_855;
          }
          unsigned int v218 = *(_DWORD *)((*v190 & 0xFFFFFFFFFFFFFFF8) + 24);
          unsigned int v219 = *(_DWORD *)(v184 + 24);
          if (((*v190 >> 1) & 3 | v218) > v219)
          {
            uint64_t v221 = 0;
          }
          else
          {
            uint64_t v220 = v190[2];
            if (v184 == (v190[1] & 0xFFFFFFFFFFFFFFF8))
            {
              v190 += 3;
              if (v190 == v217) {
                goto LABEL_855;
              }
              unsigned int v218 = *(_DWORD *)((*v190 & 0xFFFFFFFFFFFFFFF8) + 24);
            }
            if (*(void *)(v220 + 8) == v184) {
              uint64_t v221 = 0;
            }
            else {
              uint64_t v221 = v220;
            }
          }
          if (v219 < v218 || ((uint64_t v222 = v190[2], v221 != v222) ? (v223 = v222 == 0) : (v223 = 1), v223))
          {
LABEL_855:
            sub_1CC43B958(a1, (llvm::MachineInstr *)v9);
            int v26 = 1;
            int v5 = v1315;
            uint64_t v6 = v1312;
            uint64_t v8 = v1313;
            goto LABEL_1677;
          }
          uint64_t v224 = *(void *)(v111 + 104);
          v1297 = (void *)(v111 + 104);
          if (!v224)
          {
            llvm::LiveRange::MergeValueNumberInto(v111, v222, v221);
            unint64_t v7 = v1311;
            goto LABEL_855;
          }
          uint64_t v1279 = v221;
          uint64_t v1288 = *(void *)(*v108 + 8 * (HIDWORD(v1317[0]) & 0x7FFFFFFF));
          uint64_t v225 = 0;
          uint64_t v226 = *(void *)(v9 + 24);
          while (1)
          {
            unsigned int v227 = *(_DWORD *)(v224 + 8);
            uint64_t v228 = *(void *)v224;
            if (!v227) {
              break;
            }
            uint64_t v229 = *(void *)(v228 + 24 * v227 - 16);
            unsigned int v230 = *(_DWORD *)(v184 + 24);
            unsigned int v231 = (v229 >> 1) & 3 | *(_DWORD *)((v229 & 0xFFFFFFFFFFFFFFF8) + 24);
            int v232 = *(void **)v224;
            unint64_t v233 = *(unsigned int *)(v224 + 8);
            if (v230 >= v231) {
              goto LABEL_270;
            }
            do
            {
              unint64_t v234 = v233 >> 1;
              uint64_t v235 = v232[3 * (v233 >> 1) + 1];
              LODWORD(v235) = (v235 >> 1) & 3 | *(_DWORD *)((v235 & 0xFFFFFFFFFFFFFFF8) + 24);
              v233 -= (v233 >> 1) + 1;
              BOOL v236 = v230 >= v235;
              if (v230 >= v235) {
                unint64_t v237 = v234 + 1;
              }
              else {
                unint64_t v237 = 0;
              }
              v232 += 3 * v237;
              if (!v236) {
                unint64_t v233 = v234;
              }
            }
            while (v233);
LABEL_271:
            uint64_t v238 = (void *)(v228 + 24 * v227);
            if (v232 != v238)
            {
              unsigned int v239 = *(_DWORD *)((*v232 & 0xFFFFFFFFFFFFFFF8) + 24);
              unsigned int v240 = *(_DWORD *)(v184 + 24);
              if (((*v232 >> 1) & 3 | v239) > v240)
              {
                uint64_t v242 = 0;
                goto LABEL_280;
              }
              uint64_t v241 = v232[2];
              if (v184 != (v232[1] & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_276;
              }
              v232 += 3;
              if (v232 != v238)
              {
                unsigned int v239 = *(_DWORD *)((*v232 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_276:
                if (*(void *)(v241 + 8) == v184) {
                  uint64_t v242 = 0;
                }
                else {
                  uint64_t v242 = v241;
                }
LABEL_280:
                if (v240 >= v239)
                {
                  uint64_t v243 = (_DWORD *)v232[2];
                  if ((_DWORD *)v242 != v243 && v243 != 0)
                  {
                    uint64_t v245 = v232[2];
                    if (v242) {
                      uint64_t v245 = llvm::LiveRange::MergeValueNumberInto(v224, v232[2], v242);
                    }
                    uint64_t v246 = *(void *)(v226 + 64);
                    uint64_t v247 = *(void *)(v226 + 72);
                    if (v246 == v247)
                    {
LABEL_306:
                      v225 |= *(void *)(v224 + 112);
                      llvm::LiveRange::removeValNo((uint64_t *)v224, v245);
                    }
                    else
                    {
                      unsigned int v248 = *(_DWORD *)(v224 + 8);
                      uint64_t v249 = *(void *)v224 + 24 * v248;
                      while (1)
                      {
                        uint64_t v250 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 288) + 288) + 392)
                                         + 16 * *(unsigned int *)(*(void *)v246 + 24)
                                         + 8);
                        unsigned int v251 = (v250 >> 1) & 3;
                        unint64_t v252 = v250 & 0xFFFFFFFFFFFFFFF8;
                        if (v251) {
                          uint64_t v253 = v252 | (2 * (v251 - 1));
                        }
                        else {
                          uint64_t v253 = *(void *)v252 | 6;
                        }
                        unint64_t v254 = (void *)(*(void *)v224 + 24 * v248);
                        if (v248)
                        {
                          unsigned int v255 = *(_DWORD *)((v253 & 0xFFFFFFFFFFFFFFF8) + 24) | (v253 >> 1) & 3;
                          unint64_t v254 = (void *)(*(void *)v224 + 24 * v248);
                          if (v255 < ((*(void *)(v249 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v249 - 16) & 0xFFFFFFFFFFFFFFF8) + 24)))
                          {
                            unint64_t v254 = *(void **)v224;
                            unint64_t v256 = *(unsigned int *)(v224 + 8);
                            do
                            {
                              unint64_t v257 = v256 >> 1;
                              uint64_t v258 = v254[3 * (v256 >> 1) + 1];
                              LODWORD(v258) = (v258 >> 1) & 3 | *(_DWORD *)((v258 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                              v256 -= (v256 >> 1) + 1;
                              BOOL v259 = v255 >= v258;
                              if (v255 >= v258) {
                                unint64_t v260 = v257 + 1;
                              }
                              else {
                                unint64_t v260 = 0;
                              }
                              v254 += 3 * v260;
                              if (!v259) {
                                unint64_t v256 = v257;
                              }
                            }
                            while (v256);
                          }
                        }
                        if (v254 != (void *)v249
                          && ((*v254 >> 1) & 3 | *(_DWORD *)((*v254 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v253 & 0xFFFFFFFFFFFFFFF8) + 24) | (v253 >> 1) & 3))
                        {
                          uint64_t v261 = (_DWORD *)v254[2];
                          if (v261)
                          {
                            if (*v261 != *v243) {
                              break;
                            }
                          }
                        }
                        v246 += 8;
                        if (v246 == v247) {
                          goto LABEL_306;
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v224 = *(void *)(v224 + 104);
            if (!v224)
            {
              llvm::LiveRange::MergeValueNumberInto(v1288, v222, v1279);
              unint64_t v7 = v1311;
              if (!v225) {
                goto LABEL_855;
              }
              uint64_t v262 = *(void *)(a1 + 264);
              if ((v1317[0] & 0x8000000000000000) != 0) {
                uint64_t v263 = (unsigned int **)(*(void *)(v262 + 24) + 16 * (HIDWORD(v1317[0]) & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v263 = (unsigned int **)(*(void *)(v262 + 272) + 8 * HIDWORD(v1317[0]));
              }
              unsigned int v264 = v1297;
              int v265 = *v263;
              if (!v265) {
                goto LABEL_314;
              }
              while (1)
              {
                unsigned int v266 = *v265;
                if ((*v265 & 0x81000000) == 0) {
                  break;
                }
                int v265 = (unsigned int *)*((void *)v265 + 3);
                if (!v265) {
                  goto LABEL_314;
                }
              }
LABEL_316:
              if ((v266 & 0x10000000) != 0) {
                goto LABEL_354;
              }
              unsigned int v268 = (v266 >> 8) & 0xFFF;
              if (!v268) {
                goto LABEL_354;
              }
              unint64_t v269 = *((void *)v265 + 1);
              __int16 v270 = *(_WORD *)(v269 + 44);
              unint64_t v271 = v269;
              if ((v270 & 4) != 0)
              {
                do
                  unint64_t v271 = *(void *)v271 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v271 + 44) & 4) != 0);
              }
              if ((v270 & 8) != 0)
              {
                do
                  unint64_t v269 = *(void *)(v269 + 8);
                while ((*(_WORD *)(v269 + 44) & 8) != 0);
              }
              unint64_t v272 = *(void *)(v269 + 8);
              if (v271 != v272)
              {
                do
                {
                  unsigned int v273 = **(unsigned __int16 **)(v271 + 16);
                  BOOL v43 = v273 > 0x17;
                  int v274 = (1 << v273) & 0x83E000;
                  if (v43 || v274 == 0) {
                    goto LABEL_327;
                  }
                  unint64_t v271 = *(void *)(v271 + 8);
                }
                while (v271 != v272);
                unint64_t v271 = v272;
              }
LABEL_327:
              uint64_t v276 = *(void *)(*(void *)(a1 + 288) + 288);
              uint64_t v277 = *(void *)(v276 + 368);
              uint64_t v278 = *(unsigned int *)(v276 + 384);
              if (v278)
              {
                LODWORD(v279) = ((v271 >> 4) ^ (v271 >> 9)) & (v278 - 1);
                uint64_t v280 = (uint64_t *)(v277 + 16 * v279);
                uint64_t v281 = *v280;
                if (v271 != *v280)
                {
                  int v282 = 1;
                  do
                  {
                    if (v281 == -4096) {
                      goto LABEL_333;
                    }
                    int v283 = v279 + v282++;
                    uint64_t v279 = v283 & (v278 - 1);
                    uint64_t v281 = *(void *)(v277 + 16 * v279);
                  }
                  while (v271 != v281);
                  uint64_t v280 = (uint64_t *)(v277 + 16 * v279);
                }
              }
              else
              {
LABEL_333:
                uint64_t v280 = (uint64_t *)(v277 + 16 * v278);
              }
              uint64_t v284 = *v1297;
              if (!*v1297) {
                goto LABEL_354;
              }
              uint64_t v285 = *(void *)(*(void *)(*(void *)(a1 + 272) + 232) + 8 * v268);
              uint64_t v286 = v280[1];
              unint64_t v287 = v286 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v288 = (v286 >> 1) & 3;
              uint64_t v289 = v285 & v225;
              while (2)
              {
                unsigned int v290 = *(_DWORD *)(v284 + 8);
                uint64_t v291 = *(void **)v284;
                if (v290)
                {
                  uint64_t v292 = v291[3 * v290 - 2];
                  unsigned int v293 = *(_DWORD *)(v287 + 24) | v288;
                  unsigned int v294 = (v292 >> 1) & 3 | *(_DWORD *)((v292 & 0xFFFFFFFFFFFFFFF8) + 24);
                  int v295 = *(void **)v284;
                  unint64_t v296 = *(unsigned int *)(v284 + 8);
                  if (v293 < v294)
                  {
                    do
                    {
                      unint64_t v297 = v296 >> 1;
                      uint64_t v298 = v295[3 * (v296 >> 1) + 1];
                      LODWORD(v298) = (v298 >> 1) & 3 | *(_DWORD *)((v298 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v296 -= (v296 >> 1) + 1;
                      BOOL v299 = v293 >= v298;
                      if (v293 >= v298) {
                        unint64_t v300 = v297 + 1;
                      }
                      else {
                        unint64_t v300 = 0;
                      }
                      v295 += 3 * v300;
                      if (!v299) {
                        unint64_t v296 = v297;
                      }
                    }
                    while (v296);
LABEL_347:
                    if ((v295 == &v291[3 * v290]
                       || ((*v295 >> 1) & 3 | *(_DWORD *)((*v295 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v287 + 24) | v288))
                      && v289)
                    {
                      *int v265 = v266 | 0x10000000;
                      goto LABEL_354;
                    }
                    uint64_t v284 = *(void *)(v284 + 104);
                    if (!v284)
                    {
LABEL_354:
                      while (1)
                      {
                        int v265 = (unsigned int *)*((void *)v265 + 3);
                        if (!v265) {
                          break;
                        }
                        unsigned int v266 = *v265;
                        if ((*v265 & 0x81000000) == 0) {
                          goto LABEL_316;
                        }
                      }
LABEL_314:
                      uint64_t v267 = *v1297;
                      if (!*v1297) {
                        goto LABEL_854;
                      }
                      while (1)
                      {
                        int v645 = v264;
                        uint64_t v644 = v267;
                        if (!*(_DWORD *)(v267 + 8)) {
                          break;
                        }
LABEL_853:
                        unsigned int v264 = (void *)(v267 + 104);
                        uint64_t v267 = *(void *)(v267 + 104);
                        if (!v267) {
                          goto LABEL_854;
                        }
                      }
                      while (1)
                      {
                        uint64_t v642 = *(void *)(v644 + 96);
                        uint64_t v267 = *(void *)(v644 + 104);
                        *(void *)(v644 + 96) = 0;
                        if (v642)
                        {
                          sub_1CB833A08(v642, *(void **)(v642 + 8));
                          MEMORY[0x1D25D9CE0](v642, 0x1020C4062D53EE8);
                        }
                        __int16 v643 = *(void **)(v644 + 64);
                        if (v643 != (void *)(v644 + 80)) {
                          free(v643);
                        }
                        if (*(void *)v644 == v644 + 16)
                        {
                          if (!v267)
                          {
LABEL_856:
                            *int v645 = 0;
LABEL_854:
                            llvm::LiveIntervals::shrinkToUses(*(void **)(a1 + 288), v1288, 0);
                            goto LABEL_855;
                          }
                        }
                        else
                        {
                          free(*(void **)v644);
                          if (!v267) {
                            goto LABEL_856;
                          }
                        }
                        uint64_t v644 = v267;
                        if (*(_DWORD *)(v267 + 8))
                        {
                          *int v645 = v267;
                          goto LABEL_853;
                        }
                      }
                    }
                    continue;
                  }
                }
                else
                {
                  unsigned int v290 = 0;
                }
                break;
              }
              int v295 = &v291[3 * v290];
              goto LABEL_347;
            }
          }
          unsigned int v227 = 0;
LABEL_270:
          int v232 = (void *)(v228 + 24 * v227);
          goto LABEL_271;
        }
      }
      llvm::LiveIntervals::createInterval();
    }
    if (v1318)
    {
      if (LOBYTE(v1317[2]))
      {
        *(void *)(a1 + 648) = 0;
        *(unsigned char *)(a1 + 656) = 0;
        uint64_t v127 = *(void *)(a1 + 288);
LABEL_145:
        v1349 = v1351;
        uint64_t v1350 = 0x1000000000;
        uint64_t v145 = (void *)(v127 + 408);
        unint64_t v146 = *(unsigned int *)(v127 + 416);
        if ((v106 & 0x7FFFFFFF) >= v146)
        {
          sub_1CB9153B8((uint64_t)v145, (v106 & 0x7FFFFFFF) - v146 + 1, *(void *)(v127 + 424));
        }
        else
        {
          uint64_t v147 = *(void *)(*v145 + 8 * (v106 & 0x7FFFFFFF));
          if (v147)
          {
            unint64_t v148 = v1317[0] & 0x7FFFFFFF;
            uint64_t v149 = (void *)(v127 + 408);
            BOOL v73 = v148 >= v146;
            unint64_t v150 = v148 - v146;
            if (v73)
            {
              sub_1CB9153B8((uint64_t)v149, v150 + 1, *(void *)(v127 + 424));
            }
            else
            {
              uint64_t v151 = *(void *)(*v149 + 8 * v148);
              if (v151)
              {
                if (*(unsigned char *)(*(void *)(a1 + 264) + 16)) {
                  BOOL v152 = *(unsigned char *)(v1318 + 34) == 0;
                }
                else {
                  BOOL v152 = 1;
                }
                char v153 = !v152;
                sub_1CC43E7DC((uint64_t)&v1340, v147, SHIDWORD(v1317[0]), SHIDWORD(v1317[1]), 0, (uint64_t)&v1349, (uint64_t)&v1316, v127, *(void *)(a1 + 272), 0, v153);
                sub_1CC43E7DC((uint64_t)&v1333, v151, v1317[0], v1317[1], 0, (uint64_t)&v1349, (uint64_t)&v1316, *(void *)(a1 + 288), *(void *)(a1 + 272), 0, v153);
                unsigned int v156 = dword_1EBCD3150;
                if (*(_DWORD *)(v151 + 72) >= dword_1EBCD3150)
                {
                  LODWORD(v1330) = *(_DWORD *)(v151 + 112);
                  uint64_t v157 = sub_1CC43FE3C(v1310, &v1330);
                  unint64_t v158 = *(void *)(v157 + 8);
                  if (v158 >= dword_1EBCD3210) {
                    goto LABEL_176;
                  }
                  *(void *)(v157 + 8) = v158 + 1;
                  unsigned int v156 = dword_1EBCD3150;
                }
                if (*(_DWORD *)(v147 + 72) >= v156)
                {
                  LODWORD(v1330) = *(_DWORD *)(v147 + 112);
                  uint64_t v159 = sub_1CC43FE3C(v1310, &v1330);
                  unint64_t v160 = *(void *)(v159 + 8);
                  if (v160 >= dword_1EBCD3210) {
                    goto LABEL_176;
                  }
                  *(void *)(v159 + 8) = v160 + 1;
                }
                uint64_t v161 = *((unsigned int *)v1333 + 18);
                if (v161)
                {
                  unsigned int v162 = 0;
                  uint64_t v163 = 0;
                  uint64_t v164 = 48 * v161;
                  while (1)
                  {
                    sub_1CC440204((uint64_t)&v1333, v162, (uint64_t **)&v1340);
                    if (*(_DWORD *)((char *)v1338 + v163) == 5) {
                      break;
                    }
                    v163 += 48;
                    ++v162;
                    if (v164 == v163) {
                      goto LABEL_165;
                    }
                  }
LABEL_176:
                  char v173 = 0;
                  goto LABEL_177;
                }
LABEL_165:
                uint64_t v165 = *((unsigned int *)v1340 + 18);
                if (v165)
                {
                  unsigned int v166 = 0;
                  uint64_t v167 = 0;
                  uint64_t v168 = 48 * v165;
                  do
                  {
                    sub_1CC440204((uint64_t)&v1340, v166, (uint64_t **)&v1333);
                    if (*(_DWORD *)((char *)v1347 + v167) == 5) {
                      goto LABEL_176;
                    }
                    v167 += 48;
                    ++v166;
                  }
                  while (v168 != v167);
                }
                if (!sub_1CC43E8E4(&v1333, (uint64_t **)&v1340, v154, v155)
                  || !sub_1CC43E8E4(&v1340, (uint64_t **)&v1333, v169, v170))
                {
                  goto LABEL_176;
                }
                uint64_t v171 = *(void *)(v151 + 104);
                if (*(void *)(v147 + 104) | v171)
                {
                  uint64_t v172 = LODWORD(v1317[1]);
                  if (v171)
                  {
                    if (LODWORD(v1317[1]))
                    {
                      do
                      {
                        *(void *)(v171 + 112) = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 216))(*(void *)(a1 + 272), v172, *(void *)(v171 + 112));
                        uint64_t v171 = *(void *)(v171 + 104);
                      }
                      while (v171);
                    }
                  }
                  else
                  {
                    if (LODWORD(v1317[1])) {
                      unsigned int v427 = (uint64_t *)(*(void *)(*(void *)(a1 + 272) + 232) + 8 * LODWORD(v1317[1]));
                    }
                    else {
                      unsigned int v427 = (uint64_t *)(v1318 + 24);
                    }
                    uint64_t v433 = *(void *)(a1 + 288);
                    uint64_t v434 = *v427;
                    *(void *)(v433 + 392) += 120;
                    uint64_t v435 = *(void *)(v433 + 312);
                    if (((v435 + 7) & 0xFFFFFFFFFFFFFFF8) - v435 + 120 > *(void *)(v433 + 320) - v435)
                    {
                      unsigned int v613 = *(_DWORD *)(v433 + 336) >> 7;
                      if (v613 >= 0x1E) {
                        LOBYTE(v613) = 30;
                      }
                      uint64_t v1301 = 4096 << v613;
                      uint64_t v436 = operator new(4096 << v613, (std::align_val_t)8uLL);
                      unint64_t v614 = *(unsigned int *)(v433 + 336);
                      if (v614 >= *(unsigned int *)(v433 + 340)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)(v433 + 328) + 8 * v614) = v436;
                      ++*(_DWORD *)(v433 + 336);
                      *(void *)(v433 + sub_1CC3F44F0((uint64_t)this + 320) = (char *)v436 + v1301;
                    }
                    else
                    {
                      uint64_t v436 = (void *)((v435 + 7) & 0xFFFFFFFFFFFFFFF8);
                    }
                    *(void *)(v433 + 312) = v436 + 15;
                    *uint64_t v436 = v436 + 2;
                    v436[1] = 0x200000000;
                    v436[8] = v436 + 10;
                    v436[9] = 0x200000000;
                    v436[12] = 0;
                    sub_1CC2CD2F8((uint64_t)v436, v151, v433 + 312);
                    v436[14] = v434;
                    v436[13] = *(void *)(v151 + 104);
                    *(void *)(v151 + 104) = v436;
                  }
                  uint64_t v437 = HIDWORD(v1317[1]);
                  uint64_t v438 = *(void *)(v147 + 104);
                  if (v438)
                  {
                    do
                    {
                      uint64_t v439 = *(void *)(v438 + 112);
                      if (v437) {
                        uint64_t v439 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 216))(*(void *)(a1 + 272), v437, *(void *)(v438 + 112));
                      }
                      sub_1CC43EF48(a1, v151, v438, v439, (uint64_t)&v1316, v172);
                      uint64_t v438 = *(void *)(v438 + 104);
                    }
                    while (v438);
                  }
                  else
                  {
                    if (HIDWORD(v1317[1])) {
                      uint64_t v440 = (uint64_t *)(*(void *)(*(void *)(a1 + 272) + 232) + 8 * HIDWORD(v1317[1]));
                    }
                    else {
                      uint64_t v440 = (uint64_t *)(v1318 + 24);
                    }
                    sub_1CC43EF48(a1, v151, v147, *v440, (uint64_t)&v1316, v172);
                  }
                  int v441 = v1333;
                  uint64_t v442 = *((unsigned int *)v1333 + 18);
                  if (v442)
                  {
                    uint64_t v443 = 0;
                    int v444 = v1338;
                    do
                    {
                      if (!*(_DWORD *)&v444[48 * v443])
                      {
                        unint64_t v445 = *(void *)(*(void *)(v441[8] + 8 * v443) + 8);
                        if (v445 >= 8 && (*(void *)(*(void *)(v441[8] + 8 * v443) + 8) & 6) != 0)
                        {
                          uint64_t v447 = *(void *)(v151 + 104);
                          if (v447)
                          {
                            unint64_t v448 = v445 & 0xFFFFFFFFFFFFFFF8;
                            while (1)
                            {
                              unsigned int v449 = *(_DWORD *)(v447 + 8);
                              unsigned int v450 = *(void **)v447;
                              if (!v449) {
                                break;
                              }
                              uint64_t v451 = v450[3 * v449 - 2];
                              unsigned int v452 = *(_DWORD *)(v448 + 24);
                              unsigned int v453 = (v451 >> 1) & 3 | *(_DWORD *)((v451 & 0xFFFFFFFFFFFFFFF8) + 24);
                              unint64_t v454 = *(void **)v447;
                              unint64_t v455 = *(unsigned int *)(v447 + 8);
                              if (v452 >= v453) {
                                goto LABEL_581;
                              }
                              do
                              {
                                unint64_t v456 = v455 >> 1;
                                uint64_t v457 = v454[3 * (v455 >> 1) + 1];
                                LODWORD(v457) = (v457 >> 1) & 3 | *(_DWORD *)((v457 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24);
                                v455 -= (v455 >> 1) + 1;
                                BOOL v458 = v452 >= v457;
                                if (v452 >= v457) {
                                  unint64_t v459 = v456 + 1;
                                }
                                else {
                                  unint64_t v459 = 0;
                                }
                                v454 += 3 * v459;
                                if (!v458) {
                                  unint64_t v455 = v456;
                                }
                              }
                              while (v455);
LABEL_582:
                              uint64_t v460 = &v450[3 * v449];
                              if (v454 != v460)
                              {
                                unsigned int v461 = *(_DWORD *)((*v454 & 0xFFFFFFFFFFFFFFF8) + 24);
                                unsigned int v462 = *(_DWORD *)(v448 + 24);
                                if (((*v454 >> 1) & 3 | v461) <= v462
                                  && v448 == (v454[1] & 0xFFFFFFFFFFFFFFF8))
                                {
                                  v454 += 3;
                                  if (v454 == v460) {
                                    goto LABEL_590;
                                  }
                                  unsigned int v461 = *(_DWORD *)((*v454 & 0xFFFFFFFFFFFFFFF8) + 24);
                                }
                                if (v462 >= v461)
                                {
                                  uint64_t v463 = v454[2];
                                  if (v463)
                                  {
                                    if (*(void *)(v463 + 8) == v445) {
                                      goto LABEL_592;
                                    }
                                  }
                                }
                              }
LABEL_590:
                              uint64_t v447 = *(void *)(v447 + 104);
                              if (!v447) {
                                goto LABEL_591;
                              }
                            }
                            unsigned int v449 = 0;
LABEL_581:
                            unint64_t v454 = &v450[3 * v449];
                            goto LABEL_582;
                          }
LABEL_591:
                          v444[48 * v443 + 41] = 1;
                          *(unsigned char *)(a1 + 656) = 1;
                        }
                      }
LABEL_592:
                      ++v443;
                    }
                    while (v443 != v442);
                  }
                  sub_1CC43F084((uint64_t *)&v1333, v151, v1309);
                  sub_1CC43F084((uint64_t *)&v1340, v151, v1309);
                }
                v1330 = v1332;
                uint64_t v1331 = 0x800000000;
                sub_1CC43F5DC((uint64_t *)&v1333, (uint64_t *)&v1340, (uint64_t)&v1330, 1);
                sub_1CC43F5DC((uint64_t *)&v1340, (uint64_t *)&v1333, (uint64_t)&v1330, 1);
                v1327 = v1329;
                uint64_t v1328 = 0x800000000;
                sub_1CC43F7B8((uint64_t **)&v1333, v1306, (uint64_t)&v1327, v151);
                sub_1CC43F7B8((uint64_t **)&v1340, v1306, (uint64_t)&v1327, 0);
                while (v1328)
                {
                  uint64_t v464 = *(void *)(a1 + 288);
                  int v465 = *((_DWORD *)v1327 + v1328 - 1);
                  LODWORD(v1328) = v1328 - 1;
                  uint64_t v466 = (void *)(v464 + 408);
                  unint64_t v467 = *(unsigned int *)(v464 + 416);
                  BOOL v73 = (v465 & 0x7FFFFFFFu) >= v467;
                  unint64_t v468 = (v465 & 0x7FFFFFFF) - v467;
                  if (v73)
                  {
                    sub_1CB9153B8((uint64_t)v466, v468 + 1, *(void *)(v464 + 424));
LABEL_600:
                    llvm::LiveIntervals::createInterval();
                  }
                  unsigned int v469 = *(const llvm::LiveRange **)(*v466 + 8 * (v465 & 0x7FFFFFFF));
                  if (!v469) {
                    goto LABEL_600;
                  }
                  sub_1CC43B764(a1, v469, 0);
                }
                int v470 = HIDWORD(v1317[0]);
                long long v471 = operator new(0x28uLL);
                *long long v471 = &unk_1F2612220;
                v471[1] = a1;
                v471[2] = v151;
                v471[3] = v147;
                v471[4] = &v1340;
                LODWORD(__src) = v470;
                sub_1CC441898(*(void *)(a1 + 600), *(_DWORD *)(a1 + 616), v470, v151, (uint64_t *)v147, (uint64_t)&v1340);
                int v472 = *(_DWORD *)(a1 + 640);
                if (v472)
                {
                  uint64_t v473 = *(void *)(a1 + 624);
                  int v474 = v472 - 1;
                  unsigned int v475 = v474 & (37 * v470);
                  int v476 = *(_DWORD *)(v473 + 40 * v475);
                  if (v476 == v470)
                  {
LABEL_603:
                    int v477 = sub_1CD56F744(v1307, (int *)&__src);
                    uint64_t v478 = v477[4];
                    if (v478)
                    {
                      unint64_t v479 = (int *)*((void *)v477 + 1);
                      uint64_t v480 = 4 * v478;
                      do
                      {
                        int v481 = *v479++;
                        int v1320 = v481;
                        (*(void (**)(void *, int *))(*v471 + 48))(v471, &v1320);
                        v480 -= 4;
                      }
                      while (v480);
                    }
                  }
                  else
                  {
                    int v1071 = 1;
                    while (v476 != -1)
                    {
                      unsigned int v1072 = v475 + v1071++;
                      unsigned int v475 = v1072 & v474;
                      int v476 = *(_DWORD *)(v473 + 40 * v475);
                      if (v476 == v470) {
                        goto LABEL_603;
                      }
                    }
                  }
                }
                (*(void (**)(void *))(*v471 + 40))(v471);
                int v482 = v1317[0];
                uint64_t v483 = operator new(0x28uLL);
                void *v483 = &unk_1F2612268;
                v483[1] = a1;
                v483[2] = v147;
                v483[3] = v151;
                v483[4] = &v1333;
                LODWORD(__src) = v482;
                sub_1CC441898(*(void *)(a1 + 600), *(_DWORD *)(a1 + 616), v482, v147, (uint64_t *)v151, (uint64_t)&v1333);
                int v484 = *(_DWORD *)(a1 + 640);
                if (v484)
                {
                  uint64_t v485 = *(void *)(a1 + 624);
                  int v486 = v484 - 1;
                  unsigned int v487 = v486 & (37 * v482);
                  int v488 = *(_DWORD *)(v485 + 40 * v487);
                  if (v488 == v482)
                  {
LABEL_608:
                    int64_t v489 = sub_1CD56F744(v1307, (int *)&__src);
                    uint64_t v490 = v489[4];
                    if (v490)
                    {
                      int v491 = (int *)*((void *)v489 + 1);
                      uint64_t v492 = 4 * v490;
                      do
                      {
                        int v493 = *v491++;
                        int v1320 = v493;
                        (*(void (**)(void *, int *))(*v483 + 48))(v483, &v1320);
                        v492 -= 4;
                      }
                      while (v492);
                    }
                  }
                  else
                  {
                    int v1073 = 1;
                    while (v488 != -1)
                    {
                      unsigned int v1074 = v487 + v1073++;
                      unsigned int v487 = v1074 & v486;
                      int v488 = *(_DWORD *)(v485 + 40 * v487);
                      if (v488 == v482) {
                        goto LABEL_608;
                      }
                    }
                  }
                }
                (*(void (**)(void *))(*v483 + 40))(v483);
                uint64_t v494 = *(void *)(a1 + 576);
                uint64_t v495 = *(unsigned int *)(a1 + 592);
                if (v495)
                {
                  uint64_t v1246 = (v495 - 1) & (37 * HIDWORD(v1317[0]));
                  std::string::size_type v496 = (int *)(v494 + 32 * v1246);
                  int v1247 = *v496;
                  if (HIDWORD(v1317[0]) != *v496)
                  {
                    int v1248 = 1;
                    do
                    {
                      if (v1247 == -1) {
                        goto LABEL_612;
                      }
                      int v1249 = v1246 + v1248++;
                      uint64_t v1246 = v1249 & (v495 - 1);
                      int v1247 = *(_DWORD *)(v494 + 32 * v1246);
                    }
                    while (HIDWORD(v1317[0]) != v1247);
                    std::string::size_type v496 = (int *)(v494 + 32 * v1246);
                  }
                }
                else
                {
LABEL_612:
                  std::string::size_type v496 = (int *)(v494 + 32 * v495);
                }
                if ((int *)(v494 + 32 * v495) == v496) {
                  goto LABEL_655;
                }
                float v498 = (void **)(v496 + 2);
                uint64_t v497 = (char *)*((void *)v496 + 1);
                uint64_t v499 = v496[4];
                if (!v499)
                {
                  __src = &v1326;
                  uint64_t v1325 = 0x200000000;
                  goto LABEL_647;
                }
                unsigned int v500 = &v497[4 * v499];
                uint64_t v501 = *(void *)(a1 + 552);
                uint64_t v502 = *(void *)v147;
                uint64_t v503 = *(void *)v147 - 16;
                int v504 = v1317[0];
                unsigned int v505 = (_DWORD *)*((void *)v496 + 1);
                while (1)
                {
                  unsigned int v506 = *(_DWORD *)(a1 + 568);
                  if (v506)
                  {
                    unsigned int v507 = v506 - 1;
                    unsigned int v508 = (v506 - 1) & (37 * *v505);
                    uint64_t v509 = (int *)(v501 + 24 * v508);
                    int v510 = *v509;
                    if (*v505 == *v509) {
                      goto LABEL_623;
                    }
                    int v511 = 1;
                    while (v510 != -1)
                    {
                      unsigned int v512 = v508 + v511++;
                      unsigned int v508 = v512 & v507;
                      uint64_t v509 = (int *)(v501 + 24 * (v512 & v507));
                      int v510 = *v509;
                      if (*v505 == *v509) {
                        goto LABEL_623;
                      }
                    }
                  }
                  uint64_t v509 = (int *)(v501 + 24 * v506);
LABEL_623:
                  uint64_t v513 = *((void *)v509 + 1);
                  unsigned int v514 = *(_DWORD *)(v147 + 8);
                  if (v514)
                  {
                    unsigned int v515 = *(_DWORD *)((v513 & 0xFFFFFFFFFFFFFFF8) + 24) | (v513 >> 1) & 3;
                    unsigned int v516 = (void *)v502;
                    unint64_t v517 = *(unsigned int *)(v147 + 8);
                    if (v515 < ((*(void *)(v503 + 24 * v514) >> 1) & 3 | *(_DWORD *)((*(void *)(v503 + 24 * v514) & 0xFFFFFFFFFFFFFFF8) + 24)))
                    {
                      do
                      {
                        unint64_t v518 = v517 >> 1;
                        uint64_t v519 = v516[3 * (v517 >> 1) + 1];
                        LODWORD(v519) = (v519 >> 1) & 3 | *(_DWORD *)((v519 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v517 -= (v517 >> 1) + 1;
                        BOOL v520 = v515 >= v519;
                        if (v515 >= v519) {
                          unint64_t v521 = v518 + 1;
                        }
                        else {
                          unint64_t v521 = 0;
                        }
                        v516 += 3 * v521;
                        if (!v520) {
                          unint64_t v517 = v518;
                        }
                      }
                      while (v517);
                      goto LABEL_634;
                    }
                  }
                  else
                  {
                    unsigned int v514 = 0;
                  }
                  unsigned int v516 = (void *)(v502 + 24 * v514);
LABEL_634:
                  if (v516 != (void *)(v502 + 24 * v514)
                    && ((*v516 >> 1) & 3 | *(_DWORD *)((*v516 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v513 & 0xFFFFFFFFFFFFFFF8) + 24) | (v513 >> 1) & 3)
                    && (!v1317[1] || (int v522 = v509[5]) == 0 || v522 == HIDWORD(v1317[1])))
                  {
                    v509[4] = v504;
                    if (HIDWORD(v1317[1])) {
                      v509[5] = HIDWORD(v1317[1]);
                    }
                  }
                  if (++v505 == (_DWORD *)v500)
                  {
                    unint64_t v523 = v496[4];
                    __src = &v1326;
                    uint64_t v1325 = 0x200000000;
                    if (&__src != v498 && v523)
                    {
                      if (v523 >= 3) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy(&v1326, v497, 4 * v523);
                      LODWORD(v1325) = v523;
                      uint64_t v497 = (char *)*v498;
                    }
LABEL_647:
                    if (v497 != (char *)(v496 + 6)) {
                      free(v497);
                    }
                    *std::string::size_type v496 = -2;
                    *(int32x2_t *)(a1 + 584) = vadd_s32(*(int32x2_t *)(a1 + 584), (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v524 = *(void *)(a1 + 576);
                    uint64_t v525 = *(unsigned int *)(a1 + 592);
                    if (v525)
                    {
                      unsigned int v1250 = v525 - 1;
                      uint64_t v526 = (_DWORD *)(v524 + 32 * ((v525 - 1) & (37 * LODWORD(v1317[0]))));
                      int v1251 = *v526;
                      if (LODWORD(v1317[0]) != *v526)
                      {
                        int v1252 = 1;
                        LODWORD(v1253) = v1250 & (37 * LODWORD(v1317[0]));
                        while (v1251 != -1)
                        {
                          int v1254 = v1253 + v1252++;
                          uint64_t v1253 = v1254 & v1250;
                          int v1251 = *(_DWORD *)(v524 + 32 * v1253);
                          if (LODWORD(v1317[0]) == v1251)
                          {
                            uint64_t v526 = (_DWORD *)(v524 + 32 * v1253);
                            goto LABEL_651;
                          }
                        }
                        goto LABEL_650;
                      }
                    }
                    else
                    {
LABEL_650:
                      uint64_t v526 = (_DWORD *)(v524 + 32 * v525);
                    }
LABEL_651:
                    if ((_DWORD *)(v524 + 32 * v525) == v526)
                    {
                      int v1320 = v1317[0];
                      v1321 = &v1323;
                      uint64_t v1322 = 0x200000000;
                      int v568 = v1325;
                      if (v1325)
                      {
                        if (v1325 >= 3) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        memcpy(&v1323, __src, 4 * v1325);
                        LODWORD(v1322) = v568;
                      }
                      sub_1CD56FA44((uint64_t)v1319, v1305, &v1320, (uint64_t)&v1321);
                      if (v1321 != &v1323) {
                        free(v1321);
                      }
                    }
                    else
                    {
                      sub_1CB925718(v526 + 2, __src, (unsigned char *)__src + 4 * v1325);
                    }
                    if (__src != &v1326) {
                      free(__src);
                    }
LABEL_655:
                    llvm::LiveRange::join(v151, (unsigned int *)v147, (uint64_t)v1336, (uint64_t)v1345, (uint64_t *)&v1349);
                    uint64_t v527 = *(void *)(a1 + 264);
                    uint64_t v528 = *(unsigned int *)(v151 + 112);
                    if ((v528 & 0x80000000) != 0) {
                      uint64_t v529 = (unsigned int **)(*(void *)(v527 + 24) + 16 * (v528 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v529 = (unsigned int **)(*(void *)(v527 + 272) + 8 * v528);
                    }
                    unsigned int v530 = *v529;
                    if (v530)
                    {
                      while (1)
                      {
                        unsigned int v531 = *v530;
                        if ((*v530 & 0x1000000) == 0) {
                          break;
                        }
                        unsigned int v530 = (unsigned int *)*((void *)v530 + 3);
                        if (!v530) {
                          goto LABEL_666;
                        }
                      }
LABEL_661:
                      *unsigned int v530 = v531 & 0xFBFFFFFF;
                      while (1)
                      {
                        unsigned int v530 = (unsigned int *)*((void *)v530 + 3);
                        if (!v530) {
                          break;
                        }
                        unsigned int v531 = *v530;
                        if ((*v530 & 0x1000000) == 0) {
                          goto LABEL_661;
                        }
                      }
                      uint64_t v527 = *(void *)(a1 + 264);
                    }
LABEL_666:
                    uint64_t v532 = *(unsigned int *)(v147 + 112);
                    if ((v532 & 0x80000000) != 0) {
                      int v533 = (unsigned int **)(*(void *)(v527 + 24) + 16 * (v532 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      int v533 = (unsigned int **)(*(void *)(v527 + 272) + 8 * v532);
                    }
                    uint64_t v534 = *v533;
                    if (v534)
                    {
                      while (1)
                      {
                        unsigned int v535 = *v534;
                        if ((*v534 & 0x1000000) == 0) {
                          break;
                        }
                        uint64_t v534 = (unsigned int *)*((void *)v534 + 3);
                        if (!v534) {
                          goto LABEL_671;
                        }
                      }
LABEL_679:
                      unsigned int *v534 = v535 & 0xFBFFFFFF;
                      while (1)
                      {
                        uint64_t v534 = (unsigned int *)*((void *)v534 + 3);
                        if (!v534) {
                          break;
                        }
                        unsigned int v535 = *v534;
                        if ((*v534 & 0x1000000) == 0) {
                          goto LABEL_679;
                        }
                      }
                    }
LABEL_671:
                    uint64_t v536 = v1331;
                    if (v1331)
                    {
                      uint64_t v537 = *(void *)(a1 + 288);
                      v538 = (unint64_t *)v1330;
                      uint64_t v539 = *(void *)(v537 + 304);
                      uint64_t v540 = *(void *)(v537 + 248);
                      *(void *)uint64_t v539 = v540;
                      *(void *)(v539 + 8) = *(void *)(v540 + 40);
                      *(_OWORD *)(v539 + 16) = *(_OWORD *)(v537 + 288);
                      *(void *)(v539 + 32) = v537 + 312;
                      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v539);
                      *(_DWORD *)(v539 + 184) = 0;
                      uint64_t v541 = 8 * v536;
                      do
                      {
                        unint64_t v542 = *v538++;
                        llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v537 + 304), v151, v542, 0, 0, 0);
                        v541 -= 8;
                      }
                      while (v541);
                    }
                    if (v1327 != v1329) {
                      free(v1327);
                    }
                    if (v1330 != v1332) {
                      free(v1330);
                    }
                    char v173 = 1;
LABEL_177:
                    if (v1338 != &v1339) {
                      free(v1338);
                    }
                    if (v1336 != &v1337) {
                      free(v1336);
                    }
                    if (v1347 != &v1348) {
                      free(v1347);
                    }
                    if (v1345 != &v1346) {
                      free(v1345);
                    }
                    if (v1349 != v1351) {
                      free(v1349);
                    }
                    if (v173) {
                      goto LABEL_188;
                    }
                    goto LABEL_410;
                  }
                }
              }
            }
            llvm::LiveIntervals::createInterval();
          }
        }
        llvm::LiveIntervals::createInterval();
      }
      uint64_t v136 = *(void *)(a1 + 288);
      uint64_t v137 = (void *)(v136 + 408);
      unint64_t v138 = *(unsigned int *)(v136 + 416);
      if ((HIDWORD(v1317[0]) & 0x7FFFFFFFu) >= v138)
      {
        sub_1CB9153B8((uint64_t)v137, (HIDWORD(v1317[0]) & 0x7FFFFFFF) - v138 + 1, *(void *)(v136 + 424));
LABEL_1249:
        llvm::LiveIntervals::createInterval();
      }
      uint64_t v139 = *(void *)(*v137 + 8 * (HIDWORD(v1317[0]) & 0x7FFFFFFF));
      if (!v139) {
        goto LABEL_1249;
      }
      unsigned int v140 = *(_DWORD *)(v139 + 8);
      unint64_t v141 = (void *)(v136 + 408);
      BOOL v73 = (v1317[0] & 0x7FFFFFFF) >= v138;
      unint64_t v142 = (v1317[0] & 0x7FFFFFFF) - v138;
      if (v73)
      {
        sub_1CB9153B8((uint64_t)v141, v142 + 1, *(void *)(v136 + 424));
LABEL_1251:
        llvm::LiveIntervals::createInterval();
      }
      uint64_t v143 = *(void *)(*v141 + 8 * (v1317[0] & 0x7FFFFFFF));
      if (!v143) {
        goto LABEL_1251;
      }
      if (v140 > *(_DWORD *)(v143 + 8) && (LODWORD(v1317[0]) - 0x40000000) <= 0xC0000000)
      {
        v1317[0] = __PAIR64__(v1317[0], HIDWORD(v1317[0]));
        v1317[1] = vrev64_s32((int32x2_t)v1317[1]);
        BYTE2(v1317[2]) ^= 1u;
      }
    }
    else
    {
      if (((*(void *)(*(void *)(*(void *)(a1 + 264) + 352)
                       + (((unint64_t)LODWORD(v1317[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v1317[0])) & 1) == 0)
        goto LABEL_136;
      uint64_t v128 = *(void *)(a1 + 288);
      BOOL v129 = (void *)(v128 + 408);
      unint64_t v130 = *(unsigned int *)(v128 + 416);
      BOOL v73 = (HIDWORD(v1317[0]) & 0x7FFFFFFFu) >= v130;
      unint64_t v131 = (HIDWORD(v1317[0]) & 0x7FFFFFFF) - v130;
      if (v73)
      {
        sub_1CB9153B8((uint64_t)v129, v131 + 1, *(void *)(v128 + 424));
LABEL_1247:
        llvm::LiveIntervals::createInterval();
      }
      uint64_t v132 = *(void *)(*v129 + 8 * (HIDWORD(v1317[0]) & 0x7FFFFFFF));
      if (!v132) {
        goto LABEL_1247;
      }
      uint64_t v6 = v1312;
      if (*(_DWORD *)(v132 + 72) != 1)
      {
LABEL_136:
        LOBYTE(v1340) = 0;
        int v133 = sub_1CC43BB90(a1, (uint64_t)&v1316, v9, &v1340);
        int v134 = ((_BYTE)v1340 != 0) & ~v133;
        int v135 = v1315;
        unint64_t v7 = v1311;
        goto LABEL_1207;
      }
    }
    uint64_t v144 = v1318;
    *(void *)(a1 + 648) = 0;
    *(unsigned char *)(a1 + 656) = 0;
    uint64_t v127 = *(void *)(a1 + 288);
    uint64_t v106 = HIDWORD(v1317[0]);
    if (v144) {
      goto LABEL_145;
    }
    unsigned int v196 = v1317[0];
    unint64_t v197 = HIDWORD(v1317[0]) & 0x7FFFFFFF;
    uint64_t v198 = (void *)(v127 + 408);
    unint64_t v199 = *(unsigned int *)(v127 + 416);
    BOOL v73 = v197 >= v199;
    unint64_t v200 = v197 - v199;
    if (v73)
    {
      sub_1CB9153B8((uint64_t)v198, v200 + 1, *(void *)(v127 + 424));
LABEL_1437:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v1296 = *(void *)(*v198 + 8 * v197);
    if (!v1296) {
      goto LABEL_1437;
    }
    if ((llvm::MachineRegisterInfo::isConstantPhysReg(*(void **)(a1 + 264), v1317[0]) & 1) == 0)
    {
      unsigned int v1289 = v196;
      uint64_t v301 = *(void *)(a1 + 272);
      if (v301) {
        uint64_t v302 = (void *)(v301 + 8);
      }
      else {
        uint64_t v302 = 0;
      }
      unint64_t v303 = *(unsigned int *)(*v302 + 24 * v196 + 16);
      uint64_t v304 = (_WORD *)(v302[6] + ((v303 >> 3) & 0x1FFFFFFE));
      unsigned __int16 v305 = *v304 + (v303 & 0xF) * v196;
      do
      {
        ++v304;
        unsigned __int16 v306 = v305;
        uint64_t v307 = *(void *)(a1 + 272);
        if (v307) {
          uint64_t v308 = v307 + 8;
        }
        else {
          uint64_t v308 = 0;
        }
        uint64_t v309 = v305;
        uint64_t v310 = (unsigned __int16 *)(*(void *)(v308 + 40) + 4 * v305);
        unsigned int v311 = *v310;
        unsigned int v312 = v310[1];
        while (v311)
        {
          uint64_t v313 = *(void *)(*(void *)(*(void *)(a1 + 264) + 352) + (((unint64_t)v311 >> 3) & 0x1FFFFFF8)) >> v311;
          unsigned int v311 = v312;
          unsigned int v312 = 0;
          if ((v313 & 1) == 0) {
            goto LABEL_410;
          }
        }
        uint64_t v314 = *(void *)(*(void *)(*(void *)(a1 + 288) + 680) + 8 * v309);
        if (!v314) {
          operator new();
        }
        if (*(_DWORD *)(v314 + 8) && llvm::LiveRange::overlapsFrom(v1296, v314, *(void **)v314)) {
          goto LABEL_410;
        }
        unsigned __int16 v305 = *v304 + v306;
      }
      while (*v304);
      v1340 = &v1342;
      uint64_t v1341 = 0x600000000;
      int v1344 = 0;
      BOOL v432 = llvm::LiveIntervals::checkRegMaskInterference(*(void *)(a1 + 288), v1296, (uint64_t)&v1340);
      unsigned int v196 = v1289;
      if (v432 && ((*((void *)v1340 + (v1289 >> 6)) >> v1289) & 1) == 0)
      {
        if (v1340 != &v1342) {
          free(v1340);
        }
        goto LABEL_410;
      }
      if (v1340 != &v1342) {
        free(v1340);
      }
      unint64_t v197 = v106 & 0x7FFFFFFF;
    }
    uint64_t v201 = *(void *)(a1 + 264);
    if (BYTE2(v1317[2]))
    {
      if ((v106 & 0x80000000) != 0) {
        unint64_t v202 = (uint64_t *)(*(void *)(v201 + 24) + 16 * v197 + 8);
      }
      else {
        unint64_t v202 = (uint64_t *)(*(void *)(v201 + 272) + 8 * v106);
      }
      uint64_t v203 = *v202;
      if (v203
        && ((*(unsigned char *)(v203 + 3) & 1) != 0 || (uint64_t v203 = *(void *)(v203 + 24)) != 0 && (*(unsigned char *)(v203 + 3) & 1) != 0))
      {
        uint64_t v204 = *(llvm::MachineInstr **)(v203 + 8);
      }
      else
      {
        uint64_t v204 = 0;
      }
      goto LABEL_221;
    }
    if ((v106 & 0x80000000) != 0) {
      unsigned int v325 = (uint64_t *)(*(void *)(v201 + 24) + 16 * v197 + 8);
    }
    else {
      unsigned int v325 = (uint64_t *)(*(void *)(v201 + 272) + 8 * v106);
    }
    uint64_t v326 = *v325;
    if (v326)
    {
      if ((*(unsigned char *)(v326 + 3) & 0x81) != 0)
      {
        do
        {
          uint64_t v326 = *(void *)(v326 + 24);
          if (!v326) {
            goto LABEL_410;
          }
        }
        while ((*(_DWORD *)v326 & 0x81000000) != 0);
      }
      while (1)
      {
        uint64_t v326 = *(void *)(v326 + 24);
        if (!v326) {
          break;
        }
        if ((*(_DWORD *)v326 & 0x81000000) == 0) {
          goto LABEL_410;
        }
      }
      if (llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(a1 + 288), v1296))
      {
        unsigned int v428 = *(void **)(a1 + 264);
        if ((v106 & 0x80000000) != 0) {
          unsigned int v429 = (unint64_t *)(v428[3] + 16 * v197 + 8);
        }
        else {
          unsigned int v429 = (unint64_t *)(v428[34] + 8 * v106);
        }
        unint64_t v430 = *v429;
        if (v430)
        {
          if (*(unsigned char *)(v430 + 3)) {
            goto LABEL_541;
          }
          unint64_t v430 = *(void *)(v430 + 24);
          if (v430)
          {
            if (*(unsigned char *)(v430 + 3)) {
LABEL_541:
            }
              unint64_t v430 = *(void *)(v430 + 8);
            else {
              unint64_t v430 = 0;
            }
          }
        }
        if ((v106 & 0x80000000) != 0) {
          uint64_t v431 = (uint64_t *)(v428[3] + 16 * v197 + 8);
        }
        else {
          uint64_t v431 = (uint64_t *)(v428[34] + 8 * v106);
        }
        for (uint64_t i = *v431; (*(_DWORD *)i & 0x81000000) != 0; uint64_t i = *(void *)(i + 24))
          ;
        uint64_t v204 = *(llvm::MachineInstr **)(i + 8);
        __int16 v553 = *((_WORD *)v204 + 22);
        unint64_t v554 = (unint64_t)v204;
        if ((v553 & 4) != 0)
        {
          do
            unint64_t v554 = *(void *)v554 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v554 + 44) & 4) != 0);
        }
        long long v555 = v204;
        if ((v553 & 8) != 0)
        {
          do
            long long v555 = (llvm::MachineInstr *)*((void *)v555 + 1);
          while ((*((_WORD *)v555 + 22) & 8) != 0);
        }
        uint64_t v556 = *(void *)(*(void *)(a1 + 288) + 288);
        unint64_t v557 = *((void *)v555 + 1);
        if (v554 != v557)
        {
          do
          {
            unsigned int v558 = **(unsigned __int16 **)(v554 + 16);
            BOOL v43 = v558 > 0x17;
            int v559 = (1 << v558) & 0x83E000;
            if (v43 || v559 == 0) {
              goto LABEL_709;
            }
            unint64_t v554 = *(void *)(v554 + 8);
          }
          while (v554 != v557);
          unint64_t v554 = v557;
        }
LABEL_709:
        uint64_t v561 = *(void *)(v556 + 368);
        uint64_t v562 = *(unsigned int *)(v556 + 384);
        if (v562)
        {
          LODWORD(v563) = ((v554 >> 4) ^ (v554 >> 9)) & (v562 - 1);
          uint64_t v564 = (uint64_t *)(v561 + 16 * v563);
          uint64_t v565 = *v564;
          if (v554 != *v564)
          {
            int v566 = 1;
            do
            {
              if (v565 == -4096) {
                goto LABEL_722;
              }
              int v567 = v563 + v566++;
              uint64_t v563 = v567 & (v562 - 1);
              uint64_t v565 = *(void *)(v561 + 16 * v563);
            }
            while (v554 != v565);
            uint64_t v564 = (uint64_t *)(v561 + 16 * v563);
          }
        }
        else
        {
LABEL_722:
          uint64_t v564 = (uint64_t *)(v561 + 16 * v562);
        }
        uint64_t v569 = v564[1];
        __int16 v570 = *(_WORD *)(v430 + 44);
        unint64_t v571 = v430;
        if ((v570 & 4) != 0)
        {
          do
            unint64_t v571 = *(void *)v571 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v571 + 44) & 4) != 0);
        }
        if ((v570 & 8) != 0)
        {
          do
            unint64_t v430 = *(void *)(v430 + 8);
          while ((*(_WORD *)(v430 + 44) & 8) != 0);
        }
        unint64_t v572 = *(void *)(v430 + 8);
        if (v571 != v572)
        {
          do
          {
            unsigned int v573 = **(unsigned __int16 **)(v571 + 16);
            BOOL v43 = v573 > 0x17;
            int v574 = (1 << v573) & 0x83E000;
            if (v43 || v574 == 0) {
              goto LABEL_732;
            }
            unint64_t v571 = *(void *)(v571 + 8);
          }
          while (v571 != v572);
          unint64_t v571 = v572;
        }
LABEL_732:
        if (v562)
        {
          LODWORD(v576) = ((v571 >> 4) ^ (v571 >> 9)) & (v562 - 1);
          uint64_t v577 = (uint64_t *)(v561 + 16 * v576);
          uint64_t v578 = *v577;
          if (v571 != *v577)
          {
            int v579 = 1;
            do
            {
              if (v578 == -4096) {
                goto LABEL_738;
              }
              int v580 = v576 + v579++;
              uint64_t v576 = v580 & (v562 - 1);
              uint64_t v578 = *(void *)(v561 + 16 * v576);
            }
            while (v571 != v578);
            uint64_t v577 = (uint64_t *)(v561 + 16 * v576);
          }
        }
        else
        {
LABEL_738:
          uint64_t v577 = (uint64_t *)(v561 + 16 * v562);
        }
        unint64_t v581 = v569 & 0xFFFFFFFFFFFFFFF8 | 4;
        unint64_t v582 = v577[1] & 0xFFFFFFFFFFFFFFF8;
        char isConstantPhysReg = llvm::MachineRegisterInfo::isConstantPhysReg(v428, v196);
        uint64_t v584 = *(void **)(a1 + 288);
        if ((isConstantPhysReg & 1) == 0)
        {
          v585 = (void *)(v584[36] + 344);
          unint64_t v586 = v582;
          do
          {
            unint64_t v586 = *(void *)(v586 + 8);
            if ((void *)v586 == v585)
            {
              unint64_t v587 = *v585 & 0xFFFFFFFFFFFFFFF9;
              goto LABEL_746;
            }
          }
          while (!*(void *)(v586 + 16));
          unint64_t v587 = v586 & 0xFFFFFFFFFFFFFFF9 | 4;
          if (v587 == v581) {
            goto LABEL_757;
          }
          do
          {
LABEL_746:
            if (v587 < 8) {
              uint64_t v588 = 0;
            }
            else {
              uint64_t v588 = *(void *)((v587 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            if (llvm::MachineInstr::findRegisterUseOperandIdx(v588, v196, 0, *(void *)(a1 + 272)) != -1) {
              goto LABEL_410;
            }
            unint64_t v589 = v587 & 0xFFFFFFFFFFFFFFF8;
            while (1)
            {
              unint64_t v589 = *(void *)(v589 + 8);
              if ((void *)v589 == v585) {
                break;
              }
              if (*(void *)(v589 + 16))
              {
                unint64_t v587 = v589 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v587 >> 1) & 3));
                goto LABEL_755;
              }
            }
            unint64_t v587 = *v585 & 0xFFFFFFFFFFFFFFF9;
LABEL_755:
            ;
          }
          while (v587 != v581);
          uint64_t v584 = *(void **)(a1 + 288);
        }
LABEL_757:
        uint64_t v1300 = v582 | 4;
        llvm::LiveIntervals::removePhysRegDefAt(v584, v196, v581);
        uint64_t v590 = *(void *)(a1 + 272);
        if (v590) {
          v591 = (void *)(v590 + 8);
        }
        else {
          v591 = 0;
        }
        unint64_t v592 = *(unsigned int *)(*v591 + 24 * v196 + 16);
        uint64_t v593 = (_WORD *)(v591[6] + ((v592 >> 3) & 0x1FFFFFFE));
        __int16 v595 = *v593;
        uint64_t v594 = v593 + 1;
        unsigned __int16 v596 = v595 + (v592 & 0xF) * v196;
        do
        {
          uint64_t v597 = *(void *)(a1 + 288);
          unsigned __int16 v598 = v596;
          uint64_t v599 = *(void *)(*(void *)(v597 + 680) + 8 * v596);
          if (!v599) {
            operator new();
          }
          uint64_t v600 = v597 + 312;
          if (*(void *)(v599 + 96))
          {
            v1340 = *(void **)(*(void *)(v597 + 680) + 8 * v596);
            sub_1CC2F6AE4((uint64_t *)&v1340, v1300, v600, 0);
          }
          else
          {
            v1340 = *(void **)(*(void *)(v597 + 680) + 8 * v596);
            sub_1CC2F6F18((unint64_t **)&v1340, v1300, v600, 0);
          }
          int v601 = *v594++;
          unsigned __int16 v596 = v601 + v598;
        }
        while (v601);
LABEL_221:
        sub_1CC43B958(a1, v204);
        uint64_t v205 = *(void *)(a1 + 264);
        if ((v1317[0] & 0x8000000000000000) != 0) {
          unint64_t v206 = (unsigned int **)(*(void *)(v205 + 24) + 16 * (HIDWORD(v1317[0]) & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v206 = (unsigned int **)(*(void *)(v205 + 272) + 8 * HIDWORD(v1317[0]));
        }
        for (uint64_t j = *v206; j; uint64_t j = (unsigned int *)*((void *)j + 3))
        {
          unsigned int v208 = *j;
          if ((*j & 0x1000000) == 0)
          {
            while (1)
            {
              unsigned int *j = v208 & 0xFBFFFFFF;
              do
              {
                uint64_t j = (unsigned int *)*((void *)j + 3);
                if (!j) {
                  goto LABEL_188;
                }
                unsigned int v208 = *j;
              }
              while ((*j & 0x1000000) != 0);
            }
          }
        }
LABEL_188:
        uint64_t v174 = (unsigned __int16 ***)v1318;
        if (BYTE1(v1317[2])) {
          *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v1317[0] & 0x7FFFFFFF)) = v1318 & 0xFFFFFFFFFFFFFFFBLL;
        }
        unint64_t v7 = v1311;
        if (v174)
        {
          unsigned int v175 = *((unsigned __int16 *)*v174 + 12);
          uint64_t v176 = *(void *)(a1 + 312);
          if (*(_DWORD *)(a1 + 320) != *(_DWORD *)(v176 + 24 * *((unsigned __int16 *)*v174 + 12))) {
            llvm::RegisterClassInfo::compute(v1308, v174);
          }
          if (*(unsigned char *)(v176 + 24 * v175 + 8))
          {
            unint64_t v177 = *(unsigned int *)(a1 + 1008);
            if (v177 >= *(unsigned int *)(a1 + 1012)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)(a1 + 1000) + 4 * v177) = v1317[0];
            ++*(_DWORD *)(a1 + 1008);
          }
        }
        uint64_t v178 = *(void *)(a1 + 832);
        uint64_t v179 = *(void *)(a1 + 824);
        if (v178 == v179)
        {
          uint64_t v180 = *v1311;
          uint64_t v181 = (void *)(v178 + 8 * v180);
          if (v180)
          {
            uint64_t v182 = 0;
            uint64_t v183 = 8 * v180;
            while (*(void *)(v178 + v182) != v9)
            {
              v182 += 8;
              if (v183 == v182) {
                goto LABEL_380;
              }
            }
            uint64_t v181 = (void *)(v178 + v182);
          }
LABEL_380:
          uint64_t v179 = *(void *)(a1 + 832);
        }
        else
        {
          uint64_t v209 = *v1313;
          int v210 = v209 - 1;
          unsigned int v211 = (v209 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          uint64_t v181 = (void *)(v178 + 8 * v211);
          uint64_t v212 = *v181;
          if (*v181 == -1)
          {
            uint64_t v213 = 0;
LABEL_398:
            if (v213) {
              uint64_t v181 = v213;
            }
            if (*v181 != v9) {
              uint64_t v181 = (void *)(v178 + 8 * v209);
            }
          }
          else
          {
            uint64_t v213 = 0;
            int v214 = 1;
            while (v212 != v9)
            {
              if (v213) {
                BOOL v215 = 0;
              }
              else {
                BOOL v215 = v212 == -2;
              }
              if (v215) {
                uint64_t v213 = v181;
              }
              unsigned int v216 = v211 + v214++;
              unsigned int v211 = v216 & v210;
              uint64_t v181 = (void *)(v178 + 8 * (v216 & v210));
              uint64_t v212 = *v181;
              if (*v181 == -1) {
                goto LABEL_398;
              }
            }
          }
        }
        if (v178 == v179) {
          unint64_t v315 = v1311;
        }
        else {
          unint64_t v315 = v1313;
        }
        if (v181 != (void *)(v178 + 8 * *v315))
        {
          void *v181 = -2;
          ++*(_DWORD *)(a1 + 848);
        }
        if (LODWORD(v1317[1])) {
          sub_1CC43DA08(a1, v1317[0], v1317[0], LODWORD(v1317[1]));
        }
        sub_1CC43DA08(a1, HIDWORD(v1317[0]), v1317[0], HIDWORD(v1317[1]));
        if (*(void *)(a1 + 648))
        {
          uint64_t v316 = *(void *)(a1 + 288);
          unint64_t v317 = v1317[0] & 0x7FFFFFFF;
          uint64_t v318 = (void *)(v316 + 408);
          unint64_t v319 = *(unsigned int *)(v316 + 416);
          BOOL v73 = v317 >= v319;
          unint64_t v320 = v317 - v319;
          if (v73)
          {
            sub_1CB9153B8((uint64_t)v318, v320 + 1, *(void *)(v316 + 424));
          }
          else
          {
            uint64_t v321 = *(void *)(*v318 + 8 * v317);
            if (v321)
            {
              unint64_t v323 = (uint64_t *)(v321 + 104);
              uint64_t v322 = *(void *)(v321 + 104);
              if (v322)
              {
                do
                {
                  if ((*(void *)(v322 + 112) & *v1309) != 0) {
                    llvm::LiveIntervals::shrinkToUses(*(void **)(a1 + 288), v322, *(_DWORD *)(v321 + 112));
                  }
                  uint64_t v322 = *(void *)(v322 + 104);
                }
                while (v322);
                uint64_t v324 = *v323;
                if (*v323)
                {
                  while (1)
                  {
                    uint64_t v617 = v324;
                    if (!*(_DWORD *)(v324 + 8)) {
                      break;
                    }
LABEL_798:
                    unint64_t v323 = (uint64_t *)(v324 + 104);
                    uint64_t v324 = *(void *)(v324 + 104);
                    if (!v324) {
                      goto LABEL_799;
                    }
                  }
                  while (1)
                  {
                    uint64_t v615 = *(void *)(v617 + 96);
                    uint64_t v324 = *(void *)(v617 + 104);
                    *(void *)(v617 + 96) = 0;
                    if (v615)
                    {
                      sub_1CB833A08(v615, *(void **)(v615 + 8));
                      MEMORY[0x1D25D9CE0](v615, 0x1020C4062D53EE8);
                    }
                    v616 = *(void **)(v617 + 64);
                    if (v616 != (void *)(v617 + 80)) {
                      free(v616);
                    }
                    if (*(void *)v617 == v617 + 16)
                    {
                      if (!v324)
                      {
LABEL_802:
                        uint64_t *v323 = 0;
                        goto LABEL_799;
                      }
                    }
                    else
                    {
                      free(*(void **)v617);
                      if (!v324) {
                        goto LABEL_802;
                      }
                    }
                    uint64_t v617 = v324;
                    if (*(_DWORD *)(v324 + 8))
                    {
                      uint64_t *v323 = v324;
                      goto LABEL_798;
                    }
                  }
                }
              }
              goto LABEL_799;
            }
          }
          llvm::LiveIntervals::createInterval();
        }
LABEL_799:
        unsigned int v618 = HIDWORD(v1317[0]);
        int v619 = *(_DWORD *)(a1 + 1064);
        if (v619)
        {
          uint64_t v620 = *(void *)(a1 + 1048);
          int v621 = v619 - 1;
          unsigned int v622 = v621 & (37 * HIDWORD(v1317[0]));
          int v623 = *(_DWORD *)(v620 + 4 * v622);
          if (HIDWORD(v1317[0]) == v623)
          {
LABEL_801:
            *(unsigned char *)(a1 + 656) = 1;
            goto LABEL_808;
          }
          int v624 = 1;
          while (v623 != -1)
          {
            unsigned int v625 = v622 + v624++;
            unsigned int v622 = v625 & v621;
            int v623 = *(_DWORD *)(v620 + 4 * v622);
            if (HIDWORD(v1317[0]) == v623) {
              goto LABEL_801;
            }
          }
        }
        if (*(unsigned char *)(a1 + 656))
        {
LABEL_808:
          uint64_t v626 = *(void *)(a1 + 288);
          unint64_t v627 = v1317[0] & 0x7FFFFFFF;
          uint64_t v628 = (void *)(v626 + 408);
          unint64_t v629 = *(unsigned int *)(v626 + 416);
          BOOL v73 = v627 >= v629;
          unint64_t v630 = v627 - v629;
          if (v73)
          {
            sub_1CB9153B8((uint64_t)v628, v630 + 1, *(void *)(v626 + 424));
          }
          else
          {
            unint64_t v631 = *(const llvm::LiveRange **)(*v628 + 8 * v627);
            if (v631)
            {
              sub_1CC43B764(a1, v631, 0);
              unsigned int v618 = HIDWORD(v1317[0]);
              goto LABEL_811;
            }
          }
          llvm::LiveIntervals::createInterval();
        }
LABEL_811:
        uint64_t v632 = *(void *)(a1 + 288);
        uint64_t v633 = v618 & 0x7FFFFFFF;
        uint64_t v634 = *(void *)(v632 + 408);
        uint64_t v635 = *(void *)(v634 + 8 * v633);
        if (v635)
        {
          uint64_t v636 = *(void *)(v635 + 104);
          if (v636)
          {
            do
            {
              uint64_t v639 = *(void *)(v636 + 96);
              uint64_t v640 = *(void *)(v636 + 104);
              *(void *)(v636 + 96) = 0;
              if (v639)
              {
                sub_1CB833A08(v639, *(void **)(v639 + 8));
                MEMORY[0x1D25D9CE0](v639, 0x1020C4062D53EE8);
              }
              uint64_t v641 = *(void **)(v636 + 64);
              if (v641 != (void *)(v636 + 80)) {
                free(v641);
              }
              if (*(void *)v636 != v636 + 16) {
                free(*(void **)v636);
              }
              uint64_t v636 = v640;
            }
            while (v640);
          }
          uint64_t v637 = *(void *)(v635 + 96);
          *(void *)(v635 + 96) = 0;
          *(void *)(v635 + 104) = 0;
          if (v637)
          {
            sub_1CB833A08(v637, *(void **)(v637 + 8));
            MEMORY[0x1D25D9CE0](v637, 0x1020C4062D53EE8);
          }
          unint64_t v638 = *(void **)(v635 + 64);
          uint64_t v8 = v1313;
          if (v638 != (void *)(v635 + 80)) {
            free(v638);
          }
          int v5 = v1315;
          if (*(void *)v635 != v635 + 16) {
            free(*(void **)v635);
          }
          MEMORY[0x1D25D9CE0](v635, 0x10A0C408DA535C6);
          uint64_t v634 = *(void *)(v632 + 408);
          unsigned int v618 = HIDWORD(v1317[0]);
        }
        else
        {
          int v5 = v1315;
          uint64_t v8 = v1313;
        }
        *(void *)(v634 + 8 * v633) = 0;
        (*(void (**)(void, void, void, void))(**(void **)(a1 + 272) + 352))(*(void *)(a1 + 272), v618, LODWORD(v1317[0]), *(void *)(a1 + 256));
        int v26 = 1;
        uint64_t v6 = v1312;
LABEL_1677:
        v5 |= v26;
        goto LABEL_1678;
      }
    }
LABEL_410:
    LOBYTE(v1sub_1CC3F44F0((uint64_t)this + 320) = 0;
    if (sub_1CC43BB90(a1, (uint64_t)&v1316, v9, &v1320)) {
      goto LABEL_411;
    }
    if (LOBYTE(v1317[2]) || !v1318) {
      goto LABEL_1047;
    }
    uint64_t v327 = *(void *)(a1 + 288);
    if (BYTE2(v1317[2])) {
      int v328 = v1317[0];
    }
    else {
      int v328 = HIDWORD(v1317[0]);
    }
    uint64_t v329 = (void *)(v327 + 408);
    unint64_t v330 = *(unsigned int *)(v327 + 416);
    if ((v328 & 0x7FFFFFFFu) >= v330)
    {
      sub_1CB9153B8((uint64_t)v329, (v328 & 0x7FFFFFFF) - v330 + 1, *(void *)(v327 + 424));
LABEL_1461:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v331 = *(int **)(*v329 + 8 * (v328 & 0x7FFFFFFF));
    if (!v331) {
      goto LABEL_1461;
    }
    if (BYTE2(v1317[2])) {
      int v332 = HIDWORD(v1317[0]);
    }
    else {
      int v332 = v1317[0];
    }
    uint64_t v333 = (void *)(v327 + 408);
    if ((v332 & 0x7FFFFFFFu) >= v330)
    {
      sub_1CB9153B8((uint64_t)v333, (v332 & 0x7FFFFFFF) - v330 + 1, *(void *)(v327 + 424));
LABEL_1463:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v334 = *(void *)(*v333 + 8 * (v332 & 0x7FFFFFFF));
    if (!v334) {
      goto LABEL_1463;
    }
    uint64_t v335 = *(void *)(v327 + 288);
    __int16 v336 = *(_WORD *)(v9 + 44);
    unint64_t v337 = v9;
    if ((v336 & 4) != 0)
    {
      do
        unint64_t v337 = *(void *)v337 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v337 + 44) & 4) != 0);
    }
    uint64_t v338 = v9;
    if ((v336 & 8) != 0)
    {
      do
        uint64_t v338 = *(void *)(v338 + 8);
      while ((*(_WORD *)(v338 + 44) & 8) != 0);
    }
    unint64_t v339 = *(void *)(v338 + 8);
    if (v337 != v339)
    {
      while (1)
      {
        unsigned int v340 = **(unsigned __int16 **)(v337 + 16);
        BOOL v43 = v340 > 0x17;
        int v341 = (1 << v340) & 0x83E000;
        if (v43 || v341 == 0) {
          break;
        }
        unint64_t v337 = *(void *)(v337 + 8);
        if (v337 == v339)
        {
          unint64_t v337 = v339;
          break;
        }
      }
    }
    uint64_t v343 = *(void *)(v335 + 368);
    uint64_t v344 = *(unsigned int *)(v335 + 384);
    if (v344)
    {
      LODWORD(v345) = ((v337 >> 4) ^ (v337 >> 9)) & (v344 - 1);
      uint64_t v346 = (uint64_t *)(v343 + 16 * v345);
      uint64_t v347 = *v346;
      if (v337 == *v346) {
        goto LABEL_441;
      }
      int v348 = 1;
      while (v347 != -4096)
      {
        int v349 = v345 + v348++;
        uint64_t v345 = v349 & (v344 - 1);
        uint64_t v347 = *(void *)(v343 + 16 * v345);
        if (v337 == v347)
        {
          uint64_t v346 = (uint64_t *)(v343 + 16 * v345);
          goto LABEL_441;
        }
      }
    }
    uint64_t v346 = (uint64_t *)(v343 + 16 * v344);
LABEL_441:
    unint64_t v350 = v346[1] & 0xFFFFFFFFFFFFFFF8;
    unsigned int v351 = *(_DWORD *)(v334 + 8);
    uint64_t v352 = *(uint64_t **)v334;
    if (!v351)
    {
      unsigned int v351 = 0;
LABEL_498:
      uint64_t v356 = &v352[3 * v351];
      goto LABEL_499;
    }
    uint64_t v353 = v352[3 * v351 - 2];
    unsigned int v354 = *(_DWORD *)(v350 + 24) | 2;
    unsigned int v355 = (v353 >> 1) & 3 | *(_DWORD *)((v353 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v356 = *(uint64_t **)v334;
    unint64_t v357 = *(unsigned int *)(v334 + 8);
    if (v354 >= v355) {
      goto LABEL_498;
    }
    do
    {
      unint64_t v358 = v357 >> 1;
      uint64_t v359 = v356[3 * (v357 >> 1) + 1];
      LODWORD(v359) = (v359 >> 1) & 3 | *(_DWORD *)((v359 & 0xFFFFFFFFFFFFFFF8) + 24);
      v357 -= (v357 >> 1) + 1;
      BOOL v360 = v354 >= v359;
      if (v354 >= v359) {
        unint64_t v361 = v358 + 1;
      }
      else {
        unint64_t v361 = 0;
      }
      v356 += 3 * v361;
      if (!v360) {
        unint64_t v357 = v358;
      }
    }
    while (v357);
LABEL_499:
    if (v356 == &v352[3 * v351]) {
      goto LABEL_870;
    }
    int v398 = *(_DWORD *)(v350 + 24);
    if (((*v356 >> 1) & 3 | *(_DWORD *)((*v356 & 0xFFFFFFFFFFFFFFF8) + 24)) > (v398 | 2u)) {
      goto LABEL_870;
    }
    uint64_t v399 = v356[2];
    if (*(void *)(v399 + 8) != (v350 | 4)) {
      goto LABEL_870;
    }
    unsigned int v400 = v331[2];
    uint64_t v401 = *(void **)v331;
    if (!v400)
    {
      unsigned int v400 = 0;
LABEL_684:
      unsigned int v405 = &v401[3 * v400];
      goto LABEL_685;
    }
    uint64_t v402 = v401[3 * v400 - 2];
    unsigned int v403 = v398 | 1;
    unsigned int v404 = (v402 >> 1) & 3 | *(_DWORD *)((v402 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v405 = *(void **)v331;
    unint64_t v406 = v331[2];
    if ((v398 | 1u) >= v404) {
      goto LABEL_684;
    }
    do
    {
      unint64_t v407 = v406 >> 1;
      uint64_t v408 = v405[3 * (v406 >> 1) + 1];
      LODWORD(v408) = (v408 >> 1) & 3 | *(_DWORD *)((v408 & 0xFFFFFFFFFFFFFFF8) + 24);
      v406 -= (v406 >> 1) + 1;
      BOOL v409 = v403 >= v408;
      if (v403 >= v408) {
        unint64_t v410 = v407 + 1;
      }
      else {
        unint64_t v410 = 0;
      }
      v405 += 3 * v410;
      if (!v409) {
        unint64_t v406 = v407;
      }
    }
    while (v406);
LABEL_685:
    if (v405 != &v401[3 * v400]
      && ((*v405 >> 1) & 3 | *(_DWORD *)((*v405 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (v398 | 1u))
    {
      uint64_t v1280 = v350 | 4;
      unint64_t v1290 = v350;
      uint64_t v1299 = v405[2];
      unint64_t v543 = *(void *)(v1299 + 8);
      uint64_t v544 = v331;
      uint64_t v545 = v543 < 8 ? 0 : *(void *)((v543 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (llvm::CoalescerPair::isCoalescable((llvm::CoalescerPair *)&v1316, (const llvm::MachineInstr *)v545))
      {
        if (**(_WORD **)(v545 + 16) == 19)
        {
          int v546 = *(_DWORD **)(v545 + 32);
          if ((*v546 & 0xFFF00) == 0 && (v546[8] & 0xFFF00) == 0)
          {
            uint64_t v547 = v544;
            uint64_t v548 = *(void *)(v1299 + 8);
            unsigned int v549 = (v548 >> 1) & 3;
            unint64_t v550 = v548 & 0xFFFFFFFFFFFFFFF8;
            if (v549) {
              uint64_t v551 = v550 | (2 * (v549 - 1));
            }
            else {
              uint64_t v551 = *(void *)v550 | 6;
            }
            unsigned int v602 = *(_DWORD *)(v334 + 8);
            unsigned int v603 = *(uint64_t **)v334;
            if (v602)
            {
              uint64_t v604 = v603[3 * v602 - 2];
              unsigned int v605 = *(_DWORD *)((v551 & 0xFFFFFFFFFFFFFFF8) + 24) | (v551 >> 1) & 3;
              unsigned int v606 = (v604 >> 1) & 3 | *(_DWORD *)((v604 & 0xFFFFFFFFFFFFFFF8) + 24);
              unint64_t v607 = *(uint64_t **)v334;
              unint64_t v608 = *(unsigned int *)(v334 + 8);
              if (v605 < v606)
              {
                do
                {
                  unint64_t v609 = v608 >> 1;
                  uint64_t v610 = v607[3 * (v608 >> 1) + 1];
                  LODWORD(v610) = (v610 >> 1) & 3 | *(_DWORD *)((v610 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v608 -= (v608 >> 1) + 1;
                  BOOL v611 = v605 >= v610;
                  if (v605 >= v610) {
                    unint64_t v612 = v609 + 1;
                  }
                  else {
                    unint64_t v612 = 0;
                  }
                  v607 += 3 * v612;
                  if (!v611) {
                    unint64_t v608 = v609;
                  }
                }
                while (v608);
                goto LABEL_859;
              }
            }
            else
            {
              unsigned int v602 = 0;
            }
            unint64_t v607 = &v603[3 * v602];
LABEL_859:
            if (v607 == &v603[3 * v602]
              || ((*v607 >> 1) & 3 | *(_DWORD *)((*v607 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v551 & 0xFFFFFFFFFFFFFFF8) + 24) | (v551 >> 1) & 3))
            {
              goto LABEL_870;
            }
            unint64_t v646 = v607[1];
            unsigned int v647 = (v646 >> 1) & 3;
            unint64_t v648 = v646 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1274 = v646 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v649 = v647 ? v648 | (2 * (v647 - 1)) : *(void *)v648 | 6;
            if (v649 < 8) {
              goto LABEL_870;
            }
            uint64_t v650 = *(void *)((v649 & 0xFFFFFFFFFFFFFFF8) + 16);
            if (!v650) {
              goto LABEL_870;
            }
            if (*(void *)(v650 + 24) != *(void *)(v9 + 24) || v607 + 3 != v356) {
              goto LABEL_870;
            }
            uint64_t v1262 = *(void *)((v649 & 0xFFFFFFFFFFFFFFF8) + 16);
            v1265 = v547;
            unsigned int v1273 = (v646 >> 1) & 3;
            uint64_t v934 = *v356;
            *(void *)(v399 + 8) = v646;
            v1333 = (void *)v646;
            *(void *)v1268 = v934;
            uint64_t v1334 = v934;
            v1335[0] = v399;
            llvm::LiveRange::addSegment(v334, (uint64_t)&v1333);
            uint64_t v935 = v607[2];
            if (v399 != v935) {
              llvm::LiveRange::MergeValueNumberInto(v334, v399, v935);
            }
            uint64_t v936 = *(void *)(v334 + 104);
            unint64_t v937 = v1290;
            if (v936)
            {
              while (1)
              {
                unsigned int v938 = *(_DWORD *)(v936 + 8);
                uint64_t v939 = *(void *)v936;
                if (!v938) {
                  break;
                }
                uint64_t v940 = *(void *)(v939 + 24 * v938 - 16);
                unsigned int v941 = *(_DWORD *)(v937 + 24) | 2;
                unsigned int v942 = (v940 >> 1) & 3 | *(_DWORD *)((v940 & 0xFFFFFFFFFFFFFFF8) + 24);
                v943 = *(char **)v936;
                unint64_t v944 = *(unsigned int *)(v936 + 8);
                if (v941 >= v942)
                {
                  unint64_t v949 = *(unsigned int *)(v936 + 8);
LABEL_1266:
                  v943 = (char *)(v939 + 24 * v949);
                  goto LABEL_1267;
                }
                do
                {
                  unint64_t v945 = v944 >> 1;
                  uint64_t v946 = *(void *)&v943[24 * (v944 >> 1) + 8];
                  LODWORD(v946) = (v946 >> 1) & 3 | *(_DWORD *)((v946 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v944 -= (v944 >> 1) + 1;
                  BOOL v947 = v941 >= v946;
                  if (v941 >= v946) {
                    unint64_t v948 = v945 + 1;
                  }
                  else {
                    unint64_t v948 = 0;
                  }
                  v943 += 24 * v948;
                  if (!v947) {
                    unint64_t v944 = v945;
                  }
                }
                while (v944);
                unint64_t v949 = *(unsigned int *)(v936 + 8);
LABEL_1267:
                v950 = (char *)(v939 + 24 * v949);
                if (v943 != v950)
                {
                  uint64_t v951 = *(void *)v943;
                  unint64_t v952 = *(void *)v943 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v953 = (*(void *)v943 >> 1) & 3 | *(_DWORD *)(v952 + 24);
                  if (v953 <= (*(_DWORD *)(v937 + 24) | 2u))
                  {
                    unint64_t v954 = *((void *)v943 + 1);
                    if (v952 == (v954 & 0xFFFFFFFFFFFFFFF8))
                    {
                      if (v938)
                      {
                        v975 = (void *)(v939 + 24 * v949);
                        if (v953 < ((*((void *)v950 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v950 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 24)))
                        {
                          v975 = *(void **)v936;
                          do
                          {
                            unint64_t v976 = v949 >> 1;
                            uint64_t v977 = v975[3 * (v949 >> 1) + 1];
                            LODWORD(v977) = (v977 >> 1) & 3 | *(_DWORD *)((v977 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v949 -= (v949 >> 1) + 1;
                            BOOL v978 = v953 >= v977;
                            if (v953 >= v977) {
                              unint64_t v979 = v976 + 1;
                            }
                            else {
                              unint64_t v979 = 0;
                            }
                            v975 += 3 * v979;
                            if (!v978) {
                              unint64_t v949 = v976;
                            }
                          }
                          while (v949);
                        }
                      }
                      else
                      {
                        v975 = (void *)(v939 + 24 * v949);
                      }
                      v980 = (void *)v975[1];
                      uint64_t v981 = v975[2];
                      if (*v975 == v951)
                      {
                        if (v980 == (void *)v954)
                        {
                          if (v950 != (char *)(v975 + 3))
                          {
                            memmove(v975, v975 + 3, v950 - (char *)(v975 + 3));
                            unsigned int v938 = *(_DWORD *)(v936 + 8);
                          }
                          *(_DWORD *)(v936 + 8) = v938 - 1;
                          llvm::LiveRange::removeValNoIfDead(v936, v981);
                        }
                        else
                        {
                          void *v975 = v954;
                        }
                        unint64_t v937 = v1290;
                      }
                      else
                      {
                        v975[1] = v951;
                        unint64_t v937 = v1290;
                        if (v980 != (void *)v954)
                        {
                          v1340 = (void *)v954;
                          uint64_t v1341 = (uint64_t)v980;
                          uint64_t v1342 = v981;
                          sub_1CC2FC960((uint64_t *)v936, (unint64_t)(v975 + 3), (unint64_t)&v1340);
                        }
                      }
                      goto LABEL_1335;
                    }
                  }
                }
                if (!v938) {
                  goto LABEL_1282;
                }
                unsigned int v955 = *(_DWORD *)(v1274 + 24) | v1273;
                if (v955 >= ((*((void *)v950 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v950 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24)))
                  goto LABEL_1282;
                v956 = *(char **)v936;
                do
                {
                  v957 = v956;
                  unint64_t v958 = v949 >> 1;
                  uint64_t v959 = *(void *)&v956[24 * (v949 >> 1) + 8];
                  LODWORD(v959) = (v959 >> 1) & 3 | *(_DWORD *)((v959 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v949 -= (v949 >> 1) + 1;
                  BOOL v960 = v955 >= v959;
                  if (v955 >= v959) {
                    unint64_t v961 = v958 + 1;
                  }
                  else {
                    unint64_t v961 = 0;
                  }
                  v956 += 24 * v961;
                  if (!v960) {
                    unint64_t v949 = v958;
                  }
                }
                while (v949);
                if (v956 == v950
                  || ((*(void *)v956 >> 1) & 3 | *(_DWORD *)((*(void *)v956 & 0xFFFFFFFFFFFFFFF8)
                                                                           + 24)) > (*(_DWORD *)(v1274 + 24) | v1273)
                  || !*(void *)&v957[24 * v961 + 16])
                {
LABEL_1282:
                  uint64_t v962 = *(void *)(*(void *)(a1 + 288) + 288);
                  if (v646 >= 8 && (uint64_t v963 = *(void *)(v1274 + 16)) != 0)
                  {
                    v964 = (void *)(v963 + 24);
                  }
                  else
                  {
                    uint64_t v999 = *(unsigned int *)(v962 + 544);
                    if (v999)
                    {
                      unsigned int v1000 = *(_DWORD *)(v1274 + 24) | v1273;
                      v1001 = *(void **)(v962 + 536);
                      unint64_t v1002 = *(unsigned int *)(v962 + 544);
                      do
                      {
                        unint64_t v1003 = v1002 >> 1;
                        v1004 = &v1001[2 * (v1002 >> 1)];
                        uint64_t v1006 = *v1004;
                        v1005 = v1004 + 2;
                        v1002 += ~(v1002 >> 1);
                        if (((v1006 >> 1) & 3 | *(_DWORD *)((v1006 & 0xFFFFFFFFFFFFFFF8) + 24)) < v1000) {
                          v1001 = v1005;
                        }
                        else {
                          unint64_t v1002 = v1003;
                        }
                      }
                      while (v1002);
                      if (v1001 == (void *)(*(void *)(v962 + 536) + 16 * v999)
                        || ((*v1001 >> 1) & 3 | *(_DWORD *)((*v1001 & 0xFFFFFFFFFFFFFFF8) + 24)) > v1000)
                      {
                        v1001 -= 2;
                      }
                    }
                    else
                    {
                      v1001 = *(void **)(v962 + 536);
                    }
                    v964 = v1001 + 1;
                    unint64_t v937 = v1290;
                  }
                  llvm::LiveRange::extendInBlock(v936, *(void *)(*(void *)(v962 + 392) + 16 * *(unsigned int *)(*v964 + 24)), v646);
                  unsigned int v938 = *(_DWORD *)(v936 + 8);
                  uint64_t v939 = *(void *)v936;
                }
                if (!v938)
                {
                  LODWORD(v965) = 0;
LABEL_1310:
                  v969 = (void *)(v939 + 24 * v965);
                  goto LABEL_1311;
                }
                unint64_t v965 = v938;
                uint64_t v966 = *(void *)(v939 + 24 * v938 - 16);
                unsigned int v967 = *(_DWORD *)(v937 + 24) | 2;
                unsigned int v968 = (v966 >> 1) & 3 | *(_DWORD *)((v966 & 0xFFFFFFFFFFFFFFF8) + 24);
                v969 = (void *)v939;
                unint64_t v970 = v965;
                if (v967 >= v968) {
                  goto LABEL_1310;
                }
                do
                {
                  unint64_t v971 = v970 >> 1;
                  uint64_t v972 = v969[3 * (v970 >> 1) + 1];
                  LODWORD(v972) = (v972 >> 1) & 3 | *(_DWORD *)((v972 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v970 -= (v970 >> 1) + 1;
                  BOOL v973 = v967 >= v972;
                  if (v967 >= v972) {
                    unint64_t v974 = v971 + 1;
                  }
                  else {
                    unint64_t v974 = 0;
                  }
                  v969 += 3 * v974;
                  if (!v973) {
                    unint64_t v970 = v971;
                  }
                }
                while (v970);
LABEL_1311:
                if (v969 == (void *)(v939 + 24 * v965)
                  || ((*v969 >> 1) & 3 | *(_DWORD *)((*v969 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v937 + 24) | 2u))
                {
                  uint64_t v982 = 0;
                }
                else
                {
                  uint64_t v982 = v969[2];
                }
                v1349 = (void *)v646;
                uint64_t v1350 = *(void *)v1268;
                v1351[0] = v982;
                llvm::LiveRange::addSegment(v936, (uint64_t)&v1349);
                uint64_t v983 = *(void *)(v1299 + 8);
                unsigned int v984 = (v983 >> 1) & 3;
                unint64_t v985 = v983 & 0xFFFFFFFFFFFFFFF8;
                if (v984) {
                  uint64_t v986 = v985 | (2 * (v984 - 1));
                }
                else {
                  uint64_t v986 = *(void *)v985 | 6;
                }
                unsigned int v987 = *(_DWORD *)(v936 + 8);
                uint64_t v988 = *(void *)v936;
                if (v987)
                {
                  uint64_t v989 = *(void *)(v988 + 24 * v987 - 16);
                  unsigned int v990 = *(_DWORD *)((v986 & 0xFFFFFFFFFFFFFFF8) + 24) | (v986 >> 1) & 3;
                  unsigned int v991 = (v989 >> 1) & 3 | *(_DWORD *)((v989 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v992 = *(void **)v936;
                  unint64_t v993 = *(unsigned int *)(v936 + 8);
                  if (v990 < v991)
                  {
                    do
                    {
                      unint64_t v994 = v993 >> 1;
                      uint64_t v995 = v992[3 * (v993 >> 1) + 1];
                      LODWORD(v995) = (v995 >> 1) & 3 | *(_DWORD *)((v995 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v993 -= (v993 >> 1) + 1;
                      BOOL v996 = v990 >= v995;
                      if (v990 >= v995) {
                        unint64_t v997 = v994 + 1;
                      }
                      else {
                        unint64_t v997 = 0;
                      }
                      v992 += 3 * v997;
                      if (!v996) {
                        unint64_t v993 = v994;
                      }
                    }
                    while (v993);
                    goto LABEL_1329;
                  }
                }
                else
                {
                  unsigned int v987 = 0;
                }
                v992 = (void *)(v988 + 24 * v987);
LABEL_1329:
                if (v992 == (void *)(v988 + 24 * v987)
                  || ((*v992 >> 1) & 3 | *(_DWORD *)((*v992 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v986 & 0xFFFFFFFFFFFFFFF8) + 24) | (v986 >> 1) & 3))
                {
                  uint64_t v998 = 0;
                }
                else
                {
                  uint64_t v998 = v992[2];
                }
                if (v982 != v998) {
                  llvm::LiveRange::MergeValueNumberInto(v936, v982, v998);
                }
LABEL_1335:
                uint64_t v936 = *(void *)(v936 + 104);
                if (!v936) {
                  goto LABEL_1353;
                }
              }
              unint64_t v949 = 0;
              goto LABEL_1266;
            }
LABEL_1353:
            unsigned int RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(v1262, *(_DWORD *)(v334 + 112), 1, 0);
            if (RegisterUseOperandIdx != -1) {
              *(_DWORD *)(*(void *)(v1262 + 32) + 32 * RegisterUseOperandIdx) &= ~0x4000000u;
            }
            llvm::MachineInstr::substituteRegister(v9, v1265[28], *(_DWORD *)(v334 + 112), 0, *(void **)(a1 + 272));
            uint64_t v1008 = v1280;
            unint64_t v1009 = v1290;
            if (v405[1] == v1280)
            {
LABEL_1356:
              sub_1CC43B764(a1, (const llvm::LiveRange *)v1265, 0);
LABEL_1357:
              sub_1CC43B958(a1, (llvm::MachineInstr *)v9);
              goto LABEL_411;
            }
            v1059 = v1265;
            while (1)
            {
              v1059 = (int *)*((void *)v1059 + 13);
              if (!v1059) {
                goto LABEL_1357;
              }
              unsigned int v1060 = v1059[2];
              v1061 = *(void **)v1059;
              if (v1060)
              {
                uint64_t v1062 = v1061[3 * v1060 - 2];
                unsigned int v1063 = *(_DWORD *)(v1009 + 24) | 1;
                unsigned int v1064 = (v1062 >> 1) & 3 | *(_DWORD *)((v1062 & 0xFFFFFFFFFFFFFFF8) + 24);
                v1065 = *(void **)v1059;
                unint64_t v1066 = v1059[2];
                if (v1063 < v1064)
                {
                  do
                  {
                    unint64_t v1067 = v1066 >> 1;
                    uint64_t v1068 = v1065[3 * (v1066 >> 1) + 1];
                    LODWORD(v1068) = (v1068 >> 1) & 3 | *(_DWORD *)((v1068 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v1066 -= (v1066 >> 1) + 1;
                    BOOL v1069 = v1063 >= v1068;
                    if (v1063 >= v1068) {
                      unint64_t v1070 = v1067 + 1;
                    }
                    else {
                      unint64_t v1070 = 0;
                    }
                    v1065 += 3 * v1070;
                    if (!v1069) {
                      unint64_t v1066 = v1067;
                    }
                  }
                  while (v1066);
                  goto LABEL_1452;
                }
              }
              else
              {
                unsigned int v1060 = 0;
              }
              v1065 = &v1061[3 * v1060];
              uint64_t v1008 = v1280;
              unint64_t v1009 = v1290;
LABEL_1452:
              if (v1065 != &v1061[3 * v1060]
                && ((*v1065 >> 1) & 3 | *(_DWORD *)((*v1065 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v1009 + 24) | 1u)
                && v1065[1] == v1008)
              {
                goto LABEL_1356;
              }
            }
          }
        }
      }
    }
LABEL_870:
    uint64_t v652 = *(void *)(a1 + 288);
    if (BYTE2(v1317[2])) {
      int v653 = v1317[0];
    }
    else {
      int v653 = HIDWORD(v1317[0]);
    }
    v654 = (void *)(v652 + 408);
    unint64_t v655 = *(unsigned int *)(v652 + 416);
    if ((v653 & 0x7FFFFFFFu) >= v655)
    {
      sub_1CB9153B8((uint64_t)v654, (v653 & 0x7FFFFFFF) - v655 + 1, *(void *)(v652 + 424));
LABEL_1465:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v656 = *(void *)(*v654 + 8 * (v653 & 0x7FFFFFFF));
    if (!v656) {
      goto LABEL_1465;
    }
    if (BYTE2(v1317[2])) {
      int v657 = HIDWORD(v1317[0]);
    }
    else {
      int v657 = v1317[0];
    }
    v658 = (void *)(v652 + 408);
    if ((v657 & 0x7FFFFFFFu) >= v655)
    {
      sub_1CB9153B8((uint64_t)v658, (v657 & 0x7FFFFFFF) - v655 + 1, *(void *)(v652 + 424));
LABEL_1467:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v659 = *(void *)(*v658 + 8 * (v657 & 0x7FFFFFFF));
    if (!v659) {
      goto LABEL_1467;
    }
    uint64_t v660 = *(void *)(v652 + 288);
    __int16 v661 = *(_WORD *)(v9 + 44);
    unint64_t v662 = v9;
    if ((v661 & 4) != 0)
    {
      do
        unint64_t v662 = *(void *)v662 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v662 + 44) & 4) != 0);
    }
    uint64_t v663 = v9;
    if ((v661 & 8) != 0)
    {
      do
        uint64_t v663 = *(void *)(v663 + 8);
      while ((*(_WORD *)(v663 + 44) & 8) != 0);
    }
    unint64_t v664 = *(void *)(v663 + 8);
    if (v662 != v664)
    {
      while (1)
      {
        unsigned int v665 = **(unsigned __int16 **)(v662 + 16);
        BOOL v43 = v665 > 0x17;
        int v666 = (1 << v665) & 0x83E000;
        if (v43 || v666 == 0) {
          break;
        }
        unint64_t v662 = *(void *)(v662 + 8);
        if (v662 == v664)
        {
          unint64_t v662 = v664;
          break;
        }
      }
    }
    uint64_t v668 = *(void *)(v660 + 368);
    uint64_t v669 = *(unsigned int *)(v660 + 384);
    if (v669)
    {
      LODWORD(v670) = ((v662 >> 4) ^ (v662 >> 9)) & (v669 - 1);
      uint64_t v671 = (uint64_t *)(v668 + 16 * v670);
      uint64_t v672 = *v671;
      if (v662 == *v671) {
        goto LABEL_896;
      }
      int v673 = 1;
      while (v672 != -4096)
      {
        int v674 = v670 + v673++;
        uint64_t v670 = v674 & (v669 - 1);
        uint64_t v672 = *(void *)(v668 + 16 * v670);
        if (v662 == v672)
        {
          uint64_t v671 = (uint64_t *)(v668 + 16 * v670);
          goto LABEL_896;
        }
      }
    }
    uint64_t v671 = (uint64_t *)(v668 + 16 * v669);
LABEL_896:
    unint64_t v675 = v671[1] & 0xFFFFFFFFFFFFFFF8;
    unsigned int v676 = *(_DWORD *)(v659 + 8);
    uint64_t v677 = *(void **)v659;
    if (!v676)
    {
      unsigned int v676 = 0;
LABEL_906:
      uint64_t v681 = &v677[3 * v676];
      goto LABEL_907;
    }
    uint64_t v678 = v677[3 * v676 - 2];
    unsigned int v679 = *(_DWORD *)(v675 + 24) | 2;
    unsigned int v680 = (v678 >> 1) & 3 | *(_DWORD *)((v678 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v681 = *(void **)v659;
    unint64_t v682 = *(unsigned int *)(v659 + 8);
    if (v679 >= v680) {
      goto LABEL_906;
    }
    do
    {
      unint64_t v683 = v682 >> 1;
      uint64_t v684 = v681[3 * (v682 >> 1) + 1];
      LODWORD(v684) = (v684 >> 1) & 3 | *(_DWORD *)((v684 & 0xFFFFFFFFFFFFFFF8) + 24);
      v682 -= (v682 >> 1) + 1;
      BOOL v685 = v679 >= v684;
      if (v679 >= v684) {
        unint64_t v686 = v683 + 1;
      }
      else {
        unint64_t v686 = 0;
      }
      v681 += 3 * v686;
      if (!v685) {
        unint64_t v682 = v683;
      }
    }
    while (v682);
LABEL_907:
    if (v681 == &v677[3 * v676]
      || ((*v681 >> 1) & 3 | *(_DWORD *)((*v681 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v675 + 24) | 2u))
    {
      uint64_t v687 = 0;
    }
    else
    {
      uint64_t v687 = v681[2];
    }
    unsigned int v688 = *(_DWORD *)(v656 + 8);
    uint64_t v689 = *(void *)v656;
    if (!v688)
    {
      unsigned int v688 = 0;
LABEL_921:
      v693 = (void *)(v689 + 24 * v688);
      goto LABEL_922;
    }
    uint64_t v690 = *(void *)(v689 + 24 * v688 - 16);
    unsigned int v691 = *(_DWORD *)(v675 + 24) | 1;
    unsigned int v692 = (v690 >> 1) & 3 | *(_DWORD *)((v690 & 0xFFFFFFFFFFFFFFF8) + 24);
    v693 = *(void **)v656;
    unint64_t v694 = *(unsigned int *)(v656 + 8);
    if (v691 >= v692) {
      goto LABEL_921;
    }
    do
    {
      unint64_t v695 = v694 >> 1;
      uint64_t v696 = v693[3 * (v694 >> 1) + 1];
      LODWORD(v696) = (v696 >> 1) & 3 | *(_DWORD *)((v696 & 0xFFFFFFFFFFFFFFF8) + 24);
      v694 -= (v694 >> 1) + 1;
      BOOL v697 = v691 >= v696;
      if (v691 >= v696) {
        unint64_t v698 = v695 + 1;
      }
      else {
        unint64_t v698 = 0;
      }
      v693 += 3 * v698;
      if (!v697) {
        unint64_t v694 = v695;
      }
    }
    while (v694);
LABEL_922:
    if (v693 == (void *)(v689 + 24 * v688)
      || ((*v693 >> 1) & 3 | *(_DWORD *)((*v693 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v675 + 24) | 1u))
    {
      uint64_t v699 = 0;
    }
    else
    {
      uint64_t v699 = v693[2];
    }
    unint64_t v700 = *(void *)(v699 + 8);
    if (v700 < 8) {
      goto LABEL_1047;
    }
    if ((v700 & 6) == 0) {
      goto LABEL_1047;
    }
    uint64_t v701 = *(void *)((v700 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (!v701 || (*(unsigned char *)(*(void *)(v701 + 16) + 11) & 2) == 0) {
      goto LABEL_1047;
    }
    uint64_t RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v701, *(_DWORD *)(v656 + 112), 0, 0, 0);
    LODWORD(v1349) = 0;
    int v703 = *(_DWORD *)(*(void *)(v701 + 32) + 32 * RegisterDefOperandIdx);
    int v704 = v703 & 0x10000FF;
    int v705 = v703 & 0xF00000;
    if (v704 != 0x1000000 || v705 == 0) {
      goto LABEL_1047;
    }
    uint64_t v1302 = v687;
    LODWORD(v1349) = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v701, RegisterDefOperandIdx);
    LODWORD(v1330) = -1;
    if (!(*(unsigned int (**)(void, uint64_t, void **, void **))(**(void **)(a1 + 280) + 200))(*(void *)(a1 + 280), v701, &v1349, &v1330))goto LABEL_1047; {
    unsigned int v1291 = *(_DWORD *)(*(void *)(v701 + 32) + 32 * v1330 + 4);
    }
    if (v1291 != *(_DWORD *)(v659 + 112)) {
      goto LABEL_1047;
    }
    unint64_t v707 = *(void *)(v699 + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v708 = *(_DWORD *)(v659 + 8);
    unsigned int v709 = *(void **)v659;
    if (v708)
    {
      uint64_t v710 = v709[3 * v708 - 2];
      unsigned int v711 = *(_DWORD *)(v707 + 24);
      unsigned int v712 = (v710 >> 1) & 3 | *(_DWORD *)((v710 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v713 = *(void **)v659;
      unint64_t v714 = *(unsigned int *)(v659 + 8);
      if (v711 < v712)
      {
        do
        {
          unint64_t v715 = v714 >> 1;
          uint64_t v716 = v713[3 * (v714 >> 1) + 1];
          LODWORD(v716) = (v716 >> 1) & 3 | *(_DWORD *)((v716 & 0xFFFFFFFFFFFFFFF8) + 24);
          v714 -= (v714 >> 1) + 1;
          BOOL v717 = v711 >= v716;
          if (v711 >= v716) {
            unint64_t v718 = v715 + 1;
          }
          else {
            unint64_t v718 = 0;
          }
          v713 += 3 * v718;
          if (!v717) {
            unint64_t v714 = v715;
          }
        }
        while (v714);
        goto LABEL_947;
      }
    }
    else
    {
      unsigned int v708 = 0;
    }
    uint64_t v713 = &v709[3 * v708];
LABEL_947:
    if (v713 == &v709[3 * v708]
      || ((*v713 >> 1) & 3 | *(_DWORD *)((*v713 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v707 + 24)
      || v707 != (v713[1] & 0xFFFFFFFFFFFFFFF8)
      || (llvm::LiveIntervals::hasPHIKill(*(void *)(a1 + 288), v656, v699) & 1) != 0)
    {
      goto LABEL_1047;
    }
    int v719 = *(void **)v656;
    unint64_t v720 = *(unsigned int *)(v656 + 8);
    uint64_t v721 = *(void *)v656 + 24 * v720;
    if (v720)
    {
      uint64_t v722 = *(uint64_t **)v656;
      *(void *)v1266 = *(unsigned int *)(v656 + 8);
      uint64_t v1270 = *(void *)v656;
      uint64_t v1263 = *(void *)v656 + 24 * v720;
      do
      {
        if (v722[2] == v699)
        {
          v1275 = *(void **)v659;
          unsigned int v1281 = *(_DWORD *)(v659 + 8);
          uint64_t v1260 = *v722;
          v723 = sub_1CD56FB80(*(void **)v659, v1281, *v722);
          uint64_t v721 = v1263;
          unint64_t v720 = *(void *)v1266;
          int v719 = (void *)v1270;
          uint64_t v724 = v723 == v1275 ? 0 : -1;
          unint64_t v725 = &v1275[3 * v1281];
          if (&v723[3 * v724] != v725)
          {
            unsigned int v726 = (v722[1] >> 1) & 3 | *(_DWORD *)((v722[1] & 0xFFFFFFFFFFFFFFF8) + 24);
            int v727 = &v723[3 * v724 + 1];
            do
            {
              uint64_t v728 = v727 - 1;
              unsigned int v729 = (*(v727 - 1) >> 1) & 3 | *(_DWORD *)((*(v727 - 1) & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v726 < v729) {
                break;
              }
              if (v727[1] != v1302)
              {
                unsigned int v730 = *(_DWORD *)((v1260 & 0xFFFFFFFFFFFFFFF8) + 24) | (v1260 >> 1) & 3;
                if (v729 <= v730)
                {
                  if (((*v727 >> 1) & 3 | *(_DWORD *)((*v727 & 0xFFFFFFFFFFFFFFF8) + 24)) > v730) {
                    goto LABEL_1047;
                  }
                }
                else if (v729 < v726)
                {
                  goto LABEL_1047;
                }
              }
              v727 += 3;
            }
            while (v728 + 3 != v725);
          }
        }
        v722 += 3;
      }
      while (v722 != (uint64_t *)v721);
    }
    uint64_t v731 = *(void *)(a1 + 264);
    uint64_t v732 = *(unsigned int *)(v656 + 112);
    if ((v732 & 0x80000000) != 0) {
      uint64_t v733 = (uint64_t *)(*(void *)(v731 + 24) + 16 * (v732 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v733 = (uint64_t *)(*(void *)(v731 + 272) + 8 * v732);
    }
    uint64_t v734 = *v733;
    if (v734)
    {
      if ((*(unsigned char *)(v734 + 3) & 0x81) != 0)
      {
        while (1)
        {
          uint64_t v734 = *(void *)(v734 + 24);
          if (!v734) {
            break;
          }
          if ((*(_DWORD *)v734 & 0x81000000) == 0) {
            goto LABEL_975;
          }
        }
      }
      else
      {
LABEL_975:
        uint64_t v735 = *(void *)(*(void *)(a1 + 288) + 288);
        uint64_t v736 = *(void *)(v735 + 368);
        uint64_t v737 = *(unsigned int *)(v735 + 384);
        unsigned int v738 = v737 - 1;
LABEL_976:
        unint64_t v739 = *(void *)(v734 + 8);
        __int16 v740 = *(_WORD *)(v739 + 44);
        unint64_t v741 = v739;
        if ((v740 & 4) != 0)
        {
          do
            unint64_t v741 = *(void *)v741 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v741 + 44) & 4) != 0);
        }
        uint64_t v742 = *(void *)(v734 + 8);
        if ((v740 & 8) != 0)
        {
          do
            uint64_t v742 = *(void *)(v742 + 8);
          while ((*(_WORD *)(v742 + 44) & 8) != 0);
        }
        unint64_t v743 = *(void *)(v742 + 8);
        if (v741 != v743)
        {
          while (1)
          {
            unsigned int v744 = **(unsigned __int16 **)(v741 + 16);
            BOOL v43 = v744 > 0x17;
            int v745 = (1 << v744) & 0x83E000;
            if (v43 || v745 == 0) {
              break;
            }
            unint64_t v741 = *(void *)(v741 + 8);
            if (v741 == v743)
            {
              unint64_t v741 = v743;
              break;
            }
          }
        }
        v747 = (uint64_t *)(v736 + 16 * v737);
        if (v737)
        {
          LODWORD(v748) = ((v741 >> 4) ^ (v741 >> 9)) & v738;
          v747 = (uint64_t *)(v736 + 16 * v748);
          uint64_t v749 = *v747;
          if (v741 != *v747)
          {
            int v750 = 1;
            while (v749 != -4096)
            {
              int v751 = v748 + v750++;
              uint64_t v748 = v751 & v738;
              uint64_t v749 = *(void *)(v736 + 16 * v748);
              if (v741 == v749)
              {
                v747 = (uint64_t *)(v736 + 16 * v748);
                goto LABEL_992;
              }
            }
            v747 = (uint64_t *)(v736 + 16 * v737);
          }
        }
LABEL_992:
        if (v720)
        {
          uint64_t v752 = v747[1];
          unint64_t v753 = v752 & 0xFFFFFFFFFFFFFFF8;
          int v754 = *(_DWORD *)((v752 & 0xFFFFFFFFFFFFFFF8) + 24);
          unsigned int v755 = (v752 >> 1) & 3;
          unsigned int v756 = v754 | v755;
          if ((v754 | v755) < ((*(void *)(v721 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v721 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 24)))
          {
            uint64_t v757 = *(void *)(v739 + 32);
            v758 = v719;
            unint64_t v759 = v720;
            do
            {
              uint64_t v760 = v758;
              unint64_t v761 = v759 >> 1;
              uint64_t v762 = v758[3 * (v759 >> 1) + 1];
              LODWORD(v762) = (v762 >> 1) & 3 | *(_DWORD *)((v762 & 0xFFFFFFFFFFFFFFF8) + 24);
              v759 -= (v759 >> 1) + 1;
              BOOL v763 = v756 >= v762;
              if (v756 >= v762) {
                unint64_t v764 = v761 + 1;
              }
              else {
                unint64_t v764 = 0;
              }
              v758 += 3 * v764;
              if (!v763) {
                unint64_t v759 = v761;
              }
            }
            while (v759);
            if (v758 != (void *)v721
              && ((*v758 >> 1) & 3 | *(_DWORD *)((*v758 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v753 + 24) | v755)
              && v760[3 * v764 + 2] == v699)
            {
              int v765 = *(_DWORD *)(v757 + ((v734 - v757) & 0x1FFFFFFFE0));
              if ((v765 & 0x10000FF) == 0 && (v765 & 0xF00000) != 0) {
                goto LABEL_1047;
              }
            }
          }
        }
        while (1)
        {
          uint64_t v734 = *(void *)(v734 + 24);
          if (!v734) {
            break;
          }
          if ((*(_DWORD *)v734 & 0x81000000) == 0) {
            goto LABEL_976;
          }
        }
      }
    }
    *(void *)v1282 = *(void *)(v701 + 24);
    uint64_t v766 = llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(a1 + 280), (llvm::MachineInstr *)v701, 0, (int)v1349, (int)v1330);
    if (v766)
    {
      uint64_t v767 = v766;
      int v768 = *(_DWORD *)(v656 + 112);
      if ((v768 & 0x80000000) == 0
        || (int v769 = *(_DWORD *)(v659 + 112), (v769 & 0x80000000) == 0)
        || sub_1CC38D61C(*(void **)(a1 + 264), v769, *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v769 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v768 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
      {
        if (v767 != v701)
        {
          sub_1CBB16C94(*(int32x2_t **)(*(void *)(a1 + 288) + 288), v701, v767);
          uint64_t v770 = *(void *)(*(void *)v1282 + 40);
          *(void *)(v767 + 24) = v770;
          uint64_t v771 = *(void *)(v770 + 32);
          uint64_t v772 = *(unsigned int *)(v767 + 40);
          if (v772)
          {
            uint64_t v1095 = *(void *)(v767 + 32);
            uint64_t v1096 = *(void *)(v771 + 40);
            uint64_t v1097 = 32 * v772;
            do
            {
              if (!*(unsigned char *)v1095)
              {
                uint64_t v1098 = *(unsigned int *)(v1095 + 4);
                if ((int)v1098 >= 0) {
                  v1099 = (uint64_t *)(*(void *)(v1096 + 272) + 8 * v1098);
                }
                else {
                  v1099 = (uint64_t *)(*(void *)(v1096 + 24) + 16 * (v1098 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1100 = *v1099;
                if (*v1099)
                {
                  uint64_t v1101 = *(void *)(v1100 + 16);
                  *(void *)(v1100 + 16) = v1095;
                  *(void *)(v1095 + 16) = v1101;
                  if (*(unsigned char *)(v1095 + 3))
                  {
                    *(void *)(v1095 + 24) = v1100;
                  }
                  else
                  {
                    *(void *)(v1095 + 24) = 0;
                    v1099 = (uint64_t *)(v1101 + 24);
                  }
                }
                else
                {
                  *(void *)(v1095 + 16) = v1095;
                  *(void *)(v1095 + 24) = 0;
                }
                uint64_t *v1099 = v1095;
              }
              v1095 += 32;
              v1097 -= 32;
            }
            while (v1097);
          }
          uint64_t v773 = *(void *)(v771 + 728);
          if (v773) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v773 + 24))(v773, v767);
          }
          unint64_t v774 = *(void *)v701 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v767 = v774 | *(void *)v767 & 7;
          *(void *)(v767 + 8) = v701;
          *(void *)(v774 + 8) = v767;
          uint64_t v775 = *(void *)v701 & 7 | v767;
          *(void *)uint64_t v701 = v775;
          uint64_t v776 = v701;
          if ((v775 & 4) == 0)
          {
            uint64_t v776 = v701;
            if ((*(_WORD *)(v701 + 44) & 8) != 0)
            {
              uint64_t v776 = v701;
              do
                uint64_t v776 = *(void *)(v776 + 8);
              while ((*(_WORD *)(v776 + 44) & 8) != 0);
            }
          }
          uint64_t v1261 = *(void *)(v776 + 8);
          if (v1261 != v701)
          {
            do
            {
              uint64_t v1271 = *(void *)(v701 + 8);
              uint64_t v777 = *(void *)(*(void *)(v701 + 24) + 32);
              if (v777)
              {
                uint64_t v778 = *(void *)(v777 + 728);
                if (v778) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v778 + 32))(v778, v701);
                }
                uint64_t v779 = *(unsigned int *)(v701 + 40);
                if (v779)
                {
                  uint64_t v780 = *(void *)(v701 + 32);
                  uint64_t v781 = *(void *)(v777 + 40);
                  uint64_t v782 = 32 * v779;
                  do
                  {
                    if (!*(unsigned char *)v780)
                    {
                      uint64_t v783 = *(unsigned int *)(v780 + 4);
                      if ((v783 & 0x80000000) != 0) {
                        BOOL v784 = (uint64_t *)(*(void *)(v781 + 24) + 16 * (v783 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        BOOL v784 = (uint64_t *)(*(void *)(v781 + 272) + 8 * v783);
                      }
                      uint64_t v785 = *v784;
                      uint64_t v787 = *(void *)(v780 + 16);
                      uint64_t v786 = *(void *)(v780 + 24);
                      if (v780 != *v784) {
                        BOOL v784 = (uint64_t *)(v787 + 24);
                      }
                      *BOOL v784 = v786;
                      if (v786) {
                        uint64_t v788 = v786;
                      }
                      else {
                        uint64_t v788 = v785;
                      }
                      *(void *)(v788 + 16) = v787;
                      *(void *)(v780 + 16) = 0;
                      *(void *)(v780 + 24) = 0;
                    }
                    v780 += 32;
                    v782 -= 32;
                  }
                  while (v782);
                }
              }
              *(void *)(v701 + 24) = 0;
              unint64_t v789 = *(unint64_t **)(v701 + 8);
              unint64_t v790 = *(void *)v701 & 0xFFFFFFFFFFFFFFF8;
              *unint64_t v789 = v790 | *v789 & 7;
              *(void *)(v790 + 8) = v789;
              *(void *)v701 &= 7uLL;
              *(void *)(v701 + 8) = 0;
              uint64_t v791 = *(void *)(*(void *)(*(void *)v1282 + 40) + 32);
              v1264 = *(void **)(v701 + 32);
              if (v1264)
              {
                uint64_t v792 = *(unsigned __int8 *)(v701 + 47);
                v1276 = (uint64_t *)(v791 + 232);
                *(void *)v1267 = *(void *)(*(void *)(*(void *)v1282 + 40) + 32);
                if (*(_DWORD *)(v791 + 240) <= v792) {
                  sub_1CC34BDE0((uint64_t)v1276, v792 + 1);
                }
                uint64_t v793 = *v1276;
                void *v1264 = *(void *)(*v1276 + 8 * v792);
                *(void *)(v793 + 8 * v792) = v1264;
                uint64_t v791 = *(void *)v1267;
              }
              *(void *)uint64_t v701 = *(void *)(v791 + 224);
              *(void *)(v791 + 224) = v701;
              uint64_t v701 = v1271;
            }
            while (v1271 != v1261);
          }
        }
        uint64_t v819 = *(void *)(a1 + 264);
        uint64_t v820 = *(unsigned int *)(v656 + 112);
        if ((v820 & 0x80000000) != 0) {
          v821 = (uint64_t *)(*(void *)(v819 + 24) + 16 * (v820 & 0x7FFFFFFF) + 8);
        }
        else {
          v821 = (uint64_t *)(*(void *)(v819 + 272) + 8 * v820);
        }
        uint64_t v822 = *v821;
        if (*v821)
        {
          while ((*(unsigned char *)(v822 + 3) & 1) != 0)
          {
            uint64_t v822 = *(void *)(v822 + 24);
            if (!v822) {
              goto LABEL_1086;
            }
          }
          while (1)
          {
            uint64_t v829 = v822;
            do
              uint64_t v822 = *(void *)(v822 + 24);
            while (v822 && (*(unsigned char *)(v822 + 3) & 1) != 0);
            if ((*(_DWORD *)v829 & 0x10000000) != 0) {
              goto LABEL_1129;
            }
            uint64_t v830 = *(void *)(v829 + 8);
            if (**(unsigned __int16 **)(v830 + 16) - 13 <= 4)
            {
              llvm::MachineOperand::setReg(v829, v1291);
              goto LABEL_1129;
            }
            __int16 v831 = *(_WORD *)(v830 + 44);
            unint64_t v832 = *(void *)(v829 + 8);
            if ((v831 & 4) != 0)
            {
              do
                unint64_t v832 = *(void *)v832 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v832 + 44) & 4) != 0);
            }
            uint64_t v833 = *(void *)(v829 + 8);
            if ((v831 & 8) != 0)
            {
              do
                uint64_t v833 = *(void *)(v833 + 8);
              while ((*(_WORD *)(v833 + 44) & 8) != 0);
            }
            unint64_t v834 = *(void *)(v833 + 8);
            if (v832 != v834)
            {
              do
              {
                unsigned int v835 = **(unsigned __int16 **)(v832 + 16);
                BOOL v43 = v835 > 0x17;
                int v836 = (1 << v835) & 0x83E000;
                if (v43 || v836 == 0) {
                  goto LABEL_1108;
                }
                unint64_t v832 = *(void *)(v832 + 8);
              }
              while (v832 != v834);
              unint64_t v832 = v834;
            }
LABEL_1108:
            uint64_t v838 = *(void *)(*(void *)(a1 + 288) + 288);
            uint64_t v839 = *(void *)(v838 + 368);
            uint64_t v840 = *(unsigned int *)(v838 + 384);
            if (v840)
            {
              LODWORD(v841) = ((v832 >> 4) ^ (v832 >> 9)) & (v840 - 1);
              v842 = (uint64_t *)(v839 + 16 * v841);
              uint64_t v843 = *v842;
              if (v832 != *v842)
              {
                int v844 = 1;
                do
                {
                  if (v843 == -4096) {
                    goto LABEL_1114;
                  }
                  int v845 = v841 + v844++;
                  uint64_t v841 = v845 & (v840 - 1);
                  uint64_t v843 = *(void *)(v839 + 16 * v841);
                }
                while (v832 != v843);
                v842 = (uint64_t *)(v839 + 16 * v841);
              }
            }
            else
            {
LABEL_1114:
              v842 = (uint64_t *)(v839 + 16 * v840);
            }
            unint64_t v846 = v842[1] & 0xFFFFFFFFFFFFFFF8;
            unsigned int v847 = *(_DWORD *)(v656 + 8);
            uint64_t v848 = *(void *)v656;
            if (!v847) {
              break;
            }
            uint64_t v849 = *(void *)(v848 + 24 * v847 - 16);
            unsigned int v850 = *(_DWORD *)(v846 + 24) | 1;
            unsigned int v851 = (v849 >> 1) & 3 | *(_DWORD *)((v849 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v852 = *(void **)v656;
            unint64_t v853 = *(unsigned int *)(v656 + 8);
            if (v850 >= v851) {
              goto LABEL_1125;
            }
            do
            {
              unint64_t v854 = v853 >> 1;
              uint64_t v855 = v852[3 * (v853 >> 1) + 1];
              LODWORD(v855) = (v855 >> 1) & 3 | *(_DWORD *)((v855 & 0xFFFFFFFFFFFFFFF8) + 24);
              v853 -= (v853 >> 1) + 1;
              BOOL v856 = v850 >= v855;
              if (v850 >= v855) {
                unint64_t v857 = v854 + 1;
              }
              else {
                unint64_t v857 = 0;
              }
              v852 += 3 * v857;
              if (!v856) {
                unint64_t v853 = v854;
              }
            }
            while (v853);
LABEL_1126:
            uint64_t v858 = (void *)(v848 + 24 * v847);
            if (v852 == v858
              || ((*v852 >> 1) & 3 | *(_DWORD *)((*v852 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v846 + 24) | 1u))
            {
              uint64_t v852 = v858;
            }
            if (v852[2] != v699) {
              goto LABEL_1129;
            }
            *(void *)v1283 = v846;
            *(_DWORD *)v829 &= ~0x4000000u;
            if (v1291 - 1 > 0x3FFFFFFE) {
              llvm::MachineOperand::setReg(v829, v1291);
            }
            else {
              llvm::MachineOperand::substPhysReg((unsigned int *)v829, v1291, *(void *)(a1 + 272));
            }
            if (v830 == v9) {
              goto LABEL_1129;
            }
            if (**(_WORD **)(v830 + 16) != 19) {
              goto LABEL_1129;
            }
            v859 = *(_DWORD **)(v830 + 32);
            if (v859[1] != *(_DWORD *)(v659 + 112) || (*v859 & 0xFFF00) != 0) {
              goto LABEL_1129;
            }
            unsigned int v860 = *(_DWORD *)(v659 + 8);
            uint64_t v861 = *(void *)v659;
            if (!v860)
            {
              unsigned int v860 = 0;
LABEL_1148:
              unint64_t v865 = (void *)(v861 + 24 * v860);
              goto LABEL_1149;
            }
            uint64_t v862 = *(void *)(v861 + 24 * v860 - 16);
            unsigned int v863 = *(_DWORD *)(*(void *)v1283 + 24) | 2;
            unsigned int v864 = (v862 >> 1) & 3 | *(_DWORD *)((v862 & 0xFFFFFFFFFFFFFFF8) + 24);
            unint64_t v865 = *(void **)v659;
            unint64_t v866 = *(unsigned int *)(v659 + 8);
            if (v863 >= v864) {
              goto LABEL_1148;
            }
            do
            {
              unint64_t v867 = v866 >> 1;
              uint64_t v868 = v865[3 * (v866 >> 1) + 1];
              LODWORD(v868) = (v868 >> 1) & 3 | *(_DWORD *)((v868 & 0xFFFFFFFFFFFFFFF8) + 24);
              v866 -= (v866 >> 1) + 1;
              BOOL v869 = v863 >= v868;
              if (v863 >= v868) {
                unint64_t v870 = v867 + 1;
              }
              else {
                unint64_t v870 = 0;
              }
              v865 += 3 * v870;
              if (!v869) {
                unint64_t v866 = v867;
              }
            }
            while (v866);
LABEL_1149:
            if (v865 != (void *)(v861 + 24 * v860)
              && ((*v865 >> 1) & 3 | *(_DWORD *)((*v865 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(*(void *)v1283 + 24) | 2u))
            {
              uint64_t v871 = v865[2];
              if (v871)
              {
                uint64_t v1302 = llvm::LiveRange::MergeValueNumberInto(v659, v871, v1302);
                for (uint64_t k = *(void *)(v659 + 104); ; uint64_t k = *(void *)(v1272 + 104))
                {
                  uint64_t v1272 = k;
                  if (!k)
                  {
                    sub_1CC43B958(a1, (llvm::MachineInstr *)v830);
                    goto LABEL_1129;
                  }
                  unsigned int v873 = *(_DWORD *)(k + 8);
                  uint64_t v874 = *(void **)k;
                  if (!v873) {
                    break;
                  }
                  uint64_t v875 = v874[3 * v873 - 2];
                  unsigned int v876 = *(_DWORD *)(*(void *)v1283 + 24) | 2;
                  unsigned int v877 = (v875 >> 1) & 3 | *(_DWORD *)((v875 & 0xFFFFFFFFFFFFFFF8) + 24);
                  unint64_t v878 = *(unsigned int *)(v1272 + 8);
                  v879 = *(void **)v1272;
                  unint64_t v880 = v878;
                  if (v876 >= v877) {
                    goto LABEL_1164;
                  }
                  do
                  {
                    unint64_t v881 = v880 >> 1;
                    uint64_t v882 = v879[3 * (v880 >> 1) + 1];
                    LODWORD(v882) = (v882 >> 1) & 3 | *(_DWORD *)((v882 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v880 -= (v880 >> 1) + 1;
                    BOOL v883 = v876 >= v882;
                    if (v876 >= v882) {
                      unint64_t v884 = v881 + 1;
                    }
                    else {
                      unint64_t v884 = 0;
                    }
                    v879 += 3 * v884;
                    if (!v883) {
                      unint64_t v880 = v881;
                    }
                  }
                  while (v880);
                  unint64_t v878 = *(unsigned int *)(v1272 + 8);
LABEL_1165:
                  v885 = &v874[3 * v878];
                  if (v879 != v885
                    && ((*v879 >> 1) & 3 | *(_DWORD *)((*v879 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(*(void *)v1283 + 24) | 2u))
                  {
                    uint64_t v886 = v879[2];
                    if (v886)
                    {
                      if (!v873) {
                        goto LABEL_1178;
                      }
                      unsigned int v887 = *(_DWORD *)(v675 + 24) | 2;
                      if (v887 >= ((*(v885 - 2) >> 1) & 3 | *(_DWORD *)((*(v885 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 24)))
                        goto LABEL_1178;
                      do
                      {
                        v888 = v874;
                        unint64_t v889 = v878 >> 1;
                        uint64_t v890 = v874[3 * (v878 >> 1) + 1];
                        LODWORD(v890) = (v890 >> 1) & 3 | *(_DWORD *)((v890 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v878 -= (v878 >> 1) + 1;
                        BOOL v891 = v887 >= v890;
                        if (v887 >= v890) {
                          unint64_t v892 = v889 + 1;
                        }
                        else {
                          unint64_t v892 = 0;
                        }
                        uint64_t v874 = &v888[3 * v892];
                        if (!v891) {
                          unint64_t v878 = v889;
                        }
                      }
                      while (v878);
                      if (v874 != v885
                        && ((*v874 >> 1) & 3 | *(_DWORD *)((*v874 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v675 + 24) | 2u))
                      {
                        uint64_t v893 = v888[3 * v892 + 2];
                      }
                      else
                      {
LABEL_1178:
                        uint64_t v893 = 0;
                      }
                      llvm::LiveRange::MergeValueNumberInto(v1272, v886, v893);
                    }
                  }
                }
                unint64_t v878 = 0;
LABEL_1164:
                v879 = &v874[3 * v878];
                goto LABEL_1165;
              }
            }
LABEL_1129:
            if (!v822) {
              goto LABEL_1086;
            }
          }
          unsigned int v847 = 0;
LABEL_1125:
          uint64_t v852 = (void *)(v848 + 24 * v847);
          goto LABEL_1126;
        }
LABEL_1086:
        LOBYTE(v1327) = 0;
        uint64_t v823 = *(void *)(v656 + 104);
        uint64_t v824 = *(void *)(v659 + 104);
        if (!(v823 | v824)) {
          goto LABEL_1427;
        }
        uint64_t v1292 = *(void *)(a1 + 288);
        v1277 = (void *)(v1292 + 312);
        if (v823)
        {
          if (!v824)
          {
            uint64_t v825 = *(void *)((*(void *)(*(void *)(*(void *)(a1 + 264) + 24)
                                          + 16 * (*(_DWORD *)(v659 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 24);
            *(void *)(v1292 + 392) += 120;
            uint64_t v826 = *(void *)(v1292 + 312);
            if (((v826 + 7) & 0xFFFFFFFFFFFFFFF8) - v826 + 120 > *(void *)(v1292 + 320) - v826)
            {
              unsigned int v1193 = *(_DWORD *)(v1292 + 336) >> 7;
              if (v1193 >= 0x1E) {
                LOBYTE(v1193) = 30;
              }
              *(void *)v1287 = 4096 << v1193;
              v827 = (uint64_t *)operator new(4096 << v1193, (std::align_val_t)8uLL);
              unint64_t v1194 = *(unsigned int *)(v1292 + 336);
              if (v1194 >= *(unsigned int *)(v1292 + 340)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v1292 + 328) + 8 * v1194) = v827;
              ++*(_DWORD *)(v1292 + 336);
              *(void *)(v1292 + sub_1CC3F44F0((uint64_t)this + 320) = (char *)v827 + *(void *)v1287;
            }
            else
            {
              v827 = (uint64_t *)((v826 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            void *v1277 = v827 + 15;
            uint64_t *v827 = (uint64_t)(v827 + 2);
            v827[1] = 0x200000000;
            v827[8] = (uint64_t)(v827 + 10);
            v827[9] = 0x200000000;
            v827[12] = 0;
            sub_1CC2CD2F8((uint64_t)v827, v659, (uint64_t)v1277);
            v827[14] = v825;
            v827[13] = *(void *)(v659 + 104);
            *(void *)(v659 + 104) = v827;
            uint64_t v823 = *(void *)(v656 + 104);
            if (!v823)
            {
              uint64_t v828 = 0;
              goto LABEL_1387;
            }
          }
        }
        else
        {
          uint64_t v1010 = *(void *)((*(void *)(*(void *)(*(void *)(a1 + 264) + 24)
                                         + 16 * (*(_DWORD *)(v656 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                            + 24);
          *(void *)(v1292 + 392) += 120;
          uint64_t v1011 = *(void *)(v1292 + 312);
          if (((v1011 + 7) & 0xFFFFFFFFFFFFFFF8) - v1011 + 120 > *(void *)(v1292 + 320) - v1011)
          {
            unsigned int v1191 = *(_DWORD *)(v1292 + 336) >> 7;
            if (v1191 >= 0x1E) {
              LOBYTE(v1191) = 30;
            }
            *(void *)v1286 = 4096 << v1191;
            uint64_t v823 = (uint64_t)operator new(4096 << v1191, (std::align_val_t)8uLL);
            unint64_t v1192 = *(unsigned int *)(v1292 + 336);
            if (v1192 >= *(unsigned int *)(v1292 + 340)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v1292 + 328) + 8 * v1192) = v823;
            ++*(_DWORD *)(v1292 + 336);
            *(void *)(v1292 + sub_1CC3F44F0((uint64_t)this + 320) = v823 + *(void *)v1286;
          }
          else
          {
            uint64_t v823 = (v1011 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          void *v1277 = v823 + 120;
          *(void *)uint64_t v823 = v823 + 16;
          *(void *)(v823 + 8) = 0x200000000;
          *(void *)(v823 + 64) = v823 + 80;
          *(void *)(v823 + 72) = 0x200000000;
          *(void *)(v823 + 96) = 0;
          sub_1CC2CD2F8(v823, v656, (uint64_t)v1277);
          *(void *)(v823 + 112) = v1010;
          *(void *)(v823 + 104) = *(void *)(v656 + 104);
          *(void *)(v656 + 104) = v823;
        }
        uint64_t v828 = 0;
        *(void *)v1269 = *(void *)(*(void *)(a1 + 288) + 288);
        while (1)
        {
          unsigned int v1012 = *(_DWORD *)(v823 + 8);
          v1013 = *(void **)v823;
          if (v1012)
          {
            uint64_t v1014 = v1013[3 * v1012 - 2];
            unsigned int v1015 = *(_DWORD *)(v675 + 24) | 1;
            unsigned int v1016 = (v1014 >> 1) & 3 | *(_DWORD *)((v1014 & 0xFFFFFFFFFFFFFFF8) + 24);
            v1017 = *(void **)v823;
            unint64_t v1018 = *(unsigned int *)(v823 + 8);
            if (v1015 < v1016)
            {
              do
              {
                unint64_t v1019 = v1018 >> 1;
                uint64_t v1020 = v1017[3 * (v1018 >> 1) + 1];
                LODWORD(v1020) = (v1020 >> 1) & 3 | *(_DWORD *)((v1020 & 0xFFFFFFFFFFFFFFF8) + 24);
                v1018 -= (v1018 >> 1) + 1;
                BOOL v1021 = v1015 >= v1020;
                if (v1015 >= v1020) {
                  unint64_t v1022 = v1019 + 1;
                }
                else {
                  unint64_t v1022 = 0;
                }
                v1017 += 3 * v1022;
                if (!v1021) {
                  unint64_t v1018 = v1019;
                }
              }
              while (v1018);
              goto LABEL_1377;
            }
          }
          else
          {
            unsigned int v1012 = 0;
          }
          v1017 = &v1013[3 * v1012];
LABEL_1377:
          if (v1017 != &v1013[3 * v1012]
            && ((*v1017 >> 1) & 3 | *(_DWORD *)((*v1017 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v675 + 24) | 1u))
          {
            v1023 = (void *)v1017[2];
            if (v1023)
            {
              uint64_t v1285 = *(void *)(v823 + 112);
              uint64_t v1294 = v1285 | v828;
              v1024 = (void **)operator new(0x30uLL);
              *v1024 = &unk_1F26122B0;
              v1024[1] = v1277;
              v1024[2] = (void *)v823;
              v1024[3] = (void *)(v675 | 4);
              v1024[4] = v1023;
              v1024[5] = &v1327;
              v1343 = v1024;
              llvm::LiveInterval::refineSubRanges(v659, (uint64_t)v1277, v1285, (uint64_t)&v1340, v1269[0], *(void **)(a1 + 272), 0);
              if (v1343 == &v1340)
              {
                (*((void (**)(void **))v1340 + 4))(&v1340);
              }
              else if (v1343)
              {
                (*((void (**)(void))*v1343 + 5))();
              }
              uint64_t v828 = v1294;
            }
          }
          uint64_t v823 = *(void *)(v823 + 104);
          if (!v823)
          {
            v827 = *(uint64_t **)(v659 + 104);
            if (v827)
            {
LABEL_1387:
              uint64_t v1295 = v828;
              while (2)
              {
                if ((v827[14] & v828) != 0) {
                  goto LABEL_1406;
                }
                unsigned int v1025 = *((_DWORD *)v827 + 2);
                uint64_t v1026 = *v827;
                if (v1025)
                {
                  uint64_t v1027 = *(void *)(v1026 + 24 * v1025 - 16);
                  unsigned int v1028 = *(_DWORD *)(v675 + 24) | 2;
                  unsigned int v1029 = (v1027 >> 1) & 3 | *(_DWORD *)((v1027 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v1030 = (char *)*v827;
                  unint64_t v1031 = *((unsigned int *)v827 + 2);
                  if (v1028 < v1029)
                  {
                    do
                    {
                      unint64_t v1032 = v1031 >> 1;
                      uint64_t v1033 = *(void *)&v1030[24 * (v1031 >> 1) + 8];
                      LODWORD(v1033) = (v1033 >> 1) & 3 | *(_DWORD *)((v1033 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v1031 -= (v1031 >> 1) + 1;
                      BOOL v1034 = v1028 >= v1033;
                      if (v1028 >= v1033) {
                        unint64_t v1035 = v1032 + 1;
                      }
                      else {
                        unint64_t v1035 = 0;
                      }
                      v1030 += 24 * v1035;
                      if (!v1034) {
                        unint64_t v1031 = v1032;
                      }
                    }
                    while (v1031);
                    unint64_t v1036 = *((unsigned int *)v827 + 2);
LABEL_1401:
                    v1037 = (char *)(v1026 + 24 * v1036);
                    if (v1030 == v1037) {
                      goto LABEL_1406;
                    }
                    uint64_t v1038 = *(void *)v1030;
                    unint64_t v1039 = *(void *)v1030 & 0xFFFFFFFFFFFFFFF8;
                    unsigned int v1040 = (*(void *)v1030 >> 1) & 3 | *(_DWORD *)(v1039 + 24);
                    if (v1040 > (*(_DWORD *)(v675 + 24) | 2u) || v1039 != v675) {
                      goto LABEL_1406;
                    }
                    if (v1025)
                    {
                      v1042 = (void *)(v1026 + 24 * v1036);
                      if (v1040 < ((*((void *)v1037 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v1037 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 24)))
                      {
                        v1042 = (void *)*v827;
                        do
                        {
                          unint64_t v1043 = v1036 >> 1;
                          uint64_t v1044 = v1042[3 * (v1036 >> 1) + 1];
                          LODWORD(v1044) = (v1044 >> 1) & 3 | *(_DWORD *)((v1044 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                          v1036 -= (v1036 >> 1) + 1;
                          BOOL v1045 = v1040 >= v1044;
                          if (v1040 >= v1044) {
                            unint64_t v1046 = v1043 + 1;
                          }
                          else {
                            unint64_t v1046 = 0;
                          }
                          v1042 += 3 * v1046;
                          if (!v1045) {
                            unint64_t v1036 = v1043;
                          }
                        }
                        while (v1036);
                      }
                    }
                    else
                    {
                      v1042 = (void *)(v1026 + 24 * v1036);
                    }
                    v1047 = (void *)*((void *)v1030 + 1);
                    v1048 = (void *)v1042[1];
                    uint64_t v1049 = v1042[2];
                    if (*v1042 == v1038)
                    {
                      if (v1048 == v1047)
                      {
                        if (v1037 != (char *)(v1042 + 3))
                        {
                          memmove(v1042, v1042 + 3, v1037 - (char *)(v1042 + 3));
                          unsigned int v1025 = *((_DWORD *)v827 + 2);
                        }
                        *((_DWORD *)v827 + 2) = v1025 - 1;
                        llvm::LiveRange::removeValNoIfDead((uint64_t)v827, v1049);
                      }
                      else
                      {
                        void *v1042 = v1047;
                      }
                      goto LABEL_1425;
                    }
                    v1042[1] = v1038;
                    uint64_t v828 = v1295;
                    if (v1048 != v1047)
                    {
                      v1333 = v1047;
                      uint64_t v1334 = (uint64_t)v1048;
                      v1335[0] = v1049;
                      sub_1CC2FC960(v827, (unint64_t)(v1042 + 3), (unint64_t)&v1333);
LABEL_1425:
                      uint64_t v828 = v1295;
                    }
LABEL_1406:
                    v827 = (uint64_t *)v827[13];
                    if (!v827) {
                      goto LABEL_1427;
                    }
                    continue;
                  }
                  unint64_t v1036 = *((unsigned int *)v827 + 2);
                }
                else
                {
                  unint64_t v1036 = 0;
                }
                break;
              }
              v1030 = (char *)(v1026 + 24 * v1036);
              goto LABEL_1401;
            }
LABEL_1427:
            *(void *)(v1302 + 8) = *(void *)(v699 + 8);
            uint64_t v1050 = sub_1CC441BE0(v659, v1302, *(void *)v656, *(_DWORD *)(v656 + 8), v699);
            LOBYTE(v1327) = v1327 | BYTE1(v1050);
            llvm::LiveIntervals::removeVRegDefAt(*(void *)(a1 + 288), v656, *(void *)(v699 + 8));
            int v1051 = v1327;
            sub_1CC43B958(a1, (llvm::MachineInstr *)v9);
            if (!v1051) {
              goto LABEL_411;
            }
            uint64_t v1052 = *(void *)(a1 + 288);
            if (BYTE2(v1317[2])) {
              v1053 = (_DWORD *)v1317 + 1;
            }
            else {
              v1053 = v1317;
            }
            unint64_t v1054 = *v1053 & 0x7FFFFFFF;
            v1055 = (void *)(v1052 + 408);
            unint64_t v1056 = *(unsigned int *)(v1052 + 416);
            BOOL v73 = v1054 >= v1056;
            unint64_t v1057 = v1054 - v1056;
            if (v73)
            {
              sub_1CB9153B8((uint64_t)v1055, v1057 + 1, *(void *)(v1052 + 424));
            }
            else
            {
              v1058 = *(const llvm::LiveRange **)(*v1055 + 8 * v1054);
              if (v1058)
              {
                sub_1CC43B764(a1, v1058, 0);
                goto LABEL_411;
              }
            }
            llvm::LiveIntervals::createInterval();
          }
        }
      }
    }
LABEL_1047:
    int v133 = 0;
    int v134 = 1;
    int v135 = v1315;
    uint64_t v6 = v1312;
    if (LOBYTE(v1317[2])) {
      goto LABEL_1206;
    }
    unint64_t v7 = v1311;
    uint64_t v8 = v1313;
    if (!v1318) {
      goto LABEL_1207;
    }
    if (**(_WORD **)(v9 + 16) != 19
      || (unint64_t v794 = *(_DWORD **)(v9 + 32), (*v794 & 0xFFF00) != 0)
      || (v794[8] & 0xFFF00) != 0
      || (uint64_t v795 = *(void *)(v9 + 24), *(unsigned char *)(v795 + 184))
      || *(unsigned char *)(v795 + 202)
      || ((*(void *)(v795 + 72) - *(void *)(v795 + 64)) & 0x7FFFFFFF8) != 0x10)
    {
      int v133 = 0;
      int v134 = 1;
      goto LABEL_1207;
    }
    uint64_t v796 = *(void *)(a1 + 288);
    if (BYTE2(v1317[2])) {
      int v797 = v1317[0];
    }
    else {
      int v797 = HIDWORD(v1317[0]);
    }
    unsigned int v798 = (void *)(v796 + 408);
    unint64_t v799 = *(unsigned int *)(v796 + 416);
    if ((v797 & 0x7FFFFFFFu) >= v799)
    {
      sub_1CB9153B8((uint64_t)v798, (v797 & 0x7FFFFFFF) - v799 + 1, *(void *)(v796 + 424));
LABEL_1749:
      llvm::LiveIntervals::createInterval();
    }
    v800 = *(const llvm::LiveRange **)(*v798 + 8 * (v797 & 0x7FFFFFFF));
    if (!v800) {
      goto LABEL_1749;
    }
    if (BYTE2(v1317[2])) {
      int v801 = HIDWORD(v1317[0]);
    }
    else {
      int v801 = v1317[0];
    }
    uint64_t v802 = (void *)(v796 + 408);
    if ((v801 & 0x7FFFFFFFu) >= v799)
    {
      sub_1CB9153B8((uint64_t)v802, (v801 & 0x7FFFFFFF) - v799 + 1, *(void *)(v796 + 424));
LABEL_1751:
      llvm::LiveIntervals::createInterval();
    }
    uint64_t v803 = *(void *)(*v802 + 8 * (v801 & 0x7FFFFFFF));
    if (!v803) {
      goto LABEL_1751;
    }
    uint64_t v804 = *(void *)(v796 + 288);
    __int16 v805 = *(_WORD *)(v9 + 44);
    unint64_t v806 = v9;
    if ((v805 & 4) != 0)
    {
      do
        unint64_t v806 = *(void *)v806 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v806 + 44) & 4) != 0);
    }
    uint64_t v807 = v9;
    if ((v805 & 8) != 0)
    {
      do
        uint64_t v807 = *(void *)(v807 + 8);
      while ((*(_WORD *)(v807 + 44) & 8) != 0);
    }
    unint64_t v808 = *(void *)(v807 + 8);
    if (v806 != v808)
    {
      while (1)
      {
        unsigned int v809 = **(unsigned __int16 **)(v806 + 16);
        BOOL v43 = v809 > 0x17;
        int v810 = (1 << v809) & 0x83E000;
        if (v43 || v810 == 0) {
          break;
        }
        unint64_t v806 = *(void *)(v806 + 8);
        if (v806 == v808)
        {
          unint64_t v806 = v808;
          break;
        }
      }
    }
    uint64_t v812 = *(void *)(v804 + 368);
    uint64_t v813 = *(unsigned int *)(v804 + 384);
    if (v813)
    {
      LODWORD(v814) = ((v806 >> 4) ^ (v806 >> 9)) & (v813 - 1);
      uint64_t v815 = (uint64_t *)(v812 + 16 * v814);
      uint64_t v816 = *v815;
      if (v806 == *v815) {
        goto LABEL_1189;
      }
      int v817 = 1;
      while (v816 != -4096)
      {
        int v818 = v814 + v817++;
        uint64_t v814 = v818 & (v813 - 1);
        uint64_t v816 = *(void *)(v812 + 16 * v814);
        if (v806 == v816)
        {
          uint64_t v815 = (uint64_t *)(v812 + 16 * v814);
          goto LABEL_1189;
        }
      }
    }
    uint64_t v815 = (uint64_t *)(v812 + 16 * v813);
LABEL_1189:
    unint64_t v894 = v815[1] & 0xFFFFFFFFFFFFFFF8;
    unsigned int v895 = *((_DWORD *)v800 + 2);
    v896 = *(void **)v800;
    if (!v895)
    {
      unint64_t v900 = 0;
LABEL_1199:
      v901 = &v896[3 * v900];
      goto LABEL_1200;
    }
    uint64_t v897 = v896[3 * v895 - 2];
    unsigned int v898 = *(_DWORD *)(v894 + 24) | 1;
    unsigned int v899 = (v897 >> 1) & 3 | *(_DWORD *)((v897 & 0xFFFFFFFFFFFFFFF8) + 24);
    unint64_t v900 = *((unsigned int *)v800 + 2);
    v901 = *(void **)v800;
    unint64_t v902 = v900;
    if (v898 >= v899) {
      goto LABEL_1199;
    }
    do
    {
      unint64_t v903 = v902 >> 1;
      uint64_t v904 = v901[3 * (v902 >> 1) + 1];
      LODWORD(v904) = (v904 >> 1) & 3 | *(_DWORD *)((v904 & 0xFFFFFFFFFFFFFFF8) + 24);
      v902 -= (v902 >> 1) + 1;
      BOOL v905 = v898 >= v904;
      if (v898 >= v904) {
        unint64_t v906 = v903 + 1;
      }
      else {
        unint64_t v906 = 0;
      }
      v901 += 3 * v906;
      if (!v905) {
        unint64_t v902 = v903;
      }
    }
    while (v902);
    unint64_t v900 = *((unsigned int *)v800 + 2);
LABEL_1200:
    v907 = &v896[3 * v900];
    if (v901 == v907
      || ((*v901 >> 1) & 3 | *(_DWORD *)((*v901 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v894 + 24) | 1u))
    {
      v901 = &v896[3 * v900];
    }
    if ((*(unsigned char *)(v901[2] + 8) & 6) != 0
      || (v1293 = (void *)v803,
          unint64_t v1303 = v894,
          v1278 = v800,
          *(void *)v1284 = *(void *)(v804 + 392),
          llvm::LiveRange::overlaps(v803, *(void *)(*(void *)v1284 + 16 * *(unsigned int *)(v795 + 24)), v894 | 2)))
    {
      int v133 = 0;
      int v134 = 1;
      int v135 = v1315;
      uint64_t v6 = v1312;
LABEL_1206:
      unint64_t v7 = v1311;
      uint64_t v8 = v1313;
      goto LABEL_1207;
    }
    v908 = *(uint64_t **)(v795 + 64);
    v909 = *(uint64_t **)(v795 + 72);
    if (v908 == v909) {
      goto LABEL_1245;
    }
    char v910 = 0;
    uint64_t v911 = 0;
    do
    {
      uint64_t v912 = v911;
      while (1)
      {
        uint64_t v911 = *v908;
        uint64_t v913 = *(void *)(*(void *)v1284 + 16 * *(unsigned int *)(*v908 + 24) + 8);
        unsigned int v914 = (v913 >> 1) & 3;
        unint64_t v915 = v913 & 0xFFFFFFFFFFFFFFF8;
        if (v914) {
          uint64_t v916 = v915 | (2 * (v914 - 1));
        }
        else {
          uint64_t v916 = *(void *)v915 | 6;
        }
        v917 = &v896[3 * v900];
        if (v895)
        {
          unsigned int v918 = *(_DWORD *)((v916 & 0xFFFFFFFFFFFFFFF8) + 24) | (v916 >> 1) & 3;
          v917 = &v896[3 * v900];
          if (v918 < ((*(v907 - 2) >> 1) & 3 | *(_DWORD *)((*(v907 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            v917 = v896;
            unint64_t v919 = v900;
            do
            {
              unint64_t v920 = v919 >> 1;
              uint64_t v921 = v917[3 * (v919 >> 1) + 1];
              LODWORD(v921) = (v921 >> 1) & 3 | *(_DWORD *)((v921 & 0xFFFFFFFFFFFFFFF8) + 24);
              v919 -= (v919 >> 1) + 1;
              BOOL v922 = v918 >= v921;
              if (v918 >= v921) {
                unint64_t v923 = v920 + 1;
              }
              else {
                unint64_t v923 = 0;
              }
              v917 += 3 * v923;
              if (!v922) {
                unint64_t v919 = v920;
              }
            }
            while (v919);
          }
        }
        unint64_t v924 = *(void *)(v917[2] + 8);
        if (v924 < 8) {
          goto LABEL_1241;
        }
        unint64_t v925 = v924 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v926 = *(void *)((v924 & 0xFFFFFFFFFFFFFFF8) + 16);
        if (!v926) {
          goto LABEL_1241;
        }
        if (**(_WORD **)(v926 + 16) != 19) {
          goto LABEL_1241;
        }
        v927 = *(_DWORD **)(v926 + 32);
        if ((*v927 & 0xFFF00) != 0
          || (v927[8] & 0xFFF00) != 0
          || v927[1] != *((_DWORD *)v1278 + 28)
          || v927[9] != *((_DWORD *)v1293 + 28)
          || *(void *)(v926 + 24) != v911)
        {
          goto LABEL_1241;
        }
        uint64_t v928 = *((unsigned int *)v1293 + 18);
        if (v928) {
          break;
        }
LABEL_1238:
        ++v908;
        char v910 = 1;
        if (v908 == v909)
        {
          uint64_t v911 = v912;
          goto LABEL_1243;
        }
      }
      uint64_t v929 = v1293[8];
      unsigned int v930 = (v924 >> 1) & 3;
      uint64_t v931 = 8 * v928;
      while (1)
      {
        unint64_t v932 = *(void *)(*(void *)v929 + 8);
        if (v932 >= 8)
        {
          unsigned int v933 = *(_DWORD *)((v932 & 0xFFFFFFFFFFFFFFF8) + 24) | (v932 >> 1) & 3;
          if ((*(_DWORD *)(v925 + 24) | v930) < v933 && v933 < (*(_DWORD *)(v915 + 24) | v914)) {
            break;
          }
        }
        v929 += 8;
        v931 -= 8;
        if (!v931) {
          goto LABEL_1238;
        }
      }
LABEL_1241:
      ++v908;
    }
    while (v908 != v909);
    if ((v910 & 1) == 0)
    {
LABEL_1245:
      int v133 = 0;
      int v134 = 1;
      goto LABEL_412;
    }
LABEL_1243:
    if (v911)
    {
      if (((*(void *)(v911 + 96) - *(void *)(v911 + 88)) & 0x7FFFFFFF0) != 0) {
        goto LABEL_1245;
      }
      unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v911);
      v1076 = (void *)FirstTerminator;
      if (v911 + 48 == FirstTerminator) {
        goto LABEL_1526;
      }
      __int16 v1077 = *(_WORD *)(FirstTerminator + 44);
      unint64_t v1078 = FirstTerminator;
      if ((v1077 & 4) != 0)
      {
        unint64_t v1078 = FirstTerminator;
        do
          unint64_t v1078 = *(void *)v1078 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v1078 + 44) & 4) != 0);
      }
      unint64_t v1079 = FirstTerminator;
      if ((v1077 & 8) != 0)
      {
        unint64_t v1079 = FirstTerminator;
        do
          unint64_t v1079 = *(void *)(v1079 + 8);
        while ((*(_WORD *)(v1079 + 44) & 8) != 0);
      }
      unint64_t v1080 = *(void *)(v1079 + 8);
      if (v1078 != v1080)
      {
        while (1)
        {
          unsigned int v1081 = **(unsigned __int16 **)(v1078 + 16);
          BOOL v43 = v1081 > 0x17;
          int v1082 = (1 << v1081) & 0x83E000;
          if (v43 || v1082 == 0) {
            break;
          }
          unint64_t v1078 = *(void *)(v1078 + 8);
          if (v1078 == v1080)
          {
            unint64_t v1078 = v1080;
            break;
          }
        }
      }
      uint64_t v1084 = *(void *)(*(void *)(a1 + 288) + 288);
      uint64_t v1085 = *(void *)(v1084 + 368);
      uint64_t v1086 = *(unsigned int *)(v1084 + 384);
      if (v1086)
      {
        LODWORD(v1087) = ((v1078 >> 4) ^ (v1078 >> 9)) & (v1086 - 1);
        v1088 = (uint64_t *)(v1085 + 16 * v1087);
        uint64_t v1089 = *v1088;
        if (v1078 == *v1088) {
          goto LABEL_1525;
        }
        int v1090 = 1;
        while (v1089 != -4096)
        {
          int v1091 = v1087 + v1090++;
          uint64_t v1087 = v1091 & (v1086 - 1);
          uint64_t v1089 = *(void *)(v1085 + 16 * v1087);
          if (v1078 == v1089)
          {
            v1088 = (uint64_t *)(v1085 + 16 * v1087);
            goto LABEL_1525;
          }
        }
      }
      v1088 = (uint64_t *)(v1085 + 16 * v1086);
LABEL_1525:
      if (llvm::LiveRange::overlaps((uint64_t)v1293, v1088[1] & 0xFFFFFFFFFFFFFFF8 | 2, *(void *)(*(void *)(v1084 + 392) + 16 * *(unsigned int *)(v911 + 24) + 8)))
      {
        goto LABEL_1245;
      }
LABEL_1526:
      uint64_t v1102 = *(void *)(*(void *)(a1 + 280) + 8);
      int v1103 = *((_DWORD *)v1293 + 28);
      v1104 = *(llvm::MachineFunction **)(v911 + 32);
      v1105 = *(void **)(v9 + 56);
      v1333 = v1105;
      if (v1105) {
        llvm::MetadataTracking::track((uint64_t)&v1333, (unsigned __int8 *)v1105, 2);
      }
      uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v1104, v1102 + 912, (unsigned __int8 **)&v1333, 0);
      if (!v1333) {
        goto LABEL_1529;
      }
      int v1255 = *(unsigned __int8 *)v1333;
      if ((v1255 - 4) > 0x1E)
      {
        if ((v1255 - 3) >= 0xFFFFFFFE) {
          v1258 = v1333;
        }
        else {
          v1258 = 0;
        }
        if ((v1255 - 3) < 0xFFFFFFFE)
        {
          if (v1255 == 3) {
            *((void *)v1333 + 1) = 0;
          }
          goto LABEL_1529;
        }
        unint64_t v1257 = (unint64_t)v1258 + 8;
      }
      else
      {
        if ((*((unsigned char *)v1333 + 1) & 0x7F) != 2 && !*((_DWORD *)v1333 + 3)) {
          goto LABEL_1529;
        }
        uint64_t v1256 = *((void *)v1333 + 2);
        if ((v1256 & 4) == 0) {
          goto LABEL_1529;
        }
        unint64_t v1257 = v1256 & 0xFFFFFFFFFFFFFFF8;
        if (!v1257) {
          goto LABEL_1529;
        }
      }
      v1340 = &v1333;
      sub_1CC5FA668(v1257 + 16, &v1340);
LABEL_1529:
      uint64_t v1107 = *(void *)(v911 + 40);
      *(void *)(MachineInstr + 24) = v1107;
      uint64_t v1108 = *(void *)(v1107 + 32);
      uint64_t v1109 = *(unsigned int *)(MachineInstr + 40);
      if (v1109)
      {
        uint64_t v1184 = *(void *)(MachineInstr + 32);
        uint64_t v1185 = *(void *)(v1108 + 40);
        uint64_t v1186 = 32 * v1109;
        do
        {
          if (!*(unsigned char *)v1184)
          {
            uint64_t v1187 = *(unsigned int *)(v1184 + 4);
            if ((int)v1187 >= 0) {
              v1188 = (uint64_t *)(*(void *)(v1185 + 272) + 8 * v1187);
            }
            else {
              v1188 = (uint64_t *)(*(void *)(v1185 + 24) + 16 * (v1187 & 0x7FFFFFFF) + 8);
            }
            uint64_t v1189 = *v1188;
            if (*v1188)
            {
              uint64_t v1190 = *(void *)(v1189 + 16);
              *(void *)(v1189 + 16) = v1184;
              *(void *)(v1184 + 16) = v1190;
              if (*(unsigned char *)(v1184 + 3))
              {
                *(void *)(v1184 + 24) = v1189;
              }
              else
              {
                *(void *)(v1184 + 24) = 0;
                v1188 = (uint64_t *)(v1190 + 24);
              }
            }
            else
            {
              *(void *)(v1184 + 16) = v1184;
              *(void *)(v1184 + 24) = 0;
            }
            uint64_t *v1188 = v1184;
          }
          v1184 += 32;
          v1186 -= 32;
        }
        while (v1186);
      }
      uint64_t v1110 = *(void *)(v1108 + 728);
      if (v1110) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v1110 + 24))(v1110, MachineInstr);
      }
      unint64_t v1111 = *v1076 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v1111 | *(void *)MachineInstr & 7;
      *(void *)(MachineInstr + 8) = v1076;
      *(void *)(v1111 + 8) = MachineInstr;
      void *v1076 = *v1076 & 7 | MachineInstr;
      uint64_t v1341 = 0;
      uint64_t v1342 = 0;
      v1343 = 0;
      HIDWORD(v1340) = v1103;
      LODWORD(v1340) = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v1104, (const llvm::MachineOperand *)&v1340);
      int v1112 = *((_DWORD *)v1278 + 28);
      uint64_t v1341 = 0;
      HIDWORD(v1340) = v1112;
      LODWORD(v1340) = 0;
      uint64_t v1342 = 0;
      v1343 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v1104, (const llvm::MachineOperand *)&v1340);
      unint64_t v1113 = sub_1CB914C88(*(void *)(*(void *)(a1 + 288) + 288), MachineInstr, 0) & 0xFFFFFFFFFFFFFFF8 | 4;
      uint64_t v1114 = *(void *)(a1 + 288) + 312;
      if (v1293[12])
      {
        v1340 = v1293;
        sub_1CC2F6AE4((uint64_t *)&v1340, v1113, v1114, 0);
      }
      else
      {
        v1340 = v1293;
        sub_1CC2F6F18((unint64_t **)&v1340, v1113, v1114, 0);
      }
      for (uint64_t m = (void *)v1293[13]; m; uint64_t m = (void *)m[13])
      {
        uint64_t v1116 = *(void *)(a1 + 288) + 312;
        if (m[12])
        {
          v1340 = m;
          sub_1CC2F6AE4((uint64_t *)&v1340, v1113, v1116, 0);
        }
        else
        {
          v1340 = m;
          sub_1CC2F6F18((unint64_t **)&v1340, v1113, v1116, 0);
        }
      }
      uint64_t v1117 = *(void *)(a1 + 832);
      uint64_t v1118 = *(void *)(a1 + 824);
      if (v1117 == v1118)
      {
        uint64_t v1119 = *v1311;
        v1120 = (void *)(v1117 + 8 * v1119);
        if (v1119)
        {
          uint64_t v1121 = 0;
          uint64_t v1122 = 8 * v1119;
          while (*(void *)(v1117 + v1121) != MachineInstr)
          {
            v1121 += 8;
            if (v1122 == v1121) {
              goto LABEL_1558;
            }
          }
          v1120 = (void *)(v1117 + v1121);
        }
LABEL_1558:
        uint64_t v1118 = *(void *)(a1 + 832);
      }
      else
      {
        uint64_t v1123 = *v1313;
        int v1124 = v1123 - 1;
        unsigned int v1125 = (v1123 - 1) & ((MachineInstr >> 4) ^ (MachineInstr >> 9));
        v1120 = (void *)(v1117 + 8 * v1125);
        uint64_t v1126 = *v1120;
        if (*v1120 == -1)
        {
          v1127 = 0;
LABEL_1625:
          if (v1127) {
            v1120 = v1127;
          }
          if (*v1120 != MachineInstr) {
            v1120 = (void *)(v1117 + 8 * v1123);
          }
        }
        else
        {
          v1127 = 0;
          int v1128 = 1;
          while (v1126 != MachineInstr)
          {
            if (v1127) {
              BOOL v1129 = 0;
            }
            else {
              BOOL v1129 = v1126 == -2;
            }
            if (v1129) {
              v1127 = v1120;
            }
            unsigned int v1130 = v1125 + v1128++;
            unsigned int v1125 = v1130 & v1124;
            v1120 = (void *)(v1117 + 8 * (v1130 & v1124));
            uint64_t v1126 = *v1120;
            if (*v1120 == -1) {
              goto LABEL_1625;
            }
          }
        }
      }
      BOOL v22 = v1117 == v1118;
      v1131 = v1311;
      if (!v22) {
        v1131 = v1313;
      }
      if (v1120 != (void *)(v1117 + 8 * *v1131))
      {
        void *v1120 = -2;
        ++*(_DWORD *)(a1 + 848);
      }
    }
    sub_1CC43B958(a1, (llvm::MachineInstr *)v9);
    v1340 = &v1342;
    uint64_t v1341 = 0x800000000;
    unsigned int v1132 = *((_DWORD *)v1293 + 2);
    uint64_t v1133 = *v1293;
    if (!v1132)
    {
      unsigned int v1132 = 0;
LABEL_1573:
      v1137 = (void *)(v1133 + 24 * v1132);
      goto LABEL_1574;
    }
    uint64_t v1134 = *(void *)(v1133 + 24 * v1132 - 16);
    unsigned int v1135 = *(_DWORD *)(v1303 + 24);
    unsigned int v1136 = (v1134 >> 1) & 3 | *(_DWORD *)((v1134 & 0xFFFFFFFFFFFFFFF8) + 24);
    v1137 = (void *)*v1293;
    unint64_t v1138 = *((unsigned int *)v1293 + 2);
    if (v1135 >= v1136) {
      goto LABEL_1573;
    }
    do
    {
      unint64_t v1139 = v1138 >> 1;
      uint64_t v1140 = v1137[3 * (v1138 >> 1) + 1];
      LODWORD(v1140) = (v1140 >> 1) & 3 | *(_DWORD *)((v1140 & 0xFFFFFFFFFFFFFFF8) + 24);
      v1138 -= (v1138 >> 1) + 1;
      BOOL v1141 = v1135 >= v1140;
      if (v1135 >= v1140) {
        unint64_t v1142 = v1139 + 1;
      }
      else {
        unint64_t v1142 = 0;
      }
      v1137 += 3 * v1142;
      if (!v1141) {
        unint64_t v1138 = v1139;
      }
    }
    while (v1138);
LABEL_1574:
    v1143 = (void *)(v1133 + 24 * v1132);
    if (v1137 == v1143) {
      goto LABEL_1581;
    }
    unsigned int v1144 = *(_DWORD *)((*v1137 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v1145 = *(_DWORD *)(v1303 + 24);
    if (((*v1137 >> 1) & 3 | v1144) <= v1145 && v1303 == (v1137[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v1137 += 3;
      if (v1137 == v1143) {
        goto LABEL_1581;
      }
      unsigned int v1144 = *(_DWORD *)((*v1137 & 0xFFFFFFFFFFFFFFF8) + 24);
    }
    if (v1145 < v1144)
    {
LABEL_1581:
      uint64_t v1146 = 0;
      goto LABEL_1582;
    }
    uint64_t v1146 = v1137[2];
LABEL_1582:
    llvm::LiveIntervals::pruneValue(*(void *)(a1 + 288), (uint64_t)v1293, v1303 | 4, (uint64_t)&v1340);
    *(void *)(v1146 + 8) = 0;
    uint64_t v1147 = *(void *)(a1 + 288);
    v1148 = (unint64_t *)v1340;
    uint64_t v1149 = v1341;
    uint64_t v1150 = *(void *)(v1147 + 304);
    uint64_t v1151 = *(void *)(v1147 + 248);
    *(void *)uint64_t v1150 = v1151;
    *(void *)(v1150 + 8) = *(void *)(v1151 + 40);
    *(_OWORD *)(v1150 + 16) = *(_OWORD *)(v1147 + 288);
    *(void *)(v1150 + 32) = v1147 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1150);
    *(_DWORD *)(v1150 + 184) = 0;
    if (v1149)
    {
      uint64_t v1152 = 8 * v1149;
      do
      {
        unint64_t v1153 = *v1148++;
        llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v1147 + 304), (uint64_t)v1293, v1153, 0, 0, 0);
        v1152 -= 8;
      }
      while (v1152);
    }
    for (uint64_t n = v1293[13]; n; uint64_t n = *(void *)(n + 104))
    {
      LODWORD(v1341) = 0;
      unsigned int v1155 = *(_DWORD *)(n + 8);
      v1156 = *(void **)n;
      if (!v1155)
      {
        unsigned int v1155 = 0;
LABEL_1597:
        v1160 = &v1156[3 * v1155];
        goto LABEL_1598;
      }
      uint64_t v1157 = v1156[3 * v1155 - 2];
      unsigned int v1158 = *(_DWORD *)(v1303 + 24);
      unsigned int v1159 = (v1157 >> 1) & 3 | *(_DWORD *)((v1157 & 0xFFFFFFFFFFFFFFF8) + 24);
      v1160 = *(void **)n;
      unint64_t v1161 = *(unsigned int *)(n + 8);
      if (v1158 >= v1159) {
        goto LABEL_1597;
      }
      do
      {
        unint64_t v1162 = v1161 >> 1;
        uint64_t v1163 = v1160[3 * (v1161 >> 1) + 1];
        LODWORD(v1163) = (v1163 >> 1) & 3 | *(_DWORD *)((v1163 & 0xFFFFFFFFFFFFFFF8) + 24);
        v1161 -= (v1161 >> 1) + 1;
        BOOL v1164 = v1158 >= v1163;
        if (v1158 >= v1163) {
          unint64_t v1165 = v1162 + 1;
        }
        else {
          unint64_t v1165 = 0;
        }
        v1160 += 3 * v1165;
        if (!v1164) {
          unint64_t v1161 = v1162;
        }
      }
      while (v1161);
LABEL_1598:
      v1166 = &v1156[3 * v1155];
      if (v1160 != v1166)
      {
        unsigned int v1167 = *(_DWORD *)((*v1160 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v1168 = *(_DWORD *)(v1303 + 24);
        if (((*v1160 >> 1) & 3 | v1167) <= v1168 && v1303 == (v1160[1] & 0xFFFFFFFFFFFFFFF8))
        {
          v1160 += 3;
          if (v1160 == v1166) {
            goto LABEL_1605;
          }
          unsigned int v1167 = *(_DWORD *)((*v1160 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        if (v1168 >= v1167)
        {
          uint64_t v1169 = v1160[2];
          goto LABEL_1606;
        }
      }
LABEL_1605:
      uint64_t v1169 = 0;
LABEL_1606:
      llvm::LiveIntervals::pruneValue(*(void *)(a1 + 288), n, v1303 | 4, (uint64_t)&v1340);
      *(void *)(v1169 + 8) = 0;
      int v1170 = v1341;
      if (v1341)
      {
        int v1171 = 0;
        v1172 = v1340;
        v1173 = (char *)v1340 - 8;
        do
        {
          uint64_t v1174 = v1172[v1171];
          while ((v1174 & 0xFFFFFFFFFFFFFFF8) == v1303)
          {
            uint64_t v1174 = *(void *)&v1173[8 * v1170];
            v1172[v1171] = v1174;
            LODWORD(v1341) = --v1170;
            if (v1171 == v1170) {
              goto LABEL_1613;
            }
          }
          ++v1171;
        }
        while (v1171 != v1170);
      }
LABEL_1613:
      v1333 = v1335;
      uint64_t v1334 = 0x800000000;
      llvm::LiveInterval::computeSubRangeUndefs((uint64_t)v1293, (uint64_t)&v1333, *(void *)(n + 112), *(void **)(a1 + 264), *(void *)(*(void *)(a1 + 288) + 288));
      uint64_t v1175 = *(void *)(a1 + 288);
      v1176 = (unint64_t *)v1340;
      uint64_t v1177 = v1341;
      v1178 = v1333;
      uint64_t v1179 = v1334;
      uint64_t v1180 = *(void *)(v1175 + 304);
      uint64_t v1181 = *(void *)(v1175 + 248);
      *(void *)uint64_t v1180 = v1181;
      *(void *)(v1180 + 8) = *(void *)(v1181 + 40);
      *(_OWORD *)(v1180 + 16) = *(_OWORD *)(v1175 + 288);
      *(void *)(v1180 + 32) = v1175 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1180);
      *(_DWORD *)(v1180 + 184) = 0;
      if (v1177)
      {
        uint64_t v1182 = 8 * v1177;
        do
        {
          unint64_t v1183 = *v1176++;
          llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v1175 + 304), n, v1183, 0, v1178, v1179);
          v1182 -= 8;
        }
        while (v1182);
      }
      if (v1333 != v1335) {
        free(v1333);
      }
    }
    sub_1CC43B764(a1, (const llvm::LiveRange *)v1293, 0);
    sub_1CC43B764(a1, v1278, 0);
    if (v1340 != &v1342) {
      free(v1340);
    }
LABEL_411:
    int v134 = 0;
    int v133 = 1;
LABEL_412:
    int v135 = v1315;
    unint64_t v7 = v1311;
    uint64_t v6 = v1312;
    uint64_t v8 = v1313;
LABEL_1207:
    int v5 = v135 | v133;
    if ((v133 & 1) != 0 || !v134) {
LABEL_1678:
    }
      *uint64_t v3 = 0;
LABEL_1679:
    ++v3;
  }
  while (v3 != v6);
  return v5 & 1;
}

uint64_t sub_1CC43B350(uint64_t *a1, uint64_t a2)
{
  if (!byte_1EBCD2D90) {
    return 0;
  }
  uint64_t v33 = 0;
  int v4 = sub_1CC42FB94(a1[34], a2, (_DWORD *)&v33 + 1, &v33, &v32, &v31);
  uint64_t result = 0;
  if (!v4) {
    return result;
  }
  int v6 = v33;
  if ((v33 - 1) < 0x3FFFFFFF) {
    return 0;
  }
  uint64_t v7 = HIDWORD(v33);
  if ((HIDWORD(v33) - 1) < 0x3FFFFFFF) {
    return 0;
  }
  uint64_t v8 = a1[33];
  uint64_t result = sub_1CC43B6D8(v33, a2, v8);
  if (result)
  {
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = a1[36];
    uint64_t v11 = (void *)(v10 + 408);
    unint64_t v12 = *(unsigned int *)(v10 + 416);
    BOOL v13 = (v6 & 0x7FFFFFFFu) >= v12;
    unint64_t v14 = (v6 & 0x7FFFFFFF) - v12;
    if (v13)
    {
      sub_1CB9153B8((uint64_t)v11, v14 + 1, *(void *)(v10 + 424));
    }
    else
    {
      uint64_t v15 = *(void *)(*v11 + 8 * (v6 & 0x7FFFFFFF));
      if (v15)
      {
        if ((v7 & 0x80000000) != 0) {
          uint64_t v16 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v16 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v7);
        }
        uint64_t v17 = *v16;
        if (*v16)
        {
          while ((*(_DWORD *)v17 & 0x80000000) != 0)
          {
            uint64_t v17 = *(void *)(v17 + 24);
            if (!v17) {
              return 0;
            }
          }
          uint64_t v18 = *(void *)(v17 + 8);
LABEL_20:
          if (v18 == a2) {
            goto LABEL_37;
          }
          int v19 = **(unsigned __int16 **)(v18 + 16);
          BOOL v20 = v19 == 19 || v19 == 11;
          if (!v20 || *(void *)(v18 + 24) != v9) {
            goto LABEL_37;
          }
          uint64_t v30 = 0;
          if (sub_1CC42FB94(a1[34], a2, (_DWORD *)&v30 + 1, &v30, &v29, &v28))
          {
            if (v30 == v7) {
              unsigned int v21 = HIDWORD(v30);
            }
            else {
              unsigned int v21 = v30;
            }
            if (v21 - 1 >= 0x3FFFFFFF && (sub_1CC43B6D8(v21, v18, a1[33]) & 1) == 0)
            {
              uint64_t v22 = a1[36];
              unsigned int v23 = (void *)(v22 + 408);
              unint64_t v24 = *(unsigned int *)(v22 + 416);
              BOOL v13 = (v21 & 0x7FFFFFFF) >= v24;
              unint64_t v25 = (v21 & 0x7FFFFFFF) - v24;
              if (v13)
              {
                sub_1CB9153B8((uint64_t)v23, v25 + 1, *(void *)(v22 + 424));
              }
              else
              {
                uint64_t v26 = *(void *)(*v23 + 8 * (v21 & 0x7FFFFFFF));
                if (v26)
                {
                  if (*(_DWORD *)(v15 + 8) && llvm::LiveRange::overlapsFrom(v26, v15, *(void **)v15)) {
                    return 1;
                  }
                  goto LABEL_37;
                }
              }
              llvm::LiveIntervals::createInterval();
            }
LABEL_37:
            uint64_t v27 = *(void *)(v17 + 8);
            while (1)
            {
              uint64_t v17 = *(void *)(v17 + 24);
              if (!v17) {
                break;
              }
              if ((*(_DWORD *)v17 & 0x80000000) == 0)
              {
                uint64_t v18 = *(void *)(v17 + 8);
                if (v18 != v27) {
                  goto LABEL_20;
                }
              }
            }
          }
        }
        return 0;
      }
    }
    llvm::LiveIntervals::createInterval();
  }
  return result;
}

uint64_t sub_1CC43B6D8(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a1);
  }
  uint64_t v4 = *v3;
  if (!v4) {
    return 1;
  }
  while ((*(_DWORD *)v4 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 1;
    }
  }
  uint64_t v6 = *(void *)(v4 + 8);
LABEL_9:
  if (v6 == a2 || ((int v7 = **(unsigned __int16 **)(v6 + 16), v7 != 11) ? (v8 = v7 == 19) : (v8 = 1), !v8))
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return 1;
      }
      if ((*(_DWORD *)v4 & 0x80000000) == 0 && *(void *)(v4 + 8) != v6)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
  return 0;
}

void sub_1CC43B764(uint64_t a1, const llvm::LiveRange *a2, uint64_t a3)
{
  if (llvm::LiveIntervals::shrinkToUses(*(void **)(a1 + 288), (uint64_t)a2, a3)) {
    llvm::LiveIntervals::splitSeparateComponents(*(void *)(a1 + 288), a2);
  }
}

void sub_1CC43B808(uint64_t a1)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v24;
  uint64_t v23 = 0x800000000;
  uint64_t v2 = *(void *)(a1 + 256);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = a1 + 248;
  v6[0] = &unk_1F260CAB0;
  v6[1] = 0;
  uint64_t v5 = *(void *)(v2 + 40);
  void v6[2] = &v22;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  uint64_t v9 = 0;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 104))(*(void *)(v2 + 16));
  uint64_t v11 = v4;
  int v12 = v23;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v19;
  uint64_t v16 = v19;
  uint64_t v17 = 4;
  int v18 = 0;
  v19[4] = v21;
  v19[5] = v21;
  v19[6] = 4;
  int v20 = 0;
  *(void *)(v7 + 8) = v6;
  llvm::LiveRangeEdit::eliminateDeadDefs(v6, a1 + 920, 0, 0, 0);
  sub_1CD516CC4(v6);
  if (v22 != v24) {
    free(v22);
  }
}

void sub_1CC43B958(uint64_t a1, llvm::MachineInstr *this)
{
  uint64_t v4 = *(void *)(a1 + 832);
  uint64_t v5 = *(unsigned int *)(a1 + 844);
  unsigned int v6 = this >> 4;
  if (v4 != *(void *)(a1 + 824))
  {
    unsigned int v10 = *(_DWORD *)(a1 + 840);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v10 = *(_DWORD *)(a1 + 840);
    if (v5 < v10)
    {
      *(_DWORD *)(a1 + 844) = v5 + 1;
      *(void *)(v4 + 8 * v5) = this;
      goto LABEL_33;
    }
LABEL_12:
    if (3 * v10 <= 4 * ((int)v5 - *(_DWORD *)(a1 + 848)))
    {
      if (v10 >= 0x40) {
        v10 *= 2;
      }
      else {
        unsigned int v10 = 128;
      }
    }
    else if (v10 - v5 >= v10 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 824), v10);
    unsigned int v10 = *(_DWORD *)(a1 + 840);
    uint64_t v4 = *(void *)(a1 + 832);
LABEL_14:
    unsigned int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & (v6 ^ (this >> 9));
    char v13 = (llvm::MachineInstr **)(v4 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 == (llvm::MachineInstr *)-1)
    {
      uint64_t v15 = 0;
LABEL_26:
      if (v15) {
        int v19 = v15;
      }
      else {
        int v19 = v13;
      }
      if (*v19 != this)
      {
        if (*v19 == (llvm::MachineInstr *)-2) {
          --*(_DWORD *)(a1 + 848);
        }
        else {
          ++*(_DWORD *)(a1 + 844);
        }
        *int v19 = this;
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != this)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == (llvm::MachineInstr *)-2;
        }
        if (v17) {
          uint64_t v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        char v13 = (llvm::MachineInstr **)(v4 + 8 * (v18 & v11));
        uint64_t v14 = *v13;
        if (*v13 == (llvm::MachineInstr *)-1) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_33;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 8 * v5;
  uint64_t v9 = *(void **)(a1 + 832);
  while ((llvm::MachineInstr *)*v9 != this)
  {
    if (*v9 == -2) {
      uint64_t v7 = v9;
    }
    ++v9;
    v8 -= 8;
    if (!v8)
    {
      if (!v7) {
        goto LABEL_9;
      }
      *uint64_t v7 = this;
      --*(_DWORD *)(a1 + 848);
      break;
    }
  }
LABEL_33:
  int v20 = *(int32x2_t **)(*(void *)(a1 + 288) + 288);
  int32x2_t v21 = v20[46];
  uint64_t v22 = v20[48].u32[0];
  if (v22)
  {
    LODWORD(v23) = (v22 - 1) & (v6 ^ (this >> 9));
    uint64_t v24 = *(void *)&v21 + 16 * v23;
    unint64_t v25 = *(llvm::MachineInstr **)v24;
    if (*(llvm::MachineInstr **)v24 == this) {
      goto LABEL_40;
    }
    int v26 = 1;
    while (v25 != (llvm::MachineInstr *)-4096)
    {
      int v27 = v23 + v26++;
      uint64_t v23 = v27 & (v22 - 1);
      unint64_t v25 = *(llvm::MachineInstr **)(*(void *)&v21 + 16 * v23);
      if (v25 == this)
      {
        uint64_t v24 = *(void *)&v21 + 16 * v23;
        goto LABEL_40;
      }
    }
  }
  uint64_t v24 = *(void *)&v21 + 16 * v22;
LABEL_40:
  if (v24 != *(void *)&v21 + 16 * v22)
  {
    unint64_t v28 = *(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v24 = -8192;
    v20[47] = vadd_s32(v20[47], (int32x2_t)0x1FFFFFFFFLL);
    *(void *)(v28 + 16) = 0;
  }

  llvm::MachineInstr::eraseFromParent(this);
}

uint64_t sub_1CC43BB90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = 0;
  v368[4] = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  BOOL v10 = *(unsigned char *)(a2 + 26) == 0;
  if (*(unsigned char *)(a2 + 26)) {
    unsigned int v11 = *(_DWORD *)(a2 + 8);
  }
  else {
    unsigned int v11 = *(_DWORD *)(a2 + 12);
  }
  unsigned int v347 = v11;
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  unsigned int v13 = *(_DWORD *)(a2 + 20);
  if (v10) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v12;
  }
  if (v10) {
    unint64_t v15 = v9;
  }
  else {
    unint64_t v15 = v8;
  }
  if (v10) {
    uint64_t v16 = v12;
  }
  else {
    uint64_t v16 = v13;
  }
  if (v11 - 1 < 0x3FFFFFFF) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 288);
  int v19 = (void *)(v18 + 408);
  unint64_t v20 = *(unsigned int *)(v18 + 416);
  BOOL v48 = (v11 & 0x7FFFFFFF) >= v20;
  unint64_t v21 = (v11 & 0x7FFFFFFF) - v20;
  if (v48)
  {
    sub_1CB9153B8((uint64_t)v19, v21 + 1, *(void *)(v18 + 424));
LABEL_94:
    llvm::LiveIntervals::createInterval();
  }
  uint64_t v22 = *(const llvm::LiveRange **)(*v19 + 8 * (v11 & 0x7FFFFFFF));
  if (!v22) {
    goto LABEL_94;
  }
  uint64_t v23 = *(void *)(v18 + 288);
  __int16 v24 = *(_WORD *)(a3 + 44);
  unint64_t v25 = a3;
  if ((v24 & 4) != 0)
  {
    unint64_t v25 = a3;
    do
      unint64_t v25 = *(void *)v25 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v25 + 44) & 4) != 0);
  }
  uint64_t v26 = a3;
  if ((v24 & 8) != 0)
  {
    uint64_t v26 = a3;
    do
      uint64_t v26 = *(void *)(v26 + 8);
    while ((*(_WORD *)(v26 + 44) & 8) != 0);
  }
  uint64_t v27 = *(void *)(v26 + 8);
  if (v25 != v27)
  {
    while (1)
    {
      unsigned int v28 = **(unsigned __int16 **)(v25 + 16);
      BOOL v120 = v28 > 0x17;
      int v29 = (1 << v28) & 0x83E000;
      if (v120 || v29 == 0) {
        break;
      }
      unint64_t v25 = *(void *)(v25 + 8);
      if (v25 == v27)
      {
        unint64_t v25 = *(void *)(v26 + 8);
        break;
      }
    }
  }
  uint64_t v31 = *(void *)(v23 + 368);
  uint64_t v32 = *(unsigned int *)(v23 + 384);
  if (v32)
  {
    LODWORD(v33) = ((v25 >> 4) ^ (v25 >> 9)) & (v32 - 1);
    uint64_t v34 = (uint64_t *)(v31 + 16 * v33);
    uint64_t v35 = *v34;
    if (v25 == *v34) {
      goto LABEL_32;
    }
    int v36 = 1;
    while (v35 != -4096)
    {
      int v37 = v33 + v36++;
      uint64_t v33 = v37 & (v32 - 1);
      uint64_t v35 = *(void *)(v31 + 16 * v33);
      if (v25 == v35)
      {
        uint64_t v34 = (uint64_t *)(v31 + 16 * v33);
        goto LABEL_32;
      }
    }
  }
  uint64_t v34 = (uint64_t *)(v31 + 16 * v32);
LABEL_32:
  uint64_t v38 = v34[1];
  unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v40 = *((_DWORD *)v22 + 2);
  unint64_t v41 = *(void **)v22;
  if (!v40)
  {
    unsigned int v40 = 0;
    goto LABEL_43;
  }
  uint64_t v42 = v41[3 * v40 - 2];
  unsigned int v43 = *(_DWORD *)(v39 + 24);
  if (v43 >= ((v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_43:
    int v44 = &v41[3 * v40];
    goto LABEL_44;
  }
  int v44 = *(void **)v22;
  unint64_t v45 = *((unsigned int *)v22 + 2);
  do
  {
    unint64_t v46 = v45 >> 1;
    uint64_t v47 = v44[3 * (v45 >> 1) + 1];
    LODWORD(v47) = (v47 >> 1) & 3 | *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF8) + 24);
    v45 -= (v45 >> 1) + 1;
    BOOL v48 = v43 >= v47;
    if (v43 >= v47) {
      unint64_t v49 = v46 + 1;
    }
    else {
      unint64_t v49 = 0;
    }
    v44 += 3 * v49;
    if (!v48) {
      unint64_t v45 = v46;
    }
  }
  while (v45);
LABEL_44:
  uint64_t v50 = &v41[3 * v40];
  if (v44 == v50
    || ((*v44 >> 1) & 3 | *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v39 + 24))
  {
    return 0;
  }
  uint64_t v51 = v44[2];
  unint64_t v52 = v44[1] & 0xFFFFFFFFFFFFFFF8;
  int v53 = v44 + 3;
  if (v39 == v52 && v53 == v50)
  {
    if (!v51) {
      return 0;
    }
    unint64_t v55 = *(void *)(v51 + 8);
  }
  else
  {
    unint64_t v55 = *(void *)(v51 + 8);
    if (v55 == v39) {
      return 0;
    }
  }
  if (v55 < 8 || (v55 & 6) == 0) {
    return 0;
  }
  uint64_t v57 = *(void *)((v55 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!v57) {
    return 0;
  }
  int v58 = **(unsigned __int16 **)(v57 + 16);
  if (v58 == 19 || v58 == 11)
  {
    uint64_t result = 0;
    *a4 = 1;
    return result;
  }
  unint64_t v341 = v15;
  uint64_t v342 = a1;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 280) + 152))(*(void *)(a1 + 280), v57);
  if (result)
  {
    uint64_t v60 = *(void *)(v57 + 16);
    if (*(_WORD *)v60 != 10)
    {
      if ((*(unsigned char *)(v60 + 11) & 0x20) == 0) {
        return 0;
      }
      uint64_t v61 = *(llvm::TargetInstrInfo **)(v342 + 280);
      uint64_t v338 = *(llvm::AAResults **)(v342 + 304);
      if (((*(uint64_t (**)(llvm::TargetInstrInfo *, uint64_t))(*(void *)v61 + 32))(v61, v57) & 1) == 0)
      {
        uint64_t result = llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v61, (const llvm::MachineInstr *)v57, v338);
        if (!result) {
          return result;
        }
      }
    }
    uint64_t v62 = *(unsigned int *)(v57 + 40);
    if (!v62) {
      return 0;
    }
    uint64_t v63 = 32 * v62;
    for (uint64_t i = (_DWORD *)(*(void *)(v57 + 32) + 4); ; i += 8)
    {
      int v65 = *(i - 1);
      if ((v65 & 0x10000FF) == 0x1000000 && *i == v11)
      {
        int v66 = v65 & 0xFFF00;
        int v67 = v65 & 0x10000000;
        if (!v66 || v67 != 0) {
          break;
        }
      }
      uint64_t result = 0;
      v63 -= 32;
      if (!v63) {
        return result;
      }
    }
    BOOL v346 = 0;
    BOOL isSafeToMove = llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v57, *(llvm::AAResults **)(v342 + 304), &v346);
    BOOL v70 = isSafeToMove;
    uint64_t result = 0;
    if (v70)
    {
      if (*(unsigned char *)(*(void *)(v57 + 16) + 4) != 1) {
        return 0;
      }
      unint64_t v71 = *(_DWORD **)(a3 + 32);
      if ((*v71 & 0xFFF00) != 0 && (*v71 & 0x10000000) == 0) {
        return 0;
      }
      uint64_t v73 = v16;
      int v339 = v71[1];
      if (v14)
      {
        if (v16) {
          return 0;
        }
      }
      unint64_t v337 = (void *)(*(uint64_t (**)(void))(**(void **)(v342 + 280) + 16))(*(void *)(v342 + 280));
      if (**(_WORD **)(v57 + 16) == 10)
      {
LABEL_123:
        uint64_t v335 = *(void *)(v51 + 8);
        int v366 = v368;
        uint64_t v367 = 0x800000000;
        uint64_t v84 = *(void *)(v342 + 256);
        uint64_t v85 = *(void *)(v342 + 288);
        int v348 = (llvm::MachineOperand *)&unk_1F260CAB0;
        uint64_t v349 = 0;
        uint64_t v86 = *(void *)(v84 + 40);
        unint64_t v350 = (void **)&v366;
        uint64_t v351 = v86;
        uint64_t v352 = v85;
        uint64_t v353 = 0;
        uint64_t v354 = (*(uint64_t (**)(void))(**(void **)(v84 + 16) + 104))(*(void *)(v84 + 16));
        uint64_t v355 = v342 + 248;
        int v356 = v367;
        char v357 = 0;
        uint64_t v358 = 0;
        uint64_t v359 = v363;
        BOOL v360 = v363;
        uint64_t v361 = 4;
        int v362 = 0;
        v363[4] = v365;
        v363[5] = v365;
        v363[6] = 4;
        int v364 = 0;
        *(void *)(v351 + 8) = &v348;
        int v87 = llvm::LiveRangeEdit::allUsesAvailableAt((uint64_t)&v348, v57, v335, v38);
        sub_1CD516CC4(&v348);
        if (v366 != v368) {
          free(v366);
        }
        if (!v87) {
          return 0;
        }
        unint64_t v88 = *(unsigned __int8 **)(a3 + 56);
        uint64_t v345 = v88;
        if (v88) {
          llvm::MetadataTracking::track((uint64_t)&v345, v88, 2);
        }
        uint64_t v336 = *(void *)(a3 + 24);
        uint64_t v89 = a3;
        if ((*(unsigned char *)a3 & 4) == 0)
        {
          uint64_t v89 = a3;
          if ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            uint64_t v89 = a3;
            do
              uint64_t v89 = *(void *)(v89 + 8);
            while ((*(_WORD *)(v89 + 44) & 8) != 0);
          }
        }
        unint64_t v90 = *(void **)(v89 + 8);
        (*(void (**)(void, uint64_t, void *, unint64_t, uint64_t, uint64_t, void))(**(void **)(v342 + 280) + 176))(*(void *)(v342 + 280), v336, v90, v341, v14, v57, *(void *)(v342 + 272));
        unint64_t v91 = *v90 & 0xFFFFFFFFFFFFFFF8;
        if (!v91 || (*(unsigned char *)v91 & 4) == 0)
        {
          while ((*(_WORD *)(v91 + 44) & 4) != 0)
            unint64_t v91 = *(void *)v91 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v344 = v345;
        if (v345) {
          llvm::MetadataTracking::track((uint64_t)&v344, v345, 2);
        }
        uint64_t v92 = (unsigned __int8 **)(v91 + 56);
        if (&v344 == (unsigned __int8 **)(v91 + 56))
        {
          if (!v344) {
            goto LABEL_143;
          }
          int v331 = *v344;
          if ((v331 - 4) > 0x1E)
          {
            if ((v331 - 3) >= 0xFFFFFFFE) {
              uint64_t v334 = v344;
            }
            else {
              uint64_t v334 = 0;
            }
            if ((v331 - 3) < 0xFFFFFFFE)
            {
              if (v331 == 3) {
                *((void *)v344 + 1) = 0;
              }
LABEL_143:
              uint64_t v95 = *(void *)(a2 + 32);
              if (v16)
              {
                uint64_t v96 = *(_DWORD **)(v91 + 32);
                if (((*v96 >> 8) & 0xFFF) == v16)
                {
                  unint64_t v97 = *(void *)(*(void *)(*(void *)(v342 + 264) + 24) + 16 * (v341 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v98 = v337;
                  if (v337 != (void *)v97)
                  {
                    if (!v337) {
                      goto LABEL_162;
                    }
                    if (!v97) {
                      goto LABEL_162;
                    }
                    uint64_t v99 = *(void *)(*(void *)(v342 + 272) + 240);
                    unint64_t v100 = (unint64_t)(*(void *)(*(void *)(v342 + 272) + 248) - v99) >> 3;
                    if (!v100) {
                      goto LABEL_162;
                    }
                    unsigned int v101 = 0;
                    unint64_t v102 = *(_DWORD **)(v97 + 8);
                    uint64_t v103 = (_DWORD *)v337[1];
                    while (1)
                    {
                      unsigned int v104 = *v102 & *v103;
                      if (v104) {
                        break;
                      }
                      ++v102;
                      ++v103;
                      v101 += 32;
                      if (v101 >= v100) {
                        goto LABEL_162;
                      }
                    }
                    unsigned int v98 = *(void **)(v99 + 8 * (__clz(__rbit32(v104)) + v101));
                  }
                  if (v98)
                  {
                    uint64_t v73 = 0;
                    *v96 &= 0xEFF000FF;
                    uint64_t v95 = (uint64_t)v98;
                  }
                }
              }
LABEL_162:
              int v348 = (llvm::MachineOperand *)&v350;
              uint64_t v349 = 0x400000000;
              int v108 = *(_DWORD *)(a3 + 40);
              unsigned int v109 = *(unsigned __int16 *)(*(void *)(a3 + 16) + 2);
              if (v108 - v109 >= 5) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v108 != v109)
              {
                do
                {
                  unsigned int v116 = v109;
                  unint64_t v117 = *(void *)(a3 + 32) + 32 * v109;
                  if (!*(unsigned char *)v117 && (*(_DWORD *)(v117 + 4) - 1) <= 0x3FFFFFFE)
                  {
                    if (v349 >= HIDWORD(v349))
                    {
                      BOOL v120 = (unint64_t)v348 <= v117 && (unint64_t)v348 + 32 * v349 > v117;
                      if (!v120) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    int v118 = (_OWORD *)((char *)v348 + 32 * v349);
                    long long v119 = *(_OWORD *)(v117 + 16);
                    _OWORD *v118 = *(_OWORD *)v117;
                    v118[1] = v119;
                    LODWORD(v349) = v349 + 1;
                  }
                  unsigned int v109 = v116 + 1;
                }
                while (v108 != v116 + 1);
              }
              sub_1CBB16C94(*(int32x2_t **)(*(void *)(v342 + 288) + 288), a3, v91);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
              uint64_t v110 = *(void *)(v342 + 832);
              uint64_t v111 = *(unsigned int *)(v342 + 844);
              if (v110 == *(void *)(v342 + 824))
              {
                if (v111)
                {
                  uint64_t v112 = 0;
                  uint64_t v113 = 8 * v111;
                  unint64_t v114 = *(uint64_t **)(v342 + 832);
                  do
                  {
                    if (*v114 == a3) {
                      goto LABEL_209;
                    }
                    if (*v114 == -2) {
                      uint64_t v112 = v114;
                    }
                    ++v114;
                    v113 -= 8;
                  }
                  while (v113);
                  if (v112)
                  {
                    *uint64_t v112 = a3;
                    --*(_DWORD *)(v342 + 848);
                    goto LABEL_209;
                  }
                }
                unsigned int v115 = *(_DWORD *)(v342 + 840);
                if (v111 < v115)
                {
                  *(_DWORD *)(v342 + 844) = v111 + 1;
                  *(void *)(v110 + 8 * v111) = a3;
                  goto LABEL_209;
                }
              }
              else
              {
                unsigned int v115 = *(_DWORD *)(v342 + 840);
              }
              if (3 * v115 <= 4 * ((int)v111 - *(_DWORD *)(v342 + 848)))
              {
                if (v115 >= 0x40) {
                  v115 *= 2;
                }
                else {
                  unsigned int v115 = 128;
                }
              }
              else if (v115 - v111 >= v115 >> 3)
              {
                goto LABEL_190;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v342 + 824), v115);
              unsigned int v115 = *(_DWORD *)(v342 + 840);
              uint64_t v110 = *(void *)(v342 + 832);
LABEL_190:
              unsigned int v121 = v115 - 1;
              unsigned int v122 = (v115 - 1) & ((a3 >> 4) ^ (a3 >> 9));
              int v123 = (uint64_t *)(v110 + 8 * v122);
              uint64_t v124 = *v123;
              if (*v123 == -1)
              {
                int v125 = 0;
LABEL_202:
                if (v125) {
                  BOOL v129 = v125;
                }
                else {
                  BOOL v129 = v123;
                }
                if (*v129 != a3)
                {
                  if (*v129 == -2) {
                    --*(_DWORD *)(v342 + 848);
                  }
                  else {
                    ++*(_DWORD *)(v342 + 844);
                  }
                  *BOOL v129 = a3;
                }
              }
              else
              {
                int v125 = 0;
                int v126 = 1;
                while (v124 != a3)
                {
                  if (v125) {
                    BOOL v127 = 0;
                  }
                  else {
                    BOOL v127 = v124 == -2;
                  }
                  if (v127) {
                    int v125 = v123;
                  }
                  unsigned int v128 = v122 + v126++;
                  unsigned int v122 = v128 & v121;
                  int v123 = (uint64_t *)(v110 + 8 * (v128 & v121));
                  uint64_t v124 = *v123;
                  if (*v123 == -1) {
                    goto LABEL_202;
                  }
                }
              }
LABEL_209:
              int v366 = v368;
              uint64_t v367 = 0x400000000;
              unsigned int v130 = *(unsigned __int16 *)(*(void *)(v91 + 16) + 2);
              int v131 = *(_DWORD *)(v91 + 40);
              if (v131 != v130)
              {
                unsigned int v148 = 0;
                do
                {
                  uint64_t v149 = *(void *)(v91 + 32);
                  unsigned int v150 = v130;
                  if ((*(_DWORD *)(v149 + 32 * v130) & 0x10000FF) == 0x1000000)
                  {
                    if (v148 >= HIDWORD(v367)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v366 + v148) = *(_DWORD *)(v149 + 32 * v130 + 4);
                    unsigned int v148 = v367 + 1;
                    LODWORD(v367) = v367 + 1;
                  }
                  ++v130;
                }
                while (v131 != v150 + 1);
              }
              uint64_t v132 = *(unsigned int **)(v91 + 32);
              if ((v341 & 0x80000000) == 0)
              {
                if (v132[1] == v339) {
                  goto LABEL_390;
                }
                *v132 |= 0x4000000u;
                memset(&v343[1], 0, 24);
                LODWORD(v343[0]) = 50331648;
                HIDWORD(v343[0]) = v339;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v91, *(llvm::MachineFunction **)(*(void *)(v91 + 24) + 32), (const llvm::MachineOperand *)v343);
                __int16 v133 = *(_WORD *)(v91 + 44);
                unint64_t v134 = v91;
                if ((v133 & 4) != 0)
                {
                  unint64_t v134 = v91;
                  do
                    unint64_t v134 = *(void *)v134 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v134 + 44) & 4) != 0);
                }
                uint64_t v135 = *(void *)(*(void *)(v342 + 288) + 288);
                unint64_t v136 = v91;
                if ((v133 & 8) != 0)
                {
                  unint64_t v136 = v91;
                  do
                    unint64_t v136 = *(void *)(v136 + 8);
                  while ((*(_WORD *)(v136 + 44) & 8) != 0);
                }
                uint64_t v137 = *(void *)(v136 + 8);
                if (v134 != v137)
                {
                  while (1)
                  {
                    unsigned int v138 = **(unsigned __int16 **)(v134 + 16);
                    BOOL v120 = v138 > 0x17;
                    int v139 = (1 << v138) & 0x83E000;
                    if (v120 || v139 == 0) {
                      break;
                    }
                    unint64_t v134 = *(void *)(v134 + 8);
                    if (v134 == v137)
                    {
                      unint64_t v134 = *(void *)(v136 + 8);
                      break;
                    }
                  }
                }
                uint64_t v141 = *(void *)(v135 + 368);
                uint64_t v142 = *(unsigned int *)(v135 + 384);
                if (v142)
                {
                  LODWORD(v143) = ((v134 >> 4) ^ (v134 >> 9)) & (v142 - 1);
                  uint64_t v144 = (uint64_t *)(v141 + 16 * v143);
                  uint64_t v145 = *v144;
                  if (v134 == *v144) {
                    goto LABEL_279;
                  }
                  int v146 = 1;
                  while (v145 != -4096)
                  {
                    int v147 = v143 + v146++;
                    uint64_t v143 = v147 & (v142 - 1);
                    uint64_t v145 = *(void *)(v141 + 16 * v143);
                    if (v134 == v145)
                    {
                      uint64_t v144 = (uint64_t *)(v141 + 16 * v143);
                      goto LABEL_279;
                    }
                  }
                }
                uint64_t v144 = (uint64_t *)(v141 + 16 * v142);
LABEL_279:
                unsigned int v196 = *(_DWORD *)(*(void *)(v91 + 32) + 4);
                uint64_t v197 = *(void *)(v342 + 272);
                if (v197) {
                  uint64_t v198 = (void *)(v197 + 8);
                }
                else {
                  uint64_t v198 = 0;
                }
                unint64_t v199 = *(unsigned int *)(*v198 + 24 * v196 + 16);
                unint64_t v200 = (_WORD *)(v198[6] + ((v199 >> 3) & 0x1FFFFFFE));
                __int16 v202 = *v200;
                uint64_t v201 = v200 + 1;
                unsigned __int16 v203 = v202 + (v199 & 0xF) * v196;
                unint64_t v204 = v144[1] & 0xFFFFFFFFFFFFFFF8 | 4;
                do
                {
                  uint64_t v205 = *(void *)(v342 + 288);
                  uint64_t v206 = *(void *)(v205 + 680);
                  uint64_t v207 = *(void *)(v206 + 8 * v203);
                  if (v207)
                  {
                    uint64_t v208 = v205 + 312;
                    if (*(void *)(v207 + 96))
                    {
                      v343[0] = *(unint64_t **)(v206 + 8 * v203);
                      sub_1CC2F6AE4((uint64_t *)v343, v204, v208, 0);
                    }
                    else
                    {
                      v343[0] = *(unint64_t **)(v206 + 8 * v203);
                      sub_1CC2F6F18(v343, v204, v208, 0);
                    }
                  }
                  int v209 = *v201++;
                  v203 += v209;
                }
                while (v209);
                goto LABEL_390;
              }
              unint64_t v151 = ((unint64_t)*v132 >> 8) & 0xFFF;
              if (v337)
              {
                BOOL v152 = *(void **)(v342 + 272);
                if (v151)
                {
                  uint64_t v95 = (*(uint64_t (**)(void *, uint64_t, void *, unint64_t))(*v152 + 184))(v152, v95, v337, v151);
                }
                else if ((void *)v95 == v337)
                {
                  uint64_t v95 = (uint64_t)v337;
                }
                else if (v95)
                {
                  uint64_t v229 = v152[30];
                  unint64_t v230 = (unint64_t)(v152[31] - v229) >> 3;
                  if (v230)
                  {
                    unsigned int v231 = 0;
                    int v232 = (_DWORD *)v337[1];
                    unint64_t v233 = *(_DWORD **)(v95 + 8);
                    while (1)
                    {
                      unsigned int v234 = *v232 & *v233;
                      if (v234) {
                        break;
                      }
                      uint64_t v95 = 0;
                      ++v232;
                      ++v233;
                      v231 += 32;
                      if (v231 >= v230) {
                        goto LABEL_239;
                      }
                    }
                    uint64_t v95 = *(void *)(v229 + 8 * (__clz(__rbit32(v234)) + v231));
                  }
                  else
                  {
                    uint64_t v95 = 0;
                  }
                }
              }
LABEL_239:
              uint64_t v153 = *(void *)(v342 + 288);
              unint64_t v154 = v341 & 0x7FFFFFFF;
              uint64_t v155 = (void *)(v153 + 408);
              unint64_t v156 = *(unsigned int *)(v153 + 416);
              BOOL v48 = v154 >= v156;
              unint64_t v157 = v154 - v156;
              if (v48)
              {
                sub_1CB9153B8((uint64_t)v155, v157 + 1, *(void *)(v153 + 424));
              }
              else
              {
                uint64_t v158 = *(void *)(*v155 + 8 * v154);
                if (v158)
                {
                  uint64_t v161 = *(void *)(v158 + 104);
                  unint64_t v160 = (unint64_t **)(v158 + 104);
                  for (uint64_t j = v161; j; uint64_t j = *(void *)(j + 104))
                  {
                    uint64_t v162 = *(void *)(j + 112);
                    if (v73) {
                      uint64_t v162 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v342 + 272) + 216))(*(void *)(v342 + 272), v73, v162);
                    }
                    *(void *)(j + 112) = v162;
                  }
                  *(void *)(*(void *)(*(void *)(v342 + 264) + 24) + 16 * v154) = v95 & 0xFFFFFFFFFFFFFFFBLL;
                  sub_1CC43DA08(v342, v341, v341, v73);
                  **(_DWORD **)(v91 + 32) = **(_DWORD **)(v91 + 32) & 0xFFF000FF | ((v151 & 0xFFF) << 8);
                  if (v151)
                  {
                    unint64_t v163 = (unint64_t)*v160;
                    if (!*v160) {
                      goto LABEL_390;
                    }
                    uint64_t v164 = *(void *)(v342 + 288);
                    __int16 v165 = *(_WORD *)(v91 + 44);
                    unint64_t v166 = v91;
                    if ((v165 & 4) != 0)
                    {
                      unint64_t v166 = v91;
                      do
                        unint64_t v166 = *(void *)v166 & 0xFFFFFFFFFFFFFFF8;
                      while ((*(_WORD *)(v166 + 44) & 4) != 0);
                    }
                    uint64_t v167 = *(void *)(v164 + 288);
                    unint64_t v168 = v91;
                    if ((v165 & 8) != 0)
                    {
                      unint64_t v168 = v91;
                      do
                        unint64_t v168 = *(void *)(v168 + 8);
                      while ((*(_WORD *)(v168 + 44) & 8) != 0);
                    }
                    uint64_t v169 = *(void *)(v168 + 8);
                    if (v166 != v169)
                    {
                      do
                      {
                        unsigned int v170 = **(unsigned __int16 **)(v166 + 16);
                        BOOL v120 = v170 > 0x17;
                        int v171 = (1 << v170) & 0x83E000;
                        if (v120 || v171 == 0) {
                          goto LABEL_256;
                        }
                        unint64_t v166 = *(void *)(v166 + 8);
                      }
                      while (v166 != v169);
                      unint64_t v166 = *(void *)(v168 + 8);
                    }
LABEL_256:
                    uint64_t v173 = *(void *)(v167 + 368);
                    uint64_t v174 = *(unsigned int *)(v167 + 384);
                    if (v174)
                    {
                      LODWORD(v175) = ((v166 >> 4) ^ (v166 >> 9)) & (v174 - 1);
                      uint64_t v176 = (uint64_t *)(v173 + 16 * v175);
                      uint64_t v177 = *v176;
                      if (v166 != *v176)
                      {
                        int v178 = 1;
                        do
                        {
                          if (v177 == -4096) {
                            goto LABEL_290;
                          }
                          int v179 = v175 + v178++;
                          uint64_t v175 = v179 & (v174 - 1);
                          uint64_t v177 = *(void *)(v173 + 16 * v175);
                        }
                        while (v166 != v177);
                        uint64_t v176 = (uint64_t *)(v173 + 16 * v175);
                      }
                    }
                    else
                    {
LABEL_290:
                      uint64_t v176 = (uint64_t *)(v173 + 16 * v174);
                    }
                    char v210 = 0;
                    uint64_t v211 = *(void *)(*(void *)(*(void *)(v342 + 272) + 232) + 8 * v151);
                    unint64_t v212 = v176[1] & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v213 = 2;
                    if ((*(unsigned char *)(*(void *)(v91 + 32) + 3) & 0x40) == 0) {
                      uint64_t v213 = 4;
                    }
                    uint64_t v214 = v213 | v212;
                    uint64_t v215 = v164 + 312;
                    while (1)
                    {
                      unsigned int v216 = *(_DWORD *)(v163 + 8);
                      if ((*(void *)(v163 + 112) & v211) != 0)
                      {
                        if (!v216)
                        {
                          if (*(void *)(v163 + 96))
                          {
                            v343[0] = (unint64_t *)v163;
                            sub_1CC2F6AE4((uint64_t *)v343, v214, v215, 0);
                          }
                          else
                          {
                            v343[0] = (unint64_t *)v163;
                            sub_1CC2F6F18(v343, v214, v215, 0);
                          }
                        }
                        goto LABEL_312;
                      }
                      unint64_t v217 = *(void *)v163;
                      if (v216)
                      {
                        uint64_t v218 = *(void *)(v217 + 24 * v216 - 16);
                        unsigned int v219 = *(_DWORD *)(v212 + 24) | 2;
                        unsigned int v220 = (v218 >> 1) & 3 | *(_DWORD *)((v218 & 0xFFFFFFFFFFFFFFF8) + 24);
                        uint64_t v221 = *(void **)v163;
                        unint64_t v222 = *(unsigned int *)(v163 + 8);
                        if (v219 < v220)
                        {
                          do
                          {
                            unint64_t v223 = v222 >> 1;
                            uint64_t v224 = v221[3 * (v222 >> 1) + 1];
                            LODWORD(v224) = (v224 >> 1) & 3 | *(_DWORD *)((v224 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v222 -= (v222 >> 1) + 1;
                            BOOL v225 = v219 >= v224;
                            if (v219 >= v224) {
                              unint64_t v226 = v223 + 1;
                            }
                            else {
                              unint64_t v226 = 0;
                            }
                            v221 += 3 * v226;
                            if (!v225) {
                              unint64_t v222 = v223;
                            }
                          }
                          while (v222);
                          goto LABEL_309;
                        }
                      }
                      else
                      {
                        unsigned int v216 = 0;
                      }
                      uint64_t v221 = (void *)(v217 + 24 * v216);
LABEL_309:
                      if (v221 != (void *)(v217 + 24 * v216)
                        && ((*v221 >> 1) & 3 | *(_DWORD *)((*v221 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v212 + 24) | 2u)
                        && (uint64_t v227 = v221[2]) != 0)
                      {
                        llvm::LiveRange::removeValNo((uint64_t *)v163, v227);
                        unint64_t v163 = *(void *)(v163 + 104);
                        char v210 = 1;
                        if (!v163) {
                          goto LABEL_318;
                        }
                      }
                      else
                      {
LABEL_312:
                        unint64_t v163 = *(void *)(v163 + 104);
                        if (!v163)
                        {
                          if ((v210 & 1) == 0) {
                            goto LABEL_390;
                          }
LABEL_318:
                          uint64_t v228 = *v160;
                          if (!*v160) {
                            goto LABEL_390;
                          }
                          while (1)
                          {
                            uint64_t v261 = v228;
                            if (!*((_DWORD *)v228 + 2)) {
                              break;
                            }
LABEL_389:
                            unint64_t v160 = (unint64_t **)(v228 + 13);
                            uint64_t v228 = (unint64_t *)v228[13];
                            if (!v228) {
                              goto LABEL_390;
                            }
                          }
                          while (1)
                          {
                            uint64_t v259 = v261[12];
                            uint64_t v228 = (unint64_t *)v261[13];
                            v261[12] = 0;
                            if (v259)
                            {
                              sub_1CB833A08(v259, *(void **)(v259 + 8));
                              MEMORY[0x1D25D9CE0](v259, 0x1020C4062D53EE8);
                            }
                            unint64_t v260 = (unint64_t *)v261[8];
                            if (v260 != v261 + 10) {
                              free(v260);
                            }
                            if ((unint64_t *)*v261 == v261 + 2)
                            {
                              if (!v228)
                              {
LABEL_509:
                                *unint64_t v160 = 0;
                                goto LABEL_390;
                              }
                            }
                            else
                            {
                              free((void *)*v261);
                              if (!v228) {
                                goto LABEL_509;
                              }
                            }
                            uint64_t v261 = v228;
                            if (*((_DWORD *)v228 + 2))
                            {
                              *unint64_t v160 = v228;
                              goto LABEL_389;
                            }
                          }
                        }
                      }
                    }
                  }
                  **(_DWORD **)(v91 + 32) &= ~0x10000000u;
                  uint64_t v180 = *v160;
                  if (!*v160) {
                    goto LABEL_390;
                  }
                  unsigned int v340 = *(llvm::AAResults **)(v342 + 288);
                  __int16 v181 = *(_WORD *)(v91 + 44);
                  unint64_t v182 = v91;
                  if ((v181 & 4) != 0)
                  {
                    unint64_t v182 = v91;
                    do
                      unint64_t v182 = *(void *)v182 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v182 + 44) & 4) != 0);
                  }
                  uint64_t v183 = *((void *)v340 + 36);
                  unint64_t v184 = v91;
                  if ((v181 & 8) != 0)
                  {
                    unint64_t v184 = v91;
                    do
                      unint64_t v184 = *(void *)(v184 + 8);
                    while ((*(_WORD *)(v184 + 44) & 8) != 0);
                  }
                  uint64_t v185 = *(void *)(v184 + 8);
                  if (v182 != v185)
                  {
                    do
                    {
                      unsigned int v186 = **(unsigned __int16 **)(v182 + 16);
                      BOOL v120 = v186 > 0x17;
                      int v187 = (1 << v186) & 0x83E000;
                      if (v120 || v187 == 0) {
                        goto LABEL_272;
                      }
                      unint64_t v182 = *(void *)(v182 + 8);
                    }
                    while (v182 != v185);
                    unint64_t v182 = *(void *)(v184 + 8);
                  }
LABEL_272:
                  uint64_t v189 = *(void *)(v183 + 368);
                  uint64_t v190 = *(unsigned int *)(v183 + 384);
                  if (v190)
                  {
                    LODWORD(v191) = ((v182 >> 4) ^ (v182 >> 9)) & (v190 - 1);
                    unint64_t v192 = (uint64_t *)(v189 + 16 * v191);
                    uint64_t v193 = *v192;
                    if (v182 != *v192)
                    {
                      int v194 = 1;
                      do
                      {
                        if (v193 == -4096) {
                          goto LABEL_331;
                        }
                        int v195 = v191 + v194++;
                        uint64_t v191 = v195 & (v190 - 1);
                        uint64_t v193 = *(void *)(v189 + 16 * v191);
                      }
                      while (v182 != v193);
                      unint64_t v192 = (uint64_t *)(v189 + 16 * v191);
                    }
                  }
                  else
                  {
LABEL_331:
                    unint64_t v192 = (uint64_t *)(v189 + 16 * v190);
                  }
                  unint64_t v236 = v192[1] & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v237 = 2;
                  if ((*(unsigned char *)(*(void *)(v91 + 32) + 3) & 0x40) == 0) {
                    uint64_t v237 = 4;
                  }
                  uint64_t v238 = v237 | v236;
                  unint64_t v239 = *(void *)((*(void *)(*(void *)(*(void *)(v342 + 264) + 24) + 16 * v154) & 0xFFFFFFFFFFFFFFF8)
                                   + 24);
                  unsigned int v240 = (void *)((char *)v340 + 312);
                  unsigned int v241 = v237 >> 1;
                  while (1)
                  {
                    unsigned int v242 = *((_DWORD *)v180 + 2);
                    unint64_t v243 = *v180;
                    if (v242)
                    {
                      uint64_t v244 = *(void *)(v243 + 24 * v242 - 16);
                      unsigned int v245 = *(_DWORD *)(v236 + 24) | v241;
                      unsigned int v246 = (v244 >> 1) & 3 | *(_DWORD *)((v244 & 0xFFFFFFFFFFFFFFF8) + 24);
                      uint64_t v247 = (void *)*v180;
                      unint64_t v248 = *((unsigned int *)v180 + 2);
                      if (v245 < v246)
                      {
                        do
                        {
                          unint64_t v249 = v248 >> 1;
                          uint64_t v250 = v247[3 * (v248 >> 1) + 1];
                          LODWORD(v250) = (v250 >> 1) & 3 | *(_DWORD *)((v250 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v248 -= (v248 >> 1) + 1;
                          BOOL v251 = v245 >= v250;
                          if (v245 >= v250) {
                            unint64_t v252 = v249 + 1;
                          }
                          else {
                            unint64_t v252 = 0;
                          }
                          v247 += 3 * v252;
                          if (!v251) {
                            unint64_t v248 = v249;
                          }
                        }
                        while (v248);
                        goto LABEL_346;
                      }
                    }
                    else
                    {
                      unsigned int v242 = 0;
                    }
                    uint64_t v247 = (void *)(v243 + 24 * v242);
LABEL_346:
                    if (v247 == (void *)(v243 + 24 * v242)
                      || ((*v247 >> 1) & 3 | *(_DWORD *)((*v247 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v236 + 24) | v241))
                    {
                      if (v180[12])
                      {
                        v343[0] = v180;
                        sub_1CC2F6AE4((uint64_t *)v343, v238, (uint64_t)v240, 0);
                      }
                      else
                      {
                        v343[0] = v180;
                        sub_1CC2F6F18(v343, v238, (uint64_t)v240, 0);
                      }
                    }
                    uint64_t v253 = v180 + 13;
                    uint64_t v180 = (unint64_t *)v180[13];
                    v239 &= ~v253[1];
                    if (!v180)
                    {
                      if (v239)
                      {
                        *((void *)v340 + 49) += 120;
                        uint64_t v254 = *((void *)v340 + 39);
                        if (((v254 + 7) & 0xFFFFFFFFFFFFFFF8) - v254 + 120 > *((void *)v340 + 40) - v254)
                        {
                          unsigned int v256 = *((_DWORD *)v340 + 84) >> 7;
                          if (v256 >= 0x1E) {
                            LOBYTE(v256) = 30;
                          }
                          uint64_t v257 = 4096 << v256;
                          unsigned int v255 = (unint64_t *)operator new(4096 << v256, (std::align_val_t)8uLL);
                          unsigned int v258 = *((_DWORD *)v340 + 84);
                          if (v258 >= *((_DWORD *)v340 + 85)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(*((void *)v340 + 41) + 8 * v258) = v255;
                          ++*((_DWORD *)v340 + 84);
                          *((void *)v340 + 40) = (char *)v255 + v257;
                        }
                        else
                        {
                          unsigned int v255 = (unint64_t *)((v254 + 7) & 0xFFFFFFFFFFFFFFF8);
                        }
                        *unsigned int v240 = v255 + 15;
                        *unsigned int v255 = (unint64_t)(v255 + 2);
                        v255[1] = 0x200000000;
                        v255[8] = (unint64_t)(v255 + 10);
                        v255[9] = 0x200000000;
                        v255[12] = 0;
                        v255[13] = 0;
                        v255[14] = v239;
                        v255[13] = (unint64_t)*v160;
                        *unint64_t v160 = v255;
                        if (v255[12])
                        {
                          v343[0] = v255;
                          sub_1CC2F6AE4((uint64_t *)v343, v238, (uint64_t)v240, 0);
                        }
                        else
                        {
                          v343[0] = v255;
                          sub_1CC2F6F18(v343, v238, (uint64_t)v240, 0);
                        }
                      }
LABEL_390:
                      uint64_t v262 = *(_DWORD **)(v91 + 32);
                      if ((*v262 & 0xFFF00) != 0) {
                        *v262 |= 0x10000000u;
                      }
                      if (v349)
                      {
                        uint64_t v263 = v348;
                        uint64_t v264 = 32 * v349;
                        do
                        {
                          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v91, *(llvm::MachineFunction **)(*(void *)(v91 + 24) + 32), v263);
                          uint64_t v263 = (llvm::MachineOperand *)((char *)v263 + 32);
                          v264 -= 32;
                        }
                        while (v264);
                      }
                      __int16 v265 = *(_WORD *)(v91 + 44);
                      unint64_t v266 = v91;
                      if ((v265 & 4) != 0)
                      {
                        unint64_t v266 = v91;
                        do
                          unint64_t v266 = *(void *)v266 & 0xFFFFFFFFFFFFFFF8;
                        while ((*(_WORD *)(v266 + 44) & 4) != 0);
                      }
                      uint64_t v267 = *(void *)(*(void *)(v342 + 288) + 288);
                      unint64_t v268 = v91;
                      if ((v265 & 8) != 0)
                      {
                        unint64_t v268 = v91;
                        do
                          unint64_t v268 = *(void *)(v268 + 8);
                        while ((*(_WORD *)(v268 + 44) & 8) != 0);
                      }
                      uint64_t v269 = *(void *)(v268 + 8);
                      if (v266 != v269)
                      {
                        while (1)
                        {
                          unsigned int v270 = **(unsigned __int16 **)(v266 + 16);
                          BOOL v120 = v270 > 0x17;
                          int v271 = (1 << v270) & 0x83E000;
                          if (v120 || v271 == 0) {
                            break;
                          }
                          unint64_t v266 = *(void *)(v266 + 8);
                          if (v266 == v269)
                          {
                            unint64_t v266 = *(void *)(v268 + 8);
                            break;
                          }
                        }
                      }
                      uint64_t v273 = *(void *)(v267 + 368);
                      uint64_t v274 = *(unsigned int *)(v267 + 384);
                      if (v274)
                      {
                        LODWORD(v275) = ((v266 >> 4) ^ (v266 >> 9)) & (v274 - 1);
                        uint64_t v276 = (uint64_t *)(v273 + 16 * v275);
                        uint64_t v277 = *v276;
                        if (v266 != *v276)
                        {
                          int v278 = 1;
                          while (v277 != -4096)
                          {
                            int v279 = v275 + v278++;
                            uint64_t v275 = v279 & (v274 - 1);
                            uint64_t v277 = *(void *)(v273 + 16 * v275);
                            if (v266 == v277)
                            {
                              uint64_t v276 = (uint64_t *)(v273 + 16 * v275);
                              goto LABEL_411;
                            }
                          }
                          goto LABEL_410;
                        }
                      }
                      else
                      {
LABEL_410:
                        uint64_t v276 = (uint64_t *)(v273 + 16 * v274);
                      }
LABEL_411:
                      uint64_t v280 = v367;
                      if (v367)
                      {
                        uint64_t v281 = 0;
                        unint64_t v282 = v276[1] & 0xFFFFFFFFFFFFFFF8 | 4;
                        do
                        {
                          unsigned int v283 = *((_DWORD *)v366 + v281);
                          uint64_t v284 = v342;
                          uint64_t v285 = *(void *)(v342 + 272);
                          if (v285) {
                            uint64_t v286 = (void *)(v285 + 8);
                          }
                          else {
                            uint64_t v286 = 0;
                          }
                          unint64_t v287 = *(unsigned int *)(*v286 + 24 * v283 + 16);
                          unsigned int v288 = (_WORD *)(v286[6] + ((v287 >> 3) & 0x1FFFFFFE));
                          __int16 v290 = *v288;
                          uint64_t v289 = v288 + 1;
                          unsigned __int16 v291 = v290 + (v287 & 0xF) * v283;
                          do
                          {
                            uint64_t v292 = *(void *)(v284 + 288);
                            uint64_t v293 = *(void *)(v292 + 680);
                            uint64_t v294 = *(void *)(v293 + 8 * v291);
                            if (v294)
                            {
                              uint64_t v295 = v292 + 312;
                              if (*(void *)(v294 + 96))
                              {
                                v343[0] = *(unint64_t **)(v293 + 8 * v291);
                                sub_1CC2F6AE4((uint64_t *)v343, v282, v295, 0);
                              }
                              else
                              {
                                v343[0] = *(unint64_t **)(v293 + 8 * v291);
                                sub_1CC2F6F18(v343, v282, v295, 0);
                              }
                              uint64_t v284 = v342;
                            }
                            int v296 = *v289++;
                            v291 += v296;
                          }
                          while (v296);
                          ++v281;
                        }
                        while (v281 != v280);
                      }
                      uint64_t v297 = *(void *)(v342 + 264);
                      unsigned int v298 = v347;
                      if ((v347 & 0x80000000) != 0) {
                        BOOL v299 = (uint64_t *)(*(void *)(v297 + 24) + 16 * (v347 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        BOOL v299 = (uint64_t *)(*(void *)(v297 + 272) + 8 * v347);
                      }
                      uint64_t v300 = *v299;
                      if (v300)
                      {
                        while ((*(_DWORD *)v300 & 0x81000000) != 0)
                        {
                          uint64_t v300 = *(void *)(v300 + 24);
                          if (!v300) {
                            goto LABEL_430;
                          }
                        }
                      }
                      else
                      {
LABEL_430:
                        if ((v347 & 0x80000000) != 0) {
                          uint64_t v301 = (uint64_t *)(*(void *)(v297 + 24) + 16 * (v347 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v301 = (uint64_t *)(*(void *)(v297 + 272) + 8 * v347);
                        }
                        uint64_t v302 = *v301;
                        if (*v301)
                        {
                          while ((*(unsigned char *)(v302 + 3) & 1) != 0)
                          {
                            uint64_t v302 = *(void *)(v302 + 24);
                            if (!v302) {
                              goto LABEL_446;
                            }
                          }
                          do
                          {
                            uint64_t v303 = v302;
                            do
                              uint64_t v302 = *(void *)(v302 + 24);
                            while (v302 && (*(unsigned char *)(v302 + 3) & 1) != 0);
                            uint64_t v304 = *(void *)(v303 + 8);
                            if (**(unsigned __int16 **)(v304 + 16) - 13 <= 4)
                            {
                              if ((v341 - 1) > 0x3FFFFFFE) {
                                llvm::MachineOperand::setReg(v303, v341);
                              }
                              else {
                                llvm::MachineOperand::substPhysReg((unsigned int *)v303, v341, *(void *)(v342 + 272));
                              }
                              sub_1CB9173F0(v336, *(unint64_t **)(v91 + 8), *(void *)(v304 + 24), (unint64_t *)v304);
                            }
                          }
                          while (v302);
                          unsigned int v298 = v347;
                        }
                      }
LABEL_446:
                      uint64_t v305 = *(void *)(v342 + 1048);
                      int v306 = *(_DWORD *)(v342 + 1064);
                      if (v306)
                      {
                        unsigned int v307 = (v306 - 1) & (37 * v298);
                        int v308 = *(_DWORD *)(v305 + 4 * v307);
                        if (v298 == v308) {
                          goto LABEL_448;
                        }
                        int v312 = 1;
                        while (v308 != -1)
                        {
                          unsigned int v313 = v307 + v312++;
                          unsigned int v307 = v313 & (v306 - 1);
                          int v308 = *(_DWORD *)(v305 + 4 * v307);
                          if (v298 == v308) {
                            goto LABEL_448;
                          }
                        }
                      }
                      uint64_t v314 = *(void *)(v342 + 264);
                      if ((v298 & 0x80000000) != 0) {
                        unint64_t v315 = (uint64_t *)(*(void *)(v314 + 24) + 16 * (v298 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        unint64_t v315 = (uint64_t *)(*(void *)(v314 + 272) + 8 * v298);
                      }
                      uint64_t v316 = *v315;
                      if (v316)
                      {
                        while ((*(_DWORD *)v316 & 0x81000000) != 0)
                        {
                          uint64_t v316 = *(void *)(v316 + 24);
                          if (!v316) {
                            goto LABEL_474;
                          }
                        }
                        unsigned int v317 = 0;
LABEL_479:
                        int v318 = **(unsigned __int16 **)(*(void *)(v316 + 8) + 16);
                        if (v318 == 19 || v318 == 11) {
                          ++v317;
                        }
                        while (1)
                        {
                          uint64_t v316 = *(void *)(v316 + 24);
                          if (!v316) {
                            break;
                          }
                          if ((*(_DWORD *)v316 & 0x81000000) == 0) {
                            goto LABEL_479;
                          }
                        }
                      }
                      else
                      {
LABEL_474:
                        unsigned int v317 = 0;
                      }
                      if (v317 >= dword_1EBCD3090)
                      {
                        if (v306)
                        {
                          int v320 = v306 - 1;
                          unsigned int v321 = v320 & (37 * v298);
                          uint64_t v322 = (char *)(v305 + 4 * v321);
                          int v323 = *(_DWORD *)v322;
                          if (v298 == *(_DWORD *)v322) {
                            goto LABEL_448;
                          }
                          uint64_t v324 = 0;
                          int v325 = 1;
                          while (v323 != -1)
                          {
                            if (v324) {
                              BOOL v326 = 0;
                            }
                            else {
                              BOOL v326 = v323 == -2;
                            }
                            if (v326) {
                              uint64_t v324 = v322;
                            }
                            unsigned int v327 = v321 + v325++;
                            unsigned int v321 = v327 & v320;
                            uint64_t v322 = (char *)(v305 + 4 * v321);
                            int v323 = *(_DWORD *)v322;
                            if (v298 == *(_DWORD *)v322) {
                              goto LABEL_448;
                            }
                          }
                          if (v324) {
                            int v328 = v324;
                          }
                          else {
                            int v328 = v322;
                          }
                        }
                        else
                        {
                          int v328 = 0;
                        }
                        uint64_t v329 = sub_1CBA855C4((char **)(v342 + 1048), (uint64_t)&v347, (int *)&v347, v328);
                        *(_DWORD *)uint64_t v329 = v347;
                      }
                      else
                      {
                        sub_1CC43B764(v342, v22, v342 + 920);
                        if (*(_DWORD *)(v342 + 928)) {
                          sub_1CC43B808(v342);
                        }
                      }
LABEL_448:
                      if (v366 != v368) {
                        free(v366);
                      }
                      if (v348 != (llvm::MachineOperand *)&v350) {
                        free(v348);
                      }
                      if (v345)
                      {
                        int v309 = *v345;
                        if ((v309 - 4) > 0x1E)
                        {
                          if ((v309 - 3) >= 0xFFFFFFFE) {
                            uint64_t v310 = v345;
                          }
                          else {
                            uint64_t v310 = 0;
                          }
                          if ((v309 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v311 = (unint64_t)(v310 + 8);
                            goto LABEL_462;
                          }
                          if (v309 == 3) {
                            *((void *)v345 + 1) = 0;
                          }
                        }
                        else if ((v345[1] & 0x7F) == 2 || *((_DWORD *)v345 + 3))
                        {
                          uint64_t v330 = *((void *)v345 + 2);
                          if ((v330 & 4) != 0)
                          {
                            unint64_t v311 = v330 & 0xFFFFFFFFFFFFFFF8;
                            if (v311)
                            {
LABEL_462:
                              int v348 = (llvm::MachineOperand *)&v345;
                              sub_1CC5FA668(v311 + 16, &v348);
                            }
                          }
                        }
                      }
                      return 1;
                    }
                  }
                }
              }
              llvm::LiveIntervals::createInterval();
            }
            unint64_t v333 = (unint64_t)(v334 + 8);
          }
          else
          {
            if ((v344[1] & 0x7F) != 2 && !*((_DWORD *)v344 + 3)) {
              goto LABEL_143;
            }
            uint64_t v332 = *((void *)v344 + 2);
            if ((v332 & 4) == 0) {
              goto LABEL_143;
            }
            unint64_t v333 = v332 & 0xFFFFFFFFFFFFFFF8;
            if (!v333) {
              goto LABEL_143;
            }
          }
          int v348 = (llvm::MachineOperand *)&v344;
          sub_1CC5FA668(v333 + 16, &v348);
          goto LABEL_143;
        }
        unint64_t v93 = *v92;
        if (!*v92)
        {
LABEL_141:
          unsigned int v94 = v344;
          std::__shared_weak_count *v92 = v344;
          if (v94)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v344, v94, v91 + 56);
            uint64_t v344 = 0;
          }
          goto LABEL_143;
        }
        int v105 = *v93;
        if ((v105 - 4) > 0x1E)
        {
          if ((v105 - 3) >= 0xFFFFFFFE) {
            uint64_t v235 = *v92;
          }
          else {
            uint64_t v235 = 0;
          }
          if ((v105 - 3) < 0xFFFFFFFE)
          {
            if (v105 == 3) {
              *((void *)v93 + 1) = 0;
            }
            goto LABEL_141;
          }
          unint64_t v107 = (unint64_t)(v235 + 8);
        }
        else
        {
          if ((v93[1] & 0x7F) != 2 && !*((_DWORD *)v93 + 3)) {
            goto LABEL_141;
          }
          uint64_t v106 = *((void *)v93 + 2);
          if ((v106 & 4) == 0) {
            goto LABEL_141;
          }
          unint64_t v107 = v106 & 0xFFFFFFFFFFFFFFF8;
          if (!v107) {
            goto LABEL_141;
          }
        }
        int v348 = (llvm::MachineOperand *)(v91 + 56);
        sub_1CC5FA668(v107 + 16, &v348);
        goto LABEL_141;
      }
      if ((*(unsigned int (**)(void))(**(void **)(v342 + 272) + 560))(*(void *)(v342 + 272)))
      {
        if ((v341 & 0x80000000) != 0)
        {
          if (v337 == (void *)(*(void *)(*(void *)(*(void *)(v342 + 264) + 24) + 16 * (v341 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_123;
          }
          return 0;
        }
        if ((v341 - 1) > 0x3FFFFFFE
          || (v341 >> 3) >= *(unsigned __int16 *)(*v337 + 22)
          || ((*(unsigned __int8 *)(*(void *)(*v337 + 8) + (v341 >> 3)) >> (v341 & 7)) & 1) == 0)
        {
          return 0;
        }
      }
      else if ((v341 - 1) > 0x3FFFFFFE)
      {
        goto LABEL_123;
      }
      int v74 = (**(_DWORD **)(v57 + 32) >> 8) & 0xFFF;
      if (*(_DWORD *)(a2 + 20))
      {
        unsigned int v75 = *(void **)(v342 + 272);
        if (!v74)
        {
          int v74 = *(_DWORD *)(a2 + 20);
          goto LABEL_114;
        }
        int v74 = (*(uint64_t (**)(void *))(*v75 + 208))(v75);
      }
      unsigned int v76 = v341;
      if (!v74)
      {
LABEL_120:
        if (v76 - 1 <= 0x3FFFFFFE)
        {
          unint64_t v83 = (unint64_t)v76 >> 3;
          if (v83 < *(unsigned __int16 *)(*v337 + 22)
            && ((*(unsigned __int8 *)(*(void *)(*v337 + 8) + v83) >> (v76 & 7)) & 1) != 0)
          {
            goto LABEL_123;
          }
        }
        return 0;
      }
      unsigned int v75 = *(void **)(v342 + 272);
LABEL_114:
      uint64_t v77 = v75[1];
      uint64_t v78 = v75[7];
      uint64_t v79 = *(unsigned int *)(v77 + 24 * v341 + 4);
      if (!*(_WORD *)(v78 + 2 * v79)) {
        return 0;
      }
      LOWORD(v76) = *(_WORD *)(v78 + 2 * v79) + v341;
      __int16 v80 = (unsigned __int16 *)(v75[11] + 2 * *(unsigned int *)(v77 + 24 * v341 + 12));
      unint64_t v81 = (unsigned __int16 *)(v78 + 2 * v79 + 2);
      while (v74 != *v80)
      {
        uint64_t result = 0;
        int v82 = *v81++;
        LOWORD(v76) = v82 + v76;
        ++v80;
        if (!v82) {
          return result;
        }
      }
      unsigned int v76 = (unsigned __int16)v76;
      goto LABEL_120;
    }
  }
  return result;
}