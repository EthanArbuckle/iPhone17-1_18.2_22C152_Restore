void llvm::ValueEnumerator::purgeFunction(llvm::ValueEnumerator *this)
{
  void **v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  unsigned int v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;

  v2 = (void **)((char *)this + 96);
  v3 = *((_DWORD *)this + 112);
  v4 = (*((void *)this + 13) - *((void *)this + 12)) >> 4;
  if (v3 != v4)
  {
    v5 = *((_DWORD *)this + 22);
    v6 = v5 - 1;
    do
    {
      if (v5)
      {
        v7 = *((void *)this + 9);
        v8 = *((void *)*v2 + 2 * v3);
        LODWORD(v9) = ((v8 >> 4) ^ (v8 >> 9)) & v6;
        v10 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v10;
        if (v8 == *v10)
        {
LABEL_9:
          *v10 = -8192;
          *((int32x2_t *)this + 10) = vadd_s32(*(int32x2_t *)((char *)this + 80), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v12 = 1;
          while (v11 != -4096)
          {
            v13 = v9 + v12++;
            v9 = v13 & v6;
            v11 = *(void *)(v7 + 16 * v9);
            if (v8 == v11)
            {
              v10 = (uint64_t *)(v7 + 16 * v9);
              goto LABEL_9;
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v14 = (void *)((char *)this + 168);
  v15 = *((_DWORD *)this + 113);
  for (i = (*((void *)this + 22) - *((void *)this + 21)) >> 3; i != v15; ++v15)
  {
    v17 = (void *)(*v14 + 8 * v15);
    v34 = 0;
    if (sub_1CBFFBC50((uint64_t *)this + 27, v17, &v34))
    {
      *v34 = -8192;
      *((int32x2_t *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 224), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  v18 = (void *)*((void *)this + 53);
  v19 = (void *)*((void *)this + 54);
  if (v18 != v19)
  {
    v20 = *((_DWORD *)this + 22);
    v21 = v20 - 1;
    do
    {
      if (v20)
      {
        v22 = *((void *)this + 9);
        LODWORD(v23) = ((*v18 >> 4) ^ (*v18 >> 9)) & v21;
        v24 = (uint64_t *)(v22 + 16 * v23);
        v25 = *v24;
        if (*v18 == *v24)
        {
LABEL_23:
          *v24 = -8192;
          *((int32x2_t *)this + 10) = vadd_s32(*(int32x2_t *)((char *)this + 80), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v26 = 1;
          while (v25 != -4096)
          {
            v27 = v23 + v26++;
            v23 = v27 & v21;
            v25 = *(void *)(v22 + 16 * v23);
            if (*v18 == v25)
            {
              v24 = (uint64_t *)(v22 + 16 * v23);
              goto LABEL_23;
            }
          }
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v28 = *((unsigned int *)this + 112);
  v29 = *((void *)this + 12);
  v30 = (*((void *)this + 13) - v29) >> 4;
  if (v28 > v30)
  {
    sub_1CD4FEACC(v2, v28 - v30);
  }
  else if (v28 < v30)
  {
    *((void *)this + 13) = v29 + 16 * v28;
  }
  v31 = *((unsigned int *)this + 113);
  v32 = *((void *)this + 21);
  v33 = (*((void *)this + 22) - v32) >> 3;
  if (v31 > v33)
  {
    sub_1CD4FEC18((char **)this + 21, v31 - v33);
  }
  else if (v31 < v33)
  {
    *((void *)this + 22) = v32 + 8 * v31;
  }
  *((void *)this + 54) = *((void *)this + 53);
  *((_DWORD *)this + 114) = 0;
}

void sub_1CC21AFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1;
  uint64_t v14 = a1;
  for (i = sub_1CD4FE74C(a3, &v14); !*((unsigned char *)i + 12); i = sub_1CD4FE74C(a3, &v14))
  {
    *((unsigned char *)i + 12) = 1;
    uint64_t v9 = *(void *)(v7 + 8);
    if (v9 && *(void *)(v9 + 8)) {
      sub_1CC21B1EC(v7, a2, *((_DWORD *)i + 2), a3, a4);
    }
    if (*(unsigned __int8 *)(v7 + 16) > 0x14u) {
      break;
    }
    int v10 = *(_DWORD *)(v7 + 20);
    uint64_t v11 = v10 & 0x7FFFFFF;
    if ((v10 & 0x7FFFFFF) == 0) {
      break;
    }
    if ((v10 & 0x40000000) != 0)
    {
      uint64_t v12 = *(void *)(v7 - 8);
    }
    else
    {
      uint64_t v11 = v11;
      uint64_t v12 = v7 - 32 * v11;
    }
    uint64_t v13 = 32 * v11;
    do
    {
      if (*(unsigned __int8 *)(*(void *)v12 + 16) <= 0x14u) {
        sub_1CC21AFB8();
      }
      v12 += 32;
      v13 -= 32;
    }
    while (v13);
    if (*(unsigned char *)(v7 + 16) != 5) {
      break;
    }
    if (*(_WORD *)(v7 + 18) != 63) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 56);
    uint64_t v14 = v7;
  }
}

uint64_t sub_1CC21B0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)a2, *(_DWORD *)(a2 + 16), a1, &v13);
  if ((result & 1) == 0 || !*(_DWORD *)(v13 + 8))
  {
    if (a1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
      if (v5 <= 0x14 && v5 >= 4)
      {
        int v6 = *(_DWORD *)(a1 + 20);
        uint64_t v7 = v6 & 0x7FFFFFF;
        if ((v6 & 0x7FFFFFF) != 0)
        {
          if ((v6 & 0x40000000) != 0)
          {
            uint64_t v8 = *(void *)(a1 - 8);
          }
          else
          {
            uint64_t v7 = v7;
            uint64_t v8 = a1 - 32 * v7;
          }
          uint64_t v9 = 32 * v7;
          do
          {
            unsigned int v10 = *(unsigned __int8 *)(*(void *)v8 + 16);
            if (v10 >= 4 && v10 != 22) {
              ((void (*)(void))sub_1CC21B0E0)();
            }
            v8 += 32;
            v9 -= 32;
          }
          while (v9);
          if (*(unsigned char *)(a1 + 16) == 5 && *(_WORD *)(a1 + 18) == 63) {
            sub_1CC21B0E0(*(void *)(a1 + 56), a2);
          }
        }
      }
    }
    uint64_t v13 = a1;
    int v12 = *(_DWORD *)(a2 + 8) + 1;
    uint64_t result = (uint64_t)sub_1CD4FE74C(a2, &v13);
    *(_DWORD *)(result + 8) = v12;
  }
  return result;
}

void sub_1CC21B1EC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  v28[128] = *MEMORY[0x1E4F143B8];
  unsigned int v24 = a3;
  v26 = v28;
  uint64_t v27 = 0x4000000000;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    do
    {
      uint64_t v11 = *(void *)(v5 + 24);
      v25[0] = 0;
      if ((sub_1CD40EA84(*(void *)a4, *(_DWORD *)(a4 + 16), v11, v25) & 1) != 0 && *(_DWORD *)(v25[0] + 8))
      {
        uint64_t v12 = v27;
        if (v27 >= HIDWORD(v27)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v13 = (char *)v26 + 16 * v27;
        *uint64_t v13 = v5;
        v13[1] = v12;
        LODWORD(v27) = v27 + 1;
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
    uint64_t v14 = v26;
    if (v27 >= 2)
    {
      BOOL v15 = *(_DWORD *)(a4 + 28) < a3 || *(_DWORD *)(a4 + 24) >= a3;
      BOOL v16 = !v15;
      BOOL v23 = v16;
      v25[0] = a4;
      v25[1] = (uint64_t)&v24;
      v25[2] = (uint64_t)&v23;
      sub_1CC21B3E4((uint64_t)v26, (unint64_t)v26 + 16 * v27, v25, 126 - 2 * __clz(v27), 1);
      uint64_t v14 = v26;
      if (v27)
      {
        uint64_t v17 = 0;
        while (16 * v27 - 16 != v17)
        {
          unsigned int v18 = *(_DWORD *)((char *)v26 + v17 + 24);
          unsigned int v19 = *(_DWORD *)((char *)v26 + v17 + 8);
          v17 += 16;
          if (v18 < v19)
          {
            sub_1CD4FE7C0(a5, a1, a2, v27);
            uint64_t v14 = v26;
            if (v27)
            {
              uint64_t v20 = 0;
              uint64_t v21 = *(void *)(a5[1] - 24);
              uint64_t v22 = 4 * v27;
              do
              {
                *(_DWORD *)(v21 + v20) = v14[v20 + 2];
                v20 += 4;
              }
              while (v22 != v20);
            }
            break;
          }
        }
      }
    }
    if (v14 != (_DWORD *)v28) {
      free(v14);
    }
  }
}

uint64_t sub_1CC21B3E4(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
  while (2)
  {
    v83 = (uint64_t *)(a2 - 16);
    unint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = v11;
          uint64_t v12 = a2 - v11;
          uint64_t v13 = (uint64_t)(a2 - v11) >> 4;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = sub_1CC21BC58(a3, *(void *)(a2 - 16), *(void *)v10);
                if (result)
                {
                  uint64_t v39 = *(void *)v10;
                  *(void *)unint64_t v10 = *(void *)(a2 - 16);
                  *(void *)(a2 - 16) = v39;
                  LODWORD(v39) = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v39;
                }
                break;
              case 3:
                uint64_t result = sub_1CC21BF64(v10, v10 + 16, (uint64_t)v83, a3);
                break;
              case 4:
                uint64_t result = sub_1CC21C280(v10, v10 + 16, v10 + 32, (uint64_t)v83, a3);
                break;
              case 5:
                uint64_t result = sub_1CC21BE48(v10, v10 + 16, v10 + 32, v10 + 48, (uint64_t)v83, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            unint64_t v40 = v10 + 16;
            BOOL v42 = v10 == a2 || v40 == a2;
            if (a5)
            {
              if (!v42)
              {
                uint64_t v43 = 0;
                unint64_t v44 = v10;
                do
                {
                  uint64_t v45 = *(void *)(v44 + 16);
                  uint64_t v46 = *(void *)v44;
                  unint64_t v44 = v40;
                  uint64_t result = sub_1CC21BC58(a3, v45, v46);
                  if (result)
                  {
                    uint64_t v47 = *(void *)v44;
                    int v48 = *(_DWORD *)(v44 + 8);
                    uint64_t v49 = v43;
                    while (1)
                    {
                      uint64_t v50 = v10 + v49;
                      *(void *)(v50 + 16) = *(void *)(v10 + v49);
                      *(_DWORD *)(v50 + 24) = *(_DWORD *)(v10 + v49 + 8);
                      if (!v49) {
                        break;
                      }
                      uint64_t result = sub_1CC21BC58(a3, v47, *(void *)(v50 - 16));
                      v49 -= 16;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = v10 + v49 + 16;
                        goto LABEL_79;
                      }
                    }
                    uint64_t v51 = v10;
LABEL_79:
                    *(void *)uint64_t v51 = v47;
                    *(_DWORD *)(v51 + 8) = v48;
                  }
                  unint64_t v40 = v44 + 16;
                  v43 += 16;
                }
                while (v44 + 16 != a2);
              }
            }
            else if (!v42)
            {
              v74 = (_DWORD *)(v10 + 24);
              do
              {
                uint64_t v75 = *(void *)(v10 + 16);
                uint64_t v76 = *(void *)v10;
                unint64_t v10 = v40;
                uint64_t result = sub_1CC21BC58(a3, v75, v76);
                if (result)
                {
                  uint64_t v77 = *(void *)v10;
                  int v78 = *(_DWORD *)(v10 + 8);
                  v79 = v74;
                  do
                  {
                    v80 = v79;
                    *((void *)v79 - 1) = *((void *)v79 - 3);
                    int v81 = *(v79 - 4);
                    v79 -= 4;
                    _DWORD *v80 = v81;
                    uint64_t result = sub_1CC21BC58(a3, v77, *((void *)v80 - 5));
                  }
                  while ((result & 1) != 0);
                  *((void *)v79 - 1) = v77;
                  _DWORD *v79 = v78;
                }
                unint64_t v40 = v10 + 16;
                v74 += 4;
              }
              while (v10 + 16 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              unint64_t v82 = a2;
              int64_t v52 = (unint64_t)(v13 - 2) >> 1;
              int64_t v87 = v52;
              do
              {
                int64_t v53 = v52;
                if (v87 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  unint64_t v55 = v10 + 16 * v54;
                  if (2 * v52 + 2 < v13 && sub_1CC21BC58(a3, *(void *)v55, *(void *)(v55 + 16)))
                  {
                    v55 += 16;
                    uint64_t v54 = 2 * v53 + 2;
                  }
                  unint64_t v56 = v10 + 16 * v53;
                  uint64_t result = sub_1CC21BC58(a3, *(void *)v55, *(void *)v56);
                  if ((result & 1) == 0)
                  {
                    uint64_t v57 = *(void *)v56;
                    int v84 = *(_DWORD *)(v56 + 8);
                    do
                    {
                      unint64_t v58 = v55;
                      *(void *)unint64_t v56 = *(void *)v55;
                      *(_DWORD *)(v56 + 8) = *(_DWORD *)(v55 + 8);
                      if (v87 < v54) {
                        break;
                      }
                      uint64_t v59 = (2 * v54) | 1;
                      unint64_t v55 = v10 + 16 * v59;
                      if (2 * v54 + 2 < v13 && sub_1CC21BC58(a3, *(void *)v55, *(void *)(v55 + 16)))
                      {
                        v55 += 16;
                        uint64_t v59 = 2 * v54 + 2;
                      }
                      uint64_t result = sub_1CC21BC58(a3, *(void *)v55, v57);
                      unint64_t v56 = v58;
                      uint64_t v54 = v59;
                    }
                    while (!result);
                    *(void *)unint64_t v58 = v57;
                    *(_DWORD *)(v58 + 8) = v84;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              unint64_t v60 = v82;
              do
              {
                uint64_t v61 = 0;
                uint64_t v88 = *(void *)v10;
                int v85 = *(_DWORD *)(v10 + 8);
                unint64_t v62 = v10;
                do
                {
                  uint64_t v63 = v62 + 16 * v61 + 16;
                  uint64_t v64 = (2 * v61) | 1;
                  uint64_t v65 = 2 * v61 + 2;
                  if (v65 < v13)
                  {
                    uint64_t result = sub_1CC21BC58(a3, *(void *)v63, *(void *)(v62 + 16 * v61 + 32));
                    if (result)
                    {
                      v63 += 16;
                      uint64_t v64 = v65;
                    }
                  }
                  *(void *)unint64_t v62 = *(void *)v63;
                  *(_DWORD *)(v62 + 8) = *(_DWORD *)(v63 + 8);
                  unint64_t v62 = v63;
                  uint64_t v61 = v64;
                }
                while (v64 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                unint64_t v66 = v60 - 16;
                if (v63 == v60 - 16)
                {
                  *(void *)uint64_t v63 = v88;
                  *(_DWORD *)(v63 + 8) = v85;
                }
                else
                {
                  *(void *)uint64_t v63 = *(void *)(v60 - 16);
                  *(_DWORD *)(v63 + 8) = *(_DWORD *)(v60 - 8);
                  *(void *)(v60 - 16) = v88;
                  *(_DWORD *)(v60 - 8) = v85;
                  uint64_t v67 = v63 - v10 + 16;
                  if (v67 >= 17)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                    unint64_t v69 = v10 + 16 * v68;
                    uint64_t result = sub_1CC21BC58(a3, *(void *)v69, *(void *)v63);
                    if (result)
                    {
                      uint64_t v70 = *(void *)v63;
                      int v71 = *(_DWORD *)(v63 + 8);
                      do
                      {
                        uint64_t v72 = v69;
                        *(void *)uint64_t v63 = *(void *)v69;
                        *(_DWORD *)(v63 + 8) = *(_DWORD *)(v69 + 8);
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        unint64_t v69 = v10 + 16 * v68;
                        uint64_t result = sub_1CC21BC58(a3, *(void *)v69, v70);
                        uint64_t v63 = v72;
                      }
                      while ((result & 1) != 0);
                      *(void *)uint64_t v72 = v70;
                      *(_DWORD *)(v72 + 8) = v71;
                    }
                  }
                }
                unint64_t v60 = v66;
              }
              while (v13-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = v10 + 16 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            sub_1CC21BF64(v15, v10, (uint64_t)v83, a3);
          }
          else
          {
            sub_1CC21BF64(v10, v15, (uint64_t)v83, a3);
            sub_1CC21BF64(v10 + 16, v15 - 16, a2 - 32, a3);
            sub_1CC21BF64(v10 + 32, v10 + 16 + 16 * v14, a2 - 48, a3);
            sub_1CC21BF64(v15 - 16, v15, v10 + 16 + 16 * v14, a3);
            uint64_t v16 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v15;
            *(void *)uint64_t v15 = v16;
            LODWORD(v16) = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = v16;
          }
          --a4;
          if ((a5 & 1) != 0 || sub_1CC21BC58(a3, *(void *)(v10 - 16), *(void *)v10)) {
            break;
          }
          uint64_t v30 = *(void *)v10;
          int v31 = *(_DWORD *)(v10 + 8);
          uint64_t result = sub_1CC21BC58(a3, *(void *)v10, *v83);
          if (result)
          {
            unint64_t v11 = v10;
            do
            {
              uint64_t v32 = *(void *)(v11 + 16);
              v11 += 16;
              uint64_t result = sub_1CC21BC58(a3, v30, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unint64_t v33 = v10 + 16;
            do
            {
              unint64_t v11 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 16;
              uint64_t result = sub_1CC21BC58(a3, v30, *(void *)v11);
            }
            while (!result);
          }
          unint64_t v34 = a2;
          if (v11 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              uint64_t v35 = *(void *)(v34 - 16);
              v34 -= 16;
              uint64_t result = sub_1CC21BC58(a3, v30, v35);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v34)
          {
            uint64_t v36 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v34;
            *(void *)unint64_t v34 = v36;
            LODWORD(v36) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v34 + 8);
            *(_DWORD *)(v34 + 8) = v36;
            do
            {
              uint64_t v37 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (!sub_1CC21BC58(a3, v30, v37));
            do
            {
              uint64_t v38 = *(void *)(v34 - 16);
              v34 -= 16;
              uint64_t result = sub_1CC21BC58(a3, v30, v38);
            }
            while ((result & 1) != 0);
          }
          BOOL v5 = v11 - 16 >= v10;
          BOOL v6 = v11 - 16 == v10;
          if (v11 - 16 != v10)
          {
            *(void *)unint64_t v10 = *(void *)(v11 - 16);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 - 8);
          }
          a5 = 0;
          *(void *)(v11 - 16) = v30;
          *(_DWORD *)(v11 - 8) = v31;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)v10;
        int v19 = *(_DWORD *)(v10 + 8);
        do
        {
          BOOL v20 = sub_1CC21BC58(a3, *(void *)(v10 + v17 + 16), v18);
          v17 += 16;
        }
        while (v20);
        unint64_t v21 = v10 + v17;
        unint64_t v22 = a2;
        if (v17 == 16)
        {
          unint64_t v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            uint64_t v24 = *(void *)(v22 - 16);
            v22 -= 16;
          }
          while (!sub_1CC21BC58(a3, v24, v18));
        }
        else
        {
          do
          {
            uint64_t v23 = *(void *)(v22 - 16);
            v22 -= 16;
          }
          while (!sub_1CC21BC58(a3, v23, v18));
        }
        unint64_t v11 = v10 + v17;
        if (v21 < v22)
        {
          unint64_t v25 = v22;
          do
          {
            uint64_t v26 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v25;
            *(void *)unint64_t v25 = v26;
            LODWORD(v26) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v25 + 8);
            *(_DWORD *)(v25 + 8) = v26;
            do
            {
              uint64_t v27 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (sub_1CC21BC58(a3, v27, v18));
            do
            {
              uint64_t v28 = *(void *)(v25 - 16);
              v25 -= 16;
            }
            while (!sub_1CC21BC58(a3, v28, v18));
          }
          while (v11 < v25);
        }
        if (v11 - 16 != v10)
        {
          *(void *)unint64_t v10 = *(void *)(v11 - 16);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 - 8);
        }
        *(void *)(v11 - 16) = v18;
        *(_DWORD *)(v11 - 8) = v19;
        if (v21 >= v22) {
          break;
        }
LABEL_31:
        uint64_t result = sub_1CC21B3E4(v10, v11 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v29 = sub_1CC21C090(v10, v11 - 16, a3);
      uint64_t result = sub_1CC21C090(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = v11 - 16;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC21BC58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  v35[5] = v3;
  v35[6] = v4;
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(a2 + 24);
  v35[0] = 0;
  if (sub_1CD40EA84(*(void *)v9, *(_DWORD *)(v9 + 16), v10, v35)) {
    unsigned int v11 = *(_DWORD *)(v35[0] + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)(a3 + 24);
  v35[0] = 0;
  if (sub_1CD40EA84(*(void *)v12, *(_DWORD *)(v12 + 16), v13, v35)) {
    unsigned int v14 = *(_DWORD *)(v35[0] + 8);
  }
  else {
    unsigned int v14 = 0;
  }
  unsigned int v15 = *(_DWORD *)(*a1 + 28);
  if (v15 >= v11)
  {
    unsigned int v16 = *(_DWORD *)(*a1 + 24);
    BOOL v17 = v16 < v11 && v15 >= v14;
    if (v17 && v16 < v14)
    {
      BOOL v20 = v11 >= v14;
      if (v11 != v14) {
        return !v20;
      }
      goto LABEL_31;
    }
  }
  if (v11 < v14) {
    return *(_DWORD *)a1[1] >= v14 && !*(unsigned char *)a1[2];
  }
  unsigned int v19 = *(_DWORD *)a1[1];
  if (v14 < v11) {
    return v19 < v11 || *(unsigned char *)a1[2];
  }
  if (v19 >= v11 && !*(unsigned char *)a1[2])
  {
    uint64_t v28 = *(void *)(a2 + 24);
    int v29 = *(_DWORD *)(v28 + 20);
    if ((v29 & 0x40000000) != 0) {
      uint64_t v30 = *(void *)(v28 - 8);
    }
    else {
      uint64_t v30 = v28 - 32 * (v29 & 0x7FFFFFF);
    }
    unint64_t v31 = (unint64_t)(a2 - v30) >> 5;
    uint64_t v32 = *(void *)(a3 + 24);
    int v33 = *(_DWORD *)(v32 + 20);
    if ((v33 & 0x40000000) != 0) {
      uint64_t v34 = *(void *)(v32 - 8);
    }
    else {
      uint64_t v34 = v32 - 32 * (v33 & 0x7FFFFFF);
    }
    BOOL v20 = v31 >= ((unint64_t)(a3 - v34) >> 5);
    return !v20;
  }
LABEL_31:
  uint64_t v21 = *(void *)(a2 + 24);
  int v22 = *(_DWORD *)(v21 + 20);
  if ((v22 & 0x40000000) != 0) {
    uint64_t v23 = *(void *)(v21 - 8);
  }
  else {
    uint64_t v23 = v21 - 32 * (v22 & 0x7FFFFFF);
  }
  unint64_t v24 = (unint64_t)(a2 - v23) >> 5;
  uint64_t v25 = *(void *)(a3 + 24);
  int v26 = *(_DWORD *)(v25 + 20);
  if ((v26 & 0x40000000) != 0) {
    uint64_t v27 = *(void *)(v25 - 8);
  }
  else {
    uint64_t v27 = v25 - 32 * (v26 & 0x7FFFFFF);
  }
  return v24 > ((unint64_t)(a3 - v27) >> 5);
}

BOOL sub_1CC21BE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  sub_1CC21C280(a1, a2, a3, a4, a6);
  BOOL result = sub_1CC21BC58(a6, *(void *)a5, *(void *)a4);
  if (result)
  {
    uint64_t v13 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    BOOL result = sub_1CC21BC58(a6, *(void *)a4, *(void *)a3);
    if (result)
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      BOOL result = sub_1CC21BC58(a6, *(void *)a3, *(void *)a2);
      if (result)
      {
        uint64_t v15 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        BOOL result = sub_1CC21BC58(a6, *(void *)a2, *(void *)a1);
        if (result)
        {
          uint64_t v16 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CC21BF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  BOOL v8 = sub_1CC21BC58(a4, *(void *)a2, *(void *)a1);
  BOOL result = sub_1CC21BC58(a4, *(void *)a3, *(void *)a2);
  if (v8)
  {
    uint64_t v10 = *(void *)a1;
    if (result)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v10;
      unsigned int v11 = (int *)(a3 + 8);
      uint64_t v12 = (int *)(a1 + 8);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v10;
      int v17 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v17;
      BOOL result = sub_1CC21BC58(a4, *(void *)a3, v10);
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      unsigned int v11 = (int *)(a3 + 8);
      uint64_t v12 = (int *)(a2 + 8);
    }
    uint64_t v15 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    uint64_t v15 = (int *)(a2 + 8);
    int v14 = *(_DWORD *)(a2 + 8);
    *(void *)a3 = v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v14;
    BOOL result = sub_1CC21BC58(a4, *(void *)a2, *(void *)a1);
    if (result)
    {
      uint64_t v16 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      uint64_t v12 = (int *)(a1 + 8);
      *(void *)a2 = v16;
LABEL_10:
      int v19 = *v12;
      *uint64_t v12 = *v15;
      *uint64_t v15 = v19;
    }
  }
  return result;
}

BOOL sub_1CC21C090(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1CC21BC58(a3, *(void *)(a2 - 16), *(void *)a1))
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      sub_1CC21BF64(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_1CC21C280(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_1CC21BE48(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      uint64_t v9 = (uint64_t *)(a1 + 32);
      sub_1CC21BF64(a1, a1 + 16, a1 + 32, a3);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CC21BC58(a3, *(void *)v10, *v9))
    {
      uint64_t v13 = *(void *)v10;
      int v14 = *(_DWORD *)(v10 + 8);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 48) = *(void *)(a1 + v15 + 32);
        *(_DWORD *)(v16 + 56) = *(_DWORD *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (!sub_1CC21BC58(a3, v13, *(void *)(v16 + 16)))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v13;
      *(_DWORD *)(v17 + 8) = v14;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = (uint64_t *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

BOOL sub_1CC21C280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_1CC21BF64(a1, a2, a3, a5);
  BOOL result = sub_1CC21BC58(a5, *(void *)a4, *(void *)a3);
  if (result)
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    BOOL result = sub_1CC21BC58(a5, *(void *)a3, *(void *)a2);
    if (result)
    {
      uint64_t v12 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      BOOL result = sub_1CC21BC58(a5, *(void *)a2, *(void *)a1);
      if (result)
      {
        uint64_t v13 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1CC21C364(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v5;
  }
  v15[4] = a1 + 2;
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v11 = (char *)operator new(40 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[40 * v4];
  v15[0] = v11;
  v15[1] = v12;
  v15[3] = &v11[40 * v10];
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  sub_1CD4FE810((void *)v12 + 2, a4);
  v15[2] = v12 + 40;
  sub_1CD4AE5F0(a1, v15);
  uint64_t v13 = a1[1];
  sub_1CD4AE684((uint64_t)v15);
  return v13;
}

void *sub_1CC21C478(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v12 = 0;
LABEL_15:
    uint64_t v6 = sub_1CC21C538(a1, (uint64_t)a2, a2, v12);
    *uint64_t v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

void *sub_1CC21C538(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CBAEE424(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          uint64_t v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CBAEE424(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          uint64_t v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CC21C6B4(uint64_t a1, __n128 *a2, void *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 < 2) {
    return;
  }
  unsigned int v7 = a2;
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    int v9 = (uint64_t *)a2[-1].n128_u64[0];
    uint64_t v10 = *v9;
    unsigned int v11 = *(uint64_t **)a1;
    if (*v9 == **(void **)a1)
    {
      unsigned __int32 v20 = a2[-1].n128_u32[2];
      unsigned __int32 v21 = *(_DWORD *)(a1 + 8);
      if (v20 <= v21) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *a3;
      uint64_t v13 = (uint64_t *)(*a3 + 24);
      uint64_t v75 = 0;
      uint64_t v76 = v10;
      if (sub_1CBFA3AF4(v13, &v76, &v75)) {
        uint64_t v14 = v75;
      }
      else {
        uint64_t v14 = *(void *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      }
      unsigned int v48 = *(_DWORD *)(v14 + 8) - 1;
      uint64_t v49 = **(void **)v8;
      uint64_t v75 = 0;
      uint64_t v76 = v49;
      if (sub_1CBFA3AF4(v13, &v76, &v75)) {
        uint64_t v50 = v75;
      }
      else {
        uint64_t v50 = *(void *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      }
      if (v48 >= *(_DWORD *)(v50 + 8) - 1) {
        return;
      }
      unsigned int v11 = *(uint64_t **)v8;
      int v9 = (uint64_t *)v7[-1].n128_u64[0];
      unsigned __int32 v21 = *(_DWORD *)(v8 + 8);
      unsigned __int32 v20 = v7[-1].n128_u32[2];
    }
    *(void *)uint64_t v8 = v9;
    v7[-1].n128_u64[0] = (unint64_t)v11;
    *(_DWORD *)(v8 + 8) = v20;
    v7[-1].n128_u32[2] = v21;
    return;
  }
  if ((uint64_t)a4 <= 0)
  {
    if ((__n128 *)a1 == a2) {
      return;
    }
    unsigned int v22 = (uint64_t **)(a1 + 16);
    if ((__n128 *)(a1 + 16) == a2) {
      return;
    }
    uint64_t v23 = 0;
    unint64_t v24 = (uint64_t **)a1;
    while (1)
    {
      uint64_t v25 = (uint64_t)v24;
      unint64_t v24 = v22;
      int v26 = *v22;
      uint64_t v27 = **v22;
      uint64_t v28 = *(uint64_t **)v25;
      if (v27 == **(void **)v25)
      {
        unsigned int v32 = *(_DWORD *)(v25 + 8);
        if (*(_DWORD *)(v25 + 24) <= v32) {
          goto LABEL_47;
        }
        unsigned int v73 = *(_DWORD *)(v25 + 24);
      }
      else
      {
        uint64_t v29 = *a3;
        uint64_t v30 = (uint64_t *)(*a3 + 24);
        uint64_t v75 = 0;
        uint64_t v76 = v27;
        if (sub_1CBFA3AF4(v30, &v76, &v75)) {
          uint64_t v31 = v75;
        }
        else {
          uint64_t v31 = *(void *)(v29 + 24) + 16 * *(unsigned int *)(v29 + 40);
        }
        int v33 = *(_DWORD *)(v31 + 8);
        uint64_t v34 = **(void **)v25;
        uint64_t v75 = 0;
        uint64_t v76 = v34;
        if (sub_1CBFA3AF4(v30, &v76, &v75)) {
          uint64_t v35 = v75;
        }
        else {
          uint64_t v35 = *(void *)(v29 + 24) + 16 * *(unsigned int *)(v29 + 40);
        }
        if (v33 - 1 >= (*(_DWORD *)(v35 + 8) - 1)) {
          goto LABEL_47;
        }
        int v26 = *v24;
        unsigned int v73 = *(_DWORD *)(v25 + 24);
        uint64_t v28 = *(uint64_t **)v25;
        unsigned int v32 = *(_DWORD *)(v25 + 8);
      }
      *unint64_t v24 = v28;
      *((_DWORD *)v24 + 2) = v32;
      if (v25 == v8)
      {
        uint64_t v25 = v8;
        goto LABEL_46;
      }
      uint64_t v36 = v23;
      while (1)
      {
        uint64_t v37 = v8 + v36;
        uint64_t v38 = *v26;
        uint64_t v39 = *(void **)(v8 + v36 - 16);
        if (*v26 == *v39)
        {
          unsigned int v43 = *(_DWORD *)(v37 - 8);
          if (v73 <= v43) {
            goto LABEL_45;
          }
          goto LABEL_41;
        }
        uint64_t v40 = *a3;
        v41 = (uint64_t *)(*a3 + 24);
        uint64_t v75 = 0;
        uint64_t v76 = v38;
        uint64_t v42 = sub_1CBFA3AF4(v41, &v76, &v75)
            ? v75
            : *(void *)(v40 + 24) + 16 * *(unsigned int *)(v40 + 40);
        int v44 = *(_DWORD *)(v42 + 8);
        uint64_t v45 = **(void **)(v37 - 16);
        uint64_t v75 = 0;
        uint64_t v76 = v45;
        uint64_t v46 = sub_1CBFA3AF4(v41, &v76, &v75)
            ? v75
            : *(void *)(v40 + 24) + 16 * *(unsigned int *)(v40 + 40);
        if (v44 - 1 >= (*(_DWORD *)(v46 + 8) - 1)) {
          break;
        }
        uint64_t v39 = *(void **)(v37 - 16);
        unsigned int v43 = *(_DWORD *)(v8 + v36 - 8);
LABEL_41:
        v25 -= 16;
        uint64_t v47 = v8 + v36;
        *(void *)uint64_t v47 = v39;
        *(_DWORD *)(v47 + 8) = v43;
        v36 -= 16;
        if (!v36)
        {
          uint64_t v25 = v8;
          goto LABEL_45;
        }
      }
      uint64_t v25 = v8 + v36;
LABEL_45:
      unsigned int v7 = a2;
LABEL_46:
      *(void *)uint64_t v25 = v26;
      *(_DWORD *)(v25 + 8) = v73;
LABEL_47:
      unsigned int v22 = v24 + 2;
      v23 += 16;
      if (v24 + 2 == (uint64_t **)v7) {
        return;
      }
    }
  }
  int v17 = (uint64_t **)a5;
  unint64_t v18 = a4 >> 1;
  uint64_t v19 = (__n128 *)(a1 + 16 * (a4 >> 1));
  if ((uint64_t)a4 > a6)
  {
    sub_1CC21C6B4(a1, v19, a3, a4 >> 1, a5, a6);
    sub_1CC21C6B4(v8 + 16 * (a4 >> 1), v7, a3, a4 - (a4 >> 1), v17, a6);
    sub_1CC21D11C(v8, (uint64_t *)(v8 + 16 * (a4 >> 1)), (uint64_t *)v7, a3, a4 >> 1, a4 - (a4 >> 1), v17, a6);
    return;
  }
  __n128 v51 = sub_1CC21CC40(a1, v19, a3, a4 >> 1, a5, a7);
  int64_t v52 = (__n128 *)&v17[2 * v18];
  sub_1CC21CC40(v8 + 16 * (a4 >> 1), v7, a3, a4 - (a4 >> 1), v52, v51);
  int64_t v53 = (__n128 *)&v17[2 * a4];
  uint64_t v54 = v52;
  while (v54 != v53)
  {
    unint64_t v55 = (void *)v54->n128_u64[0];
    uint64_t v56 = *(void *)v54->n128_u64[0];
    uint64_t v57 = *v17;
    if (v56 == **v17)
    {
      unsigned __int32 v61 = v54->n128_u32[2];
      unsigned __int32 v62 = *((_DWORD *)v17 + 2);
      if (v61 <= v62) {
        goto LABEL_67;
      }
    }
    else
    {
      uint64_t v58 = *a3;
      uint64_t v59 = (uint64_t *)(*a3 + 24);
      uint64_t v75 = 0;
      uint64_t v76 = v56;
      if (sub_1CBFA3AF4(v59, &v76, &v75)) {
        uint64_t v60 = v75;
      }
      else {
        uint64_t v60 = *(void *)(v58 + 24) + 16 * *(unsigned int *)(v58 + 40);
      }
      int v63 = *(_DWORD *)(v60 + 8);
      uint64_t v64 = **v17;
      uint64_t v75 = 0;
      uint64_t v76 = v64;
      if (sub_1CBFA3AF4(v59, &v76, &v75)) {
        uint64_t v65 = v75;
      }
      else {
        uint64_t v65 = *(void *)(v58 + 24) + 16 * *(unsigned int *)(v58 + 40);
      }
      if (v63 - 1 >= (*(_DWORD *)(v65 + 8) - 1))
      {
        uint64_t v57 = *v17;
        unsigned __int32 v62 = *((_DWORD *)v17 + 2);
LABEL_67:
        *(void *)uint64_t v8 = v57;
        *(_DWORD *)(v8 + 8) = v62;
        v17 += 2;
        goto LABEL_68;
      }
      unint64_t v55 = (void *)v54->n128_u64[0];
      unsigned __int32 v61 = v54->n128_u32[2];
    }
    *(void *)uint64_t v8 = v55;
    *(_DWORD *)(v8 + 8) = v61;
    ++v54;
LABEL_68:
    v8 += 16;
    if (v17 == (uint64_t **)v52)
    {
      if (v54 != v53)
      {
        uint64_t v66 = 0;
        do
        {
          uint64_t v67 = &v54[v66];
          uint64_t v68 = v8 + v66 * 16;
          *(void *)uint64_t v68 = v54[v66].n128_u64[0];
          *(_DWORD *)(v68 + 8) = v54[v66++].n128_u32[2];
        }
        while (&v67[1] != v53);
      }
      return;
    }
  }
  if (v17 != (uint64_t **)v52)
  {
    uint64_t v69 = 0;
    do
    {
      uint64_t v70 = (__n128 *)&v17[v69];
      uint64_t v71 = v8 + v69 * 8;
      *(void *)uint64_t v71 = v17[v69];
      *(_DWORD *)(v71 + 8) = v17[v69 + 1];
      v69 += 2;
    }
    while (&v70[1] != v52);
  }
}

__n128 sub_1CC21CC40(uint64_t a1, __n128 *a2, void *a3, unint64_t a4, __n128 *a5, __n128 result)
{
  if (!a4) {
    return result;
  }
  int v6 = a5;
  uint64_t v8 = a2;
  int v9 = (uint64_t **)a1;
  if (a4 == 2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v11 = *(void *)a2[-1].n128_u64[0];
    if (v11 == **(void **)a1)
    {
      if (a2[-1].n128_u32[2] > *(_DWORD *)(a1 + 8))
      {
LABEL_67:
        *int v6 = *v10;
        BOOL result = *(__n128 *)v9;
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v12 = *a3;
      uint64_t v13 = (uint64_t *)(*a3 + 24);
      uint64_t v61 = 0;
      uint64_t v62 = v11;
      if (sub_1CBFA3AF4(v13, &v62, &v61)) {
        uint64_t v14 = v61;
      }
      else {
        uint64_t v14 = *(void *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      }
      unsigned int v54 = *(_DWORD *)(v14 + 8) - 1;
      uint64_t v55 = **v9;
      uint64_t v61 = 0;
      uint64_t v62 = v55;
      if (sub_1CBFA3AF4(v13, &v62, &v61)) {
        uint64_t v56 = v61;
      }
      else {
        uint64_t v56 = *(void *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      }
      if (v54 < *(_DWORD *)(v56 + 8) - 1) {
        goto LABEL_67;
      }
    }
    *int v6 = *(__n128 *)v9;
    BOOL result = *v10;
LABEL_68:
    v6[1] = result;
    return result;
  }
  if (a4 == 1)
  {
    BOOL result = *(__n128 *)a1;
    *a5 = *(__n128 *)a1;
    return result;
  }
  if ((uint64_t)a4 > 8)
  {
    uint64_t v42 = (uint64_t **)(a1 + 16 * (a4 >> 1));
    sub_1CC21C6B4(a1, v42, a3, a4 >> 1, a5, a4 >> 1);
    sub_1CC21C6B4(&v9[2 * (a4 >> 1)], v8, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
    unsigned int v43 = (__n128 *)&v9[2 * (a4 >> 1)];
    while (1)
    {
      if (v43 == v8)
      {
        if (v9 != v42)
        {
          unint64_t v57 = 0;
          do
          {
            BOOL result = *(__n128 *)&v9[v57 / 8];
            v6[v57 / 0x10] = result;
            v57 += 16;
          }
          while (&v9[v57 / 8] != v42);
        }
        return result;
      }
      uint64_t v44 = *(void *)v43->n128_u64[0];
      if (v44 == **v9)
      {
        if (v43->n128_u32[2] > *((_DWORD *)v9 + 2)) {
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v45 = *a3;
        uint64_t v46 = (uint64_t *)(*a3 + 24);
        uint64_t v61 = 0;
        uint64_t v62 = v44;
        if (sub_1CBFA3AF4(v46, &v62, &v61)) {
          uint64_t v47 = v61;
        }
        else {
          uint64_t v47 = *(void *)(v45 + 24) + 16 * *(unsigned int *)(v45 + 40);
        }
        int v49 = *(_DWORD *)(v47 + 8);
        uint64_t v50 = **v9;
        uint64_t v61 = 0;
        uint64_t v62 = v50;
        if (sub_1CBFA3AF4(v46, &v62, &v61)) {
          uint64_t v51 = v61;
        }
        else {
          uint64_t v51 = *(void *)(v45 + 24) + 16 * *(unsigned int *)(v45 + 40);
        }
        if (v49 - 1 < (*(_DWORD *)(v51 + 8) - 1))
        {
LABEL_54:
          __n128 v52 = *v43++;
          BOOL result = v52;
          goto LABEL_55;
        }
      }
      __n128 v48 = *(__n128 *)v9;
      v9 += 2;
      BOOL result = v48;
LABEL_55:
      *v6++ = result;
      if (v9 == v42)
      {
        if (v43 != v8)
        {
          uint64_t v53 = 0;
          do
          {
            BOOL result = v43[v53];
            v6[v53++] = result;
          }
          while (&v43[v53] != v8);
        }
        return result;
      }
    }
  }
  if ((__n128 *)a1 == a2) {
    return result;
  }
  BOOL result = *(__n128 *)a1;
  *a5 = *(__n128 *)a1;
  BOOL v15 = (uint64_t **)(a1 + 16);
  if ((__n128 *)(a1 + 16) == a2) {
    return result;
  }
  uint64_t v16 = 0;
  int v17 = a5;
  unint64_t v18 = a5;
  do
  {
    uint64_t v19 = v15;
    unsigned __int32 v20 = (void *)v18->n128_u64[0];
    ++v18;
    uint64_t v21 = **v15;
    if (v21 == *v20)
    {
      if (*((_DWORD *)v9 + 6) <= v17->n128_u32[2]) {
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v22 = v18;
      uint64_t v23 = *a3;
      unint64_t v24 = (uint64_t *)(*a3 + 24);
      uint64_t v61 = 0;
      uint64_t v62 = v21;
      if (sub_1CBFA3AF4(v24, &v62, &v61)) {
        uint64_t v25 = v61;
      }
      else {
        uint64_t v25 = *(void *)(v23 + 24) + 16 * *(unsigned int *)(v23 + 40);
      }
      int v26 = *(_DWORD *)(v25 + 8);
      uint64_t v27 = *(void *)v17->n128_u64[0];
      uint64_t v61 = 0;
      uint64_t v62 = v27;
      if (sub_1CBFA3AF4(v24, &v62, &v61)) {
        uint64_t v28 = v61;
      }
      else {
        uint64_t v28 = *(void *)(v23 + 24) + 16 * *(unsigned int *)(v23 + 40);
      }
      unint64_t v18 = v22;
      if (v26 - 1 >= (*(_DWORD *)(v28 + 8) - 1))
      {
LABEL_16:
        BOOL result = *(__n128 *)v19;
        *unint64_t v18 = *(__n128 *)v19;
        goto LABEL_40;
      }
    }
    BOOL result = *v17;
    *unint64_t v18 = *v17;
    uint64_t v29 = v6;
    if (v17 == v6) {
      goto LABEL_39;
    }
    uint64_t v59 = v18;
    uint64_t v30 = v16;
    while (1)
    {
      uint64_t v31 = (char *)v6 + v30;
      uint64_t v32 = **v19;
      int v33 = *(void **)((char *)v6[-1].n128_u64 + v30);
      if (v32 == *v33)
      {
        unsigned int v37 = *((_DWORD *)v31 - 2);
        if (*((_DWORD *)v9 + 6) <= v37)
        {
          uint64_t v29 = v17;
          goto LABEL_38;
        }
        goto LABEL_35;
      }
      uint64_t v34 = *a3;
      uint64_t v35 = (uint64_t *)(*a3 + 24);
      uint64_t v61 = 0;
      uint64_t v62 = v32;
      uint64_t v36 = sub_1CBFA3AF4(v35, &v62, &v61)
          ? v61
          : *(void *)(v34 + 24) + 16 * *(unsigned int *)(v34 + 40);
      int v38 = *(_DWORD *)(v36 + 8);
      uint64_t v39 = **((void **)v31 - 2);
      uint64_t v61 = 0;
      uint64_t v62 = v39;
      uint64_t v40 = sub_1CBFA3AF4(v35, &v62, &v61)
          ? v61
          : *(void *)(v34 + 24) + 16 * *(unsigned int *)(v34 + 40);
      if (v38 - 1 >= (*(_DWORD *)(v40 + 8) - 1)) {
        break;
      }
      int v33 = (void *)*((void *)v31 - 2);
      unsigned int v37 = *(unsigned __int32 *)((char *)&v6->n128_u32[-2] + v30);
LABEL_35:
      --v17;
      v41 = (char *)v6 + v30;
      *(void *)v41 = v33;
      *((_DWORD *)v41 + 2) = v37;
      v30 -= 16;
      if (!v30)
      {
        uint64_t v29 = v6;
        goto LABEL_38;
      }
    }
    uint64_t v29 = (__n128 *)((char *)v6 + v30);
LABEL_38:
    uint64_t v8 = a2;
    unint64_t v18 = v59;
LABEL_39:
    v29->n128_u64[0] = (unint64_t)*v19;
    v29->n128_u32[2] = *((_DWORD *)v9 + 6);
LABEL_40:
    BOOL v15 = v19 + 2;
    v16 += 16;
    int v17 = v18;
    int v9 = v19;
  }
  while (v19 + 2 != (uint64_t **)v8);
  return result;
}

uint64_t sub_1CC21D11C(uint64_t result, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t a8)
{
  uint64_t v102 = a6;
  if (!a6) {
    return result;
  }
  uint64_t v12 = result;
  do
  {
    if (a5 <= a8 || v102 <= a8)
    {
      if (a5 > v102)
      {
        if (a2 == a3) {
          return result;
        }
        uint64_t v58 = 0;
        do
        {
          *(_OWORD *)&a7[v58] = *(_OWORD *)&a2[v58];
          v58 += 2;
        }
        while (&a2[v58] != a3);
        if (!(v58 * 8)) {
          return result;
        }
        uint64_t v59 = &a7[v58];
        for (i = a3 - 1; ; i -= 2)
        {
          if (a2 == (uint64_t *)v12)
          {
            if (v59 != a7)
            {
              unint64_t v87 = 0;
              do
              {
                uint64_t v88 = &i[v87];
                *(v88 - 1) = (uint64_t)v59[v87 - 2];
                *(_DWORD *)uint64_t v88 = v59[v87 - 1];
                v87 -= 2;
              }
              while (&v59[v87] != a7);
            }
            return result;
          }
          uint64_t v61 = a2 - 2;
          uint64_t v62 = *(v59 - 2);
          uint64_t v63 = *v62;
          if (*v62 == *(void *)*(a2 - 2))
          {
            unsigned int v67 = *((_DWORD *)v59 - 2);
            if (v67 <= *((_DWORD *)a2 - 2)) {
              goto LABEL_91;
            }
            uint64_t v62 = (uint64_t *)*(a2 - 2);
            unsigned int v67 = *((_DWORD *)a2 - 2);
          }
          else
          {
            uint64_t v64 = *a4;
            uint64_t v65 = (uint64_t *)(*a4 + 24);
            uint64_t v104 = 0;
            uint64_t v105 = v63;
            v98 = a2;
            if (sub_1CBFA3AF4(v65, &v105, &v104)) {
              uint64_t v66 = v104;
            }
            else {
              uint64_t v66 = *(void *)(v64 + 24) + 16 * *(unsigned int *)(v64 + 40);
            }
            int v68 = *(_DWORD *)(v66 + 8);
            uint64_t v69 = *(void *)*v61;
            uint64_t v104 = 0;
            uint64_t v105 = v69;
            BOOL result = sub_1CBFA3AF4(v65, &v105, &v104);
            if (result) {
              uint64_t v70 = v104;
            }
            else {
              uint64_t v70 = *(void *)(v64 + 24) + 16 * *(unsigned int *)(v64 + 40);
            }
            if (v68 - 1 >= (*(_DWORD *)(v70 + 8) - 1))
            {
              uint64_t v62 = *(v59 - 2);
              unsigned int v67 = *((_DWORD *)v59 - 2);
              a2 = v98;
LABEL_91:
              v59 -= 2;
              goto LABEL_92;
            }
            uint64_t v62 = (uint64_t *)*(v98 - 2);
            unsigned int v67 = *((_DWORD *)v98 - 2);
          }
          a2 = v61;
LABEL_92:
          *(i - 1) = (uint64_t)v62;
          *(_DWORD *)i = v67;
          if (v59 == a7) {
            return result;
          }
        }
      }
      if ((uint64_t *)v12 == a2) {
        return result;
      }
      uint64_t v71 = 0;
      do
      {
        *(_OWORD *)&a7[v71] = *(_OWORD *)(v12 + v71 * 8);
        v71 += 2;
      }
      while ((uint64_t *)(v12 + v71 * 8) != a2);
      if (!(v71 * 8)) {
        return result;
      }
      uint64_t v72 = &a7[v71];
      uint64_t v73 = (uint64_t)&a7[v71 - 2];
      while (1)
      {
        if (a2 == a3)
        {
          if (v72 != a7)
          {
            uint64_t v89 = 0;
            do
            {
              uint64_t v90 = v12 + v89 * 8;
              v91 = &a7[v89];
              *(void *)uint64_t v90 = a7[v89];
              *(_DWORD *)(v90 + 8) = a7[v89 + 1];
              v89 += 2;
            }
            while ((uint64_t **)v73 != v91);
          }
          return result;
        }
        v74 = (void *)*a2;
        uint64_t v75 = *(void *)*a2;
        uint64_t v76 = *a7;
        if (v75 == **a7)
        {
          unsigned int v80 = *((_DWORD *)a2 + 2);
          unsigned int v81 = *((_DWORD *)a7 + 2);
          if (v80 <= v81) {
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v77 = *a4;
          int v78 = (uint64_t *)(*a4 + 24);
          uint64_t v104 = 0;
          uint64_t v105 = v75;
          if (sub_1CBFA3AF4(v78, &v105, &v104)) {
            uint64_t v79 = v104;
          }
          else {
            uint64_t v79 = *(void *)(v77 + 24) + 16 * *(unsigned int *)(v77 + 40);
          }
          int v82 = *(_DWORD *)(v79 + 8);
          uint64_t v83 = **a7;
          uint64_t v104 = 0;
          uint64_t v105 = v83;
          BOOL result = sub_1CBFA3AF4(v78, &v105, &v104);
          if (result) {
            uint64_t v84 = v104;
          }
          else {
            uint64_t v84 = *(void *)(v77 + 24) + 16 * *(unsigned int *)(v77 + 40);
          }
          if (v82 - 1 >= (*(_DWORD *)(v84 + 8) - 1))
          {
            uint64_t v76 = *a7;
            unsigned int v81 = *((_DWORD *)a7 + 2);
LABEL_113:
            *(void *)uint64_t v12 = v76;
            *(_DWORD *)(v12 + 8) = v81;
            a7 += 2;
            goto LABEL_114;
          }
          v74 = (void *)*a2;
          unsigned int v80 = *((_DWORD *)a2 + 2);
        }
        *(void *)uint64_t v12 = v74;
        *(_DWORD *)(v12 + 8) = v80;
        a2 += 2;
LABEL_114:
        v12 += 16;
        if (v72 == a7) {
          return result;
        }
      }
    }
    if (!a5) {
      return result;
    }
    uint64_t v13 = 0;
    uint64_t v14 = -a5;
    while (1)
    {
      uint64_t v15 = *(void *)*a2;
      if (v15 != **(void **)(v12 + v13)) {
        break;
      }
      if (*((_DWORD *)a2 + 2) > *(_DWORD *)(v12 + v13 + 8)) {
        goto LABEL_20;
      }
LABEL_17:
      v13 += 16;
      if (__CFADD__(v14++, 1)) {
        return result;
      }
    }
    uint64_t v16 = *a4;
    int v17 = (uint64_t *)(*a4 + 24);
    uint64_t v104 = 0;
    uint64_t v105 = v15;
    if (sub_1CBFA3AF4(v17, &v105, &v104)) {
      uint64_t v18 = v104;
    }
    else {
      uint64_t v18 = *(void *)(v16 + 24) + 16 * *(unsigned int *)(v16 + 40);
    }
    int v19 = *(_DWORD *)(v18 + 8);
    uint64_t v20 = **(void **)(v12 + v13);
    uint64_t v104 = 0;
    uint64_t v105 = v20;
    BOOL result = sub_1CBFA3AF4(v17, &v105, &v104);
    if (result) {
      uint64_t v21 = v104;
    }
    else {
      uint64_t v21 = *(void *)(v16 + 24) + 16 * *(unsigned int *)(v16 + 40);
    }
    if (v19 - 1 >= (*(_DWORD *)(v21 + 8) - 1)) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v23 = -v14;
    uint64_t v24 = v102;
    uint64_t v96 = v12;
    v97 = a2;
    uint64_t v93 = v12 + v13;
    if (-v14 < v102)
    {
      if (v102 >= 0) {
        uint64_t v25 = v102;
      }
      else {
        uint64_t v25 = v102 + 1;
      }
      uint64_t v26 = v25 >> 1;
      uint64_t v27 = a2;
      uint64_t v92 = v26;
      a2 += 2 * v26;
      if ((uint64_t *)(v12 + v13) == v27)
      {
        uint64_t v29 = v27;
      }
      else
      {
        v94 = a7;
        unint64_t v28 = ((uint64_t)v27 - v12 - v13) >> 4;
        uint64_t v29 = (uint64_t *)(v12 + v13);
        do
        {
          uint64_t v30 = &v29[2 * (v28 >> 1)];
          uint64_t v31 = *(void *)*a2;
          if (v31 == *(void *)*v30)
          {
            BOOL v35 = *((_DWORD *)a2 + 2) > *((_DWORD *)v30 + 2);
          }
          else
          {
            uint64_t v32 = *a4;
            int v33 = (uint64_t *)(*a4 + 24);
            uint64_t v104 = 0;
            uint64_t v105 = v31;
            if (sub_1CBFA3AF4(v33, &v105, &v104)) {
              uint64_t v34 = v104;
            }
            else {
              uint64_t v34 = *(void *)(v32 + 24) + 16 * *(unsigned int *)(v32 + 40);
            }
            int v36 = *(_DWORD *)(v34 + 8);
            uint64_t v37 = *(void *)*v30;
            uint64_t v104 = 0;
            uint64_t v105 = v37;
            if (sub_1CBFA3AF4(v33, &v105, &v104)) {
              uint64_t v38 = v104;
            }
            else {
              uint64_t v38 = *(void *)(v32 + 24) + 16 * *(unsigned int *)(v32 + 40);
            }
            BOOL v35 = v36 - 1 < (*(_DWORD *)(v38 + 8) - 1);
          }
          if (v35)
          {
            v28 >>= 1;
          }
          else
          {
            uint64_t v29 = v30 + 2;
            v28 += ~(v28 >> 1);
          }
        }
        while (v28);
        a7 = v94;
        uint64_t v24 = v102;
      }
      uint64_t v52 = v92;
      uint64_t v51 = v97;
      uint64_t v53 = ((uint64_t)v29 - v96 - v13) >> 4;
      goto LABEL_63;
    }
    if (v14 == -1)
    {
      uint64_t v85 = v12 + v13;
      uint64_t v86 = *(void *)(v12 + v13);
      *(void *)uint64_t v85 = *a2;
      *a2 = v86;
      LODWORD(v86) = *(_DWORD *)(v12 + v13 + 8);
      *(_DWORD *)(v85 + 8) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v86;
      return result;
    }
    v103 = a4;
    v95 = a7;
    if (v14 > 0) {
      uint64_t v23 = 1 - v14;
    }
    uint64_t v100 = v23 >> 1;
    uint64_t v29 = (uint64_t *)(v12 + 16 * (v23 >> 1) + v13);
    uint64_t v39 = a2;
    a2 = a3;
    uint64_t v40 = (char *)a3 - (char *)v39;
    if (v40)
    {
      unint64_t v41 = v40 >> 4;
      uint64_t v42 = *a4;
      unsigned int v43 = (uint64_t *)(*a4 + 24);
      a2 = v97;
      do
      {
        uint64_t v44 = &a2[2 * (v41 >> 1)];
        uint64_t v45 = *(void *)*v44;
        if (v45 == *(void *)*v29)
        {
          BOOL v47 = *((_DWORD *)v44 + 2) > *((_DWORD *)v29 + 2);
        }
        else
        {
          uint64_t v104 = 0;
          uint64_t v105 = v45;
          if (sub_1CBFA3AF4(v43, &v105, &v104)) {
            uint64_t v46 = v104;
          }
          else {
            uint64_t v46 = *(void *)(v42 + 24) + 16 * *(unsigned int *)(v42 + 40);
          }
          int v48 = *(_DWORD *)(v46 + 8);
          uint64_t v49 = *(void *)*v29;
          uint64_t v104 = 0;
          uint64_t v105 = v49;
          if (sub_1CBFA3AF4(v43, &v105, &v104)) {
            uint64_t v50 = v104;
          }
          else {
            uint64_t v50 = *(void *)(v42 + 24) + 16 * *(unsigned int *)(v42 + 40);
          }
          BOOL v47 = v48 - 1 < (*(_DWORD *)(v50 + 8) - 1);
        }
        if (v47) {
          v41 += ~(v41 >> 1);
        }
        else {
          v41 >>= 1;
        }
        if (v47) {
          a2 = v44 + 2;
        }
      }
      while (v41);
    }
    uint64_t v51 = v97;
    uint64_t v52 = ((char *)a2 - (char *)v97) >> 4;
    a7 = v95;
    uint64_t v24 = v102;
    a4 = v103;
    uint64_t v53 = v100;
LABEL_63:
    unsigned int v54 = a2;
    if (v29 != v51)
    {
      unsigned int v54 = v29;
      if (v51 != a2)
      {
        uint64_t v55 = v52;
        uint64_t v56 = sub_1CC21D8AC(v29, v51, a2);
        uint64_t v52 = v55;
        uint64_t v24 = v102;
        unsigned int v54 = v56;
      }
    }
    a5 = -(v53 + v14);
    uint64_t v57 = v24 - v52;
    if (v53 + v52 >= v24 - (v53 + v52) - v14)
    {
      uint64_t v57 = v52;
      BOOL result = sub_1CC21D11C(v54, a2, a3, a4, -(v53 + v14), v24 - v52, a7, a8);
      a2 = v29;
      a5 = v53;
      a3 = v54;
      uint64_t v12 = v93;
    }
    else
    {
      BOOL result = sub_1CC21D11C(v96 + v13, v29, v54, a4, v53, v52, a7, a8);
      uint64_t v12 = (uint64_t)v54;
    }
    uint64_t v102 = v57;
  }
  while (v57);
  return result;
}

uint64_t *sub_1CC21D8AC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  LODWORD(v3) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v3;
  BOOL result = a1 + 2;
  for (i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2) {
      a2 = i;
    }
    uint64_t v6 = *result;
    *BOOL result = *i;
    uint64_t *i = v6;
    LODWORD(v6) = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)i + 2);
    *((_DWORD *)i + 2) = v6;
    result += 2;
  }
  if (result != a2)
  {
    unsigned int v7 = result;
    uint64_t v8 = a2;
    do
    {
      while (1)
      {
        uint64_t v9 = *v7;
        *unsigned int v7 = *v8;
        *uint64_t v8 = v9;
        LODWORD(v9) = *((_DWORD *)v7 + 2);
        *((_DWORD *)v7 + 2) = *((_DWORD *)v8 + 2);
        *((_DWORD *)v8 + 2) = v9;
        v7 += 2;
        v8 += 2;
        if (v8 == a3) {
          break;
        }
        if (v7 == a2) {
          a2 = v8;
        }
      }
      uint64_t v8 = a2;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t *sub_1CC21D970(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t), uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v8 = a1;
  if (a4 == 3)
  {
    uint64_t v12 = a1 + 2;
    if (!(*a3)((uint64_t)(a1 + 2)))
    {
      uint64_t v17 = v8[2];
      v8[2] = *a2;
      *a2 = v17;
      LODWORD(v17) = *((_DWORD *)v8 + 6);
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v17;
      uint64_t v18 = *v8;
      *uint64_t v8 = v8[2];
      v8[2] = v18;
      LODWORD(v18) = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = *((_DWORD *)v8 + 6);
      *((_DWORD *)v8 + 6) = v18;
      return v12;
    }
    uint64_t v20 = *v8;
    *uint64_t v8 = v8[2];
    v8[2] = v20;
    int v21 = *((_DWORD *)v8 + 2);
    *((_DWORD *)v8 + 2) = *((_DWORD *)v8 + 6);
    *((_DWORD *)v8 + 6) = v21;
    v8[2] = *a2;
    *a2 = v20;
    *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v21;
    return a2;
  }
  if (a4 == 2)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
    LODWORD(v19) = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v19;
    return a2;
  }
  if (a6 < a4)
  {
    if (a4 >= 0) {
      uint64_t v22 = a4;
    }
    else {
      uint64_t v22 = a4 + 1;
    }
    uint64_t v23 = v22 >> 1;
    uint64_t v24 = &a1[2 * (v22 >> 1)];
    uint64_t v25 = (uint64_t)(v24 - 2);
    if ((*a3)((uint64_t)(v24 - 2)))
    {
      uint64_t v26 = v23;
LABEL_24:
      uint64_t v27 = (uint64_t *)sub_1CC21D970(v8, v25, a3, v26, a5, a6);
    }
    else
    {
      uint64_t v32 = 16 * v23;
      uint64_t v26 = v23;
      while (1)
      {
        uint64_t v33 = v32 - 16;
        if (v32 == 16) {
          break;
        }
        --v26;
        unsigned int v34 = (*a3)((uint64_t)v8 + v32 - 32);
        uint64_t v32 = v33;
        if (v34)
        {
          uint64_t v25 = (uint64_t)v8 + v33 - 16;
          goto LABEL_24;
        }
      }
      uint64_t v27 = v8;
    }
    uint64_t v28 = a4 - v23;
    if ((*a3)((uint64_t)v24))
    {
      uint64_t v12 = a2 + 2;
      uint64_t v29 = &v8[2 * v23];
      uint64_t v30 = v29 + 2;
      while (v30 != a2)
      {
        --v28;
        char v31 = (*a3)((uint64_t)v30);
        v29 += 2;
        v30 += 2;
        if ((v31 & 1) == 0) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      uint64_t v29 = v24;
LABEL_35:
      uint64_t v12 = (uint64_t *)sub_1CC21D970(v29, a2, a3, v28, a5, a6);
    }
    if (v27 != v24)
    {
      if (v24 == v12) {
        return v27;
      }
      else {
        return sub_1CC21D8AC(v27, v24, v12);
      }
    }
  }
  else
  {
    *a5 = *(_OWORD *)a1;
    uint64_t v10 = a5 + 1;
    uint64_t v11 = (uint64_t)(a1 + 2);
    if (a1 + 2 == a2)
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
      uint64_t v12 = a2;
LABEL_11:
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = &a5[v13 / 0x10];
        uint64_t v15 = &v12[v13 / 8];
        *uint64_t v15 = *(void *)&a5[v13 / 0x10];
        *((_DWORD *)v15 + 2) = DWORD2(a5[v13 / 0x10]);
        v13 += 16;
      }
      while (v14 + 1 < v10);
      return v12;
    }
    do
    {
      if ((*a3)(v11))
      {
        *uint64_t v8 = *(void *)v11;
        *((_DWORD *)v8 + 2) = *(_DWORD *)(v11 + 8);
        v8 += 2;
      }
      else
      {
        *v10++ = *(_OWORD *)v11;
      }
      v11 += 16;
    }
    while ((uint64_t *)v11 != a2);
    *uint64_t v8 = *a2;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(v11 + 8);
    uint64_t v12 = v8 + 2;
    if (v10 > a5) {
      goto LABEL_11;
    }
  }
  return v12;
}

void *sub_1CC21DC7C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CBAEE424(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      unint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          unint64_t v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CBAEE424(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      unint64_t v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          unint64_t v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC21DDF8(uint64_t *a1, void *a2)
{
  unsigned int v7 = 0;
  char v4 = sub_1CBFFBC50(a1, a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CC21DE58((uint64_t)a1, a2, v7);
    *unsigned int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC21DE58(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC21DF0C(a1, v6);
  uint64_t v8 = 0;
  sub_1CBFFBC50((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC21DF0C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC080FC0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC21DFD8(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v11 = a2 - 1;
    i = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = i;
          uint64_t v13 = (char *)a2 - (char *)i;
          uint64_t v14 = a2 - i;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v105 = *(a2 - 1);
                uint64_t v106 = *i;
                unint64_t v107 = HIDWORD(*i);
                uint64_t v108 = *(void *)(*(void *)a3 + 168);
                v109 = *(unsigned __int8 **)(v108 + 8 * (HIDWORD(v105) - 1));
                unsigned int v110 = *v109;
                if (*v109)
                {
                  if (v110 - 4 > 0x1E)
                  {
                    unsigned int v110 = 1;
                  }
                  else if ((v109[1] & 0x7F) == 1)
                  {
                    unsigned int v110 = 2;
                  }
                  else
                  {
                    unsigned int v110 = 3;
                  }
                }
                v242 = *(unsigned __int8 **)(v108 + 8 * (v107 - 1));
                unsigned int v243 = *v242;
                if (*v242)
                {
                  if (v243 - 4 > 0x1E)
                  {
                    unsigned int v243 = 1;
                  }
                  else if ((v242[1] & 0x7F) == 1)
                  {
                    unsigned int v243 = 2;
                  }
                  else
                  {
                    unsigned int v243 = 3;
                  }
                }
                if (v105 < v106
                  || v106 >= v105
                  && (v110 < v243 || (v243 >= v110 ? (BOOL v246 = HIDWORD(v105) >= v107) : (BOOL v246 = 1), !v246)))
                {
                  uint64_t *i = v105;
                  *(a2 - 1) = v106;
                }
                break;
              case 3:
                BOOL result = (uint64_t)sub_1CC21F6B0(i, i + 1, a2 - 1, a3);
                break;
              case 4:
                BOOL result = (uint64_t)sub_1CC220068(i, i + 1, i + 2, a2 - 1, a3);
                break;
              case 5:
                v111 = i + 1;
                v112 = i + 2;
                v113 = i + 3;
                BOOL result = (uint64_t)sub_1CC220068(i, i + 1, i + 2, i + 3, a3);
                uint64_t v114 = *(a2 - 1);
                uint64_t v115 = i[3];
                uint64_t v116 = *(void *)(*(void *)a3 + 168);
                v117 = *(unsigned __int8 **)(v116 + 8 * (HIDWORD(v114) - 1));
                unsigned int v118 = *v117;
                if (*v117)
                {
                  if (v118 - 4 > 0x1E)
                  {
                    unsigned int v118 = 1;
                  }
                  else if ((v117[1] & 0x7F) == 1)
                  {
                    unsigned int v118 = 2;
                  }
                  else
                  {
                    unsigned int v118 = 3;
                  }
                }
                v244 = *(unsigned __int8 **)(v116 + 8 * (HIDWORD(v115) - 1));
                unsigned int v245 = *v244;
                if (*v244)
                {
                  if (v245 - 4 > 0x1E)
                  {
                    unsigned int v245 = 1;
                  }
                  else if ((v244[1] & 0x7F) == 1)
                  {
                    unsigned int v245 = 2;
                  }
                  else
                  {
                    unsigned int v245 = 3;
                  }
                }
                if (v114 < v115
                  || v115 >= v114
                  && (v118 < v245 || (v245 >= v118 ? (BOOL v247 = HIDWORD(v114) >= HIDWORD(v115)) : (BOOL v247 = 1), !v247)))
                {
                  uint64_t *v113 = v114;
                  *(a2 - 1) = v115;
                  uint64_t v248 = *v113;
                  uint64_t v249 = *v112;
                  unint64_t v250 = HIDWORD(*v113);
                  unint64_t v251 = HIDWORD(*v112);
                  uint64_t v252 = *(void *)(*(void *)a3 + 168);
                  uint64_t v253 = (v250 - 1);
                  v254 = *(unsigned __int8 **)(v252 + 8 * v253);
                  unsigned int v255 = *v254;
                  if (*v254)
                  {
                    if (v255 - 4 > 0x1E)
                    {
                      unsigned int v255 = 1;
                    }
                    else if ((v254[1] & 0x7F) == 1)
                    {
                      unsigned int v255 = 2;
                    }
                    else
                    {
                      unsigned int v255 = 3;
                    }
                  }
                  v256 = *(unsigned __int8 **)(v252 + 8 * (v251 - 1));
                  unsigned int v257 = *v256;
                  if (*v256)
                  {
                    if (v257 - 4 > 0x1E)
                    {
                      unsigned int v257 = 1;
                    }
                    else if ((v256[1] & 0x7F) == 1)
                    {
                      unsigned int v257 = 2;
                    }
                    else
                    {
                      unsigned int v257 = 3;
                    }
                  }
                  if (v248 < v249
                    || v249 >= v248
                    && (v255 < v257
                     || (v257 >= v255 ? (BOOL v263 = v250 >= v251) : (BOOL v263 = 1), !v263)))
                  {
                    uint64_t *v112 = v248;
                    uint64_t *v113 = v249;
                    uint64_t v258 = *v111;
                    unint64_t v259 = HIDWORD(*v111);
                    uint64_t v260 = *(void *)(*(void *)a3 + 168);
                    v261 = *(unsigned __int8 **)(v260 + 8 * v253);
                    unsigned int v262 = *v261;
                    if (*v261)
                    {
                      if (v262 - 4 > 0x1E)
                      {
                        unsigned int v262 = 1;
                      }
                      else if ((v261[1] & 0x7F) == 1)
                      {
                        unsigned int v262 = 2;
                      }
                      else
                      {
                        unsigned int v262 = 3;
                      }
                    }
                    v264 = *(unsigned __int8 **)(v260 + 8 * (v259 - 1));
                    unsigned int v265 = *v264;
                    if (*v264)
                    {
                      if (v265 - 4 > 0x1E)
                      {
                        unsigned int v265 = 1;
                      }
                      else if ((v264[1] & 0x7F) == 1)
                      {
                        unsigned int v265 = 2;
                      }
                      else
                      {
                        unsigned int v265 = 3;
                      }
                    }
                    if (v248 < v258
                      || v258 >= v248
                      && (v262 < v265
                       || (v265 >= v262 ? (BOOL v271 = v250 >= v259) : (BOOL v271 = 1), !v271)))
                    {
                      i[1] = v248;
                      i[2] = v258;
                      uint64_t v266 = *i;
                      unint64_t v267 = HIDWORD(*i);
                      uint64_t v268 = *(void *)(*(void *)a3 + 168);
                      v269 = *(unsigned __int8 **)(v268 + 8 * v253);
                      unsigned int v270 = *v269;
                      if (*v269)
                      {
                        if (v270 - 4 > 0x1E)
                        {
                          unsigned int v270 = 1;
                        }
                        else if ((v269[1] & 0x7F) == 1)
                        {
                          unsigned int v270 = 2;
                        }
                        else
                        {
                          unsigned int v270 = 3;
                        }
                      }
                      v272 = *(unsigned __int8 **)(v268 + 8 * (v267 - 1));
                      unsigned int v273 = *v272;
                      if (*v272)
                      {
                        if (v273 - 4 > 0x1E)
                        {
                          unsigned int v273 = 1;
                        }
                        else if ((v272[1] & 0x7F) == 1)
                        {
                          unsigned int v273 = 2;
                        }
                        else
                        {
                          unsigned int v273 = 3;
                        }
                      }
                      if (v248 < v266
                        || v266 >= v248
                        && (v270 < v273
                         || (v273 >= v270 ? (BOOL v274 = v250 >= v267) : (BOOL v274 = 1), !v274)))
                      {
                        uint64_t *i = v248;
                        i[1] = v266;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            v119 = i + 1;
            BOOL v121 = i == a2 || v119 == a2;
            if (a5)
            {
              if (!v121)
              {
                uint64_t v122 = 0;
                uint64_t v123 = *(void *)a3;
                v124 = i;
                do
                {
                  v125 = v124;
                  v124 = v119;
                  uint64_t v126 = v125[1];
                  uint64_t v127 = *(void *)(v123 + 168);
                  uint64_t v128 = (HIDWORD(v126) - 1);
                  v129 = *(unsigned __int8 **)(v127 + 8 * v128);
                  unsigned int v130 = *v129;
                  if (*v129)
                  {
                    if (v130 - 4 > 0x1E)
                    {
                      unsigned int v130 = 1;
                    }
                    else if ((v129[1] & 0x7F) == 1)
                    {
                      unsigned int v130 = 2;
                    }
                    else
                    {
                      unsigned int v130 = 3;
                    }
                  }
                  uint64_t v131 = *v125;
                  BOOL result = HIDWORD(*v125);
                  v132 = *(unsigned __int8 **)(v127 + 8 * (result - 1));
                  unsigned int v133 = *v132;
                  if (*v132)
                  {
                    if (v133 - 4 > 0x1E)
                    {
                      unsigned int v133 = 1;
                    }
                    else if ((v132[1] & 0x7F) == 1)
                    {
                      unsigned int v133 = 2;
                    }
                    else
                    {
                      unsigned int v133 = 3;
                    }
                  }
                  if (v126 < v131
                    || v131 >= v126
                    && (v130 < v133
                     || (v133 >= v130 ? (BOOL v142 = HIDWORD(v126) >= result) : (BOOL v142 = 1), !v142)))
                  {
                    v125[1] = v131;
                    v134 = i;
                    if (v125 != i)
                    {
                      uint64_t v135 = v122;
                      while (1)
                      {
                        uint64_t v136 = *(void *)(*(void *)a3 + 168);
                        v137 = *(unsigned __int8 **)(v136 + 8 * v128);
                        unsigned int v138 = *v137;
                        if (*v137)
                        {
                          if (v138 - 4 > 0x1E)
                          {
                            unsigned int v138 = 1;
                          }
                          else if ((v137[1] & 0x7F) == 1)
                          {
                            unsigned int v138 = 2;
                          }
                          else
                          {
                            unsigned int v138 = 3;
                          }
                        }
                        BOOL result = *(uint64_t *)((char *)i + v135 - 8);
                        v139 = *(unsigned __int8 **)(v136 + 8 * (HIDWORD(result) - 1));
                        unsigned int v140 = *v139;
                        if (*v139)
                        {
                          if (v140 - 4 > 0x1E)
                          {
                            unsigned int v140 = 1;
                          }
                          else if ((v139[1] & 0x7F) == 1)
                          {
                            unsigned int v140 = 2;
                          }
                          else
                          {
                            unsigned int v140 = 3;
                          }
                        }
                        if (v126 >= result)
                        {
                          if (result < v126)
                          {
                            v134 = (uint64_t *)((char *)i + v135);
                            goto LABEL_337;
                          }
                          if (v138 >= v140 && (v140 < v138 || HIDWORD(v126) >= HIDWORD(result))) {
                            break;
                          }
                        }
                        --v125;
                        *(uint64_t *)((char *)i + v135) = result;
                        v135 -= 8;
                        if (!v135)
                        {
                          v134 = i;
                          goto LABEL_337;
                        }
                      }
                      v134 = v125;
                    }
LABEL_337:
                    uint64_t *v134 = v126;
                    uint64_t v123 = *(void *)a3;
                  }
                  v119 = v124 + 1;
                  v122 += 8;
                }
                while (v124 + 1 != a2);
              }
            }
            else if (!v121)
            {
              uint64_t v223 = *(void *)a3;
              do
              {
                v224 = v10;
                uint64_t v10 = v119;
                uint64_t v225 = v224[1];
                uint64_t v226 = *(void *)(v223 + 168);
                uint64_t v227 = (HIDWORD(v225) - 1);
                v228 = *(unsigned __int8 **)(v226 + 8 * v227);
                unsigned int v229 = *v228;
                if (*v228)
                {
                  if (v229 - 4 <= 0x1E)
                  {
                    if ((v228[1] & 0x7F) == 1) {
                      unsigned int v229 = 2;
                    }
                    else {
                      unsigned int v229 = 3;
                    }
                  }
                  else
                  {
                    unsigned int v229 = 1;
                  }
                }
                uint64_t v230 = *v224;
                unint64_t v231 = HIDWORD(*v224);
                BOOL result = *(void *)(v226 + 8 * (v231 - 1));
                unsigned int v232 = *(unsigned __int8 *)result;
                if (*(unsigned char *)result)
                {
                  if (v232 - 4 > 0x1E)
                  {
                    unsigned int v232 = 1;
                  }
                  else if ((*(unsigned char *)(result + 1) & 0x7F) == 1)
                  {
                    unsigned int v232 = 2;
                  }
                  else
                  {
                    unsigned int v232 = 3;
                  }
                }
                if (v225 < v230
                  || v230 >= v225
                  && (v229 < v232 || (v232 >= v229 ? (BOOL v241 = HIDWORD(v225) >= v231) : (BOOL v241 = 1), !v241)))
                {
                  while (1)
                  {
                    v233 = v224;
                    uint64_t v234 = v230;
                    uint64_t v235 = *--v224;
                    uint64_t v230 = v235;
                    v224[2] = v234;
                    uint64_t v236 = *(void *)(*(void *)a3 + 168);
                    v237 = *(unsigned __int8 **)(v236 + 8 * v227);
                    unsigned int v238 = *v237;
                    if (*v237)
                    {
                      if (v238 - 4 > 0x1E)
                      {
                        unsigned int v238 = 1;
                      }
                      else if ((v237[1] & 0x7F) == 1)
                      {
                        unsigned int v238 = 2;
                      }
                      else
                      {
                        unsigned int v238 = 3;
                      }
                    }
                    BOOL result = *(void *)(v236 + 8 * (HIDWORD(v230) - 1));
                    unsigned int v239 = *(unsigned __int8 *)result;
                    if (*(unsigned char *)result)
                    {
                      if (v239 - 4 > 0x1E)
                      {
                        unsigned int v239 = 1;
                      }
                      else if ((*(unsigned char *)(result + 1) & 0x7F) == 1)
                      {
                        unsigned int v239 = 2;
                      }
                      else
                      {
                        unsigned int v239 = 3;
                      }
                    }
                    if (v225 >= v230)
                    {
                      if (v230 < v225) {
                        break;
                      }
                      if (v238 >= v239 && (v239 < v238 || HIDWORD(v225) >= HIDWORD(v230))) {
                        break;
                      }
                    }
                  }
                  uint64_t *v233 = v225;
                  uint64_t v223 = *(void *)a3;
                }
                ++v119;
              }
              while (v10 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (i != a2)
            {
              int64_t v143 = (unint64_t)(v14 - 2) >> 1;
              int64_t v144 = v143;
              do
              {
                int64_t v145 = v144;
                if (v143 >= v144)
                {
                  uint64_t v146 = (2 * v144) | 1;
                  v147 = &i[v146];
                  uint64_t v148 = *(void *)a3;
                  if (2 * v145 + 2 < v14)
                  {
                    uint64_t v149 = *v147;
                    unint64_t v150 = HIDWORD(*v147);
                    uint64_t v153 = *(void *)(v148 + 168);
                    v151 = *(unsigned __int8 **)(v153 + 8 * (v150 - 1));
                    unsigned int v152 = *v151;
                    if (*v151)
                    {
                      if (v152 - 4 <= 0x1E)
                      {
                        if ((v151[1] & 0x7F) == 1) {
                          unsigned int v152 = 2;
                        }
                        else {
                          unsigned int v152 = 3;
                        }
                      }
                      else
                      {
                        unsigned int v152 = 1;
                      }
                    }
                    uint64_t v154 = v147[1];
                    v155 = *(unsigned __int8 **)(v153 + 8 * (HIDWORD(v154) - 1));
                    unsigned int v156 = *v155;
                    if (*v155)
                    {
                      if (v156 - 4 <= 0x1E)
                      {
                        if ((v155[1] & 0x7F) == 1) {
                          unsigned int v156 = 2;
                        }
                        else {
                          unsigned int v156 = 3;
                        }
                      }
                      else
                      {
                        unsigned int v156 = 1;
                      }
                    }
                    if (v149 < v154
                      || v154 >= v149
                      && (v152 < v156 || (v150 < HIDWORD(v154) ? (BOOL v184 = v156 >= v152) : (BOOL v184 = 0), v184)))
                    {
                      ++v147;
                      uint64_t v146 = 2 * v145 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v153 = *(void *)(v148 + 168);
                  }
                  BOOL result = *v147;
                  unint64_t v157 = HIDWORD(*v147);
                  v158 = *(unsigned __int8 **)(v153 + 8 * (v157 - 1));
                  unsigned int v159 = *v158;
                  if (*v158)
                  {
                    if (v159 - 4 <= 0x1E)
                    {
                      if ((v158[1] & 0x7F) == 1) {
                        unsigned int v159 = 2;
                      }
                      else {
                        unsigned int v159 = 3;
                      }
                    }
                    else
                    {
                      unsigned int v159 = 1;
                    }
                  }
                  uint64_t v160 = i[v145];
                  uint64_t v161 = (HIDWORD(v160) - 1);
                  v162 = *(unsigned __int8 **)(v153 + 8 * v161);
                  unsigned int v163 = *v162;
                  if (*v162)
                  {
                    if (v163 - 4 <= 0x1E)
                    {
                      if ((v162[1] & 0x7F) == 1) {
                        unsigned int v163 = 2;
                      }
                      else {
                        unsigned int v163 = 3;
                      }
                    }
                    else
                    {
                      unsigned int v163 = 1;
                    }
                  }
                  if (result >= v160)
                  {
                    if (v160 < result
                      || v159 >= v163
                      && (v163 >= v159 ? (BOOL v183 = v157 >= HIDWORD(v160)) : (BOOL v183 = 1), v183))
                    {
                      i[v145] = result;
                      if (v143 >= v146)
                      {
                        while (1)
                        {
                          uint64_t v165 = 2 * v146;
                          uint64_t v146 = (2 * v146) | 1;
                          v164 = &i[v146];
                          uint64_t v166 = v165 + 2;
                          uint64_t v167 = *(void *)a3;
                          if (v166 < v14)
                          {
                            uint64_t v168 = *v164;
                            unint64_t v169 = HIDWORD(*v164);
                            uint64_t v172 = *(void *)(v167 + 168);
                            v170 = *(unsigned __int8 **)(v172 + 8 * (v169 - 1));
                            unsigned int v171 = *v170;
                            if (*v170)
                            {
                              if (v171 - 4 <= 0x1E)
                              {
                                if ((v170[1] & 0x7F) == 1) {
                                  unsigned int v171 = 2;
                                }
                                else {
                                  unsigned int v171 = 3;
                                }
                              }
                              else
                              {
                                unsigned int v171 = 1;
                              }
                            }
                            uint64_t v173 = v164[1];
                            v174 = *(unsigned __int8 **)(v172 + 8 * (HIDWORD(v173) - 1));
                            unsigned int v175 = *v174;
                            if (*v174)
                            {
                              if (v175 - 4 <= 0x1E)
                              {
                                if ((v174[1] & 0x7F) == 1) {
                                  unsigned int v175 = 2;
                                }
                                else {
                                  unsigned int v175 = 3;
                                }
                              }
                              else
                              {
                                unsigned int v175 = 1;
                              }
                            }
                            if (v168 < v173
                              || v173 >= v168
                              && (v171 < v175
                               || (v169 < HIDWORD(v173) ? (BOOL v176 = v175 >= v171) : (BOOL v176 = 0), v176)))
                            {
                              ++v164;
                              uint64_t v146 = v166;
                            }
                          }
                          else
                          {
                            uint64_t v172 = *(void *)(v167 + 168);
                          }
                          uint64_t v177 = *v164;
                          unint64_t v178 = HIDWORD(*v164);
                          v179 = *(unsigned __int8 **)(v172 + 8 * (v178 - 1));
                          unsigned int v180 = *v179;
                          if (*v179)
                          {
                            if (v180 - 4 <= 0x1E)
                            {
                              if ((v179[1] & 0x7F) == 1) {
                                unsigned int v180 = 2;
                              }
                              else {
                                unsigned int v180 = 3;
                              }
                            }
                            else
                            {
                              unsigned int v180 = 1;
                            }
                          }
                          v181 = *(unsigned __int8 **)(v172 + 8 * v161);
                          BOOL result = *v181;
                          if (*v181)
                          {
                            if ((result - 4) <= 0x1E)
                            {
                              if ((v181[1] & 0x7F) == 1) {
                                BOOL result = 2;
                              }
                              else {
                                BOOL result = 3;
                              }
                            }
                            else
                            {
                              BOOL result = 1;
                            }
                          }
                          if (v177 < v160) {
                            break;
                          }
                          if (v160 >= v177)
                          {
                            if (v180 < result) {
                              break;
                            }
                            if (result >= v180 && v178 < HIDWORD(v160)) {
                              break;
                            }
                          }
                          uint64_t *v147 = v177;
                          v147 = v164;
                          if (v143 < v146) {
                            goto LABEL_376;
                          }
                        }
                      }
                      v164 = v147;
LABEL_376:
                      uint64_t *v164 = v160;
                    }
                  }
                }
                int64_t v144 = v145 - 1;
              }
              while (v145);
              do
              {
                uint64_t v185 = 0;
                uint64_t v186 = *i;
                v187 = i;
                do
                {
                  v188 = v187;
                  v187 += v185 + 1;
                  uint64_t v189 = 2 * v185;
                  uint64_t v185 = (2 * v185) | 1;
                  uint64_t v190 = v189 + 2;
                  if (v190 < v14)
                  {
                    uint64_t v191 = *v187;
                    unint64_t v192 = HIDWORD(*v187);
                    uint64_t v193 = *(void *)(*(void *)a3 + 168);
                    v194 = *(unsigned __int8 **)(v193 + 8 * (v192 - 1));
                    BOOL result = *v194;
                    if (*v194)
                    {
                      if ((result - 4) <= 0x1E)
                      {
                        if ((v194[1] & 0x7F) == 1) {
                          BOOL result = 2;
                        }
                        else {
                          BOOL result = 3;
                        }
                      }
                      else
                      {
                        BOOL result = 1;
                      }
                    }
                    uint64_t v195 = v187[1];
                    v196 = *(unsigned __int8 **)(v193 + 8 * (HIDWORD(v195) - 1));
                    unsigned int v197 = *v196;
                    if (*v196)
                    {
                      if (v197 - 4 <= 0x1E)
                      {
                        if ((v196[1] & 0x7F) == 1) {
                          unsigned int v197 = 2;
                        }
                        else {
                          unsigned int v197 = 3;
                        }
                      }
                      else
                      {
                        unsigned int v197 = 1;
                      }
                    }
                    if (v191 < v195
                      || v195 >= v191
                      && (result < v197
                       || (v192 < HIDWORD(v195) ? (BOOL v198 = v197 >= result) : (BOOL v198 = 0), v198)))
                    {
                      ++v187;
                      uint64_t v185 = v190;
                    }
                  }
                  uint64_t *v188 = *v187;
                }
                while (v185 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                if (v187 == --a2)
                {
                  uint64_t *v187 = v186;
                }
                else
                {
                  uint64_t *v187 = *a2;
                  *a2 = v186;
                  uint64_t v199 = (char *)v187 - (char *)i + 8;
                  if (v199 >= 9)
                  {
                    unint64_t v200 = ((unint64_t)v199 >> 3) - 2;
                    unint64_t v201 = v200 >> 1;
                    v202 = &i[v200 >> 1];
                    uint64_t v203 = *v202;
                    BOOL result = HIDWORD(*v202);
                    uint64_t v204 = *(void *)(*(void *)a3 + 168);
                    v205 = *(unsigned __int8 **)(v204 + 8 * (result - 1));
                    unsigned int v206 = *v205;
                    if (*v205)
                    {
                      if (v206 - 4 <= 0x1E)
                      {
                        if ((v205[1] & 0x7F) == 1) {
                          unsigned int v206 = 2;
                        }
                        else {
                          unsigned int v206 = 3;
                        }
                      }
                      else
                      {
                        unsigned int v206 = 1;
                      }
                    }
                    uint64_t v207 = *v187;
                    unint64_t v208 = HIDWORD(*v187);
                    uint64_t v209 = (v208 - 1);
                    v210 = *(unsigned __int8 **)(v204 + 8 * v209);
                    unsigned int v211 = *v210;
                    if (*v210)
                    {
                      if (v211 - 4 <= 0x1E)
                      {
                        if ((v210[1] & 0x7F) == 1) {
                          unsigned int v211 = 2;
                        }
                        else {
                          unsigned int v211 = 3;
                        }
                      }
                      else
                      {
                        unsigned int v211 = 1;
                      }
                    }
                    if (v203 < v207
                      || v207 >= v203
                      && (v206 < v211
                       || (v211 >= v206 ? (BOOL v212 = result >= v208) : (BOOL v212 = 1), !v212)))
                    {
                      uint64_t *v187 = v203;
                      if (v200 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v214 = v201 - 1;
                          unint64_t v201 = (v201 - 1) >> 1;
                          v213 = &i[v201];
                          uint64_t v215 = *v213;
                          BOOL result = HIDWORD(*v213);
                          uint64_t v216 = *(void *)(*(void *)a3 + 168);
                          v217 = *(unsigned __int8 **)(v216 + 8 * (result - 1));
                          unsigned int v218 = *v217;
                          if (*v217)
                          {
                            if (v218 - 4 <= 0x1E)
                            {
                              if ((v217[1] & 0x7F) == 1) {
                                unsigned int v218 = 2;
                              }
                              else {
                                unsigned int v218 = 3;
                              }
                            }
                            else
                            {
                              unsigned int v218 = 1;
                            }
                          }
                          v219 = *(unsigned __int8 **)(v216 + 8 * v209);
                          unsigned int v220 = *v219;
                          if (*v219)
                          {
                            if (v220 - 4 <= 0x1E)
                            {
                              if ((v219[1] & 0x7F) == 1) {
                                unsigned int v220 = 2;
                              }
                              else {
                                unsigned int v220 = 3;
                              }
                            }
                            else
                            {
                              unsigned int v220 = 1;
                            }
                          }
                          if (v215 >= v207)
                          {
                            if (v207 < v215) {
                              break;
                            }
                            if (v218 >= v220 && (v220 < v218 || result >= v208)) {
                              break;
                            }
                          }
                          uint64_t *v202 = v215;
                          v202 = &i[v201];
                          if (v214 <= 1) {
                            goto LABEL_503;
                          }
                        }
                      }
                      v213 = v202;
LABEL_503:
                      uint64_t *v213 = v207;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unsigned int v16 = &i[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            sub_1CC21F6B0(v10, &v10[(unint64_t)v14 >> 1], a2 - 1, a3);
            sub_1CC21F6B0(v10 + 1, v16 - 1, a2 - 2, a3);
            sub_1CC21F6B0(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            sub_1CC21F6B0(v16 - 1, v16, &v10[v15 + 1], a3);
            uint64_t v17 = *v10;
            *uint64_t v10 = *v16;
            *unsigned int v16 = v17;
          }
          else
          {
            sub_1CC21F6B0(&v10[(unint64_t)v14 >> 1], v10, a2 - 1, a3);
          }
          --a4;
          unint64_t v18 = *v10;
          uint64_t v19 = *(void *)a3;
          if (a5)
          {
            uint64_t v20 = *(void *)(v19 + 168);
            unint64_t v21 = HIDWORD(v18);
            uint64_t v22 = (HIDWORD(v18) - 1);
            uint64_t v23 = *(unsigned __int8 **)(v20 + 8 * v22);
            int v24 = *v23;
            break;
          }
          uint64_t v25 = *(v10 - 1);
          uint64_t v20 = *(void *)(v19 + 168);
          uint64_t v26 = *(unsigned __int8 **)(v20 + 8 * (HIDWORD(v25) - 1));
          unsigned int v27 = *v26;
          if (*v26)
          {
            if (v27 - 4 > 0x1E)
            {
              unsigned int v27 = 1;
            }
            else if ((v26[1] & 0x7F) == 1)
            {
              unsigned int v27 = 2;
            }
            else
            {
              unsigned int v27 = 3;
            }
          }
          unint64_t v21 = HIDWORD(v18);
          uint64_t v22 = (HIDWORD(v18) - 1);
          uint64_t v23 = *(unsigned __int8 **)(v20 + 8 * v22);
          int v24 = *v23;
          if (*v23)
          {
            if ((v24 - 4) > 0x1E) {
              unsigned int v28 = 1;
            }
            else {
              unsigned int v28 = (v23[1] & 0x7F) == 1 ? 2 : 3;
            }
          }
          else
          {
            unsigned int v28 = 0;
          }
          if (v25 < v18) {
            break;
          }
          if (v18 >= v25)
          {
            if (v27 < v28) {
              break;
            }
            if (v28 >= v27 && HIDWORD(v25) < HIDWORD(v18)) {
              break;
            }
          }
          if (*v23)
          {
            if ((v24 - 4) > 0x1E)
            {
              unsigned int v68 = 1;
            }
            else if ((v23[1] & 0x7F) == 1)
            {
              unsigned int v68 = 2;
            }
            else
            {
              unsigned int v68 = 3;
            }
          }
          else
          {
            unsigned int v68 = 0;
          }
          unint64_t v69 = *v11;
          unint64_t v70 = HIDWORD(*v11);
          BOOL result = *(void *)(v20 + 8 * (v70 - 1));
          unsigned int v71 = *(unsigned __int8 *)result;
          if (*(unsigned char *)result)
          {
            if (v71 - 4 > 0x1E)
            {
              unsigned int v71 = 1;
            }
            else if ((*(unsigned char *)(result + 1) & 0x7F) == 1)
            {
              unsigned int v71 = 2;
            }
            else
            {
              unsigned int v71 = 3;
            }
          }
          if (v18 >= v69
            && (v69 < v18
             || v68 >= v71 && (v71 >= v68 ? (BOOL v72 = HIDWORD(v18) >= v70) : (BOOL v72 = 1), v72)))
          {
            for (i = v10 + 1; i < a2; ++i)
            {
              unsigned int v73 = v24 != 0;
              if ((v24 - 35) >= 0xFFFFFFE1)
              {
                if ((v23[1] & 0x7F) == 1) {
                  unsigned int v73 = 2;
                }
                else {
                  unsigned int v73 = 3;
                }
              }
              uint64_t v74 = *i;
              BOOL result = HIDWORD(*i);
              uint64_t v75 = *(unsigned __int8 **)(v20 + 8 * (result - 1));
              unsigned int v76 = *v75;
              if (*v75)
              {
                if (v76 - 4 > 0x1E)
                {
                  unsigned int v76 = 1;
                }
                else if ((v75[1] & 0x7F) == 1)
                {
                  unsigned int v76 = 2;
                }
                else
                {
                  unsigned int v76 = 3;
                }
              }
              if (v18 < v74) {
                break;
              }
              if (v74 >= v18)
              {
                if (v73 < v76) {
                  break;
                }
                if (v76 >= v73 && HIDWORD(v18) < result) {
                  break;
                }
              }
            }
          }
          else
          {
            for (i = v10 + 1; ; ++i)
            {
              unsigned int v100 = v24 != 0;
              if ((v24 - 35) >= 0xFFFFFFE1)
              {
                if ((v23[1] & 0x7F) == 1) {
                  unsigned int v100 = 2;
                }
                else {
                  unsigned int v100 = 3;
                }
              }
              uint64_t v101 = *i;
              BOOL result = HIDWORD(*i);
              uint64_t v102 = *(unsigned __int8 **)(v20 + 8 * (result - 1));
              unsigned int v103 = *v102;
              if (*v102)
              {
                if (v103 - 4 > 0x1E)
                {
                  unsigned int v103 = 1;
                }
                else if ((v102[1] & 0x7F) == 1)
                {
                  unsigned int v103 = 2;
                }
                else
                {
                  unsigned int v103 = 3;
                }
              }
              if (v18 < v101) {
                break;
              }
              if (v101 >= v18)
              {
                if (v100 < v103) {
                  break;
                }
                if (v103 >= v100 && HIDWORD(v18) < result) {
                  break;
                }
              }
            }
          }
          j = a2;
          if (i < a2)
          {
            BOOL v79 = v24 != 0;
            unsigned int v80 = v24 - 35;
            for (j = a2 - 1; ; --j)
            {
              unsigned int v81 = v79;
              if (v80 >= 0xFFFFFFE1)
              {
                if ((v23[1] & 0x7F) == 1) {
                  unsigned int v81 = 2;
                }
                else {
                  unsigned int v81 = 3;
                }
              }
              BOOL result = HIDWORD(v69);
              int v82 = *(unsigned __int8 **)(v20 + 8 * (HIDWORD(v69) - 1));
              unsigned int v83 = *v82;
              if (*v82)
              {
                if (v83 - 4 > 0x1E)
                {
                  unsigned int v83 = 1;
                }
                else if ((v82[1] & 0x7F) == 1)
                {
                  unsigned int v83 = 2;
                }
                else
                {
                  unsigned int v83 = 3;
                }
              }
              if (v18 >= v69)
              {
                if (v69 < v18) {
                  break;
                }
                if (v81 >= v83 && (v83 < v81 || HIDWORD(v18) >= HIDWORD(v69))) {
                  break;
                }
              }
              unint64_t v85 = *(j - 1);
              unint64_t v69 = v85;
            }
          }
          if (i < j)
          {
            uint64_t v86 = *i;
            uint64_t v87 = *j;
            do
            {
              *i++ = v87;
              uint64_t *j = v86;
              uint64_t v88 = *(void *)(*(void *)a3 + 168);
              uint64_t v89 = *(unsigned __int8 **)(v88 + 8 * v22);
              unsigned int v90 = *v89 - 35;
              while (1)
              {
                uint64_t v86 = *i;
                unsigned int v91 = *v89 != 0;
                if (v90 >= 0xFFFFFFE1)
                {
                  if ((v89[1] & 0x7F) == 1) {
                    unsigned int v91 = 2;
                  }
                  else {
                    unsigned int v91 = 3;
                  }
                }
                uint64_t v92 = *(unsigned __int8 **)(v88 + 8 * (HIDWORD(v86) - 1));
                unsigned int v93 = *v92;
                if (*v92)
                {
                  if (v93 - 4 > 0x1E)
                  {
                    unsigned int v93 = 1;
                  }
                  else if ((v92[1] & 0x7F) == 1)
                  {
                    unsigned int v93 = 2;
                  }
                  else
                  {
                    unsigned int v93 = 3;
                  }
                }
                if (v18 < v86) {
                  break;
                }
                if (v86 >= v18)
                {
                  if (v91 < v93) {
                    break;
                  }
                  if (v93 >= v91 && HIDWORD(v18) < HIDWORD(v86)) {
                    break;
                  }
                }
                ++i;
              }
              while (1)
              {
                uint64_t v95 = *--j;
                uint64_t v87 = v95;
                BOOL result = *v89 != 0;
                if (v90 >= 0xFFFFFFE1)
                {
                  if ((v89[1] & 0x7F) == 1) {
                    BOOL result = 2;
                  }
                  else {
                    BOOL result = 3;
                  }
                }
                uint64_t v96 = *(unsigned __int8 **)(v88 + 8 * (HIDWORD(v87) - 1));
                unsigned int v97 = *v96;
                if (*v96)
                {
                  if (v97 - 4 > 0x1E)
                  {
                    unsigned int v97 = 1;
                  }
                  else if ((v96[1] & 0x7F) == 1)
                  {
                    unsigned int v97 = 2;
                  }
                  else
                  {
                    unsigned int v97 = 3;
                  }
                }
                if (v18 >= v87)
                {
                  if (v87 < v18) {
                    break;
                  }
                  if (result >= v97 && (v97 < result || HIDWORD(v18) >= HIDWORD(v87))) {
                    break;
                  }
                }
              }
            }
            while (i < j);
          }
          v99 = i - 1;
          BOOL v5 = i - 1 >= v10;
          BOOL v6 = i - 1 == v10;
          if (i - 1 != v10) {
            *uint64_t v10 = *v99;
          }
          a5 = 0;
          uint64_t *v99 = v18;
        }
        BOOL v30 = v24 != 0;
        unsigned int v31 = v24 - 35;
        for (uint64_t k = 1; ; ++k)
        {
          uint64_t v33 = v10[k];
          unsigned int v34 = *(unsigned __int8 **)(v20 + 8 * (HIDWORD(v33) - 1));
          unsigned int v35 = *v34;
          if (*v34)
          {
            if (v35 - 4 > 0x1E)
            {
              unsigned int v35 = 1;
            }
            else if ((v34[1] & 0x7F) == 1)
            {
              unsigned int v35 = 2;
            }
            else
            {
              unsigned int v35 = 3;
            }
          }
          unsigned int v36 = v30;
          if (v31 >= 0xFFFFFFE1)
          {
            if ((v23[1] & 0x7F) == 1) {
              unsigned int v36 = 2;
            }
            else {
              unsigned int v36 = 3;
            }
          }
          if (v18 <= v33)
          {
            if (v18 < v33) {
              break;
            }
            if (v35 >= v36 && (v21 <= HIDWORD(v33) || v36 < v35)) {
              break;
            }
          }
        }
        uint64_t v38 = &v10[k];
        m = a2 - 1;
        if (k == 1)
        {
          m = a2;
          if (v38 < a2)
          {
            for (m = a2 - 1; ; --m)
            {
              uint64_t v45 = *m;
              unint64_t v46 = HIDWORD(*m);
              BOOL v47 = *(unsigned __int8 **)(v20 + 8 * (v46 - 1));
              unsigned int v48 = *v47;
              if (*v47)
              {
                if (v48 - 4 > 0x1E)
                {
                  unsigned int v48 = 1;
                }
                else if ((v47[1] & 0x7F) == 1)
                {
                  unsigned int v48 = 2;
                }
                else
                {
                  unsigned int v48 = 3;
                }
              }
              unsigned int v49 = v30;
              if (v31 >= 0xFFFFFFE1)
              {
                if ((v23[1] & 0x7F) == 1) {
                  unsigned int v49 = 2;
                }
                else {
                  unsigned int v49 = 3;
                }
              }
              if (v18 > v45) {
                break;
              }
              if (v18 >= v45)
              {
                if (v48 < v49) {
                  break;
                }
                BOOL v50 = v21 > v46 && v49 >= v48;
                BOOL v51 = !v50;
                if (v38 >= m || !v51) {
                  break;
                }
              }
              else if (v38 >= m)
              {
                break;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            uint64_t v40 = *m;
            unint64_t v41 = HIDWORD(*m);
            uint64_t v42 = *(unsigned __int8 **)(v20 + 8 * (v41 - 1));
            unsigned int v43 = *v42;
            if (*v42)
            {
              if (v43 - 4 > 0x1E)
              {
                unsigned int v43 = 1;
              }
              else if ((v42[1] & 0x7F) == 1)
              {
                unsigned int v43 = 2;
              }
              else
              {
                unsigned int v43 = 3;
              }
            }
            unsigned int v44 = v30;
            if (v31 >= 0xFFFFFFE1)
            {
              if ((v23[1] & 0x7F) == 1) {
                unsigned int v44 = 2;
              }
              else {
                unsigned int v44 = 3;
              }
            }
            if (v18 > v40
              || v18 >= v40
              && (v43 < v44 || v21 > v41 && v44 >= v43))
            {
              break;
            }
            --m;
          }
        }
        if (v38 >= m)
        {
          i = v38;
        }
        else
        {
          uint64_t v52 = *m;
          i = v38;
          uint64_t v53 = m;
          do
          {
            *i++ = v52;
            *uint64_t v53 = v33;
            uint64_t v54 = *(void *)(*(void *)a3 + 168);
            uint64_t v55 = *(unsigned __int8 **)(v54 + 8 * v22);
            unsigned int v56 = *v55 - 35;
            while (1)
            {
              uint64_t v33 = *i;
              unint64_t v57 = HIDWORD(*i);
              uint64_t v58 = *(unsigned __int8 **)(v54 + 8 * (v57 - 1));
              unsigned int v59 = *v58;
              if (*v58)
              {
                if (v59 - 4 > 0x1E)
                {
                  unsigned int v59 = 1;
                }
                else if ((v58[1] & 0x7F) == 1)
                {
                  unsigned int v59 = 2;
                }
                else
                {
                  unsigned int v59 = 3;
                }
              }
              unsigned int v60 = *v55 != 0;
              if (v56 >= 0xFFFFFFE1)
              {
                if ((v55[1] & 0x7F) == 1) {
                  unsigned int v60 = 2;
                }
                else {
                  unsigned int v60 = 3;
                }
              }
              if (v18 <= v33
                && (v18 < v33
                 || v59 >= v60 && (v21 <= v57 || v60 < v59)))
              {
                break;
              }
              ++i;
            }
            do
            {
              unint64_t v61 = *--v53;
              uint64_t v52 = v61;
              unint64_t v62 = HIDWORD(v61);
              uint64_t v63 = *(unsigned __int8 **)(v54 + 8 * (HIDWORD(v61) - 1));
              unsigned int v64 = *v63;
              if (*v63)
              {
                if (v64 - 4 > 0x1E)
                {
                  unsigned int v64 = 1;
                }
                else if ((v63[1] & 0x7F) == 1)
                {
                  unsigned int v64 = 2;
                }
                else
                {
                  unsigned int v64 = 3;
                }
              }
              unsigned int v65 = *v55 != 0;
              if (v56 >= 0xFFFFFFE1)
              {
                if ((v55[1] & 0x7F) == 1) {
                  unsigned int v65 = 2;
                }
                else {
                  unsigned int v65 = 3;
                }
              }
            }
            while (v18 <= v52
                 && (v18 < v52
                  || v64 >= v65 && (v21 <= v62 || v65 < v64)));
          }
          while (i < v53);
        }
        uint64_t v66 = i - 1;
        if (i - 1 != v10) {
          *uint64_t v10 = *v66;
        }
        *uint64_t v66 = v18;
        if (v38 >= m) {
          break;
        }
LABEL_137:
        BOOL result = sub_1CC21DFD8(v10, i - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v67 = sub_1CC21FA20(v10, i - 1, a3);
      BOOL result = sub_1CC21FA20(i, a2, a3);
      if (result) {
        break;
      }
      if (!v67) {
        goto LABEL_137;
      }
    }
    a2 = i - 1;
    if (!v67) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC21F6B0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  unint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = HIDWORD(*result);
  uint64_t v8 = *(void *)(*(void *)a4 + 168);
  uint64_t v9 = *(unsigned __int8 **)(v8 + 8 * (v6 - 1));
  int v10 = *v9;
  if (*v9)
  {
    if ((v10 - 4) > 0x1E)
    {
      unsigned int v11 = 1;
    }
    else if ((v9[1] & 0x7F) == 1)
    {
      unsigned int v11 = 2;
    }
    else
    {
      unsigned int v11 = 3;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v12 = (v7 - 1);
  uint64_t v13 = *(unsigned __int8 **)(v8 + 8 * v12);
  unsigned int v14 = *v13;
  if (*v13)
  {
    if (v14 - 4 > 0x1E)
    {
      unsigned int v14 = 1;
    }
    else if ((v13[1] & 0x7F) == 1)
    {
      unsigned int v14 = 2;
    }
    else
    {
      unsigned int v14 = 3;
    }
  }
  if (v4 >= v5)
  {
    if (v5 < v4
      || v11 >= v14 && (v14 >= v11 ? (BOOL v15 = v6 >= v7) : (BOOL v15 = 1), v15))
    {
      uint64_t v16 = *a3;
      unint64_t v17 = HIDWORD(*a3);
      unint64_t v18 = *(unsigned __int8 **)(v8 + 8 * (v17 - 1));
      unsigned int v19 = *v18;
      if (*v18)
      {
        if (v19 - 4 > 0x1E)
        {
          unsigned int v19 = 1;
          if (*v9)
          {
LABEL_28:
            if ((v10 - 4) > 0x1E)
            {
              unsigned int v20 = 1;
            }
            else if ((v9[1] & 0x7F) == 1)
            {
              unsigned int v20 = 2;
            }
            else
            {
              unsigned int v20 = 3;
            }
LABEL_60:
            if (v16 < v4
              || v4 >= v16
              && (v19 < v20 || v17 < v6 && v20 >= v19))
            {
              *a2 = v16;
              *a3 = v4;
              uint64_t v31 = *a2;
              uint64_t v32 = *result;
              unint64_t v33 = HIDWORD(*a2);
              unint64_t v34 = HIDWORD(*result);
              uint64_t v35 = *(void *)(*(void *)a4 + 168);
              unsigned int v36 = *(unsigned __int8 **)(v35 + 8 * (v33 - 1));
              unsigned int v37 = *v36;
              if (*v36)
              {
                if (v37 - 4 > 0x1E)
                {
                  unsigned int v37 = 1;
                }
                else if ((v36[1] & 0x7F) == 1)
                {
                  unsigned int v37 = 2;
                }
                else
                {
                  unsigned int v37 = 3;
                }
              }
              uint64_t v40 = *(unsigned __int8 **)(v35 + 8 * (v34 - 1));
              unsigned int v41 = *v40;
              if (*v40)
              {
                if (v41 - 4 > 0x1E)
                {
                  unsigned int v41 = 1;
                }
                else if ((v40[1] & 0x7F) == 1)
                {
                  unsigned int v41 = 2;
                }
                else
                {
                  unsigned int v41 = 3;
                }
              }
              if (v31 < v32
                || v32 >= v31
                && (v37 < v41 || (v41 >= v37 ? (BOOL v43 = v33 >= v34) : (BOOL v43 = 1), !v43)))
              {
                *BOOL result = v31;
                *a2 = v32;
              }
            }
            return result;
          }
LABEL_59:
          unsigned int v20 = 0;
          goto LABEL_60;
        }
        if ((v18[1] & 0x7F) == 1) {
          unsigned int v19 = 2;
        }
        else {
          unsigned int v19 = 3;
        }
      }
      if (*v9) {
        goto LABEL_28;
      }
      goto LABEL_59;
    }
  }
  uint64_t v21 = *a3;
  unint64_t v22 = HIDWORD(*a3);
  uint64_t v23 = *(unsigned __int8 **)(v8 + 8 * (v22 - 1));
  unsigned int v24 = *v23;
  if (!*v23) {
    goto LABEL_37;
  }
  if (v24 - 4 <= 0x1E)
  {
    if ((v23[1] & 0x7F) == 1) {
      unsigned int v24 = 2;
    }
    else {
      unsigned int v24 = 3;
    }
LABEL_37:
    if (*v9) {
      goto LABEL_38;
    }
    goto LABEL_44;
  }
  unsigned int v24 = 1;
  if (*v9)
  {
LABEL_38:
    if ((v10 - 4) > 0x1E)
    {
      unsigned int v25 = 1;
    }
    else if ((v9[1] & 0x7F) == 1)
    {
      unsigned int v25 = 2;
    }
    else
    {
      unsigned int v25 = 3;
    }
    goto LABEL_45;
  }
LABEL_44:
  unsigned int v25 = 0;
LABEL_45:
  if (v21 < v4
    || v4 >= v21 && (v24 < v25 || v22 < v6 && v25 >= v24))
  {
    *BOOL result = v21;
LABEL_92:
    *a3 = v5;
    return result;
  }
  *BOOL result = v4;
  *a2 = v5;
  uint64_t v26 = *a3;
  unint64_t v27 = HIDWORD(*a3);
  uint64_t v28 = *(void *)(*(void *)a4 + 168);
  uint64_t v29 = *(unsigned __int8 **)(v28 + 8 * (v27 - 1));
  unsigned int v30 = *v29;
  if (*v29)
  {
    if (v30 - 4 > 0x1E)
    {
      unsigned int v30 = 1;
    }
    else if ((v29[1] & 0x7F) == 1)
    {
      unsigned int v30 = 2;
    }
    else
    {
      unsigned int v30 = 3;
    }
  }
  uint64_t v38 = *(unsigned __int8 **)(v28 + 8 * v12);
  unsigned int v39 = *v38;
  if (*v38)
  {
    if (v39 - 4 > 0x1E)
    {
      unsigned int v39 = 1;
    }
    else if ((v38[1] & 0x7F) == 1)
    {
      unsigned int v39 = 2;
    }
    else
    {
      unsigned int v39 = 3;
    }
  }
  if (v26 < v5
    || v5 >= v26
    && (v30 < v39 || (v39 >= v30 ? (BOOL v42 = v27 >= v7) : (BOOL v42 = 1), !v42)))
  {
    *a2 = v26;
    goto LABEL_92;
  }
  return result;
}

BOOL sub_1CC21FA20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      unint64_t v10 = HIDWORD(*a1);
      uint64_t v11 = *(void *)(*(void *)a3 + 168);
      uint64_t v12 = *(unsigned __int8 **)(v11 + 8 * (HIDWORD(v8) - 1));
      unsigned int v13 = *v12;
      if (*v12)
      {
        if (v13 - 4 > 0x1E)
        {
          unsigned int v13 = 1;
        }
        else if ((v12[1] & 0x7F) == 1)
        {
          unsigned int v13 = 2;
        }
        else
        {
          unsigned int v13 = 3;
        }
      }
      BOOL v47 = *(unsigned __int8 **)(v11 + 8 * (v10 - 1));
      unsigned int v48 = *v47;
      if (*v47)
      {
        if (v48 - 4 > 0x1E)
        {
          unsigned int v48 = 1;
        }
        else if ((v47[1] & 0x7F) == 1)
        {
          unsigned int v48 = 2;
        }
        else
        {
          unsigned int v48 = 3;
        }
      }
      if (v8 < v9
        || v9 >= v8
        && (v13 < v48 || (v48 >= v13 ? (BOOL v51 = HIDWORD(v8) >= v10) : (BOOL v51 = 1), !v51)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1CC21F6B0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC220068(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      unsigned int v39 = a1 + 1;
      uint64_t v40 = a1 + 2;
      unsigned int v41 = a1 + 3;
      sub_1CC220068(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v42 = *(a2 - 1);
      uint64_t v43 = a1[3];
      uint64_t v44 = *(void *)(*(void *)a3 + 168);
      uint64_t v45 = *(unsigned __int8 **)(v44 + 8 * (HIDWORD(v42) - 1));
      unsigned int v46 = *v45;
      if (*v45)
      {
        if (v46 - 4 > 0x1E)
        {
          unsigned int v46 = 1;
        }
        else if ((v45[1] & 0x7F) == 1)
        {
          unsigned int v46 = 2;
        }
        else
        {
          unsigned int v46 = 3;
        }
      }
      unsigned int v49 = *(unsigned __int8 **)(v44 + 8 * (HIDWORD(v43) - 1));
      unsigned int v50 = *v49;
      if (*v49)
      {
        if (v50 - 4 > 0x1E)
        {
          unsigned int v50 = 1;
        }
        else if ((v49[1] & 0x7F) == 1)
        {
          unsigned int v50 = 2;
        }
        else
        {
          unsigned int v50 = 3;
        }
      }
      if (v42 < v43
        || v43 >= v42
        && (v46 < v50 || (v50 >= v46 ? (BOOL v52 = HIDWORD(v42) >= HIDWORD(v43)) : (BOOL v52 = 1), !v52)))
      {
        uint64_t *v41 = v42;
        *(a2 - 1) = v43;
        uint64_t v53 = *v41;
        uint64_t v54 = *v40;
        unint64_t v55 = HIDWORD(*v41);
        unint64_t v56 = HIDWORD(*v40);
        uint64_t v57 = *(void *)(*(void *)a3 + 168);
        uint64_t v58 = (v55 - 1);
        unsigned int v59 = *(unsigned __int8 **)(v57 + 8 * v58);
        unsigned int v60 = *v59;
        if (*v59)
        {
          if (v60 - 4 > 0x1E)
          {
            unsigned int v60 = 1;
          }
          else if ((v59[1] & 0x7F) == 1)
          {
            unsigned int v60 = 2;
          }
          else
          {
            unsigned int v60 = 3;
          }
        }
        unint64_t v61 = *(unsigned __int8 **)(v57 + 8 * (v56 - 1));
        unsigned int v62 = *v61;
        if (*v61)
        {
          if (v62 - 4 > 0x1E)
          {
            unsigned int v62 = 1;
          }
          else if ((v61[1] & 0x7F) == 1)
          {
            unsigned int v62 = 2;
          }
          else
          {
            unsigned int v62 = 3;
          }
        }
        if (v53 < v54
          || v54 >= v53
          && (v60 < v62 || (v62 >= v60 ? (BOOL v68 = v55 >= v56) : (BOOL v68 = 1), !v68)))
        {
          *uint64_t v40 = v53;
          uint64_t *v41 = v54;
          uint64_t v63 = *v39;
          unint64_t v64 = HIDWORD(*v39);
          uint64_t v65 = *(void *)(*(void *)a3 + 168);
          uint64_t v66 = *(unsigned __int8 **)(v65 + 8 * v58);
          unsigned int v67 = *v66;
          if (*v66)
          {
            if (v67 - 4 > 0x1E)
            {
              unsigned int v67 = 1;
            }
            else if ((v66[1] & 0x7F) == 1)
            {
              unsigned int v67 = 2;
            }
            else
            {
              unsigned int v67 = 3;
            }
          }
          unint64_t v69 = *(unsigned __int8 **)(v65 + 8 * (v64 - 1));
          unsigned int v70 = *v69;
          if (*v69)
          {
            if (v70 - 4 > 0x1E)
            {
              unsigned int v70 = 1;
            }
            else if ((v69[1] & 0x7F) == 1)
            {
              unsigned int v70 = 2;
            }
            else
            {
              unsigned int v70 = 3;
            }
          }
          if (v53 < v63
            || v63 >= v53
            && (v67 < v70 || (v70 >= v67 ? (BOOL v76 = v55 >= v64) : (BOOL v76 = 1), !v76)))
          {
            a1[1] = v53;
            a1[2] = v63;
            uint64_t v71 = *a1;
            unint64_t v72 = HIDWORD(*a1);
            uint64_t v73 = *(void *)(*(void *)a3 + 168);
            uint64_t v74 = *(unsigned __int8 **)(v73 + 8 * v58);
            unsigned int v75 = *v74;
            if (*v74)
            {
              if (v75 - 4 > 0x1E)
              {
                unsigned int v75 = 1;
              }
              else if ((v74[1] & 0x7F) == 1)
              {
                unsigned int v75 = 2;
              }
              else
              {
                unsigned int v75 = 3;
              }
            }
            uint64_t v77 = *(unsigned __int8 **)(v73 + 8 * (v72 - 1));
            unsigned int v78 = *v77;
            if (*v77)
            {
              if (v78 - 4 > 0x1E)
              {
                unsigned int v78 = 1;
              }
              else if ((v77[1] & 0x7F) == 1)
              {
                unsigned int v78 = 2;
              }
              else
              {
                unsigned int v78 = 3;
              }
            }
            if (v53 < v71
              || v71 >= v53
              && (v75 < v78 || (v78 >= v75 ? (BOOL v79 = v55 >= v72) : (BOOL v79 = 1), !v79)))
            {
              *a1 = v53;
              a1[1] = v71;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v14 = a1 + 2;
      sub_1CC21F6B0(a1, a1 + 1, a1 + 2, a3);
      BOOL v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      uint64_t v18 = *(void *)a3;
      break;
  }
  do
  {
    uint64_t v19 = *v15;
    unint64_t v20 = HIDWORD(*v15);
    uint64_t v21 = *(void *)(v18 + 168);
    uint64_t v22 = (v20 - 1);
    uint64_t v23 = *(unsigned __int8 **)(v21 + 8 * v22);
    unsigned int v24 = *v23;
    if (*v23)
    {
      if (v24 - 4 > 0x1E)
      {
        unsigned int v24 = 1;
      }
      else if ((v23[1] & 0x7F) == 1)
      {
        unsigned int v24 = 2;
      }
      else
      {
        unsigned int v24 = 3;
      }
    }
    uint64_t v25 = *v14;
    unint64_t v26 = HIDWORD(*v14);
    unint64_t v27 = *(unsigned __int8 **)(v21 + 8 * (v26 - 1));
    unsigned int v28 = *v27;
    if (*v27)
    {
      if (v28 - 4 > 0x1E)
      {
        unsigned int v28 = 1;
      }
      else if ((v27[1] & 0x7F) == 1)
      {
        unsigned int v28 = 2;
      }
      else
      {
        unsigned int v28 = 3;
      }
    }
    if (v19 < v25
      || v25 >= v19
      && (v24 < v28 || (v28 >= v24 ? (BOOL v38 = v20 >= v26) : (BOOL v38 = 1), !v38)))
    {
      *BOOL v15 = v25;
      uint64_t v29 = a1;
      if (v14 != a1)
      {
        uint64_t v30 = v16;
        while (1)
        {
          uint64_t v31 = *(void *)(*(void *)a3 + 168);
          uint64_t v32 = *(unsigned __int8 **)(v31 + 8 * v22);
          unsigned int v33 = *v32;
          if (*v32)
          {
            if (v33 - 4 > 0x1E)
            {
              unsigned int v33 = 1;
            }
            else if ((v32[1] & 0x7F) == 1)
            {
              unsigned int v33 = 2;
            }
            else
            {
              unsigned int v33 = 3;
            }
          }
          uint64_t v34 = *(uint64_t *)((char *)a1 + v30 + 8);
          uint64_t v35 = *(unsigned __int8 **)(v31 + 8 * (HIDWORD(v34) - 1));
          unsigned int v36 = *v35;
          if (*v35)
          {
            if (v36 - 4 > 0x1E)
            {
              unsigned int v36 = 1;
            }
            else if ((v35[1] & 0x7F) == 1)
            {
              unsigned int v36 = 2;
            }
            else
            {
              unsigned int v36 = 3;
            }
          }
          if (v19 >= v34)
          {
            if (v34 < v19)
            {
              uint64_t v29 = (uint64_t *)((char *)a1 + v30 + 16);
              goto LABEL_55;
            }
            if (v33 >= v36 && (v36 < v33 || v20 >= HIDWORD(v34))) {
              break;
            }
          }
          --v14;
          *(uint64_t *)((char *)a1 + v30 + 16) = v34;
          v30 -= 8;
          if (v30 == -16)
          {
            uint64_t v29 = a1;
            goto LABEL_55;
          }
        }
        uint64_t v29 = v14;
      }
LABEL_55:
      *uint64_t v29 = v19;
      if (++v17 == 8) {
        return v15 + 1 == a2;
      }
      uint64_t v18 = *(void *)a3;
    }
    unsigned int v14 = v15;
    v16 += 8;
    ++v15;
  }
  while (v15 != a2);
  return 1;
}

uint64_t *sub_1CC220068(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  BOOL result = sub_1CC21F6B0(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  unint64_t v13 = HIDWORD(*a4);
  unint64_t v14 = HIDWORD(*a3);
  uint64_t v15 = *(void *)(*(void *)a5 + 168);
  uint64_t v16 = *(unsigned __int8 **)(v15 + 8 * (v13 - 1));
  unsigned int v17 = *v16;
  if (*v16)
  {
    if (v17 - 4 > 0x1E)
    {
      unsigned int v17 = 1;
    }
    else if ((v16[1] & 0x7F) == 1)
    {
      unsigned int v17 = 2;
    }
    else
    {
      unsigned int v17 = 3;
    }
  }
  uint64_t v18 = *(unsigned __int8 **)(v15 + 8 * (v14 - 1));
  unsigned int v19 = *v18;
  if (*v18)
  {
    if (v19 - 4 > 0x1E)
    {
      unsigned int v19 = 1;
    }
    else if ((v18[1] & 0x7F) == 1)
    {
      unsigned int v19 = 2;
    }
    else
    {
      unsigned int v19 = 3;
    }
  }
  if (v11 < v12
    || v12 >= v11
    && (v17 < v19 || (v19 >= v17 ? (BOOL v27 = v13 >= v14) : (BOOL v27 = 1), !v27)))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v20 = *a3;
    uint64_t v21 = *a2;
    unint64_t v22 = HIDWORD(*a3);
    unint64_t v23 = HIDWORD(*a2);
    uint64_t v24 = *(void *)(*(void *)a5 + 168);
    uint64_t v25 = *(unsigned __int8 **)(v24 + 8 * (v22 - 1));
    unsigned int v26 = *v25;
    if (*v25)
    {
      if (v26 - 4 > 0x1E)
      {
        unsigned int v26 = 1;
      }
      else if ((v25[1] & 0x7F) == 1)
      {
        unsigned int v26 = 2;
      }
      else
      {
        unsigned int v26 = 3;
      }
    }
    unsigned int v28 = *(unsigned __int8 **)(v24 + 8 * (v23 - 1));
    unsigned int v29 = *v28;
    if (*v28)
    {
      if (v29 - 4 > 0x1E)
      {
        unsigned int v29 = 1;
      }
      else if ((v28[1] & 0x7F) == 1)
      {
        unsigned int v29 = 2;
      }
      else
      {
        unsigned int v29 = 3;
      }
    }
    if (v20 < v21
      || v21 >= v20
      && (v26 < v29 || (v29 >= v26 ? (BOOL v37 = v22 >= v23) : (BOOL v37 = 1), !v37)))
    {
      *a2 = v20;
      *a3 = v21;
      uint64_t v30 = *a2;
      uint64_t v31 = *a1;
      unint64_t v32 = HIDWORD(*a2);
      unint64_t v33 = HIDWORD(*a1);
      uint64_t v34 = *(void *)(*(void *)a5 + 168);
      uint64_t v35 = *(unsigned __int8 **)(v34 + 8 * (v32 - 1));
      unsigned int v36 = *v35;
      if (*v35)
      {
        if (v36 - 4 > 0x1E)
        {
          unsigned int v36 = 1;
        }
        else if ((v35[1] & 0x7F) == 1)
        {
          unsigned int v36 = 2;
        }
        else
        {
          unsigned int v36 = 3;
        }
      }
      BOOL v38 = *(unsigned __int8 **)(v34 + 8 * (v33 - 1));
      unsigned int v39 = *v38;
      if (*v38)
      {
        if (v39 - 4 > 0x1E)
        {
          unsigned int v39 = 1;
        }
        else if ((v38[1] & 0x7F) == 1)
        {
          unsigned int v39 = 2;
        }
        else
        {
          unsigned int v39 = 3;
        }
      }
      if (v30 < v31
        || v31 >= v30
        && (v36 < v39 || (v39 >= v36 ? (BOOL v40 = v32 >= v33) : (BOOL v40 = 1), !v40)))
      {
        *a1 = v30;
        *a2 = v31;
      }
    }
  }
  return result;
}

uint64_t sub_1CC2202D4(_DWORD *a1, int *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC2203C0((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1CD4FE950((uint64_t)a1, v7);
    uint64_t v8 = 0;
    sub_1CC2203C0((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)result != -1) {
    --a1[1];
  }
  *(_DWORD *)uint64_t result = *a2;
  *(void *)(result + 4) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

uint64_t sub_1CC2203C0(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  unsigned int v7 = (_DWORD *)(v3 + 16 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (_DWORD *)(v3 + 16 * (v12 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC220464(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    int v8 = (_DWORD *)(result + 8);
    uint64_t v9 = (_DWORD *)(result + 24);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    int v8 = *(_DWORD **)(result + 8);
    uint64_t v9 = &v8[4 * v7];
  }
  do
  {
    *int v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      unint64_t v13 = 0;
      uint64_t result = sub_1CC2203C0((uint64_t)v5, v10, &v13);
      BOOL v11 = v13;
      *unint64_t v13 = *(_DWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 4);
      v11[3] = *(_DWORD *)(a2 + 12);
      *(void *)(v11 + 1) = v12;
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CC22052C(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(result + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(result + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CC2205AC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CBFAFA0C(a1, v6);
      uint64_t v16 = 0;
      sub_1CC22052C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CBFAFA0C(a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        uint64_t v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC2206E4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC2207B0(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC2207B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 4) != 0xFFFFFFFFFFFFFFFCLL)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC208488((uint64_t *)v5, (void *)a2, &v10);
      int v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_OWORD *sub_1CC220860(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC22093C(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC6B20;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC22093C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = xmmword_1CFAC6B20;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    if ((*(_DWORD *)a2 != -1 || v9 != -4) && (*(_DWORD *)a2 != -2 || v9 != -8))
    {
      int v13 = 0;
      uint64_t result = sub_1CC208298((uint64_t *)v5, a2, (uint64_t *)&v13);
      uint64_t v12 = v13;
      *int v13 = *(_DWORD *)a2;
      *((void *)v12 + 1) = *(void *)(a2 + 8);
      v12[4] = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

void *sub_1CC220A0C(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v12 = 0;
LABEL_15:
    uint64_t v6 = sub_1CC21DC7C(a1, (uint64_t)a2, a2, v12);
    *uint64_t v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

uint64_t *sub_1CC220ACC(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v12 = 0;
LABEL_15:
    uint64_t v6 = sub_1CBF8BBE8(a1, (uint64_t)a2, a2, v12);
    *uint64_t v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

uint64_t llvm::BitstreamCursor::EnterSubBlock@<X0>(llvm::BitstreamCursor *this@<X0>, unsigned int *a2@<X2>, int a3@<W1>, void **a4@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *((void *)this + 8);
  LODWORD(__p) = *((_DWORD *)this + 9);
  unint64_t v69 = 0;
  long long v68 = 0uLL;
  uint64_t v9 = *((unsigned int *)this + 18);
  if (v9 >= *((_DWORD *)this + 19))
  {
    BOOL v58 = v8 + 32 * v9 > (unint64_t)&__p;
    if (v8 > (unint64_t)&__p || !v58) {
      sub_1CD4F7304();
    }
    sub_1CD4F7304();
  }
  uint64_t v10 = *((unsigned int *)this + 18);
  uint64_t v11 = v8 + 32 * v10;
  *(_DWORD *)uint64_t v11 = __p;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 8) = 0;
  *(_OWORD *)(v11 + 8) = v68;
  *(void *)(v11 + 24) = v69;
  unsigned int v12 = v10 + 1;
  long long v68 = 0uLL;
  unint64_t v69 = 0;
  *((_DWORD *)this + 18) = v10 + 1;
  if ((void)v68)
  {
    uint64_t v59 = *((void *)&v68 + 1);
    unsigned int v60 = (void *)v68;
    if (*((void *)&v68 + 1) != (void)v68)
    {
      do
      {
        unint64_t v61 = *(std::__shared_weak_count **)(v59 - 8);
        if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
        v59 -= 16;
      }
      while (v59 != (void)v68);
      unsigned int v60 = (void *)v68;
    }
    *((void *)&v68 + 1) = v68;
    operator delete(v60);
    unsigned int v12 = *((_DWORD *)this + 18);
  }
  uint64_t v13 = *((void *)this + 8) + 32 * v12;
  uint64_t v14 = *(void *)(v13 - 24);
  *(void *)(v13 - 24) = *((void *)this + 5);
  *((void *)this + 5) = v14;
  uint64_t v15 = *(void *)(v13 - 16);
  *(void *)(v13 - 16) = *((void *)this + 6);
  *((void *)this + 6) = v15;
  uint64_t v16 = *(void *)(v13 - 8);
  *(void *)(v13 - 8) = *((void *)this + 7);
  *((void *)this + 7) = v16;
  unsigned int v17 = (uint64_t *)*((void *)this + 42);
  if (v17)
  {
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    if (*v17 == v18 || (uint64_t v20 = v18 - 80, *(_DWORD *)(v18 - 80) != a3))
    {
      uint64_t v21 = -858993459 * ((unint64_t)(v18 - v19) >> 4);
      if (!v21) {
        goto LABEL_10;
      }
      uint64_t v20 = v19;
      while (*(_DWORD *)v20 != a3)
      {
        v20 += 80;
        if (!--v21) {
          goto LABEL_10;
        }
      }
    }
    unsigned int v29 = *(uint64_t **)(v20 + 8);
    unsigned int v28 = *(uint64_t **)(v20 + 16);
    if ((char *)v28 - (char *)v29 >= 1)
    {
      uint64_t v30 = ((char *)v28 - (char *)v29) >> 4;
      uint64_t v31 = *((void *)this + 5);
      unint64_t v32 = *((void *)this + 6);
      uint64_t v33 = (uint64_t)(v32 - v31) >> 4;
      uint64_t v34 = (void *)(v31 + ((v32 - v31) & 0xFFFFFFFFFFFFFFF0));
      if (v30 > (uint64_t)(v16 - v32) >> 4)
      {
        unint64_t v35 = v33 + v30;
        if ((unint64_t)(v33 + v30) >> 60) {
          abort();
        }
        uint64_t v36 = v16 - v31;
        if (v36 >> 3 > v35) {
          unint64_t v35 = v36 >> 3;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        unsigned int v70 = (char *)this + 56;
        if (v37)
        {
          if (v37 >> 60) {
            sub_1CB833614();
          }
          BOOL v38 = (char *)operator new(16 * v37);
        }
        else
        {
          BOOL v38 = 0;
        }
        unsigned int v39 = (uint64_t *)&v38[16 * v33];
        __p = v38;
        *(void *)&long long v68 = v39;
        unint64_t v69 = &v38[16 * v37];
        BOOL v40 = &v39[2 * v30];
        do
        {
          *unsigned int v39 = *v29;
          uint64_t v41 = v29[1];
          v39[1] = v41;
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          v39 += 2;
          v29 += 2;
        }
        while (v39 != v40);
        *((void *)&v68 + 1) = v40;
        sub_1CC20287C((void *)this + 5, &__p, v34);
        uint64_t v42 = *((void *)&v68 + 1);
        for (i = v68; *((void *)&v68 + 1) != i; uint64_t v42 = *((void *)&v68 + 1))
        {
          *((void *)&v68 + 1) = v42 - 16;
          uint64_t v44 = *(std::__shared_weak_count **)(v42 - 8);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (__p) {
          operator delete(__p);
        }
        goto LABEL_10;
      }
      uint64_t v45 = (uint64_t)(v32 - (void)v34) >> 4;
      if (v45 >= v30)
      {
        unsigned int v46 = &v29[2 * v30];
        BOOL v47 = (char *)*((void *)this + 6);
      }
      else
      {
        unsigned int v46 = &v29[2 * v45];
        if (v46 == v28)
        {
          BOOL v47 = (char *)*((void *)this + 6);
        }
        else
        {
          BOOL v47 = (char *)*((void *)this + 6);
          unsigned int v48 = v46;
          unsigned int v49 = v47;
          do
          {
            *unsigned int v49 = *v48;
            uint64_t v50 = v48[1];
            v49[1] = v50;
            if (v50) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
            }
            v47 += 16;
            v48 += 2;
            v49 += 2;
          }
          while (v48 != v28);
        }
        *((void *)this + 6) = v47;
        if ((uint64_t)(v32 - (void)v34) < 1) {
          goto LABEL_10;
        }
      }
      BOOL v52 = (char *)&v34[2 * v30];
      uint64_t v53 = &v47[-16 * v30];
      uint64_t v54 = v47;
      if ((unint64_t)v53 < v32)
      {
        uint64_t v54 = v47;
        do
        {
          *(_OWORD *)uint64_t v54 = *(_OWORD *)v53;
          v54 += 16;
          *(void *)uint64_t v53 = 0;
          *((void *)v53 + 1) = 0;
          v53 += 16;
        }
        while ((unint64_t)v53 < v32);
      }
      *((void *)this + 6) = v54;
      if (v47 != v52)
      {
        uint64_t v55 = (uint64_t)(v47 - 16);
        uint64_t v56 = 16 * ((v47 - v52) >> 4);
        uint64_t v57 = v31 + 16 * v33 - 16;
        do
        {
          sub_1CC202928(v55, (long long *)(v57 + v56));
          v55 -= 16;
          v56 -= 16;
        }
        while (v56);
      }
      for (; v29 != v46; v34 += 2)
      {
        sub_1CBF4C340(v34, v29);
        v29 += 2;
      }
    }
  }
LABEL_10:
  uint64_t result = sub_1CC1CA844((uint64_t)this, 4u, (uint64_t)&__p);
  if (v68)
  {
LABEL_74:
    *a4 = __p;
    return result;
  }
  unsigned int v23 = __p;
  if ((__p & 8) != 0)
  {
    unsigned int v51 = 0;
    unsigned int v23 = __p & 7;
    do
    {
      if (v51 >= 0x1D)
      {
        *(void *)&v72.__val_ = std::generic_category();
        v72.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v72, v66);
      }
      uint64_t result = sub_1CC1CA844((uint64_t)this, 4u, (uint64_t)&__p);
      if (v68) {
        goto LABEL_74;
      }
      v23 |= (__p & 7) << (v51 + 3);
      v51 += 3;
    }
    while ((__p & 8) != 0);
  }
  *((_DWORD *)this + 9) = v23;
  if (v23 >= 0x21)
  {
    unsigned int v62 = std::generic_category();
    sub_1CD4FF12C((uint64_t)a4, 92, (uint64_t)v62, 32, *((_DWORD *)this + 9));
  }
  unsigned int v24 = *((_DWORD *)this + 8);
  BOOL v25 = v24 >= 0x20;
  char v26 = v24 - 32;
  if (v25)
  {
    *((void *)this + 3) >>= v26;
    int v27 = 32;
  }
  else
  {
    int v27 = 0;
  }
  *((_DWORD *)this + 8) = v27;
  uint64_t result = sub_1CC1CA844((uint64_t)this, 0x20u, (uint64_t)&__p);
  if ((v68 & 1) == 0)
  {
    if (a2) {
      *a2 = __p;
    }
    if (*((_DWORD *)this + 9))
    {
      if (*((_DWORD *)this + 8) || *((void *)this + 1) > *((void *)this + 2))
      {
        *a4 = 0;
        goto LABEL_23;
      }
      *(void *)&v65.__val_ = std::generic_category();
      v65.__cat_ = (const std::error_category *)"can't enter sub block: already at end of stream";
    }
    else
    {
      *(void *)&v65.__val_ = std::generic_category();
      v65.__cat_ = (const std::error_category *)"can't enter sub-block: current code size is 0";
    }
    llvm::createStringError((llvm *)0x5C, v65, v64);
  }
  uint64_t v63 = __p;
  __p = 0;
  *a4 = v63;
LABEL_23:
  if (v68)
  {
    uint64_t result = (uint64_t)__p;
    __p = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_1CC2211F4(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC1CA844(a2, 6u, (uint64_t)&v10);
  if (v11)
  {
LABEL_10:
    uint64_t v8 = v10;
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v8;
    return result;
  }
  int v5 = v10;
  if ((v10 & 0x20) != 0)
  {
    unsigned int v6 = 0;
    int v7 = v10 & 0x1F;
    while (1)
    {
      if (v6 >= 0x1B)
      {
        *(void *)&v13.__val_ = std::generic_category();
        v13.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v13, v9);
      }
      uint64_t result = sub_1CC1CA844(a2, 6u, (uint64_t)&v10);
      if (v11) {
        break;
      }
      v7 |= (v10 & 0x1F) << (v6 + 5);
      v6 += 5;
      if ((v10 & 0x20) == 0)
      {
        *(unsigned char *)(a1 + 8) &= ~1u;
        *(_DWORD *)a1 = v7;
        return result;
      }
    }
    goto LABEL_10;
  }
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = v5;
  return result;
}

uint64_t sub_1CC221324@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC1CA844(a1, a2, (uint64_t)&v16);
  char v19 = v17 & 1;
  if (v17)
  {
    uint64_t v11 = v16;
    char v12 = *(unsigned char *)(a3 + 8) | 1;
    goto LABEL_13;
  }
  uint64_t v18 = v16;
  uint64_t v7 = 1 << (a2 - 1);
  if ((v16 & v7) == 0)
  {
    uint64_t v11 = v16;
    char v12 = *(unsigned char *)(a3 + 8) & 0xFE;
LABEL_13:
    *(unsigned char *)(a3 + 8) = v12;
    goto LABEL_14;
  }
  uint64_t v8 = (v7 - 1) & v16;
  unsigned int v9 = a2 - 1;
  while (1)
  {
    if (v9 > 0x3F)
    {
      *(void *)&v21.__val_ = std::generic_category();
      v21.__cat_ = (const std::error_category *)"Unterminated VBR";
      llvm::createStringError((llvm *)0x5C, v21, v13);
    }
    sub_1CC1CA844(a1, a2, (uint64_t)&v14);
    char v17 = v17 & 0xFE | v15 & 1;
    uint64_t v10 = v14;
    if (v15) {
      uint64_t v14 = 0;
    }
    uint64_t v16 = v10;
    uint64_t result = (uint64_t)sub_1CC222EE8(&v18, &v16);
    if (v17)
    {
      uint64_t result = v16;
      uint64_t v16 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    if (v15)
    {
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    if (v19) {
      break;
    }
    v8 |= (unint64_t)((v7 - 1) & v18) << v9;
    v9 += a2 - 1;
    if ((v18 & v7) == 0)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      *(void *)a3 = v8;
      return result;
    }
  }
  *(unsigned char *)(a3 + 8) |= 1u;
  uint64_t v11 = v18;
LABEL_14:
  *(void *)a3 = v11;
  return result;
}

uint64_t sub_1CC22157C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = (a4 - 4);
  if (v4 >= (a3 - a2) >> 4)
  {
    *(void *)&v7.__val_ = std::generic_category();
    v7.__cat_ = (const std::error_category *)"Invalid abbrev number";
    llvm::createStringError((llvm *)0x5C, v7, v6);
  }
  uint64_t v5 = *(void *)(a2 + 16 * v4);
  *(unsigned char *)(result + 8) &= ~1u;
  *(void *)uint64_t result = v5;
  return result;
}

uint64_t sub_1CC2215F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = (*(unsigned __int8 *)(a2 + 8) >> 1) & 7;
  if (v4 == 4)
  {
    uint64_t result = sub_1CC1CA844(a1, 6u, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v7 = v9;
      char v8 = *(unsigned char *)(a3 + 8) | 1;
    }
    else
    {
      uint64_t v7 = aAbcdefghijklmn_0[v9];
      char v8 = *(unsigned char *)(a3 + 8) & 0xFE;
    }
    *(unsigned char *)(a3 + 8) = v8;
    goto LABEL_11;
  }
  if (v4 != 2)
  {
    uint64_t result = sub_1CC1CA844(a1, *(_DWORD *)a2, (uint64_t)&v9);
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(a3 + 8) & 0xFE | v10 & 1;
    uint64_t v7 = v9;
LABEL_11:
    *(void *)a3 = v7;
    return result;
  }
  unsigned int v5 = *(_DWORD *)a2;

  return sub_1CC221324(a1, v5, a3);
}

void *llvm::BitstreamCursor::readRecord@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (uint64_t)result;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (a2 != 3)
  {
    unint64_t v8 = (a2 - 4);
    uint64_t v9 = result[5];
    if (v8 >= (result[6] - v9) >> 4)
    {
      *(void *)&v99.__val_ = std::generic_category();
      v99.__cat_ = (const std::error_category *)"Invalid abbrev number";
      llvm::createStringError((llvm *)0x5C, v99, v74);
    }
    char v10 = *(_DWORD **)(v9 + 16 * v8);
    uint64_t v11 = *(uint64_t **)v10;
    unsigned int v12 = *(unsigned __int8 *)(*(void *)v10 + 8);
    if (v12)
    {
      uint64_t v13 = *v11;
LABEL_5:
      int v14 = v10[2];
      if (v14 == 1)
      {
        char v37 = *(unsigned char *)(a5 + 8);
LABEL_55:
        *(unsigned char *)(a5 + 8) = v37 & 0xFE;
        *(_DWORD *)a5 = v13;
        return result;
      }
      int v82 = v13;
      unsigned int v80 = a4;
      char v83 = *(unsigned char *)(a5 + 8);
      unsigned int v15 = 1;
      while (1)
      {
        uint64_t v16 = *(void *)v10 + 16 * v15;
        unsigned int v17 = *(unsigned __int8 *)(v16 + 8);
        if (v17)
        {
          unint64_t v41 = *(unsigned int *)(a3 + 8);
          if (v41 >= *(unsigned int *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v41) = *(void *)v16;
          ++*(_DWORD *)(a3 + 8);
        }
        else
        {
          int v18 = (v17 >> 1) & 7;
          if (v18 == 3 || v18 == 5)
          {
            if ((v17 & 0xE) == 6)
            {
              uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
              if (BYTE8(v87))
              {
LABEL_124:
                uint64_t v84 = v87;
                sub_1CD4FB504(&v84, &v86);
                unint64_t v64 = std::string::insert(&v86, 0, "Failed to read size: ");
                std::string::size_type v65 = v64->__r_.__value_.__r.__words[2];
                long long v87 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                uint64_t v88 = v65;
                v64->__r_.__value_.__l.__size_ = 0;
                v64->__r_.__value_.__r.__words[2] = 0;
                v64->__r_.__value_.__r.__words[0] = 0;
                if (v88 >= 0) {
                  uint64_t v66 = (const std::error_category *)&v87;
                }
                else {
                  uint64_t v66 = (const std::error_category *)v87;
                }
                *(void *)&v95.__val_ = std::generic_category();
                v95.__cat_ = v66;
                llvm::createStringError((llvm *)0x5C, v95, v67);
              }
              if ((v87 & 0x20) != 0)
              {
                unsigned int v40 = 0;
                LODWORD(v24) = v87 & 0x1F;
                do
                {
                  if (v40 >= 0x1B)
                  {
                    *(void *)&v94.__val_ = std::generic_category();
                    v94.__cat_ = (const std::error_category *)"Unterminated VBR";
                    llvm::createStringError((llvm *)0x5C, v94, v63);
                  }
                  uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
                  if (BYTE8(v87)) {
                    goto LABEL_124;
                  }
                  unint64_t v24 = ((v87 & 0x1F) << (v40 + 5)) | v24;
                  v40 += 5;
                }
                while ((v87 & 0x20) != 0);
                unint64_t v23 = v81 & 0xFFFFFFFF00000000;
              }
              else
              {
                unint64_t v23 = v87;
                unint64_t v24 = v81 & 0xFFFFFFFF00000000;
              }
              unint64_t v81 = v23 | v24;
              unint64_t v25 = v23 | v24;
              if (v25 >= 8 * *(void *)(v6 + 8))
              {
                *(void *)&v90.__val_ = std::generic_category();
                v90.__cat_ = (const std::error_category *)"Size is not plausible";
                llvm::createStringError((llvm *)0x5C, v90, v59);
              }
              if (v25 + *(unsigned int *)(a3 + 8) > *(unsigned int *)(a3 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v15 + 2 != v14)
              {
                *(void *)&v91.__val_ = std::generic_category();
                v91.__cat_ = (const std::error_category *)"Array op not second to last";
                llvm::createStringError((llvm *)0x5C, v91, v60);
              }
              uint64_t v26 = *(void *)v10 + 16 * ++v15;
              unsigned int v27 = *(unsigned __int8 *)(v26 + 8);
              if (v27)
              {
                *(void *)&v92.__val_ = std::generic_category();
                v92.__cat_ = (const std::error_category *)"Array element type has to be an encoding of a type";
                llvm::createStringError((llvm *)0x5C, v92, v61);
              }
              int v28 = (v27 >> 1) & 7;
              switch(v28)
              {
                case 4:
                  int v29 = v81;
                  if (v81)
                  {
                    while (1)
                    {
                      uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
                      if (BYTE8(v87)) {
                        goto LABEL_105;
                      }
                      unint64_t v30 = *(unsigned int *)(a3 + 8);
                      if (v30 >= *(unsigned int *)(a3 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)a3 + 8 * v30) = aAbcdefghijklmn_0[v87];
                      ++*(_DWORD *)(a3 + 8);
                      if (BYTE8(v87))
                      {
                        uint64_t result = (void *)v87;
                        *(void *)&long long v87 = 0;
                        if (result) {
                          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
                        }
                      }
                      if (!--v29) {
                        goto LABEL_15;
                      }
                    }
                  }
                  break;
                case 2:
                  int v32 = v81;
                  if (v81)
                  {
                    while (1)
                    {
                      uint64_t result = (void *)sub_1CC221324(v6, *(_DWORD *)v26, (uint64_t)&v87);
                      if (BYTE8(v87)) {
                        goto LABEL_105;
                      }
                      unint64_t v31 = *(unsigned int *)(a3 + 8);
                      if (v31 >= *(unsigned int *)(a3 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)a3 + 8 * v31) = v87;
                      ++*(_DWORD *)(a3 + 8);
                      if (BYTE8(v87))
                      {
                        uint64_t result = (void *)v87;
                        *(void *)&long long v87 = 0;
                        if (result) {
                          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
                        }
                      }
                      if (!--v32) {
                        goto LABEL_15;
                      }
                    }
                  }
                  break;
                case 1:
                  int v22 = v81;
                  if (v81)
                  {
                    while (1)
                    {
                      uint64_t result = (void *)sub_1CC1CA844(v6, *(_DWORD *)v26, (uint64_t)&v87);
                      if (BYTE8(v87)) {
                        goto LABEL_105;
                      }
                      unint64_t v21 = *(unsigned int *)(a3 + 8);
                      if (v21 >= *(unsigned int *)(a3 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)a3 + 8 * v21) = v87;
                      ++*(_DWORD *)(a3 + 8);
                      if (BYTE8(v87))
                      {
                        uint64_t result = (void *)v87;
                        *(void *)&long long v87 = 0;
                        if (result) {
                          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
                        }
                      }
                      if (!--v22) {
                        goto LABEL_15;
                      }
                    }
                  }
                  break;
                default:
                  *(void *)&v93.__val_ = std::generic_category();
                  v93.__cat_ = (const std::error_category *)"Array element type can't be an Array or a Blob";
                  llvm::createStringError((llvm *)0x5C, v93, v62);
              }
            }
            else
            {
              uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
              if (BYTE8(v87)) {
                goto LABEL_105;
              }
              if ((v87 & 0x20) != 0)
              {
                unsigned int v52 = 0;
                LODWORD(v43) = v87 & 0x1F;
                while (1)
                {
                  if (v52 >= 0x1B)
                  {
                    *(void *)&v97.__val_ = std::generic_category();
                    v97.__cat_ = (const std::error_category *)"Unterminated VBR";
                    llvm::createStringError((llvm *)0x5C, v97, v69);
                  }
                  uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
                  if (BYTE8(v87)) {
                    break;
                  }
                  unint64_t v43 = ((v87 & 0x1F) << (v52 + 5)) | v43;
                  v52 += 5;
                  if ((v87 & 0x20) == 0)
                  {
                    unint64_t v42 = v79 & 0xFFFFFFFF00000000;
                    goto LABEL_84;
                  }
                }
LABEL_105:
                uint64_t v56 = v87;
LABEL_106:
                char v57 = v83;
LABEL_107:
                char v58 = v57 | 1;
LABEL_108:
                *(unsigned char *)(a5 + 8) = v58;
                *(void *)a5 = v56;
                return result;
              }
              unint64_t v42 = v87;
              unint64_t v43 = v79 & 0xFFFFFFFF00000000;
LABEL_84:
              unsigned int v44 = *(_DWORD *)(v6 + 32);
              BOOL v45 = v44 >= 0x20;
              char v46 = v44 - 32;
              if (v45)
              {
                *(void *)(v6 + 24) >>= v46;
                uint64_t v47 = 32;
              }
              else
              {
                uint64_t v47 = 0;
              }
              *(_DWORD *)(v6 + 32) = v47;
              unint64_t v48 = 8 * *(void *)(v6 + 16) - v47;
              unint64_t v79 = v42 | v43;
              unsigned int v49 = (unsigned __int8 *)(v42 | v43);
              unint64_t v50 = v48 + ((8 * (void)v49 + 24) & 0xFFFFFFFE0);
              if (*(void *)(v6 + 8) < v50 >> 3)
              {
                *(void *)&v96.__val_ = std::generic_category();
                v96.__cat_ = (const std::error_category *)"Blob ends too soon";
                llvm::createStringError((llvm *)0x5C, v96, v68);
              }
              *(void *)(v6 + 16) = (v50 >> 3) & 0x1FFFFFFFFFFFFFF8;
              *(_DWORD *)(v6 + 32) = 0;
              if ((v50 & 0x3F) != 0)
              {
                uint64_t result = (void *)sub_1CC1CA844(v6, v50 & 0x3F, (uint64_t)&v87);
                if (BYTE8(v87))
                {
                  uint64_t v56 = v87;
                  if ((void)v87) {
                    goto LABEL_106;
                  }
                }
              }
              unsigned int v51 = (unsigned __int8 *)(*(void *)v6 + (v48 >> 3));
              if (v80)
              {
                _DWORD *v80 = v51;
                v80[1] = v49;
              }
              else
              {
                uint64_t result = (void *)sub_1CC211AA8(a3, v51, &v49[(void)v51]);
              }
            }
          }
          else
          {
            uint64_t result = (void *)sub_1CC2215F8(v6, v16, (uint64_t)&v87);
            if (BYTE8(v87)) {
              goto LABEL_105;
            }
            unint64_t v20 = *(unsigned int *)(a3 + 8);
            if (v20 >= *(unsigned int *)(a3 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a3 + 8 * v20) = v87;
            ++*(_DWORD *)(a3 + 8);
            if (BYTE8(v87))
            {
              uint64_t result = (void *)v87;
              *(void *)&long long v87 = 0;
              if (result) {
                uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
              }
            }
          }
        }
LABEL_15:
        if (++v15 == v14)
        {
          char v37 = v83;
          LODWORD(v13) = v82;
          goto LABEL_55;
        }
      }
    }
    int v53 = (v12 >> 1) & 7;
    if (v53 == 5 || v53 == 3)
    {
      *(void *)&v103.__val_ = std::generic_category();
      v103.__cat_ = (const std::error_category *)"Abbreviation starts with an Array or a Blob";
      llvm::createStringError((llvm *)0x5C, v103, v78);
    }
    uint64_t v55 = a4;
    uint64_t result = (void *)sub_1CC2215F8((uint64_t)result, (uint64_t)v11, (uint64_t)&v87);
    if ((BYTE8(v87) & 1) == 0)
    {
      LODWORD(v13) = v87;
      a4 = v55;
      goto LABEL_5;
    }
LABEL_130:
    uint64_t v56 = v87;
    char v57 = *(unsigned char *)(a5 + 8);
    goto LABEL_107;
  }
  uint64_t result = (void *)sub_1CC1CA844((uint64_t)result, 6u, (uint64_t)&v87);
  if (BYTE8(v87)) {
    goto LABEL_130;
  }
  int v33 = v87;
  if ((v87 & 0x20) != 0)
  {
    unsigned int v38 = 0;
    int v33 = v87 & 0x1F;
    do
    {
      if (v38 >= 0x1B)
      {
        *(void *)&v101.__val_ = std::generic_category();
        v101.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v101, v76);
      }
      uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
      if (BYTE8(v87)) {
        goto LABEL_130;
      }
      v33 |= (v87 & 0x1F) << (v38 + 5);
      v38 += 5;
    }
    while ((v87 & 0x20) != 0);
  }
  uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
  if (BYTE8(v87))
  {
LABEL_131:
    uint64_t v85 = v87;
    sub_1CD4FB504(&v85, &v86);
    unsigned int v70 = std::string::insert(&v86, 0, "Failed to read size: ");
    std::string::size_type v71 = v70->__r_.__value_.__r.__words[2];
    long long v87 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    uint64_t v88 = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    if (v88 >= 0) {
      std::error_code v72 = (const std::error_category *)&v87;
    }
    else {
      std::error_code v72 = (const std::error_category *)v87;
    }
    *(void *)&v98.__val_ = std::generic_category();
    v98.__cat_ = v72;
    llvm::createStringError((llvm *)0x5C, v98, v73);
  }
  unsigned int v34 = v87;
  if ((v87 & 0x20) != 0)
  {
    unsigned int v39 = 0;
    unsigned int v34 = v87 & 0x1F;
    do
    {
      if (v39 >= 0x1B)
      {
        *(void *)&v102.__val_ = std::generic_category();
        v102.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v102, v77);
      }
      uint64_t result = (void *)sub_1CC1CA844(v6, 6u, (uint64_t)&v87);
      if (BYTE8(v87)) {
        goto LABEL_131;
      }
      v34 |= (v87 & 0x1F) << (v39 + 5);
      v39 += 5;
    }
    while ((v87 & 0x20) != 0);
  }
  if (v34 >= (unint64_t)(8 * *(void *)(v6 + 8)))
  {
    *(void *)&v100.__val_ = std::generic_category();
    v100.__cat_ = (const std::error_category *)"Size is not plausible";
    llvm::createStringError((llvm *)0x5C, v100, v75);
  }
  if (*(unsigned int *)(a3 + 8) + (unint64_t)v34 > *(unsigned int *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v34)
  {
    char v35 = *(unsigned char *)(a5 + 8);
    do
    {
      uint64_t result = (void *)sub_1CC221324(v6, 6u, (uint64_t)&v87);
      if (BYTE8(v87))
      {
        uint64_t v56 = v87;
        char v58 = v35 | 1;
        goto LABEL_108;
      }
      unint64_t v36 = *(unsigned int *)(a3 + 8);
      if (v36 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v36) = v87;
      ++*(_DWORD *)(a3 + 8);
      if (BYTE8(v87))
      {
        uint64_t result = (void *)v87;
        *(void *)&long long v87 = 0;
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
      --v34;
    }
    while (v34);
  }
  else
  {
    char v35 = *(unsigned char *)(a5 + 8);
  }
  *(unsigned char *)(a5 + 8) = v35 & 0xFE;
  *(_DWORD *)a5 = v33;
  return result;
}

void llvm::BitstreamCursor::ReadAbbrevRecord(llvm::BitstreamCursor *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (char *)operator new(0x228uLL);
  *(void *)unsigned int v5 = &unk_1F2608A00;
  *((void *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = v5 + 40;
  *((void *)v5 + 4) = 0x2000000000;
  char v35 = v5 + 24;
  unint64_t v36 = v5;
  sub_1CC1CA844((uint64_t)this, 5u, (uint64_t)&v41);
  if (v42)
  {
LABEL_58:
    *a2 = v41;
LABEL_59:
    if (!atomic_fetch_add((atomic_ullong *volatile)v5 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(char *))(*(void *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
    return;
  }
  int v6 = v41;
  if ((v41 & 0x10) != 0)
  {
    unsigned int v18 = 0;
    int v6 = v41 & 0xF;
    do
    {
      if (v18 >= 0x1C)
      {
        *(void *)&v47.__val_ = std::generic_category();
        v47.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v47, v31);
      }
      sub_1CC1CA844((uint64_t)this, 5u, (uint64_t)&v41);
      if (v42) {
        goto LABEL_58;
      }
      v6 |= (v41 & 0xF) << (v18 + 4);
      v18 += 4;
    }
    while ((v41 & 0x10) != 0);
  }
  if (v6)
  {
    while (1)
    {
      sub_1CC1CA844((uint64_t)this, 1u, (uint64_t)&v41);
      if (v42)
      {
        unint64_t v21 = v41;
        unint64_t v41 = 0;
LABEL_47:
        *a2 = v21;
        int v9 = 1;
        goto LABEL_18;
      }
      if (!v41) {
        break;
      }
      sub_1CC221324((uint64_t)this, 8u, (uint64_t)&v39);
      if (v40)
      {
        unint64_t v21 = v39;
        goto LABEL_47;
      }
      unint64_t v12 = *((unsigned int *)v5 + 8);
      if (v12 >= *((unsigned int *)v5 + 9)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v2 |= 1uLL;
      uint64_t v13 = (unint64_t *)(*((void *)v5 + 3) + 16 * v12);
      *uint64_t v13 = v39;
      v13[1] = v2;
      ++*((_DWORD *)v5 + 8);
      if (v40)
      {
        unint64_t v29 = v39;
        unint64_t v39 = 0;
        if (v29) {
          (*(void (**)(unint64_t))(*(void *)v29 + 8))(v29);
        }
      }
      int v9 = 4;
LABEL_18:
      if (v42)
      {
        unint64_t v22 = v41;
        unint64_t v41 = 0;
        if (v22) {
          (*(void (**)(unint64_t))(*(void *)v22 + 8))(v22);
        }
      }
      if (v9 && v9 != 4) {
        goto LABEL_59;
      }
      if (!--v6) {
        goto LABEL_31;
      }
    }
    sub_1CC1CA844((uint64_t)this, 3u, (uint64_t)&v39);
    if (v40)
    {
      unint64_t v23 = v39;
      unint64_t v39 = 0;
      *a2 = v23;
      int v9 = 1;
    }
    else
    {
      char v7 = v39;
      if (v39 - 1 >= 5)
      {
        *(void *)&v44.__val_ = std::generic_category();
        v44.__cat_ = (const std::error_category *)"Invalid encoding";
        llvm::createStringError((llvm *)0x5C, v44, v24);
      }
      if ((v39 - 1) >= 2)
      {
        if ((v39 - 3) > 2) {
          llvm::report_fatal_error((llvm *)"Invalid encoding", (const llvm::Twine *)1);
        }
        unint64_t v14 = *((unsigned int *)v5 + 8);
        if (v14 >= *((unsigned int *)v5 + 9)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v15 = (void *)(*((void *)v5 + 3) + 16 * v14);
        *unsigned int v15 = 0;
        v15[1] = v33 & 0xFFFFFFFFFFFFFFF0 | (2 * (v7 & 7));
        unint64_t v33 = v33 & 0xFFFFFFFFFFFFFFF0 | (2 * (v7 & 7));
        ++*((_DWORD *)v5 + 8);
      }
      else
      {
        sub_1CC221324((uint64_t)this, 5u, (uint64_t)&v37);
        if (v38)
        {
          char v11 = 0;
          unint64_t v26 = v37;
          unint64_t v37 = 0;
          *a2 = v26;
          int v9 = 1;
        }
        else if (v37)
        {
          if (v37 >= 0x21)
          {
            *(void *)&v45.__val_ = std::generic_category();
            v45.__cat_ = (const std::error_category *)"Fixed or VBR abbrev record with size > MaxChunkData";
            llvm::createStringError((llvm *)0x5C, v45, v28);
          }
          unint64_t v8 = *((unsigned int *)v5 + 8);
          if (v8 >= *((unsigned int *)v5 + 9)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v9 = 0;
          unint64_t v3 = v3 & 0xFFFFFFFFFFFFFFF0 | (2 * (v7 & 7));
          char v10 = (unint64_t *)(*((void *)v5 + 3) + 16 * v8);
          *char v10 = v37;
          v10[1] = v3;
          ++*((_DWORD *)v5 + 8);
          char v11 = 1;
        }
        else
        {
          unint64_t v19 = *((unsigned int *)v5 + 8);
          if (v19 >= *((unsigned int *)v5 + 9)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          char v11 = 0;
          unint64_t v20 = (void *)(*((void *)v5 + 3) + 16 * v19);
          *unint64_t v20 = 0;
          v20[1] = v32 | 1;
          v32 |= 1uLL;
          ++*((_DWORD *)v5 + 8);
          int v9 = 4;
        }
        if (v38)
        {
          unint64_t v27 = v37;
          unint64_t v37 = 0;
          if (v27) {
            (*(void (**)(unint64_t))(*(void *)v27 + 8))(v27);
          }
        }
        if ((v11 & 1) == 0) {
          goto LABEL_17;
        }
      }
      int v9 = 0;
    }
LABEL_17:
    if (v40)
    {
      unint64_t v25 = v39;
      unint64_t v39 = 0;
      if (v25) {
        (*(void (**)(unint64_t))(*(void *)v25 + 8))(v25);
      }
    }
    goto LABEL_18;
  }
LABEL_31:
  if (!*((_DWORD *)v5 + 8))
  {
    *(void *)&v46.__val_ = std::generic_category();
    v46.__cat_ = (const std::error_category *)"Abbrev record with no operands";
    llvm::createStringError((llvm *)0x5C, v46, v30);
  }
  uint64_t v16 = (void *)*((void *)this + 6);
  if ((unint64_t)v16 < *((void *)this + 7))
  {
    *uint64_t v16 = v5 + 24;
    v16[1] = v5;
    *((void *)this + 6) = v16 + 2;
    *a2 = 0;
    return;
  }
  unsigned int v17 = sub_1CC203220((char **)this + 5, (uint64_t)&v35);
  unsigned int v5 = v36;
  *((void *)this + 6) = v17;
  *a2 = 0;
  if (v5) {
    goto LABEL_59;
  }
}

void llvm::BitstreamCursor::ReadBlockInfoBlock(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v47[64] = *MEMORY[0x1E4F143B8];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, 0, &v45);
  unsigned int v5 = v45;
  if (v45)
  {
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v5;
    return;
  }
  uint64_t v6 = 0;
  long long v39 = 0uLL;
  char v40 = 0;
  std::error_code v45 = v47;
  uint64_t v46 = 0x4000000000;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        sub_1CC1CA5F4((uint64_t)this, 2, (uint64_t)__p);
        if ((uint64_t)__p[1])
        {
          int v28 = __p[0];
LABEL_57:
          *(unsigned char *)(a3 + 32) |= 1u;
          *(void *)a3 = v28;
          goto LABEL_49;
        }
        if (LODWORD(__p[0]) != 2) {
          break;
        }
        sub_1CC1C6524((uint64_t)this, &v43);
        int v28 = v43;
        if ((uint64_t)__p[1])
        {
          unint64_t v37 = __p[0];
          __p[0] = 0;
          if (v37) {
            (*(void (**)(void *))(*(void *)v37 + 8))(v37);
          }
        }
        if (v28) {
          goto LABEL_57;
        }
      }
      if (LODWORD(__p[0]) == 1)
      {
        *(unsigned char *)(a3 + 32) &= ~1u;
        *(_OWORD *)a3 = v39;
        *(void *)(a3 + 16) = v40;
        long long v39 = 0uLL;
        char v40 = 0;
        *(unsigned char *)(a3 + 24) = 1;
        goto LABEL_49;
      }
      if (!LODWORD(__p[0]))
      {
LABEL_54:
        *(unsigned char *)(a3 + 32) &= ~1u;
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 24) = 0;
        goto LABEL_49;
      }
      if (HIDWORD(__p[0]) == 2) {
        break;
      }
      LODWORD(v46) = 0;
      llvm::BitstreamCursor::readRecord(this, SHIDWORD(__p[0]), (uint64_t)&v45, 0, (uint64_t)&v43);
      if (v44)
      {
        char v27 = 0;
        unint64_t v29 = v43;
        uint64_t v43 = 0;
        *(unsigned char *)(a3 + 32) |= 1u;
        *(void *)a3 = v29;
      }
      else
      {
        switch(v43)
        {
          case 1:
            if (v46)
            {
              int v11 = *(_DWORD *)v45;
              long long v12 = v39;
              if ((void)v39 == *((void *)&v39 + 1)
                || (uint64_t v6 = *((void *)&v39 + 1) - 80, *(_DWORD *)(*((void *)&v39 + 1) - 80) != v11))
              {
                unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v39 + 1) - v39) >> 4);
                uint64_t v14 = -858993459 * ((uint64_t)(*((void *)&v39 + 1) - v39) >> 4);
                if (-858993459 * ((uint64_t)(*((void *)&v39 + 1) - v39) >> 4))
                {
                  uint64_t v6 = v39;
                  while (*(_DWORD *)v6 != v11)
                  {
                    v6 += 80;
                    if (!--v14) {
                      goto LABEL_23;
                    }
                  }
                }
                else
                {
LABEL_23:
                  if (*((void *)&v39 + 1) < (unint64_t)v40)
                  {
                    *(_OWORD *)(*((void *)&v39 + 1) + 48) = 0u;
                    *(_OWORD *)(*((void *)&v12 + 1) + 64) = 0u;
                    uint64_t v21 = *((void *)&v12 + 1) + 80;
                    *(_OWORD *)(*((void *)&v12 + 1) + 16) = 0u;
                    *(_OWORD *)(*((void *)&v12 + 1) + 32) = 0u;
                    **((_OWORD **)&v12 + 1) = 0u;
                  }
                  else
                  {
                    unint64_t v15 = v13 + 1;
                    if (v13 + 1 > 0x333333333333333) {
                      abort();
                    }
                    if (0x999999999999999ALL * ((uint64_t)&v40[-v39] >> 4) > v15) {
                      unint64_t v15 = 0x999999999999999ALL * ((uint64_t)&v40[-v39] >> 4);
                    }
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v40[-v39] >> 4) >= 0x199999999999999) {
                      unint64_t v16 = 0x333333333333333;
                    }
                    else {
                      unint64_t v16 = v15;
                    }
                    if (v16 > 0x333333333333333) {
                      sub_1CB833614();
                    }
                    uint64_t v17 = 5 * v16;
                    unsigned int v18 = (char *)operator new(80 * v16);
                    unint64_t v19 = &v18[16 * ((uint64_t)(*((void *)&v39 + 1) - v39) >> 4)];
                    *(_OWORD *)unint64_t v19 = 0u;
                    *((_OWORD *)v19 + 1) = 0u;
                    unint64_t v20 = &v18[16 * v17];
                    uint64_t v21 = (uint64_t)(v19 + 80);
                    *((_OWORD *)v19 + 2) = 0u;
                    *((_OWORD *)v19 + 3) = 0u;
                    *((_OWORD *)v19 + 4) = 0u;
                    if ((void)v12 == *((void *)&v12 + 1))
                    {
                      *(void *)&long long v39 = &v18[80 * v13];
                      char v40 = v20;
                    }
                    else
                    {
                      uint64_t v22 = 0;
                      do
                      {
                        unint64_t v23 = &v19[v22];
                        uint64_t v24 = *((void *)&v12 + 1) + v22;
                        *((_DWORD *)v23 - 20) = *(_DWORD *)(*((void *)&v12 + 1) + v22 - 80);
                        *(_OWORD *)(v23 - 72) = *(_OWORD *)(*((void *)&v12 + 1) + v22 - 72);
                        *((void *)v23 - 7) = *(void *)(*((void *)&v12 + 1) + v22 - 56);
                        *(void *)(v24 - 72) = 0;
                        *(void *)(v24 - 64) = 0;
                        *(void *)(v24 - 56) = 0;
                        long long v25 = *(_OWORD *)(*((void *)&v12 + 1) + v22 - 48);
                        *((void *)v23 - 4) = *(void *)(*((void *)&v12 + 1) + v22 - 32);
                        *((_OWORD *)v23 - 3) = v25;
                        *(void *)(v24 - 40) = 0;
                        *(void *)(v24 - 32) = 0;
                        *(void *)(v24 - 48) = 0;
                        *(_OWORD *)(v23 - 24) = *(_OWORD *)(*((void *)&v12 + 1) + v22 - 24);
                        *((void *)v23 - 1) = *(void *)(*((void *)&v12 + 1) + v22 - 8);
                        *(void *)(v24 - 24) = 0;
                        *(void *)(v24 - 16) = 0;
                        *(void *)(v24 - 8) = 0;
                        v22 -= 80;
                      }
                      while (*((void *)&v12 + 1) + v22 != (void)v12);
                      *(void *)&long long v39 = &v19[v22];
                      *((void *)&v39 + 1) = v19 + 80;
                      char v40 = v20;
                      uint64_t v26 = *((void *)&v12 + 1) - 72;
                      do
                      {
                        __p[0] = (void *)(v26 + 48);
                        sub_1CC1CB288((void ***)__p);
                        if (*(char *)(v26 + 47) < 0) {
                          operator delete(*(void **)(v26 + 24));
                        }
                        if (*(void *)v26)
                        {
                          sub_1CC1CAA74(v26, *(void *)v26);
                          operator delete(*(void **)v26);
                        }
                        uint64_t v26 = *((void *)&v12 + 1) - 80;
                      }
                      while (*((void *)&v12 + 1) - 8 != (void)v12);
                    }
                    if ((void)v12) {
                      operator delete((void *)v12);
                    }
                  }
                  *((void *)&v39 + 1) = v21;
                  *(_DWORD *)(v21 - 80) = v11;
                  uint64_t v6 = v21 - 80;
                }
              }
              goto LABEL_43;
            }
            break;
          case 2:
            if (v6)
            {
              if (a2)
              {
                sub_1CC1F4974(__p, (uint64_t *)v45, (uint64_t *)v45 + v46, v46);
                unint64_t v30 = (void **)(v6 + 32);
                if (*(char *)(v6 + 55) < 0) {
                  operator delete(*v30);
                }
                *(_OWORD *)unint64_t v30 = *(_OWORD *)__p;
                *(void *)(v6 + 48) = v42;
              }
LABEL_43:
              char v27 = 1;
              goto LABEL_44;
            }
            break;
          case 3:
            if (v6)
            {
              if (a2)
              {
                int v32 = *(_DWORD *)v45;
                sub_1CC1F4974(__p, (uint64_t *)v45 + 1, (uint64_t *)v45 + v46, (8 * v46 - 8) >> 3);
                unint64_t v33 = *(void *)(v6 + 64);
                if (v33 >= *(void *)(v6 + 72))
                {
                  char v35 = sub_1CC222F78((int64x2_t *)(v6 + 56), v32, (uint64_t)__p);
                  int v36 = SHIBYTE(v42);
                  *(void *)(v6 + 64) = v35;
                  if (v36 < 0) {
                    operator delete(__p[0]);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v33 = v32;
                  long long v34 = *(_OWORD *)__p;
                  *(void *)(v33 + 24) = v42;
                  *(_OWORD *)(v33 + 8) = v34;
                  *(void *)(v6 + 64) = v33 + 32;
                }
              }
              goto LABEL_43;
            }
            break;
          default:
            goto LABEL_43;
        }
        char v27 = 0;
        *(unsigned char *)(a3 + 32) &= ~1u;
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 24) = 0;
      }
LABEL_44:
      if (v44)
      {
        unint64_t v31 = v43;
        uint64_t v43 = 0;
        if (v31) {
          (*(void (**)(void *))(*(void *)v31 + 8))(v31);
        }
      }
      if ((v27 & 1) == 0) {
        goto LABEL_49;
      }
    }
    if (!v6) {
      goto LABEL_54;
    }
    llvm::BitstreamCursor::ReadAbbrevRecord(this, (unint64_t *)__p);
    char v7 = __p[0];
    if (__p[0]) {
      break;
    }
    uint64_t v8 = *((void *)this + 6) - 16;
    int v9 = *(_OWORD **)(v6 + 16);
    if ((unint64_t)v9 < *(void *)(v6 + 24))
    {
      *int v9 = *(_OWORD *)v8;
      char v10 = (char *)(v9 + 1);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      char v10 = sub_1CC203220((char **)(v6 + 8), v8);
    }
    *(void *)(v6 + 16) = v10;
    sub_1CC1CAA74((uint64_t)this + 40, *((void *)this + 6) - 16);
  }
  *(unsigned char *)(a3 + 32) |= 1u;
  *(void *)a3 = v7;
LABEL_49:
  if (v45 != v47) {
    free(v45);
  }
  std::error_code v45 = &v39;
  sub_1CC1CB314((void ***)&v45);
}

unsigned char *sub_1CC222EE8(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    char v4 = result[8];
    if (v4)
    {
      uint64_t result = *(unsigned char **)result;
      *(void *)unint64_t v3 = 0;
      if (result)
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[8];
      }
    }
    char v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    uint64_t v6 = *(void *)a2;
    if (v5) {
      *(void *)a2 = 0;
    }
    *(void *)unint64_t v3 = v6;
  }
  return result;
}

char *sub_1CC222F78(int64x2_t *a1, int a2, uint64_t a3)
{
  uint64_t v3 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[1].i64[0] - a1->i64[0];
  if (v8 >> 4 > v4) {
    unint64_t v4 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v4;
  }
  uint64_t v24 = a1 + 1;
  if (v9)
  {
    if (v9 >> 59) {
      sub_1CB833614();
    }
    char v10 = (char *)operator new(32 * v9);
  }
  else
  {
    char v10 = 0;
  }
  int v11 = &v10[32 * v3];
  *(_DWORD *)int v11 = a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)a3;
  *((void *)v11 + 3) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v14 = vdupq_n_s64(v12);
    unint64_t v15 = &v10[32 * v3];
  }
  else
  {
    unint64_t v15 = &v10[32 * v3];
    do
    {
      int v16 = *(_DWORD *)(v12 - 32);
      v12 -= 32;
      *((_DWORD *)v15 - 8) = v16;
      v15 -= 32;
      long long v17 = *(_OWORD *)(v12 + 8);
      *((void *)v15 + 3) = *(void *)(v12 + 24);
      *(_OWORD *)(v15 + 8) = v17;
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 8) = 0;
    }
    while (v12 != v13);
    int64x2_t v14 = *a1;
  }
  unsigned int v18 = v11 + 32;
  a1->i64[0] = (uint64_t)v15;
  a1->i64[1] = (uint64_t)(v11 + 32);
  int64x2_t v22 = v14;
  uint64_t v19 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v10[32 * v9];
  uint64_t v23 = v19;
  uint64_t v21 = v14.i64[0];
  sub_1CD4FF274((uint64_t)&v21);
  return v18;
}

void *llvm::cas::CacheKey::CacheKey(void *__dst, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 8);
  if (v3)
  {
    size_t v4 = *(void *)(a2 + 16);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v4 >= 0x17)
    {
      uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v6 = v4 | 7;
      }
      uint64_t v7 = v6 + 1;
      char v5 = operator new(v6 + 1);
      __dst[1] = v4;
      __dst[2] = v7 | 0x8000000000000000;
      *__dst = v5;
    }
    else
    {
      *((unsigned char *)__dst + 23) = v4;
      char v5 = __dst;
      if (!v4) {
        goto LABEL_11;
      }
    }
    memmove(v5, v3, v4);
LABEL_11:
    *((unsigned char *)v5 + v4) = 0;
    return __dst;
  }
  *__dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  return __dst;
}

void *llvm::cas::CacheKey::CacheKey(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = a2[1];
  return llvm::cas::CacheKey::CacheKey(a1, v2, &v4);
}

{
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *a2;
  uint64_t v4 = a2[1];
  return llvm::cas::CacheKey::CacheKey(a1, v2, &v4);
}

void *llvm::cas::CacheKey::CacheKey(void *a1, uint64_t a2, void *a3)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)a2 + 16))(&v10, a2, *a3);
  size_t v4 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  char v5 = __src;
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v4;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = __len;
  uint64_t v6 = a1;
  if (v4) {
LABEL_8:
  }
    memmove(v6, v5, v4);
  *((unsigned char *)v6 + v4) = 0;
  if (__src != v13) {
    free(__src);
  }
  return a1;
}

void llvm::cas::createOnDiskActionCache(llvm *a1)
{
}

uint64_t sub_1CC223358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void sub_1CC223388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(a1 + 16, 0, a3);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2233D8(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = llvm::cas::ThreadSafeHashMappedTrieBase::find(a1 + 16, a2, a3);
  if (v7 != -2 || v6 == 0)
  {
    *(unsigned char *)(a4 + 72) &= ~1u;
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    int v11 = v13;
    long long v9 = *((_OWORD *)v6 + 2);
    v13[1] = *((_OWORD *)v6 + 3);
    v13[0] = v9;
    int64x2_t v12 = vdupq_n_s64(0x20uLL);
    *(unsigned char *)(a4 + 72) &= ~1u;
    *(void *)a4 = v10;
    *(void *)(a4 + 8) = a4 + 32;
    *(_OWORD *)(a4 + 16) = xmmword_1CDC7F9D0;
    sub_1CC1B8518(a4 + 8, (uint64_t)&v11);
    *(unsigned char *)(a4 + 64) = 1;
    if (v11 != v13) {
      free(v11);
    }
  }
}

unsigned char *sub_1CC2234CC@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (const void **)(a4 + 1);
  size_t v11 = a4[2];
  if (v11) {
    memmove(__dst, *v10, v11);
  }
  v44[0] = __dst;
  uint64_t v54 = sub_1CC2238C0;
  *(void *)uint64_t v55 = v44;
  v46[0] = &v54;
  uint64_t result = llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, (uint64_t)a2, a3, (uint64_t)sub_1CC223880, (uint64_t)v46);
  if (v13 == -2) {
    uint64_t v14 = result;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *((void *)v14 + 4);
  uint64_t v16 = *((void *)v14 + 5);
  long long v17 = v14 + 32;
  if (__dst[0] != v15 || __dst[1] != v16 || __dst[2] != *((void *)v17 + 2) || __dst[3] != *((void *)v17 + 3))
  {
    uint64_t v54 = (__n128 (*)(uint64_t *, uint64_t))&v55[16];
    *(_OWORD *)uint64_t v55 = xmmword_1CD96DBD0;
    sub_1CC223914((uint64_t)&v54, 2 * a3);
    if (a3)
    {
      uint64_t v21 = 0;
      do
      {
        unsigned int v22 = *a2++;
        *((unsigned char *)v54 + v21) = a0123456789abcd_6[(unint64_t)v22 >> 4] | 0x20;
        *((unsigned char *)v54 + v21 + 1) = a0123456789abcd_6[v22 & 0xF] | 0x20;
        v21 += 2;
        --a3;
      }
      while (a3);
    }
    uint64_t v23 = v54;
    if (!v54)
    {
      uint64_t v24 = 0;
      long long v34 = 0;
      size_t v35 = 0;
      int64_t v36 = 0;
LABEL_32:
      free(v24);
LABEL_33:
      if (v36 >= 0) {
        unint64_t v29 = &v34;
      }
      else {
        unint64_t v29 = v34;
      }
      if (v36 >= 0) {
        size_t v30 = HIBYTE(v36) & 0x7F;
      }
      else {
        size_t v30 = v35;
      }
      unint64_t v31 = *(__n128 (**)(uint64_t *, uint64_t))(a1 + 8);
      uint64_t v49 = *a4;
      unint64_t v50 = &v52;
      long long v51 = xmmword_1CDC7F9D0;
      if (a4[2]) {
        sub_1CC223970((uint64_t)&v50, (uint64_t)v10);
      }
      uint64_t v54 = v31;
      *(void *)uint64_t v55 = v56;
      long long v32 = *(_OWORD *)v17;
      v56[1] = *((_OWORD *)v17 + 1);
      v56[0] = v32;
      *(int64x2_t *)&v55[8] = vdupq_n_s64(0x20uLL);
      llvm::cas::CASID::toString((llvm::cas::CASID *)&v54, v48);
      if (*(_OWORD **)v55 != v56) {
        free(*(void **)v55);
      }
      unint64_t v33 = std::generic_category();
      __int16 v39 = 1283;
      v38[0] = "cache poisoned for '";
      v38[2] = v29;
      v38[3] = v30;
      v40[0] = v38;
      v40[2] = "' (new='";
      __int16 v41 = 770;
      llvm::cas::CASID::toString((llvm::cas::CASID *)&v49, &__p);
      v42[0] = v40;
      v42[2] = &__p;
      __int16 v43 = 1026;
      v44[0] = v42;
      v44[2] = "' vs. existing '";
      __int16 v45 = 770;
      v46[0] = v44;
      v46[2] = v48;
      __int16 v47 = 1026;
      uint64_t v54 = (__n128 (*)(uint64_t *, uint64_t))v46;
      *(void *)&v55[8] = "')";
      LOWORD(v56[0]) = 770;
      sub_1CD4FF4BC(22, (uint64_t)v33, (llvm::Twine *)&v54);
    }
    size_t v25 = *(void *)v55;
    if (*(void *)v55 >= 0x7FFFFFFFFFFFFFF8uLL) {
      abort();
    }
    if (*(void *)v55 >= 0x17uLL)
    {
      uint64_t v27 = (*(void *)v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(void *)v55 | 7) != 0x17) {
        uint64_t v27 = *(void *)v55 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v26 = operator new(v27 + 1);
      size_t v35 = v25;
      int64_t v36 = v28 | 0x8000000000000000;
      long long v34 = v26;
    }
    else
    {
      HIBYTE(v36) = v55[0];
      uint64_t v26 = &v34;
      if (!*(void *)v55)
      {
LABEL_31:
        *((unsigned char *)v26 + v25) = 0;
        uint64_t v24 = v54;
        if ((char *)v54 == &v55[16]) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    memmove(v26, v23, v25);
    goto LABEL_31;
  }
  *a5 = 0;
  return result;
}

uint64_t sub_1CC223880(void (***a1)(void, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  char v5 = **a1;
  size_t v4 = (*a1)[1];
  v8[0] = a2;
  v8[1] = &v7;
  v8[2] = a3;
  v8[3] = a4;
  v5(v4, v8);
  return v7;
}

__n128 sub_1CC2238C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)a2;
  size_t v4 = *(void **)(a2 + 8);
  char v5 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  *(void *)a2 = 0;
  uint64_t v7 = *a1;
  if (v6) {
    memmove(v3, v5, v6);
  }
  __n128 result = *(__n128 *)v7;
  long long v9 = *(_OWORD *)(v7 + 16);
  v3[2] = *(_OWORD *)v7;
  v3[3] = v9;
  *size_t v4 = v3;
  return result;
}

uint64_t sub_1CC223914(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 != a2)
  {
    if (v2 <= a2 && *(void *)(result + 16) < a2) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1CC223970(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    size_t v4 = *(void *)(a2 + 8);
    size_t v5 = *(void *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, v4);
      }
    }
    else
    {
      if (*(void *)(a1 + 16) < v4)
      {
        *(void *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, *(void *)(a1 + 8));
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + v5), (const void *)(*(void *)a2 + v5), *(void *)a2 + v6 - (*(void *)a2 + v5));
      }
    }
    *(void *)(a1 + 8) = v4;
  }
  return a1;
}

BOOL sub_1CC223A40(unsigned __int8 *a1, unint64_t a2, std::string *this)
{
  if (!a2) {
    return 1;
  }
  unint64_t v4 = a2;
  std::string::resize(this, (a2 + 1) >> 1, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = this;
  }
  else {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    int v7 = (unsigned __int16)word_1CFAC4A4C[*a1];
    if (v7 == 0xFFFF) {
      return 0;
    }
    v6->__r_.__value_.__s.__data_[0] = v7;
    uint64_t v6 = (std::string *)((char *)v6 + 1);
    ++a1;
    --v4;
  }
  if (v4 < 2) {
    return 1;
  }
  unint64_t v9 = v4 >> 1;
  uint64_t v10 = a1 + 1;
  do
  {
    int v11 = (unsigned __int16)word_1CFAC4A4C[*(v10 - 1)];
    int v12 = (unsigned __int16)word_1CFAC4A4C[*v10];
    BOOL v13 = v11 == 0xFFFF || v12 == 0xFFFF;
    BOOL result = !v13;
    if (v13) {
      break;
    }
    v10 += 2;
    v6->__r_.__value_.__s.__data_[0] = v12 | (16 * v11);
    uint64_t v6 = (std::string *)((char *)v6 + 1);
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1CC223B30(unsigned __int8 *a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t result = sub_1CC223914((uint64_t)a4, 2 * a2);
  if (v6)
  {
    uint64_t v9 = 0;
    if (a3) {
      char v10 = 32;
    }
    else {
      char v10 = 0;
    }
    do
    {
      unsigned int v11 = *a1++;
      *(unsigned char *)(*a4 + v9) = a0123456789abcd_6[(unint64_t)v11 >> 4] | v10;
      *(unsigned char *)(*a4 + v9 + 1) = a0123456789abcd_6[v11 & 0xF] | v10;
      v9 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1CC223BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  v15[4] = *MEMORY[0x1E4F143B8];
  int v12 = v14;
  long long v13 = xmmword_1CFAC6B50;
  llvm::sys::fs::readNativeFileToEOF(v8, &v12, 0x4000uLL, v15);
  uint64_t v9 = v15[0];
  if (v15[0])
  {
    *(unsigned char *)(v7 + 8) |= 1u;
    *(void *)uint64_t v7 = v9;
  }
  else
  {
    char v10 = v12;
    uint64_t v11 = v13;
    sub_1CD4FFBC8((char *)v15, v6, 0, 0, (int *)v12, v13);
    (*(void (**)(uint64_t, void *, uint64_t, void, void, void *, uint64_t))(*(void *)v6 + 144))(v6, v15, 32, 0, 0, v10, v11);
  }
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t llvm::sys::fs::mapped_file_region::alignment(llvm::sys::fs::mapped_file_region *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  llvm::sys::Process::getPageSize((uint64_t)&v3);
  if ((v4 & 1) == 0) {
    return v3;
  }
  unint64_t v2 = v3;
  sub_1CD4515D0(&v2);
  if (v2) {
    (*(void (**)(void *))(*v2 + 8))(v2);
  }
  return 4096;
}

uint64_t *sub_1CC223DBC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*result + 8);
  if (v5 >= *(_DWORD *)(*result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v4 + 8 * v5) = a2;
  ++*(_DWORD *)(v4 + 8);
  *a3 = 0;
  return result;
}

void sub_1CC223E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (llvm *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)a2 + 16) + 32))(*(void *)(*(void *)a2 + 16), a3);
  if (!v4)
  {
    llvm::inconvertibleErrorCode(v3);
    sub_1CD06481C();
  }
  operator new();
}

void llvm::cas::createCASFileSystem(llvm::cas *this, llvm::cas::ObjectStore *a2, const llvm::cas::CASID *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC22417C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v34[16] = *MEMORY[0x1E4F143B8];
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a3 + 72), memory_order_acquire);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(explicit + 64));
  if (v5)
  {
    *a1 = 0;
    return;
  }
  int v8 = *(const void **)a3;
  size_t v9 = *(void *)(a3 + 8);
  long long v32 = v34;
  long long v33 = xmmword_1CFAC3020;
  if (v9 >= 0x81) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v10 = 0;
  if (v9)
  {
    memcpy(v32, v8, v9);
    uint64_t v10 = v33;
  }
  *(void *)&long long v33 = v10 + v9;
  uint64_t v25[3] = a3;
  size_t v26 = v10 + v9;
  v25[0] = &v32;
  v25[1] = &v26;
  v25[2] = a2;
  llvm::cas::ObjectStore::getProxy(*(void *)(a2 + 16), *(void *)(a3 + 80), (uint64_t)&v29);
  if ((v31 & 1) == 0)
  {
    llvm::cas::TreeSchema::TreeSchema((llvm::cas::TreeSchema *)v24, *(llvm::cas::ObjectStore **)(a2 + 16));
    uint64_t isNode = llvm::cas::TreeSchema::isNode((uint64_t)v24, &v29);
    if ((isNode & 1) == 0)
    {
      uint64_t v14 = llvm::inconvertibleErrorCode((llvm *)isNode);
      uint64_t v16 = v15;
      sub_1CC224480((uint64_t)v27, v29, v30);
      llvm::cas::CASID::toString((llvm::cas::CASID *)v27, &v19);
      sub_1CB935710("invalid tree '", &v19, &v20);
      sub_1CC224444(&v20, "'", &v21);
      __int16 v23 = 260;
      *(void *)&v22[0] = &v21;
      sub_1CD4FF4BC(v14, v16, (llvm::Twine *)v22);
    }
    llvm::cas::FileSystemCache::Directory::Writer::Writer((uint64_t)&v21, (std::mutex *)explicit);
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)(explicit + 64));
    if (v12)
    {
      *a1 = 0;
    }
    else
    {
      long long v17 = v29;
      uint64_t v18 = v30;
      llvm::cas::TreeSchema::load((uint64_t)v24, (uint64_t *)&v17, (uint64_t)v27);
      if (v28)
      {
        uint64_t v13 = *(void *)&v27[0];
        *(void *)&v27[0] = 0;
      }
      else
      {
        v20.__r_.__value_.__r.__words[0] = explicit;
        v20.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
        v22[0] = v27[0];
        v22[1] = v27[1];
        llvm::cas::TreeSchema::forEachTreeEntry(v22, (uint64_t (*)(uint64_t, unsigned char *))sub_1CC2244B0, (uint64_t)&v20, a1);
        uint64_t v13 = *a1;
        if (*a1) {
          goto LABEL_17;
        }
        atomic_store(1u, (unsigned __int8 *)(explicit + 64));
      }
      *a1 = v13;
    }
LABEL_17:
    if (v21.__r_.__value_.__s.__data_[8]) {
      std::mutex::unlock((std::mutex *)v21.__r_.__value_.__l.__data_);
    }
    if ((v31 & 1) != 0 && (void)v29) {
      (*(void (**)(void))(*(void *)v29 + 8))(v29);
    }
    goto LABEL_9;
  }
  *a1 = v29;
LABEL_9:
  if (v32 != v34) {
    free(v32);
  }
}

__n128 sub_1CC224444@<Q0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  char v4 = (__n128 *)std::string::append(a1, a2);
  __n128 result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1CC224480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a3);
}

uint64_t sub_1CC2244B0@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (unsigned char ***)a1[1];
  uint64_t v7 = v6[2];
  int v8 = *v6;
  size_t v9 = *v6[1];
  uint64_t v10 = (*v6)[1];
  if (v10 != v9)
  {
    if (v10 <= v9)
    {
      if (v8[2] < (unint64_t)v9) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v9 != v10) {
        bzero(&v10[*v8], v9 - v10);
      }
    }
    v8[1] = v9;
    int v8 = *v6;
  }
  uint64_t v11 = (const char *)*((void *)a2 + 2);
  unsigned __int8 v12 = (const char *)*((void *)a2 + 3);
  __int16 v25 = 261;
  v24[0] = v11;
  v24[1] = v12;
  __int16 v23 = 257;
  __int16 v21 = 257;
  __int16 v19 = 257;
  llvm::sys::path::append(v8, (llvm::Twine *)1, v24, v22, (uint64_t)v20, (uint64_t)v18);
  int v15 = *a2;
  if (*a2 >= 2)
  {
    if (v15 == 2) {
      DirectoryAlreadyLocked = (void *)sub_1CC22B744((uint64_t)(v7[5] + 424), (uint64_t)(v7[5] + 320), (uint64_t)v6[3], atomic_load_explicit((atomic_ullong *volatile)v6[3] + 9, memory_order_acquire), **v6, (size_t)(*v6)[1], 2, v14, *((void *)a2 + 1), 1);
    }
    else {
      DirectoryAlreadyLocked = (void *)llvm::cas::FileSystemCache::makeDirectoryAlreadyLocked((uint64_t)v7[5], (uint64_t)v6[3], **v6, (size_t)(*v6)[1], *((void *)a2 + 1), 1, v13, v14);
    }
  }
  else
  {
    DirectoryAlreadyLocked = (void *)sub_1CC22B744((uint64_t)(v7[5] + 424), (uint64_t)(v7[5] + 320), (uint64_t)v6[3], atomic_load_explicit((atomic_ullong *volatile)v6[3] + 9, memory_order_acquire), **v6, (size_t)(*v6)[1], v15 == 1, v14, *((void *)a2 + 1), 1);
  }
  v22[0] = DirectoryAlreadyLocked;
  uint64_t result = sub_1CD50092C(v5 + 72, v22, (uint64_t)v24);
  *a3 = 0;
  return result;
}

uint64_t sub_1CC224650(uint64_t a1)
{
  *(void *)a1 = &unk_1F2608C58;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  unint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2 && atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
  {
    uint64_t v5 = sub_1CD500614((uint64_t)v2);
    MEMORY[0x1D25D9CE0](v5, 0x10B2C40A65E917ELL);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1CC22471C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2608C58;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  unint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2 && atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = sub_1CD500614((uint64_t)v2);
    MEMORY[0x1D25D9CE0](v4, 0x10B2C40A65E917ELL);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC224808(uint64_t a1@<X0>, char ***a2@<X1>, uint64_t a3@<X8>)
{
  v35[16] = *MEMORY[0x1E4F143B8];
  long long v33 = v35;
  long long v34 = xmmword_1CFAC3020;
  char v6 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v7 = 0;
    int v8 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        int v8 = (char *)*a2;
        if (*a2) {
          unint64_t v7 = strlen((const char *)*a2);
        }
        else {
          unint64_t v7 = 0;
        }
        break;
      case 4:
        char v19 = *((unsigned char *)*a2 + 23);
        if (v19 >= 0) {
          int v8 = (char *)*a2;
        }
        else {
          int v8 = **a2;
        }
        if (v19 >= 0) {
          unint64_t v7 = v19 & 0x7F;
        }
        else {
          unint64_t v7 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        int v8 = (char *)*a2;
        unint64_t v7 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v23) = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    uint64_t v30 = &v33;
    int v29 = 0;
    unsigned int v22 = (char *)&unk_1F2646FA8;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    size_t v9 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v22, (uint64_t)*a2, (size_t)a2[1], v6);
    llvm::Twine::printOneChild(v9, (llvm::raw_ostream *)&v22, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    unsigned int v22 = (char *)&unk_1F2646B98;
    if (v29 == 1 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8077774924);
    }
    int v8 = (char *)v33;
    unint64_t v7 = v34;
  }
  unsigned int v22 = (char *)&unk_1F2608CE8;
  unint64_t v23 = a1;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a1 + 40), (uint64_t)&v22, v8, v7, *(void *)(a1 + 48), 1, (uint64_t)&v31);
  if (v32)
  {
    unsigned __int8 v12 = (char *)v31;
    char v31 = 0;
    __int16 v21 = v12;
    uint64_t v13 = llvm::errorToErrorCode(&v21);
    *(unsigned char *)(a3 + 80) |= 1u;
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v14;
    int v15 = v21;
    if (v21) {
LABEL_12:
    }
      (*(void (**)(char *))(*(void *)v15 + 8))(v15);
  }
  else
  {
    uint64_t v10 = v31;
    if (!atomic_load_explicit((atomic_ullong *volatile)v31 + 9, memory_order_acquire))
    {
      if (*((_DWORD *)v10 + 10) == 2) {
        sub_1CC2258E8(&v22, a1, (uint64_t)v10);
      }
      else {
        sub_1CC2259BC(&v22, a1, (uint64_t *)v10);
      }
      if (v22)
      {
        std::string v20 = v22;
        uint64_t v17 = llvm::errorToErrorCode(&v20);
        *(unsigned char *)(a3 + 80) |= 1u;
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v18;
        int v15 = v20;
        if (!v20) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    LOWORD(v26) = 261;
    unsigned int v22 = v8;
    unint64_t v23 = v7;
    v11.n128_f64[0] = llvm::cas::FileSystemCache::DirectoryEntry::getStatus(v10, (const llvm::Twine *)&v22, a3);
  }
LABEL_13:
  if (v32)
  {
    uint64_t v16 = v31;
    char v31 = 0;
    if (v16) {
      (*(void (**)(llvm::cas::FileSystemCache::DirectoryEntry *, __n128))(*(void *)v16 + 8))(v16, v11);
    }
  }
  if (v33 != v35) {
    free(v33);
  }
}

void sub_1CC224B3C(uint64_t a1@<X0>, unsigned char ***a2@<X1>, uint64_t a3@<X8>)
{
  v35[16] = *MEMORY[0x1E4F143B8];
  long long v33 = v35;
  long long v34 = xmmword_1CFAC3020;
  char v6 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v7 = 0;
    int v8 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        int v8 = *a2;
        if (*a2) {
          unint64_t v7 = strlen((const char *)*a2);
        }
        else {
          unint64_t v7 = 0;
        }
        break;
      case 4:
        char v19 = *((unsigned char *)*a2 + 23);
        if (v19 >= 0) {
          int v8 = *a2;
        }
        else {
          int v8 = **a2;
        }
        if (v19 >= 0) {
          unint64_t v7 = v19 & 0x7F;
        }
        else {
          unint64_t v7 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        int v8 = *a2;
        unint64_t v7 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v23) = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    uint64_t v30 = &v33;
    int v29 = 0;
    unsigned int v22 = (char *)&unk_1F2646FA8;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    size_t v9 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v22, (uint64_t)*a2, (size_t)a2[1], v6);
    llvm::Twine::printOneChild(v9, (llvm::raw_ostream *)&v22, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    unsigned int v22 = (char *)&unk_1F2646B98;
    if (v29 == 1 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8077774924);
    }
    int v8 = v33;
    unint64_t v7 = v34;
  }
  unsigned int v22 = (char *)&unk_1F2608CE8;
  uint64_t v23 = a1;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a1 + 40), (uint64_t)&v22, v8, v7, *(void *)(a1 + 48), 1, (uint64_t)&v31);
  if (v32)
  {
    __n128 v11 = (char *)v31;
    uint64_t v31 = 0;
    __int16 v21 = v11;
    uint64_t v12 = llvm::errorToErrorCode(&v21);
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v13;
    uint64_t v14 = v21;
    if (!v21) {
      goto LABEL_17;
    }
LABEL_13:
    (*(void (**)(char *))(*(void *)v14 + 8))(v14);
    goto LABEL_17;
  }
  uint64_t v10 = (uint64_t *)v31;
  if (*(_DWORD *)(v31 + 40) >= 2u)
  {
    *(unsigned char *)(a3 + 16) |= 1u;
    int v15 = std::generic_category();
    *(void *)a3 = 22;
    *(void *)(a3 + 8) = v15;
    goto LABEL_17;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)(v31 + 72), memory_order_acquire)
    || (sub_1CC2259BC(&v22, a1, v10), !v22))
  {
    operator new();
  }
  std::string v20 = v22;
  uint64_t v16 = llvm::errorToErrorCode(&v20);
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v17;
  uint64_t v14 = v20;
  if (v20) {
    goto LABEL_13;
  }
LABEL_17:
  if (v32)
  {
    uint64_t v18 = v31;
    uint64_t v31 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  if (v33 != v35) {
    free(v33);
  }
}

uint64_t sub_1CC224F3C@<X0>(uint64_t a1@<X0>, unsigned char ***a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  v44[16] = *MEMORY[0x1E4F143B8];
  uint64_t v42 = v44;
  long long v43 = xmmword_1CFAC3020;
  char v8 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v10 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)*a2;
        if (*a2) {
          unint64_t v9 = strlen((const char *)*a2);
        }
        else {
          unint64_t v9 = 0;
        }
        break;
      case 4:
        char v27 = *((unsigned char *)*a2 + 23);
        if (v27 >= 0) {
          uint64_t v10 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)*a2;
        }
        else {
          uint64_t v10 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)**a2;
        }
        if (v27 >= 0) {
          unint64_t v9 = v27 & 0x7F;
        }
        else {
          unint64_t v9 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        uint64_t v10 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)*a2;
        unint64_t v9 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    DWORD2(v29) = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    int64_t v36 = &v42;
    int v35 = 0;
    *(void *)&long long v29 = &unk_1F2646FA8;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    __n128 v11 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v29, (uint64_t)*a2, (size_t)a2[1], v8);
    llvm::Twine::printOneChild(v11, (llvm::raw_ostream *)&v29, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    *(void *)&long long v29 = &unk_1F2646B98;
    if (v35 == 1 && v30) {
      MEMORY[0x1D25D9CB0](v30, 0x1000C8077774924);
    }
    uint64_t v10 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)v42;
    unint64_t v9 = v43;
  }
  *(void *)&long long v29 = &unk_1F2608CE8;
  *((void *)&v29 + 1) = a1;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a1 + 40), (uint64_t)&v29, v10, v9, *(void *)(a1 + 48), 1, (uint64_t)&v40);
  if (v41)
  {
    uint64_t v16 = v40;
    uint64_t v40 = 0;
    *(void *)&long long v29 = v16;
    uint64_t v13 = llvm::errorToErrorCode((char **)&v29);
    int v15 = v17;
    char v39 = -1;
    uint64_t v37 = v13;
    char v38 = v17;
  }
  else
  {
    uint64_t v12 = v40;
    if (*(_DWORD *)(v40 + 40) != 3)
    {
      char v39 = -1;
      int v15 = std::generic_category();
      uint64_t v13 = 20;
      uint64_t v37 = 20;
      char v38 = v15;
      goto LABEL_18;
    }
    sub_1CC22417C((uint64_t *)&v29, a1, v40);
    if (!(void)v29)
    {
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v12 + 72), memory_order_acquire);
      *(void *)&long long v29 = a1;
      uint64_t v31 = (char *)off_1EC7DF9F8 + 2;
      char v22 = *(unsigned char *)(a1 + 79);
      int v23 = v22;
      if (v22 >= 0) {
        uint64_t v24 = (void *)(a1 + 56);
      }
      else {
        uint64_t v24 = *(void **)(a1 + 56);
      }
      size_t v25 = v22 & 0x7F;
      if (v23 >= 0) {
        size_t v26 = v25;
      }
      else {
        size_t v26 = *(void *)(a1 + 64);
      }
      llvm::cas::FileSystemCache::getCachedVFSDirIter(v20, explicit, &v29, v24, v26, v10, (llvm::cas::FileSystemCache::VFSDirIterImpl *)v9);
    }
    uint64_t v28 = (char *)v29;
    *(void *)&long long v29 = 0;
    uint64_t v13 = llvm::errorToErrorCode(&v28);
    int v15 = v14;
    char v39 = -1;
    uint64_t v37 = v13;
    char v38 = v14;
    if (v28) {
      (*(void (**)(char *))(*(void *)v28 + 8))(v28);
    }
  }
  if ((void)v29) {
    (*(void (**)(void))(*(void *)v29 + 8))(v29);
  }
LABEL_18:
  if (v41)
  {
    uint64_t v18 = v40;
    uint64_t v40 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  if (v42 != v44) {
    free(v42);
  }
  *a3 = v13;
  a3[1] = (uint64_t)v15;
  *a4 = 0;
  a4[1] = 0;
  return sub_1CC226014((uint64_t)&v37);
}

unint64_t sub_1CC225340(uint64_t a1, uint64_t a2)
{
  v28[16] = *MEMORY[0x1E4F143B8];
  size_t v26 = v28;
  long long v27 = xmmword_1CFAC3020;
  uint64_t v4 = a1 + 56;
  char v5 = *(unsigned char *)(a1 + 79);
  int v6 = v5;
  if (v5 >= 0) {
    unint64_t v7 = (unsigned char *)(a1 + 56);
  }
  else {
    unint64_t v7 = *(unsigned char **)(a1 + 56);
  }
  uint64_t v8 = v5 & 0x7F;
  if (v6 >= 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 64);
  }
  uint64_t v10 = llvm::cas::FileSystemCache::canonicalizeWorkingDirectory(a2, v7, v9, (uint64_t)&v26);
  size_t v12 = v11;
  *(void *)&long long v21 = &unk_1F2608CE8;
  *((void *)&v21 + 1) = a1;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a1 + 40), (uint64_t)&v21, v10, v11, *(void *)(a1 + 48), 1, (uint64_t)&v24);
  if ((v25 & 1) == 0)
  {
    if (!v10)
    {
      long long v21 = 0uLL;
      unint64_t v22 = 0;
LABEL_21:
      if (*(char *)(a1 + 79) < 0) {
        operator delete(*(void **)v4);
      }
      *(_OWORD *)uint64_t v4 = v21;
      *(void *)(v4 + 16) = v22;
      *(void *)(a1 + 48) = v24;
      std::system_category();
      unsigned int v15 = 0;
      LODWORD(v16) = 0;
      goto LABEL_24;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v12 >= 0x17)
    {
      uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v17 = v12 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v13 = (long long *)operator new(v17 + 1);
      *((void *)&v21 + 1) = v12;
      unint64_t v22 = v18 | 0x8000000000000000;
      *(void *)&long long v21 = v13;
    }
    else
    {
      HIBYTE(v22) = v12;
      uint64_t v13 = &v21;
      if (!v12) {
        goto LABEL_20;
      }
    }
    memmove(v13, v10, v12);
LABEL_20:
    *((unsigned char *)v13 + v12) = 0;
    goto LABEL_21;
  }
  int v23 = v24;
  uint64_t v24 = 0;
  unint64_t v14 = llvm::errorToErrorCode(&v23);
  unsigned int v15 = v14;
  unint64_t v16 = HIDWORD(v14);
  if (v23) {
    (*(void (**)(char *))(*(void *)v23 + 8))(v23);
  }
LABEL_24:
  if (v25)
  {
    char v19 = v24;
    uint64_t v24 = 0;
    if (v19) {
      (*(void (**)(char *))(*(void *)v19 + 8))(v19);
    }
  }
  if (v26 != v28) {
    free(v26);
  }
  return v15 | ((unint64_t)v16 << 32);
}

char *sub_1CC225598@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 24) &= ~1u;
  if (result[79] < 0) {
    return (char *)sub_1CB8BDF7C(a2, *((const void **)result + 7), *((void *)result + 8));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 56);
  *(void *)(a2 + 16) = *((void *)result + 9);
  return result;
}

void sub_1CC2255D0(uint64_t a1@<X0>, unsigned char ***a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v26[16] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = v26;
  long long v25 = xmmword_1CFAC3020;
  char v8 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v10 = *a2;
        if (*a2) {
          unint64_t v9 = strlen((const char *)*a2);
        }
        else {
          unint64_t v9 = 0;
        }
        break;
      case 4:
        char v12 = *((unsigned char *)*a2 + 23);
        if (v12 >= 0) {
          uint64_t v10 = *a2;
        }
        else {
          uint64_t v10 = **a2;
        }
        if (v12 >= 0) {
          unint64_t v9 = v12 & 0x7F;
        }
        else {
          unint64_t v9 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        uint64_t v10 = *a2;
        unint64_t v9 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v14) = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    long long v21 = &v24;
    int v20 = 0;
    uint64_t v13 = &unk_1F2646FA8;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v11 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v13, (uint64_t)*a2, (size_t)a2[1], v8);
    llvm::Twine::printOneChild(v11, (llvm::raw_ostream *)&v13, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    uint64_t v13 = &unk_1F2646B98;
    if (v20 == 1 && v15) {
      MEMORY[0x1D25D9CB0](v15, 0x1000C8077774924);
    }
    uint64_t v10 = v24;
    unint64_t v9 = v25;
  }
  uint64_t v13 = &unk_1F2608CE8;
  uint64_t v14 = a1;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a1 + 40), (uint64_t)&v13, v10, v9, *(void *)(a1 + 48), a3, (uint64_t)&v22);
  *(unsigned char *)(a4 + 8) = *(unsigned char *)(a4 + 8) & 0xFE | v23 & 1;
  *(void *)a4 = v22;
  if (v24 != v26) {
    free(v24);
  }
}

void sub_1CC225808()
{
}

void sub_1CC2258E8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  llvm::cas::ObjectStore::getProxy(*(void *)(a2 + 16), *(void *)(a3 + 80), (uint64_t)v10);
  if (v11)
  {
    uint64_t v6 = v10[0];
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 40);
    char v8 = (const std::string::value_type *)(*(uint64_t (**)(void, void, void))(*(void *)v10[0] + 88))(v10[0], v10[2], 0);
    llvm::cas::FileSystemCache::finishLazySymlink(v7, a3, v8, v9);
    uint64_t v6 = 0;
  }
  *a1 = v6;
}

void sub_1CC2259BC(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  llvm::cas::ObjectStore::getProxy(*(void *)(a2 + 16), a3[10], (uint64_t)v9);
  if (v10)
  {
    uint64_t v6 = v9[0];
  }
  else
  {
    uint64_t v7 = *(llvm::cas::FileSystemCache **)(a2 + 40);
    (*(void (**)(void, void, void))(*(void *)v9[0] + 88))(v9[0], v9[2], 0);
    llvm::cas::FileSystemCache::finishLazyFile(v7, (llvm::cas::FileSystemCache::DirectoryEntry *)a3, v8);
    uint64_t v6 = 0;
  }
  *a1 = v6;
}

void sub_1CC225A90()
{
}

void sub_1CC225AA4(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire)
                                     + 64));
  if (v6) {
    goto LABEL_6;
  }
  sub_1CC22417C(&v12, *(void *)(a1 + 8), a2);
  uint64_t v10 = v12;
  if (v12)
  {
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v10;
    return;
  }
  uint64_t v11 = sub_1CC225B7C(atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire), a3, a4);
  if (!v11)
  {
LABEL_6:
    *(void *)&v13.__val_ = std::generic_category();
    llvm::errorCodeToError((llvm *)2, v13, (void *)a5);
    *(unsigned char *)(a5 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = v11;
  }
}

void sub_1CC225B6C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_1CC225B7C(uint64_t a1, const void *a2, const void *a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v7 = 0;
  int v4 = sub_1CD500D24((uint64_t *)(a1 + 72), v6, &v7);
  uint64_t result = 0;
  if (v4)
  {
    if (v7 != (uint64_t *)(*(void *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 88))) {
      return *v7;
    }
  }
  return result;
}

uint64_t sub_1CC225BE4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2608D28;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CC225C34(uint64_t a1)
{
  *(void *)a1 = &unk_1F2608D28;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CC225CA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(llvm::cas::FileSystemCache::DirectoryEntry **)(a1 + 40);
  __int16 v5 = 260;
  v4[0] = a1 + 16;
  return llvm::cas::FileSystemCache::DirectoryEntry::getStatus(v2, (const llvm::Twine *)v4, a2);
}

char *sub_1CC225CE0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 24) &= ~1u;
  if (result[39] < 0) {
    return (char *)sub_1CB8BDF7C(a2, *((const void **)result + 2), *((void *)result + 3));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(void *)(a2 + 16) = *((void *)result + 4);
  return result;
}

void sub_1CC225D18(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  Proxy = (llvm::raw_ostream *)llvm::cas::ObjectStore::getProxy(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 40) + 80), (uint64_t)v26);
  if (v27)
  {
    std::error_code v13 = (char *)v26[0];
    uint64_t v6 = llvm::errorToErrorCode(&v13);
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v7;
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    char v23 = v25;
    long long v24 = xmmword_1CD96DBF0;
    char v8 = *((unsigned char *)a2 + 32);
    if (*((unsigned char *)a2 + 33) == 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      switch(*((unsigned char *)a2 + 32))
      {
        case 1:
          break;
        case 3:
          uint64_t v10 = *a2;
          if (*a2) {
            uint64_t v9 = strlen((const char *)*a2);
          }
          else {
            uint64_t v9 = 0;
          }
          break;
        case 4:
          char v12 = *((unsigned char *)*a2 + 23);
          if (v12 >= 0) {
            uint64_t v10 = *a2;
          }
          else {
            uint64_t v10 = **a2;
          }
          if (v12 >= 0) {
            uint64_t v9 = v12 & 0x7F;
          }
          else {
            uint64_t v9 = (uint64_t)(*a2)[1];
          }
          break;
        case 5:
          uint64_t v10 = *a2;
          uint64_t v9 = (uint64_t)a2[1];
          break;
        default:
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      int v15 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      uint64_t v22 = &v23;
      int v21 = 0;
      uint64_t v14 = &unk_1F2646FA8;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v11 = llvm::Twine::printOneChild(Proxy, (llvm::raw_ostream *)&v14, (uint64_t)*a2, (size_t)a2[1], v8);
      llvm::Twine::printOneChild(v11, (llvm::raw_ostream *)&v14, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
      uint64_t v14 = &unk_1F2646B98;
      if (v21 == 1 && v16) {
        MEMORY[0x1D25D9CB0](v16, 0x1000C8077774924);
      }
      uint64_t v10 = v23;
      uint64_t v9 = v24;
    }
    llvm::cas::ObjectProxy::getMemoryBuffer(v26, (uint64_t)v10, v9, 1, (void *)a3);
    *(unsigned char *)(a3 + 16) &= ~1u;
    if (v23 != v25) {
      free(v23);
    }
  }
}

__n128 sub_1CC225F80@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = *(__n128 **)(a1 + 40);
  a2[1].n128_u8[0] &= ~1u;
  __n128 result = v2[5];
  *a2 = result;
  return result;
}

uint64_t sub_1CC225F9C()
{
  return 0;
}

void sub_1CC225FBC(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  v5[0] = &unk_1F2608CE8;
  v5[1] = v4;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(v4 + 40), (uint64_t)v5, a2, a3, *(void *)(v4 + 48), 1, a4);
}

uint64_t sub_1CC226014(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

uint64_t llvm::cas::SchemaPool::getSchemaForRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = 8 * v2;
  while (!(*(unsigned int (**)(void, uint64_t))(*(void *)*v4 + 40))(*v4, a2))
  {
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return *v4;
}

void *sub_1CC226110()
{
  return &llvm::cas::NodeSchema::ID;
}

BOOL sub_1CC22611C(uint64_t a1, void *a2)
{
  return a2 == &llvm::cas::NodeSchema::ID || a2 == &llvm::RTTIRoot::ID;
}

uint64_t llvm::cas::CASOutputBackend::CASOutputBackend(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2608DC0;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x100000000;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  sub_1CC202928(a1 + 72, a2);
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2608DC0;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x100000000;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  sub_1CC202928(a1 + 72, a2);
  return a1;
}

double llvm::cas::CASOutputBackend::CASOutputBackend(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2608DC0;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)&double result = 0x100000000;
  *(void *)(a1 + 24) = 0x100000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a2;
  return result;
}

void sub_1CC226254(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  (*(void (**)(__n128 *__return_ptr))(**(void **)(*a1 + 64) + 8))(&__dst);
  unint64_t v8 = __dst.n128_u64[0];
  if (__dst.n128_u8[8]) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = __dst.n128_u64[0];
  }
  if (__dst.n128_u8[8])
  {
    *a4 = __dst.n128_u64[0];
    if (v8) {
      return;
    }
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v10 = v7 + 16;
  if (a3 >= 0x17)
  {
    uint64_t v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v12 = a3 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (__n128 *)operator new(v12 + 1);
    __dst.n128_u64[1] = a3;
    unint64_t v15 = v13 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
  }
  else
  {
    HIBYTE(v15) = a3;
    p_dst = &__dst;
    if (!a3) {
      goto LABEL_14;
    }
  }
  memmove(p_dst, a2, a3);
LABEL_14:
  p_dst->n128_u8[a3] = 0;
  unint64_t v16 = v9;
  sub_1CD501148(v10, &__dst);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__dst.n128_u64[0]);
  }
  *a4 = 0;
}

uint64_t sub_1CC2263B4(uint64_t a1)
{
  sub_1CD501310((llvm *)(a1 + 144));
  *(void *)(a1 + 72) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (v4) {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8077774924);
    }
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56)) {
    free(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC226450(uint64_t a1)
{
  sub_1CD501310((llvm *)(a1 + 144));
  *(void *)(a1 + 72) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8077774924);
    }
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56)) {
    free(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC22650C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v1 = a1 + 8;
  uint64_t v2 = v3;
  uint64_t v4 = (void *)(v1 + 136);
  char v5 = *(unsigned char *)(v1 + 23);
  uint64_t v6 = *(void *)(v1 + 160);
  if ((v6 & 2) == 0) {
    uint64_t v4 = (void *)*v4;
  }
  if (v5 >= 0) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v2;
  }
  if (v5 >= 0) {
    uint64_t v8 = v5 & 0x7F;
  }
  else {
    uint64_t v8 = *(void *)(v1 + 8);
  }
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(v6 & 0xFFFFFFFFFFFFFFF8))(v4, v7, v8, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_1CC226550(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CC226558(uint64_t a1)
{
  return a1 + 72;
}

void *sub_1CC226560(void *a1)
{
  *a1 = &unk_1F2608E48;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *a1 = &unk_1F2645A20;
  uint64_t v3 = (atomic_uint *)a1[2];
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1CC226644(void *a1)
{
  *a1 = &unk_1F2608E48;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *a1 = &unk_1F2645A20;
  uint64_t v3 = (atomic_uint *)a1[2];
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC226748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  double result = (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 16) + 24))(v6);
  if ((v7 & 1) == 0) {
    operator new();
  }
  uint64_t v4 = v6[0];
  uint64_t v5 = v6[1];
  *(unsigned char *)(a2 + 16) |= 1u;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1CC22684C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1CC2268E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2269A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t sub_1CC2269CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

char *sub_1CC2269F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double result = (char *)(*(void *(**)(long long *__return_ptr))(**(void **)(a1 + 24) + 40))(&v18);
  if ((v19 & 1) != 0 || BYTE8(v18))
  {
    char v6 = *(unsigned char *)(a2 + 16);
    if (v19)
    {
      *(unsigned char *)(a2 + 16) = v6 | 1;
      uint64_t v7 = *((void *)&v18 + 1);
      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v7;
    }
    else
    {
      *(unsigned char *)(a2 + 16) = v6 & 0xFE;
      *(_OWORD *)a2 = v18;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v13 = "<contents>";
    __int16 v15 = 259;
    double result = (char *)(*(void *(**)(void *__return_ptr))(*(void *)v5 + 32))(v16);
    if (v17)
    {
      uint64_t v8 = v16[0];
      uint64_t v9 = v16[1];
      *(unsigned char *)(a2 + 16) |= 1u;
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v9;
    }
    else
    {
      double result = (char *)(*(void *(**)(char **__return_ptr))(**(void **)(a1 + 8) + 8))(&v13);
      if (v14)
      {
        uint64_t v12 = v13;
        uint64_t v13 = 0;
        uint64_t v10 = llvm::errorToErrorCode(&v12);
        *(unsigned char *)(a2 + 16) |= 1u;
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        double result = v12;
        if (v12) {
          double result = (char *)(*(uint64_t (**)(char *))(*(void *)v12 + 8))(v12);
        }
      }
      else
      {
        *(unsigned char *)(a2 + 16) &= ~1u;
        *(void *)a2 = v13;
        *(unsigned char *)(a2 + 8) = 1;
      }
      if (v14)
      {
        double result = v13;
        uint64_t v13 = 0;
        if (result) {
          double result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
        }
      }
      if ((v17 & 1) == 0)
      {
        double result = (char *)v16[0];
        v16[0] = 0;
        if (result) {
          return (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC226C50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

void sub_1CC226C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  uint64_t v6 = 0;
  *a4 = 0;
  uint64_t v4 = &v6;
  sub_1CC226D9C(&v5, &v4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  operator new();
}

uint64_t sub_1CC226D9C(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  sub_1CD501718((uint64_t)&v3, a2, &v4);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

__n128 llvm::cas::CachingOnDiskFileSystem::CachingOnDiskFileSystem(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2608F20;
  *(void *)(a1 + 16) = *a2;
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t llvm::cas::CachingOnDiskFileSystem::CachingOnDiskFileSystem(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 0;
  *(void *)__n128 result = &unk_1F2608F20;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a2;
  return result;
}

void llvm::cas::createCachingOnDiskFileSystem()
{
}

void sub_1CC226F48()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC227118(uint64_t a1)
{
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v2 = *(atomic_uint **)(a1 + 232);
  if (v2 && atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
  {
    uint64_t v3 = sub_1CD500614((uint64_t)v2);
    MEMORY[0x1D25D9CE0](v3, 0x10B2C40A65E917ELL);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 168));
  sub_1CD501BD8((char **)(a1 + 104));
  uint64_t v4 = *(char **)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = 24 * v5;
    uint64_t v7 = v4 - 24;
    do
    {
      MEMORY[0x1D25D9CD0](*(void *)&v7[v6], 8);
      v6 -= 24;
    }
    while (v6);
    uint64_t v4 = *(char **)(a1 + 40);
  }
  if (v4 != (char *)(a1 + 56)) {
    free(v4);
  }

  sub_1CD501B40((llvm::vfs::FileSystem *)a1);
}

void sub_1CC2271E4(uint64_t a1)
{
  sub_1CC227118(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC22721C(uint64_t a1@<X0>, unsigned char ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  char v6 = 0;
  sub_1CC2286D0(a1, a2, (uint64_t)v3, a3);
  if (v6)
  {
    if (v4 != &v5) {
      free(v4);
    }
  }
}

void sub_1CC22729C(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  v19[16] = *MEMORY[0x1E4F143B8];
  char v17 = v19;
  long long v18 = xmmword_1CFAC3020;
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v7 = *a2;
        if (*a2) {
          unint64_t v6 = strlen(*a2);
        }
        else {
          unint64_t v6 = 0;
        }
        break;
      case 4:
        char v12 = (*a2)[23];
        if (v12 >= 0) {
          uint64_t v7 = *a2;
        }
        else {
          uint64_t v7 = *(char **)*a2;
        }
        if (v12 >= 0) {
          unint64_t v6 = v12 & 0x7F;
        }
        else {
          unint64_t v6 = *((void *)*a2 + 1);
        }
        break;
      case 5:
        uint64_t v7 = *a2;
        unint64_t v6 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v17);
    uint64_t v7 = (char *)v17;
    unint64_t v6 = v18;
  }
  sub_1CC229794((uint64_t)&v15, a1, v7, v6, 1, 1, 1, a3, 0, v13);
  if (v16)
  {
    char v14 = (char *)v15;
    uint64_t v15 = 0;
    uint64_t v8 = llvm::errorToErrorCode(&v14);
    *(unsigned char *)(a4 + 16) |= 1u;
    *(void *)a4 = v8;
    *(void *)(a4 + 8) = v9;
    if (v14) {
      (*(void (**)(char *))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    if (*(_DWORD *)(v15 + 40) < 2u) {
      operator new();
    }
    *(unsigned char *)(a4 + 16) |= 1u;
    uint64_t v10 = std::generic_category();
    *(void *)a4 = 22;
    *(void *)(a4 + 8) = v10;
  }
  if (v16)
  {
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (v17 != v19) {
    free(v17);
  }
}

uint64_t sub_1CC227598@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X7>, uint64_t *a5@<X8>)
{
  v78[16] = *MEMORY[0x1E4F143B8];
  BOOL v76 = (char *)v78;
  long long v77 = xmmword_1CFAC3020;
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v9 = *a2;
        if (*a2) {
          unint64_t v8 = strlen(*a2);
        }
        else {
          unint64_t v8 = 0;
        }
        break;
      case 4:
        char v32 = (*a2)[23];
        if (v32 >= 0) {
          uint64_t v9 = *a2;
        }
        else {
          uint64_t v9 = *(char **)*a2;
        }
        if (v32 >= 0) {
          unint64_t v8 = v32 & 0x7F;
        }
        else {
          unint64_t v8 = *((void *)*a2 + 1);
        }
        break;
      case 5:
        uint64_t v9 = *a2;
        unint64_t v8 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v76);
    uint64_t v9 = v76;
    unint64_t v8 = v77;
  }
  sub_1CC229794((uint64_t)&v74, a1, v9, v8, 1, 1, 1, a4, 0, v54);
  if (v75)
  {
    char v14 = (char *)v74;
    uint64_t v74 = 0;
    uint64_t v57 = v14;
    uint64_t v13 = llvm::errorToErrorCode(&v57);
    char v12 = v15;
    char v11 = -1;
    char v68 = -1;
    unint64_t v66 = v13;
    unsigned int v67 = v15;
    if (v57) {
      (*(void (**)(char *))(*(void *)v57 + 8))(v57);
    }
  }
  else
  {
    uint64_t v10 = (void *)v74;
    if (*(_DWORD *)(v74 + 40) == 3)
    {
      LODWORD(v64) = 0;
      std::string::size_type v65 = std::system_category();
      std::string::size_type v71 = (char *)&v73;
      uint64_t v72 = 0x200000000;
      long long v18 = (char *)*v10;
      char v19 = (std::__shared_weak_count *)v10[1];
      LOWORD(v61) = 261;
      uint64_t v57 = v18;
      char v58 = v19;
      sub_1CD501E54((uint64_t)&v69, (void **)&v57, &v64, 1);
      uint64_t v57 = 0;
      char v58 = 0;
      LOBYTE(v59) = 1;
      if (!v64)
      {
        do
        {
          if (sub_1CC22AEBC((uint64_t *)&v69, (uint64_t *)&v57)) {
            break;
          }
          sub_1CD501D2C((uint64_t)&v71, (long long *)(v69 + 8));
          unint64_t v64 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)v69);
          std::string::size_type v65 = v20;
        }
        while (!v64);
        int v21 = v58;
        if (v58)
        {
          if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      uint64_t v22 = (std::__shared_weak_count *)*((void *)&v69 + 1);
      if (*((void *)&v69 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      if (v64)
      {
        uint64_t v13 = v64;
        char v12 = v65;
        char v11 = v68 | 1;
        v68 |= 1u;
        unint64_t v66 = v64;
        unsigned int v67 = v65;
      }
      else
      {
        uint64_t v56 = a3;
        uint64_t explicit = (std::mutex *)atomic_load_explicit(v10 + 9, memory_order_acquire);
        sub_1CD5020B0(&v69, explicit);
        long long v24 = v71;
        long long v25 = v71;
        if (v72)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 24 * v72;
          uint64_t v55 = &v71[v27];
          while (1)
          {
            long long v25 = &v24[v26];
            char v28 = v24[v26 + 23];
            BOOL v29 = v28 < 0;
            uint64_t v30 = *(char **)&v24[v26];
            if (v28 >= 0) {
              uint64_t v30 = &v24[v26];
            }
            uint64_t v31 = (std::__shared_weak_count *)(v28 & 0x7F);
            if (v29) {
              uint64_t v31 = *(std::__shared_weak_count **)&v24[v26 + 8];
            }
            uint64_t v59 = 0;
            unsigned int v60 = 0;
            uint64_t v57 = v30;
            char v58 = v31;
            unint64_t v61 = v31;
            int v62 = 0;
            llvm::sys::path::reverse_iterator::operator++((uint64_t)&v57);
            if (sub_1CC225B7C((uint64_t)explicit, v59, v60)) {
              break;
            }
            v26 += 24;
            if (v27 == v26)
            {
              long long v25 = v55;
              goto LABEL_59;
            }
          }
          if (v27 - 24 != v26)
          {
            uint64_t v33 = v27 - v26 - 24;
            uint64_t v34 = v25 + 24;
            do
            {
              char v35 = v34[23];
              BOOL v36 = v35 < 0;
              uint64_t v37 = *(char **)v34;
              if (v35 >= 0) {
                uint64_t v37 = v34;
              }
              char v38 = (std::__shared_weak_count *)(v35 & 0x7F);
              if (v36) {
                char v38 = (std::__shared_weak_count *)*((void *)v34 + 1);
              }
              uint64_t v59 = 0;
              unsigned int v60 = 0;
              uint64_t v57 = v37;
              char v58 = v38;
              unint64_t v61 = v38;
              int v62 = 0;
              llvm::sys::path::reverse_iterator::operator++((uint64_t)&v57);
              if (!sub_1CC225B7C((uint64_t)explicit, v59, v60))
              {
                if (v25[23] < 0) {
                  operator delete(*(void **)v25);
                }
                long long v39 = *(_OWORD *)v34;
                *((void *)v25 + 2) = *((void *)v34 + 2);
                *(_OWORD *)long long v25 = v39;
                v25 += 24;
                v34[23] = 0;
                *uint64_t v34 = 0;
              }
              v34 += 24;
              v33 -= 24;
            }
            while (v33);
          }
        }
LABEL_59:
        sub_1CD501DB8((uint64_t *)&v71, (uint64_t)v25, (long long *)&v71[24 * v72]);
        if ((void)v69) {
          atomic_fetch_add((atomic_uint *volatile)v69, 0xFFFFFFFF);
        }
        if (!v72)
        {
LABEL_72:
          uint64_t v47 = *(void *)(a1 + 232);
          *(void *)&long long v69 = a1;
          unsigned int v70 = (char *)off_1EC7DFA08 + 2;
          char v48 = *(unsigned char *)(a1 + 271);
          int v49 = v48;
          if (v48 >= 0) {
            unint64_t v50 = (void *)(a1 + 248);
          }
          else {
            unint64_t v50 = *(void **)(a1 + 248);
          }
          size_t v51 = v48 & 0x7F;
          if (v49 >= 0) {
            size_t v52 = v51;
          }
          else {
            size_t v52 = *(void *)(a1 + 256);
          }
          llvm::cas::FileSystemCache::getCachedVFSDirIter(v47, (uint64_t)explicit, &v69, v50, v52, (llvm::cas::FileSystemCache::VFSDirIterImpl *)v9, (llvm::cas::FileSystemCache::VFSDirIterImpl *)v8);
        }
        uint64_t v40 = v71;
        uint64_t v41 = 24 * v72;
        while (1)
        {
          char v42 = v40[23];
          BOOL v43 = v42 < 0;
          char v44 = v42 >= 0 ? v40 : *(char **)v40;
          uint64_t v45 = v42 & 0x7F;
          size_t v46 = v43 ? *((void *)v40 + 1) : v45;
          LOBYTE(v57) = 0;
          char v63 = 0;
          sub_1CC22A498((uint64_t)&v69, a1, (uint64_t)v10, v44, v46, (uint64_t)&v57);
          if (BYTE8(v69))
          {
            if ((void)v69) {
              break;
            }
          }
          v40 += 24;
          v41 -= 24;
          if (!v41) {
            goto LABEL_72;
          }
        }
        uint64_t v13 = llvm::errorToErrorCode((char **)&v69);
        char v12 = v53;
        char v11 = v68 | 1;
        v68 |= 1u;
        unint64_t v66 = v13;
        unsigned int v67 = v53;
        a3 = v56;
        if ((void)v69) {
          (*(void (**)(void))(*(void *)v69 + 8))(v69);
        }
      }
      sub_1CBFCD310(&v71);
    }
    else
    {
      char v11 = -1;
      char v68 = -1;
      char v12 = std::generic_category();
      uint64_t v13 = 20;
      unint64_t v66 = 20;
      unsigned int v67 = v12;
    }
  }
  if (v75)
  {
    uint64_t v16 = v74;
    uint64_t v74 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (v76 != (char *)v78) {
    free(v76);
  }
  if (v11)
  {
    *a3 = v13;
    a3[1] = (uint64_t)v12;
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    *a5 = v13;
    a5[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v12[1], 1uLL, memory_order_relaxed);
    }
  }
  return sub_1CC226014((uint64_t)&v66);
}

unint64_t sub_1CC227C04(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = v35;
  long long v34 = xmmword_1CFAC3020;
  uint64_t v4 = a1 + 248;
  char v5 = *(unsigned char *)(a1 + 271);
  int v6 = v5;
  if (v5 >= 0) {
    uint64_t v7 = (unsigned char *)(a1 + 248);
  }
  else {
    uint64_t v7 = *(unsigned char **)(a1 + 248);
  }
  size_t v8 = v5 & 0x7F;
  if (v6 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(a1 + 256);
  }
  *(_DWORD *)&__dst[8] = 0;
  char v38 = 0;
  uint64_t v39 = 0;
  uint64_t v41 = &v33;
  int v40 = 0;
  *(void *)__n128 __dst = &unk_1F2646FA8;
  *(void *)&__dst[16] = 0;
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v10 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)__dst, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 32));
  llvm::Twine::printOneChild(v10, (llvm::raw_ostream *)__dst, *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned char *)(a2 + 33));
  *(void *)__n128 __dst = &unk_1F2646B98;
  if (v40 == 1 && *(void *)&__dst[16]) {
    MEMORY[0x1D25D9CB0](*(void *)&__dst[16], 0x1000C8077774924);
  }
  if ((void)v34)
  {
    if (*(unsigned char *)v33 != 47)
    {
      *(void *)__n128 __dst = v37;
      *(_OWORD *)&__dst[8] = xmmword_1CFAC3020;
      if (v9 >= 0x81) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v26 = 0;
      if (v9)
      {
        memcpy(v37, v7, v9);
        uint64_t v26 = *(void *)&__dst[8];
        unint64_t v27 = *(void *)&__dst[16];
      }
      else
      {
        unint64_t v27 = 128;
      }
      size_t v28 = v26 + v9;
      *(void *)&__dst[8] = v28;
      if (v28 + 1 > v27) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(unsigned char *)(*(void *)__dst + v28) = 47;
      ++*(void *)&__dst[8];
      sub_1CD502128((uint64_t *)&v33, (uint64_t)v33, *(char **)__dst, (char *)(*(void *)__dst + *(void *)&__dst[8]));
      if (*(void **)__dst != v37) {
        free(*(void **)__dst);
      }
    }
    llvm::sys::path::remove_dots((unsigned __int8 **)&v33, 1, 1u);
    size_t v9 = v34;
    uint64_t v12 = v34;
    if (v34)
    {
      uint64_t v13 = 0;
      BOOL v14 = 0;
      int v15 = 0;
      do
      {
        int v16 = *((unsigned __int8 *)v33 + v13);
        if (v14 && v16 == 47)
        {
          BOOL v14 = 1;
        }
        else
        {
          *((unsigned char *)v33 + v15++) = v16;
          BOOL v14 = v16 == 47;
        }
        ++v13;
      }
      while (v12 != v13);
      size_t v9 = v34;
    }
    else
    {
      int v15 = 0;
    }
    size_t v17 = v15;
    if (v9 != v15)
    {
      if (v9 <= v15)
      {
        if (*((void *)&v34 + 1) < (unint64_t)v15) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v15 != v9) {
          bzero((char *)v33 + v9, v15 - v9);
        }
      }
      *(void *)&long long v34 = v17;
      size_t v9 = v17;
    }
    uint64_t v7 = v33;
    if (v17 > 1 && *((char *)v33 + v17 - 1) == 47)
    {
      size_t v9 = v17 - 1;
      *(void *)&long long v34 = v17 - 1;
    }
  }
  sub_1CC229794((uint64_t)&v31, a1, v7, v9, 1, 1, 1, v11, 0, v29);
  if ((v32 & 1) == 0)
  {
    if (!v7)
    {
      memset(__dst, 0, sizeof(__dst));
LABEL_37:
      if (*(char *)(a1 + 271) < 0) {
        operator delete(*(void **)v4);
      }
      *(_OWORD *)uint64_t v4 = *(_OWORD *)__dst;
      *(void *)(v4 + 16) = *(void *)&__dst[16];
      *(void *)(a1 + 240) = v31;
      std::system_category();
      unsigned int v20 = 0;
      LODWORD(v21) = 0;
      goto LABEL_40;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v9 >= 0x17)
    {
      uint64_t v22 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v22 = v9 | 7;
      }
      uint64_t v23 = v22 + 1;
      long long v18 = operator new(v22 + 1);
      *(void *)&__dst[8] = v9;
      *(void *)&__dst[16] = v23 | 0x8000000000000000;
      *(void *)__n128 __dst = v18;
    }
    else
    {
      __dst[23] = v9;
      long long v18 = __dst;
      if (!v9) {
        goto LABEL_36;
      }
    }
    memmove(v18, v7, v9);
LABEL_36:
    v18[v9] = 0;
    goto LABEL_37;
  }
  uint64_t v30 = v31;
  uint64_t v31 = 0;
  unint64_t v19 = llvm::errorToErrorCode(&v30);
  unsigned int v20 = v19;
  unint64_t v21 = HIDWORD(v19);
  if (v30) {
    (*(void (**)(char *))(*(void *)v30 + 8))(v30);
  }
LABEL_40:
  if (v32)
  {
    long long v24 = v31;
    uint64_t v31 = 0;
    if (v24) {
      (*(void (**)(char *))(*(void *)v24 + 8))(v24);
    }
  }
  if (v33 != v35) {
    free(v33);
  }
  return v20 | ((unint64_t)v21 << 32);
}

char *sub_1CC2280A4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 24) &= ~1u;
  if (result[271] < 0) {
    return (char *)sub_1CB8BDF7C(a2, *((const void **)result + 31), *((void *)result + 32));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 248);
  *(void *)(a2 + 16) = *((void *)result + 33);
  return result;
}

unint64_t sub_1CC2280DC(llvm::raw_ostream *a1, unsigned char ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  sub_1CC22822C(a1, a2, 1, a8, (uint64_t)&v18);
  size_t v9 = v18;
  if ((v19 & 1) == 0 || !v18)
  {
    if (v19) {
      size_t v9 = 0;
    }
    uint64_t v13 = *(const void **)v9;
    size_t v14 = *((void *)v9 + 1);
    size_t v15 = *(void *)(a3 + 8);
    if (v15 == v14)
    {
      if (!v14)
      {
LABEL_10:
        std::system_category();
        unsigned int v11 = 0;
        LODWORD(v12) = 0;
        return v11 | ((unint64_t)v12 << 32);
      }
    }
    else
    {
      if (v15 <= v14)
      {
        if (*(void *)(a3 + 16) < v14) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v14 != v15) {
          bzero((void *)(*(void *)a3 + v15), v14 - v15);
        }
      }
      *(void *)(a3 + 8) = v14;
      if (!v14) {
        goto LABEL_10;
      }
    }
    memmove(*(void **)a3, v13, v14);
    goto LABEL_10;
  }
  size_t v17 = v18;
  unint64_t v10 = llvm::errorToErrorCode(&v17);
  unsigned int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  if (v17) {
    (*(void (**)(char *))(*(void *)v17 + 8))(v17);
  }
  return v11 | ((unint64_t)v12 << 32);
}

void sub_1CC22822C(llvm::raw_ostream *a1@<X0>, unsigned char ***a2@<X1>, int a3@<W2>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  size_t v15 = v17;
  long long v16 = xmmword_1CFAC3020;
  char v9 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        unsigned int v11 = *a2;
        if (*a2) {
          unint64_t v10 = strlen((const char *)*a2);
        }
        else {
          unint64_t v10 = 0;
        }
        break;
      case 4:
        char v13 = *((unsigned char *)*a2 + 23);
        if (v13 >= 0) {
          unsigned int v11 = *a2;
        }
        else {
          unsigned int v11 = **a2;
        }
        if (v13 >= 0) {
          unint64_t v10 = v13 & 0x7F;
        }
        else {
          unint64_t v10 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        unsigned int v11 = *a2;
        unint64_t v10 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    int v19 = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    uint64_t v26 = &v15;
    int v25 = 0;
    long long v18 = &unk_1F2646FA8;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v12 = llvm::Twine::printOneChild(a1, (llvm::raw_ostream *)&v18, (uint64_t)*a2, (size_t)a2[1], v9);
    llvm::Twine::printOneChild(v12, (llvm::raw_ostream *)&v18, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    long long v18 = &unk_1F2646B98;
    if (v25 == 1 && v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8077774924);
    }
    unsigned int v11 = v15;
    unint64_t v10 = v16;
  }
  sub_1CC229794((uint64_t)&v18, (uint64_t)a1, v11, v10, a3, 1, 1, a4, 0, v14);
  *(unsigned char *)(a5 + 8) = *(unsigned char *)(a5 + 8) & 0xFE | v19 & 1;
  *(void *)a5 = v18;
  if (v15 != v17) {
    free(v15);
  }
}

BOOL sub_1CC22844C(llvm::raw_ostream *a1, unsigned char ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  long long v22 = xmmword_1CFAC3020;
  char v10 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v12 = *a2;
        if (*a2) {
          unint64_t v11 = strlen((const char *)*a2);
        }
        else {
          unint64_t v11 = 0;
        }
        break;
      case 4:
        char v18 = *((unsigned char *)*a2 + 23);
        if (v18 >= 0) {
          unint64_t v12 = *a2;
        }
        else {
          unint64_t v12 = **a2;
        }
        if (v18 >= 0) {
          unint64_t v11 = v18 & 0x7F;
        }
        else {
          unint64_t v11 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        unint64_t v12 = *a2;
        unint64_t v11 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    int v25 = 0;
    char v29 = 0;
    uint64_t v30 = 0;
    char v32 = &v21;
    int v31 = 0;
    uint64_t v24 = &unk_1F2646FA8;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    char v13 = llvm::Twine::printOneChild(a1, (llvm::raw_ostream *)&v24, (uint64_t)*a2, (size_t)a2[1], v10);
    llvm::Twine::printOneChild(v13, (llvm::raw_ostream *)&v24, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    uint64_t v24 = &unk_1F2646B98;
    if (v31 == 1 && v26) {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8077774924);
    }
    unint64_t v12 = v21;
    unint64_t v11 = v22;
  }
  sub_1CC229794((uint64_t)&v24, (uint64_t)a1, v12, v11, 1, 1, 0, a8, 0, v19);
  char v14 = v25;
  if (v25)
  {
    size_t v17 = v24;
    uint64_t v24 = 0;
    uint64_t v20 = v17;
    sub_1CD4515D0(&v20);
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
  }
  if (v25)
  {
    size_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
  }
  if (v21 != v23) {
    free(v21);
  }
  return (v14 & 1) == 0;
}

void sub_1CC2286D0(uint64_t a1@<X0>, unsigned char ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  LOBYTE(v38) = 0;
  char v42 = 0;
  size_t v8 = (llvm::raw_ostream *)sub_1CD502270(a3, (uint64_t)&v38);
  if (v42)
  {
    size_t v8 = (llvm::raw_ostream *)v39[0];
    if (v39[0] != &v41) {
      free(v39[0]);
    }
  }
  char v38 = &v40;
  *(_OWORD *)uint64_t v39 = xmmword_1CFAC3020;
  char v10 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v12 = *a2;
        if (*a2) {
          unint64_t v11 = strlen((const char *)*a2);
        }
        else {
          unint64_t v11 = 0;
        }
        break;
      case 4:
        char v21 = *((unsigned char *)*a2 + 23);
        if (v21 >= 0) {
          unint64_t v12 = *a2;
        }
        else {
          unint64_t v12 = **a2;
        }
        if (v21 >= 0) {
          unint64_t v11 = v21 & 0x7F;
        }
        else {
          unint64_t v11 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        unint64_t v12 = *a2;
        unint64_t v11 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    DWORD2(__p) = 0;
    char v31 = 0;
    uint64_t v32 = 0;
    long long v34 = &v38;
    int v33 = 0;
    *(void *)&long long __p = &unk_1F2646FA8;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    char v13 = llvm::Twine::printOneChild(v8, (llvm::raw_ostream *)&__p, (uint64_t)*a2, (size_t)a2[1], v10);
    llvm::Twine::printOneChild(v13, (llvm::raw_ostream *)&__p, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    *(void *)&long long __p = &unk_1F2646B98;
    if (v33 == 1 && v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8077774924);
    }
    unint64_t v12 = v38;
    unint64_t v11 = (unint64_t)v39[0];
  }
  sub_1CC229794((uint64_t)&v36, a1, v12, v11, 1, 1, 1, v9, 0, v22);
  if (v37)
  {
    size_t v17 = (char *)v36;
    BOOL v36 = 0;
    char v23 = v17;
    uint64_t v18 = llvm::errorToErrorCode(&v23);
    *(unsigned char *)(a4 + 80) |= 1u;
    *(void *)a4 = v18;
    *(void *)(a4 + 8) = v19;
    if (v23) {
      (*(void (**)(char *))(*(void *)v23 + 8))(v23);
    }
  }
  else
  {
    char v14 = v36;
    __int16 v26 = 261;
    uint64_t v24 = v12;
    int v25 = (void *)v11;
    v15.n128_f64[0] = llvm::cas::FileSystemCache::DirectoryEntry::getStatus(v36, (const llvm::Twine *)&v24, (uint64_t)&__p);
    if (v35)
    {
      long long v16 = __p;
      *(unsigned char *)(a4 + 80) |= 1u;
      *(_OWORD *)a4 = v16;
    }
    else
    {
      if (*((_DWORD *)v14 + 10) <= 1u)
      {
        (*(void (**)(unsigned char **__return_ptr, double))(**(void **)(a1 + 16) + 16))(&v24, v15.n128_f64[0]);
        sub_1CD502308(a3, &v24);
        if (v25 != &v26) {
          free(v25);
        }
      }
      sub_1CD502374((std::error_category *)a4, &__p);
      if ((v35 & 1) == 0 && SHIBYTE(v28) < 0) {
        operator delete((void *)__p);
      }
    }
  }
  if (v37)
  {
    uint64_t v20 = v36;
    BOOL v36 = 0;
    if (v20) {
      (*(void (**)(llvm::cas::FileSystemCache::DirectoryEntry *, __n128))(*(void *)v20 + 8))(v20, v15);
    }
  }
  if (v38 != &v40) {
    free(v38);
  }
}

void sub_1CC228A6C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 52);
  if (v3 >= v4)
  {
    if (v4 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    if (((2 * v4) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v9 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v9 = (2 * v4) | 1;
    }
    char v10 = (char *)malloc_type_malloc(24 * v9, 0x4065EBACuLL);
    if (!v10) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    char v5 = v10;
    uint64_t v11 = *(unsigned int *)(a1 + 48);
    unint64_t v12 = &v10[24 * v11];
    *(void *)unint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((_DWORD *)v12 + 4) = 0;
    char v13 = *(char **)(a1 + 40);
    if (v11)
    {
      char v14 = &v13[24 * v11];
      __n128 v15 = v5;
      do
      {
        *(void *)__n128 v15 = 0;
        *((void *)v15 + 1) = 0;
        *((_DWORD *)v15 + 4) = 0;
        *(void *)__n128 v15 = *(void *)v13;
        *(void *)char v13 = 0;
        *((_DWORD *)v15 + 2) = *((_DWORD *)v13 + 2);
        *((_DWORD *)v13 + 2) = 0;
        int v16 = *((_DWORD *)v15 + 3);
        *((_DWORD *)v15 + 3) = *((_DWORD *)v13 + 3);
        *((_DWORD *)v13 + 3) = v16;
        int v17 = *((_DWORD *)v15 + 4);
        *((_DWORD *)v15 + 4) = *((_DWORD *)v13 + 4);
        *((_DWORD *)v13 + 4) = v17;
        v13 += 24;
        v15 += 24;
      }
      while (v13 != v14);
      char v13 = *(char **)(a1 + 40);
      uint64_t v18 = *(unsigned int *)(a1 + 48);
      if (v18)
      {
        uint64_t v19 = 24 * v18;
        uint64_t v20 = v13 - 24;
        do
        {
          MEMORY[0x1D25D9CD0](*(void *)&v20[v19], 8);
          v19 -= 24;
        }
        while (v19);
        char v13 = *(char **)(a1 + 40);
      }
    }
    if (v13 != (char *)(a1 + 56)) {
      free(v13);
    }
    *(void *)(a1 + 40) = v5;
    *(_DWORD *)(a1 + 52) = v9;
    unsigned int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    char v5 = *(char **)(a1 + 40);
    int v6 = &v5[24 * v3];
    *(void *)int v6 = 0;
    *((void *)v6 + 1) = 0;
    *((_DWORD *)v6 + 4) = 0;
  }
  unsigned int v7 = v3 + 1;
  *(_DWORD *)(a1 + 48) = v7;
  size_t v8 = &v5[24 * v7];
  if (*((_DWORD *)v8 - 2) <= 0xFFu) {
    sub_1CC22A9D8((uint64_t)(v8 - 24), 256);
  }
  sub_1CD502408(a1 + 104);

  std::mutex::unlock(v2);
}

unint64_t sub_1CC228C20(uint64_t a1, unsigned char ***a2)
{
  v30[16] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = v30;
  long long v29 = xmmword_1CFAC3020;
  char v4 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v5 = 0;
    int v6 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        int v6 = *a2;
        if (*a2) {
          unint64_t v5 = strlen((const char *)*a2);
        }
        else {
          unint64_t v5 = 0;
        }
        break;
      case 4:
        char v13 = *((unsigned char *)*a2 + 23);
        if (v13 >= 0) {
          int v6 = *a2;
        }
        else {
          int v6 = **a2;
        }
        if (v13 >= 0) {
          unint64_t v5 = v13 & 0x7F;
        }
        else {
          unint64_t v5 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        int v6 = *a2;
        unint64_t v5 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v17) = 0;
    LOBYTE(v21) = 0;
    uint64_t v23 = 0;
    int v25 = &v28;
    int v24 = 0;
    int v16 = &unk_1F2646FA8;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unsigned int v7 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v16, (uint64_t)*a2, (size_t)a2[1], v4);
    llvm::Twine::printOneChild(v7, (llvm::raw_ostream *)&v16, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    int v16 = &unk_1F2646B98;
    if (v24 == 1 && v18) {
      MEMORY[0x1D25D9CB0](v18, 0x1000C8077774924);
    }
    int v6 = v28;
    unint64_t v5 = v29;
  }
  __n128 v15 = 0;
  int v16 = &unk_1F2609140;
  uint64_t v17 = a1;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  __int16 v21 = 256;
  char v22 = 0;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a1 + 232), (uint64_t)&v16, v6, v5, *(void *)(a1 + 240), 1, (uint64_t)&v26);
  if ((v27 & 1) == 0)
  {
    __n128 v15 = v26;
LABEL_13:
    std::mutex::lock((std::mutex *)(a1 + 168));
    unsigned int v11 = *(_DWORD *)(a1 + 112);
    if (v11) {
      sub_1CD4C96F8((uint64_t)&v16, *(void *)(a1 + 104) + 24 * v11 - 24, (uint64_t *)&v15);
    }
    std::system_category();
    std::mutex::unlock((std::mutex *)(a1 + 168));
    unsigned int v9 = 0;
    LODWORD(v10) = 0;
    goto LABEL_16;
  }
  if (!v26) {
    goto LABEL_13;
  }
  char v14 = v26;
  unint64_t v8 = llvm::errorToErrorCode(&v14);
  unsigned int v9 = v8;
  unint64_t v10 = HIDWORD(v8);
  if (v14) {
    (*(void (**)(char *))(*(void *)v14 + 8))(v14);
  }
LABEL_16:
  if (v28 != v30) {
    free(v28);
  }
  return v9 | ((unint64_t)v10 << 32);
}

uint64_t sub_1CC228EFC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  uint64_t v8 = *(void *)(a1 + 40) + 24 * *(unsigned int *)(a1 + 48);
  uint64_t v9 = *(void *)(v8 - 24);
  *(void *)(v8 - 24) = 0;
  int v10 = *(_DWORD *)(v8 - 16);
  *(void *)(v8 - 16) = 0;
  uint64_t v11 = *(unsigned int *)(v8 - 8);
  *(_DWORD *)(v8 - 8) = 0;
  LODWORD(v8) = *(_DWORD *)(a1 + 48) - 1;
  *(_DWORD *)(a1 + 48) = v8;
  MEMORY[0x1D25D9CD0](*(void *)(*(void *)(a1 + 40) + 24 * v8), 8);
  MEMORY[0x1D25D9CD0](0, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v12 = *(void *)(a1 + 104) + 24 * *(unsigned int *)(a1 + 112);
  uint64_t v13 = *(void *)(v12 - 24);
  *(void *)(v12 - 24) = 0;
  int v33 = *(_DWORD *)(v12 - 16);
  *(void *)(v12 - 16) = 0;
  uint64_t v14 = *(unsigned int *)(v12 - 8);
  *(_DWORD *)(v12 - 8) = 0;
  LODWORD(v12) = *(_DWORD *)(a1 + 112) - 1;
  *(_DWORD *)(a1 + 112) = v12;
  MEMORY[0x1D25D9CD0](*(void *)(*(void *)(a1 + 104) + 24 * v12), 8);
  MEMORY[0x1D25D9CD0](0, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  std::mutex::unlock(v7);
  llvm::cas::TreeSchema::TreeSchema((llvm::cas::TreeSchema *)v34, *(llvm::cas::ObjectStore **)(a1 + 16));
  if (v10)
  {
    uint64_t v30 = a3;
    *(void *)&long long v38 = &v39;
    *((void *)&v38 + 1) = 0x800000000;
    v41[0] = (char *)&v42;
    v41[1] = 0;
    uint64_t v16 = v9;
    uint64_t v31 = v9;
    if (v11)
    {
      uint64_t v17 = 16 * v11;
      uint64_t v16 = v9;
      while ((*(void *)v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v16 += 16;
        v17 -= 16;
        if (!v17) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v18 = v9 + 16 * v11;
    if (v16 != v18)
    {
      uint64_t v20 = *(void *)v16;
LABEL_14:
      char v21 = *(unsigned char *)(v16 + 8);
      if (v33)
      {
        uint64_t v22 = v20;
        do
        {
          uint64_t v35 = 0;
          if (sub_1CD4C9788(v13, v14, v22, &v35) && v35 != v13 + 8 * v14) {
            goto LABEL_35;
          }
          uint64_t v22 = *(void *)(v22 + 32);
        }
        while (v22);
      }
      if (a2)
      {
        uint64_t v23 = a2(v30, v20);
        uint64_t v24 = v25;
      }
      else
      {
        uint64_t v23 = *(void *)v20;
        uint64_t v24 = *(void *)(v20 + 8);
      }
      unsigned int v26 = *(_DWORD *)(v20 + 40);
      if (v26 == 3)
      {
        __int16 v37 = 261;
        uint64_t v35 = v23;
        uint64_t v36 = v24;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v27 = *(void *)(v20 + 80);
        if (v26 <= 1 && (v21 & 1) == 0)
        {
          if (!*(unsigned char *)(a1 + 280))
          {
            uint64_t v29 = v23;
            (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 8))(&v35);
            if (v36)
            {
              uint64_t v23 = v29;
              if (v35) {
                llvm::report_fatal_error(&v35);
              }
            }
            else
            {
              if (!*(unsigned char *)(a1 + 280)) {
                *(unsigned char *)(a1 + 280) = 1;
              }
              *(void *)(a1 + 272) = v35;
              uint64_t v23 = v29;
            }
          }
          uint64_t v27 = *(void *)(a1 + 272);
          unsigned int v26 = *(_DWORD *)(v20 + 40);
        }
        __int16 v37 = 261;
        uint64_t v35 = v23;
        uint64_t v36 = v24;
        uint64_t v28 = 1;
      }
      llvm::cas::HierarchicalTreeBuilder::pushImpl((uint64_t)&v38, v27, v28, v26, (uint64_t)&v35);
LABEL_35:
      while (1)
      {
        v16 += 16;
        if (v16 == v18) {
          break;
        }
        uint64_t v20 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v16 != v18) {
            goto LABEL_14;
          }
          break;
        }
      }
    }
LABEL_11:
    llvm::cas::HierarchicalTreeBuilder::create((llvm::cas::HierarchicalTreeBuilder *)&v38, *(llvm::cas::ObjectStore **)(a1 + 16), a4);
    sub_1CD4F486C(v41);
    sub_1CD4F486C((char **)&v38);
    uint64_t v9 = v31;
  }
  else
  {
    llvm::cas::TreeProxy::create((llvm::cas::TreeProxy::Builder *)v34, 0, 0, (uint64_t)&v38);
    char v15 = v40;
    *(unsigned char *)(a4 + 24) = *(unsigned char *)(a4 + 24) & 0xFE | v40 & 1;
    if (v15)
    {
      *(void *)a4 = v38;
    }
    else
    {
      *(_OWORD *)a4 = v38;
      *(void *)(a4 + 16) = v39;
    }
  }
  MEMORY[0x1D25D9CD0](v13, 8);
  return MEMORY[0x1D25D9CD0](v9, 8);
}

void sub_1CC2292DC()
{
}

void sub_1CC229430()
{
}

void sub_1CC2294D8()
{
}

const char *sub_1CC229614(void **a1, uint64_t a2)
{
  char v4 = *((unsigned char *)a1 + 32);
  if (*((unsigned char *)a1 + 33) == 1)
  {
    unint64_t v5 = 0;
    switch(*((unsigned char *)a1 + 32))
    {
      case 1:
        return v5;
      case 3:
        unint64_t v5 = (const char *)*a1;
        if (*a1) {
          strlen((const char *)*a1);
        }
        break;
      case 4:
        if (*((char *)*a1 + 23) >= 0) {
          unint64_t v5 = (const char *)*a1;
        }
        else {
          unint64_t v5 = (const char *)**a1;
        }
        break;
      case 5:
        unint64_t v5 = (const char *)*a1;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    int v9 = 0;
    char v13 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = a2;
    int v15 = 0;
    uint64_t v8 = &unk_1F2646FA8;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unsigned int v7 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v8, (uint64_t)*a1, (size_t)a1[1], v4);
    llvm::Twine::printOneChild(v7, (llvm::raw_ostream *)&v8, (uint64_t)a1[2], (size_t)a1[3], *((unsigned char *)a1 + 33));
    uint64_t v8 = &unk_1F2646B98;
    if (v15 == 1 && v10) {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8077774924);
    }
    return *(const char **)a2;
  }
  return v5;
}

void sub_1CC229794(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, int a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v15 = (std::mutex *)(a2 + 168);
  std::mutex::lock((std::mutex *)(a2 + 168));
  int v16 = *(_DWORD *)(a2 + 48);
  std::mutex::unlock(v15);
  v19[0] = &unk_1F2609140;
  v19[1] = a2;
  v19[2] = a9;
  v19[3] = a10;
  v19[4] = 0;
  BOOL v20 = v16 != 0;
  char v21 = a6;
  char v22 = 0;
  llvm::cas::FileSystemCache::lookupPath(*(void *)(a2 + 232), (uint64_t)v19, a3, a4, *(void *)(a2 + 240), a5, a1);
  if (v16 && (*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if (*(void *)a1) {
      sub_1CC229884(a2, *(void *)a1, a7);
    }
  }
}

void sub_1CC229884(uint64_t a1, uint64_t a2, char a3)
{
  int v6 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 40) + 24 * v7;
    uint64_t v9 = *(void *)(v8 - 24);
    uint64_t v15 = 0;
    int v10 = sub_1CBB0BF40(v9, *(_DWORD *)(v8 - 8), a2, &v15);
    uint64_t v11 = v15;
    if (v10)
    {
      char v12 = *(unsigned char *)(v15 + 8);
LABEL_9:
      *(unsigned char *)(v11 + 8) = v12 | a3;
      goto LABEL_10;
    }
    uint64_t v16 = v15;
    int v13 = *(_DWORD *)(v8 - 16);
    unsigned int v14 = *(_DWORD *)(v8 - 8);
    if (4 * v13 + 4 >= 3 * v14)
    {
      v14 *= 2;
    }
    else if (v14 + ~v13 - *(_DWORD *)(v8 - 12) > v14 >> 3)
    {
LABEL_6:
      *(_DWORD *)(v8 - 16) = v13 + 1;
      if (*(void *)v11 != -4096) {
        --*(_DWORD *)(v8 - 12);
      }
      *(void *)uint64_t v11 = a2;
      char v12 = *(unsigned char *)(v11 + 8) & 0xFE;
      *(unsigned char *)(v11 + 8) = v12;
      goto LABEL_9;
    }
    sub_1CC22A9D8(v8 - 24, v14);
    sub_1CBB0BF40(*(void *)(v8 - 24), *(_DWORD *)(v8 - 8), a2, &v16);
    int v13 = *(_DWORD *)(v8 - 16);
    uint64_t v11 = v16;
    goto LABEL_6;
  }
LABEL_10:

  std::mutex::unlock(v6);
}

void sub_1CC2299C4()
{
}

void sub_1CC2299D8(uint64_t a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  v40[32] = *MEMORY[0x1E4F143B8];
  v34[0] = a3;
  v34[1] = a4;
  if (!*(unsigned char *)(a1 + 41))
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = 0;
    return;
  }
  size_t v6 = (size_t)a4;
  unsigned int v7 = a3;
  uint64_t v11 = *a2;
  size_t v10 = (size_t)a2[1];
  *(void *)uint64_t v39 = v40;
  *(_OWORD *)&v39[8] = xmmword_1CD96DBF0;
  if (v10 >= 0x101) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v12 = 0;
  if (v10)
  {
    memcpy(*(void **)v39, v11, v10);
    uint64_t v12 = *(void *)&v39[8];
  }
  *(void *)&v39[8] = v12 + v10;
  *(_WORD *)&v29[32] = 261;
  *(void *)uint64_t v29 = v7;
  *(void *)&v29[8] = v6;
  *(_WORD *)&v35[32] = 257;
  __int16 v33 = 257;
  __int16 v31 = 257;
  llvm::sys::path::append(v39, 0, (const char **)v29, (void **)v35, (uint64_t)v32, (uint64_t)v30);
  memset(v29, 0, 44);
  *(void *)&v29[44] = 0xFFFFLL;
  *(_WORD *)&v29[52] = 0;
  *(void *)&v29[56] = 0;
  *(_WORD *)&v35[32] = 261;
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v39;
  int v13 = (llvm *)llvm::sys::fs::status((llvm::sys::fs *)v35, (const llvm::Twine *)v29, 0);
  if (v13)
  {
    llvm::errorCodeToError(v13, v14, &v28);
    *(unsigned char *)(a5 + 8) |= 1u;
    uint64_t v15 = v28;
  }
  else
  {
    uint64_t v16 = *(const void ***)(a1 + 32);
    if (v16)
    {
      while (1)
      {
        uint64_t v17 = v16;
        uint64_t v16 = (const void **)v16[4];
        if (!v16) {
          break;
        }
        if (v16 == a2)
        {
LABEL_20:
          uint64_t v18 = (unsigned __int8 *)v17[2];
          unint64_t v19 = (unint64_t)v17[3];
          if (v6 == v19)
          {
            if (!v6 || !memcmp(v7, v17[2], v6))
            {
              *(unsigned char *)(a5 + 8) &= ~1u;
              *(void *)a5 = v17;
              goto LABEL_8;
            }
            if (llvm::StringRef::compare_insensitive(v34, v18, v19))
            {
LABEL_26:
              while (((char)*v7 & 0x80000000) == 0)
              {
                ++v7;
                if (!--v6) {
                  goto LABEL_28;
                }
              }
            }
            memset(v35, 0, sizeof(v35));
            uint64_t v36 = 0xFFFFLL;
            __int16 v37 = 0;
            uint64_t v38 = 0;
            char v21 = *v17;
            char v22 = v17[1];
            __int16 v33 = 261;
            v32[0] = v21;
            v32[1] = v22;
            uint64_t v23 = (llvm *)llvm::sys::fs::status((llvm::sys::fs *)v32, (const llvm::Twine *)v35, 0);
            if (v23)
            {
              llvm::errorCodeToError(v23, v24, &v27);
              *(unsigned char *)(a5 + 8) |= 1u;
              uint64_t v15 = v27;
              goto LABEL_7;
            }
            if (*(_DWORD *)&v29[48] == HIDWORD(v36) && *(void *)&v29[56] == v38)
            {
              sub_1CC22A350(a5, *(void *)(a1 + 8), (uint64_t)a2, *(unsigned char **)v39, *(size_t *)&v39[8], v18, v19);
              goto LABEL_8;
            }
          }
          else if (v6)
          {
            goto LABEL_26;
          }
          goto LABEL_28;
        }
      }
    }
    sub_1CC229E44((uint64_t)v35, *(void *)(a1 + 8), (unint64_t)a2, (uint64_t)v7, v6);
    uint64_t v15 = *(const void ***)v35;
    if ((v35[8] & 1) == 0)
    {
      if (*(void *)v35)
      {
        while (1)
        {
          uint64_t v17 = v15;
          uint64_t v15 = (const void **)v15[4];
          if (!v15) {
            break;
          }
          if (v15 == a2) {
            goto LABEL_20;
          }
        }
      }
LABEL_28:
      uint64_t v20 = *(void *)(a1 + 8);
      v25[0] = *(_OWORD *)v29;
      v25[1] = *(_OWORD *)&v29[16];
      v25[2] = *(_OWORD *)&v29[32];
      uint64_t v25[3] = *(_OWORD *)&v29[48];
      char v26 = 1;
      sub_1CC22A498(a5, v20, (uint64_t)a2, *(unsigned char **)v39, *(size_t *)&v39[8], (uint64_t)v25);
      goto LABEL_8;
    }
    *(unsigned char *)(a5 + 8) |= 1u;
  }
LABEL_7:
  *(void *)a5 = v15;
LABEL_8:
  if (*(void **)v39 != v40) {
    free(*(void **)v39);
  }
}

void sub_1CC229D2C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CC229D34(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 41) && !*(unsigned char *)(a1 + 42))
  {
    *(unsigned char *)(a1 + 42) = 1;
    sub_1CC229E44((uint64_t)&v8, *(void *)(a1 + 8), a2, a3, a4);
    uint64_t v7 = v8;
    if ((v9 & 1) == 0)
    {
      *(void *)(a1 + 32) = v8;
      uint64_t v7 = 0;
    }
    *a5 = v7;
  }
  else
  {
    *a5 = 0;
  }
}

void sub_1CC229DDC(uint64_t a1, uint64_t a2)
{
  char v4 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v4) {
    v4(*(void *)(a1 + 24), a2);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    sub_1CC229884(v5, a2, 1);
  }
}

void sub_1CC229E44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  __s2 = v63;
  uint64_t v11 = *(const void **)a3;
  size_t v10 = *(void *)(a3 + 8);
  long long v62 = xmmword_1CD96DBF0;
  if (v10 >= 0x101) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v12 = 0;
  if (v10)
  {
    memcpy(__s2, v11, v10);
    uint64_t v12 = v62;
  }
  *(void *)&long long v62 = v12 + v10;
  LOWORD(v58[8]) = 261;
  *(void *)char v58 = a4;
  *(void *)&v58[2] = a5;
  LOWORD(v64.st_atimespec.tv_sec) = 257;
  *(_WORD *)&v47[32] = 257;
  v52.n128_u16[0] = 257;
  llvm::sys::path::append(&__s2, 0, (const char **)v58, &v64, (uint64_t)v47, (uint64_t)&v50);
  memset(v58, 0, 44);
  *(void *)&v58[11] = 0xFFFFLL;
  __int16 v59 = 0;
  uint64_t v60 = 0;
  LOWORD(v64.st_atimespec.tv_sec) = 261;
  *(void *)&v64.st_dev = __s2;
  v64.st_ino = v62;
  uint64_t v13 = llvm::sys::fs::status((llvm::sys::fs *)&v64, (const llvm::Twine *)v58, (llvm::sys::fs::file_status *)1);
  if (v13)
  {
    uint64_t v15 = &v55;
    uint64_t v16 = &v55;
LABEL_12:
    llvm::errorCodeToError((llvm *)v13, v14, v16);
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = *(void *)v15;
    goto LABEL_13;
  }
  if (v58[10] <= 1u)
  {
    *(void *)&v14.__val_ = std::generic_category();
    uint64_t v15 = &v54;
    uint64_t v16 = &v54;
    uint64_t v13 = 2;
    goto LABEL_12;
  }
  *(void *)char v58 = &v58[6];
  *(_OWORD *)&v58[2] = xmmword_1CD96DBF0;
  LOWORD(v64.st_atimespec.tv_sec) = 261;
  *(void *)&v64.st_dev = __s2;
  v64.st_ino = v62;
  llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)&v64, 0, v58, (uint64_t)&v56);
  if (v57)
  {
    char v22 = v56;
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v22;
    goto LABEL_62;
  }
  uint64_t v18 = *(unsigned char **)v58;
  unint64_t v19 = *(void *)&v58[2];
  v50.n128_u64[0] = *(void *)(*(void *)(a2 + 232) + 528);
  v50.n128_u64[1] = *(void *)v58;
  v51.n128_u64[0] = *(void *)&v58[2];
  if (*(void *)&v58[2] && (uint64_t v20 = memchr(*(void **)v58, 47, *(size_t *)&v58[2])) != 0) {
    unint64_t v21 = v20 - v18;
  }
  else {
    unint64_t v21 = -1;
  }
  if (v19 >= v21) {
    unint64_t v23 = v21;
  }
  else {
    unint64_t v23 = v19;
  }
  v51.n128_u64[1] = (unint64_t)v18;
  v52.n128_u64[0] = v23;
  std::error_code v24 = &v18[v23];
  unint64_t v25 = v19 - v23;
  BOOL v26 = v21 == -1;
  if (v21 == -1) {
    unint64_t v27 = 0;
  }
  else {
    unint64_t v27 = v25;
  }
  if (v26) {
    uint64_t v28 = "";
  }
  else {
    uint64_t v28 = v24;
  }
  v52.n128_u64[1] = (unint64_t)v28;
  unint64_t v53 = v27;
  if ((unint64_t)v62 >= (uint64_t)v62 - a5) {
    size_t v29 = v62 - a5;
  }
  else {
    size_t v29 = v62;
  }
  if (v19 >= v29 && (!v29 || !memcmp(v18, __s2, v29)))
  {
    if (v19 >= v29) {
      size_t v31 = v29;
    }
    else {
      size_t v31 = v19;
    }
    unint64_t v30 = v19 - v31;
    unint64_t v32 = (unint64_t)&v18[v31];
    if (v19 > v29 && (__int16 v33 = memchr(&v18[v31], 47, v19 - v31)) != 0) {
      unint64_t v34 = (unint64_t)v33 - v32;
    }
    else {
      unint64_t v34 = -1;
    }
    if (v30 >= v34) {
      unint64_t v35 = v34;
    }
    else {
      unint64_t v35 = v30;
    }
    uint64_t v36 = (const char *)(v32 + v35);
    v50.n128_u64[0] = a3;
    v50.n128_u64[1] = v32;
    BOOL v37 = v34 == -1;
    if (v34 == -1) {
      unint64_t v38 = 0;
    }
    else {
      unint64_t v38 = v30 - v35;
    }
    if (v37) {
      uint64_t v36 = "";
    }
    v51.n128_u64[0] = v30;
    v51.n128_u64[1] = v32;
    v52.n128_u64[0] = v35;
    v52.n128_u64[1] = (unint64_t)v36;
    unint64_t v53 = v38;
  }
  else
  {
    v48[0] = v50;
    v48[1] = v51;
    v48[2] = v52;
    unint64_t v49 = v53;
    llvm::cas::FileSystemCache::lookupRealPathPrefixFromCached(v48, 0, v17, &v50);
    unint64_t v30 = v51.n128_u64[0];
  }
  if (v30)
  {
    while (v53)
    {
      if (*(void *)&v58[2] >= v51.n128_u64[1] + v52.n128_u64[0] - *(void *)v58) {
        size_t v39 = v51.n128_u64[1] + v52.n128_u64[0] - *(void *)v58;
      }
      else {
        size_t v39 = *(void *)&v58[2];
      }
      unint64_t Directory = llvm::cas::FileSystemCache::makeDirectory(*(void *)(a2 + 232), v50.n128_i64[0], *(unsigned char **)v58, v39, 0, 0);
      if (*(_DWORD *)(Directory + 40) != 3) {
        goto LABEL_60;
      }
      sub_1CD501C44(&v50, Directory);
    }
    memset(v47, 0, 44);
    *(void *)&v47[44] = 0xFFFFLL;
    *(_WORD *)&v47[52] = 0;
    *(void *)&v47[56] = 0;
    uint64_t v42 = v56;
    int v43 = fstat((int)v56, &v64);
    if (sub_1CD0E6A50(v43, &v64.st_dev, (uint64_t)v47))
    {
LABEL_60:
      *(unsigned char *)(a1 + 8) &= ~1u;
      *(void *)a1 = 0;
      goto LABEL_61;
    }
    if (*(_DWORD *)&v47[40] == 3)
    {
      unint64_t v44 = llvm::cas::FileSystemCache::makeDirectory(*(void *)(a2 + 232), v50.n128_i64[0], *(unsigned char **)v58, *(size_t *)&v58[2], 0, 0);
      *(unsigned char *)(a1 + 8) &= ~1u;
      *(void *)a1 = v44;
      goto LABEL_61;
    }
    v46[0] = *(_OWORD *)v47;
    v46[1] = *(_OWORD *)&v47[16];
    v46[2] = *(_OWORD *)&v47[32];
    v46[3] = *(_OWORD *)&v47[48];
    sub_1CC22A79C((uint64_t)&v64, a2, v50.n128_i64[0], *(unsigned char **)v58, *(size_t *)&v58[2], v42, v46);
    if (v64.st_ino)
    {
      uint64_t v45 = *(void **)&v64.st_dev;
      sub_1CD4515D0(&v45);
      if (v45) {
        (*(void (**)(void *))(*v45 + 8))(v45);
      }
      unint64_t v41 = 0;
      *(unsigned char *)(a1 + 8) &= ~1u;
    }
    else
    {
      *(unsigned char *)(a1 + 8) &= ~1u;
      unint64_t v41 = *(void *)&v64.st_dev;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    unint64_t v41 = v50.n128_u64[0];
  }
  *(void *)a1 = v41;
LABEL_61:
  llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)v56);
LABEL_62:
  if (*(_DWORD **)v58 != &v58[6]) {
    free(*(void **)v58);
  }
LABEL_13:
  if (__s2 != v63) {
    free(__s2);
  }
}

void *sub_1CC22A350(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, size_t a5, const void *a6, size_t a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  __n128 result = (*(void *(**)(void **__return_ptr))(**(void **)(a2 + 16) + 8))(&v17);
  if (v18)
  {
    uint64_t v16 = (uint64_t)v17;
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v16;
  }
  else
  {
    __n128 result = (void *)llvm::cas::FileSystemCache::makeSymlink(*(void *)(a2 + 232), a3, a4, a5, (uint64_t)v17, a6, a7);
    *(unsigned char *)(a1 + 8) &= ~1u;
    char v15 = v18;
    *(void *)a1 = result;
    if (v15)
    {
      __n128 result = v17;
      uint64_t v17 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void sub_1CC22A498(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, size_t a5, uint64_t a6)
{
  v38[16] = *MEMORY[0x1E4F143B8];
  memset(v26, 0, 44);
  *(void *)&v26[44] = 0xFFFFLL;
  *(_WORD *)&v26[52] = 0;
  *(void *)&v26[56] = 0;
  if (*(unsigned char *)(a6 + 64))
  {
    long long v11 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)BOOL v26 = *(_OWORD *)a6;
    *(_OWORD *)&v26[16] = v11;
    long long v12 = *(_OWORD *)(a6 + 48);
    *(_OWORD *)&v26[32] = *(_OWORD *)(a6 + 32);
    *(_OWORD *)&v26[48] = v12;
  }
  else
  {
    __int16 v35 = 261;
    *(void *)__src = a4;
    size_t v34 = a5;
    std::error_code v14 = (llvm *)llvm::sys::fs::status((llvm::sys::fs *)__src, (const llvm::Twine *)v26, 0);
    if (v14)
    {
      llvm::errorCodeToError(v14, v15, &v25);
      *(unsigned char *)(a1 + 8) |= 1u;
      uint64_t v16 = v25;
      goto LABEL_8;
    }
  }
  if (*(_DWORD *)&v26[40] != 4)
  {
    if (*(_DWORD *)&v26[40] == 3)
    {
      unint64_t Directory = llvm::cas::FileSystemCache::makeDirectory(*(void *)(a2 + 232), a3, a4, a5, 0, 0);
      *(unsigned char *)(a1 + 8) &= ~1u;
      *(void *)a1 = Directory;
      return;
    }
    __int16 v35 = 261;
    *(void *)__src = a4;
    size_t v34 = a5;
    llvm::sys::fs::openNativeFile((unsigned __int8 *)__src, 2, 1, 0, 438, (uint64_t)&v36);
    if ((v37 & 1) == 0)
    {
      unint64_t v23 = (llvm::sys::Process *)v36;
      v24[0] = *(_OWORD *)v26;
      v24[1] = *(_OWORD *)&v26[16];
      v24[2] = *(_OWORD *)&v26[32];
      v24[3] = *(_OWORD *)&v26[48];
      sub_1CC22A79C(a1, a2, a3, a4, a5, v36, v24);
      llvm::sys::Process::SafelyCloseFileDescriptor(v23);
      return;
    }
    uint64_t v16 = v36;
    *(unsigned char *)(a1 + 8) |= 1u;
LABEL_8:
    *(void *)a1 = v16;
    return;
  }
  unint64_t v30 = v32;
  long long v31 = xmmword_1CFAC3020;
  __int16 v28 = 261;
  v27[0] = a4;
  v27[1] = a5;
  uint64_t v36 = v38;
  long long v37 = xmmword_1CFAC3020;
  uint64_t v17 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v27, &v36);
  bzero(__src, 0x400uLL);
  ssize_t v18 = readlink(v17, __src, 0x400uLL);
  if (v18 == -1)
  {
    uint64_t v19 = (llvm *)*__error();
    *(void *)&v39.__val_ = std::generic_category();
    llvm::errorCodeToError(v19, v39, &v29);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = (int)v18;
    *(void *)&long long v31 = 0;
    if (*((void *)&v31 + 1) < (unint64_t)(int)v18) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v18 << 32)
    {
      memcpy(v30, __src, (int)v18);
      uint64_t v20 = v31;
    }
    *(void *)&long long v31 = v20 + v21;
    uint64_t v29 = 0;
  }
  if (v36 != v38) {
    free(v36);
  }
  uint64_t v22 = v29;
  if (v29)
  {
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v22;
  }
  else
  {
    sub_1CC22A350(a1, a2, a3, a4, a5, v30, v31);
  }
  if (v30 != v32) {
    free(v30);
  }
}

void *sub_1CC22A79C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, size_t a5, uint64_t a6, long long *a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a2 + 16);
  long long v14 = a7[1];
  long long v24 = *a7;
  long long v25 = v14;
  long long v15 = a7[3];
  long long v26 = a7[2];
  long long v27 = v15;
  char v28 = 1;
  __n128 result = (*(void *(**)(void **__return_ptr))(*(void *)v13 + 96))(&v22);
  if (v23)
  {
    uint64_t v17 = (uint64_t)v22;
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v17;
  }
  else
  {
    llvm::cas::ObjectStore::getProxy(*(void *)(a2 + 16), (uint64_t)v22, (uint64_t)&v24);
    if (BYTE8(v25))
    {
      __n128 result = (void *)v24;
      char v21 = *(unsigned char *)(a1 + 8) | 1;
    }
    else
    {
      uint64_t v18 = *(void *)(a2 + 232);
      uint64_t v19 = (uint64_t)v22;
      (*(void (**)(void, void, void))(*(void *)v24 + 88))(v24, v25, 0);
      __n128 result = (void *)llvm::cas::FileSystemCache::makeFile(v18, a3, a4, a5, v19, v20, (*((_DWORD *)a7 + 11) >> 6) & 1);
      char v21 = *(unsigned char *)(a1 + 8) & 0xFE;
    }
    *(unsigned char *)(a1 + 8) = v21;
    *(void *)a1 = result;
    if (v23)
    {
      __n128 result = v22;
      uint64_t v22 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *sub_1CC22A954(void *result, unsigned char *__src, unsigned char *a3)
{
  unsigned int v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[1];
  if (result[2] < (unint64_t)(v5 + a3 - __src)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (__src != a3)
  {
    __n128 result = memcpy((void *)(*result + v5), __src, v4);
    uint64_t v5 = v3[1];
  }
  v3[1] = v5 + v4;
  return result;
}

void *sub_1CC22A9D8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *__n128 result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (unsigned char *)(v4 + 8);
      do
      {
        uint64_t v14 = *((void *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          long long v15 = v18;
          *uint64_t v18 = v14;
          *((unsigned char *)v15 + 8) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *__n128 result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CC22AB28(uint64_t a1)
{
  *(void *)a1 = &unk_1F2609180;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_1CC22AB78(uint64_t a1)
{
  *(void *)a1 = &unk_1F2609180;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CC22ABE8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(llvm::cas::FileSystemCache::DirectoryEntry **)(a1 + 16);
  __int16 v5 = 260;
  v4[0] = a1 + 24;
  return llvm::cas::FileSystemCache::DirectoryEntry::getStatus(v2, (const llvm::Twine *)v4, a2);
}

char *sub_1CC22AC24@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 24) &= ~1u;
  if (result[47] < 0) {
    return (char *)sub_1CB8BDF7C(a2, *((const void **)result + 3), *((void *)result + 4));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = *((void *)result + 5);
  return result;
}

void sub_1CC22AC5C(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  llvm::cas::ObjectStore::getProxy(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 16) + 80), (uint64_t)v14);
  if (v15)
  {
    uint64_t v10 = (char *)v14[0];
    uint64_t v5 = llvm::errorToErrorCode(&v10);
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v6;
    if (v10) {
      (*(void (**)(char *))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    uint64_t v11 = v13;
    long long v12 = xmmword_1CD96DBF0;
    if (*((unsigned char *)a2 + 33) == 1)
    {
      uint64_t v7 = 0;
      unsigned int v8 = 0;
      switch(*((unsigned char *)a2 + 32))
      {
        case 1:
          break;
        case 3:
          unsigned int v8 = *a2;
          if (*a2) {
            uint64_t v7 = strlen((const char *)*a2);
          }
          else {
            uint64_t v7 = 0;
          }
          break;
        case 4:
          char v9 = *((unsigned char *)*a2 + 23);
          if (v9 >= 0) {
            unsigned int v8 = *a2;
          }
          else {
            unsigned int v8 = **a2;
          }
          if (v9 >= 0) {
            uint64_t v7 = v9 & 0x7F;
          }
          else {
            uint64_t v7 = (uint64_t)(*a2)[1];
          }
          break;
        case 5:
          unsigned int v8 = *a2;
          uint64_t v7 = (uint64_t)a2[1];
          break;
        default:
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v11);
      unsigned int v8 = v11;
      uint64_t v7 = v12;
    }
    llvm::cas::ObjectProxy::getMemoryBuffer(v14, (uint64_t)v8, v7, 1, (void *)a3);
    *(unsigned char *)(a3 + 16) &= ~1u;
    if (v11 != v13) {
      free(v11);
    }
  }
}

__n128 sub_1CC22AE2C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *(__n128 **)(a1 + 16);
  a2[1].n128_u8[0] &= ~1u;
  __n128 result = v2[5];
  *a2 = result;
  return result;
}

uint64_t sub_1CC22AE48()
{
  return 0;
}

void sub_1CC22AE68(uint64_t a1)
{
  llvm::sys::fs::detail::directory_iterator_destruct(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1CC22AEBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2) {
    return 1;
  }
  if (!v3)
  {
    long long __s2 = 0u;
    long long v19 = 0u;
    DWORD2(v19) = 9;
    BYTE12(v19) = 1;
    long long v20 = 0u;
    memset(v21, 0, sizeof(v21));
    int v22 = 0xFFFF;
    char v4 = *(unsigned char *)(v2 + 31);
    size_t v5 = *(void *)(v2 + 16);
    if (v4 >= 0) {
      uint64_t v6 = v4 & 0x7F;
    }
    else {
      uint64_t v6 = *(void *)(v2 + 16);
    }
    if (v6) {
      return 0;
    }
    unsigned int v8 = (const void **)(v2 + 8);
    if (v4 < 0) {
      return memcmp(*v8, &__s2, v5) == 0;
    }
    if ((v4 & 0x7F) != 0)
    {
      uint64_t v9 = (v4 & 0x7F) - 1;
      p_s2 = (unsigned __int8 *)&__s2;
      do
      {
        int v12 = *(unsigned __int8 *)v8;
        unsigned int v8 = (const void **)((char *)v8 + 1);
        int v11 = v12;
        int v14 = *p_s2++;
        int v13 = v14;
        BOOL v16 = v9-- != 0;
        uint64_t result = v11 == v13;
      }
      while (v11 == v13 && v16);
      return result;
    }
    return 1;
  }
  if (v2)
  {
    return sub_1CBAD746C((unsigned __int8 *)(v2 + 8), (unsigned __int8 *)(v3 + 8));
  }
  else
  {
    long long __s2 = 0u;
    long long v19 = 0u;
    DWORD2(v19) = 9;
    BYTE12(v19) = 1;
    long long v20 = 0u;
    memset(v21, 0, sizeof(v21));
    int v22 = 0xFFFF;
    BOOL v17 = sub_1CBAD746C((unsigned __int8 *)(v3 + 8), (unsigned __int8 *)&__s2);
    if (SBYTE7(v19) < 0) {
      operator delete((void *)__s2);
    }
    return v17;
  }
}

long long *sub_1CC22B004(long long *a1, long long *a2, uint64_t a3)
{
  char v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      long long v6 = *v4;
      *(void *)(a3 + 16) = *((void *)v4 + 2);
      *(_OWORD *)a3 = v6;
      a3 += 24;
      *((unsigned char *)v4 + 23) = 0;
      *(unsigned char *)char v4 = 0;
      char v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1CC22B078(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  sub_1CC229794(a5, *a1, a2, a3, 1, 1, 1, a4, 0, v5);
}

void sub_1CC22B0B8(char *a1@<X0>, char ***a2@<X1>, uint64_t a3@<X7>, void *a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *((void *)a1 + 55) = 0;
  char v7 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v9 = (char *)*a2;
        if (*a2) {
          unint64_t v8 = strlen((const char *)*a2);
        }
        else {
          unint64_t v8 = 0;
        }
        break;
      case 4:
        char v26 = *((unsigned char *)*a2 + 23);
        if (v26 >= 0) {
          uint64_t v9 = (char *)*a2;
        }
        else {
          uint64_t v9 = **a2;
        }
        if (v26 >= 0) {
          unint64_t v8 = v26 & 0x7F;
        }
        else {
          unint64_t v8 = (unint64_t)(*a2)[1];
        }
        break;
      case 5:
        uint64_t v9 = (char *)*a2;
        unint64_t v8 = (unint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    LODWORD(v37) = 0;
    char v39 = 0;
    uint64_t v40 = 0;
    uint64_t v42 = a1 + 432;
    int v41 = 0;
    uint64_t v36 = &unk_1F2646FA8;
    memset(v38, 0, sizeof(v38));
    uint64_t v10 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v36, (uint64_t)*a2, (size_t)a2[1], v7);
    llvm::Twine::printOneChild(v10, (llvm::raw_ostream *)&v36, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    uint64_t v36 = &unk_1F2646B98;
    if (v41 == 1 && v38[0]) {
      MEMORY[0x1D25D9CB0](v38[0], 0x1000C8077774924);
    }
    uint64_t v9 = (char *)*((void *)a1 + 54);
    unint64_t v8 = *((void *)a1 + 55);
  }
  uint64_t v36 = v38;
  uint64_t v37 = 0x600000000;
  uint64_t v11 = *((void *)a1 + 53);
  uint64_t v29 = &v36;
  sub_1CC229794((uint64_t)&v31, v11, v9, v8, 0, 0, 1, a3, (uint64_t)sub_1CC22B68C, (uint64_t)&v29);
  int v12 = v31;
  if ((v32 & 1) == 0)
  {
    sub_1CC22B5E0((uint64_t)a1, (uint64_t)v31);
    if (v37)
    {
      int v13 = (uint64_t **)v36;
      uint64_t v14 = 8 * v37;
      do
      {
        char v15 = *v13;
        if (*((_DWORD *)*v13 + 10) == 2)
        {
          uint64_t v29 = (void **)*v13;
          sub_1CD4C96F8((uint64_t)&v31, (uint64_t)(a1 + 648), (uint64_t *)&v29);
          if ((_BYTE)v33) {
            sub_1CC22B6EC((uint64_t)(a1 + 8), v15);
          }
        }
        else
        {
          BOOL v16 = (void *)*v15;
          uint64_t v17 = v15[1];
          LOWORD(v35[0]) = 261;
          long long v31 = v16;
          uint64_t v32 = v17;
          llvm::cas::HierarchicalTreeBuilder::pushImpl((uint64_t)(a1 + 8), 0, 0, 3, (uint64_t)&v31);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    for (unsigned int i = *((_DWORD *)a1 + 148); i; unsigned int i = *((_DWORD *)a1 + 148))
    {
      uint64_t v19 = *(void *)(*((void *)a1 + 73) + 8 * i - 8);
      *((_DWORD *)a1 + 148) = i - 1;
      if (*(_DWORD *)(v19 + 40) == 2)
      {
        uint64_t v20 = *((void *)a1 + 53);
        char v21 = *(unsigned char **)v19;
        unint64_t v22 = *(void *)(v19 + 8);
        char v28 = a1;
        long long v31 = &unk_1F2609140;
        uint64_t v32 = v20;
        __int16 v33 = sub_1CC22B734;
        size_t v34 = &v28;
        v35[0] = 0;
        *(_DWORD *)((char *)v35 + 7) = 0;
        llvm::cas::FileSystemCache::lookupPath(*(void *)(v20 + 232), (uint64_t)&v31, v21, v22, *(void *)(v20 + 240), 1, (uint64_t)&v29);
        if (v30)
        {
          long long v25 = v29;
          uint64_t v29 = 0;
          long long v27 = v25;
          sub_1CD4515D0(&v27);
          if (v27) {
            (*((void (**)(void **))*v27 + 1))(v27);
          }
        }
        else
        {
          sub_1CC22B5E0((uint64_t)a1, (uint64_t)v29);
        }
        if (v30)
        {
          char v23 = v29;
          uint64_t v29 = 0;
          if (v23) {
            (*((void (**)(void **))*v23 + 1))(v23);
          }
        }
      }
      else
      {
        uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v19 + 72), memory_order_acquire);
        long long v31 = a1;
        sub_1CD5024D4(explicit, (uint64_t (*)(uint64_t, void))sub_1CC22B73C, (uint64_t)&v31);
      }
    }
    int v12 = 0;
  }
  *a4 = v12;
  if (v36 != v38) {
    free(v36);
  }
}

void *sub_1CC22B4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return llvm::cas::HierarchicalTreeBuilder::create((llvm::cas::HierarchicalTreeBuilder *)(a1 + 8), *(llvm::cas::ObjectStore **)(*(void *)(a1 + 424) + 16), a2);
}

uint64_t sub_1CC22B4E8(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 648), 8);
  uint64_t v2 = *(void **)(a1 + 584);
  if (v2 != (void *)(a1 + 600)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 432);
  if (v3 != (void *)(a1 + 456)) {
    free(v3);
  }
  sub_1CD4F486C((char **)(a1 + 408));
  sub_1CD4F486C((char **)(a1 + 8));
  return a1;
}

void sub_1CC22B554(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 648), 8);
  uint64_t v2 = *(void **)(a1 + 584);
  if (v2 != (void *)(a1 + 600)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 432);
  if (v3 != (void *)(a1 + 456)) {
    free(v3);
  }
  sub_1CD4F486C((char **)(a1 + 408));
  sub_1CD4F486C((char **)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC22B5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  sub_1CD4C96F8((uint64_t)v6, a1 + 648, &v5);
  if (v6[16])
  {
    if (*(_DWORD *)(a2 + 40) > 2u || (sub_1CC22B6EC(a1 + 8, (uint64_t *)a2), *(_DWORD *)(a2 + 40) >= 2u))
    {
      unsigned int v4 = *(_DWORD *)(a1 + 592);
      if (v4 >= *(_DWORD *)(a1 + 596)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 584) + 8 * v4) = a2;
      ++*(_DWORD *)(a1 + 592);
    }
  }
}

uint64_t *sub_1CC22B68C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unsigned int v3 = *(_DWORD *)(*result + 8);
  if (v3 >= *(_DWORD *)(*result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void sub_1CC22B6EC(uint64_t a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 10);
  uint64_t v4 = a2[10];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  __int16 v8 = 261;
  v7[0] = v6;
  v7[1] = v5;
  llvm::cas::HierarchicalTreeBuilder::pushImpl(a1, v4, 1, v3, (uint64_t)v7);
}

void sub_1CC22B734(uint64_t *a1, uint64_t a2)
{
}

void sub_1CC22B73C(uint64_t *a1, uint64_t a2)
{
}

unint64_t sub_1CC22B744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, size_t a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  size_t v11 = a6;
  if (a6)
  {
    if (a6 == 1 && *a5 == 47)
    {
      BOOL v16 = "/";
      size_t v11 = 1;
    }
    else
    {
      uint64_t v17 = (unsigned __int8 *)(a1 + 96);
      while ((atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 96), 1u, memory_order_acquire) & 1) != 0)
        ;
      BOOL v16 = (char *)sub_1CB906F34((uint64_t *)a1, a6 + 1, 0);
      atomic_store(0, v17);
      memmove(v16, a5, v11);
      v16[v11] = 0;
      size_t v11 = strlen(v16);
    }
  }
  else
  {
    BOOL v16 = "";
  }
  for (unsigned int i = (atomic_uchar *)(a2 + 96);
        (atomic_exchange_explicit(i, 1u, memory_order_acquire) & 1) != 0;
  *(void *)(a2 + 80) += 96;
  if (((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 96 > *(void *)(a2 + 8) - *(void *)a2)
  {
    unsigned int v21 = *(_DWORD *)(a2 + 24) >> 7;
    if (v21 >= 0x1E) {
      LOBYTE(v21) = 30;
    }
    uint64_t v22 = 4096 << v21;
    unint64_t v19 = (unint64_t)operator new(4096 << v21, (std::align_val_t)8uLL);
    unsigned int v23 = *(_DWORD *)(a2 + 24);
    if (v23 >= *(_DWORD *)(a2 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v23) = v19;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = v19 + v22;
  }
  else
  {
    unint64_t v19 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v19 + 96;
  atomic_store(0, (unsigned __int8 *)(a2 + 96));
  *(void *)unint64_t v19 = v16;
  *(void *)(v19 + 8) = v11;
  long long v26 = 0uLL;
  v25[0] = v16;
  v25[1] = v11;
  size_t v27 = v11;
  int v28 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v25);
  *(_OWORD *)(v19 + 16) = v26;
  *(void *)(v19 + 32) = a3;
  *(_DWORD *)(v19 + 40) = a7;
  *(unsigned char *)(v19 + 48) = 0;
  *(unsigned char *)(v19 + 64) = 0;
  *(void *)(v19 + 72) = 0;
  *(void *)(v19 + 80) = a9;
  *(void *)(v19 + 88) = a10;
  unint64_t v24 = v19;
  sub_1CD50092C(a4 + 72, &v24, (uint64_t)v25);
  return v19;
}

unint64_t llvm::cas::FileSystemCache::makeDirectory(uint64_t a1, uint64_t a2, unsigned char *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire);
  atomic_store(1u, (unsigned __int8 *)(explicit + 65));
  std::mutex::lock((std::mutex *)explicit);
  do
    int v13 = atomic_load((unsigned int *)(explicit + 68));
  while (v13 > 0);
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  v18[0] = a3;
  v18[1] = a4;
  size_t v21 = a4;
  int v22 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v18);
  unint64_t DirectoryAlreadyLocked = sub_1CC225B7C(explicit, v19, v20);
  if (!DirectoryAlreadyLocked) {
    unint64_t DirectoryAlreadyLocked = llvm::cas::FileSystemCache::makeDirectoryAlreadyLocked(a1, a2, a3, a4, a5, a6, v14, v15);
  }
  std::mutex::unlock((std::mutex *)explicit);
  return DirectoryAlreadyLocked;
}

unint64_t llvm::cas::FileSystemCache::makeSymlink(uint64_t a1, uint64_t a2, unsigned char *a3, size_t a4, uint64_t a5, const void *a6, size_t a7)
{
  uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire);
  atomic_store(1u, (unsigned __int8 *)(explicit + 65));
  std::mutex::lock((std::mutex *)explicit);
  do
    int v15 = atomic_load((unsigned int *)(explicit + 68));
  while (v15 > 0);
  char v30 = 0;
  long long v31 = 0;
  v29[0] = a3;
  v29[1] = a4;
  size_t v32 = a4;
  int v33 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v29);
  unint64_t v17 = sub_1CC225B7C(explicit, v30, v31);
  if (!v17)
  {
    unint64_t v17 = sub_1CC22B744(a1 + 424, a1 + 320, a2, atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire), a3, a4, 2, v16, a5, 1);
    while ((atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 208), 1u, memory_order_acquire) & 1) != 0)
      ;
    *(void *)(a1 + 192) += 40;
    uint64_t v18 = *(void *)(a1 + 112);
    if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 40 > *(void *)(a1 + 120) - v18)
    {
      unsigned int v26 = *(_DWORD *)(a1 + 136) >> 7;
      if (v26 >= 0x1E) {
        LOBYTE(v26) = 30;
      }
      uint64_t v27 = 4096 << v26;
      unint64_t v19 = (unint64_t)operator new(4096 << v26, (std::align_val_t)8uLL);
      unsigned int v28 = *(_DWORD *)(a1 + 136);
      if (v28 >= *(_DWORD *)(a1 + 140)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 128) + 8 * v28) = v19;
      ++*(_DWORD *)(a1 + 136);
      *(void *)(a1 + 120) = v19 + v27;
    }
    else
    {
      unint64_t v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 112) = v19 + 40;
    atomic_store(0, (unsigned __int8 *)(a1 + 208));
    if (a7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a7 >= 0x17)
    {
      uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a7 | 7) != 0x17) {
        uint64_t v21 = a7 | 7;
      }
      uint64_t v22 = v21 + 1;
      uint64_t v20 = operator new(v21 + 1);
      *(void *)(v19 + 8) = a7;
      *(void *)(v19 + 16) = v22 | 0x8000000000000000;
      *(void *)unint64_t v19 = v20;
    }
    else
    {
      *(unsigned char *)(v19 + 23) = a7;
      uint64_t v20 = (void *)v19;
      if (!a7) {
        goto LABEL_16;
      }
    }
    memmove(v20, a6, a7);
LABEL_16:
    uint64_t v23 = 0;
    *((unsigned char *)v20 + a7) = 0;
    unsigned int add = atomic_fetch_add(&dword_1EA61F09C, 1u);
    *(void *)(v19 + 24) = -1;
    *(void *)(v19 + 32) = add + 1;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v17 + 72), (unint64_t *)&v23, v19);
  }
  std::mutex::unlock((std::mutex *)explicit);
  return v17;
}

unint64_t llvm::cas::FileSystemCache::makeFile(uint64_t a1, uint64_t a2, unsigned char *a3, size_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire);
  atomic_store(1u, (unsigned __int8 *)(explicit + 65));
  std::mutex::lock((std::mutex *)explicit);
  do
    int v15 = atomic_load((unsigned int *)(explicit + 68));
  while (v15 > 0);
  uint64_t v27 = 0;
  unsigned int v28 = 0;
  v26[0] = a3;
  v26[1] = a4;
  size_t v29 = a4;
  int v30 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v26);
  unint64_t v17 = sub_1CC225B7C(explicit, v27, v28);
  if (!v17)
  {
    unint64_t v17 = sub_1CC22B744(a1 + 424, a1 + 320, a2, atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire), a3, a4, a7, v16, a5, 1);
    while ((atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 104), 1u, memory_order_acquire) & 1) != 0)
      ;
    *(void *)(a1 + 88) += 24;
    uint64_t v18 = *(void *)(a1 + 8);
    if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 24 > *(void *)(a1 + 16) - v18)
    {
      unsigned int v23 = *(_DWORD *)(a1 + 32) >> 7;
      if (v23 >= 0x1E) {
        LOBYTE(v23) = 30;
      }
      uint64_t v24 = 4096 << v23;
      unint64_t v19 = operator new(4096 << v23, (std::align_val_t)8uLL);
      unsigned int v25 = *(_DWORD *)(a1 + 32);
      if (v25 >= *(_DWORD *)(a1 + 36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v25) = v19;
      ++*(_DWORD *)(a1 + 32);
      *(void *)(a1 + 16) = (char *)v19 + v24;
    }
    else
    {
      unint64_t v19 = (void *)((v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    uint64_t v20 = 0;
    *(void *)(a1 + 8) = v19 + 3;
    atomic_store(0, (unsigned __int8 *)(a1 + 104));
    *unint64_t v19 = a6;
    unsigned int add = atomic_fetch_add(&dword_1EA61F09C, 1u);
    v19[1] = -1;
    v19[2] = add + 1;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v17 + 72), (unint64_t *)&v20, (unint64_t)v19);
  }
  std::mutex::unlock((std::mutex *)explicit);
  return v17;
}

uint64_t llvm::cas::FileSystemCache::DirectoryEntry::getFileType(llvm::cas::FileSystemCache::DirectoryEntry *this)
{
  if (*((_DWORD *)this + 10) == 3) {
    return 3;
  }
  else {
    return 2;
  }
}

double llvm::cas::FileSystemCache::DirectoryEntry::getStatus@<D0>(llvm::cas::FileSystemCache::DirectoryEntry *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 10);
  if (v4 < 2)
  {
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)this + 9, memory_order_acquire);
    uint64_t v8 = *(void *)explicit;
    unsigned int v4 = *((_DWORD *)this + 10);
    if (v4 == 1) {
      int v9 = 493;
    }
    else {
      int v9 = 420;
    }
    long long v11 = *(_OWORD *)(explicit + 8);
  }
  else if (v4 == 3)
  {
    uint64_t v8 = 0;
    long long v11 = *(_OWORD *)(atomic_load_explicit((atomic_ullong *volatile)this + 9, memory_order_acquire) + 96);
    unsigned int v4 = *((_DWORD *)this + 10);
    int v9 = 493;
  }
  else
  {
    if (v4 == 2)
    {
      *(unsigned char *)(a3 + 80) |= 1u;
      uint64_t v5 = std::generic_category();
      *(void *)a3 = 2;
      *(void *)(a3 + 8) = v5;
      return result;
    }
    int v9 = 0;
    uint64_t v8 = 0;
  }
  if (v4 == 3) {
    int v10 = 3;
  }
  else {
    int v10 = 2;
  }
  llvm::Twine::str(a2, &v12);
  long long v14 = v11;
  long long v15 = 0uLL;
  *(void *)&long long v16 = v8;
  *((void *)&v16 + 1) = __PAIR64__(v9, v10);
  *(unsigned char *)(a3 + 80) &= ~1u;
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  *(_WORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 56) = v16;
  *(_OWORD *)(a3 + 40) = v15;
  double result = *(double *)&v14;
  *(_OWORD *)(a3 + 24) = v14;
  return result;
}

__n128 sub_1CC22BF80(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  if (a3)
  {
    v9.n128_u64[0] = a2;
    v9.n128_u64[1] = a3;
    LODWORD(v10) = a4;
    unsigned int v4 = *(_DWORD *)(a1 + 8);
    unint64_t v5 = *(void *)a1;
    if (v4 >= *(_DWORD *)(a1 + 12))
    {
      BOOL v8 = v5 + 24 * v4 > (unint64_t)&v9;
      if (v5 <= (unint64_t)&v9 && v8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v6 = (__n128 *)(v5 + 24 * *(unsigned int *)(a1 + 8));
    __n128 result = v9;
    v6[1].n128_u64[0] = v10;
    *uint64_t v6 = result;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

__n128 llvm::cas::FileSystemCache::lookupRealPathPrefixFromCached@<Q0>(__n128 *a1@<X1>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  while (a1[1].n128_u64[0])
  {
    uint64_t v8 = a1->n128_u64[0];
    if (*(_DWORD *)(a1->n128_u64[0] + 40) != 3) {
      break;
    }
    __n128 v9 = (const void *)a1[2].n128_u64[0];
    if (v9)
    {
      unint64_t v10 = (_WORD *)a1[1].n128_u64[1];
      if (v9 == (const void *)2)
      {
        if (*v10 == 11822)
        {
          if (a2)
          {
            a2(a3);
            uint64_t v8 = a1->n128_u64[0];
          }
          uint64_t v11 = *(void *)(v8 + 32);
          if (v11)
          {
            a1->n128_u64[0] = v11;
            uint64_t v8 = v11;
          }
          goto LABEL_16;
        }
      }
      else if (v9 == (const void *)1 && *(unsigned char *)v10 == 46)
      {
        goto LABEL_16;
      }
      unint64_t explicit = (std::mutex *)atomic_load_explicit((atomic_ullong *volatile)(v8 + 72), memory_order_acquire);
      sub_1CD5020B0(&v16, explicit);
      uint64_t v13 = sub_1CC225B7C((uint64_t)explicit, v10, v9);
      uint64_t v8 = v13;
      if (v16) {
        atomic_fetch_add(v16, 0xFFFFFFFF);
      }
      if (!v13) {
        break;
      }
    }
LABEL_16:
    sub_1CD501C44(a1, v8);
  }
  __n128 v14 = a1[1];
  *a4 = *a1;
  a4[1] = v14;
  __n128 result = a1[2];
  a4[2] = result;
  a4[3].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

uint64_t llvm::cas::FileSystemCache::lookupNameFromCached(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  unint64_t explicit = (std::mutex *)atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire);
  sub_1CD5020B0(&v8, explicit);
  uint64_t result = sub_1CC225B7C((uint64_t)explicit, a3, a4);
  if (v8) {
    atomic_fetch_add(v8, 0xFFFFFFFF);
  }
  return result;
}

void llvm::cas::FileSystemCache::getCachedVFSDirIter(uint64_t a1, uint64_t a2, long long *a3, void *a4, size_t a5, llvm::cas::FileSystemCache::VFSDirIterImpl *a6, llvm::cas::FileSystemCache::VFSDirIterImpl *a7)
{
  char v7 = a7;
  v33[16] = *MEMORY[0x1E4F143B8];
  size_t v29 = a6;
  int v30 = a7;
  uint64_t v27 = &v29;
  uint64_t v28 = 0;
  sub_1CD5020B0(&v31, (std::mutex *)a2);
  sub_1CD42769C((uint64_t)&v27, *(unsigned int *)(a2 + 80));
  sub_1CD5036A8(a2 + 72, v27);
  if (v31)
  {
    atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF);
    char v7 = v30;
  }
  long long v31 = v33;
  long long v32 = xmmword_1CFAC3020;
  if (v7)
  {
    long long v12 = v29;
    if (*(unsigned char *)v29 == 47) {
      goto LABEL_11;
    }
    if (a5 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v13 = 0;
    if (a5)
    {
      memcpy(v31, a4, a5);
      uint64_t v13 = v32;
    }
    *(void *)&long long v32 = v13 + a5;
    __int16 v26 = 261;
    v25[0] = v12;
    v25[1] = v7;
    __int16 v24 = 257;
    __int16 v22 = 257;
    __int16 v20 = 257;
    llvm::sys::path::append(&v31, (llvm::Twine *)1, (const char **)v25, &v23, (uint64_t)v21, (uint64_t)v19);
    long long v12 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)v31;
    char v7 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)v32;
  }
  else
  {
    long long v12 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)a4;
    char v7 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)a5;
  }
  size_t v29 = v12;
  int v30 = v7;
LABEL_11:
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v29, "/", 1, 0xFFFFFFFFFFFFFFFFLL);
  if (last_not_of + 1 < (unint64_t)v7) {
    char v7 = (llvm::cas::FileSystemCache::VFSDirIterImpl *)(last_not_of + 1);
  }
  unint64_t v15 = *((void *)a3 + 3);
  unint64_t v18 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 2) != 0 && (v15 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v15 & 0xFFFFFFFFFFFFFFF8) + 8))(&v16, a3);
    }
    else
    {
      long long v16 = *a3;
      uint64_t v17 = *((void *)a3 + 2);
    }
    *((void *)a3 + 3) = 0;
  }
  llvm::cas::FileSystemCache::VFSDirIterImpl::create((uint64_t)&v16, v12, (size_t)v7, v27, v28, v25);
}

void llvm::cas::FileSystemCache::VFSDirIterImpl::setEntry(llvm::cas::FileSystemCache::VFSDirIterImpl *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*((void *)this + 13);
  if (v2 == (uint64_t *)(*((void *)this + 11) + 8 * *((void *)this + 12)))
  {
    unint64_t v15 = (void **)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      operator delete(*v15);
    }
    *unint64_t v15 = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 9;
  }
  else
  {
    uint64_t v3 = *v2;
    __int16 v23 = 773;
    uint64_t v4 = *((void *)this + 10);
    v22[0] = *((void *)this + 9);
    v22[1] = v4;
    _OWORD v22[2] = "/";
    *(void *)__int16 v26 = v22;
    long long v27 = *(_OWORD *)(v3 + 16);
    __int16 v28 = 1282;
    llvm::Twine::str((llvm::Twine *)v26, &__p);
    int v5 = *(_DWORD *)(v3 + 40);
    if (v5 == 2)
    {
      uint64_t v6 = (void *)((char *)this + 40);
      if (v25 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v25 >= 0) {
        uint64_t v8 = HIBYTE(v25) & 0x7F;
      }
      else {
        uint64_t v8 = v25;
      }
      uint64_t v9 = *((void *)this + 8);
      if ((v9 & 2) == 0) {
        uint64_t v6 = (void *)*v6;
      }
      (*(void (**)(unsigned char *__return_ptr, void *, void *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFF8))(v26, v6, p_p, v8);
      if (v26[8])
      {
        __int16 v20 = *(void **)v26;
        *(void *)__int16 v26 = 0;
        uint64_t v21 = v20;
        sub_1CD4515D0(&v21);
        if (v21) {
          (*(void (**)(void *))(*v21 + 8))(v21);
        }
        int v10 = 0;
      }
      else if (*(_DWORD *)(*(void *)v26 + 40) == 3)
      {
        int v10 = 3;
      }
      else
      {
        int v10 = 2;
      }
      if (v26[8])
      {
        uint64_t v11 = *(void *)v26;
        *(void *)__int16 v26 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      long long v12 = __p;
      *(void *)__int16 v26 = v25;
      *(void *)&v26[7] = *(void *)((char *)&v25 + 7);
      char v13 = HIBYTE(v25);
      long long v25 = 0uLL;
      long long __p = 0;
      if (*((char *)this + 31) < 0) {
        operator delete(*((void **)this + 1));
      }
      uint64_t v14 = *(void *)v26;
      *((void *)this + 1) = v12;
      *((void *)this + 2) = v14;
      *(void *)((char *)this + 23) = *(void *)&v26[7];
      *((unsigned char *)this + 31) = v13;
      *((_DWORD *)this + 8) = v10;
    }
    else
    {
      long long v16 = __p;
      *(void *)__int16 v26 = v25;
      *(void *)&v26[7] = *(void *)((char *)&v25 + 7);
      char v17 = HIBYTE(v25);
      long long v25 = 0uLL;
      long long __p = 0;
      if (v5 == 3) {
        int v18 = 3;
      }
      else {
        int v18 = 2;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(*((void **)this + 1));
      }
      uint64_t v19 = *(void *)v26;
      *((void *)this + 1) = v16;
      *((void *)this + 2) = v19;
      *(void *)((char *)this + 23) = *(void *)&v26[7];
      *((unsigned char *)this + 31) = v17;
      *((_DWORD *)this + 8) = v18;
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
  }
}

void sub_1CC22C6DC(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *sub_1CC22C75C(void *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - a2;
  uint64_t v5 = result[1];
  if (result[2] >= (unint64_t)(v5 + a3 - a2) && a2 != a3) {
    goto LABEL_3;
  }
  if (result[2] < (unint64_t)(v5 + a3 - a2)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a2 != a3)
  {
LABEL_3:
    uint64_t result = memcpy((void *)(*result + v5), a2, v4);
    uint64_t v5 = v3[1];
  }
  v3[1] = v5 + v4;
  return result;
}

void sub_1CC22C7F8(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*a1 + v2), a2 - v2);
      }
    }
    a1[1] = a2;
  }
}

uint64_t sub_1CC22C86C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 40))();
}

uint64_t *sub_1CC22C894(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  char v7 = result;
LABEL_2:
  uint64_t v8 = a2;
  uint64_t v185 = a2 - 1;
  uint64_t v9 = v7;
  while (1)
  {
    char v7 = v9;
    uint64_t v10 = (char *)v8 - (char *)v9;
    uint64_t v11 = v8 - v9;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v79 = *(a2 - 1);
          uint64_t v80 = *v7;
          unint64_t v81 = *(void *)(v79 + 24);
          unint64_t v82 = *(void *)(*v7 + 24);
          if (v82 >= v81) {
            size_t v83 = *(void *)(v79 + 24);
          }
          else {
            size_t v83 = *(void *)(*v7 + 24);
          }
          if (v83
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v79 + 16), *(const void **)(v80 + 16), v83), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v81 >= v82)
          {
            return result;
          }
          *char v7 = v79;
          *(a2 - 1) = v80;
          return result;
        case 3:
          return sub_1CC22D618(v7, v7 + 1, v185);
        case 4:
          return sub_1CC22DAC8(v7, v7 + 1, v7 + 2, v185);
        case 5:
          uint64_t v84 = v7 + 2;
          uint64_t v85 = v7 + 3;
          uint64_t result = sub_1CC22DAC8(v7, v7 + 1, v7 + 2, v7 + 3);
          uint64_t v86 = *(a2 - 1);
          uint64_t v87 = v7[3];
          unint64_t v88 = *(void *)(v86 + 24);
          unint64_t v89 = *(void *)(v87 + 24);
          if (v89 >= v88) {
            size_t v90 = *(void *)(v86 + 24);
          }
          else {
            size_t v90 = *(void *)(v87 + 24);
          }
          if (v90
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v86 + 16), *(const void **)(v87 + 16), v90), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v88 >= v89)
          {
            return result;
          }
          *uint64_t v85 = v86;
          *(a2 - 1) = v87;
          uint64_t v159 = *v85;
          uint64_t v160 = *v84;
          size_t v161 = *(void *)(*v85 + 24);
          size_t v162 = *(void *)(*v84 + 24);
          if (v162 >= v161) {
            size_t v163 = *(void *)(*v85 + 24);
          }
          else {
            size_t v163 = *(void *)(*v84 + 24);
          }
          if (v163
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v159 + 16), *(const void **)(v160 + 16), v163),
                result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v161 >= v162)
          {
            return result;
          }
          *uint64_t v84 = v159;
          *uint64_t v85 = v160;
          uint64_t v175 = v7[1];
          size_t v176 = *(void *)(v175 + 24);
          if (v176 >= v161) {
            size_t v177 = v161;
          }
          else {
            size_t v177 = *(void *)(v175 + 24);
          }
          if (v177
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v159 + 16), *(const void **)(v175 + 16), v177),
                result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v161 >= v176)
          {
            return result;
          }
          v7[1] = v159;
          v7[2] = v175;
          uint64_t v178 = *v7;
          size_t v179 = *(void *)(*v7 + 24);
          if (v179 >= v161) {
            size_t v180 = v161;
          }
          else {
            size_t v180 = *(void *)(*v7 + 24);
          }
          if (v180
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v159 + 16), *(const void **)(v178 + 16), v180),
                result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v161 >= v179)
          {
            return result;
          }
          *char v7 = v159;
          v7[1] = v178;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 191)
    {
      std::error_code v91 = v7 + 1;
      BOOL v93 = v7 == v8 || v91 == v8;
      if ((a4 & 1) == 0)
      {
        if (v93) {
          return result;
        }
        while (1)
        {
          v164 = v7;
          char v7 = v91;
          uint64_t v166 = *v164;
          uint64_t v165 = v164[1];
          size_t v167 = *(void *)(v165 + 24);
          size_t v168 = *(void *)(*v164 + 24);
          if (v168 >= v167) {
            size_t v169 = *(void *)(v165 + 24);
          }
          else {
            size_t v169 = *(void *)(*v164 + 24);
          }
          if (v169
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v165 + 16), *(const void **)(v166 + 16), v169),
                result))
          {
            if ((result & 0x80000000) != 0)
            {
              do
              {
LABEL_336:
                v170 = v164;
                uint64_t v171 = *--v164;
                v164[2] = v166;
                uint64_t v166 = v171;
                size_t v172 = *(void *)(v171 + 24);
                if (v172 >= v167) {
                  size_t v173 = v167;
                }
                else {
                  size_t v173 = v172;
                }
                if (v173
                  && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v165 + 16), *(const void **)(v166 + 16), v173),
                      result))
                {
                  int v174 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v167 >= v172) {
                    break;
                  }
                  int v174 = -1;
                }
              }
              while (v174 == -1);
              uint64_t *v170 = v165;
            }
          }
          else if (v167 < v168)
          {
            goto LABEL_336;
          }
          std::error_code v91 = v7 + 1;
          if (v7 + 1 == a2) {
            return result;
          }
        }
      }
      if (v93) {
        return result;
      }
      uint64_t v94 = 0;
      std::error_code v95 = v7;
LABEL_194:
      std::error_code v96 = v95;
      std::error_code v95 = v91;
      uint64_t v98 = *v96;
      uint64_t v97 = v96[1];
      size_t v99 = *(void *)(v97 + 24);
      size_t v100 = *(void *)(*v96 + 24);
      if (v100 >= v99) {
        size_t v101 = *(void *)(v97 + 24);
      }
      else {
        size_t v101 = *(void *)(*v96 + 24);
      }
      if (v101
        && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v97 + 16), *(const void **)(v98 + 16), v101), result))
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_217;
        }
      }
      else if (v99 >= v100)
      {
        goto LABEL_217;
      }
      uint64_t v102 = v94;
      while (1)
      {
        *(uint64_t *)((char *)v7 + v102 + 8) = v98;
        if (!v102)
        {
          std::error_code v103 = v7;
          goto LABEL_216;
        }
        std::error_code v103 = v96;
        uint64_t v98 = *(uint64_t *)((char *)v7 + v102 - 8);
        size_t v104 = *(void *)(v98 + 24);
        if (v104 >= v99) {
          size_t v105 = v99;
        }
        else {
          size_t v105 = *(void *)(v98 + 24);
        }
        if (v105
          && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v97 + 16), *(const void **)(v98 + 16), v105), result))
        {
          int v106 = ((int)result >> 31) | 1;
        }
        else
        {
          if (v99 >= v104)
          {
            std::error_code v103 = (uint64_t *)((char *)v7 + v102);
LABEL_216:
            uint64_t *v103 = v97;
LABEL_217:
            std::error_code v91 = v95 + 1;
            v94 += 8;
            if (v95 + 1 == a2) {
              return result;
            }
            goto LABEL_194;
          }
          int v106 = -1;
        }
        std::error_code v96 = v103 - 1;
        v102 -= 8;
        if (v106 != -1) {
          goto LABEL_216;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    char v13 = &v7[(unint64_t)v11 >> 1];
    if ((unint64_t)v10 < 0x401)
    {
      uint64_t result = sub_1CC22D618(v13, v7, v185);
    }
    else
    {
      sub_1CC22D618(v7, v13, v185);
      sub_1CC22D618(v7 + 1, v13 - 1, a2 - 2);
      sub_1CC22D618(v7 + 2, &v7[v12 + 1], a2 - 3);
      uint64_t result = sub_1CC22D618(v13 - 1, v13, &v7[v12 + 1]);
      uint64_t v14 = *v7;
      *char v7 = *v13;
      *char v13 = v14;
    }
    --a3;
    uint64_t v15 = *v7;
    if (a4)
    {
      size_t v16 = *(void *)(v15 + 24);
LABEL_39:
      uint64_t v26 = 8;
      do
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(uint64_t *)((char *)v7 + v26);
        size_t v29 = *(void *)(v28 + 24);
        if (v16 >= v29) {
          size_t v30 = *(void *)(v28 + 24);
        }
        else {
          size_t v30 = v16;
        }
        if (v30 && (int v31 = memcmp(*(const void **)(v28 + 16), *(const void **)(v15 + 16), v30)) != 0)
        {
          int v32 = (v31 >> 31) | 1;
        }
        else
        {
          if (v29 >= v16) {
            break;
          }
          int v32 = -1;
        }
        uint64_t v26 = v27 + 8;
      }
      while (v32 == -1);
      unint64_t v33 = (unint64_t)v7 + v27;
      size_t v34 = a2 - 1;
      if (v27 == 8)
      {
        uint64_t v40 = a2 - 1;
        while (v33 < (unint64_t)(v40 + 1))
        {
          __int16 v35 = v40;
          size_t v41 = *(void *)(*v40 + 24);
          if (v16 >= v41) {
            size_t v42 = *(void *)(*v40 + 24);
          }
          else {
            size_t v42 = v16;
          }
          if (v42 && (int v43 = memcmp(*(const void **)(*v40 + 16), *(const void **)(v15 + 16), v42)) != 0)
          {
            int v44 = (v43 >> 31) | 1;
          }
          else if (v41 == v16)
          {
            int v44 = 0;
          }
          else
          {
            if (v41 < v16) {
              goto LABEL_77;
            }
            int v44 = 1;
          }
          uint64_t v40 = v35 - 1;
          if (v44 == -1) {
            goto LABEL_77;
          }
        }
        __int16 v35 = v40 + 1;
      }
      else
      {
        do
        {
          __int16 v35 = v34;
          size_t v36 = *(void *)(*v34 + 24);
          if (v16 >= v36) {
            size_t v37 = *(void *)(*v34 + 24);
          }
          else {
            size_t v37 = v16;
          }
          if (v37 && (int v38 = memcmp(*(const void **)(*v34 + 16), *(const void **)(v15 + 16), v37)) != 0)
          {
            int v39 = (v38 >> 31) | 1;
          }
          else if (v36 == v16)
          {
            int v39 = 0;
          }
          else
          {
            if (v36 < v16) {
              break;
            }
            int v39 = 1;
          }
          size_t v34 = v35 - 1;
        }
        while (v39 != -1);
      }
LABEL_77:
      uint64_t v183 = a3;
      if (v33 >= (unint64_t)v35)
      {
        uint64_t v9 = (uint64_t *)v33;
      }
      else
      {
        uint64_t v45 = *v35;
        uint64_t v9 = (uint64_t *)v33;
        size_t v46 = v35;
        do
        {
          *uint64_t v9 = v45;
          *size_t v46 = v28;
          uint64_t v47 = v9 + 1;
          do
          {
            uint64_t v9 = v47;
            uint64_t v28 = *v47;
            size_t v48 = *(void *)(*v47 + 24);
            if (v16 >= v48) {
              size_t v49 = *(void *)(*v47 + 24);
            }
            else {
              size_t v49 = v16;
            }
            if (v49 && (int v50 = memcmp(*(const void **)(v28 + 16), *(const void **)(v15 + 16), v49)) != 0)
            {
              int v51 = (v50 >> 31) | 1;
            }
            else
            {
              if (v48 >= v16) {
                break;
              }
              int v51 = -1;
            }
            uint64_t v47 = v9 + 1;
          }
          while (v51 == -1);
          __n128 v52 = v46 - 1;
          do
          {
            size_t v46 = v52;
            uint64_t v45 = *v52;
            size_t v53 = *(void *)(*v52 + 24);
            if (v16 >= v53) {
              size_t v54 = *(void *)(*v52 + 24);
            }
            else {
              size_t v54 = v16;
            }
            if (v54 && (int v55 = memcmp(*(const void **)(v45 + 16), *(const void **)(v15 + 16), v54)) != 0)
            {
              int v56 = (v55 >> 31) | 1;
            }
            else if (v53 == v16)
            {
              int v56 = 0;
            }
            else
            {
              if (v53 < v16) {
                break;
              }
              int v56 = 1;
            }
            __n128 v52 = v46 - 1;
          }
          while (v56 != -1);
        }
        while (v9 < v46);
      }
      char v57 = v9 - 1;
      if (v9 - 1 != v7) {
        *char v7 = *v57;
      }
      *char v57 = v15;
      uint64_t v8 = a2;
      a3 = v183;
      if (v33 < (unint64_t)v35) {
        goto LABEL_109;
      }
      BOOL v58 = sub_1CC22D798(v7, v9 - 1);
      uint64_t result = (uint64_t *)sub_1CC22D798(v9, a2);
      if (result)
      {
        a2 = v9 - 1;
        if (v58) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v58)
      {
LABEL_109:
        uint64_t result = (uint64_t *)sub_1CC22C894(v7, v9 - 1, v183, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v17 = *(v7 - 1);
      size_t v18 = *(void *)(v17 + 24);
      size_t v16 = *(void *)(v15 + 24);
      if (v16 >= v18) {
        size_t v19 = *(void *)(v17 + 24);
      }
      else {
        size_t v19 = *(void *)(v15 + 24);
      }
      if (v19
        && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v17 + 16), *(const void **)(v15 + 16), v19), result))
      {
        if ((result & 0x80000000) != 0) {
          goto LABEL_39;
        }
      }
      else if (v18 < v16)
      {
        goto LABEL_39;
      }
      size_t v20 = *(void *)(*v185 + 24);
      if (v20 >= v16) {
        size_t v21 = v16;
      }
      else {
        size_t v21 = *(void *)(*v185 + 24);
      }
      if (v21
        && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(*v185 + 16), v21), result))
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else if (v16 >= v20)
      {
LABEL_24:
        __int16 v22 = v7 + 1;
        do
        {
          uint64_t v9 = v22;
          if (v22 >= v8) {
            break;
          }
          size_t v23 = *(void *)(*v22 + 24);
          size_t v24 = v23 >= v16 ? v16 : *(void *)(*v22 + 24);
          if (v24
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(*v22 + 16), v24), result))
          {
            int v25 = ((int)result >> 31) | 1;
          }
          else if (v16 == v23)
          {
            int v25 = 0;
          }
          else
          {
            if (v16 < v23) {
              goto LABEL_123;
            }
            int v25 = 1;
          }
          __int16 v22 = v9 + 1;
        }
        while (v25 != -1);
        goto LABEL_123;
      }
      __int16 v59 = v7 + 1;
      do
      {
        uint64_t v9 = v59;
        size_t v60 = *(void *)(*v59 + 24);
        if (v60 >= v16) {
          size_t v61 = v16;
        }
        else {
          size_t v61 = *(void *)(*v59 + 24);
        }
        if (v61
          && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(*v59 + 16), v61), result))
        {
          int v62 = ((int)result >> 31) | 1;
        }
        else if (v16 == v60)
        {
          int v62 = 0;
        }
        else
        {
          if (v16 < v60) {
            break;
          }
          int v62 = 1;
        }
        __int16 v59 = v9 + 1;
      }
      while (v62 != -1);
LABEL_123:
      char v63 = v8;
      if (v9 < v8)
      {
        stat v64 = a2 - 1;
        do
        {
          char v63 = v64;
          size_t v65 = *(void *)(*v64 + 24);
          if (v65 >= v16) {
            size_t v66 = v16;
          }
          else {
            size_t v66 = *(void *)(*v64 + 24);
          }
          if (v66
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(*v64 + 16), v66), result))
          {
            int v67 = ((int)result >> 31) | 1;
          }
          else
          {
            if (v16 >= v65) {
              break;
            }
            int v67 = -1;
          }
          stat v64 = v63 - 1;
        }
        while (v67 == -1);
      }
      if (v9 < v63)
      {
        uint64_t v68 = *v9;
        uint64_t v69 = *v63;
        do
        {
          *uint64_t v9 = v69;
          *char v63 = v68;
          unsigned int v70 = v9 + 1;
          do
          {
            uint64_t v9 = v70;
            uint64_t v68 = *v70;
            size_t v71 = *(void *)(*v70 + 24);
            if (v71 >= v16) {
              size_t v72 = v16;
            }
            else {
              size_t v72 = *(void *)(*v70 + 24);
            }
            if (v72
              && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(v68 + 16), v72), result))
            {
              int v73 = ((int)result >> 31) | 1;
            }
            else if (v16 == v71)
            {
              int v73 = 0;
            }
            else
            {
              if (v16 < v71) {
                break;
              }
              int v73 = 1;
            }
            unsigned int v70 = v9 + 1;
          }
          while (v73 != -1);
          uint64_t v74 = v63 - 1;
          do
          {
            char v63 = v74;
            uint64_t v69 = *v74;
            size_t v75 = *(void *)(*v74 + 24);
            if (v75 >= v16) {
              size_t v76 = v16;
            }
            else {
              size_t v76 = *(void *)(*v74 + 24);
            }
            if (v76
              && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(v69 + 16), v76), result))
            {
              int v77 = ((int)result >> 31) | 1;
            }
            else
            {
              if (v16 >= v75) {
                break;
              }
              int v77 = -1;
            }
            uint64_t v74 = v63 - 1;
          }
          while (v77 == -1);
        }
        while (v9 < v63);
      }
      unsigned int v78 = v9 - 1;
      BOOL v4 = v9 - 1 >= v7;
      BOOL v5 = v9 - 1 == v7;
      uint64_t v8 = a2;
      if (v9 - 1 != v7) {
        *char v7 = *v78;
      }
      a4 = 0;
      *unsigned int v78 = v15;
    }
  }
  if (v7 == v8) {
    return result;
  }
  int64_t v107 = (unint64_t)(v11 - 2) >> 1;
  int64_t v108 = v107;
  v181 = v7;
  while (2)
  {
    int64_t v109 = v108;
    if (v107 >= v108)
    {
      uint64_t v110 = (2 * v108) | 1;
      v111 = &v7[v110];
      uint64_t v112 = 2 * v108 + 2;
      int64_t v184 = v108;
      if (v112 < v11)
      {
        uint64_t v113 = v111[1];
        unint64_t v114 = *(void *)(*v111 + 24);
        unint64_t v115 = *(void *)(v113 + 24);
        if (v115 >= v114) {
          size_t v116 = *(void *)(*v111 + 24);
        }
        else {
          size_t v116 = *(void *)(v113 + 24);
        }
        if (v116
          && (uint64_t result = (uint64_t *)memcmp(*(const void **)(*v111 + 16), *(const void **)(v113 + 16), v116), result))
        {
          int v117 = ((int)result >> 31) | 1;
        }
        else
        {
          if (v114 < v115) {
            int v117 = -1;
          }
          else {
            int v117 = 1;
          }
          if (v114 == v115) {
            int v117 = 0;
          }
        }
        if (v117 == -1)
        {
          ++v111;
          uint64_t v110 = v112;
        }
        int64_t v109 = v184;
      }
      unsigned int v118 = &v7[v109];
      uint64_t v119 = *v111;
      uint64_t v120 = *v118;
      unint64_t v121 = *(void *)(*v111 + 24);
      unint64_t v122 = *(void *)(*v118 + 24);
      if (v122 >= v121) {
        size_t v123 = *(void *)(*v111 + 24);
      }
      else {
        size_t v123 = *(void *)(*v118 + 24);
      }
      if (v123
        && (uint64_t v124 = *v118,
            uint64_t result = (uint64_t *)memcmp(*(const void **)(v119 + 16), *(const void **)(v120 + 16), v123),
            uint64_t v120 = v124,
            result))
      {
        int64_t v109 = v184;
        if ((result & 0x80000000) != 0) {
          goto LABEL_275;
        }
      }
      else
      {
        int64_t v109 = v184;
        if (v121 < v122) {
          goto LABEL_275;
        }
      }
      uint64_t v186 = v120;
      do
      {
        v125 = v111;
        *unsigned int v118 = v119;
        if (v107 < v110) {
          break;
        }
        v111 = &v7[(2 * v110) | 1];
        if (2 * v110 + 2 < v11)
        {
          int64_t v126 = v107;
          uint64_t v127 = v111[1];
          unint64_t v128 = *(void *)(*v111 + 24);
          unint64_t v129 = *(void *)(v127 + 24);
          size_t v130 = v129 >= v128 ? *(void *)(*v111 + 24) : *(void *)(v127 + 24);
          if (v130
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(*v111 + 16), *(const void **)(v127 + 16), v130),
                result))
          {
            int v131 = ((int)result >> 31) | 1;
          }
          else
          {
            if (v128 < v129) {
              int v131 = -1;
            }
            else {
              int v131 = 1;
            }
            if (v128 == v129) {
              int v131 = 0;
            }
          }
          int64_t v107 = v126;
          char v7 = v181;
          if (v131 == -1)
          {
            ++v111;
            uint64_t v110 = 2 * v110 + 2;
          }
          else
          {
            uint64_t v110 = (2 * v110) | 1;
          }
        }
        else
        {
          uint64_t v110 = (2 * v110) | 1;
        }
        uint64_t v119 = *v111;
        unint64_t v132 = *(void *)(*v111 + 24);
        size_t v133 = v122 >= v132 ? *(void *)(*v111 + 24) : v122;
        if (v133
          && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v119 + 16), *(const void **)(v186 + 16), v133), result))
        {
          int v134 = ((int)result >> 31) | 1;
        }
        else if (v132 == v122)
        {
          int v134 = 0;
        }
        else
        {
          if (v132 < v122) {
            break;
          }
          int v134 = 1;
        }
        unsigned int v118 = v125;
      }
      while (v134 != -1);
      int64_t v109 = v184;
      uint64_t *v125 = v186;
    }
LABEL_275:
    int64_t v108 = v109 - 1;
    if (v109) {
      continue;
    }
    break;
  }
  do
  {
    uint64_t v135 = 0;
    uint64_t v187 = *v7;
    uint64_t v136 = v7;
    do
    {
      uint64_t v137 = (uint64_t)&v136[v135 + 1];
      uint64_t v138 = (2 * v135) | 1;
      uint64_t v139 = 2 * v135 + 2;
      if (v139 < v11)
      {
        uint64_t v140 = v136[v135 + 2];
        unint64_t v141 = *(void *)(*(void *)v137 + 24);
        unint64_t v142 = *(void *)(v140 + 24);
        if (v142 >= v141) {
          size_t v143 = *(void *)(*(void *)v137 + 24);
        }
        else {
          size_t v143 = *(void *)(v140 + 24);
        }
        if (v143
          && (uint64_t result = (uint64_t *)memcmp(*(const void **)(*(void *)v137 + 16), *(const void **)(v140 + 16), v143),
              result))
        {
          int v144 = ((int)result >> 31) | 1;
        }
        else
        {
          if (v141 < v142) {
            int v144 = -1;
          }
          else {
            int v144 = 1;
          }
          if (v141 == v142) {
            int v144 = 0;
          }
        }
        if (v144 == -1)
        {
          v137 += 8;
          uint64_t v138 = v139;
        }
      }
      *uint64_t v136 = *(void *)v137;
      uint64_t v136 = (void *)v137;
      uint64_t v135 = v138;
    }
    while (v138 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
    int64_t v145 = a2 - 1;
    BOOL v5 = v137 == (void)--a2;
    if (v5)
    {
      *(void *)uint64_t v137 = v187;
    }
    else
    {
      *(void *)uint64_t v137 = *v145;
      *int64_t v145 = v187;
      uint64_t v146 = v137 - (void)v7 + 8;
      if (v146 >= 9)
      {
        unint64_t v147 = (((unint64_t)v146 >> 3) - 2) >> 1;
        uint64_t v148 = &v7[v147];
        uint64_t v149 = *v148;
        uint64_t v150 = *(void *)v137;
        unint64_t v151 = *(void *)(*v148 + 24);
        unint64_t v152 = *(void *)(*(void *)v137 + 24);
        if (v152 >= v151) {
          size_t v153 = *(void *)(*v148 + 24);
        }
        else {
          size_t v153 = *(void *)(*(void *)v137 + 24);
        }
        if (v153
          && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v149 + 16), *(const void **)(v150 + 16), v153), result))
        {
          if ((result & 0x80000000) != 0)
          {
            do
            {
LABEL_303:
              uint64_t v154 = v148;
              *(void *)uint64_t v137 = v149;
              if (!v147) {
                break;
              }
              unint64_t v147 = (v147 - 1) >> 1;
              uint64_t v148 = &v7[v147];
              uint64_t v149 = *v148;
              unint64_t v155 = *(void *)(*v148 + 24);
              size_t v156 = v152 >= v155 ? *(void *)(*v148 + 24) : v152;
              if (v156
                && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v149 + 16), *(const void **)(v150 + 16), v156),
                    result))
              {
                int v157 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v155 >= v152) {
                  break;
                }
                int v157 = -1;
              }
              uint64_t v137 = (uint64_t)v154;
            }
            while (v157 == -1);
            *uint64_t v154 = v150;
          }
        }
        else if (v151 < v152)
        {
          goto LABEL_303;
        }
      }
    }
  }
  while (v11-- > 2);
  return result;
}

uint64_t *sub_1CC22D618(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  BOOL v5 = result;
  uint64_t v6 = *a2;
  uint64_t v7 = *result;
  size_t v8 = *(void *)(*a2 + 24);
  size_t v9 = *(void *)(*result + 24);
  if (v9 >= v8) {
    size_t v10 = *(void *)(*a2 + 24);
  }
  else {
    size_t v10 = *(void *)(*result + 24);
  }
  if (v10)
  {
    uint64_t result = (uint64_t *)memcmp(*(const void **)(v6 + 16), *(const void **)(v7 + 16), v10);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_15:
      uint64_t v14 = *a3;
      size_t v15 = *(void *)(*a3 + 24);
      if (v8 >= v15) {
        size_t v16 = *(void *)(*a3 + 24);
      }
      else {
        size_t v16 = v8;
      }
      if (v16
        && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v14 + 16), *(const void **)(v6 + 16), v16), result))
      {
        if ((result & 0x80000000) == 0)
        {
LABEL_21:
          *BOOL v5 = v6;
          *a2 = v7;
          uint64_t v17 = *a3;
          size_t v18 = *(void *)(*a3 + 24);
          if (v9 >= v18) {
            size_t v19 = *(void *)(*a3 + 24);
          }
          else {
            size_t v19 = v9;
          }
          if (v19
            && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v17 + 16), *(const void **)(v7 + 16), v19), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v18 >= v9)
          {
            return result;
          }
          *a2 = v17;
          goto LABEL_40;
        }
      }
      else if (v15 >= v8)
      {
        goto LABEL_21;
      }
      *BOOL v5 = v14;
LABEL_40:
      *a3 = v7;
      return result;
    }
  }
  if (v8 < v9) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v11 = *a3;
  size_t v12 = *(void *)(*a3 + 24);
  if (v8 >= v12) {
    size_t v13 = *(void *)(*a3 + 24);
  }
  else {
    size_t v13 = v8;
  }
  if (v13 && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v11 + 16), *(const void **)(v6 + 16), v13), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v12 >= v8)
  {
    return result;
  }
  *a2 = v11;
  *a3 = v6;
  uint64_t v20 = *a2;
  uint64_t v21 = *v5;
  unint64_t v22 = *(void *)(*a2 + 24);
  unint64_t v23 = *(void *)(*v5 + 24);
  if (v23 >= v22) {
    size_t v24 = *(void *)(*a2 + 24);
  }
  else {
    size_t v24 = *(void *)(*v5 + 24);
  }
  if (v24 && (uint64_t result = (uint64_t *)memcmp(*(const void **)(v20 + 16), *(const void **)(v21 + 16), v24), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v22 >= v23)
  {
    return result;
  }
  *BOOL v5 = v20;
  *a2 = v21;
  return result;
}

BOOL sub_1CC22D798(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      unint64_t v8 = *(void *)(v6 + 24);
      unint64_t v9 = *(void *)(*a1 + 24);
      if (v9 >= v8) {
        size_t v10 = *(void *)(v6 + 24);
      }
      else {
        size_t v10 = *(void *)(*a1 + 24);
      }
      if (v10 && (int v11 = memcmp(*(const void **)(v6 + 16), *(const void **)(v7 + 16), v10)) != 0)
      {
        if ((v11 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v8 >= v9)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1CC22D618(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC22DAC8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      size_t v30 = a1 + 2;
      int v31 = a1 + 3;
      sub_1CC22DAC8(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v32 = *(a2 - 1);
      uint64_t v33 = a1[3];
      unint64_t v34 = *(void *)(v32 + 24);
      unint64_t v35 = *(void *)(v33 + 24);
      if (v35 >= v34) {
        size_t v36 = *(void *)(v32 + 24);
      }
      else {
        size_t v36 = *(void *)(v33 + 24);
      }
      if (v36 && (int v37 = memcmp(*(const void **)(v32 + 16), *(const void **)(v33 + 16), v36)) != 0)
      {
        if ((v37 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v34 >= v35)
      {
        return 1;
      }
      *int v31 = v32;
      *(a2 - 1) = v33;
      uint64_t v38 = *v31;
      uint64_t v39 = *v30;
      size_t v40 = *(void *)(*v31 + 24);
      size_t v41 = *(void *)(*v30 + 24);
      if (v41 >= v40) {
        size_t v42 = *(void *)(*v31 + 24);
      }
      else {
        size_t v42 = *(void *)(*v30 + 24);
      }
      if (v42 && (int v43 = memcmp(*(const void **)(v38 + 16), *(const void **)(v39 + 16), v42)) != 0)
      {
        if ((v43 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v40 >= v41)
      {
        return 1;
      }
      *size_t v30 = v38;
      *int v31 = v39;
      uint64_t v44 = a1[1];
      size_t v45 = *(void *)(v44 + 24);
      if (v45 >= v40) {
        size_t v46 = v40;
      }
      else {
        size_t v46 = *(void *)(v44 + 24);
      }
      if (v46 && (int v47 = memcmp(*(const void **)(v38 + 16), *(const void **)(v44 + 16), v46)) != 0)
      {
        if ((v47 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v40 >= v45)
      {
        return 1;
      }
      a1[1] = v38;
      a1[2] = v44;
      uint64_t v48 = *a1;
      size_t v49 = *(void *)(*a1 + 24);
      if (v49 >= v40) {
        size_t v50 = v40;
      }
      else {
        size_t v50 = *(void *)(*a1 + 24);
      }
      if (v50 && (int v51 = memcmp(*(const void **)(v38 + 16), *(const void **)(v48 + 16), v50)) != 0)
      {
        if ((v51 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v40 >= v49)
      {
        return 1;
      }
      *a1 = v38;
      a1[1] = v48;
      return 1;
    default:
      size_t v12 = a1 + 2;
      sub_1CC22D618(a1, a1 + 1, a1 + 2);
      size_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  do
  {
    uint64_t v16 = *v13;
    uint64_t v17 = *v12;
    size_t v18 = *(void *)(*v13 + 24);
    size_t v19 = *(void *)(v17 + 24);
    if (v19 >= v18) {
      size_t v20 = *(void *)(*v13 + 24);
    }
    else {
      size_t v20 = *(void *)(v17 + 24);
    }
    if (v20 && (int v21 = memcmp(*(const void **)(v16 + 16), *(const void **)(v17 + 16), v20)) != 0)
    {
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_33;
      }
    }
    else if (v18 >= v19)
    {
      goto LABEL_33;
    }
    uint64_t v22 = v14;
    while (1)
    {
      uint64_t v23 = v22;
      size_t v24 = (char *)a1 + v22;
      *((void *)v24 + 3) = v17;
      if (v23 == -16) {
        break;
      }
      uint64_t v17 = *((void *)v24 + 1);
      size_t v25 = *(void *)(v17 + 24);
      if (v25 >= v18) {
        size_t v26 = v18;
      }
      else {
        size_t v26 = *(void *)(v17 + 24);
      }
      if (v26 && (int v27 = memcmp(*(const void **)(v16 + 16), *(const void **)(v17 + 16), v26)) != 0)
      {
        int v28 = (v27 >> 31) | 1;
      }
      else
      {
        if (v18 >= v25) {
          goto LABEL_30;
        }
        int v28 = -1;
      }
      uint64_t v22 = v23 - 8;
      if (v28 != -1)
      {
LABEL_30:
        size_t v29 = (uint64_t *)((char *)a1 + v23 + 16);
        goto LABEL_32;
      }
    }
    size_t v29 = a1;
LABEL_32:
    *size_t v29 = v16;
    if (++v15 == 8) {
      return v13 + 1 == a2;
    }
LABEL_33:
    size_t v12 = v13;
    v14 += 8;
    ++v13;
  }
  while (v13 != a2);
  return 1;
}

uint64_t *sub_1CC22DAC8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC22D618(a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = *a3;
  unint64_t v11 = *(void *)(*a4 + 24);
  unint64_t v12 = *(void *)(*a3 + 24);
  if (v12 >= v11) {
    size_t v13 = *(void *)(*a4 + 24);
  }
  else {
    size_t v13 = *(void *)(*a3 + 24);
  }
  if (v13 && (BOOL result = (uint64_t *)memcmp(*(const void **)(v9 + 16), *(const void **)(v10 + 16), v13), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  uint64_t v14 = *a3;
  uint64_t v15 = *a2;
  unint64_t v16 = *(void *)(*a3 + 24);
  unint64_t v17 = *(void *)(*a2 + 24);
  if (v17 >= v16) {
    size_t v18 = *(void *)(*a3 + 24);
  }
  else {
    size_t v18 = *(void *)(*a2 + 24);
  }
  if (v18 && (BOOL result = (uint64_t *)memcmp(*(const void **)(v14 + 16), *(const void **)(v15 + 16), v18), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v16 >= v17)
  {
    return result;
  }
  *a2 = v14;
  *a3 = v15;
  uint64_t v19 = *a2;
  uint64_t v20 = *a1;
  unint64_t v21 = *(void *)(*a2 + 24);
  unint64_t v22 = *(void *)(*a1 + 24);
  if (v22 >= v21) {
    size_t v23 = *(void *)(*a2 + 24);
  }
  else {
    size_t v23 = *(void *)(*a1 + 24);
  }
  if (v23 && (BOOL result = (uint64_t *)memcmp(*(const void **)(v19 + 16), *(const void **)(v20 + 16), v23), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v21 >= v22)
  {
    return result;
  }
  *a1 = v19;
  *a2 = v20;
  return result;
}

uint64_t llvm::cas::ThreadSafeHashMappedTrieBase::ThreadSafeHashMappedTrieBase(uint64_t result, __int16 a2, __int16 a3, __int16 a4, __int16 a5, char a6, __int16 a7, char a8)
{
  *(_WORD *)BOOL result = a2;
  *(_WORD *)(result + 2) = a3;
  *(_WORD *)(result + 4) = a4;
  if (a6) {
    __int16 v8 = a5;
  }
  else {
    __int16 v8 = 6;
  }
  *(_WORD *)(result + 6) = v8;
  if (a8) {
    __int16 v9 = a7;
  }
  else {
    __int16 v9 = 4;
  }
  *(_WORD *)(result + 8) = v9;
  *(void *)(result + 16) = 0;
  return result;
}

{
  __int16 v8;
  __int16 v9;

  *(_WORD *)BOOL result = a2;
  *(_WORD *)(result + 2) = a3;
  *(_WORD *)(result + 4) = a4;
  if (a6) {
    __int16 v8 = a5;
  }
  else {
    __int16 v8 = 6;
  }
  *(_WORD *)(result + 6) = v8;
  if (a8) {
    __int16 v9 = a7;
  }
  else {
    __int16 v9 = 4;
  }
  *(_WORD *)(result + 8) = v9;
  *(void *)(result + 16) = 0;
  return result;
}

double llvm::cas::ThreadSafeHashMappedTrieBase::ThreadSafeHashMappedTrieBase(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  atomic_store(atomic_exchange((atomic_ullong *volatile)(a2 + 16), 0), (unint64_t *)(a1 + 16));
  return result;
}

{
  double result;

  double result = *(double *)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  atomic_store(atomic_exchange((atomic_ullong *volatile)(a2 + 16), 0), (unint64_t *)(a1 + 16));
  return result;
}

void sub_1CC22DC5C(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  v70[6] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)*((void *)a2 + 4);
  unint64_t v7 = *((void *)a2 + 3) - (void)v6;
  if (*(unsigned char *)(a3 + 24))
  {
    if (v7 > 7)
    {
      *uint64_t v6 = 0x3D65697274627573;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, "subtrie=", 8uLL);
    }
    char v8 = *(unsigned char *)(a3 + 23);
    BOOL v9 = v8 < 0;
    if (v8 >= 0) {
      uint64_t v10 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v10 = *(unsigned __int8 **)a3;
    }
    unint64_t v11 = v8 & 0x7F;
    if (v9) {
      unint64_t v12 = *(void *)(a3 + 8);
    }
    else {
      unint64_t v12 = v11;
    }
    sub_1CC22E3A0(a2, v10, v12);
  }
  else
  {
    if (v7 > 3)
    {
      *(_DWORD *)uint64_t v6 = 1953460082;
      *((void *)a2 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(a2, "root", 4uLL);
    }
    if (*(unsigned char *)(a3 + 24) && *(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 1;
  }
  uint64_t v13 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v13) > 0xA)
  {
    *(_DWORD *)(v13 + 7) = 1030976623;
    *(void *)uint64_t v13 = *(void *)" num-slots=";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " num-slots=", 0xBuLL);
  }
  sub_1CD098D14(a2, *(void *)(a1 + 32), 0, 0, 0);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v14)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *uint64_t v14 = 10;
    ++*((void *)a2 + 4);
  }
  uint64_t v68 = v70;
  uint64_t v69 = 0x600000000;
  v66[0] = (char *)&v67;
  v66[1] = (char *)0x200000000;
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    uint64_t v59 = a3;
    unint64_t v16 = 0;
    uint64_t v60 = *(void *)(a1 + 32);
    do
    {
      unint64_t v17 = (unsigned char *)atomic_load((unint64_t *)(*(void *)(a1 + 24) + 8 * v16));
      if ((unint64_t)(v17 + 1) >= 2)
      {
        size_t v18 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v18 > 7uLL)
        {
          *size_t v18 = 0x3D7865646E69202DLL;
          *((void *)a2 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(a2, "- index=", 8uLL);
        }
        sub_1CD098D14(a2, v16, 0, 0, 0);
        uint64_t v19 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v19)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
        }
        else
        {
          *uint64_t v19 = 32;
          ++*((void *)a2 + 4);
        }
        if (*v17)
        {
          if (*(char *)(v59 + 23) < 0) {
            sub_1CB8BDF7C((uint64_t)&v64, *(const void **)v59, *(void *)(v59 + 8));
          }
          else {
            std::string v64 = *(std::string *)v59;
          }
          unint64_t v41 = *(void *)(a1 + 32);
          memset(&v65, 0, sizeof(v65));
          if (v41 < 2)
          {
            std::string::size_type size = 0;
            size_t v46 = 0;
            char v44 = 0;
          }
          else
          {
            unint64_t v42 = v16;
            for (unint64_t i = 1; i < v41; i *= 2)
            {
              std::string::push_back(&v65, v42 & 1 | 0x30);
              v42 >>= 1;
            }
            char v44 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
            std::string::size_type size = v65.__r_.__value_.__l.__size_;
            size_t v46 = (std::string *)v65.__r_.__value_.__r.__words[0];
          }
          if (v44 < 0)
          {
            std::string::size_type v47 = size;
          }
          else
          {
            size_t v46 = &v65;
            std::string::size_type v47 = v44 & 0x7F;
          }
          if (v47)
          {
            uint64_t v48 = (char *)&v46[-1].__r_.__value_.__r.__words[2] + 7;
            do
              std::string::push_back(&v64, v48[v47--]);
            while (v47);
            char v44 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          }
          if (v44 < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          size_t v49 = (void *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v49 > 7uLL)
          {
            *size_t v49 = 0x3D65697274627573;
            *((void *)a2 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a2, "subtrie=", 8uLL);
          }
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v50 = &v64;
          }
          else {
            size_t v50 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v51 = *((unsigned char *)&v64.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            unint64_t v51 = v64.__r_.__value_.__l.__size_;
          }
          sub_1CC22E3A0(a2, (unsigned __int8 *)v50, v51);
          __n128 v52 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v52)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *__n128 v52 = 10;
            ++*((void *)a2 + 4);
          }
          if (v69 >= (unint64_t)HIDWORD(v69)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v68[v69] = v17;
          LODWORD(v69) = v69 + 1;
          sub_1CD504070((uint64_t)v66, (unint64_t)&v64);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v20 = (void *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v20 > 7uLL)
          {
            *uint64_t v20 = 0x3D746E65746E6F63;
            *((void *)a2 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a2, "content=", 8uLL);
          }
          unint64_t v21 = &v17[v17[3]];
          uint64_t v22 = v17[2];
          int v24 = *(_DWORD *)(a1 + 4);
          int v23 = *(_DWORD *)(a1 + 8);
          unint64_t v25 = v24 & 0xFFFFFFFC;
          if ((v24 & 0xFFFFFFFC) != 0)
          {
            unint64_t v26 = 0;
            do
            {
              unsigned int v27 = v21[v26 >> 3];
              unsigned int v28 = v27 >> 4;
              int v29 = v27 & 0xF;
              if ((v26 & 4) != 0) {
                unsigned int v30 = v29;
              }
              else {
                unsigned int v30 = v28;
              }
              sub_1CC22E568(a2, v30);
              v26 += 4;
            }
            while (v25 != v26);
          }
          int v31 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v31)
          {
            llvm::raw_ostream::write(a2, "[", 1uLL);
          }
          else
          {
            *int v31 = 91;
            ++*((void *)a2 + 4);
          }
          unint64_t v32 = (v24 + v23 + 3) & 0xFFFFFFFC;
          if (v25 != v32)
          {
            do
            {
              int v33 = (v21[v25 >> 3] >> (~(_BYTE)v25 & 7)) & 1 | 0x30;
              unint64_t v34 = (unsigned char *)*((void *)a2 + 4);
              if ((unint64_t)v34 >= *((void *)a2 + 3))
              {
                llvm::raw_ostream::write(a2, v33);
              }
              else
              {
                *((void *)a2 + 4) = v34 + 1;
                *unint64_t v34 = v33;
              }
              ++v25;
            }
            while (v32 != v25);
          }
          unint64_t v35 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v35)
          {
            llvm::raw_ostream::write(a2, "]", 1uLL);
          }
          else
          {
            *unint64_t v35 = 93;
            ++*((void *)a2 + 4);
          }
          while (8 * v22 != v32)
          {
            unsigned int v36 = v21[v32 >> 3];
            unsigned int v37 = v36 >> 4;
            int v38 = v36 & 0xF;
            if ((v32 & 4) != 0) {
              unsigned int v39 = v38;
            }
            else {
              unsigned int v39 = v37;
            }
            sub_1CC22E568(a2, v39);
            v32 += 4;
          }
          size_t v40 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v40)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *size_t v40 = 10;
            ++*((void *)a2 + 4);
          }
          uint64_t v15 = v60;
        }
      }
      ++v16;
    }
    while (v16 != v15);
    if (v69)
    {
      uint64_t v53 = 0;
      unint64_t v54 = 0;
      uint64_t v55 = 8 * v69;
      do
      {
        uint64_t v56 = v68[v54 / 8];
        char v57 = &v66[0][v53];
        if (v66[0][v53 + 23] < 0)
        {
          sub_1CB8BDF7C((uint64_t)__p, *(const void **)v57, *((void *)v57 + 1));
        }
        else
        {
          long long v58 = *(_OWORD *)v57;
          uint64_t v62 = *((void *)v57 + 2);
          *(_OWORD *)long long __p = v58;
        }
        char v63 = 1;
        sub_1CC22DC5C(v56, a2, __p);
        if (v63)
        {
          if (SHIBYTE(v62) < 0) {
            operator delete(__p[0]);
          }
          char v63 = 0;
        }
        v54 += 8;
        v53 += 24;
      }
      while (v55 != v54);
    }
  }
  sub_1CBFCD310(v66);
  if (v68 != v70) {
    free(v68);
  }
}

llvm::raw_ostream *sub_1CC22E3A0(llvm::raw_ostream *this, unsigned __int8 *a2, unint64_t a3)
{
  size_t v3 = a3;
  BOOL v5 = this;
  if (a3 >= 4)
  {
    do
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        int v8 = a2[v6];
        if ((v8 - 48) >= 0xA)
        {
          if ((v8 - 97) >= 0x1A)
          {
            if ((v8 - 65) > 0x19) {
              goto LABEL_18;
            }
            int v9 = -55;
          }
          else
          {
            int v9 = -87;
          }
        }
        else
        {
          int v9 = -48;
        }
        unsigned int v10 = v9 + v8;
        if (v10 > 1 || (unint64_t v11 = 2 * v7 + v10, v7 > v11 >> 1))
        {
LABEL_18:
          unsigned __int8 v12 = 0;
          goto LABEL_16;
        }
        ++v6;
        unint64_t v7 = v11;
      }
      while (v6 != 4);
      if (v11 >= 0x100) {
        unsigned __int8 v12 = 0;
      }
      else {
        unsigned __int8 v12 = v11;
      }
LABEL_16:
      this = sub_1CC22E568(v5, v12);
      a2 += 4;
      v3 -= 4;
    }
    while (v3 > 3);
  }
  if (v3)
  {
    uint64_t v13 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) == v13)
    {
      llvm::raw_ostream::write(v5, "[", 1uLL);
      uint64_t v14 = (void *)*((void *)v5 + 4);
    }
    else
    {
      *uint64_t v13 = 91;
      uint64_t v14 = (void *)(*((void *)v5 + 4) + 1);
      *((void *)v5 + 4) = v14;
    }
    if (v3 <= *((void *)v5 + 3) - (void)v14)
    {
      this = (llvm::raw_ostream *)memcpy(v14, a2, v3);
      uint64_t v15 = (unsigned char *)(*((void *)v5 + 4) + v3);
      *((void *)v5 + 4) = v15;
    }
    else
    {
      this = llvm::raw_ostream::write(v5, (const char *)a2, v3);
      uint64_t v15 = (unsigned char *)*((void *)v5 + 4);
    }
    if (*((unsigned char **)v5 + 3) == v15)
    {
      return llvm::raw_ostream::write(v5, "]", 1uLL);
    }
    else
    {
      *uint64_t v15 = 93;
      ++*((void *)v5 + 4);
    }
  }
  return this;
}

llvm::raw_ostream *sub_1CC22E568(llvm::raw_ostream *result, unsigned int a2)
{
  unint64_t v2 = (char *)*((void *)result + 4);
  if (a2 > 9) {
    char v3 = a2 + 87;
  }
  else {
    char v3 = a2 + 48;
  }
  if ((unint64_t)v2 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, v3);
  }
  *((void *)result + 4) = v2 + 1;
  *unint64_t v2 = v3;
  return result;
}

unsigned char *sub_1CC22E5A0(uint64_t a1)
{
  unint64_t v2 = *(unsigned char **)a1;
  uint64_t v5 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int16 **)(v5 + 8);
  *unint64_t v2 = 1;
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  int v8 = (unsigned __int8 *)(v3 + 96);
  while ((atomic_exchange_explicit((atomic_uchar *volatile)(v3 + 96), 1u, memory_order_acquire) & 1) != 0)
    ;
  int v9 = (unsigned char *)sub_1CB906F34((uint64_t *)v3, v6, 63 - __clz(v7));
  atomic_store(0, v8);
  char v10 = (**(uint64_t (***)(void, unsigned char *, void, void))(a1 + 24))(*(void *)(*(void *)(a1 + 24) + 8), &v9[v4[2]], **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
  char v11 = *((unsigned char *)v4 + 4);
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  *int v9 = 0;
  v9[1] = v11;
  v9[2] = v12;
  void v9[3] = v10 - (_BYTE)v9;
  return v9;
}

unsigned __int8 *sub_1CC22E654(void *a1, int a2)
{
  uint64_t v4 = (unsigned __int8 *)*a1;
  if (!a1[1] || *v4 != 47)
  {
    char v13 = 47;
    sub_1CD504B8C(a1, v4, &v13);
  }
  llvm::sys::path::remove_dots((unsigned __int8 **)a1, 1, 1u);
  uint64_t v5 = (unsigned __int8 *)*a1;
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (!*((_DWORD *)a1 + 2))
  {
    uint64_t v12 = 0;
    a1[1] = 0;
    double result = v5;
LABEL_14:
    if ((unint64_t)(v12 + 1) > a1[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    v12[(void)result] = 47;
    double result = (unsigned __int8 *)*a1;
    ++a1[1];
    return result;
  }
  uint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    int v9 = *(unsigned __int8 *)(*a1 + v7);
    BOOL v10 = v9 == 47;
    if (v9 != 47)
    {
      if (v8)
      {
        *v5++ = 47;
        LOBYTE(v9) = *(unsigned char *)(*a1 + v7);
      }
      *v5++ = v9;
    }
    ++v7;
    BOOL v8 = v10;
  }
  while (v6 != v7);
  double result = (unsigned __int8 *)*a1;
  uint64_t v12 = &v5[-*a1];
  a1[1] = v12;
  if (a2 == 3 || v5 == result) {
    goto LABEL_14;
  }
  return result;
}

void llvm::cas::HierarchicalTreeBuilder::pushTreeContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v38[32] = *MEMORY[0x1E4F143B8];
  unint64_t v35 = &v36;
  unsigned int v36 = v38;
  long long v37 = xmmword_1CD96DBF0;
  int v28 = 0;
  char v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  unsigned int v27 = &unk_1F2646FA8;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v6 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v27, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 32));
  llvm::Twine::printOneChild(v6, (llvm::raw_ostream *)&v27, *(void *)(a3 + 16), *(void *)(a3 + 24), *(unsigned char *)(a3 + 33));
  unsigned int v27 = &unk_1F2646B98;
  if (v34 == 1 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8077774924);
  }
  uint64_t v7 = sub_1CC22E654(&v36, 3);
  int v9 = v7;
  size_t v10 = v8;
  unsigned int v11 = *(_DWORD *)(a1 + 408);
  uint64_t v12 = *(unsigned int *)(a1 + 412);
  if (v11 < v12)
  {
    uint64_t v13 = *(void *)(a1 + 400) + 48 * v11;
    *(void *)uint64_t v13 = a2;
    *(void *)(v13 + 8) = 1;
    *(_DWORD *)(v13 + 16) = 3;
    uint64_t v14 = (void *)(v13 + 24);
    if (!v7)
    {
      *uint64_t v14 = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      goto LABEL_14;
    }
    if (v8 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v8 >= 0x17)
      {
        uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v15 = v8 | 7;
        }
        uint64_t v16 = v15 + 1;
        unint64_t v17 = operator new(v15 + 1);
        v14[1] = v10;
        v14[2] = v16 | 0x8000000000000000;
        *uint64_t v14 = v17;
        uint64_t v14 = v17;
      }
      else
      {
        *(unsigned char *)(v13 + 47) = v8;
        if (!v8) {
          goto LABEL_13;
        }
      }
      memmove(v14, v9, v10);
LABEL_13:
      *((unsigned char *)v14 + v10) = 0;
      goto LABEL_14;
    }
LABEL_36:
    abort();
  }
  if (v12 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  if (((2 * v12) | 1uLL) >= 0xFFFFFFFF) {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v18 = (2 * v12) | 1;
  }
  uint64_t v19 = (char *)malloc_type_malloc(48 * v18, 0x4065EBACuLL);
  if (!v19) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v20 = (uint64_t)v19;
  unint64_t v21 = &v19[48 * *(unsigned int *)(a1 + 408)];
  *(void *)unint64_t v21 = a2;
  *((void *)v21 + 1) = 1;
  *((_DWORD *)v21 + 4) = 3;
  uint64_t v22 = v21 + 24;
  if (v9)
  {
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_36;
    }
    if (v10 >= 0x17)
    {
      uint64_t v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v23 = v10 | 7;
      }
      uint64_t v24 = v23 + 1;
      unint64_t v25 = operator new(v23 + 1);
      v22[1] = v10;
      _OWORD v22[2] = v24 | 0x8000000000000000;
      *uint64_t v22 = v25;
      uint64_t v22 = v25;
    }
    else
    {
      v21[47] = v10;
      if (!v10) {
        goto LABEL_32;
      }
    }
    memmove(v22, v9, v10);
LABEL_32:
    *((unsigned char *)v22 + v10) = 0;
    goto LABEL_33;
  }
  *uint64_t v22 = 0;
  *((void *)v21 + 4) = 0;
  *((void *)v21 + 5) = 0;
LABEL_33:
  sub_1CD504D4C((uint64_t *)(a1 + 400), v20);
  unint64_t v26 = *(void **)(a1 + 400);
  if (v26 != (void *)(a1 + 416)) {
    free(v26);
  }
  *(void *)(a1 + 400) = v20;
  *(_DWORD *)(a1 + 412) = v18;
LABEL_14:
  ++*(_DWORD *)(a1 + 408);
  if (v36 != v38) {
    free(v36);
  }
}

void sub_1CC22EAA8(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  int v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != 3)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    size_t v10 = (uint64_t *)a1[1];
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    uint64_t v18 = v12;
    uint64_t v19 = v11;
    long long v20 = *(_OWORD *)(a2 + 16);
    __int16 v21 = 1285;
    uint64_t v13 = v7;
    uint64_t v14 = 1;
LABEL_6:
    llvm::cas::HierarchicalTreeBuilder::pushImpl(v13, v9, v14, v8, (uint64_t)&v18);
    goto LABEL_3;
  }
  if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 80))(*a3, a3[2]) == 1)
  {
    uint64_t v15 = (uint64_t *)a1[1];
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = v17;
    uint64_t v19 = v16;
    long long v20 = *(_OWORD *)(a2 + 16);
    __int16 v21 = 1285;
    uint64_t v13 = v7;
    uint64_t v9 = 0;
    uint64_t v14 = 0;
    int v8 = 3;
    goto LABEL_6;
  }
LABEL_3:
  *a4 = 0;
}

void sub_1CC22EB90(long long *a1, long long *a2, unint64_t a3, long long *a4, uint64_t a5, __n128 a6)
{
  v108[2] = *MEMORY[0x1E4F143B8];
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  if (a3 == 2)
  {
    char v8 = *((unsigned char *)a2 - 1);
    int v9 = v8;
    size_t v10 = v8 & 0x7F;
    if (v9 >= 0) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = *((void *)a2 - 2);
    }
    char v12 = *((unsigned char *)a1 + 47);
    int v13 = v12;
    size_t v14 = v12 & 0x7F;
    if (v13 >= 0) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = *((void *)a1 + 4);
    }
    if (v15 >= v11) {
      size_t v16 = v11;
    }
    else {
      size_t v16 = v15;
    }
    if (v16
      && (v13 >= 0 ? (uint64_t v17 = (char *)a1 + 24) : (uint64_t v17 = (const void *)*((void *)a1 + 3)),
          v9 >= 0 ? (uint64_t v18 = (char *)v6 - 24) : (uint64_t v18 = (char *)*((void *)v6 - 3)),
          (int v19 = memcmp(v18, v17, v16)) != 0))
    {
      if ((v19 & 0x80000000) == 0) {
        return;
      }
    }
    else if (v11 == v15)
    {
      if (!*((unsigned char *)v6 - 40) || *((unsigned char *)v7 + 8)) {
        return;
      }
    }
    else if (v11 >= v15)
    {
      return;
    }
    unint64_t v89 = v6 - 3;
    long long v103 = *v7;
    int v105 = *((_DWORD *)v7 + 4);
    uint64_t v90 = *((void *)v7 + 3);
    v108[0] = *((void *)v7 + 4);
    *(void *)((char *)v108 + 7) = *(void *)((char *)v7 + 39);
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 3) = 0;
    long long v91 = *(v6 - 3);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v6 - 8);
    *uint64_t v7 = v91;
    uint64_t v92 = *((void *)v6 - 1);
    *(long long *)((char *)v7 + 24) = *(long long *)((char *)v6 - 24);
    *((void *)v7 + 5) = v92;
    *unint64_t v89 = v103;
    *((_DWORD *)v89 + 4) = v105;
    *((void *)v6 - 3) = v90;
    *((void *)v6 - 2) = v108[0];
    *(void *)((char *)v6 - 9) = *(void *)((char *)v108 + 7);
    *((unsigned char *)v6 - 1) = v13;
    return;
  }
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2) {
      return;
    }
    unint64_t v26 = a1 + 3;
    if (a1 + 3 == a2) {
      return;
    }
    uint64_t v27 = 0;
    int v28 = a1;
    while (1)
    {
      uint64_t v29 = v28;
      int v28 = v26;
      char v30 = *((unsigned char *)v29 + 95);
      int v31 = v30;
      size_t v32 = v30 & 0x7F;
      if (v31 >= 0) {
        size_t v33 = v32;
      }
      else {
        size_t v33 = *((void *)v29 + 10);
      }
      char v34 = *((unsigned char *)v29 + 47);
      int v35 = v34;
      size_t v36 = v34 & 0x7F;
      if (v35 >= 0) {
        size_t v37 = v36;
      }
      else {
        size_t v37 = *((void *)v29 + 4);
      }
      if (v37 >= v33) {
        size_t v38 = v33;
      }
      else {
        size_t v38 = v37;
      }
      if (v38
        && (v35 >= 0 ? (unsigned int v39 = (char *)v29 + 24) : (unsigned int v39 = (const void *)*((void *)v29 + 3)),
            v31 >= 0 ? (size_t v40 = (char *)v29 + 72) : (size_t v40 = (const void *)*((void *)v29 + 9)),
            (int v41 = memcmp(v40, v39, v38)) != 0))
      {
        if ((v41 & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      else if (v33 == v37)
      {
        if (!*((unsigned char *)v29 + 56) || *((unsigned char *)v29 + 8)) {
          goto LABEL_91;
        }
      }
      else if (v33 >= v37)
      {
        goto LABEL_91;
      }
      long long v102 = *v28;
      int v104 = *((_DWORD *)v28 + 4);
      uint64_t v107 = *((void *)v29 + 11);
      long long v106 = *(long long *)((char *)v29 + 72);
      *((void *)v29 + 10) = 0;
      *((void *)v29 + 11) = 0;
      *((void *)v29 + 9) = 0;
      if (v107 >= 0) {
        size_t v42 = HIBYTE(v107) & 0x7F;
      }
      else {
        size_t v42 = *((void *)&v106 + 1);
      }
      if (v107 >= 0) {
        int v43 = &v106;
      }
      else {
        int v43 = (long long *)v106;
      }
      char v44 = *((unsigned char *)v28 + 47);
      for (uint64_t i = v27; ; i -= 48)
      {
        uint64_t v46 = (uint64_t)v7 + i;
        *(_OWORD *)(v46 + 48) = *(long long *)((char *)v7 + i);
        *(_DWORD *)(v46 + 64) = *(_DWORD *)((char *)v7 + i + 16);
        std::string::size_type v47 = (void **)((char *)v7 + i + 72);
        if (v44 < 0) {
          operator delete(*v47);
        }
        *(_OWORD *)std::string::size_type v47 = *(_OWORD *)(v46 + 24);
        *(void *)((char *)v7 + i + 88) = *(void *)(v46 + 40);
        *(unsigned char *)(v46 + 47) = 0;
        *(unsigned char *)(v46 + 24) = 0;
        if (!i)
        {
          uint64_t v59 = v7;
          goto LABEL_90;
        }
        uint64_t v48 = (uint64_t)v7 + i;
        char v49 = *((unsigned char *)v7 + i - 1);
        int v50 = v49;
        size_t v51 = v49 & 0x7F;
        if (v50 >= 0) {
          size_t v52 = v51;
        }
        else {
          size_t v52 = *(void *)((char *)v7 + i - 16);
        }
        if (v52 >= v42) {
          size_t v53 = v42;
        }
        else {
          size_t v53 = v52;
        }
        if (v53)
        {
          uint64_t v56 = *(void *)(v48 - 24);
          uint64_t v54 = v48 - 24;
          uint64_t v55 = v56;
          char v57 = (const void *)(v50 >= 0 ? v54 : v55);
          int v58 = memcmp(v43, v57, v53);
          if (v58)
          {
            if ((v58 & 0x80000000) == 0) {
              goto LABEL_89;
            }
            goto LABEL_87;
          }
        }
        if (v42 == v52) {
          break;
        }
        if (v42 >= v52) {
          goto LABEL_89;
        }
LABEL_87:
        char v44 = 0;
      }
      if (BYTE8(v102) && !*((unsigned char *)v7 + i - 40)) {
        goto LABEL_87;
      }
LABEL_89:
      uint64_t v59 = (long long *)((char *)v7 + i);
LABEL_90:
      *uint64_t v59 = v102;
      *((_DWORD *)v59 + 4) = v104;
      uint64_t v60 = (uint64_t)v7 + i;
      *(_OWORD *)(v60 + 24) = v106;
      *(void *)(v60 + 40) = v107;
      uint64_t v6 = a2;
LABEL_91:
      unint64_t v26 = v28 + 3;
      v27 += 48;
      if (v28 + 3 == v6) {
        return;
      }
    }
  }
  unint64_t v23 = a3 >> 1;
  uint64_t v24 = &a1[3 * (a3 >> 1)];
  unint64_t v25 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_1CC22EB90(a1, v24, v25, a4, a5);
    sub_1CC22EB90(&v7[3 * (a3 >> 1)], v6, a3 - (a3 >> 1), a4, a5);
    sub_1CC22F850((char *)v7, &v7[3 * (a3 >> 1)], v6, a3 >> 1, a3 - (a3 >> 1), a4, a5);
    return;
  }
  __n128 v61 = sub_1CC22F224(a1, v24, v25, (uint64_t)a4, a6);
  uint64_t v62 = (uint64_t)&a4[3 * v23];
  sub_1CC22F224(&v7[3 * (a3 >> 1)], v6, a3 - (a3 >> 1), v62, v61);
  char v63 = &a4[3 * a3];
  uint64_t v64 = v62;
  std::string v65 = a4;
  while ((long long *)v64 != v63)
  {
    char v66 = *(unsigned char *)(v64 + 47);
    int v67 = v66;
    size_t v68 = v66 & 0x7F;
    if (v67 >= 0) {
      size_t v69 = v68;
    }
    else {
      size_t v69 = *(void *)(v64 + 32);
    }
    char v70 = *((unsigned char *)v65 + 47);
    int v71 = v70;
    size_t v72 = v70 & 0x7F;
    if (v71 >= 0) {
      size_t v73 = v72;
    }
    else {
      size_t v73 = *((void *)v65 + 4);
    }
    if (v73 >= v69) {
      size_t v74 = v69;
    }
    else {
      size_t v74 = v73;
    }
    if (v74
      && (v71 >= 0 ? (size_t v75 = (char *)v65 + 24) : (size_t v75 = (const void *)*((void *)v65 + 3)),
          v67 >= 0 ? (size_t v76 = (const void *)(v64 + 24)) : (size_t v76 = *(const void **)(v64 + 24)),
          (int v77 = memcmp(v76, v75, v74)) != 0))
    {
      if ((v77 & 0x80000000) == 0) {
        goto LABEL_121;
      }
    }
    else if (v69 == v73)
    {
      if (!*(unsigned char *)(v64 + 8) || *((unsigned char *)v65 + 8))
      {
LABEL_121:
        long long v81 = *v65;
        *((_DWORD *)v7 + 4) = *((_DWORD *)v65 + 4);
        *uint64_t v7 = v81;
        unint64_t v82 = (void **)v7 + 3;
        if (*((char *)v7 + 47) < 0) {
          operator delete(*v82);
        }
        long long v83 = *(long long *)((char *)v65 + 24);
        *((void *)v7 + 5) = *((void *)v65 + 5);
        *(_OWORD *)unint64_t v82 = v83;
        *((unsigned char *)v65 + 47) = 0;
        *((unsigned char *)v65 + 24) = 0;
        v65 += 3;
        goto LABEL_124;
      }
    }
    else if (v69 >= v73)
    {
      goto LABEL_121;
    }
    long long v78 = *(_OWORD *)v64;
    *((_DWORD *)v7 + 4) = *(_DWORD *)(v64 + 16);
    *uint64_t v7 = v78;
    uint64_t v79 = (void **)v7 + 3;
    if (*((char *)v7 + 47) < 0) {
      operator delete(*v79);
    }
    long long v80 = *(_OWORD *)(v64 + 24);
    *((void *)v7 + 5) = *(void *)(v64 + 40);
    *(_OWORD *)uint64_t v79 = v80;
    *(unsigned char *)(v64 + 47) = 0;
    *(unsigned char *)(v64 + 24) = 0;
    v64 += 48;
LABEL_124:
    v7 += 3;
    if (v65 == (long long *)v62)
    {
      if ((long long *)v64 != v63)
      {
        uint64_t v84 = 0;
        do
        {
          uint64_t v85 = v64 + v84 * 16;
          uint64_t v86 = &v7[v84];
          long long v87 = *(_OWORD *)(v64 + v84 * 16);
          *((_DWORD *)v86 + 4) = *(_DWORD *)(v64 + v84 * 16 + 16);
          *uint64_t v86 = v87;
          if (SHIBYTE(v7[v84 + 2]) < 0) {
            operator delete(*((void **)v86 + 3));
          }
          long long v88 = *(_OWORD *)(v85 + 24);
          *((void *)v86 + 5) = *(void *)(v85 + 40);
          *(long long *)((char *)v86 + 24) = v88;
          *(unsigned char *)(v85 + 47) = 0;
          *(unsigned char *)(v85 + 24) = 0;
          v84 += 3;
        }
        while ((long long *)(v85 + 48) != v63);
      }
      goto LABEL_138;
    }
  }
  if (v65 != (long long *)v62)
  {
    uint64_t v93 = 0;
    do
    {
      uint64_t v94 = &v7[v93];
      std::error_code v95 = &v65[v93];
      long long v96 = v65[v93];
      *((_DWORD *)v94 + 4) = v65[v93 + 1];
      *uint64_t v94 = v96;
      uint64_t v97 = (void **)&v7[v93 + 1] + 1;
      if (SHIBYTE(v7[v93 + 2]) < 0) {
        operator delete(*v97);
      }
      long long v98 = *(long long *)((char *)v95 + 24);
      *((void *)&v7[v93 + 2] + 1) = *((void *)v95 + 5);
      *(_OWORD *)uint64_t v97 = v98;
      *((unsigned char *)v95 + 47) = 0;
      *((unsigned char *)v95 + 24) = 0;
      v93 += 3;
    }
    while (v95 + 3 != (long long *)v62);
  }
LABEL_138:
  if (a4)
  {
    unint64_t v99 = a3;
    size_t v100 = (void **)a4 + 3;
    do
    {
      if (*((char *)v100 + 23) < 0) {
        operator delete(*v100);
      }
      v100 += 6;
      --v99;
    }
    while (v99);
  }
}

__n128 sub_1CC22F224(long long *a1, long long *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (!a3) {
    return result;
  }
  uint64_t v5 = a4;
  uint64_t v7 = a2;
  char v8 = a1;
  if (a3 == 2)
  {
    size_t v11 = a2 - 3;
    char v12 = *((unsigned char *)a2 - 1);
    int v13 = v12;
    size_t v14 = v12 & 0x7F;
    if (v13 >= 0) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = *((void *)a2 - 2);
    }
    char v16 = *((unsigned char *)a1 + 47);
    int v17 = v16;
    size_t v18 = v16 & 0x7F;
    if (v17 >= 0) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = *((void *)a1 + 4);
    }
    if (v19 >= v15) {
      size_t v20 = v15;
    }
    else {
      size_t v20 = v19;
    }
    if (v20
      && (v17 >= 0 ? (__int16 v21 = (char *)a1 + 24) : (__int16 v21 = (const void *)*((void *)a1 + 3)),
          v13 >= 0 ? (uint64_t v22 = (void *)v7 - 3) : (uint64_t v22 = (void *)*((void *)v7 - 3)),
          (int v23 = memcmp(v22, v21, v20)) != 0))
    {
      if (v23 < 0) {
        goto LABEL_93;
      }
    }
    else if (v15 == v19)
    {
      if (*((unsigned char *)v7 - 40) && !*((unsigned char *)v8 + 8)) {
        goto LABEL_93;
      }
    }
    else if (v15 < v19)
    {
LABEL_93:
      long long v62 = *v11;
      *(_DWORD *)(v5 + 16) = *((_DWORD *)v7 - 8);
      *(_OWORD *)uint64_t v5 = v62;
      long long v63 = *(long long *)((char *)v7 - 24);
      *(void *)(v5 + 40) = *((void *)v7 - 1);
      *(_OWORD *)(v5 + 24) = v63;
      *((void *)v7 - 2) = 0;
      *((void *)v7 - 1) = 0;
      *((void *)v7 - 3) = 0;
      long long v64 = *v8;
      *(_DWORD *)(v5 + 64) = *((_DWORD *)v8 + 4);
      *(_OWORD *)(v5 + 48) = v64;
      size_t v10 = (void *)v8 + 3;
      double result = *(__n128 *)((char *)v8 + 24);
      uint64_t v65 = *((void *)v8 + 5);
LABEL_128:
      *(void *)(v5 + 88) = v65;
      *(__n128 *)(v5 + 72) = result;
      goto LABEL_129;
    }
    long long v86 = *v8;
    *(_DWORD *)(v5 + 16) = *((_DWORD *)v8 + 4);
    *(_OWORD *)uint64_t v5 = v86;
    long long v87 = *(long long *)((char *)v8 + 24);
    *(void *)(v5 + 40) = *((void *)v8 + 5);
    *(_OWORD *)(v5 + 24) = v87;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 3) = 0;
    long long v88 = *v11;
    *(_DWORD *)(v5 + 64) = *((_DWORD *)v7 - 8);
    *(_OWORD *)(v5 + 48) = v88;
    size_t v10 = (void *)v7 - 3;
    double result = *(__n128 *)((char *)v7 - 24);
    uint64_t v65 = *((void *)v7 - 1);
    goto LABEL_128;
  }
  if (a3 == 1)
  {
    long long v9 = *a1;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
    *(_OWORD *)a4 = v9;
    size_t v10 = (void *)a1 + 3;
    double result = *(__n128 *)((char *)a1 + 24);
    *(void *)(a4 + 40) = *((void *)a1 + 5);
    *(__n128 *)(a4 + 24) = result;
LABEL_129:
    *size_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    char v66 = &a1[3 * (a3 >> 1)];
    sub_1CC22EB90(a1, v66, a3 >> 1, a4, a3 >> 1);
    sub_1CC22EB90(&v8[3 * (a3 >> 1)], v7, a3 - (a3 >> 1), v5 + 48 * (a3 >> 1), a3 - (a3 >> 1));
    int v67 = &v8[3 * (a3 >> 1)];
    while (1)
    {
      if (v67 == v7)
      {
        if (v8 != v66)
        {
          uint64_t v89 = 0;
          do
          {
            uint64_t v90 = v5 + v89 * 16;
            long long v91 = &v8[v89];
            long long v92 = v8[v89];
            *(_DWORD *)(v90 + 16) = v8[v89 + 1];
            *(_OWORD *)uint64_t v90 = v92;
            double result = *(__n128 *)((char *)&v8[v89 + 1] + 8);
            *(void *)(v90 + 40) = *((void *)&v8[v89 + 2] + 1);
            *(__n128 *)(v90 + 24) = result;
            *((void *)v91 + 4) = 0;
            *((void *)v91 + 5) = 0;
            *((void *)v91 + 3) = 0;
            v89 += 3;
          }
          while (v91 + 3 != v66);
        }
        return result;
      }
      char v68 = *((unsigned char *)v67 + 47);
      int v69 = v68;
      size_t v70 = v68 & 0x7F;
      if (v69 >= 0) {
        size_t v71 = v70;
      }
      else {
        size_t v71 = *((void *)v67 + 4);
      }
      char v72 = *((unsigned char *)v8 + 47);
      int v73 = v72;
      size_t v74 = v72 & 0x7F;
      if (v73 >= 0) {
        size_t v75 = v74;
      }
      else {
        size_t v75 = *((void *)v8 + 4);
      }
      if (v75 >= v71) {
        size_t v76 = v71;
      }
      else {
        size_t v76 = v75;
      }
      if (v76
        && (v73 >= 0 ? (int v77 = (char *)v8 + 24) : (int v77 = (const void *)*((void *)v8 + 3)),
            v69 >= 0 ? (long long v78 = (char *)v67 + 24) : (long long v78 = (const void *)*((void *)v67 + 3)),
            (int v79 = memcmp(v78, v77, v76)) != 0))
      {
        if ((v79 & 0x80000000) == 0) {
          goto LABEL_120;
        }
      }
      else if (v71 == v75)
      {
        if (!*((unsigned char *)v67 + 8) || *((unsigned char *)v8 + 8))
        {
LABEL_120:
          long long v81 = *v8;
          *(_DWORD *)(v5 + 16) = *((_DWORD *)v8 + 4);
          *(_OWORD *)uint64_t v5 = v81;
          double result = *(__n128 *)((char *)v8 + 24);
          *(void *)(v5 + 40) = *((void *)v8 + 5);
          *(__n128 *)(v5 + 24) = result;
          *((void *)v8 + 4) = 0;
          *((void *)v8 + 5) = 0;
          *((void *)v8 + 3) = 0;
          v8 += 3;
          goto LABEL_121;
        }
      }
      else if (v71 >= v75)
      {
        goto LABEL_120;
      }
      long long v80 = *v67;
      *(_DWORD *)(v5 + 16) = *((_DWORD *)v67 + 4);
      *(_OWORD *)uint64_t v5 = v80;
      double result = *(__n128 *)((char *)v67 + 24);
      *(void *)(v5 + 40) = *((void *)v67 + 5);
      *(__n128 *)(v5 + 24) = result;
      *((void *)v67 + 4) = 0;
      *((void *)v67 + 5) = 0;
      *((void *)v67 + 3) = 0;
      v67 += 3;
LABEL_121:
      v5 += 48;
      if (v8 == v66)
      {
        if (v67 != v7)
        {
          uint64_t v82 = 0;
          do
          {
            long long v83 = &v67[v82];
            uint64_t v84 = v5 + v82 * 16;
            long long v85 = v67[v82];
            *(_DWORD *)(v84 + 16) = v67[v82 + 1];
            *(_OWORD *)uint64_t v84 = v85;
            double result = *(__n128 *)((char *)&v67[v82 + 1] + 8);
            *(void *)(v84 + 40) = *((void *)&v67[v82 + 2] + 1);
            *(__n128 *)(v84 + 24) = result;
            *((void *)v83 + 4) = 0;
            *((void *)v83 + 5) = 0;
            *((void *)v83 + 3) = 0;
            v82 += 3;
          }
          while (v83 + 3 != v7);
        }
        return result;
      }
    }
  }
  if (a1 == a2) {
    return result;
  }
  long long v24 = *a1;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
  *(_OWORD *)a4 = v24;
  double result = *(__n128 *)((char *)a1 + 24);
  *(void *)(a4 + 40) = *((void *)a1 + 5);
  *(__n128 *)(a4 + 24) = result;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 3) = 0;
  unint64_t v25 = a1 + 3;
  if (a1 + 3 == a2) {
    return result;
  }
  uint64_t v26 = 0;
  uint64_t v27 = (_OWORD *)a4;
  do
  {
    int v28 = v25;
    uint64_t v29 = v27 + 3;
    char v30 = *((unsigned char *)v8 + 95);
    int v31 = v30;
    size_t v32 = v30 & 0x7F;
    if (v31 >= 0) {
      size_t v33 = v32;
    }
    else {
      size_t v33 = *((void *)v8 + 10);
    }
    char v34 = *((unsigned char *)v27 + 47);
    int v35 = v34;
    size_t v36 = v34 & 0x7F;
    if (v35 >= 0) {
      size_t v37 = v36;
    }
    else {
      size_t v37 = *((void *)v27 + 4);
    }
    if (v37 >= v33) {
      size_t v38 = v33;
    }
    else {
      size_t v38 = v37;
    }
    if (v38
      && (v35 >= 0 ? (unsigned int v39 = (char *)v27 + 24) : (unsigned int v39 = (const void *)*((void *)v27 + 3)),
          v31 >= 0 ? (size_t v40 = (char *)v8 + 72) : (size_t v40 = (const void *)*((void *)v8 + 9)),
          (int v41 = memcmp(v40, v39, v38)) != 0))
    {
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_81;
      }
    }
    else if (v33 == v37)
    {
      if (!*((unsigned char *)v8 + 56) || *((unsigned char *)v27 + 8))
      {
LABEL_81:
        long long v59 = *v28;
        *((_DWORD *)v27 + 16) = *((_DWORD *)v28 + 4);
        *uint64_t v29 = v59;
        double result = *(__n128 *)((char *)v8 + 72);
        *((void *)v27 + 11) = *((void *)v8 + 11);
        *(__n128 *)((char *)v27 + 72) = result;
        *((void *)v8 + 10) = 0;
        *((void *)v8 + 11) = 0;
        *((void *)v8 + 9) = 0;
        goto LABEL_88;
      }
    }
    else if (v33 >= v37)
    {
      goto LABEL_81;
    }
    *uint64_t v29 = *v27;
    *((_DWORD *)v27 + 16) = *((_DWORD *)v27 + 4);
    *(_OWORD *)((char *)v27 + 72) = *(_OWORD *)((char *)v27 + 24);
    *((void *)v27 + 11) = *((void *)v27 + 5);
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = 0;
    size_t v42 = (_OWORD *)v5;
    *((void *)v27 + 5) = 0;
    if (v27 == (_OWORD *)v5) {
      goto LABEL_85;
    }
    uint64_t v94 = v27 + 3;
    uint64_t v43 = v26;
    while (1)
    {
      uint64_t v44 = v5 + v43;
      char v45 = *((unsigned char *)v8 + 95);
      int v46 = v45;
      size_t v47 = v45 & 0x7F;
      if (v46 >= 0) {
        size_t v48 = v47;
      }
      else {
        size_t v48 = *((void *)v8 + 10);
      }
      char v49 = *(unsigned char *)(v44 - 1);
      int v50 = v49;
      size_t v51 = v49 & 0x7F;
      if (v50 >= 0) {
        size_t v52 = v51;
      }
      else {
        size_t v52 = *(void *)(v44 - 16);
      }
      if (v52 >= v48) {
        size_t v53 = v48;
      }
      else {
        size_t v53 = v52;
      }
      if (v53)
      {
        uint64_t v54 = v50 >= 0 ? (const void *)(v44 - 24) : *(const void **)(v44 - 24);
        uint64_t v55 = v46 >= 0 ? (char *)v8 + 72 : (char *)*((void *)v8 + 9);
        int v56 = memcmp(v55, v54, v53);
        if (v56)
        {
          if ((v56 & 0x80000000) == 0) {
            goto LABEL_82;
          }
          goto LABEL_76;
        }
      }
      if (v48 != v52) {
        break;
      }
      if (!*((unsigned char *)v8 + 56) || *(unsigned char *)(v5 + v43 - 40))
      {
LABEL_82:
        size_t v42 = v27;
        goto LABEL_84;
      }
LABEL_76:
      *(_OWORD *)uint64_t v44 = *(_OWORD *)(v44 - 48);
      *(_DWORD *)(v44 + 16) = *(_DWORD *)(v44 - 32);
      uint64_t v57 = v5 + v43;
      int v58 = (void **)(v5 + v43 + 24);
      if (*(char *)(v5 + v43 + 47) < 0) {
        operator delete(*v58);
      }
      v27 -= 3;
      *(_OWORD *)int v58 = *(_OWORD *)(v57 - 24);
      *(void *)(v5 + v43 + 40) = *(void *)(v57 - 8);
      *(unsigned char *)(v44 - 1) = 0;
      *(unsigned char *)(v57 - 24) = 0;
      v43 -= 48;
      if (!v43)
      {
        size_t v42 = (_OWORD *)v5;
        goto LABEL_84;
      }
    }
    if (v48 < v52) {
      goto LABEL_76;
    }
    size_t v42 = (_OWORD *)(v5 + v43);
LABEL_84:
    uint64_t v7 = a2;
    uint64_t v29 = v94;
LABEL_85:
    long long v60 = *v28;
    *((_DWORD *)v42 + 4) = *((_DWORD *)v28 + 4);
    *size_t v42 = v60;
    uint64_t v61 = (uint64_t)v42 + 24;
    if (*((char *)v42 + 47) < 0) {
      operator delete(*(void **)v61);
    }
    double result = *(__n128 *)((char *)v8 + 72);
    *(void *)(v61 + 16) = *((void *)v8 + 11);
    *(__n128 *)uint64_t v61 = result;
    *((unsigned char *)v8 + 95) = 0;
    *((unsigned char *)v8 + 72) = 0;
LABEL_88:
    unint64_t v25 = v28 + 3;
    v26 += 48;
    uint64_t v27 = v29;
    char v8 = v28;
  }
  while (v28 + 3 != v7);
  return result;
}

void sub_1CC22F850(char *a1, long long *a2, long long *a3, int64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v178 = a5;
  if (!a5) {
    return;
  }
  while (a4 > a7 && v178 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v10 = 0;
    char v11 = *((unsigned char *)a2 + 47);
    int v12 = v11;
    int v13 = (void *)a2 + 3;
    size_t v14 = v11 & 0x7F;
    if (v12 >= 0) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = *((void *)a2 + 4);
    }
    uint64_t v16 = -a4;
    while (1)
    {
      int v17 = (long long *)&a1[v10];
      char v18 = a1[v10 + 47];
      int v19 = v18;
      size_t v20 = v18 & 0x7F;
      if (v19 >= 0) {
        size_t v21 = v20;
      }
      else {
        size_t v21 = *(void *)&a1[v10 + 32];
      }
      if (v21 >= v15) {
        size_t v22 = v15;
      }
      else {
        size_t v22 = v21;
      }
      if (v22)
      {
        uint64_t v25 = *((void *)v17 + 3);
        uint64_t v23 = (uint64_t)v17 + 24;
        uint64_t v24 = v25;
        uint64_t v26 = (const void *)(v19 >= 0 ? v23 : v24);
        uint64_t v27 = v12 >= 0 ? (char *)a2 + 24 : (char *)*v13;
        int v28 = memcmp(v27, v26, v22);
        if (v28)
        {
          if (v28 < 0) {
            break;
          }
          goto LABEL_30;
        }
      }
      if (v15 != v21)
      {
        if (v15 < v21) {
          break;
        }
        goto LABEL_30;
      }
      if (*((unsigned char *)a2 + 8) && !a1[v10 + 8]) {
        break;
      }
LABEL_30:
      v10 += 48;
      if (__CFADD__(v16++, 1)) {
        return;
      }
    }
    uint64_t v30 = -v16;
    size_t v179 = a1;
    v170 = (long long *)&a1[v10];
    if (-v16 >= v178)
    {
      if (v16 == -1)
      {
        unint64_t v151 = (long long *)&a1[v10];
        int v188 = *(_DWORD *)&a1[v10 + 16];
        long long v185 = *(_OWORD *)&a1[v10];
        uint64_t v152 = *(void *)&a1[v10 + 24];
        *(void *)((char *)&v182 + 7) = *(void *)&a1[v10 + 39];
        *(void *)&long long v182 = *(void *)&a1[v10 + 32];
        *((void *)v151 + 4) = 0;
        *((void *)v151 + 5) = 0;
        *((void *)v151 + 3) = 0;
        long long v153 = *a2;
        *((_DWORD *)v151 + 4) = *((_DWORD *)a2 + 4);
        long long *v151 = v153;
        long long v154 = *(_OWORD *)v13;
        *((void *)v151 + 5) = *((void *)a2 + 5);
        *(long long *)((char *)v151 + 24) = v154;
        *a2 = v185;
        *((_DWORD *)a2 + 4) = v188;
        *((void *)a2 + 3) = v152;
        *((void *)a2 + 4) = v182;
        *(void *)((char *)a2 + 39) = *(void *)((char *)&v182 + 7);
        *((unsigned char *)a2 + 47) = v19;
        return;
      }
      if (v16 > 0) {
        uint64_t v30 = 1 - v16;
      }
      uint64_t v169 = v30 >> 1;
      size_t v32 = (char *)a3;
      if (a3 == a2)
      {
LABEL_113:
        unint64_t v58 = v169;
        size_t v33 = (long long *)&a1[48 * v169 + v10];
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (char *)a2) >> 4);
        goto LABEL_114;
      }
      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
      uint64_t v61 = (long long *)&a1[48 * v169 + v10];
      char v62 = *((unsigned char *)v61 + 47);
      int v63 = v62;
      size_t v64 = v62 & 0x7F;
      int v177 = v63;
      if (v63 >= 0) {
        size_t v65 = v64;
      }
      else {
        size_t v65 = *((void *)v61 + 4);
      }
      uint64_t v175 = (long long *)&a1[48 * v169 + v10];
      char v66 = (void *)v61 + 3;
      size_t v32 = (char *)a2;
      while (2)
      {
        unint64_t v67 = v60 >> 1;
        char v68 = &v32[48 * (v60 >> 1)];
        char v69 = v68[47];
        int v70 = v69;
        size_t v71 = v69 & 0x7F;
        if (v70 >= 0) {
          size_t v72 = v71;
        }
        else {
          size_t v72 = *((void *)v68 + 4);
        }
        if (v65 >= v72) {
          size_t v73 = v72;
        }
        else {
          size_t v73 = v65;
        }
        if (v73)
        {
          size_t v74 = v177 >= 0 ? v66 : (void *)*v66;
          size_t v75 = &v32[48 * v67];
          long long v78 = (void *)*((void *)v75 + 3);
          size_t v76 = v75 + 24;
          int v77 = v78;
          int v79 = v70 >= 0 ? v76 : v77;
          int v80 = memcmp(v79, v74, v73);
          if (v80)
          {
            unsigned int v81 = (v80 >> 31) | 1;
            goto LABEL_106;
          }
        }
        if (v72 == v65)
        {
          if (v68[8]) {
            BOOL v82 = *((unsigned char *)v175 + 8) == 0;
          }
          else {
            BOOL v82 = 0;
          }
          int v83 = v82;
          a1 = v179;
        }
        else
        {
          if (v72 < v65) {
            unsigned int v81 = -1;
          }
          else {
            unsigned int v81 = 1;
          }
LABEL_106:
          a1 = v179;
          int v83 = v81 >> 31;
        }
        if (v83) {
          v60 += ~v67;
        }
        else {
          v60 >>= 1;
        }
        if (v83) {
          size_t v32 = v68 + 48;
        }
        if (!v60) {
          goto LABEL_113;
        }
        continue;
      }
    }
    if (v178 >= 0) {
      uint64_t v31 = v178;
    }
    else {
      uint64_t v31 = v178 + 1;
    }
    uint64_t v168 = v31 >> 1;
    size_t v32 = (char *)&a2[3 * (v31 >> 1)];
    size_t v33 = a2;
    if (&a1[v10] != (char *)a2)
    {
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - a1 - v10) >> 4);
      char v35 = v32[47];
      int v36 = v35;
      size_t v33 = (long long *)&a1[v10];
      size_t v37 = &a2[3 * v168];
      int v174 = (const void **)v37 + 3;
      size_t v38 = *((void *)v37 + 4);
      size_t v39 = v35 & 0x7F;
      int v176 = v36;
      if (v36 >= 0) {
        size_t v40 = v39;
      }
      else {
        size_t v40 = v38;
      }
      do
      {
        unint64_t v41 = v34 >> 1;
        size_t v42 = &v33[3 * (v34 >> 1)];
        char v43 = *((unsigned char *)v42 + 47);
        int v44 = v43;
        size_t v45 = v43 & 0x7F;
        if (v44 >= 0) {
          size_t v46 = v45;
        }
        else {
          size_t v46 = *((void *)v42 + 4);
        }
        if (v46 >= v40) {
          size_t v47 = v40;
        }
        else {
          size_t v47 = v46;
        }
        if (v47
          && ((size_t v48 = &v33[3 * v41], v51 = (const void *)*((void *)v48 + 3),
                                    char v49 = (char *)v48 + 24,
                                    int v50 = v51,
                                    v44 >= 0)
            ? (size_t v52 = v49)
            : (size_t v52 = v50),
              v176 >= 0 ? (size_t v53 = v174) : (size_t v53 = *v174),
              (int v54 = memcmp(v53, v52, v47)) != 0))
        {
          unsigned int v55 = (v54 >> 31) | 1;
        }
        else
        {
          if (v40 == v46)
          {
            if (v32[8]) {
              BOOL v56 = *((unsigned char *)v42 + 8) == 0;
            }
            else {
              BOOL v56 = 0;
            }
            int v57 = v56;
            goto LABEL_67;
          }
          if (v40 < v46) {
            unsigned int v55 = -1;
          }
          else {
            unsigned int v55 = 1;
          }
        }
        int v57 = v55 >> 31;
LABEL_67:
        if (v57)
        {
          v34 >>= 1;
        }
        else
        {
          size_t v33 = v42 + 3;
          v34 += ~v41;
        }
      }
      while (v34);
    }
    unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - v179 - v10) >> 4);
    unint64_t v59 = v168;
LABEL_114:
    a1 = v32;
    if (v33 != a2)
    {
      a1 = (char *)v33;
      if (a2 != (long long *)v32)
      {
        uint64_t v84 = v33 + 3;
        a1 = (char *)a2;
        while (1)
        {
          int v186 = *((_DWORD *)v84 - 8);
          long long v183 = *(v84 - 3);
          uint64_t v85 = *((void *)v84 - 3);
          *(void *)((char *)&v180 + 7) = *(void *)((char *)v84 - 9);
          *(void *)&long long v180 = *((void *)v84 - 2);
          char v86 = *((unsigned char *)v84 - 1);
          *((void *)v84 - 3) = 0;
          *((void *)v84 - 2) = 0;
          *((void *)v84 - 1) = 0;
          long long v87 = *a2;
          *((_DWORD *)v84 - 8) = *((_DWORD *)a2 + 4);
          *(v84 - 3) = v87;
          long long v88 = *(long long *)((char *)a2 + 24);
          *((void *)v84 - 1) = *((void *)a2 + 5);
          *(long long *)((char *)v84 - 24) = v88;
          *a2 = v183;
          *((_DWORD *)a2 + 4) = v186;
          *((void *)a2 + 3) = v85;
          *(void *)((char *)a2 + 39) = *(void *)((char *)&v180 + 7);
          *((void *)a2 + 4) = v180;
          *((unsigned char *)a2 + 47) = v86;
          a2 += 3;
          if (a2 == (long long *)v32) {
            break;
          }
          if (v84 == (long long *)a1) {
            a1 = (char *)a2;
          }
          v84 += 3;
        }
        if (v84 != (long long *)a1)
        {
          uint64_t v89 = (char *)v84;
          uint64_t v90 = a1;
          do
          {
            while (1)
            {
              int v187 = *((_DWORD *)v89 + 4);
              long long v184 = *(_OWORD *)v89;
              uint64_t v91 = *((void *)v89 + 3);
              *(void *)&long long v181 = *((void *)v89 + 4);
              *(void *)((char *)&v181 + 7) = *(void *)(v89 + 39);
              char v92 = v89[47];
              *((void *)v89 + 4) = 0;
              *((void *)v89 + 5) = 0;
              *((void *)v89 + 3) = 0;
              long long v93 = *(_OWORD *)a1;
              *((_DWORD *)v89 + 4) = *((_DWORD *)a1 + 4);
              *(_OWORD *)uint64_t v89 = v93;
              long long v94 = *(_OWORD *)(a1 + 24);
              *((void *)v89 + 5) = *((void *)a1 + 5);
              *(_OWORD *)(v89 + 24) = v94;
              *(_OWORD *)a1 = v184;
              *((_DWORD *)a1 + 4) = v187;
              *((void *)a1 + 3) = v91;
              *((void *)a1 + 4) = v181;
              *(void *)(a1 + 39) = *(void *)((char *)&v181 + 7);
              a1[47] = v92;
              v89 += 48;
              a1 += 48;
              if (a1 == v32) {
                break;
              }
              if (v89 == v90) {
                uint64_t v90 = a1;
              }
            }
            a1 = v90;
          }
          while (v89 != v90);
          a1 = (char *)v84;
        }
      }
    }
    a4 = -(uint64_t)(v58 + v16);
    unint64_t v95 = v178 - v59;
    if ((uint64_t)(v58 + v59) >= (uint64_t)(v178 - (v58 + v59) - v16))
    {
      sub_1CC22F850(a1, v32, a3, -(uint64_t)(v58 + v16), v178 - v59, a6, a7);
      size_t v32 = (char *)v33;
      unint64_t v95 = v59;
      a4 = v58;
      a3 = (long long *)a1;
      a1 = (char *)v170;
    }
    else
    {
      sub_1CC22F850(v170, v33, a1, v58, v59, a6, a7);
    }
    uint64_t v178 = v95;
    a2 = (long long *)v32;
    if (!v95) {
      return;
    }
  }
  if (a4 > v178)
  {
    if (a2 == a3) {
      return;
    }
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    long long v98 = a6;
    unint64_t v99 = a3;
    do
    {
      size_t v100 = &a6[v96];
      size_t v101 = &a2[v96];
      long long v102 = a2[v96];
      *((_DWORD *)v100 + 4) = a2[v96 + 1];
      *size_t v100 = v102;
      long long v103 = *(long long *)((char *)&a2[v96 + 1] + 8);
      *((void *)v100 + 5) = *((void *)&a2[v96 + 2] + 1);
      *(long long *)((char *)v100 + 24) = v103;
      *((void *)v101 + 4) = 0;
      *((void *)v101 + 5) = 0;
      *((void *)v101 + 3) = 0;
      ++v97;
      v96 += 3;
    }
    while (v101 + 3 != a3);
    if (!(v96 * 16)) {
      goto LABEL_221;
    }
    int v104 = &a6[v96];
    while (1)
    {
      if (a2 == (long long *)a1)
      {
        if (v104 != a6)
        {
          unint64_t v155 = 0;
          do
          {
            size_t v156 = &v104[v155];
            int v157 = &v99[v155];
            long long v158 = v104[v155 - 3];
            *((_DWORD *)v157 - 8) = v104[v155 - 2];
            *(v157 - 3) = v158;
            uint64_t v159 = (void **)&v99[v155 - 1] - 1;
            if (SHIBYTE(v99[v155 - 1]) < 0) {
              operator delete(*v159);
            }
            long long v160 = *(long long *)((char *)v156 - 24);
            *((void *)&v99[v155 - 1] + 1) = *((void *)v156 - 1);
            *(_OWORD *)uint64_t v159 = v160;
            *((unsigned char *)v156 - 1) = 0;
            *((unsigned char *)v156 - 24) = 0;
            v155 -= 3;
          }
          while (&v104[v155] != a6);
        }
        goto LABEL_221;
      }
      long long v106 = (char *)a2 - 1;
      char v105 = *((unsigned char *)a2 - 1);
      char v107 = *((unsigned char *)v104 - 1);
      int v108 = v107;
      size_t v109 = v107 & 0x7F;
      if (v108 >= 0) {
        size_t v110 = v109;
      }
      else {
        size_t v110 = *((void *)v104 - 2);
      }
      int v111 = v105;
      size_t v112 = v105 & 0x7F;
      if (v111 >= 0) {
        size_t v113 = v112;
      }
      else {
        size_t v113 = *((void *)a2 - 2);
      }
      if (v113 >= v110) {
        size_t v114 = v110;
      }
      else {
        size_t v114 = v113;
      }
      if (v114
        && (v111 >= 0 ? (unint64_t v115 = (char *)a2 - 24) : (unint64_t v115 = (char *)*((void *)a2 - 3)),
            v108 >= 0 ? (size_t v116 = (char *)v104 - 24) : (size_t v116 = (char *)*((void *)v104 - 3)),
            (int v117 = memcmp(v116, v115, v114)) != 0))
      {
        if ((v117 & 0x80000000) == 0) {
          goto LABEL_167;
        }
      }
      else if (v110 == v113)
      {
        if (!*((unsigned char *)v104 - 40) || *((unsigned char *)a2 - 40))
        {
LABEL_167:
          long long v122 = *(v104 - 3);
          *((_DWORD *)v99 - 8) = *((_DWORD *)v104 - 8);
          *(v99 - 3) = v122;
          size_t v123 = (void **)v99 - 3;
          if (*((char *)v99 - 1) < 0) {
            operator delete(*v123);
          }
          uint64_t v120 = (char *)v104 - 24;
          long long v124 = *(long long *)((char *)v104 - 24);
          *((void *)v99 - 1) = *((void *)v104 - 1);
          *(_OWORD *)size_t v123 = v124;
          long long v106 = (char *)v104 - 1;
          v104 -= 3;
          goto LABEL_170;
        }
      }
      else if (v110 >= v113)
      {
        goto LABEL_167;
      }
      long long v118 = *(a2 - 3);
      *((_DWORD *)v99 - 8) = *((_DWORD *)a2 - 8);
      *(v99 - 3) = v118;
      uint64_t v119 = (void **)v99 - 3;
      if (*((char *)v99 - 1) < 0) {
        operator delete(*v119);
      }
      uint64_t v120 = (char *)a2 - 24;
      long long v121 = *(long long *)((char *)a2 - 24);
      *((void *)v99 - 1) = *((void *)a2 - 1);
      *(_OWORD *)uint64_t v119 = v121;
      a2 -= 3;
LABEL_170:
      *long long v106 = 0;
      *uint64_t v120 = 0;
      v99 -= 3;
      if (v104 == a6) {
        goto LABEL_221;
      }
    }
  }
  if (a1 == (char *)a2) {
    return;
  }
  unint64_t v125 = 0;
  uint64_t v97 = 0;
  long long v98 = a6;
  do
  {
    int64_t v126 = &a6[v125 / 0x10];
    uint64_t v127 = (long long *)&a1[v125];
    long long v128 = *(_OWORD *)&a1[v125];
    *((_DWORD *)v126 + 4) = *(_DWORD *)&a1[v125 + 16];
    *int64_t v126 = v128;
    long long v129 = *(_OWORD *)&a1[v125 + 24];
    *((void *)v126 + 5) = *(void *)&a1[v125 + 40];
    *(long long *)((char *)v126 + 24) = v129;
    *((void *)v127 + 4) = 0;
    *((void *)v127 + 5) = 0;
    *((void *)v127 + 3) = 0;
    ++v97;
    v125 += 48;
  }
  while (v127 + 3 != a2);
  if (!v125) {
    goto LABEL_221;
  }
  size_t v130 = &a6[v125 / 0x10];
  uint64_t v131 = (uint64_t)&a6[v125 / 0x10 - 3];
  unint64_t v132 = a6;
  while (a2 != a3)
  {
    char v133 = *((unsigned char *)a2 + 47);
    int v134 = v133;
    size_t v135 = v133 & 0x7F;
    if (v134 >= 0) {
      size_t v136 = v135;
    }
    else {
      size_t v136 = *((void *)a2 + 4);
    }
    char v137 = *((unsigned char *)v132 + 47);
    int v138 = v137;
    size_t v139 = v137 & 0x7F;
    if (v138 >= 0) {
      size_t v140 = v139;
    }
    else {
      size_t v140 = *((void *)v132 + 4);
    }
    if (v140 >= v136) {
      size_t v141 = v136;
    }
    else {
      size_t v141 = v140;
    }
    if (v141
      && (v138 >= 0 ? (unint64_t v142 = (char *)v132 + 24) : (unint64_t v142 = (const void *)*((void *)v132 + 3)),
          v134 >= 0 ? (size_t v143 = (char *)a2 + 24) : (size_t v143 = (const void *)*((void *)a2 + 3)),
          (int v144 = memcmp(v143, v142, v141)) != 0))
    {
      if ((v144 & 0x80000000) == 0) {
        goto LABEL_204;
      }
    }
    else if (v136 == v140)
    {
      if (!*((unsigned char *)a2 + 8) || *((unsigned char *)v132 + 8))
      {
LABEL_204:
        long long v148 = *v132;
        *((_DWORD *)a1 + 4) = *((_DWORD *)v132 + 4);
        *(_OWORD *)a1 = v148;
        uint64_t v149 = (void **)(a1 + 24);
        if (a1[47] < 0) {
          operator delete(*v149);
        }
        long long v150 = *(long long *)((char *)v132 + 24);
        *((void *)a1 + 5) = *((void *)v132 + 5);
        *(_OWORD *)uint64_t v149 = v150;
        *((unsigned char *)v132 + 47) = 0;
        *((unsigned char *)v132 + 24) = 0;
        v132 += 3;
        goto LABEL_207;
      }
    }
    else if (v136 >= v140)
    {
      goto LABEL_204;
    }
    long long v145 = *a2;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v145;
    uint64_t v146 = (void **)(a1 + 24);
    if (a1[47] < 0) {
      operator delete(*v146);
    }
    long long v147 = *(long long *)((char *)a2 + 24);
    *((void *)a1 + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v146 = v147;
    *((unsigned char *)a2 + 47) = 0;
    *((unsigned char *)a2 + 24) = 0;
    a2 += 3;
LABEL_207:
    a1 += 48;
    if (v130 == v132) {
      goto LABEL_221;
    }
  }
  if (v130 != v132)
  {
    uint64_t v161 = 0;
    do
    {
      size_t v162 = (long long *)&a1[v161 * 16];
      size_t v163 = &v132[v161];
      long long v164 = v132[v161];
      *((_DWORD *)v162 + 4) = v132[v161 + 1];
      long long *v162 = v164;
      uint64_t v165 = (void **)&a1[v161 * 16 + 24];
      if (a1[v161 * 16 + 47] < 0) {
        operator delete(*v165);
      }
      long long v166 = *(long long *)((char *)v163 + 24);
      *(void *)&a1[v161 * 16 + 40] = *((void *)v163 + 5);
      *(_OWORD *)uint64_t v165 = v166;
      *((unsigned char *)v163 + 47) = 0;
      *((unsigned char *)v163 + 24) = 0;
      v161 += 3;
    }
    while ((long long *)v131 != v163);
  }
LABEL_221:
  if (v98)
  {
    uint64_t v167 = (uint64_t)a6 + 24;
    do
    {
      if (*(char *)(v167 + 23) < 0) {
        operator delete(*(void **)v167);
      }
      v167 += 48;
      --v97;
    }
    while (v97);
  }
}

void *sub_1CC2302BC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1CC230DCC(a3, *(void *)(a1 + 8), a2);
}

void *sub_1CC2302CC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1CC230DCC(a3, *(void *)(a1 + 8), a2);
}

unint64_t sub_1CC2302DC(uint64_t a1, uint64_t a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  char v11 = v13;
  long long v12 = xmmword_1CDC7F9D0;
  if (*(void *)(a2 + 16))
  {
    sub_1CC223970((uint64_t)&v11, a2 + 8);
    uint64_t v4 = v11;
    size_t v3 = v12;
  }
  else
  {
    size_t v3 = 0;
    uint64_t v4 = v13;
  }
  uint64_t v5 = (unint64_t *)llvm::cas::ThreadSafeHashMappedTrieBase::find(a1 + 16, v4, v3);
  if (v6 != -2 || v5 == 0)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v9 = atomic_load(v5 + 4);
    if (v9 == -1) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = v9;
    }
  }
  if (v11 != v13) {
    free(v11);
  }
  return v8;
}

void sub_1CC2303B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = a1;
}

uint64_t sub_1CC2303CC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, void)@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if ((*(unsigned char *)a1 & 6) != 0)
  {
    uint64_t v7 = (void *)(a1 + 16);
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if (!*(_DWORD *)(a1 + 8)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8)
    {
LABEL_8:
      *a4 = 0;
      return result;
    }
  }
  uint64_t v9 = 8 * v8;
  while (1)
  {
    uint64_t result = a2(a3, *v7);
    if (*a4) {
      return result;
    }
    ++v7;
    v9 -= 8;
    if (!v9) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_1CC230454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)a2 & 6) != 0) {
    uint64_t v3 = a2 + 16;
  }
  else {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  return *(void *)(v3 + 8 * a3);
}

uint64_t sub_1CC230474(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)a2 & 6) != 0) {
    return *(unsigned int *)(a2 + 8);
  }
  else {
    return *(void *)(a2 + 16);
  }
}

void sub_1CC230490(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4 = (_DWORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 540702821;
    *uint64_t v4 = 1701080681;
    *((void *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "index: ", 7uLL);
  }
  llvm::cas::ThreadSafeHashMappedTrieBase::print((llvm::cas::ThreadSafeHashMappedTrieBase *)(a1 + 16), this);
  uint64_t v5 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v5) > 8)
  {
    *(unsigned char *)(v5 + 8) = 32;
    *(void *)uint64_t v5 = *(void *)"strings: ";
    *((void *)this + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(this, "strings: ", 9uLL);
  }

  llvm::cas::ThreadSafeHashMappedTrieBase::print((llvm::cas::ThreadSafeHashMappedTrieBase *)(a1 + 40), this);
}

uint64_t sub_1CC230570(uint64_t a1)
{
  *(void *)a1 = &unk_1F26092D8;
  sub_1CD504FBC(a1 + 272);
  uint64_t v3 = *(unsigned int *)(a1 + 296);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 288);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;
      MEMORY[0x1D25D9CD0](v6, 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(uint64_t **)(a1 + 336);
  uint64_t v8 = *(unsigned int *)(a1 + 344);
  if (v8)
  {
    uint64_t v26 = 16 * v8;
    do
    {
      uint64_t v27 = *v7;
      v7 += 2;
      MEMORY[0x1D25D9CD0](v27, 8);
      v26 -= 16;
    }
    while (v26);
    uint64_t v7 = *(uint64_t **)(a1 + 336);
  }
  if (v7 != (uint64_t *)(a1 + 352)) {
    free(v7);
  }
  uint64_t v9 = *(void **)(a1 + 288);
  if (v9 != (void *)(a1 + 304)) {
    free(v9);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 192);
  if (v10)
  {
    char v11 = *(uint64_t **)(a1 + 184);
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      MEMORY[0x1D25D9CD0](v13, 8);
      v12 -= 8;
    }
    while (v12);
  }
  size_t v14 = *(uint64_t **)(a1 + 232);
  uint64_t v15 = *(unsigned int *)(a1 + 240);
  if (v15)
  {
    uint64_t v28 = 16 * v15;
    do
    {
      uint64_t v29 = *v14;
      v14 += 2;
      MEMORY[0x1D25D9CD0](v29, 8);
      v28 -= 16;
    }
    while (v28);
    size_t v14 = *(uint64_t **)(a1 + 232);
  }
  if (v14 != (uint64_t *)(a1 + 248)) {
    free(v14);
  }
  uint64_t v16 = *(void **)(a1 + 184);
  if (v16 != (void *)(a1 + 200)) {
    free(v16);
  }
  uint64_t v17 = *(unsigned int *)(a1 + 88);
  if (v17)
  {
    char v18 = *(uint64_t **)(a1 + 80);
    uint64_t v19 = 8 * v17;
    do
    {
      uint64_t v20 = *v18++;
      MEMORY[0x1D25D9CD0](v20, 8);
      v19 -= 8;
    }
    while (v19);
  }
  size_t v21 = *(uint64_t **)(a1 + 128);
  uint64_t v22 = *(unsigned int *)(a1 + 136);
  if (v22)
  {
    uint64_t v30 = 16 * v22;
    do
    {
      uint64_t v31 = *v21;
      v21 += 2;
      MEMORY[0x1D25D9CD0](v31, 8);
      v30 -= 16;
    }
    while (v30);
    size_t v21 = *(uint64_t **)(a1 + 128);
  }
  if (v21 != (uint64_t *)(a1 + 144)) {
    free(v21);
  }
  uint64_t v23 = *(void **)(a1 + 80);
  if (v23 != (void *)(a1 + 96)) {
    free(v23);
  }
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(a1 + 40, 0, v2);
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(a1 + 16, 0, v24);
  return a1;
}

void sub_1CC230758(uint64_t a1)
{
  sub_1CC230570(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC230790(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = sub_1CC230E98;
  v14[0] = &v11;
  uint64_t v12 = &v13;
  uint64_t v6 = (long long *)llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, a2, a3, (uint64_t)sub_1CC230E58, (uint64_t)&v12);
  uint64_t v7 = *(void *)(a1 + 8);
  if (v8 == -2) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v13 = *(void *(**)(uint64_t, uint64_t))(a1 + 8);
  v14[0] = v15;
  v14[2] = (void *)32;
  long long v10 = *v9;
  v15[1] = v9[1];
  v15[0] = v10;
  v14[1] = (void *)32;
  *(unsigned char *)(a4 + 64) &= ~1u;
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = a4 + 32;
  *(_OWORD *)(a4 + 16) = xmmword_1CDC7F9D0;
  sub_1CC1B8518(a4 + 8, (uint64_t)v14);
  if (v14[0] != v15) {
    free(v14[0]);
  }
}

void sub_1CC2308A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, size_t a7@<X6>, uint64_t a8@<X8>)
{
  v30[6] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = sub_1CC230E98;
  uint64_t v29 = (uint64_t)&v26;
  uint64_t v27 = &v28;
  size_t v14 = (unint64_t *)llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, a2, a3, (uint64_t)sub_1CC230E58, (uint64_t)&v27);
  if (v15 == -2) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v28 = v30;
  uint64_t v29 = 0x600000000;
  if (a5)
  {
    unsigned int v17 = 0;
    uint64_t v18 = 8 * a5;
    do
    {
      if (v17 >= HIDWORD(v29)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v28 + v17) = *a4;
      unsigned int v17 = v29 + 1;
      LODWORD(v29) = v29 + 1;
      ++a4;
      v18 -= 8;
    }
    while (v18);
  }
  unint64_t v19 = atomic_load(v16 + 4);
  if (v19 || (atomic_compare_exchange_strong((atomic_ullong *volatile)v16 + 4, &v19, 0xFFFFFFFFFFFFFFFFLL), v19))
  {
    while (v19 == -1)
      unint64_t v19 = atomic_load(v16 + 4);
  }
  else
  {
    uint64_t v20 = v28;
    uint64_t v21 = v29;
    uint64_t v22 = a7 + 8 * v29 + 17;
    while ((atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 160), 1u, memory_order_acquire) & 1) != 0)
      ;
    uint64_t v23 = sub_1CB906F34((uint64_t *)(a1 + 64), v22, 3);
    unint64_t v19 = v23;
    atomic_store(0, (unsigned __int8 *)(a1 + 160));
    *(void *)uint64_t v23 = (unint64_t)v16 | 2;
    *(_DWORD *)(v23 + 8) = v21;
    *(_DWORD *)(v23 + 12) = a7;
    uint64_t v24 = v23 + 16;
    if (v21) {
      memmove((void *)(v23 + 16), v20, 8 * v21);
    }
    uint64_t v25 = (void *)(v24 + 8 * v21);
    if (a7) {
      memmove(v25, a6, a7);
    }
    *((unsigned char *)v25 + a7) = 0;
    atomic_store(v19, v16 + 4);
  }
  *(unsigned char *)(a8 + 8) &= ~1u;
  *(void *)a8 = v19;
  if (v28 != v30) {
    free(v28);
  }
}

unint64_t sub_1CC230ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a4;
  uint64_t v8 = a4[1];
  v26[0] = sub_1CC230E98;
  v26[1] = &v24;
  uint64_t v25 = v26;
  unint64_t result = (unint64_t)llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, a2, a3, (uint64_t)sub_1CC230E58, (uint64_t)&v25);
  if (v11 == -2) {
    unint64_t v12 = result;
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = (void *)atomic_load((unint64_t *)(v12 + 32));
  if (v13
    || (atomic_compare_exchange_strong((atomic_ullong *volatile)(v12 + 32), (unint64_t *)&v13, 0xFFFFFFFFFFFFFFFFLL), v13))
  {
    while (v13 == (void *)-1)
      uint64_t v13 = (void *)atomic_load((unint64_t *)(v12 + 32));
  }
  else
  {
    for (uint64_t i = (atomic_uchar *)(a1 + 160);
          (atomic_exchange_explicit(i, 1u, memory_order_acquire) & 1) != 0;
    *(void *)(a1 + 144) += 40;
    uint64_t v15 = *(void *)(a1 + 64);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 40 > *(void *)(a1 + 72) - v15)
    {
      unsigned int v18 = *(_DWORD *)(a1 + 88) >> 7;
      if (v18 >= 0x1E) {
        LOBYTE(v18) = 30;
      }
      uint64_t v19 = 4096 << v18;
      unint64_t result = (unint64_t)operator new(4096 << v18, (std::align_val_t)8uLL);
      uint64_t v13 = (void *)result;
      unsigned int v20 = *(_DWORD *)(a1 + 88);
      if (v20 >= *(_DWORD *)(a1 + 92)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 80) + 8 * v20) = result;
      ++*(_DWORD *)(a1 + 88);
      *(void *)(a1 + 72) = result + v19;
    }
    else
    {
      uint64_t v13 = (void *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)(a1 + 64) = v13 + 5;
    atomic_store(0, (unsigned __int8 *)(a1 + 160));
    *uint64_t v13 = v12;
    v13[1] = 0;
    _OWORD v13[2] = 0;
    v13[3] = v8;
    v13[4] = v9;
    atomic_store((unint64_t)v13, (unint64_t *)(v12 + 32));
  }
  if ((*(unsigned char *)v13 & 6) == 0 && a4[1] == v13[3])
  {
    for (j = (atomic_uchar *)(a1 + 368);
          (atomic_exchange_explicit(j, 1u, memory_order_acquire) & 1) != 0;
    *(void *)(a1 + 352) += 24;
    uint64_t v17 = *(void *)(a1 + 272);
    if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 24 > *(void *)(a1 + 280) - v17)
    {
      unsigned int v21 = *(_DWORD *)(a1 + 296) >> 7;
      if (v21 >= 0x1E) {
        LOBYTE(v21) = 30;
      }
      uint64_t v22 = 4096 << v21;
      unint64_t result = (unint64_t)operator new(4096 << v21, (std::align_val_t)8uLL);
      unsigned int v23 = *(_DWORD *)(a1 + 296);
      if (v23 >= *(_DWORD *)(a1 + 300)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 288) + 8 * v23) = result;
      ++*(_DWORD *)(a1 + 296);
      *(void *)(a1 + 280) = result + v22;
    }
    else
    {
      unint64_t result = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 272) = result + 24;
    atomic_store(0, (unsigned __int8 *)(a1 + 368));
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = *a4;
    *(void *)(result + 8) = a4[1];
    *(_DWORD *)(result + 16) = *((_DWORD *)a4 + 4);
    *a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  *(unsigned char *)(a5 + 8) &= ~1u;
  *(void *)a5 = v13;
  return result;
}

uint64_t sub_1CC230DA4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)a2 & 6) != 0) {
    return a2 + 8 * *(unsigned int *)(a2 + 8) + 16;
  }
  else {
    return *(void *)(a2 + 24);
  }
}

void *sub_1CC230DCC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)(*a3 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 16) = xmmword_1CDC7F9D0;
  unint64_t result = memcpy((void *)(a1 + 32), v4, 0x20uLL);
  *(void *)(a1 + 16) += 32;
  return result;
}

uint64_t sub_1CC230E58(void (***a1)(void, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  v8[0] = a2;
  v8[1] = &v7;
  v8[2] = a3;
  v8[3] = a4;
  v5(v4, v8);
  return v7;
}

void *sub_1CC230E98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  *(void *)a2 = 0;
  if (v6) {
    unint64_t result = memmove(v3, v5, v6);
  }
  v3[4] = 0;
  *uint64_t v4 = v3;
  return result;
}

llvm::raw_ostream *sub_1CC230EE4(llvm::raw_ostream *this, const void *a2, size_t a3, unint64_t a4, unsigned char *a5)
{
  uint64_t v10 = *((void *)this + 3);
  uint64_t v9 = (unsigned char *)*((void *)this + 4);
  if (a3 <= v10 - (uint64_t)v9)
  {
    if (a3)
    {
      memcpy(v9, a2, a3);
      uint64_t v9 = (unsigned char *)(*((void *)this + 4) + a3);
      *((void *)this + 4) = v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a2, a3);
    uint64_t v9 = (unsigned char *)*((void *)this + 4);
  }
  if (*((unsigned char **)this + 3) == v9)
  {
    llvm::raw_ostream::write(this, "=", 1uLL);
  }
  else
  {
    *uint64_t v9 = 61;
    ++*((void *)this + 4);
  }
  unint64_t result = sub_1CD098D14(this, a4, 0, 0, 0);
  if (a5[64])
  {
    unint64_t v12 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v12)
    {
      llvm::raw_ostream::write(this, "[", 1uLL);
    }
    else
    {
      *unint64_t v12 = 91;
      ++*((void *)this + 4);
    }
    unint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(void, llvm::raw_ostream *, unsigned char *))(**(void **)a5
                                                                                                  + 32))(*(void *)a5, this, a5);
    uint64_t v13 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v13)
    {
      return llvm::raw_ostream::write(this, "]", 1uLL);
    }
    else
    {
      *uint64_t v13 = 93;
      ++*((void *)this + 4);
    }
  }
  return result;
}

void *llvm::cas::ObjectStore::getMemoryBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2, a5);
  uint64_t v11 = v10;
  __int16 v14 = 261;
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v15 = v13;
  unint64_t result = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v15);
  *unint64_t result = &unk_1F2644E70;
  result[1] = v9;
  result[2] = v9 + v11;
  *a6 = result;
  return result;
}

void *llvm::cas::ObjectStore::readRefs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 64))(&v5);
  sub_1CD4515D0(&v5);
  unint64_t result = v5;
  if (v5) {
    return (void *)(*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t llvm::cas::createCASFromIdentifier(_DWORD *a1, size_t a2)
{
  uint64_t v4 = sub_1CC231334();
  uint64_t v6 = *(unsigned int *)(v4 + 8);
  if (v6)
  {
    for (uint64_t i = *(size_t ***)v4; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    uint64_t i = *(size_t ***)v4;
  }
  uint64_t v9 = *(void *)v4 + 8 * v6;
  if (i == (size_t **)v9)
  {
LABEL_20:
    if (a2 == 4)
    {
      if (*a1 == 1869903201)
      {
        llvm::cas::getDefaultOnDiskCASPath(&__p);
        llvm::cas::createOnDiskCAS((llvm::cas *)&v19, v17);
      }
    }
    else if (!a2)
    {
      uint64_t v19 = 22;
      unsigned int v20 = std::generic_category();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"No CAS identifier is provided";
      sub_1CD06481C();
    }
    llvm::cas::createOnDiskCAS((llvm::cas *)&v19, v5);
  }
  uint64_t v10 = *i;
  while (1)
  {
    uint64_t v5 = (const llvm::Twine *)(v10 + 2);
    size_t v11 = *v10;
    if (a2 >= *v10 && (!v11 || !memcmp(a1, v5, *v10))) {
      break;
    }
    do
    {
      unint64_t v12 = i[1];
      ++i;
      uint64_t v10 = v12;
      if (v12) {
        BOOL v13 = v10 + 1 == 0;
      }
      else {
        BOOL v13 = 1;
      }
    }
    while (v13);
    if (i == (size_t **)v9) {
      goto LABEL_20;
    }
  }
  if (a2 >= v11) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = a2;
  }
  uint64_t v15 = (uint64_t (*)(uint64_t *, const llvm::Twine *))v10[1];
  __int16 v21 = 261;
  uint64_t v19 = (uint64_t)a1 + v14;
  unsigned int v20 = (const std::error_category *)(a2 - v14);
  return v15(&v19, v5);
}

uint64_t sub_1CC231334()
{
  if (!atomic_load((unint64_t *)&qword_1EA618B68))
  {
    if (!atomic_load_explicit(&qword_1EA618B68, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA618B68, (void *(*)(void))sub_1CC23150C, (void (*)(void *))sub_1CC231544);
    }
    v2[1] = (uint64_t)"mem://";
    v2[2] = 6;
    uint64_t v3 = sub_1CC2314DC;
    sub_1CC231650(qword_1EA618B68, "mem://", 6uLL, (uint64_t *)&v3);
    if (!atomic_load_explicit(&qword_1EA618B68, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA618B68, (void *(*)(void))sub_1CC23150C, (void (*)(void *))sub_1CC231544);
    }
    v2[0] = (uint64_t)llvm::cas::createOnDiskCAS;
    sub_1CC231650(qword_1EA618B68, "file://", 7uLL, v2);
  }
  if (!atomic_load_explicit(&qword_1EA618B68, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA618B68, (void *(*)(void))sub_1CC23150C, (void (*)(void *))sub_1CC231544);
  }
  return qword_1EA618B68;
}

uint64_t llvm::cas::registerCASURLScheme(unsigned __int8 *a1, size_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CC231334();
  uint64_t v8 = a3;
  return sub_1CC231650(v6, a1, a2, &v8);
}

void sub_1CC2314DC(llvm::cas *a1)
{
}

void sub_1CC23150C()
{
}

uint64_t sub_1CC231544(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    if (*(_DWORD *)(result + 12))
    {
      uint64_t v2 = *(unsigned int *)(result + 8);
      if (v2)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 8 * v2;
        do
        {
          uint64_t v5 = *(void *)((char *)*v1 + v3);
          if (v5 != -8 && v5 != 0) {
            MEMORY[0x1D25D9CD0]();
          }
          v3 += 8;
        }
        while (v4 != v3);
      }
    }
    free(*v1);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t *sub_1CC2315E0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*result + 8);
  if (v5 >= *(_DWORD *)(*result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v4 + 8 * v5) = a2;
  ++*(_DWORD *)(v4 + 8);
  *a3 = 0;
  return result;
}

uint64_t sub_1CC231650(uint64_t result, unsigned __int8 *a2, size_t __n, uint64_t *a4)
{
  uint64_t v6 = (llvm::StringMapImpl *)result;
  unsigned int v7 = *(_DWORD *)(result + 8);
  if (!v7)
  {
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 16) = 0;
    unint64_t result = (uint64_t)malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!result) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *(void *)(result + 128) = 2;
    *(void *)uint64_t v6 = result;
    unsigned int v7 = 16;
    *((_DWORD *)v6 + 2) = 16;
  }
  uint64_t v27 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    uint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)v6;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)v6 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 && __n == *v19)
    {
      if (!__n) {
        goto LABEL_20;
      }
      unint64_t result = memcmp(a2, (char *)v19 + *((unsigned int *)v6 + 5), __n);
      if (!result) {
        goto LABEL_20;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  uint64_t v19 = *(void **)(v12 + 8 * v18);
LABEL_20:
  if (v19 == (void *)-8)
  {
    --*((_DWORD *)v6 + 4);
  }
  else if (v19)
  {
    return result;
  }
  __int16 v21 = operator new(__n + 17, (std::align_val_t)8uLL);
  uint64_t v22 = v21;
  unsigned int v23 = (char *)(v21 + 2);
  if (__n) {
    memcpy(v21 + 2, a2, __n);
  }
  v23[__n] = 0;
  uint64_t v24 = *v27;
  *uint64_t v22 = __n;
  v22[1] = v24;
  *(void *)(v12 + 8 * v18) = v22;
  ++*((_DWORD *)v6 + 3);
  unint64_t result = llvm::StringMapImpl::RehashTable(v6, v18);
  for (uint64_t i = (void *)(*(void *)v6 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

void llvm::cas::createOnDiskCAS(llvm::cas *this, const llvm::Twine *a2)
{
}

uint64_t llvm::cas::TreeSchema::getKindRef(llvm::cas::TreeSchema *this)
{
  return *((void *)this + 2);
}

unint64_t llvm::cas::TreeSchema::lookupTreeEntry(uint64_t a1, llvm::cas::TreeProxy *a2, const void *a3, size_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, void))(**(void **)a2 + 80))(*(void *)a2, *((void *)a2 + 2));
  unint64_t v8 = v7 - 1;
  if (v7 == 1) {
    goto LABEL_17;
  }
  if (v8 >= 5)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v7 - 1;
    uint64_t v11 = v7 - 1;
    while (1)
    {
      unint64_t v8 = v9 + (v10 >> 1);
      Name = (const void *)llvm::cas::TreeProxy::getName(a2, v8);
      size_t v14 = v13;
      if (v13 >= a4) {
        size_t v15 = a4;
      }
      else {
        size_t v15 = v13;
      }
      if (v15)
      {
        int v16 = memcmp(a3, Name, v15);
        if (v16 < 0) {
          goto LABEL_13;
        }
        if (v16) {
          goto LABEL_12;
        }
      }
      if (a4 == v14)
      {
        unint64_t v18 = v8 & 0xFFFFFFFFFFFFFF00;
        unsigned __int8 v17 = v8;
        return v18 | v17;
      }
      if (a4 >= v14)
      {
LABEL_12:
        uint64_t v9 = v8 + 1;
        unint64_t v8 = v11;
      }
LABEL_13:
      unint64_t v10 = v8 - v9;
      uint64_t v11 = v8;
      if (v8 - v9 <= 4) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_16:
  if (v9 == v8)
  {
LABEL_17:
    unsigned __int8 v17 = 0;
    unint64_t v18 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v19 = (const void *)llvm::cas::TreeProxy::getName(a2, v9);
      if (a4 == v20 && (!a4 || !memcmp(a3, v19, a4))) {
        break;
      }
      unsigned __int8 v17 = 0;
      unint64_t v18 = 0;
      if (v8 == ++v9) {
        return v18 | v17;
      }
    }
    unint64_t v18 = v9 & 0xFFFFFFFFFFFFFF00;
    unsigned __int8 v17 = v9;
  }
  return v18 | v17;
}

uint64_t llvm::cas::TreeSchema::load@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::cas::TreeSchema::isNode(a1, a2);
  if ((result & 1) == 0)
  {
    llvm::inconvertibleErrorCode((llvm *)result);
    sub_1CD06481C();
  }
  uint64_t v7 = *a2;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 1);
  *(unsigned char *)(a3 + 32) &= ~1u;
  *(void *)(a3 + 24) = a1;
  *(void *)a3 = v7;
  return result;
}

uint64_t llvm::cas::TreeProxy::get@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[3])
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    char v3 = *(unsigned char *)(a3 + 32) | 1;
    *(void *)a3 = v4;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    char v3 = *(unsigned char *)(a3 + 32) & 0xFE;
    *(void *)(a3 + 16) = a2[2];
    *(void *)(a3 + 24) = result;
  }
  *(unsigned char *)(a3 + 32) = v3;
  return result;
}

void sub_1CC231B04(uint64_t a1, __n128 *a2, __n128 a3)
{
  unint64_t v5 = ((uint64_t)a2 - a1) >> 5;
  if ((uint64_t)a2 - a1 <= 4096)
  {
LABEL_5:
    sub_1CD506A10(a1, a2, v5, 0, 0, a3);
  }
  else
  {
    uint64_t v6 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v7 = ((uint64_t)a2 - a1) >> 5;
    while (1)
    {
      unint64_t v8 = (__n128 *)operator new(32 * v7, v6);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = v8;
    sub_1CD506A10(a1, a2, v5, v8, v7, a3);
    operator delete(v10);
  }
}

uint64_t sub_1CC231BDC(uint64_t result, long long *a2)
{
  if ((long long *)result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (long long *)(result + 32);
    if ((long long *)(result + 32) != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (long long *)result;
      do
      {
        unint64_t v7 = (void *)*((void *)v6 + 2);
        size_t v8 = *((void *)v6 + 3);
        uint64_t v6 = v4;
        unint64_t v10 = (const void *)*((void *)v4 + 2);
        size_t v9 = *((void *)v4 + 3);
        uint64_t result = sub_1CD506DA0(v10, v9, v7, v8);
        if (result)
        {
          long long v15 = *v6;
          uint64_t v11 = v5;
          while (1)
          {
            uint64_t v12 = v3 + v11;
            long long v13 = *(_OWORD *)(v3 + v11 + 16);
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v3 + v11);
            *(_OWORD *)(v12 + 48) = v13;
            if (!v11) {
              break;
            }
            uint64_t result = sub_1CD506DA0(v10, v9, *(void **)(v12 - 16), *(void *)(v12 - 8));
            v11 -= 32;
            if ((result & 1) == 0)
            {
              uint64_t v14 = v3 + v11 + 32;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v3;
LABEL_10:
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v10;
          *(void *)(v14 + 24) = v9;
        }
        uint64_t v4 = v6 + 2;
        v5 += 32;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

__n128 sub_1CC231CBC(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, __n128 result)
{
  if (!a5) {
    return result;
  }
  uint64_t v9 = a5;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v13 = 0;
    uint64_t v14 = (const void *)a2[1].n128_u64[0];
    size_t v15 = a2[1].n128_u64[1];
    uint64_t v16 = -a4;
    while (1)
    {
      unsigned __int8 v17 = (char *)&a1[v13];
      if (sub_1CD506DA0(v14, v15, (void *)a1[v13 + 1].n128_u64[0], a1[v13 + 1].n128_u64[1])) {
        break;
      }
      v13 += 2;
      if (__CFADD__(v16++, 1)) {
        return result;
      }
    }
    uint64_t v19 = -v16;
    __src = a6;
    if (-v16 >= v9)
    {
      if (v16 == -1)
      {
        size_t v71 = (char *)&a1[v13];
        __n128 v85 = a1[v13];
        __n128 v90 = a1[v13 + 1];
        __n128 v72 = a2[1];
        *(__n128 *)size_t v71 = *a2;
        *((__n128 *)v71 + 1) = v72;
        uint64_t result = v85;
        *a2 = v85;
        a2[1] = v90;
        return result;
      }
      if (v16 > 0) {
        uint64_t v19 = 1 - v16;
      }
      unint64_t v22 = v19 >> 1;
      unsigned int v23 = (char *)&a1[2 * (v19 >> 1) + v13];
      __int16 v21 = a3;
      unint64_t v26 = ((char *)a3 - (char *)a2) >> 5;
      if (a3 != a2)
      {
        size_t v27 = *((void *)v23 + 3);
        uint64_t v76 = v19 >> 1;
        __s2a = (void *)*((void *)v23 + 2);
        __int16 v21 = a2;
        do
        {
          uint64_t v28 = &v21[2 * (v26 >> 1)];
          BOOL v29 = sub_1CD506DA0((const void *)v28[1].n128_u64[0], v28[1].n128_u64[1], __s2a, v27);
          if (v29) {
            v26 += ~(v26 >> 1);
          }
          else {
            v26 >>= 1;
          }
          if (v29) {
            __int16 v21 = v28 + 2;
          }
        }
        while (v26);
        unint64_t v26 = ((char *)v21 - (char *)a2) >> 5;
        unint64_t v22 = v76;
      }
      goto LABEL_34;
    }
    if (v9 >= 0) {
      uint64_t v20 = v9;
    }
    else {
      uint64_t v20 = v9 + 1;
    }
    uint64_t v73 = v20 >> 1;
    __int16 v21 = &a2[2 * (v20 >> 1)];
    unint64_t v22 = ((char *)a2 - (char *)a1 - v13 * 16) >> 5;
    if (v17 != (char *)a2)
    {
      size_t v74 = v21[1].n128_u64[1];
      size_t v75 = (const void *)v21[1].n128_u64[0];
      unsigned int v23 = (char *)&a1[v13];
      do
      {
        long long __s2 = (void *)(v22 >> 1);
        uint64_t v24 = &v23[32 * (v22 >> 1)];
        unint64_t v25 = v22;
        if (sub_1CD506DA0(v75, v74, *((void **)v24 + 2), *((void *)v24 + 3)))
        {
          unint64_t v22 = (unint64_t)__s2;
        }
        else
        {
          unsigned int v23 = v24 + 32;
          unint64_t v22 = v25 + ~(v25 >> 1);
        }
      }
      while (v22);
      unint64_t v22 = (v23 - (char *)a1 - v13 * 16) >> 5;
      unint64_t v26 = v73;
LABEL_34:
      if (v23 == (char *)a2)
      {
        unsigned int v23 = (char *)a2;
        a2 = v21;
      }
      else if (a2 == v21)
      {
        __int16 v21 = a2;
        a2 = (__n128 *)v23;
      }
      else if (v23 + 32 == (char *)a2)
      {
        __n128 v83 = *(__n128 *)v23;
        __n128 v87 = *((__n128 *)v23 + 1);
        int64_t v35 = (char *)v21 - (char *)a2;
        int v36 = a2;
        size_t v37 = (char *)v21 - (char *)a2;
        unint64_t v38 = v22;
        memmove(v23, v36, v37);
        unint64_t v22 = v38;
        a2 = (__n128 *)&v23[v35];
        *a2 = v83;
        a2[1] = v87;
      }
      else if (&a2[2] == v21)
      {
        a2 = (__n128 *)(v23 + 32);
        __n128 v84 = v21[-2];
        __n128 v88 = v21[-1];
        if (&v21[-2] != (__n128 *)v23)
        {
          unint64_t v39 = v22;
          memmove(v23 + 32, v23, (char *)&v21[-2] - v23);
          unint64_t v22 = v39;
        }
        *(__n128 *)unsigned int v23 = v84;
        *((__n128 *)v23 + 1) = v88;
      }
      else
      {
        uint64_t v30 = ((char *)a2 - v23) >> 5;
        if (v30 == ((char *)v21 - (char *)a2) >> 5)
        {
          uint64_t v31 = 0;
          do
          {
            size_t v32 = &a2[v31];
            size_t v33 = &v23[v31 * 16];
            __n128 v82 = *(__n128 *)&v23[v31 * 16];
            __n128 v86 = *(__n128 *)&v23[v31 * 16 + 16];
            __n128 v34 = a2[v31 + 1];
            *(__n128 *)size_t v33 = a2[v31];
            *((__n128 *)v33 + 1) = v34;
            *size_t v32 = v82;
            v32[1] = v86;
            if (&v23[v31 * 16 + 32] == (char *)a2) {
              break;
            }
            v31 += 2;
          }
          while (&v32[2] != v21);
        }
        else
        {
          uint64_t v40 = ((char *)v21 - (char *)a2) >> 5;
          uint64_t v41 = ((char *)a2 - v23) >> 5;
          do
          {
            uint64_t v42 = v41;
            uint64_t v41 = v40;
            uint64_t v40 = v42 % v40;
          }
          while (v40);
          if (v41)
          {
            char v43 = &v23[32 * v41];
            do
            {
              long long v44 = *((_OWORD *)v43 - 2);
              long long v45 = *((_OWORD *)v43 - 1);
              v43 -= 32;
              long long v89 = v45;
              size_t v46 = &v43[32 * v30];
              size_t v47 = v43;
              do
              {
                size_t v48 = v47;
                size_t v47 = v46;
                long long v49 = *((_OWORD *)v46 + 1);
                *(_OWORD *)size_t v48 = *(_OWORD *)v46;
                *((_OWORD *)v48 + 1) = v49;
                BOOL v50 = __OFSUB__(v30, ((char *)v21 - v46) >> 5);
                uint64_t v52 = v30 - (((char *)v21 - v46) >> 5);
                char v51 = (v52 < 0) ^ v50;
                size_t v46 = &v23[32 * v52];
                if (v51) {
                  size_t v46 = &v47[32 * v30];
                }
              }
              while (v46 != v43);
              *(_OWORD *)size_t v47 = v44;
              *((_OWORD *)v47 + 1) = v89;
            }
            while (v43 != v23);
          }
          a2 = (__n128 *)&v23[32 * (((char *)v21 - (char *)a2) >> 5)];
        }
      }
      goto LABEL_60;
    }
    unsigned __int8 v17 = (char *)a2;
    unsigned int v23 = (char *)a2;
    a2 += 2 * (v20 >> 1);
    unint64_t v26 = v20 >> 1;
LABEL_60:
    a4 = -(uint64_t)(v22 + v16);
    unint64_t v53 = v9 - v26;
    if ((uint64_t)(v26 + v22) >= (uint64_t)(v9 - (v26 + v22) - v16))
    {
      unint64_t v55 = v22;
      sub_1CC231CBC(a2, v21, a3, a4, v53, __src, a7);
      __int16 v21 = (__n128 *)v23;
      a6 = __src;
      unint64_t v53 = v26;
      a4 = v55;
      a3 = a2;
    }
    else
    {
      int v54 = v23;
      a6 = __src;
      sub_1CC231CBC(v17, v54, a2, v22, v26, __src, a7);
      unsigned __int8 v17 = (char *)a2;
    }
    uint64_t v9 = v53;
    a1 = (__n128 *)v17;
    a2 = v21;
    if (!v53) {
      return result;
    }
  }
  if (a4 <= v9)
  {
    if (a1 != a2)
    {
      uint64_t v63 = 0;
      do
      {
        size_t v64 = &a6[v63 * 16];
        uint64_t result = a1[v63];
        __n128 v65 = a1[v63 + 1];
        *(__n128 *)size_t v64 = result;
        *((__n128 *)v64 + 1) = v65;
        v63 += 2;
      }
      while (&a1[v63] != a2);
      if (v63 * 16)
      {
        char v66 = a6;
        while (a2 != a3)
        {
          if (sub_1CD506DA0((const void *)a2[1].n128_u64[0], a2[1].n128_u64[1], *((void **)v66 + 2), *((void *)v66 + 3)))
          {
            uint64_t result = *a2;
            __n128 v67 = a2[1];
            a2 += 2;
          }
          else
          {
            uint64_t result = *(__n128 *)v66;
            __n128 v67 = *((__n128 *)v66 + 1);
            v66 += 32;
          }
          *a1 = result;
          a1[1] = v67;
          a1 += 2;
          if (&a6[v63 * 16] == v66) {
            return result;
          }
        }
        memmove(a1, v66, a6 - v66 + v63 * 16);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v56 = 0;
    do
    {
      int v57 = &a6[v56 * 16];
      uint64_t result = a2[v56];
      __n128 v58 = a2[v56 + 1];
      *(__n128 *)int v57 = result;
      *((__n128 *)v57 + 1) = v58;
      v56 += 2;
    }
    while (&a2[v56] != a3);
    if (v56 * 16)
    {
      unint64_t v59 = (const void **)&a6[v56 * 16];
      unint64_t v60 = a3 - 2;
      while (a2 != a1)
      {
        BOOL v61 = sub_1CD506DA0(*(v59 - 2), (size_t)*(v59 - 1), (void *)a2[-1].n128_u64[0], a2[-1].n128_u64[1]);
        if (v61) {
          char v62 = a2 - 2;
        }
        else {
          char v62 = (__n128 *)(v59 - 4);
        }
        if (v61) {
          a2 -= 2;
        }
        uint64_t result = v62[1];
        if (!v61) {
          v59 -= 4;
        }
        *unint64_t v60 = *v62;
        v60[1] = result;
        v60 -= 2;
        if (v59 == (const void **)a6) {
          return result;
        }
      }
      if (v59 != (const void **)a6)
      {
        unint64_t v68 = 0;
        do
        {
          char v69 = &v60[v68 / 2];
          uint64_t result = *(__n128 *)&v59[v68 - 4];
          __n128 v70 = *(__n128 *)&v59[v68 - 2];
          *char v69 = result;
          v69[1] = v70;
          v68 -= 4;
        }
        while (&v59[v68] != (const void **)a6);
      }
    }
  }
  return result;
}

__n128 sub_1CC232228(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (a1 != a2)
  {
    __n128 result = *(__n128 *)a1;
    long long v6 = *(_OWORD *)(a1 + 16);
    *a3 = *(_OWORD *)a1;
    a3[1] = v6;
    uint64_t v7 = a1 + 32;
    if (a1 + 32 != a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a3;
      do
      {
        unint64_t v10 = v9;
        v9 += 2;
        uint64_t v11 = v9;
        if (sub_1CD506DA0(*(const void **)(v7 + 16), *(void *)(v7 + 24), *((void **)v10 + 2), *((void *)v10 + 3)))
        {
          long long v12 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v12;
          uint64_t v11 = a3;
          if (v10 != a3)
          {
            uint64_t v13 = v8;
            while (1)
            {
              uint64_t v11 = (_OWORD *)((char *)a3 + v13);
              if (!sub_1CD506DA0(*(const void **)(v7 + 16), *(void *)(v7 + 24), *(void **)((char *)a3 + v13 - 16), *(void *)((char *)a3 + v13 - 8)))break; {
              long long v14 = *(v11 - 1);
              }
              *uint64_t v11 = *(v11 - 2);
              v11[1] = v14;
              v13 -= 32;
              if (!v13)
              {
                uint64_t v11 = a3;
                break;
              }
            }
          }
        }
        __n128 result = *(__n128 *)v7;
        long long v15 = *(_OWORD *)(v7 + 16);
        v7 += 32;
        *uint64_t v11 = result;
        v11[1] = v15;
        v8 += 32;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t sub_1CC2322FC(uint64_t result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    do
    {
      uint64_t v3 = result + 32;
      if ((_OWORD *)(result + 32) == a2) {
        return (uint64_t)a2;
      }
      BOOL v4 = sub_1CD506E04(result, result + 32);
      __n128 result = v3;
    }
    while (!v4);
    uint64_t v5 = (_OWORD *)(v3 + 32);
    uint64_t v6 = v3 - 32;
    while (v5 != a2)
    {
      if (!sub_1CD506E04(v6, (uint64_t)v5))
      {
        long long v7 = v5[1];
        *(_OWORD *)(v6 + 32) = *v5;
        *(_OWORD *)(v6 + 48) = v7;
        v6 += 32;
      }
      v5 += 2;
    }
    return v6 + 32;
  }
  return result;
}

void llvm::cas::NamedTreeEntry::print(llvm::cas::NamedTreeEntry *this, llvm::raw_ostream *a2, llvm::cas::ObjectStore *a3)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)this)
  {
    case 0:
      uint64_t v6 = (int *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v6 <= 3uLL)
      {
        long long v7 = "file";
        goto LABEL_10;
      }
      int v24 = 1701603686;
      goto LABEL_43;
    case 1:
      uint64_t v6 = (int *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v6 <= 3uLL)
      {
        long long v7 = "exec";
        goto LABEL_10;
      }
      int v24 = 1667594341;
      goto LABEL_43;
    case 2:
      uint64_t v6 = (int *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v6 <= 3uLL)
      {
        long long v7 = "syml";
        goto LABEL_10;
      }
      int v24 = 1819113843;
      goto LABEL_43;
    case 3:
      uint64_t v6 = (int *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v6 > 3uLL)
      {
        int v24 = 1701147252;
LABEL_43:
        *uint64_t v6 = v24;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        long long v7 = "tree";
LABEL_10:
        llvm::raw_ostream::write(a2, v7, 4uLL);
      }
LABEL_11:
      uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v8)
      {
        uint64_t v9 = llvm::raw_ostream::write(a2, " ", 1uLL);
      }
      else
      {
        *uint64_t v8 = 32;
        ++*((void *)a2 + 4);
        uint64_t v9 = a2;
      }
      (*(void (**)(uint64_t *__return_ptr, llvm::cas::ObjectStore *, void))(*(void *)a3 + 16))(&v26, a3, *((void *)this + 1));
      (*(void (**)(uint64_t, llvm::raw_ostream *, uint64_t *))(*(void *)v26 + 32))(v26, v9, &v26);
      unint64_t v10 = (unsigned char *)*((void *)v9 + 4);
      if (*((unsigned char **)v9 + 3) == v10)
      {
        uint64_t v9 = llvm::raw_ostream::write(v9, " ", 1uLL);
        uint64_t v11 = (void *)*((void *)v9 + 4);
      }
      else
      {
        *unint64_t v10 = 32;
        uint64_t v11 = (void *)(*((void *)v9 + 4) + 1);
        *((void *)v9 + 4) = v11;
      }
      long long v12 = (const void *)*((void *)this + 2);
      unint64_t v13 = *((void *)this + 3);
      if (v13 <= *((void *)v9 + 3) - (void)v11)
      {
        if (v13)
        {
          memcpy(v11, v12, *((void *)this + 3));
          *((void *)v9 + 4) += v13;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, (const char *)v12, *((void *)this + 3));
      }
      if (v27 != v28) {
        free(v27);
      }
      int v14 = *(_DWORD *)this;
      if (*(_DWORD *)this == 3)
      {
        long long v15 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v15)
        {
          llvm::raw_ostream::write(a2, "/", 1uLL);
        }
        else
        {
          *long long v15 = 47;
          ++*((void *)a2 + 4);
        }
        int v14 = *(_DWORD *)this;
      }
      if (v14 == 2)
      {
        llvm::cas::ObjectStore::getProxy((uint64_t)a3, *((void *)this + 1), (uint64_t)v25);
        uint64_t v17 = v25[0];
        uint64_t v18 = v25[2];
        uint64_t v19 = (_DWORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v19 > 3uLL)
        {
          *uint64_t v19 = 540945696;
          *((void *)a2 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(a2, " -> ", 4uLL);
        }
        __int16 v21 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 88))(v17, v18, 0);
        size_t v22 = v20;
        unsigned int v23 = (void *)*((void *)a2 + 4);
        if (v20 <= *((void *)a2 + 3) - (void)v23)
        {
          if (v20)
          {
            memcpy(v23, v21, v20);
            *((void *)a2 + 4) += v22;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, (const char *)v21, v20);
        }
      }
      uint64_t v16 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v16)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *uint64_t v16 = 10;
        ++*((void *)a2 + 4);
      }
      return;
    default:
      goto LABEL_11;
  }
}

void llvm::initializeCFGuardPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC8D18, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC2327EC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC8D18, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC2327EC()
{
}

void llvm::createCFGuardCheckPass(llvm *this)
{
}

uint64_t sub_1CC2328BC(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC8D10;
  *(void *)a1 = &unk_1F26094A8;
  *(void *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC8D18, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC2327EC;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCC8D18, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  *(_DWORD *)(a1 + 32) = a2;
  return a1;
}

void llvm::createCFGuardDispatchPass(llvm *this)
{
}

void sub_1CC2329CC()
{
}

void sub_1CC232AAC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC232AE4(uint64_t a1, llvm::Module *a2)
{
  v24[24] = *MEMORY[0x1E4F143B8];
  size_t v22 = v24;
  uint64_t v23 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a2, (uint64_t)&v22);
  if (v23)
  {
    BOOL v4 = (uint64_t *)((char *)v22 + 16);
    uint64_t v5 = 24 * v23;
    while (1)
    {
      uint64_t v6 = *(void *)(*(v4 - 1) + 8);
      if (*(void *)v6 == 7)
      {
        int v7 = *(_DWORD *)(v6 + 24);
        int v8 = *(_DWORD *)(v6 + 27);
        if (v7 == 1969710691 && v8 == 1685217653) {
          break;
        }
      }
      v4 += 3;
      v5 -= 24;
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = *v4;
  }
  else
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  if (v22 == v24)
  {
    if (!v10) {
      goto LABEL_19;
    }
  }
  else
  {
    free(v22);
    if (!v10) {
      goto LABEL_19;
    }
  }
  uint64_t v11 = *(void *)(v10 + 128);
  if (v11)
  {
    long long v12 = (void *)(v11 + 24);
    if (*(_DWORD *)(v11 + 32) >= 0x41u) {
      long long v12 = (void *)*v12;
    }
    *(_DWORD *)(a1 + 28) = *v12;
  }
LABEL_19:
  int v13 = *(_DWORD *)(a1 + 28);
  if (v13 == 2)
  {
    uint64_t v14 = **(void **)a2;
    long long v15 = (uint64_t **)(v14 + 1576);
    size_t v22 = (void *)llvm::PointerType::get((llvm::PointerType *)(v14 + 1912), 0);
    uint64_t v16 = (llvm::PointerType *)llvm::FunctionType::get(v15, (uint64_t)&v22, 1, 0);
    *(void *)(a1 + 40) = v16;
    uint64_t v17 = (llvm::PointerType *)llvm::PointerType::get(v16, 0);
    *(void *)(a1 + 48) = v17;
    int v18 = *(_DWORD *)(a1 + 32);
    if (v18) {
      uint64_t v19 = "__guard_dispatch_icall_fptr";
    }
    else {
      uint64_t v19 = "__guard_check_icall_fptr";
    }
    if (v18) {
      unint64_t v20 = 27;
    }
    else {
      unint64_t v20 = 24;
    }
    *(void *)(a1 + 56) = llvm::Module::getOrInsertGlobal((uint64_t)a2, (unsigned __int8 *)v19, v20, v17);
  }
  return v13 == 2;
}

uint64_t sub_1CC232CA4(uint64_t a1, uint64_t a2)
{
  v131[1] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 28) != 2) {
    return 0;
  }
  size_t v109 = v111;
  uint64_t v110 = 0x800000000;
  uint64_t v2 = *(void *)(a2 + 80);
  uint64_t v100 = a2 + 72;
  if (v2 != a2 + 72)
  {
    do
    {
      uint64_t v3 = v2 - 24;
      if (!v2) {
        uint64_t v3 = 0;
      }
      uint64_t v4 = v3 + 40;
      for (uint64_t i = *(void *)(v3 + 48); i != v4; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v6 = i - 24;
        }
        else {
          uint64_t v6 = 0;
        }
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16) - 33;
        BOOL v8 = v7 > 0x33;
        uint64_t v9 = (1 << v7) & 0x8000000000041;
        if (!v8 && v9 != 0)
        {
          unsigned int v11 = *(unsigned __int8 *)(*(void *)(i - 56) + 16);
          if (v11 >= 0x15 && v11 != 24)
          {
            uint64_t v13 = *(void *)(i + 40);
            if (v13)
            {
              if (*(_DWORD *)(v13 + 8))
              {
                uint64_t v14 = *(void *)(v13 + 40);
                if (v14)
                {
                  int v15 = *(_DWORD *)(v14 + 40);
                  if (v15)
                  {
                    uint64_t v16 = *(void *)(v14 + 24);
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_1EBCBE588))
                    {
                      unint64_t v24 = llvm::hashing::detail::fixed_seed_override;
                      if (!llvm::hashing::detail::fixed_seed_override) {
                        unint64_t v24 = 0xFF51AFD7ED558CCDLL;
                      }
                      qword_1EBCBE580 = v24;
                      __cxa_guard_release(&qword_1EBCBE588);
                    }
                    unint64_t v17 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xF5B7C7BFA9F6AC7BLL)) ^ ((0x9DDFEA08EB382D69
                                                                                               * (qword_1EBCBE580 ^ 0xF5B7C7BFA9F6AC7BLL)) >> 47) ^ 0x9AD998DBDB97D91CLL);
                    unsigned int v18 = (-348639895 * ((v17 >> 47) ^ v17)) ^ 0x5F647261;
                    for (int j = 1; ; ++j)
                    {
                      unsigned int v20 = v18 & (v15 - 1);
                      __int16 v21 = (uint64_t *)(v16 + 24 * v20);
                      uint64_t v22 = *v21;
                      if (*v21 == -1)
                      {
                        if ("guard_nocf" == (char *)-1) {
                          goto LABEL_41;
                        }
                      }
                      else if (v22 == -2)
                      {
                        if ("guard_nocf" == (char *)-2) {
                          goto LABEL_41;
                        }
                      }
                      else if (v21[1] == 10 && *(void *)v22 == 0x6F6E5F6472617567 && *(_WORD *)(v22 + 8) == 26211)
                      {
                        goto LABEL_41;
                      }
                      if (v22 == -1) {
                        break;
                      }
                      unsigned int v18 = j + v20;
                    }
                  }
                }
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(i - 24, "guard_nocf", 0xAuLL) & 1) == 0)
            {
              if (v110 >= (unint64_t)HIDWORD(v110)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v109 + v110) = i - 24;
              LODWORD(v110) = v110 + 1;
            }
          }
        }
LABEL_41:
        ;
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v100);
    if (v110)
    {
      uint64_t v25 = a1;
      uint64_t v26 = (char **)v109;
      size_t v101 = (char **)((char *)v109 + 8 * v110);
      if (*(_DWORD *)(a1 + 32) == 1)
      {
        size_t v27 = 0;
        uint64_t v28 = *(llvm::User **)v109;
        uint64_t v29 = ***(void ***)v109;
        size_t v116 = (llvm::MDNode **)v118;
        uint64_t v117 = 0x200000000;
        uint64_t v121 = v29;
        long long v122 = &v130;
        size_t v123 = v131;
        uint64_t v124 = 0;
        int v125 = 0;
        __int16 v126 = 512;
        char v127 = 7;
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        uint64_t v128 = 0;
        uint64_t v129 = 0;
        size_t v130 = &unk_1F2616E88;
        v131[0] = &unk_1F2617008;
        uint64_t v119 = (void *)*((void *)v28 + 5);
        uint64_t v120 = (void **)((char *)v28 + 24);
        uint64_t v30 = (void *)*((void *)v28 + 6);
        v105[0] = v30;
        if (v30)
        {
          llvm::MetadataTracking::track((uint64_t)v105, (unsigned __int8 *)v30, 2);
          size_t v27 = v105[0];
        }
        sub_1CB8461A4((uint64_t)&v116, 0, (uint64_t)v27);
        if (!v105[0])
        {
LABEL_53:
          uint64_t v31 = (llvm::PointerType **)*((void *)v28 - 4);
          size_t v32 = *v31;
          size_t v33 = (llvm::Constant *)llvm::PointerType::get(*v31, 0);
          __n128 v34 = *(llvm::detail::IEEEFloat **)(a1 + 56);
          if (*(llvm::Constant **)v34 != v33)
          {
            __n128 v34 = sub_1CC56C0C0((llvm *)0x31, v34, v33, 0);
            *(void *)(a1 + 56) = v34;
          }
          LOWORD(v108) = 257;
          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v119[7] + 40) + 272), v32, 1);
          int v36 = (char *)operator new(0x60uLL);
          *((_DWORD *)v36 + 13) = *((_DWORD *)v36 + 13) & 0x38000000 | 1;
          size_t v37 = (llvm::Instruction *)(v36 + 32);
          *(void *)int v36 = 0;
          *((void *)v36 + 1) = 0;
          *((void *)v36 + 2) = 0;
          *((void *)v36 + 3) = v36 + 32;
          v115[8] = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v36 + 32), (uint64_t)v32, (uint64_t)v34, (const char **)&v113, 0, Alignment, 0);
          (*(void (**)(void *, char *, void **, void *, void **))(*v123 + 16))(v123, v36 + 32, v105, v119, v120);
          if (v117)
          {
            BOOL v50 = v116;
            char v51 = (char *)&v116[2 * v117];
            do
            {
              llvm::Instruction::setMetadata(v37, *(_DWORD *)v50, v50[1]);
              v50 += 2;
            }
            while (v50 != (llvm::MDNode **)v51);
          }
          size_t v113 = v115;
          *(void *)size_t v114 = 0x100000000;
          if ((*((_DWORD *)v28 + 5) & 0x80000000) != 0)
          {
            Descriptor = llvm::User::getDescriptor(v28);
            if ((*((_DWORD *)v28 + 5) & 0x80000000) != 0)
            {
              unint64_t v60 = llvm::User::getDescriptor(v28);
              unint64_t v39 = &v60[v61];
            }
            else
            {
              unint64_t v39 = 0;
            }
          }
          else
          {
            Descriptor = 0;
            unint64_t v39 = 0;
          }
          unint64_t v40 = v39 - Descriptor;
          if ((v40 & 0xFFFFFFFF0) != 0)
          {
            uint64_t v62 = 0;
            uint64_t v63 = (v40 >> 4);
            do
            {
              size_t v64 = llvm::User::getDescriptor(v28);
              uint64_t v65 = *(unsigned int *)&v64[v62 + 8];
              char v66 = (void **)((char *)v28 + 32 * v65 + -32 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF));
              uint64_t v67 = *(void *)&v64[v62];
              unint64_t v68 = (void *)(*(unsigned int *)&v64[v62 + 12] - v65);
              v105[0] = v66;
              v105[1] = v68;
              uint64_t v106 = v67;
              sub_1CD5C74F0((uint64_t)&v113, (uint64_t)v105);
              v62 += 16;
              --v63;
            }
            while (v63);
          }
          if (v114[0] >= v114[1])
          {
            if (v114[1] == -1) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            if (((2 * v114[1]) | 1uLL) >= 0xFFFFFFFF) {
              uint64_t v56 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v56 = (2 * v114[1]) | 1;
            }
            int v57 = (char *)malloc_type_malloc(48 * v56, 0x4065EBACuLL);
            if (!v57) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            long long v44 = v57;
            __n128 v58 = &v57[48 * v114[0]];
            strcpy(v58, "cfguardtarget");
            v58[23] = 13;
            *((void *)v58 + 4) = 0;
            *((void *)v58 + 5) = 0;
            unint64_t v59 = operator new(8uLL);
            *((void *)v58 + 3) = v59;
            *((void *)v58 + 5) = v59 + 1;
            *unint64_t v59 = v31;
            *((void *)v58 + 4) = v59 + 1;
            sub_1CD4F4644((uint64_t)&v113, (uint64_t)v44);
            if (v113 != v115) {
              free(v113);
            }
            size_t v113 = v44;
            v114[1] = v56;
            int v43 = v114[0];
          }
          else
          {
            uint64_t v41 = (char *)v113 + 48 * v114[0];
            strcpy(v41, "cfguardtarget");
            v41[23] = 13;
            *((void *)v41 + 4) = 0;
            *((void *)v41 + 5) = 0;
            uint64_t v42 = operator new(8uLL);
            *((void *)v41 + 3) = v42;
            *((void *)v41 + 5) = v42 + 1;
            *uint64_t v42 = v31;
            *((void *)v41 + 4) = v42 + 1;
            int v43 = v114[0];
            long long v44 = v113;
          }
          v114[0] = v43 + 1;
          long long v45 = llvm::CallBase::Create((uint64_t)v28, (uint64_t)v44, (v43 + 1), v28);
          if (*((void *)v45 - 4))
          {
            **((void **)v45 - 2) = *((void *)v45 - 3);
            uint64_t v46 = *((void *)v45 - 3);
            if (v46) {
              *(void *)(v46 + 16) = *((void *)v45 - 2);
            }
          }
          *((void *)v45 - 4) = v37;
          uint64_t v49 = *((void *)v36 + 5);
          size_t v48 = v36 + 40;
          uint64_t v47 = v49;
          *((void *)v45 - 3) = v49;
          if (v49) {
            *(void *)(v47 + 16) = v45 - 24;
          }
          *((void *)v45 - 2) = v48;
          *size_t v48 = v45 - 32;
          llvm::Value::doRAUW(v28, (llvm::Value *)v45, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v52 = *(unsigned __int8 *)v105[0];
        if ((v52 - 4) > 0x1E)
        {
          if ((v52 - 3) >= 0xFFFFFFFE) {
            unint64_t v55 = v105[0];
          }
          else {
            unint64_t v55 = 0;
          }
          if ((v52 - 3) < 0xFFFFFFFE)
          {
            if (v52 == 3) {
              *((void *)v105[0] + 1) = 0;
            }
            goto LABEL_53;
          }
          unint64_t v54 = (unint64_t)v55 + 8;
        }
        else
        {
          if ((*((unsigned char *)v105[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v105[0] + 3)) {
            goto LABEL_53;
          }
          uint64_t v53 = *((void *)v105[0] + 2);
          if ((v53 & 4) == 0) {
            goto LABEL_53;
          }
          unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
          if (!v54) {
            goto LABEL_53;
          }
        }
        size_t v113 = v105;
        sub_1CC5FA668(v54 + 16, &v113);
        goto LABEL_53;
      }
      while (1)
      {
        __n128 v70 = 0;
        size_t v71 = *v26;
        uint64_t v72 = **(void **)*v26;
        size_t v116 = (llvm::MDNode **)v118;
        uint64_t v117 = 0x200000000;
        uint64_t v121 = v72;
        long long v122 = &v130;
        size_t v123 = v131;
        uint64_t v124 = 0;
        int v125 = 0;
        __int16 v126 = 512;
        char v127 = 7;
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        uint64_t v128 = 0;
        uint64_t v129 = 0;
        size_t v130 = &unk_1F2616E88;
        v131[0] = &unk_1F2617008;
        uint64_t v119 = (void *)*((void *)v71 + 5);
        uint64_t v120 = (void **)(v71 + 24);
        uint64_t v73 = (void *)*((void *)v71 + 6);
        v105[0] = v73;
        if (v73)
        {
          llvm::MetadataTracking::track((uint64_t)v105, (unsigned __int8 *)v73, 2);
          __n128 v70 = v105[0];
        }
        sub_1CB8461A4((uint64_t)&v116, 0, (uint64_t)v70);
        if (v105[0])
        {
          int v90 = *(unsigned __int8 *)v105[0];
          if ((v90 - 4) > 0x1E)
          {
            if ((v90 - 3) >= 0xFFFFFFFE) {
              unint64_t v95 = v105[0];
            }
            else {
              unint64_t v95 = 0;
            }
            if ((v90 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v92 = (unint64_t)v95 + 8;
LABEL_144:
              size_t v113 = v105;
              sub_1CC5FA668(v92 + 16, &v113);
              goto LABEL_103;
            }
            if (v90 == 3) {
              *((void *)v105[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v105[0] + 1) & 0x7F) == 2 || *((_DWORD *)v105[0] + 3))
          {
            uint64_t v91 = *((void *)v105[0] + 2);
            if ((v91 & 4) != 0)
            {
              unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
              if (v92) {
                goto LABEL_144;
              }
            }
          }
        }
LABEL_103:
        size_t v74 = (unsigned __int8 *)*((void *)v71 - 4);
        size_t v113 = v115;
        *(void *)size_t v114 = 0x100000000;
        sub_1CC233A58(v71, 1, v102);
        if (v103)
        {
          sub_1CD506FC4((uint64_t)v105, (uint64_t)v102);
          sub_1CD506E6C((uint64_t)&v113, (unint64_t)v105);
          if (__p)
          {
            int v108 = __p;
            operator delete(__p);
          }
          if (SHIBYTE(v106) < 0) {
            operator delete(v105[0]);
          }
        }
        size_t v75 = *(llvm::Type **)(v25 + 48);
        uint64_t v76 = *(void *)(v25 + 56);
        __int16 v104 = 257;
        uint64_t v77 = v25;
        char v78 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v119[7] + 40) + 272), v75, 1);
        int v79 = operator new(0x60uLL);
        v79[13] = v79[13] & 0x38000000 | 1;
        int v80 = (llvm::Instruction *)(v79 + 8);
        *(void *)int v79 = 0;
        *((void *)v79 + 1) = 0;
        *((void *)v79 + 2) = 0;
        *((void *)v79 + 3) = v79 + 8;
        LOWORD(v108) = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v79 + 8), (uint64_t)v75, v76, (const char **)v105, 0, v78, 0);
        (*(void (**)(void *, llvm::Instruction *, uint64_t *, void *, void **))(*v123 + 16))(v123, v80, v102, v119, v120);
        if (v117)
        {
          __n128 v88 = v116;
          long long v89 = (char *)&v116[2 * v117];
          do
          {
            llvm::Instruction::setMetadata(v80, *(_DWORD *)v88, v88[1]);
            v88 += 2;
          }
          while (v88 != (llvm::MDNode **)v89);
        }
        unsigned int v81 = *(uint64_t ***)(v77 + 40);
        unint64_t v82 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v121 + 1912), 0);
        __int16 v104 = 257;
        uint64_t v25 = v77;
        if (*(void *)v74 == v82) {
          goto LABEL_113;
        }
        if (v74[16] <= 0x14u)
        {
          size_t v74 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v122
                                    + 28))(v122, 49, v74, v82);
          if (v74) {
            BOOL v83 = v74[16] >= 0x1Cu;
          }
          else {
            BOOL v83 = 0;
          }
          if (!v83) {
            goto LABEL_113;
          }
          (*(void (**)(void *, unsigned __int8 *, uint64_t *, void *, void **))(*v123 + 16))(v123, v74, v102, v119, v120);
          if (v117)
          {
            uint64_t v96 = v116;
            uint64_t v97 = (char *)&v116[2 * v117];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v74, *(_DWORD *)v96, v96[1]);
              v96 += 2;
            }
            while (v96 != (llvm::MDNode **)v97);
          }
        }
        else
        {
          LOWORD(v108) = 257;
          size_t v74 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v74, v82, (const char **)v105, 0);
          (*(void (**)(void *, unsigned __int8 *, uint64_t *, void *, void **))(*v123 + 16))(v123, v74, v102, v119, v120);
          if (v117)
          {
            long long v93 = v116;
            long long v94 = (char *)&v116[2 * v117];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v74, *(_DWORD *)v93, v93[1]);
              v93 += 2;
            }
            while (v93 != (llvm::MDNode **)v94);
          }
        }
        uint64_t v25 = a1;
LABEL_113:
        size_t v112 = v74;
        LOWORD(v108) = 257;
        uint64_t v84 = sub_1CC233B6C((uint64_t *)&v116, v81, (uint64_t **)v80, (uint64_t *)&v112, 1, (uint64_t)v113, v114[0], (uint64_t)v105, 0);
        *(_WORD *)(v84 + 18) = *(_WORD *)(v84 + 18) & 0xF003 | 0x4C;
        __n128 v85 = v113;
        if (v114[0])
        {
          uint64_t v86 = 48 * v114[0];
          __n128 v87 = (char *)v113 - 48;
          do
          {
            sub_1CD4AF9B4((uint64_t)&v87[v86]);
            v86 -= 48;
          }
          while (v86);
          __n128 v85 = v113;
        }
        if (v85 != v115) {
          free(v85);
        }
        if (v116 != (llvm::MDNode **)v118) {
          free(v116);
        }
        if (++v26 == v101)
        {
          uint64_t v69 = 1;
          goto LABEL_151;
        }
      }
    }
  }
  uint64_t v69 = 0;
LABEL_151:
  if (v109 != v111) {
    free(v109);
  }
  return v69;
}

char *sub_1CC233A58@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if ((*((_DWORD *)result + 5) & 0x80000000) != 0)
  {
    uint64_t v7 = a2;
    BOOL v8 = a3;
    uint64_t v9 = result;
    Descriptor = llvm::User::getDescriptor((llvm::User *)result);
    __n128 result = v9;
    if ((*((_DWORD *)v9 + 5) & 0x80000000) != 0)
    {
      uint64_t v10 = llvm::User::getDescriptor((llvm::User *)v9);
      __n128 result = v9;
      uint64_t v4 = &v10[v11];
    }
    else
    {
      uint64_t v4 = 0;
    }
    a3 = v8;
    a2 = v7;
    uint64_t v3 = Descriptor;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  unint64_t v5 = v4 - v3;
  if ((v5 & 0xFFFFFFFF0) != 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v5 >> 4);
    while (1)
    {
      unsigned int v20 = a3;
      uint64_t v14 = result;
      uint64_t v15 = a2;
      __n128 result = llvm::User::getDescriptor((llvm::User *)result);
      uint64_t v16 = *(void *)&result[v12];
      if (*(_DWORD *)(v16 + 8) == v15) {
        break;
      }
      a2 = v15;
      v12 += 16;
      --v13;
      a3 = v20;
      __n128 result = v14;
      if (!v13) {
        goto LABEL_4;
      }
    }
    uint64_t v17 = *(unsigned int *)&result[v12 + 8];
    uint64_t v18 = *(unsigned int *)&result[v12 + 12] - v17;
    uint64_t v19 = (uint64_t)&v14[32 * v17 + -32 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
    a3 = v20;
    *unsigned int v20 = v19;
    v20[1] = v18;
    v20[2] = v16;
    char v6 = 1;
  }
  else
  {
LABEL_4:
    char v6 = 0;
    *(unsigned char *)a3 = 0;
  }
  *((unsigned char *)a3 + 24) = v6;
  return result;
}

uint64_t sub_1CC233B6C(uint64_t *a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm::MDNode *a9)
{
  __int16 v41 = 257;
  if (a7)
  {
    int v29 = 0;
    uint64_t v30 = 48 * a7;
    uint64_t v31 = (void *)(a6 + 32);
    do
    {
      v29 += (*v31 - *(v31 - 1)) >> 3;
      v31 += 6;
      v30 -= 48;
    }
    while (v30);
    LODWORD(v16) = a5 + 1;
    uint64_t v32 = (v29 + a5 + 1);
    uint64_t v38 = (16 * a7);
    if (v38) {
      uint64_t v33 = (16 * a7) | 8u;
    }
    else {
      uint64_t v33 = 0;
    }
    __n128 v34 = (char *)operator new(v33 + 32 * v32 + 80);
    int64_t v35 = &v34[v33];
    uint64_t v19 = (uint64_t)&v34[32 * v32 + v33];
    *(_DWORD *)(v19 + 20) = v32 & 0x7FFFFFF | ((v38 != 0) << 31) | *(_DWORD *)(v19 + 20) & 0x38000000;
    if (v32)
    {
      do
      {
        *(void *)int64_t v35 = 0;
        *((void *)v35 + 1) = 0;
        *((void *)v35 + 2) = 0;
        *((void *)v35 + 3) = v19;
        v35 += 32;
      }
      while (v35 != (char *)v19);
    }
    if (v38) {
      *(void *)&v34[v38] = v38;
    }
    uint64_t v21 = *a2[2];
    int v20 = 0;
    if (a7)
    {
      uint64_t v36 = 48 * a7;
      size_t v37 = (void *)(a6 + 32);
      do
      {
        v20 += (*v37 - *(v37 - 1)) >> 3;
        v37 += 6;
        v36 -= 48;
      }
      while (v36);
    }
  }
  else
  {
    uint64_t v16 = (a5 + 1);
    BOOL v17 = a5 == -1;
    uint64_t v18 = operator new(32 * v16 + 80);
    uint64_t v19 = (uint64_t)&v18[4 * v16];
    *(_DWORD *)(v19 + 20) = *(_DWORD *)(v19 + 20) & 0x38000000 | v16 & 0x7FFFFFF;
    if (!v17)
    {
      do
      {
        *uint64_t v18 = 0;
        v18[1] = 0;
        void v18[2] = 0;
        v18[3] = v19;
        v18 += 4;
      }
      while (v18 != (void *)v19);
    }
    int v20 = 0;
    uint64_t v21 = *a2[2];
  }
  *(void *)uint64_t v19 = v21;
  *(void *)(v19 + 8) = 0;
  int v22 = *(_DWORD *)(v19 + 20) & 0xC0000000 | (v20 + v16) & 0x7FFFFFF;
  *(_DWORD *)(v19 + 16) = 84;
  *(_DWORD *)(v19 + 20) = v22;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_DWORD *)(v19 + 56) = 0;
  *(void *)(v19 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v19, a2, a3, a4, a5, a6, a7, &v40);
  if (*((unsigned char *)a1 + 100)) {
    *(void *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v19 + 64), **(uint64_t ***)v19, -1, 61);
  }
  if (sub_1CB845E74(v19))
  {
    size_t v27 = a9;
    int v28 = *((_DWORD *)a1 + 24);
    if (a9 || (size_t v27 = (llvm::MDNode *)a1[11]) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v19, 3, v27);
    }
    *(unsigned char *)(v19 + 17) |= 2 * (_BYTE)v28;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v19, a8, a1[6], a1[7]);
  uint64_t v23 = *((unsigned int *)a1 + 2);
  if (v23)
  {
    uint64_t v25 = *a1;
    uint64_t v26 = v25 + 16 * v23;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
      v25 += 16;
    }
    while (v25 != v26);
  }
  return v19;
}

char *sub_1CC233E3C(char **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  uint64_t v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v12 = a1[1];
  uint64_t v11 = a1[2];
  if (a5 <= (v11 - v12) >> 3)
  {
    uint64_t v18 = (v12 - v7) >> 3;
    if (v18 >= a5)
    {
      uint64_t v19 = &a3[4 * a5];
      int v20 = a1[1];
    }
    else
    {
      uint64_t v19 = &a3[4 * v18];
      int v20 = a1[1];
      if (v19 != a4)
      {
        uint64_t v21 = v19;
        int v22 = a1[1];
        do
        {
          uint64_t v23 = *v21;
          v21 += 4;
          *(void *)int v22 = v23;
          v22 += 8;
          v20 += 8;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if (v12 - v7 < 1) {
        return v7;
      }
    }
    unint64_t v24 = &v7[8 * a5];
    uint64_t v25 = &v20[-8 * a5];
    uint64_t v26 = v20;
    if (v25 < v12)
    {
      uint64_t v26 = v20;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while (v25 < v12);
    }
    a1[1] = v26;
    if (v20 != v24) {
      memmove(&v20[-8 * ((v20 - v24) >> 3)], v7, v20 - v24);
    }
    if (v19 != v9)
    {
      int v28 = v7;
      do
      {
        uint64_t v29 = *v9;
        v9 += 4;
        *(void *)int v28 = v29;
        v28 += 8;
      }
      while (v9 != v19);
    }
    return v7;
  }
  unint64_t v13 = a5 + ((v12 - v5) >> 3);
  if (v13 >> 61) {
    abort();
  }
  uint64_t v14 = v11 - v5;
  uint64_t v15 = v14 >> 2;
  if (v14 >> 2 <= v13) {
    uint64_t v15 = v13;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 >> 61) {
      sub_1CB833614();
    }
    BOOL v17 = (char *)operator new(8 * v16);
  }
  else
  {
    BOOL v17 = 0;
  }
  uint64_t v30 = &v17[8 * (v6 >> 3)];
  uint64_t v31 = &v30[8 * a5];
  uint64_t v32 = 8 * a5;
  uint64_t v33 = v30;
  do
  {
    uint64_t v34 = *v9;
    v9 += 4;
    *(void *)uint64_t v33 = v34;
    v33 += 8;
    v32 -= 8;
  }
  while (v32);
  int64_t v35 = *a1;
  if (v7 == *a1)
  {
    size_t v37 = v30;
  }
  else
  {
    uint64_t v36 = v7;
    size_t v37 = v30;
    do
    {
      uint64_t v38 = *((void *)v36 - 1);
      v36 -= 8;
      *((void *)v37 - 1) = v38;
      v37 -= 8;
    }
    while (v36 != v35);
    uint64_t v12 = a1[1];
  }
  unint64_t v39 = &v17[8 * v16];
  if (v12 != v7) {
    memmove(v31, v7, v12 - v7);
  }
  unint64_t v40 = *a1;
  *a1 = v37;
  a1[1] = &v31[v12 - v7];
  a1[2] = v39;
  if (v40) {
    operator delete(v40);
  }
  return v30;
}

BOOL sub_1CC234048(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  unint64_t v2 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (v1 == v2) {
    return 0;
  }
  if (v2 && (*(unsigned char *)v2 & 4) != 0)
  {
    __int16 v3 = *(_WORD *)(v2 + 44);
  }
  else
  {
    while (1)
    {
      __int16 v3 = *(_WORD *)(v2 + 44);
      if ((v3 & 4) == 0) {
        break;
      }
      unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  int v4 = v3 & 0xC;
  int v5 = v3 & 4;
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    return llvm::MachineInstr::hasPropertyInBundle(v2, 32, 1);
  }
  else {
    return (*(unsigned __int8 *)(*(void *)(v2 + 16) + 8) >> 5) & 1;
  }
}

uint64_t sub_1CC2340BC(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v292 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7) {
    return 0;
  }
  uint64_t v14 = a1;
  uint64_t v239 = *(void *)(a1 + 120);
  BOOL v241 = (uint64_t **)(v239 + 56);
  v279[0] = 0;
  v279[1] = 0;
  v277[1] = 0;
  v278 = (uint64_t *)v279;
  v276 = (uint64_t *)v277;
  v277[0] = 0;
  do
  {
    sub_1CD498850((uint64_t *)&v276, *(void *)(v6 + 8), *(void *)(v6 + 8), v6);
    v6 += 272;
  }
  while (v6 != v7);
  uint64_t v15 = *(void **)(v14 + 48);
  uint64_t v242 = v14 + 48;
  uint64_t v16 = *(unsigned int *)(v14 + 56);
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    while (!*v15)
    {
      ++v15;
      v17 -= 8;
      if (!v17) {
        goto LABEL_10;
      }
    }
    uint64_t v268 = 0;
    uint64_t v19 = *a2;
    uint64_t v18 = a2[1];
    do
    {
      if (!v268) {
        goto LABEL_18;
      }
      if ((*(unsigned char *)(v19 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v19);
      }
      int v20 = *(_DWORD *)(v19 + 240);
      int v21 = *(unsigned __int16 *)(v19 + 226);
      if ((*((unsigned char *)v268 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(v268);
      }
      if (v20 + v21 > *((_DWORD *)v268 + 60) + *((unsigned __int16 *)v268 + 113)) {
LABEL_18:
      }
        uint64_t v268 = (llvm::SUnit *)v19;
      v19 += 272;
    }
    while (v19 != v18);
    uint64_t v245 = *((void *)v268 + 1);
  }
  else
  {
LABEL_10:
    uint64_t v245 = 0;
    uint64_t v268 = 0;
  }
  int v22 = *(_DWORD *)(*(void *)(v14 + 32) + 16);
  uint64_t v23 = v286;
  v283 = v286;
  int v285 = 6;
  if ((v22 + 63) >= 0x1C0)
  {
    unsigned int v284 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v22 + 63) >= 0x40) {
    bzero(v286, 8 * ((v22 + 63) >> 6));
  }
  unsigned int v284 = (v22 + 63) >> 6;
  v286[12] = v22;
  uint64_t v24 = a3;
  if (a4 == a3)
  {
    uint64_t v8 = 0;
    goto LABEL_386;
  }
  unsigned int v240 = 0;
  unsigned int v270 = (uint64_t *)v14;
  unsigned int v243 = a6;
  do
  {
    a4 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (!a4 || (*(unsigned char *)a4 & 4) == 0)
    {
      while ((*(_WORD *)(a4 + 44) & 4) != 0)
        a4 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    }
    --a5;
    if (**(unsigned __int16 **)(a4 + 16) - 13 < 5) {
      continue;
    }
    v275[0] = 0;
    v275[1] = 0;
    BOOL v274 = (uint64_t *)v275;
    sub_1CD5078B4(v14, a4, &v274);
    int v246 = a5;
    sub_1CD5079C8(v14, a4, a5, (uint64_t)&v274);
    *(void *)&long long v287 = a4;
    uint64_t v25 = sub_1CD508D28(&v276, a4, (uint64_t **)&v287);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    uint64_t v29 = v25[5];
    *(void *)&long long v287 = v288;
    *((void *)&v287 + 1) = 0x400000000;
    v290[0] = 0;
    v290[1] = 0;
    v289 = v290;
    uint64_t v30 = *((unsigned int *)v29 + 10);
    v264 = v29;
    if (v30)
    {
      uint64_t v31 = 0;
      int v28 = 0;
      uint64_t v27 = 0;
      uint64_t v32 = (_DWORD *)v29[4];
      uint64_t v33 = &v32[4 * v30];
      do
      {
        if (((*v32 >> 1) & 3u) - 1 <= 1)
        {
          LODWORD(v281) = v32[2];
          if ((sub_1CB918828((uint64_t)&v287, (unsigned int *)&v281) & 0x100000000) != 0)
          {
            if (v28 >= v31)
            {
              uint64_t v34 = (v28 - v27) >> 3;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61) {
LABEL_389:
              }
                abort();
              if ((v31 - v27) >> 2 > v35) {
                unint64_t v35 = (v31 - v27) >> 2;
              }
              if ((unint64_t)(v31 - v27) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v35;
              }
              if (v36)
              {
                if (v36 >> 61) {
LABEL_390:
                }
                  sub_1CB833614();
                size_t v37 = (char *)operator new(8 * v36);
              }
              else
              {
                size_t v37 = 0;
              }
              uint64_t v38 = &v37[8 * v34];
              *(void *)uint64_t v38 = v32;
              unint64_t v39 = v38 + 8;
              if (v28 != v27)
              {
                do
                {
                  uint64_t v40 = *((void *)v28 - 1);
                  v28 -= 8;
                  *((void *)v38 - 1) = v40;
                  v38 -= 8;
                }
                while (v28 != v27);
                int v28 = v27;
              }
              uint64_t v27 = v38;
              uint64_t v31 = &v37[8 * v36];
              if (v28) {
                operator delete(v28);
              }
              int v28 = v39;
            }
            else
            {
              *(void *)int v28 = v32;
              v28 += 8;
            }
          }
        }
        v32 += 4;
      }
      while (v32 != v33);
      uint64_t v26 = (void *)v290[0];
    }
    sub_1CB833A08((uint64_t)&v289, v26);
    if ((unsigned char *)v287 != v288) {
      free((void *)v287);
    }
    if (a4 != v245)
    {
      uint64_t v42 = *(unsigned int *)(v14 + 56);
      if (v42)
      {
        int v43 = *(void **)(v14 + 48);
        uint64_t v41 = 8 * v42;
        while (!*v43)
        {
          ++v43;
          v41 -= 8;
          if (!v41) {
            goto LABEL_84;
          }
        }
        uint64_t v41 = v242;
      }
      else
      {
        uint64_t v41 = 0;
      }
      goto LABEL_84;
    }
    if (v268)
    {
      uint64_t v44 = *((unsigned int *)v268 + 10);
      if (v44)
      {
        long long v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = *((void *)v268 + 4);
        uint64_t v48 = 16 * v44;
        do
        {
          unint64_t v49 = *(void *)v47 & 0xFFFFFFFFFFFFFFF8;
          int v50 = *(_DWORD *)(v47 + 12);
          if ((*(unsigned char *)(v49 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(void *)v47 & 0xFFFFFFFFFFFFFFF8));
          }
          unsigned int v51 = *(_DWORD *)(v49 + 240) + v50;
          if (v46 < v51 || v46 == v51 && (*(void *)v47 & 6) == 2)
          {
            unsigned int v46 = *(_DWORD *)(v49 + 240) + v50;
            long long v45 = (void *)v47;
          }
          v47 += 16;
          v48 -= 16;
        }
        while (v48);
        if (!v45)
        {
          uint64_t v41 = 0;
          uint64_t v245 = 0;
          uint64_t v268 = 0;
          uint64_t v14 = (uint64_t)v270;
          goto LABEL_84;
        }
        uint64_t v268 = (llvm::SUnit *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v14 = (uint64_t)v270;
        if (v268)
        {
          uint64_t v41 = 0;
          uint64_t v245 = *((void *)v268 + 1);
          goto LABEL_84;
        }
      }
    }
    uint64_t v41 = 0;
    uint64_t v245 = 0;
    uint64_t v268 = 0;
LABEL_84:
    BOOL v52 = **(_WORD **)(a4 + 16) == 7 || v27 == v28;
    if (!v52)
    {
      v269 = (void *)v41;
      uint64_t v53 = v27;
      do
      {
        unint64_t v54 = *(uint64_t **)v53;
        uint64_t v55 = **(void **)v53;
        if (((v55 >> 1) & 3) - 1 <= 1)
        {
          unint64_t v56 = *((unsigned int *)v54 + 2);
          if (sub_1CB946A80(*(void **)(v14 + 16), *((_DWORD *)v54 + 2))
            && (!v269 || ((*(void *)(*v269 + ((v56 >> 3) & 0x1FFFFFF8)) >> v56) & 1) == 0))
          {
            for (uint64_t i = v275[0]; i; uint64_t i = (void *)*i)
            {
              unsigned int v58 = *((_DWORD *)i + 7);
              if (v56 >= v58)
              {
                if (v58 >= v56) {
                  goto LABEL_198;
                }
                ++i;
              }
            }
            unsigned int RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(a4, v56, 0, 0, 0);
            if (RegisterDefOperandIdx != -1)
            {
              uint64_t v60 = *(void *)(a4 + 32);
              if (v60)
              {
                if ((*(unsigned char *)(v60 + 32 * RegisterDefOperandIdx + 3) & 2) == 0)
                {
                  uint64_t v61 = *((unsigned int *)v264 + 10);
                  if (!v61) {
                    goto LABEL_121;
                  }
                  unint64_t v62 = v55 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v63 = 16 * v61;
                  size_t v64 = (_DWORD *)(v264[4] + 8);
                  uint64_t v65 = v64;
                  uint64_t v66 = v63;
                  while (1)
                  {
                    uint64_t v67 = *((void *)v65 - 1) & 6;
                    if ((*((void *)v65 - 1) & 0xFFFFFFFFFFFFFFF8) == v62)
                    {
                      if (v67 != 2 || *v65 != v56)
                      {
LABEL_114:
                        LODWORD(v56) = 0;
                        do
                        {
LABEL_115:
                          uint64_t v68 = *((void *)v64 - 1);
                          if ((v68 & 0xFFFFFFFFFFFFFFF8) == v62)
                          {
                            if (((v68 >> 1) & 3) - 1 >= 2) {
                              goto LABEL_198;
                            }
                          }
                          else if ((v68 & 6) == 0 && *v64 == v56)
                          {
                            goto LABEL_198;
                          }
                          v64 += 4;
                          v63 -= 16;
                        }
                        while (v63);
LABEL_121:
                        if (!v56) {
                          break;
                        }
                        uint64_t v69 = v283;
                        if (v284) {
                          bzero(v283, 8 * v284);
                        }
                        uint64_t v70 = *(void *)(v14 + 32);
                        if (v70) {
                          size_t v71 = (uint64_t *)(v70 + 8);
                        }
                        else {
                          size_t v71 = 0;
                        }
                        uint64_t v72 = *v71;
                        int v73 = *(_DWORD *)(*v71 + 24 * v56 + 16) & 0xF;
                        unint64_t v74 = ((unint64_t)*(unsigned int *)(*v71 + 24 * v56 + 16) >> 3) & 0x1FFFFFFE;
                        uint64_t v77 = v71 + 5;
                        uint64_t v76 = v71[5];
                        uint64_t v75 = v77[1];
                        char v78 = (unsigned __int16 *)(v75 + v74);
                        int v80 = *v78;
                        int v79 = v78 + 1;
                        int v81 = v80 + v73 * v56;
                        while (1)
                        {
                          uint64_t v82 = (unsigned __int16)v81;
                          unsigned int v83 = *(unsigned __int16 *)(v76 + 4 * (unsigned __int16)v81);
                          if (*(_WORD *)(v76 + 4 * (unsigned __int16)v81) && v75 != 0) {
                            break;
                          }
                          int v85 = (unsigned __int16)*v79++;
                          v81 += v85;
                          if (!v85) {
                            goto LABEL_134;
                          }
                        }
                        while (1)
                        {
                          unsigned int v120 = *(unsigned __int16 *)(v76 + 4 * v82 + 2) << 16;
                          uint64_t v121 = (unsigned __int16)v83;
                          while (1)
                          {
                            long long v122 = (unsigned __int16 *)(v75 + 2 * *(unsigned int *)(v72 + 24 * v121 + 8));
                            do
                            {
                              v69[(unsigned __int16)v83 >> 6] |= 1 << v83;
                              int v123 = *v122++;
                              v83 += v123;
                            }
                            while (v123);
                            uint64_t v121 = HIWORD(v120);
                            if (!v121) {
                              break;
                            }
                            unsigned int v83 = HIWORD(v120);
                            v120 >>= 16;
                          }
                          if (!*v79) {
                            break;
                          }
                          v81 += (unsigned __int16)*v79++;
                          uint64_t v82 = (unsigned __int16)v81;
                          unsigned int v83 = *(unsigned __int16 *)(v76 + 4 * (unsigned __int16)v81);
                        }
LABEL_134:
                        uint64_t v86 = *((unsigned int *)v264 + 30);
                        if (v86)
                        {
                          __n128 v87 = (_DWORD *)v264[14];
                          __n128 v88 = &v87[4 * v86];
                          do
                          {
                            if ((~*v87 & 6) != 0)
                            {
                              unint64_t v89 = v87[2];
                              if (((*(void *)((char *)v69 + ((v89 >> 3) & 0x1FFFFFF8)) >> v89) & 1) != 0
                                && v89 != v56)
                              {
                                int v90 = (_WORD *)(*(void *)(v70 + 56)
                                              + 2
                                              * *(unsigned int *)(*(void *)(v70 + 8) + 24 * v89 + 8));
                                int v91 = (unsigned __int16)*v90;
                                unsigned __int16 v92 = v91 + v89;
                                BOOL v52 = v91 == 0;
                                BOOL v93 = *v90 != 0;
                                if (!v52 && v56 != v92)
                                {
                                  unint64_t v95 = v90 + 1;
                                  do
                                  {
                                    int v97 = *v95++;
                                    int v96 = v97;
                                    v92 += v97;
                                    BOOL v93 = v97 != 0;
                                    if (!v97) {
                                      unint64_t v95 = 0;
                                    }
                                    if (v96) {
                                      BOOL v98 = v56 == v92;
                                    }
                                    else {
                                      BOOL v98 = 1;
                                    }
                                  }
                                  while (!v98);
                                }
                                if (!v93) {
                                  goto LABEL_198;
                                }
                              }
                            }
                            v87 += 4;
                          }
                          while (v87 != v88);
                        }
                        unint64_t v99 = *(int **)(v14 + 120);
                        uint64_t v100 = *(unsigned int *)(*((void *)v99 + 4) + 4 * v56);
                        do
                        {
                          uint64_t v101 = v100;
                          uint64_t v100 = *(unsigned int *)(*((void *)v99 + 1) + 4 * v100);
                        }
                        while (v100 != v101);
                        if (!v101) {
                          break;
                        }
                        v272 = 0;
                        uint64_t v273 = 0;
                        BOOL v271 = &v272;
                        int v102 = *v99;
                        uint64_t v255 = (uint64_t)(v99 + 14);
                        if (!*v99) {
                          goto LABEL_197;
                        }
                        unint64_t v103 = 0;
                        __int16 v104 = 0;
                        char v105 = 0;
                        unsigned int v106 = 0;
                        v254 = v99;
                        while (1)
                        {
                          uint64_t v107 = *(unsigned int *)(*((void *)v99 + 4) + 4 * v106);
                          do
                          {
                            uint64_t v108 = v107;
                            uint64_t v107 = *(unsigned int *)(*((void *)v99 + 1) + 4 * v107);
                          }
                          while (v107 != v108);
                          if (v108 == v101)
                          {
                            uint64_t v249 = v104;
                            size_t v109 = v105;
                            if (sub_1CD508670(v255, v106))
                            {
                              uint64_t v110 = v249;
                              char v105 = v109;
                              if ((unint64_t)v249 >= v103)
                              {
                                uint64_t v113 = v249 - v109;
                                unint64_t v114 = v113 + 1;
                                if ((unint64_t)(v113 + 1) >> 62) {
                                  goto LABEL_389;
                                }
                                if ((uint64_t)(v103 - (void)v109) >> 1 > v114) {
                                  unint64_t v114 = (uint64_t)(v103 - (void)v109) >> 1;
                                }
                                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
                                if (v103 - (unint64_t)v109 < 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v115 = v114;
                                }
                                unint64_t v265 = v115;
                                if (v115)
                                {
                                  if (v115 >> 62) {
                                    goto LABEL_390;
                                  }
                                  size_t v116 = (char *)operator new(4 * v115);
                                  char v105 = v109;
                                  uint64_t v110 = v249;
                                }
                                else
                                {
                                  size_t v116 = 0;
                                }
                                uint64_t v117 = (unsigned int *)&v116[4 * v113];
                                unsigned int *v117 = v106;
                                size_t v112 = v117 + 1;
                                if (v110 == v105)
                                {
                                  unint64_t v118 = v265;
                                }
                                else
                                {
                                  unint64_t v118 = v265;
                                  do
                                  {
                                    unsigned int v119 = *--v110;
                                    *--uint64_t v117 = v119;
                                  }
                                  while (v110 != v105);
                                }
                                int v111 = &v116[4 * v118];
                                if (v105) {
                                  operator delete(v105);
                                }
                                char v105 = v117;
                              }
                              else
                              {
                                int v111 = (char *)v103;
                                *uint64_t v249 = v106;
                                size_t v112 = v249 + 1;
                              }
                              unint64_t v99 = v254;
                              int v102 = *v254;
                              __int16 v104 = v112;
                              unint64_t v103 = (unint64_t)v111;
                            }
                            else
                            {
                              char v105 = v109;
                              unint64_t v99 = v254;
                              __int16 v104 = v249;
                            }
                          }
                          if (++v106 == v102)
                          {
                            if (v105 == v104)
                            {
                              if (v104) {
                                operator delete(v104);
                              }
                              uint64_t v14 = (uint64_t)v270;
                              goto LABEL_197;
                            }
                            unsigned int v124 = 0;
                            v282[0] = 0;
                            v282[1] = 0;
                            int v125 = v105;
                            v281 = (uint64_t *)v282;
                            std::string __p = v105;
                            unint64_t v250 = v104;
                            do
                            {
                              unsigned int v126 = *v125;
                              LODWORD(v280) = *v125;
                              if (!v124) {
                                goto LABEL_215;
                              }
                              char v127 = (_WORD *)(*(void *)(v270[4] + 56)
                                             + 2 * *(unsigned int *)(*(void *)(v270[4] + 8) + 24 * v124 + 8));
                              int v128 = (unsigned __int16)*v127;
                              unsigned __int16 v129 = v128 + v124;
                              BOOL v52 = v128 == 0;
                              BOOL v130 = *v127 == 0;
                              if (!v52 && v126 != v129)
                              {
                                unint64_t v132 = v127 + 1;
                                do
                                {
                                  int v134 = *v132++;
                                  int v133 = v134;
                                  v129 += v134;
                                  BOOL v130 = v134 == 0;
                                  if (!v134) {
                                    unint64_t v132 = 0;
                                  }
                                  if (v133) {
                                    BOOL v135 = v126 == v129;
                                  }
                                  else {
                                    BOOL v135 = 1;
                                  }
                                }
                                while (!v135);
                              }
                              if (!v130) {
LABEL_215:
                              }
                                unsigned int v124 = v126;
                              if (sub_1CD508670(v255, v126))
                              {
                                unsigned int v251 = v124;
                                size_t v136 = sub_1CD508A40(&v281, v126, &v280);
                                char v137 = (void **)(v136 + 5);
                                sub_1CD5082FC((uint64_t)&v287, v270, v126);
                                int v138 = (uint64_t *)v287;
                                if (v136 + 5 != (uint64_t **)&v287)
                                {
                                  if ((unsigned char *)v287 == v288)
                                  {
                                    int v139 = DWORD2(v287);
                                    uint64_t v140 = *((unsigned int *)v136 + 12);
                                    if (v140 < DWORD2(v287))
                                    {
                                      if (*((_DWORD *)v136 + 13) < DWORD2(v287))
                                      {
                                        *((_DWORD *)v136 + 12) = 0;
                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                      }
                                      if (v140) {
                                        memmove(*v137, v288, 8 * v140);
                                      }
                                      else {
                                        uint64_t v140 = 0;
                                      }
                                      if (v140 != DWORD2(v287)) {
                                        memcpy((char *)*v137 + 8 * v140, (const void *)(v287 + 8 * v140), 8 * DWORD2(v287) - 8 * v140);
                                      }
                                    }
                                    else if (DWORD2(v287))
                                    {
                                      memmove(*v137, v288, 8 * DWORD2(v287));
                                    }
                                    *((_DWORD *)v136 + 12) = v139;
                                  }
                                  else
                                  {
                                    if (v136[5] != (uint64_t *)(v136 + 7))
                                    {
                                      free(v136[5]);
                                      int v138 = (uint64_t *)v287;
                                    }
                                    v136[5] = v138;
                                    v136[6] = (uint64_t *)*((void *)&v287 + 1);
                                    *(void *)&long long v287 = v288;
                                    HIDWORD(v287) = 0;
                                  }
                                  DWORD2(v287) = 0;
                                  int v138 = (uint64_t *)v287;
                                }
                                *((_DWORD *)v136 + 26) = v291;
                                if (v138 != (uint64_t *)v288) {
                                  free(v138);
                                }
                                unsigned int v124 = v251;
                              }
                              ++v125;
                            }
                            while (v125 != v250);
                            size_t v141 = __p;
                            uint64_t v14 = (uint64_t)v270;
                            do
                            {
                              unsigned int v142 = *v141;
                              if (*v141 != v124)
                              {
                                size_t v143 = (_WORD *)(*(void *)(v270[4] + 56)
                                               + 2 * *(unsigned int *)(*(void *)(v270[4] + 8) + 24 * v142 + 8));
                                int v144 = (unsigned __int16)*v143;
                                unsigned __int16 v145 = v144 + v142;
                                BOOL v52 = v144 == 0;
                                BOOL v146 = *v143 != 0;
                                if (!v52 && v124 != v145)
                                {
                                  long long v148 = v143 + 1;
                                  do
                                  {
                                    int v150 = *v148++;
                                    int v149 = v150;
                                    v145 += v150;
                                    BOOL v146 = v150 != 0;
                                    if (!v150) {
                                      long long v148 = 0;
                                    }
                                    if (v149) {
                                      BOOL v151 = v124 == v145;
                                    }
                                    else {
                                      BOOL v151 = 1;
                                    }
                                  }
                                  while (!v151);
                                }
                                if (!v146)
                                {
                                  sub_1CD46392C(v282[0]);
                                  if (__p) {
                                    operator delete(__p);
                                  }
                                  goto LABEL_197;
                                }
                              }
                              ++v141;
                            }
                            while (v141 != v250);
                            uint64_t v152 = v270[4];
                            long long v153 = *(uint64_t ***)(v152 + 240);
                            long long v154 = *(uint64_t ***)(v152 + 248);
                            unsigned int v247 = v124;
                            unint64_t v155 = 0;
                            if (v153 != v154)
                            {
                              unint64_t v156 = (unint64_t)v124 >> 3;
                              do
                              {
                                if (v124 - 0x40000000 >= 0xC0000001)
                                {
                                  uint64_t v157 = **v153;
                                  if (v156 < *(unsigned __int16 *)(v157 + 22)
                                    && ((1 << (v124 & 7)) & *(unsigned __int8 *)(*(void *)(v157 + 8) + v156)) != 0
                                    && (!v155
                                     || *v153 != v155
                                     && ((*(_DWORD *)(v155[1] + ((*(unsigned __int16 *)(v157 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v157 + 24)) & 1) != 0))
                                  {
                                    unint64_t v155 = *v153;
                                  }
                                }
                                ++v153;
                              }
                              while (v153 != v154);
                            }
                            unsigned int v252 = v124;
                            v280 = v155;
                            uint64_t v158 = v270[5];
                            unsigned int v159 = *(unsigned __int16 *)(*v155 + 24);
                            uint64_t v160 = *(void *)v158;
                            if (*(_DWORD *)(v158 + 8) != *(_DWORD *)(*(void *)v158
                                                                    + 24 * *(unsigned __int16 *)(*v155 + 24)))
                              llvm::RegisterClassInfo::compute((uint64_t *)v158, (unsigned __int16 ***)v155);
                            uint64_t v161 = v160 + 24 * v159;
                            int v162 = *(_DWORD *)(v161 + 4);
                            if (!v162)
                            {
                              int v163 = 0;
                              goto LABEL_351;
                            }
                            uint64_t v258 = *(void *)(v161 + 16);
                            long long v164 = v280;
                            *(void *)&long long v287 = v280;
                            DWORD2(v287) = v162;
                            int v260 = v162;
                            sub_1CD508B24((uint64_t *)&v278, (unint64_t)v280, &v287);
                            unint64_t v238 = (unint64_t)v164;
                            uint64_t v165 = sub_1CD4FD4E8(&v278, (unint64_t)v164, &v280);
                            int v166 = v260;
                            int v167 = *((_DWORD *)v165 + 10);
                            if (v260 == v167) {
                              int v168 = 0;
                            }
                            else {
                              int v168 = *((_DWORD *)v165 + 10);
                            }
                            int v257 = v168;
                            unsigned int v169 = v252;
                            while (1)
                            {
                              if (v167) {
                                int v166 = v167;
                              }
                              int v167 = v166 - 1;
                              unsigned int v170 = *(unsigned __int16 *)(v258 + 2 * (v166 - 1));
                              unsigned int v266 = v170;
                              if (sub_1CB946A80(*(void **)(v14 + 16), v170) && v169 != v170)
                              {
                                int v256 = v167;
                                sub_1CB833A08((uint64_t)&v271, v272);
                                v272 = 0;
                                uint64_t v273 = 0;
                                size_t v172 = __p;
                                BOOL v271 = &v272;
                                while (2)
                                {
                                  uint64_t v248 = v172;
                                  uint64_t v173 = *v172;
                                  LODWORD(v287) = v173;
                                  unsigned int v174 = v266;
                                  if (v173 != v169)
                                  {
                                    uint64_t v175 = *(void **)(v14 + 32);
                                    int SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex(v175 + 1, v247, v173);
                                    if (SubRegIndex
                                      && (uint64_t v177 = v175[1],
                                          uint64_t v178 = v175[7],
                                          uint64_t v179 = *(unsigned int *)(v177 + 24 * v266 + 4),
                                          *(_WORD *)(v178 + 2 * v179)))
                                    {
                                      unsigned __int16 v180 = *(_WORD *)(v178 + 2 * v179) + v266;
                                      long long v181 = (unsigned __int16 *)(v175[11]
                                                                + 2 * *(unsigned int *)(v177 + 24 * v266 + 12));
                                      long long v182 = (unsigned __int16 *)(v178 + 2 * v179 + 2);
                                      while (SubRegIndex != *v181)
                                      {
                                        unsigned int v174 = 0;
                                        int v183 = *v182++;
                                        v180 += v183;
                                        ++v181;
                                        if (!v183) {
                                          goto LABEL_292;
                                        }
                                      }
                                      unsigned int v174 = v180;
                                    }
                                    else
                                    {
                                      unsigned int v174 = 0;
                                    }
                                  }
LABEL_292:
                                  unsigned int v262 = v173;
                                  if (((unint64_t)sub_1CD508A40(&v281, v173, &v287)[5][v174 >> 6] >> v174))
                                  {
                                    uint64_t v184 = v270[15];
                                    uint64_t v185 = *(void *)(v184 + 80);
                                    if (*(_DWORD *)(v185 + 4 * v174) == -1
                                      || *(_DWORD *)(*(void *)(v184 + 104) + 4 * v174) != -1)
                                    {
                                      unsigned int v186 = *(_DWORD *)(*((void *)v254 + 10) + 4 * v173);
                                      uint64_t v187 = *((void *)v254 + 13);
                                      if (v186 <= *(_DWORD *)(v187 + 4 * v174))
                                      {
                                        uint64_t v188 = v270[4];
                                        if (v188) {
                                          uint64_t v189 = (uint64_t *)(v188 + 8);
                                        }
                                        else {
                                          uint64_t v189 = 0;
                                        }
                                        uint64_t v190 = *v189;
                                        int v191 = *(_DWORD *)(*v189 + 24 * v174 + 16) & 0xF;
                                        unint64_t v192 = ((unint64_t)*(unsigned int *)(*v189 + 24 * v174 + 16) >> 3) & 0x1FFFFFFE;
                                        uint64_t v195 = v189 + 5;
                                        uint64_t v194 = v189[5];
                                        uint64_t v193 = v195[1];
                                        v196 = (_WORD *)(v193 + v192);
                                        int v197 = (unsigned __int16)*v196 + v191 * v174;
                                        while (1)
                                        {
                                          ++v196;
                                          LOWORD(v198) = *(_WORD *)(v194 + 4 * (unsigned __int16)v197);
                                          if ((_WORD)v198) {
                                            break;
                                          }
LABEL_308:
                                          v197 += (unsigned __int16)*v196;
                                          if (!*v196) {
                                            goto LABEL_326;
                                          }
                                        }
                                        int v199 = *(unsigned __int16 *)(v194 + 4 * (unsigned __int16)v197 + 2);
                                        unsigned int v200 = v199 << 16;
                                        while (!v193)
                                        {
LABEL_306:
                                          unsigned int v200 = 0;
                                          LOWORD(v198) = v199;
                                          BOOL v52 = (unsigned __int16)v199 == 0;
                                          LOWORD(v199) = 0;
                                          if (v52) {
                                            goto LABEL_308;
                                          }
                                        }
                                        unint64_t v201 = (unsigned __int16 *)(v193
                                                                  + 2
                                                                  * *(unsigned int *)(v190
                                                                                    + 24 * (unsigned __int16)v198
                                                                                    + 8));
                                        while (v174 == (unsigned __int16)v198)
                                        {
                                          int v202 = *v201++;
                                          LOWORD(v198) = v202 + v198;
                                          if (!v202) {
                                            goto LABEL_306;
                                          }
                                        }
                                        char v203 = 0;
                                        while (2)
                                        {
                                          if (*(_DWORD *)(v185 + 4 * (unsigned __int16)v198) != -1
                                            && *(_DWORD *)(*(void *)(v184 + 104) + 4 * (unsigned __int16)v198) == -1
                                            || v186 > *(_DWORD *)(v187 + 4 * (unsigned __int16)v198))
                                          {
                                            goto LABEL_348;
                                          }
                                          v203 |= v186 > *(_DWORD *)(v187 + 4 * (unsigned __int16)v198);
                                          do
                                          {
                                            int v205 = *v201++;
                                            __int16 v204 = v205;
                                            if (v205)
                                            {
                                              LOWORD(v198) = v204 + v198;
                                            }
                                            else
                                            {
                                              unsigned int v198 = HIWORD(v200);
                                              if (HIWORD(v200))
                                              {
                                                v200 >>= 16;
                                              }
                                              else
                                              {
                                                if (!*v196) {
                                                  goto LABEL_325;
                                                }
                                                v197 += (unsigned __int16)*v196++;
                                                unsigned int v206 = (unsigned __int16 *)(v194 + 4 * (unsigned __int16)v197);
                                                unsigned int v198 = *v206;
                                                unsigned int v200 = v206[1] << 16;
                                              }
                                              unint64_t v201 = (unsigned __int16 *)(v193
                                                                        + 2
                                                                        * *(unsigned int *)(v190 + 24 * v198 + 8));
                                            }
                                          }
                                          while (v174 == (unsigned __int16)v198);
                                          if (v196) {
                                            continue;
                                          }
                                          break;
                                        }
LABEL_325:
                                        if (v203) {
                                          break;
                                        }
LABEL_326:
                                        uint64_t v207 = sub_1CD508888(v255, v173);
                                        if (v207 != v208)
                                        {
                                          uint64_t v209 = v207;
                                          v210 = v208;
                                          do
                                          {
                                            uint64_t v211 = *(void *)(v209[5] + 8);
                                            unsigned int v212 = llvm::MachineInstr::findRegisterDefOperandIdx(v211, v174, 0, 1, v270[4]);
                                            if (v212 != -1
                                              && (*(unsigned char *)(*(void *)(v211 + 32) + 32 * v212 + 3) & 0x40) != 0)
                                            {
                                              goto LABEL_348;
                                            }
                                            v213 = (uint64_t *)v209[1];
                                            if (v213)
                                            {
                                              do
                                              {
                                                unint64_t v214 = v213;
                                                v213 = (uint64_t *)*v213;
                                              }
                                              while (v213);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                unint64_t v214 = (uint64_t *)v209[2];
                                                BOOL v52 = *v214 == (void)v209;
                                                uint64_t v209 = v214;
                                              }
                                              while (!v52);
                                            }
                                            uint64_t v209 = v214;
                                          }
                                          while (v214 != v210);
                                        }
                                        uint64_t v215 = sub_1CD508888(v255, v262);
                                        if (v215 != v216)
                                        {
                                          v217 = v215;
                                          unsigned int v218 = v216;
                                          do
                                          {
                                            uint64_t v219 = v217[5];
                                            if ((~*(_DWORD *)v219 & 0x41000000) == 0
                                              && llvm::MachineInstr::findRegisterUseOperandIdx(*(void *)(v219 + 8), v174, 0, v270[4]) != -1)
                                            {
                                              goto LABEL_348;
                                            }
                                            unsigned int v220 = (uint64_t *)v217[1];
                                            if (v220)
                                            {
                                              do
                                              {
                                                v221 = v220;
                                                unsigned int v220 = (uint64_t *)*v220;
                                              }
                                              while (v220);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v221 = (uint64_t *)v217[2];
                                                BOOL v52 = *v221 == (void)v217;
                                                v217 = v221;
                                              }
                                              while (!v52);
                                            }
                                            v217 = v221;
                                          }
                                          while (v221 != v218);
                                        }
                                        sub_1CD508BE0((uint64_t *)&v271, v262, v262, v174);
                                        size_t v172 = v248 + 1;
                                        uint64_t v14 = (uint64_t)v270;
                                        unsigned int v169 = v252;
                                        if (v248 + 1 != v250) {
                                          continue;
                                        }
                                        sub_1CD508CA4((uint64_t)&v278, v238);
                                        *(void *)&long long v287 = v238;
                                        DWORD2(v287) = v256;
                                        sub_1CD508B24((uint64_t *)&v278, v238, &v287);
                                        int v163 = 1;
LABEL_351:
                                        sub_1CD46392C(v282[0]);
                                        if (__p)
                                        {
                                          operator delete(__p);
                                          if (v163)
                                          {
LABEL_355:
                                            uint64_t v222 = (uint64_t)v271;
                                            if (v271 != &v272)
                                            {
                                              do
                                              {
                                                uint64_t v259 = *(unsigned int *)(v222 + 28);
                                                uint64_t v261 = v222;
                                                uint64_t v267 = *(unsigned int *)(v222 + 32);
                                                uint64_t v223 = sub_1CD508888((uint64_t)v241, *(_DWORD *)(v222 + 28));
                                                BOOL v263 = v224;
                                                if (v223 != v224)
                                                {
                                                  unsigned int v229 = v223;
                                                  do
                                                  {
                                                    llvm::MachineOperand::setReg(v229[5], v267);
                                                    *(void *)&long long v287 = *(void *)(v229[5] + 8);
                                                    if (sub_1CD508D28(&v276, v287, (uint64_t **)&v287)[5])
                                                    {
                                                      uint64_t v230 = *v243;
                                                      uint64_t v231 = v243[1];
                                                      if (v231 != *v243)
                                                      {
                                                        uint64_t v234 = 0;
                                                        uint64_t v235 = *(void *)(v229[5] + 8);
                                                        do
                                                        {
                                                          uint64_t v236 = *(void *)(v231 - 8);
                                                          if (v236 == v235 || v236 == v234)
                                                          {
                                                            uint64_t v234 = *(void *)(v231 - 16);
                                                            sub_1CD508598((uint64_t)v270, v234, v56, v267);
                                                          }
                                                          else if (v234)
                                                          {
                                                            break;
                                                          }
                                                          v231 -= 16;
                                                        }
                                                        while (v231 != v230);
                                                      }
                                                    }
                                                    unsigned int v232 = (uint64_t *)v229[1];
                                                    if (v232)
                                                    {
                                                      do
                                                      {
                                                        v233 = v232;
                                                        unsigned int v232 = (uint64_t *)*v232;
                                                      }
                                                      while (v232);
                                                    }
                                                    else
                                                    {
                                                      do
                                                      {
                                                        v233 = (uint64_t *)v229[2];
                                                        BOOL v52 = *v233 == (void)v229;
                                                        unsigned int v229 = v233;
                                                      }
                                                      while (!v52);
                                                    }
                                                    unsigned int v229 = v233;
                                                  }
                                                  while (v233 != v263);
                                                }
                                                uint64_t v14 = (uint64_t)v270;
                                                sub_1CD507144((void *)v270[15], v267, 0);
                                                sub_1CD508828(v241, v267);
                                                *(_DWORD *)(*(void *)(v239 + 104) + 4 * v267) = *(_DWORD *)(*(void *)(v239 + 104) + 4 * v259);
                                                *(_DWORD *)(*(void *)(v239 + 80) + 4 * v267) = *(_DWORD *)(*(void *)(v239 + 80) + 4 * v259);
                                                sub_1CD507144((void *)v270[15], v259, 0);
                                                sub_1CD508828(v241, v259);
                                                uint64_t v225 = *(void *)(v239 + 80);
                                                *(_DWORD *)(*(void *)(v239 + 104) + 4 * v259) = *(_DWORD *)(v225 + 4 * v259);
                                                *(_DWORD *)(v225 + 4 * v259) = -1;
                                                uint64_t v226 = (void **)v261;
                                                uint64_t v227 = *(void **)(v261 + 8);
                                                if (v227)
                                                {
                                                  do
                                                  {
                                                    v228 = (void **)v227;
                                                    uint64_t v227 = (void *)*v227;
                                                  }
                                                  while (v227);
                                                }
                                                else
                                                {
                                                  do
                                                  {
                                                    v228 = (void **)v226[2];
                                                    BOOL v52 = *v228 == v226;
                                                    uint64_t v226 = v228;
                                                  }
                                                  while (!v52);
                                                }
                                                uint64_t v222 = (uint64_t)v228;
                                              }
                                              while (v228 != &v272);
                                            }
                                            ++v240;
                                          }
                                        }
                                        else if (v163)
                                        {
                                          goto LABEL_355;
                                        }
LABEL_197:
                                        sub_1CB833A08((uint64_t)&v271, v272);
                                        goto LABEL_198;
                                      }
                                    }
                                  }
                                  break;
                                }
LABEL_348:
                                uint64_t v14 = (uint64_t)v270;
                                unsigned int v169 = v252;
                                int v167 = v256;
                              }
                              int v166 = v260;
                              if (v167 == v257)
                              {
                                int v163 = 0;
                                goto LABEL_351;
                              }
                            }
                          }
                        }
                      }
                    }
                    else if (!v67 && *v65 == v56)
                    {
                      goto LABEL_114;
                    }
                    v65 += 4;
                    v66 -= 16;
                    if (!v66) {
                      goto LABEL_115;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_198:
        v53 += 8;
      }
      while (v53 != v28);
    }
    a5 = v246;
    sub_1CD507DE4((uint64_t *)v14, a4, v246);
    if (v27) {
      operator delete(v27);
    }
    sub_1CB833A08((uint64_t)&v274, v275[0]);
    uint64_t v24 = a3;
  }
  while (a4 != v24);
  uint64_t v23 = v283;
  uint64_t v8 = v240;
LABEL_386:
  if (v23 != v286) {
    free(v23);
  }
  sub_1CD40B1BC(v277[0]);
  sub_1CD40B1BC(v279[0]);
  return v8;
}

uint64_t sub_1CC2355BC()
{
  v4.n128_u64[0] = (unint64_t)"Debug control for aggressive anti-dep breaker";
  v4.n128_u64[1] = 45;
  __int16 v3 = &v2;
  int v1 = 1;
  int v2 = 0;
  sub_1CD4965C8((llvm::cl::Option *)&unk_1EBCC8D20, "agg-antidep-debugdiv", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC8D20, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Debug control for aggressive anti-dep breaker";
  v4.n128_u64[1] = 45;
  int v1 = 1;
  int v2 = 0;
  __int16 v3 = &v2;
  sub_1CD4965C8((llvm::cl::Option *)&unk_1EBCC8DE0, "agg-antidep-debugmod", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCC8DE0, &dword_1CB82C000);
}

void sub_1CC2356A0(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void v25[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a2 + 264);
  uint64_t v8 = *(void *)(a2 + 272);
  uint64_t v10 = a1;
  uint64_t v11 = (unsigned __int16 ***)(*(void *)(*(void *)(*(void *)(v8 + 40) + 24) + 16 * (a1 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = *((unsigned __int16 *)*v11 + 12);
  uint64_t v13 = *(void *)a3;
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(*(void *)a3 + 24 * *((unsigned __int16 *)*v11 + 12))) {
    llvm::RegisterClassInfo::compute((uint64_t *)a3, v11);
  }
  uint64_t v14 = v13 + 24 * v12;
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(unsigned int *)(v14 + 4);
  uint64_t v23 = v25;
  long long v24 = xmmword_1CDB15990;
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 344))(v9, v10, v15, v16, &v23, v8, a2, a4);
  int v18 = v17;
  *(void *)a5 = a5 + 24;
  *(_OWORD *)(a5 + 8) = xmmword_1CDB15990;
  uint64_t v19 = v23;
  uint64_t v20 = v24;
  if ((void)v24 && &v23 != (void **)a5)
  {
    if (v23 != v25)
    {
      *(void *)a5 = v23;
      *(void *)(a5 + 8) = v20;
      *(void *)(a5 + 16) = *((void *)&v24 + 1);
      *(void *)(a5 + 56) = v15;
      *(void *)(a5 + 64) = v16;
      if (v17) {
        int v21 = 0;
      }
      else {
        int v21 = v16;
      }
      *(_DWORD *)(a5 + 72) = v21;
      return;
    }
    if ((unint64_t)v24 >= 0x11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    memcpy((void *)(a5 + 24), v25, 2 * v24);
    uint64_t v19 = v23;
    *(void *)(a5 + 8) = v20;
    *(void *)&long long v24 = 0;
  }
  *(void *)(a5 + 56) = v15;
  *(void *)(a5 + 64) = v16;
  if (v19 == v25 && v18 != 1)
  {
    *(_DWORD *)(a5 + 72) = v16;
  }
  else
  {
    if (v18) {
      int v22 = 0;
    }
    else {
      int v22 = v16;
    }
    *(_DWORD *)(a5 + 72) = v22;
    if (v19 != v25) {
      free(v19);
    }
  }
}

const unsigned int *llvm::ComputeLinearIndex(llvm *a1, _DWORD *a2, _DWORD *a3, const unsigned int *a4, unsigned int a5)
{
  uint64_t v7 = a2;
  BOOL v9 = a2 != 0;
  if (!a2) {
    goto LABEL_3;
  }
  while (v7 != a3)
  {
LABEL_3:
    int v10 = *((unsigned __int8 *)a1 + 8);
    if (a1 && v10 == 16)
    {
      uint64_t v11 = *((unsigned int *)a1 + 3);
      if (!v11) {
        return a4;
      }
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)a1 + 2);
      uint64_t v14 = 8 * v11;
      while (1)
      {
        a1 = *(llvm **)(v13 + 8 * v12);
        if (v9 && v12 == *v7) {
          break;
        }
        a4 = (const unsigned int *)llvm::ComputeLinearIndex(*(llvm **)(v13 + 8 * v12++), 0, 0, a4, a5);
        v14 -= 8;
        if (!v14) {
          return a4;
        }
      }
    }
    else
    {
      if (!a1 || v10 != 17) {
        return (const unsigned int *)(a4 + 1);
      }
      uint64_t v16 = (llvm *)*((void *)a1 + 3);
      int v17 = llvm::ComputeLinearIndex(v16, 0, 0, 0, a5);
      if (!v9) {
        return (const unsigned int *)(a4 + v17 * *((_DWORD *)a1 + 8));
      }
      a4 = (const unsigned int *)(a4 + *v7 * v17);
      a1 = v16;
    }
    ++v7;
    BOOL v9 = 1;
  }
  return a4;
}

uint64_t llvm::ComputeValueVTs(uint64_t result, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = result;
  int v14 = *(unsigned __int8 *)(a3 + 8);
  if (a3 && v14 == 16)
  {
    if (a6)
    {
      __n128 result = (uint64_t)llvm::DataLayout::getStructLayout(a2, (llvm::StructType *)a3);
      uint64_t v15 = result;
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v27 = *(unsigned int *)(a3 + 12);
    if (v27)
    {
      int v28 = *(uint64_t **)(a3 + 16);
      uint64_t v29 = (uint64_t *)(v15 + 16);
      uint64_t v30 = 8 * v27;
      do
      {
        if (v15) {
          uint64_t v31 = *v29;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v32 = *v28++;
        __n128 result = llvm::ComputeValueVTs(v13, a2, v32, a4, a5, a6, v31 + a7);
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  else if (a3 && v14 == 17)
  {
    uint64_t v16 = *(llvm::Type **)(a3 + 24);
    uint64_t v17 = sub_1CB83544C((uint64_t)a2, (uint64_t)v16);
    __n128 result = llvm::DataLayout::getAlignment(a2, v16, 1);
    uint64_t v18 = *(unsigned int *)(a3 + 32);
    if (v18)
    {
      unint64_t v19 = ((1 << result) + ((unint64_t)(v17 + 7) >> 3) - 1) & -(1 << result);
      do
      {
        __n128 result = llvm::ComputeValueVTs(v13, a2, v16, a4, a5, a6, a7);
        a7 += v19;
        --v18;
      }
      while (v18);
    }
  }
  else if (v14 != 7)
  {
    __n128 result = sub_1CB87DC14(result, (uint64_t)a2, (llvm::EVT *)a3, 0);
    unsigned int v21 = *(_DWORD *)(a4 + 8);
    if (v21 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v22 = (uint64_t *)(*(void *)a4 + 16 * v21);
    *int v22 = result;
    v22[1] = v20;
    ++*(_DWORD *)(a4 + 8);
    if (a5)
    {
      __n128 result = sub_1CC235C30(v13, (uint64_t)a2, (llvm::EVT *)a3, 0);
      unsigned int v24 = *(_DWORD *)(a5 + 8);
      if (v24 >= *(_DWORD *)(a5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v25 = (uint64_t *)(*(void *)a5 + 16 * v24);
      *uint64_t v25 = result;
      v25[1] = v23;
      ++*(_DWORD *)(a5 + 8);
    }
    if (a6)
    {
      unsigned int v26 = *(_DWORD *)(a6 + 8);
      if (v26 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a6 + 8 * v26) = a7;
      ++*(_DWORD *)(a6 + 8);
    }
  }
  return result;
}

unint64_t sub_1CC235C30(uint64_t a1, uint64_t a2, llvm::EVT *this, llvm::Type *a4)
{
  if (this && *((_DWORD *)this + 2) == 15)
  {
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *((_DWORD *)this + 2) >> 8);
    unint64_t v6 = 0;
  }
  else if (this && (*((_DWORD *)this + 2) & 0xFE) == 0x12)
  {
    uint64_t v7 = (llvm::EVT *)*((void *)this + 3);
    if (v7 && *((_DWORD *)v7 + 2) == 15)
    {
      v13[0] = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *((_DWORD *)v7 + 2) >> 8);
      uint64_t v14 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)v13, *(llvm::LLVMContext **)this);
      uint64_t v7 = v8;
    }
    BOOL v9 = *(llvm::LLVMContext **)this;
    unint64_t EVT = llvm::EVT::getEVT(v7, 0, (BOOL)this);
    unint64_t v5 = sub_1CB882C1C(v9, EVT, v11, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((unsigned char *)this + 8) == 19) << 32)));
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    unint64_t v5 = sub_1CB87DC14(a1, a2, this, a4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  return v6 | v5;
}

uint64_t llvm::ComputeValueVTs(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::ComputeValueVTs(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t llvm::computeValueLLTs(uint64_t result, uint64_t a2, const llvm::DataLayout *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 != 7)
  {
    int v10 = (llvm::DataLayout *)result;
    if (v5 == 17)
    {
      uint64_t v12 = *(llvm::Type **)(a2 + 24);
      uint64_t v13 = sub_1CB83544C(result, (uint64_t)v12);
      __n128 result = llvm::DataLayout::getAlignment(v10, v12, 1);
      uint64_t v14 = *(unsigned int *)(a2 + 32);
      if (v14)
      {
        unint64_t v15 = ((1 << result) + ((unint64_t)(v13 + 7) >> 3) - 1) & -(1 << result);
        do
        {
          __n128 result = llvm::computeValueLLTs(v10, v12, a3, a4, a5);
          a5 += v15;
          --v14;
        }
        while (v14);
      }
    }
    else if (v5 == 16)
    {
      if (a4)
      {
        __n128 result = (uint64_t)llvm::DataLayout::getStructLayout((llvm::DataLayout *)result, (llvm::StructType *)a2);
        uint64_t v11 = result;
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 12);
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 8 * v19;
        do
        {
          if (v11) {
            uint64_t v22 = *(void *)(v11 + 16 + v20);
          }
          else {
            uint64_t v22 = 0;
          }
          __n128 result = llvm::computeValueLLTs(v10, *(void *)(*(void *)(a2 + 16) + v20), a3, a4, v22 + a5);
          v20 += 8;
        }
        while (v21 != v20);
      }
    }
    else
    {
      __n128 result = llvm::getLLTForType((llvm *)a2, (llvm::Type *)result, a3);
      unsigned int v16 = *((_DWORD *)a3 + 2);
      if (v16 >= *((_DWORD *)a3 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v16) = result;
      ++*((_DWORD *)a3 + 2);
      if (a4)
      {
        uint64_t v17 = 8 * a5;
        unsigned int v18 = *(_DWORD *)(a4 + 8);
        if (v18 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a4 + 8 * v18) = v17;
        ++*(_DWORD *)(a4 + 8);
      }
    }
  }
  return result;
}

llvm::Value *llvm::ExtractTypeInfo(llvm *this, llvm::Value *a2)
{
  __n128 result = llvm::Value::stripPointerCasts(this);
  uint64_t v3 = (uint64_t)result;
  unsigned int v4 = *((unsigned __int8 *)result + 16);
  if (v4 >= 4) {
    __n128 result = 0;
  }
  if (v3 && v4 == 3 && (*(unsigned char *)(v3 + 23) & 0x10) != 0)
  {
    uint64_t v5 = ***(void ***)v3;
    uint64_t v6 = *(void *)(v5 + 152);
    uint64_t v7 = *(unsigned int *)(v5 + 168);
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      BOOL v9 = (uint64_t *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == v3) {
        goto LABEL_13;
      }
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v7 - 1);
        uint64_t v10 = *(void *)(v6 + 16 * v8);
        if (v10 == v3)
        {
          BOOL v9 = (uint64_t *)(v6 + 16 * v8);
          goto LABEL_13;
        }
      }
    }
    BOOL v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_13:
    uint64_t v13 = (void *)v9[1];
    if (*v13 == 23)
    {
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[3];
      uint64_t v16 = *(void *)((char *)v13 + 31);
      if (v14 == 0x2E68652E6D766C6CLL && v15 == 0x6C612E6863746163 && v16 == 0x65756C61762E6C6CLL)
      {
        uint64_t v19 = *(void *)(v3 - 32);
        if (*(unsigned __int8 *)(v19 + 16) >= 4u) {
          return 0;
        }
        else {
          return (llvm::Value *)v19;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::getICmpCondCode(int a1)
{
  return dword_1CFAC6BB0[a1 - 32];
}

{
  return dword_1CFAC6BD8[a1 - 10];
}

uint64_t llvm::isInTailCallPosition(llvm *this, const llvm::CallBase *a2, const llvm::TargetMachine *a3)
{
  uint64_t v5 = *((void *)this + 5);
  uint64_t v6 = *(void ***)(v5 + 40);
  if (v6 == (void **)(v5 + 40))
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)(v6 - 3);
    if (!v6) {
      uint64_t v7 = 0;
    }
    if (v7[16] - 29 >= 0xB) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
  }
  int v9 = v8[16];
  if (v9 == 29) {
    uint64_t v10 = (const llvm::Instruction *)v8;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v10)
  {
    if ((*((_WORD *)a2 + 510) & 0x200) == 0)
    {
      int v26 = (*((unsigned __int16 *)this + 9) >> 2) & 0x3FF;
      if (v26 != 20 && v26 != 18) {
        return 0;
      }
    }
    if (v9 != 35) {
      return 0;
    }
  }
  int v11 = *v6;
  uint64_t v12 = (uint64_t)(*v6 - 3);
  if (v11) {
    uint64_t v13 = (llvm *)v12;
  }
  else {
    uint64_t v13 = 0;
  }
  while (v13 != this)
  {
    if (!sub_1CBF63B28((uint64_t)v13) && !sub_1CC27D470((uint64_t)v13))
    {
      uint64_t v14 = v11 ? (uint64_t)(v11 - 3) : 0;
      if (*(unsigned char *)(v14 + 16) != 84
        || (uint64_t v15 = *(void *)(v14 - 32)) == 0
        || *(unsigned char *)(v15 + 16)
        || *(void *)(v15 + 24) != *(void *)(v14 + 72)
        || !v11
        || (*(_DWORD *)(v15 + 32) & 0x2000) == 0
        || (int v19 = *(_DWORD *)(*(v11 - 7) + 36), v19 != 7) && v19 != 126 && v19 != 167)
      {
        if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v14)) {
          return 0;
        }
        uint64_t v16 = *(unsigned __int8 *)(v14 + 16) - 33;
        if (v16 <= 0x37)
        {
          if (((1 << (*(unsigned char *)(v14 + 16) - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v17 = *(void *)(v14 + 64);
            if (!v17 || (*(unsigned char *)(v17 + 20) & 4) == 0 && (*(unsigned char *)(v17 + 17) & 0x10) == 0)
            {
              __int32 v28 = 7;
              if (sub_1CC5CB59C(v14, &v28, 1uLL))
              {
                uint64_t v20 = *(void *)(v14 - 32);
                if (!v20
                  || *(unsigned char *)(v20 + 16)
                  || *(void *)(v20 + 24) != *(void *)(v14 + 72)
                  || *(_DWORD *)(v20 + 36) != 7)
                {
                  return 0;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v14, 66) & 1) == 0)
              {
                uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v14, 44);
                if (!result) {
                  return result;
                }
              }
            }
          }
          else if (((1 << (*(unsigned char *)(v14 + 16) - 33)) & 0x808001C8000010) != 0 {
                 || v16 == 28 && (*(_WORD *)(v14 + 18) & 0x301) != 0)
          }
          {
            return 0;
          }
        }
        uint64_t result = llvm::isSafeToSpeculativelyExecute(v14, 0, 0, 0);
        if (!result) {
          return result;
        }
      }
    }
    int v11 = (void *)*v11;
    if (v11) {
      uint64_t v13 = (llvm *)(v11 - 3);
    }
    else {
      uint64_t v13 = 0;
    }
  }
  uint64_t v21 = *(uint64_t ***)(v5 + 56);
  uint64_t v22 = (*(uint64_t (**)(const llvm::CallBase *, uint64_t **))(*(void *)a2 + 16))(a2, v21);
  uint64_t v23 = (const char **)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 120))(v22);
  return llvm::returnTypeIsEligibleForTailCall(v21, this, v10, v23, v24, v25);
}

uint64_t llvm::returnTypeIsEligibleForTailCall(uint64_t **this, const llvm::Function *a2, const llvm::Instruction *a3, const char **a4, const llvm::TargetLoweringBase *a5, BOOL *a6)
{
  v62[2] = *MEMORY[0x1E4F143B8];
  if (!a3
    || (uint64_t v7 = *((_DWORD *)a3 + 5) & 0x7FFFFFF, !v7)
    || *(unsigned __int8 *)(*((void *)a3 - 4 * v7) + 16) - 11 < 2)
  {
LABEL_4:
    LOBYTE(v8) = 1;
    return v8 & 1;
  }
  int v11 = a2;
  unsigned __int8 v43 = 0;
  LOBYTE(v8) = 0;
  if (!llvm::attributesPermitTailCall(this, a2, a3, (const llvm::ReturnInst *)a4, (const llvm::TargetLoweringBase *)&v43, a6))return v8 & 1; {
  uint64_t v13 = (uint64_t *)*((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
  }
  uint64_t v14 = *((void *)v11 - 4);
  if (v14 && !*(unsigned char *)(v14 + 16) && *(void *)(v14 + 24) == *((void *)v11 + 9))
  {
    uint64_t v32 = a4 + 22135;
    int v33 = *(_DWORD *)(v14 + 36);
    switch(v33)
    {
      case 199:
        uint64_t v38 = a4[22137];
        if (!v38 || strlen(a4[22137]) != 6) {
          goto LABEL_10;
        }
        int v35 = *((unsigned __int16 *)v38 + 2);
        BOOL v36 = *(_DWORD *)v38 == 1936549229;
        int v37 = 29797;
        break;
      case 197:
        unint64_t v39 = a4[22136];
        if (!v39 || strlen(a4[22136]) != 7) {
          goto LABEL_10;
        }
        int v35 = *(_DWORD *)(v39 + 3);
        BOOL v36 = *(_DWORD *)v39 == 1835885933;
        int v37 = 1702260589;
        break;
      case 194:
        uint64_t v34 = *v32;
        if (!*v32 || strlen(*v32) != 6) {
          goto LABEL_10;
        }
        int v35 = *((unsigned __int16 *)v34 + 2);
        BOOL v36 = *(_DWORD *)v34 == 1668113773;
        int v37 = 31088;
        break;
      default:
        goto LABEL_10;
    }
    if (v36 && v35 == v37)
    {
      uint64_t v41 = (uint64_t *)*((void *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      if (v13 == v41
        || v41
        && *((unsigned char *)v41 + 16) == 77
        && *(unsigned char *)(*v13 + 8) == 15
        && *(unsigned char *)(*v41 + 8) == 15
        && (uint64_t *)*(v41 - 4) == v13)
      {
        goto LABEL_4;
      }
    }
  }
LABEL_10:
  uint64_t v60 = (unsigned int *)v62;
  uint64_t v61 = 0x400000000;
  int v57 = v59;
  uint64_t v58 = 0x400000000;
  unint64_t v54 = v56;
  uint64_t v55 = 0x400000000;
  v52[0] = v53;
  v52[1] = (void *)0x400000000;
  int v15 = sub_1CC236B50(*v13, (uint64_t)&v54, (uint64_t)&v60);
  char v16 = sub_1CC236B50(*(void *)v11, (uint64_t)v52, (uint64_t)&v57);
  if (v15)
  {
    LOBYTE(v18) = v16 ^ 1;
    uint64_t v19 = 1;
    while (1)
    {
      if ((v18 & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v20 = *((void *)v54 + v55 - 1);
      unint64_t v21 = v60[v61 - 1];
      int v22 = *(unsigned __int8 *)(v20 + 8);
      if (v20) {
        BOOL v23 = v22 == 17;
      }
      else {
        BOOL v23 = 0;
      }
      if (v23)
      {
        if (*(void *)(v20 + 32) <= v21) {
          goto LABEL_46;
        }
        uint64_t v25 = (llvm::UndefValue **)(v20 + 24);
      }
      else
      {
        if (v20) {
          BOOL v24 = v22 == 16;
        }
        else {
          BOOL v24 = 0;
        }
        if (!v24 || v21 >= *(_DWORD *)(v20 + 12))
        {
LABEL_46:
          int v26 = 0;
          goto LABEL_25;
        }
        uint64_t v25 = (llvm::UndefValue **)(*(void *)(v20 + 16) + 8 * v21);
      }
      int v26 = *v25;
LABEL_25:
      int v11 = llvm::UndefValue::get(v26, v17);
LABEL_26:
      long long __s2 = v51;
      uint64_t v50 = 0x400000000;
      sub_1CD5091DC((uint64_t)&__s2, (uint64_t)&v60[v61], (uint64_t)&v60[v61], (uint64_t)v60, (uint64_t)v60);
      __s1 = v48;
      uint64_t v47 = 0x400000000;
      sub_1CD5091DC((uint64_t)&__s1, (uint64_t)&v57[4 * v58], (uint64_t)&v57[4 * v58], (uint64_t)v57, (uint64_t)v57);
      int v42 = v43;
      uint64_t v27 = (uint64_t)(this[5] + 34);
      unsigned int v45 = -1;
      __int32 v28 = v13;
      uint64_t v29 = (unsigned __int8 *)sub_1CC237080((llvm::GetElementPtrInst *)v13, (uint64_t)&__s2, &v45, (uint64_t)a4, v27);
      if (v29[16] - 11 > 1)
      {
        unsigned int v44 = -1;
        if (sub_1CC237080(v11, (uint64_t)&__s1, &v44, (uint64_t)a4, v27) != (llvm::GetElementPtrInst *)v29
          || v47 != v50
          || memcmp(__s1, __s2, 4 * v47))
        {
          int v30 = 0;
          uint64_t v8 = 0;
          goto LABEL_32;
        }
        int v30 = 0;
        BOOL v31 = v42 != 0;
        if (v44 == v45) {
          BOOL v31 = 1;
        }
        uint64_t v8 = 0;
        if (v44 < v45 || !v31) {
          goto LABEL_32;
        }
      }
      int v18 = sub_1CC236CCC((uint64_t)v52, (uint64_t)&v57) ^ 1;
      int v30 = 1;
      uint64_t v8 = v19;
LABEL_32:
      if (__s1 != v48) {
        free(__s1);
      }
      if (__s2 != v51) {
        free(__s2);
      }
      if (!v30) {
        goto LABEL_48;
      }
      uint64_t v19 = v8;
      uint64_t v13 = v28;
      if ((sub_1CC236CCC((uint64_t)&v54, (uint64_t)&v60) & 1) == 0)
      {
        LOBYTE(v8) = 1;
        goto LABEL_48;
      }
    }
  }
  LOBYTE(v8) = 1;
LABEL_48:
  if (v52[0] != v53) {
    free(v52[0]);
  }
  if (v54 != v56) {
    free(v54);
  }
  if (v57 != v59) {
    free(v57);
  }
  if (v60 != (unsigned int *)v62) {
    free(v60);
  }
  return v8 & 1;
}

BOOL llvm::attributesPermitTailCall(uint64_t **this, const llvm::Function *a2, const llvm::Instruction *a3, const llvm::ReturnInst *a4, const llvm::TargetLoweringBase *a5, BOOL *a6)
{
  v36[8] = *MEMORY[0x1E4F143B8];
  int v9 = this[14];
  if (v9 && *((char *)v9 + 31) < 0) {
    return 0;
  }
  if (a5) {
    *(unsigned char *)a5 = 1;
  }
  if (v9 && *((_DWORD *)v9 + 2) > 1u)
  {
    uint64_t v27 = v9[6];
    uint64_t v33 = **this;
    uint64_t v34 = v36;
    uint64_t v35 = 0x800000000;
    if (v27)
    {
      uint64_t v10 = (char *)(v27 + 48);
      int v11 = (char *)(v27 + 48 + 8 * *(unsigned int *)(v27 + 8));
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v33 = **this;
    uint64_t v34 = v36;
    uint64_t v35 = 0x800000000;
  }
  sub_1CC512940((uint64_t)&v34, (uint64_t)v36, v10, v11);
  uint64_t v12 = *((void *)a2 + 8);
  if (v12 && *(_DWORD *)(v12 + 8) > 1u)
  {
    uint64_t v28 = *(void *)(v12 + 48);
    uint64_t v29 = **this;
    int v30 = v32;
    uint64_t v31 = 0x800000000;
    if (v28)
    {
      uint64_t v13 = (char *)(v28 + 48);
      uint64_t v14 = (char *)(v28 + 48 + 8 * *(unsigned int *)(v28 + 8));
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v29 = **this;
    int v30 = v32;
    uint64_t v31 = 0x800000000;
  }
  sub_1CC512940((uint64_t)&v30, (uint64_t)v32, v13, v14);
  for (uint64_t i = 0; i != 6; ++i)
  {
    int v16 = dword_1CFAC6B60[i];
    llvm::AttrBuilder::removeAttribute((uint64_t)&v33, v16);
    llvm::AttrBuilder::removeAttribute((uint64_t)&v29, v16);
  }
  if (llvm::AttrBuilder::getAttribute((uint64_t)&v33, 67))
  {
    if (llvm::AttrBuilder::getAttribute((uint64_t)&v29, 67))
    {
      int v17 = 67;
      if (!a5)
      {
LABEL_17:
        llvm::AttrBuilder::removeAttribute((uint64_t)&v33, v17);
        llvm::AttrBuilder::removeAttribute((uint64_t)&v29, v17);
        goto LABEL_22;
      }
LABEL_16:
      *(unsigned char *)a5 = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  if (llvm::AttrBuilder::getAttribute((uint64_t)&v33, 48))
  {
    if (llvm::AttrBuilder::getAttribute((uint64_t)&v29, 48))
    {
      int v17 = 48;
      if (!a5) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_33:
    BOOL v24 = 0;
    goto LABEL_34;
  }
LABEL_22:
  if (!*((void *)a2 + 1))
  {
    llvm::AttrBuilder::removeAttribute((uint64_t)&v29, 48);
    llvm::AttrBuilder::removeAttribute((uint64_t)&v29, 67);
  }
  if (v35 != v31) {
    goto LABEL_33;
  }
  if (v35)
  {
    int v18 = (uint64_t *)v34;
    uint64_t v19 = (uint64_t *)v30;
    uint64_t v20 = 8 * v35 - 8;
    do
    {
      uint64_t v22 = *v19++;
      uint64_t v21 = v22;
      uint64_t v23 = *v18++;
      BOOL v24 = v23 == v21;
      BOOL v25 = v23 != v21 || v20 == 0;
      v20 -= 8;
    }
    while (!v25);
  }
  else
  {
    BOOL v24 = 1;
  }
LABEL_34:
  if (v30 != v32) {
    free(v30);
  }
  if (v34 != v36) {
    free(v34);
  }
  return v24;
}

uint64_t sub_1CC236B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 8);
    if (!a1 || v6 != 17) {
      break;
    }
    if (!*(void *)(a1 + 32)) {
      goto LABEL_15;
    }
    uint64_t v7 = (uint64_t *)(a1 + 24);
LABEL_7:
    uint64_t v8 = *v7;
    if (!*v7) {
      goto LABEL_15;
    }
    unint64_t v9 = *(unsigned int *)(a2 + 8);
    if (v9 >= *(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v9) = a1;
    ++*(_DWORD *)(a2 + 8);
    unint64_t v10 = *(unsigned int *)(a3 + 8);
    if (v10 >= *(unsigned int *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a3 + 4 * v10) = 0;
    ++*(_DWORD *)(a3 + 8);
    a1 = v8;
  }
  if (a1 && v6 == 16 && *(_DWORD *)(a1 + 12))
  {
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    goto LABEL_7;
  }
LABEL_15:
  if (!*(_DWORD *)(a3 + 8)) {
    return 1;
  }
  do
  {
    uint64_t v11 = *(void *)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
    if (v11) {
      BOOL v12 = *(unsigned char *)(v11 + 8) == 17;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12) {
      uint64_t v13 = v11 + 24;
    }
    else {
      uint64_t v13 = *(void *)(v11 + 16) + 8 * *(unsigned int *)(*(void *)a3 + 4 * *(unsigned int *)(a3 + 8) - 4);
    }
    int v14 = *(_DWORD *)(*(void *)v13 + 8) & 0xFE;
    BOOL v15 = v14 != 16;
  }
  while (v14 == 16 && (sub_1CC236E80((uint64_t *)a2, (uint64_t *)a3) & 1) != 0);
  return v15;
}

uint64_t sub_1CC236CCC(uint64_t a1, uint64_t a2)
{
  do
  {
    uint64_t result = sub_1CC236E80((uint64_t *)a1, (uint64_t *)a2);
    if (!result) {
      break;
    }
    uint64_t v5 = *(void *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 8) - 8);
    BOOL v6 = v5 && *(unsigned char *)(v5 + 8) == 17;
    uint64_t v7 = v6
       ? v5 + 24
       : *(void *)(v5 + 16) + 8 * *(unsigned int *)(*(void *)a2 + 4 * *(unsigned int *)(a2 + 8) - 4);
  }
  while ((*(_DWORD *)(*(void *)v7 + 8) & 0xFE) == 0x10);
  return result;
}

void sub_1CC236D58(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v15[16] = *MEMORY[0x1E4F143B8];
  BOOL v12 = v15;
  int v14 = 16;
  v15[0] = a3;
  uint64_t v5 = a2;
  unsigned int v6 = 1;
  do
  {
    while (1)
    {
      uint64_t v7 = *((void *)v12 + --v6);
      unsigned int v13 = v6;
      if (v7 == a3 || *(unsigned char *)(v7 + 184) == 0) {
        break;
      }
      if (!v6) {
        goto LABEL_13;
      }
    }
    uint64_t v9 = v7;
    uint64_t v10 = v5;
    sub_1CD5092D4((uint64_t)v11, a1, &v9, &v10);
    if (v11[16] && !sub_1CD509264(v7)) {
      sub_1CD509370((uint64_t)&v12, (uint64_t)v12 + 8 * v13, *(char **)(v7 + 88), *(char **)(v7 + 96));
    }
    unsigned int v6 = v13;
  }
  while (v13);
LABEL_13:
  if (v12 != v15) {
    free(v12);
  }
}

uint64_t sub_1CC236E80(uint64_t *a1, uint64_t *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 - 8;
  uint64_t v5 = *a2;
  uint64_t v6 = *a2 - 4;
  unsigned int v7 = *((_DWORD *)a1 + 2);
  while (1)
  {
    uint64_t v8 = *(void *)(v4 + 8 * v7);
    uint64_t v9 = v2;
    unsigned int v10 = *(_DWORD *)(v6 + 4 * v2) + 1;
    if (v8) {
      BOOL v11 = *(unsigned char *)(v8 + 8) == 17;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      if (*(_DWORD *)(v8 + 12) > v10) {
        break;
      }
      goto LABEL_10;
    }
    if (*(void *)(v8 + 32) > (unint64_t)v10) {
      break;
    }
LABEL_10:
    *((_DWORD *)a2 + 2) = v9 - 1;
    unsigned int v7 = *((_DWORD *)a1 + 2) - 1;
    *((_DWORD *)a1 + 2) = v7;
    unsigned int v2 = *((_DWORD *)a2 + 2);
    if (!v2) {
      return 0;
    }
  }
  *(_DWORD *)(v5 + 4 * v9 - 4) = v10;
  uint64_t v13 = *(void *)(v3 + 8 * *((unsigned int *)a1 + 2) - 8);
  if (v13) {
    BOOL v14 = *(unsigned char *)(v13 + 8) == 17;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    uint64_t v15 = v13 + 24;
  }
  else {
    uint64_t v15 = *(void *)(v13 + 16) + 8 * *(unsigned int *)(v5 + 4 * *((unsigned int *)a2 + 2) - 4);
  }
  uint64_t v16 = *(void *)v15;
  int v17 = *(_DWORD *)(*(void *)v15 + 8);
  if ((v17 & 0xFE) == 0x10)
  {
    do
    {
      if (v17 == 17)
      {
        if (!*(void *)(v16 + 32)) {
          return 1;
        }
      }
      else if (!*(_DWORD *)(v16 + 12))
      {
        return 1;
      }
      unint64_t v18 = *((unsigned int *)a1 + 2);
      if (v18 >= *((unsigned int *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*a1 + 8 * v18) = v16;
      ++*((_DWORD *)a1 + 2);
      unint64_t v19 = *((unsigned int *)a2 + 2);
      if (v19 >= *((unsigned int *)a2 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*a2 + 4 * v19) = 0;
      ++*((_DWORD *)a2 + 2);
      int v20 = *(unsigned __int8 *)(v16 + 8);
      if (v20 == 16)
      {
        if (!*(_DWORD *)(v16 + 12)) {
          goto LABEL_35;
        }
        uint64_t v21 = *(uint64_t **)(v16 + 16);
      }
      else
      {
        if (v20 != 17 || !*(void *)(v16 + 32))
        {
LABEL_35:
          uint64_t v16 = 0;
          goto LABEL_28;
        }
        uint64_t v21 = (uint64_t *)(v16 + 24);
      }
      uint64_t v16 = *v21;
LABEL_28:
      LOBYTE(v17) = *(_DWORD *)(v16 + 8);
    }
    while ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x10);
  }
  return 1;
}

llvm::GetElementPtrInst *sub_1CC237080(llvm::GetElementPtrInst *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  do
  {
    unsigned int v10 = this;
    if (!this) {
      break;
    }
    int v11 = *((unsigned __int8 *)this + 16);
    if (v11 < 0x1C) {
      break;
    }
    int v12 = *((_DWORD *)this + 5);
    if ((v12 & 0x7FFFFFF) == 0) {
      break;
    }
    if ((v12 & 0x40000000) != 0) {
      uint64_t v13 = (llvm::GetElementPtrInst **)*((void *)this - 1);
    }
    else {
      uint64_t v13 = (llvm::GetElementPtrInst **)((char *)this - 32 * (v12 & 0x7FFFFFF));
    }
    this = *v13;
    if (v11 <= 74)
    {
      if (v11 == 62)
      {
        if ((llvm::GetElementPtrInst::hasAllZeroIndices(v10) & 1) == 0) {
          return v10;
        }
        continue;
      }
      if (v11 == 66)
      {
        if ((*(uint64_t (**)(uint64_t, void, void))(*(void *)a4 + 1152))(a4, *(void *)this, *(void *)v10))
        {
          unint64_t v14 = *a3;
          unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v10);
          if (PrimitiveSizeInBits >= v14) {
            int v16 = v14;
          }
          else {
            int v16 = PrimitiveSizeInBits;
          }
          *a3 = v16;
          continue;
        }
        int v11 = *((unsigned __int8 *)v10 + 16);
      }
    }
    else
    {
      switch(v11)
      {
        case 'K':
          if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 0x12
            || *(_DWORD *)(*(void *)(a5 + 232) + 4) != *(_DWORD *)(*(void *)v10 + 8) >> 8)
          {
            return v10;
          }
          continue;
        case 'L':
          if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 0x12
            || *(_DWORD *)(*(void *)(a5 + 232) + 4) != *(_DWORD *)(*(void *)this + 8) >> 8)
          {
            return v10;
          }
          continue;
        case 'M':
          goto LABEL_11;
      }
    }
    if (v11 <= 83)
    {
      if (v11 != 33 && v11 != 39) {
        return v10;
      }
LABEL_42:
      uint64_t v23 = *((void *)v10 + 8);
      if (v23 && (*(unsigned char *)(v23 + 29) & 0x40) != 0)
      {
        uint64_t v31 = *(unsigned int *)(v23 + 8);
        if (v31)
        {
          uint64_t v32 = v23 + 40;
          int v28 = -1;
          while (!*(void *)v32 || (*(unsigned char *)(*(void *)v32 + 17) & 0x40) == 0)
          {
            ++v28;
            v32 += 8;
            if (!--v31) {
              goto LABEL_62;
            }
          }
LABEL_63:
          this = (llvm::GetElementPtrInst *)*((void *)v10
                                            + 4 * (v28 - 1)
                                            + -4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
          if (!this) {
            return v10;
          }
LABEL_11:
          if (!sub_1CC237378(*(unsigned __int8 **)this, *(unsigned __int8 **)v10, a4)) {
            return v10;
          }
          continue;
        }
      }
      else
      {
        uint64_t v24 = *((void *)v10 - 4);
        if (!v24) {
          return v10;
        }
        if (*(unsigned char *)(v24 + 16)) {
          return v10;
        }
        if (*(void *)(v24 + 24) != *((void *)v10 + 9)) {
          return v10;
        }
        uint64_t v25 = *(void *)(v24 + 112);
        if (!v25 || (*(unsigned char *)(v25 + 29) & 0x40) == 0) {
          return v10;
        }
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        if (v26)
        {
          uint64_t v27 = v25 + 40;
          int v28 = -1;
          while (!*(void *)v27 || (*(unsigned char *)(*(void *)v27 + 17) & 0x40) == 0)
          {
            ++v28;
            v27 += 8;
            if (!--v26) {
              goto LABEL_62;
            }
          }
          goto LABEL_63;
        }
      }
LABEL_62:
      int v28 = 0;
      goto LABEL_63;
    }
    switch(v11)
    {
      case 'T':
        goto LABEL_42;
      case ']':
        uint64_t v17 = *((unsigned int *)v10 + 18);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
        if (v18 >= v17)
        {
          if (v17)
          {
            unint64_t v19 = (_DWORD *)*((void *)v10 + 8);
            uint64_t v20 = 4 * v17;
            uint64_t v21 = (int *)(*(void *)a2 + 4 * v18 - 4);
            while (1)
            {
              int v22 = *v21--;
              if (*v19 != v22) {
                break;
              }
              ++v19;
              v20 -= 4;
              if (!v20)
              {
                *(_DWORD *)(a2 + 8) = v18 - v17;
                goto LABEL_39;
              }
            }
          }
          else
          {
LABEL_39:
            this = (llvm::GetElementPtrInst *)*((void *)v10 - 4);
          }
        }
        break;
      case '\\':
        uint64_t v29 = *((void *)v10 + 8);
        uint64_t v30 = v29 + 4 * *((unsigned int *)v10 + 18);
        sub_1CD5091DC(a2, v30, v30, v29, v29);
        break;
      default:
        return v10;
    }
  }
  while (this);
  return v10;
}

BOOL sub_1CC237378(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1;
  }
  int v5 = a1[8];
  if (v5 == 15 && a2[8] == 15) {
    return 1;
  }
  if ((v5 & 0xFE) == 0x12 && (*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    unsigned __int8 EVT = llvm::EVT::getEVT((llvm::EVT *)a1, 0, a3);
    if (EVT)
    {
      if (*(void *)(a3 + 8 * EVT + 96))
      {
        unsigned __int8 v9 = llvm::EVT::getEVT((llvm::EVT *)a2, 0, v8);
        if (v9) {
          return *(void *)(a3 + 8 * v9 + 96) != 0;
        }
      }
    }
  }
  return 0;
}

void sub_1CC237434()
{
}

void llvm::createAtomicExpandPass(llvm *this)
{
}

uint64_t sub_1CC23750C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC8EA0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2609588;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC8EA8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC237434;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC8EA8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2375C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = "atomicrmw.end";
  __int16 v4 = 259;
  llvm::BasicBlock::splitBasicBlock(v2, v1, (uint64_t)&v3, 0);
}

void sub_1CC237C78()
{
}

void sub_1CC237CB8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC237CF0(char *a1, uint64_t a2)
{
  v319[1] = *MEMORY[0x1E4F143B8];
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)a1 + 1) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass
    || (v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) == 0|| (v6 = *(void *)(v5 + 112), uint64_t v7 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2), !(*(unsigned int (**)(void))(v7 + 280))()))
  {
LABEL_10:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
  *((void *)a1 + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  v299 = &v301;
  uint64_t v300 = 0x100000000;
  uint64_t v9 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v9) {
      goto LABEL_10;
    }
    uint64_t v11 = i - 24;
    if (!i) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    if (v12 != v11 + 40) {
      break;
    }
  }
  unsigned int v15 = 0;
  while (1)
  {
    uint64_t v16 = v12 ? v12 - 24 : 0;
    int v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 60 || v17 == 61)
    {
      if ((*(_WORD *)(v16 + 18) & 0x380) == 0) {
        goto LABEL_20;
      }
    }
    else if ((v17 - 64) >= 2)
    {
      goto LABEL_20;
    }
    if (v15 >= HIDWORD(v300)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v299 + v15) = v16;
    unsigned int v15 = v300 + 1;
    LODWORD(v300) = v300 + 1;
LABEL_20:
    uint64_t v12 = *(void *)(v12 + 8);
    uint64_t v18 = i - 24;
    if (!i) {
      uint64_t v18 = 0;
    }
    if (v12 == v18 + 40) {
      break;
    }
LABEL_27:
    if (i == v9) {
      goto LABEL_33;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v9) {
      break;
    }
    uint64_t v19 = i - 24;
    if (!i) {
      uint64_t v19 = 0;
    }
    uint64_t v12 = *(void *)(v19 + 48);
    if (v12 != v19 + 40) {
      goto LABEL_27;
    }
  }
LABEL_33:
  uint64_t v20 = (llvm::UndefValue ***)v299;
  if (!v15)
  {
    LOBYTE(v13) = 0;
    goto LABEL_563;
  }
  int v13 = 0;
  v290 = (llvm::UndefValue ***)((char *)v299 + 8 * v15);
  while (2)
  {
    uint64_t v21 = (llvm::Instruction *)*v20;
    int v22 = *((unsigned __int8 *)*v20 + 16);
    if (v22 == 60) {
      uint64_t v23 = *v20;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v22 == 61) {
      uint64_t v24 = *v20;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v22 == 65) {
      uint64_t v25 = *v20;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v22 == 64) {
      uint64_t v26 = *v20;
    }
    else {
      uint64_t v26 = 0;
    }
    if (!v23)
    {
      if (!v24)
      {
        if (v25)
        {
          uint64_t v33 = *((void *)a1 + 4);
          unsigned int v34 = sub_1CC23E988(*(void *)*(v25 - 4), *(void *)(*((void *)v25[5] + 7) + 40));
          __int16 v35 = *((_WORD *)v25 + 9);
          if (1 << SHIBYTE(v35) < (unint64_t)v34 || v34 > *(_DWORD *)(v33 + 76) >> 3)
          {
            BOOL v36 = (unsigned int *)&unk_1CFAC6C5C;
            switch(v35 >> 4)
            {
              case 1:
                BOOL v36 = (unsigned int *)&unk_1CFAC6C74;
                goto LABEL_193;
              case 2:
                BOOL v36 = (unsigned int *)&unk_1CFAC6C8C;
                goto LABEL_193;
              case 3:
                BOOL v36 = (unsigned int *)&unk_1CFAC6CA4;
                goto LABEL_193;
              case 4:
                BOOL v36 = (unsigned int *)&unk_1CFAC6CEC;
                goto LABEL_193;
              case 5:
                BOOL v36 = (unsigned int *)&unk_1CFAC6CBC;
                goto LABEL_193;
              case 6:
                BOOL v36 = (unsigned int *)&unk_1CFAC6CD4;
                goto LABEL_193;
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
                sub_1CC23E988(*(void *)*(v25 - 4), *(void *)(*((void *)v25[5] + 7) + 40));
                goto LABEL_214;
              default:
LABEL_193:
                unsigned int v114 = sub_1CC23E988(*(void *)*(v25 - 4), *(void *)(*((void *)v25[5] + 7) + 40));
                if ((sub_1CC23F398((uint64_t)a1, v25, v114, HIBYTE(*((_WORD *)v25 + 9)) & 0x3F, (unsigned __int8 *)*(v25 - 8), *(v25 - 4), 0, (*((unsigned __int16 *)v25 + 9) >> 1) & 7, 0, v36) & 1) == 0)
                {
LABEL_214:
                  v304 = a1;
                  llvm::expandAtomicRMWToCmpXchg((uint64_t **)v25);
                }
                return result;
            }
            goto LABEL_194;
          }
        }
        else if (v26)
        {
          uint64_t v37 = *((void *)a1 + 4);
          unsigned int v38 = sub_1CC23E988(*(void *)*(v26 - 8), *(void *)(*((void *)v26[5] + 7) + 40));
          if (1 << *((unsigned char *)v26 + 19) < (unint64_t)v38 || v38 > *(_DWORD *)(v37 + 76) >> 3)
          {
            sub_1CC23E3E8((uint64_t)a1, (uint64_t)v26);
            goto LABEL_194;
          }
        }
        goto LABEL_66;
      }
      uint64_t v30 = *((void *)a1 + 4);
      unsigned int v31 = sub_1CC23E988(*(void *)*(v24 - 8), *(void *)(*((void *)v24[5] + 7) + 40));
      if (1 << ((unint64_t)*((unsigned __int16 *)v24 + 9) >> 1) >= (unint64_t)v31
        && v31 <= *(_DWORD *)(v30 + 76) >> 3)
      {
        goto LABEL_66;
      }
      unsigned int v32 = sub_1CC23E988(*(void *)*(v24 - 8), *(void *)(*((void *)v24[5] + 7) + 40));
      if ((sub_1CC23F398((uint64_t)a1, v24, v32, ((unint64_t)*((unsigned __int16 *)v24 + 9) >> 1) & 0x3F, (unsigned __int8 *)*(v24 - 4), *(v24 - 8), 0, (*((unsigned __int16 *)v24 + 9) >> 7) & 7, 0, dword_1CFAC6C44) & 1) == 0)
      {
        v288 = "expandAtomicOpToLibcall shouldn't fail for Store";
LABEL_565:
        llvm::report_fatal_error((llvm *)v288, (const llvm::Twine *)1);
      }
LABEL_194:
      int v13 = 1;
      goto LABEL_195;
    }
    uint64_t v27 = *((void *)a1 + 4);
    unsigned int v28 = sub_1CC23E988((uint64_t)*v23, *(void *)(*((void *)v23[5] + 7) + 40));
    if (1 << ((unint64_t)*((unsigned __int16 *)v23 + 9) >> 1) < (unint64_t)v28
      || v28 > *(_DWORD *)(v27 + 76) >> 3)
    {
      unsigned int v29 = sub_1CC23E988((uint64_t)*v23, *(void *)(*((void *)v23[5] + 7) + 40));
      if ((sub_1CC23F398((uint64_t)a1, v23, v29, ((unint64_t)*((unsigned __int16 *)v23 + 9) >> 1) & 0x3F, (unsigned __int8 *)*(v23 - 4), 0, 0, (*((unsigned __int16 *)v23 + 9) >> 7) & 7, 0, dword_1CFAC6C0C) & 1) == 0)
      {
        v288 = "expandAtomicOpToLibcall shouldn't fail for Load";
        goto LABEL_565;
      }
      goto LABEL_194;
    }
LABEL_66:
    if ((*(unsigned int (**)(void, llvm::Instruction *))(**((void **)a1 + 4) + 856))(*((void *)a1 + 4), v21))
    {
      if (v23)
      {
        unint64_t v39 = *((unsigned __int16 *)v23 + 9);
        uint64_t v40 = (v39 >> 7) & 7;
        if ((0xD0uLL >> v40))
        {
          *((_WORD *)v23 + 9) = v39 & 0xFC7F | 0x100;
          goto LABEL_85;
        }
      }
      if (v24)
      {
        unint64_t v41 = *((unsigned __int16 *)v24 + 9);
        uint64_t v40 = (v41 >> 7) & 7;
        if ((unint64_t)(v40 - 5) <= 2)
        {
          *((_WORD *)v24 + 9) = v41 & 0xFC7F | 0x100;
          goto LABEL_85;
        }
      }
      if (v25)
      {
        unint64_t v42 = *((unsigned __int16 *)v25 + 9);
        uint64_t v40 = (v42 >> 1) & 7;
        if (unint64_t)(v40 - 5) < 3 || ((0xD0uLL >> v40))
        {
          *((_WORD *)v25 + 9) = v42 & 0xFFF1 | 4;
          goto LABEL_85;
        }
      }
      if (v26)
      {
        if (!(*(unsigned int (**)(void, llvm::UndefValue **))(**((void **)a1 + 4) + 960))(*((void *)a1 + 4), v26))
        {
          unint64_t v43 = *((unsigned __int16 *)v26 + 9);
          uint64_t v44 = (v43 >> 2) & 7;
          if ((unint64_t)(v44 - 5) < 3
            || ((0xD0uLL >> v44) & 1) != 0
            || ((0xD0uLL >> (v43 >> 5)) & 1) != 0)
          {
            uint64_t v40 = v43 >> 5;
            if (v40 == 4)
            {
              if (v44 == 2)
              {
                uint64_t v40 = 4;
              }
              else
              {
                if (v44 != 5) {
                  goto LABEL_239;
                }
                uint64_t v40 = 6;
              }
            }
            else if (v40 != 7)
            {
LABEL_239:
              uint64_t v40 = (v43 >> 2) & 7;
            }
            *((_WORD *)v26 + 9) = v43 & 0xFF03 | 0x48;
LABEL_85:
            if (v40 != 2)
            {
              unsigned int v45 = 0;
              uint64_t v46 = **(void **)v21;
              v304 = (char *)v306;
              uint64_t v305 = 0x200000000;
              uint64_t v309 = v46;
              v310 = &v318;
              v311 = v319;
              uint64_t v312 = 0;
              int v313 = 0;
              __int16 v314 = 512;
              char v315 = 7;
              v307 = 0;
              v308 = 0;
              uint64_t v316 = 0;
              uint64_t v317 = 0;
              v318 = &unk_1F2616E88;
              v319[0] = &unk_1F2617008;
              v307 = (llvm::UndefValue *)*((void *)v21 + 5);
              v308 = (llvm::UndefValue **)((char *)v21 + 24);
              uint64_t v47 = (char *)*((void *)v21 + 6);
              v297 = v47;
              if (v47)
              {
                llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v47, 2);
                unsigned int v45 = v297;
              }
              sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v45);
              if (v297)
              {
                int v124 = *v297;
                if ((v124 - 4) > 0x1E)
                {
                  if ((v124 - 3) >= 0xFFFFFFFE) {
                    int v162 = v297;
                  }
                  else {
                    int v162 = 0;
                  }
                  if ((v124 - 3) < 0xFFFFFFFE)
                  {
                    if (v124 == 3) {
                      *((void *)v297 + 1) = 0;
                    }
                    goto LABEL_89;
                  }
                  unint64_t v126 = (unint64_t)(v162 + 8);
                }
                else
                {
                  if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
                    goto LABEL_89;
                  }
                  uint64_t v125 = *((void *)v297 + 2);
                  if ((v125 & 4) == 0) {
                    goto LABEL_89;
                  }
                  unint64_t v126 = v125 & 0xFFFFFFFFFFFFFFF8;
                  if (!v126) {
                    goto LABEL_89;
                  }
                }
                v291[0] = (const char *)&v297;
                sub_1CC5FA668(v126 + 16, v291);
              }
LABEL_89:
              uint64_t v48 = (*(uint64_t (**)(void, char **, llvm::Instruction *, uint64_t))(**((void **)a1 + 4)
                                                                                             + 904))(*((void *)a1 + 4), &v304, v21, v40);
              unint64_t v49 = (llvm::Instruction *)(*(uint64_t (**)(void))(**((void **)a1 + 4) + 912))();
              uint64_t v50 = v49;
              if (v49) {
                llvm::Instruction::moveAfter(v49, v21);
              }
              BOOL v51 = (v48 | (unint64_t)v50) != 0;
              if (v304 != (char *)v306) {
                free(v304);
              }
              v13 |= v51;
            }
          }
        }
      }
    }
    if (!v23)
    {
      if (v24)
      {
        if (*(unsigned __int8 *)(*(void *)*(v24 - 8) + 8) <= 6u)
        {
          unint64_t v59 = 0;
          uint64_t v60 = *(void *)*v24;
          v304 = (char *)v306;
          uint64_t v305 = 0x200000000;
          uint64_t v309 = v60;
          v310 = &v318;
          v311 = v319;
          uint64_t v312 = 0;
          int v313 = 0;
          __int16 v314 = 512;
          char v315 = 7;
          v307 = 0;
          v308 = 0;
          uint64_t v316 = 0;
          uint64_t v317 = 0;
          v318 = &unk_1F2616E88;
          v319[0] = &unk_1F2617008;
          v307 = v24[5];
          v308 = v24 + 3;
          uint64_t v61 = (char *)v24[6];
          v297 = v61;
          if (v61)
          {
            llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v61, 2);
            unint64_t v59 = v297;
          }
          sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v59);
          if (!v297)
          {
LABEL_110:
            unint64_t v62 = (llvm::PointerType *)sub_1CC2417AC(*((void *)a1 + 4), *(llvm::EVT **)*(v24 - 8), *(void *)(*((void *)v24[5] + 7) + 40) + 272);
            uint64_t v63 = *(v24 - 8);
            __int16 v298 = 257;
            if (*(llvm::PointerType **)v63 != v62)
            {
              if (*((unsigned __int8 *)v63 + 16) <= 0x14u)
              {
                uint64_t v63 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, llvm::PointerType *))*v310
                                      + 28))(v310, 49, v63, v62);
                if (v63) {
                  BOOL v90 = *((unsigned __int8 *)v63 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v90 = 0;
                }
                if (v90)
                {
                  (*(void (**)(void *, llvm::Value *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v63, &v297, v307, v308);
                  if (v305)
                  {
                    v264 = (llvm::MDNode **)v304;
                    unint64_t v265 = &v304[16 * v305];
                    do
                    {
                      llvm::Instruction::setMetadata(v63, *(_DWORD *)v264, v264[1]);
                      v264 += 2;
                    }
                    while (v264 != (llvm::MDNode **)v265);
                  }
                }
              }
              else
              {
                LOWORD(v294) = 257;
                uint64_t v63 = llvm::CastInst::Create(49, (uint64_t)v63, (uint64_t)v62, v291, 0);
                (*(void (**)(void *, llvm::Value *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v63, &v297, v307, v308);
                if (v305)
                {
                  size_t v64 = (llvm::MDNode **)v304;
                  uint64_t v65 = &v304[16 * v305];
                  do
                  {
                    llvm::Instruction::setMetadata(v63, *(_DWORD *)v64, v64[1]);
                    v64 += 2;
                  }
                  while (v64 != (llvm::MDNode **)v65);
                }
              }
            }
            int v91 = (unsigned __int8 *)*(v24 - 4);
            unsigned int v92 = *(_DWORD *)(*(void *)v91 + 8);
            if ((v92 & 0xFE) == 0x12) {
              unsigned int v92 = *(_DWORD *)(**(void **)(*(void *)v91 + 16) + 8);
            }
            unint64_t v93 = llvm::PointerType::get(v62, (llvm::Type *)(v92 >> 8));
            __int16 v298 = 257;
            if (*(void *)v91 != v93)
            {
              if (v91[16] <= 0x14u)
              {
                int v91 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v310
                                          + 28))(v310, 49, v91, v93);
                if (v91) {
                  BOOL v96 = v91[16] >= 0x1Cu;
                }
                else {
                  BOOL v96 = 0;
                }
                if (v96)
                {
                  (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v91, &v297, v307, v308);
                  if (v305)
                  {
                    unsigned int v266 = (llvm::MDNode **)v304;
                    uint64_t v267 = &v304[16 * v305];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v91, *(_DWORD *)v266, v266[1]);
                      v266 += 2;
                    }
                    while (v266 != (llvm::MDNode **)v267);
                  }
                }
              }
              else
              {
                LOWORD(v294) = 257;
                int v91 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v91, v93, v291, 0);
                (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v91, &v297, v307, v308);
                if (v305)
                {
                  long long v94 = (llvm::MDNode **)v304;
                  unint64_t v95 = &v304[16 * v305];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v91, *(_DWORD *)v94, v94[1]);
                    v94 += 2;
                  }
                  while (v94 != (llvm::MDNode **)v95);
                }
              }
            }
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)v307 + 7) + 40) + 272), *(llvm::Type **)v63, 1);
            BOOL v98 = (char *)operator new(0x80uLL);
            unint64_t v99 = v98;
            *((_DWORD *)v98 + 21) = *((_DWORD *)v98 + 21) & 0x38000000 | 2;
            *(void *)BOOL v98 = 0;
            *((void *)v98 + 2) = 0;
            *((void *)v98 + 1) = 0;
            *((void *)v98 + 5) = 0;
            *((void *)v98 + 6) = 0;
            *((void *)v98 + 4) = 0;
            uint64_t v100 = (unsigned __int8 **)(v98 + 32);
            *((void *)v98 + 8) = ***(void ***)v63 + 1576;
            uint64_t v101 = (llvm::Instruction *)(v98 + 64);
            *((void *)v98 + 3) = v98 + 64;
            *((void *)v98 + 7) = v98 + 64;
            *((void *)v98 + 9) = 0;
            v98[80] = 61;
            v98[81] = 0;
            *((_WORD *)v98 + 41) = 0;
            *((_DWORD *)v98 + 21) = 2;
            *(_OWORD *)(v98 + 88) = 0u;
            *(_OWORD *)(v98 + 104) = 0u;
            *((_DWORD *)v98 + 30) = 0;
            *(void *)BOOL v98 = v63;
            uint64_t v104 = *((void *)v63 + 1);
            unint64_t v103 = (void *)((char *)v63 + 8);
            uint64_t v102 = v104;
            *((void *)v98 + 1) = v104;
            if (v104) {
              *(void *)(v102 + 16) = v98 + 8;
            }
            *((void *)v98 + 2) = v103;
            void *v103 = v98;
            if (*((void *)v98 + 4))
            {
              **((void **)v98 + 6) = *((void *)v98 + 5);
              uint64_t v259 = *((void *)v98 + 5);
              if (v259) {
                *(void *)(v259 + 16) = *((void *)v98 + 6);
              }
            }
            *uint64_t v100 = v91;
            if (v91)
            {
              uint64_t v107 = *((void *)v91 + 1);
              unsigned int v106 = (unsigned __int8 ***)(v91 + 8);
              uint64_t v105 = v107;
              *((void *)v98 + 5) = v107;
              if (v107) {
                *(void *)(v105 + 16) = v98 + 40;
              }
              *((void *)v98 + 6) = v106;
              *unsigned int v106 = v100;
            }
            *((_WORD *)v98 + 41) = 2 * (Alignment & 0x3F);
            v98[124] = 1;
            LOWORD(v294) = 257;
            (*(void (**)(void *, llvm::Instruction *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v101, v291, v307, v308);
            if (v305)
            {
              unsigned int v169 = (llvm::MDNode **)v304;
              unsigned int v170 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata(v101, *(_DWORD *)v169, v169[1]);
                v169 += 2;
              }
              while (v169 != (llvm::MDNode **)v170);
            }
            __int16 v108 = *((_WORD *)v99 + 41) & 0xFF81 | (2
                                                  * __clz(1 << ((unint64_t)*((unsigned __int16 *)v24 + 9) >> 1))) ^ 0x7E;
            *((_WORD *)v99 + 41) = v108;
            __int16 v109 = v108 & 0xFFFE | *((_WORD *)v24 + 9) & 1;
            *((_WORD *)v99 + 41) = v109;
            char v110 = *((unsigned char *)v24 + 60);
            *((_WORD *)v99 + 41) = v109 & 0xFC7F | *((_WORD *)v24 + 9) & 0x380;
            v99[124] = v110;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          int v140 = *v297;
          if ((v140 - 4) > 0x1E)
          {
            if ((v140 - 3) >= 0xFFFFFFFE) {
              unsigned __int16 v180 = v297;
            }
            else {
              unsigned __int16 v180 = 0;
            }
            if ((v140 - 3) < 0xFFFFFFFE)
            {
              if (v140 == 3) {
                *((void *)v297 + 1) = 0;
              }
              goto LABEL_110;
            }
            unint64_t v142 = (unint64_t)(v180 + 8);
          }
          else
          {
            if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
              goto LABEL_110;
            }
            uint64_t v141 = *((void *)v297 + 2);
            if ((v141 & 4) == 0) {
              goto LABEL_110;
            }
            unint64_t v142 = v141 & 0xFFFFFFFFFFFFFFF8;
            if (!v142) {
              goto LABEL_110;
            }
          }
          v291[0] = (const char *)&v297;
          sub_1CC5FA668(v142 + 16, v291);
          goto LABEL_110;
        }
        int v111 = (*(uint64_t (**)(void, llvm::Instruction *))(**((void **)a1 + 4) + 952))(*((void *)a1 + 4), v21);
        if (!v111) {
          goto LABEL_195;
        }
        if (v111 == 7)
        {
          *((_WORD *)v21 + 9) &= 0xFC7Fu;
          int v13 = 1;
          *((unsigned char *)v21 + 60) = 1;
          goto LABEL_195;
        }
        char v137 = 0;
        uint64_t v138 = **(void **)v21;
        v304 = (char *)v306;
        uint64_t v305 = 0x200000000;
        uint64_t v309 = v138;
        v310 = &v318;
        v311 = v319;
        uint64_t v312 = 0;
        int v313 = 0;
        __int16 v314 = 512;
        char v315 = 7;
        v307 = 0;
        v308 = 0;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        v318 = &unk_1F2616E88;
        v319[0] = &unk_1F2617008;
        v307 = (llvm::UndefValue *)*((void *)v21 + 5);
        v308 = (llvm::UndefValue **)((char *)v21 + 24);
        int v139 = (char *)*((void *)v21 + 6);
        v297 = v139;
        if (v139)
        {
          llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v139, 2);
          char v137 = v297;
        }
        sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v137);
        if (!v297)
        {
LABEL_243:
          sub_1CD5097F8((uint64_t *)&v304, 0, *((void *)v21 - 4), *((uint64_t **)v21 - 8), (*((_WORD *)v21 + 9) >> 1) & 0x3F | 0x100, (*((_WORD *)v21 + 9) >> 7) & 7, 1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v234 = *v297;
        if ((v234 - 4) > 0x1E)
        {
          if ((v234 - 3) >= 0xFFFFFFFE) {
            unsigned int v243 = v297;
          }
          else {
            unsigned int v243 = 0;
          }
          if ((v234 - 3) < 0xFFFFFFFE)
          {
            if (v234 == 3) {
              *((void *)v297 + 1) = 0;
            }
            goto LABEL_243;
          }
          unint64_t v236 = (unint64_t)(v243 + 8);
        }
        else
        {
          if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
            goto LABEL_243;
          }
          uint64_t v235 = *((void *)v297 + 2);
          if ((v235 & 4) == 0) {
            goto LABEL_243;
          }
          unint64_t v236 = v235 & 0xFFFFFFFFFFFFFFF8;
          if (!v236) {
            goto LABEL_243;
          }
        }
        v291[0] = (const char *)&v297;
        sub_1CC5FA668(v236 + 16, v291);
        goto LABEL_243;
      }
      if (v25)
      {
        uint64_t v66 = (uint64_t)*(v25 - 4);
        if (v66) {
          BOOL v67 = *(unsigned char *)(v66 + 16) == 16;
        }
        else {
          BOOL v67 = 0;
        }
        if (!v67) {
          goto LABEL_121;
        }
        unsigned int v112 = *((_WORD *)v25 + 9) >> 4;
        if (v112 > 6) {
          goto LABEL_121;
        }
        if (((1 << v112) & 0x66) != 0)
        {
          uint64_t v113 = *(unsigned int *)(v66 + 32);
          if (v113 <= 0x40)
          {
            if (!*(void *)(v66 + 24)) {
              goto LABEL_300;
            }
LABEL_121:
            __int16 v68 = *((_WORD *)v25 + 9);
            unsigned int v69 = v68 >> 4;
            if (!(v68 >> 4) && *(unsigned __int8 *)(*(void *)*(v25 - 4) + 8) <= 6u)
            {
              long long v181 = (llvm::PointerType *)sub_1CC2417AC(*((void *)a1 + 4), *v25, *(void *)(*((void *)v25[5] + 7) + 40) + 272);
              long long v182 = 0;
              uint64_t v183 = *(void *)*v25;
              v304 = (char *)v306;
              uint64_t v305 = 0x200000000;
              uint64_t v309 = v183;
              v310 = &v318;
              v311 = v319;
              uint64_t v312 = 0;
              int v313 = 0;
              __int16 v314 = 512;
              char v315 = 7;
              v307 = 0;
              v308 = 0;
              uint64_t v316 = 0;
              uint64_t v317 = 0;
              v318 = &unk_1F2616E88;
              v319[0] = &unk_1F2617008;
              v307 = v25[5];
              v308 = v25 + 3;
              uint64_t v184 = (char *)v25[6];
              v297 = v184;
              if (v184)
              {
                llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v184, 2);
                long long v182 = v297;
              }
              sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v182);
              if (!v297)
              {
LABEL_325:
                uint64_t v185 = (unsigned __int8 *)*(v25 - 8);
                unsigned int v186 = (unsigned __int8 *)*(v25 - 4);
                unsigned int v187 = *(_DWORD *)(*(void *)v185 + 8);
                if ((v187 & 0xFE) == 0x12) {
                  unsigned int v187 = *(_DWORD *)(**(void **)(*(void *)v185 + 16) + 8);
                }
                unint64_t v188 = llvm::PointerType::get(v181, (llvm::Type *)(v187 >> 8));
                __int16 v298 = 257;
                if (*(void *)v185 != v188)
                {
                  if (v185[16] <= 0x14u)
                  {
                    uint64_t v218 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v310 + 28))(v310, 49, v185, v188);
                    uint64_t v185 = (unsigned __int8 *)v218;
                    if (v218)
                    {
                      if (*(unsigned __int8 *)(v218 + 16) >= 0x1Cu)
                      {
                        (*(void (**)(void *, uint64_t, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v218, &v297, v307, v308);
                        if (v305)
                        {
                          v286 = (llvm::MDNode **)v304;
                          long long v287 = &v304[16 * v305];
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v185, *(_DWORD *)v286, v286[1]);
                            v286 += 2;
                          }
                          while (v286 != (llvm::MDNode **)v287);
                        }
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v294) = 257;
                    uint64_t v185 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v185, v188, v291, 0);
                    (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v185, &v297, v307, v308);
                    if (v305)
                    {
                      uint64_t v255 = (llvm::MDNode **)v304;
                      int v256 = &v304[16 * v305];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v185, *(_DWORD *)v255, v255[1]);
                        v255 += 2;
                      }
                      while (v255 != (llvm::MDNode **)v256);
                    }
                  }
                }
                __int16 v298 = 257;
                if (*(llvm::PointerType **)v186 != v181)
                {
                  if (v186[16] <= 0x14u)
                  {
                    unsigned int v186 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::PointerType *))*v310
                                               + 28))(v310, 49, v186, v181);
                    if (v186) {
                      BOOL v221 = v186[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v221 = 0;
                    }
                    if (v221)
                    {
                      (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v186, &v297, v307, v308);
                      if (v305)
                      {
                        v282 = (llvm::MDNode **)v304;
                        v283 = &v304[16 * v305];
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v186, *(_DWORD *)v282, v282[1]);
                          v282 += 2;
                        }
                        while (v282 != (llvm::MDNode **)v283);
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v294) = 257;
                    unsigned int v186 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v186, (uint64_t)v181, v291, 0);
                    (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v186, &v297, v307, v308);
                    if (v305)
                    {
                      uint64_t v219 = (llvm::MDNode **)v304;
                      unsigned int v220 = &v304[16 * v305];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v186, *(_DWORD *)v219, v219[1]);
                        v219 += 2;
                      }
                      while (v219 != (llvm::MDNode **)v220);
                    }
                  }
                }
                uint64_t v222 = sub_1CD5097F8((uint64_t *)&v304, 0, (uint64_t)v185, (uint64_t *)v186, HIBYTE(*((_WORD *)v25 + 9)) & 0x3F | 0x100u, (*((_WORD *)v25 + 9) >> 1) & 7, 1);
                *((_WORD *)v222 + 9) = *((_WORD *)v222 + 9) & 0xFFFE | *((_WORD *)v25 + 9) & 1;
                uint64_t v223 = (uint64_t *)*v25;
                __int16 v298 = 257;
                v224 = (unsigned __int8 *)v222;
                if (*(uint64_t **)v222 != v223)
                {
                  if (*((unsigned __int8 *)v222 + 16) <= 0x14u)
                  {
                    v224 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t *))*v310
                                               + 28))(v310, 49, v222, v223);
                    if (v224) {
                      BOOL v227 = v224[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v227 = 0;
                    }
                    if (v227)
                    {
                      (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v224, &v297, v307, v308);
                      if (v305)
                      {
                        unsigned int v284 = (llvm::MDNode **)v304;
                        int v285 = &v304[16 * v305];
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v224, *(_DWORD *)v284, v284[1]);
                          v284 += 2;
                        }
                        while (v284 != (llvm::MDNode **)v285);
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v294) = 257;
                    v224 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v222, (uint64_t)v223, v291, 0);
                    (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v224, &v297, v307, v308);
                    if (v305)
                    {
                      uint64_t v225 = (llvm::MDNode **)v304;
                      uint64_t v226 = &v304[16 * v305];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v224, *(_DWORD *)v225, v225[1]);
                        v225 += 2;
                      }
                      while (v225 != (llvm::MDNode **)v226);
                    }
                  }
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v25, (llvm::Value *)v224, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              int v247 = *v297;
              if ((v247 - 4) > 0x1E)
              {
                if ((v247 - 3) >= 0xFFFFFFFE) {
                  int v257 = v297;
                }
                else {
                  int v257 = 0;
                }
                if ((v247 - 3) < 0xFFFFFFFE)
                {
                  if (v247 == 3) {
                    *((void *)v297 + 1) = 0;
                  }
                  goto LABEL_325;
                }
                unint64_t v249 = (unint64_t)(v257 + 8);
              }
              else
              {
                if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
                  goto LABEL_325;
                }
                uint64_t v248 = *((void *)v297 + 2);
                if ((v248 & 4) == 0) {
                  goto LABEL_325;
                }
                unint64_t v249 = v248 & 0xFFFFFFFFFFFFFFF8;
                if (!v249) {
                  goto LABEL_325;
                }
              }
              v291[0] = (const char *)&v297;
              sub_1CC5FA668(v249 + 16, v291);
              goto LABEL_325;
            }
            unsigned int v70 = *(_DWORD *)(*((void *)a1 + 4) + 80);
            BOOL v71 = sub_1CC23E988(**((void **)v21 - 4), *(void *)(*(void *)(*((void *)v21 + 5) + 56) + 40)) >= v70 >> 3|| v69 > 6;
            if (!v71 && ((1 << v69) & 0x68) != 0)
            {
              size_t v143 = 0;
              uint64_t v144 = **(void **)v21;
              v304 = (char *)v306;
              uint64_t v305 = 0x200000000;
              uint64_t v309 = v144;
              v310 = &v318;
              v311 = v319;
              uint64_t v312 = 0;
              int v313 = 0;
              __int16 v314 = 512;
              char v315 = 7;
              v307 = 0;
              v308 = 0;
              uint64_t v316 = 0;
              uint64_t v317 = 0;
              v318 = &unk_1F2616E88;
              v319[0] = &unk_1F2617008;
              v307 = (llvm::UndefValue *)*((void *)v21 + 5);
              v308 = (llvm::UndefValue **)((char *)v21 + 24);
              unsigned __int16 v145 = (char *)*((void *)v21 + 6);
              v297 = v145;
              if (v145)
              {
                llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v145, 2);
                size_t v143 = v297;
              }
              sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v143);
              if (!v297)
              {
LABEL_253:
                __int16 v146 = *((_WORD *)v21 + 9);
                sub_1CC241E2C((uint64_t)v291, (uint64_t)&v304, *(void *)(*(void *)(*((void *)v21 + 5) + 56) + 40), *(llvm::ConstantInt **)v21, *((unsigned __int8 **)v21 - 8), HIBYTE(v146) & 0x3F, *(_DWORD *)(*((void *)a1 + 4) + 80) >> 3);
                long long v147 = (unsigned __int8 *)*((void *)v21 - 4);
                __int16 v303 = 257;
                if (*(const char **)v147 != v291[0])
                {
                  if (v147[16] <= 0x14u)
                  {
                    uint64_t v163 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, const char *))*v310 + 28))(v310, 39, v147, v291[0]);
                    long long v147 = (unsigned __int8 *)v163;
                    if (v163)
                    {
                      if (*(unsigned __int8 *)(v163 + 16) >= 0x1Cu)
                      {
                        (*(void (**)(void *, uint64_t, void **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v163, &v302, v307, v308);
                        if (v305)
                        {
                          v272 = (llvm::MDNode **)v304;
                          uint64_t v273 = &v304[16 * v305];
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v147, *(_DWORD *)v272, v272[1]);
                            v272 += 2;
                          }
                          while (v272 != (llvm::MDNode **)v273);
                        }
                      }
                    }
                  }
                  else
                  {
                    __int16 v298 = 257;
                    long long v147 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v147, (uint64_t)v291[0], (const char **)&v297, 0);
                    (*(void (**)(void *, unsigned __int8 *, void **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v147, &v302, v307, v308);
                    if (v305)
                    {
                      long long v148 = (llvm::MDNode **)v304;
                      int v149 = &v304[16 * v305];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v147, *(_DWORD *)v148, v148[1]);
                        v148 += 2;
                      }
                      while (v148 != (llvm::MDNode **)v149);
                    }
                  }
                }
                int v164 = v146 >> 4;
                v297 = "ValOperand_Shifted";
                __int16 v298 = 259;
                uint64_t v165 = (uint64_t *)sub_1CC242524((uint64_t)&v304, (uint64_t)v147, v294, (uint64_t)&v297, 0, 0);
                if (v164 == 3)
                {
                  v297 = "AndOperand";
                  __int16 v298 = 259;
                  uint64_t v165 = (uint64_t *)sub_1CB844AF4((uint64_t)&v304, v296, (uint64_t)v165, (uint64_t)&v297);
                }
                int v166 = sub_1CD5097F8((uint64_t *)&v304, v164, v292, v165, v293 | 0x100u, (*((_WORD *)v21 + 9) >> 1) & 7, 1);
                int v167 = sub_1CC242614((uint64_t)&v304, (uint64_t)v166, v291);
                llvm::Value::doRAUW(v21, (llvm::Value *)v167, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              int v237 = *v297;
              if ((v237 - 4) > 0x1E)
              {
                if ((v237 - 3) >= 0xFFFFFFFE) {
                  unint64_t v250 = v297;
                }
                else {
                  unint64_t v250 = 0;
                }
                if ((v237 - 3) < 0xFFFFFFFE)
                {
                  if (v237 == 3) {
                    *((void *)v297 + 1) = 0;
                  }
                  goto LABEL_253;
                }
                unint64_t v239 = (unint64_t)(v250 + 8);
              }
              else
              {
                if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
                  goto LABEL_253;
                }
                uint64_t v238 = *((void *)v297 + 2);
                if ((v238 & 4) == 0) {
                  goto LABEL_253;
                }
                unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFF8;
                if (!v239) {
                  goto LABEL_253;
                }
              }
              v291[0] = (const char *)&v297;
              sub_1CC5FA668(v239 + 16, v291);
              goto LABEL_253;
            }
            int v73 = sub_1CC23E9E0((uint64_t)a1, v21);
            goto LABEL_149;
          }
          int v120 = 0;
          int64_t v121 = (unint64_t)(v113 + 63) >> 6;
          do
          {
            BOOL v71 = v121-- < 1;
            if (v71) {
              break;
            }
            unint64_t v122 = *(void *)(*(void *)(v66 + 24) + 8 * v121);
            v120 += __clz(v122);
          }
          while (!v122);
          int v123 = v113 | 0xFFFFFFC0;
          if ((v113 & 0x3F) == 0) {
            int v123 = 0;
          }
          if (v120 + v123 != v113) {
            goto LABEL_121;
          }
        }
        else
        {
          if (v112 != 3) {
            goto LABEL_121;
          }
          unsigned int v127 = *(_DWORD *)(v66 + 32);
          if (!v127) {
            goto LABEL_300;
          }
          int v128 = (llvm::APInt *)(v66 + 24);
          if (v127 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(v128) == v127) {
              goto LABEL_300;
            }
            goto LABEL_121;
          }
          if (*(void *)v128 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v127) {
            goto LABEL_121;
          }
        }
LABEL_300:
        int v168 = (uint64_t **)(*(uint64_t (**)(void, llvm::UndefValue **))(**((void **)a1 + 4) + 976))(*((void *)a1 + 4), v25);
        if (v168)
        {
          sub_1CC23E480((uint64_t)a1, v168);
          goto LABEL_194;
        }
        goto LABEL_121;
      }
      if (!v26) {
        goto LABEL_195;
      }
      uint64_t v86 = *(llvm::EVT **)*(v26 - 8);
      if (*((unsigned char *)v86 + 8) != 15)
      {
        unsigned int v87 = *(_DWORD *)(*((void *)a1 + 4) + 80);
        unsigned int v88 = sub_1CC23E988(**((void **)v21 - 8), *(void *)(*(void *)(*((void *)v21 + 5) + 56) + 40));
        switch((*(unsigned int (**)(void))(**((void **)a1 + 4) + 960))())
        {
          case 1u:
            uint64_t v129 = *((void *)v21 + 5);
            (*(void (**)(void, llvm::Instruction *))(**((void **)a1 + 4) + 856))(*((void *)a1 + 4), v21);
            v304 = "cmpxchg.end";
            v306[8] = 259;
            llvm::BasicBlock::splitBasicBlock(v129, (uint64_t)v21 + 24, (uint64_t)&v304, 0);
          case 2u:
          case 3u:
          case 5u:
          case 6u:
            __break(1u);
            JUMPOUT(0x1CC23E394);
          case 4u:
            BOOL v130 = 0;
            uint64_t v131 = **(void **)v21;
            v304 = (char *)v306;
            uint64_t v305 = 0x200000000;
            uint64_t v309 = v131;
            v310 = &v318;
            v311 = v319;
            uint64_t v312 = 0;
            int v313 = 0;
            __int16 v314 = 512;
            char v315 = 7;
            v307 = 0;
            v308 = 0;
            uint64_t v316 = 0;
            uint64_t v317 = 0;
            v318 = &unk_1F2616E88;
            v319[0] = &unk_1F2617008;
            v307 = (llvm::UndefValue *)*((void *)v21 + 5);
            v308 = (llvm::UndefValue **)((char *)v21 + 24);
            unint64_t v132 = (char *)*((void *)v21 + 6);
            v297 = v132;
            if (v132)
            {
              llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v132, 2);
              BOOL v130 = v297;
            }
            sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v130);
            if (!v297) {
              goto LABEL_230;
            }
            int v231 = *v297;
            if ((v231 - 4) > 0x1E)
            {
              if ((v231 - 3) >= 0xFFFFFFFE) {
                uint64_t v242 = v297;
              }
              else {
                uint64_t v242 = 0;
              }
              if ((v231 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v233 = (unint64_t)(v242 + 8);
LABEL_426:
                v291[0] = (const char *)&v297;
                sub_1CC5FA668(v233 + 16, v291);
                goto LABEL_230;
              }
              if (v231 == 3) {
                *((void *)v297 + 1) = 0;
              }
            }
            else if ((v297[1] & 0x7F) == 2 || *((_DWORD *)v297 + 3))
            {
              uint64_t v232 = *((void *)v297 + 2);
              if ((v232 & 4) != 0)
              {
                unint64_t v233 = v232 & 0xFFFFFFFFFFFFFFF8;
                if (v233) {
                  goto LABEL_426;
                }
              }
            }
LABEL_230:
            sub_1CC241E2C((uint64_t)v291, (uint64_t)&v304, *(void *)(*(void *)(*((void *)v21 + 5) + 56) + 40), **((llvm::ConstantInt ***)v21 - 8), *((unsigned __int8 **)v21 - 12), *((unsigned char *)v21 + 19) & 0x3F, *(_DWORD *)(*((void *)a1 + 4) + 80) >> 3);
            int v133 = (unsigned __int8 *)*((void *)v21 - 8);
            int v134 = v291[0];
            __int16 v303 = 257;
            if (*(const char **)v133 != v291[0])
            {
              if (v133[16] <= 0x14u)
              {
                uint64_t v153 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, const char *))*v310 + 28))(v310, 39, v133, v291[0]);
                int v133 = (unsigned __int8 *)v153;
                if (v153)
                {
                  if (*(unsigned __int8 *)(v153 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, void **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v153, &v302, v307, v308);
                    if (v305)
                    {
                      unsigned int v270 = (llvm::MDNode **)v304;
                      BOOL v271 = &v304[16 * v305];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v133, *(_DWORD *)v270, v270[1]);
                        v270 += 2;
                      }
                      while (v270 != (llvm::MDNode **)v271);
                    }
                  }
                }
              }
              else
              {
                __int16 v298 = 257;
                int v133 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v133, (uint64_t)v291[0], (const char **)&v297, 0);
                (*(void (**)(void *, unsigned __int8 *, void **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v133, &v302, v307, v308);
                if (v305)
                {
                  BOOL v135 = (llvm::MDNode **)v304;
                  size_t v136 = &v304[16 * v305];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v133, *(_DWORD *)v135, v135[1]);
                    v135 += 2;
                  }
                  while (v135 != (llvm::MDNode **)v136);
                }
              }
            }
            uint64_t v154 = v294;
            v297 = "CmpVal_Shifted";
            __int16 v298 = 259;
            unint64_t v155 = sub_1CC242524((uint64_t)&v304, (uint64_t)v133, v294, (uint64_t)&v297, 0, 0);
            unint64_t v156 = (unsigned __int8 *)*((void *)v21 - 4);
            __int16 v303 = 257;
            if (*(const char **)v156 != v134)
            {
              if (v156[16] <= 0x14u)
              {
                unint64_t v156 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, const char *))*v310
                                           + 28))(v310, 39, v156, v134);
                if (v156) {
                  BOOL v157 = v156[16] >= 0x1Cu;
                }
                else {
                  BOOL v157 = 0;
                }
                if (v157)
                {
                  (*(void (**)(void *, unsigned __int8 *, void **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v156, &v302, v307, v308);
                  if (v305)
                  {
                    uint64_t v268 = (llvm::MDNode **)v304;
                    v269 = &v304[16 * v305];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v156, *(_DWORD *)v268, v268[1]);
                      v268 += 2;
                    }
                    while (v268 != (llvm::MDNode **)v269);
                  }
                }
              }
              else
              {
                __int16 v298 = 257;
                unint64_t v156 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v156, (uint64_t)v134, (const char **)&v297, 0);
                (*(void (**)(void *, unsigned __int8 *, void **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v156, &v302, v307, v308);
                if (v305)
                {
                  unsigned int v240 = (llvm::MDNode **)v304;
                  BOOL v241 = &v304[16 * v305];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v156, *(_DWORD *)v240, v240[1]);
                    v240 += 2;
                  }
                  while (v240 != (llvm::MDNode **)v241);
                }
              }
            }
            v297 = "NewVal_Shifted";
            __int16 v298 = 259;
            uint64_t v158 = sub_1CC242524((uint64_t)&v304, (uint64_t)v156, v154, (uint64_t)&v297, 0, 0);
            uint64_t v159 = v295;
            unsigned int v160 = *((unsigned __int16 *)v21 + 9);
            uint64_t v161 = v160 >> 5;
            if (v161 == 4)
            {
              uint64_t v161 = (v160 >> 2) & 7;
              if (v161 == 2)
              {
                uint64_t v161 = 4;
              }
              else if (v161 == 5)
              {
                uint64_t v161 = 6;
              }
            }
            else if (v161 != 7)
            {
              uint64_t v161 = (v160 >> 2) & 7;
            }
            uint64_t v189 = (void *)(*(uint64_t (**)(void, char **, llvm::Instruction *, uint64_t, llvm::Instruction *, llvm::Instruction *, uint64_t, uint64_t))(**((void **)a1 + 4) + 896))(*((void *)a1 + 4), &v304, v21, v292, v155, v158, v295, v161);
            uint64_t v190 = sub_1CC242614((uint64_t)&v304, (uint64_t)v189, v291);
            unint64_t v192 = llvm::UndefValue::get(*(llvm::UndefValue **)v21, v191);
            LODWORD(v302) = 0;
            __int16 v298 = 257;
            uint64_t v193 = sub_1CC2411F8((uint64_t)&v304, (uint64_t)v192, (uint64_t)v190, &v302, 1, (uint64_t)&v297);
            __int16 v298 = 257;
            uint64_t v194 = sub_1CBF52474((uint64_t)&v304, v189, v159, (uint64_t)&v297);
            v302 = "Success";
            __int16 v303 = 259;
            uint64_t v195 = sub_1CB845F20((uint64_t)&v304, 32, v155, (uint64_t)v194, (uint64_t)&v302);
            LODWORD(v302) = 1;
            __int16 v298 = 257;
            v196 = sub_1CC2411F8((uint64_t)&v304, (uint64_t)v193, (uint64_t)v195, &v302, 1, (uint64_t)&v297);
            llvm::Value::doRAUW(v21, v196, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          case 7u:
            llvm::lowerAtomicCmpXchgInst((uint64_t **)v21, v89);
          default:
            if (v88 >= v87 >> 3)
            {
              int v73 = 0;
              goto LABEL_149;
            }
            v228 = 0;
            v289 = (llvm::LLVMContext *)*((void *)v21 + 5);
            uint64_t v229 = **(void **)v21;
            v304 = (char *)v306;
            uint64_t v305 = 0x200000000;
            uint64_t v309 = v229;
            v310 = &v318;
            v311 = v319;
            uint64_t v312 = 0;
            int v313 = 0;
            __int16 v314 = 512;
            char v315 = 7;
            v307 = 0;
            v308 = 0;
            uint64_t v316 = 0;
            uint64_t v317 = 0;
            v318 = &unk_1F2616E88;
            v319[0] = &unk_1F2617008;
            v307 = (llvm::UndefValue *)*((void *)v21 + 5);
            v308 = (llvm::UndefValue **)((char *)v21 + 24);
            uint64_t v230 = (char *)*((void *)v21 + 6);
            v297 = v230;
            if (v230)
            {
              llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v230, 2);
              v228 = v297;
            }
            sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v228);
            if (!v297) {
              goto LABEL_399;
            }
            int v251 = *v297;
            if ((v251 - 4) > 0x1E)
            {
              if ((v251 - 3) >= 0xFFFFFFFE) {
                uint64_t v258 = v297;
              }
              else {
                uint64_t v258 = 0;
              }
              if ((v251 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v253 = (unint64_t)(v258 + 8);
LABEL_487:
                v291[0] = (const char *)&v297;
                sub_1CC5FA668(v253 + 16, v291);
                goto LABEL_399;
              }
              if (v251 == 3) {
                *((void *)v297 + 1) = 0;
              }
            }
            else if ((v297[1] & 0x7F) == 2 || *((_DWORD *)v297 + 3))
            {
              uint64_t v252 = *((void *)v297 + 2);
              if ((v252 & 4) != 0)
              {
                unint64_t v253 = v252 & 0xFFFFFFFFFFFFFFF8;
                if (v253) {
                  goto LABEL_487;
                }
              }
            }
LABEL_399:
            v291[0] = "partword.cmpxchg.end";
            LOWORD(v294) = 259;
            llvm::BasicBlock::splitBasicBlock((uint64_t)v289, (uint64_t)v21 + 24, (uint64_t)v291, 0);
        }
      }
      uint64_t v171 = (llvm::PointerType *)sub_1CC2417AC(*((void *)a1 + 4), v86, *(void *)(*((void *)v26[5] + 7) + 40) + 272);
      size_t v172 = 0;
      uint64_t v173 = *(void *)*v26;
      v304 = (char *)v306;
      uint64_t v305 = 0x200000000;
      uint64_t v309 = v173;
      v310 = &v318;
      v311 = v319;
      uint64_t v312 = 0;
      int v313 = 0;
      __int16 v314 = 512;
      char v315 = 7;
      v307 = 0;
      v308 = 0;
      uint64_t v316 = 0;
      uint64_t v317 = 0;
      v318 = &unk_1F2616E88;
      v319[0] = &unk_1F2617008;
      v307 = v26[5];
      v308 = v26 + 3;
      unsigned int v174 = (char *)v26[6];
      v297 = v174;
      if (v174)
      {
        llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v174, 2);
        size_t v172 = v297;
      }
      sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v172);
      if (!v297)
      {
LABEL_308:
        uint64_t v175 = (unsigned __int8 *)*(v26 - 12);
        unsigned int v176 = *(_DWORD *)(*(void *)v175 + 8);
        if ((v176 & 0xFE) == 0x12) {
          unsigned int v176 = *(_DWORD *)(**(void **)(*(void *)v175 + 16) + 8);
        }
        unint64_t v177 = llvm::PointerType::get(v171, (llvm::Type *)(v176 >> 8));
        __int16 v298 = 257;
        if (*(void *)v175 != v177)
        {
          if (v175[16] <= 0x14u)
          {
            uint64_t v175 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v310
                                       + 28))(v310, 49, v175, v177);
            if (v175) {
              BOOL v197 = v175[16] >= 0x1Cu;
            }
            else {
              BOOL v197 = 0;
            }
            if (v197)
            {
              (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v175, &v297, v307, v308);
              if (v305)
              {
                BOOL v274 = (llvm::MDNode **)v304;
                v275 = &v304[16 * v305];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v175, *(_DWORD *)v274, v274[1]);
                  v274 += 2;
                }
                while (v274 != (llvm::MDNode **)v275);
              }
            }
          }
          else
          {
            LOWORD(v294) = 257;
            uint64_t v175 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v175, v177, v291, 0);
            (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v175, &v297, v307, v308);
            if (v305)
            {
              uint64_t v178 = (llvm::MDNode **)v304;
              uint64_t v179 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v175, *(_DWORD *)v178, v178[1]);
                v178 += 2;
              }
              while (v178 != (llvm::MDNode **)v179);
            }
          }
        }
        unsigned int v198 = (unsigned __int8 *)*(v26 - 8);
        __int16 v298 = 257;
        if (*(llvm::PointerType **)v198 != v171)
        {
          if (v198[16] <= 0x14u)
          {
            unsigned int v198 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::PointerType *))*v310
                                       + 28))(v310, 47, v198, v171);
            if (v198) {
              BOOL v201 = v198[16] >= 0x1Cu;
            }
            else {
              BOOL v201 = 0;
            }
            if (v201)
            {
              (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v198, &v297, v307, v308);
              if (v305)
              {
                v276 = (llvm::MDNode **)v304;
                v277 = &v304[16 * v305];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v198, *(_DWORD *)v276, v276[1]);
                  v276 += 2;
                }
                while (v276 != (llvm::MDNode **)v277);
              }
            }
          }
          else
          {
            LOWORD(v294) = 257;
            unsigned int v198 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v198, (uint64_t)v171, v291, 0);
            (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v198, &v297, v307, v308);
            if (v305)
            {
              int v199 = (llvm::MDNode **)v304;
              unsigned int v200 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v198, *(_DWORD *)v199, v199[1]);
                v199 += 2;
              }
              while (v199 != (llvm::MDNode **)v200);
            }
          }
        }
        int v202 = (unsigned __int8 *)*(v26 - 4);
        __int16 v298 = 257;
        if (*(llvm::PointerType **)v202 != v171)
        {
          if (v202[16] <= 0x14u)
          {
            int v202 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::PointerType *))*v310
                                       + 28))(v310, 47, v202, v171);
            if (v202) {
              BOOL v205 = v202[16] >= 0x1Cu;
            }
            else {
              BOOL v205 = 0;
            }
            if (v205)
            {
              (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v202, &v297, v307, v308);
              if (v305)
              {
                v278 = (llvm::MDNode **)v304;
                v279 = &v304[16 * v305];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v202, *(_DWORD *)v278, v278[1]);
                  v278 += 2;
                }
                while (v278 != (llvm::MDNode **)v279);
              }
            }
          }
          else
          {
            LOWORD(v294) = 257;
            int v202 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v202, (uint64_t)v171, v291, 0);
            (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v202, &v297, v307, v308);
            if (v305)
            {
              char v203 = (llvm::MDNode **)v304;
              __int16 v204 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v202, *(_DWORD *)v203, v203[1]);
                v203 += 2;
              }
              while (v203 != (llvm::MDNode **)v204);
            }
          }
        }
        unsigned int v206 = sub_1CD509648((uint64_t *)&v304, (uint64_t)v175, (uint64_t ***)v198, (uint64_t *)v202, HIBYTE(*((_WORD *)v26 + 9)) & 0x3F | 0x100u, (*((_WORD *)v26 + 9) >> 2) & 7, *((_WORD *)v26 + 9) >> 5, *((unsigned char *)v26 + 60));
        __int16 v207 = *((_WORD *)v206 + 9) & 0xFFFE | *((_WORD *)v26 + 9) & 1;
        *((_WORD *)v206 + 9) = v207;
        *((_WORD *)v206 + 9) = *((_WORD *)v26 + 9) & 2 | v207 & 0xFFFD;
        LODWORD(v297) = 0;
        LOWORD(v294) = 257;
        unint64_t v208 = (unsigned __int8 *)sub_1CC2415A4((uint64_t)&v304, (uint64_t *)v206, (unsigned int *)&v297, 1, (uint64_t)v291);
        LODWORD(v297) = 1;
        LOWORD(v294) = 257;
        v210 = sub_1CC2415A4((uint64_t)&v304, (uint64_t *)v206, (unsigned int *)&v297, 1, (uint64_t)v291);
        uint64_t v211 = *(void *)*(v26 - 8);
        __int16 v298 = 257;
        if (*(void *)v208 != v211)
        {
          if (v208[16] <= 0x14u)
          {
            unint64_t v208 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v310
                                       + 28))(v310, 48, v208, v211);
            if (v208) {
              BOOL v214 = v208[16] >= 0x1Cu;
            }
            else {
              BOOL v214 = 0;
            }
            if (v214)
            {
              (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v208, &v297, v307, v308);
              if (v305)
              {
                v280 = (llvm::MDNode **)v304;
                v281 = &v304[16 * v305];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v208, *(_DWORD *)v280, v280[1]);
                  v280 += 2;
                }
                while (v280 != (llvm::MDNode **)v281);
              }
            }
          }
          else
          {
            LOWORD(v294) = 257;
            unint64_t v208 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v208, v211, v291, 0);
            (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v208, &v297, v307, v308);
            if (v305)
            {
              unsigned int v212 = (llvm::MDNode **)v304;
              v213 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v208, *(_DWORD *)v212, v212[1]);
                v212 += 2;
              }
              while (v212 != (llvm::MDNode **)v213);
            }
          }
        }
        uint64_t v215 = llvm::UndefValue::get(*v26, v209);
        LODWORD(v297) = 0;
        LOWORD(v294) = 257;
        uint64_t v216 = sub_1CC2411F8((uint64_t)&v304, (uint64_t)v215, (uint64_t)v208, &v297, 1, (uint64_t)v291);
        LODWORD(v297) = 1;
        LOWORD(v294) = 257;
        v217 = sub_1CC2411F8((uint64_t)&v304, (uint64_t)v216, (uint64_t)v210, &v297, 1, (uint64_t)v291);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v26, v217, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v244 = *v297;
      if ((v244 - 4) > 0x1E)
      {
        if ((v244 - 3) >= 0xFFFFFFFE) {
          v254 = v297;
        }
        else {
          v254 = 0;
        }
        if ((v244 - 3) < 0xFFFFFFFE)
        {
          if (v244 == 3) {
            *((void *)v297 + 1) = 0;
          }
          goto LABEL_308;
        }
        unint64_t v246 = (unint64_t)(v254 + 8);
      }
      else
      {
        if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
          goto LABEL_308;
        }
        uint64_t v245 = *((void *)v297 + 2);
        if ((v245 & 4) == 0) {
          goto LABEL_308;
        }
        unint64_t v246 = v245 & 0xFFFFFFFFFFFFFFF8;
        if (!v246) {
          goto LABEL_308;
        }
      }
      v291[0] = (const char *)&v297;
      sub_1CC5FA668(v246 + 16, v291);
      goto LABEL_308;
    }
    if (*((unsigned __int8 *)*v23 + 8) <= 6u)
    {
      BOOL v52 = (llvm::PointerType *)sub_1CC2417AC(*((void *)a1 + 4), *v23, *(void *)(*((void *)v23[5] + 7) + 40) + 272);
      uint64_t v53 = 0;
      uint64_t v54 = *(void *)*v23;
      v304 = (char *)v306;
      uint64_t v305 = 0x200000000;
      uint64_t v309 = v54;
      v310 = &v318;
      v311 = v319;
      uint64_t v312 = 0;
      int v313 = 0;
      __int16 v314 = 512;
      char v315 = 7;
      v307 = 0;
      v308 = 0;
      uint64_t v316 = 0;
      uint64_t v317 = 0;
      v318 = &unk_1F2616E88;
      v319[0] = &unk_1F2617008;
      v307 = v23[5];
      v308 = v23 + 3;
      uint64_t v55 = (char *)v23[6];
      v297 = v55;
      if (v55)
      {
        llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v55, 2);
        uint64_t v53 = v297;
      }
      sub_1CB8461A4((uint64_t)&v304, 0, (uint64_t)v53);
      if (!v297)
      {
LABEL_99:
        unint64_t v56 = (unsigned __int8 *)*(v23 - 4);
        unsigned int v57 = *(_DWORD *)(*(void *)v56 + 8);
        if ((v57 & 0xFE) == 0x12) {
          unsigned int v57 = *(_DWORD *)(**(void **)(*(void *)v56 + 16) + 8);
        }
        unint64_t v58 = llvm::PointerType::get(v52, (llvm::Type *)(v57 >> 8));
        __int16 v298 = 257;
        if (*(void *)v56 != v58)
        {
          if (v56[16] <= 0x14u)
          {
            unint64_t v56 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v310
                                      + 28))(v310, 49, v56, v58);
            if (v56) {
              BOOL v74 = v56[16] >= 0x1Cu;
            }
            else {
              BOOL v74 = 0;
            }
            if (v74)
            {
              (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v56, &v297, v307, v308);
              if (v305)
              {
                int v260 = (llvm::MDNode **)v304;
                uint64_t v261 = &v304[16 * v305];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v260, v260[1]);
                  v260 += 2;
                }
                while (v260 != (llvm::MDNode **)v261);
              }
            }
          }
          else
          {
            LOWORD(v294) = 257;
            unint64_t v56 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v56, v58, v291, 0);
            (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v56, &v297, v307, v308);
            if (v305)
            {
              int v150 = (llvm::MDNode **)v304;
              BOOL v151 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v150, v150[1]);
                v150 += 2;
              }
              while (v150 != (llvm::MDNode **)v151);
            }
          }
        }
        __int16 v298 = 257;
        char v75 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)v307 + 7) + 40) + 272), v52, 1);
        uint64_t v76 = operator new(0x60uLL);
        v76[13] = v76[13] & 0x38000000 | 1;
        uint64_t v77 = (llvm::Instruction *)(v76 + 8);
        *(void *)uint64_t v76 = 0;
        *((void *)v76 + 1) = 0;
        *((void *)v76 + 2) = 0;
        *((void *)v76 + 3) = v76 + 8;
        LOWORD(v294) = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v76 + 8), (uint64_t)v52, (uint64_t)v56, v291, 0, v75, 0);
        (*(void (**)(void *, _DWORD *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v76 + 8, &v297, v307, v308);
        if (v305)
        {
          unint64_t v115 = (llvm::MDNode **)v304;
          size_t v116 = &v304[16 * v305];
          do
          {
            llvm::Instruction::setMetadata(v77, *(_DWORD *)v115, v115[1]);
            v115 += 2;
          }
          while (v115 != (llvm::MDNode **)v116);
        }
        __int16 v78 = *((_WORD *)v76 + 25) & 0xFF81 | (2 * __clz(1 << ((unint64_t)*((unsigned __int16 *)v23 + 9) >> 1))) ^ 0x7E;
        *((_WORD *)v76 + 25) = v78;
        __int16 v79 = v78 & 0xFFFE | *((_WORD *)v23 + 9) & 1;
        *((_WORD *)v76 + 25) = v79;
        char v80 = *((unsigned char *)v23 + 60);
        *((_WORD *)v76 + 25) = v79 & 0xFC7F | *((_WORD *)v23 + 9) & 0x380;
        *((unsigned char *)v76 + 92) = v80;
        uint64_t v81 = (uint64_t)*v23;
        __int16 v298 = 257;
        uint64_t v82 = (unsigned __int8 *)(v76 + 8);
        if (*((void *)v76 + 4) != v81)
        {
          if (*((unsigned __int8 *)v76 + 48) <= 0x14u)
          {
            uint64_t v82 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v310
                                      + 28))(v310, 49, v77, v81);
            if (v82) {
              BOOL v85 = v82[16] >= 0x1Cu;
            }
            else {
              BOOL v85 = 0;
            }
            if (v85)
            {
              (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v82, &v297, v307, v308);
              if (v305)
              {
                unsigned int v262 = (llvm::MDNode **)v304;
                BOOL v263 = &v304[16 * v305];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v82, *(_DWORD *)v262, v262[1]);
                  v262 += 2;
                }
                while (v262 != (llvm::MDNode **)v263);
              }
            }
          }
          else
          {
            LOWORD(v294) = 257;
            uint64_t v82 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v77, v81, v291, 0);
            (*(void (**)(void *, unsigned __int8 *, char **, llvm::UndefValue *, llvm::UndefValue **))(*v311 + 16))(v311, v82, &v297, v307, v308);
            if (v305)
            {
              unsigned int v83 = (llvm::MDNode **)v304;
              uint64_t v84 = &v304[16 * v305];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v82, *(_DWORD *)v83, v83[1]);
                v83 += 2;
              }
              while (v83 != (llvm::MDNode **)v84);
            }
          }
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, (llvm::Value *)v82, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v117 = *v297;
      if ((v117 - 4) > 0x1E)
      {
        if ((v117 - 3) >= 0xFFFFFFFE) {
          uint64_t v152 = v297;
        }
        else {
          uint64_t v152 = 0;
        }
        if ((v117 - 3) < 0xFFFFFFFE)
        {
          if (v117 == 3) {
            *((void *)v297 + 1) = 0;
          }
          goto LABEL_99;
        }
        unint64_t v119 = (unint64_t)(v152 + 8);
      }
      else
      {
        if ((v297[1] & 0x7F) != 2 && !*((_DWORD *)v297 + 3)) {
          goto LABEL_99;
        }
        uint64_t v118 = *((void *)v297 + 2);
        if ((v118 & 4) == 0) {
          goto LABEL_99;
        }
        unint64_t v119 = v118 & 0xFFFFFFFFFFFFFFF8;
        if (!v119) {
          goto LABEL_99;
        }
      }
      v291[0] = (const char *)&v297;
      sub_1CC5FA668(v119 + 16, v291);
      goto LABEL_99;
    }
    int v73 = sub_1CC23E480((uint64_t)a1, (uint64_t **)v21);
LABEL_149:
    v13 |= v73;
LABEL_195:
    if (++v20 != v290) {
      continue;
    }
    break;
  }
  uint64_t v20 = (llvm::UndefValue ***)v299;
LABEL_563:
  if (v20 != (llvm::UndefValue ***)&v301) {
    free(v20);
  }
  return v13 & 1;
}

uint64_t sub_1CC23E3E8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_1CC23E988(**(void **)(a2 - 64), *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40));
  uint64_t result = sub_1CC23F398(a1, (llvm::UndefValue **)a2, v4, HIBYTE(*(_WORD *)(a2 + 18)) & 0x3F, *(unsigned __int8 **)(a2 - 96), *(void **)(a2 - 32), *(void *)(a2 - 64), (*(unsigned __int16 *)(a2 + 18) >> 2) & 7, *(_WORD *)(a2 + 18) >> 5, dword_1CFAC6D04);
  if ((result & 1) == 0) {
    llvm::report_fatal_error((llvm *)"expandAtomicOpToLibcall shouldn't fail for CAS", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CC23E480(uint64_t a1, uint64_t **a2)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 944))(*(void *)(a1 + 32));
  uint64_t result = 0;
  switch(v4)
  {
    case 1:
      sub_1CC241820(a1, a2);
    case 2:
      uint64_t v6 = 0;
      uint64_t v7 = **a2;
      uint64_t v33 = 0x200000000;
      uint64_t v37 = v7;
      unsigned int v38 = &v46;
      unint64_t v39 = v47;
      uint64_t v40 = 0;
      int v41 = 0;
      __int16 v42 = 512;
      char v43 = 7;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = &unk_1F2616E88;
      v47[0] = &unk_1F2617008;
      uint64_t v8 = (unsigned __int8 *)a2[6];
      __int16 v35 = a2[5];
      BOOL v36 = a2 + 3;
      unsigned int v31 = v8;
      unsigned int v32 = v34;
      if (v8)
      {
        llvm::MetadataTracking::track((uint64_t)&v31, v8, 2);
        uint64_t v6 = (uint64_t)v31;
      }
      sub_1CB8461A4((uint64_t)&v32, 0, v6);
      if (!v31) {
        goto LABEL_7;
      }
      int v21 = *v31;
      if ((v21 - 4) > 0x1E)
      {
        if ((v21 - 3) >= 0xFFFFFFFE) {
          uint64_t v24 = v31;
        }
        else {
          uint64_t v24 = 0;
        }
        if ((v21 - 3) < 0xFFFFFFFE)
        {
          if (v21 == 3) {
            *((void *)v31 + 1) = 0;
          }
          goto LABEL_7;
        }
        unint64_t v23 = (unint64_t)(v24 + 8);
      }
      else
      {
        if ((v31[1] & 0x7F) != 2 && !*((_DWORD *)v31 + 3)) {
          goto LABEL_7;
        }
        uint64_t v22 = *((void *)v31 + 2);
        if ((v22 & 4) == 0) {
          goto LABEL_7;
        }
        unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
        if (!v23) {
          goto LABEL_7;
        }
      }
      v29[0] = &v31;
      sub_1CC5FA668(v23 + 16, v29);
LABEL_7:
      uint64_t v9 = (*(uint64_t (**)(void, void **, uint64_t *, void, void))(**(void **)(a1 + 32) + 864))(*(void *)(a1 + 32), &v32, *a2, *(a2 - 4), (*((unsigned __int16 *)a2 + 9) >> 7) & 7);
      (*(void (**)(void))(**(void **)(a1 + 32) + 920))();
      unsigned int v10 = (llvm::ValueAsMetadata *)a2;
      uint64_t v11 = (llvm::Instruction *)v9;
      goto LABEL_8;
    case 3:
      uint64_t v12 = 0;
      uint64_t v13 = **a2;
      uint64_t v33 = 0x200000000;
      uint64_t v37 = v13;
      unsigned int v38 = &v46;
      unint64_t v39 = v47;
      uint64_t v40 = 0;
      int v41 = 0;
      __int16 v42 = 512;
      char v43 = 7;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = &unk_1F2616E88;
      v47[0] = &unk_1F2617008;
      unint64_t v14 = (unsigned __int8 *)a2[6];
      __int16 v35 = a2[5];
      BOOL v36 = a2 + 3;
      unsigned int v31 = v14;
      unsigned int v32 = v34;
      if (v14)
      {
        llvm::MetadataTracking::track((uint64_t)&v31, v14, 2);
        uint64_t v12 = (uint64_t)v31;
      }
      sub_1CB8461A4((uint64_t)&v32, 0, v12);
      if (!v31) {
        goto LABEL_13;
      }
      int v25 = *v31;
      if ((v25 - 4) > 0x1E)
      {
        if ((v25 - 3) >= 0xFFFFFFFE) {
          unsigned int v28 = v31;
        }
        else {
          unsigned int v28 = 0;
        }
        if ((v25 - 3) < 0xFFFFFFFE)
        {
          if (v25 == 3) {
            *((void *)v31 + 1) = 0;
          }
          goto LABEL_13;
        }
        unint64_t v27 = (unint64_t)(v28 + 8);
      }
      else
      {
        if ((v31[1] & 0x7F) != 2 && !*((_DWORD *)v31 + 3)) {
          goto LABEL_13;
        }
        uint64_t v26 = *((void *)v31 + 2);
        if ((v26 & 4) == 0) {
          goto LABEL_13;
        }
        unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
        if (!v27) {
          goto LABEL_13;
        }
      }
      v29[0] = &v31;
      sub_1CC5FA668(v27 + 16, v29);
LABEL_13:
      if (((*((unsigned __int16 *)a2 + 9) >> 7) & 7) == 1) {
        unsigned int v17 = 2;
      }
      else {
        unsigned int v17 = (*((unsigned __int16 *)a2 + 9) >> 7) & 7;
      }
      uint64_t v18 = (uint64_t)*(a2 - 4);
      NullValue = (uint64_t ***)llvm::Constant::getNullValue((llvm::Constant *)*a2, v15, v16);
      uint64_t v20 = (uint64_t *)sub_1CD509648((uint64_t *)&v32, v18, NullValue, (uint64_t *)NullValue, (*((_WORD *)a2 + 9) >> 1) & 0x3F | 0x100u, v17, dword_1CFAC6D1C[v17 - 2], 1);
      LODWORD(v31) = 0;
      v29[0] = "loaded";
      __int16 v30 = 259;
      uint64_t v11 = sub_1CC2415A4((uint64_t)&v32, v20, (unsigned int *)&v31, 1, (uint64_t)v29);
      unsigned int v10 = (llvm::ValueAsMetadata *)a2;
LABEL_8:
      llvm::Value::doRAUW(v10, v11, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    case 4:
    case 5:
    case 6:
      __break(1u);
      free(0);
      return 1;
    case 7:
      *((_WORD *)a2 + 9) &= 0xFC7Fu;
      uint64_t result = 1;
      *((unsigned char *)a2 + 60) = 1;
      return result;
    default:
      return result;
  }
}

unint64_t sub_1CC23E988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1CB83544C(a2 + 272, a1);
  if (v3 == 1)
  {
    uint64_t v5 = v2;
    uint64_t v2 = v5;
  }
  return (unint64_t)(v2 + 7) >> 3;
}

uint64_t sub_1CC23E9E0(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  v68[30] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a2;
  uint64_t v4 = **(uint64_t ***)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  uint64_t v6 = 0;
  switch((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 968))(*(void *)(a1 + 32)))
  {
    case 1u:
      unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 80);
      if (sub_1CC23E988(**((void **)a2 - 4), *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40)) < v7 >> 3)sub_1CC242ACC(a1, a2, 1); {
      uint64_t v53 = &v37;
      }
      sub_1CC241820(a1, (uint64_t **)a2);
    case 2u:
    case 6u:
      __break(1u);
      goto LABEL_72;
    case 3u:
      unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 32) + 80);
      if (sub_1CC23E988(**((void **)a2 - 4), *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40)) >= v14 >> 3)
      {
        v40[0] = &v41;
        v40[1] = (void *)0x300000000;
        llvm::LLVMContextImpl::getSyncScopeNames(*v4, v40);
        uint64_t v19 = *((unsigned __int8 *)a2 + 60);
        uint64_t v20 = *((void *)v40[0] + 2 * v19 + 1);
        if (v20)
        {
          int v21 = (const char *)*((void *)v40[0] + 2 * v19);
        }
        else
        {
          int v21 = "system";
          uint64_t v20 = 6;
        }
        llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v38, *(const llvm::Function **)(*((void *)a2 + 5) + 56));
        uint64_t v25 = ***(void ***)v38[0];
        if (*(void *)(v25 + 128)
          || (*(unsigned int (**)(void))(**(void **)(v25 + 72) + 48))(*(void *)(v25 + 72)))
        {
          llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v53, (uint64_t)"atomic-expand", (uint64_t)"Passed", 6, (uint64_t)a2);
          OperationName = "A compare and swap loop was generated for an atomic ";
          uint64_t v44 = 52;
          sub_1CC59ADEC((uint64_t *)&v60, (uint64_t)&OperationName);
          OperationName = llvm::AtomicRMWInst::getOperationName(*((_WORD *)a2 + 9) >> 4);
          uint64_t v44 = v26;
          sub_1CC59ADEC((uint64_t *)&v60, (uint64_t)&OperationName);
          OperationName = " operation at ";
          uint64_t v44 = 14;
          sub_1CC59ADEC((uint64_t *)&v60, (uint64_t)&OperationName);
          OperationName = v21;
          uint64_t v44 = v20;
          sub_1CC59ADEC((uint64_t *)&v60, (uint64_t)&OperationName);
          OperationName = " memory scope";
          uint64_t v44 = 13;
          sub_1CC59ADEC((uint64_t *)&v60, (uint64_t)&OperationName);
          LODWORD(v44) = v54;
          BYTE4(v44) = BYTE4(v54);
          long long v45 = v55;
          uint64_t v46 = v56;
          long long v47 = v57;
          long long v48 = v58;
          OperationName = (const char *)&unk_1F2616800;
          unint64_t v49 = v59;
          uint64_t v50 = v52;
          uint64_t v51 = 0x400000000;
          unsigned int v27 = v61;
          if (v61)
          {
            sub_1CD494D68((uint64_t)&v50, (uint64_t)&v60);
            unsigned int v27 = v61;
          }
          v52[32] = v68[28];
          v52[33] = v68[29];
          OperationName = (const char *)&unk_1F2616570;
          uint64_t v53 = (llvm::ValueAsMetadata **)&unk_1F2616800;
          unsigned int v28 = (char *)v60;
          if (v27)
          {
            unint64_t v29 = (unint64_t)v27 << 6;
            do
            {
              __int16 v30 = (void **)&v28[v29];
              if (v28[v29 - 17] < 0) {
                operator delete(*(v30 - 5));
              }
              if (*((char *)v30 - 41) < 0) {
                operator delete(*(v30 - 8));
              }
              v29 -= 64;
            }
            while (v29);
            unsigned int v28 = (char *)v60;
          }
          if (v28 != (char *)&v62) {
            free(v28);
          }
          llvm::OptimizationRemarkEmitter::emit(v38, (llvm::DiagnosticInfoOptimizationBase *)&OperationName);
          OperationName = (const char *)&unk_1F2616800;
          unsigned int v32 = (char *)v50;
          if (v51)
          {
            unint64_t v33 = (unint64_t)v51 << 6;
            do
            {
              unsigned int v34 = (void **)&v32[v33];
              if (v32[v33 - 17] < 0) {
                operator delete(*(v34 - 5));
              }
              if (*((char *)v34 - 41) < 0) {
                operator delete(*(v34 - 8));
              }
              v33 -= 64;
            }
            while (v33);
            unsigned int v32 = (char *)v50;
          }
          if (v32 != (char *)v52) {
            free(v32);
          }
        }
        llvm::expandAtomicRMWToCmpXchg((uint64_t **)a2);
      }
      if (*(unsigned __int8 *)(*(void *)a2 + 8) >= 7u) {
        sub_1CC242ACC(a1, a2, 3);
      }
      return 0;
    case 4u:
      uint64_t v8 = 0;
      uint64_t v9 = **(void **)a2;
      uint64_t v53 = (llvm::ValueAsMetadata **)&v55;
      uint64_t v54 = 0x200000000;
      *((void *)&v58 + 1) = v9;
      unint64_t v59 = &v67;
      uint64_t v60 = v68;
      uint64_t v61 = 0;
      int v62 = 0;
      __int16 v63 = 512;
      char v64 = 7;
      uint64_t v66 = 0;
      uint64_t v65 = 0;
      BOOL v67 = &unk_1F2616E88;
      v68[0] = &unk_1F2617008;
      unsigned int v10 = (void *)*((void *)a2 + 6);
      *((void *)&v57 + 1) = *((void *)a2 + 5);
      *(void *)&long long v58 = (char *)a2 + 24;
      v40[0] = v10;
      if (v10)
      {
        llvm::MetadataTracking::track((uint64_t)v40, (unsigned __int8 *)v10, 2);
        uint64_t v8 = v40[0];
      }
      sub_1CB8461A4((uint64_t)&v53, 0, (uint64_t)v8);
      if (!v40[0]) {
        goto LABEL_7;
      }
      int v22 = *(unsigned __int8 *)v40[0];
      if ((v22 - 4) > 0x1E)
      {
        if ((v22 - 3) >= 0xFFFFFFFE) {
          unsigned int v31 = v40[0];
        }
        else {
          unsigned int v31 = 0;
        }
        if ((v22 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v24 = (unint64_t)v31 + 8;
LABEL_55:
          OperationName = (const char *)v40;
          sub_1CC5FA668(v24 + 16, &OperationName);
          goto LABEL_7;
        }
        if (v22 == 3) {
          *((void *)v40[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v40[0] + 1) & 0x7F) == 2 || *((_DWORD *)v40[0] + 3))
      {
        uint64_t v23 = *((void *)v40[0] + 2);
        if ((v23 & 4) != 0)
        {
          unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
          if (v24) {
            goto LABEL_55;
          }
        }
      }
LABEL_7:
      sub_1CC241E2C((uint64_t)&OperationName, (uint64_t)&v53, *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40), *(llvm::ConstantInt **)a2, *((unsigned __int8 **)a2 - 8), *((unsigned char *)a2 + 19) & 0x3F, *(_DWORD *)(*(void *)(a1 + 32) + 80) >> 3);
      if ((*((_WORD *)a2 + 9) >> 4) - 7 >= 2) {
        uint64_t v11 = 39;
      }
      else {
        uint64_t v11 = 40;
      }
      uint64_t v6 = (unsigned __int8 *)*((void *)a2 - 4);
      __int16 v39 = 257;
      if (*(const char **)v6 != OperationName)
      {
        if (v6[16] <= 0x14u)
        {
          uint64_t v15 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, const char *))*v59 + 28))(v59, v11, v6, OperationName);
          uint64_t v6 = (unsigned __int8 *)v15;
          if (v15 && *(unsigned __int8 *)(v15 + 16) >= 0x1Cu)
          {
LABEL_72:
            (*(void (**)(void *, unsigned __int8 *, uint64_t ***, void, void))(*(void *)v60 + 16))(v60, v6, v38, *((void *)&v57 + 1), v58);
            if (v54)
            {
              __int16 v35 = v53;
              BOOL v36 = &v53[2 * v54];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v35, v35[1]);
                v35 += 2;
              }
              while (v35 != v36);
            }
          }
        }
        else
        {
          __int16 v42 = 257;
          uint64_t v6 = (unsigned __int8 *)llvm::CastInst::Create(v11, (uint64_t)v6, (uint64_t)OperationName, (const char **)v40, 0);
          (*(void (**)(void *, unsigned __int8 *, uint64_t ***, void, void))(*(void *)v60 + 16))(v60, v6, v38, *((void *)&v57 + 1), v58);
          if (v54)
          {
            uint64_t v12 = v53;
            uint64_t v13 = &v53[2 * v54];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v12, v12[1]);
              v12 += 2;
            }
            while (v12 != v13);
          }
        }
      }
      v40[0] = "ValOperand_Shifted";
      __int16 v42 = 259;
      sub_1CC242524((uint64_t)&v53, (uint64_t)v6, v46, (uint64_t)v40, 0, 0);
      uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 880))();
      unsigned int v17 = sub_1CC242614((uint64_t)&v53, v16, &OperationName);
      llvm::Value::doRAUW(a2, (llvm::Value *)v17, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    case 5u:
      (*(void (**)(void, llvm::ValueAsMetadata *))(**(void **)(a1 + 32) + 888))(*(void *)(a1 + 32), a2);
      return 1;
    case 7u:
      llvm::lowerAtomicRMWInst((uint64_t **)a2, v5);
    default:
      return (uint64_t)v6;
  }
}

uint64_t sub_1CC23F398(uint64_t a1, llvm::UndefValue **a2, unsigned int a3, char a4, unsigned __int8 *a5, void *a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int *a10)
{
  uint64_t v16 = 0;
  v229[1] = *MEMORY[0x1E4F143B8];
  unsigned int v17 = *(llvm::IntegerType **)*a2;
  uint64_t v18 = a2[5];
  uint64_t v185 = *(void **)(*((void *)v18 + 7) + 40);
  BOOL v214 = (llvm::MDNode **)v216;
  uint64_t v215 = 0x200000000;
  uint64_t v219 = v17;
  unsigned int v220 = &v228;
  BOOL v221 = v229;
  uint64_t v222 = 0;
  int v223 = 0;
  __int16 v224 = 512;
  char v225 = 7;
  uint64_t v226 = 0;
  uint64_t v227 = 0;
  v228 = &unk_1F2616E88;
  v229[0] = &unk_1F2617008;
  v217 = v18;
  uint64_t v218 = a2 + 3;
  uint64_t v19 = a2[6];
  v196 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v196, (unsigned __int8 *)v19, 2);
    uint64_t v16 = v196;
  }
  sub_1CB8461A4((uint64_t)&v214, 0, (uint64_t)v16);
  if (v196)
  {
    int v135 = *(unsigned __int8 *)v196;
    if ((v135 - 4) > 0x1E)
    {
      if ((v135 - 3) >= 0xFFFFFFFE) {
        uint64_t v144 = v196;
      }
      else {
        uint64_t v144 = 0;
      }
      if ((v135 - 3) < 0xFFFFFFFE)
      {
        if (v135 == 3) {
          *((void *)v196 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v137 = (unint64_t)v144 + 8;
    }
    else
    {
      if ((*((unsigned char *)v196 + 1) & 0x7F) != 2 && !*((_DWORD *)v196 + 3)) {
        goto LABEL_4;
      }
      uint64_t v136 = *((void *)v196 + 2);
      if ((v136 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
      if (!v137) {
        goto LABEL_4;
      }
    }
    v199[0] = &v196;
    sub_1CC5FA668(v137 + 16, v199);
  }
LABEL_4:
  uint64_t v20 = 0;
  uint64_t v21 = *(void *)(*((void *)a2[5] + 7) + 80);
  if (v21) {
    uint64_t v22 = v21 - 24;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void *)(v22 + 48);
  if (v23) {
    unint64_t v24 = (uint64_t **)(v23 - 24);
  }
  else {
    unint64_t v24 = 0;
  }
  uint64_t v25 = **v24;
  v199[0] = v200;
  v199[1] = (void *)0x200000000;
  uint64_t v203 = v25;
  __int16 v204 = &v212;
  BOOL v205 = &v213;
  uint64_t v206 = 0;
  int v207 = 0;
  __int16 v208 = 512;
  char v209 = 7;
  BOOL v201 = 0;
  int v202 = 0;
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  unsigned int v212 = &unk_1F2616E88;
  v213 = &unk_1F2617008;
  BOOL v201 = v24[5];
  int v202 = v24 + 3;
  uint64_t v26 = v24[6];
  unint64_t v192 = v26;
  if (v26)
  {
    llvm::MetadataTracking::track((uint64_t)&v192, (unsigned __int8 *)v26, 2);
    uint64_t v20 = v192;
  }
  sub_1CB8461A4((uint64_t)v199, 0, (uint64_t)v20);
  if (v192)
  {
    int v138 = *(unsigned __int8 *)v192;
    if ((v138 - 4) > 0x1E)
    {
      if ((v138 - 3) >= 0xFFFFFFFE) {
        unsigned __int16 v145 = v192;
      }
      else {
        unsigned __int16 v145 = 0;
      }
      if ((v138 - 3) < 0xFFFFFFFE)
      {
        if (v138 == 3) {
          *((void *)v192 + 1) = 0;
        }
        goto LABEL_13;
      }
      unint64_t v140 = (unint64_t)v145 + 8;
    }
    else
    {
      if ((*((unsigned char *)v192 + 1) & 0x7F) != 2 && !*((_DWORD *)v192 + 3)) {
        goto LABEL_13;
      }
      uint64_t v139 = *((void *)v192 + 2);
      if ((v139 & 4) == 0) {
        goto LABEL_13;
      }
      unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFF8;
      if (!v140) {
        goto LABEL_13;
      }
    }
    v196 = &v192;
    sub_1CC5FA668(v140 + 16, &v196);
  }
LABEL_13:
  unsigned int v27 = (unsigned __int8 *)v185[38];
  unint64_t v28 = v185[39];
  unint64_t v29 = &v27[v28];
  if (v28 >= 2)
  {
    BOOL v157 = v27 + 1;
    unsigned __int8 v156 = *v27;
    unint64_t v158 = v28 - 1;
    uint64_t v159 = v27 + 1;
    do
    {
      unsigned int v161 = *v159++;
      unsigned __int8 v160 = v161;
      BOOL v162 = v156 >= v161;
      if (v156 <= v161) {
        unsigned __int8 v156 = v160;
      }
      if (!v162) {
        unsigned int v27 = v157;
      }
      BOOL v157 = v159;
      --v158;
    }
    while (v158);
  }
  unsigned int v30 = 8;
  if (v27 != v29)
  {
    if ((*v27 & 0xC0) != 0) {
      unsigned int v30 = 16;
    }
    else {
      unsigned int v30 = 8;
    }
  }
  if (1 << a4 >= (unint64_t)a3)
  {
    BOOL v186 = 0;
    if (a3 <= 0x10 && ((1 << a3) & 0x10116) != 0) {
      BOOL v186 = v30 >= a3;
    }
  }
  else
  {
    BOOL v186 = 0;
  }
  long long v181 = (llvm::Type *)llvm::IntegerType::get(v17, (llvm::LLVMContext *)(8 * a3));
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v185 + 34), v181, 0);
  unsigned int v32 = *(llvm::ConstantInt **)(*(void *)v17 + 1984);
  unsigned int v33 = *(_DWORD *)(*(void *)v17 + 1992);
  LODWORD(v197) = v33 >> 8;
  if (v33 >> 8 > 0x40) {
    operator new[]();
  }
  if (v33 <= 0xFF) {
    LODWORD(v34) = 0;
  }
  else {
    unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v33) + 63);
  }
  v196 = (void *)(v34 & a3);
  long long v182 = (llvm::ConstantInt *)llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v196, v31);
  if (v197 >= 0x41 && v196) {
    MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
  }
  uint64_t v36 = dword_1CFAC6C24[a8];
  uint64_t v37 = *(llvm::ConstantInt **)(*(void *)v17 + 1960);
  unsigned int v38 = *(_DWORD *)(*(void *)v17 + 1968);
  LODWORD(v197) = v38 >> 8;
  if (v38 >> 8 > 0x40) {
    operator new[]();
  }
  if (v38 <= 0xFF) {
    unint64_t v39 = 0;
  }
  else {
    unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
  }
  v196 = (void *)(v39 & v36);
  uint64_t v178 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v196, v35);
  if (v197 >= 0x41 && v196) {
    MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
  }
  if (a7)
  {
    uint64_t v41 = dword_1CFAC6C24[a9];
    __int16 v42 = *(llvm::ConstantInt **)(*(void *)v17 + 1960);
    unsigned int v43 = *(_DWORD *)(*(void *)v17 + 1968);
    LODWORD(v197) = v43 >> 8;
    if (v43 >> 8 > 0x40) {
      operator new[]();
    }
    if (v43 <= 0xFF) {
      unint64_t v44 = 0;
    }
    else {
      unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v43) + 63);
    }
    v196 = (void *)(v44 & v41);
    long long v45 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v196, v40);
    if (v197 >= 0x41 && v196)
    {
      uint64_t v46 = v45;
      MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
      long long v45 = v46;
    }
  }
  else
  {
    long long v45 = 0;
  }
  uint64_t v179 = (llvm::IntegerType **)*a2;
  uint64_t v47 = *(void *)v17;
  if (v186)
  {
    unsigned int v48 = 0;
    uint64_t v49 = a3;
    switch(a3)
    {
      case 1u:
        goto LABEL_48;
      case 2u:
        uint64_t v49 = 2;
        goto LABEL_48;
      case 3u:
      case 5u:
      case 6u:
      case 7u:
        break;
      case 4u:
        uint64_t v49 = 3;
        goto LABEL_48;
      case 8u:
        uint64_t v49 = 4;
        goto LABEL_48;
      default:
        if (a3 != 16) {
          break;
        }
        uint64_t v49 = 5;
LABEL_48:
        unsigned int v48 = a10[v49];
        break;
    }
  }
  else
  {
    unsigned int v48 = *a10;
    if (*a10 == 637) {
      goto LABEL_169;
    }
  }
  unsigned int v177 = v48;
  if (*(void *)(*(void *)(a1 + 32) + 8 * v48 + 174048))
  {
    unsigned int v176 = v45;
    v196 = &v198;
    uint64_t v197 = 0x600000000;
    uint64_t v189 = 0;
    if (!v186)
    {
      uint64_t v50 = llvm::IntegerType::get(v17, (llvm::LLVMContext *)*(unsigned int *)(v185[63] + 4));
      BOOL v52 = *(llvm::ConstantInt **)v50;
      unsigned int v53 = *(_DWORD *)(v50 + 8);
      LODWORD(v193) = v53 >> 8;
      if (v53 >> 8 > 0x40) {
        operator new[]();
      }
      if (v53 <= 0xFF) {
        LODWORD(v54) = 0;
      }
      else {
        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
      }
      unint64_t v192 = (void *)(v54 & a3);
      long long v55 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v192, v51);
      if (v193 >= 0x41 && v192) {
        MEMORY[0x1D25D9CB0](v192, 0x1000C8000313F17);
      }
      if (v197 >= HIDWORD(v197)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v196 + v197) = v55;
      LODWORD(v197) = v197 + 1;
    }
    unsigned int v56 = *(_DWORD *)(*(void *)a5 + 8);
    if ((v56 & 0xFE) == 0x12) {
      unsigned int v56 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
    }
    unint64_t v57 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v17 + 1912), (llvm::Type *)(v56 >> 8));
    __int16 v191 = 257;
    if (*(void *)a5 != v57)
    {
      if (a5[16] <= 0x14u)
      {
        uint64_t v60 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v220 + 28))(v220, 49, a5, v57);
        a5 = (unsigned __int8 *)v60;
        if (v60)
        {
          if (*(unsigned __int8 *)(v60 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v60, v190, v217, v218);
            if (v215)
            {
              uint64_t v165 = v214;
              int v166 = (char *)&v214[2 * v215];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)a5, *(_DWORD *)v165, v165[1]);
                v165 += 2;
              }
              while (v165 != (llvm::MDNode **)v166);
            }
          }
        }
      }
      else
      {
        __int16 v195 = 257;
        a5 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a5, v57, (const char **)&v192, 0);
        (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, a5, v190, v217, v218);
        if (v215)
        {
          long long v58 = v214;
          unint64_t v59 = (char *)&v214[2 * v215];
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a5, *(_DWORD *)v58, v58[1]);
            v58 += 2;
          }
          while (v58 != (llvm::MDNode **)v59);
        }
      }
    }
    unint64_t v61 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v17 + 1912), 0);
    __int16 v191 = 257;
    if (*(void *)a5 != v61)
    {
      if (a5[16] <= 0x14u)
      {
        a5 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v220
                                 + 28))(v220, 50, a5, v61);
        if (a5) {
          BOOL v64 = a5[16] >= 0x1Cu;
        }
        else {
          BOOL v64 = 0;
        }
        if (v64)
        {
          (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, a5, v190, v217, v218);
          if (v215)
          {
            uint64_t v163 = v214;
            int v164 = (char *)&v214[2 * v215];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)a5, *(_DWORD *)v163, v163[1]);
              v163 += 2;
            }
            while (v163 != (llvm::MDNode **)v164);
          }
        }
      }
      else
      {
        __int16 v195 = 257;
        a5 = (unsigned __int8 *)llvm::CastInst::Create(50, (uint64_t)a5, v61, (const char **)&v192, 0);
        (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, a5, v190, v217, v218);
        if (v215)
        {
          int v62 = v214;
          __int16 v63 = (char *)&v214[2 * v215];
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a5, *(_DWORD *)v62, v62[1]);
            v62 += 2;
          }
          while (v62 != (llvm::MDNode **)v63);
        }
      }
    }
    if (v197 >= HIDWORD(v197)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v196 + v197) = a5;
    unsigned int v65 = v197 + 1;
    LODWORD(v197) = v197 + 1;
    if (a7)
    {
      uint64_t v66 = *(llvm::Type **)a7;
      __int16 v195 = 257;
      BOOL v67 = sub_1CB935044((uint64_t *)v199, v66, 0, (uint64_t)&v192);
      uint64_t v68 = (uint64_t)v67;
      *((_WORD *)v67 + 9) = *((_WORD *)v67 + 9) & 0xFFC0 | Alignment;
      unsigned int v69 = *(_DWORD *)(*(void *)v67 + 8);
      if ((v69 & 0xFE) == 0x12) {
        unsigned int v69 = *(_DWORD *)(**(void **)(*(void *)v67 + 16) + 8);
      }
      unint64_t v70 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v17 + 1912), (llvm::Type *)(v69 >> 8));
      __int16 v191 = 257;
      BOOL v71 = (unsigned __int8 *)v68;
      if (*(void *)v68 != v70)
      {
        if (*(unsigned __int8 *)(v68 + 16) <= 0x14u)
        {
          BOOL v71 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v220 + 28))(v220, 49, v68, v70);
          if (v71) {
            BOOL v74 = v71[16] >= 0x1Cu;
          }
          else {
            BOOL v74 = 0;
          }
          if (v74)
          {
            (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v71, v190, v217, v218);
            if (v215)
            {
              uint64_t v171 = v214;
              size_t v172 = (char *)&v214[2 * v215];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v71, *(_DWORD *)v171, v171[1]);
                v171 += 2;
              }
              while (v171 != (llvm::MDNode **)v172);
            }
          }
        }
        else
        {
          __int16 v195 = 257;
          BOOL v71 = (unsigned __int8 *)llvm::CastInst::Create(49, v68, v70, (const char **)&v192, 0);
          (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v71, v190, v217, v218);
          if (v215)
          {
            uint64_t v72 = v214;
            int v73 = (char *)&v214[2 * v215];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v71, *(_DWORD *)v72, v72[1]);
              v72 += 2;
            }
            while (v72 != (llvm::MDNode **)v73);
          }
        }
      }
      llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v214, (llvm::Value *)v71, v182);
      char v75 = (char *)operator new(0x80uLL);
      *((_DWORD *)v75 + 21) = *((_DWORD *)v75 + 21) & 0x38000000 | 2;
      *(void *)char v75 = 0;
      *((void *)v75 + 2) = 0;
      *((void *)v75 + 1) = 0;
      *((void *)v75 + 5) = 0;
      *((void *)v75 + 6) = 0;
      *((void *)v75 + 4) = 0;
      *((void *)v75 + 8) = ***(void ***)a7 + 1576;
      uint64_t v76 = (llvm::Instruction *)(v75 + 64);
      *((void *)v75 + 3) = v75 + 64;
      *((void *)v75 + 7) = v75 + 64;
      *((void *)v75 + 9) = 0;
      v75[80] = 61;
      v75[81] = 0;
      *((_DWORD *)v75 + 21) = 2;
      *(_OWORD *)(v75 + 88) = 0u;
      *(_OWORD *)(v75 + 104) = 0u;
      *((_DWORD *)v75 + 30) = 0;
      uint64_t v77 = (void *)(a7 + 8);
      uint64_t v78 = *(void *)(a7 + 8);
      *(void *)char v75 = a7;
      *((void *)v75 + 1) = v78;
      if (v78) {
        *(void *)(v78 + 16) = v75 + 8;
      }
      *((void *)v75 + 2) = v77;
      *uint64_t v77 = v75;
      *((void *)v75 + 4) = v68;
      __int16 v79 = (void *)(v68 + 8);
      uint64_t v80 = *(void *)(v68 + 8);
      *((void *)v75 + 5) = v80;
      if (v80) {
        *(void *)(v80 + 16) = v75 + 40;
      }
      *((void *)v75 + 6) = v79;
      void *v79 = v75 + 32;
      *((_WORD *)v75 + 41) = 2 * (Alignment & 0x3F);
      v75[124] = 1;
      __int16 v195 = 257;
      (*(void (**)(void *, llvm::Instruction *, void **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v76, &v192, v217, v218);
      if (v215)
      {
        __int16 v146 = v214;
        long long v147 = (char *)&v214[2 * v215];
        do
        {
          llvm::Instruction::setMetadata(v76, *(_DWORD *)v146, v146[1]);
          v146 += 2;
        }
        while (v146 != (llvm::MDNode **)v147);
      }
      if (v197 >= HIDWORD(v197)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v196 + v197) = v71;
      unsigned int v65 = v197 + 1;
      LODWORD(v197) = v197 + 1;
    }
    else
    {
      BOOL v71 = 0;
      uint64_t v68 = 0;
    }
    uint64_t v175 = (llvm::Value *)v71;
    uint64_t v81 = (llvm::IntegerType **)(v47 + 1576);
    if (!a6)
    {
      unsigned int v83 = 0;
      goto LABEL_119;
    }
    if (v186)
    {
      __int16 v195 = 257;
      uint64_t v82 = (unsigned __int8 *)sub_1CC240E88((uint64_t)&v214, (uint64_t)a6, (uint64_t)v181, (uint64_t)&v192);
      unsigned int v83 = 0;
      uint64_t v84 = 0;
      BOOL v85 = 0;
      unsigned int v86 = v197;
      unsigned int v87 = HIDWORD(v197);
LABEL_138:
      if (v86 >= v87) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v196 + v86) = v82;
      unsigned int v65 = v197 + 1;
      LODWORD(v197) = v197 + 1;
LABEL_140:
      uint64_t v173 = (llvm::Value *)v85;
      if (v65 >= HIDWORD(v197)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v196 + v65) = v178;
      unsigned int v112 = v197 + 1;
      LODWORD(v197) = v197 + 1;
      uint64_t v174 = v84;
      if (v176)
      {
        if (v112 >= HIDWORD(v197)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v196 + v112) = v176;
        unsigned int v112 = v197 + 1;
        LODWORD(v197) = v197 + 1;
      }
      if (a7)
      {
        long long v181 = (llvm::Type *)(*(void *)v17 + 1888);
        uint64_t v189 = llvm::AttributeList::addAttributeAtIndex(&v189, (uint64_t *)v17, 0, 67);
        unsigned int v112 = v197;
      }
      else if (v179 == v81 || !v186)
      {
        long long v181 = (llvm::Type *)(*(void *)v17 + 1576);
      }
      unint64_t v192 = v194;
      uint64_t v193 = 0x600000000;
      if (v112)
      {
        LODWORD(v113) = 0;
        unsigned int v114 = (void **)v196;
        uint64_t v115 = 8 * v112;
        do
        {
          if (v113 >= HIDWORD(v193)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v192 + v113) = **v114;
          uint64_t v113 = (v193 + 1);
          LODWORD(v193) = v193 + 1;
          ++v114;
          v115 -= 8;
        }
        while (v115);
        size_t v116 = v192;
      }
      else
      {
        uint64_t v113 = 0;
        size_t v116 = v194;
      }
      int v117 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v181, (uint64_t)v116, v113, 0);
      uint64_t v118 = *(void *)(a1 + 32) + 8 * v177;
      unint64_t v119 = *(unsigned __int8 **)(v118 + 174048);
      if (v119) {
        int v120 = (const char *)strlen(*(const char **)(v118 + 174048));
      }
      else {
        int v120 = 0;
      }
      inserted = (uint64_t **)llvm::Module::getOrInsertFunction((uint64_t)v185, v119, v120, v117, v189);
      __int16 v191 = 257;
      uint64_t v124 = sub_1CB845BAC((uint64_t *)&v214, inserted, v122, (uint64_t *)v196, v197, (uint64_t)v190, 0);
      *(void *)(v124 + 64) = v189;
      char v125 = v186;
      if (!a6) {
        char v125 = 1;
      }
      if ((v125 & 1) == 0) {
        llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v214, (llvm::Value *)v83, v182);
      }
      if (a7)
      {
        unint64_t v126 = llvm::UndefValue::get(*a2, v123);
        uint64_t v127 = *(void *)a7;
        __int16 v188 = 257;
        int v128 = operator new(0x60uLL);
        v128[13] = v128[13] & 0x38000000 | 1;
        uint64_t v129 = (llvm::Instruction *)(v128 + 8);
        *(void *)int v128 = 0;
        *((void *)v128 + 1) = 0;
        *((void *)v128 + 2) = 0;
        *((void *)v128 + 3) = v128 + 8;
        __int16 v191 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v128 + 8), v127, v68, v190, 0, Alignment, 0);
        (*(void (**)(void *, llvm::Instruction *, _DWORD *, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v129, v187, v217, v218);
        if (v215)
        {
          unint64_t v142 = v214;
          size_t v143 = (char *)&v214[2 * v215];
          do
          {
            llvm::Instruction::setMetadata(v129, *(_DWORD *)v142, v142[1]);
            v142 += 2;
          }
          while (v142 != (llvm::MDNode **)v143);
        }
        llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v214, v175, v182);
        v187[0] = 0;
        __int16 v191 = 257;
        BOOL v130 = sub_1CC2411F8((uint64_t)&v214, (uint64_t)v126, (uint64_t)v129, v187, 1, (uint64_t)v190);
        v187[0] = 1;
        __int16 v191 = 257;
        uint64_t v131 = sub_1CC2411F8((uint64_t)&v214, (uint64_t)v130, v124, v187, 1, (uint64_t)v190);
      }
      else
      {
        if (v179 == v81) {
LABEL_168:
        }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        int v134 = *a2;
        if (!v186)
        {
          __int16 v188 = 257;
          uint64_t v141 = operator new(0x60uLL);
          v141[13] = v141[13] & 0x38000000 | 1;
          unint64_t v132 = (llvm::Instruction *)(v141 + 8);
          *(void *)uint64_t v141 = 0;
          *((void *)v141 + 1) = 0;
          *((void *)v141 + 2) = 0;
          *((void *)v141 + 3) = v141 + 8;
          __int16 v191 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v141 + 8), (uint64_t)v134, v174, v190, 0, Alignment, 0);
          (*(void (**)(void *, llvm::Instruction *, _DWORD *, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v132, v187, v217, v218);
          if (v215)
          {
            long long v148 = v214;
            int v149 = (char *)&v214[2 * v215];
            do
            {
              llvm::Instruction::setMetadata(v132, *(_DWORD *)v148, v148[1]);
              v148 += 2;
            }
            while (v148 != (llvm::MDNode **)v149);
          }
          llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v214, v173, v182);
          goto LABEL_167;
        }
        __int16 v191 = 257;
        uint64_t v131 = sub_1CC240E88((uint64_t)&v214, v124, (uint64_t)v134, (uint64_t)v190);
      }
      unint64_t v132 = v131;
LABEL_167:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v132, (llvm::Value *)1);
      goto LABEL_168;
    }
    unsigned int v88 = (llvm::IntegerType **)(v47 + 1576);
    unint64_t v89 = (llvm::Type *)*a6;
    __int16 v195 = 257;
    BOOL v90 = sub_1CB935044((uint64_t *)v199, v89, 0, (uint64_t)&v192);
    *((_WORD *)v90 + 9) = *((_WORD *)v90 + 9) & 0xFFC0 | Alignment;
    unint64_t v91 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v17 + 1912), 0);
    __int16 v191 = 257;
    unsigned int v83 = (unsigned __int8 *)v90;
    if (*(void *)v90 != v91)
    {
      if (*((unsigned __int8 *)v90 + 16) <= 0x14u)
      {
        unsigned int v83 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, unint64_t))*v220
                                  + 28))(v220, 49, v90, v91);
        if (v83) {
          BOOL v93 = v83[16] >= 0x1Cu;
        }
        else {
          BOOL v93 = 0;
        }
        if (!v93) {
          goto LABEL_112;
        }
        unsigned int v92 = (llvm::Instruction *)v83;
        (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v83, v190, v217, v218);
        if (v215)
        {
          unsigned int v169 = v214;
          unsigned int v170 = (char *)&v214[2 * v215];
          do
          {
            llvm::Instruction::setMetadata(v92, *(_DWORD *)v169, v169[1]);
            v169 += 2;
          }
          while (v169 != (llvm::MDNode **)v170);
        }
      }
      else
      {
        __int16 v195 = 257;
        unsigned int v92 = llvm::CastInst::Create(49, (uint64_t)v90, v91, (const char **)&v192, 0);
        (*(void (**)(void *))(*v221 + 16))(v221);
        if (v215)
        {
          uint64_t v152 = v214;
          uint64_t v153 = (char *)&v214[2 * v215];
          do
          {
            llvm::Instruction::setMetadata(v92, *(_DWORD *)v152, v152[1]);
            v152 += 2;
          }
          while (v152 != (llvm::MDNode **)v153);
        }
      }
      unsigned int v83 = (unsigned __int8 *)v92;
    }
LABEL_112:
    llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v214, (llvm::Value *)v83, v182);
    long long v94 = (char *)operator new(0x80uLL);
    *((_DWORD *)v94 + 21) = *((_DWORD *)v94 + 21) & 0x38000000 | 2;
    *(void *)long long v94 = 0;
    *((void *)v94 + 2) = 0;
    *((void *)v94 + 1) = 0;
    *((void *)v94 + 5) = 0;
    *((void *)v94 + 6) = 0;
    *((void *)v94 + 4) = 0;
    *((void *)v94 + 8) = **(void **)*a6 + 1576;
    unint64_t v95 = (llvm::Instruction *)(v94 + 64);
    *((void *)v94 + 3) = v94 + 64;
    *((void *)v94 + 7) = v94 + 64;
    *((void *)v94 + 9) = 0;
    v94[80] = 61;
    v94[81] = 0;
    *((_DWORD *)v94 + 21) = 2;
    *(_OWORD *)(v94 + 88) = 0u;
    *(_OWORD *)(v94 + 104) = 0u;
    *((_DWORD *)v94 + 30) = 0;
    BOOL v96 = a6 + 1;
    uint64_t v97 = a6[1];
    *(void *)long long v94 = a6;
    *((void *)v94 + 1) = v97;
    if (v97) {
      *(void *)(v97 + 16) = v94 + 8;
    }
    *((void *)v94 + 2) = v96;
    *BOOL v96 = v94;
    *((void *)v94 + 4) = v90;
    uint64_t v100 = *((void *)v90 + 1);
    unint64_t v99 = (void *)((char *)v90 + 8);
    uint64_t v98 = v100;
    *((void *)v94 + 5) = v100;
    if (v100) {
      *(void *)(v98 + 16) = v94 + 40;
    }
    *((void *)v94 + 6) = v99;
    void *v99 = v94 + 32;
    *((_WORD *)v94 + 41) = 2 * (Alignment & 0x3F);
    v94[124] = 1;
    __int16 v195 = 257;
    (*(void (**)(void *, llvm::Instruction *, void **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v95, &v192, v217, v218);
    if (v215)
    {
      uint64_t v154 = v214;
      unint64_t v155 = (char *)&v214[2 * v215];
      do
      {
        llvm::Instruction::setMetadata(v95, *(_DWORD *)v154, v154[1]);
        v154 += 2;
      }
      while (v154 != (llvm::MDNode **)v155);
    }
    if (v197 >= HIDWORD(v197)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v196 + v197) = v83;
    unsigned int v65 = v197 + 1;
    LODWORD(v197) = v197 + 1;
    uint64_t v81 = v88;
LABEL_119:
    if (a7) {
      BOOL v101 = 1;
    }
    else {
      BOOL v101 = v179 == v81;
    }
    char v102 = v186;
    if (v101) {
      char v102 = 1;
    }
    if (v102)
    {
      BOOL v85 = 0;
      uint64_t v84 = 0;
      goto LABEL_140;
    }
    unint64_t v103 = *a2;
    __int16 v195 = 257;
    uint64_t v104 = sub_1CB935044((uint64_t *)v199, v103, 0, (uint64_t)&v192);
    uint64_t v84 = (uint64_t)v104;
    *((_WORD *)v104 + 9) = *((_WORD *)v104 + 9) & 0xFFC0 | Alignment;
    unsigned int v105 = *(_DWORD *)(*(void *)v104 + 8);
    if ((v105 & 0xFE) == 0x12) {
      unsigned int v105 = *(_DWORD *)(**(void **)(*(void *)v104 + 16) + 8);
    }
    unint64_t v106 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v17 + 1912), (llvm::Type *)(v105 >> 8));
    __int16 v191 = 257;
    uint64_t v82 = (unsigned __int8 *)v84;
    if (*(void *)v84 == v106) {
      goto LABEL_137;
    }
    if (*(unsigned __int8 *)(v84 + 16) <= 0x14u)
    {
      uint64_t v82 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v220 + 28))(v220, 49, v84, v106);
      if (v82) {
        BOOL v111 = v82[16] >= 0x1Cu;
      }
      else {
        BOOL v111 = 0;
      }
      if (!v111) {
        goto LABEL_137;
      }
      uint64_t v107 = v68;
      uint64_t v108 = a7;
      __int16 v109 = v83;
      char v110 = v81;
      (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v82, v190, v217, v218);
      if (v215)
      {
        int v167 = v214;
        int v168 = (char *)&v214[2 * v215];
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v82, *(_DWORD *)v167, v167[1]);
          v167 += 2;
        }
        while (v167 != (llvm::MDNode **)v168);
      }
    }
    else
    {
      uint64_t v107 = v68;
      uint64_t v108 = a7;
      __int16 v109 = v83;
      char v110 = v81;
      __int16 v195 = 257;
      uint64_t v82 = (unsigned __int8 *)llvm::CastInst::Create(49, v84, v106, (const char **)&v192, 0);
      (*(void (**)(void *, unsigned __int8 *, const char **, llvm::UndefValue *, llvm::UndefValue **))(*v221 + 16))(v221, v82, v190, v217, v218);
      if (v215)
      {
        int v150 = v214;
        BOOL v151 = (char *)&v214[2 * v215];
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v82, *(_DWORD *)v150, v150[1]);
          v150 += 2;
        }
        while (v150 != (llvm::MDNode **)v151);
      }
    }
    uint64_t v81 = v110;
    unsigned int v83 = v109;
    a7 = v108;
    uint64_t v68 = v107;
LABEL_137:
    llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v214, (llvm::Value *)v82, v182);
    unsigned int v86 = v197;
    unsigned int v87 = HIDWORD(v197);
    BOOL v85 = v82;
    goto LABEL_138;
  }
LABEL_169:
  if (v199[0] != v200) {
    free(v199[0]);
  }
  if (v214 != (llvm::MDNode **)v216) {
    free(v214);
  }
  return 0;
}

llvm::Instruction *sub_1CC240E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2 == a3) {
    return (llvm::Instruction *)v4;
  }
  int v8 = *(_DWORD *)(v5 + 8);
  int v9 = v8;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(v5 + 16) + 8);
  }
  if (v9 != 15
    || ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
      ? (int v20 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8))
      : (int v20 = *(_DWORD *)(a3 + 8)),
        v20 != 13))
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
      int v8 = *(unsigned __int8 *)(**(void **)(v5 + 16) + 8);
    }
    if (v8 != 13
      || ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
        ? (int v10 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8))
        : (int v10 = *(_DWORD *)(a3 + 8)),
          v10 != 15))
    {
      if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
      {
        __int16 v25 = 257;
        uint64_t v4 = (unsigned __int8 *)llvm::CastInst::Create(49, a2, a3, v24, 0);
        (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v14 = *(unsigned int *)(a1 + 8);
        if (v14)
        {
          uint64_t v15 = *(void *)a1;
          uint64_t v16 = v15 + 16 * v14;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
            v15 += 16;
          }
          while (v15 != v16);
        }
        return (llvm::Instruction *)v4;
      }
      unsigned int v17 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 224);
      goto LABEL_22;
    }
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      unsigned int v17 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 224);
      goto LABEL_22;
    }
    __int16 v25 = 257;
    uint64_t v4 = (unsigned __int8 *)llvm::CastInst::Create(48, a2, a3, v24, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = v12 + 16 * v11;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
        v12 += 16;
      }
      while (v12 != v13);
    }
    return (llvm::Instruction *)v4;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v25 = 257;
    uint64_t v4 = (unsigned __int8 *)llvm::CastInst::Create(47, a2, a3, v24, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v21 = *(unsigned int *)(a1 + 8);
    if (v21)
    {
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = v22 + 16 * v21;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v22, *(llvm::MDNode **)(v22 + 8));
        v22 += 16;
      }
      while (v22 != v23);
    }
    return (llvm::Instruction *)v4;
  }
  unsigned int v17 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 224);
LABEL_22:
  uint64_t v4 = (unsigned __int8 *)v17();
  if (v4) {
    BOOL v18 = v4[16] >= 0x1Cu;
  }
  else {
    BOOL v18 = 0;
  }
  if (!v18) {
    return (llvm::Instruction *)v4;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v4, a4);
}

llvm::Instruction *sub_1CC2411F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    __int16 v18 = 257;
    uint64_t v12 = (char *)operator new(0xA0uLL);
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 8) = *(void *)a2;
    uint64_t v13 = (llvm::Instruction *)(v12 + 64);
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 3) = v12 + 64;
    *((void *)v12 + 4) = 0;
    *((void *)v12 + 5) = 0;
    *((void *)v12 + 6) = 0;
    *((void *)v12 + 7) = v12 + 64;
    *((void *)v12 + 9) = 0;
    *((void *)v12 + 10) = 0x20000005DLL;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *((_DWORD *)v12 + 30) = 0;
    *((void *)v12 + 16) = v12 + 144;
    *((void *)v12 + 17) = 0x400000000;
    llvm::InsertValueInst::init((llvm::Value *)(v12 + 64), a2, a3, a4, a5, &v17);
    return sub_1CB844E0C((uint64_t *)a1, v13, a6);
  }
  uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, void *, uint64_t))(**(void **)(a1 + 72)
                                                                                                + 352))(*(void *)(a1 + 72), a2, a3, a4, a5);
  if (v14) {
    BOOL v16 = v14[16] >= 0x1Cu;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16) {
    return (llvm::Instruction *)v14;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v14, a6);
}

llvm::Instruction *sub_1CC241384(uint64_t *a1, llvm::Type *a2, uint64_t a3, __int16 a4, __int16 a5, uint64_t a6)
{
  char Alignment = a4;
  if ((a4 & 0xFF00) == 0) {
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 272), a2, 1);
  }
  uint64_t v12 = operator new(0x60uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  uint64_t v13 = (llvm::Instruction *)(v12 + 8);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 8;
  __int16 v19 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v12 + 8), (uint64_t)a2, a3, &v18, a5, Alignment, 0);
  (*(void (**)(uint64_t, llvm::Instruction *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v13, a6, a1[6], a1[7]);
  uint64_t v14 = *((unsigned int *)a1 + 2);
  if (v14)
  {
    uint64_t v16 = *a1;
    uint64_t v17 = v16 + 16 * v14;
    do
    {
      llvm::Instruction::setMetadata(v13, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v13;
}

uint64_t sub_1CC2414B4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t ***a4, uint64_t *a5, unsigned __int8 a6, int a7, char a8, llvm::Instruction **a9, llvm::Instruction **a10)
{
  uint64_t v11 = *a1;
  uint64_t v12 = (uint64_t *)sub_1CD509648(a2, a3, a4, a5, a6 | 0x100u, a7, dword_1CFAC6D1C[a7 - 2], a8);
  unsigned int v16 = 1;
  v14[0] = "success";
  __int16 v15 = 259;
  *a9 = sub_1CC2415A4((uint64_t)a2, v12, &v16, 1, (uint64_t)v14);
  unsigned int v16 = 0;
  v14[0] = "newloaded";
  __int16 v15 = 259;
  *a10 = sub_1CC2415A4((uint64_t)a2, v12, &v16, 1, (uint64_t)v14);
  return sub_1CC23E3E8(v11, (uint64_t)v12);
}

llvm::Instruction *sub_1CC2415A4(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    __int16 v25 = 257;
    int v10 = (char *)operator new(0x80uLL);
    uint64_t v11 = (llvm::Instruction *)(v10 + 32);
    *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = v10 + 32;
    uint64_t v12 = *a2;
    if (!a4)
    {
      uint64_t v17 = *a2;
      goto LABEL_12;
    }
    uint64_t v13 = 4 * a4;
    uint64_t v14 = a3;
    while (1)
    {
      unint64_t v15 = *v14;
      int v16 = *(unsigned __int8 *)(v12 + 8);
      if (v12 && v16 == 17)
      {
        if (*(void *)(v12 + 32) <= v15) {
          goto LABEL_27;
        }
        __int16 v18 = (uint64_t *)(v12 + 24);
      }
      else
      {
        uint64_t v17 = 0;
        if (!v12 || v16 != 16) {
          goto LABEL_12;
        }
        if (v15 >= *(_DWORD *)(v12 + 12))
        {
LABEL_27:
          uint64_t v17 = 0;
LABEL_12:
          *((void *)v10 + 4) = v17;
          *((void *)v10 + 5) = 0;
          *((void *)v10 + 6) = 0x10000005CLL;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *((_DWORD *)v10 + 22) = 0;
          __int16 v19 = a2 + 1;
          uint64_t v20 = a2[1];
          *(void *)int v10 = a2;
          *((void *)v10 + 1) = v20;
          if (v20) {
            *(void *)(v20 + 16) = v10 + 8;
          }
          *((void *)v10 + 2) = v19;
          *__int16 v19 = v10;
          *((void *)v10 + 12) = v10 + 112;
          *((void *)v10 + 13) = 0x400000000;
          llvm::ExtractValueInst::init((llvm::Value *)(v10 + 32), a3, a4, &v24);
          return sub_1CB844E0C((uint64_t *)a1, v11, a5);
        }
        __int16 v18 = (uint64_t *)(*(void *)(v12 + 16) + 8 * v15);
      }
      uint64_t v12 = *v18;
      ++v14;
      uint64_t v17 = v12;
      v13 -= 4;
      if (!v13) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t *, unsigned int *, uint64_t))(**(void **)(a1 + 72)
                                                                                                 + 344))(*(void *)(a1 + 72), a2, a3, a4);
  if (v21) {
    BOOL v23 = v21[16] >= 0x1Cu;
  }
  else {
    BOOL v23 = 0;
  }
  if (!v23) {
    return (llvm::Instruction *)v21;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v21, a5);
}

uint64_t sub_1CC2417AC(uint64_t a1, llvm::EVT *this, uint64_t a3)
{
  v9[0] = sub_1CC235C30(a1, a3, this, 0);
  v9[1] = v4;
  int v5 = sub_1CB896FB8((unsigned __int8 *)v9);
  if (v6 == 1)
  {
    int v8 = v5;
    int v5 = v8;
  }
  return llvm::IntegerType::get(*(llvm::IntegerType **)this, (llvm::LLVMContext *)(8 * v5));
}

void sub_1CC241820(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = 0;
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a2;
  v14[0] = v15;
  v14[1] = (void *)0x200000000;
  v15[6] = v4;
  v15[7] = &v21;
  v15[8] = v22;
  v15[9] = 0;
  int v16 = 0;
  __int16 v17 = 512;
  char v18 = 7;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &unk_1F2616E88;
  v22[0] = &unk_1F2617008;
  int v5 = a2 + 3;
  unsigned int v7 = a2[5];
  uint64_t v6 = (unsigned __int8 *)a2[6];
  v15[4] = v7;
  void v15[5] = v5;
  uint64_t v12 = v6;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)&v12, v6, 2);
    uint64_t v3 = (uint64_t)v12;
  }
  sub_1CB8461A4((uint64_t)v14, 0, v3);
  if (!v12) {
LABEL_4:
  }
    sub_1CC241A50(a1, (uint64_t)v14);
  int v8 = *v12;
  if ((v8 - 4) > 0x1E)
  {
    if ((v8 - 3) >= 0xFFFFFFFE) {
      uint64_t v11 = v12;
    }
    else {
      uint64_t v11 = 0;
    }
    if ((v8 - 3) < 0xFFFFFFFE)
    {
      if (v8 == 3) {
        *((void *)v12 + 1) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v10 = (unint64_t)(v11 + 8);
  }
  else
  {
    if ((v12[1] & 0x7F) != 2 && !*((_DWORD *)v12 + 3)) {
      goto LABEL_4;
    }
    uint64_t v9 = *((void *)v12 + 2);
    if ((v9 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v10) {
      goto LABEL_4;
    }
  }
  uint64_t v13 = &v12;
  sub_1CC5FA668(v10 + 16, &v13);
  goto LABEL_4;
}

void sub_1CC241A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = "atomicrmw.end";
  __int16 v5 = 259;
  llvm::BasicBlock::splitBasicBlock(v2, v3, (uint64_t)&v4, 0);
}

uint64_t sub_1CC241E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *sub_1CC241E2C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::ConstantInt *a4, unsigned __int8 *a5, char a6, unsigned int a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v14 = (unsigned char *)(a3 + 272);
  unint64_t v15 = *(llvm::IntegerType **)a3;
  unint64_t v17 = sub_1CB83544C(a3 + 272, (uint64_t)a4) + 7;
  if (v16 == 1) {
  *(void *)(a1 + 8) = a4;
  }
  if (a7 <= (v17 >> 3))
  {
    *(void *)a1 = a4;
    goto LABEL_14;
  }
  unint64_t v59 = a7 - (v17 >> 3);
  uint64_t v60 = (llvm::Type *)(v17 >> 3);
  char v18 = (llvm::PointerType *)llvm::IntegerType::get(v15, (llvm::LLVMContext *)(8 * a7));
  *(void *)a1 = v18;
  if (v18 == a4)
  {
LABEL_14:
    *(void *)(a1 + 16) = a5;
    *(unsigned char *)(a1 + 24) = a6;
    *(void *)(a1 + 32) = llvm::ConstantInt::get(a4, 0, 0);
    uint64_t result = llvm::ConstantInt::get(a4, 0xFFFFFFFFFFFFFFFFLL, (const llvm::APInt *)1);
    *(void *)(a1 + 40) = result;
    return result;
  }
  uint64_t v19 = v18;
  unsigned int v20 = *(_DWORD *)(*(void *)a5 + 8);
  if ((v20 & 0xFE) == 0x12) {
    unsigned int v20 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
  }
  unint64_t v21 = llvm::PointerType::get(v18, (llvm::Type *)(v20 >> 8));
  uint64_t v22 = llvm::IntegerType::get(v15, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a3 + 504) + 4));
  __int16 v64 = 257;
  if (*(void *)a5 != v22)
  {
    if (a5[16] <= 0x14u)
    {
      a5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 47, a5, v22);
      if (a5) {
        BOOL v27 = a5[16] >= 0x1Cu;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), a5, v63, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v49 = *(unsigned int *)(a2 + 8);
        if (v49)
        {
          uint64_t v50 = *(void *)a2;
          uint64_t v51 = *(void *)a2 + 16 * v49;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a5, *(_DWORD *)v50, *(llvm::MDNode **)(v50 + 8));
            v50 += 16;
          }
          while (v50 != v51);
        }
      }
    }
    else
    {
      __int16 v66 = 257;
      a5 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)a5, v22, v65, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), a5, v63, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v23 = *(unsigned int *)(a2 + 8);
      if (v23)
      {
        uint64_t v24 = *(void *)a2;
        uint64_t v25 = *(void *)a2 + 16 * v23;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)a5, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
          v24 += 16;
        }
        while (v24 != v25);
      }
    }
  }
  __int16 v64 = 257;
  unint64_t v28 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a5, ~(unint64_t)(a7 - 1), 0);
  unint64_t v29 = sub_1CBF52474(a2, a5, (uint64_t)v28, (uint64_t)v63);
  unsigned int v30 = (unsigned __int8 *)v29;
  v61[0] = "AlignedAddr";
  __int16 v62 = 259;
  if (*(void *)v29 != v21)
  {
    if (*((unsigned __int8 *)v29 + 16) <= 0x14u)
    {
      unsigned int v30 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, unint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 48, v29, v21);
      if (v30) {
        BOOL v33 = v30[16] >= 0x1Cu;
      }
      else {
        BOOL v33 = 0;
      }
      if (v33)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v30, v61, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v52 = *(unsigned int *)(a2 + 8);
        if (v52)
        {
          uint64_t v53 = *(void *)a2;
          uint64_t v58 = *(void *)a2 + 16 * v52;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v30, *(_DWORD *)v53, *(llvm::MDNode **)(v53 + 8));
            v53 += 16;
          }
          while (v53 != v58);
        }
      }
    }
    else
    {
      __int16 v66 = 257;
      unsigned int v30 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v29, v21, v65, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v30, v61, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v31 = *(unsigned int *)(a2 + 8);
      if (v31)
      {
        uint64_t v32 = *(void *)a2;
        uint64_t v57 = *(void *)a2 + 16 * v31;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v30, *(_DWORD *)v32, *(llvm::MDNode **)(v32 + 8));
          v32 += 16;
        }
        while (v32 != v57);
      }
    }
  }
  *(void *)(a1 + 16) = v30;
  *(unsigned char *)(a1 + 24) = __clz(a7) ^ 0x3F;
  v65[0] = "PtrLSB";
  __int16 v66 = 259;
  unint64_t v34 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a5, a7 - 1, 0);
  __int16 v35 = (llvm::ConstantInt **)sub_1CBF52474(a2, a5, (uint64_t)v34, (uint64_t)v65);
  uint64_t v36 = v35;
  if (*v14)
  {
    __int16 v66 = 257;
    uint64_t v37 = llvm::ConstantInt::get(*v35, v59, 0);
    uint64_t v36 = (llvm::ConstantInt **)sub_1CC2428C0(a2, (uint64_t)v36, (uint64_t)v37, (uint64_t)v65);
    __int16 v64 = 257;
    unsigned int v38 = llvm::ConstantInt::get(*v36, 3uLL, 0);
    unint64_t v39 = (const char **)v63;
  }
  else
  {
    __int16 v66 = 257;
    unsigned int v38 = llvm::ConstantInt::get(*v35, 3uLL, 0);
    unint64_t v39 = v65;
  }
  uint64_t v40 = sub_1CC242524(a2, (uint64_t)v36, (uint64_t)v38, (uint64_t)v39, 0, 0);
  uint64_t v41 = (unsigned __int8 *)v40;
  v63[0] = "ShiftAmt";
  __int16 v64 = 259;
  if (*(llvm::ConstantInt **)v40 != v19)
  {
    if (*((unsigned __int8 *)v40 + 16) <= 0x14u)
    {
      uint64_t v41 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::ConstantInt *))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 38, v40, v19);
      if (v41) {
        BOOL v45 = v41[16] >= 0x1Cu;
      }
      else {
        BOOL v45 = 0;
      }
      if (v45)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v41, v63, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v54 = *(unsigned int *)(a2 + 8);
        if (v54)
        {
          uint64_t v55 = *(void *)a2;
          uint64_t v56 = *(void *)a2 + 16 * v54;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v41, *(_DWORD *)v55, *(llvm::MDNode **)(v55 + 8));
            v55 += 16;
          }
          while (v55 != v56);
        }
      }
    }
    else
    {
      __int16 v66 = 257;
      uint64_t v41 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v40, (uint64_t)v19, v65, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v41, v63, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v42 = *(unsigned int *)(a2 + 8);
      if (v42)
      {
        uint64_t v43 = *(void *)a2;
        uint64_t v44 = *(void *)a2 + 16 * v42;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v41, *(_DWORD *)v43, *(llvm::MDNode **)(v43 + 8));
          v43 += 16;
        }
        while (v43 != v44);
      }
    }
  }
  *(void *)(a1 + 32) = v41;
  uint64_t v46 = llvm::ConstantInt::get(v19, ~(-1 << (8 * (_BYTE)v60)), 0);
  v65[0] = "Mask";
  __int16 v66 = 259;
  uint64_t v47 = sub_1CC242524(a2, (uint64_t)v46, (uint64_t)v41, (uint64_t)v65, 0, 0);
  *(void *)(a1 + 40) = v47;
  v65[0] = "Inv_Mask";
  __int16 v66 = 259;
  uint64_t result = sub_1CC2427E8(a2, (uint64_t)v47, (uint64_t)v65, v48);
  *(void *)(a1 + 48) = result;
  return result;
}

llvm::Instruction *sub_1CC242524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 152))(*(void *)(a1 + 72), a2, a3, a5, a6);
    if (result) {
      BOOL v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      return sub_1CB844E0C((uint64_t *)a1, result, a4);
    }
  }
  else
  {
    return sub_1CB84604C((uint64_t *)a1, 25, (void *)a2, a3, a4, a5, a6);
  }
  return result;
}

unsigned __int8 *sub_1CC242614(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (unsigned __int8 *)a2;
  if (*a3 != a3[1])
  {
    uint64_t v6 = a3[4];
    v19[0] = "shifted";
    __int16 v20 = 259;
    unsigned int v7 = sub_1CC2429AC(a1, a2, v6, (uint64_t)v19, 0);
    uint64_t v3 = (unsigned __int8 *)v7;
    uint64_t v8 = a3[1];
    v17[0] = "extracted";
    __int16 v18 = 259;
    if (*(void *)v7 != v8)
    {
      if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
      {
        uint64_t v3 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 38, v7, v8);
        if (v3) {
          BOOL v12 = v3[16] >= 0x1Cu;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v3, v17, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v14 = *(unsigned int *)(a1 + 8);
          if (v14)
          {
            uint64_t v15 = *(void *)a1;
            uint64_t v16 = v15 + 16 * v14;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
              v15 += 16;
            }
            while (v15 != v16);
          }
        }
      }
      else
      {
        __int16 v20 = 257;
        uint64_t v3 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v7, v8, v19, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v3, v17, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v9 = *(unsigned int *)(a1 + 8);
        if (v9)
        {
          uint64_t v10 = *(void *)a1;
          uint64_t v11 = v10 + 16 * v9;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
            v10 += 16;
          }
          while (v10 != v11);
        }
      }
    }
  }
  return v3;
}

llvm::Instruction *sub_1CC2427E8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v11 = 257;
    Not = llvm::BinaryOperator::CreateNot((llvm::Constant **)a2, (llvm::Value *)v10, 0, a4);
    return sub_1CB844E0C((uint64_t *)a1, Not, a3);
  }
  unsigned int v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 208))(*(void *)(a1 + 72), a2);
  if (v7) {
    BOOL v9 = v7[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v7;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v7, a3);
}

llvm::Instruction *sub_1CC2428C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a3;
  }
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
LABEL_12:
    __int16 v18 = 257;
    __int16 v11 = llvm::BinaryOperator::Create(30, (void *)a2, a3, &v17, 0);
    return sub_1CB844E0C((uint64_t *)a1, v11, a4);
  }
  uint64_t v15 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 30);
  uint64_t v13 = v15;
  if (v15) {
    BOOL v16 = v15[16] >= 0x1Cu;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    BOOL v12 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v15, a4);
    if (v12) {
      return v12;
    }
    goto LABEL_12;
  }
  return (llvm::Instruction *)v13;
}

llvm::Instruction *sub_1CC2429AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    __int16 v14 = 257;
    if (a5)
    {
      BOOL v12 = llvm::BinaryOperator::Create(26, (void *)a2, a3, v13, 0);
      llvm::Instruction::setIsExact((uint64_t)v12, 1);
      uint64_t v8 = (uint64_t *)a1;
      unsigned int v7 = v12;
    }
    else
    {
      unsigned int v7 = llvm::BinaryOperator::Create(26, (void *)a2, a3, v13, 0);
      uint64_t v8 = (uint64_t *)a1;
    }
    return sub_1CB844E0C(v8, v7, a4);
  }
  uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 160))(*(void *)(a1 + 72));
  if (v9) {
    BOOL v11 = v9[16] >= 0x1Cu;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    return (llvm::Instruction *)v9;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v9, a4);
}

void sub_1CC242ACC(uint64_t a1, llvm::ValueAsMetadata *a2, int a3)
{
  uint64_t v6 = 0;
  v42[1] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  uint64_t v7 = **(void **)a2;
  BOOL v27 = &v29;
  uint64_t v28 = 0x200000000;
  uint64_t v32 = v7;
  BOOL v33 = &v41;
  unint64_t v34 = v42;
  uint64_t v35 = 0;
  int v36 = 0;
  __int16 v37 = 512;
  char v38 = 7;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = &unk_1F2616E88;
  v42[0] = &unk_1F2617008;
  uint64_t v8 = (void **)((char *)a2 + 24);
  BOOL v10 = (void *)*((void *)a2 + 5);
  uint64_t v9 = (char *)*((void *)a2 + 6);
  unsigned int v30 = v10;
  uint64_t v31 = v8;
  v25[0] = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)v25, (unsigned __int8 *)v9, 2);
    uint64_t v6 = v25[0];
  }
  sub_1CB8461A4((uint64_t)&v27, 0, (uint64_t)v6);
  if (!v25[0])
  {
LABEL_4:
    sub_1CC241E2C((uint64_t)v23, (uint64_t)&v27, *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40), *(llvm::ConstantInt **)a2, *((unsigned __int8 **)a2 - 8), *((unsigned char *)a2 + 19) & 0x3F, *(_DWORD *)(*(void *)(a1 + 32) + 80) >> 3);
    BOOL v11 = (unsigned __int8 *)*((void *)a2 - 4);
    __int16 v22 = 257;
    if (*(void *)v11 != v23[0])
    {
      if (v11[16] <= 0x14u)
      {
        uint64_t v14 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v33 + 28))(v33, 39, v11, v23[0]);
        BOOL v11 = (unsigned __int8 *)v14;
        if (v14)
        {
          if (*(unsigned __int8 *)(v14 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, void *, void *, void **))(*v34 + 16))(v34, v14, v21, v30, v31);
            if (v28)
            {
              uint64_t v19 = (llvm::MDNode **)v27;
              __int16 v20 = (llvm::MDNode **)((char *)v27 + 16 * v28);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v19, v19[1]);
                v19 += 2;
              }
              while (v19 != v20);
            }
          }
        }
      }
      else
      {
        __int16 v26 = 257;
        BOOL v11 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v11, v23[0], v25, 0);
        (*(void (**)(void *, unsigned __int8 *, void *, void *, void **))(*v34 + 16))(v34, v11, v21, v30, v31);
        if (v28)
        {
          BOOL v12 = (llvm::MDNode **)v27;
          uint64_t v13 = (llvm::MDNode **)((char *)v27 + 16 * v28);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v12, v12[1]);
            v12 += 2;
          }
          while (v12 != v13);
        }
      }
    }
    v25[0] = "ValOperand_Shifted";
    __int16 v26 = 259;
    v21[0] = sub_1CC242524((uint64_t)&v27, (uint64_t)v11, v23[4], (uint64_t)v25, 0, 0);
    v25[0] = (const char *)&v24;
    v25[1] = (const char *)v21;
    void v25[2] = (const char *)v23;
    if (a3 == 3) {
      sub_1CC2375C0((uint64_t)&v27);
    }
    sub_1CC241A50(a1, (uint64_t)&v27);
  }
  int v15 = *v25[0];
  if ((v15 - 4) > 0x1E)
  {
    if ((v15 - 3) >= 0xFFFFFFFE) {
      __int16 v18 = v25[0];
    }
    else {
      __int16 v18 = 0;
    }
    if ((v15 - 3) < 0xFFFFFFFE)
    {
      if (v15 == 3) {
        *((void *)v25[0] + 1) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v17 = (unint64_t)(v18 + 8);
  }
  else
  {
    if ((v25[0][1] & 0x7F) != 2 && !*((_DWORD *)v25[0] + 3)) {
      goto LABEL_4;
    }
    uint64_t v16 = *((void *)v25[0] + 2);
    if ((v16 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (!v17) {
      goto LABEL_4;
    }
  }
  v23[0] = (uint64_t)v25;
  sub_1CC5FA668(v17 + 16, v23);
  goto LABEL_4;
}

void sub_1CC242F4C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 a5, int a6, char a7, llvm::Instruction **a8, void *a9)
{
  BOOL v11 = a4;
  int v15 = a9;
  uint64_t v16 = *(llvm::Type **)a4;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)a4 + 8);
  if (v17 <= 6)
  {
    unint64_t PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v16);
    if (v18 == 1) {
    __int16 v20 = (llvm::PointerType *)llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 64), PrimitiveSizeInBits);
    }
    uint64_t v21 = (uint64_t)v20;
    unsigned int v22 = *(_DWORD *)(*(void *)a2 + 8);
    if ((v22 & 0xFE) == 0x12) {
      unsigned int v22 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
    }
    unint64_t v23 = llvm::PointerType::get(v20, (llvm::Type *)(v22 >> 8));
    __int16 v60 = 257;
    if (*(void *)a2 != v23)
    {
      if (a2[16] <= 0x14u)
      {
        a2 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, a2, v23);
        if (a2) {
          BOOL v26 = a2[16] >= 0x1Cu;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26)
        {
          (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80)
                                                                                            + 16))(*(void *)(a1 + 80), a2, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v41 = *(unsigned int *)(a1 + 8);
          if (v41)
          {
            uint64_t v42 = *(void *)a1;
            uint64_t v55 = *(void *)a1 + 16 * v41;
            do
            {
              uint64_t v52 = v42;
              llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
              uint64_t v42 = v52 + 16;
            }
            while (v52 + 16 != v55);
          }
        }
      }
      else
      {
        __int16 v62 = 257;
        a2 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a2, v23, v61, 0);
        (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), a2, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v24 = *(unsigned int *)(a1 + 8);
        if (v24)
        {
          uint64_t v25 = *(void *)a1;
          uint64_t v51 = *(void *)a1 + 16 * v24;
          do
          {
            uint64_t v53 = v25;
            llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
            uint64_t v25 = v53 + 16;
          }
          while (v53 + 16 != v51);
        }
      }
    }
    __int16 v60 = 257;
    if (*(void *)v11 != v21)
    {
      if (v11[16] <= 0x14u)
      {
        BOOL v11 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v11, v21);
        if (v11) {
          BOOL v29 = v11[16] >= 0x1Cu;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29)
        {
          (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80)
                                                                                            + 16))(*(void *)(a1 + 80), v11, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v43 = *(unsigned int *)(a1 + 8);
          if (v43)
          {
            uint64_t v44 = *(void *)a1;
            uint64_t v56 = *(void *)a1 + 16 * v43;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
              v44 += 16;
            }
            while (v44 != v56);
          }
        }
      }
      else
      {
        __int16 v62 = 257;
        BOOL v11 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v11, v21, v61, 0);
        (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v11, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v27 = *(unsigned int *)(a1 + 8);
        if (v27)
        {
          uint64_t v28 = *(void *)a1;
          uint64_t v54 = *(void *)a1 + 16 * v27;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v28, *(llvm::MDNode **)(v28 + 8));
            v28 += 16;
          }
          while (v28 != v54);
        }
      }
    }
    __int16 v60 = 257;
    if (*(void *)a3 != v21)
    {
      if (a3[16] <= 0x14u)
      {
        a3 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, a3, v21);
        if (a3) {
          BOOL v33 = a3[16] >= 0x1Cu;
        }
        else {
          BOOL v33 = 0;
        }
        if (v33)
        {
          (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80)
                                                                                            + 16))(*(void *)(a1 + 80), a3, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v45 = *(unsigned int *)(a1 + 8);
          if (v45)
          {
            uint64_t v46 = *(void *)a1;
            uint64_t v47 = *(void *)a1 + 16 * v45;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v46, *(llvm::MDNode **)(v46 + 8));
              v46 += 16;
            }
            while (v46 != v47);
          }
        }
      }
      else
      {
        __int16 v62 = 257;
        a3 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a3, v21, v61, 0);
        (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), a3, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v30 = *(unsigned int *)(a1 + 8);
        if (v30)
        {
          uint64_t v31 = *(void *)a1;
          uint64_t v32 = *(void *)a1 + 16 * v30;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
            v31 += 16;
          }
          while (v31 != v32);
        }
      }
    }
    int v15 = a9;
  }
  unint64_t v34 = (uint64_t *)sub_1CD509648((uint64_t *)a1, (uint64_t)a2, (uint64_t ***)a3, (uint64_t *)v11, a5 | 0x100u, a6, dword_1CFAC6D1C[a6 - 2], a7);
  v59[0] = 1;
  v61[0] = "success";
  __int16 v62 = 259;
  *a8 = sub_1CC2415A4(a1, v34, v59, 1, (uint64_t)v61);
  v59[0] = 0;
  v61[0] = "newloaded";
  __int16 v62 = 259;
  uint64_t v35 = sub_1CC2415A4(a1, v34, v59, 1, (uint64_t)v61);
  *int v15 = v35;
  if (v17 <= 6)
  {
    int v36 = (unsigned __int8 *)v35;
    __int16 v60 = 257;
    if (*(llvm::Type **)v35 != v16)
    {
      if (*((unsigned __int8 *)v35 + 16) <= 0x14u)
      {
        int v36 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::Type *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v35, v16);
        if (v36) {
          BOOL v40 = v36[16] >= 0x1Cu;
        }
        else {
          BOOL v40 = 0;
        }
        if (v40)
        {
          (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80)
                                                                                            + 16))(*(void *)(a1 + 80), v36, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v48 = *(unsigned int *)(a1 + 8);
          if (v48)
          {
            uint64_t v49 = *(void *)a1;
            uint64_t v50 = v49 + 16 * v48;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v36, *(_DWORD *)v49, *(llvm::MDNode **)(v49 + 8));
              v49 += 16;
            }
            while (v49 != v50);
          }
        }
      }
      else
      {
        __int16 v62 = 257;
        int v36 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v35, (uint64_t)v16, v61, 0);
        (*(void (**)(void, unsigned __int8 *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v36, v59, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v37 = *(unsigned int *)(a1 + 8);
        if (v37)
        {
          uint64_t v38 = *(void *)a1;
          uint64_t v39 = v38 + 16 * v37;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v36, *(_DWORD *)v38, *(llvm::MDNode **)(v38 + 8));
            v38 += 16;
          }
          while (v38 != v39);
        }
      }
    }
    *int v15 = v36;
  }
}

llvm::Instruction *sub_1CC243664(uint64_t **a1, llvm::IRBuilderBase *a2, llvm::Value *a3)
{
  uint64_t v3 = **a1;
  int v4 = *(_WORD *)(v3 + 18) >> 4;
  __int16 v5 = (llvm::Instruction *)*a1[1];
  uint64_t v6 = a1[2];
  if (((1 << v4) & 0x780) != 0)
  {
    uint64_t v9 = *(void *)(v3 - 32);
    BOOL v10 = sub_1CC242614((uint64_t)a2, (uint64_t)a3, v6);
    BOOL v11 = llvm::buildAtomicRMWValue(v4, a2, (llvm::Value *)v10, v9);
    return sub_1CC2437C0((uint64_t)a2, a3, (uint64_t)v11, v6);
  }
  else
  {
    if (((1 << v4) & 0x16) != 0)
    {
      uint64_t v13 = llvm::buildAtomicRMWValue(v4, a2, a3, (uint64_t)v5);
      uint64_t v14 = v6[5];
      __int16 v19 = 257;
      __int16 v5 = sub_1CBF52474((uint64_t)a2, v13, v14, (uint64_t)v18);
      uint64_t v15 = v6[6];
      __int16 v19 = 257;
      uint64_t v16 = sub_1CBF52474((uint64_t)a2, a3, v15, (uint64_t)v18);
    }
    else
    {
      uint64_t v17 = v6[6];
      __int16 v19 = 257;
      uint64_t v16 = sub_1CBF52474((uint64_t)a2, a3, v17, (uint64_t)v18);
    }
    __int16 v19 = 257;
    return sub_1CB844AF4((uint64_t)a2, v16, (uint64_t)v5, (uint64_t)v18);
  }
}

llvm::Instruction *sub_1CC2437C0(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  int v4 = (unsigned __int8 *)a3;
  uint64_t v5 = *a4;
  if (*a4 != a4[1])
  {
    v21[0] = "extended";
    __int16 v22 = 259;
    if (*(void *)a3 != v5)
    {
      if (*(unsigned __int8 *)(a3 + 16) <= 0x14u)
      {
        int v4 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72)
                                                                                             + 224))(*(void *)(a1 + 72), 39, a3, v5);
        if (v4) {
          BOOL v12 = v4[16] >= 0x1Cu;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v21, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v18 = *(unsigned int *)(a1 + 8);
          if (v18)
          {
            uint64_t v19 = *(void *)a1;
            uint64_t v20 = *(void *)a1 + 16 * v18;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
              v19 += 16;
            }
            while (v19 != v20);
          }
        }
      }
      else
      {
        __int16 v24 = 257;
        int v4 = (unsigned __int8 *)llvm::CastInst::Create(39, a3, v5, v23, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v21, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v9 = *(unsigned int *)(a1 + 8);
        if (v9)
        {
          uint64_t v10 = *(void *)a1;
          uint64_t v11 = *(void *)a1 + 16 * v9;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
            v10 += 16;
          }
          while (v10 != v11);
        }
      }
    }
    uint64_t v13 = a4[4];
    v23[0] = "shifted";
    __int16 v24 = 259;
    uint64_t v14 = sub_1CC242524(a1, (uint64_t)v4, v13, (uint64_t)v23, 1, 0);
    uint64_t v15 = a4[6];
    v23[0] = "unmasked";
    __int16 v24 = 259;
    uint64_t v16 = sub_1CBF52474(a1, a2, v15, (uint64_t)v23);
    v23[0] = "inserted";
    __int16 v24 = 259;
    return sub_1CB844AF4(a1, v16, (uint64_t)v14, (uint64_t)v23);
  }
  return (llvm::Instruction *)v4;
}

llvm::Value *sub_1CC2439F8(uint64_t a1, llvm::IRBuilderBase *a2, llvm::Value *a3)
{
  return llvm::buildAtomicRMWValue(*(_WORD *)(**(void **)a1 + 18) >> 4, a2, a3, *(void *)(**(void **)a1 - 32));
}

uint64_t sub_1CC243A10(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = 0;
  uint64_t v8 = **a2;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = a1 + 120;
  *(void *)(a1 + 80) = a1 + 128;
  *(void *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(unsigned char *)(a1 + 102) = 7;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 120) = &unk_1F2616E88;
  *(void *)(a1 + 128) = &unk_1F2617008;
  *(void *)(a1 + 48) = a2[5];
  *(void *)(a1 + 56) = a2 + 3;
  uint64_t v9 = (unsigned __int8 *)a2[6];
  uint64_t v15 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v15, v9, 2);
    uint64_t v7 = (uint64_t)v15;
  }
  sub_1CB8461A4(a1, 0, v7);
  if (v15)
  {
    int v11 = *v15;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v15;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v11 - 3) < 0xFFFFFFFE)
      {
        if (v11 == 3) {
          *((void *)v15 + 1) = 0;
        }
        return a1;
      }
      unint64_t v13 = (unint64_t)(v14 + 8);
    }
    else
    {
      if ((v15[1] & 0x7F) != 2 && !*((_DWORD *)v15 + 3)) {
        return a1;
      }
      uint64_t v12 = *((void *)v15 + 2);
      if ((v12 & 4) == 0) {
        return a1;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        return a1;
      }
    }
    uint64_t v16 = &v15;
    sub_1CC5FA668(v13 + 16, &v16);
  }
  return a1;
}

llvm::Value *sub_1CC243B7C(uint64_t a1, llvm::IRBuilderBase *a2, llvm::Value *a3)
{
  return llvm::buildAtomicRMWValue(*(_WORD *)(**(void **)a1 + 18) >> 4, a2, a3, *(void *)(**(void **)a1 - 32));
}

void *llvm::BasicTTIImpl::BasicTTIImpl(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 40) + 272;
  *a1 = &unk_1F2609628;
  a1[1] = v4;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a3);
  a1[2] = v5;
  a1[3] = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
  return a1;
}

uint64_t sub_1CC243C34()
{
  int v3 = 0;
  uint64_t v4 = &v3;
  *(void *)&long long v2 = "Threshold for partial unrolling";
  *((void *)&v2 + 1) = 31;
  int v1 = 1;
  sub_1CD509B88(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &llvm::PartialUnrollingThreshold, &dword_1CB82C000);
}

void *sub_1CC243CA8(void *a1)
{
  *a1 = &unk_1F2609740;
  long long v2 = a1 + 20;
  int v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

void sub_1CC243D5C()
{
}

void sub_1CC243DF8(void *a1, int a2, unsigned int a3, uint64_t a4, llvm::MachineBasicBlock *a5)
{
  a1[13] = a1[12];
  uint64_t v5 = (_DWORD *)(a1[1] - 16);
  unint64_t v119 = (_DWORD *)*a1;
  if (v5 != (_DWORD *)*a1)
  {
    int v6 = a2;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
    uint64_t v124 = 0;
    uint64_t v9 = 0;
    char v110 = a1 + 9;
    uint64_t v114 = a1[1] - 16;
    do
    {
      if (*v5 != v6) {
        return;
      }
      uint64_t v10 = v5;
      BOOL v111 = v5 - 4;
      int v11 = v5 - 4;
      uint64_t v12 = v8;
      uint64_t v118 = v5;
      if (*(v5 - 4) != v6) {
        goto LABEL_201;
      }
      do
      {
        unint64_t v122 = (unint64_t)v9;
        uint64_t v13 = *((void *)v10 + 1);
        uint64_t v14 = *((void *)v11 + 1);
        int v120 = *((unsigned __int8 *)v7 + 120);
        unsigned int v121 = v8;
        uint64_t v15 = (llvm::MBFIWrapper *)v7[28];
        uint64_t v16 = v7[30];
        if (*((_DWORD *)v7 + 20))
        {
          uint64_t v125 = v13;
          uint64_t v126 = 0;
          if (sub_1CD3C8538(v110, &v125, &v126)) {
            uint64_t v50 = v126;
          }
          else {
            uint64_t v50 = v7[9] + 16 * *((unsigned int *)v7 + 22);
          }
          uint64_t v125 = v14;
          uint64_t v126 = 0;
          int v51 = sub_1CD3C8538(v110, &v125, &v126);
          uint64_t v52 = v126;
          if (!v51) {
            uint64_t v52 = v7[9] + 16 * *((unsigned int *)v7 + 22);
          }
          if (*(_DWORD *)(v50 + 8) != *(_DWORD *)(v52 + 8))
          {
            uint64_t v12 = v121;
            uint64_t v10 = v118;
            uint64_t v9 = (void *)v122;
            int v6 = a2;
            goto LABEL_74;
          }
        }
        uint64_t v116 = v16;
        int v123 = v11;
        uint64_t v17 = v13 + 48;
        uint64_t v18 = (llvm::MachineBasicBlock *)v13;
        unint64_t v19 = sub_1CC2484C8(v13 + 48, v13);
        uint64_t v20 = (llvm::MachineBasicBlock *)v14;
        unint64_t v21 = sub_1CC2484C8(v14 + 48, v14);
        if (v17 == v19 || v14 + 48 == v21)
        {
          uint64_t v12 = v121;
          uint64_t v10 = v118;
          uint64_t v9 = (void *)v122;
          goto LABEL_12;
        }
        unint64_t v23 = v21;
        __int16 v24 = (void *)v17;
        uint64_t v25 = (void *)(v14 + 48);
        unsigned int v112 = v15;
        if (!llvm::MachineInstr::isIdenticalTo(v19, v21, 0))
        {
          unint64_t v31 = v122;
          unint64_t v30 = (unint64_t)v124;
          goto LABEL_72;
        }
        uint64_t v27 = 0;
        unint64_t v28 = v122;
        BOOL v29 = v24;
        while (1)
        {
          uint64_t v12 = v27;
          if (**(unsigned __int16 **)(v19 + 16) - 1 < 2
            || (unint64_t v30 = v19, *(__int16 *)(v19 + 44) < 0)
            || (unint64_t v31 = v23, *(__int16 *)(v23 + 44) < 0))
          {
            unint64_t v31 = v28;
            unint64_t v30 = (unint64_t)v124;
            if (v27) {
              goto LABEL_24;
            }
LABEL_72:
            uint64_t v124 = (void *)v30;
            uint64_t v9 = (void *)v31;
            uint64_t v12 = v121;
            int v6 = a2;
            uint64_t v7 = a1;
            uint64_t v10 = v118;
            goto LABEL_73;
          }
          uint64_t v27 = (v27 + 1);
          unint64_t v19 = sub_1CC2484C8(v19, (uint64_t)v18);
          unint64_t v32 = sub_1CC2484C8(v23, (uint64_t)v20);
          if (v29 == (void *)v19) {
            break;
          }
          unint64_t v23 = v32;
          if (v25 == (void *)v32) {
            break;
          }
          BOOL isIdenticalTo = llvm::MachineInstr::isIdenticalTo(v19, v32, 0);
          unint64_t v28 = v31;
          uint64_t v124 = (void *)v30;
          if (!isIdenticalTo)
          {
            uint64_t v12 = (v12 + 1);
            if (v12) {
              goto LABEL_24;
            }
            goto LABEL_72;
          }
        }
        uint64_t v12 = (v12 + 1);
        if (!v27) {
          goto LABEL_72;
        }
LABEL_24:
        unint64_t v34 = (void *)*((void *)v18 + 7);
        uint64_t v35 = v29;
        if (v34 != v29)
        {
          uint64_t v35 = (void *)*((void *)v18 + 7);
          do
          {
            if (*(unsigned __int16 *)v35[2] - 13 > 4) {
              goto LABEL_32;
            }
            if ((*(unsigned char *)v35 & 4) == 0)
            {
              while ((*((_WORD *)v35 + 22) & 8) != 0)
                uint64_t v35 = (void *)v35[1];
            }
            uint64_t v35 = (void *)v35[1];
          }
          while (v35 != v29);
          uint64_t v35 = v29;
        }
LABEL_32:
        if (v35 == (void *)v30) {
          unint64_t v36 = *((void *)v18 + 7);
        }
        else {
          unint64_t v36 = v30;
        }
        uint64_t v124 = (void *)v36;
        uint64_t v37 = (void *)*((void *)v20 + 7);
        uint64_t v38 = v25;
        if (v37 != v25)
        {
          uint64_t v38 = (void *)*((void *)v20 + 7);
          do
          {
            if (*(unsigned __int16 *)v38[2] - 13 > 4) {
              goto LABEL_43;
            }
            if ((*(unsigned char *)v38 & 4) == 0)
            {
              while ((*((_WORD *)v38 + 22) & 8) != 0)
                uint64_t v38 = (void *)v38[1];
            }
            uint64_t v38 = (void *)v38[1];
          }
          while (v38 != v25);
          uint64_t v38 = v25;
        }
LABEL_43:
        if (v38 == (void *)v31) {
          uint64_t v9 = (void *)*((void *)v20 + 7);
        }
        else {
          uint64_t v9 = (void *)v31;
        }
        if (v18 != a5 && v20 != a5 || v120 && ((*((void *)v18 + 12) - *((void *)v18 + 11)) & 0x7FFFFFFF8) != 8) {
          goto LABEL_88;
        }
        if (v18 == a5) {
          uint64_t v39 = v20;
        }
        else {
          uint64_t v39 = v18;
        }
        unint64_t v40 = (unint64_t)v39 + 48;
        uint64_t v41 = (llvm::MachineBasicBlock *)*((void *)v39 + 7);
        if ((llvm::MachineBasicBlock *)((char *)v39 + 48) == v41)
        {
          unsigned int v42 = 0;
          goto LABEL_87;
        }
        unsigned int v42 = 0;
        while (2)
        {
          unint64_t v40 = *(void *)v40 & 0xFFFFFFFFFFFFFFF8;
          if (v40 && (*(unsigned char *)v40 & 4) != 0)
          {
            __int16 v43 = *(_WORD *)(v40 + 44);
          }
          else
          {
            while (1)
            {
              __int16 v43 = *(_WORD *)(v40 + 44);
              if ((v43 & 4) == 0) {
                break;
              }
              unint64_t v40 = *(void *)v40 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          int v44 = v43 & 0xC;
          int v45 = v43 & 4;
          uint64_t v46 = *(void *)(*(void *)(v40 + 16) + 8);
          if (v44) {
            BOOL v47 = v45 == 0;
          }
          else {
            BOOL v47 = 0;
          }
          if (!v47)
          {
            if ((v46 & 0x200) == 0) {
              goto LABEL_87;
            }
LABEL_65:
            ++v42;
            if ((llvm::MachineBasicBlock *)v40 == v41) {
              goto LABEL_87;
            }
            continue;
          }
          break;
        }
        unint64_t v48 = v40;
        if ((v46 & 0x200) != 0) {
          goto LABEL_65;
        }
        while ((*(_WORD *)(v48 + 44) & 8) != 0)
        {
          unint64_t v48 = *(void *)(v48 + 8);
          if ((*(unsigned char *)(*(void *)(v48 + 16) + 9) & 2) != 0) {
            goto LABEL_65;
          }
        }
LABEL_87:
        if (v12 > v42)
        {
LABEL_151:
          uint64_t v83 = v121;
          uint64_t v7 = a1;
          uint64_t v10 = v118;
          if (v12 <= v121) {
            goto LABEL_164;
          }
          uint64_t v84 = (void *)a1[12];
          a1[13] = v84;
          unint64_t v85 = a1[14];
          if ((unint64_t)v84 < v85)
          {
            *uint64_t v84 = v118;
            v84[1] = v124;
            unsigned int v86 = v84 + 2;
            goto LABEL_163;
          }
          uint64_t v87 = v85 - (void)v84;
          uint64_t v88 = v87 >> 3;
          if ((unint64_t)(v87 >> 3) <= 1) {
            uint64_t v88 = 1;
          }
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v88;
          }
          if (!(v89 >> 60))
          {
            BOOL v90 = v9;
            unint64_t v91 = operator new(16 * v89);
            *unint64_t v91 = v118;
            v91[1] = v124;
            unsigned int v86 = v91 + 2;
            a1[12] = v91;
            a1[13] = v91 + 2;
            a1[14] = &v91[2 * v89];
            if (v84) {
              operator delete(v84);
            }
            uint64_t v9 = v90;
LABEL_163:
            a1[13] = v86;
            uint64_t v114 = (uint64_t)v118;
            uint64_t v83 = v12;
LABEL_164:
            int v6 = a2;
            int v11 = v123;
            if ((_DWORD *)v114 != v118 || v12 != v83)
            {
              uint64_t v12 = v83;
              goto LABEL_74;
            }
            BOOL v93 = (char *)a1[13];
            unint64_t v92 = a1[14];
            if ((unint64_t)v93 < v92)
            {
              *(void *)BOOL v93 = v123;
              *((void *)v93 + 1) = v9;
              long long v94 = v93 + 16;
LABEL_187:
              v7[13] = v94;
              uint64_t v114 = (uint64_t)v118;
              goto LABEL_74;
            }
            unint64_t v95 = (char *)a1[12];
            uint64_t v96 = (v93 - v95) >> 4;
            unint64_t v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 60) {
              abort();
            }
            uint64_t v98 = v92 - (void)v95;
            if (v98 >> 3 > v97) {
              unint64_t v97 = v98 >> 3;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v99 = v97;
            }
            if (!v99)
            {
              BOOL v101 = 0;
              goto LABEL_179;
            }
            if (!(v99 >> 60))
            {
              uint64_t v100 = v9;
              BOOL v101 = (char *)operator new(16 * v99);
              uint64_t v9 = v100;
LABEL_179:
              char v102 = &v101[16 * v96];
              *(void *)char v102 = v123;
              *((void *)v102 + 1) = v9;
              unint64_t v103 = v102;
              if (v93 == v95)
              {
                uint64_t v7 = a1;
              }
              else
              {
                uint64_t v7 = a1;
                do
                {
                  *((_OWORD *)v103 - 1) = *((_OWORD *)v93 - 1);
                  v103 -= 16;
                  v93 -= 16;
                }
                while (v93 != v95);
                BOOL v93 = (char *)a1[12];
              }
              long long v94 = v102 + 16;
              v7[12] = v103;
              v7[13] = v102 + 16;
              v7[14] = &v101[16 * v99];
              if (v93)
              {
                uint64_t v104 = v93;
                unsigned int v105 = v9;
                operator delete(v104);
                uint64_t v9 = v105;
              }
              int v11 = v123;
              goto LABEL_187;
            }
          }
          sub_1CB833614();
        }
LABEL_88:
        BOOL v53 = v9 != v37;
        if (v124 == v34 && v9 == v37)
        {
          uint64_t v54 = v9;
          int v55 = sub_1CC2483B8(v18);
          uint64_t v9 = v54;
          if (v55)
          {
            char v56 = sub_1CC2483B8(v20);
            uint64_t v9 = v54;
            if (v56) {
              goto LABEL_151;
            }
          }
        }
        BOOL v57 = *((llvm::MachineBasicBlock **)v18 + 1) == v20 && v9 == v37;
        if (v57 || v124 == v34 && *((llvm::MachineBasicBlock **)v20 + 1) == v18) {
          goto LABEL_151;
        }
        BOOL v58 = !v120 || v124 != v34;
        if (!v58 && !v53)
        {
          if (*((void *)v18 + 11) != *((void *)v18 + 12))
          {
            uint64_t v77 = v9;
            uint64_t FallThrough = llvm::MachineBasicBlock::getFallThrough(v18);
            uint64_t v9 = v77;
            if (!FallThrough) {
              goto LABEL_151;
            }
          }
          if (*(llvm::MachineBasicBlock **)(*((void *)v18 + 4) + 328) == v18) {
            goto LABEL_151;
          }
          __int16 v79 = v9;
          uint64_t v80 = llvm::MachineBasicBlock::getFallThrough(*(llvm::MachineBasicBlock **)v18);
          uint64_t v9 = v79;
          if (!v80) {
            goto LABEL_151;
          }
          if (*((void *)v20 + 11) != *((void *)v20 + 12))
          {
            uint64_t v81 = llvm::MachineBasicBlock::getFallThrough(v20);
            uint64_t v9 = v79;
            if (!v81) {
              goto LABEL_151;
            }
          }
          if (*(llvm::MachineBasicBlock **)(*((void *)v20 + 4) + 328) == v20) {
            goto LABEL_151;
          }
          uint64_t v82 = llvm::MachineBasicBlock::getFallThrough(*(llvm::MachineBasicBlock **)v20);
          uint64_t v9 = v79;
          if (!v82) {
            goto LABEL_151;
          }
        }
        unsigned int v59 = v12;
        if (a4)
        {
          unsigned int v59 = v12;
          if (v18 != a5)
          {
            unsigned int v59 = v12;
            if (v20 != a5)
            {
              if (!v120 || (unsigned int v59 = v12, ((*((void *)v18 + 12) - *((void *)v18 + 11)) & 0x7FFFFFFF8) == 8))
              {
                unint64_t v60 = *v29 & 0xFFFFFFFFFFFFFFF8;
                if (v60 && (*(unsigned char *)v60 & 4) != 0)
                {
                  __int16 v61 = *(_WORD *)(v60 + 44);
                }
                else
                {
                  while (1)
                  {
                    __int16 v61 = *(_WORD *)(v60 + 44);
                    if ((v61 & 4) == 0) {
                      break;
                    }
                    unint64_t v60 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                int v62 = v61 & 0xC;
                int v63 = v61 & 4;
                uint64_t v64 = *(void *)(*(void *)(v60 + 16) + 8);
                unsigned int v59 = v12;
                if (v62) {
                  BOOL v65 = v63 == 0;
                }
                else {
                  BOOL v65 = 0;
                }
                if (v65)
                {
                  if ((v64 & 0x100) == 0)
                  {
                    while ((*(_WORD *)(v60 + 44) & 8) != 0)
                    {
                      unint64_t v60 = *(void *)(v60 + 8);
                      if (*(unsigned char *)(*(void *)(v60 + 16) + 9))
                      {
                        unsigned int v59 = v12;
                        goto LABEL_128;
                      }
                    }
LABEL_117:
                    unint64_t v66 = *v25 & 0xFFFFFFFFFFFFFFF8;
                    if (v66 && (*(unsigned char *)v66 & 4) != 0)
                    {
                      __int16 v67 = *(_WORD *)(v66 + 44);
                    }
                    else
                    {
                      while (1)
                      {
                        __int16 v67 = *(_WORD *)(v66 + 44);
                        if ((v67 & 4) == 0) {
                          break;
                        }
                        unint64_t v66 = *(void *)v66 & 0xFFFFFFFFFFFFFFF8;
                      }
                    }
                    int v68 = v67 & 0xC;
                    int v69 = v67 & 4;
                    unint64_t v70 = *(void *)(*(void *)(v66 + 16) + 8);
                    if (v68) {
                      BOOL v71 = v69 == 0;
                    }
                    else {
                      BOOL v71 = 0;
                    }
                    if (v71)
                    {
                      if ((v70 & 0x100) != 0)
                      {
                        LODWORD(v72) = 1;
                      }
                      else
                      {
                        do
                        {
                          unsigned int v107 = *(unsigned __int16 *)(v66 + 44);
                          LODWORD(v72) = (v107 >> 3) & 1;
                          if ((v107 & 8) == 0) {
                            break;
                          }
                          unint64_t v66 = *(void *)(v66 + 8);
                        }
                        while ((*(unsigned char *)(*(void *)(v66 + 16) + 9) & 1) == 0);
                      }
                    }
                    else
                    {
                      uint64_t v72 = (v70 >> 8) & 1;
                    }
                    unsigned int v59 = v12 + (v72 ^ 1);
                  }
                }
                else if ((v64 & 0x100) == 0)
                {
                  goto LABEL_117;
                }
              }
            }
          }
        }
LABEL_128:
        if (v59 >= a3) {
          goto LABEL_151;
        }
        uint64_t v73 = *(void *)(**((void **)v18 + 4) + 112);
        if (v73 && ((*(unsigned char *)(v73 + 17) & 4) != 0 || *(char *)(v73 + 13) < 0))
        {
          BOOL shouldOptimizeForSize = 1;
          uint64_t v10 = v118;
          goto LABEL_133;
        }
        unint64_t v106 = v9;
        if (!llvm::shouldOptimizeForSize(v18, v116, v112))
        {
          uint64_t v12 = v121;
          uint64_t v7 = a1;
          uint64_t v10 = v118;
          uint64_t v9 = v106;
          goto LABEL_12;
        }
        BOOL shouldOptimizeForSize = llvm::shouldOptimizeForSize(v20, v116, v112);
        uint64_t v10 = v118;
        uint64_t v9 = v106;
LABEL_133:
        int v6 = a2;
        int v11 = v123;
        BOOL v76 = v124 == v34 || v9 == v37;
        if (v59 >= 2 && shouldOptimizeForSize)
        {
          if (v76) {
            goto LABEL_151;
          }
          uint64_t v12 = v121;
          uint64_t v7 = a1;
          uint64_t v10 = v118;
LABEL_12:
          int v6 = a2;
LABEL_73:
          int v11 = v123;
        }
        else
        {
          uint64_t v12 = v121;
          uint64_t v7 = a1;
        }
LABEL_74:
        if (v11 == v119) {
          break;
        }
        int v49 = *(v11 - 4);
        v11 -= 4;
        LODWORD(v8) = v12;
      }
      while (v49 == v6);
LABEL_201:
      uint64_t v8 = v12;
      uint64_t v5 = v111;
    }
    while (v111 != v119);
  }
}

void sub_1CC244744(llvm::MachineBasicBlock *a1, uint64_t a2, uint64_t a3)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  llvm::MachineBasicBlock::findBranchDebugLoc(a1, &v13);
  if (v7 == v6 + 320
    || ((*(uint64_t (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, void **, uint64_t))(*(void *)a3 + 248))(a3, a1, &v15, &v14, &v16, 1) & 1) != 0|| v15 != v7|| !v17|| v14|| ((*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 728))(a3, &v16) & 1) != 0)
  {
    v12[0] = &v13;
    v12[1] = 0;
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, void, unsigned __int8 **, void, unsigned __int8 **, void))(*(void *)a3 + 272))(a3, a1, a2, 0, &v13, 0, &v13, 0);
  }
  else
  {
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, void))(*(void *)a3 + 264))(a3, a1, 0);
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, void, void *, void, unsigned __int8 **, void))(*(void *)a3 + 272))(a3, a1, a2, 0, v16, v17, &v13, 0);
  }
  if (v13)
  {
    int v8 = *v13;
    if ((v8 - 4) > 0x1E)
    {
      if ((v8 - 3) >= 0xFFFFFFFE) {
        uint64_t v9 = v13;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v8 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_21:
        v12[0] = &v13;
        sub_1CC5FA668(v10 + 16, v12);
        goto LABEL_13;
      }
      if (v8 == 3) {
        *((void *)v13 + 1) = 0;
      }
    }
    else if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
    {
      uint64_t v11 = *((void *)v13 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_13:
  if (v16 != v18) {
    free(v16);
  }
}

BOOL sub_1CC244A18(uint64_t a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v7 = 0;
  *a4 = 0;
  uint64_t v8 = *(void *)(a1 + 96);
  unint64_t v9 = *(void *)(a1 + 104) - v8;
  if ((v9 & 0xFFFFFFFF0) != 0)
  {
    unsigned int v7 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = *a2;
    uint64_t v12 = (v9 >> 4);
    unsigned int v13 = -1;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(v8 + 16 * v10) + 8);
      if (v14 == v11)
      {
        *a4 = v10;
        unsigned int v7 = v10;
        break;
      }
      uint64_t v15 = *(void *)(v14 + 56);
      uint64_t v16 = *(void *)(v8 + 16 * v10 + 8);
      if (v15 == v16)
      {
        unsigned int v17 = 0;
LABEL_47:
        *a4 = v10;
        unsigned int v7 = v10;
        unsigned int v13 = v17;
        goto LABEL_48;
      }
      unsigned int v17 = 0;
      do
      {
        uint64_t v18 = *(unsigned __int16 **)(v15 + 16);
        int v19 = *v18;
        BOOL v20 = (v19 - 13) < 5 || v19 == 3;
        if (!v20)
        {
          unsigned int v21 = *(unsigned __int16 *)(v15 + 44);
          BOOL v20 = (v21 & 0xC) == 0;
          int v22 = (v21 >> 2) & 1;
          if (v20) {
            LOBYTE(v22) = 1;
          }
          uint64_t v23 = *((void *)v18 + 1);
          if (v22)
          {
            if ((v23 & 0x80) != 0) {
              goto LABEL_31;
            }
          }
          else
          {
            uint64_t v25 = v15;
            if ((v23 & 0x80) != 0)
            {
LABEL_31:
              v17 += 10;
              goto LABEL_11;
            }
            while ((*(_WORD *)(v25 + 44) & 8) != 0)
            {
              uint64_t v25 = *(void *)(v25 + 8);
              if ((*(unsigned char *)(*(void *)(v25 + 16) + 8) & 0x80) != 0) {
                goto LABEL_31;
              }
            }
          }
          unsigned int v24 = v19 - 1;
          if (v24 <= 1 && (*(unsigned char *)(*(void *)(v15 + 32) + 48) & 8) != 0) {
            goto LABEL_43;
          }
          if (v22)
          {
            if ((v23 & 0x80000) == 0)
            {
LABEL_24:
              if (v24 > 1 || (*(unsigned char *)(*(void *)(v15 + 32) + 48) & 0x10) == 0)
              {
                if (v22)
                {
                  if ((v23 & 0x100000) == 0) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  uint64_t v27 = v15;
                  if ((v23 & 0x100000) == 0)
                  {
                    while ((*(_WORD *)(v27 + 44) & 8) != 0)
                    {
                      uint64_t v27 = *(void *)(v27 + 8);
                      if ((*(unsigned char *)(*(void *)(v27 + 16) + 10) & 0x10) != 0) {
                        goto LABEL_43;
                      }
                    }
LABEL_27:
                    ++v17;
                    goto LABEL_11;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v26 = v15;
            if ((v23 & 0x80000) == 0)
            {
              while ((*(_WORD *)(v26 + 44) & 8) != 0)
              {
                uint64_t v26 = *(void *)(v26 + 8);
                if ((*(unsigned char *)(*(void *)(v26 + 16) + 10) & 8) != 0) {
                  goto LABEL_43;
                }
              }
              goto LABEL_24;
            }
          }
LABEL_43:
          v17 += 2;
        }
LABEL_11:
        if ((*(unsigned char *)v15 & 4) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
            uint64_t v15 = *(void *)(v15 + 8);
        }
        uint64_t v15 = *(void *)(v15 + 8);
      }
      while (v15 != v16);
      if (v17 <= v13) {
        goto LABEL_47;
      }
LABEL_48:
      ++v10;
    }
    while (v10 != v12);
  }
  unint64_t v30 = (void *)(v8 + 16 * v7);
  uint64_t v29 = *v30;
  unint64_t v28 = (unint64_t *)v30[1];
  uint64_t v31 = *(void *)(*v30 + 8);
  if (!a3 || ((*(void *)(v31 + 96) - *(void *)(v31 + 88)) & 0x7FFFFFFF8) != 8) {
    a3 = *(void *)(v29 + 8);
  }
  unint64_t v32 = sub_1CD50AB00(a1, v31, v28, *(const llvm::BasicBlock **)(a3 + 16));
  if (v32)
  {
    BOOL v33 = (void *)(*(void *)(a1 + 96) + 16 * *a4);
    *(void *)(*v33 + 8) = v32;
    v33[1] = *(void *)(v32 + 56);
    if (*a2 == v31) {
      *a2 = v32;
    }
  }
  return v32 != 0;
}

uint64_t sub_1CC244C64(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (a1 + 48 != v1)
  {
    unint64_t v2 = a1 + 48;
    while (1)
    {
      unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
      if (**(unsigned __int16 **)(v2 + 16) - 13 >= 5 && (*(_WORD *)(v2 + 44) & 4) == 0) {
        break;
      }
      if (v1 == v2) {
        return 0;
      }
    }
    unint64_t v1 = v2;
  }
  if (a1 + 48 == v1) {
    return 0;
  }
  uint64_t result = **(unsigned __int16 **)(v1 + 16);
  uint64_t v4 = *(unsigned int *)(v1 + 40);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v1 + 32) + 16;
    do
    {
      int v7 = 0;
      switch(*(unsigned char *)(v6 - 16))
      {
        case 0:
        case 9:
        case 0xA:
          int v7 = *(_DWORD *)(v6 - 12);
          break;
        case 1:
        case 5:
        case 6:
        case 8:
          int v7 = *(_DWORD *)v6;
          break;
        case 4:
          int v7 = *(_DWORD *)(*(void *)v6 + 24);
          break;
        default:
          break;
      }
      uint64_t result = ((*(unsigned __int8 *)(v6 - 16) | (8 * v7)) << v5++) + result;
      v6 += 32;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_1CC244D70(uint64_t a1, uint64_t *a2)
{
  int v194 = 0;
  v214[16] = *MEMORY[0x1E4F143B8];
  __int16 v188 = (uint64_t *)(a1 + 72);
  uint64_t v193 = (llvm::MachineBasicBlock **)a2[4];
  uint64_t v5 = v193 + 40;
  uint64_t v6 = (unint64_t *)(a2 + 6);
  unint64_t v192 = v193 + 40;
  do
  {
    int v7 = (llvm::MachineBasicBlock **)a2[1];
    if (*(_DWORD *)(a1 + 80)) {
      BOOL v8 = v7 == v5;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      BOOL v9 = 1;
    }
    else
    {
      __src = a2;
      unsigned int v212 = 0;
      char v48 = sub_1CD3C8538(v188, &__src, &v212);
      if (v48) {
        int v49 = v212;
      }
      else {
        int v49 = (_DWORD *)(*(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88));
      }
      __src = v7;
      unsigned int v212 = 0;
      if (sub_1CD3C8538(v188, &__src, &v212)) {
        unint64_t v89 = v212;
      }
      else {
        unint64_t v89 = (_DWORD *)(*(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88));
      }
      BOOL v9 = v49[2] == v89[2];
    }
    uint64_t v203 = 0;
    __int16 v204 = 0;
    unsigned int v212 = v214;
    uint64_t v213 = 0x400000000;
    char v196 = (*(uint64_t (**)(void, uint64_t *, llvm::MachineBasicBlock **, uint64_t **, void **, uint64_t))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128), a2, &v204, &v203, &v212, 1);
    uint64_t v10 = a2[7];
    __int16 v195 = (llvm::MachineBasicBlock *)v7;
    if ((unint64_t *)v10 != v6)
    {
      while (1)
      {
        int v11 = **(unsigned __int16 **)(v10 + 16);
        if ((v11 - 13) >= 5 && v11 != 23) {
          break;
        }
        if ((*(unsigned char *)v10 & 4) == 0)
        {
          while ((*(_WORD *)(v10 + 44) & 8) != 0)
            uint64_t v10 = *(void *)(v10 + 8);
        }
        uint64_t v10 = *(void *)(v10 + 8);
        if ((unint64_t *)v10 == v6) {
          goto LABEL_19;
        }
      }
      if (v6 != (unint64_t *)v10)
      {
LABEL_59:
        uint64_t v32 = *a2;
        BOOL v201 = 0;
        int v202 = 0;
        __src = v211;
        uint64_t v210 = 0x400000000;
        char v33 = (*(uint64_t (**)(void, uint64_t, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, uint64_t))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128), v32, &v202, &v201, &__src, 1);
        if (v33) {
          goto LABEL_60;
        }
        if (v202 && v202 == v201)
        {
          sub_1CC246B88(&v205, (llvm::MachineBasicBlock *)v32);
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v32, 0);
          LODWORD(v210) = 0;
          if (v202 != (llvm::MachineBasicBlock *)a2) {
            (*(void (**)(void, uint64_t, llvm::MachineBasicBlock *, void, void *, void, unsigned __int8 **, void))(**(void **)(a1 + 128) + 272))(*(void *)(a1 + 128), v32, v202, 0, __src, 0, &v205, 0);
          }
LABEL_212:
          if (v205)
          {
            int v86 = *v205;
            if ((v86 - 4) > 0x1E)
            {
              if ((v86 - 3) >= 0xFFFFFFFE) {
                uint64_t v87 = v205;
              }
              else {
                uint64_t v87 = 0;
              }
              if ((v86 - 3) < 0xFFFFFFFE)
              {
                if (v86 == 3) {
                  *((void *)v205 + 1) = 0;
                }
                goto LABEL_216;
              }
              unint64_t v88 = (unint64_t)(v87 + 8);
            }
            else
            {
              if ((v205[1] & 0x7F) != 2 && !*((_DWORD *)v205 + 3)) {
                goto LABEL_216;
              }
              uint64_t v181 = *((void *)v205 + 2);
              if ((v181 & 4) == 0) {
                goto LABEL_216;
              }
              unint64_t v88 = v181 & 0xFFFFFFFFFFFFFFF8;
              if (!v88) {
                goto LABEL_216;
              }
            }
            uint64_t v206 = &v205;
            sub_1CC5FA668(v88 + 16, &v206);
          }
LABEL_216:
          int v194 = 1;
          int v31 = 2;
          goto LABEL_410;
        }
        int v36 = v210;
        if (!v202
          && !v210
          && ((a2[9] - a2[8]) & 0x7FFFFFFF8) == 8
          && ((*(void *)(v32 + 96) - *(void *)(v32 + 88)) & 0x7FFFFFFF8) == 8
          && !*((unsigned char *)a2 + 185)
          && !*((unsigned char *)a2 + 184))
        {
          BOOL v111 = (unint64_t *)(v32 + 48);
          unint64_t v112 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFF8;
          if (v32 + 48 != v112)
          {
            if (!v112 || (*(unsigned char *)v112 & 4) == 0)
            {
              while ((*(_WORD *)(v112 + 44) & 4) != 0)
                unint64_t v112 = *(void *)v112 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v113 = a2[7];
            if (v112 != *(void *)(v32 + 56) && v113 != (void)v6)
            {
              do
              {
                if (**(unsigned __int16 **)(v112 + 16) - 13 > 4
                  || **(unsigned __int16 **)(v113 + 16) - 13 > 4
                  || !llvm::MachineInstr::isIdenticalTo(v113, v112, 0))
                {
                  break;
                }
                uint64_t v123 = v113;
                if ((*(unsigned char *)v113 & 4) == 0)
                {
                  uint64_t v123 = v113;
                  if ((*(_WORD *)(v113 + 44) & 8) != 0)
                  {
                    uint64_t v123 = v113;
                    do
                      uint64_t v123 = *(void *)(v123 + 8);
                    while ((*(_WORD *)(v123 + 44) & 8) != 0);
                  }
                }
                unint64_t v112 = *(void *)v112 & 0xFFFFFFFFFFFFFFF8;
                if (!v112 || (*(unsigned char *)v112 & 4) == 0)
                {
                  while ((*(_WORD *)(v112 + 44) & 4) != 0)
                    unint64_t v112 = *(void *)v112 & 0xFFFFFFFFFFFFFFF8;
                }
                uint64_t v124 = *(unint64_t **)(v123 + 8);
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v113);
                BOOL v125 = v112 == *(void *)(v32 + 56) || v124 == v6;
                uint64_t v113 = (uint64_t)v124;
              }
              while (!v125);
            }
          }
          uint64_t v115 = (unint64_t *)a2[7];
          if (v115 != v6 && v32 != (void)a2)
          {
            unint64_t v117 = *(void *)(v32 + 40);
            uint64_t v118 = (unint64_t *)a2[7];
            do
            {
              v118[3] = v117;
              uint64_t v118 = (unint64_t *)v118[1];
            }
            while (v118 != v6);
            unint64_t v119 = *v6;
            unint64_t v120 = *v6 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v121 = *v115 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v121 + 8) = v6;
            *uint64_t v6 = v121 | v119 & 7;
            unint64_t v122 = *v111 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v120 + 8) = v111;
            *uint64_t v115 = v122 | *v115 & 7;
            *(void *)(v122 + 8) = v115;
            unint64_t *v111 = v119 & 0xFFFFFFFFFFFFFFF8 | *v111 & 7;
          }
          llvm::MachineBasicBlock::removeSuccessor(v32, *(char **)(v32 + 88), 0);
          llvm::MachineBasicBlock::transferSuccessors((char *)v32, (llvm::MachineBasicBlock *)a2);
          int v31 = 1;
          int v194 = 1;
          int v2 = 1;
          goto LABEL_410;
        }
        if (v202 == (llvm::MachineBasicBlock *)a2 && !v201)
        {
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v32, 0);
          goto LABEL_216;
        }
        if (v201 == (llvm::MachineBasicBlock *)a2)
        {
          sub_1CC246B88(&v205, (llvm::MachineBasicBlock *)v32);
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v32, 0);
          (*(void (**)(void))(**(void **)(a1 + 128) + 272))();
          goto LABEL_212;
        }
        if (v202 != (llvm::MachineBasicBlock *)a2)
        {
LABEL_251:
          if (a2[11] != a2[12]
            || !v210
            || v201
            || v202 != v195
            || llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)a2))
          {
            goto LABEL_60;
          }
          if (v195 == *v5)
          {
            uint64_t v100 = v202;
            uint64_t LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v202, 1);
            uint64_t v102 = llvm::MachineBasicBlock::getLastNonDebugInstr((llvm::MachineBasicBlock *)a2, 1);
            if ((llvm::MachineBasicBlock *)((char *)v100 + 48) == (llvm::MachineBasicBlock *)LastNonDebugInstr
              || v6 == (unint64_t *)v102)
            {
              goto LABEL_60;
            }
            unint64_t v103 = (uint64_t **)*((void *)v100 + 11);
            uint64_t v104 = (uint64_t **)*((void *)v100 + 12);
            if (v103 != v104)
            {
              while (*v103 != a2)
              {
                if (++v103 == v104)
                {
                  unint64_t v103 = (uint64_t **)*((void *)v100 + 12);
                  break;
                }
              }
            }
            if (v103 == v104)
            {
              unsigned int v105 = (llvm::MachineBasicBlock **)a2[11];
              unint64_t v106 = (llvm::MachineBasicBlock **)a2[12];
              if (v105 != v106)
              {
                while (*v105 != v100)
                {
                  if (++v105 == v106)
                  {
                    unsigned int v105 = (llvm::MachineBasicBlock **)a2[12];
                    break;
                  }
                }
              }
              if (v105 != v106) {
                goto LABEL_60;
              }
              uint64_t v107 = *(void *)(*(void *)(v102 + 16) + 8);
              if ((*(_WORD *)(v102 + 44) & 0xC) != 0 && (*(_WORD *)(v102 + 44) & 4) == 0)
              {
                while ((v107 & 0x80) == 0)
                {
                  if ((*(_WORD *)(v102 + 44) & 8) == 0) {
                    goto LABEL_60;
                  }
                  uint64_t v102 = *(void *)(v102 + 8);
                  LOBYTE(v107) = *(unsigned char *)(*(void *)(v102 + 16) + 8);
                }
              }
              else if ((v107 & 0x80) == 0)
              {
                goto LABEL_60;
              }
              uint64_t v109 = *(void *)(*(void *)(LastNonDebugInstr + 16) + 8);
              if ((*(_WORD *)(LastNonDebugInstr + 44) & 0xC) != 0 && (*(_WORD *)(LastNonDebugInstr + 44) & 4) == 0)
              {
                if ((v109 & 0x80) != 0) {
                  goto LABEL_60;
                }
                while ((*(_WORD *)(LastNonDebugInstr + 44) & 8) != 0)
                {
                  uint64_t LastNonDebugInstr = *(void *)(LastNonDebugInstr + 8);
                  if ((*(unsigned char *)(*(void *)(LastNonDebugInstr + 16) + 8) & 0x80) != 0) {
                    goto LABEL_60;
                  }
                }
              }
              else if ((v109 & 0x80) != 0)
              {
                goto LABEL_60;
              }
            }
          }
          uint64_t v206 = v208;
          uint64_t v207 = 0x400000000;
          int v94 = v210;
          if (v210)
          {
            if (v210 >= 5uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v208, __src, 32 * v210);
            LODWORD(v207) = v94;
          }
          int v95 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 128) + 728))(*(void *)(a1 + 128), &v206);
          if (v95)
          {
LABEL_261:
            if (v206 != v208) {
              free(v206);
            }
            if (!v95) {
              goto LABEL_416;
            }
LABEL_60:
            uint64_t v34 = *((void *)*v193 + 14);
            BOOL v35 = v34 && ((*(unsigned char *)(v34 + 17) & 4) != 0 || *(char *)(v34 + 13) < 0)
               || llvm::shouldOptimizeForSize((llvm::MachineBasicBlock *)a2, *(void *)(a1 + 240), *(llvm::MBFIWrapper **)(a1 + 224));
            uint64_t v37 = a2[7];
            if ((unint64_t *)v37 != v6)
            {
              uint64_t v38 = a2[7];
              while (1)
              {
                int v39 = **(unsigned __int16 **)(v38 + 16);
                if ((v39 - 13) >= 5 && v39 != 23) {
                  break;
                }
                if ((*(unsigned char *)v38 & 4) == 0)
                {
                  while ((*(_WORD *)(v38 + 44) & 8) != 0)
                    uint64_t v38 = *(void *)(v38 + 8);
                }
                uint64_t v38 = *(void *)(v38 + 8);
                if ((unint64_t *)v38 == v6) {
                  goto LABEL_89;
                }
              }
              if (v6 != (unint64_t *)v38 && ((a2[9] - a2[8]) & 0x7FFFFFFF8) == 8 && v35)
              {
                uint64_t v81 = v6;
                if ((unint64_t *)v37 != v6)
                {
                  do
                  {
                    int v82 = **(unsigned __int16 **)(v37 + 16);
                    if ((v82 - 13) >= 5 && v82 != 23)
                    {
                      uint64_t v81 = (unint64_t *)v37;
                      goto LABEL_200;
                    }
                    if ((*(unsigned char *)v37 & 4) == 0)
                    {
                      while ((*(_WORD *)(v37 + 44) & 8) != 0)
                        uint64_t v37 = *(void *)(v37 + 8);
                    }
                    uint64_t v37 = *(void *)(v37 + 8);
                  }
                  while ((unint64_t *)v37 != v6);
                  uint64_t v81 = v6;
                }
LABEL_200:
                if ((*(unsigned int (**)(void, unint64_t *))(**(void **)(a1 + 128) + 784))(*(void *)(a1 + 128), v81))
                {
                  uint64_t v84 = *(llvm::MachineBasicBlock **)a2[8];
                  unsigned int v200 = 0;
                  BOOL v205 = 0;
                  uint64_t v206 = v208;
                  uint64_t v207 = 0x400000000;
                  int v85 = 1;
                  uint64_t v190 = v84;
                  if (((*(uint64_t (**)(void))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128)) & 1) == 0
                    && v207
                    && v205 == (unsigned __int8 *)a2
                    && v205 != v200
                    && (*(unsigned int (**)(void, void **, unint64_t *))(**(void **)(a1 + 128)
                                                                                           + 792))(*(void *)(a1 + 128), &v206, v81))
                  {
                    (*(void (**)(void, llvm::MachineBasicBlock *, void **, unint64_t *))(**(void **)(a1 + 128) + 800))(*(void *)(a1 + 128), v190, &v206, v81);
                    llvm::MachineBasicBlock::removeSuccessor(v190, (llvm::MachineBasicBlock *)a2, 0);
                    int v85 = 0;
                    int v194 = 1;
                    int v2 = 1;
                  }
                  if (v206 != v208) {
                    free(v206);
                  }
                  if (!v85) {
                    goto LABEL_416;
                  }
                }
              }
            }
LABEL_89:
            if (v196) {
              goto LABEL_350;
            }
            uint64_t v41 = v204;
            if (v204 == (llvm::MachineBasicBlock *)a2 || v204 == 0 || v203 == 0 || v203 != a2)
            {
LABEL_124:
              if (!v41 || v213 || v203) {
                goto LABEL_350;
              }
              int v51 = v6;
              if ((unint64_t *)a2[7] != v6)
              {
                int v51 = (unint64_t *)a2[7];
                while (1)
                {
                  int v52 = *(unsigned __int16 *)v51[2];
                  if ((v52 - 13) >= 5 && v52 != 23) {
                    break;
                  }
                  if ((*(unsigned char *)v51 & 4) == 0)
                  {
                    while ((*((_WORD *)v51 + 22) & 8) != 0)
                      int v51 = (unint64_t *)v51[1];
                  }
                  int v51 = (unint64_t *)v51[1];
                  if (v51 == v6)
                  {
                    int v51 = v6;
                    break;
                  }
                }
              }
              unint64_t v54 = *(void *)(v51[2] + 8);
              if ((*((_WORD *)v51 + 22) & 0xC) != 0 && (*((_WORD *)v51 + 22) & 4) == 0)
              {
                if ((v54 & 0x400) == 0)
                {
                  while ((*((_WORD *)v51 + 22) & 8) != 0)
                  {
                    int v51 = (unint64_t *)v51[1];
                    if ((*(unsigned char *)(v51[2] + 9) & 4) != 0) {
                      goto LABEL_144;
                    }
                  }
                  goto LABEL_350;
                }
              }
              else if (((v54 >> 10) & 1) == 0)
              {
                goto LABEL_350;
              }
LABEL_144:
              if (v41 != (llvm::MachineBasicBlock *)a2 && !*((unsigned char *)a2 + 185) && !*((unsigned char *)a2 + 184))
              {
                sub_1CC246B88(&v200, (llvm::MachineBasicBlock *)a2);
                (*(void (**)(void, uint64_t *, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), a2, 0);
                uint64_t v56 = a2[7];
                if ((unint64_t *)v56 != v6)
                {
                  uint64_t v57 = a2[7];
                  while (1)
                  {
                    int v58 = **(unsigned __int16 **)(v57 + 16);
                    if ((v58 - 13) >= 5 && v58 != 23) {
                      break;
                    }
                    if ((*(unsigned char *)v57 & 4) == 0)
                    {
                      while ((*(_WORD *)(v57 + 44) & 8) != 0)
                        uint64_t v57 = *(void *)(v57 + 8);
                    }
                    uint64_t v57 = *(void *)(v57 + 8);
                    if ((unint64_t *)v57 == v6) {
                      goto LABEL_158;
                    }
                  }
                  if ((unint64_t *)v56 == v6 || v6 != (unint64_t *)v57) {
                    goto LABEL_343;
                  }
LABEL_158:
                  int v189 = v2;
                  do
                  {
                    unint64_t v60 = *(unint64_t **)(v56 + 8);
                    uint64_t v61 = *(void *)(*(void *)(v56 + 24) + 32);
                    if (v61)
                    {
                      uint64_t v62 = *(void *)(v61 + 728);
                      if (v62) {
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 32))(v62, v56);
                      }
                      uint64_t v63 = *(unsigned int *)(v56 + 40);
                      if (v63)
                      {
                        uint64_t v64 = *(void *)(v56 + 32);
                        uint64_t v65 = *(void *)(v61 + 40);
                        uint64_t v66 = 32 * v63;
                        do
                        {
                          if (!*(unsigned char *)v64)
                          {
                            uint64_t v67 = *(unsigned int *)(v64 + 4);
                            if ((v67 & 0x80000000) != 0) {
                              int v68 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
                            }
                            else {
                              int v68 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v67);
                            }
                            uint64_t v69 = *v68;
                            uint64_t v71 = *(void *)(v64 + 16);
                            uint64_t v70 = *(void *)(v64 + 24);
                            if (v64 != *v68) {
                              int v68 = (uint64_t *)(v71 + 24);
                            }
                            *int v68 = v70;
                            if (v70) {
                              uint64_t v72 = v70;
                            }
                            else {
                              uint64_t v72 = v69;
                            }
                            *(void *)(v72 + 16) = v71;
                            *(void *)(v64 + 16) = 0;
                            *(void *)(v64 + 24) = 0;
                          }
                          v64 += 32;
                          v66 -= 32;
                        }
                        while (v66);
                      }
                    }
                    *(void *)(v56 + 24) = 0;
                    uint64_t v73 = *(unint64_t **)(v56 + 8);
                    unint64_t v74 = *(void *)v56 & 0xFFFFFFFFFFFFFFF8;
                    *uint64_t v73 = v74 | *v73 & 7;
                    *(void *)(v74 + 8) = v73;
                    *(void *)v56 &= 7uLL;
                    *(void *)(v56 + 8) = 0;
                    uint64_t v75 = *(void *)(a2[5] + 32);
                    BOOL v76 = *(void **)(v56 + 32);
                    if (v76)
                    {
                      uint64_t v77 = *(unsigned __int8 *)(v56 + 47);
                      uint64_t v78 = (uint64_t *)(v75 + 232);
                      if (*(_DWORD *)(v75 + 240) <= v77)
                      {
                        sub_1CC34BDE0(v75 + 232, v77 + 1);
                        uint64_t v78 = (uint64_t *)(v75 + 232);
                      }
                      uint64_t v79 = *v78;
                      *BOOL v76 = *(void *)(*v78 + 8 * v77);
                      *(void *)(v79 + 8 * v77) = v76;
                    }
                    *(void *)uint64_t v56 = *(void *)(v75 + 224);
                    *(void *)(v75 + 224) = v56;
                    uint64_t v56 = (uint64_t)v60;
                    uint64_t v5 = v193 + 40;
                    int v2 = v189;
                  }
                  while (v60 != v6);
                }
LABEL_343:
                if (v6 != (unint64_t *)(*v6 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_344;
                }
                uint64_t FallThrough = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v32);
                char v154 = v33 ^ 1;
                if (!FallThrough) {
                  char v154 = 1;
                }
                if ((v154 & 1) == 0)
                {
                  unint64_t v155 = *(uint64_t ***)(v32 + 88);
                  unsigned __int8 v156 = *(uint64_t ***)(v32 + 96);
                  if (v155 != v156)
                  {
                    while (*v155 != a2)
                    {
                      if (++v155 == v156)
                      {
                        unint64_t v155 = *(uint64_t ***)(v32 + 96);
                        break;
                      }
                    }
                  }
                  if (v155 != v156) {
                    goto LABEL_344;
                  }
                }
                if (FallThrough)
                {
                  BOOL v157 = *(uint64_t ***)(v32 + 88);
                  unint64_t v158 = *(uint64_t ***)(v32 + 96);
                  if (v157 != v158)
                  {
                    while (*v157 != a2)
                    {
                      if (++v157 == v158)
                      {
                        BOOL v157 = *(uint64_t ***)(v32 + 96);
                        break;
                      }
                    }
                  }
                  if (v157 != v158 && v202 != (llvm::MachineBasicBlock *)a2 && v201 != (llvm::MachineBasicBlock *)a2)
                  {
                    if (v202) {
                      BOOL v201 = (llvm::MachineBasicBlock *)a2;
                    }
                    else {
                      int v202 = (llvm::MachineBasicBlock *)a2;
                    }
                    sub_1CC246B88(&v205, (llvm::MachineBasicBlock *)v32);
                    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v32, 0);
                    (*(void (**)(void))(**(void **)(a1 + 128) + 272))();
                    if (v205)
                    {
                      int v163 = *v205;
                      if ((v163 - 4) > 0x1E)
                      {
                        if ((v163 - 3) >= 0xFFFFFFFE) {
                          uint64_t v179 = v205;
                        }
                        else {
                          uint64_t v179 = 0;
                        }
                        if ((v163 - 3) < 0xFFFFFFFE)
                        {
                          if (v163 == 3) {
                            *((void *)v205 + 1) = 0;
                          }
                          goto LABEL_467;
                        }
                        unint64_t v180 = (unint64_t)(v179 + 8);
                      }
                      else
                      {
                        if ((v205[1] & 0x7F) != 2 && !*((_DWORD *)v205 + 3)) {
                          goto LABEL_467;
                        }
                        uint64_t v186 = *((void *)v205 + 2);
                        if ((v186 & 4) == 0) {
                          goto LABEL_467;
                        }
                        unint64_t v180 = v186 & 0xFFFFFFFFFFFFFFF8;
                        if (!v180) {
                          goto LABEL_467;
                        }
                      }
                      uint64_t v206 = &v205;
                      sub_1CC5FA668(v180 + 16, &v206);
                    }
                  }
                }
LABEL_467:
                uint64_t v165 = a2[8];
                uint64_t v164 = a2[9];
                if (((v164 - v165) & 0x7FFFFFFF8) != 0)
                {
                  char v166 = 0;
                  int v167 = 0;
                  uint64_t v168 = 0;
                  while (1)
                  {
                    unsigned int v169 = *(llvm::MachineBasicBlock **)(v165 + 8 * v168);
                    if (v169 != (llvm::MachineBasicBlock *)a2) {
                      break;
                    }
                    ++v168;
                    char v166 = 1;
LABEL_471:
                    if (v168 == ((unint64_t)(v164 - v165) >> 3)) {
                      goto LABEL_501;
                    }
                  }
                  llvm::MachineBasicBlock::ReplaceUsesOfBlockWith(*(llvm::MachineBasicBlock **)(v165 + 8 * v168), (llvm::MachineBasicBlock *)a2, v204);
                  uint64_t v198 = 0;
                  int v199 = 0;
                  uint64_t v206 = v208;
                  uint64_t v207 = 0x400000000;
                  if ((*(unsigned int (**)(void, llvm::MachineBasicBlock *, uint64_t **, uint64_t **, void **, uint64_t))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128), v169, &v199, &v198, &v206, 1))
                  {
                    BOOL v170 = 1;
                  }
                  else
                  {
                    BOOL v170 = v199 == 0;
                  }
                  if (v170 || v199 != v198)
                  {
LABEL_486:
                    if (v206 != v208) {
                      free(v206);
                    }
                    uint64_t v165 = a2[8];
                    uint64_t v164 = a2[9];
                    int v167 = 1;
                    goto LABEL_471;
                  }
                  sub_1CC246B88(&v197, v169);
                  (*(void (**)(void, llvm::MachineBasicBlock *, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v169, 0);
                  LODWORD(v207) = 0;
                  (*(void (**)(void))(**(void **)(a1 + 128) + 272))();
                  if (v197)
                  {
                    int v172 = *v197;
                    if ((v172 - 4) > 0x1E)
                    {
                      if ((v172 - 3) >= 0xFFFFFFFE) {
                        uint64_t v173 = v197;
                      }
                      else {
                        uint64_t v173 = 0;
                      }
                      if ((v172 - 3) < 0xFFFFFFFE)
                      {
                        if (v172 == 3) {
                          *((void *)v197 + 1) = 0;
                        }
                        goto LABEL_485;
                      }
                      unint64_t v174 = (unint64_t)(v173 + 8);
                    }
                    else
                    {
                      if ((v197[1] & 0x7F) != 2 && !*((_DWORD *)v197 + 3)) {
                        goto LABEL_485;
                      }
                      uint64_t v175 = *((void *)v197 + 2);
                      if ((v175 & 4) == 0) {
                        goto LABEL_485;
                      }
                      unint64_t v174 = v175 & 0xFFFFFFFFFFFFFFF8;
                      if (!v174) {
                        goto LABEL_485;
                      }
                    }
                    BOOL v205 = (unsigned __int8 *)&v197;
                    sub_1CC5FA668(v174 + 16, &v205);
                  }
LABEL_485:
                  int v194 = 1;
                  goto LABEL_486;
                }
                int v167 = 0;
                char v166 = 0;
LABEL_501:
                unsigned int v176 = v193[9];
                if (v176) {
                  llvm::MachineJumpTableInfo::ReplaceMBBInJumpTables(v176, (llvm::MachineBasicBlock *)a2, v204);
                }
                if (!(v166 & 1 | ((v167 & 1) == 0)))
                {
                  int v126 = 0;
                  int v194 = 1;
                  int v2 = 1;
LABEL_345:
                  if (!v200) {
                    goto LABEL_349;
                  }
                  int v127 = *v200;
                  if ((v127 - 4) > 0x1E)
                  {
                    if ((v127 - 3) >= 0xFFFFFFFE) {
                      unsigned __int8 v160 = v200;
                    }
                    else {
                      unsigned __int8 v160 = 0;
                    }
                    if ((v127 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v161 = (unint64_t)(v160 + 8);
LABEL_450:
                      uint64_t v206 = &v200;
                      sub_1CC5FA668(v161 + 16, &v206);
                      goto LABEL_349;
                    }
                    if (v127 == 3) {
                      *((void *)v200 + 1) = 0;
                    }
                  }
                  else if ((v200[1] & 0x7F) == 2 || *((_DWORD *)v200 + 3))
                  {
                    uint64_t v184 = *((void *)v200 + 2);
                    if ((v184 & 4) != 0)
                    {
                      unint64_t v161 = v184 & 0xFFFFFFFFFFFFFFF8;
                      if (v161) {
                        goto LABEL_450;
                      }
                    }
                  }
LABEL_349:
                  if (!v126) {
                    goto LABEL_416;
                  }
                  goto LABEL_350;
                }
                v194 |= v167;
LABEL_344:
                (*(void (**)(void, uint64_t *, llvm::MachineBasicBlock *, void, void *, void, unsigned __int8 **, void))(**(void **)(a1 + 128) + 272))(*(void *)(a1 + 128), a2, v204, 0, v212, v213, &v200, 0);
                int v126 = 1;
                goto LABEL_345;
              }
LABEL_350:
              if (llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v32))
              {
LABEL_409:
                int v31 = 1;
                int v2 = v194;
                goto LABEL_410;
              }
              int v191 = v2;
              uint64_t v128 = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)a2);
              if (*((unsigned char *)a2 + 184))
              {
LABEL_352:
                if (v128)
                {
                  uint64_t v5 = v193 + 40;
                  goto LABEL_409;
                }
                uint64_t v5 = v193 + 40;
                if ((v196 & 1) == 0)
                {
                  char v139 = 0;
                  uint64_t v140 = 0;
                  uint64_t v206 = v203;
                  uint64_t v207 = (uint64_t)v204;
                  while (1)
                  {
                    char v141 = v139;
                    unint64_t v142 = (llvm::MachineBasicBlock **)*(&v206 + v140);
                    if (v142)
                    {
                      size_t v143 = *v142;
                      BOOL v144 = v142 == (llvm::MachineBasicBlock **)a2 || v143 == (llvm::MachineBasicBlock *)a2;
                      if (!v144 && !llvm::MachineBasicBlock::getFallThrough(v143)) {
                        break;
                      }
                    }
                    char v139 = 1;
                    uint64_t v140 = 1;
                    if (v141) {
                      goto LABEL_397;
                    }
                  }
                  long long v148 = (llvm::MachineBasicBlock **)a2[1];
                  if (v148 != v142 && v148 != (llvm::MachineBasicBlock **)a2)
                  {
                    int v150 = *v148;
                    uint64_t v151 = *a2;
                    *(void *)(v151 + 8) = v148;
                    *long long v148 = (llvm::MachineBasicBlock *)v151;
                    uint64_t v152 = *v142;
                    *((void *)v150 + 1) = v142;
                    *a2 = (uint64_t)v152;
                    *((void *)v152 + 1) = a2;
                    *unint64_t v142 = v150;
                  }
                  int v194 = 1;
                  int v31 = 2;
LABEL_424:
                  int v2 = v191;
                  goto LABEL_410;
                }
LABEL_397:
                unsigned int v200 = 0;
                BOOL v205 = 0;
                uint64_t v206 = v208;
                uint64_t v207 = 0x400000000;
                int v2 = v191;
                if (v195 == (llvm::MachineBasicBlock *)v192 || *((unsigned char *)v195 + 184)) {
                  goto LABEL_405;
                }
                int v145 = 1;
                if ((*(uint64_t (**)(void, uint64_t, unsigned __int8 **, unsigned __int8 **, void **, uint64_t))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128), v32, &v205, &v200, &v206, 1))goto LABEL_406; {
                __int16 v146 = *(llvm::MachineBasicBlock ***)(v32 + 88);
                }
                long long v147 = *(llvm::MachineBasicBlock ***)(v32 + 96);
                if (v146 != v147)
                {
                  while (*v146 != v195)
                  {
                    if (++v146 == v147)
                    {
                      __int16 v146 = *(llvm::MachineBasicBlock ***)(v32 + 96);
                      break;
                    }
                  }
                }
                if (v146 == v147)
                {
LABEL_405:
                  int v145 = 1;
                }
                else
                {
                  llvm::MachineBasicBlock::moveAfter(a2, *v192);
                  int v145 = 0;
                  int v194 = 1;
                  int v2 = 1;
                }
LABEL_406:
                if (v206 != v208) {
                  free(v206);
                }
                if (v145) {
                  goto LABEL_409;
                }
LABEL_416:
                int v31 = 1;
LABEL_410:
                if (__src != v211) {
                  free(__src);
                }
                goto LABEL_412;
              }
              BOOL v130 = (uint64_t **)a2[8];
              uint64_t v129 = (uint64_t **)a2[9];
              while (1)
              {
                if (v130 == v129) {
                  goto LABEL_352;
                }
                uint64_t v131 = *v130;
                int v199 = 0;
                unsigned int v200 = 0;
                uint64_t v206 = v208;
                uint64_t v207 = 0x400000000;
                if (v131 == a2 || llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v131))
                {
                  int v31 = 0;
                  char v132 = 1;
                  goto LABEL_368;
                }
                char v132 = 1;
                if (((*(uint64_t (**)(void, uint64_t *, unsigned __int8 **, uint64_t **, void **, uint64_t))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128), v131, &v200, &v199, &v206, 1) & 1) != 0|| v200 != (unsigned __int8 *)a2 && v199 != a2|| v128 && v204 && v203)
                {
LABEL_367:
                  int v31 = 0;
                  goto LABEL_368;
                }
                if (v128)
                {
                  if (*((_DWORD *)a2 + 6) < *((_DWORD *)v131 + 6)) {
                    goto LABEL_367;
                  }
                  uint64_t v133 = a2[1];
                  LODWORD(v213) = 0;
                  uint64_t v134 = *(void *)(a1 + 128);
                  uint64_t v198 = 0;
                  (*(void (**)(uint64_t, uint64_t *, uint64_t, void, void *, void, uint64_t **, void))(*(void *)v134 + 272))(v134, a2, v133, 0, v212, 0, &v198, 0);
                  if (v198)
                  {
                    int v135 = *(unsigned __int8 *)v198;
                    if ((v135 - 4) > 0x1E)
                    {
                      if ((v135 - 3) >= 0xFFFFFFFE) {
                        uint64_t v136 = (unsigned __int8 *)v198;
                      }
                      else {
                        uint64_t v136 = 0;
                      }
                      if ((v135 - 3) < 0xFFFFFFFE)
                      {
                        if (v135 == 3) {
                          v198[1] = 0;
                        }
                        goto LABEL_376;
                      }
                      unint64_t v137 = (unint64_t)(v136 + 8);
                    }
                    else
                    {
                      if ((*((unsigned char *)v198 + 1) & 0x7F) != 2 && !*((_DWORD *)v198 + 3)) {
                        goto LABEL_376;
                      }
                      uint64_t v138 = v198[2];
                      if ((v138 & 4) == 0) {
                        goto LABEL_376;
                      }
                      unint64_t v137 = v138 & 0xFFFFFFFFFFFFFFF8;
                      if (!v137) {
                        goto LABEL_376;
                      }
                    }
                    BOOL v205 = (unsigned __int8 *)&v198;
                    sub_1CC5FA668(v137 + 16, &v205);
                  }
                }
LABEL_376:
                llvm::MachineBasicBlock::moveAfter(a2, (llvm::MachineBasicBlock *)v131);
                char v132 = 0;
                int v194 = 1;
                int v31 = 2;
LABEL_368:
                if (v206 != v208) {
                  free(v206);
                }
                if ((v132 & 1) == 0)
                {
                  uint64_t v5 = v193 + 40;
                  goto LABEL_424;
                }
                ++v130;
              }
            }
            uint64_t v206 = v208;
            uint64_t v207 = 0x400000000;
            int v45 = v213;
            if (v213)
            {
              if (v213 >= 5uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v208, v212, 32 * v213);
              LODWORD(v207) = v45;
            }
            int v46 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 128) + 728))(*(void *)(a1 + 128), &v206);
            if (v46)
            {
              int v31 = 0;
LABEL_120:
              if (v206 != v208) {
                free(v206);
              }
              if (!v46) {
                goto LABEL_410;
              }
              uint64_t v41 = v204;
              goto LABEL_124;
            }
            sub_1CC246B88(&v200, (llvm::MachineBasicBlock *)a2);
            (*(void (**)(void, uint64_t *, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), a2, 0);
            (*(void (**)(void))(**(void **)(a1 + 128) + 272))();
            if (v200)
            {
              int v50 = *v200;
              if ((v50 - 4) > 0x1E)
              {
                if ((v50 - 3) >= 0xFFFFFFFE) {
                  uint64_t v96 = v200;
                }
                else {
                  uint64_t v96 = 0;
                }
                if ((v50 - 3) < 0xFFFFFFFE)
                {
                  if (v50 == 3) {
                    *((void *)v200 + 1) = 0;
                  }
                  goto LABEL_119;
                }
                unint64_t v97 = (unint64_t)(v96 + 8);
              }
              else
              {
                if ((v200[1] & 0x7F) != 2 && !*((_DWORD *)v200 + 3)) {
                  goto LABEL_119;
                }
                uint64_t v182 = *((void *)v200 + 2);
                if ((v182 & 4) == 0) {
                  goto LABEL_119;
                }
                unint64_t v97 = v182 & 0xFFFFFFFFFFFFFFF8;
                if (!v97) {
                  goto LABEL_119;
                }
              }
              BOOL v205 = (unsigned __int8 *)&v200;
              sub_1CC5FA668(v97 + 16, &v205);
            }
LABEL_119:
            int v194 = 1;
            int v31 = 2;
            goto LABEL_120;
          }
          sub_1CC246B88(&v200, (llvm::MachineBasicBlock *)v32);
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v32, 0);
          (*(void (**)(void))(**(void **)(a1 + 128) + 272))();
          llvm::MachineBasicBlock::moveAfter(a2, *v5);
          if (v200)
          {
            int v162 = *v200;
            if ((v162 - 4) > 0x1E)
            {
              if ((v162 - 3) >= 0xFFFFFFFE) {
                unsigned int v177 = v200;
              }
              else {
                unsigned int v177 = 0;
              }
              if ((v162 - 3) < 0xFFFFFFFE)
              {
                if (v162 == 3) {
                  *((void *)v200 + 1) = 0;
                }
                goto LABEL_456;
              }
              unint64_t v178 = (unint64_t)(v177 + 8);
            }
            else
            {
              if ((v200[1] & 0x7F) != 2 && !*((_DWORD *)v200 + 3)) {
                goto LABEL_456;
              }
              uint64_t v185 = *((void *)v200 + 2);
              if ((v185 & 4) == 0) {
                goto LABEL_456;
              }
              unint64_t v178 = v185 & 0xFFFFFFFFFFFFFFF8;
              if (!v178) {
                goto LABEL_456;
              }
            }
            BOOL v205 = (unsigned __int8 *)&v200;
            sub_1CC5FA668(v178 + 16, &v205);
          }
LABEL_456:
          int v194 = 1;
          int v2 = 1;
          goto LABEL_261;
        }
        uint64_t v206 = v208;
        uint64_t v207 = 0x400000000;
        if (v210)
        {
          if (v210 >= 5uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v208, __src, 32 * v210);
          LODWORD(v207) = v36;
        }
        int v47 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 128) + 728))(*(void *)(a1 + 128), &v206);
        if (v47)
        {
          int v31 = 0;
          goto LABEL_248;
        }
        sub_1CC246B88(&v200, (llvm::MachineBasicBlock *)v32);
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128), v32, 0);
        (*(void (**)(void))(**(void **)(a1 + 128) + 272))();
        if (v200)
        {
          int v93 = *v200;
          if ((v93 - 4) > 0x1E)
          {
            if ((v93 - 3) >= 0xFFFFFFFE) {
              uint64_t v98 = v200;
            }
            else {
              uint64_t v98 = 0;
            }
            if ((v93 - 3) < 0xFFFFFFFE)
            {
              if (v93 == 3) {
                *((void *)v200 + 1) = 0;
              }
              goto LABEL_247;
            }
            unint64_t v99 = (unint64_t)(v98 + 8);
          }
          else
          {
            if ((v200[1] & 0x7F) != 2 && !*((_DWORD *)v200 + 3)) {
              goto LABEL_247;
            }
            uint64_t v183 = *((void *)v200 + 2);
            if ((v183 & 4) == 0) {
              goto LABEL_247;
            }
            unint64_t v99 = v183 & 0xFFFFFFFFFFFFFFF8;
            if (!v99) {
              goto LABEL_247;
            }
          }
          BOOL v205 = (unsigned __int8 *)&v200;
          sub_1CC5FA668(v99 + 16, &v205);
        }
LABEL_247:
        int v194 = 1;
        int v31 = 2;
LABEL_248:
        if (v206 != v208) {
          free(v206);
        }
        if (!v47) {
          goto LABEL_410;
        }
        goto LABEL_251;
      }
    }
LABEL_19:
    if (*((unsigned char *)a2 + 184)) {
      goto LABEL_59;
    }
    if (*((unsigned char *)a2 + 185) || !v9) {
      goto LABEL_59;
    }
    uint64_t v14 = *(void *)(a1 + 128);
    uint64_t v15 = a2[11];
    uint64_t v16 = a2[12];
    while (v15 != v16)
    {
      uint64_t v17 = *(void *)v15;
      if (((*(void *)(*(void *)v15 + 72) - *(void *)(*(void *)v15 + 64)) & 0x7FFFFFFF8) == 8)
      {
        uint64_t v18 = *(void *)(v17 + 56);
        uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v17 + 32) + 16) + 104))(*(void *)(*(void *)(v17 + 32) + 16));
        if (v17 + 48 != v18)
        {
          uint64_t v20 = v19;
          while (1)
          {
            int v21 = **(unsigned __int16 **)(v18 + 16);
            if (**(_WORD **)(v18 + 16))
            {
              if (v21 != 69
                && (v21 - 3) >= 4
                && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v20 + 1144))(v20, v18))
              {
                break;
              }
            }
            if ((*(unsigned char *)v18 & 4) == 0)
            {
              while ((*(_WORD *)(v18 + 44) & 8) != 0)
                uint64_t v18 = *(void *)(v18 + 8);
            }
            uint64_t v18 = *(void *)(v18 + 8);
            if (v18 == v17 + 48)
            {
              uint64_t v18 = v17 + 48;
              break;
            }
          }
        }
        for (uint64_t i = a2[7]; (unint64_t *)i != v6; uint64_t i = *(void *)(i + 8))
        {
          if (**(unsigned __int16 **)(i + 16) - 13 <= 4) {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 184))(v14, v17, v18, i);
          }
        }
      }
      v15 += 8;
    }
    uint64_t v23 = (llvm::MachineBasicBlock **)a2[8];
    unsigned int v24 = (llvm::MachineBasicBlock **)a2[9];
    uint64_t v5 = v193 + 40;
    if (v23 == v24) {
      goto LABEL_57;
    }
    do
    {
      uint64_t v25 = *v23;
      if (((*((void *)*v23 + 12) - *((void *)*v23 + 11)) & 0x7FFFFFFF8) == 8)
      {
        unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(*v23);
        uint64_t v27 = a2[7];
        if ((unint64_t *)v27 != v6)
        {
          unint64_t v28 = FirstTerminator;
          do
          {
            if (**(unsigned __int16 **)(v27 + 16) - 13 <= 4) {
              (*(void (**)(uint64_t, llvm::MachineBasicBlock *, unint64_t, uint64_t))(*(void *)v14 + 184))(v14, v25, v28, v27);
            }
            uint64_t v27 = *(void *)(v27 + 8);
          }
          while ((unint64_t *)v27 != v6);
        }
      }
      ++v23;
    }
    while (v23 != v24);
    uint64_t v29 = a2[9];
    if (a2[8] == v29 || v195 == (llvm::MachineBasicBlock *)v192)
    {
LABEL_57:
      int v31 = 1;
      int v2 = v194;
    }
    else
    {
      if (*((unsigned char *)v195 + 184)) {
        goto LABEL_183;
      }
      BOOL v90 = (llvm::MachineBasicBlock **)a2[11];
      unint64_t v91 = (llvm::MachineBasicBlock **)a2[12];
      if (v90 != v91)
      {
        while (*v90 != v195)
        {
          if (++v90 == v91)
          {
            BOOL v90 = (llvm::MachineBasicBlock **)a2[12];
            break;
          }
        }
      }
      if (v90 == v91)
      {
LABEL_183:
        int v31 = 1;
        int v2 = v194;
      }
      else
      {
        do
        {
          llvm::MachineBasicBlock::ReplaceUsesOfBlockWith(*(llvm::MachineBasicBlock **)(v29 - 8), (llvm::MachineBasicBlock *)a2, v195);
          uint64_t v29 = a2[9];
        }
        while (a2[8] != v29);
        unint64_t v92 = v193[9];
        if (v92) {
          llvm::MachineJumpTableInfo::ReplaceMBBInJumpTables(v92, (llvm::MachineBasicBlock *)a2, v195);
        }
        int v31 = 1;
        int v194 = 1;
        int v2 = 1;
      }
    }
LABEL_412:
    if (v212 != v214) {
      free(v212);
    }
  }
  while (v31 == 2);
  return v2 & 1;
}

uint64_t sub_1CC246B88(unsigned __int8 **a1, llvm::MachineBasicBlock *this)
{
  uint64_t result = llvm::MachineBasicBlock::getLastNonDebugInstr(this, 1);
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)result) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(*(void *)(result + 16) + 8);
  if ((*(_WORD *)(result + 44) & 0xC) != 0 && (*(_WORD *)(result + 44) & 4) == 0)
  {
    if ((v5 & 0x400) == 0)
    {
      uint64_t v7 = result;
      while ((*(_WORD *)(v7 + 44) & 8) != 0)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if ((*(unsigned char *)(*(void *)(v7 + 16) + 9) & 4) != 0) {
          goto LABEL_13;
        }
      }
      goto LABEL_7;
    }
  }
  else if ((v5 & 0x400) == 0)
  {
LABEL_7:
    *a1 = 0;
    return result;
  }
LABEL_13:
  BOOL v8 = *(unsigned __int8 **)(result + 56);
  *a1 = v8;
  if (v8)
  {
    return llvm::MetadataTracking::track((uint64_t)a1, v8, 2);
  }
  return result;
}

uint64_t sub_1CC246C3C(uint64_t a1, llvm::MachineBasicBlock *a2)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  char v154 = 0;
  unint64_t v155 = 0;
  unint64_t v180 = v182;
  uint64_t v181 = 0x400000000;
  uint64_t v4 = 0;
  if (((*(uint64_t (**)(void, llvm::MachineBasicBlock *, llvm::LivePhysRegs **, llvm::LivePhysRegs **, void **, uint64_t))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128), a2, &v155, &v154, &v180, 1) & 1) != 0|| !v155|| !v181)
  {
    goto LABEL_37;
  }
  uint64_t v5 = v154;
  if (!v154)
  {
    for (uint64_t i = (llvm::LivePhysRegs **)*((void *)a2 + 11); ; ++i)
    {
      if (i == *((llvm::LivePhysRegs ***)a2 + 12))
      {
        uint64_t v4 = 0;
        char v154 = 0;
        goto LABEL_37;
      }
      uint64_t v5 = *i;
      if (*i != v155) {
        break;
      }
    }
    char v154 = *i;
    if (!v5) {
      goto LABEL_36;
    }
  }
  if (((*((void *)v155 + 9) - *((void *)v155 + 8)) & 0x7FFFFFFF0) != 0
    || ((*((void *)v5 + 9) - *((void *)v5 + 8)) & 0x7FFFFFFF0) != 0)
  {
LABEL_36:
    uint64_t v4 = 0;
    goto LABEL_37;
  }
  uint64_t v173 = 0;
  unint64_t v174 = v176;
  uint64_t v175 = 0x400000000;
  unint64_t v178 = 0;
  uint64_t v179 = 0;
  unsigned int v177 = &v178;
  uint64_t v168 = v170;
  uint64_t v169 = 0x400000000;
  uint64_t v171 = &v172;
  int v172 = 0;
  uint64_t v6 = *(llvm::TargetInstrInfo **)(a1 + 128);
  uint64_t v151 = *(void *)(a1 + 144);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(v6, (const llvm::MachineInstr *)FirstTerminator))
  {
    uint64_t v4 = 0;
    goto LABEL_238;
  }
  uint64_t v9 = *(unsigned int *)(FirstTerminator + 40);
  if (v9)
  {
    uint64_t v10 = 32 * v9;
    int v11 = (unsigned int *)(*(void *)(FirstTerminator + 32) + 4);
    do
    {
      int v12 = *(v11 - 1);
      if (!(_BYTE)v12)
      {
        uint64_t v13 = *v11;
        if (v13)
        {
          if ((v12 & 0x1000000) != 0)
          {
            if ((~v12 & 0x5000000) != 0)
            {
              uint64_t v4 = 0;
              goto LABEL_238;
            }
            uint64_t v14 = &v168;
          }
          else
          {
            uint64_t v14 = &v174;
          }
          sub_1CC247B80(v13, v151, (uint64_t)v14);
        }
      }
      v11 += 8;
      v10 -= 32;
    }
    while (v10);
  }
  uint64_t v15 = v175;
  uint64_t v16 = v179;
  if (v175) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v179 == 0;
  }
  if (v17) {
    goto LABEL_23;
  }
  uint64_t v18 = *((void *)a2 + 7);
  if (v18 == FirstTerminator) {
    goto LABEL_23;
  }
  unint64_t v121 = sub_1CD50BB0C((void *)FirstTerminator, v18);
  uint64_t v122 = *(unsigned int *)(v121 + 40);
  if (!v122) {
    goto LABEL_23;
  }
  unint64_t v123 = v121;
  uint64_t v124 = *(_DWORD **)(v121 + 32);
  BOOL v125 = &v124[8 * v122];
  int v126 = (char *)v174 + 4 * v15;
  while (1)
  {
    if (*v124)
    {
      if (*v124 == 12) {
        goto LABEL_23;
      }
      goto LABEL_264;
    }
    if ((*v124 & 0x1000000) != 0)
    {
      unsigned int v127 = v124[1];
      if (v127) {
        break;
      }
    }
LABEL_264:
    v124 += 8;
    if (v124 == v125) {
      goto LABEL_23;
    }
  }
  if (v16)
  {
    for (int j = v178; j; int j = (void *)*j)
    {
      unsigned int v129 = *((_DWORD *)j + 7);
      if (v127 >= v129)
      {
        if (v129 >= v127) {
          goto LABEL_269;
        }
        ++j;
      }
    }
    goto LABEL_264;
  }
  if (!v15) {
    goto LABEL_264;
  }
  BOOL v130 = (char *)v174;
  while (*(_DWORD *)v130 != v127)
  {
    v130 += 4;
    if (v130 == v126) {
      goto LABEL_264;
    }
  }
  if (v130 == v126) {
    goto LABEL_264;
  }
LABEL_269:
  LOBYTE(v156) = 1;
  if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v121, 0, (BOOL *)&v156)
    && !(*(unsigned int (**)(llvm::TargetInstrInfo *, unint64_t))(*(void *)v6 + 768))(v6, v123))
  {
    uint64_t v133 = *(unsigned int *)(v123 + 40);
    if (v133)
    {
      uint64_t v134 = *(void *)(v123 + 32);
      uint64_t v135 = v134 + 32 * v133;
      if (v151) {
        uint64_t v136 = (void *)(v151 + 8);
      }
      else {
        uint64_t v136 = 0;
      }
      do
      {
        if (!*(unsigned char *)v134)
        {
          unsigned int v137 = *(_DWORD *)(v134 + 4);
          LODWORD(v183) = v137;
          if (v137)
          {
            if (*(unsigned char *)(v134 + 3))
            {
              BOOL v139 = sub_1CC247AE8((uint64_t)&v174, (unsigned int *)&v183);
              unsigned int v137 = v183;
              uint64_t v138 = &v168;
              if (v139 && (v183 - 1) <= 0x3FFFFFFE)
              {
                uint64_t v140 = v136[6];
                uint64_t v141 = *(unsigned int *)(*v136 + 24 * v183 + 4);
                if (*(_WORD *)(v140 + 2 * v141))
                {
                  int v142 = *(unsigned __int16 *)(v140 + 2 * v141) + v183;
                  size_t v143 = (unsigned __int16 *)(v140 + 2 * v141 + 2);
                  do
                  {
                    LODWORD(v162) = (unsigned __int16)v142;
                    sub_1CC247AE8((uint64_t)&v174, (unsigned int *)&v162);
                    int v144 = *v143++;
                    v142 += v144;
                  }
                  while (v144);
                  uint64_t v138 = &v168;
                  unsigned int v137 = v183;
                }
                else
                {
                  uint64_t v138 = &v168;
                }
              }
            }
            else
            {
              uint64_t v138 = &v174;
            }
            sub_1CC247B80(v137, v151, (uint64_t)v138);
          }
        }
        v134 += 32;
      }
      while (v134 != v135);
    }
    unint64_t FirstTerminator = v123;
  }
  else
  {
    unint64_t FirstTerminator = (unint64_t)a2 + 48;
  }
LABEL_23:
  if ((llvm::MachineBasicBlock *)FirstTerminator == (llvm::MachineBasicBlock *)((char *)a2 + 48))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v161 = 0;
    int v162 = v164;
    uint64_t v163 = 0x400000000;
    char v166 = 0;
    uint64_t v167 = 0;
    uint64_t v165 = &v166;
    unsigned __int8 v156 = v158;
    uint64_t v157 = 0x400000000;
    uint64_t v159 = &v160;
    unsigned __int8 v160 = 0;
    uint64_t v19 = (char *)v155 + 48;
    uint64_t v20 = *((void *)v155 + 7);
    int v21 = (char *)v154 + 48;
    uint64_t v22 = *((void *)v154 + 7);
    if ((llvm::LivePhysRegs *)v20 == (llvm::LivePhysRegs *)((char *)v155 + 48) || v22 == (void)v21)
    {
      uint64_t v4 = 0;
    }
    else
    {
      char v26 = 0;
      while (1)
      {
        do
        {
          unsigned int v27 = **(unsigned __int16 **)(v20 + 16) - 13;
          if (v27 > 4) {
            goto LABEL_52;
          }
          if ((*(unsigned char *)v20 & 4) == 0)
          {
            while ((*(_WORD *)(v20 + 44) & 8) != 0)
              uint64_t v20 = *(void *)(v20 + 8);
          }
          uint64_t v20 = *(void *)(v20 + 8);
        }
        while ((char *)v20 != v19);
        uint64_t v20 = (uint64_t)v19;
        while (1)
        {
LABEL_52:
          if ((char *)v22 == v21) {
            goto LABEL_198;
          }
          if (**(unsigned __int16 **)(v22 + 16) - 13 > 4) {
            break;
          }
          if ((*(unsigned char *)v22 & 4) == 0)
          {
            while ((*(_WORD *)(v22 + 44) & 8) != 0)
              uint64_t v22 = *(void *)(v22 + 8);
          }
          uint64_t v22 = *(void *)(v22 + 8);
        }
        if (v27 < 5
          || !llvm::MachineInstr::isIdenticalTo(v20, v22, 1)
          || ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 128) + 768))(*(void *)(a1 + 128), v20) & 1) != 0)
        {
          goto LABEL_197;
        }
        uint64_t v28 = *(unsigned int *)(v20 + 40);
        if (v28) {
          break;
        }
LABEL_136:
        BOOL v153 = 1;
        if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v20, 0, &v153)) {
          goto LABEL_199;
        }
        uint64_t v53 = *(unsigned int *)(v20 + 40);
        if (v53)
        {
          unint64_t v54 = *(_DWORD **)(v20 + 32);
          int v55 = &v54[8 * v53];
          int v149 = v55;
          unint64_t v150 = FirstTerminator;
          do
          {
            if (*v54 & 0x10000FF) == 0 && ((*v54 >> 26) & ~HIBYTE(*v54))
            {
              unsigned int v56 = v54[1];
              LODWORD(v183) = v56;
              if (v56)
              {
                if (v161)
                {
                  for (uint64_t k = v160; k; uint64_t k = (void *)*k)
                  {
                    unsigned int v58 = *((_DWORD *)k + 7);
                    if (v56 >= v58)
                    {
                      if (v58 >= v56) {
                        goto LABEL_157;
                      }
                      ++k;
                    }
                  }
                }
                else if (v157)
                {
                  unsigned int v59 = v156;
                  uint64_t v60 = 4 * v157;
                  while (*v59 != v56)
                  {
                    ++v59;
                    v60 -= 4;
                    if (!v60) {
                      goto LABEL_140;
                    }
                  }
                  if (v60)
                  {
LABEL_157:
                    if (v56 >> 30)
                    {
                      sub_1CC247AE8((uint64_t)&v162, (unsigned int *)&v183);
                      int v55 = v149;
                    }
                    else
                    {
                      uint64_t v61 = *(void *)(a1 + 144);
                      if (v61) {
                        uint64_t v62 = (void *)(v61 + 8);
                      }
                      else {
                        uint64_t v62 = 0;
                      }
                      uint64_t v63 = *v62;
                      int v64 = *(_DWORD *)(*v62 + 24 * v56 + 16) & 0xF;
                      unint64_t v65 = ((unint64_t)*(unsigned int *)(*v62 + 24 * v56 + 16) >> 3) & 0x1FFFFFFE;
                      int v145 = v62;
                      int v68 = v62 + 5;
                      uint64_t v67 = v62[5];
                      uint64_t v66 = v68[1];
                      uint64_t v69 = (unsigned __int16 *)(v66 + v65 + 2);
                      int v70 = *(unsigned __int16 *)(v66 + v65) + v64 * v56;
                      do
                      {
                        uint64_t v71 = 4 * (unsigned __int16)v70;
                        unsigned int v72 = *(unsigned __int16 *)(v67 + v71);
                        if (*(_WORD *)(v67 + v71)) {
                          BOOL v73 = v66 == 0;
                        }
                        else {
                          BOOL v73 = 1;
                        }
                        if (!v73)
                        {
                          long long v148 = v69;
                          unsigned int v147 = *(unsigned __int16 *)(v67 + 4 * (unsigned __int16)v70 + 2) << 16;
                          uint64_t v75 = (unsigned int *)(v63
                                               + 24 * *(unsigned __int16 *)(v67 + 4 * (unsigned __int16)v70)
                                               + 8);
                          int v146 = v70;
                          while (1)
                          {
                            BOOL v76 = (unsigned __int16 *)(v66 + 2 * *v75);
                            do
                            {
                              unsigned int v152 = (unsigned __int16)v72;
                              sub_1CC247AE8((uint64_t)&v162, &v152);
                              int v77 = *v76++;
                              v72 += v77;
                            }
                            while (v77);
                            unsigned int v72 = HIWORD(v147);
                            if (HIWORD(v147))
                            {
                              v147 >>= 16;
                              uint64_t v78 = v145;
                              uint64_t v79 = v148;
                            }
                            else
                            {
                              int v55 = v149;
                              unint64_t FirstTerminator = v150;
                              if (!*v148) {
                                goto LABEL_140;
                              }
                              uint64_t v78 = v145;
                              uint64_t v79 = v148 + 1;
                              v146 += (unsigned __int16)*v148;
                              uint64_t v80 = (unsigned __int16 *)(v145[5] + 4 * (unsigned __int16)v146);
                              unsigned int v72 = *v80;
                              unsigned int v147 = v80[1] << 16;
                            }
                            long long v148 = v79;
                            uint64_t v66 = v78[6];
                            uint64_t v75 = (unsigned int *)(*v78 + 24 * v72 + 8);
                          }
                        }
                        int v74 = *v69++;
                        v70 += v74;
                        unint64_t FirstTerminator = v150;
                      }
                      while (v74);
                    }
                  }
                }
              }
            }
LABEL_140:
            v54 += 8;
          }
          while (v54 != v55);
          uint64_t v81 = *(unsigned int *)(v20 + 40);
          if (v81)
          {
            uint64_t v82 = 32 * v81;
            uint64_t v83 = (unsigned int *)(*(void *)(v20 + 32) + 4);
            do
            {
              int v84 = *(v83 - 1);
              int v85 = v84 & 0x10000FF;
              int v86 = v84 & 0x5000000;
              if (v85 == 0x1000000 && v86 != 83886080)
              {
                uint64_t v88 = *v83;
                if ((int)v88 >= 1)
                {
                  sub_1CC247B80(*v83, *(void *)(a1 + 144), (uint64_t)&v162);
                  sub_1CC247B80(v88, *(void *)(a1 + 144), (uint64_t)&v156);
                }
              }
              v83 += 8;
              v82 -= 32;
            }
            while (v82);
            unint64_t FirstTerminator = v150;
            if (!v20) {
              goto LABEL_190;
            }
          }
        }
        if ((*(unsigned char *)v20 & 4) == 0)
        {
LABEL_190:
          while ((*(_WORD *)(v20 + 44) & 8) != 0)
            uint64_t v20 = *(void *)(v20 + 8);
        }
        uint64_t v20 = *(void *)(v20 + 8);
        if ((*(unsigned char *)v22 & 4) == 0)
        {
          while ((*(_WORD *)(v22 + 44) & 8) != 0)
            uint64_t v22 = *(void *)(v22 + 8);
        }
        uint64_t v22 = *(void *)(v22 + 8);
        if ((char *)v20 != v19)
        {
          char v26 = 1;
          if ((char *)v22 != v21) {
            continue;
          }
        }
        goto LABEL_200;
      }
      uint64_t v29 = *(unsigned int **)(v20 + 32);
      unint64_t v30 = &v29[8 * v28];
      while (1)
      {
        unsigned int v31 = *v29;
        if (*v29)
        {
          if (*v29 == 12) {
            goto LABEL_197;
          }
          goto LABEL_135;
        }
        unsigned int v32 = v29[1];
        if (!v32) {
          goto LABEL_135;
        }
        if ((v31 & 0x1000000) == 0) {
          break;
        }
        if (v179)
        {
          for (m = v178; m; m = (void *)*m)
          {
            unsigned int v36 = *((_DWORD *)m + 7);
            if (v32 >= v36)
            {
              if (v36 >= v32) {
                goto LABEL_197;
              }
              ++m;
            }
          }
        }
        else if (v175)
        {
          int v39 = v174;
          uint64_t v40 = 4 * v175;
          while (*v39 != v32)
          {
            ++v39;
            v40 -= 4;
            if (!v40) {
              goto LABEL_102;
            }
          }
          if (v40) {
            goto LABEL_197;
          }
        }
LABEL_102:
        if (v173)
        {
          int v45 = v172;
          if (!v172) {
            goto LABEL_135;
          }
          while (1)
          {
            unsigned int v46 = *((_DWORD *)v45 + 7);
            if (v32 >= v46)
            {
              if (v46 >= v32)
              {
                if ((~v31 & 0x5000000) != 0) {
                  goto LABEL_197;
                }
                goto LABEL_135;
              }
              ++v45;
            }
            int v45 = (void *)*v45;
            if (!v45) {
              goto LABEL_135;
            }
          }
        }
        if (!v169) {
          goto LABEL_135;
        }
        int v47 = v168;
        uint64_t v48 = 4 * v169;
        while (*v47 != v32)
        {
          ++v47;
          v48 -= 4;
          if (!v48) {
            goto LABEL_135;
          }
        }
        if ((~v31 & 0x5000000) != 0 && v48) {
          goto LABEL_197;
        }
LABEL_135:
        v29 += 8;
        if (v29 == v30) {
          goto LABEL_136;
        }
      }
      if (v167)
      {
        for (n = v166; n; n = (void *)*n)
        {
          unsigned int v34 = *((_DWORD *)n + 7);
          if (v32 >= v34)
          {
            if (v34 >= v32) {
              goto LABEL_135;
            }
            ++n;
          }
        }
      }
      else if (v163)
      {
        uint64_t v37 = v162;
        uint64_t v38 = 4 * v163;
        while (*v37 != v32)
        {
          ++v37;
          v38 -= 4;
          if (!v38) {
            goto LABEL_89;
          }
        }
        if (v38) {
          goto LABEL_135;
        }
      }
LABEL_89:
      if (v173)
      {
        for (iuint64_t i = v172; ii; iuint64_t i = (void *)*ii)
        {
          unsigned int v42 = *((_DWORD *)ii + 7);
          if (v32 >= v42)
          {
            if (v42 >= v32) {
              goto LABEL_197;
            }
            ++ii;
          }
        }
LABEL_120:
        if ((v31 >> 26) & ~HIBYTE(v31))
        {
          if (v179)
          {
            for (jint j = v178; jj; jint j = (void *)*jj)
            {
              unsigned int v50 = *((_DWORD *)jj + 7);
              if (v32 >= v50)
              {
                if (v50 >= v32) {
                  goto LABEL_134;
                }
                ++jj;
              }
            }
          }
          else if (v175)
          {
            int v51 = v174;
            uint64_t v52 = 4 * v175;
            while (*v51 != v32)
            {
              ++v51;
              v52 -= 4;
              if (!v52) {
                goto LABEL_135;
              }
            }
            if (v52) {
LABEL_134:
            }
              *uint64_t v29 = v31 & 0xFBFFFFFF;
          }
        }
        goto LABEL_135;
      }
      if (!v169) {
        goto LABEL_120;
      }
      __int16 v43 = v168;
      uint64_t v44 = 4 * v169;
      while (*v43 != v32)
      {
        ++v43;
        v44 -= 4;
        if (!v44) {
          goto LABEL_120;
        }
      }
      if (!v44) {
        goto LABEL_120;
      }
LABEL_197:
      int v21 = (char *)v22;
LABEL_198:
      uint64_t v22 = (uint64_t)v21;
LABEL_199:
      if (v26)
      {
LABEL_200:
        if (FirstTerminator != v20)
        {
          unint64_t v89 = (unint64_t *)*((void *)v155 + 7);
          if (v89 != (unint64_t *)v20)
          {
            if (v155 != a2)
            {
              uint64_t v131 = *((void *)a2 + 5);
              uint64_t v132 = *((void *)v155 + 7);
              do
              {
                *(void *)(v132 + 24) = v131;
                uint64_t v132 = *(void *)(v132 + 8);
              }
              while (v132 != v20);
            }
            uint64_t v90 = *(void *)v20;
            unint64_t v91 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v92 = *v89 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v92 + 8) = v20;
            *(void *)uint64_t v20 = v92 | v90 & 7;
            unint64_t v93 = *(void *)FirstTerminator & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v91 + 8) = FirstTerminator;
            *unint64_t v89 = v93 | *v89 & 7;
            *(void *)(v93 + 8) = v89;
            *(void *)unint64_t FirstTerminator = v90 & 0xFFFFFFFFFFFFFFF8 | *(void *)FirstTerminator & 7;
          }
        }
        int v94 = v154;
        uint64_t v95 = *((void *)v154 + 7);
        if (v95 != v22)
        {
          do
          {
            uint64_t v96 = *(void *)(v95 + 8);
            uint64_t v97 = *(void *)(*(void *)(v95 + 24) + 32);
            if (v97)
            {
              uint64_t v98 = *(void *)(v97 + 728);
              if (v98) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v98 + 32))(v98, v95);
              }
              uint64_t v99 = *(unsigned int *)(v95 + 40);
              if (v99)
              {
                uint64_t v100 = *(void *)(v95 + 32);
                uint64_t v101 = *(void *)(v97 + 40);
                uint64_t v102 = 32 * v99;
                do
                {
                  if (!*(unsigned char *)v100)
                  {
                    uint64_t v103 = *(unsigned int *)(v100 + 4);
                    if ((v103 & 0x80000000) != 0) {
                      uint64_t v104 = (uint64_t *)(*(void *)(v101 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v104 = (uint64_t *)(*(void *)(v101 + 272) + 8 * v103);
                    }
                    uint64_t v105 = *v104;
                    uint64_t v107 = *(void *)(v100 + 16);
                    uint64_t v106 = *(void *)(v100 + 24);
                    if (v100 != *v104) {
                      uint64_t v104 = (uint64_t *)(v107 + 24);
                    }
                    *uint64_t v104 = v106;
                    if (v106) {
                      uint64_t v108 = v106;
                    }
                    else {
                      uint64_t v108 = v105;
                    }
                    *(void *)(v108 + 16) = v107;
                    *(void *)(v100 + 16) = 0;
                    *(void *)(v100 + 24) = 0;
                  }
                  v100 += 32;
                  v102 -= 32;
                }
                while (v102);
              }
            }
            *(void *)(v95 + 24) = 0;
            uint64_t v109 = *(unint64_t **)(v95 + 8);
            unint64_t v110 = *(void *)v95 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v109 = v110 | *v109 & 7;
            *(void *)(v110 + 8) = v109;
            *(void *)v95 &= 7uLL;
            *(void *)(v95 + 8) = 0;
            uint64_t v111 = *(void *)(*((void *)v94 + 5) + 32);
            unint64_t v112 = *(void **)(v95 + 32);
            if (v112)
            {
              uint64_t v113 = *(unsigned __int8 *)(v95 + 47);
              uint64_t v114 = (uint64_t *)(v111 + 232);
              if (*(_DWORD *)(v111 + 240) <= v113) {
                sub_1CC34BDE0(v111 + 232, v113 + 1);
              }
              uint64_t v115 = *v114;
              void *v112 = *(void *)(*v114 + 8 * v113);
              *(void *)(v115 + 8 * v113) = v112;
            }
            *(void *)uint64_t v95 = *(void *)(v111 + 224);
            *(void *)(v111 + 224) = v95;
            uint64_t v95 = v96;
          }
          while (v96 != v22);
        }
        if (*(unsigned char *)(a1 + 123))
        {
          uint64_t v116 = v155;
          uint64_t v183 = 0;
          uint64_t v184 = v186;
          long long v185 = xmmword_1CD96EEC0;
          unsigned int v187 = 0;
          int v188 = 0;
          *((void *)v155 + 20) = *((void *)v155 + 19);
          llvm::computeLiveIns((llvm *)&v183, v116, v8);
          llvm::addLiveIns(v116, (llvm::MachineBasicBlock *)&v183, v117);
          free(v187);
          if (v184 != v186) {
            free(v184);
          }
          unint64_t v119 = v154;
          uint64_t v183 = 0;
          uint64_t v184 = v186;
          long long v185 = xmmword_1CD96EEC0;
          unsigned int v187 = 0;
          int v188 = 0;
          *((void *)v154 + 20) = *((void *)v154 + 19);
          llvm::computeLiveIns((llvm *)&v183, v119, v118);
          llvm::addLiveIns(v119, (llvm::MachineBasicBlock *)&v183, v120);
          free(v187);
          if (v184 != v186) {
            free(v184);
          }
          uint64_t v4 = 1;
        }
        else
        {
          uint64_t v4 = 1;
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    sub_1CB833A08((uint64_t)&v159, v160);
    if (v156 != v158) {
      free(v156);
    }
    sub_1CB833A08((uint64_t)&v165, v166);
    if (v162 != v164) {
      free(v162);
    }
  }
LABEL_238:
  sub_1CB833A08((uint64_t)&v171, v172);
  if (v168 != v170) {
    free(v168);
  }
  sub_1CB833A08((uint64_t)&v177, v178);
  if (v174 != v176) {
    free(v174);
  }
LABEL_37:
  if (v180 != v182) {
    free(v180);
  }
  return v4;
}

BOOL sub_1CC247AE8(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 48)) {
    return sub_1CD50BF28(a1 + 32, a2) != 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(int **)a1;
  size_t v5 = 4 * v3 - 4;
  uint64_t v6 = *(int **)a1;
  while (1)
  {
    int v7 = *v6++;
    if (v7 == *a2) {
      break;
    }
    v5 -= 4;
    uint64_t v4 = v6;
    if (v5 == -4) {
      return 0;
    }
  }
  if (v5)
  {
    memmove(v4, v4 + 1, v5);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v3 - 1;
  return 1;
}

uint64_t sub_1CC247B80(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v20 = result;
  if ((result - 1) > 0x3FFFFFFE) {
    return sub_1CBB141C8(a3, &v20);
  }
  if (a2) {
    uint64_t v4 = (void *)(a2 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = ((unint64_t)*(unsigned int *)(*v4 + 24 * result + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v7 = v4[5];
  uint64_t v6 = v4[6];
  BOOL v8 = (_WORD *)(v6 + v5 + 2);
  int v9 = *(unsigned __int16 *)(v6 + v5) + (*(_DWORD *)(*v4 + 24 * result + 16) & 0xF) * result;
  do
  {
    uint64_t v10 = 4 * (unsigned __int16)v9;
    unsigned int v11 = *(unsigned __int16 *)(v7 + v10);
    if (*(_WORD *)(v7 + v10)) {
      BOOL v12 = v6 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      unsigned int v14 = *(unsigned __int16 *)(v7 + 4 * (unsigned __int16)v9 + 2) << 16;
      for (uint64_t i = (unsigned int *)(*v4 + 24 * *(unsigned __int16 *)(v7 + 4 * (unsigned __int16)v9) + 8);
            ;
            uint64_t i = (unsigned int *)(*v4 + 24 * v11 + 8))
      {
        uint64_t v16 = (unsigned __int16 *)(v6 + 2 * *i);
        do
        {
          unsigned int v19 = (unsigned __int16)v11;
          uint64_t result = sub_1CBB141C8(a3, &v19);
          int v17 = *v16++;
          v11 += v17;
        }
        while (v17);
        unsigned int v11 = HIWORD(v14);
        if (HIWORD(v14))
        {
          v14 >>= 16;
        }
        else
        {
          if (!*v8) {
            return result;
          }
          v9 += (unsigned __int16)*v8++;
          uint64_t v18 = (unsigned __int16 *)(v4[5] + 4 * (unsigned __int16)v9);
          unsigned int v11 = *v18;
          unsigned int v14 = v18[1] << 16;
        }
        uint64_t v6 = v4[6];
      }
    }
    int v13 = (unsigned __int16)*v8++;
    v9 += v13;
  }
  while (v13);
  return result;
}

void sub_1CC247CCC(void *a1)
{
  *a1 = &unk_1F2609740;
  int v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC247D94(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1CC247DAC()
{
}

void sub_1CC247E50(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC247F04(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC247FB0(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC248038(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    uint64_t v6 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (v7 == v8)
    {
LABEL_7:
      uint64_t v9 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v7 != &llvm::TargetPassConfig::ID)
      {
        v7 += 16;
        if (v7 == v8) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = *(void *)(v7 + 8);
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::TargetPassConfig::ID);
    BOOL v11 = (*(unsigned char *)(*(void *)(a2 + 8) + 592) & 1) == 0 && *(unsigned char *)(v10 + 130) != 0;
    BOOL v12 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (v13 == v14)
    {
LABEL_15:
      uint64_t v15 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v13 != &llvm::MachineBlockFrequencyInfo::ID)
      {
        v13 += 16;
        if (v13 == v14) {
          goto LABEL_15;
        }
      }
      uint64_t v15 = *(void *)(v13 + 8);
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::MachineBlockFrequencyInfo::ID);
    uint64_t v17 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = v16;
    int v33 = 0;
    uint64_t v18 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if (v19 != v20)
    {
      while (*(_UNKNOWN **)v19 != &llvm::MachineBranchProbabilityInfo::ID)
      {
        v19 += 16;
        if (v19 == v20)
        {
          uint64_t v17 = 0;
          goto LABEL_22;
        }
      }
      uint64_t v17 = *(void *)(v19 + 8);
    }
LABEL_22:
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::MachineBranchProbabilityInfo::ID);
    uint64_t v22 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    if (v23 == v24)
    {
LABEL_25:
      uint64_t v25 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v23 != &llvm::ProfileSummaryInfoWrapperPass::ID)
      {
        v23 += 16;
        if (v23 == v24) {
          goto LABEL_25;
        }
      }
      uint64_t v25 = *(void *)(v23 + 8);
    }
    uint64_t v26 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v25 + 96))(v25, &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
    memset(v34, 0, 24);
    v34[3] = v36;
    v34[4] = v36;
    v34[5] = 2;
    int v35 = 0;
    v36[2] = 0;
    v36[3] = 0;
    int v37 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    char v27 = 1;
    char v42 = 1;
    uint64_t v44 = 0;
    int v45 = v47;
    long long v46 = xmmword_1CD96EEC0;
    void v47[2] = 0;
    int v48 = 0;
    int v49 = &v30;
    uint64_t v50 = v21;
    uint64_t v51 = v26;
    int v43 = dword_1EBCC90B8;
    if (dword_1EBCC8F38 == 2)
    {
      char v27 = 0;
    }
    else if (dword_1EBCC8F38 != 1)
    {
      if (dword_1EBCC8F38)
      {
LABEL_33:
        uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
        uint64_t v29 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
        uint64_t v4 = sub_1CD509F30((uint64_t)v34, (llvm *)a2, v28, v29, 0, 0);
        sub_1CD50BA3C((uint64_t)v34);
        MEMORY[0x1D25D9CD0](v31, 8);
        return v4;
      }
      char v27 = v11;
    }
    char v41 = v27;
    goto LABEL_33;
  }
  return 0;
}

uint64_t sub_1CC2483B8(void *a1)
{
  if (a1[11] != a1[12]) {
    return 0;
  }
  unint64_t v2 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  if (a1 + 6 == (void *)v2) {
    return 1;
  }
  if (!v2)
  {
    unint64_t v3 = 0;
LABEL_10:
    while (1)
    {
      __int16 v4 = *(_WORD *)(v3 + 44);
      if ((v4 & 4) == 0) {
        break;
      }
      unint64_t v3 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
    }
    goto LABEL_11;
  }
  unint64_t v3 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  if ((*(unsigned char *)v2 & 4) == 0) {
    goto LABEL_10;
  }
  __int16 v4 = *(_WORD *)(v2 + 44);
  unint64_t v3 = a1[6] & 0xFFFFFFFFFFFFFFF8;
LABEL_11:
  int v5 = v4 & 0xC;
  int v6 = v4 & 4;
  uint64_t v7 = *(void *)(*(void *)(v3 + 16) + 8);
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if ((v7 & 0x20) == 0)
    {
      uint64_t result = 0;
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
      {
        unint64_t v3 = *(void *)(v3 + 8);
        if ((*(unsigned char *)(*(void *)(v3 + 16) + 8) & 0x20) != 0) {
          return result;
        }
      }
      goto LABEL_16;
    }
    return 0;
  }
  if ((v7 & 0x20) != 0) {
    return 0;
  }
LABEL_16:
  if (v2 && (*(unsigned char *)v2 & 4) != 0)
  {
    unsigned int v9 = *(unsigned __int16 *)(v2 + 44);
  }
  else
  {
    while (1)
    {
      unsigned int v9 = *(unsigned __int16 *)(v2 + 44);
      if ((v9 & 4) == 0) {
        break;
      }
      unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  BOOL v8 = (v9 & 0xC) == 0;
  int v10 = (v9 >> 2) & 1;
  if (v8) {
    unsigned int v11 = 1;
  }
  else {
    unsigned int v11 = v10;
  }
  if ((*(void *)(*(void *)(v2 + 16) + 8) & 0x800) != 0) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v11;
  }
  if ((v11 & 1) == 0 && (*(void *)(*(void *)(v2 + 16) + 8) & 0x800) == 0)
  {
    do
    {
      __int16 v12 = *(_WORD *)(v2 + 44);
      uint64_t result = (v12 & 8) == 0;
      if ((v12 & 8) == 0) {
        break;
      }
      unint64_t v2 = *(void *)(v2 + 8);
    }
    while ((*(unsigned char *)(*(void *)(v2 + 16) + 9) & 8) == 0);
  }
  return result;
}

unint64_t sub_1CC2484C8(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  if (v2 == result) {
    return a2 + 48;
  }
  while (1)
  {
    uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFF8;
    if (!result || (*(unsigned char *)result & 4) == 0)
    {
      while ((*(_WORD *)(result + 44) & 4) != 0)
        uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFF8;
    }
    int v3 = **(unsigned __int16 **)(result + 16);
    if ((v3 - 13) >= 5 && v3 != 3) {
      break;
    }
    if (result == v2) {
      return a2 + 48;
    }
  }
  return result;
}

void *sub_1CC248524(size_t a1, size_t a2)
{
  uint64_t result = malloc_type_calloc(a1, a2, 0x6D9A4F0CuLL);
  if (!result && (a1 && a2 || (uint64_t result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  return result;
}

unint64_t sub_1CC248584(unint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    while (1)
    {
      int v2 = **(unsigned __int16 **)(result + 16);
      if ((v2 - 13) >= 5 && v2 != 23) {
        break;
      }
      uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFF8;
      if (!result || (*(unsigned char *)result & 4) == 0)
      {
        while ((*(_WORD *)(result + 44) & 4) != 0)
          uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFF8;
      }
      if (result == a2) {
        return a2;
      }
    }
  }
  return result;
}

uint64_t sub_1CC2485DC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 1;
  }
  int v3 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  int v4 = *(_DWORD *)(*(void *)(a2 + 8) + 24);
  if (v3 >= v4) {
    return v4 < v3;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1CC248624(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 32 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 32 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 32 * v5), (const void *)(*(void *)a2 + 32 * v5), *(void *)a2 + 32 * v6 - (*(void *)a2 + 32 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CC248708(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = *(void **)result;
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(result + 8);
  }
  if (v5)
  {
    uint64_t v9 = *(void **)result;
    do
    {
      *v9++ = a3;
      --v5;
    }
    while (v5);
  }
  unint64_t v6 = v4 - a2;
  if (v4 < a2)
  {
    uint64_t v7 = &v3[v4];
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_1CC2487C0()
{
  *(void *)&long long v4 = &v3;
  int v2 = 1;
  LODWORD(v3) = 0;
  sub_1CD50BB38((int **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCC8EB8, &dword_1CB82C000);
  *(void *)&long long v4 = "Max number of predecessors to consider tail merging";
  *((void *)&v4 + 1) = 51;
  int v1 = 1;
  int v2 = 150;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCC8F78, "tail-merge-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC8F78, &dword_1CB82C000);
  *(void *)&long long v4 = "Min number of instructions to consider tail merging";
  *((void *)&v4 + 1) = 51;
  int v1 = 1;
  int v2 = 3;
  uint64_t v3 = &v2;
  sub_1CD50BE00(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC9038, &dword_1CB82C000);
}

void sub_1CC2488DC()
{
}

llvm::raw_ostream *sub_1CC248978(llvm::raw_ostream *result)
{
  uint64_t v1 = *((void *)result + 58);
  uint64_t v2 = v1 + 320;
  uint64_t v3 = *(void *)(v1 + 328);
  if (v3 != v1 + 320)
  {
    long long v4 = result;
    do
    {
      unint64_t v5 = (unsigned int *)(*((void *)v4 + 31) + 8 * *(int *)(v3 + 24));
      unint64_t v6 = llvm::dbgs(result);
      uint64_t v7 = *(unsigned int *)(v3 + 24);
      v12[0] = &unk_1F26098B0;
      unint64_t v8 = v7 | ((unint64_t)*v5 << 32);
      v12[1] = "%%bb.%u\toffset=%08x\t";
      v12[2] = v8;
      uint64_t v9 = llvm::raw_ostream::operator<<(v6, (uint64_t)v12);
      v11[0] = &unk_1F25FED10;
      uint64_t v10 = v5[1];
      v11[1] = "size=%#x\n";
      v11[2] = v10;
      uint64_t result = llvm::raw_ostream::operator<<(v9, (uint64_t)v11);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

void sub_1CC248A60()
{
}

void sub_1CC248B38(uint64_t a1)
{
  *(void *)a1 = &unk_1F26097F0;
  free(*(void **)(a1 + 448));
  uint64_t v2 = *(void **)(a1 + 408);
  if (v2 != (void *)(a1 + 432)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v3)
  {
    long long v4 = (void *)v3[40];
    if (v4 != v3 + 42)
    {
      uint64_t v13 = v3;
      free(v4);
      uint64_t v3 = v13;
    }
    unint64_t v5 = (void *)v3[31];
    if (v5 != v3 + 33)
    {
      uint64_t v14 = v3;
      free(v5);
      uint64_t v3 = v14;
    }
    unint64_t v6 = (void *)v3[22];
    if (v6 != v3 + 24)
    {
      uint64_t v15 = v3;
      free(v6);
      uint64_t v3 = v15;
    }
    uint64_t v7 = (void *)v3[13];
    if (v7 != v3 + 15)
    {
      uint64_t v16 = v3;
      free(v7);
      uint64_t v3 = v16;
    }
    unint64_t v8 = (void *)v3[6];
    if (v8 != v3 + 8) {
      free(v8);
    }
    MEMORY[0x1D25D9CE0]();
  }
  uint64_t v9 = *(void **)(a1 + 248);
  if (v9 != (void *)(a1 + 264)) {
    free(v9);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v10 = *(void **)(a1 + 176);
  if (v10 != (void *)(a1 + 192)) {
    free(v10);
  }
  unsigned int v11 = *(void **)(a1 + 104);
  if (v11 != (void *)(a1 + 120)) {
    free(v11);
  }
  __int16 v12 = *(void **)(a1 + 32);
  if (v12 != (void *)(a1 + 48)) {
    free(v12);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC248CF8(uint64_t a1)
{
  sub_1CC248B38(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC248D30()
{
  return "Branch relaxation pass";
}

uint64_t sub_1CC248D40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v165[16] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 464) = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 480) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 176))(v3);
  *(void *)(v2 + 472) = v4;
  if ((*(unsigned int (**)(void))(*(void *)v4 + 424))()) {
    operator new();
  }
  llvm::MachineFunction::RenumberBlocks(*(llvm::MachineFunction **)(v2 + 464), 0);
  *(_DWORD *)(v2 + 256) = 0;
  unint64_t v5 = *(void **)(v2 + 464);
  unint64_t v6 = v5[14] - v5[13];
  unint64_t v7 = (v6 >> 3);
  if ((v6 >> 3))
  {
    unint64_t v8 = v6 >> 3;
    if (v7 > *(unsigned int *)(v2 + 260)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(v2 + 248), 8 * v7);
    *(_DWORD *)(v2 + 256) = v8;
    unint64_t v5 = *(void **)(v2 + 464);
  }
  uint64_t v9 = v5 + 40;
  uint64_t v10 = v5[41];
  if ((void *)v10 != v5 + 40)
  {
    do
    {
      *(_DWORD *)(*(void *)(v2 + 248) + 8 * *(int *)(v10 + 24) + 4) = sub_1CC24A444(v2, v10);
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while ((void *)v10 != v9);
    uint64_t v9 = *(void **)(*(void *)(v2 + 464) + 328);
  }
  sub_1CC24A4E4(v2, v9[1], *((_DWORD *)v9 + 6));
  uint64_t v11 = *(void *)(v2 + 464);
  __int16 v12 = (llvm::MachineBasicBlock *)(v11 + 320);
  uint64_t v13 = *(llvm::MachineBasicBlock **)(v11 + 328);
  if (v13 != (llvm::MachineBasicBlock *)(v11 + 320))
  {
    long long v148 = (unsigned int *)(v2 + 248);
    uint64_t v14 = 0;
    int v149 = (llvm *)(v2 + 400);
    uint64_t v150 = v2;
    while (1)
    {
      char v15 = 0;
      do
      {
        uint64_t LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v13, 1);
        uint64_t v17 = (void *)((char *)v13 + 48);
        if ((llvm::MachineBasicBlock *)((char *)v13 + 48) == (llvm::MachineBasicBlock *)LastNonDebugInstr) {
          goto LABEL_14;
        }
        uint64_t v18 = LastNonDebugInstr;
        if (sub_1CD50C018(LastNonDebugInstr, 1))
        {
          uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480) + 232))(*(void *)(v2 + 480), v18);
          if (v19)
          {
            uint64_t v20 = v19;
            unsigned int v21 = sub_1CC24A580(v2, v18);
            if (((*(uint64_t (**)(void, void, unint64_t))(**(void **)(v2 + 480) + 224))(*(void *)(v2 + 480), **(unsigned __int16 **)(v18 + 16), *(unsigned int *)(*(void *)(v2 + 248) + 8 * *(int *)(v20 + 24)) - (unint64_t)v21) & 1) == 0)
            {
              uint64_t v22 = *(void *)(v18 + 24);
              int v23 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480) + 144))(*(void *)(v2 + 480), v18);
              uint64_t v24 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480) + 232))(*(void *)(v2 + 480), v18);
              uint64_t v25 = *(unsigned int *)(*(void *)(v2 + 248) + 8 * *(int *)(v24 + 24));
              unsigned int v26 = sub_1CC24A580(v2, v18);
              unsigned int v27 = v26;
              uint64_t v28 = *(void *)(v2 + 248) + 8 * *(int *)(v22 + 24);
              *(_DWORD *)(v28 + 4) -= v23;
              uint64_t v29 = v22;
              if (v22 + 48 != (*(void *)(v22 + 48) & 0xFFFFFFFFFFFFFFF8))
              {
                unsigned int v151 = v26;
                uint64_t v152 = v25;
                uint64_t v154 = v24;
                unint64_t v155 = v12;
                unsigned int v156 = v14;
                uint64_t v29 = sub_1CC24A628(v2, v22);
                uint64_t v31 = *(void *)(v22 + 88);
                uint64_t v30 = *(void *)(v22 + 96);
                BOOL v153 = (llvm::MachineBasicBlock *)v22;
                uint64_t v158 = v30;
                while (v31 != v30)
                {
                  int v33 = *(_OWORD **)(*(void *)v31 + 152);
                  uint64_t v32 = *(_OWORD **)(*(void *)v31 + 160);
                  if (v32 != v33)
                  {
                    unsigned int v34 = *(_OWORD **)(v29 + 160);
                    do
                    {
                      unint64_t v35 = *(void *)(v29 + 168);
                      if ((unint64_t)v34 >= v35)
                      {
                        int v37 = *(_OWORD **)(v29 + 152);
                        uint64_t v38 = v34 - v37;
                        unint64_t v39 = v38 + 1;
                        if ((unint64_t)(v38 + 1) >> 60) {
                          abort();
                        }
                        uint64_t v40 = v35 - (void)v37;
                        if (v40 >> 3 > v39) {
                          unint64_t v39 = v40 >> 3;
                        }
                        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v41 = v39;
                        }
                        if (v41)
                        {
                          if (v41 >> 60) {
                            sub_1CB833614();
                          }
                          char v42 = (char *)operator new(16 * v41);
                        }
                        else
                        {
                          char v42 = 0;
                        }
                        int v43 = &v42[16 * v38];
                        *(_OWORD *)int v43 = *v33;
                        uint64_t v44 = v43;
                        if (v34 != v37)
                        {
                          do
                          {
                            *((_OWORD *)v44 - 1) = *(v34 - 1);
                            v44 -= 16;
                            --v34;
                          }
                          while (v34 != v37);
                          unsigned int v34 = *(_OWORD **)(v29 + 152);
                        }
                        unsigned int v36 = v43 + 16;
                        *(void *)(v29 + 152) = v44;
                        *(void *)(v29 + 160) = v43 + 16;
                        *(void *)(v29 + 168) = &v42[16 * v41];
                        if (v34) {
                          operator delete(v34);
                        }
                      }
                      else
                      {
                        *unsigned int v34 = *v33;
                        unsigned int v36 = v34 + 1;
                      }
                      *(void *)(v29 + 160) = v36;
                      ++v33;
                      unsigned int v34 = v36;
                    }
                    while (v33 != v32);
                  }
                  v31 += 8;
                  uint64_t v30 = v158;
                }
                int v45 = *(unsigned __int16 **)(v29 + 152);
                long long v46 = *(unsigned __int16 **)(v29 + 160);
                unint64_t v47 = 126 - 2 * __clz(((char *)v46 - (char *)v45) >> 4);
                if (v46 == v45) {
                  uint64_t v48 = 0;
                }
                else {
                  uint64_t v48 = v47;
                }
                sub_1CC31AF28(v45, v46, v48, 1);
                uint64_t v50 = *(unsigned __int16 **)(v29 + 152);
                int v49 = *(unsigned __int16 **)(v29 + 160);
                if (v50 == v49)
                {
                  uint64_t v51 = *(void *)(v29 + 152);
                  uint64_t v14 = v156;
                  uint64_t v24 = v154;
                  __int16 v12 = v155;
                  uint64_t v25 = v152;
                  unsigned int v27 = v151;
                }
                else
                {
                  uint64_t v51 = *(void *)(v29 + 152);
                  uint64_t v14 = v156;
                  uint64_t v24 = v154;
                  __int16 v12 = v155;
                  uint64_t v25 = v152;
                  unsigned int v27 = v151;
                  while (2)
                  {
                    int v52 = *v50;
                    for (uint64_t i = *((void *)v50 + 1); ; i |= *((void *)v50 + 1))
                    {
                      v50 += 8;
                      if (v50 == v49)
                      {
                        *(_WORD *)uint64_t v51 = v52;
                        *(void *)(v51 + 8) = i;
                        v51 += 16;
                        goto LABEL_55;
                      }
                      if (v52 != *v50) {
                        break;
                      }
                    }
                    *(_WORD *)uint64_t v51 = v52;
                    *(void *)(v51 + 8) = i;
                    v51 += 16;
                    if (v50 != v49) {
                      continue;
                    }
                    break;
                  }
                }
LABEL_55:
                uint64_t v2 = v150;
                if ((unsigned __int16 *)v51 != v49) {
                  *(void *)(v29 + 160) = v51;
                }
                llvm::MachineBasicBlock::addSuccessor((void *)v29, (void *)v24, -1);
                uint64_t v22 = (uint64_t)v153;
                llvm::MachineBasicBlock::replaceSuccessor(v153, (llvm::MachineBasicBlock *)v24, (llvm::MachineBasicBlock *)v29);
              }
              unint64_t v54 = *(unsigned __int8 **)(v18 + 56);
              int v162 = v54;
              if (v54) {
                llvm::MetadataTracking::track((uint64_t)&v162, v54, 2);
              }
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v18);
              uint64_t v55 = sub_1CC24A628(v2, *(void *)(*(void *)(v2 + 464) + 320));
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, unsigned __int8 **, uint64_t, void))(**(void **)(v2 + 480) + 240))(*(void *)(v2 + 480), v29, v24, v55, &v162, v25 - v27, *(void *)(v2 + 392));
              *(_DWORD *)(*(void *)(v2 + 248) + 8 * *(int *)(v29 + 24) + 4) = sub_1CC24A444(v2, v29);
              sub_1CC24A4E4(v2, *(void *)(v22 + 8), *(_DWORD *)(v22 + 24));
              if (v55 + 48 == (*(void *)(v55 + 48) & 0xFFFFFFFFFFFFFFF8))
              {
                uint64_t v67 = *(void *)(v2 + 464) + 320;
                *(void *)(*(void *)(*(void *)(v55 + 32) + 104) + 8 * *(unsigned int *)(v55 + 24)) = 0;
                *(_DWORD *)(v55 + 24) = -1;
                uint64_t v68 = *(void *)v55;
                uint64_t v69 = *(void **)(v55 + 8);
                *uint64_t v69 = *(void *)v55;
                *(void *)(v68 + 8) = v69;
                *(void *)uint64_t v55 = 0;
                *(void *)(v55 + 8) = 0;
                llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v67, (llvm::MachineBasicBlock *)v55);
              }
              else
              {
                uint64_t v56 = *(void *)v24;
                uint64_t FallThrough = llvm::MachineBasicBlock::getFallThrough(*(llvm::MachineBasicBlock **)v24);
                if (FallThrough)
                {
                  uint64_t v58 = FallThrough;
                  uint64_t v59 = *(void *)(v2 + 480);
                  uint64_t v161 = 0;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void, llvm::MachineBasicBlock **, void))(*(void *)v59 + 272))(v59, v56, v58, 0, 0, 0, &v161, 0);
                  if (v161)
                  {
                    int v60 = *(unsigned __int8 *)v161;
                    if ((v60 - 4) > 0x1E)
                    {
                      if ((v60 - 3) >= 0xFFFFFFFE) {
                        uint64_t v141 = v161;
                      }
                      else {
                        uint64_t v141 = 0;
                      }
                      if ((v60 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v142 = (unint64_t)v141 + 8;
                        goto LABEL_207;
                      }
                      if (v60 == 3) {
                        *((void *)v161 + 1) = 0;
                      }
                    }
                    else if ((*((unsigned char *)v161 + 1) & 0x7F) == 2 || *((_DWORD *)v161 + 3))
                    {
                      uint64_t v145 = *((void *)v161 + 2);
                      if ((v145 & 4) != 0)
                      {
                        unint64_t v142 = v145 & 0xFFFFFFFFFFFFFFF8;
                        if (v142)
                        {
LABEL_207:
                          v164[0] = &v161;
                          sub_1CC5FA668(v142 + 16, v164);
                        }
                      }
                    }
                  }
                  *(_DWORD *)(*(void *)(v2 + 248) + 8 * *(int *)(v56 + 24) + 4) = sub_1CC24A444(v2, v56);
                }
                if (v24 != v55)
                {
                  uint64_t v61 = *(uint64_t **)(v55 + 8);
                  if (v61 != (uint64_t *)v24 && v61 != (uint64_t *)v55)
                  {
                    uint64_t v63 = *v61;
                    uint64_t v64 = *(void *)v55;
                    *(void *)(v64 + 8) = v61;
                    *uint64_t v61 = v64;
                    uint64_t v65 = *(void *)v24;
                    *(void *)(v63 + 8) = v24;
                    *(void *)uint64_t v55 = v65;
                    *(void *)(v65 + 8) = v55;
                    *(void *)uint64_t v24 = v63;
                  }
                }
                llvm::MachineBasicBlock::addSuccessor((void *)v55, (void *)v24, -1);
                llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v29, (llvm::MachineBasicBlock *)v24, (llvm::MachineBasicBlock *)v55);
                if ((*(unsigned int (**)(void))(**(void **)(v2 + 472) + 424))())
                {
                  llvm::computeLiveIns(v149, (llvm::LivePhysRegs *)v55, v66);
                  llvm::addLiveIns((llvm *)v55, v149, v143);
                }
                *(_DWORD *)(*(void *)(v2 + 248) + 8 * *(int *)(v55 + 24) + 4) = sub_1CC24A444(v2, v55);
                sub_1CC24A4E4(v2, *(void *)(v56 + 8), *(_DWORD *)(v56 + 24));
              }
              uint64_t v17 = (void *)((char *)v13 + 48);
              if (v162)
              {
                int v70 = *v162;
                if ((v70 - 4) > 0x1E)
                {
                  if ((v70 - 3) >= 0xFFFFFFFE) {
                    BOOL v139 = v162;
                  }
                  else {
                    BOOL v139 = 0;
                  }
                  if ((v70 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v140 = (unint64_t)(v139 + 8);
                    goto LABEL_199;
                  }
                  if (v70 == 3) {
                    *((void *)v162 + 1) = 0;
                  }
                }
                else if ((v162[1] & 0x7F) == 2 || *((_DWORD *)v162 + 3))
                {
                  uint64_t v144 = *((void *)v162 + 2);
                  if ((v144 & 4) != 0)
                  {
                    unint64_t v140 = v144 & 0xFFFFFFFFFFFFFFF8;
                    if (v140)
                    {
LABEL_199:
                      v164[0] = &v162;
                      sub_1CC5FA668(v140 + 16, v164);
                    }
                  }
                }
              }
              char v15 = 1;
            }
          }
        }
        unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v13);
        if (v17 != (void *)FirstTerminator)
        {
          uint64_t v72 = FirstTerminator;
          while (!v72 || (*(unsigned char *)v72 & 4) == 0)
          {
            __int16 v73 = *(_WORD *)(v72 + 44);
            if ((v73 & 8) == 0) {
              goto LABEL_91;
            }
            uint64_t v74 = v72;
            do
              uint64_t v74 = *(void *)(v74 + 8);
            while ((*(_WORD *)(v74 + 44) & 8) != 0);
LABEL_92:
            unint64_t v75 = *(void *)(v74 + 8);
            uint64_t v76 = *(void *)(v72 + 16);
            uint64_t v77 = *(void *)(v76 + 8);
            if ((v73 & 0xC) != 0 && (v73 & 4) == 0)
            {
              uint64_t v78 = v17;
              uint64_t v79 = v12;
              uint64_t v80 = v14;
              uint64_t v81 = v2;
              uint64_t v82 = v72;
              if ((v77 & 0x400) != 0)
              {
LABEL_100:
                if ((v77 & 0x100) == 0)
                {
                  uint64_t v83 = v72;
                  while ((*(_WORD *)(v83 + 44) & 8) != 0)
                  {
                    uint64_t v83 = *(void *)(v83 + 8);
                    if (*(unsigned char *)(*(void *)(v83 + 16) + 9)) {
                      goto LABEL_109;
                    }
                  }
                  if ((v77 & 0x800) == 0)
                  {
                    uint64_t v84 = v72;
                    while (1)
                    {
                      uint64_t v2 = v81;
                      uint64_t v14 = v80;
                      __int16 v12 = v79;
                      uint64_t v17 = v78;
                      if ((*(_WORD *)(v84 + 44) & 8) == 0) {
                        break;
                      }
                      uint64_t v84 = *(void *)(v84 + 8);
                      if ((*(unsigned char *)(*(void *)(v84 + 16) + 9) & 8) != 0) {
                        goto LABEL_109;
                      }
                    }
LABEL_110:
                    if (*(_WORD *)v76 == 33) {
                      goto LABEL_95;
                    }
                    uint64_t v85 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480) + 232))(*(void *)(v2 + 480), v72);
                    unsigned int v86 = sub_1CC24A580(v2, v72);
                    if ((*(uint64_t (**)(void, void, unint64_t))(**(void **)(v2 + 480) + 224))(*(void *)(v2 + 480), **(unsigned __int16 **)(v72 + 16), *(unsigned int *)(*(void *)(v2 + 248) + 8 * *(int *)(v85 + 24)) - (unint64_t)v86))goto LABEL_95; {
                    if ((void *)v75 != v17)
                    }
                    {
                      __int16 v87 = *(_WORD *)(v75 + 44);
                      uint64_t v88 = *(void *)(*(void *)(v75 + 16) + 8);
                      if ((v87 & 0xC) == 0 || (v87 & 4) != 0)
                      {
                        if ((*(void *)(*(void *)(v75 + 16) + 8) & 0xD00) != 0x400) {
                          goto LABEL_116;
                        }
LABEL_163:
                        uint64_t v115 = *(void *)(v2 + 464);
                        uint64_t v116 = *(void *)(v75 + 24);
                        unint64_t v117 = *(const llvm::BasicBlock **)(v116 + 16);
                        uint64_t v118 = *(void *)(v115 + 312);
                        if (v118)
                        {
                          *(void *)(v115 + 312) = *(void *)v118;
                        }
                        else
                        {
                          *(void *)(v115 + 208) += 232;
                          uint64_t v119 = *(void *)(v115 + 128);
                          if (((v119 + 7) & 0xFFFFFFFFFFFFFFF8) - v119 + 232 > *(void *)(v115 + 136) - v119)
                          {
                            uint64_t v159 = v117;
                            unsigned int v136 = *(_DWORD *)(v115 + 152) >> 7;
                            if (v136 >= 0x1E) {
                              LOBYTE(v136) = 30;
                            }
                            uint64_t v157 = 4096 << v136;
                            uint64_t v118 = (uint64_t)operator new(4096 << v136, (std::align_val_t)8uLL);
                            unint64_t v137 = *(unsigned int *)(v115 + 152);
                            if (v137 >= *(unsigned int *)(v115 + 156)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            unint64_t v117 = v159;
                            *(void *)(*(void *)(v115 + 144) + 8 * v137) = v118;
                            ++*(_DWORD *)(v115 + 152);
                            *(void *)(v115 + 128) = v118 + 232;
                            *(void *)(v115 + 136) = v118 + v157;
                          }
                          else
                          {
                            uint64_t v118 = (v119 + 7) & 0xFFFFFFFFFFFFFFF8;
                            *(void *)(v115 + 128) = v118 + 232;
                          }
                        }
                        llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v118, (llvm::MachineFunction *)v115, v117);
                        uint64_t v120 = v116;
                        unint64_t v121 = *(uint64_t **)(v116 + 8);
                        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(void *)(v2 + 464) + 320, v118);
                        uint64_t v122 = *v121;
                        *(void *)uint64_t v118 = *v121;
                        *(void *)(v118 + 8) = v121;
                        *(void *)(v122 + 8) = v118;
                        *unint64_t v121 = v118;
                        unint64_t v123 = (unint64_t *)(v120 + 48);
                        if (v120 + 48 != v75 && v118 != v120)
                        {
                          unint64_t v124 = *(void *)(v118 + 40);
                          BOOL v125 = (unint64_t *)v75;
                          do
                          {
                            v125[3] = v124;
                            BOOL v125 = (unint64_t *)v125[1];
                          }
                          while (v125 != v123);
                          unint64_t v126 = *v123;
                          unint64_t v127 = *v123 & 0xFFFFFFFFFFFFFFF8;
                          unint64_t v128 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
                          *(void *)(v128 + 8) = v123;
                          *unint64_t v123 = v128 | v126 & 7;
                          unint64_t v129 = *(void *)(v118 + 48) & 0xFFFFFFFFFFFFFFF8;
                          *(void *)(v127 + 8) = v118 + 48;
                          *(void *)unint64_t v75 = v129 | *(void *)v75 & 7;
                          *(void *)(v129 + 8) = v75;
                          *(void *)(v118 + 48) = v126 & 0xFFFFFFFFFFFFFFF8 | *(void *)(v118 + 48) & 7;
                        }
                        uint64_t v130 = *(void *)(v2 + 480);
                        int v162 = 0;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void, unsigned __int8 **, void))(*(void *)v130 + 272))(v130, v120, v118, 0, 0, 0, &v162, 0);
                        if (v162)
                        {
                          int v131 = *v162;
                          if ((v131 - 4) > 0x1E)
                          {
                            if ((v131 - 3) >= 0xFFFFFFFE) {
                              uint64_t v134 = v162;
                            }
                            else {
                              uint64_t v134 = 0;
                            }
                            if ((v131 - 3) >= 0xFFFFFFFE)
                            {
                              unint64_t v135 = (unint64_t)(v134 + 8);
                              goto LABEL_182;
                            }
                            if (v131 == 3) {
                              *((void *)v162 + 1) = 0;
                            }
                          }
                          else if ((v162[1] & 0x7F) == 2 || *((_DWORD *)v162 + 3))
                          {
                            uint64_t v138 = *((void *)v162 + 2);
                            if ((v138 & 4) != 0)
                            {
                              unint64_t v135 = v138 & 0xFFFFFFFFFFFFFFF8;
                              if (v135)
                              {
LABEL_182:
                                v164[0] = &v162;
                                sub_1CC5FA668(v135 + 16, v164);
                              }
                            }
                          }
                        }
                        sub_1CC24A778(v148, *(void *)(v2 + 248) + 8 * *(int *)(v118 + 24), 0);
                        llvm::MachineBasicBlock::transferSuccessors((char *)v118, (llvm::MachineBasicBlock *)v120);
                        llvm::MachineBasicBlock::addSuccessor((void *)v120, (void *)v118, -1);
                        llvm::MachineBasicBlock::addSuccessor((void *)v120, (void *)v85, -1);
                        llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v120, (llvm::MachineBasicBlock *)v118);
                        *(_DWORD *)(*(void *)(v2 + 248) + 8 * *(int *)(v120 + 24) + 4) = sub_1CC24A444(v2, v120);
                        *(_DWORD *)(*(void *)(v2 + 248) + 8 * *(int *)(v118 + 24) + 4) = sub_1CC24A444(v2, v118);
                        sub_1CC24A4E4(v2, *(void *)(v120 + 8), *(_DWORD *)(v120 + 24));
                        if ((*(unsigned int (**)(void))(**(void **)(v2 + 472) + 424))())
                        {
                          llvm::computeLiveIns(v149, (llvm::LivePhysRegs *)v118, v132);
                          llvm::addLiveIns((llvm *)v118, v149, v133);
                        }
                        goto LABEL_137;
                      }
                      uint64_t v109 = v12;
                      uint64_t v110 = v14;
                      uint64_t v111 = v2;
                      unint64_t v112 = v75;
                      if ((v88 & 0x400) != 0)
                      {
LABEL_153:
                        uint64_t v2 = v111;
                        uint64_t v14 = v110;
                        __int16 v12 = v109;
                        if ((v88 & 0x100) == 0)
                        {
                          unint64_t v113 = v75;
                          while ((*(_WORD *)(v113 + 44) & 8) != 0)
                          {
                            unint64_t v113 = *(void *)(v113 + 8);
                            uint64_t v2 = v111;
                            uint64_t v14 = v110;
                            __int16 v12 = v109;
                            if (*(unsigned char *)(*(void *)(v113 + 16) + 9)) {
                              goto LABEL_116;
                            }
                          }
                          uint64_t v2 = v111;
                          uint64_t v14 = v110;
                          __int16 v12 = v109;
                          if ((v88 & 0x800) == 0)
                          {
                            unint64_t v114 = v75;
                            while ((*(_WORD *)(v114 + 44) & 8) != 0)
                            {
                              unint64_t v114 = *(void *)(v114 + 8);
                              if ((*(unsigned char *)(*(void *)(v114 + 16) + 9) & 8) != 0) {
                                goto LABEL_116;
                              }
                            }
                            goto LABEL_163;
                          }
                        }
                      }
                      else
                      {
                        while (1)
                        {
                          uint64_t v2 = v111;
                          uint64_t v14 = v110;
                          __int16 v12 = v109;
                          if ((*(_WORD *)(v112 + 44) & 8) == 0) {
                            break;
                          }
                          unint64_t v112 = *(void *)(v112 + 8);
                          if ((*(unsigned char *)(*(void *)(v112 + 16) + 9) & 4) != 0) {
                            goto LABEL_153;
                          }
                        }
                      }
                    }
LABEL_116:
                    unint64_t v89 = *(unsigned __int8 **)(v72 + 56);
                    int v162 = v89;
                    if (v89) {
                      llvm::MetadataTracking::track((uint64_t)&v162, v89, 2);
                    }
                    uint64_t v90 = *(void *)(v72 + 24);
                    unsigned __int8 v160 = 0;
                    uint64_t v161 = 0;
                    v164[0] = v165;
                    v164[1] = (void *)0x400000000;
                    (*(void (**)(void, uint64_t, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, void))(**(void **)(v2 + 480) + 248))(*(void *)(v2 + 480), v90, &v161, &v160, v164, 0);
                    char v91 = (*(uint64_t (**)(void))(**(void **)(v2 + 480) + 728))();
                    unint64_t v92 = v160;
                    if (v91)
                    {
                      if (!v160) {
                        unsigned __int8 v160 = *(llvm::MachineBasicBlock **)(v90 + 8);
                      }
                      unint64_t v93 = (int *)sub_1CC24A628(v2, v90);
                      uint64_t v94 = *(void *)(v2 + 248) + 8 * v93[6];
                      int v163 = 0;
                      (*(void (**)(void))(**(void **)(v2 + 480) + 272))();
                      *(_DWORD *)(v94 + 4) += v163;
                      llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v90, v161, (llvm::MachineBasicBlock *)v93);
                      llvm::MachineBasicBlock::addSuccessor(v93, v161, -1);
                      uint64_t v95 = *(void *)(v2 + 248) + 8 * *(int *)(v90 + 24);
                      int v163 = 0;
                      (*(void (**)(void))(**(void **)(v2 + 480) + 264))();
                      *(_DWORD *)(v95 + 4) -= v163;
                      uint64_t v96 = *(void *)(v2 + 248) + 8 * *(int *)(v90 + 24);
                      int v163 = 0;
                      (*(void (**)(void))(**(void **)(v2 + 480) + 272))();
                      *(_DWORD *)(v96 + 4) += v163;
                      sub_1CC24A4E4(v2, *(void *)(v90 + 8), *(_DWORD *)(v90 + 24));
                      if ((*(unsigned int (**)(void))(**(void **)(v2 + 472) + 424))())
                      {
LABEL_146:
                        llvm::computeLiveIns(v149, (llvm::LivePhysRegs *)v93, v97);
                        llvm::addLiveIns((llvm *)v93, v149, v107);
                      }
                    }
                    else
                    {
                      if (!v160) {
                        goto LABEL_128;
                      }
                      unsigned int v98 = sub_1CC24A580(v2, v72);
                      if ((*(unsigned int (**)(void, void, unint64_t))(**(void **)(v2 + 480)
                                                                                            + 224))(*(void *)(v2 + 480), **(unsigned __int16 **)(v72 + 16), *(unsigned int *)(*(void *)(v2 + 248) + 8 * *((int *)v92 + 6)) - (unint64_t)v98))
                      {
                        uint64_t v99 = *(void *)(v2 + 248) + 8 * *(int *)(v90 + 24);
                        int v163 = 0;
                        (*(void (**)(void, uint64_t, int *))(**(void **)(v2 + 480) + 264))(*(void *)(v2 + 480), v90, &v163);
                        *(_DWORD *)(v99 + 4) -= v163;
                        uint64_t v100 = *(void *)(v2 + 248) + 8 * *(int *)(v90 + 24);
                        int v163 = 0;
                        (*(void (**)(void))(**(void **)(v2 + 480) + 272))();
                        *(_DWORD *)(v100 + 4) += v163;
                        sub_1CC24A4E4(v2, *(void *)(v90 + 8), *(_DWORD *)(v90 + 24));
                        goto LABEL_131;
                      }
                      if (v160)
                      {
                        unint64_t v93 = (int *)sub_1CC24A628(v2, v90);
                        uint64_t v101 = *(void *)(v2 + 248) + 8 * v93[6];
                        int v163 = 0;
                        (*(void (**)(void))(**(void **)(v2 + 480) + 272))();
                        *(_DWORD *)(v101 + 4) += v163;
                        llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v90, v160, (llvm::MachineBasicBlock *)v93);
                        llvm::MachineBasicBlock::addSuccessor(v93, v160, -1);
                      }
                      else
                      {
LABEL_128:
                        unint64_t v93 = 0;
                      }
                      uint64_t v102 = *(void *)(v2 + 248) + 8 * *(int *)(v90 + 24);
                      int v163 = 0;
                      (*(void (**)(void, uint64_t, int *))(**(void **)(v2 + 480) + 264))(*(void *)(v2 + 480), v90, &v163);
                      *(_DWORD *)(v102 + 4) -= v163;
                      uint64_t v103 = *(void *)(v2 + 248) + 8 * *(int *)(v90 + 24);
                      int v163 = 0;
                      (*(void (**)(void))(**(void **)(v2 + 480) + 272))();
                      *(_DWORD *)(v103 + 4) += v163;
                      sub_1CC24A4E4(v2, *(void *)(v90 + 8), *(_DWORD *)(v90 + 24));
                      if (v93
                        && (*(unsigned int (**)(void, void))(**(void **)(v2 + 472) + 424))(*(void *)(v2 + 472), *(void *)(v2 + 464)))
                      {
                        goto LABEL_146;
                      }
                    }
LABEL_131:
                    if (v164[0] != v165) {
                      free(v164[0]);
                    }
                    if (!v162) {
                      goto LABEL_137;
                    }
                    int v104 = *v162;
                    if ((v104 - 4) > 0x1E)
                    {
                      if ((v104 - 3) >= 0xFFFFFFFE) {
                        uint64_t v105 = v162;
                      }
                      else {
                        uint64_t v105 = 0;
                      }
                      if ((v104 - 3) < 0xFFFFFFFE)
                      {
                        if (v104 == 3) {
                          *((void *)v162 + 1) = 0;
                        }
                        goto LABEL_137;
                      }
                      unint64_t v106 = (unint64_t)(v105 + 8);
                    }
                    else
                    {
                      if ((v162[1] & 0x7F) != 2 && !*((_DWORD *)v162 + 3)) {
                        goto LABEL_137;
                      }
                      uint64_t v108 = *((void *)v162 + 2);
                      if ((v108 & 4) == 0) {
                        goto LABEL_137;
                      }
                      unint64_t v106 = v108 & 0xFFFFFFFFFFFFFFF8;
                      if (!v106) {
                        goto LABEL_137;
                      }
                    }
                    v164[0] = &v162;
                    sub_1CC5FA668(v106 + 16, v164);
LABEL_137:
                    unint64_t v75 = llvm::MachineBasicBlock::getFirstTerminator(v13);
                    char v15 = 1;
                    goto LABEL_95;
                  }
                }
              }
              else
              {
                while ((*(_WORD *)(v82 + 44) & 8) != 0)
                {
                  uint64_t v82 = *(void *)(v82 + 8);
                  if ((*(unsigned char *)(*(void *)(v82 + 16) + 9) & 4) != 0) {
                    goto LABEL_100;
                  }
                }
              }
LABEL_109:
              uint64_t v2 = v81;
              uint64_t v14 = v80;
              __int16 v12 = v79;
              uint64_t v17 = v78;
            }
            else if ((*(void *)(v76 + 8) & 0xD00) == 0x400)
            {
              goto LABEL_110;
            }
LABEL_95:
            uint64_t v72 = v75;
            if (v17 == (void *)v75) {
              goto LABEL_14;
            }
          }
          __int16 v73 = *(_WORD *)(v72 + 44);
LABEL_91:
          uint64_t v74 = v72;
          goto LABEL_92;
        }
LABEL_14:
        uint64_t v13 = (llvm::MachineBasicBlock *)*((void *)v13 + 1);
      }
      while (v13 != v12);
      if (v15)
      {
        uint64_t v146 = *(void *)(v2 + 464);
        __int16 v12 = (llvm::MachineBasicBlock *)(v146 + 320);
        uint64_t v13 = *(llvm::MachineBasicBlock **)(v146 + 328);
        uint64_t v14 = 1;
        if (v13 != (llvm::MachineBasicBlock *)(v146 + 320)) {
          continue;
        }
      }
      goto LABEL_221;
    }
  }
  LOBYTE(v14) = 0;
LABEL_221:
  *(_DWORD *)(v2 + 256) = 0;
  return v14 & 1;
}

uint64_t sub_1CC24A444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 48;
  uint64_t v3 = *(void *)(a2 + 56);
  if (v3 == a2 + 48) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    unsigned int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 480) + 144))(*(void *)(a1 + 480), v3);
    if (!v3 || (*(unsigned char *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
        uint64_t v3 = *(void *)(v3 + 8);
    }
    v5 += v6;
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3 != v2);
  return v5;
}

uint64_t sub_1CC24A4E4(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 464) + 320;
  if (v3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *(void *)(result + 248);
    LODWORD(v6) = *(_DWORD *)(v5 + 8 * a3);
    do
    {
      uint64_t v7 = *(unsigned int *)(a2 + 24);
      unsigned int v8 = *(_DWORD *)(v5 + 8 * v4 + 4) + v6;
      unsigned int v9 = *(unsigned __int8 *)(a2 + 176);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(a2 + 32) + 352);
      uint64_t result = -(1 << v9);
      uint64_t v11 = (((1 << v9) + v8 - 1) & result) + (1 << v9) + (-1 << v10);
      uint64_t v6 = ((1 << v9) + v8 - 1) & result;
      if (v9 > v10) {
        LODWORD(v6) = v11;
      }
      *(_DWORD *)(v5 + 8 * v7) = v6;
      a2 = *(void *)(a2 + 8);
      uint64_t v4 = v7;
    }
    while (a2 != v3);
  }
  return result;
}

uint64_t sub_1CC24A580(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 248) + 8 * *(int *)(v2 + 24));
  for (uint64_t i = *(void *)(v2 + 56); i != a2; uint64_t i = *(void *)(i + 8))
  {
    int v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 480) + 144))(*(void *)(a1 + 480), i);
    if (!i || (*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
    uint64_t v3 = (v7 + v3);
  }
  return v3;
}

uint64_t sub_1CC24A628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 464);
  uint64_t v5 = *(const llvm::BasicBlock **)(a2 + 16);
  uint64_t v6 = *(void *)(v4 + 312);
  if (v6)
  {
    *(void *)(v4 + 312) = *(void *)v6;
  }
  else
  {
    *(void *)(v4 + 208) += 232;
    uint64_t v7 = *(void *)(v4 + 128);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 232 > *(void *)(v4 + 136) - v7)
    {
      unsigned int v11 = *(_DWORD *)(v4 + 152) >> 7;
      if (v11 >= 0x1E) {
        LOBYTE(v11) = 30;
      }
      uint64_t v12 = 4096 << v11;
      uint64_t v6 = (uint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
      unsigned int v13 = *(_DWORD *)(v4 + 152);
      if (v13 >= *(_DWORD *)(v4 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v4 + 144) + 8 * v13) = v6;
      ++*(_DWORD *)(v4 + 152);
      *(void *)(v4 + 128) = v6 + 232;
      *(void *)(v4 + 136) = v6 + v12;
    }
    else
    {
      uint64_t v6 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v4 + 128) = v6 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v6, (llvm::MachineFunction *)v4, v5);
  unsigned int v8 = *(uint64_t **)(a2 + 8);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(void *)(a1 + 464) + 320, v6);
  uint64_t v9 = *v8;
  *(void *)uint64_t v6 = *v8;
  *(void *)(v6 + 8) = v8;
  *(void *)(v9 + 8) = v6;
  *unsigned int v8 = v6;
  sub_1CC24A778((unsigned int *)(a1 + 248), *(void *)(a1 + 248) + 8 * *(int *)(v6 + 24), 0);
  return v6;
}

unsigned int *sub_1CC24A778(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v6 = result[2];
  if (*(void *)result + 8 * v6 == a2)
  {
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v5 + 8 * v6) = a3;
    ++result[2];
  }
  else
  {
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = (void *)(v5 + 8 * ((a2 - v5) >> 3));
    *(void *)(v5 + 8 * v6) = *(void *)(v5 + 8 * v6 - 8);
    uint64_t v8 = result[2];
    uint64_t v9 = *(void *)result + 8 * v8 - 8;
    if ((void *)v9 != v7)
    {
      uint64_t result = (unsigned int *)memmove(v7 + 1, v7, v9 - (void)v7);
      LODWORD(v8) = v4[2];
    }
    v4[2] = v8 + 1;
    *uint64_t v7 = a3;
  }
  return result;
}

void llvm::initializeBreakFalseDepsPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618B88, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC24A8E0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EA618B88, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC24A8E0(uint64_t a1)
{
}

void llvm::createBreakFalseDeps(llvm *this)
{
}

uint64_t llvm::BreakFalseDeps::pickBestRegisterForUndef(llvm::BreakFalseDeps *this, llvm::MachineInstr *a2, unsigned int a3, unsigned int a4)
{
  uint64_t result = 0;
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v7 = (int *)(v6 + 32 * a3);
  int v8 = *v7;
  BOOL v9 = (*v7 & 0x10000FF) == 0;
  if ((*v7 & 0xF00000) == 0) {
    BOOL v9 = 0;
  }
  if ((v8 & 0x8000000) != 0 && !v9)
  {
    uint64_t v12 = v6 + 32 * a3;
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v13 + 16) + 8);
      if ((v8 & 0x1000000) != 0)
      {
        if ((v14 & 0x100000000) != 0) {
          return 0;
        }
      }
      else if ((v14 & 0x80000000) != 0)
      {
        return 0;
      }
    }
    unsigned int v15 = *(_DWORD *)(v12 + 4);
    uint64_t v16 = *((void *)this + 33);
    uint64_t v17 = (void *)(v16 + 8);
    if (!v16) {
      uint64_t v17 = 0;
    }
    unint64_t v18 = *(unsigned int *)(*v17 + 24 * v15 + 16);
    __int16 v19 = v18 & 0xF;
    unsigned int v21 = v17 + 5;
    uint64_t v20 = v17[5];
    uint64_t v22 = (_WORD *)(v21[1] + ((v18 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v23 = *v22 + v19 * v15;
    do
    {
      char v24 = 0;
      ++v22;
      uint64_t v25 = (unsigned __int16 *)(v20 + 4 * v23);
      int v26 = *v25;
      int v27 = v25[1];
      while (v26)
      {
        char v28 = v24;
        char v24 = 1;
        int v26 = v27;
        int v27 = 0;
        if (v28) {
          return 0;
        }
      }
      v23 += *v22;
    }
    while (*v22);
    uint64_t v29 = (unsigned __int16 ***)(*(uint64_t (**)(void, void))(**((void **)this + 32) + 16))(*((void *)this + 32), *((void *)a2 + 2));
    uint64_t v30 = *((unsigned int *)a2 + 10);
    if (v30)
    {
      uint64_t v31 = 32 * v30;
      uint64_t v32 = (_DWORD *)(*((void *)a2 + 4) + 4);
      while (1)
      {
        if ((*(v32 - 1) & 0x110000FF) == 0)
        {
          unint64_t v33 = *v32;
          if ((v33 - 1) <= 0x3FFFFFFE
            && *v32 >> 3 < *((unsigned __int16 *)*v29 + 11)
            && ((*((unsigned __int8 *)(*v29)[1] + (v33 >> 3)) >> (v33 & 7)) & 1) != 0)
          {
            break;
          }
        }
        v32 += 8;
        v31 -= 32;
        if (!v31) {
          goto LABEL_25;
        }
      }
      uint64_t v45 = 1;
      goto LABEL_44;
    }
LABEL_25:
    unsigned int v34 = *((unsigned __int16 *)*v29 + 12);
    uint64_t v35 = *((void *)this + 34);
    if (*((_DWORD *)this + 70) != *(_DWORD *)(v35 + 24 * *((unsigned __int16 *)*v29 + 12))) {
      llvm::RegisterClassInfo::compute((uint64_t *)this + 34, v29);
    }
    uint64_t v36 = v35 + 24 * v34;
    uint64_t v37 = *(unsigned int *)(v36 + 4);
    if (!v37) {
      return 0;
    }
    unsigned int v38 = 0;
    unint64_t v39 = *(unsigned __int16 **)(v36 + 16);
    uint64_t v40 = 2 * v37;
    LODWORD(v33) = v15;
    do
    {
      unsigned int v41 = *v39;
      unsigned int Clearance = llvm::ReachingDefAnalysis::getClearance(*((void *)this + 75), (uint64_t)a2, v41);
      if (Clearance <= a4) {
        int v43 = 0;
      }
      else {
        int v43 = 10;
      }
      if (Clearance <= v38) {
        int v43 = 11;
      }
      else {
        LODWORD(v33) = v41;
      }
      if (v43 != 11 && v43 != 0) {
        break;
      }
      if (Clearance > v38) {
        unsigned int v38 = Clearance;
      }
      ++v39;
      v40 -= 2;
    }
    while (v40);
    uint64_t v45 = 0;
    uint64_t result = 0;
    if (v33 != v15)
    {
LABEL_44:
      llvm::MachineOperand::setReg((uint64_t)v7, v33);
      return v45;
    }
  }
  return result;
}

BOOL llvm::BreakFalseDeps::shouldBreakDependence(llvm::BreakFalseDeps *this, llvm::MachineInstr *a2, unsigned int a3, unsigned int a4)
{
  return llvm::ReachingDefAnalysis::getClearance(*((void *)this + 75), (uint64_t)a2, *(_DWORD *)(*((void *)a2 + 4) + 32 * a3 + 4)) < a4;
}

void llvm::BreakFalseDeps::processDefs(llvm::BreakFalseDeps *this, llvm::MachineInstr *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  unsigned int v5 = *(unsigned __int8 *)(v4 + 4);
  int v6 = *(unsigned __int16 *)(v4 + 2);
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v8 = v5;
      int v9 = *(_DWORD *)(v7 + 32 * v5);
      if (!(_BYTE)v9)
      {
        int v10 = *(_DWORD *)(v7 + 32 * v8 + 4);
        if ((v9 & 0x11000000) == 0x10000000 && v10 != 0)
        {
          unsigned int v12 = (*(uint64_t (**)(void, llvm::MachineInstr *, uint64_t, void))(**((void **)this + 32)
                                                                                         + 1040))(*((void *)this + 32), a2, v8, *((void *)this + 33));
          if (v12)
          {
            unsigned int v13 = v12;
            if ((llvm::BreakFalseDeps::pickBestRegisterForUndef(this, a2, v8, v12) & 1) == 0
              && llvm::ReachingDefAnalysis::getClearance(*((void *)this + 75), (uint64_t)a2, *(_DWORD *)(*((void *)a2 + 4) + 32 * v8 + 4)) < v13)
            {
              uint64_t v14 = (char *)*((void *)this + 65);
              unint64_t v15 = *((void *)this + 66);
              if ((unint64_t)v14 >= v15)
              {
                uint64_t v17 = (char *)*((void *)this + 64);
                uint64_t v18 = (v14 - v17) >> 4;
                unint64_t v19 = v18 + 1;
                if ((unint64_t)(v18 + 1) >> 60) {
                  abort();
                }
                uint64_t v20 = v15 - (void)v17;
                if (v20 >> 3 > v19) {
                  unint64_t v19 = v20 >> 3;
                }
                if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
                }
                unint64_t v31 = v19;
                if (v19)
                {
                  if (v19 >> 60) {
                    sub_1CB833614();
                  }
                  unsigned int v21 = (char *)operator new(16 * v19);
                }
                else
                {
                  unsigned int v21 = 0;
                }
                uint64_t v22 = &v21[16 * v18];
                *(void *)uint64_t v22 = a2;
                *((void *)v22 + 1) = v8;
                unsigned __int16 v23 = v22;
                if (v14 != v17)
                {
                  do
                  {
                    *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
                    v23 -= 16;
                    v14 -= 16;
                  }
                  while (v14 != v17);
                  uint64_t v14 = (char *)*((void *)this + 64);
                }
                *((void *)this + 64) = v23;
                uint64_t v16 = v22 + 16;
                *((void *)this + 65) = v22 + 16;
                *((void *)this + 66) = &v21[16 * v31];
                if (v14) {
                  operator delete(v14);
                }
              }
              else
              {
                *(void *)uint64_t v14 = a2;
                *((void *)v14 + 1) = v8;
                uint64_t v16 = v14 + 16;
              }
              *((void *)this + 65) = v16;
            }
          }
        }
      }
      unsigned int v5 = v8 + 1;
    }
    while (v8 + 1 != v6);
  }
  uint64_t v24 = *(void *)(**((void **)this + 31) + 112);
  if (!v24 || (*(char *)(v24 + 13) & 0x80000000) == 0)
  {
    if ((*(unsigned char *)(*((void *)a2 + 2) + 8) & 2) != 0)
    {
      unsigned int v25 = *((_DWORD *)a2 + 10);
      if (!v25) {
        return;
      }
    }
    else
    {
      unsigned int v25 = *(unsigned __int8 *)(v4 + 4);
      if (!*(unsigned char *)(v4 + 4)) {
        return;
      }
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = v25;
    do
    {
      uint64_t v29 = *((void *)a2 + 4);
      if (!*(_DWORD *)(v29 + v26) && (*(_DWORD *)(v29 + v26) & 0x1000000) != 0)
      {
        if (*(_DWORD *)(v29 + v26 + 4))
        {
          unsigned int v30 = (*(uint64_t (**)(void, llvm::MachineInstr *, uint64_t, void))(**((void **)this + 32)
                                                                                         + 1032))(*((void *)this + 32), a2, v27, *((void *)this + 33));
          if (v30)
          {
            if (llvm::ReachingDefAnalysis::getClearance(*((void *)this + 75), (uint64_t)a2, *(_DWORD *)(*((void *)a2 + 4) + v26 + 4)) < v30)(*(void (**)(void, llvm::MachineInstr *, uint64_t, void))(**((void **)this + 32) + 1048))(*((void *)this + 32), a2, v27, *((void *)this + 33)); {
          }
            }
        }
      }
      ++v27;
      v26 += 32;
    }
    while (v28 != v27);
  }
}

uint64_t *llvm::BreakFalseDeps::processUndefReads(uint64_t *this, llvm::MachineBasicBlock *a2)
{
  if (this[64] != this[65])
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(*(void *)this[31] + 112);
    if (!v4 || (*(char *)(v4 + 13) & 0x80000000) == 0)
    {
      uint64_t v5 = this[33];
      this[67] = v5;
      this[69] = 0;
      sub_1CD50BAB8(this + 68, *(_DWORD *)(v5 + 16));
      this = llvm::LivePhysRegs::addLiveOutsNoPristines((llvm::LivePhysRegs *)(v3 + 67), a2);
      uint64_t v7 = *((void *)a2 + 6);
      int v6 = (llvm::MachineBasicBlock *)((char *)a2 + 48);
      uint64_t v8 = (const llvm::MachineInstr *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v8 & 4) == 0)
      {
        while ((*((_WORD *)v8 + 22) & 4) != 0)
          uint64_t v8 = (const llvm::MachineInstr *)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8);
      }
      if (v8 != v6)
      {
        uint64_t v9 = v3[65];
        int v10 = *(const llvm::MachineInstr **)(v9 - 16);
        uint64_t v11 = *(unsigned int *)(v9 - 8);
        do
        {
          llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)(v3 + 67), v8);
          this = llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)(v3 + 67), v8);
          if (v10 == v8)
          {
            uint64_t v12 = *(unsigned __int16 *)(*((void *)v10 + 4) + 32 * v11 + 4);
            unsigned int v13 = *(unsigned __int8 *)(v3[73] + v12);
            uint64_t v14 = v3[69];
            if (v13 >= v14) {
              goto LABEL_17;
            }
            while (1)
            {
              unsigned int v15 = v13;
              if (*(unsigned __int16 *)(v3[68] + 2 * v13) == v12) {
                break;
              }
              v13 += 256;
              if (v15 + 256 >= v14) {
                goto LABEL_17;
              }
            }
            if (v14 == v13) {
LABEL_17:
            }
              this = (uint64_t *)(*(uint64_t (**)(uint64_t, const llvm::MachineInstr *, uint64_t, uint64_t))(*(void *)v3[32] + 1048))(v3[32], v10, v11, v3[33]);
            uint64_t v16 = v3[65];
            v3[65] = v16 - 16;
            if (v3[64] == v16 - 16) {
              return this;
            }
            int v10 = *(const llvm::MachineInstr **)(v16 - 32);
            uint64_t v11 = *(unsigned int *)(v16 - 24);
          }
          uint64_t v8 = (const llvm::MachineInstr *)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8);
          if (!v8 || (*(unsigned char *)v8 & 4) == 0)
          {
            while ((*((_WORD *)v8 + 22) & 4) != 0)
              uint64_t v8 = (const llvm::MachineInstr *)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8);
          }
        }
        while (v8 != v6);
      }
    }
  }
  return this;
}

uint64_t *llvm::BreakFalseDeps::processBasicBlock(llvm::BreakFalseDeps *this, llvm::MachineBasicBlock *a2)
{
  *((void *)this + 65) = *((void *)this + 64);
  uint64_t v4 = (char *)a2 + 48;
  for (uint64_t i = *((void *)a2 + 7); (char *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (**(unsigned __int16 **)(i + 16) - 13 >= 5) {
      llvm::BreakFalseDeps::processDefs(this, (llvm::MachineInstr *)i);
    }
    if ((*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
  }

  return llvm::BreakFalseDeps::processUndefReads((uint64_t *)this, a2);
}

uint64_t llvm::BreakFalseDeps::runOnMachineFunction(llvm::BreakFalseDeps *this, llvm::MachineFunction *a2)
{
  if ((llvm::FunctionPass::skipFunction(this, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    *((void *)this + 31) = a2;
    *((void *)this + 32) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 104))(*((void *)a2 + 2));
    *((void *)this + 33) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 31) + 16) + 176))(*(void *)(*((void *)this + 31) + 16));
    uint64_t v5 = (uint64_t *)*((void *)this + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v6 != &llvm::ReachingDefAnalysis::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    *((void *)this + 75) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::ReachingDefAnalysis::ID);
    llvm::RegisterClassInfo::runOnMachineFunction((llvm::BreakFalseDeps *)((char *)this + 272), a2);
    uint64_t v9 = (llvm::MachineFunction *)((char *)a2 + 320);
    for (uint64_t i = (llvm::MachineBasicBlock *)*((void *)a2 + 41); i != v9; uint64_t i = (llvm::MachineBasicBlock *)*((void *)i + 1))
      llvm::BreakFalseDeps::processBasicBlock(this, i);
  }
  return 0;
}

void sub_1CC24B31C(uint64_t a1)
{
  sub_1CC24B584(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC24B354(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ReachingDefAnalysis::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

double sub_1CC24B3A8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void llvm::callDefaultCtor<llvm::BreakFalseDeps>()
{
}

uint64_t sub_1CC24B40C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &llvm::BreakFalseDeps::ID;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F26098D0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 336;
  *(_OWORD *)(a1 + 320) = xmmword_1CDB159A0;
  *(void *)(a1 + 344) = a1 + 360;
  *(void *)(a1 + 352) = 0x600000000;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = a1 + 432;
  *(void *)(a1 + 424) = 0x600000000;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = a1 + 568;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 8;
  *(void *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618B88, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC24A8E0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EA618B88, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC24B584(uint64_t a1)
{
  *(void *)a1 = &unk_1F26098D0;
  free(*(void **)(a1 + 584));
  uint64_t v2 = *(void **)(a1 + 544);
  if (v2 != (void *)(a1 + 568)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 512);
  if (v3)
  {
    *(void *)(a1 + 520) = v3;
    operator delete(v3);
  }
  sub_1CD50C1C0((uint64_t *)(a1 + 272));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4 != (void *)(a1 + 192)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5 != (void *)(a1 + 120)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6 != (void *)(a1 + 48)) {
    free(v6);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC24B66C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v4 = 24 * v2;
      do
      {
        uint64_t v5 = *(void *)(v3 + v4);
        *(void *)(v3 + v4) = 0;
        if (v5) {
          MEMORY[0x1D25D9CB0](v5, 0x1000C80BDFB0063);
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x1D25D9CB0);
  }
}

void sub_1CC24B6FC()
{
}

void sub_1CC24B798()
{
}

void sub_1CC24B8C8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2609990;
  sub_1CD4AFD10(a1 + 288);
  if (*(_DWORD *)(a1 + 268))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 264);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 256) + v3);
        if (v5 != -8 && v5 != 0)
        {
          uint64_t v7 = *(void **)(v5 + 8);
          if (v7 != (void *)(v5 + 24)) {
            free(v7);
          }
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)(a1 + 256));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 192)) {
    free(v8);
  }
  uint64_t v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 120)) {
    free(v9);
  }
  int v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 48)) {
    free(v10);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC24B9EC(uint64_t a1)
{
  sub_1CC24B8C8(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC24BA24()
{
  return "Basic Block Sections Analysis";
}

uint64_t sub_1CC24BA34(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const llvm::MemoryBuffer **)(a1 + 248);
  if (!v1) {
    return 0;
  }
  uint64_t v66 = *(void *)(a1 + 248);
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v61, v1, 1, 35);
  v60[0] = &v66;
  v60[1] = v61;
  uint64_t v4 = *(void *)(a1 + 256);
  uint64_t v5 = *(unsigned int *)(a1 + 264);
  uint64_t v88 = v90;
  uint64_t v89 = 0x400000000;
  unint64_t v92 = 0;
  uint64_t v93 = 0;
  char v91 = &v92;
  if (v62)
  {
    uint64_t v6 = 0;
    uint64_t i = v4 + 8 * v5;
    uint64_t v50 = (void *)(a1 + 268);
    uint64_t v51 = (llvm::StringMapImpl *)(a1 + 256);
    while (1)
    {
      int v8 = *v64;
      if (v8 != 64) {
        break;
      }
LABEL_75:
      llvm::line_iterator::advance((uint64_t)v61);
      if (!v62) {
        goto LABEL_80;
      }
    }
    if (!v65) {
      goto LABEL_80;
    }
    if (v8 != 33) {
      goto LABEL_80;
    }
    uint64_t v58 = v64 + 1;
    uint64_t v59 = v65 - 1;
    if (v65 == 1) {
      goto LABEL_80;
    }
    if (v64[1] == 33)
    {
      uint64_t v58 = v64 + 2;
      uint64_t v59 = v65 - 2;
      if (i == *(void *)(a1 + 256) + 8 * *(unsigned int *)(a1 + 264))
      {
        uint64_t v48 = (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)v66 + 16))(v66);
        __int16 v73 = 1283;
        v70[0] = "Invalid profile ";
        uint64_t v71 = (const char *)v48;
        uint64_t v72 = v49;
        v74[0] = v70;
        unint64_t v75 = " at line ";
        __int16 v76 = 770;
        v68[0] = v63;
        v77[0] = v74;
        uint64_t v78 = (const char *)v68;
        __int16 v79 = 3330;
        *(void *)uint64_t v80 = v77;
        uint64_t v81 = ": ";
        __int16 v83 = 770;
        uint64_t v84 = (void **)v80;
        v86[0] = "Cluster list does not follow a function name specifier.";
        __int16 v87 = 770;
        llvm::inconvertibleErrorCode(v48);
        operator new();
      }
      uint64_t v84 = (void **)v86;
      uint64_t v85 = 0x400000000;
      llvm::StringRef::split((char *)&v58, (uint64_t)&v84, 32, -1, 1);
      if (v85)
      {
        int v9 = 0;
        int v10 = v84;
        uint64_t v11 = &v84[2 * v85];
        while (1)
        {
          unsigned int v13 = (const char *)*v10;
          uint64_t v12 = (unsigned __int8 *)v10[1];
          if (!v12) {
            break;
          }
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          do
          {
            int v16 = v14[(void)v13];
            if ((v16 - 48) >= 0xA)
            {
              if ((v16 - 97) >= 0x1A)
              {
                if ((v16 - 65) > 0x19) {
                  goto LABEL_69;
                }
                int v17 = -55;
              }
              else
              {
                int v17 = -87;
              }
            }
            else
            {
              int v17 = -48;
            }
            unsigned int v18 = v17 + v16;
            if (v18 > 9) {
              goto LABEL_69;
            }
            unint64_t v19 = 10 * v15 + v18;
            if (v15 > v19 / 0xA) {
              goto LABEL_69;
            }
            ++v14;
            unint64_t v15 = 10 * v15 + v18;
          }
          while (v12 != v14);
          v80[0] = v19;
          if ((sub_1CB918828((uint64_t)&v88, v80) & 0x100000000) == 0)
          {
            *(void *)uint64_t v80 = "Duplicate basic block id found '";
            uint64_t v81 = v13;
            uint64_t v82 = v12;
            __int16 v83 = 1283;
            v54[0] = v80;
            v54[2] = "'.";
            __int16 v55 = 770;
            uint64_t v44 = v54;
LABEL_71:
            sub_1CC24CCC0((uint64_t)&v53, v60, v44);
          }
          if (!v19 && v9)
          {
            uint64_t v45 = (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)v66 + 16))(v66);
            __int16 v69 = 1283;
            v68[2] = v45;
            v68[3] = v46;
            v70[0] = v68;
            uint64_t v71 = " at line ";
            __int16 v73 = 770;
            uint64_t v67 = v63;
            v68[0] = "Invalid profile ";
            v74[0] = v70;
            unint64_t v75 = (const char *)&v67;
            __int16 v76 = 3330;
            v77[0] = v74;
            uint64_t v78 = ": ";
            __int16 v79 = 770;
            *(void *)uint64_t v80 = v77;
            uint64_t v81 = "Entry BB (0) does not begin a cluster.";
            __int16 v83 = 770;
            llvm::inconvertibleErrorCode(v45);
            operator new();
          }
          uint64_t v20 = *(void *)i;
          unsigned int v21 = *(_DWORD *)(*(void *)i + 16);
          if (v21 >= *(_DWORD *)(*(void *)i + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v22 = *(void *)(*(void *)i + 8) + 12 * v21;
          *(void *)uint64_t v22 = v19 | (unint64_t)(v6 << 32);
          *(_DWORD *)(v22 + 8) = v9++;
          ++*(_DWORD *)(v20 + 16);
          v10 += 2;
          if (v10 == v11) {
            goto LABEL_72;
          }
        }
LABEL_69:
        *(void *)uint64_t v80 = "Unsigned integer expected: '";
        uint64_t v81 = v13;
        uint64_t v82 = v12;
        __int16 v83 = 1283;
        v56[0] = v80;
        v56[2] = "'.";
        __int16 v57 = 770;
        uint64_t v44 = v56;
        goto LABEL_71;
      }
LABEL_72:
      if (v84 != v86) {
        free(v84);
      }
      uint64_t v6 = (v6 + 1);
      goto LABEL_75;
    }
    uint64_t v84 = (void **)v86;
    uint64_t v85 = 0x400000000;
    llvm::StringRef::split((char *)&v58, (uint64_t)&v84, 47, -1, 1);
    if (v85 >= 2)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 1;
      do
      {
        sub_1CD4F3918(a1 + 288, (unsigned __int8 *)v84[v23 + 2], (size_t)v84[v23 + 3], v84);
        ++v24;
        v23 += 2;
      }
      while (v24 < v85);
    }
    size_t v25 = (size_t)v84[1];
    __s1 = (unsigned __int8 *)*v84;
    unsigned int v26 = *(_DWORD *)(a1 + 264);
    if (!v26)
    {
      *uint64_t v50 = 0;
      unint64_t v47 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v47) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      v47[16] = 2;
      *(void *)(a1 + 256) = v47;
      unsigned int v26 = 16;
      *(_DWORD *)(a1 + 264) = 16;
    }
    int v27 = 0;
    if (v25)
    {
      size_t v28 = v25;
      uint64_t v29 = __s1;
      do
      {
        int v30 = *v29++;
        int v27 = 33 * v27 + v30;
        --v28;
      }
      while (v28);
    }
    uint64_t v31 = *(void *)v51;
    unsigned int v32 = v26 - 1;
    uint64_t v33 = *(void *)v51 + 8 * v26 + 8;
    int v34 = -1;
    int v35 = 1;
    int v36 = v27;
    while (1)
    {
      uint64_t v37 = v36 & v32;
      unsigned int v38 = *(void **)(v31 + 8 * v37);
      if (!v38) {
        break;
      }
      if (v38 == (void *)-8)
      {
        if (v34 == -1) {
          int v34 = v36 & v32;
        }
      }
      else if (*(_DWORD *)(v33 + 4 * v37) == v27 {
             && v25 == *v38
      }
             && (!v25 || !memcmp(__s1, (char *)v38 + *(unsigned int *)(a1 + 276), v25)))
      {
        goto LABEL_54;
      }
      int v36 = v35 + v37;
      ++v35;
    }
    uint64_t v39 = v34;
    if (v34 == -1)
    {
      uint64_t v39 = v37;
      uint64_t v37 = v37;
    }
    else
    {
      uint64_t v37 = v34;
    }
    *(_DWORD *)(v33 + 4 * v39) = v27;
    unsigned int v38 = *(void **)(v31 + 8 * v37);
LABEL_54:
    uint64_t i = v31 + 8 * v37;
    if (v38 == (void *)-8)
    {
      --*(_DWORD *)(a1 + 272);
    }
    else if (v38)
    {
LABEL_56:
      LODWORD(v89) = 0;
      sub_1CB833A08((uint64_t)&v91, v92);
      unint64_t v92 = 0;
      uint64_t v93 = 0;
      char v91 = &v92;
      if (v84 != v86) {
        free(v84);
      }
      uint64_t v6 = 0;
      goto LABEL_75;
    }
    uint64_t v40 = operator new(v25 + 73, (std::align_val_t)8uLL);
    unsigned int v41 = v40;
    char v42 = (char *)(v40 + 9);
    if (v25) {
      memcpy(v40 + 9, __s1, v25);
    }
    v42[v25] = 0;
    size_t *v41 = v25;
    v41[1] = (size_t)(v41 + 3);
    v41[2] = 0x400000000;
    *(void *)uint64_t i = v41;
    ++*(_DWORD *)v50;
    for (uint64_t i = *(void *)v51 + 8 * llvm::StringMapImpl::RehashTable(v51, v37);
          !*(void *)i || *(void *)i == -8;
    goto LABEL_56;
  }
LABEL_80:
  uint64_t v53 = 0;
  sub_1CB833A08((uint64_t)&v91, v92);
  if (v88 != v90) {
    free(v88);
  }
  return 0;
}

void sub_1CC24C284(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC24C290(uint64_t a1, llvm::MachineFunction *this)
{
  uint64_t v2 = this;
  v142[17] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(*((void *)this + 1) + 1044);
  if (v3 != 1 || byte_1EBD04F20 == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = *(uint64_t ****)this;
  if ((*(unsigned char *)(*(void *)this + 23) & 0x20) == 0)
  {
LABEL_23:
    llvm::MachineFunction::RenumberBlocks(v2, 0);
    uint64_t v134 = 0;
    unint64_t v135 = 0;
    uint64_t v136 = 0;
    goto LABEL_24;
  }
  uint64_t v6 = ***v5;
  v140[0] = *(void *)this;
  int v7 = *(_DWORD *)(v6 + 2496);
  if (!v7)
  {
    __int16 v73 = 0;
LABEL_89:
    uint64_t v11 = sub_1CC609054(v6 + 2480, (uint64_t)v140, v140, v73);
    uint64_t v74 = v140[0];
    void v11[3] = 0;
    v11[4] = 0;
    *uint64_t v11 = v74;
    v11[1] = v11 + 3;
    v11[2] = 0x100000000;
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)(v6 + 2480);
  int v9 = v7 - 1;
  unsigned int v10 = v9 & ((v5 >> 4) ^ (v5 >> 9));
  uint64_t v11 = (void *)(v8 + 40 * v10);
  uint64_t v12 = (void ***)*v11;
  if ((uint64_t ***)*v11 != v5)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != (void ***)-4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == (void ***)-8192;
      }
      if (v15) {
        unsigned int v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      uint64_t v11 = (void *)(v8 + 40 * v10);
      uint64_t v12 = (void ***)*v11;
      if ((uint64_t ***)*v11 == v5) {
        goto LABEL_19;
      }
    }
    if (v13) {
      __int16 v73 = v13;
    }
    else {
      __int16 v73 = v11;
    }
    goto LABEL_89;
  }
LABEL_19:
  uint64_t v17 = *((unsigned int *)v11 + 4);
  if (!v17) {
    goto LABEL_23;
  }
  unsigned int v18 = (void *)(v11[1] + 8);
  uint64_t v19 = 16 * v17;
  while (*((_DWORD *)v18 - 2) != 30)
  {
    v18 += 2;
    v19 -= 16;
    if (!v19) {
      goto LABEL_23;
    }
  }
  uint64_t v49 = *v18;
  if (!v49) {
    goto LABEL_23;
  }
  uint64_t v50 = *(unsigned int *)(v49 + 8);
  if (!v50) {
    goto LABEL_23;
  }
  uint64_t v51 = -8 * v50;
  do
  {
    int v52 = *(void **)(*(void *)(v49 + v51) + 8);
    if (*v52 == 24)
    {
      uint64_t v53 = v52[3];
      uint64_t v54 = v52[4];
      uint64_t v55 = v52[5];
      BOOL v56 = v53 == 0x72705F7274736E69 && v54 == 0x5F687361685F666FLL;
      if (v56 && v55 == 0x686374616D73696DLL) {
        return 1;
      }
    }
    v51 += 8;
  }
  while (v51);
LABEL_6:
  llvm::MachineFunction::RenumberBlocks(v2, 0);
  if (v3 == 2)
  {
    *((_DWORD *)v2 + 160) = 2;
    return 1;
  }
  uint64_t v67 = 0;
  uint64_t v134 = 0;
  unint64_t v135 = 0;
  uint64_t v136 = 0;
  if (v3 != 1) {
    goto LABEL_106;
  }
LABEL_24:
  sub_1CD50C600((llvm::StringMapImpl *)&v131, (uint64_t *)(a1 + 288));
  Name = llvm::Value::getName(*(llvm::Value **)v2);
  uint64_t v22 = Name;
  v140[0] = (uint64_t)Name;
  v140[1] = v21;
  uint64_t v23 = v132;
  unint64_t v127 = v2;
  int v126 = v3;
  if (v132)
  {
    int v24 = 0;
    size_t v25 = v21;
    if (v21)
    {
      uint64_t v26 = v21;
      int v27 = Name;
      do
      {
        int v28 = *v27++;
        int v24 = 33 * v24 + v28;
        --v26;
      }
      while (v26);
    }
    unsigned int v29 = v132 - 1;
    uint64_t v30 = v131;
    uint64_t v31 = v131 + 8 * v132 + 8;
    uint64_t v32 = v133;
    int v33 = 1;
    int v34 = v24;
    while (1)
    {
      uint64_t v35 = v34 & v29;
      int v36 = *(void **)(v30 + 8 * v35);
      if (v36 != (void *)-8)
      {
        if (!v36) {
          goto LABEL_36;
        }
        if (*(_DWORD *)(v31 + 4 * v35) == v24 && v25 == *v36 && (!v25 || !memcmp(v22, (char *)v36 + v32, v25))) {
          break;
        }
      }
      int v34 = v33 + v35;
      ++v33;
    }
    uint64_t v37 = v140;
    if (v35 != -1 && (int)v35 != v23)
    {
      uint64_t v58 = *(void *)(v30 + 8 * (int)v35);
      uint64_t v59 = *(char **)(v58 + 8);
      uint64_t v37 = (uint64_t *)(v58 + 8);
      uint64_t v22 = v59;
    }
  }
  else
  {
LABEL_36:
    uint64_t v37 = v140;
  }
  uint64_t v38 = *(unsigned int *)(a1 + 264);
  if (!v38) {
    goto LABEL_79;
  }
  size_t v39 = v37[1];
  if (v39)
  {
    int v40 = 0;
    uint64_t v41 = v37[1];
    char v42 = v22;
    do
    {
      int v43 = *v42++;
      int v40 = 33 * v40 + v43;
      --v41;
    }
    while (v41);
  }
  else
  {
    int v40 = 0;
  }
  uint64_t v44 = *(void *)(a1 + 256);
  int v45 = 1;
  for (int i = v40; ; int i = v47 + v45++)
  {
    uint64_t v47 = i & (v38 - 1);
    uint64_t v48 = *(void **)(v44 + 8 * v47);
    if (v48 != (void *)-8)
    {
      if (!v48) {
        goto LABEL_79;
      }
      if (*(_DWORD *)(v44 + 8 * v38 + 8 + 4 * v47) == v40
        && v39 == *v48
        && (!v39 || !memcmp(v22, (char *)v48 + *(unsigned int *)(a1 + 276), v39)))
      {
        break;
      }
    }
  }
  if (v47 == -1 || (uint64_t v60 = (int)v47, (int)v47 == v38))
  {
LABEL_79:
    sub_1CD4AFD10((uint64_t)&v131);
    return 1;
  }
  if (*(_DWORD *)(*(void *)(v44 + 8 * (int)v47) + 16))
  {
    uint64_t v2 = v127;
    unint64_t v61 = ((*((void *)v127 + 14) - *((void *)v127 + 13)) >> 3);
    char v62 = (char *)v135;
    unint64_t v63 = (uint64_t)v135 >> 4;
    if (v61 <= (uint64_t)v135 >> 4)
    {
      if (v61 >= v63)
      {
        uint64_t v67 = 0;
        goto LABEL_94;
      }
      uint64_t v67 = 0;
      uint64_t v72 = (char *)(16 * v61);
    }
    else
    {
      if (v61 - v63 > (v136 - (uint64_t)v135) >> 4)
      {
        uint64_t v64 = v136 >> 3;
        if (v136 >> 3 <= v61) {
          uint64_t v64 = ((*((void *)v127 + 14) - *((void *)v127 + 13)) >> 3);
        }
        if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65 >> 60) {
          sub_1CB833614();
        }
        uint64_t v66 = (char *)operator new(16 * v65);
        uint64_t v67 = &v66[16 * v63];
        bzero(v67, ((16 * v61 - (void)v62 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v62)
        {
          uint64_t v68 = v62 - 16;
          for (int j = &v62[(void)v66 - 16]; ; j -= 16)
          {
            long long v70 = *(_OWORD *)v68;
            v68 -= 16;
            *(_OWORD *)int j = v70;
          }
        }
        uint64_t v134 = &v66[16 * v63];
        unint64_t v135 = &v66[16 * v61];
        uint64_t v136 = (uint64_t)&v66[16 * v65];
LABEL_94:
        int v3 = v126;
        uint64_t v75 = *(void *)(v44 + 8 * v60);
        int v76 = *(_DWORD *)(v75 + 16);
        if (v76)
        {
          uint64_t v77 = *(unsigned int **)(v75 + 8);
          uint64_t v78 = &v77[3 * v76];
          uint64_t v79 = (*((void *)v127 + 14) - *((void *)v127 + 13)) >> 3;
          do
          {
            uint64_t v80 = *v77;
            if (v80 >= v79)
            {
              if (v126 == 1) {
                sub_1CD4AFD10((uint64_t)&v131);
              }
              goto LABEL_164;
            }
            uint64_t v81 = *(void *)(v77 + 1);
            uint64_t v82 = &v67[16 * v80];
            if (!v82[12]) {
              v82[12] = 1;
            }
            *(_DWORD *)uint64_t v82 = v80;
            *(void *)(v82 + 4) = v81;
            v77 += 3;
          }
          while (v77 != v78);
        }
        if (v126 != 1) {
          goto LABEL_106;
        }
        goto LABEL_105;
      }
      bzero(v135, ((16 * v61 - (void)v135 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      uint64_t v67 = 0;
      uint64_t v72 = &v62[16 * (v61 - v63)];
    }
    unint64_t v135 = v72;
    goto LABEL_94;
  }
  uint64_t v67 = 0;
  unint64_t v135 = 0;
  uint64_t v2 = v127;
  int v3 = v126;
LABEL_105:
  sub_1CD4AFD10((uint64_t)&v131);
LABEL_106:
  *((_DWORD *)v2 + 160) = v3;
  __int16 v83 = (char *)v2 + 320;
  uint64_t v84 = *((void *)v2 + 41);
  uint64_t v85 = (char *)v2 + 320;
  if ((llvm::MachineFunction *)v84 == (llvm::MachineFunction *)((char *)v2 + 320)) {
    goto LABEL_142;
  }
  unint64_t v86 = 0;
  uint64_t v87 = llvm::MBBSectionID::ColdSectionID;
  int v89 = llvm::MBBSectionID::ExceptionSectionID;
  int v88 = HIDWORD(llvm::MBBSectionID::ExceptionSectionID);
  uint64_t v90 = llvm::MBBSectionID::ExceptionSectionID;
  char v91 = 1;
LABEL_108:
  unint64_t v92 = HIDWORD(v86);
  BOOL v94 = v89 == v86 && v88 == HIDWORD(v86);
  do
  {
    while (1)
    {
      if (!*(_DWORD *)(*((void *)v2 + 1) + 1044) || v67 == v135)
      {
        uint64_t v97 = *(unsigned int *)(v84 + 24);
      }
      else
      {
        uint64_t v95 = &v67[16 * *(int *)(v84 + 24)];
        uint64_t v96 = v87;
        if (!v95[12]) {
          goto LABEL_120;
        }
        uint64_t v97 = *((unsigned int *)v95 + 1);
      }
      uint64_t v96 = v97 << 32;
LABEL_120:
      *(void *)(v84 + 192) = v96;
      if (!*(unsigned char *)(v84 + 184)) {
        break;
      }
      if (v91)
      {
        unint64_t v86 = v96;
LABEL_132:
        char v91 = 0;
        uint64_t v84 = *(void *)(v84 + 8);
        if ((char *)v84 != v83) {
          goto LABEL_108;
        }
        uint64_t v85 = (char *)*((void *)v2 + 41);
        unint64_t v92 = HIDWORD(v86);
        goto LABEL_135;
      }
      char v98 = v86 == v96 || v94;
      if ((v98 & 1) == 0)
      {
        unint64_t v86 = v90;
        goto LABEL_132;
      }
      uint64_t v84 = *(void *)(v84 + 8);
      if ((char *)v84 == v83)
      {
        uint64_t v85 = (char *)*((void *)v2 + 41);
        goto LABEL_135;
      }
    }
    uint64_t v84 = *(void *)(v84 + 8);
  }
  while ((char *)v84 != v83);
  uint64_t v85 = (char *)*((void *)v2 + 41);
  if (v91) {
    goto LABEL_142;
  }
LABEL_135:
  if (v86 == v90 && v88 == v92 && v85 != v83)
  {
    do
    {
      if (v85[184]) {
        *((void *)v85 + 24) = v86;
      }
      uint64_t v85 = (char *)*((void *)v85 + 1);
    }
    while (v85 != v83);
    uint64_t v85 = (char *)*((void *)v2 + 41);
  }
LABEL_142:
  uint64_t v99 = *((void *)v85 + 24);
  v129[0] = &v130;
  v129[1] = &v134;
  uint64_t v130 = v99;
  llvm::sortBasicBlocksAndUpdateBranches((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t *))sub_1CC24CE5C, (uint64_t)v129);
  for (uint64_t k = *((void *)v2 + 41); (char *)k != v83; uint64_t k = *(void *)(k + 8))
  {
    if (*(unsigned char *)(k + 200) && *(unsigned char *)(k + 184))
    {
      for (uint64_t m = *(void *)(k + 56); **(_WORD **)(m + 16) != 4; uint64_t m = *(void *)(m + 8))
      {
        if ((*(unsigned char *)m & 4) == 0)
        {
          while ((*(_WORD *)(m + 44) & 8) != 0)
            uint64_t m = *(void *)(m + 8);
        }
      }
      uint64_t v102 = *(void *)(*(uint64_t (**)(void))(**((void **)v2 + 2) + 104))(*((void *)v2 + 2));
      (*(void (**)(uint64_t *__return_ptr))(v102 + 752))(v140);
      unint64_t v137 = 0;
      uint64_t v103 = *(void *)((*(uint64_t (**)(void))(**((void **)v2 + 2) + 104))(*((void *)v2 + 2)) + 8);
      int v104 = *(llvm::MachineFunction **)(k + 32);
      uint64_t v138 = 0;
      uint64_t v105 = llvm::MachineFunction::CreateMachineInstr(v104, v103 + 48 * LODWORD(v140[0]), &v138, 0);
      if (!v138) {
        goto LABEL_154;
      }
      int v122 = *v138;
      if ((v122 - 4) <= 0x1E)
      {
        if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
          goto LABEL_154;
        }
        uint64_t v123 = *((void *)v138 + 2);
        if ((v123 & 4) == 0) {
          goto LABEL_154;
        }
        unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
        if (!v124) {
          goto LABEL_154;
        }
LABEL_203:
        BOOL v139 = &v138;
        sub_1CC5FA668(v124 + 16, &v139);
        goto LABEL_154;
      }
      if ((v122 - 3) >= 0xFFFFFFFE) {
        BOOL v125 = v138;
      }
      else {
        BOOL v125 = 0;
      }
      if ((v122 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v124 = (unint64_t)(v125 + 8);
        goto LABEL_203;
      }
      if (v122 == 3) {
        *((void *)v138 + 1) = 0;
      }
LABEL_154:
      uint64_t v106 = *(void *)(k + 40);
      *((void *)v105 + 3) = v106;
      uint64_t v107 = *(void *)(v106 + 32);
      uint64_t v108 = *((unsigned int *)v105 + 10);
      if (v108)
      {
        uint64_t v114 = *((void *)v105 + 4);
        uint64_t v115 = *(void *)(v107 + 40);
        uint64_t v116 = 32 * v108;
        do
        {
          if (!*(unsigned char *)v114)
          {
            uint64_t v117 = *(unsigned int *)(v114 + 4);
            if ((int)v117 >= 0) {
              uint64_t v118 = (uint64_t *)(*(void *)(v115 + 272) + 8 * v117);
            }
            else {
              uint64_t v118 = (uint64_t *)(*(void *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
            }
            uint64_t v119 = *v118;
            if (*v118)
            {
              uint64_t v120 = *(void *)(v119 + 16);
              *(void *)(v119 + 16) = v114;
              *(void *)(v114 + 16) = v120;
              if (*(unsigned char *)(v114 + 3))
              {
                *(void *)(v114 + 24) = v119;
              }
              else
              {
                *(void *)(v114 + 24) = 0;
                uint64_t v118 = (uint64_t *)(v120 + 24);
              }
            }
            else
            {
              *(void *)(v114 + 16) = v114;
              *(void *)(v114 + 24) = 0;
            }
            *uint64_t v118 = v114;
          }
          v114 += 32;
          v116 -= 32;
        }
        while (v116);
      }
      uint64_t v109 = *(void *)(v107 + 728);
      if (v109) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v109 + 24))(v109, v105);
      }
      unint64_t v110 = *(void *)m & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v105 = v110 | *(void *)v105 & 7;
      *((void *)v105 + 1) = m;
      *(void *)(v110 + 8) = v105;
      *(void *)uint64_t m = *(void *)m & 7 | (unint64_t)v105;
      if (v137)
      {
        int v111 = *v137;
        if ((v111 - 4) > 0x1E)
        {
          if ((v111 - 3) >= 0xFFFFFFFE) {
            unint64_t v112 = v137;
          }
          else {
            unint64_t v112 = 0;
          }
          if ((v111 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v113 = (unint64_t)(v112 + 8);
            goto LABEL_171;
          }
          if (v111 == 3) {
            *((void *)v137 + 1) = 0;
          }
        }
        else if ((v137[1] & 0x7F) == 2 || *((_DWORD *)v137 + 3))
        {
          uint64_t v121 = *((void *)v137 + 2);
          if ((v121 & 4) != 0)
          {
            unint64_t v113 = v121 & 0xFFFFFFFFFFFFFFF8;
            if (v113)
            {
LABEL_171:
              BOOL v139 = &v137;
              sub_1CC5FA668(v113 + 16, &v139);
            }
          }
        }
      }
      if (v141 != v142) {
        free(v141);
      }
      break;
    }
  }
  uint64_t v67 = v134;
LABEL_164:
  if (v67)
  {
    unint64_t v135 = v67;
    operator delete(v67);
  }
  return 1;
}

void sub_1CC24CCC0(uint64_t a1, void **a2, uint64_t *a3)
{
  uint64_t v5 = (llvm *)(*(uint64_t (**)(void))(*(void *)**a2 + 16))(**a2);
  __int16 v12 = 1283;
  v11[2] = v5;
  void v11[3] = v6;
  v13[0] = v11;
  _OWORD v13[2] = " at line ";
  __int16 v14 = 770;
  uint64_t v10 = *((unsigned int *)a2[1] + 11);
  v11[0] = "Invalid profile ";
  v15[0] = v13;
  _OWORD v15[2] = &v10;
  __int16 v16 = 3330;
  *(void *)&long long v17 = v15;
  *(void *)&long long v18 = ": ";
  LOWORD(v19) = 770;
  int v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 == 1)
  {
    long long v20 = v17;
    long long v21 = v18;
    uint64_t v22 = v19;
  }
  else if (*((unsigned char *)a3 + 32))
  {
    uint64_t v8 = (uint64_t *)*a3;
    uint64_t v9 = a3[1];
    if (*((unsigned char *)a3 + 33) != 1)
    {
      LOBYTE(v7) = 2;
      uint64_t v8 = a3;
    }
    *(void *)&long long v20 = &v17;
    *(void *)&long long v21 = v8;
    *((void *)&v21 + 1) = v9;
    LOBYTE(v22) = 2;
    BYTE1(v22) = v7;
  }
  else
  {
    LOWORD(v22) = 256;
  }
  llvm::inconvertibleErrorCode(v5);
  operator new();
}

BOOL sub_1CC24CE5C(int **a1, _DWORD *a2, _DWORD *a3)
{
  int v4 = a2[48];
  unsigned int v3 = a2[49];
  int v6 = a3[48];
  unsigned int v5 = a3[49];
  BOOL v7 = v4 == v6 && v3 == v5;
  if (v7)
  {
    if (v4) {
      return a2[6] < a3[6];
    }
    else {
      return *(_DWORD *)(*(void *)a1[1] + 16 * (int)a2[6] + 8) < *(_DWORD *)(*(void *)a1[1] + 16 * (int)a3[6] + 8);
    }
  }
  else
  {
    uint64_t v8 = *a1;
    int v9 = **a1;
    if (v9 == v4)
    {
      int v10 = a2[49];
      if (v8[1] == v3) {
        return v10 == v3;
      }
    }
    if (v9 == v6 && v8[1] == v5)
    {
      int v10 = a3[49];
      if (v9 == v4) {
        return v10 == v3;
      }
      return 0;
    }
    else
    {
      BOOL v12 = v3 < v5;
      BOOL v7 = v4 == v6;
      BOOL v13 = v4 < v6;
      if (v7) {
        return v12;
      }
      else {
        return v13;
      }
    }
  }
}

void sub_1CC24CF20(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 12) < a2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(a1 + 8);
  }
  if (v5)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8);
    bzero(*(void **)a1, 8 * v5);
    unint64_t v4 = v6;
  }
  if (a2 > v4) {
    bzero((void *)(*(void *)a1 + 8 * v4), 8 * (a2 - v4));
  }
  *(_DWORD *)(a1 + 8) = a2;
}

uint64_t sub_1CC24CFC0()
{
  v4.n128_u64[0] = (unint64_t)"The text prefix to use for cold basic block clusters";
  v4.n128_u64[1] = 52;
  unsigned int v3 = ".text.split.";
  int v1 = 1;
  sub_1CD50C724((long long *)&v4, (const char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &llvm::BBSectionsColdTextPrefix, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"This checks if there is a fdo instr. profile hash mismatch for this function";
  v4.n128_u64[1] = 76;
  char v2 = 1;
  unsigned int v3 = &v2;
  int v1 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&BBSectionsDetectSourceDrift, "bbsections-detect-source-drift", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &BBSectionsDetectSourceDrift, &dword_1CB82C000);
}

void llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints(llvm::VirtRegAuxInfo *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 40);
  int v2 = *(_DWORD *)(v1 + 32);
  if (v2)
  {
    for (int i = 0; i != v2; ++i)
    {
      uint64_t v5 = i & 0x7FFFFFFF;
      uint64_t v6 = *(void *)(*(void *)(v1 + 24) + 16 * v5 + 8);
      if (v6)
      {
        while ((*(_DWORD *)v6 & 0x80000000) != 0)
        {
          uint64_t v6 = *(void *)(v6 + 24);
          if (!v6) {
            goto LABEL_4;
          }
        }
        uint64_t v7 = *((void *)this + 2);
        uint64_t v8 = (void *)(v7 + 408);
        uint64_t v9 = *(unsigned int *)(v7 + 416);
        if (v5 >= v9)
        {
          sub_1CB9153B8((uint64_t)v8, v5 - v9 + 1, *(void *)(v7 + 424));
LABEL_13:
          operator new();
        }
        int v10 = *(float **)(*v8 + 8 * v5);
        if (!v10) {
          goto LABEL_13;
        }
        float v11 = llvm::VirtRegAuxInfo::weightCalcHelper(this, (llvm::LiveInterval *)v10, 0, 0);
        if (v11 >= 0.0) {
          v10[29] = v11;
        }
      }
LABEL_4:
      ;
    }
  }
}

void llvm::VirtRegAuxInfo::calculateSpillWeightAndHint(llvm::VirtRegAuxInfo *this, llvm::LiveInterval *a2)
{
  float v3 = llvm::VirtRegAuxInfo::weightCalcHelper(this, a2, 0, 0);
  if (v3 >= 0.0) {
    *((float *)a2 + 29) = v3;
  }
}

uint64_t llvm::VirtRegAuxInfo::copyHint(llvm::VirtRegAuxInfo *this, const llvm::MachineInstr *a2, uint64_t a3, const llvm::TargetRegisterInfo *a4, const llvm::MachineRegisterInfo *a5)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 4);
  uint64_t result = v5[1];
  if (result == a2)
  {
    uint64_t result = v5[9];
    uint64_t v7 = v5 + 8;
  }
  else
  {
    uint64_t v7 = v5;
    v5 += 8;
  }
  if (result)
  {
    int v8 = (*v5 >> 8) & 0xFFF;
    int v9 = (*v7 >> 8) & 0xFFF;
    if ((result & 0x80000000) != 0)
    {
      if (v8 == v9) {
        return result;
      }
      else {
        return 0;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(*((void *)a4 + 3) + 16 * (a2 & 0x7FFFFFFF));
      if (v9)
      {
        uint64_t v15 = a3;
        int v14 = v8;
        uint64_t v13 = *(void *)(*((void *)a4 + 3) + 16 * (a2 & 0x7FFFFFFF));
        uint64_t result = llvm::MCRegisterInfo::getSubReg((void *)(a3 + 8), result, v9);
        uint64_t v10 = v13;
        int v8 = v14;
        a3 = v15;
      }
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((result - 1) > 0x3FFFFFFE
        || result >> 3 >= *(unsigned __int16 *)(*(void *)v11 + 22)
        || ((*(unsigned __int8 *)(*(void *)(*(void *)v11 + 8) + ((unint64_t)result >> 3)) >> (result & 7)) & 1) == 0)
      {
        if (v8)
        {
          uint64_t v12 = *(void *)v11;
          return llvm::MCRegisterInfo::getMatchingSuperReg((uint64_t *)(a3 + 8), result, v8, v12);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::VirtRegAuxInfo::isRematerializable(llvm::VirtRegAuxInfo *this, const llvm::LiveInterval *a2, const llvm::LiveIntervals *a3, const llvm::VirtRegMap *a4, const llvm::TargetInstrInfo *a5)
{
  int v5 = *((_DWORD *)this + 28);
  if (*(_DWORD *)(*((void *)a3 + 41) + 4 * (v5 & 0x7FFFFFFF))) {
    int v6 = *(_DWORD *)(*((void *)a3 + 41) + 4 * (v5 & 0x7FFFFFFF));
  }
  else {
    int v6 = *((_DWORD *)this + 28);
  }
  uint64_t v7 = *((unsigned int *)this + 18);
  if (!v7) {
    return 1;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v12 = v11 + 8 * v7;
  do
  {
    unint64_t v13 = *(void *)(*(void *)v11 + 8);
    if (v13 < 8) {
      goto LABEL_15;
    }
    if ((v13 & 6) == 0) {
      return 0;
    }
LABEL_8:
    int v14 = *(const llvm::MachineInstr **)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
    while (1)
    {
      uint64_t v15 = (unsigned __int16 *)*((void *)v14 + 2);
      int v16 = *v15;
      if (v16 != 19) {
        break;
      }
      uint64_t v19 = (_DWORD *)*((void *)v14 + 4);
      if ((*v19 & 0xFFF00) != 0 || (v19[8] & 0xFFF00) != 0) {
        goto LABEL_11;
      }
      if (v19[1] != v5) {
        return 0;
      }
      int v5 = v19[9];
      if ((v5 & 0x80000000) == 0) {
        return 0;
      }
      unint64_t v20 = v5 & 0x7FFFFFFF;
      int v21 = *(_DWORD *)(*((void *)a3 + 41) + 4 * v20);
      if (!v21) {
        int v21 = v5;
      }
      if (v21 != v6) {
        return 0;
      }
      uint64_t v22 = (void *)((char *)a2 + 408);
      unint64_t v23 = *((unsigned int *)a2 + 104);
      BOOL v36 = v20 >= v23;
      unint64_t v24 = v20 - v23;
      if (v36)
      {
        sub_1CB9153B8((uint64_t)v22, v24 + 1, *((void *)a2 + 53));
LABEL_46:
        llvm::LiveIntervals::createInterval();
      }
      size_t v25 = *(uint64_t **)(*v22 + 8 * v20);
      if (!v25) {
        goto LABEL_46;
      }
      unint64_t v26 = v13 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v27 = *((_DWORD *)v25 + 2);
      uint64_t v28 = *v25;
      if (!v27)
      {
        unsigned int v27 = 0;
LABEL_44:
        uint64_t v32 = v28 + 24 * v27;
        goto LABEL_34;
      }
      uint64_t v29 = *(void *)(v28 + 24 * v27 - 16);
      unsigned int v30 = *(_DWORD *)(v26 + 24);
      unsigned int v31 = (v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v32 = *v25;
      unint64_t v33 = *((unsigned int *)v25 + 2);
      if (v30 >= v31) {
        goto LABEL_44;
      }
      do
      {
        unint64_t v34 = v33 >> 1;
        uint64_t v35 = *(void *)(v32 + 24 * (v33 >> 1) + 8);
        LODWORD(v35) = (v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
        v33 -= (v33 >> 1) + 1;
        BOOL v36 = v30 >= v35;
        if (v30 >= v35) {
          unint64_t v37 = v34 + 1;
        }
        else {
          unint64_t v37 = 0;
        }
        v32 += 24 * v37;
        if (!v36) {
          unint64_t v33 = v34;
        }
      }
      while (v33);
LABEL_34:
      uint64_t v38 = v28 + 24 * v27;
      uint64_t v39 = *(void *)(v32 + 16);
      unint64_t v40 = *(void *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v41 = v32 + 24;
      BOOL v42 = v26 == v40 && v41 == v38;
      if (!v42 && *(void *)(v39 + 8) == v26) {
        uint64_t v39 = 0;
      }
      unint64_t v13 = *(void *)(v39 + 8);
      if ((v13 & 6) == 0) {
        return 0;
      }
      int v14 = 0;
      if (v13 > 7) {
        goto LABEL_8;
      }
    }
    if (v16 == 10) {
      goto LABEL_15;
    }
LABEL_11:
    if ((*((unsigned char *)v15 + 11) & 0x20) == 0) {
      return 0;
    }
    long long v17 = (llvm::AAResults *)*((void *)a2 + 35);
    if (((*(uint64_t (**)(const llvm::VirtRegMap *, const llvm::MachineInstr *, llvm::AAResults *, const llvm::VirtRegMap *, const llvm::TargetInstrInfo *))(*(void *)a4 + 32))(a4, v14, v17, a4, a5) & 1) == 0&& (llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(a4, v14, v17) & 1) == 0)
    {
      return 0;
    }
LABEL_15:
    v11 += 8;
  }
  while (v11 != v12);
  return 1;
}

uint64_t llvm::VirtRegAuxInfo::isLiveAtStatepointVarArg(llvm::VirtRegAuxInfo *this, llvm::LiveInterval *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 3) + 248);
  uint64_t v3 = *((unsigned int *)a2 + 28);
  if ((v3 & 0x80000000) != 0) {
    __n128 v4 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    __n128 v4 = (uint64_t *)(*(void *)(v2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  while (1)
  {
    int v6 = *(llvm::MachineInstr **)(v5 + 8);
    if (**((_WORD **)v6 + 2) == 31)
    {
      uint64_t v12 = *(void *)(v5 + 8);
      uint64_t v13 = v5;
      uint64_t v8 = *((void *)v6 + 2);
      int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v6);
      uint64_t v10 = *(void *)(v8 + 32);
      if (v10)
      {
        unsigned int v11 = -1;
        do
          ++v11;
        while (*(_WORD *)(v10 + 2 * v11));
      }
      else
      {
        unsigned int v11 = 0;
      }
      uint64_t v5 = v13;
      if (v11 + NumExplicitDefs + *(_DWORD *)(*(void *)(v12 + 32) + 32 * (v11 + NumExplicitDefs + 2) + 16) + 4 <= ((unint64_t)(v13 - *(void *)(v12 + 32)) >> 5)) {
        break;
      }
    }
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 0;
    }
  }
  return 1;
}

float llvm::VirtRegAuxInfo::weightCalcHelper(llvm::VirtRegAuxInfo *this, llvm::LiveInterval *a2, llvm::SlotIndex *a3, llvm::SlotIndex *a4)
{
  uint64_t v8 = *((void *)this + 1);
  int v9 = *(void **)(v8 + 40);
  v276 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v8 + 16) + 176))(*(void *)(v8 + 16));
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 16) + 104))(*(void *)(*((void *)this + 1) + 16));
  uint64_t v294 = v298;
  uint64_t v295 = v298;
  uint64_t v296 = 8;
  int v297 = 0;
  uint64_t v11 = *((_DWORD *)a2 + 28) & 0x7FFFFFFF;
  v280 = v9;
  uint64_t v12 = v9[26];
  uint64_t v13 = v12 + 40 * v11;
  if (*(_DWORD *)(v13 + 16)) {
    int v277 = **(_DWORD **)(v13 + 8);
  }
  else {
    int v277 = 0;
  }
  int v278 = *(_DWORD *)(v12 + 40 * v11);
  float v14 = INFINITY;
  v282 = a3;
  if (*((float *)a2 + 29) == INFINITY) {
    goto LABEL_13;
  }
  uint64_t v15 = *((void *)this + 2);
  int v16 = *(_DWORD *)(*(void *)(*((void *)this + 3) + 328) + 4 * v11);
  if (v16) {
    int v17 = v16;
  }
  else {
    int v17 = *((_DWORD *)a2 + 28);
  }
  uint64_t v18 = v17 & 0x7FFFFFFF;
  uint64_t v19 = (void *)(v15 + 408);
  uint64_t v20 = *(unsigned int *)(v15 + 416);
  if (v18 >= v20)
  {
    sub_1CB9153B8((uint64_t)v19, v18 - v20 + 1, *(void *)(v15 + 424));
LABEL_423:
    operator new();
  }
  uint64_t v21 = *(void *)(*v19 + 8 * v18);
  if (!v21) {
    goto LABEL_423;
  }
  if (*(float *)(v21 + 116) == INFINITY)
  {
    *((_DWORD *)a2 + 29) = 2139095040;
    float v14 = INFINITY;
  }
  else
  {
    float v14 = *((float *)a2 + 29);
  }
LABEL_13:
  if (a3) {
    BOOL v22 = a4 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  int v23 = !v22;
  if (v22)
  {
    uint64_t v47 = 0;
    float v46 = 0.0;
    goto LABEL_34;
  }
  uint64_t v24 = *(void *)a4;
  uint64_t v25 = *(void *)(*((void *)this + 2) + 288);
  if (*(void *)a4 >= 8uLL && (uint64_t v26 = *(void *)((v24 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
  {
    unsigned int v27 = (uint64_t *)(v26 + 24);
  }
  else
  {
    unint64_t v265 = *(void **)(v25 + 536);
    unint64_t v266 = *(unsigned int *)(v25 + 544);
    if (v266)
    {
      unsigned int v267 = *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24) | (v24 >> 1) & 3;
      uint64_t v268 = v265;
      unint64_t v269 = v266;
      do
      {
        unint64_t v270 = v269 >> 1;
        BOOL v271 = &v268[2 * (v269 >> 1)];
        uint64_t v273 = *v271;
        v272 = v271 + 2;
        v269 += ~(v269 >> 1);
        if (((v273 >> 1) & 3 | *(_DWORD *)((v273 & 0xFFFFFFFFFFFFFFF8) + 24)) < v267) {
          uint64_t v268 = v272;
        }
        else {
          unint64_t v269 = v270;
        }
      }
      while (v269);
      if (v268 == &v265[2 * v266]
        || ((*v268 >> 1) & 3 | *(_DWORD *)((*v268 & 0xFFFFFFFFFFFFFFF8) + 24)) > v267)
      {
        v268 -= 2;
      }
    }
    else
    {
      uint64_t v268 = *(void **)(v25 + 536);
    }
    unsigned int v27 = v268 + 1;
  }
  uint64_t v28 = *(void *)(*((void *)this + 5) + 248);
  if (!v28)
  {
    unint64_t v45 = 0;
    float v38 = 0.0;
    float v39 = NAN;
    goto LABEL_32;
  }
  uint64_t v29 = *v27;
  uint64_t v30 = *(void *)(v28 + 160);
  int v31 = *(_DWORD *)(v28 + 176);
  unsigned int v32 = v29 >> 4;
  if (!v31) {
    goto LABEL_408;
  }
  uint64_t v33 = (v31 - 1) & (v32 ^ (v29 >> 9));
  uint64_t v34 = *(void *)(v30 + 16 * v33);
  if (v34 != v29)
  {
    int v231 = 1;
    while (v34 != -4096)
    {
      int v232 = v33 + v231++;
      uint64_t v33 = v232 & (v31 - 1);
      uint64_t v34 = *(void *)(v30 + 16 * v33);
      if (v34 == v29) {
        goto LABEL_26;
      }
    }
    goto LABEL_408;
  }
LABEL_26:
  uint64_t v35 = *(unsigned int *)(v30 + 16 * v33 + 8);
  if (v35 == 0xFFFFFFFFLL)
  {
LABEL_408:
    unint64_t v36 = 0;
    goto LABEL_28;
  }
  unint64_t v36 = *(void *)(*(void *)(v28 + 8) + 24 * v35 + 16);
LABEL_28:
  uint64_t v37 = *(void *)(v28 + 8);
  float v38 = (float)*(unint64_t *)(v37 + 16);
  float v39 = (float)((float)(1.0 / v38) * (float)v36) + 0.0;
  if (!v31) {
    goto LABEL_409;
  }
  unsigned int v40 = v32 ^ (v29 >> 9);
  unsigned int v41 = v31 - 1;
  uint64_t v42 = (v31 - 1) & v40;
  uint64_t v43 = *(void *)(v30 + 16 * v42);
  if (v43 != v29)
  {
    int v233 = 1;
    while (v43 != -4096)
    {
      int v234 = v42 + v233++;
      uint64_t v42 = v234 & v41;
      uint64_t v43 = *(void *)(v30 + 16 * v42);
      if (v43 == v29) {
        goto LABEL_30;
      }
    }
    goto LABEL_409;
  }
LABEL_30:
  uint64_t v44 = *(unsigned int *)(v30 + 16 * v42 + 8);
  if (v44 == 0xFFFFFFFFLL)
  {
LABEL_409:
    unint64_t v45 = 0;
    goto LABEL_32;
  }
  unint64_t v45 = *(void *)(v37 + 24 * v44 + 16);
LABEL_32:
  float v46 = v39 + (float)((float)(1.0 / v38) * (float)v45);
  uint64_t v47 = 2;
LABEL_34:
  uint64_t v292 = 0;
  uint64_t v293 = 0;
  int v291 = &v292;
  v288 = 0;
  uint64_t v289 = 0;
  unsigned int v290 = 0;
  uint64_t v48 = *((unsigned int *)a2 + 28);
  if ((v48 & 0x80000000) != 0) {
    uint64_t v49 = (uint64_t *)(v280[3] + 16 * (v48 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v49 = (uint64_t *)(v280[34] + 8 * v48);
  }
  uint64_t v50 = *v49;
  v279 = a2;
  int v283 = v23;
  if (!*v49) {
    goto LABEL_361;
  }
  while ((*(_DWORD *)v50 & 0x80000000) != 0)
  {
    uint64_t v50 = *(void *)(v50 + 24);
    if (!v50) {
      goto LABEL_361;
    }
  }
  uint64_t v275 = v10;
  v281 = a4;
  uint64_t v284 = 0;
  BOOL v51 = 0;
  do
  {
    uint64_t v52 = *(void *)(v50 + 8);
    do
      uint64_t v50 = *(void *)(v50 + 24);
    while (v50 && ((*(_DWORD *)v50 & 0x80000000) != 0 || *(void *)(v50 + 8) == v52));
    __int16 v53 = *(_WORD *)(v52 + 44);
    unint64_t v54 = v52;
    if ((v53 & 4) != 0)
    {
      do
        unint64_t v54 = *(void *)v54 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v54 + 44) & 4) != 0);
    }
    uint64_t v55 = v52;
    if ((v53 & 8) != 0)
    {
      do
        uint64_t v55 = *(void *)(v55 + 8);
      while ((*(_WORD *)(v55 + 44) & 8) != 0);
    }
    unint64_t v56 = *(void *)(v55 + 8);
    if (v54 != v56)
    {
      while (1)
      {
        unsigned int v57 = **(unsigned __int16 **)(v54 + 16);
        BOOL v58 = v57 > 0x17;
        int v59 = (1 << v57) & 0x83E000;
        if (v58 || v59 == 0) {
          break;
        }
        unint64_t v54 = *(void *)(v54 + 8);
        if (v54 == v56)
        {
          unint64_t v54 = v56;
          break;
        }
      }
    }
    uint64_t v61 = *(void *)(*((void *)this + 2) + 288);
    uint64_t v62 = *(void *)(v61 + 368);
    uint64_t v63 = *(unsigned int *)(v61 + 384);
    if (v63)
    {
      LODWORD(v64) = ((v54 >> 4) ^ (v54 >> 9)) & (v63 - 1);
      unint64_t v65 = (uint64_t *)(v62 + 16 * v64);
      uint64_t v66 = *v65;
      if (v54 == *v65)
      {
LABEL_61:
        if (!v23) {
          goto LABEL_66;
        }
        goto LABEL_62;
      }
      int v67 = 1;
      while (v66 != -4096)
      {
        int v68 = v64 + v67++;
        uint64_t v64 = v68 & (v63 - 1);
        uint64_t v66 = *(void *)(v62 + 16 * v64);
        if (v54 == v66)
        {
          unint64_t v65 = (uint64_t *)(v62 + 16 * v64);
          goto LABEL_61;
        }
      }
    }
    unint64_t v65 = (uint64_t *)(v62 + 16 * v63);
    if (!v23) {
      goto LABEL_66;
    }
LABEL_62:
    unsigned int v69 = (v65[1] >> 1) & 3 | *(_DWORD *)((v65[1] & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v69 < ((*(void *)a3 >> 1) & 3 | *(_DWORD *)((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) + 24))
      || v69 > ((*(void *)v281 >> 1) & 3 | *(_DWORD *)((*(void *)v281 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      continue;
    }
LABEL_66:
    uint64_t v47 = (v47 + 1);
    int v70 = **(unsigned __int16 **)(v52 + 16);
    if (v70 == 10) {
      continue;
    }
    if (v70 == 19)
    {
      uint64_t v71 = *(_DWORD **)(v52 + 32);
      if (v71[1] == v71[9] && ((v71[8] ^ *v71) & 0xFFF00) == 0) {
        continue;
      }
    }
    uint64_t v72 = v295;
    uint64_t v73 = HIDWORD(v296);
    if (v295 == v294)
    {
      if (HIDWORD(v296))
      {
        uint64_t v74 = 0;
        uint64_t v75 = 8 * HIDWORD(v296);
        int v76 = (uint64_t *)v295;
        while (*v76 != v52)
        {
          if (*v76 == -2) {
            uint64_t v74 = v76;
          }
          ++v76;
          v75 -= 8;
          if (!v75)
          {
            if (!v74) {
              goto LABEL_78;
            }
            uint64_t *v74 = v52;
            --v297;
            goto LABEL_101;
          }
        }
        continue;
      }
LABEL_78:
      unsigned int v77 = v296;
      if (HIDWORD(v296) < v296)
      {
        ++HIDWORD(v296);
        *(void *)&v295[8 * v73] = v52;
        goto LABEL_101;
      }
    }
    else
    {
      unsigned int v77 = v296;
    }
    if (3 * v77 <= 4 * (HIDWORD(v296) - v297))
    {
      if (v77 >= 0x40) {
        v77 *= 2;
      }
      else {
        unsigned int v77 = 128;
      }
    }
    else if (v77 - HIDWORD(v296) >= v77 >> 3)
    {
      goto LABEL_83;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v294, v77);
    unsigned int v77 = v296;
    uint64_t v72 = v295;
LABEL_83:
    unsigned int v78 = v77 - 1;
    unsigned int v79 = (v77 - 1) & ((v52 >> 4) ^ (v52 >> 9));
    uint64_t v80 = (uint64_t *)&v72[8 * v79];
    uint64_t v81 = *v80;
    if (*v80 == -1)
    {
      uint64_t v82 = 0;
LABEL_95:
      if (v82) {
        uint64_t v80 = v82;
      }
      if (*v80 != v52)
      {
        if (*v80 == -2) {
          --v297;
        }
        else {
          ++HIDWORD(v296);
        }
        uint64_t *v80 = v52;
        __int16 v53 = *(_WORD *)(v52 + 44);
LABEL_101:
        uint64_t v86 = *(void *)(*(void *)(v52 + 16) + 8);
        if ((v53 & 0xC) != 0 && (v53 & 4) == 0)
        {
          uint64_t v203 = v52;
          if ((v86 & 0x200) != 0) {
            goto LABEL_289;
          }
          while ((*(_WORD *)(v203 + 44) & 8) != 0)
          {
            uint64_t v203 = *(void *)(v203 + 8);
            if ((*(unsigned char *)(*(void *)(v203 + 16) + 9) & 2) != 0) {
              goto LABEL_289;
            }
          }
        }
        else
        {
          if ((v86 & 0x200) == 0) {
            goto LABEL_104;
          }
LABEL_289:
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v275 + 424))(v275, v52)
            && llvm::MachineInstr::findRegisterDefOperandIdx(v52, *((_DWORD *)a2 + 28), 0, 0, 0) != -1)
          {
            *((_DWORD *)a2 + 29) = 2139095040;
            float v274 = -1.0;
            goto LABEL_382;
          }
        }
LABEL_104:
        if (v14 == INFINITY)
        {
          float v121 = 1.0;
          goto LABEL_200;
        }
        uint64_t v87 = *(void **)(v52 + 24);
        if (v87 != (void *)v284)
        {
          uint64_t v88 = *((void *)this + 4);
          int v89 = *(_DWORD *)(v88 + 264);
          if (!v89) {
            goto LABEL_152;
          }
          uint64_t v90 = *(void *)(v88 + 248);
          unsigned int v91 = v89 - 1;
          uint64_t v92 = (v89 - 1) & ((v87 >> 4) ^ (v87 >> 9));
          uint64_t v93 = *(void **)(v90 + 16 * v92);
          if (v87 == v93)
          {
LABEL_111:
            uint64_t v96 = *(void *)(v90 + 16 * v92 + 8);
            if (!v96) {
              goto LABEL_152;
            }
            uint64_t v97 = (uint64_t *)v87[11];
            char v98 = (uint64_t *)v87[12];
            if (v97 == v98) {
              goto LABEL_152;
            }
            uint64_t v99 = (unsigned int *)(v96 + 76);
            uint64_t v100 = (unsigned int *)(v96 + 72);
            uint64_t v103 = v96 + 56;
            uint64_t v102 = *(void *)(v96 + 56);
            uint64_t v101 = *(void *)(v103 + 8);
            if (v101 == v102) {
              int v104 = v99;
            }
            else {
              int v104 = v100;
            }
            uint64_t v105 = v101;
            do
            {
              uint64_t v106 = *v97;
              if (v105 == v102)
              {
                uint64_t v107 = *v99;
                uint64_t v108 = (void *)(v102 + 8 * v107);
                if (v107)
                {
                  uint64_t v109 = 0;
                  uint64_t v110 = 8 * v107;
                  while (*(void *)(v102 + v109) != v106)
                  {
                    v109 += 8;
                    if (v110 == v109) {
                      goto LABEL_135;
                    }
                  }
                  uint64_t v108 = (void *)(v102 + v109);
                }
LABEL_135:
                uint64_t v105 = v102;
              }
              else
              {
                int v111 = *v100 - 1;
                unsigned int v112 = v111 & ((v106 >> 4) ^ (v106 >> 9));
                uint64_t v108 = (void *)(v101 + 8 * v112);
                uint64_t v113 = *v108;
                if (*v108 == -1)
                {
                  uint64_t v114 = 0;
LABEL_137:
                  if (v114) {
                    uint64_t v108 = v114;
                  }
                  if (*v108 != v106) {
                    uint64_t v108 = (void *)(v101 + 8 * *v104);
                  }
                }
                else
                {
                  uint64_t v114 = 0;
                  int v115 = 1;
                  while (v113 != v106)
                  {
                    if (v114) {
                      BOOL v116 = 0;
                    }
                    else {
                      BOOL v116 = v113 == -2;
                    }
                    if (v116) {
                      uint64_t v114 = v108;
                    }
                    unsigned int v117 = v112 + v115++;
                    unsigned int v112 = v117 & v111;
                    uint64_t v108 = (void *)(v101 + 8 * (v117 & v111));
                    uint64_t v113 = *v108;
                    if (*v108 == -1) {
                      goto LABEL_137;
                    }
                  }
                }
                uint64_t v105 = v101;
              }
              if (v105 == v102) {
                uint64_t v118 = v99;
              }
              else {
                uint64_t v118 = v100;
              }
              uint64_t v119 = (void *)(v105 + 8 * *v118);
              BOOL v51 = v108 == v119;
              ++v97;
            }
            while (v108 != v119 && v97 != v98);
          }
          else
          {
            int v94 = 1;
            while (v93 != (void *)-4096)
            {
              int v95 = v92 + v94++;
              uint64_t v92 = v95 & v91;
              uint64_t v93 = *(void **)(v90 + 16 * v92);
              if (v87 == v93) {
                goto LABEL_111;
              }
            }
LABEL_152:
            BOOL v51 = 0;
          }
          uint64_t v284 = *(void *)(v52 + 24);
        }
        uint64_t v122 = *(unsigned int *)(v52 + 40);
        if (v122)
        {
          int v123 = 0;
          char v124 = 0;
          int v125 = 0;
          int v126 = (_DWORD *)(*(void *)(v52 + 32) + 4);
          do
          {
            unsigned int v127 = *(v126 - 1);
            if (!(_BYTE)v127 && *v126 == *((_DWORD *)a2 + 28))
            {
              int v128 = (v127 >> 28) & 1;
              if ((v127 & 0xFFF00) == 0) {
                int v128 = 1;
              }
              int v129 = v128 | v125;
              int v130 = v128 ^ 1 | v123;
              if ((v127 & 0x1000000) != 0) {
                int v125 = v129;
              }
              else {
                v124 |= (v127 & 0x10000000) == 0;
              }
              if ((v127 & 0x1000000) != 0) {
                int v123 = v130;
              }
            }
            v126 += 8;
            --v122;
          }
          while (v122);
          if (v124)
          {
            char v131 = 1;
            goto LABEL_170;
          }
        }
        else
        {
          LOBYTE(v123) = 0;
          LOBYTE(v125) = 0;
        }
        char v131 = v123 & (v125 ^ 1);
LABEL_170:
        uint64_t v132 = *((void *)this + 5);
        uint64_t v133 = *(void *)(*(uint64_t (**)(void))(**(void **)(v87[4] + 16) + 176))(*(void *)(v87[4] + 16));
        (*(void (**)(void))(v133 + 336))();
        uint64_t v135 = *(void *)(v132 + 248);
        if (v135)
        {
          int v136 = *(_DWORD *)(v135 + 176);
          float v137 = 0.0;
          if (v136)
          {
            uint64_t v138 = *(void *)(v52 + 24);
            uint64_t v139 = *(void *)(v135 + 160);
            unsigned int v140 = v136 - 1;
            uint64_t v141 = (v136 - 1) & ((v138 >> 4) ^ (v138 >> 9));
            uint64_t v142 = *(void *)(v139 + 16 * v141);
            a2 = v279;
            if (v142 == v138)
            {
LABEL_173:
              uint64_t v143 = *(unsigned int *)(v139 + 16 * v141 + 8);
              if (v143 != 0xFFFFFFFFLL) {
                float v137 = (float)*(unint64_t *)(*(void *)(v135 + 8) + 24 * v143 + 16);
              }
            }
            else
            {
              int v161 = 1;
              while (v142 != -4096)
              {
                int v162 = v141 + v161++;
                uint64_t v141 = v162 & v140;
                uint64_t v142 = *(void *)(v139 + 16 * v141);
                if (v142 == v138) {
                  goto LABEL_173;
                }
              }
            }
          }
          else
          {
            a2 = v279;
          }
          float v144 = (float)*(unint64_t *)(*(void *)(v135 + 8) + 16);
        }
        else
        {
          float v137 = 0.0;
          float v144 = 0.0;
          a2 = v279;
        }
        unsigned int v145 = (v123 | v125) & 1;
        float v121 = (float)((float)(v131 & 1) + (float)((float)v145 * v134)) * (float)(v137 * (float)(1.0 / v144));
        if ((v145 & v51) != 1)
        {
          a3 = v282;
          int v23 = v283;
          goto LABEL_199;
        }
        uint64_t v146 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 288) + 392)
                         + 16 * *(unsigned int *)(v284 + 24)
                         + 8);
        unsigned int v147 = (v146 >> 1) & 3;
        unint64_t v148 = v146 & 0xFFFFFFFFFFFFFFF8;
        a3 = v282;
        int v23 = v283;
        if (v147) {
          uint64_t v149 = v148 | (2 * (v147 - 1));
        }
        else {
          uint64_t v149 = *(void *)v148 | 6;
        }
        unsigned int v150 = *((_DWORD *)a2 + 2);
        uint64_t v151 = *(void *)a2;
        if (v150)
        {
          uint64_t v152 = *(void *)(v151 + 24 * v150 - 16);
          unsigned int v153 = *(_DWORD *)((v149 & 0xFFFFFFFFFFFFFFF8) + 24) | (v149 >> 1) & 3;
          unsigned int v154 = (v152 >> 1) & 3 | *(_DWORD *)((v152 & 0xFFFFFFFFFFFFFFF8) + 24);
          unint64_t v155 = *(void **)a2;
          unint64_t v156 = *((unsigned int *)a2 + 2);
          if (v153 < v154)
          {
            do
            {
              unint64_t v157 = v156 >> 1;
              uint64_t v158 = v155[3 * (v156 >> 1) + 1];
              LODWORD(v158) = (v158 >> 1) & 3 | *(_DWORD *)((v158 & 0xFFFFFFFFFFFFFFF8) + 24);
              v156 -= (v156 >> 1) + 1;
              BOOL v159 = v153 >= v158;
              if (v153 >= v158) {
                unint64_t v160 = v157 + 1;
              }
              else {
                unint64_t v160 = 0;
              }
              v155 += 3 * v160;
              if (!v159) {
                unint64_t v156 = v157;
              }
            }
            while (v156);
LABEL_196:
            if (v155 != (void *)(v151 + 24 * v150)
              && ((*v155 >> 1) & 3 | *(_DWORD *)((*v155 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v149 & 0xFFFFFFFFFFFFFFF8) + 24) | (v149 >> 1) & 3))
            {
              float v121 = v121 * 3.0;
            }
LABEL_199:
            float v46 = v46 + v121;
LABEL_200:
            if (**(_WORD **)(v52 + 16) != 19) {
              continue;
            }
            int v163 = *((_DWORD *)a2 + 28);
            uint64_t v164 = *(_DWORD **)(v52 + 32);
            unsigned int MatchingSuperReg = v164[1];
            if (MatchingSuperReg == v163)
            {
              unsigned int MatchingSuperReg = v164[9];
              char v166 = v164 + 8;
              if (!MatchingSuperReg) {
                continue;
              }
            }
            else
            {
              char v166 = v164;
              v164 += 8;
              if (!MatchingSuperReg) {
                continue;
              }
            }
            int v167 = (*v164 >> 8) & 0xFFF;
            int v168 = (*v166 >> 8) & 0xFFF;
            if ((MatchingSuperReg & 0x80000000) != 0)
            {
              if (v167 != v168) {
                continue;
              }
              goto LABEL_207;
            }
            BOOL v201 = (uint64_t *)(*(void *)(v280[3] + 16 * (v163 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            if (v168)
            {
              uint64_t v211 = v276[1];
              uint64_t v212 = v276[7];
              uint64_t v213 = *(unsigned int *)(v211 + 24 * MatchingSuperReg + 4);
              if (*(_WORD *)(v212 + 2 * v213))
              {
                unsigned __int16 v214 = *(_WORD *)(v212 + 2 * v213) + MatchingSuperReg;
                uint64_t v215 = (unsigned __int16 *)(v276[11] + 2 * *(unsigned int *)(v211 + 24 * MatchingSuperReg + 12));
                uint64_t v216 = (unsigned __int16 *)(v212 + 2 * v213 + 2);
                while (v168 != *v215)
                {
                  unsigned int MatchingSuperReg = 0;
                  int v217 = *v216++;
                  v214 += v217;
                  ++v215;
                  a2 = v279;
                  a3 = v282;
                  int v23 = v283;
                  if (!v217) {
                    goto LABEL_273;
                  }
                }
                unsigned int MatchingSuperReg = v214;
                a2 = v279;
                a3 = v282;
                int v23 = v283;
                goto LABEL_270;
              }
              unsigned int MatchingSuperReg = 0;
              a2 = v279;
              a3 = v282;
              int v23 = v283;
            }
            else
            {
LABEL_270:
              if (MatchingSuperReg - 1 <= 0x3FFFFFFE)
              {
                unint64_t v202 = (unint64_t)MatchingSuperReg >> 3;
                if (v202 < *(unsigned __int16 *)(*v201 + 22)
                  && ((*(unsigned __int8 *)(*(void *)(*v201 + 8) + v202) >> (MatchingSuperReg & 7)) & 1) != 0)
                {
                  goto LABEL_207;
                }
              }
            }
LABEL_273:
            if (!v167) {
              continue;
            }
            unsigned int MatchingSuperReg = llvm::MCRegisterInfo::getMatchingSuperReg(v276 + 1, MatchingSuperReg, v167, *v201);
            if (!MatchingSuperReg) {
              continue;
            }
LABEL_207:
            LODWORD(v285) = 0;
            uint64_t v169 = v288;
            uint64_t v170 = v290;
            if (!v290)
            {
              uint64_t v171 = 0;
              goto LABEL_221;
            }
            unsigned int v172 = v290 - 1;
            unsigned int v173 = (v290 - 1) & (37 * MatchingSuperReg);
            uint64_t v171 = (float *)&v288[2 * v173];
            float v174 = *v171;
            if (MatchingSuperReg != *(_DWORD *)v171)
            {
              uint64_t v175 = 0;
              int v176 = 1;
              while (v174 != NAN)
              {
                if (v175) {
                  BOOL v177 = 0;
                }
                else {
                  BOOL v177 = LODWORD(v174) == -2;
                }
                if (v177) {
                  uint64_t v175 = v171;
                }
                unsigned int v178 = v173 + v176++;
                unsigned int v173 = v178 & v172;
                uint64_t v171 = (float *)&v288[2 * (v178 & v172)];
                float v174 = *v171;
                if (MatchingSuperReg == *(_DWORD *)v171) {
                  goto LABEL_245;
                }
              }
              if (v175) {
                uint64_t v171 = v175;
              }
LABEL_221:
              if (4 * (int)v289 + 4 < 3 * v290)
              {
                if (v290 + ~v289 - HIDWORD(v289) <= v290 >> 3)
                {
                  sub_1CC24EFC8((uint64_t)&v288, v290);
                  if (v290)
                  {
                    unsigned int v204 = v290 - 1;
                    unsigned int v205 = (v290 - 1) & (37 * MatchingSuperReg);
                    uint64_t v171 = (float *)&v288[2 * v205];
                    int v206 = *(_DWORD *)v171;
                    if (MatchingSuperReg != *(_DWORD *)v171)
                    {
                      uint64_t v207 = 0;
                      int v208 = 1;
                      while (v206 != -1)
                      {
                        if (v207) {
                          BOOL v209 = 0;
                        }
                        else {
                          BOOL v209 = v206 == -2;
                        }
                        if (v209) {
                          uint64_t v207 = v171;
                        }
                        unsigned int v210 = v205 + v208++;
                        unsigned int v205 = v210 & v204;
                        uint64_t v171 = (float *)&v288[2 * (v210 & v204)];
                        int v206 = *(_DWORD *)v171;
                        a2 = v279;
                        if (MatchingSuperReg == *(_DWORD *)v171) {
                          goto LABEL_242;
                        }
                      }
                      if (v207) {
                        uint64_t v171 = v207;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v171 = 0;
                  }
                  a2 = v279;
                }
              }
              else
              {
                unint64_t v179 = (2 * v290 - 1) | ((unint64_t)(2 * v290 - 1) >> 1);
                unint64_t v180 = v179 | (v179 >> 2) | ((v179 | (v179 >> 2)) >> 4);
                int v181 = ((v180 | (v180 >> 8)) >> 16) | v180 | (v180 >> 8);
                if ((v181 + 1) > 0x40) {
                  uint64_t v182 = (v181 + 1);
                }
                else {
                  uint64_t v182 = 64;
                }
                unsigned int v290 = v182;
                uint64_t v183 = (int *)operator new(8 * v182, (std::align_val_t)4uLL);
                v288 = v183;
                if (!v169)
                {
                  uint64_t v184 = 0;
                  uint64_t v289 = 0;
                  do
                  {
                    v183[v184] = -1;
                    v184 += 2;
                  }
                  while (2 * v182 != v184);
                  goto LABEL_228;
                }
                sub_1CC24F094((uint64_t)&v288, v169, &v169[2 * v170]);
                MEMORY[0x1D25D9CD0](v169, 4);
                LODWORD(v182) = v290;
                if (v290)
                {
                  uint64_t v183 = v288;
LABEL_228:
                  int v185 = v182 - 1;
                  unsigned int v186 = (v182 - 1) & (37 * MatchingSuperReg);
                  uint64_t v171 = (float *)&v183[2 * v186];
                  int v187 = *(_DWORD *)v171;
                  if (MatchingSuperReg != *(_DWORD *)v171)
                  {
                    int v188 = 0;
                    int v189 = 1;
                    while (v187 != -1)
                    {
                      if (v188) {
                        BOOL v190 = 0;
                      }
                      else {
                        BOOL v190 = v187 == -2;
                      }
                      if (v190) {
                        int v188 = v171;
                      }
                      unsigned int v191 = v186 + v189++;
                      unsigned int v186 = v191 & v185;
                      uint64_t v171 = (float *)&v183[2 * (v191 & v185)];
                      int v187 = *(_DWORD *)v171;
                      if (MatchingSuperReg == *(_DWORD *)v171) {
                        goto LABEL_242;
                      }
                    }
                    if (v188) {
                      uint64_t v171 = v188;
                    }
                  }
                }
                else
                {
                  uint64_t v171 = 0;
                }
              }
LABEL_242:
              LODWORD(v289) = v289 + 1;
              if (*(_DWORD *)v171 != -1) {
                --HIDWORD(v289);
              }
              *(_DWORD *)uint64_t v171 = MatchingSuperReg;
              v171[1] = 0.0;
            }
LABEL_245:
            float v192 = v121 + v171[1];
            v171[1] = v192;
            *(float *)&int v285 = v192;
            a3 = v282;
            if ((MatchingSuperReg & 0x80000000) == 0 && !sub_1CB946A80(v280, MatchingSuperReg)) {
              goto LABEL_266;
            }
            int v193 = (int)v285;
            int v194 = v292;
            __int16 v195 = &v292;
LABEL_248:
            char v196 = v195;
            if (v194)
            {
              while (1)
              {
                __int16 v195 = (uint64_t **)v194;
                unsigned int v197 = *((_DWORD *)v194 + 7);
                if ((MatchingSuperReg >> 30 == 0) != v197 - 1 < 0x3FFFFFFF)
                {
                  if (!(MatchingSuperReg >> 30)) {
                    goto LABEL_261;
                  }
                  if (v197 - 1 > 0x3FFFFFFE) {
                    goto LABEL_266;
                  }
                }
                else
                {
                  float v198 = *((float *)v195 + 8);
                  if (*(float *)&v285 == v198)
                  {
                    if (MatchingSuperReg < v197)
                    {
LABEL_261:
                      int v194 = *v195;
                      goto LABEL_248;
                    }
                    if (v197 >= MatchingSuperReg) {
                      goto LABEL_266;
                    }
                  }
                  else
                  {
                    if (*(float *)&v285 > v198) {
                      goto LABEL_261;
                    }
                    if (v198 <= *(float *)&v285) {
                      goto LABEL_266;
                    }
                  }
                }
                int v194 = v195[1];
                if (!v194)
                {
                  char v196 = v195 + 1;
                  break;
                }
              }
            }
            int v199 = operator new(0x28uLL);
            v199[7] = MatchingSuperReg;
            v199[8] = v193;
            *(void *)int v199 = 0;
            *((void *)v199 + 1) = 0;
            *((void *)v199 + 2) = v195;
            void *v196 = (uint64_t *)v199;
            if (*v291)
            {
              int v291 = (uint64_t **)*v291;
              unsigned int v200 = *v196;
            }
            else
            {
              unsigned int v200 = (uint64_t *)v199;
            }
            sub_1CB8358B8(v292, v200);
            ++v293;
LABEL_266:
            int v23 = v283;
            continue;
          }
        }
        else
        {
          unsigned int v150 = 0;
        }
        unint64_t v155 = (void *)(v151 + 24 * v150);
        goto LABEL_196;
      }
    }
    else
    {
      uint64_t v82 = 0;
      int v83 = 1;
      while (v81 != v52)
      {
        if (v82) {
          BOOL v84 = 0;
        }
        else {
          BOOL v84 = v81 == -2;
        }
        if (v84) {
          uint64_t v82 = v80;
        }
        unsigned int v85 = v79 + v83++;
        unsigned int v79 = v85 & v78;
        uint64_t v80 = (uint64_t *)&v72[8 * (v85 & v78)];
        uint64_t v81 = *v80;
        if (*v80 == -1) {
          goto LABEL_95;
        }
      }
    }
  }
  while (v50);
  if (v293) {
    char v218 = v23;
  }
  else {
    char v218 = 1;
  }
  if (v218)
  {
    a4 = v281;
  }
  else
  {
    a4 = v281;
    if (!v278 && v277) {
      *(_DWORD *)(v280[26] + 40 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF) + 16) = 0;
    }
    v286 = 0;
    uint64_t v287 = 0;
    int v285 = &v286;
    uint64_t v219 = v291;
    if (v291 == &v292)
    {
      unsigned int v220 = 0;
    }
    else
    {
      unsigned int v220 = 0;
      do
      {
        BOOL v221 = &v286;
        uint64_t v222 = &v286;
        if (v220)
        {
          unsigned int v223 = *((_DWORD *)v219 + 7);
          do
          {
            while (1)
            {
              uint64_t v222 = (uint64_t **)v220;
              unsigned int v224 = *((_DWORD *)v220 + 7);
              if (v223 >= v224) {
                break;
              }
              unsigned int v220 = (uint64_t *)*v220;
              BOOL v221 = v222;
              if (!*v222) {
                goto LABEL_337;
              }
            }
            if (v224 >= v223) {
              goto LABEL_343;
            }
            unsigned int v220 = (uint64_t *)v220[1];
          }
          while (v220);
          BOOL v221 = v222 + 1;
        }
LABEL_337:
        char v225 = operator new(0x20uLL);
        v225[7] = *((_DWORD *)v219 + 7);
        *(void *)char v225 = 0;
        *((void *)v225 + 1) = 0;
        *((void *)v225 + 2) = v222;
        void *v221 = (uint64_t *)v225;
        if (*v285)
        {
          int v285 = (uint64_t **)*v285;
          char v225 = *v221;
        }
        sub_1CB8358B8(v286, (uint64_t *)v225);
        ++v287;
        int v226 = *((_DWORD *)v219 + 7);
        if (!v278 || v226 != v277)
        {
          uint64_t v227 = v280[26] + 40 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF);
          unint64_t v228 = *(unsigned int *)(v227 + 16);
          if (v228 >= *(unsigned int *)(v227 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)(v227 + 8) + 4 * v228) = v226;
          ++*(_DWORD *)(v227 + 16);
        }
LABEL_343:
        uint64_t v229 = v219[1];
        if (v229)
        {
          do
          {
            uint64_t v230 = (uint64_t **)v229;
            uint64_t v229 = (uint64_t *)*v229;
          }
          while (v229);
        }
        else
        {
          do
          {
            uint64_t v230 = (uint64_t **)v219[2];
            BOOL v22 = *v230 == (uint64_t *)v219;
            uint64_t v219 = v230;
          }
          while (!v22);
        }
        unsigned int v220 = v286;
        uint64_t v219 = v230;
      }
      while (v230 != &v292);
    }
    float v46 = v46 * 1.01;
    sub_1CB833A08((uint64_t)&v285, v220);
    int v23 = v283;
  }
LABEL_361:
  float v274 = -1.0;
  if (v14 != INFINITY)
  {
    if (v23) {
      goto LABEL_363;
    }
    uint64_t v242 = *((void *)this + 2);
    unsigned int v243 = *((_DWORD *)a2 + 2);
    if (v243)
    {
      int v244 = *(void **)a2;
      uint64_t v245 = *(void *)a2 + 24 * v243;
      unint64_t v246 = (unint64_t *)(*(void *)(v242 + 288) + 344);
      while (1)
      {
        unint64_t v247 = *v244 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          unint64_t v247 = *(void *)(v247 + 8);
          if ((unint64_t *)v247 == v246) {
            break;
          }
          if (*(void *)(v247 + 16)) {
            goto LABEL_372;
          }
        }
        unint64_t v247 = *v246;
LABEL_372:
        if (*(_DWORD *)((v247 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v244[1] & 0xFFFFFFFFFFFFFFF8) + 24)) {
          break;
        }
        v244 += 3;
        if (v244 == (void *)v245) {
          goto LABEL_385;
        }
      }
LABEL_363:
      unint64_t v236 = (const llvm::LiveInterval *)*((void *)this + 2);
      uint64_t v235 = (const llvm::LiveIntervals *)*((void *)this + 3);
      int v237 = (const llvm::VirtRegMap *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 16)
                                                                         + 104))(*(void *)(*((void *)this + 1)
                                                                                             + 16));
      int isRematerializable = llvm::VirtRegAuxInfo::isRematerializable(a2, v236, v235, v237, v238);
      v240.n128_f32[0] = v46 * 0.5;
      if (!isRematerializable) {
        v240.n128_f32[0] = v46;
      }
      if (v23)
      {
        uint64_t v241 = ((*(void *)a4 >> 1) & 3 | *(_DWORD *)((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) + 24))
             - ((*(void *)a3 >> 1) & 3 | *(_DWORD *)((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) + 24));
      }
      else
      {
        uint64_t v248 = *((unsigned int *)a2 + 2);
        if (v248)
        {
          LODWORD(v241) = 0;
          uint64_t v249 = 24 * v248;
          unint64_t v250 = (void *)(*(void *)a2 + 8);
          do
          {
            uint64_t v241 = ((*v250 >> 1) & 3 | *(_DWORD *)((*v250 & 0xFFFFFFFFFFFFFFF8) + 24))
                 + v241
                 - ((*(v250 - 1) >> 1) & 3 | *(_DWORD *)((*(v250 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
            v250 += 3;
            v249 -= 24;
          }
          while (v249);
        }
        else
        {
          uint64_t v241 = 0;
        }
      }
      float v274 = (*(float (**)(llvm::VirtRegAuxInfo *, uint64_t, uint64_t, __n128))(*(void *)this + 16))(this, v241, v47, v240);
    }
    else
    {
LABEL_385:
      if (llvm::LiveRange::isLiveAtIndexes((uint64_t)a2, *(void **)(v242 + 440), *(unsigned int *)(v242 + 448))) {
        goto LABEL_363;
      }
      uint64_t v252 = *(void *)(*((void *)this + 3) + 248);
      uint64_t v253 = *((unsigned int *)a2 + 28);
      if ((v253 & 0x80000000) != 0) {
        v254 = (uint64_t *)(*(void *)(v252 + 24) + 16 * (v253 & 0x7FFFFFFF) + 8);
      }
      else {
        v254 = (uint64_t *)(*(void *)(v252 + 272) + 8 * v253);
      }
      uint64_t v255 = *v254;
      if (v255)
      {
        a3 = v282;
        int v23 = v283;
        do
        {
          uint64_t v256 = *(void *)(v255 + 8);
          uint64_t v257 = *(void *)(v256 + 16);
          if (*(_WORD *)v257 == 31)
          {
            unsigned int v258 = *(unsigned __int8 *)(v257 + 4);
            if ((*(unsigned char *)(v257 + 8) & 2) == 0 || (int v262 = *(_DWORD *)(v256 + 40), v262 == v258))
            {
              int v259 = *(unsigned __int8 *)(v257 + 4);
            }
            else
            {
              int v263 = v262 - 1;
              int v259 = *(unsigned __int8 *)(v257 + 4);
              do
              {
                int v264 = *(_DWORD *)(*(void *)(v256 + 32) + 32 * v258);
                if ((v264 & 0x10000FF) != 0x1000000) {
                  break;
                }
                v259 += (v264 & 0x2000000) == 0;
                if (v263 == v258) {
                  break;
                }
                ++v258;
              }
              while ((v264 & 0x2000000) == 0);
            }
            uint64_t v260 = *(void *)(v257 + 32);
            if (v260)
            {
              unsigned int v261 = -1;
              do
                ++v261;
              while (*(_WORD *)(v260 + 2 * v261));
            }
            else
            {
              unsigned int v261 = 0;
            }
            a2 = v279;
            if (v261 + v259 + *(_DWORD *)(*(void *)(v256 + 32) + 32 * (v261 + v259 + 2) + 16) + 4 <= ((unint64_t)(v255 - *(void *)(v256 + 32)) >> 5)) {
              goto LABEL_363;
            }
          }
          uint64_t v255 = *(void *)(v255 + 24);
        }
        while (v255);
      }
      *((_DWORD *)a2 + 29) = 2139095040;
    }
  }
LABEL_382:
  MEMORY[0x1D25D9CD0](v288, 4);
  sub_1CBB0D544(v292);
  if (v295 != v294) {
    free(v295);
  }
  return v274;
}

float llvm::VirtRegAuxInfo::futureWeight(llvm::VirtRegAuxInfo *a1, llvm::LiveInterval *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  return llvm::VirtRegAuxInfo::weightCalcHelper(a1, a2, (llvm::SlotIndex *)&v6, (llvm::SlotIndex *)&v5);
}

_DWORD *sub_1CC24EFC8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  __n128 v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC24F094(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC24F094(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unint64_t v6 = *(_DWORD **)result;
    do
    {
      *unint64_t v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      uint64_t v10 = &v3[2 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        uint64_t v12 = 0;
        int v13 = 1;
        while (v11 != -1)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -2;
          }
          if (v14) {
            uint64_t v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          uint64_t v10 = &v3[2 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_11;
          }
        }
        if (v12) {
          uint64_t v10 = v12;
        }
      }
LABEL_11:
      *uint64_t v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t llvm::CCState::CCState(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 5) = 0;
  *(void *)(a1 + 8) = a4;
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a4 + 16) + 176))(*(void *)(a4 + 16));
  *(void *)(a1 + 48) = a1 + 64;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 56) = 0x1000000000;
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 136) = 0x400000000;
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x400000000;
  *(void *)(a1 + 256) = a1 + 272;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 264) = 0x400000000;
  unsigned int v10 = *(_DWORD *)(v9 + 16) + 31;
  if (v10 >= 0x20)
  {
    uint64_t v11 = v10 >> 5;
    if (v10 >= 0x220) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v11) {
      bzero(*(void **)(a1 + 48), 4 * v11);
    }
    *(_DWORD *)(a1 + 56) = v11;
  }
  return a1;
}

uint64_t llvm::CCState::HandleByVal(uint64_t a1, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, char a5, int a6, unsigned __int8 a7, uint64_t a8, unsigned int a9, int a10)
{
  int v16 = ((a9 >> 19) & 0xF) - 1;
  if (((a9 >> 19) & 0xF) == 0) {
    LOBYTE(v16) = 0;
  }
  if (a10 <= a6) {
    int v17 = a6;
  }
  else {
    int v17 = a10;
  }
  int v25 = v17;
  if (a7 <= v16) {
    unsigned __int8 v18 = v16;
  }
  else {
    unsigned __int8 v18 = a7;
  }
  if (!*(unsigned char *)(a1 + 5))
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) < v18) {
      *(unsigned char *)(v19 + 60) = v18;
    }
  }
  uint64_t v20 = *(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 16) + 120))(*(void *)(*(void *)(a1 + 8) + 16));
  (*(void (**)(void))(v20 + 1848))();
  uint64_t v21 = ((1 << v18) + *(unsigned int *)(a1 + 40) + 0xFFFFFFFFLL) & -(1 << v18);
  *(_DWORD *)(a1 + 40) = (((1 << v18) + *(_DWORD *)(a1 + 40) - 1) & -(1 << v18))
                       + (((1 << a7) + v25 - 1) & -(int)(1 << a7));
  unsigned int v22 = *(unsigned __int8 *)(a1 + 44);
  if (v22 <= v18) {
    LOBYTE(v22) = v18;
  }
  *(unsigned char *)(a1 + 44) = v22;
  if (!*(unsigned char *)(a1 + 5))
  {
    uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 56);
    if (*(unsigned __int8 *)(v23 + 60) < v18) {
      *(unsigned char *)(v23 + 60) = v18;
    }
  }
  return sub_1CB839378(*(void *)(a1 + 24), a2 | (unint64_t)(v21 << 32), (a4 << 16) | (a3 << 8) | (4 * (a5 & 0x3F)) | 1u);
}

uint64_t llvm::CCState::ensureMaxAlignment(uint64_t result, unsigned __int8 a2)
{
  if (!*(unsigned char *)(result + 5))
  {
    uint64_t v2 = *(void *)(*(void *)(result + 8) + 56);
    if (*(unsigned __int8 *)(v2 + 60) < a2) {
      *(unsigned char *)(v2 + 60) = a2;
    }
  }
  return result;
}

unsigned __int16 *llvm::CCState::MarkAllocated(unsigned __int16 *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    uint64_t v3 = (uint64_t *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  int v5 = *(_DWORD *)(*v3 + 24 * a2 + 16) & 0xF;
  unint64_t v6 = ((unint64_t)*(unsigned int *)(*v3 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v9 = v3 + 5;
  uint64_t v8 = v3[5];
  uint64_t v7 = v9[1];
  unsigned int v10 = (unsigned __int16 *)(v7 + v6);
  int v12 = *v10;
  uint64_t v11 = v10 + 1;
  int v13 = v12 + v5 * a2;
  while (1)
  {
    uint64_t v14 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    if (*(_WORD *)(v8 + 4 * (unsigned __int16)v13) && v7 != 0) {
      break;
    }
    int v20 = (unsigned __int16)*v11++;
    v13 += v20;
    if (!v20) {
      return this;
    }
  }
  unsigned int v16 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13 + 2) << 16;
  uint64_t v17 = *((void *)this + 6);
  while (1)
  {
    while (1)
    {
      this = (unsigned __int16 *)(v7 + 2 * *(unsigned int *)(v4 + 24 * v14 + 8));
      do
      {
        *(_DWORD *)(v17 + 4 * ((unsigned __int16)v14 >> 5)) |= 1 << v14;
        int v18 = *this++;
        LODWORD(v14) = v18 + v14;
      }
      while (v18);
      uint64_t v14 = HIWORD(v16);
      if (!v14) {
        break;
      }
      v16 >>= 16;
    }
    if (!*v11) {
      break;
    }
    v13 += (unsigned __int16)*v11++;
    uint64_t v19 = (unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    uint64_t v14 = *v19;
    unsigned int v16 = v19[1] << 16;
  }
  return this;
}

unsigned __int16 *llvm::CCState::MarkUnallocated(unsigned __int16 *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    uint64_t v3 = (uint64_t *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  int v5 = *(_DWORD *)(*v3 + 24 * a2 + 16) & 0xF;
  unint64_t v6 = ((unint64_t)*(unsigned int *)(*v3 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v9 = v3 + 5;
  uint64_t v8 = v3[5];
  uint64_t v7 = v9[1];
  unsigned int v10 = (unsigned __int16 *)(v7 + v6);
  int v12 = *v10;
  uint64_t v11 = v10 + 1;
  int v13 = v12 + v5 * a2;
  while (1)
  {
    uint64_t v14 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    if (*(_WORD *)(v8 + 4 * (unsigned __int16)v13) && v7 != 0) {
      break;
    }
    int v16 = (unsigned __int16)*v11++;
    v13 += v16;
    if (!v16) {
      return this;
    }
  }
  unsigned int v17 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13 + 2) << 16;
  uint64_t v18 = *((void *)this + 6);
  while (1)
  {
    while (1)
    {
      this = (unsigned __int16 *)(v7 + 2 * *(unsigned int *)(v4 + 24 * v14 + 8));
      do
      {
        *(_DWORD *)(v18 + 4 * ((unsigned __int16)v14 >> 5)) &= ~(1 << v14);
        int v19 = *this++;
        LODWORD(v14) = v19 + v14;
      }
      while (v19);
      uint64_t v14 = HIWORD(v17);
      if (!v14) {
        break;
      }
      v17 >>= 16;
    }
    if (!*v11) {
      break;
    }
    v13 += (unsigned __int16)*v11++;
    int v20 = (unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    uint64_t v14 = *v20;
    unsigned int v17 = v20[1] << 16;
  }
  return this;
}

uint64_t llvm::CCState::IsShadowAllocatedReg(void *a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1[6] + 4 * (a2 >> 5)) >> a2))
  {
    uint64_t v4 = (unsigned int *)a1[3];
    uint64_t v5 = v4[2];
    if (!v5) {
      return 1;
    }
    unsigned int v6 = a2 - 1;
    uint64_t v7 = 12 * v5;
    for (int i = (unsigned char *)(*(void *)v4 + 8); ; i += 12)
    {
      if ((*i & 1) == 0)
      {
        unsigned int v9 = *((_DWORD *)i - 1);
        if (v9 == a2
          || v6 <= 0x3FFFFFFE
          && v9 - 1 <= 0x3FFFFFFE
          && llvm::MCRegisterInfo::regsOverlap((void *)(a1[2] + 8), v9, a2))
        {
          break;
        }
      }
      v7 -= 12;
      if (!v7) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t llvm::CCState::AnalyzeCallOperands(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, unint64_t, uint64_t))
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v10 = *(void *)a2 + v8;
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v10 + 8);
      uint64_t result = a3(i, *(unsigned __int8 *)(v10 + 12), *(unsigned __int8 *)(v10 + 12), 0, *(void *)v10, v3, v7);
      v8 += 48;
    }
  }
  return result;
}

uint64_t llvm::CCState::AnalyzeCallOperands(uint64_t result, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, void, void, void, void, unint64_t, uint64_t))
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *a3 + v10;
      unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v12 + 8);
      uint64_t result = a4(v11, *(unsigned __int8 *)(*(void *)a2 + v11), *(unsigned __int8 *)(*(void *)a2 + v11), 0, *(void *)v12, v4, v9);
      ++v11;
      v10 += 12;
    }
    while (v5 != v11);
  }
  return result;
}

uint64_t llvm::CCState::AnalyzeCallResult(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void, void, void, void, void, void, uint64_t))
{
  return a3(0, a2, a2, 0, 0, 0, a1);
}

void llvm::CCState::getRemainingRegParmsForType(uint64_t a1, void *a2, unsigned __int8 a3, void (*a4)(void, uint64_t, uint64_t, void, uint64_t, void, uint64_t))
{
  int v21 = *(_DWORD *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 44);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 24) + 8);
  uint64_t v9 = a3;
  BOOL v10 = *(_DWORD *)a1 == 65 || *(_DWORD *)a1 == 80;
  uint64_t v11 = 4;
  if (!v10) {
    uint64_t v11 = 0;
  }
  if (a3 - 2 > 5) {
    uint64_t v11 = 0;
  }
  if (a3 - 15 >= 0x9C) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 4;
  }
  do
  {
    a4(0, v9, v9, 0, v12, 0, a1);
    uint64_t v13 = *(void *)(a1 + 24);
    unsigned int v14 = *(_DWORD *)(v13 + 8);
  }
  while ((*(unsigned char *)(*(void *)v13 + 12 * v14 - 4) & 1) == 0);
  if (v8 != v14)
  {
    unsigned int v15 = v8;
    do
    {
      unsigned int v16 = v15;
      uint64_t v17 = **(void **)(a1 + 24);
      if ((*(unsigned char *)(v17 + 12 * v15 + 8) & 1) == 0)
      {
        int v18 = *(_DWORD *)(v17 + 12 * v15 + 4);
        uint64_t v19 = a2[1];
        if ((unint64_t)(v19 + 1) > a2[2]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)(*a2 + 2 * v19) = v18;
        ++a2[1];
      }
      unsigned int v15 = v16 + 1;
    }
    while (v14 != v16 + 1);
    uint64_t v13 = *(void *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 40) = v21;
  *(unsigned char *)(a1 + 44) = v7;
  unsigned int v20 = *(_DWORD *)(v13 + 8);
  if (v20 != v8)
  {
    if (v20 <= v8)
    {
      if (*(_DWORD *)(v13 + 12) < v8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v20 != v8) {
        bzero((void *)(*(void *)v13 + 12 * v20), 12 * ((12 * (v8 - (unint64_t)v20) - 12) / 0xC) + 12);
      }
    }
    *(_DWORD *)(v13 + 8) = v8;
  }
}

void llvm::CCState::analyzeMustTailForwardedRegisters(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, void (*a5)(void, uint64_t, uint64_t, void, uint64_t, void, uint64_t))
{
  v24[2] = *MEMORY[0x1E4F143B8];
  char v18 = *(unsigned char *)(a1 + 5);
  char v19 = *(unsigned char *)(a1 + 4);
  *(_WORD *)(a1 + 4) = 256;
  if (a4)
  {
    unsigned int v6 = a3;
    unsigned int v20 = &a3[a4];
    do
    {
      uint64_t v8 = *v6;
      unsigned int v22 = (unsigned __int16 *)v24;
      long long v23 = xmmword_1CD96EEC0;
      llvm::CCState::getRemainingRegParmsForType(a1, &v22, v8, a5);
      uint64_t v9 = *(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 16) + 120))(*(void *)(*(void *)(a1 + 8) + 16));
      uint64_t v10 = (*(uint64_t (**)(void))(v9 + 424))();
      uint64_t v11 = v22;
      if ((void)v23)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v8 << 48;
        uint64_t v14 = 2 * v23;
        do
        {
          uint64_t v15 = *v11;
          unsigned int v16 = llvm::MachineFunction::addLiveIn(*(void *)(a1 + 8), *v11, v12);
          unint64_t v17 = *(unsigned int *)(a2 + 8);
          if (v17 >= *(unsigned int *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a2 + 8 * v17) = v13 | (v15 << 32) | v16;
          ++*(_DWORD *)(a2 + 8);
          ++v11;
          v14 -= 2;
        }
        while (v14);
        uint64_t v11 = v22;
      }
      if (v11 != (unsigned __int16 *)v24) {
        free(v11);
      }
      ++v6;
    }
    while (v6 != v20);
  }
  *(unsigned char *)(a1 + 5) = v18;
  *(unsigned char *)(a1 + 4) = v19;
}

uint64_t llvm::CCState::resultsCompatible(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, void, void, void, void, unint64_t, unsigned char *), void (*a7)(uint64_t, void, void, void, void, unint64_t, unsigned char *))
{
  v56[6] = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return 1;
  }
  unint64_t v14 = a3;
  unint64_t v54 = (char *)v56;
  uint64_t v55 = 0x400000000;
  llvm::CCState::CCState((uint64_t)v45, a1, 0, a3, (uint64_t)&v54, a4);
  uint64_t v15 = *(unsigned int *)(a5 + 8);
  if (v15)
  {
    uint64_t v16 = 0;
    for (uint64_t i = 0; i != v15; ++i)
    {
      uint64_t v18 = *(void *)a5 + v16;
      unint64_t v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v18 + 8);
      a6(i, *(unsigned __int8 *)(v18 + 12), *(unsigned __int8 *)(v18 + 12), 0, *(void *)v18, v7, v45);
      v16 += 48;
    }
  }
  uint64_t v42 = v44;
  uint64_t v43 = 0x400000000;
  llvm::CCState::CCState((uint64_t)v33, a2, 0, v14, (uint64_t)&v42, a4);
  uint64_t v19 = *(unsigned int *)(a5 + 8);
  if (v19)
  {
    uint64_t v20 = 0;
    for (uint64_t j = 0; j != v19; ++j)
    {
      uint64_t v22 = *(void *)a5 + v20;
      unint64_t v14 = v14 & 0xFFFFFFFF00000000 | *(unsigned int *)(v22 + 8);
      a7(j, *(unsigned __int8 *)(v22 + 12), *(unsigned __int8 *)(v22 + 12), 0, *(void *)v22, v14, v33);
      v20 += 48;
    }
  }
  uint64_t v23 = v55;
  if (v55 == v43)
  {
    if (v55)
    {
      uint64_t v24 = v54 + 8;
      int v25 = (char *)v42 + 8;
      uint64_t v26 = v54 + 8;
      unsigned int v27 = (char *)v42 + 8;
      while (1)
      {
        uint64_t v9 = 0;
        unsigned int v29 = *v26;
        v26 += 12;
        unsigned int v28 = v29;
        int v30 = *v27;
        v27 += 12;
        BOOL v31 = (v30 & 1) == 0;
        if ((v30 ^ v28) > 3 || ((v28 ^ v31) & 1) == 0) {
          break;
        }
        if (*((_DWORD *)v24 - 1) != *((_DWORD *)v25 - 1)) {
          goto LABEL_17;
        }
        int v25 = v27;
        uint64_t v24 = v26;
        if (!--v23) {
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      uint64_t v9 = 1;
    }
  }
  else
  {
LABEL_17:
    uint64_t v9 = 0;
  }
  if (v40 != &v41) {
    free(v40);
  }
  if (v38 != &v39) {
    free(v38);
  }
  if (v36 != &v37) {
    free(v36);
  }
  if (v34 != &v35) {
    free(v34);
  }
  if (v42 != v44) {
    free(v42);
  }
  if (v52 != &v53) {
    free(v52);
  }
  if (v50 != &v51) {
    free(v50);
  }
  if (v48 != &v49) {
    free(v48);
  }
  if (v46 != &v47) {
    free(v46);
  }
  if (v54 != (char *)v56) {
    free(v54);
  }
  return v9;
}

void sub_1CC24FF40()
{
}

void llvm::createCFGuardLongjmpPass(llvm *this)
{
}

uint64_t sub_1CC250018(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC9110;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F2609A50;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC9118, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC24FF40;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCC9118, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC250110()
{
}

void sub_1CC25014C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  unint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unsigned int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC250200(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2502AC()
{
  return "Control Flow Guard longjmp targets";
}

BOOL sub_1CC2502BC(uint64_t a1, uint64_t a2)
{
  v61[23] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(llvm::Module **)(*(void *)(a2 + 32) + 2064);
  int v59 = (char *)&v60 + 8;
  *(void *)&long long v60 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v3, (uint64_t)&v59);
  if (v60)
  {
    unint64_t v4 = (uint64_t *)((char *)v59 + 16);
    uint64_t v5 = 24 * v60;
    while (1)
    {
      uint64_t v6 = *(void *)(*(v4 - 1) + 8);
      if (*(void *)v6 == 7)
      {
        int v7 = *(_DWORD *)(v6 + 24);
        int v8 = *(_DWORD *)(v6 + 27);
        if (v7 == 1969710691 && v8 == 1685217653) {
          break;
        }
      }
      v4 += 3;
      v5 -= 24;
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = *v4;
  }
  else
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  if (v59 != (char *)&v60 + 8)
  {
    free(v59);
    if (v10) {
      goto LABEL_15;
    }
    return 0;
  }
  if (!v10) {
    return 0;
  }
LABEL_15:
  if (!llvm::Function::callsFunctionThatReturnsTwice(*(llvm::Function **)a2)) {
    return 0;
  }
  unint64_t v56 = v58;
  uint64_t v57 = 0x800000000;
  uint64_t v11 = *(void *)(a2 + 328);
  if (v11 == a2 + 320) {
    return 0;
  }
  unsigned int v12 = 0;
  do
  {
    for (uint64_t i = *(void *)(v11 + 56); i != v11 + 48; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v14 = *(void *)(*(void *)(i + 16) + 8);
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        uint64_t v21 = i;
        if ((v14 & 0x80) == 0)
        {
          while ((*(_WORD *)(v21 + 44) & 8) != 0)
          {
            uint64_t v21 = *(void *)(v21 + 8);
            if ((*(unsigned char *)(*(void *)(v21 + 16) + 8) & 0x80) != 0) {
              goto LABEL_25;
            }
          }
LABEL_37:
          if ((*(unsigned char *)i & 4) != 0) {
            continue;
          }
          goto LABEL_47;
        }
      }
      else if ((v14 & 0x80) == 0)
      {
        goto LABEL_37;
      }
LABEL_25:
      uint64_t v16 = *(unsigned int *)(i + 40);
      if (!v16) {
        goto LABEL_37;
      }
      uint64_t v17 = 32 * v16;
      uint64_t v18 = *(void *)(i + 32) + 16;
      while (1)
      {
        if (*(unsigned char *)(v18 - 16) == 10 && *(void *)v18 && *(unsigned char *)(*(void *)v18 + 16) == 0)
        {
          uint64_t v20 = *(void *)(*(void *)v18 + 112);
          if (v20)
          {
            if (*(char *)(v20 + 17) < 0) {
              break;
            }
          }
        }
        v18 += 32;
        v17 -= 32;
        if (!v17)
        {
          if (!i) {
            goto LABEL_47;
          }
          goto LABEL_37;
        }
      }
      if (v12 >= HIDWORD(v57)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v56 + v12) = i;
      unsigned int v12 = v57 + 1;
      LODWORD(v57) = v57 + 1;
      if (i) {
        goto LABEL_37;
      }
LABEL_47:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
    uint64_t v11 = *(void *)(v11 + 8);
  }
  while (v11 != a2 + 320);
  uint64_t v22 = (uint64_t *)v56;
  BOOL v23 = v12 != 0;
  if (v12)
  {
    unint64_t v24 = 0;
    int v25 = (uint64_t *)((char *)v56 + 8 * v12);
    uint64_t v26 = v61;
    do
    {
      uint64_t v27 = *v22;
      int v59 = v26;
      long long v60 = xmmword_1CFAC3020;
      LODWORD(v48) = 0;
      char v52 = 0;
      uint64_t v53 = 0;
      uint64_t v47 = (unsigned __int8 **)&unk_1F2646FA8;
      uint64_t v55 = &v59;
      int v54 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v47, "$cfgsj_", 7uLL);
      Name = llvm::Value::getName(*(llvm::Value **)a2);
      size_t v30 = v28;
      if (v28 <= v50 - (uint64_t)v51)
      {
        if (v28)
        {
          memcpy(v51, Name, v28);
          v51 += v30;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v47, Name, v28);
      }
      sub_1CD098D14((llvm::raw_ostream *)&v47, v24, 0, 0, 0);
      uint64_t v47 = (unsigned __int8 **)&unk_1F2646B98;
      if (v54 == 1 && v49) {
        MEMORY[0x1D25D9CB0](v49, 0x1000C8077774924);
      }
      BOOL v31 = *(llvm::MCContext **)(a2 + 24);
      LOWORD(v51) = 261;
      uint64_t v47 = (unsigned __int8 **)v59;
      uint64_t v48 = v60;
      unsigned int v32 = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v31, &v47);
      llvm::MachineInstr::setPostInstrSymbol(v27, (llvm::MachineFunction *)a2, v32);
      uint64_t v34 = *(llvm::MCSymbol ***)(a2 + 472);
      unint64_t v33 = *(void *)(a2 + 480);
      if ((unint64_t)v34 >= v33)
      {
        unint64_t v36 = v25;
        uint64_t v37 = *(void **)(a2 + 464);
        uint64_t v38 = v34 - (llvm::MCSymbol **)v37;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          abort();
        }
        unsigned int v40 = v26;
        uint64_t v41 = v33 - (void)v37;
        if (v41 >> 2 > v39) {
          unint64_t v39 = v41 >> 2;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v39;
        }
        if (v42)
        {
          if (v42 >> 61) {
            sub_1CB833614();
          }
          uint64_t v43 = (char *)operator new(8 * v42);
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v44 = (llvm::MCSymbol **)&v43[8 * v38];
        *uint64_t v44 = v32;
        uint64_t v35 = v44 + 1;
        if (v34 != v37)
        {
          do
          {
            unint64_t v45 = *--v34;
            *--uint64_t v44 = v45;
          }
          while (v34 != v37);
          uint64_t v34 = *(llvm::MCSymbol ***)(a2 + 464);
        }
        *(void *)(a2 + 464) = v44;
        *(void *)(a2 + 472) = v35;
        *(void *)(a2 + 480) = &v43[8 * v42];
        if (v34) {
          operator delete(v34);
        }
        int v25 = v36;
        uint64_t v26 = v40;
      }
      else
      {
        *uint64_t v34 = v32;
        uint64_t v35 = v34 + 1;
      }
      *(void *)(a2 + 472) = v35;
      if (v59 != v26) {
        free(v59);
      }
      ++v24;
      ++v22;
    }
    while (v22 != v25);
    uint64_t v22 = (uint64_t *)v56;
    BOOL v23 = 1;
  }
  if (v22 != (uint64_t *)v58) {
    free(v22);
  }
  return v23;
}

void sub_1CC2507D0()
{
}

uint64_t llvm::CFIFixup::runOnMachineFunction(llvm::CFIFixup *this, llvm::MachineFunction *a2)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 112))(*((void *)a2 + 2));
  if (!(*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(void *)v3 + 128))(v3, a2)
    || (unint64_t v4 = *((void *)a2 + 14) - *((void *)a2 + 13), (v4 & 0x7FFFFFFF0) == 0))
  {
    char v5 = 0;
    return v5 & 1;
  }
  size_t v7 = (v4 >> 3);
  uint64_t v103 = v106;
  uint64_t v105 = 32;
  if (v7 >= 0x21)
  {
    size_t v104 = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if ((v4 >> 3)) {
    bzero(v106, v7);
  }
  size_t v104 = v7;
  v106[0] |= 1u;
  *v103 |= 2u;
  *(void *)&long long v92 = *((void *)a2 + 41);
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v99 = 0;
  sub_1CD50D084(&v99, (uint64_t *)&v92);
  uint64_t v9 = v99;
  int v8 = v100;
  if (v100 == v99)
  {
    char v5 = 0;
    goto LABEL_180;
  }
  uint64_t v10 = 0;
  do
  {
    uint64_t v12 = *((void *)v8 - 1);
    v8 -= 8;
    uint64_t v11 = (void *)v12;
    uint64_t v13 = *(int *)(v12 + 24);
    uint64_t v14 = v103;
    if (v10)
    {
      int v15 = 0;
      char v16 = 0;
      if ((v103[v13] & 4) == 0) {
        goto LABEL_43;
      }
      goto LABEL_25;
    }
    if ((v103[v13] & 4) != 0)
    {
      uint64_t v10 = 0;
      int v15 = 0;
LABEL_25:
      unint64_t v19 = v11[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v19 || (*(unsigned char *)v19 & 4) == 0)
      {
        while ((*(_WORD *)(v19 + 44) & 4) != 0)
          unint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((void *)v19 != v11 + 6)
      {
        if (**(_WORD **)(v19 + 16) == 3 && (*(_WORD *)(v19 + 44) & 2) != 0) {
          goto LABEL_41;
        }
        unint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
        if (!v19 || (*(unsigned char *)v19 & 4) == 0)
        {
          while ((*(_WORD *)(v19 + 44) & 4) != 0)
            unint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      char v16 = 8;
      goto LABEL_43;
    }
    for (uint64_t i = v11[7]; (void *)i != v11 + 6; uint64_t i = *(void *)(i + 8))
    {
      if (**(_WORD **)(i + 16) == 3 && (*(_WORD *)(i + 44) & 1) != 0)
      {
        int v15 = 1;
        uint64_t v10 = v11;
        goto LABEL_25;
      }
    }
    uint64_t v10 = 0;
    int v15 = 0;
LABEL_41:
    char v16 = 0;
LABEL_43:
    v103[v13] = v16 | v103[v13] & 0xF7;
    uint64_t v22 = (uint64_t *)v11[11];
    uint64_t v21 = (uint64_t *)v11[12];
    while (v22 != v21)
    {
      uint64_t v23 = *v22++;
      uint64_t v24 = *(int *)(v23 + 24);
      int v25 = v103;
      unsigned __int8 v26 = v103[v24];
      char v27 = v26 | 1;
      v103[v24] = v26 | 1;
      if ((v14[v13] & 2) != 0) {
        int v28 = v15;
      }
      else {
        int v28 = 1;
      }
      char v29 = v26 & 2;
      char v30 = v27 & 0xFD;
      if (!v28) {
        char v29 = 2;
      }
      char v31 = v29 | v30;
      v25[v24] = v31;
      v25[v24] = v31 & 0xFB | (v14[v13] >> 1) & 4;
    }
  }
  while (v8 != v9);
  if (v10)
  {
    uint64_t v90 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 104))(*((void *)a2 + 2));
    unsigned int v32 = (unint64_t *)v10[7];
    if (v32 != v10 + 6)
    {
      uint64_t v33 = v10[7];
      do
      {
        __int16 v34 = *(_WORD *)(v33 + 44);
        if (**(_WORD **)(v33 + 16) == 3 && (v34 & 1) != 0) {
          unsigned int v32 = *(unint64_t **)(v33 + 8);
        }
        if ((*(unsigned char *)v33 & 4) == 0 && (v34 & 8) != 0)
        {
          do
            uint64_t v33 = *(void *)(v33 + 8);
          while ((*(_WORD *)(v33 + 44) & 8) != 0);
        }
        uint64_t v33 = *(void *)(v33 + 8);
      }
      while ((void *)v33 != v10 + 6);
    }
    uint64_t v36 = v10[1];
    if ((llvm::MachineFunction *)v36 != (llvm::MachineFunction *)((char *)a2 + 320))
    {
      char v5 = 0;
      int v37 = (v103[*((int *)v10 + 6)] >> 3) & 1;
      while (1)
      {
        uint64_t v38 = *(int *)(v36 + 24);
        unint64_t v39 = v103;
        if (v103[v38]) {
          break;
        }
LABEL_71:
        uint64_t v36 = *(void *)(v36 + 8);
        if ((llvm::MachineFunction *)v36 == (llvm::MachineFunction *)((char *)a2 + 320)) {
          goto LABEL_178;
        }
      }
      if (((v103[v38] & 6) != 4) | v37 & 1)
      {
        if ((((v103[v38] & 6) != 4) & v37) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 136))(v3, v36);
          char v5 = 1;
        }
LABEL_70:
        int v37 = (v39[v38] >> 3) & 1;
        goto LABEL_71;
      }
      LODWORD(v92) = 1;
      char v98 = 0;
      *((void *)&v92 + 1) = 0;
      uint64_t v93 = 0;
      int v95 = 0;
      uint64_t v96 = 0;
      int v94 = 0;
      LOBYTE(__p) = 0;
      int v88 = llvm::MachineFunction::addFrameInst((uint64_t *)a2, &v92);
      if (v98 < 0) {
        operator delete(__p);
      }
      if (v94)
      {
        int v95 = v94;
        operator delete(v94);
      }
      unsigned int v91 = 0;
      uint64_t v40 = *(void *)(v90 + 8) + 144;
      uint64_t v41 = (llvm::MachineFunction *)v10[4];
      uint64_t v102 = 0;
      uint64_t v87 = v41;
      unint64_t v42 = llvm::MachineFunction::CreateMachineInstr(v41, v40, &v102, 0);
      if (v102)
      {
        int v79 = *v102;
        if ((v79 - 4) > 0x1E)
        {
          if ((v79 - 3) >= 0xFFFFFFFE) {
            unsigned int v85 = v102;
          }
          else {
            unsigned int v85 = 0;
          }
          if ((v79 - 3) < 0xFFFFFFFE)
          {
            if (v79 == 3) {
              *((void *)v102 + 1) = 0;
            }
            goto LABEL_78;
          }
          unint64_t v81 = (unint64_t)(v85 + 8);
        }
        else
        {
          if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
            goto LABEL_78;
          }
          uint64_t v80 = *((void *)v102 + 2);
          if ((v80 & 4) == 0) {
            goto LABEL_78;
          }
          unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
          if (!v81) {
            goto LABEL_78;
          }
        }
        *(void *)&long long v92 = &v102;
        sub_1CC5FA668(v81 + 16, &v92);
      }
LABEL_78:
      uint64_t v43 = v10[5];
      *((void *)v42 + 3) = v43;
      uint64_t v44 = *(void *)(v43 + 32);
      uint64_t v45 = *((unsigned int *)v42 + 10);
      if (v45)
      {
        uint64_t v63 = *((void *)v42 + 4);
        uint64_t v64 = *(void *)(v44 + 40);
        uint64_t v65 = 32 * v45;
        do
        {
          if (!*(unsigned char *)v63)
          {
            uint64_t v66 = *(unsigned int *)(v63 + 4);
            if ((int)v66 >= 0) {
              int v67 = (uint64_t *)(*(void *)(v64 + 272) + 8 * v66);
            }
            else {
              int v67 = (uint64_t *)(*(void *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
            }
            uint64_t v68 = *v67;
            if (*v67)
            {
              uint64_t v69 = *(void *)(v68 + 16);
              *(void *)(v68 + 16) = v63;
              *(void *)(v63 + 16) = v69;
              if (*(unsigned char *)(v63 + 3))
              {
                *(void *)(v63 + 24) = v68;
              }
              else
              {
                *(void *)(v63 + 24) = 0;
                int v67 = (uint64_t *)(v69 + 24);
              }
            }
            else
            {
              *(void *)(v63 + 16) = v63;
              *(void *)(v63 + 24) = 0;
            }
            *int v67 = v63;
          }
          v63 += 32;
          v65 -= 32;
        }
        while (v65);
      }
      uint64_t v46 = *(void *)(v44 + 728);
      if (v46) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v46 + 24))(v46, v42);
      }
      unint64_t v47 = *v32 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v42 = v47 | *(void *)v42 & 7;
      *((void *)v42 + 1) = v32;
      *(void *)(v47 + 8) = v42;
      *unsigned int v32 = *v32 & 7 | (unint64_t)v42;
      LODWORD(v92) = 16;
      *((void *)&v92 + 1) = 0;
      LODWORD(v93) = v88;
      llvm::MachineInstr::addOperand(v42, v87, (const llvm::MachineOperand *)&v92);
      if (v91)
      {
        int v48 = *v91;
        if ((v48 - 4) > 0x1E)
        {
          if ((v48 - 3) >= 0xFFFFFFFE) {
            uint64_t v61 = v91;
          }
          else {
            uint64_t v61 = 0;
          }
          if ((v48 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v62 = (unint64_t)(v61 + 8);
            goto LABEL_112;
          }
          if (v48 == 3) {
            *((void *)v91 + 1) = 0;
          }
        }
        else if ((v91[1] & 0x7F) == 2 || *((_DWORD *)v91 + 3))
        {
          uint64_t v78 = *((void *)v91 + 2);
          if ((v78 & 4) != 0)
          {
            unint64_t v62 = v78 & 0xFFFFFFFFFFFFFFF8;
            if (v62)
            {
LABEL_112:
              *(void *)&long long v92 = &v91;
              sub_1CC5FA668(v62 + 16, &v92);
            }
          }
        }
      }
      LODWORD(v92) = 2;
      char v98 = 0;
      *((void *)&v92 + 1) = 0;
      uint64_t v93 = 0;
      int v95 = 0;
      uint64_t v96 = 0;
      int v94 = 0;
      LOBYTE(__p) = 0;
      int v89 = llvm::MachineFunction::addFrameInst((uint64_t *)a2, &v92);
      if (v98 < 0) {
        operator delete(__p);
      }
      if (v94)
      {
        int v95 = v94;
        operator delete(v94);
      }
      uint64_t v49 = *(unint64_t **)(v36 + 56);
      unsigned int v91 = 0;
      uint64_t v50 = *(void *)(v90 + 8) + 144;
      uint64_t v51 = *(llvm::MachineFunction **)(v36 + 32);
      uint64_t v102 = 0;
      char v52 = llvm::MachineFunction::CreateMachineInstr(v51, v50, &v102, 0);
      if (v102)
      {
        int v82 = *v102;
        if ((v82 - 4) > 0x1E)
        {
          if ((v82 - 3) >= 0xFFFFFFFE) {
            uint64_t v86 = v102;
          }
          else {
            uint64_t v86 = 0;
          }
          if ((v82 - 3) < 0xFFFFFFFE)
          {
            if (v82 == 3) {
              *((void *)v102 + 1) = 0;
            }
            goto LABEL_90;
          }
          unint64_t v84 = (unint64_t)(v86 + 8);
        }
        else
        {
          if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
            goto LABEL_90;
          }
          uint64_t v83 = *((void *)v102 + 2);
          if ((v83 & 4) == 0) {
            goto LABEL_90;
          }
          unint64_t v84 = v83 & 0xFFFFFFFFFFFFFFF8;
          if (!v84) {
            goto LABEL_90;
          }
        }
        *(void *)&long long v92 = &v102;
        sub_1CC5FA668(v84 + 16, &v92);
      }
LABEL_90:
      uint64_t v53 = *(void *)(v36 + 40);
      *((void *)v52 + 3) = v53;
      uint64_t v54 = *(void *)(v53 + 32);
      uint64_t v55 = *((unsigned int *)v52 + 10);
      if (v55)
      {
        uint64_t v70 = *((void *)v52 + 4);
        uint64_t v71 = *(void *)(v54 + 40);
        uint64_t v72 = 32 * v55;
        do
        {
          if (!*(unsigned char *)v70)
          {
            uint64_t v73 = *(unsigned int *)(v70 + 4);
            if ((int)v73 >= 0) {
              uint64_t v74 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v73);
            }
            else {
              uint64_t v74 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
            }
            uint64_t v75 = *v74;
            if (*v74)
            {
              uint64_t v76 = *(void *)(v75 + 16);
              *(void *)(v75 + 16) = v70;
              *(void *)(v70 + 16) = v76;
              if (*(unsigned char *)(v70 + 3))
              {
                *(void *)(v70 + 24) = v75;
              }
              else
              {
                *(void *)(v70 + 24) = 0;
                uint64_t v74 = (uint64_t *)(v76 + 24);
              }
            }
            else
            {
              *(void *)(v70 + 16) = v70;
              *(void *)(v70 + 24) = 0;
            }
            uint64_t *v74 = v70;
          }
          v70 += 32;
          v72 -= 32;
        }
        while (v72);
      }
      uint64_t v56 = *(void *)(v54 + 728);
      if (v56) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v56 + 24))(v56, v52);
      }
      unint64_t v57 = *v49 & 0xFFFFFFFFFFFFFFF8;
      *(void *)char v52 = v57 | *(void *)v52 & 7;
      *((void *)v52 + 1) = v49;
      *(void *)(v57 + 8) = v52;
      *uint64_t v49 = *v49 & 7 | (unint64_t)v52;
      LODWORD(v92) = 16;
      *((void *)&v92 + 1) = 0;
      LODWORD(v93) = v89;
      llvm::MachineInstr::addOperand(v52, v51, (const llvm::MachineOperand *)&v92);
      if (v91)
      {
        int v58 = *v91;
        if ((v58 - 4) > 0x1E)
        {
          if ((v58 - 3) >= 0xFFFFFFFE) {
            int v59 = v91;
          }
          else {
            int v59 = 0;
          }
          if ((v58 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v60 = (unint64_t)(v59 + 8);
            goto LABEL_106;
          }
          if (v58 == 3) {
            *((void *)v91 + 1) = 0;
          }
        }
        else if ((v91[1] & 0x7F) == 2 || *((_DWORD *)v91 + 3))
        {
          uint64_t v77 = *((void *)v91 + 2);
          if ((v77 & 4) != 0)
          {
            unint64_t v60 = v77 & 0xFFFFFFFFFFFFFFF8;
            if (v60)
            {
LABEL_106:
              *(void *)&long long v92 = &v91;
              sub_1CC5FA668(v60 + 16, &v92);
            }
          }
        }
      }
      if ((*(unsigned char *)v52 & 4) == 0)
      {
        while ((*((_WORD *)v52 + 22) & 8) != 0)
          char v52 = (llvm::MachineInstr *)*((void *)v52 + 1);
      }
      unsigned int v32 = (unint64_t *)*((void *)v52 + 1);
      char v5 = 1;
      uint64_t v10 = (void *)v36;
      goto LABEL_70;
    }
  }
  char v5 = 0;
LABEL_178:
  int v8 = v99;
LABEL_180:
  if (v8)
  {
    uint64_t v100 = v8;
    operator delete(v8);
  }
  if (v103 != v106) {
    free(v103);
  }
  return v5 & 1;
}

uint64_t sub_1CC25122C(uint64_t a1, uint64_t a2, char **a3)
{
  v47[17] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v40;
  uint64_t v35 = v40;
  size_t v7 = *(unsigned char **)(a1 + 8);
  if (v7 == *(unsigned char **)a1)
  {
    uint64_t v36 = v40;
    int v8 = v7;
  }
  else
  {
    uint64_t v24 = *(unsigned int *)(a1 + 16);
    uint64_t v6 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
    if (!v6)
    {
      if (v24) {
        goto LABEL_47;
      }
      uint64_t v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6) {
        goto LABEL_47;
      }
    }
    uint64_t v36 = v6;
    int v8 = *(unsigned char **)a1;
    size_t v7 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v37 = v10;
  if (v7 == v8) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    unsigned int v9 = *(_DWORD *)(a1 + 20);
  }
  int v12 = *(_DWORD *)(a1 + 24);
  unsigned int v38 = v9;
  int v39 = v12;
  uint64_t v41 = v43;
  uint64_t v42 = 0x800000000;
  unsigned int v13 = *(_DWORD *)(a1 + 104);
  if (v13 && &v35 != (unsigned char **)a1)
  {
    if (v13 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v43, *(const void **)(a1 + 96), 16 * *(unsigned int *)(a1 + 104));
    LODWORD(v42) = v13;
  }
  uint64_t v14 = v31;
  unsigned __int8 v26 = v31;
  int v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    char v27 = v31;
    char v16 = v15;
    goto LABEL_14;
  }
  uint64_t v25 = *(unsigned int *)(a2 + 16);
  uint64_t v14 = malloc_type_malloc(8 * v25, 0x4065EBACuLL);
  if (!v14 && (v25 || (uint64_t v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_47:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  char v27 = v14;
  char v16 = *(const void **)a2;
  int v15 = *(const void **)(a2 + 8);
LABEL_14:
  unsigned int v18 = *(_DWORD *)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(a2 + 20);
  unsigned int v28 = v18;
  if (v15 == v16) {
    unsigned int v19 = v17;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v19)
  {
    memmove(v14, v15, 8 * v19);
    unsigned int v17 = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 24);
  unsigned int v29 = v17;
  int v30 = v20;
  unsigned int v32 = v34;
  uint64_t v33 = 0x800000000;
  unsigned int v21 = *(_DWORD *)(a2 + 104);
  if (v21 && &v26 != (unsigned char **)a2)
  {
    if (v21 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v34, *(const void **)(a2 + 96), 16 * *(unsigned int *)(a2 + 104));
    LODWORD(v33) = v21;
  }
  sub_1CC251514((uint64_t)&v35, (uint64_t)&v26, a3, (uint64_t)&v44);
  uint64_t v22 = v47[16];
  if (v46 != v47) {
    free(v46);
  }
  if (v45 != v44) {
    free(v45);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v27 != v26) {
    free(v27);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v36 != v35) {
    free(v36);
  }
  return v22;
}

void sub_1CC251514(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v35[16] = *MEMORY[0x1E4F143B8];
  char v27 = v32;
  unsigned int v9 = *(unsigned char **)a1;
  int v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    unsigned int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    unsigned int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v33 = v35;
  unint64_t v34 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11 && &v27 != (unsigned char **)a1)
  {
    int v12 = *(const void **)(a1 + 96);
    if (v12 == (const void *)(a1 + 112))
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v35, v12, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v34) = v11;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 96);
      unint64_t v34 = __PAIR64__(*(_DWORD *)(a1 + 108), v11);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v18 = v23;
  uint64_t v14 = *(unsigned char **)a2;
  unsigned int v13 = *(const void **)(a2 + 8);
  if (v13 == *(const void **)a2)
  {
    unsigned int v19 = v23;
    uint64_t v15 = *(unsigned int *)(a2 + 20);
    if (v15) {
      memmove(v23, v13, 8 * v15);
    }
  }
  else
  {
    unsigned int v19 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v14;
    LODWORD(v15) = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 16);
  int v21 = v15;
  int v22 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v24 = v26;
  unint64_t v25 = 0x800000000;
  unsigned int v16 = *(_DWORD *)(a2 + 104);
  if (v16 && &v18 != (unsigned char **)a2)
  {
    unsigned int v17 = *(const void **)(a2 + 96);
    if (v17 == (const void *)(a2 + 112))
    {
      if (v16 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v26, v17, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v25) = v16;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 96);
      unint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 108), v16);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC2517C8((uint64_t)&v27, (uint64_t)&v18, a3, a4);
  if (v24 != v26) {
    free(v24);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v28 != v27) {
    free(v28);
  }
}

void sub_1CC2517C8(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v35[16] = *MEMORY[0x1E4F143B8];
  char v27 = v32;
  unsigned int v9 = *(unsigned char **)a1;
  int v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    unsigned int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    unsigned int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v33 = v35;
  unint64_t v34 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11 && &v27 != (unsigned char **)a1)
  {
    int v12 = *(const void **)(a1 + 96);
    if (v12 == (const void *)(a1 + 112))
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v35, v12, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v34) = v11;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 96);
      unint64_t v34 = __PAIR64__(*(_DWORD *)(a1 + 108), v11);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v18 = v23;
  uint64_t v14 = *(unsigned char **)a2;
  unsigned int v13 = *(const void **)(a2 + 8);
  if (v13 == *(const void **)a2)
  {
    unsigned int v19 = v23;
    uint64_t v15 = *(unsigned int *)(a2 + 20);
    if (v15) {
      memmove(v23, v13, 8 * v15);
    }
  }
  else
  {
    unsigned int v19 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v14;
    LODWORD(v15) = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 16);
  int v21 = v15;
  int v22 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v24 = v26;
  unint64_t v25 = 0x800000000;
  unsigned int v16 = *(_DWORD *)(a2 + 104);
  if (v16 && &v18 != (unsigned char **)a2)
  {
    unsigned int v17 = *(const void **)(a2 + 96);
    if (v17 == (const void *)(a2 + 112))
    {
      if (v16 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v26, v17, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v25) = v16;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 96);
      unint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 108), v16);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC251A7C((uint64_t)&v27, (uint64_t)&v18, a3, a4);
  if (v24 != v26) {
    free(v24);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v28 != v27) {
    free(v28);
  }
}

void **sub_1CC251A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v124[16] = *MEMORY[0x1E4F143B8];
  int v8 = v107;
  uint64_t v102 = v107;
  unsigned int v9 = *(unsigned char **)(a1 + 8);
  if (v9 == *(unsigned char **)a1)
  {
    uint64_t v103 = v107;
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v41 = *(unsigned int *)(a1 + 16);
    int v8 = malloc_type_malloc(8 * v41, 0x4065EBACuLL);
    if (!v8 && (v41 || (int v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v103 = v8;
    uint64_t v10 = *(unsigned char **)a1;
    unsigned int v9 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  unsigned int v11 = *(_DWORD *)(a1 + 20);
  unsigned int v104 = v12;
  if (v9 == v10) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    unsigned int v11 = *(_DWORD *)(a1 + 20);
  }
  int v14 = *(_DWORD *)(a1 + 24);
  unsigned int v105 = v11;
  int v106 = v14;
  uint64_t v108 = v110;
  uint64_t v109 = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a1 + 104);
  if (v15 && &v102 != (unsigned char **)a1)
  {
    if (v15 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v110, *(const void **)(a1 + 96), 16 * *(unsigned int *)(a1 + 104));
    LODWORD(v109) = v15;
  }
  uint64_t v93 = v98;
  unsigned int v17 = *(unsigned char **)a2;
  unsigned int v16 = *(const void **)(a2 + 8);
  if (v16 == *(const void **)a2)
  {
    int v94 = v98;
    uint64_t v18 = *(unsigned int *)(a2 + 20);
    if (v18) {
      memmove(v98, v16, 8 * v18);
    }
  }
  else
  {
    int v94 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v17;
    LODWORD(v18) = *(_DWORD *)(a2 + 20);
  }
  int v95 = *(_DWORD *)(a2 + 16);
  int v96 = v18;
  int v97 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v99 = v101;
  unint64_t v100 = 0x800000000;
  unsigned int v19 = *(_DWORD *)(a2 + 104);
  if (v19 && &v93 != (unsigned char **)a2)
  {
    int v20 = *(const void **)(a2 + 96);
    if (v20 == (const void *)(a2 + 112))
    {
      if (v19 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v101, v20, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v100) = v19;
    }
    else
    {
      uint64_t v99 = *(void **)(a2 + 96);
      unint64_t v100 = __PAIR64__(*(_DWORD *)(a2 + 108), v19);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CB93A61C((uint64_t)&v102, (uint64_t)&v93, (uint64_t)&v111);
  if (v99 != v101) {
    free(v99);
  }
  if (v94 != v93) {
    free(v94);
  }
  if (v108 != v110) {
    free(v108);
  }
  if (v103 != v102) {
    free(v103);
  }
  uint64_t v77 = v82;
  if (__src == v111)
  {
    uint64_t v78 = v82;
    int v21 = HIDWORD(v113);
    if (HIDWORD(v113)) {
      memmove(v82, __src, 8 * HIDWORD(v113));
    }
  }
  else
  {
    uint64_t v78 = __src;
    __src = v111;
    int v21 = HIDWORD(v113);
  }
  int v79 = v113;
  int v80 = v21;
  int v81 = v114;
  uint64_t v113 = 8;
  int v114 = 0;
  uint64_t v83 = v85;
  uint64_t v84 = 0x800000000;
  int v22 = v116;
  if (v116)
  {
    if (v115 == v117)
    {
      if (v116 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v85, v115, 16 * v116);
      LODWORD(v84) = v22;
    }
    else
    {
      uint64_t v83 = v115;
      uint64_t v84 = v116;
      int v115 = v117;
      HIDWORD(v116) = 0;
    }
    LODWORD(v116) = 0;
  }
  uint64_t v68 = v73;
  if (v119 == v118)
  {
    uint64_t v69 = v73;
    int v23 = HIDWORD(v120);
    if (HIDWORD(v120)) {
      memmove(v73, v119, 8 * HIDWORD(v120));
    }
  }
  else
  {
    uint64_t v69 = v119;
    uint64_t v119 = v118;
    int v23 = HIDWORD(v120);
  }
  int v70 = v120;
  int v71 = v23;
  int v72 = v121;
  uint64_t v120 = 8;
  int v121 = 0;
  uint64_t v74 = v76;
  uint64_t v75 = 0x800000000;
  int v24 = v123;
  if (v123)
  {
    if (v122 == v124)
    {
      if (v123 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v76, v122, 16 * v123);
      LODWORD(v75) = v24;
    }
    else
    {
      uint64_t v74 = v122;
      uint64_t v75 = v123;
      uint64_t v122 = v124;
      HIDWORD(v123) = 0;
    }
    LODWORD(v123) = 0;
  }
  sub_1CB93AAF4((llvm::SmallPtrSetImplBase *)&v77, (uint64_t)&v68, a3, (uint64_t)&v86);
  if (v74 != v76) {
    free(v74);
  }
  if (v69 != v68) {
    free(v69);
  }
  if (v83 != v85) {
    free(v83);
  }
  if (v78 != v77) {
    free(v78);
  }
  uint64_t v51 = v56;
  unsigned __int8 v26 = *(unsigned char **)a1;
  unint64_t v25 = *(const void **)(a1 + 8);
  if (v25 == *(const void **)a1)
  {
    char v52 = v56;
    uint64_t v27 = *(unsigned int *)(a1 + 20);
    if (v27) {
      memmove(v56, v25, 8 * v27);
    }
  }
  else
  {
    char v52 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v26;
    LODWORD(v27) = *(_DWORD *)(a1 + 20);
  }
  int v53 = *(_DWORD *)(a1 + 16);
  int v54 = v27;
  int v55 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  unint64_t v57 = v59;
  unint64_t v58 = 0x800000000;
  unsigned int v28 = *(_DWORD *)(a1 + 104);
  if (v28 && &v51 != (unsigned char **)a1)
  {
    int v29 = *(const void **)(a1 + 96);
    if (v29 == (const void *)(a1 + 112))
    {
      if (v28 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v59, v29, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v58) = v28;
    }
    else
    {
      unint64_t v57 = *(void **)(a1 + 96);
      unint64_t v58 = __PAIR64__(*(_DWORD *)(a1 + 108), v28);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v42 = v47;
  if (v87 == v86)
  {
    uint64_t v43 = v47;
    int v30 = HIDWORD(v88);
    if (HIDWORD(v88)) {
      memmove(v47, v87, 8 * HIDWORD(v88));
    }
  }
  else
  {
    uint64_t v43 = v87;
    uint64_t v87 = v86;
    int v30 = HIDWORD(v88);
  }
  int v44 = v88;
  int v45 = v30;
  int v46 = v89;
  uint64_t v88 = 8;
  int v89 = 0;
  int v48 = v50;
  uint64_t v49 = 0x800000000;
  int v31 = v91;
  if (v91)
  {
    if (v90 == v92)
    {
      if (v91 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v50, v90, 16 * v91);
      LODWORD(v49) = v31;
    }
    else
    {
      int v48 = v90;
      uint64_t v49 = v91;
      uint64_t v90 = v92;
      HIDWORD(v91) = 0;
    }
    LODWORD(v91) = 0;
  }
  sub_1CC2522EC((uint64_t)&v51, (uint64_t)&v42, (uint64_t)&v60);
  uint64_t v32 = v92[16];
  uint64_t v33 = (void *)(a4 + 32);
  *(void *)a4 = a4 + 32;
  uint64_t v35 = v60;
  unint64_t v34 = v61;
  if (v61 == v60)
  {
    *(void *)(a4 + 8) = v33;
    int v36 = HIDWORD(v62);
    if (HIDWORD(v62)) {
      memmove(v33, v34, 8 * HIDWORD(v62));
    }
  }
  else
  {
    *(void *)(a4 + 8) = v61;
    uint64_t v61 = v35;
    int v36 = HIDWORD(v62);
  }
  *(void *)(a4 + 96) = a4 + 112;
  int v37 = v63;
  *(_DWORD *)(a4 + 16) = v62;
  *(_DWORD *)(a4 + 20) = v36;
  *(_DWORD *)(a4 + 24) = v37;
  uint64_t v62 = 8;
  int v63 = 0;
  *(void *)(a4 + 104) = 0x800000000;
  unsigned int v38 = v65;
  if (v65 && &v60 != (void **)a4)
  {
    if (v64 == v67)
    {
      if (v65 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a4 + 112), v64, 16 * v65);
      *(_DWORD *)(a4 + 104) = v38;
    }
    else
    {
      *(void *)(a4 + 96) = v64;
      int v40 = v66;
      *(_DWORD *)(a4 + 104) = v38;
      *(_DWORD *)(a4 + 108) = v40;
      uint64_t v64 = v67;
      int v66 = 0;
    }
    unsigned int v65 = 0;
  }
  *(void *)(a4 + 240) = v32;
  if (v64 != v67) {
    free(v64);
  }
  if (v61 != v60) {
    free(v61);
  }
  if (v48 != v50) {
    free(v48);
  }
  if (v43 != v42) {
    free(v43);
  }
  if (v57 != v59) {
    free(v57);
  }
  if (v52 != v51) {
    free(v52);
  }
  if (v90 != v92) {
    free(v90);
  }
  if (v87 != v86) {
    free(v87);
  }
  return sub_1CD4B9AEC(&v111);
}

void sub_1CC2522EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v33[16] = *MEMORY[0x1E4F143B8];
  unint64_t v25 = v30;
  size_t v7 = *(unsigned char **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    unsigned __int8 v26 = v30;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v30, v6, 8 * v8);
    }
  }
  else
  {
    unsigned __int8 v26 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v27 = *(_DWORD *)(a1 + 16);
  int v28 = v8;
  int v29 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v31 = v33;
  unint64_t v32 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v25 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v33, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v32) = v9;
    }
    else
    {
      int v31 = *(void **)(a1 + 96);
      unint64_t v32 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v16 = v21;
  unsigned int v12 = *(unsigned char **)a2;
  unsigned int v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    unsigned int v17 = v21;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v21, v11, 8 * v13);
    }
  }
  else
  {
    unsigned int v17 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  int v18 = *(_DWORD *)(a2 + 16);
  int v19 = v13;
  int v20 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v22 = v24;
  unint64_t v23 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v16 != (unsigned char **)a2)
  {
    unsigned int v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v24, v15, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v23) = v14;
    }
    else
    {
      int v22 = *(void **)(a2 + 96);
      unint64_t v23 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC252590((uint64_t)&v25, (uint64_t)&v16, a3);
  if (v22 != v24) {
    free(v22);
  }
  if (v17 != v16) {
    free(v17);
  }
  if (v31 != v33) {
    free(v31);
  }
  if (v26 != v25) {
    free(v26);
  }
}

void sub_1CC252590(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v38[16] = *MEMORY[0x1E4F143B8];
  int v30 = v35;
  size_t v7 = *(unsigned char **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    int v31 = v35;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v35, v6, 8 * v8);
    }
  }
  else
  {
    int v31 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v32 = *(_DWORD *)(a1 + 16);
  int v33 = v8;
  int v34 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v36 = v38;
  unint64_t v37 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v30 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v38, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v37) = v9;
    }
    else
    {
      int v36 = *(void **)(a1 + 96);
      unint64_t v37 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v11 = v26;
  int v22 = v26;
  uint64_t v13 = *(unsigned char **)a2;
  unsigned int v12 = *(unsigned char **)(a2 + 8);
  if (v12 == *(unsigned char **)a2)
  {
    unint64_t v23 = v26;
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v14) {
      memmove(v26, v12, 8 * v14);
    }
    unsigned int v12 = v26;
  }
  else
  {
    unint64_t v23 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  LODWORD(v24) = *(_DWORD *)(a2 + 16);
  HIDWORD(v24) = v14;
  int v25 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v27 = v29;
  unint64_t v28 = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a2 + 104);
  if (v15)
  {
    if (&v22 == (unsigned char **)a2)
    {
      unsigned int v15 = 0;
    }
    else
    {
      unsigned int v16 = *(const void **)(a2 + 96);
      if (v16 == (const void *)(a2 + 112))
      {
        if (v15 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v29, v16, 16 * *(unsigned int *)(a2 + 104));
        LODWORD(v28) = v15;
        unsigned int v11 = v22;
        unsigned int v12 = v23;
      }
      else
      {
        int v27 = *(void **)(a2 + 96);
        unint64_t v28 = __PAIR64__(*(_DWORD *)(a2 + 108), v15);
        *(void *)(a2 + 96) = a2 + 112;
        *(_DWORD *)(a2 + 108) = 0;
      }
      *(_DWORD *)(a2 + 104) = 0;
    }
  }
  unsigned int v17 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  if (v12 == v11)
  {
    *(void *)(a3 + 8) = v17;
    int v18 = HIDWORD(v24);
    if (HIDWORD(v24)) {
      memmove(v17, v11, 8 * HIDWORD(v24));
    }
  }
  else
  {
    *(void *)(a3 + 8) = v12;
    unint64_t v23 = v11;
    int v18 = HIDWORD(v24);
  }
  int v19 = v25;
  *(_DWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 20) = v18;
  *(_DWORD *)(a3 + 24) = v19;
  uint64_t v24 = 8;
  *(void *)(a3 + 96) = a3 + 112;
  int v25 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  int v20 = v27;
  if (v15 && &v22 != (unsigned char **)a3)
  {
    if (v27 == v29)
    {
      if (v15 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v29, 16 * v15);
      *(_DWORD *)(a3 + 104) = v15;
      int v20 = v27;
    }
    else
    {
      *(void *)(a3 + 96) = v27;
      int v21 = HIDWORD(v28);
      *(_DWORD *)(a3 + 104) = v15;
      *(_DWORD *)(a3 + 108) = v21;
      int v27 = v29;
      HIDWORD(v28) = 0;
      int v20 = v29;
    }
    LODWORD(v28) = 0;
  }
  if (v20 != v29) {
    free(v20);
  }
  if (v23 != v22) {
    free(v23);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (v31 != v30) {
    free(v31);
  }
}

uint64_t sub_1CC252928(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *(void *)(a2 + 88);
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 16) = 0x100000008;
  *(void *)(a1 + 120) = v3;
  *(void *)(a1 + 104) = 0x800000001;
  sub_1CB93B280((llvm::SmallPtrSetImplBase *)a1);
  return a1;
}

void sub_1CC25298C()
{
}

void llvm::createCFIInstrInserter(llvm *this)
{
}

uint64_t sub_1CC252A64(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC91E8;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F2609BD0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v2 = 280;
  *(void *)(a1 + 272) = 1;
  do
  {
    *(_DWORD *)(a1 + v2) = -1;
    v2 += 20;
  }
  while (v2 != 600);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC91F0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC25298C;
    v6[1] = &PassRegistry;
    char v5 = v6;
    std::__call_once(&qword_1EBCC91F0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC252B8C()
{
}

void sub_1CC252BC8(llvm::Pass *this)
{
  *(void *)this = &unk_1F2609BD0;
  if ((*((unsigned char *)this + 272) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 35), 4);
  }
  uint64_t v2 = (char *)*((void *)this + 31);
  if (v2)
  {
    sub_1CC256658((uint64_t)this + 248, v2);
    operator delete(*((void **)this + 31));
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC252CAC(llvm::Pass *a1)
{
  sub_1CC252BC8(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC252CE4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC252CF0(uint64_t a1, llvm::MachineFunction *this)
{
  uint64_t v647 = *MEMORY[0x1E4F143B8];
  if (!llvm::MachineFunction::needsFrameMoves(this))
  {
    char v32 = 0;
    return v32 & 1;
  }
  uint64_t v4 = a1;
  v583 = this;
  uint64_t v5 = a1;
  unint64_t v6 = ((*((void *)this + 14) - *((void *)this + 13)) >> 3);
  size_t v7 = *(char **)(a1 + 248);
  uint64_t v8 = *(char **)(a1 + 256);
  unsigned int v9 = (char **)(v4 + 248);
  unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v7) >> 4);
  BOOL v11 = v6 >= v10;
  unint64_t v12 = v6 - v10;
  v606 = v9;
  uint64_t v592 = v5;
  if (v6 > v10)
  {
    uint64_t v13 = *(void *)(v5 + 264);
    if (0x2E8BA2E8BA2E8BA3 * ((v13 - (uint64_t)v8) >> 4) >= v12)
    {
      int v34 = &v8[176 * v12];
      do
      {
        *(_OWORD *)uint64_t v8 = 0uLL;
        *((_OWORD *)v8 + 1) = 0uLL;
        *((_OWORD *)v8 + 5) = 0uLL;
        *((_OWORD *)v8 + 6) = 0uLL;
        *((_OWORD *)v8 + 9) = 0uLL;
        *((_OWORD *)v8 + 10) = 0uLL;
        *((_OWORD *)v8 + 8) = 0uLL;
        *((_OWORD *)v8 + 3) = 0uLL;
        *((_OWORD *)v8 + 4) = 0uLL;
        *((_OWORD *)v8 + 2) = 0uLL;
        *((_OWORD *)v8 + 7) = 0uLL;
        *((void *)v8 + 1) = -1;
        *((void *)v8 + 3) = v8 + 40;
        *((_DWORD *)v8 + 9) = 6;
        *((void *)v8 + 12) = v8 + 112;
        *((_DWORD *)v8 + 27) = 6;
        v8 += 176;
      }
      while (v8 != v34);
      *(void *)(v592 + 256) = v34;
      int v33 = v583;
      goto LABEL_52;
    }
    unint64_t v14 = 0x5D1745D1745D1746 * ((v13 - (uint64_t)v7) >> 4);
    if (v14 <= v6) {
      unint64_t v14 = v6;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v13 - (uint64_t)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v15 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 > 0x1745D1745D1745DLL) {
      sub_1CB833614();
    }
    unsigned int v16 = (char *)operator new(176 * v15);
    unsigned int v17 = &v16[16 * ((v8 - v7) >> 4)];
    int v18 = &v16[176 * v6];
    int v19 = v17;
    do
    {
      *(_OWORD *)int v19 = 0uLL;
      *((_OWORD *)v19 + 1) = 0uLL;
      *((_OWORD *)v19 + 5) = 0uLL;
      *((_OWORD *)v19 + 6) = 0uLL;
      *((_OWORD *)v19 + 9) = 0uLL;
      *((_OWORD *)v19 + 10) = 0uLL;
      *((_OWORD *)v19 + 8) = 0uLL;
      *((_OWORD *)v19 + 3) = 0uLL;
      *((_OWORD *)v19 + 4) = 0uLL;
      *((_OWORD *)v19 + 2) = 0uLL;
      *((_OWORD *)v19 + 7) = 0uLL;
      *((void *)v19 + 1) = -1;
      *((void *)v19 + 3) = v19 + 40;
      *((_DWORD *)v19 + 9) = 6;
      *((void *)v19 + 12) = v19 + 112;
      *((_DWORD *)v19 + 27) = 6;
      v19 += 176;
    }
    while (v19 != v18);
    if (v8 == v7)
    {
      *(void *)(v592 + 248) = v17;
      *(void *)(v592 + 256) = v18;
      *(void *)(v592 + 264) = &v16[176 * v15];
    }
    else
    {
      v600 = &v16[176 * v15];
      uint64_t v20 = 0;
      do
      {
        int v21 = &v8[v20];
        int v22 = &v17[v20];
        long long v23 = *(_OWORD *)&v8[v20 - 176];
        *((void *)v22 - 20) = *(void *)&v8[v20 - 160];
        *((_OWORD *)v22 - 11) = v23;
        uint64_t v24 = &v17[v20 - 136];
        *(void *)&v17[v20 - 152] = v24;
        *((void *)v22 - 18) = 0x600000000;
        unsigned int v25 = *(_DWORD *)&v8[v20 - 144];
        if (v25) {
          BOOL v26 = v22 == v21;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          int v27 = (char *)*((void *)v21 - 19);
          if (v21 - 136 == v27)
          {
            if (v25 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v24, v27, 8 * *(unsigned int *)&v8[v20 - 144]);
            *((_DWORD *)v22 - 36) = v25;
          }
          else
          {
            *(void *)&v17[v20 - 152] = v27;
            *((_DWORD *)v22 - 36) = v25;
            *((_DWORD *)v22 - 35) = *(_DWORD *)&v8[v20 - 140];
            *((void *)v21 - 19) = v21 - 136;
            *(_DWORD *)&v8[v20 - 140] = 0;
          }
          *((_DWORD *)v21 - 36) = 0;
        }
        *((_DWORD *)v22 - 22) = *((_DWORD *)v21 - 22);
        *((void *)v22 - 10) = v22 - 64;
        *((void *)v22 - 9) = 0x600000000;
        unsigned int v28 = *((_DWORD *)v21 - 18);
        if (v28 && v22 != v21)
        {
          int v29 = *(const void **)&v8[v20 - 80];
          uint64_t v30 = (uint64_t)&v8[v20 - 64];
          if ((const void *)v30 == v29)
          {
            if (v28 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v22 - 64, v29, 8 * *((unsigned int *)v21 - 18));
            *((_DWORD *)v22 - 18) = v28;
          }
          else
          {
            *((void *)v22 - 10) = v29;
            *((_DWORD *)v22 - 18) = v28;
            *((_DWORD *)v22 - 17) = *(_DWORD *)&v8[v20 - 68];
            *(void *)&v8[v20 - 80] = v30;
            *(_DWORD *)&v8[v20 - 68] = 0;
          }
          *((_DWORD *)v21 - 18) = 0;
        }
        int v31 = &v17[v20];
        *((_DWORD *)v31 - 4) = *(_DWORD *)&v8[v20 - 16];
        *(v31 - 8) = v8[v20 - 8];
        v20 -= 176;
      }
      while (&v8[v20] != v7);
      uint64_t v8 = *(char **)(v592 + 248);
      uint64_t v35 = *(char **)(v592 + 256);
      *(void *)(v592 + 248) = &v17[v20];
      *(void *)(v592 + 256) = v18;
      *(void *)(v592 + 264) = v600;
      if (v35 != v8)
      {
        int v36 = v35 - 64;
        unsigned int v9 = v606;
        int v33 = v583;
        do
        {
          unint64_t v37 = (char *)*((void *)v36 - 2);
          if (v36 != v37) {
            free(v37);
          }
          unsigned int v38 = (char *)*((void *)v36 - 11);
          if (v36 - 72 != v38) {
            free(v38);
          }
          int v39 = v36 - 112;
          v36 -= 176;
        }
        while (v39 != v8);
        goto LABEL_50;
      }
    }
    unsigned int v9 = v606;
    int v33 = v583;
LABEL_50:
    if (v8) {
      operator delete(v8);
    }
    goto LABEL_52;
  }
  int v33 = v583;
  if (!v11) {
    sub_1CC256658((uint64_t)v9, &v7[176 * v6]);
  }
LABEL_52:
  uint64_t v40 = *(void *)(*(uint64_t (**)(void))(**((void **)v33 + 2) + 112))(*((void *)v33 + 2));
  unsigned int v41 = (*(uint64_t (**)(void))(v40 + 352))();
  uint64_t v42 = *(void *)(*(uint64_t (**)(void))(**((void **)v33 + 2) + 112))(*((void *)v33 + 2));
  unsigned int v43 = (*(uint64_t (**)(void))(v42 + 360))();
  uint64_t v44 = (*(uint64_t (**)(void))(**((void **)v33 + 2) + 176))(*((void *)v33 + 2));
  uint64_t v45 = *((void *)v33 + 41);
  v584 = (char *)v33 + 320;
  if ((llvm::MachineFunction *)v45 != (llvm::MachineFunction *)((char *)v33 + 320))
  {
    int v46 = *(_DWORD *)(v44 + 16);
    uint64_t v47 = (v46 + 63) >> 6;
    unint64_t v601 = __PAIR64__(v43, v41);
    do
    {
      int v48 = *(_DWORD *)(v45 + 24);
      uint64_t v49 = *v9;
      uint64_t v50 = (uint64_t)&(*v9)[176 * v48];
      *(void *)uint64_t v50 = v45;
      uint64_t v51 = (float *)(v50 + 8);
      v648.val[0] = (float32x2_t)v601;
      v648.val[1] = (float32x2_t)v601;
      vst2_f32(v51, v648);
      int v53 = *(_DWORD *)(v50 + 88);
      char v52 = (int *)(v50 + 88);
      int v54 = v52 - 16;
      char v55 = v53 & 0x3F;
      uint64_t v56 = *(v52 - 14);
      if ((v53 & 0x3F) != 0) {
        *(void *)(*(void *)v54 + 8 * v56 - 8) &= ~(-1 << v55);
      }
      *char v52 = v46;
      unsigned int v57 = (v46 + 63) >> 6;
      LOBYTE(v58) = v46;
      if (v56 != v47)
      {
        if (v56 > v47)
        {
          *(v52 - 14) = v47;
          unsigned int v57 = (v46 + 63) >> 6;
          LOBYTE(v58) = v46;
        }
        else
        {
          if (v47 > *(v52 - 13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v47 != v56) {
            bzero((void *)(*(void *)v54 + 8 * v56), 8 * (v47 - v56));
          }
          unsigned int v57 = (v46 + 63) >> 6;
          *(v52 - 14) = v47;
          int v58 = *v52;
        }
      }
      int v59 = v58 & 0x3F;
      if (v59) {
        *(void *)(*(void *)v54 + 8 * v57 - 8) &= ~(-1 << v59);
      }
      unint64_t v60 = &v49[176 * v48];
      int v62 = *((_DWORD *)v60 + 40);
      uint64_t v61 = (int *)(v60 + 160);
      int v63 = v61 - 16;
      char v64 = v62 & 0x3F;
      unsigned int v9 = v606;
      uint64_t v65 = *(v61 - 14);
      if ((v62 & 0x3F) != 0) {
        *(void *)(*(void *)v63 + 8 * v65 - 8) &= ~(-1 << v64);
      }
      *uint64_t v61 = v46;
      unsigned int v66 = (v46 + 63) >> 6;
      LOBYTE(v67) = v46;
      if (v65 != v47)
      {
        if (v65 > v47)
        {
          *(v61 - 14) = v47;
          unsigned int v66 = (v46 + 63) >> 6;
          LOBYTE(v67) = v46;
        }
        else
        {
          if (v47 > *(v61 - 13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v47 != v65) {
            bzero((void *)(*(void *)v63 + 8 * v65), 8 * (v47 - v65));
          }
          unsigned int v66 = (v46 + 63) >> 6;
          *(v61 - 14) = v47;
          int v67 = *v61;
        }
      }
      int v68 = v67 & 0x3F;
      if (v68) {
        *(void *)(*(void *)v63 + 8 * v66 - 8) &= ~(-1 << v68);
      }
      uint64_t v45 = *(void *)(v45 + 8);
    }
    while ((char *)v45 != v584);
  }
  v582 = (void *)(v592 + 272);
  unsigned int v69 = *(_DWORD *)(v592 + 272);
  if (v69 > 1 || *(_DWORD *)(v592 + 276))
  {
    if (v69)
    {
      uint64_t v76 = (_DWORD *)(v592 + 280);
      uint64_t v77 = (_DWORD *)(v592 + 600);
    }
    else
    {
      uint64_t v70 = *(unsigned int *)(v592 + 288);
      if (((2 * v69) & 0xFFFFFFFC) < v70 && v70 >= 0x41)
      {
        unsigned int v71 = __clz((v69 >> 1) - 1);
        if (v71 == 28) {
          unsigned int v72 = 64;
        }
        else {
          unsigned int v72 = 1 << (33 - v71);
        }
        if (v69 >= 2) {
          uint64_t v73 = v72;
        }
        else {
          uint64_t v73 = 0;
        }
        if (v73 == v70)
        {
          *(void *)(v592 + 272) = 0;
          uint64_t v74 = *(_DWORD **)(v592 + 280);
          uint64_t v75 = 20 * v70;
          do
          {
            _DWORD *v74 = -1;
            v74 += 5;
            v75 -= 20;
          }
          while (v75);
          goto LABEL_101;
        }
        MEMORY[0x1D25D9CD0](*(void *)(v592 + 280), 4);
        if (v73 <= 0x10)
        {
          void *v582 = 1;
        }
        else
        {
          *(_DWORD *)(v592 + 272) &= ~1u;
          v364 = operator new(20 * v73, (std::align_val_t)4uLL);
          *(void *)(v592 + 280) = v364;
          *(void *)(v592 + 288) = v73;
          int v365 = *(_DWORD *)(v592 + 272);
          *(void *)(v592 + 272) = v365 & 1;
          if ((v365 & 1) == 0)
          {
            v366 = &v364[5 * v73];
            goto LABEL_835;
          }
        }
        v364 = (_DWORD *)(v592 + 280);
        v366 = (_DWORD *)(v592 + 600);
        do
        {
LABEL_835:
          _DWORD *v364 = -1;
          v364 += 5;
        }
        while (v364 != v366);
        goto LABEL_101;
      }
      if (!v70) {
        goto LABEL_100;
      }
      uint64_t v76 = *(_DWORD **)(v592 + 280);
      uint64_t v77 = &v76[5 * v70];
    }
    do
    {
      *uint64_t v76 = -1;
      v76 += 5;
    }
    while (v76 != v77);
    LODWORD(v70) = *(_DWORD *)v582 & 1;
LABEL_100:
    *(_DWORD *)(v592 + 272) = v70;
    *(_DWORD *)(v592 + 276) = 0;
  }
LABEL_101:
  uint64_t v78 = *(void *)(v592 + 248);
  uint64_t v79 = 176 * *(int *)(*((void *)v583 + 41) + 24);
  v610 = v613;
  unsigned int v612 = 4;
  v613[0] = *(void *)(v78 + v79);
  unsigned int v80 = 1;
  do
  {
    uint64_t v81 = *((void *)v610 + v80 - 1);
    unsigned int v611 = v80 - 1;
    int v82 = *(_DWORD *)(v81 + 24);
    v590 = *v9;
    uint64_t v83 = &(*v9)[176 * v82];
    int v84 = *((_DWORD *)v83 + 2);
    int v602 = *((_DWORD *)v83 + 4);
    uint64_t v85 = *(void *)(*(void *)v83 + 32);
    int v86 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(v85 + 16) + 176))(*(void *)(v85 + 16)) + 16);
    uint64_t v87 = (v86 + 63) >> 6;
    v623 = v625;
    HIDWORD(v624) = 6;
    int v585 = v82;
    if ((v86 + 63) > 0x1BF)
    {
      LODWORD(v624) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v86 + 63) <= 0x3F)
    {
      LODWORD(v624) = (v86 + 63) >> 6;
      int v627 = v86;
      v615 = v617;
      HIDWORD(v616) = 6;
    }
    else
    {
      bzero(v625, 8 * v87);
      LODWORD(v624) = (v86 + 63) >> 6;
      int v627 = v86;
      v615 = v617;
      HIDWORD(v616) = 6;
      bzero(v617, 8 * v87);
    }
    LODWORD(v616) = (v86 + 63) >> 6;
    int v619 = v86;
    v586 = v83;
    uint64_t v88 = *(void *)v83 + 48;
    uint64_t v89 = *(void *)(*(void *)v83 + 56);
    if (v89 != v88)
    {
      uint64_t v587 = 0;
      uint64_t v594 = 0;
      uint64_t v90 = (unsigned char *)(v592 + 272);
      do
      {
        if (**(_WORD **)(v89 + 16) == 3)
        {
          unsigned int v91 = *(_DWORD *)(*(void *)(v89 + 32) + 16);
          uint64_t v92 = *(void *)(v85 + 440);
          switch(*(_DWORD *)(v92 + 80 * v91))
          {
            case 3:
              uint64_t v597 = 0;
              uint64_t v93 = 0;
              uint64_t v94 = *(_DWORD *)(v92 + 80 * v91 + 20);
              uint64_t v95 = *(_DWORD *)(v92 + 80 * v91 + 20) >> 8;
              goto LABEL_119;
            case 5:
              int v602 = *(_DWORD *)(v92 + 80 * v91 + 16);
              break;
            case 6:
              int v84 = *(_DWORD *)(v92 + 80 * v91 + 20);
              break;
            case 7:
              uint64_t v98 = v92 + 80 * v91;
              int v84 = *(_DWORD *)(v98 + 20);
              int v602 = *(_DWORD *)(v98 + 16);
              break;
            case 8:
              uint64_t v597 = 0;
              uint64_t v93 = 0;
              uint64_t v94 = (*(unsigned char *)(v92 + 80 * v91 + 20) - v84);
              uint64_t v95 = (*(_DWORD *)(v92 + 80 * v91 + 20) - v84) >> 8;
LABEL_119:
              uint64_t v594 = v95;
              uint64_t v97 = 0x100000000;
              goto LABEL_120;
            case 9:
              v84 += *(_DWORD *)(v92 + 80 * v91 + 20);
              break;
            case 0xB:
              unint64_t v96 = *(unsigned int *)(v92 + 80 * v91 + 16);
              *(void *)((char *)v615 + ((v96 >> 3) & 0x1FFFFFF8)) |= 1 << v96;
              break;
            case 0xD:
              uint64_t v94 = 0;
              uint64_t v97 = 0;
              uint64_t v597 = *(_DWORD *)(v92 + 80 * v91 + 20);
              uint64_t v587 = *(_DWORD *)(v92 + 80 * v91 + 20) >> 8;
              uint64_t v93 = 0x100000000;
LABEL_120:
              uint64_t v99 = v92 + 80 * v91;
              int v101 = *(_DWORD *)(v99 + 16);
              unint64_t v100 = (int *)(v99 + 16);
              uint64_t v102 = sub_1CC2566CC((uint64_t)v90, v101);
              if (*v90)
              {
                uint64_t v103 = v592 + 280;
                unsigned int v104 = 16;
              }
              else
              {
                uint64_t v103 = *(void *)(v592 + 280);
                unsigned int v104 = *(_DWORD *)(v592 + 288);
              }
              if (v103 + 20 * v104 != v102) {
                goto LABEL_133;
              }
              int v105 = *v100;
              uint64_t v609 = 0;
              if (sub_1CC256730((uint64_t)v90, v105, &v609)) {
                goto LABEL_133;
              }
              uint64_t v106 = v609;
              v607[0] = v609;
              unsigned int v107 = *(_DWORD *)v90;
              if (*(_DWORD *)v90) {
                unsigned int v108 = 16;
              }
              else {
                unsigned int v108 = *(_DWORD *)(v592 + 288);
              }
              int v109 = *(_DWORD *)v90 & 1;
              if (4 * (v107 >> 1) + 4 >= 3 * v108)
              {
                v108 *= 2;
              }
              else if (v108 + ~(v107 >> 1) - *(_DWORD *)(v592 + 276) > v108 >> 3)
              {
                goto LABEL_130;
              }
              if (v108 >= 0x11)
              {
                unint64_t v110 = (v108 - 1) | ((unint64_t)(v108 - 1) >> 1);
                unint64_t v111 = v110 | (v110 >> 2) | ((v110 | (v110 >> 2)) >> 4);
                int v112 = ((v111 | (v111 >> 8)) >> 16) | v111 | (v111 >> 8);
                if ((v112 + 1) > 0x40) {
                  unsigned int v108 = v112 + 1;
                }
                else {
                  unsigned int v108 = 64;
                }
              }
              if (v107)
              {
                uint64_t v116 = 0;
                unsigned int v117 = &v631;
                do
                {
                  unsigned int v118 = *(_DWORD *)(v592 + v116 + 280);
                  if (v118 <= 0xFFFFFFFD)
                  {
                    *(_DWORD *)unsigned int v117 = v118;
                    *(long long *)((char *)v117 + 4) = *(_OWORD *)(v592 + v116 + 284);
                    unsigned int v117 = (long long *)((char *)v117 + 20);
                  }
                  v116 += 20;
                }
                while (v116 != 320);
                if (v108 > 0x10)
                {
                  *(_DWORD *)(v592 + 272) &= ~1u;
                  uint64_t v578 = v108;
                  v581 = v117;
                  uint64_t v119 = operator new(20 * v108, (std::align_val_t)4uLL);
                  unsigned int v117 = v581;
                  *(void *)(v592 + 280) = v119;
                  *(void *)(v592 + 288) = v578;
                  uint64_t v90 = (unsigned char *)(v592 + 272);
                }
                sub_1CC2567E0((uint64_t)v90, (uint64_t)&v631, (uint64_t)v117);
              }
              else
              {
                uint64_t v580 = *(void *)(v592 + 280);
                unsigned int v113 = *(_DWORD *)(v592 + 288);
                if (v108 > 0x10)
                {
                  uint64_t v577 = v108;
                  unsigned int v579 = *(_DWORD *)(v592 + 288);
                  uint64_t v120 = operator new(20 * v108, (std::align_val_t)4uLL);
                  unsigned int v113 = v579;
                  *(void *)(v592 + 280) = v120;
                  *(void *)(v592 + 288) = v577;
                  uint64_t v115 = v592 + 272;
                }
                else
                {
                  int v114 = v107 | 1;
                  uint64_t v115 = v592 + 272;
                  *(_DWORD *)v582 = v114;
                }
                sub_1CC2567E0(v115, v580, v580 + 20 * v113);
                MEMORY[0x1D25D9CD0](v580, 4);
                uint64_t v90 = (unsigned char *)(v592 + 272);
              }
              sub_1CC256730((uint64_t)v90, v105, v607);
              unsigned int v107 = *(_DWORD *)v90;
              uint64_t v106 = v607[0];
              int v109 = *(_DWORD *)v90 & 1;
LABEL_130:
              *(_DWORD *)uint64_t v90 = (v107 & 0xFFFFFFFE | v109) + 2;
              if (*(_DWORD *)v106 != -1) {
                --*(_DWORD *)(v592 + 276);
              }
              *(_DWORD *)uint64_t v106 = v105;
              *(void *)(v106 + 4) = v597 | (v587 << 8) | v93;
              *(void *)(v106 + 12) = v94 | (v594 << 8) | v97;
LABEL_133:
              *(void *)((char *)v623 + (((unint64_t)*v100 >> 3) & 0x1FFFFFF8)) |= 1 << *v100;
              break;
            default:
              break;
          }
        }
        if ((*(unsigned char *)v89 & 4) == 0)
        {
          while ((*(_WORD *)(v89 + 44) & 8) != 0)
            uint64_t v89 = *(void *)(v89 + 8);
        }
        uint64_t v89 = *(void *)(v89 + 8);
      }
      while (v89 != v88);
    }
    int v121 = &v590[176 * v585];
    *((_DWORD *)v121 + 3) = v84;
    uint64_t v122 = v121 + 12;
    v122[156] = 1;
    *((_DWORD *)v122 + 2) = v602;
    uint64_t v123 = (const void **)(v122 + 84);
    int v124 = *((_DWORD *)v122 + 19);
    v603 = (int *)(v122 + 148);
    uint64_t v125 = *((unsigned int *)v122 + 23);
    if ((*((_DWORD *)v122 + 37) & 0x3F) != 0) {
      *((void *)*v123 + v125 - 1) &= ~(-1 << (*((_DWORD *)v122 + 37) & 0x3F));
    }
    unsigned int v126 = v125;
    unsigned int v9 = v606;
    int *v603 = v124;
    unsigned int v127 = v124 + 63;
    if (v125 != (v124 + 63) >> 6)
    {
      uint64_t v128 = v127 >> 6;
      if (v125 > v128)
      {
        *((_DWORD *)v122 + 23) = v128;
        unsigned int v126 = v127 >> 6;
      }
      else
      {
        if (v128 > *((_DWORD *)v122 + 24)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v128 != v125) {
          bzero((char *)*v123 + 8 * v125, 8 * (v128 - v125));
        }
        unsigned int v126 = v128;
        *((_DWORD *)v122 + 23) = v128;
        int v124 = *v603;
      }
      unsigned int v9 = v606;
    }
    int v129 = v124 & 0x3F;
    if (v129) {
      *((void *)*v123 + v126 - 1) &= ~(-1 << v129);
    }
    uint64_t v130 = *(unsigned int *)&v590[176 * v585 + 32];
    if (v130)
    {
      char v131 = *(uint64_t **)(v122 + 12);
      uint64_t v132 = (uint64_t *)v623;
      uint64_t v133 = (uint64_t *)v615;
      float v134 = (uint64_t *)*v123;
      do
      {
        uint64_t v136 = *v131++;
        uint64_t v135 = v136;
        uint64_t v138 = *v132++;
        uint64_t v137 = v138;
        uint64_t v139 = *v133++;
        *v134++ = (v137 | v135) & ~v139;
        --v130;
      }
      while (v130);
    }
    if (v129) {
      *((void *)*v123 + v126 - 1) &= ~(-1 << v129);
    }
    if (v615 != v617) {
      free(v615);
    }
    if (v623 != v625) {
      free(v623);
    }
    unsigned int v140 = *(uint64_t **)(*(void *)v586 + 88);
    uint64_t v141 = *(uint64_t **)(*(void *)v586 + 96);
    while (v140 != v141)
    {
      uint64_t v142 = *v140;
      int v143 = *(_DWORD *)(*v140 + 24);
      float v144 = *v9;
      if (!(*v9)[176 * v143 + 168])
      {
        unsigned int v145 = &v144[176 * v143];
        *((_DWORD *)v145 + 2) = *(_DWORD *)v122;
        *((_DWORD *)v145 + 4) = *((_DWORD *)v122 + 2);
        uint64_t v146 = (void **)(v145 + 24);
        if (v145 + 24 != (char *)v123)
        {
          uint64_t v147 = *((unsigned int *)v122 + 23);
          uint64_t v148 = *((unsigned int *)v145 + 8);
          if (v148 >= v147)
          {
            if (v147) {
              memmove(*v146, *v123, 8 * v147);
            }
          }
          else
          {
            if (*((_DWORD *)v145 + 9) < v147)
            {
              *((_DWORD *)v145 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v148) {
              memmove(*v146, *v123, 8 * v148);
            }
            else {
              uint64_t v148 = 0;
            }
            uint64_t v149 = *((unsigned int *)v122 + 23);
            if (v148 != v149) {
              memcpy((char *)*v146 + 8 * v148, (char *)*v123 + 8 * v148, (unsigned char *)*v123 + 8 * v149 - ((unsigned char *)*v123 + 8 * v148));
            }
          }
          *((_DWORD *)v146 + 2) = v147;
        }
        *(_DWORD *)&v144[176 * v143 + 88] = *v603;
        if (v611 >= (unint64_t)v612) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v9 = v606;
        *((void *)v610 + v611++) = v142;
      }
      ++v140;
    }
    unsigned int v80 = v611;
  }
  while (v611);
  if (v610 != v613) {
    free(v610);
  }
  unsigned int v150 = v583;
  if (!byte_1EBCC91A8) {
    goto LABEL_204;
  }
  v623 = v583;
  sub_1CD50D210((uint64_t)&v623, &v631);
  v367 = v626;
  v623 = v626;
  v368 = (const void *)*((void *)&v631 + 1);
  if (*((void *)&v631 + 1) == (void)v631)
  {
    uint64_t v624 = (uint64_t)v626;
    v369 = (const void *)*((void *)&v631 + 1);
  }
  else
  {
    unsigned int v575 = v632;
    v367 = malloc_type_malloc(8 * v632, 0x4065EBACuLL);
    if (!v367)
    {
      if (v575) {
        goto LABEL_847;
      }
      v367 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      unsigned int v9 = v606;
      unsigned int v150 = v583;
      if (!v367) {
        goto LABEL_847;
      }
    }
    uint64_t v624 = (uint64_t)v367;
    v368 = (const void *)*((void *)&v631 + 1);
    v369 = (const void *)v631;
  }
  unsigned int v370 = v633;
  v625[0] = v632;
  if (v368 == v369) {
    unsigned int v371 = v633;
  }
  else {
    unsigned int v371 = v632;
  }
  if (v371)
  {
    memmove(v367, v368, 8 * v371);
    unsigned int v370 = v633;
  }
  v625[1] = v370;
  v625[2] = v634;
  uint64_t v630 = 0;
  v628 = 0;
  v629 = 0;
  sub_1CBF340A8(&v628, v638, v639, 0xAAAAAAAAAAAAAAABLL * ((v639 - (unsigned char *)v638) >> 3));
  v372 = v618;
  v615 = v618;
  v373 = v641;
  if (v641 != v640)
  {
    unsigned int v576 = v642;
    v372 = malloc_type_malloc(8 * v642, 0x4065EBACuLL);
    if (v372 || !v576 && (v372 = malloc_type_malloc(1uLL, 0x4065EBACuLL), unsigned int v9 = v606, v150 = v583, v372))
    {
      v616 = v372;
      v374 = v640;
      v373 = v641;
      goto LABEL_547;
    }
LABEL_847:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v616 = v618;
  v374 = v641;
LABEL_547:
  unsigned int v375 = v643;
  v617[0] = v642;
  if (v373 == v374) {
    unsigned int v376 = v643;
  }
  else {
    unsigned int v376 = v642;
  }
  if (v376)
  {
    memmove(v372, v373, 8 * v376);
    unsigned int v375 = v643;
  }
  v617[1] = v375;
  v617[2] = v644;
  v621 = 0;
  uint64_t v622 = 0;
  v620 = 0;
  sub_1CBF340A8(&v620, v645, v646, 0xAAAAAAAAAAAAAAABLL * ((v646 - (unsigned char *)v645) >> 3));
  int v377 = 0;
  while (1)
  {
    v378 = (llvm *)v620;
    if (v629 - (unsigned char *)v628 != v621 - v620) {
      goto LABEL_567;
    }
    if (v628 == v629) {
      break;
    }
    v379 = v620 + 8;
    v380 = (char *)v628 + 8;
    while (1)
    {
      v381 = v380 - 8;
      if (*((void *)v380 - 1) != *((void *)v379 - 1)) {
        break;
      }
      int v382 = v379[8];
      if (v380[8]) {
        BOOL v383 = v382 == 0;
      }
      else {
        BOOL v383 = 1;
      }
      if (v383)
      {
        if ((v380[8] == 0) == (v382 != 0)) {
          break;
        }
      }
      else if (*(void *)v380 != *(void *)v379)
      {
        break;
      }
      v379 += 24;
      v380 += 24;
      if (v381 + 24 == v629) {
        goto LABEL_815;
      }
    }
LABEL_567:
    uint64_t v384 = *((void *)v629 - 3);
    uint64_t v385 = *(void *)(v384 + 88);
    uint64_t v588 = *(void *)(v384 + 96);
    if (v385 != v588)
    {
      uint64_t v605 = (uint64_t)&(*v9)[176 * *(int *)(v384 + 24)];
      v593 = (int *)(v605 + 12);
      v589 = (_DWORD *)(v605 + 20);
      v386 = (const void **)(v605 + 96);
      v387 = (int *)(v605 + 160);
      do
      {
        int v388 = *(_DWORD *)(*(void *)v385 + 24);
        v389 = *v606;
        v390 = (int *)&(*v606)[176 * v388];
        if (v390[2] == *v593 && *(_DWORD *)&v389[176 * v388 + 16] == *v589) {
          goto LABEL_667;
        }
        uint64_t v391 = *(void *)v390;
        if (*(void *)(*(void *)v390 + 88) != *(void *)(*(void *)v390 + 96)) {
          goto LABEL_584;
        }
        unint64_t v392 = *(void *)(v391 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v391 + 48 != v392)
        {
          if (v392 && (*(unsigned char *)v392 & 4) != 0)
          {
            __int16 v393 = *(_WORD *)(v392 + 44);
          }
          else
          {
            while (1)
            {
              __int16 v393 = *(_WORD *)(v392 + 44);
              if ((v393 & 4) == 0) {
                break;
              }
              unint64_t v392 = *(void *)v392 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          int v394 = v393 & 0xC;
          int v395 = v393 & 4;
          uint64_t v396 = *(void *)(*(void *)(v392 + 16) + 8);
          if (v394) {
            BOOL v397 = v395 == 0;
          }
          else {
            BOOL v397 = 0;
          }
          if (v397)
          {
            while ((v396 & 0x20) == 0)
            {
              if ((*(_WORD *)(v392 + 44) & 8) == 0) {
                goto LABEL_814;
              }
              unint64_t v392 = *(void *)(v392 + 8);
              LOBYTE(v396) = *(unsigned char *)(*(void *)(v392 + 16) + 8);
            }
LABEL_584:
            v596 = *v606;
            int v599 = *(_DWORD *)(*(void *)v385 + 24);
            v398 = (llvm::raw_ostream *)llvm::errs(v378);
            v399 = (void *)*((void *)v398 + 4);
            if (*((void *)v398 + 3) - (void)v399 > 0x45uLL)
            {
              qmemcpy(v399, "*** Inconsistent CFA register and/or offset between pred and succ ***\n", 70);
              *((void *)v398 + 4) += 70;
            }
            else
            {
              v398 = llvm::raw_ostream::write(v398, "*** Inconsistent CFA register and/or offset between pred and succ ***\n", 0x46uLL);
            }
            v400 = (llvm::raw_ostream *)llvm::errs(v398);
            v401 = v400;
            uint64_t v402 = *((void *)v400 + 4);
            if ((unint64_t)(*((void *)v400 + 3) - v402) > 5)
            {
              *(_WORD *)(v402 + 4) = 8250;
              *(_DWORD *)uint64_t v402 = 1684370000;
              *((void *)v400 + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(v400, "Pred: ", 6uLL);
            }
            v403 = *(llvm::Value **)(*(void *)v605 + 16);
            if (v403)
            {
              Name = llvm::Value::getName(v403);
              size_t v406 = v404;
              v407 = (_WORD *)*((void *)v401 + 4);
              if (v404 > *((void *)v401 + 3) - (void)v407)
              {
                llvm::raw_ostream::write(v401, Name, v404);
                goto LABEL_591;
              }
              if (v404)
              {
                memcpy(v407, Name, v404);
                v407 = (_WORD *)(*((void *)v401 + 4) + v406);
                *((void *)v401 + 4) = v407;
              }
            }
            else
            {
LABEL_591:
              v407 = (_WORD *)*((void *)v401 + 4);
            }
            if (*((void *)v401 + 3) - (void)v407 > 1uLL)
            {
              _WORD *v407 = 8992;
              *((void *)v401 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v401, " #", 2uLL);
            }
            unint64_t v408 = *(int *)(*(void *)v605 + 24);
            if ((v408 & 0x80000000) != 0)
            {
              unint64_t v408 = -(uint64_t)v408;
              v409 = v401;
              int v410 = 1;
            }
            else
            {
              v409 = v401;
              int v410 = 0;
            }
            sub_1CD098D14(v409, v408, 0, 0, v410);
            v411 = (_DWORD *)*((void *)v401 + 4);
            if (*((void *)v401 + 3) - (void)v411 > 3uLL)
            {
              _DWORD *v411 = 544106784;
              *((void *)v401 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(v401, " in ", 4uLL);
            }
            v413 = llvm::Value::getName(**(llvm::Value ***)(*(void *)v605 + 32));
            size_t v414 = v412;
            v415 = (_WORD *)*((void *)v401 + 4);
            if (v412 <= *((void *)v401 + 3) - (void)v415)
            {
              if (v412)
              {
                memcpy(v415, v413, v412);
                v415 = (_WORD *)(*((void *)v401 + 4) + v414);
                *((void *)v401 + 4) = v415;
              }
            }
            else
            {
              llvm::raw_ostream::write(v401, v413, v412);
              v415 = (_WORD *)*((void *)v401 + 4);
            }
            if (*((void *)v401 + 3) - (void)v415 > 0x11uLL)
            {
              v415[8] = 14951;
              *(_OWORD *)v415 = *(_OWORD *)" outgoing CFA Reg:";
              *((void *)v401 + 4) += 18;
            }
            else
            {
              llvm::raw_ostream::write(v401, " outgoing CFA Reg:", 0x12uLL);
            }
            v416 = sub_1CD098D14(v401, *v589, 0, 0, 0);
            v417 = (unsigned char *)*((void *)v401 + 4);
            if (*((unsigned char **)v401 + 3) == v417)
            {
              v416 = llvm::raw_ostream::write(v401, "\n", 1uLL);
            }
            else
            {
              unsigned char *v417 = 10;
              ++*((void *)v401 + 4);
            }
            v418 = (llvm::raw_ostream *)llvm::errs(v416);
            v419 = v418;
            uint64_t v420 = *((void *)v418 + 4);
            if ((unint64_t)(*((void *)v418 + 3) - v420) > 5)
            {
              *(_WORD *)(v420 + 4) = 8250;
              *(_DWORD *)uint64_t v420 = 1684370000;
              *((void *)v418 + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(v418, "Pred: ", 6uLL);
            }
            v421 = *(llvm::Value **)(*(void *)v605 + 16);
            if (v421)
            {
              v423 = llvm::Value::getName(v421);
              size_t v424 = v422;
              v425 = (_WORD *)*((void *)v419 + 4);
              if (v422 > *((void *)v419 + 3) - (void)v425)
              {
                llvm::raw_ostream::write(v419, v423, v422);
                goto LABEL_613;
              }
              if (v422)
              {
                memcpy(v425, v423, v422);
                v425 = (_WORD *)(*((void *)v419 + 4) + v424);
                *((void *)v419 + 4) = v425;
              }
            }
            else
            {
LABEL_613:
              v425 = (_WORD *)*((void *)v419 + 4);
            }
            if (*((void *)v419 + 3) - (void)v425 > 1uLL)
            {
              _WORD *v425 = 8992;
              *((void *)v419 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v419, " #", 2uLL);
            }
            unint64_t v426 = *(int *)(*(void *)v605 + 24);
            if ((v426 & 0x80000000) != 0)
            {
              unint64_t v426 = -(uint64_t)v426;
              v427 = v419;
              int v428 = 1;
            }
            else
            {
              v427 = v419;
              int v428 = 0;
            }
            sub_1CD098D14(v427, v426, 0, 0, v428);
            v429 = (_DWORD *)*((void *)v419 + 4);
            if (*((void *)v419 + 3) - (void)v429 > 3uLL)
            {
              _DWORD *v429 = 544106784;
              *((void *)v419 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(v419, " in ", 4uLL);
            }
            v431 = llvm::Value::getName(**(llvm::Value ***)(*(void *)v605 + 32));
            size_t v432 = v430;
            v433 = (void *)*((void *)v419 + 4);
            if (v430 <= *((void *)v419 + 3) - (void)v433)
            {
              if (v430)
              {
                memcpy(v433, v431, v430);
                v433 = (void *)(*((void *)v419 + 4) + v432);
                *((void *)v419 + 4) = v433;
              }
            }
            else
            {
              llvm::raw_ostream::write(v419, v431, v430);
              v433 = (void *)*((void *)v419 + 4);
            }
            if (*((void *)v419 + 3) - (void)v433 > 0x14uLL)
            {
              qmemcpy(v433, " outgoing CFA Offset:", 21);
              *((void *)v419 + 4) += 21;
            }
            else
            {
              llvm::raw_ostream::write(v419, " outgoing CFA Offset:", 0x15uLL);
            }
            unint64_t v434 = *v593;
            if ((v434 & 0x80000000) != 0)
            {
              unint64_t v434 = -(uint64_t)v434;
              v435 = v419;
              int v436 = 1;
            }
            else
            {
              v435 = v419;
              int v436 = 0;
            }
            v437 = sub_1CD098D14(v435, v434, 0, 0, v436);
            v438 = (unsigned char *)*((void *)v419 + 4);
            if (*((unsigned char **)v419 + 3) == v438)
            {
              v437 = llvm::raw_ostream::write(v419, "\n", 1uLL);
            }
            else
            {
              unsigned char *v438 = 10;
              ++*((void *)v419 + 4);
            }
            v439 = (llvm::raw_ostream *)llvm::errs(v437);
            v440 = v439;
            uint64_t v441 = *((void *)v439 + 4);
            if ((unint64_t)(*((void *)v439 + 3) - v441) > 5)
            {
              *(_WORD *)(v441 + 4) = 8250;
              *(_DWORD *)uint64_t v441 = 1667462483;
              *((void *)v439 + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(v439, "Succ: ", 6uLL);
            }
            v442 = *(llvm::Value **)(*(void *)v390 + 16);
            if (v442)
            {
              v444 = llvm::Value::getName(v442);
              size_t v445 = v443;
              v446 = (_WORD *)*((void *)v440 + 4);
              if (v443 > *((void *)v440 + 3) - (void)v446)
              {
                llvm::raw_ostream::write(v440, v444, v443);
                goto LABEL_637;
              }
              if (v443)
              {
                memcpy(v446, v444, v443);
                v446 = (_WORD *)(*((void *)v440 + 4) + v445);
                *((void *)v440 + 4) = v446;
              }
            }
            else
            {
LABEL_637:
              v446 = (_WORD *)*((void *)v440 + 4);
            }
            if (*((void *)v440 + 3) - (void)v446 > 1uLL)
            {
              _WORD *v446 = 8992;
              *((void *)v440 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v440, " #", 2uLL);
            }
            unint64_t v447 = *(int *)(*(void *)v390 + 24);
            if ((v447 & 0x80000000) != 0)
            {
              unint64_t v447 = -(uint64_t)v447;
              v448 = v440;
              int v449 = 1;
            }
            else
            {
              v448 = v440;
              int v449 = 0;
            }
            sub_1CD098D14(v448, v447, 0, 0, v449);
            uint64_t v450 = *((void *)v440 + 4);
            if ((unint64_t)(*((void *)v440 + 3) - v450) > 0x11)
            {
              *(_WORD *)(v450 + 16) = 14951;
              *(_OWORD *)uint64_t v450 = *(_OWORD *)" incoming CFA Reg:";
              *((void *)v440 + 4) += 18;
            }
            else
            {
              llvm::raw_ostream::write(v440, " incoming CFA Reg:", 0x12uLL);
            }
            v451 = sub_1CD098D14(v440, *(unsigned int *)&v596[176 * v599 + 16], 0, 0, 0);
            v452 = (unsigned char *)*((void *)v440 + 4);
            if (*((unsigned char **)v440 + 3) == v452)
            {
              v451 = llvm::raw_ostream::write(v440, "\n", 1uLL);
            }
            else
            {
              unsigned char *v452 = 10;
              ++*((void *)v440 + 4);
            }
            v453 = (llvm::raw_ostream *)llvm::errs(v451);
            v454 = v453;
            uint64_t v455 = *((void *)v453 + 4);
            if ((unint64_t)(*((void *)v453 + 3) - v455) > 5)
            {
              *(_WORD *)(v455 + 4) = 8250;
              *(_DWORD *)uint64_t v455 = 1667462483;
              *((void *)v453 + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(v453, "Succ: ", 6uLL);
            }
            v456 = *(llvm::Value **)(*(void *)v390 + 16);
            if (v456)
            {
              v458 = llvm::Value::getName(v456);
              size_t v459 = v457;
              v460 = (_WORD *)*((void *)v454 + 4);
              if (v457 > *((void *)v454 + 3) - (void)v460)
              {
                llvm::raw_ostream::write(v454, v458, v457);
                goto LABEL_653;
              }
              if (v457)
              {
                memcpy(v460, v458, v457);
                v460 = (_WORD *)(*((void *)v454 + 4) + v459);
                *((void *)v454 + 4) = v460;
              }
            }
            else
            {
LABEL_653:
              v460 = (_WORD *)*((void *)v454 + 4);
            }
            if (*((void *)v454 + 3) - (void)v460 > 1uLL)
            {
              _WORD *v460 = 8992;
              *((void *)v454 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v454, " #", 2uLL);
            }
            unint64_t v461 = *(int *)(*(void *)v390 + 24);
            if ((v461 & 0x80000000) != 0)
            {
              unint64_t v461 = -(uint64_t)v461;
              v462 = v454;
              int v463 = 1;
            }
            else
            {
              v462 = v454;
              int v463 = 0;
            }
            sub_1CD098D14(v462, v461, 0, 0, v463);
            v464 = (void *)*((void *)v454 + 4);
            if (*((void *)v454 + 3) - (void)v464 > 0x14uLL)
            {
              qmemcpy(v464, " incoming CFA Offset:", 21);
              *((void *)v454 + 4) += 21;
            }
            else
            {
              llvm::raw_ostream::write(v454, " incoming CFA Offset:", 0x15uLL);
            }
            unint64_t v465 = v390[2];
            if ((v465 & 0x80000000) != 0)
            {
              unint64_t v465 = -(uint64_t)v465;
              v466 = v454;
              int v467 = 1;
            }
            else
            {
              v466 = v454;
              int v467 = 0;
            }
            v378 = sub_1CD098D14(v466, v465, 0, 0, v467);
            v468 = (unsigned char *)*((void *)v454 + 4);
            if (*((unsigned char **)v454 + 3) == v468)
            {
              v378 = llvm::raw_ostream::write(v454, "\n", 1uLL);
            }
            else
            {
              unsigned char *v468 = 10;
              ++*((void *)v454 + 4);
            }
            v389 = v596;
            int v388 = v599;
            ++v377;
LABEL_667:
            v469 = &v389[176 * v388];
            int v471 = *((_DWORD *)v469 + 22);
            v470 = (int *)(v469 + 88);
            v472 = (const void **)(v470 - 16);
            if (v471 == *v387 && (v378 = (llvm *)memcmp(*v472, *v386, 8 * *(v470 - 14)), !v378))
            {
LABEL_814:
              unsigned int v150 = v583;
            }
            else
            {
              v473 = (llvm::raw_ostream *)llvm::errs(v378);
              v474 = v473;
              v475 = (void *)*((void *)v473 + 4);
              if (*((void *)v473 + 3) - (void)v475 > 0x3CuLL)
              {
                qmemcpy(v475, "*** Inconsistent CSR Saved between pred and succ in function ", 61);
                *((void *)v473 + 4) += 61;
              }
              else
              {
                llvm::raw_ostream::write(v473, "*** Inconsistent CSR Saved between pred and succ in function ", 0x3DuLL);
              }
              v477 = llvm::Value::getName(**(llvm::Value ***)(*(void *)v605 + 32));
              size_t v478 = v476;
              v479 = (llvm::raw_ostream *)*((void *)v474 + 4);
              if (v476 <= *((void *)v474 + 3) - (void)v479)
              {
                if (v476)
                {
                  memcpy(v479, v477, v476);
                  v479 = (llvm::raw_ostream *)(*((void *)v474 + 4) + v478);
                  *((void *)v474 + 4) = v479;
                }
              }
              else
              {
                llvm::raw_ostream::write(v474, v477, v476);
                v479 = (llvm::raw_ostream *)*((void *)v474 + 4);
              }
              if (*((void *)v474 + 3) - (void)v479 > 4uLL)
              {
                *((unsigned char *)v479 + 4) = 10;
                *(_DWORD *)v479 = 707406368;
                *((void *)v474 + 4) += 5;
              }
              else
              {
                v479 = llvm::raw_ostream::write(v474, " ***\n", 5uLL);
              }
              v480 = (llvm::raw_ostream *)llvm::errs(v479);
              v481 = v480;
              uint64_t v482 = *((void *)v480 + 4);
              if ((unint64_t)(*((void *)v480 + 3) - v482) > 5)
              {
                *(_WORD *)(v482 + 4) = 8250;
                *(_DWORD *)uint64_t v482 = 1684370000;
                *((void *)v480 + 4) += 6;
              }
              else
              {
                llvm::raw_ostream::write(v480, "Pred: ", 6uLL);
              }
              v483 = *(llvm::Value **)(*(void *)v605 + 16);
              if (v483)
              {
                v485 = llvm::Value::getName(v483);
                size_t v486 = v484;
                v487 = (_WORD *)*((void *)v481 + 4);
                if (v484 <= *((void *)v481 + 3) - (void)v487)
                {
                  if (v484)
                  {
                    memcpy(v487, v485, v484);
                    v487 = (_WORD *)(*((void *)v481 + 4) + v486);
                    *((void *)v481 + 4) = v487;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v481, v485, v484);
                  v487 = (_WORD *)*((void *)v481 + 4);
                }
              }
              else
              {
                v487 = (_WORD *)*((void *)v481 + 4);
              }
              if (*((void *)v481 + 3) - (void)v487 > 1uLL)
              {
                _WORD *v487 = 8992;
                *((void *)v481 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v481, " #", 2uLL);
              }
              unint64_t v488 = *(int *)(*(void *)v605 + 24);
              if ((v488 & 0x80000000) != 0)
              {
                unint64_t v488 = -(uint64_t)v488;
                v489 = v481;
                int v490 = 1;
              }
              else
              {
                v489 = v481;
                int v490 = 0;
              }
              v491 = sub_1CD098D14(v489, v488, 0, 0, v490);
              v492 = (void *)*((void *)v481 + 4);
              int v591 = v377;
              if (*((void *)v481 + 3) - (void)v492 > 0x14uLL)
              {
                qmemcpy(v492, " outgoing CSR Saved: ", 21);
                *((void *)v481 + 4) += 21;
              }
              else
              {
                v491 = llvm::raw_ostream::write(v481, " outgoing CSR Saved: ", 0x15uLL);
              }
              int v493 = *v387;
              if (*v387)
              {
                uint64_t v494 = 0;
                int v495 = -v493;
                int v496 = v493 - 1;
                v497 = (uint64_t *)*v386;
                unint64_t v498 = 0xFFFFFFFFFFFFFFFFLL >> v495;
                uint64_t v499 = v496 & 0xFFFFFFC0;
                while (1)
                {
                  uint64_t v501 = *v497++;
                  uint64_t v500 = v501;
                  unint64_t v502 = v499 == v494 ? v498 : -1;
                  unint64_t v503 = v502 & v500;
                  if (v503) {
                    break;
                  }
                  v494 += 64;
                  if (v499 + 64 == v494) {
                    goto LABEL_698;
                  }
                }
                for (unint64_t i = __clz(__rbit64(v503)) + v494; i != -1; unint64_t i = __clz(__rbit64(v535)) + v530)
                {
                  v515 = (llvm::raw_ostream *)llvm::errs(v491);
                  v516 = v515;
                  unint64_t v517 = (int)i;
                  if ((uint64_t)(i << 32) < (uint64_t)0xFFFFFFFF00000001)
                  {
                    unint64_t v517 = -(uint64_t)(int)i;
                    int v518 = 1;
                  }
                  else
                  {
                    int v518 = 0;
                  }
                  v491 = sub_1CD098D14(v515, v517, 0, 0, v518);
                  v519 = (unsigned char *)*((void *)v516 + 4);
                  if (*((unsigned char **)v516 + 3) == v519)
                  {
                    v491 = llvm::raw_ostream::write(v516, " ", 1uLL);
                  }
                  else
                  {
                    unsigned char *v519 = 32;
                    ++*((void *)v516 + 4);
                  }
                  unsigned int v520 = i + 1;
                  int v521 = *v387;
                  if (i + 1 == *v387) {
                    break;
                  }
                  unsigned int v522 = v520 >> 6;
                  unsigned int v523 = v521 - 1;
                  if (v520 >> 6 > (v521 - 1) >> 6) {
                    break;
                  }
                  uint64_t v524 = 0;
                  uint64_t v525 = v523 >> 6;
                  int v526 = v520 & 0x3F;
                  BOOL v26 = v526 == 0;
                  unint64_t v527 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v526;
                  if (v26) {
                    uint64_t v528 = -1;
                  }
                  else {
                    uint64_t v528 = ~v527;
                  }
                  unint64_t v529 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v523;
                  unint64_t v530 = (unint64_t)v522 << 6;
                  uint64_t v531 = v525 - v522;
                  uint64_t v532 = (uint64_t)*v386 + 8 * v522;
                  while (1)
                  {
                    uint64_t v533 = v524 ? -1 : v528;
                    unint64_t v534 = v531 == v524 ? v529 : -1;
                    unint64_t v535 = v533 & v534 & *(void *)(v532 + 8 * v524);
                    if (v535) {
                      break;
                    }
                    v530 += 64;
                    if (v531 + 1 == ++v524) {
                      goto LABEL_698;
                    }
                  }
                }
              }
LABEL_698:
              v504 = (llvm::raw_ostream *)llvm::errs(v491);
              v505 = (unsigned char *)*((void *)v504 + 4);
              if (*((unsigned char **)v504 + 3) == v505)
              {
                v504 = llvm::raw_ostream::write(v504, "\n", 1uLL);
              }
              else
              {
                unsigned char *v505 = 10;
                ++*((void *)v504 + 4);
              }
              v506 = (llvm::raw_ostream *)llvm::errs(v504);
              v507 = v506;
              uint64_t v508 = *((void *)v506 + 4);
              if ((unint64_t)(*((void *)v506 + 3) - v508) > 5)
              {
                *(_WORD *)(v508 + 4) = 8250;
                *(_DWORD *)uint64_t v508 = 1667462483;
                *((void *)v506 + 4) += 6;
              }
              else
              {
                llvm::raw_ostream::write(v506, "Succ: ", 6uLL);
              }
              v509 = *(llvm::Value **)(*(void *)v390 + 16);
              if (v509)
              {
                v511 = llvm::Value::getName(v509);
                size_t v512 = v510;
                v513 = (_WORD *)*((void *)v507 + 4);
                if (v510 <= *((void *)v507 + 3) - (void)v513)
                {
                  if (v510)
                  {
                    memcpy(v513, v511, v510);
                    v513 = (_WORD *)(*((void *)v507 + 4) + v512);
                    *((void *)v507 + 4) = v513;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v507, v511, v510);
                  v513 = (_WORD *)*((void *)v507 + 4);
                }
              }
              else
              {
                v513 = (_WORD *)*((void *)v507 + 4);
              }
              if (*((void *)v507 + 3) - (void)v513 > 1uLL)
              {
                _WORD *v513 = 8992;
                *((void *)v507 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v507, " #", 2uLL);
              }
              unint64_t v536 = *(int *)(*(void *)v390 + 24);
              if ((v536 & 0x80000000) != 0)
              {
                unint64_t v536 = -(uint64_t)v536;
                v537 = v507;
                int v538 = 1;
              }
              else
              {
                v537 = v507;
                int v538 = 0;
              }
              v539 = sub_1CD098D14(v537, v536, 0, 0, v538);
              v540 = (void *)*((void *)v507 + 4);
              if (*((void *)v507 + 3) - (void)v540 > 0x14uLL)
              {
                qmemcpy(v540, " incoming CSR Saved: ", 21);
                *((void *)v507 + 4) += 21;
              }
              else
              {
                v539 = llvm::raw_ostream::write(v507, " incoming CSR Saved: ", 0x15uLL);
              }
              int v541 = *v470;
              if (*v470)
              {
                uint64_t v542 = 0;
                int v543 = -v541;
                int v544 = v541 - 1;
                v545 = (uint64_t *)*v472;
                unint64_t v546 = 0xFFFFFFFFFFFFFFFFLL >> v543;
                uint64_t v547 = v544 & 0xFFFFFFC0;
                while (1)
                {
                  uint64_t v549 = *v545++;
                  uint64_t v548 = v549;
                  unint64_t v550 = v547 == v542 ? v546 : -1;
                  unint64_t v551 = v550 & v548;
                  if (v551) {
                    break;
                  }
                  v542 += 64;
                  if (v547 + 64 == v542) {
                    goto LABEL_745;
                  }
                }
                for (unint64_t j = __clz(__rbit64(v551)) + v542; j != -1; unint64_t j = __clz(__rbit64(v574)) + v569)
                {
                  v554 = (llvm::raw_ostream *)llvm::errs(v539);
                  v555 = v554;
                  unint64_t v556 = (int)j;
                  if ((uint64_t)(j << 32) < (uint64_t)0xFFFFFFFF00000001)
                  {
                    unint64_t v556 = -(uint64_t)(int)j;
                    int v557 = 1;
                  }
                  else
                  {
                    int v557 = 0;
                  }
                  v539 = sub_1CD098D14(v554, v556, 0, 0, v557);
                  v558 = (unsigned char *)*((void *)v555 + 4);
                  if (*((unsigned char **)v555 + 3) == v558)
                  {
                    v539 = llvm::raw_ostream::write(v555, " ", 1uLL);
                  }
                  else
                  {
                    unsigned char *v558 = 32;
                    ++*((void *)v555 + 4);
                  }
                  unsigned int v559 = j + 1;
                  int v560 = *v470;
                  if (j + 1 == *v470) {
                    break;
                  }
                  unsigned int v561 = v559 >> 6;
                  unsigned int v562 = v560 - 1;
                  if (v559 >> 6 > (v560 - 1) >> 6) {
                    break;
                  }
                  uint64_t v563 = 0;
                  uint64_t v564 = v562 >> 6;
                  int v565 = v559 & 0x3F;
                  BOOL v26 = v565 == 0;
                  unint64_t v566 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v565;
                  if (v26) {
                    uint64_t v567 = -1;
                  }
                  else {
                    uint64_t v567 = ~v566;
                  }
                  unint64_t v568 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v562;
                  unint64_t v569 = (unint64_t)v561 << 6;
                  uint64_t v570 = v564 - v561;
                  uint64_t v571 = (uint64_t)*v472 + 8 * v561;
                  while (1)
                  {
                    uint64_t v572 = v563 ? -1 : v567;
                    unint64_t v573 = v570 == v563 ? v568 : -1;
                    unint64_t v574 = v572 & v573 & *(void *)(v571 + 8 * v563);
                    if (v574) {
                      break;
                    }
                    v569 += 64;
                    if (v570 + 1 == ++v563) {
                      goto LABEL_745;
                    }
                  }
                }
              }
LABEL_745:
              v378 = (llvm *)llvm::errs(v539);
              v552 = (unsigned char *)*((void *)v378 + 4);
              if (*((unsigned char **)v378 + 3) == v552)
              {
                v378 = llvm::raw_ostream::write(v378, "\n", 1uLL);
              }
              else
              {
                unsigned char *v552 = 10;
                ++*((void *)v378 + 4);
              }
              unsigned int v150 = v583;
              int v377 = v591 + 1;
            }
            goto LABEL_748;
          }
          if ((v396 & 0x20) != 0) {
            goto LABEL_584;
          }
        }
LABEL_748:
        v385 += 8;
      }
      while (v385 != v588);
    }
    sub_1CD50D36C((char *)&v623);
    unsigned int v9 = v606;
  }
LABEL_815:
  if (v620)
  {
    v621 = v620;
    operator delete(v620);
  }
  if (v616 != v615) {
    free(v616);
  }
  if (v628)
  {
    v629 = (char *)v628;
    operator delete(v628);
  }
  if ((void *)v624 != v623) {
    free((void *)v624);
  }
  if (v645)
  {
    v646 = v645;
    operator delete(v645);
  }
  if (v641 != v640) {
    free(v641);
  }
  if (v638)
  {
    v639 = v638;
    operator delete(v638);
  }
  if (*((void *)&v631 + 1) != (void)v631) {
    free(*((void **)&v631 + 1));
  }
  if (v377)
  {
    v615 = "Found ";
    v618[0] = 259;
    __int16 v614 = 264;
    LODWORD(v610) = v377;
    sub_1CD3E3950((uint64_t *)&v615, (uint64_t *)&v610, (uint64_t)&v623);
    v607[0] = (uint64_t)" in/out CFI information errors.";
    __int16 v608 = 259;
    sub_1CD3E3950((uint64_t *)&v623, v607, (uint64_t)&v631);
    llvm::report_fatal_error((llvm *)&v631, (const llvm::Twine *)1);
  }
LABEL_204:
  int v151 = *(_DWORD *)(*((void *)v150 + 41) + 24);
  uint64_t v152 = v150;
  unsigned int v153 = *v9;
  uint64_t v595 = (*(uint64_t (**)(void))(**((void **)v152 + 2) + 104))(*((void *)v152 + 2));
  v623 = v625;
  uint64_t v624 = 0x600000000;
  int v627 = 0;
  uint64_t v154 = *((void *)v152 + 41);
  if ((char *)v154 == v584)
  {
    char v32 = 0;
    goto LABEL_533;
  }
  char v32 = 0;
  unint64_t v155 = &v153[176 * v151];
  unint64_t v156 = (uint64_t *)v583;
  do
  {
    int v157 = *(_DWORD *)(v154 + 24);
    if (v157 == *(_DWORD *)(v156[41] + 24)) {
      goto LABEL_428;
    }
    uint64_t v158 = *v9;
    v604 = &(*v9)[176 * v157];
    uint64_t v159 = *(void *)v604 + 48;
    unint64_t v160 = *(unint64_t **)(*(void *)v604 + 56);
    if ((unint64_t *)v159 == v160)
    {
LABEL_214:
      v610 = 0;
    }
    else
    {
      uint64_t v161 = *(void *)(*(void *)v604 + 56);
      while (1)
      {
        unsigned int v162 = **(unsigned __int16 **)(v161 + 16);
        BOOL v163 = v162 > 0x17;
        int v164 = (1 << v162) & 0x83E000;
        if (v163 || v164 == 0) {
          break;
        }
        uint64_t v161 = *(void *)(v161 + 8);
        if (v161 == v159) {
          goto LABEL_214;
        }
      }
      char v166 = *(void **)(v161 + 56);
      v610 = v166;
      if (v166) {
        llvm::MetadataTracking::track((uint64_t)&v610, (unsigned __int8 *)v166, 2);
      }
    }
    int v167 = *(unsigned __int8 *)(v154 + 200);
    v598 = v160;
    if (*((_DWORD *)v155 + 3) != *(_DWORD *)&v158[176 * v157 + 8])
    {
      unsigned int v295 = *(_DWORD *)&v158[176 * v157 + 16];
      int v296 = *(_DWORD *)(v154 + 24);
      int v297 = *v9;
      if (*(unsigned char *)(v154 + 200) || *((_DWORD *)v155 + 5) != v295)
      {
LABEL_411:
        unsigned int v315 = *(_DWORD *)&v297[176 * v296 + 8];
        LODWORD(v631) = 7;
        *((void *)&v631 + 1) = 0;
        unsigned int v632 = v295;
        unsigned int v633 = v315;
        HIBYTE(v637) = 0;
        *(void *)&long long v636 = 0;
        long long v635 = 0uLL;
        BYTE8(v636) = 0;
        unsigned int v316 = llvm::MachineFunction::addFrameInst((uint64_t *)v583, &v631);
        if (SHIBYTE(v637) < 0) {
          operator delete(*((void **)&v636 + 1));
        }
        uint64_t v300 = v155;
        if ((void)v635)
        {
          *((void *)&v635 + 1) = v635;
          operator delete((void *)v635);
        }
        uint64_t v317 = *(void *)v604;
        uint64_t v318 = *(void *)(v595 + 8);
        v319 = *(llvm::MachineFunction **)(*(void *)v604 + 32);
        v615 = v610;
        if (v610) {
          llvm::MetadataTracking::track((uint64_t)&v615, (unsigned __int8 *)v610, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v319, v318 + 144, (unsigned __int8 **)&v615, 0);
        if (!v615)
        {
LABEL_418:
          uint64_t v321 = *(void *)(v317 + 40);
          *((void *)MachineInstr + 3) = v321;
          uint64_t v322 = *(void *)(v321 + 32);
          uint64_t v323 = *((unsigned int *)MachineInstr + 10);
          if (v323)
          {
            uint64_t v336 = *((void *)MachineInstr + 4);
            uint64_t v337 = *(void *)(v322 + 40);
            uint64_t v338 = 32 * v323;
            do
            {
              if (!*(unsigned char *)v336)
              {
                uint64_t v339 = *(unsigned int *)(v336 + 4);
                if ((int)v339 >= 0) {
                  v340 = (uint64_t *)(*(void *)(v337 + 272) + 8 * v339);
                }
                else {
                  v340 = (uint64_t *)(*(void *)(v337 + 24) + 16 * (v339 & 0x7FFFFFFF) + 8);
                }
                uint64_t v341 = *v340;
                if (*v340)
                {
                  uint64_t v342 = *(void *)(v341 + 16);
                  *(void *)(v341 + 16) = v336;
                  *(void *)(v336 + 16) = v342;
                  if (*(unsigned char *)(v336 + 3))
                  {
                    *(void *)(v336 + 24) = v341;
                  }
                  else
                  {
                    *(void *)(v336 + 24) = 0;
                    v340 = (uint64_t *)(v342 + 24);
                  }
                }
                else
                {
                  *(void *)(v336 + 16) = v336;
                  *(void *)(v336 + 24) = 0;
                }
                uint64_t *v340 = v336;
              }
              v336 += 32;
              v338 -= 32;
            }
            while (v338);
          }
          uint64_t v324 = *(void *)(v322 + 728);
          if (v324) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v324 + 24))(v324, MachineInstr);
          }
          unint64_t v325 = *v598 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v325 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v598;
          *(void *)(v325 + 8) = MachineInstr;
          unint64_t *v598 = *v598 & 7 | (unint64_t)MachineInstr;
          LODWORD(v631) = 16;
          *((void *)&v631 + 1) = 0;
          unsigned int v632 = v316;
          llvm::MachineInstr::addOperand(MachineInstr, v319, (const llvm::MachineOperand *)&v631);
          if (v167)
          {
            unint64_t v156 = (uint64_t *)v583;
            uint64_t v326 = (*(uint64_t (**)(void))(**((void **)v583 + 2) + 112))(*((void *)v583 + 2));
            (*(void (**)(uint64_t, void, unint64_t *))(*(void *)v326 + 120))(v326, *(void *)v604, v598);
            char v32 = 1;
            unsigned int v9 = v606;
            goto LABEL_423;
          }
          goto LABEL_449;
        }
        int v351 = *(unsigned __int8 *)v615;
        if ((v351 - 4) > 0x1E)
        {
          if ((v351 - 3) >= 0xFFFFFFFE) {
            v360 = v615;
          }
          else {
            v360 = 0;
          }
          if ((v351 - 3) < 0xFFFFFFFE)
          {
            if (v351 == 3) {
              *((void *)v615 + 1) = 0;
            }
            goto LABEL_418;
          }
          unint64_t v353 = (unint64_t)v360 + 8;
        }
        else
        {
          if ((*((unsigned char *)v615 + 1) & 0x7F) != 2 && !*((_DWORD *)v615 + 3)) {
            goto LABEL_418;
          }
          uint64_t v352 = *((void *)v615 + 2);
          if ((v352 & 4) == 0) {
            goto LABEL_418;
          }
          unint64_t v353 = v352 & 0xFFFFFFFFFFFFFFF8;
          if (!v353) {
            goto LABEL_418;
          }
        }
        *(void *)&long long v631 = &v615;
        sub_1CC5FA668(v353 + 16, &v631);
        goto LABEL_418;
      }
      unsigned int v298 = *(_DWORD *)&v297[176 * v296 + 8];
      LODWORD(v631) = 6;
      *((void *)&v631 + 1) = 0;
      unsigned int v632 = 0;
      unsigned int v633 = v298;
      HIBYTE(v637) = 0;
      *(void *)&long long v636 = 0;
      long long v635 = 0uLL;
      BYTE8(v636) = 0;
      unsigned int v299 = llvm::MachineFunction::addFrameInst((uint64_t *)v583, &v631);
      if (SHIBYTE(v637) < 0) {
        operator delete(*((void **)&v636 + 1));
      }
      uint64_t v300 = v155;
      if ((void)v635)
      {
        *((void *)&v635 + 1) = v635;
        operator delete((void *)v635);
      }
      uint64_t v301 = *(void *)v604;
      uint64_t v302 = *(void *)(v595 + 8);
      __int16 v303 = *(llvm::MachineFunction **)(*(void *)v604 + 32);
      v615 = v610;
      if (v610) {
        llvm::MetadataTracking::track((uint64_t)&v615, (unsigned __int8 *)v610, 2);
      }
      v304 = llvm::MachineFunction::CreateMachineInstr(v303, v302 + 144, (unsigned __int8 **)&v615, 0);
      if (!v615)
      {
LABEL_396:
        uint64_t v305 = *(void *)(v301 + 40);
        *((void *)v304 + 3) = v305;
        uint64_t v306 = *(void *)(v305 + 32);
        uint64_t v307 = *((unsigned int *)v304 + 10);
        if (v307)
        {
          uint64_t v308 = *((void *)v304 + 4);
          uint64_t v309 = *(void *)(v306 + 40);
          uint64_t v310 = 32 * v307;
          do
          {
            if (!*(unsigned char *)v308)
            {
              uint64_t v311 = *(unsigned int *)(v308 + 4);
              if ((int)v311 >= 0) {
                uint64_t v312 = (uint64_t *)(*(void *)(v309 + 272) + 8 * v311);
              }
              else {
                uint64_t v312 = (uint64_t *)(*(void *)(v309 + 24) + 16 * (v311 & 0x7FFFFFFF) + 8);
              }
              uint64_t v313 = *v312;
              if (*v312)
              {
                uint64_t v314 = *(void *)(v313 + 16);
                *(void *)(v313 + 16) = v308;
                *(void *)(v308 + 16) = v314;
                if (*(unsigned char *)(v308 + 3))
                {
                  *(void *)(v308 + 24) = v313;
                }
                else
                {
                  *(void *)(v308 + 24) = 0;
                  uint64_t v312 = (uint64_t *)(v314 + 24);
                }
              }
              else
              {
                *(void *)(v308 + 16) = v308;
                *(void *)(v308 + 24) = 0;
              }
              *uint64_t v312 = v308;
            }
            v308 += 32;
            v310 -= 32;
          }
          while (v310);
        }
        goto LABEL_446;
      }
      int v357 = *(unsigned __int8 *)v615;
      if ((v357 - 4) > 0x1E)
      {
        if ((v357 - 3) >= 0xFFFFFFFE) {
          v362 = v615;
        }
        else {
          v362 = 0;
        }
        if ((v357 - 3) < 0xFFFFFFFE)
        {
          if (v357 == 3) {
            *((void *)v615 + 1) = 0;
          }
          goto LABEL_396;
        }
        unint64_t v359 = (unint64_t)v362 + 8;
      }
      else
      {
        if ((*((unsigned char *)v615 + 1) & 0x7F) != 2 && !*((_DWORD *)v615 + 3)) {
          goto LABEL_396;
        }
        uint64_t v358 = *((void *)v615 + 2);
        if ((v358 & 4) == 0) {
          goto LABEL_396;
        }
        unint64_t v359 = v358 & 0xFFFFFFFFFFFFFFF8;
        if (!v359) {
          goto LABEL_396;
        }
      }
      *(void *)&long long v631 = &v615;
      sub_1CC5FA668(v359 + 16, &v631);
      goto LABEL_396;
    }
    if (*(unsigned char *)(v154 + 200))
    {
      unsigned int v295 = *(_DWORD *)&v158[176 * v157 + 16];
      int v296 = *(_DWORD *)(v154 + 24);
      int v297 = *v9;
      goto LABEL_411;
    }
    unsigned int v168 = *(_DWORD *)&v158[176 * v157 + 16];
    if (*((_DWORD *)v155 + 5) != v168)
    {
      LODWORD(v631) = 5;
      *((void *)&v631 + 1) = 0;
      unsigned int v632 = v168;
      unsigned int v633 = 0;
      HIBYTE(v637) = 0;
      *(void *)&long long v636 = 0;
      long long v635 = 0uLL;
      BYTE8(v636) = 0;
      unsigned int v299 = llvm::MachineFunction::addFrameInst((uint64_t *)v583, &v631);
      if (SHIBYTE(v637) < 0) {
        operator delete(*((void **)&v636 + 1));
      }
      uint64_t v300 = v155;
      if ((void)v635)
      {
        *((void *)&v635 + 1) = v635;
        operator delete((void *)v635);
      }
      uint64_t v330 = *(void *)v604;
      uint64_t v331 = *(void *)(v595 + 8);
      __int16 v303 = *(llvm::MachineFunction **)(*(void *)v604 + 32);
      v615 = v610;
      if (v610) {
        llvm::MetadataTracking::track((uint64_t)&v615, (unsigned __int8 *)v610, 2);
      }
      v304 = llvm::MachineFunction::CreateMachineInstr(v303, v331 + 144, (unsigned __int8 **)&v615, 0);
      if (!v615) {
        goto LABEL_445;
      }
      int v354 = *(unsigned __int8 *)v615;
      if ((v354 - 4) > 0x1E)
      {
        if ((v354 - 3) >= 0xFFFFFFFE) {
          v361 = v615;
        }
        else {
          v361 = 0;
        }
        if ((v354 - 3) < 0xFFFFFFFE)
        {
          if (v354 == 3) {
            *((void *)v615 + 1) = 0;
          }
          goto LABEL_445;
        }
        unint64_t v356 = (unint64_t)v361 + 8;
      }
      else if ((*((unsigned char *)v615 + 1) & 0x7F) != 2 && !*((_DWORD *)v615 + 3) {
             || (uint64_t v355 = *((void *)v615 + 2), (v355 & 4) == 0)
      }
             || (unint64_t v356 = v355 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_445:
        uint64_t v332 = *(void *)(v330 + 40);
        *((void *)v304 + 3) = v332;
        uint64_t v306 = *(void *)(v332 + 32);
        uint64_t v333 = *((unsigned int *)v304 + 10);
        if (v333)
        {
          uint64_t v343 = *((void *)v304 + 4);
          uint64_t v344 = *(void *)(v306 + 40);
          uint64_t v345 = 32 * v333;
          do
          {
            if (!*(unsigned char *)v343)
            {
              uint64_t v346 = *(unsigned int *)(v343 + 4);
              if ((int)v346 >= 0) {
                v347 = (uint64_t *)(*(void *)(v344 + 272) + 8 * v346);
              }
              else {
                v347 = (uint64_t *)(*(void *)(v344 + 24) + 16 * (v346 & 0x7FFFFFFF) + 8);
              }
              uint64_t v348 = *v347;
              if (*v347)
              {
                uint64_t v349 = *(void *)(v348 + 16);
                *(void *)(v348 + 16) = v343;
                *(void *)(v343 + 16) = v349;
                if (*(unsigned char *)(v343 + 3))
                {
                  *(void *)(v343 + 24) = v348;
                }
                else
                {
                  *(void *)(v343 + 24) = 0;
                  v347 = (uint64_t *)(v349 + 24);
                }
              }
              else
              {
                *(void *)(v343 + 16) = v343;
                *(void *)(v343 + 24) = 0;
              }
              uint64_t *v347 = v343;
            }
            v343 += 32;
            v345 -= 32;
          }
          while (v345);
        }
LABEL_446:
        uint64_t v334 = *(void *)(v306 + 728);
        if (v334) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v334 + 24))(v334, v304);
        }
        unint64_t v335 = *v598 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v304 = v335 | *(void *)v304 & 7;
        *((void *)v304 + 1) = v598;
        *(void *)(v335 + 8) = v304;
        unint64_t *v598 = *v598 & 7 | (unint64_t)v304;
        LODWORD(v631) = 16;
        *((void *)&v631 + 1) = 0;
        unsigned int v632 = v299;
        llvm::MachineInstr::addOperand(v304, v303, (const llvm::MachineOperand *)&v631);
LABEL_449:
        char v32 = 1;
        unsigned int v9 = v606;
        unint64_t v155 = v300;
        goto LABEL_220;
      }
      *(void *)&long long v631 = &v615;
      sub_1CC5FA668(v356 + 16, &v631);
      goto LABEL_445;
    }
LABEL_220:
    uint64_t v169 = v155;
    int v170 = *((_DWORD *)v155 + 40);
    uint64_t v171 = v624;
    if ((v627 & 0x3F) != 0) {
      *((void *)v623 + v624 - 1) &= ~(-1 << (v627 & 0x3F));
    }
    LODWORD(v172) = v171;
    int v627 = v170;
    unsigned int v173 = v170 + 63;
    if (v171 != (v170 + 63) >> 6)
    {
      uint64_t v174 = v173 >> 6;
      if (v171 > v174)
      {
        LODWORD(v624) = v173 >> 6;
        LODWORD(v172) = v173 >> 6;
      }
      else
      {
        if (v174 > HIDWORD(v624)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v174 != v171) {
          bzero((char *)v623 + 8 * v171, 8 * (v174 - v171));
        }
        LODWORD(v172) = v174;
        LODWORD(v624) = v174;
        int v170 = v627;
      }
    }
    char v175 = v170 & 0x3F;
    if ((v170 & 0x3F) != 0) {
      *((void *)v623 + v172 - 1) &= ~(-1 << v175);
    }
    uint64_t v176 = (uint64_t)&v158[176 * v157 + 24];
    uint64_t v177 = *((unsigned int *)v169 + 26);
    if (v177)
    {
      unsigned int v178 = (uint64_t *)*((void *)v169 + 12);
      unint64_t v179 = *(uint64_t **)v176;
      unint64_t v180 = (uint64_t *)v623;
      do
      {
        uint64_t v182 = *v178++;
        uint64_t v181 = v182;
        uint64_t v183 = *v179++;
        *v180++ = v181 & ~v183;
        --v177;
      }
      while (v177);
    }
    if ((v170 & 0x3F) != 0)
    {
      uint64_t v184 = (uint64_t *)v623;
      *((void *)v623 + v172 - 1) &= ~(-1 << v175);
      goto LABEL_237;
    }
    if (v170)
    {
      uint64_t v184 = (uint64_t *)v623;
LABEL_237:
      uint64_t v185 = 0;
      uint64_t v186 = (v170 - 1) & 0xFFFFFFC0;
      while (1)
      {
        uint64_t v188 = *v184++;
        uint64_t v187 = v188;
        unint64_t v189 = v186 + v185 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v170;
        unint64_t v190 = v189 & v187;
        if (v190) {
          break;
        }
        v185 -= 64;
        if (v186 + v185 == -64)
        {
LABEL_245:
          int v192 = *(_DWORD *)&v158[176 * v157 + 88];
          uint64_t v172 = v624;
          int v193 = v170 & 0x3F;
          if (!v193) {
            goto LABEL_246;
          }
          *((void *)v623 + v624 - 1) &= ~(-1 << v193);
          uint64_t v194 = v172;
          goto LABEL_247;
        }
      }
      int v191 = __clz(__rbit64(v190));
      if (v191 + 1 == v185) {
        goto LABEL_245;
      }
      unsigned int v258 = v191 - v185;
      while (1)
      {
        LODWORD(v631) = 11;
        *((void *)&v631 + 1) = 0;
        unsigned int v632 = v258;
        unsigned int v633 = 0;
        HIBYTE(v637) = 0;
        *(void *)&long long v636 = 0;
        long long v635 = 0uLL;
        BYTE8(v636) = 0;
        unsigned int v259 = llvm::MachineFunction::addFrameInst((uint64_t *)v583, &v631);
        if (SHIBYTE(v637) < 0) {
          operator delete(*((void **)&v636 + 1));
        }
        if ((void)v635)
        {
          *((void *)&v635 + 1) = v635;
          operator delete((void *)v635);
        }
        uint64_t v260 = *(void *)v604;
        uint64_t v261 = *(void *)(v595 + 8);
        int v262 = *(llvm::MachineFunction **)(*(void *)v604 + 32);
        v615 = v610;
        if (v610) {
          llvm::MetadataTracking::track((uint64_t)&v615, (unsigned __int8 *)v610, 2);
        }
        int v263 = llvm::MachineFunction::CreateMachineInstr(v262, v261 + 144, (unsigned __int8 **)&v615, 0);
        if (v615)
        {
          int v291 = *(unsigned __int8 *)v615;
          if ((v291 - 4) > 0x1E)
          {
            if ((v291 - 3) >= 0xFFFFFFFE) {
              uint64_t v294 = v615;
            }
            else {
              uint64_t v294 = 0;
            }
            if ((v291 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v293 = (unint64_t)v294 + 8;
LABEL_383:
              *(void *)&long long v631 = &v615;
              sub_1CC5FA668(v293 + 16, &v631);
              goto LABEL_339;
            }
            if (v291 == 3) {
              *((void *)v615 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v615 + 1) & 0x7F) == 2 || *((_DWORD *)v615 + 3))
          {
            uint64_t v292 = *((void *)v615 + 2);
            if ((v292 & 4) != 0)
            {
              unint64_t v293 = v292 & 0xFFFFFFFFFFFFFFF8;
              if (v293) {
                goto LABEL_383;
              }
            }
          }
        }
LABEL_339:
        uint64_t v264 = *(void *)(v260 + 40);
        *((void *)v263 + 3) = v264;
        uint64_t v265 = *(void *)(v264 + 32);
        uint64_t v266 = *((unsigned int *)v263 + 10);
        if (v266)
        {
          uint64_t v284 = *((void *)v263 + 4);
          uint64_t v285 = *(void *)(v265 + 40);
          uint64_t v286 = 32 * v266;
          do
          {
            if (!*(unsigned char *)v284)
            {
              uint64_t v287 = *(unsigned int *)(v284 + 4);
              if ((int)v287 >= 0) {
                v288 = (uint64_t *)(*(void *)(v285 + 272) + 8 * v287);
              }
              else {
                v288 = (uint64_t *)(*(void *)(v285 + 24) + 16 * (v287 & 0x7FFFFFFF) + 8);
              }
              uint64_t v289 = *v288;
              if (*v288)
              {
                uint64_t v290 = *(void *)(v289 + 16);
                *(void *)(v289 + 16) = v284;
                *(void *)(v284 + 16) = v290;
                if (*(unsigned char *)(v284 + 3))
                {
                  *(void *)(v284 + 24) = v289;
                }
                else
                {
                  *(void *)(v284 + 24) = 0;
                  v288 = (uint64_t *)(v290 + 24);
                }
              }
              else
              {
                *(void *)(v284 + 16) = v284;
                *(void *)(v284 + 24) = 0;
              }
              uint64_t *v288 = v284;
            }
            v284 += 32;
            v286 -= 32;
          }
          while (v286);
        }
        uint64_t v267 = *(void *)(v265 + 728);
        if (v267) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v267 + 24))(v267, v263);
        }
        unint64_t v268 = *v598 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v263 = v268 | *(void *)v263 & 7;
        *((void *)v263 + 1) = v598;
        *(void *)(v268 + 8) = v263;
        unint64_t *v598 = *v598 & 7 | (unint64_t)v263;
        LODWORD(v631) = 16;
        *((void *)&v631 + 1) = 0;
        unsigned int v632 = v259;
        llvm::MachineInstr::addOperand(v263, v262, (const llvm::MachineOperand *)&v631);
        unsigned int v269 = v258 + 1;
        LOBYTE(v170) = v627;
        if (v258 + 1 == v627)
        {
          char v32 = 1;
          LOBYTE(v170) = v258 + 1;
          unsigned int v9 = v606;
          goto LABEL_245;
        }
        unsigned int v270 = v269 >> 6;
        unsigned int v271 = v627 - 1;
        unsigned int v9 = v606;
        if (v269 >> 6 > (v627 - 1) >> 6)
        {
          char v32 = 1;
          goto LABEL_245;
        }
        uint64_t v272 = 0;
        uint64_t v273 = v271 >> 6;
        int v274 = v269 & 0x3F;
        BOOL v26 = v274 == 0;
        unint64_t v275 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v274;
        if (v26) {
          uint64_t v276 = -1;
        }
        else {
          uint64_t v276 = ~v275;
        }
        unint64_t v277 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v271;
        int v278 = v270 << 6;
        uint64_t v279 = v273 - v270;
        v280 = (char *)v623 + 8 * v270;
        while (1)
        {
          uint64_t v281 = v272 ? -1 : v276;
          unint64_t v282 = v279 == v272 ? v277 : -1;
          unint64_t v283 = v281 & v282 & *(void *)&v280[8 * v272];
          if (v283) {
            break;
          }
          v278 += 64;
          ++v272;
          char v32 = 1;
          if (v279 + 1 == v272) {
            goto LABEL_245;
          }
        }
        unsigned int v258 = __clz(__rbit64(v283)) + v278;
        char v32 = 1;
        if (v258 == -1) {
          goto LABEL_245;
        }
      }
    }
    int v192 = *(_DWORD *)&v158[176 * v157 + 88];
LABEL_246:
    uint64_t v194 = v172;
LABEL_247:
    int v627 = v192;
    unsigned int v195 = v192 + 63;
    if (v172 != (v192 + 63) >> 6)
    {
      uint64_t v196 = v195 >> 6;
      if (v172 > v196)
      {
        LODWORD(v624) = v195 >> 6;
        LODWORD(v172) = v195 >> 6;
      }
      else
      {
        if (v196 > HIDWORD(v624)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v196 != v194) {
          bzero((char *)v623 + 8 * v194, 8 * (v196 - v194));
        }
        LODWORD(v172) = v172 + v196 - v194;
        LODWORD(v624) = v172;
        int v192 = v627;
      }
    }
    char v197 = v192 & 0x3F;
    unint64_t v156 = (uint64_t *)v583;
    if ((v192 & 0x3F) != 0) {
      *((void *)v623 + v172 - 1) &= ~(-1 << v197);
    }
    uint64_t v198 = *(unsigned int *)(v176 + 8);
    if (v198)
    {
      int v199 = *(uint64_t **)v176;
      unsigned int v200 = (uint64_t *)*((void *)v169 + 12);
      BOOL v201 = (uint64_t *)v623;
      do
      {
        uint64_t v203 = *v199++;
        uint64_t v202 = v203;
        uint64_t v204 = *v200++;
        *v201++ = v202 & ~v204;
        --v198;
      }
      while (v198);
    }
    if ((v192 & 0x3F) != 0)
    {
      uint64_t v205 = -1 << v197;
      int v206 = (uint64_t *)v623;
      *((void *)v623 + v172 - 1) &= ~v205;
      uint64_t v207 = v598;
    }
    else
    {
      uint64_t v207 = v598;
      if (!v192) {
        goto LABEL_423;
      }
      int v206 = (uint64_t *)v623;
    }
    uint64_t v208 = 0;
    int v209 = v192 - 1;
    unint64_t v210 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v192;
    uint64_t v211 = v209 & 0xFFFFFFC0;
    do
    {
      uint64_t v213 = *v206++;
      uint64_t v212 = v213;
      if (v211 + v208) {
        uint64_t v214 = -1;
      }
      else {
        uint64_t v214 = v210;
      }
      unint64_t v215 = v214 & v212;
      if (v215)
      {
        int v216 = __clz(__rbit64(v215));
        if (v216 + 1 == v208) {
          break;
        }
        int v217 = v216 - v208;
        while (1)
        {
          uint64_t v218 = sub_1CC2566CC((uint64_t)v582, v217);
          if (*(unsigned char *)(v218 + 8)) {
            BOOL v219 = 1;
          }
          else {
            BOOL v219 = *(unsigned char *)(v218 + 16) == 0;
          }
          if (v219)
          {
            unsigned int v220 = *(_DWORD *)(v218 + 4);
            LODWORD(v631) = 13;
            *((void *)&v631 + 1) = 0;
            unsigned int v632 = v217;
            unsigned int v633 = v220;
            long long v635 = 0u;
            long long v636 = 0u;
            long long v637 = 0u;
          }
          else
          {
            unsigned int v221 = *(_DWORD *)(v218 + 12);
            LODWORD(v631) = 3;
            *((void *)&v631 + 1) = 0;
            unsigned int v632 = v217;
            unsigned int v633 = v221;
            HIBYTE(v637) = 0;
            *(void *)&long long v636 = 0;
            long long v635 = 0uLL;
            BYTE8(v636) = 0;
          }
          unsigned int v222 = llvm::MachineFunction::addFrameInst(v156, &v631);
          if (SHIBYTE(v637) < 0) {
            operator delete(*((void **)&v636 + 1));
          }
          if ((void)v635)
          {
            *((void *)&v635 + 1) = v635;
            operator delete((void *)v635);
          }
          uint64_t v223 = *(void *)v604;
          uint64_t v224 = *(void *)(v595 + 8);
          char v225 = *(llvm::MachineFunction **)(*(void *)v604 + 32);
          v615 = v610;
          if (v610) {
            llvm::MetadataTracking::track((uint64_t)&v615, (unsigned __int8 *)v610, 2);
          }
          int v226 = llvm::MachineFunction::CreateMachineInstr(v225, v224 + 144, (unsigned __int8 **)&v615, 0);
          if (v615)
          {
            int v254 = *(unsigned __int8 *)v615;
            if ((v254 - 4) > 0x1E)
            {
              if ((v254 - 3) >= 0xFFFFFFFE) {
                uint64_t v257 = v615;
              }
              else {
                uint64_t v257 = 0;
              }
              if ((v254 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v256 = (unint64_t)v257 + 8;
LABEL_328:
                *(void *)&long long v631 = &v615;
                sub_1CC5FA668(v256 + 16, &v631);
                uint64_t v207 = v598;
                goto LABEL_284;
              }
              uint64_t v207 = v598;
              if (v254 == 3) {
                *((void *)v615 + 1) = 0;
              }
            }
            else
            {
              uint64_t v207 = v598;
              if ((*((unsigned char *)v615 + 1) & 0x7F) == 2 || *((_DWORD *)v615 + 3))
              {
                uint64_t v255 = *((void *)v615 + 2);
                if ((v255 & 4) != 0)
                {
                  unint64_t v256 = v255 & 0xFFFFFFFFFFFFFFF8;
                  if (v256) {
                    goto LABEL_328;
                  }
                }
              }
            }
          }
LABEL_284:
          uint64_t v227 = *(void *)(v223 + 40);
          *((void *)v226 + 3) = v227;
          uint64_t v228 = *(void *)(v227 + 32);
          uint64_t v229 = *((unsigned int *)v226 + 10);
          unint64_t v156 = (uint64_t *)v583;
          if (v229)
          {
            uint64_t v247 = *((void *)v226 + 4);
            uint64_t v248 = *(void *)(v228 + 40);
            uint64_t v249 = 32 * v229;
            do
            {
              if (!*(unsigned char *)v247)
              {
                uint64_t v250 = *(unsigned int *)(v247 + 4);
                if ((int)v250 >= 0) {
                  int v251 = (uint64_t *)(*(void *)(v248 + 272) + 8 * v250);
                }
                else {
                  int v251 = (uint64_t *)(*(void *)(v248 + 24) + 16 * (v250 & 0x7FFFFFFF) + 8);
                }
                uint64_t v252 = *v251;
                if (*v251)
                {
                  uint64_t v253 = *(void *)(v252 + 16);
                  *(void *)(v252 + 16) = v247;
                  *(void *)(v247 + 16) = v253;
                  if (*(unsigned char *)(v247 + 3))
                  {
                    *(void *)(v247 + 24) = v252;
                  }
                  else
                  {
                    *(void *)(v247 + 24) = 0;
                    int v251 = (uint64_t *)(v253 + 24);
                  }
                }
                else
                {
                  *(void *)(v247 + 16) = v247;
                  *(void *)(v247 + 24) = 0;
                }
                *int v251 = v247;
              }
              v247 += 32;
              v249 -= 32;
            }
            while (v249);
          }
          uint64_t v230 = *(void *)(v228 + 728);
          if (v230) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v230 + 24))(v230, v226);
          }
          unint64_t v231 = *v207 & 0xFFFFFFFFFFFFFFF8;
          *(void *)int v226 = v231 | *(void *)v226 & 7;
          *((void *)v226 + 1) = v207;
          *(void *)(v231 + 8) = v226;
          *uint64_t v207 = *v207 & 7 | (unint64_t)v226;
          LODWORD(v631) = 16;
          *((void *)&v631 + 1) = 0;
          unsigned int v632 = v222;
          llvm::MachineInstr::addOperand(v226, v225, (const llvm::MachineOperand *)&v631);
          unsigned int v232 = v217 + 1;
          if (v217 + 1 == v627)
          {
            char v32 = 1;
            unsigned int v9 = v606;
            goto LABEL_423;
          }
          unsigned int v233 = v232 >> 6;
          unsigned int v234 = v627 - 1;
          unsigned int v9 = v606;
          if (v232 >> 6 > (v627 - 1) >> 6)
          {
            char v32 = 1;
            goto LABEL_423;
          }
          uint64_t v235 = 0;
          uint64_t v236 = v234 >> 6;
          int v237 = v232 & 0x3F;
          BOOL v26 = v237 == 0;
          unint64_t v238 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v237;
          if (v26) {
            uint64_t v239 = -1;
          }
          else {
            uint64_t v239 = ~v238;
          }
          unint64_t v240 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v234;
          unsigned int v241 = v233 << 6;
          uint64_t v242 = v236 - v233;
          unsigned int v243 = (char *)v623 + 8 * v233;
          while (1)
          {
            uint64_t v244 = v235 ? -1 : v239;
            unint64_t v245 = v242 == v235 ? v240 : -1;
            unint64_t v246 = v244 & v245 & *(void *)&v243[8 * v235];
            if (v246) {
              break;
            }
            v241 += 64;
            ++v235;
            char v32 = 1;
            if (v242 + 1 == v235) {
              goto LABEL_423;
            }
          }
          int v217 = __clz(__rbit64(v246)) + v241;
          char v32 = 1;
          if (v217 == -1) {
            goto LABEL_423;
          }
        }
      }
      v208 -= 64;
    }
    while (v211 + v208 != -64);
LABEL_423:
    if (v610)
    {
      int v327 = *(unsigned __int8 *)v610;
      if ((v327 - 4) > 0x1E)
      {
        if ((v327 - 3) >= 0xFFFFFFFE) {
          v328 = v610;
        }
        else {
          v328 = 0;
        }
        if ((v327 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v329 = (unint64_t)v328 + 8;
          goto LABEL_435;
        }
        if (v327 == 3) {
          *((void *)v610 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v610 + 1) & 0x7F) == 2 || *((_DWORD *)v610 + 3))
      {
        uint64_t v350 = *((void *)v610 + 2);
        if ((v350 & 4) != 0)
        {
          unint64_t v329 = v350 & 0xFFFFFFFFFFFFFFF8;
          if (v329)
          {
LABEL_435:
            *(void *)&long long v631 = &v610;
            sub_1CC5FA668(v329 + 16, &v631);
          }
        }
      }
    }
    unint64_t v155 = v604;
LABEL_428:
    uint64_t v154 = *(void *)(v154 + 8);
  }
  while ((char *)v154 != v584);
  if (v623 != v625) {
    free(v623);
  }
LABEL_533:
  sub_1CC256658((uint64_t)v9, *v9);
  return v32 & 1;
}

void sub_1CC256658(uint64_t a1, char *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 64;
    do
    {
      unint64_t v6 = (char *)*((void *)v5 - 2);
      if (v5 != v6) {
        free(v6);
      }
      size_t v7 = (char *)*((void *)v5 - 11);
      if (v5 - 72 != v7) {
        free(v7);
      }
      uint64_t v8 = v5 - 112;
      v5 -= 176;
    }
    while (v8 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1CC2566CC(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  if (sub_1CC256730(a1, a2, &v6)) {
    return v6;
  }
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    unsigned int v5 = 16;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 20 * v5;
}

uint64_t sub_1CC256730(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      size_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  size_t v7 = (_DWORD *)(v3 + 20 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        unint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      size_t v7 = (_DWORD *)(v3 + 20 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      size_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC2567E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    int v8 = (_DWORD *)(result + 8);
    unsigned int v9 = (_DWORD *)(result + 328);
  }
  else
  {
    int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    int v8 = *(_DWORD **)(result + 8);
    unsigned int v9 = &v8[5 * v7];
  }
  do
  {
    *int v8 = -1;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CC256730((uint64_t)v5, v10, &v12);
      int v11 = v12;
      *BOOL v12 = *(_DWORD *)a2;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 4);
      *v5 += 2;
    }
    a2 += 20;
  }
  return result;
}

uint64_t sub_1CC2568A4()
{
  v4.n128_u64[0] = (unint64_t)"Verify Call Frame Information instructions";
  v4.n128_u64[1] = 42;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCC9128, "verify-cfiinstrs", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9128, &dword_1CB82C000);
}

void sub_1CC256934(llvm *a1)
{
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC2569F4(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC91F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2609C90;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 144) = 128;
  *(void *)(a1 + 128) = operator new(0x2000uLL, (std::align_val_t)8uLL);
  __n128 v4 = (llvm::PassRegistry *)sub_1CC2600F4((void *)(a1 + 128));
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = a1 + 224;
  *(void *)(a1 + 200) = a1 + 224;
  *(void *)(a1 + 208) = 16;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = a1 + 408;
  *(void *)(a1 + 384) = a1 + 408;
  *(void *)(a1 + 392) = 16;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = a1 + 624;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 616) = 0x200000000;
  *(void *)(a1 + 640) = a1 + 648;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  if (byte_1EBCC9288) {
    char v5 = 1;
  }
  else {
    char v5 = a2;
  }
  *(unsigned char *)(a1 + 112) = v5;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v4);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC9200, memory_order_acquire) != -1)
  {
    v9[0] = sub_1CC256934;
    v9[1] = &PassRegistry;
    int v8 = v9;
    std::__call_once(&qword_1EBCC9200, &v8, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL matchIncrement(const llvm::Instruction *a1, llvm::Instruction **a2, llvm::Constant **a3)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  int v6 = *((unsigned __int8 *)a1 + 16);
  if (v6 != 5)
  {
    if (v6 != 41)
    {
      int v25 = 301;
      BOOL v26 = 0;
      uint64_t v27 = (uint64_t)a2;
      *(void *)&long long v28 = 1;
      *((void *)&v28 + 1) = a3;
      if (v6 != 92 || *((_DWORD *)a1 + 18) != 1 || **((_DWORD **)a1 + 8)) {
        goto LABEL_24;
      }
      if (!sub_1CC27FB38((uint64_t)&v25, *((void *)a1 - 4)))
      {
        int v6 = *((unsigned __int8 *)a1 + 16);
        goto LABEL_24;
      }
      return 1;
    }
    int v7 = (unsigned __int8 *)*((void *)a1 - 8);
    if (v7) {
      BOOL v8 = v7[16] >= 0x1Cu;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_24;
    }
    *a2 = (llvm::Instruction *)v7;
    unsigned int v9 = (unsigned __int8 *)*((void *)a1 - 4);
    if (!v9 || v9[16] > 0x14u) {
      goto LABEL_24;
    }
LABEL_18:
    *a3 = (llvm::Constant *)v9;
    return 1;
  }
  if (*((_WORD *)a1 + 9) == 13)
  {
    int v10 = (unsigned __int8 *)*((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
    if (v10 && v10[16] >= 0x1Cu)
    {
      *a2 = (llvm::Instruction *)v10;
      unsigned int v9 = (unsigned __int8 *)((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
      if (v9) {
        goto LABEL_18;
      }
    }
  }
LABEL_24:
  if (v6 == 5)
  {
    if (*((_WORD *)a1 + 9) != 15) {
      return 0;
    }
    unint64_t v14 = (unsigned __int8 *)*((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
    if (!v14 || v14[16] < 0x1Cu) {
      return 0;
    }
    *a2 = (llvm::Instruction *)v14;
    unsigned int v13 = (unsigned __int8 *)((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
    if (!v13) {
      return 0;
    }
LABEL_38:
    *a3 = (llvm::Constant *)v13;
LABEL_39:
    unsigned int v16 = *(llvm::ConstantFP **)v13;
    if ((*(_DWORD *)(*(void *)v13 + 8) & 0xFE) == 0x12) {
      unsigned int v17 = *(unsigned __int8 *)(**((void **)v16 + 2) + 8);
    }
    else {
      unsigned int v17 = *(_DWORD *)(*(void *)v13 + 8);
    }
    if (v17 <= 6) {
      Zero = llvm::ConstantFP::getZero(v16, (llvm::Type *)1, (const llvm::APFloat *)a3);
    }
    else {
      Zero = llvm::Constant::getNullValue(v16, (llvm::Type *)a2, (const llvm::APFloat *)a3);
    }
    uint64_t v20 = Zero;
    int v21 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v13, v19);
    if (!v21)
    {
      long long v23 = *(void ***)v20;
      if (*(void *)v20)
      {
        v31[0] = v20;
        v31[1] = v13;
        uint64_t v24 = **v23 + 1512;
        int v25 = 15;
        BOOL v26 = v31;
        uint64_t v27 = 2;
        long long v28 = 0u;
        long long v29 = 0u;
        uint64_t v30 = 0;
        int v21 = (llvm::Constant *)sub_1CC56C20C(v24, (uint64_t)v23, (unsigned __int8 *)&v25);
      }
      else
      {
        int v21 = 0;
      }
    }
    *a3 = v21;
    return 1;
  }
  if (v6 == 43)
  {
    BOOL v12 = (unsigned __int8 *)*((void *)a1 - 8);
    if (!v12) {
      return 0;
    }
    if (v12[16] < 0x1Cu) {
      return 0;
    }
    *a2 = (llvm::Instruction *)v12;
    unsigned int v13 = (unsigned __int8 *)*((void *)a1 - 4);
    if (!v13 || v13[16] > 0x14u) {
      return 0;
    }
    goto LABEL_38;
  }
  int v25 = 312;
  BOOL v26 = 0;
  uint64_t v27 = (uint64_t)a2;
  *(void *)&long long v28 = 1;
  *((void *)&v28 + 1) = a3;
  if (v6 != 92 || *((_DWORD *)a1 + 18) != 1 || **((_DWORD **)a1 + 8)) {
    return 0;
  }
  BOOL result = sub_1CC27FB38((uint64_t)&v25, *((void *)a1 - 4));
  if (result)
  {
    unsigned int v13 = (unsigned __int8 *)*a3;
    goto LABEL_39;
  }
  return result;
}

llvm *sub_1CC256E54(llvm *a1)
{
  char v2 = llvm::dbgs(a1);
  uint64_t v3 = v2;
  __n128 v4 = (unsigned char *)*((void *)v2 + 4);
  if (*((unsigned char **)v2 + 3) == v4)
  {
    char v2 = llvm::raw_ostream::write(v2, "[", 1uLL);
    unint64_t v5 = *((void *)v3 + 4);
  }
  else
  {
    *__n128 v4 = 91;
    unint64_t v5 = *((void *)v2 + 4) + 1;
    *((void *)v2 + 4) = v5;
  }
  if (*((unsigned char *)a1 + 56))
  {
    if (*((void *)v3 + 3) - v5 > 8)
    {
      *(unsigned char *)(v5 + 8) = 32;
      *(void *)unint64_t v5 = *(void *)"inbounds ";
      unint64_t v5 = *((void *)v3 + 4) + 9;
      *((void *)v3 + 4) = v5;
    }
    else
    {
      char v2 = llvm::raw_ostream::write(v3, "inbounds ", 9uLL);
      unint64_t v5 = *((void *)v3 + 4);
    }
  }
  int v6 = *(llvm::Value **)a1;
  BOOL v7 = *(void *)a1 != 0;
  if (*(void *)a1)
  {
    if (*((void *)v3 + 3) - v5 > 2)
    {
      *(unsigned char *)(v5 + 2) = 58;
      *(_WORD *)unint64_t v5 = 22087;
      *((void *)v3 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v3, "GV:", 3uLL);
    }
    char v2 = (llvm::raw_ostream *)llvm::Value::printAsOperand(*(llvm::Value **)a1, v3, 0, 0);
    unint64_t v5 = *((void *)v3 + 4);
  }
  if (*((void *)a1 + 1))
  {
    if (v6) {
      size_t v8 = 3;
    }
    else {
      size_t v8 = 0;
    }
    if (v8 <= *((void *)v3 + 3) - v5)
    {
      if (v6)
      {
        *(unsigned char *)(v5 + 2) = 32;
        *(_WORD *)unint64_t v5 = 11040;
        *((void *)v3 + 4) += 3;
      }
    }
    else
    {
      if (v6) {
        unsigned int v9 = " + ";
      }
      else {
        unsigned int v9 = "";
      }
      llvm::raw_ostream::write(v3, v9, v8);
    }
    char v2 = llvm::raw_ostream::operator<<(v3, *((void *)a1 + 1));
    unint64_t v5 = *((void *)v3 + 4);
    BOOL v7 = 1;
  }
  if (*((void *)a1 + 4))
  {
    if (v7) {
      size_t v10 = 3;
    }
    else {
      size_t v10 = 0;
    }
    if (v10 <= *((void *)v3 + 3) - v5)
    {
      if (v7)
      {
        *(unsigned char *)(v5 + 2) = 32;
        *(_WORD *)unint64_t v5 = 11040;
        unint64_t v5 = *((void *)v3 + 4) + 3;
        *((void *)v3 + 4) = v5;
      }
    }
    else
    {
      if (v7) {
        int v11 = " + ";
      }
      else {
        int v11 = "";
      }
      llvm::raw_ostream::write(v3, v11, v10);
      unint64_t v5 = *((void *)v3 + 4);
    }
    if (*((void *)v3 + 3) - v5 > 4)
    {
      *(unsigned char *)(v5 + 4) = 58;
      *(_DWORD *)unint64_t v5 = 1702060354;
      *((void *)v3 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v3, "Base:", 5uLL);
    }
    char v2 = (llvm::raw_ostream *)llvm::Value::printAsOperand(*((llvm::Value **)a1 + 4), v3, 0, 0);
    unint64_t v5 = *((void *)v3 + 4);
    BOOL v7 = 1;
  }
  if (*((void *)a1 + 3))
  {
    if (v7) {
      size_t v12 = 3;
    }
    else {
      size_t v12 = 0;
    }
    if (v12 <= *((void *)v3 + 3) - v5)
    {
      if (v7)
      {
        *(unsigned char *)(v5 + 2) = 32;
        *(_WORD *)unint64_t v5 = 11040;
        *((void *)v3 + 4) += 3;
      }
    }
    else
    {
      if (v7) {
        unsigned int v13 = " + ";
      }
      else {
        unsigned int v13 = "";
      }
      llvm::raw_ostream::write(v3, v13, v12);
    }
    llvm::raw_ostream::operator<<(v3, *((void *)a1 + 3));
    unint64_t v14 = (unsigned char *)*((void *)v3 + 4);
    if (*((unsigned char **)v3 + 3) == v14)
    {
      llvm::raw_ostream::write(v3, "*", 1uLL);
    }
    else
    {
      *unint64_t v14 = 42;
      ++*((void *)v3 + 4);
    }
    char v2 = (llvm::raw_ostream *)llvm::Value::printAsOperand(*((llvm::Value **)a1 + 5), v3, 0, 0);
    unint64_t v5 = *((void *)v3 + 4);
  }
  if (v5 >= *((void *)v3 + 3))
  {
    char v2 = llvm::raw_ostream::write(v3, 93);
  }
  else
  {
    *((void *)v3 + 4) = v5 + 1;
    *(unsigned char *)unint64_t v5 = 93;
  }
  BOOL result = llvm::dbgs(v2);
  unsigned int v16 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v16 >= *((void *)result + 3))
  {
    return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = v16 + 1;
    *unsigned int v16 = 10;
  }
  return result;
}

void sub_1CC257204()
{
}

void sub_1CC257244(uint64_t a1)
{
  *(void *)a1 = &unk_1F2609C90;
  uint64_t v2 = *(void *)(a1 + 728);
  *(void *)(a1 + 728) = 0;
  if (v2) {
    sub_1CBF8FF20(a1 + 728, v2);
  }
  sub_1CD50E230(a1 + 688);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 688), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 664), 8);
  sub_1CBC0FD34(*(void **)(a1 + 648));
  uint64_t v3 = *(void **)(a1 + 608);
  if (v3 != (void *)(a1 + 624)) {
    free(v3);
  }
  sub_1CD50E298(a1 + 560);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 536), 8);
  __n128 v4 = *(void **)(a1 + 384);
  if (v4 != *(void **)(a1 + 376)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 352), 8);
  unint64_t v5 = *(void **)(a1 + 200);
  if (v5 != *(void **)(a1 + 192)) {
    free(v5);
  }
  if (*(unsigned char *)(a1 + 176))
  {
    sub_1CC009394(a1 + 152);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 152), 8);
    *(unsigned char *)(a1 + 176) = 0;
  }
  sub_1CC260E78((void *)(a1 + 128));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 128), 8);
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v6)
  {
    uint64_t v7 = sub_1CBF8AF10(v6);
    MEMORY[0x1D25D9CE0](v7, 0x1060C40D526B124);
  }
  size_t v8 = *(uint64_t **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v8)
  {
    uint64_t v9 = *v8;
    *size_t v8 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    MEMORY[0x1D25D9CE0](v8, 0x20C4093837F09);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC2573D8(uint64_t a1)
{
  sub_1CC257244(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC257410()
{
  return "CodeGen Prepare";
}

void sub_1CC257420(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CC2574AC(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    unint64_t v37 = (Function *)a2;
    uint64_t v4 = *(void *)(a1 + 192);
    *(void *)(a1 + 720) = *(void *)(a2 + 40) + 272;
    if (*(void *)(a1 + 200) != v4)
    {
      uint64_t v32 = *(unsigned int *)(a1 + 208);
      if (v32 >= 0x21 && 4 * (*(_DWORD *)(a1 + 212) - *(_DWORD *)(a1 + 216)) < v32)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 192));
LABEL_5:
        unint64_t v5 = (void **)(a1 + 352);
        int v6 = *(_DWORD *)(a1 + 360);
        if (v6)
        {
          unsigned int v7 = *(_DWORD *)(a1 + 368);
          if (v7 > 4 * v6 && v7 >= 0x41)
          {
            size_t v8 = (_DWORD *)(a1 + 368);
            int v9 = 1 << (33 - __clz(v6 - 1));
            if (v9 <= 64) {
              int v10 = 64;
            }
            else {
              int v10 = v9;
            }
LABEL_14:
            int v11 = *v5;
            if (v10 == v7)
            {
              *(void *)(a1 + 360) = 0;
              uint64_t v12 = 16 * v7;
              do
              {
                *int v11 = -4096;
                v11 += 2;
                v12 -= 16;
              }
              while (v12);
            }
            else
            {
              MEMORY[0x1D25D9CD0](v11, 8);
              if (v10)
              {
                unint64_t v27 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
                unint64_t v28 = v27 | (v27 >> 2) | ((v27 | (v27 >> 2)) >> 4);
                LODWORD(v28) = (((v28 | (v28 >> 8)) >> 16) | v28 | (v28 >> 8)) + 1;
                *(_DWORD *)(a1 + 368) = v28;
                long long v29 = operator new(16 * v28, (std::align_val_t)8uLL);
                *(void *)(a1 + 352) = v29;
                *(void *)(a1 + 360) = 0;
                uint64_t v30 = *(unsigned int *)(a1 + 368);
                if (v30)
                {
                  uint64_t v31 = 16 * v30;
                  do
                  {
                    *long long v29 = -4096;
                    v29 += 2;
                    v31 -= 16;
                  }
                  while (v31);
                }
              }
              else
              {
                *size_t v8 = 0;
                *unint64_t v5 = 0;
                *(void *)(a1 + 360) = 0;
              }
            }
            goto LABEL_22;
          }
        }
        else
        {
          if (!*(_DWORD *)(a1 + 364)) {
            goto LABEL_22;
          }
          unsigned int v7 = *(_DWORD *)(a1 + 368);
          if (v7 > 0x40)
          {
            int v10 = 0;
            size_t v8 = (_DWORD *)(a1 + 368);
            goto LABEL_14;
          }
        }
        if (v7)
        {
          unsigned int v13 = *v5;
          uint64_t v14 = 16 * v7;
          do
          {
            *unsigned int v13 = -4096;
            v13 += 2;
            v14 -= 16;
          }
          while (v14);
        }
        *(void *)(a1 + 360) = 0;
LABEL_22:
        unint64_t v15 = *(uint64_t **)(a1 + 8);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        if (v16 == v17)
        {
LABEL_25:
          uint64_t v18 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v16 != &llvm::TargetPassConfig::ID)
          {
            v16 += 16;
            if (v16 == v17) {
              goto LABEL_25;
            }
          }
          uint64_t v18 = *(void *)(v16 + 8);
        }
        uint64_t v19 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::TargetPassConfig::ID)+ 112);
        *(void *)(a1 + 32) = v19;
        uint64_t v20 = (*(uint64_t (**)(uint64_t, Function *))(*(void *)v19 + 16))(v19, v37);
        *(void *)(a1 + 40) = v20;
        *(void *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 120))(v20);
        *(void *)(a1 + 56) = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 176))(*(void *)(a1 + 40));
        int v21 = *(uint64_t **)(a1 + 8);
        uint64_t v22 = *v21;
        uint64_t v23 = v21[1];
        if (v22 == v23)
        {
LABEL_30:
          uint64_t v24 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v22 != &llvm::TargetLibraryInfoWrapperPass::ID)
          {
            v22 += 16;
            if (v22 == v23) {
              goto LABEL_30;
            }
          }
          uint64_t v24 = *(void *)(v22 + 8);
        }
        uint64_t v25 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v24 + 96))(v24, &llvm::TargetLibraryInfoWrapperPass::ID);
        uint64_t v56 = 0;
        char v55 = 0;
        LODWORD(v57) = 0;
        uint64_t v59 = 0;
        uint64_t v58 = 0;
        int v60 = 0;
        uint64_t v62 = 0;
        uint64_t v61 = 0;
        int v63 = 0;
        uint64_t v26 = v25 + 32;
        if (!*(unsigned char *)(v25 + 232))
        {
          int v34 = (void *)(*((void *)v37 + 5) + 216);
          __int16 v54 = 260;
          int v53 = v34;
          llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v53);
          uint64_t v48 = 0;
          uint64_t v47 = 0;
          int v49 = 0;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          *(void *)&long long v35 = -1;
          *((void *)&v35 + 1) = -1;
          long long v40 = v35;
          long long v41 = v35;
          long long v42 = v35;
          long long v43 = v35;
          long long v44 = v35;
          long long v45 = v35;
          *(_OWORD *)int v46 = v35;
          *(void *)&v46[13] = -1;
          sub_1CC153974((uint64_t)&v40, (int *)&__p);
          sub_1CD4D04B8(v26, (uint64_t)&v40);
          sub_1CD4CFA4C((uint64_t *)&v40);
          if (SHIBYTE(v39) < 0) {
            operator delete(__p);
          }
        }
        sub_1CC1569E8(&v40, v26);
      }
      memset(*(void **)(a1 + 200), 255, 8 * v32);
    }
    *(_DWORD *)(a1 + 212) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    goto LABEL_5;
  }
  return 0;
}

void **sub_1CC260060(void **result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    *BOOL result = operator new((unint64_t)v4 << 6, (std::align_val_t)8uLL);
    return (void **)sub_1CC2600F4(v2);
  }
  else
  {
    *BOOL result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void *sub_1CC2600F4(void *result)
{
  result[1] = 0;
  v10[0] = 2;
  v10[1] = 0;
  uint64_t v11 = -4096;
  uint64_t v12 = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    BOOL result = v10;
    uint64_t v3 = *v2;
    uint64_t v4 = v1 << 6;
    unint64_t v5 = (void *)(*v2 + 16);
    do
    {
      uint64_t v6 = v10[0] & 6;
      *(v5 - 1) = v6;
      *unint64_t v5 = 0;
      uint64_t v7 = v11;
      v5[1] = v11;
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        *unint64_t v5 = *(void *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v9 = v5 - 1;
        *(v5 - 1) = v9 | v6;
        if (*v5) {
          *(void *)*unint64_t v5 = *(void *)*v5 & 7 | (v3 + 16);
        }
      }
      *(v5 - 2) = &off_1F2609D30;
      void v5[2] = v12;
      v5 += 8;
      v3 += 64;
      v4 -= 64;
    }
    while (v4);
    if (v11 != -8192 && v11 != -4096)
    {
      if (v11) {
        return llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
  }
  return result;
}

uint64_t sub_1CC260220(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  unint64_t v55 = v1 & 6;
  uint64_t v56 = 0;
  uint64_t v2 = *(int32x2_t *****)(result + 24);
  uint64_t v57 = v2;
  if (v2 != (int32x2_t ****)-8192 && v2 != (int32x2_t ****)-4096 && v2 != 0)
  {
    uint64_t v56 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v55;
    unint64_t v55 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v56) {
      *uint64_t v56 = *v56 & 7 | (unint64_t)&v56;
    }
  }
  uint64_t v4 = *(int32x2_t **)(result + 32);
  uint64_t v58 = v4;
  unint64_t v5 = v57;
  __int32 v6 = v4[2].i32[0];
  if (v6)
  {
    __int32 v7 = v6 - 1;
    uint64_t v8 = ((v57 >> 4) ^ (v57 >> 9)) & (v6 - 1);
    unint64_t v9 = (void *)(*(void *)v4 + (v8 << 6));
    int v10 = (int32x2_t ****)v9[3];
    if (v10 == v57)
    {
LABEL_10:
      uint64_t v11 = v9[7];
      uint64_t v12 = (int32x2_t *)&unk_1CD91C000;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        unint64_t v14 = v9[5] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v14 = v9[6];
        unint64_t v15 = (unint64_t *)v9[6];
        if (v15)
        {
          *unint64_t v15 = *v15 & 7 | v14;
        }
        else
        {
          uint64_t v16 = v9[7];
          uint64_t v17 = ***(int32x2_t ****)v16;
          unint64_t v18 = (unint64_t)v17[303];
          if (v18 <= v14)
          {
            uint64_t v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v14)
            {
              unsigned int v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
              uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
              uint64_t v23 = *v22;
              if (v16 == *v22)
              {
LABEL_23:
                *uint64_t v22 = -8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v16 = v9[7];
              }
              else
              {
                int v24 = 1;
                while (v23 != -4096)
                {
                  int v25 = v21 + v24++;
                  uint64_t v21 = v25 & v20;
                  uint64_t v23 = *(void *)(v18 + 16 * v21);
                  if (v16 == v23)
                  {
                    uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
                    goto LABEL_23;
                  }
                }
              }
              *(unsigned char *)(v16 + 17) &= ~1u;
            }
          }
        }
        unint64_t v5 = (int32x2_t ****)v9[3];
      }
      v60[0] = 2;
      v60[1] = 0;
      uint64_t v28 = -8192;
      uint64_t v61 = -8192;
      uint64_t v62 = 0;
      uint64_t v59 = &off_1F2609D30;
      if (v5 != (int32x2_t ****)-8192)
      {
        if (v5 != (int32x2_t ****)-4096 && v5 != 0)
        {
          unint64_t v44 = v9[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v44 = v9[2];
          long long v45 = (unint64_t *)v9[2];
          if (v45)
          {
            *long long v45 = *v45 & 7 | v44;
          }
          else
          {
            uint64_t v46 = v9[3];
            uint64_t v47 = ***(int32x2_t ****)v46;
            unint64_t v48 = (unint64_t)v47[303];
            if (v48 <= v44)
            {
              uint64_t v49 = v47[305].u32[0];
              if (v48 + 16 * v49 > v44)
              {
                unsigned int v50 = v49 - 1;
                LODWORD(v51) = v50 & ((v46 >> 4) ^ (v46 >> 9));
                BOOL result = v48 + 16 * v51;
                uint64_t v52 = *(void *)result;
                if (v46 == *(void *)result)
                {
LABEL_70:
                  *(void *)BOOL result = -8192;
                  v47[304] = vadd_s32(v47[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v46 = v9[3];
                }
                else
                {
                  BOOL result = 1;
                  while (v52 != -4096)
                  {
                    int v53 = v51 + result;
                    BOOL result = (result + 1);
                    uint64_t v51 = v53 & v50;
                    uint64_t v52 = *(void *)(v48 + 16 * v51);
                    if (v46 == v52)
                    {
                      BOOL result = v48 + 16 * v51;
                      goto LABEL_70;
                    }
                  }
                }
                *(unsigned char *)(v46 + 17) &= ~1u;
              }
            }
          }
          uint64_t v28 = v61;
        }
        void v9[3] = v28;
        if (v28 != -4096 && v28 != -8192 && v28 != 0)
        {
          uint64_t v31 = v60[0];
          void v9[2] = *(void *)(v60[0] & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v31 & 0xFFFFFFFFFFFFFFF8) = v9 + 1;
          v9[1] = v31 & 0xFFFFFFFFFFFFFFF8 | v9[1] & 7;
          uint64_t v32 = (unint64_t *)v9[2];
          if (v32) {
            *uint64_t v32 = *v32 & 7 | (unint64_t)(v9 + 2);
          }
          uint64_t v28 = v61;
        }
      }
      v9[4] = v62;
      if (v28 != -8192 && v28 != -4096 && v28)
      {
        __int16 v54 = v4;
        BOOL result = (uint64_t)llvm::ValueHandleBase::RemoveFromUseList(v60);
        uint64_t v12 = (int32x2_t *)&unk_1CD91C000;
        uint64_t v4 = v54;
      }
      v4[1] = vadd_s32(v4[1], v12[12]);
      unint64_t v5 = v57;
    }
    else
    {
      int v26 = 1;
      while (v10 != (int32x2_t ****)-4096)
      {
        int v27 = v8 + v26++;
        uint64_t v8 = v27 & v7;
        unint64_t v9 = (void *)(*(void *)v4 + (v8 << 6));
        int v10 = (int32x2_t ****)v9[3];
        if (v10 == v57) {
          goto LABEL_10;
        }
      }
    }
  }
  if (v5 != (int32x2_t ****)-8192 && v5 != (int32x2_t ****)-4096 && v5)
  {
    unint64_t v33 = v55 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
    if (v56)
    {
      *uint64_t v56 = *v56 & 7 | v33;
    }
    else
    {
      int v34 = v57;
      long long v35 = ***v57;
      unint64_t v36 = (unint64_t)v35[303];
      if (v36 <= v33)
      {
        uint64_t v37 = v35[305].u32[0];
        if (v36 + 16 * v37 > v33)
        {
          unsigned int v38 = v37 - 1;
          LODWORD(v39) = v38 & ((v57 >> 4) ^ (v57 >> 9));
          long long v40 = (int32x2_t *****)(v36 + 16 * v39);
          long long v41 = *v40;
          if (v57 == *v40)
          {
LABEL_58:
            *long long v40 = (int32x2_t ****)-8192;
            v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
            int v34 = v57;
          }
          else
          {
            int v42 = 1;
            while (v41 != (int32x2_t ****)-4096)
            {
              int v43 = v39 + v42++;
              uint64_t v39 = v43 & v38;
              long long v41 = *(int32x2_t *****)(v36 + 16 * v39);
              if (v57 == v41)
              {
                long long v40 = (int32x2_t *****)(v36 + 16 * v39);
                goto LABEL_58;
              }
            }
          }
          *((unsigned char *)v34 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC2606A0(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 6);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 6);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v7 = 1;
        if (v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

uint64_t sub_1CC260734(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3 = a1[2];
  unsigned int v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = a1;
  sub_1CD50E10C((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CC2606A0(*(void *)v7, v7[4], *(void *)(a2 + 24), &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*(void *)(a3 + 24) != -4096) {
    --a1[3];
  }
  return a3;
}

void *sub_1CC2607F4(uint64_t a1, void *a2, void *a3)
{
  BOOL result = sub_1CC2600F4((void *)a1);
  v62[0] = 2;
  v62[1] = 0;
  uint64_t v63 = -4096;
  uint64_t v64 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = &off_1F2609D30;
  v58[0] = 2;
  v58[1] = 0;
  uint64_t v59 = -8192;
  if (a2 != a3)
  {
    BOOL result = v58;
    int32x2_t v7 = (int32x2_t)0x1FFFFFFFFLL;
    do
    {
      uint64_t v8 = a2[3];
      if (v8 != v63 && v8 != v59)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        uint64_t v11 = v10 & ((v8 >> 4) ^ (v8 >> 9));
        int v12 = (void *)(*(void *)a1 + (v11 << 6));
        uint64_t v13 = v12[3];
        if (v8 != v13)
        {
          unint64_t v33 = 0;
          int v34 = 1;
          while (v13 != -4096)
          {
            if (v33) {
              BOOL v52 = 0;
            }
            else {
              BOOL v52 = v13 == -8192;
            }
            if (v52) {
              unint64_t v33 = v12;
            }
            int v53 = v11 + v34++;
            uint64_t v11 = v53 & v10;
            int v12 = (void *)(*(void *)a1 + (v11 << 6));
            uint64_t v13 = v12[3];
            if (v8 == v13) {
              goto LABEL_8;
            }
          }
          if (v33) {
            int v12 = v33;
          }
          uint64_t v35 = v12[3];
          if (v35 != v8)
          {
            BOOL v36 = v35 == -4096 || v35 == 0;
            if (!v36 && v35 != -8192)
            {
              unint64_t v40 = v12[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v40 = v12[2];
              long long v41 = (unint64_t *)v12[2];
              if (v41)
              {
                unint64_t *v41 = *v41 & 7 | v40;
              }
              else
              {
                uint64_t v42 = v12[3];
                int v43 = ***(int32x2_t ****)v42;
                unint64_t v44 = (unint64_t)v43[303];
                if (v44 <= v40)
                {
                  uint64_t v45 = v43[305].u32[0];
                  if (v44 + 16 * v45 > v40)
                  {
                    unsigned int v46 = v45 - 1;
                    LODWORD(v47) = v46 & ((v42 >> 4) ^ (v42 >> 9));
                    unint64_t v48 = (uint64_t *)(v44 + 16 * v47);
                    uint64_t v49 = *v48;
                    if (v42 == *v48)
                    {
LABEL_54:
                      *unint64_t v48 = -8192;
                      v43[304] = vadd_s32(v43[304], v7);
                      uint64_t v42 = v12[3];
                    }
                    else
                    {
                      int v50 = 1;
                      while (v49 != -4096)
                      {
                        int v51 = v47 + v50++;
                        uint64_t v47 = v51 & v46;
                        uint64_t v49 = *(void *)(v44 + 16 * v47);
                        if (v42 == v49)
                        {
                          unint64_t v48 = (uint64_t *)(v44 + 16 * v47);
                          goto LABEL_54;
                        }
                      }
                    }
                    *(unsigned char *)(v42 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v8 = a2[3];
            }
            void v12[3] = v8;
            if (v8 != -4096 && v8 != -8192 && v8 != 0)
            {
              uint64_t v38 = a2[1];
              v12[2] = *(void *)(v38 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v38 & 0xFFFFFFFFFFFFFFF8) = v12 + 1;
              v12[1] = v38 & 0xFFFFFFFFFFFFFFF8 | v12[1] & 7;
              uint64_t v39 = (unint64_t *)v12[2];
              if (v39) {
                *uint64_t v39 = *v39 & 7 | (unint64_t)(v12 + 2);
              }
            }
          }
        }
LABEL_8:
        unint64_t v14 = a2[4];
        v12[5] = 6;
        unint64_t v15 = v12 + 5;
        *(v15 - 1) = v14;
        v15[1] = 0;
        unint64_t v16 = (unint64_t)(v15 + 1);
        unint64_t v17 = a2[7];
        _OWORD v15[2] = v17;
        if (v17)
        {
          if (v17 != -8192 && v17 != -4096)
          {
            unint64_t v55 = a2[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v16 = *(void *)v55;
            *(void *)unint64_t v55 = v15;
            *unint64_t v15 = v55 | 6;
            if (*(void *)v16) {
              **(void **)unint64_t v16 = **(void **)v16 & 7 | v16;
            }
          }
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v18 = a2[7];
        if (v18 && v18 != -8192 && v18 != -4096)
        {
          uint64_t v57 = result;
          int32x2_t v56 = v7;
          llvm::ValueHandleBase::RemoveFromUseList(a2 + 5);
          int32x2_t v7 = v56;
          BOOL result = v57;
        }
      }
      uint64_t v19 = a2[3];
      if (v19 != -4096 && v19 != -8192 && v19 != 0)
      {
        unint64_t v21 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v21 = a2[2];
        uint64_t v22 = (unint64_t *)a2[2];
        if (v22)
        {
          *uint64_t v22 = *v22 & 7 | v21;
        }
        else
        {
          uint64_t v23 = a2[3];
          int v24 = ***(int32x2_t ****)v23;
          unint64_t v25 = (unint64_t)v24[303];
          if (v25 <= v21)
          {
            uint64_t v26 = v24[305].u32[0];
            if (v25 + 16 * v26 > v21)
            {
              unsigned int v27 = v26 - 1;
              LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
              long long v29 = (uint64_t *)(v25 + 16 * v28);
              uint64_t v30 = *v29;
              if (v23 == *v29)
              {
LABEL_23:
                *long long v29 = -8192;
                v24[304] = vadd_s32(v24[304], v7);
                uint64_t v23 = a2[3];
              }
              else
              {
                int v31 = 1;
                while (v30 != -4096)
                {
                  int v32 = v28 + v31++;
                  uint64_t v28 = v32 & v27;
                  uint64_t v30 = *(void *)(v25 + 16 * v28);
                  if (v23 == v30)
                  {
                    long long v29 = (uint64_t *)(v25 + 16 * v28);
                    goto LABEL_23;
                  }
                }
              }
              *(unsigned char *)(v23 + 17) &= ~1u;
            }
          }
        }
      }
      a2 += 8;
    }
    while (a2 != a3);
    if (v59 != -8192 && v59 != -4096 && v59 != 0) {
      BOOL result = llvm::ValueHandleBase::RemoveFromUseList(result);
    }
  }
  if (v63 != -4096 && v63 != -8192)
  {
    if (v63) {
      return llvm::ValueHandleBase::RemoveFromUseList(v62);
    }
  }
  return result;
}

void *sub_1CC260C54(void *result, void *a2, void *a3)
{
  uint64_t v3 = a2[1] & 6;
  result[1] = v3;
  unsigned int v4 = result + 1;
  result[2] = 0;
  unint64_t v5 = (unint64_t)(result + 2);
  uint64_t v6 = a2[3];
  result[3] = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    unint64_t v8 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v5 = *(void *)v8;
    *(void *)unint64_t v8 = v4;
    *unsigned int v4 = v8 | v3;
    if (*(void *)v5) {
      **(void **)unint64_t v5 = **(void **)v5 & 7 | v5;
    }
  }
  *BOOL result = &off_1F2609D30;
  result[4] = a2[4];
  result[5] = 6;
  uint64_t v9 = result + 5;
  result[6] = 0;
  unint64_t v10 = (unint64_t)(result + 6);
  uint64_t v11 = a3[2];
  result[7] = v11;
  if (v11 != -8192 && v11 != -4096 && v11)
  {
    unint64_t v12 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v12;
    *(void *)unint64_t v12 = v9;
    *uint64_t v9 = v12 | 6;
    if (*(void *)v10) {
      **(void **)unint64_t v10 = **(void **)v10 & 7 | v10;
    }
  }
  return result;
}

_DWORD *sub_1CC260D48(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(152 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    unsigned int v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 152 * v5;
      do
      {
        *(void *)BOOL result = -4096;
        result += 38;
        v6 -= 152;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC260DE4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v4 - 66);
        if (v4 - 512 != v6) {
          free(v6);
        }
        v4 -= 536;
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1CC260E78(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v13 = 2;
    uint64_t v14 = 0;
    uint64_t v15 = -4096;
    uint64_t v16 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = &off_1F2609D30;
    uint64_t v8 = 2;
    uint64_t v9 = 0;
    uint64_t v10 = -8192;
    uint64_t v2 = v1 << 6;
    unint64_t v3 = (void *)(*result + 40);
    do
    {
      uint64_t v4 = *(v3 - 2);
      if (v4 != v15 && v4 != v10)
      {
        uint64_t v7 = v3[2];
        if (v7)
        {
          if (v7 != -8192 && v7 != -4096)
          {
            BOOL result = llvm::ValueHandleBase::RemoveFromUseList(v3);
            uint64_t v4 = *(v3 - 2);
          }
        }
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0) {
        BOOL result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 4);
      }
      v3 += 8;
      v2 -= 64;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CC260FD4(uint64_t a1, llvm::BasicBlock *a2)
{
  v99[48] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)v99;
  uint64_t v97 = (char *)v99;
  uint64_t v98 = 0x1000000000;
  uint64_t v3 = a1 + 72;
  uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8);
  if (v4 == a1 + 72)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = v4 - 24;
      if (!v4) {
        uint64_t v6 = 0;
      }
      unint64_t v91 = 6;
      uint64_t v92 = 0;
      v93[0] = v6;
      if (v6 != -8192)
      {
        BOOL v7 = v6 == -4096 || v6 == 0;
        if (!v7)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v91);
          unsigned int v5 = v98;
        }
      }
      uint64_t v8 = v97;
      if (v5 >= HIDWORD(v98))
      {
        unint64_t v26 = v5 + 1;
        BOOL v27 = &v97[24 * v5] > (char *)&v91;
        if (v97 <= (char *)&v91 && v27)
        {
          uint64_t v28 = (char *)&v91 - v97;
          sub_1CC261F80((unsigned int *)&v97, v26);
          uint64_t v8 = v97;
          uint64_t v9 = &v97[v28];
        }
        else
        {
          sub_1CC261F80((unsigned int *)&v97, v26);
          uint64_t v9 = (char *)&v91;
          uint64_t v8 = v97;
        }
      }
      else
      {
        uint64_t v9 = (char *)&v91;
      }
      int v10 = v98;
      uint64_t v11 = (unint64_t *)&v8[24 * v98];
      *uint64_t v11 = 6;
      v11[1] = 0;
      unint64_t v12 = *((void *)v9 + 2);
      v11[2] = v12;
      if (v12 != -8192 && v12 != -4096)
      {
        if (v12)
        {
          unint64_t v13 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
          v11[1] = *(void *)v13;
          *(void *)unint64_t v13 = v11;
          *uint64_t v11 = v13 | 6;
          uint64_t v14 = (unint64_t *)v11[1];
          if (v14) {
            *uint64_t v14 = *v14 & 7 | (unint64_t)(v11 + 1);
          }
        }
      }
      unsigned int v5 = v10 + 1;
      LODWORD(v98) = v10 + 1;
      if (v93[0] != -8192 && v93[0] != -4096 && v93[0])
      {
        unint64_t v15 = v91 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v91 & 0xFFFFFFFFFFFFFFF8) = v92;
        if (v92)
        {
          *(void *)uint64_t v92 = *(void *)v92 & 7 | v15;
        }
        else
        {
          uint64_t v16 = v93[0];
          unint64_t v17 = ***(int32x2_t ****)v93[0];
          unint64_t v18 = (unint64_t)v17[303];
          if (v18 <= v15)
          {
            uint64_t v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v15)
            {
              unsigned int v20 = v19 - 1;
              LODWORD(v21) = v20 & ((LODWORD(v93[0]) >> 4) ^ (LODWORD(v93[0]) >> 9));
              uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
              uint64_t v23 = *v22;
              if (v93[0] == *v22)
              {
LABEL_29:
                *uint64_t v22 = -8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v16 = v93[0];
              }
              else
              {
                int v24 = 1;
                while (v23 != -4096)
                {
                  int v25 = v21 + v24++;
                  uint64_t v21 = v25 & v20;
                  uint64_t v23 = *(void *)(v18 + 16 * v21);
                  if (v93[0] == v23)
                  {
                    uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
                    goto LABEL_29;
                  }
                }
              }
              *(unsigned char *)(v16 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
    uint64_t v2 = v97;
  }
  long long v29 = v93;
  unint64_t v91 = (unint64_t)v93;
  uint64_t v92 = 0x1000000000;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v94 = &v95;
  char v30 = 0;
  if (!v5)
  {
    unsigned int v79 = 0;
    goto LABEL_123;
  }
  int v31 = &v2[24 * v5];
  do
  {
    int v32 = (llvm *)*((void *)v2 + 2);
    if (!v32) {
      goto LABEL_47;
    }
    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(*((llvm::BasicBlock **)v2 + 2));
    if (!SinglePredecessor || SinglePredecessor == (void)v32) {
      goto LABEL_47;
    }
    if ((*((_WORD *)v32 + 9) & 0x7FFF) != 0) {
      goto LABEL_47;
    }
    uint64_t v35 = (void ***)SinglePredecessor;
    uint64_t v36 = *(void *)(SinglePredecessor + 40);
    if (v36 == SinglePredecessor + 40) {
      goto LABEL_47;
    }
    uint64_t v37 = v36 - 24;
    if (!v36) {
      uint64_t v37 = 0;
    }
    unsigned int v38 = *(unsigned __int8 *)(v37 + 16) - 40;
    if (v38 < 0xFFFFFFF5) {
      uint64_t v37 = 0;
    }
    if (!v36) {
      goto LABEL_47;
    }
    BOOL v39 = *(unsigned char *)(v37 + 16) == 30 && v38 >= 0xFFFFFFF5;
    if (!v39 || (*(_DWORD *)(v37 + 20) & 0x7FFFFFF) == 3) {
      goto LABEL_47;
    }
    llvm::MergeBlockIntoPredecessor(v32, 0, 0, 0, 0, 0);
    uint64_t v88 = 6;
    uint64_t v89 = 0;
    uint64_t v90 = v35;
    if (v35 != (void ***)-8192 && v35 != (void ***)-4096 && v35) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v88);
    }
    if (!v96)
    {
      unint64_t v40 = v91;
      unsigned int v41 = v92;
      if (!v92)
      {
LABEL_71:
        if (v92 >= HIDWORD(v92))
        {
          unint64_t v62 = v92 + 1;
          if (v91 <= (unint64_t)&v88 && v91 + 24 * v92 > (unint64_t)&v88)
          {
            uint64_t v78 = (char *)&v88 - v91;
            sub_1CC261F80((unsigned int *)&v91, v62);
            unint64_t v40 = v91;
            unint64_t v44 = (uint64_t *)&v78[v91];
          }
          else
          {
            sub_1CC261F80((unsigned int *)&v91, v62);
            unint64_t v44 = &v88;
            unint64_t v40 = v91;
          }
        }
        else
        {
          unint64_t v44 = &v88;
        }
        int v45 = v92;
        unsigned int v46 = (unint64_t *)(v40 + 24 * v92);
        *unsigned int v46 = 6;
        v46[1] = 0;
        uint64_t v47 = v44[2];
        v46[2] = v47;
        if (v47 != -8192 && v47 != -4096)
        {
          if (v47)
          {
            unint64_t v48 = *v44 & 0xFFFFFFFFFFFFFFF8;
            v46[1] = *(void *)v48;
            *(void *)unint64_t v48 = v46;
            *unsigned int v46 = v48 | 6;
            uint64_t v49 = (unint64_t *)v46[1];
            if (v49) {
              *uint64_t v49 = *v49 & 7 | (unint64_t)(v46 + 1);
            }
          }
        }
        LODWORD(v92) = v45 + 1;
        goto LABEL_80;
      }
      uint64_t v42 = 24 * v92;
      int v43 = (char *)(v91 + 16);
      while (*(void ****)v43 != v90)
      {
        v43 += 24;
        v42 -= 24;
        if (!v42) {
          goto LABEL_70;
        }
      }
      if (v42) {
        goto LABEL_80;
      }
LABEL_70:
      if (v92 < 0x10) {
        goto LABEL_71;
      }
      do
      {
        sub_1CC27EF2C((uint64_t *)&v94, *(void *)(v91 + 24 * v41 - 8), *(void *)(v91 + 24 * v41 - 24), *(void *)(v91 + 24 * v41 - 8));
        unsigned int v41 = v92 - 1;
        LODWORD(v92) = v41;
        uint64_t v63 = (char *)(v91 + 24 * v41);
        uint64_t v64 = *((void *)v63 + 2);
        if (v64 != -8192 && v64 != -4096 && v64 != 0)
        {
          unint64_t v66 = *(void *)v63 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v66 = *((void *)v63 + 1);
          int v67 = (unint64_t *)*((void *)v63 + 1);
          if (v67)
          {
            *int v67 = *v67 & 7 | v66;
          }
          else
          {
            uint64_t v68 = *((void *)v63 + 2);
            unsigned int v69 = ***(int32x2_t ****)v68;
            unint64_t v70 = (unint64_t)v69[303];
            if (v70 <= v66)
            {
              uint64_t v71 = v69[305].u32[0];
              if (v70 + 16 * v71 > v66)
              {
                unsigned int v72 = v71 - 1;
                LODWORD(v73) = v72 & ((v68 >> 4) ^ (v68 >> 9));
                uint64_t v74 = (uint64_t *)(v70 + 16 * v73);
                uint64_t v75 = *v74;
                if (v68 == *v74)
                {
LABEL_114:
                  uint64_t *v74 = -8192;
                  v69[304] = vadd_s32(v69[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v68 = *((void *)v63 + 2);
                }
                else
                {
                  int v76 = 1;
                  while (v75 != -4096)
                  {
                    int v77 = v73 + v76++;
                    uint64_t v73 = v77 & v72;
                    uint64_t v75 = *(void *)(v70 + 16 * v73);
                    if (v68 == v75)
                    {
                      uint64_t v74 = (uint64_t *)(v70 + 16 * v73);
                      goto LABEL_114;
                    }
                  }
                }
                *(unsigned char *)(v68 + 17) &= ~1u;
              }
            }
          }
        }
      }
      while (v41);
    }
    sub_1CC27EF2C((uint64_t *)&v94, (unint64_t)v90, v88, (uint64_t)v90);
LABEL_80:
    if (v90 != (void ***)-8192 && v90 != (void ***)-4096 && v90 != 0)
    {
      unint64_t v51 = v88 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v88 & 0xFFFFFFFFFFFFFFF8) = v89;
      if (v89)
      {
        *uint64_t v89 = *v89 & 7 | v51;
      }
      else
      {
        BOOL v52 = v90;
        int v53 = (int32x2_t *)***v90;
        unint64_t v54 = (unint64_t)v53[303];
        if (v54 <= v51)
        {
          uint64_t v55 = v53[305].u32[0];
          if (v54 + 16 * v55 > v51)
          {
            unsigned int v56 = v55 - 1;
            LODWORD(v57) = v56 & ((v90 >> 4) ^ (v90 >> 9));
            uint64_t v58 = (void *)(v54 + 16 * v57);
            uint64_t v59 = (void ***)*v58;
            if (v90 == (void ***)*v58)
            {
LABEL_95:
              *uint64_t v58 = -8192;
              v53[304] = vadd_s32(v53[304], (int32x2_t)0x1FFFFFFFFLL);
              BOOL v52 = v90;
            }
            else
            {
              int v60 = 1;
              while (v59 != (void ***)-4096)
              {
                int v61 = v57 + v60++;
                uint64_t v57 = v61 & v56;
                uint64_t v59 = *(void ****)(v54 + 16 * v57);
                if (v90 == v59)
                {
                  uint64_t v58 = (void *)(v54 + 16 * v57);
                  goto LABEL_95;
                }
              }
            }
            *((unsigned char *)v52 + 17) &= ~1u;
          }
        }
      }
    }
    char v30 = 1;
LABEL_47:
    v2 += 24;
  }
  while (v2 != v31);
  long long v29 = (void *)v91;
  unsigned int v79 = v92;
  if (v96)
  {
    int v80 = 0;
    uint64_t v81 = (uint64_t)v94;
    goto LABEL_124;
  }
LABEL_123:
  int v80 = 1;
  uint64_t v81 = (uint64_t)v29;
LABEL_124:
  int v82 = &v29[3 * v79];
  while (2)
  {
    if (v80)
    {
      if ((void *)v81 == v82) {
        break;
      }
      goto LABEL_129;
    }
    if ((void **)v81 != &v95)
    {
LABEL_129:
      if (v80) {
        uint64_t v83 = 16;
      }
      else {
        uint64_t v83 = 48;
      }
      int v84 = *(llvm **)(v81 + v83);
      if (v84) {
        llvm::RemoveRedundantDbgInstrs(v84, a2);
      }
      if (v80)
      {
        v81 += 24;
      }
      else
      {
        uint64_t v85 = *(void **)(v81 + 8);
        uint64_t v86 = v81;
        if (v85)
        {
          do
          {
            uint64_t v81 = (uint64_t)v85;
            uint64_t v85 = (void *)*v85;
          }
          while (v85);
        }
        else
        {
          do
          {
            uint64_t v81 = *(void *)(v86 + 16);
            BOOL v7 = *(void *)v81 == v86;
            uint64_t v86 = v81;
          }
          while (!v7);
        }
      }
      continue;
    }
    break;
  }
  sub_1CC27EFEC(v95);
  sub_1CC2621C4((char **)&v91);
  sub_1CC2621C4(&v97);
  return v30 & 1;
}

BOOL sub_1CC261774(uint64_t a1, uint64_t *a2)
{
  sub_1CC27F430(a1, a2, (uint64_t)&v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

void *sub_1CC261804(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v1 = (void *)a1[5];
  if (v1 == a1 + 5) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v1) {
    int v4 = v1 - 3;
  }
  else {
    int v4 = 0;
  }
  unsigned int v5 = *((unsigned __int8 *)v4 + 16) - 40;
  if (v5 >= 0xFFFFFFF5) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = 0;
  }
  if (!v1) {
    return v3;
  }
  if (*((unsigned char *)v6 + 16) != 30 || v5 < 0xFFFFFFF5) {
    return v3;
  }
  if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) != 1) {
    return 0;
  }
  unsigned __int8 v9 = v6 + 3;
  if (v6 + 3 != (void *)a1[6])
  {
    do
    {
      unsigned __int8 v9 = (void *)*v9;
      if (v9) {
        uint64_t v10 = (uint64_t)(v9 - 3);
      }
      else {
        uint64_t v10 = 0;
      }
    }
    while (sub_1CBF63B28(v10) && v9 != (void *)a1[6]);
    if (!sub_1CBF63B28(v10) && *(unsigned char *)(v10 + 16) != 83) {
      return 0;
    }
  }
  uint64_t v3 = (void *)*(v6 - 4);
  if (v3 == a1) {
    return 0;
  }
  if ((void *)*v2 != v2)
  {
    for (uint64_t i = a1[6]; ; uint64_t i = *(void *)(v12 + 32))
    {
      uint64_t v12 = i - 24;
      if (i) {
        uint64_t v13 = i - 24;
      }
      else {
        uint64_t v13 = 0;
      }
      if (!i || *(unsigned char *)(v13 + 16) != 83) {
        goto LABEL_52;
      }
      uint64_t v14 = *(void *)(i - 16);
      if (v14) {
        break;
      }
LABEL_49:
      ;
    }
    while (1)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      if (*(void **)(v15 + 40) != v3 || *(unsigned char *)(v15 + 16) != 83) {
        return 0;
      }
      int v16 = *(_DWORD *)(v15 + 20);
      uint64_t v17 = v16 & 0x7FFFFFF;
      if ((v16 & 0x7FFFFFF) != 0)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 32 * v17;
        uint64_t v21 = v15 - 32 * v17;
        do
        {
          uint64_t v22 = v21;
          if ((v16 & 0x40000000) != 0) {
            uint64_t v22 = *(void *)(v15 - 8);
          }
          uint64_t v23 = *(void *)(v22 + v19);
          BOOL v24 = v23 && *(unsigned __int8 *)(v23 + 16) >= 0x1Cu;
          if (v24 && *(void **)(v23 + 40) == a1)
          {
            uint64_t v25 = v21;
            if ((v16 & 0x40000000) != 0) {
              uint64_t v25 = *(void *)(v15 - 8);
            }
            if (*(void **)(v25 + 32 * *(unsigned int *)(v15 + 60) + v18) != a1) {
              return 0;
            }
          }
          v19 += 32;
          v18 += 8;
        }
        while (v20 != v19);
      }
      uint64_t v14 = *(void *)(v14 + 8);
      if (!v14) {
        goto LABEL_49;
      }
    }
  }
LABEL_52:
  uint64_t v27 = v3[6];
  uint64_t v28 = v27 - 24;
  if (!v27) {
    uint64_t v28 = 0;
  }
  int v29 = *(unsigned __int8 *)(v28 + 16);
  if (v29 == 83) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = 0;
  }
  if (v27 && v29 == 83)
  {
    int v31 = v107;
    uint64_t v103 = v107;
    unsigned int v104 = v107;
    uint64_t v105 = 16;
    int v106 = 0;
    uint64_t v32 = a1[6];
    uint64_t v33 = v32 - 24;
    if (!v32) {
      uint64_t v33 = 0;
    }
    int v34 = *(unsigned __int8 *)(v33 + 16);
    if (v34 == 83) {
      uint64_t v35 = v33;
    }
    else {
      uint64_t v35 = 0;
    }
    if (v32 && v34 == 83)
    {
      int v36 = *(_DWORD *)(v35 + 20);
      uint64_t v37 = v36 & 0x7FFFFFF;
      if ((v36 & 0x7FFFFFF) != 0)
      {
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        unsigned int v40 = 16;
        unsigned int v41 = v107;
        while (1)
        {
          int v42 = *(_DWORD *)(v35 + 20);
          uint64_t v43 = (v42 & 0x40000000) != 0 ? *(void *)(v35 - 8) : v35 - 32 * (v42 & 0x7FFFFFF);
          uint64_t v44 = *(void *)(v43 + 32 * *(unsigned int *)(v35 + 60) + 8 * v39);
          if (v41 != v31) {
            break;
          }
          if (v38)
          {
            int v45 = 0;
            uint64_t v46 = 8 * v38;
            uint64_t v47 = v31;
            while (*(void *)v47 != v44)
            {
              if (*(void *)v47 == -2) {
                int v45 = v47;
              }
              v47 += 8;
              v46 -= 8;
              if (!v46)
              {
                if (!v45) {
                  goto LABEL_79;
                }
                *(void *)int v45 = v44;
                --v106;
                goto LABEL_101;
              }
            }
            goto LABEL_101;
          }
LABEL_79:
          if (v40 <= v38) {
            break;
          }
          HIDWORD(v105) = v38 + 1;
          *(void *)&v31[8 * v38] = v44;
LABEL_101:
          int v31 = v103;
          unsigned int v41 = v104;
          unsigned int v40 = v105;
          unsigned int v38 = HIDWORD(v105);
          if (++v39 == v37) {
            goto LABEL_119;
          }
        }
        if (3 * v40 <= 4 * (v38 - v106))
        {
          if (v40 >= 0x40) {
            v40 *= 2;
          }
          else {
            unsigned int v40 = 128;
          }
        }
        else if (v40 - v38 >= v40 >> 3)
        {
          goto LABEL_83;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v103, v40);
        unsigned int v40 = v105;
        unsigned int v41 = v104;
LABEL_83:
        unsigned int v48 = v40 - 1;
        unsigned int v49 = (v40 - 1) & ((v44 >> 4) ^ (v44 >> 9));
        int v50 = &v41[8 * v49];
        uint64_t v51 = *(void *)v50;
        if (*(void *)v50 == -1)
        {
          BOOL v52 = 0;
LABEL_95:
          if (v52) {
            int v50 = v52;
          }
          if (*(void *)v50 != v44)
          {
            if (*(void *)v50 == -2) {
              --v106;
            }
            else {
              ++HIDWORD(v105);
            }
            *(void *)int v50 = v44;
          }
        }
        else
        {
          BOOL v52 = 0;
          int v53 = 1;
          while (v51 != v44)
          {
            if (v52) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v51 == -2;
            }
            if (v54) {
              BOOL v52 = v50;
            }
            unsigned int v55 = v49 + v53++;
            unsigned int v49 = v55 & v48;
            int v50 = &v41[8 * (v55 & v48)];
            uint64_t v51 = *(void *)v50;
            if (*(void *)v50 == -1) {
              goto LABEL_95;
            }
          }
        }
        goto LABEL_101;
      }
      goto LABEL_119;
    }
    uint64_t v56 = a1[1];
    if (!v56)
    {
LABEL_119:
      int v61 = *(_DWORD *)(v30 + 20);
      uint64_t v62 = v61 & 0x7FFFFFF;
      if ((v61 & 0x7FFFFFF) != 0)
      {
        uint64_t v63 = 0;
        do
        {
          int v64 = *(_DWORD *)(v30 + 20);
          if ((v64 & 0x40000000) != 0) {
            uint64_t v65 = *(void *)(v30 - 8);
          }
          else {
            uint64_t v65 = v30 - 32 * (v64 & 0x7FFFFFF);
          }
          uint64_t v66 = *(void *)(v65 + 32 * *(unsigned int *)(v30 + 60) + 8 * v63);
          int v67 = v103;
          if (v104 == v103)
          {
            int v68 = HIDWORD(v105);
            unsigned int v69 = &v104[8 * HIDWORD(v105)];
            if (HIDWORD(v105))
            {
              uint64_t v70 = 0;
              while (*(void *)&v104[v70] != v66)
              {
                v70 += 8;
                if (8 * HIDWORD(v105) == v70) {
                  goto LABEL_143;
                }
              }
              unsigned int v69 = &v104[v70];
            }
LABEL_143:
            int v67 = v104;
          }
          else
          {
            int v71 = v105 - 1;
            unsigned int v72 = (v105 - 1) & ((v66 >> 4) ^ (v66 >> 9));
            unsigned int v69 = &v104[8 * v72];
            uint64_t v73 = *(void *)v69;
            if (*(void *)v69 == -1)
            {
              uint64_t v74 = 0;
LABEL_164:
              if (v74) {
                unsigned int v69 = v74;
              }
              int v68 = HIDWORD(v105);
              if (*(void *)v69 != v66) {
                unsigned int v69 = &v104[8 * v105];
              }
            }
            else
            {
              uint64_t v74 = 0;
              int v75 = 1;
              while (v73 != v66)
              {
                if (v74) {
                  BOOL v76 = 0;
                }
                else {
                  BOOL v76 = v73 == -2;
                }
                if (v76) {
                  uint64_t v74 = v69;
                }
                unsigned int v77 = v72 + v75++;
                unsigned int v72 = v77 & v71;
                unsigned int v69 = &v104[8 * (v77 & v71)];
                uint64_t v73 = *(void *)v69;
                if (*(void *)v69 == -1) {
                  goto LABEL_164;
                }
              }
              int v68 = HIDWORD(v105);
            }
          }
          if (v104 == v67) {
            int v78 = v68;
          }
          else {
            int v78 = v105;
          }
          if (v69 != &v104[8 * v78] && (void *)v3[5] != v3 + 5)
          {
            for (uint64_t j = v3[6]; ; uint64_t j = *(void *)(v80 + 32))
            {
              uint64_t v80 = j - 24;
              uint64_t v81 = j ? j - 24 : 0;
              if (!j || *(unsigned char *)(v81 + 16) != 83) {
                break;
              }
              uint64_t v82 = sub_1CBF73380(j - 24, v66);
              uint64_t v83 = sub_1CBF73380(v80, (uint64_t)a1);
              if (v83 && *(unsigned char *)(v83 + 16) == 83 && *(void **)(v83 + 40) == a1) {
                uint64_t v83 = sub_1CBF73380(v83, v66);
              }
              if (v82 != v83)
              {
                int v84 = 0;
                goto LABEL_171;
              }
            }
          }
          ++v63;
        }
        while (v63 != v62);
      }
      int v84 = 1;
LABEL_171:
      if (v104 != v103) {
        free(v104);
      }
      if (!v84) {
        return 0;
      }
      return v3;
    }
    while (1)
    {
      uint64_t v57 = *(void *)(v56 + 24);
      unsigned int v58 = *(unsigned __int8 *)(v57 + 16);
      BOOL v59 = v57 && v58 >= 0x1C;
      if (v59 && v58 - 29 <= 0xA) {
        break;
      }
      uint64_t v56 = *(void *)(v56 + 8);
      if (!v56) {
        goto LABEL_119;
      }
    }
    unsigned int v85 = 0;
    uint64_t v86 = v107;
LABEL_176:
    uint64_t v87 = *(void *)(v57 + 40);
    if (v86 == v31)
    {
      if (v85)
      {
        uint64_t v88 = 0;
        uint64_t v89 = 8 * v85;
        uint64_t v90 = v31;
        while (*(void *)v90 != v87)
        {
          if (*(void *)v90 == -2) {
            uint64_t v88 = v90;
          }
          v90 += 8;
          v89 -= 8;
          if (!v89)
          {
            if (!v88) {
              goto LABEL_184;
            }
            *(void *)uint64_t v88 = v87;
            --v106;
            goto LABEL_207;
          }
        }
        goto LABEL_207;
      }
LABEL_184:
      unsigned int v91 = v105;
      if (v85 < v105)
      {
        HIDWORD(v105) = v85 + 1;
        *(void *)&v31[8 * v85] = v87;
LABEL_207:
        int v31 = v103;
        uint64_t v86 = v104;
        while (1)
        {
          uint64_t v56 = *(void *)(v56 + 8);
          if (!v56) {
            goto LABEL_119;
          }
          uint64_t v57 = *(void *)(v56 + 24);
          unsigned int v100 = *(unsigned __int8 *)(v57 + 16);
          if (v57) {
            BOOL v101 = v100 >= 0x1C;
          }
          else {
            BOOL v101 = 0;
          }
          if (v101 && v100 - 29 <= 0xA)
          {
            unsigned int v85 = HIDWORD(v105);
            goto LABEL_176;
          }
        }
      }
    }
    else
    {
      unsigned int v91 = v105;
    }
    if (3 * v91 <= 4 * (v85 - v106))
    {
      if (v91 >= 0x40) {
        v91 *= 2;
      }
      else {
        unsigned int v91 = 128;
      }
    }
    else if (v91 - v85 >= v91 >> 3)
    {
      goto LABEL_189;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v103, v91);
    unsigned int v91 = v105;
    uint64_t v86 = v104;
LABEL_189:
    unsigned int v92 = v91 - 1;
    unsigned int v93 = (v91 - 1) & ((v87 >> 4) ^ (v87 >> 9));
    uint64_t v94 = &v86[8 * v93];
    uint64_t v95 = *(void *)v94;
    if (*(void *)v94 == -1)
    {
      uint64_t v96 = 0;
LABEL_201:
      if (v96) {
        uint64_t v94 = v96;
      }
      if (*(void *)v94 != v87)
      {
        if (*(void *)v94 == -2) {
          --v106;
        }
        else {
          ++HIDWORD(v105);
        }
        *(void *)uint64_t v94 = v87;
      }
    }
    else
    {
      uint64_t v96 = 0;
      int v97 = 1;
      while (v95 != v87)
      {
        if (v96) {
          BOOL v98 = 0;
        }
        else {
          BOOL v98 = v95 == -2;
        }
        if (v98) {
          uint64_t v96 = v94;
        }
        unsigned int v99 = v93 + v97++;
        unsigned int v93 = v99 & v92;
        uint64_t v94 = &v86[8 * (v99 & v92)];
        uint64_t v95 = *(void *)v94;
        if (*(void *)v94 == -1) {
          goto LABEL_201;
        }
      }
    }
    goto LABEL_207;
  }
  return v3;
}

void sub_1CC261F80(unsigned int *a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = a1[3];
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unsigned int v6 = (unint64_t *)malloc_type_malloc(24 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  BOOL v7 = v6;
  sub_1CC26203C(a1, v6);
  if (*(unsigned int **)a1 != a1 + 4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  a1[3] = v5;
}

unsigned int *sub_1CC26203C(unsigned int *result, unint64_t *a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(*(void *)result + 16);
    unint64_t v4 = (unint64_t)(a2 + 1);
    uint64_t v5 = 24 * v2;
    do
    {
      *a2 = 6;
      a2[1] = 0;
      unint64_t v6 = *v3;
      a2[2] = *v3;
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        unint64_t v8 = *(v3 - 2) & 0xFFFFFFFFFFFFFFF8;
        a2[1] = *(void *)v8;
        *(void *)unint64_t v8 = a2;
        *a2 = v8 | 6;
        unsigned __int8 v9 = (uint64_t *)a2[1];
        if (v9) {
          *unsigned __int8 v9 = *v9 & 7 | v4;
        }
      }
      a2 += 3;
      v3 += 3;
      v4 += 24;
      v5 -= 24;
    }
    while (v5);
    uint64_t v10 = *(void *)result;
    uint64_t v11 = *(void *)result + 24 * v2;
    do
    {
      uint64_t v12 = *(void *)(v11 - 8);
      if (v12 != -8192 && v12 != -4096 && v12 != 0)
      {
        unint64_t v14 = *(void *)(v11 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v14 = *(void *)(v11 - 16);
        uint64_t v15 = *(unint64_t **)(v11 - 16);
        if (v15)
        {
          *uint64_t v15 = *v15 & 7 | v14;
        }
        else
        {
          uint64_t v16 = *(void *)(v11 - 8);
          uint64_t v17 = ***(int32x2_t ****)v16;
          unint64_t v18 = (unint64_t)v17[303];
          if (v18 <= v14)
          {
            uint64_t v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v14)
            {
              unsigned int v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
              uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
              uint64_t v23 = *v22;
              if (v16 == *v22)
              {
LABEL_25:
                *uint64_t v22 = -8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v16 = *(void *)(v11 - 8);
              }
              else
              {
                int v24 = 1;
                while (v23 != -4096)
                {
                  int v25 = v21 + v24++;
                  uint64_t v21 = v25 & v20;
                  uint64_t v23 = *(void *)(v18 + 16 * v21);
                  if (v16 == v23)
                  {
                    uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
                    goto LABEL_25;
                  }
                }
              }
              *(unsigned char *)(v16 + 17) &= ~1u;
            }
          }
        }
      }
      v11 -= 24;
    }
    while (v11 != v10);
  }
  return result;
}

char **sub_1CC2621C4(char **a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    unint64_t v4 = &v2[24 * v3];
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        unint64_t v7 = *((void *)v4 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v7 = *((void *)v4 - 2);
        unint64_t v8 = (unint64_t *)*((void *)v4 - 2);
        if (v8)
        {
          *unint64_t v8 = *v8 & 7 | v7;
        }
        else
        {
          uint64_t v9 = *((void *)v4 - 1);
          uint64_t v10 = ***(int32x2_t ****)v9;
          unint64_t v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            uint64_t v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              unsigned int v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
              uint64_t v16 = *v15;
              if (v9 == *v15)
              {
LABEL_16:
                *uint64_t v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v9 = *((void *)v4 - 1);
              }
              else
              {
                int v17 = 1;
                while (v16 != -4096)
                {
                  int v18 = v14 + v17++;
                  uint64_t v14 = v18 & v13;
                  uint64_t v16 = *(void *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_16;
                  }
                }
              }
              *(unsigned char *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v4 -= 24;
    }
    while (v4 != v2);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

BOOL sub_1CC262304(uint64_t a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (a2)
  {
    unsigned int v3 = a2[16];
    if (v3 >= 0x1C)
    {
      int v4 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v4 & 0xFE) == 0x12) {
        int v4 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      if (v4 != 269) {
        return 0;
      }
      if (v3 == 56) {
        return 1;
      }
      if (v3 != 85) {
        return 0;
      }
      uint64_t v5 = *((void *)a2 - 4);
      if (!v5) {
        return 0;
      }
      unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
      if (v6 > 0x14) {
        return 0;
      }
      if (v6 == 16)
      {
        uint64_t v7 = *(unsigned int *)(v5 + 32);
        if (v7 >= 0x41)
        {
          int v8 = 0;
          int64_t v9 = (unint64_t)(v7 + 63) >> 6;
          do
          {
            if (v9-- < 1) {
              break;
            }
            unint64_t v11 = *(void *)(*(void *)(v5 + 24) + 8 * v9);
            v8 += __clz(v11);
          }
          while (!v11);
          int v12 = v7 | 0xFFFFFFC0;
          if ((v7 & 0x3F) == 0) {
            int v12 = 0;
          }
          if (v8 + v12 != v7) {
            return 0;
          }
        }
        else if (*(void *)(v5 + 24))
        {
          return 0;
        }
        return 1;
      }
      if (v6 == 17) {
        return (sub_1CB844168(v5, 0.0) & 1) != 0;
      }
      BOOL result = 1;
      if (v6 - 18 >= 3 && v6 != 13) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CC262418(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  uint64_t v7 = (llvm::LLVMContext ***)a2;
  v1357[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 192);
  uint64_t v9 = *(void *)(a1 + 200);
  unint64_t v11 = (llvm::SmallPtrSetImplBase *)(a1 + 192);
  if (v9 == v10)
  {
    uint64_t v12 = *(unsigned int *)(a1 + 212);
    unsigned int v13 = (void *)(v9 + 8 * v12);
    if (v12)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 8 * v12;
      while (*(void *)(v9 + v14) != a2)
      {
        v14 += 8;
        if (v15 == v14) {
          goto LABEL_19;
        }
      }
      unsigned int v13 = (void *)(v9 + v14);
    }
LABEL_19:
    uint64_t v10 = *(void *)(a1 + 200);
  }
  else
  {
    uint64_t v16 = *(unsigned int *)(a1 + 208);
    int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v13 = (void *)(v9 + 8 * v18);
    uint64_t v19 = *v13;
    if (*v13 == -1)
    {
      unsigned int v20 = 0;
LABEL_65:
      if (v20) {
        unsigned int v13 = v20;
      }
      if (*v13 != a2) {
        unsigned int v13 = (void *)(v9 + 8 * v16);
      }
    }
    else
    {
      unsigned int v20 = 0;
      int v21 = 1;
      while (v19 != a2)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -2;
        }
        if (v22) {
          unsigned int v20 = v13;
        }
        unsigned int v23 = v18 + v21++;
        unsigned int v18 = v23 & v17;
        unsigned int v13 = (void *)(v9 + 8 * (v23 & v17));
        uint64_t v19 = *v13;
        if (*v13 == -1) {
          goto LABEL_65;
        }
      }
    }
  }
  BOOL v22 = v9 == v10;
  uint64_t v24 = 208;
  if (v22) {
    uint64_t v24 = 212;
  }
  if (v13 != (void *)(v9 + 8 * *(unsigned int *)(a1 + v24)))
  {
LABEL_23:
    LOBYTE(v25) = 0;
    return v25 & 1;
  }
  int v27 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v27 == 83)
  {
    uint64_t v28 = *(void **)(a1 + 72);
    v1337[0] = *(void **)(a1 + 720);
    v1337[1] = v28;
    v1340 = 0;
    v1338 = 0;
    p_s2 = 0;
    __int16 v1341 = 257;
    int v29 = *(_DWORD *)(a2 + 20);
    if ((v29 & 0x40000000) != 0)
    {
      int v31 = *(uint64_t **)(a2 - 8);
      unint64_t v30 = v29 & 0x7FFFFFF;
    }
    else
    {
      unint64_t v30 = v29 & 0x7FFFFFF;
      int v31 = (uint64_t *)(a2 - 32 * v30);
    }
    __src = (char *)&v1312 + 8;
    *(void *)&long long v1312 = 0x800000000;
    if (v30 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v30)
    {
      uint64_t v32 = 32 * v30;
      uint64_t v33 = (void *)&v1312 + 1;
      do
      {
        uint64_t v34 = *v31;
        v31 += 4;
        *v33++ = v34;
        v32 -= 32;
      }
      while (v32);
      uint64_t v35 = (char *)__src;
    }
    else
    {
      uint64_t v35 = (char *)&v1312 + 8;
    }
    LODWORD(v1312) = v30;
    uint64_t v62 = llvm::SimplifyInstructionWithOperands((llvm *)v7, (uint64_t)v35, v30, (uint64_t)v1337, a5, a6, a7);
    if (__src == (char *)&v1312 + 8)
    {
      if (!v62) {
        goto LABEL_23;
      }
    }
    else
    {
      free(__src);
      if (!v62) {
        goto LABEL_23;
      }
    }
    uint64_t v63 = (void *)sub_1CC273768((uint64_t *)(a1 + 560), (uint64_t)v7);
    if (*(void **)(a1 + 592) != v63) {
      sub_1CD50E34C((int32x2_t *)(a1 + 560), v63);
    }
    int v64 = (llvm::ValueAsMetadata *)v7;
    uint64_t v65 = v62;
LABEL_75:
    llvm::Value::doRAUW(v64, v65, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int v36 = (_DWORD *)(a1 + 212);
  uint64_t v37 = (unsigned int *)(a1 + 208);
  if (a2 && (v27 - 79) >= 0xFFFFFFF3)
  {
    uint64_t v38 = *(void *)(a2 - 32);
    if (*(unsigned __int8 *)(v38 + 16) < 0x15u) {
      goto LABEL_23;
    }
    v1288 = (_DWORD *)(a1 + 212);
    unint64_t v39 = *(void *)(a1 + 48);
    uint64_t v40 = *(void *)(a1 + 720);
    if (v27 == 78)
    {
      unsigned int v41 = *(llvm::EVT **)v38;
      unsigned int v42 = *((_DWORD *)v41 + 2);
      if ((v42 & 0xFE) == 0x12) {
        unsigned int v42 = *(_DWORD *)(**((void **)v41 + 2) + 8);
      }
      uint64_t v43 = v42 >> 8;
      unsigned int v44 = *((_DWORD *)*v7 + 2);
      if ((v44 & 0xFE) == 0x12) {
        unsigned int v44 = *(_DWORD *)(*(void *)(*v7)[2] + 8);
      }
      if (!(*(unsigned int (**)(void, uint64_t, void))(*(void *)v39 + 840))(*(void *)(a1 + 48), v43, v44 >> 8))goto LABEL_188; {
      uint64_t v38 = (uint64_t)*(v7 - 4);
      }
    }
    int v45 = (void *)sub_1CB87DC14(v39, v40, *(llvm::EVT **)v38, 0);
    unsigned __int8 v46 = v45;
    unsigned int v48 = v47;
    v1337[0] = v45;
    v1337[1] = v47;
    unsigned int v49 = (void *)sub_1CB87DC14(v39, v40, (llvm::EVT *)*v7, 0);
    BOOL v51 = (BOOL)v49;
    BOOL v52 = (void *)v50;
    int v53 = v49;
    if (v46)
    {
      int v54 = 1;
      if (v46 - 2 >= 6) {
        int v54 = v46 - 15 < 0x3C || v46 - 120 < 0x20;
      }
    }
    else
    {
      if ((v48[1] & 0xFE) == 0x12) {
        int v107 = *(unsigned __int8 *)(*v48[2] + 8);
      }
      else {
        int v107 = *((_DWORD *)v48 + 2);
      }
      int v54 = v107 == 13;
    }
    if ((_BYTE)v49)
    {
      if (v49 - 2 < 6 || v49 - 15 <= 0x3B)
      {
        if ((v54 & 1) == 0) {
          goto LABEL_188;
        }
LABEL_168:
        if (v46 == v49)
        {
          if (v46 || v48 == (void **)v50)
          {
LABEL_180:
            llvm::TargetLoweringBase::getTypeConversion(v39, **v7, (BOOL)v1337[0], (uint64_t)v1337[1], (uint64_t)&__src);
            if (__src == 1)
            {
              llvm::TargetLoweringBase::getTypeConversion(v39, **v7, (BOOL)v1337[0], (uint64_t)v1337[1], (uint64_t)&__src);
              *(_OWORD *)v1337 = v1312;
            }
            llvm::TargetLoweringBase::getTypeConversion(v39, **v7, v51, (uint64_t)v52, (uint64_t)&__src);
            if (__src == 1)
            {
              llvm::TargetLoweringBase::getTypeConversion(v39, **v7, v51, (uint64_t)v52, (uint64_t)&__src);
              int v53 = v1312;
              BOOL v52 = (void *)*((void *)&v1312 + 1);
            }
            if (LOBYTE(v1337[0]) == v53
              && (LOBYTE(v1337[0]) || v1337[1] == v52)
              && (sub_1CC26C410((uint64_t)v7) & 1) != 0)
            {
              goto LABEL_214;
            }
LABEL_188:
            int v116 = *((unsigned __int8 *)v7 + 16);
            if ((v116 - 66) > 5 || ((1 << (v116 - 66)) & 0x29) == 0) {
              goto LABEL_199;
            }
            unsigned int v117 = *(uint64_t **)(a1 + 80);
            int v118 = *((_DWORD *)v117 + 4);
            if (v118)
            {
              uint64_t v119 = v7[5];
              uint64_t v120 = *v117;
              unsigned int v121 = v118 - 1;
              uint64_t v122 = ((v119 >> 4) ^ (v119 >> 9)) & (v118 - 1);
              uint64_t v123 = *(llvm::LLVMContext ***)(v120 + 16 * v122);
              if (v119 == v123)
              {
LABEL_195:
                uint64_t v126 = *(void *)(v120 + 16 * v122 + 8);
LABEL_197:
                if ((*(uint64_t (**)(void, llvm::LLVMContext ***, uint64_t))(**(void **)(a1 + 48) + 1232))(*(void *)(a1 + 48), v7, v126))goto LABEL_214; {
                int v116 = *((unsigned __int8 *)v7 + 16);
                }
LABEL_199:
                if ((v116 - 67) > 1) {
                  goto LABEL_23;
                }
                unint64_t v127 = *(void *)(a1 + 48);
                uint64_t v128 = **v7;
                unint64_t v129 = sub_1CB87DC14(v127, *(void *)(a1 + 720), (llvm::EVT *)*v7, 0);
                llvm::TargetLoweringBase::getTypeConversion(v127, v128, v129, v130, (uint64_t)&__src);
                if (__src == 2)
                {
                  char v131 = sub_1CC26C410((uint64_t)v7);
LABEL_837:
                  LOBYTE(v25) = v131;
                  return v25 & 1;
                }
                uint64_t v132 = *(uint64_t **)(a1 + 80);
                int v133 = *((_DWORD *)v132 + 4);
                if (v133)
                {
                  float v134 = v7[5];
                  uint64_t v135 = *v132;
                  unsigned int v136 = v133 - 1;
                  uint64_t v137 = ((v134 >> 4) ^ (v134 >> 9)) & (v133 - 1);
                  uint64_t v138 = *(llvm::LLVMContext ***)(v135 + 16 * v137);
                  if (v134 == v138)
                  {
LABEL_210:
                    uint64_t v141 = *(void *)(v135 + 16 * v137 + 8);
                    goto LABEL_213;
                  }
                  int v139 = 1;
                  while (v138 != (llvm::LLVMContext **)-4096)
                  {
                    int v140 = v137 + v139++;
                    uint64_t v137 = v140 & v136;
                    uint64_t v138 = *(llvm::LLVMContext ***)(v135 + 16 * v137);
                    if (v134 == v138) {
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v141 = 0;
LABEL_213:
                if ((*(uint64_t (**)(void, llvm::LLVMContext ***, uint64_t))(**(void **)(a1 + 48) + 1232))(*(void *)(a1 + 48), v7, v141))goto LABEL_214; {
                v1280 = (llvm::Instruction *)(a1 + 208);
                }
                LOBYTE(v1300[0]) = 0;
                int v142 = (*(uint64_t (**)(void, llvm::LLVMContext ***, void *))(***(void ***)(a1 + 64)
                                                                                          + 752))(**(void **)(a1 + 64), v7, v1300);
                v1337[0] = &v1338;
                v1337[1] = (void *)0x1000000000;
                v1354[2] = a1 + 376;
                v1334 = &v1336;
                v1304 = (llvm *)v1306;
                uint64_t v1305 = 0x200000000;
                v1336 = v7;
                uint64_t v1335 = 0x100000001;
                char v1274 = sub_1CC273AE8(a1, (uint64_t)v1337, (uint64_t)&v1334, (uint64_t)&v1304, 0);
                if (!v1305) {
                  goto LABEL_309;
                }
                int v143 = v1304;
                uint64_t v144 = 8 * v1305;
                while (1)
                {
                  unsigned int v145 = *(llvm::LLVMContext ****)v143;
                  int v146 = *(_DWORD *)(*(void *)v143 + 20);
                  uint64_t v147 = (v146 & 0x40000000) != 0 ? *(v145 - 1) : (llvm::Instruction **)&v145[-4 * (v146 & 0x7FFFFFF)];
                  uint64_t v148 = *v147;
                  if (*((unsigned char *)*v147 + 16) == 60) {
                    break;
                  }
                  int v143 = (llvm *)((char *)v143 + 8);
                  v144 -= 8;
                  if (!v144) {
                    goto LABEL_309;
                  }
                }
                if ((v1274 & 1) == 0 && *((llvm::LLVMContext ***)v148 + 5) == v145[5]) {
                  goto LABEL_309;
                }
                uint64_t v150 = *(void *)(a1 + 48);
                uint64_t v151 = *(void *)(a1 + 720);
                unsigned __int8 v152 = sub_1CB87DC14(v150, v151, (llvm::EVT *)*v145, 0);
                unsigned __int8 v153 = sub_1CB87DC14(v150, v151, *(llvm::EVT **)v148, 0);
                uint64_t v154 = *((void *)v148 + 1);
                if (v154 && !*(void *)(v154 + 8))
                {
                  uint64_t v155 = v153;
                }
                else
                {
                  uint64_t v155 = v153;
                  if ((v153 && *(void *)(v150 + 8 * v153 + 96) || !v152 || !*(void *)(v150 + 8 * v152 + 96))
                    && !(*(unsigned int (**)(uint64_t, llvm::LLVMContext **, void))(*(void *)v150 + 1144))(v150, *v145, *(void *)v148))
                  {
LABEL_309:
                    if (!v142) {
                      goto LABEL_951;
                    }
                    int v175 = LOBYTE(v1300[0]);
                    long long __s2 = v1333;
                    uint64_t v1330 = (uint64_t)v1333;
                    uint64_t v1331 = 1;
                    LODWORD(v1332) = 0;
                    if (!v1305) {
                      goto LABEL_390;
                    }
                    uint64_t v176 = v1304;
                    uint64_t v177 = (llvm *)((char *)v1304 + 8 * v1305);
                    char v178 = 1;
                    while (1)
                    {
                      uint64_t v179 = *(void *)v176;
                      int v180 = *(_DWORD *)(*(void *)v176 + 20);
                      if ((v180 & 0x40000000) != 0) {
                        uint64_t v181 = *(uint64_t **)(v179 - 8);
                      }
                      else {
                        uint64_t v181 = (uint64_t *)(v179 - 32 * (v180 & 0x7FFFFFF));
                      }
                      uint64_t v182 = *v181;
                      __src = 0;
                      if (sub_1CD40EA84(*(void *)(a1 + 536), *(_DWORD *)(a1 + 552), v182, &__src)) {
                        BOOL v183 = __src == (void *)(*(void *)(a1 + 536) + 16 * *(unsigned int *)(a1 + 552));
                      }
                      else {
                        BOOL v183 = 1;
                      }
                      if (v183) {
                        goto LABEL_353;
                      }
                      uint64_t v184 = *((void *)__src + 1);
                      if (!v184) {
                        goto LABEL_352;
                      }
                      uint64_t v185 = v1330;
                      uint64_t v186 = HIDWORD(v1331);
                      if ((void *)v1330 != __s2) {
                        break;
                      }
                      if (HIDWORD(v1331))
                      {
                        uint64_t v187 = 0;
                        uint64_t v188 = 8 * HIDWORD(v1331);
                        unint64_t v189 = (void *)v1330;
                        while (*v189 != v184)
                        {
                          if (*v189 == -2) {
                            uint64_t v187 = v189;
                          }
                          ++v189;
                          v188 -= 8;
                          if (!v188)
                          {
                            if (!v187) {
                              goto LABEL_328;
                            }
                            char v178 = 0;
                            void *v187 = v184;
                            LODWORD(v1332) = v1332 - 1;
                            goto LABEL_353;
                          }
                        }
LABEL_352:
                        char v178 = 0;
                        goto LABEL_353;
                      }
LABEL_328:
                      unsigned int v190 = v1331;
                      if (HIDWORD(v1331) >= v1331) {
                        goto LABEL_331;
                      }
                      char v178 = 0;
                      ++HIDWORD(v1331);
                      *(void *)(v1330 + 8 * v186) = v184;
LABEL_353:
                      uint64_t v176 = (llvm *)((char *)v176 + 8);
                      if (v176 == v177)
                      {
                        if ((v178 & 1) == 0 || v175 && v1305 == 1)
                        {
                          sub_1CC274054((uint64_t)v1337);
                          unsigned int v200 = v1304;
                          unsigned int v201 = v1305;
                          if (v1305)
                          {
                            uint64_t v202 = 8 * v1305;
                            do
                            {
                              uint64_t v203 = *(void *)v200;
                              int v204 = *(_DWORD *)(*(void *)v200 + 20);
                              if ((v204 & 0x40000000) != 0) {
                                uint64_t v205 = *(void ***)(v203 - 8);
                              }
                              else {
                                uint64_t v205 = (void **)(v203 - 32 * (v204 & 0x7FFFFFF));
                              }
                              __src = *v205;
                              sub_1CD467E2C(a1 + 536, (uint64_t *)&__src)[1] = 0;
                              int v206 = sub_1CD50E484(a1 + 688, (uint64_t *)&__src);
                              unint64_t v207 = *((unsigned int *)v206 + 4);
                              if (v207 >= *((unsigned int *)v206 + 5)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)(v206[1] + 8 * v207) = v203;
                              ++*((_DWORD *)v206 + 4);
                              unsigned int v200 = (llvm *)((char *)v200 + 8);
                              v202 -= 8;
                            }
                            while (v202);
                            unsigned int v200 = v1304;
                            unsigned int v201 = v1305;
                          }
                          uint64_t v7 = (llvm::LLVMContext ***)*((void *)v200 + v201 - 1);
                          LODWORD(v1305) = v201 - 1;
                          if ((v178 & 1) == 0 && HIDWORD(v1331) != v1332)
                          {
                            if ((void *)v1330 == __s2) {
                              uint64_t v208 = HIDWORD(v1331);
                            }
                            else {
                              uint64_t v208 = v1331;
                            }
                            if (v208)
                            {
                              uint64_t v209 = 8 * v208;
                              unint64_t v210 = (unint64_t *)v1330;
                              while (*v210 >= 0xFFFFFFFFFFFFFFFELL)
                              {
                                ++v210;
                                v209 -= 8;
                                if (!v209) {
                                  goto LABEL_946;
                                }
                              }
                            }
                            else
                            {
                              unint64_t v210 = (unint64_t *)v1330;
                            }
                            unint64_t v465 = (unint64_t *)(v1330 + 8 * v208);
                            if (v210 != v465)
                            {
                              unint64_t v466 = *v210;
LABEL_893:
                              uint64_t v468 = *(void *)(a1 + 376);
                              uint64_t v467 = *(void *)(a1 + 384);
                              if (v467 == v468)
                              {
                                uint64_t v469 = *(unsigned int *)(a1 + 396);
                                v470 = (void *)(v467 + 8 * v469);
                                if (v469)
                                {
                                  uint64_t v471 = 0;
                                  uint64_t v472 = 8 * v469;
                                  while (*(void *)(v467 + v471) != v466)
                                  {
                                    v471 += 8;
                                    if (v472 == v471) {
                                      goto LABEL_911;
                                    }
                                  }
                                  v470 = (void *)(v467 + v471);
                                }
LABEL_911:
                                uint64_t v468 = *(void *)(a1 + 384);
                              }
                              else
                              {
                                uint64_t v473 = *(unsigned int *)(a1 + 392);
                                int v474 = v473 - 1;
                                unsigned int v475 = (v473 - 1) & ((v466 >> 4) ^ (v466 >> 9));
                                v470 = (void *)(v467 + 8 * v475);
                                uint64_t v476 = *v470;
                                if (*v470 == -1)
                                {
                                  v477 = 0;
LABEL_942:
                                  if (v477) {
                                    v470 = v477;
                                  }
                                  if (*v470 != v466) {
                                    v470 = (void *)(v467 + 8 * v473);
                                  }
                                }
                                else
                                {
                                  v477 = 0;
                                  int v478 = 1;
                                  while (v476 != v466)
                                  {
                                    if (v477) {
                                      BOOL v479 = 0;
                                    }
                                    else {
                                      BOOL v479 = v476 == -2;
                                    }
                                    if (v479) {
                                      v477 = v470;
                                    }
                                    unsigned int v480 = v475 + v478++;
                                    unsigned int v475 = v480 & v474;
                                    v470 = (void *)(v467 + 8 * (v480 & v474));
                                    uint64_t v476 = *v470;
                                    if (*v470 == -1) {
                                      goto LABEL_942;
                                    }
                                  }
                                }
                              }
                              BOOL v22 = v467 == v468;
                              v481 = (unsigned int *)(a1 + 396);
                              if (!v22) {
                                v481 = (unsigned int *)(a1 + 392);
                              }
                              if (v470 == (void *)(v467 + 8 * *v481))
                              {
                                __src = (char *)&v1312 + 8;
                                *(void *)&long long v1312 = 0x1000000000;
                                v1328[2] = a1 + 376;
                                v1355 = (unsigned __int8 *)v1357;
                                v1308 = (llvm::Value *)v1310;
                                uint64_t v1309 = 0x200000000;
                                v1357[0] = v466;
                                uint64_t v1356 = 0x100000001;
                                char v1258 = sub_1CC273AE8(a1, (uint64_t)&__src, (uint64_t)&v1355, (uint64_t)&v1308, 0);
                                sub_1CC274054((uint64_t)&__src);
                                uint64_t v482 = v1308;
                                if (v1309)
                                {
                                  uint64_t v483 = 8 * v1309;
                                  do
                                  {
                                    uint64_t v484 = *(void *)v482;
                                    int v485 = *(_DWORD *)(*(void *)v482 + 20);
                                    if ((v485 & 0x40000000) != 0) {
                                      size_t v486 = *(void ***)(v484 - 8);
                                    }
                                    else {
                                      size_t v486 = (void **)(v484 - 32 * (v485 & 0x7FFFFFF));
                                    }
                                    __n128 __dst = *v486;
                                    sub_1CD467E2C(a1 + 536, (uint64_t *)&__dst)[1] = 0;
                                    v487 = sub_1CD50E484(a1 + 688, (uint64_t *)&__dst);
                                    unint64_t v488 = *((unsigned int *)v487 + 4);
                                    if (v488 >= *((unsigned int *)v487 + 5)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *(void *)(v487[1] + 8 * v488) = v484;
                                    ++*((_DWORD *)v487 + 4);
                                    uint64_t v482 = (llvm::Value *)((char *)v482 + 8);
                                    v483 -= 8;
                                  }
                                  while (v483);
                                  uint64_t v482 = v1308;
                                }
                                if (v482 != (llvm::Value *)v1310) {
                                  free(v482);
                                }
                                if (v1355 != (unsigned __int8 *)v1357) {
                                  free(v1355);
                                }
                                v489 = (char *)__src;
                                if (v1312)
                                {
                                  uint64_t v490 = 8 * v1312;
                                  v491 = (char *)__src - 8;
                                  do
                                  {
                                    uint64_t v492 = *(void *)&v491[v490];
                                    *(void *)&v491[v490] = 0;
                                    if (v492) {
                                      (*(void (**)(uint64_t))(*(void *)v492 + 8))(v492);
                                    }
                                    v490 -= 8;
                                  }
                                  while (v490);
                                  v489 = (char *)__src;
                                }
                                if (v489 != (char *)&v1312 + 8) {
                                  free(v489);
                                }
                                v1274 |= v1258;
                              }
                              int v493 = v210 + 1;
                              while (v493 != v465)
                              {
                                unint64_t v494 = *v493++;
                                unint64_t v466 = v494;
                                if (v494 <= 0xFFFFFFFFFFFFFFFDLL)
                                {
                                  unint64_t v210 = v493 - 1;
                                  goto LABEL_893;
                                }
                              }
                            }
                          }
LABEL_946:
                          char v217 = v1274;
LABEL_947:
                          if ((void *)v1330 != __s2) {
                            free((void *)v1330);
                          }
                          if (v217)
                          {
                            char v211 = 1;
                            goto LABEL_952;
                          }
LABEL_951:
                          sub_1CC274118((uint64_t)v1337, 0);
                          char v211 = 0;
LABEL_952:
                          unsigned int v145 = v7;
LABEL_953:
                          if (v1304 != (llvm *)v1306) {
                            free(v1304);
                          }
                          if (v1334 != &v1336) {
                            free(v1334);
                          }
                          int v495 = (llvm::LLVMContext ****)v1337[0];
                          if (LODWORD(v1337[1]))
                          {
                            uint64_t v496 = 8 * LODWORD(v1337[1]);
                            v497 = (char *)v1337[0] - 8;
                            do
                            {
                              uint64_t v498 = *(void *)&v497[v496];
                              *(void *)&v497[v496] = 0;
                              if (v498) {
                                (*(void (**)(uint64_t))(*(void *)v498 + 8))(v498);
                              }
                              v496 -= 8;
                            }
                            while (v496);
                            int v495 = (llvm::LLVMContext ****)v1337[0];
                          }
                          if (v495 != &v1338) {
                            free(v495);
                          }
                          int v499 = *((_DWORD *)v145 + 5);
                          if ((v499 & 0x40000000) != 0) {
                            uint64_t v500 = (llvm::Type ***)*(v145 - 1);
                          }
                          else {
                            uint64_t v500 = &v145[-4 * (v499 & 0x7FFFFFF)];
                          }
                          uint64_t v501 = v145[5];
                          unint64_t v502 = *v500;
                          unint64_t v503 = (*v500)[1];
                          if ((!v503 || *((void *)v503 + 1))
                            && (*(unsigned int (**)(void, llvm::LLVMContext **, llvm::Type *))(**(void **)(a1 + 48) + 1144))(*(void *)(a1 + 48), *v145, *v502)&& *((unsigned __int8 *)v502 + 16) >= 0x1Cu&& v501 == (llvm::LLVMContext **)v502[5]&& (v505 = v145[1]) != 0)
                          {
                            while (*((llvm::LLVMContext ***)v505[3] + 5) == v501)
                            {
                              char v504 = 0;
                              v505 = (llvm::LLVMContext **)v505[1];
                              if (!v505) {
                                goto LABEL_974;
                              }
                            }
                            v506 = v502[1];
                            if (v506)
                            {
                              v507 = v502[1];
                              do
                              {
                                uint64_t v508 = *((void *)v507 + 3);
                                if (*(llvm::LLVMContext ***)(v508 + 40) != v501)
                                {
                                  unsigned int v509 = *(unsigned __int8 *)(v508 + 16) - 60;
                                  BOOL v80 = v509 > 0x17;
                                  int v510 = (1 << v509) & 0x800003;
                                  if (!v80 && v510 != 0) {
                                    goto LABEL_973;
                                  }
                                }
                                v507 = (llvm::Type *)*((void *)v507 + 1);
                              }
                              while (v507);
                              char v504 = 0;
                              v1337[1] = 0;
                              v1337[0] = 0;
                              LODWORD(v1338) = 0;
                              while (2)
                              {
                                size_t v512 = *(llvm::LLVMContext ***)(*((void *)v506 + 3) + 40);
                                long long __s2 = v512;
                                if (v512 == v501) {
                                  goto LABEL_1063;
                                }
                                if (!v1338)
                                {
                                  unsigned int v520 = 0;
                                  goto LABEL_1005;
                                }
                                unsigned int v513 = (v1338 - 1) & ((v512 >> 4) ^ (v512 >> 9));
                                v514 = (uint64_t *)((char *)v1337[0] + 16 * v513);
                                uint64_t v515 = *v514;
                                if (v512 != (llvm::LLVMContext **)*v514)
                                {
                                  v516 = 0;
                                  int v517 = 1;
                                  while (v515 != -4096)
                                  {
                                    if (v516) {
                                      BOOL v518 = 0;
                                    }
                                    else {
                                      BOOL v518 = v515 == -8192;
                                    }
                                    if (v518) {
                                      v516 = v514;
                                    }
                                    unsigned int v519 = v513 + v517++;
                                    unsigned int v513 = v519 & (v1338 - 1);
                                    v514 = (uint64_t *)((char *)v1337[0] + 16 * v513);
                                    uint64_t v515 = *v514;
                                    if (v512 == (llvm::LLVMContext **)*v514) {
                                      goto LABEL_1006;
                                    }
                                  }
                                  if (v516) {
                                    unsigned int v520 = v516;
                                  }
                                  else {
                                    unsigned int v520 = v514;
                                  }
LABEL_1005:
                                  v514 = sub_1CB8463E8((uint64_t)v1337, (uint64_t)&__s2, (uint64_t *)&__s2, v520);
                                  uint64_t *v514 = (uint64_t)__s2;
                                  v514[1] = 0;
                                }
LABEL_1006:
                                uint64_t v521 = v514[1];
                                if (v521) {
                                  goto LABEL_1055;
                                }
                                unsigned int v522 = (char *)__s2 + 40;
                                for (uint64_t i = (char *)*((void *)__s2 + 6); i != v522; uint64_t i = (char *)*((void *)i + 1))
                                {
                                  uint64_t v524 = i - 24;
                                  if (!i) {
                                    uint64_t v524 = 0;
                                  }
                                  if (v524[16] != 83)
                                  {
                                    unsigned int v525 = *(i - 8) - 38;
                                    BOOL v80 = v525 > 0x38;
                                    uint64_t v526 = (1 << v525) & 0x100060000000001;
                                    if (v80 || v526 == 0) {
                                      unsigned int v522 = i;
                                    }
                                    else {
                                      unsigned int v522 = (char *)*((void *)i + 1);
                                    }
                                    break;
                                  }
                                }
                                uint64_t v528 = operator new(0x60uLL);
                                unint64_t v529 = (char *)(v528 + 8);
                                v528[13] = v528[13] & 0x38000000 | 1;
                                *(void *)uint64_t v528 = 0;
                                *((void *)v528 + 1) = 0;
                                *((void *)v528 + 2) = 0;
                                *((void *)v528 + 3) = v528 + 8;
                                unint64_t v530 = *v502;
                                if (v522) {
                                  uint64_t v531 = (llvm::Instruction *)(v522 - 24);
                                }
                                else {
                                  uint64_t v531 = 0;
                                }
                                LOWORD(v1314) = 257;
                                llvm::TruncInst::TruncInst((llvm::TruncInst *)(v528 + 8), (llvm::Value *)v145, v530, (const char **)&__src, v531);
                                v514[1] = (uint64_t)v529;
                                uint64_t v532 = *(void *)(a1 + 200);
                                uint64_t v533 = *(unsigned int *)(a1 + 212);
                                if (v532 == *(void *)(a1 + 192))
                                {
                                  if (v533)
                                  {
                                    unint64_t v534 = 0;
                                    uint64_t v535 = 8 * v533;
                                    unint64_t v536 = *(char ***)(a1 + 200);
                                    while (*v536 != v529)
                                    {
                                      if (*v536 == (char *)-2) {
                                        unint64_t v534 = v536;
                                      }
                                      ++v536;
                                      v535 -= 8;
                                      if (!v535)
                                      {
                                        if (!v534) {
                                          goto LABEL_1030;
                                        }
                                        *unint64_t v534 = v529;
                                        --*(_DWORD *)(a1 + 216);
                                        break;
                                      }
                                    }
LABEL_1054:
                                    uint64_t v521 = v514[1];
LABEL_1055:
                                    if (*(void *)v506)
                                    {
                                      **((void **)v506 + 2) = *((void *)v506 + 1);
                                      uint64_t v547 = *((void *)v506 + 1);
                                      if (v547) {
                                        *(void *)(v547 + 16) = *((void *)v506 + 2);
                                      }
                                    }
                                    *(void *)v506 = v521;
                                    if (v521)
                                    {
                                      uint64_t v550 = *(void *)(v521 + 8);
                                      uint64_t v548 = (llvm::Type **)(v521 + 8);
                                      uint64_t v549 = v550;
                                      *((void *)v506 + 1) = v550;
                                      if (v550) {
                                        *(void *)(v549 + 16) = (char *)v506 + 8;
                                      }
                                      *((void *)v506 + 2) = v548;
                                      *uint64_t v548 = v506;
                                    }
                                    char v504 = 1;
LABEL_1063:
                                    v506 = (llvm::Type *)*((void *)v506 + 1);
                                    if (!v506)
                                    {
                                      v896 = v1337[0];
                                      goto LABEL_1677;
                                    }
                                    continue;
                                  }
LABEL_1030:
                                  unsigned int v537 = *(_DWORD *)v1280;
                                  if (v533 < *(_DWORD *)v1280)
                                  {
                                    _DWORD *v1288 = v533 + 1;
                                    *(void *)(v532 + 8 * v533) = v529;
                                    goto LABEL_1054;
                                  }
                                }
                                else
                                {
                                  unsigned int v537 = *(_DWORD *)v1280;
                                }
                                break;
                              }
                              if (3 * v537 <= 4 * ((int)v533 - *(_DWORD *)(a1 + 216)))
                              {
                                if (v537 >= 0x40) {
                                  v537 *= 2;
                                }
                                else {
                                  unsigned int v537 = 128;
                                }
                              }
                              else if (v537 - v533 >= v537 >> 3)
                              {
                                goto LABEL_1035;
                              }
                              llvm::SmallPtrSetImplBase::Grow(v11, v537);
                              unsigned int v537 = *(_DWORD *)(a1 + 208);
                              uint64_t v532 = *(void *)(a1 + 200);
LABEL_1035:
                              unsigned int v538 = v537 - 1;
                              unsigned int v539 = (v537 - 1) & ((v529 >> 4) ^ (v529 >> 9));
                              v540 = (char **)(v532 + 8 * v539);
                              int v541 = *v540;
                              if (*v540 == (char *)-1)
                              {
                                uint64_t v542 = 0;
LABEL_1047:
                                if (v542) {
                                  unint64_t v546 = v542;
                                }
                                else {
                                  unint64_t v546 = v540;
                                }
                                if (*v546 != v529)
                                {
                                  if (*v546 == (char *)-2) {
                                    --*(_DWORD *)(a1 + 216);
                                  }
                                  else {
                                    ++*v1288;
                                  }
                                  *unint64_t v546 = v529;
                                }
                              }
                              else
                              {
                                uint64_t v542 = 0;
                                int v543 = 1;
                                while (v541 != v529)
                                {
                                  if (v542) {
                                    BOOL v544 = 0;
                                  }
                                  else {
                                    BOOL v544 = v541 == (char *)-2;
                                  }
                                  if (v544) {
                                    uint64_t v542 = v540;
                                  }
                                  unsigned int v545 = v539 + v543++;
                                  unsigned int v539 = v545 & v538;
                                  v540 = (char **)(v532 + 8 * (v545 & v538));
                                  int v541 = *v540;
                                  if (*v540 == (char *)-1) {
                                    goto LABEL_1047;
                                  }
                                }
                              }
                              goto LABEL_1054;
                            }
                            v896 = 0;
                            char v504 = 0;
                            v1337[1] = 0;
                            v1337[0] = 0;
                            LODWORD(v1338) = 0;
LABEL_1677:
                            MEMORY[0x1D25D9CD0](v896, 8);
                          }
                          else
                          {
LABEL_973:
                            char v504 = 0;
                          }
LABEL_974:
                          LOBYTE(v25) = v211 | v504;
                          return v25 & 1;
                        }
                        if (v1305)
                        {
                          uint64_t v212 = v1304;
                          uint64_t v213 = 8 * v1305;
                          do
                          {
                            uint64_t v214 = *(void *)v212;
                            int v215 = *(_DWORD *)(*(void *)v212 + 20);
                            if ((v215 & 0x40000000) != 0) {
                              int v216 = *(void ***)(v214 - 8);
                            }
                            else {
                              int v216 = (void **)(v214 - 32 * (v215 & 0x7FFFFFF));
                            }
                            __src = *v216;
                            sub_1CD467E2C(a1 + 536, (uint64_t *)&__src)[1] = v7;
                            uint64_t v212 = (llvm *)((char *)v212 + 8);
                            v213 -= 8;
                          }
                          while (v213);
                        }
LABEL_390:
                        char v217 = 0;
                        goto LABEL_947;
                      }
                    }
                    unsigned int v190 = v1331;
LABEL_331:
                    if (3 * v190 <= 4 * (HIDWORD(v1331) - (int)v1332))
                    {
                      if (v190 >= 0x40) {
                        v190 *= 2;
                      }
                      else {
                        unsigned int v190 = 128;
                      }
                    }
                    else if (v190 - HIDWORD(v1331) >= v190 >> 3)
                    {
                      goto LABEL_333;
                    }
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s2, v190);
                    unsigned int v190 = v1331;
                    uint64_t v185 = v1330;
LABEL_333:
                    unsigned int v191 = v190 - 1;
                    unsigned int v192 = (v190 - 1) & ((v184 >> 4) ^ (v184 >> 9));
                    int v193 = (void *)(v185 + 8 * v192);
                    uint64_t v194 = *v193;
                    if (*v193 == -1)
                    {
                      unsigned int v195 = 0;
LABEL_345:
                      if (v195) {
                        int v199 = v195;
                      }
                      else {
                        int v199 = v193;
                      }
                      if (*v199 != v184)
                      {
                        if (*v199 == -2) {
                          LODWORD(v1332) = v1332 - 1;
                        }
                        else {
                          ++HIDWORD(v1331);
                        }
                        char v178 = 0;
                        *int v199 = v184;
                        goto LABEL_353;
                      }
                    }
                    else
                    {
                      unsigned int v195 = 0;
                      int v196 = 1;
                      while (v194 != v184)
                      {
                        if (v195) {
                          BOOL v197 = 0;
                        }
                        else {
                          BOOL v197 = v194 == -2;
                        }
                        if (v197) {
                          unsigned int v195 = v193;
                        }
                        unsigned int v198 = v192 + v196++;
                        unsigned int v192 = v198 & v191;
                        int v193 = (void *)(v185 + 8 * (v198 & v191));
                        uint64_t v194 = *v193;
                        if (*v193 == -1) {
                          goto LABEL_345;
                        }
                      }
                    }
                    goto LABEL_352;
                  }
                }
                if (v152) {
                  BOOL v173 = v155 == 0;
                }
                else {
                  BOOL v173 = 1;
                }
                if (!v173)
                {
                  __int16 v174 = *((unsigned char *)v145 + 16) == 67 ? -4096 : 3840;
                  if (((unsigned __int16)v174 & *(_WORD *)(v150 + 358 * v152 + 2 * v155 + 73672)) == 0)
                  {
                    sub_1CC274054((uint64_t)v1337);
                    llvm::Instruction::moveAfter((llvm::Instruction *)v145, v148);
                    char v211 = 1;
                    goto LABEL_953;
                  }
                }
                goto LABEL_309;
              }
              int v124 = 1;
              while (v123 != (llvm::LLVMContext **)-4096)
              {
                int v125 = v122 + v124++;
                uint64_t v122 = v125 & v121;
                uint64_t v123 = *(llvm::LLVMContext ***)(v120 + 16 * v122);
                if (v119 == v123) {
                  goto LABEL_195;
                }
              }
            }
            uint64_t v126 = 0;
            goto LABEL_197;
          }
          __src = v49;
          *(void *)&long long v1312 = v50;
        }
        else
        {
          __src = v49;
          *(void *)&long long v1312 = v50;
          if (v46)
          {
            uint64_t v110 = sub_1CB87E200((unsigned __int8 *)v1337);
LABEL_175:
            unint64_t v112 = v110;
            int v113 = v111;
            if (v51) {
              unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&__src);
            }
            else {
              unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__src);
            }
            if ((v113 != 1 || v115 == 1) && v112 < ExtendedSizeInBits) {
              goto LABEL_188;
            }
            goto LABEL_180;
          }
        }
        uint64_t v110 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1337);
        goto LABEL_175;
      }
      int v108 = v49 - 120 < 0x20;
    }
    else
    {
      if ((*(_DWORD *)(v50 + 8) & 0xFE) == 0x12) {
        int v109 = *(unsigned __int8 *)(**(void **)(v50 + 16) + 8);
      }
      else {
        int v109 = *(_DWORD *)(v50 + 8);
      }
      int v108 = v109 == 13;
    }
    if (v54 != v108) {
      goto LABEL_188;
    }
    goto LABEL_168;
  }
  if (!a2 || (v27 - 83) < 0xFFFFFFFE) {
    goto LABEL_519;
  }
  unsigned int v55 = *(unsigned char **)(a1 + 48);
  if (v55[16]) {
    goto LABEL_52;
  }
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v55 + 24))(v55))
  {
    int v27 = *((unsigned __int8 *)v7 + 16);
    if (v27 == 82) {
      goto LABEL_52;
    }
  }
  v1337[1] = 0;
  v1337[0] = 0;
  LODWORD(v1338) = 0;
  uint64_t v66 = v7[1];
  if (!v66) {
LABEL_211:
  }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  char v67 = 0;
  do
  {
    int v68 = v66;
    unsigned int v69 = (llvm::LLVMContext ***)(v66 + 1);
    uint64_t v66 = (llvm::LLVMContext **)v66[1];
    uint64_t v70 = v69[2];
    if (*((unsigned char *)v70 + 16) == 83) {
      continue;
    }
    uint64_t v71 = (uint64_t)v70[5];
    if ((llvm::LLVMContext **)v71 == v7[5]) {
      continue;
    }
    __src = 0;
    unsigned int v72 = v1338;
    char v73 = sub_1CC277148((uint64_t)v1337[0], (int)v1338, v71, &__src);
    uint64_t v74 = __src;
    if ((v73 & 1) == 0)
    {
      if (4 * LODWORD(v1337[1]) + 4 < 3 * v72)
      {
        if (v72 + ~LODWORD(v1337[1]) - HIDWORD(v1337[1]) > v72 >> 3) {
          goto LABEL_87;
        }
        int v75 = v72;
      }
      else
      {
        int v75 = 2 * v72;
      }
      sub_1CC2771DC((uint64_t)v1337, v75);
      __src = 0;
      sub_1CC277148((uint64_t)v1337[0], (int)v1338, v71, &__src);
      uint64_t v74 = __src;
LABEL_87:
      ++LODWORD(v1337[1]);
      if (*v74 != -4096) {
        --HIDWORD(v1337[1]);
      }
      void *v74 = v71;
      v74[1] = 0;
LABEL_90:
      uint64_t v76 = v71 + 40;
      for (uint64_t j = *(void *)(v71 + 48); j != v76; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v78 = j - 24;
        if (!j) {
          uint64_t v78 = 0;
        }
        if (*(unsigned char *)(v78 + 16) != 83)
        {
          unsigned int v79 = *(unsigned __int8 *)(j - 8) - 38;
          BOOL v80 = v79 > 0x38;
          uint64_t v81 = (1 << v79) & 0x100060000000001;
          if (v80 || v81 == 0) {
            uint64_t v76 = j;
          }
          else {
            uint64_t v76 = *(void *)(j + 8);
          }
          break;
        }
      }
      int v83 = *((unsigned __int8 *)v7 + 16) - 28;
      __int16 v84 = *((_WORD *)v7 + 9) & 0x3F;
      unsigned int v85 = *(v7 - 8);
      uint64_t v86 = (uint64_t)*(v7 - 4);
      if (v76) {
        uint64_t v87 = v76 - 24;
      }
      else {
        uint64_t v87 = 0;
      }
      LOWORD(v1314) = 257;
      uint64_t v88 = llvm::CmpInst::Create(v83, v84, v85, v86, (const char **)&__src, v87);
      v74[1] = v88;
      uint64_t v89 = v88;
      uint64_t v90 = v7[6];
      long long __s2 = v90;
      if (v90) {
        llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v90, 2);
      }
      unsigned int v91 = (void **)(v89 + 48);
      if (&__s2 != (void **)(v89 + 48))
      {
        unsigned int v92 = (unsigned __int8 *)*v91;
        if (!*v91) {
          goto LABEL_109;
        }
        int v99 = *v92;
        if ((v99 - 4) > 0x1E)
        {
          if ((v99 - 3) >= 0xFFFFFFFE) {
            uint64_t v102 = *v91;
          }
          else {
            uint64_t v102 = 0;
          }
          if ((v99 - 3) < 0xFFFFFFFE)
          {
            if (v99 == 3) {
              *((void *)v92 + 1) = 0;
            }
            goto LABEL_109;
          }
          unint64_t v101 = (unint64_t)v102 + 8;
        }
        else if ((v92[1] & 0x7F) != 2 && !*((_DWORD *)v92 + 3) {
               || (uint64_t v100 = *((void *)v92 + 2), (v100 & 4) == 0)
        }
               || (unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_109:
          unsigned int v93 = (unsigned __int8 *)__s2;
          *unsigned int v91 = __s2;
          if (v93)
          {
            llvm::MetadataTracking::retrack((uint64_t)&__s2, v93, (uint64_t)(v89 + 48));
            long long __s2 = 0;
          }
          goto LABEL_111;
        }
        __src = v89 + 48;
        sub_1CC5FA668(v101 + 16, &__src);
        goto LABEL_109;
      }
      if (__s2)
      {
        int v103 = *(unsigned __int8 *)__s2;
        if ((v103 - 4) > 0x1E)
        {
          if ((v103 - 3) >= 0xFFFFFFFE) {
            int v106 = __s2;
          }
          else {
            int v106 = 0;
          }
          if ((v103 - 3) < 0xFFFFFFFE)
          {
            if (v103 == 3) {
              *((void *)__s2 + 1) = 0;
            }
            goto LABEL_111;
          }
          unint64_t v105 = (unint64_t)v106 + 8;
        }
        else
        {
          if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
            goto LABEL_111;
          }
          uint64_t v104 = *((void *)__s2 + 2);
          if ((v104 & 4) == 0) {
            goto LABEL_111;
          }
          unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFF8;
          if (!v105) {
            goto LABEL_111;
          }
        }
        __src = &__s2;
        sub_1CC5FA668(v105 + 16, &__src);
      }
LABEL_111:
      uint64_t v94 = (llvm::LLVMContext ***)v74[1];
      goto LABEL_112;
    }
    uint64_t v94 = (llvm::LLVMContext ***)*((void *)__src + 1);
    if (!v94) {
      goto LABEL_90;
    }
LABEL_112:
    if (*v68)
    {
      *(void *)v68[2] = v68[1];
      uint64_t v95 = v68[1];
      if (v95) {
        *((void *)v95 + 2) = v68[2];
      }
    }
    *int v68 = (llvm::LLVMContext *)v94;
    if (v94)
    {
      BOOL v98 = v94[1];
      uint64_t v96 = v94 + 1;
      int v97 = v98;
      *unsigned int v69 = v98;
      if (v98) {
        v97[2] = (llvm::LLVMContext *)v69;
      }
      v68[2] = (llvm::LLVMContext *)v96;
      *uint64_t v96 = v68;
    }
    char v67 = 1;
  }
  while (v66);
  if (!v7[1]) {
    goto LABEL_211;
  }
  MEMORY[0x1D25D9CD0](v1337[0], 8);
  if (v67) {
    goto LABEL_214;
  }
  int v27 = *((unsigned __int8 *)v7 + 16);
  int v36 = (_DWORD *)(a1 + 212);
LABEL_52:
  if (v27 != 81) {
    goto LABEL_403;
  }
  uint64_t v56 = (uint64_t)*(v7 - 8);
  if (!v56) {
    goto LABEL_403;
  }
  uint64_t v57 = (uint64_t)*(v7 - 4);
  if (!v57) {
    goto LABEL_403;
  }
  int v58 = *((_WORD *)v7 + 9) & 0x3F;
  if (v58 == 34)
  {
    int v149 = *(unsigned __int8 *)(v57 + 16);
    if (v149 == 5)
    {
      if (*(_WORD *)(v57 + 18) == 13)
      {
        uint64_t v161 = (uint64_t *)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF));
        uint64_t v162 = *v161;
        if (*v161)
        {
          uint64_t v163 = v161[4];
          if (v163)
          {
            if (v56 == v162 || v56 == v163) {
              goto LABEL_403;
            }
          }
        }
      }
    }
    else if (v149 == 41)
    {
      int v60 = *(const llvm::APFloat **)(v57 - 64);
      if (v60)
      {
        int v61 = *(llvm::Constant **)(v57 - 32);
        if (v61)
        {
          if ((const llvm::APFloat *)v56 == v60 || (llvm::Constant *)v56 == v61) {
            goto LABEL_839;
          }
        }
      }
    }
    v1337[0] = 0;
    __src = v1337;
    uint64_t v165 = *(void *)(v57 + 8);
    if (!v165 || *(void *)(v165 + 8)) {
      goto LABEL_265;
    }
    if (v149 == 5)
    {
      if (*(_WORD *)(v57 + 18) != 30) {
        goto LABEL_265;
      }
      uint64_t v220 = v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF);
      if (!*(void *)v220) {
        goto LABEL_265;
      }
      v1337[0] = *(void **)v220;
      if (!sub_1CBF68974((uint64_t)&v1312, *(llvm::Constant **)(v220 + 32))) {
        goto LABEL_265;
      }
    }
    else
    {
      if (v149 != 58) {
        goto LABEL_265;
      }
      if (!*(void *)(v57 - 64)) {
        goto LABEL_265;
      }
      v1337[0] = *(void **)(v57 - 64);
      if ((sub_1CBF687D0((uint64_t)&v1312, *(llvm::Constant **)(v57 - 32)) & 1) == 0) {
        goto LABEL_265;
      }
    }
    int v60 = (const llvm::APFloat *)v1337[0];
    if (!v1337[0]) {
      goto LABEL_403;
    }
    unsigned int v221 = *(unsigned __int8 *)(v57 + 16);
    if (v221 < 0x1C) {
      goto LABEL_403;
    }
    unsigned int v169 = v221 - 59;
    int v61 = (llvm::Constant *)v56;
LABEL_292:
    uint64_t v56 = v57;
    goto LABEL_293;
  }
  if (v58 != 36)
  {
    v1337[0] = 0;
    __src = v1337;
    goto LABEL_265;
  }
  int v59 = *(unsigned __int8 *)(v56 + 16);
  if (v59 == 5)
  {
    if (*(_WORD *)(v56 + 18) != 13) {
      goto LABEL_249;
    }
    unint64_t v156 = (uint64_t *)(v56 - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF));
    uint64_t v157 = *v156;
    if (!*v156) {
      goto LABEL_249;
    }
    uint64_t v158 = v156[4];
    if (!v158) {
      goto LABEL_249;
    }
    if (v57 != v157 && v57 != v158) {
      goto LABEL_249;
    }
    goto LABEL_403;
  }
  if (v59 == 41)
  {
    int v60 = *(const llvm::APFloat **)(v56 - 64);
    if (v60)
    {
      int v61 = *(llvm::Constant **)(v56 - 32);
      if (v61)
      {
        if ((const llvm::APFloat *)v57 == v60 || (llvm::Constant *)v57 == v61) {
          goto LABEL_294;
        }
      }
    }
  }
LABEL_249:
  v1337[0] = 0;
  __src = v1337;
  uint64_t v160 = *(void *)(v56 + 8);
  if (!v160 || *(void *)(v160 + 8)) {
    goto LABEL_265;
  }
  if (v59 == 5)
  {
    if (*(_WORD *)(v56 + 18) != 30) {
      goto LABEL_265;
    }
    uint64_t v218 = v56 - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF);
    if (!*(void *)v218) {
      goto LABEL_265;
    }
    v1337[0] = *(void **)v218;
    if (!sub_1CBF68974((uint64_t)&v1312, *(llvm::Constant **)(v218 + 32))) {
      goto LABEL_265;
    }
LABEL_394:
    int v60 = (const llvm::APFloat *)v1337[0];
    if (!v1337[0]) {
      goto LABEL_403;
    }
    unsigned int v219 = *(unsigned __int8 *)(v56 + 16);
    if (v219 < 0x1C) {
      goto LABEL_403;
    }
    unsigned int v169 = v219 - 59;
    int v61 = (llvm::Constant *)v57;
LABEL_293:
    if (v169 < 0xFFFFFFEE) {
      goto LABEL_403;
    }
LABEL_294:
    uint64_t v57 = v56;
LABEL_839:
    uint64_t v437 = *(void *)(a1 + 48);
    unint64_t v439 = sub_1CB87DC14(v437, *(void *)(a1 + 720), *(llvm::EVT **)v57, 0);
    BOOL v440 = 0;
    uint64_t v441 = *(void *)(v57 + 8);
    if (v441)
    {
      int v442 = -1;
      do
      {
        BOOL v440 = v442 == 0;
        if (!v442) {
          break;
        }
        uint64_t v441 = *(void *)(v441 + 8);
        ++v442;
      }
      while (v441);
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))(*(void *)v437 + 1432))(v437, 77, v439, v438, v440))
    {
      if ((*(llvm::LLVMContext ***)(v57 + 40) == v7[5] || (uint64_t v443 = *(void *)(v57 + 8)) != 0 && !*(void *)(v443 + 8))
        && sub_1CC277358(a1, v57, v60, v61, (llvm::ValueAsMetadata *)v7, 301))
      {
        goto LABEL_848;
      }
    }
    goto LABEL_404;
  }
  if (v59 == 58)
  {
    if (*(void *)(v56 - 64))
    {
      v1337[0] = *(void **)(v56 - 64);
      if (sub_1CBF687D0((uint64_t)&v1312, *(llvm::Constant **)(v56 - 32))) {
        goto LABEL_394;
      }
    }
  }
LABEL_265:
  if (v58 != 32) {
    goto LABEL_403;
  }
  int v166 = *(unsigned __int8 *)(v56 + 16);
  if (v166 != 5)
  {
    if (v166 != 41) {
      goto LABEL_279;
    }
    int v60 = *(const llvm::APFloat **)(v56 - 64);
    if (!v60) {
      goto LABEL_279;
    }
    int v61 = *(llvm::Constant **)(v56 - 32);
    if (!v61) {
      goto LABEL_279;
    }
LABEL_274:
    if (!sub_1CBF535C4((uint64_t)&__s2, (llvm::Constant *)v57)
      || (sub_1CBF5250C((uint64_t)&v1308, v60) & 1) == 0 && (sub_1CBF5250C((uint64_t)&v1304, v61) & 1) == 0)
    {
      goto LABEL_279;
    }
    unsigned int v168 = *(unsigned __int8 *)(v56 + 16);
    if (v168 >= 0x1C)
    {
      unsigned int v169 = v168 - 59;
      goto LABEL_293;
    }
    goto LABEL_403;
  }
  if (*(_WORD *)(v56 + 18) == 13)
  {
    int v167 = (const llvm::APFloat **)(v56 - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF));
    int v60 = *v167;
    if (*v167)
    {
      int v61 = v167[4];
      if (v61) {
        goto LABEL_274;
      }
    }
  }
LABEL_279:
  if (sub_1CBF535C4((uint64_t)&__s2, (llvm::Constant *)v56))
  {
    int v170 = *(unsigned __int8 *)(v57 + 16);
    if (v170 == 5)
    {
      if (*(_WORD *)(v57 + 18) != 13) {
        goto LABEL_403;
      }
      uint64_t v171 = v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF);
      int v60 = *(const llvm::APFloat **)v171;
      if (!*(void *)v171) {
        goto LABEL_403;
      }
      int v61 = *(llvm::Constant **)(v171 + 32);
      if (!v61) {
        goto LABEL_403;
      }
    }
    else
    {
      if (v170 != 41) {
        goto LABEL_403;
      }
      int v60 = *(const llvm::APFloat **)(v57 - 64);
      if (!v60) {
        goto LABEL_403;
      }
      int v61 = *(llvm::Constant **)(v57 - 32);
      if (!v61) {
        goto LABEL_403;
      }
    }
    if (sub_1CBF5250C((uint64_t)&v1308, v60) & 1) != 0 || (sub_1CBF5250C((uint64_t)&v1304, v61))
    {
      unsigned int v172 = *(unsigned __int8 *)(v57 + 16);
      if (v172 >= 0x1C)
      {
        unsigned int v169 = v172 - 59;
        goto LABEL_292;
      }
    }
  }
LABEL_403:
  int v60 = (const llvm::APFloat *)*(v7 - 8);
  if (*((unsigned __int8 *)v60 + 16) >= 0x15u)
  {
    int v226 = *(v7 - 4);
    int v227 = *((_WORD *)v7 + 9) & 0x3F;
    if (v227 == 32)
    {
      if ((sub_1CBF687D0((uint64_t)&__src, (llvm::Constant *)*(v7 - 4)) & 1) == 0) {
        goto LABEL_404;
      }
      unint64_t v228 = 1;
    }
    else
    {
      if (v227 != 33 || (sub_1CBF535C4((uint64_t)&__src, (llvm::Constant *)*(v7 - 4)) & 1) == 0) {
        goto LABEL_404;
      }
      unint64_t v228 = -1;
    }
    uint64_t v229 = (llvm::Constant *)llvm::ConstantInt::get(*v226, v228, 0);
    uint64_t v230 = *((void *)v60 + 1);
    if (v230)
    {
      int v61 = v229;
      do
      {
        uint64_t v57 = *(void *)(v230 + 24);
        int v231 = *(unsigned __int8 *)(v57 + 16);
        if (v231 == 5)
        {
          if (*(_WORD *)(v57 + 18) == 13)
          {
            unsigned int v232 = (void **)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF));
            if (v60 == *v232 && v229 == v232[4])
            {
              int v60 = *(const llvm::APFloat **)(v57 - 64);
              int v61 = *(llvm::Constant **)(v57 - 32);
              goto LABEL_839;
            }
          }
        }
        else if (v231 == 41 && v60 == *(const llvm::APFloat **)(v57 - 64) && v229 == *(llvm::Constant **)(v57 - 32))
        {
          goto LABEL_839;
        }
        uint64_t v230 = *(void *)(v230 + 8);
      }
      while (v230);
    }
  }
LABEL_404:
  if (*((unsigned __int8 *)*(v7 - 8) + 16) <= 0x14u && *((unsigned __int8 *)*(v7 - 4) + 16) < 0x15u) {
    goto LABEL_487;
  }
  int v222 = *((_WORD *)v7 + 9) & 0x3F;
  if (v222 == 34) {
    uint64_t v223 = (unsigned __int8 *)*(v7 - 8);
  }
  else {
    uint64_t v223 = (unsigned __int8 *)*(v7 - 4);
  }
  if (v222 == 34) {
    uint64_t v224 = (unsigned __int8 *)*(v7 - 4);
  }
  else {
    uint64_t v224 = (unsigned __int8 *)*(v7 - 8);
  }
  if (v222 == 34) {
    int v225 = 36;
  }
  else {
    int v225 = *((_WORD *)v7 + 9) & 0x3F;
  }
  if (v225 != 32)
  {
    if (v225 != 33) {
      goto LABEL_440;
    }
    if ((sub_1CBF535C4((uint64_t)&__src, (llvm::Constant *)v223) & 1) == 0) {
      goto LABEL_487;
    }
LABEL_441:
    if (v223[16] >= 0x15u) {
      unsigned int v234 = v223;
    }
    else {
      unsigned int v234 = v224;
    }
    uint64_t v235 = *((void *)v234 + 1);
    if (!v235) {
      goto LABEL_487;
    }
    v1289 = v36;
    v1273 = (uint64_t *)&v1312;
    while (1)
    {
      uint64_t v236 = *(void *)(v235 + 24);
      int v237 = *(unsigned __int8 *)(v236 + 16);
      if (v237 == 5)
      {
        if (*(_WORD *)(v236 + 18) != 15) {
          goto LABEL_454;
        }
        uint64_t v239 = (unsigned __int8 **)(v236 - 32 * (*(_DWORD *)(v236 + 20) & 0x7FFFFFF));
        if (v223 != *v239) {
          goto LABEL_454;
        }
        unint64_t v238 = v239[4];
      }
      else
      {
        if (v237 != 43 || v223 != *(unsigned __int8 **)(v236 - 64)) {
          goto LABEL_454;
        }
        unint64_t v238 = *(unsigned __int8 **)(v236 - 32);
      }
      if (v224 == v238) {
        goto LABEL_481;
      }
LABEL_454:
      v1308 = 0;
      v1304 = 0;
      __src = v223;
      *(void *)&long long v1312 = &v1304;
      *((void *)&v1312 + 1) = 0;
      int v240 = *(unsigned __int8 *)(v236 + 16);
      if (v240 == 5)
      {
        if (*(_WORD *)(v236 + 18) != 13) {
          goto LABEL_479;
        }
        uint64_t v241 = v236 - 32 * (*(_DWORD *)(v236 + 20) & 0x7FFFFFF);
        if (v223 != *(unsigned __int8 **)v241
          || (sub_1CBF5295C((uint64_t)&v1312, *(llvm::Constant **)(v241 + 32)) & 1) == 0)
        {
          goto LABEL_479;
        }
      }
      else if (v240 != 41 {
             || v223 != *(unsigned __int8 **)(v236 - 64)
      }
             || !sub_1CBF528D8((uint64_t)&v1312, *(unsigned __int8 **)(v236 - 32)))
      {
        goto LABEL_479;
      }
      v1337[0] = &v1308;
      v1337[1] = 0;
      if (sub_1CBF528D8((uint64_t)v1337, v224))
      {
        unsigned int v242 = *((_DWORD *)v1308 + 2);
        LODWORD(v1330) = v242;
        v1276 = v1304;
        if (v242 > 0x40) {
          operator new[]();
        }
        unint64_t v243 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v242;
        if (!v242) {
          unint64_t v243 = 0;
        }
        long long __s2 = (void *)(v243 & ~*(void *)v1308);
        llvm::APInt::operator++((uint64_t)&__s2);
        unsigned int v244 = v1330;
        unint64_t v245 = __s2;
        LODWORD(v1330) = 0;
        uint64_t v246 = *((unsigned int *)v1276 + 2);
        if (v246 > 0x40) {
          BOOL v247 = memcmp(*(const void **)v1276, __s2, ((unint64_t)(v246 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v247 = *(void *)v1276 == (void)__s2;
        }
        char v248 = v247;
        if (v244 >= 0x41)
        {
          if (v245)
          {
            char v249 = v248;
            MEMORY[0x1D25D9CB0](v245, 0x1000C8000313F17);
            char v248 = v249;
            if (v1330 >= 0x41)
            {
              if (__s2)
              {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                char v248 = v249;
              }
            }
          }
        }
        int v36 = v1289;
        if (v248)
        {
LABEL_481:
          uint64_t v250 = *(void *)(a1 + 48);
          unint64_t v252 = sub_1CB87DC14(v250, *(void *)(a1 + 720), *(llvm::EVT **)v236, 0);
          BOOL v253 = 0;
          uint64_t v254 = *(void *)(v236 + 8);
          if (v254)
          {
            int v255 = -1;
            do
            {
              BOOL v253 = v255 == 0;
              if (!v255) {
                break;
              }
              uint64_t v254 = *(void *)(v254 + 8);
              ++v255;
            }
            while (v254);
          }
          if (!(*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))(*(void *)v250 + 1432))(v250, 79, v252, v251, v253)|| !sub_1CC277358(a1, v236, *(const llvm::APFloat **)(v236 - 64), *(llvm::Constant **)(v236 - 32), (llvm::ValueAsMetadata *)v7, 312))
          {
            goto LABEL_487;
          }
LABEL_848:
          LOBYTE(v25) = 1;
          *a3 = 1;
          return v25 & 1;
        }
      }
LABEL_479:
      uint64_t v235 = *(void *)(v235 + 8);
      if (!v235) {
        goto LABEL_487;
      }
    }
  }
  if (sub_1CBF535C4((uint64_t)&__src, (llvm::Constant *)v223))
  {
    uint64_t v223 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v223, 1uLL, 0);
    int v225 = 36;
  }
  else
  {
    int v225 = 32;
  }
LABEL_440:
  unsigned int v233 = v223;
  uint64_t v223 = v224;
  uint64_t v224 = v233;
  if (v225 == 36) {
    goto LABEL_441;
  }
LABEL_487:
  uint64_t v37 = (unsigned int *)(a1 + 208);
  if ((byte_1EA618D90
     || ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 248))(*(void *)(a1 + 48)) & 1) == 0)
    && (*((_WORD *)v7 + 9) & 0x3F) == 0x20)
  {
    unint64_t v256 = v7[1];
    if (v256)
    {
      uint64_t v257 = v7[1];
      while (1)
      {
        unsigned int v258 = v257[3];
        int v259 = *((unsigned __int8 *)v258 + 16);
        if (v259 != 30 && (v259 != 85 || *((llvm::LLVMContext ****)v258 - 12) != v7)) {
          break;
        }
        uint64_t v257 = (llvm::LLVMContext **)v257[1];
        if (!v257) {
          goto LABEL_496;
        }
      }
    }
    else
    {
LABEL_496:
      uint64_t v260 = (llvm::BasicBlock *)v7[5];
      uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v260);
      if (SinglePredecessor)
      {
        uint64_t v264 = *(unsigned __int8 **)(SinglePredecessor + 40);
        int v262 = (unsigned __int8 *)(SinglePredecessor + 40);
        int v263 = v264;
        if (v264 != v262)
        {
          uint64_t v265 = v263 - 24;
          if (!v263) {
            uint64_t v265 = 0;
          }
          unsigned int v266 = v265[16] - 40;
          if (v266 < 0xFFFFFFF5) {
            uint64_t v265 = 0;
          }
          if (v263)
          {
            if (v265[16] == 30 && v266 >= 0xFFFFFFF5 && (*((_DWORD *)v265 + 5) & 0x7FFFFFF) == 3)
            {
              uint64_t v268 = *((void *)v265 - 12);
              if (v268)
              {
                if (*((void *)v265 - 4))
                {
                  unsigned int v269 = (llvm::BasicBlock *)*((void *)v265 - 8);
                  if (v269
                    && v260 == v269
                    && *(unsigned char *)(v268 + 16) == 81
                    && *(v7 - 8) == *(llvm::LLVMContext ***)(v268 - 64)
                    && *(v7 - 4) == *(llvm::LLVMContext ***)(v268 - 32))
                  {
                    int v917 = *(_WORD *)(v268 + 18) & 0x3F;
                    if (v917 == 40 || v917 == 38)
                    {
                      while (v256)
                      {
                        int v262 = (unsigned __int8 *)v256[3];
                        int v918 = v262[16];
                        if (v262) {
                          BOOL v919 = v918 == 30;
                        }
                        else {
                          BOOL v919 = 0;
                        }
                        if (v919)
                        {
                          llvm::BranchInst::swapSuccessors((llvm::Instruction *)v262);
                        }
                        else
                        {
                          if (v918 != 85) {
                            int v262 = 0;
                          }
                          if (v262)
                          {
                            uint64_t v920 = *((void *)v262 - 8);
                            uint64_t v921 = *((void *)v262 - 4);
                            if (v920 != v921)
                            {
                              uint64_t v922 = *((void *)v262 - 3);
                              *((void *)v262 - 8) = v921;
                              *((void *)v262 - 4) = v920;
                              long long v923 = *(_OWORD *)(v262 - 56);
                              v924 = (void *)*((void *)v262 - 2);
                              *((void *)v262 - 7) = v922;
                              *((void *)v262 - 6) = v924;
                              *(_OWORD *)(v262 - 24) = v923;
                              void *v924 = v262 - 64;
                              uint64_t v925 = *((void *)v262 - 7);
                              if (v925) {
                                *(void *)(v925 + 16) = v262 - 56;
                              }
                              **((void **)v262 - 2) = v262 - 32;
                              uint64_t v926 = *((void *)v262 - 3);
                              if (v926) {
                                *(void *)(v926 + 16) = v262 - 24;
                              }
                            }
                            llvm::Instruction::swapProfMetadata((llvm::Instruction *)v262);
                          }
                        }
                        unint64_t v256 = (llvm::LLVMContext **)v256[1];
                      }
                      switch(v917)
                      {
                        case 2:
                          LOWORD(v917) = 4;
                          break;
                        case 3:
                          LOWORD(v917) = 5;
                          break;
                        case 4:
                          LOWORD(v917) = 2;
                          break;
                        case 5:
                          LOWORD(v917) = 3;
                          break;
                        case 10:
                          LOWORD(v917) = 12;
                          break;
                        case 11:
                          LOWORD(v917) = 13;
                          break;
                        case 12:
                          LOWORD(v917) = 10;
                          break;
                        case 13:
                          LOWORD(v917) = 11;
                          break;
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                          __break(1u);
                          goto LABEL_2456;
                        case 34:
                          LOWORD(v917) = 36;
                          break;
                        case 35:
                          LOWORD(v917) = 37;
                          break;
                        case 36:
                          LOWORD(v917) = 34;
                          break;
                        case 37:
                          LOWORD(v917) = 35;
                          break;
                        case 38:
                          LOWORD(v917) = 40;
                          break;
                        case 39:
                          LOWORD(v917) = 41;
                          break;
                        case 40:
                          LOWORD(v917) = 38;
                          break;
                        case 41:
                          LOWORD(v917) = 39;
                          break;
                        default:
                          break;
                      }
                      *((_WORD *)v7 + 9) = *((_WORD *)v7 + 9) & 0xFFC0 | v917;
                      goto LABEL_214;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_519:
  int v271 = *((unsigned __int8 *)v7 + 16);
  if (v7 && v271 == 60)
  {
    llvm::Instruction::setMetadata((llvm::Instruction *)v7, 16, 0);
    int v272 = *((unsigned __int8 *)v7 + 16);
    if (v272 == 60 || v272 == 61)
    {
      __int16 v273 = *((_WORD *)v7 + 9);
      if (v273 & 0x380) != 0 || (v273) {
        goto LABEL_881;
      }
    }
    else if (v272 - 63) < 3 || (*((_WORD *)v7 + 9))
    {
      goto LABEL_881;
    }
    int v274 = (llvm::EVT *)*v7;
    if (((*v7)[1] & 0xFD) != 0xD) {
      goto LABEL_881;
    }
    v1290 = v36;
    unint64_t v275 = v7[1];
    if (v275)
    {
      if (!v275[1])
      {
        v363 = v275[3];
        uint64_t v365 = *(void *)(a1 + 192);
        uint64_t v364 = *(void *)(a1 + 200);
        if (v364 == v365)
        {
          uint64_t v366 = *v1290;
          v367 = (llvm::LLVMContext **)(v364 + 8 * v366);
          if (v366)
          {
            uint64_t v368 = 0;
            uint64_t v369 = 8 * v366;
            while (*(llvm::LLVMContext **)(v364 + v368) != v363)
            {
              v368 += 8;
              if (v369 == v368) {
                goto LABEL_877;
              }
            }
            v367 = (llvm::LLVMContext **)(v364 + v368);
          }
LABEL_877:
          uint64_t v365 = *(void *)(a1 + 200);
        }
        else
        {
          uint64_t v415 = *v37;
          int v416 = v415 - 1;
          unsigned int v417 = (v415 - 1) & ((v363 >> 4) ^ (v363 >> 9));
          v367 = (llvm::LLVMContext **)(v364 + 8 * v417);
          v418 = *v367;
          if (*v367 == (llvm::LLVMContext *)-1)
          {
            v419 = 0;
LABEL_886:
            if (v419) {
              v367 = v419;
            }
            if (*v367 != v363) {
              v367 = (llvm::LLVMContext **)(v364 + 8 * v415);
            }
          }
          else
          {
            v419 = 0;
            int v420 = 1;
            while (v418 != v363)
            {
              if (v419) {
                BOOL v421 = 0;
              }
              else {
                BOOL v421 = v418 == (llvm::LLVMContext *)-2;
              }
              if (v421) {
                v419 = v367;
              }
              unsigned int v422 = v417 + v420++;
              unsigned int v417 = v422 & v416;
              v367 = (llvm::LLVMContext **)(v364 + 8 * (v422 & v416));
              v418 = *v367;
              if (*v367 == (llvm::LLVMContext *)-1) {
                goto LABEL_886;
              }
            }
          }
        }
        BOOL v22 = v364 == v365;
        v464 = v1290;
        if (!v22) {
          v464 = v37;
        }
        if (v367 != (llvm::LLVMContext **)(v364 + 8 * *v464))
        {
LABEL_881:
          char v377 = 0;
LABEL_882:
          LOBYTE(v25) = v377 | sub_1CC26C830();
          return v25 & 1;
        }
      }
    }
    v1273 = &v1331;
    long long __s2 = &v1331;
    uint64_t v1330 = 0x800000000;
    __src = &v1314;
    *(void *)&long long v1312 = &v1314;
    *((void *)&v1312 + 1) = 16;
    LODWORD(v1313) = 0;
    v1270 = (llvm::Value *)v1310;
    v1308 = (llvm::Value *)v1310;
    uint64_t v1309 = 0x800000000;
    if (v275)
    {
      unsigned int v276 = 0;
      do
      {
        if (v276 >= HIDWORD(v1330)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)__s2 + v276) = v275[3];
        unsigned int v276 = v1330 + 1;
        LODWORD(v1330) = v1330 + 1;
        unint64_t v275 = (llvm::LLVMContext **)v275[1];
      }
      while (v275);
      int v274 = (llvm::EVT *)*v7;
    }
    v1260 = v7 + 1;
    v1355 = (unsigned __int8 *)sub_1CB87DC14(*(void *)(a1 + 48), *(void *)(a1 + 720), v274, 0);
    uint64_t v1356 = v308;
    if ((_BYTE)v1355) {
      unsigned int v309 = sub_1CB87E200((unsigned __int8 *)&v1355);
    }
    else {
      unsigned int v309 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1355);
    }
    unsigned int v311 = v309;
    if (v310 != 1)
    {
      if (v309) {
        goto LABEL_582;
      }
LABEL_2438:
      char v377 = 0;
LABEL_2439:
      if (v1308 != v1270) {
        free(v1308);
      }
      if ((void *)v1312 != __src) {
        free((void *)v1312);
      }
      if (__s2 != v1273) {
        free(__s2);
      }
      goto LABEL_882;
    }
    if (!v311) {
      goto LABEL_2438;
    }
LABEL_582:
    LODWORD(v1335) = v311;
    unsigned int v1266 = v311;
    if (v311 > 0x40) {
      operator new[]();
    }
    v1334 = 0;
    unsigned int v1302 = v311;
    __n128 __dst = 0;
    unsigned int v312 = v1330;
    v1262 = 0;
    if (v1330)
    {
      v1268 = (llvm::APInt *)(v311 - 1);
      unsigned int v1259 = v311;
      unsigned int v1264 = v311;
      v1277 = 0;
      uint64_t v313 = 0;
      __pa = 0;
      while (1)
      {
        uint64_t v314 = *((void *)__s2 + v312 - 1);
        LODWORD(v1330) = v312 - 1;
        uint64_t v315 = v1312;
        uint64_t v316 = HIDWORD(v1312);
        if ((void *)v1312 == __src)
        {
          if (HIDWORD(v1312))
          {
            uint64_t v317 = 0;
            uint64_t v318 = 8 * HIDWORD(v1312);
            v319 = (void *)v1312;
            do
            {
              if (*v319 == v314) {
                goto LABEL_678;
              }
              if (*v319 == -2) {
                uint64_t v317 = v319;
              }
              ++v319;
              v318 -= 8;
            }
            while (v318);
            if (v317)
            {
              *uint64_t v317 = v314;
              LODWORD(v1313) = v1313 - 1;
              goto LABEL_617;
            }
          }
          unsigned int v320 = DWORD2(v1312);
          if (HIDWORD(v1312) < DWORD2(v1312))
          {
            ++HIDWORD(v1312);
            *(void *)(v1312 + 8 * v316) = v314;
            goto LABEL_617;
          }
        }
        else
        {
          unsigned int v320 = DWORD2(v1312);
        }
        if (3 * v320 <= 4 * (HIDWORD(v1312) - (int)v1313)) {
          break;
        }
        if (v320 - HIDWORD(v1312) < v320 >> 3) {
          goto LABEL_686;
        }
LABEL_598:
        unsigned int v321 = v320 - 1;
        unsigned int v322 = (v320 - 1) & ((v314 >> 4) ^ (v314 >> 9));
        uint64_t v323 = (void *)(v315 + 8 * v322);
        uint64_t v324 = *v323;
        if (*v323 != -1)
        {
          unint64_t v325 = 0;
          int v326 = 1;
          while (v324 != v314)
          {
            if (v325) {
              BOOL v327 = 0;
            }
            else {
              BOOL v327 = v324 == -2;
            }
            if (v327) {
              unint64_t v325 = v323;
            }
            unsigned int v328 = v322 + v326++;
            unsigned int v322 = v328 & v321;
            uint64_t v323 = (void *)(v315 + 8 * (v328 & v321));
            uint64_t v324 = *v323;
            if (*v323 == -1) {
              goto LABEL_610;
            }
          }
          goto LABEL_678;
        }
        unint64_t v325 = 0;
LABEL_610:
        if (v325) {
          unint64_t v329 = v325;
        }
        else {
          unint64_t v329 = v323;
        }
        if (*v329 == v314) {
          goto LABEL_678;
        }
        if (*v329 == -2) {
          LODWORD(v1313) = v1313 - 1;
        }
        else {
          ++HIDWORD(v1312);
        }
        *unint64_t v329 = v314;
LABEL_617:
        int v330 = *(unsigned __int8 *)(v314 + 16);
        if (v314 && v330 == 83)
        {
          uint64_t v331 = *(void *)(v314 + 8);
          if (v331)
          {
            unsigned int v312 = v1330;
            do
            {
              if (v312 >= HIDWORD(v1330)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__s2 + v312) = *(void *)(v331 + 24);
              unsigned int v312 = v1330 + 1;
              LODWORD(v1330) = v1330 + 1;
              uint64_t v331 = *(void *)(v331 + 8);
            }
            while (v331);
            goto LABEL_679;
          }
          goto LABEL_678;
        }
        if (v330 != 53)
        {
          if (v330 != 66)
          {
            if (v330 != 56) {
              goto LABEL_712;
            }
            int v332 = *(_DWORD *)(v314 + 20);
            uint64_t v333 = (v332 & 0x40000000) != 0 ? *(void *)(v314 - 8) : v314 - 32 * (v332 & 0x7FFFFFF);
            uint64_t v340 = *(void *)(v333 + 32);
            if (!v340 || *(unsigned char *)(v340 + 16) != 16) {
              goto LABEL_712;
            }
            unsigned int v341 = *(_DWORD *)(v340 + 32);
            if (v341 > 0x40) {
              operator new[]();
            }
            uint64_t v342 = *(llvm::Instruction **)(v340 + 24);
            if (v1335 > 0x40)
            {
              uint64_t v346 = v1334;
              unint64_t v347 = ((unint64_t)v1335 + 63) >> 6;
              uint64_t v348 = *(uint64_t **)(v340 + 24);
              do
              {
                uint64_t v349 = *v348++;
                *v346++ |= v349;
                --v347;
              }
              while (v347);
            }
            else
            {
              v1334 = (void *)((unint64_t)v1334 | (unint64_t)v342);
            }
            if (v342 > __pa)
            {
              unsigned int v1259 = v341;
              v1262 = v342;
              __n128 __dst = v342;
              unsigned int v1302 = v341;
              unsigned int v1264 = v341;
              v1277 = v342;
            }
            unsigned int v311 = v1266;
            uint64_t v313 = v1277;
            __pa = v1277;
            if (v342 == v1277)
            {
              int v350 = *(_DWORD *)(v314 + 20);
              if ((v350 & 0x40000000) != 0) {
                int v351 = *(llvm::LLVMContext *****)(v314 - 8);
              }
              else {
                int v351 = (llvm::LLVMContext ****)(v314 - 32 * (v350 & 0x7FFFFFF));
              }
              if (*v351 == v7)
              {
                if (v1309 >= (unint64_t)HIDWORD(v1309)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v1308 + v1309) = v314;
                LODWORD(v1309) = v1309 + 1;
              }
              v1277 = v342;
              __pa = v342;
            }
            goto LABEL_678;
          }
          uint64_t v334 = v313;
          v1337[0] = (void *)sub_1CB87DC14(*(void *)(a1 + 48), *(void *)(a1 + 720), *(llvm::EVT **)v314, 0);
          v1337[1] = v335;
          if (LOBYTE(v1337[0])) {
            unsigned int v336 = sub_1CB87E200((unsigned __int8 *)v1337);
          }
          else {
            unsigned int v336 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1337);
          }
          unsigned int v360 = v336;
          uint64_t v313 = v334;
          if (v337 == 1)
          {
            uint64_t v313 = v334;
            if (!v360) {
              goto LABEL_678;
            }
LABEL_669:
            if (v360 <= 0x40)
            {
              int v359 = -v360;
LABEL_671:
              unint64_t v361 = 0xFFFFFFFFFFFFFFFFLL >> v359;
              if (v1335 > 0x40) {
                *(void *)v1334 |= v361;
              }
              else {
                v1334 = (void *)((unint64_t)v1334 | v361);
              }
              goto LABEL_678;
            }
            unsigned int v358 = v360;
LABEL_690:
            llvm::APInt::setBitsSlowCase(&v1334, 0, v358);
            uint64_t v313 = v334;
            goto LABEL_678;
          }
          if (v336) {
            goto LABEL_669;
          }
          goto LABEL_678;
        }
        int v338 = *(_DWORD *)(v314 + 20);
        if ((v338 & 0x40000000) != 0) {
          uint64_t v339 = *(void *)(v314 - 8);
        }
        else {
          uint64_t v339 = v314 - 32 * (v338 & 0x7FFFFFF);
        }
        uint64_t v343 = *(void *)(v339 + 32);
        if (!v343 || *(unsigned char *)(v343 + 16) != 16) {
          goto LABEL_712;
        }
        uint64_t v344 = *(unsigned int *)(v343 + 32);
        if (v344 < 0x41)
        {
          unint64_t v345 = *(void *)(v343 + 24);
          goto LABEL_661;
        }
        int v352 = 0;
        int64_t v353 = (unint64_t)(v344 + 63) >> 6;
        do
        {
          BOOL v80 = v353-- < 1;
          if (v80) {
            break;
          }
          unint64_t v354 = *(void *)(*(void *)(v343 + 24) + 8 * v353);
          v352 += __clz(v354);
        }
        while (!v354);
        int v355 = v344 | 0xFFFFFFC0;
        if ((v344 & 0x3F) == 0) {
          int v355 = 0;
        }
        unsigned int v356 = v344 - v352 - v355;
        int v357 = (int)v1268;
        if (v356 <= 0x40)
        {
          unint64_t v345 = **(void **)(v343 + 24);
LABEL_661:
          int v357 = (int)v1268;
          if (v345 <= (unint64_t)v1268) {
            int v357 = v345;
          }
        }
        unsigned int v358 = v311 - v357;
        if (v311 != v357)
        {
          if (v358 <= 0x40)
          {
            LOBYTE(v359) = v357 - v311;
            goto LABEL_671;
          }
          uint64_t v334 = v313;
          goto LABEL_690;
        }
LABEL_678:
        unsigned int v312 = v1330;
LABEL_679:
        if (!v312) {
          goto LABEL_701;
        }
      }
      if (v320 >= 0x40) {
        v320 *= 2;
      }
      else {
        unsigned int v320 = 128;
      }
LABEL_686:
      v362 = v313;
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__src, v320);
      uint64_t v313 = v362;
      unsigned int v320 = DWORD2(v1312);
      uint64_t v315 = v1312;
      goto LABEL_598;
    }
    unsigned int v1259 = v311;
    unsigned int v1264 = v311;
LABEL_701:
    if (v1335 > 0x40)
    {
      int v372 = 0;
      int64_t v373 = ((unint64_t)v1335 + 63) >> 6;
      unsigned int v371 = v1262;
      do
      {
        BOOL v80 = v373-- < 1;
        if (v80) {
          break;
        }
        unint64_t v374 = *((void *)v1334 + v373);
        v372 += __clz(v374);
      }
      while (!v374);
      int v375 = v1335 | 0xFFFFFFC0;
      if ((v1335 & 0x3F) == 0) {
        int v375 = 0;
      }
      int v370 = v372 + v375;
    }
    else
    {
      int v370 = v1335 + __clz((unint64_t)v1334) - 64;
      unsigned int v371 = v1262;
    }
    unsigned int v376 = (llvm::LLVMContext *)(v1335 - v370);
    if (v376 < 2 || !sub_1CC10A920((llvm::APInt *)&v1334, v1335 - v370) || v371 != v1334)
    {
LABEL_712:
      char v377 = 0;
      unsigned int v378 = v1264;
      goto LABEL_713;
    }
    v444 = **v7;
    size_t v445 = (llvm::EVT *)llvm::IntegerType::get(v444, v376);
    unint64_t v447 = sub_1CB87DC14(*(void *)(a1 + 48), *(void *)(a1 + 720), v445, 0);
    v1300[0] = v447;
    v1300[1] = v446;
    if (v1355 != v447 || (char v377 = 0, !(_BYTE)v1355) && v1356 != v446)
    {
      if (!sub_1CC277C0C((unsigned __int8 *)&v1355, v447, v446) || !sub_1CC277B80((unsigned __int8 *)v1300)) {
        goto LABEL_883;
      }
      char v377 = 0;
      if ((_BYTE)v1355)
      {
        if (LOBYTE(v1300[0]))
        {
          if (*(unsigned __int16 *)(*(void *)(a1 + 48)
                                   + 358 * v1355
                                   + 2 * LOBYTE(v1300[0])
                                   + 73672) <= 0xFFFu)
          {
            uint64_t v448 = 0;
            int v449 = v7[4];
            if (v449) {
              BOOL v450 = v449 == v7[5] + 5;
            }
            else {
              BOOL v450 = 1;
            }
            if (v450) {
              v451 = 0;
            }
            else {
              v451 = v449 - 3;
            }
            uint64_t v452 = *(void *)*v451;
            v1337[0] = &v1338;
            v1337[1] = (void *)0x200000000;
            uint64_t v1344 = v452;
            v1345 = &v1353;
            v1346 = v1354;
            uint64_t v1347 = 0;
            int v1348 = 0;
            __int16 v1349 = 512;
            char v1350 = 7;
            v1343 = 0;
            v1342 = 0;
            uint64_t v1352 = 0;
            uint64_t v1351 = 0;
            v1353 = &unk_1F2616E88;
            v1354[0] = &unk_1F2617008;
            v1342 = v451[5];
            v1343 = (void **)(v451 + 3);
            v453 = (unsigned __int8 *)v451[6];
            v1303 = v453;
            if (v453)
            {
              llvm::MetadataTracking::track((uint64_t)&v1303, v453, 2);
              uint64_t v448 = (uint64_t)v1303;
            }
            sub_1CB8461A4((uint64_t)v1337, 0, v448);
            if (v1303)
            {
              int v1156 = *v1303;
              if ((v1156 - 4) > 0x1E)
              {
                if ((v1156 - 3) >= 0xFFFFFFFE) {
                  v1194 = v1303;
                }
                else {
                  v1194 = 0;
                }
                if ((v1156 - 3) < 0xFFFFFFFE)
                {
                  if (v1156 == 3) {
                    *((void *)v1303 + 1) = 0;
                  }
                  goto LABEL_866;
                }
                unint64_t v1158 = (unint64_t)(v1194 + 8);
              }
              else
              {
                if ((v1303[1] & 0x7F) != 2 && !*((_DWORD *)v1303 + 3)) {
                  goto LABEL_866;
                }
                uint64_t v1157 = *((void *)v1303 + 2);
                if ((v1157 & 4) == 0) {
                  goto LABEL_866;
                }
                unint64_t v1158 = v1157 & 0xFFFFFFFFFFFFFFF8;
                if (!v1158) {
                  goto LABEL_866;
                }
              }
              v1304 = (llvm *)&v1303;
              sub_1CC5FA668(v1158 + 16, &v1304);
            }
LABEL_866:
            uint64_t v455 = llvm::ConstantInt::get(v444, (llvm::LLVMContext *)&v1334, v454);
            __int16 v1307 = 257;
            v456 = sub_1CBF52474((uint64_t)v1337, v7, (uint64_t)v455, (uint64_t)&v1304);
            size_t v457 = v456;
            uint64_t v458 = *(void *)(a1 + 200);
            uint64_t v459 = *(unsigned int *)(a1 + 212);
            if (v458 == *(void *)(a1 + 192))
            {
              if (v459)
              {
                v460 = 0;
                uint64_t v461 = 8 * v459;
                v462 = *(llvm::Instruction ***)(a1 + 200);
                do
                {
                  if (*v462 == v456) {
                    goto LABEL_2104;
                  }
                  if (*v462 == (llvm::Instruction *)-2) {
                    v460 = v462;
                  }
                  ++v462;
                  v461 -= 8;
                }
                while (v461);
                if (v460)
                {
                  _WORD *v460 = v456;
                  --*(_DWORD *)(a1 + 216);
                  goto LABEL_2104;
                }
              }
              unsigned int v463 = *v37;
              if (v459 < *v37)
              {
                unsigned int *v1290 = v459 + 1;
                *(void *)(v458 + 8 * v459) = v456;
LABEL_2104:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v457, (llvm::Value *)1);
                int v1118 = *((_DWORD *)v457 + 5);
                if ((v1118 & 0x40000000) != 0) {
                  v1119 = (_DWORD *)*((void *)v457 - 1);
                }
                else {
                  v1119 = (_DWORD *)((char *)v457 - 32 * (v1118 & 0x7FFFFFF));
                }
                if (*(void *)v1119)
                {
                  **((void **)v1119 + 2) = *((void *)v1119 + 1);
                  uint64_t v1120 = *((void *)v1119 + 1);
                  if (v1120) {
                    *(void *)(v1120 + 16) = *((void *)v1119 + 2);
                  }
                }
                *(void *)v1119 = v7;
                v1121 = v7[1];
                *((void *)v1119 + 1) = v1121;
                if (v1121) {
                  v1121[2] = (llvm::LLVMContext *)(v1119 + 2);
                }
                *((void *)v1119 + 2) = v1260;
                void *v1260 = v1119;
                if (v1309)
                {
                  v1122 = v1308;
                  uint64_t v1123 = 8 * v1309;
                  do
                  {
                    v1124 = *(llvm::ValueAsMetadata **)v1122;
                    int v1125 = *(_DWORD *)(*(void *)v1122 + 20);
                    if ((v1125 & 0x40000000) != 0) {
                      v1126 = (void *)*((void *)v1124 - 1);
                    }
                    else {
                      v1126 = (void *)((char *)v1124 - 32 * (v1125 & 0x7FFFFFF));
                    }
                    uint64_t v1127 = v1126[4];
                    uint64_t v1128 = *(unsigned int *)(v1127 + 32);
                    if (v1128 > 0x40)
                    {
                      if (!memcmp(*(const void **)(v1127 + 24), v1334, ((unint64_t)(v1128 + 63) >> 3) & 0x3FFFFFF8))
                      {
LABEL_2120:
                        llvm::Value::doRAUW(v1124, v457, (llvm::Value *)1);
                        uint64_t v1129 = *(void *)(a1 + 120);
                        if (v1129) {
                          v1130 = (llvm::ValueAsMetadata *)(v1129 - 24);
                        }
                        else {
                          v1130 = 0;
                        }
                        if (v1130 == v1124) {
                          *(void *)(a1 + 120) = *((void *)v1124 + 4);
                        }
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                    }
                    else if (*(void **)(v1127 + 24) == v1334)
                    {
                      goto LABEL_2120;
                    }
                    v1122 = (llvm::Value *)((char *)v1122 + 8);
                    v1123 -= 8;
                  }
                  while (v1123);
                }
                int v262 = (unsigned __int8 *)v1337[0];
                if (v1337[0] != &v1338) {
LABEL_2456:
                }
                  free(v262);
                char v377 = 1;
                unsigned int v378 = v1302;
                goto LABEL_713;
              }
            }
            else
            {
              unsigned int v463 = *v37;
            }
            if (3 * v463 <= 4 * ((int)v459 - *(_DWORD *)(a1 + 216)))
            {
              if (v463 >= 0x40) {
                v463 *= 2;
              }
              else {
                unsigned int v463 = 128;
              }
            }
            else if (v463 - v459 >= v463 >> 3)
            {
              goto LABEL_1885;
            }
            llvm::SmallPtrSetImplBase::Grow(v11, v463);
            unsigned int v463 = *(_DWORD *)(a1 + 208);
            uint64_t v458 = *(void *)(a1 + 200);
LABEL_1885:
            unsigned int v993 = v463 - 1;
            unsigned int v994 = (v463 - 1) & ((v457 >> 4) ^ (v457 >> 9));
            v995 = (llvm::Instruction **)(v458 + 8 * v994);
            v996 = *v995;
            if (*v995 == (llvm::Instruction *)-1)
            {
              v997 = 0;
LABEL_2097:
              if (v997) {
                v1117 = v997;
              }
              else {
                v1117 = v995;
              }
              if (*v1117 != v457)
              {
                if (*v1117 == (llvm::Instruction *)-2) {
                  --*(_DWORD *)(a1 + 216);
                }
                else {
                  ++*v1290;
                }
                *v1117 = v457;
              }
            }
            else
            {
              v997 = 0;
              int v998 = 1;
              while (v996 != v457)
              {
                if (v997) {
                  BOOL v999 = 0;
                }
                else {
                  BOOL v999 = v996 == (llvm::Instruction *)-2;
                }
                if (v999) {
                  v997 = v995;
                }
                unsigned int v1000 = v994 + v998++;
                unsigned int v994 = v1000 & v993;
                v995 = (llvm::Instruction **)(v458 + 8 * (v1000 & v993));
                v996 = *v995;
                if (*v995 == (llvm::Instruction *)-1) {
                  goto LABEL_2097;
                }
              }
            }
            goto LABEL_2104;
          }
LABEL_883:
          char v377 = 0;
        }
      }
    }
    unsigned int v378 = v1259;
LABEL_713:
    if (v378 >= 0x41 && __dst) {
      MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
    }
    if (v1335 >= 0x41 && v1334) {
      MEMORY[0x1D25D9CB0](v1334, 0x1000C8000313F17);
    }
    goto LABEL_2439;
  }
  if (v7 && v271 == 61)
  {
    uint64_t v277 = (uint64_t)**(v7 - 8);
    if (*(unsigned char *)(v277 + 8) != 19)
    {
      uint64_t v278 = *(void *)(a1 + 720);
      uint64_t v279 = *(void *)(a1 + 48);
      uint64_t v280 = sub_1CB83544C(v278, (uint64_t)**(v7 - 8));
      int v282 = v281;
      if (v280 == ((sub_1CB83544C(v278, v277) + 7) & 0xFFFFFFFFFFFFFFF8) && v282 == (v283 == 1))
      {
        uint64_t v285 = sub_1CB83544C(v278, v277);
        uint64_t v287 = v285;
        if (v286 == 1)
        {
          if (!v287) {
            goto LABEL_835;
          }
        }
        else if (!v285)
        {
          goto LABEL_835;
        }
        unint64_t v289 = sub_1CB83544C(v278, v277);
        if (v288 == 1) {
        LODWORD(v1334) = v289 >> 1;
        }
        uint64_t v290 = (llvm::Value *)llvm::IntegerType::get(**v7, (llvm::LLVMContext *)(v289 >> 1));
        v1308 = v290;
        uint64_t v291 = sub_1CB83544C(v278, (uint64_t)v290);
        int v293 = v292;
        if (v291 == ((sub_1CB83544C(v278, (uint64_t)v290) + 7) & 0xFFFFFFFFFFFFFFF8)
          && v293 == (v294 == 1)
          && (*((_WORD *)v7 + 9) & 1) == 0)
        {
          v1304 = 0;
          v1355 = 0;
          uint64_t v295 = (uint64_t)*(v7 - 8);
          unint64_t v296 = (v289 >> 1);
          __src = &v1304;
          *(void *)&long long v1312 = &v1355;
          LODWORD(v1313) = 64;
          *((void *)&v1312 + 1) = v296;
          int v297 = *(unsigned __int8 *)(v295 + 16);
          if (v297 == 5)
          {
            if (*(_WORD *)(v295 + 18) != 29) {
              goto LABEL_821;
            }
            uint64_t v423 = *(void *)(v295 - 32 * (*(_DWORD *)(v295 + 20) & 0x7FFFFFF));
            uint64_t v424 = *(void *)(v423 + 8);
            if (v424)
            {
              if (!*(void *)(v424 + 8))
              {
                if (sub_1CBC5BE40((void **)&__src, v423))
                {
                  uint64_t v425 = *(void *)(v295 - 32 * (*(_DWORD *)(v295 + 20) & 0x7FFFFFF) + 32);
                  uint64_t v426 = *(void *)(v425 + 8);
                  if (v426)
                  {
                    if (!*(void *)(v426 + 8))
                    {
                      int v990 = *(unsigned __int8 *)(v425 + 16);
                      if (v990 == 5)
                      {
                        if (*(_WORD *)(v425 + 18) == 25)
                        {
                          uint64_t v1115 = *(void *)(v425 - 32 * (*(_DWORD *)(v425 + 20) & 0x7FFFFFF));
                          uint64_t v1116 = *(void *)(v1115 + 8);
                          if (v1116)
                          {
                            if (!*(void *)(v1116 + 8)
                              && sub_1CBC5BE40((void **)&v1312, v1115)
                              && sub_1CBF531E4((llvm::APInt *)((char *)&v1312 + 8), *(llvm::Constant **)(v425 - 32 * (*(_DWORD *)(v425 + 20) & 0x7FFFFFF) + 32)))
                            {
                              goto LABEL_2094;
                            }
                          }
                        }
                      }
                      else if (v990 == 53)
                      {
                        uint64_t v991 = *(void *)(v425 - 64);
                        uint64_t v992 = *(void *)(v991 + 8);
                        if (v992)
                        {
                          if (!*(void *)(v992 + 8)
                            && sub_1CBC5BE40((void **)&v1312, v991)
                            && sub_1CBF53154((llvm::APInt *)((char *)&v1312 + 8), *(unsigned __int8 **)(v425 - 32)))
                          {
                            goto LABEL_2094;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v427 = *(void *)(v295 - 32 * (*(_DWORD *)(v295 + 20) & 0x7FFFFFF) + 32);
            uint64_t v428 = *(void *)(v427 + 8);
            if (v428 && !*(void *)(v428 + 8) && sub_1CBC5BE40((void **)&__src, v427))
            {
              uint64_t v304 = *(void *)(v295 - 32 * (*(_DWORD *)(v295 + 20) & 0x7FFFFFF));
              goto LABEL_819;
            }
LABEL_821:
            int v431 = 0;
          }
          else
          {
            if (v297 != 57) {
              goto LABEL_835;
            }
            uint64_t v298 = *(void *)(v295 - 64);
            uint64_t v299 = *(void *)(v298 + 8);
            if (v299)
            {
              if (!*(void *)(v299 + 8))
              {
                if (sub_1CBC5BE40((void **)&__src, v298))
                {
                  uint64_t v300 = *(void *)(v295 - 32);
                  uint64_t v301 = *(void *)(v300 + 8);
                  if (v301)
                  {
                    if (!*(void *)(v301 + 8))
                    {
                      int v959 = *(unsigned __int8 *)(v300 + 16);
                      if (v959 == 5)
                      {
                        if (*(_WORD *)(v300 + 18) != 25) {
                          goto LABEL_555;
                        }
                        uint64_t v1006 = *(void *)(v300 - 32 * (*(_DWORD *)(v300 + 20) & 0x7FFFFFF));
                        uint64_t v1007 = *(void *)(v1006 + 8);
                        if (!v1007
                          || *(void *)(v1007 + 8)
                          || !sub_1CBC5BE40((void **)&v1312, v1006)
                          || !sub_1CBF531E4((llvm::APInt *)((char *)&v1312 + 8), *(llvm::Constant **)(v300 - 32 * (*(_DWORD *)(v300 + 20) & 0x7FFFFFF) + 32)))
                        {
                          goto LABEL_555;
                        }
                      }
                      else
                      {
                        if (v959 != 53) {
                          goto LABEL_555;
                        }
                        uint64_t v960 = *(void *)(v300 - 64);
                        uint64_t v961 = *(void *)(v960 + 8);
                        if (!v961
                          || *(void *)(v961 + 8)
                          || !sub_1CBC5BE40((void **)&v1312, v960)
                          || !sub_1CBF53154((llvm::APInt *)((char *)&v1312 + 8), *(unsigned __int8 **)(v300 - 32)))
                        {
                          goto LABEL_555;
                        }
                      }
                      goto LABEL_2094;
                    }
                  }
                }
              }
            }
LABEL_555:
            uint64_t v302 = *(void *)(v295 - 32);
            uint64_t v303 = *(void *)(v302 + 8);
            if (!v303 || *(void *)(v303 + 8) || !sub_1CBC5BE40((void **)&__src, v302)) {
              goto LABEL_821;
            }
            uint64_t v304 = *(void *)(v295 - 64);
LABEL_819:
            uint64_t v429 = *(void *)(v304 + 8);
            if (!v429) {
              goto LABEL_821;
            }
            uint64_t v430 = *(void *)(v429 + 8);
            if (v430) {
              goto LABEL_821;
            }
            int v956 = *(unsigned __int8 *)(v304 + 16);
            if (v956 == 53)
            {
              uint64_t v957 = *(void *)(v304 - 64);
              uint64_t v958 = *(void *)(v957 + 8);
              if (!v958
                || *(void *)(v958 + 8)
                || !sub_1CBC5BE40((void **)&v1312, v957)
                || !sub_1CBF53154((llvm::APInt *)((char *)&v1312 + 8), *(unsigned __int8 **)(v304 - 32)))
              {
                goto LABEL_821;
              }
LABEL_2094:
              int v431 = 1;
            }
            else
            {
              if (v956 == 5) {
                LOBYTE(v430) = *(_WORD *)(v304 + 18) == 25
              }
                            && (uint64_t v987 = *(void *)(v304 - 32 * (*(_DWORD *)(v304 + 20) & 0x7FFFFFF)),
                                (uint64_t v988 = *(void *)(v987 + 8)) != 0)
                            && !*(void *)(v988 + 8)
                            && sub_1CBC5BE40((void **)&v1312, v987)
                            && sub_1CBF531E4((llvm::APInt *)((char *)&v1312 + 8), *(llvm::Constant **)(v304 - 32 * (*(_DWORD *)(v304 + 20) & 0x7FFFFFF) + 32));
              int v431 = (v956 == 5) & v430;
            }
          }
          if (v1313 >= 0x41 && *((void *)&v1312 + 1))
          {
            MEMORY[0x1D25D9CB0](*((void *)&v1312 + 1), 0x1000C8000313F17);
            if ((v431 & 1) == 0) {
              goto LABEL_835;
            }
          }
          else if (!v431)
          {
            goto LABEL_835;
          }
          if (*(unsigned char *)(*(void *)v1304 + 8) == 13)
          {
            unint64_t v433 = sub_1CB83544C(v278, *(void *)v1304);
            if (v432 == 1) {
            if (v433 <= v296 && *(unsigned char *)(*(void *)v1355 + 8) == 13)
            }
            {
              unint64_t v436 = sub_1CB83544C(v278, *(void *)v1355);
              if (v434 == 1) {
              if (v436 <= v296)
              }
              {
                v897 = (llvm::EVT **)v1304;
                if (*((unsigned char *)v1304 + 16) == 77) {
                  v898 = (uint64_t *)v1304;
                }
                else {
                  v898 = 0;
                }
                if (v1355[16] == 77) {
                  v899 = (uint64_t *)v1355;
                }
                else {
                  v899 = 0;
                }
                if (v898) {
                  v897 = (llvm::EVT **)*(v898 - 4);
                }
                unint64_t EVT = llvm::EVT::getEVT(*v897, 0, v435);
                uint64_t v903 = v902;
                v904 = (llvm::EVT ***)(v899 - 4);
                if (!v899) {
                  v904 = (llvm::EVT ***)&v1355;
                }
                unint64_t v905 = llvm::EVT::getEVT(**v904, 0, v900);
                if (byte_1EBCC9C48
                  || (*(unsigned int (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v279 + 272))(v279, EVT, v903, v905, v906))
                {
                  v907 = 0;
                  v908 = **v7;
                  __src = (char *)&v1312 + 8;
                  *(void *)&long long v1312 = 0x200000000;
                  v1318 = v908;
                  v1319 = &v1327;
                  v1320 = v1328;
                  v1321 = 0;
                  int v1322 = 0;
                  __int16 v1323 = 512;
                  char v1324 = 7;
                  uint64_t v1325 = 0;
                  uint64_t v1326 = 0;
                  v1327 = &unk_1F2616E88;
                  v1328[0] = &unk_1F2617008;
                  v909 = v7[6];
                  v1316 = v7[5];
                  v1317 = (void ***)(v7 + 3);
                  long long __s2 = v909;
                  if (v909)
                  {
                    llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v909, 2);
                    v907 = __s2;
                  }
                  sub_1CB8461A4((uint64_t)&__src, 0, (uint64_t)v907);
                  if (!__s2)
                  {
LABEL_1693:
                    v912 = v7[5];
                    if (v898 && (llvm::LLVMContext **)v898[5] != v912)
                    {
                      v913 = (unsigned __int8 *)*(v898 - 4);
                      uint64_t v914 = *v898;
                      LOWORD(v1333[0]) = 257;
                      if (*(void *)v913 != v914)
                      {
                        if (v913[16] <= 0x14u)
                        {
                          uint64_t v1051 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1319 + 28))(v1319, 49, v913, v914);
                          v913 = (unsigned __int8 *)v1051;
                          if (v1051)
                          {
                            if (*(unsigned __int8 *)(v1051 + 16) >= 0x1Cu)
                            {
                              (*(void (**)(void *, uint64_t, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1051, &__s2, v1316, v1317);
                              if (v1312)
                              {
                                v1250 = (llvm::MDNode **)__src;
                                v1251 = (llvm::MDNode **)((char *)__src + 16 * v1312);
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v913, *(_DWORD *)v1250, v1250[1]);
                                  v1250 += 2;
                                }
                                while (v1250 != v1251);
                              }
                            }
                          }
                        }
                        else
                        {
                          LOWORD(v1340) = 257;
                          v913 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v913, v914, (const char **)v1337, 0);
                          (*(void (**)(void *, unsigned __int8 *, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v913, &__s2, v1316, v1317);
                          if (v1312)
                          {
                            v915 = (llvm::MDNode **)__src;
                            v916 = (llvm::MDNode **)((char *)__src + 16 * v1312);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v913, *(_DWORD *)v915, v915[1]);
                              v915 += 2;
                            }
                            while (v915 != v916);
                          }
                        }
                      }
                      v1304 = (llvm *)v913;
                      v912 = v7[5];
                    }
                    if (v899 && (llvm::LLVMContext **)v899[5] != v912)
                    {
                      v1052 = (unsigned __int8 *)*(v899 - 4);
                      uint64_t v1053 = *v899;
                      LOWORD(v1333[0]) = 257;
                      if (*(void *)v1052 != v1053)
                      {
                        if (v1052[16] <= 0x14u)
                        {
                          v1052 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1319
                                                      + 28))(v1319, 49, v1052, v1053);
                          if (v1052) {
                            BOOL v1056 = v1052[16] >= 0x1Cu;
                          }
                          else {
                            BOOL v1056 = 0;
                          }
                          if (v1056)
                          {
                            (*(void (**)(void *, unsigned __int8 *, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1052, &__s2, v1316, v1317);
                            if (v1312)
                            {
                              v1248 = (llvm::MDNode **)__src;
                              v1249 = (llvm::MDNode **)((char *)__src + 16 * v1312);
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v1052, *(_DWORD *)v1248, v1248[1]);
                                v1248 += 2;
                              }
                              while (v1248 != v1249);
                            }
                          }
                        }
                        else
                        {
                          LOWORD(v1340) = 257;
                          v1052 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1052, v1053, (const char **)v1337, 0);
                          (*(void (**)(void *, unsigned __int8 *, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1052, &__s2, v1316, v1317);
                          if (v1312)
                          {
                            v1054 = (llvm::MDNode **)__src;
                            v1055 = (llvm::MDNode **)((char *)__src + 16 * v1312);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v1052, *(_DWORD *)v1054, v1054[1]);
                              v1054 += 2;
                            }
                            while (v1054 != v1055);
                          }
                        }
                      }
                      v1355 = v1052;
                      v912 = v7[5];
                    }
                    LOBYTE(__s2) = *(unsigned char *)(*((void *)v912[7] + 5) + 272) ^ 1;
                    v1337[0] = &__src;
                    v1337[1] = &v1308;
                    v1338 = v7;
                    p_s2 = &__s2;
                    v1340 = &v1334;
                    sub_1CC27BB1C((uint64_t)v1337, v1304, 0, v910, v911);
                    sub_1CC27BB1C((uint64_t)v1337, (llvm::CastInst *)v1355, 1, v1057, v1058);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                  int v1132 = *(unsigned __int8 *)__s2;
                  if ((v1132 - 4) > 0x1E)
                  {
                    if ((v1132 - 3) >= 0xFFFFFFFE) {
                      v1163 = __s2;
                    }
                    else {
                      v1163 = 0;
                    }
                    if ((v1132 - 3) < 0xFFFFFFFE)
                    {
                      if (v1132 == 3) {
                        *((void *)__s2 + 1) = 0;
                      }
                      goto LABEL_1693;
                    }
                    unint64_t v1134 = (unint64_t)v1163 + 8;
                  }
                  else
                  {
                    if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
                      goto LABEL_1693;
                    }
                    uint64_t v1133 = *((void *)__s2 + 2);
                    if ((v1133 & 4) == 0) {
                      goto LABEL_1693;
                    }
                    unint64_t v1134 = v1133 & 0xFFFFFFFFFFFFFFF8;
                    if (!v1134) {
                      goto LABEL_1693;
                    }
                  }
                  v1337[0] = &__s2;
                  sub_1CC5FA668(v1134 + 16, v1337);
                  goto LABEL_1693;
                }
              }
            }
          }
        }
      }
    }
LABEL_835:
    llvm::Instruction::setMetadata((llvm::Instruction *)v7, 16, 0);
LABEL_836:
    char v131 = sub_1CC26C830();
    goto LABEL_837;
  }
  if (v7 && v271 == 65 || v7 && v271 == 64) {
    goto LABEL_836;
  }
  if (!v7 || (v271 - 59) < 0xFFFFFFEE) {
    goto LABEL_1355;
  }
  if (v271 != 56 || !byte_1EBCC9588) {
    goto LABEL_1081;
  }
  uint64_t v305 = v7[1];
  if (v305 && !v305[1] && v7[5] == *((llvm::LLVMContext ***)v305[3] + 5)) {
    goto LABEL_1080;
  }
  int v306 = *((_DWORD *)v7 + 5);
  uint64_t v307 = (v306 & 0x40000000) != 0 ? *(v7 - 1) : (llvm::LLVMContext **)&v7[-4 * (v306 & 0x7FFFFFF)];
  if (*((unsigned char *)*v307 + 16) != 16 && *((unsigned char *)v307[4] + 16) != 16)
  {
    uint64_t v379 = *((void *)*v307 + 1);
    if (v379)
    {
      if (!*(void *)(v379 + 8))
      {
        unint64_t v551 = (v306 & 0x40000000) != 0 ? *(v7 - 1) : (llvm::LLVMContext **)&v7[-4 * (v306 & 0x7FFFFFF)];
        uint64_t v552 = *((void *)v551[4] + 1);
        if (v552)
        {
          if (!*(void *)(v552 + 8)) {
            goto LABEL_1080;
          }
        }
      }
    }
  }
  if (!v305)
  {
LABEL_744:
    if (((*(uint64_t (**)(void, llvm::LLVMContext ***))(**(void **)(a1 + 48) + 280))(*(void *)(a1 + 48), v7) & 1) == 0)
    {
      int v271 = *((unsigned __int8 *)v7 + 16);
      goto LABEL_1081;
    }
    v390 = v7[1];
    if (!v390) {
LABEL_808:
    }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    while (1)
    {
      unint64_t v392 = v390 + 1;
      uint64_t v391 = (llvm::Value **)v390[1];
      if (*((llvm::LLVMContext ***)v390[3] + 5) == v7[5]) {
        uint64_t v393 = (uint64_t)v7;
      }
      else {
        uint64_t v393 = (uint64_t)v390[3];
      }
      int v394 = *((_DWORD *)v7 + 5);
      if ((v394 & 0x40000000) != 0) {
        int v395 = (llvm::LLVMContext ***)*(v7 - 1);
      }
      else {
        int v395 = &v7[-4 * (v394 & 0x7FFFFFF)];
      }
      uint64_t v396 = *v395;
      uint64_t v397 = (uint64_t)v395[4];
      LOWORD(v1314) = 257;
      v398 = llvm::BinaryOperator::Create(28, v396, v397, (const char **)&__src, v393);
      v399 = v7[6];
      v1337[0] = v399;
      if (v399) {
        llvm::MetadataTracking::track((uint64_t)v1337, (unsigned __int8 *)v399, 2);
      }
      v400 = (unsigned __int8 **)((char *)v398 + 48);
      if (v1337 != (void **)((char *)v398 + 48))
      {
        v401 = *v400;
        if (!*v400) {
          goto LABEL_756;
        }
        int v407 = *v401;
        if ((v407 - 4) > 0x1E)
        {
          if ((v407 - 3) >= 0xFFFFFFFE) {
            int v410 = *v400;
          }
          else {
            int v410 = 0;
          }
          if ((v407 - 3) < 0xFFFFFFFE)
          {
            if (v407 == 3) {
              *((void *)v401 + 1) = 0;
            }
            goto LABEL_756;
          }
          unint64_t v409 = (unint64_t)(v410 + 8);
LABEL_778:
          __src = (char *)v398 + 48;
          sub_1CC5FA668(v409 + 16, &__src);
        }
        else if ((v401[1] & 0x7F) == 2 || *((_DWORD *)v401 + 3))
        {
          uint64_t v408 = *((void *)v401 + 2);
          if ((v408 & 4) != 0)
          {
            unint64_t v409 = v408 & 0xFFFFFFFFFFFFFFF8;
            if (v409) {
              goto LABEL_778;
            }
          }
        }
LABEL_756:
        uint64_t v402 = (unsigned __int8 *)v1337[0];
        llvm::raw_ostream *v400 = (unsigned __int8 *)v1337[0];
        if (v402)
        {
          llvm::MetadataTracking::retrack((uint64_t)v1337, v402, (uint64_t)v398 + 48);
          v1337[0] = 0;
        }
        goto LABEL_758;
      }
      if (v1337[0])
      {
        int v411 = *(unsigned __int8 *)v1337[0];
        if ((v411 - 4) > 0x1E)
        {
          if ((v411 - 3) >= 0xFFFFFFFE) {
            size_t v414 = v1337[0];
          }
          else {
            size_t v414 = 0;
          }
          if ((v411 - 3) < 0xFFFFFFFE)
          {
            if (v411 == 3) {
              *((void *)v1337[0] + 1) = 0;
            }
            goto LABEL_758;
          }
          unint64_t v413 = (unint64_t)v414 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1337[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1337[0] + 3)) {
            goto LABEL_758;
          }
          uint64_t v412 = *((void *)v1337[0] + 2);
          if ((v412 & 4) == 0) {
            goto LABEL_758;
          }
          unint64_t v413 = v412 & 0xFFFFFFFFFFFFFFF8;
          if (!v413) {
            goto LABEL_758;
          }
        }
        __src = v1337;
        sub_1CC5FA668(v413 + 16, &__src);
      }
LABEL_758:
      if (*v390)
      {
        *(void *)v390[2] = v390[1];
        v403 = v390[1];
        if (v403) {
          *((void *)v403 + 2) = v390[2];
        }
      }
      int *v390 = v398;
      if (v398)
      {
        uint64_t v406 = *((void *)v398 + 1);
        v405 = (llvm::Value ***)((char *)v398 + 8);
        uint64_t v404 = v406;
        *unint64_t v392 = v406;
        if (v406) {
          *(void *)(v404 + 16) = v392;
        }
        v390[2] = (llvm::Value *)v405;
        *v405 = v390;
      }
      v390 = v391;
      if (!v391) {
        goto LABEL_808;
      }
    }
  }
  while (1)
  {
    v380 = v305[3];
    if (*((unsigned char *)v380 + 16) != 81) {
      break;
    }
    int v381 = *((_DWORD *)v380 + 5);
    int v382 = (v381 & 0x40000000) != 0
         ? (llvm::LLVMContext *)*((void *)v380 - 1)
         : (llvm::LLVMContext *)((char *)v380 - 32 * (v381 & 0x7FFFFFF));
    uint64_t v383 = *((void *)v382 + 4);
    if (!v383 || *(unsigned char *)(v383 + 16) != 16) {
      break;
    }
    uint64_t v385 = *(unsigned int *)(v383 + 32);
    if (v385 > 0x40)
    {
      int v386 = 0;
      int64_t v387 = (unint64_t)(v385 + 63) >> 6;
      do
      {
        BOOL v80 = v387-- < 1;
        if (v80) {
          break;
        }
        unint64_t v388 = *(void *)(*(void *)(v383 + 24) + 8 * v387);
        v386 += __clz(v388);
      }
      while (!v388);
      int v389 = v385 | 0xFFFFFFC0;
      if ((v385 & 0x3F) == 0) {
        int v389 = 0;
      }
      if (v386 + v389 != v385) {
        break;
      }
    }
    else if (*(void *)(v383 + 24))
    {
      break;
    }
    uint64_t v305 = (llvm::LLVMContext **)v305[1];
    if (!v305) {
      goto LABEL_744;
    }
  }
LABEL_1080:
  int v271 = 56;
LABEL_1081:
  if ((v271 & 0xFE) == 0x36)
  {
    uint64_t v553 = (uint64_t)*(v7 - 4);
    if (v553)
    {
      if (*(unsigned char *)(v553 + 16) == 16)
      {
        uint64_t v554 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v554 + 17))
        {
          uint64_t v555 = *(void *)(a1 + 720);
          unint64_t v556 = (llvm::APInt *)v7[5];
          long long __s2 = 0;
          uint64_t v1330 = 0;
          LODWORD(v1331) = 0;
          uint64_t v1275 = v555;
          uint64_t v557 = v554;
          unsigned __int8 v558 = sub_1CB87DC14(v554, v555, (llvm::EVT *)*v7, 0);
          if (v558) {
            BOOL v1269 = *(void *)(v557 + 8 * v558 + 96) != 0;
          }
          else {
            BOOL v1269 = 0;
          }
          uint64_t v559 = v557;
          int v560 = v7[1];
          if (!v560) {
            goto LABEL_1418;
          }
          uint64_t v1261 = v553;
          char v1265 = 0;
          v1278 = (llvm::Instruction *)v559;
          v1281 = (llvm::Instruction *)v37;
          v1267 = v556;
          v1291 = v36;
          while (1)
          {
            unsigned int v561 = v560;
            unsigned int v562 = (llvm::LLVMContext ***)(v560 + 1);
            int v560 = (llvm::LLVMContext **)v560[1];
            uint64_t v563 = v562[2];
            int v564 = *((unsigned __int8 *)v563 + 16);
            if (v564 != 83)
            {
              if (v564 != 66)
              {
                if (v564 != 56) {
                  goto LABEL_1284;
                }
                int v565 = *((_DWORD *)v563 + 5);
                unint64_t v566 = (v565 & 0x40000000) != 0 ? (uint64_t)*(v563 - 1) : (uint64_t)&v563[-4 * (v565 & 0x7FFFFFF)];
                uint64_t v567 = *(void *)(v566 + 32);
                if (*(unsigned char *)(v567 + 16) != 16) {
                  goto LABEL_1284;
                }
                LODWORD(v1312) = *(_DWORD *)(v567 + 32);
                unint64_t v568 = v560;
                if (v1312 > 0x40) {
                  operator new[]();
                }
                __src = *(void **)(v567 + 24);
                llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
                uint64_t v569 = v1312;
                uint64_t v570 = __src;
                LODWORD(v1312) = 0;
                if (v569 >= 0x41)
                {
                  uint64_t v572 = 0;
                  uint64_t v573 = *(void *)(v567 + 24);
                  int64_t v574 = (unint64_t)(v569 + 63) >> 6;
                  do
                  {
                    v570[v572] &= *(void *)(v573 + v572 * 8);
                    ++v572;
                  }
                  while (v574 != v572);
                  int v575 = 0;
                  do
                  {
                    BOOL v80 = v574-- < 1;
                    if (v80) {
                      break;
                    }
                    unint64_t v576 = v570[v574];
                    v575 += __clz(v576);
                  }
                  while (!v576);
                  int v577 = v569 | 0xFFFFFFC0;
                  if ((v569 & 0x3F) == 0) {
                    int v577 = 0;
                  }
                  int v578 = v575 + v577;
                  if (v570)
                  {
                    MEMORY[0x1D25D9CB0](v570, 0x1000C8000313F17);
                    if (v1312 >= 0x41)
                    {
                      if (__src) {
                        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                      }
                    }
                  }
                  BOOL v571 = v578 == v569;
                }
                else
                {
                  BOOL v571 = (*(void *)(v567 + 24) & (unint64_t)__src) == 0;
                }
                uint64_t v559 = (uint64_t)v1278;
                int v560 = v568;
                unint64_t v556 = v1267;
                if (!v571) {
                  goto LABEL_1284;
                }
              }
              unsigned int v579 = v563[5];
              v1334 = v579;
              if (v579 != v556)
              {
                v646 = v37;
                uint64_t v647 = sub_1CD467E2C((uint64_t)&__s2, (uint64_t *)&v1334);
                float32x2x2_t v648 = (llvm::LLVMContext ***)v647[1];
                if (!v648)
                {
                  v649 = v647;
                  v650 = (void *)((char *)v579 + 40);
                  for (uint64_t k = (void *)*((void *)v579 + 6); k != v650; uint64_t k = (void *)k[1])
                  {
                    v652 = k - 3;
                    if (!k) {
                      v652 = 0;
                    }
                    if (*((unsigned char *)v652 + 16) != 83)
                    {
                      unsigned int v653 = *((unsigned __int8 *)k - 8) - 38;
                      BOOL v80 = v653 > 0x38;
                      uint64_t v654 = (1 << v653) & 0x100060000000001;
                      if (v80 || v654 == 0) {
                        v650 = k;
                      }
                      else {
                        v650 = (void *)k[1];
                      }
                      break;
                    }
                  }
                  v656 = *(v7 - 8);
                  if (v650) {
                    uint64_t v657 = (uint64_t)(v650 - 3);
                  }
                  else {
                    uint64_t v657 = 0;
                  }
                  if (*((unsigned char *)v7 + 16) == 55)
                  {
                    LOWORD(v1314) = 257;
                    char v658 = 27;
                  }
                  else
                  {
                    LOWORD(v1314) = 257;
                    char v658 = 26;
                  }
                  v659 = llvm::BinaryOperator::Create(v658, v656, v1261, (const char **)&__src, v657);
                  v649[1] = v659;
                  v660 = v659;
                  v661 = v7[6];
                  __n128 __dst = v661;
                  if (v661) {
                    llvm::MetadataTracking::track((uint64_t)&__dst, (unsigned __int8 *)v661, 2);
                  }
                  v662 = (void **)((char *)v660 + 48);
                  if (&__dst == (void **)((char *)v660 + 48))
                  {
                    if (!__dst) {
                      goto LABEL_1314;
                    }
                    int v673 = *(unsigned __int8 *)__dst;
                    if ((v673 - 4) > 0x1E)
                    {
                      if ((v673 - 3) >= 0xFFFFFFFE) {
                        v676 = __dst;
                      }
                      else {
                        v676 = 0;
                      }
                      if ((v673 - 3) < 0xFFFFFFFE)
                      {
                        if (v673 == 3) {
                          *((void *)__dst + 1) = 0;
                        }
                        goto LABEL_1314;
                      }
                      unint64_t v675 = (unint64_t)v676 + 8;
                    }
                    else
                    {
                      if ((*((unsigned char *)__dst + 1) & 0x7F) != 2 && !*((_DWORD *)__dst + 3)) {
                        goto LABEL_1314;
                      }
                      uint64_t v674 = *((void *)__dst + 2);
                      if ((v674 & 4) == 0) {
                        goto LABEL_1314;
                      }
                      unint64_t v675 = v674 & 0xFFFFFFFFFFFFFFF8;
                      if (!v675) {
                        goto LABEL_1314;
                      }
                    }
                    __src = &__dst;
                    sub_1CC5FA668(v675 + 16, &__src);
                    goto LABEL_1314;
                  }
                  v663 = (unsigned __int8 *)*v662;
                  if (!*v662) {
                    goto LABEL_1312;
                  }
                  int v669 = *v663;
                  if ((v669 - 4) <= 0x1E)
                  {
                    if ((v663[1] & 0x7F) != 2 && !*((_DWORD *)v663 + 3)) {
                      goto LABEL_1312;
                    }
                    uint64_t v670 = *((void *)v663 + 2);
                    if ((v670 & 4) == 0) {
                      goto LABEL_1312;
                    }
                    unint64_t v671 = v670 & 0xFFFFFFFFFFFFFFF8;
                    if (!v671) {
                      goto LABEL_1312;
                    }
                    goto LABEL_1334;
                  }
                  if ((v669 - 3) >= 0xFFFFFFFE) {
                    v672 = *v662;
                  }
                  else {
                    v672 = 0;
                  }
                  if ((v669 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v671 = (unint64_t)v672 + 8;
LABEL_1334:
                    __src = (char *)v660 + 48;
                    sub_1CC5FA668(v671 + 16, &__src);
                    goto LABEL_1312;
                  }
                  if (v669 == 3) {
                    *((void *)v663 + 1) = 0;
                  }
LABEL_1312:
                  v664 = (unsigned __int8 *)__dst;
                  *v662 = __dst;
                  if (v664)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&__dst, v664, (uint64_t)v660 + 48);
                    __n128 __dst = 0;
                  }
LABEL_1314:
                  float32x2x2_t v648 = (llvm::LLVMContext ***)v649[1];
                  char v1265 = 1;
                }
                if (*v561)
                {
                  *(void *)v561[2] = v561[1];
                  v665 = v561[1];
                  if (v665) {
                    *((void *)v665 + 2) = v561[2];
                  }
                }
                *unsigned int v561 = (llvm::LLVMContext *)v648;
                if (v648)
                {
                  v668 = v648[1];
                  v666 = v648 + 1;
                  v667 = v668;
                  *unsigned int v562 = v668;
                  if (v668) {
                    v667[2] = (llvm::LLVMContext *)v562;
                  }
                  v561[2] = (llvm::LLVMContext *)v666;
                  *v666 = v561;
                }
                int v36 = v1291;
                uint64_t v37 = v646;
                uint64_t v559 = (uint64_t)v1278;
                unint64_t v556 = v1267;
                goto LABEL_1285;
              }
              BOOL v580 = v1269;
              if (*((unsigned char *)v563 + 16) != 66) {
                BOOL v580 = 0;
              }
              if (v580)
              {
                unsigned __int8 v581 = sub_1CB87DC14(v559, v1275, *v563, 0);
                uint64_t v559 = (uint64_t)v1278;
                int v36 = v1291;
                if (!v581 || !*((void *)v1278 + v581 + 12))
                {
                  v1271 = v563[5];
                  v1337[1] = 0;
                  v1337[0] = 0;
                  LODWORD(v1338) = 0;
                  v582 = (uint64_t)v563[1];
                  if (!v582)
                  {
                    v645 = 0;
                    char v1265 = 0;
LABEL_1288:
                    MEMORY[0x1D25D9CD0](v645, 8);
                    uint64_t v559 = (uint64_t)v1278;
                    uint64_t v37 = (unsigned int *)v1281;
                    goto LABEL_1285;
                  }
                  v1263 = v560;
                  char v1265 = 0;
                  while (2)
                  {
                    uint64_t v583 = v582;
                    v584 = (void *)(v582 + 8);
                    v582 = *(void *)(v582 + 8);
                    uint64_t v585 = v584[2];
                    uint64_t v586 = 222;
                    switch(*(unsigned char *)(v585 + 16))
                    {
                      case '(':
                        goto LABEL_1155;
                      case ')':
                        uint64_t v586 = 56;
                        goto LABEL_1155;
                      case '*':
                        uint64_t v586 = 96;
                        goto LABEL_1155;
                      case '+':
                        uint64_t v586 = 57;
                        goto LABEL_1155;
                      case ',':
                        uint64_t v586 = 97;
                        goto LABEL_1155;
                      case '-':
                        uint64_t v586 = 58;
                        goto LABEL_1155;
                      case '.':
                        uint64_t v586 = 98;
                        goto LABEL_1155;
                      case '/':
                        uint64_t v586 = 60;
                        goto LABEL_1155;
                      case '0':
                        uint64_t v586 = 59;
                        goto LABEL_1155;
                      case '1':
                        uint64_t v586 = 99;
                        goto LABEL_1155;
                      case '2':
                        uint64_t v586 = 62;
                        goto LABEL_1155;
                      case '3':
                        uint64_t v586 = 61;
                        goto LABEL_1155;
                      case '4':
                        uint64_t v586 = 100;
                        goto LABEL_1155;
                      case '5':
                        uint64_t v586 = 175;
                        goto LABEL_1155;
                      case '6':
                        uint64_t v586 = 177;
                        goto LABEL_1155;
                      case '7':
                        uint64_t v586 = 176;
                        goto LABEL_1155;
                      case '8':
                        uint64_t v586 = 171;
                        goto LABEL_1155;
                      case '9':
                        uint64_t v586 = 172;
                        goto LABEL_1155;
                      case ':':
                        uint64_t v586 = 173;
                        goto LABEL_1155;
                      case '<':
                        uint64_t v586 = 253;
                        goto LABEL_1155;
                      case '=':
                        uint64_t v586 = 254;
                        goto LABEL_1155;
                      case 'B':
                        uint64_t v586 = 201;
                        goto LABEL_1155;
                      case 'C':
                        uint64_t v586 = 199;
                        goto LABEL_1155;
                      case 'D':
                        uint64_t v586 = 198;
                        goto LABEL_1155;
                      case 'E':
                        uint64_t v586 = 209;
                        goto LABEL_1155;
                      case 'F':
                        uint64_t v586 = 208;
                        goto LABEL_1155;
                      case 'G':
                        uint64_t v586 = 203;
                        goto LABEL_1155;
                      case 'H':
                        uint64_t v586 = 202;
                        goto LABEL_1155;
                      case 'I':
                        uint64_t v586 = 212;
                        goto LABEL_1155;
                      case 'J':
                        uint64_t v586 = 215;
                        goto LABEL_1155;
                      case 'K':
                      case 'L':
                      case 'M':
                        uint64_t v586 = 216;
                        goto LABEL_1155;
                      case 'N':
                        uint64_t v586 = 217;
                        goto LABEL_1155;
                      case 'Q':
                      case 'R':
                        uint64_t v586 = 193;
                        goto LABEL_1155;
                      case 'U':
                        uint64_t v586 = 190;
                        goto LABEL_1155;
                      case 'Y':
                        uint64_t v586 = 148;
                        goto LABEL_1155;
                      case 'Z':
                        uint64_t v586 = 147;
                        goto LABEL_1155;
                      case '[':
                        uint64_t v586 = 153;
                        goto LABEL_1155;
                      case '\\':
                      case ']':
                        uint64_t v586 = 55;
                        goto LABEL_1155;
                      case '_':
                        uint64_t v586 = 52;
LABEL_1155:
                        unsigned __int8 v587 = sub_1CB87DC14(v559, v1275, *(llvm::EVT **)v585, (llvm::Type *)1);
                        uint64_t v559 = (uint64_t)v1278;
                        if (v587
                          && (v587 == 1 || *((void *)v1278 + v587 + 12))
                          && (*((unsigned char *)v1278 + 390 * v587 + v586 + 3862) & 0xFB) == 0
                          || *(unsigned char *)(v585 + 16) == 83)
                        {
                          goto LABEL_1162;
                        }
                        uint64_t v588 = *(llvm::Value **)(v585 + 40);
                        v1308 = v588;
                        if (v1271 == v588) {
                          goto LABEL_1161;
                        }
                        v589 = sub_1CD467E2C((uint64_t)&__s2, (uint64_t *)&v1308);
                        v590 = sub_1CC2738C4((uint64_t)v1337, (uint64_t *)&v1308);
                        uint64_t v559 = (uint64_t)v1278;
                        if (v589[1] | v590[1]) {
                          goto LABEL_1161;
                        }
                        int v591 = v590;
                        uint64_t v592 = (void *)((char *)v588 + 40);
                        v593 = (void *)*((void *)v588 + 6);
                        break;
                      default:
                        goto LABEL_1162;
                    }
                    while (v593 != v592)
                    {
                      uint64_t v594 = v593 - 3;
                      if (!v593) {
                        uint64_t v594 = 0;
                      }
                      if (*((unsigned char *)v594 + 16) != 83)
                      {
                        unsigned int v595 = *((unsigned __int8 *)v593 - 8) - 38;
                        BOOL v80 = v595 > 0x38;
                        uint64_t v596 = (1 << v595) & 0x100060000000001;
                        if (v80 || v596 == 0) {
                          uint64_t v592 = v593;
                        }
                        else {
                          uint64_t v592 = (void *)v593[1];
                        }
                        break;
                      }
                      v593 = (void *)v593[1];
                    }
                    v598 = *(v7 - 8);
                    if (v592) {
                      uint64_t v599 = (uint64_t)(v592 - 3);
                    }
                    else {
                      uint64_t v599 = 0;
                    }
                    if (*((unsigned char *)v7 + 16) == 55)
                    {
                      LOWORD(v1314) = 257;
                      char v600 = 27;
                    }
                    else
                    {
                      LOWORD(v1314) = 257;
                      char v600 = 26;
                    }
                    unint64_t v601 = llvm::BinaryOperator::Create(v600, v598, v1261, (const char **)&__src, v599);
                    v589[1] = v601;
                    int v602 = v601;
                    v603 = (llvm *)v7[6];
                    v1304 = v603;
                    if (v603) {
                      llvm::MetadataTracking::track((uint64_t)&v1304, (unsigned __int8 *)v603, 2);
                    }
                    v604 = (llvm **)((char *)v602 + 48);
                    if (&v1304 == v604)
                    {
                      if (v1304)
                      {
                        int v637 = *(unsigned __int8 *)v1304;
                        if ((v637 - 4) > 0x1E)
                        {
                          if ((v637 - 3) >= 0xFFFFFFFE) {
                            unsigned int v643 = v1304;
                          }
                          else {
                            unsigned int v643 = 0;
                          }
                          if ((v637 - 3) < 0xFFFFFFFE)
                          {
                            if (v637 == 3) {
                              *((void *)v1304 + 1) = 0;
                            }
                            goto LABEL_1189;
                          }
                          unint64_t v639 = (unint64_t)v643 + 8;
                        }
                        else
                        {
                          if ((*((unsigned char *)v1304 + 1) & 0x7F) != 2 && !*((_DWORD *)v1304 + 3)) {
                            goto LABEL_1189;
                          }
                          uint64_t v638 = *((void *)v1304 + 2);
                          if ((v638 & 4) == 0) {
                            goto LABEL_1189;
                          }
                          unint64_t v639 = v638 & 0xFFFFFFFFFFFFFFF8;
                          if (!v639) {
                            goto LABEL_1189;
                          }
                        }
                        __src = &v1304;
                        sub_1CC5FA668(v639 + 16, &__src);
                      }
                    }
                    else
                    {
                      uint64_t v605 = *v604;
                      if (!*v604) {
                        goto LABEL_1187;
                      }
                      int v629 = *(unsigned __int8 *)v605;
                      if ((v629 - 4) <= 0x1E)
                      {
                        if ((*((unsigned char *)v605 + 1) & 0x7F) != 2 && !*((_DWORD *)v605 + 3)) {
                          goto LABEL_1187;
                        }
                        uint64_t v630 = *((void *)v605 + 2);
                        if ((v630 & 4) == 0) {
                          goto LABEL_1187;
                        }
                        unint64_t v631 = v630 & 0xFFFFFFFFFFFFFFF8;
                        if (!v631) {
                          goto LABEL_1187;
                        }
                        goto LABEL_1235;
                      }
                      if ((v629 - 3) >= 0xFFFFFFFE) {
                        long long v635 = *v604;
                      }
                      else {
                        long long v635 = 0;
                      }
                      if ((v629 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v631 = (unint64_t)v635 + 8;
LABEL_1235:
                        __src = v604;
                        sub_1CC5FA668(v631 + 16, &__src);
                        goto LABEL_1187;
                      }
                      if (v629 == 3) {
                        *((void *)v605 + 1) = 0;
                      }
LABEL_1187:
                      v606 = (unsigned __int8 *)v1304;
                      char *v604 = v1304;
                      if (v606)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v1304, v606, (uint64_t)v604);
                        v1304 = 0;
                      }
                    }
LABEL_1189:
                    v607 = (char *)v1308 + 40;
                    for (uint64_t m = (char *)*((void *)v1308 + 6); m != v607; uint64_t m = (char *)*((void *)m + 1))
                    {
                      uint64_t v609 = m - 24;
                      if (!m) {
                        uint64_t v609 = 0;
                      }
                      if (v609[16] != 83)
                      {
                        unsigned int v610 = *(m - 8) - 38;
                        BOOL v80 = v610 > 0x38;
                        uint64_t v611 = (1 << v610) & 0x100060000000001;
                        if (v80 || v611 == 0) {
                          v607 = m;
                        }
                        else {
                          v607 = (char *)*((void *)m + 1);
                        }
                        break;
                      }
                    }
                    uint64_t v613 = *((void *)v607 + 1);
                    int v614 = *((unsigned __int8 *)v563 + 16) - 28;
                    uint64_t v615 = v589[1];
                    v616 = *v563;
                    if (v613) {
                      uint64_t v617 = v613 - 24;
                    }
                    else {
                      uint64_t v617 = 0;
                    }
                    LOWORD(v1314) = 257;
                    v618 = llvm::CastInst::Create(v614, v615, (uint64_t)v616, (const char **)&__src, v617);
                    v591[1] = (uint64_t)v618;
                    int v619 = v618;
                    v620 = (unsigned __int8 *)v563[6];
                    v1355 = v620;
                    if (v620) {
                      llvm::MetadataTracking::track((uint64_t)&v1355, v620, 2);
                    }
                    v621 = (unsigned __int8 **)((char *)v619 + 48);
                    if (&v1355 == v621)
                    {
                      if (v1355)
                      {
                        int v640 = *v1355;
                        if ((v640 - 4) > 0x1E)
                        {
                          if ((v640 - 3) >= 0xFFFFFFFE) {
                            int v644 = v1355;
                          }
                          else {
                            int v644 = 0;
                          }
                          if ((v640 - 3) < 0xFFFFFFFE)
                          {
                            if (v640 == 3) {
                              *((void *)v1355 + 1) = 0;
                            }
                            goto LABEL_1210;
                          }
                          unint64_t v642 = (unint64_t)v644 + 8;
                        }
                        else
                        {
                          if ((v1355[1] & 0x7F) != 2 && !*((_DWORD *)v1355 + 3)) {
                            goto LABEL_1210;
                          }
                          uint64_t v641 = *((void *)v1355 + 2);
                          if ((v641 & 4) == 0) {
                            goto LABEL_1210;
                          }
                          unint64_t v642 = v641 & 0xFFFFFFFFFFFFFFF8;
                          if (!v642) {
                            goto LABEL_1210;
                          }
                        }
                        __src = &v1355;
                        sub_1CC5FA668(v642 + 16, &__src);
                      }
                    }
                    else
                    {
                      uint64_t v622 = *v621;
                      if (!*v621) {
                        goto LABEL_1208;
                      }
                      int v632 = *v622;
                      if ((v632 - 4) <= 0x1E)
                      {
                        if ((v622[1] & 0x7F) != 2 && !*((_DWORD *)v622 + 3)) {
                          goto LABEL_1208;
                        }
                        uint64_t v633 = *((void *)v622 + 2);
                        if ((v633 & 4) == 0) {
                          goto LABEL_1208;
                        }
                        unint64_t v634 = v633 & 0xFFFFFFFFFFFFFFF8;
                        if (!v634) {
                          goto LABEL_1208;
                        }
                        goto LABEL_1241;
                      }
                      if ((v632 - 3) >= 0xFFFFFFFE) {
                        long long v636 = *v621;
                      }
                      else {
                        long long v636 = 0;
                      }
                      if ((v632 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v634 = (unint64_t)(v636 + 8);
LABEL_1241:
                        __src = v621;
                        sub_1CC5FA668(v634 + 16, &__src);
                        goto LABEL_1208;
                      }
                      if (v632 == 3) {
                        *((void *)v622 + 1) = 0;
                      }
LABEL_1208:
                      v623 = v1355;
                      char *v621 = v1355;
                      if (v623)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v1355, v623, (uint64_t)v621);
                        v1355 = 0;
                      }
                    }
LABEL_1210:
                    uint64_t v624 = v591[1];
                    if (*(void *)v583)
                    {
                      **(void **)(v583 + 16) = *(void *)(v583 + 8);
                      uint64_t v625 = *(void *)(v583 + 8);
                      if (v625) {
                        *(void *)(v625 + 16) = *(void *)(v583 + 16);
                      }
                    }
                    *(void *)uint64_t v583 = v624;
                    if (v624)
                    {
                      uint64_t v628 = *(void *)(v624 + 8);
                      v626 = (void *)(v624 + 8);
                      uint64_t v627 = v628;
                      void *v584 = v628;
                      if (v628) {
                        *(void *)(v627 + 16) = v584;
                      }
                      *(void *)(v583 + 16) = v626;
                      void *v626 = v583;
                    }
                    char v1265 = 1;
                    uint64_t v559 = (uint64_t)v1278;
LABEL_1161:
                    int v36 = v1291;
LABEL_1162:
                    if (!v582)
                    {
                      v645 = v1337[0];
                      unint64_t v556 = v1267;
                      int v560 = v1263;
                      goto LABEL_1288;
                    }
                    continue;
                  }
                }
              }
              else
              {
LABEL_1284:
                int v36 = v1291;
              }
            }
LABEL_1285:
            if (!v560)
            {
              if (v7[1])
              {
                MEMORY[0x1D25D9CD0](__s2, 8);
                if ((v1265 & 1) == 0)
                {
                  int v271 = *((unsigned __int8 *)v7 + 16);
                  goto LABEL_1355;
                }
LABEL_214:
                LOBYTE(v25) = 1;
                return v25 & 1;
              }
LABEL_1418:
              __src = (char *)&v1312 + 8;
              *(void *)&long long v1312 = 0x100000000;
              llvm::findDbgUsers((uint64_t)&__src, (uint64_t ***)v7);
              llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v7, (uint64_t *)__src, v1312);
              if (__src != (char *)&v1312 + 8) {
                free(__src);
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
        }
      }
    }
LABEL_1373:
    __src = (char *)&v1312 + 8;
    *(void *)&long long v1312 = 0x400000000;
    if (!(*(unsigned int (**)(void, llvm::LLVMContext ***, void **))(**(void **)(a1 + 48) + 1224))(*(void *)(a1 + 48), v7, &__src))
    {
      BOOL v696 = 0;
      goto LABEL_1375;
    }
    v1282 = (llvm::Instruction *)v37;
    v1293 = v36;
    v734 = v7[5];
    v1337[0] = &v1338;
    v1337[1] = (void *)0x400000000;
    v1355 = (unsigned __int8 *)v7;
    v1308 = 0;
    uint64_t v1309 = 0;
    LODWORD(v1310[0]) = 0;
    v735 = (llvm::LLVMContext **)v734[6];
    if (v735 != v734 + 5)
    {
      uint64_t v736 = 0;
      do
      {
        v737 = v735 - 3;
        if (!v735) {
          v737 = 0;
        }
        long long __s2 = v737;
        sub_1CD45F378((uint64_t)&v1308, (uint64_t *)&__s2)[1] = v736;
        v735 = (llvm::LLVMContext **)v735[1];
        ++v736;
      }
      while (v735 != v734 + 5);
    }
    if (v1312)
    {
      uint64_t v832 = 8 * v1312;
      v833 = (char *)__src - 8;
      do
      {
        v834 = *(unsigned __int8 ***)&v833[v832];
        v835 = *v834;
        long long __s2 = v835;
        if (v835[16] != 83)
        {
          if (*((llvm::LLVMContext ***)v835 + 5) == v734)
          {
            unint64_t v836 = sub_1CD45F378((uint64_t)&v1308, (uint64_t *)&__s2)[1];
            if (v836 < sub_1CD45F378((uint64_t)&v1308, (uint64_t *)&v1355)[1]) {
              v1355 = v835;
            }
          }
          else
          {
            if (LODWORD(v1337[1]) >= (unint64_t)HIDWORD(v1337[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1337[0] + LODWORD(v1337[1])) = v834;
            ++LODWORD(v1337[1]);
          }
        }
        v832 -= 8;
      }
      while (v832);
    }
    long long __s2 = 0;
    uint64_t v1330 = 0;
    LODWORD(v1331) = 0;
    v1333[0] = 0;
    v1333[1] = 0;
    uint64_t v1332 = 0;
    v1304 = 0;
    uint64_t v1305 = 0;
    v1306[0] = 0;
    BOOL v696 = LODWORD(v1337[1]) != 0;
    if (LODWORD(v1337[1]))
    {
      v738 = (uint64_t *)v1337[0];
      v739 = (char *)v1337[0] + 8 * LODWORD(v1337[1]);
      while (1)
      {
        uint64_t v740 = *v738;
        v1334 = 0;
        v1334 = *(void **)v740;
        v741 = llvm::Instruction::clone((llvm::Instruction *)v1334);
        sub_1CD4F8350((uint64_t *)&v1304, &v1334)[1] = v741;
        sub_1CC27C13C(&__s2, &v1334);
        v742 = v1355;
        uint64_t v743 = *((void *)v1355 + 5);
        v741[5] = v743;
        *(_WORD *)(v743 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v741 + 23) & 0x10) != 0)
        {
          uint64_t v783 = *(void *)(v743 + 56);
          if (v783)
          {
            v784 = *(llvm::ValueSymbolTable **)(v783 + 104);
            if (v784) {
              llvm::ValueSymbolTable::reinsertValue(v784, (llvm::Value *)v741);
            }
          }
        }
        uint64_t v745 = v742[3];
        v744 = v742 + 3;
        v741[4] = v744;
        v741[3] = v745;
        *(void *)(v745 + 8) = v741 + 3;
        void *v744 = v741 + 3;
        v1355 = (unsigned __int8 *)v741;
        uint64_t v746 = *(void *)(a1 + 200);
        uint64_t v747 = *(unsigned int *)(a1 + 212);
        if (v746 == *(void *)(a1 + 192))
        {
          v748 = v1293;
          if (v747)
          {
            v749 = 0;
            uint64_t v750 = 8 * v747;
            v751 = *(void **)(a1 + 200);
            do
            {
              if ((void *)*v751 == v741) {
                goto LABEL_1474;
              }
              if (*v751 == -2) {
                v749 = v751;
              }
              ++v751;
              v750 -= 8;
            }
            while (v750);
            if (v749)
            {
              void *v749 = v741;
              --*(_DWORD *)(a1 + 216);
              goto LABEL_1474;
            }
          }
          unsigned int v752 = *(_DWORD *)v1282;
          if (v747 < *(_DWORD *)v1282)
          {
            _DWORD *v1293 = v747 + 1;
            *(void *)(v746 + 8 * v747) = v741;
            goto LABEL_1474;
          }
        }
        else
        {
          v748 = v1293;
          unsigned int v752 = *(_DWORD *)v1282;
        }
        if (3 * v752 <= 4 * ((int)v747 - *(_DWORD *)(a1 + 216)))
        {
          if (v752 >= 0x40) {
            v752 *= 2;
          }
          else {
            unsigned int v752 = 128;
          }
        }
        else if (v752 - v747 >= v752 >> 3)
        {
          goto LABEL_1455;
        }
        llvm::SmallPtrSetImplBase::Grow(v11, v752);
        unsigned int v752 = *(_DWORD *)(a1 + 208);
        uint64_t v746 = *(void *)(a1 + 200);
LABEL_1455:
        unsigned int v753 = v752 - 1;
        unsigned int v754 = (v752 - 1) & ((v741 >> 4) ^ (v741 >> 9));
        v755 = (void *)(v746 + 8 * v754);
        v756 = (void *)*v755;
        if (*v755 == -1)
        {
          v757 = 0;
LABEL_1467:
          if (v757) {
            v761 = v757;
          }
          else {
            v761 = v755;
          }
          if ((void *)*v761 != v741)
          {
            if (*v761 == -2) {
              --*(_DWORD *)(a1 + 216);
            }
            else {
              ++*v748;
            }
            void *v761 = v741;
          }
        }
        else
        {
          v757 = 0;
          int v758 = 1;
          while (v756 != v741)
          {
            if (v757) {
              BOOL v759 = 0;
            }
            else {
              BOOL v759 = v756 == (void *)-2;
            }
            if (v759) {
              v757 = v755;
            }
            unsigned int v760 = v754 + v758++;
            unsigned int v754 = v760 & v753;
            v755 = (void *)(v746 + 8 * (v760 & v753));
            v756 = (void *)*v755;
            if (*v755 == -1) {
              goto LABEL_1467;
            }
          }
        }
LABEL_1474:
        v762 = *(void **)(v740 + 24);
        __n128 __dst = v762;
        if (v1306[0])
        {
          unsigned int v767 = ((v762 >> 4) ^ (v762 >> 9)) & (v1306[0] - 1);
          v768 = (void *)*((void *)v1304 + 2 * v767);
          if (v762 == v768)
          {
LABEL_1483:
            v769 = sub_1CD4F8350((uint64_t *)&v1304, &__dst);
            uint64_t v770 = *(void *)(v740 + 24);
            int v771 = *(_DWORD *)(v770 + 20);
            if ((v771 & 0x40000000) != 0) {
              uint64_t v772 = *(void *)(v770 - 8);
            }
            else {
              uint64_t v772 = v770 - 32 * (v771 & 0x7FFFFFF);
            }
            uint64_t v773 = v769[1];
            int v774 = *(_DWORD *)(v773 + 20);
            if ((v774 & 0x40000000) != 0) {
              uint64_t v775 = *(void *)(v773 - 8);
            }
            else {
              uint64_t v775 = v773 - 32 * (v774 & 0x7FFFFFF);
            }
            uint64_t v776 = ((unint64_t)(v740 - v772) >> 5);
            uint64_t v777 = v775 + 32 * v776;
            if (*(void *)v777)
            {
              **(void **)(v777 + 16) = *(void *)(v777 + 8);
              uint64_t v778 = *(void *)(v777 + 8);
              if (v778) {
                *(void *)(v778 + 16) = *(void *)(v777 + 16);
              }
            }
            *(void *)uint64_t v777 = v741;
            if (v741)
            {
              uint64_t v781 = v741[1];
              v780 = v741 + 1;
              uint64_t v779 = v781;
              uint64_t v782 = v775 + 32 * v776;
              *(void *)(v782 + 8) = v781;
              if (v781) {
                *(void *)(v779 + 16) = v782 + 8;
              }
              *(void *)(v782 + 16) = v780;
              void *v780 = v777;
            }
            goto LABEL_1494;
          }
          int v785 = 1;
          while (v768 != (void *)-4096)
          {
            unsigned int v786 = v767 + v785++;
            unsigned int v767 = v786 & (v1306[0] - 1);
            v768 = (void *)*((void *)v1304 + 2 * v767);
            if (v762 == v768) {
              goto LABEL_1483;
            }
          }
        }
        if (*(void *)v740)
        {
          **(void **)(v740 + 16) = *(void *)(v740 + 8);
          uint64_t v763 = *(void *)(v740 + 8);
          if (v763) {
            *(void *)(v763 + 16) = *(void *)(v740 + 16);
          }
        }
        *(void *)uint64_t v740 = v741;
        if (v741)
        {
          uint64_t v766 = v741[1];
          v765 = v741 + 1;
          uint64_t v764 = v766;
          *(void *)(v740 + 8) = v766;
          if (v766) {
            *(void *)(v764 + 16) = v740 + 8;
          }
          *(void *)(v740 + 16) = v765;
          void *v765 = v740;
        }
LABEL_1494:
        if (++v738 == (uint64_t *)v739)
        {
          for (uint64_t n = v1332; n != v1333[0]; n += 8)
          {
            if (!*(void *)(*(void *)n + 8)) {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
          break;
        }
      }
    }
    MEMORY[0x1D25D9CD0](v1304, 8);
    sub_1CD456CB4(&__s2);
    MEMORY[0x1D25D9CD0](v1308, 8);
    if (v1337[0] != &v1338) {
      free(v1337[0]);
    }
LABEL_1375:
    if (__src != (char *)&v1312 + 8) {
      free(__src);
    }
    if (v696) {
      goto LABEL_214;
    }
    LOBYTE(v25) = 0;
    unsigned int v697 = *((unsigned __int8 *)v7 + 16);
    if (v697 <= 0x53)
    {
      if (v697 - 53 < 3)
      {
        if (((*v7)[1] & 0xFE) != 0x12) {
          goto LABEL_23;
        }
        if (!(*(unsigned int (**)(void))(**(void **)(a1 + 48) + 1104))(*(void *)(a1 + 48))) {
          goto LABEL_23;
        }
        v1308 = 0;
        v1304 = 0;
        v1355 = 0;
        uint64_t v698 = (uint64_t)*(v7 - 4);
        __src = &v1308;
        *(void *)&long long v1312 = &v1304;
        *((void *)&v1312 + 1) = &v1355;
        uint64_t v699 = *(void *)(v698 + 8);
        if (!v699 || *(void *)(v699 + 8) || !sub_1CC189B48((void **)&__src, v698)) {
          goto LABEL_23;
        }
        LOBYTE(v25) = 0;
        if (!llvm::isSplatValue((const void **)v1304, (const llvm::Value *)0xFFFFFFFFLL, 0, v700)) {
          return v25 & 1;
        }
        LOBYTE(v25) = 0;
        if (!llvm::isSplatValue((const void **)v1355, (const llvm::Value *)0xFFFFFFFFLL, 0, v701)) {
          return v25 & 1;
        }
        v702 = 0;
        v703 = **v7;
        __src = (char *)&v1312 + 8;
        *(void *)&long long v1312 = 0x200000000;
        v1318 = v703;
        v1319 = &v1327;
        v1320 = v1328;
        v1321 = 0;
        int v1322 = 0;
        __int16 v1323 = 512;
        char v1324 = 7;
        uint64_t v1325 = 0;
        uint64_t v1326 = 0;
        v1327 = &unk_1F2616E88;
        v1328[0] = &unk_1F2617008;
        v704 = v7[6];
        v1316 = v7[5];
        v1317 = (void ***)(v7 + 3);
        long long __s2 = v704;
        if (v704)
        {
          llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v704, 2);
          v702 = __s2;
        }
        sub_1CB8461A4((uint64_t)&__src, 0, (uint64_t)v702);
        if (!__s2)
        {
LABEL_1390:
          uint64_t v705 = *((unsigned __int8 *)v7 + 16) - 28;
          uint64_t v706 = (uint64_t)*(v7 - 8);
          LOWORD(v1340) = 257;
          v707 = sub_1CB844E98((uint64_t)&__src, v705, v706, (uint64_t)v1304, (uint64_t)v1337, 0);
          uint64_t v708 = (uint64_t)*(v7 - 8);
          LOWORD(v1340) = 257;
          v709 = sub_1CB844E98((uint64_t)&__src, v705, v708, (uint64_t)v1355, (uint64_t)v1337, 0);
          LOWORD(v1340) = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&__src, v1308, v707, v709, (const llvm::Twine *)v1337, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, Select, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v1195 = *(unsigned __int8 *)__s2;
        if ((v1195 - 4) > 0x1E)
        {
          if ((v1195 - 3) >= 0xFFFFFFFE) {
            v1207 = __s2;
          }
          else {
            v1207 = 0;
          }
          if ((v1195 - 3) < 0xFFFFFFFE)
          {
            if (v1195 == 3) {
              *((void *)__s2 + 1) = 0;
            }
            goto LABEL_1390;
          }
          unint64_t v1197 = (unint64_t)v1207 + 8;
        }
        else
        {
          if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
            goto LABEL_1390;
          }
          uint64_t v1196 = *((void *)__s2 + 2);
          if ((v1196 & 4) == 0) {
            goto LABEL_1390;
          }
          unint64_t v1197 = v1196 & 0xFFFFFFFFFFFFFFF8;
          if (!v1197) {
            goto LABEL_1390;
          }
        }
        v1337[0] = &__s2;
        sub_1CC5FA668(v1197 + 16, v1337);
        goto LABEL_1390;
      }
      if (v697 != 30)
      {
        if (v697 != 31) {
          return v25 & 1;
        }
        int v723 = *((_DWORD *)v7 + 5);
        if ((v723 & 0x40000000) != 0) {
          v724 = (llvm::LLVMContext ***)*(v7 - 1);
        }
        else {
          v724 = &v7[-4 * (v723 & 0x7FFFFFF)];
        }
        v838 = *v724;
        int v25 = **v724;
        v839 = *(llvm::LLVMContext **)v25;
        unint64_t v840 = sub_1CB87DC14(*(void *)(a1 + 48), *(void *)(a1 + 720), v25, 0);
        uint64_t v842 = v841;
        LOBYTE(v1308) = sub_1CB87E160(*(void *)(a1 + 48), v839, v840, v841);
        v844 = (llvm::LLVMContext *)sub_1CB87E200((unsigned __int8 *)&v1308);
        if (v843 == 1) {
        unsigned int v845 = *((_DWORD *)v25 + 2) >> 8;
        }
        LOBYTE(v25) = v845 < v844;
        if (v845 >= v844) {
          return v25 & 1;
        }
        uint64_t v846 = llvm::IntegerType::get(v839, v844);
        if ((*(unsigned int (**)(void, unint64_t, uint64_t, void, void))(**(void **)(a1 + 48)
                                                                                               + 1208))(*(void *)(a1 + 48), v840, v842, v1308, 0))
        {
          int v847 = 40;
        }
        else
        {
          int v847 = 39;
        }
        if (*((unsigned char *)v838 + 16) == 21)
        {
          uint64_t v848 = *((void *)v838[3] + 14);
          if (v848)
          {
            uint64_t v849 = (*((_DWORD *)v838 + 8) + 2);
            if (v849 < *(_DWORD *)(v848 + 8))
            {
              uint64_t v1135 = v848 + 40;
              uint64_t v1136 = *(void *)(v1135 + 8 * v849);
              if (v1136 && (*(unsigned char *)(v1136 + 18) & 1) != 0) {
                int v847 = 40;
              }
              uint64_t v1137 = *(void *)(v1135 + 8 * v849);
              if (v1137 && (*(unsigned char *)(v1137 + 20) & 8) != 0) {
                int v847 = 39;
              }
            }
          }
        }
        LOWORD(v1314) = 257;
        v851 = llvm::CastInst::Create(v847, (uint64_t)v838, v846, (const char **)&__src, 0);
        v852 = v7[5];
        *((void *)v851 + 5) = v852;
        *((_WORD *)v852 + 9) &= ~0x8000u;
        if ((*((unsigned char *)v851 + 23) & 0x10) != 0)
        {
          v1004 = v852[7];
          if (v1004)
          {
            v1005 = (llvm::ValueSymbolTable *)*((void *)v1004 + 13);
            if (v1005) {
              llvm::ValueSymbolTable::reinsertValue(v1005, v851);
            }
          }
        }
        v853 = v7[3];
        *((void *)v851 + 3) = v853;
        *((void *)v851 + 4) = v7 + 3;
        v853[1] = (llvm::Value *)((char *)v851 + 24);
        v7[3] = (llvm::LLVMContext **)((char *)v851 + 24);
        v854 = v7[6];
        long long __s2 = v854;
        if (v854) {
          llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v854, 2);
        }
        v855 = (void **)((char *)v851 + 48);
        if (&__s2 == (void **)((char *)v851 + 48))
        {
          if (__s2)
          {
            int v1242 = *(unsigned __int8 *)__s2;
            if ((v1242 - 4) > 0x1E)
            {
              if ((v1242 - 3) >= 0xFFFFFFFE) {
                v1245 = __s2;
              }
              else {
                v1245 = 0;
              }
              if ((v1242 - 3) < 0xFFFFFFFE)
              {
                if (v1242 == 3) {
                  *((void *)__s2 + 1) = 0;
                }
                goto LABEL_1617;
              }
              unint64_t v1244 = (unint64_t)v1245 + 8;
            }
            else
            {
              if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
                goto LABEL_1617;
              }
              uint64_t v1243 = *((void *)__s2 + 2);
              if ((v1243 & 4) == 0) {
                goto LABEL_1617;
              }
              unint64_t v1244 = v1243 & 0xFFFFFFFFFFFFFFF8;
              if (!v1244) {
                goto LABEL_1617;
              }
            }
            __src = &__s2;
            sub_1CC5FA668(v1244 + 16, &__src);
          }
        }
        else
        {
          v856 = (unsigned __int8 *)*v855;
          if (!*v855) {
            goto LABEL_1615;
          }
          int v1001 = *v856;
          if ((v1001 - 4) <= 0x1E)
          {
            if ((v856[1] & 0x7F) != 2 && !*((_DWORD *)v856 + 3)) {
              goto LABEL_1615;
            }
            uint64_t v1002 = *((void *)v856 + 2);
            if ((v1002 & 4) == 0) {
              goto LABEL_1615;
            }
            unint64_t v1003 = v1002 & 0xFFFFFFFFFFFFFFF8;
            if (!v1003) {
              goto LABEL_1615;
            }
            goto LABEL_2139;
          }
          if ((v1001 - 3) >= 0xFFFFFFFE) {
            v1131 = *v855;
          }
          else {
            v1131 = 0;
          }
          if ((v1001 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1003 = (unint64_t)v1131 + 8;
LABEL_2139:
            __src = (char *)v851 + 48;
            sub_1CC5FA668(v1003 + 16, &__src);
            goto LABEL_1615;
          }
          if (v1001 == 3) {
            *((void *)v856 + 1) = 0;
          }
LABEL_1615:
          v857 = (unsigned __int8 *)__s2;
          *v855 = __s2;
          if (v857)
          {
            llvm::MetadataTracking::retrack((uint64_t)&__s2, v857, (uint64_t)v851 + 48);
            long long __s2 = 0;
          }
        }
LABEL_1617:
        int v858 = *((_DWORD *)v7 + 5);
        if ((v858 & 0x40000000) != 0) {
          v859 = *(v7 - 1);
        }
        else {
          v859 = (llvm::Value **)&v7[-4 * (v858 & 0x7FFFFFF)];
        }
        if (*v859)
        {
          *(void *)v859[2] = v859[1];
          v989 = v859[1];
          if (v989) {
            *((void *)v989 + 2) = v859[2];
          }
        }
        *v859 = v851;
        v862 = (llvm::Value *)*((void *)v851 + 1);
        v861 = (llvm::Value ***)((char *)v851 + 8);
        v860 = v862;
        v859[1] = v862;
        if (v862) {
          *((void *)v860 + 2) = v859 + 1;
        }
        v859[2] = (llvm::Value *)v861;
        *v861 = v859;
        if (((*((_DWORD *)v7 + 5) >> 1) & 0x3FFFFFF) != 1)
        {
          uint64_t v863 = 0;
          uint64_t v864 = 2 * (((*((_DWORD *)v7 + 5) >> 1) & 0x3FFFFFFu) - 1);
          do
          {
            int v865 = *((_DWORD *)v7 + 5);
            if ((v865 & 0x40000000) != 0) {
              v866 = (llvm::LLVMContext ***)*(v7 - 1);
            }
            else {
              v866 = &v7[-4 * (v865 & 0x7FFFFFF)];
            }
            uint64_t v867 = (v863 + 2) & 0xFFFFFFFE;
            v868 = v866[4 * v867];
            unsigned int v869 = *((_DWORD *)v868 + 8);
            LODWORD(v1312) = v869;
            if (v869 > 0x40) {
              operator new[]();
            }
            unint64_t v870 = (unint64_t)v868[3];
            __src = (void *)v870;
            if (v847 == 39)
            {
              if (v844 > 0x40)
              {
                if (v869 != v844) {
                  operator new[]();
                }
                sub_1CD0463BC((uint64_t)v1337, (uint64_t)&__src);
              }
              else
              {
                LODWORD(v1337[1]) = v844;
                v1337[0] = (void *)(v870 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v844));
              }
            }
            else
            {
              llvm::APInt::sext((uint64_t)&__src, v844, (uint64_t)v1337);
            }
            v871 = llvm::ConstantInt::get(v839, (llvm::LLVMContext *)v1337, v850);
            int v872 = *((_DWORD *)v7 + 5);
            if ((v872 & 0x40000000) != 0) {
              v873 = (llvm::LLVMContext ***)*(v7 - 1);
            }
            else {
              v873 = &v7[-4 * (v872 & 0x7FFFFFF)];
            }
            v874 = &v873[4 * v867];
            if (*v874)
            {
              *v874[2] = (llvm::LLVMContext *)v874[1];
              v879 = v874[1];
              if (v879) {
                v879[2] = (llvm::LLVMContext *)v874[2];
              }
            }
            *v874 = (llvm::LLVMContext **)v871;
            if (v871)
            {
              v877 = (llvm::LLVMContext **)v871[1];
              v875 = (llvm::LLVMContext ****)(v871 + 1);
              v876 = v877;
              v878 = &v873[4 * v867];
              v878[1] = v877;
              if (v877) {
                v876[2] = (llvm::LLVMContext *)(v878 + 1);
              }
              v878[2] = (llvm::LLVMContext **)v875;
              *v875 = v874;
            }
            if (LODWORD(v1337[1]) >= 0x41 && v1337[0]) {
              MEMORY[0x1D25D9CB0](v1337[0], 0x1000C8000313F17);
            }
            if (v1312 >= 0x41 && __src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
            v863 += 2;
          }
          while (v864 != v863);
        }
        return v25 & 1;
      }
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 48) + 256))(*(void *)(a1 + 48))
        || (*((_DWORD *)v7 + 5) & 0x7FFFFFF) != 3)
      {
        goto LABEL_23;
      }
      LOBYTE(v25) = 0;
      uint64_t v818 = (uint64_t)*(v7 - 12);
      if (!v818 || *(unsigned char *)(v818 + 16) != 81) {
        return v25 & 1;
      }
      uint64_t v819 = *(void *)(v818 - 32);
      if (*(unsigned char *)(v819 + 16) != 16) {
        goto LABEL_23;
      }
      uint64_t v820 = *(void *)(v818 + 8);
      if (!v820 || *(void *)(v820 + 8)) {
        goto LABEL_23;
      }
      v821 = *(void **)(v818 - 64);
      unsigned int v822 = *(_DWORD *)(v819 + 32);
      if (v822 > 0x40) {
        operator new[]();
      }
      __pb = *(void **)(v819 + 24);
      uint64_t v1138 = v821[1];
      if (!v1138)
      {
LABEL_2218:
        LOBYTE(v25) = 0;
        return v25 & 1;
      }
      uint8x8_t v1139 = (uint8x8_t)vcnt_s8((int8x8_t)__pb);
      v1139.i16[0] = vaddlv_u8(v1139);
      v1287 = (llvm::Instruction *)v1139.u32[0];
      int v1272 = v822 + __clz((unint64_t)__pb) - 64;
      while (2)
      {
        uint64_t v1140 = *(void *)(v1138 + 24);
        unsigned int v1141 = *(unsigned __int8 *)(v1140 + 16);
        if (v1140) {
          BOOL v1142 = v1141 >= 0x1C;
        }
        else {
          BOOL v1142 = 0;
        }
        if (v1142)
        {
          v1143 = *(llvm::BasicBlock **)(v1140 + 40);
          if (v1143 == (llvm::BasicBlock *)v7[5]
            || (v1143 == (llvm::BasicBlock *)*(v7 - 4) || v1143 == (llvm::BasicBlock *)*(v7 - 8))
            && llvm::BasicBlock::getSinglePredecessor(v1143))
          {
            __int16 v1144 = *(_WORD *)(v818 + 18);
            if (v1287 == (llvm::Instruction *)1 && (v1144 & 0x3F) == 0x24)
            {
              DWORD2(v1312) = 64;
              __src = v821;
              *(void *)&long long v1312 = v822 + ~v1272;
              if ((v1141 & 0xFE) == 0x36)
              {
                int v1145 = *(_DWORD *)(v1140 + 20);
                uint64_t v1146 = (v1145 & 0x40000000) != 0 ? *(void *)(v1140 - 8) : v1140 - 32 * (v1145 & 0x7FFFFFF);
                if (v821 == *(void **)v1146)
                {
                  BOOL v1149 = sub_1CBF53154((llvm::APInt *)&v1312, *(unsigned __int8 **)(v1146 + 32));
                  if (DWORD2(v1312) >= 0x41 && (void)v1312) {
                    MEMORY[0x1D25D9CB0](v1312, 0x1000C8000313F17);
                  }
                  if (v1149)
                  {
                    v1208 = 0;
                    v1209 = **v7;
                    __src = (char *)&v1312 + 8;
                    *(void *)&long long v1312 = 0x200000000;
                    v1318 = v1209;
                    v1319 = &v1327;
                    v1320 = v1328;
                    v1321 = 0;
                    int v1322 = 0;
                    __int16 v1323 = 512;
                    char v1324 = 7;
                    uint64_t v1325 = 0;
                    uint64_t v1326 = 0;
                    v1327 = &unk_1F2616E88;
                    v1328[0] = &unk_1F2617008;
                    v1210 = (llvm::Value *)v7[6];
                    v1316 = v7[5];
                    v1317 = (void ***)(v7 + 3);
                    v1308 = v1210;
                    if (v1210)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v1308, (unsigned __int8 *)v1210, 2);
                      v1208 = v1308;
                    }
                    sub_1CB8461A4((uint64_t)&__src, 0, (uint64_t)v1208);
                    if (v1308)
                    {
                      int v1215 = *(unsigned __int8 *)v1308;
                      if ((v1215 - 4) > 0x1E)
                      {
                        if ((v1215 - 3) >= 0xFFFFFFFE) {
                          v1237 = v1308;
                        }
                        else {
                          v1237 = 0;
                        }
                        if ((v1215 - 3) < 0xFFFFFFFE)
                        {
                          if (v1215 == 3) {
                            *((void *)v1308 + 1) = 0;
                          }
                          goto LABEL_2332;
                        }
                        unint64_t v1217 = (unint64_t)v1237 + 8;
                      }
                      else
                      {
                        if ((*((unsigned char *)v1308 + 1) & 0x7F) != 2 && !*((_DWORD *)v1308 + 3)) {
                          goto LABEL_2332;
                        }
                        uint64_t v1216 = *((void *)v1308 + 2);
                        if ((v1216 & 4) == 0) {
                          goto LABEL_2332;
                        }
                        unint64_t v1217 = v1216 & 0xFFFFFFFFFFFFFFF8;
                        if (!v1217) {
                          goto LABEL_2332;
                        }
                      }
                      v1337[0] = &v1308;
                      sub_1CC5FA668(v1217 + 16, v1337);
                    }
LABEL_2332:
                    if (*(llvm::LLVMContext ***)(v1140 + 40) != v7[5]) {
                      llvm::Instruction::moveBefore((llvm::Instruction *)v1140, (llvm::Instruction *)v7);
                    }
                    v1202 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1140, 0, 0);
                    LOWORD(v1340) = 257;
                    __int16 v1203 = 32;
                    v1204 = (void *)v1140;
LABEL_2335:
                    FCmpHelper = sub_1CB845F20((uint64_t)&__src, v1203, v1204, (uint64_t)v1202, (uint64_t)v1337);
LABEL_2336:
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v818, FCmpHelper, (llvm::Value *)1);
                    if (__src != (char *)&v1312 + 8) {
                      free(__src);
                    }
                    LOBYTE(v25) = 1;
                    return v25 & 1;
                  }
                }
              }
              if ((*(_WORD *)(v818 + 18) & 0x3E) == 0x20)
              {
                LODWORD(v1330) = v822;
                unint64_t v1147 = (unint64_t)__pb;
                unsigned int v1148 = v822;
LABEL_2179:
                if (v1148) {
                  unint64_t v1150 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1148;
                }
                else {
                  unint64_t v1150 = 0;
                }
                long long __s2 = (void *)(v1150 & ~v1147);
                llvm::APInt::operator++((uint64_t)&__s2);
                unsigned int v1151 = v1330;
                LODWORD(v1330) = 0;
                __src = v821;
                DWORD2(v1312) = v1151;
                if (v1151 > 0x40) {
                  operator new[]();
                }
                *(void *)&long long v1312 = __s2;
                LODWORD(v1152) = *(unsigned __int8 *)(v1140 + 16);
                if (v1152 == 5)
                {
                  LODWORD(v1152) = *(unsigned __int16 *)(v1140 + 18);
                  if (v1152 == 13)
                  {
                    v1152 = (llvm::Constant **)(v1140 - 32 * (*(_DWORD *)(v1140 + 20) & 0x7FFFFFF));
                    if (__src == *v1152 && sub_1CBF531E4((llvm::APInt *)&v1312, v1152[4])) {
                      goto LABEL_2192;
                    }
                  }
LABEL_2193:
                  v1337[0] = v821;
                  LODWORD(v1338) = v822;
                  v1337[1] = __pb;
                  int v1154 = *(unsigned __int8 *)(v1140 + 16);
                  if (v1154 == 43)
                  {
                    int v1153 = v1337[0] == *(void **)(v1140 - 64)
                         && sub_1CBF53154((llvm::APInt *)&v1337[1], *(unsigned __int8 **)(v1140 - 32));
                  }
                  else
                  {
                    if (v1154 == 5) {
                      LOBYTE(v1152) = *(_WORD *)(v1140 + 18) == 15
                    }
                                   && (uint64_t v1155 = v1140 - 32 * (*(_DWORD *)(v1140 + 20) & 0x7FFFFFF),
                                       v1337[0] == *(void **)v1155)
                                   && sub_1CBF531E4((llvm::APInt *)&v1337[1], *(llvm::Constant **)(v1155 + 32));
                    int v1153 = (v1154 == 5) & v1152;
                  }
                  if (v1338 >= 0x41 && v1337[1]) {
                    MEMORY[0x1D25D9CB0](v1337[1], 0x1000C8000313F17);
                  }
                }
                else
                {
                  if (v1152 != 41) {
                    goto LABEL_2193;
                  }
                  v1152 = *(llvm::Constant ***)(v1140 - 64);
                  if (__src != v1152 || !sub_1CBF53154((llvm::APInt *)&v1312, *(unsigned __int8 **)(v1140 - 32))) {
                    goto LABEL_2193;
                  }
LABEL_2192:
                  int v1153 = 1;
                }
                if (DWORD2(v1312) >= 0x41 && (void)v1312) {
                  MEMORY[0x1D25D9CB0](v1312, 0x1000C8000313F17);
                }
                if (v1330 >= 0x41 && __s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
                if (v1153)
                {
                  v1198 = 0;
                  v1199 = **v7;
                  __src = (char *)&v1312 + 8;
                  *(void *)&long long v1312 = 0x200000000;
                  v1318 = v1199;
                  v1319 = &v1327;
                  v1320 = v1328;
                  v1321 = 0;
                  int v1322 = 0;
                  __int16 v1323 = 512;
                  char v1324 = 7;
                  uint64_t v1325 = 0;
                  uint64_t v1326 = 0;
                  v1327 = &unk_1F2616E88;
                  v1328[0] = &unk_1F2617008;
                  v1200 = (llvm::Value *)v7[6];
                  v1316 = v7[5];
                  v1317 = (void ***)(v7 + 3);
                  v1308 = v1200;
                  if (v1200)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v1308, (unsigned __int8 *)v1200, 2);
                    v1198 = v1308;
                  }
                  sub_1CB8461A4((uint64_t)&__src, 0, (uint64_t)v1198);
                  if (!v1308) {
                    goto LABEL_2295;
                  }
                  int v1211 = *(unsigned __int8 *)v1308;
                  if ((v1211 - 4) > 0x1E)
                  {
                    if ((v1211 - 3) >= 0xFFFFFFFE) {
                      v1214 = v1308;
                    }
                    else {
                      v1214 = 0;
                    }
                    if ((v1211 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v1213 = (unint64_t)v1214 + 8;
                      goto LABEL_2358;
                    }
                    if (v1211 == 3) {
                      *((void *)v1308 + 1) = 0;
                    }
                  }
                  else if ((*((unsigned char *)v1308 + 1) & 0x7F) == 2 || *((_DWORD *)v1308 + 3))
                  {
                    uint64_t v1212 = *((void *)v1308 + 2);
                    if ((v1212 & 4) != 0)
                    {
                      unint64_t v1213 = v1212 & 0xFFFFFFFFFFFFFFF8;
                      if (v1213)
                      {
LABEL_2358:
                        v1337[0] = &v1308;
                        sub_1CC5FA668(v1213 + 16, v1337);
                      }
                    }
                  }
LABEL_2295:
                  if (*(llvm::LLVMContext ***)(v1140 + 40) != v7[5]) {
                    llvm::Instruction::moveBefore((llvm::Instruction *)v1140, (llvm::Instruction *)v7);
                  }
                  uint64_t v1201 = *(_WORD *)(v818 + 18) & 0x3F;
                  v1202 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1140, 0, 0);
                  LOWORD(v1340) = 257;
                  __int16 v1203 = v1201;
                  v1204 = (void *)v1140;
                  if (v1201 > 0xF) {
                    goto LABEL_2335;
                  }
                  FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&__src, v1201, v1140, (uint64_t)v1202, (uint64_t)v1337, 0, 0);
                  goto LABEL_2336;
                }
              }
            }
            else if ((v1144 & 0x3E) == 0x20)
            {
              LODWORD(v1330) = v822;
              unint64_t v1147 = (unint64_t)__pb;
              unsigned int v1148 = v822;
              goto LABEL_2179;
            }
          }
        }
        uint64_t v1138 = *(void *)(v1138 + 8);
        if (!v1138) {
          goto LABEL_2218;
        }
        continue;
      }
    }
    switch(*((unsigned char *)v7 + 16))
    {
      case 'T':
        char v131 = sub_1CC271020(a1, (uint64_t)v7);
        goto LABEL_837;
      case 'U':
        if (byte_1EBCC9408) {
          goto LABEL_23;
        }
        v1308 = (llvm::Value *)v1310;
        v1310[0] = v7;
        uint64_t v1309 = 0x200000001;
        v811 = (void ***)(v7 + 3);
        if (!v7) {
          v811 = 0;
        }
        v812 = (llvm::LLVMContext **)v811[1];
        if (v812 == v7[5] + 5)
        {
          unsigned int v813 = 1;
          v894 = (llvm::Value *)v1310;
        }
        else
        {
          unsigned int v813 = 1;
          do
          {
            v814 = v812 - 3;
            if (!v812) {
              v814 = 0;
            }
            int v815 = *((unsigned __int8 *)v814 + 16);
            if (v815 == 85) {
              v816 = v814;
            }
            else {
              v816 = 0;
            }
            if (!v812 || v815 != 85 || *(v7 - 12) != (llvm::LLVMContext **)*(v816 - 12)) {
              break;
            }
            if (v813 >= HIDWORD(v1309)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1308 + v813) = v816;
            unsigned int v813 = v1309 + 1;
            LODWORD(v1309) = v1309 + 1;
            v812 = (llvm::LLVMContext **)v812[1];
          }
          while (v812 != v7[5] + 5);
          v894 = v1308;
        }
        uint64_t v927 = *((void *)v894 + v813 - 1);
        *(void *)(a1 + 120) = *(void *)(v927 + 32);
        if (*((_DWORD *)**(v7 - 12) + 2) != 269) {
          goto LABEL_2004;
        }
        if ((*((unsigned char *)v7 + 23) & 0x20) == 0) {
          goto LABEL_1739;
        }
        uint64_t v928 = *(void *)**v7;
        __src = v7;
        int v929 = *(_DWORD *)(v928 + 2496);
        if (v929)
        {
          uint64_t v930 = *(void *)(v928 + 2480);
          int v931 = v929 - 1;
          unsigned int v932 = v931 & ((v7 >> 4) ^ (v7 >> 9));
          v933 = (llvm::LLVMContext ****)(v930 + 40 * v932);
          v934 = *v933;
          if (*v933 == v7) {
            goto LABEL_1735;
          }
          v935 = 0;
          int v936 = 1;
          while (v934 != (llvm::LLVMContext ***)-4096)
          {
            if (v935) {
              BOOL v937 = 0;
            }
            else {
              BOOL v937 = v934 == (llvm::LLVMContext ***)-8192;
            }
            if (v937) {
              v935 = v933;
            }
            unsigned int v938 = v932 + v936++;
            unsigned int v932 = v938 & v931;
            v933 = (llvm::LLVMContext ****)(v930 + 40 * v932);
            v934 = *v933;
            if (*v933 == v7)
            {
LABEL_1735:
              uint64_t v939 = *((unsigned int *)v933 + 4);
              if (!v939) {
                goto LABEL_1739;
              }
              v940 = v933[1] + 1;
              uint64_t v941 = 16 * v939;
              while (*((_DWORD *)v940 - 2) != 15)
              {
                v940 += 2;
                v941 -= 16;
                if (!v941) {
                  goto LABEL_1739;
                }
              }
              if (!*v940)
              {
LABEL_1739:
                if (!(*(unsigned int (**)(void, BOOL))(**(void **)(a1 + 48) + 96))(*(void *)(a1 + 48), ((*v7)[1] & 0xFE) == 18))goto LABEL_1761; {
                if (*(unsigned char *)(*(void *)(a1 + 48) + 184288))
                }
                {
                  v942 = *(void **)(a1 + 64);
                  __src = 0;
                  v1337[0] = 0;
                  if (llvm::Instruction::extractProfMetadata((llvm::Instruction *)v7, (unint64_t *)&__src, (unint64_t *)v1337))
                  {
                    unint64_t v943 = (unint64_t)__src;
                    unint64_t v944 = (unint64_t)v1337[0] + (unint64_t)__src;
                    if ((char *)v1337[0] + (unint64_t)__src)
                    {
                      if (__src <= v1337[0]) {
                        unint64_t v943 = (unint64_t)v1337[0];
                      }
                      unint64_t v945 = HIDWORD(v944);
                      if (HIDWORD(v944))
                      {
                        LOBYTE(v945) = 0;
                        unint64_t v1246 = (unint64_t)v1337[0] + (unint64_t)__src;
                        do
                        {
                          unint64_t v944 = v1246 >> 1;
                          LOBYTE(v945) = v945 + 1;
                          unint64_t v1247 = v1246 >> 33;
                          v1246 >>= 1;
                        }
                        while (v1247);
                      }
                      unint64_t v946 = v943 >> v945;
                      if (v944 != 0x80000000) {
                        unint64_t v946 = (((unint64_t)(v943 >> v945) << 31) | (v944 >> 1)) / v944;
                      }
                      if ((*(unsigned int (**)(void))(*(void *)*v942 + 80))() < v946) {
                        goto LABEL_1760;
                      }
                    }
                  }
                  uint64_t v947 = (uint64_t)*(v7 - 12);
                  if (v947)
                  {
                    unsigned int v948 = *(unsigned __int8 *)(v947 + 16);
                    if (v948 >= 0x1C && v948 - 83 >= 0xFFFFFFFE)
                    {
                      uint64_t v950 = *(void *)(v947 + 8);
                      if (v950)
                      {
                        if (!*(void *)(v950 + 8)
                          && ((sub_1CC27D198(v942, (uint64_t)*(v7 - 8)) & 1) != 0
                           || (sub_1CC27D198(v942, (uint64_t)*(v7 - 4)) & 1) != 0))
                        {
LABEL_1760:
                          if (!*(unsigned char *)(a1 + 712)
                            && (llvm::shouldOptimizeForSize((llvm::BasicBlock *)v7[5], *(llvm::ProfileSummaryInfo **)(a1 + 104), *(llvm::BlockFrequencyInfoImplBase ***)(a1 + 88)) & 1) == 0)
                          {
LABEL_1761:
                            uint64_t v951 = *(void *)(a1 + 728);
                            *(void *)(a1 + 728) = 0;
                            if (v951) {
                              sub_1CBF8FF20(a1 + 728, v951);
                            }
                            uint64_t v952 = (uint64_t)v7[5];
                            uint64_t v953 = *(void *)(v927 + 32);
                            __src = "select.end";
                            LOWORD(v1314) = 259;
                            llvm::BasicBlock::splitBasicBlock(v952, v953, (uint64_t)&__src, 0);
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_2004:
              LOBYTE(v25) = 0;
              v1059 = (llvm::LLVMContext ***)v1308;
              v1060 = (llvm::LLVMContext ***)v1310;
LABEL_2312:
              if (v1059 != v1060) {
                free(v1059);
              }
              return v25 & 1;
            }
          }
          if (v935) {
            v1159 = v935;
          }
          else {
            v1159 = v933;
          }
        }
        else
        {
          v1159 = 0;
        }
        v933 = (llvm::LLVMContext ****)sub_1CC609054(v928 + 2480, (uint64_t)&__src, (uint64_t *)&__src, v1159);
        v1160 = (llvm::LLVMContext ***)__src;
        v933[3] = 0;
        v933[4] = 0;
        *v933 = v1160;
        v933[1] = (llvm::LLVMContext ***)(v933 + 3);
        v933[2] = (llvm::LLVMContext ***)0x100000000;
        goto LABEL_1735;
      case 'Y':
        LODWORD(__s2) = -1;
        if (byte_1EBCC9648) {
          goto LABEL_23;
        }
        if (byte_1EBCC9708)
        {
          int v817 = -1;
        }
        else
        {
          int v954 = *((_DWORD *)v7 + 5);
          if ((v954 & 0x40000000) != 0) {
            v955 = (llvm::LLVMContext ***)*(v7 - 1);
          }
          else {
            v955 = &v7[-4 * (v954 & 0x7FFFFFF)];
          }
          if (!(*(unsigned int (**)(void, llvm::LLVMContext *, llvm::LLVMContext **, void **))(**(void **)(a1 + 48) + 368))(*(void *)(a1 + 48), **v955, v955[4], &__s2))goto LABEL_23; {
          int v817 = (int)__s2;
          }
        }
        v962 = v7[5];
        uint64_t v963 = *(void *)(a1 + 48);
        uint64_t v964 = *(void *)(a1 + 64);
        __src = *(void **)(a1 + 720);
        *(void *)&long long v1312 = v963;
        *((void *)&v1312 + 1) = v964;
        v1313 = (llvm::Instruction *)v7;
        v1314 = &v1316;
        uint64_t v1315 = 0x400000000;
        LODWORD(v1320) = v817;
        v1321 = 0;
        v965 = v7[1];
        if (!v965) {
          goto LABEL_2310;
        }
        unsigned int v966 = 0;
        while (2)
        {
          if (v965[1]) {
            goto LABEL_2310;
          }
          v967 = v965[3];
          if (*((llvm::LLVMContext ***)v967 + 5) != v962) {
            goto LABEL_2310;
          }
          unsigned int v968 = *((unsigned __int8 *)v967 + 16);
          if (v968 != 61)
          {
            if (v968 - 41 <= 0x11)
            {
              int v969 = *((_DWORD *)v967 + 5);
              if ((v969 & 0x40000000) != 0)
              {
                v971 = (void *)*((void *)v967 - 1);
                uint64_t v970 = v969 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v970 = v969 & 0x7FFFFFF;
                v971 = (void *)((char *)v967 - 32 * v970);
              }
              if (!v970)
              {
LABEL_1814:
                uint64_t v982 = 222;
                LOBYTE(v25) = 0;
                switch(*((unsigned char *)v967 + 16))
                {
                  case '(':
                    goto LABEL_1845;
                  case ')':
                    uint64_t v982 = 56;
                    goto LABEL_1845;
                  case '*':
                    uint64_t v982 = 96;
                    goto LABEL_1845;
                  case '+':
                    uint64_t v982 = 57;
                    goto LABEL_1845;
                  case ',':
                    uint64_t v982 = 97;
                    goto LABEL_1845;
                  case '-':
                    uint64_t v982 = 58;
                    goto LABEL_1845;
                  case '.':
                    uint64_t v982 = 98;
                    goto LABEL_1845;
                  case '/':
                    uint64_t v982 = 60;
                    goto LABEL_1845;
                  case '0':
                    uint64_t v982 = 59;
                    goto LABEL_1845;
                  case '1':
                    uint64_t v982 = 99;
                    goto LABEL_1845;
                  case '2':
                    uint64_t v982 = 62;
                    goto LABEL_1845;
                  case '3':
                    uint64_t v982 = 61;
                    goto LABEL_1845;
                  case '4':
                    uint64_t v982 = 100;
                    goto LABEL_1845;
                  case '5':
                    uint64_t v982 = 175;
                    goto LABEL_1845;
                  case '6':
                    uint64_t v982 = 177;
                    goto LABEL_1845;
                  case '7':
                    uint64_t v982 = 176;
                    goto LABEL_1845;
                  case '8':
                    uint64_t v982 = 171;
                    goto LABEL_1845;
                  case '9':
                    uint64_t v982 = 172;
                    goto LABEL_1845;
                  case ':':
                    uint64_t v982 = 173;
                    goto LABEL_1845;
                  case '<':
                    uint64_t v982 = 253;
                    goto LABEL_1845;
                  case '=':
                    uint64_t v982 = 254;
                    goto LABEL_1845;
                  case 'B':
                    uint64_t v982 = 201;
                    goto LABEL_1845;
                  case 'C':
                    uint64_t v982 = 199;
                    goto LABEL_1845;
                  case 'D':
                    uint64_t v982 = 198;
                    goto LABEL_1845;
                  case 'E':
                    uint64_t v982 = 209;
                    goto LABEL_1845;
                  case 'F':
                    uint64_t v982 = 208;
                    goto LABEL_1845;
                  case 'G':
                    uint64_t v982 = 203;
                    goto LABEL_1845;
                  case 'H':
                    uint64_t v982 = 202;
                    goto LABEL_1845;
                  case 'I':
                    uint64_t v982 = 212;
                    goto LABEL_1845;
                  case 'J':
                    uint64_t v982 = 215;
                    goto LABEL_1845;
                  case 'K':
                  case 'L':
                  case 'M':
                    uint64_t v982 = 216;
                    goto LABEL_1845;
                  case 'N':
                    uint64_t v982 = 217;
                    goto LABEL_1845;
                  case 'Q':
                  case 'R':
                    uint64_t v982 = 193;
                    goto LABEL_1845;
                  case 'U':
                    uint64_t v982 = 190;
                    goto LABEL_1845;
                  case 'Y':
                    uint64_t v982 = 148;
                    goto LABEL_1845;
                  case 'Z':
                    uint64_t v982 = 147;
                    goto LABEL_1845;
                  case '[':
                    uint64_t v982 = 153;
                    goto LABEL_1845;
                  case '\\':
                  case ']':
                    uint64_t v982 = 55;
                    goto LABEL_1845;
                  case '_':
                    uint64_t v982 = 52;
LABEL_1845:
                    if (byte_1EBCC9708) {
                      goto LABEL_1854;
                    }
                    int v983 = *((_DWORD *)v1313 + 5);
                    if ((v983 & 0x40000000) != 0) {
                      v984 = (llvm::EVT ***)*((void *)v1313 - 1);
                    }
                    else {
                      v984 = (llvm::EVT ***)((char *)v1313 - 32 * (v983 & 0x7FFFFFF));
                    }
                    uint64_t v985 = v1312;
                    unsigned __int8 v986 = sub_1CB87DC14(v1312, (uint64_t)__src, **v984, (llvm::Type *)1);
                    if (!v986
                      || v986 != 1 && !*(void *)(v985 + 8 * v986 + 96)
                      || (*(unsigned char *)(v985 + 390 * v986 + v982 + 3862) & 0xFB) != 0)
                    {
                      goto LABEL_2310;
                    }
                    unsigned int v966 = v1315;
LABEL_1854:
                    if (v966 >= HIDWORD(v1315)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v1314 + v966) = v967;
                    unsigned int v966 = v1315 + 1;
                    LODWORD(v1315) = v1315 + 1;
                    v965 = (llvm::LLVMContext **)*((void *)v967 + 1);
                    if (!v965) {
                      goto LABEL_2310;
                    }
                    continue;
                  default:
                    goto LABEL_2311;
                }
              }
              v972 = (llvm::Instruction **)((char *)v1314 + 8 * v966 - 8);
              if (!v966) {
                v972 = &v1313;
              }
              v973 = *v972;
              uint64_t v974 = 32 * v970;
              v975 = v971;
              while (1)
              {
                if ((llvm::Instruction *)*v971 == v973)
                {
                  uint64_t v979 = v971[3];
                  int v980 = *(_DWORD *)(v979 + 20);
                  if ((v980 & 0x40000000) != 0) {
                    uint64_t v981 = *(void *)(v979 - 8);
                  }
                  else {
                    uint64_t v981 = v979 - 32 * (v980 & 0x7FFFFFF);
                  }
                  if ((((unint64_t)v975 - v981) & 0x1FFFFFFFE0) == 0x20 && v968 <= 0x34)
                  {
                    if (((1 << v968) & 0x12000000000000) != 0)
                    {
                      if ((*((unsigned char *)v967 + 17) & 4) == 0) {
                        goto LABEL_2310;
                      }
                    }
                    else if (((1 << v968) & 0xD800000000000) != 0)
                    {
                      goto LABEL_2310;
                    }
                  }
                }
                else
                {
                  unsigned int v976 = *(unsigned __int8 *)(*v971 + 16);
                  BOOL v80 = v976 > 0x11;
                  int v977 = (1 << v976) & 0x31800;
                  if (v80 || v977 == 0) {
                    goto LABEL_2310;
                  }
                }
                v971 += 4;
                v975 += 4;
                v974 -= 32;
                if (!v974) {
                  goto LABEL_1814;
                }
              }
            }
            goto LABEL_2310;
          }
          break;
        }
        v1321 = v967;
        if (!v966)
        {
LABEL_2310:
          LOBYTE(v25) = 0;
LABEL_2311:
          v1059 = (llvm::LLVMContext ***)v1314;
          v1060 = &v1316;
          goto LABEL_2312;
        }
        if (byte_1EBCC9708)
        {
          __pd = (llvm::ValueAsMetadata **)v1314;
          v1061 = (llvm::Instruction *)((char *)v1314 + 8 * v966);
        }
        else
        {
          int v1161 = *((_DWORD *)v1313 + 5);
          if ((v1161 & 0x40000000) != 0) {
            v1162 = (char *)*((void *)v1313 - 1);
          }
          else {
            v1162 = (char *)v1313 - 32 * (v1161 & 0x7FFFFFF);
          }
          uint64_t v1164 = *(void *)v1162;
          if (*(unsigned char *)(*(void *)v1162 + 16) == 16)
          {
            v1165 = (unsigned int *)(v1164 + 24);
            if (*(_DWORD *)(v1164 + 32) >= 0x41u) {
              v1165 = *(unsigned int **)v1165;
            }
            uint64_t v1166 = *v1165;
          }
          else
          {
            uint64_t v1166 = 0xFFFFFFFFLL;
          }
          if ((v1161 & 0x40000000) != 0) {
            v1167 = (uint64_t **)*((void *)v1313 - 1);
          }
          else {
            v1167 = (uint64_t **)((char *)v1313 - 32 * (v1161 & 0x7FFFFFF));
          }
          v1168 = *v1167;
          uint64_t v1169 = **((void **)v967 - 4);
          unsigned int v1170 = *(_DWORD *)(v1169 + 8);
          if ((v1170 & 0xFE) == 0x12) {
            unsigned int v1170 = *(_DWORD *)(**(void **)(v1169 + 16) + 8);
          }
          uint64_t v1171 = *v1168;
          uint64_t v1172 = v1170 >> 8;
          int v25 = (llvm::LLVMContext *)v1312;
          unint64_t v1173 = sub_1CB87DC14(v1312, (uint64_t)__src, **((llvm::EVT ***)v967 - 8), 0);
          int v1175 = (*(uint64_t (**)(llvm::LLVMContext *, unint64_t, uint64_t, uint64_t, unint64_t, void, void))(*(void *)v25 + 648))(v25, v1173, v1174, v1172, ((unint64_t)*((unsigned __int16 *)v967 + 9) >> 1) & 0x3F, 0, 0);
          LOBYTE(v25) = 0;
          if (!v1175) {
            goto LABEL_2311;
          }
          int64_t v1176 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(***((void ***)&v1312 + 1) + 872))(**((void **)&v1312 + 1), *((unsigned __int8 *)v1313 + 16) - 28, v1171, v1166);
          int v1178 = v1177;
          int64_t v1179 = v1320;
          if (v1315)
          {
            int v1180 = 0;
            v1181 = (char *)v1314;
            uint64_t v1182 = 8 * v1315;
            do
            {
              uint64_t v1183 = *(void *)v1181;
              int v1184 = *(_DWORD *)(*(void *)v1181 + 20);
              if ((v1184 & 0x40000000) != 0) {
                uint64_t v1185 = *(void *)(v1183 - 8);
              }
              else {
                uint64_t v1185 = v1183 - 32 * (v1184 & 0x7FFFFFF);
              }
              unsigned int v1186 = *(unsigned __int8 *)(*(void *)v1185 + 16) - 11;
              if (v1186 > 6)
              {
                uint64_t v1187 = 0;
                uint64_t v1188 = 2;
              }
              else
              {
                uint64_t v1187 = *((unsigned int *)&unk_1CFAC6D48 + (char)v1186);
                uint64_t v1188 = *((unsigned int *)&unk_1CFAC6D64 + (char)v1186);
              }
              uint64_t v1189 = (*(uint64_t (**)(void, void, void, void, uint64_t, uint64_t, void, void, void, void, void))(***((void ***)&v1312 + 1) + 824))(**((void **)&v1312 + 1), *(unsigned __int8 *)(v1183 + 16) - 28, *(void *)v1183, 0, v1187, v1188, 0, 0, 0, 0, 0);
              if (v1190 == 1) {
                int v1178 = 1;
              }
              if (__OFADD__(v1176, v1189)) {
                int64_t v1176 = ((v1176 + v1189) >> 63) ^ 0x8000000000000000;
              }
              else {
                v1176 += v1189;
              }
              uint64_t v1191 = *(void *)v1181;
              v1181 += 8;
              uint64_t v1192 = (*(uint64_t (**)(void, void, uint64_t))(***((void ***)&v1312 + 1) + 824))(**((void **)&v1312 + 1), *(unsigned __int8 *)(v1191 + 16) - 28, v1171);
              if (v1193 == 1) {
                int v1180 = 1;
              }
              if (__OFADD__(v1179, v1192)) {
                int64_t v1179 = ((v1179 + v1192) >> 63) ^ 0x8000000000000000;
              }
              else {
                v1179 += v1192;
              }
              v1182 -= 8;
            }
            while (v1182);
          }
          else
          {
            int v1180 = 0;
          }
          BOOL v1206 = v1179 < v1176;
          if (v1180 != v1178) {
            BOOL v1206 = v1180 < v1178;
          }
          if (!v1206) {
            goto LABEL_2310;
          }
          if (!v1315)
          {
LABEL_2314:
            LODWORD(v1315) = 0;
            LOBYTE(v25) = 1;
            goto LABEL_2311;
          }
          __pd = (llvm::ValueAsMetadata **)v1314;
          v1061 = (llvm::Instruction *)((char *)v1314 + 8 * v1315);
        }
        v1286 = v1061;
        do
        {
          v1062 = *__pd;
          llvm::Value::doRAUW(*__pd, v1313, (llvm::Value *)1);
          v1064 = v1313;
          int v1065 = *((_DWORD *)v1313 + 5);
          if ((v1065 & 0x40000000) != 0) {
            v1066 = (void **)*((void *)v1313 - 1);
          }
          else {
            v1066 = (void **)((char *)v1313 - 32 * (v1065 & 0x7FFFFFF));
          }
          *(void *)v1062 = **v1066;
          int v1067 = *((_DWORD *)v1062 + 5);
          if ((v1067 & 0x40000000) != 0)
          {
            v1069 = (uint64_t *)*((void *)v1062 - 1);
            uint64_t v1068 = v1067 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v1068 = v1067 & 0x7FFFFFF;
            v1069 = (uint64_t *)((char *)v1062 - 32 * v1068);
          }
          if (v1068)
          {
            v1070 = &v1069[4 * v1068];
            do
            {
              uint64_t v1071 = *v1069;
              if ((llvm::Instruction *)*v1069 == v1313)
              {
                int v1080 = *(_DWORD *)(v1071 + 20);
                if ((v1080 & 0x40000000) != 0) {
                  v1081 = *(uint64_t **)(v1071 - 8);
                }
                else {
                  v1081 = (uint64_t *)(v1071 - 32 * (v1080 & 0x7FFFFFF));
                }
                uint64_t Splat = *v1081;
              }
              else
              {
                unsigned int v1072 = *(unsigned __int8 *)(v1071 + 16);
                BOOL v1073 = v1072 > 0x10 || ((1 << v1072) & 0x11800) == 0;
                if (!v1073 && v1072 - 11 < 2) {
                  goto LABEL_2041;
                }
                uint64_t v1074 = v1069[3];
                int v1075 = *(_DWORD *)(v1074 + 20);
                uint64_t v1076 = (v1075 & 0x40000000) != 0 ? *(void *)(v1074 - 8) : v1074 - 32 * (v1075 & 0x7FFFFFF);
                if (((((unint64_t)v1069 - v1076) & 0x1FFFFFFFE0) != 0x20
                   || (unsigned int v1077 = *((unsigned __int8 *)v1062 + 16), v1077 > 0x34)
                   || ((1 << v1077) & 0xD800000000000) == 0
                   && (((1 << v1077) & 0x12000000000000) == 0 || (*((unsigned char *)v1062 + 17) & 4) != 0))
                  && ((int v1078 = *((_DWORD *)v1313 + 5), (v1078 & 0x40000000) != 0)
                    ? (v1079 = (char *)*((void *)v1313 - 1))
                    : (v1079 = (char *)v1313 - 32 * (v1078 & 0x7FFFFFF)),
                      (uint64_t v1083 = *((void *)v1079 + 4)) != 0 ? (v1084 = *(unsigned char *)(v1083 + 16) == 16) : (v1084 = 0),
                      v1084))
                {
                  unsigned int v1087 = *(_DWORD *)(v1083 + 32);
                  if (v1087 > 0x40) {
                    uint64_t v1086 = **(void **)(v1083 + 24);
                  }
                  else {
                    uint64_t v1086 = (uint64_t)(*(void *)(v1083 + 24) << -(char)v1087) >> -(char)v1087;
                  }
                  int v1085 = 0;
                }
                else
                {
LABEL_2041:
                  int v1085 = 1;
                  LODWORD(v1086) = -1;
                }
                int v1088 = *((_DWORD *)v1313 + 5);
                if ((v1088 & 0x40000000) != 0) {
                  v1089 = (uint64_t **)*((void *)v1313 - 1);
                }
                else {
                  v1089 = (uint64_t **)((char *)v1313 - 32 * (v1088 & 0x7FFFFFF));
                }
                uint64_t v1090 = **v1089;
                uint64_t v1091 = *(unsigned int *)(v1090 + 32);
                if (v1085)
                {
                  uint64_t Splat = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(v1091 | ((unint64_t)(*(unsigned char *)(v1090 + 8) == 19) << 32)), *v1069);
                }
                else
                {
                  v1337[0] = &v1338;
                  v1337[1] = (void *)0x400000000;
                  v1092 = llvm::UndefValue::get(*(llvm::UndefValue **)v1071, v1063);
                  for (iuint64_t i = LODWORD(v1337[1]); v1091; LODWORD(v1091) = v1091 - 1)
                  {
                    if (v1086) {
                      uint64_t v1094 = (uint64_t)v1092;
                    }
                    else {
                      uint64_t v1094 = v1071;
                    }
                    if (ii >= HIDWORD(v1337[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v1337[0] + ii) = v1094;
                    iuint64_t i = ++LODWORD(v1337[1]);
                    LODWORD(v1086) = v1086 - 1;
                  }
                  v1095 = (llvm::FixedVectorType ***)v1337[0];
                  uint64_t Splat = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v1337[0], (llvm::Type *)ii);
                  if (!Splat)
                  {
                    llvm::FixedVectorType::get(**v1095, (llvm::Type *)ii);
                    uint64_t Splat = sub_1CC56A4DC(**v1096 + 1288, (uint64_t)v1096, v1095, ii);
                  }
                  if (v1337[0] != &v1338) {
                    free(v1337[0]);
                  }
                }
              }
              uint64_t v1097 = v1069[3];
              int v1098 = *(_DWORD *)(v1097 + 20);
              if ((v1098 & 0x40000000) != 0) {
                uint64_t v1099 = *(void *)(v1097 - 8);
              }
              else {
                uint64_t v1099 = v1097 - 32 * (v1098 & 0x7FFFFFF);
              }
              int v1100 = *((_DWORD *)v1062 + 5);
              if ((v1100 & 0x40000000) != 0) {
                v1101 = (char *)*((void *)v1062 - 1);
              }
              else {
                v1101 = (char *)v1062 - 32 * (v1100 & 0x7FFFFFF);
              }
              uint64_t v1102 = (((unint64_t)v1069 - v1099) >> 5);
              v1103 = &v1101[32 * v1102];
              if (*(void *)v1103)
              {
                **((void **)v1103 + 2) = *((void *)v1103 + 1);
                uint64_t v1104 = *((void *)v1103 + 1);
                if (v1104) {
                  *(void *)(v1104 + 16) = *((void *)v1103 + 2);
                }
              }
              *(void *)v1103 = Splat;
              if (Splat)
              {
                uint64_t v1107 = *(void *)(Splat + 8);
                v1106 = (char **)(Splat + 8);
                uint64_t v1105 = v1107;
                v1108 = &v1101[32 * v1102];
                *((void *)v1108 + 1) = v1107;
                if (v1107) {
                  *(void *)(v1105 + 16) = v1108 + 8;
                }
                *((void *)v1108 + 2) = v1106;
                *v1106 = v1103;
              }
              v1069 += 4;
            }
            while (v1069 != v1070);
            v1064 = v1313;
          }
          llvm::Instruction::moveAfter(v1064, v1062);
          int v1109 = *((_DWORD *)v1313 + 5);
          if ((v1109 & 0x40000000) != 0) {
            v1110 = (char *)*((void *)v1313 - 1);
          }
          else {
            v1110 = (char *)v1313 - 32 * (v1109 & 0x7FFFFFF);
          }
          if (*(void *)v1110)
          {
            **((void **)v1110 + 2) = *((void *)v1110 + 1);
            uint64_t v1111 = *((void *)v1110 + 1);
            if (v1111) {
              *(void *)(v1111 + 16) = *((void *)v1110 + 2);
            }
          }
          *(void *)v1110 = v1062;
          uint64_t v1114 = *((void *)v1062 + 1);
          v1113 = (void *)((char *)v1062 + 8);
          uint64_t v1112 = v1114;
          *((void *)v1110 + 1) = v1114;
          if (v1114) {
            *(void *)(v1112 + 16) = v1110 + 8;
          }
          *((void *)v1110 + 2) = v1113;
          void *v1113 = v1110;
          ++__pd;
        }
        while (__pd != (llvm::ValueAsMetadata **)v1286);
        goto LABEL_2314;
      case '[':
        BYTE4(v1308) = 0;
        LODWORD(v1308) = 0;
        uint64_t v787 = (uint64_t)*(v7 - 8);
        if (*(unsigned char *)(v787 + 16) != 90) {
          goto LABEL_23;
        }
        int v788 = *(_DWORD *)(v787 + 20);
        if ((v788 & 0x40000000) != 0) {
          v789 = *(uint64_t **)(v787 - 8);
        }
        else {
          v789 = (uint64_t *)(v787 - 32 * (v788 & 0x7FFFFFF));
        }
        uint64_t v790 = *v789;
        unsigned int v791 = (*(unsigned char *)(*v789 + 16) - 11);
        if (v791 < 2) {
          goto LABEL_1522;
        }
        if (v791 < 0xFD) {
          goto LABEL_23;
        }
        __src = &v1314;
        *(void *)&long long v1312 = &v1314;
        *((void *)&v1312 + 1) = 8;
        LODWORD(v1313) = 0;
        v1337[0] = &v1338;
        v1337[1] = (void *)0x800000000;
        long long __s2 = &__src;
        uint64_t v1330 = (uint64_t)v1337;
        BOOL v792 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s2, v790))
        {
          do
          {
            BOOL v792 = LODWORD(v1337[1]) == 0;
            if (!LODWORD(v1337[1])) {
              break;
            }
            uint64_t v1254 = *((void *)v1337[0] + LODWORD(v1337[1]) - 1);
            --LODWORD(v1337[1]);
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s2, v1254) & 1) != 0);
        }
        if (v1337[0] != &v1338) {
          free(v1337[0]);
        }
        if ((void *)v1312 == __src)
        {
          if (!v792) {
            goto LABEL_23;
          }
        }
        else
        {
          free((void *)v1312);
          if (!v792) {
            goto LABEL_23;
          }
        }
        int v788 = *(_DWORD *)(v787 + 20);
LABEL_1522:
        if ((v788 & 0x40000000) != 0) {
          uint64_t v793 = *(void *)(v787 - 8);
        }
        else {
          uint64_t v793 = v787 - 32 * (v788 & 0x7FFFFFF);
        }
        if (!sub_1CBF535C4((uint64_t)&v1308 + 2, *(llvm::Constant **)(v793 + 64))) {
          goto LABEL_23;
        }
        uint64_t v794 = (uint64_t)*(v7 - 4);
        unsigned int v795 = (*(unsigned char *)(v794 + 16) - 11);
        if (v795 < 2) {
          goto LABEL_1532;
        }
        if (v795 < 0xFD) {
          goto LABEL_23;
        }
        __src = &v1314;
        *(void *)&long long v1312 = &v1314;
        *((void *)&v1312 + 1) = 8;
        LODWORD(v1313) = 0;
        v1337[0] = &v1338;
        v1337[1] = (void *)0x800000000;
        long long __s2 = &__src;
        uint64_t v1330 = (uint64_t)v1337;
        BOOL v796 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s2, v794))
        {
          do
          {
            BOOL v796 = LODWORD(v1337[1]) == 0;
            if (!LODWORD(v1337[1])) {
              break;
            }
            uint64_t v1255 = *((void *)v1337[0] + LODWORD(v1337[1]) - 1);
            --LODWORD(v1337[1]);
          }
          while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&__s2, v1255) & 1) != 0);
        }
        if (v1337[0] != &v1338) {
          free(v1337[0]);
        }
        if ((void *)v1312 == __src)
        {
          if (!v796) {
            goto LABEL_23;
          }
        }
        else
        {
          free((void *)v1312);
          if (!v796) {
            goto LABEL_23;
          }
        }
LABEL_1532:
        uint64_t v797 = *((unsigned int *)v7 + 18);
        if (v797)
        {
          v798 = v7[8];
          uint64_t v799 = 4 * v797;
          do
          {
            if ((*(_DWORD *)v798 + 1) >= 2) {
              goto LABEL_23;
            }
            v798 = (llvm::LLVMContext **)((char *)v798 + 4);
            v799 -= 4;
          }
          while (v799);
        }
        v800 = (llvm::FixedVectorType *)(*(uint64_t (**)(void, llvm::LLVMContext ***))(**(void **)(a1 + 48)
                                                                                                 + 1112))(*(void *)(a1 + 48), v7);
        if (!v800) {
          goto LABEL_23;
        }
        uint64_t v801 = (uint64_t)v800;
        uint64_t v802 = (uint64_t)*v7;
        llvm::FixedVectorType::get(v800, (llvm::Type *)*((unsigned int *)*v7 + 8));
        uint64_t v804 = v803;
        v805 = 0;
        v806 = **v7;
        __src = (char *)&v1312 + 8;
        *(void *)&long long v1312 = 0x200000000;
        v1318 = v806;
        v1319 = &v1327;
        v1320 = v1328;
        v1321 = 0;
        int v1322 = 0;
        __int16 v1323 = 512;
        char v1324 = 7;
        uint64_t v1325 = 0;
        uint64_t v1326 = 0;
        v1327 = &unk_1F2616E88;
        v1328[0] = &unk_1F2617008;
        v807 = v7[6];
        v1316 = v7[5];
        v1317 = (void ***)(v7 + 3);
        long long __s2 = v807;
        if (v807)
        {
          llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v807, 2);
          v805 = __s2;
        }
        sub_1CB8461A4((uint64_t)&__src, 0, (uint64_t)v805);
        if (!__s2) {
          goto LABEL_1540;
        }
        int v1238 = *(unsigned __int8 *)__s2;
        if ((v1238 - 4) > 0x1E)
        {
          if ((v1238 - 3) >= 0xFFFFFFFE) {
            v1241 = __s2;
          }
          else {
            v1241 = 0;
          }
          if ((v1238 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1240 = (unint64_t)v1241 + 8;
LABEL_2429:
            v1337[0] = &__s2;
            sub_1CC5FA668(v1240 + 16, v1337);
            goto LABEL_1540;
          }
          if (v1238 == 3) {
            *((void *)__s2 + 1) = 0;
          }
        }
        else if ((*((unsigned char *)__s2 + 1) & 0x7F) == 2 || *((_DWORD *)__s2 + 3))
        {
          uint64_t v1239 = *((void *)__s2 + 2);
          if ((v1239 & 4) != 0)
          {
            unint64_t v1240 = v1239 & 0xFFFFFFFFFFFFFFF8;
            if (v1240) {
              goto LABEL_2429;
            }
          }
        }
LABEL_1540:
        uint64_t v808 = (uint64_t)*(v7 - 8);
        int v809 = *(_DWORD *)(v808 + 20);
        if ((v809 & 0x40000000) != 0) {
          uint64_t v810 = *(void *)(v808 - 8);
        }
        else {
          uint64_t v810 = v808 - 32 * (v809 & 0x7FFFFFF);
        }
        v1218 = *(llvm::Value **)(v810 + 32);
        LOWORD(v1333[0]) = 257;
        if (*(void *)v1218 != v801)
        {
          if (*((unsigned __int8 *)v1218 + 16) <= 0x14u)
          {
            uint64_t v1221 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1319 + 28))(v1319, 49, v1218, v801);
            v1218 = (llvm::Value *)v1221;
            if (v1221)
            {
              if (*(unsigned __int8 *)(v1221 + 16) >= 0x1Cu)
              {
                (*(void (**)(void *, uint64_t, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1221, &__s2, v1316, v1317);
                if (v1312)
                {
                  v1256 = (llvm::MDNode **)__src;
                  v1257 = (llvm::MDNode **)((char *)__src + 16 * v1312);
                  do
                  {
                    llvm::Instruction::setMetadata(v1218, *(_DWORD *)v1256, v1256[1]);
                    v1256 += 2;
                  }
                  while (v1256 != v1257);
                }
              }
            }
          }
          else
          {
            LOWORD(v1340) = 257;
            v1218 = llvm::CastInst::Create(49, (uint64_t)v1218, v801, (const char **)v1337, 0);
            (*(void (**)(void *, llvm::Value *, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1218, &__s2, v1316, v1317);
            if (v1312)
            {
              v1219 = (llvm::MDNode **)__src;
              v1220 = (llvm::MDNode **)((char *)__src + 16 * v1312);
              do
              {
                llvm::Instruction::setMetadata(v1218, *(_DWORD *)v1219, v1219[1]);
                v1219 += 2;
              }
              while (v1219 != v1220);
            }
          }
        }
        v1222 = (llvm::Type *)*(unsigned int *)(v804 + 32);
        LOWORD(v1340) = 257;
        Vectoruint64_t Splat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&__src, v1222, (unsigned __int8 *)v1218, (uint64_t)v1337);
        v1224 = (unsigned __int8 *)VectorSplat;
        LOWORD(v1333[0]) = 257;
        if (*(void *)VectorSplat != v802)
        {
          if (*((unsigned __int8 *)VectorSplat + 16) <= 0x14u)
          {
            v1224 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v1319
                                        + 28))(v1319, 49, VectorSplat, v802);
            if (v1224) {
              BOOL v1227 = v1224[16] >= 0x1Cu;
            }
            else {
              BOOL v1227 = 0;
            }
            if (v1227)
            {
              (*(void (**)(void *, unsigned __int8 *, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1224, &__s2, v1316, v1317);
              if (v1312)
              {
                v1252 = (llvm::MDNode **)__src;
                v1253 = (llvm::MDNode **)((char *)__src + 16 * v1312);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v1224, *(_DWORD *)v1252, v1252[1]);
                  v1252 += 2;
                }
                while (v1252 != v1253);
              }
            }
          }
          else
          {
            LOWORD(v1340) = 257;
            v1224 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)VectorSplat, v802, (const char **)v1337, 0);
            (*(void (**)(void *, unsigned __int8 *, void **, llvm::LLVMContext **, void ***))(*v1320 + 16))(v1320, v1224, &__s2, v1316, v1317);
            if (v1312)
            {
              v1225 = (llvm::MDNode **)__src;
              v1226 = (llvm::MDNode **)((char *)__src + 16 * v1312);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v1224, *(_DWORD *)v1225, v1225[1]);
                v1225 += 2;
              }
              while (v1225 != v1226);
            }
          }
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, (llvm::Value *)v1224, (llvm::Value *)1);
        v1228 = *(uint64_t **)(a1 + 72);
        v1337[0] = &unk_1F2609FE0;
        v1337[1] = (void *)a1;
        p_s2 = v1337;
        llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v7, v1228, 0, (uint64_t)v1337);
        if (p_s2 == v1337)
        {
          (*((void (**)(void **))v1337[0] + 4))(v1337);
        }
        else if (p_s2)
        {
          (*((void (**)(void))*p_s2 + 5))();
        }
        if (v1218 && *((unsigned __int8 *)v1218 + 16) >= 0x1Cu)
        {
          int v1229 = *((_DWORD *)v1218 + 5);
          v1230 = (v1229 & 0x40000000) != 0
                ? (llvm::Value *)*((void *)v1218 - 1)
                : (llvm::Value *)((char *)v1218 - 32 * (v1229 & 0x7FFFFFF));
          uint64_t v1231 = *(void *)v1230;
          if (*(void *)v1230)
          {
            unsigned int v1232 = *(unsigned __int8 *)(v1231 + 16);
            if (v1232 >= 0x1C && *((void *)v1218 + 5) != *(void *)(v1231 + 40) && v1232 != 83 && v1232 - 29 >= 0xB)
            {
              unsigned int v1234 = v1232 - 38;
              BOOL v80 = v1234 > 0x38;
              uint64_t v1235 = (1 << v1234) & 0x100060000000001;
              if (v80 || v1235 == 0) {
                llvm::Instruction::moveAfter(v1218, (llvm::Instruction *)v1231);
              }
            }
          }
        }
        if (__src != (char *)&v1312 + 8) {
          free(__src);
        }
        goto LABEL_214;
      default:
        return v25 & 1;
    }
  }
LABEL_1355:
  if (!v7 || v271 != 62)
  {
    if (!v7 || v271 != 95) {
      goto LABEL_1373;
    }
    uint64_t v691 = (uint64_t)*(v7 - 4);
    int v692 = *(unsigned __int8 *)(v691 + 16);
    if ((!v691 || v692 != 81) && (v692 != 82 || *(unsigned __int8 *)(v691 + 17) > 1u)) {
      goto LABEL_23;
    }
    uint64_t v693 = *(void *)(v691 + 8);
    if (!v693 || *(void *)(v693 + 8)) {
      goto LABEL_23;
    }
    int v694 = *(_DWORD *)(v691 + 20);
    if ((v694 & 0x40000000) != 0) {
      v695 = *(llvm::Value ***)(v691 - 8);
    }
    else {
      v695 = (llvm::Value **)(v691 - 32 * (v694 & 0x7FFFFFF));
    }
    v823 = *v695;
    v824 = (unsigned __int8 *)v695[4];
    uint64_t v825 = (*((unsigned __int8 *)*v695 + 16) < 0x14uLL) & (0xB0000u >> *((unsigned char *)*v695 + 16));
    unsigned int v826 = v824[16];
    BOOL v80 = v826 > 0x13;
    int v827 = (1 << v826) & 0xB0000;
    if (v80 || v827 == 0)
    {
      if ((v825 & 1) == 0) {
        goto LABEL_23;
      }
    }
    else if (v825)
    {
LABEL_1667:
      int v64 = (llvm::ValueAsMetadata *)v7;
      uint64_t v65 = (llvm::Value *)v691;
      goto LABEL_75;
    }
    v880 = operator new(0x60uLL);
    v881 = v880;
    v880[13] = v880[13] & 0x38000000 | 1;
    v882 = (char *)(v880 + 8);
    *(void *)v880 = 0;
    *((void *)v880 + 1) = 0;
    *((void *)v880 + 2) = 0;
    *((void *)v880 + 3) = v880 + 8;
    if (v825) {
      v883 = (llvm::Value *)v824;
    }
    else {
      v883 = v823;
    }
    LOWORD(v1314) = 257;
    v884 = (int32x2_t ****)llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v880 + 8), v883, (const char **)&__src, (llvm::Instruction *)v691);
    llvm::Value::takeName(v884, (llvm::Value *)v7);
    int v885 = *(_DWORD *)(v691 + 20);
    if ((v885 & 0x40000000) != 0) {
      uint64_t v886 = *(void *)(v691 - 8);
    }
    else {
      uint64_t v886 = v691 - 32 * (v885 & 0x7FFFFFF);
    }
    uint64_t v887 = v886 + 32 * v825;
    uint64_t v888 = v887;
    if (*(void *)v887)
    {
      **(void **)(v887 + 16) = *(void *)(v887 + 8);
      uint64_t v889 = *(void *)(v887 + 8);
      if (v889) {
        *(void *)(v889 + 16) = *(void *)(v887 + 16);
      }
    }
    *(void *)uint64_t v887 = v882;
    uint64_t v892 = *((void *)v881 + 5);
    v891 = v881 + 10;
    uint64_t v890 = v892;
    *(void *)(v887 + 8) = v892;
    uint64_t v893 = v887 + 8;
    if (v892) {
      *(void *)(v890 + 16) = v893;
    }
    *(void *)(v886 + 32 * v825 + 16) = v891;
    void *v891 = v888;
    goto LABEL_1667;
  }
  if (llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v7))
  {
    v677 = operator new(0x60uLL);
    v678 = v677;
    v679 = (llvm::Value *)(v677 + 8);
    v677[13] = v677[13] & 0x38000000 | 1;
    *(void *)v677 = 0;
    *((void *)v677 + 1) = 0;
    *((void *)v677 + 2) = 0;
    *((void *)v677 + 3) = v677 + 8;
    int v680 = *((_DWORD *)v7 + 5);
    v681 = (llvm::Value *)v7[-4 * (v680 & 0x7FFFFFF)];
    v682 = (llvm::Type *)*v7;
    if ((v680 & 0x10000000) != 0)
    {
      uint64_t v683 = **(void **)v682;
      uint64_t v684 = *(void *)(v683 + 152);
      uint64_t v685 = *(unsigned int *)(v683 + 168);
      if (v685)
      {
        LODWORD(v686) = (v685 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        v687 = (llvm::LLVMContext ****)(v684 + 16 * v686);
        v688 = *v687;
        if (*v687 != v7)
        {
          int v689 = 1;
          do
          {
            if (v688 == (llvm::LLVMContext ***)-4096) {
              goto LABEL_1425;
            }
            int v690 = v686 + v689++;
            uint64_t v686 = v690 & (v685 - 1);
            v688 = *(llvm::LLVMContext ****)(v684 + 16 * v686);
          }
          while (v688 != v7);
          v687 = (llvm::LLVMContext ****)(v684 + 16 * v686);
        }
      }
      else
      {
LABEL_1425:
        v687 = (llvm::LLVMContext ****)(v684 + 16 * v685);
      }
      v725 = v687[1];
      v728 = *v725;
      v726 = (char *)(v725 + 2);
      v727 = v728;
    }
    else
    {
      v727 = 0;
      v726 = &byte_1CFBCE98E;
    }
    LOWORD(v1314) = 261;
    __src = v726;
    *(void *)&long long v1312 = v727;
    llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v677 + 8), v681, v682, (const char **)&__src, (llvm::Instruction *)v7);
    v729 = (unsigned __int8 *)v7[6];
    v1299 = v729;
    if (v729) {
      llvm::MetadataTracking::track((uint64_t)&v1299, v729, 2);
    }
    v732 = (unsigned __int8 *)*((void *)v678 + 10);
    v731 = (unsigned __int8 **)(v678 + 20);
    v730 = v732;
    if (!v732)
    {
LABEL_1430:
      v733 = v1299;
      *v731 = v1299;
      if (v733)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v1299, v733, (uint64_t)v731);
        v1299 = 0;
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v679, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v829 = *v730;
    if ((v829 - 4) > 0x1E)
    {
      if ((v829 - 3) >= 0xFFFFFFFE) {
        v895 = v730;
      }
      else {
        v895 = 0;
      }
      if ((v829 - 3) < 0xFFFFFFFE)
      {
        if (v829 == 3) {
          *((void *)v730 + 1) = 0;
        }
        goto LABEL_1430;
      }
      unint64_t v831 = (unint64_t)(v895 + 8);
    }
    else
    {
      if ((v730[1] & 0x7F) != 2 && !*((_DWORD *)v730 + 3)) {
        goto LABEL_1430;
      }
      uint64_t v830 = *((void *)v730 + 2);
      if ((v830 & 4) == 0) {
        goto LABEL_1430;
      }
      unint64_t v831 = v830 & 0xFFFFFFFFFFFFFFF8;
      if (!v831) {
        goto LABEL_1430;
      }
    }
    __src = v731;
    sub_1CC5FA668(v831 + 16, &__src);
    goto LABEL_1430;
  }
  v711 = v7[5];
  v712 = v711[5];
  if (v712) {
    v713 = (void *)((char *)v712 - 24);
  }
  else {
    v713 = 0;
  }
  if (*((unsigned __int8 *)v713 + 16) - 29 >= 0xB) {
    v713 = 0;
  }
  if (*((unsigned char *)v713 + 16) != 32) {
    goto LABEL_23;
  }
  if ((*((_DWORD *)v7 + 5) & 0x7FFFFFF) != 2) {
    goto LABEL_23;
  }
  v714 = *(v7 - 4);
  if (*((unsigned char *)v714 + 16) != 16) {
    goto LABEL_23;
  }
  v715 = v714 + 3;
  v716 = *(void **)(a1 + 64);
  BOOL v718 = (*(uint64_t (**)(void, void *, void, uint64_t))(*(void *)*v716 + 648))(*v716, v714 + 3, *v714, 3) > 1;
  if (v717) {
    BOOL v718 = v717 > 0;
  }
  if (v718) {
    goto LABEL_23;
  }
  v719 = v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
  if (*((unsigned __int8 *)v719 + 16) < 0x1Cu) {
    goto LABEL_23;
  }
  if (v719[5] != (llvm::LLVMContext *)v711) {
    goto LABEL_23;
  }
  v720 = v7[1];
  v1292 = (llvm::LLVMContext *****)(v7 + 1);
  if (!v720) {
    goto LABEL_23;
  }
  while (1)
  {
    v721 = v720[3];
    BOOL v722 = v721 && *((unsigned __int8 *)v721 + 16) >= 0x1Cu;
    if (v722 && *((llvm::LLVMContext ***)v721 + 5) != v711) {
      break;
    }
    LOBYTE(v25) = 0;
    v720 = (llvm::LLVMContext **)v720[1];
    if (!v720) {
      return v25 & 1;
    }
  }
  int v25 = v719[1];
  if (v25)
  {
    __pc = 0;
    v1008 = 0;
    v1283 = 0;
    while (1)
    {
      uint64_t v1009 = *((void *)v25 + 3);
      if ((llvm::LLVMContext ***)v1009 != v7)
      {
        unsigned int v1010 = *(unsigned __int8 *)(v1009 + 16);
        if (v1010 < 0x1C) {
          goto LABEL_2129;
        }
        if (*(llvm::LLVMContext ***)(v1009 + 40) != v711)
        {
          if (v1010 != 62) {
            goto LABEL_2129;
          }
          if ((*(_DWORD *)(v1009 + 20) & 0x7FFFFFF) != 2) {
            goto LABEL_2129;
          }
          uint64_t v1011 = *(void *)(v1009 - 32);
          if (*(unsigned char *)(v1011 + 16) != 16 || *(llvm::LLVMContext ***)(v1009 - 64) != v719 || *v714 != *(void *)v1011) {
            goto LABEL_2129;
          }
          BOOL v1013 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v716 + 648))(*v716, v1011 + 24) > 1;
          if (v1012) {
            BOOL v1013 = v1012 > 0;
          }
          if (v1013)
          {
LABEL_2129:
            LOBYTE(v25) = 0;
            goto LABEL_2130;
          }
          if (v1008 >= v1283)
          {
            uint64_t v1014 = (v1008 - __pc) >> 3;
            unint64_t v1015 = v1014 + 1;
            if ((unint64_t)(v1014 + 1) >> 61) {
              abort();
            }
            if ((v1283 - __pc) >> 2 > v1015) {
              unint64_t v1015 = (v1283 - __pc) >> 2;
            }
            if ((unint64_t)(v1283 - __pc) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v1015 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v1284 = v1015;
            if (v1015)
            {
              if (v1015 >> 61) {
                sub_1CB833614();
              }
              v1016 = (char *)operator new(8 * v1015);
            }
            else
            {
              v1016 = 0;
            }
            v1017 = &v1016[8 * v1014];
            *(void *)v1017 = v1009;
            v1018 = (llvm::Instruction *)(v1017 + 8);
            while (v1008 != __pc)
            {
              uint64_t v1019 = *((void *)v1008 - 1);
              v1008 = (llvm::Instruction *)((char *)v1008 - 8);
              *((void *)v1017 - 1) = v1019;
              v1017 -= 8;
            }
            v1283 = (llvm::Instruction *)&v1016[8 * v1284];
            if (__pc) {
              operator delete(__pc);
            }
            v1008 = v1018;
            __pc = (llvm::Instruction *)v1017;
          }
          else
          {
            *(void *)v1008 = v1009;
            v1008 = (llvm::Instruction *)((char *)v1008 + 8);
          }
        }
      }
      int v25 = (llvm::LLVMContext *)*((void *)v25 + 1);
      if (!v25)
      {
        if (v1008 == __pc)
        {
          LOBYTE(v25) = 0;
          __pc = v1008;
        }
        else
        {
          v1020 = __pc;
          do
          {
            uint64_t v1021 = *(void *)(*(void *)v1020 - 32 * (*(_DWORD *)(*(void *)v1020 + 20) & 0x7FFFFFF) + 32);
            unsigned int v1022 = *(_DWORD *)(v1021 + 32);
            if (v1022 >= 0x41) {
              operator new[]();
            }
            unint64_t v1023 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1022;
            if (!v1022) {
              unint64_t v1023 = 0;
            }
            v1024 = (void *)(v1023 & (*(void *)(v1021 + 24) - *v715));
            LODWORD(v1312) = *(_DWORD *)(v1021 + 32);
            __src = v1024;
            BOOL v1027 = (*(uint64_t (**)(void, void **, void, uint64_t))(*(void *)*v716 + 648))(*v716, &__src, *v714, 3) > 1;
            if (v1025) {
              BOOL v1028 = v1025 > 0;
            }
            else {
              BOOL v1028 = v1027;
            }
            if (v1312 >= 0x41 && __src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
            if (v1028) {
              goto LABEL_2129;
            }
            v1020 = (llvm::Instruction *)((char *)v1020 + 8);
          }
          while (v1020 != v1008);
          v1285 = __pc;
          do
          {
            uint64_t v1029 = *(void *)v1285;
            uint64_t v1030 = *(_DWORD *)(*(void *)v1285 + 20) & 0x7FFFFFF;
            uint64_t v1031 = -v1030;
            v1032 = (llvm::LLVMContext ****)(*(void *)v1285 - 32 * v1030);
            if (*v1032)
            {
              uint64_t v1033 = v1029 + 32 * v1031;
              v1035 = *(void **)(v1033 + 16);
              v1034 = (void *)(v1033 + 16);
              void *v1035 = *(v1034 - 1);
              uint64_t v1036 = *(v1034 - 1);
              if (v1036) {
                *(void *)(v1036 + 16) = *v1034;
              }
            }
            *v1032 = v7;
            v1037 = v7[1];
            uint64_t v1038 = v1029 + 32 * v1031;
            *(void *)(v1038 + 8) = v1037;
            if (v1037) {
              v1037[2] = (llvm::LLVMContext *)(v1038 + 8);
            }
            *(void *)(v1038 + 16) = v1292;
            *v1292 = v1032;
            uint64_t v1039 = *(void *)(v1029 - 32 * (*(_DWORD *)(v1029 + 20) & 0x7FFFFFF) + 32);
            v1279 = (llvm::Instruction *)*v714;
            unsigned int v1040 = *(_DWORD *)(v1039 + 32);
            if (v1040 >= 0x41) {
              operator new[]();
            }
            uint64_t v1041 = *(void *)(v1039 + 24) - *v715;
            unint64_t v1042 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1040;
            if (!v1040) {
              unint64_t v1042 = 0;
            }
            LODWORD(v1312) = *(_DWORD *)(v1039 + 32);
            __src = (void *)(v1042 & v1041);
            v1043 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v1279, (llvm::LLVMContext *)&__src, v1026);
            v1044 = v1043;
            if ((*((_DWORD *)v1279 + 2) & 0xFE) == 0x12) {
              v1044 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1279 + 8) | ((unint64_t)(*((_DWORD *)v1279 + 2) == 19) << 32)), (uint64_t)v1043);
            }
            if (v1312 >= 0x41 && __src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
            uint64_t v1045 = v1029 - 32 * (*(_DWORD *)(v1029 + 20) & 0x7FFFFFF);
            v1046 = (llvm::Value **)(v1045 + 32);
            if (*(void *)(v1045 + 32))
            {
              **(void **)(v1045 + 48) = *(void *)(v1045 + 40);
              uint64_t v1047 = *(void *)(v1045 + 40);
              if (v1047) {
                *(void *)(v1047 + 16) = *(void *)(v1045 + 48);
              }
            }
            *v1046 = v1044;
            if (v1044)
            {
              uint64_t v1050 = *((void *)v1044 + 1);
              v1049 = (llvm::Value ***)((char *)v1044 + 8);
              uint64_t v1048 = v1050;
              *(void *)(v1045 + 40) = v1050;
              if (v1050) {
                *(void *)(v1048 + 16) = v1045 + 40;
              }
              *(void *)(v1045 + 48) = v1049;
              *v1049 = v1046;
            }
            if ((*((unsigned char *)v7 + 17) & 2) == 0) {
              *(unsigned char *)(v1029 + 17) &= ~2u;
            }
            v1285 = (llvm::Instruction *)((char *)v1285 + 8);
          }
          while (v1285 != v1008);
          LOBYTE(v25) = 1;
        }
LABEL_2130:
        if (__pc) {
          operator delete(__pc);
        }
        return v25 & 1;
      }
    }
  }
  return v25 & 1;
}

uint64_t sub_1CC26C410(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  v54[0] = 0;
  v54[1] = 0;
  int v55 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_91;
  }
  char v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v6 = *(void *)(v5 + 40);
    uint64_t v53 = v6;
    int v7 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v7 == 83)
    {
      int v8 = *(_DWORD *)(v5 + 20);
      if ((v8 & 0x40000000) != 0) {
        uint64_t v9 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v9 = v5 - 32 * (v8 & 0x7FFFFFF);
      }
      uint64_t v6 = *(void *)(v9 + 32 * *(unsigned int *)(v5 + 60) + 8 * ((unint64_t)(v3 - v9) >> 5));
      uint64_t v53 = v6;
      uint64_t v10 = (void *)(v3 + 8);
      uint64_t v11 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v10 = (void *)(v3 + 8);
      uint64_t v11 = *(void *)(v3 + 8);
      if ((v7 - 38) <= 0x38 && ((1 << (v7 - 38)) & 0x100060000000001) != 0) {
        goto LABEL_28;
      }
    }
    uint64_t v14 = v6 + 40;
    uint64_t v13 = *(void *)(v6 + 40);
    if (v13) {
      uint64_t v15 = v13 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB) {
      uint64_t v15 = 0;
    }
    unsigned int v16 = *(unsigned __int8 *)(v15 + 16) - 38;
    BOOL v17 = v16 > 0x38;
    uint64_t v18 = (1 << v16) & 0x100060000000001;
    if ((v17 || v18 == 0) && v6 != v2)
    {
      int v21 = sub_1CC2738C4((uint64_t)v54, &v53);
      uint64_t v22 = v21[1];
      if (v22) {
        goto LABEL_53;
      }
      unsigned int v23 = v21;
      for (uint64_t i = *(void *)(v6 + 48); i != v14; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v25 = i - 24;
        if (!i) {
          uint64_t v25 = 0;
        }
        if (*(unsigned char *)(v25 + 16) != 83)
        {
          unsigned int v26 = *(unsigned __int8 *)(i - 8) - 38;
          BOOL v17 = v26 > 0x38;
          uint64_t v27 = (1 << v26) & 0x100060000000001;
          if (v17 || v27 == 0) {
            uint64_t v14 = i;
          }
          else {
            uint64_t v14 = *(void *)(i + 8);
          }
          break;
        }
      }
      int v29 = *(unsigned __int8 *)(a1 + 16) - 28;
      uint64_t v30 = *(void *)(a1 - 32);
      int v31 = *(uint64_t ***)a1;
      if (v14) {
        uint64_t v32 = v14 - 24;
      }
      else {
        uint64_t v32 = 0;
      }
      v58[8] = 257;
      uint64_t v33 = llvm::CastInst::Create(v29, v30, (uint64_t)v31, (const char **)&v56, v32);
      v23[1] = (uint64_t)v33;
      uint64_t v34 = v33;
      uint64_t v35 = *(unsigned __int8 **)(a1 + 48);
      BOOL v52 = v35;
      if (v35) {
        llvm::MetadataTracking::track((uint64_t)&v52, v35, 2);
      }
      int v36 = (unsigned __int8 **)((char *)v34 + 48);
      if (&v52 != v36)
      {
        uint64_t v37 = *v36;
        if (!*v36) {
          goto LABEL_50;
        }
        int v43 = *v37;
        if ((v43 - 4) > 0x1E)
        {
          if ((v43 - 3) >= 0xFFFFFFFE) {
            unsigned __int8 v46 = *v36;
          }
          else {
            unsigned __int8 v46 = 0;
          }
          if ((v43 - 3) < 0xFFFFFFFE)
          {
            if (v43 == 3) {
              *((void *)v37 + 1) = 0;
            }
            goto LABEL_50;
          }
          unint64_t v45 = (unint64_t)(v46 + 8);
        }
        else if ((v37[1] & 0x7F) != 2 && !*((_DWORD *)v37 + 3) {
               || (uint64_t v44 = *((void *)v37 + 2), (v44 & 4) == 0)
        }
               || (unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_50:
          uint64_t v38 = v52;
          *int v36 = v52;
          if (v38)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v52, v38, (uint64_t)v36);
            BOOL v52 = 0;
          }
          goto LABEL_52;
        }
        uint64_t v56 = v36;
        sub_1CC5FA668(v45 + 16, &v56);
        goto LABEL_50;
      }
      if (v52)
      {
        int v47 = *v52;
        if ((v47 - 4) > 0x1E)
        {
          if ((v47 - 3) >= 0xFFFFFFFE) {
            uint64_t v50 = v52;
          }
          else {
            uint64_t v50 = 0;
          }
          if ((v47 - 3) < 0xFFFFFFFE)
          {
            if (v47 == 3) {
              *((void *)v52 + 1) = 0;
            }
            goto LABEL_52;
          }
          unint64_t v49 = (unint64_t)(v50 + 8);
        }
        else
        {
          if ((v52[1] & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
            goto LABEL_52;
          }
          uint64_t v48 = *((void *)v52 + 2);
          if ((v48 & 4) == 0) {
            goto LABEL_52;
          }
          unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
          if (!v49) {
            goto LABEL_52;
          }
        }
        uint64_t v56 = &v52;
        sub_1CC5FA668(v49 + 16, &v56);
      }
LABEL_52:
      uint64_t v22 = v23[1];
LABEL_53:
      if (*(void *)v3)
      {
        **(void **)(v3 + 16) = *(void *)(v3 + 8);
        uint64_t v39 = *(void *)(v3 + 8);
        if (v39) {
          *(void *)(v39 + 16) = *(void *)(v3 + 16);
        }
      }
      *(void *)uint64_t v3 = v22;
      if (v22)
      {
        uint64_t v42 = *(void *)(v22 + 8);
        uint64_t v40 = (void *)(v22 + 8);
        uint64_t v41 = v42;
        *uint64_t v10 = v42;
        if (v42) {
          *(void *)(v41 + 16) = v10;
        }
        *(void *)(v3 + 16) = v40;
        *uint64_t v40 = v3;
      }
      char v4 = 1;
    }
LABEL_28:
    uint64_t v3 = v11;
  }
  while (v11);
  if (!*(void *)(a1 + 8))
  {
LABEL_91:
    uint64_t v56 = v58;
    uint64_t v57 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v56, (uint64_t ***)a1);
    llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)a1, (uint64_t *)v56, v57);
    if (v56 != v58) {
      free(v56);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  MEMORY[0x1D25D9CD0](v54[0], 8);
  return v4 & 1;
}

uint64_t sub_1CC26C830()
{
  uint64_t v1 = MEMORY[0x1F4188790]();
  LODWORD(v580) = v2;
  int v578 = v3;
  uint64_t v583 = v4;
  uint64_t v5 = v1;
  uint64_t v6 = 0;
  v668[16] = *MEMORY[0x1E4F143B8];
  uint64_t v622 = v624;
  uint64_t v586 = v590;
  unsigned __int8 v587 = v590;
  uint64_t v588 = 16;
  int v7 = &v627;
  int v589 = 0;
  v624[0] = v8;
  uint64_t v623 = 0x800000001;
  int v619 = v621;
  uint64_t v620 = 0x1000000000;
  uint64_t v9 = *(void *)(v1 + 72);
  v584[0] = *(void *)(v1 + 720);
  v584[1] = v9;
  memset(&v584[2], 0, 24);
  __int16 v585 = 257;
  uint64_t v611 = v613;
  uint64_t v612 = 0x1000000000;
  unsigned int v614 = 0;
  uint64_t v575 = v1 + 192;
  unsigned __int8 v615 = 1;
  std::string __p = (void *)(v1 + 352);
  v616 = 0;
  uint64_t v10 = (uint64_t)&v631;
  uint64_t v617 = v584;
  uint64_t v566 = v1 + 664;
  uint64_t v568 = v1 + 560;
  BOOL v571 = v8;
  v618 = (void **)v8;
  uint64_t v572 = v1;
  uint64_t v609 = 0x1000000000;
  v610[16] = v1 + 376;
  __int16 v608 = v610;
  while (v623)
  {
    uint64_t v0 = *((void *)v622 + v623 - 1);
    LODWORD(v623) = v623 - 1;
    uint64_t v11 = v587;
    uint64_t v12 = HIDWORD(v588);
    if (v587 == v586)
    {
      if (HIDWORD(v588))
      {
        uint64_t v13 = 0;
        uint64_t v14 = 8 * HIDWORD(v588);
        uint64_t v15 = (uint64_t *)v587;
        while (*v15 != v0)
        {
          if (*v15 == -2) {
            uint64_t v13 = v15;
          }
          ++v15;
          v14 -= 8;
          if (!v14)
          {
            if (!v13) {
              goto LABEL_11;
            }
            *uint64_t v13 = v0;
            --v589;
            goto LABEL_35;
          }
        }
        goto LABEL_50;
      }
LABEL_11:
      unsigned int v16 = v588;
      if (HIDWORD(v588) < v588)
      {
        ++HIDWORD(v588);
        *(void *)&v587[8 * v12] = v0;
        goto LABEL_35;
      }
    }
    else
    {
      unsigned int v16 = v588;
    }
    if (3 * v16 <= 4 * (HIDWORD(v588) - v589))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
LABEL_136:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v586, v16);
      unsigned int v16 = v588;
      uint64_t v11 = v587;
      goto LABEL_16;
    }
    if (v16 - HIDWORD(v588) < v16 >> 3) {
      goto LABEL_136;
    }
LABEL_16:
    unsigned int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((v0 >> 4) ^ (v0 >> 9));
    uint64_t v19 = &v11[8 * v18];
    uint64_t v20 = *(void *)v19;
    if (*(void *)v19 != -1)
    {
      int v21 = 0;
      int v22 = 1;
      while (v20 != v0)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          int v21 = (uint64_t *)v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = &v11[8 * (v24 & v17)];
        uint64_t v20 = *(void *)v19;
        if (*(void *)v19 == -1) {
          goto LABEL_28;
        }
      }
      goto LABEL_50;
    }
    int v21 = 0;
LABEL_28:
    if (v21) {
      uint64_t v25 = v21;
    }
    else {
      uint64_t v25 = (uint64_t *)v19;
    }
    if (*v25 == v0) {
      goto LABEL_50;
    }
    if (*v25 == -2) {
      --v589;
    }
    else {
      ++HIDWORD(v588);
    }
    *uint64_t v25 = v0;
LABEL_35:
    int v26 = *(unsigned __int8 *)(v0 + 16);
    if (v0 && v26 == 83)
    {
      int v27 = *(_DWORD *)(v0 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        int v29 = *(char **)(v0 - 8);
        uint64_t v28 = v27 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v28 = v27 & 0x7FFFFFF;
        int v29 = (char *)(v0 - 32 * v28);
      }
      sub_1CBF74A6C((uint64_t)&v622, (uint64_t)v622 + 8 * v623, v29, &v29[32 * v28]);
      goto LABEL_49;
    }
    if (v0 && v26 == 85)
    {
      if (v623 >= (unint64_t)HIDWORD(v623)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v622 + v623) = *(void *)(v0 - 32);
      unsigned int v30 = v623 + 1;
      LODWORD(v623) = v30;
      if (v30 >= HIDWORD(v623)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v622 + v30) = *(void *)(v0 - 64);
      LODWORD(v623) = v623 + 1;
LABEL_49:
      uint64_t v6 = 1;
LABEL_50:
      int v36 = 2;
      goto LABEL_51;
    }
    LODWORD(v620) = 0;
    v625[1] = 0;
    v625[0] = 0;
    int v31 = *(void **)(v5 + 80);
    uint64_t v32 = *(void *)(v5 + 88);
    uint64_t v605 = (void (**)(void **))&unk_1F2609F08;
    *(void *)&long long v606 = v583;
    *((void *)&v606 + 1) = v5;
    v607 = (void **)&v605;
    char v33 = *(unsigned char *)(v5 + 712);
    uint64_t v34 = *(void *)(v5 + 104);
    long long v654 = 0uLL;
    v655[0] = 0;
    memset(&v655[8], 0, 32);
    v655[40] = 1;
    v661 = &v659;
    v659 = &unk_1F2609F08;
    long long v660 = v606;
    long long v628 = *(_OWORD *)(v5 + 48);
    uint64_t v35 = *(void *)(*(void *)(*((void *)v583 + 5) + 56) + 40) + 272;
    uint64_t v627 = &v619;
    int v629 = (void *)v35;
    uint64_t v630 = v31;
    uint64_t v633 = &v631;
    long long v632 = v606;
    uint64_t v631 = (uint64_t)&unk_1F2609F08;
    unint64_t v634 = (void ***)v578;
    LODWORD(v635) = v580;
    long long v636 = v583;
    int v637 = &v654;
    uint64_t v638 = v575;
    unint64_t v639 = __p;
    int v640 = &v608;
    uint64_t v641 = v625;
    char v643 = v33;
    uint64_t v644 = v34;
    uint64_t v645 = v32;
    char v642 = 0;
    sub_1CC2782FC((uint64_t)&v627, v0, 0);
    if (v633 == &v631)
    {
      (*(void (**)(uint64_t *))(v631 + 32))(&v631);
    }
    else if (v633)
    {
      (*(void (**)(void))(*v633 + 40))();
    }
    if (v661 == &v659)
    {
      (*((void (**)(void **))v659 + 4))(&v659);
    }
    else if (v661)
    {
      (*((void (**)(void))*v661 + 5))();
    }
    uint64_t v37 = v6;
    if (v607 == (void **)&v605)
    {
      v605[4]((void **)&v605);
    }
    else if (v607)
    {
      (*((void (**)(void))*v607 + 5))();
    }
    uint64_t v38 = v625[0];
    if (v625[0])
    {
      if (*(void *)(v5 + 656))
      {
        for (uint64_t i = *(void **)(v5 + 648); i; uint64_t i = (void *)*i)
        {
          uint64_t v40 = (void *)i[4];
          if (v625[0] >= v40)
          {
            if (v40 >= v625[0]) {
              goto LABEL_79;
            }
            ++i;
          }
        }
      }
      else
      {
        uint64_t v41 = *(unsigned int *)(v5 + 616);
        if (v41)
        {
          uint64_t v42 = *(void ***)(v5 + 608);
          uint64_t v43 = 8 * v41;
          while (*v42 != v625[0])
          {
            ++v42;
            v43 -= 8;
            if (!v43) {
              goto LABEL_76;
            }
          }
          if (v43) {
            goto LABEL_79;
          }
        }
      }
LABEL_76:
      uint64_t v627 = (void *)*((void *)v625[0] - 4 * (*((_DWORD *)v625[0] + 5) & 0x7FFFFFF));
      uint64_t v44 = sub_1CD50E820(v568, (uint64_t *)&v627);
      unint64_t v45 = *(unsigned int *)(v44 + 8);
      if (v45 >= *(unsigned int *)(v44 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)v44 + 16 * v45) = *(_OWORD *)v625;
      ++*(_DWORD *)(v44 + 8);
      uint64_t v627 = 0;
      uint64_t v5 = v572;
      if (!sub_1CBFF64C0(*(void *)(v572 + 664), *(_DWORD *)(v572 + 680), (uint64_t)v38, &v627)
        || v627 == (void *)(*(void *)(v572 + 664) + 16 * *(unsigned int *)(v572 + 680)))
      {
        int v58 = *(_DWORD *)(v572 + 672);
        uint64_t v627 = v38;
        *((_DWORD *)sub_1CD50EB30(v566, (uint64_t *)&v627) + 2) = v58;
        uint64_t v5 = v572;
      }
    }
LABEL_79:
    *(void *)&v655[32] = v0;
    BOOL v46 = v615;
    if (v615)
    {
      uint64_t v6 = v37;
      if (*((void *)&v654 + 1) | *(void *)&v655[8])
      {
        BOOL v46 = 0;
      }
      else if ((void)v654)
      {
        BOOL v46 = *(void *)&v655[16] == 0;
      }
      else
      {
        BOOL v46 = 1;
      }
    }
    else
    {
      uint64_t v6 = v37;
    }
    unsigned __int8 v615 = v46;
    if (v612)
    {
      int v47 = (void *)*((void *)v611 + 4);
      if ((!v47 || !*(void *)&v655[16] || *v47 == **(void **)&v655[16])
        && ((uint64_t v48 = *(unsigned __int8 **)v611) != 0 ? (v49 = (void)v654 == 0) : (v49 = 1),
            (v49 || *(void *)v48 == *(void *)v654)
         && ((uint64_t v50 = (void *)*((void *)v611 + 5)) == 0 || !*(void *)&v655[24] || *v50 == **(void **)&v655[24])
         && *((unsigned __int8 *)v611 + 56) == v655[40]))
      {
        int v51 = v47 != *(void **)&v655[16];
        if (v48 != (unsigned __int8 *)v654) {
          v51 |= 2u;
        }
        if (*((void *)v611 + 1) != *((void *)&v654 + 1)) {
          v51 |= 4u;
        }
        if (v50 != *(void **)&v655[24]) {
          v51 |= 8u;
        }
        uint64_t v52 = *((void *)v611 + 3);
        if (v52)
        {
          if (v52 != *(void *)&v655[8] && *(void *)&v655[8] != 0) {
            v51 |= 0x10u;
          }
        }
        if ((v51 & (v51 - 1)) != 0) {
          int v51 = 255;
        }
      }
      else
      {
        int v51 = 255;
      }
      if (v614)
      {
        if (v614 != v51)
        {
          unsigned int v614 = 255;
LABEL_127:
          LODWORD(v612) = 0;
          int v36 = 3;
          goto LABEL_51;
        }
      }
      else
      {
        unsigned int v614 = v51;
      }
      if (v51 == 16 || v51 == 255 || v51 == 4 && *(void *)&v655[24] || v51 == 2 && v655[0]) {
        goto LABEL_127;
      }
      if (v612 >= HIDWORD(v612))
      {
LABEL_140:
        sub_1CC27AE9C((uint64_t)&v611, &v654);
        int v36 = 0;
        goto LABEL_51;
      }
      int v36 = 0;
      int v54 = (char *)v611 + 64 * (unint64_t)v612;
    }
    else
    {
      if (!HIDWORD(v612)) {
        goto LABEL_140;
      }
      int v36 = 0;
      int v54 = v611;
    }
    long long v55 = v654;
    long long v56 = *(_OWORD *)v655;
    long long v57 = *(_OWORD *)&v655[32];
    void v54[2] = *(_OWORD *)&v655[16];
    v54[3] = v57;
    *int v54 = v55;
    v54[1] = v56;
    LODWORD(v612) = v612 + 1;
LABEL_51:
    if (v36 == 3) {
      break;
    }
  }
  if (!v612) {
    goto LABEL_736;
  }
  if (v612 == 1 || !v614) {
    goto LABEL_746;
  }
  if (v615 | byte_1EBCC9DC8
    || v614 > 8
    || ((0x8Bu >> (v614 - 1)) & 1) == 0
    || !*(unsigned char *)*(&off_1E682F4D8 + (int)(v614 - 1)))
  {
LABEL_736:
    sub_1CC274118((uint64_t)&v608, 0);
    uint64_t v0 = 0;
    goto LABEL_823;
  }
  v591[0] = 0;
  v591[1] = 0;
  unsigned int v592 = 0;
  uint64_t v627 = (char *)&v628 + 8;
  *(void *)&long long v628 = 0x200000000;
  uint64_t v59 = *v617;
  uint64_t v60 = **((void **)v611 + 6);
  unsigned int v61 = *(_DWORD *)(v60 + 8);
  if ((v61 & 0xFE) == 0x12) {
    unsigned int v61 = *(_DWORD *)(**(void **)(v60 + 16) + 8);
  }
  uint64_t v62 = *(void *)(v59 + 232);
  if (v61 < 0x100) {
    goto LABEL_160;
  }
  unsigned int v63 = v61 >> 8;
  unint64_t v64 = *(unsigned int *)(v59 + 240);
  uint64_t v65 = *(void *)(v59 + 232);
  if (v64)
  {
    uint64_t v65 = v62;
    unint64_t v66 = v64;
    do
    {
      unint64_t v67 = v66 >> 1;
      uint64_t v68 = v65 + 16 * (v66 >> 1);
      unsigned int v69 = *(_DWORD *)(v68 + 8);
      uint64_t v70 = v68 + 16;
      v66 += ~(v66 >> 1);
      if (v69 < v63) {
        uint64_t v65 = v70;
      }
      else {
        unint64_t v66 = v67;
      }
    }
    while (v66);
  }
  if (v65 == v62 + 16 * v64 || *(_DWORD *)(v65 + 8) != v63) {
LABEL_160:
  }
    uint64_t v65 = v62;
  char v567 = v6;
  uint64_t v71 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v60, (llvm::LLVMContext *)*(unsigned int *)(v65 + 4));
  uint64_t v74 = (llvm::ConstantInt *)v71;
  if ((*(_DWORD *)(v60 + 8) & 0xFE) == 0x12)
  {
    int v330 = (llvm::Type *)*(unsigned int *)(v60 + 32);
    if (*(_DWORD *)(v60 + 8) == 19) {
      llvm::ScalableVectorType::get(v71, v330);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v71, v330);
    }
    uint64_t v74 = v331;
  }
  if (v612)
  {
    unint64_t v75 = (unint64_t)v612 << 6;
    uint64_t v76 = (uint64_t *)((char *)v611 + 48);
    while (1)
    {
      switch(v614)
      {
        case 1u:
          uint64_t v10 = *(v76 - 2);
          if (v10) {
            goto LABEL_169;
          }
          goto LABEL_166;
        case 2u:
          uint64_t v10 = *(v76 - 6);
          if (!v10) {
            goto LABEL_166;
          }
          goto LABEL_169;
        case 4u:
          uint64_t v10 = (uint64_t)llvm::ConstantInt::get(v74, *(v76 - 5), 0);
          if (v10) {
            goto LABEL_169;
          }
          goto LABEL_166;
        case 8u:
          uint64_t v10 = *(v76 - 1);
          if (!v10) {
            goto LABEL_166;
          }
LABEL_169:
          if (v616) {
            BOOL v77 = v616 == *(llvm::Constant **)v10;
          }
          else {
            BOOL v77 = 1;
          }
          if (!v77)
          {
            int v81 = 0;
            goto LABEL_186;
          }
          v616 = *(llvm::Constant **)v10;
          sub_1CC27AF70(v591, v76)[1] = v10;
LABEL_175:
          v76 += 8;
          v75 -= 64;
          if (!v75) {
            goto LABEL_182;
          }
          break;
        default:
LABEL_166:
          uint64_t v5 = *v76;
          if (v628 >= (unint64_t)DWORD1(v628)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v627 + v628) = v5;
          LODWORD(v628) = v628 + 1;
          goto LABEL_175;
      }
    }
  }
LABEL_182:
  if (v628)
  {
    uint64_t v78 = (uint64_t *)v627;
    uint64_t v5 = 8 * v628;
    do
    {
      *(void *)&long long v654 = 0;
      uint64_t v79 = *v78++;
      *(void *)&long long v654 = v79;
      NullValue = llvm::Constant::getNullValue(v616, v72, v73);
      sub_1CC27AF70(v591, &v654)[1] = NullValue;
      v5 -= 8;
    }
    while (v5);
  }
  int v81 = 1;
LABEL_186:
  if (v627 != (char *)&v628 + 8) {
    free(v627);
  }
  if (!v81)
  {
LABEL_735:
    MEMORY[0x1D25D9CD0](v591[0], 8);
    goto LABEL_736;
  }
  *(void *)&long long v628 = 0;
  uint64_t v627 = 0;
  DWORD2(v628) = 0;
  int v629 = v617;
  uint64_t v630 = &v632;
  uint64_t v82 = (char *)v646;
  uint64_t v631 = 0x2000000000;
  v646[0] = 1;
  int v577 = (llvm::Type ***)&v648;
  for (uint64_t j = 312; j != 824; j += 16)
    *(void **)((char *)&v627 + j) = (void *)-4096;
  unsigned int v579 = &v630;
  uint64_t v648 = 0;
  v649 = v653;
  v650 = v653;
  uint64_t v651 = 32;
  int v652 = 0;
  v625[0] = v626;
  v625[1] = (void *)0x2000000000;
  *(void *)&long long v654 = v655;
  *((void *)&v654 + 1) = 0x2000000000;
  __int16 v84 = (uint64_t *)llvm::UndefValue::get(v616, v72);
  unsigned int v85 = v618;
  if (DWORD2(v654) >= HIDWORD(v654)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(v654 + 8 * DWORD2(v654)) = v618;
  BOOL v109 = __CFADD__(DWORD2(v654), 1);
  unsigned int v86 = ++DWORD2(v654);
  if (!v109)
  {
    BOOL v580 = (unsigned __int8 *)&v649;
    LOBYTE(v5) = 5;
    while (1)
    {
      while (1)
      {
        char v600 = 0;
        uint64_t v182 = *(void ***)(v654 + 8 * v86 - 8);
        DWORD2(v654) = v86 - 1;
        char v600 = v182;
        v666 = v182;
        v659 = 0;
        if (!sub_1CBA0E618((uint64_t)v591, &v666, &v659) || v659 == (void *)(v591[0] + 16 * v592)) {
          break;
        }
LABEL_407:
        unsigned int v86 = DWORD2(v654);
        if (!DWORD2(v654)) {
          goto LABEL_194;
        }
      }
      if (LODWORD(v625[1]) >= (unint64_t)HIDWORD(v625[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v625[0] + LODWORD(v625[1])) = v600;
      ++LODWORD(v625[1]);
      uint64_t v0 = (uint64_t)v600;
      if (!v600 || *((unsigned char *)v600 + 16) != 85) {
        break;
      }
      if ((*((unsigned char *)v600 + 23) & 0x10) != 0)
      {
        uint64_t v183 = **(void **)*v600;
        uint64_t v184 = *(void *)(v183 + 152);
        uint64_t v185 = *(unsigned int *)(v183 + 168);
        if (!v185) {
          goto LABEL_409;
        }
        LODWORD(v186) = (v185 - 1) & ((v600 >> 4) ^ (v600 >> 9));
        uint64_t v187 = (void ***)(v184 + 16 * v186);
        uint64_t v188 = *v187;
        if (*v187 != v600)
        {
          int v189 = 1;
          while (v188 != (void **)-4096)
          {
            int v190 = v186 + v189++;
            uint64_t v186 = v190 & (v185 - 1);
            uint64_t v188 = *(void ***)(v184 + 16 * v186);
            if (v188 == v600)
            {
              uint64_t v187 = (void ***)(v184 + 16 * v186);
              goto LABEL_410;
            }
          }
LABEL_409:
          uint64_t v187 = (void ***)(v184 + 16 * v185);
        }
LABEL_410:
        int v204 = v187[1];
        unint64_t v207 = *v204;
        int v206 = (char *)(v204 + 2);
        uint64_t v205 = v207;
        goto LABEL_411;
      }
      uint64_t v205 = 0;
      int v206 = &byte_1CFBCE98E;
LABEL_411:
      uint64_t v208 = (uint64_t)*(v600 - 12);
      __int16 v662 = 261;
      v659 = v206;
      *(void *)&long long v660 = v205;
      uint64_t v209 = sub_1CC199EFC(v208, v84, (uint64_t)v84, (const char **)&v659, (uint64_t)v600, (uint64_t)v600);
      sub_1CC27AF70(v591, &v600)[1] = v209;
      unint64_t v210 = (char *)v650;
      uint64_t v211 = HIDWORD(v651);
      if (v650 != v649)
      {
        unsigned int v215 = v651;
LABEL_422:
        if (3 * v215 <= 4 * (HIDWORD(v651) - v652))
        {
          if (v215 >= 0x40) {
            v215 *= 2;
          }
          else {
            unsigned int v215 = 128;
          }
        }
        else if (v215 - HIDWORD(v651) >= v215 >> 3)
        {
          goto LABEL_424;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v649, v215);
        unsigned int v215 = v651;
        unint64_t v210 = (char *)v650;
LABEL_424:
        unsigned int v216 = v215 - 1;
        unsigned int v217 = (v215 - 1) & ((v209 >> 4) ^ (v209 >> 9));
        uint64_t v218 = &v210[8 * v217];
        unsigned int v219 = *(llvm::Value **)v218;
        if (*(void *)v218 == -1)
        {
          uint64_t v220 = 0;
LABEL_436:
          if (v220) {
            uint64_t v224 = v220;
          }
          else {
            uint64_t v224 = (llvm::Value **)v218;
          }
          if (*v224 != v209)
          {
            if (*v224 == (llvm::Value *)-2) {
              --v652;
            }
            else {
              ++HIDWORD(v651);
            }
            unsigned __int8 *v224 = v209;
          }
        }
        else
        {
          uint64_t v220 = 0;
          int v221 = 1;
          while (v219 != v209)
          {
            if (v220) {
              BOOL v222 = 0;
            }
            else {
              BOOL v222 = v219 == (llvm::Value *)-2;
            }
            if (v222) {
              uint64_t v220 = (llvm::Value **)v218;
            }
            unsigned int v223 = v217 + v221++;
            unsigned int v217 = v223 & v216;
            uint64_t v218 = &v210[8 * (v223 & v216)];
            unsigned int v219 = *(llvm::Value **)v218;
            if (*(void *)v218 == -1) {
              goto LABEL_436;
            }
          }
        }
        goto LABEL_443;
      }
      if (HIDWORD(v651))
      {
        uint64_t v212 = 0;
        uint64_t v213 = 8 * HIDWORD(v651);
        uint64_t v214 = (llvm::Value **)v650;
        while (*v214 != v209)
        {
          if (*v214 == (llvm::Value *)-2) {
            uint64_t v212 = v214;
          }
          ++v214;
          v213 -= 8;
          if (!v213)
          {
            if (!v212) {
              goto LABEL_419;
            }
            *uint64_t v212 = v209;
            --v652;
            goto LABEL_443;
          }
        }
        goto LABEL_443;
      }
LABEL_419:
      unsigned int v215 = v651;
      if (HIDWORD(v651) >= v651) {
        goto LABEL_422;
      }
      ++HIDWORD(v651);
      *((void *)v650 + v211) = v209;
LABEL_443:
      if (DWORD2(v654) >= (unint64_t)HIDWORD(v654)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v654 + 8 * DWORD2(v654)) = *(void *)(v0 - 64);
      unsigned int v225 = DWORD2(v654) + 1;
      DWORD2(v654) = v225;
      if (v225 >= HIDWORD(v654)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v654 + 8 * v225) = *(void *)(v0 - 32);
      unsigned int v86 = DWORD2(v654) + 1;
      DWORD2(v654) = v86;
      if (!v86) {
        goto LABEL_194;
      }
    }
    uint64_t v10 = *((unsigned int *)v600 + 5);
    unsigned int v191 = v616;
    v659 = "sunk_phi";
    __int16 v662 = 259;
    unsigned int v192 = (char *)operator new(0x48uLL);
    *((void *)v192 + 1) = v191;
    int v7 = (void **)(v192 + 8);
    *(void *)unsigned int v192 = 0;
    *((void *)v192 + 2) = 0;
    *((void *)v192 + 3) = 0x4000000000000053;
    *((_OWORD *)v192 + 2) = 0u;
    int v193 = v192 + 32;
    *((_OWORD *)v192 + 3) = 0u;
    *((_DWORD *)v192 + 16) = 0;
    uint64_t v194 = *(void *)(v0 + 40);
    *((void *)v192 + 6) = v194;
    *(_WORD *)(v194 + 18) &= ~0x8000u;
    if ((v192[31] & 0x10) != 0)
    {
      uint64_t v226 = *(void *)(v194 + 56);
      if (v226)
      {
        int v227 = *(llvm::ValueSymbolTable **)(v226 + 104);
        if (v227) {
          llvm::ValueSymbolTable::reinsertValue(v227, (llvm::Value *)v7);
        }
      }
    }
    uint64_t v195 = *(void *)(v0 + 24);
    *((void *)v192 + 4) = v195;
    *((void *)v192 + 5) = v0 + 24;
    *(void *)(v195 + 8) = v193;
    *(void *)(v0 + 24) = v193;
    *((_DWORD *)v192 + 17) = v10 & 0x7FFFFFF;
    llvm::Value::setNameImpl((llvm::Value *)v7, (const char **)&v659);
    if (v192[24])
    {
LABEL_391:
      unsigned int v85 = (void **)*((unsigned int *)v192 + 17);
      int v196 = operator new(40 * (void)v85);
      *(void *)unsigned int v192 = v196;
      if (v85)
      {
        BOOL v197 = &v196[4 * (void)v85];
        do
        {
          void *v196 = 0;
          v196[1] = 0;
          v196[2] = 0;
          v196[3] = v7;
          v196 += 4;
        }
        while (v196 != v197);
      }
      sub_1CC27AF70(v591, &v600)[1] = v7;
      uint64_t v198 = v631;
      v659 = 0;
      if (sub_1CC27B2E4((uint64_t)v646, (uint64_t)v7, &v659)) {
        goto LABEL_403;
      }
      if (v646[0]) {
        unsigned int v199 = 32;
      }
      else {
        unsigned int v199 = v647;
      }
      if (4 * (LODWORD(v646[0]) >> 1) + 4 >= 3 * v199)
      {
        v199 *= 2;
      }
      else if (v199 + ~(LODWORD(v646[0]) >> 1) - HIDWORD(v646[0]) > v199 >> 3)
      {
LABEL_399:
        unsigned int v200 = v659;
        LODWORD(v646[0]) += 2;
        if (*(void *)v659 != -4096) {
          --HIDWORD(v646[0]);
        }
        *(void *)v659 = v7;
        v200[1] = v198;
        if (v631 >= (unint64_t)HIDWORD(v631)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v630 + v631) = v7;
        LODWORD(v631) = v631 + 1;
LABEL_403:
        int v201 = *(_DWORD *)(v0 + 20);
        if ((v201 & 0x40000000) != 0)
        {
          uint64_t v203 = *(char **)(v0 - 8);
          uint64_t v202 = v201 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v202 = v201 & 0x7FFFFFF;
          uint64_t v203 = (char *)(v0 - 32 * v202);
        }
        sub_1CBF74A6C((uint64_t)&v654, v654 + 8 * DWORD2(v654), v203, &v203[32 * v202]);
        goto LABEL_407;
      }
      unsigned int v85 = (void **)v646;
      sub_1CD50EE54((uint64_t)v646, v199);
      v659 = 0;
      sub_1CC27B2E4((uint64_t)v646, (uint64_t)v7, &v659);
      goto LABEL_399;
    }
    if ((v192[31] & 0x10) == 0) {
      goto LABEL_472;
    }
    uint64_t v228 = **(void **)*v7;
    uint64_t v229 = *(void *)(v228 + 152);
    uint64_t v230 = *(unsigned int *)(v228 + 168);
    if (v230)
    {
      LODWORD(v231) = (v230 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      unsigned int v232 = (void ***)(v229 + 16 * v231);
      unsigned int v233 = *v232;
      if (*v232 == v7)
      {
LABEL_465:
        uint64_t v236 = v232[1];
        unint64_t v239 = (unint64_t)*v236;
        int v237 = v236 + 2;
        unint64_t v238 = v239;
        if (v239 >= 5 && *(_DWORD *)v237 == *(_DWORD *)"llvm." && v237[4] == aLlvm_1[4])
        {
          *((_DWORD *)v192 + 10) |= 0x2000u;
          int v241 = llvm::Function::lookupIntrinsicID(v237, v238);
LABEL_473:
          *((_DWORD *)v192 + 11) = v241;
          goto LABEL_391;
        }
LABEL_472:
        int v241 = 0;
        *((_DWORD *)v192 + 10) &= ~0x2000u;
        goto LABEL_473;
      }
      int v234 = 1;
      while (v233 != (void **)-4096)
      {
        int v235 = v231 + v234++;
        uint64_t v231 = v235 & (v230 - 1);
        unsigned int v233 = *(void ***)(v229 + 16 * v231);
        if (v233 == v7)
        {
          unsigned int v232 = (void ***)(v229 + 16 * v231);
          goto LABEL_465;
        }
      }
    }
    unsigned int v232 = (void ***)(v229 + 16 * v230);
    goto LABEL_465;
  }
LABEL_194:
  if ((unsigned char *)v654 != v655) {
    free((void *)v654);
  }
  unsigned int v87 = v625[1];
  if (LODWORD(v625[1]))
  {
    BOOL v580 = (unsigned __int8 *)&v660 + 8;
    uint64_t v0 = (uint64_t)v668;
    LOBYTE(v5) = -2;
    do
    {
      v593 = 0;
      uint64_t v88 = (void *)*((void *)v625[0] + v87 - 1);
      LODWORD(v625[1]) = v87 - 1;
      v593 = v88;
      uint64_t v10 = sub_1CC27AF70(v591, &v593)[1];
      if (v10 && *(unsigned char *)(v10 + 16) == 85)
      {
        unsigned int v92 = v593;
        *(void *)&long long v654 = 0;
        *(void *)&long long v654 = *(v593 - 8);
        unsigned int v93 = sub_1CC27AF70(v591, &v654);
        uint64_t v94 = sub_1CC27B270((uint64_t)&v627, v93[1]);
        uint64_t v95 = (uint64_t *)(v10 - 64);
        if (*(void *)(v10 - 64))
        {
          **(void **)(v10 - 48) = *(void *)(v10 - 56);
          uint64_t v96 = *(void *)(v10 - 56);
          if (v96) {
            *(void *)(v96 + 16) = *(void *)(v10 - 48);
          }
        }
        *uint64_t v95 = v94;
        if (v94)
        {
          uint64_t v99 = *(void *)(v94 + 8);
          int v97 = (uint64_t **)(v94 + 8);
          uint64_t v98 = v99;
          *(void *)(v10 - 56) = v99;
          if (v99) {
            *(void *)(v98 + 16) = v10 - 56;
          }
          *(void *)(v10 - 48) = v97;
          char *v97 = v95;
        }
        v659 = 0;
        v659 = (void *)*(v92 - 4);
        uint64_t v100 = sub_1CC27AF70(v591, &v659);
        uint64_t v101 = sub_1CC27B270((uint64_t)&v627, v100[1]);
        uint64_t v102 = (uint64_t *)(v10 - 32);
        if (*(void *)(v10 - 32))
        {
          **(void **)(v10 - 16) = *(void *)(v10 - 24);
          uint64_t v103 = *(void *)(v10 - 24);
          if (v103) {
            *(void *)(v103 + 16) = *(void *)(v10 - 16);
          }
        }
        *uint64_t v102 = v101;
        if (v101)
        {
          uint64_t v106 = *(void *)(v101 + 8);
          uint64_t v104 = (uint64_t **)(v101 + 8);
          uint64_t v105 = v106;
          *(void *)(v10 - 24) = v106;
          if (v106) {
            *(void *)(v105 + 16) = v10 - 24;
          }
          *(void *)(v10 - 16) = v104;
          *uint64_t v104 = v102;
        }
      }
      else
      {
        unsigned int v85 = *(void ***)(*(void *)(v10 + 40) + 8);
        if (v85)
        {
          while (1)
          {
            int v107 = v85[3];
            unsigned int v108 = *((unsigned __int8 *)v107 + 16);
            BOOL v109 = v107 && v108 >= 0x1C;
            if (v109 && v108 - 29 < 0xB) {
              break;
            }
            unsigned int v85 = (void **)v85[1];
            if (!v85) {
              goto LABEL_224;
            }
          }
LABEL_331:
          uint64_t v151 = v107[5];
          *(void *)&long long v654 = 0;
          *(void *)&long long v654 = sub_1CBF73380((uint64_t)v593, v151);
          unsigned __int8 v152 = sub_1CC27AF70(v591, &v654);
          uint64_t v153 = sub_1CC27B270((uint64_t)&v627, v152[1]);
          int v154 = *(_DWORD *)(v10 + 20);
          uint64_t v155 = v154 & 0x7FFFFFF;
          if ((v154 & 0x7FFFFFF) == *(_DWORD *)(v10 + 60))
          {
            unsigned int v171 = v155 + (v155 >> 1);
            if (v171 <= 2) {
              uint64_t v172 = 2;
            }
            else {
              uint64_t v172 = v171;
            }
            *(_DWORD *)(v10 + 60) = v172;
            if ((v154 & 0x40000000) != 0) {
              BOOL v173 = *(uint64_t **)(v10 - 8);
            }
            else {
              BOOL v173 = (uint64_t *)(v10 - 32 * v155);
            }
            __pa = v173;
            __int16 v174 = operator new(40 * v172);
            *(void *)(v10 - 8) = v174;
            int v175 = v174;
            do
            {
              *int v175 = 0;
              v175[1] = 0;
              v175[2] = 0;
              v175[3] = v10;
              v175 += 4;
            }
            while (v175 != &v174[4 * v172]);
            int v176 = *(_DWORD *)(v10 + 20);
            if ((v176 & 0x40000000) != 0) {
              uint64_t v177 = (uint64_t)v174;
            }
            else {
              uint64_t v177 = v10 - 32 * (v176 & 0x7FFFFFF);
            }
            uint64_t v569 = v177;
            sub_1CC5E4108((uint64_t)&v659, __pa, &__pa[4 * v155], v177);
            if (v155)
            {
              memmove((void *)(v569 + 32 * v172), &__pa[4 * v155], 8 * v155);
              uint64_t v178 = 4 * v155;
              do
              {
                uint64_t v179 = &__pa[v178];
                if (__pa[v178 - 4])
                {
                  *(void *)*(v179 - 2) = *(v179 - 3);
                  uint64_t v180 = *(v179 - 3);
                  if (v180) {
                    *(void *)(v180 + 16) = *(v179 - 2);
                  }
                }
                v178 -= 4;
              }
              while (v178 * 8);
            }
            operator delete(__pa);
            int v154 = *(_DWORD *)(v10 + 20);
          }
          uint64_t v156 = (v154 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v10 + 20) = v154 & 0xF8000000 | (v154 + 1) & 0x7FFFFFF;
          if ((v154 & 0x40000000) != 0) {
            uint64_t v157 = *(void *)(v10 - 8);
          }
          else {
            uint64_t v157 = v10 - 32 * v156;
          }
          uint64_t v158 = (v156 - 1);
          uint64_t v159 = v157 + 32 * v158;
          if (*(void *)v159)
          {
            **(void **)(v159 + 16) = *(void *)(v159 + 8);
            uint64_t v170 = *(void *)(v159 + 8);
            if (v170) {
              *(void *)(v170 + 16) = *(void *)(v159 + 16);
            }
          }
          *(void *)uint64_t v159 = v153;
          if (v153)
          {
            uint64_t v162 = *(void *)(v153 + 8);
            uint64_t v161 = (uint64_t *)(v153 + 8);
            uint64_t v160 = v162;
            uint64_t v163 = v157 + 32 * v158;
            *(void *)(v163 + 8) = v162;
            if (v162) {
              *(void *)(v160 + 16) = v163 + 8;
            }
            *(void *)(v163 + 16) = v161;
            *uint64_t v161 = v159;
          }
          int v164 = *(_DWORD *)(v10 + 20);
          uint64_t v165 = v164 & 0x7FFFFFF;
          if ((v164 & 0x40000000) != 0) {
            uint64_t v166 = *(void *)(v10 - 8);
          }
          else {
            uint64_t v166 = v10 - 32 * v165;
          }
          *(void *)(v166 + 32 * *(unsigned int *)(v10 + 60) + 8 * (v165 - 1)) = v151;
          while (1)
          {
            unsigned int v85 = (void **)v85[1];
            if (!v85) {
              break;
            }
            int v107 = v85[3];
            unsigned int v167 = *((unsigned __int8 *)v107 + 16);
            if (v107) {
              BOOL v168 = v167 >= 0x1C;
            }
            else {
              BOOL v168 = 0;
            }
            if (v168 && v167 - 29 < 0xB) {
              goto LABEL_331;
            }
          }
        }
      }
LABEL_224:
      v659 = (char *)&v660 + 8;
      DWORD1(v660) = 32;
      *(void *)&long long v654 = &v655[16];
      *((void *)&v654 + 1) = &v655[16];
      *(void *)v655 = 32;
      *(_DWORD *)&v655[8] = 0;
      unsigned int v111 = 1;
      *((void *)&v660 + 1) = v10;
      do
      {
        int v7 = (void **)*((void *)v659 + v111 - 1);
        LODWORD(v660) = v111 - 1;
        uint64_t v112 = *((void *)&v654 + 1);
        uint64_t v113 = *(unsigned int *)&v655[4];
        if (*((void *)&v654 + 1) == (void)v654)
        {
          if (*(_DWORD *)&v655[4])
          {
            int v114 = 0;
            uint64_t v115 = 8 * *(unsigned int *)&v655[4];
            int v116 = (void ***)*((void *)&v654 + 1);
            do
            {
              if (*v116 == v7) {
                goto LABEL_309;
              }
              if (*v116 == (void **)-2) {
                int v114 = v116;
              }
              ++v116;
              v115 -= 8;
            }
            while (v115);
            if (v114)
            {
              *int v114 = v7;
              --*(_DWORD *)&v655[8];
              if (!v7) {
                goto LABEL_309;
              }
              goto LABEL_258;
            }
          }
          unsigned int v117 = *(_DWORD *)v655;
          if (*(_DWORD *)&v655[4] < *(_DWORD *)v655)
          {
            ++*(_DWORD *)&v655[4];
            *(void *)(*((void *)&v654 + 1) + 8 * v113) = v7;
            if (!v7) {
              goto LABEL_309;
            }
LABEL_258:
            if (*((unsigned __int8 *)v7 + 16) >= 0x1Cu)
            {
              int v127 = *((_DWORD *)v7 + 5);
              if ((v127 & 0x40000000) != 0)
              {
                unsigned int v85 = (void **)*(v7 - 1);
                unint64_t v128 = v127 & 0x7FFFFFF;
              }
              else
              {
                unint64_t v128 = v127 & 0x7FFFFFF;
                unsigned int v85 = &v7[-4 * v128];
              }
              uint64_t v129 = (uint64_t)v629;
              v666 = v668;
              uint64_t v667 = 0x800000000;
              if (v128 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v128)
              {
                uint64_t v130 = 32 * v128;
                char v131 = v668;
                do
                {
                  uint64_t v132 = *v85;
                  v85 += 4;
                  *v131++ = v132;
                  v130 -= 32;
                }
                while (v130);
                int v133 = v666;
              }
              else
              {
                int v133 = v668;
              }
              LODWORD(v667) = v128;
              float v134 = llvm::SimplifyInstructionWithOperands((llvm *)v7, (uint64_t)v133, v128, v129, v89, v90, v91);
              if (v666 == v668)
              {
                if (v134) {
                  goto LABEL_269;
                }
              }
              else
              {
                free(v666);
                if (v134)
                {
LABEL_269:
                  uint64_t v135 = v7[1];
                  if (v135)
                  {
                    unsigned int v136 = v660;
                    do
                    {
                      if (v136 >= DWORD1(v660)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v659 + v136) = v135[3];
                      unsigned int v136 = v660 + 1;
                      LODWORD(v660) = v660 + 1;
                      uint64_t v135 = (void *)v135[1];
                    }
                    while (v135);
                  }
                  char v600 = v7;
                  unint64_t v601 = v134;
                  sub_1CC27B388((uint64_t)&v627, &v600, &v601, (uint64_t)&v666);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v134, (llvm::Value *)1);
                  int v137 = *((unsigned __int8 *)v7 + 16);
                  if (v137 == 83)
                  {
                    if (sub_1CC27B41C(v646, (uint64_t)v7)) {
                      sub_1CC27B470((uint64_t)&v630, &v648);
                    }
                    int v137 = *((unsigned __int8 *)v7 + 16);
                  }
                  if (v137 == 85)
                  {
                    uint64_t v138 = v649;
                    if (v650 == v649)
                    {
                      unsigned int v139 = HIDWORD(v651);
                      int v140 = (char *)v650 + 8 * HIDWORD(v651);
                      if (HIDWORD(v651))
                      {
                        uint64_t v141 = 0;
                        while (*(void ***)((char *)v650 + v141) != v7)
                        {
                          v141 += 8;
                          if (8 * HIDWORD(v651) == v141) {
                            goto LABEL_302;
                          }
                        }
                        int v140 = (char *)v650 + v141;
                      }
LABEL_302:
                      uint64_t v138 = v650;
                    }
                    else
                    {
                      int v142 = v651 - 1;
                      unsigned int v143 = (v651 - 1) & ((v7 >> 4) ^ (v7 >> 9));
                      int v140 = (char *)v650 + 8 * v143;
                      uint64_t v144 = *(void ***)v140;
                      if (*(void *)v140 == -1)
                      {
                        unsigned int v145 = 0;
LABEL_312:
                        if (v145) {
                          int v140 = v145;
                        }
                        unsigned int v139 = HIDWORD(v651);
                        if (*(void ***)v140 != v7) {
                          int v140 = (char *)v650 + 8 * v651;
                        }
                      }
                      else
                      {
                        unsigned int v145 = 0;
                        int v146 = 1;
                        while (v144 != v7)
                        {
                          if (v145) {
                            BOOL v147 = 0;
                          }
                          else {
                            BOOL v147 = v144 == (void **)-2;
                          }
                          if (v147) {
                            unsigned int v145 = v140;
                          }
                          unsigned int v148 = v143 + v146++;
                          unsigned int v143 = v148 & v142;
                          int v140 = (char *)v650 + 8 * (v148 & v142);
                          uint64_t v144 = *(void ***)v140;
                          if (*(void *)v140 == -1) {
                            goto LABEL_312;
                          }
                        }
                        unsigned int v139 = HIDWORD(v651);
                      }
                    }
                    if (v650 == v138) {
                      unsigned int v149 = v139;
                    }
                    else {
                      unsigned int v149 = v651;
                    }
                    if (v140 != (char *)v650 + 8 * v149)
                    {
                      *(void *)int v140 = -2;
                      ++v652;
                    }
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
              }
            }
            goto LABEL_309;
          }
        }
        else
        {
          unsigned int v117 = *(_DWORD *)v655;
        }
        if (3 * v117 <= 4 * (*(_DWORD *)&v655[4] - *(_DWORD *)&v655[8]))
        {
          if (v117 >= 0x40) {
            v117 *= 2;
          }
          else {
            unsigned int v117 = 128;
          }
        }
        else if (v117 - *(_DWORD *)&v655[4] >= v117 >> 3)
        {
          goto LABEL_239;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v654, v117);
        unsigned int v117 = *(_DWORD *)v655;
        uint64_t v112 = *((void *)&v654 + 1);
LABEL_239:
        unsigned int v118 = v117 - 1;
        unsigned int v119 = (v117 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        uint64_t v120 = (void ***)(v112 + 8 * v119);
        unsigned int v121 = *v120;
        if (*v120 != (void **)-1)
        {
          uint64_t v122 = 0;
          int v123 = 1;
          while (v121 != v7)
          {
            if (v122) {
              BOOL v124 = 0;
            }
            else {
              BOOL v124 = v121 == (void **)-2;
            }
            if (v124) {
              uint64_t v122 = v120;
            }
            unsigned int v125 = v119 + v123++;
            unsigned int v119 = v125 & v118;
            uint64_t v120 = (void ***)(v112 + 8 * (v125 & v118));
            unsigned int v121 = *v120;
            if (*v120 == (void **)-1) {
              goto LABEL_251;
            }
          }
          goto LABEL_309;
        }
        uint64_t v122 = 0;
LABEL_251:
        if (v122) {
          uint64_t v126 = v122;
        }
        else {
          uint64_t v126 = v120;
        }
        if (*v126 != v7)
        {
          if (*v126 == (void **)-2) {
            --*(_DWORD *)&v655[8];
          }
          else {
            ++*(_DWORD *)&v655[4];
          }
          *uint64_t v126 = v7;
          if (v7) {
            goto LABEL_258;
          }
        }
LABEL_309:
        unsigned int v111 = v660;
      }
      while (v660);
      uint64_t v150 = sub_1CC27B270((uint64_t)&v627, v10);
      if (*((void *)&v654 + 1) != (void)v654) {
        free(*((void **)&v654 + 1));
      }
      if (v659 != (char *)&v660 + 8) {
        free(v659);
      }
      sub_1CC27AF70(v591, &v593)[1] = v150;
      unsigned int v87 = v625[1];
    }
    while (LODWORD(v625[1]));
  }
  if (!byte_1EBCC9F48 && HIDWORD(v651) != v652) {
    goto LABEL_723;
  }
  int v570 = byte_1EBCC9E88;
  *(void *)&long long v654 = 1;
  memset_pattern16((char *)&v654 + 8, &unk_1CFAC3070, 0x80uLL);
  v656 = v658;
  uint64_t v657 = 0x800000000;
  v593 = v597;
  uint64_t v594 = v597;
  uint64_t v595 = 8;
  int v596 = 0;
  if (LODWORD(v646[0]) < 2)
  {
    char v181 = 1;
    goto LABEL_711;
  }
  int v7 = (void **)v604;
  BOOL v580 = (unsigned __int8 *)&v660 + 8;
  uint64_t v10 = (uint64_t)&v667;
LABEL_482:
  uint64_t v242 = v648;
  if (!v648)
  {
    sub_1CC27B470((uint64_t)&v630, &v648);
    uint64_t v242 = v648;
  }
  uint64_t v0 = *((void *)v630 + v242);
  unint64_t v243 = (char *)v594;
  if (v594 == v593)
  {
    unsigned int v244 = 0;
    int v596 = 0;
    HIDWORD(v595) = 0;
LABEL_486:
    unint64_t v245 = v243;
    goto LABEL_487;
  }
  if (v595 < 0x21 || 4 * (HIDWORD(v595) - v596) >= v595)
  {
    memset(v594, 255, 8 * v595);
    unsigned int v244 = 0;
    unint64_t v243 = (char *)v593;
    unint64_t v245 = (char *)v594;
    int v596 = 0;
    HIDWORD(v595) = 0;
    if (v594 == v593) {
      goto LABEL_486;
    }
LABEL_672:
    unsigned int v246 = v595;
    goto LABEL_673;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v593);
  unsigned int v244 = HIDWORD(v595);
  unint64_t v245 = (char *)v594;
  if (v594 != v593) {
    goto LABEL_672;
  }
  unint64_t v243 = (char *)v594 + 8 * HIDWORD(v595);
  if (!HIDWORD(v595))
  {
LABEL_487:
    unsigned int v246 = v595;
    if (v244 < v595)
    {
      HIDWORD(v595) = v244 + 1;
      *(void *)unint64_t v243 = v0;
      goto LABEL_489;
    }
LABEL_673:
    if (3 * v246 <= 4 * (v244 - v596))
    {
      if (v246 >= 0x40) {
        v246 *= 2;
      }
      else {
        unsigned int v246 = 128;
      }
    }
    else if (v246 - v244 >= v246 >> 3)
    {
      goto LABEL_675;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v593, v246);
    unsigned int v246 = v595;
    unint64_t v245 = (char *)v594;
LABEL_675:
    unsigned int v315 = v246 - 1;
    unsigned int v316 = (v246 - 1) & ((v0 >> 4) ^ (v0 >> 9));
    uint64_t v317 = &v245[8 * v316];
    uint64_t v318 = *(void *)v317;
    if (*(void *)v317 == -1)
    {
      v319 = 0;
LABEL_687:
      if (v319) {
        uint64_t v323 = v319;
      }
      else {
        uint64_t v323 = (uint64_t *)v317;
      }
      if (*v323 != v0)
      {
        if (*v323 == -2) {
          --v596;
        }
        else {
          ++HIDWORD(v595);
        }
        *uint64_t v323 = v0;
      }
    }
    else
    {
      v319 = 0;
      int v320 = 1;
      while (v318 != v0)
      {
        if (v319) {
          BOOL v321 = 0;
        }
        else {
          BOOL v321 = v318 == -2;
        }
        if (v321) {
          v319 = (uint64_t *)v317;
        }
        unsigned int v322 = v316 + v320++;
        unsigned int v316 = v322 & v315;
        uint64_t v317 = &v245[8 * (v322 & v315)];
        uint64_t v318 = *(void *)v317;
        if (*(void *)v317 == -1) {
          goto LABEL_687;
        }
      }
    }
    goto LABEL_489;
  }
  uint64_t v324 = 0;
  unint64_t v325 = 0;
  while (1)
  {
    uint64_t v326 = *(void *)((char *)v594 + v324);
    if (v326 == v0) {
      break;
    }
    if (v326 == -2) {
      unint64_t v325 = (uint64_t *)((char *)v594 + v324);
    }
    v324 += 8;
    if (8 * HIDWORD(v595) == v324)
    {
      if (!v325) {
        goto LABEL_487;
      }
      *unint64_t v325 = v0;
      --v596;
      break;
    }
  }
LABEL_489:
  if (*(void *)(*(void *)(v0 + 40) + 40) != *(void *)(v0 + 40) + 40)
  {
    for (uint64_t k = *(void *)(*(void *)(v0 + 40) + 48); ; uint64_t k = *(void *)(v10 + 32))
    {
      uint64_t v10 = k - 24;
      if (k) {
        uint64_t v248 = k - 24;
      }
      else {
        uint64_t v248 = 0;
      }
      if (!k || *(unsigned char *)(v248 + 16) != 83) {
        goto LABEL_637;
      }
      if ((sub_1CC27B548((uint64_t)v646, k - 24, &v659) & 1) == 0) {
        break;
      }
LABEL_635:
      ;
    }
    v666 = v668;
    uint64_t v667 = 0x800000000;
    v659 = (void *)v0;
    *(void *)&long long v660 = v10;
    sub_1CC27B5F4((uint64_t)&v654, (uint64_t *)&v659);
    char v600 = (void **)v604;
    unint64_t v601 = v604;
    int v603 = 0;
    uint64_t v602 = 0x100000008;
    v604[0] = v0;
    if (v667 >= (unint64_t)HIDWORD(v667)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    char v249 = (uint64_t *)((char *)v666 + 16 * v667);
    *char v249 = v0;
    v249[1] = v10;
    v659 = (char *)&v660 + 8;
    *(void *)&long long v660 = 0x800000000;
    v664 = 0;
    uint64_t v665 = 0;
    v663 = &v664;
    BOOL v109 = __CFADD__(v667, 1);
    unsigned int v250 = v667 + 1;
    LODWORD(v667) = v667 + 1;
    if (v109)
    {
      char v251 = 1;
      goto LABEL_585;
    }
    while (1)
    {
      unint64_t v252 = (char *)v666 + 16 * v250;
      unint64_t v254 = *((void *)v252 - 2);
      unint64_t v253 = *((void *)v252 - 1);
      LODWORD(v667) = v250 - 1;
      *(void *)&long long v599 = v254;
      *((void *)&v599 + 1) = v253;
      if (v665)
      {
        if ((sub_1CD50F484((uint64_t)&v663, v254, v253, &v599) & 1) == 0) {
          goto LABEL_569;
        }
      }
      else
      {
        unsigned int v255 = v660;
        if (v660)
        {
          uint64_t v284 = 16 * v660;
          uint64_t v285 = (char *)v659 + 8;
          while (*(v285 - 1) != v254 || *v285 != v253)
          {
            v285 += 2;
            v284 -= 16;
            if (!v284) {
              goto LABEL_577;
            }
          }
          if (v284) {
            goto LABEL_569;
          }
LABEL_577:
          if (v660 < 8) {
            goto LABEL_503;
          }
          do
          {
            sub_1CD50F484((uint64_t)&v663, *((void *)v659 + 2 * v255 - 2), *((void *)v659 + 2 * v255 - 1), (_OWORD *)v659 + v255 - 1);
            unsigned int v255 = v660 - 1;
            LODWORD(v660) = v660 - 1;
          }
          while (v660);
          sub_1CD50F484((uint64_t)&v663, v254, v253, &v599);
        }
        else
        {
LABEL_503:
          if (v660 >= DWORD1(v660)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v256 = (unint64_t *)((char *)v659 + 16 * v660);
          unint64_t *v256 = v254;
          v256[1] = v253;
          LODWORD(v660) = v660 + 1;
        }
      }
      int v257 = *(_DWORD *)(v254 + 20);
      if ((v257 & 0x40000000) != 0)
      {
        unint64_t v259 = *(void *)(v254 - 8);
        uint64_t v258 = v257 & 0x7FFFFFF;
        if (v258)
        {
LABEL_509:
          uint64_t v260 = (uint64_t *)(v259 + 32 * *(unsigned int *)(v254 + 60));
          uint64_t v261 = &v260[v258];
          while (2)
          {
            uint64_t v262 = *v260;
            uint64_t v263 = sub_1CBF73380(v254, *v260);
            uint64_t v264 = sub_1CBF73380(*((uint64_t *)&v599 + 1), v262);
            if (v263 != v264)
            {
              if (*(unsigned char *)(v263 + 16) == 83) {
                uint64_t v265 = v263;
              }
              else {
                uint64_t v265 = 0;
              }
              if (*(unsigned char *)(v264 + 16) == 83) {
                uint64_t v266 = v264;
              }
              else {
                uint64_t v266 = 0;
              }
              if (v265) {
                BOOL v267 = v266 == 0;
              }
              else {
                BOOL v267 = 1;
              }
              if (v267
                || !sub_1CC27B548((uint64_t)v646, v265, v598)
                || *(void *)(v265 + 40) != *(void *)(v266 + 40))
              {
                char v251 = 0;
LABEL_584:
                int v7 = (void **)v604;
LABEL_585:
                sub_1CBC0FD34(v664);
                if (v659 != (char *)&v660 + 8) {
                  free(v659);
                }
                if (v601 != v600) {
                  free(v601);
                }
                if (v666 != v668) {
                  free(v666);
                }
                unsigned int v85 = (void **)v656;
                uint64_t v5 = (uint64_t)v656 + 16 * v657;
                if ((v251 & 1) == 0)
                {
                  if (!v657)
                  {
LABEL_634:
                    sub_1CC27B820((unsigned int *)&v654);
                    LODWORD(v657) = 0;
                    goto LABEL_635;
                  }
                  uint64_t v287 = v594;
                  while (2)
                  {
                    v288 = *v85;
                    uint64_t v289 = HIDWORD(v595);
                    if (v287 == v593)
                    {
                      if (HIDWORD(v595))
                      {
                        uint64_t v290 = 0;
                        uint64_t v291 = 8 * HIDWORD(v595);
                        int v292 = v287;
                        while ((void *)*v292 != v288)
                        {
                          if (*v292 == -2) {
                            uint64_t v290 = v292;
                          }
                          ++v292;
                          v291 -= 8;
                          if (!v291)
                          {
                            if (!v290) {
                              goto LABEL_602;
                            }
                            *uint64_t v290 = v288;
                            --v596;
                            break;
                          }
                        }
LABEL_626:
                        uint64_t v287 = v594;
                        v85 += 2;
                        if (v85 == (void **)v5) {
                          goto LABEL_634;
                        }
                        continue;
                      }
LABEL_602:
                      unsigned int v293 = v595;
                      if (HIDWORD(v595) < v595)
                      {
                        ++HIDWORD(v595);
                        v287[v289] = v288;
                        goto LABEL_626;
                      }
                    }
                    else
                    {
                      unsigned int v293 = v595;
                    }
                    break;
                  }
                  if (3 * v293 <= 4 * (HIDWORD(v595) - v596))
                  {
                    if (v293 >= 0x40) {
                      v293 *= 2;
                    }
                    else {
                      unsigned int v293 = 128;
                    }
                  }
                  else if (v293 - HIDWORD(v595) >= v293 >> 3)
                  {
                    goto LABEL_607;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v593, v293);
                  unsigned int v293 = v595;
                  uint64_t v287 = v594;
LABEL_607:
                  unsigned int v294 = v293 - 1;
                  unsigned int v295 = (v293 - 1) & ((v288 >> 4) ^ (v288 >> 9));
                  unint64_t v296 = (void **)&v287[v295];
                  int v297 = *v296;
                  if (*v296 == (void *)-1)
                  {
                    uint64_t v298 = 0;
LABEL_619:
                    if (v298) {
                      uint64_t v302 = v298;
                    }
                    else {
                      uint64_t v302 = v296;
                    }
                    if (*v302 != v288)
                    {
                      if (*v302 == (void *)-2) {
                        --v596;
                      }
                      else {
                        ++HIDWORD(v595);
                      }
                      void *v302 = v288;
                    }
                  }
                  else
                  {
                    uint64_t v298 = 0;
                    int v299 = 1;
                    while (v297 != v288)
                    {
                      if (v298) {
                        BOOL v300 = 0;
                      }
                      else {
                        BOOL v300 = v297 == (void *)-2;
                      }
                      if (v300) {
                        uint64_t v298 = v296;
                      }
                      unsigned int v301 = v295 + v299++;
                      unsigned int v295 = v301 & v294;
                      unint64_t v296 = (void **)&v287[v301 & v294];
                      int v297 = *v296;
                      if (*v296 == (void *)-1) {
                        goto LABEL_619;
                      }
                    }
                  }
                  goto LABEL_626;
                }
                uint64_t v10 = (uint64_t)&v667;
                if (v657)
                {
                  unsigned int v311 = *(llvm::Value **)v656;
                  unsigned int v312 = (llvm::Value *)*((void *)v656 + 1);
                  while (1)
                  {
                    uint64_t v313 = sub_1CC27B270((uint64_t)&v627, (uint64_t)v311);
                    if ((llvm::Value *)v313 == v311) {
                      break;
                    }
                    unsigned int v311 = v312;
                    if (*(unsigned char *)(v313 + 16) == 83) {
                      unsigned int v312 = (llvm::Value *)v313;
                    }
                    else {
                      unsigned int v312 = 0;
                    }
                  }
                  v666 = v311;
                  uint64_t v667 = (uint64_t)v312;
                  sub_1CC27B388((uint64_t)&v627, &v666, &v667, (uint64_t)&v659);
                  llvm::Value::doRAUW(v311, v312, (llvm::Value *)1);
                  if (sub_1CC27B41C(v646, (uint64_t)v311)) {
                    sub_1CC27B470((uint64_t)&v630, &v648);
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                sub_1CC27B820((unsigned int *)&v654);
                LODWORD(v657) = 0;
LABEL_664:
                if (LODWORD(v646[0]) <= 1)
                {
                  char v181 = 1;
                  uint64_t v303 = v594;
                  goto LABEL_709;
                }
                goto LABEL_482;
              }
              if ((sub_1CC27B728((uint64_t)&v654, v265, v266, v598) & 1) == 0)
              {
                uint64_t v268 = (char *)v601;
                uint64_t v269 = HIDWORD(v602);
                if (v601 == v600)
                {
                  if (HIDWORD(v602))
                  {
                    unsigned int v270 = 0;
                    uint64_t v271 = 8 * HIDWORD(v602);
                    int v272 = (uint64_t *)v601;
                    while (*v272 != v265)
                    {
                      if (*v272 == -2) {
                        unsigned int v270 = v272;
                      }
                      ++v272;
                      v271 -= 8;
                      if (!v271)
                      {
                        if (!v270) {
                          goto LABEL_532;
                        }
                        *unsigned int v270 = v265;
                        --v603;
                        goto LABEL_556;
                      }
                    }
                    goto LABEL_557;
                  }
LABEL_532:
                  unsigned int v273 = v602;
                  if (HIDWORD(v602) < v602)
                  {
                    ++HIDWORD(v602);
                    *((void *)v601 + v269) = v265;
LABEL_556:
                    v598[0] = v265;
                    v598[1] = v266;
                    sub_1CC27B5F4((uint64_t)&v654, v598);
                    goto LABEL_557;
                  }
                }
                else
                {
                  unsigned int v273 = v602;
                }
                if (3 * v273 <= 4 * (HIDWORD(v602) - v603))
                {
                  if (v273 >= 0x40) {
                    v273 *= 2;
                  }
                  else {
                    unsigned int v273 = 128;
                  }
                }
                else if (v273 - HIDWORD(v602) >= v273 >> 3)
                {
                  goto LABEL_537;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v600, v273);
                unsigned int v273 = v602;
                uint64_t v268 = (char *)v601;
LABEL_537:
                unsigned int v274 = v273 - 1;
                unsigned int v275 = (v273 - 1) & ((v265 >> 4) ^ (v265 >> 9));
                unsigned int v276 = &v268[8 * v275];
                uint64_t v277 = *(void *)v276;
                if (*(void *)v276 != -1)
                {
                  uint64_t v278 = 0;
                  int v279 = 1;
                  while (v277 != v265)
                  {
                    if (v278) {
                      BOOL v280 = 0;
                    }
                    else {
                      BOOL v280 = v277 == -2;
                    }
                    if (v280) {
                      uint64_t v278 = (uint64_t *)v276;
                    }
                    unsigned int v281 = v275 + v279++;
                    unsigned int v275 = v281 & v274;
                    unsigned int v276 = &v268[8 * (v281 & v274)];
                    uint64_t v277 = *(void *)v276;
                    if (*(void *)v276 == -1) {
                      goto LABEL_549;
                    }
                  }
                  goto LABEL_557;
                }
                uint64_t v278 = 0;
LABEL_549:
                if (v278) {
                  int v282 = v278;
                }
                else {
                  int v282 = (uint64_t *)v276;
                }
                if (*v282 != v265)
                {
                  if (*v282 == -2) {
                    --v603;
                  }
                  else {
                    ++HIDWORD(v602);
                  }
                  uint64_t *v282 = v265;
                  goto LABEL_556;
                }
LABEL_557:
                if (v667 >= (unint64_t)HIDWORD(v667)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v283 = (uint64_t *)((char *)v666 + 16 * v667);
                uint64_t *v283 = v265;
                v283[1] = v266;
                LODWORD(v667) = v667 + 1;
              }
            }
            if (++v260 == v261) {
              break;
            }
            continue;
          }
        }
      }
      else
      {
        uint64_t v258 = v257 & 0x7FFFFFF;
        unint64_t v259 = v254 - 32 * v258;
        if (v258) {
          goto LABEL_509;
        }
      }
LABEL_569:
      unsigned int v250 = v667;
      if (!v667)
      {
        char v251 = 1;
        goto LABEL_584;
      }
    }
  }
LABEL_637:
  uint64_t v303 = v594;
  if (v570)
  {
    uint64_t v304 = (uint64_t *)((char *)&v595 + 4);
    if (v594 != v593) {
      uint64_t v304 = &v595;
    }
    uint64_t v305 = *(unsigned int *)v304;
    if (v305)
    {
      uint64_t v306 = 8 * v305;
      uint64_t v307 = (uint64_t *)v594;
      while ((unint64_t)*v307 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v307;
        v306 -= 8;
        if (!v306) {
          goto LABEL_664;
        }
      }
    }
    else
    {
      uint64_t v307 = (uint64_t *)v594;
    }
    unsigned int v85 = (void **)((char *)v594 + 8 * v305);
    if (v307 != (uint64_t *)v85)
    {
      uint64_t v308 = *v307;
LABEL_648:
      if (sub_1CC27B41C(v646, v308)) {
        sub_1CC27B470((uint64_t)&v630, &v648);
      }
      unsigned int v309 = (unint64_t *)(v307 + 1);
      while (v309 != (unint64_t *)v85)
      {
        unint64_t v310 = *v309++;
        uint64_t v308 = v310;
        if (v310 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v307 = (uint64_t *)(v309 - 1);
          goto LABEL_648;
        }
      }
    }
    goto LABEL_664;
  }
  char v181 = 0;
LABEL_709:
  if (v303 != v593) {
    free(v303);
  }
LABEL_711:
  if (v656 != v658) {
    free(v656);
  }
  if ((v654 & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](*((void *)&v654 + 1), 8);
    if (v181) {
      goto LABEL_715;
    }
LABEL_723:
    sub_1CC27AFD4((uint64_t)&v627, v616);
    uint64_t v329 = 0;
    goto LABEL_724;
  }
  if ((v181 & 1) == 0) {
    goto LABEL_723;
  }
LABEL_715:
  v659 = v618;
  *(void *)&long long v654 = 0;
  int v327 = sub_1CBA0E618((uint64_t)v591, &v659, &v654);
  uint64_t v328 = v654;
  if (!v327) {
    uint64_t v328 = v591[0] + 16 * v592;
  }
  uint64_t v329 = sub_1CC27B270((uint64_t)&v627, *(void *)(v328 + 8));
LABEL_724:
  if (v625[0] != v626) {
    free(v625[0]);
  }
  if (v650 != v649) {
    free(v650);
  }
  if ((v646[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v646[1], 8);
  }
  if (v630 != &v632) {
    free(v630);
  }
  MEMORY[0x1D25D9CD0](v627, 8);
  if (!v329) {
    goto LABEL_735;
  }
  int v332 = v611;
  switch(v614)
  {
    case 2u:
      *((void *)v611 + 4) = v329;
      *int v332 = 0;
      goto LABEL_745;
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      __break(1u);
      goto LABEL_1190;
    case 4u:
      *((void *)v611 + 5) = v329;
      v332[3] = 1;
      v332[1] = 0;
      goto LABEL_745;
    case 8u:
      *((void *)v611 + 5) = v329;
      if (v332[3] || !v612) {
        goto LABEL_745;
      }
      uint64_t v333 = v332 + 3;
      unint64_t v334 = (unint64_t)v612 << 6;
      break;
    default:
      *((void *)v611 + 4) = v329;
      goto LABEL_745;
  }
  while (1)
  {
    uint64_t v336 = *v333;
    v333 += 8;
    uint64_t v335 = v336;
    if (v336) {
      break;
    }
    v334 -= 64;
    if (!v334) {
      goto LABEL_745;
    }
  }
  v332[3] = v335;
LABEL_745:
  MEMORY[0x1D25D9CD0](v591[0], 8);
  LOBYTE(v6) = v567;
LABEL_746:
  uint64_t v0 = sub_1CC274054((uint64_t)&v608);
  int v338 = *(unsigned __int8 **)v611;
  uint64_t v337 = (void **)*((void *)v611 + 1);
  int v7 = (void **)*((void *)v611 + 3);
  uint64_t v339 = (unsigned __int8 *)*((void *)v611 + 4);
  LOBYTE(v5) = *((unsigned char *)v611 + 56);
  if (v6)
  {
    BOOL v580 = (unsigned __int8 *)*((void *)v611 + 5);
    uint64_t v340 = v583;
    uint64_t v341 = *((void *)v583 + 5);
  }
  else
  {
    uint64_t v340 = v583;
    if (!v620) {
      goto LABEL_823;
    }
    int v351 = (char *)v619;
    uint64_t v352 = 8 * v620;
    while (1)
    {
      if (*(void *)v351 && *(unsigned __int8 *)(*(void *)v351 + 16) >= 0x1Cu)
      {
        uint64_t v341 = *((void *)v583 + 5);
        if (*(void *)(*(void *)v351 + 40) != v341) {
          break;
        }
      }
      v351 += 8;
      v352 -= 8;
      if (!v352) {
        goto LABEL_823;
      }
    }
    BOOL v580 = (unsigned __int8 *)*((void *)v611 + 5);
  }
  uint64_t v342 = 0;
  uint64_t v343 = **(uint64_t ***)v340;
  uint64_t v82 = (char *)&v628 + 8;
  uint64_t v627 = (char *)&v628 + 8;
  *(void *)&long long v628 = 0x200000000;
  uint64_t v633 = v343;
  unint64_t v634 = &v640;
  long long v635 = &v641;
  long long v636 = 0;
  LODWORD(v637) = 0;
  WORD2(v637) = 512;
  BYTE6(v637) = 7;
  unint64_t v639 = 0;
  uint64_t v638 = 0;
  int v640 = (void **)&unk_1F2616E88;
  uint64_t v641 = (void **)&unk_1F2617008;
  *(void *)&long long v632 = v341;
  *((void *)&v632 + 1) = (char *)v340 + 24;
  uint64_t v344 = (void *)*((void *)v340 + 6);
  v659 = v344;
  if (v344)
  {
    llvm::MetadataTracking::track((uint64_t)&v659, (unsigned __int8 *)v344, 2);
    uint64_t v342 = v659;
  }
  sub_1CB8461A4((uint64_t)&v627, 0, (uint64_t)v342);
  if (!v659) {
    goto LABEL_751;
  }
  int v455 = *(unsigned __int8 *)v659;
  if ((v455 - 4) > 0x1E)
  {
    if ((v455 - 3) >= 0xFFFFFFFE) {
      uint64_t v498 = v659;
    }
    else {
      uint64_t v498 = 0;
    }
    if ((v455 - 3) < 0xFFFFFFFE)
    {
      if (v455 == 3) {
        *((void *)v659 + 1) = 0;
      }
      goto LABEL_751;
    }
    unint64_t v457 = (unint64_t)v498 + 8;
  }
  else
  {
    if ((*((unsigned char *)v659 + 1) & 0x7F) != 2 && !*((_DWORD *)v659 + 3)) {
      goto LABEL_751;
    }
    uint64_t v456 = *((void *)v659 + 2);
    if ((v456 & 4) == 0) {
      goto LABEL_751;
    }
    unint64_t v457 = v456 & 0xFFFFFFFFFFFFFFF8;
    if (!v457) {
      goto LABEL_751;
    }
  }
  *(void *)&long long v654 = &v659;
  sub_1CC5FA668(v457 + 16, &v654);
LABEL_751:
  unsigned int v85 = (void **)(v572 + 128);
  unint64_t v345 = sub_1CC277C98((_DWORD *)(v572 + 128), v571);
  v625[0] = (void *)6;
  v625[1] = 0;
  uint64_t v347 = v345[2];
  v626[0] = v347;
  if (v347 != -8192 && v347 != -4096 && v347)
  {
    unint64_t v348 = *v345 & 0xFFFFFFFFFFFFFFF8;
    v625[1] = *(void **)v348;
    *(void *)unint64_t v348 = v625;
    v625[0] = (void *)(v348 | 6);
    if (v625[1]) {
      *(void *)v625[1] = *(void *)v625[1] & 7 | (unint64_t)&v625[1];
    }
    uint64_t v347 = v626[0];
  }
  if (v347 == -8192 || v347 == -4096 || !v347)
  {
    uint64_t v349 = 0;
    int v350 = 0;
    *(void *)v655 = 0;
    long long v654 = 6uLL;
  }
  else
  {
    *((void *)&v654 + 1) = 0;
    *(void *)v655 = v347;
    unint64_t v354 = (unint64_t)v625[0] & 0xFFFFFFFFFFFFFFF8;
    *((void *)&v654 + 1) = *(void *)((unint64_t)v625[0] & 0xFFFFFFFFFFFFFFF8);
    *(void *)unint64_t v354 = &v654;
    *(void *)&long long v654 = v354 | 6;
    uint64_t v349 = *((void *)&v654 + 1);
    if (*((void *)&v654 + 1)) {
      **((void **)&v654 + 1) = **((void **)&v654 + 1) & 7 | ((unint64_t)&v654 + 8);
    }
    int v350 = *(unsigned __int8 **)v655;
  }
  if (v350 != (unsigned __int8 *)-8192 && v350 != (unsigned __int8 *)-4096 && v350)
  {
    unint64_t v355 = v654 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v654 & 0xFFFFFFFFFFFFFFF8) = v349;
    if (*((void *)&v654 + 1))
    {
      **((void **)&v654 + 1) = **((void **)&v654 + 1) & 7 | v355;
    }
    else
    {
      uint64_t v356 = *(void *)v655;
      int v357 = ****(int32x2_t *****)v655;
      unint64_t v358 = (unint64_t)v357[303];
      if (v358 <= v355)
      {
        uint64_t v359 = v357[305].u32[0];
        if (v358 + 16 * v359 > v355)
        {
          unsigned int v360 = v359 - 1;
          LODWORD(v361) = v360 & ((*(_DWORD *)v655 >> 4) ^ (*(_DWORD *)v655 >> 9));
          v362 = (uint64_t *)(v358 + 16 * v361);
          uint64_t v363 = *v362;
          if (*(void *)v655 == *v362)
          {
LABEL_785:
            uint64_t *v362 = -8192;
            v357[304] = vadd_s32(v357[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v356 = *(void *)v655;
          }
          else
          {
            int v364 = 1;
            while (v363 != -4096)
            {
              int v365 = v361 + v364++;
              uint64_t v361 = v365 & v360;
              uint64_t v363 = *(void *)(v358 + 16 * v361);
              if (*(void *)v655 == v363)
              {
                v362 = (uint64_t *)(v358 + 16 * v361);
                goto LABEL_785;
              }
            }
          }
          *(unsigned char *)(v356 + 17) &= ~1u;
        }
      }
    }
  }
  if (v350)
  {
    uint64_t v366 = (uint64_t *)v571;
    v367 = *v571;
    if (*(int32x2_t ****)v350 == *v571)
    {
LABEL_793:
      uint64_t v369 = (void *)v572;
      goto LABEL_794;
    }
    *(_WORD *)&v655[16] = 257;
    uint64_t v368 = sub_1CC277FE0((uint64_t)&v627, (llvm::CastInst *)v350, (llvm::Value *)v367, (uint64_t)&v654, v346);
LABEL_792:
    int v350 = (unsigned __int8 *)v368;
    goto LABEL_793;
  }
  if (!byte_1EBCC94C8
    && (word_1EBCC9450
     || !(*(unsigned int (**)(void))(**(void **)(v572 + 40) + 376))(*(void *)(v572 + 40))))
  {
    if (v339) {
      uint64_t v439 = *(void *)v339;
    }
    else {
      uint64_t v439 = 0;
    }
    uint64_t v369 = (void *)v572;
    if (v7) {
      uint64_t v458 = *(void *)v580;
    }
    else {
      uint64_t v458 = 0;
    }
    if (v439)
    {
      if (*(unsigned char *)(v439 + 8) == 15) {
        uint64_t v459 = v439;
      }
      else {
        uint64_t v459 = 0;
      }
    }
    else
    {
      uint64_t v459 = 0;
    }
    if (v458)
    {
      if (*(unsigned char *)(v458 + 8) == 15) {
        uint64_t v460 = v458;
      }
      else {
        uint64_t v460 = 0;
      }
    }
    else
    {
      uint64_t v460 = 0;
    }
    if (sub_1CBFB72C8(*(void *)(v572 + 720), (uint64_t)*v571)) {
      goto LABEL_815;
    }
    if (v459)
    {
      uint64_t v461 = *(void *)(v572 + 720);
      __int32 v462 = *(_DWORD *)(v459 + 8) >> 8;
      unsigned int v463 = *(__int32 **)(v461 + 384);
      size_t v464 = *(unsigned int *)(v461 + 392);
      unint64_t v465 = wmemchr(v463, v462, v464);
      unint64_t v466 = v465 ? v465 : &v463[v464];
      BOOL v23 = v464 == v466 - v463;
      uint64_t v369 = (void *)v572;
      if (!v23) {
        goto LABEL_815;
      }
    }
    if (v460)
    {
      uint64_t v467 = v369[90];
      uint64_t v468 = *(__int32 **)(v467 + 384);
      size_t v469 = *(unsigned int *)(v467 + 392);
      v470 = wmemchr(v468, *(_DWORD *)(v460 + 8) >> 8, v469);
      uint64_t v471 = v470 ? v470 : &v468[v469];
      BOOL v23 = v469 == v471 - v468;
      uint64_t v369 = (void *)v572;
      if (!v23) {
        goto LABEL_815;
      }
    }
    if (v338)
    {
      uint64_t v472 = v369[90];
      uint64_t v473 = *(__int32 **)(v472 + 384);
      size_t v474 = *(unsigned int *)(v472 + 392);
      unsigned int v475 = wmemchr(v473, *(_DWORD *)(*(void *)v338 + 8) >> 8, v474);
      uint64_t v476 = v475 ? v475 : &v473[v474];
      BOOL v23 = v474 == v476 - v473;
      uint64_t v369 = (void *)v572;
      if (!v23) {
        goto LABEL_815;
      }
    }
    uint64_t v477 = v369[90];
    int v478 = *v571;
    unsigned int v479 = *((_DWORD *)*v571 + 2);
    if ((v479 & 0xFE) == 0x12) {
      unsigned int v479 = (*v478[2])[1].u32[0];
    }
    uint64_t v480 = *(void *)(v477 + 232);
    unsigned int v85 = (void **)(v572 + 128);
    if (v479 < 0x100) {
      goto LABEL_996;
    }
    unsigned int v481 = v479 >> 8;
    unint64_t v482 = *(unsigned int *)(v477 + 240);
    uint64_t v483 = *(void *)(v477 + 232);
    if (v482)
    {
      uint64_t v483 = v480;
      unint64_t v484 = v482;
      do
      {
        unint64_t v485 = v484 >> 1;
        uint64_t v486 = v483 + 16 * (v484 >> 1);
        unsigned int v487 = *(_DWORD *)(v486 + 8);
        uint64_t v488 = v486 + 16;
        v484 += ~(v484 >> 1);
        if (v487 < v481) {
          uint64_t v483 = v488;
        }
        else {
          unint64_t v484 = v485;
        }
      }
      while (v484);
    }
    if (v483 == v480 + 16 * v482 || *(_DWORD *)(v483 + 8) != v481) {
LABEL_996:
    }
      uint64_t v483 = v480;
    v489 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v478, (llvm::LLVMContext *)*(unsigned int *)(v483 + 4));
    uint64_t v493 = (uint64_t)v489;
    if ((v478[1] & 0xFE) == 0x12)
    {
      unint64_t v551 = (llvm::Type *)*((unsigned int *)v478 + 8);
      if (*((_DWORD *)v478 + 2) == 19) {
        llvm::ScalableVectorType::get(v489, v551);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v489, v551);
      }
      uint64_t v493 = v552;
      uint64_t v369 = (void *)v572;
      unsigned int v85 = (void **)(v572 + 128);
    }
    uint64_t v494 = v493;
    if (!v339)
    {
      int v350 = 0;
      goto LABEL_1085;
    }
    uint64_t v495 = *(void *)v339;
    if (*(unsigned char *)(*(void *)v339 + 8) != 15)
    {
      int v350 = v339;
      goto LABEL_1083;
    }
    v659 = "sunkaddr";
    __int16 v662 = 259;
    if (*(void *)v339 == v493)
    {
      int v350 = v339;
      goto LABEL_1082;
    }
    if (v339[16] <= 0x14u)
    {
      int v350 = (unsigned __int8 *)((uint64_t (*)(void ***, uint64_t, unsigned __int8 *, uint64_t))(*v634)[28])(v634, 47, v339, v493);
      if (v350) {
        BOOL v520 = v350[16] >= 0x1Cu;
      }
      else {
        BOOL v520 = 0;
      }
      if (!v520) {
        goto LABEL_1081;
      }
      ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v350, &v659, v632, *((void *)&v632 + 1));
      if (v628)
      {
        unsigned int v562 = (llvm::MDNode **)v627;
        uint64_t v563 = (llvm::MDNode **)((char *)v627 + 16 * v628);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v350, *(_DWORD *)v562, v562[1]);
          v562 += 2;
        }
        while (v562 != v563);
      }
      uint64_t v369 = (void *)v572;
    }
    else
    {
      *(_WORD *)&v655[16] = 257;
      int v350 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v339, v493, (const char **)&v654, 0);
      ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v350, &v659, v632, *((void *)&v632 + 1));
      if (v628)
      {
        uint64_t v547 = (llvm::MDNode **)v627;
        unint64_t v576 = (llvm::MDNode **)((char *)v627 + 16 * v628);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v350, *(_DWORD *)v547, v547[1]);
          v547 += 2;
        }
        while (v547 != v576);
      }
    }
    unsigned int v85 = (void **)(v572 + 128);
LABEL_1081:
    uint64_t v493 = v494;
LABEL_1082:
    uint64_t v495 = *(void *)v350;
LABEL_1083:
    if (v495 != v493)
    {
      *(void *)&long long v654 = "sunkaddr";
      *(_WORD *)&v655[16] = 259;
      uint64_t v521 = sub_1CBF56614((uint64_t)&v627, (llvm::CastInst *)v350, (llvm::Type ***)v493, (llvm::Type *)1, (uint64_t)&v654, v492);
      uint64_t v493 = v494;
      int v350 = (unsigned __int8 *)v521;
    }
LABEL_1085:
    if (!v7)
    {
      unint64_t v522 = (unint64_t)v337;
      uint64_t v366 = (uint64_t *)v571;
      goto LABEL_1129;
    }
    if (*(void *)v580 == v493)
    {
      unint64_t v522 = (unint64_t)v337;
    }
    else if (*(_DWORD *)(*(void *)v580 + 8) == 15)
    {
      unint64_t v522 = (unint64_t)v337;
      v659 = "sunkaddr";
      __int16 v662 = 259;
      v491 = (const llvm::APFloat *)v580;
      if (*(void *)v580 != v493)
      {
        uint64_t v366 = (uint64_t *)v571;
        if (v580[16] > 0x14u)
        {
          *(_WORD *)&v655[16] = 257;
          BOOL v580 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v580, v493, (const char **)&v654, 0);
          ((void (*)(void ***))(*v635)[2])(v635);
          if (v628)
          {
            unsigned int v523 = (llvm::MDNode **)v627;
            uint64_t v524 = (llvm::MDNode **)((char *)v627 + 16 * v628);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v580, *(_DWORD *)v523, v523[1]);
              v523 += 2;
            }
            while (v523 != v524);
          }
          goto LABEL_1101;
        }
        uint64_t v526 = ((uint64_t (*)(void ***, uint64_t))(*v634)[28])(v634, 47);
        BOOL v580 = (unsigned __int8 *)v526;
        if (v526) {
          BOOL v527 = *(unsigned __int8 *)(v526 + 16) >= 0x1Cu;
        }
        else {
          BOOL v527 = 0;
        }
        if (!v527) {
          goto LABEL_1122;
        }
        ((void (*)(void ***, uint64_t, void **, void, void))(*v635)[2])(v635, v526, &v659, v632, *((void *)&v632 + 1));
        if (v628)
        {
          uint64_t v528 = (llvm::MDNode **)v627;
          unint64_t v529 = (llvm::MDNode **)((char *)v627 + 16 * v628);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v580, *(_DWORD *)v528, v528[1]);
            v528 += 2;
          }
          while (v528 != v529);
        }
LABEL_1203:
        uint64_t v369 = (void *)v572;
        uint64_t v366 = (uint64_t *)v571;
LABEL_1101:
        unsigned int v85 = (void **)(v572 + 128);
LABEL_1122:
        uint64_t v493 = v494;
        goto LABEL_1123;
      }
    }
    else
    {
      if (*(_DWORD *)(v493 + 8) >> 8 >= *(_DWORD *)(*(void *)v580 + 8) >> 8)
      {
        if (v350)
        {
          unsigned int v525 = v350[16] <= 0x1Bu ? 0 : v350;
          if (v525 && v350 != v339) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
        goto LABEL_815;
      }
      unint64_t v522 = (unint64_t)v337;
      v659 = "sunkaddr";
      __int16 v662 = 259;
      v491 = (const llvm::APFloat *)v580;
      if (*(void *)v580 != v493)
      {
        uint64_t v366 = (uint64_t *)v571;
        if (v580[16] > 0x14u)
        {
          *(_WORD *)&v655[16] = 257;
          BOOL v580 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v580, v493, (const char **)&v654, 0);
          ((void (*)(void ***))(*v635)[2])(v635);
          if (v628)
          {
            uint64_t v548 = (llvm::MDNode **)v627;
            uint64_t v549 = (llvm::MDNode **)((char *)v627 + 16 * v628);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v580, *(_DWORD *)v548, v548[1]);
              v548 += 2;
            }
            while (v548 != v549);
          }
          goto LABEL_1101;
        }
        uint64_t v530 = ((uint64_t (*)(void ***, uint64_t))(*v634)[28])(v634, 38);
        BOOL v580 = (unsigned __int8 *)v530;
        if (v530) {
          BOOL v531 = *(unsigned __int8 *)(v530 + 16) >= 0x1Cu;
        }
        else {
          BOOL v531 = 0;
        }
        if (!v531) {
          goto LABEL_1122;
        }
        ((void (*)(void ***, uint64_t, void **, void, void))(*v635)[2])(v635, v530, &v659, v632, *((void *)&v632 + 1));
        if (v628)
        {
          int v564 = (llvm::MDNode **)v627;
          int v565 = (llvm::MDNode **)((char *)v627 + 16 * v628);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v580, *(_DWORD *)v564, v564[1]);
            v564 += 2;
          }
          while (v564 != v565);
        }
        goto LABEL_1203;
      }
    }
    uint64_t v366 = (uint64_t *)v571;
LABEL_1123:
    if (v7 != (void **)1)
    {
      uint64_t v532 = llvm::ConstantInt::get((llvm::ConstantInt *)v493, (unint64_t)v7, 0);
      *(void *)&long long v654 = "sunkaddr";
      *(_WORD *)&v655[16] = 259;
      BOOL v580 = (unsigned __int8 *)sub_1CC09A1EC((uint64_t)&v627, (uint64_t)v580, (uint64_t)v532, (uint64_t)&v654, 0, 0);
    }
    if (v350)
    {
      *(void *)&long long v654 = "sunkaddr";
      *(_WORD *)&v655[16] = 259;
      int v350 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v627, v350, (uint64_t)v580, (uint64_t)&v654, 0, 0);
    }
    else
    {
      int v350 = v580;
    }
    uint64_t v493 = v494;
LABEL_1129:
    if (!v338)
    {
LABEL_1143:
      if (v522)
      {
        uint64_t v535 = (const llvm::APFloat *)llvm::ConstantInt::get((llvm::ConstantInt *)v493, v522, 0);
        v491 = v535;
        if (v350)
        {
          *(void *)&long long v654 = "sunkaddr";
          *(_WORD *)&v655[16] = 259;
          int v350 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v627, v350, (uint64_t)v535, (uint64_t)&v654, 0, 0);
        }
        else
        {
          int v350 = (unsigned __int8 *)v535;
        }
      }
      uint64_t v536 = *v366;
      if (v350)
      {
        v659 = "sunkaddr";
        __int16 v662 = 259;
        if (*(void *)v350 != v536)
        {
          if (v350[16] <= 0x14u)
          {
            int v350 = (unsigned __int8 *)((uint64_t (*)(void ***, uint64_t, unsigned __int8 *, uint64_t))(*v634)[28])(v634, 48, v350, v536);
            if (v350) {
              BOOL v537 = v350[16] >= 0x1Cu;
            }
            else {
              BOOL v537 = 0;
            }
            if (!v537) {
              goto LABEL_794;
            }
            ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v350, &v659, v632, *((void *)&v632 + 1));
            if (v628)
            {
              unint64_t v556 = (llvm::MDNode **)v627;
              uint64_t v557 = (llvm::MDNode **)((char *)v627 + 16 * v628);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v350, *(_DWORD *)v556, v556[1]);
                v556 += 2;
              }
              while (v556 != v557);
            }
            uint64_t v369 = (void *)v572;
            uint64_t v366 = (uint64_t *)v571;
          }
          else
          {
            *(_WORD *)&v655[16] = 257;
            int v350 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v350, v536, (const char **)&v654, 0);
            ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v350, &v659, v632, *((void *)&v632 + 1));
            if (v628)
            {
              unsigned int v545 = (llvm::MDNode **)v627;
              unint64_t v546 = (llvm::MDNode **)((char *)v627 + 16 * v628);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v350, *(_DWORD *)v545, v545[1]);
                v545 += 2;
              }
              while (v545 != v546);
            }
          }
          unsigned int v85 = (void **)(v572 + 128);
        }
LABEL_794:
        llvm::User::replaceUsesOfWith(v583, (llvm::Value *)v366, (llvm::Value *)v350);
        long long v654 = 6uLL;
        *(void *)v655 = v350;
        if (v350 != (unsigned __int8 *)-8192 && v350 != (unsigned __int8 *)-4096 && v350) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v654);
        }
        int v370 = sub_1CC277C98(v85, (int32x2_t ****)v366);
        uint64_t v371 = v370[2];
        uint64_t v372 = *(void *)v655;
        if (v371 != *(void *)v655)
        {
          if (v371 != -4096 && v371 && v371 != -8192)
          {
            unint64_t v427 = *v370 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v427 = v370[1];
            uint64_t v428 = (unint64_t *)v370[1];
            if (v428)
            {
              *uint64_t v428 = *v428 & 7 | v427;
            }
            else
            {
              uint64_t v429 = v370[2];
              uint64_t v430 = ***(int32x2_t ****)v429;
              unint64_t v431 = (unint64_t)v430[303];
              if (v431 <= v427)
              {
                uint64_t v432 = v430[305].u32[0];
                if (v431 + 16 * v432 > v427)
                {
                  unsigned int v433 = v432 - 1;
                  LODWORD(v434) = v433 & ((v429 >> 4) ^ (v429 >> 9));
                  BOOL v435 = (uint64_t *)(v431 + 16 * v434);
                  uint64_t v436 = *v435;
                  if (v429 == *v435)
                  {
LABEL_903:
                    uint64_t *v435 = -8192;
                    v430[304] = vadd_s32(v430[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v429 = v370[2];
                  }
                  else
                  {
                    int v437 = 1;
                    while (v436 != -4096)
                    {
                      int v438 = v434 + v437++;
                      uint64_t v434 = v438 & v433;
                      uint64_t v436 = *(void *)(v431 + 16 * v434);
                      if (v429 == v436)
                      {
                        BOOL v435 = (uint64_t *)(v431 + 16 * v434);
                        goto LABEL_903;
                      }
                    }
                  }
                  *(unsigned char *)(v429 + 17) &= ~1u;
                }
              }
            }
            uint64_t v372 = *(void *)v655;
          }
          v370[2] = v372;
          if (v372 != -4096 && v372 != -8192 && v372 != 0)
          {
            uint64_t v374 = v654;
            int v375 = (void *)(v654 & 0xFFFFFFFFFFFFFFF8);
            v370[1] = *(void *)(v654 & 0xFFFFFFFFFFFFFFF8);
            *int v375 = v370;
            *int v370 = v374 & 0xFFFFFFFFFFFFFFF8 | *v370 & 7;
            unsigned int v376 = (unint64_t *)v370[1];
            if (v376) {
              *unsigned int v376 = *v376 & 7 | (unint64_t)(v370 + 1);
            }
          }
        }
        if (*(void *)v655 != -8192 && *(void *)v655 != -4096 && *(void *)v655 != 0)
        {
          unint64_t v416 = v654 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v654 & 0xFFFFFFFFFFFFFFF8) = *((void *)&v654 + 1);
          if (*((void *)&v654 + 1))
          {
            **((void **)&v654 + 1) = **((void **)&v654 + 1) & 7 | v416;
          }
          else
          {
            uint64_t v417 = *(void *)v655;
            v418 = ****(int32x2_t *****)v655;
            unint64_t v419 = (unint64_t)v418[303];
            if (v419 <= v416)
            {
              uint64_t v420 = v418[305].u32[0];
              if (v419 + 16 * v420 > v416)
              {
                unsigned int v421 = v420 - 1;
                LODWORD(v422) = v421 & ((*(_DWORD *)v655 >> 4) ^ (*(_DWORD *)v655 >> 9));
                uint64_t v423 = (uint64_t *)(v419 + 16 * v422);
                uint64_t v424 = *v423;
                if (*(void *)v655 == *v423)
                {
LABEL_891:
                  uint64_t *v423 = -8192;
                  v418[304] = vadd_s32(v418[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v417 = *(void *)v655;
                }
                else
                {
                  int v425 = 1;
                  while (v424 != -4096)
                  {
                    int v426 = v422 + v425++;
                    uint64_t v422 = v426 & v421;
                    uint64_t v424 = *(void *)(v419 + 16 * v422);
                    if (*(void *)v655 == v424)
                    {
                      uint64_t v423 = (uint64_t *)(v419 + 16 * v422);
                      goto LABEL_891;
                    }
                  }
                }
                *(unsigned char *)(v417 + 17) &= ~1u;
              }
            }
          }
        }
        if (!v366[1])
        {
          v399 = v85;
          uint64_t v400 = v369[15];
          if (v400) {
            uint64_t v401 = v400 - 24;
          }
          else {
            uint64_t v401 = 0;
          }
          uint64_t v402 = *(void *)(v401 + 40);
          v659 = (void *)6;
          *(void *)&long long v660 = 0;
          *((void *)&v660 + 1) = v401;
          if (v401 != -8192 && v401 != -4096 && v401 != 0) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v659);
          }
          uint64_t v404 = (uint64_t *)v369[9];
          *(void *)&long long v654 = &unk_1F2609F50;
          *((void *)&v654 + 1) = v369;
          *(void *)&v655[8] = &v654;
          llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v366, v404, 0, (uint64_t)&v654);
          if (*(long long **)&v655[8] == &v654)
          {
            (*(void (**)(long long *))(v654 + 32))(&v654);
          }
          else if (*(void *)&v655[8])
          {
            (*(void (**)(void))(**(void **)&v655[8] + 40))();
          }
          if (*((void *)&v660 + 1) != v401)
          {
            *(void *)(v572 + 120) = *(void *)(v402 + 48);
            sub_1CC27F0A8(v399);
            if (*(unsigned char *)(v572 + 176))
            {
              sub_1CC009394(v572 + 152);
              MEMORY[0x1D25D9CD0](*(void *)(v572 + 152), 8);
              *(unsigned char *)(v572 + 176) = 0;
            }
          }
          if (*((void *)&v660 + 1) != -8192 && *((void *)&v660 + 1) != -4096 && *((void *)&v660 + 1))
          {
            unint64_t v440 = (unint64_t)v659 & 0xFFFFFFFFFFFFFFF8;
            *(void *)((unint64_t)v659 & 0xFFFFFFFFFFFFFFF8) = v660;
            if ((void)v660)
            {
              *(void *)long long v660 = *(void *)v660 & 7 | v440;
            }
            else
            {
              uint64_t v441 = *((void *)&v660 + 1);
              int v442 = (int32x2_t *)****((void ****)&v660 + 1);
              unint64_t v443 = (unint64_t)v442[303];
              if (v443 <= v440)
              {
                uint64_t v444 = v442[305].u32[0];
                if (v443 + 16 * v444 > v440)
                {
                  unsigned int v445 = v444 - 1;
                  LODWORD(v446) = v445 & ((DWORD2(v660) >> 4) ^ (DWORD2(v660) >> 9));
                  unint64_t v447 = (uint64_t *)(v443 + 16 * v446);
                  uint64_t v448 = *v447;
                  if (*((void *)&v660 + 1) == *v447)
                  {
LABEL_924:
                    *unint64_t v447 = -8192;
                    v442[304] = vadd_s32(v442[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v441 = *((void *)&v660 + 1);
                  }
                  else
                  {
                    int v449 = 1;
                    while (v448 != -4096)
                    {
                      int v450 = v446 + v449++;
                      uint64_t v446 = v450 & v445;
                      uint64_t v448 = *(void *)(v443 + 16 * v446);
                      if (*((void *)&v660 + 1) == v448)
                      {
                        unint64_t v447 = (uint64_t *)(v443 + 16 * v446);
                        goto LABEL_924;
                      }
                    }
                  }
                  *(unsigned char *)(v441 + 17) &= ~1u;
                }
              }
            }
          }
        }
        uint64_t v0 = 1;
        goto LABEL_815;
      }
      unsigned int v519 = llvm::Constant::getNullValue((llvm::Constant *)*v366, v490, v491);
LABEL_1153:
      int v350 = (unsigned __int8 *)v519;
      goto LABEL_794;
    }
    v659 = "sunkaddr";
    __int16 v662 = 259;
    if (*(void *)v338 == v493)
    {
LABEL_1140:
      if (v350)
      {
        *(void *)&long long v654 = "sunkaddr";
        *(_WORD *)&v655[16] = 259;
        unint64_t v534 = sub_1CB844A3C((uint64_t)&v627, v350, (uint64_t)v338, (uint64_t)&v654, 0, 0);
        uint64_t v493 = v494;
        int v350 = (unsigned __int8 *)v534;
      }
      else
      {
        int v350 = v338;
      }
      goto LABEL_1143;
    }
    if (v338[16] <= 0x14u)
    {
      int v338 = (unsigned __int8 *)((uint64_t (*)(void ***, uint64_t, unsigned __int8 *, uint64_t))(*v634)[28])(v634, 47, v338, v493);
      if (v338) {
        BOOL v533 = v338[16] >= 0x1Cu;
      }
      else {
        BOOL v533 = 0;
      }
      if (!v533) {
        goto LABEL_1139;
      }
      ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v338, &v659, v632, *((void *)&v632 + 1));
      if (v628)
      {
        unsigned __int8 v558 = (llvm::MDNode **)v627;
        uint64_t v559 = (llvm::MDNode **)((char *)v627 + 16 * v628);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v338, *(_DWORD *)v558, v558[1]);
          v558 += 2;
        }
        while (v558 != v559);
      }
      uint64_t v369 = (void *)v572;
      uint64_t v366 = (uint64_t *)v571;
    }
    else
    {
      *(_WORD *)&v655[16] = 257;
      int v338 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v338, v493, (const char **)&v654, 0);
      ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v338, &v659, v632, *((void *)&v632 + 1));
      if (v628)
      {
        int v543 = (llvm::MDNode **)v627;
        BOOL v544 = (llvm::MDNode **)((char *)v627 + 16 * v628);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v338, *(_DWORD *)v543, v543[1]);
          v543 += 2;
        }
        while (v543 != v544);
      }
      uint64_t v369 = (void *)v572;
    }
    unsigned int v85 = (void **)(v572 + 128);
LABEL_1139:
    uint64_t v493 = v494;
    goto LABEL_1140;
  }
  uint64_t v384 = *(void *)(v572 + 720);
  uint64_t v385 = *v571;
  unsigned int v386 = *((_DWORD *)*v571 + 2);
  if ((v386 & 0xFE) == 0x12) {
    unsigned int v386 = (*v385[2])[1].u32[0];
  }
  uint64_t v387 = *(void *)(v384 + 232);
  if (v386 < 0x100) {
    goto LABEL_852;
  }
  unsigned int v388 = v386 >> 8;
  unint64_t v389 = *(unsigned int *)(v384 + 240);
  uint64_t v390 = *(void *)(v384 + 232);
  if (v389)
  {
    uint64_t v390 = v387;
    unint64_t v391 = v389;
    do
    {
      unint64_t v392 = v391 >> 1;
      uint64_t v393 = v390 + 16 * (v391 >> 1);
      unsigned int v394 = *(_DWORD *)(v393 + 8);
      uint64_t v395 = v393 + 16;
      v391 += ~(v391 >> 1);
      if (v394 < v388) {
        uint64_t v390 = v395;
      }
      else {
        unint64_t v391 = v392;
      }
    }
    while (v391);
  }
  if (v390 == v387 + 16 * v389 || *(_DWORD *)(v390 + 8) != v388) {
LABEL_852:
  }
    uint64_t v390 = v387;
  uint64_t v396 = llvm::IntegerType::get((llvm::IntegerType *)*v385, (llvm::LLVMContext *)*(unsigned int *)(v390 + 4));
  if ((v385[1] & 0xFE) == 0x12)
  {
    uint64_t v550 = (llvm::Type *)*((unsigned int *)v385 + 8);
    if (*((_DWORD *)v385 + 2) == 19) {
      llvm::ScalableVectorType::get((uint64_t **)v396, v550);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v396, v550);
    }
  }
  unsigned int v579 = v337;
  if (v339)
  {
    int v397 = *(unsigned __int8 *)(*(void *)v339 + 8);
    if (v397 == 15) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = (uint64_t)v339;
    }
    if (v397 == 15) {
      v398 = v339;
    }
    else {
      v398 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    v398 = 0;
  }
  uint64_t v366 = (uint64_t *)v571;
  if (v7)
  {
    if (*(_DWORD *)(*(void *)v580 + 8) == 15)
    {
      if (v398 || v7 != (void **)1) {
        goto LABEL_815;
      }
      int v7 = 0;
      v398 = v580;
    }
    else if (*(_DWORD *)(v396 + 8) >> 8 > *(_DWORD *)(*(void *)v580 + 8) >> 8)
    {
      goto LABEL_815;
    }
  }
  if (v338)
  {
    if (v398) {
      goto LABEL_815;
    }
  }
  else
  {
    int v338 = v398;
  }
  int v577 = (llvm::Type ***)v396;
  if (!sub_1CBFB72C8(*(void *)(v572 + 720), (uint64_t)*v571))
  {
    if (!v338 && v10)
    {
      v453 = *v571;
      v659 = "sunkaddr";
      __int16 v662 = 259;
      if (*(int32x2_t ****)v10 != v453)
      {
        if (*(unsigned __int8 *)(v10 + 16) <= 0x14u)
        {
          uint64_t v499 = ((uint64_t (*)(void ***, uint64_t, uint64_t, int32x2_t ***))(*v634)[28])(v634, 48, v10, v453);
          uint64_t v10 = v499;
          if (!v499 || *(unsigned __int8 *)(v499 + 16) < 0x1Cu) {
            goto LABEL_1021;
          }
LABEL_1190:
          v454 = v85;
          ((void (*)(void ***, uint64_t, void **, void, void))(*v635)[2])(v635, v10, &v659, v632, *((void *)&v632 + 1));
          if (v628)
          {
            uint64_t v554 = (llvm::MDNode **)v627;
            uint64_t v555 = (llvm::MDNode **)((char *)v627 + 16 * v628);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v10, *(_DWORD *)v554, v554[1]);
              v554 += 2;
            }
            while (v554 != v555);
          }
          uint64_t v366 = (uint64_t *)v571;
        }
        else
        {
          v454 = (void **)(v572 + 128);
          *(_WORD *)&v655[16] = 257;
          uint64_t v10 = (uint64_t)llvm::CastInst::Create(48, v10, (uint64_t)v453, (const char **)&v654, 0);
          ((void (*)(void ***, uint64_t, void **, void, void))(*v635)[2])(v635, v10, &v659, v632, *((void *)&v632 + 1));
          if (v628)
          {
            unsigned int v538 = (llvm::MDNode **)v627;
            unsigned int v539 = (llvm::MDNode **)((char *)v627 + 16 * v628);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v10, *(_DWORD *)v538, v538[1]);
              v538 += 2;
            }
            while (v538 != v539);
          }
        }
        unsigned int v85 = v454;
      }
LABEL_1021:
      int v338 = (unsigned __int8 *)v10;
      uint64_t v10 = 0;
      goto LABEL_1029;
    }
    if (v7 == (void **)1 && !v338)
    {
      uint64_t v496 = *v571;
      v659 = "sunkaddr";
      __int16 v662 = 259;
      int v338 = v580;
      if (*(int32x2_t ****)v580 != v496)
      {
        if (v580[16] <= 0x14u)
        {
          uint64_t v500 = ((uint64_t (*)(void ***, uint64_t))(*v634)[28])(v634, 48);
          int v338 = (unsigned __int8 *)v500;
          if (!v500 || *(unsigned __int8 *)(v500 + 16) < 0x1Cu) {
            goto LABEL_1028;
          }
          v497 = (void **)(v572 + 128);
          ((void (*)(void ***, uint64_t, void **, void, void))(*v635)[2])(v635, v500, &v659, v632, *((void *)&v632 + 1));
          if (v628)
          {
            int v560 = (llvm::MDNode **)v627;
            unsigned int v561 = (llvm::MDNode **)((char *)v627 + 16 * v628);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v338, *(_DWORD *)v560, v560[1]);
              v560 += 2;
            }
            while (v560 != v561);
          }
          uint64_t v366 = (uint64_t *)v571;
        }
        else
        {
          v497 = (void **)(v572 + 128);
          *(_WORD *)&v655[16] = 257;
          int v338 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v580, (uint64_t)v496, (const char **)&v654, 0);
          ((void (*)(void ***, unsigned __int8 *, void **, void, void))(*v635)[2])(v635, v338, &v659, v632, *((void *)&v632 + 1));
          if (v628)
          {
            v540 = (llvm::MDNode **)v627;
            int v541 = (llvm::MDNode **)((char *)v627 + 16 * v628);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v338, *(_DWORD *)v540, v540[1]);
              v540 += 2;
            }
            while (v540 != v541);
          }
        }
        unsigned int v85 = v497;
      }
LABEL_1028:
      int v7 = 0;
    }
  }
LABEL_1029:
  if (!v7 && !v338 && !v10 && !v579)
  {
    uint64_t v368 = llvm::Constant::getNullValue((llvm::Constant *)*v366, v451, v452);
    goto LABEL_792;
  }
  if (v338)
  {
    unsigned int v501 = *(_DWORD *)(*v366 + 8);
    if ((v501 & 0xFE) == 0x12) {
      unsigned int v501 = *(_DWORD *)(**(void **)(*v366 + 16) + 8);
    }
    char v504 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(*v633 + 1912), (llvm::Type *)(v501 >> 8));
    uint64_t v505 = *v633;
    unint64_t v506 = (unint64_t)v579;
    if (v10)
    {
      v507 = (llvm::ConstantInt *)v577;
      if (*(llvm::Type ****)v10 != v577)
      {
        *(void *)&long long v654 = "sunkaddr";
        *(_WORD *)&v655[16] = 259;
        uint64_t v508 = sub_1CBF56614((uint64_t)&v627, (llvm::CastInst *)v10, v577, (llvm::Type *)1, (uint64_t)&v654, v503);
        v507 = (llvm::ConstantInt *)v577;
        uint64_t v10 = (uint64_t)v508;
      }
    }
    else
    {
      v507 = (llvm::ConstantInt *)v577;
    }
    uint64_t v509 = v505 + 1912;
    if (!v7) {
      goto LABEL_1058;
    }
    int v510 = (llvm::Instruction *)v580;
    if (*(llvm::ConstantInt **)v580 == v507 || (v659 = "sunkaddr", __int16 v662 = 259, *(llvm::ConstantInt **)v580 == v507))
    {
LABEL_1052:
      if (v7 != (void **)1)
      {
        v514 = llvm::ConstantInt::get(v507, (unint64_t)v7, 0);
        *(void *)&long long v654 = "sunkaddr";
        *(_WORD *)&v655[16] = 259;
        int v510 = sub_1CC09A1EC((uint64_t)&v627, (uint64_t)v510, (uint64_t)v514, (uint64_t)&v654, 0, 0);
      }
      if (v10)
      {
        *(void *)&long long v654 = "sunkaddr";
        *(_WORD *)&v655[16] = 259;
        uint64_t v10 = (uint64_t)sub_1CB844A3C((uint64_t)&v627, (void *)v10, (uint64_t)v510, (uint64_t)&v654, 0, 0);
      }
      else
      {
        uint64_t v10 = (uint64_t)v510;
      }
      v507 = (llvm::ConstantInt *)v577;
LABEL_1058:
      if (v506)
      {
        uint64_t v515 = (const char *)llvm::ConstantInt::get(v507, v506, 0);
        if (v10)
        {
          if (*(llvm::Value **)v338 != v504)
          {
            *(_WORD *)&v655[16] = 257;
            int v338 = (unsigned __int8 *)sub_1CC277FE0((uint64_t)&v627, (llvm::CastInst *)v338, v504, (uint64_t)&v654, v502);
          }
          *(void *)&long long v654 = "sunkaddr";
          *(_WORD *)&v655[16] = 259;
          if (v5) {
            v516 = sub_1CC278130((uint64_t *)&v627, v509, (uint64_t *)v338, (const char *)v10, (uint64_t)&v654);
          }
          else {
            v516 = sub_1CB930F7C((uint64_t *)&v627, v509, (uint64_t *)v338, (const char *)v10, (uint64_t)&v654);
          }
          int v338 = (unsigned __int8 *)v516;
        }
      }
      else
      {
        uint64_t v515 = (const char *)v10;
      }
      if (v515)
      {
        if (*(llvm::Value **)v338 != v504)
        {
          *(_WORD *)&v655[16] = 257;
          int v338 = (unsigned __int8 *)sub_1CC277FE0((uint64_t)&v627, (llvm::CastInst *)v338, v504, (uint64_t)&v654, v502);
        }
        *(void *)&long long v654 = "sunkaddr";
        *(_WORD *)&v655[16] = 259;
        if (v5) {
          int v517 = sub_1CC278130((uint64_t *)&v627, v509, (uint64_t *)v338, v515, (uint64_t)&v654);
        }
        else {
          int v517 = sub_1CB930F7C((uint64_t *)&v627, v509, (uint64_t *)v338, v515, (uint64_t)&v654);
        }
        int v338 = (unsigned __int8 *)v517;
      }
      uint64_t v369 = (void *)v572;
      uint64_t v366 = (uint64_t *)v571;
      BOOL v518 = *v571;
      if (*(int32x2_t ****)v338 == *v571)
      {
        int v350 = v338;
        goto LABEL_794;
      }
      *(_WORD *)&v655[16] = 257;
      unsigned int v519 = sub_1CC277FE0((uint64_t)&v627, (llvm::CastInst *)v338, (llvm::Value *)v518, (uint64_t)&v654, v502);
      goto LABEL_1153;
    }
    if (v580[16] <= 0x14u)
    {
      uint64_t v512 = ((uint64_t (*)(void ***, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*v634)[28])(v634, 38, v580, v507);
      int v510 = (llvm::Instruction *)v512;
      if (v512) {
        BOOL v513 = *(unsigned __int8 *)(v512 + 16) >= 0x1Cu;
      }
      else {
        BOOL v513 = 0;
      }
      if (!v513) {
        goto LABEL_1051;
      }
      v511 = v85;
      ((void (*)(void ***, uint64_t, void **, void, void))(*v635)[2])(v635, v512, &v659, v632, *((void *)&v632 + 1));
      if (v628)
      {
        uint64_t v553 = (llvm::SmallPtrSetImplBase *)v627;
        v582 = (llvm::SmallPtrSetImplBase *)((char *)v627 + 16 * v628);
        do
        {
          llvm::Instruction::setMetadata(v510, *(_DWORD *)v553, *((llvm::MDNode **)v553 + 1));
          uint64_t v553 = (llvm::SmallPtrSetImplBase *)((char *)v553 + 16);
        }
        while (v553 != v582);
      }
    }
    else
    {
      v511 = v85;
      *(_WORD *)&v655[16] = 257;
      int v510 = llvm::CastInst::Create(38, (uint64_t)v580, (uint64_t)v507, (const char **)&v654, 0);
      ((void (*)(void ***))(*v635)[2])(v635);
      if (v628)
      {
        uint64_t v542 = (llvm::SmallPtrSetImplBase *)v627;
        unsigned __int8 v581 = (llvm::SmallPtrSetImplBase *)((char *)v627 + 16 * v628);
        do
        {
          llvm::Instruction::setMetadata(v510, *(_DWORD *)v542, *((llvm::MDNode **)v542 + 1));
          uint64_t v542 = (llvm::SmallPtrSetImplBase *)((char *)v542 + 16);
        }
        while (v542 != v581);
      }
    }
    unsigned int v85 = v511;
    unint64_t v506 = (unint64_t)v579;
LABEL_1051:
    v507 = (llvm::ConstantInt *)v577;
    goto LABEL_1052;
  }
LABEL_815:
  if (v626[0] != -8192 && v626[0] != -4096 && v626[0] != 0)
  {
    unint64_t v405 = (unint64_t)v625[0] & 0xFFFFFFFFFFFFFFF8;
    *(void **)((unint64_t)v625[0] & 0xFFFFFFFFFFFFFFF8) = v625[1];
    if (v625[1])
    {
      *(void *)v625[1] = *(void *)v625[1] & 7 | v405;
    }
    else
    {
      uint64_t v406 = v626[0];
      int v407 = ***(int32x2_t ****)v626[0];
      unint64_t v408 = (unint64_t)v407[303];
      if (v408 <= v405)
      {
        uint64_t v409 = v407[305].u32[0];
        if (v408 + 16 * v409 > v405)
        {
          unsigned int v410 = v409 - 1;
          LODWORD(v411) = v410 & ((LODWORD(v626[0]) >> 4) ^ (LODWORD(v626[0]) >> 9));
          uint64_t v412 = (uint64_t *)(v408 + 16 * v411);
          uint64_t v413 = *v412;
          if (v626[0] == *v412)
          {
LABEL_881:
            *uint64_t v412 = -8192;
            v407[304] = vadd_s32(v407[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v406 = v626[0];
          }
          else
          {
            int v414 = 1;
            while (v413 != -4096)
            {
              int v415 = v411 + v414++;
              uint64_t v411 = v415 & v410;
              uint64_t v413 = *(void *)(v408 + 16 * v411);
              if (v626[0] == v413)
              {
                uint64_t v412 = (uint64_t *)(v408 + 16 * v411);
                goto LABEL_881;
              }
            }
          }
          *(unsigned char *)(v406 + 17) &= ~1u;
        }
      }
    }
  }
  if (v627 != v82) {
    free(v627);
  }
LABEL_823:
  uint64_t v379 = v608;
  if (v609)
  {
    uint64_t v380 = 8 * v609;
    int v381 = (char *)v608 - 8;
    do
    {
      uint64_t v382 = *(void *)&v381[v380];
      *(void *)&v381[v380] = 0;
      if (v382) {
        (*(void (**)(uint64_t))(*(void *)v382 + 8))(v382);
      }
      v380 -= 8;
    }
    while (v380);
    uint64_t v379 = v608;
  }
  if (v379 != v610) {
    free(v379);
  }
  if (v611 != v613) {
    free(v611);
  }
  if (v619 != v621) {
    free(v619);
  }
  if (v587 != v586) {
    free(v587);
  }
  if (v622 != v624) {
    free(v622);
  }
  return v0;
}

BOOL sub_1CC271020(uint64_t a1, uint64_t a2)
{
  int v2 = (uint64_t ***)a2;
  uint64_t v3 = a1;
  uint64_t v291 = *MEMORY[0x1E4F143B8];
  char v4 = *(llvm::BasicBlock **)(a2 + 40);
  if (*(unsigned char *)(*(void *)(a2 - 32) + 16) == 24)
  {
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 48) + 2000))(*(void *)(a1 + 48), a2))
    {
      *(void *)(v3 + 120) = *((void *)v4 + 6);
      sub_1CC27F0A8((void **)(v3 + 128));
      if (*(unsigned char *)(v3 + 176))
      {
        sub_1CC009394(v3 + 152);
        MEMORY[0x1D25D9CD0](*(void *)(v3 + 152), 8);
        *(unsigned char *)(v3 + 176) = 0;
      }
      return 1;
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v3 + 32) + 16))(*(void *)(v3 + 32), v2[5][7]);
    (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
    (*(void (**)(void **__return_ptr))(**(void **)(v3 + 48) + 2008))(&__src);
    int v7 = __src;
    uint64_t v6 = (_DWORD *)v271;
    if (__src == (void *)v271)
    {
      unint64_t p_src = (unint64_t)&__src;
      sub_1CC27A9C0((void ***)&p_src);
    }
    else
    {
      int v8 = 0;
      int v9 = 0;
      do
      {
        (*(void (**)(void, _DWORD *, void, void, void))(**(void **)(v3 + 48) + 2032))(*(void *)(v3 + 48), v7, 0, 0, 0);
        if (v7[26] != 2 || *((unsigned char *)v7 + 13) == 0)
        {
          if (!*v7) {
            ++v9;
          }
        }
        else
        {
          v8 |= sub_1CC26C830();
          ++v9;
        }
        v7 += 32;
      }
      while (v7 != v6);
      unint64_t p_src = (unint64_t)&__src;
      sub_1CC27A9C0((void ***)&p_src);
      if (v8) {
        return 1;
      }
    }
  }
  uint64_t v261 = 0;
  if ((*(unsigned int (**)(void, uint64_t ***, char *, uint64_t *))(**(void **)(v3 + 48) + 848))(*(void *)(v3 + 48), v2, (char *)&v261 + 4, &v261))
  {
    int v14 = *((_DWORD *)v2 + 5);
    uint64_t v15 = (llvm::GlobalValue **)&v2[-4 * (v14 & 0x7FFFFFF)];
    int v16 = *((unsigned __int8 *)v2 + 16);
    if (v16 == 84)
    {
      uint64_t v17 = 0;
    }
    else if (v16 == 39)
    {
      uint64_t v17 = (*((_DWORD *)v2 + 20) + 1);
    }
    else
    {
      uint64_t v17 = 2;
    }
    if (v14 < 0 && (uint64_t v247 = (uint64_t)*(v15 - 1), (v247 & 0xFFFFFFFF0) != 0)) {
      uint64_t v18 = (*((_DWORD *)v15 - 3) - *(_DWORD *)((char *)v15 - v247));
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (uint64_t)&(&v2[-4 * v17])[-4 * v18 - 4];
    if (v15 != (llvm::GlobalValue **)v19)
    {
      unint64_t v259 = v4;
      uint64_t v260 = v3;
      do
      {
        uint64_t v20 = *v15;
        unsigned int v21 = *(_DWORD *)(*(void *)*v15 + 8);
        if (v21 == 15)
        {
          uint64_t v22 = *(void *)(v3 + 720);
          if (v21 < 0x100) {
            goto LABEL_35;
          }
          unsigned int v23 = v21 >> 8;
          uint64_t v24 = *(unsigned int *)(v22 + 240);
          uint64_t v25 = *(void *)(v22 + 232);
          if (v24)
          {
            uint64_t v25 = *(void *)(v22 + 232);
            unint64_t v26 = *(unsigned int *)(v22 + 240);
            do
            {
              unint64_t v27 = v26 >> 1;
              uint64_t v28 = v25 + 16 * (v26 >> 1);
              unsigned int v29 = *(_DWORD *)(v28 + 8);
              uint64_t v30 = v28 + 16;
              v26 += ~(v26 >> 1);
              if (v29 < v23) {
                uint64_t v25 = v30;
              }
              else {
                unint64_t v26 = v27;
              }
            }
            while (v26);
          }
          if (v25 == *(void *)(v22 + 232) + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_35:
          }
            uint64_t v25 = *(void *)(v22 + 232);
          LODWORD(v271) = *(_DWORD *)(v25 + 12);
          if (v271 > 0x40) {
            operator new[]();
          }
          __src = 0;
          int v31 = llvm::Value::stripAndAccumulateConstantOffsets(v20, (llvm::DataLayout *)v22, (llvm::APInt *)&__src, 0, 0, 0, v13);
          uint64_t v32 = v31;
          if (v271 >= 0x41)
          {
            int v56 = 0;
            int64_t v57 = ((unint64_t)v271 + 63) >> 6;
            do
            {
              if (v57-- < 1) {
                break;
              }
              unint64_t v59 = *((void *)__src + v57);
              v56 += __clz(v59);
            }
            while (!v59);
            int v60 = v271 | 0xFFFFFFC0;
            if ((v271 & 0x3F) == 0) {
              int v60 = 0;
            }
            if ((v271 - v56 - v60) > 0x40) {
              uint64_t v33 = -1;
            }
            else {
              uint64_t v33 = *(void *)__src;
            }
          }
          else
          {
            uint64_t v33 = (uint64_t)__src;
          }
          if ((v33 & (v261 - 1)) == 0)
          {
            if (*((unsigned char *)v31 + 16) == 59 && v31 && 1 << *((_WORD *)v31 + 9) < (unint64_t)v261)
            {
              uint64_t v34 = v2;
              uint64_t v35 = *(llvm::DataLayout **)(v3 + 720);
              int v36 = (llvm::Type *)*((void *)v31 + 8);
              uint64_t v37 = sub_1CB83544C((uint64_t)v35, (uint64_t)v36);
              BOOL v39 = v38 == 1;
              char Alignment = llvm::DataLayout::getAlignment(v35, v36, 1);
              if (v39) {
              unint64_t v42 = ((1 << Alignment) + ((unint64_t)(v37 + 7) >> 3) - 1) & -(1 << Alignment);
              }
              int v2 = v34;
              char v4 = v259;
              uint64_t v3 = v260;
              if (v42 >= v33 + (unint64_t)HIDWORD(v261)) {
                *((_WORD *)v32 + 9) = *((_WORD *)v32 + 9) & 0xFFC0 | (63 - __clz(v261));
              }
            }
            if (*((unsigned char *)v32 + 16) == 3)
            {
              if (v32)
              {
                if (llvm::GlobalObject::canIncreaseAlignment(v32))
                {
                  Pointerchar Alignment = llvm::Value::getPointerAlignment(v32, *(const llvm::DataLayout **)(v3 + 720));
                  if (1 << PointerAlignment < (unint64_t)v261)
                  {
                    uint64_t v44 = v2;
                    unint64_t v45 = *(llvm::DataLayout **)(v3 + 720);
                    BOOL v46 = (llvm::Type *)*((void *)v32 + 3);
                    uint64_t v47 = sub_1CB83544C((uint64_t)v45, (uint64_t)v46);
                    BOOL v49 = v48 == 1;
                    char v51 = llvm::DataLayout::getAlignment(v45, v46, 1);
                    if (v49) {
                    unint64_t v52 = ((1 << v51) + ((unint64_t)(v47 + 7) >> 3) - 1) & -(1 << v51);
                    }
                    int v2 = v44;
                    char v4 = v259;
                    uint64_t v3 = v260;
                    if (v52 >= v33 + (unint64_t)HIDWORD(v261))
                    {
                      unint64_t v53 = __clz(v261) ^ 0x13F;
                      if (v261) {
                        unint64_t v54 = v53;
                      }
                      else {
                        unint64_t v54 = 0;
                      }
                      if (v54 >= 0x100) {
                        int v55 = ((v54 & 0x3F) << 16) + 0x10000;
                      }
                      else {
                        int v55 = 0;
                      }
                      *((_DWORD *)v32 + 8) = v55 | *((_DWORD *)v32 + 8) & 0xFFC0FFFF;
                    }
                  }
                }
              }
            }
          }
          if (v271 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        v15 += 4;
      }
      while (v15 != (llvm::GlobalValue **)v19);
    }
    char v61 = sub_1CBFB3AB0((uint64_t)v2);
    if (v2 && (v61 & 1) != 0)
    {
      uint64_t v62 = llvm::Value::stripPointerCasts((llvm::Value *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)]);
      unsigned __int8 v63 = llvm::getOrEnforceKnownAlignment((uint64_t)v62, 0, *(unsigned __int8 **)(v3 + 720), 0, 0, 0);
      unint64_t v64 = v2[8];
      if (!v64
        || *((_DWORD *)v64 + 2) < 3u
        || (uint64_t v65 = (llvm::AttributeSetNode *)v64[7]) == 0
        || (unsigned __int16 v66 = llvm::AttributeSetNode::getAlignment(v65), v66 < 0x100u)
        || v63 > v66)
      {
        sub_1CC27C328((uint64_t)v2, v63);
      }
      unsigned int v67 = *((_DWORD *)*(v2 - 4) + 9) - 194;
      if (v67 <= 3 && v67 != 1)
      {
        unsigned int v69 = v2[8];
        if (v69 && *((_DWORD *)v69 + 2) >= 4u && (uint64_t v70 = (llvm::AttributeSetNode *)v69[8]) != 0)
        {
          __int16 v71 = llvm::AttributeSetNode::getAlignment(v70);
          unsigned __int8 v72 = v71;
          int v73 = HIBYTE(v71);
        }
        else
        {
          int v73 = 0;
          unsigned __int8 v72 = 0;
        }
        uint64_t v74 = llvm::Value::stripPointerCasts((llvm::Value *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 4]);
        unsigned __int8 v75 = llvm::getOrEnforceKnownAlignment((uint64_t)v74, 0, *(unsigned __int8 **)(v3 + 720), 0, 0, 0);
        if (!v73 || v72 < v75) {
          sub_1CC27C3B8((uint64_t)v2, v75);
        }
      }
    }
  }
  uint64_t v76 = v2[8];
  if ((v76 && (*((unsigned char *)v76 + 12) & 0x20) != 0
     || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v2, 5))
    && !*(unsigned char *)(v3 + 712)
    && (llvm::shouldOptimizeForSize(v4, *(llvm::ProfileSummaryInfo **)(v3 + 104), *(llvm::BlockFrequencyInfoImplBase ***)(v3 + 88)) & 1) == 0)
  {
    int v77 = *((_DWORD *)v2 + 5);
    uint64_t v78 = v77 & 0x7FFFFFF;
    int v79 = *((unsigned __int8 *)v2 + 16);
    if (v79 == 84) {
      uint64_t v80 = 0;
    }
    else {
      uint64_t v80 = v79 == 39 ? (*((_DWORD *)v2 + 20) + 1) : 2;
    }
    int v81 = &v2[-4 * v78];
    if (v77 < 0 && (uint64_t v248 = (uint64_t)*(v81 - 1), (v248 & 0xFFFFFFFF0) != 0)) {
      uint64_t v82 = (*((_DWORD *)v81 - 3) - *(_DWORD *)((char *)v81 - v248));
    }
    else {
      uint64_t v82 = 0;
    }
    if (v81 != &(&v2[-4 * v80])[-4 * v82 - 4])
    {
      uint64_t v83 = -32 * v78;
      unint64_t v84 = (32 * v80 + 32 * v82) ^ 0xFFFFFFFFFFFFFFE0;
      while (1)
      {
        uint64_t v12 = (const llvm::APInt *)v2[(unint64_t)v83 / 8];
        if (*(_DWORD *)(*(void *)v12 + 8) == 15) {
          break;
        }
        v83 += 32;
        if (v84 == v83) {
          goto LABEL_108;
        }
      }
      return sub_1CC26C830();
    }
  }
LABEL_108:
  uint64_t v85 = (uint64_t)*(v2 - 4);
  if (!v85 || *(unsigned char *)(v85 + 16)) {
    return 0;
  }
  if (*(uint64_t ***)(v85 + 24) != v2[9] || (*(unsigned char *)(v85 + 33) & 0x20) == 0) {
    goto LABEL_112;
  }
  int v91 = *(_DWORD *)(v85 + 36);
  if (v91 > 165)
  {
    if (v91 <= 289)
    {
      switch(v91)
      {
        case 166:
LABEL_284:
          uint64_t v188 = (uint64_t *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
          uint64_t v189 = sub_1CC273768((uint64_t *)(v3 + 560), (uint64_t)v2);
          if (*(void *)(v3 + 592) != v189)
          {
            __src = v272;
            uint64_t v271 = 0x2000000000;
            if (*(_DWORD *)(v189 + 16)) {
              sub_1CD49A6B8((uint64_t)&__src, v189 + 8);
            }
            unint64_t p_src = (unint64_t)v188;
            uint64_t v218 = (unsigned int *)sub_1CD50E820(v3 + 560, (uint64_t *)&p_src);
            sub_1CD3D61B4(v218, __src, (unsigned char *)__src + 16 * v271);
            unsigned int v219 = (void *)sub_1CC273768((uint64_t *)(v3 + 560), (uint64_t)v2);
            if (*(void **)(v3 + 592) != v219) {
              sub_1CD50E34C((int32x2_t *)(v3 + 560), v219);
            }
            if (__src != v272) {
              free(__src);
            }
          }
          int v190 = (llvm::ValueAsMetadata *)v2;
          unsigned int v191 = (llvm::Value *)v188;
LABEL_286:
          llvm::Value::doRAUW(v190, v191, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        case 184:
          uint64_t v151 = (unsigned __int8 *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
          break;
        case 186:
          uint64_t v151 = (unsigned __int8 *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 4];
          break;
        default:
          goto LABEL_340;
      }
      return sub_1CC27C448(v3, (llvm::User *)v2, v151);
    }
    if (v91 > 648)
    {
      if (v91 == 649 || v91 == 651)
      {
        BOOL v11 = 0;
        unsigned int v92 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
        if (!v92 || *((unsigned char *)v92 + 16) != 67) {
          return v11;
        }
        unsigned int v93 = v92[1];
        if (!v93 || v93[1] || v92[5] == (uint64_t *)v2[5]) {
          return 0;
        }
        llvm::Instruction::moveBefore((llvm::Instruction *)v92, (llvm::Instruction *)v2);
        uint64_t v94 = *(void *)(v3 + 200);
        uint64_t v95 = *(unsigned int *)(v3 + 212);
        if (v94 == *(void *)(v3 + 192))
        {
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = 8 * v95;
            uint64_t v98 = *(uint64_t ****)(v3 + 200);
            while (*v98 != v92)
            {
              if (*v98 == (uint64_t **)-2) {
                uint64_t v96 = v98;
              }
              ++v98;
              v97 -= 8;
              if (!v97)
              {
                if (!v96) {
                  goto LABEL_140;
                }
                *uint64_t v96 = v92;
                --*(_DWORD *)(v3 + 216);
                return 1;
              }
            }
            return 1;
          }
LABEL_140:
          unsigned int v99 = *(_DWORD *)(v3 + 208);
          if (v95 < v99)
          {
            *(_DWORD *)(v3 + 212) = v95 + 1;
            *(void *)(v94 + 8 * v95) = v92;
            return 1;
          }
        }
        else
        {
          unsigned int v99 = *(_DWORD *)(v3 + 208);
        }
        if (3 * v99 <= 4 * ((int)v95 - *(_DWORD *)(v3 + 216)))
        {
          if (v99 >= 0x40) {
            v99 *= 2;
          }
          else {
            unsigned int v99 = 128;
          }
        }
        else if (v99 - v95 >= v99 >> 3)
        {
          goto LABEL_364;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 192), v99);
        unsigned int v99 = *(_DWORD *)(v3 + 208);
        uint64_t v94 = *(void *)(v3 + 200);
LABEL_364:
        unsigned int v231 = v99 - 1;
        unsigned int v232 = (v99 - 1) & ((v92 >> 4) ^ (v92 >> 9));
        unsigned int v233 = (uint64_t ***)(v94 + 8 * v232);
        int v234 = *v233;
        if (*v233 == (uint64_t **)-1)
        {
          int v235 = 0;
LABEL_377:
          if (v235) {
            unint64_t v239 = v235;
          }
          else {
            unint64_t v239 = v233;
          }
          if (*v239 != v92)
          {
            if (*v239 == (uint64_t **)-2) {
              --*(_DWORD *)(v3 + 216);
            }
            else {
              ++*(_DWORD *)(v3 + 212);
            }
            *unint64_t v239 = v92;
          }
        }
        else
        {
          int v235 = 0;
          int v236 = 1;
          while (v234 != v92)
          {
            if (v235) {
              BOOL v237 = 0;
            }
            else {
              BOOL v237 = v234 == (uint64_t **)-2;
            }
            if (v237) {
              int v235 = v233;
            }
            unsigned int v238 = v232 + v236++;
            unsigned int v232 = v238 & v231;
            unsigned int v233 = (uint64_t ***)(v94 + 8 * (v238 & v231));
            int v234 = *v233;
            if (*v233 == (uint64_t **)-1) {
              goto LABEL_377;
            }
          }
        }
        return 1;
      }
      goto LABEL_340;
    }
    if (v91 == 290) {
      goto LABEL_284;
    }
    if (v91 == 382)
    {
      llvm::ScalableVectorType::get((uint64_t **)(***v2 + 1912), (llvm::Type *)1);
      int v221 = (llvm::Type *)v220;
      BOOL v222 = *(llvm::DataLayout **)(v3 + 720);
      unint64_t v223 = (unint64_t)(sub_1CB83544C((uint64_t)v222, v220) + 7) >> 3;
      char v224 = llvm::DataLayout::getAlignment(v222, v221, 1);
      if ((((1 << v224) + v223 - 1) & -(1 << v224)) == 8)
      {
        unsigned int v225 = (llvm::Constant *)llvm::PointerType::get(v221, 0);
        NullValue = (uint64_t *)llvm::Constant::getNullValue(v225, v226, v227);
        __src = llvm::ConstantInt::getSigned((llvm::ConstantInt *)*v2, 1uLL, v229);
        ElementPtr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getGetElementPtr((uint64_t)v221, NullValue, (uint64_t)&__src, 1, 0, 0, 0);
        unsigned int v191 = sub_1CC56C0C0((llvm *)0x2F, ElementPtr, (llvm::Constant *)*v2, 0);
        int v190 = (llvm::ValueAsMetadata *)v2;
        goto LABEL_286;
      }
    }
LABEL_340:
    __src = v272;
    uint64_t v271 = 0x200000000;
    unint64_t p_src = 0;
    if ((*(unsigned int (**)(void))(**(void **)(v3 + 48) + 1056))())
    {
      do
      {
        BOOL v217 = v271 == 0;
        if (!v271) {
          break;
        }
        LODWORD(v271) = v271 - 1;
      }
      while (!sub_1CC26C830());
    }
    else
    {
      BOOL v217 = 1;
    }
    if (__src != v272) {
      free(__src);
    }
    if (!v217) {
      return 1;
    }
    uint64_t v85 = (uint64_t)*(v2 - 4);
    if (v85 && !*(unsigned char *)(v85 + 16))
    {
LABEL_112:
      if (*(uint64_t ***)(v85 + 24) != v2[9]) {
        return 0;
      }
      uint64_t v87 = 0;
      unint64_t p_src = *(void *)(v3 + 72);
      LOBYTE(v263) = 1;
      uint64_t v88 = (llvm::ConstantInt *)**v2;
      uint64_t v271 = 0x200000000;
      uint64_t v277 = v88;
      uint64_t v278 = &v286;
      int v279 = v287;
      uint64_t v280 = 0;
      int v281 = 0;
      __int16 v282 = 512;
      char v283 = 7;
      uint64_t v284 = 0;
      uint64_t v285 = 0;
      uint64_t v286 = &unk_1F2616E88;
      v287[0] = &unk_1F2617008;
      uint64_t v89 = (unsigned __int8 *)v2[6];
      unsigned int v275 = v2[5];
      unsigned int v276 = v2 + 3;
      uint64_t v269 = v89;
      __src = v272;
      if (v89)
      {
        llvm::MetadataTracking::track((uint64_t)&v269, v89, 2);
        uint64_t v87 = (uint64_t)v269;
      }
      sub_1CB8461A4((uint64_t)&__src, 0, v87);
      if (!v269) {
        goto LABEL_118;
      }
      int v185 = *v269;
      if ((v185 - 4) > 0x1E)
      {
        if ((v185 - 3) >= 0xFFFFFFFE) {
          unint64_t v207 = v269;
        }
        else {
          unint64_t v207 = 0;
        }
        if ((v185 - 3) < 0xFFFFFFFE)
        {
          if (v185 == 3) {
            *((void *)v269 + 1) = 0;
          }
          goto LABEL_118;
        }
        unint64_t v187 = (unint64_t)(v207 + 8);
      }
      else
      {
        if ((v269[1] & 0x7F) != 2 && !*((_DWORD *)v269 + 3)) {
          goto LABEL_118;
        }
        uint64_t v186 = *((void *)v269 + 2);
        if ((v186 & 4) == 0) {
          goto LABEL_118;
        }
        unint64_t v187 = v186 & 0xFFFFFFFFFFFFFFF8;
        if (!v187) {
          goto LABEL_118;
        }
      }
      uint64_t v288 = (uint64_t)&v269;
      sub_1CC5FA668(v187 + 16, &v288);
LABEL_118:
      uint64_t v90 = (llvm::Value *)llvm::FortifiedLibCallSimplifier::optimizeCall((uint64_t **)&p_src, (llvm::CallInst *)v2, (llvm::IRBuilderBase *)&__src);
      BOOL v11 = v90 != 0;
      if (v90)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v2, v90, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (__src != v272) {
        free(__src);
      }
      return v11;
    }
    return 0;
  }
  if (v91 > 137)
  {
    if ((v91 - 148) >= 2)
    {
      if (v91 == 138)
      {
        if (!v2[1]) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        unsigned int v169 = **v2;
        uint64_t v170 = *v169;
        unsigned int v171 = *(llvm::Value **)(*v169 + 1560);
        if (!v171)
        {
          int v240 = *(llvm::ConstantInt **)(v170 + 1888);
          unsigned int v241 = *(_DWORD *)(v170 + 1896);
          LODWORD(v271) = v241 >> 8;
          if (v241 >> 8 > 0x40) {
            operator new[]();
          }
          if (v241 <= 0xFF) {
            LOBYTE(v242) = 0;
          }
          else {
            unint64_t v242 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v241) + 63);
          }
          __src = (void *)(v242 & 1);
          unsigned int v171 = (llvm::Value *)llvm::ConstantInt::get(v240, (llvm::LLVMContext *)&__src, v12);
          if (v271 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          *(void *)(v170 + 1560) = v171;
        }
        uint64_t v172 = *(void *)(v3 + 120);
        if (v172) {
          uint64_t v173 = v172 - 24;
        }
        else {
          uint64_t v173 = 0;
        }
        __src = (void *)6;
        uint64_t v271 = 0;
        v272[0] = v173;
        if (v173 != -8192 && v173 != -4096 && v173) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
        }
        llvm::replaceAndRecursivelySimplify((llvm::Instruction *)v2, v171, *(void *)(v3 + 72), 0, 0, 0);
        if (v272[0] != v173)
        {
          *(void *)(v3 + 120) = *((void *)v4 + 6);
          sub_1CC27F0A8((void **)(v3 + 128));
          if (*(unsigned char *)(v3 + 176))
          {
            sub_1CC009394(v3 + 152);
            MEMORY[0x1D25D9CD0](*(void *)(v3 + 152), 8);
            *(unsigned char *)(v3 + 176) = 0;
          }
        }
        if (v272[0] != -8192 && v272[0] != -4096 && v272[0])
        {
          unint64_t v174 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
          *(void *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v271;
          if (v271)
          {
            *(void *)uint64_t v271 = *(void *)v271 & 7 | v174;
          }
          else
          {
            uint64_t v175 = v272[0];
            int v176 = ***(int32x2_t ****)v272[0];
            unint64_t v177 = (unint64_t)v176[303];
            if (v177 <= v174)
            {
              uint64_t v178 = v176[305].u32[0];
              if (v177 + 16 * v178 > v174)
              {
                unsigned int v179 = v178 - 1;
                LODWORD(v180) = v179 & ((LODWORD(v272[0]) >> 4) ^ (LODWORD(v272[0]) >> 9));
                char v181 = (uint64_t *)(v177 + 16 * v180);
                uint64_t v182 = *v181;
                if (v272[0] == *v181)
                {
LABEL_275:
                  uint64_t *v181 = -8192;
                  v176[304] = vadd_s32(v176[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v175 = v272[0];
                }
                else
                {
                  int v183 = 1;
                  while (v182 != -4096)
                  {
                    int v184 = v180 + v183++;
                    uint64_t v180 = v184 & v179;
                    uint64_t v182 = *(void *)(v177 + 16 * v180);
                    if (v272[0] == v182)
                    {
                      char v181 = (uint64_t *)(v177 + 16 * v180);
                      goto LABEL_275;
                    }
                  }
                }
                *(unsigned char *)(v175 + 17) &= ~1u;
              }
            }
          }
        }
        return 1;
      }
      goto LABEL_340;
    }
    uint64_t v269 = (unsigned __int8 *)*v2;
    if ((*((_DWORD *)v269 + 2) & 0xFE) != 0x12) {
      return 0;
    }
    if (!(*(unsigned int (**)(void))(**(void **)(v3 + 48) + 1104))(*(void *)(v3 + 48))) {
      return 0;
    }
    BOOL v267 = 0;
    uint64_t v268 = 0;
    uint64_t v266 = 0;
    uint64_t v152 = (uint64_t)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 8];
    __src = &v268;
    uint64_t v271 = (uint64_t)&v267;
    v272[0] = &v266;
    uint64_t v153 = *(void *)(v152 + 8);
    if (!v153 || *(void *)(v153 + 8) || !sub_1CC189B48((void **)&__src, v152)) {
      return 0;
    }
    BOOL v11 = 0;
    if (!llvm::isSplatValue((const void **)v267, (const llvm::Value *)0xFFFFFFFFLL, 0, v154)) {
      return v11;
    }
    BOOL v11 = 0;
    if (!llvm::isSplatValue((const void **)v266, (const llvm::Value *)0xFFFFFFFFLL, 0, v155)) {
      return v11;
    }
    uint64_t v156 = 0;
    uint64_t v157 = (llvm::ConstantInt *)**v2;
    __src = v272;
    uint64_t v271 = 0x200000000;
    uint64_t v277 = v157;
    uint64_t v278 = &v286;
    int v279 = v287;
    uint64_t v280 = 0;
    int v281 = 0;
    __int16 v282 = 512;
    char v283 = 7;
    uint64_t v284 = 0;
    uint64_t v285 = 0;
    uint64_t v286 = &unk_1F2616E88;
    v287[0] = &unk_1F2617008;
    uint64_t v158 = (unsigned __int8 *)v2[6];
    uint64_t v159 = (llvm::ValueAsMetadata *)v2;
    unsigned int v275 = v2[5];
    unsigned int v276 = v2 + 3;
    uint64_t v288 = (uint64_t)v158;
    if (v158)
    {
      llvm::MetadataTracking::track((uint64_t)&v288, v158, 2);
      uint64_t v156 = v288;
    }
    sub_1CB8461A4((uint64_t)&__src, 0, v156);
    if (!v288)
    {
LABEL_245:
      uint64_t v160 = (uint64_t *)&v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
      uint64_t v162 = (unint64_t *)v160[4];
      uint64_t v288 = *v160;
      uint64_t v161 = v288;
      uint64_t v289 = v162;
      uint64_t v290 = v267;
      __int16 v265 = 257;
      uint64_t v163 = (llvm::Value *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&__src, v91, (uint64_t)&v269, 1, &v288, 3, 0, (uint64_t)&p_src);
      uint64_t v288 = v161;
      uint64_t v289 = v162;
      uint64_t v290 = v266;
      __int16 v265 = 257;
      int v164 = (llvm::Value *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&__src, v91, (uint64_t)&v269, 1, &v288, 3, 0, (uint64_t)&p_src);
      __int16 v265 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&__src, v268, v163, v164, (const llvm::Twine *)&p_src, 0);
      llvm::Value::doRAUW(v159, Select, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v243 = *(unsigned __int8 *)v288;
    if ((v243 - 4) > 0x1E)
    {
      if ((v243 - 3) >= 0xFFFFFFFE) {
        uint64_t v246 = v288;
      }
      else {
        uint64_t v246 = 0;
      }
      if ((v243 - 3) < 0xFFFFFFFE)
      {
        if (v243 == 3) {
          *(void *)(v288 + 8) = 0;
        }
        goto LABEL_245;
      }
      unint64_t v245 = v246 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v288 + 1) & 0x7F) != 2 && !*(_DWORD *)(v288 + 12)) {
        goto LABEL_245;
      }
      uint64_t v244 = *(void *)(v288 + 16);
      if ((v244 & 4) == 0) {
        goto LABEL_245;
      }
      unint64_t v245 = v244 & 0xFFFFFFFFFFFFFFF8;
      if (!v245) {
        goto LABEL_245;
      }
    }
    unint64_t p_src = (unint64_t)&v288;
    sub_1CC5FA668(v245 + 16, &p_src);
    goto LABEL_245;
  }
  if (v91 != 52 && v91 != 54)
  {
    if (v91 != 58) {
      goto LABEL_340;
    }
    llvm::DbgVariableIntrinsic::location_ops((uint64_t)v2, &p_src);
    uint64_t v101 = p_src;
    llvm::DbgVariableIntrinsic::location_ops((uint64_t)v2, &v288);
    uint64_t v102 = v289;
    if ((unint64_t *)v101 == v289) {
      goto LABEL_155;
    }
    unint64_t v103 = -1;
    unint64_t v104 = v101;
    do
    {
      if ((v104 & 4) != 0) {
        unint64_t v104 = (v104 & 0xFFFFFFFFFFFFFFF8) + 12;
      }
      else {
        unint64_t v104 = (v104 & 0xFFFFFFFFFFFFFFF8) + 136;
      }
      ++v103;
    }
    while ((unint64_t *)v104 != v289);
    unint64_t v105 = v103 | (v103 >> 1) | ((v103 | (v103 >> 1)) >> 2);
    unint64_t v106 = v105 | (v105 >> 4) | ((v105 | (v105 >> 4)) >> 8);
    unint64_t v107 = (((v106 | (v106 >> 16)) >> 32) | v106 | (v106 >> 16)) + 1;
    if (v107 <= 4)
    {
LABEL_155:
      __src = (void *)1;
    }
    else
    {
      LODWORD(__src) = 0;
      unsigned int v108 = (uint64_t *)operator new(8 * ((((v106 | (v106 >> 16)) >> 32) | v106 | (v106 >> 16)) + 1), (std::align_val_t)8uLL);
      uint64_t v271 = (uint64_t)v108;
      v272[0] = v107;
      char v258 = (char)__src;
      __src = (void *)(__src & 1);
      if ((v258 & 1) == 0)
      {
        BOOL v109 = (char *)&v108[v107];
        do
LABEL_157:
          *v108++ = -4096;
        while (v108 != (uint64_t *)v109);
        if ((unint64_t *)v101 == v102)
        {
LABEL_159:
          char v110 = (char)__src;
          if (__src <= 1)
          {
            char v249 = &v271;
            unsigned int v111 = (uint64_t *)v271;
            unsigned int v115 = v272[0];
            if (__src)
            {
              unsigned int v250 = 4;
            }
            else
            {
              char v249 = (uint64_t *)v271;
              unsigned int v250 = v272[0];
            }
            int v114 = (int32x2_t *****)&v249[v250];
            int v113 = (int)__src;
            uint64_t v112 = (char *)v114;
          }
          else
          {
            if (__src)
            {
              unsigned int v111 = &v271;
              uint64_t v112 = &v274;
              goto LABEL_162;
            }
            unsigned int v111 = (uint64_t *)v271;
            int v113 = v272[0];
            if (LODWORD(v272[0]))
            {
              uint64_t v112 = (char *)(v271 + 8 * LODWORD(v272[0]));
LABEL_162:
              int v113 = __src & 1;
              while ((*v111 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (++v111 == (uint64_t *)v112)
                {
                  unsigned int v111 = (uint64_t *)v112;
                  break;
                }
              }
              int v114 = (int32x2_t *****)v111;
              unsigned int v111 = (uint64_t *)v271;
              unsigned int v115 = v272[0];
              goto LABEL_167;
            }
            unsigned int v115 = 0;
            int v114 = (int32x2_t *****)v271;
            uint64_t v112 = (char *)v271;
          }
LABEL_167:
          if (v113)
          {
            unsigned int v111 = &v271;
            unsigned int v116 = 4;
          }
          else
          {
            unsigned int v116 = v115;
          }
          unsigned int v117 = (int32x2_t *****)&v111[v116];
          if (v114 == v117)
          {
            BOOL v11 = 0;
          }
          else
          {
            BOOL v11 = 0;
            do
            {
              unsigned int v118 = *v114;
              unsigned int v119 = sub_1CC277C98((_DWORD *)(v3 + 128), *v114);
              unint64_t p_src = 6;
              uint64_t v263 = 0;
              uint64_t v120 = (int32x2_t ****)v119[2];
              uint64_t v264 = v120;
              if (v120 != (int32x2_t ****)-8192 && v120 != (int32x2_t ****)-4096 && v120 != 0)
              {
                unint64_t v122 = *v119 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v263 = *(unint64_t **)v122;
                *(void *)unint64_t v122 = &p_src;
                unint64_t p_src = v122 | 6;
                if (v263) {
                  *uint64_t v263 = *v263 & 7 | (unint64_t)&v263;
                }
                uint64_t v120 = v264;
              }
              if (v120 == (int32x2_t ****)-8192
                || (v120 != (int32x2_t ****)-4096 ? (BOOL v123 = v120 == 0) : (BOOL v123 = 1), v123))
              {
                BOOL v124 = 0;
                unsigned int v125 = 0;
                uint64_t v288 = 6;
                uint64_t v289 = 0;
                uint64_t v290 = 0;
              }
              else
              {
                uint64_t v289 = 0;
                uint64_t v290 = (llvm *)v120;
                unint64_t v126 = p_src & 0xFFFFFFFFFFFFFFF8;
                uint64_t v289 = *(unint64_t **)(p_src & 0xFFFFFFFFFFFFFFF8);
                *(void *)unint64_t v126 = &v288;
                uint64_t v288 = v126 | 6;
                BOOL v124 = v289;
                if (v289) {
                  unint64_t *v289 = *v289 & 7 | (unint64_t)&v289;
                }
                unsigned int v125 = v290;
              }
              if (v125 != (llvm::Value *)-8192 && v125 != (llvm::Value *)-4096 && v125)
              {
                unint64_t v127 = v288 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v288 & 0xFFFFFFFFFFFFFFF8) = v124;
                if (v289)
                {
                  unint64_t *v289 = *v289 & 7 | v127;
                }
                else
                {
                  unint64_t v128 = v290;
                  uint64_t v129 = ***(int32x2_t ****)v290;
                  unint64_t v130 = (unint64_t)v129[303];
                  if (v130 <= v127)
                  {
                    uint64_t v131 = v129[305].u32[0];
                    if (v130 + 16 * v131 > v127)
                    {
                      unsigned int v132 = v131 - 1;
                      LODWORD(v133) = v132 & ((v290 >> 4) ^ (v290 >> 9));
                      float v134 = (llvm **)(v130 + 16 * v133);
                      uint64_t v135 = *v134;
                      if (v290 == *v134)
                      {
LABEL_201:
                        llvm::UndefValue *v134 = (llvm *)-8192;
                        v129[304] = vadd_s32(v129[304], (int32x2_t)0x1FFFFFFFFLL);
                        unint64_t v128 = v290;
                      }
                      else
                      {
                        int v136 = 1;
                        while (v135 != (llvm *)-4096)
                        {
                          int v137 = v133 + v136++;
                          uint64_t v133 = v137 & v132;
                          uint64_t v135 = *(llvm **)(v130 + 16 * v133);
                          if (v290 == v135)
                          {
                            float v134 = (llvm **)(v130 + 16 * v133);
                            goto LABEL_201;
                          }
                        }
                      }
                      *((unsigned char *)v128 + 17) &= ~1u;
                    }
                  }
                }
              }
              if (v125)
              {
                llvm::DbgVariableIntrinsic::replaceVariableLocationOp((uint64_t **)v2, (llvm::Value *)v118, v125);
                BOOL v11 = 1;
              }
              if (v264 != (int32x2_t ****)-8192 && v264 != (int32x2_t ****)-4096 && v264 != 0)
              {
                unint64_t v140 = p_src & 0xFFFFFFFFFFFFFFF8;
                *(void *)(p_src & 0xFFFFFFFFFFFFFFF8) = v263;
                if (v263)
                {
                  *uint64_t v263 = *v263 & 7 | v140;
                }
                else
                {
                  uint64_t v141 = v264;
                  int v142 = ***v264;
                  unint64_t v143 = (unint64_t)v142[303];
                  if (v143 <= v140)
                  {
                    uint64_t v144 = v142[305].u32[0];
                    if (v143 + 16 * v144 > v140)
                    {
                      unsigned int v145 = v144 - 1;
                      LODWORD(v146) = v145 & ((v264 >> 4) ^ (v264 >> 9));
                      BOOL v147 = (int32x2_t *****)(v143 + 16 * v146);
                      unsigned int v148 = *v147;
                      if (v264 == *v147)
                      {
LABEL_227:
                        char *v147 = (int32x2_t ****)-8192;
                        v142[304] = vadd_s32(v142[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v141 = v264;
                      }
                      else
                      {
                        int v149 = 1;
                        while (v148 != (int32x2_t ****)-4096)
                        {
                          int v150 = v146 + v149++;
                          uint64_t v146 = v150 & v145;
                          unsigned int v148 = *(int32x2_t *****)(v143 + 16 * v146);
                          if (v264 == v148)
                          {
                            BOOL v147 = (int32x2_t *****)(v143 + 16 * v146);
                            goto LABEL_227;
                          }
                        }
                      }
                      *((unsigned char *)v141 + 17) &= ~1u;
                    }
                  }
                }
              }
              unsigned int v139 = v114 + 1;
              int v114 = (int32x2_t *****)v112;
              if (v139 != (int32x2_t *****)v112)
              {
                int v114 = v139;
                while (((unint64_t)*v114 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  if (++v114 == (int32x2_t *****)v112)
                  {
                    int v114 = (int32x2_t *****)v112;
                    break;
                  }
                }
              }
            }
            while (v114 != v117);
            char v110 = (char)__src;
          }
          if ((v110 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v271, 8);
          }
          return v11;
        }
        while (1)
        {
          unsigned int v192 = (unint64_t *)(v101 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v193 = v101 & 0xFFFFFFFFFFFFFFF8;
          if ((v101 & 4) != 0) {
            unint64_t v193 = *v192;
          }
          uint64_t v194 = *(unsigned __int8 **)(v193 + 128);
          uint64_t v269 = v194;
          if (__src)
          {
            int v195 = 4;
            int v196 = &v271;
          }
          else
          {
            int v195 = v272[0];
            if (!LODWORD(v272[0]))
            {
              uint64_t v205 = 0;
LABEL_306:
              int v206 = sub_1CC00AEB8((uint64_t)&__src, (uint64_t)&v269, &v269, v205);
              *int v206 = v269;
              goto LABEL_307;
            }
            int v196 = (uint64_t *)v271;
          }
          int v197 = v195 - 1;
          unsigned int v198 = v197 & ((v194 >> 4) ^ (v194 >> 9));
          unsigned int v199 = &v196[v198];
          uint64_t v200 = *v199;
          if (v194 != (unsigned __int8 *)*v199)
          {
            int v201 = 0;
            int v202 = 1;
            while (v200 != -4096)
            {
              if (v201) {
                BOOL v203 = 0;
              }
              else {
                BOOL v203 = v200 == -8192;
              }
              if (v203) {
                int v201 = v199;
              }
              unsigned int v204 = v198 + v202++;
              unsigned int v198 = v204 & v197;
              unsigned int v199 = &v196[v198];
              uint64_t v200 = *v199;
              if (v194 == (unsigned __int8 *)*v199) {
                goto LABEL_307;
              }
            }
            if (v201) {
              uint64_t v205 = v201;
            }
            else {
              uint64_t v205 = v199;
            }
            goto LABEL_306;
          }
LABEL_307:
          if ((v101 & 4) != 0) {
            uint64_t v101 = (unint64_t)(v192 + 1) | 4;
          }
          else {
            uint64_t v101 = (uint64_t)(v192 + 17);
          }
          if ((unint64_t *)v101 == v102) {
            goto LABEL_159;
          }
        }
      }
    }
    unsigned int v108 = &v271;
    BOOL v109 = &v274;
    goto LABEL_157;
  }
  uint64_t v166 = *(void *)(v3 + 48);
  unsigned int v167 = *(void **)(v3 + 720);
  if (sub_1CBF5250C((uint64_t)&__src, (llvm::Constant *)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF) + 4])) {
    return 0;
  }
  int v168 = *((_DWORD *)*(v2 - 4) + 9);
  if (v168 == 52)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v166 + 224))(v166)) {
      return 0;
    }
  }
  else if (v168 == 54 && ((*(uint64_t (**)(uint64_t))(*(void *)v166 + 216))(v166) & 1) != 0)
  {
    return 0;
  }
  if (((*v2)[1] & 0xFE) == 0x12) {
    return 0;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v2);
  uint64_t v209 = (unsigned __int8 *)v167[4];
  unint64_t v210 = v167[5];
  uint64_t v211 = &v209[v210];
  if (v210 >= 2)
  {
    unint64_t v252 = v209 + 1;
    unsigned __int8 v251 = *v209;
    unint64_t v253 = v210 - 1;
    unint64_t v254 = v209 + 1;
    do
    {
      unsigned int v256 = *v254++;
      unsigned __int8 v255 = v256;
      BOOL v257 = v251 >= v256;
      if (v251 <= v256) {
        unsigned __int8 v251 = v255;
      }
      if (!v257) {
        uint64_t v209 = v252;
      }
      unint64_t v252 = v254;
      --v253;
    }
    while (v253);
  }
  unsigned int v212 = v209 == v211 ? 0 : *v209;
  if (v212 < PrimitiveSizeInBits) {
    return 0;
  }
  uint64_t v213 = (uint64_t)v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
  if (v213) {
    BOOL v214 = *(unsigned __int8 *)(v213 + 16) >= 0x1Cu;
  }
  else {
    BOOL v214 = 0;
  }
  if (!v214 || (unsigned int v215 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)], !*(void *)(v213 + 40))) {
    unsigned int v215 = 0;
  }
  __src = v167;
  uint64_t v271 = 0;
  v272[1] = 0;
  uint64_t v273 = 0;
  v272[0] = v215;
  char v274 = 1;
  BOOL v11 = 0;
  if ((sub_1CC1620B8(v213, 0, (uint64_t)&__src) & 1) == 0)
  {
    uint64_t v216 = (uint64_t)v2[5];
    __src = "cond.false";
    LOWORD(v273) = 259;
    llvm::BasicBlock::splitBasicBlock(v216, (uint64_t)(v2 + 3), (uint64_t)&__src, 0);
  }
  return v11;
}

uint64_t sub_1CC273768(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return a1[4];
  }
  else {
    return a1[3] + 536 * *((unsigned int *)v5 + 2);
  }
}

uint64_t sub_1CC2737F0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  if (a2 + 536 == v4)
  {
    uint64_t v8 = a2;
  }
  else
  {
    uint64_t v5 = *a1 + 8 * ((a2 - *a1) >> 3) + 544;
    do
    {
      *(void *)(v5 - 544) = *(void *)(v5 - 8);
      sub_1CD49A6B8(v5 - 536, v5);
      uint64_t v6 = v5 + 536;
      uint64_t v7 = v5 + 528;
      v5 += 536;
    }
    while (v7 != v4);
    uint64_t v4 = a1[1];
    uint64_t v8 = v6 - 544;
  }
  while (v4 != v8)
  {
    int v9 = *(void **)(v4 - 528);
    if ((void *)(v4 - 512) != v9) {
      free(v9);
    }
    v4 -= 536;
  }
  a1[1] = v8;
  return a2;
}

uint64_t *sub_1CC2738C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CBB8BDD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  BOOL result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_6:
    sub_1CC2739A4(a1, v7);
    uint64_t v8 = 0;
    sub_1CBB8BDD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    BOOL result = v8;
    goto LABEL_7;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_6;
  }
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *BOOL result = *a2;
  result[1] = 0;
  return result;
}

void *sub_1CC2739A4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *BOOL result = -4096;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 16 * v3;
      uint64_t v15 = (uint64_t *)v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          sub_1CBB8BDD4(*(void *)a1, *(_DWORD *)(a1 + 16), v16, &v18);
          uint64_t v17 = v18;
          *uint64_t v18 = *v15;
          v17[1] = v15[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v15 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC273AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v69[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (!v5)
  {
LABEL_80:
    char v57 = 0;
    return v57 & 1;
  }
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  char v57 = 0;
  int v9 = *(uint64_t ***)a3;
  uint64_t v10 = *(void *)a3 + 8 * v5;
  uint64_t v11 = (uint64_t *)(a1 + 192);
  uint64_t v12 = a1 + 352;
  uint64_t v58 = a1 + 352;
  int v55 = (uint64_t *)(a1 + 192);
  uint64_t v60 = v10;
  do
  {
    uint64_t v13 = *v9;
    int v14 = *((_DWORD *)*v9 + 5);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = (uint64_t *)*(v13 - 1);
    }
    else {
      uint64_t v15 = &v13[-4 * (v14 & 0x7FFFFFF)];
    }
    if (*(unsigned char *)(*v15 + 16) == 60)
    {
      unint64_t v16 = *(unsigned int *)(a4 + 8);
      if (v16 >= *(unsigned int *)(a4 + 12)) {
        goto LABEL_20;
      }
      goto LABEL_8;
    }
    uint64_t v17 = *(void *)(v8 + 48);
    if (*(unsigned char *)(v17 + 184289)) {
      BOOL v18 = byte_1EBCC97C8 == 0;
    }
    else {
      BOOL v18 = 0;
    }
    if (!v18) {
      goto LABEL_80;
    }
    uint64_t v62 = (uint64_t)*v9;
    uint64_t v19 = sub_1CC2741F8(v13, v11, v17, v12);
    if (!v19)
    {
      unint64_t v16 = *(unsigned int *)(a4 + 8);
      uint64_t v13 = (uint64_t *)v62;
      if (v16 >= *(unsigned int *)(a4 + 12)) {
LABEL_20:
      }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_8:
      *(void *)(*(void *)a4 + 8 * v16) = v13;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_9;
    }
    unsigned int v21 = v19;
    uint64_t v22 = *(unsigned int *)(v7 + 8);
    if (v22) {
      uint64_t v61 = *(void *)(*(void *)v7 + 8 * v22 - 8);
    }
    else {
      uint64_t v61 = 0;
    }
    v68[0] = v69;
    v68[1] = (void *)0x400000000;
    unsigned int v64 = 0;
    uint64_t v23 = sub_1CB90CE98(*(void *)(v8 + 48), v62, v20) ^ 1;
    uint64_t v24 = v7;
    uint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unsigned int *, void **, void, void))v21)(v62, v7, v12, &v64, v68, 0, *(void *)(v8 + 48));
    unsigned int v63 = v23;
    unint64_t v26 = (v64 + a5 - v23) & ~((v64 + a5 - v23) >> 63);
    if (!byte_1EBCC9888 && (v26 > 1 || !sub_1CC2746FC(*(void *)(v8 + 48), *(void *)(v8 + 720), v25)))
    {
      sub_1CC274118(v7, v61);
      unint64_t v50 = *(unsigned int *)(a4 + 8);
      if (v50 >= *(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v10 = v60;
      *(void *)(*(void *)a4 + 8 * v50) = v62;
      ++*(_DWORD *)(a4 + 8);
      int v52 = 3;
      goto LABEL_72;
    }
    uint64_t v65 = v67;
    uint64_t v66 = 0x200000000;
    sub_1CC273AE8(v8, v7, v68, &v65, v26);
    uint64_t v10 = v60;
    if (!v66) {
      goto LABEL_67;
    }
    int v56 = v9;
    uint64_t v27 = v8;
    char v28 = 0;
    unsigned int v29 = (char *)v65;
    uint64_t v30 = (char *)v65 + 8 * v66;
    do
    {
      while (1)
      {
        uint64_t v31 = *(void *)v29;
        int v32 = *(_DWORD *)(*(void *)v29 + 20);
        uint64_t v33 = (v32 & 0x40000000) != 0 ? *(uint64_t **)(v31 - 8) : (uint64_t *)(v31 - 32 * (v32 & 0x7FFFFFF));
        uint64_t v34 = *v33;
        if (*(unsigned char *)(v34 + 16) == 60 && !byte_1EBCC9888 && v64 > v63)
        {
          uint64_t v36 = *(void *)(v34 + 8);
          if (!v36 || *(void *)(v36 + 8)) {
            break;
          }
        }
LABEL_55:
        unint64_t v49 = *(unsigned int *)(a4 + 8);
        if (v49 >= *(unsigned int *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a4 + 8 * v49) = v31;
        ++*(_DWORD *)(a4 + 8);
        v29 += 8;
        char v28 = 1;
        if (v29 == v30)
        {
          int v52 = 0;
          char v57 = 1;
          uint64_t v7 = a2;
          uint64_t v8 = v27;
          int v9 = v56;
          uint64_t v10 = v60;
          goto LABEL_69;
        }
      }
      uint64_t v37 = *(void *)(v27 + 48);
      int v38 = *(uint64_t **)(v36 + 24);
      int v39 = *((unsigned __int8 *)v38 + 16);
      uint64_t v40 = *v38;
      while (1)
      {
        uint64_t v41 = *(uint64_t **)(v36 + 24);
        int v42 = *((unsigned __int8 *)v41 + 16);
        if (v39 != 68) {
          break;
        }
        if (v42 != 68 || *v41 != v40) {
          goto LABEL_58;
        }
LABEL_54:
        uint64_t v36 = *(void *)(v36 + 8);
        if (!v36) {
          goto LABEL_55;
        }
      }
      if (v42 == 67)
      {
        uint64_t v43 = *v41;
        if (v43 == v40) {
          goto LABEL_54;
        }
        unsigned int v44 = *(_DWORD *)(v40 + 8);
        if ((v44 & 0xFE) == 0x12) {
          unsigned int v44 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
        }
        unsigned int v45 = *(_DWORD *)(v43 + 8);
        if ((v45 & 0xFE) == 0x12) {
          unsigned int v45 = *(_DWORD *)(**(void **)(v43 + 16) + 8);
        }
        unsigned int v46 = v44 >> 8;
        uint64_t v47 = v46 <= v45 >> 8 ? v40 : v43;
        uint64_t v48 = v46 <= v45 >> 8 ? v43 : v40;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 1184))(v37, v47, v48)) {
          goto LABEL_54;
        }
      }
LABEL_58:
      v29 += 8;
    }
    while (v29 != v30);
    uint64_t v24 = a2;
    uint64_t v8 = v27;
    int v9 = v56;
    uint64_t v10 = v60;
    if (v28)
    {
      int v52 = 0;
      char v57 = 1;
      uint64_t v7 = a2;
      goto LABEL_69;
    }
LABEL_67:
    sub_1CC274118(v24, v61);
    unint64_t v51 = *(unsigned int *)(a4 + 8);
    uint64_t v7 = v24;
    if (v51 >= *(unsigned int *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a4 + 8 * v51) = v62;
    ++*(_DWORD *)(a4 + 8);
    int v52 = 3;
LABEL_69:
    if (v65 != v67) {
      free(v65);
    }
    uint64_t v11 = v55;
LABEL_72:
    if (v68[0] != v69) {
      free(v68[0]);
    }
    if (v52)
    {
      BOOL v18 = v52 == 3;
      uint64_t v12 = v58;
      if (!v18) {
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v12 = v58;
    }
LABEL_9:
    ++v9;
  }
  while (v9 != (uint64_t **)v10);
  return v57 & 1;
}

uint64_t sub_1CC274054(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = 8 * v2;
  do
  {
    uint64_t v5 = *v3++;
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    v4 -= 8;
  }
  while (v4);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)a1 - 8;
    do
    {
      uint64_t v9 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      v7 -= 8;
    }
    while (v7);
    uint64_t result = 1;
  }
  else
  {
LABEL_10:
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1CC274118(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)v4 + 8 * v2;
      uint64_t v6 = *(void *)(v5 - 8);
      if (v6 == a2) {
        break;
      }
      *(void *)(v5 - 8) = 0;
      unsigned int v7 = v2 - 1;
      *(_DWORD *)(v4 + 8) = v7;
      uint64_t v8 = *(void *)(*(void *)v4 + 8 * v7);
      *(void *)(*(void *)v4 + 8 * v7) = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      unsigned int v2 = *(_DWORD *)(v4 + 8);
    }
    while (v2);
  }
  return result;
}

void (*sub_1CC2741F8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7 = *((_DWORD *)a1 + 5);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = (uint64_t *)*(a1 - 1);
  }
  else {
    uint64_t v8 = &a1[-4 * (v7 & 0x7FFFFFF)];
  }
  uint64_t v9 = (uint64_t *)*v8;
  unsigned int v10 = *(unsigned __int8 *)(*v8 + 16);
  if (v9) {
    BOOL v11 = v10 >= 0x1C;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *v9;
  if ((*(_DWORD *)(*v9 + 8) & 0xFE) == 0x12) {
    return 0;
  }
  uint64_t v14 = *a1;
  int v15 = *((unsigned __int8 *)a1 + 16);
  BOOL v17 = v10 == 68 && v15 == 68;
  if (v10 == 67 || v17) {
    goto LABEL_48;
  }
  if (v10 - 59 >= 0xFFFFFFEE)
  {
    HIDWORD(v21) = v10 - 41;
    LODWORD(v21) = v10 - 41;
    unsigned int v20 = v21 >> 1;
    BOOL v22 = v20 > 6;
    int v23 = (1 << v20) & 0x47;
    if (!v22 && v23 != 0)
    {
      if (v15 == 68)
      {
        if ((*((unsigned char *)v9 + 17) & 4) != 0) {
          goto LABEL_41;
        }
      }
      else if ((*((unsigned char *)v9 + 17) & 2) != 0)
      {
        goto LABEL_41;
      }
    }
  }
  if (v10 - 56 < 2)
  {
LABEL_48:
    if (v10 - 66 < 3) {
      return sub_1CC2749E8;
    }
    goto LABEL_72;
  }
  if (v10 != 58)
  {
    if (v15 != 68 && v10 == 54) {
      goto LABEL_41;
    }
    if (v10 == 53)
    {
      uint64_t v25 = v9[1];
      if (v25)
      {
        if (!*(void *)(v25 + 8))
        {
          uint64_t v52 = *(void *)(*(void *)(v25 + 24) + 8);
          if (v52)
          {
            if (!*(void *)(v52 + 8))
            {
              uint64_t v53 = *(void *)(v52 + 24);
              if (v53)
              {
                if (*(unsigned char *)(v53 + 16) == 56)
                {
                  int v54 = *(_DWORD *)(v53 + 20);
                  uint64_t v55 = (v54 & 0x40000000) != 0 ? *(void *)(v53 - 8) : v53 - 32 * (v54 & 0x7FFFFFF);
                  uint64_t v58 = *(void *)(v55 + 32);
                  if (v58 && *(unsigned char *)(v58 + 16) == 16)
                  {
                    uint64_t v60 = *(unsigned int *)(v58 + 32);
                    if (v60 > 0x40)
                    {
                      int v62 = 0;
                      int64_t v63 = (unint64_t)(v60 + 63) >> 6;
                      do
                      {
                        BOOL v22 = v63-- < 1;
                        if (v22) {
                          break;
                        }
                        unint64_t v64 = *(void *)(*(void *)(v58 + 24) + 8 * v63);
                        v62 += __clz(v64);
                      }
                      while (!v64);
                      int v65 = v60 | 0xFFFFFFC0;
                      if ((v60 & 0x3F) == 0) {
                        int v65 = 0;
                      }
                      int v61 = v62 + v65;
                    }
                    else
                    {
                      int v61 = v60 + __clz(*(void *)(v58 + 24)) - 64;
                    }
                    if ((v60 - v61) <= *(_DWORD *)(*v9 + 8) >> 8)
                    {
LABEL_41:
                      if (v10 == 66)
                      {
                        uint64_t v29 = *a2;
                        uint64_t v28 = a2[1];
                        if (v28 == *a2)
                        {
                          uint64_t v30 = *((unsigned int *)a2 + 5);
                          uint64_t v31 = (uint64_t **)(v28 + 8 * v30);
                          if (v30)
                          {
                            uint64_t v32 = 0;
                            while (*(uint64_t **)(v28 + v32) != v9)
                            {
                              v32 += 8;
                              if (8 * v30 == v32) {
                                goto LABEL_79;
                              }
                            }
                            uint64_t v31 = (uint64_t **)(v28 + v32);
                          }
LABEL_79:
                          uint64_t v29 = a2[1];
                          goto LABEL_97;
                        }
                        uint64_t v37 = *((unsigned int *)a2 + 4);
                        int v38 = v37 - 1;
                        unsigned int v39 = (v37 - 1) & ((v9 >> 4) ^ (v9 >> 9));
                        uint64_t v31 = (uint64_t **)(v28 + 8 * v39);
                        uint64_t v40 = *v31;
                        if (*v31 == (uint64_t *)-1)
                        {
                          uint64_t v41 = 0;
LABEL_92:
                          if (v41) {
                            uint64_t v31 = v41;
                          }
                          if (*v31 != v9)
                          {
                            LODWORD(v30) = *((_DWORD *)a2 + 5);
                            uint64_t v31 = (uint64_t **)(v28 + 8 * v37);
LABEL_97:
                            if (v28 == v29) {
                              unsigned int v51 = v30;
                            }
                            else {
                              unsigned int v51 = *((_DWORD *)a2 + 4);
                            }
                            if (v31 == (uint64_t **)(v28 + 8 * v51)) {
                              return sub_1CC2749E8;
                            }
                            else {
                              return 0;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v41 = 0;
                          int v42 = 1;
                          while (v40 != v9)
                          {
                            if (v41) {
                              BOOL v43 = 0;
                            }
                            else {
                              BOOL v43 = v40 == (uint64_t *)-2;
                            }
                            if (v43) {
                              uint64_t v41 = v31;
                            }
                            unsigned int v44 = v39 + v42++;
                            unsigned int v39 = v44 & v38;
                            uint64_t v31 = (uint64_t **)(v28 + 8 * (v44 & v38));
                            uint64_t v40 = *v31;
                            if (*v31 == (uint64_t *)-1) {
                              goto LABEL_92;
                            }
                          }
                        }
                        LODWORD(v30) = *((_DWORD *)a2 + 5);
                        goto LABEL_97;
                      }
                      goto LABEL_48;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v10 != 66) {
      return 0;
    }
    int v26 = *((_DWORD *)v9 + 5);
    uint64_t v27 = (v26 & 0x40000000) != 0 ? (uint64_t *)*(v9 - 1) : &v9[-4 * (v26 & 0x7FFFFFF)];
    uint64_t v46 = *v27;
    unsigned int v47 = *(_DWORD *)(*(void *)*v27 + 8);
    if (v47 != 13) {
      return 0;
    }
    if (v47 >> 8 > *(_DWORD *)(v14 + 8) >> 8) {
      return 0;
    }
    unsigned int v48 = *(unsigned __int8 *)(v46 + 16);
    if (v48 < 0x1C) {
      return 0;
    }
    uint64_t v66 = 0;
    if (!sub_1CBB0BF40(*(void *)a4, *(_DWORD *)(a4 + 16), v46, &v66)
      || v66 == *(void *)a4 + 16 * *(unsigned int *)(a4 + 16)
      || (uint64_t v49 = *(void *)(v66 + 8), v50 = v49 & 0xFFFFFFFFFFFFFFF8, (v49 & 0xFFFFFFFFFFFFFFF8) == 0)
      || ((v49 >> 1) & 3) != (v15 == 68))
    {
      if (v15 == 68)
      {
        if (v48 != 68) {
          return 0;
        }
      }
      else if (v48 != 67)
      {
        return 0;
      }
      int v56 = *(_DWORD *)(v46 + 20);
      if ((v56 & 0x40000000) != 0) {
        char v57 = *(unint64_t ***)(v46 - 8);
      }
      else {
        char v57 = (unint64_t **)(v46 - 32 * (v56 & 0x7FFFFFF));
      }
      unint64_t v50 = **v57;
    }
    uint64_t v12 = *v9;
    if (*(_DWORD *)(*v9 + 8) >> 8 >= *(_DWORD *)(v50 + 8) >> 8)
    {
      unsigned int v10 = *((unsigned __int8 *)v9 + 16);
      goto LABEL_41;
    }
    return 0;
  }
  int v18 = *((_DWORD *)v9 + 5);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = (uint64_t *)*(v9 - 1);
  }
  else {
    uint64_t v19 = &v9[-4 * (v18 & 0x7FFFFFF)];
  }
  uint64_t v33 = v19[4];
  if (v33) {
    BOOL v34 = *(unsigned char *)(v33 + 16) == 16;
  }
  else {
    BOOL v34 = 0;
  }
  if (!v34) {
    return 0;
  }
  unsigned int v35 = *(_DWORD *)(v33 + 32);
  if (!v35) {
    return 0;
  }
  uint64_t v36 = (llvm::APInt *)(v33 + 24);
  if (v35 <= 0x40)
  {
    uint64_t result = 0;
    if (*(void *)v36 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v35) {
      return result;
    }
    goto LABEL_72;
  }
  if (llvm::APInt::countTrailingOnesSlowCase(v36) == v35) {
    return 0;
  }
LABEL_72:
  uint64_t v45 = v9[1];
  if ((!v45 || *(void *)(v45 + 8))
    && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 1144))(a3, v14, v12))
  {
    return 0;
  }
  if (v15 == 68) {
    return (void (*)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CC274BB8;
  }
  else {
    return (void (*)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CC274BC0;
  }
}

BOOL sub_1CC2746FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  if (a3 && *(unsigned __int8 *)(a3 + 16) >= 0x1Cu)
  {
    BOOL result = 1;
    uint64_t v5 = 222;
    switch(*(unsigned char *)(a3 + 16))
    {
      case '(':
        goto LABEL_34;
      case ')':
        uint64_t v5 = 56;
        goto LABEL_34;
      case '*':
        uint64_t v5 = 96;
        goto LABEL_34;
      case '+':
        uint64_t v5 = 57;
        goto LABEL_34;
      case ',':
        uint64_t v5 = 97;
        goto LABEL_34;
      case '-':
        uint64_t v5 = 58;
        goto LABEL_34;
      case '.':
        uint64_t v5 = 98;
        goto LABEL_34;
      case '/':
        uint64_t v5 = 60;
        goto LABEL_34;
      case '0':
        uint64_t v5 = 59;
        goto LABEL_34;
      case '1':
        uint64_t v5 = 99;
        goto LABEL_34;
      case '2':
        uint64_t v5 = 62;
        goto LABEL_34;
      case '3':
        uint64_t v5 = 61;
        goto LABEL_34;
      case '4':
        uint64_t v5 = 100;
        goto LABEL_34;
      case '5':
        uint64_t v5 = 175;
        goto LABEL_34;
      case '6':
        uint64_t v5 = 177;
        goto LABEL_34;
      case '7':
        uint64_t v5 = 176;
        goto LABEL_34;
      case '8':
        uint64_t v5 = 171;
        goto LABEL_34;
      case '9':
        uint64_t v5 = 172;
        goto LABEL_34;
      case ':':
        uint64_t v5 = 173;
        goto LABEL_34;
      case '<':
        uint64_t v5 = 253;
        goto LABEL_34;
      case '=':
        uint64_t v5 = 254;
        goto LABEL_34;
      case 'B':
        uint64_t v5 = 201;
        goto LABEL_34;
      case 'C':
        uint64_t v5 = 199;
        goto LABEL_34;
      case 'D':
        uint64_t v5 = 198;
        goto LABEL_34;
      case 'E':
        uint64_t v5 = 209;
        goto LABEL_34;
      case 'F':
        uint64_t v5 = 208;
        goto LABEL_34;
      case 'G':
        uint64_t v5 = 203;
        goto LABEL_34;
      case 'H':
        uint64_t v5 = 202;
        goto LABEL_34;
      case 'I':
        uint64_t v5 = 212;
        goto LABEL_34;
      case 'J':
        uint64_t v5 = 215;
        goto LABEL_34;
      case 'K':
      case 'L':
      case 'M':
        uint64_t v5 = 216;
        goto LABEL_34;
      case 'N':
        uint64_t v5 = 217;
        goto LABEL_34;
      case 'Q':
      case 'R':
        uint64_t v5 = 193;
        goto LABEL_34;
      case 'U':
        uint64_t v5 = 190;
        goto LABEL_34;
      case 'Y':
        uint64_t v5 = 148;
        goto LABEL_34;
      case 'Z':
        uint64_t v5 = 147;
        goto LABEL_34;
      case '[':
        uint64_t v5 = 153;
        goto LABEL_34;
      case '\\':
      case ']':
        uint64_t v5 = 55;
        goto LABEL_34;
      case '_':
        uint64_t v5 = 52;
LABEL_34:
        unsigned __int8 v6 = sub_1CB87DC14(a1, a2, *(llvm::EVT **)a3, 0);
        BOOL result = v6
              && (v6 == 1 || *(void *)(a1 + 8 * v6 + 96))
              && (*(unsigned char *)(a1 + 390 * v6 + v5 + 3862) & 0xFB) == 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1CC2749E8(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(uint64_t **)(a1 - 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(a1 - 32 * (v7 & 0x7FFFFFF));
  }
  if (*(unsigned char *)(*v8 + 16) == 67)
  {
    sub_1CB90CE98(a7, *v8, a3);
    sub_1CC274BC8();
  }
  sub_1CC275480();
}

void sub_1CC274BB8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1CC274BC0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1CC274BC8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC274FF4()
{
}

void sub_1CC275090()
{
}

void sub_1CC275480()
{
}

void sub_1CC2755B0(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = (uint64_t *)a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  unsigned __int8 v6 = *(uint64_t **)a1;
  if (v4 >= v5)
  {
    unint64_t v8 = v4 + 1;
    BOOL v10 = (unint64_t)v6 <= a2 && (unint64_t)&v6[v4] > a2;
    if (v10) {
      uint64_t v11 = (uint64_t)(a2 - (void)v6) >> 3;
    }
    else {
      uint64_t v11 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v8);
    }
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v12 = (2 * v5) | 1;
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 >= 0xFFFFFFFF) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = (uint64_t *)malloc_type_malloc(8 * v13, 0x4065EBACuLL);
    if (!v14) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned __int8 v6 = v14;
    int v15 = *(uint64_t **)a1;
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      uint64_t v18 = 8 * v16;
      uint64_t v19 = v6;
      do
      {
        uint64_t v20 = *v15;
        *v15++ = 0;
        *v19++ = v20;
        v18 -= 8;
      }
      while (v18);
      uint64_t v21 = *(void *)a1 - 8;
      do
      {
        uint64_t v22 = *(void *)(v21 + v17);
        *(void *)(v21 + v17) = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        v17 -= 8;
      }
      while (v17);
      int v15 = *(uint64_t **)a1;
    }
    if (v15 != (uint64_t *)(a1 + 16)) {
      free(v15);
    }
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 12) = v13;
    if (v10) {
      unsigned int v2 = &v6[v11];
    }
    uint64_t v4 = *(unsigned int *)(a1 + 8);
  }
  uint64_t v7 = *v2;
  *unsigned int v2 = 0;
  v6[v4] = v7;
  *(_DWORD *)(a1 + 8) = v4 + 1;
}

void sub_1CC275738()
{
}

uint64_t sub_1CC27574C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return result;
}

uint64_t sub_1CC2757C0(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  *(void *)a1 = &unk_1F2609D88;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 24) = 0x400000000;
  *(void *)(a1 + 104) = 0x100000000;
  *(void *)(a1 + 120) = a3;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v6 + 24);
      int v9 = *(_DWORD *)(v8 + 20);
      if ((v9 & 0x40000000) != 0) {
        uint64_t v10 = *(void *)(v8 - 8);
      }
      else {
        uint64_t v10 = v8 - 32 * (v9 & 0x7FFFFFF);
      }
      if (v7 >= *(_DWORD *)(a1 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v11 = (void *)(*(void *)(a1 + 16) + 16 * v7);
      *uint64_t v11 = v8;
      v11[1] = ((unint64_t)(v6 - v10) >> 5);
      unsigned int v7 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v7;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
  llvm::findDbgValues(a1 + 96, (uint64_t ***)a2);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, a3, (llvm::Value *)1);
  return a1;
}

void *sub_1CC2758F8(void *a1)
{
  *a1 = &unk_1F2609D88;
  BOOL v2 = (void *)a1[12];
  if (v2 != a1 + 14) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3 != a1 + 4) {
    free(v3);
  }
  return a1;
}

void sub_1CC275960(void *a1)
{
  *a1 = &unk_1F2609D88;
  BOOL v2 = (void *)a1[12];
  if (v2 != a1 + 14) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3 != a1 + 4) {
    free(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2759E8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(unsigned int **)(a1 + 16);
    uint64_t v4 = &v3[4 * v2];
    do
    {
      uint64_t v5 = *(void *)v3;
      int v6 = *(_DWORD *)(*(void *)v3 + 20);
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v7 = v5 - 32 * (v6 & 0x7FFFFFF);
      }
      uint64_t v8 = v3[2];
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = v7 + 32 * v8;
      if (*(void *)v10)
      {
        **(void **)(v10 + 16) = *(void *)(v10 + 8);
        uint64_t v11 = *(void *)(v10 + 8);
        if (v11) {
          *(void *)(v11 + 16) = *(void *)(v10 + 16);
        }
      }
      *(void *)uint64_t v10 = v9;
      if (v9)
      {
        uint64_t v14 = *(void *)(v9 + 8);
        unint64_t v12 = (void *)(v9 + 8);
        uint64_t v13 = v14;
        uint64_t v15 = v7 + 32 * v8;
        *(void *)(v15 + 8) = v14;
        if (v14) {
          *(void *)(v13 + 16) = v15 + 8;
        }
        *(void *)(v15 + 16) = v12;
        *unint64_t v12 = v10;
      }
      v3 += 4;
    }
    while (v3 != v4);
  }
  uint64_t v16 = *(unsigned int *)(a1 + 104);
  if (v16)
  {
    uint64_t v17 = *(uint64_t ****)(a1 + 96);
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17++;
      llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v19, *(llvm::Value **)(a1 + 120), *(llvm::Value **)(a1 + 8));
      v18 -= 8;
    }
    while (v18);
  }
}

void *sub_1CC275AD0(void *a1)
{
  *a1 = &unk_1F2609DB8;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[4] = &unk_1F2609DE8;
  uint64_t v3 = (void *)a1[6];
  if (v3 != a1 + 8) {
    free(v3);
  }
  return a1;
}

void sub_1CC275B70(void *a1)
{
  sub_1CC275AD0(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC275BA8(uint64_t a1)
{
  sub_1CC275F00((unsigned char *)(a1 + 16), *(llvm::Instruction **)(a1 + 8));
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0) {
        uint64_t v9 = *(void *)(v7 - 8);
      }
      else {
        uint64_t v9 = v7 - 32 * (v8 & 0x7FFFFFF);
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + v5);
      uint64_t v11 = v9 + v4;
      if (*(void *)(v9 + v4))
      {
        **(void **)(v11 + 16) = *(void *)(v11 + 8);
        uint64_t v12 = *(void *)(v11 + 8);
        if (v12) {
          *(void *)(v12 + 16) = *(void *)(v11 + 16);
        }
      }
      *(void *)uint64_t v11 = v10;
      if (v10)
      {
        uint64_t v15 = *(void *)(v10 + 8);
        uint64_t v13 = (void *)(v10 + 8);
        uint64_t v14 = v15;
        uint64_t v16 = v9 + v4;
        *(void *)(v16 + 8) = v15;
        if (v15) {
          *(void *)(v14 + 16) = v16 + 8;
        }
        *(void *)(v16 + 16) = v13;
        *uint64_t v13 = v11;
      }
      v5 += 8;
      v4 += 32;
    }
    while (v6 != v5);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 104);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v20 = *v17;
  uint64_t v19 = v17[1];
  if (v19 == *v17)
  {
    uint64_t v21 = *((unsigned int *)v17 + 5);
    uint64_t v22 = (uint64_t *)(v19 + 8 * v21);
    if (v21)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 8 * v21;
      while (*(void *)(v19 + v23) != v18)
      {
        v23 += 8;
        if (v24 == v23) {
          goto LABEL_35;
        }
      }
      uint64_t v22 = (uint64_t *)(v19 + v23);
    }
LABEL_35:
    uint64_t v20 = v17[1];
  }
  else
  {
    uint64_t v25 = *((unsigned int *)v17 + 4);
    int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((v18 >> 4) ^ (v18 >> 9));
    uint64_t v22 = (uint64_t *)(v19 + 8 * v27);
    uint64_t result = *v22;
    if (*v22 == -1)
    {
      uint64_t v28 = 0;
LABEL_42:
      if (v28) {
        uint64_t v22 = v28;
      }
      if (*v22 != v18) {
        uint64_t v22 = (uint64_t *)(v19 + 8 * v25);
      }
    }
    else
    {
      uint64_t v28 = 0;
      int v29 = 1;
      while (result != v18)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = result == -2;
        }
        if (v30) {
          uint64_t v28 = v22;
        }
        unsigned int v31 = v27 + v29++;
        unsigned int v27 = v31 & v26;
        uint64_t v22 = (uint64_t *)(v19 + 8 * (v31 & v26));
        uint64_t result = *v22;
        if (*v22 == -1) {
          goto LABEL_42;
        }
      }
    }
  }
  BOOL v30 = v19 == v20;
  uint64_t v32 = 16;
  if (v30) {
    uint64_t v32 = 20;
  }
  if (v22 != (uint64_t *)(v19 + 8 * *(unsigned int *)((char *)v17 + v32)))
  {
    *uint64_t v22 = -2;
    ++*((_DWORD *)v17 + 6);
  }
  return result;
}

void *sub_1CC275D9C(void *a1)
{
  *a1 = &unk_1F2609DE8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void sub_1CC275DF0(void *a1)
{
  *a1 = &unk_1F2609DE8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC275E64(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 24);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v1;
    do
    {
      uint64_t v5 = *(void *)(result + 8);
      int v6 = *(_DWORD *)(v5 + 20);
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v7 = v5 - 32 * (v6 & 0x7FFFFFF);
      }
      uint64_t v8 = *(void *)(*(void *)(result + 16) + v3);
      uint64_t v9 = v7 + v2;
      if (*(void *)(v7 + v2))
      {
        **(void **)(v9 + 16) = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10) {
          *(void *)(v10 + 16) = *(void *)(v9 + 16);
        }
      }
      *(void *)uint64_t v9 = v8;
      if (v8)
      {
        uint64_t v13 = *(void *)(v8 + 8);
        uint64_t v11 = (void *)(v8 + 8);
        uint64_t v12 = v13;
        uint64_t v14 = v7 + v2;
        *(void *)(v14 + 8) = v13;
        if (v13) {
          *(void *)(v12 + 16) = v14 + 8;
        }
        *(void *)(v14 + 16) = v11;
        *uint64_t v11 = v9;
      }
      v3 += 8;
      v2 += 32;
    }
    while (v4 != v3);
  }
  return result;
}

void sub_1CC275F00(unsigned char *a1, llvm::Instruction *this)
{
  if (a1[8])
  {
    if (*((void *)this + 5)) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    uint64_t v4 = (void *)(*(void *)(*(void *)a1 + 40) + 40);
    uint64_t v5 = *(void *)a1 + 24;
    sub_1CC5C6C08(v4, v5, this);
  }
  else
  {
    uint64_t v6 = *(void *)a1 + 40;
    for (uint64_t i = *(void *)(*(void *)a1 + 48); i != v6; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v8 = i - 24;
      if (!i) {
        uint64_t v8 = 0;
      }
      if (*(unsigned char *)(v8 + 16) != 83)
      {
        unsigned int v9 = *(unsigned __int8 *)(i - 8) - 38;
        BOOL v10 = v9 > 0x38;
        uint64_t v11 = (1 << v9) & 0x100060000000001;
        if (v10 || v11 == 0) {
          uint64_t v6 = i;
        }
        else {
          uint64_t v6 = *(void *)(i + 8);
        }
        break;
      }
    }
    if (v6) {
      uint64_t v13 = (void *)(v6 - 24);
    }
    else {
      uint64_t v13 = 0;
    }
    if (*((void *)this + 5))
    {
      llvm::Instruction::moveBefore(this, (llvm::Instruction *)v13);
    }
    else
    {
      uint64_t v14 = v13[5];
      *((void *)this + 5) = v14;
      *(_WORD *)(v14 + 18) &= ~0x8000u;
      if ((*((unsigned char *)this + 23) & 0x10) != 0)
      {
        uint64_t v18 = *(void *)(v14 + 56);
        if (v18)
        {
          uint64_t v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
          if (v19) {
            llvm::ValueSymbolTable::reinsertValue(v19, this);
          }
        }
      }
      uint64_t v16 = v13[3];
      uint64_t v15 = v13 + 3;
      *((void *)this + 3) = v16;
      *((void *)this + 4) = v15;
      uint64_t v17 = (char *)this + 24;
      *(void *)(v16 + 8) = v17;
      *uint64_t v15 = v17;
    }
  }
}

void sub_1CC276070()
{
}

uint64_t sub_1CC276084(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 24);
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  int v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v5 = v3 - 32 * (v4 & 0x7FFFFFF);
  }
  uint64_t v6 = v5 + 32 * v1;
  if (*(void *)v6)
  {
    **(void **)(v6 + 16) = *(void *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
    }
  }
  *(void *)uint64_t v6 = v2;
  if (v2)
  {
    uint64_t v10 = *(void *)(v2 + 8);
    uint64_t v8 = (void *)(v2 + 8);
    uint64_t v9 = v10;
    uint64_t v11 = v5 + 32 * v1;
    *(void *)(v11 + 8) = v10;
    if (v10) {
      *(void *)(v9 + 16) = v11 + 8;
    }
    *(void *)(v11 + 16) = v8;
    *uint64_t v8 = v6;
  }
  return result;
}

void sub_1CC2760FC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  v42[17] = *(void **)MEMORY[0x1E4F143B8];
  int v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void ***)(a1 - 8);
  }
  else {
    uint64_t v10 = (void **)(a1 - 32 * (v9 & 0x7FFFFFF));
  }
  uint64_t v11 = *v10;
  *a4 = 0;
  uint64_t v12 = v11[1];
  if (!v12 || *(void *)(v12 + 8)) {
    operator new();
  }
  v42[0] = 0;
  int v13 = sub_1CBB0BF40(*(void *)a3, *(_DWORD *)(a3 + 16), (uint64_t)v11, v42);
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = *(unsigned int *)(a3 + 16);
  if (v13) {
    BOOL v16 = v42[0] == (void *)(*(void *)a3 + 16 * v15);
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = a8;
  if (!v16)
  {
    if (((*((_DWORD *)v42[0] + 2) >> 1) & 3) == a8) {
      goto LABEL_20;
    }
    int v17 = 2;
  }
  unint64_t v18 = *v11 & 0xFFFFFFFFFFFFFFF9 | (2 * v17);
  uint64_t v40 = 0;
  char v19 = sub_1CBB0BF40(v14, v15, (uint64_t)v11, &v40);
  uint64_t v20 = v40;
  if (v19)
  {
LABEL_19:
    v20[1] = v18;
LABEL_20:
    operator new();
  }
  uint64_t v41 = v40;
  int v21 = *(_DWORD *)(a3 + 8);
  if (4 * v21 + 4 >= (3 * v15))
  {
    LODWORD(v15) = 2 * v15;
  }
  else if ((int)v15 + ~v21 - *(_DWORD *)(a3 + 12) > v15 >> 3)
  {
LABEL_16:
    *(_DWORD *)(a3 + 8) = v21 + 1;
    if (*v20 != -4096) {
      --*(_DWORD *)(a3 + 12);
    }
    *uint64_t v20 = v11;
    v20[1] = 0;
    goto LABEL_19;
  }
  uint64_t v22 = *(unsigned int *)(a3 + 16);
  uint64_t v23 = *(void *)a3;
  unint64_t v24 = (v15 - 1) | ((unint64_t)(v15 - 1) >> 1);
  unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
  int v26 = ((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8);
  if ((v26 + 1) > 0x40) {
    unsigned int v27 = v26 + 1;
  }
  else {
    unsigned int v27 = 64;
  }
  *(_DWORD *)(a3 + 16) = v27;
  uint64_t v28 = operator new(16 * v27, (std::align_val_t)8uLL);
  *(void *)a3 = v28;
  uint64_t v38 = v23;
  if (v23)
  {
    *(void *)(a3 + 8) = 0;
    uint64_t v29 = *(unsigned int *)(a3 + 16);
    if (v29)
    {
      uint64_t v30 = 16 * v29;
      do
      {
        *uint64_t v28 = -4096;
        v28 += 2;
        v30 -= 16;
      }
      while (v30);
    }
    if (v22)
    {
      int v31 = 0;
      uint64_t v32 = (void *)(v23 + 8);
      uint64_t v33 = 16 * v22;
      do
      {
        uint64_t v34 = *(v32 - 1);
        if ((v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v42[0] = 0;
          sub_1CBB0BF40(*(void *)a3, *(_DWORD *)(a3 + 16), v34, v42);
          unsigned int v35 = v42[0];
          *(void *)v42[0] = v34;
          v35[1] = *v32;
          *(_DWORD *)(a3 + 8) = ++v31;
        }
        v32 += 2;
        v33 -= 16;
      }
      while (v33);
    }
    MEMORY[0x1D25D9CD0](v38, 8);
    uint64_t v28 = *(void **)a3;
    LODWORD(v36) = *(_DWORD *)(a3 + 16);
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    uint64_t v36 = *(unsigned int *)(a3 + 16);
    if (v36)
    {
      uint64_t v37 = 0;
      do
      {
        v28[v37] = -4096;
        v37 += 2;
      }
      while (2 * v36 != v37);
    }
  }
  sub_1CBB0BF40((uint64_t)v28, v36, (uint64_t)v11, &v41);
  int v21 = *(_DWORD *)(a3 + 8);
  uint64_t v20 = v41;
  goto LABEL_16;
}

void sub_1CC276FF0()
{
}

uint64_t sub_1CC277004(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return result;
}

void sub_1CC277078()
{
}

uint64_t sub_1CC27708C(uint64_t result)
{
  **(void **)(result + 8) = *(void *)(result + 16);
  return result;
}

void sub_1CC27709C()
{
}

uint64_t sub_1CC2770B0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return result;
}

void sub_1CC277124()
{
}

void sub_1CC277138(uint64_t a1)
{
}

uint64_t sub_1CC277148(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC2771DC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC2772A8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC2772A8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC277148(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

BOOL sub_1CC277358(uint64_t a1, uint64_t a2, const llvm::APFloat *a3, llvm::Constant *a4, llvm::ValueAsMetadata *a5, int a6)
{
  uint64_t v8 = a4;
  v74[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 40) == *((void *)a5 + 5))
  {
    int v29 = *(unsigned __int8 *)(a2 + 16);
    if (a6 == 312 && v29 == 41)
    {
      uint64_t v30 = *(llvm::ConstantFP **)a4;
      if ((*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 0x12) {
        unsigned int v31 = *(unsigned __int8 *)(**((void **)v30 + 2) + 8);
      }
      else {
        unsigned int v31 = *(_DWORD *)(*(void *)a4 + 8);
      }
      if (v31 <= 6) {
        Zero = llvm::ConstantFP::getZero(v30, (llvm::Type *)1, a3);
      }
      else {
        Zero = llvm::Constant::getNullValue(v30, (llvm::Type *)a2, a3);
      }
      uint64_t v34 = Zero;
      uint64_t v35 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v8, v33);
      if (!v35)
      {
        uint64_t v53 = *(void ***)v34;
        if (*(void *)v34)
        {
          v56[0] = v34;
          v56[1] = v8;
          uint64_t v54 = **v53 + 1512;
          LODWORD(v58) = 15;
          uint64_t v59 = (uint64_t)v56;
          uint64_t v60 = 2;
          long long v61 = 0u;
          long long v62 = 0u;
          int64_t v63 = 0;
          uint64_t v35 = sub_1CC56C20C(v54, (uint64_t)v53, (unsigned __int8 *)&v58);
        }
        else
        {
          uint64_t v35 = 0;
        }
      }
      int v29 = *(unsigned __int8 *)(a2 + 16);
      uint64_t v8 = (llvm::Constant *)v35;
    }
    uint64_t v36 = *(void *)(*((void *)a5 + 5) + 48);
    uint64_t v37 = (llvm::ValueAsMetadata *)(v36 - 24);
    if (!v36) {
      uint64_t v37 = 0;
    }
    BOOL v39 = v29 != 58 && v37 == (llvm::ValueAsMetadata *)a2;
    if (v37 != a5 && !v39)
    {
      do
      {
        uint64_t v36 = *(void *)(v36 + 8);
        uint64_t v37 = (llvm::ValueAsMetadata *)(v36 - 24);
        if (!v36) {
          uint64_t v37 = 0;
        }
        BOOL v41 = v29 != 58 && v37 == (llvm::ValueAsMetadata *)a2;
      }
      while (v37 != a5 && !v41);
    }
    uint64_t v43 = 0;
    uint64_t v44 = **(void **)v37;
    uint64_t v58 = &v60;
    uint64_t v59 = 0x200000000;
    uint64_t v64 = v44;
    int v65 = &v73;
    uint64_t v66 = v74;
    uint64_t v67 = 0;
    int v68 = 0;
    __int16 v69 = 512;
    char v70 = 7;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    int v73 = &unk_1F2616E88;
    v74[0] = &unk_1F2617008;
    *((void *)&v62 + 1) = *((void *)v37 + 5);
    int64_t v63 = (void **)((char *)v37 + 24);
    uint64_t v45 = (unsigned __int8 *)*((void *)v37 + 6);
    uint64_t v55 = v45;
    if (v45)
    {
      llvm::MetadataTracking::track((uint64_t)&v55, v45, 2);
      uint64_t v43 = (uint64_t)v55;
    }
    sub_1CB8461A4((uint64_t)&v58, 0, v43);
    if (!v55)
    {
LABEL_52:
      __int16 v57 = 257;
      BinaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)&v58, a6, a3, v8, 0, (const llvm::Twine *)v56);
      if (*(unsigned char *)(a2 + 16) != 58)
      {
        LODWORD(v55) = 0;
        v56[0] = "math";
        __int16 v57 = 259;
        unsigned int v47 = sub_1CC2415A4((uint64_t)&v58, BinaryIntrinsic, (unsigned int *)&v55, 1, (uint64_t)v56);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v47, (llvm::Value *)1);
      }
      LODWORD(v55) = 1;
      v56[0] = "ov";
      __int16 v57 = 259;
      unsigned int v48 = sub_1CC2415A4((uint64_t)&v58, BinaryIntrinsic, (unsigned int *)&v55, 1, (uint64_t)v56);
      llvm::Value::doRAUW(a5, v48, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v49 = *v55;
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        uint64_t v52 = v55;
      }
      else {
        uint64_t v52 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v55 + 1) = 0;
        }
        goto LABEL_52;
      }
      unint64_t v51 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v55[1] & 0x7F) != 2 && !*((_DWORD *)v55 + 3)) {
        goto LABEL_52;
      }
      uint64_t v50 = *((void *)v55 + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_52;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_52;
      }
    }
    v56[0] = &v55;
    sub_1CC5FA668(v51 + 16, v56);
    goto LABEL_52;
  }
  BOOL result = sub_1CC2778A4((llvm::Instruction *)a2, *(uint64_t **)(a1 + 80));
  if (result)
  {
    unsigned int v13 = *(uint64_t **)(a1 + 80);
    uint64_t v14 = *(void *)(a2 + 40);
    int v15 = *((_DWORD *)v13 + 4);
    if (!v15) {
      goto LABEL_18;
    }
    uint64_t v16 = *v13;
    unsigned int v17 = v15 - 1;
    uint64_t v18 = ((v14 >> 4) ^ (v14 >> 9)) & v17;
    uint64_t v19 = *(void *)(v16 + 16 * v18);
    if (v14 == v19)
    {
LABEL_8:
      uint64_t v22 = *(void *)(v16 + 16 * v18 + 8);
    }
    else
    {
      int v20 = 1;
      while (v19 != -4096)
      {
        int v21 = v18 + v20++;
        uint64_t v18 = v21 & v17;
        uint64_t v19 = *(void *)(v16 + 16 * v18);
        if (v14 == v19) {
          goto LABEL_8;
        }
      }
      uint64_t v22 = 0;
    }
    uint64_t v23 = *((void *)a5 + 5);
    uint64_t v24 = ((v23 >> 4) ^ (v23 >> 9)) & v17;
    uint64_t v25 = *(void *)(v16 + 16 * v24);
    if (v23 == v25)
    {
LABEL_14:
      uint64_t v28 = *(void *)(v16 + 16 * v24 + 8);
    }
    else
    {
      int v26 = 1;
      while (v25 != -4096)
      {
        int v27 = v24 + v26++;
        uint64_t v24 = v27 & v17;
        uint64_t v25 = *(void *)(v16 + 16 * v24);
        if (v23 == v25) {
          goto LABEL_14;
        }
      }
      uint64_t v28 = 0;
    }
    if (v28 == v22)
    {
LABEL_18:
      sub_1CC277940(a1);
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC2778A4(llvm::Instruction *a1, uint64_t *a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (*((unsigned __int8 *)a1 + 16) >= 0x1Cu)
    {
      uint64_t v8 = 0;
      int v7 = 0;
      BOOL result = matchIncrement(a1, &v8, &v7);
      if (result)
      {
        BOOL result = 0;
        if (v8)
        {
          if (*((unsigned char *)v8 + 16) == 83)
          {
            sub_1CC2779DC(&v5, (uint64_t)v8, a2);
            return v6 && v5 == a1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC277940(uint64_t a1)
{
  if (!*(void *)(a1 + 728)) {
    operator new();
  }
  return *(void *)(a1 + 728);
}

unsigned char *sub_1CC2779DC(unsigned char *result, uint64_t a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a3 + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    uint64_t v5 = *a3;
    unsigned int v6 = v3 - 1;
    uint64_t v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    uint64_t v8 = *(void *)(*a3 + 16 * v7);
    if (v4 == v8)
    {
LABEL_6:
      uint64_t v11 = *(void *)(v5 + 16 * v7 + 8);
      if (v11 && **(void **)(v11 + 32) == v4) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
      }
    }
    else
    {
      int v9 = 1;
      while (v8 != -4096)
      {
        int v10 = v7 + v9++;
        uint64_t v7 = v10 & v6;
        uint64_t v8 = *(void *)(v5 + 16 * v7);
        if (v4 == v8) {
          goto LABEL_6;
        }
      }
    }
  }
  *BOOL result = 0;
  result[16] = 0;
  return result;
}

BOOL sub_1CC277B80(unsigned __int8 *a1)
{
  if (*a1)
  {
    if (*a1 - 120 >= 0x33)
    {
      unsigned int ExtendedSizeInBits = sub_1CB87E200(a1);
      goto LABEL_4;
    }
    return 0;
  }
  if (*(unsigned char *)(*((void *)a1 + 1) + 8) == 19) {
    return 0;
  }
  unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
LABEL_4:
  if (v2 == 1)
  {
    unsigned int v4 = ExtendedSizeInBits;
    unsigned int ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits >= 8 && (ExtendedSizeInBits & (ExtendedSizeInBits - 1)) == 0;
}

BOOL sub_1CC277C0C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  char v3 = a2;
  v11[0] = a2;
  v11[1] = a3;
  if (*a1) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200(a1);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  }
  unint64_t v6 = ExtendedSizeInBits;
  int v7 = v5;
  if (v3) {
    unint64_t v8 = sub_1CB87E200((unsigned __int8 *)v11);
  }
  else {
    unint64_t v8 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v11);
  }
  return (v7 == 1 || v9 != 1) && v6 > v8;
}

void *sub_1CC277C98(_DWORD *a1, int32x2_t ****a2)
{
  uint64_t v46 = 2;
  unsigned int v47 = 0;
  unsigned int v48 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v46);
  }
  uint64_t v45 = &off_1F2609D30;
  int v49 = a1;
  int v3 = a1[4];
  if (v3)
  {
    unsigned int v4 = v48;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = ((v48 >> 4) ^ (v48 >> 9)) & v5;
    int v7 = (void *)(*(void *)a1 + (v6 << 6));
    unint64_t v8 = (int32x2_t ****)v7[3];
    if (v48 == v8) {
      goto LABEL_7;
    }
    int v20 = 0;
    int v21 = 1;
    while (v8 != (int32x2_t ****)-4096)
    {
      if (v20) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v8 == (int32x2_t ****)-8192;
      }
      if (v43) {
        int v20 = v7;
      }
      int v44 = v6 + v21++;
      uint64_t v6 = v44 & v5;
      int v7 = (void *)(*(void *)a1 + (v6 << 6));
      unint64_t v8 = (int32x2_t ****)v7[3];
      if (v48 == v8) {
        goto LABEL_7;
      }
    }
    if (v20) {
      uint64_t v22 = (uint64_t)v20;
    }
    else {
      uint64_t v22 = (uint64_t)v7;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  int v7 = (void *)sub_1CC260734(a1, (uint64_t)&v45, v22);
  uint64_t v23 = (int32x2_t ****)v7[3];
  uint64_t v24 = v48;
  if (v23 != v48)
  {
    BOOL v25 = v23 == (int32x2_t ****)-4096 || v23 == 0;
    if (!v25 && v23 != (int32x2_t ****)-8192)
    {
      unint64_t v31 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v31 = v7[2];
      uint64_t v32 = (unint64_t *)v7[2];
      if (v32)
      {
        *uint64_t v32 = *v32 & 7 | v31;
      }
      else
      {
        uint64_t v33 = v7[3];
        uint64_t v34 = ***(int32x2_t ****)v33;
        unint64_t v35 = (unint64_t)v34[303];
        if (v35 <= v31)
        {
          uint64_t v36 = v34[305].u32[0];
          if (v35 + 16 * v36 > v31)
          {
            unsigned int v37 = v36 - 1;
            LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
            BOOL v39 = (uint64_t *)(v35 + 16 * v38);
            uint64_t v40 = *v39;
            if (v33 == *v39)
            {
LABEL_50:
              *BOOL v39 = -8192;
              v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v33 = v7[3];
            }
            else
            {
              int v41 = 1;
              while (v40 != -4096)
              {
                int v42 = v38 + v41++;
                uint64_t v38 = v42 & v37;
                uint64_t v40 = *(void *)(v35 + 16 * v38);
                if (v33 == v40)
                {
                  BOOL v39 = (uint64_t *)(v35 + 16 * v38);
                  goto LABEL_50;
                }
              }
            }
            *(unsigned char *)(v33 + 17) &= ~1u;
          }
        }
      }
      uint64_t v24 = v48;
    }
    v7[3] = v24;
    if (v24 != (int32x2_t ****)-4096 && v24 != (int32x2_t ****)-8192 && v24 != 0)
    {
      uint64_t v27 = v46;
      uint64_t v28 = (void *)(v46 & 0xFFFFFFFFFFFFFFF8);
      void v7[2] = *(void *)(v46 & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v28 = v7 + 1;
      v7[1] = v27 & 0xFFFFFFFFFFFFFFF8 | v7[1] & 7;
      int v29 = (unint64_t *)v7[2];
      if (v29) {
        *int v29 = *v29 & 7 | (unint64_t)(v7 + 2);
      }
    }
  }
  unsigned int v4 = v48;
  void v7[4] = v49;
  v7[5] = 6;
  v7[6] = 0;
  v7[7] = 0;
LABEL_7:
  if (v4 != (int32x2_t ****)-8192 && v4 != (int32x2_t ****)-4096 && v4)
  {
    unint64_t v9 = v46 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v46 & 0xFFFFFFFFFFFFFFF8) = v47;
    if (v47)
    {
      *unsigned int v47 = *v47 & 7 | v9;
    }
    else
    {
      int v10 = v48;
      uint64_t v11 = ***v48;
      unint64_t v12 = (unint64_t)v11[303];
      if (v12 <= v9)
      {
        uint64_t v13 = v11[305].u32[0];
        if (v12 + 16 * v13 > v9)
        {
          unsigned int v14 = v13 - 1;
          LODWORD(v15) = v14 & ((v48 >> 4) ^ (v48 >> 9));
          uint64_t v16 = (int32x2_t *****)(v12 + 16 * v15);
          unsigned int v17 = *v16;
          if (v48 == *v16)
          {
LABEL_18:
            *uint64_t v16 = (int32x2_t ****)-8192;
            v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
            int v10 = v48;
          }
          else
          {
            int v18 = 1;
            while (v17 != (int32x2_t ****)-4096)
            {
              int v19 = v15 + v18++;
              uint64_t v15 = v19 & v14;
              unsigned int v17 = *(int32x2_t *****)(v12 + 16 * v15);
              if (v48 == v17)
              {
                uint64_t v16 = (int32x2_t *****)(v12 + 16 * v15);
                goto LABEL_18;
              }
            }
          }
          *((unsigned char *)v10 + 17) &= ~1u;
        }
      }
    }
  }
  return v7 + 5;
}

llvm::Instruction *sub_1CC277FE0(uint64_t a1, llvm::CastInst *this, llvm::Value *a3, uint64_t a4, llvm::Instruction *a5)
{
  unsigned int v5 = this;
  if (*(llvm::Value **)this == a3) {
    return v5;
  }
  if (*((unsigned __int8 *)this + 16) > 0x14u)
  {
    __int16 v14 = 257;
    unsigned int v5 = llvm::CastInst::CreatePointerCast(this, a3, &v13, 0, a5);
    (*(void (**)(void, llvm::Value *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if (v8)
    {
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = v11 + 16 * v8;
      do
      {
        llvm::Instruction::setMetadata(v5, *(_DWORD *)v11, *(llvm::MDNode **)(v11 + 8));
        v11 += 16;
      }
      while (v11 != v12);
    }
    return v5;
  }
  unsigned int v5 = (llvm::Value *)(*(uint64_t (**)(void, llvm::CastInst *, llvm::Value *))(**(void **)(a1 + 72) + 232))(*(void *)(a1 + 72), this, a3);
  if (v5) {
    BOOL v10 = *((unsigned __int8 *)v5 + 16) >= 0x1Cu;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    return v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, v5, a4);
}

llvm::Instruction *sub_1CC278130(uint64_t *a1, uint64_t a2, uint64_t *a3, const char *a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v18 = a4;
  v19[0] = a4;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, const char **, uint64_t, uint64_t))(*(void *)a1[9] + 48))(a1[9], a2, a3, v19, 1, 1);
  if (v9) {
    return (llvm::Instruction *)v9;
  }
  __int16 v20 = 257;
  BOOL v10 = (char *)operator new(0x90uLL);
  *((_DWORD *)v10 + 21) = *((_DWORD *)v10 + 21) & 0x38000000 | 2;
  uint64_t v11 = (llvm::Instruction *)(v10 + 64);
  *(void *)BOOL v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 64;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = v10 + 64;
  sub_1CB845A7C(a2, a3, (uint64_t)&v18, 1);
  *((void *)v10 + 8) = v12;
  *((void *)v10 + 9) = 0;
  unsigned int v13 = *((_DWORD *)v10 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v10 + 20) = 62;
  *((_DWORD *)v10 + 21) = v13;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  *((void *)v10 + 16) = a2;
  *((void *)v10 + 17) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)&v18, 1);
  llvm::GetElementPtrInst::init((uint64_t ***)v10 + 8, (uint64_t **)a3, (uint64_t *)&v18, 1, v19);
  v10[81] |= 2u;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v10 + 64, a5, a1[6], a1[7]);
  uint64_t v14 = *((unsigned int *)a1 + 2);
  if (v14)
  {
    uint64_t v16 = *a1;
    uint64_t v17 = v16 + 16 * v14;
    do
    {
      llvm::Instruction::setMetadata(v11, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v11;
}

uint64_t sub_1CC2782FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v119[32] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  if (v7) {
    uint64_t v8 = *(void *)(*(void *)v6 + 8 * v7 - 8);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v9 == 16)
  {
    BOOL v10 = (unint64_t *)(a2 + 24);
    uint64_t v11 = *(unsigned int *)(a2 + 32);
    unsigned int v12 = v11 - 1;
    if (v11 > 0x40)
    {
      unint64_t v13 = *v10;
      if ((*(void *)(*v10 + 8 * (v12 >> 6)) >> v12))
      {
        if (v11 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(a2 + 24)) + 1 >= 0x41) {
          goto LABEL_110;
        }
        goto LABEL_103;
      }
      int v61 = 0;
      int64_t v62 = (unint64_t)(v11 + 63) >> 6;
      do
      {
        if (v62-- < 1) {
          break;
        }
        unint64_t v64 = *(void *)(v13 + 8 * v62);
        v61 += __clz(v64);
      }
      while (!v64);
      int v65 = v11 | 0xFFFFFFC0;
      if ((v11 & 0x3F) == 0) {
        int v65 = 0;
      }
      int v17 = v61 + v65;
    }
    else
    {
      unint64_t v13 = *v10;
      unint64_t v14 = *v10 >> v12;
      int v15 = v11 + __clz(*v10) - 64;
      int v16 = __clz(~(*v10 << -(char)v11));
      if (!v11) {
        int v16 = 0;
      }
      if (v14) {
        int v17 = v16;
      }
      else {
        int v17 = v15;
      }
    }
    if ((v11 - v17 + 1) >= 0x41) {
      goto LABEL_110;
    }
    if (v11 <= 0x40)
    {
      uint64_t v18 = (uint64_t)(v13 << -(char)v11) >> -(char)v11;
LABEL_104:
      *(void *)(*(void *)(a1 + 96) + 8) += v18;
      if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 1064))(*(void *)(a1 + 8), *(void *)(a1 + 24)))return 1; {
      unsigned int v67 = *(_DWORD *)(a2 + 32);
      }
      if (v67 > 0x40) {
        uint64_t v68 = *(void *)*v10;
      }
      else {
        uint64_t v68 = (uint64_t)(*v10 << -(char)v67) >> -(char)v67;
      }
      *(void *)(*(void *)(a1 + 96) + 8) -= v68;
LABEL_110:
      uint64_t v69 = *(void *)(a1 + 96);
      if (!*(unsigned char *)(v69 + 16))
      {
        uint64_t v66 = 1;
        *(unsigned char *)(v69 + 16) = 1;
        *(void *)(v69 + 32) = a2;
        if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 1064))(*(void *)(a1 + 8), *(void *)(a1 + 24)))return v66; {
        uint64_t v69 = *(void *)(a1 + 96);
        }
        *(unsigned char *)(v69 + 16) = 0;
        *(void *)(v69 + 32) = 0;
      }
      if (!*(void *)(v69 + 24))
      {
        uint64_t v66 = 1;
        *(void *)(v69 + 24) = 1;
        *(void *)(v69 + 40) = a2;
        if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 1064))(*(void *)(a1 + 8), *(void *)(a1 + 24)))return v66; {
        uint64_t v70 = *(void *)(a1 + 96);
        }
        *(void *)(v70 + 24) = 0;
        *(void *)(v70 + 40) = 0;
      }
      sub_1CC274118(*(void *)(a1 + 120), v8);
      return 0;
    }
LABEL_103:
    uint64_t v18 = *(void *)v13;
    goto LABEL_104;
  }
  if (a2 && v9 <= 3)
  {
    int v19 = *(uint64_t **)(a1 + 96);
    if (*v19) {
      goto LABEL_110;
    }
    *int v19 = a2;
    if (((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 1064))(*(void *)(a1 + 8), *(void *)(a1 + 24)) & 1) == 0)
    {
      **(void **)(a1 + 96) = 0;
      goto LABEL_110;
    }
    return 1;
  }
  if (a2 && (int v20 = v9 - 28, v9 >= 0x1C))
  {
    uint64_t v21 = *(long long **)(a1 + 96);
    long long v22 = v21[1];
    long long v83 = *v21;
    long long v84 = v22;
    uint64_t v23 = (llvm::Value *)*((void *)v21 + 4);
    uint64_t v24 = (llvm::Value *)*((void *)v21 + 5);
    long long v82 = v21[3];
    uint64_t v25 = *(unsigned int *)(*(void *)a1 + 8);
    char v81 = 0;
    if (!sub_1CC278CF8((uint64_t *)a1, a2, v20, a3, &v81)) {
      goto LABEL_110;
    }
    if (!v81)
    {
      uint64_t v26 = *(void *)(a2 + 8);
      if (v26 && !*(void *)(v26 + 8) || *(unsigned char *)(a1 + 136)) {
        goto LABEL_89;
      }
      uint64_t v27 = *(void *)(a1 + 96);
      uint64_t v28 = *(llvm::Value **)(v27 + 32);
      int v29 = *(llvm::Value **)(v27 + 40);
      uint64_t v73 = v25;
      uint64_t v78 = v23;
      char v30 = sub_1CC27A360(a1, v28, v23, v24);
      int v31 = sub_1CC27A360(a1, v29, v23, v24);
      if (v28) {
        char v32 = v30 ^ 1;
      }
      else {
        char v32 = 0;
      }
      int v33 = v31 ^ 1;
      if (!v29) {
        int v33 = 0;
      }
      if ((v32 & 1) == 0 && !v33) {
        goto LABEL_89;
      }
      uint64_t v72 = v24;
      unsigned int v117 = (char *)v119;
      uint64_t v118 = 0x1000000000;
      int v91 = v95;
      unsigned int v92 = v95;
      uint64_t v93 = 16;
      int v94 = 0;
      int v34 = 0;
      if ((sub_1CC27A3E0((uint64_t *)a2, (uint64_t)&v117, (uint64_t)&v91, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 137), *(llvm::ProfileSummaryInfo **)(a1 + 144), *(llvm::BlockFrequencyInfoImplBase ***)(a1 + 152), 0) & 1) == 0)
      {
        int v114 = v116;
        uint64_t v115 = 0x2000000000;
        int v34 = 1;
        if (v118)
        {
          unint64_t v35 = v117;
          uint64_t v74 = &v117[16 * v118];
          uint64_t v36 = (void *)(a1 + 40);
          while (1)
          {
            unsigned int v37 = *(uint64_t **)v35;
            uint64_t v38 = **(void **)v35;
            unsigned int v39 = *(_DWORD *)(v38 + 8);
            if ((v39 & 0xFE) == 0x12) {
              unsigned int v39 = *(_DWORD *)(**(void **)(v38 + 16) + 8);
            }
            uint64_t v40 = *((void *)v35 + 1);
            v86[0] = 0;
            v86[1] = 0;
            char v87 = 0;
            long long v88 = 0u;
            long long v89 = 0u;
            char v90 = 1;
            v85[0] = 0;
            v85[1] = 0;
            uint64_t v41 = *(void *)(a1 + 120);
            uint64_t v42 = *(unsigned int *)(v41 + 8);
            uint64_t v43 = v42 ? *(void *)(*(void *)v41 + 8 * v42 - 8) : 0;
            long long v44 = *(_OWORD *)(a1 + 8);
            uint64_t v45 = *(void *)(a1 + 32);
            uint64_t v46 = *(void **)(a1 + 64);
            uint64_t v79 = v43;
            uint64_t v80 = v37;
            if (v46)
            {
              long long v76 = *(_OWORD *)(a1 + 8);
              if (v46 == v36)
              {
                uint64_t v97 = v96;
                (*(void (**)(void *, void *))(*v36 + 24))(v36, v96);
                uint64_t v46 = v97;
              }
              else
              {
                uint64_t v46 = (void *)(*(uint64_t (**)(void *))(*v46 + 16))(v46);
                uint64_t v97 = v46;
              }
              long long v44 = v76;
            }
            else
            {
              uint64_t v97 = 0;
            }
            uint64_t v47 = *(void *)(a1 + 88);
            long long v48 = *(_OWORD *)(a1 + 104);
            uint64_t v49 = *(void *)(a1 + 120);
            char v50 = *(unsigned char *)(a1 + 137);
            long long v51 = *(_OWORD *)(a1 + 144);
            uint64_t v98 = (void **)&v114;
            long long v99 = v44;
            uint64_t v100 = *(void *)(*(void *)(*(void *)(v47 + 40) + 56) + 40) + 272;
            uint64_t v101 = v45;
            if (v46)
            {
              long long v75 = v48;
              long long v77 = v51;
              if (v46 == v96)
              {
                unint64_t v103 = v102;
                (*(void (**)(void *, void *))(v96[0] + 24))(v96, v102);
              }
              else
              {
                unint64_t v103 = (void *)(*(uint64_t (**)(void *))(*v46 + 16))(v46);
              }
              long long v48 = v75;
              long long v51 = v77;
            }
            else
            {
              unint64_t v103 = 0;
            }
            uint64_t v104 = v40;
            unsigned int v105 = v39 >> 8;
            uint64_t v106 = v47;
            unint64_t v107 = v86;
            long long v108 = v48;
            uint64_t v109 = v49;
            char v110 = v85;
            char v112 = v50;
            long long v113 = v51;
            char v111 = 0;
            if (v97 == v96)
            {
              (*(void (**)(void *))(v96[0] + 32))(v96);
              uint64_t v52 = v80;
            }
            else
            {
              uint64_t v52 = v80;
              if (v97) {
                (*(void (**)(void *))(*v97 + 40))(v97);
              }
            }
            char v111 = 1;
            sub_1CC2782FC(&v98, v52, 0);
            sub_1CC274118(*(void *)(a1 + 120), v79);
            if (v115)
            {
              uint64_t v53 = 8 * v115;
              uint64_t v54 = v114;
              while (*(void *)v54 != a2)
              {
                v54 += 8;
                v53 -= 8;
                if (!v53)
                {
                  uint64_t v54 = &v114[8 * v115];
                  break;
                }
              }
            }
            else
            {
              uint64_t v54 = v114;
            }
            if (v115 == (v54 - v114) >> 3) {
              break;
            }
            LODWORD(v115) = 0;
            if (v103 == v102)
            {
              (*(void (**)(void *))(v102[0] + 32))(v102);
            }
            else if (v103)
            {
              (*(void (**)(void))(*v103 + 40))();
            }
            v35 += 16;
            uint64_t v36 = (void *)(a1 + 40);
            if (v35 == v74)
            {
              int v34 = 1;
              LODWORD(v25) = v73;
              uint64_t v23 = v78;
              goto LABEL_82;
            }
          }
          if (v103 == v102)
          {
            (*(void (**)(void *))(v102[0] + 32))(v102);
            LODWORD(v25) = v73;
            uint64_t v23 = v78;
          }
          else
          {
            LODWORD(v25) = v73;
            uint64_t v23 = v78;
            if (v103) {
              (*(void (**)(void))(*v103 + 40))();
            }
          }
          int v34 = 0;
        }
LABEL_82:
        if (v114 != v116) {
          free(v114);
        }
      }
      if (v92 != v91) {
        free(v92);
      }
      if (v117 != (char *)v119) {
        free(v117);
      }
      if (v34)
      {
LABEL_89:
        uint64_t v55 = *(void *)a1;
        unsigned int v56 = *(_DWORD *)(v55 + 8);
        if (v56 >= *(_DWORD *)(v55 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v55 + 8 * v56) = a2;
        ++*(_DWORD *)(v55 + 8);
        return 1;
      }
      uint64_t v57 = *(void *)(a1 + 96);
      long long v58 = v84;
      *(_OWORD *)uint64_t v57 = v83;
      *(_OWORD *)(v57 + 16) = v58;
      *(void *)(v57 + 32) = v23;
      *(void *)(v57 + 40) = v72;
      *(void *)(v57 + 48) = v82;
      *(unsigned char *)(v57 + 56) = BYTE8(v82);
      uint64_t v59 = *(void *)a1;
      unsigned int v60 = *(_DWORD *)(*(void *)a1 + 8);
      if (v60 != v25)
      {
        if (v60 <= v25)
        {
          if (*(_DWORD *)(v59 + 12) < v25) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          LODWORD(v25) = v73;
          if (v60 != v73) {
            bzero((void *)(*(void *)v59 + 8 * v60), 8 * (v73 - v60));
          }
        }
        *(_DWORD *)(v59 + 8) = v25;
      }
      goto LABEL_74;
    }
  }
  else
  {
    if (a2 && v9 == 5)
    {
      if (sub_1CC278CF8((uint64_t *)a1, a2, *(unsigned __int16 *)(a2 + 18), a3, 0)) {
        return 1;
      }
LABEL_74:
      sub_1CC274118(*(void *)(a1 + 120), v8);
      goto LABEL_110;
    }
    if (v9 != 19) {
      goto LABEL_110;
    }
  }
  return 1;
}

uint64_t sub_1CC278CF8(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unsigned char *a5)
{
  if (a4 > 4) {
    return 0;
  }
  if (a5) {
    *a5 = 0;
  }
  uint64_t result = 0;
  if (a3 <= 33)
  {
    if (a3 == 13)
    {
      uint64_t v40 = a1[12];
      long long v41 = *(_OWORD *)(v40 + 16);
      long long v177 = *(_OWORD *)v40;
      long long v178 = v41;
      long long v42 = *(_OWORD *)(v40 + 48);
      *(_OWORD *)unsigned int v179 = *(_OWORD *)(v40 + 32);
      *(_OWORD *)&v179[16] = v42;
      uint64_t v43 = a1[15];
      uint64_t v44 = *(unsigned int *)(v43 + 8);
      if (v44) {
        uint64_t v14 = *(void *)(*(void *)v43 + 8 * v44 - 8);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v95 = *(unsigned int *)(*a1 + 8);
      *(unsigned char *)(v40 + 56) = 0;
      int v96 = *(_DWORD *)(a2 + 20);
      if ((v96 & 0x40000000) != 0) {
        uint64_t v97 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v97 = a2 - 32 * (v96 & 0x7FFFFFF);
      }
      uint64_t v98 = (a4 + 1);
      if (sub_1CC2782FC(a1, *(void *)(v97 + 32), v98))
      {
        int v99 = *(_DWORD *)(a2 + 20);
        uint64_t v100 = (v99 & 0x40000000) != 0 ? *(void **)(a2 - 8) : (void *)(a2 - 32 * (v99 & 0x7FFFFFF));
        if (sub_1CC2782FC(a1, *v100, v98)) {
          return 1;
        }
      }
      unint64_t v107 = (_OWORD *)a1[12];
      long long v108 = v178;
      *unint64_t v107 = v177;
      v107[1] = v108;
      v107[2] = *(_OWORD *)v179;
      *(_OWORD *)((char *)v107 + 41) = *(_OWORD *)&v179[9];
      uint64_t v109 = (void *)*a1;
      unsigned int v110 = *(_DWORD *)(*a1 + 8);
      if (v110 != v95)
      {
        if (v110 <= v95)
        {
          unsigned int v171 = (void *)*a1;
          if (*((_DWORD *)v109 + 3) < v95) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v109 = (void *)*a1;
          if (v110 != v95)
          {
            bzero((void *)(*v171 + 8 * v110), 8 * (v95 - v110));
            uint64_t v109 = v171;
          }
        }
        *((_DWORD *)v109 + 2) = v95;
      }
      sub_1CC274118(a1[15], v14);
      int v111 = *(_DWORD *)(a2 + 20);
      char v112 = (v111 & 0x40000000) != 0 ? *(void **)(a2 - 8) : (void *)(a2 - 32 * (v111 & 0x7FFFFFF));
      if (sub_1CC2782FC(a1, *v112, v98))
      {
        int v113 = *(_DWORD *)(a2 + 20);
        uint64_t v114 = (v113 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v113 & 0x7FFFFFF);
        if (sub_1CC2782FC(a1, *(void *)(v114 + 32), v98)) {
          return 1;
        }
      }
      unint64_t v128 = (_OWORD *)a1[12];
      long long v129 = v178;
      *unint64_t v128 = v177;
      v128[1] = v129;
      v128[2] = *(_OWORD *)v179;
      *(_OWORD *)((char *)v128 + 41) = *(_OWORD *)&v179[9];
      uint64_t v130 = *a1;
      unsigned int v131 = *(_DWORD *)(*a1 + 8);
      if (v131 != v95)
      {
        if (v131 <= v95)
        {
          if (*(_DWORD *)(v130 + 12) < v95) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v131 != v95) {
            bzero((void *)(*(void *)v130 + 8 * v131), 8 * (v95 - v131));
          }
        }
        *(_DWORD *)(v130 + 8) = v95;
      }
LABEL_175:
      sub_1CC274118(a1[15], v14);
    }
    else
    {
      if (a3 != 17 && a3 != 25) {
        return result;
      }
      *(unsigned char *)(a1[12] + 56) = 0;
      int v15 = *(_DWORD *)(a2 + 20);
      uint64_t v16 = (v15 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v15 & 0x7FFFFFF);
      uint64_t result = 0;
      uint64_t v45 = *(void *)(v16 + 32);
      if (!v45 || *(unsigned char *)(v45 + 16) != 16) {
        return result;
      }
      unsigned int v46 = *(_DWORD *)(v45 + 32);
      if (v46 <= 0x40)
      {
        if (a3 == 25)
        {
          unint64_t v47 = v46 - 1;
          unint64_t v48 = *(void *)(v45 + 24);
          if (v48 >= v47) {
            LOBYTE(v48) = v47;
          }
          uint64_t v49 = 1 << v48;
        }
        else
        {
          uint64_t v49 = (uint64_t)(*(void *)(v45 + 24) << -(char)v46) >> -(char)v46;
        }
        if ((v15 & 0x40000000) != 0) {
          uint64_t v115 = *(unsigned char ***)(a2 - 8);
        }
        else {
          uint64_t v115 = (unsigned char **)(a2 - 32 * (v15 & 0x7FFFFFF));
        }
        unsigned int v116 = *v115;
        return sub_1CC279BDC(a1, v116, v49, a4);
      }
    }
    return 0;
  }
  switch(a3)
  {
    case '""':
      BOOL v21 = *(unsigned char *)(a2 + 16) != 62 || a2 == 0;
      uint64_t v22 = 64;
      if (v21) {
        uint64_t v22 = 24;
      }
      uint64_t v23 = *(void *)(a2 + v22);
      int v24 = *(_DWORD *)(a2 + 20);
      if ((v24 & 0x40000000) != 0)
      {
        uint64_t v26 = *(void *)(a2 - 8);
        int v25 = v24 & 0x7FFFFFF;
      }
      else
      {
        int v25 = v24 & 0x7FFFFFF;
        uint64_t v26 = a2 - 32 * (v24 & 0x7FFFFFF);
      }
      uint64_t v175 = (llvm::Constant **)(v26 + 32);
      uint64_t v176 = v23 | 4;
      if (v25 == 1)
      {
        uint64_t v56 = 0;
        uint64_t v57 = a1 + 12;
LABEL_69:
        int v58 = *(_DWORD *)(a2 + 20);
        if ((v58 & 0x40000000) != 0) {
          uint64_t v59 = *(void **)(a2 - 8);
        }
        else {
          uint64_t v59 = (void *)(a2 - 32 * (v58 & 0x7FFFFFF));
        }
        if (sub_1CC2782FC(a1, *v59, (a4 + 1)))
        {
          if ((*(unsigned char *)(a2 + 17) & 2) == 0) {
            *(unsigned char *)(*v57 + 56) = 0;
          }
          return 1;
        }
        goto LABEL_257;
      }
      unsigned int v173 = 0;
      uint64_t v56 = 0;
      unsigned int v174 = -1;
      uint64_t v60 = 1;
      break;
    case '\'':
    case '(':
      if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
        return 0;
      }
      uint64_t result = (uint64_t)sub_1CC2741F8((uint64_t *)a2, (uint64_t *)a1[13], a1[1], a1[14]);
      if (result)
      {
        uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, llvm::Constant ***, void, void, uint64_t))result;
        uint64_t v12 = a1[15];
        uint64_t v13 = *(unsigned int *)(v12 + 8);
        if (v13) {
          uint64_t v14 = *(void *)(*(void *)v12 + 8 * v13 - 8);
        }
        else {
          uint64_t v14 = 0;
        }
        LODWORD(v175) = 0;
        int v117 = sub_1CB90CE98(a1[1], a2, v10);
        uint64_t v118 = v11(a2, a1[15], a1[14], &v175, 0, 0, a1[1]);
        if (a5) {
          *a5 = 1;
        }
        unsigned int v119 = (long long *)a1[12];
        long long v120 = v119[1];
        long long v177 = *v119;
        long long v178 = v120;
        long long v121 = v119[3];
        *(_OWORD *)unsigned int v179 = v119[2];
        *(_OWORD *)&v179[16] = v121;
        uint64_t v122 = *(unsigned int *)(*a1 + 8);
        if (!sub_1CC2782FC(a1, v118, a4)
          || (unsigned int v123 = *(_DWORD *)(*a1 + 8) - v122 + (v117 ^ 1), v175 > v123)
          || v175 >= v123 && !sub_1CC2746FC(a1[1], a1[3], v118))
        {
          BOOL v124 = (_OWORD *)a1[12];
          long long v125 = v178;
          _OWORD *v124 = v177;
          v124[1] = v125;
          v124[2] = *(_OWORD *)v179;
          *(_OWORD *)((char *)v124 + 41) = *(_OWORD *)&v179[9];
          uint64_t v126 = *a1;
          unsigned int v127 = *(_DWORD *)(*a1 + 8);
          if (v127 != v122)
          {
            if (v127 <= v122)
            {
              if (*(_DWORD *)(v126 + 12) < v122) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v127 != v122) {
                bzero((void *)(*(void *)v126 + 8 * v127), 8 * (v122 - v127));
              }
            }
            *(_DWORD *)(v126 + 8) = v122;
          }
          goto LABEL_175;
        }
        return 1;
      }
      return result;
    case '/':
      goto LABEL_194;
    case '0':
      unsigned int v27 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v27 & 0xFE) == 0x12) {
        unsigned int v27 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      uint64_t v28 = a1[3];
      if (v27 < 0x100) {
        goto LABEL_39;
      }
      unsigned int v29 = v27 >> 8;
      uint64_t v30 = *(unsigned int *)(v28 + 240);
      uint64_t v31 = *(void *)(v28 + 232);
      if (v30)
      {
        uint64_t v31 = *(void *)(v28 + 232);
        unint64_t v32 = *(unsigned int *)(v28 + 240);
        do
        {
          unint64_t v33 = v32 >> 1;
          uint64_t v34 = v31 + 16 * (v32 >> 1);
          unsigned int v35 = *(_DWORD *)(v34 + 8);
          uint64_t v36 = v34 + 16;
          v32 += ~(v32 >> 1);
          if (v35 < v29) {
            uint64_t v31 = v36;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      if (v31 == *(void *)(v28 + 232) + 16 * v30 || *(_DWORD *)(v31 + 8) != v29) {
LABEL_39:
      }
        uint64_t v31 = *(void *)(v28 + 232);
      int v37 = 0;
      int v38 = *(_DWORD *)(v31 + 4);
      if (v38 > 31)
      {
        if (v38 == 32)
        {
          int v39 = 5;
        }
        else if (v38 == 64)
        {
          int v39 = 6;
        }
        else
        {
          int v39 = 0;
          if (v38 != 128) {
            goto LABEL_184;
          }
          int v39 = 7;
        }
      }
      else if (v38 == 1)
      {
        int v39 = 2;
      }
      else if (v38 == 8)
      {
        int v39 = 3;
      }
      else
      {
        int v39 = 0;
        if (v38 != 16) {
          goto LABEL_184;
        }
        int v39 = 4;
      }
      int v37 = 1;
LABEL_184:
      int v132 = *(_DWORD *)(a2 + 20);
      if ((v132 & 0x40000000) != 0) {
        uint64_t v133 = *(llvm::EVT ****)(a2 - 8);
      }
      else {
        uint64_t v133 = (llvm::EVT ***)(a2 - 32 * (v132 & 0x7FFFFFF));
      }
      unsigned __int8 v134 = sub_1CB87DC14(a1[1], v28, **v133, 0);
      uint64_t result = 0;
      if (v135) {
        int v136 = v37;
      }
      else {
        int v136 = 1;
      }
      if (v39 == v134 && v136 != 0)
      {
LABEL_194:
        int v138 = *(_DWORD *)(a2 + 20);
        if ((v138 & 0x40000000) != 0) {
          unsigned int v139 = *(uint64_t ***)(a2 - 8);
        }
        else {
          unsigned int v139 = (uint64_t **)(a2 - 32 * (v138 & 0x7FFFFFF));
        }
        uint64_t v54 = *v139;
LABEL_198:
        return sub_1CC2782FC(a1, v54, a4);
      }
      return result;
    case '1':
      int v19 = *(_DWORD *)(a2 + 20);
      if ((v19 & 0x40000000) != 0) {
        int v20 = *(uint64_t ***)(a2 - 8);
      }
      else {
        int v20 = (uint64_t **)(a2 - 32 * (v19 & 0x7FFFFFF));
      }
      uint64_t v54 = *v20;
      uint64_t v55 = **v20;
      if ((*(_DWORD *)(v55 + 8) & 0xFD) != 0xD || v55 == *(void *)a2) {
        return 0;
      }
      goto LABEL_198;
    case '2':
      int v17 = *(_DWORD *)(a2 + 20);
      if ((v17 & 0x40000000) != 0) {
        uint64_t v18 = *(uint64_t ***)(a2 - 8);
      }
      else {
        uint64_t v18 = (uint64_t **)(a2 - 32 * (v17 & 0x7FFFFFF));
      }
      uint64_t v50 = **v18;
      unsigned int v51 = *(_DWORD *)(v50 + 8);
      if ((v51 & 0xFE) == 0x12) {
        unsigned int v51 = *(_DWORD *)(**(void **)(v50 + 16) + 8);
      }
      uint64_t v52 = v51 >> 8;
      unsigned int v53 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v53 & 0xFE) == 0x12) {
        unsigned int v53 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1[1] + 8) + 64))(*(void *)(a1[1] + 8), v52, v53 >> 8);
      if (result) {
        goto LABEL_194;
      }
      return result;
    default:
      return result;
  }
  do
  {
    int v61 = (llvm::Type *)(v176 & 0xFFFFFFFFFFFFFFF8);
    int64_t v62 = (llvm::DataLayout *)a1[3];
    if ((v176 & 4) != 0 || !v61)
    {
      uint64_t v66 = v56;
      if (v61) {
        BOOL v67 = (v176 & 4) == 0;
      }
      else {
        BOOL v67 = 1;
      }
      if (v67)
      {
        AggregateElement = *v175;
        if (*v175) {
          BOOL v69 = *((unsigned char *)*v175 + 16) == 16;
        }
        else {
          BOOL v69 = 0;
        }
        if (!v69) {
          AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
        }
        uint64_t v72 = (unsigned int *)*((void *)AggregateElement + 3);
        uint64_t v70 = (unsigned int *)((char *)AggregateElement + 24);
        uint64_t v71 = v72;
        if (v70[2] < 0x41) {
          uint64_t v71 = v70;
        }
        int v61 = *(llvm::Type **)(*((void *)v61 + 2) + 8 * *v71);
      }
      unint64_t v73 = (unint64_t)(sub_1CB83544C((uint64_t)v62, (uint64_t)v61) + 7) >> 3;
      BOOL v75 = v74 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v62, v61, 1);
      unint64_t v77 = (1 << Alignment) + v73 - 1;
      if (!(v77 >> Alignment)) {
        goto LABEL_106;
      }
      if (v75) {
        return 0;
      }
      int v78 = *(_DWORD *)(a2 + 20);
      if ((v78 & 0x40000000) != 0) {
        uint64_t v79 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v79 = a2 - 32 * (v78 & 0x7FFFFFF);
      }
      uint64_t v82 = v77 & -(1 << Alignment);
      uint64_t v83 = *(void *)(v79 + 32 * v60);
      if (!v83 || *(unsigned char *)(v83 + 16) != 16)
      {
LABEL_104:
        if (v174 != -1) {
          return 0;
        }
        unsigned int v173 = v82;
        unsigned int v174 = v60;
LABEL_106:
        uint64_t v56 = v66;
        goto LABEL_107;
      }
      long long v84 = (llvm::APInt *)(v83 + 24);
      uint64_t v85 = *(unsigned int *)(v83 + 32);
      unsigned int v86 = v85 - 1;
      if (v85 > 0x40)
      {
        unint64_t v87 = *(void *)v84;
        if ((*(void *)(*(void *)v84 + 8 * (v86 >> 6)) >> v86))
        {
          if (v85 - llvm::APInt::countLeadingOnesSlowCase(v84) - 64 < 0xFFFFFFBF) {
            goto LABEL_104;
          }
          goto LABEL_122;
        }
        int v90 = 0;
        int64_t v91 = (unint64_t)(v85 + 63) >> 6;
        do
        {
          BOOL v92 = v91-- < 1;
          if (v92) {
            break;
          }
          unint64_t v93 = *(void *)(v87 + 8 * v91);
          v90 += __clz(v93);
        }
        while (!v93);
        int v94 = v85 | 0xFFFFFFC0;
        if ((v85 & 0x3F) == 0) {
          int v94 = 0;
        }
        int v88 = v90 + v94;
      }
      else
      {
        unint64_t v87 = *(void *)v84;
        if ((*(void *)v84 >> v86))
        {
          if (v85) {
            int v88 = __clz(~(v87 << -(char)v85));
          }
          else {
            int v88 = 0;
          }
        }
        else
        {
          int v88 = v85 + __clz(v87) - 64;
        }
      }
      if ((v85 - v88 - 64) < 0xFFFFFFBF) {
        goto LABEL_104;
      }
      if (v85 <= 0x40)
      {
        uint64_t v89 = (uint64_t)(v87 << -(char)v85) >> -(char)v85;
LABEL_123:
        uint64_t v56 = v66 + v89 * v82;
        goto LABEL_107;
      }
LABEL_122:
      uint64_t v89 = *(void *)v87;
      goto LABEL_123;
    }
    StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)a1[3], (llvm::StructType *)(v176 & 0xFFFFFFFFFFFFFFF8));
    int v64 = *(_DWORD *)(a2 + 20);
    if ((v64 & 0x40000000) != 0) {
      uint64_t v65 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v65 = a2 - 32 * (v64 & 0x7FFFFFF);
    }
    uint64_t v80 = *(void *)(v65 + 32 * v60);
    char v81 = (unsigned int *)(v80 + 24);
    if (*(_DWORD *)(v80 + 32) >= 0x41u) {
      char v81 = *(unsigned int **)v81;
    }
    v56 += *((void *)StructLayout + *v81 + 2);
LABEL_107:
    ++v60;
    sub_1CB8460E4((uint64_t)&v175);
  }
  while (v25 != v60);
  if (v174 == -1)
  {
    uint64_t v57 = a1 + 12;
    *(void *)(a1[12] + 8) += v56;
    if (!v56 || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1[1] + 1064))(a1[1], a1[3])) {
      goto LABEL_69;
    }
    if (byte_1EA618CD0)
    {
      if (*(unsigned char *)(a2 + 16) == 62)
      {
        int v140 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 1448))(a1[1]);
        if (!a4 && v140 && v56 >= 1)
        {
          int v141 = *(_DWORD *)(a2 + 20);
          if ((v141 & 0x40000000) != 0) {
            int v142 = *(uint64_t **)(a2 - 8);
          }
          else {
            int v142 = (uint64_t *)(a2 - 32 * (v141 & 0x7FFFFFF));
          }
          uint64_t v160 = *v142;
          unsigned int v161 = *(unsigned __int8 *)(v160 + 16);
          if (v161 <= 0x1B) {
            uint64_t v160 = 0;
          }
          if (v161 < 4 || v161 == 21)
          {
            if (!v160)
            {
              uint64_t v163 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 80);
              if (v163) {
                uint64_t v162 = v163 - 24;
              }
              else {
                uint64_t v162 = 0;
              }
LABEL_247:
              uint64_t v164 = *(void *)(v162 + 40);
              if (v164) {
                uint64_t v165 = v164 - 24;
              }
              else {
                uint64_t v165 = 0;
              }
              if (*(unsigned __int8 *)(v165 + 16) - 29 >= 0xB) {
                uint64_t v165 = 0;
              }
              unsigned int v166 = *(unsigned __int8 *)(v165 + 16) - 38;
              BOOL v92 = v166 > 0x38;
              uint64_t v167 = (1 << v166) & 0x100060000000001;
              if (v92 || v167 == 0)
              {
                unsigned int v169 = (uint64_t *)a1[16];
                *unsigned int v169 = a2;
                v169[1] = v56;
              }
              goto LABEL_257;
            }
LABEL_243:
            uint64_t v162 = *(void *)(v160 + 40);
            goto LABEL_247;
          }
          if (v160)
          {
            int v170 = *(unsigned __int8 *)(v160 + 16);
            if (v170 != 62 && (v170 - 66) >= 0xD) {
              goto LABEL_243;
            }
          }
        }
      }
    }
LABEL_257:
    uint64_t result = 0;
    *(void *)(*v57 + 8) -= v56;
    return result;
  }
  uint64_t v101 = a1[12];
  long long v102 = *(_OWORD *)(v101 + 16);
  long long v177 = *(_OWORD *)v101;
  long long v178 = v102;
  long long v103 = *(_OWORD *)(v101 + 48);
  *(_OWORD *)unsigned int v179 = *(_OWORD *)(v101 + 32);
  *(_OWORD *)&v179[16] = v103;
  uint64_t v104 = *(unsigned int *)(*a1 + 8);
  *(void *)(v101 + 8) += v56;
  if ((*(unsigned char *)(a2 + 17) & 2) == 0) {
    *(unsigned char *)(v101 + 56) = 0;
  }
  int v105 = *(_DWORD *)(a2 + 20);
  if ((v105 & 0x40000000) != 0) {
    uint64_t v106 = *(void **)(a2 - 8);
  }
  else {
    uint64_t v106 = (void *)(a2 - 32 * (v105 & 0x7FFFFFF));
  }
  if ((sub_1CC2782FC(a1, *v106, (a4 + 1)) & 1) == 0)
  {
    uint64_t v143 = a1[12];
    if (*(unsigned char *)(v143 + 16)) {
      goto LABEL_213;
    }
    *(unsigned char *)(v143 + 16) = 1;
    int v147 = *(_DWORD *)(a2 + 20);
    if ((v147 & 0x40000000) != 0) {
      unsigned int v148 = *(void **)(a2 - 8);
    }
    else {
      unsigned int v148 = (void *)(a2 - 32 * (v147 & 0x7FFFFFF));
    }
    *(void *)(v143 + 32) = *v148;
  }
  int v149 = *(_DWORD *)(a2 + 20);
  if ((v149 & 0x40000000) != 0) {
    uint64_t v150 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v150 = a2 - 32 * (v149 & 0x7FFFFFF);
  }
  if (sub_1CC279BDC(a1, *(unsigned char **)(v150 + 32 * v174), v173, a4)) {
    return 1;
  }
  uint64_t v151 = (_OWORD *)a1[12];
  long long v152 = v178;
  _OWORD *v151 = v177;
  v151[1] = v152;
  v151[2] = *(_OWORD *)v179;
  *(_OWORD *)((char *)v151 + 41) = *(_OWORD *)&v179[9];
  uint64_t v153 = *a1;
  unsigned int v154 = *(_DWORD *)(*a1 + 8);
  if (v154 != v104)
  {
    if (v154 <= v104)
    {
      uint64_t v172 = (void *)*a1;
      if (*(_DWORD *)(v153 + 12) < v104) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v153 = *a1;
      if (v154 != v104)
      {
        bzero((void *)(*v172 + 8 * v154), 8 * (v104 - v154));
        uint64_t v153 = (uint64_t)v172;
      }
    }
    *(_DWORD *)(v153 + 8) = v104;
  }
  uint64_t v155 = a1[12];
  if (*(unsigned char *)(v155 + 16)) {
    return 0;
  }
  *(unsigned char *)(v155 + 16) = 1;
  int v156 = *(_DWORD *)(a2 + 20);
  if ((v156 & 0x40000000) != 0) {
    uint64_t v157 = *(void **)(a2 - 8);
  }
  else {
    uint64_t v157 = (void *)(a2 - 32 * (v156 & 0x7FFFFFF));
  }
  *(void *)(v155 + 32) = *v157;
  *(void *)(v155 + 8) += v56;
  int v158 = *(_DWORD *)(a2 + 20);
  if ((v158 & 0x40000000) != 0) {
    uint64_t v159 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v159 = a2 - 32 * (v158 & 0x7FFFFFF);
  }
  if (sub_1CC279BDC(a1, *(unsigned char **)(v159 + 32 * v174), v173, a4)) {
    return 1;
  }
  uint64_t v143 = a1[12];
LABEL_213:
  long long v144 = v178;
  *(_OWORD *)uint64_t v143 = v177;
  *(_OWORD *)(v143 + 16) = v144;
  *(_OWORD *)(v143 + 32) = *(_OWORD *)v179;
  *(_OWORD *)(v143 + 41) = *(_OWORD *)&v179[9];
  uint64_t v145 = *a1;
  unsigned int v146 = *(_DWORD *)(v145 + 8);
  if (v146 == v104) {
    return 0;
  }
  if (v146 <= v104)
  {
    if (*(_DWORD *)(v145 + 12) < v104) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v146 != v104) {
      bzero((void *)(*(void *)v145 + 8 * v146), 8 * (v104 - v146));
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(v145 + 8) = v104;
  return result;
}

uint64_t sub_1CC279BDC(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 1;
  }
  if (a3 != 1)
  {
    uint64_t v8 = (long long *)a1[12];
    if (*((void *)v8 + 3) && *((unsigned char **)v8 + 5) != a2) {
      return 0;
    }
    long long v9 = v8[3];
    long long v10 = *v8;
    long long v11 = v8[1];
    *(void *)int v64 = *((void *)v8 + 4);
    *(_OWORD *)&v64[16] = v9;
    long long v62 = v10;
    *(void *)&long long v63 = v11;
    *((void *)&v63 + 1) = *((void *)&v11 + 1) + a3;
    *(void *)&v64[8] = a2;
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1[1] + 1064))();
    if (!v7) {
      return v7;
    }
    uint64_t v12 = (_OWORD *)a1[12];
    long long v13 = v62;
    long long v14 = v63;
    long long v15 = *(_OWORD *)v64;
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)&v64[9];
    v12[1] = v14;
    v12[2] = v15;
    *uint64_t v12 = v13;
    if (a2[16] != 41
      || (uint64_t v16 = *((void *)a2 - 8)) == 0
      || (uint64_t v17 = *((void *)a2 - 4)) == 0
      || *(unsigned char *)(v17 + 16) != 16
      || sub_1CC2778A4((llvm::Instruction *)a2, (uint64_t *)a1[4]))
    {
LABEL_39:
      if (*(void *)(a1[12] + 8))
      {
        if (a2[16] == 83)
        {
          sub_1CC2779DC(&v65, (uint64_t)a2, (uint64_t *)a1[4]);
          if (v67)
          {
            int v39 = (const llvm::Value *)v65;
            HIDWORD(v41) = v65[16] - 41;
            LODWORD(v41) = HIDWORD(v41);
            unsigned int v40 = v41 >> 1;
            BOOL v26 = v40 > 6;
            int v42 = (1 << v40) & 0x47;
            BOOL v43 = v26 || v42 == 0;
            if ((v43 || (v65[17] & 6) == 0) && v66 && *(unsigned char *)(v66 + 16) == 16)
            {
              unsigned int v44 = *(_DWORD *)(v66 + 32);
              if (v44 >= 0x41) {
                operator new[]();
              }
              uint64_t v45 = *(void *)(a1[12] + 24) * *(void *)(v66 + 24);
              unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ((v44 - 1) & 0x3F ^ 0x3F);
              if (!v44) {
                unint64_t v46 = 0;
              }
              unint64_t v47 = v45 & v46;
              LODWORD(v66) = *(_DWORD *)(v66 + 32);
              uint64_t v65 = (unsigned __int8 *)(v45 & v46);
              if (((v45 & v46) >> (v44 - 1))) {
                int v48 = v44 ? __clz(~(v47 << -(char)v44)) : 0;
              }
              else {
                int v48 = v44 + __clz(v47) - 64;
              }
              if (v44 - v48 + 1 < 0x41)
              {
                v64[24] = 0;
                *(void *)&v64[8] = v39;
                for (uint64_t i = v47; ; uint64_t i = -1)
                {
                  *((void *)&v62 + 1) -= i;
                  if (!(*(unsigned int (**)(uint64_t, uint64_t, long long *, uint64_t, void, void))(*(void *)a1[1] + 1064))(a1[1], a1[3], &v62, a1[9], *((unsigned int *)a1 + 20), 0))goto LABEL_63; {
                  uint64_t v50 = a1[8];
                  }
                  if (v50) {
                    break;
                  }
                  sub_1CB920400();
                }
                unsigned int v51 = (llvm::DominatorTree *)(*(uint64_t (**)(uint64_t))(*(void *)v50 + 48))(v50);
                if (!llvm::DominatorTree::dominates(v51, v39, (const llvm::Instruction *)a1[11]))
                {
LABEL_63:
                  int v58 = (long long *)a1[12];
                  long long v60 = v58[1];
                  long long v59 = v58[2];
                  long long v61 = *v58;
                  *(_OWORD *)&v64[9] = *(long long *)((char *)v58 + 41);
                  long long v63 = v60;
                  *(_OWORD *)int v64 = v59;
                  long long v62 = v61;
                  return v7;
                }
                uint64_t v52 = *a1;
                unsigned int v53 = *(_DWORD *)(*a1 + 8);
                if (v53 >= *(_DWORD *)(*a1 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)v52 + 8 * v53) = v39;
                ++*(_DWORD *)(v52 + 8);
                uint64_t v54 = (_OWORD *)a1[12];
                long long v55 = v62;
                long long v56 = v63;
                long long v57 = *(_OWORD *)v64;
                *(_OWORD *)((char *)v54 + 41) = *(_OWORD *)&v64[9];
                v54[1] = v56;
                void v54[2] = v57;
                *uint64_t v54 = v55;
              }
            }
          }
        }
      }
      return v7;
    }
    uint64_t v18 = (llvm::APInt *)(v17 + 24);
    uint64_t v19 = *(unsigned int *)(v17 + 32);
    unsigned int v20 = v19 - 1;
    if (v19 > 0x40)
    {
      if ((*(void *)(*(void *)v18 + 8 * (v20 >> 6)) >> v20))
      {
        if (v19 - llvm::APInt::countLeadingOnesSlowCase(v18) + 1 > 0x40) {
          goto LABEL_39;
        }
        v64[24] = 0;
        *(void *)&v64[8] = v16;
        goto LABEL_34;
      }
      int v24 = 0;
      int64_t v25 = (unint64_t)(v19 + 63) >> 6;
      do
      {
        BOOL v26 = v25-- < 1;
        if (v26) {
          break;
        }
        unint64_t v27 = *(void *)(*(void *)v18 + 8 * v25);
        v24 += __clz(v27);
      }
      while (!v27);
      int v28 = v19 | 0xFFFFFFC0;
      if ((v19 & 0x3F) == 0) {
        int v28 = 0;
      }
      int v22 = v24 + v28;
    }
    else
    {
      unint64_t v21 = *(void *)v18;
      if ((*(void *)v18 >> v20))
      {
        if (v19) {
          int v22 = __clz(~(v21 << -(char)v19));
        }
        else {
          int v22 = 0;
        }
      }
      else
      {
        int v22 = v19 + __clz(v21) - 64;
      }
    }
    if ((v19 - v22 + 1) >= 0x41) {
      goto LABEL_39;
    }
    v64[24] = 0;
    *(void *)&v64[8] = v16;
    if (v19 <= 0x40)
    {
      uint64_t v23 = (uint64_t)(*(void *)v18 << -(char)v19) >> -(char)v19;
LABEL_35:
      *((void *)&v62 + 1) += *((void *)&v63 + 1) * v23;
      if ((*(unsigned int (**)(uint64_t, uint64_t, long long *, uint64_t, void, void))(*(void *)a1[1]
                                                                                                 + 1064))(a1[1], a1[3], &v62, a1[9], *((unsigned int *)a1 + 20), 0))
      {
        uint64_t v29 = *a1;
        unsigned int v30 = *(_DWORD *)(*a1 + 8);
        if (v30 >= *(_DWORD *)(*a1 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v29 + 8 * v30) = a2;
        ++*(_DWORD *)(v29 + 8);
        uint64_t v31 = (_OWORD *)a1[12];
        long long v32 = v62;
        long long v33 = v63;
        long long v34 = *(_OWORD *)v64;
        *(_OWORD *)((char *)v31 + 41) = *(_OWORD *)&v64[9];
        v31[1] = v33;
        v31[2] = v34;
        *uint64_t v31 = v32;
        return v7;
      }
      unsigned int v35 = (long long *)a1[12];
      long long v37 = v35[1];
      long long v36 = v35[2];
      long long v38 = *v35;
      *(_OWORD *)&v64[9] = *(long long *)((char *)v35 + 41);
      long long v63 = v37;
      *(_OWORD *)int v64 = v36;
      long long v62 = v38;
      goto LABEL_39;
    }
LABEL_34:
    uint64_t v23 = **(void **)v18;
    goto LABEL_35;
  }

  return sub_1CC2782FC(a1, a2, a4);
}

uint64_t sub_1CC27A360(uint64_t a1, llvm::Value *this, llvm::Value *a3, llvm::Value *a4)
{
  if (!this || this == a3 || this == a4) {
    return 1;
  }
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (v4 <= 0x1B && v4 != 21) {
    return 1;
  }
  if (v4 == 59
    && *(unsigned char *)(*((void *)this - 4) + 16) == 16
    && ((v6 = *((void *)this + 5), (uint64_t v7 = *(void *)(*(void *)(v6 + 56) + 80)) != 0) ? (v8 = v7 - 24) : (v8 = 0),
        v6 == v8 && (*((_WORD *)this + 9) & 0x40) == 0))
  {
    return 1;
  }
  else
  {
    return llvm::Value::isUsedInBasicBlock(this, *(const llvm::BasicBlock **)(*(void *)(a1 + 88) + 40));
  }
}

uint64_t sub_1CC27A3E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::ProfileSummaryInfo *a7, llvm::BlockFrequencyInfoImplBase **a8, int a9)
{
  uint64_t v10 = a3;
  uint64_t v13 = *(void *)(a3 + 8);
  uint64_t v14 = *(unsigned int *)(a3 + 20);
  if (v13 == *(void *)a3)
  {
    if (v14)
    {
      long long v15 = 0;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = *(uint64_t ***)(a3 + 8);
      do
      {
        if (*v17 == a1) {
          return 0;
        }
        if (*v17 == (uint64_t *)-2) {
          long long v15 = v17;
        }
        ++v17;
        v16 -= 8;
      }
      while (v16);
      if (v15)
      {
        *long long v15 = a1;
        --*(_DWORD *)(a3 + 24);
        goto LABEL_33;
      }
    }
    unsigned int v18 = *(_DWORD *)(a3 + 16);
    if (v14 < v18)
    {
      *(_DWORD *)(a3 + 20) = v14 + 1;
      *(void *)(v13 + 8 * v14) = a1;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v18 = *(_DWORD *)(a3 + 16);
  }
  if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a3 + 24)))
  {
    if (v18 >= 0x40) {
      v18 *= 2;
    }
    else {
      unsigned int v18 = 128;
    }
    goto LABEL_115;
  }
  if (v18 - v14 < v18 >> 3)
  {
LABEL_115:
    uint64_t v68 = a8;
    uint64_t v69 = a6;
    uint64_t v70 = a5;
    uint64_t v71 = a7;
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v18);
    a7 = v71;
    a5 = v70;
    a6 = v69;
    a8 = v68;
    unsigned int v18 = *(_DWORD *)(v10 + 16);
    uint64_t v13 = *(void *)(v10 + 8);
  }
  unsigned int v19 = v18 - 1;
  unsigned int v20 = (v18 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  unint64_t v21 = (uint64_t **)(v13 + 8 * v20);
  int v22 = *v21;
  if (*v21 != (uint64_t *)-1)
  {
    uint64_t v23 = 0;
    int v24 = 1;
    while (v22 != a1)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == (uint64_t *)-2;
      }
      if (v25) {
        uint64_t v23 = v21;
      }
      unsigned int v26 = v20 + v24++;
      unsigned int v20 = v26 & v19;
      unint64_t v21 = (uint64_t **)(v13 + 8 * (v26 & v19));
      int v22 = *v21;
      if (*v21 == (uint64_t *)-1) {
        goto LABEL_26;
      }
    }
    return 0;
  }
  uint64_t v23 = 0;
LABEL_26:
  if (v23) {
    unint64_t v27 = v23;
  }
  else {
    unint64_t v27 = v21;
  }
  if (*v27 == a1) {
    return 0;
  }
  if (*v27 == (uint64_t *)-2) {
    --*(_DWORD *)(v10 + 24);
  }
  else {
    ++*(_DWORD *)(v10 + 20);
  }
  *unint64_t v27 = a1;
LABEL_33:
  uint64_t result = 1;
  unsigned int v29 = *((unsigned __int8 *)a1 + 16) - 41;
  if (v29 > 0x25) {
    return result;
  }
  if (((1 << v29) & 0xC00200001) != 0) {
    goto LABEL_47;
  }
  if (((1 << v29) & 0x1010) == 0)
  {
    if (((1 << v29) & 0x3000000000) == 0) {
      return result;
    }
    uint64_t v30 = *a1;
    int v31 = *((_DWORD *)a1 + 5);
    long long v32 = (v31 & 0x40000000) != 0 ? (uint64_t *)*(a1 - 1) : &a1[-4 * (v31 & 0x7FFFFFF)];
    if (v30 == *(void *)*v32 || (*(_DWORD *)(v30 + 8) & 0xFD) != 0xD) {
      return result;
    }
LABEL_47:
    unsigned int v35 = (uint64_t *)a1[1];
    if (v35)
    {
      int v36 = a9;
      if (a9 <= 20) {
        int v37 = 20;
      }
      else {
        int v37 = a9;
      }
      BOOL v75 = a7;
      while (1)
      {
        if (v36 == v37) {
          return 1;
        }
        ++v36;
        uint64_t v38 = v35[3];
        int v39 = *(unsigned __int8 *)(v38 + 16);
        if (v38)
        {
          if (v39 == 60) {
            break;
          }
        }
        if (v38 && v39 == 61)
        {
          int v42 = *(_DWORD *)(v38 + 20);
          if ((v42 & 0x40000000) != 0) {
            uint64_t v43 = *(void *)(v38 - 8);
          }
          else {
            uint64_t v43 = v38 - 32 * (v42 & 0x7FFFFFF);
          }
          if ((((unint64_t)v35 - v43) & 0x1FFFFFFFE0) != 0x20) {
            return 1;
          }
          goto LABEL_61;
        }
        if (v38 && v39 == 65)
        {
          int v45 = *(_DWORD *)(v38 + 20);
          if ((v45 & 0x40000000) != 0) {
            uint64_t v46 = *(void *)(v38 - 8);
          }
          else {
            uint64_t v46 = v38 - 32 * (v45 & 0x7FFFFFF);
          }
          if ((((unint64_t)v35 - v46) & 0x1FFFFFFFE0) != 0) {
            return 1;
          }
          uint64_t v40 = *v35;
          unsigned int v44 = *(uint64_t **)(v38 - 32);
          goto LABEL_68;
        }
        if (v38 && v39 == 64)
        {
          int v49 = *(_DWORD *)(v38 + 20);
          if ((v49 & 0x40000000) != 0) {
            uint64_t v50 = *(void *)(v38 - 8);
          }
          else {
            uint64_t v50 = v38 - 32 * (v49 & 0x7FFFFFF);
          }
          if ((((unint64_t)v35 - v50) & 0x1FFFFFFFE0) != 0) {
            return 1;
          }
LABEL_61:
          uint64_t v40 = *v35;
          unsigned int v44 = *(uint64_t **)(v38 - 64);
LABEL_68:
          uint64_t v41 = *v44;
LABEL_69:
          unint64_t v47 = *(unsigned int *)(a2 + 8);
          if (v47 >= *(unsigned int *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v48 = (void *)(*(void *)a2 + 16 * v47);
          *int v48 = v40;
          v48[1] = v41;
          ++*(_DWORD *)(a2 + 8);
          goto LABEL_71;
        }
        if (v38 && v39 == 84)
        {
          uint64_t v51 = *(void *)(v38 + 64);
          uint64_t v72 = v10;
          if (v51 && (*(unsigned char *)(v51 + 12) & 0x20) != 0) {
            goto LABEL_118;
          }
          uint64_t v52 = a8;
          uint64_t v53 = a6;
          uint64_t v54 = a4;
          uint64_t v55 = a5;
          hasFnAttrOnCalledFunctiouint64_t n = llvm::CallBase::hasFnAttrOnCalledFunction(v38, 5);
          a5 = v55;
          a4 = v54;
          uint64_t v10 = v72;
          a6 = v53;
          a8 = v52;
          a7 = v75;
          if (hasFnAttrOnCalledFunction)
          {
LABEL_118:
            if ((a6 & 1) == 0)
            {
              long long v57 = a8;
              uint64_t v58 = a6;
              uint64_t v59 = a4;
              uint64_t v60 = a5;
              int shouldOptimizeForSize = llvm::shouldOptimizeForSize(*(llvm::BasicBlock **)(v38 + 40), a7, a8);
              a5 = v60;
              a4 = v59;
              uint64_t v10 = v72;
              a6 = v58;
              a8 = v57;
              a7 = v75;
              if (!shouldOptimizeForSize) {
                goto LABEL_71;
              }
            }
          }
          uint64_t v62 = *(void *)(v38 - 32);
          uint64_t result = 1;
          if (!v62 || *(unsigned char *)(v62 + 16) != 24) {
            return result;
          }
          unsigned int v73 = a6;
          int v74 = a8;
          uint64_t v63 = a5;
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 2008))(v76, a4, *(void *)(*(void *)(*(void *)(v38 + 40) + 56) + 40) + 272, a5, v38);
          uint64_t v65 = v76[0];
          uint64_t v64 = v76[1];
          while (1)
          {
            if (v65 == v64)
            {
              int v67 = 3;
              goto LABEL_99;
            }
            (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)a4 + 2032))(a4, v65, 0, 0, 0);
            if (*(uint64_t **)(v65 + 112) == a1 && (*(_DWORD *)(v65 + 104) != 2 || *(unsigned char *)(v65 + 13) == 0)) {
              break;
            }
            v65 += 128;
          }
          int v67 = 1;
LABEL_99:
          unint64_t v77 = (void **)v76;
          sub_1CC27A9C0(&v77);
        }
        else
        {
          uint64_t v63 = a5;
          unsigned int v73 = a6;
          int v74 = a8;
          int v67 = sub_1CC27A3E0(v38, a2, v10, a4);
        }
        a8 = v74;
        a7 = v75;
        a6 = v73;
        a5 = v63;
        if (v67 && v67 != 3) {
          return 1;
        }
LABEL_71:
        unsigned int v35 = (uint64_t *)v35[1];
        if (!v35) {
          return 0;
        }
      }
      uint64_t v40 = *v35;
      uint64_t v41 = *(void *)v38;
      goto LABEL_69;
    }
    return 0;
  }
  int v33 = *((_DWORD *)a1 + 5);
  if ((v33 & 0x40000000) != 0) {
    long long v34 = (uint64_t *)*(a1 - 1);
  }
  else {
    long long v34 = &a1[-4 * (v33 & 0x7FFFFFF)];
  }
  if (*(unsigned char *)(v34[4] + 16) == 16) {
    goto LABEL_47;
  }
  return result;
}

void sub_1CC27A9C0(void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD50E94C(v4 - 128);
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC27AA48()
{
}

__n128 sub_1CC27AA5C(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &unk_1F2609F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC27AAA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2609F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC27AAD8(uint64_t a1)
{
  return sub_1CC277940(*(void *)(a1 + 16));
}

void sub_1CC27AAEC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unsigned int v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xF0B7672A07A44C6BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x7A44C6AFC2DD9CLL) {
      abort();
    }
    unint64_t v8 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x3D226357E16ECELL) {
      unint64_t v10 = 0x7A44C6AFC2DD9CLL;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t v21 = a1 + 2;
    if (v10 > 0x7A44C6AFC2DD9CLL) {
      sub_1CB833614();
    }
    uint64_t v11 = 536 * v10;
    uint64_t v12 = (char *)operator new(536 * v10);
    uint64_t v13 = &v12[536 * v7];
    std::string __p = v12;
    unsigned int v18 = v13;
    unsigned int v20 = &v12[v11];
    *(void *)uint64_t v13 = *(void *)a2;
    *((void *)v13 + 1) = v13 + 24;
    *((void *)v13 + 2) = 0x2000000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD49A6B8((uint64_t)(v13 + 8), a2 + 8);
    }
    unsigned int v19 = v13 + 536;
    sub_1CD50EA44(a1, &__p);
    uint64_t v6 = (void *)a1[1];
    uint64_t v14 = v18;
    for (uint64_t i = v19; i != v14; i -= 536)
    {
      uint64_t v16 = (char *)*((void *)i - 66);
      if (i - 512 != v16) {
        free(v16);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *unsigned int v5 = *(void *)a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x2000000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD49A6B8((uint64_t)(v5 + 1), a2 + 8);
    }
    uint64_t v6 = v5 + 67;
  }
  a1[1] = (uint64_t)v6;
}

void *sub_1CC27AC9C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC27ADD0(a1, v7);
      uint64_t v17 = 0;
      sub_1CB883B0C(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC27ADD0(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC27ADD0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBAEE4F0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *__n128 result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1CC27AE9C(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  __n128 v10 = *(__n128 *)a2;
  long long v11 = v2;
  v12[0] = a2[2];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  unint64_t v4 = *(void *)a1;
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    BOOL v9 = v4 + (v3 << 6) > (unint64_t)&v10;
    if (v4 > (unint64_t)&v10 || !v9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v5 = v4 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  __n128 result = v10;
  long long v7 = v11;
  long long v8 = v12[1];
  *(_OWORD *)(v5 + 32) = v12[0];
  *(_OWORD *)(v5 + 48) = v8;
  *(__n128 *)uint64_t v5 = result;
  *(_OWORD *)(v5 + 16) = v7;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void *sub_1CC27AF70(uint64_t *a1, void *a2)
{
  long long v7 = 0;
  char v4 = sub_1CBFFBC50(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC080E40((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

char *sub_1CC27AFD4(uint64_t a1, llvm::UndefValue *a2)
{
  uint64_t v3 = llvm::UndefValue::get(a2, a2);
  char v4 = (uint64_t *)(a1 + 824);
  uint64_t v5 = *(void *)(a1 + 824);
  if (!v5)
  {
    sub_1CC27B470(a1 + 32, (uint64_t *)(a1 + 824));
    uint64_t v5 = *v4;
  }
  if (v5 != *(_DWORD *)(a1 + 40))
  {
    llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(*(void *)(a1 + 32) + 8 * v5), v3, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  unsigned int v6 = *(_DWORD *)(a1 + 304);
  if (v6 > 1 || *(_DWORD *)(a1 + 308))
  {
    long long v7 = (void *)(a1 + 304);
    if (v6)
    {
      long long v8 = (uint64_t *)(a1 + 312);
    }
    else
    {
      uint64_t v18 = *(unsigned int *)(a1 + 320);
      if (((2 * v6) & 0xFFFFFFFC) < v18 && v18 >= 0x41)
      {
        sub_1CD50F0A8(v7);
        goto LABEL_11;
      }
      if (!v18)
      {
        int v9 = 0;
LABEL_10:
        *(_DWORD *)(a1 + 304) = v9;
        *(_DWORD *)(a1 + 308) = 0;
        goto LABEL_11;
      }
      long long v8 = *(uint64_t **)(a1 + 312);
      char v4 = &v8[2 * v18];
    }
    do
    {
      *long long v8 = -4096;
      v8 += 2;
    }
    while (v8 != v4);
    int v9 = *(_DWORD *)v7 & 1;
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 824) = 0;
  __n128 result = *(char **)(a1 + 840);
  long long v11 = *(char **)(a1 + 832);
  uint64_t v12 = 848;
  if (result == v11) {
    uint64_t v12 = 852;
  }
  uint64_t v13 = *(unsigned int *)(a1 + v12);
  int v14 = *(llvm::ValueAsMetadata ***)(a1 + 840);
  if (v13)
  {
    uint64_t v15 = 0;
    while (*(void *)&result[v15] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v15 += 8;
      if (8 * v13 == v15) {
        goto LABEL_21;
      }
    }
    int v14 = (llvm::ValueAsMetadata **)&result[v15];
  }
  if (v14 != (llvm::ValueAsMetadata **)&result[8 * v13])
  {
    llvm::Value::doRAUW(*v14, v3, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_21:
  if (result == v11) {
    goto LABEL_22;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 848);
  if (v16 < 0x21 || 4 * (*(_DWORD *)(a1 + 852) - *(_DWORD *)(a1 + 856)) >= v16)
  {
    __n128 result = (char *)memset(result, 255, 8 * v16);
LABEL_22:
    *(void *)(a1 + 852) = 0;
    return result;
  }

  return (char *)llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 832));
}

uint64_t sub_1CC27B270(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  while (sub_1CBA0E618(a1, &v5, &v6) && v6 != *(void *)v3 + 16 * *(unsigned int *)(v3 + 16))
  {
    uint64_t v2 = *(void *)(v6 + 8);
    uint64_t v5 = v2;
    uint64_t v6 = 0;
    a1 = v3;
  }
  return v2;
}

uint64_t sub_1CC27B2E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      long long v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  long long v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      long long v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      long long v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC27B388@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v12 = 0;
  uint64_t result = sub_1CBFFBC50((uint64_t *)a1, a2, &v12);
  int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC080E40(a1, (uint64_t)a2, a2, v12);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(void *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1CC27B41C(_DWORD *a1, uint64_t a2)
{
  int v5 = 0;
  uint64_t result = sub_1CC27B2E4((uint64_t)a1, a2, &v5);
  if (result)
  {
    *int v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CC27B470(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 < (unint64_t)*(unsigned int *)(result + 8))
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 272;
    uint64_t v6 = result + 280;
    while (1)
    {
      uint64_t v7 = *(void *)(*(void *)v4 + 8 * v2);
      uint64_t v16 = 0;
      uint64_t result = sub_1CC27B548(v5, v7, &v16);
      int v8 = *(_DWORD *)(v4 + 272);
      if (result)
      {
        uint64_t v9 = v16;
        if (v8) {
          goto LABEL_10;
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v12 = v6;
          uint64_t v13 = 32;
        }
        else
        {
          uint64_t v12 = *(void *)(v4 + 280);
          uint64_t v13 = *(unsigned int *)(v4 + 288);
        }
        uint64_t v9 = v12 + 16 * v13;
        if (v8)
        {
LABEL_10:
          uint64_t v10 = v6;
          uint64_t v11 = 32;
          goto LABEL_11;
        }
      }
      uint64_t v10 = *(void *)(v4 + 280);
      uint64_t v11 = *(unsigned int *)(v4 + 288);
LABEL_11:
      uint64_t v14 = v10 + 16 * v11;
      uint64_t v15 = *a2;
      if (v14 == v9 || *(void *)(v9 + 8) != v15)
      {
        uint64_t v2 = v15 + 1;
        *a2 = v15 + 1;
        if (v15 + 1 < (unint64_t)*(unsigned int *)(v4 + 8)) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_1CC27B548(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC27B5F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  uint64_t result = sub_1CC27B728(a1, *a2, a2[1], &v9);
  if (result) {
    return result;
  }
  int v5 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v6 = 8;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD50F20C(a1, v6);
  uint64_t v9 = 0;
  uint64_t result = sub_1CC27B728(a1, *a2, a2[1], &v9);
LABEL_6:
  uint64_t v7 = v9;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096 || v7[1] != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  unsigned int v8 = *(_DWORD *)(a1 + 144);
  if (v8 >= *(_DWORD *)(a1 + 148)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)(a1 + 136) + 16 * v8) = *(_OWORD *)a2;
  ++*(_DWORD *)(a1 + 144);
  return result;
}

uint64_t sub_1CC27B728(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 8;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      BOOL v12 = 0;
      uint64_t result = 0;
      goto LABEL_12;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
  int v10 = v5 - 1;
  unsigned int v11 = (v5 - 1) & v9;
  BOOL v12 = (void *)(v4 + 16 * v11);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
LABEL_26:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -8192;
      }
      if (v19 && v13 == -8192) {
        uint64_t v16 = v12;
      }
      unsigned int v21 = v11 + v17++;
      unsigned int v11 = v21 & v10;
      BOOL v12 = (void *)(v4 + 16 * (v21 & v10));
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        goto LABEL_26;
      }
    }
    uint64_t result = 0;
    if (v16) {
      BOOL v12 = v16;
    }
  }
LABEL_12:
  *a4 = v12;
  return result;
}

void sub_1CC27B820(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (*a1 > 1 || a1[1])
  {
    if (v1)
    {
      uint64_t v2 = a1 + 2;
      uint64_t v3 = a1 + 34;
    }
    else
    {
      uint64_t v5 = a1[4];
      if (((2 * v1) & 0xFFFFFFFC) < v5 && v5 >= 0x41)
      {
        sub_1CD50F58C(a1);
        return;
      }
      if (!v5)
      {
        unsigned int v4 = 0;
LABEL_6:
        *a1 = v4;
        a1[1] = 0;
        return;
      }
      uint64_t v2 = (unsigned int *)*((void *)a1 + 1);
      uint64_t v3 = &v2[4 * v5];
    }
    do
    {
      *(void *)uint64_t v2 = -4096;
      *((void *)v2 + 1) = -4096;
      v2 += 4;
    }
    while (v2 != v3);
    unsigned int v4 = *a1 & 1;
    goto LABEL_6;
  }
}

void sub_1CC27B8A0()
{
}

void *sub_1CC27B8B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2609F50;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC27B8FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2609F50;
  a2[1] = v2;
  return result;
}

void sub_1CC27B928(uint64_t a1, unint64_t *a2)
{
}

void sub_1CC27B934(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = (int32x2_t *)(a1 + 560);
  uint64_t v5 = (void *)sub_1CC273768((uint64_t *)(a1 + 560), a2);
  if (*(void **)(a1 + 592) != v5) {
    sub_1CD50E34C(v4, v5);
  }
  if (*(void *)(a1 + 656))
  {
    sub_1CD508CA4(a1 + 640, a2);
    if (!a2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 616);
  if (v6)
  {
    unint64_t v7 = *(uint64_t **)(a1 + 608);
    size_t v8 = 8 * v6 - 8;
    int v9 = v7;
    while (1)
    {
      uint64_t v10 = *v9++;
      if (v10 == a2) {
        break;
      }
      v8 -= 8;
      unint64_t v7 = v9;
      if (v8 == -8) {
        goto LABEL_12;
      }
    }
    if (v8) {
      memmove(v7, v7 + 1, v8);
    }
    *(_DWORD *)(a1 + 616) = v6 - 1;
  }
LABEL_12:
  if (a2)
  {
LABEL_13:
    if (*(unsigned char *)(a2 + 16) == 62)
    {
      uint64_t v23 = 0;
      if (sub_1CBFF64C0(*(void *)(a1 + 664), *(_DWORD *)(a1 + 680), a2, &v23))
      {
        *uint64_t v23 = -8192;
        *(int32x2_t *)(a1 + 672) = vadd_s32(*(int32x2_t *)(a1 + 672), (int32x2_t)0x1FFFFFFFFLL);
      }
      uint64_t v11 = sub_1CC273768((uint64_t *)v4, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      if (*(void *)(a1 + 592) != v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        uint64_t v13 = *(unsigned int *)(v11 + 16);
        if (v13)
        {
          uint64_t v14 = 0;
          uint64_t v15 = (void *)(v12 + 16 * v13);
          uint64_t v16 = 16 * v13;
          uint64_t v17 = 16 * v13 - 16;
          while (*(void *)(v12 + v14) != a2)
          {
            v14 += 16;
            if (v16 == v14) {
              goto LABEL_28;
            }
          }
          uint64_t v15 = (void *)(v12 + v14);
          if (v17 != v14)
          {
            uint64_t v18 = v15 + 3;
            uint64_t v19 = v16 - v14 - 16;
            do
            {
              uint64_t v20 = *(v18 - 1);
              if (v20 != a2)
              {
                uint64_t v21 = *v18;
                *uint64_t v15 = v20;
                v15[1] = v21;
                v15 += 2;
              }
              v18 += 2;
              v19 -= 16;
            }
            while (v19);
          }
        }
        else
        {
          uint64_t v15 = *(void **)(v11 + 8);
        }
LABEL_28:
        unint64_t v22 = ((unint64_t)v15 - v12) >> 4;
        *(_DWORD *)(v11 + 16) = v22;
        if (!v22)
        {
          sub_1CD50E34C(v4, (void *)v11);
        }
      }
    }
  }
}

llvm::Instruction *sub_1CC27BB1C(uint64_t a1, llvm::CastInst *a2, int a3, uint64_t a4, llvm::Instruction *a5)
{
  unint64_t v7 = *(uint64_t **)a1;
  size_t v8 = **(llvm::Type *****)(a1 + 8);
  __int16 v37 = 257;
  int v9 = sub_1CC27BE9C((uint64_t)v7, a2, v8, (uint64_t)&v35, a5);
  uint64_t v10 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 32);
  unsigned int v11 = *(_DWORD *)(*(void *)v10 + 8);
  if ((v11 & 0xFE) == 0x12) {
    unsigned int v11 = *(_DWORD *)(**(void **)(*(void *)v10 + 16) + 8);
  }
  uint64_t v12 = *(uint64_t **)a1;
  unint64_t v13 = llvm::PointerType::get(**(llvm::PointerType ***)(a1 + 8), (llvm::Type *)(v11 >> 8));
  __int16 v34 = 257;
  if (*(void *)v10 != v13)
  {
    if (v10[16] <= 0x14u)
    {
      uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v12[9] + 224))(v12[9], 49, v10, v13);
      if (v10) {
        BOOL v18 = v10[16] >= 0x1Cu;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v12[10] + 16))(v12[10], v10, v33, v12[6], v12[7]);
        uint64_t v30 = *((unsigned int *)v12 + 2);
        if (v30)
        {
          uint64_t v31 = *v12;
          uint64_t v32 = v31 + 16 * v30;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v10, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
            v31 += 16;
          }
          while (v31 != v32);
        }
      }
    }
    else
    {
      __int16 v37 = 257;
      uint64_t v10 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v10, v13, &v35, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v12[10] + 16))(v12[10], v10, v33, v12[6], v12[7]);
      uint64_t v15 = *((unsigned int *)v12 + 2);
      if (v15)
      {
        uint64_t v16 = *v12;
        uint64_t v17 = v16 + 16 * v15;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v10, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
          v16 += 16;
        }
        while (v16 != v17);
      }
    }
  }
  uint64_t v19 = *(uint64_t ****)(a1 + 16);
  unsigned __int8 v20 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v19 + 9) >> 1)) ^ 0x3F;
  if ((**(unsigned char **)(a1 + 24) == 0) != a3)
  {
    uint64_t v21 = *(uint64_t **)a1;
    uint64_t v22 = **(void **)(a1 + 8);
    uint64_t v23 = ***v19;
    int v24 = *(llvm::ConstantInt **)(v23 + 1960);
    unsigned int v25 = *(_DWORD *)(v23 + 1968);
    unsigned int v36 = v25 >> 8;
    if (v25 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v25) + 63);
    if (v25 <= 0xFF) {
      LOBYTE(v26) = 0;
    }
    unsigned int v35 = (const char *)(v26 & 1);
    unint64_t v27 = (const char *)llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v35, v14);
    if (v36 >= 0x41 && v35) {
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
    __int16 v37 = 257;
    uint64_t v10 = (unsigned __int8 *)sub_1CB930F7C(v21, v22, (uint64_t *)v10, v27, (uint64_t)&v35);
    unint64_t v28 = (1 << v20) | ((unint64_t)**(unsigned int **)(a1 + 32) >> 3);
    unsigned __int8 v20 = 63 - __clz(v28 & -(uint64_t)v28);
  }
  return sub_1CC27BF8C(*(uint64_t **)a1, (uint64_t)v9, (uint64_t)v10, v20 | 0x100u, 0);
}

llvm::CastInst *sub_1CC27BE9C(uint64_t a1, llvm::CastInst *this, llvm::Type ***a3, uint64_t a4, llvm::Instruction *a5)
{
  if (*(llvm::Type ****)this == a3) {
    return this;
  }
  if (*((unsigned __int8 *)this + 16) > 0x14u)
  {
    __int16 v11 = 257;
    size_t v8 = llvm::CastInst::CreateZExtOrBitCast(this, a3, &v10, 0, a5);
    return sub_1CB844E0C((uint64_t *)a1, v8, a4);
  }
  this = (llvm::CastInst *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 288))(*(void *)(a1 + 72));
  if (this) {
    BOOL v9 = *((unsigned __int8 *)this + 16) >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return this;
  }

  return sub_1CB844E0C((uint64_t *)a1, this, a4);
}

llvm::Instruction *sub_1CC27BF8C(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 a4, __int16 a5)
{
  char Alignment = a4;
  if ((a4 & 0xFF00) == 0) {
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 272), *(llvm::Type **)a2, 1);
  }
  uint64_t v10 = (char *)operator new(0x80uLL);
  *((_DWORD *)v10 + 21) = *((_DWORD *)v10 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 8) = ***(void ***)a2 + 1576;
  __int16 v11 = (llvm::Instruction *)(v10 + 64);
  *((void *)v10 + 3) = v10 + 64;
  *((void *)v10 + 7) = v10 + 64;
  *((void *)v10 + 9) = 0;
  v10[80] = 61;
  v10[81] = 0;
  *((_DWORD *)v10 + 21) = 2;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  uint64_t v12 = (void *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)uint64_t v10 = a2;
  *((void *)v10 + 1) = v13;
  if (v13) {
    *(void *)(v13 + 16) = v10 + 8;
  }
  *((void *)v10 + 2) = v12;
  *uint64_t v12 = v10;
  *((void *)v10 + 4) = a3;
  if (a3)
  {
    uint64_t v16 = *(void *)(a3 + 8);
    uint64_t v15 = (void *)(a3 + 8);
    uint64_t v14 = v16;
    *((void *)v10 + 5) = v16;
    if (v16) {
      *(void *)(v14 + 16) = v10 + 40;
    }
    *((void *)v10 + 6) = v15;
    *uint64_t v15 = v10 + 32;
  }
  *((_WORD *)v10 + 41) = a5 & 0xFF81 | (2 * (Alignment & 0x3F));
  v10[124] = 1;
  __int16 v22 = 257;
  (*(void (**)(uint64_t, llvm::Instruction *, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v11, v21, a1[6], a1[7]);
  uint64_t v17 = *((unsigned int *)a1 + 2);
  if (v17)
  {
    uint64_t v19 = *a1;
    uint64_t v20 = v19 + 16 * v17;
    do
    {
      llvm::Instruction::setMetadata(v11, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
      v19 += 16;
    }
    while (v19 != v20);
  }
  return v11;
}

BOOL sub_1CC27C13C(void *a1, void *a2)
{
  sub_1CD50F67C((uint64_t)a1, a2, (uint64_t)&v17);
  int v4 = v18;
  if (v18)
  {
    uint64_t v6 = (void *)a1[4];
    unint64_t v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      size_t v8 = (void *)a1[3];
      uint64_t v9 = v6 - v8;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1CB833614();
        }
        uint64_t v13 = (char *)operator new(8 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      *(void *)uint64_t v14 = *a2;
      unint64_t v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          uint64_t v15 = *--v6;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        uint64_t v6 = (void *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *uint64_t v6 = *a2;
      unint64_t v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

void *sub_1CC27C25C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD50F854(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC27C328(uint64_t a1, char a2)
{
  int v4 = (void *)(a1 + 64);
  *(void *)(a1 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 1, 74);
  unint64_t v5 = llvm::Attribute::get(**(uint64_t ***)a1, 0x4Au, 1 << a2);
  int v7 = 0;
  uint64_t result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v5);
  *(void *)(a1 + 64) = result;
  return result;
}

uint64_t sub_1CC27C3B8(uint64_t a1, char a2)
{
  int v4 = (void *)(a1 + 64);
  *(void *)(a1 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 2, 74);
  unint64_t v5 = llvm::Attribute::get(**(uint64_t ***)a1, 0x4Au, 1 << a2);
  int v7 = 1;
  uint64_t result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v5);
  *(void *)(a1 + 64) = result;
  return result;
}

uint64_t sub_1CC27C448(uint64_t a1, llvm::User *a2, unsigned __int8 *a3)
{
  v132[2] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a3[16];
  if (!a3 || v6 != 62)
  {
    if (v6 < 0x15) {
      return 0;
    }
    v109[0] = 0;
    uint64_t v115 = (uint64_t)v109;
    int v11 = sub_1CC189A5C((uint64_t)&v114, (uint64_t)a3);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    unint64_t v12 = (uint64_t *)v109[0];
    if (!v109[0]) {
      return result;
    }
    uint64_t v13 = 0;
    uint64_t v14 = (llvm::Type *)*(unsigned int *)(*(void *)a3 + 32);
    int v15 = *(unsigned __int8 *)(*(void *)a3 + 8);
    uint64_t v16 = **(void **)a2;
    uint64_t v114 = v116;
    uint64_t v115 = 0x200000000;
    uint64_t v119 = v16;
    long long v120 = &v128;
    long long v121 = &v129;
    uint64_t v122 = 0;
    int v123 = 0;
    __int16 v124 = 512;
    char v125 = 7;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    unint64_t v128 = &unk_1F2616E88;
    long long v129 = &unk_1F2617008;
    uint64_t v17 = (uint64_t *)*((void *)a2 + 6);
    uint64_t v117 = *((void *)a2 + 5);
    uint64_t v118 = (char *)a2 + 24;
    uint64_t v130 = v17;
    if (v17)
    {
      llvm::MetadataTracking::track((uint64_t)&v130, (unsigned __int8 *)v17, 2);
      uint64_t v13 = (uint64_t)v130;
    }
    sub_1CB8461A4((uint64_t)&v114, 0, v13);
    if (v130)
    {
      int v56 = *(unsigned __int8 *)v130;
      if ((v56 - 4) > 0x1E)
      {
        if ((v56 - 3) >= 0xFFFFFFFE) {
          uint64_t v59 = v130;
        }
        else {
          uint64_t v59 = 0;
        }
        if ((v56 - 3) < 0xFFFFFFFE)
        {
          if (v56 == 3) {
            v130[1] = 0;
          }
          goto LABEL_14;
        }
        unint64_t v58 = (unint64_t)(v59 + 1);
      }
      else
      {
        if ((*((unsigned char *)v130 + 1) & 0x7F) != 2 && !*((_DWORD *)v130 + 3)) {
          goto LABEL_14;
        }
        unint64_t v57 = v130[2];
        if ((v57 & 4) == 0) {
          goto LABEL_14;
        }
        unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
        if (!v58) {
          goto LABEL_14;
        }
      }
      v109[0] = &v130;
      sub_1CC5FA668(v58 + 16, v109);
    }
LABEL_14:
    uint64_t v18 = *(void *)(a1 + 720);
    uint64_t v19 = *v12;
    unsigned int v20 = *(_DWORD *)(*v12 + 8);
    if ((v20 & 0xFE) == 0x12)
    {
      uint64_t v21 = *(uint64_t **)(v19 + 16);
      uint64_t v19 = *v21;
      unsigned int v20 = *(_DWORD *)(*v21 + 8);
    }
    if ((v20 & 0xFE) == 0x12) {
      unsigned int v20 = *(_DWORD *)(**(void **)(v19 + 16) + 8);
    }
    uint64_t v22 = *(void *)(v18 + 232);
    if (v20 < 0x100) {
      goto LABEL_27;
    }
    unsigned int v23 = v20 >> 8;
    unint64_t v24 = *(unsigned int *)(v18 + 240);
    uint64_t v25 = *(void *)(v18 + 232);
    if (v24)
    {
      uint64_t v25 = v22;
      unint64_t v26 = v24;
      do
      {
        unint64_t v27 = v26 >> 1;
        uint64_t v28 = v25 + 16 * (v26 >> 1);
        unsigned int v29 = *(_DWORD *)(v28 + 8);
        uint64_t v30 = v28 + 16;
        v26 += ~(v26 >> 1);
        if (v29 < v23) {
          uint64_t v25 = v30;
        }
        else {
          unint64_t v26 = v27;
        }
      }
      while (v26);
    }
    if (v25 == v22 + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_27:
    }
      uint64_t v25 = v22;
    uint64_t v31 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v19, (llvm::LLVMContext *)*(unsigned int *)(v25 + 12));
    if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12)
    {
      int v105 = (llvm::Type *)*(unsigned int *)(v19 + 32);
      if (*(_DWORD *)(v19 + 8) == 19) {
        llvm::ScalableVectorType::get(v31, v105);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v105);
      }
    }
    if (v15 == 19) {
      llvm::ScalableVectorType::get(v31, v14);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v14);
    }
    if (*(_DWORD *)(*((void *)a2 - 4) + 36) == 184)
    {
      unsigned int v35 = *(uint64_t **)a2;
    }
    else
    {
      int v36 = *((_DWORD *)a2 + 5);
      if ((v36 & 0x40000000) != 0) {
        __int16 v37 = (uint64_t ***)*((void *)a2 - 1);
      }
      else {
        __int16 v37 = (uint64_t ***)((char *)a2 - 32 * (v36 & 0x7FFFFFF));
      }
      unsigned int v35 = **v37;
    }
    if ((v35[1] & 0xFE) == 0x12) {
      unsigned int v35 = *(uint64_t **)v35[2];
    }
    NullValue = llvm::Constant::getNullValue(v32, v33, v34);
    __int16 v110 = 257;
    uint64_t v54 = sub_1CB930F7C((uint64_t *)&v114, (uint64_t)v35, v12, (const char *)NullValue, (uint64_t)v109);
    if (v114 != v116) {
      free(v114);
    }
    goto LABEL_135;
  }
  int v7 = *((_DWORD *)a3 + 5);
  if ((v7 & 0x7FFFFFE) == 0 || *((void *)a2 + 5) != *((void *)a3 + 5)) {
    return 0;
  }
  if ((v7 & 0x40000000) != 0)
  {
    uint64_t v9 = (char *)*((void *)a3 - 1);
    uint64_t v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v8 = v7 & 0x7FFFFFF;
    uint64_t v9 = (char *)&a3[-32 * v8];
  }
  uint64_t v130 = v132;
  uint64_t v131 = 0x200000000;
  sub_1CC27D070((uint64_t)&v130, v9, &v9[32 * v8]);
  uint64_t v38 = v130;
  int v39 = (unsigned __int8 *)*v130;
  int v40 = *(_DWORD *)(*(void *)*v130 + 8) & 0xFE;
  if (v40 == 18)
  {
    if (v39[16] <= 0x14u)
    {
      SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v39, 0);
    }
    else
    {
      v109[0] = 0;
      uint64_t v115 = (uint64_t)v109;
      SplatValue = sub_1CC189A5C((uint64_t)&v114, (uint64_t)v39) ? (void *)v109[0] : 0;
    }
    *uint64_t v130 = (uint64_t)SplatValue;
    uint64_t v38 = v130;
    if (!*v130) {
      goto LABEL_68;
    }
  }
  uint64_t v42 = (v131 - 1);
  if (v42 >= 2)
  {
    uint64_t v43 = 1;
    while (1)
    {
      unsigned int v44 = (llvm::Constant *)v130[v43];
      unsigned int v45 = *((unsigned __int8 *)v44 + 16);
      BOOL v46 = !v44 || v45 > 0x14;
      if (v46) {
        goto LABEL_68;
      }
      if ((*(_DWORD *)(*(void *)v44 + 8) & 0xFE) == 0x12)
      {
        unsigned int v44 = (llvm::Constant *)llvm::Constant::getSplatValue(v44, 0);
        if (!v44) {
          goto LABEL_68;
        }
        unsigned int v45 = *((unsigned __int8 *)v44 + 16);
      }
      if (v45 != 16) {
        goto LABEL_68;
      }
      uint64_t v47 = *((unsigned int *)v44 + 8);
      if (v47 > 0x40)
      {
        int v48 = 0;
        int64_t v49 = (unint64_t)(v47 + 63) >> 6;
        do
        {
          BOOL v46 = v49-- < 1;
          if (v46) {
            break;
          }
          unint64_t v50 = *(void *)(*((void *)v44 + 3) + 8 * v49);
          v48 += __clz(v50);
        }
        while (!v50);
        int v51 = v47 | 0xFFFFFFC0;
        if ((v47 & 0x3F) == 0) {
          int v51 = 0;
        }
        if (v48 + v51 != v47) {
          goto LABEL_68;
        }
      }
      else if (*((void *)v44 + 3))
      {
        goto LABEL_68;
      }
      v130[v43++] = (uint64_t)v44;
      if (v43 == v42)
      {
        uint64_t v38 = v130;
        break;
      }
    }
  }
  uint64_t v52 = (unsigned __int8 *)v38[v42];
  if ((*(_DWORD *)(*(void *)v52 + 8) & 0xFE) != 0x12) {
    goto LABEL_66;
  }
  if (v52[16] <= 0x14u)
  {
    uint64_t v60 = llvm::Constant::getSplatValue((llvm::Constant *)v52, 0);
    if (!v60) {
      goto LABEL_66;
    }
  }
  else
  {
    v109[0] = 0;
    uint64_t v115 = (uint64_t)v109;
    if (!sub_1CC189A5C((uint64_t)&v114, (uint64_t)v52)) {
      goto LABEL_66;
    }
    uint64_t v60 = (unsigned char *)v109[0];
    if (!v109[0]) {
      goto LABEL_66;
    }
  }
  if (v60[16] != 16) {
    goto LABEL_103;
  }
  uint64_t v61 = *((unsigned int *)v60 + 8);
  if (v61 <= 0x40)
  {
    if (!*((void *)v60 + 3)) {
      goto LABEL_66;
    }
LABEL_103:
    v130[v42] = (uint64_t)v60;
    goto LABEL_104;
  }
  int v62 = 0;
  int64_t v63 = (unint64_t)(v61 + 63) >> 6;
  do
  {
    BOOL v46 = v63-- < 1;
    if (v46) {
      break;
    }
    unint64_t v64 = *(void *)(*((void *)v60 + 3) + 8 * v63);
    v62 += __clz(v64);
  }
  while (!v64);
  int v65 = v61 | 0xFFFFFFC0;
  if ((v61 & 0x3F) == 0) {
    int v65 = 0;
  }
  if (v62 + v65 != v61) {
    goto LABEL_103;
  }
LABEL_66:
  if (v40 != 18 && v131 == 2)
  {
LABEL_68:
    char v53 = 0;
    uint64_t v54 = 0;
    goto LABEL_132;
  }
LABEL_104:
  uint64_t v66 = 0;
  unsigned int v108 = *(_DWORD *)(*(void *)a3 + 32);
  int v67 = *(unsigned __int8 *)(*(void *)a3 + 8);
  uint64_t v68 = **(void **)a2;
  uint64_t v114 = v116;
  uint64_t v115 = 0x200000000;
  uint64_t v119 = v68;
  long long v120 = &v128;
  long long v121 = &v129;
  uint64_t v122 = 0;
  int v123 = 0;
  __int16 v124 = 512;
  char v125 = 7;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  unint64_t v128 = &unk_1F2616E88;
  long long v129 = &unk_1F2617008;
  uint64_t v69 = (unsigned __int8 *)*((void *)a2 + 6);
  uint64_t v117 = *((void *)a2 + 5);
  uint64_t v118 = (char *)a2 + 24;
  int v111 = v69;
  if (v69)
  {
    llvm::MetadataTracking::track((uint64_t)&v111, v69, 2);
    uint64_t v66 = (uint64_t)v111;
  }
  sub_1CB8461A4((uint64_t)&v114, 0, v66);
  if (!v111) {
    goto LABEL_107;
  }
  int v101 = *v111;
  if ((v101 - 4) > 0x1E)
  {
    if ((v101 - 3) >= 0xFFFFFFFE) {
      uint64_t v104 = v111;
    }
    else {
      uint64_t v104 = 0;
    }
    if ((v101 - 3) < 0xFFFFFFFE)
    {
      if (v101 == 3) {
        *((void *)v111 + 1) = 0;
      }
      goto LABEL_107;
    }
    unint64_t v103 = (unint64_t)(v104 + 8);
  }
  else
  {
    if ((v111[1] & 0x7F) != 2 && !*((_DWORD *)v111 + 3)) {
      goto LABEL_107;
    }
    uint64_t v102 = *((void *)v111 + 2);
    if ((v102 & 4) == 0) {
      goto LABEL_107;
    }
    unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8;
    if (!v103) {
      goto LABEL_107;
    }
  }
  v109[0] = &v111;
  sub_1CC5FA668(v103 + 16, v109);
LABEL_107:
  uint64_t v70 = *(void *)(a1 + 720);
  uint64_t v71 = *(void *)*v130;
  unsigned int v72 = *(_DWORD *)(v71 + 8);
  if ((v72 & 0xFE) == 0x12)
  {
    unsigned int v73 = *(uint64_t **)(v71 + 16);
    uint64_t v71 = *v73;
    unsigned int v72 = *(_DWORD *)(*v73 + 8);
  }
  if ((v72 & 0xFE) == 0x12) {
    unsigned int v72 = *(_DWORD *)(**(void **)(v71 + 16) + 8);
  }
  uint64_t v74 = *(void *)(v70 + 232);
  if (v72 < 0x100) {
    goto LABEL_120;
  }
  unsigned int v75 = v72 >> 8;
  unint64_t v76 = *(unsigned int *)(v70 + 240);
  uint64_t v77 = *(void *)(v70 + 232);
  if (v76)
  {
    uint64_t v77 = v74;
    unint64_t v78 = v76;
    do
    {
      unint64_t v79 = v78 >> 1;
      uint64_t v80 = v77 + 16 * (v78 >> 1);
      unsigned int v81 = *(_DWORD *)(v80 + 8);
      uint64_t v82 = v80 + 16;
      v78 += ~(v78 >> 1);
      if (v81 < v75) {
        uint64_t v77 = v82;
      }
      else {
        unint64_t v78 = v79;
      }
    }
    while (v78);
  }
  if (v77 == v74 + 16 * v76 || *(_DWORD *)(v77 + 8) != v75) {
LABEL_120:
  }
    uint64_t v77 = v74;
  uint64_t IndexedType = *((void *)a3 + 8);
  long long v84 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v71, (llvm::LLVMContext *)*(unsigned int *)(v77 + 12));
  unint64_t v87 = (llvm::Constant *)v84;
  if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12)
  {
    uint64_t v106 = (llvm::Type *)*(unsigned int *)(v71 + 32);
    if (*(_DWORD *)(v71 + 8) == 19) {
      llvm::ScalableVectorType::get(v84, v106);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v84, v106);
    }
    unint64_t v87 = v107;
  }
  int v88 = (llvm::Value *)v130[v42];
  uint64_t v89 = (uint64_t *)*v130;
  if ((*(_DWORD *)(*(void *)v88 + 8) & 0xFE) == 0x12)
  {
    if (v131 != 2)
    {
      int v90 = llvm::Constant::getNullValue(v87, v85, v86);
      v130[v42] = (uint64_t)v90;
      __int16 v110 = 257;
      uint64_t v89 = (uint64_t *)sub_1CC27CEC0((uint64_t *)&v114, IndexedType, v89, v130 + 1, v131 - 1, (uint64_t)v109);
      uint64_t IndexedType = llvm::GetElementPtrInst::getIndexedType(IndexedType, (uint64_t)(v130 + 1), v131 - 1);
    }
    __int16 v110 = 257;
    uint64_t v91 = IndexedType;
    BOOL v92 = v89;
    unint64_t v93 = v88;
  }
  else
  {
    __int16 v110 = 257;
    uint64_t v94 = sub_1CC27CEC0((uint64_t *)&v114, IndexedType, v89, v130 + 1, v131 - 1, (uint64_t)v109);
    if (v67 == 19) {
      llvm::ScalableVectorType::get((uint64_t **)v87, (llvm::Type *)v108);
    }
    else {
      llvm::FixedVectorType::get(v87, (llvm::Type *)v108);
    }
    int v96 = v95;
    uint64_t v97 = llvm::GetElementPtrInst::getIndexedType(IndexedType, (uint64_t)(v130 + 1), v131 - 1);
    unint64_t v93 = llvm::Constant::getNullValue(v96, v98, v99);
    __int16 v110 = 257;
    uint64_t v91 = v97;
    BOOL v92 = (uint64_t *)v94;
  }
  uint64_t v54 = sub_1CB930F7C((uint64_t *)&v114, v91, v92, (const char *)v93, (uint64_t)v109);
  if (v114 != v116) {
    free(v114);
  }
  char v53 = 1;
LABEL_132:
  if (v130 != v132) {
    free(v130);
  }
  if ((v53 & 1) == 0) {
    return 0;
  }
LABEL_135:
  llvm::User::replaceUsesOfWith(a2, (llvm::Value *)a3, v54);
  if (!*((void *)a3 + 1))
  {
    uint64_t v100 = *(uint64_t **)(a1 + 72);
    v112[0] = &unk_1F2609F98;
    v112[1] = a1;
    int v113 = v112;
    llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)a3, v100, 0, (uint64_t)v112);
    if (v113 == v112)
    {
      (*(void (**)(void *))(v112[0] + 32))(v112);
    }
    else if (v113)
    {
      (*(void (**)(void))(*v113 + 40))();
    }
  }
  return 1;
}

uint64_t sub_1CC27CEC0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, void))(*(void *)a1[9] + 48))(a1[9], a2, a3, a4, a5, 0);
  if (!v12)
  {
    uint64_t v14 = (a5 + 1);
    __int16 v22 = 257;
    int v15 = operator new(32 * v14 + 80);
    uint64_t v12 = (uint64_t)&v15[4 * v14];
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0x38000000 | v14 & 0x7FFFFFF;
    if (a5 != -1)
    {
      do
      {
        *int v15 = 0;
        v15[1] = 0;
        _OWORD v15[2] = 0;
        v15[3] = v12;
        v15 += 4;
      }
      while (v15 != (void *)v12);
    }
    sub_1CB845A7C(a2, a3, (uint64_t)a4, a5);
    *(void *)uint64_t v12 = v16;
    *(void *)(v12 + 8) = 0;
    int v17 = *(_DWORD *)(v12 + 20) & 0xC0000000 | v14 & 0x7FFFFFF;
    *(_DWORD *)(v12 + 16) = 62;
    *(_DWORD *)(v12 + 20) = v17;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_DWORD *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = a2;
    *(void *)(v12 + 72) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)a4, a5);
    llvm::GetElementPtrInst::init((uint64_t ***)v12, (uint64_t **)a3, a4, a5, &v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v12, a6, a1[6], a1[7]);
    uint64_t v18 = *((unsigned int *)a1 + 2);
    if (v18)
    {
      uint64_t v19 = *a1;
      uint64_t v20 = v19 + 16 * v18;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
        v19 += 16;
      }
      while (v19 != v20);
    }
  }
  return v12;
}

uint64_t sub_1CC27D070(uint64_t result, char *a2, char *a3)
{
  unint64_t v3 = a3 - a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    unint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)a2;
      a2 += 32;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 5);
  return result;
}

void sub_1CC27D104()
{
}

void *sub_1CC27D118(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2609F98;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC27D160(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2609F98;
  a2[1] = v2;
  return result;
}

void sub_1CC27D18C(uint64_t a1, unint64_t *a2)
{
}

uint64_t sub_1CC27D198(void *a1, uint64_t a2)
{
  uint64_t result = 0;
  void v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5 && !*(void *)(v5 + 8))
    {
      uint64_t result = llvm::isSafeToSpeculativelyExecute(a2, 0, 0, 0);
      if (result)
      {
        int v6 = *(_DWORD *)(a2 + 20);
        if ((v6 & 0x40000000) != 0)
        {
          uint64_t v8 = *(uint64_t **)(a2 - 8);
          unint64_t v7 = v6 & 0x7FFFFFF;
        }
        else
        {
          unint64_t v7 = v6 & 0x7FFFFFF;
          uint64_t v8 = (uint64_t *)(a2 - 32 * v7);
        }
        if (v7 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v9 = 32 * v7;
          uint64_t v10 = v14;
          do
          {
            uint64_t v11 = *v8;
            v8 += 4;
            *v10++ = v11;
            v9 -= 32;
          }
          while (v9);
        }
        uint64_t v13 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*a1 + 72))(*a1, a2, v14);
        if (v12) {
          return v12 >= 0;
        }
        else {
          return v13 > 3;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1CC27D344()
{
}

void *sub_1CC27D358(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2609FE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC27D3A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2609FE0;
  a2[1] = v2;
  return result;
}

void sub_1CC27D3CC(uint64_t a1, unint64_t *a2)
{
}

void sub_1CC27D3DC()
{
}

void *sub_1CC27D3F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F260A028;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC27D438(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F260A028;
  a2[1] = v2;
  return result;
}

void sub_1CC27D464(uint64_t a1, unint64_t *a2)
{
}

BOOL sub_1CC27D470(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 244;
}

uint64_t *sub_1CC27D4BC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v213 = a2 - 2;
  int v221 = a2;
  uint64_t v205 = a2 - 6;
  int v206 = a2 - 4;
  uint64_t v11 = v10;
  while (1)
  {
    int v12 = v11;
    uint64_t v13 = (char *)a2 - (char *)v11;
    uint64_t v14 = ((char *)a2 - (char *)v11) >> 4;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v105 = *(a2 - 2);
          uint64_t v106 = *v12;
          if (v105 == *v12) {
            return result;
          }
          uint64_t v107 = *(a2 - 1);
          uint64_t v108 = v12[1];
          if (v107 == v108)
          {
            uint64_t v203 = *a3 + 664;
            uint64_t v227 = *(a2 - 2);
            int v204 = *((_DWORD *)sub_1CD50EB30(v203, &v227) + 2);
            uint64_t v226 = v106;
            uint64_t result = sub_1CD50EB30(v203, &v226);
            if (v204 >= *((_DWORD *)result + 2)) {
              return result;
            }
            uint64_t v106 = *v12;
            uint64_t v108 = v12[1];
            uint64_t v105 = *(a2 - 2);
            uint64_t v107 = *(a2 - 1);
          }
          else if (v107 >= v108)
          {
            return result;
          }
          *int v12 = v105;
          *(a2 - 2) = v106;
          v12[1] = v107;
          *(a2 - 1) = v108;
          return result;
        case 3:
          return sub_1CC27E7AC(v12, v12 + 2, v213, a3);
        case 4:
          return sub_1CC27ED68(v12, v12 + 2, v12 + 4, v213, a3);
        case 5:
          return sub_1CC27E564(v12, v12 + 2, v12 + 4, v12 + 6, v213, a3);
        default:
          JUMPOUT(0);
      }
    }
    unsigned int v225 = v12;
    if (v13 <= 383) {
      break;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v128 = (unint64_t)(v14 - 2) >> 1;
      int64_t v129 = v128;
      while (1)
      {
        int64_t v130 = v129;
        if (v128 < v129) {
          goto LABEL_192;
        }
        uint64_t v131 = (2 * v129) | 1;
        int v132 = &v225[2 * v131];
        uint64_t v133 = 2 * v129 + 2;
        if (v133 >= v14) {
          goto LABEL_166;
        }
        uint64_t v134 = v132[2];
        if (*v132 == v134) {
          goto LABEL_166;
        }
        uint64_t v135 = v132[1];
        uint64_t v136 = v132[3];
        if (v135 == v136) {
          break;
        }
        if (v135 < v136) {
          goto LABEL_165;
        }
LABEL_166:
        int v137 = &v225[2 * v130];
        uint64_t v138 = *v132;
        uint64_t v139 = v132[1];
        uint64_t v140 = *v137;
        int v142 = v137 + 1;
        uint64_t v141 = v137[1];
        if (*v132 == *v137)
        {
          uint64_t v140 = *v132;
        }
        else if (v139 == v141)
        {
          uint64_t v156 = *a3 + 664;
          uint64_t v227 = *v132;
          int64_t v157 = v130;
          int v217 = *((_DWORD *)sub_1CD50EB30(v156, &v227) + 2);
          uint64_t v226 = v140;
          uint64_t result = sub_1CD50EB30(v156, &v226);
          int64_t v130 = v157;
          if (v217 < *((_DWORD *)result + 2)) {
            goto LABEL_192;
          }
          uint64_t v140 = *v137;
          uint64_t v141 = *v142;
          uint64_t v138 = *v132;
          uint64_t v139 = v132[1];
        }
        else if (v139 < v141)
        {
          goto LABEL_192;
        }
        uint64_t *v137 = v138;
        *int v142 = v139;
        while (1)
        {
          if (v128 < v131) {
            goto LABEL_191;
          }
          uint64_t v143 = v132;
          uint64_t v144 = 2 * v131;
          uint64_t v131 = (2 * v131) | 1;
          int v132 = &v225[2 * v131];
          uint64_t v145 = v144 + 2;
          if (v144 + 2 < v14)
          {
            uint64_t v146 = v132[2];
            if (*v132 != v146)
            {
              uint64_t v147 = v132[1];
              uint64_t v148 = v132[3];
              if (v147 != v148)
              {
                if (v147 >= v148) {
                  goto LABEL_179;
                }
LABEL_178:
                v132 += 2;
                uint64_t v131 = v145;
                goto LABEL_179;
              }
              uint64_t v154 = *a3 + 664;
              uint64_t v208 = v154;
              uint64_t v211 = v141;
              uint64_t v227 = *v132;
              int64_t v216 = v130;
              int v155 = *((_DWORD *)sub_1CD50EB30(v154, &v227) + 2);
              uint64_t v226 = v146;
              uint64_t result = sub_1CD50EB30(v208, &v226);
              uint64_t v141 = v211;
              int64_t v130 = v216;
              BOOL v38 = v155 < *((_DWORD *)result + 2);
              int64_t v128 = (unint64_t)(v14 - 2) >> 1;
              if (v38) {
                goto LABEL_178;
              }
            }
          }
LABEL_179:
          uint64_t v149 = *v132;
          uint64_t v150 = v132[1];
          if (*v132 == v140)
          {
            uint64_t v149 = v140;
            goto LABEL_185;
          }
          if (v150 == v141) {
            break;
          }
          if (v150 < v141)
          {
            int v132 = v143;
            goto LABEL_191;
          }
LABEL_185:
          *uint64_t v143 = v149;
          v143[1] = v150;
        }
        uint64_t v151 = v141;
        int64_t v152 = v130;
        uint64_t v153 = *a3 + 664;
        uint64_t v227 = *v132;
        int v215 = *((_DWORD *)sub_1CD50EB30(v153, &v227) + 2);
        uint64_t v226 = v140;
        uint64_t result = sub_1CD50EB30(v153, &v226);
        if (v215 >= *((_DWORD *)result + 2))
        {
          uint64_t v149 = *v132;
          uint64_t v150 = v132[1];
          int64_t v130 = v152;
          uint64_t v141 = v151;
          goto LABEL_185;
        }
        int v132 = v143;
        int64_t v130 = v152;
        uint64_t v141 = v151;
LABEL_191:
        uint64_t *v132 = v140;
        v132[1] = v141;
LABEL_192:
        int64_t v129 = v130 - 1;
        if (!v130)
        {
          uint64_t v160 = v221;
          unsigned int v161 = v225;
          while (1)
          {
            BOOL v222 = v160;
            uint64_t v162 = 0;
            uint64_t v163 = *v161;
            uint64_t v164 = v161[1];
            uint64_t v165 = v161;
            do
            {
              unsigned int v166 = v165;
              v165 += 2 * v162 + 2;
              uint64_t v167 = 2 * v162;
              uint64_t v162 = (2 * v162) | 1;
              uint64_t v168 = v167 + 2;
              if (v167 + 2 < v14)
              {
                uint64_t v169 = v165[2];
                if (*v165 != v169)
                {
                  uint64_t v170 = v165[1];
                  uint64_t v171 = v165[3];
                  if (v170 != v171)
                  {
                    if (v170 >= v171) {
                      goto LABEL_205;
                    }
LABEL_204:
                    v165 += 2;
                    uint64_t v162 = v168;
                    goto LABEL_205;
                  }
                  uint64_t v172 = *a3 + 664;
                  uint64_t v227 = *v165;
                  uint64_t v212 = v164;
                  uint64_t v219 = v163;
                  int v209 = *((_DWORD *)sub_1CD50EB30(v172, &v227) + 2);
                  uint64_t v226 = v169;
                  uint64_t v173 = v172;
                  unsigned int v161 = v225;
                  uint64_t result = sub_1CD50EB30(v173, &v226);
                  uint64_t v164 = v212;
                  uint64_t v163 = v219;
                  if (v209 < *((_DWORD *)result + 2)) {
                    goto LABEL_204;
                  }
                }
              }
LABEL_205:
              *unsigned int v166 = *v165;
              v166[1] = v165[1];
            }
            while (v162 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
            uint64_t v160 = v222 - 2;
            if (v165 == v222 - 2)
            {
              *uint64_t v165 = v163;
              v165[1] = v164;
              goto LABEL_227;
            }
            *uint64_t v165 = *(v222 - 2);
            v165[1] = *(v222 - 1);
            *(v222 - 2) = v163;
            *(v222 - 1) = v164;
            uint64_t v174 = (char *)v165 - (char *)v161 + 16;
            if (v174 >= 17)
            {
              unint64_t v175 = ((unint64_t)v174 >> 4) - 2;
              unint64_t v176 = v175 >> 1;
              long long v177 = &v225[2 * (v175 >> 1)];
              uint64_t v178 = *v177;
              uint64_t v179 = *v165;
              if (*v177 != *v165)
              {
                uint64_t v180 = v177[1];
                uint64_t v181 = v165[1];
                if (v180 == v181)
                {
                  uint64_t v187 = *a3 + 664;
                  uint64_t v227 = *v177;
                  int v224 = *((_DWORD *)sub_1CD50EB30(v187, &v227) + 2);
                  uint64_t v226 = v179;
                  uint64_t result = sub_1CD50EB30(v187, &v226);
                  if (v224 < *((_DWORD *)result + 2))
                  {
                    uint64_t v179 = *v165;
                    uint64_t v181 = v165[1];
                    uint64_t v178 = *v177;
                    uint64_t v180 = v177[1];
LABEL_216:
                    *uint64_t v165 = v178;
                    v165[1] = v180;
                    if (v175 >= 2)
                    {
                      while (1)
                      {
                        unint64_t v183 = v176 - 1;
                        unint64_t v176 = (v176 - 1) >> 1;
                        uint64_t v182 = &v225[2 * v176];
                        uint64_t v184 = *v182;
                        if (*v182 == v179) {
                          break;
                        }
                        uint64_t v185 = v182[1];
                        if (v185 == v181)
                        {
                          uint64_t v186 = *a3 + 664;
                          uint64_t v220 = v186;
                          uint64_t v227 = *v182;
                          int v223 = *((_DWORD *)sub_1CD50EB30(v186, &v227) + 2);
                          uint64_t v226 = v179;
                          uint64_t result = sub_1CD50EB30(v220, &v226);
                          if (v223 >= *((_DWORD *)result + 2)) {
                            break;
                          }
                          uint64_t v184 = *v182;
                          uint64_t v185 = v182[1];
                        }
                        else if (v185 >= v181)
                        {
                          break;
                        }
                        *long long v177 = v184;
                        v177[1] = v185;
                        long long v177 = &v225[2 * v176];
                        if (v183 <= 1) {
                          goto LABEL_218;
                        }
                      }
                    }
                    uint64_t v182 = v177;
LABEL_218:
                    *uint64_t v182 = v179;
                    v182[1] = v181;
                  }
                }
                else if (v180 < v181)
                {
                  goto LABEL_216;
                }
              }
            }
LABEL_227:
            BOOL v38 = v14-- <= 2;
            unsigned int v161 = v225;
            if (v38) {
              return result;
            }
          }
        }
      }
      uint64_t v158 = *a3 + 664;
      uint64_t v227 = *v132;
      int64_t v159 = v129;
      int v218 = *((_DWORD *)sub_1CD50EB30(v158, &v227) + 2);
      uint64_t v226 = v134;
      uint64_t result = sub_1CD50EB30(v158, &v226);
      int64_t v130 = v159;
      if (v218 >= *((_DWORD *)result + 2)) {
        goto LABEL_166;
      }
LABEL_165:
      v132 += 2;
      uint64_t v131 = v133;
      goto LABEL_166;
    }
    unint64_t v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
    if ((unint64_t)v13 < 0x801)
    {
      uint64_t result = sub_1CC27E7AC(v16, v12, v213, a3);
    }
    else
    {
      sub_1CC27E7AC(v12, v16, v213, a3);
      sub_1CC27E7AC(v12 + 2, v16 - 2, v206, a3);
      sub_1CC27E7AC(v12 + 4, &v12[2 * v15 + 2], v205, a3);
      uint64_t result = sub_1CC27E7AC(v16 - 2, v16, &v12[2 * v15 + 2], a3);
      uint64_t v17 = *v12;
      uint64_t v18 = v12[1];
      uint64_t v19 = v16[1];
      *int v12 = *v16;
      v12[1] = v19;
      *uint64_t v16 = v17;
      v16[1] = v18;
    }
    uint64_t v20 = a4 - 1;
    uint64_t v21 = *v12;
    if (a5) {
      goto LABEL_14;
    }
    uint64_t v22 = v12[1];
    uint64_t v23 = *a3;
    if (*(v12 - 2) == v21) {
      goto LABEL_65;
    }
    uint64_t v24 = *(v12 - 1);
    if (v24 == v22)
    {
      uint64_t v64 = v23 + 664;
      uint64_t v227 = *(v12 - 2);
      int v65 = *((_DWORD *)sub_1CD50EB30(v23 + 664, &v227) + 2);
      uint64_t v226 = v21;
      uint64_t result = sub_1CD50EB30(v64, &v226);
      uint64_t v21 = *v12;
      if (v65 < *((_DWORD *)result + 2)) {
        goto LABEL_14;
      }
      uint64_t v22 = v12[1];
      uint64_t v23 = *a3;
LABEL_65:
      unint64_t v66 = (unint64_t)v221;
      uint64_t v67 = *(v221 - 2);
      if (v21 == v67) {
        goto LABEL_77;
      }
      uint64_t v68 = *(v221 - 1);
      BOOL v69 = v22 < v68;
      if (v22 == v68)
      {
        uint64_t v102 = v23 + 664;
        uint64_t v227 = v21;
        uint64_t v103 = v20;
        int v104 = *((_DWORD *)sub_1CD50EB30(v23 + 664, &v227) + 2);
        uint64_t v226 = v67;
        uint64_t result = sub_1CD50EB30(v102, &v226);
        BOOL v69 = v104 < *((_DWORD *)result + 2);
        uint64_t v20 = v103;
      }
      unint64_t v66 = (unint64_t)v221;
      if (v69)
      {
        uint64_t v70 = v20;
        uint64_t v71 = v12 + 2;
        do
        {
          do
          {
            uint64_t v11 = v71;
            uint64_t v73 = *v71;
            v71 += 2;
            uint64_t v72 = v73;
          }
          while (v21 == v73);
          uint64_t v74 = v11[1];
          BOOL v75 = v22 < v74;
          if (v22 == v74)
          {
            uint64_t v76 = *a3 + 664;
            uint64_t v227 = v21;
            int v77 = *((_DWORD *)sub_1CD50EB30(v76, &v227) + 2);
            uint64_t v226 = v72;
            uint64_t result = sub_1CD50EB30(v76, &v226);
            BOOL v75 = v77 < *((_DWORD *)result + 2);
            int v12 = v225;
          }
        }
        while (!v75);
      }
      else
      {
LABEL_77:
        uint64_t v70 = v20;
        uint64_t v11 = v12 + 2;
        if ((unint64_t)(v12 + 2) < v66)
        {
          do
          {
            uint64_t v78 = *v11;
            if (v21 != *v11)
            {
              uint64_t v79 = v11[1];
              if (v22 == v79)
              {
                uint64_t v80 = *a3 + 664;
                uint64_t v227 = v21;
                int v81 = *((_DWORD *)sub_1CD50EB30(v80, &v227) + 2);
                uint64_t v226 = v78;
                uint64_t result = sub_1CD50EB30(v80, &v226);
                if (v81 < *((_DWORD *)result + 2)) {
                  break;
                }
              }
              else if (v22 < v79)
              {
                break;
              }
            }
            v11 += 2;
          }
          while (v11 < v221);
        }
      }
      uint64_t v82 = v221;
      if (v11 < v221)
      {
        uint64_t v82 = v213;
        uint64_t v83 = *v213;
        if (v21 != *v213)
        {
          uint64_t v82 = v213;
          do
          {
            uint64_t v84 = v82[1];
            if (v22 == v84)
            {
              uint64_t v86 = *a3 + 664;
              uint64_t v227 = v21;
              int v87 = *((_DWORD *)sub_1CD50EB30(v86, &v227) + 2);
              uint64_t v226 = v83;
              uint64_t result = sub_1CD50EB30(v86, &v226);
              BOOL v38 = v87 < *((_DWORD *)result + 2);
              int v12 = v225;
              if (!v38) {
                break;
              }
            }
            else if (v22 >= v84)
            {
              break;
            }
            uint64_t v85 = *(v82 - 2);
            v82 -= 2;
            uint64_t v83 = v85;
          }
          while (v21 != v85);
        }
      }
LABEL_108:
      while (v11 < v82)
      {
        uint64_t v88 = *v11;
        *uint64_t v11 = *v82;
        *uint64_t v82 = v88;
        uint64_t v89 = v11[1];
        v11[1] = v82[1];
        v82[1] = v89;
        int v90 = v11 + 2;
        do
        {
          while (1)
          {
            do
            {
              uint64_t v11 = v90;
              uint64_t v92 = *v90;
              v90 += 2;
              uint64_t v91 = v92;
            }
            while (v21 == v92);
            uint64_t v93 = v11[1];
            if (v22 == v93) {
              break;
            }
            if (v22 < v93) {
              goto LABEL_99;
            }
          }
          uint64_t v94 = *a3 + 664;
          uint64_t v227 = v21;
          int v95 = *((_DWORD *)sub_1CD50EB30(v94, &v227) + 2);
          uint64_t v226 = v91;
          uint64_t result = sub_1CD50EB30(v94, &v226);
        }
        while (v95 >= *((_DWORD *)result + 2));
LABEL_99:
        uint64_t v97 = *(v82 - 2);
        v82 -= 2;
        uint64_t v96 = v97;
        if (v21 != v97)
        {
          int v12 = v225;
          while (1)
          {
            uint64_t v98 = v82[1];
            if (v22 == v98)
            {
              uint64_t v100 = *a3 + 664;
              uint64_t v227 = v21;
              int v101 = *((_DWORD *)sub_1CD50EB30(v100, &v227) + 2);
              uint64_t v226 = v96;
              uint64_t result = sub_1CD50EB30(v100, &v226);
              BOOL v38 = v101 < *((_DWORD *)result + 2);
              int v12 = v225;
              if (!v38) {
                goto LABEL_108;
              }
            }
            else if (v22 >= v98)
            {
              goto LABEL_108;
            }
            uint64_t v99 = *(v82 - 2);
            v82 -= 2;
            uint64_t v96 = v99;
            if (v21 == v99) {
              goto LABEL_108;
            }
          }
        }
        int v12 = v225;
      }
      BOOL v5 = v11 - 2 >= v12;
      BOOL v6 = v11 - 2 == v12;
      if (v11 - 2 != v12)
      {
        *int v12 = *(v11 - 2);
        v12[1] = *(v11 - 1);
      }
      a5 = 0;
      *(v11 - 2) = v21;
      *(v11 - 1) = v22;
      a2 = v221;
      a4 = v70;
    }
    else
    {
      if (v24 >= v22) {
        goto LABEL_65;
      }
LABEL_14:
      unint64_t v26 = v12 + 2;
      uint64_t v25 = v12[2];
      uint64_t v27 = v12[1];
      uint64_t v210 = v20;
      if (v25 == v21) {
        goto LABEL_30;
      }
      uint64_t v28 = v12;
      while (1)
      {
        unsigned int v29 = v26;
        uint64_t v30 = v26[1];
        if (v30 == v27) {
          break;
        }
        if (v30 >= v27) {
          goto LABEL_22;
        }
LABEL_18:
        unint64_t v26 = v29 + 2;
        uint64_t v25 = v29[2];
        uint64_t v28 = v29;
        if (v25 == v21) {
          goto LABEL_23;
        }
      }
      uint64_t v31 = *a3 + 664;
      uint64_t v227 = v25;
      int v32 = *((_DWORD *)sub_1CD50EB30(v31, &v227) + 2);
      uint64_t v226 = v21;
      if (v32 < *((_DWORD *)sub_1CD50EB30(v31, &v226) + 2)) {
        goto LABEL_18;
      }
      uint64_t v28 = v29 - 2;
LABEL_22:
      unint64_t v26 = v29;
LABEL_23:
      int v33 = v213;
      if (v28 != v12)
      {
        do
        {
          do
          {
            __int16 v34 = v33;
            uint64_t v36 = *v33;
            v33 -= 2;
            uint64_t v35 = v36;
          }
          while (v36 == v21);
          uint64_t v37 = v34[1];
          BOOL v38 = v37 < v27;
          if (v37 == v27)
          {
            uint64_t v39 = *a3 + 664;
            uint64_t v227 = v35;
            int v40 = *((_DWORD *)sub_1CD50EB30(v39, &v227) + 2);
            uint64_t v226 = v21;
            BOOL v38 = v40 < *((_DWORD *)sub_1CD50EB30(v39, &v226) + 2);
          }
        }
        while (!v38);
        goto LABEL_41;
      }
LABEL_30:
      __int16 v34 = v221;
      if (v26 < v221)
      {
        uint64_t v41 = v213;
        do
        {
          while (1)
          {
            while (1)
            {
              __int16 v34 = v41;
              uint64_t v43 = *v41;
              v41 -= 2;
              uint64_t v42 = v43;
              if (v43 != v21) {
                break;
              }
              if (v26 >= v34) {
                goto LABEL_41;
              }
            }
            uint64_t v44 = v34[1];
            if (v44 == v27) {
              break;
            }
            if (v26 >= v34 || v44 < v27) {
              goto LABEL_41;
            }
          }
          uint64_t v45 = *a3 + 664;
          uint64_t v227 = v42;
          int v46 = *((_DWORD *)sub_1CD50EB30(v45, &v227) + 2);
          uint64_t v226 = v21;
          uint64_t v47 = sub_1CD50EB30(v45, &v226);
        }
        while (v26 < v34 && v46 >= *((_DWORD *)v47 + 2));
      }
LABEL_41:
      uint64_t v11 = v26;
      if (v26 < v34)
      {
        uint64_t v11 = v26;
        int v48 = v34;
        do
        {
          uint64_t v49 = *v11;
          *uint64_t v11 = *v48;
          *int v48 = v49;
          uint64_t v51 = v11[2];
          v11 += 2;
          uint64_t v50 = v51;
          uint64_t v52 = *(v11 - 1);
          *(v11 - 1) = v48[1];
          v48[1] = v52;
          while (v50 != v21)
          {
            uint64_t v53 = v11[1];
            if (v53 == v27)
            {
              uint64_t v55 = *a3 + 664;
              uint64_t v227 = v50;
              int v56 = *((_DWORD *)sub_1CD50EB30(v55, &v227) + 2);
              uint64_t v226 = v21;
              if (v56 >= *((_DWORD *)sub_1CD50EB30(v55, &v226) + 2)) {
                break;
              }
            }
            else if (v53 >= v27)
            {
              break;
            }
            uint64_t v54 = v11[2];
            v11 += 2;
            uint64_t v50 = v54;
          }
          unint64_t v57 = v48 - 2;
          do
          {
            while (1)
            {
              do
              {
                int v48 = v57;
                uint64_t v59 = *v57;
                v57 -= 2;
                uint64_t v58 = v59;
              }
              while (v59 == v21);
              uint64_t v60 = v48[1];
              if (v60 == v27) {
                break;
              }
              if (v60 < v27) {
                goto LABEL_55;
              }
            }
            uint64_t v61 = *a3 + 664;
            uint64_t v227 = v58;
            int v62 = *((_DWORD *)sub_1CD50EB30(v61, &v227) + 2);
            uint64_t v226 = v21;
          }
          while (v62 >= *((_DWORD *)sub_1CD50EB30(v61, &v226) + 2));
LABEL_55:
          ;
        }
        while (v11 < v48);
      }
      if (v11 - 2 != v225)
      {
        *unsigned int v225 = *(v11 - 2);
        v225[1] = *(v11 - 1);
      }
      *(v11 - 2) = v21;
      *(v11 - 1) = v27;
      BOOL v5 = v26 >= v34;
      uint64_t v10 = v225;
      a2 = v221;
      a4 = v210;
      if (v5)
      {
        BOOL v63 = sub_1CC27EA40(v225, v11 - 2, a3);
        uint64_t result = (uint64_t *)sub_1CC27EA40(v11, v221, a3);
        if (result)
        {
          a2 = v11 - 2;
          if (v63) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v63) {
          goto LABEL_62;
        }
      }
      else
      {
LABEL_62:
        uint64_t result = (uint64_t *)sub_1CC27D4BC(v225, v11 - 2, a3, v210, a5 & 1);
        a5 = 0;
      }
    }
  }
  uint64_t v109 = v12 + 2;
  BOOL v111 = v12 == a2 || v109 == a2;
  if (a5)
  {
    if (v111) {
      return result;
    }
    uint64_t v112 = 0;
    int v113 = v12;
    while (2)
    {
      uint64_t v114 = v113;
      int v113 = v109;
      uint64_t v115 = v114[2];
      uint64_t v116 = *v114;
      if (v115 != *v114)
      {
        uint64_t v117 = v114[3];
        uint64_t v118 = v114[1];
        if (v117 == v118)
        {
          uint64_t v125 = *a3 + 664;
          uint64_t v227 = v114[2];
          int v126 = *((_DWORD *)sub_1CD50EB30(v125, &v227) + 2);
          uint64_t v226 = v116;
          uint64_t v127 = v125;
          int v12 = v225;
          uint64_t result = sub_1CD50EB30(v127, &v226);
          if (v126 < *((_DWORD *)result + 2))
          {
            uint64_t v115 = *v113;
            uint64_t v117 = v114[3];
            uint64_t v116 = *v114;
            uint64_t v118 = v114[1];
LABEL_141:
            int v114[2] = v116;
            v113[1] = v118;
            uint64_t v119 = v12;
            if (v114 != v12)
            {
              uint64_t v120 = v112;
              while (1)
              {
                uint64_t v119 = (uint64_t *)((char *)v12 + v120);
                uint64_t v121 = *(uint64_t *)((char *)v12 + v120 - 16);
                if (v115 == v121) {
                  break;
                }
                uint64_t v122 = *(v119 - 1);
                if (v117 == v122)
                {
                  uint64_t v124 = *a3 + 664;
                  uint64_t v227 = v115;
                  int v214 = *((_DWORD *)sub_1CD50EB30(v124, &v227) + 2);
                  uint64_t v226 = v121;
                  uint64_t result = sub_1CD50EB30(v124, &v226);
                  if (v214 >= *((_DWORD *)result + 2))
                  {
LABEL_150:
                    uint64_t v119 = v114;
                    break;
                  }
                  uint64_t v121 = *(v119 - 2);
                  uint64_t v122 = *(v119 - 1);
                }
                else if (v117 >= v122)
                {
                  goto LABEL_150;
                }
                v114 -= 2;
                int v123 = (uint64_t *)((char *)v225 + v120);
                *int v123 = v121;
                v123[1] = v122;
                int v12 = v225;
                v120 -= 16;
                if (!v120)
                {
                  uint64_t v119 = v225;
                  goto LABEL_152;
                }
              }
              int v12 = v225;
            }
LABEL_152:
            uint64_t *v119 = v115;
            v119[1] = v117;
          }
        }
        else if (v117 < v118)
        {
          goto LABEL_141;
        }
      }
      uint64_t v109 = v113 + 2;
      v112 += 16;
      if (v113 + 2 == v221) {
        return result;
      }
      continue;
    }
  }
  if (v111) {
    return result;
  }
  while (2)
  {
    uint64_t v188 = *v109;
    uint64_t v189 = *v12;
    if (*v109 == *v12) {
      goto LABEL_250;
    }
    uint64_t v190 = v12[3];
    uint64_t v191 = v12[1];
    if (v190 == v191)
    {
      unsigned int v199 = v12;
      uint64_t v200 = *a3 + 664;
      uint64_t v227 = *v109;
      int v201 = *((_DWORD *)sub_1CD50EB30(v200, &v227) + 2);
      uint64_t v226 = v189;
      uint64_t v202 = v200;
      int v12 = v199;
      uint64_t result = sub_1CD50EB30(v202, &v226);
      if (v201 >= *((_DWORD *)result + 2)) {
        goto LABEL_250;
      }
      uint64_t v188 = *v109;
      uint64_t v190 = v199[3];
      uint64_t v189 = *v12;
      uint64_t v191 = v12[1];
    }
    else if (v190 >= v191)
    {
      goto LABEL_250;
    }
    uint64_t *v109 = v189;
    v109[1] = v191;
    uint64_t v192 = *(v12 - 2);
    unint64_t v193 = v12;
    if (v188 == v192) {
      goto LABEL_249;
    }
    unint64_t v193 = v12;
    while (2)
    {
      uint64_t v194 = *(v193 - 1);
      if (v190 != v194)
      {
        if (v190 >= v194) {
          goto LABEL_249;
        }
LABEL_242:
        uint64_t v195 = *(v193 - 1);
        *unint64_t v193 = v192;
        v193[1] = v195;
        uint64_t v192 = *(v193 - 4);
        v193 -= 2;
        if (v188 == v192) {
          goto LABEL_249;
        }
        continue;
      }
      break;
    }
    int v196 = v12;
    uint64_t v197 = *a3 + 664;
    uint64_t v227 = v188;
    int v198 = *((_DWORD *)sub_1CD50EB30(v197, &v227) + 2);
    uint64_t v226 = v192;
    uint64_t result = sub_1CD50EB30(v197, &v226);
    if (v198 < *((_DWORD *)result + 2))
    {
      uint64_t v192 = *(v193 - 2);
      int v12 = v196;
      goto LABEL_242;
    }
    int v12 = v196;
LABEL_249:
    *unint64_t v193 = v188;
    v193[1] = v190;
    a2 = v221;
LABEL_250:
    v109 += 2;
    v12 += 2;
    if (v109 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC27E564(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t result = sub_1CC27ED68(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  if (*a5 != *a4)
  {
    uint64_t v15 = a5[1];
    uint64_t v16 = a4[1];
    uint64_t v17 = *a6;
    if (v15 == v16)
    {
      uint64_t v30 = v17 + 664;
      uint64_t v39 = *a5;
      int v31 = *((_DWORD *)sub_1CD50EB30(v17 + 664, &v39) + 2);
      uint64_t v38 = v14;
      uint64_t result = sub_1CD50EB30(v30, &v38);
      if (v31 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v14 = *a4;
      uint64_t v16 = a4[1];
      uint64_t v13 = *a5;
      uint64_t v15 = a5[1];
      uint64_t v17 = *a6;
    }
    else if (v15 >= v16)
    {
      return result;
    }
    *a4 = v13;
    *a5 = v14;
    a4[1] = v15;
    a5[1] = v16;
    uint64_t v18 = *a4;
    uint64_t v19 = *a3;
    if (*a4 == *a3) {
      return result;
    }
    uint64_t v20 = a4[1];
    uint64_t v21 = a3[1];
    if (v20 == v21)
    {
      uint64_t v32 = v17 + 664;
      uint64_t v39 = *a4;
      int v33 = *((_DWORD *)sub_1CD50EB30(v17 + 664, &v39) + 2);
      uint64_t v38 = v19;
      uint64_t result = sub_1CD50EB30(v32, &v38);
      if (v33 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v19 = *a3;
      uint64_t v21 = a3[1];
      uint64_t v18 = *a4;
      uint64_t v20 = a4[1];
      uint64_t v17 = *a6;
    }
    else if (v20 >= v21)
    {
      return result;
    }
    *a3 = v18;
    *a4 = v19;
    a3[1] = v20;
    a4[1] = v21;
    uint64_t v22 = *a3;
    uint64_t v23 = *a2;
    if (*a3 == *a2) {
      return result;
    }
    uint64_t v24 = a3[1];
    uint64_t v25 = a2[1];
    if (v24 == v25)
    {
      uint64_t v34 = v17 + 664;
      uint64_t v39 = *a3;
      int v35 = *((_DWORD *)sub_1CD50EB30(v17 + 664, &v39) + 2);
      uint64_t v38 = v23;
      uint64_t result = sub_1CD50EB30(v34, &v38);
      if (v35 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v23 = *a2;
      uint64_t v25 = a2[1];
      uint64_t v22 = *a3;
      uint64_t v24 = a3[1];
      uint64_t v17 = *a6;
    }
    else if (v24 >= v25)
    {
      return result;
    }
    *a2 = v22;
    *a3 = v23;
    a2[1] = v24;
    a3[1] = v25;
    uint64_t v26 = *a2;
    uint64_t v27 = *a1;
    if (*a2 == *a1) {
      return result;
    }
    uint64_t v28 = a2[1];
    uint64_t v29 = a1[1];
    if (v28 != v29)
    {
      if (v28 >= v29) {
        return result;
      }
      goto LABEL_13;
    }
    uint64_t v36 = v17 + 664;
    uint64_t v39 = *a2;
    int v37 = *((_DWORD *)sub_1CD50EB30(v17 + 664, &v39) + 2);
    uint64_t v38 = v27;
    uint64_t result = sub_1CD50EB30(v36, &v38);
    if (v37 < *((_DWORD *)result + 2))
    {
      uint64_t v27 = *a1;
      uint64_t v29 = a1[1];
      uint64_t v26 = *a2;
      uint64_t v28 = a2[1];
LABEL_13:
      *a1 = v26;
      *a2 = v27;
      a1[1] = v28;
      a2[1] = v29;
    }
  }
  return result;
}

uint64_t *sub_1CC27E7AC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v7 = result;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *result;
  uint64_t v11 = *a4;
  if (*a2 == *result) {
    goto LABEL_9;
  }
  uint64_t v12 = result[1];
  if (v8 != v12)
  {
    if (v8 < v12) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v19 = *a3;
    if (*a3 == v9) {
      return result;
    }
    uint64_t v20 = a3[1];
    if (v20 == v8)
    {
      uint64_t v25 = v11 + 664;
      uint64_t v38 = *a3;
      int v26 = *((_DWORD *)sub_1CD50EB30(v11 + 664, &v38) + 2);
      uint64_t v37 = v9;
      uint64_t result = sub_1CD50EB30(v25, &v37);
      if (v26 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v9 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v19 = *a3;
      uint64_t v20 = a3[1];
      uint64_t v11 = *a4;
    }
    else if (v20 >= v8)
    {
      return result;
    }
    *a2 = v19;
    *a3 = v9;
    a2[1] = v20;
    a3[1] = v8;
    uint64_t v21 = *a2;
    uint64_t v22 = *v7;
    if (*a2 == *v7) {
      return result;
    }
    uint64_t v23 = a2[1];
    uint64_t v24 = v7[1];
    if (v23 == v24)
    {
      uint64_t v29 = v11 + 664;
      uint64_t v38 = *a2;
      int v30 = *((_DWORD *)sub_1CD50EB30(v11 + 664, &v38) + 2);
      uint64_t v37 = v22;
      uint64_t result = sub_1CD50EB30(v29, &v37);
      if (v30 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v22 = *v7;
      uint64_t v24 = v7[1];
      uint64_t v21 = *a2;
      uint64_t v23 = a2[1];
    }
    else if (v23 >= v24)
    {
      return result;
    }
    *unint64_t v7 = v21;
    *a2 = v22;
    v7[1] = v23;
    a2[1] = v24;
    return result;
  }
  uint64_t v17 = v11 + 664;
  uint64_t v38 = *a2;
  int v18 = *((_DWORD *)sub_1CD50EB30(v11 + 664, &v38) + 2);
  uint64_t v37 = v10;
  uint64_t result = sub_1CD50EB30(v17, &v37);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v11 = *a4;
  if (v18 >= *((_DWORD *)result + 2)) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v13 = *a3;
  if (*a3 != v9)
  {
    uint64_t v14 = a3[1];
    if (v14 == v8)
    {
      uint64_t v27 = v11 + 664;
      uint64_t v38 = *a3;
      int v28 = *((_DWORD *)sub_1CD50EB30(v11 + 664, &v38) + 2);
      uint64_t v37 = v9;
      uint64_t result = sub_1CD50EB30(v27, &v37);
      if (v28 < *((_DWORD *)result + 2))
      {
        uint64_t v13 = *a3;
        uint64_t v14 = a3[1];
        goto LABEL_7;
      }
      uint64_t v9 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v11 = *a4;
    }
    else if (v14 < v8)
    {
LABEL_7:
      uint64_t v15 = *v7;
      *unint64_t v7 = v13;
      *a3 = v15;
      uint64_t v16 = v7[1];
      v7[1] = v14;
      a3[1] = v16;
      return result;
    }
  }
  uint64_t v31 = *v7;
  *unint64_t v7 = v9;
  *a2 = v31;
  uint64_t v32 = v7[1];
  v7[1] = v8;
  a2[1] = v32;
  uint64_t v33 = *a3;
  if (*a3 != v31)
  {
    uint64_t v34 = a3[1];
    if (v34 != v32)
    {
      if (v34 >= v32) {
        return result;
      }
      goto LABEL_26;
    }
    uint64_t v35 = v11 + 664;
    uint64_t v38 = *a3;
    int v36 = *((_DWORD *)sub_1CD50EB30(v11 + 664, &v38) + 2);
    uint64_t v37 = v31;
    uint64_t result = sub_1CD50EB30(v35, &v37);
    if (v36 < *((_DWORD *)result + 2))
    {
      uint64_t v31 = *a2;
      uint64_t v32 = a2[1];
      uint64_t v33 = *a3;
      uint64_t v34 = a3[1];
LABEL_26:
      *a2 = v33;
      *a3 = v31;
      a2[1] = v34;
      a3[1] = v32;
    }
  }
  return result;
}

BOOL sub_1CC27EA40(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 2);
      uint64_t v9 = *a1;
      if (v8 == *a1) {
        return result;
      }
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = a1[1];
      if (v10 == v11)
      {
        uint64_t v30 = *a3 + 664;
        uint64_t v37 = *(a2 - 2);
        int v31 = *((_DWORD *)sub_1CD50EB30(v30, &v37) + 2);
        uint64_t v36 = v9;
        if (v31 >= *((_DWORD *)sub_1CD50EB30(v30, &v36) + 2)) {
          return 1;
        }
        uint64_t v9 = *a1;
        uint64_t v11 = a1[1];
        uint64_t v4 = a2;
        uint64_t v8 = *(a2 - 2);
        uint64_t v10 = *(a2 - 1);
      }
      else if (v10 >= v11)
      {
        return result;
      }
      *a1 = v8;
      *(v4 - 2) = v9;
      a1[1] = v10;
      BOOL result = 1;
      *(v4 - 1) = v11;
      return result;
    case 3:
      sub_1CC27E7AC(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1CC27ED68(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1CC27E564(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      sub_1CC27E7AC(a1, a1 + 2, a1 + 4, a3);
      uint64_t v13 = a2;
      uint64_t v14 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v32 = a3;
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  do
  {
    uint64_t v17 = *v14;
    uint64_t v18 = *v12;
    if (*v14 == *v12) {
      goto LABEL_23;
    }
    uint64_t v19 = v14[1];
    uint64_t v20 = v12[1];
    if (v19 == v20)
    {
      uint64_t v27 = *v32 + 664;
      uint64_t v37 = *v14;
      int v28 = *((_DWORD *)sub_1CD50EB30(v27, &v37) + 2);
      uint64_t v36 = v18;
      if (v28 >= *((_DWORD *)sub_1CD50EB30(v27, &v36) + 2))
      {
        uint64_t v13 = a2;
        goto LABEL_23;
      }
      uint64_t v17 = *v14;
      uint64_t v19 = v14[1];
      uint64_t v18 = *v12;
      uint64_t v20 = v12[1];
      uint64_t v13 = a2;
    }
    else if (v19 >= v20)
    {
      goto LABEL_23;
    }
    *uint64_t v14 = v18;
    v14[1] = v20;
    uint64_t v21 = a1;
    if (v12 == a1) {
      goto LABEL_22;
    }
    uint64_t v22 = v15;
    while (1)
    {
      uint64_t v23 = (uint64_t *)((char *)a1 + v22);
      uint64_t v24 = *(uint64_t *)((char *)a1 + v22 + 16);
      if (v17 == v24)
      {
        uint64_t v21 = v23 + 4;
        goto LABEL_22;
      }
      uint64_t v25 = v23[3];
      if (v19 != v25)
      {
        if (v19 >= v25)
        {
          uint64_t v21 = v12;
          goto LABEL_22;
        }
        goto LABEL_17;
      }
      uint64_t v26 = *v32 + 664;
      uint64_t v33 = v26;
      uint64_t v37 = v17;
      int v34 = *((_DWORD *)sub_1CD50EB30(v26, &v37) + 2);
      uint64_t v36 = v24;
      if (v34 >= *((_DWORD *)sub_1CD50EB30(v33, &v36) + 2)) {
        break;
      }
      uint64_t v24 = v23[2];
      uint64_t v25 = v23[3];
      uint64_t v13 = a2;
LABEL_17:
      v12 -= 2;
      v23[4] = v24;
      *(uint64_t *)((char *)a1 + v22 + 40) = v25;
      v22 -= 16;
      if (v22 == -32)
      {
        uint64_t v21 = a1;
        goto LABEL_22;
      }
    }
    uint64_t v21 = v12;
    uint64_t v13 = a2;
LABEL_22:
    *uint64_t v21 = v17;
    v21[1] = v19;
    if (++v16 == 8) {
      return v14 + 2 == v13;
    }
LABEL_23:
    uint64_t v12 = v14;
    v15 += 16;
    v14 += 2;
  }
  while (v14 != v13);
  return 1;
}

uint64_t *sub_1CC27ED68(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL result = sub_1CC27E7AC(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  if (*a4 != *a3)
  {
    uint64_t v13 = a4[1];
    uint64_t v14 = a3[1];
    uint64_t v15 = *a5;
    if (v13 == v14)
    {
      uint64_t v24 = v15 + 664;
      uint64_t v31 = *a4;
      int v25 = *((_DWORD *)sub_1CD50EB30(v15 + 664, &v31) + 2);
      uint64_t v30 = v12;
      BOOL result = sub_1CD50EB30(v24, &v30);
      if (v25 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v12 = *a3;
      uint64_t v14 = a3[1];
      uint64_t v11 = *a4;
      uint64_t v13 = a4[1];
      uint64_t v15 = *a5;
    }
    else if (v13 >= v14)
    {
      return result;
    }
    *a3 = v11;
    *a4 = v12;
    a3[1] = v13;
    a4[1] = v14;
    uint64_t v16 = *a3;
    uint64_t v17 = *a2;
    if (*a3 == *a2) {
      return result;
    }
    uint64_t v18 = a3[1];
    uint64_t v19 = a2[1];
    if (v18 == v19)
    {
      uint64_t v26 = v15 + 664;
      uint64_t v31 = *a3;
      int v27 = *((_DWORD *)sub_1CD50EB30(v15 + 664, &v31) + 2);
      uint64_t v30 = v17;
      BOOL result = sub_1CD50EB30(v26, &v30);
      if (v27 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v17 = *a2;
      uint64_t v19 = a2[1];
      uint64_t v16 = *a3;
      uint64_t v18 = a3[1];
      uint64_t v15 = *a5;
    }
    else if (v18 >= v19)
    {
      return result;
    }
    *a2 = v16;
    *a3 = v17;
    a2[1] = v18;
    a3[1] = v19;
    uint64_t v20 = *a2;
    uint64_t v21 = *a1;
    if (*a2 == *a1) {
      return result;
    }
    uint64_t v22 = a2[1];
    uint64_t v23 = a1[1];
    if (v22 != v23)
    {
      if (v22 >= v23) {
        return result;
      }
      goto LABEL_10;
    }
    uint64_t v28 = v15 + 664;
    uint64_t v31 = *a2;
    int v29 = *((_DWORD *)sub_1CD50EB30(v15 + 664, &v31) + 2);
    uint64_t v30 = v21;
    BOOL result = sub_1CD50EB30(v28, &v30);
    if (v29 < *((_DWORD *)result + 2))
    {
      uint64_t v21 = *a1;
      uint64_t v23 = a1[1];
      uint64_t v20 = *a2;
      uint64_t v22 = a2[1];
LABEL_10:
      *a1 = v20;
      *a2 = v21;
      a1[1] = v22;
      a2[1] = v23;
    }
  }
  return result;
}

uint64_t *sub_1CC27EF2C(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  BOOL v5 = (uint64_t *)result[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[6];
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (v8 >= a2) {
        return result;
      }
      BOOL v5 = v7[1];
    }
    while (v5);
    uint64_t v6 = v7 + 1;
  }
  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
  }
LABEL_7:
  sub_1CD50FB80((uint64_t)&v11, (uint64_t)result, a3, a4);
  uint64_t v9 = v11;
  *uint64_t v11 = 0;
  v9[1] = 0;
  void v9[2] = (uint64_t)v7;
  *uint64_t v6 = v9;
  uint64_t v10 = *(void *)*v4;
  if (v10)
  {
    *uint64_t v4 = v10;
    uint64_t v9 = *v6;
  }
  BOOL result = sub_1CB8358B8((uint64_t *)v4[1], v9);
  ++v4[2];
  return result;
}

void sub_1CC27EFEC(void *a1)
{
  if (a1)
  {
    sub_1CC27EFEC(*a1);
    sub_1CC27EFEC(a1[1]);
    uint64_t v3 = a1[6];
    if (v3 != -8192 && v3 != -4096 && v3 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 4);
    }
    operator delete(a1);
  }
}

_DWORD *sub_1CC27F058(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *uint64_t v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return sub_1CBA7B248(result);
    }
  }
  return result;
}

void **sub_1CC27F0A8(void **result)
{
  int v1 = *((_DWORD *)result + 2);
  if (v1 || *((_DWORD *)result + 3))
  {
    uint64_t v2 = *((unsigned int *)result + 4);
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      return sub_1CD50FCD4(result);
    }
    else
    {
      v43[0] = 2;
      v43[1] = 0;
      uint64_t v44 = -4096;
      uint64_t v45 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = &off_1F2609D30;
      v39[0] = 2;
      v39[1] = 0;
      uint64_t v40 = -8192;
      if (v2)
      {
        uint64_t v3 = *result;
        uint64_t v4 = (char *)*result + 64 * v2;
        do
        {
          uint64_t v5 = v3[3];
          uint64_t v6 = v44;
          if (v5 != v44)
          {
            if (v5 != v40)
            {
              uint64_t v7 = v3[7];
              if (v7)
              {
                if (v7 != -8192 && v7 != -4096)
                {
                  unint64_t v8 = v3[5] & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v8 = v3[6];
                  uint64_t v9 = (unint64_t *)v3[6];
                  if (v9)
                  {
                    *uint64_t v9 = *v9 & 7 | v8;
                  }
                  else
                  {
                    uint64_t v10 = v3[7];
                    uint64_t v11 = ***(int32x2_t ****)v10;
                    unint64_t v12 = (unint64_t)v11[303];
                    if (v12 <= v8)
                    {
                      uint64_t v13 = v11[305].u32[0];
                      if (v12 + 16 * v13 > v8)
                      {
                        unsigned int v14 = v13 - 1;
                        LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
                        uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
                        uint64_t v17 = *v16;
                        if (v10 == *v16)
                        {
LABEL_44:
                          *uint64_t v16 = -8192;
                          v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v10 = v3[7];
                        }
                        else
                        {
                          int v18 = 1;
                          while (v17 != -4096)
                          {
                            int v19 = v15 + v18++;
                            uint64_t v15 = v19 & v14;
                            uint64_t v17 = *(void *)(v12 + 16 * v15);
                            if (v10 == v17)
                            {
                              uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
                              goto LABEL_44;
                            }
                          }
                        }
                        *(unsigned char *)(v10 + 17) &= ~1u;
                      }
                    }
                  }
                  uint64_t v5 = v3[3];
                  uint64_t v6 = v44;
                }
              }
            }
            if (v5 != v6)
            {
              BOOL v20 = v5 == -4096 || v5 == 0;
              if (!v20 && v5 != -8192)
              {
                unint64_t v25 = v3[1] & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v25 = v3[2];
                uint64_t v26 = (unint64_t *)v3[2];
                if (v26)
                {
                  unint64_t *v26 = *v26 & 7 | v25;
                }
                else
                {
                  uint64_t v27 = v3[3];
                  uint64_t v28 = ***(int32x2_t ****)v27;
                  unint64_t v29 = (unint64_t)v28[303];
                  if (v29 <= v25)
                  {
                    uint64_t v30 = v28[305].u32[0];
                    if (v29 + 16 * v30 > v25)
                    {
                      unsigned int v33 = v30 - 1;
                      LODWORD(v34) = v33 & ((v27 >> 4) ^ (v27 >> 9));
                      uint64_t v35 = (uint64_t *)(v29 + 16 * v34);
                      uint64_t v36 = *v35;
                      if (v27 == *v35)
                      {
LABEL_62:
                        *uint64_t v35 = -8192;
                        v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v27 = v3[3];
                      }
                      else
                      {
                        int v37 = 1;
                        while (v36 != -4096)
                        {
                          int v38 = v34 + v37++;
                          uint64_t v34 = v38 & v33;
                          uint64_t v36 = *(void *)(v29 + 16 * v34);
                          if (v27 == v36)
                          {
                            uint64_t v35 = (uint64_t *)(v29 + 16 * v34);
                            goto LABEL_62;
                          }
                        }
                      }
                      *(unsigned char *)(v27 + 17) &= ~1u;
                    }
                  }
                }
                uint64_t v6 = v44;
              }
              v3[3] = v6;
              if (v6 != -4096 && v6 != -8192 && v6 != 0)
              {
                uint64_t v22 = v43[0];
                uint64_t v23 = (void *)(v43[0] & 0xFFFFFFFFFFFFFFF8);
                void v3[2] = *(void *)(v43[0] & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v23 = v3 + 1;
                v3[1] = v22 & 0xFFFFFFFFFFFFFFF8 | v3[1] & 7;
                uint64_t v24 = (unint64_t *)v3[2];
                if (v24) {
                  *uint64_t v24 = *v24 & 7 | (unint64_t)(v3 + 2);
                }
              }
            }
            v3[4] = v45;
          }
          v3 += 8;
        }
        while (v3 != v4);
        uint64_t v31 = v40;
        result[1] = 0;
        if (v31 != -8192 && v31 != -4096 && v31 != 0) {
          BOOL result = (void **)llvm::ValueHandleBase::RemoveFromUseList(v39);
        }
      }
      else
      {
        result[1] = 0;
      }
      if (v44 != -4096 && v44 != -8192)
      {
        if (v44) {
          return (void **)llvm::ValueHandleBase::RemoveFromUseList(v43);
        }
      }
    }
  }
  return result;
}

void *sub_1CC27F430@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v8 = 8;
    uint64_t v9 = a1 + 8;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      uint64_t v21 = 0;
      goto LABEL_18;
    }
    uint64_t v9 = *(void *)(a1 + 8);
  }
  int v10 = v8 - 1;
  unsigned int v11 = ((*a2 >> 4) ^ (*a2 >> 9)) & v10;
  BOOL result = (void *)(v9 + 8 * v11);
  uint64_t v13 = *result;
  if (*a2 == *result)
  {
LABEL_12:
    if (v6)
    {
      uint64_t v18 = 8;
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v18 = *(unsigned int *)(a1 + 16);
    }
    char v19 = 0;
    uint64_t v20 = v7 + 8 * v18;
    goto LABEL_21;
  }
  unsigned int v14 = 0;
  int v15 = 1;
  while (v13 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v13 == -8192;
    }
    if (v16) {
      unsigned int v14 = result;
    }
    unsigned int v17 = v11 + v15++;
    unsigned int v11 = v17 & v10;
    BOOL result = (void *)(v9 + 8 * v11);
    uint64_t v13 = *result;
    if (*a2 == *result) {
      goto LABEL_12;
    }
  }
  if (v14) {
    uint64_t v21 = v14;
  }
  else {
    uint64_t v21 = result;
  }
LABEL_18:
  BOOL result = sub_1CC27F5FC(a1, (uint64_t)a2, a2, v21);
  *BOOL result = *a2;
  if (*(unsigned char *)a1)
  {
    uint64_t v22 = 8;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v22 = *(unsigned int *)(a1 + 16);
  }
  uint64_t v20 = v7 + 8 * v22;
  char v19 = 1;
LABEL_21:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = v19;
  return result;
}

uint64_t sub_1CC27F554(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void *sub_1CC27F5FC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC27F774(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 8;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      BOOL v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          BOOL v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC27F774(a1, v8);
      uint64_t v20 = 0;
      sub_1CC27F554(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC27F774(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC27F8F0((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC27F8F0((int *)a1, v14, v6);
}

int *sub_1CC27F8F0(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    int v6 = result + 18;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 8;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC27F9F0(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 8;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  int v6 = (uint64_t *)(v2 + 8 * v5);
  uint64_t v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_10:
    *int v6 = -8192;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    uint64_t v7 = *(void *)(v2 + 8 * v5);
    if (*a2 == v7)
    {
      int v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

BOOL sub_1CC27FA84(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 >= 0x1C
    && ((v2 = v1 - 33, v3 = v2 > 0x33, v4 = (1 << v2) & 0x8000000000041, !v3) ? (BOOL v5 = v4 == 0) : (BOOL v5 = 1),
        !v5 && (uint64_t v6 = *(void *)(a1 - 32)) != 0 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *(void *)(a1 + 72)))
  {
    return *(_DWORD *)(v6 + 36) == 124;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1CC27FAEC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 58;
}

BOOL sub_1CC27FB38(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1CD497DD0((_DWORD *)a1, a2);
  if (result)
  {
    BOOL result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
        if (v5) {
          BOOL v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
        }
        else {
          BOOL v6 = 0;
        }
        if (!v6) {
          return 0;
        }
        **(void **)(a1 + 16) = v5;
        uint64_t v7 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24));
        if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u)
        {
          return 0;
        }
        else
        {
          **(void **)(a1 + 32) = v7;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC27FBE4()
{
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable branch optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 46;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9208, "disable-cgp-branch-opts", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9208, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable GC optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 42;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC92C8, "disable-cgp-gc-opts", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC92C8, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable select to branch conversion.";
  v3.n128_u64[1] = 36;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9388, "disable-cgp-select2branch", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9388, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Address sinking in CGP using GEPs.";
  v3.n128_u64[1] = 34;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9448, "addr-sink-using-gep", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9448, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Enable sinkinig and/cmp into branches.";
  v3.n128_u64[1] = 38;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9508, "enable-andcmp-sinking", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9508, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable store(extract) optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 54;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC95C8, "disable-cgp-store-extract", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC95C8, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Stress test store(extract) optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 58;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9688, "stress-cgp-store-extract", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9688, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare";
  v3.n128_u64[1] = 79;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9748, "disable-cgp-ext-ld-promotion", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9748, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Stress test ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare";
  v3.n128_u64[1] = 83;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9808, "stress-cgp-ext-ld-promotion", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9808, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable protection against removing loop preheaders";
  v3.n128_u64[1] = 51;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC98C8, "disable-preheader-prot", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC98C8, &dword_1CB82C000);
  int v5 = 1;
  char v1 = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Use profile info to add section prefix for hot/cold functions";
  v3.n128_u64[1] = 61;
  uint64_t v4 = &v1;
  sub_1CD5105C8(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC9988, &dword_1CB82C000);
  int v5 = 1;
  char v1 = 0;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"In profiling mode like sampleFDO, if a function doesn't have profile, we cannot tel"
                                     "l the function is cold for sure because it may be a function newly added without ev"
                                     "er being sampled. With the flag enabled, compiler can put such profile unknown func"
                                     "tions into a special section, so runtime system can choose to handle it in a differ"
                                     "ent way than .text section, to save RAM for example. ";
  v3.n128_u64[1] = 385;
  uint64_t v4 = &v1;
  sub_1CD510760(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC9A48, &dword_1CB82C000);
  int v5 = 1;
  int v2 = 2;
  v3.n128_u64[0] = (unint64_t)"Skip merging empty blocks if (frequency of empty block) / (frequency of destination"
                                     " block) is greater than this ratio";
  v3.n128_u64[1] = 117;
  uint64_t v4 = (char *)&v2;
  sub_1CD5108F8(&v5, (int **)&v4, (long long *)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC9B08, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Force store splitting no matter what the target query says.";
  v3.n128_u64[1] = 59;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9BC8, "force-split-store", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9BC8, &dword_1CB82C000);
  int v5 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable merging of redundant sexts when one is dominating the other.";
  v3.n128_u64[1] = 67;
  LOBYTE(v2) = 1;
  uint64_t v4 = (char *)&v2;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCC9C88, "cgp-type-promotion-merge", &v5, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9C88, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 79;
  uint64_t v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Disables combining addressing modes with different parts in optimizeMemoryInst.";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9D48, "disable-complex-addr-modes", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9D48, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 42;
  uint64_t v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Allow creation of Phis in Address sinking.";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9E08, "addr-sink-new-phis", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9E08, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Allow creation of selects in Address sinking.";
  v3.n128_u64[1] = 45;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9EC8, "addr-sink-new-select", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9EC8, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Allow combining of BaseReg field in Address sinking.";
  v3.n128_u64[1] = 52;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC9F88, "addr-sink-combine-base-reg", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC9F88, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[1] = 51;
  uint64_t v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Allow combining of BaseGV field in Address sinking.";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCA048, "addr-sink-combine-base-gv", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA048, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Allow combining of BaseOffs field in Address sinking.";
  v3.n128_u64[1] = 53;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCA108, "addr-sink-combine-base-offs", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA108, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[1] = 54;
  uint64_t v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Allow combining of ScaledReg field in Address sinking.";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EA618B90, "addr-sink-combine-scaled-reg", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA618B90, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Enable splitting large offset of GEP.";
  v3.n128_u64[1] = 37;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EA618C50, "cgp-split-large-offset-gep", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA618C50, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 42;
  uint64_t v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Enable ICMP_EQ to ICMP_S(L|G)T conversion.";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EA618D10, "cgp-icmp-eq2icmp-st", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA618D10, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Enable BFI update verification for CodeGenPrepare.";
  v3.n128_u64[1] = 50;
  uint64_t v4 = (char *)&v2;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EA618DD0, "cgp-verify-bfi-updates", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA618DD0, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 45;
  uint64_t v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Enable converting phi types in CodeGenPrepare";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EA618E90, "cgp-optimize-phi-types", &v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA618E90, &dword_1CB82C000);
}

void *llvm::codegen::getMArch@<X0>(uint64_t a1@<X8>)
{
  if (byte_1EA619F17 < 0) {
    return sub_1CB8BDF7C(a1, (const void *)qword_1EA619F00, unk_1EA619F08);
  }
  uint64_t v2 = *(void *)(qword_1EBCCA1C8 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1EBCCA1C8 + 128);
  *(void *)(a1 + 16) = v2;
  return result;
}

void *llvm::codegen::getMCPU@<X0>(uint64_t a1@<X8>)
{
  if (byte_1EA619FFF < 0) {
    return sub_1CB8BDF7C(a1, (const void *)qword_1EA619FE8, unk_1EA619FF0);
  }
  uint64_t v2 = *(void *)(qword_1EBCCA1D0 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1EBCCA1D0 + 128);
  *(void *)(a1 + 16) = v2;
  return result;
}

void *llvm::codegen::getMAttrs@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_1CB906CCC(a1, qword_1EA619E28, qword_1EA619E30, 0xAAAAAAAAAAAAAAABLL * ((qword_1EA619E30 - qword_1EA619E28) >> 3));
}

uint64_t llvm::codegen::getRelocModel(llvm::codegen *this)
{
  return dword_1EA61A2A0;
}

uint64_t llvm::codegen::getExplicitRelocModel(llvm::codegen *this)
{
  if (word_1EA61A228) {
    return dword_1EA61A2A0 | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t llvm::codegen::getThreadModel(llvm::codegen *this)
{
  return dword_1EA61A4F8;
}

uint64_t llvm::codegen::getCodeModel(llvm::codegen *this)
{
  return dword_1EA61A750;
}

uint64_t llvm::codegen::getExplicitCodeModel(llvm::codegen *this)
{
  if (word_1EA61A6D8) {
    return dword_1EA61A750 | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t llvm::codegen::getExceptionModel(llvm::codegen *this)
{
  return dword_1EA61A9A8;
}

uint64_t llvm::codegen::getFileType(llvm::codegen *this)
{
  return dword_1EA61AC00;
}

uint64_t llvm::codegen::getExplicitFileType(llvm::codegen *this)
{
  if (word_1EA61AB88) {
    return dword_1EA61AC00 | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t llvm::codegen::getFramePointerUsage(llvm::codegen *this)
{
  return dword_1EA61AE58;
}

uint64_t llvm::codegen::getEnableUnsafeFPMath(llvm::codegen *this)
{
  return byte_1EBCCA4C0;
}

uint64_t llvm::codegen::getEnableNoInfsFPMath(llvm::codegen *this)
{
  return byte_1EBCCA580;
}

uint64_t llvm::codegen::getEnableNoNaNsFPMath(llvm::codegen *this)
{
  return byte_1EBCCA640;
}

uint64_t llvm::codegen::getEnableNoSignedZerosFPMath(llvm::codegen *this)
{
  return byte_1EBCCA700;
}

uint64_t llvm::codegen::getEnableApproxFuncFPMath(llvm::codegen *this)
{
  return byte_1EBCCA7C0;
}

uint64_t llvm::codegen::getEnableNoTrappingFPMath(llvm::codegen *this)
{
  return byte_1EBCCA880;
}

uint64_t llvm::codegen::getEnableAIXExtendedAltivecABI(llvm::codegen *this)
{
  return byte_1EBCCAAC0;
}

uint64_t llvm::codegen::getDenormalFPMath(llvm::codegen *this)
{
  return byte_1EA61B0B0;
}

uint64_t llvm::codegen::getDenormalFP32Math(llvm::codegen *this)
{
  return byte_1EA61B308;
}

uint64_t llvm::codegen::getEnableHonorSignDependentRoundingFPMath(llvm::codegen *this)
{
  return byte_1EBCCA940;
}

uint64_t llvm::codegen::getFloatABIForCalls(llvm::codegen *this)
{
  return dword_1EA61B560;
}

uint64_t llvm::codegen::getFuseFPOps(llvm::codegen *this)
{
  return dword_1EA61B7B8;
}

uint64_t llvm::codegen::getSwiftAsyncFramePointer(llvm::codegen *this)
{
  return dword_1EA61BA10;
}

uint64_t llvm::codegen::getDontPlaceZerosInBSS(llvm::codegen *this)
{
  return byte_1EBCCAA00;
}

uint64_t llvm::codegen::getEnableGuaranteedTailCallOpt(llvm::codegen *this)
{
  return byte_1EBCCAB80;
}

uint64_t llvm::codegen::getDisableTailCalls(llvm::codegen *this)
{
  return byte_1EBCCAC40;
}

uint64_t llvm::codegen::getStackSymbolOrdering(llvm::codegen *this)
{
  return byte_1EBCCAD00;
}

uint64_t llvm::codegen::getStackRealign(llvm::codegen *this)
{
  return byte_1EBCCADC0;
}

void *llvm::codegen::getTrapFuncName@<X0>(uint64_t a1@<X8>)
{
  if (byte_1EA61A0E7 < 0) {
    return sub_1CB8BDF7C(a1, (const void *)qword_1EA61A0D0, unk_1EA61A0D8);
  }
  uint64_t v2 = *(void *)(qword_1EBCCA1D8 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1EBCCA1D8 + 128);
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t llvm::codegen::getUseCtors(llvm::codegen *this)
{
  return byte_1EBCCAE80;
}

uint64_t llvm::codegen::getLowerGlobalDtorsViaCxaAtExit(llvm::codegen *this)
{
  return byte_1EBCCAF40;
}

uint64_t llvm::codegen::getRelaxELFRelocations(llvm::codegen *this)
{
  return byte_1EBCCB000;
}

uint64_t llvm::codegen::getDataSections(llvm::codegen *this)
{
  return byte_1EBCCB0C0;
}

uint64_t llvm::codegen::getExplicitDataSections(llvm::codegen *this)
{
  if (word_1EBCCB048) {
    return byte_1EBCCB0C0 | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t llvm::codegen::getFunctionSections(llvm::codegen *this)
{
  return byte_1EBCCB180;
}

uint64_t llvm::codegen::getExplicitFunctionSections(llvm::codegen *this)
{
  if (word_1EBCCB108) {
    return byte_1EBCCB180 | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t llvm::codegen::getIgnoreXCOFFVisibility(llvm::codegen *this)
{
  return byte_1EA619228;
}

uint64_t llvm::codegen::getXCOFFTracebackTable(llvm::codegen *this)
{
  return byte_1EA6192E8;
}

void *llvm::codegen::getBBSections@<X0>(uint64_t a1@<X8>)
{
  if (byte_1EA61A1CF < 0) {
    return sub_1CB8BDF7C(a1, (const void *)qword_1EA61A1B8, unk_1EA61A1C0);
  }
  uint64_t v2 = *(void *)(qword_1EBCCA1E0 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1EBCCA1E0 + 128);
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t llvm::codegen::getTLSSize(llvm::codegen *this)
{
  return dword_1EA6193A8;
}

uint64_t llvm::codegen::getEmulatedTLS(llvm::codegen *this)
{
  return byte_1EA619468;
}

uint64_t llvm::codegen::getUniqueSectionNames(llvm::codegen *this)
{
  return byte_1EA619528;
}

uint64_t llvm::codegen::getUniqueBasicBlockSectionNames(llvm::codegen *this)
{
  return byte_1EA6195E8;
}

uint64_t llvm::codegen::getEABIVersion(llvm::codegen *this)
{
  return dword_1EA61BC68;
}

uint64_t llvm::codegen::getDebuggerTuningOpt(llvm::codegen *this)
{
  return dword_1EA618FD0;
}

uint64_t llvm::codegen::getEnableStackSizeSection(llvm::codegen *this)
{
  return byte_1EA6196A8;
}

uint64_t llvm::codegen::getEnableAddrsig(llvm::codegen *this)
{
  return byte_1EA619768;
}

uint64_t llvm::codegen::getEmitCallSiteInfo(llvm::codegen *this)
{
  return byte_1EA619828;
}

uint64_t llvm::codegen::getEnableMachineFunctionSplitter(llvm::codegen *this)
{
  return byte_1EA6199A8;
}

uint64_t llvm::codegen::getEnableDebugEntryValues(llvm::codegen *this)
{
  return byte_1EA6198E8;
}

uint64_t llvm::codegen::getForceDwarfFrameSection(llvm::codegen *this)
{
  return byte_1EA619A68;
}

uint64_t llvm::codegen::getXRayOmitFunctionIndex(llvm::codegen *this)
{
  return byte_1EA619B28;
}

uint64_t llvm::codegen::getDebugStrictDwarf(llvm::codegen *this)
{
  return byte_1EA619BE8;
}

uint64_t llvm::codegen::getAlignLoops(llvm::codegen *this)
{
  return dword_1EA619CA8;
}

uint64_t llvm::codegen::getJMCInstrument(llvm::codegen *this)
{
  return byte_1EA619D68;
}

llvm::codegen::RegisterCodeGenFlags *llvm::codegen::RegisterCodeGenFlags::RegisterCodeGenFlags(llvm::codegen::RegisterCodeGenFlags *this)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA1E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA1E8))
  {
    uint64_t v3 = sub_1CB883A14((uint64_t)&qword_1EA619E80, 0, 0);
    qword_1EA619F00 = 0;
    unk_1EA619F08 = 0;
    qword_1EA619F28 = 0;
    unk_1EA619F30 = 0;
    byte_1EA619F38 = 0;
    qword_1EA619F20 = 0;
    unk_1EA619F10 = 0;
    unk_1EA619F18 = &unk_1F2643C20;
    qword_1EA619E80 = (uint64_t)&unk_1F2643FD0;
    qword_1EA619F40 = (uint64_t)&unk_1F2643EA0;
    qword_1EA619F48 = (uint64_t)&unk_1F25F6428;
    qword_1EA619F60 = (uint64_t)&qword_1EA619F48;
    llvm::cl::Option::setArgStr(v3, "march", 5uLL);
    qword_1EA619EA0 = (uint64_t)"Architecture to generate code for (see --version)";
    unk_1EA619EA8 = 49;
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA619E80);
    __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EA619E80, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA1E8);
  }
  qword_1EBCCA1C8 = (uint64_t)&qword_1EA619E80;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA1F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA1F0))
  {
    v136.n128_u64[0] = (unint64_t)"";
    uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EA619F68, 0, 0);
    qword_1EA619FE8 = 0;
    unk_1EA619FF0 = 0;
    qword_1EA61A010 = 0;
    unk_1EA61A018 = 0;
    byte_1EA61A020 = 0;
    qword_1EA61A008 = 0;
    unk_1EA619FF8 = 0;
    unk_1EA61A000 = &unk_1F2643C20;
    qword_1EA619F68[0] = (uint64_t)&unk_1F2643FD0;
    qword_1EA61A028 = (uint64_t)&unk_1F2643EA0;
    qword_1EA61A030 = (uint64_t)&unk_1F25F6428;
    qword_1EA61A048 = (uint64_t)&qword_1EA61A030;
    llvm::cl::Option::setArgStr(v4, "mcpu", 4uLL);
    qword_1EA619F88 = (uint64_t)"Target a specific cpu type (-mcpu=help for details)";
    unk_1EA619F90 = 51;
    qword_1EA619F98 = (uint64_t)"cpu-name";
    unk_1EA619FA0 = 8;
    sub_1CBAD7D28((const char **)&v136, (uint64_t)qword_1EA619F68);
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA619F68);
    __cxa_atexit((void (*)(void *))sub_1CD41C8DC, qword_1EA619F68, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA1F0);
  }
  qword_1EBCCA1D0 = (uint64_t)qword_1EA619F68;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA1F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA1F8))
  {
    uint64_t v5 = sub_1CB883A14((uint64_t)&qword_1EA619DA8, 1, 0);
    qword_1EA619E28 = 0;
    qword_1EA619E30 = 0;
    qword_1EA619E38 = 0;
    unk_1EA619E40 = 0;
    qword_1EA619DA8 = (uint64_t)&unk_1F260A070;
    qword_1EA619E48 = 0;
    unk_1EA619E50 = 0;
    qword_1EA619E58 = (uint64_t)&unk_1F2643EA0;
    qword_1EA619E60 = (uint64_t)&unk_1F260AC78;
    qword_1EA619E78 = (uint64_t)&qword_1EA619E60;
    llvm::cl::Option::setArgStr(v5, "mattr", 5uLL);
    word_1EA619DB2 |= 0x200u;
    qword_1EA619DC8 = (uint64_t)"Target specific attributes (-mattr=help for details)";
    unk_1EA619DD0 = 52;
    qword_1EA619DD8 = (uint64_t)"a1,+a2,-a3,...";
    unk_1EA619DE0 = 14;
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA619DA8);
    __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EA619DA8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA1F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA200))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    v136.n128_u64[1] = 0x400000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA208))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "posix";
    uint64_t v138 = 5;
    int v139 = 0;
    uint64_t v140 = "POSIX thread model";
    uint64_t v141 = 18;
    int v142 = "single";
    uint64_t v143 = 6;
    int v144 = 1;
    uint64_t v145 = "Single thread model";
    uint64_t v146 = 19;
    v136.n128_u64[1] = 0x400000002;
    uint64_t v6 = sub_1CB883A14((uint64_t)qword_1EA61A478, 0, 0);
    dword_1EA61A4F8 = 0;
    qword_1EA61A500 = (uint64_t)&unk_1F260A288;
    *(void *)&dword_1EA61A508 = 0;
    qword_1EA61A478[0] = (uint64_t)&unk_1F260A1D0;
    qword_1EA61A510 = (uint64_t)&unk_1F260A238;
    qword_1EA61A518 = (uint64_t)qword_1EA61A478;
    qword_1EA61A520 = (uint64_t)&unk_1EA61A530;
    qword_1EA61A528 = 0x800000000;
    qword_1EA61A6B0 = (uint64_t)&unk_1F260AD08;
    qword_1EA61A6C8 = (uint64_t)&qword_1EA61A6B0;
    llvm::cl::Option::setArgStr(v6, "thread-model", 0xCuLL);
    qword_1EA61A498 = (uint64_t)"Choose threading model";
    unk_1EA61A4A0 = 22;
    dword_1EA61A4F8 = 0;
    byte_1EA61A50C = 1;
    dword_1EA61A508 = 0;
    if (v136.n128_u32[2])
    {
      unint64_t v7 = v136.n128_u64[0];
      unint64_t v8 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        int v9 = *(unsigned __int8 **)v7;
        size_t v10 = *(void *)(v7 + 8);
        int v11 = *(_DWORD *)(v7 + 16);
        long long v12 = *(_OWORD *)(v7 + 24);
        int64_t v130 = *(int **)v7;
        size_t v131 = v10;
        long long v132 = v12;
        uint64_t v133 = &unk_1F260A288;
        char v135 = 1;
        int v134 = v11;
        uint64_t v13 = qword_1EA61A520;
        if (qword_1EA61A528 >= HIDWORD(qword_1EA61A528))
        {
          unint64_t v18 = qword_1EA61A528 + 1;
          if (qword_1EA61A520 <= (unint64_t)&v130
            && qword_1EA61A520 + 48 * (unint64_t)qword_1EA61A528 > (unint64_t)&v130)
          {
            uint64_t v119 = (char *)&v130 - qword_1EA61A520;
            sub_1CC28B448(v18);
            uint64_t v13 = qword_1EA61A520;
            unsigned int v14 = (int **)&v119[qword_1EA61A520];
            goto LABEL_68;
          }
          sub_1CC28B448(v18);
          uint64_t v13 = qword_1EA61A520;
        }
        unsigned int v14 = &v130;
LABEL_68:
        uint64_t v15 = v13 + 48 * qword_1EA61A528;
        long long v16 = *((_OWORD *)v14 + 1);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
        *(_OWORD *)(v15 + 16) = v16;
        *(void *)(v15 + 32) = &unk_1F260A2A8;
        int v17 = *((_DWORD *)v14 + 10);
        *(unsigned char *)(v15 + 44) = *((unsigned char *)v14 + 44);
        *(_DWORD *)(v15 + 40) = v17;
        *(void *)(v15 + 32) = &unk_1F260A288;
        LODWORD(qword_1EA61A528) = qword_1EA61A528 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61A518, v9, v10);
        v7 += 40;
      }
      while (v7 != v8);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA61A478);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC284D00, qword_1EA61A478, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA208);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA210))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    v136.n128_u64[1] = 0x400000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA218))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    v136.n128_u64[1] = 0x400000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA220))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "asm";
    uint64_t v138 = 3;
    int v139 = 0;
    uint64_t v140 = "Emit an assembly ('.s') file";
    uint64_t v141 = 28;
    int v142 = "obj";
    uint64_t v143 = 3;
    int v144 = 1;
    uint64_t v145 = "Emit a native object ('.o') file";
    uint64_t v146 = 32;
    uint64_t v147 = "null";
    uint64_t v148 = 4;
    int v149 = 2;
    uint64_t v150 = "Emit nothing, for performance testing";
    uint64_t v151 = 37;
    v136.n128_u64[1] = 0x400000003;
    uint64_t v19 = sub_1CB883A14((uint64_t)&qword_1EA61AB80, 0, 0);
    dword_1EA61AC00 = 0;
    qword_1EA61AC08 = (uint64_t)&unk_1F260A570;
    *(void *)&dword_1EA61AC10 = 0;
    qword_1EA61AB80 = (uint64_t)&unk_1F260A4B8;
    qword_1EA61AC18 = (uint64_t)&unk_1F260A520;
    qword_1EA61AC20 = (uint64_t)&qword_1EA61AB80;
    qword_1EA61AC28 = (uint64_t)&unk_1EA61AC38;
    qword_1EA61AC30 = 0x800000000;
    qword_1EA61ADB8 = (uint64_t)&unk_1F260ADE0;
    qword_1EA61ADD0 = (uint64_t)&qword_1EA61ADB8;
    llvm::cl::Option::setArgStr(v19, "filetype", 8uLL);
    dword_1EA61AC00 = 0;
    byte_1EA61AC14 = 1;
    dword_1EA61AC10 = 0;
    qword_1EA61ABA0 = (uint64_t)"Choose a file type (not all types are supported by all targets):";
    unk_1EA61ABA8 = 64;
    if (v136.n128_u32[2])
    {
      unint64_t v20 = v136.n128_u64[0];
      unint64_t v21 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        uint64_t v22 = *(unsigned __int8 **)v20;
        size_t v23 = *(void *)(v20 + 8);
        int v24 = *(_DWORD *)(v20 + 16);
        long long v25 = *(_OWORD *)(v20 + 24);
        int64_t v130 = *(int **)v20;
        size_t v131 = v23;
        long long v132 = v25;
        uint64_t v133 = &unk_1F260A570;
        char v135 = 1;
        int v134 = v24;
        uint64_t v26 = qword_1EA61AC28;
        if (qword_1EA61AC30 >= HIDWORD(qword_1EA61AC30))
        {
          unint64_t v31 = qword_1EA61AC30 + 1;
          if (qword_1EA61AC28 <= (unint64_t)&v130
            && qword_1EA61AC28 + 48 * (unint64_t)qword_1EA61AC30 > (unint64_t)&v130)
          {
            uint64_t v120 = (char *)&v130 - qword_1EA61AC28;
            sub_1CC28B970(v31);
            uint64_t v26 = qword_1EA61AC28;
            uint64_t v27 = (int **)&v120[qword_1EA61AC28];
            goto LABEL_83;
          }
          sub_1CC28B970(v31);
          uint64_t v26 = qword_1EA61AC28;
        }
        uint64_t v27 = &v130;
LABEL_83:
        uint64_t v28 = v26 + 48 * qword_1EA61AC30;
        long long v29 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v27;
        *(_OWORD *)(v28 + 16) = v29;
        *(void *)(v28 + 32) = &unk_1F260A590;
        int v30 = *((_DWORD *)v27 + 10);
        *(unsigned char *)(v28 + 44) = *((unsigned char *)v27 + 44);
        *(_DWORD *)(v28 + 40) = v30;
        *(void *)(v28 + 32) = &unk_1F260A570;
        LODWORD(qword_1EA61AC30) = qword_1EA61AC30 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61AC20, v22, v23);
        v20 += 40;
      }
      while (v20 != v21);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA61AB80);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC284FB8, &qword_1EA61AB80, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA220);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA228))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "all";
    uint64_t v138 = 3;
    int v139 = 2;
    uint64_t v140 = "Disable frame pointer elimination";
    uint64_t v141 = 33;
    int v142 = "non-leaf";
    uint64_t v143 = 8;
    int v144 = 1;
    uint64_t v145 = "Disable frame pointer elimination for non-leaf frame";
    uint64_t v146 = 52;
    uint64_t v147 = "none";
    uint64_t v148 = 4;
    int v149 = 0;
    uint64_t v150 = "Enable frame pointer elimination";
    uint64_t v151 = 32;
    v136.n128_u64[1] = 0x400000003;
    uint64_t v32 = sub_1CB883A14((uint64_t)&qword_1EA61ADD8, 0, 0);
    dword_1EA61AE58 = 0;
    qword_1EA61AE60 = (uint64_t)&unk_1F260A668;
    *(void *)&dword_1EA61AE68 = 0;
    qword_1EA61ADD8 = (uint64_t)&unk_1F260A5B0;
    qword_1EA61AE70 = (uint64_t)&unk_1F260A618;
    qword_1EA61AE78 = (uint64_t)&qword_1EA61ADD8;
    qword_1EA61AE80 = (uint64_t)&unk_1EA61AE90;
    qword_1EA61AE88 = 0x800000000;
    qword_1EA61B010 = (uint64_t)&unk_1F260AE28;
    qword_1EA61B028 = (uint64_t)&qword_1EA61B010;
    llvm::cl::Option::setArgStr(v32, "frame-pointer", 0xDuLL);
    qword_1EA61ADF8 = (uint64_t)"Specify frame pointer elimination optimization";
    unk_1EA61AE00 = 46;
    dword_1EA61AE58 = 0;
    byte_1EA61AE6C = 1;
    dword_1EA61AE68 = 0;
    if (v136.n128_u32[2])
    {
      unint64_t v33 = v136.n128_u64[0];
      unint64_t v34 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        uint64_t v35 = *(unsigned __int8 **)v33;
        size_t v36 = *(void *)(v33 + 8);
        int v37 = *(_DWORD *)(v33 + 16);
        long long v38 = *(_OWORD *)(v33 + 24);
        int64_t v130 = *(int **)v33;
        size_t v131 = v36;
        long long v132 = v38;
        uint64_t v133 = &unk_1F260A668;
        char v135 = 1;
        int v134 = v37;
        uint64_t v39 = qword_1EA61AE80;
        if (qword_1EA61AE88 >= HIDWORD(qword_1EA61AE88))
        {
          unint64_t v44 = qword_1EA61AE88 + 1;
          if (qword_1EA61AE80 <= (unint64_t)&v130
            && qword_1EA61AE80 + 48 * (unint64_t)qword_1EA61AE88 > (unint64_t)&v130)
          {
            uint64_t v121 = (char *)&v130 - qword_1EA61AE80;
            sub_1CC28BB28(v44);
            uint64_t v39 = qword_1EA61AE80;
            uint64_t v40 = (int **)&v121[qword_1EA61AE80];
            goto LABEL_94;
          }
          sub_1CC28BB28(v44);
          uint64_t v39 = qword_1EA61AE80;
        }
        uint64_t v40 = &v130;
LABEL_94:
        uint64_t v41 = v39 + 48 * qword_1EA61AE88;
        long long v42 = *((_OWORD *)v40 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v40;
        *(_OWORD *)(v41 + 16) = v42;
        *(void *)(v41 + 32) = &unk_1F260A688;
        int v43 = *((_DWORD *)v40 + 10);
        *(unsigned char *)(v41 + 44) = *((unsigned char *)v40 + 44);
        *(_DWORD *)(v41 + 40) = v43;
        *(void *)(v41 + 32) = &unk_1F260A668;
        LODWORD(qword_1EA61AE88) = qword_1EA61AE88 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61AE78, v35, v36);
        v33 += 40;
      }
      while (v33 != v34);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA61ADD8);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC2850A0, &qword_1EA61ADD8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA228);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA230, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA230))
  {
    v136.n128_u64[0] = (unint64_t)"Enable optimizations that may decrease FP precision";
    v136.n128_u64[1] = 51;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCA440, "enable-unsafe-fp-math", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA440, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA230);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA238))
  {
    v136.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume no +-Infs";
    v136.n128_u64[1] = 50;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCA500, "enable-no-infs-fp-math", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA500, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA238);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA240))
  {
    v136.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume no NaNs";
    v136.n128_u64[1] = 48;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCA5C0, "enable-no-nans-fp-math", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA5C0, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA240);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA248))
  {
    v136.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume the sign of 0 is insignificant";
    v136.n128_u64[1] = 71;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EBCCA680, "enable-no-signed-zeros-fp-math", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA680, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA248);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA250, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA250))
  {
    v136.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume approx func";
    v136.n128_u64[1] = 52;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCA740, "enable-approx-func-fp-math", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA740, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA250);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA258))
  {
    v136.n128_u64[0] = (unint64_t)"Enable setting the FP exceptions build attribute not to use exceptions";
    v136.n128_u64[1] = 70;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCA800, "enable-no-trapping-fp-math", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA800, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA258);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA260))
  {
    qword_1EBCCA390 = (uint64_t)&qword_1EBCCA3A0;
    qword_1EBCCA3A0 = (uint64_t)"ieee";
    unk_1EBCCA3A8 = 4;
    dword_1EBCCA3B0 = 0;
    qword_1EBCCA3B8 = (uint64_t)"IEEE 754 denormal numbers";
    unk_1EBCCA3C0 = 25;
    qword_1EBCCA3C8 = (uint64_t)"preserve-sign";
    unk_1EBCCA3D0 = 13;
    dword_1EBCCA3D8 = 1;
    qword_1EBCCA3E0 = (uint64_t)"the sign of a  flushed-to-zero number is preserved in the sign of 0";
    unk_1EBCCA3E8 = 67;
    qword_1EBCCA3F0 = (uint64_t)"positive-zero";
    unk_1EBCCA3F8 = 13;
    dword_1EBCCA400 = 2;
    qword_1EBCCA408 = (uint64_t)"denormals are flushed to positive zero";
    unk_1EBCCA410 = 38;
    qword_1EBCCA398 = 0x400000003;
    __cxa_atexit((void (*)(void *))sub_1CC284BE0, &qword_1EBCCA390, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA260);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA268))
  {
    uint64_t v45 = sub_1CB883A14((uint64_t)&qword_1EA61B030, 0, 0);
    byte_1EA61B0B0 = 0;
    qword_1EA61B0B8 = (uint64_t)&unk_1F260A760;
    *(void *)&word_1EA61B0C0 = 0;
    qword_1EA61B030 = (uint64_t)&unk_1F260A6A8;
    qword_1EA61B0C8 = (uint64_t)&unk_1F260A710;
    unk_1EA61B0D0 = &qword_1EA61B030;
    qword_1EA61B0D8 = (uint64_t)&unk_1EA61B0E8;
    qword_1EA61B0E0 = 0x800000000;
    qword_1EA61B268 = (uint64_t)&unk_1F260AE70;
    qword_1EA61B280 = (uint64_t)&qword_1EA61B268;
    llvm::cl::Option::setArgStr(v45, "denormal-fp-math", 0x10uLL);
    qword_1EA61B050 = (uint64_t)"Select which denormal numbers the code is permitted to require";
    unk_1EA61B058 = 62;
    byte_1EA61B0B0 = 0;
    word_1EA61B0C0 = 256;
    sub_1CC28BCE0((uint64_t)&qword_1EA61B030);
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA61B030);
    __cxa_atexit((void (*)(void *))sub_1CC285188, &qword_1EA61B030, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA268);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA270))
  {
    uint64_t v46 = sub_1CB883A14((uint64_t)&qword_1EA61B288, 0, 0);
    byte_1EA61B308 = 0;
    qword_1EA61B310 = (uint64_t)&unk_1F260A760;
    *(void *)&word_1EA61B318 = 0;
    qword_1EA61B288 = (uint64_t)&unk_1F260A6A8;
    qword_1EA61B320 = (uint64_t)&unk_1F260A710;
    unk_1EA61B328 = &qword_1EA61B288;
    qword_1EA61B330 = (uint64_t)&unk_1EA61B340;
    qword_1EA61B338 = 0x800000000;
    qword_1EA61B4C0 = (uint64_t)&unk_1F260AE70;
    qword_1EA61B4D8 = (uint64_t)&qword_1EA61B4C0;
    llvm::cl::Option::setArgStr(v46, "denormal-fp-math-f32", 0x14uLL);
    qword_1EA61B2A8 = (uint64_t)"Select which denormal numbers the code is permitted to require for float";
    unk_1EA61B2B0 = 72;
    byte_1EA61B308 = -1;
    word_1EA61B318 = 511;
    sub_1CC28BCE0((uint64_t)&qword_1EA61B288);
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA61B288);
    __cxa_atexit((void (*)(void *))sub_1CC285188, &qword_1EA61B288, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA270);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA278, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA278))
  {
    int v129 = 1;
    v136.n128_u64[0] = (unint64_t)"Force codegen to assume rounding mode can change dynamically";
    v136.n128_u64[1] = 60;
    char v128 = 0;
    int64_t v130 = (int *)&v128;
    sub_1CD423628((llvm::cl::Option *)&unk_1EBCCA8C0, "enable-sign-dependent-rounding-fp-math", &v129, &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCA8C0, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA278);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA280))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "default";
    uint64_t v138 = 7;
    int v139 = 0;
    uint64_t v140 = "Target default float ABI type";
    uint64_t v141 = 29;
    int v142 = "soft";
    uint64_t v143 = 4;
    int v144 = 1;
    uint64_t v145 = "Soft float ABI (implied by -soft-float)";
    uint64_t v146 = 39;
    uint64_t v147 = "hard";
    uint64_t v148 = 4;
    int v149 = 2;
    uint64_t v150 = "Hard float ABI (uses FP registers)";
    uint64_t v151 = 34;
    v136.n128_u64[1] = 0x400000003;
    uint64_t v47 = sub_1CB883A14((uint64_t)&qword_1EA61B4E0, 0, 0);
    dword_1EA61B560 = 0;
    qword_1EA61B568 = (uint64_t)&unk_1F260A858;
    *(void *)&dword_1EA61B570 = 0;
    qword_1EA61B4E0 = (uint64_t)&unk_1F260A7A0;
    qword_1EA61B578 = (uint64_t)&unk_1F260A808;
    qword_1EA61B580 = (uint64_t)&qword_1EA61B4E0;
    qword_1EA61B588 = (uint64_t)&unk_1EA61B598;
    qword_1EA61B590 = 0x800000000;
    qword_1EA61B718 = (uint64_t)&unk_1F260AEB8;
    qword_1EA61B730 = (uint64_t)&qword_1EA61B718;
    llvm::cl::Option::setArgStr(v47, "float-abi", 9uLL);
    qword_1EA61B500 = (uint64_t)"Choose float ABI type";
    unk_1EA61B508 = 21;
    dword_1EA61B560 = 0;
    byte_1EA61B574 = 1;
    dword_1EA61B570 = 0;
    if (v136.n128_u32[2])
    {
      unint64_t v48 = v136.n128_u64[0];
      unint64_t v49 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        uint64_t v50 = *(unsigned __int8 **)v48;
        size_t v51 = *(void *)(v48 + 8);
        int v52 = *(_DWORD *)(v48 + 16);
        long long v53 = *(_OWORD *)(v48 + 24);
        int64_t v130 = *(int **)v48;
        size_t v131 = v51;
        long long v132 = v53;
        uint64_t v133 = &unk_1F260A858;
        char v135 = 1;
        int v134 = v52;
        uint64_t v54 = qword_1EA61B588;
        if (qword_1EA61B590 >= HIDWORD(qword_1EA61B590))
        {
          unint64_t v59 = qword_1EA61B590 + 1;
          if (qword_1EA61B588 <= (unint64_t)&v130
            && qword_1EA61B588 + 48 * (unint64_t)qword_1EA61B590 > (unint64_t)&v130)
          {
            uint64_t v122 = (char *)&v130 - qword_1EA61B588;
            sub_1CC28C018(v59);
            uint64_t v54 = qword_1EA61B588;
            uint64_t v55 = (int **)&v122[qword_1EA61B588];
            goto LABEL_125;
          }
          sub_1CC28C018(v59);
          uint64_t v54 = qword_1EA61B588;
        }
        uint64_t v55 = &v130;
LABEL_125:
        uint64_t v56 = v54 + 48 * qword_1EA61B590;
        long long v57 = *((_OWORD *)v55 + 1);
        *(_OWORD *)uint64_t v56 = *(_OWORD *)v55;
        *(_OWORD *)(v56 + 16) = v57;
        *(void *)(v56 + 32) = &unk_1F260A878;
        int v58 = *((_DWORD *)v55 + 10);
        *(unsigned char *)(v56 + 44) = *((unsigned char *)v55 + 44);
        *(_DWORD *)(v56 + 40) = v58;
        *(void *)(v56 + 32) = &unk_1F260A858;
        LODWORD(qword_1EA61B590) = qword_1EA61B590 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61B580, v50, v51);
        v48 += 40;
      }
      while (v48 != v49);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA61B4E0);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC285270, &qword_1EA61B4E0, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA280);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA288))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "fast";
    uint64_t v138 = 4;
    int v139 = 0;
    uint64_t v140 = "Fuse FP ops whenever profitable";
    uint64_t v141 = 31;
    int v142 = "on";
    uint64_t v143 = 2;
    int v144 = 1;
    uint64_t v145 = "Only fuse 'blessed' FP ops.";
    uint64_t v146 = 27;
    uint64_t v147 = "off";
    uint64_t v148 = 3;
    int v149 = 2;
    uint64_t v150 = "Only fuse FP ops when the result won't be affected.";
    uint64_t v151 = 51;
    v136.n128_u64[1] = 0x400000003;
    uint64_t v60 = sub_1CB883A14((uint64_t)qword_1EA61B738, 0, 0);
    dword_1EA61B7B8 = 0;
    qword_1EA61B7C0 = (uint64_t)&unk_1F260A950;
    *(void *)&dword_1EA61B7C8 = 0;
    qword_1EA61B738[0] = (uint64_t)&unk_1F260A898;
    qword_1EA61B7D0 = (uint64_t)&unk_1F260A900;
    qword_1EA61B7D8 = (uint64_t)qword_1EA61B738;
    qword_1EA61B7E0 = (uint64_t)&unk_1EA61B7F0;
    qword_1EA61B7E8 = 0x800000000;
    qword_1EA61B970 = (uint64_t)&unk_1F260AF00;
    qword_1EA61B988 = (uint64_t)&qword_1EA61B970;
    llvm::cl::Option::setArgStr(v60, "fp-contract", 0xBuLL);
    qword_1EA61B758 = (uint64_t)"Enable aggressive formation of fused FP ops";
    unk_1EA61B760 = 43;
    dword_1EA61B7B8 = 1;
    byte_1EA61B7CC = 1;
    dword_1EA61B7C8 = 1;
    if (v136.n128_u32[2])
    {
      unint64_t v61 = v136.n128_u64[0];
      unint64_t v62 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        BOOL v63 = *(unsigned __int8 **)v61;
        size_t v64 = *(void *)(v61 + 8);
        int v65 = *(_DWORD *)(v61 + 16);
        long long v66 = *(_OWORD *)(v61 + 24);
        int64_t v130 = *(int **)v61;
        size_t v131 = v64;
        long long v132 = v66;
        uint64_t v133 = &unk_1F260A950;
        char v135 = 1;
        int v134 = v65;
        uint64_t v67 = qword_1EA61B7E0;
        if (qword_1EA61B7E8 >= HIDWORD(qword_1EA61B7E8))
        {
          unint64_t v72 = qword_1EA61B7E8 + 1;
          if (qword_1EA61B7E0 <= (unint64_t)&v130
            && qword_1EA61B7E0 + 48 * (unint64_t)qword_1EA61B7E8 > (unint64_t)&v130)
          {
            int v123 = (char *)&v130 - qword_1EA61B7E0;
            sub_1CC28C1D0(v72);
            uint64_t v67 = qword_1EA61B7E0;
            uint64_t v68 = (int **)&v123[qword_1EA61B7E0];
            goto LABEL_136;
          }
          sub_1CC28C1D0(v72);
          uint64_t v67 = qword_1EA61B7E0;
        }
        uint64_t v68 = &v130;
LABEL_136:
        uint64_t v69 = v67 + 48 * qword_1EA61B7E8;
        long long v70 = *((_OWORD *)v68 + 1);
        *(_OWORD *)uint64_t v69 = *(_OWORD *)v68;
        *(_OWORD *)(v69 + 16) = v70;
        *(void *)(v69 + 32) = &unk_1F260A970;
        int v71 = *((_DWORD *)v68 + 10);
        *(unsigned char *)(v69 + 44) = *((unsigned char *)v68 + 44);
        *(_DWORD *)(v69 + 40) = v71;
        *(void *)(v69 + 32) = &unk_1F260A950;
        LODWORD(qword_1EA61B7E8) = qword_1EA61B7E8 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61B7D8, v63, v64);
        v61 += 40;
      }
      while (v61 != v62);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA61B738);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC285358, qword_1EA61B738, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA288);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA290, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA290))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "auto";
    uint64_t v138 = 4;
    int v139 = 0;
    uint64_t v140 = "Determine based on deployment target";
    uint64_t v141 = 36;
    int v142 = "always";
    uint64_t v143 = 6;
    int v144 = 1;
    uint64_t v145 = "Always set the bit";
    uint64_t v146 = 18;
    uint64_t v147 = "never";
    uint64_t v148 = 5;
    int v149 = 2;
    uint64_t v150 = "Never set the bit";
    uint64_t v151 = 17;
    v136.n128_u64[1] = 0x400000003;
    uint64_t v73 = sub_1CB883A14((uint64_t)qword_1EA61B990, 0, 0);
    dword_1EA61BA10 = 0;
    qword_1EA61BA18 = (uint64_t)&unk_1F260AA48;
    *(void *)&dword_1EA61BA20 = 0;
    qword_1EA61B990[0] = (uint64_t)&unk_1F260A990;
    qword_1EA61BA28 = (uint64_t)&unk_1F260A9F8;
    qword_1EA61BA30 = (uint64_t)qword_1EA61B990;
    qword_1EA61BA38 = (uint64_t)&unk_1EA61BA48;
    qword_1EA61BA40 = 0x800000000;
    qword_1EA61BBC8 = (uint64_t)&unk_1F260AF48;
    qword_1EA61BBE0 = (uint64_t)&qword_1EA61BBC8;
    llvm::cl::Option::setArgStr(v73, "swift-async-fp", 0xEuLL);
    qword_1EA61B9B0 = (uint64_t)"Determine when the Swift async frame pointer should be set";
    unk_1EA61B9B8 = 58;
    dword_1EA61BA10 = 1;
    byte_1EA61BA24 = 1;
    dword_1EA61BA20 = 1;
    if (v136.n128_u32[2])
    {
      unint64_t v74 = v136.n128_u64[0];
      unint64_t v75 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        uint64_t v76 = *(unsigned __int8 **)v74;
        size_t v77 = *(void *)(v74 + 8);
        int v78 = *(_DWORD *)(v74 + 16);
        long long v79 = *(_OWORD *)(v74 + 24);
        int64_t v130 = *(int **)v74;
        size_t v131 = v77;
        long long v132 = v79;
        uint64_t v133 = &unk_1F260AA48;
        char v135 = 1;
        int v134 = v78;
        uint64_t v80 = qword_1EA61BA38;
        if (qword_1EA61BA40 >= HIDWORD(qword_1EA61BA40))
        {
          unint64_t v85 = qword_1EA61BA40 + 1;
          if (qword_1EA61BA38 <= (unint64_t)&v130
            && qword_1EA61BA38 + 48 * (unint64_t)qword_1EA61BA40 > (unint64_t)&v130)
          {
            uint64_t v124 = (char *)&v130 - qword_1EA61BA38;
            sub_1CC28C388(v85);
            uint64_t v80 = qword_1EA61BA38;
            int v81 = (int **)&v124[qword_1EA61BA38];
            goto LABEL_147;
          }
          sub_1CC28C388(v85);
          uint64_t v80 = qword_1EA61BA38;
        }
        int v81 = &v130;
LABEL_147:
        uint64_t v82 = v80 + 48 * qword_1EA61BA40;
        long long v83 = *((_OWORD *)v81 + 1);
        *(_OWORD *)uint64_t v82 = *(_OWORD *)v81;
        *(_OWORD *)(v82 + 16) = v83;
        *(void *)(v82 + 32) = &unk_1F260AA68;
        int v84 = *((_DWORD *)v81 + 10);
        *(unsigned char *)(v82 + 44) = *((unsigned char *)v81 + 44);
        *(_DWORD *)(v82 + 40) = v84;
        *(void *)(v82 + 32) = &unk_1F260AA48;
        LODWORD(qword_1EA61BA40) = qword_1EA61BA40 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61BA30, v76, v77);
        v74 += 40;
      }
      while (v74 != v75);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA61B990);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC285440, qword_1EA61B990, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA290);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA298))
  {
    v136.n128_u64[0] = (unint64_t)"Don't place zero-initialized symbols into bss section";
    v136.n128_u64[1] = 53;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&algn_1EBCCA941[63], "nozero-initialized-in-bss", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EBCCA941[63], &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA298);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2A0))
  {
    v136.n128_u64[0] = (unint64_t)"Enable the AIX Extended Altivec ABI.";
    v136.n128_u64[1] = 36;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD510DBC((long long *)&v136, (char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCAA40, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2A8))
  {
    uint64_t v86 = sub_1CB883A14((uint64_t)&qword_1EBCCAB00, 0, 0);
    byte_1EBCCAB80 = 0;
    qword_1EBCCAB90 = 0;
    qword_1EBCCAB88 = (uint64_t)&unk_1F25EDE58;
    qword_1EBCCAB00 = (uint64_t)&unk_1F26440A0;
    qword_1EBCCAB98 = (uint64_t)&unk_1F2643CC0;
    qword_1EBCCABA0 = (uint64_t)&unk_1F25EDE78;
    qword_1EBCCABB8 = (uint64_t)&qword_1EBCCABA0;
    llvm::cl::Option::setArgStr(v86, "tailcallopt", 0xBuLL);
    qword_1EBCCAB20 = (uint64_t)"Turn fastcc calls into tail calls by (potentially) changing ABI.";
    qword_1EBCCAB28 = 64;
    byte_1EBCCAB80 = 0;
    LOWORD(qword_1EBCCAB90) = 256;
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCCAB00);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCAB00, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2B0))
  {
    v136.n128_u64[0] = (unint64_t)"Never emit tail calls";
    v136.n128_u64[1] = 21;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCABC0, "disable-tail-calls", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCABC0, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2B0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2B8))
  {
    v136.n128_u64[0] = (unint64_t)"Order local stack symbols.";
    v136.n128_u64[1] = 26;
    LOBYTE(v129) = 1;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&algn_1EBCCAC41[63], "stack-symbol-ordering", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EBCCAC41[63], &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2B8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2C0))
  {
    v136.n128_u64[0] = (unint64_t)"Force align the stack to the minimum alignment";
    v136.n128_u64[1] = 46;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EBCCAD40, "stackrealign", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCAD40, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2C8))
  {
    v136.n128_u64[0] = (unint64_t)"";
    uint64_t v87 = sub_1CB883A14((uint64_t)&qword_1EA61A050, 0, 0);
    qword_1EA61A0D0 = 0;
    unk_1EA61A0D8 = 0;
    qword_1EA61A0F8 = 0;
    unk_1EA61A100 = 0;
    byte_1EA61A108 = 0;
    qword_1EA61A0F0 = 0;
    unk_1EA61A0E0 = 0;
    unk_1EA61A0E8 = &unk_1F2643C20;
    qword_1EA61A050 = (uint64_t)&unk_1F2643FD0;
    qword_1EA61A110 = (uint64_t)&unk_1F2643EA0;
    qword_1EA61A118 = (uint64_t)&unk_1F25F6428;
    qword_1EA61A130 = (uint64_t)&qword_1EA61A118;
    llvm::cl::Option::setArgStr(v87, "trap-func", 9uLL);
    word_1EA61A05A = word_1EA61A05A & 0xFF9F | 0x20;
    qword_1EA61A070 = (uint64_t)"Emit a call to trap function rather than a trap instruction";
    unk_1EA61A078 = 59;
    sub_1CBAD7D28((const char **)&v136, (uint64_t)&qword_1EA61A050);
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EA61A050);
    __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EA61A050, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2C8);
  }
  qword_1EBCCA1D8 = (uint64_t)&qword_1EA61A050;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2D0))
  {
    v136.n128_u64[0] = (unint64_t)"Use .ctors instead of .init_array.";
    v136.n128_u64[1] = 34;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD510ECC((long long *)&v136, (char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCAE00, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2D0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2D8))
  {
    uint64_t v88 = sub_1CB883A14((uint64_t)&qword_1EBCCAEC0, 0, 0);
    byte_1EBCCAF40 = 0;
    qword_1EBCCAF50 = 0;
    qword_1EBCCAF48 = (uint64_t)&unk_1F25EDE58;
    qword_1EBCCAEC0 = (uint64_t)&unk_1F26440A0;
    qword_1EBCCAF58 = (uint64_t)&unk_1F2643CC0;
    qword_1EBCCAF60 = (uint64_t)&unk_1F25EDE78;
    qword_1EBCCAF78 = (uint64_t)&qword_1EBCCAF60;
    llvm::cl::Option::setArgStr(v88, "lower-global-dtors-via-cxa-atexit", 0x21uLL);
    qword_1EBCCAEE0 = (uint64_t)"Lower llvm.global_dtors (global destructors) via __cxa_atexit";
    qword_1EBCCAEE8 = 61;
    byte_1EBCCAF40 = 0;
    LOWORD(qword_1EBCCAF50) = 256;
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCCAEC0);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCAEC0, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2E0))
  {
    v136.n128_u64[0] = (unint64_t)"Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF";
    v136.n128_u64[1] = 62;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)algn_1EBCCAF80, "relax-elf-relocations", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, algn_1EBCCAF80, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2E8))
  {
    v136.n128_u64[0] = (unint64_t)"Emit data into separate sections";
    v136.n128_u64[1] = 32;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EBCCB040, "data-sections", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCB040, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2F0))
  {
    v136.n128_u64[0] = (unint64_t)"Emit functions into separate sections";
    v136.n128_u64[1] = 37;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EBCCB100, "function-sections", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCB100, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2F0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA2F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA2F8))
  {
    v136.n128_u64[0] = (unint64_t)"Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspec"
                                         "ified' visibility in XCOFF object file";
    v136.n128_u64[1] = 117;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EA6191A8, "ignore-xcoff-visibility", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA6191A8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA2F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA300, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA300))
  {
    v136.n128_u64[0] = (unint64_t)"Emit the XCOFF traceback table";
    v136.n128_u64[1] = 30;
    LOBYTE(v129) = 1;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA619268, "xcoff-traceback-table", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619268, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA300);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA308))
  {
    v136.n128_u64[0] = (unint64_t)"none";
    uint64_t v89 = sub_1CB883A14((uint64_t)qword_1EA61A138, 0, 0);
    qword_1EA61A1B8 = 0;
    unk_1EA61A1C0 = 0;
    qword_1EA61A1E0 = 0;
    unk_1EA61A1E8 = 0;
    byte_1EA61A1F0 = 0;
    qword_1EA61A1D8 = 0;
    unk_1EA61A1C8 = 0;
    unk_1EA61A1D0 = &unk_1F2643C20;
    qword_1EA61A138[0] = (uint64_t)&unk_1F2643FD0;
    qword_1EA61A1F8 = (uint64_t)&unk_1F2643EA0;
    qword_1EA61A200 = (uint64_t)&unk_1F25F6428;
    qword_1EA61A218 = (uint64_t)&qword_1EA61A200;
    llvm::cl::Option::setArgStr(v89, "basic-block-sections", 0x14uLL);
    qword_1EA61A158 = (uint64_t)"Emit basic blocks into separate sections";
    unk_1EA61A160 = 40;
    qword_1EA61A168 = (uint64_t)"all | <function list (file)> | labels | none";
    unk_1EA61A170 = 44;
    sub_1CD476D48((const char **)&v136, (uint64_t)qword_1EA61A138);
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA61A138);
    __cxa_atexit((void (*)(void *))sub_1CD41C8DC, qword_1EA61A138, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA308);
  }
  qword_1EBCCA1E0 = (uint64_t)qword_1EA61A138;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA310, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA310))
  {
    uint64_t v90 = sub_1CB883A14((uint64_t)qword_1EA619328, 0, 0);
    dword_1EA6193A8 = 0;
    qword_1EA6193B0 = (uint64_t)&unk_1F25EA1B0;
    *(void *)&dword_1EA6193B8 = 0;
    qword_1EA619328[0] = (uint64_t)&unk_1F2643F00;
    qword_1EA6193C0 = (uint64_t)&unk_1F2643DB0;
    qword_1EA6193C8 = (uint64_t)&unk_1F25EA168;
    qword_1EA6193E0 = (uint64_t)&qword_1EA6193C8;
    llvm::cl::Option::setArgStr(v90, "tls-size", 8uLL);
    qword_1EA619348 = (uint64_t)"Bit size of immediate TLS offsets";
    unk_1EA619350 = 33;
    dword_1EA6193A8 = 0;
    byte_1EA6193BC = 1;
    dword_1EA6193B8 = 0;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA619328);
    __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EA619328, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA310);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA318, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA318))
  {
    v136.n128_u64[0] = (unint64_t)"Use emulated TLS model";
    v136.n128_u64[1] = 22;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EA6193E8, "emulated-tls", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA6193E8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA318);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA320))
  {
    v136.n128_u64[0] = (unint64_t)"Give unique names to every section";
    v136.n128_u64[1] = 34;
    LOBYTE(v129) = 1;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA6194A8, "unique-section-names", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA6194A8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA320);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA328))
  {
    uint64_t v91 = sub_1CB883A14((uint64_t)qword_1EA619568, 0, 0);
    byte_1EA6195E8 = 0;
    qword_1EA6195F0 = (uint64_t)&unk_1F25EDE58;
    *(void *)&word_1EA6195F8 = 0;
    qword_1EA619568[0] = (uint64_t)&unk_1F26440A0;
    qword_1EA619600 = (uint64_t)&unk_1F2643CC0;
    qword_1EA619608 = (uint64_t)&unk_1F25EDE78;
    qword_1EA619620 = (uint64_t)&qword_1EA619608;
    llvm::cl::Option::setArgStr(v91, "unique-basic-block-section-names", 0x20uLL);
    qword_1EA619588 = (uint64_t)"Give unique names to every basic block section";
    unk_1EA619590 = 46;
    byte_1EA6195E8 = 0;
    word_1EA6195F8 = 256;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA619568);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EA619568, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA328);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA330))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "default";
    uint64_t v138 = 7;
    int v139 = 1;
    uint64_t v140 = "Triple default EABI version";
    uint64_t v141 = 27;
    int v142 = "4";
    uint64_t v143 = 1;
    int v144 = 2;
    uint64_t v145 = "EABI version 4";
    uint64_t v146 = 14;
    uint64_t v147 = "5";
    uint64_t v148 = 1;
    int v149 = 3;
    uint64_t v150 = "EABI version 5";
    uint64_t v151 = 14;
    int64_t v152 = "gnu";
    uint64_t v153 = 3;
    int v154 = 4;
    int v155 = "EABI GNU";
    uint64_t v156 = 8;
    v136.n128_u64[1] = 0x400000004;
    uint64_t v92 = sub_1CB883A14((uint64_t)qword_1EA61BBE8, 0, 0);
    dword_1EA61BC68 = 0;
    qword_1EA61BC70 = (uint64_t)&unk_1F260AB40;
    *(void *)&dword_1EA61BC78 = 0;
    qword_1EA61BBE8[0] = (uint64_t)&unk_1F260AA88;
    qword_1EA61BC80 = (uint64_t)&unk_1F260AAF0;
    qword_1EA61BC88 = (uint64_t)qword_1EA61BBE8;
    qword_1EA61BC90 = (uint64_t)&unk_1EA61BCA0;
    qword_1EA61BC98 = 0x800000000;
    qword_1EA61BE20 = (uint64_t)&unk_1F260AF90;
    qword_1EA61BE38 = (uint64_t)&qword_1EA61BE20;
    llvm::cl::Option::setArgStr(v92, "meabi", 5uLL);
    qword_1EA61BC08 = (uint64_t)"Set EABI type (default depends on triple):";
    unk_1EA61BC10 = 42;
    dword_1EA61BC68 = 1;
    byte_1EA61BC7C = 1;
    dword_1EA61BC78 = 1;
    if (v136.n128_u32[2])
    {
      unint64_t v93 = v136.n128_u64[0];
      unint64_t v94 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        int v95 = *(unsigned __int8 **)v93;
        size_t v96 = *(void *)(v93 + 8);
        int v97 = *(_DWORD *)(v93 + 16);
        long long v98 = *(_OWORD *)(v93 + 24);
        int64_t v130 = *(int **)v93;
        size_t v131 = v96;
        long long v132 = v98;
        uint64_t v133 = &unk_1F260AB40;
        char v135 = 1;
        int v134 = v97;
        uint64_t v99 = qword_1EA61BC90;
        if (qword_1EA61BC98 >= HIDWORD(qword_1EA61BC98))
        {
          unint64_t v104 = qword_1EA61BC98 + 1;
          if (qword_1EA61BC90 <= (unint64_t)&v130
            && qword_1EA61BC90 + 48 * (unint64_t)qword_1EA61BC98 > (unint64_t)&v130)
          {
            uint64_t v125 = (char *)&v130 - qword_1EA61BC90;
            sub_1CC28C540(v104);
            uint64_t v99 = qword_1EA61BC90;
            uint64_t v100 = (int **)&v125[qword_1EA61BC90];
            goto LABEL_196;
          }
          sub_1CC28C540(v104);
          uint64_t v99 = qword_1EA61BC90;
        }
        uint64_t v100 = &v130;
LABEL_196:
        uint64_t v101 = v99 + 48 * qword_1EA61BC98;
        long long v102 = *((_OWORD *)v100 + 1);
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v100;
        *(_OWORD *)(v101 + 16) = v102;
        *(void *)(v101 + 32) = &unk_1F260AB60;
        int v103 = *((_DWORD *)v100 + 10);
        *(unsigned char *)(v101 + 44) = *((unsigned char *)v100 + 44);
        *(_DWORD *)(v101 + 40) = v103;
        *(void *)(v101 + 32) = &unk_1F260AB40;
        LODWORD(qword_1EA61BC98) = qword_1EA61BC98 + 1;
        llvm::cl::AddLiteralOption(qword_1EA61BC88, v95, v96);
        v93 += 40;
      }
      while (v93 != v94);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA61BBE8);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC285528, qword_1EA61BBE8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA330);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA338, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA338))
  {
    v136.n128_u64[0] = (unint64_t)&v137;
    int v137 = "gdb";
    uint64_t v138 = 3;
    int v139 = 1;
    uint64_t v140 = "gdb";
    uint64_t v141 = 3;
    int v142 = "lldb";
    uint64_t v143 = 4;
    int v144 = 2;
    uint64_t v145 = "lldb";
    uint64_t v146 = 4;
    uint64_t v147 = "dbx";
    uint64_t v148 = 3;
    int v149 = 4;
    uint64_t v150 = "dbx";
    uint64_t v151 = 3;
    int64_t v152 = "sce";
    uint64_t v153 = 3;
    int v154 = 3;
    int v155 = "SCE targets (e.g. PS4)";
    uint64_t v156 = 22;
    v136.n128_u64[1] = 0x400000004;
    uint64_t v105 = sub_1CB883A14((uint64_t)qword_1EA618F50, 0, 0);
    dword_1EA618FD0 = 0;
    qword_1EA618FD8 = (uint64_t)&unk_1F260AC38;
    *(void *)&dword_1EA618FE0 = 0;
    qword_1EA618F50[0] = (uint64_t)&unk_1F260AB80;
    qword_1EA618FE8 = (uint64_t)&unk_1F260ABE8;
    qword_1EA618FF0 = (uint64_t)qword_1EA618F50;
    qword_1EA618FF8 = (uint64_t)&unk_1EA619008;
    qword_1EA619000 = 0x800000000;
    qword_1EA619188 = (uint64_t)&unk_1F260AFD8;
    qword_1EA6191A0 = (uint64_t)&qword_1EA619188;
    llvm::cl::Option::setArgStr(v105, "debugger-tune", 0xDuLL);
    qword_1EA618F70 = (uint64_t)"Tune debug info for a particular debugger";
    unk_1EA618F78 = 41;
    dword_1EA618FD0 = 0;
    byte_1EA618FE4 = 1;
    dword_1EA618FE0 = 0;
    if (v136.n128_u32[2])
    {
      unint64_t v106 = v136.n128_u64[0];
      unint64_t v107 = v136.n128_u64[0] + 40 * v136.n128_u32[2];
      do
      {
        uint64_t v108 = *(unsigned __int8 **)v106;
        size_t v109 = *(void *)(v106 + 8);
        int v110 = *(_DWORD *)(v106 + 16);
        long long v111 = *(_OWORD *)(v106 + 24);
        int64_t v130 = *(int **)v106;
        size_t v131 = v109;
        long long v132 = v111;
        uint64_t v133 = &unk_1F260AC38;
        char v135 = 1;
        int v134 = v110;
        uint64_t v112 = qword_1EA618FF8;
        if (qword_1EA619000 >= HIDWORD(qword_1EA619000))
        {
          unint64_t v117 = qword_1EA619000 + 1;
          if (qword_1EA618FF8 <= (unint64_t)&v130
            && qword_1EA618FF8 + 48 * (unint64_t)qword_1EA619000 > (unint64_t)&v130)
          {
            int v126 = (char *)&v130 - qword_1EA618FF8;
            sub_1CC28C6F8(v117);
            uint64_t v112 = qword_1EA618FF8;
            int v113 = (int **)&v126[qword_1EA618FF8];
            goto LABEL_207;
          }
          sub_1CC28C6F8(v117);
          uint64_t v112 = qword_1EA618FF8;
        }
        int v113 = &v130;
LABEL_207:
        uint64_t v114 = v112 + 48 * qword_1EA619000;
        long long v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)uint64_t v114 = *(_OWORD *)v113;
        *(_OWORD *)(v114 + 16) = v115;
        *(void *)(v114 + 32) = &unk_1F260AC58;
        int v116 = *((_DWORD *)v113 + 10);
        *(unsigned char *)(v114 + 44) = *((unsigned char *)v113 + 44);
        *(_DWORD *)(v114 + 40) = v116;
        *(void *)(v114 + 32) = &unk_1F260AC38;
        LODWORD(qword_1EA619000) = qword_1EA619000 + 1;
        llvm::cl::AddLiteralOption(qword_1EA618FF0, v108, v109);
        v106 += 40;
      }
      while (v106 != v107);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA618F50);
    if ((const char **)v136.n128_u64[0] != &v137) {
      free((void *)v136.n128_u64[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1CC285610, qword_1EA618F50, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA338);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA340))
  {
    v136.n128_u64[0] = (unint64_t)"Emit a section containing stack size metadata";
    v136.n128_u64[1] = 45;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA619628, "stack-size-section", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619628, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA340);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA348))
  {
    v136.n128_u64[0] = (unint64_t)"Emit an address-significance table";
    v136.n128_u64[1] = 34;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD510FDC((long long *)&v136, (char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EA6196E8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA348);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA350, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA350))
  {
    v136.n128_u64[0] = (unint64_t)"Emit call site debug information, if debug information is enabled.";
    v136.n128_u64[1] = 66;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EA6197A8, "emit-call-site-info", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA6197A8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA350);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA358))
  {
    v136.n128_u64[0] = (unint64_t)"Enable debug info for the debug entry values.";
    v136.n128_u64[1] = 45;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA619868, "debug-entry-values", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619868, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA358);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA360, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA360))
  {
    v136.n128_u64[0] = (unint64_t)"Split out cold basic blocks from machine functions based on profile information";
    v136.n128_u64[1] = 79;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EA619928, "split-machine-functions", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619928, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA360);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA368))
  {
    v136.n128_u64[0] = (unint64_t)"Always emit a debug frame section.";
    v136.n128_u64[1] = 34;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA6199E8, "force-dwarf-frame-section", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA6199E8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA368);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA370, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA370))
  {
    v136.n128_u64[0] = (unint64_t)"Don't emit xray_fn_idx section";
    v136.n128_u64[1] = 30;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA619AA8, "no-xray-index", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619AA8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA370);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA378))
  {
    v136.n128_u64[0] = (unint64_t)"use strict dwarf";
    v136.n128_u64[1] = 16;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD41D15C((uint64_t)&unk_1EA619B68, "strict-dwarf", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619B68, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA378);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA380, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA380))
  {
    uint64_t v118 = sub_1CB883A14((uint64_t)qword_1EA619C28, 0, 0);
    dword_1EA619CA8 = 0;
    qword_1EA619CB0 = (uint64_t)&unk_1F25EA1B0;
    unk_1EA619CB8 = 0;
    qword_1EA619C28[0] = (uint64_t)&unk_1F2643F00;
    qword_1EA619CC0 = (uint64_t)&unk_1F2643DB0;
    qword_1EA619CC8 = (uint64_t)&unk_1F25EA168;
    qword_1EA619CE0 = (uint64_t)&qword_1EA619CC8;
    llvm::cl::Option::setArgStr(v118, "align-loops", 0xBuLL);
    qword_1EA619C48 = (uint64_t)"Default alignment for loops";
    unk_1EA619C50 = 27;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EA619C28);
    __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EA619C28, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA380);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCCA388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCCA388))
  {
    v136.n128_u64[0] = (unint64_t)"Instrument functions with a call to __CheckForDebuggerJustMyCode";
    v136.n128_u64[1] = 64;
    LOBYTE(v129) = 0;
    int64_t v130 = &v129;
    sub_1CD3F48AC((uint64_t)&unk_1EA619CE8, "enable-jmc-instrument", &v136, (unsigned char **)&v130);
    __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EA619CE8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCCA388);
  }
  llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags((uint64_t)&v127);
  return this;
}

void **sub_1CC284BE0(void **a1)
{
  uint64_t v3 = a1 + 2;
  uint64_t v2 = (void **)*a1;
  if (v2 != v3) {
    free(v2);
  }
  return a1;
}

void *sub_1CC284C18(void *a1)
{
  *a1 = &unk_1F260A0D8;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A140;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC284D00(void *a1)
{
  *a1 = &unk_1F260A1D0;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A238;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC284DE8(void *a1)
{
  *a1 = &unk_1F260A2C8;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A330;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC284ED0(void *a1)
{
  *a1 = &unk_1F260A3C0;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A428;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC284FB8(void *a1)
{
  *a1 = &unk_1F260A4B8;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A520;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC2850A0(void *a1)
{
  *a1 = &unk_1F260A5B0;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A618;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC285188(void *a1)
{
  *a1 = &unk_1F260A6A8;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A710;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC285270(void *a1)
{
  *a1 = &unk_1F260A7A0;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A808;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC285358(void *a1)
{
  *a1 = &unk_1F260A898;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A900;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC285440(void *a1)
{
  *a1 = &unk_1F260A990;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A9F8;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC285528(void *a1)
{
  *a1 = &unk_1F260AA88;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260AAF0;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CC285610(void *a1)
{
  *a1 = &unk_1F260AB80;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260ABE8;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

uint64_t llvm::codegen::getBBSectionsMode(llvm::codegen *this, llvm::TargetOptions *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (byte_1EA61A1CF < 0) {
    sub_1CB8BDF7C((uint64_t)&__s1, (const void *)qword_1EA61A1B8, unk_1EA61A1C0);
  }
  else {
    std::string __s1 = *(std::string *)(qword_1EBCCA1E0 + 128);
  }
  char v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = *((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v5 = __s1.__r_.__value_.__l.__size_;
  }
  if (v5 != 3)
  {
    BOOL v9 = 0;
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    if (!v9) {
      goto LABEL_22;
    }
    return 0;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    p_s1 = &__s1;
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  if (size >= 3) {
    size_t v7 = 3;
  }
  else {
    size_t v7 = size;
  }
  BOOL v8 = memcmp(p_s1, "all", v7) == 0;
  BOOL v9 = size == 3 && v8;
  if ((v3 & 0x80) == 0) {
    goto LABEL_19;
  }
LABEL_21:
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (v9) {
    return 0;
  }
LABEL_22:
  if (byte_1EA61A1CF < 0) {
    sub_1CB8BDF7C((uint64_t)&__s1, (const void *)qword_1EA61A1B8, unk_1EA61A1C0);
  }
  else {
    std::string __s1 = *(std::string *)(qword_1EBCCA1E0 + 128);
  }
  char v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  std::string::size_type v12 = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = *((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v13 = __s1.__r_.__value_.__l.__size_;
  }
  if (v13 != 6)
  {
    BOOL v17 = 0;
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_42;
    }
LABEL_40:
    if (!v17) {
      goto LABEL_43;
    }
    return 2;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    unsigned int v14 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    unsigned int v14 = &__s1;
    std::string::size_type v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 6) {
    size_t v15 = 6;
  }
  else {
    size_t v15 = v12;
  }
  BOOL v16 = memcmp(v14, "labels", v15) == 0;
  BOOL v17 = v12 == 6 && v16;
  if ((v11 & 0x80) == 0) {
    goto LABEL_40;
  }
LABEL_42:
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (v17) {
    return 2;
  }
LABEL_43:
  if (byte_1EA61A1CF < 0) {
    sub_1CB8BDF7C((uint64_t)&__s1, (const void *)qword_1EA61A1B8, unk_1EA61A1C0);
  }
  else {
    std::string __s1 = *(std::string *)(qword_1EBCCA1E0 + 128);
  }
  char v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  std::string::size_type v19 = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = *((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v20 = __s1.__r_.__value_.__l.__size_;
  }
  if (v20 == 4)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      unint64_t v21 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    else
    {
      unint64_t v21 = &__s1;
      std::string::size_type v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    if (v19 >= 4) {
      size_t v22 = 4;
    }
    else {
      size_t v22 = v19;
    }
    BOOL v23 = memcmp(v21, "none", v22) == 0;
    BOOL v24 = v19 == 4 && v23;
    if (v18 < 0)
    {
LABEL_63:
      operator delete(__s1.__r_.__value_.__l.__data_);
      if (!v24) {
        goto LABEL_64;
      }
      return 4;
    }
  }
  else
  {
    BOOL v24 = 0;
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_63;
    }
  }
  if (v24) {
    return 4;
  }
LABEL_64:
  if (byte_1EA61A1CF < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, (const void *)qword_1EA61A1B8, unk_1EA61A1C0);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(qword_1EBCCA1E0 + 128);
    uint64_t v35 = *(void *)(qword_1EBCCA1E0 + 144);
  }
  __int16 v37 = 260;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  long long v25 = sub_1CD096690((unsigned __int8 *)&__s1, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v38);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  if (v39)
  {
    uint64_t v26 = (llvm::raw_ostream *)llvm::errs((llvm *)v25);
    uint64_t v27 = v26;
    uint64_t v28 = (void *)*((void *)v26 + 4);
    if (*((void *)v26 + 3) - (void)v28 > 0x36uLL)
    {
      qmemcpy(v28, "Error loading basic block sections function list file: ", 55);
      *((void *)v26 + 4) += 55;
    }
    else
    {
      uint64_t v27 = llvm::raw_ostream::write(v26, "Error loading basic block sections function list file: ", 0x37uLL);
    }
    __p[0] = (void *)v38[0];
    __p[1] = (void *)v38[1];
    std::error_code::message(&__s1, (const std::error_code *)__p);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &__s1;
    }
    else {
      long long v29 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v30 = *((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t v30 = __s1.__r_.__value_.__l.__size_;
    }
    unint64_t v31 = llvm::raw_ostream::write(v27, (const char *)v29, v30);
    uint64_t v32 = (unsigned char *)*((void *)v31 + 4);
    if (*((unsigned char **)v31 + 3) == v32)
    {
      llvm::raw_ostream::write(v31, "\n", 1uLL);
    }
    else
    {
      *uint64_t v32 = 10;
      ++*((void *)v31 + 4);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v38[0]) {
      operator new();
    }
    v38[0] = 0;
    unint64_t v33 = (std::__shared_weak_count *)*((void *)this + 6);
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if ((v39 & 1) == 0)
  {
    if (v38[0]) {
      (*(void (**)(void))(*(void *)v38[0] + 8))(v38[0]);
    }
  }
  return 1;
}

void llvm::codegen::InitTargetOptionsFromCodeGenFlags(llvm::codegen *this@<X0>, uint64_t a2@<X8>)
{
  sub_1CD4546AC(a2);
  *(_DWORD *)(a2 + 96) = dword_1EA61B7B8;
  __int16 v6 = *(_WORD *)(a2 + 12) & 0xF800 | byte_1EBCCA4C0 | (2 * byte_1EBCCA580) | (4 * byte_1EBCCA640);
  __int16 v7 = 16 * byte_1EBCCA700;
  __int16 v8 = 32 * byte_1EBCCA7C0;
  __int16 v9 = 8 * byte_1EBCCA880;
  *(_WORD *)(a2 + 112) = byte_1EA61B0B0 | (byte_1EA61B0B0 << 8);
  __int16 v10 = byte_1EBCCA940 << 7;
  if (dword_1EA61B560) {
    *(_DWORD *)(a2 + 92) = dword_1EA61B560;
  }
  *(_WORD *)(a2 + 12) = v10 | v9 | v8 | v7 | v6 | (byte_1EBCCAAC0 << 6) | (byte_1EBCCAA00 << 8) | (byte_1EBCCAB80 << 9) | (byte_1EBCCAD00 << 10);
  *(unsigned char *)(a2 + 24) = (*(unsigned char *)(a2 + 24) & 0xFC | byte_1EBCCAE80 | (2 * byte_1EBCCAF40)) ^ 1;
  BOOL v12 = *((_DWORD *)this + 11) == 9 || (*((_DWORD *)this + 6) - 63) < 2;
  if (word_1EBCCB048) {
    char v13 = byte_1EBCCB0C0;
  }
  else {
    char v13 = v12;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFFFE0 | byte_1EBCCB000 | (4 * (v13 != 0)) | (2 * byte_1EBCCB180) | (8 * byte_1EA619228) | (16 * byte_1EA6192E8);
  int BBSectionsMode = llvm::codegen::getBBSectionsMode((llvm::codegen *)a2, v5);
  unsigned int v15 = (dword_1EA6193A8 << 9) | *(_DWORD *)(a2 + 32) & 0xFEA8019F | (32
                                                                                     * byte_1EA619528) | (byte_1EA6195E8 << 6) | (byte_1EA619468 << 17);
  int v16 = word_1EA6193F0 != 0;
  *(_DWORD *)(a2 + 116) = dword_1EA61A9A8;
  *(_DWORD *)(a2 + 32) = v15 | (v16 << 18) | (byte_1EA6196A8 << 20) | (byte_1EA6199A8 << 22) | (byte_1EA619768 << 24);
  *(_DWORD *)(a2 + 36) = BBSectionsMode;
  __int16 v17 = byte_1EA619BE8;
  LOWORD(v15) = *(_WORD *)(a2 + 56) & 0xFD8A | byte_1EA619828 | (4 * byte_1EA6198E8) | (16 * byte_1EA619A68) | (32 * byte_1EA619B28);
  *(_DWORD *)(a2 + 88) = dword_1EA619CA8;
  *(_WORD *)(a2 + 56) = v15 | (v17 << 6) | (byte_1EA619D68 << 9);
  llvm::mc::InitMCTargetOptionsFromFlags((uint64_t)&v23);
  *(void *)(a2 + 120) = v23;
  *(_DWORD *)(a2 + 128) = v24;
  char v18 = (void **)(a2 + 136);
  if (*(char *)(a2 + 159) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)char v18 = v25;
  *(void *)(a2 + 152) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(v25) = 0;
  std::string::size_type v19 = (void **)(a2 + 160);
  if (*(char *)(a2 + 183) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)std::string::size_type v19 = v27;
  *(void *)(a2 + 176) = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  std::string::size_type v20 = (void **)(a2 + 184);
  if (*(char *)(a2 + 207) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)std::string::size_type v20 = v29;
  *(void *)(a2 + 200) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(v29) = 0;
  unint64_t v21 = (void **)(a2 + 208);
  if (*(char *)(a2 + 231) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)unint64_t v21 = *(_OWORD *)__p;
  *(void *)(a2 + 224) = v32;
  HIBYTE(v32) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a2 + 232) = v33;
  *(void *)(a2 + 248) = v34;
  sub_1CBF4C5EC((void **)(a2 + 256));
  *(_OWORD *)(a2 + 256) = v35;
  *(void *)(a2 + 272) = v36;
  uint64_t v36 = 0;
  long long v35 = 0uLL;
  __int16 v37 = (void **)&v35;
  sub_1CB8338B8(&v37);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)v27);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  int v22 = dword_1EA61BC68;
  *(_DWORD *)(a2 + 100) = dword_1EA61A4F8;
  *(_DWORD *)(a2 + 104) = v22;
  *(_DWORD *)(a2 + 108) = dword_1EA618FD0;
  *(_DWORD *)(a2 + 20) = dword_1EA61BA10;
}

void llvm::codegen::getCPUStr(llvm::codegen *this@<X0>, void *a2@<X8>)
{
  if (byte_1EA619FFF < 0)
  {
    this = (llvm::codegen *)sub_1CB8BDF7C((uint64_t)__p, (const void *)qword_1EA619FE8, unk_1EA619FF0);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(qword_1EBCCA1D0 + 128);
    uint64_t v18 = *(void *)(qword_1EBCCA1D0 + 144);
  }
  char v3 = HIBYTE(v18);
  unint64_t v4 = (unint64_t)__p[1];
  if (v18 >= 0) {
    std::string::size_type v5 = (void *)(HIBYTE(v18) & 0x7F);
  }
  else {
    std::string::size_type v5 = __p[1];
  }
  if (v5 != (void *)6)
  {
    BOOL v8 = 0;
    if ((v18 & 0x8000000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v18 < 0)
  {
    __int16 v6 = (void **)__p[0];
  }
  else
  {
    __int16 v6 = __p;
    unint64_t v4 = HIBYTE(v18);
  }
  if (v4 >= 6) {
    size_t v7 = 6;
  }
  else {
    size_t v7 = v4;
  }
  this = (llvm::codegen *)memcmp(v6, "native", v7);
  BOOL v8 = v4 == 6 && this == 0;
  if (v3 < 0) {
LABEL_19:
  }
    operator delete(__p[0]);
LABEL_20:
  if (v8)
  {
    HostCPUName = llvm::sys::getHostCPUName(this);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    BOOL v12 = HostCPUName;
    size_t v13 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      int v16 = operator new(v14 + 1);
      a2[1] = v13;
      a2[2] = v15 | 0x8000000000000000;
      *a2 = v16;
      a2 = v16;
    }
    else
    {
      *((unsigned char *)a2 + 23) = v11;
      if (!v11) {
        goto LABEL_32;
      }
    }
    memmove(a2, v12, v13);
LABEL_32:
    *((unsigned char *)a2 + v13) = 0;
    return;
  }
  if (byte_1EA619FFF < 0)
  {
    sub_1CB8BDF7C((uint64_t)a2, (const void *)qword_1EA619FE8, unk_1EA619FF0);
  }
  else
  {
    uint64_t v9 = *(void *)(qword_1EBCCA1D0 + 144);
    *(_OWORD *)a2 = *(_OWORD *)(qword_1EBCCA1D0 + 128);
    a2[2] = v9;
  }
}

void llvm::codegen::getFeaturesStr(std::string *a1@<X8>)
{
  int64x2_t v19 = 0uLL;
  uint64_t v20 = 0;
  llvm::SubtargetFeatures::Split(&v19, (uint64_t)"", 0);
  if (byte_1EA619FFF < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, (const void *)qword_1EA619FE8, unk_1EA619FF0);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(qword_1EBCCA1D0 + 128);
    uint64_t v18 = *(void *)(qword_1EBCCA1D0 + 144);
  }
  char v3 = HIBYTE(v18);
  unint64_t v4 = (unint64_t)__p[1];
  if (v18 >= 0) {
    std::string::size_type v5 = (void *)(HIBYTE(v18) & 0x7F);
  }
  else {
    std::string::size_type v5 = __p[1];
  }
  if (v5 != (void *)6)
  {
    BOOL v9 = 0;
    if ((v18 & 0x8000000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v18 < 0)
  {
    __int16 v6 = (void **)__p[0];
  }
  else
  {
    __int16 v6 = __p;
    unint64_t v4 = HIBYTE(v18);
  }
  if (v4 >= 6) {
    size_t v7 = 6;
  }
  else {
    size_t v7 = v4;
  }
  BOOL v8 = memcmp(v6, "native", v7) == 0;
  BOOL v9 = v4 == 6 && v8;
  if (v3 < 0) {
LABEL_19:
  }
    operator delete(__p[0]);
LABEL_20:
  if (v9)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0x1000000000;
    sub_1CC0D7CD8((uint64_t)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  sub_1CB906CCC(__p, qword_1EA619E28, qword_1EA619E30, 0xAAAAAAAAAAAAAAABLL * ((qword_1EA619E30 - qword_1EA619E28) >> 3));
  __int16 v10 = (char *)__p[0];
  unint64_t v11 = (char *)__p[1];
  while (v10 != v11)
  {
    char v12 = v10[23];
    BOOL v13 = v12 < 0;
    if (v12 >= 0) {
      uint64_t v14 = (unsigned __int8 *)v10;
    }
    else {
      uint64_t v14 = *(unsigned __int8 **)v10;
    }
    uint64_t v15 = v12 & 0x7F;
    if (v13) {
      uint64_t v16 = *((void *)v10 + 1);
    }
    else {
      uint64_t v16 = v15;
    }
    llvm::SubtargetFeatures::AddFeature(&v19, v14, v16, 1);
    v10 += 24;
  }
  unint64_t v21 = __p;
  sub_1CB8338B8(&v21);
  sub_1CD4FB688((std::string *)v19.i64[0], (std::string *)v19.i64[1], ",", 1uLL, a1);
  __p[0] = &v19;
  sub_1CB8338B8((void ***)__p);
}

void llvm::codegen::getFeatureList(void *a1@<X8>)
{
  int64x2_t v19 = 0uLL;
  uint64_t v20 = 0;
  llvm::SubtargetFeatures::Split(&v19, (uint64_t)"", 0);
  if (byte_1EA619FFF < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, (const void *)qword_1EA619FE8, unk_1EA619FF0);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(qword_1EBCCA1D0 + 128);
    uint64_t v18 = *(void *)(qword_1EBCCA1D0 + 144);
  }
  char v3 = HIBYTE(v18);
  unint64_t v4 = (unint64_t)__p[1];
  if (v18 >= 0) {
    std::string::size_type v5 = (void *)(HIBYTE(v18) & 0x7F);
  }
  else {
    std::string::size_type v5 = __p[1];
  }
  if (v5 != (void *)6)
  {
    BOOL v9 = 0;
    if ((v18 & 0x8000000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v18 < 0)
  {
    __int16 v6 = (void **)__p[0];
  }
  else
  {
    __int16 v6 = __p;
    unint64_t v4 = HIBYTE(v18);
  }
  if (v4 >= 6) {
    size_t v7 = 6;
  }
  else {
    size_t v7 = v4;
  }
  BOOL v8 = memcmp(v6, "native", v7) == 0;
  BOOL v9 = v4 == 6 && v8;
  if (v3 < 0) {
LABEL_19:
  }
    operator delete(__p[0]);
LABEL_20:
  if (v9)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0x1000000000;
    sub_1CC0D7CD8((uint64_t)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  sub_1CB906CCC(__p, qword_1EA619E28, qword_1EA619E30, 0xAAAAAAAAAAAAAAABLL * ((qword_1EA619E30 - qword_1EA619E28) >> 3));
  __int16 v10 = (char *)__p[0];
  unint64_t v11 = (char *)__p[1];
  while (v10 != v11)
  {
    char v12 = v10[23];
    BOOL v13 = v12 < 0;
    if (v12 >= 0) {
      uint64_t v14 = (unsigned __int8 *)v10;
    }
    else {
      uint64_t v14 = *(unsigned __int8 **)v10;
    }
    uint64_t v15 = v12 & 0x7F;
    if (v13) {
      uint64_t v16 = *((void *)v10 + 1);
    }
    else {
      uint64_t v16 = v15;
    }
    llvm::SubtargetFeatures::AddFeature(&v19, v14, v16, 1);
    v10 += 24;
  }
  unint64_t v21 = __p;
  sub_1CB8338B8(&v21);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CB906CCC(a1, v19.i64[0], v19.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v19.i64[1] - v19.i64[0]) >> 3));
  __p[0] = &v19;
  sub_1CB8338B8((void ***)__p);
}

uint64_t llvm::codegen::renderBoolStringAttr(uint64_t **a1, unsigned __int8 *a2, size_t a3, int a4)
{
  if (a4) {
    size_t v7 = 4;
  }
  else {
    size_t v7 = 5;
  }
  if (a4) {
    BOOL v8 = "true";
  }
  else {
    BOOL v8 = "false";
  }
  BOOL v9 = llvm::Attribute::get(*a1, a2, a3, (unsigned __int8 *)v8, v7);

  return sub_1CC50F2F8((uint64_t)(a1 + 1), a2, a3, (uint64_t)v9);
}

void llvm::codegen::setFunctionAttributes(unsigned __int8 *a1, size_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  v200[8] = *MEMORY[0x1E4F143B8];
  BOOL v8 = **(uint64_t ***)a5;
  uint64_t v9 = *(void *)(a5 + 112);
  uint64_t v195 = v9;
  uint64_t v192 = v8;
  int v198 = v8;
  v199[0] = v200;
  v199[1] = (void *)0x800000000;
  if (a2)
  {
    size_t v10 = a2;
    char v12 = v8;
    if (v9)
    {
      char v12 = v8;
      if (*(_DWORD *)(v9 + 8))
      {
        uint64_t v13 = *(void *)(v9 + 40);
        char v12 = v8;
        if (v13)
        {
          int v14 = *(_DWORD *)(v13 + 40);
          char v12 = v8;
          if (v14)
          {
            uint64_t v15 = *(void *)(v13 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
            {
              uint64_t v179 = a1;
              int v180 = __cxa_guard_acquire(&qword_1EBCBE588);
              a1 = v179;
              size_t v10 = a2;
              if (v180)
              {
                unint64_t v181 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v181 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v181;
                __cxa_guard_release(&qword_1EBCBE588);
                a1 = v179;
                size_t v10 = a2;
              }
            }
            unint64_t v16 = 0x9DDFEA08EB382D69
                * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                                       * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
            unsigned int v17 = (-348639895 * ((v16 >> 47) ^ v16)) ^ 0x74656772;
            int v18 = 1;
            uint64_t v5 = a5;
            while (1)
            {
              unsigned int v19 = v17 & (v14 - 1);
              uint64_t v20 = (uint64_t *)(v15 + 24 * v19);
              uint64_t v21 = *v20;
              if (*v20 == -1)
              {
                if ("target-cpu" == (char *)-1) {
                  goto LABEL_24;
                }
              }
              else if (v21 == -2)
              {
                if ("target-cpu" == (char *)-2) {
                  goto LABEL_24;
                }
              }
              else if (v20[1] == 10 && *(void *)v21 == 0x632D746567726174 && *(_WORD *)(v21 + 8) == 30064)
              {
                goto LABEL_24;
              }
              if (v21 == -1) {
                break;
              }
              unsigned int v17 = v18 + v19;
              ++v18;
            }
            char v12 = v198;
          }
        }
      }
    }
    uint64_t v23 = llvm::Attribute::get(v12, "target-cpu", 0xAuLL, a1, v10);
    sub_1CC50F2F8((uint64_t)v199, "target-cpu", 0xAuLL, (uint64_t)v23);
  }
LABEL_24:
  if (!a4) {
    goto LABEL_52;
  }
  uint64_t v24 = *(void *)(v5 + 112);
  if (!v24) {
    goto LABEL_51;
  }
  if (!*(_DWORD *)(v24 + 8)) {
    goto LABEL_51;
  }
  uint64_t v25 = *(void *)(v24 + 40);
  if (!v25) {
    goto LABEL_51;
  }
  int v26 = *(_DWORD *)(v25 + 40);
  if (!v26) {
    goto LABEL_51;
  }
  uint64_t v27 = *(void *)(v25 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v185 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v185 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v185;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  unsigned int v29 = (-348639895 * ((v28 >> 47) ^ v28)) ^ 0x74616566;
  for (int i = 1; ; ++i)
  {
    unsigned int v31 = v29 & (v26 - 1);
    uint64_t v32 = v27 + 24 * v31;
    long long v33 = *(void **)v32;
    if (*(void *)v32 == -1)
    {
      if ("target-features" == (char *)-1) {
        goto LABEL_44;
      }
      goto LABEL_33;
    }
    if (v33 != (void *)-2) {
      break;
    }
    if ("target-features" == (char *)-2) {
      goto LABEL_44;
    }
LABEL_33:
    if (v33 == (void *)-1) {
      goto LABEL_51;
    }
    unsigned int v29 = i + v31;
  }
  if (*(void *)(v32 + 8) != 15) {
    goto LABEL_33;
  }
  if (*v33 != 0x662D746567726174 || *(void *)((char *)v33 + 7) != 0x7365727574616566) {
    goto LABEL_33;
  }
LABEL_44:
  uint64_t v35 = *(void *)(v32 + 16);
  if (!v35 || (size_t v36 = *(unsigned int *)(v35 + 16), !v36))
  {
LABEL_51:
    uint64_t v41 = llvm::Attribute::get(v198, "target-features", 0xFuLL, a3, a4);
    sub_1CC50F2F8((uint64_t)v199, "target-features", 0xFuLL, (uint64_t)v41);
    goto LABEL_52;
  }
  __int16 v37 = (const void *)(v35 + *(unsigned int *)(v35 + 12) + 25);
  *(void *)std::string __p = v197;
  *(_OWORD *)&__p[8] = xmmword_1CD96DBF0;
  if (v36 >= 0x101) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  memcpy(v197, v37, v36);
  size_t v38 = *(void *)&__p[8] + v36;
  *(void *)&__p[8] = v38;
  if (v38 + 1 > *(void *)&__p[16]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*(void *)__p + v38) = 44;
  uint64_t v39 = *(void *)&__p[8] + 1;
  *(void *)&__p[8] = v39;
  if (*(void *)&__p[16] < v39 + a4) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  memcpy((void *)(*(void *)__p + v39), a3, a4);
  *(void *)&__p[8] += a4;
  uint64_t v40 = llvm::Attribute::get(v198, "target-features", 0xFuLL, *(unsigned __int8 **)__p, *(size_t *)&__p[8]);
  sub_1CC50F2F8((uint64_t)v199, "target-features", 0xFuLL, (uint64_t)v40);
  if (*(_DWORD **)__p != v197) {
    free(*(void **)__p);
  }
LABEL_52:
  if (!word_1EA61ADE0) {
    goto LABEL_80;
  }
  uint64_t v42 = *(void *)(v5 + 112);
  if (v42)
  {
    if (*(_DWORD *)(v42 + 8))
    {
      uint64_t v43 = *(void *)(v42 + 40);
      if (v43)
      {
        int v44 = *(_DWORD *)(v43 + 40);
        if (v44)
        {
          uint64_t v45 = *(void *)(v43 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v182 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v182 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v182;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          unint64_t v46 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1EBCBE580 ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
          unsigned int v47 = (-348639895 * ((v46 >> 47) ^ v46)) ^ 0x696F702D;
          for (int j = 1; ; ++j)
          {
            unsigned int v49 = v47 & (v44 - 1);
            uint64_t v50 = v45 + 24 * v49;
            size_t v51 = *(void **)v50;
            if (*(void *)v50 == -1)
            {
              if ("frame-pointer" == (char *)-1) {
                goto LABEL_80;
              }
            }
            else if (v51 == (void *)-2)
            {
              if ("frame-pointer" == (char *)-2) {
                goto LABEL_80;
              }
            }
            else if (*(void *)(v50 + 8) == 13 {
                   && *v51 == 0x6F702D656D617266
            }
                   && *(void *)((char *)v51 + 5) == 0x7265746E696F702DLL)
            {
              goto LABEL_80;
            }
            if (v51 == (void *)-1) {
              break;
            }
            unsigned int v47 = j + v49;
          }
        }
      }
    }
  }
  switch(dword_1EA61AE58)
  {
    case 0:
      long long v53 = "none";
      size_t v54 = 4;
      goto LABEL_79;
    case 2:
      long long v53 = "all";
      size_t v54 = 3;
LABEL_79:
      uint64_t v55 = llvm::Attribute::get(v198, "frame-pointer", 0xDuLL, (unsigned __int8 *)v53, v54);
      sub_1CC50F2F8((uint64_t)v199, "frame-pointer", 0xDuLL, (uint64_t)v55);
      break;
    case 1:
      long long v53 = "non-leaf";
      size_t v54 = 8;
      goto LABEL_79;
  }
LABEL_80:
  if (word_1EBCCABC8)
  {
    if (byte_1EBCCAC40) {
      size_t v56 = 4;
    }
    else {
      size_t v56 = 5;
    }
    if (byte_1EBCCAC40) {
      long long v57 = "true";
    }
    else {
      long long v57 = "false";
    }
    int v58 = llvm::Attribute::get(v198, "disable-tail-calls", 0x12uLL, (unsigned __int8 *)v57, v56);
    sub_1CC50F2F8((uint64_t)v199, "disable-tail-calls", 0x12uLL, (uint64_t)v58);
  }
  if (byte_1EBCCADC0)
  {
    unint64_t v59 = llvm::Attribute::get(v198, "stackrealign", 0xCuLL, 0, 0);
    sub_1CC50F2F8((uint64_t)v199, "stackrealign", 0xCuLL, (uint64_t)v59);
  }
  uint64_t v60 = *(void *)(v5 + 40);
  if (!v60) {
    goto LABEL_94;
  }
  __int16 v194 = 260;
  v193[0] = v60 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v193);
  int v61 = v197[0];
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((v61 - 27) >= 3)
  {
LABEL_94:
    if (word_1EBCCA448)
    {
      uint64_t v62 = *(void *)(v5 + 112);
      if (v62)
      {
        if (*(_DWORD *)(v62 + 8))
        {
          uint64_t v63 = *(void *)(v62 + 40);
          if (v63)
          {
            int v64 = *(_DWORD *)(v63 + 40);
            if (v64)
            {
              uint64_t v65 = *(void *)(v63 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v186 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v186 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v186;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v66 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xFEC0C4B7E4C7DBB4)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1EBCBE580 ^ 0xFEC0C4B7E4C7DBB4)) >> 47) ^ 0x98EDA1D185B4B5C1);
              unsigned int v67 = (-348639895 * ((v66 >> 47) ^ v66)) ^ 0x2D70662D;
              for (int k = 1; ; ++k)
              {
                unsigned int v69 = v67 & (v64 - 1);
                uint64_t v70 = v65 + 24 * v69;
                int v71 = *(void **)v70;
                if (*(void *)v70 == -1)
                {
                  if ("unsafe-fp-math" == (char *)-1) {
                    goto LABEL_122;
                  }
                }
                else if (v71 == (void *)-2)
                {
                  if ("unsafe-fp-math" == (char *)-2) {
                    goto LABEL_122;
                  }
                }
                else if (*(void *)(v70 + 8) == 14 {
                       && *v71 == 0x662D656661736E75
                }
                       && *(void *)((char *)v71 + 6) == 0x6874616D2D70662DLL)
                {
                  goto LABEL_122;
                }
                if (v71 == (void *)-1) {
                  break;
                }
                unsigned int v67 = k + v69;
              }
            }
          }
        }
      }
      if (byte_1EBCCA4C0) {
        size_t v73 = 4;
      }
      else {
        size_t v73 = 5;
      }
      if (byte_1EBCCA4C0) {
        unint64_t v74 = "true";
      }
      else {
        unint64_t v74 = "false";
      }
      unint64_t v75 = llvm::Attribute::get(v198, "unsafe-fp-math", 0xEuLL, (unsigned __int8 *)v74, v73);
      sub_1CC50F2F8((uint64_t)v199, "unsafe-fp-math", 0xEuLL, (uint64_t)v75);
    }
LABEL_122:
    if (word_1EBCCA508)
    {
      uint64_t v76 = *(void *)(v5 + 112);
      if (v76)
      {
        if (*(_DWORD *)(v76 + 8))
        {
          uint64_t v77 = *(void *)(v76 + 40);
          if (v77)
          {
            int v78 = *(_DWORD *)(v77 + 40);
            if (v78)
            {
              uint64_t v79 = *(void *)(v77 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v187 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v187 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v187;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v80 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xE10BB686ABF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1EBCBE580 ^ 0xE10BB686ABF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
              unsigned int v81 = (-348639895 * ((v80 >> 47) ^ v80)) ^ 0x2D70662D;
              for (int m = 1; ; ++m)
              {
                unsigned int v83 = v81 & (v78 - 1);
                uint64_t v84 = v79 + 24 * v83;
                unint64_t v85 = *(void **)v84;
                if (*(void *)v84 == -1)
                {
                  if ("no-infs-fp-math" == (char *)-1) {
                    goto LABEL_150;
                  }
                }
                else if (v85 == (void *)-2)
                {
                  if ("no-infs-fp-math" == (char *)-2) {
                    goto LABEL_150;
                  }
                }
                else if (*(void *)(v84 + 8) == 15 {
                       && *v85 == 0x2D73666E692D6F6ELL
                }
                       && *(void *)((char *)v85 + 7) == 0x6874616D2D70662DLL)
                {
                  goto LABEL_150;
                }
                if (v85 == (void *)-1) {
                  break;
                }
                unsigned int v81 = m + v83;
              }
            }
          }
        }
      }
      if (byte_1EBCCA580) {
        size_t v87 = 4;
      }
      else {
        size_t v87 = 5;
      }
      if (byte_1EBCCA580) {
        uint64_t v88 = "true";
      }
      else {
        uint64_t v88 = "false";
      }
      uint64_t v89 = llvm::Attribute::get(v198, "no-infs-fp-math", 0xFuLL, (unsigned __int8 *)v88, v87);
      sub_1CC50F2F8((uint64_t)v199, "no-infs-fp-math", 0xFuLL, (uint64_t)v89);
    }
LABEL_150:
    if (word_1EBCCA5C8)
    {
      uint64_t v90 = *(void *)(v5 + 112);
      if (v90)
      {
        if (*(_DWORD *)(v90 + 8))
        {
          uint64_t v91 = *(void *)(v90 + 40);
          if (v91)
          {
            int v92 = *(_DWORD *)(v91 + 40);
            if (v92)
            {
              uint64_t v93 = *(void *)(v91 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v188 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v188 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v188;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v94 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xE10BBE89ACF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1EBCBE580 ^ 0xE10BBE89ACF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
              unsigned int v95 = (-348639895 * ((v94 >> 47) ^ v94)) ^ 0x2D70662D;
              for (int n = 1; ; ++n)
              {
                unsigned int v97 = v95 & (v92 - 1);
                uint64_t v98 = v93 + 24 * v97;
                uint64_t v99 = *(void **)v98;
                if (*(void *)v98 == -1)
                {
                  if ("no-nans-fp-math" == (char *)-1) {
                    goto LABEL_178;
                  }
                }
                else if (v99 == (void *)-2)
                {
                  if ("no-nans-fp-math" == (char *)-2) {
                    goto LABEL_178;
                  }
                }
                else if (*(void *)(v98 + 8) == 15 {
                       && *v99 == 0x2D736E616E2D6F6ELL
                }
                       && *(void *)((char *)v99 + 7) == 0x6874616D2D70662DLL)
                {
                  goto LABEL_178;
                }
                if (v99 == (void *)-1) {
                  break;
                }
                unsigned int v95 = n + v97;
              }
            }
          }
        }
      }
      if (byte_1EBCCA640) {
        size_t v101 = 4;
      }
      else {
        size_t v101 = 5;
      }
      if (byte_1EBCCA640) {
        long long v102 = "true";
      }
      else {
        long long v102 = "false";
      }
      int v103 = llvm::Attribute::get(v198, "no-nans-fp-math", 0xFuLL, (unsigned __int8 *)v102, v101);
      sub_1CC50F2F8((uint64_t)v199, "no-nans-fp-math", 0xFuLL, (uint64_t)v103);
    }
LABEL_178:
    if (word_1EBCCA688)
    {
      uint64_t v104 = *(void *)(v5 + 112);
      if (v104)
      {
        if (*(_DWORD *)(v104 + 8))
        {
          uint64_t v105 = *(void *)(v104 + 40);
          if (v105)
          {
            int v106 = *(_DWORD *)(v105 + 40);
            if (v106)
            {
              uint64_t v107 = *(void *)(v105 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v189 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v189 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v189;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              uint64_t v108 = __ROR8__(qword_1EBCBE580 ^ 0xFC9BC67DB8AC7E3, 30);
              unint64_t v109 = 0x9DDFEA08EB382D69
                   * ((qword_1EBCBE580 - 0x102CBA84B1F06A04) ^ ((0x9DDFEA08EB382D69
                                                                 * ((v108 + 0x4E390F61D0A552DLL) ^ (qword_1EBCBE580
                                                                                                  - 0x102CBA84B1F06A04))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v108 + 0x4E390F61D0A552DLL) ^ (qword_1EBCBE580 - 0x102CBA84B1F06A04))));
              unsigned int v110 = -348639895 * ((v109 >> 47) ^ v109);
              for (iint i = 1; ; ++ii)
              {
                unsigned int v112 = v110 & (v106 - 1);
                uint64_t v113 = v107 + 24 * v112;
                uint64_t v114 = *(void **)v113;
                if (*(void *)v113 == -1)
                {
                  if ("no-signed-zeros-fp-math" == (char *)-1) {
                    goto LABEL_209;
                  }
                }
                else if (v114 == (void *)-2)
                {
                  if ("no-signed-zeros-fp-math" == (char *)-2) {
                    goto LABEL_209;
                  }
                }
                else if (*(void *)(v113 + 8) == 23)
                {
                  BOOL v115 = *v114 == 0x656E6769732D6F6ELL && v114[1] == 0x2D736F72657A2D64;
                  if (v115 && *(void *)((char *)v114 + 15) == 0x6874616D2D70662DLL) {
                    goto LABEL_209;
                  }
                }
                if (v114 == (void *)-1) {
                  break;
                }
                unsigned int v110 = ii + v112;
              }
            }
          }
        }
      }
      if (byte_1EBCCA700) {
        size_t v117 = 4;
      }
      else {
        size_t v117 = 5;
      }
      if (byte_1EBCCA700) {
        uint64_t v118 = "true";
      }
      else {
        uint64_t v118 = "false";
      }
      uint64_t v119 = llvm::Attribute::get(v198, "no-signed-zeros-fp-math", 0x17uLL, (unsigned __int8 *)v118, v117);
      sub_1CC50F2F8((uint64_t)v199, "no-signed-zeros-fp-math", 0x17uLL, (uint64_t)v119);
    }
LABEL_209:
    if (word_1EBCCA748)
    {
      uint64_t v120 = *(void *)(v5 + 112);
      if (v120)
      {
        if (*(_DWORD *)(v120 + 8))
        {
          uint64_t v121 = *(void *)(v120 + 40);
          if (v121)
          {
            int v122 = *(_DWORD *)(v121 + 40);
            if (v122)
            {
              uint64_t v123 = *(void *)(v121 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v190 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v190 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v190;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              uint64_t v124 = __ROR8__(qword_1EBCBE580 ^ 0xFC9BC67DB8AC7E3, 30);
              unint64_t v125 = 0x9DDFEA08EB382D69
                   * ((qword_1EBCBE580 - 0x49BE07A926BA825ELL) ^ ((0x9DDFEA08EB382D69
                                                                 * ((v124 + 0x23F44D17BE4D1E1) ^ (qword_1EBCBE580
                                                                                                  - 0x49BE07A926BA825ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v124 + 0x23F44D17BE4D1E1) ^ (qword_1EBCBE580 - 0x49BE07A926BA825ELL))));
              unsigned int v126 = -348639895 * ((v125 >> 47) ^ v125);
              for (jint j = 1; ; ++jj)
              {
                unsigned int v128 = v126 & (v122 - 1);
                uint64_t v129 = v123 + 24 * v128;
                int64_t v130 = *(void **)v129;
                if (*(void *)v129 == -1)
                {
                  if ("approx-func-fp-math" == (char *)-1) {
                    goto LABEL_240;
                  }
                }
                else if (v130 == (void *)-2)
                {
                  if ("approx-func-fp-math" == (char *)-2) {
                    goto LABEL_240;
                  }
                }
                else if (*(void *)(v129 + 8) == 19)
                {
                  BOOL v131 = *v130 == 0x662D786F72707061 && v130[1] == 0x6D2D70662D636E75;
                  if (v131 && *(void *)((char *)v130 + 11) == 0x6874616D2D70662DLL) {
                    goto LABEL_240;
                  }
                }
                if (v130 == (void *)-1) {
                  break;
                }
                unsigned int v126 = jj + v128;
              }
            }
          }
        }
      }
      if (byte_1EBCCA7C0) {
        size_t v133 = 4;
      }
      else {
        size_t v133 = 5;
      }
      if (byte_1EBCCA7C0) {
        int v134 = "true";
      }
      else {
        int v134 = "false";
      }
      char v135 = llvm::Attribute::get(v198, "approx-func-fp-math", 0x13uLL, (unsigned __int8 *)v134, v133);
      sub_1CC50F2F8((uint64_t)v199, "approx-func-fp-math", 0x13uLL, (uint64_t)v135);
    }
  }
LABEL_240:
  if (word_1EA61B038)
  {
    uint64_t v136 = *(void *)(v5 + 112);
    if (v136)
    {
      if (*(_DWORD *)(v136 + 8))
      {
        uint64_t v137 = *(void *)(v136 + 40);
        if (v137)
        {
          int v138 = *(_DWORD *)(v137 + 40);
          if (v138)
          {
            uint64_t v139 = *(void *)(v137 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCBE588))
            {
              unint64_t v183 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v183 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v183;
              __cxa_guard_release(&qword_1EBCBE588);
            }
            unint64_t v140 = 0x9DDFEA08EB382D69
                 * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xA5C05060E034814)) ^ ((0x9DDFEA08EB382D69
                                                                                       * (qword_1EBCBE580 ^ 0xA5C05060E034814)) >> 47) ^ 0x663D6874616D2D70);
            unsigned int v141 = (-348639895 * ((v140 >> 47) ^ v140)) ^ 0x2D70662D;
            for (kint k = 1; ; ++kk)
            {
              unsigned int v143 = v141 & (v138 - 1);
              uint64_t v144 = v139 + 24 * v143;
              uint64_t v145 = *(void **)v144;
              if (*(void *)v144 == -1)
              {
                if ("denormal-fp-math" == (char *)-1) {
                  goto LABEL_269;
                }
              }
              else if (v145 == (void *)-2)
              {
                if ("denormal-fp-math" == (char *)-2) {
                  goto LABEL_269;
                }
              }
              else if (*(void *)(v144 + 8) == 16 {
                     && *v145 == 0x6C616D726F6E6564
              }
                     && v145[1] == 0x6874616D2D70662DLL)
              {
                goto LABEL_269;
              }
              if (v145 == (void *)-1) {
                break;
              }
              unsigned int v141 = kk + v143;
            }
          }
        }
      }
    }
    LOBYTE(v193[0]) = byte_1EA61B0B0;
    BYTE1(v193[0]) = byte_1EA61B0B0;
    sub_1CD510A24((uint64_t)__p, (llvm::raw_ostream *)v193);
    if (__p[23] >= 0) {
      uint64_t v147 = __p;
    }
    else {
      uint64_t v147 = *(unsigned __int8 **)__p;
    }
    if (__p[23] >= 0) {
      size_t v148 = __p[23] & 0x7F;
    }
    else {
      size_t v148 = *(void *)&__p[8];
    }
    int v149 = llvm::Attribute::get(v198, "denormal-fp-math", 0x10uLL, v147, v148);
    sub_1CC50F2F8((uint64_t)v199, "denormal-fp-math", 0x10uLL, (uint64_t)v149);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
LABEL_269:
  if (word_1EA61B290)
  {
    uint64_t v150 = *(void *)(v5 + 112);
    if (v150)
    {
      if (*(_DWORD *)(v150 + 8))
      {
        uint64_t v151 = *(void *)(v150 + 40);
        if (v151)
        {
          int v152 = *(_DWORD *)(v151 + 40);
          if (v152)
          {
            uint64_t v153 = *(void *)(v151 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCBE588))
            {
              unint64_t v184 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v184 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v184;
              __cxa_guard_release(&qword_1EBCBE588);
            }
            uint64_t v154 = __ROR8__(qword_1EBCBE580 ^ 0x9D169799249550A3, 30);
            unint64_t v155 = 0x9DDFEA08EB382D69
                 * ((qword_1EBCBE580 - 0x19036E9E735A94C5) ^ ((0x9DDFEA08EB382D69
                                                               * ((v154 + 0x60D41C67E817EB41) ^ (qword_1EBCBE580
                                                                                                 - 0x19036E9E735A94C5))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v154 + 0x60D41C67E817EB41) ^ (qword_1EBCBE580 - 0x19036E9E735A94C5))));
            unsigned int v156 = -348639895 * ((v155 >> 47) ^ v155);
            for (mint m = 1; ; ++mm)
            {
              unsigned int v158 = v156 & (v152 - 1);
              int64_t v159 = (uint64_t *)(v153 + 24 * v158);
              uint64_t v160 = *v159;
              if (*v159 == -1)
              {
                if ("denormal-fp-math-f32" == (char *)-1) {
                  goto LABEL_301;
                }
              }
              else if (v160 == -2)
              {
                if ("denormal-fp-math-f32" == (char *)-2) {
                  goto LABEL_301;
                }
              }
              else if (v159[1] == 20)
              {
                BOOL v161 = *(void *)v160 == 0x6C616D726F6E6564 && *(void *)(v160 + 8) == 0x6874616D2D70662DLL;
                if (v161 && *(_DWORD *)(v160 + 16) == 842229293) {
                  goto LABEL_301;
                }
              }
              if (v160 == -1) {
                break;
              }
              unsigned int v156 = mm + v158;
            }
          }
        }
      }
    }
    LOBYTE(v193[0]) = byte_1EA61B308;
    BYTE1(v193[0]) = byte_1EA61B308;
    sub_1CD510A24((uint64_t)__p, (llvm::raw_ostream *)v193);
    if (__p[23] >= 0) {
      uint64_t v163 = __p;
    }
    else {
      uint64_t v163 = *(unsigned __int8 **)__p;
    }
    if (__p[23] >= 0) {
      size_t v164 = __p[23] & 0x7F;
    }
    else {
      size_t v164 = *(void *)&__p[8];
    }
    uint64_t v165 = llvm::Attribute::get(v198, "denormal-fp-math-f32", 0x14uLL, v163, v164);
    sub_1CC50F2F8((uint64_t)v199, "denormal-fp-math-f32", 0x14uLL, (uint64_t)v165);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
LABEL_301:
  if (word_1EA61A058)
  {
    for (nint n = *(void *)(a5 + 80); nn != a5 + 72; nint n = *(void *)(nn + 8))
    {
      uint64_t v167 = nn - 24;
      if (!nn) {
        uint64_t v167 = 0;
      }
      uint64_t v168 = v167 + 40;
      for (uint64_t i1 = *(void *)(v167 + 48); i1 != v168; uint64_t i1 = *(void *)(i1 + 8))
      {
        uint64_t v170 = i1 - 24;
        if (!i1) {
          uint64_t v170 = 0;
        }
        int v171 = *(unsigned __int8 *)(v170 + 16);
        if (v171 == 84) {
          uint64_t v172 = v170;
        }
        else {
          uint64_t v172 = 0;
        }
        if (i1)
        {
          if (v171 == 84)
          {
            uint64_t v173 = *(void *)(v172 - 32);
            if (v173)
            {
              if (!*(unsigned char *)(v173 + 16) && *(void *)(v173 + 24) == *(void *)(v172 + 72))
              {
                int v174 = *(_DWORD *)(v173 + 36);
                if (v174 == 295 || v174 == 59)
                {
                  if (byte_1EA61A0E7 < 0)
                  {
                    sub_1CB8BDF7C((uint64_t)__p, (const void *)qword_1EA61A0D0, unk_1EA61A0D8);
                  }
                  else
                  {
                    *(_OWORD *)std::string __p = *(_OWORD *)(qword_1EBCCA1D8 + 128);
                    *(void *)&__p[16] = *(void *)(qword_1EBCCA1D8 + 144);
                  }
                  if (__p[23] >= 0) {
                    unint64_t v175 = __p;
                  }
                  else {
                    unint64_t v175 = *(unsigned __int8 **)__p;
                  }
                  if (__p[23] >= 0) {
                    size_t v176 = __p[23] & 0x7F;
                  }
                  else {
                    size_t v176 = *(void *)&__p[8];
                  }
                  long long v177 = llvm::Attribute::get(v192, "trap-func-name", 0xEuLL, v175, v176);
                  *(void *)(v172 + 64) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v172 + 64), **(llvm::LLVMContext ***)v172, -1, (uint64_t)v177);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *(void *)(a5 + 112) = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v195, (llvm::LLVMContext *)v192, -1, (const llvm::AttrBuilder *)&v198);
  if (v199[0] != v200) {
    free(v199[0]);
  }
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;

  uint64_t v5 = a5 + 24;
  __int16 v6 = *(void *)(a5 + 32);
  if (v6 != a5 + 24)
  {
    do
    {
      if (v6) {
        unint64_t v11 = v6 - 56;
      }
      else {
        unint64_t v11 = 0;
      }
      llvm::codegen::setFunctionAttributes(a1, a2, a3, a4, v11);
      __int16 v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
  }
}

uint64_t sub_1CC287C50(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v30 = 0;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v32 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_40;
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v32 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v32) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_10:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
  *(_OWORD *)std::string __p = __dst;
  unint64_t v30 = v32;
  unint64_t v13 = *(void *)(a1 + 136);
  if (v13 >= *(void *)(a1 + 144))
  {
    uint64_t v15 = sub_1CBF64E70((unint64_t *)(a1 + 128), (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v30) < 0)
    {
      sub_1CB8BDF7C(*(void *)(a1 + 136), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)__p;
      *(void *)(v13 + 16) = v30;
      *(_OWORD *)unint64_t v13 = v14;
    }
    uint64_t v15 = v13 + 24;
  }
  *(void *)(a1 + 136) = v15;
  *(_WORD *)(a1 + 12) = a2;
  unsigned int v17 = *(char **)(a1 + 160);
  unint64_t v16 = *(void *)(a1 + 168);
  if ((unint64_t)v17 >= v16)
  {
    unsigned int v19 = *(char **)(a1 + 152);
    uint64_t v20 = (v17 - v19) >> 2;
    unint64_t v21 = v20 + 1;
    if (!((unint64_t)(v20 + 1) >> 62))
    {
      uint64_t v22 = v16 - (void)v19;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 62) {
          goto LABEL_42;
        }
        uint64_t v24 = (char *)operator new(4 * v23);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[4 * v20];
      *(_DWORD *)uint64_t v25 = a2;
      int v18 = v25 + 4;
      while (v17 != v19)
      {
        int v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(void *)(a1 + 152) = v25;
      *(void *)(a1 + 160) = v18;
      *(void *)(a1 + 168) = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
      goto LABEL_36;
    }
LABEL_40:
    abort();
  }
  *(_DWORD *)unsigned int v17 = a2;
  int v18 = v17 + 4;
LABEL_36:
  *(void *)(a1 + 160) = v18;
  uint64_t v27 = *(void *)(a1 + 208);
  if (!v27)
  {
    sub_1CB920400();
LABEL_42:
    sub_1CB833614();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v27 + 48))(v27, __p);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void *sub_1CC287E7C(void *result)
{
  result[20] = result[19];
  uint64_t v2 = result[16];
  uint64_t v1 = result[17];
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v2;
      unint64_t v4 = result;
      uint64_t v5 = v1;
      if (*(char *)(v1 - 1) < 0) {
        operator delete(*(void **)(v1 - 24));
      }
      uint64_t v1 = v5 - 24;
      uint64_t v2 = v3;
      BOOL result = v4;
    }
    while (v5 - 24 != v3);
  }
  result[17] = v2;
  return result;
}

void *sub_1CC287EE4(void *a1)
{
  *a1 = &unk_1F260A140;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC287F38(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC288074(v17);
  }
}

uint64_t sub_1CC288074(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC28808C(void *a1)
{
  *a1 = &unk_1F260A0D8;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A140;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC288188(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC288194(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC2881A4(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A190;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC288228(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28823C(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC288244(void *a1)
{
  *a1 = &unk_1F260A140;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2882B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC2882C0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC2882D4(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC2882E8(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC2882FC(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC288328(void *a1)
{
  *a1 = &unk_1F260A238;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC28837C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC2884B8(v17);
  }
}

uint64_t sub_1CC2884B8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC2884D0(void *a1)
{
  *a1 = &unk_1F260A1D0;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A238;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC2885CC(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC2885D8(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC2885E8(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A288;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28866C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC288680(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC288688(void *a1)
{
  *a1 = &unk_1F260A238;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2886FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC288704(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC288718(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28872C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC288740(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC28876C(void *a1)
{
  *a1 = &unk_1F260A330;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC2887C0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC2888FC(v17);
  }
}

uint64_t sub_1CC2888FC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC288914(void *a1)
{
  *a1 = &unk_1F260A2C8;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A330;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC288A10(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC288A1C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC288A2C(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A380;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC288AB0(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC288AC4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC288ACC(void *a1)
{
  *a1 = &unk_1F260A330;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC288B40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC288B48(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC288B5C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC288B70(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC288B84(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC288BB0(void *a1)
{
  *a1 = &unk_1F260A428;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC288C04(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC288D40(v17);
  }
}

uint64_t sub_1CC288D40(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC288D58(void *a1)
{
  *a1 = &unk_1F260A3C0;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A428;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC288E54(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC288E60(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC288E70(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A478;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC288EF4(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC288F08(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC288F10(void *a1)
{
  *a1 = &unk_1F260A428;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC288F84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC288F8C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC288FA0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC288FB4(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC288FC8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC288FF4(void *a1)
{
  *a1 = &unk_1F260A520;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC289048(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC289184(v17);
  }
}

uint64_t sub_1CC289184(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC28919C(void *a1)
{
  *a1 = &unk_1F260A4B8;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A520;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC289298(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC2892A4(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC2892B4(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A570;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC289338(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28934C(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC289354(void *a1)
{
  *a1 = &unk_1F260A520;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2893C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC2893D0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC2893E4(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC2893F8(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC28940C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC289438(void *a1)
{
  *a1 = &unk_1F260A618;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC28948C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC2895C8(v17);
  }
}

uint64_t sub_1CC2895C8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC2895E0(void *a1)
{
  *a1 = &unk_1F260A5B0;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A618;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC2896DC(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC2896E8(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC2896F8(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A668;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28977C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC289790(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC289798(void *a1)
{
  *a1 = &unk_1F260A618;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC28980C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC289814(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC289828(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28983C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC289850(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC28987C(void *a1)
{
  *a1 = &unk_1F260A710;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC2898D0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  char v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    char v15 = *(unsigned char *)(v12 + 40);
    char v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    char v15 = 0;
  }
  *(unsigned char *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC289A0C(v17);
  }
}

uint64_t sub_1CC289A0C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC289A24(void *a1)
{
  *a1 = &unk_1F260A6A8;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A710;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC289B20(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC289B2C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC289B3C(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    LOBYTE(v3) = *((unsigned char *)result + 128);
LABEL_5:
    unint64_t v4 = &unk_1F260A760;
    char v6 = 1;
    char v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 145))
  {
    int v3 = *((unsigned __int8 *)result + 128);
    if (*((unsigned __int8 *)result + 144) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

unsigned char *sub_1CC289BC0(unsigned char *result)
{
  char v1 = result[145];
  if (v1) {
    char v1 = result[144];
  }
  result[128] = v1;
  return result;
}

void *sub_1CC289BD4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC289BDC(void *a1)
{
  *a1 = &unk_1F260A710;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC289C50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC289C58(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC289C6C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC289C80(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC289C94(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 9) && *(unsigned char *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void *sub_1CC289CC0(void *a1)
{
  *a1 = &unk_1F260A808;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC289D14(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC289E50(v17);
  }
}

uint64_t sub_1CC289E50(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC289E68(void *a1)
{
  *a1 = &unk_1F260A7A0;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A808;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC289F64(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC289F70(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC289F80(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A858;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28A004(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28A018(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC28A020(void *a1)
{
  *a1 = &unk_1F260A808;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC28A094(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC28A09C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC28A0B0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28A0C4(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC28A0D8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC28A104(void *a1)
{
  *a1 = &unk_1F260A900;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC28A158(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC28A294(v17);
  }
}

uint64_t sub_1CC28A294(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC28A2AC(void *a1)
{
  *a1 = &unk_1F260A898;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A900;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC28A3A8(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC28A3B4(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC28A3C4(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260A950;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28A448(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28A45C(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC28A464(void *a1)
{
  *a1 = &unk_1F260A900;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC28A4D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC28A4E0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC28A4F4(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28A508(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC28A51C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC28A548(void *a1)
{
  *a1 = &unk_1F260A9F8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC28A59C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC28A6D8(v17);
  }
}

uint64_t sub_1CC28A6D8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC28A6F0(void *a1)
{
  *a1 = &unk_1F260A990;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260A9F8;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC28A7EC(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC28A7F8(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC28A808(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260AA48;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28A88C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28A8A0(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC28A8A8(void *a1)
{
  *a1 = &unk_1F260A9F8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC28A91C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC28A924(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC28A938(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28A94C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC28A960(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC28A98C(void *a1)
{
  *a1 = &unk_1F260AAF0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC28A9E0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC28AB1C(v17);
  }
}

uint64_t sub_1CC28AB1C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC28AB34(void *a1)
{
  *a1 = &unk_1F260AA88;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260AAF0;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC28AC30(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC28AC3C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC28AC4C(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260AB40;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28ACD0(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28ACE4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC28ACEC(void *a1)
{
  *a1 = &unk_1F260AAF0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC28AD60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC28AD68(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC28AD7C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28AD90(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC28ADA4(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CC28ADD0(void *a1)
{
  *a1 = &unk_1F260ABE8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC28AE24(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC28AF60(v17);
  }
}

uint64_t sub_1CC28AF60(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC28AF78(void *a1)
{
  *a1 = &unk_1F260AB80;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F260ABE8;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC28B074(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC28B080(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC28B090(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F260AC38;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC28B114(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC28B128(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC28B130(void *a1)
{
  *a1 = &unk_1F260ABE8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC28B1A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC28B1AC(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC28B1C0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC28B1D4(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC28B1E8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CC28B218()
{
}

void *sub_1CC28B22C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260ACC0;
  return result;
}

void sub_1CC28B264(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260ACC0;
}

void sub_1CC28B290(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61A2D0) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61A2D0)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EA61A2C8;
  if (qword_1EA61A2D0)
  {
    uint64_t v6 = qword_1EA61A2C8 + 48 * qword_1EA61A2D0;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A1B0;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A190;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EA61A2C8;
  }
  if (v5 != (_OWORD *)&unk_1EA61A2D8) {
    free(v5);
  }
  qword_1EA61A2C8 = v4;
  HIDWORD(qword_1EA61A2D0) = v2;
}

void sub_1CC28B3D0()
{
}

void *sub_1CC28B3E4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AD08;
  return result;
}

void sub_1CC28B41C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AD08;
}

void sub_1CC28B448(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61A528) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61A528)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EA61A520;
  if (qword_1EA61A528)
  {
    uint64_t v6 = qword_1EA61A520 + 48 * qword_1EA61A528;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A2A8;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A288;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EA61A520;
  }
  if (v5 != (_OWORD *)&unk_1EA61A530) {
    free(v5);
  }
  qword_1EA61A520 = v4;
  HIDWORD(qword_1EA61A528) = v2;
}

void sub_1CC28B588()
{
}

void *sub_1CC28B59C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AD50;
  return result;
}

void sub_1CC28B5D4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AD50;
}

void sub_1CC28B600(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61A780) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61A780)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EA61A778;
  if (qword_1EA61A780)
  {
    uint64_t v6 = qword_1EA61A778 + 48 * qword_1EA61A780;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A3A0;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A380;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EA61A778;
  }
  if (v5 != (_OWORD *)&unk_1EA61A788) {
    free(v5);
  }
  qword_1EA61A778 = v4;
  HIDWORD(qword_1EA61A780) = v2;
}

void sub_1CC28B740()
{
}

void *sub_1CC28B754()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AD98;
  return result;
}

void sub_1CC28B78C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AD98;
}

void sub_1CC28B7B8(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61A9D8) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61A9D8)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EA61A9D0;
  if (qword_1EA61A9D8)
  {
    uint64_t v6 = qword_1EA61A9D0 + 48 * qword_1EA61A9D8;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A498;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A478;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EA61A9D0;
  }
  if (v5 != (_OWORD *)&unk_1EA61A9E0) {
    free(v5);
  }
  qword_1EA61A9D0 = v4;
  HIDWORD(qword_1EA61A9D8) = v2;
}

void sub_1CC28B8F8()
{
}

void *sub_1CC28B90C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260ADE0;
  return result;
}

void sub_1CC28B944(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260ADE0;
}

void sub_1CC28B970(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61AC30) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61AC30)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EA61AC28;
  if (qword_1EA61AC30)
  {
    uint64_t v6 = qword_1EA61AC28 + 48 * qword_1EA61AC30;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A590;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A570;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EA61AC28;
  }
  if (v5 != (_OWORD *)&unk_1EA61AC38) {
    free(v5);
  }
  qword_1EA61AC28 = v4;
  HIDWORD(qword_1EA61AC30) = v2;
}

void sub_1CC28BAB0()
{
}

void *sub_1CC28BAC4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AE28;
  return result;
}

void sub_1CC28BAFC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AE28;
}

void sub_1CC28BB28(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61AE88) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61AE88)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EA61AE80;
  if (qword_1EA61AE88)
  {
    uint64_t v6 = qword_1EA61AE80 + 48 * qword_1EA61AE88;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A688;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A668;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EA61AE80;
  }
  if (v5 != (_OWORD *)&unk_1EA61AE90) {
    free(v5);
  }
  qword_1EA61AE80 = v4;
  HIDWORD(qword_1EA61AE88) = v2;
}

void sub_1CC28BC68()
{
}

void *sub_1CC28BC7C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AE70;
  return result;
}

void sub_1CC28BCB4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AE70;
}

void sub_1CC28BCE0(uint64_t a1)
{
  if (qword_1EBCCA398)
  {
    uint64_t v2 = qword_1EBCCA390;
    uint64_t v3 = qword_1EBCCA390 + 40 * qword_1EBCCA398;
    uint64_t v4 = (unint64_t *)(a1 + 168);
    do
    {
      int v5 = *(unsigned __int8 **)v2;
      size_t v6 = *(void *)(v2 + 8);
      char v7 = *(_DWORD *)(v2 + 16);
      long long v8 = *(_OWORD *)(v2 + 24);
      v17[0] = *(void *)v2;
      v17[1] = v6;
      long long v18 = v8;
      unsigned int v19 = &unk_1F260A760;
      char v21 = 1;
      char v20 = v7;
      uint64_t v9 = *(unsigned int *)(a1 + 176);
      unint64_t v10 = *(void *)(a1 + 168);
      if (v9 >= *(_DWORD *)(a1 + 180))
      {
        unint64_t v14 = v9 + 1;
        BOOL v15 = v10 + 48 * v9 > (unint64_t)v17;
        if (v10 <= (unint64_t)v17 && v15)
        {
          uint64_t v16 = (char *)v17 - v10;
          sub_1CC28BE74((uint64_t)v4, v14);
          unint64_t v10 = *v4;
          uint64_t v11 = &v16[*v4];
          goto LABEL_5;
        }
        sub_1CC28BE74((uint64_t)v4, v14);
        unint64_t v10 = *v4;
      }
      uint64_t v11 = (char *)v17;
LABEL_5:
      uint64_t v12 = v10 + 48 * *(unsigned int *)(a1 + 176);
      long long v13 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
      *(_OWORD *)(v12 + 16) = v13;
      *(void *)(v12 + 32) = &unk_1F260A780;
      *(_WORD *)(v12 + 40) = *((_WORD *)v11 + 20);
      *(void *)(v12 + 32) = &unk_1F260A760;
      ++*(_DWORD *)(a1 + 176);
      llvm::cl::AddLiteralOption(*(void *)(a1 + 160), v5, v6);
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1CC28BE74(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  size_t v6 = (char *)malloc_type_malloc(48 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  char v7 = v6;
  long long v8 = *(char **)a1;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = &v8[48 * v9];
    uint64_t v11 = v7 + 32;
    uint64_t v12 = v7;
    do
    {
      long long v13 = *((_OWORD *)v8 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v8;
      *((_OWORD *)v12 + 1) = v13;
      *((void *)v12 + 4) = &unk_1F260A780;
      *((_WORD *)v12 + 20) = *((_WORD *)v8 + 20);
      *((void *)v12 + 4) = &unk_1F260A760;
      v11 += 48;
      v8 += 48;
      v12 += 48;
    }
    while (v8 != v10);
    long long v8 = *(char **)a1;
  }
  if (v8 != (char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC28BFA0()
{
}

void *sub_1CC28BFB4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AEB8;
  return result;
}

void sub_1CC28BFEC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AEB8;
}

void sub_1CC28C018(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61B590) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61B590)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = (_OWORD *)qword_1EA61B588;
  if (qword_1EA61B590)
  {
    uint64_t v6 = qword_1EA61B588 + 48 * qword_1EA61B590;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A878;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A858;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    uint64_t v5 = (_OWORD *)qword_1EA61B588;
  }
  if (v5 != (_OWORD *)&unk_1EA61B598) {
    free(v5);
  }
  qword_1EA61B588 = v4;
  HIDWORD(qword_1EA61B590) = v2;
}

void sub_1CC28C158()
{
}

void *sub_1CC28C16C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AF00;
  return result;
}

void sub_1CC28C1A4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AF00;
}

void sub_1CC28C1D0(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61B7E8) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61B7E8)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = (_OWORD *)qword_1EA61B7E0;
  if (qword_1EA61B7E8)
  {
    uint64_t v6 = qword_1EA61B7E0 + 48 * qword_1EA61B7E8;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260A970;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260A950;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    uint64_t v5 = (_OWORD *)qword_1EA61B7E0;
  }
  if (v5 != (_OWORD *)&unk_1EA61B7F0) {
    free(v5);
  }
  qword_1EA61B7E0 = v4;
  HIDWORD(qword_1EA61B7E8) = v2;
}

void sub_1CC28C310()
{
}

void *sub_1CC28C324()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AF48;
  return result;
}

void sub_1CC28C35C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AF48;
}

void sub_1CC28C388(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61BA40) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61BA40)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = (_OWORD *)qword_1EA61BA38;
  if (qword_1EA61BA40)
  {
    uint64_t v6 = qword_1EA61BA38 + 48 * qword_1EA61BA40;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260AA68;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260AA48;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    uint64_t v5 = (_OWORD *)qword_1EA61BA38;
  }
  if (v5 != (_OWORD *)&unk_1EA61BA48) {
    free(v5);
  }
  qword_1EA61BA38 = v4;
  HIDWORD(qword_1EA61BA40) = v2;
}

void sub_1CC28C4C8()
{
}

void *sub_1CC28C4DC()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AF90;
  return result;
}

void sub_1CC28C514(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AF90;
}

void sub_1CC28C540(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA61BC98) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA61BC98)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = (_OWORD *)qword_1EA61BC90;
  if (qword_1EA61BC98)
  {
    uint64_t v6 = qword_1EA61BC90 + 48 * qword_1EA61BC98;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260AB60;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260AB40;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    uint64_t v5 = (_OWORD *)qword_1EA61BC90;
  }
  if (v5 != (_OWORD *)&unk_1EA61BCA0) {
    free(v5);
  }
  qword_1EA61BC90 = v4;
  HIDWORD(qword_1EA61BC98) = v2;
}

void sub_1CC28C680()
{
}

void *sub_1CC28C694()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F260AFD8;
  return result;
}

void sub_1CC28C6CC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F260AFD8;
}

void sub_1CC28C6F8(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EA619000) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EA619000)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = (_OWORD *)qword_1EA618FF8;
  if (qword_1EA619000)
  {
    uint64_t v6 = qword_1EA618FF8 + 48 * qword_1EA619000;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F260AC58;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F260AC38;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    uint64_t v5 = (_OWORD *)qword_1EA618FF8;
  }
  if (v5 != (_OWORD *)&unk_1EA619008) {
    free(v5);
  }
  qword_1EA618FF8 = v4;
  HIDWORD(qword_1EA619000) = v2;
}

uint64_t sub_1CC28C834(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1CC28C868(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) + 8);
  BOOL v5 = (*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0;
  if (v5)
  {
    if ((v4 & 0x80) != 0) {
      goto LABEL_6;
    }
    uint64_t v7 = a2;
    while ((*(_WORD *)(v7 + 44) & 8) != 0)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if ((*(unsigned char *)(*(void *)(v7 + 16) + 8) & 0x80) != 0) {
        goto LABEL_6;
      }
    }
    if ((v4 & 0x80000000) != 0) {
      goto LABEL_6;
    }
    uint64_t v8 = a2;
    while ((*(_WORD *)(v8 + 44) & 8) != 0)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if ((*(unsigned char *)(*(void *)(v8 + 16) + 11) & 0x80) != 0) {
        goto LABEL_6;
      }
    }
LABEL_17:
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 24) + 768))(*(void *)(result + 24), a2);
    int v6 = result;
    goto LABEL_18;
  }
  if ((v4 & 0x80000080) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  int v6 = 1;
LABEL_18:
  uint64_t v9 = *(unsigned int *)(a2 + 40);
  if (!v9) {
    return result;
  }
  for (unint64_t i = 0; i != v9; ++i)
  {
    uint64_t v11 = *(void *)(a2 + 32) + 32 * i;
    if (*(unsigned char *)v11) {
      continue;
    }
    unint64_t v12 = *(unsigned int *)(v11 + 4);
    if (!v12) {
      continue;
    }
    if (i >= *(unsigned __int16 *)(*(void *)(a2 + 16) + 2))
    {
      long long v13 = (uint64_t *)(*(void *)(v3 + 120) + 8 * v12);
LABEL_37:
      *long long v13 = -1;
      goto LABEL_38;
    }
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 + 24) + 16))(*(void *)(v3 + 24));
    long long v13 = (uint64_t *)(*(void *)(v3 + 120) + 8 * v12);
    if (*v13) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = result == 0;
    }
    if (!v14)
    {
      *long long v13 = result;
      goto LABEL_38;
    }
    if (result) {
      BOOL v15 = *v13 == result;
    }
    else {
      BOOL v15 = 0;
    }
    if (!v15) {
      goto LABEL_37;
    }
LABEL_38:
    uint64_t v16 = *(void *)(v3 + 32);
    if (v16) {
      uint64_t v17 = (void *)(v16 + 8);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v19 = v17[5];
    uint64_t v18 = v17[6];
    char v20 = (_WORD *)(v18 + (((unint64_t)*(unsigned int *)(*v17 + 24 * v12 + 16) >> 3) & 0x1FFFFFFE));
    int v21 = (unsigned __int16)*v20 + (*(_DWORD *)(*v17 + 24 * v12 + 16) & 0xF) * v12;
    while (1)
    {
      ++v20;
      uint64_t v22 = 4 * (unsigned __int16)v21;
      int v23 = *(unsigned __int16 *)(v19 + v22);
      if (*(_WORD *)(v19 + v22)) {
        break;
      }
LABEL_50:
      v21 += (unsigned __int16)*v20;
      if (!*v20) {
        goto LABEL_64;
      }
    }
    int v24 = *(unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21 + 2);
    unsigned int v25 = v24 << 16;
    while (!v18)
    {
LABEL_48:
      unsigned int v25 = 0;
      int v23 = v24;
      BOOL v5 = (unsigned __int16)v24 == 0;
      int v24 = 0;
      if (v5) {
        goto LABEL_50;
      }
    }
    int v26 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(*v17 + 24 * (unsigned __int16)v23 + 8));
    while (v12 == (unsigned __int16)v23)
    {
      unsigned int v27 = *v26++;
      uint64_t result = v27;
      v23 += v27;
      if (!v27) {
        goto LABEL_48;
      }
    }
    LOWORD(v28) = v23;
    int v29 = v21;
    do
    {
      uint64_t v30 = *(void *)(v3 + 120);
      if (*(void *)(v30 + 8 * (unsigned __int16)v28))
      {
        *(void *)(v30 + 8 * (unsigned __int16)v28) = -1;
        *(void *)(*(void *)(v3 + 120) + 8 * v12) = -1;
      }
      do
      {
        int v33 = *v26++;
        __int16 v32 = v33;
        if (v33)
        {
          LOWORD(v28) = v32 + v28;
        }
        else
        {
          unsigned int v28 = HIWORD(v25);
          if (HIWORD(v25))
          {
            v25 >>= 16;
          }
          else
          {
            if (!*v20) {
              goto LABEL_64;
            }
            v29 += (unsigned __int16)*v20++;
            unsigned int v31 = (unsigned __int16 *)(v17[5] + 4 * (unsigned __int16)v29);
            unsigned int v28 = *v31;
            unsigned int v25 = v31[1] << 16;
          }
          int v26 = (unsigned __int16 *)(v17[6] + 2 * *(unsigned int *)(*v17 + 24 * v28 + 8));
        }
      }
      while (v12 == (unsigned __int16)v28);
    }
    while (v20);
LABEL_64:
    if (*(void *)(*(void *)(v3 + 120) + 8 * v12) != -1) {
      uint64_t result = (uint64_t)sub_1CD5117A0((uint64_t **)(v3 + 144), v12, v11);
    }
    if (*(unsigned char *)(v11 + 3)) {
      int v34 = 0;
    }
    else {
      int v34 = v6;
    }
    if (v34 == 1)
    {
      uint64_t v35 = *(void *)(v3 + 216);
      if (((*(void *)(v35 + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0)
      {
        uint64_t v36 = *(void *)(v3 + 32);
        __int16 v37 = (void *)(v36 + 8);
        if (!v36) {
          __int16 v37 = 0;
        }
        uint64_t v38 = v37[6];
        if (v38)
        {
          uint64_t v39 = (unsigned __int16 *)(v38 + 2 * *(unsigned int *)(*v37 + 24 * v12 + 4));
          do
          {
            *(void *)(v35 + 8 * ((unsigned __int16)v12 >> 6)) |= 1 << v12;
            int v40 = *v39++;
            LODWORD(v12) = v40 + v12;
          }
          while (v40);
        }
      }
    }
  }
  uint64_t v41 = *(unsigned int *)(a2 + 40);
  if (v41)
  {
    uint64_t v42 = 0;
    uint64_t v43 = *(void *)(a2 + 32);
    do
    {
      int v44 = *(_DWORD *)(v43 + 32 * v42);
      if (!(_BYTE)v44)
      {
        uint64_t v45 = *(unsigned int *)(v43 + 32 * v42 + 4);
        int v46 = v44 & 0x10000FF;
        int v47 = v44 & 0xF00000;
        BOOL v48 = v45 && v46 == 0x1000000;
        BOOL v49 = !v48 || v47 == 0;
        if (!v49 && *(void *)(*(void *)(v3 + 120) + 8 * v45) == -1)
        {
          uint64_t v50 = *(void *)(v3 + 32);
          size_t v51 = (uint64_t *)(v50 + 8);
          if (!v50) {
            size_t v51 = 0;
          }
          uint64_t v52 = v51[6];
          uint64_t v53 = *v51;
          if (v52)
          {
            size_t v54 = (unsigned __int16 *)(v52 + 2 * *(unsigned int *)(v53 + 24 * v45 + 4));
            uint64_t v55 = *(void *)(v3 + 216);
            int v56 = *(_DWORD *)(v43 + 32 * v42 + 4);
            do
            {
              *(void *)(v55 + 8 * ((unsigned __int16)v56 >> 6)) |= 1 << v56;
              int v57 = *v54++;
              v56 += v57;
            }
            while (v57);
          }
          uint64_t result = *(unsigned int *)(v53 + 24 * v45 + 8);
          if (*(_WORD *)(v52 + 2 * result))
          {
            int v58 = *(unsigned __int16 *)(v52 + 2 * result) + v45;
            uint64_t v59 = *(void *)(v3 + 216);
            uint64_t v60 = (unsigned __int16 *)(v52 + 2 * result + 2);
            do
            {
              *(void *)(v59 + 8 * ((unsigned __int16)v58 >> 6)) |= 1 << v58;
              unsigned int v61 = *v60++;
              uint64_t result = v61;
              v58 += v61;
            }
            while (v61);
          }
        }
      }
      ++v42;
    }
    while (v42 != v41);
  }
  return result;
}

void sub_1CC28CD00(uint64_t a1, uint64_t a2, int a3)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 768))(*(void *)(a1 + 24)) & 1) == 0)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 40);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v68 = *(unsigned int *)(a2 + 40);
      unsigned int v69 = (uint64_t **)(a1 + 144);
      do
      {
        uint64_t v8 = *(void *)(a2 + 32);
        uint64_t v9 = (int *)(v8 + 32 * v7);
        int v10 = *v9;
        if (*v9 == 12)
        {
          uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 32) + 16);
          if (v11)
          {
            for (uint64_t i = 0; i != v11; ++i)
            {
              uint64_t v13 = *(void *)(a1 + 32);
              BOOL v14 = (void *)(v13 + 8);
              if (!v13) {
                BOOL v14 = 0;
              }
              uint64_t v15 = v14[6];
              if (v15)
              {
                uint64_t v16 = (unsigned __int16 *)(v15 + 2 * *(unsigned int *)(*v14 + 24 * i + 4));
                unsigned __int16 v17 = i;
                while (((*(_DWORD *)(*(void *)(v8 + 32 * v7 + 16) + 4 * (v17 >> 5)) >> v17) & 1) == 0)
                {
                  int v18 = *v16++;
                  v17 += v18;
                  if (!v18) {
                    goto LABEL_13;
                  }
                }
              }
              else
              {
LABEL_13:
                *(_DWORD *)(*(void *)(a1 + 192) + 4 * i) = a3;
                *(_DWORD *)(*(void *)(a1 + 168) + 4 * i) = -1;
                *(void *)(*(void *)(a1 + 216) + 8 * (i >> 6)) &= ~(1 << i);
                *(void *)(*(void *)(a1 + 120) + 8 * i) = 0;
                sub_1CD508828(v69, i);
              }
            }
            int v10 = *v9;
            uint64_t v6 = v68;
          }
        }
        if (!(_BYTE)v10 && (v10 & 0x1000000) != 0)
        {
          unsigned int v19 = *(_DWORD *)(v8 + 32 * v7 + 4);
          if (v19)
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v7);
            int v21 = v20 & 0x10000FF;
            int v22 = v20 & 0xF00000;
            if (v21 != 0x1000000 || v22 == 0)
            {
              uint64_t v24 = *(void *)(a1 + 32);
              if (v24) {
                unsigned int v25 = (void *)(v24 + 8);
              }
              else {
                unsigned int v25 = 0;
              }
              uint64_t v26 = v25[6];
              if (v26)
              {
                uint64_t v27 = *(void *)(*(void *)(a1 + 216) + 8 * (v19 >> 6)) & (1 << v19);
                unsigned int v28 = (unsigned __int16 *)(v26 + 2 * *(unsigned int *)(*v25 + 24 * v19 + 4));
                unsigned __int16 v29 = v19;
                do
                {
                  unsigned int v30 = v29;
                  *(_DWORD *)(*(void *)(a1 + 192) + 4 * v29) = a3;
                  *(_DWORD *)(*(void *)(a1 + 168) + 4 * v29) = -1;
                  *(void *)(*(void *)(a1 + 120) + 8 * v29) = 0;
                  sub_1CD508828(v69, v29);
                  if (!v27) {
                    *(void *)(*(void *)(a1 + 216) + 8 * (v30 >> 6)) &= ~(1 << v30);
                  }
                  int v31 = *v28++;
                  unsigned __int16 v29 = v31 + v30;
                }
                while (v31);
                uint64_t v24 = *(void *)(a1 + 32);
                uint64_t v6 = v68;
              }
              __int16 v32 = (void *)(v24 + 8);
              if (!v24) {
                __int16 v32 = 0;
              }
              uint64_t v33 = v32[6];
              uint64_t v34 = *(unsigned int *)(*v32 + 24 * v19 + 8);
              if (*(_WORD *)(v33 + 2 * v34))
              {
                unsigned int v35 = *(unsigned __int16 *)(v33 + 2 * v34) + v19;
                uint64_t v36 = (unsigned __int16 *)(v33 + 2 * v34 + 2);
                do
                {
                  *(void *)(*(void *)(a1 + 120) + 8 * (unsigned __int16)v35) = -1;
                  int v37 = *v36++;
                  v35 += v37;
                }
                while (v37);
              }
            }
          }
        }
        ++v7;
      }
      while (v7 != v6);
    }
  }
  uint64_t v38 = *(unsigned int *)(a2 + 40);
  if (v38)
  {
    unint64_t v39 = 0;
    while (1)
    {
      int v40 = (_DWORD *)(*(void *)(a2 + 32) + 32 * v39);
      if (!*v40 && (*v40 & 0x1000000) == 0)
      {
        uint64_t v41 = v40[1];
        if (v41) {
          break;
        }
      }
LABEL_46:
      if (++v39 == v38) {
        return;
      }
    }
    if (v39 >= *(unsigned __int16 *)(*(void *)(a2 + 16) + 2))
    {
      uint64_t v43 = (uint64_t *)(*(void *)(a1 + 120) + 8 * v41);
    }
    else
    {
      uint64_t v42 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
      uint64_t v43 = (uint64_t *)(*(void *)(a1 + 120) + 8 * v41);
      if (*v43) {
        BOOL v44 = 1;
      }
      else {
        BOOL v44 = v42 == 0;
      }
      if (!v44)
      {
        *uint64_t v43 = v42;
        goto LABEL_62;
      }
      if (v42) {
        BOOL v45 = *v43 == v42;
      }
      else {
        BOOL v45 = 0;
      }
      if (v45)
      {
LABEL_62:
        sub_1CD5117A0((uint64_t **)(a1 + 144), v41, (uint64_t)v40);
        uint64_t v46 = *(void *)(a1 + 32);
        if (v46) {
          int v47 = (uint64_t *)(v46 + 8);
        }
        else {
          int v47 = 0;
        }
        uint64_t v48 = *v47;
        int v49 = *(_DWORD *)(*v47 + 24 * v41 + 16) & 0xF;
        unint64_t v50 = ((unint64_t)*(unsigned int *)(*v47 + 24 * v41 + 16) >> 3) & 0x1FFFFFFE;
        uint64_t v53 = v47 + 5;
        uint64_t v52 = v47[5];
        uint64_t v51 = v53[1];
        size_t v54 = (unsigned __int16 *)(v51 + v50);
        int v56 = *v54;
        uint64_t v55 = v54 + 1;
        int v57 = v56 + v49 * v41;
        while (1)
        {
          uint64_t v58 = 4 * (unsigned __int16)v57;
          uint64_t v59 = *(unsigned __int16 *)(v52 + v58);
          if (*(_WORD *)(v52 + v58) && v51 != 0) {
            break;
          }
          int v61 = (unsigned __int16)*v55++;
          v57 += v61;
          if (!v61) {
            goto LABEL_46;
          }
        }
        unsigned int v62 = *(unsigned __int16 *)(v52 + 4 * (unsigned __int16)v57 + 2) << 16;
        uint64_t v63 = *(void *)(a1 + 168);
        for (LOWORD(v64) = v59; ; LOWORD(v64) = v59)
        {
          while (1)
          {
            uint64_t v65 = (unsigned __int16 *)(v51 + 2 * *(unsigned int *)(v48 + 24 * v59 + 8));
            do
            {
              if (*(_DWORD *)(v63 + 4 * (unsigned __int16)v64) == -1)
              {
                *(_DWORD *)(v63 + 4 * (unsigned __int16)v64) = a3;
                *(_DWORD *)(*(void *)(a1 + 192) + 4 * (unsigned __int16)v64) = -1;
              }
              int v66 = *v65++;
              LOWORD(v64) = v66 + v64;
            }
            while (v66);
            uint64_t v59 = HIWORD(v62);
            if (!v59) {
              break;
            }
            unsigned int v64 = HIWORD(v62);
            v62 >>= 16;
          }
          if (!*v55) {
            break;
          }
          v57 += (unsigned __int16)*v55++;
          unsigned int v67 = (unsigned __int16 *)(v52 + 4 * (unsigned __int16)v57);
          uint64_t v59 = *v67;
          unsigned int v62 = v67[1] << 16;
        }
        goto LABEL_46;
      }
    }
    *uint64_t v43 = -1;
    goto LABEL_62;
  }
}

uint64_t sub_1CC28D180(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, int a5, uint64_t *a6)
{
  v108[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 == v7) {
    return 0;
  }
  uint64_t v11 = a1;
  unint64_t v12 = 0;
  v104[0] = 0;
  v104[1] = 0;
  int v105 = 0;
  do
  {
    int v106 = *(unsigned int **)(v6 + 8);
    sub_1CD511858((uint64_t)v104, (uint64_t *)&v106)[1] = v6;
    if (!v12) {
      goto LABEL_9;
    }
    if ((*(unsigned char *)(v6 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v6);
    }
    int v13 = *(_DWORD *)(v6 + 240);
    int v14 = *(unsigned __int16 *)(v6 + 226);
    if ((*(unsigned char *)(v12 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v12);
    }
    unsigned int v15 = v13 + v14;
    uint64_t v11 = a1;
    if (v15 > *(_DWORD *)(v12 + 240) + *(unsigned __int16 *)(v12 + 226)) {
LABEL_9:
    }
      unint64_t v12 = v6;
    v6 += 272;
  }
  while (v6 != v7);
  uint64_t v16 = *(void *)(v12 + 8);
  uint64_t v17 = *(unsigned int *)(*(void *)(v11 + 32) + 16);
  if (v17)
  {
    size_t v18 = 4 * v17;
    std::string __p = operator new(4 * v17);
    bzero(__p, v18);
  }
  else
  {
    std::string __p = 0;
  }
  if (a4 != a3)
  {
    unsigned int v100 = 0;
    unsigned int v97 = (uint64_t **)(v11 + 144);
    while (1)
    {
      a4 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (!a4 || (*(unsigned char *)a4 & 4) == 0)
      {
        while ((*(_WORD *)(a4 + 44) & 4) != 0)
          a4 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
      }
      --a5;
      int v20 = **(unsigned __int16 **)(a4 + 16);
      BOOL v21 = (v20 - 13) < 5 || v20 == 7;
      if (!v21)
      {
        if (a4 == v16)
        {
          uint64_t v23 = *(unsigned int *)(v12 + 40);
          if (v23)
          {
            uint64_t v16 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = *(void *)(v12 + 32);
            uint64_t v26 = 16 * v23;
            do
            {
              unint64_t v27 = *(void *)v25 & 0xFFFFFFFFFFFFFFF8;
              int v28 = *(_DWORD *)(v25 + 12);
              if ((*(unsigned char *)(v27 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(void *)v25 & 0xFFFFFFFFFFFFFFF8));
              }
              unsigned int v29 = *(_DWORD *)(v27 + 240) + v28;
              if (v24 < v29 || v24 == v29 && (*(void *)v25 & 6) == 2)
              {
                unsigned int v24 = *(_DWORD *)(v27 + 240) + v28;
                uint64_t v16 = v25;
              }
              v25 += 16;
              v26 -= 16;
            }
            while (v26);
            if (v16)
            {
              unint64_t v30 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v11 = a1;
              if ((*(void *)v16 & 6) == 2
                && (unint64_t v22 = *(unsigned int *)(v16 + 8), sub_1CB946A80(*(void **)(a1 + 16), *(_DWORD *)(v16 + 8)))
                && ((*(void *)(*(void *)(a1 + 216) + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) == 0)
              {
                uint64_t v72 = *(unsigned int *)(v12 + 40);
                if (v72)
                {
                  uint64_t v73 = 16 * v72;
                  unint64_t v74 = (_DWORD *)(*(void *)(v12 + 32) + 8);
                  do
                  {
                    uint64_t v75 = *((void *)v74 - 1) & 6;
                    if ((*((void *)v74 - 1) & 0xFFFFFFFFFFFFFFF8) == v30)
                    {
                      if (v75 != 2 || *v74 != v22) {
                        goto LABEL_44;
                      }
                    }
                    else if (!v75 && *v74 == v22)
                    {
                      goto LABEL_44;
                    }
                    v74 += 4;
                    v73 -= 16;
                  }
                  while (v73);
                }
              }
              else
              {
LABEL_44:
                LODWORD(v22) = 0;
              }
              uint64_t v16 = *(void *)(v30 + 8);
              unint64_t v12 = v30;
            }
            else
            {
              LODWORD(v22) = 0;
              unint64_t v12 = 0;
              uint64_t v11 = a1;
            }
          }
          else
          {
            LODWORD(v22) = 0;
            uint64_t v16 = 0;
            unint64_t v12 = 0;
          }
        }
        else
        {
          LODWORD(v22) = 0;
        }
        sub_1CC28C868(v11, a4);
        int v106 = (unsigned int *)v108;
        uint64_t v107 = 0x200000000;
        uint64_t v31 = *(void *)(*(void *)(a4 + 16) + 8);
        if ((*(_WORD *)(a4 + 44) & 0xC) == 0 || (*(_WORD *)(a4 + 44) & 4) != 0)
        {
          if ((v31 & 0x100000080) != 0) {
            goto LABEL_82;
          }
          goto LABEL_53;
        }
        unint64_t v40 = a4;
        if ((v31 & 0x80) == 0)
        {
          while ((*(_WORD *)(v40 + 44) & 8) != 0)
          {
            unint64_t v40 = *(void *)(v40 + 8);
            if ((*(unsigned char *)(*(void *)(v40 + 16) + 8) & 0x80) != 0) {
              goto LABEL_82;
            }
          }
          if ((v31 & 0x100000000) == 0)
          {
            unint64_t v41 = a4;
            while ((*(_WORD *)(v41 + 44) & 8) != 0)
            {
              unint64_t v41 = *(void *)(v41 + 8);
              if (*(unsigned char *)(*(void *)(v41 + 16) + 12)) {
                goto LABEL_82;
              }
            }
LABEL_53:
            if (((*(uint64_t (**)(void, unint64_t))(**(void **)(v11 + 24) + 768))(*(void *)(v11 + 24), a4) & 1) != 0|| !v22)
            {
              goto LABEL_82;
            }
            uint64_t v99 = v16;
            uint64_t v33 = *(unsigned int *)(a4 + 40);
            uint64_t v34 = v22;
            if (v33)
            {
              uint64_t v35 = 32 * v33;
              uint64_t v36 = (unsigned int *)(*(void *)(a4 + 32) + 4);
              do
              {
                if (!*(v36 - 1))
                {
                  unsigned int v37 = *v36;
                  if (*v36)
                  {
                    if ((*(v36 - 1) & 0x1000000) != 0)
                    {
                      if (v37 != v22)
                      {
                        if (v107 >= (unint64_t)HIDWORD(v107)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        v106[v107] = v37;
                        LODWORD(v107) = v107 + 1;
                      }
                    }
                    else
                    {
                      if (v22 == v37) {
                        goto LABEL_81;
                      }
                      if ((v22 - 1) <= 0x3FFFFFFE && !(v37 >> 30))
                      {
                        uint64_t v38 = v34;
                        BOOL v39 = llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(v11 + 32) + 8), v34, *v36);
                        uint64_t v34 = v38;
                        if (v39) {
                          goto LABEL_81;
                        }
                      }
                    }
                  }
                }
                v36 += 8;
                v35 -= 32;
              }
              while (v35);
            }
            uint64_t v42 = *(unsigned __int16 ****)(*(void *)(v11 + 120) + 8 * v34);
            if (v42 == (unsigned __int16 ***)-1) {
              goto LABEL_81;
            }
            uint64_t v93 = v34;
            BOOL v44 = sub_1CD508888((uint64_t)v97, v22);
            int v45 = *((_DWORD *)__p + v93);
            uint64_t v46 = *(void *)(v11 + 40);
            unsigned int v47 = *((unsigned __int16 *)*v42 + 12);
            uint64_t v48 = *(void *)v46;
            size_t v96 = v43;
            int v94 = v45;
            if (*(_DWORD *)(v46 + 8) != *(_DWORD *)(*(void *)v46 + 24 * *((unsigned __int16 *)*v42 + 12)))
            {
              llvm::RegisterClassInfo::compute((uint64_t *)v46, v42);
              int v45 = v94;
              uint64_t v43 = v96;
            }
            uint64_t v49 = v48 + 24 * v47;
            uint64_t v50 = *(unsigned int *)(v49 + 4);
            if (!v50)
            {
LABEL_123:
              uint64_t v11 = a1;
              goto LABEL_81;
            }
            uint64_t v51 = *(unsigned __int16 **)(v49 + 16);
            uint64_t v52 = &v51[v50];
            size_t v87 = v106;
            int v88 = v107;
            uint64_t v86 = 4 * v107;
            while (1)
            {
              unint64_t v53 = *v51;
              if (v22 != v53 && v45 != v53)
              {
                if (v44 == v43)
                {
LABEL_110:
                  uint64_t v66 = *(void *)(a1 + 168);
                  if (*(_DWORD *)(v66 + 4 * v53) == -1)
                  {
                    uint64_t v89 = *(void *)(a1 + 120);
                    if (*(void *)(v89 + 8 * v53) != -1
                      && *(_DWORD *)(v66 + 4 * v93) <= *(_DWORD *)(*(void *)(a1 + 192) + 4 * v53))
                    {
                      if (!v88)
                      {
LABEL_122:
                        if (!v53) {
                          goto LABEL_123;
                        }
                        uint64_t v11 = a1;
                        uint64_t v76 = v89;
                        if (v44 != v43)
                        {
                          do
                          {
                            llvm::MachineOperand::setReg(v44[5], v53);
                            uint64_t v103 = *(void *)(v44[5] + 8);
                            if (sub_1CD511858((uint64_t)v104, &v103)[1])
                            {
                              uint64_t v77 = *a6;
                              uint64_t v78 = a6[1];
                              if (v78 != *a6)
                              {
                                uint64_t v81 = 0;
                                uint64_t v82 = *(void *)(v44[5] + 8);
                                uint64_t v95 = *a6;
                                uint64_t v92 = v82;
                                do
                                {
                                  uint64_t v83 = *(void *)(v78 - 8);
                                  if (v83 == v82 || v83 == v81)
                                  {
                                    uint64_t v81 = *(void *)(v78 - 16);
                                    sub_1CD508598(a1, v81, v22, v53);
                                    uint64_t v82 = v92;
                                    uint64_t v77 = v95;
                                  }
                                  else if (v81)
                                  {
                                    break;
                                  }
                                  v78 -= 16;
                                }
                                while (v78 != v77);
                              }
                            }
                            uint64_t v79 = (uint64_t *)v44[1];
                            if (v79)
                            {
                              do
                              {
                                unint64_t v80 = v79;
                                uint64_t v79 = (uint64_t *)*v79;
                              }
                              while (v79);
                            }
                            else
                            {
                              do
                              {
                                unint64_t v80 = (uint64_t *)v44[2];
                                BOOL v21 = *v80 == (void)v44;
                                BOOL v44 = v80;
                              }
                              while (!v21);
                            }
                            BOOL v44 = v80;
                          }
                          while (v80 != v96);
                          uint64_t v76 = *(void *)(a1 + 120);
                        }
                        *(void *)(v76 + 8 * v53) = *(void *)(v76 + 8 * v93);
                        *(_DWORD *)(*(void *)(a1 + 192) + 4 * v53) = *(_DWORD *)(*(void *)(a1 + 192) + 4 * v93);
                        *(_DWORD *)(*(void *)(a1 + 168) + 4 * v53) = *(_DWORD *)(*(void *)(a1 + 168) + 4 * v93);
                        *(void *)(*(void *)(a1 + 120) + 8 * v93) = 0;
                        uint64_t v85 = *(void *)(a1 + 168);
                        *(_DWORD *)(*(void *)(a1 + 192) + 4 * v93) = *(_DWORD *)(v85 + 4 * v93);
                        *(_DWORD *)(v85 + 4 * v93) = -1;
                        sub_1CD508828(v97, v22);
                        *((_DWORD *)__p + v93) = v53;
                        ++v100;
LABEL_81:
                        uint64_t v16 = v99;
                        break;
                      }
                      unsigned int v67 = v53 - 1;
                      uint64_t v90 = (void *)(*(void *)(a1 + 32) + 8);
                      uint64_t v69 = v86;
                      uint64_t v68 = v87;
                      uint64_t v91 = v52;
                      while (1)
                      {
                        unsigned int v70 = *v68;
                        if (*v68 == v53) {
                          break;
                        }
                        if (v67 <= 0x3FFFFFFE && v70 - 1 <= 0x3FFFFFFE)
                        {
                          BOOL v71 = llvm::MCRegisterInfo::regsOverlap(v90, v53, v70);
                          unsigned int v67 = v53 - 1;
                          uint64_t v52 = v91;
                          int v45 = v94;
                          uint64_t v43 = v96;
                          if (v71) {
                            break;
                          }
                        }
                        ++v68;
                        v69 -= 4;
                        if (!v69) {
                          goto LABEL_122;
                        }
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v55 = v44;
                  while (1)
                  {
                    uint64_t v56 = v55[5];
                    int v57 = *(_DWORD *)v56;
                    if ((~*(_DWORD *)v56 & 0x41000000) == 0) {
                      break;
                    }
                    uint64_t v58 = *(void *)(v56 + 8);
                    uint64_t v59 = *(unsigned int *)(v58 + 40);
                    if (v59)
                    {
                      uint64_t v60 = *(int **)(v58 + 32);
                      int v61 = v57 & 0x1000000;
                      uint64_t v62 = 32 * v59;
                      do
                      {
                        int v63 = *v60;
                        if (*v60 == 12
                          && (*(_DWORD *)(*((void *)v60 + 2) + 4 * (v53 >> 5)) & (1 << v53)) == 0)
                        {
                          goto LABEL_111;
                        }
                        if ((v63 & 0x10000FF) == 0x1000000
                          && v60[1] == v53
                          && (v63 & 0x40000000 | v61 || **(unsigned __int16 **)(v58 + 16) - 3 > 0xFFFFFFFD))
                        {
                          goto LABEL_111;
                        }
                        v60 += 8;
                        v62 -= 32;
                      }
                      while (v62);
                    }
                    unsigned int v64 = (uint64_t *)v55[1];
                    if (v64)
                    {
                      do
                      {
                        uint64_t v65 = v64;
                        unsigned int v64 = (uint64_t *)*v64;
                      }
                      while (v64);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v65 = (uint64_t *)v55[2];
                        BOOL v21 = *v65 == (void)v55;
                        uint64_t v55 = v65;
                      }
                      while (!v21);
                    }
                    uint64_t v55 = v65;
                    if (v65 == v43) {
                      goto LABEL_110;
                    }
                  }
                }
              }
LABEL_111:
              if (++v51 == v52) {
                goto LABEL_123;
              }
            }
          }
        }
LABEL_82:
        sub_1CC28CD00(v11, a4, a5);
        if (v106 != (unsigned int *)v108) {
          free(v106);
        }
      }
      if (a4 == a3) {
        goto LABEL_155;
      }
    }
  }
  unsigned int v100 = 0;
LABEL_155:
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v104[0], 8);
  return v100;
}

void sub_1CC28DA54()
{
}

void sub_1CC28DAF0()
{
}

void sub_1CC28DC1C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260B098;
  uint64_t v2 = (char *)*((void *)this + 34);
  if (v2 != (char *)this + 288) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  BOOL v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC28DCE4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260B098;
  uint64_t v2 = (char *)*((void *)this + 34);
  if (v2 != (char *)this + 288) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  BOOL v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC28DDC0(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC28DE34(llvm::FunctionPass *a1, llvm::LLVMContextImpl *****a2)
{
  if (llvm::FunctionPass::skipFunction(a1, *a2)) {
    return 0;
  }
  uint64_t result = sub_1CC28DE90((uint64_t)a1, (uint64_t)a2);
  if (result)
  {
    while ((sub_1CC28DE90((uint64_t)a1, (uint64_t)a2) & 1) != 0)
      ;
    return 1;
  }
  return result;
}

uint64_t sub_1CC28DE90(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 248) = *(void *)(a2 + 40);
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 264) = v4;
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(unsigned int *)(a1 + 280);
  if (v6) {
    bzero(*(void **)(a1 + 272), 8 * v6);
  }
  int v7 = *(_DWORD *)(v4 + 44);
  if ((*(_DWORD *)(a1 + 336) & 0x3F) != 0) {
    *(void *)(v5 + 8 * v6 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 336) & 0x3F));
  }
  uint64_t v38 = (void **)(a1 + 272);
  *(_DWORD *)(a1 + 336) = v7;
  uint64_t v8 = (v7 + 63) >> 6;
  if (v8 != v6)
  {
    if (v8 >= v6)
    {
      if (v8 > *(_DWORD *)(a1 + 284)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero((void *)(v5 + 8 * v6), 8 * (v8 - v6));
      LODWORD(v6) = (v7 + 63) >> 6;
    }
    else
    {
      LODWORD(v6) = (v7 + 63) >> 6;
    }
    *(_DWORD *)(a1 + 280) = v6;
  }
  if ((v7 & 0x3F) != 0) {
    *(void *)(v5 + 8 * v6 - 8) &= ~(-1 << (v7 & 0x3F));
  }
  uint64_t v9 = *(const llvm::MachineBasicBlock **)(a2 + 320);
  uint64_t v36 = (const llvm::MachineBasicBlock *)(a2 + 320);
  if (v9 != (const llvm::MachineBasicBlock *)(a2 + 320))
  {
    char v37 = 0;
    int v10 = (llvm::LiveRegUnits *)(a1 + 264);
    while (1)
    {
      llvm::LiveRegUnits::addLiveOuts(v10, v9);
      uint64_t v11 = (void *)((char *)v9 + 48);
      unint64_t v12 = *((void *)v9 + 6) & 0xFFFFFFFFFFFFFFF8;
      if (!v12 || (*(unsigned char *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 4) != 0)
          unint64_t v12 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v12 == v11) {
        goto LABEL_66;
      }
      do
      {
        unint64_t v29 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
        if (!v29 || (*(unsigned char *)v29 & 4) == 0)
        {
          while ((*(_WORD *)(v29 + 44) & 4) != 0)
            unint64_t v29 = *(void *)v29 & 0xFFFFFFFFFFFFFFF8;
        }
        unsigned int v30 = **(unsigned __int16 **)(v12 + 16);
        BOOL v31 = v30 > 0x20;
        uint64_t v32 = (1 << v30) & 0x100000006;
        if (!v31 && v32 != 0) {
          goto LABEL_64;
        }
        BOOL v39 = 0;
        if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v12, 0, &v39))
        {
          int v13 = **(unsigned __int16 **)(v12 + 16);
          if (v13 != 69 && v13 != 0) {
            goto LABEL_64;
          }
        }
        uint64_t v15 = *(unsigned int *)(v12 + 40);
        if (!v15)
        {
LABEL_54:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v12);
          char v37 = 1;
          goto LABEL_65;
        }
        uint64_t v16 = *(_DWORD **)(v12 + 32);
        uint64_t v17 = &v16[8 * v15];
        while (1)
        {
          if ((*v16 & 0x10000FF) != 0x1000000) {
            goto LABEL_41;
          }
          unint64_t v18 = v16[1];
          if ((v18 - 1) <= 0x3FFFFFFE) {
            break;
          }
          if ((~*v16 & 0x5000000) != 0)
          {
            uint64_t v26 = *(void *)(a1 + 248);
            unint64_t v27 = (uint64_t *)((v18 & 0x80000000) != 0
                            ? *(void *)(v26 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8
                            : *(void *)(v26 + 272) + 8 * v18);
            uint64_t v28 = *v27;
            if (v28)
            {
              while ((*(_DWORD *)v28 & 0x81000000) != 0)
              {
                uint64_t v28 = *(void *)(v28 + 24);
                if (!v28) {
                  goto LABEL_41;
                }
              }
LABEL_51:
              if (*(void *)(v28 + 8) != v12) {
                goto LABEL_64;
              }
              while (1)
              {
                uint64_t v28 = *(void *)(v28 + 24);
                if (!v28) {
                  break;
                }
                if ((*(_DWORD *)v28 & 0x81000000) == 0) {
                  goto LABEL_51;
                }
              }
            }
          }
LABEL_41:
          v16 += 8;
          if (v16 == v17) {
            goto LABEL_54;
          }
        }
        if (*(void *)v10) {
          unsigned int v19 = (void *)(*(void *)v10 + 8);
        }
        else {
          unsigned int v19 = 0;
        }
        unint64_t v20 = *(unsigned int *)(*v19 + 24 * (unsigned __int16)v16[1] + 16);
        BOOL v21 = (_WORD *)(v19[6] + ((v20 >> 3) & 0x1FFFFFFE));
        __int16 v23 = *v21;
        unint64_t v22 = v21 + 1;
        unsigned __int16 v24 = v23 + (v20 & 0xF) * v18;
        while (((*((void *)*v38 + (v24 >> 6)) >> v24) & 1) == 0)
        {
          int v25 = *v22++;
          v24 += v25;
          if (!v25)
          {
            if (((*(void *)(*(void *)(*(void *)(a1 + 248) + 352) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) == 0) {
              goto LABEL_41;
            }
            break;
          }
        }
LABEL_64:
        llvm::LiveRegUnits::stepBackward(v10, (const llvm::MachineInstr *)v12);
LABEL_65:
        unint64_t v12 = v29;
      }
      while ((void *)v29 != v11);
LABEL_66:
      uint64_t v9 = *(const llvm::MachineBasicBlock **)v9;
      if (v9 == v36)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 280);
        char v34 = v37;
        if (v6) {
          goto LABEL_68;
        }
        return v34 & 1;
      }
    }
  }
  char v34 = 0;
  if (v6) {
LABEL_68:
  }
    bzero(*v38, 8 * v6);
  return v34 & 1;
}

void sub_1CC28E2C0()
{
}

void sub_1CC28E358()
{
}

void sub_1CC28E430(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B158;
  uint64_t v2 = *(void **)(a1 + 392);
  if (v2 != (void *)(a1 + 408)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 320);
  if (v3 != (void *)(a1 + 336)) {
    free(v3);
  }
  sub_1CC28F5F0((void **)(a1 + 272));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4 != (void *)(a1 + 192)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5 != (void *)(a1 + 120)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6 != (void *)(a1 + 48)) {
    free(v6);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC28E514(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B158;
  uint64_t v2 = *(void **)(a1 + 392);
  if (v2 != (void *)(a1 + 408)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 320);
  if (v3 != (void *)(a1 + 336)) {
    free(v3);
  }
  sub_1CC28F5F0((void **)(a1 + 272));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4 != (void *)(a1 + 192)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5 != (void *)(a1 + 120)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6 != (void *)(a1 + 48)) {
    free(v6);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC28E60C()
{
  return "Detect Dead Lanes";
}

void sub_1CC28E61C(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC28E690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 40);
  *(void *)(a1 + 248) = v2;
  if (v2[16])
  {
    *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(*(void *)v2 + 16) + 176))(*(void *)(*(void *)v2 + 16));
    operator new[]();
  }
  return 0;
}

void **sub_1CC28F5F0(void **a1)
{
  sub_1CD511B2C(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

BOOL sub_1CC28F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v5 = *(void *)(a2 + 16 * (a5[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == a4) {
    return 0;
  }
  uint64_t v9 = (*a5 >> 8) & 0xFFF;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
  uint64_t v11 = (void *)v10;
  int v12 = **(unsigned __int16 **)(a3 + 16);
  if (v12 == 8)
  {
    uint64_t v16 = *(void *)(a3 + 32);
    if (*(_DWORD *)(v16 + 80))
    {
      if (!v9)
      {
        uint64_t v9 = *(unsigned int *)(v16 + 80);
        goto LABEL_27;
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 208))(v10);
    }
    goto LABEL_11;
  }
  if (v12 == 18)
  {
    int v14 = (unsigned int *)(*(void *)(a3 + 32)
                         + 32 * ((((unint64_t)a5 - *(void *)(a3 + 32)) >> 5) + 1)
                         + 16);
    goto LABEL_20;
  }
  if (v12 != 9 || (uint64_t v13 = *(void *)(a3 + 32), (((unint64_t)a5 - v13) & 0x1FFFFFFFE0) != 0x40))
  {
LABEL_11:
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
  int v14 = (unsigned int *)(v13 + 112);
LABEL_20:
  uint64_t v24 = *v14;
  uint64_t v25 = 0;
  if (!v9 || !v24)
  {
    if (!v9)
    {
      if (v24)
      {
        CommonSuperRegClass = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v10 + 184))(v10, a4, v5, v24);
        return CommonSuperRegClass == 0;
      }
LABEL_12:
      CommonSuperRegClass = 0;
      if (a4 && v5)
      {
        uint64_t v18 = v11[30];
        unint64_t v19 = (unint64_t)(v11[31] - v18) >> 3;
        if (v19)
        {
          unsigned int v20 = 0;
          BOOL v21 = *(_DWORD **)(a4 + 8);
          for (uint64_t i = *(_DWORD **)(v5 + 8); ; ++i)
          {
            unsigned int v23 = *v21 & *i;
            if (v23) {
              break;
            }
            CommonSuperRegClass = 0;
            ++v21;
            v20 += 32;
            if (v20 >= v19) {
              return CommonSuperRegClass == 0;
            }
          }
          CommonSuperRegClass = *(uint64_t **)(v18 + 8 * (__clz(__rbit32(v23)) + v20));
        }
        else
        {
          CommonSuperRegClass = 0;
        }
      }
      return CommonSuperRegClass == 0;
    }
LABEL_27:
    CommonSuperRegClass = (uint64_t *)(*(uint64_t (**)(void *, unint64_t, uint64_t, uint64_t))(*v11 + 184))(v11, v5, a4, v9);
    return CommonSuperRegClass == 0;
  }
  CommonSuperRegClass = llvm::TargetRegisterInfo::getCommonSuperRegClass(v10, v5, v9, a4, v24, (unsigned int *)&v25 + 1, (unsigned int *)&v25);
  return CommonSuperRegClass == 0;
}

uint64_t sub_1CC28F8AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  unsigned int v7 = **(unsigned __int16 **)(v6 + 16);
  if (v7 <= 8)
  {
    if (**(_WORD **)(v6 + 16))
    {
      uint64_t v10 = *(unsigned int *)(*(void *)(v6 + 32) + 80);
      if (v10) {
        a4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 224))(*(void *)(a1 + 256), v10, a4);
      }
    }
  }
  else
  {
    if (v7 == 9)
    {
      uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 112);
      uint64_t v9 = v8;
      if (a3 != 2)
      {
        a4 &= ~*(void *)(*(void *)(*(void *)(a1 + 256) + 232) + 8 * v8);
        return *(void *)((*(void *)(*(void *)(*(void *)(a1 + 248) + 24)
                                      + 16 * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                         + 24) & a4;
      }
    }
    else
    {
      if (v7 == 19) {
        return *(void *)((*(void *)(*(void *)(*(void *)(a1 + 248) + 24)
      }
                                      + 16 * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                         + 24) & a4;
      uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 32 * (a3 + 1) + 16);
      uint64_t v9 = v8;
    }
    if (v8) {
      a4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 216))(*(void *)(a1 + 256), v8, a4);
    }
    a4 &= *(void *)(*(void *)(*(void *)(a1 + 256) + 232) + 8 * v9);
  }
  return *(void *)((*(void *)(*(void *)(*(void *)(a1 + 248) + 24) + 16 * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                   + 24) & a4;
}

void sub_1CC28F9E8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v5 = *(void **)(a1 + 8);
    uint64_t v6 = *(char **)(a1 + 16);
    uint64_t v9 = *v5;
    unsigned int v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    *(void *)(a1 + 8) = v7;
    if (v6 == *(char **)(a1 + 24))
    {
      uint64_t v10 = *(char **)a1;
      if ((unint64_t)v7 <= *(void *)a1)
      {
        if (v6 == v10) {
          unint64_t v17 = 1;
        }
        else {
          unint64_t v17 = (v6 - v10) >> 2;
        }
        if (v17 >> 61) {
          goto LABEL_38;
        }
        uint64_t v18 = (char *)operator new(8 * v17);
        unint64_t v19 = &v18[8 * (v17 >> 2)];
        uint64_t v21 = v6 - v7;
        BOOL v20 = v6 == v7;
        uint64_t v6 = v19;
        if (!v20)
        {
          uint64_t v6 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v22 = 8 * (v21 >> 3);
          unsigned int v23 = &v18[8 * (v17 >> 2)];
          do
          {
            uint64_t v24 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v23 = v24;
            v23 += 8;
            v22 -= 8;
          }
          while (v22);
        }
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v6;
        *(void *)(a1 + 24) = &v18[8 * v17];
        if (v10)
        {
          operator delete(v10);
          uint64_t v6 = *(char **)(a1 + 16);
        }
      }
      else
      {
        uint64_t v11 = (uint64_t)&v7[-*(void *)a1] >> 3;
        if (v11 >= -1) {
          uint64_t v12 = v11 + 1;
        }
        else {
          uint64_t v12 = v11 + 2;
        }
        uint64_t v13 = -(v12 >> 1);
        uint64_t v14 = v12 >> 1;
        uint64_t v15 = &v7[-8 * v14];
        size_t v16 = v6 - v7;
        if (v16)
        {
          memmove(&v7[-8 * v14], v7, v16);
          unsigned int v7 = *(char **)(a1 + 8);
        }
        uint64_t v6 = &v15[v16];
        *(void *)(a1 + 8) = &v7[8 * v13];
        *(void *)(a1 + 16) = v6;
      }
    }
    *(void *)uint64_t v6 = v8;
    *(void *)(a1 + 16) += 8;
    return;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  unint64_t v26 = v25 - *(void *)(a1 + 8);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = v27 - *(void *)a1;
  if (v26 < v28)
  {
    if (v27 == v25)
    {
      *(void *)&long long v38 = operator new(0x1000uLL);
      sub_1CD4A5618((const void **)a1, &v38);
      unint64_t v29 = *(void **)(a1 + 8);
      *(void *)&long long v38 = *v29;
      *(void *)(a1 + 8) = v29 + 1;
      sub_1CB904CD8(a1, &v38);
    }
    else
    {
      *(void *)&long long v38 = operator new(0x1000uLL);
      sub_1CD4A54E0(a1, &v38);
    }
    return;
  }
  if (v27 == *(void *)a1) {
    unint64_t v30 = 1;
  }
  else {
    unint64_t v30 = v28 >> 2;
  }
  uint64_t v40 = a1 + 24;
  if (v30 >> 61) {
LABEL_38:
  }
    sub_1CB833614();
  *(void *)&long long v38 = operator new(8 * v30);
  *((void *)&v38 + 1) = v38 + v26;
  *(void *)&long long v39 = v38 + v26;
  *((void *)&v39 + 1) = v38 + 8 * v30;
  char v37 = operator new(0x1000uLL);
  sub_1CD4A54E0((uint64_t)&v38, &v37);
  BOOL v31 = *(char **)(a1 + 16);
  if (v31 == *(char **)(a1 + 8))
  {
    uint64_t v32 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v31 -= 8;
      sub_1CD4A5618((const void **)&v38, v31);
    }
    while (v31 != *(char **)(a1 + 8));
    uint64_t v32 = *(char **)(a1 + 16);
  }
  uint64_t v33 = *(char **)a1;
  long long v34 = v38;
  long long v35 = v39;
  *(void *)&long long v38 = *(void *)a1;
  *((void *)&v38 + 1) = v31;
  uint64_t v36 = *(void *)(a1 + 24);
  *(_OWORD *)a1 = v34;
  *(_OWORD *)(a1 + 16) = v35;
  *(void *)&long long v39 = v32;
  *((void *)&v39 + 1) = v36;
  if (v32 != v31) {
    *(void *)&long long v39 = &v32[(v31 - v32 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v33) {
    operator delete(v33);
  }
}

uint64_t sub_1CC28FC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned int v7 = **(unsigned __int16 **)(a2 + 16);
  if (v7 <= 8)
  {
    if (**(_WORD **)(a2 + 16) && *(_DWORD *)(v6 + 80))
    {
      uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 256) + 216);
      return v9();
    }
    return a3;
  }
  unint64_t v8 = a4 - v6;
  if (v7 != 9)
  {
    if (v7 != 19 && *(_DWORD *)(v6 + 32 * ((v8 >> 5) + 1) + 16))
    {
      uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 256) + 224);
      return v9();
    }
    return a3;
  }
  uint64_t v12 = *(void *)(v6 + 112);
  uint64_t result = a3;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 224))(*(void *)(a1 + 256), v12, a3);
  }
  if ((v8 & 0x1FFFFFFFE0) != 0x40)
  {
    unint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 248) + 24)
                    + 16 * (*(_DWORD *)(*(void *)(a2 + 32) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    if (*(unsigned char *)(v13 + 35)) {
      return a3 & ~*(void *)(*(void *)(*(void *)(a1 + 256) + 232) + 8 * v12);
    }
    else {
      return *(void *)(v13 + 24);
    }
  }
  return result;
}

uint64_t sub_1CC28FE04(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void **)(*(void *)a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *a2;
  uint64_t v6 = *(void *)a1 + 8;
  do
  {
    unint64_t v7 = v2[4];
    if (v7 >= v4)
    {
      if (v4 >= v7)
      {
        if (v2[5] < v5) {
          ++v2;
        }
        else {
          uint64_t v6 = (uint64_t)v2;
        }
      }
      else
      {
        uint64_t v6 = (uint64_t)v2;
      }
    }
    else
    {
      ++v2;
    }
    unint64_t v2 = (void *)*v2;
  }
  while (v2);
  if (v6 == *(void *)a1 + 8) {
    return 0;
  }
  unint64_t v8 = *(void *)(v6 + 32);
  if (v4 < v8 || v8 >= v4 && v5 < *(void *)(v6 + 40)) {
    return 0;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 16);
  if (v10 && *(unsigned char *)(a1 + 40))
  {
    uint64_t v11 = *(unsigned int *)(v6 + 56);
    uint64_t v12 = *v10;
    LODWORD(v13) = -1;
    do
      unint64_t v13 = (v13 + 1);
    while (*(void *)(v12 + 16 * (v13 + v11) + 8));
    sub_1CD511F64((uint64_t)v10, (void *)(v12 + 16 * v11), v13);
  }
  *(void *)(a1 + 32) = *(void *)(v6 + 48);
  return 1;
}

BOOL llvm::DFAPacketizer::canReserveResources(llvm::DFAPacketizer *this, llvm::MachineInstr *a2)
{
  if (*(_WORD *)(*((void *)a2 + 2) + 6)) {
    BOOL v2 = *(_DWORD *)(*((void *)this + 7) + 4 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6)) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)(*((void *)this + 7) + 4 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6));
  return sub_1CD511BF8((void *)this + 1, &v4);
}

uint64_t llvm::DFAPacketizer::reserveResources(uint64_t this, llvm::MachineInstr *a2)
{
  if (*(_WORD *)(*((void *)a2 + 2) + 6)) {
    BOOL v2 = *(_DWORD *)(*(void *)(this + 56) + 4 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6)) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    unint64_t v3 = *(unsigned int *)(*(void *)(this + 56) + 4 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6));
    return sub_1CC28FE04(this + 8, &v3);
  }
  return this;
}

uint64_t llvm::DFAPacketizer::getUsedResources(llvm::DFAPacketizer *this, unsigned int a2)
{
  v33[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 3);
  unint64_t v4 = (unint64_t *)(v3 + 160);
  uint64_t v5 = *(void *)(v3 + 160);
  uint64_t v6 = *(unsigned int *)(v3 + 168);
  if (v6)
  {
    uint64_t v7 = 48 * v6;
    do
    {
      unint64_t v8 = *(void **)(v5 + v7 - 48);
      if ((void *)(v5 + v7 - 32) != v8) {
        free(v8);
      }
      v7 -= 48;
    }
    while (v7);
  }
  *(_DWORD *)(v3 + 168) = 0;
  uint64_t v9 = *(void *)(v3 + 120);
  if (*(void *)(v3 + 128) != v9)
  {
    unint64_t v10 = *(void *)(v3 + 144);
    uint64_t v11 = (void *)(v9 + 8 * (v10 >> 9));
    uint64_t v12 = (uint64_t **)(*v11 + 8 * (v10 & 0x1FF));
    uint64_t v13 = *(void *)(v9 + (((*(void *)(v3 + 152) + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(v3 + 152) + v10) & 0x1FF);
    while (v12 != (uint64_t **)v13)
    {
      uint64_t v14 = *v12;
      BOOL v31 = v33;
      uint64_t v32 = 0x400000000;
      uint64_t v15 = *v14;
      if (*v14)
      {
        unsigned int v16 = 0;
        do
        {
          if (v16 >= HIDWORD(v32)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v31 + v16) = v15;
          unsigned int v16 = v32 + 1;
          LODWORD(v32) = v32 + 1;
          uint64_t v14 = (uint64_t *)v14[1];
          uint64_t v15 = *v14;
        }
        while (*v14);
        unint64_t v17 = (char *)v31 + 8 * v16 - 8;
        if (v16) {
          BOOL v18 = v31 >= v17;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18)
        {
          unint64_t v19 = (char *)v31 + 8;
          do
          {
            uint64_t v20 = *((void *)v19 - 1);
            *((void *)v19 - 1) = *(void *)v17;
            *(void *)unint64_t v17 = v20;
            v17 -= 8;
            BOOL v18 = v19 >= v17;
            v19 += 8;
          }
          while (!v18);
        }
      }
      uint64_t v21 = *(unsigned int *)(v3 + 168);
      unint64_t v22 = *(void *)(v3 + 160);
      if (v21 >= *(_DWORD *)(v3 + 172))
      {
        unint64_t v26 = v21 + 1;
        BOOL v27 = v22 + 48 * v21 > (unint64_t)&v31;
        if (v22 <= (unint64_t)&v31 && v27)
        {
          uint64_t v28 = (char *)&v31 - v22;
          sub_1CC2917E4((uint64_t)v4, v26);
          unint64_t v22 = *v4;
          unsigned int v23 = (void **)&v28[*v4];
          goto LABEL_23;
        }
        sub_1CC2917E4((uint64_t)v4, v26);
        unint64_t v22 = *v4;
      }
      unsigned int v23 = &v31;
LABEL_23:
      uint64_t v24 = (void *)(v22 + 48 * *(unsigned int *)(v3 + 168));
      *uint64_t v24 = v24 + 2;
      v24[1] = 0x400000000;
      if (*((_DWORD *)v23 + 2)) {
        sub_1CD41C56C((uint64_t)v24, (uint64_t)v23);
      }
      ++*(_DWORD *)(v3 + 168);
      if (v31 != v33) {
        free(v31);
      }
      if ((uint64_t **)((char *)++v12 - *v11) == (uint64_t **)4096)
      {
        uint64_t v25 = (uint64_t **)v11[1];
        ++v11;
        uint64_t v12 = v25;
      }
    }
  }
  unint64_t v29 = *v4;
  if (a2) {
    return *(void *)(*(void *)v29 + 8 * (a2 - 1)) ^ *(void *)(*(void *)v29 + 8 * a2);
  }
  else {
    return **(void **)v29;
  }
}

llvm::ScheduleDAGInstrs *llvm::DefaultVLIWScheduler::DefaultVLIWScheduler(llvm::DefaultVLIWScheduler *this, const llvm::TargetSubtargetInfo **a2, llvm::MachineLoopInfo *a3, llvm::AAResults *a4)
{
  uint64_t result = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(this, a2, a3, 0);
  *(void *)uint64_t result = &unk_1F260B218;
  *((void *)result + 329) = a4;
  *((void *)result + 330) = 0;
  *((void *)result + 332) = 0;
  *((void *)result + 331) = 0;
  *((unsigned char *)result + 913) = 1;
  return result;
}

{
  llvm::ScheduleDAGInstrs *result;

  uint64_t result = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(this, a2, a3, 0);
  *(void *)uint64_t result = &unk_1F260B218;
  *((void *)result + 329) = a4;
  *((void *)result + 330) = 0;
  *((void *)result + 332) = 0;
  *((void *)result + 331) = 0;
  *((unsigned char *)result + 913) = 1;
  return result;
}

uint64_t llvm::DefaultVLIWScheduler::postprocessDAG(uint64_t this)
{
  unint64_t v1 = *(uint64_t **)(this + 2640);
  BOOL v2 = *(uint64_t **)(this + 2648);
  if (v1 != v2)
  {
    uint64_t v3 = this;
    do
    {
      uint64_t v4 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v3);
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t llvm::DefaultVLIWScheduler::schedule(llvm::AAResults **this)
{
  uint64_t result = llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)this, this[329], 0, 0, 0, 0);
  uint64_t v3 = this[330];
  uint64_t v4 = this[331];
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)v3;
    uint64_t v3 = (llvm::AAResults *)((char *)v3 + 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, llvm::AAResults **))(*(void *)v5 + 24))(v5, this);
  }
  return result;
}

void llvm::VLIWPacketizerList::VLIWPacketizerList(llvm::VLIWPacketizerList *this, llvm::MachineFunction *a2, llvm::MachineLoopInfo *a3, llvm::AAResults *a4)
{
  *(void *)this = &unk_1F260B2A8;
  *((void *)this + 1) = a2;
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 104))(*((void *)a2 + 2));
  *((void *)this + 2) = v6;
  *((void *)this + 3) = a4;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 1056))();
  *((void *)this + 8) = v7;
  *(unsigned char *)(v7 + 48) = 1;
  operator new();
}

void llvm::VLIWPacketizerList::~VLIWPacketizerList(llvm::VLIWPacketizerList *this)
{
  *(void *)this = &unk_1F260B2A8;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    sub_1CD511CE4(v3 + 8);
    MEMORY[0x1D25D9CE0](v3, 0x1070C405C112D20);
  }
  sub_1CBB0D544(*((void **)this + 10));
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  llvm::VLIWPacketizerList::~VLIWPacketizerList(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::VLIWPacketizerList::endPacket(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)a1[5];
  if (a1[6] - (void)v4 >= 9uLL)
  {
    llvm::finalizeBundle(a2, *v4, a3);
    uint64_t v4 = (uint64_t *)a1[5];
  }
  a1[6] = v4;
  uint64_t v5 = a1[8];
  *(void *)(v5 + 40) = 1;
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6)
  {
    sub_1CD511D98(v6);
  }
}

uint64_t llvm::VLIWPacketizerList::PacketizeMIs(void **a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  (*(void (**)(void *))(*a1[4] + 80))(a1[4]);
  if (a3 == a4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    LODWORD(v8) = 0;
    unint64_t v9 = a3;
    do
    {
      if (!v9 || (*(unsigned char *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 8) != 0)
          unint64_t v9 = *(void *)(v9 + 8);
      }
      uint64_t v8 = (v8 + 1);
      unint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != a4);
  }
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t, uint64_t))(*a1[4] + 96))(a1[4], a2, a3, a4, v8);
  (*(void (**)(void *))(*a1[4] + 112))(a1[4]);
  sub_1CBB0D544(a1[10]);
  a1[9] = a1 + 10;
  unint64_t v10 = a1 + 9;
  a1[10] = 0;
  a1[11] = 0;
  uint64_t v11 = a1[4];
  uint64_t v12 = (uint64_t *)v11[6];
  uint64_t v13 = (uint64_t *)v11[7];
  while (v12 != v13)
  {
    long long v34 = (uint64_t *)v12[1];
    sub_1CD508D28(a1 + 9, (unint64_t)v34, &v34)[5] = v12;
    v12 += 34;
  }
  if (a3 != a4)
  {
    int v14 = (unsigned __int16)word_1EBCCB1E4;
    uint64_t v15 = &byte_1EBCCB000;
    do
    {
      if (v14)
      {
        if (dword_1EBCCB1D0 >= dword_1EBCCB258) {
          goto LABEL_52;
        }
        *((_DWORD *)v15 + 116) = dword_1EBCCB1D0 + 1;
      }
      ((void (*)(void **))(*a1)[4])(a1);
      if (((unsigned int (*)(void **, unint64_t))(*a1)[6])(a1, a3))
      {
        ((void (*)(void **, uint64_t, unint64_t))(*a1)[3])(a1, a2, a3);
      }
      else if ((((uint64_t (*)(void **, unint64_t, uint64_t))(*a1)[5])(a1, a3, a2) & 1) == 0)
      {
        long long v34 = (uint64_t *)a3;
        unsigned int v16 = sub_1CD508D28(a1 + 9, a3, &v34);
        unint64_t v17 = a1[8];
        if (*(_WORD *)(*(void *)(a3 + 16) + 6)) {
          BOOL v18 = *(_DWORD *)(v17[7] + 4 * *(unsigned __int16 *)(*(void *)(a3 + 16) + 6)) == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18
          && (uint64_t v33 = v16[5],
              long long v34 = (uint64_t *)*(unsigned int *)(v17[7] + 4 * *(unsigned __int16 *)(*(void *)(a3 + 16) + 6)),
              BOOL v19 = sub_1CD511BF8(v17 + 1, (unint64_t *)&v34),
              v19 && ((unsigned int (*)(void **, unint64_t))(*a1)[7])(a1, a3)))
        {
          uint64_t v21 = (uint64_t **)a1[5];
          uint64_t v20 = (uint64_t **)a1[6];
          BOOL v31 = v20;
          while (v21 != v20)
          {
            unint64_t v22 = *v21;
            unsigned int v23 = a1 + 10;
            while (1)
            {
              uint64_t v24 = *v23;
              uint64_t v25 = v23;
              if (!*v23) {
                break;
              }
              while (1)
              {
                unsigned int v23 = (uint64_t **)v24;
                unint64_t v26 = v24[4];
                if (v26 > (unint64_t)v22) {
                  break;
                }
                if (v26 >= (unint64_t)v22) {
                  goto LABEL_49;
                }
                uint64_t v24 = v23[1];
                if (!v24)
                {
                  uint64_t v25 = v23 + 1;
                  goto LABEL_46;
                }
              }
            }
LABEL_46:
            uint64_t v32 = (uint64_t *)v23;
            unsigned int v23 = (uint64_t **)operator new(0x30uLL);
            v23[4] = v22;
            v23[5] = 0;
            *unsigned int v23 = 0;
            v23[1] = 0;
            v23[2] = v32;
            *uint64_t v25 = (uint64_t *)v23;
            BOOL v27 = (void *)**v10;
            uint64_t v28 = (uint64_t *)v23;
            if (v27)
            {
              *unint64_t v10 = v27;
              uint64_t v28 = *v25;
            }
            sub_1CB8358B8(a1[10], v28);
            a1[11] = (void *)((char *)a1[11] + 1);
LABEL_49:
            unint64_t v29 = v23[5];
            uint64_t v15 = &byte_1EBCCB000;
            if ((((uint64_t (*)(void **, uint64_t *, uint64_t *))(*a1)[8])(a1, v33, v29) & 1) == 0
              && !((unsigned int (*)(void **, uint64_t *, uint64_t *))(*a1)[9])(a1, v33, v29))
            {
              goto LABEL_27;
            }
            ++v21;
            uint64_t v20 = v31;
          }
        }
        else
        {
LABEL_27:
          ((void (*)(void **, uint64_t, unint64_t))(*a1)[3])(a1, a2, a3);
        }
        a3 = ((uint64_t (*)(void **, unint64_t))(*a1)[2])(a1, a3);
      }
      if (!a3 || (*(unsigned char *)a3 & 4) == 0)
      {
        while ((*(_WORD *)(a3 + 44) & 8) != 0)
          a3 = *(void *)(a3 + 8);
      }
      a3 = *(void *)(a3 + 8);
    }
    while (a3 != a4);
    a3 = a4;
  }
LABEL_52:
  ((void (*)(void **, uint64_t, unint64_t))(*a1)[3])(a1, a2, a3);
  (*(void (**)(void *))(*a1[4] + 104))(a1[4]);
  return (*(uint64_t (**)(void *))(*a1[4] + 88))(a1[4]);
}

BOOL llvm::VLIWPacketizerList::alias(llvm::VLIWPacketizerList *this, const llvm::MachineMemOperand *a2, const llvm::MachineMemOperand *a3, int a4)
{
  if (*(void *)a2 < 8uLL || (*(void *)a2 & 4) != 0) {
    return 1;
  }
  if (*(void *)a3 < 8uLL || (*(void *)a3 & 4) != 0) {
    return 1;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (*((void *)a3 + 1) >= v11) {
    uint64_t v12 = *((void *)a2 + 1);
  }
  else {
    uint64_t v12 = *((void *)a3 + 1);
  }
  if ((*((void *)a2 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v14 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)a2 + 3) + 7) >> 3;
    if (v13 == 1) {
    uint64_t v11 = *((void *)a2 + 1);
    }
  }
  else
  {
    unint64_t v14 = -1;
  }
  unint64_t v15 = v14 - v12 + v11;
  if ((*((void *)a3 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v17 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)a3 + 3) + 7) >> 3;
    if (v16 == 1)
    {
      unint64_t v30 = v17;
      unint64_t v17 = v30;
    }
  }
  else
  {
    unint64_t v17 = -1;
  }
  uint64_t v18 = *(void *)a3;
  unint64_t v19 = v17 - v12 + *((void *)a3 + 1);
  uint64_t v20 = *((void *)this + 3);
  if ((*(void *)a2 & 4) != 0) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v15 <= 0x7FFFFFFFFFFFFFFBLL) {
    uint64_t v22 = v15;
  }
  else {
    uint64_t v22 = -2;
  }
  if (a4) {
    unint64_t v23 = -1;
  }
  else {
    unint64_t v23 = 0;
  }
  int8x16_t v24 = (int8x16_t)vdupq_n_s64(v23);
  int8x16_t v25 = vandq_s8(*(int8x16_t *)((char *)a2 + 40), v24);
  int8x16_t v26 = vandq_s8(*(int8x16_t *)((char *)a2 + 56), v24);
  v34[0] = v21;
  v34[1] = v22;
  int8x16_t v35 = v25;
  int8x16_t v36 = v26;
  unint64_t v27 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 4) != 0) {
    unint64_t v27 = 0;
  }
  if (v19 > 0x7FFFFFFFFFFFFFFBLL) {
    unint64_t v19 = -2;
  }
  int8x16_t v28 = vandq_s8(*(int8x16_t *)((char *)a3 + 40), v24);
  int8x16_t v29 = vandq_s8(*(int8x16_t *)((char *)a3 + 56), v24);
  v31[0] = v27;
  v31[1] = v19;
  int8x16_t v32 = v28;
  int8x16_t v33 = v29;
  return llvm::AAResults::alias(v20, (uint64_t)v34, (uint64_t)v31) != 0;
}

uint64_t llvm::VLIWPacketizerList::alias(llvm::VLIWPacketizerList *this, const llvm::MachineInstr *a2, const llvm::MachineInstr *a3, int a4)
{
  uint64_t v5 = (unint64_t *)((char *)a2 + 48);
  unint64_t v4 = *((void *)a2 + 6);
  if (v4 < 8) {
    return 1;
  }
  if ((v4 & 7) != 0)
  {
    uint64_t v8 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    BOOL v9 = (*((void *)a2 + 6) & 7) != 3 || v8 == 0;
    if (v9 || !*v8) {
      return 1;
    }
  }
  else
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
    *uint64_t v5 = v4;
  }
  uint64_t v11 = (unint64_t *)((char *)a3 + 48);
  unint64_t v10 = *((void *)a3 + 6);
  if (v10 < 8) {
    return 1;
  }
  if ((v10 & 7) != 0)
  {
    uint64_t result = 1;
    if ((*((void *)a3 + 6) & 7) != 3) {
      return result;
    }
    uint64_t v13 = (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if (!v13 || !*v13) {
      return result;
    }
  }
  else
  {
    *uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = *v5;
  }
  if (v4 < 8) {
    return 0;
  }
  if ((v4 & 7) == 0)
  {
    *((void *)a2 + 6) = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (unint64_t *)((char *)a2 + 56);
    goto LABEL_25;
  }
  uint64_t result = 0;
  if ((v4 & 7) != 3) {
    return result;
  }
  unint64_t v14 = (int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0) {
    return result;
  }
  uint64_t v16 = *v14;
  uint64_t v5 = (unint64_t *)(v14 + 2);
  uint64_t v15 = v16;
  if (!v16) {
    return 0;
  }
  unint64_t v17 = &v5[v15];
LABEL_25:
  uint64_t v18 = (const llvm::MachineMemOperand **)((char *)a3 + 56);
  while (1)
  {
    unint64_t v19 = *v11;
    if (*v11 >= 8) {
      break;
    }
LABEL_37:
    uint64_t result = 0;
    if (++v5 == v17) {
      return result;
    }
  }
  uint64_t v20 = (const llvm::MachineMemOperand *)*v5;
  if ((v19 & 7) != 0)
  {
    unint64_t v21 = (int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((*v11 & 7) == 3 && v21 != 0)
    {
      uint64_t v25 = *v21;
      int8x16_t v24 = (const llvm::MachineMemOperand **)(v21 + 2);
      uint64_t v23 = v25;
      if (v25)
      {
        int8x16_t v26 = &v24[v23];
        goto LABEL_35;
      }
    }
    goto LABEL_37;
  }
  *uint64_t v11 = v19 & 0xFFFFFFFFFFFFFFF8;
  int8x16_t v26 = v18;
  int8x16_t v24 = (const llvm::MachineMemOperand **)v11;
LABEL_35:
  while (!llvm::VLIWPacketizerList::alias(this, v20, *v24, a4))
  {
    if (++v24 == v26) {
      goto LABEL_37;
    }
  }
  return 1;
}

uint64_t llvm::VLIWPacketizerList::addMutation(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(int64x2_t **)(result + 32);
  uint64_t v3 = *a2;
  *a2 = 0;
  unint64_t v4 = (void *)v2[165].i64[1];
  unint64_t v5 = v2[166].u64[0];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (void *)v2[165].i64[0];
    uint64_t v8 = v4 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    if ((uint64_t)(v5 - (void)v7) >> 2 > v9) {
      unint64_t v9 = (uint64_t)(v5 - (void)v7) >> 2;
    }
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t v19 = v2 + 166;
    if (v10)
    {
      if (v10 >> 61) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * v8];
    *(void *)uint64_t v12 = v3;
    uint64_t v13 = &v11[8 * v10];
    v17.i64[1] = (uint64_t)(v12 + 8);
    uint64_t v18 = v13;
    if (v4 == v7)
    {
      int64x2_t v15 = vdupq_n_s64((unint64_t)v4);
      uint64_t v6 = v12 + 8;
    }
    else
    {
      do
      {
        uint64_t v14 = *--v4;
        *unint64_t v4 = 0;
        *((void *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v4 != v7);
      int64x2_t v15 = v2[165];
      uint64_t v6 = (void *)v17.i64[1];
      uint64_t v13 = v18;
      unint64_t v5 = v2[166].u64[0];
    }
    v2[165].i64[0] = (uint64_t)v12;
    v2[165].i64[1] = (uint64_t)v6;
    int64x2_t v17 = v15;
    v2[166].i64[0] = (uint64_t)v13;
    uint64_t v18 = (char *)v5;
    uint64_t v16 = v15.i64[0];
    uint64_t result = sub_1CB8FC240((uint64_t)&v16);
  }
  else
  {
    *unint64_t v4 = v3;
    uint64_t v6 = v4 + 1;
  }
  v2[165].i64[1] = (uint64_t)v6;
  return result;
}

void sub_1CC290FFC(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B218;
  uint64_t v2 = (void **)(a1 + 2640);
  sub_1CC291398(&v2);
  sub_1CC29121C(a1);
}

uint64_t sub_1CC291058(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B218;
  uint64_t v3 = (void **)(a1 + 2640);
  sub_1CC291398(&v3);
  sub_1CC29121C(a1);
  return MEMORY[0x1D25D9CE0]();
}

uint64_t sub_1CC2910C8(void *a1, uint64_t a2)
{
  unint64_t v5 = (void *)a1[6];
  unint64_t v4 = a1[7];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      unint64_t v5 = (void *)a1[5];
    }
    a1[5] = v13;
    a1[6] = v6;
    a1[7] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[6] = v6;
  uint64_t v15 = a1[8];
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(a2 + 16) + 6);
  if (*(_WORD *)(*(void *)(a2 + 16) + 6)) {
    BOOL v17 = *(_DWORD *)(*(void *)(v15 + 56) + 4 * v16) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    unint64_t v19 = *(unsigned int *)(*(void *)(v15 + 56) + 4 * v16);
    sub_1CC28FE04(v15 + 8, &v19);
  }
  return a2;
}

uint64_t sub_1CC2911F4()
{
  return 0;
}

uint64_t sub_1CC2911FC()
{
  return 1;
}

uint64_t sub_1CC291204()
{
  return 1;
}

uint64_t sub_1CC29120C()
{
  return 0;
}

uint64_t sub_1CC291214()
{
  return 0;
}

void sub_1CC29121C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2612D78;
  free(*(void **)(a1 + 2616));
  uint64_t v2 = *(void **)(a1 + 2576);
  if (v2 != (void *)(a1 + 2600)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 2536);
  if (v3)
  {
    *(void *)(a1 + 2544) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 2464);
  if (v4 != (void *)(a1 + 2480)) {
    free(v4);
  }
  unint64_t v5 = *(void **)(a1 + 2440);
  if (v5)
  {
    *(void *)(a1 + 2448) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 2416);
  if (v6)
  {
    *(void *)(a1 + 2424) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 2144);
  if (v7 != (void *)(a1 + 2160)) {
    free(v7);
  }
  free(*(void **)(a1 + 2072));
  uint64_t v8 = *(void **)(a1 + 1736);
  if (v8 != (void *)(a1 + 1752)) {
    free(v8);
  }
  free(*(void **)(a1 + 1712));
  unint64_t v9 = *(void **)(a1 + 1440);
  if (v9 != (void *)(a1 + 1456)) {
    free(v9);
  }
  free(*(void **)(a1 + 1416));
  uint64_t v10 = *(void **)(a1 + 1208);
  if (v10 != (void *)(a1 + 1224)) {
    free(v10);
  }
  free(*(void **)(a1 + 1184));
  unint64_t v11 = *(void **)(a1 + 976);
  if (v11 != (void *)(a1 + 992)) {
    free(v11);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 952), 8);
  uint64_t v12 = *(void **)(a1 + 824);
  if (v12 != (void *)(a1 + 840)) {
    free(v12);
  }

  llvm::ScheduleDAG::~ScheduleDAG((llvm::ScheduleDAG *)a1);
}

void sub_1CC291398(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC291440(void *a1, char *a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - a2) << 6) - ((uint64_t)&a3[-*(void *)a2] >> 3);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = (char **)(v8 + 8 * (v7 >> 9));
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (uint64_t)&(*v10)[8 * (a1[4] & 0x1FFLL)];
  }
  if (a3 == (char *)v11)
  {
    unint64_t v13 = 0;
LABEL_13:
    uint64_t v14 = (char **)(v8 + 8 * (v7 >> 9));
    goto LABEL_14;
  }
  uint64_t v12 = ((uint64_t)&a3[-*(void *)a2] >> 3) + ((a2 - (char *)v10) << 6);
  unint64_t v13 = v12 - ((v11 - (uint64_t)*v10) >> 3);
  if (v12 == (v11 - (uint64_t)*v10) >> 3)
  {
    a3 = (char *)v11;
    goto LABEL_13;
  }
  if (v12 < 1)
  {
    unint64_t v21 = 511 - v12;
    uint64_t v14 = &v10[-(v21 >> 9)];
    a3 = &(*v14)[8 * (~(_WORD)v21 & 0x1FF)];
  }
  else
  {
    uint64_t v14 = &v10[(unint64_t)v12 >> 9];
    a3 = &(*v14)[8 * (v12 & 0x1FF)];
  }
LABEL_14:
  if (v6 >= 1)
  {
    uint64_t v15 = a1[5];
    uint64_t v16 = v6 + ((a3 - *v14) >> 3);
    if (v13 <= (unint64_t)(v15 - v6) >> 1)
    {
      if (v16 < 1)
      {
        uint64_t v18 = &v14[-((unint64_t)(511 - v16) >> 9)];
        unint64_t v19 = *v18;
        uint64_t v20 = ~(511 - (_WORD)v16) & 0x1FF;
      }
      else
      {
        uint64_t v18 = &v14[(unint64_t)v16 >> 9];
        unint64_t v19 = *v18;
        uint64_t v20 = v16 & 0x1FF;
      }
      int8x16_t v28 = &v19[8 * v20];
      if (v10 == v14)
      {
        long long v39 = (char *)v11;
      }
      else
      {
        sub_1CC08ECDC(&v53, *v14, a3, v18, v28);
        int8x16_t v29 = v54;
        unint64_t v30 = v55;
        BOOL v31 = v14 - 1;
        if (v14 - 1 != v10)
        {
          int8x16_t v32 = *(char **)v54;
          do
          {
            int8x16_t v33 = *v31;
            long long v34 = *v31 + 4096;
            while (1)
            {
              uint64_t v35 = v30 - v32;
              if ((v34 - v33) >> 3 >= v35 >> 3) {
                uint64_t v36 = v35 >> 3;
              }
              else {
                uint64_t v36 = (v34 - v33) >> 3;
              }
              v34 -= 8 * v36;
              v30 -= 8 * v36;
              if (v36) {
                memmove(v30, v34, 8 * v36);
              }
              if (v34 == v33) {
                break;
              }
              char v37 = (char *)*((void *)v29 - 1);
              v29 -= 8;
              int8x16_t v32 = v37;
              unint64_t v30 = v37 + 4096;
            }
            int8x16_t v32 = *(char **)v29;
            if ((char *)(*(void *)v29 + 4096) == v30)
            {
              long long v38 = (char *)*((void *)v29 + 1);
              v29 += 8;
              int8x16_t v32 = v38;
              unint64_t v30 = v38;
            }
            --v31;
          }
          while (v31 != v10);
        }
        a3 = *v10 + 4096;
        long long v39 = (char *)v11;
        uint64_t v18 = (char **)v29;
        int8x16_t v28 = v30;
      }
      sub_1CC08ECDC(&v53, v39, a3, v18, v28);
      uint64_t v49 = a1[5] - v6;
      unint64_t v50 = a1[4] + v6;
      a1[4] = v50;
      a1[5] = v49;
      if (v50 >= 0x400)
      {
        uint64_t v51 = (void **)a1[1];
        do
        {
          operator delete(*v51);
          uint64_t v51 = (void **)(a1[1] + 8);
          a1[1] = v51;
          unint64_t v52 = a1[4] - 512;
          a1[4] = v52;
        }
        while (v52 > 0x3FF);
      }
    }
    else
    {
      if (v16 < 1)
      {
        unint64_t v22 = 511 - v16;
        LOWORD(v16) = ~(511 - v16);
        BOOL v17 = &v14[-(v22 >> 9)];
      }
      else
      {
        BOOL v17 = &v14[(unint64_t)v16 >> 9];
      }
      uint64_t v23 = *v17;
      int8x16_t v24 = &(*v17)[8 * (v16 & 0x1FF)];
      unint64_t v25 = v15 + v7;
      int8x16_t v26 = (char **)(v8 + 8 * (v25 >> 9));
      if (v9 == v8) {
        unint64_t v27 = 0;
      }
      else {
        unint64_t v27 = &(*v26)[8 * (v25 & 0x1FF)];
      }
      unint64_t v53 = v14;
      size_t v54 = a3;
      uint64_t v56 = &v53;
      if (v17 != v26)
      {
        sub_1CC08F37C((void ****)&v56, v24, v23 + 4096);
        for (uint64_t i = v17 + 1; i != v26; ++i)
        {
          unint64_t v41 = *i;
          sub_1CC08F37C((void ****)&v56, v41, v41 + 4096);
        }
        int8x16_t v24 = *v26;
      }
      sub_1CC08F37C((void ****)&v56, v24, v27);
      uint64_t v43 = a1[1];
      uint64_t v42 = a1[2];
      if (v42 == v43) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = ((v42 - v43) << 6) - 1;
      }
      uint64_t v45 = a1[4];
      uint64_t v46 = a1[5] - v6;
      a1[5] = v46;
      if ((unint64_t)(v44 - (v46 + v45)) >= 0x400)
      {
        do
        {
          operator delete(*(void **)(v42 - 8));
          uint64_t v47 = a1[1];
          uint64_t v42 = a1[2] - 8;
          a1[2] = v42;
          if (v42 == v47) {
            uint64_t v48 = 0;
          }
          else {
            uint64_t v48 = ((v42 - v47) << 6) - 1;
          }
        }
        while ((unint64_t)(v48 - (a1[5] + a1[4])) > 0x3FF);
      }
    }
  }
}

void sub_1CC2917E4(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(48 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  uint64_t v8 = *(_DWORD **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 48 * v9;
    uint64_t v11 = v6;
    do
    {
      *uint64_t v11 = v11 + 2;
      v11[1] = 0x400000000;
      if (v8[2]) {
        sub_1CD41C56C((uint64_t)v11, (uint64_t)v8);
      }
      v8 += 12;
      v11 += 6;
      v10 -= 48;
    }
    while (v10);
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 12 * v12;
      do
      {
        uint64_t v14 = *(_DWORD **)&v8[v13 - 12];
        if (&v8[v13 - 8] != v14) {
          free(v14);
        }
        v13 -= 12;
      }
      while (v13 * 4);
      uint64_t v8 = *(_DWORD **)a1;
    }
  }
  if (v8 != (_DWORD *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t sub_1CC291934()
{
  int v4 = 1;
  int v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "If present, stops packetizing after N instructions";
  *((void *)&v1 + 1) = 50;
  sub_1CD511E3C(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCCB1D8, &dword_1CB82C000);
}

void sub_1CC2919A8(uint64_t a1)
{
}

void sub_1CC291A58()
{
}

void sub_1CC291AB8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC291AF0()
{
  return "Exception handling preparation";
}

void sub_1CC291B00(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  if (*(_DWORD *)(a1 + 28))
  {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
    sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  }

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC291B98(uint64_t a1, llvm::LLVMContext ***a2)
{
  v92[7] = *MEMORY[0x1E4F143B8];
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::TargetPassConfig::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = *(_DWORD **)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::TargetPassConfig::ID)
                  + 112);
  uint64_t v9 = (*(uint64_t (**)(_DWORD *, llvm::LLVMContext ***))(*(void *)v8 + 16))(v8, a2);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120))(v9);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass) {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  }
  uint64_t v12 = AnalysisPass + 32;
  if (AnalysisPass) {
    uint64_t v13 = AnalysisPass + 32;
  }
  else {
    uint64_t v13 = 0;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v14 = *(uint64_t **)(a1 + 8);
    if (!AnalysisPass)
    {
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      while (1)
      {
        if (v15 == v16)
        {
          uint64_t v18 = 0;
          goto LABEL_20;
        }
        if (*(_UNKNOWN **)v15 == &llvm::DominatorTreeWrapperPass::ID) {
          break;
        }
        v15 += 16;
      }
      uint64_t v18 = *(void *)(v15 + 8);
LABEL_20:
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::DominatorTreeWrapperPass::ID)+ 32;
      uint64_t v14 = *(uint64_t **)(a1 + 8);
    }
    uint64_t v19 = *v14;
    uint64_t v20 = v14[1];
    if (v19 == v20)
    {
LABEL_24:
      uint64_t v21 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v19 != &llvm::TargetTransformInfoWrapperPass::ID)
      {
        v19 += 16;
        if (v19 == v20) {
          goto LABEL_24;
        }
      }
      uint64_t v21 = *(void *)(v19 + 8);
    }
    unint64_t v22 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v21 + 96))(v21, &llvm::TargetTransformInfoWrapperPass::ID);
    llvm::TargetTransformInfoWrapperPass::getTTI(v22, (const Function *)a2);
    int v17 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v17 = 0;
    uint64_t v12 = v13;
  }
  v69[0] = v70;
  v69[1] = 0x1000000000;
  v70[32] = 0;
  v70[33] = 0;
  v70[34] = v12;
  v70[35] = 0;
  char v71 = 1;
  uint64_t v72 = v76;
  uint64_t v73 = v76;
  uint64_t v74 = 8;
  int v75 = 0;
  memset(&v76[64], 0, 24);
  __int16 v77 = 0;
  if (v12) {
    uint64_t v23 = (llvm::DomTreeUpdater *)v69;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v81 = v83;
  uint64_t v82 = 0x1000000000;
  uint64_t v78 = v80;
  uint64_t v79 = 0x1000000000;
  int8x16_t v24 = a2[10];
  if (v24 == (llvm::LLVMContext **)(a2 + 9)) {
    goto LABEL_68;
  }
  uint64_t v68 = (char **)(v10 + 177232);
  do
  {
    if (v24) {
      unint64_t v25 = v24 - 3;
    }
    else {
      unint64_t v25 = 0;
    }
    int8x16_t v26 = (llvm::LLVMContext **)v25[5];
    if (v26 != v25 + 5)
    {
      uint64_t v27 = v26 ? (uint64_t)(v26 - 3) : 0;
      unsigned int v28 = *(unsigned __int8 *)(v27 + 16) - 40;
      uint64_t v29 = v28 >= 0xFFFFFFF5 ? v27 : 0;
      if (v26)
      {
        if (*(unsigned char *)(v29 + 16) == 34 && v28 >= 0xFFFFFFF5)
        {
          if (v82 >= (unint64_t)HIDWORD(v82)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v81 + v82) = v29;
          LODWORD(v82) = v82 + 1;
        }
      }
    }
    for (uint64_t i = v25[6]; i != (llvm::LLVMContext *)(v25 + 5); uint64_t i = (llvm::LLVMContext *)*((void *)i + 1))
    {
      if (i) {
        uint64_t v32 = (uint64_t)i - 24;
      }
      else {
        uint64_t v32 = 0;
      }
      if (*(unsigned char *)(v32 + 16) != 83)
      {
        if (*((unsigned char *)i - 8) == 94 && (*((_WORD *)i - 3) & 1) != 0)
        {
          if (v79 >= (unint64_t)HIDWORD(v79)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v78 + v79) = (char *)i - 24;
          LODWORD(v79) = v79 + 1;
        }
        break;
      }
    }
    int8x16_t v24 = (llvm::LLVMContext **)v24[1];
  }
  while (v24 != (llvm::LLVMContext **)(a2 + 9));
  if (!v82)
  {
LABEL_68:
    uint64_t v35 = 0;
    goto LABEL_103;
  }
  int v33 = *((_DWORD *)a2 + 5);
  if ((v33 & 0x40000000) != 0) {
    long long v34 = *(a2 - 1);
  }
  else {
    long long v34 = (llvm::Value **)&a2[-4 * (v33 & 0x7FFFFFF)];
  }
  unsigned int v36 = llvm::classifyEHPersonality(*v34, (const llvm::Value *)v80);
  unsigned int v37 = v36;
  if (v36 - 7 < 6 && ((0x2Fu >> (v36 - 7)) & 1) != 0)
  {
    uint64_t v35 = 0;
    goto LABEL_103;
  }
  uint64_t v65 = **a2;
  unint64_t v38 = v82;
  if (v17)
  {
    size_t v87 = (char *)v90;
    int v89 = 6;
    if ((v82 + 63) >= 0x1C0)
    {
      unsigned int v88 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v82 + 63) < 0x40)
    {
      unsigned int v88 = (v82 + 63) >> 6;
      int v91 = v82;
      if (!v82) {
        goto LABEL_90;
      }
      unsigned int v63 = v36;
      uint64_t v66 = v8;
      long long v39 = (uint64_t *)v81;
      uint64_t v40 = (uint64_t *)((char *)v81 + 8 * v82);
    }
    else
    {
      unsigned int v63 = v36;
      uint64_t v66 = v8;
      bzero(v90, 8 * ((v82 + 63) >> 6));
      unsigned int v88 = (v38 + 63) >> 6;
      int v91 = v38;
      long long v39 = (uint64_t *)v81;
      uint64_t v40 = (uint64_t *)((char *)v81 + 8 * v38);
    }
    unsigned int v41 = 0;
    do
    {
      if (v79)
      {
        uint64_t v42 = *v39;
        uint64_t v43 = (uint64_t *)v78;
        uint64_t v44 = 8 * v79;
        while (1)
        {
          uint64_t v45 = *v43;
          uint64_t DomTree = llvm::DomTreeUpdater::getDomTree(v23);
          if (llvm::isPotentiallyReachable(v45, v42, 0, DomTree, 0)) {
            break;
          }
          ++v43;
          v44 -= 8;
          if (!v44) {
            goto LABEL_88;
          }
        }
        *(void *)&v87[8 * (v41 >> 6)] |= 1 << v41;
      }
LABEL_88:
      ++v41;
      ++v39;
    }
    while (v39 != v40);
    LODWORD(v38) = v91;
    uint64_t v8 = v66;
    unsigned int v37 = v63;
LABEL_90:
    unsigned int v47 = v38 >> 6;
    if (v38 < 0x40)
    {
LABEL_96:
      if ((v38 & 0x3F) == 0 || *(void *)&v87[8 * v47] == ~(-1 << (v38 & 0x3F)))
      {
        unint64_t v38 = v82;
LABEL_99:
        if (v87 != (char *)v90) {
          free(v87);
        }
        goto LABEL_101;
      }
    }
    else
    {
      uint64_t v48 = v87;
      if (v47 <= 1) {
        uint64_t v49 = 1;
      }
      else {
        uint64_t v49 = v47;
      }
      while (1)
      {
        uint64_t v50 = *(void *)v48;
        v48 += 8;
        if (v50 != -1) {
          break;
        }
        if (!--v49) {
          goto LABEL_96;
        }
      }
    }
    unsigned int v64 = v37;
    unsigned int v67 = v8;
    uint64_t v58 = v82;
    if (v82)
    {
      uint64_t v59 = 0;
      unint64_t v38 = 0;
      uint64_t v60 = **a2;
      do
      {
        int v61 = (llvm::Instruction *)*((void *)v81 + v59);
        if (((*(void *)&v87[8 * (v59 >> 6)] >> v59) & 1) == 0)
        {
          uint64_t v62 = (llvm::UnreachableInst *)operator new(0x40uLL);
          *((_DWORD *)v62 + 5) &= 0x38000000u;
          llvm::UnreachableInst::UnreachableInst(v62, v60, v61);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        *((void *)v81 + v38++) = v61;
        ++v59;
      }
      while (v58 != v59);
    }
    else
    {
      unint64_t v38 = 0;
    }
    sub_1CD42769C((uint64_t)&v81, v38);
    uint64_t v8 = v67;
    unsigned int v37 = v64;
    goto LABEL_99;
  }
LABEL_101:
  if (v38)
  {
    if ((v37 & 0xFFFFFFFE) == 4
      && (unsigned int v52 = v8[118], v52 <= 0x28)
      && ((1 << v52) & 0x18000000006) != 0
      && (unsigned int v53 = v8[122], v53 <= 0xE)
      && ((1 << v53) & 0x6E30) != 0
      && v8[123] == 3)
    {
      size_t v54 = v68[1];
      uint64_t v55 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(void *)v65 + 1576), 0, 0, 0);
    }
    else
    {
      size_t v54 = *v68;
      uint64_t v56 = (uint64_t **)(*(void *)v65 + 1576);
      size_t v87 = (char *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v65 + 1912), 0);
      uint64_t v55 = (llvm::PointerType *)llvm::FunctionType::get(v56, (uint64_t)&v87, 1, 0);
    }
    if (v54) {
      int v57 = (const char *)strlen(v54);
    }
    else {
      int v57 = 0;
    }
    llvm::Module::getOrInsertFunction((uint64_t)a2[5], (unsigned __int8 *)v54, v57, v55, 0);
    if (v38 == 1) {
      sub_1CC292AD0(*(void *)v81);
    }
    memset(v92, 0, 24);
    sub_1CC292E4C((uint64_t)v92, v82);
    uint64_t v84 = &v86;
    uint64_t v85 = 0x100000000;
    size_t v87 = "unwind_resume";
    v90[8] = 259;
    operator new();
  }
  uint64_t v35 = 1;
LABEL_103:
  if (v78 != v80) {
    free(v78);
  }
  if (v81 != v83) {
    free(v81);
  }
  sub_1CC2930C0((uint64_t)v69);
  return v35;
}

void sub_1CC292AD0(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 - 32);
  if (*((unsigned char *)v2 + 16) == 93) {
    uint64_t v3 = *(void *)(a1 - 32);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 72) == 1 && **(_DWORD **)(v3 + 64) == 1)
    {
      uint64_t v4 = *(void *)(v3 - 64);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 16) == 93
          && *(unsigned __int8 *)(*(void *)(v4 - 64) + 16) - 11 <= 1
          && *(_DWORD *)(v4 + 72) == 1
          && !**(_DWORD **)(v4 + 64)
          && *(void *)(v4 - 32))
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
    }
  }
  unsigned int __src = 0;
  int8x16_t v26 = "exn.obj";
  __int16 v27 = 259;
  uint64_t v5 = (char *)operator new(0x80uLL);
  uint64_t v6 = v5;
  uint64_t v7 = (llvm::Value *)(v5 + 32);
  *((_DWORD *)v5 + 13) = *((_DWORD *)v5 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = v5 + 32;
  uint64_t v8 = *v2;
  int v9 = *(unsigned __int8 *)(*v2 + 8);
  if (*v2) {
    BOOL v10 = v9 == 17;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (*(void *)(v8 + 32) > (unint64_t)__src)
    {
      uint64_t v12 = (uint64_t *)(v8 + 24);
      goto LABEL_23;
    }
  }
  else
  {
    if (v8) {
      BOOL v11 = v9 == 16;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11 && __src < *(_DWORD *)(v8 + 12))
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v8 + 16) + 8 * __src);
LABEL_23:
      uint64_t v13 = *v12;
LABEL_24:
      *(_OWORD *)(v5 + 56) = 0u;
      uint64_t v14 = v5 + 56;
      *((void *)v5 + 4) = v13;
      *((void *)v5 + 5) = 0;
      *((void *)v5 + 6) = 0x10000005CLL;
      *(_OWORD *)(v5 + 72) = 0u;
      *((_DWORD *)v5 + 22) = 0;
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = (uint64_t *)(a1 + 24);
      *((void *)v5 + 9) = v15;
      *(_WORD *)(v15 + 18) &= ~0x8000u;
      if ((v5[55] & 0x10) != 0
        && (uint64_t v21 = *(void *)(v15 + 56)) != 0
        && (unint64_t v22 = *(llvm::ValueSymbolTable **)(v21 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v22, v7);
        uint64_t v23 = *(void *)v6;
        uint64_t v24 = *v16;
        *((void *)v6 + 7) = *v16;
        *((void *)v6 + 8) = v16;
        *(void *)(v24 + 8) = v14;
        *uint64_t v16 = (uint64_t)v14;
        if (v23)
        {
          **((void **)v6 + 2) = *((void *)v6 + 1);
          uint64_t v25 = *((void *)v6 + 1);
          if (v25) {
            *(void *)(v25 + 16) = *((void *)v6 + 2);
          }
        }
      }
      else
      {
        uint64_t v17 = *v16;
        *((void *)v6 + 7) = *v16;
        *((void *)v6 + 8) = v16;
        *(void *)(v17 + 8) = v14;
        *uint64_t v16 = (uint64_t)v14;
      }
      *(void *)uint64_t v6 = v2;
      uint64_t v20 = v2[1];
      uint64_t v19 = v2 + 1;
      uint64_t v18 = v20;
      *((void *)v6 + 1) = v20;
      if (v20) {
        *(void *)(v18 + 16) = v6 + 8;
      }
      *((void *)v6 + 2) = v19;
      *uint64_t v19 = v6;
      *((void *)v6 + 12) = v6 + 112;
      *((void *)v6 + 13) = 0x400000000;
      llvm::ExtractValueInst::init(v7, &__src, 1, &v26);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
  uint64_t v13 = 0;
  goto LABEL_24;
}

void sub_1CC292E4C(uint64_t a1, unint64_t a2)
{
  int v2 = *(unsigned char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = *(unsigned char **)(a1 + 8);
    uint64_t v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v8 = v7;
    if (v5 != v2)
    {
      int v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v8 = v9 - 16;
        *((_OWORD *)v9 - 1) = *((_OWORD *)v5 - 1);
        v5 -= 16;
        v9 -= 16;
      }
      while (v5 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[16 * a2];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

char *sub_1CC292F14(uint64_t a1, int a2, const char **a3, uint64_t a4)
{
  uint64_t v8 = (char *)operator new(0x48uLL);
  *((void *)v8 + 1) = a1;
  int v9 = (uint64_t ***)(v8 + 8);
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0x4000000000000053;
  *((void *)v8 + 6) = a4;
  *((void *)v8 + 7) = 0;
  *(_WORD *)(a4 + 18) &= ~0x8000u;
  uint64_t v10 = *(void *)(a4 + 40);
  a4 += 40;
  *((void *)v8 + 5) = a4;
  *((void *)v8 + 4) = v10;
  *((_DWORD *)v8 + 16) = 0;
  *(void *)(v10 + 8) = v8 + 32;
  *(void *)a4 = v8 + 32;
  *((_DWORD *)v8 + 17) = a2;
  llvm::Value::setNameImpl((llvm::Value *)(v8 + 8), a3);
  if (!v8[24])
  {
    if ((v8[31] & 0x10) == 0) {
      goto LABEL_21;
    }
    uint64_t v15 = ***v9;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v19 = (uint64_t ****)(v16 + 16 * v18);
      uint64_t v20 = *v19;
      if (*v19 == v9)
      {
LABEL_13:
        uint64_t v23 = v19[1];
        unint64_t v26 = (unint64_t)*v23;
        uint64_t v24 = v23 + 2;
        unint64_t v25 = v26;
        if (v26 >= 5 && *(_DWORD *)v24 == *(_DWORD *)"llvm." && v24[4] == aLlvm_1[4])
        {
          *((_DWORD *)v8 + 10) |= 0x2000u;
          int v28 = llvm::Function::lookupIntrinsicID(v24, v25);
LABEL_20:
          *((_DWORD *)v8 + 11) = v28;
          goto LABEL_2;
        }
LABEL_21:
        int v28 = 0;
        *((_DWORD *)v8 + 10) &= ~0x2000u;
        goto LABEL_20;
      }
      int v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        uint64_t v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == v9)
        {
          uint64_t v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_13;
        }
      }
    }
    uint64_t v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_13;
  }
LABEL_2:
  uint64_t v11 = *((unsigned int *)v8 + 17);
  uint64_t v12 = operator new(40 * v11);
  *(void *)uint64_t v8 = v12;
  if (v11)
  {
    uint64_t v13 = &v12[4 * v11];
    do
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      _OWORD v12[2] = 0;
      void v12[3] = v9;
      v12 += 4;
    }
    while (v12 != v13);
  }
  return v8 + 8;
}

uint64_t sub_1CC2930C0(uint64_t a1)
{
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)a1);
  uint64_t v4 = (void **)(a1 + 408);
  sub_1CC29312C(&v4);
  int v2 = *(void **)(a1 + 320);
  if (v2 != *(void **)(a1 + 312)) {
    free(v2);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_1CC29312C(void ***a1)
{
  long long v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD486098(v4 - 9);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC2931B0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineTraceMetricsPass(a1, v3);
  operator new();
}

void sub_1CC293260(llvm *a1)
{
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineBranchProbabilityInfoPass(a1, v2);
  operator new();
}

void sub_1CC293304()
{
}

void sub_1CC29341C(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B3A8;
  free(*(void **)(a1 + 1064));
  int v2 = *(void **)(a1 + 1016);
  if (v2 != (void *)(a1 + 1032)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 944);
  if (v3 != (void *)(a1 + 960)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 856);
  if (v4 != *(void **)(a1 + 848)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 704);
  if (v5 != (void *)(a1 + 720)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 432);
  if (v6 != (void *)(a1 + 448)) {
    free(v6);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192)) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120)) {
    free(v8);
  }
  int v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48)) {
    free(v9);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC29353C(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B3A8;
  free(*(void **)(a1 + 1064));
  int v2 = *(void **)(a1 + 1016);
  if (v2 != (void *)(a1 + 1032)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 944);
  if (v3 != (void *)(a1 + 960)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 856);
  if (v4 != *(void **)(a1 + 848)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 704);
  if (v5 != (void *)(a1 + 720)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 432);
  if (v6 != (void *)(a1 + 448)) {
    free(v6);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192)) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120)) {
    free(v8);
  }
  int v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48)) {
    free(v9);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC293670()
{
  return "Early If-Conversion";
}

void sub_1CC293680(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineTraceMetrics::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineTraceMetrics::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC293750(uint64_t a1, uint64_t a2)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(llvm::LLVMContextImpl *****)a2) & 1) != 0
    || (uint64_t v4 = *(void **)(a2 + 16), !(*(unsigned int (**)(void *))(*v4 + 384))(v4)))
  {
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  *(void *)(a1 + 248) = (*(uint64_t (**)(void *))(*v4 + 104))(v4);
  *(void *)(a1 + 256) = (*(uint64_t (**)(void *))(*v4 + 176))(v4);
  uint64_t v7 = v4[20];
  uint64_t v8 = *(void *)(v7 + 64);
  long long v10 = *(_OWORD *)(v7 + 32);
  long long v9 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(a1 + 296) = v10;
  *(_OWORD *)(a1 + 312) = v9;
  *(void *)(a1 + 328) = v8;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)v7;
  *(void *)(a1 + 336) = *(void *)(a2 + 40);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_8:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::MachineDominatorTree::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_8;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  *(void *)(a1 + 344) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::MachineDominatorTree::ID);
  uint64_t v15 = *(uint64_t **)(a1 + 8);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v15[3], &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass)
  {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
    uint64_t v15 = *(uint64_t **)(a1 + 8);
  }
  *(void *)(a1 + 352) = AnalysisPass;
  uint64_t v17 = *v15;
  uint64_t v18 = v15[1];
  if (*v15 == v18)
  {
LABEL_15:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v17 != &llvm::MachineTraceMetrics::ID)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_15;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  *(void *)(a1 + 360) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 96))(v19, &llvm::MachineTraceMetrics::ID);
  *(void *)(a1 + 368) = 0;
  uint64_t v20 = (uint64_t *)(a1 + 376);
  sub_1CC294A8C(a1 + 376, a2);
  sub_1CD512428((uint64_t)v167, *(void ****)(a1 + 344));
  sub_1CD4BAE30((const void **)&v162, (llvm::SmallPtrSetImplBase *)v167);
  sub_1CD4BAE30((const void **)&v157, (llvm::SmallPtrSetImplBase *)&v168);
  int v5 = 0;
  int v21 = &byte_1EBCCB000;
  while (1)
  {
    if (v165 != v160) {
      goto LABEL_28;
    }
    if (!v165) {
      break;
    }
    int v22 = v159;
    uint64_t v23 = v164;
    while (*v23 == *v22 && v23[1] == v22[1])
    {
      v23 += 2;
      v22 += 2;
      if (v23 == (void *)((char *)v164 + 16 * v165)) {
        goto LABEL_241;
      }
    }
LABEL_28:
    uint64_t v150 = **((void **)v164 + 2 * v165 - 2);
    int v25 = 0;
    if (sub_1CC294C5C(v20, v150, 0))
    {
      int v25 = 0;
      while (2)
      {
        if (v21[1008]) {
          goto LABEL_215;
        }
        uint64_t v26 = *(void *)(a1 + 352);
        int v27 = *(_DWORD *)(v26 + 264);
        if (v27)
        {
          uint64_t v28 = *(void *)(a1 + 400);
          uint64_t v29 = *(void *)(v26 + 248);
          unsigned int v30 = v27 - 1;
          uint64_t v31 = ((v28 >> 4) ^ (v28 >> 9)) & (v27 - 1);
          uint64_t v32 = *(void *)(v29 + 16 * v31);
          if (v28 == v32)
          {
LABEL_36:
            uint64_t v35 = *(llvm::MachineLoop **)(v29 + 16 * v31 + 8);
            if (v35)
            {
              uint64_t v36 = *(unsigned int *)(a1 + 712);
              if (v36)
              {
                unsigned int v37 = *(_DWORD **)(a1 + 704);
                unint64_t v38 = &v37[8 * v36];
                do
                {
                  if ((*v37 & 0x10000FF) == 0)
                  {
                    uint64_t v39 = v37[1];
                    if ((v39 - 1) >= 0x3FFFFFFF)
                    {
                      uint64_t v40 = *(void *)(a1 + 336);
                      if ((v39 & 0x80000000) != 0) {
                        unsigned int v41 = (uint64_t *)(*(void *)(v40 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        unsigned int v41 = (uint64_t *)(*(void *)(v40 + 272) + 8 * v39);
                      }
                      uint64_t v42 = *v41;
                      if ((*(unsigned char *)(v42 + 3) & 1) == 0) {
                        uint64_t v42 = *(void *)(v42 + 24);
                      }
                      uint64_t v43 = *(void *)(v42 + 8);
                      if ((llvm::MachineLoop::isLoopInvariant(v35, (llvm::MachineInstr *)v43) & 1) != 0
                        || (uint64_t v44 = *(unsigned int *)(v43 + 40), !v44))
                      {
LABEL_238:
                        int v21 = &byte_1EBCCB000;
                        goto LABEL_239;
                      }
                      uint64_t v45 = *(unsigned char **)(v43 + 32);
                      uint64_t v46 = 32 * v44;
                      while (1)
                      {
                        if (*v45 != 1)
                        {
                          if ((*v37 & 0x10000FF) != 0) {
                            break;
                          }
                          uint64_t v47 = v37[1];
                          if ((v47 - 1) < 0x3FFFFFFF) {
                            break;
                          }
                          uint64_t v48 = *(void *)(a1 + 336);
                          if ((v47 & 0x80000000) != 0) {
                            uint64_t v49 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
                          }
                          else {
                            uint64_t v49 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v47);
                          }
                          uint64_t v50 = *v49;
                          if ((*(unsigned char *)(v50 + 3) & 1) == 0) {
                            uint64_t v50 = *(void *)(v50 + 24);
                          }
                          if (!llvm::MachineLoop::isLoopInvariant(v35, *(llvm::MachineInstr **)(v50 + 8))) {
                            break;
                          }
                        }
                        v45 += 32;
                        v46 -= 32;
                        if (!v46) {
                          goto LABEL_238;
                        }
                      }
                    }
                  }
                  v37 += 8;
                }
                while (v37 != v38);
              }
            }
          }
          else
          {
            int v33 = 1;
            while (v32 != -4096)
            {
              int v34 = v31 + v33++;
              uint64_t v31 = v34 & v30;
              uint64_t v32 = *(void *)(v29 + 16 * v31);
              if (v28 == v32) {
                goto LABEL_36;
              }
            }
          }
        }
        Ensemble = *(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368);
        if (!Ensemble)
        {
          Ensemble = (llvm::MachineTraceMetrics::Ensemble *)llvm::MachineTraceMetrics::getEnsemble(*(void *)(a1 + 360), 0);
          *(void *)(a1 + 368) = Ensemble;
        }
        unsigned int v52 = *(const llvm::MachineBasicBlock **)(a1 + 416);
        if (v52 == *(const llvm::MachineBasicBlock **)(a1 + 408)) {
          unsigned int v52 = *(const llvm::MachineBasicBlock **)(a1 + 400);
        }
        Trace = llvm::MachineTraceMetrics::Ensemble::getTrace(Ensemble, v52);
        uint64_t v55 = v54;
        v154[0] = Trace;
        v154[1] = v54;
        uint64_t v56 = *(const llvm::MachineBasicBlock **)(a1 + 424);
        if (v56 == *(const llvm::MachineBasicBlock **)(a1 + 408)) {
          uint64_t v56 = *(const llvm::MachineBasicBlock **)(a1 + 400);
        }
        v153[0] = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), v56);
        v153[1] = v57;
        if (*(_DWORD *)(v57 + 36) >= *(_DWORD *)(v55 + 36)) {
          unsigned int v58 = *(_DWORD *)(v55 + 36);
        }
        else {
          unsigned int v58 = *(_DWORD *)(v57 + 36);
        }
        unint64_t v59 = *(unsigned int *)(a1 + 284);
        uint64_t v61 = *(void *)(a1 + 400);
        uint64_t v60 = *(void *)(a1 + 408);
        uint64_t v62 = *(uint64_t ****)(v61 + 32);
        v152[0] = v62;
        v152[1] = 0;
        uint64_t v169 = &v171;
        uint64_t v170 = 0x100000000;
        if (*(void *)(a1 + 416) == v60)
        {
          uint64_t v63 = 0;
        }
        else
        {
          int v171 = *(const llvm::MachineBasicBlock **)(a1 + 416);
          LODWORD(v170) = 1;
          uint64_t v63 = 1;
        }
        unint64_t v64 = v59 >> 1;
        unsigned int ResourceLength = llvm::MachineTraceMetrics::Trace::getResourceLength(v153, &v171, v63, 0, 0, 0, 0);
        if (ResourceLength > v64 + v58)
        {
          unsigned int v66 = ResourceLength;
          uint64_t v67 = *(void *)***v62;
          if (*(void *)(v67 + 128)
            || (*(unsigned int (**)(void))(**(void **)(v67 + 72) + 48))(*(void *)(v67 + 72)))
          {
            uint64_t v68 = v61 + 48;
            unint64_t v69 = *(void *)(v61 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v69 || (*(unsigned char *)v69 & 4) == 0)
            {
              while ((*(_WORD *)(v69 + 44) & 4) != 0)
                unint64_t v69 = *(void *)v69 & 0xFFFFFFFFFFFFFFF8;
            }
            if (v68 == v69)
            {
LABEL_88:
              unint64_t v155 = 0;
            }
            else
            {
              while (1)
              {
                unsigned int v70 = **(unsigned __int16 **)(v69 + 16);
                BOOL v99 = v70 > 0x17;
                int v71 = (1 << v70) & 0x83E000;
                if (v99 || v71 == 0) {
                  break;
                }
                unint64_t v69 = *(void *)(v69 + 8);
                if (v69 == v68) {
                  goto LABEL_88;
                }
              }
              uint64_t v73 = *(unsigned __int8 **)(v69 + 56);
              unint64_t v155 = v73;
              if (v73) {
                llvm::MetadataTracking::track((uint64_t)&v155, v73, 2);
              }
            }
            llvm::DiagnosticLocation::DiagnosticLocation(&v156, (const llvm::DebugLoc *)&v155);
            uint64_t v74 = **(void **)(v61 + 32);
            LODWORD(v173) = 16;
            BYTE4(v173) = 2;
            uint64_t v174 = v74;
            long long v175 = v156;
            size_t v176 = "early-ifcvt";
            long long v177 = "IfConversion";
            uint64_t v178 = 12;
            char v179 = 0;
            char v180 = 0;
            unint64_t v181 = v183;
            uint64_t v182 = 0x400000000;
            char v184 = 0;
            int v185 = -1;
            uint64_t v186 = v61;
            unint64_t FirstTerminator = &unk_1F260B560;
            int v21 = &byte_1EBCCB000;
            if (v155)
            {
              int v75 = *v155;
              if ((v75 - 4) > 0x1E)
              {
                if ((v75 - 3) >= 0xFFFFFFFE) {
                  uint64_t v83 = v155;
                }
                else {
                  uint64_t v83 = 0;
                }
                if ((v75 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v84 = (unint64_t)(v83 + 8);
                  goto LABEL_110;
                }
                if (v75 == 3) {
                  *((void *)v155 + 1) = 0;
                }
              }
              else if ((v155[1] & 0x7F) == 2 || *((_DWORD *)v155 + 3))
              {
                uint64_t v140 = *((void *)v155 + 2);
                if ((v140 & 4) != 0)
                {
                  unint64_t v84 = v140 & 0xFFFFFFFFFFFFFFF8;
                  if (v84)
                  {
LABEL_110:
                    v151[0] = &v155;
                    sub_1CC5FA668(v84 + 16, v151);
                  }
                }
              }
            }
            *(void *)&long long v156 = "did not if-convert branch: the resulting critical path (";
            *((void *)&v156 + 1) = 56;
            sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
            uint64_t v76 = sub_1CC296830((uint64_t)&FirstTerminator, "ResLength", v66);
            *(void *)&long long v156 = ") would extend the shorter leg's critical path (";
            *((void *)&v156 + 1) = 48;
            sub_1CC59ADEC((uint64_t *)(v76 + 80), (uint64_t)&v156);
            uint64_t v77 = sub_1CC296830(v76, "MinCrit", v58);
            *(void *)&long long v156 = ") by more than the threshold of ";
            *((void *)&v156 + 1) = 32;
            sub_1CC59ADEC((uint64_t *)(v77 + 80), (uint64_t)&v156);
            uint64_t v78 = sub_1CC296830(v77, "CritLimit", v64);
            *(void *)&long long v156 = ", which cannot be hidden by available ILP.";
            *((void *)&v156 + 1) = 42;
            sub_1CC59ADEC((uint64_t *)(v78 + 80), (uint64_t)&v156);
            llvm::MachineOptimizationRemarkEmitter::emit(v152, (llvm::DiagnosticInfoOptimizationBase *)&FirstTerminator);
            unint64_t FirstTerminator = &unk_1F2616800;
            uint64_t v79 = (char *)v181;
            if (v182)
            {
              unint64_t v80 = (unint64_t)v182 << 6;
              do
              {
                uint64_t v81 = (void **)&v79[v80];
                if (v79[v80 - 17] < 0) {
                  operator delete(*(v81 - 5));
                }
                if (*((char *)v81 - 41) < 0) {
                  operator delete(*(v81 - 8));
                }
                v80 -= 64;
              }
              while (v80);
              goto LABEL_208;
            }
            goto LABEL_209;
          }
          int v82 = 0;
LABEL_104:
          int v21 = &byte_1EBCCB000;
          goto LABEL_212;
        }
        uint64_t v85 = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), *(const llvm::MachineBasicBlock **)(a1 + 400));
        unint64_t FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 400));
        *(void *)&long long v156 = 0;
        LODWORD(v145) = 0;
        if (sub_1CD3C8538((uint64_t *)v85 + 47, &FirstTerminator, &v156)) {
          uint64_t v145 = *(void *)(v156 + 8);
        }
        uint64_t v86 = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), *(const llvm::MachineBasicBlock **)(a1 + 408));
        v151[0] = v86;
        v151[1] = v87;
        uint64_t v88 = *(unsigned int *)(a1 + 440);
        unsigned int v146 = v64;
        if (v88)
        {
          unsigned int v141 = v20;
          int v142 = v5;
          uint64_t v89 = 0;
          unsigned int v147 = 0;
          unsigned int v90 = 0;
          unsigned int v149 = 0;
          uint64_t v143 = 32 * v88;
          uint64_t v144 = (uint64_t *)((char *)v86 + 376);
          char v91 = 1;
          do
          {
            uint64_t v92 = *(void *)(a1 + 432);
            InstrSlacint k = llvm::MachineTraceMetrics::Trace::getInstrSlack((llvm::MachineTraceMetrics::Trace *)v151, *(const llvm::MachineInstr **)(v92 + v89));
            unint64_t FirstTerminator = *(void **)(v92 + v89);
            *(void *)&long long v156 = 0;
            int v94 = sub_1CD3C8538(v144, &FirstTerminator, &v156);
            LODWORD(v95) = 0;
            if (v94) {
              uint64_t v95 = *(void *)(v156 + 8);
            }
            unsigned int v96 = InstrSlack + v95;
            uint64_t v97 = v92 + v89;
            int v98 = *(_DWORD *)(v97 + 16);
            BOOL v99 = v98 + (int)v145 > v145 && v98 < 0;
            if (v99) {
              unsigned int v100 = 0;
            }
            else {
              unsigned int v100 = v98 + v145;
            }
            if (v100 - v96 <= v149) {
              unsigned int v101 = v149;
            }
            else {
              unsigned int v101 = v100 - v96;
            }
            if (v100 > v96) {
              unsigned int v102 = v101;
            }
            else {
              unsigned int v102 = v149;
            }
            unsigned int v149 = v102;
            if (v100 > v96) {
              v91 &= v100 - v96 <= v146;
            }
            unsigned int PHIDepth = llvm::MachineTraceMetrics::Trace::getPHIDepth((llvm::MachineTraceMetrics::Trace *)v154, *(const llvm::MachineInstr **)v97);
            int v104 = *(_DWORD *)(v97 + 20);
            if (v104 + PHIDepth > PHIDepth && v104 < 0) {
              unsigned int v106 = 0;
            }
            else {
              unsigned int v106 = v104 + PHIDepth;
            }
            unsigned int v107 = v147;
            if (v106 - v96 <= v147) {
              unsigned int v108 = v147;
            }
            else {
              unsigned int v108 = v106 - v96;
            }
            if (v106 > v96) {
              unsigned int v107 = v108;
            }
            unsigned int v147 = v107;
            if (v106 > v96) {
              v91 &= v106 - v96 <= v146;
            }
            unsigned int v109 = llvm::MachineTraceMetrics::Trace::getPHIDepth((llvm::MachineTraceMetrics::Trace *)v153, *(const llvm::MachineInstr **)v97);
            int v110 = *(_DWORD *)(v97 + 24);
            if (v110 + v109 > v109 && v110 < 0) {
              unsigned int v112 = 0;
            }
            else {
              unsigned int v112 = v110 + v109;
            }
            if (v112 - v96 <= v90) {
              unsigned int v113 = v90;
            }
            else {
              unsigned int v113 = v112 - v96;
            }
            if (v112 > v96)
            {
              unsigned int v90 = v113;
              v91 &= v112 - v96 <= v146;
            }
            v89 += 32;
          }
          while (v143 != v89);
          if (v147 >= v90) {
            unsigned int v114 = v90;
          }
          else {
            unsigned int v114 = v147;
          }
          if (v147 <= v90) {
            unsigned int v115 = v90;
          }
          else {
            unsigned int v115 = v147;
          }
          unsigned int v148 = v115;
          if ((v91 & 1) == 0)
          {
            uint64_t v125 = *(void *)***v62;
            int v5 = v142;
            uint64_t v20 = v141;
            if (!*(void *)(v125 + 128)
              && !(*(unsigned int (**)(void))(**(void **)(v125 + 72) + 48))(*(void *)(v125 + 72)))
            {
              int v82 = 0;
              goto LABEL_104;
            }
            unint64_t v126 = *(void *)(v61 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v126 || (*(unsigned char *)v126 & 4) == 0)
            {
              while ((*(_WORD *)(v126 + 44) & 4) != 0)
                unint64_t v126 = *(void *)v126 & 0xFFFFFFFFFFFFFFF8;
            }
            llvm::DiagnosticLocation::DiagnosticLocation(&v156, (const llvm::DebugLoc *)(v126 + 56));
            uint64_t v127 = **(void **)(v61 + 32);
            LODWORD(v173) = 16;
            BYTE4(v173) = 2;
            uint64_t v174 = v127;
            long long v175 = v156;
            size_t v176 = "early-ifcvt";
            long long v177 = "IfConversion";
            uint64_t v178 = 12;
            char v179 = 0;
            char v180 = 0;
            unint64_t v181 = v183;
            uint64_t v182 = 0x400000000;
            char v184 = 0;
            int v185 = -1;
            uint64_t v186 = v61;
            unint64_t FirstTerminator = &unk_1F260B560;
            *(void *)&long long v156 = "did not if-convert branch: the condition would add ";
            *((void *)&v156 + 1) = 51;
            sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
            uint64_t v128 = sub_1CC296830((uint64_t)&FirstTerminator, "CondCycles", v149);
            *(void *)&long long v156 = " to the critical path";
            *((void *)&v156 + 1) = 21;
            sub_1CC59ADEC((uint64_t *)(v128 + 80), (uint64_t)&v156);
            if (v149 > v146)
            {
              *(void *)&long long v156 = " exceeding the limit of ";
              *((void *)&v156 + 1) = 24;
              sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
              sub_1CC296830((uint64_t)&FirstTerminator, "CritLimit", v146);
            }
            int v21 = &byte_1EBCCB000;
            if (v114)
            {
              *(void *)&long long v156 = ", and the short leg would add another ";
              *((void *)&v156 + 1) = 38;
              sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
              sub_1CC296830((uint64_t)&FirstTerminator, "ShortCycles", v114);
              if (v114 > v146)
              {
                *(void *)&long long v156 = " exceeding the limit of ";
                *((void *)&v156 + 1) = 24;
                sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
                sub_1CC296830((uint64_t)&FirstTerminator, "CritLimit", v146);
              }
            }
            if (v148)
            {
              *(void *)&long long v156 = ", and the long leg would add another ";
              *((void *)&v156 + 1) = 37;
              sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
              sub_1CC296830((uint64_t)&FirstTerminator, "LongCycles", v148);
              if (v148 > v146)
              {
                *(void *)&long long v156 = " exceeding the limit of ";
                *((void *)&v156 + 1) = 24;
                sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
                sub_1CC296830((uint64_t)&FirstTerminator, "CritLimit", v146);
              }
            }
            *(void *)&long long v156 = ".";
            *((void *)&v156 + 1) = 1;
            sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
            llvm::MachineOptimizationRemarkEmitter::emit(v152, (llvm::DiagnosticInfoOptimizationBase *)&FirstTerminator);
            unint64_t FirstTerminator = &unk_1F2616800;
            uint64_t v79 = (char *)v181;
            if (v182)
            {
              unint64_t v129 = (unint64_t)v182 << 6;
              do
              {
                int64_t v130 = (void **)&v79[v129];
                if (v79[v129 - 17] < 0) {
                  operator delete(*(v130 - 5));
                }
                if (*((char *)v130 - 41) < 0) {
                  operator delete(*(v130 - 8));
                }
                v129 -= 64;
              }
              while (v129);
LABEL_208:
              uint64_t v79 = (char *)v181;
            }
LABEL_209:
            if (v79 != v183) {
              free(v79);
            }
            int v82 = 0;
LABEL_212:
            if (v169 != &v171) {
              free(v169);
            }
            if (!v82) {
              goto LABEL_239;
            }
LABEL_215:
            (*(void (**)(void))(**(void **)(a1 + 360) + 120))(*(void *)(a1 + 360));
            uint64_t v131 = *(void *)(a1 + 360);
            long long v132 = *(int **)(a1 + 400);
            uint64_t v133 = *(void *)(v131 + 568);
            *(_DWORD *)(v133 + 8 * v132[6]) = -1;
            if (!*(void *)(v131 + 632))
            {
              *(_DWORD *)(v133 + 8 * *(int *)(*(void *)(a1 + 408) + 24)) = -1;
LABEL_217:
              *(_DWORD *)(v133 + 8 * *(int *)(*(void *)(a1 + 416) + 24)) = -1;
              goto LABEL_218;
            }
            llvm::MachineTraceMetrics::Ensemble::invalidate(*(llvm::MachineTraceMetrics::Ensemble **)(v131 + 632), (const llvm::MachineBasicBlock *)v132);
            uint64_t v131 = *(void *)(a1 + 360);
            uint64_t v133 = *(void *)(v131 + 568);
            int v134 = *(llvm::MachineTraceMetrics::Ensemble **)(v131 + 632);
            char v135 = *(int **)(a1 + 408);
            *(_DWORD *)(v133 + 8 * v135[6]) = -1;
            if (!v134) {
              goto LABEL_217;
            }
            llvm::MachineTraceMetrics::Ensemble::invalidate(v134, (const llvm::MachineBasicBlock *)v135);
            uint64_t v131 = *(void *)(a1 + 360);
            uint64_t v133 = *(void *)(v131 + 568);
            uint64_t v136 = *(llvm::MachineTraceMetrics::Ensemble **)(v131 + 632);
            uint64_t v137 = *(int **)(a1 + 416);
            *(_DWORD *)(v133 + 8 * v137[6]) = -1;
            if (v136)
            {
              llvm::MachineTraceMetrics::Ensemble::invalidate(v136, (const llvm::MachineBasicBlock *)v137);
              uint64_t v131 = *(void *)(a1 + 360);
              int v138 = *(llvm::MachineTraceMetrics::Ensemble **)(v131 + 632);
              uint64_t v139 = *(int **)(a1 + 424);
              *(_DWORD *)(*(void *)(v131 + 568) + 8 * v139[6]) = -1;
              if (v138)
              {
                llvm::MachineTraceMetrics::Ensemble::invalidate(v138, (const llvm::MachineBasicBlock *)v139);
                uint64_t v131 = *(void *)(a1 + 360);
              }
              goto LABEL_219;
            }
LABEL_218:
            *(_DWORD *)(v133 + 8 * *(int *)(*(void *)(a1 + 424) + 24)) = -1;
LABEL_219:
            (*(void (**)(uint64_t))(*(void *)v131 + 120))(v131);
            unint64_t FirstTerminator = &v174;
            uint64_t v173 = 0x400000000;
            sub_1CC29557C(v20, (uint64_t)&FirstTerminator, 0);
            sub_1CC2960C8(*(void *)(a1 + 344), *(void *)(a1 + 400), (uint64_t *)FirstTerminator, v173);
            if (*(void *)(a1 + 352) && v173) {
              llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock();
            }
            if (FirstTerminator != &v174) {
              free(FirstTerminator);
            }
            int v25 = 1;
            if ((sub_1CC294C5C(v20, v150, 0) & 1) == 0) {
              goto LABEL_239;
            }
            continue;
          }
          int v5 = v142;
          uint64_t v20 = v141;
          unsigned int v116 = v149;
        }
        else
        {
          unsigned int v148 = 0;
          unsigned int v114 = 0;
          unsigned int v116 = 0;
        }
        break;
      }
      uint64_t v117 = *(void *)***v62;
      if (!*(void *)(v117 + 128)
        && !(*(unsigned int (**)(void))(**(void **)(v117 + 72) + 48))(*(void *)(v117 + 72)))
      {
        int v82 = 1;
        goto LABEL_104;
      }
      unint64_t v118 = *(void *)(v61 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (!v118 || (*(unsigned char *)v118 & 4) == 0)
      {
        while ((*(_WORD *)(v118 + 44) & 4) != 0)
          unint64_t v118 = *(void *)v118 & 0xFFFFFFFFFFFFFFF8;
      }
      llvm::DiagnosticLocation::DiagnosticLocation(&v156, (const llvm::DebugLoc *)(v118 + 56));
      uint64_t v119 = **(void **)(v61 + 32);
      LODWORD(v173) = 15;
      BYTE4(v173) = 2;
      uint64_t v174 = v119;
      long long v175 = v156;
      size_t v176 = "early-ifcvt";
      long long v177 = "IfConversion";
      uint64_t v178 = 12;
      char v179 = 0;
      char v180 = 0;
      unint64_t v181 = v183;
      uint64_t v182 = 0x400000000;
      char v184 = 0;
      int v185 = -1;
      uint64_t v186 = v61;
      unint64_t FirstTerminator = &unk_1F260B468;
      *(void *)&long long v156 = "performing if-conversion on branch: the condition adds ";
      *((void *)&v156 + 1) = 55;
      sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
      uint64_t v120 = sub_1CC296830((uint64_t)&FirstTerminator, "CondCycles", v116);
      *(void *)&long long v156 = " to the critical path";
      *((void *)&v156 + 1) = 21;
      sub_1CC59ADEC((uint64_t *)(v120 + 80), (uint64_t)&v156);
      if (v114)
      {
        *(void *)&long long v156 = ", and the short leg adds another ";
        *((void *)&v156 + 1) = 33;
        sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
        sub_1CC296830((uint64_t)&FirstTerminator, "ShortCycles", v114);
      }
      int v21 = &byte_1EBCCB000;
      if (v148)
      {
        *(void *)&long long v156 = ", and the long leg adds another ";
        *((void *)&v156 + 1) = 32;
        sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
        sub_1CC296830((uint64_t)&FirstTerminator, "LongCycles", v148);
      }
      *(void *)&long long v156 = ", each staying under the threshold of ";
      *((void *)&v156 + 1) = 38;
      sub_1CC59ADEC((uint64_t *)&v181, (uint64_t)&v156);
      uint64_t v121 = sub_1CC296830((uint64_t)&FirstTerminator, "CritLimit", v146);
      *(void *)&long long v156 = ".";
      *((void *)&v156 + 1) = 1;
      sub_1CC59ADEC((uint64_t *)(v121 + 80), (uint64_t)&v156);
      llvm::MachineOptimizationRemarkEmitter::emit(v152, (llvm::DiagnosticInfoOptimizationBase *)&FirstTerminator);
      unint64_t FirstTerminator = &unk_1F2616800;
      int v122 = (char *)v181;
      if (v182)
      {
        unint64_t v123 = (unint64_t)v182 << 6;
        do
        {
          uint64_t v124 = (void **)&v122[v123];
          if (v122[v123 - 17] < 0) {
            operator delete(*(v124 - 5));
          }
          if (*((char *)v124 - 41) < 0) {
            operator delete(*(v124 - 8));
          }
          v123 -= 64;
        }
        while (v123);
        int v122 = (char *)v181;
      }
      if (v122 != v183) {
        free(v122);
      }
      int v82 = 1;
      goto LABEL_212;
    }
LABEL_239:
    v5 |= v25;
    if (--v165) {
      sub_1CD4BAD50(&v162);
    }
  }
LABEL_241:
  if (v159 != &v161) {
    free(v159);
  }
  if (v158 != v157) {
    free(v158);
  }
  if (v164 != &v166) {
    free(v164);
  }
  if (v163 != v162) {
    free(v163);
  }
  sub_1CD4B9AEC(v167);
  return v5 & 1;
}